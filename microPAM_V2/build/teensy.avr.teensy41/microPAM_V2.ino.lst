
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\B6A2B96C86D1458F5F30CD00E995713A/microPAM_V2.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 fd0c 	bl	60001e48 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 fcb8 	bl	60001e58 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 feda 	bl	600022d4 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f001 f869 	bl	60002608 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 fce8 	bl	60001f50 <configure_external_ram>
	analog_init();
60001580:	f001 f80c 	bl	6000259c <analog_init>
	pwm_init();
60001584:	f001 f83c 	bl	60002600 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fed2 	bl	60002330 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 fc5e 	bl	60001e4c <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 ff63 	bl	60002460 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 fc57 	bl	60001e54 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 fc53 	bl	60001e50 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f001 f83d 	bl	60002628 <____libc_init_array_veneer>
	main();
600015ae:	f001 f847 	bl	60002640 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	000143e8 	.word	0x000143e8
600015c0:	60002870 	.word	0x60002870
600015c4:	00000000 	.word	0x00000000
600015c8:	20008ec0 	.word	0x20008ec0
600015cc:	60016c5c 	.word	0x60016c5c
600015d0:	20000000 	.word	0x20000000
600015d4:	2001ece0 	.word	0x2001ece0
600015d8:	20008ec0 	.word	0x20008ec0
600015dc:	20008c00 	.word	0x20008c00
600015e0:	0000813d 	.word	0x0000813d
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	00007741 	.word	0x00007741
600015f4:	2001ec54 	.word	0x2001ec54
600015f8:	00007745 	.word	0x00007745
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	016e3600 	.word	0x016e3600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	2001ec58 	.word	0x2001ec58
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001654:	4b7c      	ldr	r3, [pc, #496]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001656:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
6000165a:	2a0b      	cmp	r2, #11
{
6000165c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001660:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
60001662:	d11c      	bne.n	6000169e <CrashReportClass::printTo(Print&) const+0x4a>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001664:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001668:	4978      	ldr	r1, [pc, #480]	; (6000184c <CrashReportClass::printTo(Print&) const+0x1f8>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
6000166a:	4b79      	ldr	r3, [pc, #484]	; (60001850 <CrashReportClass::printTo(Print&) const+0x1fc>)
	while (data < end) {
6000166c:	4e79      	ldr	r6, [pc, #484]	; (60001854 <CrashReportClass::printTo(Print&) const+0x200>)
		crc ^= *data++;
6000166e:	f101 0c04 	add.w	ip, r1, #4
60001672:	4050      	eors	r0, r2
60001674:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001676:	f000 0201 	and.w	r2, r0, #1
6000167a:	3c01      	subs	r4, #1
6000167c:	fb03 f202 	mul.w	r2, r3, r2
60001680:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
60001684:	d1f7      	bne.n	60001676 <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
60001686:	45b4      	cmp	ip, r6
60001688:	d002      	beq.n	60001690 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
6000168a:	684a      	ldr	r2, [r1, #4]
6000168c:	4661      	mov	r1, ip
6000168e:	e7ee      	b.n	6000166e <CrashReportClass::printTo(Print&) const+0x1a>
	}
	if (crc != info->crc) return 0;
60001690:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 60001848 <CrashReportClass::printTo(Print&) const+0x1f4>
60001694:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001698:	4298      	cmp	r0, r3
6000169a:	f000 80fd 	beq.w	60001898 <CrashReportClass::printTo(Print&) const+0x244>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
6000169e:	682b      	ldr	r3, [r5, #0]
600016a0:	2217      	movs	r2, #23
600016a2:	496d      	ldr	r1, [pc, #436]	; (60001858 <CrashReportClass::printTo(Print&) const+0x204>)
600016a4:	4628      	mov	r0, r5
600016a6:	685b      	ldr	r3, [r3, #4]
600016a8:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600016aa:	4628      	mov	r0, r5
600016ac:	f000 ffcc 	bl	60002648 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016b0:	682b      	ldr	r3, [r5, #0]
600016b2:	2248      	movs	r2, #72	; 0x48
600016b4:	4969      	ldr	r1, [pc, #420]	; (6000185c <CrashReportClass::printTo(Print&) const+0x208>)
600016b6:	685b      	ldr	r3, [r3, #4]
600016b8:	4628      	mov	r0, r5
600016ba:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016bc:	4628      	mov	r0, r5
600016be:	f000 ffc3 	bl	60002648 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016c2:	682b      	ldr	r3, [r5, #0]
600016c4:	2249      	movs	r2, #73	; 0x49
600016c6:	4966      	ldr	r1, [pc, #408]	; (60001860 <CrashReportClass::printTo(Print&) const+0x20c>)
600016c8:	685b      	ldr	r3, [r3, #4]
600016ca:	4628      	mov	r0, r5
600016cc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016ce:	4628      	mov	r0, r5
600016d0:	f000 ffba 	bl	60002648 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016d4:	682b      	ldr	r3, [r5, #0]
600016d6:	2224      	movs	r2, #36	; 0x24
600016d8:	4962      	ldr	r1, [pc, #392]	; (60001864 <CrashReportClass::printTo(Print&) const+0x210>)
600016da:	685b      	ldr	r3, [r3, #4]
600016dc:	4628      	mov	r0, r5
600016de:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016e0:	4628      	mov	r0, r5
600016e2:	f000 ffb1 	bl	60002648 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016e6:	682b      	ldr	r3, [r5, #0]
600016e8:	2247      	movs	r2, #71	; 0x47
600016ea:	495f      	ldr	r1, [pc, #380]	; (60001868 <CrashReportClass::printTo(Print&) const+0x214>)
600016ec:	685b      	ldr	r3, [r3, #4]
600016ee:	4628      	mov	r0, r5
600016f0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016f2:	4628      	mov	r0, r5
600016f4:	f000 ffa8 	bl	60002648 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016f8:	682b      	ldr	r3, [r5, #0]
600016fa:	223f      	movs	r2, #63	; 0x3f
600016fc:	495b      	ldr	r1, [pc, #364]	; (6000186c <CrashReportClass::printTo(Print&) const+0x218>)
600016fe:	685b      	ldr	r3, [r3, #4]
60001700:	4628      	mov	r0, r5
60001702:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001704:	4628      	mov	r0, r5
60001706:	f000 ff9f 	bl	60002648 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
6000170a:	4b59      	ldr	r3, [pc, #356]	; (60001870 <CrashReportClass::printTo(Print&) const+0x21c>)
6000170c:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
6000170e:	07a2      	lsls	r2, r4, #30
60001710:	d50d      	bpl.n	6000172e <CrashReportClass::printTo(Print&) const+0xda>
    uint32_t gpr5 = SRC_GPR5;
60001712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
60001714:	4b57      	ldr	r3, [pc, #348]	; (60001874 <CrashReportClass::printTo(Print&) const+0x220>)
60001716:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
60001718:	682b      	ldr	r3, [r5, #0]
6000171a:	f000 81b8 	beq.w	60001a8e <CrashReportClass::printTo(Print&) const+0x43a>
6000171e:	2240      	movs	r2, #64	; 0x40
60001720:	4955      	ldr	r1, [pc, #340]	; (60001878 <CrashReportClass::printTo(Print&) const+0x224>)
60001722:	685b      	ldr	r3, [r3, #4]
60001724:	4628      	mov	r0, r5
60001726:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001728:	4628      	mov	r0, r5
6000172a:	f000 ff8d 	bl	60002648 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
6000172e:	0763      	lsls	r3, r4, #29
60001730:	f100 81a3 	bmi.w	60001a7a <CrashReportClass::printTo(Print&) const+0x426>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001734:	0727      	lsls	r7, r4, #28
60001736:	f100 8196 	bmi.w	60001a66 <CrashReportClass::printTo(Print&) const+0x412>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
6000173a:	06e6      	lsls	r6, r4, #27
6000173c:	f100 8189 	bmi.w	60001a52 <CrashReportClass::printTo(Print&) const+0x3fe>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001740:	06a0      	lsls	r0, r4, #26
60001742:	f100 817c 	bmi.w	60001a3e <CrashReportClass::printTo(Print&) const+0x3ea>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001746:	0661      	lsls	r1, r4, #25
60001748:	f100 816f 	bmi.w	60001a2a <CrashReportClass::printTo(Print&) const+0x3d6>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000174c:	0622      	lsls	r2, r4, #24
6000174e:	f100 8134 	bmi.w	600019ba <CrashReportClass::printTo(Print&) const+0x366>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001752:	05e3      	lsls	r3, r4, #23
60001754:	f100 813d 	bmi.w	600019d2 <CrashReportClass::printTo(Print&) const+0x37e>
  if (bc->bitmask) {
60001758:	4f3b      	ldr	r7, [pc, #236]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
6000175a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
6000175e:	2b00      	cmp	r3, #0
60001760:	d051      	beq.n	60001806 <CrashReportClass::printTo(Print&) const+0x1b2>
60001762:	2401      	movs	r4, #1
							  return write((const uint8_t *)str, strlen(str)); }
60001764:	f8df 912c 	ldr.w	r9, [pc, #300]	; 60001894 <CrashReportClass::printTo(Print&) const+0x240>
60001768:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6000188c <CrashReportClass::printTo(Print&) const+0x238>
6000176c:	e004      	b.n	60001778 <CrashReportClass::printTo(Print&) const+0x124>
    for (int i=0; i < 6; i++) {
6000176e:	3401      	adds	r4, #1
60001770:	2c07      	cmp	r4, #7
60001772:	d039      	beq.n	600017e8 <CrashReportClass::printTo(Print&) const+0x194>
      if (bc->bitmask & (1 << i)) {
60001774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
60001778:	1e62      	subs	r2, r4, #1
6000177a:	2601      	movs	r6, #1
6000177c:	fa06 f102 	lsl.w	r1, r6, r2
60001780:	4219      	tst	r1, r3
60001782:	d0f4      	beq.n	6000176e <CrashReportClass::printTo(Print&) const+0x11a>
60001784:	682b      	ldr	r3, [r5, #0]
60001786:	eb08 0a82 	add.w	sl, r8, r2, lsl #2
6000178a:	4649      	mov	r1, r9
6000178c:	220e      	movs	r2, #14
6000178e:	685b      	ldr	r3, [r3, #4]
60001790:	4628      	mov	r0, r5
60001792:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001794:	4621      	mov	r1, r4
60001796:	4628      	mov	r0, r5
    for (int i=0; i < 6; i++) {
60001798:	3401      	adds	r4, #1
6000179a:	f000 ff4d 	bl	60002638 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000179e:	682b      	ldr	r3, [r5, #0]
600017a0:	2205      	movs	r2, #5
600017a2:	4936      	ldr	r1, [pc, #216]	; (6000187c <CrashReportClass::printTo(Print&) const+0x228>)
600017a4:	685b      	ldr	r3, [r3, #4]
600017a6:	4628      	mov	r0, r5
600017a8:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600017aa:	2300      	movs	r3, #0
600017ac:	f8da 1004 	ldr.w	r1, [sl, #4]
600017b0:	220a      	movs	r2, #10
600017b2:	4628      	mov	r0, r5
600017b4:	f000 ff30 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017b8:	682b      	ldr	r3, [r5, #0]
600017ba:	2204      	movs	r2, #4
600017bc:	4930      	ldr	r1, [pc, #192]	; (60001880 <CrashReportClass::printTo(Print&) const+0x22c>)
600017be:	685b      	ldr	r3, [r3, #4]
600017c0:	4628      	mov	r0, r5
600017c2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600017c4:	f8da 1004 	ldr.w	r1, [sl, #4]
600017c8:	2300      	movs	r3, #0
600017ca:	2210      	movs	r2, #16
600017cc:	4628      	mov	r0, r5
600017ce:	f000 ff23 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017d2:	682b      	ldr	r3, [r5, #0]
600017d4:	4632      	mov	r2, r6
600017d6:	492b      	ldr	r1, [pc, #172]	; (60001884 <CrashReportClass::printTo(Print&) const+0x230>)
600017d8:	685b      	ldr	r3, [r3, #4]
600017da:	4628      	mov	r0, r5
600017dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017de:	4628      	mov	r0, r5
600017e0:	f000 ff32 	bl	60002648 <___ZN5Print7printlnEv_veneer>
600017e4:	2c07      	cmp	r4, #7
600017e6:	d1c5      	bne.n	60001774 <CrashReportClass::printTo(Print&) const+0x120>
    *(volatile uint32_t *)(&bc->bitmask) = 0;
600017e8:	4b27      	ldr	r3, [pc, #156]	; (60001888 <CrashReportClass::printTo(Print&) const+0x234>)
600017ea:	2200      	movs	r2, #0
600017ec:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600017f0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
600017f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600017f8:	4a24      	ldr	r2, [pc, #144]	; (6000188c <CrashReportClass::printTo(Print&) const+0x238>)
600017fa:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600017fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001802:	f3bf 8f6f 	isb	sy
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001806:	4a10      	ldr	r2, [pc, #64]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001808:	2300      	movs	r3, #0
	info->ipsr  = 0;
6000180a:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
6000180e:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001812:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001816:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
6000181a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000181e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001822:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001826:	4809      	ldr	r0, [pc, #36]	; (6000184c <CrashReportClass::printTo(Print&) const+0x1f8>)
60001828:	4919      	ldr	r1, [pc, #100]	; (60001890 <CrashReportClass::printTo(Print&) const+0x23c>)
6000182a:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
6000182e:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001832:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001836:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000183a:	4a0d      	ldr	r2, [pc, #52]	; (60001870 <CrashReportClass::printTo(Print&) const+0x21c>)
}
6000183c:	2001      	movs	r0, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000183e:	6891      	ldr	r1, [r2, #8]
60001840:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001842:	6313      	str	r3, [r2, #48]	; 0x30
}
60001844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60001848:	2027ff00 	.word	0x2027ff00
6000184c:	2027ff80 	.word	0x2027ff80
60001850:	edb88320 	.word	0xedb88320
60001854:	2027ffa8 	.word	0x2027ffa8
60001858:	20008000 	.word	0x20008000
6000185c:	20008018 	.word	0x20008018
60001860:	20008064 	.word	0x20008064
60001864:	200080b0 	.word	0x200080b0
60001868:	200080d8 	.word	0x200080d8
6000186c:	20008120 	.word	0x20008120
60001870:	400f8000 	.word	0x400f8000
60001874:	0bad00f1 	.word	0x0bad00f1
60001878:	200081ac 	.word	0x200081ac
6000187c:	20008384 	.word	0x20008384
60001880:	2000838c 	.word	0x2000838c
60001884:	200080ac 	.word	0x200080ac
60001888:	2027f000 	.word	0x2027f000
6000188c:	2027ffc0 	.word	0x2027ffc0
60001890:	2027ffa0 	.word	0x2027ffa0
60001894:	20008374 	.word	0x20008374
							  return write((const uint8_t *)str, strlen(str)); }
60001898:	682b      	ldr	r3, [r5, #0]
6000189a:	220c      	movs	r2, #12
6000189c:	49aa      	ldr	r1, [pc, #680]	; (60001b48 <CrashReportClass::printTo(Print&) const+0x4f4>)
6000189e:	4628      	mov	r0, r5
600018a0:	685b      	ldr	r3, [r3, #4]
600018a2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018a4:	4628      	mov	r0, r5
600018a6:	f000 fecf 	bl	60002648 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018aa:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
600018ac:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
600018b0:	4628      	mov	r0, r5
    info->time /= 60;
600018b2:	4ba6      	ldr	r3, [pc, #664]	; (60001b4c <CrashReportClass::printTo(Print&) const+0x4f8>)
600018b4:	f8d2 a004 	ldr.w	sl, [r2, #4]
600018b8:	fba3 2709 	umull	r2, r7, r3, r9
600018bc:	49a4      	ldr	r1, [pc, #656]	; (60001b50 <CrashReportClass::printTo(Print&) const+0x4fc>)
600018be:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
600018c0:	fba3 2307 	umull	r2, r3, r3, r7
600018c4:	2226      	movs	r2, #38	; 0x26
600018c6:	095e      	lsrs	r6, r3, #5
600018c8:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
600018cc:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
600018ce:	49a1      	ldr	r1, [pc, #644]	; (60001b54 <CrashReportClass::printTo(Print&) const+0x500>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018d0:	220a      	movs	r2, #10
600018d2:	4628      	mov	r0, r5
600018d4:	fba1 3106 	umull	r3, r1, r1, r6
600018d8:	4623      	mov	r3, r4
600018da:	0909      	lsrs	r1, r1, #4
600018dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
600018e0:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
600018e4:	f000 fe98 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018e8:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
600018ea:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
600018ee:	2201      	movs	r2, #1
600018f0:	685b      	ldr	r3, [r3, #4]
600018f2:	4628      	mov	r0, r5
600018f4:	4998      	ldr	r1, [pc, #608]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x504>)
600018f6:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018f8:	4623      	mov	r3, r4
600018fa:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
600018fe:	220a      	movs	r2, #10
60001900:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
60001902:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
60001906:	f000 fe87 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000190a:	682b      	ldr	r3, [r5, #0]
6000190c:	2201      	movs	r2, #1
6000190e:	4992      	ldr	r1, [pc, #584]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x504>)
60001910:	685b      	ldr	r3, [r3, #4]
60001912:	4628      	mov	r0, r5
60001914:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001916:	4623      	mov	r3, r4
60001918:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
6000191c:	220a      	movs	r2, #10
6000191e:	4628      	mov	r0, r5
60001920:	f000 fe7a 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001924:	4628      	mov	r0, r5
60001926:	f000 fe8f 	bl	60002648 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000192a:	682b      	ldr	r3, [r5, #0]
6000192c:	2224      	movs	r2, #36	; 0x24
6000192e:	498b      	ldr	r1, [pc, #556]	; (60001b5c <CrashReportClass::printTo(Print&) const+0x508>)
60001930:	685b      	ldr	r3, [r3, #4]
60001932:	4628      	mov	r0, r5
60001934:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001936:	4623      	mov	r3, r4
60001938:	2210      	movs	r2, #16
6000193a:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
6000193e:	4628      	mov	r0, r5
60001940:	f000 fe6a 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001944:	4628      	mov	r0, r5
60001946:	f000 fe7f 	bl	60002648 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
6000194a:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
6000194e:	2e00      	cmp	r6, #0
60001950:	f040 80a0 	bne.w	60001a94 <CrashReportClass::printTo(Print&) const+0x440>
    uint32_t _HFSR = info->hfsr;
60001954:	4e82      	ldr	r6, [pc, #520]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x50c>)
60001956:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
6000195a:	2c00      	cmp	r4, #0
6000195c:	f040 80bb 	bne.w	60001ad6 <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001960:	682b      	ldr	r3, [r5, #0]
60001962:	2222      	movs	r2, #34	; 0x22
60001964:	497f      	ldr	r1, [pc, #508]	; (60001b64 <CrashReportClass::printTo(Print&) const+0x510>)
60001966:	4628      	mov	r0, r5
60001968:	685b      	ldr	r3, [r3, #4]
6000196a:	4798      	blx	r3
    p.print(info->temp);
6000196c:	4b7c      	ldr	r3, [pc, #496]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x50c>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
6000196e:	2102      	movs	r1, #2
60001970:	4628      	mov	r0, r5
60001972:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001976:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
6000197a:	f000 fe51 	bl	60002620 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000197e:	682b      	ldr	r3, [r5, #0]
60001980:	2205      	movs	r2, #5
60001982:	4979      	ldr	r1, [pc, #484]	; (60001b68 <CrashReportClass::printTo(Print&) const+0x514>)
60001984:	685b      	ldr	r3, [r3, #4]
60001986:	4628      	mov	r0, r5
60001988:	4798      	blx	r3
6000198a:	682b      	ldr	r3, [r5, #0]
6000198c:	221d      	movs	r2, #29
6000198e:	4977      	ldr	r1, [pc, #476]	; (60001b6c <CrashReportClass::printTo(Print&) const+0x518>)
60001990:	685b      	ldr	r3, [r3, #4]
60001992:	4628      	mov	r0, r5
60001994:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001996:	4a76      	ldr	r2, [pc, #472]	; (60001b70 <CrashReportClass::printTo(Print&) const+0x51c>)
60001998:	4876      	ldr	r0, [pc, #472]	; (60001b74 <CrashReportClass::printTo(Print&) const+0x520>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000199a:	2300      	movs	r3, #0
6000199c:	6811      	ldr	r1, [r2, #0]
6000199e:	220a      	movs	r2, #10
600019a0:	fba0 0101 	umull	r0, r1, r0, r1
600019a4:	4628      	mov	r0, r5
600019a6:	0c89      	lsrs	r1, r1, #18
600019a8:	f000 fe36 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019ac:	682b      	ldr	r3, [r5, #0]
600019ae:	2204      	movs	r2, #4
600019b0:	4971      	ldr	r1, [pc, #452]	; (60001b78 <CrashReportClass::printTo(Print&) const+0x524>)
600019b2:	685b      	ldr	r3, [r3, #4]
600019b4:	4628      	mov	r0, r5
600019b6:	4798      	blx	r3
600019b8:	e6a7      	b.n	6000170a <CrashReportClass::printTo(Print&) const+0xb6>
600019ba:	682b      	ldr	r3, [r5, #0]
600019bc:	2221      	movs	r2, #33	; 0x21
600019be:	496f      	ldr	r1, [pc, #444]	; (60001b7c <CrashReportClass::printTo(Print&) const+0x528>)
600019c0:	4628      	mov	r0, r5
600019c2:	685b      	ldr	r3, [r3, #4]
600019c4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019c6:	4628      	mov	r0, r5
600019c8:	f000 fe3e 	bl	60002648 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
600019cc:	05e3      	lsls	r3, r4, #23
600019ce:	f57f aec3 	bpl.w	60001758 <CrashReportClass::printTo(Print&) const+0x104>
							  return write((const uint8_t *)str, strlen(str)); }
600019d2:	682b      	ldr	r3, [r5, #0]
600019d4:	2229      	movs	r2, #41	; 0x29
600019d6:	496a      	ldr	r1, [pc, #424]	; (60001b80 <CrashReportClass::printTo(Print&) const+0x52c>)
600019d8:	4628      	mov	r0, r5
600019da:	685b      	ldr	r3, [r3, #4]
600019dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019de:	4628      	mov	r0, r5
600019e0:	f000 fe32 	bl	60002648 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
600019e4:	4967      	ldr	r1, [pc, #412]	; (60001b84 <CrashReportClass::printTo(Print&) const+0x530>)
							  return write((const uint8_t *)str, strlen(str)); }
600019e6:	6828      	ldr	r0, [r5, #0]
600019e8:	2221      	movs	r2, #33	; 0x21
600019ea:	688b      	ldr	r3, [r1, #8]
600019ec:	6844      	ldr	r4, [r0, #4]
600019ee:	4628      	mov	r0, r5
600019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
600019f4:	608b      	str	r3, [r1, #8]
600019f6:	4964      	ldr	r1, [pc, #400]	; (60001b88 <CrashReportClass::printTo(Print&) const+0x534>)
600019f8:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
600019fa:	4628      	mov	r0, r5
600019fc:	f000 fe24 	bl	60002648 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a00:	682b      	ldr	r3, [r5, #0]
60001a02:	2242      	movs	r2, #66	; 0x42
60001a04:	4961      	ldr	r1, [pc, #388]	; (60001b8c <CrashReportClass::printTo(Print&) const+0x538>)
60001a06:	685b      	ldr	r3, [r3, #4]
60001a08:	4628      	mov	r0, r5
60001a0a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a0c:	4628      	mov	r0, r5
60001a0e:	f000 fe1b 	bl	60002648 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a12:	4a5f      	ldr	r2, [pc, #380]	; (60001b90 <CrashReportClass::printTo(Print&) const+0x53c>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001a14:	4b5f      	ldr	r3, [pc, #380]	; (60001b94 <CrashReportClass::printTo(Print&) const+0x540>)
60001a16:	2107      	movs	r1, #7
60001a18:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001a20:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001a22:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001a26:	bf30      	wfi
60001a28:	e7fd      	b.n	60001a26 <CrashReportClass::printTo(Print&) const+0x3d2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a2a:	682b      	ldr	r3, [r5, #0]
60001a2c:	2221      	movs	r2, #33	; 0x21
60001a2e:	495a      	ldr	r1, [pc, #360]	; (60001b98 <CrashReportClass::printTo(Print&) const+0x544>)
60001a30:	4628      	mov	r0, r5
60001a32:	685b      	ldr	r3, [r3, #4]
60001a34:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a36:	4628      	mov	r0, r5
60001a38:	f000 fe06 	bl	60002648 <___ZN5Print7printlnEv_veneer>
60001a3c:	e686      	b.n	6000174c <CrashReportClass::printTo(Print&) const+0xf8>
							  return write((const uint8_t *)str, strlen(str)); }
60001a3e:	682b      	ldr	r3, [r5, #0]
60001a40:	2229      	movs	r2, #41	; 0x29
60001a42:	4956      	ldr	r1, [pc, #344]	; (60001b9c <CrashReportClass::printTo(Print&) const+0x548>)
60001a44:	4628      	mov	r0, r5
60001a46:	685b      	ldr	r3, [r3, #4]
60001a48:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a4a:	4628      	mov	r0, r5
60001a4c:	f000 fdfc 	bl	60002648 <___ZN5Print7printlnEv_veneer>
60001a50:	e679      	b.n	60001746 <CrashReportClass::printTo(Print&) const+0xf2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a52:	682b      	ldr	r3, [r5, #0]
60001a54:	2226      	movs	r2, #38	; 0x26
60001a56:	4952      	ldr	r1, [pc, #328]	; (60001ba0 <CrashReportClass::printTo(Print&) const+0x54c>)
60001a58:	4628      	mov	r0, r5
60001a5a:	685b      	ldr	r3, [r3, #4]
60001a5c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a5e:	4628      	mov	r0, r5
60001a60:	f000 fdf2 	bl	60002648 <___ZN5Print7printlnEv_veneer>
60001a64:	e66c      	b.n	60001740 <CrashReportClass::printTo(Print&) const+0xec>
							  return write((const uint8_t *)str, strlen(str)); }
60001a66:	682b      	ldr	r3, [r5, #0]
60001a68:	222a      	movs	r2, #42	; 0x2a
60001a6a:	494e      	ldr	r1, [pc, #312]	; (60001ba4 <CrashReportClass::printTo(Print&) const+0x550>)
60001a6c:	4628      	mov	r0, r5
60001a6e:	685b      	ldr	r3, [r3, #4]
60001a70:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a72:	4628      	mov	r0, r5
60001a74:	f000 fde8 	bl	60002648 <___ZN5Print7printlnEv_veneer>
60001a78:	e65f      	b.n	6000173a <CrashReportClass::printTo(Print&) const+0xe6>
							  return write((const uint8_t *)str, strlen(str)); }
60001a7a:	682b      	ldr	r3, [r5, #0]
60001a7c:	2227      	movs	r2, #39	; 0x27
60001a7e:	494a      	ldr	r1, [pc, #296]	; (60001ba8 <CrashReportClass::printTo(Print&) const+0x554>)
60001a80:	4628      	mov	r0, r5
60001a82:	685b      	ldr	r3, [r3, #4]
60001a84:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a86:	4628      	mov	r0, r5
60001a88:	f000 fdde 	bl	60002648 <___ZN5Print7printlnEv_veneer>
60001a8c:	e652      	b.n	60001734 <CrashReportClass::printTo(Print&) const+0xe0>
							  return write((const uint8_t *)str, strlen(str)); }
60001a8e:	2248      	movs	r2, #72	; 0x48
60001a90:	4946      	ldr	r1, [pc, #280]	; (60001bac <CrashReportClass::printTo(Print&) const+0x558>)
60001a92:	e646      	b.n	60001722 <CrashReportClass::printTo(Print&) const+0xce>
60001a94:	682b      	ldr	r3, [r5, #0]
60001a96:	2208      	movs	r2, #8
60001a98:	4945      	ldr	r1, [pc, #276]	; (60001bb0 <CrashReportClass::printTo(Print&) const+0x55c>)
60001a9a:	4628      	mov	r0, r5
60001a9c:	685b      	ldr	r3, [r3, #4]
60001a9e:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001aa0:	4623      	mov	r3, r4
60001aa2:	2210      	movs	r2, #16
60001aa4:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001aa8:	4628      	mov	r0, r5
60001aaa:	f000 fdb5 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001aae:	4628      	mov	r0, r5
60001ab0:	f000 fdca 	bl	60002648 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001ab4:	07f4      	lsls	r4, r6, #31
60001ab6:	d427      	bmi.n	60001b08 <CrashReportClass::printTo(Print&) const+0x4b4>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001ab8:	07b0      	lsls	r0, r6, #30
60001aba:	f100 811d 	bmi.w	60001cf8 <CrashReportClass::printTo(Print&) const+0x6a4>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001abe:	0731      	lsls	r1, r6, #28
60001ac0:	f100 810e 	bmi.w	60001ce0 <CrashReportClass::printTo(Print&) const+0x68c>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001ac4:	06f2      	lsls	r2, r6, #27
60001ac6:	f100 8127 	bmi.w	60001d18 <CrashReportClass::printTo(Print&) const+0x6c4>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001aca:	06b3      	lsls	r3, r6, #26
60001acc:	d525      	bpl.n	60001b1a <CrashReportClass::printTo(Print&) const+0x4c6>
							  return write((const uint8_t *)str, strlen(str)); }
60001ace:	682b      	ldr	r3, [r5, #0]
60001ad0:	222a      	movs	r2, #42	; 0x2a
60001ad2:	4938      	ldr	r1, [pc, #224]	; (60001bb4 <CrashReportClass::printTo(Print&) const+0x560>)
60001ad4:	e01b      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001ad6:	682b      	ldr	r3, [r5, #0]
60001ad8:	2208      	movs	r2, #8
60001ada:	4937      	ldr	r1, [pc, #220]	; (60001bb8 <CrashReportClass::printTo(Print&) const+0x564>)
60001adc:	4628      	mov	r0, r5
60001ade:	685b      	ldr	r3, [r3, #4]
60001ae0:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ae2:	2300      	movs	r3, #0
60001ae4:	2210      	movs	r2, #16
60001ae6:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001aea:	4628      	mov	r0, r5
60001aec:	f000 fd94 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001af0:	4628      	mov	r0, r5
60001af2:	f000 fda9 	bl	60002648 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001af6:	07a0      	lsls	r0, r4, #30
60001af8:	d466      	bmi.n	60001bc8 <CrashReportClass::printTo(Print&) const+0x574>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001afa:	0061      	lsls	r1, r4, #1
60001afc:	f57f af30 	bpl.w	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001b00:	682b      	ldr	r3, [r5, #0]
60001b02:	221b      	movs	r2, #27
60001b04:	492d      	ldr	r1, [pc, #180]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x568>)
60001b06:	e062      	b.n	60001bce <CrashReportClass::printTo(Print&) const+0x57a>
60001b08:	682b      	ldr	r3, [r5, #0]
60001b0a:	2228      	movs	r2, #40	; 0x28
60001b0c:	492c      	ldr	r1, [pc, #176]	; (60001bc0 <CrashReportClass::printTo(Print&) const+0x56c>)
60001b0e:	685b      	ldr	r3, [r3, #4]
60001b10:	4628      	mov	r0, r5
60001b12:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b14:	4628      	mov	r0, r5
60001b16:	f000 fd97 	bl	60002648 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001b1a:	0637      	lsls	r7, r6, #24
60001b1c:	d47d      	bmi.n	60001c1a <CrashReportClass::printTo(Print&) const+0x5c6>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001b1e:	05f4      	lsls	r4, r6, #23
60001b20:	d45c      	bmi.n	60001bdc <CrashReportClass::printTo(Print&) const+0x588>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001b22:	05b0      	lsls	r0, r6, #22
60001b24:	f100 80e4 	bmi.w	60001cf0 <CrashReportClass::printTo(Print&) const+0x69c>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001b28:	0571      	lsls	r1, r6, #21
60001b2a:	f100 80dd 	bmi.w	60001ce8 <CrashReportClass::printTo(Print&) const+0x694>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001b2e:	0532      	lsls	r2, r6, #20
60001b30:	f100 80ee 	bmi.w	60001d10 <CrashReportClass::printTo(Print&) const+0x6bc>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001b34:	04f3      	lsls	r3, r6, #19
60001b36:	f100 80e7 	bmi.w	60001d08 <CrashReportClass::printTo(Print&) const+0x6b4>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001b3a:	04b7      	lsls	r7, r6, #18
60001b3c:	d557      	bpl.n	60001bee <CrashReportClass::printTo(Print&) const+0x59a>
							  return write((const uint8_t *)str, strlen(str)); }
60001b3e:	682b      	ldr	r3, [r5, #0]
60001b40:	2231      	movs	r2, #49	; 0x31
60001b42:	4920      	ldr	r1, [pc, #128]	; (60001bc4 <CrashReportClass::printTo(Print&) const+0x570>)
60001b44:	e04d      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001b46:	bf00      	nop
60001b48:	20007ae8 	.word	0x20007ae8
60001b4c:	88888889 	.word	0x88888889
60001b50:	20007af8 	.word	0x20007af8
60001b54:	aaaaaaab 	.word	0xaaaaaaab
60001b58:	20007b20 	.word	0x20007b20
60001b5c:	20007b24 	.word	0x20007b24
60001b60:	2027ff00 	.word	0x2027ff00
60001b64:	20007fac 	.word	0x20007fac
60001b68:	20007fd0 	.word	0x20007fd0
60001b6c:	20007fd8 	.word	0x20007fd8
60001b70:	200085a8 	.word	0x200085a8
60001b74:	431bde83 	.word	0x431bde83
60001b78:	20007ff8 	.word	0x20007ff8
60001b7c:	200082bc 	.word	0x200082bc
60001b80:	200082e0 	.word	0x200082e0
60001b84:	400f8000 	.word	0x400f8000
60001b88:	2000830c 	.word	0x2000830c
60001b8c:	20008330 	.word	0x20008330
60001b90:	400d4000 	.word	0x400d4000
60001b94:	400ac000 	.word	0x400ac000
60001b98:	20008298 	.word	0x20008298
60001b9c:	2000826c 	.word	0x2000826c
60001ba0:	20008244 	.word	0x20008244
60001ba4:	20008218 	.word	0x20008218
60001ba8:	200081f0 	.word	0x200081f0
60001bac:	20008160 	.word	0x20008160
60001bb0:	20007b4c 	.word	0x20007b4c
60001bb4:	20007bfc 	.word	0x20007bfc
60001bb8:	20007f5c 	.word	0x20007f5c
60001bbc:	20007f90 	.word	0x20007f90
60001bc0:	20007b58 	.word	0x20007b58
60001bc4:	20007e20 	.word	0x20007e20
60001bc8:	682b      	ldr	r3, [r5, #0]
60001bca:	2226      	movs	r2, #38	; 0x26
60001bcc:	495c      	ldr	r1, [pc, #368]	; (60001d40 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001bce:	4628      	mov	r0, r5
60001bd0:	685b      	ldr	r3, [r3, #4]
60001bd2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bd4:	4628      	mov	r0, r5
60001bd6:	f000 fd37 	bl	60002648 <___ZN5Print7printlnEv_veneer>
60001bda:	e6c1      	b.n	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001bdc:	682b      	ldr	r3, [r5, #0]
60001bde:	2220      	movs	r2, #32
60001be0:	4958      	ldr	r1, [pc, #352]	; (60001d44 <CrashReportClass::printTo(Print&) const+0x6f0>)
60001be2:	685b      	ldr	r3, [r3, #4]
60001be4:	4628      	mov	r0, r5
60001be6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001be8:	4628      	mov	r0, r5
60001bea:	f000 fd2d 	bl	60002648 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001bee:	0434      	lsls	r4, r6, #16
60001bf0:	d43f      	bmi.n	60001c72 <CrashReportClass::printTo(Print&) const+0x61e>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001bf2:	03f0      	lsls	r0, r6, #15
60001bf4:	d42d      	bmi.n	60001c52 <CrashReportClass::printTo(Print&) const+0x5fe>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001bf6:	03b1      	lsls	r1, r6, #14
60001bf8:	f100 8082 	bmi.w	60001d00 <CrashReportClass::printTo(Print&) const+0x6ac>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001bfc:	0372      	lsls	r2, r6, #13
60001bfe:	d44a      	bmi.n	60001c96 <CrashReportClass::printTo(Print&) const+0x642>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001c00:	0333      	lsls	r3, r6, #12
60001c02:	f100 8091 	bmi.w	60001d28 <CrashReportClass::printTo(Print&) const+0x6d4>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001c06:	01f7      	lsls	r7, r6, #7
60001c08:	f100 808a 	bmi.w	60001d20 <CrashReportClass::printTo(Print&) const+0x6cc>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001c0c:	01b4      	lsls	r4, r6, #6
60001c0e:	f57f aea1 	bpl.w	60001954 <CrashReportClass::printTo(Print&) const+0x300>
							  return write((const uint8_t *)str, strlen(str)); }
60001c12:	682b      	ldr	r3, [r5, #0]
60001c14:	221b      	movs	r2, #27
60001c16:	494c      	ldr	r1, [pc, #304]	; (60001d48 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001c18:	e01e      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001c1a:	682b      	ldr	r3, [r5, #0]
60001c1c:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001c1e:	4c4b      	ldr	r4, [pc, #300]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001c20:	4628      	mov	r0, r5
60001c22:	494b      	ldr	r1, [pc, #300]	; (60001d50 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001c24:	685b      	ldr	r3, [r3, #4]
60001c26:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c28:	2210      	movs	r2, #16
60001c2a:	2300      	movs	r3, #0
60001c2c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001c30:	4628      	mov	r0, r5
60001c32:	f000 fcf1 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001c36:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001c3a:	2a1f      	cmp	r2, #31
60001c3c:	d92f      	bls.n	60001c9e <CrashReportClass::printTo(Print&) const+0x64a>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001c3e:	4b45      	ldr	r3, [pc, #276]	; (60001d54 <CrashReportClass::printTo(Print&) const+0x700>)
60001c40:	429a      	cmp	r2, r3
60001c42:	d302      	bcc.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001c44:	3320      	adds	r3, #32
60001c46:	429a      	cmp	r2, r3
60001c48:	d372      	bcc.n	60001d30 <CrashReportClass::printTo(Print&) const+0x6dc>
        p.println();
60001c4a:	4628      	mov	r0, r5
60001c4c:	f000 fcfc 	bl	60002648 <___ZN5Print7printlnEv_veneer>
60001c50:	e765      	b.n	60001b1e <CrashReportClass::printTo(Print&) const+0x4ca>
							  return write((const uint8_t *)str, strlen(str)); }
60001c52:	682b      	ldr	r3, [r5, #0]
60001c54:	2223      	movs	r2, #35	; 0x23
60001c56:	4940      	ldr	r1, [pc, #256]	; (60001d58 <CrashReportClass::printTo(Print&) const+0x704>)
60001c58:	685b      	ldr	r3, [r3, #4]
60001c5a:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001c5c:	4e3b      	ldr	r6, [pc, #236]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001c5e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c60:	4628      	mov	r0, r5
60001c62:	f000 fcf1 	bl	60002648 <___ZN5Print7printlnEv_veneer>
60001c66:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001c6a:	2c00      	cmp	r4, #0
60001c6c:	f43f ae78 	beq.w	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
60001c70:	e731      	b.n	60001ad6 <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001c72:	682b      	ldr	r3, [r5, #0]
60001c74:	2221      	movs	r2, #33	; 0x21
60001c76:	4939      	ldr	r1, [pc, #228]	; (60001d5c <CrashReportClass::printTo(Print&) const+0x708>)
60001c78:	4628      	mov	r0, r5
60001c7a:	685b      	ldr	r3, [r3, #4]
60001c7c:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001c7e:	4933      	ldr	r1, [pc, #204]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c80:	2300      	movs	r3, #0
60001c82:	2210      	movs	r2, #16
60001c84:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001c88:	4628      	mov	r0, r5
60001c8a:	f000 fcc5 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001c8e:	4628      	mov	r0, r5
60001c90:	f000 fcda 	bl	60002648 <___ZN5Print7printlnEv_veneer>
60001c94:	e7ad      	b.n	60001bf2 <CrashReportClass::printTo(Print&) const+0x59e>
							  return write((const uint8_t *)str, strlen(str)); }
60001c96:	682b      	ldr	r3, [r5, #0]
60001c98:	2228      	movs	r2, #40	; 0x28
60001c9a:	4931      	ldr	r1, [pc, #196]	; (60001d60 <CrashReportClass::printTo(Print&) const+0x70c>)
60001c9c:	e7dc      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001c9e:	682b      	ldr	r3, [r5, #0]
60001ca0:	221e      	movs	r2, #30
60001ca2:	4930      	ldr	r1, [pc, #192]	; (60001d64 <CrashReportClass::printTo(Print&) const+0x710>)
60001ca4:	4628      	mov	r0, r5
60001ca6:	685b      	ldr	r3, [r3, #4]
60001ca8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001caa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001cae:	2300      	movs	r3, #0
60001cb0:	2210      	movs	r2, #16
60001cb2:	4628      	mov	r0, r5
60001cb4:	f000 fcb0 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cb8:	682b      	ldr	r3, [r5, #0]
60001cba:	223e      	movs	r2, #62	; 0x3e
60001cbc:	492a      	ldr	r1, [pc, #168]	; (60001d68 <CrashReportClass::printTo(Print&) const+0x714>)
60001cbe:	685b      	ldr	r3, [r3, #4]
60001cc0:	4628      	mov	r0, r5
60001cc2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cc4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001cc8:	2300      	movs	r3, #0
60001cca:	2210      	movs	r2, #16
60001ccc:	4628      	mov	r0, r5
60001cce:	f000 fca3 	bl	60002618 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cd2:	682b      	ldr	r3, [r5, #0]
60001cd4:	221d      	movs	r2, #29
60001cd6:	4925      	ldr	r1, [pc, #148]	; (60001d6c <CrashReportClass::printTo(Print&) const+0x718>)
60001cd8:	685b      	ldr	r3, [r3, #4]
60001cda:	4628      	mov	r0, r5
60001cdc:	4798      	blx	r3
60001cde:	e7b4      	b.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001ce0:	682b      	ldr	r3, [r5, #0]
60001ce2:	2229      	movs	r2, #41	; 0x29
60001ce4:	4922      	ldr	r1, [pc, #136]	; (60001d70 <CrashReportClass::printTo(Print&) const+0x71c>)
60001ce6:	e712      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001ce8:	682b      	ldr	r3, [r5, #0]
60001cea:	2244      	movs	r2, #68	; 0x44
60001cec:	4921      	ldr	r1, [pc, #132]	; (60001d74 <CrashReportClass::printTo(Print&) const+0x720>)
60001cee:	e778      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001cf0:	682b      	ldr	r3, [r5, #0]
60001cf2:	222c      	movs	r2, #44	; 0x2c
60001cf4:	4920      	ldr	r1, [pc, #128]	; (60001d78 <CrashReportClass::printTo(Print&) const+0x724>)
60001cf6:	e774      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001cf8:	682b      	ldr	r3, [r5, #0]
60001cfa:	2221      	movs	r2, #33	; 0x21
60001cfc:	491f      	ldr	r1, [pc, #124]	; (60001d7c <CrashReportClass::printTo(Print&) const+0x728>)
60001cfe:	e706      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001d00:	682b      	ldr	r3, [r5, #0]
60001d02:	2232      	movs	r2, #50	; 0x32
60001d04:	491e      	ldr	r1, [pc, #120]	; (60001d80 <CrashReportClass::printTo(Print&) const+0x72c>)
60001d06:	e7a7      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d08:	682b      	ldr	r3, [r5, #0]
60001d0a:	2233      	movs	r2, #51	; 0x33
60001d0c:	491d      	ldr	r1, [pc, #116]	; (60001d84 <CrashReportClass::printTo(Print&) const+0x730>)
60001d0e:	e768      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001d10:	682b      	ldr	r3, [r5, #0]
60001d12:	223f      	movs	r2, #63	; 0x3f
60001d14:	491c      	ldr	r1, [pc, #112]	; (60001d88 <CrashReportClass::printTo(Print&) const+0x734>)
60001d16:	e764      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001d18:	682b      	ldr	r3, [r5, #0]
60001d1a:	2225      	movs	r2, #37	; 0x25
60001d1c:	491b      	ldr	r1, [pc, #108]	; (60001d8c <CrashReportClass::printTo(Print&) const+0x738>)
60001d1e:	e6f6      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001d20:	682b      	ldr	r3, [r5, #0]
60001d22:	2228      	movs	r2, #40	; 0x28
60001d24:	491a      	ldr	r1, [pc, #104]	; (60001d90 <CrashReportClass::printTo(Print&) const+0x73c>)
60001d26:	e797      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d28:	682b      	ldr	r3, [r5, #0]
60001d2a:	2216      	movs	r2, #22
60001d2c:	4919      	ldr	r1, [pc, #100]	; (60001d94 <CrashReportClass::printTo(Print&) const+0x740>)
60001d2e:	e793      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d30:	682b      	ldr	r3, [r5, #0]
60001d32:	2241      	movs	r2, #65	; 0x41
60001d34:	4918      	ldr	r1, [pc, #96]	; (60001d98 <CrashReportClass::printTo(Print&) const+0x744>)
60001d36:	4628      	mov	r0, r5
60001d38:	685b      	ldr	r3, [r3, #4]
60001d3a:	4798      	blx	r3
60001d3c:	e785      	b.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001d3e:	bf00      	nop
60001d40:	20007f68 	.word	0x20007f68
60001d44:	20007d10 	.word	0x20007d10
60001d48:	20007f40 	.word	0x20007f40
60001d4c:	2027ff00 	.word	0x2027ff00
60001d50:	20007c28 	.word	0x20007c28
60001d54:	2001ece0 	.word	0x2001ece0
60001d58:	20007e78 	.word	0x20007e78
60001d5c:	20007e54 	.word	0x20007e54
60001d60:	20007ed0 	.word	0x20007ed0
60001d64:	20007c4c 	.word	0x20007c4c
60001d68:	20007c6c 	.word	0x20007c6c
60001d6c:	20007cac 	.word	0x20007cac
60001d70:	20007ba8 	.word	0x20007ba8
60001d74:	20007d64 	.word	0x20007d64
60001d78:	20007d34 	.word	0x20007d34
60001d7c:	20007b84 	.word	0x20007b84
60001d80:	20007e9c 	.word	0x20007e9c
60001d84:	20007dec 	.word	0x20007dec
60001d88:	20007dac 	.word	0x20007dac
60001d8c:	20007bd4 	.word	0x20007bd4
60001d90:	20007f14 	.word	0x20007f14
60001d94:	20007efc 	.word	0x20007efc
60001d98:	20007ccc 	.word	0x20007ccc

60001d9c <CrashReportClass::clear()>:
	info->len = 0;
60001d9c:	4a0f      	ldr	r2, [pc, #60]	; (60001ddc <CrashReportClass::clear()+0x40>)
60001d9e:	2300      	movs	r3, #0
	info->ipsr  = 0;
60001da0:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->hfsr  = 0;
60001da4:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->bfar  = 0;
60001da8:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->xpsr  = 0;
60001dac:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001db0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	asm("dsb");
60001db4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
60001db8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001dbc:	4808      	ldr	r0, [pc, #32]	; (60001de0 <CrashReportClass::clear()+0x44>)
60001dbe:	4909      	ldr	r1, [pc, #36]	; (60001de4 <CrashReportClass::clear()+0x48>)
60001dc0:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
60001dc4:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
	asm("dsb");
60001dc8:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001dcc:	f3bf 8f6f 	isb	sy
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001dd0:	4a05      	ldr	r2, [pc, #20]	; (60001de8 <CrashReportClass::clear()+0x4c>)
60001dd2:	6891      	ldr	r1, [r2, #8]
60001dd4:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001dd6:	6313      	str	r3, [r2, #48]	; 0x30
}
60001dd8:	4770      	bx	lr
60001dda:	bf00      	nop
60001ddc:	2027ff00 	.word	0x2027ff00
60001de0:	2027ff80 	.word	0x2027ff80
60001de4:	2027ffa0 	.word	0x2027ffa0
60001de8:	400f8000 	.word	0x400f8000

60001dec <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001dec:	4b12      	ldr	r3, [pc, #72]	; (60001e38 <CrashReportClass::operator bool()+0x4c>)
60001dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001df2:	2b0b      	cmp	r3, #11
60001df4:	d11e      	bne.n	60001e34 <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001df6:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001dfa:	4810      	ldr	r0, [pc, #64]	; (60001e3c <CrashReportClass::operator bool()+0x50>)
{
60001dfc:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001dfe:	4d10      	ldr	r5, [pc, #64]	; (60001e40 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001e00:	4c10      	ldr	r4, [pc, #64]	; (60001e44 <CrashReportClass::operator bool()+0x58>)
60001e02:	e001      	b.n	60001e08 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001e04:	686b      	ldr	r3, [r5, #4]
60001e06:	4675      	mov	r5, lr
60001e08:	f105 0e04 	add.w	lr, r5, #4
60001e0c:	405a      	eors	r2, r3
60001e0e:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e10:	f002 0301 	and.w	r3, r2, #1
60001e14:	3901      	subs	r1, #1
60001e16:	fb00 f303 	mul.w	r3, r0, r3
60001e1a:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001e1e:	d1f7      	bne.n	60001e10 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001e20:	45a6      	cmp	lr, r4
60001e22:	d1ef      	bne.n	60001e04 <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001e24:	4b04      	ldr	r3, [pc, #16]	; (60001e38 <CrashReportClass::operator bool()+0x4c>)
60001e26:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001e2a:	1a80      	subs	r0, r0, r2
60001e2c:	fab0 f080 	clz	r0, r0
60001e30:	0940      	lsrs	r0, r0, #5
}
60001e32:	bd30      	pop	{r4, r5, pc}
	return false;
60001e34:	2000      	movs	r0, #0
}
60001e36:	4770      	bx	lr
60001e38:	2027ff00 	.word	0x2027ff00
60001e3c:	edb88320 	.word	0xedb88320
60001e40:	2027ff80 	.word	0x2027ff80
60001e44:	2027ffa8 	.word	0x2027ffa8

60001e48 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001e48:	4770      	bx	lr
60001e4a:	bf00      	nop

60001e4c <startup_default_middle_hook>:
60001e4c:	4770      	bx	lr
60001e4e:	bf00      	nop

60001e50 <startup_default_late_hook>:
60001e50:	4770      	bx	lr
60001e52:	bf00      	nop

60001e54 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001e54:	bf00      	nop
60001e56:	4770      	bx	lr

60001e58 <configure_cache>:
{
60001e58:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001e5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e5e:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e60:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e62:	482b      	ldr	r0, [pc, #172]	; (60001f10 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001e64:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e68:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e6c:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e6e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001e72:	4828      	ldr	r0, [pc, #160]	; (60001f14 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e74:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001e78:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001e7a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001e7e:	4826      	ldr	r0, [pc, #152]	; (60001f18 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001e80:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001e84:	4a25      	ldr	r2, [pc, #148]	; (60001f1c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001e86:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001e8a:	4c25      	ldr	r4, [pc, #148]	; (60001f20 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001e8c:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001e90:	4824      	ldr	r0, [pc, #144]	; (60001f24 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001e92:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001e96:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001e9a:	4c23      	ldr	r4, [pc, #140]	; (60001f28 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001e9c:	4823      	ldr	r0, [pc, #140]	; (60001f2c <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001e9e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001ea2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001ea6:	4c22      	ldr	r4, [pc, #136]	; (60001f30 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001ea8:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001eac:	4821      	ldr	r0, [pc, #132]	; (60001f34 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001eae:	4a22      	ldr	r2, [pc, #136]	; (60001f38 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001eb0:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001eb4:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001eb8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ebc:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ec0:	4c1e      	ldr	r4, [pc, #120]	; (60001f3c <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ec2:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ec4:	481e      	ldr	r0, [pc, #120]	; (60001f40 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ec6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001eca:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ece:	4a1d      	ldr	r2, [pc, #116]	; (60001f44 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ed0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001ed4:	4c1c      	ldr	r4, [pc, #112]	; (60001f48 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ed6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001eda:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001edc:	481b      	ldr	r0, [pc, #108]	; (60001f4c <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001ede:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001ee2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001ee6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001eea:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001eee:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001ef2:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001ef6:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001efa:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001efe:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001f02:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001f06:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001f0a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001f0e:	4770      	bx	lr
60001f10:	1000003f 	.word	0x1000003f
60001f14:	03080025 	.word	0x03080025
60001f18:	00100009 	.word	0x00100009
60001f1c:	2001ece0 	.word	0x2001ece0
60001f20:	00200013 	.word	0x00200013
60001f24:	07020021 	.word	0x07020021
60001f28:	20000014 	.word	0x20000014
60001f2c:	13080025 	.word	0x13080025
60001f30:	10000009 	.word	0x10000009
60001f34:	20200016 	.word	0x20200016
60001f38:	130b0027 	.word	0x130b0027
60001f3c:	40000017 	.word	0x40000017
60001f40:	60000018 	.word	0x60000018
60001f44:	070b002f 	.word	0x070b002f
60001f48:	70000019 	.word	0x70000019
60001f4c:	130b002f 	.word	0x130b002f

60001f50 <configure_external_ram>:
{
60001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f52:	4bb8      	ldr	r3, [pc, #736]	; (60002234 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f54:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f56:	4eb8      	ldr	r6, [pc, #736]	; (60002238 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f58:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f5a:	4fb8      	ldr	r7, [pc, #736]	; (6000223c <configure_external_ram+0x2ec>)
{
60001f5c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f5e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f62:	49b7      	ldr	r1, [pc, #732]	; (60002240 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f64:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f68:	4db6      	ldr	r5, [pc, #728]	; (60002244 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f6a:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001f6e:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001f72:	4cb5      	ldr	r4, [pc, #724]	; (60002248 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001f74:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f78:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f7c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f80:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f84:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001f88:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f8c:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001f8e:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001f90:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001f92:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001f94:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001fa2:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fa6:	4aa9      	ldr	r2, [pc, #676]	; (6000224c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001fa8:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001fac:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001fb0:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001fb4:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001fb8:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fbc:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001fbe:	4ba4      	ldr	r3, [pc, #656]	; (60002250 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fc0:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001fc2:	48a4      	ldr	r0, [pc, #656]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001fc4:	49a4      	ldr	r1, [pc, #656]	; (60002258 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001fc6:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fc8:	4aa4      	ldr	r2, [pc, #656]	; (6000225c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fca:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001fcc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001fd0:	f043 030c 	orr.w	r3, r3, #12
60001fd4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001fd8:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001fdc:	6803      	ldr	r3, [r0, #0]
60001fde:	f043 0302 	orr.w	r3, r3, #2
60001fe2:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001fe4:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fe6:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001fe8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fec:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001fee:	4b9c      	ldr	r3, [pc, #624]	; (60002260 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ff0:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001ff2:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ff4:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001ff6:	4c9b      	ldr	r4, [pc, #620]	; (60002264 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ff8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ffa:	4a9b      	ldr	r2, [pc, #620]	; (60002268 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002000:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60002002:	68c3      	ldr	r3, [r0, #12]
60002004:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60002008:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000200a:	6a03      	ldr	r3, [r0, #32]
6000200c:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000200e:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002010:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002012:	6a03      	ldr	r3, [r0, #32]
60002014:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60002016:	4a95      	ldr	r2, [pc, #596]	; (6000226c <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002018:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000201a:	4c95      	ldr	r4, [pc, #596]	; (60002270 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000201c:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000201e:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60002020:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60002022:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60002024:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60002028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000202c:	f043 0301 	orr.w	r3, r3, #1
60002030:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002034:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002038:	498e      	ldr	r1, [pc, #568]	; (60002274 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000203a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000203e:	f043 0301 	orr.w	r3, r3, #1
60002042:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002046:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000204a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000204c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000204e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002050:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002054:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002056:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002058:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000205a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000205e:	6803      	ldr	r3, [r0, #0]
60002060:	f023 0302 	bic.w	r3, r3, #2
60002064:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002066:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002068:	4b83      	ldr	r3, [pc, #524]	; (60002278 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000206a:	4984      	ldr	r1, [pc, #528]	; (6000227c <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000206c:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000206e:	f843 2b04 	str.w	r2, [r3], #4
60002072:	428b      	cmp	r3, r1
60002074:	d1fb      	bne.n	6000206e <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60002076:	4a77      	ldr	r2, [pc, #476]	; (60002254 <configure_external_ram+0x304>)
60002078:	6813      	ldr	r3, [r2, #0]
6000207a:	f043 0301 	orr.w	r3, r3, #1
6000207e:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60002080:	6813      	ldr	r3, [r2, #0]
60002082:	f013 0301 	ands.w	r3, r3, #1
60002086:	d1fb      	bne.n	60002080 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002088:	487a      	ldr	r0, [pc, #488]	; (60002274 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000208a:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
6000208c:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002090:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002092:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002096:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002098:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
6000209c:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020a0:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600020a4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020a8:	4975      	ldr	r1, [pc, #468]	; (60002280 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600020aa:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020ae:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020b2:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020b6:	4873      	ldr	r0, [pc, #460]	; (60002284 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020b8:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020bc:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600020c0:	4c71      	ldr	r4, [pc, #452]	; (60002288 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020c2:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600020c6:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600020ca:	4970      	ldr	r1, [pc, #448]	; (6000228c <configure_external_ram+0x33c>)
600020cc:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600020d0:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600020d2:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600020d6:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020da:	485e      	ldr	r0, [pc, #376]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600020dc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020e0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600020e4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020e8:	6943      	ldr	r3, [r0, #20]
600020ea:	07da      	lsls	r2, r3, #31
600020ec:	d5fc      	bpl.n	600020e8 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600020ee:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600020f0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020f6:	4957      	ldr	r1, [pc, #348]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600020f8:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600020fa:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020fe:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002102:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002106:	694b      	ldr	r3, [r1, #20]
60002108:	07db      	lsls	r3, r3, #31
6000210a:	d5fc      	bpl.n	60002106 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000210c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000210e:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002110:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002114:	4a4f      	ldr	r2, [pc, #316]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002116:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002118:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000211c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002120:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002124:	6953      	ldr	r3, [r2, #20]
60002126:	07df      	lsls	r7, r3, #31
60002128:	d5fc      	bpl.n	60002124 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000212a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000212c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000212e:	4858      	ldr	r0, [pc, #352]	; (60002290 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002130:	4948      	ldr	r1, [pc, #288]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002132:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002134:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002138:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000213c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002140:	694b      	ldr	r3, [r1, #20]
60002142:	07de      	lsls	r6, r3, #31
60002144:	d5fc      	bpl.n	60002140 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60002146:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000214a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000214e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60002150:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002152:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002154:	4293      	cmp	r3, r2
60002156:	d165      	bne.n	60002224 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002158:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000215a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000215e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002160:	483c      	ldr	r0, [pc, #240]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60002162:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002166:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000216a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000216e:	6943      	ldr	r3, [r0, #20]
60002170:	07dd      	lsls	r5, r3, #31
60002172:	d5fc      	bpl.n	6000216e <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002174:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002176:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000217a:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000217c:	4a35      	ldr	r2, [pc, #212]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000217e:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60002180:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002184:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002188:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000218c:	6953      	ldr	r3, [r2, #20]
6000218e:	07dc      	lsls	r4, r3, #31
60002190:	d5fc      	bpl.n	6000218c <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002192:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002194:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002198:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000219c:	492d      	ldr	r1, [pc, #180]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000219e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021a0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021a4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021a8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ac:	694b      	ldr	r3, [r1, #20]
600021ae:	07d8      	lsls	r0, r3, #31
600021b0:	d5fc      	bpl.n	600021ac <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021b2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021b4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021bc:	4a25      	ldr	r2, [pc, #148]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021be:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600021c0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021c4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021c8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021cc:	6953      	ldr	r3, [r2, #20]
600021ce:	07d9      	lsls	r1, r3, #31
600021d0:	d5fc      	bpl.n	600021cc <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021d2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021d4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021d8:	482d      	ldr	r0, [pc, #180]	; (60002290 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021da:	491e      	ldr	r1, [pc, #120]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021dc:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021de:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021e2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ea:	694b      	ldr	r3, [r1, #20]
600021ec:	07da      	lsls	r2, r3, #31
600021ee:	d5fc      	bpl.n	600021ea <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600021f0:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600021f4:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021f8:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600021fa:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021fc:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600021fe:	4293      	cmp	r3, r2
60002200:	d050      	beq.n	600022a4 <configure_external_ram+0x354>
60002202:	2508      	movs	r5, #8
60002204:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60002208:	4922      	ldr	r1, [pc, #136]	; (60002294 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
6000220a:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
6000220c:	4b22      	ldr	r3, [pc, #136]	; (60002298 <configure_external_ram+0x348>)
			external_psram_size = 16;
6000220e:	4a23      	ldr	r2, [pc, #140]	; (6000229c <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002210:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60002212:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60002214:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002216:	2301      	movs	r3, #1
60002218:	4821      	ldr	r0, [pc, #132]	; (600022a0 <configure_external_ram+0x350>)
6000221a:	4422      	add	r2, r4
6000221c:	f000 fa08 	bl	60002630 <__sm_set_pool_veneer>
}
60002220:	b003      	add	sp, #12
60002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60002224:	4b1e      	ldr	r3, [pc, #120]	; (600022a0 <configure_external_ram+0x350>)
60002226:	2200      	movs	r2, #0
60002228:	e9c3 2200 	strd	r2, r2, [r3]
6000222c:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60002230:	b003      	add	sp, #12
60002232:	bdf0      	pop	{r4, r5, r6, r7, pc}
60002234:	401f8000 	.word	0x401f8000
60002238:	0001b0f9 	.word	0x0001b0f9
6000223c:	000110f9 	.word	0x000110f9
60002240:	401f8400 	.word	0x401f8400
60002244:	000170f9 	.word	0x000170f9
60002248:	400fc000 	.word	0x400fc000
6000224c:	1ffffcff 	.word	0x1ffffcff
60002250:	a0000300 	.word	0xa0000300
60002254:	402a4000 	.word	0x402a4000
60002258:	402a8000 	.word	0x402a8000
6000225c:	ffff0012 	.word	0xffff0012
60002260:	00f737ff 	.word	0x00f737ff
60002264:	80000040 	.word	0x80000040
60002268:	7cf0ff00 	.word	0x7cf0ff00
6000226c:	830f00ff 	.word	0x830f00ff
60002270:	00020063 	.word	0x00020063
60002274:	5af05af0 	.word	0x5af05af0
60002278:	402a4200 	.word	0x402a4200
6000227c:	402a4300 	.word	0x402a4300
60002280:	3018049f 	.word	0x3018049f
60002284:	0a1806eb 	.word	0x0a1806eb
60002288:	0a180638 	.word	0x0a180638
6000228c:	26013206 	.word	0x26013206
60002290:	00030004 	.word	0x00030004
60002294:	70000000 	.word	0x70000000
60002298:	70000000 	.word	0x70000000
6000229c:	2001ec9d 	.word	0x2001ec9d
600022a0:	2001e63c 	.word	0x2001e63c
	FLEXSPI2_IPCR0 = addr;
600022a4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022ac:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022ae:	4808      	ldr	r0, [pc, #32]	; (600022d0 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
600022b0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022b4:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022b8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022bc:	6943      	ldr	r3, [r0, #20]
600022be:	07db      	lsls	r3, r3, #31
600022c0:	d5fc      	bpl.n	600022bc <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022c2:	2301      	movs	r3, #1
600022c4:	2510      	movs	r5, #16
600022c6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
600022ca:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
600022cc:	e79c      	b.n	60002208 <configure_external_ram+0x2b8>
600022ce:	bf00      	nop
600022d0:	402a4000 	.word	0x402a4000

600022d4 <usb_pll_start>:
{
600022d4:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600022d6:	4a15      	ldr	r2, [pc, #84]	; (6000232c <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600022d8:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600022da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600022de:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600022e2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600022e6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600022ea:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600022ee:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600022f0:	f013 0f02 	tst.w	r3, #2
600022f4:	d10e      	bne.n	60002314 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600022f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600022fa:	d00f      	beq.n	6000231c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600022fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60002300:	d00e      	beq.n	60002320 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60002302:	2b00      	cmp	r3, #0
60002304:	daf3      	bge.n	600022ee <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60002306:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000230a:	d10b      	bne.n	60002324 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000230c:	065b      	lsls	r3, r3, #25
6000230e:	d50b      	bpl.n	60002328 <usb_pll_start+0x54>
}
60002310:	bcf0      	pop	{r4, r5, r6, r7}
60002312:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002314:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60002316:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60002318:	6190      	str	r0, [r2, #24]
			continue;
6000231a:	e7e8      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000231c:	6155      	str	r5, [r2, #20]
			continue;
6000231e:	e7e6      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60002320:	6156      	str	r6, [r2, #20]
			continue;
60002322:	e7e4      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60002324:	6191      	str	r1, [r2, #24]
			continue;
60002326:	e7e2      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002328:	6157      	str	r7, [r2, #20]
			continue;
6000232a:	e7e0      	b.n	600022ee <usb_pll_start+0x1a>
6000232c:	400d8000 	.word	0x400d8000

60002330 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002330:	4a3f      	ldr	r2, [pc, #252]	; (60002430 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002332:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60002334:	493f      	ldr	r1, [pc, #252]	; (60002434 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002336:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000233a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000233e:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002342:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60002438 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002346:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000234a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 6000243c <tempmon_init+0x10c>
{
6000234e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002354:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002358:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000235c:	4d38      	ldr	r5, [pc, #224]	; (60002440 <tempmon_init+0x110>)
6000235e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002360:	4c38      	ldr	r4, [pc, #224]	; (60002444 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002362:	4839      	ldr	r0, [pc, #228]	; (60002448 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002364:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002366:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000236a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000236c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002374:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002378:	ee07 1a10 	vmov	s14, r1
6000237c:	4b33      	ldr	r3, [pc, #204]	; (6000244c <tempmon_init+0x11c>)
6000237e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002382:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002384:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002388:	4931      	ldr	r1, [pc, #196]	; (60002450 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002392:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002396:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000239a:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000239e:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023a2:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023aa:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023ae:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023b2:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600023b6:	4827      	ldr	r0, [pc, #156]	; (60002454 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023b8:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023bc:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023c0:	ee75 5a87 	vadd.f32	s11, s11, s14
600023c4:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023c8:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023cc:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023d0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023d8:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023e0:	ee16 3a10 	vmov	r3, s12
600023e4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023ec:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600023f0:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023f2:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023f6:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600023fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
600023fe:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60002402:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60002404:	4914      	ldr	r1, [pc, #80]	; (60002458 <tempmon_init+0x128>)
60002406:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000240a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000240e:	f043 0302 	orr.w	r3, r3, #2
60002412:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60002416:	4b11      	ldr	r3, [pc, #68]	; (6000245c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002418:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000241c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002420:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002424:	2201      	movs	r2, #1
}
60002426:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002428:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000242c:	4770      	bx	lr
6000242e:	bf00      	nop
60002430:	400d8100 	.word	0x400d8100
60002434:	401f4400 	.word	0x401f4400
60002438:	42aa0000 	.word	0x42aa0000
6000243c:	42b40000 	.word	0x42b40000
60002440:	2001e78c 	.word	0x2001e78c
60002444:	2001e788 	.word	0x2001e788
60002448:	2001e790 	.word	0x2001e790
6000244c:	2001e794 	.word	0x2001e794
60002450:	0fff0000 	.word	0x0fff0000
60002454:	e000e400 	.word	0xe000e400
60002458:	20008c00 	.word	0x20008c00
6000245c:	00008319 	.word	0x00008319

60002460 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002460:	4b31      	ldr	r3, [pc, #196]	; (60002528 <usb_init+0xc8>)
60002462:	f640 7261 	movw	r2, #3937	; 0xf61
{
60002466:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002468:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000246c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60002470:	f000 f8ee 	bl	60002650 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002474:	4a2d      	ldr	r2, [pc, #180]	; (6000252c <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60002476:	492e      	ldr	r1, [pc, #184]	; (60002530 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002478:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000247c:	482d      	ldr	r0, [pc, #180]	; (60002534 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000247e:	f043 0303 	orr.w	r3, r3, #3
60002482:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002486:	4b2c      	ldr	r3, [pc, #176]	; (60002538 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002488:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000248c:	6802      	ldr	r2, [r0, #0]
6000248e:	421a      	tst	r2, r3
60002490:	d103      	bne.n	6000249a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60002492:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60002496:	079a      	lsls	r2, r3, #30
60002498:	d01b      	beq.n	600024d2 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000249a:	4a25      	ldr	r2, [pc, #148]	; (60002530 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
6000249c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600024a0:	4b24      	ldr	r3, [pc, #144]	; (60002534 <usb_init+0xd4>)
600024a2:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600024a4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024a8:	f043 0302 	orr.w	r3, r3, #2
600024ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600024b0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024b4:	079b      	lsls	r3, r3, #30
600024b6:	d4fb      	bmi.n	600024b0 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600024bc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600024c0:	4b1c      	ldr	r3, [pc, #112]	; (60002534 <usb_init+0xd4>)
600024c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024c6:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600024ca:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600024cc:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
600024ce:	f000 f89f 	bl	60002610 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600024d2:	4a18      	ldr	r2, [pc, #96]	; (60002534 <usb_init+0xd4>)
600024d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024d8:	4c15      	ldr	r4, [pc, #84]	; (60002530 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600024da:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600024dc:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024de:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024e0:	4b16      	ldr	r3, [pc, #88]	; (6000253c <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600024e2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024e4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024e8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024ec:	4618      	mov	r0, r3
600024ee:	f000 f8b3 	bl	60002658 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600024f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024f6:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600024f8:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600024fc:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002500:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60002502:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60002506:	641a      	str	r2, [r3, #64]	; 0x40
60002508:	4b0d      	ldr	r3, [pc, #52]	; (60002540 <usb_init+0xe0>)
6000250a:	4a0e      	ldr	r2, [pc, #56]	; (60002544 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000250c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60002510:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60002514:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60002518:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000251c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000251e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60002522:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60002526:	bd10      	pop	{r4, pc}
60002528:	400d8000 	.word	0x400d8000
6000252c:	400fc000 	.word	0x400fc000
60002530:	402e0000 	.word	0x402e0000
60002534:	400d9000 	.word	0x400d9000
60002538:	001e1c00 	.word	0x001e1c00
6000253c:	20000000 	.word	0x20000000
60002540:	20008c00 	.word	0x20008c00
60002544:	00008501 	.word	0x00008501

60002548 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60002548:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000254a:	4b0e      	ldr	r3, [pc, #56]	; (60002584 <_reboot_Teensyduino_+0x3c>)
6000254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000254e:	079b      	lsls	r3, r3, #30
60002550:	d400      	bmi.n	60002554 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60002552:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60002554:	b672      	cpsid	i
		USB1_USBCMD = 0;
60002556:	4b0c      	ldr	r3, [pc, #48]	; (60002588 <_reboot_Teensyduino_+0x40>)
60002558:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000255a:	4a0c      	ldr	r2, [pc, #48]	; (6000258c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
6000255c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002560:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002564:	490a      	ldr	r1, [pc, #40]	; (60002590 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002566:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000256a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000256c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000256e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002572:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60002576:	4807      	ldr	r0, [pc, #28]	; (60002594 <_reboot_Teensyduino_+0x4c>)
60002578:	4a07      	ldr	r2, [pc, #28]	; (60002598 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000257a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
6000257c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000257e:	689b      	ldr	r3, [r3, #8]
60002580:	4798      	blx	r3
	}
	__builtin_unreachable();
60002582:	bf00      	nop
60002584:	401f4400 	.word	0x401f4400
60002588:	402e0000 	.word	0x402e0000
6000258c:	400ac000 	.word	0x400ac000
60002590:	00200003 	.word	0x00200003
60002594:	20208000 	.word	0x20208000
60002598:	eb120000 	.word	0xeb120000

6000259c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000259c:	4b10      	ldr	r3, [pc, #64]	; (600025e0 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000259e:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025a0:	4a10      	ldr	r2, [pc, #64]	; (600025e4 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025a2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025a4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600025a8:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025aa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025ac:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600025b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025b2:	f441 7140 	orr.w	r1, r1, #768	; 0x300
600025b6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025b8:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600025ba:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600025bc:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025be:	061b      	lsls	r3, r3, #24
600025c0:	d4fc      	bmi.n	600025bc <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600025c2:	4a09      	ldr	r2, [pc, #36]	; (600025e8 <analog_init+0x4c>)
600025c4:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600025c8:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600025ca:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600025cc:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600025ce:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025d0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600025d4:	d1fb      	bne.n	600025ce <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600025d6:	4a05      	ldr	r2, [pc, #20]	; (600025ec <analog_init+0x50>)
600025d8:	7013      	strb	r3, [r2, #0]
}
600025da:	f85d 4b04 	ldr.w	r4, [sp], #4
600025de:	4770      	bx	lr
600025e0:	400fc000 	.word	0x400fc000
600025e4:	400c4000 	.word	0x400c4000
600025e8:	400c8000 	.word	0x400c8000
600025ec:	2001ec9c 	.word	0x2001ec9c

600025f0 <_init>:
600025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600025f2:	bf00      	nop
600025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
600025f6:	bc08      	pop	{r3}
600025f8:	469e      	mov	lr, r3
600025fa:	4770      	bx	lr
600025fc:	0000      	movs	r0, r0
	...

60002600 <__pwm_init_veneer>:
60002600:	f85f f000 	ldr.w	pc, [pc]	; 60002604 <__pwm_init_veneer+0x4>
60002604:	0000958d 	.word	0x0000958d

60002608 <__set_arm_clock_veneer>:
60002608:	f85f f000 	ldr.w	pc, [pc]	; 6000260c <__set_arm_clock_veneer+0x4>
6000260c:	00007a75 	.word	0x00007a75

60002610 <__delay_veneer>:
60002610:	f85f f000 	ldr.w	pc, [pc]	; 60002614 <__delay_veneer+0x4>
60002614:	00007d65 	.word	0x00007d65

60002618 <___ZN5Print11printNumberEmhh_veneer>:
60002618:	f85f f000 	ldr.w	pc, [pc]	; 6000261c <___ZN5Print11printNumberEmhh_veneer+0x4>
6000261c:	00007859 	.word	0x00007859

60002620 <___ZN5Print10printFloatEdh_veneer>:
60002620:	f85f f000 	ldr.w	pc, [pc]	; 60002624 <___ZN5Print10printFloatEdh_veneer+0x4>
60002624:	00007881 	.word	0x00007881

60002628 <____libc_init_array_veneer>:
60002628:	f85f f000 	ldr.w	pc, [pc]	; 6000262c <____libc_init_array_veneer+0x4>
6000262c:	0000bb45 	.word	0x0000bb45

60002630 <__sm_set_pool_veneer>:
60002630:	f85f f000 	ldr.w	pc, [pc]	; 60002634 <__sm_set_pool_veneer+0x4>
60002634:	000096d1 	.word	0x000096d1

60002638 <___ZN5Print5printEl_veneer>:
60002638:	f85f f000 	ldr.w	pc, [pc]	; 6000263c <___ZN5Print5printEl_veneer+0x4>
6000263c:	000077ed 	.word	0x000077ed

60002640 <__main_veneer>:
60002640:	f85f f000 	ldr.w	pc, [pc]	; 60002644 <__main_veneer+0x4>
60002644:	00007f25 	.word	0x00007f25

60002648 <___ZN5Print7printlnEv_veneer>:
60002648:	f85f f000 	ldr.w	pc, [pc]	; 6000264c <___ZN5Print7printlnEv_veneer+0x4>
6000264c:	00007805 	.word	0x00007805

60002650 <__usb_init_serialnumber_veneer>:
60002650:	f85f f000 	ldr.w	pc, [pc]	; 60002654 <__usb_init_serialnumber_veneer+0x4>
60002654:	00008c71 	.word	0x00008c71

60002658 <__memset_veneer>:
60002658:	f85f f000 	ldr.w	pc, [pc]	; 6000265c <__memset_veneer+0x4>
6000265c:	0000b8cd 	.word	0x0000b8cd

60002660 <__frame_dummy_init_array_entry>:
60002660:	00000045 00000815 00001499 00007319     E............s..
60002670:	0000754d                                Mu..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;  // ref manual 20.3.3.1.3 page 1231
		uint32_t lo2 = SNVS_HPRTCLR;
		if (lo1 == lo2 && hi1 == hi2) {
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      2c:	1049      	asrs	r1, r1, #1
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	4770      	bx	lr
      38:	20008ec0 	.word	0x20008ec0
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
      3c:	20008ec0 	.word	0x20008ec0
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags) {
    return m_fFile   ? m_fFile->ls(pr, flags)
           : m_xFile ? m_xFile->ls(pr, flags)
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	2001e6cc 	.word	0x2001e6cc
      64:	60020800 	.word	0x60020800

00000068 <loop>:
      68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
      6c:	4c83      	ldr	r4, [pc, #524]	; (27c <loop+0x214>)
      6e:	b08b      	sub	sp, #44	; 0x2c
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
      70:	4d83      	ldr	r5, [pc, #524]	; (280 <loop+0x218>)
      72:	6823      	ldr	r3, [r4, #0]
      74:	3301      	adds	r3, #1
      76:	6023      	str	r3, [r4, #0]
      78:	f001 fa5a 	bl	1530 <getDataCount()>
      7c:	882b      	ldrh	r3, [r5, #0]
  }
}
      7e:	4283      	cmp	r3, r0
    *m_xFile = *from.m_xFile;
      80:	4b80      	ldr	r3, [pc, #512]	; (284 <loop+0x21c>)
}
      82:	681a      	ldr	r2, [r3, #0]
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      84:	bf38      	it	cc
    char sign;
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	8028      	strhcc	r0, [r5, #0]
      88:	07d2      	lsls	r2, r2, #31
}
      8a:	d513      	bpl.n	b4 <loop+0x4c>
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	4f7e      	ldr	r7, [pc, #504]	; (288 <loop+0x220>)
      8e:	f009 f8df 	bl	9250 <usb_serial_available>
      92:	b9f0      	cbnz	r0, d2 <loop+0x6a>
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
      94:	8838      	ldrh	r0, [r7, #0]
		buf[sizeof(buf) - 1] = '0';
      96:	4e7d      	ldr	r6, [pc, #500]	; (28c <loop+0x224>)
      98:	b200      	sxth	r0, r0
		i = sizeof(buf) - 1;
      9a:	f001 f995 	bl	13c8 <saveData(short)>
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
      9e:	4b7c      	ldr	r3, [pc, #496]	; (290 <loop+0x228>)
      a0:	8038      	strh	r0, [r7, #0]
      a2:	681f      	ldr	r7, [r3, #0]
  uint32_t freeClusterCount() {
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    if (switchSpi && !setDedicatedSpi(true)) {
      return 0;
    }
    uint32_t rtn = Vol::freeClusterCount();
      a4:	6833      	ldr	r3, [r6, #0]
      a6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
      aa:	42bb      	cmp	r3, r7
      ac:	d31b      	bcc.n	e6 <loop+0x7e>
      ae:	b00b      	add	sp, #44	; 0x2c
      b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static void i2c_write_data(uint8_t address, uint8_t reg, uint8_t *buffer, uint16_t nbuf)
{
  Wire.beginTransmission(address);
  Wire.write(reg);
  for(int ii=0; ii<nbuf; ii++) Wire.write(buffer[ii]);
      b4:	4a77      	ldr	r2, [pc, #476]	; (294 <loop+0x22c>)
      b6:	4f74      	ldr	r7, [pc, #464]	; (288 <loop+0x220>)
      b8:	6812      	ldr	r2, [r2, #0]
      ba:	2a01      	cmp	r2, #1
  return str - name;

fail:
  *name = 0;
  return 0;
}
      bc:	f04f 32ff 	mov.w	r2, #4294967295
      c0:	bf18      	it	ne
  for (uint8_t is = 2; is <= m_setCount; is++) {
      c2:	2200      	movne	r2, #0
      c4:	803a      	strh	r2, [r7, #0]
      c6:	2201      	movs	r2, #1
      c8:	601a      	str	r2, [r3, #0]
      ca:	f009 f8c1 	bl	9250 <usb_serial_available>
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      ce:	2800      	cmp	r0, #0
}
      d0:	d0e0      	beq.n	94 <loop+0x2c>
	while (newdiv > 65535 && prescale < 7) {
      d2:	f009 f901 	bl	92d8 <usb_serial_getchar>
      d6:	b2c0      	uxtb	r0, r0
      d8:	2873      	cmp	r0, #115	; 0x73
      da:	d026      	beq.n	12a <loop+0xc2>
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    else if (c == '.')
      isFraction = true;
      dc:	2865      	cmp	r0, #101	; 0x65
      de:	d11c      	bne.n	11a <loop+0xb2>
      e0:	2304      	movs	r3, #4
    return 0; // zero returned if timeout
      e2:	803b      	strh	r3, [r7, #0]
      e4:	e7d6      	b.n	94 <loop+0x2c>
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      e6:	a808      	add	r0, sp, #32
      e8:	f001 fbd4 	bl	1894 <rtc_get_datetime(datetime_t*)>
      ec:	4b6a      	ldr	r3, [pc, #424]	; (298 <loop+0x230>)
      ee:	f9b3 3000 	ldrsh.w	r3, [r3]
      f2:	b9eb      	cbnz	r3, 130 <loop+0xc8>
      f4:	4b69      	ldr	r3, [pc, #420]	; (29c <loop+0x234>)
      f6:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 2dc <loop+0x274>
      fa:	9307      	str	r3, [sp, #28]
      fc:	4b68      	ldr	r3, [pc, #416]	; (2a0 <loop+0x238>)
      fe:	9306      	str	r3, [sp, #24]
     100:	2300      	movs	r3, #0
     102:	9a07      	ldr	r2, [sp, #28]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     104:	6037      	str	r7, [r6, #0]
     106:	6013      	str	r3, [r2, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
     108:	9a06      	ldr	r2, [sp, #24]
     10a:	6023      	str	r3, [r4, #0]
     10c:	f8cb 3000 	str.w	r3, [fp]
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          break;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
     110:	802b      	strh	r3, [r5, #0]
     112:	6013      	str	r3, [r2, #0]
     114:	b00b      	add	sp, #44	; 0x2c
     116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     11a:	286d      	cmp	r0, #109	; 0x6d
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     11c:	d17d      	bne.n	21a <loop+0x1b2>
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     11e:	4a5e      	ldr	r2, [pc, #376]	; (298 <loop+0x230>)
     120:	8813      	ldrh	r3, [r2, #0]
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     122:	f1c3 0301 	rsb	r3, r3, #1
     126:	8013      	strh	r3, [r2, #0]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     128:	e7b4      	b.n	94 <loop+0x2c>
				break;
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     12a:	2300      	movs	r3, #0
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     12c:	803b      	strh	r3, [r7, #0]
     12e:	e7b1      	b.n	94 <loop+0x2c>
     130:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
	if (!wait_idle()) return 4;
     134:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
	return rxBufferLength;
}
     138:	9304      	str	r3, [sp, #16]
     13a:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
     13e:	4959      	ldr	r1, [pc, #356]	; (2a4 <loop+0x23c>)
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     140:	9303      	str	r3, [sp, #12]
     142:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     146:	4858      	ldr	r0, [pc, #352]	; (2a8 <loop+0x240>)
     148:	9302      	str	r3, [sp, #8]
     14a:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
     14e:	f8df b18c 	ldr.w	fp, [pc, #396]	; 2dc <loop+0x274>
     152:	9301      	str	r3, [sp, #4]
     154:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     158:	9300      	str	r3, [sp, #0]
     15a:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     15e:	f007 fb6d 	bl	783c <Print::printf(char const*, ...)>
     162:	2103      	movs	r1, #3
        if (flags & T_CREATE) {
          df->createTimeMs = ms10;
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
     164:	4851      	ldr	r0, [pc, #324]	; (2ac <loop+0x244>)
     166:	f009 f8dd 	bl	9324 <usb_serial_write>
     16a:	2300      	movs	r3, #0
     16c:	220a      	movs	r2, #10
     16e:	6821      	ldr	r1, [r4, #0]
  bool skip = data[0] == EXFAT_TYPE_FILE;
     170:	484d      	ldr	r0, [pc, #308]	; (2a8 <loop+0x240>)
     172:	f007 fb71 	bl	7858 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     176:	2101      	movs	r1, #1
     178:	484d      	ldr	r0, [pc, #308]	; (2b0 <loop+0x248>)
     17a:	f009 f8d3 	bl	9324 <usb_serial_write>
	n = __builtin_bswap32(n);
     17e:	4b47      	ldr	r3, [pc, #284]	; (29c <loop+0x234>)
     180:	220a      	movs	r2, #10
     182:	f8db 1000 	ldr.w	r1, [fp]
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     186:	9307      	str	r3, [sp, #28]
     188:	2300      	movs	r3, #0
     18a:	4847      	ldr	r0, [pc, #284]	; (2a8 <loop+0x240>)
     18c:	f007 fb64 	bl	7858 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     190:	2101      	movs	r1, #1
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     192:	4847      	ldr	r0, [pc, #284]	; (2b0 <loop+0x248>)
     194:	f009 f8c6 	bl	9324 <usb_serial_write>
     198:	9907      	ldr	r1, [sp, #28]
     19a:	2300      	movs	r3, #0
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     19c:	220a      	movs	r2, #10
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     19e:	6809      	ldr	r1, [r1, #0]
     1a0:	4841      	ldr	r0, [pc, #260]	; (2a8 <loop+0x240>)
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     1a2:	f007 fb59 	bl	7858 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	n = __builtin_bswap32(n);
     1a6:	2101      	movs	r1, #1
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     1a8:	4841      	ldr	r0, [pc, #260]	; (2b0 <loop+0x248>)
     1aa:	f009 f8bb 	bl	9324 <usb_serial_write>
	if (priority(ch3) < priority(ch4)) swap(ch3, ch4);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
     1ae:	882a      	ldrh	r2, [r5, #0]
     1b0:	4940      	ldr	r1, [pc, #256]	; (2b4 <loop+0x24c>)
	c = c1.channel;
     1b2:	483d      	ldr	r0, [pc, #244]	; (2a8 <loop+0x240>)
	c1.channel = c2.channel;
     1b4:	f007 fb42 	bl	783c <Print::printf(char const*, ...)>
	c1.TCD = c2.TCD;
     1b8:	2102      	movs	r1, #2
	t = c1.TCD;
     1ba:	483f      	ldr	r0, [pc, #252]	; (2b8 <loop+0x250>)
	c1.TCD = c2.TCD;
     1bc:	f009 f8b2 	bl	9324 <usb_serial_write>
}
     1c0:	4b3e      	ldr	r3, [pc, #248]	; (2bc <loop+0x254>)
     1c2:	493f      	ldr	r1, [pc, #252]	; (2c0 <loop+0x258>)
     1c4:	681a      	ldr	r2, [r3, #0]
     1c6:	4838      	ldr	r0, [pc, #224]	; (2a8 <loop+0x240>)
     1c8:	f007 fb38 	bl	783c <Print::printf(char const*, ...)>
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     1cc:	4b34      	ldr	r3, [pc, #208]	; (2a0 <loop+0x238>)
     1ce:	2101      	movs	r1, #1
  bool syncDevice() { return m_blockDev->syncDevice(); }
     1d0:	4837      	ldr	r0, [pc, #220]	; (2b0 <loop+0x248>)
     1d2:	9306      	str	r3, [sp, #24]
     1d4:	f009 f8a6 	bl	9324 <usb_serial_write>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
     1d8:	9906      	ldr	r1, [sp, #24]
     1da:	2300      	movs	r3, #0
     1dc:	220a      	movs	r2, #10
     1de:	4832      	ldr	r0, [pc, #200]	; (2a8 <loop+0x240>)
     1e0:	6809      	ldr	r1, [r1, #0]
     1e2:	f007 fb39 	bl	7858 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     1e6:	2104      	movs	r1, #4
     1e8:	4836      	ldr	r0, [pc, #216]	; (2c4 <loop+0x25c>)
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
     1ea:	f009 f89b 	bl	9324 <usb_serial_write>
     1ee:	4b36      	ldr	r3, [pc, #216]	; (2c8 <loop+0x260>)
     1f0:	f9b3 3000 	ldrsh.w	r3, [r3]
     1f4:	bb0b      	cbnz	r3, 23a <loop+0x1d2>
     1f6:	4699      	mov	r9, r3
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
     1f8:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2e0 <loop+0x278>

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
     1fc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2a8 <loop+0x240>
			if (d > 2) {
     200:	4b32      	ldr	r3, [pc, #200]	; (2cc <loop+0x264>)
				div = d-2;
     202:	4651      	mov	r1, sl
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     204:	4640      	mov	r0, r8
     206:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     20a:	f109 0901 	add.w	r9, r9, #1
     20e:	f007 fb15 	bl	783c <Print::printf(char const*, ...)>
     212:	f1b9 0f08 	cmp.w	r9, #8
     216:	d1f3      	bne.n	200 <loop+0x198>
     218:	e772      	b.n	100 <loop+0x98>
     21a:	283a      	cmp	r0, #58	; 0x3a
     21c:	d102      	bne.n	224 <loop+0x1bc>
     21e:	f001 fbd1 	bl	19c4 <menu1()>
     222:	e737      	b.n	94 <loop+0x2c>
     224:	283f      	cmp	r0, #63	; 0x3f
     226:	d102      	bne.n	22e <loop+0x1c6>
     228:	f001 fbd6 	bl	19d8 <menu2()>
     22c:	e732      	b.n	94 <loop+0x2c>
     22e:	2821      	cmp	r0, #33	; 0x21
     230:	f47f af30 	bne.w	94 <loop+0x2c>
void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     234:	f001 fc7a 	bl	1b2c <menu3()>
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     238:	e72c      	b.n	94 <loop+0x2c>
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2e4 <loop+0x27c>
     23e:	4924      	ldr	r1, [pc, #144]	; (2d0 <loop+0x268>)
};
     240:	f8df 9064 	ldr.w	r9, [pc, #100]	; 2a8 <loop+0x240>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     244:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     248:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     24c:	4648      	mov	r0, r9
     24e:	f007 faf5 	bl	783c <Print::printf(char const*, ...)>
     252:	491f      	ldr	r1, [pc, #124]	; (2d0 <loop+0x268>)
     254:	45d0      	cmp	r8, sl
     256:	d1f7      	bne.n	248 <loop+0x1e0>
     258:	f8df 808c 	ldr.w	r8, [pc, #140]	; 2e8 <loop+0x280>
     25c:	491d      	ldr	r1, [pc, #116]	; (2d4 <loop+0x26c>)
     25e:	f8d8 2000 	ldr.w	r2, [r8]
     262:	4811      	ldr	r0, [pc, #68]	; (2a8 <loop+0x240>)
     264:	f007 faea 	bl	783c <Print::printf(char const*, ...)>
     268:	2260      	movs	r2, #96	; 0x60
     26a:	2100      	movs	r1, #0
     26c:	481a      	ldr	r0, [pc, #104]	; (2d8 <loop+0x270>)
     26e:	f00b fb2d 	bl	b8cc <memset>
     272:	2300      	movs	r3, #0
     274:	f8c8 3000 	str.w	r3, [r8]
      {
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
        Serial.printf("%2d",max_stat);

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
        max_stat=0;        
     278:	e742      	b.n	100 <loop+0x98>
     27a:	bf00      	nop
     27c:	2001e0b4 	.word	0x2001e0b4
     280:	2001ec84 	.word	0x2001ec84
     284:	2000c53c 	.word	0x2000c53c
     288:	2001ec86 	.word	0x2001ec86
     28c:	2001e0b0 	.word	0x2001e0b0
     290:	2001ec58 	.word	0x2001ec58
     294:	2001ec6c 	.word	0x2001ec6c
     298:	2001ec88 	.word	0x2001ec88
     29c:	2001e6e8 	.word	0x2001e6e8
     2a0:	2001e624 	.word	0x2001e624
     2a4:	20007a20 	.word	0x20007a20
     2a8:	200085ac 	.word	0x200085ac
     2ac:	20007a44 	.word	0x20007a44
     2b0:	20000440 	.word	0x20000440
     2b4:	20007a48 	.word	0x20007a48
     2b8:	20007a4c 	.word	0x20007a4c
     2bc:	2001e620 	.word	0x2001e620
     2c0:	20007a50 	.word	0x20007a50
     2c4:	20007a54 	.word	0x20007a54
     2c8:	2001ec8c 	.word	0x2001ec8c
     2cc:	2001e6a4 	.word	0x2001e6a4
     2d0:	20007a64 	.word	0x20007a64
     2d4:	20007a6c 	.word	0x20007a6c
     2d8:	2001e6ec 	.word	0x2001e6ec
     2dc:	2001e6e4 	.word	0x2001e6e4
     2e0:	20007a5c 	.word	0x20007a5c
     2e4:	2001e6e8 	.word	0x2001e6e8
     2e8:	2001e6c4 	.word	0x2001e6c4

000002ec <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(1);} // wait for setup() to finish
     2ec:	b510      	push	{r4, lr}
     2ee:	4c0b      	ldr	r4, [pc, #44]	; (31c <setup1()+0x30>)
     2f0:	6823      	ldr	r3, [r4, #0]
     2f2:	b92b      	cbnz	r3, 300 <setup1()+0x14>
     2f4:	2001      	movs	r0, #1
     2f6:	f007 fd35 	bl	7d64 <delay>
     2fa:	6823      	ldr	r3, [r4, #0]
     2fc:	2b00      	cmp	r3, #0
     2fe:	d0f9      	beq.n	2f4 <setup1()+0x8>
  i2s_setup();
     300:	f000 f9dc 	bl	6bc <i2s_setup()>
  dma_setup();
     304:	f000 fa20 	bl	748 <dma_setup()>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     308:	210b      	movs	r1, #11
     30a:	4805      	ldr	r0, [pc, #20]	; (320 <setup1()+0x34>)
     30c:	f009 f80a 	bl	9324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     310:	4804      	ldr	r0, [pc, #16]	; (324 <setup1()+0x38>)

  Serial.println("Setup1 done");
}
     312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     316:	f007 ba75 	b.w	7804 <Print::println()>
     31a:	bf00      	nop
     31c:	2001e74c 	.word	0x2001e74c
     320:	200004f4 	.word	0x200004f4
     324:	200085ac 	.word	0x200085ac

00000328 <setup>:
{
     328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     32c:	4d4c      	ldr	r5, [pc, #304]	; (460 <setup+0x138>)
     32e:	b087      	sub	sp, #28
     330:	4c4c      	ldr	r4, [pc, #304]	; (464 <setup+0x13c>)
				if (elapsed > 750) break;
     332:	f240 28ee 	movw	r8, #750	; 0x2ee
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     336:	4f4c      	ldr	r7, [pc, #304]	; (468 <setup+0x140>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     338:	f8df 9154 	ldr.w	r9, [pc, #340]	; 490 <setup+0x168>
		uint32_t millis_begin = systick_millis_count;
     33c:	682e      	ldr	r6, [r5, #0]
		yield();
     33e:	f009 f86f 	bl	9420 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     342:	7823      	ldrb	r3, [r4, #0]
     344:	2b00      	cmp	r3, #0
     346:	d069      	beq.n	41c <setup+0xf4>
     348:	783b      	ldrb	r3, [r7, #0]
     34a:	07da      	lsls	r2, r3, #31
     34c:	d566      	bpl.n	41c <setup+0xf4>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     34e:	682b      	ldr	r3, [r5, #0]
     350:	f8d9 2000 	ldr.w	r2, [r9]
     354:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     356:	2b0e      	cmp	r3, #14
     358:	d960      	bls.n	41c <setup+0xf4>
     35a:	682b      	ldr	r3, [r5, #0]
  while(millis()<10000) if(Serial) { termon=1; break;}
     35c:	f242 760f 	movw	r6, #9999	; 0x270f
     360:	42b3      	cmp	r3, r6
     362:	d813      	bhi.n	38c <setup+0x64>
     364:	4f40      	ldr	r7, [pc, #256]	; (468 <setup+0x140>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     366:	f8df 8128 	ldr.w	r8, [pc, #296]	; 490 <setup+0x168>
		yield();
     36a:	f009 f859 	bl	9420 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     36e:	7823      	ldrb	r3, [r4, #0]
     370:	2b00      	cmp	r3, #0
     372:	d05d      	beq.n	430 <setup+0x108>
     374:	783b      	ldrb	r3, [r7, #0]
     376:	07db      	lsls	r3, r3, #31
     378:	d55a      	bpl.n	430 <setup+0x108>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     37a:	682b      	ldr	r3, [r5, #0]
     37c:	f8d8 2000 	ldr.w	r2, [r8]
     380:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     382:	2b0e      	cmp	r3, #14
     384:	d954      	bls.n	430 <setup+0x108>
     386:	4b39      	ldr	r3, [pc, #228]	; (46c <setup+0x144>)
     388:	2201      	movs	r2, #1
     38a:	601a      	str	r2, [r3, #0]
    if(CrashReport) Serial.print(CrashReport);
     38c:	4838      	ldr	r0, [pc, #224]	; (470 <setup+0x148>)
     38e:	f014 f817 	bl	143c0 <___ZN16CrashReportClasscvbEv_veneer>
     392:	2800      	cmp	r0, #0
     394:	d154      	bne.n	440 <setup+0x118>
  rtc_setup();
     396:	2113      	movs	r1, #19
     398:	2012      	movs	r0, #18
     39a:	f001 fa79 	bl	1890 <rtc_setup(unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     39e:	2110      	movs	r1, #16
     3a0:	4834      	ldr	r0, [pc, #208]	; (474 <setup+0x14c>)
     3a2:	f008 ffbf 	bl	9324 <usb_serial_write>
     3a6:	4834      	ldr	r0, [pc, #208]	; (478 <setup+0x150>)
     3a8:	f007 fa2c 	bl	7804 <Print::println()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     3ac:	a804      	add	r0, sp, #16
     3ae:	f001 fa71 	bl	1894 <rtc_get_datetime(datetime_t*)>
     3b2:	2800      	cmp	r0, #0
     3b4:	d04c      	beq.n	450 <setup+0x128>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     3b6:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     3ba:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     3be:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     3c2:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     3c6:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     3ca:	e9cd 2102 	strd	r2, r1, [sp, #8]
     3ce:	e9cd 0400 	strd	r0, r4, [sp]
     3d2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  ready=1;
     3d6:	2401      	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     3d8:	4928      	ldr	r1, [pc, #160]	; (47c <setup+0x154>)
     3da:	4827      	ldr	r0, [pc, #156]	; (478 <setup+0x150>)
     3dc:	f007 fa2e 	bl	783c <Print::printf(char const*, ...)>
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     3e0:	4825      	ldr	r0, [pc, #148]	; (478 <setup+0x150>)
     3e2:	f007 fa0f 	bl	7804 <Print::println()>
     3e6:	210b      	movs	r1, #11
     3e8:	4825      	ldr	r0, [pc, #148]	; (480 <setup+0x158>)
     3ea:	f008 ff9b 	bl	9324 <usb_serial_write>
     3ee:	4822      	ldr	r0, [pc, #136]	; (478 <setup+0x150>)
     3f0:	f007 fa08 	bl	7804 <Print::println()>
  filing_init();
     3f4:	f000 fc5e 	bl	cb4 <filing_init()>
     3f8:	210a      	movs	r1, #10
     3fa:	4822      	ldr	r0, [pc, #136]	; (484 <setup+0x15c>)
     3fc:	f008 ff92 	bl	9324 <usb_serial_write>
     400:	481d      	ldr	r0, [pc, #116]	; (478 <setup+0x150>)
     402:	f007 f9ff 	bl	7804 <Print::println()>
  ready=1;
     406:	4b20      	ldr	r3, [pc, #128]	; (488 <setup+0x160>)
     408:	601c      	str	r4, [r3, #0]
    setup1();
     40a:	f7ff ff6f 	bl	2ec <setup1()>
    pinMode(13,OUTPUT);
     40e:	4621      	mov	r1, r4
     410:	200d      	movs	r0, #13
     412:	f007 fd4f 	bl	7eb4 <pinMode>
}
     416:	b007      	add	sp, #28
     418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     41c:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     41e:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     420:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     422:	b192      	cbz	r2, 44a <setup+0x122>
				if (elapsed > 2000) break;
     424:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     428:	d897      	bhi.n	35a <setup+0x32>
			yield();
     42a:	f008 fff9 	bl	9420 <yield>
     42e:	e786      	b.n	33e <setup+0x16>
     430:	682b      	ldr	r3, [r5, #0]
  while(millis()<10000) if(Serial) { termon=1; break;}
     432:	42b3      	cmp	r3, r6
     434:	d999      	bls.n	36a <setup+0x42>
    if(CrashReport) Serial.print(CrashReport);
     436:	480e      	ldr	r0, [pc, #56]	; (470 <setup+0x148>)
     438:	f013 ffc2 	bl	143c0 <___ZN16CrashReportClasscvbEv_veneer>
     43c:	2800      	cmp	r0, #0
     43e:	d0aa      	beq.n	396 <setup+0x6e>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     440:	490d      	ldr	r1, [pc, #52]	; (478 <setup+0x150>)
     442:	480b      	ldr	r0, [pc, #44]	; (470 <setup+0x148>)
     444:	f013 ffb8 	bl	143b8 <___ZNK16CrashReportClass7printToER5Print_veneer>
     448:	e7a5      	b.n	396 <setup+0x6e>
				if (elapsed > 750) break;
     44a:	4543      	cmp	r3, r8
     44c:	d9ed      	bls.n	42a <setup+0x102>
     44e:	e784      	b.n	35a <setup+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     450:	2114      	movs	r1, #20
     452:	480e      	ldr	r0, [pc, #56]	; (48c <setup+0x164>)
     454:	f008 ff66 	bl	9324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     458:	4807      	ldr	r0, [pc, #28]	; (478 <setup+0x150>)
     45a:	f007 f9d3 	bl	7804 <Print::println()>
     45e:	e7aa      	b.n	3b6 <setup+0x8e>
     460:	2001ec58 	.word	0x2001ec58
     464:	2001eca5 	.word	0x2001eca5
     468:	2001eca4 	.word	0x2001eca4
     46c:	2001ec6c 	.word	0x2001ec6c
     470:	200085a0 	.word	0x200085a0
     474:	20007a7c 	.word	0x20007a7c
     478:	200085ac 	.word	0x200085ac
     47c:	20007aa8 	.word	0x20007aa8
     480:	20007ad0 	.word	0x20007ad0
     484:	20007adc 	.word	0x20007adc
     488:	2001e74c 	.word	0x2001e74c
     48c:	20007a90 	.word	0x20007a90
     490:	2001ec78 	.word	0x2001ec78

00000494 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     494:	4b36      	ldr	r3, [pc, #216]	; (570 <acq_isr()+0xdc>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     496:	4a37      	ldr	r2, [pc, #220]	; (574 <acq_isr()+0xe0>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     498:	4937      	ldr	r1, [pc, #220]	; (578 <acq_isr()+0xe4>)
  {
     49a:	b510      	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     49c:	681c      	ldr	r4, [r3, #0]
     49e:	7918      	ldrb	r0, [r3, #4]
     4a0:	6923      	ldr	r3, [r4, #16]
     4a2:	77c8      	strb	r0, [r1, #31]
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     4a4:	4293      	cmp	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     4a6:	bf28      	it	cs
     4a8:	f5a2 6280 	subcs.w	r2, r2, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     4ac:	4611      	mov	r1, r2
	asm("dsb");
     4ae:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
     4b2:	f502 6080 	add.w	r0, r2, #1024	; 0x400
     4b6:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
     4ba:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
     4be:	4298      	cmp	r0, r3
     4c0:	bf34      	ite	cc
     4c2:	2001      	movcc	r0, #1
     4c4:	2020      	movcs	r0, #32
     4c6:	eb02 1040 	add.w	r0, r2, r0, lsl #5
	} while (location < end_addr);
     4ca:	4283      	cmp	r3, r0
		SCB_CACHE_DCIMVAC = location;
     4cc:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
     4d0:	461a      	mov	r2, r3
	} while (location < end_addr);
     4d2:	f103 0320 	add.w	r3, r3, #32
     4d6:	d1f8      	bne.n	4ca <acq_isr()+0x36>
	asm("dsb");
     4d8:	f3bf 8f4f 	dsb	sy
	asm("isb");
     4dc:	f3bf 8f6f 	isb	sy
        arm_dcache_delete((void*)src, sizeof(i2s_buffer) / 2);
    #endif

    // extract data
    #if NCH==1
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     4e0:	4b26      	ldr	r3, [pc, #152]	; (57c <acq_isr()+0xe8>)
     4e2:	2200      	movs	r2, #0
     4e4:	4c26      	ldr	r4, [pc, #152]	; (580 <acq_isr()+0xec>)
     4e6:	f9b3 0000 	ldrsh.w	r0, [r3]
     4ea:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
     4ee:	4423      	add	r3, r4
     4f0:	4103      	asrs	r3, r0
     4f2:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
     4f6:	3201      	adds	r2, #1
     4f8:	2a80      	cmp	r2, #128	; 0x80
     4fa:	d1f6      	bne.n	4ea <acq_isr()+0x56>
#endif

int32_t acqbias=0;
/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     4fc:	4c21      	ldr	r4, [pc, #132]	; (584 <acq_isr()+0xf0>)

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     4fe:	2300      	movs	r3, #0
     500:	4a21      	ldr	r2, [pc, #132]	; (588 <acq_isr()+0xf4>)
{ procCount++;
     502:	6820      	ldr	r0, [r4, #0]
     504:	3001      	adds	r0, #1
     506:	6020      	str	r0, [r4, #0]
     508:	4610      	mov	r0, r2
  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     50a:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
     50e:	3301      	adds	r3, #1
     510:	2b80      	cmp	r3, #128	; 0x80
     512:	f840 4f04 	str.w	r4, [r0, #4]!
     516:	d1f8      	bne.n	50a <acq_isr()+0x76>
     518:	4b1c      	ldr	r3, [pc, #112]	; (58c <acq_isr()+0xf8>)
  
  float tmp=0.0f;
     51a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 590 <acq_isr()+0xfc>
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii];
     51e:	edd2 7a01 	vldr	s15, [r2, #4]
     522:	3204      	adds	r2, #4
     524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     528:	4293      	cmp	r3, r2
     52a:	ee37 7a27 	vadd.f32	s14, s14, s15
     52e:	d1f6      	bne.n	51e <acq_isr()+0x8a>
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     530:	eddf 7a18 	vldr	s15, [pc, #96]	; 594 <acq_isr()+0x100>

  if(proc==0)
     534:	4b18      	ldr	r3, [pc, #96]	; (598 <acq_isr()+0x104>)
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     536:	ee27 7a27 	vmul.f32	s14, s14, s15
     53a:	4a18      	ldr	r2, [pc, #96]	; (59c <acq_isr()+0x108>)
  if(proc==0)
     53c:	f9b3 3000 	ldrsh.w	r3, [r3]
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     540:	eebd 7ac7 	vcvt.s32.f32	s14, s14
     544:	ed82 7a00 	vstr	s14, [r2]
  if(proc==0)
     548:	b113      	cbz	r3, 550 <acq_isr()+0xbc>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     54a:	2b01      	cmp	r3, #1
     54c:	d00a      	beq.n	564 <acq_isr()+0xd0>
  }
     54e:	bd10      	pop	{r4, pc}
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     550:	4813      	ldr	r0, [pc, #76]	; (5a0 <acq_isr()+0x10c>)
     552:	f000 fffb 	bl	154c <pushData(unsigned long*)>
     556:	2800      	cmp	r0, #0
     558:	d1f9      	bne.n	54e <acq_isr()+0xba>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     55a:	4a12      	ldr	r2, [pc, #72]	; (5a4 <acq_isr()+0x110>)
     55c:	6813      	ldr	r3, [r2, #0]
     55e:	3301      	adds	r3, #1
     560:	6013      	str	r3, [r2, #0]
  }
     562:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     564:	480e      	ldr	r0, [pc, #56]	; (5a0 <acq_isr()+0x10c>)
     566:	f000 f967 	bl	838 <compress(void*)>
     56a:	2800      	cmp	r0, #0
     56c:	d1ef      	bne.n	54e <acq_isr()+0xba>
     56e:	e7f4      	b.n	55a <acq_isr()+0xc6>
     570:	2001d74c 	.word	0x2001d74c
     574:	20200400 	.word	0x20200400
     578:	400e8000 	.word	0x400e8000
     57c:	20008bca 	.word	0x20008bca
     580:	06978000 	.word	0x06978000
     584:	2001e6e4 	.word	0x2001e6e4
     588:	2001e41c 	.word	0x2001e41c
     58c:	2001e61c 	.word	0x2001e61c
     590:	00000000 	.word	0x00000000
     594:	3c000000 	.word	0x3c000000
     598:	2001ec8c 	.word	0x2001ec8c
     59c:	2001e620 	.word	0x2001e620
     5a0:	2001e420 	.word	0x2001e420
     5a4:	2001e6e8 	.word	0x2001e6e8

000005a8 <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
     5a8:	b510      	push	{r4, lr}
     5aa:	4604      	mov	r4, r0
		release();
     5ac:	f007 f84a 	bl	7644 <DMAChannel::release()>
	}
     5b0:	4620      	mov	r0, r4
     5b2:	bd10      	pop	{r4, pc}
     5b4:	0000      	movs	r0, r0
	...

000005b8 <setAudioFrequency(int)>:
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5b8:	ee07 0a90 	vmov	s15, r0
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     5bc:	4938      	ldr	r1, [pc, #224]	; (6a0 <setAudioFrequency(int)+0xe8>)
     5be:	0280      	lsls	r0, r0, #10
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5c0:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
     5c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     5c8:	4b36      	ldr	r3, [pc, #216]	; (6a4 <setAudioFrequency(int)+0xec>)
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5ca:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 688 <setAudioFrequency(int)+0xd0>
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     5ce:	fb91 f1f0 	sdiv	r1, r1, r0
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5d2:	ee27 7b06 	vmul.f64	d7, d7, d6
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     5d6:	1c4a      	adds	r2, r1, #1
     5d8:	ee06 2a10 	vmov	s12, r2
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5dc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     5e0:	ee27 7b03 	vmul.f64	d7, d7, d3
     5e4:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 690 <setAudioFrequency(int)+0xd8>
  {
     5e8:	b410      	push	{r4}
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5ea:	ee27 7b06 	vmul.f64	d7, d7, d6
    int c1 = C * c2 - (c0 * c2);
     5ee:	f242 7410 	movw	r4, #10000	; 0x2710
     5f2:	ed9f 5b29 	vldr	d5, [pc, #164]	; 698 <setAudioFrequency(int)+0xe0>
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5f6:	ee87 6b04 	vdiv.f64	d6, d7, d4
    int c0 = C;
     5fa:	eefd 7bc6 	vcvt.s32.f64	s15, d6
     5fe:	ee17 2a90 	vmov	r2, s15
    int c1 = C * c2 - (c0 * c2);
     602:	fb04 f002 	mul.w	r0, r4, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     606:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     60a:	ee07 0a10 	vmov	s14, r0
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     60e:	f442 1289 	orr.w	r2, r2, #1122304	; 0x112000
    int c1 = C * c2 - (c0 * c2);
     612:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     616:	671a      	str	r2, [r3, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     618:	ee96 7b05 	vfnms.f64	d7, d6, d5
     61c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     620:	ee17 2a90 	vmov	r2, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     624:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
     628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     62c:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     636:	671a      	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     638:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     63a:	2a00      	cmp	r2, #0
     63c:	dafc      	bge.n	638 <setAudioFrequency(int)+0x80>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     63e:	f8d3 4170 	ldr.w	r4, [r3, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     642:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     646:	4a18      	ldr	r2, [pc, #96]	; (6a8 <setAudioFrequency(int)+0xf0>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     648:	4818      	ldr	r0, [pc, #96]	; (6ac <setAudioFrequency(int)+0xf4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     64a:	4022      	ands	r2, r4
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     64c:	4c18      	ldr	r4, [pc, #96]	; (6b0 <setAudioFrequency(int)+0xf8>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     64e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     652:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     654:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     658:	671a      	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     65a:	69c2      	ldr	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     65c:	4b15      	ldr	r3, [pc, #84]	; (6b4 <setAudioFrequency(int)+0xfc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     65e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     666:	61c2      	str	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     668:	6a82      	ldr	r2, [r0, #40]	; 0x28
     66a:	4013      	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     66c:	4a12      	ldr	r2, [pc, #72]	; (6b8 <setAudioFrequency(int)+0x100>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     66e:	430b      	orrs	r3, r1
     670:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     674:	6283      	str	r3, [r0, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     676:	6863      	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     678:	401a      	ands	r2, r3
     67a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     67e:	6062      	str	r2, [r4, #4]
  }
     680:	f85d 4b04 	ldr.w	r4, [sp], #4
     684:	4770      	bx	lr
     686:	bf00      	nop
     688:	00000000 	.word	0x00000000
     68c:	40700000 	.word	0x40700000
     690:	00000000 	.word	0x00000000
     694:	4176e360 	.word	0x4176e360
     698:	00000000 	.word	0x00000000
     69c:	40c38800 	.word	0x40c38800
     6a0:	269fb200 	.word	0x269fb200
     6a4:	400d8000 	.word	0x400d8000
     6a8:	ff7f7fff 	.word	0xff7f7fff
     6ac:	400fc000 	.word	0x400fc000
     6b0:	400ac000 	.word	0x400ac000
     6b4:	fffffe00 	.word	0xfffffe00
     6b8:	fff7fff8 	.word	0xfff7fff8

000006bc <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     6bc:	4a19      	ldr	r2, [pc, #100]	; (724 <i2s_setup()+0x68>)
     6be:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     6c0:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     6c2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     6c6:	4c18      	ldr	r4, [pc, #96]	; (728 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     6c8:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     6ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     6ce:	2b00      	cmp	r3, #0
     6d0:	db27      	blt.n	722 <i2s_setup()+0x66>
    int fs = fsamp;
     6d2:	4b16      	ldr	r3, [pc, #88]	; (72c <i2s_setup()+0x70>)
    setAudioFrequency(fs);
     6d4:	6818      	ldr	r0, [r3, #0]
     6d6:	f7ff ff6f 	bl	5b8 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     6da:	4b15      	ldr	r3, [pc, #84]	; (730 <i2s_setup()+0x74>)
     6dc:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     6de:	4915      	ldr	r1, [pc, #84]	; (734 <i2s_setup()+0x78>)
     6e0:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     6e2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     6e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     6ea:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     6ee:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     6f2:	2201      	movs	r2, #1
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     6f4:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     6f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     6fc:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     6fe:	480e      	ldr	r0, [pc, #56]	; (738 <i2s_setup()+0x7c>)
    I2S1_RMR = 0;
     700:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     704:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     708:	490c      	ldr	r1, [pc, #48]	; (73c <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     70a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     70e:	4a0c      	ldr	r2, [pc, #48]	; (740 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     710:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     714:	4b0b      	ldr	r3, [pc, #44]	; (744 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     716:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     71a:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     71e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     722:	bd10      	pop	{r4, pc}
     724:	400fc000 	.word	0x400fc000
     728:	40384000 	.word	0x40384000
     72c:	20008b68 	.word	0x20008b68
     730:	401f8000 	.word	0x401f8000
     734:	401f8400 	.word	0x401f8400
     738:	07000001 	.word	0x07000001
     73c:	00011f1b 	.word	0x00011f1b
     740:	1f1f1f00 	.word	0x1f1f1f00
     744:	92000001 	.word	0x92000001

00000748 <dma_setup()>:
  {
     748:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     74a:	4c1c      	ldr	r4, [pc, #112]	; (7bc <dma_setup()+0x74>)
     74c:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     74e:	4d1c      	ldr	r5, [pc, #112]	; (7c0 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     750:	4620      	mov	r0, r4
     752:	f006 ff1d 	bl	7590 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     756:	6823      	ldr	r3, [r4, #0]
     758:	481a      	ldr	r0, [pc, #104]	; (7c4 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     75a:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     75e:	491a      	ldr	r1, [pc, #104]	; (7c8 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     760:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     762:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     764:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     766:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     768:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     76a:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     76c:	4d17      	ldr	r5, [pc, #92]	; (7cc <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     76e:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     770:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     772:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     774:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     776:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     778:	2204      	movs	r2, #4
     77a:	4915      	ldr	r1, [pc, #84]	; (7d0 <dma_setup()+0x88>)
     77c:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     77e:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     780:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     782:	4d14      	ldr	r5, [pc, #80]	; (7d4 <dma_setup()+0x8c>)
     784:	60da      	str	r2, [r3, #12]
		*mux = 0;
     786:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     78a:	4b13      	ldr	r3, [pc, #76]	; (7d8 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     78c:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     790:	2101      	movs	r1, #1
     792:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     794:	4811      	ldr	r0, [pc, #68]	; (7dc <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     796:	f002 051f 	and.w	r5, r2, #31
     79a:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     79e:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     7a2:	40a9      	lsls	r1, r5
     7a4:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     7a6:	4d0e      	ldr	r5, [pc, #56]	; (7e0 <dma_setup()+0x98>)
     7a8:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     7ac:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     7ae:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     7b0:	490c      	ldr	r1, [pc, #48]	; (7e4 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     7b2:	4b0d      	ldr	r3, [pc, #52]	; (7e8 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     7b4:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     7b6:	7922      	ldrb	r2, [r4, #4]
     7b8:	76da      	strb	r2, [r3, #27]
  }
     7ba:	bd38      	pop	{r3, r4, r5, pc}
     7bc:	2001d74c 	.word	0x2001d74c
     7c0:	02020000 	.word	0x02020000
     7c4:	403840a0 	.word	0x403840a0
     7c8:	20200000 	.word	0x20200000
     7cc:	fffff800 	.word	0xfffff800
     7d0:	400ec000 	.word	0x400ec000
     7d4:	80000013 	.word	0x80000013
     7d8:	38003840 	.word	0x38003840
     7dc:	20008c00 	.word	0x20008c00
     7e0:	00000495 	.word	0x00000495
     7e4:	e000e400 	.word	0xe000e400
     7e8:	400e8000 	.word	0x400e8000

000007ec <acqModifyFrequency(unsigned long)>:
  {
     7ec:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     7ee:	4c08      	ldr	r4, [pc, #32]	; (810 <acqModifyFrequency(unsigned long)+0x24>)
     7f0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     7f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     7f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     7fc:	f7ff fedc 	bl	5b8 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     800:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     804:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     808:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     80c:	bd10      	pop	{r4, pc}
     80e:	bf00      	nop
     810:	40384000 	.word	0x40384000

00000814 <_GLOBAL__sub_I_procCount>:
		begin();
     814:	4805      	ldr	r0, [pc, #20]	; (82c <_GLOBAL__sub_I_procCount+0x18>)
     816:	2100      	movs	r1, #0
  }
}
     818:	b508      	push	{r3, lr}
     81a:	f006 feb9 	bl	7590 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     81e:	4a04      	ldr	r2, [pc, #16]	; (830 <_GLOBAL__sub_I_procCount+0x1c>)
     820:	4904      	ldr	r1, [pc, #16]	; (834 <_GLOBAL__sub_I_procCount+0x20>)
     822:	4802      	ldr	r0, [pc, #8]	; (82c <_GLOBAL__sub_I_procCount+0x18>)
}
     824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     828:	f008 bf94 	b.w	9754 <__aeabi_atexit>
     82c:	2001d74c 	.word	0x2001d74c
     830:	200085c4 	.word	0x200085c4
     834:	000005a9 	.word	0x000005a9

00000838 <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     83c:	b083      	sub	sp, #12
     83e:	4604      	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
     840:	f007 fc46 	bl	80d0 <rtc_get>
     844:	4682      	mov	sl, r0
  uint32_t t1;
  t1 = micros();
     846:	f007 fae1 	bl	7e0c <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     84a:	49a1      	ldr	r1, [pc, #644]	; (ad0 <compress(void*)+0x298>)
     84c:	6822      	ldr	r2, [r4, #0]
     84e:	4623      	mov	r3, r4
     850:	680d      	ldr	r5, [r1, #0]
     852:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     856:	499f      	ldr	r1, [pc, #636]	; (ad4 <compress(void*)+0x29c>)
  t1 = micros();
     858:	4681      	mov	r9, r0
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     85a:	602a      	str	r2, [r5, #0]
     85c:	462c      	mov	r4, r5
     85e:	600a      	str	r2, [r1, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     860:	4629      	mov	r1, r5
     862:	4618      	mov	r0, r3
     864:	3304      	adds	r3, #4
     866:	e9d0 0200 	ldrd	r0, r2, [r0]
     86a:	42b3      	cmp	r3, r6
     86c:	eba2 0200 	sub.w	r2, r2, r0
     870:	f844 2f04 	str.w	r2, [r4, #4]!
     874:	d1f5      	bne.n	862 <compress(void*)+0x2a>
     876:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc

  // find maximum in filtered data
  int32_t mx = 0;
     87a:	2200      	movs	r2, #0
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
     87c:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd;
    if(dd>mx) mx = dd;
     880:	2b00      	cmp	r3, #0
     882:	bfb8      	it	lt
     884:	425b      	neglt	r3, r3
     886:	429a      	cmp	r2, r3
     888:	bfb8      	it	lt
     88a:	461a      	movlt	r2, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     88c:	4281      	cmp	r1, r0
     88e:	d1f5      	bne.n	87c <compress(void*)+0x44>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     890:	2702      	movs	r7, #2
     892:	2101      	movs	r1, #1
     894:	e003      	b.n	89e <compress(void*)+0x66>
     896:	3701      	adds	r7, #1
     898:	2f18      	cmp	r7, #24
     89a:	f000 8110 	beq.w	abe <compress(void*)+0x286>
     89e:	1e7c      	subs	r4, r7, #1
     8a0:	fa01 f304 	lsl.w	r3, r1, r4
     8a4:	4293      	cmp	r3, r2
     8a6:	ddf6      	ble.n	896 <compress(void*)+0x5e>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NSAMP*nb) / MBIT;
     8a8:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
     8ac:	40b9      	lsls	r1, r7
  int ndat = NH+NCH + ncmp;
     8ae:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
     8b2:	1e48      	subs	r0, r1, #1
  int ndat = NH+NCH + ncmp;
     8b4:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     8b6:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
     8ba:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
     8be:	4986      	ldr	r1, [pc, #536]	; (ad8 <compress(void*)+0x2a0>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     8c0:	4d86      	ldr	r5, [pc, #536]	; (adc <compress(void*)+0x2a4>)
  proc_stat[nb-1]++;
     8c2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     8c6:	3201      	adds	r2, #1
     8c8:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     8cc:	682a      	ldr	r2, [r5, #0]
     8ce:	4c84      	ldr	r4, [pc, #528]	; (ae0 <compress(void*)+0x2a8>)
     8d0:	42ba      	cmp	r2, r7
     8d2:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     8d6:	46a3      	mov	fp, r4
     8d8:	4622      	mov	r2, r4
     8da:	bf38      	it	cc
     8dc:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     8de:	f852 1f04 	ldr.w	r1, [r2, #4]!
     8e2:	4001      	ands	r1, r0
     8e4:	4296      	cmp	r6, r2
     8e6:	6011      	str	r1, [r2, #0]
     8e8:	d1f9      	bne.n	8de <compress(void*)+0xa6>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     8ea:	4d7e      	ldr	r5, [pc, #504]	; (ae4 <compress(void*)+0x2ac>)
     8ec:	f44f 7200 	mov.w	r2, #512	; 0x200
     8f0:	2100      	movs	r1, #0
     8f2:	9300      	str	r3, [sp, #0]
     8f4:	4628      	mov	r0, r5
     8f6:	f00a ffe9 	bl	b8cc <memset>
  *iptr++ = nb | shift<<16;
     8fa:	4a7b      	ldr	r2, [pc, #492]	; (ae8 <compress(void*)+0x2b0>)
  *iptr++ = NCH+ncmp; // number of data after header
     8fc:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     8fe:	2100      	movs	r1, #0
  *iptr++ = nb | shift<<16;
     900:	f9b2 2000 	ldrsh.w	r2, [r2]

  // pack data
  // 
  int nx = MBIT;
     904:	f04f 0c20 	mov.w	ip, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
     908:	2007      	movs	r0, #7
  *iptr++ = NCH+ncmp; // number of data after header
     90a:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
     90c:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
     910:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     912:	f8db 2000 	ldr.w	r2, [fp]
     916:	f8cb 1000 	str.w	r1, [fp]
     91a:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     91c:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     920:	602a      	str	r2, [r5, #0]
  *iptr++ = NCH;
     922:	2201      	movs	r2, #1
  *iptr++ = t1;
     924:	e9c5 a902 	strd	sl, r9, [r5, #8]
  *iptr++ = NCH;
     928:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NSAMP; ii ++)
     92a:	e00a      	b.n	942 <compress(void*)+0x10a>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     92c:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
     930:	4694      	mov	ip, r2
     932:	ea41 010e 	orr.w	r1, r1, lr
     936:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NSAMP; ii ++)
     93a:	42a6      	cmp	r6, r4
     93c:	d018      	beq.n	970 <compress(void*)+0x138>
      {   outData[kk] |= (tempData[ii] << nx);
     93e:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     942:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
     946:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
     948:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
     94c:	dcee      	bgt.n	92c <compress(void*)+0xf4>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     94e:	eba7 0e0c 	sub.w	lr, r7, ip
     952:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
     956:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
     95a:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
     95e:	d12f      	bne.n	9c0 <compress(void*)+0x188>
      {   outData[kk++] |= tempData[ii];
     960:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NSAMP; ii ++)
     962:	42a6      	cmp	r6, r4
          nx=MBIT;
     964:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
     968:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     96c:	4648      	mov	r0, r9
  for (int ii = 0; ii < NSAMP; ii ++)
     96e:	d1e6      	bne.n	93e <compress(void*)+0x106>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     970:	4e5e      	ldr	r6, [pc, #376]	; (aec <compress(void*)+0x2b4>)
     972:	6834      	ldr	r4, [r6, #0]
     974:	eb04 0208 	add.w	r2, r4, r8
     978:	2a80      	cmp	r2, #128	; 0x80
     97a:	dc2d      	bgt.n	9d8 <compress(void*)+0x1a0>
     97c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     980:	4a5b      	ldr	r2, [pc, #364]	; (af0 <compress(void*)+0x2b8>)
     982:	4858      	ldr	r0, [pc, #352]	; (ae4 <compress(void*)+0x2ac>)
     984:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
     988:	4423      	add	r3, r4
     98a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     98e:	2300      	movs	r3, #0
     990:	e001      	b.n	996 <compress(void*)+0x15e>
     992:	f850 1f04 	ldr.w	r1, [r0, #4]!
     996:	3301      	adds	r3, #1
     998:	f842 1f04 	str.w	r1, [r2, #4]!
     99c:	4543      	cmp	r3, r8
     99e:	dbf8      	blt.n	992 <compress(void*)+0x15a>
     9a0:	f1b8 0f00 	cmp.w	r8, #0
     9a4:	f108 33ff 	add.w	r3, r8, #4294967295
     9a8:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
     9ac:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9b0:	bfd8      	it	le
     9b2:	2300      	movle	r3, #0
     9b4:	4423      	add	r3, r4
     9b6:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     9b8:	4638      	mov	r0, r7
     9ba:	b003      	add	sp, #12
     9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     9c0:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
     9c4:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     9c8:	ea4e 0202 	orr.w	r2, lr, r2
     9cc:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     9d0:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
     9d2:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
     9d6:	e7b0      	b.n	93a <compress(void*)+0x102>
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     9d8:	2c7a      	cmp	r4, #122	; 0x7a
     9da:	dd22      	ble.n	a22 <compress(void*)+0x1ea>
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     9dc:	2c7f      	cmp	r4, #127	; 0x7f
     9de:	dc0a      	bgt.n	9f6 <compress(void*)+0x1be>
     9e0:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
     9e4:	4842      	ldr	r0, [pc, #264]	; (af0 <compress(void*)+0x2b8>)
     9e6:	2100      	movs	r1, #0
     9e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     9ec:	0092      	lsls	r2, r2, #2
     9ee:	f00a ff6d 	bl	b8cc <memset>
     9f2:	2380      	movs	r3, #128	; 0x80
     9f4:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
     9f6:	483e      	ldr	r0, [pc, #248]	; (af0 <compress(void*)+0x2b8>)
     9f8:	f000 fda8 	bl	154c <pushData(unsigned long*)>
     9fc:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9fe:	ea4f 0288 	mov.w	r2, r8, lsl #2
     a02:	4938      	ldr	r1, [pc, #224]	; (ae4 <compress(void*)+0x2ac>)
      if(!pushData(dout)) ret = 0;
     a04:	bf18      	it	ne
     a06:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     a08:	f1b8 0f00 	cmp.w	r8, #0
     a0c:	4838      	ldr	r0, [pc, #224]	; (af0 <compress(void*)+0x2b8>)
     a0e:	bfd8      	it	le
     a10:	2204      	movle	r2, #4
     a12:	f007 fa8f 	bl	7f34 <memcpy>
}
     a16:	4638      	mov	r0, r7
     a18:	f8c6 8000 	str.w	r8, [r6]
     a1c:	b003      	add	sp, #12
     a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     a22:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
     a26:	4832      	ldr	r0, [pc, #200]	; (af0 <compress(void*)+0x2b8>)
     a28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     a2c:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     a30:	616b      	str	r3, [r5, #20]
      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     a32:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     a36:	4d2b      	ldr	r5, [pc, #172]	; (ae4 <compress(void*)+0x2ac>)
     a38:	4423      	add	r3, r4
     a3a:	4629      	mov	r1, r5
     a3c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     a40:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
     a44:	e001      	b.n	a4a <compress(void*)+0x212>
     a46:	f851 2f04 	ldr.w	r2, [r1, #4]!
     a4a:	f843 2f04 	str.w	r2, [r3, #4]!
     a4e:	4298      	cmp	r0, r3
     a50:	d1f9      	bne.n	a46 <compress(void*)+0x20e>
     a52:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
     a54:	4826      	ldr	r0, [pc, #152]	; (af0 <compress(void*)+0x2b8>)
     a56:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
     a5a:	6033      	str	r3, [r6, #0]
     a5c:	f000 fd76 	bl	154c <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a60:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
     a62:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
     a64:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a66:	4a23      	ldr	r2, [pc, #140]	; (af4 <compress(void*)+0x2bc>)
      if(!pushData(dout)) ret = 0;
     a68:	bf18      	it	ne
     a6a:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
     a6c:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a70:	f8df e070 	ldr.w	lr, [pc, #112]	; ae4 <compress(void*)+0x2ac>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a74:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a76:	f8df c078 	ldr.w	ip, [pc, #120]	; af0 <compress(void*)+0x2b8>
      while (ii < ndat) dout[nout++] = outData[ii++];
     a7a:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a7c:	ea42 0203 	orr.w	r2, r2, r3
     a80:	f04f 0306 	mov.w	r3, #6
     a84:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a86:	6033      	str	r3, [r6, #0]
     a88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     a8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     a90:	e89e 0003 	ldmia.w	lr, {r0, r1}
     a94:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
     a98:	da8e      	bge.n	9b8 <compress(void*)+0x180>
     a9a:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
     a9e:	eb05 0189 	add.w	r1, r5, r9, lsl #2
     aa2:	f10c 0008 	add.w	r0, ip, #8
     aa6:	4442      	add	r2, r8
     aa8:	0092      	lsls	r2, r2, #2
     aaa:	f007 fa43 	bl	7f34 <memcpy>
     aae:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
     ab2:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
     ab4:	4443      	add	r3, r8
     ab6:	6033      	str	r3, [r6, #0]
}
     ab8:	b003      	add	sp, #12
     aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     abe:	2267      	movs	r2, #103	; 0x67
     ac0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
     ac4:	f04f 0868 	mov.w	r8, #104	; 0x68
     ac8:	2361      	movs	r3, #97	; 0x61
     aca:	2417      	movs	r4, #23
     acc:	9201      	str	r2, [sp, #4]
     ace:	e6f6      	b.n	8be <compress(void*)+0x86>
     ad0:	20008bb0 	.word	0x20008bb0
     ad4:	2001ec68 	.word	0x2001ec68
     ad8:	2001e6ec 	.word	0x2001e6ec
     adc:	2001e6c4 	.word	0x2001e6c4
     ae0:	2001de64 	.word	0x2001de64
     ae4:	2001da14 	.word	0x2001da14
     ae8:	20008bca 	.word	0x20008bca
     aec:	2001e0bc 	.word	0x2001e0bc
     af0:	2001d754 	.word	0x2001d754
     af4:	ffff0000 	.word	0xffff0000

00000af8 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     af8:	2000      	movs	r0, #0
     afa:	4770      	bx	lr

00000afc <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     afc:	4770      	bx	lr
     afe:	bf00      	nop

00000b00 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     b00:	b570      	push	{r4, r5, r6, lr}
     b02:	b082      	sub	sp, #8
     b04:	4606      	mov	r6, r0
     b06:	4614      	mov	r4, r2
     b08:	460d      	mov	r5, r1
    datetime_t t;
    rtc_get_datetime(&t);
     b0a:	4668      	mov	r0, sp
     b0c:	f000 fec2 	bl	1894 <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
     b10:	f89d 2002 	ldrb.w	r2, [sp, #2]
     b14:	f89d c003 	ldrb.w	ip, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     b18:	f8bd 3000 	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0
     b1c:	2a0c      	cmp	r2, #12
     b1e:	bf98      	it	ls
     b20:	f1bc 0f1f 	cmpls.w	ip, #31
     b24:	d804      	bhi.n	b30 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x30>
     b26:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
     b2a:	b29b      	uxth	r3, r3
     b2c:	2b7f      	cmp	r3, #127	; 0x7f
     b2e:	d920      	bls.n	b72 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
                                              : year << 9 | month << 5 | day;
     b30:	f04f 0c00 	mov.w	ip, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
     b34:	f89d 2005 	ldrb.w	r2, [sp, #5]
     b38:	f89d 3006 	ldrb.w	r3, [sp, #6]
     b3c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
     b40:	2a17      	cmp	r2, #23
     b42:	bf98      	it	ls
     b44:	2b3b      	cmpls	r3, #59	; 0x3b
    *date = FS_DATE(t.year,t.month,t.day);
     b46:	f8a6 c000 	strh.w	ip, [r6]
     b4a:	d801      	bhi.n	b50 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x50>
     b4c:	293b      	cmp	r1, #59	; 0x3b
     b4e:	d905      	bls.n	b5c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5c>
             ? 0
             : hour << 11 | minute << 5 | second >> 1;
     b50:	2300      	movs	r3, #0
    *ms10 = 0;
     b52:	2200      	movs	r2, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
     b54:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
     b56:	7022      	strb	r2, [r4, #0]
}
     b58:	b002      	add	sp, #8
     b5a:	bd70      	pop	{r4, r5, r6, pc}
     b5c:	015b      	lsls	r3, r3, #5
     b5e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    *ms10 = 0;
     b62:	2200      	movs	r2, #0
     b64:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
     b68:	b29b      	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
     b6a:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
     b6c:	7022      	strb	r2, [r4, #0]
}
     b6e:	b002      	add	sp, #8
     b70:	bd70      	pop	{r4, r5, r6, pc}
                                              : year << 9 | month << 5 | day;
     b72:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
     b76:	ea4c 2c43 	orr.w	ip, ip, r3, lsl #9
     b7a:	fa1f fc8c 	uxth.w	ip, ip
     b7e:	e7d9      	b.n	b34 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x34>

00000b80 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template <class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     b80:	4b04      	ldr	r3, [pc, #16]	; (b94 <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b82:	b510      	push	{r4, lr}
     b84:	4604      	mov	r4, r0
     b86:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() { close(); }
     b8a:	f003 fe51 	bl	4830 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b8e:	4620      	mov	r0, r4
     b90:	bd10      	pop	{r4, pc}
     b92:	bf00      	nop
     b94:	200006d0 	.word	0x200006d0

00000b98 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile   ? m_fFile->read(buf, count)
     b98:	6c83      	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
     b9a:	b500      	push	{lr}
     b9c:	b083      	sub	sp, #12
     b9e:	b163      	cbz	r3, bba <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     ba0:	2201      	movs	r2, #1
     ba2:	f10d 0107 	add.w	r1, sp, #7
     ba6:	4618      	mov	r0, r3
     ba8:	f002 fdba 	bl	3720 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     bac:	2801      	cmp	r0, #1
     bae:	d10c      	bne.n	bca <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     bb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
     bb4:	b003      	add	sp, #12
     bb6:	f85d fb04 	ldr.w	pc, [sp], #4
     bba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->read(buf, count)
     bbc:	b128      	cbz	r0, bca <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     bbe:	2201      	movs	r2, #1
     bc0:	f10d 0107 	add.w	r1, sp, #7
     bc4:	f001 f8b2 	bl	1d2c <ExFatFile::read(void*, unsigned int)>
     bc8:	e7f0      	b.n	bac <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     bca:	f04f 30ff 	mov.w	r0, #4294967295
     bce:	e7f1      	b.n	bb4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000bd0 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     bd0:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bd2:	b113      	cbz	r3, bda <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     bd4:	4618      	mov	r0, r3
     bd6:	f002 be77 	b.w	38c8 <FatFile::peek()>
     bda:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
     bdc:	b108      	cbz	r0, be2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     bde:	f001 b975 	b.w	1ecc <ExFatFile::peek()>
  int peek() { return BaseFile::peek(); }
     be2:	f04f 30ff 	mov.w	r0, #4294967295
     be6:	4770      	bx	lr

00000be8 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     be8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bea:	b153      	cbz	r3, c02 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     bec:	7818      	ldrb	r0, [r3, #0]
     bee:	f010 0008 	ands.w	r0, r0, #8
     bf2:	d00d      	beq.n	c10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     bf4:	69d8      	ldr	r0, [r3, #28]
     bf6:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     bf8:	1ac0      	subs	r0, r0, r3
     bfa:	bf48      	it	mi
     bfc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     c00:	4770      	bx	lr
     c02:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     c04:	b1a3      	cbz	r3, c30 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
    return n > INT_MAX ? INT_MAX : n;
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     c06:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     c0a:	f010 0008 	ands.w	r0, r0, #8
     c0e:	d100      	bne.n	c12 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  int available() { return BaseFile::available(); }
     c10:	4770      	bx	lr
     c12:	6918      	ldr	r0, [r3, #16]
     c14:	6819      	ldr	r1, [r3, #0]
     c16:	695a      	ldr	r2, [r3, #20]
     c18:	1a40      	subs	r0, r0, r1
     c1a:	685b      	ldr	r3, [r3, #4]
     c1c:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     c20:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     c24:	f173 0300 	sbcs.w	r3, r3, #0
     c28:	d3f2      	bcc.n	c10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     c2a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     c2e:	4770      	bx	lr
     c30:	4618      	mov	r0, r3
     c32:	e7ed      	b.n	c10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000c34 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     c34:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c36:	b113      	cbz	r3, c3e <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     c38:	4618      	mov	r0, r3
     c3a:	f002 bf49 	b.w	3ad0 <FatFile::sync()>
     c3e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
     c40:	b108      	cbz	r0, c46 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     c42:	f001 bd1b 	b.w	267c <ExFatFile::sync()>
  void flush() { BaseFile::sync(); }
     c46:	4770      	bx	lr

00000c48 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     c48:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c4a:	b113      	cbz	r3, c52 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     c4c:	4618      	mov	r0, r3
     c4e:	f002 bf45 	b.w	3adc <FatFile::write(void const*, unsigned int)>
     c52:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     c54:	b108      	cbz	r0, c5a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     c56:	f001 bea5 	b.w	29a4 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     c5a:	4770      	bx	lr

00000c5c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) { return BaseFile::write(b); }
     c5c:	b500      	push	{lr}
    return m_fFile   ? m_fFile->write(buf, count)
     c5e:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c60:	b083      	sub	sp, #12
     c62:	f88d 1007 	strb.w	r1, [sp, #7]
     c66:	b143      	cbz	r3, c7a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     c68:	2201      	movs	r2, #1
     c6a:	f10d 0107 	add.w	r1, sp, #7
     c6e:	4618      	mov	r0, r3
     c70:	f002 ff34 	bl	3adc <FatFile::write(void const*, unsigned int)>
     c74:	b003      	add	sp, #12
     c76:	f85d fb04 	ldr.w	pc, [sp], #4
     c7a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     c7c:	2800      	cmp	r0, #0
     c7e:	d0f9      	beq.n	c74 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     c80:	2201      	movs	r2, #1
     c82:	f10d 0107 	add.w	r1, sp, #7
     c86:	f001 fe8d 	bl	29a4 <ExFatFile::write(void const*, unsigned int)>
     c8a:	b003      	add	sp, #12
     c8c:	f85d fb04 	ldr.w	pc, [sp], #4

00000c90 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     c90:	b538      	push	{r3, r4, r5, lr}
     c92:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     c94:	b149      	cbz	r1, caa <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
     c96:	4608      	mov	r0, r1
     c98:	460d      	mov	r5, r1
     c9a:	f00b f9b1 	bl	c000 <strlen>
     c9e:	6823      	ldr	r3, [r4, #0]
     ca0:	4602      	mov	r2, r0
     ca2:	4629      	mov	r1, r5
     ca4:	685b      	ldr	r3, [r3, #4]
     ca6:	4620      	mov	r0, r4
     ca8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     caa:	4620      	mov	r0, r4
     cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     cb0:	f006 bda8 	b.w	7804 <Print::println()>

00000cb4 <filing_init()>:
#    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     cb4:	4b26      	ldr	r3, [pc, #152]	; (d50 <filing_init()+0x9c>)
     cb6:	4a27      	ldr	r2, [pc, #156]	; (d54 <filing_init()+0xa0>)
     cb8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  #endif

  FsDateTime::callback = dateTime;
     cbc:	4926      	ldr	r1, [pc, #152]	; (d58 <filing_init()+0xa4>)
     cbe:	4827      	ldr	r0, [pc, #156]	; (d5c <filing_init()+0xa8>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     cc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
{
     cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     cc8:	4f25      	ldr	r7, [pc, #148]	; (d60 <filing_init()+0xac>)
     cca:	b082      	sub	sp, #8
  FsDateTime::callback = dateTime;
     ccc:	2505      	movs	r5, #5
     cce:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d74 <filing_init()+0xc0>
     cd2:	f207 468c 	addw	r6, r7, #1164	; 0x48c
     cd6:	6008      	str	r0, [r1, #0]
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     cd8:	6013      	str	r3, [r2, #0]
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     cda:	f04f 0100 	mov.w	r1, #0
     cde:	4630      	mov	r0, r6
     ce0:	f005 faa2 	bl	6228 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     ce4:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     ce6:	f8c7 6488 	str.w	r6, [r7, #1160]	; 0x488
    return m_card && !m_card->errorCode();
     cea:	f004 fe0f 	bl	590c <SdioCard::errorCode() const>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cee:	2301      	movs	r3, #1
    return m_card && !m_card->errorCode();
     cf0:	4604      	mov	r4, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cf2:	4638      	mov	r0, r7
     cf4:	461a      	mov	r2, r3
    return m_card && !m_card->errorCode();
     cf6:	b99c      	cbnz	r4, d20 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cf8:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
     cfc:	9400      	str	r4, [sp, #0]
     cfe:	f003 fe01 	bl	4904 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
     d02:	b168      	cbz	r0, d20 <filing_init()+0x6c>
     d04:	2111      	movs	r1, #17
     d06:	4817      	ldr	r0, [pc, #92]	; (d64 <filing_init()+0xb0>)
     d08:	f008 fb0c 	bl	9324 <usb_serial_write>
     d0c:	4816      	ldr	r0, [pc, #88]	; (d68 <filing_init()+0xb4>)
     d0e:	f006 fd79 	bl	7804 <Print::println()>

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
     d12:	2301      	movs	r3, #1
     d14:	4a15      	ldr	r2, [pc, #84]	; (d6c <filing_init()+0xb8>)
      return 1;
     d16:	4618      	mov	r0, r3
      haveStore=1;
     d18:	6013      	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
     d1a:	b002      	add	sp, #8
     d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d20:	210f      	movs	r1, #15
     d22:	4640      	mov	r0, r8
     d24:	f008 fafe 	bl	9324 <usb_serial_write>
     d28:	480f      	ldr	r0, [pc, #60]	; (d68 <filing_init()+0xb4>)
     d2a:	f006 fd6b 	bl	7804 <Print::println()>
      delay(100);
     d2e:	2064      	movs	r0, #100	; 0x64
     d30:	f007 f818 	bl	7d64 <delay>
  for(int ii=0; ii<5;ii++)
     d34:	3d01      	subs	r5, #1
     d36:	d1d0      	bne.n	cda <filing_init()+0x26>
     d38:	211b      	movs	r1, #27
     d3a:	480d      	ldr	r0, [pc, #52]	; (d70 <filing_init()+0xbc>)
     d3c:	f008 faf2 	bl	9324 <usb_serial_write>
     d40:	4809      	ldr	r0, [pc, #36]	; (d68 <filing_init()+0xb4>)
     d42:	f006 fd5f 	bl	7804 <Print::println()>
  return 0;
     d46:	4628      	mov	r0, r5
}
     d48:	b002      	add	sp, #8
     d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d4e:	bf00      	nop
     d50:	401f4400 	.word	0x401f4400
     d54:	2000c178 	.word	0x2000c178
     d58:	2001e06c 	.word	0x2001e06c
     d5c:	00000b01 	.word	0x00000b01
     d60:	2001e79c 	.word	0x2001e79c
     d64:	200003cc 	.word	0x200003cc
     d68:	200085ac 	.word	0x200085ac
     d6c:	2001e69c 	.word	0x2001e69c
     d70:	200003f0 	.word	0x200003f0
     d74:	200003e0 	.word	0x200003e0

00000d78 <timeStamp()>:

char * timeStamp(void)
{
     d78:	b510      	push	{r4, lr}
     d7a:	b086      	sub	sp, #24
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
     d7c:	4c0d      	ldr	r4, [pc, #52]	; (db4 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
     d7e:	a804      	add	r0, sp, #16
     d80:	f000 fd88 	bl	1894 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
     d84:	f99d 2017 	ldrsb.w	r2, [sp, #23]
     d88:	f99d 3016 	ldrsb.w	r3, [sp, #22]
     d8c:	f99d 0015 	ldrsb.w	r0, [sp, #21]
     d90:	f99d 1013 	ldrsb.w	r1, [sp, #19]
     d94:	e9cd 3202 	strd	r3, r2, [sp, #8]
     d98:	e9cd 1000 	strd	r1, r0, [sp]
     d9c:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     da0:	4620      	mov	r0, r4
     da2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     da6:	4904      	ldr	r1, [pc, #16]	; (db8 <timeStamp()+0x40>)
     da8:	f00a fbea 	bl	b580 <sprintf>
  return date_time;
}
     dac:	4620      	mov	r0, r4
     dae:	b006      	add	sp, #24
     db0:	bd10      	pop	{r4, pc}
     db2:	bf00      	nop
     db4:	2001e0c0 	.word	0x2001e0c0
     db8:	20000530 	.word	0x20000530

00000dbc <headerInit(long, long, long, int)>:

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
  int nbytes=nbits/8;
     dbc:	2a00      	cmp	r2, #0
{
     dbe:	b530      	push	{r4, r5, lr}
  int nbytes=nbits/8;
     dc0:	bfb4      	ite	lt
     dc2:	1dd4      	addlt	r4, r2, #7
     dc4:	4614      	movge	r4, r2
{
     dc6:	b083      	sub	sp, #12
  int nbytes=nbits/8;
     dc8:	10e4      	asrs	r4, r4, #3

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
     dca:	9301      	str	r3, [sp, #4]
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes;
     dcc:	fb00 f504 	mul.w	r5, r0, r4
  wav_hdr.nBlockAlign=nchan*nbytes;
  wav_hdr.nBitsPerSamples=nbits;

  strcpy(&wav_hdr.info[0], MAGIC);
     dd0:	4b1e      	ldr	r3, [pc, #120]	; (e4c <headerInit(long, long, long, int)+0x90>)
  wav_hdr.nBlockAlign=nchan*nbytes;
     dd2:	fb11 f104 	smulbb	r1, r1, r4
  strcpy(wav_hdr.rId,"RIFF");
     dd6:	4c1e      	ldr	r4, [pc, #120]	; (e50 <headerInit(long, long, long, int)+0x94>)
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes;
     dd8:	e9c4 0506 	strd	r0, r5, [r4, #24]
  wav_hdr.nBlockAlign=nchan*nbytes;
     ddc:	8421      	strh	r1, [r4, #32]
  wav_hdr.nBitsPerSamples=nbits;
     dde:	8462      	strh	r2, [r4, #34]	; 0x22
  strcpy(&wav_hdr.info[0], MAGIC);
     de0:	e893 0003 	ldmia.w	r3, {r0, r1}
  strcpy(wav_hdr.wId,"WAVE");
     de4:	4b1b      	ldr	r3, [pc, #108]	; (e54 <headerInit(long, long, long, int)+0x98>)
  strcpy(&wav_hdr.info[0], MAGIC);
     de6:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  strcpy(wav_hdr.wId,"WAVE");
     dea:	60a3      	str	r3, [r4, #8]
  strcpy(wav_hdr.dId,"data");
     dec:	4b1a      	ldr	r3, [pc, #104]	; (e58 <headerInit(long, long, long, int)+0x9c>)
  strcpy(wav_hdr.rId,"RIFF");
     dee:	491b      	ldr	r1, [pc, #108]	; (e5c <headerInit(long, long, long, int)+0xa0>)
  strcpy(wav_hdr.dId,"data");
     df0:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  wav_hdr.rLen=512-2*4; // will be updated at closing
     df4:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  strcpy(wav_hdr.rId,"RIFF");
     df8:	6021      	str	r1, [r4, #0]
  wav_hdr.rLen=512-2*4; // will be updated at closing
     dfa:	6063      	str	r3, [r4, #4]
  wav_hdr.dLen = 0; // will be updated at closing
     dfc:	2300      	movs	r3, #0
  strcpy(wav_hdr.iId,"info");
     dfe:	4918      	ldr	r1, [pc, #96]	; (e60 <headerInit(long, long, long, int)+0xa4>)
  strcpy(&wav_hdr.info[0], MAGIC);
     e00:	62e0      	str	r0, [r4, #44]	; 0x2c
  strcpy(wav_hdr.fId,"fmt ");
     e02:	4818      	ldr	r0, [pc, #96]	; (e64 <headerInit(long, long, long, int)+0xa8>)
  strcpy(wav_hdr.iId,"info");
     e04:	6261      	str	r1, [r4, #36]	; 0x24
  wav_hdr.fLen=0x10;
     e06:	2110      	movs	r1, #16
  wav_hdr.dLen = 0; // will be updated at closing
     e08:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
     e0c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  strcpy(wav_hdr.fId,"fmt ");
     e10:	60e0      	str	r0, [r4, #12]
  wav_hdr.iLen = 512 - 13*4;
     e12:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
  wav_hdr.nFormatTag=1;
     e16:	e9c4 1304 	strd	r1, r3, [r4, #16]
  wav_hdr.iLen = 512 - 13*4;
     e1a:	62a0      	str	r0, [r4, #40]	; 0x28
  strcpy(&wav_hdr.info[4], timeStamp());
     e1c:	f7ff ffac 	bl	d78 <timeStamp()>
     e20:	4601      	mov	r1, r0
     e22:	f104 0030 	add.w	r0, r4, #48	; 0x30
     e26:	f00b f829 	bl	be7c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
     e2a:	9a01      	ldr	r2, [sp, #4]
     e2c:	490e      	ldr	r1, [pc, #56]	; (e68 <headerInit(long, long, long, int)+0xac>)
     e2e:	f104 0040 	add.w	r0, r4, #64	; 0x40
     e32:	f00a fba5 	bl	b580 <sprintf>
  strcpy(&wav_hdr.info[30]," end");
     e36:	4b0d      	ldr	r3, [pc, #52]	; (e6c <headerInit(long, long, long, int)+0xb0>)
     e38:	6818      	ldr	r0, [r3, #0]
     e3a:	791b      	ldrb	r3, [r3, #4]
     e3c:	f8c4 004a 	str.w	r0, [r4, #74]	; 0x4a

  return (char *)&wav_hdr;
}
     e40:	4620      	mov	r0, r4
  strcpy(&wav_hdr.info[30]," end");
     e42:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     e46:	b003      	add	sp, #12
     e48:	bd30      	pop	{r4, r5, pc}
     e4a:	bf00      	nop
     e4c:	20000398 	.word	0x20000398
     e50:	2001dc14 	.word	0x2001dc14
     e54:	45564157 	.word	0x45564157
     e58:	61746164 	.word	0x61746164
     e5c:	46464952 	.word	0x46464952
     e60:	6f666e69 	.word	0x6f666e69
     e64:	20746d66 	.word	0x20746d66
     e68:	200003a0 	.word	0x200003a0
     e6c:	200003a8 	.word	0x200003a8

00000e70 <writeHeader(char*)>:
  wav_hdr.rLen += wav_hdr.dLen;
  return (char *)&wav_hdr;
}

void writeHeader(char * wav_hdr) 
{ 
     e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_fFile   ? m_fFile->curPosition()
     e74:	4c1f      	ldr	r4, [pc, #124]	; (ef4 <writeHeader(char*)+0x84>)
     e76:	4607      	mov	r7, r0
     e78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e7a:	b333      	cbz	r3, eca <writeHeader(char*)+0x5a>
  bool createContiguous(const char* path, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster() const { return m_curCluster; }

  /** \return The current position for a file or directory. */
  uint32_t curPosition() const { return m_curPosition; }
     e7c:	695d      	ldr	r5, [r3, #20]
     e7e:	462e      	mov	r6, r5
  uint32_t fpos;
  fpos = file.curPosition();
  Serial.printf(" fpos=%d ",fpos);
     e80:	462a      	mov	r2, r5
     e82:	491d      	ldr	r1, [pc, #116]	; (ef8 <writeHeader(char*)+0x88>)
     e84:	481d      	ldr	r0, [pc, #116]	; (efc <writeHeader(char*)+0x8c>)
     e86:	f006 fcd9 	bl	783c <Print::printf(char const*, ...)>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     e8a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e8c:	b1c8      	cbz	r0, ec2 <writeHeader(char*)+0x52>
     e8e:	2100      	movs	r1, #0
     e90:	f002 fd50 	bl	3934 <FatFile::seekSet(unsigned long)>
    return m_fFile   ? m_fFile->write(buf, count)
     e94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e96:	b160      	cbz	r0, eb2 <writeHeader(char*)+0x42>
     e98:	4639      	mov	r1, r7
     e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
     e9e:	f002 fe1d 	bl	3adc <FatFile::write(void const*, unsigned int)>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     ea2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     ea4:	b1db      	cbz	r3, ede <writeHeader(char*)+0x6e>
     ea6:	4629      	mov	r1, r5
     ea8:	4618      	mov	r0, r3
  file.seek(0);
  file.write(wav_hdr,512);
  file.seek(fpos);
}
     eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     eae:	f002 bd41 	b.w	3934 <FatFile::seekSet(unsigned long)>
     eb2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     eb4:	b138      	cbz	r0, ec6 <writeHeader(char*)+0x56>
     eb6:	4639      	mov	r1, r7
     eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
     ebc:	f001 fd72 	bl	29a4 <ExFatFile::write(void const*, unsigned int)>
     ec0:	e7ef      	b.n	ea2 <writeHeader(char*)+0x32>
     ec2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->seekSet(pos)
     ec4:	b930      	cbnz	r0, ed4 <writeHeader(char*)+0x64>
     ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     eca:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->curPosition()
     ecc:	b17e      	cbz	r6, eee <writeHeader(char*)+0x7e>
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster() const { return m_curCluster; }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const { return m_curPosition; }
     ece:	6835      	ldr	r5, [r6, #0]
     ed0:	462e      	mov	r6, r5
     ed2:	e7d5      	b.n	e80 <writeHeader(char*)+0x10>
           : m_xFile ? m_xFile->seekSet(pos)
     ed4:	2200      	movs	r2, #0
     ed6:	2300      	movs	r3, #0
     ed8:	f001 f80e 	bl	1ef8 <ExFatFile::seekSet(unsigned long long)>
     edc:	e7da      	b.n	e94 <writeHeader(char*)+0x24>
     ede:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     ee0:	2800      	cmp	r0, #0
     ee2:	d0f0      	beq.n	ec6 <writeHeader(char*)+0x56>
     ee4:	4632      	mov	r2, r6
     ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     eea:	f001 b805 	b.w	1ef8 <ExFatFile::seekSet(unsigned long long)>
     eee:	4635      	mov	r5, r6
     ef0:	e7c6      	b.n	e80 <writeHeader(char*)+0x10>
     ef2:	bf00      	nop
     ef4:	2001e64c 	.word	0x2001e64c
     ef8:	20000438 	.word	0x20000438
     efc:	200085ac 	.word	0x200085ac

00000f00 <makeHeader(long*)>:
   return wheader;
}
*/

int16_t makeHeader(int32_t *header)
{
     f00:	b530      	push	{r4, r5, lr}
     f02:	b089      	sub	sp, #36	; 0x24
     f04:	4604      	mov	r4, r0

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
     f06:	4d1d      	ldr	r5, [pc, #116]	; (f7c <makeHeader(long*)+0x7c>)
    rtc_get_datetime(&t);
     f08:	a806      	add	r0, sp, #24
     f0a:	f000 fcc3 	bl	1894 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
     f0e:	f99d 001f 	ldrsb.w	r0, [sp, #31]
     f12:	f99d 301e 	ldrsb.w	r3, [sp, #30]
     f16:	f99d 101d 	ldrsb.w	r1, [sp, #29]
     f1a:	f99d 201b 	ldrsb.w	r2, [sp, #27]
     f1e:	e9cd 3003 	strd	r3, r0, [sp, #12]
     f22:	f99d 001a 	ldrsb.w	r0, [sp, #26]
     f26:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     f2a:	9000      	str	r0, [sp, #0]
     f2c:	4620      	mov	r0, r4
     f2e:	e9cd 2101 	strd	r2, r1, [sp, #4]
     f32:	4a13      	ldr	r2, [pc, #76]	; (f80 <makeHeader(long*)+0x80>)
     f34:	4913      	ldr	r1, [pc, #76]	; (f84 <makeHeader(long*)+0x84>)
     f36:	f00a fb23 	bl	b580 <sprintf>
    header[10] = t_on;
     f3a:	4b13      	ldr	r3, [pc, #76]	; (f88 <makeHeader(long*)+0x88>)
    header[9] = t_acq;
     f3c:	682d      	ldr	r5, [r5, #0]
    header[8] = NCH;
     f3e:	2001      	movs	r0, #1
    header[10] = t_on;
     f40:	681b      	ldr	r3, [r3, #0]
    header[6] = SerNum;      // serial number
     f42:	4a12      	ldr	r2, [pc, #72]	; (f8c <makeHeader(long*)+0x8c>)
    header[10] = t_on;
     f44:	62a3      	str	r3, [r4, #40]	; 0x28
    header[11] = t_off;
     f46:	4b12      	ldr	r3, [pc, #72]	; (f90 <makeHeader(long*)+0x90>)
    header[6] = SerNum;      // serial number
     f48:	6812      	ldr	r2, [r2, #0]
    header[11] = t_off;
     f4a:	681b      	ldr	r3, [r3, #0]
    header[7] = fsamp;
     f4c:	4911      	ldr	r1, [pc, #68]	; (f94 <makeHeader(long*)+0x94>)
    header[6] = SerNum;      // serial number
     f4e:	61a2      	str	r2, [r4, #24]
    header[7] = fsamp;
     f50:	6809      	ldr	r1, [r1, #0]
    header[12] = proc;
     f52:	4a11      	ldr	r2, [pc, #68]	; (f98 <makeHeader(long*)+0x98>)
    header[11] = t_off;
     f54:	62e3      	str	r3, [r4, #44]	; 0x2c
    header[13] = shift;
     f56:	4b11      	ldr	r3, [pc, #68]	; (f9c <makeHeader(long*)+0x9c>)
    header[9] = t_acq;
     f58:	6265      	str	r5, [r4, #36]	; 0x24
    header[5] = 20;          // SW version
     f5a:	2514      	movs	r5, #20
    header[13] = shift;
     f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
    header[7] = fsamp;
     f60:	61e1      	str	r1, [r4, #28]
    header[12] = proc;
     f62:	f9b2 1000 	ldrsh.w	r1, [r2]

    header[127]=0x55555555;
     f66:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
     f6a:	6165      	str	r5, [r4, #20]
    header[8] = NCH;
     f6c:	6220      	str	r0, [r4, #32]
    header[12] = proc;
     f6e:	6321      	str	r1, [r4, #48]	; 0x30
    header[127]=0x55555555;
     f70:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
    header[13] = shift;
     f74:	6363      	str	r3, [r4, #52]	; 0x34
    return 1;
}
     f76:	b009      	add	sp, #36	; 0x24
     f78:	bd30      	pop	{r4, r5, pc}
     f7a:	bf00      	nop
     f7c:	20008ba8 	.word	0x20008ba8
     f80:	20000398 	.word	0x20000398
     f84:	200003b0 	.word	0x200003b0
     f88:	20008bac 	.word	0x20008bac
     f8c:	2000c178 	.word	0x2000c178
     f90:	2001ec60 	.word	0x2001ec60
     f94:	20008b68 	.word	0x20008b68
     f98:	2001ec8c 	.word	0x2001ec8c
     f9c:	20008bca 	.word	0x20008bca

00000fa0 <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
     fa0:	b530      	push	{r4, r5, lr}
     fa2:	b087      	sub	sp, #28
     fa4:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
     fa6:	a804      	add	r0, sp, #16
     fa8:	f000 fc74 	bl	1894 <rtc_get_datetime(datetime_t*)>
  if(h==ho) return 0;
     fac:	4915      	ldr	r1, [pc, #84]	; (1004 <newDirectory(char*)+0x64>)

    if(newHour(t.hour))
     fae:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(h==ho) return 0;
     fb2:	680b      	ldr	r3, [r1, #0]
     fb4:	429a      	cmp	r2, r3
     fb6:	d022      	beq.n	ffe <newDirectory(char*)+0x5e>
    {   
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     fb8:	f99d 0012 	ldrsb.w	r0, [sp, #18]
     fbc:	f99d 5013 	ldrsb.w	r5, [sp, #19]
     fc0:	4b11      	ldr	r3, [pc, #68]	; (1008 <newDirectory(char*)+0x68>)
     fc2:	e9cd 5202 	strd	r5, r2, [sp, #8]
     fc6:	681b      	ldr	r3, [r3, #0]
     fc8:	9001      	str	r0, [sp, #4]
     fca:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  ho=h;
     fce:	600a      	str	r2, [r1, #0]
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     fd0:	4a0e      	ldr	r2, [pc, #56]	; (100c <newDirectory(char*)+0x6c>)
     fd2:	490f      	ldr	r1, [pc, #60]	; (1010 <newDirectory(char*)+0x70>)
     fd4:	9000      	str	r0, [sp, #0]
     fd6:	4620      	mov	r0, r4
     fd8:	f00a fad2 	bl	b580 <sprintf>
            DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
        //
        Serial.println(); Serial.print(": "); Serial.print(dirName);
     fdc:	480d      	ldr	r0, [pc, #52]	; (1014 <newDirectory(char*)+0x74>)
     fde:	f006 fc11 	bl	7804 <Print::println()>
     fe2:	2102      	movs	r1, #2
     fe4:	480c      	ldr	r0, [pc, #48]	; (1018 <newDirectory(char*)+0x78>)
     fe6:	f008 f99d 	bl	9324 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
     fea:	4620      	mov	r0, r4
     fec:	f00b f808 	bl	c000 <strlen>
     ff0:	4601      	mov	r1, r0
     ff2:	4620      	mov	r0, r4
     ff4:	f008 f996 	bl	9324 <usb_serial_write>
        return 1;   // have new directory
     ff8:	2001      	movs	r0, #1
    }
    return 0;       // keep old directory

}
     ffa:	b007      	add	sp, #28
     ffc:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
     ffe:	2000      	movs	r0, #0
}
    1000:	b007      	add	sp, #28
    1002:	bd30      	pop	{r4, r5, pc}
    1004:	2001e0b8 	.word	0x2001e0b8
    1008:	2000c178 	.word	0x2000c178
    100c:	20000444 	.word	0x20000444
    1010:	20000448 	.word	0x20000448
    1014:	200085ac 	.word	0x200085ac
    1018:	20000464 	.word	0x20000464

0000101c <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    101c:	b510      	push	{r4, lr}
    101e:	b084      	sub	sp, #16
    1020:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1022:	a802      	add	r0, sp, #8
    1024:	f000 fc36 	bl	1894 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    1028:	4b15      	ldr	r3, [pc, #84]	; (1080 <newFileName(char*)+0x64>)
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    102a:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    if(proc==0)
    102e:	f9b3 3000 	ldrsh.w	r3, [r3]
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    1032:	f99d 100e 	ldrsb.w	r1, [sp, #14]
    if(proc==0)
    1036:	b9cb      	cbnz	r3, 106c <newFileName(char*)+0x50>
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    1038:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    103c:	4a11      	ldr	r2, [pc, #68]	; (1084 <newFileName(char*)+0x68>)
    103e:	e9cd 1000 	strd	r1, r0, [sp]
    1042:	4911      	ldr	r1, [pc, #68]	; (1088 <newFileName(char*)+0x6c>)
    1044:	4620      	mov	r0, r4
    1046:	f00a fa9b 	bl	b580 <sprintf>
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    104a:	4810      	ldr	r0, [pc, #64]	; (108c <newFileName(char*)+0x70>)
    104c:	f006 fbda 	bl	7804 <Print::println()>
    1050:	2102      	movs	r1, #2
    1052:	480f      	ldr	r0, [pc, #60]	; (1090 <newFileName(char*)+0x74>)
    1054:	f008 f966 	bl	9324 <usb_serial_write>
    1058:	4620      	mov	r0, r4
    105a:	f00a ffd1 	bl	c000 <strlen>
    105e:	4601      	mov	r1, r0
    1060:	4620      	mov	r0, r4
    1062:	f008 f95f 	bl	9324 <usb_serial_write>
    return 1;
}
    1066:	2001      	movs	r0, #1
    1068:	b004      	add	sp, #16
    106a:	bd10      	pop	{r4, pc}
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    106c:	e9cd 1000 	strd	r1, r0, [sp]
    1070:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    1074:	4620      	mov	r0, r4
    1076:	4a03      	ldr	r2, [pc, #12]	; (1084 <newFileName(char*)+0x68>)
    1078:	4906      	ldr	r1, [pc, #24]	; (1094 <newFileName(char*)+0x78>)
    107a:	f00a fa81 	bl	b580 <sprintf>
    107e:	e7e4      	b.n	104a <newFileName(char*)+0x2e>
    1080:	2001ec8c 	.word	0x2001ec8c
    1084:	2000040c 	.word	0x2000040c
    1088:	20000410 	.word	0x20000410
    108c:	200085ac 	.word	0x200085ac
    1090:	20000464 	.word	0x20000464
    1094:	20000424 	.word	0x20000424

00001098 <storeData(short)>:
static int32_t fileHeader[128];
uint32_t nbuf;

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    1098:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    109a:	4604      	mov	r4, r0
{
    109c:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    109e:	2800      	cmp	r0, #0
    10a0:	d04a      	beq.n	1138 <storeData(short)+0xa0>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    10a2:	2801      	cmp	r0, #1
    10a4:	d00a      	beq.n	10bc <storeData(short)+0x24>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    10a6:	2802      	cmp	r0, #2
    10a8:	f000 80c9 	beq.w	123e <storeData(short)+0x1a6>
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    10ac:	1ec3      	subs	r3, r0, #3
    10ae:	b29b      	uxth	r3, r3
    10b0:	2b01      	cmp	r3, #1
    10b2:	f240 8142 	bls.w	133a <storeData(short)+0x2a2>
            file.close();
        }
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    }
    return status;
}
    10b6:	4620      	mov	r0, r4
    10b8:	b014      	add	sp, #80	; 0x50
    10ba:	bd70      	pop	{r4, r5, r6, pc}
    10bc:	4dac      	ldr	r5, [pc, #688]	; (1370 <storeData(short)+0x2d8>)
        if(proc==0)
    10be:	4bad      	ldr	r3, [pc, #692]	; (1374 <storeData(short)+0x2dc>)
    {   nbuf=0;
    10c0:	2200      	movs	r2, #0
    10c2:	4ead      	ldr	r6, [pc, #692]	; (1378 <storeData(short)+0x2e0>)
        if(proc==0)
    10c4:	f9b3 3000 	ldrsh.w	r3, [r3]
    {   nbuf=0;
    10c8:	6032      	str	r2, [r6, #0]
        if(proc==0)
    10ca:	2b00      	cmp	r3, #0
    10cc:	f040 8084 	bne.w	11d8 <storeData(short)+0x140>
          hdr = headerInit(fsamp, nchan, nbits, SerNum);
    10d0:	49aa      	ldr	r1, [pc, #680]	; (137c <storeData(short)+0x2e4>)
    10d2:	2220      	movs	r2, #32
    10d4:	4baa      	ldr	r3, [pc, #680]	; (1380 <storeData(short)+0x2e8>)
    10d6:	6808      	ldr	r0, [r1, #0]
    10d8:	2180      	movs	r1, #128	; 0x80
    10da:	681b      	ldr	r3, [r3, #0]
    10dc:	f7ff fe6e 	bl	dbc <headerInit(long, long, long, int)>
    10e0:	4601      	mov	r1, r0
    return m_fFile   ? m_fFile->write(buf, count)
    10e2:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    10e4:	2800      	cmp	r0, #0
    10e6:	d07e      	beq.n	11e6 <storeData(short)+0x14e>
    10e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    10ec:	f002 fcf6 	bl	3adc <FatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    10f0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    10f4:	f0c0 8083 	bcc.w	11fe <storeData(short)+0x166>
    10f8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    10fa:	2800      	cmp	r0, #0
    10fc:	f000 8096 	beq.w	122c <storeData(short)+0x194>
    1100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1104:	499f      	ldr	r1, [pc, #636]	; (1384 <storeData(short)+0x2ec>)
    1106:	f002 fce9 	bl	3adc <FatFile::write(void const*, unsigned int)>
    110a:	4604      	mov	r4, r0
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    110c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    1110:	f0c0 8099 	bcc.w	1246 <storeData(short)+0x1ae>
        disk_count++;
    1114:	499c      	ldr	r1, [pc, #624]	; (1388 <storeData(short)+0x2f0>)
          nbuf++;
    1116:	6833      	ldr	r3, [r6, #0]
        disk_count++;
    1118:	680a      	ldr	r2, [r1, #0]
          nbuf++;
    111a:	3301      	adds	r3, #1
        disk_count++;
    111c:	3201      	adds	r2, #1
          nbuf++;
    111e:	6033      	str	r3, [r6, #0]
        disk_count++;
    1120:	600a      	str	r2, [r1, #0]
    1122:	499a      	ldr	r1, [pc, #616]	; (138c <storeData(short)+0x2f4>)
        if((nbuf % 1000)==0 ) file.flush();
    1124:	4a9a      	ldr	r2, [pc, #616]	; (1390 <storeData(short)+0x2f8>)
        disk_count++;
    1126:	fb01 f303 	mul.w	r3, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    112a:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
    112e:	d275      	bcs.n	121c <storeData(short)+0x184>
    1130:	2402      	movs	r4, #2
}
    1132:	4620      	mov	r0, r4
    1134:	b014      	add	sp, #80	; 0x50
    1136:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    1138:	4896      	ldr	r0, [pc, #600]	; (1394 <storeData(short)+0x2fc>)
    113a:	f7ff ff31 	bl	fa0 <newDirectory(char*)>
    113e:	b1d8      	cbz	r0, 1178 <storeData(short)+0xe0>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
    1140:	4d95      	ldr	r5, [pc, #596]	; (1398 <storeData(short)+0x300>)
    1142:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    1146:	2a00      	cmp	r2, #0
    1148:	f000 80b9 	beq.w	12be <storeData(short)+0x226>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    114c:	466e      	mov	r6, sp
    114e:	4611      	mov	r1, r2
    1150:	4623      	mov	r3, r4
    1152:	4a90      	ldr	r2, [pc, #576]	; (1394 <storeData(short)+0x2fc>)
    1154:	4630      	mov	r0, r6
  FatFile() {}
    1156:	9400      	str	r4, [sp, #0]
    1158:	f002 fabe 	bl	36d8 <FatFile::open(FatVolume*, char const*, int)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    115c:	2800      	cmp	r0, #0
    115e:	f000 80bb 	beq.w	12d8 <storeData(short)+0x240>
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    1162:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    1166:	2800      	cmp	r0, #0
    1168:	f000 80cd 	beq.w	1306 <storeData(short)+0x26e>
    116c:	4989      	ldr	r1, [pc, #548]	; (1394 <storeData(short)+0x2fc>)
    116e:	f003 fae9 	bl	4744 <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1172:	2800      	cmp	r0, #0
    1174:	f000 80d0 	beq.w	1318 <storeData(short)+0x280>
        if(newFileName(fileName))
    1178:	4888      	ldr	r0, [pc, #544]	; (139c <storeData(short)+0x304>)
    117a:	f7ff ff4f 	bl	101c <newFileName(char*)>
    117e:	2800      	cmp	r0, #0
    1180:	f000 80f3 	beq.w	136a <storeData(short)+0x2d2>
            file = sd.open(fileName, FILE_WRITE); 
    1184:	f244 2302 	movw	r3, #16898	; 0x4202
    1188:	4a84      	ldr	r2, [pc, #528]	; (139c <storeData(short)+0x304>)
    118a:	4983      	ldr	r1, [pc, #524]	; (1398 <storeData(short)+0x300>)
    118c:	4668      	mov	r0, sp
    118e:	f003 fc43 	bl	4a18 <FsVolume::open(char const*, int)>
class Print
    1192:	4d77      	ldr	r5, [pc, #476]	; (1370 <storeData(short)+0x2d8>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1194:	f89d 300c 	ldrb.w	r3, [sp, #12]
class StreamFile : public stream_t, public BaseFile {
    1198:	f105 0010 	add.w	r0, r5, #16
    119c:	732b      	strb	r3, [r5, #12]
    119e:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    11a2:	e9c5 1201 	strd	r1, r2, [r5, #4]
    11a6:	a904      	add	r1, sp, #16
    11a8:	f003 faf4 	bl	4794 <FsBaseFile::operator=(FsBaseFile const&)>
    11ac:	4b7c      	ldr	r3, [pc, #496]	; (13a0 <storeData(short)+0x308>)
  ~FsBaseFile() { close(); }
    11ae:	a804      	add	r0, sp, #16
    11b0:	9300      	str	r3, [sp, #0]
    11b2:	f003 fb3d 	bl	4830 <FsBaseFile::close()>
  bool isOpen() const { return m_fFile || m_xFile; }
    11b6:	6cab      	ldr	r3, [r5, #72]	; 0x48
    11b8:	2b00      	cmp	r3, #0
    11ba:	d180      	bne.n	10be <storeData(short)+0x26>
    11bc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    11be:	2b00      	cmp	r3, #0
    11c0:	f47f af7d 	bne.w	10be <storeData(short)+0x26>
    11c4:	2111      	movs	r1, #17
    11c6:	4877      	ldr	r0, [pc, #476]	; (13a4 <storeData(short)+0x30c>)
    11c8:	f008 f8ac 	bl	9324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    11cc:	4876      	ldr	r0, [pc, #472]	; (13a8 <storeData(short)+0x310>)
                return STOPPED; 
    11ce:	f04f 34ff 	mov.w	r4, #4294967295
    11d2:	f006 fb17 	bl	7804 <Print::println()>
    11d6:	e76e      	b.n	10b6 <storeData(short)+0x1e>
          makeHeader(fileHeader);
    11d8:	4874      	ldr	r0, [pc, #464]	; (13ac <storeData(short)+0x314>)
    11da:	f7ff fe91 	bl	f00 <makeHeader(long*)>
    return m_fFile   ? m_fFile->write(buf, count)
    11de:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr=(char *)fileHeader;
    11e0:	4972      	ldr	r1, [pc, #456]	; (13ac <storeData(short)+0x314>)
    11e2:	2800      	cmp	r0, #0
    11e4:	d180      	bne.n	10e8 <storeData(short)+0x50>
    11e6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
    11e8:	2800      	cmp	r0, #0
    11ea:	f000 809c 	beq.w	1326 <storeData(short)+0x28e>
    11ee:	f44f 7200 	mov.w	r2, #512	; 0x200
    11f2:	f001 fbd7 	bl	29a4 <ExFatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    11f6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    11fa:	f4bf af7d 	bcs.w	10f8 <storeData(short)+0x60>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    11fe:	2400      	movs	r4, #0
  bool isOpen() const { return m_fFile || m_xFile; }
    1200:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1202:	2b00      	cmp	r3, #0
    1204:	d057      	beq.n	12b6 <storeData(short)+0x21e>
        {   if(proc==0)
    1206:	4b5b      	ldr	r3, [pc, #364]	; (1374 <storeData(short)+0x2dc>)
    1208:	f9b3 3000 	ldrsh.w	r3, [r3]
    120c:	2b00      	cmp	r3, #0
    120e:	d046      	beq.n	129e <storeData(short)+0x206>
            file.close();
    1210:	4867      	ldr	r0, [pc, #412]	; (13b0 <storeData(short)+0x318>)
    1212:	f003 fb0d 	bl	4830 <FsBaseFile::close()>
}
    1216:	4620      	mov	r0, r4
    1218:	b014      	add	sp, #80	; 0x50
    121a:	bd70      	pop	{r4, r5, r6, pc}
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    121c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    121e:	2800      	cmp	r0, #0
    1220:	f000 8083 	beq.w	132a <storeData(short)+0x292>
    1224:	2402      	movs	r4, #2
    1226:	f002 fc53 	bl	3ad0 <FatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    122a:	e744      	b.n	10b6 <storeData(short)+0x1e>
    122c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
    122e:	b148      	cbz	r0, 1244 <storeData(short)+0x1ac>
    1230:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1234:	4953      	ldr	r1, [pc, #332]	; (1384 <storeData(short)+0x2ec>)
    1236:	f001 fbb5 	bl	29a4 <ExFatFile::write(void const*, unsigned int)>
    123a:	4604      	mov	r4, r0
    123c:	e766      	b.n	110c <storeData(short)+0x74>
    123e:	4d4c      	ldr	r5, [pc, #304]	; (1370 <storeData(short)+0x2d8>)
    1240:	4e4d      	ldr	r6, [pc, #308]	; (1378 <storeData(short)+0x2e0>)
    1242:	e759      	b.n	10f8 <storeData(short)+0x60>
    1244:	4604      	mov	r4, r0
    1246:	2101      	movs	r1, #1
    1248:	485a      	ldr	r0, [pc, #360]	; (13b4 <storeData(short)+0x31c>)
    124a:	f008 f86b 	bl	9324 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    124e:	2300      	movs	r3, #0
    1250:	220a      	movs	r2, #10
    1252:	4621      	mov	r1, r4
    1254:	4854      	ldr	r0, [pc, #336]	; (13a8 <storeData(short)+0x310>)
    1256:	f006 faff 	bl	7858 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    125a:	2101      	movs	r1, #1
    125c:	4856      	ldr	r0, [pc, #344]	; (13b8 <storeData(short)+0x320>)
    125e:	f008 f861 	bl	9324 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1262:	2102      	movs	r1, #2
    1264:	4850      	ldr	r0, [pc, #320]	; (13a8 <storeData(short)+0x310>)
    1266:	f006 fac1 	bl	77ec <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    126a:	484f      	ldr	r0, [pc, #316]	; (13a8 <storeData(short)+0x310>)
    126c:	f006 faca 	bl	7804 <Print::println()>
        disk_count++;
    1270:	4945      	ldr	r1, [pc, #276]	; (1388 <storeData(short)+0x2f0>)
    1272:	4846      	ldr	r0, [pc, #280]	; (138c <storeData(short)+0x2f4>)
    1274:	6833      	ldr	r3, [r6, #0]
    1276:	680a      	ldr	r2, [r1, #0]
    1278:	fb00 f303 	mul.w	r3, r0, r3
        if((nbuf % 1000)==0 ) file.flush();
    127c:	4844      	ldr	r0, [pc, #272]	; (1390 <storeData(short)+0x2f8>)
        disk_count++;
    127e:	3201      	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    1280:	ebb0 0ff3 	cmp.w	r0, r3, ror #3
        disk_count++;
    1284:	600a      	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    1286:	d3ba      	bcc.n	11fe <storeData(short)+0x166>
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    1288:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    128a:	2800      	cmp	r0, #0
    128c:	d057      	beq.n	133e <storeData(short)+0x2a6>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    128e:	2403      	movs	r4, #3
    1290:	f002 fc1e 	bl	3ad0 <FatFile::sync()>
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    1294:	3c03      	subs	r4, #3
    1296:	bf18      	it	ne
    1298:	f04f 34ff 	movne.w	r4, #4294967295
    129c:	e7b0      	b.n	1200 <storeData(short)+0x168>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    129e:	4b36      	ldr	r3, [pc, #216]	; (1378 <storeData(short)+0x2e0>)
  wav_hdr.dLen = nbytes;
    12a0:	4846      	ldr	r0, [pc, #280]	; (13bc <storeData(short)+0x324>)
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    12a2:	681b      	ldr	r3, [r3, #0]
  wav_hdr.rLen += wav_hdr.dLen;
    12a4:	6842      	ldr	r2, [r0, #4]
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    12a6:	031b      	lsls	r3, r3, #12
  wav_hdr.rLen += wav_hdr.dLen;
    12a8:	441a      	add	r2, r3
  wav_hdr.dLen = nbytes;
    12aa:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    12ae:	6042      	str	r2, [r0, #4]
              writeHeader(hdr);
    12b0:	f7ff fdde 	bl	e70 <writeHeader(char*)>
    12b4:	e7ac      	b.n	1210 <storeData(short)+0x178>
  bool isOpen() const { return m_fFile || m_xFile; }
    12b6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    12b8:	2b00      	cmp	r3, #0
    12ba:	d1a4      	bne.n	1206 <storeData(short)+0x16e>
    12bc:	e6fb      	b.n	10b6 <storeData(short)+0x1e>
    12be:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           : m_xVol ? m_xVol->exists(path)
    12c2:	b1c9      	cbz	r1, 12f8 <storeData(short)+0x260>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    12c4:	466e      	mov	r6, sp
    12c6:	4613      	mov	r3, r2
  ExFatFile() {}
    12c8:	920c      	str	r2, [sp, #48]	; 0x30
    12ca:	4630      	mov	r0, r6
    12cc:	4a31      	ldr	r2, [pc, #196]	; (1394 <storeData(short)+0x2fc>)
    12ce:	f001 f8e7 	bl	24a0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    12d2:	2800      	cmp	r0, #0
    12d4:	f47f af45 	bne.w	1162 <storeData(short)+0xca>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    12d8:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    12dc:	2a00      	cmp	r2, #0
    12de:	d035      	beq.n	134c <storeData(short)+0x2b4>
    12e0:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    12e2:	f202 4144 	addw	r1, r2, #1092	; 0x444
    12e6:	2301      	movs	r3, #1
    12e8:	4630      	mov	r0, r6
    12ea:	4a2a      	ldr	r2, [pc, #168]	; (1394 <storeData(short)+0x2fc>)
    12ec:	9400      	str	r4, [sp, #0]
    12ee:	f002 f905 	bl	34fc <FatFile::mkdir(FatFile*, char const*, bool)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    12f2:	2800      	cmp	r0, #0
    12f4:	f47f af35 	bne.w	1162 <storeData(short)+0xca>
    12f8:	4931      	ldr	r1, [pc, #196]	; (13c0 <storeData(short)+0x328>)
    12fa:	f04f 34ff 	mov.w	r4, #4294967295
    12fe:	482a      	ldr	r0, [pc, #168]	; (13a8 <storeData(short)+0x310>)
    1300:	f7ff fcc6 	bl	c90 <Print::println(char const*) [clone .isra.0]>
    1304:	e6d7      	b.n	10b6 <storeData(short)+0x1e>
    1306:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    130a:	b128      	cbz	r0, 1318 <storeData(short)+0x280>
    130c:	4921      	ldr	r1, [pc, #132]	; (1394 <storeData(short)+0x2fc>)
    130e:	f001 ff4b 	bl	31a8 <ExFatVolume::chdir(char const*)>
    1312:	2800      	cmp	r0, #0
    1314:	f47f af30 	bne.w	1178 <storeData(short)+0xe0>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1318:	492a      	ldr	r1, [pc, #168]	; (13c4 <storeData(short)+0x32c>)
    131a:	f04f 34ff 	mov.w	r4, #4294967295
    131e:	4822      	ldr	r0, [pc, #136]	; (13a8 <storeData(short)+0x310>)
    1320:	f7ff fcb6 	bl	c90 <Print::println(char const*) [clone .isra.0]>
    1324:	e6c7      	b.n	10b6 <storeData(short)+0x1e>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    1326:	2400      	movs	r4, #0
    1328:	e6c5      	b.n	10b6 <storeData(short)+0x1e>
    132a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    132c:	2402      	movs	r4, #2
    132e:	2800      	cmp	r0, #0
    1330:	f43f aec1 	beq.w	10b6 <storeData(short)+0x1e>
    1334:	f001 f9a2 	bl	267c <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1338:	e6bd      	b.n	10b6 <storeData(short)+0x1e>
    133a:	4d0d      	ldr	r5, [pc, #52]	; (1370 <storeData(short)+0x2d8>)
    133c:	e7aa      	b.n	1294 <storeData(short)+0x1fc>
    133e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1340:	2800      	cmp	r0, #0
    1342:	d0f0      	beq.n	1326 <storeData(short)+0x28e>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    1344:	2403      	movs	r4, #3
    1346:	f001 f999 	bl	267c <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    134a:	e7a3      	b.n	1294 <storeData(short)+0x1fc>
    134c:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    1350:	2900      	cmp	r1, #0
    1352:	d0d1      	beq.n	12f8 <storeData(short)+0x260>
    1354:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1356:	2301      	movs	r3, #1
    1358:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    135c:	4630      	mov	r0, r6
    135e:	4a0d      	ldr	r2, [pc, #52]	; (1394 <storeData(short)+0x2fc>)
    1360:	f001 fa44 	bl	27ec <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1364:	2800      	cmp	r0, #0
    1366:	d0c7      	beq.n	12f8 <storeData(short)+0x260>
    1368:	e6fb      	b.n	1162 <storeData(short)+0xca>
        {  return STOPPED; // if file open fails: don't do anything
    136a:	f04f 34ff 	mov.w	r4, #4294967295
    136e:	e6a2      	b.n	10b6 <storeData(short)+0x1e>
    1370:	2001e64c 	.word	0x2001e64c
    1374:	2001ec8c 	.word	0x2001ec8c
    1378:	2001e6c8 	.word	0x2001e6c8
    137c:	20008b68 	.word	0x20008b68
    1380:	2000c178 	.word	0x2000c178
    1384:	2000c540 	.word	0x2000c540
    1388:	2001e624 	.word	0x2001e624
    138c:	26e978d5 	.word	0x26e978d5
    1390:	00418937 	.word	0x00418937
    1394:	2001d9c4 	.word	0x2001d9c4
    1398:	2001e79c 	.word	0x2001e79c
    139c:	2001de14 	.word	0x2001de14
    13a0:	200006d0 	.word	0x200006d0
    13a4:	20000518 	.word	0x20000518
    13a8:	200085ac 	.word	0x200085ac
    13ac:	2000d540 	.word	0x2000d540
    13b0:	2001e65c 	.word	0x2001e65c
    13b4:	2000052c 	.word	0x2000052c
    13b8:	20000440 	.word	0x20000440
    13bc:	2001dc14 	.word	0x2001dc14
    13c0:	20000500 	.word	0x20000500
    13c4:	2000050c 	.word	0x2000050c

000013c8 <saveData(short)>:
//
volatile uint32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    13c8:	b570      	push	{r4, r5, r6, lr}
    13ca:	4605      	mov	r5, r0
    if(status==STOPPED) 
    13cc:	3001      	adds	r0, #1
    13ce:	d03e      	beq.n	144e <saveData(short)+0x86>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    13d0:	4b2a      	ldr	r3, [pc, #168]	; (147c <saveData(short)+0xb4>)
    13d2:	2208      	movs	r2, #8
      digitalWriteFast(13,HIGH);
    }
    else
      digitalWriteFast(13,LOW);

    if(status<CLOSED) return status; // we are stopped: don't do anything
    13d4:	2d00      	cmp	r5, #0
    13d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    13da:	db30      	blt.n	143e <saveData(short)+0x76>
  tx=rtc_get();
    13dc:	f006 fe78 	bl	80d0 <rtc_get>
  tx = tx % t_acq;
    13e0:	4b27      	ldr	r3, [pc, #156]	; (1480 <saveData(short)+0xb8>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    13e2:	2d01      	cmp	r5, #1
  tx = tx % t_acq;
    13e4:	681b      	ldr	r3, [r3, #0]
    13e6:	fbb0 f2f3 	udiv	r2, r0, r3
    13ea:	fb02 0013 	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    13ee:	4b25      	ldr	r3, [pc, #148]	; (1484 <saveData(short)+0xbc>)
    13f0:	dd05      	ble.n	13fe <saveData(short)+0x36>
    13f2:	681a      	ldr	r2, [r3, #0]
    13f4:	b11a      	cbz	r2, 13fe <saveData(short)+0x36>
    13f6:	681a      	ldr	r2, [r3, #0]
    13f8:	4290      	cmp	r0, r2
    13fa:	bf38      	it	cc
    13fc:	2503      	movcc	r5, #3
  tx_=tx;
    13fe:	6018      	str	r0, [r3, #0]

    status=checkEndOfFile(status);

    if(getDataCount()>=NDBL)
    1400:	f000 f896 	bl	1530 <getDataCount()>
    1404:	2807      	cmp	r0, #7
    1406:	d91c      	bls.n	1442 <saveData(short)+0x7a>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    1408:	4c1f      	ldr	r4, [pc, #124]	; (1488 <saveData(short)+0xc0>)
    140a:	2208      	movs	r2, #8
    140c:	4b1b      	ldr	r3, [pc, #108]	; (147c <saveData(short)+0xb4>)
    140e:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    1412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    { 
      digitalWriteFast(13,HIGH);
      for(int ii=0; ii<NDBL; ii++) pullData(&diskBuffer[ii*NBUF_ACQ]);
    1416:	4620      	mov	r0, r4
    1418:	f504 7400 	add.w	r4, r4, #512	; 0x200
    141c:	f000 f8d0 	bl	15c0 <pullData(unsigned long*)>
    1420:	42b4      	cmp	r4, r6
    1422:	d1f8      	bne.n	1416 <saveData(short)+0x4e>
    1424:	4a19      	ldr	r2, [pc, #100]	; (148c <saveData(short)+0xc4>)
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1426:	2300      	movs	r3, #0
    1428:	4819      	ldr	r0, [pc, #100]	; (1490 <saveData(short)+0xc8>)
    142a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    142e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    1432:	3301      	adds	r3, #1
    1434:	2b08      	cmp	r3, #8
    1436:	d1f8      	bne.n	142a <saveData(short)+0x62>
      if(haveStore)
    1438:	4b16      	ldr	r3, [pc, #88]	; (1494 <saveData(short)+0xcc>)
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	b9cb      	cbnz	r3, 1472 <saveData(short)+0xaa>
    }
    else
      digitalWriteFast(13,LOW);

    return status;
}
    143e:	4628      	mov	r0, r5
    1440:	bd70      	pop	{r4, r5, r6, pc}
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1442:	4b0e      	ldr	r3, [pc, #56]	; (147c <saveData(short)+0xb4>)
    1444:	2208      	movs	r2, #8
    1446:	4628      	mov	r0, r5
    1448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    144c:	bd70      	pop	{r4, r5, r6, pc}
      pullData(diskBuffer);
    144e:	480e      	ldr	r0, [pc, #56]	; (1488 <saveData(short)+0xc0>)
    1450:	f000 f8b6 	bl	15c0 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1454:	4a0d      	ldr	r2, [pc, #52]	; (148c <saveData(short)+0xc4>)
    1456:	2300      	movs	r3, #0
    1458:	480d      	ldr	r0, [pc, #52]	; (1490 <saveData(short)+0xc8>)
    145a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    145e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    1462:	3301      	adds	r3, #1
    1464:	2b08      	cmp	r3, #8
    1466:	d1f8      	bne.n	145a <saveData(short)+0x92>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    1468:	4a04      	ldr	r2, [pc, #16]	; (147c <saveData(short)+0xb4>)
}
    146a:	4628      	mov	r0, r5
    146c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    1470:	bd70      	pop	{r4, r5, r6, pc}
        status=storeData(status);
    1472:	4628      	mov	r0, r5
}
    1474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        status=storeData(status);
    1478:	f7ff be0e 	b.w	1098 <storeData(short)>
    147c:	42004000 	.word	0x42004000
    1480:	20008ba8 	.word	0x20008ba8
    1484:	2001e0ac 	.word	0x2001e0ac
    1488:	2000c540 	.word	0x2000c540
    148c:	2000c53c 	.word	0x2000c53c
    1490:	2001e6a4 	.word	0x2001e6a4
    1494:	2001e69c 	.word	0x2001e69c

00001498 <_GLOBAL__sub_I_t_acq>:
  FsVolume() = default;
    1498:	481c      	ldr	r0, [pc, #112]	; (150c <_GLOBAL__sub_I_t_acq+0x74>)
	SPISettings() : _clock(4000000) {
    149a:	4b1d      	ldr	r3, [pc, #116]	; (1510 <_GLOBAL__sub_I_t_acq+0x78>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    149c:	491d      	ldr	r1, [pc, #116]	; (1514 <_GLOBAL__sub_I_t_acq+0x7c>)
SdFs sd;
    149e:	4a1e      	ldr	r2, [pc, #120]	; (1518 <_GLOBAL__sub_I_t_acq+0x80>)
}
    14a0:	b510      	push	{r4, lr}
    14a2:	f8c0 34a0 	str.w	r3, [r0, #1184]	; 0x4a0
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() { initSharedSpiCard(); }
    14a6:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    14aa:	2400      	movs	r4, #0
    14ac:	f8c0 148c 	str.w	r1, [r0, #1164]	; 0x48c
    14b0:	f8c0 34a8 	str.w	r3, [r0, #1192]	; 0x4a8
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    14b4:	2107      	movs	r1, #7
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    14b6:	4b19      	ldr	r3, [pc, #100]	; (151c <_GLOBAL__sub_I_t_acq+0x84>)
    14b8:	f8c0 4480 	str.w	r4, [r0, #1152]	; 0x480
    14bc:	f8c0 4484 	str.w	r4, [r0, #1156]	; 0x484
class SdBase : public Vol {
    14c0:	f8c0 4488 	str.w	r4, [r0, #1160]	; 0x488
  SdioConfig() {}
    14c4:	f8a0 4494 	strh.w	r4, [r0, #1172]	; 0x494
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    14c8:	f8c0 449c 	str.w	r4, [r0, #1180]	; 0x49c
  SharedSpiCard() { initSharedSpiCard(); }
    14cc:	f8a0 44ac 	strh.w	r4, [r0, #1196]	; 0x4ac
    14d0:	f8c0 14a4 	str.w	r1, [r0, #1188]	; 0x4a4
    m_type = 0;
    14d4:	f880 44ae 	strb.w	r4, [r0, #1198]	; 0x4ae
SdFs sd;
    14d8:	4911      	ldr	r1, [pc, #68]	; (1520 <_GLOBAL__sub_I_t_acq+0x88>)
  DedicatedSpiCard() = default;
    14da:	f8c0 44b0 	str.w	r4, [r0, #1200]	; 0x4b0
    14de:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    14e2:	f880 44b4 	strb.w	r4, [r0, #1204]	; 0x4b4
    14e6:	f008 f935 	bl	9754 <__aeabi_atexit>
	constexpr Print() : write_error(0) {}
    14ea:	480e      	ldr	r0, [pc, #56]	; (1524 <_GLOBAL__sub_I_t_acq+0x8c>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    14ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    14f0:	4b0d      	ldr	r3, [pc, #52]	; (1528 <_GLOBAL__sub_I_t_acq+0x90>)
    14f2:	7304      	strb	r4, [r0, #12]
FsFile file;
    14f4:	4a08      	ldr	r2, [pc, #32]	; (1518 <_GLOBAL__sub_I_t_acq+0x80>)
    14f6:	6003      	str	r3, [r0, #0]
    14f8:	e9c0 4101 	strd	r4, r1, [r0, #4]
  FsBaseFile() = default;
    14fc:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    1500:	490a      	ldr	r1, [pc, #40]	; (152c <_GLOBAL__sub_I_t_acq+0x94>)
}
    1502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
FsFile file;
    1506:	f008 b925 	b.w	9754 <__aeabi_atexit>
    150a:	bf00      	nop
    150c:	2001e79c 	.word	0x2001e79c
    1510:	003d0900 	.word	0x003d0900
    1514:	200007e4 	.word	0x200007e4
    1518:	200085c4 	.word	0x200085c4
    151c:	20000700 	.word	0x20000700
    1520:	00000afd 	.word	0x00000afd
    1524:	2001e64c 	.word	0x2001e64c
    1528:	2000079c 	.word	0x2000079c
    152c:	00000b81 	.word	0x00000b81

00001530 <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    1530:	4a04      	ldr	r2, [pc, #16]	; (1544 <getDataCount()+0x14>)
    1532:	4b05      	ldr	r3, [pc, #20]	; (1548 <getDataCount()+0x18>)
    1534:	6810      	ldr	r0, [r2, #0]
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	1ac0      	subs	r0, r0, r3
    153a:	bf48      	it	mi
    153c:	3080      	addmi	r0, #128	; 0x80
    153e:	b280      	uxth	r0, r0
    1540:	4770      	bx	lr
    1542:	bf00      	nop
    1544:	2001ec64 	.word	0x2001ec64
    1548:	2001e6a0 	.word	0x2001e6a0

0000154c <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    154c:	b470      	push	{r4, r5, r6}
    if ( (tail+1)%MAXBUF == head ) return 0;
    154e:	4c18      	ldr	r4, [pc, #96]	; (15b0 <pushData(unsigned long*)+0x64>)
    1550:	4a18      	ldr	r2, [pc, #96]	; (15b4 <pushData(unsigned long*)+0x68>)
    1552:	6823      	ldr	r3, [r4, #0]
    1554:	6811      	ldr	r1, [r2, #0]
    1556:	3301      	adds	r3, #1
    1558:	425a      	negs	r2, r3
    155a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    155e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1562:	bf58      	it	pl
    1564:	4253      	negpl	r3, r2
    1566:	428b      	cmp	r3, r1
    1568:	d01e      	beq.n	15a8 <pushData(unsigned long*)+0x5c>
    //while(busy); 
    queue_busy=1;
    156a:	4e13      	ldr	r6, [pc, #76]	; (15b8 <pushData(unsigned long*)+0x6c>)
    156c:	2201      	movs	r2, #1
    156e:	1f01      	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    1570:	2300      	movs	r3, #0
    1572:	4d12      	ldr	r5, [pc, #72]	; (15bc <pushData(unsigned long*)+0x70>)
    queue_busy=1;
    1574:	6032      	str	r2, [r6, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    1576:	6822      	ldr	r2, [r4, #0]
    1578:	f851 0f04 	ldr.w	r0, [r1, #4]!
    157c:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    1580:	3301      	adds	r3, #1
    1582:	2b80      	cmp	r3, #128	; 0x80
    1584:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    1588:	d1f5      	bne.n	1576 <pushData(unsigned long*)+0x2a>
    tail = (tail+1)%MAXBUF;
    158a:	6823      	ldr	r3, [r4, #0]
    queue_busy=0;
    return 1; // signal success.
    158c:	2001      	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    158e:	3301      	adds	r3, #1
    1590:	425a      	negs	r2, r3
    1592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1596:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    159a:	bf58      	it	pl
    159c:	4253      	negpl	r3, r2
    queue_busy=0;
    159e:	2200      	movs	r2, #0
    tail = (tail+1)%MAXBUF;
    15a0:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    15a2:	6032      	str	r2, [r6, #0]
  }
    15a4:	bc70      	pop	{r4, r5, r6}
    15a6:	4770      	bx	lr
    if ( (tail+1)%MAXBUF == head ) return 0;
    15a8:	2000      	movs	r0, #0
  }
    15aa:	bc70      	pop	{r4, r5, r6}
    15ac:	4770      	bx	lr
    15ae:	bf00      	nop
    15b0:	2001ec64 	.word	0x2001ec64
    15b4:	2001e6a0 	.word	0x2001e6a0
    15b8:	2000d744 	.word	0x2000d744
    15bc:	2000d748 	.word	0x2000d748

000015c0 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    15c0:	4b14      	ldr	r3, [pc, #80]	; (1614 <pullData(unsigned long*)+0x54>)
  {
    15c2:	b430      	push	{r4, r5}
    if ( head==tail ) return 0;
    15c4:	4c14      	ldr	r4, [pc, #80]	; (1618 <pullData(unsigned long*)+0x58>)
    15c6:	6822      	ldr	r2, [r4, #0]
    15c8:	681b      	ldr	r3, [r3, #0]
    15ca:	429a      	cmp	r2, r3
    15cc:	d01e      	beq.n	160c <pullData(unsigned long*)+0x4c>
    //while(busy); 
    queue_busy=1;
    15ce:	4d13      	ldr	r5, [pc, #76]	; (161c <pullData(unsigned long*)+0x5c>)
    15d0:	2201      	movs	r2, #1
    15d2:	1f01      	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    15d4:	2300      	movs	r3, #0
    15d6:	4812      	ldr	r0, [pc, #72]	; (1620 <pullData(unsigned long*)+0x60>)
    queue_busy=1;
    15d8:	602a      	str	r2, [r5, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    15da:	6822      	ldr	r2, [r4, #0]
    15dc:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    15e0:	3301      	adds	r3, #1
    15e2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    15e6:	2b80      	cmp	r3, #128	; 0x80
    15e8:	f841 2f04 	str.w	r2, [r1, #4]!
    15ec:	d1f5      	bne.n	15da <pullData(unsigned long*)+0x1a>
    head = (head+1)%MAXBUF;
    15ee:	6823      	ldr	r3, [r4, #0]
    queue_busy=0;
    return 1;
    15f0:	2001      	movs	r0, #1
    head = (head+1)%MAXBUF;
    15f2:	3301      	adds	r3, #1
    15f4:	425a      	negs	r2, r3
    15f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    15fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    15fe:	bf58      	it	pl
    1600:	4253      	negpl	r3, r2
    queue_busy=0;
    1602:	2200      	movs	r2, #0
    head = (head+1)%MAXBUF;
    1604:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    1606:	602a      	str	r2, [r5, #0]
  }
    1608:	bc30      	pop	{r4, r5}
    160a:	4770      	bx	lr
    if ( head==tail ) return 0;
    160c:	2000      	movs	r0, #0
  }
    160e:	bc30      	pop	{r4, r5}
    1610:	4770      	bx	lr
    1612:	bf00      	nop
    1614:	2001ec64 	.word	0x2001ec64
    1618:	2001e6a0 	.word	0x2001e6a0
    161c:	2000d744 	.word	0x2000d744
    1620:	2000d748 	.word	0x2000d748

00001624 <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    1624:	4a54      	ldr	r2, [pc, #336]	; (1778 <time2date(unsigned long, datetime_t*)+0x154>)
  {
    1626:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    162a:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    162e:	f240 196d 	movw	r9, #365	; 0x16d
    1632:	4e52      	ldr	r6, [pc, #328]	; (177c <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1634:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1636:	4f52      	ldr	r7, [pc, #328]	; (1780 <time2date(unsigned long, datetime_t*)+0x15c>)
    1638:	f8df 8158 	ldr.w	r8, [pc, #344]	; 1794 <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    163c:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1640:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    1644:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1646:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    164a:	4c4e      	ldr	r4, [pc, #312]	; (1784 <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    164c:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    1650:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    1654:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1658:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    165a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    165e:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1660:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    1664:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1668:	4b47      	ldr	r3, [pc, #284]	; (1788 <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    166a:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    166e:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1672:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    1674:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1676:	1ae2      	subs	r2, r4, r3
    1678:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    167c:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    167e:	089b      	lsrs	r3, r3, #2
    1680:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    1684:	1ae4      	subs	r4, r4, r3
    1686:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1688:	b2c3      	uxtb	r3, r0
    168a:	f240 1c6d 	movw	ip, #365	; 0x16d
    168e:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    1692:	f013 0403 	ands.w	r4, r3, #3
    1696:	fb06 f503 	mul.w	r5, r6, r3
    169a:	d108      	bne.n	16ae <time2date(unsigned long, datetime_t*)+0x8a>
    169c:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    16a0:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    16a4:	d303      	bcc.n	16ae <time2date(unsigned long, datetime_t*)+0x8a>
    16a6:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    16aa:	bf38      	it	cc
    16ac:	46cc      	movcc	ip, r9
    16ae:	4462      	add	r2, ip
    16b0:	3001      	adds	r0, #1
    16b2:	4596      	cmp	lr, r2
    16b4:	d2e8      	bcs.n	1688 <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    16b6:	4d35      	ldr	r5, [pc, #212]	; (178c <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    16b8:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    16ba:	fba5 0503 	umull	r0, r5, r5, r3
    16be:	b3a4      	cbz	r4, 172a <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    16c0:	096e      	lsrs	r6, r5, #5
    16c2:	2764      	movs	r7, #100	; 0x64
    16c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    16c8:	09ed      	lsrs	r5, r5, #7
    16ca:	fb07 3616 	mls	r6, r7, r6, r3
    16ce:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    16d2:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    16d6:	ebae 0e02 	sub.w	lr, lr, r2
    16da:	2300      	movs	r3, #0
    16dc:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    16de:	4f2c      	ldr	r7, [pc, #176]	; (1790 <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    16e0:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    16e2:	e00a      	b.n	16fa <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    16e4:	f813 c007 	ldrb.w	ip, [r3, r7]
    16e8:	4584      	cmp	ip, r0
    16ea:	d837      	bhi.n	175c <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    16ec:	2a0c      	cmp	r2, #12
        time -= monthLength;
    16ee:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    16f2:	d012      	beq.n	171a <time2date(unsigned long, datetime_t*)+0xf6>
    16f4:	3201      	adds	r2, #1
    16f6:	3301      	adds	r3, #1
    16f8:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    16fa:	2b01      	cmp	r3, #1
    16fc:	fa5f fe83 	uxtb.w	lr, r3
    1700:	d1f0      	bne.n	16e4 <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    1702:	b91c      	cbnz	r4, 170c <time2date(unsigned long, datetime_t*)+0xe8>
    1704:	b1f6      	cbz	r6, 1744 <time2date(unsigned long, datetime_t*)+0x120>
    1706:	f04f 0c1d 	mov.w	ip, #29
    170a:	e001      	b.n	1710 <time2date(unsigned long, datetime_t*)+0xec>
    170c:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    1710:	4560      	cmp	r0, ip
    1712:	d32d      	bcc.n	1770 <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    1714:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    1718:	e7ec      	b.n	16f4 <time2date(unsigned long, datetime_t*)+0xd0>
    171a:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    171e:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    1720:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    1724:	70c8      	strb	r0, [r1, #3]
  }
    1726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    172a:	2064      	movs	r0, #100	; 0x64
    172c:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    172e:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    1730:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1734:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1738:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    173c:	b14e      	cbz	r6, 1752 <time2date(unsigned long, datetime_t*)+0x12e>
    173e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    1742:	e7c8      	b.n	16d6 <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    1744:	2d00      	cmp	r5, #0
    1746:	bf14      	ite	ne
    1748:	f04f 0c1c 	movne.w	ip, #28
    174c:	f04f 0c1d 	moveq.w	ip, #29
    1750:	e7de      	b.n	1710 <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    1752:	2d00      	cmp	r5, #0
    1754:	d1bd      	bne.n	16d2 <time2date(unsigned long, datetime_t*)+0xae>
    1756:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    175a:	e7bc      	b.n	16d6 <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    175c:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    1760:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    1762:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    1766:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    1768:	f881 e002 	strb.w	lr, [r1, #2]
  }
    176c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    1770:	f04f 0e02 	mov.w	lr, #2
    1774:	e7d3      	b.n	171e <time2date(unsigned long, datetime_t*)+0xfa>
    1776:	bf00      	nop
    1778:	88888889 	.word	0x88888889
    177c:	c28f5c29 	.word	0xc28f5c29
    1780:	028f5c28 	.word	0x028f5c28
    1784:	aaaaaaab 	.word	0xaaaaaaab
    1788:	24924925 	.word	0x24924925
    178c:	51eb851f 	.word	0x51eb851f
    1790:	20000558 	.word	0x20000558
    1794:	00a3d70a 	.word	0x00a3d70a

00001798 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    1798:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    179a:	4a35      	ldr	r2, [pc, #212]	; (1870 <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    179c:	314e      	adds	r1, #78	; 0x4e
    179e:	b2c9      	uxtb	r1, r1
  {
    17a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    17a4:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    17a8:	b1e1      	cbz	r1, 17e4 <date2time(datetime_t*)+0x4c>
    17aa:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    17ae:	f240 73b3 	movw	r3, #1971	; 0x7b3
    17b2:	4d30      	ldr	r5, [pc, #192]	; (1874 <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    17b4:	4e30      	ldr	r6, [pc, #192]	; (1878 <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    17b6:	4f31      	ldr	r7, [pc, #196]	; (187c <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    17b8:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 1888 <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    17bc:	4563      	cmp	r3, ip
    17be:	fb05 f403 	mul.w	r4, r5, r3
    17c2:	d00f      	beq.n	17e4 <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    17c4:	f013 0f03 	tst.w	r3, #3
    17c8:	f103 0301 	add.w	r3, r3, #1
    17cc:	d1f6      	bne.n	17bc <date2time(datetime_t*)+0x24>
    17ce:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    17d2:	d302      	bcc.n	17da <date2time(datetime_t*)+0x42>
    17d4:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    17d8:	d3f0      	bcc.n	17bc <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    17da:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    17dc:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    17de:	fb05 f403 	mul.w	r4, r5, r3
    17e2:	d1ef      	bne.n	17c4 <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    17e4:	f990 e002 	ldrsb.w	lr, [r0, #2]
    17e8:	f1be 0f01 	cmp.w	lr, #1
    17ec:	dd29      	ble.n	1842 <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    17ee:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    17f2:	4e23      	ldr	r6, [pc, #140]	; (1880 <date2time(datetime_t*)+0xe8>)
    17f4:	2564      	movs	r5, #100	; 0x64
    17f6:	f44f 74c8 	mov.w	r4, #400	; 0x190
    17fa:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    17fe:	f8df 808c 	ldr.w	r8, [pc, #140]	; 188c <date2time(datetime_t*)+0xf4>
    1802:	4920      	ldr	r1, [pc, #128]	; (1884 <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1804:	0977      	lsrs	r7, r6, #5
    1806:	09f6      	lsrs	r6, r6, #7
    1808:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    180c:	4d1b      	ldr	r5, [pc, #108]	; (187c <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    180e:	fb04 3616 	mls	r6, r4, r6, r3
    1812:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    1816:	2301      	movs	r3, #1
    1818:	e007      	b.n	182a <date2time(datetime_t*)+0x92>
    181a:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    181c:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    1820:	3101      	adds	r1, #1
    1822:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1824:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    1828:	d00b      	beq.n	1842 <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    182a:	2b02      	cmp	r3, #2
    182c:	d1f5      	bne.n	181a <date2time(datetime_t*)+0x82>
    182e:	2c00      	cmp	r4, #0
    1830:	d1f3      	bne.n	181a <date2time(datetime_t*)+0x82>
    1832:	b90f      	cbnz	r7, 1838 <date2time(datetime_t*)+0xa0>
    1834:	2e00      	cmp	r6, #0
    1836:	d1f0      	bne.n	181a <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    1838:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    183a:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    183c:	3101      	adds	r1, #1
    183e:	4573      	cmp	r3, lr
    1840:	d1f3      	bne.n	182a <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    1842:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    1846:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    184a:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    184e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    1852:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    1856:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    1858:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    185c:	f990 1003 	ldrsb.w	r1, [r0, #3]
    1860:	4c06      	ldr	r4, [pc, #24]	; (187c <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    1862:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    1864:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    1866:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    186a:	4410      	add	r0, r2
    186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1870:	01e13380 	.word	0x01e13380
    1874:	c28f5c29 	.word	0xc28f5c29
    1878:	028f5c28 	.word	0x028f5c28
    187c:	00015180 	.word	0x00015180
    1880:	51eb851f 	.word	0x51eb851f
    1884:	20000558 	.word	0x20000558
    1888:	00a3d70a 	.word	0x00a3d70a
    188c:	00263b80 	.word	0x00263b80

00001890 <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    1890:	2001      	movs	r0, #1
    1892:	4770      	bx	lr

00001894 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    1894:	b500      	push	{lr}
    1896:	b083      	sub	sp, #12
    1898:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    189a:	f006 fc19 	bl	80d0 <rtc_get>
    189e:	9901      	ldr	r1, [sp, #4]
    18a0:	f7ff fec0 	bl	1624 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    18a4:	2001      	movs	r0, #1
    18a6:	b003      	add	sp, #12
    18a8:	f85d fb04 	ldr.w	pc, [sp], #4

000018ac <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    18ac:	b570      	push	{r4, r5, r6, lr}
    18ae:	b082      	sub	sp, #8
    18b0:	4614      	mov	r4, r2
    18b2:	460d      	mov	r5, r1
    18b4:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    18b6:	f006 fc0b 	bl	80d0 <rtc_get>
    18ba:	4669      	mov	r1, sp
    18bc:	f7ff feb2 	bl	1624 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    18c0:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    18c4:	4608      	mov	r0, r1
    t.month=month;
    18c6:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    18ca:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    18ce:	f7ff ff63 	bl	1798 <date2time(datetime_t*)>
    18d2:	f006 fc0f 	bl	80f4 <rtc_set>
    rtc_set_datetime(&t);
  }
    18d6:	b002      	add	sp, #8
    18d8:	bd70      	pop	{r4, r5, r6, pc}
    18da:	bf00      	nop

000018dc <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    18dc:	b570      	push	{r4, r5, r6, lr}
    18de:	b082      	sub	sp, #8
    18e0:	4614      	mov	r4, r2
    18e2:	460d      	mov	r5, r1
    18e4:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    18e6:	f006 fbf3 	bl	80d0 <rtc_get>
    18ea:	4669      	mov	r1, sp
    18ec:	f7ff fe9a 	bl	1624 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    18f0:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    18f4:	4608      	mov	r0, r1
    t.min=minutes;
    18f6:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    18fa:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    18fe:	f7ff ff4b 	bl	1798 <date2time(datetime_t*)>
    1902:	f006 fbf7 	bl	80f4 <rtc_set>
    rtc_set_datetime(&t);
  }
    1906:	b002      	add	sp, #8
    1908:	bd70      	pop	{r4, r5, r6, pc}
    190a:	bf00      	nop

0000190c <menuGetInt16(short*) [clone .isra.0]>:
#include "mConfig.h"
#include "menu.h"
#include "mRTC.h"
#include "mAcq.h"

static int menuGetInt16(int16_t *val)
    190c:	b510      	push	{r4, lr}
    190e:	4604      	mov	r4, r0
    1910:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    1912:	f007 fc9d 	bl	9250 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1916:	2800      	cmp	r0, #0
    1918:	d0fb      	beq.n	1912 <menuGetInt16(short*) [clone .isra.0]+0x6>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    191a:	210d      	movs	r1, #13
    191c:	aa02      	add	r2, sp, #8
    191e:	2328      	movs	r3, #40	; 0x28
    1920:	480d      	ldr	r0, [pc, #52]	; (1958 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    1922:	f006 f863 	bl	79ec <Stream::readBytesUntil(char, char*, unsigned int)>
    1926:	4603      	mov	r3, r0
  buffer[count]=0;
    1928:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    192a:	a802      	add	r0, sp, #8
    192c:	3330      	adds	r3, #48	; 0x30
    192e:	446b      	add	r3, sp
    1930:	f803 2c28 	strb.w	r2, [r3, #-40]
    1934:	f00a fb64 	bl	c000 <strlen>
    1938:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    193a:	a802      	add	r0, sp, #8
    193c:	f007 fcf2 	bl	9324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1940:	4805      	ldr	r0, [pc, #20]	; (1958 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    1942:	f005 ff5f 	bl	7804 <Print::println()>
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1946:	aa01      	add	r2, sp, #4
    1948:	4904      	ldr	r1, [pc, #16]	; (195c <menuGetInt16(short*) [clone .isra.0]+0x50>)
    194a:	a802      	add	r0, sp, #8
    194c:	f009 fe38 	bl	b5c0 <sscanf>
    1950:	9b01      	ldr	r3, [sp, #4]
    1952:	8023      	strh	r3, [r4, #0]
  return 1;
}
    1954:	b00c      	add	sp, #48	; 0x30
    1956:	bd10      	pop	{r4, pc}
    1958:	200085ac 	.word	0x200085ac
    195c:	20000554 	.word	0x20000554

00001960 <menuGet3Int(int*, int*, int*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
  return 1;
}

static int menuGet3Int(int *val1, int *val2, int *val3)
    1960:	b570      	push	{r4, r5, r6, lr}
    1962:	4606      	mov	r6, r0
    1964:	b090      	sub	sp, #64	; 0x40
    1966:	460c      	mov	r4, r1
    1968:	4615      	mov	r5, r2
        virtual int available() { return usb_serial_available(); }
    196a:	f007 fc71 	bl	9250 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    196e:	2800      	cmp	r0, #0
    1970:	d0fb      	beq.n	196a <menuGet3Int(int*, int*, int*) [clone .isra.0]+0xa>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1972:	aa06      	add	r2, sp, #24
    1974:	210d      	movs	r1, #13
    1976:	2328      	movs	r3, #40	; 0x28
    1978:	4810      	ldr	r0, [pc, #64]	; (19bc <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    197a:	f006 f837 	bl	79ec <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    197e:	f100 0340 	add.w	r3, r0, #64	; 0x40
    1982:	eb0d 0003 	add.w	r0, sp, r3
    1986:	2300      	movs	r3, #0
    1988:	f800 3c28 	strb.w	r3, [r0, #-40]
							  return write((const uint8_t *)str, strlen(str)); }
    198c:	a806      	add	r0, sp, #24
    198e:	f00a fb37 	bl	c000 <strlen>
    1992:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1994:	a806      	add	r0, sp, #24
    1996:	f007 fcc5 	bl	9324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    199a:	4808      	ldr	r0, [pc, #32]	; (19bc <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    199c:	f005 ff32 	bl	7804 <Print::println()>
  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    19a0:	f10d 0317 	add.w	r3, sp, #23
    19a4:	4632      	mov	r2, r6
    19a6:	4906      	ldr	r1, [pc, #24]	; (19c0 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x60>)
    19a8:	a806      	add	r0, sp, #24
    19aa:	9400      	str	r4, [sp, #0]
    19ac:	e9cd 3501 	strd	r3, r5, [sp, #4]
    19b0:	f10d 0316 	add.w	r3, sp, #22
    19b4:	f009 fe04 	bl	b5c0 <sscanf>
}
    19b8:	b010      	add	sp, #64	; 0x40
    19ba:	bd70      	pop	{r4, r5, r6, pc}
    19bc:	200085ac 	.word	0x200085ac
    19c0:	2000054c 	.word	0x2000054c

000019c4 <menu1()>:

void menu1(void)
{   // have ':'
    19c4:	b508      	push	{r3, lr}
        virtual int available() { return usb_serial_available(); }
    19c6:	f007 fc43 	bl	9250 <usb_serial_available>
    while(!Serial.available()) ;
    19ca:	2800      	cmp	r0, #0
    19cc:	d0fb      	beq.n	19c6 <menu1()+0x2>
    char ch;
    ch=Serial.read();
    if(ch=='x') return;
}
    19ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        virtual int read() { return usb_serial_getchar(); }
    19d2:	f007 bc81 	b.w	92d8 <usb_serial_getchar>
    19d6:	bf00      	nop

000019d8 <menu2()>:

void menu2(void)
{   // have '?'
    19d8:	b510      	push	{r4, lr}
    19da:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    19dc:	f007 fc38 	bl	9250 <usb_serial_available>
    datetime_t t;

    while(!Serial.available()) ;
    19e0:	2800      	cmp	r0, #0
    19e2:	d0fb      	beq.n	19dc <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    19e4:	f007 fc78 	bl	92d8 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    19e8:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    19ea:	2870      	cmp	r0, #112	; 0x70
    19ec:	d017      	beq.n	1a1e <menu2()+0x46>
                   t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    19ee:	2864      	cmp	r0, #100	; 0x64
    19f0:	d056      	beq.n	1aa0 <menu2()+0xc8>
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
    19f2:	3863      	subs	r0, #99	; 0x63
    19f4:	2811      	cmp	r0, #17
    19f6:	d80c      	bhi.n	1a12 <menu2()+0x3a>
    19f8:	e8df f000 	tbb	[pc, r0]
    19fc:	700b0b44 	.word	0x700b0b44
    1a00:	0b0b0b0b 	.word	0x0b0b0b0b
    1a04:	0b0b0b0b 	.word	0x0b0b0b0b
    1a08:	0b0b0b0b 	.word	0x0b0b0b0b
    1a0c:	617d      	.short	0x617d
    1a0e:	f007 fc63 	bl	92d8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    1a12:	f007 fc1d 	bl	9250 <usb_serial_available>
    }
    else if(ch=='c')
    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
    1a16:	2800      	cmp	r0, #0
    1a18:	d1f9      	bne.n	1a0e <menu2()+0x36>

}
    1a1a:	b008      	add	sp, #32
    1a1c:	bd10      	pop	{r4, pc}
      rtc_get_datetime(&t);
    1a1e:	a806      	add	r0, sp, #24
    1a20:	f7ff ff38 	bl	1894 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    1a24:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    1a28:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    1a2c:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1a30:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1a34:	f99d 401e 	ldrsb.w	r4, [sp, #30]
    1a38:	9000      	str	r0, [sp, #0]
    1a3a:	4832      	ldr	r0, [pc, #200]	; (1b04 <menu2()+0x12c>)
    1a3c:	e9cd 3203 	strd	r3, r2, [sp, #12]
    1a40:	e9cd 1401 	strd	r1, r4, [sp, #4]
    1a44:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1a48:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1a4c:	492e      	ldr	r1, [pc, #184]	; (1b08 <menu2()+0x130>)
    1a4e:	f005 fef5 	bl	783c <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a52:	210c      	movs	r1, #12
    1a54:	482d      	ldr	r0, [pc, #180]	; (1b0c <menu2()+0x134>)
    1a56:	f007 fc65 	bl	9324 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1a5a:	4b2d      	ldr	r3, [pc, #180]	; (1b10 <menu2()+0x138>)
	size_t println(long n)				{ return print(n) + println(); }
    1a5c:	4829      	ldr	r0, [pc, #164]	; (1b04 <menu2()+0x12c>)
    1a5e:	6819      	ldr	r1, [r3, #0]
    1a60:	f005 fec4 	bl	77ec <Print::print(long)>
    1a64:	4827      	ldr	r0, [pc, #156]	; (1b04 <menu2()+0x12c>)
    1a66:	f005 fecd 	bl	7804 <Print::println()>
    1a6a:	210c      	movs	r1, #12
    1a6c:	4829      	ldr	r0, [pc, #164]	; (1b14 <menu2()+0x13c>)
    1a6e:	f007 fc59 	bl	9324 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1a72:	4b29      	ldr	r3, [pc, #164]	; (1b18 <menu2()+0x140>)
	size_t print(int n)				{ return print((long)n); }
    1a74:	4823      	ldr	r0, [pc, #140]	; (1b04 <menu2()+0x12c>)
    1a76:	f9b3 1000 	ldrsh.w	r1, [r3]
    1a7a:	f005 feb7 	bl	77ec <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1a7e:	4821      	ldr	r0, [pc, #132]	; (1b04 <menu2()+0x12c>)
    1a80:	f005 fec0 	bl	7804 <Print::println()>
    1a84:	210c      	movs	r1, #12
    1a86:	4825      	ldr	r0, [pc, #148]	; (1b1c <menu2()+0x144>)
    1a88:	f007 fc4c 	bl	9324 <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    1a8c:	4b24      	ldr	r3, [pc, #144]	; (1b20 <menu2()+0x148>)
	size_t print(int n)				{ return print((long)n); }
    1a8e:	f9b3 1000 	ldrsh.w	r1, [r3]
    1a92:	481c      	ldr	r0, [pc, #112]	; (1b04 <menu2()+0x12c>)
    1a94:	f005 feaa 	bl	77ec <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1a98:	481a      	ldr	r0, [pc, #104]	; (1b04 <menu2()+0x12c>)
    1a9a:	f005 feb3 	bl	7804 <Print::println()>
    1a9e:	e7b8      	b.n	1a12 <menu2()+0x3a>
      rtc_get_datetime(&t);
    1aa0:	a806      	add	r0, sp, #24
    1aa2:	f7ff fef7 	bl	1894 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    1aa6:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1aaa:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1aae:	9000      	str	r0, [sp, #0]
    1ab0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1ab4:	491b      	ldr	r1, [pc, #108]	; (1b24 <menu2()+0x14c>)
    1ab6:	4813      	ldr	r0, [pc, #76]	; (1b04 <menu2()+0x12c>)
    1ab8:	f005 fec0 	bl	783c <Print::printf(char const*, ...)>
    1abc:	e7a9      	b.n	1a12 <menu2()+0x3a>
      rtc_get_datetime(&t);
    1abe:	a806      	add	r0, sp, #24
    1ac0:	f7ff fee8 	bl	1894 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    1ac4:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    1ac8:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1acc:	9000      	str	r0, [sp, #0]
    1ace:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    1ad2:	4915      	ldr	r1, [pc, #84]	; (1b28 <menu2()+0x150>)
    1ad4:	480b      	ldr	r0, [pc, #44]	; (1b04 <menu2()+0x12c>)
    1ad6:	f005 feb1 	bl	783c <Print::printf(char const*, ...)>
    1ada:	e79a      	b.n	1a12 <menu2()+0x3a>
    1adc:	210c      	movs	r1, #12
    1ade:	480b      	ldr	r0, [pc, #44]	; (1b0c <menu2()+0x134>)
    1ae0:	f007 fc20 	bl	9324 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1ae4:	4b0a      	ldr	r3, [pc, #40]	; (1b10 <menu2()+0x138>)
	size_t println(long n)				{ return print(n) + println(); }
    1ae6:	4807      	ldr	r0, [pc, #28]	; (1b04 <menu2()+0x12c>)
    1ae8:	6819      	ldr	r1, [r3, #0]
    1aea:	f005 fe7f 	bl	77ec <Print::print(long)>
    1aee:	4805      	ldr	r0, [pc, #20]	; (1b04 <menu2()+0x12c>)
    1af0:	f005 fe88 	bl	7804 <Print::println()>
    1af4:	e78d      	b.n	1a12 <menu2()+0x3a>
    1af6:	210c      	movs	r1, #12
    1af8:	4806      	ldr	r0, [pc, #24]	; (1b14 <menu2()+0x13c>)
    1afa:	f007 fc13 	bl	9324 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1afe:	4b06      	ldr	r3, [pc, #24]	; (1b18 <menu2()+0x140>)
    1b00:	e7c5      	b.n	1a8e <menu2()+0xb6>
    1b02:	bf00      	nop
    1b04:	200085ac 	.word	0x200085ac
    1b08:	20000468 	.word	0x20000468
    1b0c:	2000048c 	.word	0x2000048c
    1b10:	20008b68 	.word	0x20008b68
    1b14:	2000049c 	.word	0x2000049c
    1b18:	20008bca 	.word	0x20008bca
    1b1c:	200004ac 	.word	0x200004ac
    1b20:	2001ec8c 	.word	0x2001ec8c
    1b24:	200004bc 	.word	0x200004bc
    1b28:	200004d8 	.word	0x200004d8

00001b2c <menu3()>:

void menu3(void)
{   // have '!'
    1b2c:	b510      	push	{r4, lr}
    1b2e:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    1b30:	f007 fb8e 	bl	9250 <usb_serial_available>

    while(!Serial.available()) ;
    1b34:	2800      	cmp	r0, #0
    1b36:	d0fb      	beq.n	1b30 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1b38:	f007 fbce 	bl	92d8 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1b3c:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    1b3e:	2864      	cmp	r0, #100	; 0x64
    1b40:	d00d      	beq.n	1b5e <menu3()+0x32>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    1b42:	3863      	subs	r0, #99	; 0x63
    1b44:	2811      	cmp	r0, #17
    1b46:	d814      	bhi.n	1b72 <menu3()+0x46>
    1b48:	e8df f000 	tbb	[pc, r0]
    1b4c:	15131353 	.word	0x15131353
    1b50:	13131313 	.word	0x13131313
    1b54:	13131313 	.word	0x13131313
    1b58:	13131313 	.word	0x13131313
    1b5c:	473c      	.short	0x473c
      menuGet3Int(&year,&month,&day);
    1b5e:	aa02      	add	r2, sp, #8
    1b60:	a901      	add	r1, sp, #4
    1b62:	4668      	mov	r0, sp
    1b64:	f7ff fefc 	bl	1960 <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetDate(year,month,day);
    1b68:	9800      	ldr	r0, [sp, #0]
    1b6a:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    1b6e:	f7ff fe9d 	bl	18ac <rtcSetDate(int, int, int)>
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
    }
}
    1b72:	b00c      	add	sp, #48	; 0x30
    1b74:	bd10      	pop	{r4, pc}
        virtual int available() { return usb_serial_available(); }
    1b76:	f007 fb6b 	bl	9250 <usb_serial_available>
  while(!Serial.available()) continue;
    1b7a:	2800      	cmp	r0, #0
    1b7c:	d0fb      	beq.n	1b76 <menu3()+0x4a>
  count = Serial.readBytesUntil('\r',buffer,40);
    1b7e:	210d      	movs	r1, #13
    1b80:	aa02      	add	r2, sp, #8
    1b82:	2328      	movs	r3, #40	; 0x28
    1b84:	481e      	ldr	r0, [pc, #120]	; (1c00 <menu3()+0xd4>)
    1b86:	f005 ff31 	bl	79ec <Stream::readBytesUntil(char, char*, unsigned int)>
    1b8a:	4603      	mov	r3, r0
  buffer[count]=0;
    1b8c:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1b8e:	a802      	add	r0, sp, #8
    1b90:	3330      	adds	r3, #48	; 0x30
    1b92:	446b      	add	r3, sp
    1b94:	f803 2c28 	strb.w	r2, [r3, #-40]
    1b98:	f00a fa32 	bl	c000 <strlen>
    1b9c:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1b9e:	a802      	add	r0, sp, #8
    1ba0:	f007 fbc0 	bl	9324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1ba4:	4816      	ldr	r0, [pc, #88]	; (1c00 <menu3()+0xd4>)
    1ba6:	f005 fe2d 	bl	7804 <Print::println()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1baa:	aa01      	add	r2, sp, #4
    1bac:	4915      	ldr	r1, [pc, #84]	; (1c04 <menu3()+0xd8>)
    1bae:	a802      	add	r0, sp, #8
    1bb0:	f009 fd06 	bl	b5c0 <sscanf>
    1bb4:	9801      	ldr	r0, [sp, #4]
    1bb6:	4b14      	ldr	r3, [pc, #80]	; (1c08 <menu3()+0xdc>)
    1bb8:	6018      	str	r0, [r3, #0]
}
    1bba:	b00c      	add	sp, #48	; 0x30
    1bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    1bc0:	f7fe be14 	b.w	7ec <acqModifyFrequency(unsigned long)>
      menuGetInt16(&shift); if(shift<0) shift=0;
    1bc4:	4c11      	ldr	r4, [pc, #68]	; (1c0c <menu3()+0xe0>)
    1bc6:	4620      	mov	r0, r4
    1bc8:	f7ff fea0 	bl	190c <menuGetInt16(short*) [clone .isra.0]>
    1bcc:	f9b4 3000 	ldrsh.w	r3, [r4]
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	dace      	bge.n	1b72 <menu3()+0x46>
    1bd4:	2300      	movs	r3, #0
    1bd6:	8023      	strh	r3, [r4, #0]
    1bd8:	e7cb      	b.n	1b72 <menu3()+0x46>
      menuGet3Int(&hour,&minutes,&seconds);
    1bda:	aa02      	add	r2, sp, #8
    1bdc:	a901      	add	r1, sp, #4
    1bde:	4668      	mov	r0, sp
    1be0:	f7ff febe 	bl	1960 <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetTime(hour,minutes,seconds);
    1be4:	9800      	ldr	r0, [sp, #0]
    1be6:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    1bea:	f7ff fe77 	bl	18dc <rtcSetTime(int, int, int)>
}
    1bee:	b00c      	add	sp, #48	; 0x30
    1bf0:	bd10      	pop	{r4, pc}
      menuGetInt16(&proc);
    1bf2:	4807      	ldr	r0, [pc, #28]	; (1c10 <menu3()+0xe4>)
}
    1bf4:	b00c      	add	sp, #48	; 0x30
    1bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt16(&proc);
    1bfa:	f7ff be87 	b.w	190c <menuGetInt16(short*) [clone .isra.0]>
    1bfe:	bf00      	nop
    1c00:	200085ac 	.word	0x200085ac
    1c04:	20000554 	.word	0x20000554
    1c08:	20008b68 	.word	0x20008b68
    1c0c:	20008bca 	.word	0x20008bca
    1c10:	2001ec8c 	.word	0x2001ec8c

00001c14 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1c14:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    1c16:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1c1a:	b084      	sub	sp, #16
    1c1c:	468c      	mov	ip, r1
    1c1e:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    1c20:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1c22:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    1c24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1c28:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    1c2c:	ea4f 124c 	mov.w	r2, ip, lsl #5
    1c30:	4629      	mov	r1, r5
    1c32:	6a20      	ldr	r0, [r4, #32]
    1c34:	f001 f952 	bl	2edc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1c38:	2801      	cmp	r0, #1
    1c3a:	d106      	bne.n	1c4a <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    1c3c:	4632      	mov	r2, r6
    1c3e:	4629      	mov	r1, r5
    1c40:	6a20      	ldr	r0, [r4, #32]
    1c42:	f001 f92f 	bl	2ea4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    1c46:	b004      	add	sp, #16
    1c48:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    1c4a:	2000      	movs	r0, #0
}
    1c4c:	b004      	add	sp, #16
    1c4e:	bd70      	pop	{r4, r5, r6, pc}

00001c50 <ExFatFile::close()>:
bool ExFatFile::close() {
    1c50:	b510      	push	{r4, lr}
    1c52:	4604      	mov	r4, r0
  bool rtn = sync();
    1c54:	f000 fd12 	bl	267c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    1c58:	2300      	movs	r3, #0
    1c5a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    1c5e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    1c62:	bd10      	pop	{r4, pc}

00001c64 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    1c64:	b538      	push	{r3, r4, r5, lr}
    1c66:	460d      	mov	r5, r1
  if (isOpen()) {
    1c68:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    1c6c:	b109      	cbz	r1, 1c72 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    1c6e:	2000      	movs	r0, #0
}
    1c70:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    1c72:	2238      	movs	r2, #56	; 0x38
    1c74:	4604      	mov	r4, r0
    1c76:	f009 fe29 	bl	b8cc <memset>
  m_flags = FILE_FLAG_READ;
    1c7a:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    1c7c:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    1c7e:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    1c80:	4618      	mov	r0, r3
    1c82:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    1c86:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    1c8a:	bd38      	pop	{r3, r4, r5, pc}

00001c8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    1c8c:	b4f0      	push	{r4, r5, r6, r7}
    1c8e:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    1c90:	7809      	ldrb	r1, [r1, #0]
    1c92:	2920      	cmp	r1, #32
    1c94:	d103      	bne.n	1c9e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    1c96:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1c9a:	2c20      	cmp	r4, #32
    1c9c:	d0fb      	beq.n	1c96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    1c9e:	6015      	str	r5, [r2, #0]
  fname->end = path;
    1ca0:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    1ca2:	782c      	ldrb	r4, [r5, #0]
    1ca4:	2c2f      	cmp	r4, #47	; 0x2f
    1ca6:	d011      	beq.n	1ccc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1ca8:	b184      	cbz	r4, 1ccc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1caa:	1c6e      	adds	r6, r5, #1
    1cac:	2c3c      	cmp	r4, #60	; 0x3c
    1cae:	4f1e      	ldr	r7, [pc, #120]	; (1d28 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>)
    uint8_t c = *path++;
    1cb0:	4635      	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    1cb2:	d82a      	bhi.n	1d0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    1cb4:	2c21      	cmp	r4, #33	; 0x21
    1cb6:	d812      	bhi.n	1cde <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    1cb8:	f104 3cff 	add.w	ip, r4, #4294967295
    1cbc:	f1bc 0f1e 	cmp.w	ip, #30
    1cc0:	d816      	bhi.n	1cf0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

fail:
  return false;
}
    1cc2:	2000      	movs	r0, #0
    1cc4:	bcf0      	pop	{r4, r5, r6, r7}
    1cc6:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    1cc8:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1ccc:	2c20      	cmp	r4, #32
    1cce:	d0fb      	beq.n	1cc8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    1cd0:	2c2f      	cmp	r4, #47	; 0x2f
    1cd2:	d0f9      	beq.n	1cc8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    1cd4:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    1cd6:	4611      	mov	r1, r2
}
    1cd8:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    1cda:	f000 bfd5 	b.w	2c88 <ExFatFile::hashName(ExName_t*)>
    1cde:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    1ce2:	fa5f fc8c 	uxtb.w	ip, ip
    1ce6:	fa27 fc0c 	lsr.w	ip, r7, ip
    1cea:	f01c 0f01 	tst.w	ip, #1
    1cee:	d1e8      	bne.n	1cc2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    1cf0:	2c2e      	cmp	r4, #46	; 0x2e
    1cf2:	d001      	beq.n	1cf8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1cf4:	2c20      	cmp	r4, #32
    1cf6:	d10f      	bne.n	1d18 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
  while (*path && !isDirSeparator(*path)) {
    1cf8:	f816 4b01 	ldrb.w	r4, [r6], #1
    1cfc:	2c00      	cmp	r4, #0
    1cfe:	d0e5      	beq.n	1ccc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1d00:	2c2f      	cmp	r4, #47	; 0x2f
    1d02:	d0e3      	beq.n	1ccc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    1d04:	2c3c      	cmp	r4, #60	; 0x3c
    1d06:	4635      	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    1d08:	d9d4      	bls.n	1cb4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    1d0a:	2c5c      	cmp	r4, #92	; 0x5c
    1d0c:	d0d9      	beq.n	1cc2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1d0e:	d905      	bls.n	1d1c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    1d10:	2c7c      	cmp	r4, #124	; 0x7c
    1d12:	d0d6      	beq.n	1cc2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1d14:	0621      	lsls	r1, r4, #24
    1d16:	d4d4      	bmi.n	1cc2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    1d18:	6096      	str	r6, [r2, #8]
    1d1a:	e7ed      	b.n	1cf8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1d1c:	3c3e      	subs	r4, #62	; 0x3e
    1d1e:	2c01      	cmp	r4, #1
    1d20:	d8fa      	bhi.n	1d18 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
}
    1d22:	2000      	movs	r0, #0
    1d24:	bcf0      	pop	{r4, r5, r6, r7}
    1d26:	4770      	bx	lr
    1d28:	05002101 	.word	0x05002101

00001d2c <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    1d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const { return m_attributes & FS_ATTRIB_READ_ONLY; }
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    1d30:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    1d34:	b083      	sub	sp, #12
    1d36:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    1d38:	07dc      	lsls	r4, r3, #31
    1d3a:	d574      	bpl.n	1e26 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    1d3c:	0658      	lsls	r0, r3, #25
    1d3e:	460f      	mov	r7, r1
    1d40:	4690      	mov	r8, r2
    1d42:	f140 80b0 	bpl.w	1ea6 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    1d46:	e9d5 2300 	ldrd	r2, r3, [r5]
    1d4a:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    1d4e:	eb18 0402 	adds.w	r4, r8, r2
    1d52:	f143 0300 	adc.w	r3, r3, #0
    1d56:	42a1      	cmp	r1, r4
    1d58:	eb70 0303 	sbcs.w	r3, r0, r3
    1d5c:	f0c0 80a9 	bcc.w	1eb2 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    1d60:	f1b8 0f00 	cmp.w	r8, #0
    1d64:	d05b      	beq.n	1e1e <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    1d66:	4646      	mov	r6, r8
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1d68:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    1d6c:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1d70:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1d74:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    1d78:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    1d7a:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    1d7e:	2c00      	cmp	r4, #0
    1d80:	d170      	bne.n	1e64 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    1d82:	4313      	orrs	r3, r2
    1d84:	d170      	bne.n	1e68 <ExFatFile::read(void*, unsigned int)+0x13c>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1d86:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1d8a:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    1d8c:	bf4c      	ite	mi
    1d8e:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    1d92:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    1d94:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1d96:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    1d9a:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    1d9c:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1da0:	0a63      	lsrs	r3, r4, #9
    1da2:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    1da4:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    1da8:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    1daa:	f1bb 0f00 	cmp.w	fp, #0
    1dae:	d145      	bne.n	1e3c <ExFatFile::read(void*, unsigned int)+0x110>
    1db0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1db4:	d342      	bcc.n	1e3c <ExFatFile::read(void*, unsigned int)+0x110>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
    1db6:	f8da 2218 	ldr.w	r2, [sl, #536]	; 0x218
    1dba:	4291      	cmp	r1, r2
    1dbc:	d03e      	beq.n	1e3c <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    1dbe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    1dc2:	d358      	bcc.n	1e76 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    1dc4:	f04f 0b01 	mov.w	fp, #1
    1dc8:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    1dcc:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    1dd0:	0a73      	lsrs	r3, r6, #9
    1dd2:	459b      	cmp	fp, r3
    1dd4:	bf28      	it	cs
    1dd6:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    1dd8:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1dda:	ea4f 244b 	mov.w	r4, fp, lsl #9
    1dde:	d80a      	bhi.n	1df6 <ExFatFile::read(void*, unsigned int)+0xca>
    1de0:	eb01 030b 	add.w	r3, r1, fp
    1de4:	429a      	cmp	r2, r3
    1de6:	d206      	bcs.n	1df6 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    1de8:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1dec:	9101      	str	r1, [sp, #4]
    1dee:	f005 f8e9 	bl	6fc4 <FsCache::sync()>
    1df2:	9901      	ldr	r1, [sp, #4]
    1df4:	b1b8      	cbz	r0, 1e26 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    1df6:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1dfa:	465b      	mov	r3, fp
    1dfc:	6802      	ldr	r2, [r0, #0]
    1dfe:	f8d2 a014 	ldr.w	sl, [r2, #20]
    1e02:	463a      	mov	r2, r7
    1e04:	47d0      	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    1e06:	b170      	cbz	r0, 1e26 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    1e08:	4623      	mov	r3, r4
    dst += n;
    1e0a:	4427      	add	r7, r4
    m_curPosition += n;
    1e0c:	e9d5 1200 	ldrd	r1, r2, [r5]
    1e10:	185b      	adds	r3, r3, r1
    1e12:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    1e16:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    1e18:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    1e1c:	d1a8      	bne.n	1d70 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    1e1e:	4640      	mov	r0, r8

fail:
  m_error |= READ_ERROR;
  return -1;
}
    1e20:	b003      	add	sp, #12
    1e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    1e26:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    1e2a:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    1e2e:	f043 0302 	orr.w	r3, r3, #2
    1e32:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    1e36:	b003      	add	sp, #12
    1e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    1e3c:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    1e40:	2200      	movs	r2, #0
    1e42:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1e46:	42b4      	cmp	r4, r6
    1e48:	bf28      	it	cs
    1e4a:	4634      	movcs	r4, r6
    1e4c:	f005 f8e6 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    1e50:	2800      	cmp	r0, #0
    1e52:	d0e8      	beq.n	1e26 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    1e54:	eb00 010b 	add.w	r1, r0, fp
    1e58:	4622      	mov	r2, r4
    1e5a:	4638      	mov	r0, r7
    1e5c:	f006 f86a 	bl	7f34 <memcpy>
    m_curPosition += n;
    1e60:	4623      	mov	r3, r4
    1e62:	e7d2      	b.n	1e0a <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    1e64:	69aa      	ldr	r2, [r5, #24]
    1e66:	e796      	b.n	1d96 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    1e68:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    1e6c:	065b      	lsls	r3, r3, #25
    1e6e:	d50e      	bpl.n	1e8e <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    1e70:	69aa      	ldr	r2, [r5, #24]
    1e72:	3201      	adds	r2, #1
    1e74:	e78e      	b.n	1d94 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    1e76:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1e7a:	463a      	mov	r2, r7
    1e7c:	6803      	ldr	r3, [r0, #0]
    1e7e:	691b      	ldr	r3, [r3, #16]
    1e80:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    1e82:	2800      	cmp	r0, #0
    1e84:	d0cf      	beq.n	1e26 <ExFatFile::read(void*, unsigned int)+0xfa>
    1e86:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    1e8a:	461c      	mov	r4, r3
    1e8c:	e7bd      	b.n	1e0a <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1e8e:	464a      	mov	r2, r9
    1e90:	4650      	mov	r0, sl
    1e92:	69a9      	ldr	r1, [r5, #24]
    1e94:	f001 f864 	bl	2f60 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    1e98:	2800      	cmp	r0, #0
    1e9a:	dbc4      	blt.n	1e26 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    1e9c:	d00c      	beq.n	1eb8 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    1e9e:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1ea2:	69aa      	ldr	r2, [r5, #24]
    1ea4:	e777      	b.n	1d96 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    1ea6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1eaa:	0719      	lsls	r1, r3, #28
    1eac:	f57f af58 	bpl.w	1d60 <ExFatFile::read(void*, unsigned int)+0x34>
    1eb0:	e749      	b.n	1d46 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    1eb2:	eba1 0802 	sub.w	r8, r1, r2
    1eb6:	e753      	b.n	1d60 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    1eb8:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1ebc:	f013 0f50 	tst.w	r3, #80	; 0x50
    1ec0:	d0b1      	beq.n	1e26 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    1ec2:	eba8 0806 	sub.w	r8, r8, r6
    1ec6:	4640      	mov	r0, r8
    1ec8:	e7aa      	b.n	1e20 <ExFatFile::read(void*, unsigned int)+0xf4>
    1eca:	bf00      	nop

00001ecc <ExFatFile::peek()>:
int ExFatFile::peek() {
    1ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ece:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    1ed0:	2201      	movs	r2, #1
    1ed2:	4604      	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    1ed4:	6985      	ldr	r5, [r0, #24]
    1ed6:	f10d 0107 	add.w	r1, sp, #7
  uint64_t saveCurPosition = m_curPosition;
    1eda:	e9d0 6700 	ldrd	r6, r7, [r0]
    1ede:	f7ff ff25 	bl	1d2c <ExFatFile::read(void*, unsigned int)>
    1ee2:	2801      	cmp	r0, #1
  m_curCluster = saveCurCluster;
    1ee4:	61a5      	str	r5, [r4, #24]
    1ee6:	bf0c      	ite	eq
    1ee8:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    1eec:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = saveCurPosition;
    1ef0:	e9c4 6700 	strd	r6, r7, [r4]
}
    1ef4:	b003      	add	sp, #12
    1ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001ef8 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    1ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1efc:	461f      	mov	r7, r3
  bool isOpen() const { return m_attributes; }
    1efe:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    1f02:	b083      	sub	sp, #12
    1f04:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    1f06:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d051      	beq.n	1fb2 <ExFatFile::seekSet(unsigned long long)+0xba>
    1f0e:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    1f10:	e9d0 1c00 	ldrd	r1, ip, [r0]
    1f14:	45bc      	cmp	ip, r7
    1f16:	bf08      	it	eq
    1f18:	4291      	cmpeq	r1, r2
    1f1a:	d05c      	beq.n	1fd6 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    1f1c:	ea56 0207 	orrs.w	r2, r6, r7
    1f20:	d04d      	beq.n	1fbe <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    1f22:	071d      	lsls	r5, r3, #28
    1f24:	d504      	bpl.n	1f30 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    1f26:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    1f2a:	42b0      	cmp	r0, r6
    1f2c:	41ba      	sbcs	r2, r7
    1f2e:	d340      	bcc.n	1fb2 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    1f30:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1f34:	1e75      	subs	r5, r6, #1
    1f36:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    1f3a:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1f3c:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    1f40:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    1f44:	3209      	adds	r2, #9
    1f46:	b2d2      	uxtb	r2, r2
    1f48:	f1c2 0e20 	rsb	lr, r2, #32
    1f4c:	40d5      	lsrs	r5, r2
    1f4e:	f1a2 0920 	sub.w	r9, r2, #32
    1f52:	fa00 fb0e 	lsl.w	fp, r0, lr
    1f56:	fa20 f009 	lsr.w	r0, r0, r9
    1f5a:	ea45 050b 	orr.w	r5, r5, fp
    1f5e:	4305      	orrs	r5, r0
  if (isContiguous()) {
    1f60:	9801      	ldr	r0, [sp, #4]
    1f62:	0640      	lsls	r0, r0, #25
    1f64:	d433      	bmi.n	1fce <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    1f66:	1e48      	subs	r0, r1, #1
    1f68:	fa20 f202 	lsr.w	r2, r0, r2
    1f6c:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    1f70:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    1f74:	fa00 fe0e 	lsl.w	lr, r0, lr
    1f78:	fa20 f009 	lsr.w	r0, r0, r9
    1f7c:	ea42 020e 	orr.w	r2, r2, lr
    1f80:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    1f84:	d001      	beq.n	1f8a <ExFatFile::seekSet(unsigned long long)+0x92>
    1f86:	4295      	cmp	r5, r2
    1f88:	d229      	bcs.n	1fde <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1f8a:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    1f8c:	bf4c      	ite	mi
    1f8e:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    1f92:	69e3      	ldrpl	r3, [r4, #28]
    1f94:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    1f96:	f104 0918 	add.w	r9, r4, #24
    1f9a:	e006      	b.n	1faa <ExFatFile::seekSet(unsigned long long)+0xb2>
    1f9c:	69a1      	ldr	r1, [r4, #24]
    1f9e:	3d01      	subs	r5, #1
    1fa0:	6a20      	ldr	r0, [r4, #32]
    1fa2:	f000 ffdd 	bl	2f60 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    1fa6:	2800      	cmp	r0, #0
    1fa8:	dd03      	ble.n	1fb2 <ExFatFile::seekSet(unsigned long long)+0xba>
    1faa:	464a      	mov	r2, r9
  while (nNew--) {
    1fac:	2d00      	cmp	r5, #0
    1fae:	d1f5      	bne.n	1f9c <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

done:
    1fb0:	e007      	b.n	1fc2 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    1fb2:	2000      	movs	r0, #0
  m_curCluster = tmp;
    1fb4:	f8c4 8018 	str.w	r8, [r4, #24]
}
    1fb8:	b003      	add	sp, #12
    1fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    1fbe:	2300      	movs	r3, #0
    1fc0:	6183      	str	r3, [r0, #24]
  return true;
    1fc2:	2001      	movs	r0, #1
  m_curPosition = pos;
    1fc4:	e9c4 6700 	strd	r6, r7, [r4]
}
    1fc8:	b003      	add	sp, #12
    1fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    1fce:	69e3      	ldr	r3, [r4, #28]
    1fd0:	442b      	add	r3, r5
    1fd2:	61a3      	str	r3, [r4, #24]
    goto done;
    1fd4:	e7f5      	b.n	1fc2 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    1fd6:	2001      	movs	r0, #1
}
    1fd8:	b003      	add	sp, #12
    1fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    1fde:	1aad      	subs	r5, r5, r2
    1fe0:	e7d9      	b.n	1f96 <ExFatFile::seekSet(unsigned long long)+0x9e>
    1fe2:	bf00      	nop

00001fe4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    1fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fe8:	4690      	mov	r8, r2
    1fea:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    1fee:	b08f      	sub	sp, #60	; 0x3c
    1ff0:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    1ff2:	2a00      	cmp	r2, #0
    1ff4:	f040 80d6 	bne.w	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
    1ff8:	468b      	mov	fp, r1
    1ffa:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    1ffe:	f011 0f50 	tst.w	r1, #80	; 0x50
    2002:	f000 80cf 	beq.w	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  switch (oflag & O_ACCMODE) {
    2006:	f003 0103 	and.w	r1, r3, #3
    200a:	469a      	mov	sl, r3
    200c:	2903      	cmp	r1, #3
    200e:	f000 80c9 	beq.w	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    2012:	3101      	adds	r1, #1
    2014:	f003 0008 	and.w	r0, r3, #8
    2018:	ea41 0300 	orr.w	r3, r1, r0
    201c:	9302      	str	r3, [sp, #8]
  if (fname) {
    201e:	f1b8 0f00 	cmp.w	r8, #0
    2022:	f000 80c9 	beq.w	21b8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d4>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    2026:	f8d8 100c 	ldr.w	r1, [r8, #12]
    202a:	f101 070e 	add.w	r7, r1, #14
    202e:	49bd      	ldr	r1, [pc, #756]	; (2324 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x340>)
    2030:	fba1 1707 	umull	r1, r7, r1, r7
  if (pos == m_curPosition) {
    2034:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    2038:	08ff      	lsrs	r7, r7, #3
  if (pos == m_curPosition) {
    203a:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    203c:	f107 0702 	add.w	r7, r7, #2
    2040:	b2ff      	uxtb	r7, r7
  if (pos == m_curPosition) {
    2042:	d005      	beq.n	2050 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    2044:	2000      	movs	r0, #0
    2046:	2100      	movs	r1, #0
    m_curCluster = 0;
    2048:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    204c:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    2050:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2052:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    2054:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    205a:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    205c:	2220      	movs	r2, #32
    205e:	a906      	add	r1, sp, #24
    2060:	4658      	mov	r0, fp
    2062:	f7ff fe63 	bl	1d2c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    2066:	b300      	cbz	r0, 20aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    2068:	2820      	cmp	r0, #32
    206a:	f040 809b 	bne.w	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    206e:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    2072:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2076:	2a00      	cmp	r2, #0
    2078:	f2c0 80a0 	blt.w	21bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
      if (freeCount == 0) {
    207c:	b934      	cbnz	r4, 208c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    207e:	f8db 2000 	ldr.w	r2, [fp]
    2082:	f1a2 0920 	sub.w	r9, r2, #32
  uint32_t curCluster() const { return m_curCluster; }
    2086:	f8db 2018 	ldr.w	r2, [fp, #24]
    208a:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    208c:	42bc      	cmp	r4, r7
    208e:	d201      	bcs.n	2094 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    2090:	3401      	adds	r4, #1
    2092:	b2e4      	uxtb	r4, r4
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    2094:	2b00      	cmp	r3, #0
    2096:	f000 80f9 	beq.w	228c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a8>
    n = dir->read(buf, FS_DIR_SIZE);
    209a:	2220      	movs	r2, #32
    209c:	a906      	add	r1, sp, #24
    209e:	4658      	mov	r0, fp
      inSet = false;
    20a0:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    20a2:	f7ff fe43 	bl	1d2c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    20a6:	2800      	cmp	r0, #0
    20a8:	d1de      	bne.n	2068 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    20aa:	f41a 7f00 	tst.w	sl, #512	; 0x200
    20ae:	d079      	beq.n	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    20b0:	9b02      	ldr	r3, [sp, #8]
    20b2:	079b      	lsls	r3, r3, #30
    20b4:	d576      	bpl.n	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    20b6:	f1b8 0f00 	cmp.w	r8, #0
    20ba:	d073      	beq.n	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  while (freeCount < freeNeed) {
    20bc:	42bc      	cmp	r4, r7
    20be:	d217      	bcs.n	20f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
    20c0:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    20c4:	2220      	movs	r2, #32
    20c6:	a906      	add	r1, sp, #24
    20c8:	4658      	mov	r0, fp
    20ca:	f7ff fe2f 	bl	1d2c <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    20ce:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    20d0:	2800      	cmp	r0, #0
    20d2:	d060      	beq.n	2196 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    20d4:	2820      	cmp	r0, #32
    20d6:	d165      	bne.n	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (freeCount == 0) {
    20d8:	b92c      	cbnz	r4, 20e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    20da:	f8db 2000 	ldr.w	r2, [fp]
    20de:	f8db a018 	ldr.w	sl, [fp, #24]
    20e2:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    20e6:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    20e8:	42a7      	cmp	r7, r4
    20ea:	d8eb      	bhi.n	20c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe0>
    20ec:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    20f0:	2238      	movs	r2, #56	; 0x38
    20f2:	2100      	movs	r1, #0
    20f4:	4628      	mov	r0, r5
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    20f6:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    20fa:	f009 fbe7 	bl	b8cc <memset>
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
    20fe:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    2102:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    2106:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    2108:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    210a:	2328      	movs	r3, #40	; 0x28
  m_dirPos = freePos;
    210c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    2110:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    2114:	f8d8 3000 	ldr.w	r3, [r8]
  m_dirPos = freePos;
    2118:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    211c:	f8c8 3004 	str.w	r3, [r8, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    2120:	b3a7      	cbz	r7, 218c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
    2122:	2400      	movs	r4, #0
      m_setCount = freeNeed - 1;
    2124:	1e7e      	subs	r6, r7, #1
      if (FsDateTime::callback) {
    2126:	f8df 9200 	ldr.w	r9, [pc, #512]	; 2328 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
      m_setCount = freeNeed - 1;
    212a:	b2f6      	uxtb	r6, r6
      if (FsDateTime::callback) {
    212c:	46a2      	mov	sl, r4
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    212e:	2201      	movs	r2, #1
    2130:	4651      	mov	r1, sl
    2132:	4628      	mov	r0, r5
    2134:	f7ff fd6e 	bl	1c14 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    2138:	4683      	mov	fp, r0
    213a:	b398      	cbz	r0, 21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    213c:	f990 2000 	ldrsb.w	r2, [r0]
    2140:	2a00      	cmp	r2, #0
    2142:	db2f      	blt.n	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    memset(cache, 0, FS_DIR_SIZE);
    2144:	2220      	movs	r2, #32
    2146:	2100      	movs	r1, #0
    2148:	f009 fbc0 	bl	b8cc <memset>
    if (i == 0) {
    214c:	2c00      	cmp	r4, #0
    214e:	f000 80cb 	beq.w	22e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x304>
    } else if (i == 1) {
    2152:	f1ba 0f01 	cmp.w	sl, #1
    2156:	f000 80e9 	beq.w	232c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x348>
      dirName->type = EXFAT_TYPE_NAME;
    215a:	23c1      	movs	r3, #193	; 0xc1
    215c:	465a      	mov	r2, fp
    215e:	f10b 0b20 	add.w	fp, fp, #32
    2162:	f802 3b02 	strb.w	r3, [r2], #2
  bool atEnd() { return next == end; }
    2166:	e9d8 3001 	ldrd	r3, r0, [r8, #4]
        if (fname->atEnd()) {
    216a:	4298      	cmp	r0, r3
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    216c:	f103 0301 	add.w	r3, r3, #1
    2170:	d007      	beq.n	2182 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    2172:	f8c8 3004 	str.w	r3, [r8, #4]
    2176:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    217a:	f822 1b02 	strh.w	r1, [r2], #2
      for (size_t k = 0; k < 15; k++) {
    217e:	4593      	cmp	fp, r2
    2180:	d1f3      	bne.n	216a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x186>
  for (uint8_t i = 0; i < freeNeed; i++) {
    2182:	3401      	adds	r4, #1
    2184:	fa5f fa84 	uxtb.w	sl, r4
    2188:	4557      	cmp	r7, sl
    218a:	d8d0      	bhi.n	212e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14a>
  return sync();
    218c:	4628      	mov	r0, r5
    218e:	f000 fa75 	bl	267c <ExFatFile::sync()>
    2192:	4606      	mov	r6, r0
    2194:	e00c      	b.n	21b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      if (!dir->addDirCluster()) {
    2196:	4658      	mov	r0, fp
      uint32_t saveCurCluster = dir->m_curCluster;
    2198:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    219c:	f000 fa9e 	bl	26dc <ExFatFile::addDirCluster()>
    21a0:	2800      	cmp	r0, #0
    21a2:	d178      	bne.n	2296 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b2>
  m_attributes = FILE_ATTR_CLOSED;
    21a4:	2300      	movs	r3, #0
  return false;
    21a6:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    21a8:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    21ac:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    21b0:	4630      	mov	r0, r6
    21b2:	b00f      	add	sp, #60	; 0x3c
    21b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    21b8:	2703      	movs	r7, #3
    21ba:	e749      	b.n	2050 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    21bc:	bb56      	cbnz	r6, 2214 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x230>
        freeCount = 0;
    21be:	42bc      	cmp	r4, r7
    21c0:	bf38      	it	cc
    21c2:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    21c4:	2b85      	cmp	r3, #133	; 0x85
    21c6:	f47f af49 	bne.w	205c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    21ca:	4631      	mov	r1, r6
    21cc:	2238      	movs	r2, #56	; 0x38
    21ce:	4628      	mov	r0, r5
      inSet = true;
    21d0:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    21d2:	f009 fb7b 	bl	b8cc <memset>
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    21d6:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    21da:	f89d 3019 	ldrb.w	r3, [sp, #25]
    21de:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    21e2:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    21e6:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    21e8:	bf58      	it	pl
    21ea:	f043 0308 	orrpl.w	r3, r3, #8
    21ee:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    21f2:	f8db 3000 	ldr.w	r3, [fp]
    21f6:	f8db 2020 	ldr.w	r2, [fp, #32]
    21fa:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    21fc:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    21fe:	f8db 2018 	ldr.w	r2, [fp, #24]
    2202:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    2206:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    220a:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    220e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    2212:	e723      	b.n	205c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    2214:	2bc0      	cmp	r3, #192	; 0xc0
    2216:	d00e      	beq.n	2236 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x252>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    2218:	2bc1      	cmp	r3, #193	; 0xc1
    221a:	f47f af3e 	bne.w	209a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    221e:	4642      	mov	r2, r8
    2220:	a906      	add	r1, sp, #24
    2222:	4628      	mov	r0, r5
    2224:	f000 fcfe 	bl	2c24 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    2228:	b118      	cbz	r0, 2232 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
      if (fname->atEnd()) {
    222a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
    222e:	429a      	cmp	r2, r3
    2230:	d034      	beq.n	229c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
        inSet = false;
    2232:	4606      	mov	r6, r0
    2234:	e712      	b.n	205c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    2236:	9b02      	ldr	r3, [sp, #8]
    2238:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    223c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2240:	079b      	lsls	r3, r3, #30
    2242:	d502      	bpl.n	224a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x266>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2244:	9b03      	ldr	r3, [sp, #12]
    2246:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    224a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    224c:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    224e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    2252:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    2256:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    225a:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    225e:	f1b8 0f00 	cmp.w	r8, #0
    2262:	d01b      	beq.n	229c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
  void reset() { next = begin; }
    2264:	f8d8 3000 	ldr.w	r3, [r8]
      if (fname->nameLength != dirStream->nameLength ||
    2268:	f8d8 200c 	ldr.w	r2, [r8, #12]
    226c:	f8c8 3004 	str.w	r3, [r8, #4]
    2270:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2274:	429a      	cmp	r2, r3
    2276:	f47f af10 	bne.w	209a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    227a:	f8b8 6010 	ldrh.w	r6, [r8, #16]
    227e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    2282:	1af6      	subs	r6, r6, r3
    2284:	fab6 f686 	clz	r6, r6
    2288:	0976      	lsrs	r6, r6, #5
    228a:	e6e7      	b.n	205c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    228c:	f1b8 0f00 	cmp.w	r8, #0
    2290:	f47f af0b 	bne.w	20aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    2294:	e786      	b.n	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
      dir->m_curCluster = saveCurCluster;
    2296:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    229a:	e725      	b.n	20e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x104>
  if (oflag & O_EXCL) {
    229c:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    22a0:	d180      	bne.n	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    22a2:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    22a6:	d15d      	bne.n	2364 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
    22a8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    22ac:	079f      	lsls	r7, r3, #30
    22ae:	d459      	bmi.n	2364 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
  if (oflag & O_TRUNC) {
    22b0:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    22b4:	f47f af76 	bne.w	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    22b8:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    22bc:	f43f af78 	beq.w	21b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    22c0:	4628      	mov	r0, r5
    22c2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    22c6:	f7ff fe17 	bl	1ef8 <ExFatFile::seekSet(unsigned long long)>
    22ca:	2800      	cmp	r0, #0
    22cc:	f43f af6a 	beq.w	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (isWritable()) {
    22d0:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    22d4:	079a      	lsls	r2, r3, #30
    22d6:	f57f af6b 	bpl.w	21b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    22da:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    22de:	f043 0320 	orr.w	r3, r3, #32
    22e2:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    22e6:	e763      	b.n	21b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      dirFile->type = EXFAT_TYPE_FILE;
    22e8:	2385      	movs	r3, #133	; 0x85
    22ea:	f88b 3000 	strb.w	r3, [fp]
      m_setCount = freeNeed - 1;
    22ee:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    22f2:	f88b 6001 	strb.w	r6, [fp, #1]
      if (FsDateTime::callback) {
    22f6:	f8d9 3000 	ldr.w	r3, [r9]
    22fa:	b353      	cbz	r3, 2352 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x36e>
        FsDateTime::callback(&date, &time, &ms10);
    22fc:	f10d 0213 	add.w	r2, sp, #19
    2300:	f10d 0116 	add.w	r1, sp, #22
    2304:	a805      	add	r0, sp, #20
    2306:	4798      	blx	r3
    2308:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    230c:	f8ab 300a 	strh.w	r3, [fp, #10]
    2310:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    2314:	f8ab 3008 	strh.w	r3, [fp, #8]
        dirFile->createTimeMs = ms10;
    2318:	f89d 3013 	ldrb.w	r3, [sp, #19]
    231c:	f88b 3014 	strb.w	r3, [fp, #20]
    2320:	e72f      	b.n	2182 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    2322:	bf00      	nop
    2324:	88888889 	.word	0x88888889
    2328:	2001e06c 	.word	0x2001e06c
      dirStream->type = EXFAT_TYPE_STREAM;
    232c:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    232e:	f88b a001 	strb.w	sl, [fp, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    2332:	f88b 3000 	strb.w	r3, [fp]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    2336:	9b02      	ldr	r3, [sp, #8]
    2338:	f063 037f 	orn	r3, r3, #127	; 0x7f
    233c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    2340:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2344:	f88b 3003 	strb.w	r3, [fp, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    2348:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    234c:	f8ab 3004 	strh.w	r3, [fp, #4]
}
    2350:	e717      	b.n	2182 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    2352:	f245 6321 	movw	r3, #22049	; 0x5621
    2356:	f8ab 300a 	strh.w	r3, [fp, #10]
    235a:	f8ab 300e 	strh.w	r3, [fp, #14]
    235e:	f8ab 3012 	strh.w	r3, [fp, #18]
        if (FS_DEFAULT_TIME) {
    2362:	e70e      	b.n	2182 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    2364:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    2368:	06dc      	lsls	r4, r3, #27
    236a:	f53f af1b 	bmi.w	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    236e:	07d8      	lsls	r0, r3, #31
    2370:	f53f af18 	bmi.w	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (oflag & O_TRUNC) {
    2374:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    2378:	d013      	beq.n	23a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3be>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    237a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    237e:	0799      	lsls	r1, r3, #30
    2380:	f57f af10 	bpl.w	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    2384:	2200      	movs	r2, #0
    2386:	2300      	movs	r3, #0
    2388:	4628      	mov	r0, r5
    238a:	f7ff fdb5 	bl	1ef8 <ExFatFile::seekSet(unsigned long long)>
    238e:	2800      	cmp	r0, #0
    2390:	f43f af08 	beq.w	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    2394:	4628      	mov	r0, r5
    2396:	f000 fa93 	bl	28c0 <ExFatFile::truncate()>
    239a:	2800      	cmp	r0, #0
    239c:	f43f af02 	beq.w	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    23a0:	e796      	b.n	22d0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    23a2:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    23a6:	d093      	beq.n	22d0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
    23a8:	e78a      	b.n	22c0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    23aa:	bf00      	nop

000023ac <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    23ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    23b0:	2500      	movs	r5, #0
    23b2:	b097      	sub	sp, #92	; 0x5c
    23b4:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    23b6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    23ba:	9201      	str	r2, [sp, #4]
    23bc:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
    23be:	2b00      	cmp	r3, #0
    23c0:	d13e      	bne.n	2440 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    23c2:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    23c6:	460f      	mov	r7, r1
    23c8:	f013 0f50 	tst.w	r3, #80	; 0x50
    23cc:	d038      	beq.n	2440 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
  if (isDirSeparator(*path)) {
    23ce:	7813      	ldrb	r3, [r2, #0]
    23d0:	4604      	mov	r4, r0
    23d2:	4616      	mov	r6, r2
    23d4:	2b2f      	cmp	r3, #47	; 0x2f
    23d6:	d037      	beq.n	2448 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    23d8:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    23dc:	ab01      	add	r3, sp, #4
    23de:	aa03      	add	r2, sp, #12
    23e0:	4631      	mov	r1, r6
    23e2:	4620      	mov	r0, r4
    23e4:	f7ff fc52 	bl	1c8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    23e8:	b350      	cbz	r0, 2440 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    if (*path == 0) {
    23ea:	9e01      	ldr	r6, [sp, #4]
    23ec:	7833      	ldrb	r3, [r6, #0]
    23ee:	2b00      	cmp	r3, #0
    23f0:	d03e      	beq.n	2470 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    23f2:	2300      	movs	r3, #0
    23f4:	aa03      	add	r2, sp, #12
    23f6:	4639      	mov	r1, r7
    23f8:	4620      	mov	r0, r4
    23fa:	f7ff fdf3 	bl	1fe4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    23fe:	b1f8      	cbz	r0, 2440 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    tmpDir = *this;
    2400:	46a4      	mov	ip, r4
    2402:	ad08      	add	r5, sp, #32
    2404:	f104 0730 	add.w	r7, r4, #48	; 0x30
    2408:	f8dc 0000 	ldr.w	r0, [ip]
    240c:	f10c 0c10 	add.w	ip, ip, #16
    2410:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    2414:	46ae      	mov	lr, r5
    2416:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    241a:	3510      	adds	r5, #16
    241c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    2420:	45bc      	cmp	ip, r7
    2422:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2426:	d1ef      	bne.n	2408 <ExFatFile::open(ExFatFile*, char const*, int)+0x5c>
    2428:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    242c:	af08      	add	r7, sp, #32
    tmpDir = *this;
    242e:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    2430:	4620      	mov	r0, r4
    2432:	f000 f923 	bl	267c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    2436:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    243a:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    243e:	e7cd      	b.n	23dc <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  return false;
    2440:	2000      	movs	r0, #0
}
    2442:	b017      	add	sp, #92	; 0x5c
    2444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    2448:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    244c:	292f      	cmp	r1, #47	; 0x2f
    244e:	d0fb      	beq.n	2448 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    2450:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    2452:	b9b1      	cbnz	r1, 2482 <ExFatFile::open(ExFatFile*, char const*, int)+0xd6>
  memset(this, 0, sizeof(ExFatFile));
    2454:	2238      	movs	r2, #56	; 0x38
    2456:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    2458:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    245a:	f009 fa37 	bl	b8cc <memset>
  m_flags = FILE_FLAG_READ;
    245e:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    2460:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    2462:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    2464:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    2466:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    246a:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    246e:	e7e8      	b.n	2442 <ExFatFile::open(ExFatFile*, char const*, int)+0x96>
  return openPrivate(dirFile, &fname, oflag);
    2470:	464b      	mov	r3, r9
    2472:	aa03      	add	r2, sp, #12
    2474:	4639      	mov	r1, r7
    2476:	4620      	mov	r0, r4
    2478:	f7ff fdb4 	bl	1fe4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    247c:	b017      	add	sp, #92	; 0x5c
    247e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    2482:	2238      	movs	r2, #56	; 0x38
    2484:	2100      	movs	r1, #0
    2486:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    2488:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    248a:	f009 fa1f 	bl	b8cc <memset>
  m_flags = FILE_FLAG_READ;
    248e:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    2490:	af08      	add	r7, sp, #32
  m_vol = vol;
    2492:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    2494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    2498:	2340      	movs	r3, #64	; 0x40
    249a:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    249e:	e79b      	b.n	23d8 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>

000024a0 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    24a0:	b119      	cbz	r1, 24aa <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    24a2:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    24a6:	f7ff bf81 	b.w	23ac <ExFatFile::open(ExFatFile*, char const*, int)>
}
    24aa:	4608      	mov	r0, r1
    24ac:	4770      	bx	lr
    24ae:	bf00      	nop

000024b0 <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    24b0:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    24b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24b4:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    24b6:	6a00      	ldr	r0, [r0, #32]
    24b8:	b101      	cbz	r1, 24bc <ExFatFile::addCluster()+0xc>
    24ba:	3101      	adds	r1, #1
    24bc:	2201      	movs	r2, #1
    24be:	f000 fc15 	bl	2cec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    24c2:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    24c4:	4605      	mov	r5, r0
  if (find < 2) {
    24c6:	d932      	bls.n	252e <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    24c8:	2301      	movs	r3, #1
    24ca:	4601      	mov	r1, r0
    24cc:	6a20      	ldr	r0, [r4, #32]
    24ce:	461a      	mov	r2, r3
    24d0:	f000 fc6c 	bl	2dac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    24d4:	4606      	mov	r6, r0
    24d6:	b350      	cbz	r0, 252e <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    24d8:	69a3      	ldr	r3, [r4, #24]
    24da:	b35b      	cbz	r3, 2534 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    24dc:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    24e0:	0651      	lsls	r1, r2, #25
    24e2:	d512      	bpl.n	250a <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    24e4:	1c59      	adds	r1, r3, #1
    24e6:	42a9      	cmp	r1, r5
    24e8:	d018      	beq.n	251c <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    24ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    24ee:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    24f0:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    24f4:	e005      	b.n	2502 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    24f6:	6a20      	ldr	r0, [r4, #32]
    24f8:	f000 fd54 	bl	2fa4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    24fc:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    24fe:	b1b0      	cbz	r0, 252e <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2500:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    2502:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2504:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    2506:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2508:	d3f5      	bcc.n	24f6 <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    250a:	f04f 32ff 	mov.w	r2, #4294967295
    250e:	4629      	mov	r1, r5
    2510:	6a20      	ldr	r0, [r4, #32]
    2512:	f000 fd47 	bl	2fa4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2516:	b150      	cbz	r0, 252e <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    2518:	69a1      	ldr	r1, [r4, #24]
    251a:	b911      	cbnz	r1, 2522 <ExFatFile::addCluster()+0x72>
}
    251c:	4630      	mov	r0, r6
  m_curCluster = find;
    251e:	61a5      	str	r5, [r4, #24]
}
    2520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    2522:	462a      	mov	r2, r5
    2524:	6a20      	ldr	r0, [r4, #32]
    2526:	f000 fd3d 	bl	2fa4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    252a:	2800      	cmp	r0, #0
    252c:	d1f6      	bne.n	251c <ExFatFile::addCluster()+0x6c>
  return false;
    252e:	2600      	movs	r6, #0
}
    2530:	4630      	mov	r0, r6
    2532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    2534:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    253c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    2540:	e7ec      	b.n	251c <ExFatFile::addCluster()+0x6c>
    2542:	bf00      	nop

00002544 <ExFatFile::syncDir()>:
bool ExFatFile::syncDir() {
    2544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2548:	f04f 0800 	mov.w	r8, #0
    254c:	b082      	sub	sp, #8
        if (FsDateTime::callback) {
    254e:	4f4a      	ldr	r7, [pc, #296]	; (2678 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    2550:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    2552:	4644      	mov	r4, r8
    2554:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    2556:	2200      	movs	r2, #0
    2558:	4630      	mov	r0, r6
    255a:	f7ff fb5b 	bl	1c14 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    255e:	4605      	mov	r5, r0
    2560:	b130      	cbz	r0, 2570 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    2562:	7801      	ldrb	r1, [r0, #0]
    2564:	29c0      	cmp	r1, #192	; 0xc0
    2566:	d069      	beq.n	263c <ExFatFile::syncDir()+0xf8>
    2568:	29c1      	cmp	r1, #193	; 0xc1
    256a:	d02b      	beq.n	25c4 <ExFatFile::syncDir()+0x80>
    256c:	2985      	cmp	r1, #133	; 0x85
    256e:	d009      	beq.n	2584 <ExFatFile::syncDir()+0x40>
  m_error |= WRITE_ERROR;
    2570:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    2574:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2576:	f043 0301 	orr.w	r3, r3, #1
    257a:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    257e:	b002      	add	sp, #8
    2580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    2584:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    2588:	f003 0337 	and.w	r3, r3, #55	; 0x37
    258c:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    258e:	683b      	ldr	r3, [r7, #0]
    2590:	b183      	cbz	r3, 25b4 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    2592:	f10d 0203 	add.w	r2, sp, #3
    2596:	f10d 0106 	add.w	r1, sp, #6
    259a:	a801      	add	r0, sp, #4
    259c:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    259e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    25a2:	81ab      	strh	r3, [r5, #12]
    25a4:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    25a6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    25aa:	81eb      	strh	r3, [r5, #14]
    25ac:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    25ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25b2:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    25b4:	6a32      	ldr	r2, [r6, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    25b6:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    25ba:	f043 0301 	orr.w	r3, r3, #1
    25be:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    25c2:	7829      	ldrb	r1, [r5, #0]
    25c4:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    25c8:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    25ca:	fab0 f080 	clz	r0, r0
    25ce:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    25d0:	e001      	b.n	25d6 <ExFatFile::syncDir()+0x92>
    25d2:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    25d4:	5ca9      	ldrb	r1, [r5, r2]
    25d6:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    25d8:	2a01      	cmp	r2, #1
    25da:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    25de:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    25e2:	fa11 f383 	uxtah	r3, r1, r3
    25e6:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    25e8:	d101      	bne.n	25ee <ExFatFile::syncDir()+0xaa>
    25ea:	2800      	cmp	r0, #0
    25ec:	d1f1      	bne.n	25d2 <ExFatFile::syncDir()+0x8e>
    25ee:	2a1f      	cmp	r2, #31
    25f0:	d9f0      	bls.n	25d4 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    25f2:	f108 0801 	add.w	r8, r8, #1
    25f6:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    25fa:	fa5f f188 	uxtb.w	r1, r8
    25fe:	428b      	cmp	r3, r1
    2600:	d2a9      	bcs.n	2556 <ExFatFile::syncDir()+0x12>
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    2602:	2201      	movs	r2, #1
    2604:	f106 0124 	add.w	r1, r6, #36	; 0x24
    2608:	6a30      	ldr	r0, [r6, #32]
    260a:	f000 fc4b 	bl	2ea4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    260e:	2800      	cmp	r0, #0
    2610:	d0ae      	beq.n	2570 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    2612:	6a35      	ldr	r5, [r6, #32]
    2614:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2616:	4628      	mov	r0, r5
    2618:	f004 fcd4 	bl	6fc4 <FsCache::sync()>
    261c:	2800      	cmp	r0, #0
    261e:	d0a7      	beq.n	2570 <ExFatFile::syncDir()+0x2c>
    2620:	f505 7004 	add.w	r0, r5, #528	; 0x210
    2624:	f004 fcce 	bl	6fc4 <FsCache::sync()>
    2628:	2800      	cmp	r0, #0
    262a:	d0a1      	beq.n	2570 <ExFatFile::syncDir()+0x2c>
    262c:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    2630:	6803      	ldr	r3, [r0, #0]
    2632:	69db      	ldr	r3, [r3, #28]
    2634:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2636:	2800      	cmp	r0, #0
    2638:	d1a1      	bne.n	257e <ExFatFile::syncDir()+0x3a>
    263a:	e799      	b.n	2570 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    263c:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    2640:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    2644:	7843      	ldrb	r3, [r0, #1]
    2646:	bf14      	ite	ne
    2648:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    264c:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    2650:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    2652:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    2656:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    265a:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    265e:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    2662:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    2664:	e9c5 0106 	strd	r0, r1, [r5, #24]
    2668:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    266c:	f043 0301 	orr.w	r3, r3, #1
    2670:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2674:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() { m_dataCache.dirty(); }
    2676:	e7a5      	b.n	25c4 <ExFatFile::syncDir()+0x80>
    2678:	2001e06c 	.word	0x2001e06c

0000267c <ExFatFile::sync()>:
bool ExFatFile::sync() {
    267c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    267e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2682:	b343      	cbz	r3, 26d6 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    2684:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    2688:	4604      	mov	r4, r0
    268a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    268e:	2a00      	cmp	r2, #0
    2690:	db0c      	blt.n	26ac <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    2692:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2694:	4628      	mov	r0, r5
    2696:	f004 fc95 	bl	6fc4 <FsCache::sync()>
    269a:	b978      	cbnz	r0, 26bc <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    269c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    26a0:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    26a2:	f043 0301 	orr.w	r3, r3, #1
    26a6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    26aa:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    26ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    26b0:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    26b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    26b8:	f7ff bf44 	b.w	2544 <ExFatFile::syncDir()>
    26bc:	f505 7004 	add.w	r0, r5, #528	; 0x210
    26c0:	f004 fc80 	bl	6fc4 <FsCache::sync()>
    26c4:	2800      	cmp	r0, #0
    26c6:	d0e9      	beq.n	269c <ExFatFile::sync()+0x20>
    26c8:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    26cc:	6803      	ldr	r3, [r0, #0]
    26ce:	69db      	ldr	r3, [r3, #28]
    26d0:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    26d2:	2800      	cmp	r0, #0
    26d4:	d0e2      	beq.n	269c <ExFatFile::sync()+0x20>
    return true;
    26d6:	2001      	movs	r0, #1
}
    26d8:	bd38      	pop	{r3, r4, r5, pc}
    26da:	bf00      	nop

000026dc <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    26dc:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    26de:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    26e2:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    26e4:	065a      	lsls	r2, r3, #25
    26e6:	d44c      	bmi.n	2782 <ExFatFile::addDirCluster()+0xa6>
    26e8:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    26ea:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    26ec:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    26f0:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    26f2:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    26f6:	d301      	bcc.n	26fc <ExFatFile::addDirCluster()+0x20>
}
    26f8:	2000      	movs	r0, #0
    26fa:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    26fc:	4628      	mov	r0, r5
    26fe:	f7ff fed7 	bl	24b0 <ExFatFile::addCluster()>
    2702:	2800      	cmp	r0, #0
    2704:	d0f8      	beq.n	26f8 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    2706:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    2708:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    270a:	69ae      	ldr	r6, [r5, #24]
    270c:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    2710:	3e02      	subs	r6, #2
    2712:	409e      	lsls	r6, r3
    2714:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2718:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    271a:	1931      	adds	r1, r6, r4
    271c:	2205      	movs	r2, #5
    271e:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2722:	3401      	adds	r4, #1
    2724:	f004 fc7a 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    2728:	f44f 7200 	mov.w	r2, #512	; 0x200
    272c:	2100      	movs	r1, #0
    if (!cache) {
    272e:	2800      	cmp	r0, #0
    2730:	d0e2      	beq.n	26f8 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    2732:	f009 f8cb 	bl	b8cc <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    2736:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    2738:	2301      	movs	r3, #1
    273a:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    273e:	4093      	lsls	r3, r2
    2740:	429c      	cmp	r4, r3
    2742:	d3ea      	bcc.n	271a <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    2744:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2748:	065b      	lsls	r3, r3, #25
    274a:	d415      	bmi.n	2778 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    274c:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    2750:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength += m_vol->bytesPerCluster();
    2754:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2758:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    275c:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    2760:	189b      	adds	r3, r3, r2
    2762:	f141 0000 	adc.w	r0, r1, #0
    2766:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    2768:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength += m_vol->bytesPerCluster();
    276c:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    276e:	189b      	adds	r3, r3, r2
    2770:	f141 0100 	adc.w	r1, r1, #0
    2774:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    2778:	4628      	mov	r0, r5
}
    277a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    277e:	f7ff bf7d 	b.w	267c <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2782:	6a00      	ldr	r0, [r0, #32]
    2784:	f000 fd04 	bl	3190 <ExFatPartition::rootLength()>
    2788:	e7af      	b.n	26ea <ExFatFile::addDirCluster()+0xe>
    278a:	bf00      	nop

0000278c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    278c:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    278e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2792:	f013 0f50 	tst.w	r3, #80	; 0x50
    2796:	d102      	bne.n	279e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    2798:	2500      	movs	r5, #0
}
    279a:	4628      	mov	r0, r5
    279c:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    279e:	f640 2302 	movw	r3, #2562	; 0xa02
    27a2:	4604      	mov	r4, r0
    27a4:	f7ff fc1e 	bl	1fe4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    27a8:	2800      	cmp	r0, #0
    27aa:	d0f5      	beq.n	2798 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    27ac:	2330      	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    27ae:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    27b0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    27b4:	f7ff ff92 	bl	26dc <ExFatFile::addDirCluster()>
    27b8:	4605      	mov	r5, r0
    27ba:	2800      	cmp	r0, #0
    27bc:	d0ec      	beq.n	2798 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    27be:	69a1      	ldr	r1, [r4, #24]
  void rewind() { seekSet(0); }
    27c0:	2200      	movs	r2, #0
    27c2:	2300      	movs	r3, #0
    27c4:	4620      	mov	r0, r4
    27c6:	61e1      	str	r1, [r4, #28]
    27c8:	f7ff fb96 	bl	1ef8 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    27cc:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    27ce:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    27d2:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    27d6:	2b00      	cmp	r3, #0
    27d8:	d0df      	beq.n	279a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    27da:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    27dc:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    27de:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    27e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    27e6:	f7ff bead 	b.w	2544 <ExFatFile::syncDir()>
    27ea:	bf00      	nop

000027ec <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    27ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  ExFatFile() {}
    27ee:	2500      	movs	r5, #0
    27f0:	b097      	sub	sp, #92	; 0x5c
    27f2:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    27f4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    27f8:	9201      	str	r2, [sp, #4]
    27fa:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    27fc:	2b00      	cmp	r3, #0
    27fe:	d146      	bne.n	288e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    2800:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2804:	460e      	mov	r6, r1
    2806:	f013 0f50 	tst.w	r3, #80	; 0x50
    280a:	d040      	beq.n	288e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
  if (isDirSeparator(*path)) {
    280c:	7813      	ldrb	r3, [r2, #0]
    280e:	4604      	mov	r4, r0
    2810:	4611      	mov	r1, r2
    2812:	2b2f      	cmp	r3, #47	; 0x2f
    2814:	d03e      	beq.n	2894 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!parsePathName(path, &fname, &path)) {
    2816:	ab01      	add	r3, sp, #4
    2818:	aa03      	add	r2, sp, #12
    281a:	4620      	mov	r0, r4
    281c:	f7ff fa36 	bl	1c8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2820:	2800      	cmp	r0, #0
    2822:	d034      	beq.n	288e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!*path) {
    2824:	9b01      	ldr	r3, [sp, #4]
    2826:	781b      	ldrb	r3, [r3, #0]
    2828:	2b00      	cmp	r3, #0
    282a:	d041      	beq.n	28b0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc4>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    282c:	2300      	movs	r3, #0
    282e:	aa03      	add	r2, sp, #12
    2830:	4631      	mov	r1, r6
    2832:	4620      	mov	r0, r4
    2834:	f7ff fbd6 	bl	1fe4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2838:	b930      	cbnz	r0, 2848 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5c>
      if (!pFlag || !mkdir(parent, &fname)) {
    283a:	b347      	cbz	r7, 288e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    283c:	aa03      	add	r2, sp, #12
    283e:	4631      	mov	r1, r6
    2840:	4620      	mov	r0, r4
    2842:	f7ff ffa3 	bl	278c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    2846:	b310      	cbz	r0, 288e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    tmpDir = *this;
    2848:	46a4      	mov	ip, r4
    284a:	ad08      	add	r5, sp, #32
    284c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2850:	f8dc 0000 	ldr.w	r0, [ip]
    2854:	f10c 0c10 	add.w	ip, ip, #16
    2858:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    285c:	46ae      	mov	lr, r5
    285e:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    2862:	3510      	adds	r5, #16
    2864:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    2868:	45b4      	cmp	ip, r6
    286a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    286e:	d1ef      	bne.n	2850 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x64>
    2870:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    2874:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    2876:	6028      	str	r0, [r5, #0]
    close();
    2878:	4620      	mov	r0, r4
    287a:	f7ff f9e9 	bl	1c50 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    287e:	9901      	ldr	r1, [sp, #4]
    2880:	ab01      	add	r3, sp, #4
    2882:	aa03      	add	r2, sp, #12
    2884:	4620      	mov	r0, r4
    2886:	f7ff fa01 	bl	1c8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    288a:	2800      	cmp	r0, #0
    288c:	d1ca      	bne.n	2824 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x38>
  return false;
    288e:	2000      	movs	r0, #0
}
    2890:	b017      	add	sp, #92	; 0x5c
    2892:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    2894:	3101      	adds	r1, #1
    2896:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    2898:	780b      	ldrb	r3, [r1, #0]
    289a:	2b2f      	cmp	r3, #47	; 0x2f
    289c:	d0fa      	beq.n	2894 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!tmpDir.openRoot(parent->m_vol)) {
    289e:	6a31      	ldr	r1, [r6, #32]
    28a0:	a808      	add	r0, sp, #32
    28a2:	f7ff f9df 	bl	1c64 <ExFatFile::openRoot(ExFatVolume*)>
    28a6:	2800      	cmp	r0, #0
    28a8:	d0f1      	beq.n	288e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!parsePathName(path, &fname, &path)) {
    28aa:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    28ac:	ae08      	add	r6, sp, #32
    28ae:	e7b2      	b.n	2816 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2a>
  return mkdir(parent, &fname);
    28b0:	aa03      	add	r2, sp, #12
    28b2:	4631      	mov	r1, r6
    28b4:	4620      	mov	r0, r4
    28b6:	f7ff ff69 	bl	278c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    28ba:	b017      	add	sp, #92	; 0x5c
    28bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28be:	bf00      	nop

000028c0 <ExFatFile::truncate()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    28c0:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    28c4:	079a      	lsls	r2, r3, #30
    28c6:	d562      	bpl.n	298e <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    28c8:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    28ca:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    28cc:	b082      	sub	sp, #8
    28ce:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    28d0:	b3a5      	cbz	r5, 293c <ExFatFile::truncate()+0x7c>
    return true;
  }
  if (isContiguous()) {
    28d2:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    28d6:	d034      	beq.n	2942 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    28d8:	6a00      	ldr	r0, [r0, #32]
    28da:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    28dc:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    28e0:	3a01      	subs	r2, #1
    28e2:	68e1      	ldr	r1, [r4, #12]
    28e4:	f10c 0c09 	add.w	ip, ip, #9
    28e8:	f141 31ff 	adc.w	r1, r1, #4294967295
    28ec:	fa5f fc8c 	uxtb.w	ip, ip
    28f0:	f1cc 0e20 	rsb	lr, ip, #32
    28f4:	fa22 f20c 	lsr.w	r2, r2, ip
    28f8:	f1ac 0c20 	sub.w	ip, ip, #32
    28fc:	fa01 fe0e 	lsl.w	lr, r1, lr
    2900:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    2904:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2906:	ea42 020e 	orr.w	r2, r2, lr
    290a:	ea42 020c 	orr.w	r2, r2, ip
    290e:	3201      	adds	r2, #1
    if (m_curCluster) {
    2910:	b319      	cbz	r1, 295a <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    2912:	3d01      	subs	r5, #1
    2914:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    2916:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    2918:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    291a:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    291c:	bb72      	cbnz	r2, 297c <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    291e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    2922:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    2924:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2928:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    292c:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    2930:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    2934:	f7ff fea2 	bl	267c <ExFatFile::sync()>

fail:
  return false;
}
    2938:	b002      	add	sp, #8
    293a:	bd70      	pop	{r4, r5, r6, pc}
    return true;
    293c:	2001      	movs	r0, #1
}
    293e:	b002      	add	sp, #8
    2940:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    2942:	6981      	ldr	r1, [r0, #24]
    2944:	b961      	cbnz	r1, 2960 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    2946:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2948:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    294a:	4629      	mov	r1, r5
    294c:	6a20      	ldr	r0, [r4, #32]
    294e:	f000 fb49 	bl	2fe4 <ExFatPartition::freeChain(unsigned long)>
    2952:	b1c8      	cbz	r0, 2988 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2954:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2958:	e7e1      	b.n	291e <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    295a:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    295c:	61e1      	str	r1, [r4, #28]
    295e:	e7dd      	b.n	291c <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2960:	aa01      	add	r2, sp, #4
    2962:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    2964:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2966:	f000 fafb 	bl	2f60 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    296a:	2800      	cmp	r0, #0
    296c:	db0c      	blt.n	2988 <ExFatFile::truncate()+0xc8>
      if (fg) {
    296e:	d110      	bne.n	2992 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    2970:	9d01      	ldr	r5, [sp, #4]
    2972:	2d00      	cmp	r5, #0
    2974:	d1e9      	bne.n	294a <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2976:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    297a:	e7d0      	b.n	291e <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    297c:	2300      	movs	r3, #0
    297e:	9901      	ldr	r1, [sp, #4]
    2980:	f000 fa14 	bl	2dac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2984:	2800      	cmp	r0, #0
    2986:	d1e5      	bne.n	2954 <ExFatFile::truncate()+0x94>
  return false;
    2988:	2000      	movs	r0, #0
}
    298a:	b002      	add	sp, #8
    298c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    298e:	2000      	movs	r0, #0
}
    2990:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    2992:	f04f 32ff 	mov.w	r2, #4294967295
    2996:	69a1      	ldr	r1, [r4, #24]
    2998:	6a20      	ldr	r0, [r4, #32]
    299a:	f000 fb03 	bl	2fa4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    299e:	2800      	cmp	r0, #0
    29a0:	d1e6      	bne.n	2970 <ExFatFile::truncate()+0xb0>
    29a2:	e7f1      	b.n	2988 <ExFatFile::truncate()+0xc8>

000029a4 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    29a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    29a8:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    29ac:	b083      	sub	sp, #12
    29ae:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    29b0:	079d      	lsls	r5, r3, #30
    29b2:	f140 80a1 	bpl.w	2af8 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    29b6:	4691      	mov	r9, r2
    29b8:	071a      	lsls	r2, r3, #28
    29ba:	460e      	mov	r6, r1
    29bc:	f100 8095 	bmi.w	2aea <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    29c0:	f1b9 0f00 	cmp.w	r9, #0
    29c4:	f000 8128 	beq.w	2c18 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    29c8:	6823      	ldr	r3, [r4, #0]
    29ca:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    29cc:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    29ce:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    29d0:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    29d4:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    29d8:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    29dc:	f1b8 0f00 	cmp.w	r8, #0
    29e0:	f040 8094 	bne.w	2b0c <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    29e4:	2900      	cmp	r1, #0
    29e6:	f000 80d4 	beq.w	2b92 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    29ea:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    29ee:	065b      	lsls	r3, r3, #25
    29f0:	f140 80ec 	bpl.w	2bcc <ExFatFile::write(void const*, unsigned int)+0x228>
    29f4:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    29f8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    29fc:	f10c 0c09 	add.w	ip, ip, #9
    2a00:	3b01      	subs	r3, #1
    2a02:	fa5f fc8c 	uxtb.w	ip, ip
    2a06:	f142 32ff 	adc.w	r2, r2, #4294967295
    2a0a:	f1cc 0e20 	rsb	lr, ip, #32
    2a0e:	fa23 f30c 	lsr.w	r3, r3, ip
    2a12:	f1ac 0c20 	sub.w	ip, ip, #32
    2a16:	fa02 fe0e 	lsl.w	lr, r2, lr
    2a1a:	fa22 fc0c 	lsr.w	ip, r2, ip
    2a1e:	69e2      	ldr	r2, [r4, #28]
    2a20:	ea43 030e 	orr.w	r3, r3, lr
    2a24:	ea43 030c 	orr.w	r3, r3, ip
    2a28:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    2a2a:	4299      	cmp	r1, r3
    2a2c:	f080 80d5 	bcs.w	2bda <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    2a30:	3101      	adds	r1, #1
    2a32:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    2a34:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2a38:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    2a3a:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2a3e:	4091      	lsls	r1, r2
    2a40:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2a42:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    2a46:	f0c0 808a 	bcc.w	2b5e <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    2a4a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    2a4e:	f0c0 80a6 	bcc.w	2b9e <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    2a52:	2301      	movs	r3, #1
    2a54:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    2a56:	0a6a      	lsrs	r2, r5, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    2a58:	eba3 0308 	sub.w	r3, r3, r8
    2a5c:	4293      	cmp	r3, r2
    2a5e:	bf28      	it	cs
    2a60:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    2a62:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
    2a66:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    2a68:	ea4f 2843 	mov.w	r8, r3, lsl #9
    2a6c:	d309      	bcc.n	2a82 <ExFatFile::write(void const*, unsigned int)+0xde>
    2a6e:	185f      	adds	r7, r3, r1
    2a70:	42ba      	cmp	r2, r7
    2a72:	d206      	bcs.n	2a82 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    2a74:	2200      	movs	r2, #0
    2a76:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2a7a:	f04f 32ff 	mov.w	r2, #4294967295
    2a7e:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
    2a82:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2a86:	4632      	mov	r2, r6
    2a88:	6807      	ldr	r7, [r0, #0]
    2a8a:	6a7f      	ldr	r7, [r7, #36]	; 0x24
    2a8c:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    2a8e:	b398      	cbz	r0, 2af8 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    2a90:	4643      	mov	r3, r8
    src += n;
    2a92:	4446      	add	r6, r8
    toWrite -= n;
    2a94:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    2a98:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    2a9c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    2aa0:	19db      	adds	r3, r3, r7
    2aa2:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    2aa6:	4298      	cmp	r0, r3
    2aa8:	4191      	sbcs	r1, r2
    m_curPosition += n;
    2aaa:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    2aae:	d207      	bcs.n	2ac0 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2ab0:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2ab4:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    2ab8:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2abc:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    2ac0:	2d00      	cmp	r5, #0
    2ac2:	d183      	bne.n	29cc <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    2ac4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    2ac8:	4298      	cmp	r0, r3
    2aca:	4191      	sbcs	r1, r2
    2acc:	f0c0 8096 	bcc.w	2bfc <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    2ad0:	4b53      	ldr	r3, [pc, #332]	; (2c20 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    2ad2:	681b      	ldr	r3, [r3, #0]
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	f000 809d 	beq.w	2c14 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2ada:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2ade:	4648      	mov	r0, r9
    2ae0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2ae4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    2ae8:	e00d      	b.n	2b06 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    2aea:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    2aee:	f7ff fa03 	bl	1ef8 <ExFatFile::seekSet(unsigned long long)>
    2af2:	2800      	cmp	r0, #0
    2af4:	f47f af64 	bne.w	29c0 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    2af8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    2afc:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2afe:	f043 0301 	orr.w	r3, r3, #1
    2b02:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2b06:	b003      	add	sp, #12
    2b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    2b0c:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2b10:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2b12:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    2b16:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2b1a:	4091      	lsls	r1, r2
    2b1c:	4441      	add	r1, r8
    2b1e:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2b20:	2f00      	cmp	r7, #0
    2b22:	d08e      	beq.n	2a42 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    2b24:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    2b28:	2201      	movs	r2, #1
    2b2a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2b2e:	45a8      	cmp	r8, r5
    2b30:	bf28      	it	cs
    2b32:	46a8      	movcs	r8, r5
    2b34:	f004 fa72 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2b38:	2800      	cmp	r0, #0
    2b3a:	d0dd      	beq.n	2af8 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2b3c:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2b3e:	4447      	add	r7, r8
      memcpy(dst, src, n);
    2b40:	4642      	mov	r2, r8
    2b42:	4631      	mov	r1, r6
    2b44:	f005 f9f6 	bl	7f34 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2b48:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    2b4c:	6a20      	ldr	r0, [r4, #32]
    2b4e:	d19f      	bne.n	2a90 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() { return m_dataCache.sync(); }
    2b50:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2b54:	f004 fa36 	bl	6fc4 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    2b58:	2800      	cmp	r0, #0
    2b5a:	d199      	bne.n	2a90 <ExFatFile::write(void const*, unsigned int)+0xec>
    2b5c:	e7cc      	b.n	2af8 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    2b5e:	6862      	ldr	r2, [r4, #4]
    2b60:	6963      	ldr	r3, [r4, #20]
    2b62:	9200      	str	r2, [sp, #0]
    2b64:	9301      	str	r3, [sp, #4]
    2b66:	6922      	ldr	r2, [r4, #16]
    2b68:	6823      	ldr	r3, [r4, #0]
    2b6a:	4293      	cmp	r3, r2
    2b6c:	e9dd 2300 	ldrd	r2, r3, [sp]
    2b70:	419a      	sbcs	r2, r3
    2b72:	d212      	bcs.n	2b9a <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    2b74:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    2b76:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2b7a:	f004 fa4f 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2b7e:	2800      	cmp	r0, #0
    2b80:	d0ba      	beq.n	2af8 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2b82:	462a      	mov	r2, r5
    2b84:	4631      	mov	r1, r6
    2b86:	4438      	add	r0, r7
    m_curPosition += n;
    2b88:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    2b8a:	f005 f9d3 	bl	7f34 <memcpy>
    m_curPosition += n;
    2b8e:	462b      	mov	r3, r5
    2b90:	e77f      	b.n	2a92 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    2b92:	69e1      	ldr	r1, [r4, #28]
    2b94:	b349      	cbz	r1, 2bea <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    2b96:	61a1      	str	r1, [r4, #24]
    2b98:	e74c      	b.n	2a34 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    2b9a:	2205      	movs	r2, #5
    2b9c:	e7eb      	b.n	2b76 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    2b9e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    2ba2:	428b      	cmp	r3, r1
    2ba4:	d106      	bne.n	2bb4 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    2ba6:	2300      	movs	r3, #0
    2ba8:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2bac:	f04f 33ff 	mov.w	r3, #4294967295
    2bb0:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
    2bb4:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2bb8:	4632      	mov	r2, r6
    2bba:	6803      	ldr	r3, [r0, #0]
    2bbc:	6a1b      	ldr	r3, [r3, #32]
    2bbe:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    2bc0:	2800      	cmp	r0, #0
    2bc2:	d099      	beq.n	2af8 <ExFatFile::write(void const*, unsigned int)+0x154>
    2bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2bc8:	4698      	mov	r8, r3
    2bca:	e762      	b.n	2a92 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2bcc:	f104 0218 	add.w	r2, r4, #24
    2bd0:	f000 f9c6 	bl	2f60 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    2bd4:	2800      	cmp	r0, #0
    2bd6:	db8f      	blt.n	2af8 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    2bd8:	d104      	bne.n	2be4 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    2bda:	4620      	mov	r0, r4
    2bdc:	f7ff fc68 	bl	24b0 <ExFatFile::addCluster()>
    2be0:	2800      	cmp	r0, #0
    2be2:	d089      	beq.n	2af8 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    2be4:	69a1      	ldr	r1, [r4, #24]
    2be6:	6a20      	ldr	r0, [r4, #32]
    2be8:	e724      	b.n	2a34 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    2bea:	4620      	mov	r0, r4
    2bec:	f7ff fc60 	bl	24b0 <ExFatFile::addCluster()>
    2bf0:	2800      	cmp	r0, #0
    2bf2:	d081      	beq.n	2af8 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    2bf4:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    2bf6:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    2bf8:	61e1      	str	r1, [r4, #28]
    2bfa:	e71b      	b.n	2a34 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2bfc:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2c00:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    2c02:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2c06:	f061 037f 	orn	r3, r1, #127	; 0x7f
    2c0a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2c0e:	b003      	add	sp, #12
    2c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2c14:	4648      	mov	r0, r9
    2c16:	e776      	b.n	2b06 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    2c18:	e9d4 3200 	ldrd	r3, r2, [r4]
    2c1c:	e752      	b.n	2ac4 <ExFatFile::write(void const*, unsigned int)+0x120>
    2c1e:	bf00      	nop
    2c20:	2001e06c 	.word	0x2001e06c

00002c24 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    2c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  bool atEnd() { return next == end; }
    2c28:	e9d2 3801 	ldrd	r3, r8, [r2, #4]
    2c2c:	f103 090f 	add.w	r9, r3, #15
  return *reinterpret_cast<const uint16_t*>(src);
    2c30:	f831 0f02 	ldrh.w	r0, [r1, #2]!
    if (fname->atEnd()) {
    2c34:	4598      	cmp	r8, r3
  char getch() { return atEnd() ? 0 : *next++; }
    2c36:	f103 0301 	add.w	r3, r3, #1
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2c3a:	fa5f fc80 	uxtb.w	ip, r0
    if (fname->atEnd()) {
    2c3e:	d01e      	beq.n	2c7e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    2c40:	6053      	str	r3, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2c42:	287e      	cmp	r0, #126	; 0x7e
    2c44:	f813 ec01 	ldrb.w	lr, [r3, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2c48:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
    2c4c:	f1ac 0620 	sub.w	r6, ip, #32
    2c50:	f1ae 0561 	sub.w	r5, lr, #97	; 0x61
    2c54:	f1ae 0720 	sub.w	r7, lr, #32
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2c58:	d80e      	bhi.n	2c78 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2c5a:	2d19      	cmp	r5, #25
    2c5c:	bf98      	it	ls
    2c5e:	fa5f fe87 	uxtbls.w	lr, r7
    2c62:	2c19      	cmp	r4, #25
    2c64:	bf98      	it	ls
    2c66:	fa5f fc86 	uxtbls.w	ip, r6
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2c6a:	45f4      	cmp	ip, lr
    2c6c:	d104      	bne.n	2c78 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
  for (uint8_t i = 0; i < 15; i++) {
    2c6e:	4599      	cmp	r9, r3
    2c70:	d1de      	bne.n	2c30 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    2c72:	2001      	movs	r0, #1
}
    2c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
    2c78:	2000      	movs	r0, #0
}
    2c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return u == 0;
    2c7e:	fab0 f080 	clz	r0, r0
    2c82:	0940      	lsrs	r0, r0, #5
}
    2c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00002c88 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    2c88:	b530      	push	{r4, r5, lr}
  void reset() { next = begin; }
    2c8a:	680d      	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
    2c8c:	688c      	ldr	r4, [r1, #8]
  void reset() { next = begin; }
    2c8e:	604d      	str	r5, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    2c90:	42ac      	cmp	r4, r5
    2c92:	d025      	beq.n	2ce0 <ExFatFile::hashName(ExName_t*)+0x58>
    2c94:	462a      	mov	r2, r5
  uint16_t hash = 0;
    2c96:	2300      	movs	r3, #0
  char getch() { return atEnd() ? 0 : *next++; }
    2c98:	3201      	adds	r2, #1
  hash = ((hash << 15) | (hash >> 1)) + u;
    2c9a:	03d8      	lsls	r0, r3, #15
    2c9c:	604a      	str	r2, [r1, #4]
    2c9e:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
    2ca2:	f812 0c01 	ldrb.w	r0, [r2, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2ca6:	f1a0 0c61 	sub.w	ip, r0, #97	; 0x61
    2caa:	f1a0 0e20 	sub.w	lr, r0, #32
    2cae:	f1bc 0f19 	cmp.w	ip, #25
    2cb2:	bf98      	it	ls
    2cb4:	fa5f f08e 	uxtbls.w	r0, lr
  while (!fname->atEnd()) {
    2cb8:	4294      	cmp	r4, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
    2cba:	4403      	add	r3, r0
  hash = ((hash << 15) | (hash >> 1));
    2cbc:	ea4f 30c3 	mov.w	r0, r3, lsl #15
    2cc0:	f3c3 034e 	ubfx	r3, r3, #1, #15
    2cc4:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    2cc8:	ea43 0300 	orr.w	r3, r3, r0
  while (!fname->atEnd()) {
    2ccc:	d1e4      	bne.n	2c98 <ExFatFile::hashName(ExName_t*)+0x10>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    2cce:	1b64      	subs	r4, r4, r5
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    2cd0:	820b      	strh	r3, [r1, #16]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2cd2:	1e60      	subs	r0, r4, #1
  fname->nameLength = fname->end - fname->begin;
    2cd4:	60cc      	str	r4, [r1, #12]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2cd6:	28fe      	cmp	r0, #254	; 0xfe
    2cd8:	bf8c      	ite	hi
    2cda:	2000      	movhi	r0, #0
    2cdc:	2001      	movls	r0, #1
  }
  return true;

fail:
  return false;
}
    2cde:	bd30      	pop	{r4, r5, pc}
  while (!fname->atEnd()) {
    2ce0:	2000      	movs	r0, #0
    2ce2:	4604      	mov	r4, r0
  uint16_t hash = 0;
    2ce4:	4603      	mov	r3, r0
  fname->nameLength = fname->end - fname->begin;
    2ce6:	60cc      	str	r4, [r1, #12]
  fname->nameHash = hash;
    2ce8:	820b      	strh	r3, [r1, #16]
}
    2cea:	bd30      	pop	{r4, r5, pc}

00002cec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cf0:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2cf2:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2cf4:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2cf6:	2900      	cmp	r1, #0
    2cf8:	d042      	beq.n	2d80 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    2cfa:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    2cfe:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2d02:	4543      	cmp	r3, r8
    2d04:	d942      	bls.n	2d8c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    2d06:	f008 0307 	and.w	r3, r8, #7
    2d0a:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    2d0c:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    2d10:	409d      	lsls	r5, r3
    2d12:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    2d14:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    2d16:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector =
    2d18:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    2d1c:	2200      	movs	r2, #0
    2d1e:	4638      	mov	r0, r7
    2d20:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    2d24:	f004 f97a 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2d28:	b1e8      	cbz	r0, 2d66 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    2d2a:	f10b 3bff 	add.w	fp, fp, #4294967295
    2d2e:	4483      	add	fp, r0
    2d30:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    2d34:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    2d38:	e00a      	b.n	2d50 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    2d3a:	454a      	cmp	r2, r9
    2d3c:	d02b      	beq.n	2d96 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2d3e:	45a0      	cmp	r8, r4
    2d40:	d010      	beq.n	2d64 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    2d42:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    2d46:	42a5      	cmp	r5, r4
    2d48:	d914      	bls.n	2d74 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    2d4a:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    2d4e:	d00c      	beq.n	2d6a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    2d50:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    2d52:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    2d54:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    2d58:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    2d5c:	d0ed      	beq.n	2d3a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    2d5e:	45a0      	cmp	r8, r4
        endAlloc++;
    2d60:	4626      	mov	r6, r4
        if (endAlloc == start) {
    2d62:	d1ee      	bne.n	2d42 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    2d64:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    2d66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    2d6a:	4558      	cmp	r0, fp
      mask = 1;
    2d6c:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    2d70:	d1e0      	bne.n	2d34 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    2d72:	e001      	b.n	2d78 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    2d74:	2600      	movs	r6, #0
    2d76:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    2d78:	2501      	movs	r5, #1
    i = 0;
    2d7a:	f04f 0b00 	mov.w	fp, #0
    2d7e:	e7cb      	b.n	2d18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2d80:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    2d84:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2d88:	4543      	cmp	r3, r8
    2d8a:	d8bc      	bhi.n	2d06 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    2d8c:	f04f 0800 	mov.w	r8, #0
    2d90:	2501      	movs	r5, #1
    start = 0;
    2d92:	46c3      	mov	fp, r8
    2d94:	e7be      	b.n	2d14 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    2d96:	f1ba 0f00 	cmp.w	sl, #0
    2d9a:	d104      	bne.n	2da6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    2d9c:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    2da0:	bf08      	it	eq
    2da2:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    2da6:	1cb0      	adds	r0, r6, #2
}
    2da8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002dac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    2dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2db0:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    2db2:	1e88      	subs	r0, r1, #2
                                  bool value) {
    2db4:	4615      	mov	r5, r2
    2db6:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    2db8:	1883      	adds	r3, r0, r2
    2dba:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    2dbe:	4293      	cmp	r3, r2
    2dc0:	d837      	bhi.n	2e32 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    2dc2:	bbce      	cbnz	r6, 2e38 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    2dc4:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    2dc8:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    2dca:	bf88      	it	hi
    2dcc:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    2dd0:	f000 0307 	and.w	r3, r0, #7
    2dd4:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2dd6:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    2dda:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    2dde:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2de0:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    2de4:	b2e4      	uxtb	r4, r4
    2de6:	2201      	movs	r2, #1
    2de8:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2dea:	188f      	adds	r7, r1, r2
    2dec:	f004 f916 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2df0:	b1f8      	cbz	r0, 2e32 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2df2:	f109 3eff 	add.w	lr, r9, #4294967295
    2df6:	4486      	add	lr, r0
    2df8:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2dfc:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    2e00:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2e04:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    2e08:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    2e0c:	bf14      	ite	ne
    2e0e:	2201      	movne	r2, #1
    2e10:	2200      	moveq	r2, #0
    2e12:	42b2      	cmp	r2, r6
    2e14:	d00d      	beq.n	2e32 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    2e16:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    2e18:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    2e1c:	d018      	beq.n	2e50 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    2e1e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2e22:	d1ed      	bne.n	2e00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    2e24:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2e26:	46a1      	mov	r9, r4
    2e28:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    2e2c:	d1e6      	bne.n	2dfc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2e2e:	4639      	mov	r1, r7
    2e30:	e7d9      	b.n	2de6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

fail:
  return false;
    2e32:	2000      	movs	r0, #0
}
    2e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2e38:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    2e3c:	428b      	cmp	r3, r1
    2e3e:	d9c7      	bls.n	2dd0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    2e40:	4281      	cmp	r1, r0
    2e42:	d3c5      	bcc.n	2dd0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2e44:	4293      	cmp	r3, r2
    2e46:	bf28      	it	cs
    2e48:	2300      	movcs	r3, #0
    2e4a:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    2e4e:	e7bf      	b.n	2dd0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    2e50:	2001      	movs	r0, #1
}
    2e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e56:	bf00      	nop

00002e58 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    2e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    2e5a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2e5e:	3301      	adds	r3, #1
    2e60:	428b      	cmp	r3, r1
    2e62:	d201      	bcs.n	2e68 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    2e64:	2000      	movs	r0, #0
}
    2e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e68:	4607      	mov	r7, r0
    2e6a:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    2e6c:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    2e70:	2500      	movs	r5, #0
    2e72:	e005      	b.n	2e80 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    2e74:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    2e78:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    2e7a:	3301      	adds	r3, #1
    2e7c:	42a3      	cmp	r3, r4
    2e7e:	d3f1      	bcc.n	2e64 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2e80:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    2e84:	2200      	movs	r2, #0
    2e86:	4630      	mov	r0, r6
    2e88:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2e8c:	f004 f8c6 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2e90:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    2e92:	2800      	cmp	r0, #0
    2e94:	d0e6      	beq.n	2e64 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2e96:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2e9a:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    2e9c:	1c63      	adds	r3, r4, #1
    2e9e:	d1e9      	bne.n	2e74 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    2ea0:	1c68      	adds	r0, r5, #1
}
    2ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002ea4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    2ea4:	b538      	push	{r3, r4, r5, lr}
    2ea6:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    2ea8:	680b      	ldr	r3, [r1, #0]
    2eaa:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    2eae:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    2eb2:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    2eb6:	3b02      	subs	r3, #2
    2eb8:	6865      	ldr	r5, [r4, #4]
    2eba:	fa03 f30c 	lsl.w	r3, r3, ip
    2ebe:	4029      	ands	r1, r5
    2ec0:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    2ec4:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    2ec8:	4419      	add	r1, r3
    2eca:	f004 f8a7 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    2ece:	b118      	cbz	r0, 2ed8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    2ed0:	6863      	ldr	r3, [r4, #4]
    2ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2ed6:	4418      	add	r0, r3
}
    2ed8:	bd38      	pop	{r3, r4, r5, pc}
    2eda:	bf00      	nop

00002edc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ee0:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2ee2:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    2ee6:	6849      	ldr	r1, [r1, #4]
    2ee8:	400b      	ands	r3, r1
  pos->position += offset;
    2eea:	4411      	add	r1, r2
    2eec:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2eee:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2ef0:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    2ef4:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    2ef8:	b2d2      	uxtb	r2, r2
    2efa:	40d3      	lsrs	r3, r2
  while (tmp--) {
    2efc:	b32b      	cbz	r3, 2f4a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    2efe:	4680      	mov	r8, r0
    2f00:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    2f02:	f500 7904 	add.w	r9, r0, #528	; 0x210
    2f06:	e005      	b.n	2f14 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    2f08:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    2f0a:	3d01      	subs	r5, #1
      pos->cluster++;
    2f0c:	f103 0301 	add.w	r3, r3, #1
    2f10:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    2f12:	d31a      	bcc.n	2f4a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    2f14:	7a26      	ldrb	r6, [r4, #8]
    2f16:	2e00      	cmp	r6, #0
    2f18:	d1f6      	bne.n	2f08 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    2f1a:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    2f1e:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    2f20:	6827      	ldr	r7, [r4, #0]
    2f22:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    2f24:	3301      	adds	r3, #1
    2f26:	429f      	cmp	r7, r3
    2f28:	d812      	bhi.n	2f50 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2f2a:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    2f2e:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    2f32:	f004 f873 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2f36:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    2f38:	b150      	cbz	r0, 2f50 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2f3a:	f3c7 0708 	ubfx	r7, r7, #0, #9
    2f3e:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    2f40:	1c5a      	adds	r2, r3, #1
    2f42:	d009      	beq.n	2f58 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    2f44:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    2f46:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    2f48:	d2e4      	bcs.n	2f14 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    2f4a:	2001      	movs	r0, #1
}
    2f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    2f50:	f04f 30ff 	mov.w	r0, #4294967295
}
    2f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    2f58:	4630      	mov	r0, r6
}
    2f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f5e:	bf00      	nop

00002f60 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    2f60:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    2f62:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2f66:	3301      	adds	r3, #1
    2f68:	428b      	cmp	r3, r1
    2f6a:	d202      	bcs.n	2f72 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    2f6c:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    2f70:	bd38      	pop	{r3, r4, r5, pc}
    2f72:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2f74:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    2f78:	4615      	mov	r5, r2
    2f7a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2f7e:	2200      	movs	r2, #0
    2f80:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2f84:	f004 f84a 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2f88:	2800      	cmp	r0, #0
    2f8a:	d0ef      	beq.n	2f6c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2f8c:	00a4      	lsls	r4, r4, #2
    2f8e:	f3c4 0408 	ubfx	r4, r4, #0, #9
    2f92:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    2f94:	1c5a      	adds	r2, r3, #1
    2f96:	d002      	beq.n	2f9e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    2f98:	2001      	movs	r0, #1
  *value = next;
    2f9a:	602b      	str	r3, [r5, #0]
}
    2f9c:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    2f9e:	2000      	movs	r0, #0
}
    2fa0:	bd38      	pop	{r3, r4, r5, pc}
    2fa2:	bf00      	nop

00002fa4 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2fa4:	2901      	cmp	r1, #1
    2fa6:	d91b      	bls.n	2fe0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    2fa8:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2faa:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2fae:	460c      	mov	r4, r1
    2fb0:	3301      	adds	r3, #1
    2fb2:	428b      	cmp	r3, r1
    2fb4:	d201      	bcs.n	2fba <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
    2fb6:	2000      	movs	r0, #0
}
    2fb8:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2fba:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    2fbe:	4615      	mov	r5, r2
    2fc0:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2fc4:	2201      	movs	r2, #1
    2fc6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2fca:	f004 f827 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2fce:	4603      	mov	r3, r0
    2fd0:	2800      	cmp	r0, #0
    2fd2:	d0f0      	beq.n	2fb6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    2fd4:	00a4      	lsls	r4, r4, #2
  return true;
    2fd6:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    2fd8:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    2fdc:	511d      	str	r5, [r3, r4]
}
    2fde:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    2fe0:	2000      	movs	r0, #0
}
    2fe2:	4770      	bx	lr

00002fe4 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    2fe4:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2fe8:	3301      	adds	r3, #1
    2fea:	4299      	cmp	r1, r3
    2fec:	d901      	bls.n	2ff2 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

fail:
  return false;
}
    2fee:	2000      	movs	r0, #0
    2ff0:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    2ff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ff6:	4605      	mov	r5, r0
    2ff8:	b083      	sub	sp, #12
    2ffa:	460c      	mov	r4, r1
    2ffc:	f500 7904 	add.w	r9, r0, #528	; 0x210
    3000:	460f      	mov	r7, r1
    3002:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3006:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    300a:	2200      	movs	r2, #0
    300c:	4648      	mov	r0, r9
    300e:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    3012:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    3016:	f004 f801 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    301a:	b190      	cbz	r0, 3042 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    301c:	00a3      	lsls	r3, r4, #2
    301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    3022:	58c2      	ldr	r2, [r0, r3]
    3024:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    3026:	1c53      	adds	r3, r2, #1
    3028:	bf16      	itet	ne
    302a:	4616      	movne	r6, r2
    302c:	f04f 0a00 	moveq.w	sl, #0
    3030:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3034:	2c01      	cmp	r4, #1
    3036:	d904      	bls.n	3042 <ExFatPartition::freeChain(unsigned long)+0x5e>
    3038:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    303c:	3201      	adds	r2, #1
    303e:	4294      	cmp	r4, r2
    3040:	d903      	bls.n	304a <ExFatPartition::freeChain(unsigned long)+0x66>
}
    3042:	2000      	movs	r0, #0
    3044:	b003      	add	sp, #12
    3046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    304a:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    304e:	2201      	movs	r2, #1
    3050:	4648      	mov	r0, r9
    3052:	4459      	add	r1, fp
    3054:	f003 ffe2 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    3058:	2800      	cmp	r0, #0
    305a:	d0f2      	beq.n	3042 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    305c:	9b01      	ldr	r3, [sp, #4]
    305e:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    3062:	f1ba 0f00 	cmp.w	sl, #0
    3066:	d012      	beq.n	308e <ExFatPartition::freeChain(unsigned long)+0xaa>
    3068:	3401      	adds	r4, #1
    306a:	42b4      	cmp	r4, r6
    306c:	d008      	beq.n	3080 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    306e:	2300      	movs	r3, #0
    3070:	1be2      	subs	r2, r4, r7
    3072:	4639      	mov	r1, r7
    3074:	4628      	mov	r0, r5
    3076:	f7ff fe99 	bl	2dac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    307a:	2800      	cmp	r0, #0
    307c:	d0e1      	beq.n	3042 <ExFatPartition::freeChain(unsigned long)+0x5e>
    307e:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    3080:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    3084:	3301      	adds	r3, #1
    3086:	42b3      	cmp	r3, r6
    3088:	d3db      	bcc.n	3042 <ExFatPartition::freeChain(unsigned long)+0x5e>
    308a:	4634      	mov	r4, r6
    308c:	e7bb      	b.n	3006 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    308e:	1c62      	adds	r2, r4, #1
    3090:	4653      	mov	r3, sl
    3092:	4639      	mov	r1, r7
    3094:	4628      	mov	r0, r5
    3096:	1bd2      	subs	r2, r2, r7
}
    3098:	b003      	add	sp, #12
    309a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    309e:	f7ff be85 	b.w	2dac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    30a2:	bf00      	nop

000030a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    30a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    30a6:	f04f 0c00 	mov.w	ip, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    30aa:	4615      	mov	r5, r2
    m_sector = 0XFFFFFFFF;
    30ac:	f04f 32ff 	mov.w	r2, #4294967295
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    30b0:	4604      	mov	r4, r0
  m_fatType = 0;
    30b2:	f880 c444 	strb.w	ip, [r0, #1092]	; 0x444
  m_blockDev = dev;
    30b6:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    30ba:	6041      	str	r1, [r0, #4]
    30bc:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    m_status = 0;
    30c0:	f880 c000 	strb.w	ip, [r0]
    30c4:	f880 c210 	strb.w	ip, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    30c8:	6082      	str	r2, [r0, #8]
    30ca:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
  if (part) {
    30ce:	b1e5      	cbz	r5, 310a <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    30d0:	2d04      	cmp	r5, #4
    30d2:	d901      	bls.n	30d8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    30d4:	2000      	movs	r0, #0
}
    30d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30d8:	f500 7704 	add.w	r7, r0, #528	; 0x210
    30dc:	4662      	mov	r2, ip
    30de:	4661      	mov	r1, ip
    30e0:	4638      	mov	r0, r7
    30e2:	f003 ff9b 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    30e6:	2800      	cmp	r0, #0
    30e8:	d0f4      	beq.n	30d4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    MbrPart_t* mp = mbr->part + part - 1;
    30ea:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    30ee:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    30f2:	442b      	add	r3, r5
    30f4:	0119      	lsls	r1, r3, #4
    30f6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    30fa:	791a      	ldrb	r2, [r3, #4]
    30fc:	2a00      	cmp	r2, #0
    30fe:	d0e9      	beq.n	30d4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    3100:	5c42      	ldrb	r2, [r0, r1]
    3102:	0652      	lsls	r2, r2, #25
    3104:	d1e6      	bne.n	30d4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  return *reinterpret_cast<const uint32_t*>(src);
    3106:	689e      	ldr	r6, [r3, #8]
    3108:	e002      	b.n	3110 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    310a:	461e      	mov	r6, r3
    310c:	f500 7704 	add.w	r7, r0, #528	; 0x210
    3110:	2200      	movs	r2, #0
    3112:	4631      	mov	r1, r6
    3114:	4638      	mov	r0, r7
    3116:	f003 ff81 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    311a:	4605      	mov	r5, r0
    311c:	2800      	cmp	r0, #0
    311e:	d0d9      	beq.n	30d4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    3120:	2205      	movs	r2, #5
    3122:	491a      	ldr	r1, [pc, #104]	; (318c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe8>)
    3124:	3003      	adds	r0, #3
    3126:	f008 fc23 	bl	b970 <strncmp>
    312a:	2800      	cmp	r0, #0
    312c:	d1d2      	bne.n	30d4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    312e:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    3132:	2b09      	cmp	r3, #9
    3134:	d1ce      	bne.n	30d4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3136:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  bitmapFind(0, 1);
    3138:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    313a:	4433      	add	r3, r6
    313c:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    3140:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    3142:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3146:	6dab      	ldr	r3, [r5, #88]	; 0x58
    3148:	4433      	add	r3, r6
    314a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    314e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    3150:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    3154:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3156:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    315a:	f895 206d 	ldrb.w	r2, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    315e:	2501      	movs	r5, #1
  m_bitmapStart = 0;
    3160:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    3164:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3166:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    316a:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    316e:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    3172:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3174:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    3178:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    317c:	462a      	mov	r2, r5
    317e:	f7ff fdb5 	bl	2cec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    3182:	2340      	movs	r3, #64	; 0x40
  return true;
    3184:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    3186:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    318a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    318c:	20000564 	.word	0x20000564

00003190 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    3190:	b510      	push	{r4, lr}
    3192:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    3194:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    3198:	f7ff fe5e 	bl	2e58 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    319c:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    31a0:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    31a2:	b2db      	uxtb	r3, r3
}
    31a4:	4098      	lsls	r0, r3
    31a6:	bd10      	pop	{r4, pc}

000031a8 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    31a8:	b570      	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    31aa:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    31ae:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    31b0:	2300      	movs	r3, #0
    31b2:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    31b4:	4668      	mov	r0, sp
    31b6:	4621      	mov	r1, r4
    31b8:	930c      	str	r3, [sp, #48]	; 0x30
    31ba:	f7ff f8f7 	bl	23ac <ExFatFile::open(ExFatFile*, char const*, int)>
    31be:	4605      	mov	r5, r0
    31c0:	b1d8      	cbz	r0, 31fa <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    31c2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    31c6:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    31ca:	d019      	beq.n	3200 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    31cc:	46ee      	mov	lr, sp
    31ce:	46a4      	mov	ip, r4
    31d0:	ae0c      	add	r6, sp, #48	; 0x30
    31d2:	4674      	mov	r4, lr
    31d4:	f10c 0c10 	add.w	ip, ip, #16
    31d8:	f10e 0e10 	add.w	lr, lr, #16
    31dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    31de:	42b4      	cmp	r4, r6
    31e0:	f84c 0c10 	str.w	r0, [ip, #-16]
    31e4:	f84c 1c0c 	str.w	r1, [ip, #-12]
    31e8:	f84c 2c08 	str.w	r2, [ip, #-8]
    31ec:	f84c 3c04 	str.w	r3, [ip, #-4]
    31f0:	d1ef      	bne.n	31d2 <ExFatVolume::chdir(char const*)+0x2a>
    31f2:	f8de 0000 	ldr.w	r0, [lr]
    31f6:	f8cc 0000 	str.w	r0, [ip]
  return true;

fail:
  return false;
}
    31fa:	4628      	mov	r0, r5
    31fc:	b00e      	add	sp, #56	; 0x38
    31fe:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    3200:	461d      	mov	r5, r3
}
    3202:	4628      	mov	r0, r5
    3204:	b00e      	add	sp, #56	; 0x38
    3206:	bd70      	pop	{r4, r5, r6, pc}

00003208 <FatFile::sync() [clone .part.0]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    3208:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    320a:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    320e:	b082      	sub	sp, #8
    3210:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    3212:	2b00      	cmp	r3, #0
    3214:	db0d      	blt.n	3232 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    3216:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3218:	f105 0024 	add.w	r0, r5, #36	; 0x24
    321c:	f003 fed2 	bl	6fc4 <FsCache::sync()>
    3220:	2800      	cmp	r0, #0
    3222:	d13f      	bne.n	32a4 <FatFile::sync() [clone .part.0]+0x9c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    3224:	7863      	ldrb	r3, [r4, #1]
  return false;
    3226:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3228:	f043 0301 	orr.w	r3, r3, #1
    322c:	7063      	strb	r3, [r4, #1]
}
    322e:	b002      	add	sp, #8
    3230:	bd70      	pop	{r4, r5, r6, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    3232:	6880      	ldr	r0, [r0, #8]
    3234:	2201      	movs	r2, #1
    3236:	69a1      	ldr	r1, [r4, #24]
    3238:	3024      	adds	r0, #36	; 0x24
    323a:	f003 feef 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    323e:	2800      	cmp	r0, #0
    3240:	d0f0      	beq.n	3224 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    3242:	88a5      	ldrh	r5, [r4, #4]
    3244:	f005 050f 	and.w	r5, r5, #15
    3248:	016b      	lsls	r3, r5, #5
    324a:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    324e:	5cc3      	ldrb	r3, [r0, r3]
    3250:	2be5      	cmp	r3, #229	; 0xe5
    3252:	d0e7      	beq.n	3224 <FatFile::sync() [clone .part.0]+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    3254:	7823      	ldrb	r3, [r4, #0]
    3256:	f003 0337 	and.w	r3, r3, #55	; 0x37
    325a:	72eb      	strb	r3, [r5, #11]
    if (isFile()) {
    325c:	7823      	ldrb	r3, [r4, #0]
    325e:	071b      	lsls	r3, r3, #28
    3260:	d501      	bpl.n	3266 <FatFile::sync() [clone .part.0]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    3262:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    3264:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    3266:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    3268:	4915      	ldr	r1, [pc, #84]	; (32c0 <FatFile::sync() [clone .part.0]+0xb8>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    326a:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    326c:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    326e:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    3270:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    3272:	b166      	cbz	r6, 328e <FatFile::sync() [clone .part.0]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    3274:	f10d 0203 	add.w	r2, sp, #3
    3278:	f10d 0106 	add.w	r1, sp, #6
    327c:	a801      	add	r0, sp, #4
    327e:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    3280:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3284:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3288:	832b      	strh	r3, [r5, #24]
    328a:	826b      	strh	r3, [r5, #18]
    328c:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    328e:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    3290:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    3292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3296:	f105 0024 	add.w	r0, r5, #36	; 0x24
    329a:	70a3      	strb	r3, [r4, #2]
    329c:	f003 fe92 	bl	6fc4 <FsCache::sync()>
    32a0:	2800      	cmp	r0, #0
    32a2:	d0bf      	beq.n	3224 <FatFile::sync() [clone .part.0]+0x1c>
    32a4:	f505 700d 	add.w	r0, r5, #564	; 0x234
    32a8:	f003 fe8c 	bl	6fc4 <FsCache::sync()>
    32ac:	2800      	cmp	r0, #0
    32ae:	d0b9      	beq.n	3224 <FatFile::sync() [clone .part.0]+0x1c>
    32b0:	6828      	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    32b2:	6803      	ldr	r3, [r0, #0]
    32b4:	69db      	ldr	r3, [r3, #28]
    32b6:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    32b8:	2800      	cmp	r0, #0
    32ba:	d0b3      	beq.n	3224 <FatFile::sync() [clone .part.0]+0x1c>
    32bc:	e7b7      	b.n	322e <FatFile::sync() [clone .part.0]+0x26>
    32be:	bf00      	nop
    32c0:	2001e06c 	.word	0x2001e06c

000032c4 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    32c4:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    32c6:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    32c8:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    32cc:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    32ce:	6880      	ldr	r0, [r0, #8]
    32d0:	4629      	mov	r1, r5
    32d2:	f001 f941 	bl	4558 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    32d6:	b150      	cbz	r0, 32ee <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    32d8:	b155      	cbz	r5, 32f0 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    32da:	6923      	ldr	r3, [r4, #16]
    32dc:	3501      	adds	r5, #1
    32de:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    32e0:	78a3      	ldrb	r3, [r4, #2]
    32e2:	bf18      	it	ne
    32e4:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    32e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    32ec:	70a3      	strb	r3, [r4, #2]
}
    32ee:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    32f0:	78a3      	ldrb	r3, [r4, #2]
    32f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    32f6:	e7f7      	b.n	32e8 <FatFile::addCluster()+0x24>

000032f8 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    32f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    32fa:	7804      	ldrb	r4, [r0, #0]
    32fc:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    3300:	d104      	bne.n	330c <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL * 4095) {
    3302:	4b1a      	ldr	r3, [pc, #104]	; (336c <FatFile::addDirCluster()+0x74>)
    3304:	4605      	mov	r5, r0
    3306:	6942      	ldr	r2, [r0, #20]
    3308:	429a      	cmp	r2, r3
    330a:	d302      	bcc.n	3312 <FatFile::addDirCluster()+0x1a>
  return false;
    330c:	2700      	movs	r7, #0
}
    330e:	4638      	mov	r0, r7
    3310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    3312:	f7ff ffd7 	bl	32c4 <FatFile::addCluster()>
    3316:	4607      	mov	r7, r0
    3318:	2800      	cmp	r0, #0
    331a:	d0f7      	beq.n	330c <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    331c:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    331e:	692e      	ldr	r6, [r5, #16]
    3320:	7982      	ldrb	r2, [r0, #6]
    3322:	3e02      	subs	r6, #2
    3324:	6941      	ldr	r1, [r0, #20]
    3326:	4096      	lsls	r6, r2
    3328:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    332a:	7901      	ldrb	r1, [r0, #4]
    332c:	b1a9      	cbz	r1, 335a <FatFile::addDirCluster()+0x62>
    332e:	4621      	mov	r1, r4
    3330:	e006      	b.n	3340 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    3332:	f008 facb 	bl	b8cc <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    3336:	68a8      	ldr	r0, [r5, #8]
    3338:	b2e1      	uxtb	r1, r4
    333a:	7902      	ldrb	r2, [r0, #4]
    333c:	428a      	cmp	r2, r1
    333e:	d90b      	bls.n	3358 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    3340:	4431      	add	r1, r6
    3342:	2205      	movs	r2, #5
    3344:	3024      	adds	r0, #36	; 0x24
    3346:	3401      	adds	r4, #1
    3348:	f003 fe68 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    334c:	f44f 7200 	mov.w	r2, #512	; 0x200
    3350:	2100      	movs	r1, #0
    if (!pc) {
    3352:	2800      	cmp	r0, #0
    3354:	d1ed      	bne.n	3332 <FatFile::addDirCluster()+0x3a>
    3356:	e7d9      	b.n	330c <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    3358:	7982      	ldrb	r2, [r0, #6]
    335a:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    335e:	6969      	ldr	r1, [r5, #20]
}
    3360:	4638      	mov	r0, r7
    3362:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    3364:	fa11 f383 	uxtah	r3, r1, r3
    3368:	616b      	str	r3, [r5, #20]
}
    336a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    336c:	001ffe00 	.word	0x001ffe00

00003370 <FatFile::close()>:
bool FatFile::close() {
    3370:	b510      	push	{r4, lr}
  if (!isOpen()) {
    3372:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    3374:	4604      	mov	r4, r0
  if (!isOpen()) {
    3376:	b12b      	cbz	r3, 3384 <FatFile::close()+0x14>
    3378:	f7ff ff46 	bl	3208 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    337c:	2300      	movs	r3, #0
    337e:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3380:	70a3      	strb	r3, [r4, #2]
}
    3382:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    3384:	2300      	movs	r3, #0
    return true;
    3386:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    3388:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    338a:	70a3      	strb	r3, [r4, #2]
}
    338c:	bd10      	pop	{r4, pc}
    338e:	bf00      	nop

00003390 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    3390:	780b      	ldrb	r3, [r1, #0]
    3392:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    3396:	d101      	bne.n	339c <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    3398:	2000      	movs	r0, #0
    339a:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    339c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    339e:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    33a2:	b089      	sub	sp, #36	; 0x24
    33a4:	460d      	mov	r5, r1
    33a6:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    33a8:	f000 fe70 	bl	408c <FatFile::open(FatFile*, FatLfn_t*, int)>
    33ac:	b138      	cbz	r0, 33be <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    33ae:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    33b0:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    33b2:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    33b4:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    33b6:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    33b8:	f7ff ff9e 	bl	32f8 <FatFile::addDirCluster()>
    33bc:	b910      	cbnz	r0, 33c4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    33be:	2000      	movs	r0, #0
    33c0:	b009      	add	sp, #36	; 0x24
    33c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    33c4:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    33c6:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    33c8:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    33ca:	b16b      	cbz	r3, 33e8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    33cc:	6963      	ldr	r3, [r4, #20]
    33ce:	b133      	cbz	r3, 33de <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    33d0:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    33d2:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    33d4:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    33d8:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    33dc:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    33de:	4620      	mov	r0, r4
    33e0:	f7ff ff12 	bl	3208 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    33e4:	2800      	cmp	r0, #0
    33e6:	d0ea      	beq.n	33be <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    return m_cache.prepare(sector, options);
    33e8:	68a0      	ldr	r0, [r4, #8]
    33ea:	2201      	movs	r2, #1
    33ec:	69a1      	ldr	r1, [r4, #24]
    33ee:	3024      	adds	r0, #36	; 0x24
    33f0:	f003 fe14 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    33f4:	2800      	cmp	r0, #0
    33f6:	d0e2      	beq.n	33be <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    33f8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FS_ATTRIB_DIRECTORY;
    33fc:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    33fe:	f00c 0c0f 	and.w	ip, ip, #15
    3402:	ea4f 134c 	mov.w	r3, ip, lsl #5
    3406:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FS_ATTRIB_DIRECTORY;
    340a:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    340e:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    3410:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3412:	6a23      	ldr	r3, [r4, #32]
    3414:	f897 e006 	ldrb.w	lr, [r7, #6]
    3418:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    341a:	f8dc 1004 	ldr.w	r1, [ip, #4]
    341e:	f8dc 2008 	ldr.w	r2, [ip, #8]
    3422:	f8dc 300c 	ldr.w	r3, [ip, #12]
    3426:	fa06 f60e 	lsl.w	r6, r6, lr
    342a:	46ee      	mov	lr, sp
    342c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3430:	f8dc 0010 	ldr.w	r0, [ip, #16]
    3434:	f8dc 1014 	ldr.w	r1, [ip, #20]
    3438:	f8dc 2018 	ldr.w	r2, [ip, #24]
    343c:	f8dc 301c 	ldr.w	r3, [ip, #28]
    3440:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    3444:	697b      	ldr	r3, [r7, #20]
    3446:	f107 0024 	add.w	r0, r7, #36	; 0x24
    344a:	2201      	movs	r2, #1
    344c:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    344e:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    3452:	f8cd 3001 	str.w	r3, [sp, #1]
    3456:	f8cd 3005 	str.w	r3, [sp, #5]
    345a:	f8ad 3009 	strh.w	r3, [sp, #9]
    345e:	f003 fddd 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3462:	4684      	mov	ip, r0
    3464:	2800      	cmp	r0, #0
    3466:	d0aa      	beq.n	33be <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    3468:	272e      	movs	r7, #46	; 0x2e
    346a:	46ee      	mov	lr, sp
    346c:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    3470:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    3472:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3476:	f8cc 0000 	str.w	r0, [ip]
    347a:	f8cc 1004 	str.w	r1, [ip, #4]
    347e:	f8cc 2008 	str.w	r2, [ip, #8]
    3482:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    3486:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    348a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    348e:	f8cc 0010 	str.w	r0, [ip, #16]
    3492:	f8cc 1014 	str.w	r1, [ip, #20]
    3496:	f8cc 2018 	str.w	r2, [ip, #24]
    349a:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    349e:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    34a0:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    34a2:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    34a6:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    34aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    34ac:	f8cc 0020 	str.w	r0, [ip, #32]
    34b0:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    34b4:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    34b8:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    34bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    34be:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    34c2:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    34c6:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    34ca:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    34ce:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    34d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
    34d4:	f003 fd76 	bl	6fc4 <FsCache::sync()>
    34d8:	2800      	cmp	r0, #0
    34da:	f43f af70 	beq.w	33be <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    34de:	f504 700d 	add.w	r0, r4, #564	; 0x234
    34e2:	f003 fd6f 	bl	6fc4 <FsCache::sync()>
    34e6:	2800      	cmp	r0, #0
    34e8:	f43f af69 	beq.w	33be <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    34ec:	6820      	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    34ee:	6803      	ldr	r3, [r0, #0]
    34f0:	69db      	ldr	r3, [r3, #28]
}
    34f2:	b009      	add	sp, #36	; 0x24
    34f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    34f8:	4718      	bx	r3
    34fa:	bf00      	nop

000034fc <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    34fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3500:	2600      	movs	r6, #0
    3502:	b094      	sub	sp, #80	; 0x50
    3504:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    3506:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    3508:	9201      	str	r2, [sp, #4]
    350a:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    350c:	2b00      	cmp	r3, #0
    350e:	d141      	bne.n	3594 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    3510:	780b      	ldrb	r3, [r1, #0]
    3512:	460d      	mov	r5, r1
    3514:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    3518:	d03c      	beq.n	3594 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
  if (isDirSeparator(*path)) {
    351a:	7813      	ldrb	r3, [r2, #0]
    351c:	4604      	mov	r4, r0
    351e:	4616      	mov	r6, r2
    3520:	2b2f      	cmp	r3, #47	; 0x2f
    3522:	d03b      	beq.n	359c <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!open(parent, &fname, O_RDONLY)) {
    3524:	2700      	movs	r7, #0
    3526:	e028      	b.n	357a <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
    if (!*path) {
    3528:	9e01      	ldr	r6, [sp, #4]
    352a:	7836      	ldrb	r6, [r6, #0]
    352c:	2e00      	cmp	r6, #0
    352e:	d04e      	beq.n	35ce <FatFile::mkdir(FatFile*, char const*, bool)+0xd2>
    if (!open(parent, &fname, O_RDONLY)) {
    3530:	f000 fdac 	bl	408c <FatFile::open(FatFile*, FatLfn_t*, int)>
    3534:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    3536:	aa03      	add	r2, sp, #12
    3538:	4629      	mov	r1, r5
    353a:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    353c:	b92b      	cbnz	r3, 354a <FatFile::mkdir(FatFile*, char const*, bool)+0x4e>
      if (!pFlag || !mkdir(parent, &fname)) {
    353e:	f1b8 0f00 	cmp.w	r8, #0
    3542:	d027      	beq.n	3594 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    3544:	f7ff ff24 	bl	3390 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    3548:	b320      	cbz	r0, 3594 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    tmpDir = *this;
    354a:	46a6      	mov	lr, r4
    354c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    3550:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3554:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3558:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    355c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3560:	f8de 5000 	ldr.w	r5, [lr]
    3564:	4620      	mov	r0, r4
  if (!isOpen()) {
    3566:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    3568:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    356c:	b10b      	cbz	r3, 3572 <FatFile::mkdir(FatFile*, char const*, bool)+0x76>
    356e:	f7ff fe4b 	bl	3208 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    3572:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    3574:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    3576:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    3578:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    357a:	4631      	mov	r1, r6
    357c:	ab01      	add	r3, sp, #4
    357e:	aa03      	add	r2, sp, #12
    3580:	4620      	mov	r0, r4
    3582:	f000 fed3 	bl	432c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    3586:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    3588:	aa03      	add	r2, sp, #12
    358a:	4629      	mov	r1, r5
    358c:	2300      	movs	r3, #0
    358e:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    3590:	2e00      	cmp	r6, #0
    3592:	d1c9      	bne.n	3528 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  switch (vol->fatType()) {
    3594:	2000      	movs	r0, #0
}
    3596:	b014      	add	sp, #80	; 0x50
    3598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    359c:	3601      	adds	r6, #1
    359e:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    35a0:	7833      	ldrb	r3, [r6, #0]
    35a2:	2b2f      	cmp	r3, #47	; 0x2f
    35a4:	d0fa      	beq.n	359c <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!tmpDir.openRoot(parent->m_vol)) {
    35a6:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    35a8:	2224      	movs	r2, #36	; 0x24
    35aa:	2100      	movs	r1, #0
    35ac:	a80b      	add	r0, sp, #44	; 0x2c
    35ae:	f008 f98d 	bl	b8cc <memset>
  m_vol = vol;
    35b2:	950d      	str	r5, [sp, #52]	; 0x34
  uint8_t fatType() const { return m_fatType; }
    35b4:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    35b6:	2b10      	cmp	r3, #16
    35b8:	d00f      	beq.n	35da <FatFile::mkdir(FatFile*, char const*, bool)+0xde>
    35ba:	2b20      	cmp	r3, #32
    35bc:	d1ea      	bne.n	3594 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    35be:	2380      	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    35c0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    35c4:	2301      	movs	r3, #1
    parent = &tmpDir;
    35c6:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    35c8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    35cc:	e7aa      	b.n	3524 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
  return mkdir(parent, &fname);
    35ce:	aa03      	add	r2, sp, #12
    35d0:	f7ff fede 	bl	3390 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    35d4:	b014      	add	sp, #80	; 0x50
    35d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    35da:	2340      	movs	r3, #64	; 0x40
    35dc:	e7f0      	b.n	35c0 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    35de:	bf00      	nop

000035e0 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    35e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35e4:	2500      	movs	r5, #0
    35e6:	b094      	sub	sp, #80	; 0x50
    35e8:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    35ea:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    35ec:	9201      	str	r2, [sp, #4]
    35ee:	950b      	str	r5, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
    35f0:	2b00      	cmp	r3, #0
    35f2:	d137      	bne.n	3664 <FatFile::open(FatFile*, char const*, int)+0x84>
    35f4:	780b      	ldrb	r3, [r1, #0]
    35f6:	460e      	mov	r6, r1
    35f8:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    35fc:	d032      	beq.n	3664 <FatFile::open(FatFile*, char const*, int)+0x84>
  if (isDirSeparator(*path)) {
    35fe:	7813      	ldrb	r3, [r2, #0]
    3600:	4604      	mov	r4, r0
    3602:	4615      	mov	r5, r2
    3604:	2b2f      	cmp	r3, #47	; 0x2f
    3606:	d031      	beq.n	366c <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
    3608:	2700      	movs	r7, #0
    360a:	e01e      	b.n	364a <FatFile::open(FatFile*, char const*, int)+0x6a>
    if (*path == 0) {
    360c:	9d01      	ldr	r5, [sp, #4]
    360e:	782d      	ldrb	r5, [r5, #0]
    3610:	2d00      	cmp	r5, #0
    3612:	d042      	beq.n	369a <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    3614:	f000 fd3a 	bl	408c <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    3618:	46a6      	mov	lr, r4
    361a:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    if (!open(dirFile, &fname, O_RDONLY)) {
    361e:	b308      	cbz	r0, 3664 <FatFile::open(FatFile*, char const*, int)+0x84>
    dirFile = &tmpDir;
    3620:	4666      	mov	r6, ip
  if (!isOpen()) {
    3622:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    3624:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3628:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    362c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3630:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3634:	f8de 3000 	ldr.w	r3, [lr]
    3638:	4620      	mov	r0, r4
    363a:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    363e:	b10d      	cbz	r5, 3644 <FatFile::open(FatFile*, char const*, int)+0x64>
    3640:	f7ff fde2 	bl	3208 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    3644:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    3646:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    3648:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    364a:	4629      	mov	r1, r5
    364c:	ab01      	add	r3, sp, #4
    364e:	aa03      	add	r2, sp, #12
    3650:	4620      	mov	r0, r4
    3652:	f000 fe6b 	bl	432c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    3656:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    3658:	aa03      	add	r2, sp, #12
    365a:	4631      	mov	r1, r6
    365c:	2300      	movs	r3, #0
    365e:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    3660:	2d00      	cmp	r5, #0
    3662:	d1d3      	bne.n	360c <FatFile::open(FatFile*, char const*, int)+0x2c>
  return false;
    3664:	2000      	movs	r0, #0
}
    3666:	b014      	add	sp, #80	; 0x50
    3668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    366c:	3501      	adds	r5, #1
    366e:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    3670:	7829      	ldrb	r1, [r5, #0]
    3672:	292f      	cmp	r1, #47	; 0x2f
    3674:	d0fa      	beq.n	366c <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (*path == 0) {
    3676:	b9b9      	cbnz	r1, 36a8 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    3678:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    367a:	2224      	movs	r2, #36	; 0x24
    367c:	4620      	mov	r0, r4
    367e:	f008 f925 	bl	b8cc <memset>
  m_vol = vol;
    3682:	60a5      	str	r5, [r4, #8]
    3684:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    3686:	2b10      	cmp	r3, #16
    3688:	d024      	beq.n	36d4 <FatFile::open(FatFile*, char const*, int)+0xf4>
    368a:	2b20      	cmp	r3, #32
    368c:	d1ea      	bne.n	3664 <FatFile::open(FatFile*, char const*, int)+0x84>
    368e:	2280      	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    3690:	2301      	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    3692:	7022      	strb	r2, [r4, #0]
  return true;
    3694:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    3696:	70a3      	strb	r3, [r4, #2]
  return true;
    3698:	e7e5      	b.n	3666 <FatFile::open(FatFile*, char const*, int)+0x86>
  return open(dirFile, &fname, oflag);
    369a:	4643      	mov	r3, r8
    369c:	aa03      	add	r2, sp, #12
    369e:	f000 fcf5 	bl	408c <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    36a2:	b014      	add	sp, #80	; 0x50
    36a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    36a8:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    36aa:	2224      	movs	r2, #36	; 0x24
    36ac:	2100      	movs	r1, #0
    36ae:	a80b      	add	r0, sp, #44	; 0x2c
    36b0:	f008 f90c 	bl	b8cc <memset>
  m_vol = vol;
    36b4:	960d      	str	r6, [sp, #52]	; 0x34
    36b6:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    36b8:	2b10      	cmp	r3, #16
    36ba:	d009      	beq.n	36d0 <FatFile::open(FatFile*, char const*, int)+0xf0>
    36bc:	2b20      	cmp	r3, #32
    36be:	d1d1      	bne.n	3664 <FatFile::open(FatFile*, char const*, int)+0x84>
    36c0:	2380      	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    36c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    36c6:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    36c8:	ae0b      	add	r6, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    36ca:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    36ce:	e79b      	b.n	3608 <FatFile::open(FatFile*, char const*, int)+0x28>
  switch (vol->fatType()) {
    36d0:	2340      	movs	r3, #64	; 0x40
    36d2:	e7f6      	b.n	36c2 <FatFile::open(FatFile*, char const*, int)+0xe2>
    36d4:	2240      	movs	r2, #64	; 0x40
    36d6:	e7db      	b.n	3690 <FatFile::open(FatFile*, char const*, int)+0xb0>

000036d8 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    36d8:	b119      	cbz	r1, 36e2 <FatFile::open(FatVolume*, char const*, int)+0xa>
    36da:	f201 4144 	addw	r1, r1, #1092	; 0x444
    36de:	f7ff bf7f 	b.w	35e0 <FatFile::open(FatFile*, char const*, int)>
}
    36e2:	4608      	mov	r0, r1
    36e4:	4770      	bx	lr
    36e6:	bf00      	nop

000036e8 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    36e8:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    36ea:	7805      	ldrb	r5, [r0, #0]
    36ec:	b10d      	cbz	r5, 36f2 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    36ee:	2000      	movs	r0, #0
}
    36f0:	bd70      	pop	{r4, r5, r6, pc}
    36f2:	460e      	mov	r6, r1
    36f4:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    36f6:	2224      	movs	r2, #36	; 0x24
    36f8:	4629      	mov	r1, r5
    36fa:	f008 f8e7 	bl	b8cc <memset>
  m_vol = vol;
    36fe:	60a6      	str	r6, [r4, #8]
    3700:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    3702:	2b10      	cmp	r3, #16
    3704:	d009      	beq.n	371a <FatFile::openRoot(FatVolume*)+0x32>
    3706:	2b20      	cmp	r3, #32
    3708:	d105      	bne.n	3716 <FatFile::openRoot(FatVolume*)+0x2e>
    370a:	2280      	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    370c:	2301      	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    370e:	7022      	strb	r2, [r4, #0]
  return true;
    3710:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    3712:	70a3      	strb	r3, [r4, #2]
}
    3714:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    3716:	4628      	mov	r0, r5
}
    3718:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    371a:	2240      	movs	r2, #64	; 0x40
    371c:	e7f6      	b.n	370c <FatFile::openRoot(FatVolume*)+0x24>
    371e:	bf00      	nop

00003720 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    3720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3724:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const { return m_lfnOrd; }
  /** \return True if this is an open file/directory. */
  bool isOpen() const { return m_attributes; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    3728:	7883      	ldrb	r3, [r0, #2]
    372a:	b083      	sub	sp, #12
    372c:	4605      	mov	r5, r0
  if (!isReadable()) {
    372e:	07df      	lsls	r7, r3, #31
    3730:	f140 808c 	bpl.w	384c <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
    3734:	4688      	mov	r8, r1
    3736:	7801      	ldrb	r1, [r0, #0]
    3738:	4692      	mov	sl, r2
  if (isFile()) {
    373a:	070e      	lsls	r6, r1, #28
    373c:	f100 8091 	bmi.w	3862 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    3740:	064c      	lsls	r4, r1, #25
    3742:	d508      	bpl.n	3756 <FatFile::read(void*, unsigned int)+0x36>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    3744:	6883      	ldr	r3, [r0, #8]
    3746:	891a      	ldrh	r2, [r3, #8]
    3748:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    374a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    374e:	b29b      	uxth	r3, r3
    3750:	459a      	cmp	sl, r3
    3752:	bf28      	it	cs
    3754:	469a      	movcs	sl, r3
  while (toRead) {
    3756:	f1ba 0f00 	cmp.w	sl, #0
    375a:	f000 80af 	beq.w	38bc <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    375e:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3760:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    3764:	0648      	lsls	r0, r1, #25
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3766:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    3768:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    376c:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    3770:	68af      	ldr	r7, [r5, #8]
    3772:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    3776:	d53d      	bpl.n	37f4 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart() +
    3778:	6a39      	ldr	r1, [r7, #32]
    377a:	eb01 2152 	add.w	r1, r1, r2, lsr #9
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    377e:	f1bb 0f00 	cmp.w	fp, #0
    3782:	d151      	bne.n	3828 <FatFile::read(void*, unsigned int)+0x108>
    3784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3788:	d34e      	bcc.n	3828 <FatFile::read(void*, unsigned int)+0x108>
  uint32_t sector() { return m_sector; }
    378a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    378c:	4291      	cmp	r1, r2
    378e:	d04b      	beq.n	3828 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    3790:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    3794:	f0c0 8082 	bcc.w	389c <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    3798:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    379a:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    379c:	0640      	lsls	r0, r0, #25
    379e:	d405      	bmi.n	37ac <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    37a0:	7938      	ldrb	r0, [r7, #4]
    37a2:	eba0 0009 	sub.w	r0, r0, r9
    37a6:	4283      	cmp	r3, r0
    37a8:	bf28      	it	cs
    37aa:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    37ac:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    37ae:	ea4f 2443 	mov.w	r4, r3, lsl #9
    37b2:	d80c      	bhi.n	37ce <FatFile::read(void*, unsigned int)+0xae>
    37b4:	18c8      	adds	r0, r1, r3
    37b6:	4282      	cmp	r2, r0
    37b8:	d209      	bcs.n	37ce <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    37ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
    37be:	e9cd 1300 	strd	r1, r3, [sp]
    37c2:	f003 fbff 	bl	6fc4 <FsCache::sync()>
    37c6:	e9dd 1300 	ldrd	r1, r3, [sp]
    37ca:	2800      	cmp	r0, #0
    37cc:	d03e      	beq.n	384c <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    37ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    37d0:	6802      	ldr	r2, [r0, #0]
    37d2:	6957      	ldr	r7, [r2, #20]
    37d4:	4642      	mov	r2, r8
    37d6:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    37d8:	2800      	cmp	r0, #0
    37da:	d037      	beq.n	384c <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    37dc:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    37de:	1b36      	subs	r6, r6, r4
    dst += n;
    37e0:	44a0      	add	r8, r4
    m_curPosition += n;
    37e2:	4422      	add	r2, r4
    37e4:	616a      	str	r2, [r5, #20]
  while (toRead) {
    37e6:	d069      	beq.n	38bc <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const { return m_attributes & FILE_ATTR_ROOT32; }
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
    37e8:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    37ea:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    37ee:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    37f0:	0648      	lsls	r0, r1, #25
    37f2:	d4c1      	bmi.n	3778 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    37f4:	f897 9005 	ldrb.w	r9, [r7, #5]
    37f8:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    37fc:	f1bb 0f00 	cmp.w	fp, #0
    3800:	d136      	bne.n	3870 <FatFile::read(void*, unsigned int)+0x150>
    3802:	f1b9 0f00 	cmp.w	r9, #0
    3806:	d133      	bne.n	3870 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    3808:	2a00      	cmp	r2, #0
    380a:	d133      	bne.n	3874 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    380c:	060a      	lsls	r2, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    380e:	bf4c      	ite	mi
    3810:	6a3a      	ldrmi	r2, [r7, #32]
    3812:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    3814:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3816:	3a02      	subs	r2, #2
    3818:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    381a:	6979      	ldr	r1, [r7, #20]
    381c:	4082      	lsls	r2, r0
    381e:	4449      	add	r1, r9
    3820:	4411      	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    3822:	f1bb 0f00 	cmp.w	fp, #0
    3826:	d0ad      	beq.n	3784 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    3828:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    382c:	2200      	movs	r2, #0
    382e:	f107 0024 	add.w	r0, r7, #36	; 0x24
    3832:	42b4      	cmp	r4, r6
    3834:	bf28      	it	cs
    3836:	4634      	movcs	r4, r6
    3838:	f003 fbf0 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    383c:	b130      	cbz	r0, 384c <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    383e:	eb00 010b 	add.w	r1, r0, fp
    3842:	4622      	mov	r2, r4
    3844:	4640      	mov	r0, r8
    3846:	f004 fb75 	bl	7f34 <memcpy>
    384a:	e7c7      	b.n	37dc <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    384c:	786b      	ldrb	r3, [r5, #1]
  return -1;
    384e:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    3852:	f043 0302 	orr.w	r3, r3, #2
    3856:	706b      	strb	r3, [r5, #1]
}
    3858:	b003      	add	sp, #12
    385a:	ecbd 8b02 	vpop	{d8}
    385e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3862:	69c3      	ldr	r3, [r0, #28]
    3864:	6942      	ldr	r2, [r0, #20]
    3866:	1a9b      	subs	r3, r3, r2
    3868:	459a      	cmp	sl, r3
    386a:	bf28      	it	cs
    386c:	469a      	movcs	sl, r3
    386e:	e772      	b.n	3756 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    3870:	692a      	ldr	r2, [r5, #16]
    3872:	e7d0      	b.n	3816 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    3874:	070b      	lsls	r3, r1, #28
    3876:	d505      	bpl.n	3884 <FatFile::read(void*, unsigned int)+0x164>
    3878:	78aa      	ldrb	r2, [r5, #2]
    387a:	0654      	lsls	r4, r2, #25
    387c:	d502      	bpl.n	3884 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    387e:	692a      	ldr	r2, [r5, #16]
    3880:	3201      	adds	r2, #1
    3882:	e7c7      	b.n	3814 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3884:	ee18 2a10 	vmov	r2, s16
    3888:	4638      	mov	r0, r7
    388a:	6929      	ldr	r1, [r5, #16]
    388c:	f000 fe1e 	bl	44cc <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3890:	2800      	cmp	r0, #0
    3892:	dbdb      	blt.n	384c <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    3894:	d00c      	beq.n	38b0 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3896:	68af      	ldr	r7, [r5, #8]
    3898:	692a      	ldr	r2, [r5, #16]
    389a:	e7bc      	b.n	3816 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    389c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    389e:	4642      	mov	r2, r8
    38a0:	6803      	ldr	r3, [r0, #0]
    38a2:	691b      	ldr	r3, [r3, #16]
    38a4:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    38a6:	2800      	cmp	r0, #0
    38a8:	d0d0      	beq.n	384c <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    38aa:	f44f 7400 	mov.w	r4, #512	; 0x200
    38ae:	e795      	b.n	37dc <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    38b0:	782b      	ldrb	r3, [r5, #0]
    38b2:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    38b6:	d0c9      	beq.n	384c <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    38b8:	ebaa 0a06 	sub.w	sl, sl, r6
    38bc:	4650      	mov	r0, sl
}
    38be:	b003      	add	sp, #12
    38c0:	ecbd 8b02 	vpop	{d8}
    38c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000038c8 <FatFile::peek()>:
int FatFile::peek() {
    38c8:	b570      	push	{r4, r5, r6, lr}
    38ca:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    38cc:	2201      	movs	r2, #1
    38ce:	4604      	mov	r4, r0
    38d0:	f10d 0107 	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    38d4:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    38d8:	f7ff ff22 	bl	3720 <FatFile::read(void*, unsigned int)>
    38dc:	2801      	cmp	r0, #1
    38de:	bf0c      	ite	eq
    38e0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    38e4:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    38e8:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    38ec:	b002      	add	sp, #8
    38ee:	bd70      	pop	{r4, r5, r6, pc}

000038f0 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    38f0:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    38f2:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    38f6:	b530      	push	{r4, r5, lr}
    38f8:	4604      	mov	r4, r0
    38fa:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    38fc:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    3900:	d009      	beq.n	3916 <FatFile::readDirCache(bool)+0x26>
    3902:	2901      	cmp	r1, #1
    3904:	d107      	bne.n	3916 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    3906:	3320      	adds	r3, #32
    3908:	6143      	str	r3, [r0, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    390a:	68a0      	ldr	r0, [r4, #8]
    390c:	3034      	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    390e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    3912:	b003      	add	sp, #12
    3914:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    3916:	2201      	movs	r2, #1
    3918:	f10d 0107 	add.w	r1, sp, #7
    391c:	4620      	mov	r0, r4
    391e:	f7ff feff 	bl	3720 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    3922:	b240      	sxtb	r0, r0
    3924:	2801      	cmp	r0, #1
    3926:	d103      	bne.n	3930 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    3928:	6963      	ldr	r3, [r4, #20]
    392a:	331f      	adds	r3, #31
    392c:	6163      	str	r3, [r4, #20]
    392e:	e7ec      	b.n	390a <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    3930:	2000      	movs	r0, #0
    3932:	e7ee      	b.n	3912 <FatFile::readDirCache(bool)+0x22>

00003934 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    3934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const { return m_attributes; }
    3938:	7803      	ldrb	r3, [r0, #0]
    393a:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    393c:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    393e:	2b00      	cmp	r3, #0
    3940:	d039      	beq.n	39b6 <FatFile::seekSet(unsigned long)+0x82>
    3942:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    3944:	6941      	ldr	r1, [r0, #20]
    3946:	42a9      	cmp	r1, r5
    3948:	d042      	beq.n	39d0 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    394a:	2d00      	cmp	r5, #0
    394c:	d037      	beq.n	39be <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    394e:	0718      	lsls	r0, r3, #28
    3950:	d52a      	bpl.n	39a8 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    3952:	69e2      	ldr	r2, [r4, #28]
    3954:	42aa      	cmp	r2, r5
    3956:	d32e      	bcc.n	39b6 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3958:	f8d4 c008 	ldr.w	ip, [r4, #8]
    395c:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    395e:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    3960:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    3964:	f012 0f40 	tst.w	r2, #64	; 0x40
    3968:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    396c:	b2c0      	uxtb	r0, r0
    396e:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    3972:	d130      	bne.n	39d6 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    3974:	1e4a      	subs	r2, r1, #1
    3976:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3978:	b109      	cbz	r1, 397e <FatFile::seekSet(unsigned long)+0x4a>
    397a:	4296      	cmp	r6, r2
    397c:	d22f      	bcs.n	39de <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    397e:	061b      	lsls	r3, r3, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    3980:	bf4c      	ite	mi
    3982:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    3986:	6a23      	ldrpl	r3, [r4, #32]
    3988:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    398a:	f104 0810 	add.w	r8, r4, #16
    398e:	e006      	b.n	399e <FatFile::seekSet(unsigned long)+0x6a>
    3990:	6921      	ldr	r1, [r4, #16]
    3992:	3e01      	subs	r6, #1
    3994:	68a0      	ldr	r0, [r4, #8]
    3996:	f000 fd99 	bl	44cc <FatPartition::fatGet(unsigned long, unsigned long*)>
    399a:	2800      	cmp	r0, #0
    399c:	dd0b      	ble.n	39b6 <FatFile::seekSet(unsigned long)+0x82>
    399e:	4642      	mov	r2, r8
  while (nNew--) {
    39a0:	2e00      	cmp	r6, #0
    39a2:	d1f5      	bne.n	3990 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    39a4:	78a2      	ldrb	r2, [r4, #2]
    39a6:	e00c      	b.n	39c2 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    39a8:	065a      	lsls	r2, r3, #25
    39aa:	d5d5      	bpl.n	3958 <FatFile::seekSet(unsigned long)+0x24>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
    39ac:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    39ae:	891b      	ldrh	r3, [r3, #8]
    39b0:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    39b4:	d9f6      	bls.n	39a4 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    39b6:	2000      	movs	r0, #0
  m_curCluster = tmp;
    39b8:	6127      	str	r7, [r4, #16]
}
    39ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39be:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    39c0:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    39c2:	f022 0220 	bic.w	r2, r2, #32
  return true;
    39c6:	2001      	movs	r0, #1
  m_curPosition = pos;
    39c8:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    39ca:	70a2      	strb	r2, [r4, #2]
}
    39cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    39d0:	2001      	movs	r0, #1
}
    39d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    39d6:	6a23      	ldr	r3, [r4, #32]
    39d8:	4433      	add	r3, r6
    39da:	6123      	str	r3, [r4, #16]
    goto done;
    39dc:	e7f1      	b.n	39c2 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    39de:	1ab6      	subs	r6, r6, r2
    39e0:	e7d3      	b.n	398a <FatFile::seekSet(unsigned long)+0x56>
    39e2:	bf00      	nop

000039e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    39e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39e8:	460e      	mov	r6, r1
    39ea:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    39ec:	2100      	movs	r1, #0
    39ee:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    39f0:	4604      	mov	r4, r0
    39f2:	4698      	mov	r8, r3
    39f4:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    39f8:	f007 ff68 	bl	b8cc <memset>
  m_vol = dirFile->m_vol;
    39fc:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    39fe:	6a33      	ldr	r3, [r6, #32]
    3a00:	f100 0234 	add.w	r2, r0, #52	; 0x34
  m_dirIndex = dirIndex;
    3a04:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    3a06:	f005 050f 	and.w	r5, r5, #15
    3a0a:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    3a0e:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFatFile(const DirFat_t* dir) {
  return (dir->attributes & (FS_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFatFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    3a12:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
    3a14:	070b      	lsls	r3, r1, #28
    3a16:	d411      	bmi.n	3a3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    3a18:	f001 0137 	and.w	r1, r1, #55	; 0x37
    3a1c:	7021      	strb	r1, [r4, #0]
  if (isFatFile(dir)) {
    3a1e:	7ad3      	ldrb	r3, [r2, #11]
    3a20:	f013 0f18 	tst.w	r3, #24
    3a24:	d102      	bne.n	3a2c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    3a26:	f041 0108 	orr.w	r1, r1, #8
    3a2a:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    3a2c:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    3a30:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    3a32:	2b01      	cmp	r3, #1
    3a34:	d03c      	beq.n	3ab0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xcc>
    3a36:	2b02      	cmp	r3, #2
    3a38:	d006      	beq.n	3a48 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    3a3a:	b313      	cbz	r3, 3a82 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
  m_attributes = FILE_ATTR_CLOSED;
    3a3c:	2300      	movs	r3, #0
  return false;
    3a3e:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    3a40:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3a42:	70a3      	strb	r3, [r4, #2]
}
    3a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3a48:	2303      	movs	r3, #3
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    3a4a:	7821      	ldrb	r1, [r4, #0]
      m_flags = FILE_FLAG_WRITE;
    3a4c:	70a3      	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    3a4e:	06cd      	lsls	r5, r1, #27
    3a50:	d4f4      	bmi.n	3a3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    3a52:	07ce      	lsls	r6, r1, #31
    3a54:	d4f2      	bmi.n	3a3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3a56:	f041 0120 	orr.w	r1, r1, #32
  if (oflag & O_TRUNC) {
    3a5a:	f418 6f80 	tst.w	r8, #1024	; 0x400
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3a5e:	7021      	strb	r1, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3a60:	f008 0108 	and.w	r1, r8, #8
    3a64:	ea43 0301 	orr.w	r3, r3, r1
    3a68:	70a3      	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
    3a6a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3a6c:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3a6e:	61a1      	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    3a70:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3a72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    3a76:	d012      	beq.n	3a9e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xba>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3a78:	bb19      	cbnz	r1, 3ac2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xde>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3a7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3a7e:	70a3      	strb	r3, [r4, #2]
    3a80:	e010      	b.n	3aa4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
      if (oflag & O_TRUNC) {
    3a82:	f418 6f80 	tst.w	r8, #1024	; 0x400
    3a86:	d1d9      	bne.n	3a3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3a88:	f008 0308 	and.w	r3, r8, #8
    3a8c:	f043 0301 	orr.w	r3, r3, #1
    3a90:	70a3      	strb	r3, [r4, #2]
    3a92:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3a94:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3a96:	61a1      	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    3a98:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3a9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    3a9e:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    3aa0:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    3aa2:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3aa4:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    3aa8:	d104      	bne.n	3ab4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
  return true;
    3aaa:	2001      	movs	r0, #1
}
    3aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3ab0:	2302      	movs	r3, #2
    3ab2:	e7ca      	b.n	3a4a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3ab4:	69e1      	ldr	r1, [r4, #28]
    3ab6:	4620      	mov	r0, r4
    3ab8:	f7ff ff3c 	bl	3934 <FatFile::seekSet(unsigned long)>
    3abc:	2800      	cmp	r0, #0
    3abe:	d1f4      	bne.n	3aaa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>
    3ac0:	e7bc      	b.n	3a3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3ac2:	f000 fd89 	bl	45d8 <FatPartition::freeChain(unsigned long)>
    3ac6:	2800      	cmp	r0, #0
    3ac8:	d0b8      	beq.n	3a3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3aca:	78a3      	ldrb	r3, [r4, #2]
    3acc:	e7d5      	b.n	3a7a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
    3ace:	bf00      	nop

00003ad0 <FatFile::sync()>:
  if (!isOpen()) {
    3ad0:	7803      	ldrb	r3, [r0, #0]
    3ad2:	b10b      	cbz	r3, 3ad8 <FatFile::sync()+0x8>
    3ad4:	f7ff bb98 	b.w	3208 <FatFile::sync() [clone .part.0]>
}
    3ad8:	2001      	movs	r0, #1
    3ada:	4770      	bx	lr

00003adc <FatFile::write(void const*, unsigned int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    3adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    3ae0:	7883      	ldrb	r3, [r0, #2]
    3ae2:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    3ae4:	079c      	lsls	r4, r3, #30
    3ae6:	d577      	bpl.n	3bd8 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3ae8:	4688      	mov	r8, r1
    3aea:	0719      	lsls	r1, r3, #28
    3aec:	4691      	mov	r9, r2
    3aee:	f100 80b5 	bmi.w	3c5c <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    3af2:	696b      	ldr	r3, [r5, #20]
    3af4:	eb13 0209 	adds.w	r2, r3, r9
    3af8:	d26e      	bcs.n	3bd8 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3afa:	f1b9 0f00 	cmp.w	r9, #0
    3afe:	d040      	beq.n	3b82 <FatFile::write(void const*, unsigned int)+0xa6>
    3b00:	464f      	mov	r7, r9
    m_status = 0;
    3b02:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    3b06:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    3b08:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3b0c:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    3b0e:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3b10:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    3b14:	d13f      	bne.n	3b96 <FatFile::write(void const*, unsigned int)+0xba>
    3b16:	2e00      	cmp	r6, #0
    3b18:	d13d      	bne.n	3b96 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    3b1a:	2900      	cmp	r1, #0
    3b1c:	d06e      	beq.n	3bfc <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    3b1e:	78aa      	ldrb	r2, [r5, #2]
    3b20:	0652      	lsls	r2, r2, #25
    3b22:	d576      	bpl.n	3c12 <FatFile::write(void const*, unsigned int)+0x136>
    3b24:	69ea      	ldr	r2, [r5, #28]
    3b26:	429a      	cmp	r2, r3
    3b28:	d973      	bls.n	3c12 <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    3b2a:	3101      	adds	r1, #1
    3b2c:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3b2e:	3902      	subs	r1, #2
    3b30:	7982      	ldrb	r2, [r0, #6]
    3b32:	6943      	ldr	r3, [r0, #20]
    3b34:	4091      	lsls	r1, r2
    3b36:	4419      	add	r1, r3
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3b38:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    3b3c:	d353      	bcc.n	3be6 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    3b3e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    3b42:	d370      	bcc.n	3c26 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3b44:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    3b46:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3b48:	1b1b      	subs	r3, r3, r4
    3b4a:	4293      	cmp	r3, r2
    3b4c:	bf28      	it	cs
    3b4e:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    3b50:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    3b52:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3b54:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3b58:	d307      	bcc.n	3b6a <FatFile::write(void const*, unsigned int)+0x8e>
    3b5a:	185e      	adds	r6, r3, r1
    3b5c:	42b2      	cmp	r2, r6
    3b5e:	d204      	bcs.n	3b6a <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    3b60:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    3b64:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3b68:	62c2      	str	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
    3b6a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3b6c:	4642      	mov	r2, r8
    3b6e:	6806      	ldr	r6, [r0, #0]
    3b70:	6a76      	ldr	r6, [r6, #36]	; 0x24
    3b72:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    3b74:	b380      	cbz	r0, 3bd8 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3b76:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    3b78:	1b3f      	subs	r7, r7, r4
    src += n;
    3b7a:	44a0      	add	r8, r4
    m_curPosition += n;
    3b7c:	4423      	add	r3, r4
    3b7e:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    3b80:	d1c1      	bne.n	3b06 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    3b82:	69ea      	ldr	r2, [r5, #28]
    3b84:	429a      	cmp	r2, r3
    3b86:	d276      	bcs.n	3c76 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3b88:	78aa      	ldrb	r2, [r5, #2]
    3b8a:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    3b8c:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3b8e:	f062 037f 	orn	r3, r2, #127	; 0x7f
    3b92:	70ab      	strb	r3, [r5, #2]
    3b94:	e025      	b.n	3be2 <FatFile::write(void const*, unsigned int)+0x106>
    3b96:	7982      	ldrb	r2, [r0, #6]
    3b98:	3902      	subs	r1, #2
    3b9a:	6943      	ldr	r3, [r0, #20]
    3b9c:	4091      	lsls	r1, r2
    3b9e:	4419      	add	r1, r3
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3ba0:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3ba2:	2e00      	cmp	r6, #0
    3ba4:	d0c8      	beq.n	3b38 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    3ba6:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3baa:	2201      	movs	r2, #1
    3bac:	42bc      	cmp	r4, r7
    3bae:	bf28      	it	cs
    3bb0:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    3bb2:	3024      	adds	r0, #36	; 0x24
    3bb4:	f003 fa32 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    3bb8:	b170      	cbz	r0, 3bd8 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    3bba:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3bbc:	4426      	add	r6, r4
      memcpy(dst, src, n);
    3bbe:	4622      	mov	r2, r4
    3bc0:	4641      	mov	r1, r8
    3bc2:	f004 f9b7 	bl	7f34 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3bc6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3bca:	68a8      	ldr	r0, [r5, #8]
    3bcc:	d1d3      	bne.n	3b76 <FatFile::write(void const*, unsigned int)+0x9a>
  bool cacheSyncData() { return m_cache.sync(); }
    3bce:	3024      	adds	r0, #36	; 0x24
    3bd0:	f003 f9f8 	bl	6fc4 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    3bd4:	2800      	cmp	r0, #0
    3bd6:	d1ce      	bne.n	3b76 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3bd8:	786b      	ldrb	r3, [r5, #1]
  return 0;
    3bda:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3bdc:	f043 0301 	orr.w	r3, r3, #1
    3be0:	706b      	strb	r3, [r5, #1]
}
    3be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3be6:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    3bea:	696a      	ldr	r2, [r5, #20]
    3bec:	69eb      	ldr	r3, [r5, #28]
    3bee:	42bc      	cmp	r4, r7
    3bf0:	bf28      	it	cs
    3bf2:	463c      	movcs	r4, r7
    3bf4:	429a      	cmp	r2, r3
    3bf6:	d305      	bcc.n	3c04 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3bf8:	2205      	movs	r2, #5
    3bfa:	e7da      	b.n	3bb2 <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    3bfc:	6a29      	ldr	r1, [r5, #32]
    3bfe:	b321      	cbz	r1, 3c4a <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    3c00:	6129      	str	r1, [r5, #16]
    3c02:	e794      	b.n	3b2e <FatFile::write(void const*, unsigned int)+0x52>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    3c04:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3c06:	f013 0f20 	tst.w	r3, #32
    3c0a:	bf14      	ite	ne
    3c0c:	2205      	movne	r2, #5
    3c0e:	2201      	moveq	r2, #1
    3c10:	e7cf      	b.n	3bb2 <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3c12:	f105 0210 	add.w	r2, r5, #16
    3c16:	f000 fc59 	bl	44cc <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3c1a:	2800      	cmp	r0, #0
    3c1c:	dbdc      	blt.n	3bd8 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    3c1e:	d024      	beq.n	3c6a <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3c20:	68a8      	ldr	r0, [r5, #8]
    3c22:	6929      	ldr	r1, [r5, #16]
    3c24:	e783      	b.n	3b2e <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    3c26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3c28:	428b      	cmp	r3, r1
    3c2a:	d104      	bne.n	3c36 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    3c2c:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    3c30:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3c34:	62c3      	str	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
    3c36:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3c38:	4642      	mov	r2, r8
    3c3a:	6803      	ldr	r3, [r0, #0]
    3c3c:	6a1b      	ldr	r3, [r3, #32]
    3c3e:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3c40:	2800      	cmp	r0, #0
    3c42:	d0c9      	beq.n	3bd8 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    3c44:	f44f 7400 	mov.w	r4, #512	; 0x200
    3c48:	e795      	b.n	3b76 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    3c4a:	4628      	mov	r0, r5
    3c4c:	f7ff fb3a 	bl	32c4 <FatFile::addCluster()>
    3c50:	2800      	cmp	r0, #0
    3c52:	d0c1      	beq.n	3bd8 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    3c54:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3c56:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    3c58:	6229      	str	r1, [r5, #32]
    3c5a:	e768      	b.n	3b2e <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    3c5c:	69c1      	ldr	r1, [r0, #28]
    3c5e:	f7ff fe69 	bl	3934 <FatFile::seekSet(unsigned long)>
    3c62:	2800      	cmp	r0, #0
    3c64:	f47f af45 	bne.w	3af2 <FatFile::write(void const*, unsigned int)+0x16>
    3c68:	e7b6      	b.n	3bd8 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    3c6a:	4628      	mov	r0, r5
    3c6c:	f7ff fb2a 	bl	32c4 <FatFile::addCluster()>
    3c70:	2800      	cmp	r0, #0
    3c72:	d1d5      	bne.n	3c20 <FatFile::write(void const*, unsigned int)+0x144>
    3c74:	e7b0      	b.n	3bd8 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    3c76:	4b05      	ldr	r3, [pc, #20]	; (3c8c <FatFile::write(void const*, unsigned int)+0x1b0>)
    3c78:	681b      	ldr	r3, [r3, #0]
    3c7a:	b12b      	cbz	r3, 3c88 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3c7c:	78ab      	ldrb	r3, [r5, #2]
    3c7e:	4648      	mov	r0, r9
    3c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3c84:	70ab      	strb	r3, [r5, #2]
    3c86:	e7ac      	b.n	3be2 <FatFile::write(void const*, unsigned int)+0x106>
    3c88:	4648      	mov	r0, r9
    3c8a:	e7aa      	b.n	3be2 <FatFile::write(void const*, unsigned int)+0x106>
    3c8c:	2001e06c 	.word	0x2001e06c

00003c90 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    3c94:	4686      	mov	lr, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3c96:	b08a      	sub	sp, #40	; 0x28
    3c98:	4615      	mov	r5, r2
  void reset() { next = begin; }
    3c9a:	6814      	ldr	r4, [r2, #0]
    3c9c:	4606      	mov	r6, r0
    3c9e:	4688      	mov	r8, r1
  FatFile dir = *this;
    3ca0:	f10d 0c04 	add.w	ip, sp, #4
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3ca4:	461f      	mov	r7, r3
  FatFile dir = *this;
    3ca6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3caa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3cae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3cb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3cb6:	f8de 3000 	ldr.w	r3, [lr]
    3cba:	606c      	str	r4, [r5, #4]
    3cbc:	f8cc 3000 	str.w	r3, [ip]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3cc0:	2f00      	cmp	r7, #0
    3cc2:	d03b      	beq.n	3d3c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xac>
    3cc4:	f04f 0901 	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3cc8:	eba8 0109 	sub.w	r1, r8, r9
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3ccc:	a801      	add	r0, sp, #4
    3cce:	b289      	uxth	r1, r1
    3cd0:	0149      	lsls	r1, r1, #5
    3cd2:	f7ff fe2f 	bl	3934 <FatFile::seekSet(unsigned long)>
    3cd6:	b398      	cbz	r0, 3d40 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    3cd8:	2100      	movs	r1, #0
    3cda:	a801      	add	r0, sp, #4
    3cdc:	f7ff fe08 	bl	38f0 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3ce0:	4682      	mov	sl, r0
    3ce2:	b368      	cbz	r0, 3d40 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    3ce4:	2400      	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    3ce6:	b2e2      	uxtb	r2, r4
    3ce8:	4651      	mov	r1, sl
    3cea:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    3cec:	3401      	adds	r4, #1
      uint16_t u = getLfnChar(ldir, i);
    3cee:	f000 fb75 	bl	43dc <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3cf2:	b2c3      	uxtb	r3, r0
      if (fname->atEnd()) {
    3cf4:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
    3cf8:	428a      	cmp	r2, r1
  char getch() { return atEnd() ? 0 : *next++; }
    3cfa:	f101 0c01 	add.w	ip, r1, #1
    3cfe:	d023      	beq.n	3d48 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3d00:	287f      	cmp	r0, #127	; 0x7f
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    3d02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    3d06:	f1a3 0e20 	sub.w	lr, r3, #32
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3d0a:	d819      	bhi.n	3d40 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    3d0c:	2a19      	cmp	r2, #25
    3d0e:	f8c5 c004 	str.w	ip, [r5, #4]
    3d12:	780a      	ldrb	r2, [r1, #0]
    3d14:	bf98      	it	ls
    3d16:	fa5f f38e 	uxtbls.w	r3, lr
    3d1a:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    3d1e:	f1a2 0020 	sub.w	r0, r2, #32
    3d22:	2919      	cmp	r1, #25
    3d24:	bf98      	it	ls
    3d26:	b2c2      	uxtbls	r2, r0
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3d28:	429a      	cmp	r2, r3
    3d2a:	d109      	bne.n	3d40 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    for (uint8_t i = 0; i < 13; i++) {
    3d2c:	2c0d      	cmp	r4, #13
    3d2e:	d1da      	bne.n	3ce6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x56>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3d30:	f109 0901 	add.w	r9, r9, #1
    3d34:	fa5f f989 	uxtb.w	r9, r9
    3d38:	454f      	cmp	r7, r9
    3d3a:	d2c5      	bcs.n	3cc8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x38>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    3d3c:	2001      	movs	r0, #1
    3d3e:	e000      	b.n	3d42 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>

fail:
  return false;
    3d40:	2000      	movs	r0, #0
}
    3d42:	b00a      	add	sp, #40	; 0x28
    3d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return u == 0;
    3d48:	fab0 f080 	clz	r0, r0
    3d4c:	0940      	lsrs	r0, r0, #5
}
    3d4e:	b00a      	add	sp, #40	; 0x28
    3d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003d54 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    3d58:	4686      	mov	lr, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3d5a:	b08a      	sub	sp, #40	; 0x28
    3d5c:	4614      	mov	r4, r2
    3d5e:	4688      	mov	r8, r1
    3d60:	461e      	mov	r6, r3
  FatFile dir = *this;
    3d62:	f10d 0904 	add.w	r9, sp, #4
    3d66:	f102 0711 	add.w	r7, r2, #17
    3d6a:	f102 0c1c 	add.w	ip, r2, #28
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    3d6e:	2500      	movs	r5, #0
    3d70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3d74:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    3d78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3d7c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    3d80:	f8de 3000 	ldr.w	r3, [lr]
    3d84:	f8c9 3000 	str.w	r3, [r9]
    for (uint8_t i = 0; i < 11; i++) {
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3d88:	01eb      	lsls	r3, r5, #7
    3d8a:	f817 2f01 	ldrb.w	r2, [r7, #1]!
    3d8e:	ea43 0355 	orr.w	r3, r3, r5, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    3d92:	4567      	cmp	r7, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3d94:	fa52 f383 	uxtab	r3, r2, r3
    3d98:	b2dd      	uxtb	r5, r3
    for (uint8_t i = 0; i < 11; i++) {
    3d9a:	d1f5      	bne.n	3d88 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
  void reset() { next = begin; }
    3d9c:	6823      	ldr	r3, [r4, #0]
    3d9e:	6063      	str	r3, [r4, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3da0:	2e00      	cmp	r6, #0
    3da2:	d059      	beq.n	3e58 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x104>
  uint8_t fc = 0;
    3da4:	f04f 0900 	mov.w	r9, #0
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3da8:	f04f 0a01 	mov.w	sl, #1
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3dac:	464f      	mov	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3dae:	eba8 010a 	sub.w	r1, r8, sl
    3db2:	a801      	add	r0, sp, #4
    3db4:	b289      	uxth	r1, r1
    3db6:	0149      	lsls	r1, r1, #5
    3db8:	f7ff fdbc 	bl	3934 <FatFile::seekSet(unsigned long)>
    3dbc:	2800      	cmp	r0, #0
    3dbe:	d053      	beq.n	3e68 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    3dc0:	2100      	movs	r1, #0
    3dc2:	a801      	add	r0, sp, #4
    3dc4:	f7ff fd94 	bl	38f0 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3dc8:	2800      	cmp	r0, #0
    3dca:	d04d      	beq.n	3e68 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    3dcc:	9a03      	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3dce:	45b2      	cmp	sl, r6
  bool atEnd() { return next == end; }
    3dd0:	f04f 0c01 	mov.w	ip, #1
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    3dd4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    3dd8:	f043 0301 	orr.w	r3, r3, #1
    3ddc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    3de0:	bf0c      	ite	eq
    3de2:	f04a 0240 	orreq.w	r2, sl, #64	; 0x40
    3de6:	4652      	movne	r2, sl
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3de8:	230f      	movs	r3, #15
    ldir->mustBeZero1 = 0;
    3dea:	7307      	strb	r7, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3dec:	7002      	strb	r2, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3dee:	1c42      	adds	r2, r0, #1
    3df0:	72c3      	strb	r3, [r0, #11]
    3df2:	2300      	movs	r3, #0
    ldir->checksum = checksum;
    3df4:	7345      	strb	r5, [r0, #13]
    3df6:	68a1      	ldr	r1, [r4, #8]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3df8:	8347      	strh	r7, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    3dfa:	e006      	b.n	3e0a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb6>
    3dfc:	8010      	strh	r0, [r2, #0]
    3dfe:	f10c 0c01 	add.w	ip, ip, #1
    3e02:	3301      	adds	r3, #1
    3e04:	3202      	adds	r2, #2
    3e06:	fa5f fc8c 	uxtb.w	ip, ip
    3e0a:	6860      	ldr	r0, [r4, #4]
      uint16_t cp;
      if (fname->atEnd()) {
    3e0c:	4288      	cmp	r0, r1
    3e0e:	d00e      	beq.n	3e2e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xda>
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    3e10:	f100 0e01 	add.w	lr, r0, #1
    3e14:	f8c4 e004 	str.w	lr, [r4, #4]
    3e18:	7800      	ldrb	r0, [r0, #0]
  if (i < 5) {
    3e1a:	2b04      	cmp	r3, #4
    3e1c:	fa5f fe83 	uxtb.w	lr, r3
    3e20:	d9ec      	bls.n	3dfc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
  } else if (i < 11) {
    3e22:	f1be 0f0a 	cmp.w	lr, #10
    3e26:	d80c      	bhi.n	3e42 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xee>
    3e28:	f8a2 0003 	strh.w	r0, [r2, #3]
}
    3e2c:	e7e7      	b.n	3dfe <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
        cp = fc++ ? 0XFFFF : 0;
    3e2e:	f1b9 0f00 	cmp.w	r9, #0
    3e32:	d015      	beq.n	3e60 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
    3e34:	f109 0901 	add.w	r9, r9, #1
    3e38:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3e3c:	fa5f f989 	uxtb.w	r9, r9
    3e40:	e7eb      	b.n	3e1a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    for (uint8_t i = 0; i < 13; i++) {
    3e42:	f1bc 0f0d 	cmp.w	ip, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    3e46:	f8a2 0005 	strh.w	r0, [r2, #5]
    3e4a:	d1d8      	bne.n	3dfe <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3e4c:	f10a 0a01 	add.w	sl, sl, #1
    3e50:	fa5f fa8a 	uxtb.w	sl, sl
    3e54:	4556      	cmp	r6, sl
    3e56:	d2aa      	bcs.n	3dae <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    3e58:	2001      	movs	r0, #1

fail:
  return false;
}
    3e5a:	b00a      	add	sp, #40	; 0x28
    3e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cp = fc++ ? 0XFFFF : 0;
    3e60:	4648      	mov	r0, r9
    3e62:	f04f 0901 	mov.w	r9, #1
    3e66:	e7d8      	b.n	3e1a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
  return false;
    3e68:	2000      	movs	r0, #0
}
    3e6a:	b00a      	add	sp, #40	; 0x28
    3e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003e70 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    3e70:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    3e72:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    3e76:	f852 3b12 	ldr.w	r3, [r2], #18
bool FatFile::makeSFN(FatLfn_t* fname) {
    3e7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    3e7e:	f8c0 1012 	str.w	r1, [r0, #18]
bool FatFile::makeSFN(FatLfn_t* fname) {
    3e82:	4686      	mov	lr, r0
  const char* end = fname->end;
    3e84:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    3e86:	6051      	str	r1, [r2, #4]
    3e88:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    3e8c:	781a      	ldrb	r2, [r3, #0]
    3e8e:	2a2e      	cmp	r2, #46	; 0x2e
    3e90:	bf14      	ite	ne
    3e92:	2001      	movne	r0, #1
    3e94:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    3e96:	d103      	bne.n	3ea0 <FatFile::makeSFN(FatLfn_t*)+0x30>
    3e98:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3e9c:	2a2e      	cmp	r2, #46	; 0x2e
    3e9e:	d0fb      	beq.n	3e98 <FatFile::makeSFN(FatLfn_t*)+0x28>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    3ea0:	1e61      	subs	r1, r4, #1
    3ea2:	4299      	cmp	r1, r3
    3ea4:	d90b      	bls.n	3ebe <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3ea6:	460a      	mov	r2, r1
    3ea8:	e002      	b.n	3eb0 <FatFile::makeSFN(FatLfn_t*)+0x40>
    3eaa:	4293      	cmp	r3, r2
    3eac:	4611      	mov	r1, r2
    3eae:	d006      	beq.n	3ebe <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3eb0:	4611      	mov	r1, r2
    3eb2:	3a01      	subs	r2, #1
    3eb4:	f891 c000 	ldrb.w	ip, [r1]
    3eb8:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    3ebc:	d1f5      	bne.n	3eaa <FatFile::makeSFN(FatLfn_t*)+0x3a>
  }

  for (; ptr < end; ptr++) {
    3ebe:	429c      	cmp	r4, r3
    3ec0:	f04f 0500 	mov.w	r5, #0
    3ec4:	f240 8086 	bls.w	3fd4 <FatFile::makeSFN(FatLfn_t*)+0x164>
    3ec8:	2607      	movs	r6, #7
    3eca:	2708      	movs	r7, #8
    3ecc:	46a9      	mov	r9, r5
    3ece:	46a8      	mov	r8, r5
    3ed0:	e006      	b.n	3ee0 <FatFile::makeSFN(FatLfn_t*)+0x70>
    3ed2:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
    3ed4:	260a      	movs	r6, #10
      i = 8;                  // Place for extension.
    3ed6:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    3eda:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    3edc:	429c      	cmp	r4, r3
    3ede:	d95b      	bls.n	3f98 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    3ee0:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    3ee2:	2a2e      	cmp	r2, #46	; 0x2e
    3ee4:	bf08      	it	eq
    3ee6:	4299      	cmpeq	r1, r3
    3ee8:	d0f3      	beq.n	3ed2 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    3eea:	2a22      	cmp	r2, #34	; 0x22
    3eec:	d00d      	beq.n	3f0a <FatFile::makeSFN(FatLfn_t*)+0x9a>
    3eee:	2a7c      	cmp	r2, #124	; 0x7c
    3ef0:	d00b      	beq.n	3f0a <FatFile::makeSFN(FatLfn_t*)+0x9a>
    3ef2:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    3ef6:	f1bc 0f02 	cmp.w	ip, #2
    3efa:	d906      	bls.n	3f0a <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    3efc:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    3f00:	f1bc 0f05 	cmp.w	ip, #5
    3f04:	d821      	bhi.n	3f4a <FatFile::makeSFN(FatLfn_t*)+0xda>
    3f06:	2a2d      	cmp	r2, #45	; 0x2d
    3f08:	d01f      	beq.n	3f4a <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    3f0a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    3f0e:	2a80      	cmp	r2, #128	; 0x80
    3f10:	d05d      	beq.n	3fce <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    3f12:	454e      	cmp	r6, r9
    3f14:	d22f      	bcs.n	3f76 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    3f16:	4299      	cmp	r1, r3
    3f18:	bf2c      	ite	cs
    3f1a:	2000      	movcs	r0, #0
    3f1c:	2001      	movcc	r0, #1
    3f1e:	2e0a      	cmp	r6, #10
    3f20:	bf08      	it	eq
    3f22:	f040 0001 	orreq.w	r0, r0, #1
    3f26:	2800      	cmp	r0, #0
    3f28:	d047      	beq.n	3fba <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    3f2a:	f89e 3012 	ldrb.w	r3, [lr, #18]
    3f2e:	2b20      	cmp	r3, #32
    3f30:	d040      	beq.n	3fb4 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    3f32:	f89e 3010 	ldrb.w	r3, [lr, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3f36:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    3f38:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    3f3a:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    3f3c:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3f3e:	f88e 0011 	strb.w	r0, [lr, #17]
    fname->sfn[fname->seqPos] = '~';
    3f42:	7499      	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    3f44:	74da      	strb	r2, [r3, #19]
  }
  return true;

fail:
  return false;
}
    3f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3f4a:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    3f4e:	f1bc 0f05 	cmp.w	ip, #5
    3f52:	d9da      	bls.n	3f0a <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    3f54:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    3f58:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    3f5c:	d8d5      	bhi.n	3f0a <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    3f5e:	454e      	cmp	r6, r9
    3f60:	d3d9      	bcc.n	3f16 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    3f62:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    3f66:	f1bc 0f19 	cmp.w	ip, #25
    3f6a:	d828      	bhi.n	3fbe <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    3f6c:	3a20      	subs	r2, #32
        lc |= bit;
    3f6e:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    3f70:	b2d2      	uxtb	r2, r2
        lc |= bit;
    3f72:	b2ed      	uxtb	r5, r5
    3f74:	e001      	b.n	3f7a <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    3f76:	2000      	movs	r0, #0
        c = '_';
    3f78:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    3f7a:	f109 0c01 	add.w	ip, r9, #1
    3f7e:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    3f80:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    3f82:	f889 2012 	strb.w	r2, [r9, #18]
    3f86:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    3f8a:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    3f8c:	4691      	mov	r9, r2
    3f8e:	bf98      	it	ls
    3f90:	f88e 2010 	strbls.w	r2, [lr, #16]
  for (; ptr < end; ptr++) {
    3f94:	429c      	cmp	r4, r3
    3f96:	d8a3      	bhi.n	3ee0 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    3f98:	f89e 3012 	ldrb.w	r3, [lr, #18]
    3f9c:	2b20      	cmp	r3, #32
    3f9e:	d009      	beq.n	3fb4 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    3fa0:	2800      	cmp	r0, #0
    3fa2:	d0c6      	beq.n	3f32 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    3fa4:	ea18 0f05 	tst.w	r8, r5
    3fa8:	bf18      	it	ne
    3faa:	2502      	movne	r5, #2
    3fac:	f88e 5011 	strb.w	r5, [lr, #17]
}
    3fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    3fb4:	2000      	movs	r0, #0
}
    3fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3fba:	460b      	mov	r3, r1
    3fbc:	e78e      	b.n	3edc <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    3fbe:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    3fc2:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    3fc6:	bf98      	it	ls
    3fc8:	ea47 0808 	orrls.w	r8, r7, r8
    3fcc:	e7d5      	b.n	3f7a <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    3fce:	3301      	adds	r3, #1
        is83 = false;
    3fd0:	2000      	movs	r0, #0
    3fd2:	e783      	b.n	3edc <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    3fd4:	46a8      	mov	r8, r5
    3fd6:	e7df      	b.n	3f98 <FatFile::makeSFN(FatLfn_t*)+0x128>

00003fd8 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    3fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    3fdc:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    3fe0:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    3fe2:	460f      	mov	r7, r1
    3fe4:	4604      	mov	r4, r0
    3fe6:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 4088 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    3fea:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    3fee:	f891 8010 	ldrb.w	r8, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3ff2:	f101 0612 	add.w	r6, r1, #18
	return systick_millis_count;
    3ff6:	f1b8 0f03 	cmp.w	r8, #3
    3ffa:	f8db 3000 	ldr.w	r3, [fp]
    3ffe:	bf28      	it	cs
    4000:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    4004:	442b      	add	r3, r5
    4006:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    4008:	f108 0304 	add.w	r3, r8, #4
    400c:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    400e:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4; i > pos; i--) {
    4012:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    4014:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    4016:	2a09      	cmp	r2, #9
    4018:	f102 0137 	add.w	r1, r2, #55	; 0x37
    401c:	bf98      	it	ls
    401e:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    4022:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    4024:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    4026:	7491      	strb	r1, [r2, #18]
    for (uint8_t i = pos + 4; i > pos; i--) {
    4028:	4598      	cmp	r8, r3
    402a:	d1f0      	bne.n	400e <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    402c:	eb07 0308 	add.w	r3, r7, r8
  void rewind() { seekSet(0); }
    4030:	2100      	movs	r1, #0
    4032:	4620      	mov	r0, r4
    4034:	f883 a012 	strb.w	sl, [r3, #18]
    4038:	f7ff fc7c 	bl	3934 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    403c:	2101      	movs	r1, #1
    403e:	4620      	mov	r0, r4
    4040:	f7ff fc56 	bl	38f0 <FatFile::readDirCache(bool)>
    4044:	4603      	mov	r3, r0
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4046:	220b      	movs	r2, #11
    4048:	4630      	mov	r0, r6
      if (!dir) {
    404a:	b19b      	cbz	r3, 4074 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    404c:	f893 c000 	ldrb.w	ip, [r3]
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4050:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    4052:	f1bc 0f00 	cmp.w	ip, #0
    4056:	d013      	beq.n	4080 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4058:	7adb      	ldrb	r3, [r3, #11]
    405a:	071b      	lsls	r3, r3, #28
    405c:	d4ee      	bmi.n	403c <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    405e:	f007 fb89 	bl	b774 <memcmp>
    4062:	2800      	cmp	r0, #0
    4064:	d1ea      	bne.n	403c <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    4066:	f109 39ff 	add.w	r9, r9, #4294967295
    406a:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    406e:	d1c2      	bne.n	3ff6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    4070:	4648      	mov	r0, r9
fail:
    4072:	e003      	b.n	407c <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    4074:	7860      	ldrb	r0, [r4, #1]
    4076:	fab0 f080 	clz	r0, r0
    407a:	0940      	lsrs	r0, r0, #5

done:
  return true;
}
    407c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    4080:	2001      	movs	r0, #1
}
    4082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4086:	bf00      	nop
    4088:	2001ec58 	.word	0x2001ec58

0000408c <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    408c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4090:	ed2d 8b02 	vpush	{d8}
    4094:	b08b      	sub	sp, #44	; 0x2c
    4096:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t freeIndex = 0;
  uint16_t freeTotal;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    409a:	688b      	ldr	r3, [r1, #8]
    409c:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    409e:	780b      	ldrb	r3, [r1, #0]
    40a0:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    40a4:	d052      	beq.n	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  bool isOpen() const { return m_attributes; }
    40a6:	9b02      	ldr	r3, [sp, #8]
    40a8:	781b      	ldrb	r3, [r3, #0]
    40aa:	2b00      	cmp	r3, #0
    40ac:	d14e      	bne.n	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    40ae:	68d3      	ldr	r3, [r2, #12]
    40b0:	4690      	mov	r8, r2
    40b2:	4a9c      	ldr	r2, [pc, #624]	; (4324 <FatFile::open(FatFile*, FatLfn_t*, int)+0x298>)
    40b4:	460e      	mov	r6, r1
    40b6:	330c      	adds	r3, #12
    40b8:	fba2 2303 	umull	r2, r3, r2, r3
    40bc:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    40c0:	f898 3011 	ldrb.w	r3, [r8, #17]
    40c4:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12) / 13;
    40c6:	9204      	str	r2, [sp, #16]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    40c8:	f000 80ab 	beq.w	4222 <FatFile::open(FatFile*, FatLfn_t*, int)+0x196>
    40cc:	1c57      	adds	r7, r2, #1
    40ce:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    40d0:	2300      	movs	r3, #0
  void rewind() { seekSet(0); }
    40d2:	4630      	mov	r0, r6
    40d4:	4619      	mov	r1, r3
    40d6:	461c      	mov	r4, r3
    40d8:	9306      	str	r3, [sp, #24]
    40da:	f7ff fc2b 	bl	3934 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    40de:	f108 0312 	add.w	r3, r8, #18
  uint8_t order = 0;
    40e2:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    40e4:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    40e6:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    40e8:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    40ec:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    40ee:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    40f0:	2100      	movs	r1, #0
    40f2:	4630      	mov	r0, r6
    40f4:	f7ff fbfc 	bl	38f0 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    40f8:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    40fc:	4603      	mov	r3, r0
    40fe:	b318      	cbz	r0, 4148 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    4100:	7802      	ldrb	r2, [r0, #0]
    4102:	2ae5      	cmp	r2, #229	; 0xe5
    4104:	d028      	beq.n	4158 <FatFile::open(FatFile*, FatLfn_t*, int)+0xcc>
    4106:	b33a      	cbz	r2, 4158 <FatFile::open(FatFile*, FatLfn_t*, int)+0xcc>
        freeFound = 0;
    4108:	42bc      	cmp	r4, r7
    410a:	bf38      	it	cc
    410c:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    410e:	2a2e      	cmp	r2, #46	; 0x2e
    4110:	d02a      	beq.n	4168 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
}
static inline uint8_t isFatLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    4112:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isFatLongName(dir)) {
    4116:	f1bc 0f0f 	cmp.w	ip, #15
    411a:	d057      	beq.n	41cc <FatFile::open(FatFile*, FatLfn_t*, int)+0x140>
    } else if (isFatFileOrSubdir(dir)) {
    411c:	f01c 0c08 	ands.w	ip, ip, #8
    4120:	d122      	bne.n	4168 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
      if (lfnOrd) {
    4122:	f1b9 0f00 	cmp.w	r9, #0
    4126:	d17e      	bne.n	4226 <FatFile::open(FatFile*, FatLfn_t*, int)+0x19a>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4128:	220b      	movs	r2, #11
    412a:	ee18 1a10 	vmov	r1, s16
    412e:	f007 fb21 	bl	b774 <memcmp>
    4132:	2800      	cmp	r0, #0
    4134:	d1db      	bne.n	40ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    4136:	f898 3011 	ldrb.w	r3, [r8, #17]
    413a:	f013 0301 	ands.w	r3, r3, #1
    413e:	f000 80e9 	beq.w	4314 <FatFile::open(FatFile*, FatLfn_t*, int)+0x288>
          goto found;
        }
        fnameFound = true;
    4142:	2301      	movs	r3, #1
    4144:	9305      	str	r3, [sp, #20]
    4146:	e7d2      	b.n	40ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    4148:	7873      	ldrb	r3, [r6, #1]
    414a:	b183      	cbz	r3, 416e <FatFile::open(FatFile*, FatLfn_t*, int)+0xe2>
    goto fail;
  }
  return true;

fail:
  return false;
    414c:	2000      	movs	r0, #0
}
    414e:	b00b      	add	sp, #44	; 0x2c
    4150:	ecbd 8b02 	vpop	{d8}
    4154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    4158:	2c00      	cmp	r4, #0
    415a:	bf08      	it	eq
    415c:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    415e:	42bc      	cmp	r4, r7
    4160:	d201      	bcs.n	4166 <FatFile::open(FatFile*, FatLfn_t*, int)+0xda>
        freeFound++;
    4162:	3401      	adds	r4, #1
    4164:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    4166:	b112      	cbz	r2, 416e <FatFile::open(FatFile*, FatLfn_t*, int)+0xe2>
      lfnOrd = 0;
    4168:	f04f 0900 	mov.w	r9, #0
    416c:	e7bf      	b.n	40ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    416e:	9b03      	ldr	r3, [sp, #12]
    4170:	059a      	lsls	r2, r3, #22
    4172:	d5eb      	bpl.n	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    4174:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    4178:	3b01      	subs	r3, #1
    417a:	2b01      	cmp	r3, #1
    417c:	d8e6      	bhi.n	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  if (freeFound == 0) {
    417e:	2c00      	cmp	r4, #0
    4180:	bf08      	it	eq
    4182:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    4184:	42bc      	cmp	r4, r7
    4186:	d303      	bcc.n	4190 <FatFile::open(FatFile*, FatLfn_t*, int)+0x104>
    4188:	e00c      	b.n	41a4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x118>
    freeFound++;
    418a:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    418c:	42a7      	cmp	r7, r4
    418e:	d009      	beq.n	41a4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x118>
    dir = dirFile->readDirCache();
    4190:	2100      	movs	r1, #0
    4192:	4630      	mov	r0, r6
    4194:	f7ff fbac 	bl	38f0 <FatFile::readDirCache(bool)>
    freeFound++;
    4198:	1c63      	adds	r3, r4, #1
    if (!dir) {
    419a:	2800      	cmp	r0, #0
    419c:	d1f5      	bne.n	418a <FatFile::open(FatFile*, FatLfn_t*, int)+0xfe>
      if (dirFile->getError()) {
    419e:	7873      	ldrb	r3, [r6, #1]
    41a0:	2b00      	cmp	r3, #0
    41a2:	d1d3      	bne.n	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  freeTotal = freeFound;
    41a4:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
    41a6:	b2bd      	uxth	r5, r7
    41a8:	42a7      	cmp	r7, r4
    41aa:	d95e      	bls.n	426a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1de>
    41ac:	f8dd 901c 	ldr.w	r9, [sp, #28]
    41b0:	e006      	b.n	41c0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x134>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
    41b2:	f899 3004 	ldrb.w	r3, [r9, #4]
    freeTotal += vol->dirEntriesPerCluster();
    41b6:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    41ba:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
    41bc:	42a5      	cmp	r5, r4
    41be:	d954      	bls.n	426a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1de>
    if (!dirFile->addDirCluster()) {
    41c0:	4630      	mov	r0, r6
    41c2:	f7ff f899 	bl	32f8 <FatFile::addDirCluster()>
    41c6:	2800      	cmp	r0, #0
    41c8:	d1f3      	bne.n	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x126>
    41ca:	e7bf      	b.n	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
      if (!lfnOrd) {
    41cc:	f1b9 0f00 	cmp.w	r9, #0
    41d0:	d11a      	bne.n	4208 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
        order = ldir->order & 0X1F;
    41d2:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    41d6:	9904      	ldr	r1, [sp, #16]
    41d8:	4559      	cmp	r1, fp
    41da:	d188      	bne.n	40ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    41dc:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    41e0:	d085      	beq.n	40ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    41e2:	7b43      	ldrb	r3, [r0, #13]
    41e4:	4689      	mov	r9, r1
    41e6:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    41e8:	f1bb 0f01 	cmp.w	fp, #1
    41ec:	f47f af7f 	bne.w	40ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    41f0:	1c69      	adds	r1, r5, #1
    41f2:	464b      	mov	r3, r9
    41f4:	4642      	mov	r2, r8
    41f6:	4630      	mov	r0, r6
    41f8:	b289      	uxth	r1, r1
    41fa:	f7ff fd49 	bl	3c90 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    41fe:	2800      	cmp	r0, #0
    4200:	bf08      	it	eq
    4202:	f04f 0900 	moveq.w	r9, #0
    4206:	e772      	b.n	40ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    4208:	f10b 3bff 	add.w	fp, fp, #4294967295
    420c:	fa5f fb8b 	uxtb.w	fp, fp
    4210:	455a      	cmp	r2, fp
    4212:	d1a9      	bne.n	4168 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
    4214:	7b43      	ldrb	r3, [r0, #13]
    4216:	9a06      	ldr	r2, [sp, #24]
    4218:	4293      	cmp	r3, r2
    421a:	d0e5      	beq.n	41e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x15c>
      lfnOrd = 0;
    421c:	f04f 0900 	mov.w	r9, #0
    4220:	e765      	b.n	40ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    4222:	2701      	movs	r7, #1
    4224:	e754      	b.n	40d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    4226:	f1bb 0f01 	cmp.w	fp, #1
    422a:	d18f      	bne.n	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    for (uint8_t i = 0; i < 11; i++) {
    422c:	300a      	adds	r0, #10
    422e:	e001      	b.n	4234 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a8>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4230:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4234:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    4238:	4298      	cmp	r0, r3
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    423a:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    423e:	fa52 f281 	uxtab	r2, r2, r1
    4242:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    4246:	d1f3      	bne.n	4230 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a4>
    4248:	9b06      	ldr	r3, [sp, #24]
    424a:	4563      	cmp	r3, ip
    424c:	f47f af7e 	bne.w	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    4250:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    4252:	9b03      	ldr	r3, [sp, #12]
    4254:	0519      	lsls	r1, r3, #20
    4256:	f53f af79 	bmi.w	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    425a:	9b03      	ldr	r3, [sp, #12]
    425c:	462a      	mov	r2, r5
    425e:	4631      	mov	r1, r6
    4260:	9802      	ldr	r0, [sp, #8]
    4262:	9700      	str	r7, [sp, #0]
    4264:	f7ff fbbe 	bl	39e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    4268:	e771      	b.n	414e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (fnameFound) {
    426a:	9b05      	ldr	r3, [sp, #20]
    426c:	b133      	cbz	r3, 427c <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f0>
    if (!dirFile->makeUniqueSfn(fname)) {
    426e:	4641      	mov	r1, r8
    4270:	4630      	mov	r0, r6
    4272:	f7ff feb1 	bl	3fd8 <FatFile::makeUniqueSfn(FatLfn_t*)>
    4276:	2800      	cmp	r0, #0
    4278:	f43f af68 	beq.w	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  lfnOrd = freeNeed - 1;
    427c:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    427e:	4642      	mov	r2, r8
    4280:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    4282:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    4284:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    4288:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    428a:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    428c:	4629      	mov	r1, r5
    428e:	f7ff fd61 	bl	3d54 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    4292:	2800      	cmp	r0, #0
    4294:	f43f af5a 	beq.w	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    4298:	0169      	lsls	r1, r5, #5
    429a:	4630      	mov	r0, r6
    429c:	f7ff fb4a 	bl	3934 <FatFile::seekSet(unsigned long)>
    42a0:	2800      	cmp	r0, #0
    42a2:	f43f af53 	beq.w	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    42a6:	2100      	movs	r1, #0
    42a8:	4630      	mov	r0, r6
    42aa:	f7ff fb21 	bl	38f0 <FatFile::readDirCache(bool)>
  if (!dir) {
    42ae:	4604      	mov	r4, r0
    42b0:	2800      	cmp	r0, #0
    42b2:	f43f af4b 	beq.w	414c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  memset(dir, 0, sizeof(DirFat_t));
    42b6:	2220      	movs	r2, #32
    42b8:	2100      	movs	r1, #0
    42ba:	f007 fb07 	bl	b8cc <memset>
  memcpy(dir->name, fname->sfn, 11);
    42be:	f8d8 2012 	ldr.w	r2, [r8, #18]
    42c2:	f8d8 3016 	ldr.w	r3, [r8, #22]
    42c6:	6022      	str	r2, [r4, #0]
    42c8:	6063      	str	r3, [r4, #4]
    42ca:	f898 301c 	ldrb.w	r3, [r8, #28]
    42ce:	f8b8 201a 	ldrh.w	r2, [r8, #26]
    42d2:	72a3      	strb	r3, [r4, #10]
    42d4:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    42d6:	f898 3011 	ldrb.w	r3, [r8, #17]
    42da:	f003 0318 	and.w	r3, r3, #24
    42de:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    42e0:	4b11      	ldr	r3, [pc, #68]	; (4328 <FatFile::open(FatFile*, FatLfn_t*, int)+0x29c>)
    42e2:	681b      	ldr	r3, [r3, #0]
    42e4:	b1c3      	cbz	r3, 4318 <FatFile::open(FatFile*, FatLfn_t*, int)+0x28c>
    FsDateTime::callback(&date, &time, &ms10);
    42e6:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    42ea:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    42ee:	a809      	add	r0, sp, #36	; 0x24
    42f0:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    42f2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    42f6:	8223      	strh	r3, [r4, #16]
    42f8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    42fc:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    42fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    4302:	7363      	strb	r3, [r4, #13]
    4304:	9a07      	ldr	r2, [sp, #28]
    4306:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    430a:	f043 0301 	orr.w	r3, r3, #1
    430e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  void cacheDirty() { m_cache.dirty(); }
    4312:	e7a2      	b.n	425a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1ce>
    4314:	461f      	mov	r7, r3
    4316:	e79c      	b.n	4252 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
    4318:	f245 6321 	movw	r3, #22049	; 0x5621
    431c:	8223      	strh	r3, [r4, #16]
    431e:	8323      	strh	r3, [r4, #24]
    4320:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    4322:	e7ef      	b.n	4304 <FatFile::open(FatFile*, FatLfn_t*, int)+0x278>
    4324:	4ec4ec4f 	.word	0x4ec4ec4f
    4328:	2001e06c 	.word	0x2001e06c

0000432c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    432c:	7808      	ldrb	r0, [r1, #0]
    432e:	2820      	cmp	r0, #32
                            const char** ptr) {
    4330:	b430      	push	{r4, r5}
  while (*path == ' ') {
    4332:	d103      	bne.n	433c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    4334:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    4338:	2c20      	cmp	r4, #32
    433a:	d0fb      	beq.n	4334 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    433c:	2500      	movs	r5, #0
  fname->begin = path;
    433e:	6011      	str	r1, [r2, #0]
  fname->len = 0;
    4340:	60d5      	str	r5, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
    4342:	780c      	ldrb	r4, [r1, #0]
    4344:	2c2f      	cmp	r4, #47	; 0x2f
    4346:	d00f      	beq.n	4368 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    4348:	b174      	cbz	r4, 4368 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    434a:	4823      	ldr	r0, [pc, #140]	; (43d8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>)
      DBG_FAIL_MACRO;
      goto fail;
    }
#else   // USE_UTF8_LONG_NAMES
    uint8_t cp = *path++;
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    434c:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t cp = *path++;
    4350:	f101 0101 	add.w	r1, r1, #1
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    4354:	d108      	bne.n	4368 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    4356:	2c3c      	cmp	r4, #60	; 0x3c
    4358:	d82f      	bhi.n	43ba <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8e>
    435a:	2c21      	cmp	r4, #33	; 0x21
    435c:	d807      	bhi.n	436e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x42>
    435e:	f104 3cff 	add.w	ip, r4, #4294967295
    4362:	f1bc 0f1e 	cmp.w	ip, #30
    4366:	d80b      	bhi.n	4380 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  *ptr = path;
  return makeSFN(fname);

fail:
  return false;
}
    4368:	2000      	movs	r0, #0
    436a:	bc30      	pop	{r4, r5}
    436c:	4770      	bx	lr
    436e:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    4372:	fa5f fc8c 	uxtb.w	ip, ip
    4376:	fa20 fc0c 	lsr.w	ip, r0, ip
    437a:	f01c 0f01 	tst.w	ip, #1
    437e:	d1f3      	bne.n	4368 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    if (cp != '.' && cp != ' ') {
    4380:	2c2e      	cmp	r4, #46	; 0x2e
    len++;
    4382:	f105 0501 	add.w	r5, r5, #1
    if (cp != '.' && cp != ' ') {
    4386:	d001      	beq.n	438c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    4388:	2c20      	cmp	r4, #32
    438a:	d11c      	bne.n	43c6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
  while (*path && !isDirSeparator(*path)) {
    438c:	780c      	ldrb	r4, [r1, #0]
    438e:	b10c      	cbz	r4, 4394 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    4390:	2c2f      	cmp	r4, #47	; 0x2f
    4392:	d1db      	bne.n	434c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    4394:	68d0      	ldr	r0, [r2, #12]
    4396:	3801      	subs	r0, #1
    4398:	28fe      	cmp	r0, #254	; 0xfe
    439a:	d8e5      	bhi.n	4368 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    439c:	2c20      	cmp	r4, #32
    439e:	d001      	beq.n	43a4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    43a0:	2c2f      	cmp	r4, #47	; 0x2f
    43a2:	d105      	bne.n	43b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x84>
    43a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    43a8:	2820      	cmp	r0, #32
    43aa:	d0fb      	beq.n	43a4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    43ac:	282f      	cmp	r0, #47	; 0x2f
    43ae:	d0f9      	beq.n	43a4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
  return makeSFN(fname);
    43b0:	4610      	mov	r0, r2
  *ptr = path;
    43b2:	6019      	str	r1, [r3, #0]
}
    43b4:	bc30      	pop	{r4, r5}
  return makeSFN(fname);
    43b6:	f7ff bd5b 	b.w	3e70 <FatFile::makeSFN(FatLfn_t*)>
    43ba:	2c5c      	cmp	r4, #92	; 0x5c
    43bc:	d0d4      	beq.n	4368 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    43be:	d905      	bls.n	43cc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa0>
    43c0:	2c7c      	cmp	r4, #124	; 0x7c
    43c2:	d0d1      	beq.n	4368 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    len++;
    43c4:	3501      	adds	r5, #1
      fname->end = path;
    43c6:	e9c2 1502 	strd	r1, r5, [r2, #8]
    43ca:	e7df      	b.n	438c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    43cc:	3c3e      	subs	r4, #62	; 0x3e
    43ce:	2c01      	cmp	r4, #1
    43d0:	d8f8      	bhi.n	43c4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x98>
}
    43d2:	2000      	movs	r0, #0
    43d4:	bc30      	pop	{r4, r5}
    43d6:	4770      	bx	lr
    43d8:	05002101 	.word	0x05002101

000043dc <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
  if (i < 5) {
    43dc:	2a04      	cmp	r2, #4
    43de:	d804      	bhi.n	43ea <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    43e0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    43e4:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
    43e8:	4770      	bx	lr
  } else if (i < 11) {
    43ea:	2a0a      	cmp	r2, #10
    43ec:	d803      	bhi.n	43f6 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    43ee:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    43f2:	8890      	ldrh	r0, [r2, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    43f4:	4770      	bx	lr
  } else if (i < 13) {
    43f6:	2a0c      	cmp	r2, #12
    43f8:	d803      	bhi.n	4402 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    43fa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    43fe:	88c8      	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    4400:	4770      	bx	lr
  return 0;
    4402:	2000      	movs	r0, #0
}
    4404:	4770      	bx	lr
    4406:	bf00      	nop

00004408 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4408:	b570      	push	{r4, r5, r6, lr}
  uint8_t fatType() const { return m_fatType; }
    440a:	79c3      	ldrb	r3, [r0, #7]
    440c:	4605      	mov	r5, r0
    440e:	460c      	mov	r4, r1
    4410:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    4412:	2b20      	cmp	r3, #32
    4414:	d019      	beq.n	444a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x42>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    4416:	2b10      	cmp	r3, #16
    4418:	d002      	beq.n	4420 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x18>
  }
  *value = next;
  return 1;

fail:
  return -1;
    441a:	f04f 30ff 	mov.w	r0, #4294967295
}
    441e:	bd70      	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    4420:	6983      	ldr	r3, [r0, #24]
    4422:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    4426:	f500 700d 	add.w	r0, r0, #564	; 0x234
    442a:	2202      	movs	r2, #2
    442c:	4419      	add	r1, r3
    442e:	f002 fdf5 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4432:	2800      	cmp	r0, #0
    4434:	d0f1      	beq.n	441a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    4436:	0061      	lsls	r1, r4, #1
  if (isEOC(next)) {
    4438:	69ea      	ldr	r2, [r5, #28]
    next = getLe16(pc + offset);
    443a:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
    443e:	5a43      	ldrh	r3, [r0, r1]
  if (isEOC(next)) {
    4440:	429a      	cmp	r2, r3
    4442:	d313      	bcc.n	446c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x64>
  return 1;
    4444:	2001      	movs	r0, #1
  *value = next;
    4446:	6033      	str	r3, [r6, #0]
}
    4448:	bd70      	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    444a:	6981      	ldr	r1, [r0, #24]
    444c:	2202      	movs	r2, #2
    444e:	f500 700d 	add.w	r0, r0, #564	; 0x234
    4452:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4456:	f002 fde1 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    445a:	2800      	cmp	r0, #0
    445c:	d0dd      	beq.n	441a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    445e:	00a1      	lsls	r1, r4, #2
  if (isEOC(next)) {
    4460:	69ea      	ldr	r2, [r5, #28]
    next = getLe32(pc + offset);
    4462:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    4466:	5843      	ldr	r3, [r0, r1]
  if (isEOC(next)) {
    4468:	429a      	cmp	r2, r3
    446a:	d2eb      	bcs.n	4444 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x3c>
    return 0;
    446c:	2000      	movs	r0, #0
}
    446e:	bd70      	pop	{r4, r5, r6, pc}

00004470 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4470:	b538      	push	{r3, r4, r5, lr}
  uint8_t fatType() const { return m_fatType; }
    4472:	79c3      	ldrb	r3, [r0, #7]
    4474:	460c      	mov	r4, r1
    4476:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    4478:	2b20      	cmp	r3, #32
    447a:	d015      	beq.n	44a8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x38>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    447c:	2b10      	cmp	r3, #16
    447e:	d001      	beq.n	4484 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    4480:	2000      	movs	r0, #0
}
    4482:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    4484:	6983      	ldr	r3, [r0, #24]
    4486:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    448a:	f500 700d 	add.w	r0, r0, #564	; 0x234
    448e:	2203      	movs	r2, #3
    4490:	4419      	add	r1, r3
    4492:	f002 fdc3 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4496:	4603      	mov	r3, r0
    4498:	2800      	cmp	r0, #0
    449a:	d0f1      	beq.n	4480 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    449c:	0061      	lsls	r1, r4, #1
    return true;
    449e:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    44a0:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
    44a4:	525d      	strh	r5, [r3, r1]
}
    44a6:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    44a8:	6981      	ldr	r1, [r0, #24]
    44aa:	2203      	movs	r2, #3
    44ac:	f500 700d 	add.w	r0, r0, #564	; 0x234
    44b0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    44b4:	f002 fdb2 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    44b8:	4603      	mov	r3, r0
    44ba:	2800      	cmp	r0, #0
    44bc:	d0e0      	beq.n	4480 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    44be:	00a1      	lsls	r1, r4, #2
    return true;
    44c0:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    44c2:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    44c6:	505d      	str	r5, [r3, r1]
}
    44c8:	bd38      	pop	{r3, r4, r5, pc}
    44ca:	bf00      	nop

000044cc <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    44cc:	2901      	cmp	r1, #1
    44ce:	d90c      	bls.n	44ea <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    44d0:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    44d2:	69c4      	ldr	r4, [r0, #28]
    44d4:	428c      	cmp	r4, r1
    44d6:	d303      	bcc.n	44e0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    44d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    44dc:	f7ff bf94 	b.w	4408 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    44e0:	f04f 30ff 	mov.w	r0, #4294967295
    44e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    44e8:	4770      	bx	lr
    44ea:	f04f 30ff 	mov.w	r0, #4294967295
    44ee:	4770      	bx	lr

000044f0 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    44f0:	2901      	cmp	r1, #1
    44f2:	d90c      	bls.n	450e <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    44f4:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > m_lastCluster) {
    44f6:	69c3      	ldr	r3, [r0, #28]
    44f8:	460c      	mov	r4, r1
    44fa:	428b      	cmp	r3, r1
    44fc:	d305      	bcc.n	450a <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
  uint8_t fatType() const { return m_fatType; }
    44fe:	79c3      	ldrb	r3, [r0, #7]
    4500:	4615      	mov	r5, r2
  if (fatType() == 32) {
    4502:	2b20      	cmp	r3, #32
    4504:	d017      	beq.n	4536 <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
  if (fatType() == 16) {
    4506:	2b10      	cmp	r3, #16
    4508:	d003      	beq.n	4512 <FatPartition::fatPut(unsigned long, unsigned long)+0x22>
  return false;
    450a:	2000      	movs	r0, #0
}
    450c:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    450e:	2000      	movs	r0, #0
}
    4510:	4770      	bx	lr
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    4512:	6983      	ldr	r3, [r0, #24]
    4514:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    4518:	f500 700d 	add.w	r0, r0, #564	; 0x234
    451c:	2203      	movs	r2, #3
    451e:	4419      	add	r1, r3
    4520:	f002 fd7c 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4524:	4603      	mov	r3, r0
    4526:	2800      	cmp	r0, #0
    4528:	d0ef      	beq.n	450a <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    452a:	0064      	lsls	r4, r4, #1
    return true;
    452c:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    452e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    4532:	531d      	strh	r5, [r3, r4]
}
    4534:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4536:	6981      	ldr	r1, [r0, #24]
    4538:	2203      	movs	r2, #3
    453a:	f500 700d 	add.w	r0, r0, #564	; 0x234
    453e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4542:	f002 fd6b 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4546:	4603      	mov	r3, r0
    4548:	2800      	cmp	r0, #0
    454a:	d0de      	beq.n	450a <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    454c:	00a4      	lsls	r4, r4, #2
    return true;
    454e:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    4550:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
    4554:	511d      	str	r5, [r3, r4]
}
    4556:	bd38      	pop	{r3, r4, r5, pc}

00004558 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    455c:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    455e:	b082      	sub	sp, #8
    4560:	4605      	mov	r5, r0
    4562:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    4564:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4566:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    4568:	d333      	bcc.n	45d2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    setStart = true;
    456a:	2701      	movs	r7, #1
    find++;
    456c:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    456e:	69eb      	ldr	r3, [r5, #28]
    4570:	aa01      	add	r2, sp, #4
    4572:	4628      	mov	r0, r5
    4574:	42a3      	cmp	r3, r4
    4576:	d205      	bcs.n	4584 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    4578:	bb37      	cbnz	r7, 45c8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
      find = m_allocSearchStart;
    457a:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    457c:	2701      	movs	r7, #1
    find++;
    457e:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    4580:	42a3      	cmp	r3, r4
    4582:	d321      	bcc.n	45c8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (cluster < 2 || cluster > m_lastCluster) {
    4584:	42a6      	cmp	r6, r4
    4586:	bf18      	it	ne
    4588:	2c01      	cmpne	r4, #1
    458a:	4621      	mov	r1, r4
    458c:	d91c      	bls.n	45c8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    458e:	f7ff ff3b 	bl	4408 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    4592:	2800      	cmp	r0, #0
    4594:	db18      	blt.n	45c8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    if (fg && f == 0) {
    4596:	d0e9      	beq.n	456c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    4598:	9b01      	ldr	r3, [sp, #4]
    459a:	2b00      	cmp	r3, #0
    459c:	d1e6      	bne.n	456c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    459e:	b107      	cbz	r7, 45a2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    45a0:	60ec      	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    45a2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    45a6:	4621      	mov	r1, r4
    45a8:	4628      	mov	r0, r5
    45aa:	f7ff ffa1 	bl	44f0 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    45ae:	4607      	mov	r7, r0
    45b0:	b150      	cbz	r0, 45c8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (current) {
    45b2:	b916      	cbnz	r6, 45ba <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  *next = find;
    45b4:	f8c8 4000 	str.w	r4, [r8]
  return true;
    45b8:	e007      	b.n	45ca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (!fatPut(current, find)) {
    45ba:	4631      	mov	r1, r6
    45bc:	4628      	mov	r0, r5
    45be:	4622      	mov	r2, r4
    45c0:	f7ff ff96 	bl	44f0 <FatPartition::fatPut(unsigned long, unsigned long)>
    45c4:	2800      	cmp	r0, #0
    45c6:	d1f5      	bne.n	45b4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5c>
  return false;
    45c8:	2700      	movs	r7, #0
}
    45ca:	4638      	mov	r0, r7
    45cc:	b002      	add	sp, #8
    45ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45d2:	460c      	mov	r4, r1
    setStart = false;
    45d4:	2700      	movs	r7, #0
    45d6:	e7c9      	b.n	456c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>

000045d8 <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    45d8:	b570      	push	{r4, r5, r6, lr}
    45da:	4605      	mov	r5, r0
    45dc:	b082      	sub	sp, #8
    45de:	460c      	mov	r4, r1
    45e0:	e017      	b.n	4612 <FatPartition::freeChain(unsigned long)+0x3a>
  if (cluster < 2 || cluster > m_lastCluster) {
    45e2:	69eb      	ldr	r3, [r5, #28]
    45e4:	429c      	cmp	r4, r3
    45e6:	d819      	bhi.n	461c <FatPartition::freeChain(unsigned long)+0x44>
    45e8:	f7ff ff0e 	bl	4408 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    45ec:	4606      	mov	r6, r0
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    45ee:	4621      	mov	r1, r4
    45f0:	2200      	movs	r2, #0
    45f2:	2e00      	cmp	r6, #0
    45f4:	4628      	mov	r0, r5
    45f6:	db11      	blt.n	461c <FatPartition::freeChain(unsigned long)+0x44>
  if (cluster < 2 || cluster > m_lastCluster) {
    45f8:	69eb      	ldr	r3, [r5, #28]
    45fa:	429c      	cmp	r4, r3
    45fc:	d80e      	bhi.n	461c <FatPartition::freeChain(unsigned long)+0x44>
    45fe:	f7ff ff37 	bl	4470 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    4602:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    4604:	b150      	cbz	r0, 461c <FatPartition::freeChain(unsigned long)+0x44>
    if (cluster < m_allocSearchStart) {
    4606:	68eb      	ldr	r3, [r5, #12]
    4608:	42a3      	cmp	r3, r4
    }
    cluster = next;
    460a:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    460c:	bf88      	it	hi
    460e:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    4610:	b12e      	cbz	r6, 461e <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    4612:	2c01      	cmp	r4, #1
    4614:	4621      	mov	r1, r4
    4616:	aa01      	add	r2, sp, #4
    4618:	4628      	mov	r0, r5
    461a:	d8e2      	bhi.n	45e2 <FatPartition::freeChain(unsigned long)+0xa>

  return true;

fail:
  return false;
    461c:	2000      	movs	r0, #0
}
    461e:	b002      	add	sp, #8
    4620:	bd70      	pop	{r4, r5, r6, pc}
    4622:	bf00      	nop

00004624 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4626:	461e      	mov	r6, r3
    m_sector = 0XFFFFFFFF;
    4628:	f04f 33ff 	mov.w	r3, #4294967295
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    462c:	f04f 0c00 	mov.w	ip, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4630:	4604      	mov	r4, r0
    4632:	62c3      	str	r3, [r0, #44]	; 0x2c
  m_allocSearchStart = 1;
  m_cache.init(dev);
    4634:	f100 0724 	add.w	r7, r0, #36	; 0x24
    4638:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  m_allocSearchStart = 1;
    463c:	2301      	movs	r3, #1
  m_blockDev = dev;
    463e:	6001      	str	r1, [r0, #0]
  m_fatType = 0;
    4640:	f880 c007 	strb.w	ip, [r0, #7]
    m_blockDev = blockDev;
    4644:	6281      	str	r1, [r0, #40]	; 0x28
    4646:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
    m_status = 0;
    464a:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
    464e:	f880 c234 	strb.w	ip, [r0, #564]	; 0x234
  m_allocSearchStart = 1;
    4652:	60c3      	str	r3, [r0, #12]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4654:	b1d2      	cbz	r2, 468c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x68>
    if (part > 4) {
    4656:	2a04      	cmp	r2, #4
    4658:	4615      	mov	r5, r2
    465a:	d901      	bls.n	4660 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x3c>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    465c:	2000      	movs	r0, #0
}
    465e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
    4660:	4662      	mov	r2, ip
    4662:	4661      	mov	r1, ip
    4664:	4638      	mov	r0, r7
    4666:	f002 fcd9 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    466a:	2800      	cmp	r0, #0
    466c:	d0f6      	beq.n	465c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    MbrPart_t* mp = mbr->part + part - 1;
    466e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    4672:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    4676:	442b      	add	r3, r5
    4678:	0119      	lsls	r1, r3, #4
    467a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    467e:	791a      	ldrb	r2, [r3, #4]
    4680:	2a00      	cmp	r2, #0
    4682:	d0eb      	beq.n	465c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    4684:	5c42      	ldrb	r2, [r0, r1]
    4686:	0652      	lsls	r2, r2, #25
    4688:	d1e8      	bne.n	465c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    468a:	689e      	ldr	r6, [r3, #8]
    468c:	2200      	movs	r2, #0
    468e:	4631      	mov	r1, r6
    4690:	4638      	mov	r0, r7
    4692:	f002 fcc3 	bl	701c <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    4696:	2800      	cmp	r0, #0
    4698:	d0e0      	beq.n	465c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    469a:	7c03      	ldrb	r3, [r0, #16]
    469c:	2b02      	cmp	r3, #2
    469e:	d1dd      	bne.n	465c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    46a0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    46a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    46a8:	d1d8      	bne.n	465c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    46aa:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    46ac:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    46ae:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    46b0:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    46b2:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    46b4:	f04f 0300 	mov.w	r3, #0
    46b8:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    46ba:	d041      	beq.n	4740 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x11c>
    46bc:	2201      	movs	r2, #1
    46be:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    46c0:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    46c2:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    46c4:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    46c6:	4291      	cmp	r1, r2
    46c8:	d004      	beq.n	46d4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb0>
    if (tmp == 0) {
    46ca:	2b08      	cmp	r3, #8
    46cc:	d1f7      	bne.n	46be <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x9a>
  return false;
    46ce:	2000      	movs	r0, #0
    46d0:	71a3      	strb	r3, [r4, #6]
}
    46d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  countOfClusters >>= m_sectorsPerClusterShift;
    46d4:	461d      	mov	r5, r3
    46d6:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    46d8:	8ac1      	ldrh	r1, [r0, #22]
    46da:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    46dc:	b909      	cbnz	r1, 46e2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xbe>
    46de:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    46e0:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    46e2:	89c3      	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    46e4:	f8b0 2011 	ldrh.w	r2, [r0, #17]
    46e8:	4433      	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    46ea:	8122      	strh	r2, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    46ec:	0152      	lsls	r2, r2, #5
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    46ee:	61a3      	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    46f0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    46f4:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    46f8:	6223      	str	r3, [r4, #32]
      m_rootDirStart +
    46fa:	eb03 2352 	add.w	r3, r3, r2, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    46fe:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector =
    4702:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    4704:	b902      	cbnz	r2, 4708 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe4>
  return *reinterpret_cast<const uint32_t*>(src);
    4706:	6a02      	ldr	r2, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    4708:	1af3      	subs	r3, r6, r3
    470a:	4413      	add	r3, r2
  countOfClusters >>= m_sectorsPerClusterShift;
    470c:	40eb      	lsrs	r3, r5
  m_lastCluster = countOfClusters + 1;
    470e:	1c5a      	adds	r2, r3, #1
    4710:	61e2      	str	r2, [r4, #28]
  if (countOfClusters < 4085) {
    4712:	f640 72f4 	movw	r2, #4084	; 0xff4
    4716:	4293      	cmp	r3, r2
    4718:	d90c      	bls.n	4734 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x110>
  } else if (countOfClusters < 65525) {
    471a:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    471e:	4293      	cmp	r3, r2
    4720:	d90c      	bls.n	473c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x118>
    4722:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    4724:	2320      	movs	r3, #32
    4726:	6222      	str	r2, [r4, #32]
  return true;
    4728:	2001      	movs	r0, #1
    m_fatType = 16;
    472a:	71e3      	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    472c:	6321      	str	r1, [r4, #48]	; 0x30
    472e:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    4732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 12;
    4734:	230c      	movs	r3, #12
  return false;
    4736:	2000      	movs	r0, #0
    m_fatType = 12;
    4738:	71e3      	strb	r3, [r4, #7]
}
    473a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    473c:	2310      	movs	r3, #16
    473e:	e7f3      	b.n	4728 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x104>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4740:	461d      	mov	r5, r3
    4742:	e7c9      	b.n	46d8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb4>

00004744 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char* path) {
    4744:	b530      	push	{r4, r5, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    4746:	f200 4444 	addw	r4, r0, #1092	; 0x444
    474a:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    474c:	2300      	movs	r3, #0
    474e:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    4750:	a801      	add	r0, sp, #4
    4752:	4621      	mov	r1, r4
    4754:	9301      	str	r3, [sp, #4]
    4756:	f7fe ff43 	bl	35e0 <FatFile::open(FatFile*, char const*, int)>
    475a:	4605      	mov	r5, r0
    475c:	b198      	cbz	r0, 4786 <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    475e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4762:	f013 03d0 	ands.w	r3, r3, #208	; 0xd0
    4766:	d011      	beq.n	478c <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    4768:	f10d 0e04 	add.w	lr, sp, #4
    476c:	46a4      	mov	ip, r4
    476e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4772:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4776:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    477a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    477e:	f8de 3000 	ldr.w	r3, [lr]
    4782:	f8cc 3000 	str.w	r3, [ip]
  return true;

fail:
  return false;
}
    4786:	4628      	mov	r0, r5
    4788:	b00b      	add	sp, #44	; 0x2c
    478a:	bd30      	pop	{r4, r5, pc}
  return false;
    478c:	461d      	mov	r5, r3
}
    478e:	4628      	mov	r0, r5
    4790:	b00b      	add	sp, #44	; 0x2c
    4792:	bd30      	pop	{r4, r5, pc}

00004794 <FsBaseFile::operator=(FsBaseFile const&)>:
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) {
    4794:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    4796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4798:	4604      	mov	r4, r0
  if (this == &from) {
    479a:	d01b      	beq.n	47d4 <FsBaseFile::operator=(FsBaseFile const&)+0x40>
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    479c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    479e:	460d      	mov	r5, r1
    47a0:	b1d0      	cbz	r0, 47d8 <FsBaseFile::operator=(FsBaseFile const&)+0x44>
    47a2:	f7fe fde5 	bl	3370 <FatFile::close()>
  m_fFile = nullptr;
    47a6:	2600      	movs	r6, #0
    47a8:	63a6      	str	r6, [r4, #56]	; 0x38
  if (from.m_fFile) {
    47aa:	6baf      	ldr	r7, [r5, #56]	; 0x38
  m_xFile = nullptr;
    47ac:	63e6      	str	r6, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    47ae:	b1cf      	cbz	r7, 47e4 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    47b0:	4621      	mov	r1, r4
    47b2:	2024      	movs	r0, #36	; 0x24
    47b4:	f000 f8a4 	bl	4900 <operator new(unsigned int, unsigned long*)>
    47b8:	8006      	strh	r6, [r0, #0]
    47ba:	7086      	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    47bc:	4684      	mov	ip, r0
    m_fFile = new (m_fileMem) FatFile;
    47be:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    47c0:	6bad      	ldr	r5, [r5, #56]	; 0x38
    47c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    47c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    47c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    47ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    47ce:	682b      	ldr	r3, [r5, #0]
    47d0:	f8cc 3000 	str.w	r3, [ip]
}
    47d4:	4620      	mov	r0, r4
    47d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    47d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    47da:	2800      	cmp	r0, #0
    47dc:	d0e3      	beq.n	47a6 <FsBaseFile::operator=(FsBaseFile const&)+0x12>
    47de:	f7fd fa37 	bl	1c50 <ExFatFile::close()>
    47e2:	e7e0      	b.n	47a6 <FsBaseFile::operator=(FsBaseFile const&)+0x12>
  } else if (from.m_xFile) {
    47e4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    47e6:	2b00      	cmp	r3, #0
    47e8:	d0f4      	beq.n	47d4 <FsBaseFile::operator=(FsBaseFile const&)+0x40>
    m_xFile = new (m_fileMem) ExFatFile;
    47ea:	4621      	mov	r1, r4
    47ec:	2038      	movs	r0, #56	; 0x38
    47ee:	f000 f887 	bl	4900 <operator new(unsigned int, unsigned long*)>
    47f2:	f880 7031 	strb.w	r7, [r0, #49]	; 0x31
    47f6:	8647      	strh	r7, [r0, #50]	; 0x32
    47f8:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    47fa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    47fc:	f103 0730 	add.w	r7, r3, #48	; 0x30
    4800:	681e      	ldr	r6, [r3, #0]
    4802:	3310      	adds	r3, #16
    4804:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    4808:	3010      	adds	r0, #16
    480a:	f853 1c08 	ldr.w	r1, [r3, #-8]
    480e:	f853 2c04 	ldr.w	r2, [r3, #-4]
    4812:	42bb      	cmp	r3, r7
    4814:	f840 6c10 	str.w	r6, [r0, #-16]
    4818:	f840 5c0c 	str.w	r5, [r0, #-12]
    481c:	f840 1c08 	str.w	r1, [r0, #-8]
    4820:	f840 2c04 	str.w	r2, [r0, #-4]
    4824:	d1ec      	bne.n	4800 <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    4826:	681b      	ldr	r3, [r3, #0]
    4828:	6003      	str	r3, [r0, #0]
}
    482a:	4620      	mov	r0, r4
    482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    482e:	bf00      	nop

00004830 <FsBaseFile::close()>:
bool FsBaseFile::close() {
    4830:	b510      	push	{r4, lr}
    4832:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4834:	6b80      	ldr	r0, [r0, #56]	; 0x38
    4836:	b128      	cbz	r0, 4844 <FsBaseFile::close()+0x14>
    4838:	f7fe fd9a 	bl	3370 <FatFile::close()>
  m_fFile = nullptr;
    483c:	2300      	movs	r3, #0
  m_xFile = nullptr;
    483e:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
  return rtn;
}
    4842:	bd10      	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4844:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4846:	b128      	cbz	r0, 4854 <FsBaseFile::close()+0x24>
    4848:	f7fd fa02 	bl	1c50 <ExFatFile::close()>
  m_fFile = nullptr;
    484c:	2300      	movs	r3, #0
  m_xFile = nullptr;
    484e:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
    4852:	bd10      	pop	{r4, pc}
  m_fFile = nullptr;
    4854:	2300      	movs	r3, #0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4856:	2001      	movs	r0, #1
  m_xFile = nullptr;
    4858:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
    485c:	bd10      	pop	{r4, pc}
    485e:	bf00      	nop

00004860 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    4860:	2900      	cmp	r1, #0
    4862:	d04b      	beq.n	48fc <FsBaseFile::open(FsVolume*, char const*, int)+0x9c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    4864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4868:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    486a:	6b80      	ldr	r0, [r0, #56]	; 0x38
    486c:	460d      	mov	r5, r1
    486e:	4690      	mov	r8, r2
    4870:	461f      	mov	r7, r3
    4872:	b1d0      	cbz	r0, 48aa <FsBaseFile::open(FsVolume*, char const*, int)+0x4a>
    4874:	f7fe fd7c 	bl	3370 <FatFile::close()>
  m_fFile = nullptr;
    4878:	2600      	movs	r6, #0
    return false;
  }
  close();
  if (vol->m_fVol) {
    487a:	f8d5 9480 	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    487e:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    4882:	f1b9 0f00 	cmp.w	r9, #0
    4886:	d01d      	beq.n	48c4 <FsBaseFile::open(FsVolume*, char const*, int)+0x64>
    m_fFile = new (m_fileMem) FatFile;
    4888:	4621      	mov	r1, r4
    488a:	2024      	movs	r0, #36	; 0x24
    488c:	f000 f838 	bl	4900 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4890:	463b      	mov	r3, r7
    4892:	8006      	strh	r6, [r0, #0]
    4894:	4642      	mov	r2, r8
    4896:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    4898:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    489a:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    489e:	f7fe ff1b 	bl	36d8 <FatFile::open(FatVolume*, char const*, int)>
    48a2:	bb40      	cbnz	r0, 48f6 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
      return true;
    }
    m_fFile = nullptr;
    48a4:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    48a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    48aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    48ac:	2800      	cmp	r0, #0
    48ae:	d0e3      	beq.n	4878 <FsBaseFile::open(FsVolume*, char const*, int)+0x18>
    48b0:	f7fd f9ce 	bl	1c50 <ExFatFile::close()>
  m_fFile = nullptr;
    48b4:	2600      	movs	r6, #0
  if (vol->m_fVol) {
    48b6:	f8d5 9480 	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    48ba:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    48be:	f1b9 0f00 	cmp.w	r9, #0
    48c2:	d1e1      	bne.n	4888 <FsBaseFile::open(FsVolume*, char const*, int)+0x28>
  } else if (vol->m_xVol) {
    48c4:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    48c8:	b193      	cbz	r3, 48f0 <FsBaseFile::open(FsVolume*, char const*, int)+0x90>
    m_xFile = new (m_fileMem) ExFatFile;
    48ca:	4621      	mov	r1, r4
    48cc:	2038      	movs	r0, #56	; 0x38
    48ce:	f000 f817 	bl	4900 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    48d2:	463b      	mov	r3, r7
    48d4:	f880 9031 	strb.w	r9, [r0, #49]	; 0x31
    48d8:	4642      	mov	r2, r8
    48da:	f8a0 9032 	strh.w	r9, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    48de:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    48e0:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    48e4:	f7fd fddc 	bl	24a0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    48e8:	b928      	cbnz	r0, 48f6 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
    m_xFile = nullptr;
    48ea:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    48ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    48f0:	2000      	movs	r0, #0
}
    48f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return true;
    48f6:	2001      	movs	r0, #1
}
    48f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    48fc:	2000      	movs	r0, #0
}
    48fe:	4770      	bx	lr

00004900 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    4900:	4608      	mov	r0, r1
    4902:	4770      	bx	lr

00004904 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    4904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
    4908:	2500      	movs	r5, #0
                     uint32_t volStart) {
    490a:	4606      	mov	r6, r0
    490c:	460f      	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
    490e:	4601      	mov	r1, r0
  m_fVol = nullptr;
    4910:	f8c0 5480 	str.w	r5, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    4914:	f44f 6090 	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
    4918:	4698      	mov	r8, r3
    491a:	f8dd a020 	ldr.w	sl, [sp, #32]
    491e:	4691      	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    4920:	f7ff ffee 	bl	4900 <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    4924:	f04f 33ff 	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    4928:	6045      	str	r5, [r0, #4]
    m_status = 0;
    492a:	7005      	strb	r5, [r0, #0]
    if (!init(dev, part, volStart)) {
    492c:	4642      	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    492e:	6083      	str	r3, [r0, #8]
    4930:	4639      	mov	r1, r7
    4932:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
    4936:	4653      	mov	r3, sl
    m_blockDev = blockDev;
    4938:	f8c0 5214 	str.w	r5, [r0, #532]	; 0x214
    493c:	4604      	mov	r4, r0
    m_status = 0;
    493e:	f880 5210 	strb.w	r5, [r0, #528]	; 0x210
  ExFatPartition() = default;
    4942:	f880 5444 	strb.w	r5, [r0, #1092]	; 0x444
    4946:	f880 5479 	strb.w	r5, [r0, #1145]	; 0x479
    494a:	f8a0 547a 	strh.w	r5, [r0, #1146]	; 0x47a
    494e:	f8c6 0484 	str.w	r0, [r6, #1156]	; 0x484
    4952:	f7fe fba7 	bl	30a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4956:	2800      	cmp	r0, #0
    4958:	d13e      	bne.n	49d8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xd4>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    495a:	2500      	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    495c:	4631      	mov	r1, r6
    495e:	f44f 608d 	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
    4962:	f8c6 5484 	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    4966:	f7ff ffcb 	bl	4900 <operator new(unsigned int, unsigned long*)>
  FatPartition() = default;
    496a:	71c5      	strb	r5, [r0, #7]
    m_blockDev = blockDev;
    496c:	6285      	str	r5, [r0, #40]	; 0x28
    if (!init(dev, part, volStart)) {
    496e:	4653      	mov	r3, sl
    m_status = 0;
    4970:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
    4974:	4642      	mov	r2, r8
    m_blockDev = blockDev;
    4976:	f8c0 5238 	str.w	r5, [r0, #568]	; 0x238
    497a:	4639      	mov	r1, r7
    m_status = 0;
    497c:	f880 5234 	strb.w	r5, [r0, #564]	; 0x234
    4980:	4604      	mov	r4, r0
    4982:	f8a0 5444 	strh.w	r5, [r0, #1092]	; 0x444
    4986:	f880 5446 	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    498a:	f04f 35ff 	mov.w	r5, #4294967295
    498e:	62c5      	str	r5, [r0, #44]	; 0x2c
    4990:	f8c0 523c 	str.w	r5, [r0, #572]	; 0x23c
    4994:	f8c6 0480 	str.w	r0, [r6, #1152]	; 0x480
    4998:	f7ff fe44 	bl	4624 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    499c:	b928      	cbnz	r0, 49aa <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xa6>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    499e:	2300      	movs	r3, #0
  return false;
    49a0:	4618      	mov	r0, r3
  m_fVol = nullptr;
    49a2:	f8c6 3480 	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    49a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    49aa:	f204 4544 	addw	r5, r4, #1092	; 0x444
    49ae:	4628      	mov	r0, r5
    49b0:	f7fe fcde 	bl	3370 <FatFile::close()>
    return m_vwd.openRoot(this);
    49b4:	4621      	mov	r1, r4
    49b6:	4628      	mov	r0, r5
    49b8:	f7fe fe96 	bl	36e8 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    49bc:	2800      	cmp	r0, #0
    49be:	d0ee      	beq.n	499e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x9a>
    if (setCwv || !m_cwv) {
    49c0:	4b12      	ldr	r3, [pc, #72]	; (4a0c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
    49c2:	681a      	ldr	r2, [r3, #0]
    49c4:	b9ba      	cbnz	r2, 49f6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf2>
      m_cwv = this;
    49c6:	601c      	str	r4, [r3, #0]
  if (setCwv || !m_cwv) {
    49c8:	4b11      	ldr	r3, [pc, #68]	; (4a10 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    49ca:	f1b9 0f00 	cmp.w	r9, #0
    49ce:	d016      	beq.n	49fe <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfa>
  return true;
    49d0:	2001      	movs	r0, #1
    m_cwv = this;
    49d2:	601e      	str	r6, [r3, #0]
}
    49d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    49d8:	f504 6589 	add.w	r5, r4, #1096	; 0x448
    49dc:	4628      	mov	r0, r5
    49de:	f7fd f937 	bl	1c50 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    49e2:	4621      	mov	r1, r4
    49e4:	4628      	mov	r0, r5
    49e6:	f7fd f93d 	bl	1c64 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    49ea:	2800      	cmp	r0, #0
    49ec:	d0b5      	beq.n	495a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
    if (setCwv || !m_cwv) {
    49ee:	4b09      	ldr	r3, [pc, #36]	; (4a14 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x110>)
    49f0:	681a      	ldr	r2, [r3, #0]
    49f2:	2a00      	cmp	r2, #0
    49f4:	d0e7      	beq.n	49c6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc2>
  if (setCwv || !m_cwv) {
    49f6:	4b06      	ldr	r3, [pc, #24]	; (4a10 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    49f8:	f1b9 0f00 	cmp.w	r9, #0
    49fc:	d1e8      	bne.n	49d0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
    49fe:	681a      	ldr	r2, [r3, #0]
    4a00:	2a00      	cmp	r2, #0
    4a02:	d0e5      	beq.n	49d0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
  return true;
    4a04:	2001      	movs	r0, #1
}
    4a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a0a:	bf00      	nop
    4a0c:	2001e0a8 	.word	0x2001e0a8
    4a10:	2001e0a4 	.word	0x2001e0a4
    4a14:	2001e070 	.word	0x2001e070

00004a18 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    4a18:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    4a1a:	2500      	movs	r5, #0
    4a1c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    4a20:	4604      	mov	r4, r0
    4a22:	6045      	str	r5, [r0, #4]
    4a24:	7305      	strb	r5, [r0, #12]
    4a26:	6086      	str	r6, [r0, #8]
    4a28:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4a2c:	4d03      	ldr	r5, [pc, #12]	; (4a3c <FsVolume::open(char const*, int)+0x24>)
    4a2e:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    4a32:	f7ff ff15 	bl	4860 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    4a36:	4620      	mov	r0, r4
    4a38:	bd70      	pop	{r4, r5, r6, pc}
    4a3a:	bf00      	nop
    4a3c:	2000079c 	.word	0x2000079c

00004a40 <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
    4a40:	f04f 30ff 	mov.w	r0, #4294967295
    4a44:	4770      	bx	lr
    4a46:	bf00      	nop

00004a48 <SharedSpiCard::errorCode() const>:
  uint8_t errorCode() const { return m_errorCode; }
    4a48:	7c80      	ldrb	r0, [r0, #18]
    4a4a:	4770      	bx	lr

00004a4c <SharedSpiCard::errorData() const>:
  uint32_t errorData() const { return m_status; }
    4a4c:	7d40      	ldrb	r0, [r0, #21]
    4a4e:	4770      	bx	lr

00004a50 <SharedSpiCard::type() const>:
  uint8_t type() const { return m_type; }
    4a50:	7d80      	ldrb	r0, [r0, #22]
    4a52:	4770      	bx	lr

00004a54 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    4a54:	2001      	movs	r0, #1
    4a56:	4770      	bx	lr

00004a58 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    4a58:	7f00      	ldrb	r0, [r0, #28]
    4a5a:	4770      	bx	lr

00004a5c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4a5c:	4770      	bx	lr
    4a5e:	bf00      	nop

00004a60 <DedicatedSpiCard::~DedicatedSpiCard()>:
    4a60:	b510      	push	{r4, lr}
    4a62:	4604      	mov	r4, r0
    4a64:	2120      	movs	r1, #32
    4a66:	f003 faff 	bl	8068 <operator delete(void*, unsigned int)>
    4a6a:	4620      	mov	r0, r4
    4a6c:	bd10      	pop	{r4, pc}
    4a6e:	bf00      	nop

00004a70 <SharedSpiCard::end()>:
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
//------------------------------------------------------------------------------
void SharedSpiCard::end() {
    4a70:	b538      	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    4a72:	7c03      	ldrb	r3, [r0, #16]
    4a74:	b153      	cbz	r3, 4a8c <SharedSpiCard::end()+0x1c>
    syncDevice();
    4a76:	4605      	mov	r5, r0
    4a78:	4604      	mov	r4, r0
    4a7a:	f855 3b04 	ldr.w	r3, [r5], #4
    4a7e:	69db      	ldr	r3, [r3, #28]
    4a80:	4798      	blx	r3
  void spiEnd() { m_spiDriver.end(); }
    4a82:	4628      	mov	r0, r5
    4a84:	f002 fa4a 	bl	6f1c <SdSpiArduinoDriver::end()>
    spiEnd();
    m_beginCalled = false;
    4a88:	2300      	movs	r3, #0
    4a8a:	7423      	strb	r3, [r4, #16]
  }
}
    4a8c:	bd38      	pop	{r3, r4, r5, pc}
    4a8e:	bf00      	nop

00004a90 <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    4a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a94:	4e20      	ldr	r6, [pc, #128]	; (4b18 <SharedSpiCard::writeStop()+0x88>)
    4a96:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    4a98:	f100 0804 	add.w	r8, r0, #4
    4a9c:	6835      	ldr	r5, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4a9e:	f505 7516 	add.w	r5, r5, #600	; 0x258
    4aa2:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    4aa4:	e003      	b.n	4aae <SharedSpiCard::writeStop()+0x1e>
    4aa6:	6833      	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4aa8:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4aaa:	041b      	lsls	r3, r3, #16
    4aac:	d410      	bmi.n	4ad0 <SharedSpiCard::writeStop()+0x40>
    4aae:	4640      	mov	r0, r8
    4ab0:	f002 fa38 	bl	6f24 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4ab4:	28ff      	cmp	r0, #255	; 0xff
    4ab6:	4604      	mov	r4, r0
    4ab8:	d1f5      	bne.n	4aa6 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    4aba:	21fd      	movs	r1, #253	; 0xfd
    4abc:	4640      	mov	r0, r8
    4abe:	f002 fa4f 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    4ac2:	7cfb      	ldrb	r3, [r7, #19]
    4ac4:	b9cb      	cbnz	r3, 4afa <SharedSpiCard::writeStop()+0x6a>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4ac6:	2300      	movs	r3, #0
    4ac8:	2001      	movs	r0, #1
    4aca:	753b      	strb	r3, [r7, #20]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    4acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    4ad0:	231f      	movs	r3, #31
  if (m_spiActive) {
    4ad2:	7cf8      	ldrb	r0, [r7, #19]
    4ad4:	74bb      	strb	r3, [r7, #18]
    4ad6:	2800      	cmp	r0, #0
    4ad8:	d0f8      	beq.n	4acc <SharedSpiCard::writeStop()+0x3c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4ada:	7c78      	ldrb	r0, [r7, #17]
    4adc:	2101      	movs	r1, #1
    4ade:	f002 f961 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ae2:	21ff      	movs	r1, #255	; 0xff
    4ae4:	4640      	mov	r0, r8
    4ae6:	f002 fa3b 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4aea:	4640      	mov	r0, r8
    4aec:	f002 f9ee 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4af0:	2300      	movs	r3, #0
  return false;
    4af2:	4618      	mov	r0, r3
    m_spiActive = false;
    4af4:	74fb      	strb	r3, [r7, #19]
}
    4af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4afa:	2101      	movs	r1, #1
    4afc:	7c78      	ldrb	r0, [r7, #17]
    4afe:	f002 f951 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4b02:	4621      	mov	r1, r4
    4b04:	4640      	mov	r0, r8
    4b06:	f002 fa2b 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4b0a:	4640      	mov	r0, r8
    4b0c:	f002 f9de 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4b10:	2300      	movs	r3, #0
    4b12:	74fb      	strb	r3, [r7, #19]
}
    4b14:	e7d7      	b.n	4ac6 <SharedSpiCard::writeStop()+0x36>
    4b16:	bf00      	nop
    4b18:	2001ec58 	.word	0x2001ec58

00004b1c <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    4b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    4b20:	7d03      	ldrb	r3, [r0, #20]
    4b22:	2b01      	cmp	r3, #1
    4b24:	d035      	beq.n	4b92 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    4b26:	7cc6      	ldrb	r6, [r0, #19]
    4b28:	4604      	mov	r4, r0
    4b2a:	b14e      	cbz	r6, 4b40 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    4b2c:	3004      	adds	r0, #4
    4b2e:	f002 f9f9 	bl	6f24 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    4b32:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4b36:	bf18      	it	ne
    4b38:	2501      	movne	r5, #1
}
    4b3a:	4628      	mov	r0, r5
    4b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    4b40:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    4b42:	f04f 0801 	mov.w	r8, #1
    4b46:	4638      	mov	r0, r7
    4b48:	f002 f9b6 	bl	6eb8 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    4b4c:	4631      	mov	r1, r6
    4b4e:	7c60      	ldrb	r0, [r4, #17]
    4b50:	f884 8013 	strb.w	r8, [r4, #19]
    4b54:	f002 f926 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4b58:	21ff      	movs	r1, #255	; 0xff
    4b5a:	4638      	mov	r0, r7
    4b5c:	f002 fa00 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4b60:	4638      	mov	r0, r7
    4b62:	f002 f9df 	bl	6f24 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    4b66:	7ce3      	ldrb	r3, [r4, #19]
  bool rtn = 0XFF != spiReceive();
    4b68:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4b6c:	bf18      	it	ne
    4b6e:	2501      	movne	r5, #1
  if (m_spiActive) {
    4b70:	2b00      	cmp	r3, #0
    4b72:	d0e2      	beq.n	4b3a <SharedSpiCard::isBusy()+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4b74:	4641      	mov	r1, r8
    4b76:	7c60      	ldrb	r0, [r4, #17]
    4b78:	f002 f914 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4b7c:	21ff      	movs	r1, #255	; 0xff
    4b7e:	4638      	mov	r0, r7
    4b80:	f002 f9ee 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4b84:	4638      	mov	r0, r7
    4b86:	f002 f9a1 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
}
    4b8a:	4628      	mov	r0, r5
    m_spiActive = false;
    4b8c:	74e6      	strb	r6, [r4, #19]
}
    4b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4b92:	2500      	movs	r5, #0
}
    4b94:	4628      	mov	r0, r5
    4b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b9a:	bf00      	nop

00004b9c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    4b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4ba0:	4f20      	ldr	r7, [pc, #128]	; (4c24 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    4ba2:	4604      	mov	r4, r0
    4ba4:	4688      	mov	r8, r1
    4ba6:	4691      	mov	r9, r2
    4ba8:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    4baa:	1d06      	adds	r6, r0, #4
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4bac:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    4bb0:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    4bb2:	e003      	b.n	4bbc <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    4bb4:	683b      	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4bb6:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4bb8:	041b      	lsls	r3, r3, #16
    4bba:	d40d      	bmi.n	4bd8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    4bbc:	4630      	mov	r0, r6
    4bbe:	f002 f9b1 	bl	6f24 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    4bc2:	28ff      	cmp	r0, #255	; 0xff
    4bc4:	7560      	strb	r0, [r4, #21]
    4bc6:	d0f5      	beq.n	4bb4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    4bc8:	28fe      	cmp	r0, #254	; 0xfe
    4bca:	d01a      	beq.n	4c02 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    4bcc:	2319      	movs	r3, #25
  if (m_spiActive) {
    4bce:	7ce0      	ldrb	r0, [r4, #19]
    m_errorCode = code;
    4bd0:	74a3      	strb	r3, [r4, #18]
    4bd2:	b930      	cbnz	r0, 4be2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    4bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4bd8:	231e      	movs	r3, #30
  if (m_spiActive) {
    4bda:	7ce0      	ldrb	r0, [r4, #19]
    4bdc:	74a3      	strb	r3, [r4, #18]
    4bde:	2800      	cmp	r0, #0
    4be0:	d0f8      	beq.n	4bd4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4be2:	7c60      	ldrb	r0, [r4, #17]
    4be4:	2101      	movs	r1, #1
    4be6:	f002 f8dd 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4bea:	21ff      	movs	r1, #255	; 0xff
    4bec:	4630      	mov	r0, r6
    4bee:	f002 f9b7 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4bf2:	4630      	mov	r0, r6
    4bf4:	f002 f96a 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4bf8:	2300      	movs	r3, #0
  return false;
    4bfa:	4618      	mov	r0, r3
    m_spiActive = false;
    4bfc:	74e3      	strb	r3, [r4, #19]
}
    4bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    4c02:	464a      	mov	r2, r9
    4c04:	4641      	mov	r1, r8
    4c06:	4630      	mov	r0, r6
    4c08:	f002 f998 	bl	6f3c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    4c0c:	7560      	strb	r0, [r4, #21]
    4c0e:	b938      	cbnz	r0, 4c20 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    4c10:	4630      	mov	r0, r6
    4c12:	f002 f987 	bl	6f24 <SdSpiArduinoDriver::receive()>
    4c16:	4630      	mov	r0, r6
    4c18:	f002 f984 	bl	6f24 <SdSpiArduinoDriver::receive()>
  return true;
    4c1c:	2001      	movs	r0, #1
    4c1e:	e7d9      	b.n	4bd4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    4c20:	2326      	movs	r3, #38	; 0x26
    4c22:	e7d4      	b.n	4bce <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    4c24:	2001ec58 	.word	0x2001ec58

00004c28 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    4c28:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    4c2a:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    4c2c:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    4c2e:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    4c30:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    4c32:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    4c34:	7507      	strb	r7, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    4c36:	f000 f83b 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4c3a:	b9b0      	cbnz	r0, 4c6a <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    4c3c:	7ce6      	ldrb	r6, [r4, #19]
    4c3e:	b91e      	cbnz	r6, 4c48 <SharedSpiCard::readStop()+0x20>
  return true;
    4c40:	2601      	movs	r6, #1
}
    4c42:	4630      	mov	r0, r6
    4c44:	b003      	add	sp, #12
    4c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4c48:	4605      	mov	r5, r0
    4c4a:	2101      	movs	r1, #1
    4c4c:	7c60      	ldrb	r0, [r4, #17]
    4c4e:	f002 f8a9 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c52:	1d20      	adds	r0, r4, #4
    4c54:	21ff      	movs	r1, #255	; 0xff
    4c56:	9001      	str	r0, [sp, #4]
    4c58:	f002 f982 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4c5c:	9801      	ldr	r0, [sp, #4]
    4c5e:	f002 f935 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    4c62:	4630      	mov	r0, r6
    m_spiActive = false;
    4c64:	74e5      	strb	r5, [r4, #19]
}
    4c66:	b003      	add	sp, #12
    4c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    4c6a:	2309      	movs	r3, #9
  if (m_spiActive) {
    4c6c:	7ce6      	ldrb	r6, [r4, #19]
    4c6e:	74a3      	strb	r3, [r4, #18]
    4c70:	2e00      	cmp	r6, #0
    4c72:	d0e6      	beq.n	4c42 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    4c74:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4c76:	7c60      	ldrb	r0, [r4, #17]
    4c78:	2101      	movs	r1, #1
}
    4c7a:	463e      	mov	r6, r7
    4c7c:	f002 f892 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c80:	21ff      	movs	r1, #255	; 0xff
    4c82:	4628      	mov	r0, r5
    4c84:	f002 f96c 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4c88:	4628      	mov	r0, r5
    4c8a:	f002 f91f 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
}
    4c8e:	4630      	mov	r0, r6
    m_spiActive = false;
    4c90:	74e7      	strb	r7, [r4, #19]
}
    4c92:	b003      	add	sp, #12
    4c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c96:	bf00      	nop

00004c98 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    4c98:	7d02      	ldrb	r2, [r0, #20]
    4c9a:	2a02      	cmp	r2, #2
    4c9c:	d003      	beq.n	4ca6 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    4c9e:	2a01      	cmp	r2, #1
    4ca0:	d004      	beq.n	4cac <SharedSpiCard::syncDevice()+0x14>
}
    4ca2:	2001      	movs	r0, #1
    4ca4:	4770      	bx	lr
    return writeStop();
    4ca6:	6803      	ldr	r3, [r0, #0]
    4ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4caa:	4718      	bx	r3
    return readStop();
    4cac:	f7ff bfbc 	b.w	4c28 <SharedSpiCard::readStop()>

00004cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    4cb4:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4cb6:	b082      	sub	sp, #8
    4cb8:	460f      	mov	r7, r1
    4cba:	4936      	ldr	r1, [pc, #216]	; (4d94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>)
    4cbc:	9201      	str	r2, [sp, #4]
    4cbe:	4606      	mov	r6, r0
  if (!syncDevice()) {
    4cc0:	69da      	ldr	r2, [r3, #28]
    4cc2:	428a      	cmp	r2, r1
    4cc4:	d15d      	bne.n	4d82 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd2>
  if (m_state == WRITE_STATE) {
    4cc6:	7d02      	ldrb	r2, [r0, #20]
    4cc8:	2a02      	cmp	r2, #2
    4cca:	d043      	beq.n	4d54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
  if (m_state == READ_STATE) {
    4ccc:	2a01      	cmp	r2, #1
    4cce:	d05c      	beq.n	4d8a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xda>
  if (!m_spiActive) {
    4cd0:	7cf4      	ldrb	r4, [r6, #19]
    4cd2:	2c00      	cmp	r4, #0
    4cd4:	d046      	beq.n	4d64 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb4>
  void spiActivate() { m_spiDriver.activate(); }
    4cd6:	1d35      	adds	r5, r6, #4
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    4cd8:	b19f      	cbz	r7, 4d02 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    4cda:	2f0c      	cmp	r7, #12
    4cdc:	d011      	beq.n	4d02 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    4cde:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4d98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe8>
    4ce2:	f8d8 4000 	ldr.w	r4, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4ce6:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    4cea:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    4cec:	e004      	b.n	4cf8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    4cee:	f8d8 3000 	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4cf2:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    4cf4:	0419      	lsls	r1, r3, #16
    4cf6:	d431      	bmi.n	4d5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    return m_spiDriver.receive();
    4cf8:	4628      	mov	r0, r5
    4cfa:	f002 f913 	bl	6f24 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4cfe:	28ff      	cmp	r0, #255	; 0xff
    4d00:	d1f5      	bne.n	4cee <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
    m_spiDriver.send(data);
    4d02:	f10d 0804 	add.w	r8, sp, #4
    4d06:	ac02      	add	r4, sp, #8
    4d08:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    4d0c:	4628      	mov	r0, r5
    4d0e:	f002 f927 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
    4d12:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    4d16:	4628      	mov	r0, r5
    4d18:	f002 f922 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    4d1c:	4544      	cmp	r4, r8
    4d1e:	d1f8      	bne.n	4d12 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    4d20:	2f00      	cmp	r7, #0
    4d22:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    4d24:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    4d28:	bf0c      	ite	eq
    4d2a:	2195      	moveq	r1, #149	; 0x95
    4d2c:	2187      	movne	r1, #135	; 0x87
    4d2e:	f002 f917 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4d32:	4628      	mov	r0, r5
    4d34:	f002 f8f6 	bl	6f24 <SdSpiArduinoDriver::receive()>
    4d38:	4628      	mov	r0, r5
    4d3a:	f002 f8f3 	bl	6f24 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    4d3e:	0602      	lsls	r2, r0, #24
    4d40:	f104 33ff 	add.w	r3, r4, #4294967295
    m_status = spiReceive();
    4d44:	7570      	strb	r0, [r6, #21]
  } while (m_status & 0X80 && ++n < 10);
    4d46:	d502      	bpl.n	4d4e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9e>
    4d48:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    4d4c:	d1f4      	bne.n	4d38 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x88>
}
    4d4e:	b002      	add	sp, #8
    4d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    4d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4d56:	4798      	blx	r3
  if (!syncDevice()) {
    4d58:	2800      	cmp	r0, #0
    4d5a:	d1b9      	bne.n	4cd0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    4d5c:	20ff      	movs	r0, #255	; 0xff
}
    4d5e:	b002      	add	sp, #8
    4d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    4d64:	1d35      	adds	r5, r6, #4
    4d66:	4628      	mov	r0, r5
    4d68:	f002 f8a6 	bl	6eb8 <SdSpiArduinoDriver::activate()>
    m_spiActive = true;
    4d6c:	2301      	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
    4d6e:	4621      	mov	r1, r4
    4d70:	7c70      	ldrb	r0, [r6, #17]
    4d72:	74f3      	strb	r3, [r6, #19]
    4d74:	f002 f816 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d78:	21ff      	movs	r1, #255	; 0xff
    4d7a:	4628      	mov	r0, r5
    4d7c:	f002 f8f0 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
}
    4d80:	e7aa      	b.n	4cd8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    4d82:	4790      	blx	r2
    4d84:	2800      	cmp	r0, #0
    4d86:	d0e9      	beq.n	4d5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    4d88:	e7a2      	b.n	4cd0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return readStop();
    4d8a:	f7ff ff4d 	bl	4c28 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    4d8e:	2800      	cmp	r0, #0
    4d90:	d0e4      	beq.n	4d5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    4d92:	e79d      	b.n	4cd0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    4d94:	00004c99 	.word	0x00004c99
    4d98:	2001ec58 	.word	0x2001ec58

00004d9c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    4d9c:	b570      	push	{r4, r5, r6, lr}
    4d9e:	460c      	mov	r4, r1
    4da0:	b082      	sub	sp, #8
    4da2:	4616      	mov	r6, r2
  if (cardCommand(CMD6, arg)) {
    4da4:	2106      	movs	r1, #6
    4da6:	4622      	mov	r2, r4
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    4da8:	4604      	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    4daa:	f7ff ff81 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4dae:	b1b0      	cbz	r0, 4dde <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x42>
    m_errorCode = code;
    4db0:	2304      	movs	r3, #4
    4db2:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    4db4:	7ce0      	ldrb	r0, [r4, #19]
    4db6:	b908      	cbnz	r0, 4dbc <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x20>
}
    4db8:	b002      	add	sp, #8
    4dba:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    4dbc:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4dbe:	7c60      	ldrb	r0, [r4, #17]
    4dc0:	2101      	movs	r1, #1
    4dc2:	f001 ffef 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4dc6:	21ff      	movs	r1, #255	; 0xff
    4dc8:	4628      	mov	r0, r5
    4dca:	f002 f8c9 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4dce:	4628      	mov	r0, r5
    4dd0:	f002 f87c 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4dd4:	2300      	movs	r3, #0
  return false;
    4dd6:	4618      	mov	r0, r3
    m_spiActive = false;
    4dd8:	74e3      	strb	r3, [r4, #19]
}
    4dda:	b002      	add	sp, #8
    4ddc:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(status, 64)) {
    4dde:	4605      	mov	r5, r0
    4de0:	2240      	movs	r2, #64	; 0x40
    4de2:	4631      	mov	r1, r6
    4de4:	4620      	mov	r0, r4
    4de6:	f7ff fed9 	bl	4b9c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    4dea:	2800      	cmp	r0, #0
    4dec:	d0e2      	beq.n	4db4 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x18>
  if (m_spiActive) {
    4dee:	7ce6      	ldrb	r6, [r4, #19]
    4df0:	2e00      	cmp	r6, #0
    4df2:	d0e1      	beq.n	4db8 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4df4:	7c60      	ldrb	r0, [r4, #17]
    4df6:	2101      	movs	r1, #1
    4df8:	f001 ffd4 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4dfc:	1d20      	adds	r0, r4, #4
    4dfe:	21ff      	movs	r1, #255	; 0xff
    4e00:	9001      	str	r0, [sp, #4]
    4e02:	f002 f8ad 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4e06:	9801      	ldr	r0, [sp, #4]
    4e08:	f002 f860 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
}
    4e0c:	4630      	mov	r0, r6
    m_spiActive = false;
    4e0e:	74e5      	strb	r5, [r4, #19]
}
    4e10:	b002      	add	sp, #8
    4e12:	bd70      	pop	{r4, r5, r6, pc}

00004e14 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    4e16:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4e18:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    4e1a:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4e1c:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    4e1e:	f7ff ff47 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4e22:	b9e0      	cbnz	r0, 4e5e <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    4e24:	1d37      	adds	r7, r6, #4
    4e26:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    4e28:	4638      	mov	r0, r7
    4e2a:	f002 f87b 	bl	6f24 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    4e2e:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    4e32:	42a5      	cmp	r5, r4
    4e34:	d1f8      	bne.n	4e28 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    4e36:	7cf4      	ldrb	r4, [r6, #19]
    4e38:	b914      	cbnz	r4, 4e40 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    4e3a:	2401      	movs	r4, #1
}
    4e3c:	4620      	mov	r0, r4
    4e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4e40:	7c70      	ldrb	r0, [r6, #17]
    4e42:	2101      	movs	r1, #1
    4e44:	f001 ffae 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4e48:	21ff      	movs	r1, #255	; 0xff
    4e4a:	4638      	mov	r0, r7
    4e4c:	f002 f888 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4e50:	4638      	mov	r0, r7
    4e52:	f002 f83b 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4e56:	2300      	movs	r3, #0
}
    4e58:	4620      	mov	r0, r4
    m_spiActive = false;
    4e5a:	74f3      	strb	r3, [r6, #19]
}
    4e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    4e5e:	2312      	movs	r3, #18
  if (m_spiActive) {
    4e60:	7cf4      	ldrb	r4, [r6, #19]
    4e62:	74b3      	strb	r3, [r6, #18]
    4e64:	2c00      	cmp	r4, #0
    4e66:	d0e9      	beq.n	4e3c <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    4e68:	1d34      	adds	r4, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4e6a:	7c70      	ldrb	r0, [r6, #17]
    4e6c:	2101      	movs	r1, #1
    4e6e:	f001 ff99 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4e72:	21ff      	movs	r1, #255	; 0xff
    4e74:	4620      	mov	r0, r4
    4e76:	f002 f873 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4e7a:	4620      	mov	r0, r4
    4e7c:	f002 f826 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4e80:	2300      	movs	r3, #0
  return false;
    4e82:	461c      	mov	r4, r3
    m_spiActive = false;
    4e84:	74f3      	strb	r3, [r6, #19]
}
    4e86:	4620      	mov	r0, r4
    4e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e8a:	bf00      	nop

00004e8c <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    4e8c:	b570      	push	{r4, r5, r6, lr}
    4e8e:	4616      	mov	r6, r2
    4e90:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    4e92:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    4e94:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    4e96:	f7ff ff0b 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4e9a:	b1b0      	cbz	r0, 4eca <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    4e9c:	231c      	movs	r3, #28
    4e9e:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    4ea0:	7ce0      	ldrb	r0, [r4, #19]
    4ea2:	b908      	cbnz	r0, 4ea8 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    4ea4:	b002      	add	sp, #8
    4ea6:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    4ea8:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4eaa:	7c60      	ldrb	r0, [r4, #17]
    4eac:	2101      	movs	r1, #1
    4eae:	f001 ff79 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4eb2:	21ff      	movs	r1, #255	; 0xff
    4eb4:	4628      	mov	r0, r5
    4eb6:	f002 f853 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4eba:	4628      	mov	r0, r5
    4ebc:	f002 f806 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4ec0:	2300      	movs	r3, #0
  return false;
    4ec2:	4618      	mov	r0, r3
    m_spiActive = false;
    4ec4:	74e3      	strb	r3, [r4, #19]
}
    4ec6:	b002      	add	sp, #8
    4ec8:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    4eca:	4605      	mov	r5, r0
    4ecc:	2210      	movs	r2, #16
    4ece:	4631      	mov	r1, r6
    4ed0:	4620      	mov	r0, r4
    4ed2:	f7ff fe63 	bl	4b9c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    4ed6:	2800      	cmp	r0, #0
    4ed8:	d0e2      	beq.n	4ea0 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    4eda:	7ce6      	ldrb	r6, [r4, #19]
    4edc:	2e00      	cmp	r6, #0
    4ede:	d0e1      	beq.n	4ea4 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4ee0:	7c60      	ldrb	r0, [r4, #17]
    4ee2:	2101      	movs	r1, #1
    4ee4:	f001 ff5e 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ee8:	1d20      	adds	r0, r4, #4
    4eea:	21ff      	movs	r1, #255	; 0xff
    4eec:	9001      	str	r0, [sp, #4]
    4eee:	f002 f837 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4ef2:	9801      	ldr	r0, [sp, #4]
    4ef4:	f001 ffea 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
}
    4ef8:	4630      	mov	r0, r6
    m_spiActive = false;
    4efa:	74e5      	strb	r5, [r4, #19]
}
    4efc:	b002      	add	sp, #8
    4efe:	bd70      	pop	{r4, r5, r6, pc}

00004f00 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? csd.capacity() : 0;
    4f00:	6803      	ldr	r3, [r0, #0]
    4f02:	4a24      	ldr	r2, [pc, #144]	; (4f94 <SharedSpiCard::sectorCount()+0x94>)
    4f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4f06:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    4f08:	b500      	push	{lr}
    4f0a:	b085      	sub	sp, #20
    4f0c:	d10e      	bne.n	4f2c <SharedSpiCard::sectorCount()+0x2c>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    4f0e:	466a      	mov	r2, sp
    4f10:	2109      	movs	r1, #9
    4f12:	f7ff ffbb 	bl	4e8c <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? csd.capacity() : 0;
    4f16:	b130      	cbz	r0, 4f26 <SharedSpiCard::sectorCount()+0x26>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    4f18:	f89d 3000 	ldrb.w	r3, [sp]
    if (ver == 0) {
    4f1c:	099b      	lsrs	r3, r3, #6
    4f1e:	d008      	beq.n	4f32 <SharedSpiCard::sectorCount()+0x32>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    4f20:	2b01      	cmp	r3, #1
    4f22:	d027      	beq.n	4f74 <SharedSpiCard::sectorCount()+0x74>
    4f24:	2000      	movs	r0, #0
}
    4f26:	b005      	add	sp, #20
    4f28:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? csd.capacity() : 0;
    4f2c:	4669      	mov	r1, sp
    4f2e:	4798      	blx	r3
    4f30:	e7f1      	b.n	4f16 <SharedSpiCard::sectorCount()+0x16>
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    4f32:	f89d 3009 	ldrb.w	r3, [sp, #9]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    4f36:	f89d 2006 	ldrb.w	r2, [sp, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    4f3a:	f89d 0008 	ldrb.w	r0, [sp, #8]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    4f3e:	005b      	lsls	r3, r3, #1
    4f40:	f89d 100a 	ldrb.w	r1, [sp, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    4f44:	0292      	lsls	r2, r2, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    4f46:	f89d c007 	ldrb.w	ip, [sp, #7]
    4f4a:	0980      	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    4f4c:	f003 0306 	and.w	r3, r3, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    4f50:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    4f54:	ea40 008c 	orr.w	r0, r0, ip, lsl #2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    4f58:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
      uint8_t read_bl_len = csd[5] & 15;
    4f5c:	f89d 1005 	ldrb.w	r1, [sp, #5]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    4f60:	4310      	orrs	r0, r2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    4f62:	f001 020f 	and.w	r2, r1, #15
    4f66:	3001      	adds	r0, #1
    4f68:	4413      	add	r3, r2
    4f6a:	3b07      	subs	r3, #7
    4f6c:	4098      	lsls	r0, r3
}
    4f6e:	b005      	add	sp, #20
    4f70:	f85d fb04 	ldr.w	pc, [sp], #4
      c_size = (uint32_t)(csd[7] & 63) << 16;
    4f74:	f89d 3007 	ldrb.w	r3, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
    4f78:	f8bd 0008 	ldrh.w	r0, [sp, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    4f7c:	041b      	lsls	r3, r3, #16
      c_size |= csd[9];
    4f7e:	ba40      	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    4f80:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    4f84:	b280      	uxth	r0, r0
    4f86:	4318      	orrs	r0, r3
      return (c_size + 1) << 10;
    4f88:	3001      	adds	r0, #1
    4f8a:	0280      	lsls	r0, r0, #10
    4f8c:	b005      	add	sp, #20
    4f8e:	f85d fb04 	ldr.w	pc, [sp], #4
    4f92:	bf00      	nop
    4f94:	00005365 	.word	0x00005365

00004f98 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    4f98:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    4f9a:	460a      	mov	r2, r1
    4f9c:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    4f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::readStart(uint32_t sector) {
    4fa0:	b083      	sub	sp, #12
    4fa2:	4d16      	ldr	r5, [pc, #88]	; (4ffc <SharedSpiCard::readStart(unsigned long)+0x64>)
    4fa4:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    4fa6:	42ab      	cmp	r3, r5
    4fa8:	d124      	bne.n	4ff4 <SharedSpiCard::readStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    4faa:	7d80      	ldrb	r0, [r0, #22]
    4fac:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    4fae:	f04f 0112 	mov.w	r1, #18
    4fb2:	4620      	mov	r0, r4
    sector <<= 9;
    4fb4:	bf18      	it	ne
    4fb6:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    4fb8:	f7ff fe7a 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4fbc:	b920      	cbnz	r0, 4fc8 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    4fbe:	2301      	movs	r3, #1
  return true;
    4fc0:	4618      	mov	r0, r3
  m_state = READ_STATE;
    4fc2:	7523      	strb	r3, [r4, #20]
}
    4fc4:	b003      	add	sp, #12
    4fc6:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    4fc8:	230c      	movs	r3, #12
  if (m_spiActive) {
    4fca:	7ce0      	ldrb	r0, [r4, #19]
    4fcc:	74a3      	strb	r3, [r4, #18]
    4fce:	2800      	cmp	r0, #0
    4fd0:	d0f8      	beq.n	4fc4 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    4fd2:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4fd4:	7c60      	ldrb	r0, [r4, #17]
    4fd6:	2101      	movs	r1, #1
    4fd8:	f001 fee4 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4fdc:	21ff      	movs	r1, #255	; 0xff
    4fde:	4628      	mov	r0, r5
    4fe0:	f001 ffbe 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4fe4:	4628      	mov	r0, r5
    4fe6:	f001 ff71 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4fea:	2300      	movs	r3, #0
}
    4fec:	4618      	mov	r0, r3
    m_spiActive = false;
    4fee:	74e3      	strb	r3, [r4, #19]
}
    4ff0:	b003      	add	sp, #12
    4ff2:	bd30      	pop	{r4, r5, pc}
    4ff4:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    4ff6:	4798      	blx	r3
    4ff8:	9a01      	ldr	r2, [sp, #4]
    4ffa:	e7d7      	b.n	4fac <SharedSpiCard::readStart(unsigned long)+0x14>
    4ffc:	00004a51 	.word	0x00004a51

00005000 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    5000:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    5002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    5006:	695f      	ldr	r7, [r3, #20]
    5008:	4b16      	ldr	r3, [pc, #88]	; (5064 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    500a:	429f      	cmp	r7, r3
    500c:	d11f      	bne.n	504e <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    500e:	7d03      	ldrb	r3, [r0, #20]
    5010:	4604      	mov	r4, r0
    5012:	460d      	mov	r5, r1
    5014:	4616      	mov	r6, r2
    5016:	2b01      	cmp	r3, #1
    5018:	d102      	bne.n	5020 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    501a:	6983      	ldr	r3, [r0, #24]
    501c:	4299      	cmp	r1, r3
    501e:	d005      	beq.n	502c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    5020:	4629      	mov	r1, r5
    5022:	4620      	mov	r0, r4
    5024:	f7ff ffb8 	bl	4f98 <SharedSpiCard::readStart(unsigned long)>
    5028:	b170      	cbz	r0, 5048 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    502a:	61a5      	str	r5, [r4, #24]
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    502c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5030:	4631      	mov	r1, r6
    5032:	4620      	mov	r0, r4
    5034:	f7ff fdb2 	bl	4b9c <SharedSpiCard::readData(unsigned char*, unsigned int)>
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    5038:	b130      	cbz	r0, 5048 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
  }
  m_curSector += ns;
    503a:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    503c:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    503e:	3301      	adds	r3, #1
    5040:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    5042:	b148      	cbz	r0, 5058 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    5044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

fail:
  return false;
    5048:	2000      	movs	r0, #0
}
    504a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    504e:	46bc      	mov	ip, r7
    5050:	2301      	movs	r3, #1
}
    5052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    5056:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    5058:	4620      	mov	r0, r4
}
    505a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    505e:	f7ff bde3 	b.w	4c28 <SharedSpiCard::readStop()>
    5062:	bf00      	nop
    5064:	000053dd 	.word	0x000053dd

00005068 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    5068:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    506a:	460a      	mov	r2, r1
    506c:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    506e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeStart(uint32_t sector) {
    5070:	b083      	sub	sp, #12
    5072:	4d16      	ldr	r5, [pc, #88]	; (50cc <SharedSpiCard::writeStart(unsigned long)+0x64>)
    5074:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    5076:	42ab      	cmp	r3, r5
    5078:	d124      	bne.n	50c4 <SharedSpiCard::writeStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    507a:	7d80      	ldrb	r0, [r0, #22]
    507c:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    507e:	f04f 0119 	mov.w	r1, #25
    5082:	4620      	mov	r0, r4
    sector <<= 9;
    5084:	bf18      	it	ne
    5086:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    5088:	f7ff fe12 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    508c:	b920      	cbnz	r0, 5098 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    508e:	2302      	movs	r3, #2
  return true;
    5090:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    5092:	7523      	strb	r3, [r4, #20]
}
    5094:	b003      	add	sp, #12
    5096:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    5098:	230e      	movs	r3, #14
  if (m_spiActive) {
    509a:	7ce0      	ldrb	r0, [r4, #19]
    509c:	74a3      	strb	r3, [r4, #18]
    509e:	2800      	cmp	r0, #0
    50a0:	d0f8      	beq.n	5094 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    50a2:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    50a4:	7c60      	ldrb	r0, [r4, #17]
    50a6:	2101      	movs	r1, #1
    50a8:	f001 fe7c 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    50ac:	21ff      	movs	r1, #255	; 0xff
    50ae:	4628      	mov	r0, r5
    50b0:	f001 ff56 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    50b4:	4628      	mov	r0, r5
    50b6:	f001 ff09 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    50ba:	2300      	movs	r3, #0
}
    50bc:	4618      	mov	r0, r3
    m_spiActive = false;
    50be:	74e3      	strb	r3, [r4, #19]
}
    50c0:	b003      	add	sp, #12
    50c2:	bd30      	pop	{r4, r5, pc}
    50c4:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    50c6:	4798      	blx	r3
    50c8:	9a01      	ldr	r2, [sp, #4]
    50ca:	e7d7      	b.n	507c <SharedSpiCard::writeStart(unsigned long)+0x14>
    50cc:	00004a51 	.word	0x00004a51

000050d0 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    50d0:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    50d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    50d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    50d8:	4617      	mov	r7, r2
    50da:	4a41      	ldr	r2, [pc, #260]	; (51e0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    50dc:	b085      	sub	sp, #20
    50de:	4604      	mov	r4, r0
    50e0:	460e      	mov	r6, r1
    50e2:	4293      	cmp	r3, r2
    50e4:	d145      	bne.n	5172 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    50e6:	466a      	mov	r2, sp
    50e8:	2109      	movs	r1, #9
    50ea:	f7ff fecf 	bl	4e8c <SharedSpiCard::readRegister(unsigned char, void*)>
    50ee:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    50f0:	b1b5      	cbz	r5, 5120 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    } else {
      return 0;
    }
  }
  /** \return true if erase granularity is single block. */
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    50f2:	f89d 300a 	ldrb.w	r3, [sp, #10]
  if (!csd.eraseSingleBlock()) {
    50f6:	065a      	lsls	r2, r3, #25
    50f8:	d518      	bpl.n	512c <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    50fa:	7da3      	ldrb	r3, [r4, #22]
    50fc:	2b03      	cmp	r3, #3
    50fe:	d001      	beq.n	5104 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    5100:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    5102:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    5104:	4632      	mov	r2, r6
    5106:	2120      	movs	r1, #32
    5108:	4620      	mov	r0, r4
    510a:	f7ff fdd1 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    510e:	b928      	cbnz	r0, 511c <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    5110:	463a      	mov	r2, r7
    5112:	2121      	movs	r1, #33	; 0x21
    5114:	4620      	mov	r0, r4
    5116:	f7ff fdcb 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    511a:	b370      	cbz	r0, 517a <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    511c:	2327      	movs	r3, #39	; 0x27
    511e:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5120:	7ce5      	ldrb	r5, [r4, #19]
    5122:	b99d      	cbnz	r5, 514c <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    5124:	4628      	mov	r0, r5
    5126:	b005      	add	sp, #20
    5128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  /** \return erase size in 512 byte blocks if eraseSingleBlock is false. */
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    512c:	005b      	lsls	r3, r3, #1
    512e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    5132:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    5136:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    513a:	1c7a      	adds	r2, r7, #1
    513c:	4332      	orrs	r2, r6
    513e:	4213      	tst	r3, r2
    5140:	d0db      	beq.n	50fa <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    5142:	2328      	movs	r3, #40	; 0x28
  if (m_spiActive) {
    5144:	7ce5      	ldrb	r5, [r4, #19]
    5146:	74a3      	strb	r3, [r4, #18]
    5148:	2d00      	cmp	r5, #0
    514a:	d0eb      	beq.n	5124 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    514c:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    514e:	7c60      	ldrb	r0, [r4, #17]
    5150:	2101      	movs	r1, #1
    5152:	f001 fe27 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5156:	21ff      	movs	r1, #255	; 0xff
    5158:	4628      	mov	r0, r5
    515a:	f001 ff01 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    515e:	4628      	mov	r0, r5
    5160:	f001 feb4 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5164:	2300      	movs	r3, #0
  return false;
    5166:	461d      	mov	r5, r3
    m_spiActive = false;
    5168:	74e3      	strb	r3, [r4, #19]
}
    516a:	4628      	mov	r0, r5
    516c:	b005      	add	sp, #20
    516e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    5172:	4669      	mov	r1, sp
    5174:	4798      	blx	r3
    5176:	4605      	mov	r5, r0
    5178:	e7ba      	b.n	50f0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      cardCommand(CMD38, 0)) {
    517a:	4602      	mov	r2, r0
    517c:	2126      	movs	r1, #38	; 0x26
    517e:	4620      	mov	r0, r4
    5180:	f7ff fd96 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    5184:	2800      	cmp	r0, #0
    5186:	d1c9      	bne.n	511c <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    5188:	f8df 8058 	ldr.w	r8, [pc, #88]	; 51e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    518c:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    5190:	f104 0904 	add.w	r9, r4, #4
    5194:	f8d8 3000 	ldr.w	r3, [r8]
    5198:	441f      	add	r7, r3
    519a:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    519c:	e004      	b.n	51a8 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    519e:	f8d8 3000 	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    51a2:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    51a4:	041b      	lsls	r3, r3, #16
    51a6:	d417      	bmi.n	51d8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    51a8:	4648      	mov	r0, r9
    51aa:	f001 febb 	bl	6f24 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    51ae:	28ff      	cmp	r0, #255	; 0xff
    51b0:	4606      	mov	r6, r0
    51b2:	d1f4      	bne.n	519e <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    51b4:	7ce3      	ldrb	r3, [r4, #19]
    51b6:	2b00      	cmp	r3, #0
    51b8:	d0b4      	beq.n	5124 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    51ba:	2101      	movs	r1, #1
    51bc:	7c60      	ldrb	r0, [r4, #17]
  return true;
    51be:	461d      	mov	r5, r3
    51c0:	f001 fdf0 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    51c4:	4631      	mov	r1, r6
    51c6:	4648      	mov	r0, r9
    51c8:	f001 feca 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    51cc:	4648      	mov	r0, r9
    51ce:	f001 fe7d 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    51d2:	2300      	movs	r3, #0
    51d4:	74e3      	strb	r3, [r4, #19]
}
    51d6:	e7a5      	b.n	5124 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    51d8:	2329      	movs	r3, #41	; 0x29
    51da:	74a3      	strb	r3, [r4, #18]
    goto fail;
    51dc:	e7a0      	b.n	5120 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    51de:	bf00      	nop
    51e0:	00005365 	.word	0x00005365
    51e4:	2001ec58 	.word	0x2001ec58

000051e8 <SharedSpiCard::readSCR(scr_t*)>:
bool SharedSpiCard::readSCR(scr_t* scr) {
    51e8:	b570      	push	{r4, r5, r6, lr}
    51ea:	4604      	mov	r4, r0
    51ec:	b082      	sub	sp, #8
    cardCommand(CMD55, 0);
    51ee:	2200      	movs	r2, #0
    51f0:	460e      	mov	r6, r1
    51f2:	2137      	movs	r1, #55	; 0x37
    51f4:	f7ff fd5c 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    51f8:	2200      	movs	r2, #0
    51fa:	2133      	movs	r1, #51	; 0x33
    51fc:	4620      	mov	r0, r4
    51fe:	f7ff fd57 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD51, 0)) {
    5202:	b1b0      	cbz	r0, 5232 <SharedSpiCard::readSCR(scr_t*)+0x4a>
    m_errorCode = code;
    5204:	2318      	movs	r3, #24
    5206:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5208:	7ce0      	ldrb	r0, [r4, #19]
    520a:	b908      	cbnz	r0, 5210 <SharedSpiCard::readSCR(scr_t*)+0x28>
}
    520c:	b002      	add	sp, #8
    520e:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5210:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5212:	7c60      	ldrb	r0, [r4, #17]
    5214:	2101      	movs	r1, #1
    5216:	f001 fdc5 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    521a:	21ff      	movs	r1, #255	; 0xff
    521c:	4628      	mov	r0, r5
    521e:	f001 fe9f 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5222:	4628      	mov	r0, r5
    5224:	f001 fe52 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5228:	2300      	movs	r3, #0
  return false;
    522a:	4618      	mov	r0, r3
    m_spiActive = false;
    522c:	74e3      	strb	r3, [r4, #19]
}
    522e:	b002      	add	sp, #8
    5230:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, sizeof(scr_t))) {
    5232:	4605      	mov	r5, r0
    5234:	2208      	movs	r2, #8
    5236:	4631      	mov	r1, r6
    5238:	4620      	mov	r0, r4
    523a:	f7ff fcaf 	bl	4b9c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    523e:	2800      	cmp	r0, #0
    5240:	d0e2      	beq.n	5208 <SharedSpiCard::readSCR(scr_t*)+0x20>
  if (m_spiActive) {
    5242:	7ce6      	ldrb	r6, [r4, #19]
    5244:	2e00      	cmp	r6, #0
    5246:	d0e1      	beq.n	520c <SharedSpiCard::readSCR(scr_t*)+0x24>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5248:	7c60      	ldrb	r0, [r4, #17]
    524a:	2101      	movs	r1, #1
    524c:	f001 fdaa 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5250:	1d20      	adds	r0, r4, #4
    5252:	21ff      	movs	r1, #255	; 0xff
    5254:	9001      	str	r0, [sp, #4]
    5256:	f001 fe83 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    525a:	9801      	ldr	r0, [sp, #4]
    525c:	f001 fe36 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
}
    5260:	4630      	mov	r0, r6
    m_spiActive = false;
    5262:	74e5      	strb	r5, [r4, #19]
}
    5264:	b002      	add	sp, #8
    5266:	bd70      	pop	{r4, r5, r6, pc}

00005268 <SharedSpiCard::readSDS(sds_t*)>:
bool SharedSpiCard::readSDS(sds_t* sds) {
    5268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    526a:	4604      	mov	r4, r0
    cardCommand(CMD55, 0);
    526c:	2200      	movs	r2, #0
    526e:	460d      	mov	r5, r1
    5270:	2137      	movs	r1, #55	; 0x37
    5272:	f7ff fd1d 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    5276:	2200      	movs	r2, #0
    5278:	210d      	movs	r1, #13
    527a:	4620      	mov	r0, r4
    527c:	f7ff fd18 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    5280:	b1a0      	cbz	r0, 52ac <SharedSpiCard::readSDS(sds_t*)+0x44>
    m_errorCode = code;
    5282:	2315      	movs	r3, #21
    5284:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5286:	7ce0      	ldrb	r0, [r4, #19]
    5288:	b900      	cbnz	r0, 528c <SharedSpiCard::readSDS(sds_t*)+0x24>
}
    528a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_spiDriver.send(data);
    528c:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    528e:	7c60      	ldrb	r0, [r4, #17]
    5290:	2101      	movs	r1, #1
    5292:	f001 fd87 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5296:	21ff      	movs	r1, #255	; 0xff
    5298:	4628      	mov	r0, r5
    529a:	f001 fe61 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    529e:	4628      	mov	r0, r5
    52a0:	f001 fe14 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    52a4:	2300      	movs	r3, #0
  return false;
    52a6:	4618      	mov	r0, r3
    m_spiActive = false;
    52a8:	74e3      	strb	r3, [r4, #19]
}
    52aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_spiDriver.receive();
    52ac:	1d27      	adds	r7, r4, #4
    52ae:	4638      	mov	r0, r7
    52b0:	f001 fe38 	bl	6f24 <SdSpiArduinoDriver::receive()>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    52b4:	4606      	mov	r6, r0
    52b6:	2800      	cmp	r0, #0
    52b8:	d1e3      	bne.n	5282 <SharedSpiCard::readSDS(sds_t*)+0x1a>
  if (!readData(dst, sizeof(sds_t))) {
    52ba:	2240      	movs	r2, #64	; 0x40
    52bc:	4629      	mov	r1, r5
    52be:	4620      	mov	r0, r4
    52c0:	f7ff fc6c 	bl	4b9c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    52c4:	2800      	cmp	r0, #0
    52c6:	d0de      	beq.n	5286 <SharedSpiCard::readSDS(sds_t*)+0x1e>
  if (m_spiActive) {
    52c8:	7ce5      	ldrb	r5, [r4, #19]
    52ca:	2d00      	cmp	r5, #0
    52cc:	d0dd      	beq.n	528a <SharedSpiCard::readSDS(sds_t*)+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    52ce:	7c60      	ldrb	r0, [r4, #17]
    52d0:	2101      	movs	r1, #1
    52d2:	f001 fd67 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    52d6:	21ff      	movs	r1, #255	; 0xff
    52d8:	4638      	mov	r0, r7
    52da:	f001 fe41 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    52de:	4638      	mov	r0, r7
    52e0:	f001 fdf4 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
  return true;
    52e4:	4628      	mov	r0, r5
    m_spiActive = false;
    52e6:	74e6      	strb	r6, [r4, #19]
}
    52e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52ea:	bf00      	nop

000052ec <SharedSpiCard::readCID(cid_t*)>:
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    52ec:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    52ee:	2200      	movs	r2, #0
    52f0:	b082      	sub	sp, #8
    52f2:	460e      	mov	r6, r1
    52f4:	210a      	movs	r1, #10
    52f6:	4604      	mov	r4, r0
    52f8:	f7ff fcda 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    52fc:	b1b0      	cbz	r0, 532c <SharedSpiCard::readCID(cid_t*)+0x40>
    m_errorCode = code;
    52fe:	231c      	movs	r3, #28
    5300:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5302:	7ce0      	ldrb	r0, [r4, #19]
    5304:	b908      	cbnz	r0, 530a <SharedSpiCard::readCID(cid_t*)+0x1e>
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    5306:	b002      	add	sp, #8
    5308:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    530a:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    530c:	7c60      	ldrb	r0, [r4, #17]
    530e:	2101      	movs	r1, #1
    5310:	f001 fd48 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5314:	21ff      	movs	r1, #255	; 0xff
    5316:	4628      	mov	r0, r5
    5318:	f001 fe22 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    531c:	4628      	mov	r0, r5
    531e:	f001 fdd5 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5322:	2300      	movs	r3, #0
  return false;
    5324:	4618      	mov	r0, r3
    m_spiActive = false;
    5326:	74e3      	strb	r3, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    5328:	b002      	add	sp, #8
    532a:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    532c:	4605      	mov	r5, r0
    532e:	2210      	movs	r2, #16
    5330:	4631      	mov	r1, r6
    5332:	4620      	mov	r0, r4
    5334:	f7ff fc32 	bl	4b9c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5338:	2800      	cmp	r0, #0
    533a:	d0e2      	beq.n	5302 <SharedSpiCard::readCID(cid_t*)+0x16>
  if (m_spiActive) {
    533c:	7ce6      	ldrb	r6, [r4, #19]
    533e:	2e00      	cmp	r6, #0
    5340:	d0e1      	beq.n	5306 <SharedSpiCard::readCID(cid_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5342:	7c60      	ldrb	r0, [r4, #17]
    5344:	2101      	movs	r1, #1
    5346:	f001 fd2d 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    534a:	1d20      	adds	r0, r4, #4
    534c:	21ff      	movs	r1, #255	; 0xff
    534e:	9001      	str	r0, [sp, #4]
    5350:	f001 fe06 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5354:	9801      	ldr	r0, [sp, #4]
    5356:	f001 fdb9 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
}
    535a:	4630      	mov	r0, r6
    m_spiActive = false;
    535c:	74e5      	strb	r5, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    535e:	b002      	add	sp, #8
    5360:	bd70      	pop	{r4, r5, r6, pc}
    5362:	bf00      	nop

00005364 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5364:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    5366:	2200      	movs	r2, #0
    5368:	b082      	sub	sp, #8
    536a:	460e      	mov	r6, r1
    536c:	2109      	movs	r1, #9
    536e:	4604      	mov	r4, r0
    5370:	f7ff fc9e 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5374:	b1b0      	cbz	r0, 53a4 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    5376:	231c      	movs	r3, #28
    5378:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    537a:	7ce0      	ldrb	r0, [r4, #19]
    537c:	b908      	cbnz	r0, 5382 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    537e:	b002      	add	sp, #8
    5380:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5382:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5384:	7c60      	ldrb	r0, [r4, #17]
    5386:	2101      	movs	r1, #1
    5388:	f001 fd0c 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    538c:	21ff      	movs	r1, #255	; 0xff
    538e:	4628      	mov	r0, r5
    5390:	f001 fde6 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5394:	4628      	mov	r0, r5
    5396:	f001 fd99 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    539a:	2300      	movs	r3, #0
  return false;
    539c:	4618      	mov	r0, r3
    m_spiActive = false;
    539e:	74e3      	strb	r3, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    53a0:	b002      	add	sp, #8
    53a2:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    53a4:	4605      	mov	r5, r0
    53a6:	2210      	movs	r2, #16
    53a8:	4631      	mov	r1, r6
    53aa:	4620      	mov	r0, r4
    53ac:	f7ff fbf6 	bl	4b9c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    53b0:	2800      	cmp	r0, #0
    53b2:	d0e2      	beq.n	537a <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    53b4:	7ce6      	ldrb	r6, [r4, #19]
    53b6:	2e00      	cmp	r6, #0
    53b8:	d0e1      	beq.n	537e <SharedSpiCard::readCSD(csd_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    53ba:	7c60      	ldrb	r0, [r4, #17]
    53bc:	2101      	movs	r1, #1
    53be:	f001 fcf1 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    53c2:	1d20      	adds	r0, r4, #4
    53c4:	21ff      	movs	r1, #255	; 0xff
    53c6:	9001      	str	r0, [sp, #4]
    53c8:	f001 fdca 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    53cc:	9801      	ldr	r0, [sp, #4]
    53ce:	f001 fd7d 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
}
    53d2:	4630      	mov	r0, r6
    m_spiActive = false;
    53d4:	74e5      	strb	r5, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    53d6:	b002      	add	sp, #8
    53d8:	bd70      	pop	{r4, r5, r6, pc}
    53da:	bf00      	nop

000053dc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    53dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    53de:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    53e0:	7d02      	ldrb	r2, [r0, #20]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    53e2:	b083      	sub	sp, #12
    53e4:	4606      	mov	r6, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
    53e6:	2a01      	cmp	r2, #1
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    53e8:	460d      	mov	r5, r1
    53ea:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    53ec:	d102      	bne.n	53f4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
    53ee:	6983      	ldr	r3, [r0, #24]
    53f0:	428b      	cmp	r3, r1
    53f2:	d005      	beq.n	5400 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    53f4:	4629      	mov	r1, r5
    53f6:	4630      	mov	r0, r6
    53f8:	f7ff fdce 	bl	4f98 <SharedSpiCard::readStart(unsigned long)>
    53fc:	b180      	cbz	r0, 5420 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_curSector = sector;
    53fe:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5400:	b197      	cbz	r7, 5428 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    if (!readStart(sector)) {
    5402:	2500      	movs	r5, #0
    5404:	e001      	b.n	540a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5406:	42af      	cmp	r7, r5
    5408:	d00e      	beq.n	5428 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    540a:	4621      	mov	r1, r4
    540c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5410:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5412:	3501      	adds	r5, #1
    5414:	f504 7400 	add.w	r4, r4, #512	; 0x200
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    5418:	f7ff fbc0 	bl	4b9c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    541c:	2800      	cmp	r0, #0
    541e:	d1f2      	bne.n	5406 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
  return false;
    5420:	2400      	movs	r4, #0
}
    5422:	4620      	mov	r0, r4
    5424:	b003      	add	sp, #12
    5426:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_curSector += ns;
    5428:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    542a:	7f34      	ldrb	r4, [r6, #28]
  m_curSector += ns;
    542c:	443b      	add	r3, r7
    542e:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    5430:	b11c      	cbz	r4, 543a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
    5432:	2401      	movs	r4, #1
}
    5434:	4620      	mov	r0, r4
    5436:	b003      	add	sp, #12
    5438:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cardCommand(CMD12, 0)) {
    543a:	4622      	mov	r2, r4
    543c:	210c      	movs	r1, #12
    543e:	4630      	mov	r0, r6
  m_state = IDLE_STATE;
    5440:	7534      	strb	r4, [r6, #20]
  if (cardCommand(CMD12, 0)) {
    5442:	f7ff fc35 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5446:	4605      	mov	r5, r0
    5448:	b980      	cbnz	r0, 546c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
  if (m_spiActive) {
    544a:	7cf4      	ldrb	r4, [r6, #19]
    544c:	2c00      	cmp	r4, #0
    544e:	d0f0      	beq.n	5432 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5450:	2101      	movs	r1, #1
    5452:	7c70      	ldrb	r0, [r6, #17]
    5454:	f001 fca6 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5458:	1d30      	adds	r0, r6, #4
    545a:	21ff      	movs	r1, #255	; 0xff
    545c:	9001      	str	r0, [sp, #4]
    545e:	f001 fd7f 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5462:	9801      	ldr	r0, [sp, #4]
    5464:	f001 fd32 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5468:	74f5      	strb	r5, [r6, #19]
}
    546a:	e7da      	b.n	5422 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    m_errorCode = code;
    546c:	2209      	movs	r2, #9
  if (m_spiActive) {
    546e:	7cf3      	ldrb	r3, [r6, #19]
    5470:	74b2      	strb	r2, [r6, #18]
    5472:	2b00      	cmp	r3, #0
    5474:	d0d4      	beq.n	5420 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_spiDriver.send(data);
    5476:	1d35      	adds	r5, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5478:	2101      	movs	r1, #1
    547a:	7c70      	ldrb	r0, [r6, #17]
    547c:	f001 fc92 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5480:	21ff      	movs	r1, #255	; 0xff
    5482:	4628      	mov	r0, r5
    5484:	f001 fd6c 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5488:	4628      	mov	r0, r5
    548a:	f001 fd1f 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    548e:	74f4      	strb	r4, [r6, #19]
}
    5490:	e7c7      	b.n	5422 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    5492:	bf00      	nop

00005494 <DedicatedSpiCard::setDedicatedSpi(bool)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
  if (!syncDevice()) {
    5494:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    5496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    549a:	69da      	ldr	r2, [r3, #28]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    549c:	b082      	sub	sp, #8
    549e:	4d24      	ldr	r5, [pc, #144]	; (5530 <DedicatedSpiCard::setDedicatedSpi(bool)+0x9c>)
    54a0:	4604      	mov	r4, r0
    54a2:	460e      	mov	r6, r1
    54a4:	42aa      	cmp	r2, r5
    54a6:	d111      	bne.n	54cc <DedicatedSpiCard::setDedicatedSpi(bool)+0x38>
  if (m_state == WRITE_STATE) {
    54a8:	7d05      	ldrb	r5, [r0, #20]
    54aa:	2d02      	cmp	r5, #2
    54ac:	d006      	beq.n	54bc <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
  if (m_state == READ_STATE) {
    54ae:	2d01      	cmp	r5, #1
    54b0:	d00e      	beq.n	54d0 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>
    return false;
  }
  m_dedicatedSpi = value;
  return true;
    54b2:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    54b4:	7726      	strb	r6, [r4, #28]
}
    54b6:	b002      	add	sp, #8
    54b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    54bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    54be:	4798      	blx	r3
  if (!syncDevice()) {
    54c0:	2800      	cmp	r0, #0
    54c2:	d1f6      	bne.n	54b2 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    return false;
    54c4:	2000      	movs	r0, #0
}
    54c6:	b002      	add	sp, #8
    54c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncDevice()) {
    54cc:	4790      	blx	r2
    54ce:	e7f7      	b.n	54c0 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2c>
  m_state = IDLE_STATE;
    54d0:	f04f 0800 	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    54d4:	210c      	movs	r1, #12
    54d6:	4642      	mov	r2, r8
  m_state = IDLE_STATE;
    54d8:	f880 8014 	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    54dc:	f7ff fbe8 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    54e0:	4607      	mov	r7, r0
    54e2:	b980      	cbnz	r0, 5506 <DedicatedSpiCard::setDedicatedSpi(bool)+0x72>
  if (m_spiActive) {
    54e4:	7ce3      	ldrb	r3, [r4, #19]
    54e6:	2b00      	cmp	r3, #0
    54e8:	d0e3      	beq.n	54b2 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    54ea:	4629      	mov	r1, r5
    54ec:	7c60      	ldrb	r0, [r4, #17]
    54ee:	f001 fc59 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    54f2:	1d20      	adds	r0, r4, #4
    54f4:	21ff      	movs	r1, #255	; 0xff
    54f6:	9001      	str	r0, [sp, #4]
    54f8:	f001 fd32 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    54fc:	9801      	ldr	r0, [sp, #4]
    54fe:	f001 fce5 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5502:	74e7      	strb	r7, [r4, #19]
    5504:	e7d5      	b.n	54b2 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    m_errorCode = code;
    5506:	2209      	movs	r2, #9
  if (m_spiActive) {
    5508:	7ce3      	ldrb	r3, [r4, #19]
    550a:	74a2      	strb	r2, [r4, #18]
    550c:	2b00      	cmp	r3, #0
    550e:	d0d9      	beq.n	54c4 <DedicatedSpiCard::setDedicatedSpi(bool)+0x30>
    m_spiDriver.send(data);
    5510:	1d26      	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5512:	4629      	mov	r1, r5
    5514:	7c60      	ldrb	r0, [r4, #17]
    5516:	f001 fc45 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    551a:	21ff      	movs	r1, #255	; 0xff
    551c:	4630      	mov	r0, r6
    551e:	f001 fd1f 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5522:	4630      	mov	r0, r6
    5524:	f001 fcd2 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    return false;
    5528:	4640      	mov	r0, r8
    m_spiActive = false;
    552a:	f884 8013 	strb.w	r8, [r4, #19]
    552e:	e7c2      	b.n	54b6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x22>
    5530:	00004c99 	.word	0x00004c99

00005534 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    5534:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    5536:	1d05      	adds	r5, r0, #4
    5538:	4616      	mov	r6, r2
    553a:	4604      	mov	r4, r0
    553c:	4628      	mov	r0, r5
    553e:	f001 fd0f 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    5542:	f44f 7200 	mov.w	r2, #512	; 0x200
    5546:	4631      	mov	r1, r6
    5548:	4628      	mov	r0, r5
    554a:	f001 fd13 	bl	6f74 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    554e:	21ff      	movs	r1, #255	; 0xff
    5550:	4628      	mov	r0, r5
    5552:	f001 fd05 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
    5556:	21ff      	movs	r1, #255	; 0xff
    5558:	4628      	mov	r0, r5
    555a:	f001 fd01 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    555e:	4628      	mov	r0, r5
    5560:	f001 fce0 	bl	6f24 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5564:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    5568:	7560      	strb	r0, [r4, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    556a:	2b05      	cmp	r3, #5
    556c:	d004      	beq.n	5578 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    556e:	2321      	movs	r3, #33	; 0x21
  if (m_spiActive) {
    5570:	7ce0      	ldrb	r0, [r4, #19]
    5572:	74a3      	strb	r3, [r4, #18]
    5574:	b910      	cbnz	r0, 557c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    5576:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    5578:	2001      	movs	r0, #1
}
    557a:	bd70      	pop	{r4, r5, r6, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    557c:	7c60      	ldrb	r0, [r4, #17]
    557e:	2101      	movs	r1, #1
    5580:	f001 fc10 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5584:	21ff      	movs	r1, #255	; 0xff
    5586:	4628      	mov	r0, r5
    5588:	f001 fcea 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    558c:	4628      	mov	r0, r5
    558e:	f001 fc9d 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5592:	2300      	movs	r3, #0
}
    5594:	4618      	mov	r0, r3
    m_spiActive = false;
    5596:	74e3      	strb	r3, [r4, #19]
}
    5598:	bd70      	pop	{r4, r5, r6, pc}
    559a:	bf00      	nop

0000559c <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    559c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55a0:	4d17      	ldr	r5, [pc, #92]	; (5600 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    55a2:	4606      	mov	r6, r0
    55a4:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    55a6:	f100 0804 	add.w	r8, r0, #4
    55aa:	682c      	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    55ac:	f504 7416 	add.w	r4, r4, #600	; 0x258
    55b0:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    55b2:	e003      	b.n	55bc <SharedSpiCard::writeData(unsigned char const*)+0x20>
    55b4:	682b      	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    55b6:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    55b8:	041b      	lsls	r3, r3, #16
    55ba:	d40c      	bmi.n	55d6 <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    55bc:	4640      	mov	r0, r8
    55be:	f001 fcb1 	bl	6f24 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    55c2:	28ff      	cmp	r0, #255	; 0xff
    55c4:	d1f6      	bne.n	55b4 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    55c6:	463a      	mov	r2, r7
    55c8:	21fc      	movs	r1, #252	; 0xfc
    55ca:	4630      	mov	r0, r6
    55cc:	f7ff ffb2 	bl	5534 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    55d0:	b118      	cbz	r0, 55da <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    55d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    55d6:	2325      	movs	r3, #37	; 0x25
    55d8:	74b3      	strb	r3, [r6, #18]
  if (m_spiActive) {
    55da:	7cf0      	ldrb	r0, [r6, #19]
    55dc:	2800      	cmp	r0, #0
    55de:	d0f8      	beq.n	55d2 <SharedSpiCard::writeData(unsigned char const*)+0x36>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    55e0:	7c70      	ldrb	r0, [r6, #17]
    55e2:	2101      	movs	r1, #1
    55e4:	f001 fbde 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    55e8:	21ff      	movs	r1, #255	; 0xff
    55ea:	4640      	mov	r0, r8
    55ec:	f001 fcb8 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    55f0:	4640      	mov	r0, r8
    55f2:	f001 fc6b 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    55f6:	2300      	movs	r3, #0
}
    55f8:	4618      	mov	r0, r3
    m_spiActive = false;
    55fa:	74f3      	strb	r3, [r6, #19]
}
    55fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5600:	2001ec58 	.word	0x2001ec58

00005604 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    5604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    5608:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    560a:	4615      	mov	r5, r2
    560c:	4a35      	ldr	r2, [pc, #212]	; (56e4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    560e:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    5610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    5612:	460e      	mov	r6, r1
    5614:	4293      	cmp	r3, r2
    5616:	d15c      	bne.n	56d2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xce>
  uint8_t type() const { return m_type; }
    5618:	7d80      	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    561a:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    561c:	f04f 0118 	mov.w	r1, #24
    5620:	4620      	mov	r0, r4
    sector <<= 9;
    5622:	bf18      	it	ne
    5624:	0276      	lslne	r6, r6, #9
  if (cardCommand(CMD24, sector)) {
    5626:	4632      	mov	r2, r6
    5628:	f7ff fb42 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    562c:	b148      	cbz	r0, 5642 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    m_errorCode = code;
    562e:	230d      	movs	r3, #13
    5630:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5632:	f894 9013 	ldrb.w	r9, [r4, #19]
    5636:	f1b9 0f00 	cmp.w	r9, #0
    563a:	d138      	bne.n	56ae <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xaa>
}
    563c:	4648      	mov	r0, r9
    563e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    5642:	462a      	mov	r2, r5
    5644:	21fe      	movs	r1, #254	; 0xfe
    5646:	4620      	mov	r0, r4
    5648:	f7ff ff74 	bl	5534 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    564c:	4681      	mov	r9, r0
    564e:	2800      	cmp	r0, #0
    5650:	d0ef      	beq.n	5632 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    5652:	4f25      	ldr	r7, [pc, #148]	; (56e8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    return m_spiDriver.receive();
    5654:	f104 0804 	add.w	r8, r4, #4
    5658:	683e      	ldr	r6, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    565a:	f506 7616 	add.w	r6, r6, #600	; 0x258
    565e:	b2b6      	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    5660:	e003      	b.n	566a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x66>
    5662:	683b      	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5664:	1af3      	subs	r3, r6, r3
    if (timeout.timedOut()) {
    5666:	041b      	lsls	r3, r3, #16
    5668:	d438      	bmi.n	56dc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd8>
    566a:	4640      	mov	r0, r8
    566c:	f001 fc5a 	bl	6f24 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    5670:	28ff      	cmp	r0, #255	; 0xff
    5672:	4605      	mov	r5, r0
    5674:	d1f5      	bne.n	5662 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
    5676:	2200      	movs	r2, #0
    5678:	210d      	movs	r1, #13
    567a:	4620      	mov	r0, r4
    567c:	f7ff fb18 	bl	4cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5680:	bb48      	cbnz	r0, 56d6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
    5682:	4640      	mov	r0, r8
    5684:	f001 fc4e 	bl	6f24 <SdSpiArduinoDriver::receive()>
    5688:	4606      	mov	r6, r0
    568a:	bb20      	cbnz	r0, 56d6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
  if (m_spiActive) {
    568c:	7ce3      	ldrb	r3, [r4, #19]
    568e:	2b00      	cmp	r3, #0
    5690:	d0d4      	beq.n	563c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5692:	2101      	movs	r1, #1
    5694:	7c60      	ldrb	r0, [r4, #17]
  return true;
    5696:	4699      	mov	r9, r3
    5698:	f001 fb84 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    569c:	4629      	mov	r1, r5
    569e:	4640      	mov	r0, r8
    56a0:	f001 fc5e 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    56a4:	4640      	mov	r0, r8
    56a6:	f001 fc11 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    56aa:	74e6      	strb	r6, [r4, #19]
}
    56ac:	e7c6      	b.n	563c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    m_spiDriver.send(data);
    56ae:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    56b0:	7c60      	ldrb	r0, [r4, #17]
    56b2:	2101      	movs	r1, #1
    56b4:	f001 fb76 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    56b8:	21ff      	movs	r1, #255	; 0xff
    56ba:	4628      	mov	r0, r5
    56bc:	f001 fc50 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    56c0:	4628      	mov	r0, r5
    56c2:	f001 fc03 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    56c6:	2300      	movs	r3, #0
  return false;
    56c8:	4699      	mov	r9, r3
    m_spiActive = false;
    56ca:	74e3      	strb	r3, [r4, #19]
}
    56cc:	4648      	mov	r0, r9
    56ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    56d2:	4798      	blx	r3
    56d4:	e7a1      	b.n	561a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    m_errorCode = code;
    56d6:	230a      	movs	r3, #10
    56d8:	74a3      	strb	r3, [r4, #18]
    goto fail;
    56da:	e7aa      	b.n	5632 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    56dc:	2324      	movs	r3, #36	; 0x24
    56de:	74a3      	strb	r3, [r4, #18]
    goto fail;
    56e0:	e7a7      	b.n	5632 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    56e2:	bf00      	nop
    56e4:	00004a51 	.word	0x00004a51
    56e8:	2001ec58 	.word	0x2001ec58

000056ec <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    56ec:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    56ee:	7f04      	ldrb	r4, [r0, #28]
    56f0:	b134      	cbz	r4, 5700 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    56f2:	6804      	ldr	r4, [r0, #0]
    56f4:	2301      	movs	r3, #1
    56f6:	6a64      	ldr	r4, [r4, #36]	; 0x24
    56f8:	46a4      	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    56fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    56fe:	4760      	bx	ip
}
    5700:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    5704:	f7ff bf7e 	b.w	5604 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00005708 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    5708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    570c:	469a      	mov	sl, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    570e:	7d03      	ldrb	r3, [r0, #20]
                                    size_t ns) {
    5710:	b081      	sub	sp, #4
    5712:	4607      	mov	r7, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    5714:	2b02      	cmp	r3, #2
                                    size_t ns) {
    5716:	460c      	mov	r4, r1
    5718:	4690      	mov	r8, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    571a:	d059      	beq.n	57d0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    if (!writeStart(sector)) {
    571c:	683b      	ldr	r3, [r7, #0]
    571e:	4621      	mov	r1, r4
    5720:	4638      	mov	r0, r7
    5722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    5724:	4798      	blx	r3
    5726:	2800      	cmp	r0, #0
    5728:	d037      	beq.n	579a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
      goto fail;
    }
    m_curSector = sector;
    572a:	61bc      	str	r4, [r7, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    572c:	f1ba 0f00 	cmp.w	sl, #0
    5730:	d023      	beq.n	577a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x72>
    if (!writeStart(sector)) {
    5732:	f04f 0900 	mov.w	r9, #0
    5736:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 57dc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd4>
    573a:	4d27      	ldr	r5, [pc, #156]	; (57d8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd0>)
    return m_spiDriver.receive();
    573c:	1d3e      	adds	r6, r7, #4
    if (!writeData(src)) {
    573e:	683b      	ldr	r3, [r7, #0]
    5740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    5742:	455b      	cmp	r3, fp
    5744:	d12d      	bne.n	57a2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x9a>
    5746:	682c      	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5748:	f504 7416 	add.w	r4, r4, #600	; 0x258
    574c:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    574e:	e003      	b.n	5758 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    5750:	682b      	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5752:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    5754:	041b      	lsls	r3, r3, #16
    5756:	d41c      	bmi.n	5792 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8a>
    5758:	4630      	mov	r0, r6
    575a:	f001 fbe3 	bl	6f24 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    575e:	28ff      	cmp	r0, #255	; 0xff
    5760:	d1f6      	bne.n	5750 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    5762:	4642      	mov	r2, r8
    5764:	21fc      	movs	r1, #252	; 0xfc
    5766:	4638      	mov	r0, r7
    5768:	f7ff fee4 	bl	5534 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    576c:	b198      	cbz	r0, 5796 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8e>
  for (size_t i = 0; i < ns; i++, src += 512) {
    576e:	f109 0901 	add.w	r9, r9, #1
    5772:	f508 7800 	add.w	r8, r8, #512	; 0x200
    5776:	45ca      	cmp	sl, r9
    5778:	d1e1      	bne.n	573e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
      goto fail;
    }
  }
  m_curSector += ns;
    577a:	69bb      	ldr	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    577c:	7f38      	ldrb	r0, [r7, #28]
  m_curSector += ns;
    577e:	4453      	add	r3, sl
    5780:	61bb      	str	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    5782:	b958      	cbnz	r0, 579c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x94>
    5784:	683b      	ldr	r3, [r7, #0]
    5786:	4638      	mov	r0, r7
    5788:	6e9b      	ldr	r3, [r3, #104]	; 0x68

fail:
  return false;
}
    578a:	b001      	add	sp, #4
    578c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : writeStop();
    5790:	4718      	bx	r3
    m_errorCode = code;
    5792:	2325      	movs	r3, #37	; 0x25
    5794:	74bb      	strb	r3, [r7, #18]
  if (m_spiActive) {
    5796:	7cfb      	ldrb	r3, [r7, #19]
    5798:	b94b      	cbnz	r3, 57ae <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xa6>
  return false;
    579a:	2000      	movs	r0, #0
}
    579c:	b001      	add	sp, #4
    579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!writeData(src)) {
    57a2:	4641      	mov	r1, r8
    57a4:	4638      	mov	r0, r7
    57a6:	4798      	blx	r3
    57a8:	2800      	cmp	r0, #0
    57aa:	d1e0      	bne.n	576e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x66>
    57ac:	e7f5      	b.n	579a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    57ae:	7c78      	ldrb	r0, [r7, #17]
    57b0:	2101      	movs	r1, #1
    57b2:	f001 faf7 	bl	6da4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    57b6:	21ff      	movs	r1, #255	; 0xff
    57b8:	4630      	mov	r0, r6
    57ba:	f001 fbd1 	bl	6f60 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    57be:	4630      	mov	r0, r6
    57c0:	f001 fb84 	bl	6ecc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    57c4:	2300      	movs	r3, #0
  return false;
    57c6:	4618      	mov	r0, r3
    m_spiActive = false;
    57c8:	74fb      	strb	r3, [r7, #19]
}
    57ca:	b001      	add	sp, #4
    57cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    57d0:	6983      	ldr	r3, [r0, #24]
    57d2:	428b      	cmp	r3, r1
    57d4:	d1a2      	bne.n	571c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
    57d6:	e7a9      	b.n	572c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
    57d8:	2001ec58 	.word	0x2001ec58
    57dc:	0000559d 	.word	0x0000559d

000057e0 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() { return false; }
    57e0:	2000      	movs	r0, #0
    57e2:	4770      	bx	lr

000057e4 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() { return false; }
    57e4:	2000      	movs	r0, #0
    57e6:	4770      	bx	lr

000057e8 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    57e8:	2000      	movs	r0, #0
    57ea:	4770      	bx	lr

000057ec <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    57ec:	4770      	bx	lr
    57ee:	bf00      	nop

000057f0 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    57f0:	4b08      	ldr	r3, [pc, #32]	; (5814 <sdIrs()+0x24>)
    57f2:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    57f4:	4a08      	ldr	r2, [pc, #32]	; (5818 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    57f6:	4809      	ldr	r0, [pc, #36]	; (581c <sdIrs()+0x2c>)
static void sdIrs() {
    57f8:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    57fa:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    57fc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    57fe:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    5800:	6812      	ldr	r2, [r2, #0]
}
    5802:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    5806:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    5808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    580a:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    580e:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    5810:	7001      	strb	r1, [r0, #0]
}
    5812:	4770      	bx	lr
    5814:	402c0000 	.word	0x402c0000
    5818:	2001e068 	.word	0x2001e068
    581c:	2001ec98 	.word	0x2001ec98

00005820 <isBusyDat()>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    5820:	4b03      	ldr	r3, [pc, #12]	; (5830 <isBusyDat()+0x10>)
    5822:	6a58      	ldr	r0, [r3, #36]	; 0x24
    5824:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    5828:	f3c0 6000 	ubfx	r0, r0, #24, #1
    582c:	4770      	bx	lr
    582e:	bf00      	nop
    5830:	402c0000 	.word	0x402c0000

00005834 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    5834:	4b01      	ldr	r3, [pc, #4]	; (583c <isBusyDMA()+0x8>)
    5836:	7818      	ldrb	r0, [r3, #0]
    5838:	4770      	bx	lr
    583a:	bf00      	nop
    583c:	2001ec98 	.word	0x2001ec98

00005840 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5840:	4a2b      	ldr	r2, [pc, #172]	; (58f0 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5842:	4b2c      	ldr	r3, [pc, #176]	; (58f4 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5844:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5846:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    584a:	492b      	ldr	r1, [pc, #172]	; (58f8 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    584c:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5854:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    5856:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5858:	4c28      	ldr	r4, [pc, #160]	; (58fc <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    585a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    585e:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000 * kHzMax;
    5862:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5866:	089b      	lsrs	r3, r3, #2
    5868:	fbb1 fef3 	udiv	lr, r1, r3
    586c:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5870:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    5874:	d235      	bcs.n	58e2 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    5876:	2301      	movs	r3, #1
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    5878:	461e      	mov	r6, r3
    587a:	005b      	lsls	r3, r3, #1
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    587c:	011a      	lsls	r2, r3, #4
    587e:	fbbe f2f2 	udiv	r2, lr, r2
    5882:	4282      	cmp	r2, r0
    5884:	d901      	bls.n	588a <setSdclk(unsigned long)+0x4a>
    5886:	2bff      	cmp	r3, #255	; 0xff
    5888:	d9f6      	bls.n	5878 <setSdclk(unsigned long)+0x38>
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    588a:	fbbe f2f3 	udiv	r2, lr, r3
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    588e:	0236      	lsls	r6, r6, #8
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5890:	4290      	cmp	r0, r2
    5892:	d22a      	bcs.n	58ea <setSdclk(unsigned long)+0xaa>
    5894:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5898:	2201      	movs	r2, #1
    589a:	e000      	b.n	589e <setSdclk(unsigned long)+0x5e>
    589c:	46a4      	mov	ip, r4
    dvs++;
    589e:	4615      	mov	r5, r2
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    58a0:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    58a4:	3201      	adds	r2, #1
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    58a6:	fbbe f1fc 	udiv	r1, lr, ip
    58aa:	4281      	cmp	r1, r0
    58ac:	d917      	bls.n	58de <setSdclk(unsigned long)+0x9e>
    58ae:	2a10      	cmp	r2, #16
    58b0:	d1f4      	bne.n	589c <setSdclk(unsigned long)+0x5c>
    58b2:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    58b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    58b8:	4911      	ldr	r1, [pc, #68]	; (5900 <setSdclk(unsigned long)+0xc0>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    58ba:	4a12      	ldr	r2, [pc, #72]	; (5904 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    58bc:	fb03 fc0c 	mul.w	ip, r3, ip
    58c0:	fbbe f3fc 	udiv	r3, lr, ip
    58c4:	600b      	str	r3, [r1, #0]
                      SDHC_SYSCTL_SDCLKFS_MASK);
    58c6:	4b10      	ldr	r3, [pc, #64]	; (5908 <setSdclk(unsigned long)+0xc8>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    58c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);
    58ca:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    58cc:	432b      	orrs	r3, r5
    58ce:	4333      	orrs	r3, r6
    58d0:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
    58d4:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    58d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
    58d8:	071b      	lsls	r3, r3, #28
    58da:	d5fc      	bpl.n	58d6 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    58dc:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    58de:	012d      	lsls	r5, r5, #4
    58e0:	e7e8      	b.n	58b4 <setSdclk(unsigned long)+0x74>
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    58e2:	4672      	mov	r2, lr
    58e4:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    58e6:	2301      	movs	r3, #1
    58e8:	e7d2      	b.n	5890 <setSdclk(unsigned long)+0x50>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    58ea:	469c      	mov	ip, r3
    58ec:	2500      	movs	r5, #0
    58ee:	e7e1      	b.n	58b4 <setSdclk(unsigned long)+0x74>
    58f0:	400fc000 	.word	0x400fc000
    58f4:	400d8000 	.word	0x400d8000
    58f8:	5e69ec00 	.word	0x5e69ec00
    58fc:	aaaaaaab 	.word	0xaaaaaaab
    5900:	2000d740 	.word	0x2000d740
    5904:	402c0000 	.word	0x402c0000
    5908:	fff0000f 	.word	0xfff0000f

0000590c <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    590c:	4b01      	ldr	r3, [pc, #4]	; (5914 <SdioCard::errorCode() const+0x8>)
    590e:	7818      	ldrb	r0, [r3, #0]
    5910:	4770      	bx	lr
    5912:	bf00      	nop
    5914:	20008bcc 	.word	0x20008bcc

00005918 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    5918:	4b01      	ldr	r3, [pc, #4]	; (5920 <SdioCard::errorData() const+0x8>)
    591a:	6818      	ldr	r0, [r3, #0]
    591c:	4770      	bx	lr
    591e:	bf00      	nop
    5920:	2001e068 	.word	0x2001e068

00005924 <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    5924:	b410      	push	{r4}
  memcpy(cid, &m_cid, sizeof(cid_t));
    5926:	4c07      	ldr	r4, [pc, #28]	; (5944 <SdioCard::readCID(cid_t*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    5928:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    592a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    592c:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    5930:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
    5932:	f8cc 1004 	str.w	r1, [ip, #4]
    5936:	f8cc 2008 	str.w	r2, [ip, #8]
    593a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    593e:	f85d 4b04 	ldr.w	r4, [sp], #4
    5942:	4770      	bx	lr
    5944:	2001d954 	.word	0x2001d954

00005948 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    5948:	b410      	push	{r4}
  memcpy(csd, &m_csd, sizeof(csd_t));
    594a:	4c07      	ldr	r4, [pc, #28]	; (5968 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    594c:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    594e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5950:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    5954:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, sizeof(csd_t));
    5956:	f8cc 1004 	str.w	r1, [ip, #4]
    595a:	f8cc 2008 	str.w	r2, [ip, #8]
    595e:	f8cc 300c 	str.w	r3, [ip, #12]
}
    5962:	f85d 4b04 	ldr.w	r4, [sp], #4
    5966:	4770      	bx	lr
    5968:	2001d964 	.word	0x2001d964

0000596c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    596c:	4b02      	ldr	r3, [pc, #8]	; (5978 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    596e:	2001      	movs	r0, #1
  *ocr = m_ocr;
    5970:	681b      	ldr	r3, [r3, #0]
    5972:	600b      	str	r3, [r1, #0]
}
    5974:	4770      	bx	lr
    5976:	bf00      	nop
    5978:	2001d974 	.word	0x2001d974

0000597c <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    597c:	4a03      	ldr	r2, [pc, #12]	; (598c <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readSCR(scr_t* scr) {
    597e:	460b      	mov	r3, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    5980:	ca03      	ldmia	r2!, {r0, r1}
    5982:	6018      	str	r0, [r3, #0]
  return true;
}
    5984:	2001      	movs	r0, #1
  memcpy(scr, &m_scr, sizeof(scr_t));
    5986:	6059      	str	r1, [r3, #4]
}
    5988:	4770      	bx	lr
    598a:	bf00      	nop
    598c:	2001d97c 	.word	0x2001d97c

00005990 <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    5990:	b530      	push	{r4, r5, lr}
  memcpy(sds, &m_sds, sizeof(sds_t));
    5992:	4c0b      	ldr	r4, [pc, #44]	; (59c0 <SdioCard::readSDS(sds_t*)+0x30>)
    5994:	468c      	mov	ip, r1
    5996:	f104 0540 	add.w	r5, r4, #64	; 0x40
    599a:	46a6      	mov	lr, r4
    599c:	f10c 0c10 	add.w	ip, ip, #16
    59a0:	3410      	adds	r4, #16
    59a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    59a6:	45ae      	cmp	lr, r5
    59a8:	f84c 0c10 	str.w	r0, [ip, #-16]
    59ac:	f84c 1c0c 	str.w	r1, [ip, #-12]
    59b0:	f84c 2c08 	str.w	r2, [ip, #-8]
    59b4:	f84c 3c04 	str.w	r3, [ip, #-4]
    59b8:	d1ef      	bne.n	599a <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    59ba:	2001      	movs	r0, #1
    59bc:	bd30      	pop	{r4, r5, pc}
    59be:	bf00      	nop
    59c0:	2001d984 	.word	0x2001d984

000059c4 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    59c4:	4770      	bx	lr
    59c6:	bf00      	nop

000059c8 <SdioCard::~SdioCard()>:
    59c8:	b510      	push	{r4, lr}
    59ca:	4604      	mov	r4, r0
    59cc:	210c      	movs	r1, #12
    59ce:	f002 fb4b 	bl	8068 <operator delete(void*, unsigned int)>
    59d2:	4620      	mov	r0, r4
    59d4:	bd10      	pop	{r4, pc}
    59d6:	bf00      	nop

000059d8 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
    59d8:	4b04      	ldr	r3, [pc, #16]	; (59ec <SdioCard::type() const+0x14>)
    59da:	781b      	ldrb	r3, [r3, #0]
    59dc:	b123      	cbz	r3, 59e8 <SdioCard::type() const+0x10>
    59de:	4b04      	ldr	r3, [pc, #16]	; (59f0 <SdioCard::type() const+0x18>)
    59e0:	7818      	ldrb	r0, [r3, #0]
    59e2:	3002      	adds	r0, #2
    59e4:	b2c0      	uxtb	r0, r0
    59e6:	4770      	bx	lr
    59e8:	2001      	movs	r0, #1
                    : SD_CARD_TYPE_SD1;
}
    59ea:	4770      	bx	lr
    59ec:	2001ec95 	.word	0x2001ec95
    59f0:	2001ec96 	.word	0x2001ec96

000059f4 <SdioCard::sectorCount()>:
    uint8_t ver = csd[0] >> 6;
    59f4:	4a16      	ldr	r2, [pc, #88]	; (5a50 <SdioCard::sectorCount()+0x5c>)
    59f6:	7813      	ldrb	r3, [r2, #0]
    if (ver == 0) {
    59f8:	099b      	lsrs	r3, r3, #6
    59fa:	d00e      	beq.n	5a1a <SdioCard::sectorCount()+0x26>
    } else if (ver == 1) {
    59fc:	2b01      	cmp	r3, #1
    59fe:	d001      	beq.n	5a04 <SdioCard::sectorCount()+0x10>
      return 0;
    5a00:	2000      	movs	r0, #0
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    5a02:	4770      	bx	lr
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5a04:	79d3      	ldrb	r3, [r2, #7]
      c_size |= csd[9];
    5a06:	8910      	ldrh	r0, [r2, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5a08:	041b      	lsls	r3, r3, #16
      c_size |= csd[9];
    5a0a:	ba40      	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5a0c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    5a10:	b280      	uxth	r0, r0
    5a12:	4318      	orrs	r0, r3
      return (c_size + 1) << 10;
    5a14:	3001      	adds	r0, #1
    5a16:	0280      	lsls	r0, r0, #10
    5a18:	4770      	bx	lr
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5a1a:	7a53      	ldrb	r3, [r2, #9]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5a1c:	7a10      	ldrb	r0, [r2, #8]
    5a1e:	f892 c007 	ldrb.w	ip, [r2, #7]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5a22:	005b      	lsls	r3, r3, #1
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5a24:	7991      	ldrb	r1, [r2, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5a26:	0980      	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5a28:	f003 0306 	and.w	r3, r3, #6
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5a2c:	ea40 008c 	orr.w	r0, r0, ip, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5a30:	f892 c00a 	ldrb.w	ip, [r2, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5a34:	0289      	lsls	r1, r1, #10
      uint8_t read_bl_len = csd[5] & 15;
    5a36:	7952      	ldrb	r2, [r2, #5]
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5a38:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5a3c:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5a40:	f002 020f 	and.w	r2, r2, #15
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5a44:	4308      	orrs	r0, r1
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5a46:	4413      	add	r3, r2
    5a48:	3001      	adds	r0, #1
    5a4a:	3b07      	subs	r3, #7
    5a4c:	4098      	lsls	r0, r3
    5a4e:	4770      	bx	lr
    5a50:	2001d964 	.word	0x2001d964

00005a54 <waitDmaStatus()>:
static bool waitDmaStatus() {
    5a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  m_busyFcn = fcn;
    5a56:	4b13      	ldr	r3, [pc, #76]	; (5aa4 <waitDmaStatus()+0x50>)
    5a58:	4f13      	ldr	r7, [pc, #76]	; (5aa8 <waitDmaStatus()+0x54>)
static bool isBusyDMA() { return m_dmaBusy; }
    5a5a:	4d14      	ldr	r5, [pc, #80]	; (5aac <waitDmaStatus()+0x58>)
  m_busyFcn = fcn;
    5a5c:	603b      	str	r3, [r7, #0]
  uint32_t m = micros();
    5a5e:	f002 f9d5 	bl	7e0c <micros>
static bool isBusyDMA() { return m_dmaBusy; }
    5a62:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5a64:	b17b      	cbz	r3, 5a86 <waitDmaStatus()+0x32>
    5a66:	4604      	mov	r4, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a68:	4e11      	ldr	r6, [pc, #68]	; (5ab0 <waitDmaStatus()+0x5c>)
    5a6a:	e003      	b.n	5a74 <waitDmaStatus()+0x20>
    yield();
    5a6c:	f003 fcd8 	bl	9420 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    5a70:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5a72:	b143      	cbz	r3, 5a86 <waitDmaStatus()+0x32>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a74:	f002 f9ca 	bl	7e0c <micros>
    5a78:	1b00      	subs	r0, r0, r4
    5a7a:	42b0      	cmp	r0, r6
    5a7c:	d9f6      	bls.n	5a6c <waitDmaStatus()+0x18>
      m_busyFcn = 0;
    5a7e:	2300      	movs	r3, #0
    return false;  // Caller will set errorCode.
    5a80:	4618      	mov	r0, r3
      m_busyFcn = 0;
    5a82:	603b      	str	r3, [r7, #0]
}
    5a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5a86:	4b0b      	ldr	r3, [pc, #44]	; (5ab4 <waitDmaStatus()+0x60>)
  m_busyFcn = 0;
    5a88:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5a8a:	6818      	ldr	r0, [r3, #0]
  m_busyFcn = 0;
    5a8c:	603a      	str	r2, [r7, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5a8e:	f010 0002 	ands.w	r0, r0, #2
    5a92:	d0f7      	beq.n	5a84 <waitDmaStatus()+0x30>
    5a94:	681a      	ldr	r2, [r3, #0]
    5a96:	4b08      	ldr	r3, [pc, #32]	; (5ab8 <waitDmaStatus()+0x64>)
    5a98:	421a      	tst	r2, r3
    5a9a:	bf0c      	ite	eq
    5a9c:	2001      	moveq	r0, #1
    5a9e:	2000      	movne	r0, #0
}
    5aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5aa2:	bf00      	nop
    5aa4:	00005835 	.word	0x00005835
    5aa8:	2001e064 	.word	0x2001e064
    5aac:	2001ec98 	.word	0x2001ec98
    5ab0:	000f4240 	.word	0x000f4240
    5ab4:	2001e068 	.word	0x2001e068
    5ab8:	117f0000 	.word	0x117f0000

00005abc <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    5abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    5ac0:	f002 f9a4 	bl	7e0c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5ac4:	4e17      	ldr	r6, [pc, #92]	; (5b24 <waitTransferComplete() [clone .part.0]+0x68>)
    5ac6:	4d18      	ldr	r5, [pc, #96]	; (5b28 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    5ac8:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5aca:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5b40 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    5ace:	e004      	b.n	5ada <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ad0:	f002 f99c 	bl	7e0c <micros>
    5ad4:	1bc0      	subs	r0, r0, r7
    5ad6:	4540      	cmp	r0, r8
    5ad8:	d81b      	bhi.n	5b12 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5ada:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    5adc:	402c      	ands	r4, r5
    5ade:	d0f7      	beq.n	5ad0 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    5ae0:	4a12      	ldr	r2, [pc, #72]	; (5b2c <waitTransferComplete() [clone .part.0]+0x70>)
    5ae2:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    5ae4:	4b12      	ldr	r3, [pc, #72]	; (5b30 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5ae6:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5ae8:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5aea:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5aec:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5aee:	4a11      	ldr	r2, [pc, #68]	; (5b34 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    5af0:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	4213      	tst	r3, r2
    5af6:	d009      	beq.n	5b0c <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    5af8:	490f      	ldr	r1, [pc, #60]	; (5b38 <waitTransferComplete() [clone .part.0]+0x7c>)
    5afa:	2420      	movs	r4, #32
  m_errorLine = line;
    5afc:	4b0f      	ldr	r3, [pc, #60]	; (5b3c <waitTransferComplete() [clone .part.0]+0x80>)
    5afe:	f240 22aa 	movw	r2, #682	; 0x2aa
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    5b02:	2000      	movs	r0, #0
  m_errorCode = code;
    5b04:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5b06:	601a      	str	r2, [r3, #0]
}
    5b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    5b0c:	2001      	movs	r0, #1
}
    5b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    5b12:	4a06      	ldr	r2, [pc, #24]	; (5b2c <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    5b14:	4b06      	ldr	r3, [pc, #24]	; (5b30 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5b16:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5b18:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5b1a:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5b1c:	681b      	ldr	r3, [r3, #0]
    5b1e:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5b20:	e7ea      	b.n	5af8 <waitTransferComplete() [clone .part.0]+0x3c>
    5b22:	bf00      	nop
    5b24:	402c0000 	.word	0x402c0000
    5b28:	117f0002 	.word	0x117f0002
    5b2c:	2001ec97 	.word	0x2001ec97
    5b30:	2001e068 	.word	0x2001e068
    5b34:	117f0000 	.word	0x117f0000
    5b38:	20008bcc 	.word	0x20008bcc
    5b3c:	2001d748 	.word	0x2001d748
    5b40:	000f4240 	.word	0x000f4240

00005b44 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    5b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    5b48:	4c26      	ldr	r4, [pc, #152]	; (5be4 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    5b4a:	460f      	mov	r7, r1
  if (!m_transferActive) {
    5b4c:	7823      	ldrb	r3, [r4, #0]
    5b4e:	2b00      	cmp	r3, #0
    5b50:	d138      	bne.n	5bc4 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    5b52:	4b25      	ldr	r3, [pc, #148]	; (5be8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    5b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5b56:	05d2      	lsls	r2, r2, #23
    5b58:	d52b      	bpl.n	5bb2 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5b5a:	4d23      	ldr	r5, [pc, #140]	; (5be8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5b5c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5bf4 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5b60:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5b66:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    5b68:	f002 f950 	bl	7e0c <micros>
    5b6c:	4606      	mov	r6, r0
  while (fcn()) {
    5b6e:	e004      	b.n	5b7a <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5b70:	f002 f94c 	bl	7e0c <micros>
    5b74:	1b80      	subs	r0, r0, r6
    5b76:	4540      	cmp	r0, r8
    5b78:	d82a      	bhi.n	5bd0 <SdioCard::writeData(unsigned char const*)+0x8c>
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    5b7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    5b7c:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    5b80:	d0f6      	beq.n	5b70 <SdioCard::writeData(unsigned char const*)+0x2c>
    5b82:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    5b86:	4818      	ldr	r0, [pc, #96]	; (5be8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    5b88:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    5b8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5b8e:	055b      	lsls	r3, r3, #21
    5b90:	d5fc      	bpl.n	5b8c <SdioCard::writeData(unsigned char const*)+0x48>
    5b92:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    5b96:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5b9a:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    5b9c:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5b9e:	d1fa      	bne.n	5b96 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    5ba0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    5ba4:	45bc      	cmp	ip, r7
    5ba6:	d1f1      	bne.n	5b8c <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    5ba8:	2301      	movs	r3, #1
  return true;
    5baa:	4618      	mov	r0, r3
  m_transferActive = true;
    5bac:	7023      	strb	r3, [r4, #0]
}
    5bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5bb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    5bb8:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    5bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5bbc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    5bc0:	629a      	str	r2, [r3, #40]	; 0x28
    5bc2:	e7ca      	b.n	5b5a <SdioCard::writeData(unsigned char const*)+0x16>
    5bc4:	f7ff ff7a 	bl	5abc <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    5bc8:	2800      	cmp	r0, #0
    5bca:	d1c2      	bne.n	5b52 <SdioCard::writeData(unsigned char const*)+0xe>
}
    5bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    5bd0:	4906      	ldr	r1, [pc, #24]	; (5bec <SdioCard::writeData(unsigned char const*)+0xa8>)
    5bd2:	2422      	movs	r4, #34	; 0x22
  m_errorLine = line;
    5bd4:	4b06      	ldr	r3, [pc, #24]	; (5bf0 <SdioCard::writeData(unsigned char const*)+0xac>)
    5bd6:	f240 421f 	movw	r2, #1055	; 0x41f
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    5bda:	4648      	mov	r0, r9
  m_errorCode = code;
    5bdc:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5bde:	601a      	str	r2, [r3, #0]
}
    5be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5be4:	2001ec97 	.word	0x2001ec97
    5be8:	402c0000 	.word	0x402c0000
    5bec:	20008bcc 	.word	0x20008bcc
    5bf0:	2001d748 	.word	0x2001d748
    5bf4:	000f4240 	.word	0x000f4240

00005bf8 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    5bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bfc:	4607      	mov	r7, r0
    5bfe:	4688      	mov	r8, r1
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    5c00:	4c1f      	ldr	r4, [pc, #124]	; (5c80 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    5c02:	f002 f903 	bl	7e0c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c06:	4e1f      	ldr	r6, [pc, #124]	; (5c84 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5c08:	4605      	mov	r5, r0
  while (fcn()) {
    5c0a:	e004      	b.n	5c16 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c0c:	f002 f8fe 	bl	7e0c <micros>
    5c10:	1b43      	subs	r3, r0, r5
    5c12:	42b3      	cmp	r3, r6
    5c14:	d824      	bhi.n	5c60 <cardCommand(unsigned long, unsigned long)+0x68>
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    5c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5c18:	07d9      	lsls	r1, r3, #31
    5c1a:	d4f7      	bmi.n	5c0c <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5c1c:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    5c1e:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5c22:	d420      	bmi.n	5c66 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    5c24:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    5c28:	4c15      	ldr	r4, [pc, #84]	; (5c80 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5c2a:	4e17      	ldr	r6, [pc, #92]	; (5c88 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    5c2c:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    5c2e:	f002 f8ed 	bl	7e0c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c32:	4f14      	ldr	r7, [pc, #80]	; (5c84 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5c34:	4605      	mov	r5, r0
  while (fcn()) {
    5c36:	e004      	b.n	5c42 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c38:	f002 f8e8 	bl	7e0c <micros>
    5c3c:	1b40      	subs	r0, r0, r5
    5c3e:	42b8      	cmp	r0, r7
    5c40:	d80e      	bhi.n	5c60 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5c42:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    5c44:	4233      	tst	r3, r6
    5c46:	d0f7      	beq.n	5c38 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    5c48:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5c4a:	4b10      	ldr	r3, [pc, #64]	; (5c8c <cardCommand(unsigned long, unsigned long)+0x94>)
    5c4c:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5c4e:	681a      	ldr	r2, [r3, #0]
    5c50:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5c52:	681a      	ldr	r2, [r3, #0]
    5c54:	07d2      	lsls	r2, r2, #31
    5c56:	d503      	bpl.n	5c60 <cardCommand(unsigned long, unsigned long)+0x68>
    5c58:	681b      	ldr	r3, [r3, #0]
    5c5a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    5c5e:	d00b      	beq.n	5c78 <cardCommand(unsigned long, unsigned long)+0x80>
    5c60:	2000      	movs	r0, #0
}
    5c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5c66:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5c68:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5c6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    5c6e:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5c70:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    5c72:	4313      	orrs	r3, r2
    5c74:	64a3      	str	r3, [r4, #72]	; 0x48
    5c76:	e7d5      	b.n	5c24 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5c78:	2001      	movs	r0, #1
}
    5c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c7e:	bf00      	nop
    5c80:	402c0000 	.word	0x402c0000
    5c84:	000f4240 	.word	0x000f4240
    5c88:	000f0001 	.word	0x000f0001
    5c8c:	2001e068 	.word	0x2001e068

00005c90 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    5c90:	4b15      	ldr	r3, [pc, #84]	; (5ce8 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    5c92:	b530      	push	{r4, r5, lr}
    5c94:	460d      	mov	r5, r1
    5c96:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    5c98:	6819      	ldr	r1, [r3, #0]
    5c9a:	f7ff ffad 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    5c9e:	b308      	cbz	r0, 5ce4 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    5ca0:	4b12      	ldr	r3, [pc, #72]	; (5cec <readReg16(unsigned long, void*)+0x5c>)
    5ca2:	f105 040f 	add.w	r4, r5, #15
    5ca6:	691a      	ldr	r2, [r3, #16]
    5ca8:	9200      	str	r2, [sp, #0]
    5caa:	6959      	ldr	r1, [r3, #20]
    5cac:	9101      	str	r1, [sp, #4]
    5cae:	6999      	ldr	r1, [r3, #24]
    5cb0:	9102      	str	r1, [sp, #8]
    5cb2:	69db      	ldr	r3, [r3, #28]
    5cb4:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    5cb6:	2300      	movs	r3, #0
    5cb8:	e001      	b.n	5cbe <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5cba:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    5cbe:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    5cc2:	3301      	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5cc4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    5cc8:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    5ccc:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5cce:	fa22 f20c 	lsr.w	r2, r2, ip
    5cd2:	f10e 0110 	add.w	r1, lr, #16
    5cd6:	f804 2d01 	strb.w	r2, [r4, #-1]!
    5cda:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    5cde:	d1ec      	bne.n	5cba <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    5ce0:	2300      	movs	r3, #0
    5ce2:	73eb      	strb	r3, [r5, #15]
}
    5ce4:	b005      	add	sp, #20
    5ce6:	bd30      	pop	{r4, r5, pc}
    5ce8:	2001d978 	.word	0x2001d978
    5cec:	402c0000 	.word	0x402c0000

00005cf0 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    5cf0:	b510      	push	{r4, lr}
  bool useDma() { return m_options & DMA_SDIO; }
    5cf2:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    5cf4:	07db      	lsls	r3, r3, #31
    5cf6:	d505      	bpl.n	5d04 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5cf8:	4b15      	ldr	r3, [pc, #84]	; (5d50 <SdioCard::isBusy()+0x60>)
    5cfa:	681b      	ldr	r3, [r3, #0]
    5cfc:	b1b3      	cbz	r3, 5d2c <SdioCard::isBusy()+0x3c>
}
    5cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5d02:	4718      	bx	r3
    if (m_transferActive) {
    5d04:	4b13      	ldr	r3, [pc, #76]	; (5d54 <SdioCard::isBusy()+0x64>)
    5d06:	781b      	ldrb	r3, [r3, #0]
    5d08:	b93b      	cbnz	r3, 5d1a <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5d0a:	4b13      	ldr	r3, [pc, #76]	; (5d58 <SdioCard::isBusy()+0x68>)
    5d0c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    5d0e:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    5d12:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    5d16:	4620      	mov	r0, r4
    5d18:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5d1a:	4b0f      	ldr	r3, [pc, #60]	; (5d58 <SdioCard::isBusy()+0x68>)
    5d1c:	4c0f      	ldr	r4, [pc, #60]	; (5d5c <SdioCard::isBusy()+0x6c>)
    5d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5d20:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    5d22:	fab4 f484 	clz	r4, r4
    5d26:	0964      	lsrs	r4, r4, #5
}
    5d28:	4620      	mov	r0, r4
    5d2a:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5d2c:	4b0c      	ldr	r3, [pc, #48]	; (5d60 <SdioCard::isBusy()+0x70>)
    5d2e:	781c      	ldrb	r4, [r3, #0]
    5d30:	2c00      	cmp	r4, #0
    5d32:	d0f0      	beq.n	5d16 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5d34:	4b0b      	ldr	r3, [pc, #44]	; (5d64 <SdioCard::isBusy()+0x74>)
    5d36:	480c      	ldr	r0, [pc, #48]	; (5d68 <SdioCard::isBusy()+0x78>)
    5d38:	6819      	ldr	r1, [r3, #0]
    5d3a:	f7ff ff5d 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    5d3e:	2800      	cmp	r0, #0
    5d40:	d0e9      	beq.n	5d16 <SdioCard::isBusy()+0x26>
    5d42:	4b05      	ldr	r3, [pc, #20]	; (5d58 <SdioCard::isBusy()+0x68>)
    5d44:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5d46:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    5d4a:	f3c4 2400 	ubfx	r4, r4, #8, #1
    5d4e:	e7e2      	b.n	5d16 <SdioCard::isBusy()+0x26>
    5d50:	2001e064 	.word	0x2001e064
    5d54:	2001ec97 	.word	0x2001ec97
    5d58:	402c0000 	.word	0x402c0000
    5d5c:	117f0002 	.word	0x117f0002
    5d60:	2001ec94 	.word	0x2001ec94
    5d64:	2001d978 	.word	0x2001d978
    5d68:	0d1a0000 	.word	0x0d1a0000

00005d6c <SdioCard::status()>:
uint32_t SdioCard::status() { return statusCMD13(); }
    5d6c:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5d6e:	4b04      	ldr	r3, [pc, #16]	; (5d80 <SdioCard::status()+0x14>)
    5d70:	4804      	ldr	r0, [pc, #16]	; (5d84 <SdioCard::status()+0x18>)
    5d72:	6819      	ldr	r1, [r3, #0]
    5d74:	f7ff ff40 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    5d78:	b108      	cbz	r0, 5d7e <SdioCard::status()+0x12>
    5d7a:	4b03      	ldr	r3, [pc, #12]	; (5d88 <SdioCard::status()+0x1c>)
    5d7c:	6918      	ldr	r0, [r3, #16]
uint32_t SdioCard::status() { return statusCMD13(); }
    5d7e:	bd08      	pop	{r3, pc}
    5d80:	2001d978 	.word	0x2001d978
    5d84:	0d1a0000 	.word	0x0d1a0000
    5d88:	402c0000 	.word	0x402c0000

00005d8c <isBusyCMD13()>:
static bool isBusyCMD13() {
    5d8c:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5d8e:	4b07      	ldr	r3, [pc, #28]	; (5dac <isBusyCMD13()+0x20>)
    5d90:	4807      	ldr	r0, [pc, #28]	; (5db0 <isBusyCMD13()+0x24>)
    5d92:	6819      	ldr	r1, [r3, #0]
    5d94:	f7ff ff30 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    5d98:	b130      	cbz	r0, 5da8 <isBusyCMD13()+0x1c>
    5d9a:	4b06      	ldr	r3, [pc, #24]	; (5db4 <isBusyCMD13()+0x28>)
    5d9c:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    5d9e:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    5da2:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    5da6:	bd08      	pop	{r3, pc}
    5da8:	2001      	movs	r0, #1
    5daa:	bd08      	pop	{r3, pc}
    5dac:	2001d978 	.word	0x2001d978
    5db0:	0d1a0000 	.word	0x0d1a0000
    5db4:	402c0000 	.word	0x402c0000

00005db8 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    5dbc:	4b29      	ldr	r3, [pc, #164]	; (5e64 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    5dbe:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    5dc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 5e84 <SdioCard::writeStart(unsigned long)+0xcc>
    5dc4:	4e28      	ldr	r6, [pc, #160]	; (5e68 <SdioCard::writeStart(unsigned long)+0xb0>)
    5dc6:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    5dca:	f002 f81f 	bl	7e0c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5dce:	4d27      	ldr	r5, [pc, #156]	; (5e6c <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    5dd0:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5dd2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 5e88 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5dd6:	4f26      	ldr	r7, [pc, #152]	; (5e70 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    5dd8:	e006      	b.n	5de8 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5dda:	f002 f817 	bl	7e0c <micros>
    5dde:	1b00      	subs	r0, r0, r4
    5de0:	42b8      	cmp	r0, r7
    5de2:	d829      	bhi.n	5e38 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    5de4:	f003 fb1c 	bl	9420 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5de8:	6831      	ldr	r1, [r6, #0]
    5dea:	4628      	mov	r0, r5
    5dec:	f7ff ff04 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    5df0:	2800      	cmp	r0, #0
    5df2:	d0f2      	beq.n	5dda <SdioCard::writeStart(unsigned long)+0x22>
    5df4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5df8:	05db      	lsls	r3, r3, #23
    5dfa:	d5ee      	bpl.n	5dda <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    5dfc:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    5e02:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5e06:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    5e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5e0e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5e12:	4b18      	ldr	r3, [pc, #96]	; (5e74 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5e14:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5e18:	781b      	ldrb	r3, [r3, #0]
    5e1a:	b1cb      	cbz	r3, 5e50 <SdioCard::writeStart(unsigned long)+0x98>
    5e1c:	4649      	mov	r1, r9
    5e1e:	4816      	ldr	r0, [pc, #88]	; (5e78 <SdioCard::writeStart(unsigned long)+0xc0>)
    5e20:	f7ff feea 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    5e24:	b930      	cbnz	r0, 5e34 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    5e26:	4915      	ldr	r1, [pc, #84]	; (5e7c <SdioCard::writeStart(unsigned long)+0xc4>)
    5e28:	240e      	movs	r4, #14
  m_errorLine = line;
    5e2a:	4b15      	ldr	r3, [pc, #84]	; (5e80 <SdioCard::writeStart(unsigned long)+0xc8>)
    5e2c:	f240 427e 	movw	r2, #1150	; 0x47e
  m_errorCode = code;
    5e30:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5e32:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    5e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5e38:	4a10      	ldr	r2, [pc, #64]	; (5e7c <SdioCard::writeStart(unsigned long)+0xc4>)
    5e3a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5e3c:	2000      	movs	r0, #0
  m_errorLine = line;
    5e3e:	4b10      	ldr	r3, [pc, #64]	; (5e80 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    5e40:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5e42:	f240 4272 	movw	r2, #1138	; 0x472
      m_busyFcn = 0;
    5e46:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    5e4a:	601a      	str	r2, [r3, #0]
}
    5e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5e50:	ea4f 2949 	mov.w	r9, r9, lsl #9
    5e54:	4808      	ldr	r0, [pc, #32]	; (5e78 <SdioCard::writeStart(unsigned long)+0xc0>)
    5e56:	4649      	mov	r1, r9
    5e58:	f7ff fece 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    5e5c:	2800      	cmp	r0, #0
    5e5e:	d1e9      	bne.n	5e34 <SdioCard::writeStart(unsigned long)+0x7c>
    5e60:	e7e1      	b.n	5e26 <SdioCard::writeStart(unsigned long)+0x6e>
    5e62:	bf00      	nop
    5e64:	00005d8d 	.word	0x00005d8d
    5e68:	2001d978 	.word	0x2001d978
    5e6c:	0d1a0000 	.word	0x0d1a0000
    5e70:	000f4240 	.word	0x000f4240
    5e74:	2001ec96 	.word	0x2001ec96
    5e78:	193a0020 	.word	0x193a0020
    5e7c:	20008bcc 	.word	0x20008bcc
    5e80:	2001d748 	.word	0x2001d748
    5e84:	2001e064 	.word	0x2001e064
    5e88:	402c0000 	.word	0x402c0000

00005e8c <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    5e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e90:	468a      	mov	sl, r1
    5e92:	4691      	mov	r9, r2
    5e94:	4e24      	ldr	r6, [pc, #144]	; (5f28 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x9c>)
  uint32_t m = micros();
    5e96:	f001 ffb9 	bl	7e0c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5e9a:	4d24      	ldr	r5, [pc, #144]	; (5f2c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa0>)
  uint32_t m = micros();
    5e9c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5e9e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 5f50 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc4>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ea2:	4f23      	ldr	r7, [pc, #140]	; (5f30 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa4>)
  while (fcn()) {
    5ea4:	e004      	b.n	5eb0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ea6:	f001 ffb1 	bl	7e0c <micros>
    5eaa:	1b00      	subs	r0, r0, r4
    5eac:	42b8      	cmp	r0, r7
    5eae:	d825      	bhi.n	5efc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5eb0:	6831      	ldr	r1, [r6, #0]
    5eb2:	4628      	mov	r0, r5
    5eb4:	f7ff fea0 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    5eb8:	2800      	cmp	r0, #0
    5eba:	d0f4      	beq.n	5ea6 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
    5ebc:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5ec0:	05db      	lsls	r3, r3, #23
    5ec2:	d5f0      	bpl.n	5ea6 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    5ec4:	4b1b      	ldr	r3, [pc, #108]	; (5f34 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa8>)
    5ec6:	2201      	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5ec8:	4651      	mov	r1, sl
    5eca:	481b      	ldr	r0, [pc, #108]	; (5f38 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xac>)
  m_dmaBusy = true;
    5ecc:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    5ece:	2200      	movs	r2, #0
    5ed0:	4b1a      	ldr	r3, [pc, #104]	; (5f3c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb0>)
    5ed2:	601a      	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5ed4:	4a1a      	ldr	r2, [pc, #104]	; (5f40 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5ed6:	4b1b      	ldr	r3, [pc, #108]	; (5f44 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb8>)
  SDHC_DSADDR = (uint32_t)status;
    5ed8:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5edc:	f8c8 2004 	str.w	r2, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5ee0:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5ee4:	f7ff fe88 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    5ee8:	b990      	cbnz	r0, 5f10 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>
  m_errorCode = code;
    5eea:	4917      	ldr	r1, [pc, #92]	; (5f48 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    5eec:	2404      	movs	r4, #4
  m_errorLine = line;
    5eee:	4b17      	ldr	r3, [pc, #92]	; (5f4c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    5ef0:	f240 321b 	movw	r2, #795	; 0x31b
  m_errorCode = code;
    5ef4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5ef6:	601a      	str	r2, [r3, #0]
}
    5ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5efc:	4912      	ldr	r1, [pc, #72]	; (5f48 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    5efe:	240a      	movs	r4, #10
  m_errorLine = line;
    5f00:	4b12      	ldr	r3, [pc, #72]	; (5f4c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    5f02:	f44f 7245 	mov.w	r2, #788	; 0x314
    return sdError(SD_CARD_ERROR_CMD13);
    5f06:	2000      	movs	r0, #0
  m_errorCode = code;
    5f08:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5f0a:	601a      	str	r2, [r3, #0]
}
    5f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!waitDmaStatus()) {
    5f10:	f7ff fda0 	bl	5a54 <waitDmaStatus()>
    5f14:	2800      	cmp	r0, #0
    5f16:	d1f9      	bne.n	5f0c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
  m_errorCode = code;
    5f18:	490b      	ldr	r1, [pc, #44]	; (5f48 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    5f1a:	2426      	movs	r4, #38	; 0x26
  m_errorLine = line;
    5f1c:	4b0b      	ldr	r3, [pc, #44]	; (5f4c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    5f1e:	f240 321e 	movw	r2, #798	; 0x31e
  m_errorCode = code;
    5f22:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5f24:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    5f26:	e7f1      	b.n	5f0c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
    5f28:	2001d978 	.word	0x2001d978
    5f2c:	0d1a0000 	.word	0x0d1a0000
    5f30:	000f4240 	.word	0x000f4240
    5f34:	2001ec98 	.word	0x2001ec98
    5f38:	063a0011 	.word	0x063a0011
    5f3c:	2001e068 	.word	0x2001e068
    5f40:	00010040 	.word	0x00010040
    5f44:	117f0002 	.word	0x117f0002
    5f48:	20008bcc 	.word	0x20008bcc
    5f4c:	2001d748 	.word	0x2001d748
    5f50:	402c0000 	.word	0x402c0000

00005f54 <SdioCard::readStop()>:
bool SdioCard::readStop() { return transferStop(); }
    5f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5f58:	4c25      	ldr	r4, [pc, #148]	; (5ff0 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5f5a:	2100      	movs	r1, #0
    5f5c:	4825      	ldr	r0, [pc, #148]	; (5ff4 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5f5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5f64:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5f66:	f7ff fe47 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    5f6a:	4605      	mov	r5, r0
    5f6c:	b948      	cbnz	r0, 5f82 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    5f6e:	4922      	ldr	r1, [pc, #136]	; (5ff8 <SdioCard::readStop()+0xa4>)
    5f70:	2009      	movs	r0, #9
  m_errorLine = line;
    5f72:	4b22      	ldr	r3, [pc, #136]	; (5ffc <SdioCard::readStop()+0xa8>)
    5f74:	f240 226d 	movw	r2, #621	; 0x26d
  m_errorCode = code;
    5f78:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5f7a:	601a      	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    5f7c:	4628      	mov	r0, r5
    5f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    5f82:	4b1f      	ldr	r3, [pc, #124]	; (6000 <SdioCard::readStop()+0xac>)
    5f84:	f8df 8080 	ldr.w	r8, [pc, #128]	; 6008 <SdioCard::readStop()+0xb4>
    5f88:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    5f8c:	f001 ff3e 	bl	7e0c <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    5f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    5f92:	4606      	mov	r6, r0
  while (fcn()) {
    5f94:	01d8      	lsls	r0, r3, #7
    5f96:	d418      	bmi.n	5fca <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f98:	4f1a      	ldr	r7, [pc, #104]	; (6004 <SdioCard::readStop()+0xb0>)
    5f9a:	e004      	b.n	5fa6 <SdioCard::readStop()+0x52>
    yield();
    5f9c:	f003 fa40 	bl	9420 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    5fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5fa2:	01d9      	lsls	r1, r3, #7
    5fa4:	d411      	bmi.n	5fca <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5fa6:	f001 ff31 	bl	7e0c <micros>
    5faa:	1b83      	subs	r3, r0, r6
    5fac:	42bb      	cmp	r3, r7
    5fae:	d9f5      	bls.n	5f9c <SdioCard::readStop()+0x48>
  m_errorCode = code;
    5fb0:	4a11      	ldr	r2, [pc, #68]	; (5ff8 <SdioCard::readStop()+0xa4>)
    5fb2:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5fb4:	2500      	movs	r5, #0
  m_errorLine = line;
    5fb6:	4b11      	ldr	r3, [pc, #68]	; (5ffc <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    5fb8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5fba:	f44f 721c 	mov.w	r2, #624	; 0x270
bool SdioCard::readStop() { return transferStop(); }
    5fbe:	4628      	mov	r0, r5
      m_busyFcn = 0;
    5fc0:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    5fc4:	601a      	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    5fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    5fca:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    5fcc:	4b08      	ldr	r3, [pc, #32]	; (5ff0 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    5fce:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    5fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5fd4:	0792      	lsls	r2, r2, #30
    5fd6:	d5d1      	bpl.n	5f7c <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    5fd8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5fde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5fe2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    5fe6:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    5fe8:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    5fea:	629a      	str	r2, [r3, #40]	; 0x28
    5fec:	e7c6      	b.n	5f7c <SdioCard::readStop()+0x28>
    5fee:	bf00      	nop
    5ff0:	402c0000 	.word	0x402c0000
    5ff4:	0cdb0000 	.word	0x0cdb0000
    5ff8:	20008bcc 	.word	0x20008bcc
    5ffc:	2001d748 	.word	0x2001d748
    6000:	00005821 	.word	0x00005821
    6004:	000f4240 	.word	0x000f4240
    6008:	2001e064 	.word	0x2001e064

0000600c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                        size_t n) {
    600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6010:	4614      	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    6012:	f012 0203 	ands.w	r2, r2, #3
                        size_t n) {
    6016:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    6018:	bf18      	it	ne
    601a:	2201      	movne	r2, #1
    601c:	9301      	str	r3, [sp, #4]
    601e:	2b00      	cmp	r3, #0
    6020:	bf08      	it	eq
    6022:	f042 0201 	orreq.w	r2, r2, #1
    6026:	b152      	cbz	r2, 603e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x32>
  m_errorCode = code;
    6028:	492e      	ldr	r1, [pc, #184]	; (60e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    602a:	2026      	movs	r0, #38	; 0x26
  m_errorLine = line;
    602c:	4b2e      	ldr	r3, [pc, #184]	; (60e8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
    602e:	f240 2223 	movw	r2, #547	; 0x223
  m_errorCode = code;
    6032:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6034:	601a      	str	r2, [r3, #0]
}
    6036:	2000      	movs	r0, #0
    6038:	b003      	add	sp, #12
    603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    603e:	4b2b      	ldr	r3, [pc, #172]	; (60ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe0>)
    6040:	4606      	mov	r6, r0
    6042:	4a2b      	ldr	r2, [pc, #172]	; (60f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
    6044:	460d      	mov	r5, r1
    6046:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 6108 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xfc>
    604a:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    604c:	f001 fede 	bl	7e0c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6050:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 610c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
  uint32_t m = micros();
    6054:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6056:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 6110 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    605a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 6114 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>
  while (fcn()) {
    605e:	e006      	b.n	606e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x62>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6060:	f001 fed4 	bl	7e0c <micros>
    6064:	1bc0      	subs	r0, r0, r7
    6066:	4550      	cmp	r0, sl
    6068:	d82f      	bhi.n	60ca <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xbe>
    yield();
    606a:	f003 f9d9 	bl	9420 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    606e:	f8d9 1000 	ldr.w	r1, [r9]
    6072:	4640      	mov	r0, r8
    6074:	f7ff fdc0 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6078:	2800      	cmp	r0, #0
    607a:	d0f1      	beq.n	6060 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
    607c:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    6080:	05db      	lsls	r3, r3, #23
    6082:	d5ed      	bpl.n	6060 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6084:	9a01      	ldr	r2, [sp, #4]
  m_dmaBusy = true;
    6086:	2001      	movs	r0, #1
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6088:	4b1a      	ldr	r3, [pc, #104]	; (60f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe8>)
  m_busyFcn = 0;
    608a:	4919      	ldr	r1, [pc, #100]	; (60f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    608c:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    6090:	2200      	movs	r2, #0
    6092:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6094:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    6098:	4917      	ldr	r1, [pc, #92]	; (60f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xec>)
    609a:	7008      	strb	r0, [r1, #0]
  m_irqstat = 0;
    609c:	4917      	ldr	r1, [pc, #92]	; (60fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf0>)
    609e:	600a      	str	r2, [r1, #0]
  SDHC_DSADDR = (uint32_t)buf;
    60a0:	f8cb 4000 	str.w	r4, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    60a4:	f8cb 3004 	str.w	r3, [fp, #4]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    60a8:	4b15      	ldr	r3, [pc, #84]	; (6100 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    60aa:	4a16      	ldr	r2, [pc, #88]	; (6104 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf8>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    60ac:	781b      	ldrb	r3, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    60ae:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    60b2:	b1ab      	cbz	r3, 60e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd4>
    60b4:	4629      	mov	r1, r5
    60b6:	4630      	mov	r0, r6
    60b8:	f7ff fd9e 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    60bc:	2800      	cmp	r0, #0
    60be:	d0ba      	beq.n	6036 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
}
    60c0:	b003      	add	sp, #12
    60c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return waitDmaStatus();
    60c6:	f7ff bcc5 	b.w	5a54 <waitDmaStatus()>
  m_errorCode = code;
    60ca:	4a06      	ldr	r2, [pc, #24]	; (60e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    60cc:	210a      	movs	r1, #10
      m_busyFcn = 0;
    60ce:	2000      	movs	r0, #0
  m_errorLine = line;
    60d0:	4b05      	ldr	r3, [pc, #20]	; (60e8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
      m_busyFcn = 0;
    60d2:	4c07      	ldr	r4, [pc, #28]	; (60f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  m_errorCode = code;
    60d4:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    60d6:	f240 2226 	movw	r2, #550	; 0x226
      m_busyFcn = 0;
    60da:	6020      	str	r0, [r4, #0]
  m_errorLine = line;
    60dc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    60de:	e7aa      	b.n	6036 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    60e0:	026d      	lsls	r5, r5, #9
    60e2:	e7e7      	b.n	60b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>
    60e4:	20008bcc 	.word	0x20008bcc
    60e8:	2001d748 	.word	0x2001d748
    60ec:	00005d8d 	.word	0x00005d8d
    60f0:	2001e064 	.word	0x2001e064
    60f4:	1fff0000 	.word	0x1fff0000
    60f8:	2001ec98 	.word	0x2001ec98
    60fc:	2001e068 	.word	0x2001e068
    6100:	2001ec96 	.word	0x2001ec96
    6104:	117f0002 	.word	0x117f0002
    6108:	2001d978 	.word	0x2001d978
    610c:	0d1a0000 	.word	0x0d1a0000
    6110:	402c0000 	.word	0x402c0000
    6114:	000f4240 	.word	0x000f4240

00006118 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    6118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    611a:	4606      	mov	r6, r0
    611c:	7a00      	ldrb	r0, [r0, #8]
    611e:	460c      	mov	r4, r1
    6120:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    6122:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    6124:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    6126:	d413      	bmi.n	6150 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    6128:	b183      	cbz	r3, 614c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    612a:	440f      	add	r7, r1
    612c:	e001      	b.n	6132 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    612e:	42bc      	cmp	r4, r7
    6130:	d00c      	beq.n	614c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    6132:	6833      	ldr	r3, [r6, #0]
    6134:	462a      	mov	r2, r5
    6136:	4621      	mov	r1, r4
    6138:	4630      	mov	r0, r6
    613a:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    613c:	3401      	adds	r4, #1
    613e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i * 512UL)) {
    6142:	4798      	blx	r3
    6144:	2800      	cmp	r0, #0
    6146:	d1f2      	bne.n	612e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    6148:	2000      	movs	r0, #0
}
    614a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    614c:	2001      	movs	r0, #1
}
    614e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    6150:	0790      	lsls	r0, r2, #30
    6152:	d012      	beq.n	617a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    6154:	2b00      	cmp	r3, #0
    6156:	d0f9      	beq.n	614c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    6158:	440f      	add	r7, r1
    615a:	e001      	b.n	6160 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    615c:	42bc      	cmp	r4, r7
    615e:	d0f5      	beq.n	614c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    6160:	6833      	ldr	r3, [r6, #0]
    6162:	462a      	mov	r2, r5
    6164:	4621      	mov	r1, r4
    6166:	4630      	mov	r0, r6
    6168:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    616a:	3401      	adds	r4, #1
    616c:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    6170:	4798      	blx	r3
    6172:	2800      	cmp	r0, #0
    6174:	d1f2      	bne.n	615c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    6176:	2000      	movs	r0, #0
    6178:	e7e7      	b.n	614a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    617a:	4806      	ldr	r0, [pc, #24]	; (6194 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    617c:	f7ff ff46 	bl	600c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6180:	2800      	cmp	r0, #0
    6182:	d1e3      	bne.n	614c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    6184:	4904      	ldr	r1, [pc, #16]	; (6198 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    6186:	240c      	movs	r4, #12
  m_errorLine = line;
    6188:	4b04      	ldr	r3, [pc, #16]	; (619c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    618a:	f240 32ce 	movw	r2, #974	; 0x3ce
  m_errorCode = code;
    618e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6190:	601a      	str	r2, [r3, #0]
}
    6192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6194:	123a0037 	.word	0x123a0037
    6198:	20008bcc 	.word	0x20008bcc
    619c:	2001d748 	.word	0x2001d748

000061a0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    61a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61a2:	4606      	mov	r6, r0
    61a4:	7a00      	ldrb	r0, [r0, #8]
    61a6:	460c      	mov	r4, r1
    61a8:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    61aa:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    61ac:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    61ae:	d413      	bmi.n	61d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    61b0:	b183      	cbz	r3, 61d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    61b2:	440f      	add	r7, r1
    61b4:	e001      	b.n	61ba <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    61b6:	42bc      	cmp	r4, r7
    61b8:	d00c      	beq.n	61d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    61ba:	6833      	ldr	r3, [r6, #0]
    61bc:	462a      	mov	r2, r5
    61be:	4621      	mov	r1, r4
    61c0:	4630      	mov	r0, r6
    61c2:	6a1b      	ldr	r3, [r3, #32]
    for (size_t i = 0; i < n; i++) {
    61c4:	3401      	adds	r4, #1
    61c6:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i * 512UL)) {
    61ca:	4798      	blx	r3
    61cc:	2800      	cmp	r0, #0
    61ce:	d1f2      	bne.n	61b6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    61d0:	2000      	movs	r0, #0
}
    61d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    61d4:	2001      	movs	r0, #1
}
    61d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    61d8:	0790      	lsls	r0, r2, #30
    61da:	d012      	beq.n	6202 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    61dc:	2b00      	cmp	r3, #0
    61de:	d0f9      	beq.n	61d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    61e0:	440f      	add	r7, r1
    61e2:	e001      	b.n	61e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    61e4:	42bc      	cmp	r4, r7
    61e6:	d0f5      	beq.n	61d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    61e8:	6833      	ldr	r3, [r6, #0]
    61ea:	462a      	mov	r2, r5
    61ec:	4621      	mov	r1, r4
    61ee:	4630      	mov	r0, r6
    61f0:	6a1b      	ldr	r3, [r3, #32]
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    61f2:	3401      	adds	r4, #1
    61f4:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    61f8:	4798      	blx	r3
    61fa:	2800      	cmp	r0, #0
    61fc:	d1f2      	bne.n	61e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    61fe:	2000      	movs	r0, #0
    6200:	e7e7      	b.n	61d2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    6202:	4806      	ldr	r0, [pc, #24]	; (621c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    6204:	f7ff ff02 	bl	600c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6208:	2800      	cmp	r0, #0
    620a:	d1e3      	bne.n	61d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    620c:	4904      	ldr	r1, [pc, #16]	; (6220 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    620e:	240e      	movs	r4, #14
  m_errorLine = line;
    6210:	4b04      	ldr	r3, [pc, #16]	; (6224 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    6212:	f240 4264 	movw	r2, #1124	; 0x464
  m_errorCode = code;
    6216:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6218:	601a      	str	r2, [r3, #0]
}
    621a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    621c:	193a0027 	.word	0x193a0027
    6220:	20008bcc 	.word	0x20008bcc
    6224:	2001d748 	.word	0x2001d748

00006228 <SdioCard::begin(SdioConfig)>:
  m_curState = IDLE_STATE;
    6228:	2200      	movs	r2, #0
  m_initDone = false;
    622a:	4bb1      	ldr	r3, [pc, #708]	; (64f0 <SdioCard::begin(SdioConfig)+0x2c8>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    622c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_initDone = false;
    6230:	701a      	strb	r2, [r3, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
    6232:	4606      	mov	r6, r0
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6234:	4baf      	ldr	r3, [pc, #700]	; (64f4 <SdioCard::begin(SdioConfig)+0x2cc>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    6236:	b093      	sub	sp, #76	; 0x4c
  m_errorCode = SD_CARD_ERROR_NONE;
    6238:	4caf      	ldr	r4, [pc, #700]	; (64f8 <SdioCard::begin(SdioConfig)+0x2d0>)
  m_highCapacity = false;
    623a:	f8df a314 	ldr.w	sl, [pc, #788]	; 6550 <SdioCard::begin(SdioConfig)+0x328>
  m_version2 = false;
    623e:	4faf      	ldr	r7, [pc, #700]	; (64fc <SdioCard::begin(SdioConfig)+0x2d4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    6240:	7022      	strb	r2, [r4, #0]
  m_curState = IDLE_STATE;
    6242:	7242      	strb	r2, [r0, #9]
  m_highCapacity = false;
    6244:	f88a 2000 	strb.w	r2, [sl]
  m_version2 = false;
    6248:	703a      	strb	r2, [r7, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    624a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    624e:	7201      	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6250:	2105      	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6252:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    6256:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 6518 <SdioCard::begin(SdioConfig)+0x2f0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    625a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    625e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6262:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    6266:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    626a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    626e:	f042 0218 	orr.w	r2, r2, #24
    6272:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    6276:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    627a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    627e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6282:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6286:	4a9e      	ldr	r2, [pc, #632]	; (6500 <SdioCard::begin(SdioConfig)+0x2d8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6288:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    628c:	f040 000c 	orr.w	r0, r0, #12
    6290:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    6294:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6296:	f420 5060 	bic.w	r0, r0, #14336	; 0x3800
    629a:	6258      	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    629c:	69d8      	ldr	r0, [r3, #28]
    629e:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    62a2:	61d8      	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    62a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    62a6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    62aa:	6258      	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    62ac:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    62b0:	f8c2 11d0 	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    62b4:	f8c2 11bc 	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    62b8:	f8c2 11c0 	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    62bc:	f8c2 11c4 	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    62c0:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    62c4:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    62c8:	4b8e      	ldr	r3, [pc, #568]	; (6504 <SdioCard::begin(SdioConfig)+0x2dc>)
  SDHC_MIX_CTRL |= 0x80000000;
    62ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    62ce:	f8c8 2048 	str.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    62d2:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    62d6:	4313      	orrs	r3, r2
    62d8:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    62dc:	f8d8 502c 	ldr.w	r5, [r8, #44]	; 0x2c
    62e0:	f015 7580 	ands.w	r5, r5, #16777216	; 0x1000000
    62e4:	d1fa      	bne.n	62dc <SdioCard::begin(SdioConfig)+0xb4>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    62e6:	f44f 70c8 	mov.w	r0, #400	; 0x190
    62ea:	f7ff faa9 	bl	5840 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    62ee:	4b84      	ldr	r3, [pc, #528]	; (6500 <SdioCard::begin(SdioConfig)+0x2d8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    62f0:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    62f4:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    62f8:	f8c3 51cc 	str.w	r5, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    62fc:	f8c3 51d0 	str.w	r5, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6300:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6304:	f8c3 51c0 	str.w	r5, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6308:	f8c3 51c4 	str.w	r5, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    630c:	f8c3 51c8 	str.w	r5, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6310:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    6314:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    6318:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    631c:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    6320:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    6324:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    6328:	4b77      	ldr	r3, [pc, #476]	; (6508 <SdioCard::begin(SdioConfig)+0x2e0>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    632a:	4a78      	ldr	r2, [pc, #480]	; (650c <SdioCard::begin(SdioConfig)+0x2e4>)
    632c:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
    6330:	4b77      	ldr	r3, [pc, #476]	; (6510 <SdioCard::begin(SdioConfig)+0x2e8>)
    6332:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    6336:	4b77      	ldr	r3, [pc, #476]	; (6514 <SdioCard::begin(SdioConfig)+0x2ec>)
    6338:	2260      	movs	r2, #96	; 0x60
    633a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    633e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6342:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6346:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    634a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    634e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    6352:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    6356:	4b70      	ldr	r3, [pc, #448]	; (6518 <SdioCard::begin(SdioConfig)+0x2f0>)
    6358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    635a:	f011 6100 	ands.w	r1, r1, #134217728	; 0x8000000
    635e:	d1fb      	bne.n	6358 <SdioCard::begin(SdioConfig)+0x130>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    6360:	4608      	mov	r0, r1
    6362:	f7ff fc49 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6366:	4683      	mov	fp, r0
    6368:	b948      	cbnz	r0, 637e <SdioCard::begin(SdioConfig)+0x156>
  m_errorCode = code;
    636a:	2101      	movs	r1, #1
  m_errorLine = line;
    636c:	4b6b      	ldr	r3, [pc, #428]	; (651c <SdioCard::begin(SdioConfig)+0x2f4>)
    636e:	f240 22be 	movw	r2, #702	; 0x2be
  m_errorCode = code;
    6372:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6374:	601a      	str	r2, [r3, #0]
}
    6376:	4658      	mov	r0, fp
    6378:	b013      	add	sp, #76	; 0x4c
    637a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    637e:	f04f 0803 	mov.w	r8, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    6382:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 6554 <SdioCard::begin(SdioConfig)+0x32c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    6386:	4d64      	ldr	r5, [pc, #400]	; (6518 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    6388:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    638c:	4648      	mov	r0, r9
    638e:	f7ff fc33 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6392:	2800      	cmp	r0, #0
    6394:	d14e      	bne.n	6434 <SdioCard::begin(SdioConfig)+0x20c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    6396:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    6398:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    639c:	62eb      	str	r3, [r5, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    639e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    63a0:	01db      	lsls	r3, r3, #7
    63a2:	d4fc      	bmi.n	639e <SdioCard::begin(SdioConfig)+0x176>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    63a4:	f1b8 0801 	subs.w	r8, r8, #1
    63a8:	d1ee      	bne.n	6388 <SdioCard::begin(SdioConfig)+0x160>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    63aa:	783b      	ldrb	r3, [r7, #0]
    63ac:	2b00      	cmp	r3, #0
    63ae:	4b5c      	ldr	r3, [pc, #368]	; (6520 <SdioCard::begin(SdioConfig)+0x2f8>)
    63b0:	bf0c      	ite	eq
    63b2:	f44f 1940 	moveq.w	r9, #3145728	; 0x300000
    63b6:	4699      	movne	r9, r3
  int m = micros();
    63b8:	f001 fd28 	bl	7e0c <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    63bc:	4f59      	ldr	r7, [pc, #356]	; (6524 <SdioCard::begin(SdioConfig)+0x2fc>)
  int m = micros();
    63be:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    63c0:	f8df b194 	ldr.w	fp, [pc, #404]	; 6558 <SdioCard::begin(SdioConfig)+0x330>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    63c4:	f8df 8194 	ldr.w	r8, [pc, #404]	; 655c <SdioCard::begin(SdioConfig)+0x334>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    63c8:	2100      	movs	r1, #0
    63ca:	4638      	mov	r0, r7
    63cc:	f7ff fc14 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    63d0:	b958      	cbnz	r0, 63ea <SdioCard::begin(SdioConfig)+0x1c2>
      return sdError(SD_CARD_ERROR_ACMD41);
    63d2:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    63d6:	2117      	movs	r1, #23
  m_errorLine = line;
    63d8:	4b50      	ldr	r3, [pc, #320]	; (651c <SdioCard::begin(SdioConfig)+0x2f4>)
    63da:	f240 22d3 	movw	r2, #723	; 0x2d3
}
    63de:	4658      	mov	r0, fp
  m_errorCode = code;
    63e0:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    63e2:	601a      	str	r2, [r3, #0]
}
    63e4:	b013      	add	sp, #76	; 0x4c
    63e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    63ea:	4649      	mov	r1, r9
    63ec:	4658      	mov	r0, fp
    63ee:	f7ff fc03 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    63f2:	2800      	cmp	r0, #0
    63f4:	d0ed      	beq.n	63d2 <SdioCard::begin(SdioConfig)+0x1aa>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    63f6:	f001 fd09 	bl	7e0c <micros>
    63fa:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    63fc:	4b46      	ldr	r3, [pc, #280]	; (6518 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    63fe:	4540      	cmp	r0, r8
    6400:	d8e7      	bhi.n	63d2 <SdioCard::begin(SdioConfig)+0x1aa>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    6402:	691a      	ldr	r2, [r3, #16]
    6404:	2a00      	cmp	r2, #0
    6406:	dadf      	bge.n	63c8 <SdioCard::begin(SdioConfig)+0x1a0>
  m_ocr = SDHC_CMDRSP0;
    6408:	6919      	ldr	r1, [r3, #16]
    640a:	4a47      	ldr	r2, [pc, #284]	; (6528 <SdioCard::begin(SdioConfig)+0x300>)
    640c:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    640e:	691b      	ldr	r3, [r3, #16]
    6410:	005d      	lsls	r5, r3, #1
    6412:	d502      	bpl.n	641a <SdioCard::begin(SdioConfig)+0x1f2>
    m_highCapacity = true;
    6414:	2301      	movs	r3, #1
    6416:	f88a 3000 	strb.w	r3, [sl]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    641a:	2100      	movs	r1, #0
    641c:	4843      	ldr	r0, [pc, #268]	; (652c <SdioCard::begin(SdioConfig)+0x304>)
    641e:	f7ff fbeb 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6422:	4683      	mov	fp, r0
    6424:	b9c8      	cbnz	r0, 645a <SdioCard::begin(SdioConfig)+0x232>
  m_errorCode = code;
    6426:	2102      	movs	r1, #2
  m_errorLine = line;
    6428:	4b3c      	ldr	r3, [pc, #240]	; (651c <SdioCard::begin(SdioConfig)+0x2f4>)
    642a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  m_errorCode = code;
    642e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6430:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    6432:	e7a0      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
      if (SDHC_CMDRSP0 != 0X1AA) {
    6434:	4b38      	ldr	r3, [pc, #224]	; (6518 <SdioCard::begin(SdioConfig)+0x2f0>)
    6436:	691b      	ldr	r3, [r3, #16]
    6438:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    643c:	d008      	beq.n	6450 <SdioCard::begin(SdioConfig)+0x228>
  m_errorCode = code;
    643e:	2106      	movs	r1, #6
  m_errorLine = line;
    6440:	4b36      	ldr	r3, [pc, #216]	; (651c <SdioCard::begin(SdioConfig)+0x2f4>)
    6442:	f44f 7231 	mov.w	r2, #708	; 0x2c4
        return sdError(SD_CARD_ERROR_CMD8);
    6446:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    644a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    644c:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    644e:	e792      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
      m_version2 = true;
    6450:	2301      	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6452:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 6520 <SdioCard::begin(SdioConfig)+0x2f8>
      m_version2 = true;
    6456:	703b      	strb	r3, [r7, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6458:	e7ae      	b.n	63b8 <SdioCard::begin(SdioConfig)+0x190>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    645a:	2100      	movs	r1, #0
    645c:	4834      	ldr	r0, [pc, #208]	; (6530 <SdioCard::begin(SdioConfig)+0x308>)
    645e:	f7ff fbcb 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6462:	4683      	mov	fp, r0
    6464:	b930      	cbnz	r0, 6474 <SdioCard::begin(SdioConfig)+0x24c>
  m_errorCode = code;
    6466:	2103      	movs	r1, #3
  m_errorLine = line;
    6468:	4b2c      	ldr	r3, [pc, #176]	; (651c <SdioCard::begin(SdioConfig)+0x2f4>)
    646a:	f240 22df 	movw	r2, #735	; 0x2df
  m_errorCode = code;
    646e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6470:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    6472:	e780      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6474:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 6518 <SdioCard::begin(SdioConfig)+0x2f0>
    6478:	4b2e      	ldr	r3, [pc, #184]	; (6534 <SdioCard::begin(SdioConfig)+0x30c>)
    647a:	f8da 2010 	ldr.w	r2, [sl, #16]
    647e:	4d2e      	ldr	r5, [pc, #184]	; (6538 <SdioCard::begin(SdioConfig)+0x310>)
    6480:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6482:	492e      	ldr	r1, [pc, #184]	; (653c <SdioCard::begin(SdioConfig)+0x314>)
    6484:	482e      	ldr	r0, [pc, #184]	; (6540 <SdioCard::begin(SdioConfig)+0x318>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6486:	602b      	str	r3, [r5, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6488:	f7ff fc02 	bl	5c90 <readReg16(unsigned long, void*)>
    648c:	4683      	mov	fp, r0
    648e:	b930      	cbnz	r0, 649e <SdioCard::begin(SdioConfig)+0x276>
  m_errorCode = code;
    6490:	2107      	movs	r1, #7
  m_errorLine = line;
    6492:	4b22      	ldr	r3, [pc, #136]	; (651c <SdioCard::begin(SdioConfig)+0x2f4>)
    6494:	f44f 7239 	mov.w	r2, #740	; 0x2e4
  m_errorCode = code;
    6498:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    649a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    649c:	e76b      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    649e:	4929      	ldr	r1, [pc, #164]	; (6544 <SdioCard::begin(SdioConfig)+0x31c>)
    64a0:	4829      	ldr	r0, [pc, #164]	; (6548 <SdioCard::begin(SdioConfig)+0x320>)
    64a2:	f7ff fbf5 	bl	5c90 <readReg16(unsigned long, void*)>
    64a6:	4683      	mov	fp, r0
    64a8:	b930      	cbnz	r0, 64b8 <SdioCard::begin(SdioConfig)+0x290>
  m_errorCode = code;
    64aa:	2108      	movs	r1, #8
  m_errorLine = line;
    64ac:	4b1b      	ldr	r3, [pc, #108]	; (651c <SdioCard::begin(SdioConfig)+0x2f4>)
    64ae:	f240 22e7 	movw	r2, #743	; 0x2e7
  m_errorCode = code;
    64b2:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    64b4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    64b6:	e75e      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    64b8:	6829      	ldr	r1, [r5, #0]
    64ba:	4824      	ldr	r0, [pc, #144]	; (654c <SdioCard::begin(SdioConfig)+0x324>)
    64bc:	f7ff fb9c 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    64c0:	4683      	mov	fp, r0
    64c2:	b930      	cbnz	r0, 64d2 <SdioCard::begin(SdioConfig)+0x2aa>
  m_errorCode = code;
    64c4:	2105      	movs	r1, #5
  m_errorLine = line;
    64c6:	4b15      	ldr	r3, [pc, #84]	; (651c <SdioCard::begin(SdioConfig)+0x2f4>)
    64c8:	f240 22ea 	movw	r2, #746	; 0x2ea
  m_errorCode = code;
    64cc:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    64ce:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    64d0:	e751      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    64d2:	6829      	ldr	r1, [r5, #0]
    64d4:	4813      	ldr	r0, [pc, #76]	; (6524 <SdioCard::begin(SdioConfig)+0x2fc>)
    64d6:	f7ff fb8f 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    64da:	2800      	cmp	r0, #0
    64dc:	d140      	bne.n	6560 <SdioCard::begin(SdioConfig)+0x338>
  m_errorCode = code;
    64de:	2114      	movs	r1, #20
  m_errorLine = line;
    64e0:	4b0e      	ldr	r3, [pc, #56]	; (651c <SdioCard::begin(SdioConfig)+0x2f4>)
    64e2:	f240 22ee 	movw	r2, #750	; 0x2ee
    return sdError(SD_CARD_ERROR_ACMD6);
    64e6:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    64ea:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    64ec:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    64ee:	e742      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
    64f0:	2001ec94 	.word	0x2001ec94
    64f4:	400d8000 	.word	0x400d8000
    64f8:	20008bcc 	.word	0x20008bcc
    64fc:	2001ec95 	.word	0x2001ec95
    6500:	401f8000 	.word	0x401f8000
    6504:	01008000 	.word	0x01008000
    6508:	117f000b 	.word	0x117f000b
    650c:	000057f1 	.word	0x000057f1
    6510:	20008c00 	.word	0x20008c00
    6514:	e000e400 	.word	0xe000e400
    6518:	402c0000 	.word	0x402c0000
    651c:	2001d748 	.word	0x2001d748
    6520:	40300000 	.word	0x40300000
    6524:	371a0000 	.word	0x371a0000
    6528:	2001d974 	.word	0x2001d974
    652c:	02090000 	.word	0x02090000
    6530:	031a0000 	.word	0x031a0000
    6534:	ffff0000 	.word	0xffff0000
    6538:	2001d978 	.word	0x2001d978
    653c:	2001d964 	.word	0x2001d964
    6540:	09090000 	.word	0x09090000
    6544:	2001d954 	.word	0x2001d954
    6548:	0a090000 	.word	0x0a090000
    654c:	071b0000 	.word	0x071b0000
    6550:	2001ec96 	.word	0x2001ec96
    6554:	081a0000 	.word	0x081a0000
    6558:	29020000 	.word	0x29020000
    655c:	000f4240 	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6560:	2102      	movs	r1, #2
    6562:	4886      	ldr	r0, [pc, #536]	; (677c <SdioCard::begin(SdioConfig)+0x554>)
    6564:	f7ff fb48 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6568:	2800      	cmp	r0, #0
    656a:	d0b8      	beq.n	64de <SdioCard::begin(SdioConfig)+0x2b6>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    656c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6570:	f8df 9240 	ldr.w	r9, [pc, #576]	; 67b4 <SdioCard::begin(SdioConfig)+0x58c>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6574:	f023 0306 	bic.w	r3, r3, #6
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6578:	f8df 821c 	ldr.w	r8, [pc, #540]	; 6798 <SdioCard::begin(SdioConfig)+0x570>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    657c:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    6580:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    6584:	f043 0302 	orr.w	r3, r3, #2
    6588:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    658c:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    6590:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
  uint32_t m = micros();
    6594:	f001 fc3a 	bl	7e0c <micros>
    6598:	4607      	mov	r7, r0
  while (fcn()) {
    659a:	e004      	b.n	65a6 <SdioCard::begin(SdioConfig)+0x37e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    659c:	f001 fc36 	bl	7e0c <micros>
    65a0:	1bc0      	subs	r0, r0, r7
    65a2:	4540      	cmp	r0, r8
    65a4:	d82b      	bhi.n	65fe <SdioCard::begin(SdioConfig)+0x3d6>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    65a6:	6829      	ldr	r1, [r5, #0]
    65a8:	4648      	mov	r0, r9
    65aa:	f7ff fb25 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    65ae:	2800      	cmp	r0, #0
    65b0:	d0f4      	beq.n	659c <SdioCard::begin(SdioConfig)+0x374>
    65b2:	f8da 3010 	ldr.w	r3, [sl, #16]
  while (fcn()) {
    65b6:	05d8      	lsls	r0, r3, #23
    65b8:	d5f0      	bpl.n	659c <SdioCard::begin(SdioConfig)+0x374>
  m_dmaBusy = true;
    65ba:	2301      	movs	r3, #1
    65bc:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 67b8 <SdioCard::begin(SdioConfig)+0x590>
  m_irqstat = 0;
    65c0:	4f6f      	ldr	r7, [pc, #444]	; (6780 <SdioCard::begin(SdioConfig)+0x558>)
    65c2:	f04f 0b00 	mov.w	fp, #0
  m_dmaBusy = true;
    65c6:	f888 3000 	strb.w	r3, [r8]
  SDHC_DSADDR = (uint32_t)scr;
    65ca:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 67bc <SdioCard::begin(SdioConfig)+0x594>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    65ce:	4b6d      	ldr	r3, [pc, #436]	; (6784 <SdioCard::begin(SdioConfig)+0x55c>)
  m_irqstat = 0;
    65d0:	f8c7 b000 	str.w	fp, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    65d4:	f8ca 9000 	str.w	r9, [sl]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    65d8:	f8ca 3004 	str.w	r3, [sl, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    65dc:	4b6a      	ldr	r3, [pc, #424]	; (6788 <SdioCard::begin(SdioConfig)+0x560>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    65de:	486b      	ldr	r0, [pc, #428]	; (678c <SdioCard::begin(SdioConfig)+0x564>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    65e0:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    65e4:	6829      	ldr	r1, [r5, #0]
    65e6:	f7ff fb07 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    65ea:	b988      	cbnz	r0, 6610 <SdioCard::begin(SdioConfig)+0x3e8>
  m_errorCode = code;
    65ec:	2118      	movs	r1, #24
  m_errorLine = line;
    65ee:	4b68      	ldr	r3, [pc, #416]	; (6790 <SdioCard::begin(SdioConfig)+0x568>)
    65f0:	f240 12d7 	movw	r2, #471	; 0x1d7
    return false;
    65f4:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    65f8:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    65fa:	601a      	str	r2, [r3, #0]
  return false;
    65fc:	e6bb      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    65fe:	210a      	movs	r1, #10
  m_errorLine = line;
    6600:	4b63      	ldr	r3, [pc, #396]	; (6790 <SdioCard::begin(SdioConfig)+0x568>)
    6602:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    return false;
    6606:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    660a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    660c:	601a      	str	r2, [r3, #0]
  return false;
    660e:	e6b2      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6610:	4659      	mov	r1, fp
    6612:	4860      	ldr	r0, [pc, #384]	; (6794 <SdioCard::begin(SdioConfig)+0x56c>)
    6614:	f7ff faf0 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6618:	2800      	cmp	r0, #0
    661a:	d0e7      	beq.n	65ec <SdioCard::begin(SdioConfig)+0x3c4>
  if (!waitDmaStatus()) {
    661c:	f7ff fa1a 	bl	5a54 <waitDmaStatus()>
    6620:	4683      	mov	fp, r0
    6622:	b930      	cbnz	r0, 6632 <SdioCard::begin(SdioConfig)+0x40a>
  m_errorCode = code;
    6624:	2126      	movs	r1, #38	; 0x26
  m_errorLine = line;
    6626:	4b5a      	ldr	r3, [pc, #360]	; (6790 <SdioCard::begin(SdioConfig)+0x568>)
    6628:	f44f 72ed 	mov.w	r2, #474	; 0x1da
  m_errorCode = code;
    662c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    662e:	601a      	str	r2, [r3, #0]
  return false;
    6630:	e6a1      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
  uint32_t m = micros();
    6632:	f001 fbeb 	bl	7e0c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6636:	f8df a17c 	ldr.w	sl, [pc, #380]	; 67b4 <SdioCard::begin(SdioConfig)+0x58c>
    663a:	f8df b184 	ldr.w	fp, [pc, #388]	; 67c0 <SdioCard::begin(SdioConfig)+0x598>
  uint32_t m = micros();
    663e:	9001      	str	r0, [sp, #4]
  while (fcn()) {
    6640:	e006      	b.n	6650 <SdioCard::begin(SdioConfig)+0x428>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6642:	f001 fbe3 	bl	7e0c <micros>
    6646:	9b01      	ldr	r3, [sp, #4]
    6648:	1ac0      	subs	r0, r0, r3
    664a:	4b53      	ldr	r3, [pc, #332]	; (6798 <SdioCard::begin(SdioConfig)+0x570>)
    664c:	4298      	cmp	r0, r3
    664e:	d827      	bhi.n	66a0 <SdioCard::begin(SdioConfig)+0x478>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6650:	6829      	ldr	r1, [r5, #0]
    6652:	4650      	mov	r0, sl
    6654:	f7ff fad0 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6658:	2800      	cmp	r0, #0
    665a:	d0f2      	beq.n	6642 <SdioCard::begin(SdioConfig)+0x41a>
    665c:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    6660:	05d9      	lsls	r1, r3, #23
    6662:	d5ee      	bpl.n	6642 <SdioCard::begin(SdioConfig)+0x41a>
  m_dmaBusy = true;
    6664:	2201      	movs	r2, #1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6666:	4849      	ldr	r0, [pc, #292]	; (678c <SdioCard::begin(SdioConfig)+0x564>)
  m_dmaBusy = true;
    6668:	f888 2000 	strb.w	r2, [r8]
  m_irqstat = 0;
    666c:	f04f 0800 	mov.w	r8, #0
  SDHC_DSADDR = (uint32_t)scr;
    6670:	4a4a      	ldr	r2, [pc, #296]	; (679c <SdioCard::begin(SdioConfig)+0x574>)
  m_irqstat = 0;
    6672:	f8c7 8000 	str.w	r8, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    6676:	f8cb 2000 	str.w	r2, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    667a:	4a49      	ldr	r2, [pc, #292]	; (67a0 <SdioCard::begin(SdioConfig)+0x578>)
    667c:	f8cb 2004 	str.w	r2, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6680:	4a41      	ldr	r2, [pc, #260]	; (6788 <SdioCard::begin(SdioConfig)+0x560>)
    6682:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6686:	6829      	ldr	r1, [r5, #0]
    6688:	f7ff fab6 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    668c:	b988      	cbnz	r0, 66b2 <SdioCard::begin(SdioConfig)+0x48a>
  m_errorCode = code;
    668e:	2115      	movs	r1, #21
  m_errorLine = line;
    6690:	4b3f      	ldr	r3, [pc, #252]	; (6790 <SdioCard::begin(SdioConfig)+0x568>)
    6692:	f240 12c5 	movw	r2, #453	; 0x1c5
    return false;
    6696:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    669a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    669c:	601a      	str	r2, [r3, #0]
  return false;
    669e:	e66a      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    66a0:	210a      	movs	r1, #10
  m_errorLine = line;
    66a2:	4b3b      	ldr	r3, [pc, #236]	; (6790 <SdioCard::begin(SdioConfig)+0x568>)
    66a4:	f44f 72df 	mov.w	r2, #446	; 0x1be
    return false;
    66a8:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    66ac:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    66ae:	601a      	str	r2, [r3, #0]
  return false;
    66b0:	e661      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    66b2:	4641      	mov	r1, r8
    66b4:	483b      	ldr	r0, [pc, #236]	; (67a4 <SdioCard::begin(SdioConfig)+0x57c>)
    66b6:	f7ff fa9f 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    66ba:	2800      	cmp	r0, #0
    66bc:	d0e7      	beq.n	668e <SdioCard::begin(SdioConfig)+0x466>
  if (!waitDmaStatus()) {
    66be:	f7ff f9c9 	bl	5a54 <waitDmaStatus()>
    66c2:	4683      	mov	fp, r0
    66c4:	b930      	cbnz	r0, 66d4 <SdioCard::begin(SdioConfig)+0x4ac>
  m_errorCode = code;
    66c6:	2126      	movs	r1, #38	; 0x26
  m_errorLine = line;
    66c8:	4b31      	ldr	r3, [pc, #196]	; (6790 <SdioCard::begin(SdioConfig)+0x568>)
    66ca:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
  m_errorCode = code;
    66ce:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    66d0:	601a      	str	r2, [r3, #0]
  return false;
    66d2:	e650      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
  /** Bytes 0-3 SD Association, bytes 4-7 reserved for manufacturer. */
  uint8_t scr[8];
  /** \return SCR_STRUCTURE field  - must be zero.*/
  uint8_t srcStructure() const { return scr[0] >> 4; }
  /** \return SD_SPEC field 0 - v1.0 or V1.01, 1 - 1.10, 2 - V2.00 or greater */
  uint8_t sdSpec() const { return scr[0] & 0XF; }
    66d4:	f899 3000 	ldrb.w	r3, [r9]
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    66d8:	071a      	lsls	r2, r3, #28
    66da:	d018      	beq.n	670e <SdioCard::begin(SdioConfig)+0x4e6>
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    66dc:	6833      	ldr	r3, [r6, #0]
    66de:	aa02      	add	r2, sp, #8
    66e0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
    66e4:	4630      	mov	r0, r6
    66e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66e8:	4798      	blx	r3
    66ea:	b180      	cbz	r0, 670e <SdioCard::begin(SdioConfig)+0x4e6>
    66ec:	f89d 3015 	ldrb.w	r3, [sp, #21]
    66f0:	079b      	lsls	r3, r3, #30
    66f2:	d50c      	bpl.n	670e <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    66f4:	6833      	ldr	r3, [r6, #0]
    66f6:	aa02      	add	r2, sp, #8
    66f8:	4630      	mov	r0, r6
    66fa:	492b      	ldr	r1, [pc, #172]	; (67a8 <SdioCard::begin(SdioConfig)+0x580>)
    66fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66fe:	4798      	blx	r3
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    6700:	b128      	cbz	r0, 670e <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6702:	f89d 3018 	ldrb.w	r3, [sp, #24]
    6706:	f003 030f 	and.w	r3, r3, #15
    670a:	2b01      	cmp	r3, #1
    670c:	d032      	beq.n	6774 <SdioCard::begin(SdioConfig)+0x54c>
    kHzSdClk = 25000;
    670e:	f246 10a8 	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6712:	4c26      	ldr	r4, [pc, #152]	; (67ac <SdioCard::begin(SdioConfig)+0x584>)
    6714:	2305      	movs	r3, #5
    6716:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    671a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    671e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6722:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6726:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    672a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    672e:	f7ff f887 	bl	5840 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6732:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6734:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6738:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    673c:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6740:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6744:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6748:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    674c:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6750:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6754:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    6758:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    675c:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6760:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    6764:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    6766:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    676a:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    676e:	4a10      	ldr	r2, [pc, #64]	; (67b0 <SdioCard::begin(SdioConfig)+0x588>)
    6770:	7013      	strb	r3, [r2, #0]
  return true;
    6772:	e600      	b.n	6376 <SdioCard::begin(SdioConfig)+0x14e>
    kHzSdClk = 50000;
    6774:	f24c 3050 	movw	r0, #50000	; 0xc350
    6778:	e7cb      	b.n	6712 <SdioCard::begin(SdioConfig)+0x4ea>
    677a:	bf00      	nop
    677c:	061a0000 	.word	0x061a0000
    6780:	2001e068 	.word	0x2001e068
    6784:	00010008 	.word	0x00010008
    6788:	117f0002 	.word	0x117f0002
    678c:	371a0000 	.word	0x371a0000
    6790:	2001d748 	.word	0x2001d748
    6794:	333a0011 	.word	0x333a0011
    6798:	000f4240 	.word	0x000f4240
    679c:	2001d984 	.word	0x2001d984
    67a0:	00010040 	.word	0x00010040
    67a4:	0d3a0011 	.word	0x0d3a0011
    67a8:	80fffff1 	.word	0x80fffff1
    67ac:	401f8000 	.word	0x401f8000
    67b0:	2001ec94 	.word	0x2001ec94
    67b4:	0d1a0000 	.word	0x0d1a0000
    67b8:	2001ec98 	.word	0x2001ec98
    67bc:	2001d97c 	.word	0x2001d97c
    67c0:	402c0000 	.word	0x402c0000

000067c4 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    67c4:	4b37      	ldr	r3, [pc, #220]	; (68a4 <SdioCard::readData(unsigned char*)+0xe0>)
    67c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    67c8:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    67ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67ce:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    67d0:	d40d      	bmi.n	67ee <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    67d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    67d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    67d8:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    67da:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    67dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    67de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    67e2:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    67e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    67e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    67ea:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    67ec:	b662      	cpsie	i
  uint32_t m = micros();
    67ee:	f001 fb0d 	bl	7e0c <micros>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    67f2:	4e2c      	ldr	r6, [pc, #176]	; (68a4 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    67f4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 68bc <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    67f8:	4605      	mov	r5, r0
  while (fcn()) {
    67fa:	e004      	b.n	6806 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    67fc:	f001 fb06 	bl	7e0c <micros>
    6800:	1b43      	subs	r3, r0, r5
    6802:	4543      	cmp	r3, r8
    6804:	d837      	bhi.n	6876 <SdioCard::readData(unsigned char*)+0xb2>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    6806:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    6808:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    680c:	d0f6      	beq.n	67fc <SdioCard::readData(unsigned char*)+0x38>
    680e:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    6812:	4824      	ldr	r0, [pc, #144]	; (68a4 <SdioCard::readData(unsigned char*)+0xe0>)
    6814:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    6818:	6a43      	ldr	r3, [r0, #36]	; 0x24
    681a:	051b      	lsls	r3, r3, #20
    681c:	d5fc      	bpl.n	6818 <SdioCard::readData(unsigned char*)+0x54>
    681e:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    6822:	6a02      	ldr	r2, [r0, #32]
    6824:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    6828:	459c      	cmp	ip, r3
    682a:	d1fa      	bne.n	6822 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    682c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    6830:	4567      	cmp	r7, ip
    6832:	d1f1      	bne.n	6818 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    6834:	f001 faea 	bl	7e0c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    6838:	4f1a      	ldr	r7, [pc, #104]	; (68a4 <SdioCard::readData(unsigned char*)+0xe0>)
    683a:	4d1b      	ldr	r5, [pc, #108]	; (68a8 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    683c:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    683e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 68bc <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    6842:	e004      	b.n	684e <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6844:	f001 fae2 	bl	7e0c <micros>
    6848:	1b83      	subs	r3, r0, r6
    684a:	4543      	cmp	r3, r8
    684c:	d81d      	bhi.n	688a <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    684e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    6850:	402c      	ands	r4, r5
    6852:	d0f7      	beq.n	6844 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    6854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6856:	4a15      	ldr	r2, [pc, #84]	; (68ac <SdioCard::readData(unsigned char*)+0xe8>)
    6858:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    685a:	6813      	ldr	r3, [r2, #0]
    685c:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    685e:	6813      	ldr	r3, [r2, #0]
    6860:	f013 0302 	ands.w	r3, r3, #2
    6864:	d01b      	beq.n	689e <SdioCard::readData(unsigned char*)+0xda>
    6866:	6812      	ldr	r2, [r2, #0]
    6868:	4b11      	ldr	r3, [pc, #68]	; (68b0 <SdioCard::readData(unsigned char*)+0xec>)
    686a:	421a      	tst	r2, r3
    686c:	bf0c      	ite	eq
    686e:	2001      	moveq	r0, #1
    6870:	2000      	movne	r0, #0
}
    6872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    6876:	490f      	ldr	r1, [pc, #60]	; (68b4 <SdioCard::readData(unsigned char*)+0xf0>)
    6878:	251b      	movs	r5, #27
  m_errorLine = line;
    687a:	4b0f      	ldr	r3, [pc, #60]	; (68b8 <SdioCard::readData(unsigned char*)+0xf4>)
    687c:	f240 3279 	movw	r2, #889	; 0x379
    return sdError(SD_CARD_ERROR_READ_FIFO);
    6880:	4620      	mov	r0, r4
  m_errorCode = code;
    6882:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6884:	601a      	str	r2, [r3, #0]
}
    6886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    688a:	490a      	ldr	r1, [pc, #40]	; (68b4 <SdioCard::readData(unsigned char*)+0xf0>)
    688c:	251e      	movs	r5, #30
  m_errorLine = line;
    688e:	4b0a      	ldr	r3, [pc, #40]	; (68b8 <SdioCard::readData(unsigned char*)+0xf4>)
    6890:	f44f 7261 	mov.w	r2, #900	; 0x384
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    6894:	4620      	mov	r0, r4
  m_errorCode = code;
    6896:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6898:	601a      	str	r2, [r3, #0]
}
    689a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    689e:	4618      	mov	r0, r3
}
    68a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68a4:	402c0000 	.word	0x402c0000
    68a8:	117f0002 	.word	0x117f0002
    68ac:	2001e068 	.word	0x2001e068
    68b0:	117f0000 	.word	0x117f0000
    68b4:	20008bcc 	.word	0x20008bcc
    68b8:	2001d748 	.word	0x2001d748
    68bc:	000f4240 	.word	0x000f4240

000068c0 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    68c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    68c4:	4b29      	ldr	r3, [pc, #164]	; (696c <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    68c6:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    68c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 698c <SdioCard::readStart(unsigned long)+0xcc>
    68cc:	4e28      	ldr	r6, [pc, #160]	; (6970 <SdioCard::readStart(unsigned long)+0xb0>)
    68ce:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    68d2:	f001 fa9b 	bl	7e0c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    68d6:	4d27      	ldr	r5, [pc, #156]	; (6974 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    68d8:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    68da:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6990 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    68de:	4f26      	ldr	r7, [pc, #152]	; (6978 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    68e0:	e006      	b.n	68f0 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    68e2:	f001 fa93 	bl	7e0c <micros>
    68e6:	1b00      	subs	r0, r0, r4
    68e8:	42b8      	cmp	r0, r7
    68ea:	d829      	bhi.n	6940 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    68ec:	f002 fd98 	bl	9420 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    68f0:	6831      	ldr	r1, [r6, #0]
    68f2:	4628      	mov	r0, r5
    68f4:	f7ff f980 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    68f8:	2800      	cmp	r0, #0
    68fa:	d0f2      	beq.n	68e2 <SdioCard::readStart(unsigned long)+0x22>
    68fc:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6900:	05db      	lsls	r3, r3, #23
    6902:	d5ee      	bpl.n	68e2 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    6904:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    6906:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    690a:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    690e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    6912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6916:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    691a:	4b18      	ldr	r3, [pc, #96]	; (697c <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    691c:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6920:	781b      	ldrb	r3, [r3, #0]
    6922:	b1cb      	cbz	r3, 6958 <SdioCard::readStart(unsigned long)+0x98>
    6924:	4649      	mov	r1, r9
    6926:	4816      	ldr	r0, [pc, #88]	; (6980 <SdioCard::readStart(unsigned long)+0xc0>)
    6928:	f7ff f966 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    692c:	b930      	cbnz	r0, 693c <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    692e:	4915      	ldr	r1, [pc, #84]	; (6984 <SdioCard::readStart(unsigned long)+0xc4>)
    6930:	240c      	movs	r4, #12
  m_errorLine = line;
    6932:	4b15      	ldr	r3, [pc, #84]	; (6988 <SdioCard::readStart(unsigned long)+0xc8>)
    6934:	f240 32ea 	movw	r2, #1002	; 0x3ea
  m_errorCode = code;
    6938:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    693a:	601a      	str	r2, [r3, #0]
}
    693c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    6940:	4a10      	ldr	r2, [pc, #64]	; (6984 <SdioCard::readStart(unsigned long)+0xc4>)
    6942:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6944:	2000      	movs	r0, #0
  m_errorLine = line;
    6946:	4b10      	ldr	r3, [pc, #64]	; (6988 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    6948:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    694a:	f240 32de 	movw	r2, #990	; 0x3de
      m_busyFcn = 0;
    694e:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    6952:	601a      	str	r2, [r3, #0]
}
    6954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6958:	ea4f 2949 	mov.w	r9, r9, lsl #9
    695c:	4808      	ldr	r0, [pc, #32]	; (6980 <SdioCard::readStart(unsigned long)+0xc0>)
    695e:	4649      	mov	r1, r9
    6960:	f7ff f94a 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6964:	2800      	cmp	r0, #0
    6966:	d1e9      	bne.n	693c <SdioCard::readStart(unsigned long)+0x7c>
    6968:	e7e1      	b.n	692e <SdioCard::readStart(unsigned long)+0x6e>
    696a:	bf00      	nop
    696c:	00005d8d 	.word	0x00005d8d
    6970:	2001d978 	.word	0x2001d978
    6974:	0d1a0000 	.word	0x0d1a0000
    6978:	000f4240 	.word	0x000f4240
    697c:	2001ec96 	.word	0x2001ec96
    6980:	123a0030 	.word	0x123a0030
    6984:	20008bcc 	.word	0x20008bcc
    6988:	2001d748 	.word	0x2001d748
    698c:	2001e064 	.word	0x2001e064
    6990:	402c0000 	.word	0x402c0000

00006994 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    6994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    6998:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    699a:	4c1d      	ldr	r4, [pc, #116]	; (6a10 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    699c:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    699e:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    69a0:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    69a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    69a4:	481b      	ldr	r0, [pc, #108]	; (6a14 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    69a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    69aa:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    69ac:	f7ff f924 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    69b0:	b940      	cbnz	r0, 69c4 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    69b2:	4919      	ldr	r1, [pc, #100]	; (6a18 <SdioCard::stopTransmission(bool)+0x84>)
    69b4:	2409      	movs	r4, #9
  m_errorLine = line;
    69b6:	4b19      	ldr	r3, [pc, #100]	; (6a1c <SdioCard::stopTransmission(bool)+0x88>)
    69b8:	f240 32fa 	movw	r2, #1018	; 0x3fa
  m_errorCode = code;
    69bc:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    69be:	601a      	str	r2, [r3, #0]
}
    69c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    69c4:	2d00      	cmp	r5, #0
    69c6:	d0fb      	beq.n	69c0 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    69c8:	4b15      	ldr	r3, [pc, #84]	; (6a20 <SdioCard::stopTransmission(bool)+0x8c>)
    69ca:	4e16      	ldr	r6, [pc, #88]	; (6a24 <SdioCard::stopTransmission(bool)+0x90>)
    69cc:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    69ce:	f001 fa1d 	bl	7e0c <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    69d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    69d4:	4607      	mov	r7, r0
  while (fcn()) {
    69d6:	01da      	lsls	r2, r3, #7
    69d8:	d416      	bmi.n	6a08 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    69da:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6a28 <SdioCard::stopTransmission(bool)+0x94>
    69de:	e004      	b.n	69ea <SdioCard::stopTransmission(bool)+0x56>
    yield();
    69e0:	f002 fd1e 	bl	9420 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    69e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    69e6:	01db      	lsls	r3, r3, #7
    69e8:	d40e      	bmi.n	6a08 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    69ea:	f001 fa0f 	bl	7e0c <micros>
    69ee:	1bc0      	subs	r0, r0, r7
    69f0:	4540      	cmp	r0, r8
    69f2:	d9f5      	bls.n	69e0 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    69f4:	4a08      	ldr	r2, [pc, #32]	; (6a18 <SdioCard::stopTransmission(bool)+0x84>)
    69f6:	210a      	movs	r1, #10
      m_busyFcn = 0;
    69f8:	2000      	movs	r0, #0
  m_errorLine = line;
    69fa:	4b08      	ldr	r3, [pc, #32]	; (6a1c <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    69fc:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    69fe:	f240 32fe 	movw	r2, #1022	; 0x3fe
      m_busyFcn = 0;
    6a02:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    6a04:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    6a06:	e7db      	b.n	69c0 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    6a08:	2300      	movs	r3, #0
  return true;
    6a0a:	4628      	mov	r0, r5
  m_busyFcn = 0;
    6a0c:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    6a0e:	e7d7      	b.n	69c0 <SdioCard::stopTransmission(bool)+0x2c>
    6a10:	402c0000 	.word	0x402c0000
    6a14:	0cdb0000 	.word	0x0cdb0000
    6a18:	20008bcc 	.word	0x20008bcc
    6a1c:	2001d748 	.word	0x2001d748
    6a20:	00005821 	.word	0x00005821
    6a24:	2001e064 	.word	0x2001e064
    6a28:	000f4240 	.word	0x000f4240

00006a2c <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    6a2c:	4b0a      	ldr	r3, [pc, #40]	; (6a58 <SdioCard::syncDevice()+0x2c>)
    6a2e:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    6a30:	b510      	push	{r4, lr}
    6a32:	4604      	mov	r4, r0
  if (!m_transferActive) {
    6a34:	b91b      	cbnz	r3, 6a3e <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    6a36:	7a63      	ldrb	r3, [r4, #9]
    6a38:	b943      	cbnz	r3, 6a4c <SdioCard::syncDevice()+0x20>
  return true;
    6a3a:	2001      	movs	r0, #1
}
    6a3c:	bd10      	pop	{r4, pc}
    6a3e:	f7ff f83d 	bl	5abc <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6a42:	2800      	cmp	r0, #0
    6a44:	d0fa      	beq.n	6a3c <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    6a46:	7a63      	ldrb	r3, [r4, #9]
    6a48:	2b00      	cmp	r3, #0
    6a4a:	d0f6      	beq.n	6a3a <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    6a4c:	4620      	mov	r0, r4
    6a4e:	2101      	movs	r1, #1
}
    6a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    6a54:	f7ff bf9e 	b.w	6994 <SdioCard::stopTransmission(bool)>
    6a58:	2001ec97 	.word	0x2001ec97

00006a5c <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6a60:	7a43      	ldrb	r3, [r0, #9]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6a62:	460d      	mov	r5, r1
    6a64:	4616      	mov	r6, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6a66:	b1bb      	cbz	r3, 6a98 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    6a68:	6803      	ldr	r3, [r0, #0]
    6a6a:	4604      	mov	r4, r0
    6a6c:	4a3f      	ldr	r2, [pc, #252]	; (6b6c <SdioCard::erase(unsigned long, unsigned long)+0x110>)
    6a6e:	69db      	ldr	r3, [r3, #28]
    6a70:	4293      	cmp	r3, r2
    6a72:	d14a      	bne.n	6b0a <SdioCard::erase(unsigned long, unsigned long)+0xae>
  if (!m_transferActive) {
    6a74:	4b3e      	ldr	r3, [pc, #248]	; (6b70 <SdioCard::erase(unsigned long, unsigned long)+0x114>)
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	b93b      	cbnz	r3, 6a8a <SdioCard::erase(unsigned long, unsigned long)+0x2e>
    return stopTransmission(true);
    6a7a:	2101      	movs	r1, #1
    6a7c:	4620      	mov	r0, r4
    6a7e:	f7ff ff89 	bl	6994 <SdioCard::stopTransmission(bool)>
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6a82:	b948      	cbnz	r0, 6a98 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return false;
    6a84:	2000      	movs	r0, #0
}
    6a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a8a:	f7ff f817 	bl	5abc <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6a8e:	2800      	cmp	r0, #0
    6a90:	d0f8      	beq.n	6a84 <SdioCard::erase(unsigned long, unsigned long)+0x28>
  if (m_curState != IDLE_STATE) {
    6a92:	7a63      	ldrb	r3, [r4, #9]
    6a94:	2b00      	cmp	r3, #0
    6a96:	d1f0      	bne.n	6a7a <SdioCard::erase(unsigned long, unsigned long)+0x1e>
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    6a98:	4c36      	ldr	r4, [pc, #216]	; (6b74 <SdioCard::erase(unsigned long, unsigned long)+0x118>)
    6a9a:	7aa3      	ldrb	r3, [r4, #10]
  if (!m_csd.eraseSingleBlock()) {
    6a9c:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    6aa0:	d112      	bne.n	6ac8 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    6aa2:	005b      	lsls	r3, r3, #1
    6aa4:	7ae2      	ldrb	r2, [r4, #11]
    6aa6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    6aaa:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    6aae:	1c72      	adds	r2, r6, #1
    6ab0:	432a      	orrs	r2, r5
    6ab2:	4213      	tst	r3, r2
    6ab4:	d008      	beq.n	6ac8 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  m_errorCode = code;
    6ab6:	4930      	ldr	r1, [pc, #192]	; (6b78 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6ab8:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    6aba:	4b30      	ldr	r3, [pc, #192]	; (6b7c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6abc:	f240 322d 	movw	r2, #813	; 0x32d
  m_errorCode = code;
    6ac0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6ac2:	601a      	str	r2, [r3, #0]
}
    6ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    6ac8:	4b2d      	ldr	r3, [pc, #180]	; (6b80 <SdioCard::erase(unsigned long, unsigned long)+0x124>)
    6aca:	781b      	ldrb	r3, [r3, #0]
    6acc:	b90b      	cbnz	r3, 6ad2 <SdioCard::erase(unsigned long, unsigned long)+0x76>
    firstSector <<= 9;
    6ace:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    6ad0:	0276      	lsls	r6, r6, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    6ad2:	4629      	mov	r1, r5
    6ad4:	482b      	ldr	r0, [pc, #172]	; (6b84 <SdioCard::erase(unsigned long, unsigned long)+0x128>)
    6ad6:	f7ff f88f 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6ada:	b940      	cbnz	r0, 6aee <SdioCard::erase(unsigned long, unsigned long)+0x92>
  m_errorCode = code;
    6adc:	4926      	ldr	r1, [pc, #152]	; (6b78 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6ade:	240f      	movs	r4, #15
  m_errorLine = line;
    6ae0:	4b26      	ldr	r3, [pc, #152]	; (6b7c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6ae2:	f240 3235 	movw	r2, #821	; 0x335
  m_errorCode = code;
    6ae6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6ae8:	601a      	str	r2, [r3, #0]
}
    6aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    6aee:	4631      	mov	r1, r6
    6af0:	4825      	ldr	r0, [pc, #148]	; (6b88 <SdioCard::erase(unsigned long, unsigned long)+0x12c>)
    6af2:	f7ff f881 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6af6:	b960      	cbnz	r0, 6b12 <SdioCard::erase(unsigned long, unsigned long)+0xb6>
  m_errorCode = code;
    6af8:	491f      	ldr	r1, [pc, #124]	; (6b78 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6afa:	2410      	movs	r4, #16
  m_errorLine = line;
    6afc:	4b1f      	ldr	r3, [pc, #124]	; (6b7c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6afe:	f44f 724e 	mov.w	r2, #824	; 0x338
  m_errorCode = code;
    6b02:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6b04:	601a      	str	r2, [r3, #0]
}
    6b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6b0a:	4798      	blx	r3
    6b0c:	2800      	cmp	r0, #0
    6b0e:	d0b9      	beq.n	6a84 <SdioCard::erase(unsigned long, unsigned long)+0x28>
    6b10:	e7c2      	b.n	6a98 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    6b12:	2100      	movs	r1, #0
    6b14:	481d      	ldr	r0, [pc, #116]	; (6b8c <SdioCard::erase(unsigned long, unsigned long)+0x130>)
    6b16:	f7ff f86f 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6b1a:	b938      	cbnz	r0, 6b2c <SdioCard::erase(unsigned long, unsigned long)+0xd0>
  m_errorCode = code;
    6b1c:	4916      	ldr	r1, [pc, #88]	; (6b78 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6b1e:	2411      	movs	r4, #17
  m_errorLine = line;
    6b20:	4b16      	ldr	r3, [pc, #88]	; (6b7c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6b22:	f240 323b 	movw	r2, #827	; 0x33b
  m_errorCode = code;
    6b26:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6b28:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    6b2a:	e7cb      	b.n	6ac4 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  uint32_t m = micros();
    6b2c:	f001 f96e 	bl	7e0c <micros>
    6b30:	4e17      	ldr	r6, [pc, #92]	; (6b90 <SdioCard::erase(unsigned long, unsigned long)+0x134>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6b32:	4d18      	ldr	r5, [pc, #96]	; (6b94 <SdioCard::erase(unsigned long, unsigned long)+0x138>)
  uint32_t m = micros();
    6b34:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6b36:	f8df 8064 	ldr.w	r8, [pc, #100]	; 6b9c <SdioCard::erase(unsigned long, unsigned long)+0x140>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6b3a:	4f17      	ldr	r7, [pc, #92]	; (6b98 <SdioCard::erase(unsigned long, unsigned long)+0x13c>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6b3c:	6831      	ldr	r1, [r6, #0]
    6b3e:	4628      	mov	r0, r5
    6b40:	f7ff f85a 	bl	5bf8 <cardCommand(unsigned long, unsigned long)>
    6b44:	b118      	cbz	r0, 6b4e <SdioCard::erase(unsigned long, unsigned long)+0xf2>
    6b46:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6b4a:	05db      	lsls	r3, r3, #23
    6b4c:	d4ba      	bmi.n	6ac4 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6b4e:	f001 f95d 	bl	7e0c <micros>
    6b52:	1b00      	subs	r0, r0, r4
    6b54:	42b8      	cmp	r0, r7
    6b56:	d9f1      	bls.n	6b3c <SdioCard::erase(unsigned long, unsigned long)+0xe0>
  m_errorCode = code;
    6b58:	4907      	ldr	r1, [pc, #28]	; (6b78 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6b5a:	2429      	movs	r4, #41	; 0x29
  m_errorLine = line;
    6b5c:	4b07      	ldr	r3, [pc, #28]	; (6b7c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6b5e:	f240 323e 	movw	r2, #830	; 0x33e
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    6b62:	2000      	movs	r0, #0
  m_errorCode = code;
    6b64:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6b66:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    6b68:	e7ac      	b.n	6ac4 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    6b6a:	bf00      	nop
    6b6c:	00006a2d 	.word	0x00006a2d
    6b70:	2001ec97 	.word	0x2001ec97
    6b74:	2001d964 	.word	0x2001d964
    6b78:	20008bcc 	.word	0x20008bcc
    6b7c:	2001d748 	.word	0x2001d748
    6b80:	2001ec96 	.word	0x2001ec96
    6b84:	201a0000 	.word	0x201a0000
    6b88:	211a0000 	.word	0x211a0000
    6b8c:	261b0000 	.word	0x261b0000
    6b90:	2001d978 	.word	0x2001d978
    6b94:	0d1a0000 	.word	0x0d1a0000
    6b98:	000f4240 	.word	0x000f4240
    6b9c:	402c0000 	.word	0x402c0000

00006ba0 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ba4:	4604      	mov	r4, r0
    6ba6:	7a00      	ldrb	r0, [r0, #8]
    6ba8:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6bac:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    6bae:	f010 0501 	ands.w	r5, r0, #1
    6bb2:	d013      	beq.n	6bdc <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    6bb4:	0793      	lsls	r3, r2, #30
    6bb6:	d03c      	beq.n	6c32 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6bb8:	2301      	movs	r3, #1
    6bba:	4838      	ldr	r0, [pc, #224]	; (6c9c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6bbc:	466a      	mov	r2, sp
    6bbe:	f7ff fa25 	bl	600c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6bc2:	2800      	cmp	r0, #0
    6bc4:	d03a      	beq.n	6c3c <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    6bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
    6bca:	4669      	mov	r1, sp
    6bcc:	4630      	mov	r0, r6
    6bce:	f001 f9b1 	bl	7f34 <memcpy>
}
    6bd2:	4628      	mov	r0, r5
    6bd4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6bdc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6cac <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    6be0:	460f      	mov	r7, r1
    6be2:	f898 3000 	ldrb.w	r3, [r8]
    6be6:	2b00      	cmp	r3, #0
    6be8:	d135      	bne.n	6c56 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6bea:	7a63      	ldrb	r3, [r4, #9]
    6bec:	2b01      	cmp	r3, #1
    6bee:	d039      	beq.n	6c64 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    6bf0:	6822      	ldr	r2, [r4, #0]
    6bf2:	492b      	ldr	r1, [pc, #172]	; (6ca0 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    6bf4:	69d2      	ldr	r2, [r2, #28]
    6bf6:	428a      	cmp	r2, r1
    6bf8:	d14a      	bne.n	6c90 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    6bfa:	f898 2000 	ldrb.w	r2, [r8]
    6bfe:	2a00      	cmp	r2, #0
    6c00:	d134      	bne.n	6c6c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    6c02:	2b00      	cmp	r3, #0
    6c04:	d139      	bne.n	6c7a <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    6c06:	4639      	mov	r1, r7
    6c08:	4620      	mov	r0, r4
    6c0a:	f7ff fe59 	bl	68c0 <SdioCard::readStart(unsigned long)>
    6c0e:	b1e8      	cbz	r0, 6c4c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    6c10:	2301      	movs	r3, #1
      m_curSector = sector;
    6c12:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    6c14:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    6c16:	4631      	mov	r1, r6
    6c18:	4620      	mov	r0, r4
    6c1a:	f7ff fdd3 	bl	67c4 <SdioCard::readData(unsigned char*)>
    6c1e:	b1a8      	cbz	r0, 6c4c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    6c20:	6863      	ldr	r3, [r4, #4]
  return true;
    6c22:	4605      	mov	r5, r0
    m_curSector++;
    6c24:	3301      	adds	r3, #1
}
    6c26:	4628      	mov	r0, r5
    m_curSector++;
    6c28:	6063      	str	r3, [r4, #4]
}
    6c2a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6c32:	2301      	movs	r3, #1
    6c34:	4819      	ldr	r0, [pc, #100]	; (6c9c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6c36:	f7ff f9e9 	bl	600c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6c3a:	b938      	cbnz	r0, 6c4c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    6c3c:	4919      	ldr	r1, [pc, #100]	; (6ca4 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    6c3e:	200b      	movs	r0, #11
  m_errorLine = line;
    6c40:	4b19      	ldr	r3, [pc, #100]	; (6ca8 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    6c42:	f240 32a1 	movw	r2, #929	; 0x3a1
      return sdError(SD_CARD_ERROR_CMD17);
    6c46:	2500      	movs	r5, #0
  m_errorCode = code;
    6c48:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6c4a:	601a      	str	r2, [r3, #0]
}
    6c4c:	4628      	mov	r0, r5
    6c4e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c56:	f7fe ff31 	bl	5abc <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6c5a:	2800      	cmp	r0, #0
    6c5c:	d0f6      	beq.n	6c4c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6c5e:	7a63      	ldrb	r3, [r4, #9]
    6c60:	2b01      	cmp	r3, #1
    6c62:	d1c5      	bne.n	6bf0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6c64:	6862      	ldr	r2, [r4, #4]
    6c66:	42ba      	cmp	r2, r7
    6c68:	d1c2      	bne.n	6bf0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6c6a:	e7d4      	b.n	6c16 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    6c6c:	f7fe ff26 	bl	5abc <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6c70:	2800      	cmp	r0, #0
    6c72:	d0eb      	beq.n	6c4c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    6c74:	7a63      	ldrb	r3, [r4, #9]
    6c76:	2b00      	cmp	r3, #0
    6c78:	d0c5      	beq.n	6c06 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    6c7a:	2101      	movs	r1, #1
    6c7c:	4620      	mov	r0, r4
    6c7e:	f7ff fe89 	bl	6994 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6c82:	2800      	cmp	r0, #0
    6c84:	d1bf      	bne.n	6c06 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    6c86:	4628      	mov	r0, r5
    6c88:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    6c90:	4620      	mov	r0, r4
    6c92:	4790      	blx	r2
    6c94:	2800      	cmp	r0, #0
    6c96:	d0f6      	beq.n	6c86 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    6c98:	e7b5      	b.n	6c06 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    6c9a:	bf00      	nop
    6c9c:	113a0011 	.word	0x113a0011
    6ca0:	00006a2d 	.word	0x00006a2d
    6ca4:	20008bcc 	.word	0x20008bcc
    6ca8:	2001d748 	.word	0x2001d748
    6cac:	2001ec97 	.word	0x2001ec97

00006cb0 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    6cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cb4:	7a04      	ldrb	r4, [r0, #8]
    6cb6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6cba:	460f      	mov	r7, r1
    6cbc:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    6cbe:	f014 0401 	ands.w	r4, r4, #1
    6cc2:	d01d      	beq.n	6d00 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    6cc4:	f012 0f03 	tst.w	r2, #3
    6cc8:	d006      	beq.n	6cd8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    6cca:	4668      	mov	r0, sp
    6ccc:	4611      	mov	r1, r2
    6cce:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    6cd2:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    6cd4:	f001 f92e 	bl	7f34 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    6cd8:	2301      	movs	r3, #1
    6cda:	4642      	mov	r2, r8
    6cdc:	4639      	mov	r1, r7
    6cde:	482c      	ldr	r0, [pc, #176]	; (6d90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    6ce0:	f7ff f994 	bl	600c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6ce4:	4604      	mov	r4, r0
    6ce6:	b930      	cbnz	r0, 6cf6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    6ce8:	492a      	ldr	r1, [pc, #168]	; (6d94 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    6cea:	200d      	movs	r0, #13
  m_errorLine = line;
    6cec:	4b2a      	ldr	r3, [pc, #168]	; (6d98 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    6cee:	f44f 6287 	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    6cf2:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6cf4:	601a      	str	r2, [r3, #0]
}
    6cf6:	4620      	mov	r0, r4
    6cf8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6d00:	4d26      	ldr	r5, [pc, #152]	; (6d9c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    6d02:	4606      	mov	r6, r0
    6d04:	782b      	ldrb	r3, [r5, #0]
    6d06:	bb2b      	cbnz	r3, 6d54 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6d08:	7a73      	ldrb	r3, [r6, #9]
    6d0a:	2b02      	cmp	r3, #2
    6d0c:	d029      	beq.n	6d62 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    6d0e:	6832      	ldr	r2, [r6, #0]
    6d10:	4923      	ldr	r1, [pc, #140]	; (6da0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    6d12:	69d2      	ldr	r2, [r2, #28]
    6d14:	428a      	cmp	r2, r1
    6d16:	d136      	bne.n	6d86 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    6d18:	782a      	ldrb	r2, [r5, #0]
    6d1a:	bb32      	cbnz	r2, 6d6a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    6d1c:	2b00      	cmp	r3, #0
    6d1e:	d12b      	bne.n	6d78 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector)) {
    6d20:	6833      	ldr	r3, [r6, #0]
    6d22:	4639      	mov	r1, r7
    6d24:	4630      	mov	r0, r6
    6d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    6d28:	4798      	blx	r3
    6d2a:	2800      	cmp	r0, #0
    6d2c:	d0e3      	beq.n	6cf6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    6d2e:	2302      	movs	r3, #2
      m_curSector = sector;
    6d30:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    6d32:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    6d34:	6833      	ldr	r3, [r6, #0]
    6d36:	4641      	mov	r1, r8
    6d38:	4630      	mov	r0, r6
    6d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6d3c:	4798      	blx	r3
    6d3e:	2800      	cmp	r0, #0
    6d40:	d0d9      	beq.n	6cf6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    6d42:	6873      	ldr	r3, [r6, #4]
  return true;
    6d44:	4604      	mov	r4, r0
    m_curSector++;
    6d46:	3301      	adds	r3, #1
}
    6d48:	4620      	mov	r0, r4
    m_curSector++;
    6d4a:	6073      	str	r3, [r6, #4]
}
    6d4c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d54:	f7fe feb2 	bl	5abc <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6d58:	2800      	cmp	r0, #0
    6d5a:	d0cc      	beq.n	6cf6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6d5c:	7a73      	ldrb	r3, [r6, #9]
    6d5e:	2b02      	cmp	r3, #2
    6d60:	d1d5      	bne.n	6d0e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6d62:	6872      	ldr	r2, [r6, #4]
    6d64:	42ba      	cmp	r2, r7
    6d66:	d1d2      	bne.n	6d0e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6d68:	e7e4      	b.n	6d34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    6d6a:	f7fe fea7 	bl	5abc <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6d6e:	2800      	cmp	r0, #0
    6d70:	d0c1      	beq.n	6cf6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    6d72:	7a73      	ldrb	r3, [r6, #9]
    6d74:	2b00      	cmp	r3, #0
    6d76:	d0d3      	beq.n	6d20 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    6d78:	2101      	movs	r1, #1
    6d7a:	4630      	mov	r0, r6
    6d7c:	f7ff fe0a 	bl	6994 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6d80:	2800      	cmp	r0, #0
    6d82:	d0b8      	beq.n	6cf6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6d84:	e7cc      	b.n	6d20 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6d86:	4630      	mov	r0, r6
    6d88:	4790      	blx	r2
    6d8a:	2800      	cmp	r0, #0
    6d8c:	d0b3      	beq.n	6cf6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6d8e:	e7c7      	b.n	6d20 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6d90:	183a0001 	.word	0x183a0001
    6d94:	20008bcc 	.word	0x20008bcc
    6d98:	2001d748 	.word	0x2001d748
    6d9c:	2001ec97 	.word	0x2001ec97
    6da0:	00006a2d 	.word	0x00006a2d

00006da4 <sdCsWrite(unsigned char, bool)>:
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    6da4:	f001 b85c 	b.w	7e60 <digitalWrite>

00006da8 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    6da8:	b430      	push	{r4, r5}
    6daa:	b082      	sub	sp, #8
    6dac:	460c      	mov	r4, r1
    6dae:	ab02      	add	r3, sp, #8
    6db0:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    6db4:	7cc3      	ldrb	r3, [r0, #19]
    6db6:	2b00      	cmp	r3, #0
    6db8:	d030      	beq.n	6e1c <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    6dba:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6dbc:	7cc3      	ldrb	r3, [r0, #19]
    6dbe:	07da      	lsls	r2, r3, #31
    6dc0:	d508      	bpl.n	6dd4 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    6dc2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6dc6:	6945      	ldr	r5, [r0, #20]
    6dc8:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    6dcc:	402a      	ands	r2, r5
    6dce:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    6dd0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    6dd4:	079d      	lsls	r5, r3, #30
    6dd6:	d508      	bpl.n	6dea <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6dd8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6ddc:	6985      	ldr	r5, [r0, #24]
    6dde:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    6de2:	402a      	ands	r2, r5
    6de4:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    6de6:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    6dea:	0759      	lsls	r1, r3, #29
    6dec:	d508      	bpl.n	6e00 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    6dee:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6df2:	69c5      	ldr	r5, [r0, #28]
    6df4:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    6df8:	402a      	ands	r2, r5
    6dfa:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    6dfc:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    6e00:	071a      	lsls	r2, r3, #28
    6e02:	d508      	bpl.n	6e16 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    6e04:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6e08:	6a05      	ldr	r5, [r0, #32]
    6e0a:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    6e0e:	402a      	ands	r2, r5
    6e10:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    6e12:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    6e16:	06db      	lsls	r3, r3, #27
    6e18:	d42f      	bmi.n	6e7a <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    6e1a:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    6e1c:	6883      	ldr	r3, [r0, #8]
    6e1e:	429c      	cmp	r4, r3
    6e20:	d035      	beq.n	6e8e <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    6e22:	4b22      	ldr	r3, [pc, #136]	; (6eac <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    6e24:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    6e26:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    6e28:	4a21      	ldr	r2, [pc, #132]	; (6eb0 <SPIClass::beginTransaction(SPISettings)+0x108>)
    6e2a:	f3c3 1101 	ubfx	r1, r3, #4, #2
    6e2e:	f3c3 6382 	ubfx	r3, r3, #26, #3
    6e32:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    6e36:	3301      	adds	r3, #1
    6e38:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    6e3c:	b1cc      	cbz	r4, 6e72 <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    6e3e:	4294      	cmp	r4, r2
    6e40:	d827      	bhi.n	6e92 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    6e42:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    6e46:	fbb2 f2f3 	udiv	r2, r2, r3
    6e4a:	4294      	cmp	r4, r2
    6e4c:	d32c      	bcc.n	6ea8 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    6e4e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    6e52:	d320      	bcc.n	6e96 <SPIClass::beginTransaction(SPISettings)+0xee>
    6e54:	4c17      	ldr	r4, [pc, #92]	; (6eb4 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6e56:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6e58:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6e5a:	2203      	movs	r2, #3
		port().CR = 0;
    6e5c:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    6e5e:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    6e60:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6e62:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    6e64:	2201      	movs	r2, #1
		port().CCR = _ccr;
    6e66:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    6e68:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    6e6a:	611a      	str	r2, [r3, #16]
	}
    6e6c:	b002      	add	sp, #8
    6e6e:	bc30      	pop	{r4, r5}
    6e70:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    6e72:	4299      	cmp	r1, r3
    6e74:	d3ef      	bcc.n	6e56 <SPIClass::beginTransaction(SPISettings)+0xae>
    6e76:	1c53      	adds	r3, r2, #1
    6e78:	e7e9      	b.n	6e4e <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    6e7a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    6e7e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    6e80:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    6e84:	400b      	ands	r3, r1
    6e86:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    6e88:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    6e8c:	e7c5      	b.n	6e1a <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    6e8e:	68c4      	ldr	r4, [r0, #12]
    6e90:	e7e2      	b.n	6e58 <SPIClass::beginTransaction(SPISettings)+0xb0>
    6e92:	2400      	movs	r4, #0
    6e94:	e7df      	b.n	6e56 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    6e96:	2b02      	cmp	r3, #2
    6e98:	d9fb      	bls.n	6e92 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    6e9a:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6e9c:	085a      	lsrs	r2, r3, #1
    6e9e:	0214      	lsls	r4, r2, #8
    6ea0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    6ea4:	431c      	orrs	r4, r3
    6ea6:	e7d6      	b.n	6e56 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    6ea8:	461a      	mov	r2, r3
    6eaa:	e7e4      	b.n	6e76 <SPIClass::beginTransaction(SPISettings)+0xce>
    6eac:	400fc000 	.word	0x400fc000
    6eb0:	20000850 	.word	0x20000850
    6eb4:	007f7fff 	.word	0x007f7fff

00006eb8 <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    6eb8:	b508      	push	{r3, lr}
    6eba:	4603      	mov	r3, r0
    6ebc:	f853 0b04 	ldr.w	r0, [r3], #4
    6ec0:	e893 0006 	ldmia.w	r3, {r1, r2}
    6ec4:	f7ff ff70 	bl	6da8 <SPIClass::beginTransaction(SPISettings)>
    6ec8:	bd08      	pop	{r3, pc}
    6eca:	bf00      	nop

00006ecc <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    6ecc:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    6ece:	7cd3      	ldrb	r3, [r2, #19]
    6ed0:	b313      	cbz	r3, 6f18 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    6ed2:	07d8      	lsls	r0, r3, #31
    6ed4:	d504      	bpl.n	6ee0 <SdSpiArduinoDriver::deactivate()+0x14>
    6ed6:	6a90      	ldr	r0, [r2, #40]	; 0x28
    6ed8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6edc:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    6ee0:	0799      	lsls	r1, r3, #30
    6ee2:	d504      	bpl.n	6eee <SdSpiArduinoDriver::deactivate()+0x22>
    6ee4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    6ee6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6eea:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    6eee:	0758      	lsls	r0, r3, #29
    6ef0:	d504      	bpl.n	6efc <SdSpiArduinoDriver::deactivate()+0x30>
    6ef2:	6b10      	ldr	r0, [r2, #48]	; 0x30
    6ef4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6ef8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    6efc:	0719      	lsls	r1, r3, #28
    6efe:	d504      	bpl.n	6f0a <SdSpiArduinoDriver::deactivate()+0x3e>
    6f00:	6b50      	ldr	r0, [r2, #52]	; 0x34
    6f02:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6f06:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    6f0a:	06db      	lsls	r3, r3, #27
    6f0c:	d504      	bpl.n	6f18 <SdSpiArduinoDriver::deactivate()+0x4c>
    6f0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
    6f10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6f14:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    6f18:	4770      	bx	lr
    6f1a:	bf00      	nop

00006f1c <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    6f1c:	6800      	ldr	r0, [r0, #0]
    6f1e:	f000 b9d7 	b.w	72d0 <SPIClass::end()>
    6f22:	bf00      	nop

00006f24 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6f24:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    6f26:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6f28:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    6f2a:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6f2c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6f2e:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6f32:	d0fb      	beq.n	6f2c <SdSpiArduinoDriver::receive()+0x8>
    6f34:	6f50      	ldr	r0, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    6f36:	b2c0      	uxtb	r0, r0
    6f38:	4770      	bx	lr
    6f3a:	bf00      	nop

00006f3c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    6f3c:	b530      	push	{r4, r5, lr}
    6f3e:	460c      	mov	r4, r1
    6f40:	b083      	sub	sp, #12
    6f42:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    6f44:	21ff      	movs	r1, #255	; 0xff
    6f46:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    6f48:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    6f4a:	f004 fcbf 	bl	b8cc <memset>
		transfer(buf, buf, count);
    6f4e:	6828      	ldr	r0, [r5, #0]
    6f50:	9b01      	ldr	r3, [sp, #4]
    6f52:	4622      	mov	r2, r4
    6f54:	4621      	mov	r1, r4
    6f56:	f000 f9b7 	bl	72c8 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    6f5a:	2000      	movs	r0, #0
    6f5c:	b003      	add	sp, #12
    6f5e:	bd30      	pop	{r4, r5, pc}

00006f60 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6f60:	6803      	ldr	r3, [r0, #0]
    6f62:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    6f64:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6f66:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6f68:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6f6c:	d0fb      	beq.n	6f66 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    6f6e:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    6f70:	4770      	bx	lr
    6f72:	bf00      	nop

00006f74 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    6f74:	1e53      	subs	r3, r2, #1
    6f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    6f7a:	b530      	push	{r4, r5, lr}
    6f7c:	4614      	mov	r4, r2
    6f7e:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    6f82:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    6f84:	d311      	bcc.n	6faa <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    6f86:	b16a      	cbz	r2, 6fa4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6f88:	6803      	ldr	r3, [r0, #0]
    6f8a:	1e48      	subs	r0, r1, #1
    6f8c:	6819      	ldr	r1, [r3, #0]
    6f8e:	1882      	adds	r2, r0, r2
		port().TDR = data;
    6f90:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    6f94:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6f96:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6f98:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6f9c:	d0fb      	beq.n	6f96 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    6f9e:	4290      	cmp	r0, r2
    6fa0:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    6fa2:	d1f5      	bne.n	6f90 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    6fa4:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6fa8:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    6faa:	4668      	mov	r0, sp
    6fac:	f000 ffc2 	bl	7f34 <memcpy>
		transfer(buf, buf, count);
    6fb0:	466a      	mov	r2, sp
    6fb2:	4623      	mov	r3, r4
    6fb4:	6828      	ldr	r0, [r5, #0]
    6fb6:	4611      	mov	r1, r2
    6fb8:	f000 f986 	bl	72c8 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    6fbc:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6fc0:	bd30      	pop	{r4, r5, pc}
    6fc2:	bf00      	nop

00006fc4 <FsCache::sync()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    6fc4:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    6fc6:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    6fc8:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    6fca:	07dc      	lsls	r4, r3, #31
    6fcc:	d51d      	bpl.n	700a <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    6fce:	4604      	mov	r4, r0
    6fd0:	6840      	ldr	r0, [r0, #4]
    6fd2:	f104 0210 	add.w	r2, r4, #16
    6fd6:	6803      	ldr	r3, [r0, #0]
    6fd8:	68a1      	ldr	r1, [r4, #8]
    6fda:	9201      	str	r2, [sp, #4]
    6fdc:	6a1b      	ldr	r3, [r3, #32]
    6fde:	4798      	blx	r3
    6fe0:	9a01      	ldr	r2, [sp, #4]
    6fe2:	4605      	mov	r5, r0
    6fe4:	b1a8      	cbz	r0, 7012 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6fe6:	7823      	ldrb	r3, [r4, #0]
    6fe8:	0799      	lsls	r1, r3, #30
    6fea:	d508      	bpl.n	6ffe <FsCache::sync()+0x3a>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    6fec:	68e3      	ldr	r3, [r4, #12]
    6fee:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    6ff2:	4419      	add	r1, r3
    6ff4:	6803      	ldr	r3, [r0, #0]
    6ff6:	6a1b      	ldr	r3, [r3, #32]
    6ff8:	4798      	blx	r3
    6ffa:	b150      	cbz	r0, 7012 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6ffc:	7823      	ldrb	r3, [r4, #0]
    6ffe:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    7002:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    7004:	7023      	strb	r3, [r4, #0]
}
    7006:	b003      	add	sp, #12
    7008:	bd30      	pop	{r4, r5, pc}
  return true;
    700a:	2501      	movs	r5, #1
}
    700c:	4628      	mov	r0, r5
    700e:	b003      	add	sp, #12
    7010:	bd30      	pop	{r4, r5, pc}
  return false;
    7012:	2500      	movs	r5, #0
}
    7014:	4628      	mov	r0, r5
    7016:	b003      	add	sp, #12
    7018:	bd30      	pop	{r4, r5, pc}
    701a:	bf00      	nop

0000701c <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    701e:	6843      	ldr	r3, [r0, #4]
    7020:	b30b      	cbz	r3, 7066 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    7022:	6883      	ldr	r3, [r0, #8]
    7024:	4604      	mov	r4, r0
    7026:	460f      	mov	r7, r1
    7028:	4615      	mov	r5, r2
    702a:	428b      	cmp	r3, r1
    702c:	d106      	bne.n	703c <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    702e:	f810 3b10 	ldrb.w	r3, [r0], #16
    7032:	f005 0503 	and.w	r5, r5, #3
    7036:	432b      	orrs	r3, r5
    7038:	7023      	strb	r3, [r4, #0]
}
    703a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    703c:	f7ff ffc2 	bl	6fc4 <FsCache::sync()>
    7040:	b188      	cbz	r0, 7066 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    7042:	076b      	lsls	r3, r5, #29
    7044:	d505      	bpl.n	7052 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    7046:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    704a:	4630      	mov	r0, r6
    m_sector = sector;
    704c:	2300      	movs	r3, #0
    704e:	60a7      	str	r7, [r4, #8]
    7050:	e7ef      	b.n	7032 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    7052:	6860      	ldr	r0, [r4, #4]
    7054:	f104 0610 	add.w	r6, r4, #16
    7058:	4639      	mov	r1, r7
    705a:	6803      	ldr	r3, [r0, #0]
    705c:	4632      	mov	r2, r6
    705e:	691b      	ldr	r3, [r3, #16]
    7060:	4798      	blx	r3
    7062:	2800      	cmp	r0, #0
    7064:	d1f1      	bne.n	704a <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    7066:	2000      	movs	r0, #0
}
    7068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    706a:	bf00      	nop

0000706c <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    706c:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    7070:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    7072:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    7076:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7078:	d101      	bne.n	707e <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    707a:	6883      	ldr	r3, [r0, #8]
    707c:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    707e:	f000 bafb 	b.w	7678 <EventResponder::triggerEventNotImmediate()>
    7082:	bf00      	nop

00007084 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    7084:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7086:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    7088:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    708c:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    708e:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    7090:	b1a3      	cbz	r3, 70bc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7092:	b321      	cbz	r1, 70de <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    7094:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    7098:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    709a:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    709c:	6f25      	ldr	r5, [r4, #112]	; 0x70
    709e:	07af      	lsls	r7, r5, #30
    70a0:	d407      	bmi.n	70b2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    70a2:	4615      	mov	r5, r2
				count_read--;
    70a4:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    70a6:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    70a8:	b11a      	cbz	r2, 70b2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    70aa:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    70ae:	462a      	mov	r2, r5
    70b0:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    70b2:	6965      	ldr	r5, [r4, #20]
    70b4:	07ed      	lsls	r5, r5, #31
    70b6:	d5f1      	bpl.n	709c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    70b8:	2b00      	cmp	r3, #0
    70ba:	d1ea      	bne.n	7092 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    70bc:	b16e      	cbz	r6, 70da <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    70be:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    70c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
    70c2:	0789      	lsls	r1, r1, #30
    70c4:	d4fa      	bmi.n	70bc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    70c6:	4611      	mov	r1, r2
			count_read--;
    70c8:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    70ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    70cc:	2a00      	cmp	r2, #0
    70ce:	d0f5      	beq.n	70bc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    70d0:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    70d4:	460a      	mov	r2, r1
	while (count_read) {
    70d6:	2e00      	cmp	r6, #0
    70d8:	d1f1      	bne.n	70be <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    70da:	bcf0      	pop	{r4, r5, r6, r7}
    70dc:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    70de:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    70e2:	e7d9      	b.n	7098 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

000070e4 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    70e4:	4b32      	ldr	r3, [pc, #200]	; (71b0 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    70e6:	4933      	ldr	r1, [pc, #204]	; (71b4 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    70e8:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    70ea:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    70ee:	7920      	ldrb	r0, [r4, #4]
    70f0:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    70f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    70f4:	f895 c004 	ldrb.w	ip, [r5, #4]
    70f8:	f881 c01c 	strb.w	ip, [r1, #28]
    70fc:	7708      	strb	r0, [r1, #28]
    70fe:	b152      	cbz	r2, 7116 <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    7100:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    7104:	d323      	bcc.n	714e <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    7106:	492c      	ldr	r1, [pc, #176]	; (71b8 <_spi_dma_rxISR1()+0xd4>)
    7108:	4411      	add	r1, r2
		DMA_SERQ = channel;
    710a:	4a2a      	ldr	r2, [pc, #168]	; (71b4 <_spi_dma_rxISR1()+0xd0>)
    710c:	6419      	str	r1, [r3, #64]	; 0x40
    710e:	76d0      	strb	r0, [r2, #27]
    7110:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7114:	bd30      	pop	{r4, r5, pc}
    7116:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7118:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    711a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    711c:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    711e:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    7122:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7124:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    7126:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    712a:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    712c:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    712e:	6804      	ldr	r4, [r0, #0]
    7130:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7132:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    7136:	4b21      	ldr	r3, [pc, #132]	; (71bc <_spi_dma_rxISR1()+0xd8>)
    7138:	429c      	cmp	r4, r3
    713a:	d126      	bne.n	718a <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    713c:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    713e:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    7140:	2b02      	cmp	r3, #2
		_data = data;
    7142:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7144:	d126      	bne.n	7194 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    7146:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    714c:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    714e:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7150:	8be9      	ldrh	r1, [r5, #30]
    7152:	0409      	lsls	r1, r1, #16
    7154:	d422      	bmi.n	719c <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    7156:	b292      	uxth	r2, r2
    7158:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    715a:	6821      	ldr	r1, [r4, #0]
    715c:	8bec      	ldrh	r4, [r5, #30]
    715e:	b2a4      	uxth	r4, r4
    7160:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7162:	8bcc      	ldrh	r4, [r1, #30]
    7164:	0424      	lsls	r4, r4, #16
    7166:	d505      	bpl.n	7174 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7168:	8bcc      	ldrh	r4, [r1, #30]
    716a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    716e:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    7172:	4322      	orrs	r2, r4
    7174:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    7176:	8bca      	ldrh	r2, [r1, #30]
    7178:	b292      	uxth	r2, r2
    717a:	82ca      	strh	r2, [r1, #22]
    717c:	2100      	movs	r1, #0
    717e:	4a0d      	ldr	r2, [pc, #52]	; (71b4 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    7180:	6419      	str	r1, [r3, #64]	; 0x40
    7182:	76d0      	strb	r0, [r2, #27]
    7184:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7188:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    718a:	4623      	mov	r3, r4
    718c:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    718e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    7192:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    7198:	f000 ba6e 	b.w	7678 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    719c:	8be9      	ldrh	r1, [r5, #30]
    719e:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    71a2:	b292      	uxth	r2, r2
    71a4:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    71a8:	ea41 010e 	orr.w	r1, r1, lr
    71ac:	83e9      	strh	r1, [r5, #30]
    71ae:	e7d4      	b.n	715a <_spi_dma_rxISR1()+0x76>
    71b0:	2000c0d8 	.word	0x2000c0d8
    71b4:	400e8000 	.word	0x400e8000
    71b8:	ffff8001 	.word	0xffff8001
    71bc:	0000706d 	.word	0x0000706d

000071c0 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    71c0:	4b32      	ldr	r3, [pc, #200]	; (728c <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    71c2:	4933      	ldr	r1, [pc, #204]	; (7290 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    71c4:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    71c6:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    71ca:	7920      	ldrb	r0, [r4, #4]
    71cc:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    71ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    71d0:	f895 c004 	ldrb.w	ip, [r5, #4]
    71d4:	f881 c01c 	strb.w	ip, [r1, #28]
    71d8:	7708      	strb	r0, [r1, #28]
    71da:	b152      	cbz	r2, 71f2 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    71dc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    71e0:	d323      	bcc.n	722a <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    71e2:	492c      	ldr	r1, [pc, #176]	; (7294 <_spi_dma_rxISR0()+0xd4>)
    71e4:	4411      	add	r1, r2
		DMA_SERQ = channel;
    71e6:	4a2a      	ldr	r2, [pc, #168]	; (7290 <_spi_dma_rxISR0()+0xd0>)
    71e8:	6419      	str	r1, [r3, #64]	; 0x40
    71ea:	76d0      	strb	r0, [r2, #27]
    71ec:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    71f0:	bd30      	pop	{r4, r5, pc}
    71f2:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    71f4:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    71f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    71f8:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    71fa:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    71fe:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7200:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    7202:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    7206:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7208:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    720a:	6804      	ldr	r4, [r0, #0]
    720c:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    720e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    7212:	4b21      	ldr	r3, [pc, #132]	; (7298 <_spi_dma_rxISR0()+0xd8>)
    7214:	429c      	cmp	r4, r3
    7216:	d126      	bne.n	7266 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    7218:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    721a:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    721c:	2b02      	cmp	r3, #2
		_data = data;
    721e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7220:	d126      	bne.n	7270 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    7222:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    7228:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    722a:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    722c:	8be9      	ldrh	r1, [r5, #30]
    722e:	0409      	lsls	r1, r1, #16
    7230:	d422      	bmi.n	7278 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    7232:	b292      	uxth	r2, r2
    7234:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    7236:	6821      	ldr	r1, [r4, #0]
    7238:	8bec      	ldrh	r4, [r5, #30]
    723a:	b2a4      	uxth	r4, r4
    723c:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    723e:	8bcc      	ldrh	r4, [r1, #30]
    7240:	0424      	lsls	r4, r4, #16
    7242:	d505      	bpl.n	7250 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7244:	8bcc      	ldrh	r4, [r1, #30]
    7246:	f3c2 0208 	ubfx	r2, r2, #0, #9
    724a:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    724e:	4322      	orrs	r2, r4
    7250:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    7252:	8bca      	ldrh	r2, [r1, #30]
    7254:	b292      	uxth	r2, r2
    7256:	82ca      	strh	r2, [r1, #22]
    7258:	2100      	movs	r1, #0
    725a:	4a0d      	ldr	r2, [pc, #52]	; (7290 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    725c:	6419      	str	r1, [r3, #64]	; 0x40
    725e:	76d0      	strb	r0, [r2, #27]
    7260:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7264:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    7266:	4623      	mov	r3, r4
    7268:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    726a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    726e:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    7274:	f000 ba00 	b.w	7678 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7278:	8be9      	ldrh	r1, [r5, #30]
    727a:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    727e:	b292      	uxth	r2, r2
    7280:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    7284:	ea41 010e 	orr.w	r1, r1, lr
    7288:	83e9      	strh	r1, [r5, #30]
    728a:	e7d4      	b.n	7236 <_spi_dma_rxISR0()+0x76>
    728c:	2000c088 	.word	0x2000c088
    7290:	400e8000 	.word	0x400e8000
    7294:	ffff8001 	.word	0xffff8001
    7298:	0000706d 	.word	0x0000706d

0000729c <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    729c:	2300      	movs	r3, #0
    729e:	e9c0 1200 	strd	r1, r2, [r0]
    72a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
    72a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
    72aa:	e9c0 3306 	strd	r3, r3, [r0, #24]
    72ae:	e9c0 3308 	strd	r3, r3, [r0, #32]
    72b2:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    72b6:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    72ba:	6383      	str	r3, [r0, #56]	; 0x38
    72bc:	8783      	strh	r3, [r0, #60]	; 0x3c
    72be:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    72c2:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    72c6:	4770      	bx	lr

000072c8 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    72c8:	b10b      	cbz	r3, 72ce <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    72ca:	f7ff bedb 	b.w	7084 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    72ce:	4770      	bx	lr

000072d0 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    72d0:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    72d2:	e9d3 1200 	ldrd	r1, r2, [r3]
    72d6:	6809      	ldr	r1, [r1, #0]
    72d8:	4211      	tst	r1, r2
    72da:	d100      	bne.n	72de <SPIClass::end()+0xe>
    72dc:	4770      	bx	lr
void SPIClass::end() {
    72de:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    72e0:	6802      	ldr	r2, [r0, #0]
    72e2:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    72e4:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    72e6:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    72e8:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    72ea:	7c22      	ldrb	r2, [r4, #16]
    72ec:	4413      	add	r3, r2
    72ee:	7c18      	ldrb	r0, [r3, #16]
    72f0:	f000 fde0 	bl	7eb4 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    72f4:	7c62      	ldrb	r2, [r4, #17]
    72f6:	6863      	ldr	r3, [r4, #4]
    72f8:	2105      	movs	r1, #5
    72fa:	4413      	add	r3, r2
    72fc:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    7300:	f000 fdd8 	bl	7eb4 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    7304:	6863      	ldr	r3, [r4, #4]
    7306:	7ca2      	ldrb	r2, [r4, #18]
    7308:	2105      	movs	r1, #5
    730a:	4413      	add	r3, r2
}
    730c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    7310:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    7314:	f000 bdce 	b.w	7eb4 <pinMode>

00007318 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    7318:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    731a:	4a08      	ldr	r2, [pc, #32]	; (733c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    731c:	4908      	ldr	r1, [pc, #32]	; (7340 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    731e:	4809      	ldr	r0, [pc, #36]	; (7344 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    7320:	f7ff ffbc 	bl	729c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    7324:	4a08      	ldr	r2, [pc, #32]	; (7348 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    7326:	4909      	ldr	r1, [pc, #36]	; (734c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    7328:	4809      	ldr	r0, [pc, #36]	; (7350 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    732a:	f7ff ffb7 	bl	729c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    732e:	4a09      	ldr	r2, [pc, #36]	; (7354 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    7330:	4909      	ldr	r1, [pc, #36]	; (7358 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    7332:	480a      	ldr	r0, [pc, #40]	; (735c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    7334:	f7ff ffb2 	bl	729c <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    7338:	bd08      	pop	{r3, pc}
    733a:	bf00      	nop
    733c:	20000658 	.word	0x20000658
    7340:	403a0000 	.word	0x403a0000
    7344:	2000c088 	.word	0x2000c088
    7348:	200005e8 	.word	0x200005e8
    734c:	4039c000 	.word	0x4039c000
    7350:	2000c0d8 	.word	0x2000c0d8
    7354:	20000578 	.word	0x20000578
    7358:	40394000 	.word	0x40394000
    735c:	2000c128 	.word	0x2000c128

00007360 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    7360:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7364:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    7368:	1a10      	subs	r0, r2, r0
    736a:	4770      	bx	lr

0000736c <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    736c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    7370:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7374:	429a      	cmp	r2, r3
    7376:	d905      	bls.n	7384 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    7378:	1c5a      	adds	r2, r3, #1
    737a:	4403      	add	r3, r0
    737c:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    7380:	7e98      	ldrb	r0, [r3, #26]
    7382:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    7384:	f04f 30ff 	mov.w	r0, #4294967295
	}
    7388:	4770      	bx	lr
    738a:	bf00      	nop

0000738c <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    738c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    7390:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7394:	429a      	cmp	r2, r3
    7396:	d902      	bls.n	739e <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    7398:	4418      	add	r0, r3
    739a:	7e80      	ldrb	r0, [r0, #26]
    739c:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    739e:	f04f 30ff 	mov.w	r0, #4294967295
	}
    73a2:	4770      	bx	lr

000073a4 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    73a4:	4770      	bx	lr
    73a6:	bf00      	nop

000073a8 <TwoWire::write(unsigned char)>:
{
    73a8:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    73aa:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    73ae:	b178      	cbz	r0, 73d0 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    73b0:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    73b4:	2a88      	cmp	r2, #136	; 0x88
    73b6:	d903      	bls.n	73c0 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    73b8:	2201      	movs	r2, #1
			return 0;
    73ba:	2000      	movs	r0, #0
    73bc:	605a      	str	r2, [r3, #4]
    73be:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    73c0:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    73c4:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    73c6:	441a      	add	r2, r3
    73c8:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    73cc:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    73d0:	4770      	bx	lr
    73d2:	bf00      	nop

000073d4 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    73d4:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    73d6:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    73da:	b90c      	cbnz	r4, 73e0 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    73dc:	4620      	mov	r0, r4
    73de:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    73e0:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    73e4:	4605      	mov	r5, r0
    73e6:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    73ea:	42a2      	cmp	r2, r4
    73ec:	d80d      	bhi.n	740a <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    73ee:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    73f0:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    73f4:	4622      	mov	r2, r4
    73f6:	4418      	add	r0, r3
    73f8:	f000 fd9c 	bl	7f34 <memcpy>
		txBufferLength += quantity;
    73fc:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    7400:	4620      	mov	r0, r4
		txBufferLength += quantity;
    7402:	4423      	add	r3, r4
    7404:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    7408:	bd38      	pop	{r3, r4, r5, pc}
    740a:	2201      	movs	r2, #1
    740c:	6042      	str	r2, [r0, #4]
    740e:	e7ef      	b.n	73f0 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00007410 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    7410:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    7412:	2500      	movs	r5, #0
    7414:	4613      	mov	r3, r2
    7416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    741a:	4604      	mov	r4, r0
    741c:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
    7420:	4815      	ldr	r0, [pc, #84]	; (7478 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    7422:	2288      	movs	r2, #136	; 0x88
    7424:	6121      	str	r1, [r4, #16]
    7426:	4629      	mov	r1, r5
    7428:	6020      	str	r0, [r4, #0]
    742a:	f104 001a 	add.w	r0, r4, #26
    742e:	6163      	str	r3, [r4, #20]
    7430:	7325      	strb	r5, [r4, #12]
    7432:	7625      	strb	r5, [r4, #24]
    7434:	7665      	strb	r5, [r4, #25]
    7436:	f004 fa49 	bl	b8cc <memset>
    743a:	2289      	movs	r2, #137	; 0x89
    743c:	4629      	mov	r1, r5
    743e:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    7442:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    7446:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    744a:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    744e:	f004 fa3d 	bl	b8cc <memset>
	}
    7452:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
    7454:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    7458:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    745c:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    7460:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    7464:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    7468:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    746c:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    7470:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
    7474:	bd38      	pop	{r3, r4, r5, pc}
    7476:	bf00      	nop
    7478:	200007c0 	.word	0x200007c0

0000747c <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    747c:	6903      	ldr	r3, [r0, #16]
{
    747e:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    7480:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
    7484:	4604      	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    7486:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    748a:	d001      	beq.n	7490 <TwoWire::isr()+0x14>
    748c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    7490:	07ae      	lsls	r6, r5, #30
    7492:	d50b      	bpl.n	74ac <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    7494:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    7498:	0408      	lsls	r0, r1, #16
    749a:	d53e      	bpl.n	751a <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    749c:	2200      	movs	r2, #0
    749e:	2001      	movs	r0, #1
    74a0:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    74a4:	4422      	add	r2, r4
    74a6:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    74aa:	7691      	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    74ac:	07ea      	lsls	r2, r5, #31
    74ae:	d510      	bpl.n	74d2 <TwoWire::isr()+0x56>
		if (!transmitting) {
    74b0:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
    74b4:	b1f6      	cbz	r6, 74f4 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    74b6:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
    74ba:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    74be:	42b2      	cmp	r2, r6
    74c0:	d927      	bls.n	7512 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    74c2:	1c72      	adds	r2, r6, #1
    74c4:	4426      	add	r6, r4
    74c6:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    74ca:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
    74ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    74d2:	05ab      	lsls	r3, r5, #22
    74d4:	d50d      	bpl.n	74f2 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    74d6:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    74da:	b118      	cbz	r0, 74e4 <TwoWire::isr()+0x68>
    74dc:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    74e0:	b103      	cbz	r3, 74e4 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    74e2:	4798      	blx	r3
		}
		rxBufferIndex = 0;
    74e4:	2300      	movs	r3, #0
    74e6:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    74ea:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    74ee:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
	}
}
    74f2:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    74f4:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    74f8:	b10a      	cbz	r2, 74fe <TwoWire::isr()+0x82>
				(*user_onRequest)();
    74fa:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    74fc:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    74fe:	2200      	movs	r2, #0
    7500:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    7504:	2201      	movs	r2, #1
    7506:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    750a:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    750e:	42b2      	cmp	r2, r6
    7510:	d8d7      	bhi.n	74c2 <TwoWire::isr()+0x46>
			port->STDR = 0;
    7512:	2200      	movs	r2, #0
    7514:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    7518:	e7db      	b.n	74d2 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    751a:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    751e:	2a87      	cmp	r2, #135	; 0x87
    7520:	d8c4      	bhi.n	74ac <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    7522:	1c50      	adds	r0, r2, #1
    7524:	b2c0      	uxtb	r0, r0
    7526:	e7bd      	b.n	74a4 <TwoWire::isr()+0x28>

00007528 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    7528:	4801      	ldr	r0, [pc, #4]	; (7530 <lpi2c1_isr()+0x8>)
    752a:	f7ff bfa7 	b.w	747c <TwoWire::isr()>
    752e:	bf00      	nop
    7530:	2000c17c 	.word	0x2000c17c

00007534 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    7534:	4801      	ldr	r0, [pc, #4]	; (753c <lpi2c3_isr()+0x8>)
    7536:	f7ff bfa1 	b.w	747c <TwoWire::isr()>
    753a:	bf00      	nop
    753c:	2000c2bc 	.word	0x2000c2bc

00007540 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    7540:	4801      	ldr	r0, [pc, #4]	; (7548 <lpi2c4_isr()+0x8>)
    7542:	f7ff bf9b 	b.w	747c <TwoWire::isr()>
    7546:	bf00      	nop
    7548:	2000c3fc 	.word	0x2000c3fc

0000754c <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    754c:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    754e:	4c09      	ldr	r4, [pc, #36]	; (7574 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    7550:	4909      	ldr	r1, [pc, #36]	; (7578 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    7552:	4622      	mov	r2, r4
    7554:	4809      	ldr	r0, [pc, #36]	; (757c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    7556:	f7ff ff5b 	bl	7410 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    755a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    755e:	4908      	ldr	r1, [pc, #32]	; (7580 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    7560:	4808      	ldr	r0, [pc, #32]	; (7584 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    7562:	f7ff ff55 	bl	7410 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    7566:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    756a:	4907      	ldr	r1, [pc, #28]	; (7588 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    756c:	4807      	ldr	r0, [pc, #28]	; (758c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    756e:	f7ff ff4f 	bl	7410 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    7572:	bd10      	pop	{r4, pc}
    7574:	60002674 	.word	0x60002674
    7578:	403f0000 	.word	0x403f0000
    757c:	2000c17c 	.word	0x2000c17c
    7580:	403f8000 	.word	0x403f8000
    7584:	2000c2bc 	.word	0x2000c2bc
    7588:	403fc000 	.word	0x403fc000
    758c:	2000c3fc 	.word	0x2000c3fc

00007590 <DMAChannel::begin(bool)>:
{
    7590:	b430      	push	{r4, r5}
	__disable_irq();
    7592:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    7594:	b921      	cbnz	r1, 75a0 <DMAChannel::begin(bool)+0x10>
    7596:	6803      	ldr	r3, [r0, #0]
    7598:	b113      	cbz	r3, 75a0 <DMAChannel::begin(bool)+0x10>
    759a:	7902      	ldrb	r2, [r0, #4]
    759c:	2a0f      	cmp	r2, #15
    759e:	d93b      	bls.n	7618 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    75a0:	4c24      	ldr	r4, [pc, #144]	; (7634 <DMAChannel::begin(bool)+0xa4>)
    75a2:	8821      	ldrh	r1, [r4, #0]
{
    75a4:	2300      	movs	r3, #0
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    75a6:	fa41 f203 	asr.w	r2, r1, r3
    75aa:	f012 0201 	ands.w	r2, r2, #1
    75ae:	d008      	beq.n	75c2 <DMAChannel::begin(bool)+0x32>
		if (++ch >= DMA_MAX_CHANNELS) {
    75b0:	3301      	adds	r3, #1
    75b2:	2b10      	cmp	r3, #16
    75b4:	d1f7      	bne.n	75a6 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    75b6:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    75b8:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    75ba:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    75bc:	6002      	str	r2, [r0, #0]
}
    75be:	bc30      	pop	{r4, r5}
    75c0:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    75c2:	f04f 0c01 	mov.w	ip, #1
    75c6:	fa0c fc03 	lsl.w	ip, ip, r3
    75ca:	ea41 010c 	orr.w	r1, r1, ip
    75ce:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    75d0:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    75d2:	4919      	ldr	r1, [pc, #100]	; (7638 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    75d4:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    75d8:	4c18      	ldr	r4, [pc, #96]	; (763c <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    75da:	4419      	add	r1, r3
	channel = ch;
    75dc:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    75e0:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    75e2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    75e4:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    75e8:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    75ea:	f240 4482 	movw	r4, #1154	; 0x482
    75ee:	4914      	ldr	r1, [pc, #80]	; (7640 <DMAChannel::begin(bool)+0xb0>)
    75f0:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    75f2:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    75f6:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    75fa:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    75fe:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7602:	6003      	str	r3, [r0, #0]
}
    7604:	bc30      	pop	{r4, r5}
	*p++ = 0;
    7606:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    760a:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    760e:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    7612:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    7616:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    7618:	4c06      	ldr	r4, [pc, #24]	; (7634 <DMAChannel::begin(bool)+0xa4>)
    761a:	8821      	ldrh	r1, [r4, #0]
    761c:	fa41 f502 	asr.w	r5, r1, r2
    7620:	07ed      	lsls	r5, r5, #31
    7622:	d5bf      	bpl.n	75a4 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    7624:	4d04      	ldr	r5, [pc, #16]	; (7638 <DMAChannel::begin(bool)+0xa8>)
    7626:	4415      	add	r5, r2
    7628:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    762c:	d1ba      	bne.n	75a4 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    762e:	b662      	cpsie	i
		return;
    7630:	e7c5      	b.n	75be <DMAChannel::begin(bool)+0x2e>
    7632:	bf00      	nop
    7634:	2001ec8a 	.word	0x2001ec8a
    7638:	02007480 	.word	0x02007480
    763c:	400fc000 	.word	0x400fc000
    7640:	400e8000 	.word	0x400e8000

00007644 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
    7644:	7903      	ldrb	r3, [r0, #4]
    7646:	2b0f      	cmp	r3, #15
    7648:	d811      	bhi.n	766e <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    764a:	4a09      	ldr	r2, [pc, #36]	; (7670 <DMAChannel::release()+0x2c>)
    764c:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    764e:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    7650:	4908      	ldr	r1, [pc, #32]	; (7674 <DMAChannel::release()+0x30>)
    7652:	2201      	movs	r2, #1
    7654:	f890 c004 	ldrb.w	ip, [r0, #4]
    7658:	880b      	ldrh	r3, [r1, #0]
    765a:	fa02 f20c 	lsl.w	r2, r2, ip
    765e:	ea23 0302 	bic.w	r3, r3, r2
    7662:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    7664:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    7666:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    7668:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    766a:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    766c:	6003      	str	r3, [r0, #0]
}
    766e:	4770      	bx	lr
    7670:	400e8000 	.word	0x400e8000
    7674:	2001ec8a 	.word	0x2001ec8a

00007678 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7678:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    767c:	b672      	cpsid	i
	if (_triggered == false) {
    767e:	7f43      	ldrb	r3, [r0, #29]
    7680:	b95b      	cbnz	r3, 769a <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    7682:	7f01      	ldrb	r1, [r0, #28]
    7684:	2901      	cmp	r1, #1
{
    7686:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    7688:	d00b      	beq.n	76a2 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    768a:	2903      	cmp	r1, #3
    768c:	d013      	beq.n	76b6 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    768e:	2301      	movs	r3, #1
    7690:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    7692:	b902      	cbnz	r2, 7696 <EventResponder::triggerEventNotImmediate()+0x1e>
    7694:	b662      	cpsie	i
}
    7696:	bc30      	pop	{r4, r5}
    7698:	4770      	bx	lr
    769a:	b90a      	cbnz	r2, 76a0 <EventResponder::triggerEventNotImmediate()+0x28>
    769c:	b662      	cpsie	i
    769e:	4770      	bx	lr
    76a0:	4770      	bx	lr
			if (firstYield == nullptr) {
    76a2:	4c12      	ldr	r4, [pc, #72]	; (76ec <EventResponder::triggerEventNotImmediate()+0x74>)
    76a4:	6821      	ldr	r1, [r4, #0]
    76a6:	b1b1      	cbz	r1, 76d6 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    76a8:	4911      	ldr	r1, [pc, #68]	; (76f0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    76aa:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    76ac:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    76ae:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    76b0:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    76b2:	6158      	str	r0, [r3, #20]
				lastYield = this;
    76b4:	e7eb      	b.n	768e <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    76b6:	4d0f      	ldr	r5, [pc, #60]	; (76f4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    76b8:	490f      	ldr	r1, [pc, #60]	; (76f8 <EventResponder::triggerEventNotImmediate()+0x80>)
    76ba:	682c      	ldr	r4, [r5, #0]
    76bc:	b18c      	cbz	r4, 76e2 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    76be:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    76c0:	680b      	ldr	r3, [r1, #0]
    76c2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    76c4:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    76c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    76ca:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    76ce:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    76d0:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    76d4:	e7db      	b.n	768e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    76d6:	4b06      	ldr	r3, [pc, #24]	; (76f0 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    76d8:	6020      	str	r0, [r4, #0]
				lastYield = this;
    76da:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    76dc:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    76e0:	e7d5      	b.n	768e <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    76e2:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    76e6:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    76e8:	e7ed      	b.n	76c6 <EventResponder::triggerEventNotImmediate()+0x4e>
    76ea:	bf00      	nop
    76ec:	2001e074 	.word	0x2001e074
    76f0:	2001e080 	.word	0x2001e080
    76f4:	2001e07c 	.word	0x2001e07c
    76f8:	2001e078 	.word	0x2001e078

000076fc <EventResponder::runFromInterrupt()>:
{
    76fc:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    76fe:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7702:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    7704:	4c0c      	ldr	r4, [pc, #48]	; (7738 <EventResponder::runFromInterrupt()+0x3c>)
    7706:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7708:	b180      	cbz	r0, 772c <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    770a:	4e0c      	ldr	r6, [pc, #48]	; (773c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    770c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    770e:	6943      	ldr	r3, [r0, #20]
    7710:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    7712:	b173      	cbz	r3, 7732 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    7714:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    7716:	b902      	cbnz	r2, 771a <EventResponder::runFromInterrupt()+0x1e>
    7718:	b662      	cpsie	i
			(*(first->_function))(*first);
    771a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    771c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    771e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7720:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7724:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    7726:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7728:	2800      	cmp	r0, #0
    772a:	d1f0      	bne.n	770e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    772c:	b902      	cbnz	r2, 7730 <EventResponder::runFromInterrupt()+0x34>
    772e:	b662      	cpsie	i
}
    7730:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    7732:	6033      	str	r3, [r6, #0]
    7734:	e7ef      	b.n	7716 <EventResponder::runFromInterrupt()+0x1a>
    7736:	bf00      	nop
    7738:	2001e07c 	.word	0x2001e07c
    773c:	2001e078 	.word	0x2001e078

00007740 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    7740:	f7ff bfdc 	b.w	76fc <EventResponder::runFromInterrupt()>

00007744 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    7744:	4904      	ldr	r1, [pc, #16]	; (7758 <systick_isr+0x14>)
	systick_millis_count++;
    7746:	4a05      	ldr	r2, [pc, #20]	; (775c <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    7748:	6849      	ldr	r1, [r1, #4]
    774a:	4b05      	ldr	r3, [pc, #20]	; (7760 <systick_isr+0x1c>)
    774c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    774e:	6813      	ldr	r3, [r2, #0]
    7750:	3301      	adds	r3, #1
    7752:	6013      	str	r3, [r2, #0]
}
    7754:	4770      	bx	lr
    7756:	bf00      	nop
    7758:	e0001000 	.word	0xe0001000
    775c:	2001ec58 	.word	0x2001ec58
    7760:	2001ec54 	.word	0x2001ec54

00007764 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7764:	4608      	mov	r0, r1
    7766:	f001 bdc7 	b.w	92f8 <usb_serial_putchar>
    776a:	bf00      	nop

0000776c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
    776c:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    776e:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    7770:	bf08      	it	eq
    7772:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7774:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
    7776:	b391      	cbz	r1, 77de <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
    7778:	f04f 0e21 	mov.w	lr, #33	; 0x21
    777c:	e001      	b.n	7782 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
    777e:	fa5f fe86 	uxtb.w	lr, r6
    7782:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    7786:	fbb1 f5f2 	udiv	r5, r1, r2
    778a:	fb02 1415 	mls	r4, r2, r5, r1
    778e:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7792:	2c09      	cmp	r4, #9
    7794:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    7798:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    779c:	bf98      	it	ls
    779e:	fa5f f48c 	uxtbls.w	r4, ip
    77a2:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    77a6:	bf88      	it	hi
    77a8:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    77aa:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    77ac:	44ec      	add	ip, sp
			n /= base;
    77ae:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    77b0:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    77b4:	d2e3      	bcs.n	777e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    77b6:	b14b      	cbz	r3, 77cc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    77b8:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    77bc:	222d      	movs	r2, #45	; 0x2d
		i--;
    77be:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    77c2:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    77c6:	446b      	add	r3, sp
    77c8:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    77cc:	6803      	ldr	r3, [r0, #0]
    77ce:	a901      	add	r1, sp, #4
    77d0:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    77d4:	685b      	ldr	r3, [r3, #4]
    77d6:	4471      	add	r1, lr
    77d8:	4798      	blx	r3
}
    77da:	b00a      	add	sp, #40	; 0x28
    77dc:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    77de:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    77e0:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    77e4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    77e8:	e7e5      	b.n	77b6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    77ea:	bf00      	nop

000077ec <Print::print(long)>:
	if (n < 0) {
    77ec:	2900      	cmp	r1, #0
    77ee:	db03      	blt.n	77f8 <Print::print(long)+0xc>
	uint8_t sign=0;
    77f0:	2300      	movs	r3, #0
	if (base == 0) {
    77f2:	220a      	movs	r2, #10
    77f4:	f7ff bfba 	b.w	776c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    77f8:	4249      	negs	r1, r1
		sign = '-';
    77fa:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    77fc:	220a      	movs	r2, #10
    77fe:	f7ff bfb5 	b.w	776c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7802:	bf00      	nop

00007804 <Print::println()>:
{
    7804:	b500      	push	{lr}
	return write(buf, 2);
    7806:	6803      	ldr	r3, [r0, #0]
{
    7808:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    780a:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    780e:	2202      	movs	r2, #2
    7810:	a901      	add	r1, sp, #4
    7812:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    7814:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    7818:	4798      	blx	r3
}
    781a:	b003      	add	sp, #12
    781c:	f85d fb04 	ldr.w	pc, [sp], #4

00007820 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7820:	4b05      	ldr	r3, [pc, #20]	; (7838 <_write+0x18>)
    7822:	2802      	cmp	r0, #2
    7824:	bf88      	it	hi
    7826:	4603      	movhi	r3, r0
{
    7828:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    782a:	681c      	ldr	r4, [r3, #0]
    782c:	4618      	mov	r0, r3
    782e:	6863      	ldr	r3, [r4, #4]
}
    7830:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7834:	4718      	bx	r3
    7836:	bf00      	nop
    7838:	200085ac 	.word	0x200085ac

0000783c <Print::printf(char const*, ...)>:
{
    783c:	b40e      	push	{r1, r2, r3}
    783e:	b500      	push	{lr}
    7840:	b082      	sub	sp, #8
    7842:	aa03      	add	r2, sp, #12
    7844:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    7848:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    784a:	f003 ff53 	bl	b6f4 <vdprintf>
}
    784e:	b002      	add	sp, #8
    7850:	f85d eb04 	ldr.w	lr, [sp], #4
    7854:	b003      	add	sp, #12
    7856:	4770      	bx	lr

00007858 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    7858:	b95a      	cbnz	r2, 7872 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    785a:	6803      	ldr	r3, [r0, #0]
    785c:	b2c9      	uxtb	r1, r1
    785e:	4a07      	ldr	r2, [pc, #28]	; (787c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    7860:	681b      	ldr	r3, [r3, #0]
    7862:	4293      	cmp	r3, r2
{
    7864:	b500      	push	{lr}
    7866:	d106      	bne.n	7876 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    7868:	4608      	mov	r0, r1
}
    786a:	f85d eb04 	ldr.w	lr, [sp], #4
    786e:	f001 bd43 	b.w	92f8 <usb_serial_putchar>
    7872:	f7ff bf7b 	b.w	776c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7876:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    787a:	4718      	bx	r3
    787c:	00007765 	.word	0x00007765

00007880 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    7880:	eeb4 0b40 	vcmp.f64	d0, d0
{
    7884:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    7886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    788a:	4605      	mov	r5, r0
    788c:	ed2d 8b02 	vpush	{d8}
    7890:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    7892:	d67c      	bvs.n	798e <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    7894:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    7898:	ed9f 6b47 	vldr	d6, [pc, #284]	; 79b8 <Print::printFloat(double, unsigned char)+0x138>
    789c:	eeb4 7b46 	vcmp.f64	d7, d6
    78a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78a4:	dc6b      	bgt.n	797e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    78a6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 79c0 <Print::printFloat(double, unsigned char)+0x140>
    78aa:	eeb4 0bc7 	vcmpe.f64	d0, d7
    78ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78b2:	dc5a      	bgt.n	796a <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    78b4:	ed9f 7b44 	vldr	d7, [pc, #272]	; 79c8 <Print::printFloat(double, unsigned char)+0x148>
    78b8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    78bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78c0:	d453      	bmi.n	796a <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    78c2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    78c6:	460c      	mov	r4, r1
    78c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78cc:	d45b      	bmi.n	7986 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    78ce:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    78d0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    78d4:	2c00      	cmp	r4, #0
    78d6:	d05e      	beq.n	7996 <Print::printFloat(double, unsigned char)+0x116>
    78d8:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    78dc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 79d0 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    78e0:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    78e4:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    78e8:	fa5f f28c 	uxtb.w	r2, ip
    78ec:	42a2      	cmp	r2, r4
    78ee:	d3f7      	bcc.n	78e0 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    78f0:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    78f4:	220a      	movs	r2, #10
    78f6:	4628      	mov	r0, r5
    78f8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    78fc:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    7900:	ee17 1a90 	vmov	r1, s15
    7904:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    7908:	f7ff ff30 	bl	776c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    790c:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    790e:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    7912:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    7916:	4606      	mov	r6, r0
		buf[0] = '.';
    7918:	bf28      	it	cs
    791a:	240f      	movcs	r4, #15
    791c:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    7920:	f10d 0309 	add.w	r3, sp, #9
    7924:	aa02      	add	r2, sp, #8
    7926:	1e61      	subs	r1, r4, #1
    7928:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    792c:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    7930:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    7934:	edcd 7a01 	vstr	s15, [sp, #4]
    7938:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    793c:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    7940:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    7942:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    7946:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    794a:	4291      	cmp	r1, r2
			remainder -= n; 
    794c:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    7950:	d1ec      	bne.n	792c <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    7952:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    7954:	3401      	adds	r4, #1
		count += write(buf, count);
    7956:	a902      	add	r1, sp, #8
    7958:	4628      	mov	r0, r5
    795a:	685b      	ldr	r3, [r3, #4]
    795c:	b2e2      	uxtb	r2, r4
    795e:	4798      	blx	r3
	}
	return count;
}
    7960:	4630      	mov	r0, r6
    7962:	b006      	add	sp, #24
    7964:	ecbd 8b02 	vpop	{d8}
    7968:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    796a:	682b      	ldr	r3, [r5, #0]
    796c:	2203      	movs	r2, #3
    796e:	491a      	ldr	r1, [pc, #104]	; (79d8 <Print::printFloat(double, unsigned char)+0x158>)
    7970:	685b      	ldr	r3, [r3, #4]
    7972:	b006      	add	sp, #24
    7974:	ecbd 8b02 	vpop	{d8}
    7978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    797c:	4718      	bx	r3
    797e:	6803      	ldr	r3, [r0, #0]
    7980:	2203      	movs	r2, #3
    7982:	4916      	ldr	r1, [pc, #88]	; (79dc <Print::printFloat(double, unsigned char)+0x15c>)
    7984:	e7f4      	b.n	7970 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    7986:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    798a:	2301      	movs	r3, #1
    798c:	e7a0      	b.n	78d0 <Print::printFloat(double, unsigned char)+0x50>
    798e:	6803      	ldr	r3, [r0, #0]
    7990:	2203      	movs	r2, #3
    7992:	4913      	ldr	r1, [pc, #76]	; (79e0 <Print::printFloat(double, unsigned char)+0x160>)
    7994:	e7ec      	b.n	7970 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    7996:	ee30 0b07 	vadd.f64	d0, d0, d7
    799a:	220a      	movs	r2, #10
    799c:	4628      	mov	r0, r5
    799e:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    79a2:	ee17 1a90 	vmov	r1, s15
}
    79a6:	b006      	add	sp, #24
    79a8:	ecbd 8b02 	vpop	{d8}
    79ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    79b0:	f7ff bedc 	b.w	776c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    79b4:	f3af 8000 	nop.w
    79b8:	ffffffff 	.word	0xffffffff
    79bc:	7fefffff 	.word	0x7fefffff
    79c0:	e0000000 	.word	0xe0000000
    79c4:	41efffff 	.word	0x41efffff
    79c8:	e0000000 	.word	0xe0000000
    79cc:	c1efffff 	.word	0xc1efffff
    79d0:	9999999a 	.word	0x9999999a
    79d4:	3fb99999 	.word	0x3fb99999
    79d8:	20000574 	.word	0x20000574
    79dc:	20000570 	.word	0x20000570
    79e0:	2000056c 	.word	0x2000056c

000079e4 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    79e4:	f001 bc78 	b.w	92d8 <usb_serial_getchar>

000079e8 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    79e8:	f001 bc10 	b.w	920c <usb_serial_peekchar>

000079ec <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    79ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    79f0:	b392      	cbz	r2, 7a58 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    79f2:	4617      	mov	r7, r2
    79f4:	fab3 f283 	clz	r2, r3
    79f8:	0952      	lsrs	r2, r2, #5
    79fa:	b36b      	cbz	r3, 7a58 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    79fc:	f1b3 0801 	subs.w	r8, r3, #1
    7a00:	d025      	beq.n	7a4e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7a02:	eb07 0a08 	add.w	sl, r7, r8
    7a06:	4683      	mov	fp, r0
    7a08:	4689      	mov	r9, r1
	size_t index = 0;
    7a0a:	4690      	mov	r8, r2
    7a0c:	4c17      	ldr	r4, [pc, #92]	; (7a6c <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    7a0e:	4e18      	ldr	r6, [pc, #96]	; (7a70 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    7a10:	6825      	ldr	r5, [r4, #0]
    7a12:	e00b      	b.n	7a2c <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    7a14:	f001 fc60 	bl	92d8 <usb_serial_getchar>
    if (c >= 0) return c;
    7a18:	2800      	cmp	r0, #0
    7a1a:	da10      	bge.n	7a3e <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    7a1c:	f001 fd00 	bl	9420 <yield>
    7a20:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    7a22:	f8db 2008 	ldr.w	r2, [fp, #8]
    7a26:	1b5b      	subs	r3, r3, r5
    7a28:	4293      	cmp	r3, r2
    7a2a:	d21a      	bcs.n	7a62 <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    7a2c:	f8db 3000 	ldr.w	r3, [fp]
    7a30:	695b      	ldr	r3, [r3, #20]
    7a32:	42b3      	cmp	r3, r6
    7a34:	d0ee      	beq.n	7a14 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    7a36:	4658      	mov	r0, fp
    7a38:	4798      	blx	r3
    if (c >= 0) return c;
    7a3a:	2800      	cmp	r0, #0
    7a3c:	dbee      	blt.n	7a1c <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    7a3e:	4548      	cmp	r0, r9
    7a40:	d005      	beq.n	7a4e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    7a42:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    7a46:	45ba      	cmp	sl, r7
		index++;
    7a48:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    7a4c:	d1e0      	bne.n	7a10 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    7a4e:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    7a50:	4640      	mov	r0, r8
	*buffer = 0;
    7a52:	703b      	strb	r3, [r7, #0]
}
    7a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    7a58:	f04f 0800 	mov.w	r8, #0
}
    7a5c:	4640      	mov	r0, r8
    7a5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    7a62:	2301      	movs	r3, #1
    7a64:	f88b 300c 	strb.w	r3, [fp, #12]
    7a68:	e7f1      	b.n	7a4e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7a6a:	bf00      	nop
    7a6c:	2001ec58 	.word	0x2001ec58
    7a70:	000079e5 	.word	0x000079e5

00007a74 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7a74:	49a2      	ldr	r1, [pc, #648]	; (7d00 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7a76:	4ba3      	ldr	r3, [pc, #652]	; (7d04 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    7a78:	4288      	cmp	r0, r1
{
    7a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    7a7e:	4ca2      	ldr	r4, [pc, #648]	; (7d08 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7a80:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    7a82:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    7a84:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    7a88:	d91b      	bls.n	7ac2 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    7a8a:	4ba0      	ldr	r3, [pc, #640]	; (7d0c <set_arm_clock+0x298>)
    7a8c:	4298      	cmp	r0, r3
    7a8e:	f240 8102 	bls.w	7c96 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7a92:	1ac3      	subs	r3, r0, r3
    7a94:	499e      	ldr	r1, [pc, #632]	; (7d10 <set_arm_clock+0x29c>)
    7a96:	0a1b      	lsrs	r3, r3, #8
    7a98:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7a9c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7aa0:	09db      	lsrs	r3, r3, #7
    7aa2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7aa6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7aaa:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7aae:	428b      	cmp	r3, r1
    7ab0:	bf28      	it	cs
    7ab2:	460b      	movcs	r3, r1
    7ab4:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    7ab8:	4b96      	ldr	r3, [pc, #600]	; (7d14 <set_arm_clock+0x2a0>)
    7aba:	fba3 3707 	umull	r3, r7, r3, r7
    7abe:	08ff      	lsrs	r7, r7, #3
    7ac0:	e004      	b.n	7acc <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    7ac2:	4f95      	ldr	r7, [pc, #596]	; (7d18 <set_arm_clock+0x2a4>)
    7ac4:	42b8      	cmp	r0, r7
    7ac6:	bf8c      	ite	hi
    7ac8:	270e      	movhi	r7, #14
    7aca:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7acc:	498d      	ldr	r1, [pc, #564]	; (7d04 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7ace:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7ad2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7ad6:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7ad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    7adc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7ae0:	d20c      	bcs.n	7afc <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7ae2:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7ae6:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7aea:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    7aee:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7af2:	680b      	ldr	r3, [r1, #0]
    7af4:	2b00      	cmp	r3, #0
    7af6:	dafc      	bge.n	7af2 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7af8:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    7afc:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    7b00:	d124      	bne.n	7b4c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    7b02:	4986      	ldr	r1, [pc, #536]	; (7d1c <set_arm_clock+0x2a8>)
    7b04:	690c      	ldr	r4, [r1, #16]
    7b06:	4986      	ldr	r1, [pc, #536]	; (7d20 <set_arm_clock+0x2ac>)
    7b08:	43a1      	bics	r1, r4
    7b0a:	f000 80ea 	beq.w	7ce2 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7b0e:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    7b12:	4634      	mov	r4, r6
    7b14:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7b18:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    7b1c:	d004      	beq.n	7b28 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    7b1e:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    7b22:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    7b24:	4b77      	ldr	r3, [pc, #476]	; (7d04 <set_arm_clock+0x290>)
    7b26:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7b28:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    7b2c:	d007      	beq.n	7b3e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    7b2e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    7b32:	4974      	ldr	r1, [pc, #464]	; (7d04 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    7b34:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    7b36:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    7b38:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    7b3a:	071a      	lsls	r2, r3, #28
    7b3c:	d4fc      	bmi.n	7b38 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    7b3e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    7b42:	4a70      	ldr	r2, [pc, #448]	; (7d04 <set_arm_clock+0x290>)
    7b44:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7b46:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7b48:	069b      	lsls	r3, r3, #26
    7b4a:	d4fc      	bmi.n	7b46 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    7b4c:	4c75      	ldr	r4, [pc, #468]	; (7d24 <set_arm_clock+0x2b0>)
    7b4e:	42a0      	cmp	r0, r4
    7b50:	f200 80ce 	bhi.w	7cf0 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    7b54:	f04f 0c01 	mov.w	ip, #1
    7b58:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    7b5a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    7b5c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    7b60:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    7b64:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7b68:	42a2      	cmp	r2, r4
    7b6a:	d818      	bhi.n	7b9e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    7b6c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    7b70:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    7b74:	f040 808d 	bne.w	7c92 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    7b78:	f1bc 0f04 	cmp.w	ip, #4
    7b7c:	f200 8091 	bhi.w	7ca2 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    7b80:	180a      	adds	r2, r1, r0
    7b82:	42a2      	cmp	r2, r4
    7b84:	f200 80a4 	bhi.w	7cd0 <set_arm_clock+0x25c>
    7b88:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    7b8c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    7b8e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7b92:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    7b96:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7b9a:	42a2      	cmp	r2, r4
    7b9c:	d9e6      	bls.n	7b6c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7b9e:	f10c 31ff 	add.w	r1, ip, #4294967295
    7ba2:	028c      	lsls	r4, r1, #10
    7ba4:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7ba8:	485f      	ldr	r0, [pc, #380]	; (7d28 <set_arm_clock+0x2b4>)
    7baa:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    7bac:	4a5f      	ldr	r2, [pc, #380]	; (7d2c <set_arm_clock+0x2b8>)
    7bae:	4290      	cmp	r0, r2
    7bb0:	d97f      	bls.n	7cb2 <set_arm_clock+0x23e>
    7bb2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 7d58 <set_arm_clock+0x2e4>
    7bb6:	226c      	movs	r2, #108	; 0x6c
    7bb8:	485d      	ldr	r0, [pc, #372]	; (7d30 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7bba:	4d58      	ldr	r5, [pc, #352]	; (7d1c <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    7bbc:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7bc0:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    7bc4:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7bc8:	f8df c190 	ldr.w	ip, [pc, #400]	; 7d5c <set_arm_clock+0x2e8>
    7bcc:	ea0e 0c0c 	and.w	ip, lr, ip
    7bd0:	45d4      	cmp	ip, sl
    7bd2:	d009      	beq.n	7be8 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    7bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    7bd8:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    7bdc:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    7be0:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    7be2:	682a      	ldr	r2, [r5, #0]
    7be4:	2a00      	cmp	r2, #0
    7be6:	dafc      	bge.n	7be2 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    7be8:	4a46      	ldr	r2, [pc, #280]	; (7d04 <set_arm_clock+0x290>)
    7bea:	6915      	ldr	r5, [r2, #16]
    7bec:	f005 0507 	and.w	r5, r5, #7
    7bf0:	429d      	cmp	r5, r3
    7bf2:	d003      	beq.n	7bfc <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    7bf4:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    7bf6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7bf8:	03dd      	lsls	r5, r3, #15
    7bfa:	d4fc      	bmi.n	7bf6 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7bfc:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    7c00:	d009      	beq.n	7c16 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    7c02:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7c06:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    7c0a:	4a3e      	ldr	r2, [pc, #248]	; (7d04 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7c0c:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    7c0e:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    7c10:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7c12:	0799      	lsls	r1, r3, #30
    7c14:	d4fc      	bmi.n	7c10 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7c16:	4947      	ldr	r1, [pc, #284]	; (7d34 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    7c18:	4a47      	ldr	r2, [pc, #284]	; (7d38 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7c1a:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    7c1c:	4291      	cmp	r1, r2
    7c1e:	d83c      	bhi.n	7c9a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7c20:	4b46      	ldr	r3, [pc, #280]	; (7d3c <set_arm_clock+0x2c8>)
    7c22:	09c9      	lsrs	r1, r1, #7
    7c24:	fba3 3101 	umull	r3, r1, r3, r1
    7c28:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    7c2a:	1e4b      	subs	r3, r1, #1
    7c2c:	021b      	lsls	r3, r3, #8
    7c2e:	ea86 0203 	eor.w	r2, r6, r3
    7c32:	f412 7f40 	tst.w	r2, #768	; 0x300
    7c36:	d006      	beq.n	7c46 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    7c38:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    7c40:	4a30      	ldr	r2, [pc, #192]	; (7d04 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7c42:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    7c44:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    7c46:	4a2f      	ldr	r2, [pc, #188]	; (7d04 <set_arm_clock+0x290>)
    7c48:	6953      	ldr	r3, [r2, #20]
    7c4a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    7c4e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7c50:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7c52:	069b      	lsls	r3, r3, #26
    7c54:	d4fc      	bmi.n	7c50 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7c56:	4b3a      	ldr	r3, [pc, #232]	; (7d40 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c58:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7c5a:	fba3 2300 	umull	r2, r3, r3, r0
    7c5e:	f04f 32ff 	mov.w	r2, #4294967295
    7c62:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    7c66:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7c6a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    7c6e:	4a35      	ldr	r2, [pc, #212]	; (7d44 <set_arm_clock+0x2d0>)
    7c70:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    7c72:	4a35      	ldr	r2, [pc, #212]	; (7d48 <set_arm_clock+0x2d4>)
    7c74:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7c76:	4a35      	ldr	r2, [pc, #212]	; (7d4c <set_arm_clock+0x2d8>)
    7c78:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c7a:	d208      	bcs.n	7c8e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7c7c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7c80:	4a21      	ldr	r2, [pc, #132]	; (7d08 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7c82:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    7c86:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7c88:	6813      	ldr	r3, [r2, #0]
    7c8a:	2b00      	cmp	r3, #0
    7c8c:	dafc      	bge.n	7c88 <set_arm_clock+0x214>
	}

	return frequency;
}
    7c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c92:	4673      	mov	r3, lr
    7c94:	e762      	b.n	7b5c <set_arm_clock+0xe8>
    7c96:	2712      	movs	r7, #18
    7c98:	e718      	b.n	7acc <set_arm_clock+0x58>
    7c9a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    7c9e:	2104      	movs	r1, #4
    7ca0:	e7c5      	b.n	7c2e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7ca2:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7ca6:	4820      	ldr	r0, [pc, #128]	; (7d28 <set_arm_clock+0x2b4>)
    7ca8:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7caa:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7cac:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7cae:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7cb2:	4a27      	ldr	r2, [pc, #156]	; (7d50 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7cb4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 7d60 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7cb8:	fba2 2000 	umull	r2, r0, r2, r0
    7cbc:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    7cbe:	4825      	ldr	r0, [pc, #148]	; (7d54 <set_arm_clock+0x2e0>)
    7cc0:	2a36      	cmp	r2, #54	; 0x36
    7cc2:	bf38      	it	cc
    7cc4:	2236      	movcc	r2, #54	; 0x36
    7cc6:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7cca:	ea42 0a0a 	orr.w	sl, r2, sl
    7cce:	e774      	b.n	7bba <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7cd0:	ea4f 248c 	mov.w	r4, ip, lsl #10
    7cd4:	2300      	movs	r3, #0
    7cd6:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    7cda:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    7cde:	46ac      	mov	ip, r5
    7ce0:	e762      	b.n	7ba8 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7ce2:	461d      	mov	r5, r3
    7ce4:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    7ce8:	4611      	mov	r1, r2
    7cea:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    7cee:	e713      	b.n	7b18 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    7cf0:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    7cf2:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7cf6:	4602      	mov	r2, r0
    7cf8:	4631      	mov	r1, r6
    7cfa:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    7cfc:	46e6      	mov	lr, ip
    7cfe:	e753      	b.n	7ba8 <set_arm_clock+0x134>
    7d00:	1f78a400 	.word	0x1f78a400
    7d04:	400fc000 	.word	0x400fc000
    7d08:	40080000 	.word	0x40080000
    7d0c:	23c34600 	.word	0x23c34600
    7d10:	004cb223 	.word	0x004cb223
    7d14:	51eb851f 	.word	0x51eb851f
    7d18:	016e3600 	.word	0x016e3600
    7d1c:	400d8000 	.word	0x400d8000
    7d20:	80003040 	.word	0x80003040
    7d24:	269fb1ff 	.word	0x269fb1ff
    7d28:	005b8d80 	.word	0x005b8d80
    7d2c:	4df67eff 	.word	0x4df67eff
    7d30:	4d3f6400 	.word	0x4d3f6400
    7d34:	08f0d17f 	.word	0x08f0d17f
    7d38:	2cb4177f 	.word	0x2cb4177f
    7d3c:	00e5109f 	.word	0x00e5109f
    7d40:	431bde83 	.word	0x431bde83
    7d44:	200085a8 	.word	0x200085a8
    7d48:	200085a4 	.word	0x200085a4
    7d4c:	2001e798 	.word	0x2001e798
    7d50:	165e9f81 	.word	0x165e9f81
    7d54:	00b71b00 	.word	0x00b71b00
    7d58:	8000206c 	.word	0x8000206c
    7d5c:	8001307f 	.word	0x8001307f
    7d60:	80002000 	.word	0x80002000

00007d64 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    7d64:	b900      	cbnz	r0, 7d68 <delay+0x4>
    7d66:	4770      	bx	lr
{
    7d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7d6c:	2101      	movs	r1, #1
    7d6e:	4681      	mov	r9, r0
    7d70:	4c21      	ldr	r4, [pc, #132]	; (7df8 <delay+0x94>)
    7d72:	4d22      	ldr	r5, [pc, #136]	; (7dfc <delay+0x98>)
    7d74:	4e22      	ldr	r6, [pc, #136]	; (7e00 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7d76:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    7d7a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    7d7c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7d7e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7d82:	2b00      	cmp	r3, #0
    7d84:	d1f7      	bne.n	7d76 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7d86:	491f      	ldr	r1, [pc, #124]	; (7e04 <delay+0xa0>)
    7d88:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    7d8a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7d8e:	f8df a078 	ldr.w	sl, [pc, #120]	; 7e08 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    7d92:	1a1b      	subs	r3, r3, r0
    7d94:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    7d96:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7d9a:	f8da 2000 	ldr.w	r2, [sl]
    7d9e:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    7da2:	455a      	cmp	r2, fp
    7da4:	bf94      	ite	ls
    7da6:	4490      	addls	r8, r2
    7da8:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7daa:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    7dae:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    7db0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7db2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7db6:	2b00      	cmp	r3, #0
    7db8:	d1f7      	bne.n	7daa <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7dba:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7dbc:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    7dc0:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    7dc2:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7dc6:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    7dca:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    7dce:	bf94      	ite	ls
    7dd0:	4462      	addls	r2, ip
    7dd2:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    7dd6:	eba2 0208 	sub.w	r2, r2, r8
    7dda:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    7dde:	d306      	bcc.n	7dee <delay+0x8a>
			if (--msec == 0) return;
    7de0:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    7de4:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    7de8:	d1df      	bne.n	7daa <delay+0x46>
}
    7dea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    7dee:	f001 fb17 	bl	9420 <yield>
		while ((micros() - start) >= 1000) {
    7df2:	4904      	ldr	r1, [pc, #16]	; (7e04 <delay+0xa0>)
    7df4:	e7d9      	b.n	7daa <delay+0x46>
    7df6:	bf00      	nop
    7df8:	2001ec5c 	.word	0x2001ec5c
    7dfc:	2001ec58 	.word	0x2001ec58
    7e00:	2001ec54 	.word	0x2001ec54
    7e04:	e0001000 	.word	0xe0001000
    7e08:	2001e798 	.word	0x2001e798

00007e0c <micros>:
{
    7e0c:	b430      	push	{r4, r5}
    7e0e:	4b0f      	ldr	r3, [pc, #60]	; (7e4c <micros+0x40>)
    7e10:	f04f 0c01 	mov.w	ip, #1
    7e14:	4d0e      	ldr	r5, [pc, #56]	; (7e50 <micros+0x44>)
    7e16:	4c0f      	ldr	r4, [pc, #60]	; (7e54 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7e18:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    7e1c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    7e1e:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7e20:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    7e24:	2a00      	cmp	r2, #0
    7e26:	d1f7      	bne.n	7e18 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7e28:	4b0b      	ldr	r3, [pc, #44]	; (7e58 <micros+0x4c>)
    7e2a:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e2c:	4a0b      	ldr	r2, [pc, #44]	; (7e5c <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    7e2e:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    7e30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e34:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    7e36:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e3a:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    7e3e:	bc30      	pop	{r4, r5}
    7e40:	428a      	cmp	r2, r1
    7e42:	bf94      	ite	ls
    7e44:	1880      	addls	r0, r0, r2
    7e46:	1840      	addhi	r0, r0, r1
    7e48:	4770      	bx	lr
    7e4a:	bf00      	nop
    7e4c:	2001ec5c 	.word	0x2001ec5c
    7e50:	2001ec58 	.word	0x2001ec58
    7e54:	2001ec54 	.word	0x2001ec54
    7e58:	e0001000 	.word	0xe0001000
    7e5c:	2001e798 	.word	0x2001e798

00007e60 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    7e60:	2836      	cmp	r0, #54	; 0x36
    7e62:	d816      	bhi.n	7e92 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    7e64:	0102      	lsls	r2, r0, #4
    7e66:	4b10      	ldr	r3, [pc, #64]	; (7ea8 <digitalWrite+0x48>)
    7e68:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    7e6c:	589b      	ldr	r3, [r3, r2]
{
    7e6e:	b410      	push	{r4}
	mask = p->mask;
    7e70:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    7e72:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    7e74:	4214      	tst	r4, r2
    7e76:	d005      	beq.n	7e84 <digitalWrite+0x24>
		if (val) {
    7e78:	b961      	cbnz	r1, 7e94 <digitalWrite+0x34>
		}
	}
}
    7e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    7e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    7e82:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7e84:	6883      	ldr	r3, [r0, #8]
		if (val) {
    7e86:	b151      	cbz	r1, 7e9e <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7e88:	4a08      	ldr	r2, [pc, #32]	; (7eac <digitalWrite+0x4c>)
}
    7e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7e8e:	601a      	str	r2, [r3, #0]
}
    7e90:	4770      	bx	lr
    7e92:	4770      	bx	lr
    7e94:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    7e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    7e9c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    7e9e:	4a04      	ldr	r2, [pc, #16]	; (7eb0 <digitalWrite+0x50>)
}
    7ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    7ea4:	601a      	str	r2, [r3, #0]
}
    7ea6:	4770      	bx	lr
    7ea8:	20007688 	.word	0x20007688
    7eac:	0001f038 	.word	0x0001f038
    7eb0:	00013038 	.word	0x00013038

00007eb4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    7eb4:	2836      	cmp	r0, #54	; 0x36
    7eb6:	d829      	bhi.n	7f0c <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    7eb8:	4b16      	ldr	r3, [pc, #88]	; (7f14 <pinMode+0x60>)
    7eba:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    7ebc:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    7ebe:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    7ec2:	589a      	ldr	r2, [r3, r2]
{
    7ec4:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    7ec6:	6853      	ldr	r3, [r2, #4]
    7ec8:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    7eca:	d00e      	beq.n	7eea <pinMode+0x36>
    7ecc:	2904      	cmp	r1, #4
    7ece:	d00c      	beq.n	7eea <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    7ed0:	ea23 0304 	bic.w	r3, r3, r4
    7ed4:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    7ed6:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    7ed8:	b1a9      	cbz	r1, 7f06 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    7eda:	2902      	cmp	r1, #2
    7edc:	d017      	beq.n	7f0e <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    7ede:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    7ee0:	bf0c      	ite	eq
    7ee2:	4a0d      	ldreq	r2, [pc, #52]	; (7f18 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    7ee4:	4a0d      	ldrne	r2, [pc, #52]	; (7f1c <pinMode+0x68>)
    7ee6:	601a      	str	r2, [r3, #0]
    7ee8:	e007      	b.n	7efa <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    7eea:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    7eec:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    7eee:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    7ef0:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    7ef2:	d008      	beq.n	7f06 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    7ef4:	f640 0238 	movw	r2, #2104	; 0x838
    7ef8:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    7efa:	6843      	ldr	r3, [r0, #4]
    7efc:	2215      	movs	r2, #21
}
    7efe:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    7f02:	601a      	str	r2, [r3, #0]
}
    7f04:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    7f06:	2238      	movs	r2, #56	; 0x38
    7f08:	601a      	str	r2, [r3, #0]
    7f0a:	e7f6      	b.n	7efa <pinMode+0x46>
    7f0c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7f0e:	4a04      	ldr	r2, [pc, #16]	; (7f20 <pinMode+0x6c>)
    7f10:	601a      	str	r2, [r3, #0]
    7f12:	e7f2      	b.n	7efa <pinMode+0x46>
    7f14:	20007688 	.word	0x20007688
    7f18:	00013038 	.word	0x00013038
    7f1c:	00010038 	.word	0x00010038
    7f20:	0001f038 	.word	0x0001f038

00007f24 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    7f24:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    7f26:	f7f8 f9ff 	bl	328 <setup>
	while (1) {
		loop();
    7f2a:	f7f8 f89d 	bl	68 <loop>
		yield();
    7f2e:	f001 fa77 	bl	9420 <yield>
	while (1) {
    7f32:	e7fa      	b.n	7f2a <main+0x6>

00007f34 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    7f34:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    7f36:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    7f3a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    7f3e:	d16d      	bne.n	801c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    7f40:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    7f42:	d341      	bcc.n	7fc8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    7f44:	f851 3b04 	ldr.w	r3, [r1], #4
    7f48:	f840 3b04 	str.w	r3, [r0], #4
    7f4c:	f851 3b04 	ldr.w	r3, [r1], #4
    7f50:	f840 3b04 	str.w	r3, [r0], #4
    7f54:	f851 3b04 	ldr.w	r3, [r1], #4
    7f58:	f840 3b04 	str.w	r3, [r0], #4
    7f5c:	f851 3b04 	ldr.w	r3, [r1], #4
    7f60:	f840 3b04 	str.w	r3, [r0], #4
    7f64:	f851 3b04 	ldr.w	r3, [r1], #4
    7f68:	f840 3b04 	str.w	r3, [r0], #4
    7f6c:	f851 3b04 	ldr.w	r3, [r1], #4
    7f70:	f840 3b04 	str.w	r3, [r0], #4
    7f74:	f851 3b04 	ldr.w	r3, [r1], #4
    7f78:	f840 3b04 	str.w	r3, [r0], #4
    7f7c:	f851 3b04 	ldr.w	r3, [r1], #4
    7f80:	f840 3b04 	str.w	r3, [r0], #4
    7f84:	f851 3b04 	ldr.w	r3, [r1], #4
    7f88:	f840 3b04 	str.w	r3, [r0], #4
    7f8c:	f851 3b04 	ldr.w	r3, [r1], #4
    7f90:	f840 3b04 	str.w	r3, [r0], #4
    7f94:	f851 3b04 	ldr.w	r3, [r1], #4
    7f98:	f840 3b04 	str.w	r3, [r0], #4
    7f9c:	f851 3b04 	ldr.w	r3, [r1], #4
    7fa0:	f840 3b04 	str.w	r3, [r0], #4
    7fa4:	f851 3b04 	ldr.w	r3, [r1], #4
    7fa8:	f840 3b04 	str.w	r3, [r0], #4
    7fac:	f851 3b04 	ldr.w	r3, [r1], #4
    7fb0:	f840 3b04 	str.w	r3, [r0], #4
    7fb4:	f851 3b04 	ldr.w	r3, [r1], #4
    7fb8:	f840 3b04 	str.w	r3, [r0], #4
    7fbc:	f851 3b04 	ldr.w	r3, [r1], #4
    7fc0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    7fc4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    7fc6:	d2bd      	bcs.n	7f44 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    7fc8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    7fca:	d311      	bcc.n	7ff0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    7fcc:	f851 3b04 	ldr.w	r3, [r1], #4
    7fd0:	f840 3b04 	str.w	r3, [r0], #4
    7fd4:	f851 3b04 	ldr.w	r3, [r1], #4
    7fd8:	f840 3b04 	str.w	r3, [r0], #4
    7fdc:	f851 3b04 	ldr.w	r3, [r1], #4
    7fe0:	f840 3b04 	str.w	r3, [r0], #4
    7fe4:	f851 3b04 	ldr.w	r3, [r1], #4
    7fe8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    7fec:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    7fee:	d2ed      	bcs.n	7fcc <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    7ff0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    7ff2:	d305      	bcc.n	8000 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    7ff4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    7ff8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    7ffc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    7ffe:	d2f9      	bcs.n	7ff4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8000:	3204      	adds	r2, #4
	beq	.Ldone
    8002:	d008      	beq.n	8016 <memcpy+0xe2>

	lsls	r2, r2, #31
    8004:	07d2      	lsls	r2, r2, #31
	itt ne
    8006:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8008:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    800c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8010:	d301      	bcc.n	8016 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8012:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8014:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8016:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8018:	4770      	bx	lr
    801a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    801c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    801e:	d313      	bcc.n	8048 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8020:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8022:	d08d      	beq.n	7f40 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8024:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8028:	d08a      	beq.n	7f40 <memcpy+0xc>

	rsb	r3, #4
    802a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    802e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    8030:	07db      	lsls	r3, r3, #31
	itt ne
    8032:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8034:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8038:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    803c:	d380      	bcc.n	7f40 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    803e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    8042:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    8046:	e77b      	b.n	7f40 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8048:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    804a:	d3d9      	bcc.n	8000 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    804c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    804e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8052:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8056:	d2f9      	bcs.n	804c <memcpy+0x118>

	ldrb	r3, [r1]
    8058:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    805a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    805c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    805e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8060:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8062:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8064:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8066:	4770      	bx	lr

00008068 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    8068:	f001 bd00 	b.w	9a6c <free>

0000806c <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    806c:	f101 3cff 	add.w	ip, r1, #4294967295
{
    8070:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    8072:	4666      	mov	r6, ip
	int i=0, j;
    8074:	2400      	movs	r4, #0
    8076:	e000      	b.n	807a <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    8078:	3401      	adds	r4, #1
		digit = val % radix;
    807a:	fbb0 f5f2 	udiv	r5, r0, r2
    807e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8082:	2b09      	cmp	r3, #9
    8084:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    8088:	f103 0330 	add.w	r3, r3, #48	; 0x30
    808c:	fa5f fe8e 	uxtb.w	lr, lr
    8090:	bf98      	it	ls
    8092:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    8096:	4290      	cmp	r0, r2
		val /= radix;
    8098:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    809a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    809e:	d2eb      	bcs.n	8078 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    80a0:	1c63      	adds	r3, r4, #1
    80a2:	2200      	movs	r2, #0
    80a4:	18c8      	adds	r0, r1, r3
    80a6:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    80a8:	b17c      	cbz	r4, 80ca <ultoa+0x5e>
		t = buf[j];
    80aa:	4662      	mov	r2, ip
    80ac:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    80b0:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    80b4:	eba1 030c 	sub.w	r3, r1, ip
    80b8:	3202      	adds	r2, #2
		buf[j] = buf[i];
    80ba:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    80be:	3b01      	subs	r3, #1
    80c0:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    80c2:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    80c4:	4423      	add	r3, r4
    80c6:	429a      	cmp	r2, r3
    80c8:	dbef      	blt.n	80aa <ultoa+0x3e>
	}
	return buf;
}
    80ca:	4608      	mov	r0, r1
    80cc:	bd70      	pop	{r4, r5, r6, pc}
    80ce:	bf00      	nop

000080d0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    80d0:	4a07      	ldr	r2, [pc, #28]	; (80f0 <rtc_get+0x20>)
    80d2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    80d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    80d6:	4619      	mov	r1, r3
    80d8:	4684      	mov	ip, r0
    80da:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    80dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    80de:	4299      	cmp	r1, r3
    80e0:	d1f9      	bne.n	80d6 <rtc_get+0x6>
    80e2:	4584      	cmp	ip, r0
    80e4:	d1f7      	bne.n	80d6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    80e6:	0bdb      	lsrs	r3, r3, #15
}
    80e8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    80ec:	4770      	bx	lr
    80ee:	bf00      	nop
    80f0:	400d4000 	.word	0x400d4000

000080f4 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    80f4:	4910      	ldr	r1, [pc, #64]	; (8138 <rtc_set+0x44>)
    80f6:	688b      	ldr	r3, [r1, #8]
    80f8:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    80fc:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    80fe:	688b      	ldr	r3, [r1, #8]
    8100:	07db      	lsls	r3, r3, #31
    8102:	d4fc      	bmi.n	80fe <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    8104:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    8106:	4a0c      	ldr	r2, [pc, #48]	; (8138 <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    8108:	f023 0301 	bic.w	r3, r3, #1
    810c:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    810e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8110:	07d9      	lsls	r1, r3, #31
    8112:	d4fc      	bmi.n	810e <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    8114:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    8116:	4908      	ldr	r1, [pc, #32]	; (8138 <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    8118:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    811a:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    811c:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    811e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8120:	f043 0301 	orr.w	r3, r3, #1
    8124:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    8126:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    8128:	07db      	lsls	r3, r3, #31
    812a:	d5fc      	bpl.n	8126 <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    812c:	688b      	ldr	r3, [r1, #8]
    812e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    8132:	608b      	str	r3, [r1, #8]
}
    8134:	4770      	bx	lr
    8136:	bf00      	nop
    8138:	400d4000 	.word	0x400d4000

0000813c <unused_interrupt_vector>:
	__disable_irq();
    813c:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    813e:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    8142:	4c4f      	ldr	r4, [pc, #316]	; (8280 <unused_interrupt_vector+0x144>)
    8144:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    8148:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    814c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    8150:	4e4c      	ldr	r6, [pc, #304]	; (8284 <unused_interrupt_vector+0x148>)
	while (p < end) {
    8152:	4d4d      	ldr	r5, [pc, #308]	; (8288 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    8154:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    8158:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    815c:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    8160:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    8164:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    8168:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    816c:	6993      	ldr	r3, [r2, #24]
    816e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    8172:	69d3      	ldr	r3, [r2, #28]
    8174:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    8178:	f000 f8d0 	bl	831c <tempmonGetTemp>
    817c:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    8180:	f7ff ffa6 	bl	80d0 <rtc_get>
	info->len = sizeof(*info) / 4;
    8184:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    8186:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    818a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    818e:	460b      	mov	r3, r1
    8190:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8194:	493d      	ldr	r1, [pc, #244]	; (828c <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    8196:	1d30      	adds	r0, r6, #4
    8198:	405a      	eors	r2, r3
    819a:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    819c:	f002 0301 	and.w	r3, r2, #1
    81a0:	3c01      	subs	r4, #1
    81a2:	fb01 f303 	mul.w	r3, r1, r3
    81a6:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    81aa:	d1f7      	bne.n	819c <unused_interrupt_vector+0x60>
	while (p < end) {
    81ac:	42a8      	cmp	r0, r5
    81ae:	d002      	beq.n	81b6 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    81b0:	6873      	ldr	r3, [r6, #4]
    81b2:	4606      	mov	r6, r0
    81b4:	e7ef      	b.n	8196 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    81b6:	4b32      	ldr	r3, [pc, #200]	; (8280 <unused_interrupt_vector+0x144>)
    81b8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    81bc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    81c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    81c4:	492f      	ldr	r1, [pc, #188]	; (8284 <unused_interrupt_vector+0x148>)
    81c6:	4a32      	ldr	r2, [pc, #200]	; (8290 <unused_interrupt_vector+0x154>)
    81c8:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    81cc:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    81d0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    81d4:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    81d8:	4a2e      	ldr	r2, [pc, #184]	; (8294 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    81da:	2502      	movs	r5, #2
    81dc:	482e      	ldr	r0, [pc, #184]	; (8298 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    81de:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    81e0:	492e      	ldr	r1, [pc, #184]	; (829c <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    81e2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    81e6:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    81e8:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    81ea:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    81ec:	482c      	ldr	r0, [pc, #176]	; (82a0 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    81ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    81f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    81f6:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    81f8:	680b      	ldr	r3, [r1, #0]
    81fa:	4283      	cmp	r3, r0
    81fc:	d83d      	bhi.n	827a <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    81fe:	4d26      	ldr	r5, [pc, #152]	; (8298 <unused_interrupt_vector+0x15c>)
    8200:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    8202:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8206:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    820a:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    820c:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    820e:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    8212:	4924      	ldr	r1, [pc, #144]	; (82a4 <unused_interrupt_vector+0x168>)
    8214:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    8218:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    821c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    8220:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    8224:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    8228:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    822c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    8230:	e001      	b.n	8236 <unused_interrupt_vector+0xfa>
		usb_isr();
    8232:	f000 f965 	bl	8500 <usb_isr>
		if (PIT_TFLG0) {
    8236:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    823a:	2b00      	cmp	r3, #0
    823c:	d0f9      	beq.n	8232 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    823e:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    8240:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    8244:	2c4f      	cmp	r4, #79	; 0x4f
    8246:	d9f4      	bls.n	8232 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8248:	4b17      	ldr	r3, [pc, #92]	; (82a8 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    824a:	2002      	movs	r0, #2
    824c:	4917      	ldr	r1, [pc, #92]	; (82ac <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    824e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    8252:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8256:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8258:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    825c:	b93b      	cbnz	r3, 826e <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    825e:	4814      	ldr	r0, [pc, #80]	; (82b0 <unused_interrupt_vector+0x174>)
    8260:	4914      	ldr	r1, [pc, #80]	; (82b4 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8262:	4a0d      	ldr	r2, [pc, #52]	; (8298 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    8264:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8266:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    826a:	2b00      	cmp	r3, #0
    826c:	d0fa      	beq.n	8264 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    826e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8272:	4a11      	ldr	r2, [pc, #68]	; (82b8 <unused_interrupt_vector+0x17c>)
    8274:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    8278:	e7fe      	b.n	8278 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    827a:	f7ff fbfb 	bl	7a74 <set_arm_clock>
    827e:	e7be      	b.n	81fe <unused_interrupt_vector+0xc2>
    8280:	2027ff00 	.word	0x2027ff00
    8284:	2027ff80 	.word	0x2027ff80
    8288:	2027ffa8 	.word	0x2027ffa8
    828c:	edb88320 	.word	0xedb88320
    8290:	2027ffa0 	.word	0x2027ffa0
    8294:	400fc000 	.word	0x400fc000
    8298:	40084000 	.word	0x40084000
    829c:	200085a8 	.word	0x200085a8
    82a0:	0bcd3d80 	.word	0x0bcd3d80
    82a4:	00249f00 	.word	0x00249f00
    82a8:	400d9000 	.word	0x400d9000
    82ac:	402e0000 	.word	0x402e0000
    82b0:	400f8000 	.word	0x400f8000
    82b4:	0bad00f1 	.word	0x0bad00f1
    82b8:	05fa0004 	.word	0x05fa0004

000082bc <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    82bc:	490a      	ldr	r1, [pc, #40]	; (82e8 <_sbrk+0x2c>)
    82be:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    82c0:	b138      	cbz	r0, 82d2 <_sbrk+0x16>
{
    82c2:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    82c4:	1813      	adds	r3, r2, r0
    82c6:	4809      	ldr	r0, [pc, #36]	; (82ec <_sbrk+0x30>)
    82c8:	4283      	cmp	r3, r0
    82ca:	d804      	bhi.n	82d6 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    82cc:	4610      	mov	r0, r2
                __brkval = prev + incr;
    82ce:	600b      	str	r3, [r1, #0]
}
    82d0:	bd08      	pop	{r3, pc}
    82d2:	4610      	mov	r0, r2
    82d4:	4770      	bx	lr
                        errno = ENOMEM;
    82d6:	f003 fc2f 	bl	bb38 <__errno>
    82da:	230c      	movs	r3, #12
                        return (void *)-1;
    82dc:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    82e0:	6003      	str	r3, [r0, #0]
}
    82e2:	4610      	mov	r0, r2
    82e4:	bd08      	pop	{r3, pc}
    82e6:	bf00      	nop
    82e8:	200085c0 	.word	0x200085c0
    82ec:	20280000 	.word	0x20280000

000082f0 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    82f0:	2000      	movs	r0, #0
    82f2:	4770      	bx	lr

000082f4 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    82f4:	f04f 30ff 	mov.w	r0, #4294967295
    82f8:	4770      	bx	lr
    82fa:	bf00      	nop

000082fc <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    82fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    8300:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    8302:	604b      	str	r3, [r1, #4]
}
    8304:	4770      	bx	lr
    8306:	bf00      	nop

00008308 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    8308:	2001      	movs	r0, #1
    830a:	4770      	bx	lr

0000830c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    830c:	f04f 30ff 	mov.w	r0, #4294967295
    8310:	4770      	bx	lr
    8312:	bf00      	nop

00008314 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    8314:	bf30      	wfi
    8316:	e7fd      	b.n	8314 <abort>

00008318 <Panic_Temp_isr>:
  unused_interrupt_vector();
    8318:	f7ff bf10 	b.w	813c <unused_interrupt_vector>

0000831c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    831c:	4a12      	ldr	r2, [pc, #72]	; (8368 <tempmonGetTemp+0x4c>)
    831e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    8322:	075b      	lsls	r3, r3, #29
    8324:	d5fb      	bpl.n	831e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8326:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    832a:	4810      	ldr	r0, [pc, #64]	; (836c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    832c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8330:	490f      	ldr	r1, [pc, #60]	; (8370 <tempmonGetTemp+0x54>)
    8332:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8336:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    833a:	ed91 6a00 	vldr	s12, [r1]
    833e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    8342:	4a0c      	ldr	r2, [pc, #48]	; (8374 <tempmonGetTemp+0x58>)
    8344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8348:	4b0b      	ldr	r3, [pc, #44]	; (8378 <tempmonGetTemp+0x5c>)
    834a:	edd2 6a00 	vldr	s13, [r2]
    834e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8352:	ed93 7a00 	vldr	s14, [r3]
    8356:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    835a:	ee67 7a86 	vmul.f32	s15, s15, s12
    835e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    8362:	ee37 0a40 	vsub.f32	s0, s14, s0
    8366:	4770      	bx	lr
    8368:	400d8100 	.word	0x400d8100
    836c:	2001e788 	.word	0x2001e788
    8370:	2001e790 	.word	0x2001e790
    8374:	2001e794 	.word	0x2001e794
    8378:	2001e78c 	.word	0x2001e78c

0000837c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    837c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    837e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    8380:	b11b      	cbz	r3, 838a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    8382:	6853      	ldr	r3, [r2, #4]
    8384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8388:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    838a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    838c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    838e:	b33c      	cbz	r4, 83e0 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8390:	4b1a      	ldr	r3, [pc, #104]	; (83fc <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    8392:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8394:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8398:	420c      	tst	r4, r1
    839a:	d11d      	bne.n	83d8 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    839c:	4e18      	ldr	r6, [pc, #96]	; (8400 <schedule_transfer+0x84>)
    839e:	6877      	ldr	r7, [r6, #4]
    83a0:	e004      	b.n	83ac <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    83a2:	6874      	ldr	r4, [r6, #4]
    83a4:	1be4      	subs	r4, r4, r7
    83a6:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    83aa:	d20b      	bcs.n	83c4 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    83ac:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    83b0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    83b4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    83b8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    83bc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    83c0:	0464      	lsls	r4, r4, #17
    83c2:	d5ee      	bpl.n	83a2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    83c4:	400d      	ands	r5, r1
    83c6:	d107      	bne.n	83d8 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    83c8:	4c0c      	ldr	r4, [pc, #48]	; (83fc <schedule_transfer+0x80>)
		endpoint->status = 0;
    83ca:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    83ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    83d2:	430b      	orrs	r3, r1
    83d4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    83d8:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    83da:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    83dc:	bcf0      	pop	{r4, r5, r6, r7}
    83de:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    83e0:	4d06      	ldr	r5, [pc, #24]	; (83fc <schedule_transfer+0x80>)
	endpoint->status = 0;
    83e2:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    83e6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    83ea:	430b      	orrs	r3, r1
    83ec:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    83f0:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    83f2:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    83f4:	b662      	cpsie	i
}
    83f6:	bcf0      	pop	{r4, r5, r6, r7}
    83f8:	4770      	bx	lr
    83fa:	bf00      	nop
    83fc:	402e0000 	.word	0x402e0000
    8400:	e0001000 	.word	0xe0001000

00008404 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    8404:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    8406:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    8408:	b19d      	cbz	r5, 8432 <run_callbacks+0x2e>
    840a:	4606      	mov	r6, r0
    840c:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    840e:	2400      	movs	r4, #0
    8410:	e003      	b.n	841a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    8412:	6812      	ldr	r2, [r2, #0]
		count++;
    8414:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    8416:	2a01      	cmp	r2, #1
    8418:	d00c      	beq.n	8434 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    841a:	6853      	ldr	r3, [r2, #4]
    841c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    8420:	d0f7      	beq.n	8412 <run_callbacks+0xe>
			ep->first_transfer = t;
    8422:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8424:	b12c      	cbz	r4, 8432 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    8426:	4628      	mov	r0, r5
		ep->callback_function(first);
    8428:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    842a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    842c:	4798      	blx	r3
	while (count) {
    842e:	3c01      	subs	r4, #1
    8430:	d1f9      	bne.n	8426 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    8432:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    8434:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    8438:	e7f4      	b.n	8424 <run_callbacks+0x20>
    843a:	bf00      	nop

0000843c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    843c:	b430      	push	{r4, r5}
	if (len > 0) {
    843e:	b9d9      	cbnz	r1, 8478 <endpoint0_transmit.constprop.0+0x3c>
    8440:	4c1f      	ldr	r4, [pc, #124]	; (84c0 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    8442:	4b20      	ldr	r3, [pc, #128]	; (84c4 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    8444:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8446:	4a20      	ldr	r2, [pc, #128]	; (84c8 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    8448:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    844a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    844e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8450:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    8452:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8456:	2480      	movs	r4, #128	; 0x80
    8458:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    845a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    845e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8462:	481a      	ldr	r0, [pc, #104]	; (84cc <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    8464:	432b      	orrs	r3, r5
    8466:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    846a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    846c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8470:	2b00      	cmp	r3, #0
    8472:	d1fb      	bne.n	846c <endpoint0_transmit.constprop.0+0x30>
}
    8474:	bc30      	pop	{r4, r5}
    8476:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8478:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    847a:	4b15      	ldr	r3, [pc, #84]	; (84d0 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    847c:	4c10      	ldr	r4, [pc, #64]	; (84c0 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    847e:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8480:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8484:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    8486:	4a10      	ldr	r2, [pc, #64]	; (84c8 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8488:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    848a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    848e:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8490:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8492:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8496:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8498:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    849a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    849e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    84a2:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    84a4:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    84a6:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    84a8:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    84aa:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    84ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    84b2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    84b6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    84ba:	2b00      	cmp	r3, #0
    84bc:	d1fb      	bne.n	84b6 <endpoint0_transmit.constprop.0+0x7a>
    84be:	e7c0      	b.n	8442 <endpoint0_transmit.constprop.0+0x6>
    84c0:	20000000 	.word	0x20000000
    84c4:	20008ec0 	.word	0x20008ec0
    84c8:	402e0000 	.word	0x402e0000
    84cc:	2001e630 	.word	0x2001e630
    84d0:	20008ee0 	.word	0x20008ee0

000084d4 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    84d4:	4908      	ldr	r1, [pc, #32]	; (84f8 <usb_stop_sof_interrupts+0x24>)
    84d6:	2201      	movs	r2, #1
    84d8:	780b      	ldrb	r3, [r1, #0]
    84da:	fa02 f000 	lsl.w	r0, r2, r0
    84de:	ea23 0000 	bic.w	r0, r3, r0
    84e2:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    84e4:	b930      	cbnz	r0, 84f4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    84e6:	4a05      	ldr	r2, [pc, #20]	; (84fc <usb_stop_sof_interrupts+0x28>)
    84e8:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    84ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    84f0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    84f4:	4770      	bx	lr
    84f6:	bf00      	nop
    84f8:	2001eca0 	.word	0x2001eca0
    84fc:	402e0000 	.word	0x402e0000

00008500 <usb_isr>:
{
    8500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    8504:	4c97      	ldr	r4, [pc, #604]	; (8764 <usb_isr+0x264>)
{
    8506:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    8508:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    850c:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    850e:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    8512:	d553      	bpl.n	85bc <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    8514:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    8518:	2a00      	cmp	r2, #0
    851a:	d04a      	beq.n	85b2 <usb_isr+0xb2>
    851c:	4e92      	ldr	r6, [pc, #584]	; (8768 <usb_isr+0x268>)
    851e:	f8df a260 	ldr.w	sl, [pc, #608]	; 8780 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    8522:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8798 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    8526:	f8df b274 	ldr.w	fp, [pc, #628]	; 879c <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    852a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 87a0 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    852e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    8532:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8536:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    853a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    853e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    8542:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8546:	049d      	lsls	r5, r3, #18
    8548:	d5f5      	bpl.n	8536 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    854a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    854e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    8552:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8556:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    855a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    855e:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    8562:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    8566:	d1fa      	bne.n	855e <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    8568:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    856a:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    856c:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    8570:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    8574:	f000 81cf 	beq.w	8916 <usb_isr+0x416>
    8578:	f200 80db 	bhi.w	8732 <usb_isr+0x232>
    857c:	f240 3102 	movw	r1, #770	; 0x302
    8580:	428b      	cmp	r3, r1
    8582:	f000 81e7 	beq.w	8954 <usb_isr+0x454>
    8586:	f200 809a 	bhi.w	86be <usb_isr+0x1be>
    858a:	2b82      	cmp	r3, #130	; 0x82
    858c:	f000 81cb 	beq.w	8926 <usb_isr+0x426>
    8590:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    8594:	f040 808a 	bne.w	86ac <usb_isr+0x1ac>
		if (endpoint > 7) break;
    8598:	f010 0f78 	tst.w	r0, #120	; 0x78
    859c:	b283      	uxth	r3, r0
    859e:	f000 8203 	beq.w	89a8 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    85a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    85a6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    85aa:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    85ae:	2a00      	cmp	r2, #0
    85b0:	d1bd      	bne.n	852e <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    85b2:	4a6c      	ldr	r2, [pc, #432]	; (8764 <usb_isr+0x264>)
    85b4:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    85b8:	2b00      	cmp	r3, #0
    85ba:	d142      	bne.n	8642 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    85bc:	067e      	lsls	r6, r7, #25
    85be:	d516      	bpl.n	85ee <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    85c0:	4b68      	ldr	r3, [pc, #416]	; (8764 <usb_isr+0x264>)
    85c2:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    85c6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    85ca:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    85ce:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    85d2:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    85d6:	2c00      	cmp	r4, #0
    85d8:	d1fb      	bne.n	85d2 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    85da:	f04f 32ff 	mov.w	r2, #4294967295
    85de:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    85e2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    85e6:	f000 fd29 	bl	903c <usb_serial_reset>
		endpointN_notify_mask = 0;
    85ea:	4b60      	ldr	r3, [pc, #384]	; (876c <usb_isr+0x26c>)
    85ec:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    85ee:	01fc      	lsls	r4, r7, #7
    85f0:	d503      	bpl.n	85fa <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    85f2:	4b5f      	ldr	r3, [pc, #380]	; (8770 <usb_isr+0x270>)
    85f4:	681b      	ldr	r3, [r3, #0]
    85f6:	b103      	cbz	r3, 85fa <usb_isr+0xfa>
    85f8:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    85fa:	01b8      	lsls	r0, r7, #6
    85fc:	d503      	bpl.n	8606 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    85fe:	4b5d      	ldr	r3, [pc, #372]	; (8774 <usb_isr+0x274>)
    8600:	681b      	ldr	r3, [r3, #0]
    8602:	b103      	cbz	r3, 8606 <usb_isr+0x106>
    8604:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    8606:	0779      	lsls	r1, r7, #29
    8608:	d508      	bpl.n	861c <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    860a:	4b56      	ldr	r3, [pc, #344]	; (8764 <usb_isr+0x264>)
    860c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    8610:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    8614:	d047      	beq.n	86a6 <usb_isr+0x1a6>
			usb_high_speed = 1;
    8616:	4b58      	ldr	r3, [pc, #352]	; (8778 <usb_isr+0x278>)
    8618:	2201      	movs	r2, #1
    861a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    861c:	4b51      	ldr	r3, [pc, #324]	; (8764 <usb_isr+0x264>)
    861e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    8622:	061a      	lsls	r2, r3, #24
    8624:	d50a      	bpl.n	863c <usb_isr+0x13c>
    8626:	063b      	lsls	r3, r7, #24
    8628:	d508      	bpl.n	863c <usb_isr+0x13c>
		if (usb_reboot_timer) {
    862a:	4a54      	ldr	r2, [pc, #336]	; (877c <usb_isr+0x27c>)
    862c:	7813      	ldrb	r3, [r2, #0]
    862e:	b12b      	cbz	r3, 863c <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    8630:	3b01      	subs	r3, #1
    8632:	b2db      	uxtb	r3, r3
    8634:	7013      	strb	r3, [r2, #0]
    8636:	2b00      	cmp	r3, #0
    8638:	f000 8272 	beq.w	8b20 <usb_isr+0x620>
}
    863c:	b003      	add	sp, #12
    863e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    8642:	494f      	ldr	r1, [pc, #316]	; (8780 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    8644:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    8648:	6808      	ldr	r0, [r1, #0]
    864a:	4203      	tst	r3, r0
    864c:	f040 81d1 	bne.w	89f2 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    8650:	4a46      	ldr	r2, [pc, #280]	; (876c <usb_isr+0x26c>)
    8652:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    8654:	401c      	ands	r4, r3
    8656:	d0b1      	beq.n	85bc <usb_isr+0xbc>
				while (tx) {
    8658:	ea5f 4814 	movs.w	r8, r4, lsr #16
    865c:	d010      	beq.n	8680 <usb_isr+0x180>
    865e:	4e42      	ldr	r6, [pc, #264]	; (8768 <usb_isr+0x268>)
					tx &= ~(1<<p);
    8660:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    8664:	fa98 f5a8 	rbit	r5, r8
    8668:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    866c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    8670:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8674:	3040      	adds	r0, #64	; 0x40
    8676:	f7ff fec5 	bl	8404 <run_callbacks>
				while (tx) {
    867a:	ea38 0805 	bics.w	r8, r8, r5
    867e:	d1f1      	bne.n	8664 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    8680:	b2a4      	uxth	r4, r4
				while(rx) {
    8682:	2c00      	cmp	r4, #0
    8684:	d09a      	beq.n	85bc <usb_isr+0xbc>
    8686:	4e38      	ldr	r6, [pc, #224]	; (8768 <usb_isr+0x268>)
					rx &= ~(1<<p);
    8688:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    868c:	fa94 f5a4 	rbit	r5, r4
    8690:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    8694:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    8698:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    869c:	f7ff feb2 	bl	8404 <run_callbacks>
				while(rx) {
    86a0:	43ac      	bics	r4, r5
    86a2:	d1f3      	bne.n	868c <usb_isr+0x18c>
    86a4:	e78a      	b.n	85bc <usb_isr+0xbc>
			usb_high_speed = 0;
    86a6:	4a34      	ldr	r2, [pc, #208]	; (8778 <usb_isr+0x278>)
    86a8:	7013      	strb	r3, [r2, #0]
    86aa:	e7b7      	b.n	861c <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    86ac:	2b80      	cmp	r3, #128	; 0x80
    86ae:	f47f af78 	bne.w	85a2 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    86b2:	4834      	ldr	r0, [pc, #208]	; (8784 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    86b4:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    86b6:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    86b8:	f7ff fec0 	bl	843c <endpoint0_transmit.constprop.0>
		return;
    86bc:	e775      	b.n	85aa <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    86be:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    86c2:	f000 810b 	beq.w	88dc <usb_isr+0x3dc>
    86c6:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    86ca:	2b01      	cmp	r3, #1
    86cc:	f63f af69 	bhi.w	85a2 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    86d0:	4b2d      	ldr	r3, [pc, #180]	; (8788 <usb_isr+0x288>)
    86d2:	685d      	ldr	r5, [r3, #4]
    86d4:	2d00      	cmp	r5, #0
    86d6:	f43f af64 	beq.w	85a2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    86da:	fa1f fc8c 	uxth.w	ip, ip
    86de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    86e2:	e004      	b.n	86ee <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    86e4:	691d      	ldr	r5, [r3, #16]
    86e6:	330c      	adds	r3, #12
    86e8:	2d00      	cmp	r5, #0
    86ea:	f43f af5a 	beq.w	85a2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    86ee:	881a      	ldrh	r2, [r3, #0]
    86f0:	4572      	cmp	r2, lr
    86f2:	d1f7      	bne.n	86e4 <usb_isr+0x1e4>
    86f4:	885a      	ldrh	r2, [r3, #2]
    86f6:	4562      	cmp	r2, ip
    86f8:	d1f4      	bne.n	86e4 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    86fa:	ea4f 221e 	mov.w	r2, lr, lsr #8
    86fe:	2a03      	cmp	r2, #3
    8700:	f000 81a5 	beq.w	8a4e <usb_isr+0x54e>
					datalen = list->length;
    8704:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    8706:	0c00      	lsrs	r0, r0, #16
    8708:	4282      	cmp	r2, r0
    870a:	bf28      	it	cs
    870c:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    870e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    8712:	f040 81a1 	bne.w	8a58 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    8716:	4b18      	ldr	r3, [pc, #96]	; (8778 <usb_isr+0x278>)
    8718:	491c      	ldr	r1, [pc, #112]	; (878c <usb_isr+0x28c>)
    871a:	7818      	ldrb	r0, [r3, #0]
    871c:	4b1c      	ldr	r3, [pc, #112]	; (8790 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    871e:	9201      	str	r2, [sp, #4]
    8720:	2800      	cmp	r0, #0
    8722:	bf18      	it	ne
    8724:	4619      	movne	r1, r3
    8726:	481b      	ldr	r0, [pc, #108]	; (8794 <usb_isr+0x294>)
    8728:	f7ff fc04 	bl	7f34 <memcpy>
    872c:	4d19      	ldr	r5, [pc, #100]	; (8794 <usb_isr+0x294>)
    872e:	9a01      	ldr	r2, [sp, #4]
    8730:	e1e1      	b.n	8af6 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    8732:	f242 2121 	movw	r1, #8737	; 0x2221
    8736:	428b      	cmp	r3, r1
    8738:	d07c      	beq.n	8834 <usb_isr+0x334>
    873a:	d933      	bls.n	87a4 <usb_isr+0x2a4>
    873c:	f242 3121 	movw	r1, #8993	; 0x2321
    8740:	428b      	cmp	r3, r1
    8742:	f000 8081 	beq.w	8848 <usb_isr+0x348>
    8746:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    874a:	428b      	cmp	r3, r1
    874c:	f47f af29 	bne.w	85a2 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    8750:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    8754:	b283      	uxth	r3, r0
    8756:	f47f af24 	bne.w	85a2 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    875a:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    875e:	f363 0c0f 	bfi	ip, r3, #0, #16
    8762:	e7b5      	b.n	86d0 <usb_isr+0x1d0>
    8764:	402e0000 	.word	0x402e0000
    8768:	20000000 	.word	0x20000000
    876c:	2001e634 	.word	0x2001e634
    8770:	2001ec7c 	.word	0x2001ec7c
    8774:	2001ec80 	.word	0x2001ec80
    8778:	2001eca6 	.word	0x2001eca6
    877c:	2001eca7 	.word	0x2001eca7
    8780:	2001e630 	.word	0x2001e630
    8784:	2001e750 	.word	0x2001e750
    8788:	200083d8 	.word	0x200083d8
    878c:	6000279c 	.word	0x6000279c
    8790:	60002800 	.word	0x60002800
    8794:	20200800 	.word	0x20200800
    8798:	2001e628 	.word	0x2001e628
    879c:	b8c6cf5d 	.word	0xb8c6cf5d
    87a0:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    87a4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    87a8:	d066      	beq.n	8878 <usb_isr+0x378>
    87aa:	f242 0121 	movw	r1, #8225	; 0x2021
    87ae:	428b      	cmp	r3, r1
    87b0:	f47f aef7 	bne.w	85a2 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    87b4:	0c03      	lsrs	r3, r0, #16
    87b6:	2b07      	cmp	r3, #7
    87b8:	f47f aef3 	bne.w	85a2 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    87bc:	4bb2      	ldr	r3, [pc, #712]	; (8a88 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    87be:	49b3      	ldr	r1, [pc, #716]	; (8a8c <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    87c0:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    87c2:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    87c4:	49b2      	ldr	r1, [pc, #712]	; (8a90 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    87c6:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    87c8:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    87cc:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    87d0:	2201      	movs	r2, #1
    87d2:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    87d4:	4aaf      	ldr	r2, [pc, #700]	; (8a94 <usb_isr+0x594>)
    87d6:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    87d8:	4aaf      	ldr	r2, [pc, #700]	; (8a98 <usb_isr+0x598>)
    87da:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    87dc:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    87e0:	f041 0101 	orr.w	r1, r1, #1
    87e4:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    87e8:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    87ec:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    87f0:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    87f2:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    87f4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    87f8:	2b00      	cmp	r3, #0
    87fa:	d1fb      	bne.n	87f4 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    87fc:	4aa7      	ldr	r2, [pc, #668]	; (8a9c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    87fe:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8800:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    8802:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8804:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8806:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8808:	f248 0380 	movw	r3, #32896	; 0x8080
    880c:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    880e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8812:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8816:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    881a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    881e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8826:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    882a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    882e:	2b00      	cmp	r3, #0
    8830:	d1fb      	bne.n	882a <usb_isr+0x32a>
    8832:	e6ba      	b.n	85aa <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    8834:	b280      	uxth	r0, r0
    8836:	b938      	cbnz	r0, 8848 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8838:	4b99      	ldr	r3, [pc, #612]	; (8aa0 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    883a:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    883e:	6819      	ldr	r1, [r3, #0]
    8840:	4b98      	ldr	r3, [pc, #608]	; (8aa4 <usb_isr+0x5a4>)
    8842:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    8844:	4b98      	ldr	r3, [pc, #608]	; (8aa8 <usb_isr+0x5a8>)
    8846:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    8848:	4b94      	ldr	r3, [pc, #592]	; (8a9c <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    884a:	2200      	movs	r2, #0
    884c:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    884e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    8850:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8852:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8854:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8856:	2280      	movs	r2, #128	; 0x80
    8858:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    885a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    885e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8862:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    886a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    886e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8872:	2b00      	cmp	r3, #0
    8874:	d1fb      	bne.n	886e <usb_isr+0x36e>
    8876:	e698      	b.n	85aa <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    8878:	f3c2 4207 	ubfx	r2, r2, #16, #8
    887c:	4b8b      	ldr	r3, [pc, #556]	; (8aac <usb_isr+0x5ac>)
    887e:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8880:	4b8b      	ldr	r3, [pc, #556]	; (8ab0 <usb_isr+0x5b0>)
    8882:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8886:	4b8b      	ldr	r3, [pc, #556]	; (8ab4 <usb_isr+0x5b4>)
    8888:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    888c:	4b8a      	ldr	r3, [pc, #552]	; (8ab8 <usb_isr+0x5b8>)
    888e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    8892:	f000 fbd5 	bl	9040 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    8896:	2280      	movs	r2, #128	; 0x80
    8898:	4629      	mov	r1, r5
    889a:	4888      	ldr	r0, [pc, #544]	; (8abc <usb_isr+0x5bc>)
    889c:	f003 f816 	bl	b8cc <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    88a0:	4b87      	ldr	r3, [pc, #540]	; (8ac0 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    88a2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    88a4:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    88a8:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    88ac:	4b7b      	ldr	r3, [pc, #492]	; (8a9c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    88ae:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    88b0:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    88b2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    88b4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    88b6:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    88b8:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    88ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    88be:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    88c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    88c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    88ca:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    88ce:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    88d2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    88d6:	2b00      	cmp	r3, #0
    88d8:	d1fb      	bne.n	88d2 <usb_isr+0x3d2>
    88da:	e666      	b.n	85aa <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    88dc:	4b6f      	ldr	r3, [pc, #444]	; (8a9c <usb_isr+0x59c>)
    88de:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    88e0:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    88e2:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    88e4:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    88e6:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    88e8:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    88ea:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    88ec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    88f0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    88f4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    88f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    88fc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8900:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8904:	2b00      	cmp	r3, #0
    8906:	d1fb      	bne.n	8900 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8908:	0c13      	lsrs	r3, r2, #16
    890a:	065b      	lsls	r3, r3, #25
    890c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8910:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    8914:	e649      	b.n	85aa <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    8916:	4b65      	ldr	r3, [pc, #404]	; (8aac <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    8918:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    891a:	486a      	ldr	r0, [pc, #424]	; (8ac4 <usb_isr+0x5c4>)
    891c:	781b      	ldrb	r3, [r3, #0]
    891e:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    8920:	f7ff fd8c 	bl	843c <endpoint0_transmit.constprop.0>
		return;
    8924:	e641      	b.n	85aa <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    8926:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    8928:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    892c:	f47f ae39 	bne.w	85a2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    8930:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8934:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    8938:	4a62      	ldr	r2, [pc, #392]	; (8ac4 <usb_isr+0x5c4>)
    893a:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    893c:	0618      	lsls	r0, r3, #24
    893e:	f100 809e 	bmi.w	8a7e <usb_isr+0x57e>
    8942:	07cb      	lsls	r3, r1, #31
    8944:	d501      	bpl.n	894a <usb_isr+0x44a>
			reply_buffer[0] = 1;
    8946:	2301      	movs	r3, #1
    8948:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    894a:	2102      	movs	r1, #2
    894c:	485d      	ldr	r0, [pc, #372]	; (8ac4 <usb_isr+0x5c4>)
    894e:	f7ff fd75 	bl	843c <endpoint0_transmit.constprop.0>
		return;
    8952:	e62a      	b.n	85aa <usb_isr+0xaa>
		if (endpoint > 7) break;
    8954:	f010 0f78 	tst.w	r0, #120	; 0x78
    8958:	b283      	uxth	r3, r0
    895a:	f47f ae22 	bne.w	85a2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    895e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8962:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8966:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    896a:	bf14      	ite	ne
    896c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8970:	f043 0301 	orreq.w	r3, r3, #1
    8974:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8978:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    897a:	4b48      	ldr	r3, [pc, #288]	; (8a9c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    897c:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    897e:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8980:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8982:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8984:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8986:	2280      	movs	r2, #128	; 0x80
    8988:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    898a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    898e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8992:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    899a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    899e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    89a2:	2b00      	cmp	r3, #0
    89a4:	d1fb      	bne.n	899e <usb_isr+0x49e>
    89a6:	e600      	b.n	85aa <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    89a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    89ac:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    89b0:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    89b4:	bf14      	ite	ne
    89b6:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    89ba:	f023 0301 	biceq.w	r3, r3, #1
    89be:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    89c2:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    89c4:	4b35      	ldr	r3, [pc, #212]	; (8a9c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    89c6:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    89c8:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    89ca:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    89cc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    89ce:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    89d0:	2280      	movs	r2, #128	; 0x80
    89d2:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    89d4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    89d8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    89dc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    89e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    89e4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    89e8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    89ec:	2b00      	cmp	r3, #0
    89ee:	d1fb      	bne.n	89e8 <usb_isr+0x4e8>
    89f0:	e5db      	b.n	85aa <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    89f2:	2000      	movs	r0, #0
    89f4:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    89f6:	4926      	ldr	r1, [pc, #152]	; (8a90 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    89f8:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    89fa:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    89fc:	f242 0121 	movw	r1, #8225	; 0x2021
    8a00:	428c      	cmp	r4, r1
    8a02:	f47f ae25 	bne.w	8650 <usb_isr+0x150>
    8a06:	b280      	uxth	r0, r0
    8a08:	2800      	cmp	r0, #0
    8a0a:	f47f ae21 	bne.w	8650 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8a0e:	492e      	ldr	r1, [pc, #184]	; (8ac8 <usb_isr+0x5c8>)
    8a10:	4c2e      	ldr	r4, [pc, #184]	; (8acc <usb_isr+0x5cc>)
    8a12:	c903      	ldmia	r1, {r0, r1}
    8a14:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    8a16:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8a18:	ea4f 4111 	mov.w	r1, r1, lsr #16
    8a1c:	6020      	str	r0, [r4, #0]
    8a1e:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    8a20:	f47f ae16 	bne.w	8650 <usb_isr+0x150>
	__disable_irq();
    8a24:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    8a26:	482a      	ldr	r0, [pc, #168]	; (8ad0 <usb_isr+0x5d0>)
    8a28:	7801      	ldrb	r1, [r0, #0]
    8a2a:	f041 0108 	orr.w	r1, r1, #8
    8a2e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    8a30:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    8a34:	060d      	lsls	r5, r1, #24
    8a36:	d405      	bmi.n	8a44 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8a38:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8a3a:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8a3c:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8a40:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    8a44:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    8a46:	4a23      	ldr	r2, [pc, #140]	; (8ad4 <usb_isr+0x5d4>)
    8a48:	2150      	movs	r1, #80	; 0x50
    8a4a:	7011      	strb	r1, [r2, #0]
    8a4c:	e600      	b.n	8650 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    8a4e:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    8a50:	782a      	ldrb	r2, [r5, #0]
    8a52:	4282      	cmp	r2, r0
    8a54:	bf28      	it	cs
    8a56:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    8a58:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    8a5c:	d144      	bne.n	8ae8 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    8a5e:	4b1e      	ldr	r3, [pc, #120]	; (8ad8 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8a60:	4d1e      	ldr	r5, [pc, #120]	; (8adc <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    8a62:	7818      	ldrb	r0, [r3, #0]
    8a64:	491e      	ldr	r1, [pc, #120]	; (8ae0 <usb_isr+0x5e0>)
    8a66:	4b1f      	ldr	r3, [pc, #124]	; (8ae4 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8a68:	9201      	str	r2, [sp, #4]
    8a6a:	2800      	cmp	r0, #0
    8a6c:	bf18      	it	ne
    8a6e:	4619      	movne	r1, r3
    8a70:	4628      	mov	r0, r5
    8a72:	f7ff fa5f 	bl	7f34 <memcpy>
					usb_descriptor_buffer[1] = 7;
    8a76:	2307      	movs	r3, #7
    8a78:	706b      	strb	r3, [r5, #1]
    8a7a:	9a01      	ldr	r2, [sp, #4]
    8a7c:	e03b      	b.n	8af6 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8a7e:	03c9      	lsls	r1, r1, #15
    8a80:	f53f af61 	bmi.w	8946 <usb_isr+0x446>
    8a84:	e761      	b.n	894a <usb_isr+0x44a>
    8a86:	bf00      	nop
    8a88:	20008ee0 	.word	0x20008ee0
    8a8c:	2001f628 	.word	0x2001f628
    8a90:	2000c080 	.word	0x2000c080
    8a94:	00070080 	.word	0x00070080
    8a98:	20020628 	.word	0x20020628
    8a9c:	20008ec0 	.word	0x20008ec0
    8aa0:	2001ec58 	.word	0x2001ec58
    8aa4:	2001ec78 	.word	0x2001ec78
    8aa8:	2001eca4 	.word	0x2001eca4
    8aac:	2001eca5 	.word	0x2001eca5
    8ab0:	00cc0002 	.word	0x00cc0002
    8ab4:	000200c8 	.word	0x000200c8
    8ab8:	00c80002 	.word	0x00c80002
    8abc:	20000080 	.word	0x20000080
    8ac0:	74d59319 	.word	0x74d59319
    8ac4:	2001e750 	.word	0x2001e750
    8ac8:	2001e628 	.word	0x2001e628
    8acc:	2001ec70 	.word	0x2001ec70
    8ad0:	2001eca0 	.word	0x2001eca0
    8ad4:	2001eca7 	.word	0x2001eca7
    8ad8:	2001eca6 	.word	0x2001eca6
    8adc:	20200800 	.word	0x20200800
    8ae0:	60002800 	.word	0x60002800
    8ae4:	6000279c 	.word	0x6000279c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    8ae8:	4629      	mov	r1, r5
    8aea:	4d10      	ldr	r5, [pc, #64]	; (8b2c <usb_isr+0x62c>)
    8aec:	9201      	str	r2, [sp, #4]
    8aee:	4628      	mov	r0, r5
    8af0:	f7ff fa20 	bl	7f34 <memcpy>
    8af4:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8af6:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8afa:	4415      	add	r5, r2
	asm("dsb");
    8afc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8b00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8b04:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    8b08:	3320      	adds	r3, #32
	} while (location < end_addr);
    8b0a:	429d      	cmp	r5, r3
    8b0c:	d8fa      	bhi.n	8b04 <usb_isr+0x604>
	asm("dsb");
    8b0e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8b12:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    8b16:	4805      	ldr	r0, [pc, #20]	; (8b2c <usb_isr+0x62c>)
    8b18:	4611      	mov	r1, r2
    8b1a:	f7ff fc8f 	bl	843c <endpoint0_transmit.constprop.0>
				return;
    8b1e:	e544      	b.n	85aa <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    8b20:	2003      	movs	r0, #3
    8b22:	f7ff fcd7 	bl	84d4 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    8b26:	f00b fc53 	bl	143d0 <___reboot_Teensyduino__veneer>
    8b2a:	bf00      	nop
    8b2c:	20200800 	.word	0x20200800

00008b30 <usb_config_rx>:
{
    8b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b34:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8b36:	1e83      	subs	r3, r0, #2
    8b38:	2b02      	cmp	r3, #2
    8b3a:	d901      	bls.n	8b40 <usb_config_rx+0x10>
}
    8b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8b40:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8b90 <usb_config_rx+0x60>
    8b44:	4615      	mov	r5, r2
    8b46:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    8b48:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8b4a:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    8b4e:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8b50:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    8b54:	2100      	movs	r1, #0
    8b56:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8b5a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    8b5c:	f002 feb6 	bl	b8cc <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8b60:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    8b64:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8b66:	0952      	lsrs	r2, r2, #5
    8b68:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    8b6c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    8b70:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8b74:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    8b78:	2f00      	cmp	r7, #0
    8b7a:	d0df      	beq.n	8b3c <usb_config_rx+0xc>
    8b7c:	4a03      	ldr	r2, [pc, #12]	; (8b8c <usb_config_rx+0x5c>)
    8b7e:	40b3      	lsls	r3, r6
    8b80:	6811      	ldr	r1, [r2, #0]
    8b82:	430b      	orrs	r3, r1
    8b84:	6013      	str	r3, [r2, #0]
}
    8b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b8a:	bf00      	nop
    8b8c:	2001e634 	.word	0x2001e634
    8b90:	20000000 	.word	0x20000000

00008b94 <usb_config_tx>:
{
    8b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b98:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8b9a:	1e81      	subs	r1, r0, #2
    8b9c:	2902      	cmp	r1, #2
    8b9e:	d901      	bls.n	8ba4 <usb_config_tx+0x10>
}
    8ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8ba4:	01c7      	lsls	r7, r0, #7
    8ba6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8bf4 <usb_config_tx+0x60>
    8baa:	4692      	mov	sl, r2
    8bac:	4604      	mov	r4, r0
    8bae:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    8bb0:	223c      	movs	r2, #60	; 0x3c
    8bb2:	2100      	movs	r1, #0
    8bb4:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8bb6:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8bba:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    8bbc:	f108 0004 	add.w	r0, r8, #4
    8bc0:	f002 fe84 	bl	b8cc <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8bc4:	faba f28a 	clz	r2, sl
    8bc8:	0952      	lsrs	r2, r2, #5
    8bca:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    8bce:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    8bd2:	2201      	movs	r2, #1
	qh->callback_function = callback;
    8bd4:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8bd8:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    8bdc:	2e00      	cmp	r6, #0
    8bde:	d0df      	beq.n	8ba0 <usb_config_tx+0xc>
    8be0:	4b03      	ldr	r3, [pc, #12]	; (8bf0 <usb_config_tx+0x5c>)
    8be2:	3410      	adds	r4, #16
    8be4:	6819      	ldr	r1, [r3, #0]
    8be6:	40a2      	lsls	r2, r4
    8be8:	430a      	orrs	r2, r1
    8bea:	601a      	str	r2, [r3, #0]
}
    8bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8bf0:	2001e634 	.word	0x2001e634
    8bf4:	20000000 	.word	0x20000000

00008bf8 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    8bf8:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    8bfa:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    8bfc:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    8bfe:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    8c02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    8c06:	b410      	push	{r4}
	transfer->next = 1;
    8c08:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    8c0a:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    8c0c:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    8c10:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    8c12:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    8c16:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    8c1a:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    8c1c:	6181      	str	r1, [r0, #24]
}
    8c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    8c22:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    8c26:	4770      	bx	lr

00008c28 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8c28:	1e83      	subs	r3, r0, #2
{
    8c2a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8c2c:	2b02      	cmp	r3, #2
    8c2e:	d900      	bls.n	8c32 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    8c30:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8c32:	4b06      	ldr	r3, [pc, #24]	; (8c4c <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    8c34:	f100 0110 	add.w	r1, r0, #16
    8c38:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8c3c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    8c40:	fa0c f101 	lsl.w	r1, ip, r1
    8c44:	3040      	adds	r0, #64	; 0x40
    8c46:	f7ff bb99 	b.w	837c <schedule_transfer>
    8c4a:	bf00      	nop
    8c4c:	20000000 	.word	0x20000000

00008c50 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8c50:	1e83      	subs	r3, r0, #2
{
    8c52:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8c54:	2b02      	cmp	r3, #2
    8c56:	d900      	bls.n	8c5a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    8c58:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    8c5a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    8c5c:	4b02      	ldr	r3, [pc, #8]	; (8c68 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    8c5e:	4081      	lsls	r1, r0
    8c60:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    8c64:	f7ff bb8a 	b.w	837c <schedule_transfer>
    8c68:	20000000 	.word	0x20000000

00008c6c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    8c6c:	6840      	ldr	r0, [r0, #4]
#endif
}
    8c6e:	4770      	bx	lr

00008c70 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8c70:	4a12      	ldr	r2, [pc, #72]	; (8cbc <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    8c72:	4b13      	ldr	r3, [pc, #76]	; (8cc0 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8c74:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    8c78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    8c7c:	4298      	cmp	r0, r3
{
    8c7e:	b510      	push	{r4, lr}
    8c80:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    8c82:	d202      	bcs.n	8c8a <usb_init_serialnumber+0x1a>
    8c84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8c88:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    8c8a:	4c0e      	ldr	r4, [pc, #56]	; (8cc4 <usb_init_serialnumber+0x54>)
    8c8c:	a901      	add	r1, sp, #4
    8c8e:	220a      	movs	r2, #10
    8c90:	f7ff f9ec 	bl	806c <ultoa>
	for (i=0; i<10; i++) {
    8c94:	a901      	add	r1, sp, #4
    8c96:	2300      	movs	r3, #0
    8c98:	4620      	mov	r0, r4
		char c = buf[i];
    8c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    8c9e:	3301      	adds	r3, #1
		if (!c) break;
    8ca0:	b13a      	cbz	r2, 8cb2 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    8ca2:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    8ca4:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    8ca8:	d1f7      	bne.n	8c9a <usb_init_serialnumber+0x2a>
    8caa:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    8cac:	7023      	strb	r3, [r4, #0]
}
    8cae:	b004      	add	sp, #16
    8cb0:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    8cb2:	005b      	lsls	r3, r3, #1
    8cb4:	b2db      	uxtb	r3, r3
    8cb6:	7023      	strb	r3, [r4, #0]
}
    8cb8:	b004      	add	sp, #16
    8cba:	bd10      	pop	{r4, pc}
    8cbc:	401f4400 	.word	0x401f4400
    8cc0:	00989680 	.word	0x00989680
    8cc4:	20008bb4 	.word	0x20008bb4

00008cc8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    8cc8:	f000 bace 	b.w	9268 <usb_serial_flush_input>

00008ccc <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    8ccc:	f000 bac0 	b.w	9250 <usb_serial_available>

00008cd0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    8cd0:	f000 bb5c 	b.w	938c <usb_serial_flush_output>

00008cd4 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    8cd4:	f000 bb32 	b.w	933c <usb_serial_write_buffer_free>

00008cd8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8cd8:	4608      	mov	r0, r1
    8cda:	4611      	mov	r1, r2
    8cdc:	f000 bb22 	b.w	9324 <usb_serial_write>

00008ce0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    8ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8ce2:	4c14      	ldr	r4, [pc, #80]	; (8d34 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8ce4:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8ce8:	4e13      	ldr	r6, [pc, #76]	; (8d38 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8cea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8cee:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8cf2:	4f12      	ldr	r7, [pc, #72]	; (8d3c <rx_queue_transfer+0x5c>)
    8cf4:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    8cf8:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8cfa:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8cfe:	4621      	mov	r1, r4
    8d00:	883a      	ldrh	r2, [r7, #0]
    8d02:	4630      	mov	r0, r6
    8d04:	f7ff ff78 	bl	8bf8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    8d08:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    8d0a:	4423      	add	r3, r4
	asm("dsb");
    8d0c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    8d10:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    8d14:	3420      	adds	r4, #32
	} while (location < end_addr);
    8d16:	42a3      	cmp	r3, r4
    8d18:	d8fa      	bhi.n	8d10 <rx_queue_transfer+0x30>
	asm("dsb");
    8d1a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8d1e:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    8d22:	2003      	movs	r0, #3
    8d24:	4631      	mov	r1, r6
    8d26:	f7ff ff93 	bl	8c50 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8d2e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    8d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8d34:	20008f00 	.word	0x20008f00
    8d38:	20009f00 	.word	0x20009f00
    8d3c:	2001ec8e 	.word	0x2001ec8e

00008d40 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8d40:	4b24      	ldr	r3, [pc, #144]	; (8dd4 <rx_event+0x94>)
{
    8d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8d46:	881c      	ldrh	r4, [r3, #0]
    8d48:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    8d4a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8d4c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    8d50:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    8d52:	2c00      	cmp	r4, #0
    8d54:	dd24      	ble.n	8da0 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    8d56:	4920      	ldr	r1, [pc, #128]	; (8dd8 <rx_event+0x98>)
		if (head != rx_tail) {
    8d58:	4820      	ldr	r0, [pc, #128]	; (8ddc <rx_event+0x9c>)
		uint32_t head = rx_head;
    8d5a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    8d5c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    8d5e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    8d60:	4e1f      	ldr	r6, [pc, #124]	; (8de0 <rx_event+0xa0>)
		if (head != rx_tail) {
    8d62:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    8d64:	481f      	ldr	r0, [pc, #124]	; (8de4 <rx_event+0xa4>)
		if (head != rx_tail) {
    8d66:	d007      	beq.n	8d78 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    8d68:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    8d6c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8d70:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    8d74:	4294      	cmp	r4, r2
    8d76:	d918      	bls.n	8daa <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    8d78:	3301      	adds	r3, #1
		rx_index[i] = 0;
    8d7a:	2200      	movs	r2, #0
		rx_count[i] = len;
    8d7c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    8d80:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    8d82:	4e19      	ldr	r6, [pc, #100]	; (8de8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    8d84:	bf88      	it	hi
    8d86:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    8d88:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    8d8c:	bf98      	it	ls
    8d8e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    8d90:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    8d92:	4b16      	ldr	r3, [pc, #88]	; (8dec <rx_event+0xac>)
		rx_head = head;
    8d94:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    8d96:	681a      	ldr	r2, [r3, #0]
    8d98:	4414      	add	r4, r2
    8d9a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    8d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    8da0:	4628      	mov	r0, r5
}
    8da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    8da6:	f7ff bf9b 	b.w	8ce0 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8daa:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    8dae:	4910      	ldr	r1, [pc, #64]	; (8df0 <rx_event+0xb0>)
    8db0:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    8db2:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8db4:	4408      	add	r0, r1
    8db6:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    8dba:	f7ff f8bb 	bl	7f34 <memcpy>
				rx_available += len;
    8dbe:	4a0b      	ldr	r2, [pc, #44]	; (8dec <rx_event+0xac>)
				rx_queue_transfer(i);
    8dc0:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    8dc2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    8dc6:	6813      	ldr	r3, [r2, #0]
    8dc8:	4423      	add	r3, r4
}
    8dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    8dce:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    8dd0:	f7ff bf86 	b.w	8ce0 <rx_queue_transfer>
    8dd4:	2001ec8e 	.word	0x2001ec8e
    8dd8:	2001ec9e 	.word	0x2001ec9e
    8ddc:	2001ec9f 	.word	0x2001ec9f
    8de0:	2001e75c 	.word	0x2001e75c
    8de4:	2001e77c 	.word	0x2001e77c
    8de8:	2001e76c 	.word	0x2001e76c
    8dec:	2001e758 	.word	0x2001e758
    8df0:	20008f00 	.word	0x20008f00

00008df4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    8df4:	4b1d      	ldr	r3, [pc, #116]	; (8e6c <usb_serial_flush_callback+0x78>)
    8df6:	781a      	ldrb	r2, [r3, #0]
    8df8:	2a00      	cmp	r2, #0
    8dfa:	d136      	bne.n	8e6a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    8dfc:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    8e00:	4a1b      	ldr	r2, [pc, #108]	; (8e70 <usb_serial_flush_callback+0x7c>)
    8e02:	7812      	ldrb	r2, [r2, #0]
    8e04:	b38a      	cbz	r2, 8e6a <usb_serial_flush_callback+0x76>
{
    8e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    8e0a:	4d1a      	ldr	r5, [pc, #104]	; (8e74 <usb_serial_flush_callback+0x80>)
    8e0c:	882a      	ldrh	r2, [r5, #0]
    8e0e:	b352      	cbz	r2, 8e66 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8e10:	4e19      	ldr	r6, [pc, #100]	; (8e78 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8e12:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    8e16:	4f19      	ldr	r7, [pc, #100]	; (8e7c <usb_serial_flush_callback+0x88>)
    8e18:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8e1a:	4c19      	ldr	r4, [pc, #100]	; (8e80 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    8e1c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8e20:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8e24:	4642      	mov	r2, r8
    8e26:	4638      	mov	r0, r7
    8e28:	4621      	mov	r1, r4
    8e2a:	f7ff fee5 	bl	8bf8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    8e2e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    8e32:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8e36:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8e3a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    8e3e:	3420      	adds	r4, #32
	} while (location < end_addr);
    8e40:	42a2      	cmp	r2, r4
    8e42:	d8fa      	bhi.n	8e3a <usb_serial_flush_callback+0x46>
	asm("dsb");
    8e44:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8e48:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8e4c:	2004      	movs	r0, #4
    8e4e:	4639      	mov	r1, r7
    8e50:	f7ff feea 	bl	8c28 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8e54:	7833      	ldrb	r3, [r6, #0]
    8e56:	3301      	adds	r3, #1
    8e58:	b2db      	uxtb	r3, r3
    8e5a:	2b03      	cmp	r3, #3
    8e5c:	bf88      	it	hi
    8e5e:	2300      	movhi	r3, #0
    8e60:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    8e62:	2300      	movs	r3, #0
    8e64:	802b      	strh	r3, [r5, #0]
}
    8e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e6a:	4770      	bx	lr
    8e6c:	2001eca3 	.word	0x2001eca3
    8e70:	2001eca5 	.word	0x2001eca5
    8e74:	2001ec90 	.word	0x2001ec90
    8e78:	2001eca2 	.word	0x2001eca2
    8e7c:	2000a000 	.word	0x2000a000
    8e80:	2000a080 	.word	0x2000a080

00008e84 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    8e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e88:	b085      	sub	sp, #20
	while (size > 0) {
    8e8a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    8e8e:	2900      	cmp	r1, #0
    8e90:	f000 80bf 	beq.w	9012 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    8e94:	2300      	movs	r3, #0
    8e96:	4c60      	ldr	r4, [pc, #384]	; (9018 <usb_serial_write.part.0+0x194>)
    8e98:	f8df 8198 	ldr.w	r8, [pc, #408]	; 9034 <usb_serial_write.part.0+0x1b0>
    8e9c:	f8df a198 	ldr.w	sl, [pc, #408]	; 9038 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    8ea0:	4f5e      	ldr	r7, [pc, #376]	; (901c <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    8ea2:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    8ea4:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    8ea6:	4a5e      	ldr	r2, [pc, #376]	; (9020 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    8ea8:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    8eaa:	4b5e      	ldr	r3, [pc, #376]	; (9024 <usb_serial_write.part.0+0x1a0>)
    8eac:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    8eae:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    8eb2:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	f040 80a7 	bne.w	900a <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    8ebc:	461e      	mov	r6, r3
		int waiting=0;
    8ebe:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    8ec0:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    8ec2:	4648      	mov	r0, r9
    8ec4:	f7ff fed2 	bl	8c6c <usb_transfer_status>
			if (!(status & 0x80)) {
    8ec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    8ecc:	f000 808c 	beq.w	8fe8 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    8ed0:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    8ed4:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    8ed8:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    8edc:	b905      	cbnz	r5, 8ee0 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    8ede:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    8ee0:	2b00      	cmp	r3, #0
    8ee2:	d17d      	bne.n	8fe0 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    8ee4:	683b      	ldr	r3, [r7, #0]
    8ee6:	1b9b      	subs	r3, r3, r6
    8ee8:	2b78      	cmp	r3, #120	; 0x78
    8eea:	f200 8087 	bhi.w	8ffc <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    8eee:	4b4e      	ldr	r3, [pc, #312]	; (9028 <usb_serial_write.part.0+0x1a4>)
    8ef0:	781b      	ldrb	r3, [r3, #0]
    8ef2:	2b00      	cmp	r3, #0
    8ef4:	d074      	beq.n	8fe0 <usb_serial_write.part.0+0x15c>
			yield();
    8ef6:	f000 fa93 	bl	9420 <yield>
			tx_noautoflush = 1;
    8efa:	2201      	movs	r2, #1
		while (!tx_available) {
    8efc:	f8b8 3000 	ldrh.w	r3, [r8]
    8f00:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    8f02:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    8f04:	2b00      	cmp	r3, #0
    8f06:	d0dc      	beq.n	8ec2 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8f08:	4a46      	ldr	r2, [pc, #280]	; (9024 <usb_serial_write.part.0+0x1a0>)
    8f0a:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    8f0e:	7811      	ldrb	r1, [r2, #0]
    8f10:	461a      	mov	r2, r3
    8f12:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    8f16:	4d45      	ldr	r5, [pc, #276]	; (902c <usb_serial_write.part.0+0x1a8>)
    8f18:	02c9      	lsls	r1, r1, #11
    8f1a:	4428      	add	r0, r5
		if (size >= tx_available) {
    8f1c:	9d01      	ldr	r5, [sp, #4]
    8f1e:	4295      	cmp	r5, r2
    8f20:	d217      	bcs.n	8f52 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    8f22:	9303      	str	r3, [sp, #12]
    8f24:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    8f28:	462a      	mov	r2, r5
    8f2a:	f7ff f803 	bl	7f34 <memcpy>
			tx_available -= size;
    8f2e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8f30:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    8f34:	1b5b      	subs	r3, r3, r5
    8f36:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8f3a:	4b3d      	ldr	r3, [pc, #244]	; (9030 <usb_serial_write.part.0+0x1ac>)
    8f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    8f40:	f3bf 8f4f 	dsb	sy
			sent += size;
    8f44:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    8f46:	2300      	movs	r3, #0
			sent += size;
    8f48:	4428      	add	r0, r5
		tx_noautoflush = 0;
    8f4a:	7023      	strb	r3, [r4, #0]
}
    8f4c:	b005      	add	sp, #20
    8f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8f52:	4b36      	ldr	r3, [pc, #216]	; (902c <usb_serial_write.part.0+0x1a8>)
    8f54:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    8f56:	9902      	ldr	r1, [sp, #8]
    8f58:	f7fe ffec 	bl	7f34 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    8f5c:	2300      	movs	r3, #0
    8f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8f62:	4629      	mov	r1, r5
    8f64:	4648      	mov	r0, r9
    8f66:	f7ff fe47 	bl	8bf8 <usb_prepare_transfer>
	asm("dsb");
    8f6a:	f3bf 8f4f 	dsb	sy
    8f6e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    8f72:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    8f76:	4293      	cmp	r3, r2
    8f78:	bf34      	ite	cc
    8f7a:	2301      	movcc	r3, #1
    8f7c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    8f7e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    8f82:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    8f86:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    8f8a:	3520      	adds	r5, #32
	} while (location < end_addr);
    8f8c:	42ab      	cmp	r3, r5
    8f8e:	d1fa      	bne.n	8f86 <usb_serial_write.part.0+0x102>
	asm("dsb");
    8f90:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8f94:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    8f98:	2004      	movs	r0, #4
    8f9a:	4649      	mov	r1, r9
    8f9c:	f7ff fe44 	bl	8c28 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    8fa0:	4a20      	ldr	r2, [pc, #128]	; (9024 <usb_serial_write.part.0+0x1a0>)
    8fa2:	7813      	ldrb	r3, [r2, #0]
    8fa4:	3301      	adds	r3, #1
    8fa6:	b2db      	uxtb	r3, r3
    8fa8:	2b03      	cmp	r3, #3
    8faa:	bf84      	itt	hi
    8fac:	2300      	movhi	r3, #0
    8fae:	4a1d      	ldrhi	r2, [pc, #116]	; (9024 <usb_serial_write.part.0+0x1a0>)
    8fb0:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    8fb2:	f8b8 3000 	ldrh.w	r3, [r8]
    8fb6:	9a01      	ldr	r2, [sp, #4]
    8fb8:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    8fba:	9a00      	ldr	r2, [sp, #0]
    8fbc:	441a      	add	r2, r3
			size -= tx_available;
    8fbe:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    8fc0:	9200      	str	r2, [sp, #0]
			data += tx_available;
    8fc2:	9a02      	ldr	r2, [sp, #8]
    8fc4:	441a      	add	r2, r3
			tx_available = 0;
    8fc6:	2300      	movs	r3, #0
			data += tx_available;
    8fc8:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    8fca:	4a19      	ldr	r2, [pc, #100]	; (9030 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    8fcc:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    8fd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    8fd4:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    8fd8:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    8fda:	2900      	cmp	r1, #0
    8fdc:	f47f af62 	bne.w	8ea4 <usb_serial_write.part.0+0x20>
	return sent;
    8fe0:	9800      	ldr	r0, [sp, #0]
}
    8fe2:	b005      	add	sp, #20
    8fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    8fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8fec:	4b0d      	ldr	r3, [pc, #52]	; (9024 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    8fee:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8ff2:	7819      	ldrb	r1, [r3, #0]
				break;
    8ff4:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    8ff6:	f8a8 2000 	strh.w	r2, [r8]
				break;
    8ffa:	e78a      	b.n	8f12 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    8ffc:	2301      	movs	r3, #1
				return sent;
    8ffe:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    9000:	f88a 3000 	strb.w	r3, [sl]
}
    9004:	b005      	add	sp, #20
    9006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    900a:	461a      	mov	r2, r3
    900c:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    9010:	e77f      	b.n	8f12 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    9012:	9801      	ldr	r0, [sp, #4]
	return sent;
    9014:	e7e5      	b.n	8fe2 <usb_serial_write.part.0+0x15e>
    9016:	bf00      	nop
    9018:	2001eca3 	.word	0x2001eca3
    901c:	2001ec58 	.word	0x2001ec58
    9020:	2000a000 	.word	0x2000a000
    9024:	2001eca2 	.word	0x2001eca2
    9028:	2001eca5 	.word	0x2001eca5
    902c:	2000a080 	.word	0x2000a080
    9030:	402e0000 	.word	0x402e0000
    9034:	2001ec90 	.word	0x2001ec90
    9038:	2001eca1 	.word	0x2001eca1

0000903c <usb_serial_reset>:
}
    903c:	4770      	bx	lr
    903e:	bf00      	nop

00009040 <usb_serial_configure>:
	if (usb_high_speed) {
    9040:	4b2a      	ldr	r3, [pc, #168]	; (90ec <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9042:	2100      	movs	r1, #0
    9044:	2280      	movs	r2, #128	; 0x80
    9046:	482a      	ldr	r0, [pc, #168]	; (90f0 <usb_serial_configure+0xb0>)
{
    9048:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    904a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    904c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    904e:	4d29      	ldr	r5, [pc, #164]	; (90f4 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    9050:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    9052:	4e29      	ldr	r6, [pc, #164]	; (90f8 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    9054:	bf0c      	ite	eq
    9056:	2340      	moveq	r3, #64	; 0x40
    9058:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    905c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    905e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9060:	f002 fc34 	bl	b8cc <memset>
	tx_head = 0;
    9064:	4a25      	ldr	r2, [pc, #148]	; (90fc <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9066:	4621      	mov	r1, r4
	tx_available = 0;
    9068:	4b25      	ldr	r3, [pc, #148]	; (9100 <usb_serial_configure+0xc0>)
	tx_head = 0;
    906a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    906c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9070:	4824      	ldr	r0, [pc, #144]	; (9104 <usb_serial_configure+0xc4>)
	tx_available = 0;
    9072:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9074:	f002 fc2a 	bl	b8cc <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9078:	4a23      	ldr	r2, [pc, #140]	; (9108 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    907a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    907c:	4b23      	ldr	r3, [pc, #140]	; (910c <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    907e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    9080:	e9c2 4400 	strd	r4, r4, [r2]
    9084:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    9088:	4a21      	ldr	r2, [pc, #132]	; (9110 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    908a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    908e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    9090:	4a20      	ldr	r2, [pc, #128]	; (9114 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    9092:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    9096:	4b20      	ldr	r3, [pc, #128]	; (9118 <usb_serial_configure+0xd8>)
    9098:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    909a:	4623      	mov	r3, r4
	rx_available = 0;
    909c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    909e:	4622      	mov	r2, r4
    90a0:	f7ff fd78 	bl	8b94 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    90a4:	4622      	mov	r2, r4
    90a6:	8831      	ldrh	r1, [r6, #0]
    90a8:	2003      	movs	r0, #3
    90aa:	4b1c      	ldr	r3, [pc, #112]	; (911c <usb_serial_configure+0xdc>)
    90ac:	f7ff fd40 	bl	8b30 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    90b0:	4623      	mov	r3, r4
    90b2:	2201      	movs	r2, #1
    90b4:	8829      	ldrh	r1, [r5, #0]
    90b6:	2004      	movs	r0, #4
    90b8:	f7ff fd6c 	bl	8b94 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    90bc:	4620      	mov	r0, r4
    90be:	3401      	adds	r4, #1
    90c0:	f7ff fe0e 	bl	8ce0 <rx_queue_transfer>
    90c4:	2c08      	cmp	r4, #8
    90c6:	d1f9      	bne.n	90bc <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    90c8:	4b15      	ldr	r3, [pc, #84]	; (9120 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    90ca:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    90cc:	4815      	ldr	r0, [pc, #84]	; (9124 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    90ce:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    90d0:	4c15      	ldr	r4, [pc, #84]	; (9128 <usb_serial_configure+0xe8>)
    90d2:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    90d4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    90d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    90dc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    90e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    90e4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    90e8:	bd70      	pop	{r4, r5, r6, pc}
    90ea:	bf00      	nop
    90ec:	2001eca6 	.word	0x2001eca6
    90f0:	2000a000 	.word	0x2000a000
    90f4:	2001ec92 	.word	0x2001ec92
    90f8:	2001ec8e 	.word	0x2001ec8e
    90fc:	2001eca2 	.word	0x2001eca2
    9100:	2001ec90 	.word	0x2001ec90
    9104:	20009f00 	.word	0x20009f00
    9108:	2001e75c 	.word	0x2001e75c
    910c:	2001e76c 	.word	0x2001e76c
    9110:	2001ec9e 	.word	0x2001ec9e
    9114:	2001e758 	.word	0x2001e758
    9118:	2001ec9f 	.word	0x2001ec9f
    911c:	00008d41 	.word	0x00008d41
    9120:	402e0000 	.word	0x402e0000
    9124:	2001ec7c 	.word	0x2001ec7c
    9128:	00008df5 	.word	0x00008df5

0000912c <usb_serial_read>:
{
    912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9130:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9134:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    9138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 9204 <usb_serial_read+0xd8>
{
    913c:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    913e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    9142:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    9144:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    9148:	2900      	cmp	r1, #0
    914a:	d04f      	beq.n	91ec <usb_serial_read+0xc0>
    914c:	4680      	mov	r8, r0
    914e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    9150:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    9152:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 9208 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    9156:	4b26      	ldr	r3, [pc, #152]	; (91f0 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    9158:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    915c:	4925      	ldr	r1, [pc, #148]	; (91f4 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    915e:	781b      	ldrb	r3, [r3, #0]
    9160:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    9162:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    9166:	d03f      	beq.n	91e8 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    9168:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    916a:	4b23      	ldr	r3, [pc, #140]	; (91f8 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    916c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    916e:	bf28      	it	cs
    9170:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    9172:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    9174:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9178:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    917c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    917e:	4b1f      	ldr	r3, [pc, #124]	; (91fc <usb_serial_read+0xd0>)
    9180:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    9184:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    9188:	42aa      	cmp	r2, r5
    918a:	d21c      	bcs.n	91c6 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    918c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    9190:	4918      	ldr	r1, [pc, #96]	; (91f4 <usb_serial_read+0xc8>)
			rx_available -= len;
    9192:	4c1b      	ldr	r4, [pc, #108]	; (9200 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    9194:	4461      	add	r1, ip
    9196:	9201      	str	r2, [sp, #4]
    9198:	f7fe fecc 	bl	7f34 <memcpy>
			rx_available -= len;
    919c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    919e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    91a2:	4658      	mov	r0, fp
			rx_index[i] += len;
    91a4:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    91a6:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    91aa:	442a      	add	r2, r5
			rx_available -= len;
    91ac:	4439      	add	r1, r7
			rx_index[i] += len;
    91ae:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    91b2:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    91b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    91b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    91bc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    91c0:	b003      	add	sp, #12
    91c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    91c6:	462a      	mov	r2, r5
			count += avail;
    91c8:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    91ca:	f7fe feb3 	bl	7f34 <memcpy>
			rx_available -= avail;
    91ce:	490c      	ldr	r1, [pc, #48]	; (9200 <usb_serial_read+0xd4>)
			rx_tail = tail;
    91d0:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    91d2:	4630      	mov	r0, r6
			rx_available -= avail;
    91d4:	680a      	ldr	r2, [r1, #0]
			p += avail;
    91d6:	44a8      	add	r8, r5
			rx_available -= avail;
    91d8:	1b52      	subs	r2, r2, r5
    91da:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    91dc:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    91e0:	f7ff fd7e 	bl	8ce0 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    91e4:	45bb      	cmp	fp, r7
    91e6:	d8b6      	bhi.n	9156 <usb_serial_read+0x2a>
	return count;
    91e8:	4638      	mov	r0, r7
    91ea:	e7e3      	b.n	91b4 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    91ec:	4608      	mov	r0, r1
    91ee:	e7e1      	b.n	91b4 <usb_serial_read+0x88>
    91f0:	2001ec9e 	.word	0x2001ec9e
    91f4:	20008f00 	.word	0x20008f00
    91f8:	2001e77c 	.word	0x2001e77c
    91fc:	2001e75c 	.word	0x2001e75c
    9200:	2001e758 	.word	0x2001e758
    9204:	2001ec9f 	.word	0x2001ec9f
    9208:	2001e76c 	.word	0x2001e76c

0000920c <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    920c:	4b0b      	ldr	r3, [pc, #44]	; (923c <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    920e:	4a0c      	ldr	r2, [pc, #48]	; (9240 <usb_serial_peekchar+0x34>)
    9210:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    9212:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    9214:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    9216:	428a      	cmp	r2, r1
    9218:	d00d      	beq.n	9236 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    921a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    921c:	4809      	ldr	r0, [pc, #36]	; (9244 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    921e:	4a0a      	ldr	r2, [pc, #40]	; (9248 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    9220:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    9222:	490a      	ldr	r1, [pc, #40]	; (924c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    9224:	bf28      	it	cs
    9226:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    9228:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    922a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    922e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    9232:	5c58      	ldrb	r0, [r3, r1]
    9234:	4770      	bx	lr
	if (tail == rx_head) return -1;
    9236:	f04f 30ff 	mov.w	r0, #4294967295
}
    923a:	4770      	bx	lr
    923c:	2001ec9e 	.word	0x2001ec9e
    9240:	2001ec9f 	.word	0x2001ec9f
    9244:	2001e77c 	.word	0x2001e77c
    9248:	20008f00 	.word	0x20008f00
    924c:	2001e76c 	.word	0x2001e76c

00009250 <usb_serial_available>:
	uint32_t n = rx_available;
    9250:	4b04      	ldr	r3, [pc, #16]	; (9264 <usb_serial_available+0x14>)
{
    9252:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    9254:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    9256:	b10c      	cbz	r4, 925c <usb_serial_available+0xc>
}
    9258:	4620      	mov	r0, r4
    925a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    925c:	f000 f8e0 	bl	9420 <yield>
}
    9260:	4620      	mov	r0, r4
    9262:	bd10      	pop	{r4, pc}
    9264:	2001e758 	.word	0x2001e758

00009268 <usb_serial_flush_input>:
{
    9268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    926c:	4e14      	ldr	r6, [pc, #80]	; (92c0 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    926e:	4d15      	ldr	r5, [pc, #84]	; (92c4 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    9270:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    9272:	782a      	ldrb	r2, [r5, #0]
    9274:	4293      	cmp	r3, r2
    9276:	d021      	beq.n	92bc <usb_serial_flush_input+0x54>
    9278:	b2dc      	uxtb	r4, r3
    927a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 92cc <usb_serial_flush_input+0x64>
    927e:	f8df b050 	ldr.w	fp, [pc, #80]	; 92d0 <usb_serial_flush_input+0x68>
    9282:	f8df 8050 	ldr.w	r8, [pc, #80]	; 92d4 <usb_serial_flush_input+0x6c>
    9286:	4f10      	ldr	r7, [pc, #64]	; (92c8 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    9288:	3401      	adds	r4, #1
    928a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    928c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    9290:	d901      	bls.n	9296 <usb_serial_flush_input+0x2e>
    9292:	2400      	movs	r4, #0
    9294:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    9296:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    929a:	f8db 3000 	ldr.w	r3, [fp]
    929e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    92a2:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    92a6:	1a52      	subs	r2, r2, r1
    92a8:	1a9b      	subs	r3, r3, r2
    92aa:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    92ae:	f7ff fd17 	bl	8ce0 <rx_queue_transfer>
		rx_tail = tail;
    92b2:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    92b6:	782b      	ldrb	r3, [r5, #0]
    92b8:	42a3      	cmp	r3, r4
    92ba:	d1e5      	bne.n	9288 <usb_serial_flush_input+0x20>
}
    92bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92c0:	2001ec9f 	.word	0x2001ec9f
    92c4:	2001ec9e 	.word	0x2001ec9e
    92c8:	2001e76c 	.word	0x2001e76c
    92cc:	2001e77c 	.word	0x2001e77c
    92d0:	2001e758 	.word	0x2001e758
    92d4:	2001e75c 	.word	0x2001e75c

000092d8 <usb_serial_getchar>:
{
    92d8:	b500      	push	{lr}
    92da:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    92dc:	2101      	movs	r1, #1
    92de:	f10d 0007 	add.w	r0, sp, #7
    92e2:	f7ff ff23 	bl	912c <usb_serial_read>
    92e6:	b120      	cbz	r0, 92f2 <usb_serial_getchar+0x1a>
    92e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    92ec:	b003      	add	sp, #12
    92ee:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    92f2:	f04f 30ff 	mov.w	r0, #4294967295
    92f6:	e7f9      	b.n	92ec <usb_serial_getchar+0x14>

000092f8 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    92f8:	4b09      	ldr	r3, [pc, #36]	; (9320 <usb_serial_putchar+0x28>)
{
    92fa:	b500      	push	{lr}
    92fc:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    92fe:	781b      	ldrb	r3, [r3, #0]
{
    9300:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    9304:	b13b      	cbz	r3, 9316 <usb_serial_putchar+0x1e>
    9306:	2101      	movs	r1, #1
    9308:	f10d 0007 	add.w	r0, sp, #7
    930c:	f7ff fdba 	bl	8e84 <usb_serial_write.part.0>
}
    9310:	b003      	add	sp, #12
    9312:	f85d fb04 	ldr.w	pc, [sp], #4
    9316:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    931a:	b003      	add	sp, #12
    931c:	f85d fb04 	ldr.w	pc, [sp], #4
    9320:	2001eca5 	.word	0x2001eca5

00009324 <usb_serial_write>:
	if (!usb_configuration) return 0;
    9324:	4b04      	ldr	r3, [pc, #16]	; (9338 <usb_serial_write+0x14>)
    9326:	781b      	ldrb	r3, [r3, #0]
    9328:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    932c:	b10b      	cbz	r3, 9332 <usb_serial_write+0xe>
    932e:	f7ff bda9 	b.w	8e84 <usb_serial_write.part.0>
}
    9332:	4610      	mov	r0, r2
    9334:	4770      	bx	lr
    9336:	bf00      	nop
    9338:	2001eca5 	.word	0x2001eca5

0000933c <usb_serial_write_buffer_free>:
{
    933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    9340:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    9342:	f8df 8044 	ldr.w	r8, [pc, #68]	; 9388 <usb_serial_write_buffer_free+0x4c>
    9346:	2301      	movs	r3, #1
    9348:	4d0d      	ldr	r5, [pc, #52]	; (9380 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    934a:	4627      	mov	r7, r4
    934c:	4e0d      	ldr	r6, [pc, #52]	; (9384 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    934e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    9352:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9354:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    9356:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    9358:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    935a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    935e:	d005      	beq.n	936c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9360:	f7ff fc84 	bl	8c6c <usb_transfer_status>
    9364:	0603      	lsls	r3, r0, #24
    9366:	bf58      	it	pl
    9368:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    936c:	2c04      	cmp	r4, #4
    936e:	d1f0      	bne.n	9352 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    9370:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    9374:	2300      	movs	r3, #0
}
    9376:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    9378:	f888 3000 	strb.w	r3, [r8]
}
    937c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9380:	2000a000 	.word	0x2000a000
    9384:	2001eca2 	.word	0x2001eca2
    9388:	2001eca3 	.word	0x2001eca3

0000938c <usb_serial_flush_output>:
{
    938c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    9390:	4b1d      	ldr	r3, [pc, #116]	; (9408 <usb_serial_flush_output+0x7c>)
    9392:	781b      	ldrb	r3, [r3, #0]
    9394:	b113      	cbz	r3, 939c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    9396:	4d1d      	ldr	r5, [pc, #116]	; (940c <usb_serial_flush_output+0x80>)
    9398:	882a      	ldrh	r2, [r5, #0]
    939a:	b90a      	cbnz	r2, 93a0 <usb_serial_flush_output+0x14>
}
    939c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    93a0:	4e1b      	ldr	r6, [pc, #108]	; (9410 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    93a2:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    93a6:	491b      	ldr	r1, [pc, #108]	; (9414 <usb_serial_flush_output+0x88>)
    93a8:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    93aa:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    93ac:	4c1a      	ldr	r4, [pc, #104]	; (9418 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    93ae:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    93b2:	4f1a      	ldr	r7, [pc, #104]	; (941c <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    93b4:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    93b8:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    93ba:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    93bc:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    93be:	4621      	mov	r1, r4
    93c0:	2300      	movs	r3, #0
    93c2:	f7ff fc19 	bl	8bf8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    93c6:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    93ca:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    93ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    93d2:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    93d6:	3420      	adds	r4, #32
	} while (location < end_addr);
    93d8:	42a2      	cmp	r2, r4
    93da:	d8fa      	bhi.n	93d2 <usb_serial_flush_output+0x46>
	asm("dsb");
    93dc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    93e0:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    93e4:	2004      	movs	r0, #4
    93e6:	4641      	mov	r1, r8
    93e8:	f7ff fc1e 	bl	8c28 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    93ec:	7833      	ldrb	r3, [r6, #0]
    93ee:	3301      	adds	r3, #1
    93f0:	b2db      	uxtb	r3, r3
    93f2:	2b03      	cmp	r3, #3
    93f4:	bf88      	it	hi
    93f6:	2300      	movhi	r3, #0
    93f8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    93fa:	2300      	movs	r3, #0
    93fc:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    93fe:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    9402:	703b      	strb	r3, [r7, #0]
}
    9404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9408:	2001eca5 	.word	0x2001eca5
    940c:	2001ec90 	.word	0x2001ec90
    9410:	2001eca2 	.word	0x2001eca2
    9414:	2000a000 	.word	0x2000a000
    9418:	2000a080 	.word	0x2000a080
    941c:	2001eca3 	.word	0x2001eca3

00009420 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    9424:	4e32      	ldr	r6, [pc, #200]	; (94f0 <yield+0xd0>)
    9426:	7833      	ldrb	r3, [r6, #0]
    9428:	b163      	cbz	r3, 9444 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    942a:	4f32      	ldr	r7, [pc, #200]	; (94f4 <yield+0xd4>)
    942c:	783a      	ldrb	r2, [r7, #0]
    942e:	b94a      	cbnz	r2, 9444 <yield+0x24>
	running = 1;
    9430:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    9432:	07d9      	lsls	r1, r3, #31
	running = 1;
    9434:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    9436:	d444      	bmi.n	94c2 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    9438:	079a      	lsls	r2, r3, #30
    943a:	d426      	bmi.n	948a <yield+0x6a>

	running = 0;
    943c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    943e:	075b      	lsls	r3, r3, #29
	running = 0;
    9440:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    9442:	d401      	bmi.n	9448 <yield+0x28>
	
};
    9444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    9448:	4b2b      	ldr	r3, [pc, #172]	; (94f8 <yield+0xd8>)
    944a:	681a      	ldr	r2, [r3, #0]
    944c:	2a00      	cmp	r2, #0
    944e:	d0f9      	beq.n	9444 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9450:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    9454:	2a00      	cmp	r2, #0
    9456:	d1f5      	bne.n	9444 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9458:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    945c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    945e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    9460:	2800      	cmp	r0, #0
    9462:	d03b      	beq.n	94dc <yield+0xbc>
		if (runningFromYield) {
    9464:	4c25      	ldr	r4, [pc, #148]	; (94fc <yield+0xdc>)
    9466:	7821      	ldrb	r1, [r4, #0]
    9468:	2900      	cmp	r1, #0
    946a:	d137      	bne.n	94dc <yield+0xbc>
		runningFromYield = true;
    946c:	2201      	movs	r2, #1
    946e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    9470:	6942      	ldr	r2, [r0, #20]
    9472:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    9474:	2a00      	cmp	r2, #0
    9476:	d038      	beq.n	94ea <yield+0xca>
			firstYield->_prev = nullptr;
    9478:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    947a:	b905      	cbnz	r5, 947e <yield+0x5e>
    947c:	b662      	cpsie	i
		first->_triggered = false;
    947e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    9480:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    9482:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    9484:	4798      	blx	r3
		runningFromYield = false;
    9486:	7025      	strb	r5, [r4, #0]
    9488:	e7dc      	b.n	9444 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    948a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 9508 <yield+0xe8>
    948e:	f898 2000 	ldrb.w	r2, [r8]
    9492:	2a00      	cmp	r2, #0
    9494:	d0d2      	beq.n	943c <yield+0x1c>
    9496:	2500      	movs	r5, #0
    9498:	f8df 9070 	ldr.w	r9, [pc, #112]	; 950c <yield+0xec>
    949c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    949e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    94a2:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    94a4:	6823      	ldr	r3, [r4, #0]
    94a6:	4620      	mov	r0, r4
    94a8:	691b      	ldr	r3, [r3, #16]
    94aa:	4798      	blx	r3
    94ac:	b110      	cbz	r0, 94b4 <yield+0x94>
    94ae:	6963      	ldr	r3, [r4, #20]
    94b0:	689b      	ldr	r3, [r3, #8]
    94b2:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    94b4:	f898 2000 	ldrb.w	r2, [r8]
    94b8:	b2eb      	uxtb	r3, r5
    94ba:	429a      	cmp	r2, r3
    94bc:	d8ef      	bhi.n	949e <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    94be:	7833      	ldrb	r3, [r6, #0]
    94c0:	e7bc      	b.n	943c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    94c2:	f7ff fec5 	bl	9250 <usb_serial_available>
		if (Serial.available()) serialEvent();
    94c6:	b968      	cbnz	r0, 94e4 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    94c8:	4b0d      	ldr	r3, [pc, #52]	; (9500 <yield+0xe0>)
    94ca:	781b      	ldrb	r3, [r3, #0]
    94cc:	b90b      	cbnz	r3, 94d2 <yield+0xb2>
    94ce:	7833      	ldrb	r3, [r6, #0]
    94d0:	e7b2      	b.n	9438 <yield+0x18>
    94d2:	7833      	ldrb	r3, [r6, #0]
    94d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    94d8:	7033      	strb	r3, [r6, #0]
    94da:	e7ad      	b.n	9438 <yield+0x18>
		if (doit) __enable_irq();
    94dc:	2d00      	cmp	r5, #0
    94de:	d1b1      	bne.n	9444 <yield+0x24>
    94e0:	b662      	cpsie	i
    94e2:	e7af      	b.n	9444 <yield+0x24>
		if (Serial.available()) serialEvent();
    94e4:	f000 f8cc 	bl	9680 <serialEvent()>
    94e8:	e7ee      	b.n	94c8 <yield+0xa8>
			lastYield = nullptr;
    94ea:	4b06      	ldr	r3, [pc, #24]	; (9504 <yield+0xe4>)
    94ec:	601a      	str	r2, [r3, #0]
    94ee:	e7c4      	b.n	947a <yield+0x5a>
    94f0:	20008bcd 	.word	0x20008bcd
    94f4:	2001ec9b 	.word	0x2001ec9b
    94f8:	2001e074 	.word	0x2001e074
    94fc:	2001ec99 	.word	0x2001ec99
    9500:	60002766 	.word	0x60002766
    9504:	2001e080 	.word	0x2001e080
    9508:	2001ec9a 	.word	0x2001ec9a
    950c:	2001e084 	.word	0x2001e084

00009510 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    9510:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    9512:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9514:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    9518:	4619      	mov	r1, r3
{
    951a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    951c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9520:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9524:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9528:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    952c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    9530:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    9532:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9536:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    953a:	b29b      	uxth	r3, r3
    953c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    9540:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9544:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    9548:	3101      	adds	r1, #1
    954a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    954e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9550:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9552:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9556:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9558:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    955a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    955c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    955e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    9562:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9564:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9566:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9568:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    956a:	d1eb      	bne.n	9544 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    956c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    9570:	b29b      	uxth	r3, r3
    9572:	f043 030f 	orr.w	r3, r3, #15
    9576:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    957a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    957e:	b29b      	uxth	r3, r3
    9580:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    9584:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    9588:	bd10      	pop	{r4, pc}
    958a:	bf00      	nop

0000958c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    958c:	4b37      	ldr	r3, [pc, #220]	; (966c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    958e:	4a38      	ldr	r2, [pc, #224]	; (9670 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9590:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    9592:	4838      	ldr	r0, [pc, #224]	; (9674 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9594:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    9598:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    959a:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    959c:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    95a0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    95a4:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    95a8:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    95ac:	430a      	orrs	r2, r1
    95ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    95b2:	f7ff ffad 	bl	9510 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    95b6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    95ba:	f7ff ffa9 	bl	9510 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    95be:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    95c2:	f7ff ffa5 	bl	9510 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    95c6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    95ca:	f7ff ffa1 	bl	9510 <flexpwm_init>
	for (i=0; i < 4; i++) {
    95ce:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    95d0:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    95d4:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    95d8:	4611      	mov	r1, r2
    95da:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    95de:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    95e2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    95e4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    95e6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    95e8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    95ea:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    95ee:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    95f0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    95f2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    95f6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    95f8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    95fa:	d1ee      	bne.n	95da <pwm_init+0x4e>
    95fc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    95fe:	481e      	ldr	r0, [pc, #120]	; (9678 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9600:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9604:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    9608:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    960a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    960e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    9612:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    9616:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    961a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    961c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    961e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    9620:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9622:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9626:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9628:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    962a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    962e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9630:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    9632:	d1ee      	bne.n	9612 <pwm_init+0x86>
    9634:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    9636:	4811      	ldr	r0, [pc, #68]	; (967c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9638:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    963a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    963e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9640:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9644:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    9648:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    964c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    9650:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9652:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    9654:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    9656:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9658:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    965a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    965c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    965e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    9662:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9664:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    9668:	d1ee      	bne.n	9648 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    966a:	bd70      	pop	{r4, r5, r6, pc}
    966c:	400fc000 	.word	0x400fc000
    9670:	fc030000 	.word	0xfc030000
    9674:	403dc000 	.word	0x403dc000
    9678:	401e0000 	.word	0x401e0000
    967c:	401e4000 	.word	0x401e4000

00009680 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    9680:	4770      	bx	lr
    9682:	bf00      	nop

00009684 <sm_align_pool>:
{
    9684:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    9686:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    968a:	b15b      	cbz	r3, 96a4 <sm_align_pool+0x20>
    968c:	b1ba      	cbz	r2, 96be <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    968e:	4b0f      	ldr	r3, [pc, #60]	; (96cc <sm_align_pool+0x48>)
    9690:	fba3 1302 	umull	r1, r3, r3, r2
    9694:	08db      	lsrs	r3, r3, #3
    9696:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    969a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    969e:	d10a      	bne.n	96b6 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    96a0:	2001      	movs	r0, #1
}
    96a2:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    96a4:	4b09      	ldr	r3, [pc, #36]	; (96cc <sm_align_pool+0x48>)
    96a6:	fba3 1302 	umull	r1, r3, r3, r2
    96aa:	08db      	lsrs	r3, r3, #3
    96ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    96b0:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    96b4:	d001      	beq.n	96ba <sm_align_pool+0x36>
    96b6:	1ad2      	subs	r2, r2, r3
    96b8:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    96ba:	2af0      	cmp	r2, #240	; 0xf0
    96bc:	d8f0      	bhi.n	96a0 <sm_align_pool+0x1c>
		errno = ENOSPC;
    96be:	f002 fa3b 	bl	bb38 <__errno>
    96c2:	221c      	movs	r2, #28
    96c4:	4603      	mov	r3, r0
    96c6:	2000      	movs	r0, #0
    96c8:	601a      	str	r2, [r3, #0]
}
    96ca:	bd08      	pop	{r3, pc}
    96cc:	aaaaaaab 	.word	0xaaaaaaab

000096d0 <sm_set_pool>:
{
    96d0:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    96d2:	4604      	mov	r4, r0
    96d4:	b338      	cbz	r0, 9726 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    96d6:	b119      	cbz	r1, 96e0 <sm_set_pool+0x10>
    96d8:	fab2 f682 	clz	r6, r2
    96dc:	0976      	lsrs	r6, r6, #5
    96de:	b9a2      	cbnz	r2, 970a <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    96e0:	6820      	ldr	r0, [r4, #0]
    96e2:	b300      	cbz	r0, 9726 <sm_set_pool+0x56>
    96e4:	6862      	ldr	r2, [r4, #4]
    96e6:	b1f2      	cbz	r2, 9726 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    96e8:	4b18      	ldr	r3, [pc, #96]	; (974c <sm_set_pool+0x7c>)
    96ea:	4919      	ldr	r1, [pc, #100]	; (9750 <sm_set_pool+0x80>)
    96ec:	fb02 f303 	mul.w	r3, r2, r3
    96f0:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    96f4:	d317      	bcc.n	9726 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    96f6:	68a3      	ldr	r3, [r4, #8]
    96f8:	b9e3      	cbnz	r3, 9734 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    96fa:	2200      	movs	r2, #0
			return 1;
    96fc:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    96fe:	6022      	str	r2, [r4, #0]
    9700:	6062      	str	r2, [r4, #4]
    9702:	60a2      	str	r2, [r4, #8]
    9704:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    9706:	4618      	mov	r0, r3
    9708:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    970a:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    970c:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    970e:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    9712:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    9714:	f7ff ffb6 	bl	9684 <sm_align_pool>
    9718:	4603      	mov	r3, r0
    971a:	2800      	cmp	r0, #0
    971c:	d0f3      	beq.n	9706 <sm_set_pool+0x36>
	if (do_zero) {
    971e:	b96d      	cbnz	r5, 973c <sm_set_pool+0x6c>
	return 1;
    9720:	2301      	movs	r3, #1
}
    9722:	4618      	mov	r0, r3
    9724:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    9726:	f002 fa07 	bl	bb38 <__errno>
    972a:	2216      	movs	r2, #22
		return 0;
    972c:	2300      	movs	r3, #0
		errno = EINVAL;
    972e:	6002      	str	r2, [r0, #0]
}
    9730:	4618      	mov	r0, r3
    9732:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    9734:	2100      	movs	r1, #0
    9736:	f002 f8c9 	bl	b8cc <memset>
    973a:	e7de      	b.n	96fa <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    973c:	6862      	ldr	r2, [r4, #4]
    973e:	4631      	mov	r1, r6
    9740:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    9742:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    9744:	f002 f8c2 	bl	b8cc <memset>
	return 1;
    9748:	2301      	movs	r3, #1
    974a:	e7dc      	b.n	9706 <sm_set_pool+0x36>
    974c:	aaaaaaab 	.word	0xaaaaaaab
    9750:	15555555 	.word	0x15555555

00009754 <__aeabi_atexit>:
    9754:	4603      	mov	r3, r0
    9756:	4608      	mov	r0, r1
    9758:	4619      	mov	r1, r3
    975a:	f001 be27 	b.w	b3ac <__cxa_atexit>
    975e:	bf00      	nop

00009760 <__aeabi_uldivmod>:
    9760:	b953      	cbnz	r3, 9778 <__aeabi_uldivmod+0x18>
    9762:	b94a      	cbnz	r2, 9778 <__aeabi_uldivmod+0x18>
    9764:	2900      	cmp	r1, #0
    9766:	bf08      	it	eq
    9768:	2800      	cmpeq	r0, #0
    976a:	bf1c      	itt	ne
    976c:	f04f 31ff 	movne.w	r1, #4294967295
    9770:	f04f 30ff 	movne.w	r0, #4294967295
    9774:	f000 b970 	b.w	9a58 <__aeabi_idiv0>
    9778:	f1ad 0c08 	sub.w	ip, sp, #8
    977c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    9780:	f000 f806 	bl	9790 <__udivmoddi4>
    9784:	f8dd e004 	ldr.w	lr, [sp, #4]
    9788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    978c:	b004      	add	sp, #16
    978e:	4770      	bx	lr

00009790 <__udivmoddi4>:
    9790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9794:	9e08      	ldr	r6, [sp, #32]
    9796:	460d      	mov	r5, r1
    9798:	4604      	mov	r4, r0
    979a:	460f      	mov	r7, r1
    979c:	2b00      	cmp	r3, #0
    979e:	d14a      	bne.n	9836 <__udivmoddi4+0xa6>
    97a0:	428a      	cmp	r2, r1
    97a2:	4694      	mov	ip, r2
    97a4:	d965      	bls.n	9872 <__udivmoddi4+0xe2>
    97a6:	fab2 f382 	clz	r3, r2
    97aa:	b143      	cbz	r3, 97be <__udivmoddi4+0x2e>
    97ac:	fa02 fc03 	lsl.w	ip, r2, r3
    97b0:	f1c3 0220 	rsb	r2, r3, #32
    97b4:	409f      	lsls	r7, r3
    97b6:	fa20 f202 	lsr.w	r2, r0, r2
    97ba:	4317      	orrs	r7, r2
    97bc:	409c      	lsls	r4, r3
    97be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    97c2:	fa1f f58c 	uxth.w	r5, ip
    97c6:	fbb7 f1fe 	udiv	r1, r7, lr
    97ca:	0c22      	lsrs	r2, r4, #16
    97cc:	fb0e 7711 	mls	r7, lr, r1, r7
    97d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    97d4:	fb01 f005 	mul.w	r0, r1, r5
    97d8:	4290      	cmp	r0, r2
    97da:	d90a      	bls.n	97f2 <__udivmoddi4+0x62>
    97dc:	eb1c 0202 	adds.w	r2, ip, r2
    97e0:	f101 37ff 	add.w	r7, r1, #4294967295
    97e4:	f080 811c 	bcs.w	9a20 <__udivmoddi4+0x290>
    97e8:	4290      	cmp	r0, r2
    97ea:	f240 8119 	bls.w	9a20 <__udivmoddi4+0x290>
    97ee:	3902      	subs	r1, #2
    97f0:	4462      	add	r2, ip
    97f2:	1a12      	subs	r2, r2, r0
    97f4:	b2a4      	uxth	r4, r4
    97f6:	fbb2 f0fe 	udiv	r0, r2, lr
    97fa:	fb0e 2210 	mls	r2, lr, r0, r2
    97fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    9802:	fb00 f505 	mul.w	r5, r0, r5
    9806:	42a5      	cmp	r5, r4
    9808:	d90a      	bls.n	9820 <__udivmoddi4+0x90>
    980a:	eb1c 0404 	adds.w	r4, ip, r4
    980e:	f100 32ff 	add.w	r2, r0, #4294967295
    9812:	f080 8107 	bcs.w	9a24 <__udivmoddi4+0x294>
    9816:	42a5      	cmp	r5, r4
    9818:	f240 8104 	bls.w	9a24 <__udivmoddi4+0x294>
    981c:	4464      	add	r4, ip
    981e:	3802      	subs	r0, #2
    9820:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    9824:	1b64      	subs	r4, r4, r5
    9826:	2100      	movs	r1, #0
    9828:	b11e      	cbz	r6, 9832 <__udivmoddi4+0xa2>
    982a:	40dc      	lsrs	r4, r3
    982c:	2300      	movs	r3, #0
    982e:	e9c6 4300 	strd	r4, r3, [r6]
    9832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9836:	428b      	cmp	r3, r1
    9838:	d908      	bls.n	984c <__udivmoddi4+0xbc>
    983a:	2e00      	cmp	r6, #0
    983c:	f000 80ed 	beq.w	9a1a <__udivmoddi4+0x28a>
    9840:	2100      	movs	r1, #0
    9842:	e9c6 0500 	strd	r0, r5, [r6]
    9846:	4608      	mov	r0, r1
    9848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    984c:	fab3 f183 	clz	r1, r3
    9850:	2900      	cmp	r1, #0
    9852:	d149      	bne.n	98e8 <__udivmoddi4+0x158>
    9854:	42ab      	cmp	r3, r5
    9856:	d302      	bcc.n	985e <__udivmoddi4+0xce>
    9858:	4282      	cmp	r2, r0
    985a:	f200 80f8 	bhi.w	9a4e <__udivmoddi4+0x2be>
    985e:	1a84      	subs	r4, r0, r2
    9860:	eb65 0203 	sbc.w	r2, r5, r3
    9864:	2001      	movs	r0, #1
    9866:	4617      	mov	r7, r2
    9868:	2e00      	cmp	r6, #0
    986a:	d0e2      	beq.n	9832 <__udivmoddi4+0xa2>
    986c:	e9c6 4700 	strd	r4, r7, [r6]
    9870:	e7df      	b.n	9832 <__udivmoddi4+0xa2>
    9872:	b902      	cbnz	r2, 9876 <__udivmoddi4+0xe6>
    9874:	deff      	udf	#255	; 0xff
    9876:	fab2 f382 	clz	r3, r2
    987a:	2b00      	cmp	r3, #0
    987c:	f040 8090 	bne.w	99a0 <__udivmoddi4+0x210>
    9880:	1a8a      	subs	r2, r1, r2
    9882:	ea4f 471c 	mov.w	r7, ip, lsr #16
    9886:	fa1f fe8c 	uxth.w	lr, ip
    988a:	2101      	movs	r1, #1
    988c:	fbb2 f5f7 	udiv	r5, r2, r7
    9890:	fb07 2015 	mls	r0, r7, r5, r2
    9894:	0c22      	lsrs	r2, r4, #16
    9896:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    989a:	fb0e f005 	mul.w	r0, lr, r5
    989e:	4290      	cmp	r0, r2
    98a0:	d908      	bls.n	98b4 <__udivmoddi4+0x124>
    98a2:	eb1c 0202 	adds.w	r2, ip, r2
    98a6:	f105 38ff 	add.w	r8, r5, #4294967295
    98aa:	d202      	bcs.n	98b2 <__udivmoddi4+0x122>
    98ac:	4290      	cmp	r0, r2
    98ae:	f200 80cb 	bhi.w	9a48 <__udivmoddi4+0x2b8>
    98b2:	4645      	mov	r5, r8
    98b4:	1a12      	subs	r2, r2, r0
    98b6:	b2a4      	uxth	r4, r4
    98b8:	fbb2 f0f7 	udiv	r0, r2, r7
    98bc:	fb07 2210 	mls	r2, r7, r0, r2
    98c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    98c4:	fb0e fe00 	mul.w	lr, lr, r0
    98c8:	45a6      	cmp	lr, r4
    98ca:	d908      	bls.n	98de <__udivmoddi4+0x14e>
    98cc:	eb1c 0404 	adds.w	r4, ip, r4
    98d0:	f100 32ff 	add.w	r2, r0, #4294967295
    98d4:	d202      	bcs.n	98dc <__udivmoddi4+0x14c>
    98d6:	45a6      	cmp	lr, r4
    98d8:	f200 80bb 	bhi.w	9a52 <__udivmoddi4+0x2c2>
    98dc:	4610      	mov	r0, r2
    98de:	eba4 040e 	sub.w	r4, r4, lr
    98e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    98e6:	e79f      	b.n	9828 <__udivmoddi4+0x98>
    98e8:	f1c1 0720 	rsb	r7, r1, #32
    98ec:	408b      	lsls	r3, r1
    98ee:	fa22 fc07 	lsr.w	ip, r2, r7
    98f2:	ea4c 0c03 	orr.w	ip, ip, r3
    98f6:	fa05 f401 	lsl.w	r4, r5, r1
    98fa:	fa20 f307 	lsr.w	r3, r0, r7
    98fe:	40fd      	lsrs	r5, r7
    9900:	ea4f 491c 	mov.w	r9, ip, lsr #16
    9904:	4323      	orrs	r3, r4
    9906:	fbb5 f8f9 	udiv	r8, r5, r9
    990a:	fa1f fe8c 	uxth.w	lr, ip
    990e:	fb09 5518 	mls	r5, r9, r8, r5
    9912:	0c1c      	lsrs	r4, r3, #16
    9914:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    9918:	fb08 f50e 	mul.w	r5, r8, lr
    991c:	42a5      	cmp	r5, r4
    991e:	fa02 f201 	lsl.w	r2, r2, r1
    9922:	fa00 f001 	lsl.w	r0, r0, r1
    9926:	d90b      	bls.n	9940 <__udivmoddi4+0x1b0>
    9928:	eb1c 0404 	adds.w	r4, ip, r4
    992c:	f108 3aff 	add.w	sl, r8, #4294967295
    9930:	f080 8088 	bcs.w	9a44 <__udivmoddi4+0x2b4>
    9934:	42a5      	cmp	r5, r4
    9936:	f240 8085 	bls.w	9a44 <__udivmoddi4+0x2b4>
    993a:	f1a8 0802 	sub.w	r8, r8, #2
    993e:	4464      	add	r4, ip
    9940:	1b64      	subs	r4, r4, r5
    9942:	b29d      	uxth	r5, r3
    9944:	fbb4 f3f9 	udiv	r3, r4, r9
    9948:	fb09 4413 	mls	r4, r9, r3, r4
    994c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    9950:	fb03 fe0e 	mul.w	lr, r3, lr
    9954:	45a6      	cmp	lr, r4
    9956:	d908      	bls.n	996a <__udivmoddi4+0x1da>
    9958:	eb1c 0404 	adds.w	r4, ip, r4
    995c:	f103 35ff 	add.w	r5, r3, #4294967295
    9960:	d26c      	bcs.n	9a3c <__udivmoddi4+0x2ac>
    9962:	45a6      	cmp	lr, r4
    9964:	d96a      	bls.n	9a3c <__udivmoddi4+0x2ac>
    9966:	3b02      	subs	r3, #2
    9968:	4464      	add	r4, ip
    996a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    996e:	fba3 9502 	umull	r9, r5, r3, r2
    9972:	eba4 040e 	sub.w	r4, r4, lr
    9976:	42ac      	cmp	r4, r5
    9978:	46c8      	mov	r8, r9
    997a:	46ae      	mov	lr, r5
    997c:	d356      	bcc.n	9a2c <__udivmoddi4+0x29c>
    997e:	d053      	beq.n	9a28 <__udivmoddi4+0x298>
    9980:	b156      	cbz	r6, 9998 <__udivmoddi4+0x208>
    9982:	ebb0 0208 	subs.w	r2, r0, r8
    9986:	eb64 040e 	sbc.w	r4, r4, lr
    998a:	fa04 f707 	lsl.w	r7, r4, r7
    998e:	40ca      	lsrs	r2, r1
    9990:	40cc      	lsrs	r4, r1
    9992:	4317      	orrs	r7, r2
    9994:	e9c6 7400 	strd	r7, r4, [r6]
    9998:	4618      	mov	r0, r3
    999a:	2100      	movs	r1, #0
    999c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    99a0:	f1c3 0120 	rsb	r1, r3, #32
    99a4:	fa02 fc03 	lsl.w	ip, r2, r3
    99a8:	fa20 f201 	lsr.w	r2, r0, r1
    99ac:	fa25 f101 	lsr.w	r1, r5, r1
    99b0:	409d      	lsls	r5, r3
    99b2:	432a      	orrs	r2, r5
    99b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
    99b8:	fa1f fe8c 	uxth.w	lr, ip
    99bc:	fbb1 f0f7 	udiv	r0, r1, r7
    99c0:	fb07 1510 	mls	r5, r7, r0, r1
    99c4:	0c11      	lsrs	r1, r2, #16
    99c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    99ca:	fb00 f50e 	mul.w	r5, r0, lr
    99ce:	428d      	cmp	r5, r1
    99d0:	fa04 f403 	lsl.w	r4, r4, r3
    99d4:	d908      	bls.n	99e8 <__udivmoddi4+0x258>
    99d6:	eb1c 0101 	adds.w	r1, ip, r1
    99da:	f100 38ff 	add.w	r8, r0, #4294967295
    99de:	d22f      	bcs.n	9a40 <__udivmoddi4+0x2b0>
    99e0:	428d      	cmp	r5, r1
    99e2:	d92d      	bls.n	9a40 <__udivmoddi4+0x2b0>
    99e4:	3802      	subs	r0, #2
    99e6:	4461      	add	r1, ip
    99e8:	1b49      	subs	r1, r1, r5
    99ea:	b292      	uxth	r2, r2
    99ec:	fbb1 f5f7 	udiv	r5, r1, r7
    99f0:	fb07 1115 	mls	r1, r7, r5, r1
    99f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    99f8:	fb05 f10e 	mul.w	r1, r5, lr
    99fc:	4291      	cmp	r1, r2
    99fe:	d908      	bls.n	9a12 <__udivmoddi4+0x282>
    9a00:	eb1c 0202 	adds.w	r2, ip, r2
    9a04:	f105 38ff 	add.w	r8, r5, #4294967295
    9a08:	d216      	bcs.n	9a38 <__udivmoddi4+0x2a8>
    9a0a:	4291      	cmp	r1, r2
    9a0c:	d914      	bls.n	9a38 <__udivmoddi4+0x2a8>
    9a0e:	3d02      	subs	r5, #2
    9a10:	4462      	add	r2, ip
    9a12:	1a52      	subs	r2, r2, r1
    9a14:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    9a18:	e738      	b.n	988c <__udivmoddi4+0xfc>
    9a1a:	4631      	mov	r1, r6
    9a1c:	4630      	mov	r0, r6
    9a1e:	e708      	b.n	9832 <__udivmoddi4+0xa2>
    9a20:	4639      	mov	r1, r7
    9a22:	e6e6      	b.n	97f2 <__udivmoddi4+0x62>
    9a24:	4610      	mov	r0, r2
    9a26:	e6fb      	b.n	9820 <__udivmoddi4+0x90>
    9a28:	4548      	cmp	r0, r9
    9a2a:	d2a9      	bcs.n	9980 <__udivmoddi4+0x1f0>
    9a2c:	ebb9 0802 	subs.w	r8, r9, r2
    9a30:	eb65 0e0c 	sbc.w	lr, r5, ip
    9a34:	3b01      	subs	r3, #1
    9a36:	e7a3      	b.n	9980 <__udivmoddi4+0x1f0>
    9a38:	4645      	mov	r5, r8
    9a3a:	e7ea      	b.n	9a12 <__udivmoddi4+0x282>
    9a3c:	462b      	mov	r3, r5
    9a3e:	e794      	b.n	996a <__udivmoddi4+0x1da>
    9a40:	4640      	mov	r0, r8
    9a42:	e7d1      	b.n	99e8 <__udivmoddi4+0x258>
    9a44:	46d0      	mov	r8, sl
    9a46:	e77b      	b.n	9940 <__udivmoddi4+0x1b0>
    9a48:	3d02      	subs	r5, #2
    9a4a:	4462      	add	r2, ip
    9a4c:	e732      	b.n	98b4 <__udivmoddi4+0x124>
    9a4e:	4608      	mov	r0, r1
    9a50:	e70a      	b.n	9868 <__udivmoddi4+0xd8>
    9a52:	4464      	add	r4, ip
    9a54:	3802      	subs	r0, #2
    9a56:	e742      	b.n	98de <__udivmoddi4+0x14e>

00009a58 <__aeabi_idiv0>:
    9a58:	4770      	bx	lr
    9a5a:	bf00      	nop

00009a5c <malloc>:
    9a5c:	4b02      	ldr	r3, [pc, #8]	; (9a68 <malloc+0xc>)
    9a5e:	4601      	mov	r1, r0
    9a60:	6818      	ldr	r0, [r3, #0]
    9a62:	f000 b80b 	b.w	9a7c <_malloc_r>
    9a66:	bf00      	nop
    9a68:	20008b50 	.word	0x20008b50

00009a6c <free>:
    9a6c:	4b02      	ldr	r3, [pc, #8]	; (9a78 <free+0xc>)
    9a6e:	4601      	mov	r1, r0
    9a70:	6818      	ldr	r0, [r3, #0]
    9a72:	f002 bbd7 	b.w	c224 <_free_r>
    9a76:	bf00      	nop
    9a78:	20008b50 	.word	0x20008b50

00009a7c <_malloc_r>:
    9a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a80:	f101 060b 	add.w	r6, r1, #11
    9a84:	2e16      	cmp	r6, #22
    9a86:	b083      	sub	sp, #12
    9a88:	4604      	mov	r4, r0
    9a8a:	d824      	bhi.n	9ad6 <_malloc_r+0x5a>
    9a8c:	2910      	cmp	r1, #16
    9a8e:	f200 80ba 	bhi.w	9c06 <_malloc_r+0x18a>
    9a92:	f000 faa3 	bl	9fdc <__malloc_lock>
    9a96:	2610      	movs	r6, #16
    9a98:	2218      	movs	r2, #24
    9a9a:	2002      	movs	r0, #2
    9a9c:	4fb5      	ldr	r7, [pc, #724]	; (9d74 <_malloc_r+0x2f8>)
    9a9e:	443a      	add	r2, r7
    9aa0:	f1a2 0108 	sub.w	r1, r2, #8
    9aa4:	6853      	ldr	r3, [r2, #4]
    9aa6:	428b      	cmp	r3, r1
    9aa8:	f000 80ba 	beq.w	9c20 <_malloc_r+0x1a4>
    9aac:	685a      	ldr	r2, [r3, #4]
    9aae:	68d9      	ldr	r1, [r3, #12]
    9ab0:	f022 0203 	bic.w	r2, r2, #3
    9ab4:	441a      	add	r2, r3
    9ab6:	689d      	ldr	r5, [r3, #8]
    9ab8:	60e9      	str	r1, [r5, #12]
    9aba:	608d      	str	r5, [r1, #8]
    9abc:	6851      	ldr	r1, [r2, #4]
    9abe:	f041 0101 	orr.w	r1, r1, #1
    9ac2:	4620      	mov	r0, r4
    9ac4:	6051      	str	r1, [r2, #4]
    9ac6:	f103 0508 	add.w	r5, r3, #8
    9aca:	f000 fa8d 	bl	9fe8 <__malloc_unlock>
    9ace:	4628      	mov	r0, r5
    9ad0:	b003      	add	sp, #12
    9ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ad6:	f036 0607 	bics.w	r6, r6, #7
    9ada:	f100 8094 	bmi.w	9c06 <_malloc_r+0x18a>
    9ade:	42b1      	cmp	r1, r6
    9ae0:	f200 8091 	bhi.w	9c06 <_malloc_r+0x18a>
    9ae4:	f000 fa7a 	bl	9fdc <__malloc_lock>
    9ae8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    9aec:	f0c0 819a 	bcc.w	9e24 <_malloc_r+0x3a8>
    9af0:	0a73      	lsrs	r3, r6, #9
    9af2:	f000 808f 	beq.w	9c14 <_malloc_r+0x198>
    9af6:	2b04      	cmp	r3, #4
    9af8:	f200 816f 	bhi.w	9dda <_malloc_r+0x35e>
    9afc:	09b3      	lsrs	r3, r6, #6
    9afe:	f103 0039 	add.w	r0, r3, #57	; 0x39
    9b02:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    9b06:	00c3      	lsls	r3, r0, #3
    9b08:	4f9a      	ldr	r7, [pc, #616]	; (9d74 <_malloc_r+0x2f8>)
    9b0a:	443b      	add	r3, r7
    9b0c:	f1a3 0508 	sub.w	r5, r3, #8
    9b10:	685b      	ldr	r3, [r3, #4]
    9b12:	429d      	cmp	r5, r3
    9b14:	d106      	bne.n	9b24 <_malloc_r+0xa8>
    9b16:	e00c      	b.n	9b32 <_malloc_r+0xb6>
    9b18:	2900      	cmp	r1, #0
    9b1a:	f280 8127 	bge.w	9d6c <_malloc_r+0x2f0>
    9b1e:	68db      	ldr	r3, [r3, #12]
    9b20:	429d      	cmp	r5, r3
    9b22:	d006      	beq.n	9b32 <_malloc_r+0xb6>
    9b24:	685a      	ldr	r2, [r3, #4]
    9b26:	f022 0203 	bic.w	r2, r2, #3
    9b2a:	1b91      	subs	r1, r2, r6
    9b2c:	290f      	cmp	r1, #15
    9b2e:	ddf3      	ble.n	9b18 <_malloc_r+0x9c>
    9b30:	4660      	mov	r0, ip
    9b32:	693d      	ldr	r5, [r7, #16]
    9b34:	f8df c250 	ldr.w	ip, [pc, #592]	; 9d88 <_malloc_r+0x30c>
    9b38:	4565      	cmp	r5, ip
    9b3a:	d07c      	beq.n	9c36 <_malloc_r+0x1ba>
    9b3c:	686a      	ldr	r2, [r5, #4]
    9b3e:	f022 0203 	bic.w	r2, r2, #3
    9b42:	1b93      	subs	r3, r2, r6
    9b44:	2b0f      	cmp	r3, #15
    9b46:	f300 817b 	bgt.w	9e40 <_malloc_r+0x3c4>
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    9b50:	f280 816c 	bge.w	9e2c <_malloc_r+0x3b0>
    9b54:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    9b58:	f080 811a 	bcs.w	9d90 <_malloc_r+0x314>
    9b5c:	08d3      	lsrs	r3, r2, #3
    9b5e:	6879      	ldr	r1, [r7, #4]
    9b60:	3301      	adds	r3, #1
    9b62:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    9b66:	2201      	movs	r2, #1
    9b68:	fa02 f20e 	lsl.w	r2, r2, lr
    9b6c:	430a      	orrs	r2, r1
    9b6e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    9b72:	f8c5 e008 	str.w	lr, [r5, #8]
    9b76:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    9b7a:	3908      	subs	r1, #8
    9b7c:	60e9      	str	r1, [r5, #12]
    9b7e:	607a      	str	r2, [r7, #4]
    9b80:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    9b84:	f8ce 500c 	str.w	r5, [lr, #12]
    9b88:	1083      	asrs	r3, r0, #2
    9b8a:	2101      	movs	r1, #1
    9b8c:	4099      	lsls	r1, r3
    9b8e:	4291      	cmp	r1, r2
    9b90:	d857      	bhi.n	9c42 <_malloc_r+0x1c6>
    9b92:	4211      	tst	r1, r2
    9b94:	d106      	bne.n	9ba4 <_malloc_r+0x128>
    9b96:	f020 0003 	bic.w	r0, r0, #3
    9b9a:	0049      	lsls	r1, r1, #1
    9b9c:	4211      	tst	r1, r2
    9b9e:	f100 0004 	add.w	r0, r0, #4
    9ba2:	d0fa      	beq.n	9b9a <_malloc_r+0x11e>
    9ba4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    9ba8:	464d      	mov	r5, r9
    9baa:	4686      	mov	lr, r0
    9bac:	f8d5 800c 	ldr.w	r8, [r5, #12]
    9bb0:	4545      	cmp	r5, r8
    9bb2:	d108      	bne.n	9bc6 <_malloc_r+0x14a>
    9bb4:	e11d      	b.n	9df2 <_malloc_r+0x376>
    9bb6:	2b00      	cmp	r3, #0
    9bb8:	f280 8124 	bge.w	9e04 <_malloc_r+0x388>
    9bbc:	f8d8 800c 	ldr.w	r8, [r8, #12]
    9bc0:	4545      	cmp	r5, r8
    9bc2:	f000 8116 	beq.w	9df2 <_malloc_r+0x376>
    9bc6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    9bca:	f022 0203 	bic.w	r2, r2, #3
    9bce:	1b93      	subs	r3, r2, r6
    9bd0:	2b0f      	cmp	r3, #15
    9bd2:	ddf0      	ble.n	9bb6 <_malloc_r+0x13a>
    9bd4:	4620      	mov	r0, r4
    9bd6:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    9bda:	eb08 0106 	add.w	r1, r8, r6
    9bde:	f046 0601 	orr.w	r6, r6, #1
    9be2:	f8c8 6004 	str.w	r6, [r8, #4]
    9be6:	60ec      	str	r4, [r5, #12]
    9be8:	60a5      	str	r5, [r4, #8]
    9bea:	f043 0401 	orr.w	r4, r3, #1
    9bee:	e9c7 1104 	strd	r1, r1, [r7, #16]
    9bf2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    9bf6:	604c      	str	r4, [r1, #4]
    9bf8:	f848 3002 	str.w	r3, [r8, r2]
    9bfc:	f000 f9f4 	bl	9fe8 <__malloc_unlock>
    9c00:	f108 0508 	add.w	r5, r8, #8
    9c04:	e002      	b.n	9c0c <_malloc_r+0x190>
    9c06:	230c      	movs	r3, #12
    9c08:	6023      	str	r3, [r4, #0]
    9c0a:	2500      	movs	r5, #0
    9c0c:	4628      	mov	r0, r5
    9c0e:	b003      	add	sp, #12
    9c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c14:	f44f 7300 	mov.w	r3, #512	; 0x200
    9c18:	2040      	movs	r0, #64	; 0x40
    9c1a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    9c1e:	e773      	b.n	9b08 <_malloc_r+0x8c>
    9c20:	68d3      	ldr	r3, [r2, #12]
    9c22:	429a      	cmp	r2, r3
    9c24:	bf08      	it	eq
    9c26:	3002      	addeq	r0, #2
    9c28:	f47f af40 	bne.w	9aac <_malloc_r+0x30>
    9c2c:	693d      	ldr	r5, [r7, #16]
    9c2e:	f8df c158 	ldr.w	ip, [pc, #344]	; 9d88 <_malloc_r+0x30c>
    9c32:	4565      	cmp	r5, ip
    9c34:	d182      	bne.n	9b3c <_malloc_r+0xc0>
    9c36:	687a      	ldr	r2, [r7, #4]
    9c38:	1083      	asrs	r3, r0, #2
    9c3a:	2101      	movs	r1, #1
    9c3c:	4099      	lsls	r1, r3
    9c3e:	4291      	cmp	r1, r2
    9c40:	d9a7      	bls.n	9b92 <_malloc_r+0x116>
    9c42:	68bd      	ldr	r5, [r7, #8]
    9c44:	686b      	ldr	r3, [r5, #4]
    9c46:	f023 0903 	bic.w	r9, r3, #3
    9c4a:	454e      	cmp	r6, r9
    9c4c:	d803      	bhi.n	9c56 <_malloc_r+0x1da>
    9c4e:	eba9 0306 	sub.w	r3, r9, r6
    9c52:	2b0f      	cmp	r3, #15
    9c54:	dc7a      	bgt.n	9d4c <_malloc_r+0x2d0>
    9c56:	f8df b134 	ldr.w	fp, [pc, #308]	; 9d8c <_malloc_r+0x310>
    9c5a:	4b47      	ldr	r3, [pc, #284]	; (9d78 <_malloc_r+0x2fc>)
    9c5c:	f8db 2000 	ldr.w	r2, [fp]
    9c60:	681b      	ldr	r3, [r3, #0]
    9c62:	3201      	adds	r2, #1
    9c64:	4433      	add	r3, r6
    9c66:	eb05 0a09 	add.w	sl, r5, r9
    9c6a:	f000 8133 	beq.w	9ed4 <_malloc_r+0x458>
    9c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    9c72:	330f      	adds	r3, #15
    9c74:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    9c78:	f028 080f 	bic.w	r8, r8, #15
    9c7c:	4641      	mov	r1, r8
    9c7e:	4620      	mov	r0, r4
    9c80:	f001 ff32 	bl	bae8 <_sbrk_r>
    9c84:	1c41      	adds	r1, r0, #1
    9c86:	4602      	mov	r2, r0
    9c88:	f000 80f3 	beq.w	9e72 <_malloc_r+0x3f6>
    9c8c:	4582      	cmp	sl, r0
    9c8e:	f200 80ee 	bhi.w	9e6e <_malloc_r+0x3f2>
    9c92:	4b3a      	ldr	r3, [pc, #232]	; (9d7c <_malloc_r+0x300>)
    9c94:	6819      	ldr	r1, [r3, #0]
    9c96:	4441      	add	r1, r8
    9c98:	6019      	str	r1, [r3, #0]
    9c9a:	4608      	mov	r0, r1
    9c9c:	f000 814e 	beq.w	9f3c <_malloc_r+0x4c0>
    9ca0:	f8db 1000 	ldr.w	r1, [fp]
    9ca4:	9301      	str	r3, [sp, #4]
    9ca6:	3101      	adds	r1, #1
    9ca8:	bf1b      	ittet	ne
    9caa:	eba2 010a 	subne.w	r1, r2, sl
    9cae:	1809      	addne	r1, r1, r0
    9cb0:	f8cb 2000 	streq.w	r2, [fp]
    9cb4:	6019      	strne	r1, [r3, #0]
    9cb6:	f012 0b07 	ands.w	fp, r2, #7
    9cba:	f000 8117 	beq.w	9eec <_malloc_r+0x470>
    9cbe:	f1cb 0108 	rsb	r1, fp, #8
    9cc2:	440a      	add	r2, r1
    9cc4:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    9cc8:	4490      	add	r8, r2
    9cca:	3108      	adds	r1, #8
    9ccc:	eba1 0108 	sub.w	r1, r1, r8
    9cd0:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    9cd4:	4651      	mov	r1, sl
    9cd6:	4620      	mov	r0, r4
    9cd8:	9200      	str	r2, [sp, #0]
    9cda:	f001 ff05 	bl	bae8 <_sbrk_r>
    9cde:	1c42      	adds	r2, r0, #1
    9ce0:	e9dd 2300 	ldrd	r2, r3, [sp]
    9ce4:	f000 814f 	beq.w	9f86 <_malloc_r+0x50a>
    9ce8:	1a80      	subs	r0, r0, r2
    9cea:	eb00 080a 	add.w	r8, r0, sl
    9cee:	6819      	ldr	r1, [r3, #0]
    9cf0:	60ba      	str	r2, [r7, #8]
    9cf2:	f048 0001 	orr.w	r0, r8, #1
    9cf6:	4451      	add	r1, sl
    9cf8:	42bd      	cmp	r5, r7
    9cfa:	6050      	str	r0, [r2, #4]
    9cfc:	6019      	str	r1, [r3, #0]
    9cfe:	f000 8129 	beq.w	9f54 <_malloc_r+0x4d8>
    9d02:	f1b9 0f0f 	cmp.w	r9, #15
    9d06:	f240 8127 	bls.w	9f58 <_malloc_r+0x4dc>
    9d0a:	6868      	ldr	r0, [r5, #4]
    9d0c:	f1a9 0c0c 	sub.w	ip, r9, #12
    9d10:	f02c 0c07 	bic.w	ip, ip, #7
    9d14:	f000 0001 	and.w	r0, r0, #1
    9d18:	ea40 000c 	orr.w	r0, r0, ip
    9d1c:	6068      	str	r0, [r5, #4]
    9d1e:	f04f 0e05 	mov.w	lr, #5
    9d22:	eb05 000c 	add.w	r0, r5, ip
    9d26:	f1bc 0f0f 	cmp.w	ip, #15
    9d2a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    9d2e:	f200 8132 	bhi.w	9f96 <_malloc_r+0x51a>
    9d32:	6850      	ldr	r0, [r2, #4]
    9d34:	4615      	mov	r5, r2
    9d36:	4b12      	ldr	r3, [pc, #72]	; (9d80 <_malloc_r+0x304>)
    9d38:	681a      	ldr	r2, [r3, #0]
    9d3a:	428a      	cmp	r2, r1
    9d3c:	bf38      	it	cc
    9d3e:	6019      	strcc	r1, [r3, #0]
    9d40:	4b10      	ldr	r3, [pc, #64]	; (9d84 <_malloc_r+0x308>)
    9d42:	681a      	ldr	r2, [r3, #0]
    9d44:	428a      	cmp	r2, r1
    9d46:	bf38      	it	cc
    9d48:	6019      	strcc	r1, [r3, #0]
    9d4a:	e094      	b.n	9e76 <_malloc_r+0x3fa>
    9d4c:	19aa      	adds	r2, r5, r6
    9d4e:	f043 0301 	orr.w	r3, r3, #1
    9d52:	f046 0601 	orr.w	r6, r6, #1
    9d56:	606e      	str	r6, [r5, #4]
    9d58:	4620      	mov	r0, r4
    9d5a:	60ba      	str	r2, [r7, #8]
    9d5c:	6053      	str	r3, [r2, #4]
    9d5e:	f000 f943 	bl	9fe8 <__malloc_unlock>
    9d62:	3508      	adds	r5, #8
    9d64:	4628      	mov	r0, r5
    9d66:	b003      	add	sp, #12
    9d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d6c:	68d9      	ldr	r1, [r3, #12]
    9d6e:	441a      	add	r2, r3
    9d70:	e6a1      	b.n	9ab6 <_malloc_r+0x3a>
    9d72:	bf00      	nop
    9d74:	20008734 	.word	0x20008734
    9d78:	2001e2e0 	.word	0x2001e2e0
    9d7c:	2001e2b0 	.word	0x2001e2b0
    9d80:	2001e2d8 	.word	0x2001e2d8
    9d84:	2001e2dc 	.word	0x2001e2dc
    9d88:	2000873c 	.word	0x2000873c
    9d8c:	20008b3c 	.word	0x20008b3c
    9d90:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    9d94:	ea4f 2352 	mov.w	r3, r2, lsr #9
    9d98:	d363      	bcc.n	9e62 <_malloc_r+0x3e6>
    9d9a:	2b14      	cmp	r3, #20
    9d9c:	f200 80b7 	bhi.w	9f0e <_malloc_r+0x492>
    9da0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    9da4:	00c9      	lsls	r1, r1, #3
    9da6:	335b      	adds	r3, #91	; 0x5b
    9da8:	eb07 0e01 	add.w	lr, r7, r1
    9dac:	5879      	ldr	r1, [r7, r1]
    9dae:	f1ae 0e08 	sub.w	lr, lr, #8
    9db2:	458e      	cmp	lr, r1
    9db4:	f000 8091 	beq.w	9eda <_malloc_r+0x45e>
    9db8:	684b      	ldr	r3, [r1, #4]
    9dba:	f023 0303 	bic.w	r3, r3, #3
    9dbe:	4293      	cmp	r3, r2
    9dc0:	d902      	bls.n	9dc8 <_malloc_r+0x34c>
    9dc2:	6889      	ldr	r1, [r1, #8]
    9dc4:	458e      	cmp	lr, r1
    9dc6:	d1f7      	bne.n	9db8 <_malloc_r+0x33c>
    9dc8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    9dcc:	687a      	ldr	r2, [r7, #4]
    9dce:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    9dd2:	f8ce 5008 	str.w	r5, [lr, #8]
    9dd6:	60cd      	str	r5, [r1, #12]
    9dd8:	e6d6      	b.n	9b88 <_malloc_r+0x10c>
    9dda:	2b14      	cmp	r3, #20
    9ddc:	d959      	bls.n	9e92 <_malloc_r+0x416>
    9dde:	2b54      	cmp	r3, #84	; 0x54
    9de0:	f200 809d 	bhi.w	9f1e <_malloc_r+0x4a2>
    9de4:	0b33      	lsrs	r3, r6, #12
    9de6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    9dea:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    9dee:	00c3      	lsls	r3, r0, #3
    9df0:	e68a      	b.n	9b08 <_malloc_r+0x8c>
    9df2:	f10e 0e01 	add.w	lr, lr, #1
    9df6:	f01e 0f03 	tst.w	lr, #3
    9dfa:	f105 0508 	add.w	r5, r5, #8
    9dfe:	f47f aed5 	bne.w	9bac <_malloc_r+0x130>
    9e02:	e051      	b.n	9ea8 <_malloc_r+0x42c>
    9e04:	4442      	add	r2, r8
    9e06:	4645      	mov	r5, r8
    9e08:	6853      	ldr	r3, [r2, #4]
    9e0a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9e0e:	f043 0301 	orr.w	r3, r3, #1
    9e12:	6053      	str	r3, [r2, #4]
    9e14:	f855 3f08 	ldr.w	r3, [r5, #8]!
    9e18:	4620      	mov	r0, r4
    9e1a:	60d9      	str	r1, [r3, #12]
    9e1c:	608b      	str	r3, [r1, #8]
    9e1e:	f000 f8e3 	bl	9fe8 <__malloc_unlock>
    9e22:	e6f3      	b.n	9c0c <_malloc_r+0x190>
    9e24:	08f0      	lsrs	r0, r6, #3
    9e26:	f106 0208 	add.w	r2, r6, #8
    9e2a:	e637      	b.n	9a9c <_malloc_r+0x20>
    9e2c:	442a      	add	r2, r5
    9e2e:	4620      	mov	r0, r4
    9e30:	6853      	ldr	r3, [r2, #4]
    9e32:	f043 0301 	orr.w	r3, r3, #1
    9e36:	6053      	str	r3, [r2, #4]
    9e38:	3508      	adds	r5, #8
    9e3a:	f000 f8d5 	bl	9fe8 <__malloc_unlock>
    9e3e:	e6e5      	b.n	9c0c <_malloc_r+0x190>
    9e40:	19a9      	adds	r1, r5, r6
    9e42:	4620      	mov	r0, r4
    9e44:	f046 0601 	orr.w	r6, r6, #1
    9e48:	f043 0401 	orr.w	r4, r3, #1
    9e4c:	606e      	str	r6, [r5, #4]
    9e4e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    9e52:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    9e56:	604c      	str	r4, [r1, #4]
    9e58:	50ab      	str	r3, [r5, r2]
    9e5a:	f000 f8c5 	bl	9fe8 <__malloc_unlock>
    9e5e:	3508      	adds	r5, #8
    9e60:	e6d4      	b.n	9c0c <_malloc_r+0x190>
    9e62:	0993      	lsrs	r3, r2, #6
    9e64:	f103 0139 	add.w	r1, r3, #57	; 0x39
    9e68:	00c9      	lsls	r1, r1, #3
    9e6a:	3338      	adds	r3, #56	; 0x38
    9e6c:	e79c      	b.n	9da8 <_malloc_r+0x32c>
    9e6e:	42bd      	cmp	r5, r7
    9e70:	d05f      	beq.n	9f32 <_malloc_r+0x4b6>
    9e72:	68bd      	ldr	r5, [r7, #8]
    9e74:	6868      	ldr	r0, [r5, #4]
    9e76:	f020 0803 	bic.w	r8, r0, #3
    9e7a:	4546      	cmp	r6, r8
    9e7c:	eba8 0306 	sub.w	r3, r8, r6
    9e80:	d802      	bhi.n	9e88 <_malloc_r+0x40c>
    9e82:	2b0f      	cmp	r3, #15
    9e84:	f73f af62 	bgt.w	9d4c <_malloc_r+0x2d0>
    9e88:	4620      	mov	r0, r4
    9e8a:	f000 f8ad 	bl	9fe8 <__malloc_unlock>
    9e8e:	2500      	movs	r5, #0
    9e90:	e6bc      	b.n	9c0c <_malloc_r+0x190>
    9e92:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    9e96:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    9e9a:	00c3      	lsls	r3, r0, #3
    9e9c:	e634      	b.n	9b08 <_malloc_r+0x8c>
    9e9e:	f859 3908 	ldr.w	r3, [r9], #-8
    9ea2:	454b      	cmp	r3, r9
    9ea4:	f040 8096 	bne.w	9fd4 <_malloc_r+0x558>
    9ea8:	f010 0f03 	tst.w	r0, #3
    9eac:	f100 30ff 	add.w	r0, r0, #4294967295
    9eb0:	d1f5      	bne.n	9e9e <_malloc_r+0x422>
    9eb2:	687b      	ldr	r3, [r7, #4]
    9eb4:	ea23 0301 	bic.w	r3, r3, r1
    9eb8:	607b      	str	r3, [r7, #4]
    9eba:	0049      	lsls	r1, r1, #1
    9ebc:	4299      	cmp	r1, r3
    9ebe:	f63f aec0 	bhi.w	9c42 <_malloc_r+0x1c6>
    9ec2:	b919      	cbnz	r1, 9ecc <_malloc_r+0x450>
    9ec4:	e6bd      	b.n	9c42 <_malloc_r+0x1c6>
    9ec6:	0049      	lsls	r1, r1, #1
    9ec8:	f10e 0e04 	add.w	lr, lr, #4
    9ecc:	4219      	tst	r1, r3
    9ece:	d0fa      	beq.n	9ec6 <_malloc_r+0x44a>
    9ed0:	4670      	mov	r0, lr
    9ed2:	e667      	b.n	9ba4 <_malloc_r+0x128>
    9ed4:	f103 0810 	add.w	r8, r3, #16
    9ed8:	e6d0      	b.n	9c7c <_malloc_r+0x200>
    9eda:	109a      	asrs	r2, r3, #2
    9edc:	f04f 0801 	mov.w	r8, #1
    9ee0:	687b      	ldr	r3, [r7, #4]
    9ee2:	fa08 f202 	lsl.w	r2, r8, r2
    9ee6:	431a      	orrs	r2, r3
    9ee8:	607a      	str	r2, [r7, #4]
    9eea:	e770      	b.n	9dce <_malloc_r+0x352>
    9eec:	eb02 0108 	add.w	r1, r2, r8
    9ef0:	4249      	negs	r1, r1
    9ef2:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    9ef6:	4651      	mov	r1, sl
    9ef8:	4620      	mov	r0, r4
    9efa:	9200      	str	r2, [sp, #0]
    9efc:	f001 fdf4 	bl	bae8 <_sbrk_r>
    9f00:	1c43      	adds	r3, r0, #1
    9f02:	e9dd 2300 	ldrd	r2, r3, [sp]
    9f06:	f47f aeef 	bne.w	9ce8 <_malloc_r+0x26c>
    9f0a:	46da      	mov	sl, fp
    9f0c:	e6ef      	b.n	9cee <_malloc_r+0x272>
    9f0e:	2b54      	cmp	r3, #84	; 0x54
    9f10:	d825      	bhi.n	9f5e <_malloc_r+0x4e2>
    9f12:	0b13      	lsrs	r3, r2, #12
    9f14:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    9f18:	00c9      	lsls	r1, r1, #3
    9f1a:	336e      	adds	r3, #110	; 0x6e
    9f1c:	e744      	b.n	9da8 <_malloc_r+0x32c>
    9f1e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    9f22:	d825      	bhi.n	9f70 <_malloc_r+0x4f4>
    9f24:	0bf3      	lsrs	r3, r6, #15
    9f26:	f103 0078 	add.w	r0, r3, #120	; 0x78
    9f2a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    9f2e:	00c3      	lsls	r3, r0, #3
    9f30:	e5ea      	b.n	9b08 <_malloc_r+0x8c>
    9f32:	4b29      	ldr	r3, [pc, #164]	; (9fd8 <_malloc_r+0x55c>)
    9f34:	6818      	ldr	r0, [r3, #0]
    9f36:	4440      	add	r0, r8
    9f38:	6018      	str	r0, [r3, #0]
    9f3a:	e6b1      	b.n	9ca0 <_malloc_r+0x224>
    9f3c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    9f40:	f1bc 0f00 	cmp.w	ip, #0
    9f44:	f47f aeac 	bne.w	9ca0 <_malloc_r+0x224>
    9f48:	68bd      	ldr	r5, [r7, #8]
    9f4a:	44c8      	add	r8, r9
    9f4c:	f048 0001 	orr.w	r0, r8, #1
    9f50:	6068      	str	r0, [r5, #4]
    9f52:	e6f0      	b.n	9d36 <_malloc_r+0x2ba>
    9f54:	4615      	mov	r5, r2
    9f56:	e6ee      	b.n	9d36 <_malloc_r+0x2ba>
    9f58:	2301      	movs	r3, #1
    9f5a:	6053      	str	r3, [r2, #4]
    9f5c:	e794      	b.n	9e88 <_malloc_r+0x40c>
    9f5e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    9f62:	d823      	bhi.n	9fac <_malloc_r+0x530>
    9f64:	0bd3      	lsrs	r3, r2, #15
    9f66:	f103 0178 	add.w	r1, r3, #120	; 0x78
    9f6a:	00c9      	lsls	r1, r1, #3
    9f6c:	3377      	adds	r3, #119	; 0x77
    9f6e:	e71b      	b.n	9da8 <_malloc_r+0x32c>
    9f70:	f240 5254 	movw	r2, #1364	; 0x554
    9f74:	4293      	cmp	r3, r2
    9f76:	d823      	bhi.n	9fc0 <_malloc_r+0x544>
    9f78:	0cb3      	lsrs	r3, r6, #18
    9f7a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    9f7e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    9f82:	00c3      	lsls	r3, r0, #3
    9f84:	e5c0      	b.n	9b08 <_malloc_r+0x8c>
    9f86:	f1ab 0b08 	sub.w	fp, fp, #8
    9f8a:	44d8      	add	r8, fp
    9f8c:	eba8 0802 	sub.w	r8, r8, r2
    9f90:	f04f 0a00 	mov.w	sl, #0
    9f94:	e6ab      	b.n	9cee <_malloc_r+0x272>
    9f96:	f105 0108 	add.w	r1, r5, #8
    9f9a:	4620      	mov	r0, r4
    9f9c:	9300      	str	r3, [sp, #0]
    9f9e:	f002 f941 	bl	c224 <_free_r>
    9fa2:	68bd      	ldr	r5, [r7, #8]
    9fa4:	9b00      	ldr	r3, [sp, #0]
    9fa6:	6868      	ldr	r0, [r5, #4]
    9fa8:	6819      	ldr	r1, [r3, #0]
    9faa:	e6c4      	b.n	9d36 <_malloc_r+0x2ba>
    9fac:	f240 5154 	movw	r1, #1364	; 0x554
    9fb0:	428b      	cmp	r3, r1
    9fb2:	d80b      	bhi.n	9fcc <_malloc_r+0x550>
    9fb4:	0c93      	lsrs	r3, r2, #18
    9fb6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    9fba:	00c9      	lsls	r1, r1, #3
    9fbc:	337c      	adds	r3, #124	; 0x7c
    9fbe:	e6f3      	b.n	9da8 <_malloc_r+0x32c>
    9fc0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    9fc4:	207f      	movs	r0, #127	; 0x7f
    9fc6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    9fca:	e59d      	b.n	9b08 <_malloc_r+0x8c>
    9fcc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    9fd0:	237e      	movs	r3, #126	; 0x7e
    9fd2:	e6e9      	b.n	9da8 <_malloc_r+0x32c>
    9fd4:	687b      	ldr	r3, [r7, #4]
    9fd6:	e770      	b.n	9eba <_malloc_r+0x43e>
    9fd8:	2001e2b0 	.word	0x2001e2b0

00009fdc <__malloc_lock>:
    9fdc:	4801      	ldr	r0, [pc, #4]	; (9fe4 <__malloc_lock+0x8>)
    9fde:	f001 bdd9 	b.w	bb94 <__retarget_lock_acquire_recursive>
    9fe2:	bf00      	nop
    9fe4:	2001e2a8 	.word	0x2001e2a8

00009fe8 <__malloc_unlock>:
    9fe8:	4801      	ldr	r0, [pc, #4]	; (9ff0 <__malloc_unlock+0x8>)
    9fea:	f001 bdd5 	b.w	bb98 <__retarget_lock_release_recursive>
    9fee:	bf00      	nop
    9ff0:	2001e2a8 	.word	0x2001e2a8

00009ff4 <realloc>:
    9ff4:	b410      	push	{r4}
    9ff6:	4c04      	ldr	r4, [pc, #16]	; (a008 <realloc+0x14>)
    9ff8:	4603      	mov	r3, r0
    9ffa:	460a      	mov	r2, r1
    9ffc:	6820      	ldr	r0, [r4, #0]
    9ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
    a002:	4619      	mov	r1, r3
    a004:	f000 b802 	b.w	a00c <_realloc_r>
    a008:	20008b50 	.word	0x20008b50

0000a00c <_realloc_r>:
    a00c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a010:	4617      	mov	r7, r2
    a012:	2900      	cmp	r1, #0
    a014:	f000 8098 	beq.w	a148 <_realloc_r+0x13c>
    a018:	460c      	mov	r4, r1
    a01a:	f107 050b 	add.w	r5, r7, #11
    a01e:	4680      	mov	r8, r0
    a020:	f7ff ffdc 	bl	9fdc <__malloc_lock>
    a024:	2d16      	cmp	r5, #22
    a026:	f854 1c04 	ldr.w	r1, [r4, #-4]
    a02a:	d85b      	bhi.n	a0e4 <_realloc_r+0xd8>
    a02c:	2510      	movs	r5, #16
    a02e:	462a      	mov	r2, r5
    a030:	42af      	cmp	r7, r5
    a032:	d85c      	bhi.n	a0ee <_realloc_r+0xe2>
    a034:	f021 0603 	bic.w	r6, r1, #3
    a038:	4296      	cmp	r6, r2
    a03a:	f1a4 0908 	sub.w	r9, r4, #8
    a03e:	da62      	bge.n	a106 <_realloc_r+0xfa>
    a040:	4bbc      	ldr	r3, [pc, #752]	; (a334 <_realloc_r+0x328>)
    a042:	f8d3 c008 	ldr.w	ip, [r3, #8]
    a046:	eb09 0006 	add.w	r0, r9, r6
    a04a:	4584      	cmp	ip, r0
    a04c:	f000 8097 	beq.w	a17e <_realloc_r+0x172>
    a050:	f8d0 c004 	ldr.w	ip, [r0, #4]
    a054:	f02c 0301 	bic.w	r3, ip, #1
    a058:	4403      	add	r3, r0
    a05a:	685b      	ldr	r3, [r3, #4]
    a05c:	07db      	lsls	r3, r3, #31
    a05e:	d468      	bmi.n	a132 <_realloc_r+0x126>
    a060:	f02c 0c03 	bic.w	ip, ip, #3
    a064:	eb06 030c 	add.w	r3, r6, ip
    a068:	4293      	cmp	r3, r2
    a06a:	da47      	bge.n	a0fc <_realloc_r+0xf0>
    a06c:	07cb      	lsls	r3, r1, #31
    a06e:	d410      	bmi.n	a092 <_realloc_r+0x86>
    a070:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a074:	eba9 0a03 	sub.w	sl, r9, r3
    a078:	f8da 3004 	ldr.w	r3, [sl, #4]
    a07c:	f023 0103 	bic.w	r1, r3, #3
    a080:	448c      	add	ip, r1
    a082:	44b4      	add	ip, r6
    a084:	4594      	cmp	ip, r2
    a086:	f280 8111 	bge.w	a2ac <_realloc_r+0x2a0>
    a08a:	1873      	adds	r3, r6, r1
    a08c:	4293      	cmp	r3, r2
    a08e:	f280 80e8 	bge.w	a262 <_realloc_r+0x256>
    a092:	4639      	mov	r1, r7
    a094:	4640      	mov	r0, r8
    a096:	f7ff fcf1 	bl	9a7c <_malloc_r>
    a09a:	4607      	mov	r7, r0
    a09c:	b1e0      	cbz	r0, a0d8 <_realloc_r+0xcc>
    a09e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a0a2:	f023 0301 	bic.w	r3, r3, #1
    a0a6:	444b      	add	r3, r9
    a0a8:	f1a0 0208 	sub.w	r2, r0, #8
    a0ac:	4293      	cmp	r3, r2
    a0ae:	f000 80d2 	beq.w	a256 <_realloc_r+0x24a>
    a0b2:	1f32      	subs	r2, r6, #4
    a0b4:	2a24      	cmp	r2, #36	; 0x24
    a0b6:	f200 80f5 	bhi.w	a2a4 <_realloc_r+0x298>
    a0ba:	2a13      	cmp	r2, #19
    a0bc:	f200 80ac 	bhi.w	a218 <_realloc_r+0x20c>
    a0c0:	4603      	mov	r3, r0
    a0c2:	4622      	mov	r2, r4
    a0c4:	6811      	ldr	r1, [r2, #0]
    a0c6:	6019      	str	r1, [r3, #0]
    a0c8:	6851      	ldr	r1, [r2, #4]
    a0ca:	6059      	str	r1, [r3, #4]
    a0cc:	6892      	ldr	r2, [r2, #8]
    a0ce:	609a      	str	r2, [r3, #8]
    a0d0:	4621      	mov	r1, r4
    a0d2:	4640      	mov	r0, r8
    a0d4:	f002 f8a6 	bl	c224 <_free_r>
    a0d8:	4640      	mov	r0, r8
    a0da:	f7ff ff85 	bl	9fe8 <__malloc_unlock>
    a0de:	4638      	mov	r0, r7
    a0e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0e4:	f025 0507 	bic.w	r5, r5, #7
    a0e8:	2d00      	cmp	r5, #0
    a0ea:	462a      	mov	r2, r5
    a0ec:	daa0      	bge.n	a030 <_realloc_r+0x24>
    a0ee:	230c      	movs	r3, #12
    a0f0:	f8c8 3000 	str.w	r3, [r8]
    a0f4:	2700      	movs	r7, #0
    a0f6:	4638      	mov	r0, r7
    a0f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0fc:	461e      	mov	r6, r3
    a0fe:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    a102:	60d3      	str	r3, [r2, #12]
    a104:	609a      	str	r2, [r3, #8]
    a106:	1b73      	subs	r3, r6, r5
    a108:	2b0f      	cmp	r3, #15
    a10a:	d822      	bhi.n	a152 <_realloc_r+0x146>
    a10c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a110:	f003 0301 	and.w	r3, r3, #1
    a114:	4333      	orrs	r3, r6
    a116:	444e      	add	r6, r9
    a118:	f8c9 3004 	str.w	r3, [r9, #4]
    a11c:	6873      	ldr	r3, [r6, #4]
    a11e:	f043 0301 	orr.w	r3, r3, #1
    a122:	6073      	str	r3, [r6, #4]
    a124:	4640      	mov	r0, r8
    a126:	4627      	mov	r7, r4
    a128:	f7ff ff5e 	bl	9fe8 <__malloc_unlock>
    a12c:	4638      	mov	r0, r7
    a12e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a132:	07c9      	lsls	r1, r1, #31
    a134:	d4ad      	bmi.n	a092 <_realloc_r+0x86>
    a136:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a13a:	eba9 0a03 	sub.w	sl, r9, r3
    a13e:	f8da 1004 	ldr.w	r1, [sl, #4]
    a142:	f021 0103 	bic.w	r1, r1, #3
    a146:	e7a0      	b.n	a08a <_realloc_r+0x7e>
    a148:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a14c:	4611      	mov	r1, r2
    a14e:	f7ff bc95 	b.w	9a7c <_malloc_r>
    a152:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a156:	eb09 0105 	add.w	r1, r9, r5
    a15a:	f002 0201 	and.w	r2, r2, #1
    a15e:	444e      	add	r6, r9
    a160:	f043 0301 	orr.w	r3, r3, #1
    a164:	432a      	orrs	r2, r5
    a166:	f8c9 2004 	str.w	r2, [r9, #4]
    a16a:	604b      	str	r3, [r1, #4]
    a16c:	6873      	ldr	r3, [r6, #4]
    a16e:	f043 0301 	orr.w	r3, r3, #1
    a172:	3108      	adds	r1, #8
    a174:	6073      	str	r3, [r6, #4]
    a176:	4640      	mov	r0, r8
    a178:	f002 f854 	bl	c224 <_free_r>
    a17c:	e7d2      	b.n	a124 <_realloc_r+0x118>
    a17e:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a182:	f020 0b03 	bic.w	fp, r0, #3
    a186:	eb06 0c0b 	add.w	ip, r6, fp
    a18a:	f105 0010 	add.w	r0, r5, #16
    a18e:	4584      	cmp	ip, r0
    a190:	da4d      	bge.n	a22e <_realloc_r+0x222>
    a192:	07c9      	lsls	r1, r1, #31
    a194:	f53f af7d 	bmi.w	a092 <_realloc_r+0x86>
    a198:	f854 1c08 	ldr.w	r1, [r4, #-8]
    a19c:	eba9 0a01 	sub.w	sl, r9, r1
    a1a0:	f8da 1004 	ldr.w	r1, [sl, #4]
    a1a4:	f021 0103 	bic.w	r1, r1, #3
    a1a8:	448b      	add	fp, r1
    a1aa:	44b3      	add	fp, r6
    a1ac:	4558      	cmp	r0, fp
    a1ae:	f73f af6c 	bgt.w	a08a <_realloc_r+0x7e>
    a1b2:	4657      	mov	r7, sl
    a1b4:	f8da 100c 	ldr.w	r1, [sl, #12]
    a1b8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    a1bc:	1f32      	subs	r2, r6, #4
    a1be:	2a24      	cmp	r2, #36	; 0x24
    a1c0:	60c1      	str	r1, [r0, #12]
    a1c2:	6088      	str	r0, [r1, #8]
    a1c4:	f200 80db 	bhi.w	a37e <_realloc_r+0x372>
    a1c8:	2a13      	cmp	r2, #19
    a1ca:	f240 80d6 	bls.w	a37a <_realloc_r+0x36e>
    a1ce:	6821      	ldr	r1, [r4, #0]
    a1d0:	f8ca 1008 	str.w	r1, [sl, #8]
    a1d4:	6861      	ldr	r1, [r4, #4]
    a1d6:	f8ca 100c 	str.w	r1, [sl, #12]
    a1da:	2a1b      	cmp	r2, #27
    a1dc:	f200 80df 	bhi.w	a39e <_realloc_r+0x392>
    a1e0:	3408      	adds	r4, #8
    a1e2:	f10a 0210 	add.w	r2, sl, #16
    a1e6:	6821      	ldr	r1, [r4, #0]
    a1e8:	6011      	str	r1, [r2, #0]
    a1ea:	6861      	ldr	r1, [r4, #4]
    a1ec:	6051      	str	r1, [r2, #4]
    a1ee:	68a1      	ldr	r1, [r4, #8]
    a1f0:	6091      	str	r1, [r2, #8]
    a1f2:	eb0a 0105 	add.w	r1, sl, r5
    a1f6:	ebab 0205 	sub.w	r2, fp, r5
    a1fa:	f042 0201 	orr.w	r2, r2, #1
    a1fe:	6099      	str	r1, [r3, #8]
    a200:	604a      	str	r2, [r1, #4]
    a202:	f8da 3004 	ldr.w	r3, [sl, #4]
    a206:	f003 0301 	and.w	r3, r3, #1
    a20a:	432b      	orrs	r3, r5
    a20c:	4640      	mov	r0, r8
    a20e:	f8ca 3004 	str.w	r3, [sl, #4]
    a212:	f7ff fee9 	bl	9fe8 <__malloc_unlock>
    a216:	e76e      	b.n	a0f6 <_realloc_r+0xea>
    a218:	6823      	ldr	r3, [r4, #0]
    a21a:	6003      	str	r3, [r0, #0]
    a21c:	6863      	ldr	r3, [r4, #4]
    a21e:	6043      	str	r3, [r0, #4]
    a220:	2a1b      	cmp	r2, #27
    a222:	d868      	bhi.n	a2f6 <_realloc_r+0x2ea>
    a224:	f104 0208 	add.w	r2, r4, #8
    a228:	f100 0308 	add.w	r3, r0, #8
    a22c:	e74a      	b.n	a0c4 <_realloc_r+0xb8>
    a22e:	eb09 0205 	add.w	r2, r9, r5
    a232:	609a      	str	r2, [r3, #8]
    a234:	ebac 0305 	sub.w	r3, ip, r5
    a238:	f043 0301 	orr.w	r3, r3, #1
    a23c:	6053      	str	r3, [r2, #4]
    a23e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a242:	f003 0301 	and.w	r3, r3, #1
    a246:	432b      	orrs	r3, r5
    a248:	4640      	mov	r0, r8
    a24a:	f844 3c04 	str.w	r3, [r4, #-4]
    a24e:	f7ff fecb 	bl	9fe8 <__malloc_unlock>
    a252:	4627      	mov	r7, r4
    a254:	e74f      	b.n	a0f6 <_realloc_r+0xea>
    a256:	f850 3c04 	ldr.w	r3, [r0, #-4]
    a25a:	f023 0303 	bic.w	r3, r3, #3
    a25e:	441e      	add	r6, r3
    a260:	e751      	b.n	a106 <_realloc_r+0xfa>
    a262:	4657      	mov	r7, sl
    a264:	f8da 100c 	ldr.w	r1, [sl, #12]
    a268:	f857 0f08 	ldr.w	r0, [r7, #8]!
    a26c:	1f32      	subs	r2, r6, #4
    a26e:	2a24      	cmp	r2, #36	; 0x24
    a270:	60c1      	str	r1, [r0, #12]
    a272:	6088      	str	r0, [r1, #8]
    a274:	d84c      	bhi.n	a310 <_realloc_r+0x304>
    a276:	2a13      	cmp	r2, #19
    a278:	d948      	bls.n	a30c <_realloc_r+0x300>
    a27a:	6821      	ldr	r1, [r4, #0]
    a27c:	f8ca 1008 	str.w	r1, [sl, #8]
    a280:	6861      	ldr	r1, [r4, #4]
    a282:	f8ca 100c 	str.w	r1, [sl, #12]
    a286:	2a1b      	cmp	r2, #27
    a288:	d856      	bhi.n	a338 <_realloc_r+0x32c>
    a28a:	3408      	adds	r4, #8
    a28c:	f10a 0210 	add.w	r2, sl, #16
    a290:	461e      	mov	r6, r3
    a292:	6823      	ldr	r3, [r4, #0]
    a294:	6013      	str	r3, [r2, #0]
    a296:	6863      	ldr	r3, [r4, #4]
    a298:	6053      	str	r3, [r2, #4]
    a29a:	68a3      	ldr	r3, [r4, #8]
    a29c:	6093      	str	r3, [r2, #8]
    a29e:	46d1      	mov	r9, sl
    a2a0:	463c      	mov	r4, r7
    a2a2:	e730      	b.n	a106 <_realloc_r+0xfa>
    a2a4:	4621      	mov	r1, r4
    a2a6:	f001 fa95 	bl	b7d4 <memmove>
    a2aa:	e711      	b.n	a0d0 <_realloc_r+0xc4>
    a2ac:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    a2b0:	4657      	mov	r7, sl
    a2b2:	60cb      	str	r3, [r1, #12]
    a2b4:	6099      	str	r1, [r3, #8]
    a2b6:	f857 1f08 	ldr.w	r1, [r7, #8]!
    a2ba:	f8da 300c 	ldr.w	r3, [sl, #12]
    a2be:	60cb      	str	r3, [r1, #12]
    a2c0:	1f32      	subs	r2, r6, #4
    a2c2:	2a24      	cmp	r2, #36	; 0x24
    a2c4:	6099      	str	r1, [r3, #8]
    a2c6:	d82d      	bhi.n	a324 <_realloc_r+0x318>
    a2c8:	2a13      	cmp	r2, #19
    a2ca:	d929      	bls.n	a320 <_realloc_r+0x314>
    a2cc:	6823      	ldr	r3, [r4, #0]
    a2ce:	f8ca 3008 	str.w	r3, [sl, #8]
    a2d2:	6863      	ldr	r3, [r4, #4]
    a2d4:	f8ca 300c 	str.w	r3, [sl, #12]
    a2d8:	2a1b      	cmp	r2, #27
    a2da:	d842      	bhi.n	a362 <_realloc_r+0x356>
    a2dc:	3408      	adds	r4, #8
    a2de:	f10a 0310 	add.w	r3, sl, #16
    a2e2:	6822      	ldr	r2, [r4, #0]
    a2e4:	601a      	str	r2, [r3, #0]
    a2e6:	6862      	ldr	r2, [r4, #4]
    a2e8:	605a      	str	r2, [r3, #4]
    a2ea:	68a2      	ldr	r2, [r4, #8]
    a2ec:	609a      	str	r2, [r3, #8]
    a2ee:	4666      	mov	r6, ip
    a2f0:	46d1      	mov	r9, sl
    a2f2:	463c      	mov	r4, r7
    a2f4:	e707      	b.n	a106 <_realloc_r+0xfa>
    a2f6:	68a3      	ldr	r3, [r4, #8]
    a2f8:	6083      	str	r3, [r0, #8]
    a2fa:	68e3      	ldr	r3, [r4, #12]
    a2fc:	60c3      	str	r3, [r0, #12]
    a2fe:	2a24      	cmp	r2, #36	; 0x24
    a300:	d026      	beq.n	a350 <_realloc_r+0x344>
    a302:	f104 0210 	add.w	r2, r4, #16
    a306:	f100 0310 	add.w	r3, r0, #16
    a30a:	e6db      	b.n	a0c4 <_realloc_r+0xb8>
    a30c:	463a      	mov	r2, r7
    a30e:	e7bf      	b.n	a290 <_realloc_r+0x284>
    a310:	4621      	mov	r1, r4
    a312:	4638      	mov	r0, r7
    a314:	461e      	mov	r6, r3
    a316:	46d1      	mov	r9, sl
    a318:	f001 fa5c 	bl	b7d4 <memmove>
    a31c:	463c      	mov	r4, r7
    a31e:	e6f2      	b.n	a106 <_realloc_r+0xfa>
    a320:	463b      	mov	r3, r7
    a322:	e7de      	b.n	a2e2 <_realloc_r+0x2d6>
    a324:	4621      	mov	r1, r4
    a326:	4638      	mov	r0, r7
    a328:	4666      	mov	r6, ip
    a32a:	46d1      	mov	r9, sl
    a32c:	f001 fa52 	bl	b7d4 <memmove>
    a330:	463c      	mov	r4, r7
    a332:	e6e8      	b.n	a106 <_realloc_r+0xfa>
    a334:	20008734 	.word	0x20008734
    a338:	68a1      	ldr	r1, [r4, #8]
    a33a:	f8ca 1010 	str.w	r1, [sl, #16]
    a33e:	68e1      	ldr	r1, [r4, #12]
    a340:	f8ca 1014 	str.w	r1, [sl, #20]
    a344:	2a24      	cmp	r2, #36	; 0x24
    a346:	d020      	beq.n	a38a <_realloc_r+0x37e>
    a348:	3410      	adds	r4, #16
    a34a:	f10a 0218 	add.w	r2, sl, #24
    a34e:	e79f      	b.n	a290 <_realloc_r+0x284>
    a350:	6923      	ldr	r3, [r4, #16]
    a352:	6103      	str	r3, [r0, #16]
    a354:	6961      	ldr	r1, [r4, #20]
    a356:	6141      	str	r1, [r0, #20]
    a358:	f104 0218 	add.w	r2, r4, #24
    a35c:	f100 0318 	add.w	r3, r0, #24
    a360:	e6b0      	b.n	a0c4 <_realloc_r+0xb8>
    a362:	68a3      	ldr	r3, [r4, #8]
    a364:	f8ca 3010 	str.w	r3, [sl, #16]
    a368:	68e3      	ldr	r3, [r4, #12]
    a36a:	f8ca 3014 	str.w	r3, [sl, #20]
    a36e:	2a24      	cmp	r2, #36	; 0x24
    a370:	d021      	beq.n	a3b6 <_realloc_r+0x3aa>
    a372:	3410      	adds	r4, #16
    a374:	f10a 0318 	add.w	r3, sl, #24
    a378:	e7b3      	b.n	a2e2 <_realloc_r+0x2d6>
    a37a:	463a      	mov	r2, r7
    a37c:	e733      	b.n	a1e6 <_realloc_r+0x1da>
    a37e:	4621      	mov	r1, r4
    a380:	4638      	mov	r0, r7
    a382:	f001 fa27 	bl	b7d4 <memmove>
    a386:	4b16      	ldr	r3, [pc, #88]	; (a3e0 <_realloc_r+0x3d4>)
    a388:	e733      	b.n	a1f2 <_realloc_r+0x1e6>
    a38a:	6922      	ldr	r2, [r4, #16]
    a38c:	f8ca 2018 	str.w	r2, [sl, #24]
    a390:	6962      	ldr	r2, [r4, #20]
    a392:	f8ca 201c 	str.w	r2, [sl, #28]
    a396:	3418      	adds	r4, #24
    a398:	f10a 0220 	add.w	r2, sl, #32
    a39c:	e778      	b.n	a290 <_realloc_r+0x284>
    a39e:	68a1      	ldr	r1, [r4, #8]
    a3a0:	f8ca 1010 	str.w	r1, [sl, #16]
    a3a4:	68e1      	ldr	r1, [r4, #12]
    a3a6:	f8ca 1014 	str.w	r1, [sl, #20]
    a3aa:	2a24      	cmp	r2, #36	; 0x24
    a3ac:	d00d      	beq.n	a3ca <_realloc_r+0x3be>
    a3ae:	3410      	adds	r4, #16
    a3b0:	f10a 0218 	add.w	r2, sl, #24
    a3b4:	e717      	b.n	a1e6 <_realloc_r+0x1da>
    a3b6:	6923      	ldr	r3, [r4, #16]
    a3b8:	f8ca 3018 	str.w	r3, [sl, #24]
    a3bc:	6963      	ldr	r3, [r4, #20]
    a3be:	f8ca 301c 	str.w	r3, [sl, #28]
    a3c2:	3418      	adds	r4, #24
    a3c4:	f10a 0320 	add.w	r3, sl, #32
    a3c8:	e78b      	b.n	a2e2 <_realloc_r+0x2d6>
    a3ca:	6922      	ldr	r2, [r4, #16]
    a3cc:	f8ca 2018 	str.w	r2, [sl, #24]
    a3d0:	6962      	ldr	r2, [r4, #20]
    a3d2:	f8ca 201c 	str.w	r2, [sl, #28]
    a3d6:	3418      	adds	r4, #24
    a3d8:	f10a 0220 	add.w	r2, sl, #32
    a3dc:	e703      	b.n	a1e6 <_realloc_r+0x1da>
    a3de:	bf00      	nop
    a3e0:	20008734 	.word	0x20008734
    a3e4:	00000000 	.word	0x00000000

0000a3e8 <_strtod_l>:
    a3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3ec:	ed2d 8b10 	vpush	{d8-d15}
    a3f0:	b097      	sub	sp, #92	; 0x5c
    a3f2:	468a      	mov	sl, r1
    a3f4:	2100      	movs	r1, #0
    a3f6:	9207      	str	r2, [sp, #28]
    a3f8:	9112      	str	r1, [sp, #72]	; 0x48
    a3fa:	2200      	movs	r2, #0
    a3fc:	2100      	movs	r1, #0
    a3fe:	e9cd 1204 	strd	r1, r2, [sp, #16]
    a402:	4680      	mov	r8, r0
    a404:	4651      	mov	r1, sl
    a406:	9111      	str	r1, [sp, #68]	; 0x44
    a408:	460f      	mov	r7, r1
    a40a:	f811 2b01 	ldrb.w	r2, [r1], #1
    a40e:	2a2d      	cmp	r2, #45	; 0x2d
    a410:	d85e      	bhi.n	a4d0 <_strtod_l+0xe8>
    a412:	a001      	add	r0, pc, #4	; (adr r0, a418 <_strtod_l+0x30>)
    a414:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    a418:	0000a5b9 	.word	0x0000a5b9
    a41c:	0000a4d1 	.word	0x0000a4d1
    a420:	0000a4d1 	.word	0x0000a4d1
    a424:	0000a4d1 	.word	0x0000a4d1
    a428:	0000a4d1 	.word	0x0000a4d1
    a42c:	0000a4d1 	.word	0x0000a4d1
    a430:	0000a4d1 	.word	0x0000a4d1
    a434:	0000a4d1 	.word	0x0000a4d1
    a438:	0000a4d1 	.word	0x0000a4d1
    a43c:	0000a407 	.word	0x0000a407
    a440:	0000a407 	.word	0x0000a407
    a444:	0000a407 	.word	0x0000a407
    a448:	0000a407 	.word	0x0000a407
    a44c:	0000a407 	.word	0x0000a407
    a450:	0000a4d1 	.word	0x0000a4d1
    a454:	0000a4d1 	.word	0x0000a4d1
    a458:	0000a4d1 	.word	0x0000a4d1
    a45c:	0000a4d1 	.word	0x0000a4d1
    a460:	0000a4d1 	.word	0x0000a4d1
    a464:	0000a4d1 	.word	0x0000a4d1
    a468:	0000a4d1 	.word	0x0000a4d1
    a46c:	0000a4d1 	.word	0x0000a4d1
    a470:	0000a4d1 	.word	0x0000a4d1
    a474:	0000a4d1 	.word	0x0000a4d1
    a478:	0000a4d1 	.word	0x0000a4d1
    a47c:	0000a4d1 	.word	0x0000a4d1
    a480:	0000a4d1 	.word	0x0000a4d1
    a484:	0000a4d1 	.word	0x0000a4d1
    a488:	0000a4d1 	.word	0x0000a4d1
    a48c:	0000a4d1 	.word	0x0000a4d1
    a490:	0000a4d1 	.word	0x0000a4d1
    a494:	0000a4d1 	.word	0x0000a4d1
    a498:	0000a407 	.word	0x0000a407
    a49c:	0000a4d1 	.word	0x0000a4d1
    a4a0:	0000a4d1 	.word	0x0000a4d1
    a4a4:	0000a4d1 	.word	0x0000a4d1
    a4a8:	0000a4d1 	.word	0x0000a4d1
    a4ac:	0000a4d1 	.word	0x0000a4d1
    a4b0:	0000a4d1 	.word	0x0000a4d1
    a4b4:	0000a4d1 	.word	0x0000a4d1
    a4b8:	0000a4d1 	.word	0x0000a4d1
    a4bc:	0000a4d1 	.word	0x0000a4d1
    a4c0:	0000a4d1 	.word	0x0000a4d1
    a4c4:	0000abf3 	.word	0x0000abf3
    a4c8:	0000a4d1 	.word	0x0000a4d1
    a4cc:	0000abdf 	.word	0x0000abdf
    a4d0:	2100      	movs	r1, #0
    a4d2:	9109      	str	r1, [sp, #36]	; 0x24
    a4d4:	2a30      	cmp	r2, #48	; 0x30
    a4d6:	d07d      	beq.n	a5d4 <_strtod_l+0x1ec>
    a4d8:	2300      	movs	r3, #0
    a4da:	9308      	str	r3, [sp, #32]
    a4dc:	2a2f      	cmp	r2, #47	; 0x2f
    a4de:	4614      	mov	r4, r2
    a4e0:	f240 84cd 	bls.w	ae7e <_strtod_l+0xa96>
    a4e4:	f04f 0900 	mov.w	r9, #0
    a4e8:	4638      	mov	r0, r7
    a4ea:	464e      	mov	r6, r9
    a4ec:	464d      	mov	r5, r9
    a4ee:	e012      	b.n	a516 <_strtod_l+0x12e>
    a4f0:	3001      	adds	r0, #1
    a4f2:	2d08      	cmp	r5, #8
    a4f4:	9011      	str	r0, [sp, #68]	; 0x44
    a4f6:	bfc8      	it	gt
    a4f8:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    a4fc:	7804      	ldrb	r4, [r0, #0]
    a4fe:	bfc6      	itte	gt
    a500:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    a504:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    a508:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    a50c:	2c2f      	cmp	r4, #47	; 0x2f
    a50e:	f105 0501 	add.w	r5, r5, #1
    a512:	4622      	mov	r2, r4
    a514:	dd6f      	ble.n	a5f6 <_strtod_l+0x20e>
    a516:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    a51a:	2c39      	cmp	r4, #57	; 0x39
    a51c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a520:	dde6      	ble.n	a4f0 <_strtod_l+0x108>
    a522:	499f      	ldr	r1, [pc, #636]	; (a7a0 <_strtod_l+0x3b8>)
    a524:	2201      	movs	r2, #1
    a526:	f001 fa23 	bl	b970 <strncmp>
    a52a:	2800      	cmp	r0, #0
    a52c:	d137      	bne.n	a59e <_strtod_l+0x1b6>
    a52e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a530:	461a      	mov	r2, r3
    a532:	3301      	adds	r3, #1
    a534:	9311      	str	r3, [sp, #68]	; 0x44
    a536:	7854      	ldrb	r4, [r2, #1]
    a538:	2d00      	cmp	r5, #0
    a53a:	f040 8543 	bne.w	afc4 <_strtod_l+0xbdc>
    a53e:	2c30      	cmp	r4, #48	; 0x30
    a540:	f040 8524 	bne.w	af8c <_strtod_l+0xba4>
    a544:	f1c3 0201 	rsb	r2, r3, #1
    a548:	1898      	adds	r0, r3, r2
    a54a:	3301      	adds	r3, #1
    a54c:	9311      	str	r3, [sp, #68]	; 0x44
    a54e:	781c      	ldrb	r4, [r3, #0]
    a550:	2c30      	cmp	r4, #48	; 0x30
    a552:	d0f9      	beq.n	a548 <_strtod_l+0x160>
    a554:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a558:	2b08      	cmp	r3, #8
    a55a:	f200 8301 	bhi.w	ab60 <_strtod_l+0x778>
    a55e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    a560:	1c43      	adds	r3, r0, #1
    a562:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a566:	930b      	str	r3, [sp, #44]	; 0x2c
    a568:	2501      	movs	r5, #1
    a56a:	46bc      	mov	ip, r7
    a56c:	f04f 0e00 	mov.w	lr, #0
    a570:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    a574:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    a578:	2000      	movs	r0, #0
    a57a:	f10c 0301 	add.w	r3, ip, #1
    a57e:	9311      	str	r3, [sp, #68]	; 0x44
    a580:	f89c 4001 	ldrb.w	r4, [ip, #1]
    a584:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    a588:	2909      	cmp	r1, #9
    a58a:	f200 82bb 	bhi.w	ab04 <_strtod_l+0x71c>
    a58e:	3001      	adds	r0, #1
    a590:	468b      	mov	fp, r1
    a592:	2900      	cmp	r1, #0
    a594:	f040 844f 	bne.w	ae36 <_strtod_l+0xa4e>
    a598:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    a59c:	e7ed      	b.n	a57a <_strtod_l+0x192>
    a59e:	2000      	movs	r0, #0
    a5a0:	2c65      	cmp	r4, #101	; 0x65
    a5a2:	46ae      	mov	lr, r5
    a5a4:	900b      	str	r0, [sp, #44]	; 0x2c
    a5a6:	4684      	mov	ip, r0
    a5a8:	d001      	beq.n	a5ae <_strtod_l+0x1c6>
    a5aa:	2c45      	cmp	r4, #69	; 0x45
    a5ac:	d130      	bne.n	a610 <_strtod_l+0x228>
    a5ae:	2d00      	cmp	r5, #0
    a5b0:	d16b      	bne.n	a68a <_strtod_l+0x2a2>
    a5b2:	9b08      	ldr	r3, [sp, #32]
    a5b4:	4303      	orrs	r3, r0
    a5b6:	d167      	bne.n	a688 <_strtod_l+0x2a0>
    a5b8:	9b07      	ldr	r3, [sp, #28]
    a5ba:	ed9f 8b77 	vldr	d8, [pc, #476]	; a798 <_strtod_l+0x3b0>
    a5be:	b113      	cbz	r3, a5c6 <_strtod_l+0x1de>
    a5c0:	9b07      	ldr	r3, [sp, #28]
    a5c2:	f8c3 a000 	str.w	sl, [r3]
    a5c6:	eeb0 0b48 	vmov.f64	d0, d8
    a5ca:	b017      	add	sp, #92	; 0x5c
    a5cc:	ecbd 8b10 	vpop	{d8-d15}
    a5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5d4:	787a      	ldrb	r2, [r7, #1]
    a5d6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    a5da:	2a58      	cmp	r2, #88	; 0x58
    a5dc:	f000 840c 	beq.w	adf8 <_strtod_l+0xa10>
    a5e0:	3701      	adds	r7, #1
    a5e2:	9711      	str	r7, [sp, #68]	; 0x44
    a5e4:	783a      	ldrb	r2, [r7, #0]
    a5e6:	2a30      	cmp	r2, #48	; 0x30
    a5e8:	d0fa      	beq.n	a5e0 <_strtod_l+0x1f8>
    a5ea:	2a00      	cmp	r2, #0
    a5ec:	f000 80b7 	beq.w	a75e <_strtod_l+0x376>
    a5f0:	2301      	movs	r3, #1
    a5f2:	9308      	str	r3, [sp, #32]
    a5f4:	e772      	b.n	a4dc <_strtod_l+0xf4>
    a5f6:	496a      	ldr	r1, [pc, #424]	; (a7a0 <_strtod_l+0x3b8>)
    a5f8:	2201      	movs	r2, #1
    a5fa:	f001 f9b9 	bl	b970 <strncmp>
    a5fe:	2800      	cmp	r0, #0
    a600:	f000 80c0 	beq.w	a784 <_strtod_l+0x39c>
    a604:	46ae      	mov	lr, r5
    a606:	f04f 0c00 	mov.w	ip, #0
    a60a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    a60e:	4660      	mov	r0, ip
    a610:	f04f 0b00 	mov.w	fp, #0
    a614:	2d00      	cmp	r5, #0
    a616:	d07e      	beq.n	a716 <_strtod_l+0x32e>
    a618:	ee07 6a90 	vmov	s15, r6
    a61c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a61e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    a622:	ebab 0303 	sub.w	r3, fp, r3
    a626:	f1be 0f00 	cmp.w	lr, #0
    a62a:	bf08      	it	eq
    a62c:	46ae      	moveq	lr, r5
    a62e:	2d10      	cmp	r5, #16
    a630:	930a      	str	r3, [sp, #40]	; 0x28
    a632:	462b      	mov	r3, r5
    a634:	bfa8      	it	ge
    a636:	2310      	movge	r3, #16
    a638:	2d09      	cmp	r5, #9
    a63a:	ed8d 7b04 	vstr	d7, [sp, #16]
    a63e:	dd0c      	ble.n	a65a <_strtod_l+0x272>
    a640:	4a58      	ldr	r2, [pc, #352]	; (a7a4 <_strtod_l+0x3bc>)
    a642:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    a646:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    a64a:	ee06 9a90 	vmov	s13, r9
    a64e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a652:	eea7 6b05 	vfma.f64	d6, d7, d5
    a656:	ed8d 6b04 	vstr	d6, [sp, #16]
    a65a:	2d0f      	cmp	r5, #15
    a65c:	f300 80a8 	bgt.w	a7b0 <_strtod_l+0x3c8>
    a660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a662:	2a00      	cmp	r2, #0
    a664:	f000 83e4 	beq.w	ae30 <_strtod_l+0xa48>
    a668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a66a:	f340 833c 	ble.w	ace6 <_strtod_l+0x8fe>
    a66e:	2a16      	cmp	r2, #22
    a670:	f340 8498 	ble.w	afa4 <_strtod_l+0xbbc>
    a674:	990a      	ldr	r1, [sp, #40]	; 0x28
    a676:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    a67a:	428a      	cmp	r2, r1
    a67c:	f280 84a6 	bge.w	afcc <_strtod_l+0xbe4>
    a680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a682:	1aeb      	subs	r3, r5, r3
    a684:	4413      	add	r3, r2
    a686:	e099      	b.n	a7bc <_strtod_l+0x3d4>
    a688:	2500      	movs	r5, #0
    a68a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    a68e:	f10a 0301 	add.w	r3, sl, #1
    a692:	9311      	str	r3, [sp, #68]	; 0x44
    a694:	f89a 4001 	ldrb.w	r4, [sl, #1]
    a698:	2c2b      	cmp	r4, #43	; 0x2b
    a69a:	f000 825e 	beq.w	ab5a <_strtod_l+0x772>
    a69e:	2c2d      	cmp	r4, #45	; 0x2d
    a6a0:	f000 81f7 	beq.w	aa92 <_strtod_l+0x6aa>
    a6a4:	2300      	movs	r3, #0
    a6a6:	930a      	str	r3, [sp, #40]	; 0x28
    a6a8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    a6ac:	2b09      	cmp	r3, #9
    a6ae:	f200 81eb 	bhi.w	aa88 <_strtod_l+0x6a0>
    a6b2:	2c30      	cmp	r4, #48	; 0x30
    a6b4:	d105      	bne.n	a6c2 <_strtod_l+0x2da>
    a6b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a6b8:	3301      	adds	r3, #1
    a6ba:	9311      	str	r3, [sp, #68]	; 0x44
    a6bc:	781c      	ldrb	r4, [r3, #0]
    a6be:	2c30      	cmp	r4, #48	; 0x30
    a6c0:	d0fa      	beq.n	a6b8 <_strtod_l+0x2d0>
    a6c2:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a6c6:	2b08      	cmp	r3, #8
    a6c8:	d8a2      	bhi.n	a610 <_strtod_l+0x228>
    a6ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a6cc:	920c      	str	r2, [sp, #48]	; 0x30
    a6ce:	1c53      	adds	r3, r2, #1
    a6d0:	9311      	str	r3, [sp, #68]	; 0x44
    a6d2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a6d6:	7854      	ldrb	r4, [r2, #1]
    a6d8:	2c2f      	cmp	r4, #47	; 0x2f
    a6da:	dc07      	bgt.n	a6ec <_strtod_l+0x304>
    a6dc:	e3de      	b.n	ae9c <_strtod_l+0xab4>
    a6de:	3301      	adds	r3, #1
    a6e0:	9311      	str	r3, [sp, #68]	; 0x44
    a6e2:	784c      	ldrb	r4, [r1, #1]
    a6e4:	2c2f      	cmp	r4, #47	; 0x2f
    a6e6:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    a6ea:	dd06      	ble.n	a6fa <_strtod_l+0x312>
    a6ec:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    a6f0:	2c39      	cmp	r4, #57	; 0x39
    a6f2:	4619      	mov	r1, r3
    a6f4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    a6f8:	ddf1      	ble.n	a6de <_strtod_l+0x2f6>
    a6fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a6fc:	1a9b      	subs	r3, r3, r2
    a6fe:	2b08      	cmp	r3, #8
    a700:	f340 83cc 	ble.w	ae9c <_strtod_l+0xab4>
    a704:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    a708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a70a:	2b00      	cmp	r3, #0
    a70c:	d082      	beq.n	a614 <_strtod_l+0x22c>
    a70e:	f1cb 0b00 	rsb	fp, fp, #0
    a712:	2d00      	cmp	r5, #0
    a714:	d180      	bne.n	a618 <_strtod_l+0x230>
    a716:	9b08      	ldr	r3, [sp, #32]
    a718:	4303      	orrs	r3, r0
    a71a:	d120      	bne.n	a75e <_strtod_l+0x376>
    a71c:	f1bc 0f00 	cmp.w	ip, #0
    a720:	f47f af4a 	bne.w	a5b8 <_strtod_l+0x1d0>
    a724:	2c69      	cmp	r4, #105	; 0x69
    a726:	f000 83cf 	beq.w	aec8 <_strtod_l+0xae0>
    a72a:	f300 82f3 	bgt.w	ad14 <_strtod_l+0x92c>
    a72e:	2c49      	cmp	r4, #73	; 0x49
    a730:	f000 83ca 	beq.w	aec8 <_strtod_l+0xae0>
    a734:	2c4e      	cmp	r4, #78	; 0x4e
    a736:	f47f af3f 	bne.w	a5b8 <_strtod_l+0x1d0>
    a73a:	491b      	ldr	r1, [pc, #108]	; (a7a8 <_strtod_l+0x3c0>)
    a73c:	a811      	add	r0, sp, #68	; 0x44
    a73e:	f002 f993 	bl	ca68 <__match>
    a742:	2800      	cmp	r0, #0
    a744:	f43f af38 	beq.w	a5b8 <_strtod_l+0x1d0>
    a748:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a74a:	781b      	ldrb	r3, [r3, #0]
    a74c:	2b28      	cmp	r3, #40	; 0x28
    a74e:	f000 84f2 	beq.w	b136 <_strtod_l+0xd4e>
    a752:	4816      	ldr	r0, [pc, #88]	; (a7ac <_strtod_l+0x3c4>)
    a754:	f001 fcc4 	bl	c0e0 <nan>
    a758:	eeb0 8b40 	vmov.f64	d8, d0
    a75c:	e001      	b.n	a762 <_strtod_l+0x37a>
    a75e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; a798 <_strtod_l+0x3b0>
    a762:	9a07      	ldr	r2, [sp, #28]
    a764:	b10a      	cbz	r2, a76a <_strtod_l+0x382>
    a766:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a768:	6013      	str	r3, [r2, #0]
    a76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a76c:	2b00      	cmp	r3, #0
    a76e:	f43f af2a 	beq.w	a5c6 <_strtod_l+0x1de>
    a772:	eeb1 8b48 	vneg.f64	d8, d8
    a776:	eeb0 0b48 	vmov.f64	d0, d8
    a77a:	b017      	add	sp, #92	; 0x5c
    a77c:	ecbd 8b10 	vpop	{d8-d15}
    a780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a784:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a786:	900b      	str	r0, [sp, #44]	; 0x2c
    a788:	1c5a      	adds	r2, r3, #1
    a78a:	9211      	str	r2, [sp, #68]	; 0x44
    a78c:	785c      	ldrb	r4, [r3, #1]
    a78e:	46ae      	mov	lr, r5
    a790:	e6f8      	b.n	a584 <_strtod_l+0x19c>
    a792:	bf00      	nop
    a794:	f3af 8000 	nop.w
	...
    a7a0:	20007d0c 	.word	0x20007d0c
    a7a4:	200002a8 	.word	0x200002a8
    a7a8:	20000c0c 	.word	0x20000c0c
    a7ac:	20007ffc 	.word	0x20007ffc
    a7b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a7b2:	1aeb      	subs	r3, r5, r3
    a7b4:	4413      	add	r3, r2
    a7b6:	2b00      	cmp	r3, #0
    a7b8:	f340 82b0 	ble.w	ad1c <_strtod_l+0x934>
    a7bc:	f013 010f 	ands.w	r1, r3, #15
    a7c0:	d00a      	beq.n	a7d8 <_strtod_l+0x3f0>
    a7c2:	4ac3      	ldr	r2, [pc, #780]	; (aad0 <_strtod_l+0x6e8>)
    a7c4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a7c8:	ed9d 6b04 	vldr	d6, [sp, #16]
    a7cc:	ed92 7b00 	vldr	d7, [r2]
    a7d0:	ee27 7b06 	vmul.f64	d7, d7, d6
    a7d4:	ed8d 7b04 	vstr	d7, [sp, #16]
    a7d8:	f033 020f 	bics.w	r2, r3, #15
    a7dc:	f040 8238 	bne.w	ac50 <_strtod_l+0x868>
    a7e0:	2300      	movs	r3, #0
    a7e2:	9308      	str	r3, [sp, #32]
    a7e4:	9600      	str	r6, [sp, #0]
    a7e6:	462b      	mov	r3, r5
    a7e8:	4672      	mov	r2, lr
    a7ea:	4639      	mov	r1, r7
    a7ec:	4640      	mov	r0, r8
    a7ee:	f002 fac7 	bl	cd80 <__s2b>
    a7f2:	4681      	mov	r9, r0
    a7f4:	2800      	cmp	r0, #0
    a7f6:	f000 82e1 	beq.w	adbc <_strtod_l+0x9d4>
    a7fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7fc:	eba3 0b0b 	sub.w	fp, r3, fp
    a800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a802:	ed9f eba9 	vldr	d14, [pc, #676]	; aaa8 <_strtod_l+0x6c0>
    a806:	2b00      	cmp	r3, #0
    a808:	ed9f cba9 	vldr	d12, [pc, #676]	; aab0 <_strtod_l+0x6c8>
    a80c:	ed9f dbaa 	vldr	d13, [pc, #680]	; aab8 <_strtod_l+0x6d0>
    a810:	ed9f bbab 	vldr	d11, [pc, #684]	; aac0 <_strtod_l+0x6d8>
    a814:	bfb4      	ite	lt
    a816:	465a      	movlt	r2, fp
    a818:	2200      	movge	r2, #0
    a81a:	f04f 0a00 	mov.w	sl, #0
    a81e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a822:	920b      	str	r2, [sp, #44]	; 0x2c
    a824:	930c      	str	r3, [sp, #48]	; 0x30
    a826:	4654      	mov	r4, sl
    a828:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a82c:	4640      	mov	r0, r8
    a82e:	f002 fa25 	bl	cc7c <_Balloc>
    a832:	4606      	mov	r6, r0
    a834:	2800      	cmp	r0, #0
    a836:	f000 810e 	beq.w	aa56 <_strtod_l+0x66e>
    a83a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a83e:	ed9d 8b04 	vldr	d8, [sp, #16]
    a842:	3202      	adds	r2, #2
    a844:	0092      	lsls	r2, r2, #2
    a846:	f109 010c 	add.w	r1, r9, #12
    a84a:	300c      	adds	r0, #12
    a84c:	f7fd fb72 	bl	7f34 <memcpy>
    a850:	eeb0 0b48 	vmov.f64	d0, d8
    a854:	aa14      	add	r2, sp, #80	; 0x50
    a856:	a913      	add	r1, sp, #76	; 0x4c
    a858:	4640      	mov	r0, r8
    a85a:	f002 fe4d 	bl	d4f8 <__d2b>
    a85e:	9012      	str	r0, [sp, #72]	; 0x48
    a860:	2800      	cmp	r0, #0
    a862:	f000 80e4 	beq.w	aa2e <_strtod_l+0x646>
    a866:	2101      	movs	r1, #1
    a868:	4640      	mov	r0, r8
    a86a:	f002 fb31 	bl	ced0 <__i2b>
    a86e:	4604      	mov	r4, r0
    a870:	2800      	cmp	r0, #0
    a872:	f000 80f0 	beq.w	aa56 <_strtod_l+0x66e>
    a876:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a878:	2a00      	cmp	r2, #0
    a87a:	f2c0 80de 	blt.w	aa3a <_strtod_l+0x652>
    a87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a880:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    a882:	eb02 0b03 	add.w	fp, r2, r3
    a886:	9b08      	ldr	r3, [sp, #32]
    a888:	9d14      	ldr	r5, [sp, #80]	; 0x50
    a88a:	1ad2      	subs	r2, r2, r3
    a88c:	442a      	add	r2, r5
    a88e:	4b91      	ldr	r3, [pc, #580]	; (aad4 <_strtod_l+0x6ec>)
    a890:	3a01      	subs	r2, #1
    a892:	429a      	cmp	r2, r3
    a894:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    a898:	f280 8098 	bge.w	a9cc <_strtod_l+0x5e4>
    a89c:	1a99      	subs	r1, r3, r2
    a89e:	291f      	cmp	r1, #31
    a8a0:	eba5 0501 	sub.w	r5, r5, r1
    a8a4:	f300 80e3 	bgt.w	aa6e <_strtod_l+0x686>
    a8a8:	2201      	movs	r2, #1
    a8aa:	fa02 f301 	lsl.w	r3, r2, r1
    a8ae:	930d      	str	r3, [sp, #52]	; 0x34
    a8b0:	2300      	movs	r3, #0
    a8b2:	930e      	str	r3, [sp, #56]	; 0x38
    a8b4:	442f      	add	r7, r5
    a8b6:	9b08      	ldr	r3, [sp, #32]
    a8b8:	445d      	add	r5, fp
    a8ba:	45ab      	cmp	fp, r5
    a8bc:	465a      	mov	r2, fp
    a8be:	441f      	add	r7, r3
    a8c0:	bfa8      	it	ge
    a8c2:	462a      	movge	r2, r5
    a8c4:	42ba      	cmp	r2, r7
    a8c6:	bfa8      	it	ge
    a8c8:	463a      	movge	r2, r7
    a8ca:	2a00      	cmp	r2, #0
    a8cc:	dd03      	ble.n	a8d6 <_strtod_l+0x4ee>
    a8ce:	1aad      	subs	r5, r5, r2
    a8d0:	1abf      	subs	r7, r7, r2
    a8d2:	ebab 0b02 	sub.w	fp, fp, r2
    a8d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a8d8:	2b00      	cmp	r3, #0
    a8da:	f300 8088 	bgt.w	a9ee <_strtod_l+0x606>
    a8de:	2d00      	cmp	r5, #0
    a8e0:	f300 809c 	bgt.w	aa1c <_strtod_l+0x634>
    a8e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a8e6:	2b00      	cmp	r3, #0
    a8e8:	f300 80b7 	bgt.w	aa5a <_strtod_l+0x672>
    a8ec:	2f00      	cmp	r7, #0
    a8ee:	f300 80a9 	bgt.w	aa44 <_strtod_l+0x65c>
    a8f2:	f1bb 0f00 	cmp.w	fp, #0
    a8f6:	dd08      	ble.n	a90a <_strtod_l+0x522>
    a8f8:	4621      	mov	r1, r4
    a8fa:	465a      	mov	r2, fp
    a8fc:	4640      	mov	r0, r8
    a8fe:	f002 fc23 	bl	d148 <__lshift>
    a902:	4604      	mov	r4, r0
    a904:	2800      	cmp	r0, #0
    a906:	f000 80a6 	beq.w	aa56 <_strtod_l+0x66e>
    a90a:	9912      	ldr	r1, [sp, #72]	; 0x48
    a90c:	4632      	mov	r2, r6
    a90e:	4640      	mov	r0, r8
    a910:	f002 fcb4 	bl	d27c <__mdiff>
    a914:	4682      	mov	sl, r0
    a916:	2800      	cmp	r0, #0
    a918:	f000 809d 	beq.w	aa56 <_strtod_l+0x66e>
    a91c:	2300      	movs	r3, #0
    a91e:	68c5      	ldr	r5, [r0, #12]
    a920:	60c3      	str	r3, [r0, #12]
    a922:	4621      	mov	r1, r4
    a924:	f002 fc88 	bl	d238 <__mcmp>
    a928:	2800      	cmp	r0, #0
    a92a:	f2c0 83c7 	blt.w	b0bc <_strtod_l+0xcd4>
    a92e:	f000 8361 	beq.w	aff4 <_strtod_l+0xc0c>
    a932:	4621      	mov	r1, r4
    a934:	4650      	mov	r0, sl
    a936:	f002 fe49 	bl	d5cc <__ratio>
    a93a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    a93e:	eeb4 0bc7 	vcmpe.f64	d0, d7
    a942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a946:	d846      	bhi.n	a9d6 <_strtod_l+0x5ee>
    a948:	2d00      	cmp	r5, #0
    a94a:	f000 80cb 	beq.w	aae4 <_strtod_l+0x6fc>
    a94e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    a952:	9805      	ldr	r0, [sp, #20]
    a954:	4b60      	ldr	r3, [pc, #384]	; (aad8 <_strtod_l+0x6f0>)
    a956:	2200      	movs	r2, #0
    a958:	4960      	ldr	r1, [pc, #384]	; (aadc <_strtod_l+0x6f4>)
    a95a:	f8df c184 	ldr.w	ip, [pc, #388]	; aae0 <_strtod_l+0x6f8>
    a95e:	ea00 0701 	and.w	r7, r0, r1
    a962:	4567      	cmp	r7, ip
    a964:	f000 80d4 	beq.w	ab10 <_strtod_l+0x728>
    a968:	9908      	ldr	r1, [sp, #32]
    a96a:	b159      	cbz	r1, a984 <_strtod_l+0x59c>
    a96c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    a970:	d808      	bhi.n	a984 <_strtod_l+0x59c>
    a972:	eeb4 9bcb 	vcmpe.f64	d9, d11
    a976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a97a:	f240 8156 	bls.w	ac2a <_strtod_l+0x842>
    a97e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    a982:	1bcb      	subs	r3, r1, r7
    a984:	eeb0 0b48 	vmov.f64	d0, d8
    a988:	ec43 2b1a 	vmov	d10, r2, r3
    a98c:	f002 fd20 	bl	d3d0 <__ulp>
    a990:	eeaa 8b00 	vfma.f64	d8, d10, d0
    a994:	ed8d 8b04 	vstr	d8, [sp, #16]
    a998:	ee18 3a90 	vmov	r3, s17
    a99c:	9a08      	ldr	r2, [sp, #32]
    a99e:	b922      	cbnz	r2, a9aa <_strtod_l+0x5c2>
    a9a0:	4a4e      	ldr	r2, [pc, #312]	; (aadc <_strtod_l+0x6f4>)
    a9a2:	401a      	ands	r2, r3
    a9a4:	4297      	cmp	r7, r2
    a9a6:	f000 80e4 	beq.w	ab72 <_strtod_l+0x78a>
    a9aa:	9912      	ldr	r1, [sp, #72]	; 0x48
    a9ac:	4640      	mov	r0, r8
    a9ae:	f002 f98b 	bl	ccc8 <_Bfree>
    a9b2:	4631      	mov	r1, r6
    a9b4:	4640      	mov	r0, r8
    a9b6:	f002 f987 	bl	ccc8 <_Bfree>
    a9ba:	4621      	mov	r1, r4
    a9bc:	4640      	mov	r0, r8
    a9be:	f002 f983 	bl	ccc8 <_Bfree>
    a9c2:	4651      	mov	r1, sl
    a9c4:	4640      	mov	r0, r8
    a9c6:	f002 f97f 	bl	ccc8 <_Bfree>
    a9ca:	e72d      	b.n	a828 <_strtod_l+0x440>
    a9cc:	2301      	movs	r3, #1
    a9ce:	2100      	movs	r1, #0
    a9d0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    a9d4:	e76e      	b.n	a8b4 <_strtod_l+0x4cc>
    a9d6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    a9da:	ee20 9b09 	vmul.f64	d9, d0, d9
    a9de:	2d00      	cmp	r5, #0
    a9e0:	d15f      	bne.n	aaa2 <_strtod_l+0x6ba>
    a9e2:	eeb1 7b49 	vneg.f64	d7, d9
    a9e6:	9805      	ldr	r0, [sp, #20]
    a9e8:	ec53 2b17 	vmov	r2, r3, d7
    a9ec:	e7b4      	b.n	a958 <_strtod_l+0x570>
    a9ee:	4621      	mov	r1, r4
    a9f0:	461a      	mov	r2, r3
    a9f2:	4640      	mov	r0, r8
    a9f4:	f002 fb48 	bl	d088 <__pow5mult>
    a9f8:	4604      	mov	r4, r0
    a9fa:	b360      	cbz	r0, aa56 <_strtod_l+0x66e>
    a9fc:	4601      	mov	r1, r0
    a9fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
    aa00:	4640      	mov	r0, r8
    aa02:	f002 fa93 	bl	cf2c <__multiply>
    aa06:	b330      	cbz	r0, aa56 <_strtod_l+0x66e>
    aa08:	900f      	str	r0, [sp, #60]	; 0x3c
    aa0a:	9912      	ldr	r1, [sp, #72]	; 0x48
    aa0c:	4640      	mov	r0, r8
    aa0e:	f002 f95b 	bl	ccc8 <_Bfree>
    aa12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    aa14:	9212      	str	r2, [sp, #72]	; 0x48
    aa16:	2d00      	cmp	r5, #0
    aa18:	f77f af64 	ble.w	a8e4 <_strtod_l+0x4fc>
    aa1c:	9912      	ldr	r1, [sp, #72]	; 0x48
    aa1e:	462a      	mov	r2, r5
    aa20:	4640      	mov	r0, r8
    aa22:	f002 fb91 	bl	d148 <__lshift>
    aa26:	9012      	str	r0, [sp, #72]	; 0x48
    aa28:	2800      	cmp	r0, #0
    aa2a:	f47f af5b 	bne.w	a8e4 <_strtod_l+0x4fc>
    aa2e:	2322      	movs	r3, #34	; 0x22
    aa30:	ed9f 8b25 	vldr	d8, [pc, #148]	; aac8 <_strtod_l+0x6e0>
    aa34:	f8c8 3000 	str.w	r3, [r8]
    aa38:	e0bc      	b.n	abb4 <_strtod_l+0x7cc>
    aa3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aa3c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    aa40:	1a9f      	subs	r7, r3, r2
    aa42:	e720      	b.n	a886 <_strtod_l+0x49e>
    aa44:	4631      	mov	r1, r6
    aa46:	463a      	mov	r2, r7
    aa48:	4640      	mov	r0, r8
    aa4a:	f002 fb7d 	bl	d148 <__lshift>
    aa4e:	4606      	mov	r6, r0
    aa50:	2800      	cmp	r0, #0
    aa52:	f47f af4e 	bne.w	a8f2 <_strtod_l+0x50a>
    aa56:	9812      	ldr	r0, [sp, #72]	; 0x48
    aa58:	e7e9      	b.n	aa2e <_strtod_l+0x646>
    aa5a:	4631      	mov	r1, r6
    aa5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aa5e:	4640      	mov	r0, r8
    aa60:	f002 fb12 	bl	d088 <__pow5mult>
    aa64:	4606      	mov	r6, r0
    aa66:	2800      	cmp	r0, #0
    aa68:	f47f af40 	bne.w	a8ec <_strtod_l+0x504>
    aa6c:	e7f3      	b.n	aa56 <_strtod_l+0x66e>
    aa6e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    aa72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    aa76:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    aa7a:	2101      	movs	r1, #1
    aa7c:	32e2      	adds	r2, #226	; 0xe2
    aa7e:	fa01 f302 	lsl.w	r3, r1, r2
    aa82:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    aa86:	e715      	b.n	a8b4 <_strtod_l+0x4cc>
    aa88:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    aa8c:	f04f 0b00 	mov.w	fp, #0
    aa90:	e5c0      	b.n	a614 <_strtod_l+0x22c>
    aa92:	2301      	movs	r3, #1
    aa94:	930a      	str	r3, [sp, #40]	; 0x28
    aa96:	f10a 0302 	add.w	r3, sl, #2
    aa9a:	9311      	str	r3, [sp, #68]	; 0x44
    aa9c:	f89a 4002 	ldrb.w	r4, [sl, #2]
    aaa0:	e602      	b.n	a6a8 <_strtod_l+0x2c0>
    aaa2:	eeb0 7b49 	vmov.f64	d7, d9
    aaa6:	e79e      	b.n	a9e6 <_strtod_l+0x5fe>
    aaa8:	94a03595 	.word	0x94a03595
    aaac:	3fcfffff 	.word	0x3fcfffff
    aab0:	94a03595 	.word	0x94a03595
    aab4:	3fdfffff 	.word	0x3fdfffff
    aab8:	35afe535 	.word	0x35afe535
    aabc:	3fe00000 	.word	0x3fe00000
    aac0:	ffc00000 	.word	0xffc00000
    aac4:	41dfffff 	.word	0x41dfffff
    aac8:	00000000 	.word	0x00000000
    aacc:	7ff00000 	.word	0x7ff00000
    aad0:	200002a8 	.word	0x200002a8
    aad4:	fffffc02 	.word	0xfffffc02
    aad8:	3ff00000 	.word	0x3ff00000
    aadc:	7ff00000 	.word	0x7ff00000
    aae0:	7fe00000 	.word	0x7fe00000
    aae4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    aae8:	2900      	cmp	r1, #0
    aaea:	f000 8085 	beq.w	abf8 <_strtod_l+0x810>
    aaee:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    aaf2:	2901      	cmp	r1, #1
    aaf4:	f000 81d8 	beq.w	aea8 <_strtod_l+0xac0>
    aaf8:	4610      	mov	r0, r2
    aafa:	4bb7      	ldr	r3, [pc, #732]	; (add8 <_strtod_l+0x9f0>)
    aafc:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    ab00:	2200      	movs	r2, #0
    ab02:	e729      	b.n	a958 <_strtod_l+0x570>
    ab04:	2c65      	cmp	r4, #101	; 0x65
    ab06:	f04f 0c01 	mov.w	ip, #1
    ab0a:	f43f adbe 	beq.w	a68a <_strtod_l+0x2a2>
    ab0e:	e54c      	b.n	a5aa <_strtod_l+0x1c2>
    ab10:	ec43 2b1a 	vmov	d10, r2, r3
    ab14:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    ab18:	9305      	str	r3, [sp, #20]
    ab1a:	ed9d fb04 	vldr	d15, [sp, #16]
    ab1e:	eeb0 0b4f 	vmov.f64	d0, d15
    ab22:	f002 fc55 	bl	d3d0 <__ulp>
    ab26:	49ad      	ldr	r1, [pc, #692]	; (addc <_strtod_l+0x9f4>)
    ab28:	eeaa fb00 	vfma.f64	d15, d10, d0
    ab2c:	ee1f 3a90 	vmov	r3, s31
    ab30:	4aab      	ldr	r2, [pc, #684]	; (ade0 <_strtod_l+0x9f8>)
    ab32:	4019      	ands	r1, r3
    ab34:	4291      	cmp	r1, r2
    ab36:	ed8d fb04 	vstr	d15, [sp, #16]
    ab3a:	d972      	bls.n	ac22 <_strtod_l+0x83a>
    ab3c:	4ba9      	ldr	r3, [pc, #676]	; (ade4 <_strtod_l+0x9fc>)
    ab3e:	ee18 2a90 	vmov	r2, s17
    ab42:	429a      	cmp	r2, r3
    ab44:	d103      	bne.n	ab4e <_strtod_l+0x766>
    ab46:	ee18 3a10 	vmov	r3, s16
    ab4a:	3301      	adds	r3, #1
    ab4c:	d083      	beq.n	aa56 <_strtod_l+0x66e>
    ab4e:	4aa5      	ldr	r2, [pc, #660]	; (ade4 <_strtod_l+0x9fc>)
    ab50:	f04f 33ff 	mov.w	r3, #4294967295
    ab54:	e9cd 3204 	strd	r3, r2, [sp, #16]
    ab58:	e727      	b.n	a9aa <_strtod_l+0x5c2>
    ab5a:	2300      	movs	r3, #0
    ab5c:	930a      	str	r3, [sp, #40]	; 0x28
    ab5e:	e79a      	b.n	aa96 <_strtod_l+0x6ae>
    ab60:	2c65      	cmp	r4, #101	; 0x65
    ab62:	f000 80d0 	beq.w	ad06 <_strtod_l+0x91e>
    ab66:	2c45      	cmp	r4, #69	; 0x45
    ab68:	f000 80cd 	beq.w	ad06 <_strtod_l+0x91e>
    ab6c:	f04f 0c01 	mov.w	ip, #1
    ab70:	e5d1      	b.n	a716 <_strtod_l+0x32e>
    ab72:	ec51 0b19 	vmov	r0, r1, d9
    ab76:	930d      	str	r3, [sp, #52]	; 0x34
    ab78:	f009 fbe4 	bl	14344 <__aeabi_d2lz>
    ab7c:	f009 fbb4 	bl	142e8 <__aeabi_l2d>
    ab80:	9b04      	ldr	r3, [sp, #16]
    ab82:	431d      	orrs	r5, r3
    ab84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ab86:	ec41 0b17 	vmov	d7, r0, r1
    ab8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ab8e:	431d      	orrs	r5, r3
    ab90:	ee39 9b47 	vsub.f64	d9, d9, d7
    ab94:	f000 80a0 	beq.w	acd8 <_strtod_l+0x8f0>
    ab98:	eeb4 9bcc 	vcmpe.f64	d9, d12
    ab9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aba0:	d405      	bmi.n	abae <_strtod_l+0x7c6>
    aba2:	eeb4 9bcd 	vcmpe.f64	d9, d13
    aba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    abaa:	f77f aefe 	ble.w	a9aa <_strtod_l+0x5c2>
    abae:	ed9d 8b04 	vldr	d8, [sp, #16]
    abb2:	9812      	ldr	r0, [sp, #72]	; 0x48
    abb4:	4601      	mov	r1, r0
    abb6:	4640      	mov	r0, r8
    abb8:	f002 f886 	bl	ccc8 <_Bfree>
    abbc:	4631      	mov	r1, r6
    abbe:	4640      	mov	r0, r8
    abc0:	f002 f882 	bl	ccc8 <_Bfree>
    abc4:	4621      	mov	r1, r4
    abc6:	4640      	mov	r0, r8
    abc8:	f002 f87e 	bl	ccc8 <_Bfree>
    abcc:	4649      	mov	r1, r9
    abce:	4640      	mov	r0, r8
    abd0:	f002 f87a 	bl	ccc8 <_Bfree>
    abd4:	4651      	mov	r1, sl
    abd6:	4640      	mov	r0, r8
    abd8:	f002 f876 	bl	ccc8 <_Bfree>
    abdc:	e5c1      	b.n	a762 <_strtod_l+0x37a>
    abde:	2201      	movs	r2, #1
    abe0:	9209      	str	r2, [sp, #36]	; 0x24
    abe2:	1c79      	adds	r1, r7, #1
    abe4:	9111      	str	r1, [sp, #68]	; 0x44
    abe6:	787a      	ldrb	r2, [r7, #1]
    abe8:	2a00      	cmp	r2, #0
    abea:	f43f ace5 	beq.w	a5b8 <_strtod_l+0x1d0>
    abee:	460f      	mov	r7, r1
    abf0:	e470      	b.n	a4d4 <_strtod_l+0xec>
    abf2:	2200      	movs	r2, #0
    abf4:	9209      	str	r2, [sp, #36]	; 0x24
    abf6:	e7f4      	b.n	abe2 <_strtod_l+0x7fa>
    abf8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    abfc:	4610      	mov	r0, r2
    abfe:	2b00      	cmp	r3, #0
    ac00:	f47f af7b 	bne.w	aafa <_strtod_l+0x712>
    ac04:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    ac08:	eeb4 0bc7 	vcmpe.f64	d0, d7
    ac0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ac10:	f100 81d3 	bmi.w	afba <_strtod_l+0xbd2>
    ac14:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    ac18:	ee20 9b09 	vmul.f64	d9, d0, d9
    ac1c:	eeb1 7b49 	vneg.f64	d7, d9
    ac20:	e6e2      	b.n	a9e8 <_strtod_l+0x600>
    ac22:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    ac26:	9305      	str	r3, [sp, #20]
    ac28:	e6b8      	b.n	a99c <_strtod_l+0x5b4>
    ac2a:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    ac2e:	ee19 3a10 	vmov	r3, s18
    ac32:	2b01      	cmp	r3, #1
    ac34:	bf38      	it	cc
    ac36:	2301      	movcc	r3, #1
    ac38:	ee09 3a10 	vmov	s18, r3
    ac3c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    ac40:	2d00      	cmp	r5, #0
    ac42:	f040 813e 	bne.w	aec2 <_strtod_l+0xada>
    ac46:	eeb1 7b49 	vneg.f64	d7, d9
    ac4a:	ec53 2b17 	vmov	r2, r3, d7
    ac4e:	e696      	b.n	a97e <_strtod_l+0x596>
    ac50:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    ac54:	f300 80b2 	bgt.w	adbc <_strtod_l+0x9d4>
    ac58:	2a10      	cmp	r2, #16
    ac5a:	ea4f 1322 	mov.w	r3, r2, asr #4
    ac5e:	f340 8286 	ble.w	b16e <_strtod_l+0xd86>
    ac62:	4c61      	ldr	r4, [pc, #388]	; (ade8 <_strtod_l+0xa00>)
    ac64:	ed9d 7b04 	vldr	d7, [sp, #16]
    ac68:	2000      	movs	r0, #0
    ac6a:	4622      	mov	r2, r4
    ac6c:	4601      	mov	r1, r0
    ac6e:	f013 0f01 	tst.w	r3, #1
    ac72:	f101 0101 	add.w	r1, r1, #1
    ac76:	ea4f 0363 	mov.w	r3, r3, asr #1
    ac7a:	d004      	beq.n	ac86 <_strtod_l+0x89e>
    ac7c:	ed92 6b00 	vldr	d6, [r2]
    ac80:	2001      	movs	r0, #1
    ac82:	ee27 7b06 	vmul.f64	d7, d7, d6
    ac86:	2b01      	cmp	r3, #1
    ac88:	f102 0208 	add.w	r2, r2, #8
    ac8c:	d1ef      	bne.n	ac6e <_strtod_l+0x886>
    ac8e:	b108      	cbz	r0, ac94 <_strtod_l+0x8ac>
    ac90:	ed8d 7b04 	vstr	d7, [sp, #16]
    ac94:	9b05      	ldr	r3, [sp, #20]
    ac96:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    ac9a:	9305      	str	r3, [sp, #20]
    ac9c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    aca0:	ed9d 6b04 	vldr	d6, [sp, #16]
    aca4:	ed94 7b00 	vldr	d7, [r4]
    aca8:	4b4c      	ldr	r3, [pc, #304]	; (addc <_strtod_l+0x9f4>)
    acaa:	ee27 7b06 	vmul.f64	d7, d7, d6
    acae:	ee17 2a90 	vmov	r2, s15
    acb2:	494e      	ldr	r1, [pc, #312]	; (adec <_strtod_l+0xa04>)
    acb4:	4013      	ands	r3, r2
    acb6:	428b      	cmp	r3, r1
    acb8:	ed8d 7b04 	vstr	d7, [sp, #16]
    acbc:	d87e      	bhi.n	adbc <_strtod_l+0x9d4>
    acbe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    acc2:	428b      	cmp	r3, r1
    acc4:	f240 81d6 	bls.w	b074 <_strtod_l+0xc8c>
    acc8:	4c46      	ldr	r4, [pc, #280]	; (ade4 <_strtod_l+0x9fc>)
    acca:	f04f 33ff 	mov.w	r3, #4294967295
    acce:	e9cd 3404 	strd	r3, r4, [sp, #16]
    acd2:	2300      	movs	r3, #0
    acd4:	9308      	str	r3, [sp, #32]
    acd6:	e585      	b.n	a7e4 <_strtod_l+0x3fc>
    acd8:	eeb4 9bce 	vcmpe.f64	d9, d14
    acdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ace0:	f57f ae63 	bpl.w	a9aa <_strtod_l+0x5c2>
    ace4:	e763      	b.n	abae <_strtod_l+0x7c6>
    ace6:	3216      	adds	r2, #22
    ace8:	f6ff ad62 	blt.w	a7b0 <_strtod_l+0x3c8>
    acec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    acee:	eba3 0b0b 	sub.w	fp, r3, fp
    acf2:	4b3f      	ldr	r3, [pc, #252]	; (adf0 <_strtod_l+0xa08>)
    acf4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    acf8:	ed93 7b00 	vldr	d7, [r3]
    acfc:	ed9d 6b04 	vldr	d6, [sp, #16]
    ad00:	ee86 8b07 	vdiv.f64	d8, d6, d7
    ad04:	e52d      	b.n	a762 <_strtod_l+0x37a>
    ad06:	f04f 0e00 	mov.w	lr, #0
    ad0a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    ad0e:	f04f 0c01 	mov.w	ip, #1
    ad12:	e44e      	b.n	a5b2 <_strtod_l+0x1ca>
    ad14:	2c6e      	cmp	r4, #110	; 0x6e
    ad16:	f43f ad10 	beq.w	a73a <_strtod_l+0x352>
    ad1a:	e44d      	b.n	a5b8 <_strtod_l+0x1d0>
    ad1c:	f43f ad60 	beq.w	a7e0 <_strtod_l+0x3f8>
    ad20:	425b      	negs	r3, r3
    ad22:	f013 010f 	ands.w	r1, r3, #15
    ad26:	d00a      	beq.n	ad3e <_strtod_l+0x956>
    ad28:	4a31      	ldr	r2, [pc, #196]	; (adf0 <_strtod_l+0xa08>)
    ad2a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    ad2e:	ed9d 6b04 	vldr	d6, [sp, #16]
    ad32:	ed92 7b00 	vldr	d7, [r2]
    ad36:	ee86 7b07 	vdiv.f64	d7, d6, d7
    ad3a:	ed8d 7b04 	vstr	d7, [sp, #16]
    ad3e:	111b      	asrs	r3, r3, #4
    ad40:	f43f ad4e 	beq.w	a7e0 <_strtod_l+0x3f8>
    ad44:	2b1f      	cmp	r3, #31
    ad46:	dc33      	bgt.n	adb0 <_strtod_l+0x9c8>
    ad48:	f013 0210 	ands.w	r2, r3, #16
    ad4c:	bf18      	it	ne
    ad4e:	226a      	movne	r2, #106	; 0x6a
    ad50:	ed9d 7b04 	vldr	d7, [sp, #16]
    ad54:	9208      	str	r2, [sp, #32]
    ad56:	4a27      	ldr	r2, [pc, #156]	; (adf4 <_strtod_l+0xa0c>)
    ad58:	2100      	movs	r1, #0
    ad5a:	07d8      	lsls	r0, r3, #31
    ad5c:	d504      	bpl.n	ad68 <_strtod_l+0x980>
    ad5e:	ed92 6b00 	vldr	d6, [r2]
    ad62:	2101      	movs	r1, #1
    ad64:	ee27 7b06 	vmul.f64	d7, d7, d6
    ad68:	105b      	asrs	r3, r3, #1
    ad6a:	f102 0208 	add.w	r2, r2, #8
    ad6e:	d1f4      	bne.n	ad5a <_strtod_l+0x972>
    ad70:	b109      	cbz	r1, ad76 <_strtod_l+0x98e>
    ad72:	ed8d 7b04 	vstr	d7, [sp, #16]
    ad76:	9b08      	ldr	r3, [sp, #32]
    ad78:	b193      	cbz	r3, ada0 <_strtod_l+0x9b8>
    ad7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ad7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
    ad82:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    ad86:	2b00      	cmp	r3, #0
    ad88:	dd0a      	ble.n	ada0 <_strtod_l+0x9b8>
    ad8a:	2b1f      	cmp	r3, #31
    ad8c:	f340 822f 	ble.w	b1ee <_strtod_l+0xe06>
    ad90:	2000      	movs	r0, #0
    ad92:	2b34      	cmp	r3, #52	; 0x34
    ad94:	9004      	str	r0, [sp, #16]
    ad96:	f340 8240 	ble.w	b21a <_strtod_l+0xe32>
    ad9a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    ad9e:	9305      	str	r3, [sp, #20]
    ada0:	ed9d 7b04 	vldr	d7, [sp, #16]
    ada4:	eeb5 7b40 	vcmp.f64	d7, #0.0
    ada8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    adac:	f47f ad1a 	bne.w	a7e4 <_strtod_l+0x3fc>
    adb0:	2322      	movs	r3, #34	; 0x22
    adb2:	ed9f 8b05 	vldr	d8, [pc, #20]	; adc8 <_strtod_l+0x9e0>
    adb6:	f8c8 3000 	str.w	r3, [r8]
    adba:	e4d2      	b.n	a762 <_strtod_l+0x37a>
    adbc:	2322      	movs	r3, #34	; 0x22
    adbe:	ed9f 8b04 	vldr	d8, [pc, #16]	; add0 <_strtod_l+0x9e8>
    adc2:	f8c8 3000 	str.w	r3, [r8]
    adc6:	e4cc      	b.n	a762 <_strtod_l+0x37a>
	...
    add4:	7ff00000 	.word	0x7ff00000
    add8:	bff00000 	.word	0xbff00000
    addc:	7ff00000 	.word	0x7ff00000
    ade0:	7c9fffff 	.word	0x7c9fffff
    ade4:	7fefffff 	.word	0x7fefffff
    ade8:	20000280 	.word	0x20000280
    adec:	7ca00000 	.word	0x7ca00000
    adf0:	200002a8 	.word	0x200002a8
    adf4:	20000370 	.word	0x20000370
    adf8:	9302      	str	r3, [sp, #8]
    adfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    adfc:	9301      	str	r3, [sp, #4]
    adfe:	ab12      	add	r3, sp, #72	; 0x48
    ae00:	9300      	str	r3, [sp, #0]
    ae02:	4aa7      	ldr	r2, [pc, #668]	; (b0a0 <_strtod_l+0xcb8>)
    ae04:	ab13      	add	r3, sp, #76	; 0x4c
    ae06:	a911      	add	r1, sp, #68	; 0x44
    ae08:	4640      	mov	r0, r8
    ae0a:	f001 fb63 	bl	c4d4 <__gethex>
    ae0e:	f010 050f 	ands.w	r5, r0, #15
    ae12:	4604      	mov	r4, r0
    ae14:	f43f aca3 	beq.w	a75e <_strtod_l+0x376>
    ae18:	2d06      	cmp	r5, #6
    ae1a:	d174      	bne.n	af06 <_strtod_l+0xb1e>
    ae1c:	9b07      	ldr	r3, [sp, #28]
    ae1e:	ed9f 8b9a 	vldr	d8, [pc, #616]	; b088 <_strtod_l+0xca0>
    ae22:	3701      	adds	r7, #1
    ae24:	2b00      	cmp	r3, #0
    ae26:	f43f abce 	beq.w	a5c6 <_strtod_l+0x1de>
    ae2a:	601f      	str	r7, [r3, #0]
    ae2c:	f7ff bbcb 	b.w	a5c6 <_strtod_l+0x1de>
    ae30:	ed9d 8b04 	vldr	d8, [sp, #16]
    ae34:	e495      	b.n	a762 <_strtod_l+0x37a>
    ae36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae38:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    ae3c:	4403      	add	r3, r0
    ae3e:	930b      	str	r3, [sp, #44]	; 0x2c
    ae40:	2801      	cmp	r0, #1
    ae42:	f105 0301 	add.w	r3, r5, #1
    ae46:	461a      	mov	r2, r3
    ae48:	d014      	beq.n	ae74 <_strtod_l+0xa8c>
    ae4a:	4428      	add	r0, r5
    ae4c:	1e44      	subs	r4, r0, #1
    ae4e:	e003      	b.n	ae58 <_strtod_l+0xa70>
    ae50:	0046      	lsls	r6, r0, #1
    ae52:	429c      	cmp	r4, r3
    ae54:	d00d      	beq.n	ae72 <_strtod_l+0xa8a>
    ae56:	3301      	adds	r3, #1
    ae58:	462a      	mov	r2, r5
    ae5a:	2a08      	cmp	r2, #8
    ae5c:	461d      	mov	r5, r3
    ae5e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    ae62:	d9f5      	bls.n	ae50 <_strtod_l+0xa68>
    ae64:	2b10      	cmp	r3, #16
    ae66:	bfdc      	itt	le
    ae68:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    ae6c:	ea4f 0949 	movle.w	r9, r9, lsl #1
    ae70:	e7ef      	b.n	ae52 <_strtod_l+0xa6a>
    ae72:	3202      	adds	r2, #2
    ae74:	2d08      	cmp	r5, #8
    ae76:	dc3c      	bgt.n	aef2 <_strtod_l+0xb0a>
    ae78:	4615      	mov	r5, r2
    ae7a:	f7ff bb79 	b.w	a570 <_strtod_l+0x188>
    ae7e:	4989      	ldr	r1, [pc, #548]	; (b0a4 <_strtod_l+0xcbc>)
    ae80:	2201      	movs	r2, #1
    ae82:	4638      	mov	r0, r7
    ae84:	f000 fd74 	bl	b970 <strncmp>
    ae88:	2800      	cmp	r0, #0
    ae8a:	f000 8082 	beq.w	af92 <_strtod_l+0xbaa>
    ae8e:	f04f 0e00 	mov.w	lr, #0
    ae92:	46f1      	mov	r9, lr
    ae94:	4676      	mov	r6, lr
    ae96:	4675      	mov	r5, lr
    ae98:	f7ff bbb5 	b.w	a606 <_strtod_l+0x21e>
    ae9c:	f644 631f 	movw	r3, #19999	; 0x4e1f
    aea0:	459b      	cmp	fp, r3
    aea2:	bfa8      	it	ge
    aea4:	469b      	movge	fp, r3
    aea6:	e42f      	b.n	a708 <_strtod_l+0x320>
    aea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aeac:	4618      	mov	r0, r3
    aeae:	2b00      	cmp	r3, #0
    aeb0:	f47f ae23 	bne.w	aafa <_strtod_l+0x712>
    aeb4:	2322      	movs	r3, #34	; 0x22
    aeb6:	ed9f 8b74 	vldr	d8, [pc, #464]	; b088 <_strtod_l+0xca0>
    aeba:	9812      	ldr	r0, [sp, #72]	; 0x48
    aebc:	f8c8 3000 	str.w	r3, [r8]
    aec0:	e678      	b.n	abb4 <_strtod_l+0x7cc>
    aec2:	eeb0 7b49 	vmov.f64	d7, d9
    aec6:	e6c0      	b.n	ac4a <_strtod_l+0x862>
    aec8:	4977      	ldr	r1, [pc, #476]	; (b0a8 <_strtod_l+0xcc0>)
    aeca:	a811      	add	r0, sp, #68	; 0x44
    aecc:	f001 fdcc 	bl	ca68 <__match>
    aed0:	2800      	cmp	r0, #0
    aed2:	f43f ab71 	beq.w	a5b8 <_strtod_l+0x1d0>
    aed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aed8:	4974      	ldr	r1, [pc, #464]	; (b0ac <_strtod_l+0xcc4>)
    aeda:	3b01      	subs	r3, #1
    aedc:	a811      	add	r0, sp, #68	; 0x44
    aede:	9311      	str	r3, [sp, #68]	; 0x44
    aee0:	f001 fdc2 	bl	ca68 <__match>
    aee4:	b910      	cbnz	r0, aeec <_strtod_l+0xb04>
    aee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aee8:	3301      	adds	r3, #1
    aeea:	9311      	str	r3, [sp, #68]	; 0x44
    aeec:	ed9f 8b68 	vldr	d8, [pc, #416]	; b090 <_strtod_l+0xca8>
    aef0:	e437      	b.n	a762 <_strtod_l+0x37a>
    aef2:	2a10      	cmp	r2, #16
    aef4:	bfdc      	itt	le
    aef6:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    aefa:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    aefe:	4615      	mov	r5, r2
    af00:	2000      	movs	r0, #0
    af02:	f7ff bb3a 	b.w	a57a <_strtod_l+0x192>
    af06:	9a12      	ldr	r2, [sp, #72]	; 0x48
    af08:	b13a      	cbz	r2, af1a <_strtod_l+0xb32>
    af0a:	2135      	movs	r1, #53	; 0x35
    af0c:	a814      	add	r0, sp, #80	; 0x50
    af0e:	f002 fb8f 	bl	d630 <__copybits>
    af12:	9912      	ldr	r1, [sp, #72]	; 0x48
    af14:	4640      	mov	r0, r8
    af16:	f001 fed7 	bl	ccc8 <_Bfree>
    af1a:	3d01      	subs	r5, #1
    af1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    af1e:	2d04      	cmp	r5, #4
    af20:	f200 818f 	bhi.w	b242 <_strtod_l+0xe5a>
    af24:	e8df f005 	tbb	[pc, r5]
    af28:	1f2a2d03 	.word	0x1f2a2d03
    af2c:	03          	.byte	0x03
    af2d:	00          	.byte	0x00
    af2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    af30:	9204      	str	r2, [sp, #16]
    af32:	f203 4233 	addw	r2, r3, #1075	; 0x433
    af36:	9b15      	ldr	r3, [sp, #84]	; 0x54
    af38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    af3c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    af40:	9305      	str	r3, [sp, #20]
    af42:	05e5      	lsls	r5, r4, #23
    af44:	d502      	bpl.n	af4c <_strtod_l+0xb64>
    af46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    af4a:	9305      	str	r3, [sp, #20]
    af4c:	4a58      	ldr	r2, [pc, #352]	; (b0b0 <_strtod_l+0xcc8>)
    af4e:	401a      	ands	r2, r3
    af50:	ed9d 8b04 	vldr	d8, [sp, #16]
    af54:	2a00      	cmp	r2, #0
    af56:	f47f ac04 	bne.w	a762 <_strtod_l+0x37a>
    af5a:	f000 fded 	bl	bb38 <__errno>
    af5e:	2322      	movs	r3, #34	; 0x22
    af60:	6003      	str	r3, [r0, #0]
    af62:	f7ff bbfe 	b.w	a762 <_strtod_l+0x37a>
    af66:	f04f 33ff 	mov.w	r3, #4294967295
    af6a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    af6e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    af72:	05e3      	lsls	r3, r4, #23
    af74:	f57f af5c 	bpl.w	ae30 <_strtod_l+0xa48>
    af78:	9b05      	ldr	r3, [sp, #20]
    af7a:	e7e4      	b.n	af46 <_strtod_l+0xb5e>
    af7c:	4b4c      	ldr	r3, [pc, #304]	; (b0b0 <_strtod_l+0xcc8>)
    af7e:	9305      	str	r3, [sp, #20]
    af80:	e7f7      	b.n	af72 <_strtod_l+0xb8a>
    af82:	9b14      	ldr	r3, [sp, #80]	; 0x50
    af84:	9304      	str	r3, [sp, #16]
    af86:	9b15      	ldr	r3, [sp, #84]	; 0x54
    af88:	9305      	str	r3, [sp, #20]
    af8a:	e7da      	b.n	af42 <_strtod_l+0xb5a>
    af8c:	2000      	movs	r0, #0
    af8e:	f7ff bae1 	b.w	a554 <_strtod_l+0x16c>
    af92:	9b11      	ldr	r3, [sp, #68]	; 0x44
    af94:	461a      	mov	r2, r3
    af96:	3301      	adds	r3, #1
    af98:	9311      	str	r3, [sp, #68]	; 0x44
    af9a:	7854      	ldrb	r4, [r2, #1]
    af9c:	4606      	mov	r6, r0
    af9e:	4681      	mov	r9, r0
    afa0:	f7ff bacd 	b.w	a53e <_strtod_l+0x156>
    afa4:	4b43      	ldr	r3, [pc, #268]	; (b0b4 <_strtod_l+0xccc>)
    afa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    afaa:	ed93 8b00 	vldr	d8, [r3]
    afae:	ed9d 7b04 	vldr	d7, [sp, #16]
    afb2:	ee28 8b07 	vmul.f64	d8, d8, d7
    afb6:	f7ff bbd4 	b.w	a762 <_strtod_l+0x37a>
    afba:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    afbe:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    afc2:	e511      	b.n	a9e8 <_strtod_l+0x600>
    afc4:	46ae      	mov	lr, r5
    afc6:	900b      	str	r0, [sp, #44]	; 0x2c
    afc8:	f7ff badc 	b.w	a584 <_strtod_l+0x19c>
    afcc:	4b39      	ldr	r3, [pc, #228]	; (b0b4 <_strtod_l+0xccc>)
    afce:	f1c5 050f 	rsb	r5, r5, #15
    afd2:	1b4a      	subs	r2, r1, r5
    afd4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    afd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    afdc:	ed95 8b00 	vldr	d8, [r5]
    afe0:	ed93 7b00 	vldr	d7, [r3]
    afe4:	ed9d 6b04 	vldr	d6, [sp, #16]
    afe8:	ee28 8b06 	vmul.f64	d8, d8, d6
    afec:	ee28 8b07 	vmul.f64	d8, d8, d7
    aff0:	f7ff bbb7 	b.w	a762 <_strtod_l+0x37a>
    aff4:	2d00      	cmp	r5, #0
    aff6:	f000 8095 	beq.w	b124 <_strtod_l+0xd3c>
    affa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    affe:	4b2e      	ldr	r3, [pc, #184]	; (b0b8 <_strtod_l+0xcd0>)
    b000:	f3cc 0113 	ubfx	r1, ip, #0, #20
    b004:	4299      	cmp	r1, r3
    b006:	4662      	mov	r2, ip
    b008:	f000 80d2 	beq.w	b1b0 <_strtod_l+0xdc8>
    b00c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b00e:	2b00      	cmp	r3, #0
    b010:	f000 80a5 	beq.w	b15e <_strtod_l+0xd76>
    b014:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b018:	4213      	tst	r3, r2
    b01a:	4617      	mov	r7, r2
    b01c:	d01a      	beq.n	b054 <_strtod_l+0xc6c>
    b01e:	eeb0 0b48 	vmov.f64	d0, d8
    b022:	2d00      	cmp	r5, #0
    b024:	f000 80a6 	beq.w	b174 <_strtod_l+0xd8c>
    b028:	f002 f9d2 	bl	d3d0 <__ulp>
    b02c:	9b08      	ldr	r3, [sp, #32]
    b02e:	b17b      	cbz	r3, b050 <_strtod_l+0xc68>
    b030:	f3c7 530a 	ubfx	r3, r7, #20, #11
    b034:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b038:	2b00      	cmp	r3, #0
    b03a:	dd09      	ble.n	b050 <_strtod_l+0xc68>
    b03c:	051b      	lsls	r3, r3, #20
    b03e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    b042:	2000      	movs	r0, #0
    b044:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    b048:	ec41 0b17 	vmov	d7, r0, r1
    b04c:	ee20 0b07 	vmul.f64	d0, d0, d7
    b050:	ee38 8b00 	vadd.f64	d8, d8, d0
    b054:	9b08      	ldr	r3, [sp, #32]
    b056:	b15b      	cbz	r3, b070 <_strtod_l+0xc88>
    b058:	ed9f 7b0f 	vldr	d7, [pc, #60]	; b098 <_strtod_l+0xcb0>
    b05c:	4b14      	ldr	r3, [pc, #80]	; (b0b0 <_strtod_l+0xcc8>)
    b05e:	ee28 8b07 	vmul.f64	d8, d8, d7
    b062:	ee18 2a90 	vmov	r2, s17
    b066:	4013      	ands	r3, r2
    b068:	b913      	cbnz	r3, b070 <_strtod_l+0xc88>
    b06a:	2322      	movs	r3, #34	; 0x22
    b06c:	f8c8 3000 	str.w	r3, [r8]
    b070:	9812      	ldr	r0, [sp, #72]	; 0x48
    b072:	e59f      	b.n	abb4 <_strtod_l+0x7cc>
    b074:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    b078:	9305      	str	r3, [sp, #20]
    b07a:	2300      	movs	r3, #0
    b07c:	9308      	str	r3, [sp, #32]
    b07e:	f7ff bbb1 	b.w	a7e4 <_strtod_l+0x3fc>
    b082:	bf00      	nop
    b084:	f3af 8000 	nop.w
	...
    b094:	7ff00000 	.word	0x7ff00000
    b098:	00000000 	.word	0x00000000
    b09c:	39500000 	.word	0x39500000
    b0a0:	200079f8 	.word	0x200079f8
    b0a4:	20007d0c 	.word	0x20007d0c
    b0a8:	20000c00 	.word	0x20000c00
    b0ac:	20000c04 	.word	0x20000c04
    b0b0:	7ff00000 	.word	0x7ff00000
    b0b4:	200002a8 	.word	0x200002a8
    b0b8:	000fffff 	.word	0x000fffff
    b0bc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b0c0:	430d      	orrs	r5, r1
    b0c2:	d1c7      	bne.n	b054 <_strtod_l+0xc6c>
    b0c4:	f3c2 0313 	ubfx	r3, r2, #0, #20
    b0c8:	4617      	mov	r7, r2
    b0ca:	2b00      	cmp	r3, #0
    b0cc:	d1c2      	bne.n	b054 <_strtod_l+0xc6c>
    b0ce:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b0d2:	0d1b      	lsrs	r3, r3, #20
    b0d4:	051b      	lsls	r3, r3, #20
    b0d6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    b0da:	d9bb      	bls.n	b054 <_strtod_l+0xc6c>
    b0dc:	f8da 3014 	ldr.w	r3, [sl, #20]
    b0e0:	b91b      	cbnz	r3, b0ea <_strtod_l+0xd02>
    b0e2:	f8da 3010 	ldr.w	r3, [sl, #16]
    b0e6:	2b01      	cmp	r3, #1
    b0e8:	ddb4      	ble.n	b054 <_strtod_l+0xc6c>
    b0ea:	4651      	mov	r1, sl
    b0ec:	2201      	movs	r2, #1
    b0ee:	4640      	mov	r0, r8
    b0f0:	f002 f82a 	bl	d148 <__lshift>
    b0f4:	4621      	mov	r1, r4
    b0f6:	4682      	mov	sl, r0
    b0f8:	f002 f89e 	bl	d238 <__mcmp>
    b0fc:	2800      	cmp	r0, #0
    b0fe:	dda9      	ble.n	b054 <_strtod_l+0xc6c>
    b100:	9b08      	ldr	r3, [sp, #32]
    b102:	2b00      	cmp	r3, #0
    b104:	d17e      	bne.n	b204 <_strtod_l+0xe1c>
    b106:	4b50      	ldr	r3, [pc, #320]	; (b248 <_strtod_l+0xe60>)
    b108:	403b      	ands	r3, r7
    b10a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    b10e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    b112:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    b116:	9305      	str	r3, [sp, #20]
    b118:	f04f 33ff 	mov.w	r3, #4294967295
    b11c:	9304      	str	r3, [sp, #16]
    b11e:	ed9d 8b04 	vldr	d8, [sp, #16]
    b122:	e797      	b.n	b054 <_strtod_l+0xc6c>
    b124:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b128:	f3c2 0313 	ubfx	r3, r2, #0, #20
    b12c:	430b      	orrs	r3, r1
    b12e:	4617      	mov	r7, r2
    b130:	f47f af6c 	bne.w	b00c <_strtod_l+0xc24>
    b134:	e7e4      	b.n	b100 <_strtod_l+0xd18>
    b136:	4945      	ldr	r1, [pc, #276]	; (b24c <_strtod_l+0xe64>)
    b138:	a811      	add	r0, sp, #68	; 0x44
    b13a:	aa14      	add	r2, sp, #80	; 0x50
    b13c:	f001 fcb0 	bl	caa0 <__hexnan>
    b140:	2805      	cmp	r0, #5
    b142:	f47f ab06 	bne.w	a752 <_strtod_l+0x36a>
    b146:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b148:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    b14c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    b150:	9305      	str	r3, [sp, #20]
    b152:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b154:	9304      	str	r3, [sp, #16]
    b156:	ed9d 8b04 	vldr	d8, [sp, #16]
    b15a:	f7ff bb02 	b.w	a762 <_strtod_l+0x37a>
    b15e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b164:	4203      	tst	r3, r0
    b166:	f43f af75 	beq.w	b054 <_strtod_l+0xc6c>
    b16a:	460f      	mov	r7, r1
    b16c:	e757      	b.n	b01e <_strtod_l+0xc36>
    b16e:	4c38      	ldr	r4, [pc, #224]	; (b250 <_strtod_l+0xe68>)
    b170:	2100      	movs	r1, #0
    b172:	e58f      	b.n	ac94 <_strtod_l+0x8ac>
    b174:	f002 f92c 	bl	d3d0 <__ulp>
    b178:	9b08      	ldr	r3, [sp, #32]
    b17a:	2b00      	cmp	r3, #0
    b17c:	d055      	beq.n	b22a <_strtod_l+0xe42>
    b17e:	f3c7 530a 	ubfx	r3, r7, #20, #11
    b182:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b186:	2b00      	cmp	r3, #0
    b188:	dd09      	ble.n	b19e <_strtod_l+0xdb6>
    b18a:	051b      	lsls	r3, r3, #20
    b18c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    b190:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    b194:	4628      	mov	r0, r5
    b196:	ec41 0b17 	vmov	d7, r0, r1
    b19a:	ee20 0b07 	vmul.f64	d0, d0, d7
    b19e:	ee38 8b40 	vsub.f64	d8, d8, d0
    b1a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1aa:	f47f af55 	bne.w	b058 <_strtod_l+0xc70>
    b1ae:	e681      	b.n	aeb4 <_strtod_l+0xacc>
    b1b0:	9b08      	ldr	r3, [sp, #32]
    b1b2:	9904      	ldr	r1, [sp, #16]
    b1b4:	b31b      	cbz	r3, b1fe <_strtod_l+0xe16>
    b1b6:	4b24      	ldr	r3, [pc, #144]	; (b248 <_strtod_l+0xe60>)
    b1b8:	4013      	ands	r3, r2
    b1ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    b1be:	d81e      	bhi.n	b1fe <_strtod_l+0xe16>
    b1c0:	0d1b      	lsrs	r3, r3, #20
    b1c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b1c6:	f04f 30ff 	mov.w	r0, #4294967295
    b1ca:	fa00 f303 	lsl.w	r3, r0, r3
    b1ce:	4299      	cmp	r1, r3
    b1d0:	f47f af1c 	bne.w	b00c <_strtod_l+0xc24>
    b1d4:	4b1f      	ldr	r3, [pc, #124]	; (b254 <_strtod_l+0xe6c>)
    b1d6:	429a      	cmp	r2, r3
    b1d8:	d030      	beq.n	b23c <_strtod_l+0xe54>
    b1da:	4b1b      	ldr	r3, [pc, #108]	; (b248 <_strtod_l+0xe60>)
    b1dc:	4013      	ands	r3, r2
    b1de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    b1e2:	9305      	str	r3, [sp, #20]
    b1e4:	2300      	movs	r3, #0
    b1e6:	9304      	str	r3, [sp, #16]
    b1e8:	ed9d 8b04 	vldr	d8, [sp, #16]
    b1ec:	e732      	b.n	b054 <_strtod_l+0xc6c>
    b1ee:	f04f 32ff 	mov.w	r2, #4294967295
    b1f2:	fa02 f303 	lsl.w	r3, r2, r3
    b1f6:	9a04      	ldr	r2, [sp, #16]
    b1f8:	401a      	ands	r2, r3
    b1fa:	9204      	str	r2, [sp, #16]
    b1fc:	e5d0      	b.n	ada0 <_strtod_l+0x9b8>
    b1fe:	f04f 33ff 	mov.w	r3, #4294967295
    b202:	e7e4      	b.n	b1ce <_strtod_l+0xde6>
    b204:	4b10      	ldr	r3, [pc, #64]	; (b248 <_strtod_l+0xe60>)
    b206:	403b      	ands	r3, r7
    b208:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    b20c:	f73f af7d 	bgt.w	b10a <_strtod_l+0xd22>
    b210:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    b214:	f73f af20 	bgt.w	b058 <_strtod_l+0xc70>
    b218:	e64c      	b.n	aeb4 <_strtod_l+0xacc>
    b21a:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    b21e:	f04f 33ff 	mov.w	r3, #4294967295
    b222:	4093      	lsls	r3, r2
    b224:	400b      	ands	r3, r1
    b226:	9305      	str	r3, [sp, #20]
    b228:	e5ba      	b.n	ada0 <_strtod_l+0x9b8>
    b22a:	ee38 8b40 	vsub.f64	d8, d8, d0
    b22e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b236:	f47f af1b 	bne.w	b070 <_strtod_l+0xc88>
    b23a:	e63b      	b.n	aeb4 <_strtod_l+0xacc>
    b23c:	3101      	adds	r1, #1
    b23e:	d1cc      	bne.n	b1da <_strtod_l+0xdf2>
    b240:	e409      	b.n	aa56 <_strtod_l+0x66e>
    b242:	2300      	movs	r3, #0
    b244:	e67d      	b.n	af42 <_strtod_l+0xb5a>
    b246:	bf00      	nop
    b248:	7ff00000 	.word	0x7ff00000
    b24c:	20007a0c 	.word	0x20007a0c
    b250:	20000280 	.word	0x20000280
    b254:	7fefffff 	.word	0x7fefffff

0000b258 <_strtod_r>:
    b258:	4b01      	ldr	r3, [pc, #4]	; (b260 <_strtod_r+0x8>)
    b25a:	f7ff b8c5 	b.w	a3e8 <_strtod_l>
    b25e:	bf00      	nop
    b260:	200085c8 	.word	0x200085c8

0000b264 <_strtol_l.constprop.0>:
    b264:	2b01      	cmp	r3, #1
    b266:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b26a:	d040      	beq.n	b2ee <_strtol_l.constprop.0+0x8a>
    b26c:	2b24      	cmp	r3, #36	; 0x24
    b26e:	4698      	mov	r8, r3
    b270:	d83d      	bhi.n	b2ee <_strtol_l.constprop.0+0x8a>
    b272:	4d4c      	ldr	r5, [pc, #304]	; (b3a4 <_strtol_l.constprop.0+0x140>)
    b274:	468e      	mov	lr, r1
    b276:	4676      	mov	r6, lr
    b278:	f81e bb01 	ldrb.w	fp, [lr], #1
    b27c:	f815 400b 	ldrb.w	r4, [r5, fp]
    b280:	f014 0408 	ands.w	r4, r4, #8
    b284:	d1f7      	bne.n	b276 <_strtol_l.constprop.0+0x12>
    b286:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    b28a:	d072      	beq.n	b372 <_strtol_l.constprop.0+0x10e>
    b28c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    b290:	bf08      	it	eq
    b292:	f89e b000 	ldrbeq.w	fp, [lr]
    b296:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    b29a:	bf08      	it	eq
    b29c:	f106 0e02 	addeq.w	lr, r6, #2
    b2a0:	2b00      	cmp	r3, #0
    b2a2:	d042      	beq.n	b32a <_strtol_l.constprop.0+0xc6>
    b2a4:	2b10      	cmp	r3, #16
    b2a6:	d057      	beq.n	b358 <_strtol_l.constprop.0+0xf4>
    b2a8:	fbb9 f7f8 	udiv	r7, r9, r8
    b2ac:	2500      	movs	r5, #0
    b2ae:	462e      	mov	r6, r5
    b2b0:	fb08 9a17 	mls	sl, r8, r7, r9
    b2b4:	e005      	b.n	b2c2 <_strtol_l.constprop.0+0x5e>
    b2b6:	d033      	beq.n	b320 <_strtol_l.constprop.0+0xbc>
    b2b8:	fb08 c606 	mla	r6, r8, r6, ip
    b2bc:	2501      	movs	r5, #1
    b2be:	f81e bb01 	ldrb.w	fp, [lr], #1
    b2c2:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    b2c6:	f1bc 0f09 	cmp.w	ip, #9
    b2ca:	d906      	bls.n	b2da <_strtol_l.constprop.0+0x76>
    b2cc:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    b2d0:	f1bc 0f19 	cmp.w	ip, #25
    b2d4:	d812      	bhi.n	b2fc <_strtol_l.constprop.0+0x98>
    b2d6:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    b2da:	4563      	cmp	r3, ip
    b2dc:	dd17      	ble.n	b30e <_strtol_l.constprop.0+0xaa>
    b2de:	f1b5 3fff 	cmp.w	r5, #4294967295
    b2e2:	d0ec      	beq.n	b2be <_strtol_l.constprop.0+0x5a>
    b2e4:	42b7      	cmp	r7, r6
    b2e6:	d2e6      	bcs.n	b2b6 <_strtol_l.constprop.0+0x52>
    b2e8:	f04f 35ff 	mov.w	r5, #4294967295
    b2ec:	e7e7      	b.n	b2be <_strtol_l.constprop.0+0x5a>
    b2ee:	f000 fc23 	bl	bb38 <__errno>
    b2f2:	2316      	movs	r3, #22
    b2f4:	6003      	str	r3, [r0, #0]
    b2f6:	2000      	movs	r0, #0
    b2f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2fc:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    b300:	f1bc 0f19 	cmp.w	ip, #25
    b304:	d803      	bhi.n	b30e <_strtol_l.constprop.0+0xaa>
    b306:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    b30a:	4563      	cmp	r3, ip
    b30c:	dce7      	bgt.n	b2de <_strtol_l.constprop.0+0x7a>
    b30e:	1c6b      	adds	r3, r5, #1
    b310:	d027      	beq.n	b362 <_strtol_l.constprop.0+0xfe>
    b312:	b98c      	cbnz	r4, b338 <_strtol_l.constprop.0+0xd4>
    b314:	b10a      	cbz	r2, b31a <_strtol_l.constprop.0+0xb6>
    b316:	bba5      	cbnz	r5, b382 <_strtol_l.constprop.0+0x11e>
    b318:	6011      	str	r1, [r2, #0]
    b31a:	4630      	mov	r0, r6
    b31c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b320:	45e2      	cmp	sl, ip
    b322:	dac9      	bge.n	b2b8 <_strtol_l.constprop.0+0x54>
    b324:	f04f 35ff 	mov.w	r5, #4294967295
    b328:	e7c9      	b.n	b2be <_strtol_l.constprop.0+0x5a>
    b32a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b32e:	d005      	beq.n	b33c <_strtol_l.constprop.0+0xd8>
    b330:	f04f 080a 	mov.w	r8, #10
    b334:	4643      	mov	r3, r8
    b336:	e7b7      	b.n	b2a8 <_strtol_l.constprop.0+0x44>
    b338:	4276      	negs	r6, r6
    b33a:	e7eb      	b.n	b314 <_strtol_l.constprop.0+0xb0>
    b33c:	f89e 3000 	ldrb.w	r3, [lr]
    b340:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b344:	2b58      	cmp	r3, #88	; 0x58
    b346:	d121      	bne.n	b38c <_strtol_l.constprop.0+0x128>
    b348:	f04f 0810 	mov.w	r8, #16
    b34c:	f89e b001 	ldrb.w	fp, [lr, #1]
    b350:	4643      	mov	r3, r8
    b352:	f10e 0e02 	add.w	lr, lr, #2
    b356:	e7a7      	b.n	b2a8 <_strtol_l.constprop.0+0x44>
    b358:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b35c:	d01a      	beq.n	b394 <_strtol_l.constprop.0+0x130>
    b35e:	4698      	mov	r8, r3
    b360:	e7a2      	b.n	b2a8 <_strtol_l.constprop.0+0x44>
    b362:	2322      	movs	r3, #34	; 0x22
    b364:	6003      	str	r3, [r0, #0]
    b366:	b172      	cbz	r2, b386 <_strtol_l.constprop.0+0x122>
    b368:	f10e 31ff 	add.w	r1, lr, #4294967295
    b36c:	464e      	mov	r6, r9
    b36e:	6011      	str	r1, [r2, #0]
    b370:	e7d3      	b.n	b31a <_strtol_l.constprop.0+0xb6>
    b372:	f89e b000 	ldrb.w	fp, [lr]
    b376:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    b37a:	f106 0e02 	add.w	lr, r6, #2
    b37e:	2401      	movs	r4, #1
    b380:	e78e      	b.n	b2a0 <_strtol_l.constprop.0+0x3c>
    b382:	46b1      	mov	r9, r6
    b384:	e7f0      	b.n	b368 <_strtol_l.constprop.0+0x104>
    b386:	464e      	mov	r6, r9
    b388:	4630      	mov	r0, r6
    b38a:	e7c7      	b.n	b31c <_strtol_l.constprop.0+0xb8>
    b38c:	f04f 0808 	mov.w	r8, #8
    b390:	4643      	mov	r3, r8
    b392:	e789      	b.n	b2a8 <_strtol_l.constprop.0+0x44>
    b394:	f89e 5000 	ldrb.w	r5, [lr]
    b398:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    b39c:	2d58      	cmp	r5, #88	; 0x58
    b39e:	d0d3      	beq.n	b348 <_strtol_l.constprop.0+0xe4>
    b3a0:	4698      	mov	r8, r3
    b3a2:	e781      	b.n	b2a8 <_strtol_l.constprop.0+0x44>
    b3a4:	20000a7d 	.word	0x20000a7d

0000b3a8 <_strtol_r>:
    b3a8:	f7ff bf5c 	b.w	b264 <_strtol_l.constprop.0>

0000b3ac <__cxa_atexit>:
    b3ac:	4613      	mov	r3, r2
    b3ae:	460a      	mov	r2, r1
    b3b0:	4601      	mov	r1, r0
    b3b2:	2002      	movs	r0, #2
    b3b4:	f000 bea2 	b.w	c0fc <__register_exitproc>

0000b3b8 <stdio_exit_handler>:
    b3b8:	4a02      	ldr	r2, [pc, #8]	; (b3c4 <stdio_exit_handler+0xc>)
    b3ba:	4903      	ldr	r1, [pc, #12]	; (b3c8 <stdio_exit_handler+0x10>)
    b3bc:	4803      	ldr	r0, [pc, #12]	; (b3cc <stdio_exit_handler+0x14>)
    b3be:	f000 b8bb 	b.w	b538 <_fwalk_sglue>
    b3c2:	bf00      	nop
    b3c4:	20008b44 	.word	0x20008b44
    b3c8:	00010aa5 	.word	0x00010aa5
    b3cc:	20008480 	.word	0x20008480

0000b3d0 <cleanup_stdio>:
    b3d0:	4b0c      	ldr	r3, [pc, #48]	; (b404 <cleanup_stdio+0x34>)
    b3d2:	6841      	ldr	r1, [r0, #4]
    b3d4:	4299      	cmp	r1, r3
    b3d6:	b510      	push	{r4, lr}
    b3d8:	4604      	mov	r4, r0
    b3da:	d001      	beq.n	b3e0 <cleanup_stdio+0x10>
    b3dc:	f005 fb62 	bl	10aa4 <_fclose_r>
    b3e0:	68a1      	ldr	r1, [r4, #8]
    b3e2:	4b09      	ldr	r3, [pc, #36]	; (b408 <cleanup_stdio+0x38>)
    b3e4:	4299      	cmp	r1, r3
    b3e6:	d002      	beq.n	b3ee <cleanup_stdio+0x1e>
    b3e8:	4620      	mov	r0, r4
    b3ea:	f005 fb5b 	bl	10aa4 <_fclose_r>
    b3ee:	68e1      	ldr	r1, [r4, #12]
    b3f0:	4b06      	ldr	r3, [pc, #24]	; (b40c <cleanup_stdio+0x3c>)
    b3f2:	4299      	cmp	r1, r3
    b3f4:	d004      	beq.n	b400 <cleanup_stdio+0x30>
    b3f6:	4620      	mov	r0, r4
    b3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b3fc:	f005 bb52 	b.w	10aa4 <_fclose_r>
    b400:	bd10      	pop	{r4, pc}
    b402:	bf00      	nop
    b404:	2001e2e4 	.word	0x2001e2e4
    b408:	2001e34c 	.word	0x2001e34c
    b40c:	2001e3b4 	.word	0x2001e3b4

0000b410 <global_stdio_init.part.0>:
    b410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b414:	4c2a      	ldr	r4, [pc, #168]	; (b4c0 <global_stdio_init.part.0+0xb0>)
    b416:	4b2b      	ldr	r3, [pc, #172]	; (b4c4 <global_stdio_init.part.0+0xb4>)
    b418:	482b      	ldr	r0, [pc, #172]	; (b4c8 <global_stdio_init.part.0+0xb8>)
    b41a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b4dc <global_stdio_init.part.0+0xcc>
    b41e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b4e0 <global_stdio_init.part.0+0xd0>
    b422:	4f2a      	ldr	r7, [pc, #168]	; (b4cc <global_stdio_init.part.0+0xbc>)
    b424:	6018      	str	r0, [r3, #0]
    b426:	2500      	movs	r5, #0
    b428:	2304      	movs	r3, #4
    b42a:	2208      	movs	r2, #8
    b42c:	4629      	mov	r1, r5
    b42e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b432:	4e27      	ldr	r6, [pc, #156]	; (b4d0 <global_stdio_init.part.0+0xc0>)
    b434:	6665      	str	r5, [r4, #100]	; 0x64
    b436:	e9c4 5302 	strd	r5, r3, [r4, #8]
    b43a:	e9c4 5500 	strd	r5, r5, [r4]
    b43e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    b442:	61a5      	str	r5, [r4, #24]
    b444:	f000 fa42 	bl	b8cc <memset>
    b448:	4b22      	ldr	r3, [pc, #136]	; (b4d4 <global_stdio_init.part.0+0xc4>)
    b44a:	6763      	str	r3, [r4, #116]	; 0x74
    b44c:	2208      	movs	r2, #8
    b44e:	4629      	mov	r1, r5
    b450:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b454:	e9c4 4907 	strd	r4, r9, [r4, #28]
    b458:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    b45c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    b460:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    b464:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    b468:	6725      	str	r5, [r4, #112]	; 0x70
    b46a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    b46e:	62e6      	str	r6, [r4, #44]	; 0x2c
    b470:	f000 fa2c 	bl	b8cc <memset>
    b474:	4b18      	ldr	r3, [pc, #96]	; (b4d8 <global_stdio_init.part.0+0xc8>)
    b476:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    b47a:	4629      	mov	r1, r5
    b47c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    b480:	2208      	movs	r2, #8
    b482:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b486:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    b48a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    b48e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    b492:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    b496:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    b49a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    b49e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    b4a2:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b4a6:	f000 fa11 	bl	b8cc <memset>
    b4aa:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    b4ae:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    b4b2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    b4b6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    b4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b4be:	bf00      	nop
    b4c0:	2001e2e4 	.word	0x2001e2e4
    b4c4:	2001e41c 	.word	0x2001e41c
    b4c8:	0000b3b9 	.word	0x0000b3b9
    b4cc:	0000b681 	.word	0x0000b681
    b4d0:	0000b6a1 	.word	0x0000b6a1
    b4d4:	00010009 	.word	0x00010009
    b4d8:	00020012 	.word	0x00020012
    b4dc:	0000b619 	.word	0x0000b619
    b4e0:	0000b641 	.word	0x0000b641

0000b4e4 <__sinit>:
    b4e4:	b510      	push	{r4, lr}
    b4e6:	4604      	mov	r4, r0
    b4e8:	480a      	ldr	r0, [pc, #40]	; (b514 <__sinit+0x30>)
    b4ea:	f000 fb53 	bl	bb94 <__retarget_lock_acquire_recursive>
    b4ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b4f0:	b923      	cbnz	r3, b4fc <__sinit+0x18>
    b4f2:	4b09      	ldr	r3, [pc, #36]	; (b518 <__sinit+0x34>)
    b4f4:	4a09      	ldr	r2, [pc, #36]	; (b51c <__sinit+0x38>)
    b4f6:	681b      	ldr	r3, [r3, #0]
    b4f8:	6362      	str	r2, [r4, #52]	; 0x34
    b4fa:	b123      	cbz	r3, b506 <__sinit+0x22>
    b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b500:	4804      	ldr	r0, [pc, #16]	; (b514 <__sinit+0x30>)
    b502:	f000 bb49 	b.w	bb98 <__retarget_lock_release_recursive>
    b506:	f7ff ff83 	bl	b410 <global_stdio_init.part.0>
    b50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b50e:	4801      	ldr	r0, [pc, #4]	; (b514 <__sinit+0x30>)
    b510:	f000 bb42 	b.w	bb98 <__retarget_lock_release_recursive>
    b514:	2001e2ac 	.word	0x2001e2ac
    b518:	2001e41c 	.word	0x2001e41c
    b51c:	0000b3d1 	.word	0x0000b3d1

0000b520 <__sfp_lock_acquire>:
    b520:	4801      	ldr	r0, [pc, #4]	; (b528 <__sfp_lock_acquire+0x8>)
    b522:	f000 bb37 	b.w	bb94 <__retarget_lock_acquire_recursive>
    b526:	bf00      	nop
    b528:	2001e2ac 	.word	0x2001e2ac

0000b52c <__sfp_lock_release>:
    b52c:	4801      	ldr	r0, [pc, #4]	; (b534 <__sfp_lock_release+0x8>)
    b52e:	f000 bb33 	b.w	bb98 <__retarget_lock_release_recursive>
    b532:	bf00      	nop
    b534:	2001e2ac 	.word	0x2001e2ac

0000b538 <_fwalk_sglue>:
    b538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b53c:	4680      	mov	r8, r0
    b53e:	460f      	mov	r7, r1
    b540:	4616      	mov	r6, r2
    b542:	f04f 0900 	mov.w	r9, #0
    b546:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    b54a:	3d01      	subs	r5, #1
    b54c:	d411      	bmi.n	b572 <_fwalk_sglue+0x3a>
    b54e:	89a3      	ldrh	r3, [r4, #12]
    b550:	2b01      	cmp	r3, #1
    b552:	f105 35ff 	add.w	r5, r5, #4294967295
    b556:	d908      	bls.n	b56a <_fwalk_sglue+0x32>
    b558:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    b55c:	3301      	adds	r3, #1
    b55e:	4621      	mov	r1, r4
    b560:	d003      	beq.n	b56a <_fwalk_sglue+0x32>
    b562:	4640      	mov	r0, r8
    b564:	47b8      	blx	r7
    b566:	ea49 0900 	orr.w	r9, r9, r0
    b56a:	1c6b      	adds	r3, r5, #1
    b56c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    b570:	d1ed      	bne.n	b54e <_fwalk_sglue+0x16>
    b572:	6836      	ldr	r6, [r6, #0]
    b574:	2e00      	cmp	r6, #0
    b576:	d1e6      	bne.n	b546 <_fwalk_sglue+0xe>
    b578:	4648      	mov	r0, r9
    b57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b57e:	bf00      	nop

0000b580 <sprintf>:
    b580:	b40e      	push	{r1, r2, r3}
    b582:	b510      	push	{r4, lr}
    b584:	b09d      	sub	sp, #116	; 0x74
    b586:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b58a:	ab1f      	add	r3, sp, #124	; 0x7c
    b58c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b590:	9104      	str	r1, [sp, #16]
    b592:	4909      	ldr	r1, [pc, #36]	; (b5b8 <sprintf+0x38>)
    b594:	f853 2b04 	ldr.w	r2, [r3], #4
    b598:	9002      	str	r0, [sp, #8]
    b59a:	4c08      	ldr	r4, [pc, #32]	; (b5bc <sprintf+0x3c>)
    b59c:	6808      	ldr	r0, [r1, #0]
    b59e:	9301      	str	r3, [sp, #4]
    b5a0:	a902      	add	r1, sp, #8
    b5a2:	9405      	str	r4, [sp, #20]
    b5a4:	f002 f8b4 	bl	d710 <_svfprintf_r>
    b5a8:	9b02      	ldr	r3, [sp, #8]
    b5aa:	2200      	movs	r2, #0
    b5ac:	701a      	strb	r2, [r3, #0]
    b5ae:	b01d      	add	sp, #116	; 0x74
    b5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b5b4:	b003      	add	sp, #12
    b5b6:	4770      	bx	lr
    b5b8:	20008b50 	.word	0x20008b50
    b5bc:	ffff0208 	.word	0xffff0208

0000b5c0 <sscanf>:
    b5c0:	b40e      	push	{r1, r2, r3}
    b5c2:	b510      	push	{r4, lr}
    b5c4:	b09f      	sub	sp, #124	; 0x7c
    b5c6:	ac21      	add	r4, sp, #132	; 0x84
    b5c8:	f44f 7101 	mov.w	r1, #516	; 0x204
    b5cc:	f854 2b04 	ldr.w	r2, [r4], #4
    b5d0:	9201      	str	r2, [sp, #4]
    b5d2:	f8ad 101c 	strh.w	r1, [sp, #28]
    b5d6:	9004      	str	r0, [sp, #16]
    b5d8:	9008      	str	r0, [sp, #32]
    b5da:	f000 fd11 	bl	c000 <strlen>
    b5de:	9005      	str	r0, [sp, #20]
    b5e0:	9009      	str	r0, [sp, #36]	; 0x24
    b5e2:	480b      	ldr	r0, [pc, #44]	; (b610 <sscanf+0x50>)
    b5e4:	490b      	ldr	r1, [pc, #44]	; (b614 <sscanf+0x54>)
    b5e6:	910c      	str	r1, [sp, #48]	; 0x30
    b5e8:	2300      	movs	r3, #0
    b5ea:	f64f 7cff 	movw	ip, #65535	; 0xffff
    b5ee:	9310      	str	r3, [sp, #64]	; 0x40
    b5f0:	9315      	str	r3, [sp, #84]	; 0x54
    b5f2:	9a01      	ldr	r2, [sp, #4]
    b5f4:	6800      	ldr	r0, [r0, #0]
    b5f6:	f8ad c01e 	strh.w	ip, [sp, #30]
    b5fa:	4623      	mov	r3, r4
    b5fc:	a904      	add	r1, sp, #16
    b5fe:	9403      	str	r4, [sp, #12]
    b600:	f003 fe28 	bl	f254 <__ssvfscanf_r>
    b604:	b01f      	add	sp, #124	; 0x7c
    b606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b60a:	b003      	add	sp, #12
    b60c:	4770      	bx	lr
    b60e:	bf00      	nop
    b610:	20008b50 	.word	0x20008b50
    b614:	0000b63d 	.word	0x0000b63d

0000b618 <__sread>:
    b618:	b510      	push	{r4, lr}
    b61a:	460c      	mov	r4, r1
    b61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b620:	f000 fa4c 	bl	babc <_read_r>
    b624:	2800      	cmp	r0, #0
    b626:	db03      	blt.n	b630 <__sread+0x18>
    b628:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b62a:	4403      	add	r3, r0
    b62c:	6523      	str	r3, [r4, #80]	; 0x50
    b62e:	bd10      	pop	{r4, pc}
    b630:	89a3      	ldrh	r3, [r4, #12]
    b632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b636:	81a3      	strh	r3, [r4, #12]
    b638:	bd10      	pop	{r4, pc}
    b63a:	bf00      	nop

0000b63c <__seofread>:
    b63c:	2000      	movs	r0, #0
    b63e:	4770      	bx	lr

0000b640 <__swrite>:
    b640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b644:	460c      	mov	r4, r1
    b646:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    b64a:	461f      	mov	r7, r3
    b64c:	05cb      	lsls	r3, r1, #23
    b64e:	4605      	mov	r5, r0
    b650:	4616      	mov	r6, r2
    b652:	d40b      	bmi.n	b66c <__swrite+0x2c>
    b654:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    b658:	81a1      	strh	r1, [r4, #12]
    b65a:	463b      	mov	r3, r7
    b65c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b660:	4632      	mov	r2, r6
    b662:	4628      	mov	r0, r5
    b664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b668:	f000 ba50 	b.w	bb0c <_write_r>
    b66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b670:	2302      	movs	r3, #2
    b672:	2200      	movs	r2, #0
    b674:	f000 fa0c 	bl	ba90 <_lseek_r>
    b678:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    b67c:	e7ea      	b.n	b654 <__swrite+0x14>
    b67e:	bf00      	nop

0000b680 <__sseek>:
    b680:	b510      	push	{r4, lr}
    b682:	460c      	mov	r4, r1
    b684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b688:	f000 fa02 	bl	ba90 <_lseek_r>
    b68c:	89a3      	ldrh	r3, [r4, #12]
    b68e:	1c42      	adds	r2, r0, #1
    b690:	bf0e      	itee	eq
    b692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b69a:	6520      	strne	r0, [r4, #80]	; 0x50
    b69c:	81a3      	strh	r3, [r4, #12]
    b69e:	bd10      	pop	{r4, pc}

0000b6a0 <__sclose>:
    b6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b6a4:	f000 b9e2 	b.w	ba6c <_close_r>

0000b6a8 <_vdprintf_r>:
    b6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6aa:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    b6ae:	af04      	add	r7, sp, #16
    b6b0:	9300      	str	r3, [sp, #0]
    b6b2:	4613      	mov	r3, r2
    b6b4:	f44f 7200 	mov.w	r2, #512	; 0x200
    b6b8:	460e      	mov	r6, r1
    b6ba:	9203      	str	r2, [sp, #12]
    b6bc:	4639      	mov	r1, r7
    b6be:	aa03      	add	r2, sp, #12
    b6c0:	4605      	mov	r5, r0
    b6c2:	f000 f825 	bl	b710 <_vasnprintf_r>
    b6c6:	b188      	cbz	r0, b6ec <_vdprintf_r+0x44>
    b6c8:	4604      	mov	r4, r0
    b6ca:	4602      	mov	r2, r0
    b6cc:	9b03      	ldr	r3, [sp, #12]
    b6ce:	4631      	mov	r1, r6
    b6d0:	4628      	mov	r0, r5
    b6d2:	f000 fa1b 	bl	bb0c <_write_r>
    b6d6:	42bc      	cmp	r4, r7
    b6d8:	9003      	str	r0, [sp, #12]
    b6da:	d004      	beq.n	b6e6 <_vdprintf_r+0x3e>
    b6dc:	4628      	mov	r0, r5
    b6de:	4621      	mov	r1, r4
    b6e0:	f000 fda0 	bl	c224 <_free_r>
    b6e4:	9803      	ldr	r0, [sp, #12]
    b6e6:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    b6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6ec:	f04f 30ff 	mov.w	r0, #4294967295
    b6f0:	e7f9      	b.n	b6e6 <_vdprintf_r+0x3e>
    b6f2:	bf00      	nop

0000b6f4 <vdprintf>:
    b6f4:	b410      	push	{r4}
    b6f6:	4c05      	ldr	r4, [pc, #20]	; (b70c <vdprintf+0x18>)
    b6f8:	4684      	mov	ip, r0
    b6fa:	4613      	mov	r3, r2
    b6fc:	6820      	ldr	r0, [r4, #0]
    b6fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    b702:	460a      	mov	r2, r1
    b704:	4661      	mov	r1, ip
    b706:	f7ff bfcf 	b.w	b6a8 <_vdprintf_r>
    b70a:	bf00      	nop
    b70c:	20008b50 	.word	0x20008b50

0000b710 <_vasnprintf_r>:
    b710:	b530      	push	{r4, r5, lr}
    b712:	6814      	ldr	r4, [r2, #0]
    b714:	4615      	mov	r5, r2
    b716:	b09b      	sub	sp, #108	; 0x6c
    b718:	461a      	mov	r2, r3
    b71a:	b109      	cbz	r1, b720 <_vasnprintf_r+0x10>
    b71c:	2c00      	cmp	r4, #0
    b71e:	d119      	bne.n	b754 <_vasnprintf_r+0x44>
    b720:	2100      	movs	r1, #0
    b722:	f44f 7322 	mov.w	r3, #648	; 0x288
    b726:	f8ad 300c 	strh.w	r3, [sp, #12]
    b72a:	9100      	str	r1, [sp, #0]
    b72c:	9104      	str	r1, [sp, #16]
    b72e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b732:	9102      	str	r1, [sp, #8]
    b734:	9105      	str	r1, [sp, #20]
    b736:	f8ad 300e 	strh.w	r3, [sp, #14]
    b73a:	4669      	mov	r1, sp
    b73c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    b73e:	f001 ffe7 	bl	d710 <_svfprintf_r>
    b742:	2800      	cmp	r0, #0
    b744:	db13      	blt.n	b76e <_vasnprintf_r+0x5e>
    b746:	9b00      	ldr	r3, [sp, #0]
    b748:	6028      	str	r0, [r5, #0]
    b74a:	2200      	movs	r2, #0
    b74c:	701a      	strb	r2, [r3, #0]
    b74e:	9804      	ldr	r0, [sp, #16]
    b750:	b01b      	add	sp, #108	; 0x6c
    b752:	bd30      	pop	{r4, r5, pc}
    b754:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    b758:	9100      	str	r1, [sp, #0]
    b75a:	9104      	str	r1, [sp, #16]
    b75c:	f8ad 300c 	strh.w	r3, [sp, #12]
    b760:	4621      	mov	r1, r4
    b762:	dae4      	bge.n	b72e <_vasnprintf_r+0x1e>
    b764:	238b      	movs	r3, #139	; 0x8b
    b766:	6003      	str	r3, [r0, #0]
    b768:	2000      	movs	r0, #0
    b76a:	b01b      	add	sp, #108	; 0x6c
    b76c:	bd30      	pop	{r4, r5, pc}
    b76e:	2000      	movs	r0, #0
    b770:	e7ee      	b.n	b750 <_vasnprintf_r+0x40>
    b772:	bf00      	nop

0000b774 <memcmp>:
    b774:	2a03      	cmp	r2, #3
    b776:	b570      	push	{r4, r5, r6, lr}
    b778:	d914      	bls.n	b7a4 <memcmp+0x30>
    b77a:	ea40 0301 	orr.w	r3, r0, r1
    b77e:	079b      	lsls	r3, r3, #30
    b780:	d122      	bne.n	b7c8 <memcmp+0x54>
    b782:	4604      	mov	r4, r0
    b784:	460b      	mov	r3, r1
    b786:	4619      	mov	r1, r3
    b788:	4620      	mov	r0, r4
    b78a:	680e      	ldr	r6, [r1, #0]
    b78c:	6805      	ldr	r5, [r0, #0]
    b78e:	42b5      	cmp	r5, r6
    b790:	f104 0404 	add.w	r4, r4, #4
    b794:	f103 0304 	add.w	r3, r3, #4
    b798:	d116      	bne.n	b7c8 <memcmp+0x54>
    b79a:	3a04      	subs	r2, #4
    b79c:	2a03      	cmp	r2, #3
    b79e:	4620      	mov	r0, r4
    b7a0:	4619      	mov	r1, r3
    b7a2:	d8f0      	bhi.n	b786 <memcmp+0x12>
    b7a4:	1e54      	subs	r4, r2, #1
    b7a6:	b19a      	cbz	r2, b7d0 <memcmp+0x5c>
    b7a8:	1e42      	subs	r2, r0, #1
    b7aa:	3901      	subs	r1, #1
    b7ac:	e001      	b.n	b7b2 <memcmp+0x3e>
    b7ae:	18c3      	adds	r3, r0, r3
    b7b0:	d00c      	beq.n	b7cc <memcmp+0x58>
    b7b2:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    b7b6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    b7ba:	45e6      	cmp	lr, ip
    b7bc:	eba4 0302 	sub.w	r3, r4, r2
    b7c0:	d0f5      	beq.n	b7ae <memcmp+0x3a>
    b7c2:	ebae 000c 	sub.w	r0, lr, ip
    b7c6:	bd70      	pop	{r4, r5, r6, pc}
    b7c8:	1e54      	subs	r4, r2, #1
    b7ca:	e7ed      	b.n	b7a8 <memcmp+0x34>
    b7cc:	4618      	mov	r0, r3
    b7ce:	bd70      	pop	{r4, r5, r6, pc}
    b7d0:	4610      	mov	r0, r2
    b7d2:	bd70      	pop	{r4, r5, r6, pc}

0000b7d4 <memmove>:
    b7d4:	4288      	cmp	r0, r1
    b7d6:	d90d      	bls.n	b7f4 <memmove+0x20>
    b7d8:	188b      	adds	r3, r1, r2
    b7da:	4283      	cmp	r3, r0
    b7dc:	d90a      	bls.n	b7f4 <memmove+0x20>
    b7de:	eb00 0c02 	add.w	ip, r0, r2
    b7e2:	b1ba      	cbz	r2, b814 <memmove+0x40>
    b7e4:	4662      	mov	r2, ip
    b7e6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    b7ea:	f802 cd01 	strb.w	ip, [r2, #-1]!
    b7ee:	4299      	cmp	r1, r3
    b7f0:	d1f9      	bne.n	b7e6 <memmove+0x12>
    b7f2:	4770      	bx	lr
    b7f4:	2a0f      	cmp	r2, #15
    b7f6:	d80e      	bhi.n	b816 <memmove+0x42>
    b7f8:	4603      	mov	r3, r0
    b7fa:	f102 3cff 	add.w	ip, r2, #4294967295
    b7fe:	b14a      	cbz	r2, b814 <memmove+0x40>
    b800:	f10c 0c01 	add.w	ip, ip, #1
    b804:	3b01      	subs	r3, #1
    b806:	448c      	add	ip, r1
    b808:	f811 2b01 	ldrb.w	r2, [r1], #1
    b80c:	f803 2f01 	strb.w	r2, [r3, #1]!
    b810:	4561      	cmp	r1, ip
    b812:	d1f9      	bne.n	b808 <memmove+0x34>
    b814:	4770      	bx	lr
    b816:	ea40 0301 	orr.w	r3, r0, r1
    b81a:	079b      	lsls	r3, r3, #30
    b81c:	d150      	bne.n	b8c0 <memmove+0xec>
    b81e:	f1a2 0310 	sub.w	r3, r2, #16
    b822:	b570      	push	{r4, r5, r6, lr}
    b824:	f101 0c20 	add.w	ip, r1, #32
    b828:	f023 050f 	bic.w	r5, r3, #15
    b82c:	f101 0e10 	add.w	lr, r1, #16
    b830:	f100 0410 	add.w	r4, r0, #16
    b834:	44ac      	add	ip, r5
    b836:	091b      	lsrs	r3, r3, #4
    b838:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    b83c:	f844 5c10 	str.w	r5, [r4, #-16]
    b840:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    b844:	f844 5c0c 	str.w	r5, [r4, #-12]
    b848:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    b84c:	f844 5c08 	str.w	r5, [r4, #-8]
    b850:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    b854:	f844 5c04 	str.w	r5, [r4, #-4]
    b858:	f10e 0e10 	add.w	lr, lr, #16
    b85c:	45e6      	cmp	lr, ip
    b85e:	f104 0410 	add.w	r4, r4, #16
    b862:	d1e9      	bne.n	b838 <memmove+0x64>
    b864:	3301      	adds	r3, #1
    b866:	f012 0f0c 	tst.w	r2, #12
    b86a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    b86e:	f002 040f 	and.w	r4, r2, #15
    b872:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    b876:	d027      	beq.n	b8c8 <memmove+0xf4>
    b878:	3c04      	subs	r4, #4
    b87a:	f024 0603 	bic.w	r6, r4, #3
    b87e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    b882:	441e      	add	r6, r3
    b884:	1f1c      	subs	r4, r3, #4
    b886:	468e      	mov	lr, r1
    b888:	f85e 5b04 	ldr.w	r5, [lr], #4
    b88c:	f844 5f04 	str.w	r5, [r4, #4]!
    b890:	42b4      	cmp	r4, r6
    b892:	d1f9      	bne.n	b888 <memmove+0xb4>
    b894:	f10c 0401 	add.w	r4, ip, #1
    b898:	f002 0203 	and.w	r2, r2, #3
    b89c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    b8a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    b8a4:	f102 3cff 	add.w	ip, r2, #4294967295
    b8a8:	b14a      	cbz	r2, b8be <memmove+0xea>
    b8aa:	f10c 0c01 	add.w	ip, ip, #1
    b8ae:	3b01      	subs	r3, #1
    b8b0:	448c      	add	ip, r1
    b8b2:	f811 2b01 	ldrb.w	r2, [r1], #1
    b8b6:	f803 2f01 	strb.w	r2, [r3, #1]!
    b8ba:	4561      	cmp	r1, ip
    b8bc:	d1f9      	bne.n	b8b2 <memmove+0xde>
    b8be:	bd70      	pop	{r4, r5, r6, pc}
    b8c0:	f102 3cff 	add.w	ip, r2, #4294967295
    b8c4:	4603      	mov	r3, r0
    b8c6:	e79b      	b.n	b800 <memmove+0x2c>
    b8c8:	4622      	mov	r2, r4
    b8ca:	e7eb      	b.n	b8a4 <memmove+0xd0>

0000b8cc <memset>:
    b8cc:	0783      	lsls	r3, r0, #30
    b8ce:	b530      	push	{r4, r5, lr}
    b8d0:	d048      	beq.n	b964 <memset+0x98>
    b8d2:	1e54      	subs	r4, r2, #1
    b8d4:	2a00      	cmp	r2, #0
    b8d6:	d03f      	beq.n	b958 <memset+0x8c>
    b8d8:	b2ca      	uxtb	r2, r1
    b8da:	4603      	mov	r3, r0
    b8dc:	e001      	b.n	b8e2 <memset+0x16>
    b8de:	3c01      	subs	r4, #1
    b8e0:	d33a      	bcc.n	b958 <memset+0x8c>
    b8e2:	f803 2b01 	strb.w	r2, [r3], #1
    b8e6:	079d      	lsls	r5, r3, #30
    b8e8:	d1f9      	bne.n	b8de <memset+0x12>
    b8ea:	2c03      	cmp	r4, #3
    b8ec:	d92d      	bls.n	b94a <memset+0x7e>
    b8ee:	b2cd      	uxtb	r5, r1
    b8f0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    b8f4:	2c0f      	cmp	r4, #15
    b8f6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    b8fa:	d936      	bls.n	b96a <memset+0x9e>
    b8fc:	f1a4 0210 	sub.w	r2, r4, #16
    b900:	f022 0c0f 	bic.w	ip, r2, #15
    b904:	f103 0e20 	add.w	lr, r3, #32
    b908:	44e6      	add	lr, ip
    b90a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    b90e:	f103 0210 	add.w	r2, r3, #16
    b912:	e942 5504 	strd	r5, r5, [r2, #-16]
    b916:	e942 5502 	strd	r5, r5, [r2, #-8]
    b91a:	3210      	adds	r2, #16
    b91c:	4572      	cmp	r2, lr
    b91e:	d1f8      	bne.n	b912 <memset+0x46>
    b920:	f10c 0201 	add.w	r2, ip, #1
    b924:	f014 0f0c 	tst.w	r4, #12
    b928:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    b92c:	f004 0c0f 	and.w	ip, r4, #15
    b930:	d013      	beq.n	b95a <memset+0x8e>
    b932:	f1ac 0304 	sub.w	r3, ip, #4
    b936:	f023 0303 	bic.w	r3, r3, #3
    b93a:	3304      	adds	r3, #4
    b93c:	4413      	add	r3, r2
    b93e:	f842 5b04 	str.w	r5, [r2], #4
    b942:	4293      	cmp	r3, r2
    b944:	d1fb      	bne.n	b93e <memset+0x72>
    b946:	f00c 0403 	and.w	r4, ip, #3
    b94a:	b12c      	cbz	r4, b958 <memset+0x8c>
    b94c:	b2c9      	uxtb	r1, r1
    b94e:	441c      	add	r4, r3
    b950:	f803 1b01 	strb.w	r1, [r3], #1
    b954:	429c      	cmp	r4, r3
    b956:	d1fb      	bne.n	b950 <memset+0x84>
    b958:	bd30      	pop	{r4, r5, pc}
    b95a:	4664      	mov	r4, ip
    b95c:	4613      	mov	r3, r2
    b95e:	2c00      	cmp	r4, #0
    b960:	d1f4      	bne.n	b94c <memset+0x80>
    b962:	e7f9      	b.n	b958 <memset+0x8c>
    b964:	4603      	mov	r3, r0
    b966:	4614      	mov	r4, r2
    b968:	e7bf      	b.n	b8ea <memset+0x1e>
    b96a:	461a      	mov	r2, r3
    b96c:	46a4      	mov	ip, r4
    b96e:	e7e0      	b.n	b932 <memset+0x66>

0000b970 <strncmp>:
    b970:	2a00      	cmp	r2, #0
    b972:	d03e      	beq.n	b9f2 <strncmp+0x82>
    b974:	ea40 0301 	orr.w	r3, r0, r1
    b978:	079b      	lsls	r3, r3, #30
    b97a:	b530      	push	{r4, r5, lr}
    b97c:	4684      	mov	ip, r0
    b97e:	d12f      	bne.n	b9e0 <strncmp+0x70>
    b980:	2a03      	cmp	r2, #3
    b982:	d92d      	bls.n	b9e0 <strncmp+0x70>
    b984:	460b      	mov	r3, r1
    b986:	e008      	b.n	b99a <strncmp+0x2a>
    b988:	3a04      	subs	r2, #4
    b98a:	4684      	mov	ip, r0
    b98c:	4619      	mov	r1, r3
    b98e:	d025      	beq.n	b9dc <strncmp+0x6c>
    b990:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    b994:	d122      	bne.n	b9dc <strncmp+0x6c>
    b996:	2a03      	cmp	r2, #3
    b998:	d922      	bls.n	b9e0 <strncmp+0x70>
    b99a:	6804      	ldr	r4, [r0, #0]
    b99c:	4619      	mov	r1, r3
    b99e:	f853 5b04 	ldr.w	r5, [r3], #4
    b9a2:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    b9a6:	42ac      	cmp	r4, r5
    b9a8:	4684      	mov	ip, r0
    b9aa:	ea2e 0e04 	bic.w	lr, lr, r4
    b9ae:	f100 0004 	add.w	r0, r0, #4
    b9b2:	d0e9      	beq.n	b988 <strncmp+0x18>
    b9b4:	f89c 0000 	ldrb.w	r0, [ip]
    b9b8:	780c      	ldrb	r4, [r1, #0]
    b9ba:	42a0      	cmp	r0, r4
    b9bc:	d11b      	bne.n	b9f6 <strncmp+0x86>
    b9be:	46e6      	mov	lr, ip
    b9c0:	b168      	cbz	r0, b9de <strncmp+0x6e>
    b9c2:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    b9c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    b9ca:	eba2 030e 	sub.w	r3, r2, lr
    b9ce:	42a0      	cmp	r0, r4
    b9d0:	f103 33ff 	add.w	r3, r3, #4294967295
    b9d4:	d10f      	bne.n	b9f6 <strncmp+0x86>
    b9d6:	eb1c 0303 	adds.w	r3, ip, r3
    b9da:	d1f1      	bne.n	b9c0 <strncmp+0x50>
    b9dc:	2000      	movs	r0, #0
    b9de:	bd30      	pop	{r4, r5, pc}
    b9e0:	f89c 0000 	ldrb.w	r0, [ip]
    b9e4:	780c      	ldrb	r4, [r1, #0]
    b9e6:	4284      	cmp	r4, r0
    b9e8:	d105      	bne.n	b9f6 <strncmp+0x86>
    b9ea:	2a01      	cmp	r2, #1
    b9ec:	d0f6      	beq.n	b9dc <strncmp+0x6c>
    b9ee:	46e6      	mov	lr, ip
    b9f0:	e7e6      	b.n	b9c0 <strncmp+0x50>
    b9f2:	4610      	mov	r0, r2
    b9f4:	4770      	bx	lr
    b9f6:	1b00      	subs	r0, r0, r4
    b9f8:	bd30      	pop	{r4, r5, pc}
    b9fa:	bf00      	nop

0000b9fc <strncpy>:
    b9fc:	ea40 0301 	orr.w	r3, r0, r1
    ba00:	079b      	lsls	r3, r3, #30
    ba02:	b530      	push	{r4, r5, lr}
    ba04:	d101      	bne.n	ba0a <strncpy+0xe>
    ba06:	2a03      	cmp	r2, #3
    ba08:	d80f      	bhi.n	ba2a <strncpy+0x2e>
    ba0a:	4684      	mov	ip, r0
    ba0c:	f101 3eff 	add.w	lr, r1, #4294967295
    ba10:	e007      	b.n	ba22 <strncpy+0x26>
    ba12:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    ba16:	f803 1b01 	strb.w	r1, [r3], #1
    ba1a:	1e54      	subs	r4, r2, #1
    ba1c:	b1c1      	cbz	r1, ba50 <strncpy+0x54>
    ba1e:	469c      	mov	ip, r3
    ba20:	4622      	mov	r2, r4
    ba22:	4663      	mov	r3, ip
    ba24:	2a00      	cmp	r2, #0
    ba26:	d1f4      	bne.n	ba12 <strncpy+0x16>
    ba28:	bd30      	pop	{r4, r5, pc}
    ba2a:	460b      	mov	r3, r1
    ba2c:	4684      	mov	ip, r0
    ba2e:	4619      	mov	r1, r3
    ba30:	f853 5b04 	ldr.w	r5, [r3], #4
    ba34:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    ba38:	ea24 0405 	bic.w	r4, r4, r5
    ba3c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    ba40:	d1e4      	bne.n	ba0c <strncpy+0x10>
    ba42:	3a04      	subs	r2, #4
    ba44:	2a03      	cmp	r2, #3
    ba46:	f84c 5b04 	str.w	r5, [ip], #4
    ba4a:	4619      	mov	r1, r3
    ba4c:	d8ef      	bhi.n	ba2e <strncpy+0x32>
    ba4e:	e7dd      	b.n	ba0c <strncpy+0x10>
    ba50:	4494      	add	ip, r2
    ba52:	2c00      	cmp	r4, #0
    ba54:	d0e8      	beq.n	ba28 <strncpy+0x2c>
    ba56:	f803 1b01 	strb.w	r1, [r3], #1
    ba5a:	4563      	cmp	r3, ip
    ba5c:	d1fb      	bne.n	ba56 <strncpy+0x5a>
    ba5e:	bd30      	pop	{r4, r5, pc}

0000ba60 <__locale_mb_cur_max>:
    ba60:	4b01      	ldr	r3, [pc, #4]	; (ba68 <__locale_mb_cur_max+0x8>)
    ba62:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    ba66:	4770      	bx	lr
    ba68:	200085c8 	.word	0x200085c8

0000ba6c <_close_r>:
    ba6c:	b538      	push	{r3, r4, r5, lr}
    ba6e:	4d07      	ldr	r5, [pc, #28]	; (ba8c <_close_r+0x20>)
    ba70:	2200      	movs	r2, #0
    ba72:	4604      	mov	r4, r0
    ba74:	4608      	mov	r0, r1
    ba76:	602a      	str	r2, [r5, #0]
    ba78:	f7fc fc3c 	bl	82f4 <_close>
    ba7c:	1c43      	adds	r3, r0, #1
    ba7e:	d000      	beq.n	ba82 <_close_r+0x16>
    ba80:	bd38      	pop	{r3, r4, r5, pc}
    ba82:	682b      	ldr	r3, [r5, #0]
    ba84:	2b00      	cmp	r3, #0
    ba86:	d0fb      	beq.n	ba80 <_close_r+0x14>
    ba88:	6023      	str	r3, [r4, #0]
    ba8a:	bd38      	pop	{r3, r4, r5, pc}
    ba8c:	2001e638 	.word	0x2001e638

0000ba90 <_lseek_r>:
    ba90:	b538      	push	{r3, r4, r5, lr}
    ba92:	460c      	mov	r4, r1
    ba94:	4d08      	ldr	r5, [pc, #32]	; (bab8 <_lseek_r+0x28>)
    ba96:	4684      	mov	ip, r0
    ba98:	4611      	mov	r1, r2
    ba9a:	4620      	mov	r0, r4
    ba9c:	461a      	mov	r2, r3
    ba9e:	2300      	movs	r3, #0
    baa0:	602b      	str	r3, [r5, #0]
    baa2:	4664      	mov	r4, ip
    baa4:	f7fc fc32 	bl	830c <_lseek>
    baa8:	1c43      	adds	r3, r0, #1
    baaa:	d000      	beq.n	baae <_lseek_r+0x1e>
    baac:	bd38      	pop	{r3, r4, r5, pc}
    baae:	682b      	ldr	r3, [r5, #0]
    bab0:	2b00      	cmp	r3, #0
    bab2:	d0fb      	beq.n	baac <_lseek_r+0x1c>
    bab4:	6023      	str	r3, [r4, #0]
    bab6:	bd38      	pop	{r3, r4, r5, pc}
    bab8:	2001e638 	.word	0x2001e638

0000babc <_read_r>:
    babc:	b538      	push	{r3, r4, r5, lr}
    babe:	460c      	mov	r4, r1
    bac0:	4d08      	ldr	r5, [pc, #32]	; (bae4 <_read_r+0x28>)
    bac2:	4684      	mov	ip, r0
    bac4:	4611      	mov	r1, r2
    bac6:	4620      	mov	r0, r4
    bac8:	461a      	mov	r2, r3
    baca:	2300      	movs	r3, #0
    bacc:	602b      	str	r3, [r5, #0]
    bace:	4664      	mov	r4, ip
    bad0:	f7fc fc0e 	bl	82f0 <_read>
    bad4:	1c43      	adds	r3, r0, #1
    bad6:	d000      	beq.n	bada <_read_r+0x1e>
    bad8:	bd38      	pop	{r3, r4, r5, pc}
    bada:	682b      	ldr	r3, [r5, #0]
    badc:	2b00      	cmp	r3, #0
    bade:	d0fb      	beq.n	bad8 <_read_r+0x1c>
    bae0:	6023      	str	r3, [r4, #0]
    bae2:	bd38      	pop	{r3, r4, r5, pc}
    bae4:	2001e638 	.word	0x2001e638

0000bae8 <_sbrk_r>:
    bae8:	b538      	push	{r3, r4, r5, lr}
    baea:	4d07      	ldr	r5, [pc, #28]	; (bb08 <_sbrk_r+0x20>)
    baec:	2200      	movs	r2, #0
    baee:	4604      	mov	r4, r0
    baf0:	4608      	mov	r0, r1
    baf2:	602a      	str	r2, [r5, #0]
    baf4:	f7fc fbe2 	bl	82bc <_sbrk>
    baf8:	1c43      	adds	r3, r0, #1
    bafa:	d000      	beq.n	bafe <_sbrk_r+0x16>
    bafc:	bd38      	pop	{r3, r4, r5, pc}
    bafe:	682b      	ldr	r3, [r5, #0]
    bb00:	2b00      	cmp	r3, #0
    bb02:	d0fb      	beq.n	bafc <_sbrk_r+0x14>
    bb04:	6023      	str	r3, [r4, #0]
    bb06:	bd38      	pop	{r3, r4, r5, pc}
    bb08:	2001e638 	.word	0x2001e638

0000bb0c <_write_r>:
    bb0c:	b538      	push	{r3, r4, r5, lr}
    bb0e:	460c      	mov	r4, r1
    bb10:	4d08      	ldr	r5, [pc, #32]	; (bb34 <_write_r+0x28>)
    bb12:	4684      	mov	ip, r0
    bb14:	4611      	mov	r1, r2
    bb16:	4620      	mov	r0, r4
    bb18:	461a      	mov	r2, r3
    bb1a:	2300      	movs	r3, #0
    bb1c:	602b      	str	r3, [r5, #0]
    bb1e:	4664      	mov	r4, ip
    bb20:	f7fb fe7e 	bl	7820 <_write>
    bb24:	1c43      	adds	r3, r0, #1
    bb26:	d000      	beq.n	bb2a <_write_r+0x1e>
    bb28:	bd38      	pop	{r3, r4, r5, pc}
    bb2a:	682b      	ldr	r3, [r5, #0]
    bb2c:	2b00      	cmp	r3, #0
    bb2e:	d0fb      	beq.n	bb28 <_write_r+0x1c>
    bb30:	6023      	str	r3, [r4, #0]
    bb32:	bd38      	pop	{r3, r4, r5, pc}
    bb34:	2001e638 	.word	0x2001e638

0000bb38 <__errno>:
    bb38:	4b01      	ldr	r3, [pc, #4]	; (bb40 <__errno+0x8>)
    bb3a:	6818      	ldr	r0, [r3, #0]
    bb3c:	4770      	bx	lr
    bb3e:	bf00      	nop
    bb40:	20008b50 	.word	0x20008b50

0000bb44 <__libc_init_array>:
    bb44:	b570      	push	{r4, r5, r6, lr}
    bb46:	4e0d      	ldr	r6, [pc, #52]	; (bb7c <__libc_init_array+0x38>)
    bb48:	4d0d      	ldr	r5, [pc, #52]	; (bb80 <__libc_init_array+0x3c>)
    bb4a:	1b76      	subs	r6, r6, r5
    bb4c:	10b6      	asrs	r6, r6, #2
    bb4e:	d006      	beq.n	bb5e <__libc_init_array+0x1a>
    bb50:	2400      	movs	r4, #0
    bb52:	f855 3b04 	ldr.w	r3, [r5], #4
    bb56:	3401      	adds	r4, #1
    bb58:	4798      	blx	r3
    bb5a:	42a6      	cmp	r6, r4
    bb5c:	d1f9      	bne.n	bb52 <__libc_init_array+0xe>
    bb5e:	4e09      	ldr	r6, [pc, #36]	; (bb84 <__libc_init_array+0x40>)
    bb60:	4d09      	ldr	r5, [pc, #36]	; (bb88 <__libc_init_array+0x44>)
    bb62:	1b76      	subs	r6, r6, r5
    bb64:	f008 fc30 	bl	143c8 <___init_veneer>
    bb68:	10b6      	asrs	r6, r6, #2
    bb6a:	d006      	beq.n	bb7a <__libc_init_array+0x36>
    bb6c:	2400      	movs	r4, #0
    bb6e:	f855 3b04 	ldr.w	r3, [r5], #4
    bb72:	3401      	adds	r4, #1
    bb74:	4798      	blx	r3
    bb76:	42a6      	cmp	r6, r4
    bb78:	d1f9      	bne.n	bb6e <__libc_init_array+0x2a>
    bb7a:	bd70      	pop	{r4, r5, r6, pc}
    bb7c:	60002660 	.word	0x60002660
    bb80:	60002660 	.word	0x60002660
    bb84:	60002674 	.word	0x60002674
    bb88:	60002660 	.word	0x60002660

0000bb8c <__retarget_lock_init_recursive>:
    bb8c:	4770      	bx	lr
    bb8e:	bf00      	nop

0000bb90 <__retarget_lock_close_recursive>:
    bb90:	4770      	bx	lr
    bb92:	bf00      	nop

0000bb94 <__retarget_lock_acquire_recursive>:
    bb94:	4770      	bx	lr
    bb96:	bf00      	nop

0000bb98 <__retarget_lock_release_recursive>:
    bb98:	4770      	bx	lr
    bb9a:	bf00      	nop
    bb9c:	0000      	movs	r0, r0
    bb9e:	0000      	movs	r0, r0
    bba0:	eba2 0003 	sub.w	r0, r2, r3
    bba4:	4770      	bx	lr
    bba6:	bf00      	nop

0000bba8 <strcmp>:
    bba8:	7802      	ldrb	r2, [r0, #0]
    bbaa:	780b      	ldrb	r3, [r1, #0]
    bbac:	2a01      	cmp	r2, #1
    bbae:	bf28      	it	cs
    bbb0:	429a      	cmpcs	r2, r3
    bbb2:	d1f5      	bne.n	bba0 <__retarget_lock_release_recursive+0x8>
    bbb4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    bbb8:	ea40 0401 	orr.w	r4, r0, r1
    bbbc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    bbc0:	f06f 0c00 	mvn.w	ip, #0
    bbc4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    bbc8:	b312      	cbz	r2, bc10 <strcmp+0x68>
    bbca:	ea80 0401 	eor.w	r4, r0, r1
    bbce:	f014 0f07 	tst.w	r4, #7
    bbd2:	d16a      	bne.n	bcaa <strcmp+0x102>
    bbd4:	f000 0407 	and.w	r4, r0, #7
    bbd8:	f020 0007 	bic.w	r0, r0, #7
    bbdc:	f004 0503 	and.w	r5, r4, #3
    bbe0:	f021 0107 	bic.w	r1, r1, #7
    bbe4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bbe8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bbec:	f014 0f04 	tst.w	r4, #4
    bbf0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bbf4:	fa0c f405 	lsl.w	r4, ip, r5
    bbf8:	ea62 0204 	orn	r2, r2, r4
    bbfc:	ea66 0604 	orn	r6, r6, r4
    bc00:	d00a      	beq.n	bc18 <strcmp+0x70>
    bc02:	ea63 0304 	orn	r3, r3, r4
    bc06:	4662      	mov	r2, ip
    bc08:	ea67 0704 	orn	r7, r7, r4
    bc0c:	4666      	mov	r6, ip
    bc0e:	e003      	b.n	bc18 <strcmp+0x70>
    bc10:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bc14:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bc18:	fa82 f54c 	uadd8	r5, r2, ip
    bc1c:	ea82 0406 	eor.w	r4, r2, r6
    bc20:	faa4 f48c 	sel	r4, r4, ip
    bc24:	bb6c      	cbnz	r4, bc82 <strcmp+0xda>
    bc26:	fa83 f54c 	uadd8	r5, r3, ip
    bc2a:	ea83 0507 	eor.w	r5, r3, r7
    bc2e:	faa5 f58c 	sel	r5, r5, ip
    bc32:	b995      	cbnz	r5, bc5a <strcmp+0xb2>
    bc34:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    bc38:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    bc3c:	fa82 f54c 	uadd8	r5, r2, ip
    bc40:	ea82 0406 	eor.w	r4, r2, r6
    bc44:	faa4 f48c 	sel	r4, r4, ip
    bc48:	fa83 f54c 	uadd8	r5, r3, ip
    bc4c:	ea83 0507 	eor.w	r5, r3, r7
    bc50:	faa5 f58c 	sel	r5, r5, ip
    bc54:	4325      	orrs	r5, r4
    bc56:	d0db      	beq.n	bc10 <strcmp+0x68>
    bc58:	b99c      	cbnz	r4, bc82 <strcmp+0xda>
    bc5a:	ba2d      	rev	r5, r5
    bc5c:	fab5 f485 	clz	r4, r5
    bc60:	f024 0407 	bic.w	r4, r4, #7
    bc64:	fa27 f104 	lsr.w	r1, r7, r4
    bc68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    bc6c:	fa23 f304 	lsr.w	r3, r3, r4
    bc70:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    bc74:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bc78:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bc7c:	eba0 0001 	sub.w	r0, r0, r1
    bc80:	4770      	bx	lr
    bc82:	ba24      	rev	r4, r4
    bc84:	fab4 f484 	clz	r4, r4
    bc88:	f024 0407 	bic.w	r4, r4, #7
    bc8c:	fa26 f104 	lsr.w	r1, r6, r4
    bc90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    bc94:	fa22 f204 	lsr.w	r2, r2, r4
    bc98:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    bc9c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bca0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bca4:	eba0 0001 	sub.w	r0, r0, r1
    bca8:	4770      	bx	lr
    bcaa:	f014 0f03 	tst.w	r4, #3
    bcae:	d13c      	bne.n	bd2a <strcmp+0x182>
    bcb0:	f010 0403 	ands.w	r4, r0, #3
    bcb4:	d128      	bne.n	bd08 <strcmp+0x160>
    bcb6:	f850 2b08 	ldr.w	r2, [r0], #8
    bcba:	f851 3b08 	ldr.w	r3, [r1], #8
    bcbe:	fa82 f54c 	uadd8	r5, r2, ip
    bcc2:	ea82 0503 	eor.w	r5, r2, r3
    bcc6:	faa5 f58c 	sel	r5, r5, ip
    bcca:	b95d      	cbnz	r5, bce4 <strcmp+0x13c>
    bccc:	f850 2c04 	ldr.w	r2, [r0, #-4]
    bcd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    bcd4:	fa82 f54c 	uadd8	r5, r2, ip
    bcd8:	ea82 0503 	eor.w	r5, r2, r3
    bcdc:	faa5 f58c 	sel	r5, r5, ip
    bce0:	2d00      	cmp	r5, #0
    bce2:	d0e8      	beq.n	bcb6 <strcmp+0x10e>
    bce4:	ba2d      	rev	r5, r5
    bce6:	fab5 f485 	clz	r4, r5
    bcea:	f024 0407 	bic.w	r4, r4, #7
    bcee:	fa23 f104 	lsr.w	r1, r3, r4
    bcf2:	fa22 f204 	lsr.w	r2, r2, r4
    bcf6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    bcfa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bcfe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bd02:	eba0 0001 	sub.w	r0, r0, r1
    bd06:	4770      	bx	lr
    bd08:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    bd0c:	f020 0003 	bic.w	r0, r0, #3
    bd10:	f850 2b08 	ldr.w	r2, [r0], #8
    bd14:	f021 0103 	bic.w	r1, r1, #3
    bd18:	f851 3b08 	ldr.w	r3, [r1], #8
    bd1c:	fa0c f404 	lsl.w	r4, ip, r4
    bd20:	ea62 0204 	orn	r2, r2, r4
    bd24:	ea63 0304 	orn	r3, r3, r4
    bd28:	e7c9      	b.n	bcbe <strcmp+0x116>
    bd2a:	f010 0403 	ands.w	r4, r0, #3
    bd2e:	d01a      	beq.n	bd66 <strcmp+0x1be>
    bd30:	eba1 0104 	sub.w	r1, r1, r4
    bd34:	f020 0003 	bic.w	r0, r0, #3
    bd38:	07e4      	lsls	r4, r4, #31
    bd3a:	f850 2b04 	ldr.w	r2, [r0], #4
    bd3e:	d006      	beq.n	bd4e <strcmp+0x1a6>
    bd40:	d20f      	bcs.n	bd62 <strcmp+0x1ba>
    bd42:	788b      	ldrb	r3, [r1, #2]
    bd44:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    bd48:	1ae4      	subs	r4, r4, r3
    bd4a:	d106      	bne.n	bd5a <strcmp+0x1b2>
    bd4c:	b12b      	cbz	r3, bd5a <strcmp+0x1b2>
    bd4e:	78cb      	ldrb	r3, [r1, #3]
    bd50:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    bd54:	1ae4      	subs	r4, r4, r3
    bd56:	d100      	bne.n	bd5a <strcmp+0x1b2>
    bd58:	b91b      	cbnz	r3, bd62 <strcmp+0x1ba>
    bd5a:	4620      	mov	r0, r4
    bd5c:	f85d 4b10 	ldr.w	r4, [sp], #16
    bd60:	4770      	bx	lr
    bd62:	f101 0104 	add.w	r1, r1, #4
    bd66:	f850 2b04 	ldr.w	r2, [r0], #4
    bd6a:	07cc      	lsls	r4, r1, #31
    bd6c:	f021 0103 	bic.w	r1, r1, #3
    bd70:	f851 3b04 	ldr.w	r3, [r1], #4
    bd74:	d848      	bhi.n	be08 <strcmp+0x260>
    bd76:	d224      	bcs.n	bdc2 <strcmp+0x21a>
    bd78:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    bd7c:	fa82 f54c 	uadd8	r5, r2, ip
    bd80:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    bd84:	faa5 f58c 	sel	r5, r5, ip
    bd88:	d10a      	bne.n	bda0 <strcmp+0x1f8>
    bd8a:	b965      	cbnz	r5, bda6 <strcmp+0x1fe>
    bd8c:	f851 3b04 	ldr.w	r3, [r1], #4
    bd90:	ea84 0402 	eor.w	r4, r4, r2
    bd94:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    bd98:	d10e      	bne.n	bdb8 <strcmp+0x210>
    bd9a:	f850 2b04 	ldr.w	r2, [r0], #4
    bd9e:	e7eb      	b.n	bd78 <strcmp+0x1d0>
    bda0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    bda4:	e055      	b.n	be52 <strcmp+0x2aa>
    bda6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    bdaa:	d14d      	bne.n	be48 <strcmp+0x2a0>
    bdac:	7808      	ldrb	r0, [r1, #0]
    bdae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bdb2:	f1c0 0000 	rsb	r0, r0, #0
    bdb6:	4770      	bx	lr
    bdb8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    bdbc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bdc0:	e047      	b.n	be52 <strcmp+0x2aa>
    bdc2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    bdc6:	fa82 f54c 	uadd8	r5, r2, ip
    bdca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    bdce:	faa5 f58c 	sel	r5, r5, ip
    bdd2:	d10a      	bne.n	bdea <strcmp+0x242>
    bdd4:	b965      	cbnz	r5, bdf0 <strcmp+0x248>
    bdd6:	f851 3b04 	ldr.w	r3, [r1], #4
    bdda:	ea84 0402 	eor.w	r4, r4, r2
    bdde:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    bde2:	d10c      	bne.n	bdfe <strcmp+0x256>
    bde4:	f850 2b04 	ldr.w	r2, [r0], #4
    bde8:	e7eb      	b.n	bdc2 <strcmp+0x21a>
    bdea:	ea4f 4313 	mov.w	r3, r3, lsr #16
    bdee:	e030      	b.n	be52 <strcmp+0x2aa>
    bdf0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    bdf4:	d128      	bne.n	be48 <strcmp+0x2a0>
    bdf6:	880b      	ldrh	r3, [r1, #0]
    bdf8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bdfc:	e029      	b.n	be52 <strcmp+0x2aa>
    bdfe:	ea4f 4212 	mov.w	r2, r2, lsr #16
    be02:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    be06:	e024      	b.n	be52 <strcmp+0x2aa>
    be08:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    be0c:	fa82 f54c 	uadd8	r5, r2, ip
    be10:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    be14:	faa5 f58c 	sel	r5, r5, ip
    be18:	d10a      	bne.n	be30 <strcmp+0x288>
    be1a:	b965      	cbnz	r5, be36 <strcmp+0x28e>
    be1c:	f851 3b04 	ldr.w	r3, [r1], #4
    be20:	ea84 0402 	eor.w	r4, r4, r2
    be24:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    be28:	d109      	bne.n	be3e <strcmp+0x296>
    be2a:	f850 2b04 	ldr.w	r2, [r0], #4
    be2e:	e7eb      	b.n	be08 <strcmp+0x260>
    be30:	ea4f 6313 	mov.w	r3, r3, lsr #24
    be34:	e00d      	b.n	be52 <strcmp+0x2aa>
    be36:	f015 0fff 	tst.w	r5, #255	; 0xff
    be3a:	d105      	bne.n	be48 <strcmp+0x2a0>
    be3c:	680b      	ldr	r3, [r1, #0]
    be3e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    be42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    be46:	e004      	b.n	be52 <strcmp+0x2aa>
    be48:	f04f 0000 	mov.w	r0, #0
    be4c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    be50:	4770      	bx	lr
    be52:	ba12      	rev	r2, r2
    be54:	ba1b      	rev	r3, r3
    be56:	fa82 f44c 	uadd8	r4, r2, ip
    be5a:	ea82 0403 	eor.w	r4, r2, r3
    be5e:	faa4 f58c 	sel	r5, r4, ip
    be62:	fab5 f485 	clz	r4, r5
    be66:	fa02 f204 	lsl.w	r2, r2, r4
    be6a:	fa03 f304 	lsl.w	r3, r3, r4
    be6e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    be72:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    be76:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    be7a:	4770      	bx	lr

0000be7c <strcpy>:
    be7c:	ea80 0201 	eor.w	r2, r0, r1
    be80:	4684      	mov	ip, r0
    be82:	f012 0f03 	tst.w	r2, #3
    be86:	d14f      	bne.n	bf28 <strcpy+0xac>
    be88:	f011 0f03 	tst.w	r1, #3
    be8c:	d132      	bne.n	bef4 <strcpy+0x78>
    be8e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    be92:	f011 0f04 	tst.w	r1, #4
    be96:	f851 3b04 	ldr.w	r3, [r1], #4
    be9a:	d00b      	beq.n	beb4 <strcpy+0x38>
    be9c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bea0:	439a      	bics	r2, r3
    bea2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bea6:	bf04      	itt	eq
    bea8:	f84c 3b04 	streq.w	r3, [ip], #4
    beac:	f851 3b04 	ldreq.w	r3, [r1], #4
    beb0:	d116      	bne.n	bee0 <strcpy+0x64>
    beb2:	bf00      	nop
    beb4:	f851 4b04 	ldr.w	r4, [r1], #4
    beb8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bebc:	439a      	bics	r2, r3
    bebe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bec2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    bec6:	d10b      	bne.n	bee0 <strcpy+0x64>
    bec8:	f84c 3b04 	str.w	r3, [ip], #4
    becc:	43a2      	bics	r2, r4
    bece:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bed2:	bf04      	itt	eq
    bed4:	f851 3b04 	ldreq.w	r3, [r1], #4
    bed8:	f84c 4b04 	streq.w	r4, [ip], #4
    bedc:	d0ea      	beq.n	beb4 <strcpy+0x38>
    bede:	4623      	mov	r3, r4
    bee0:	f80c 3b01 	strb.w	r3, [ip], #1
    bee4:	f013 0fff 	tst.w	r3, #255	; 0xff
    bee8:	ea4f 2333 	mov.w	r3, r3, ror #8
    beec:	d1f8      	bne.n	bee0 <strcpy+0x64>
    beee:	f85d 4b04 	ldr.w	r4, [sp], #4
    bef2:	4770      	bx	lr
    bef4:	f011 0f01 	tst.w	r1, #1
    bef8:	d006      	beq.n	bf08 <strcpy+0x8c>
    befa:	f811 2b01 	ldrb.w	r2, [r1], #1
    befe:	f80c 2b01 	strb.w	r2, [ip], #1
    bf02:	2a00      	cmp	r2, #0
    bf04:	bf08      	it	eq
    bf06:	4770      	bxeq	lr
    bf08:	f011 0f02 	tst.w	r1, #2
    bf0c:	d0bf      	beq.n	be8e <strcpy+0x12>
    bf0e:	f831 2b02 	ldrh.w	r2, [r1], #2
    bf12:	f012 0fff 	tst.w	r2, #255	; 0xff
    bf16:	bf16      	itet	ne
    bf18:	f82c 2b02 	strhne.w	r2, [ip], #2
    bf1c:	f88c 2000 	strbeq.w	r2, [ip]
    bf20:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    bf24:	d1b3      	bne.n	be8e <strcpy+0x12>
    bf26:	4770      	bx	lr
    bf28:	f811 2b01 	ldrb.w	r2, [r1], #1
    bf2c:	f80c 2b01 	strb.w	r2, [ip], #1
    bf30:	2a00      	cmp	r2, #0
    bf32:	d1f9      	bne.n	bf28 <strcpy+0xac>
    bf34:	4770      	bx	lr
    bf36:	bf00      	nop
	...

0000bf40 <memchr>:
    bf40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bf44:	2a10      	cmp	r2, #16
    bf46:	db2b      	blt.n	bfa0 <memchr+0x60>
    bf48:	f010 0f07 	tst.w	r0, #7
    bf4c:	d008      	beq.n	bf60 <memchr+0x20>
    bf4e:	f810 3b01 	ldrb.w	r3, [r0], #1
    bf52:	3a01      	subs	r2, #1
    bf54:	428b      	cmp	r3, r1
    bf56:	d02d      	beq.n	bfb4 <memchr+0x74>
    bf58:	f010 0f07 	tst.w	r0, #7
    bf5c:	b342      	cbz	r2, bfb0 <memchr+0x70>
    bf5e:	d1f6      	bne.n	bf4e <memchr+0xe>
    bf60:	b4f0      	push	{r4, r5, r6, r7}
    bf62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    bf66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    bf6a:	f022 0407 	bic.w	r4, r2, #7
    bf6e:	f07f 0700 	mvns.w	r7, #0
    bf72:	2300      	movs	r3, #0
    bf74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    bf78:	3c08      	subs	r4, #8
    bf7a:	ea85 0501 	eor.w	r5, r5, r1
    bf7e:	ea86 0601 	eor.w	r6, r6, r1
    bf82:	fa85 f547 	uadd8	r5, r5, r7
    bf86:	faa3 f587 	sel	r5, r3, r7
    bf8a:	fa86 f647 	uadd8	r6, r6, r7
    bf8e:	faa5 f687 	sel	r6, r5, r7
    bf92:	b98e      	cbnz	r6, bfb8 <memchr+0x78>
    bf94:	d1ee      	bne.n	bf74 <memchr+0x34>
    bf96:	bcf0      	pop	{r4, r5, r6, r7}
    bf98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bf9c:	f002 0207 	and.w	r2, r2, #7
    bfa0:	b132      	cbz	r2, bfb0 <memchr+0x70>
    bfa2:	f810 3b01 	ldrb.w	r3, [r0], #1
    bfa6:	3a01      	subs	r2, #1
    bfa8:	ea83 0301 	eor.w	r3, r3, r1
    bfac:	b113      	cbz	r3, bfb4 <memchr+0x74>
    bfae:	d1f8      	bne.n	bfa2 <memchr+0x62>
    bfb0:	2000      	movs	r0, #0
    bfb2:	4770      	bx	lr
    bfb4:	3801      	subs	r0, #1
    bfb6:	4770      	bx	lr
    bfb8:	2d00      	cmp	r5, #0
    bfba:	bf06      	itte	eq
    bfbc:	4635      	moveq	r5, r6
    bfbe:	3803      	subeq	r0, #3
    bfc0:	3807      	subne	r0, #7
    bfc2:	f015 0f01 	tst.w	r5, #1
    bfc6:	d107      	bne.n	bfd8 <memchr+0x98>
    bfc8:	3001      	adds	r0, #1
    bfca:	f415 7f80 	tst.w	r5, #256	; 0x100
    bfce:	bf02      	ittt	eq
    bfd0:	3001      	addeq	r0, #1
    bfd2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    bfd6:	3001      	addeq	r0, #1
    bfd8:	bcf0      	pop	{r4, r5, r6, r7}
    bfda:	3801      	subs	r0, #1
    bfdc:	4770      	bx	lr
    bfde:	bf00      	nop
	...

0000c000 <strlen>:
    c000:	f890 f000 	pld	[r0]
    c004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    c008:	f020 0107 	bic.w	r1, r0, #7
    c00c:	f06f 0c00 	mvn.w	ip, #0
    c010:	f010 0407 	ands.w	r4, r0, #7
    c014:	f891 f020 	pld	[r1, #32]
    c018:	f040 8049 	bne.w	c0ae <strlen+0xae>
    c01c:	f04f 0400 	mov.w	r4, #0
    c020:	f06f 0007 	mvn.w	r0, #7
    c024:	e9d1 2300 	ldrd	r2, r3, [r1]
    c028:	f891 f040 	pld	[r1, #64]	; 0x40
    c02c:	f100 0008 	add.w	r0, r0, #8
    c030:	fa82 f24c 	uadd8	r2, r2, ip
    c034:	faa4 f28c 	sel	r2, r4, ip
    c038:	fa83 f34c 	uadd8	r3, r3, ip
    c03c:	faa2 f38c 	sel	r3, r2, ip
    c040:	bb4b      	cbnz	r3, c096 <strlen+0x96>
    c042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    c046:	fa82 f24c 	uadd8	r2, r2, ip
    c04a:	f100 0008 	add.w	r0, r0, #8
    c04e:	faa4 f28c 	sel	r2, r4, ip
    c052:	fa83 f34c 	uadd8	r3, r3, ip
    c056:	faa2 f38c 	sel	r3, r2, ip
    c05a:	b9e3      	cbnz	r3, c096 <strlen+0x96>
    c05c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    c060:	fa82 f24c 	uadd8	r2, r2, ip
    c064:	f100 0008 	add.w	r0, r0, #8
    c068:	faa4 f28c 	sel	r2, r4, ip
    c06c:	fa83 f34c 	uadd8	r3, r3, ip
    c070:	faa2 f38c 	sel	r3, r2, ip
    c074:	b97b      	cbnz	r3, c096 <strlen+0x96>
    c076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    c07a:	f101 0120 	add.w	r1, r1, #32
    c07e:	fa82 f24c 	uadd8	r2, r2, ip
    c082:	f100 0008 	add.w	r0, r0, #8
    c086:	faa4 f28c 	sel	r2, r4, ip
    c08a:	fa83 f34c 	uadd8	r3, r3, ip
    c08e:	faa2 f38c 	sel	r3, r2, ip
    c092:	2b00      	cmp	r3, #0
    c094:	d0c6      	beq.n	c024 <strlen+0x24>
    c096:	2a00      	cmp	r2, #0
    c098:	bf04      	itt	eq
    c09a:	3004      	addeq	r0, #4
    c09c:	461a      	moveq	r2, r3
    c09e:	ba12      	rev	r2, r2
    c0a0:	fab2 f282 	clz	r2, r2
    c0a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    c0a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    c0ac:	4770      	bx	lr
    c0ae:	e9d1 2300 	ldrd	r2, r3, [r1]
    c0b2:	f004 0503 	and.w	r5, r4, #3
    c0b6:	f1c4 0000 	rsb	r0, r4, #0
    c0ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    c0be:	f014 0f04 	tst.w	r4, #4
    c0c2:	f891 f040 	pld	[r1, #64]	; 0x40
    c0c6:	fa0c f505 	lsl.w	r5, ip, r5
    c0ca:	ea62 0205 	orn	r2, r2, r5
    c0ce:	bf1c      	itt	ne
    c0d0:	ea63 0305 	ornne	r3, r3, r5
    c0d4:	4662      	movne	r2, ip
    c0d6:	f04f 0400 	mov.w	r4, #0
    c0da:	e7a9      	b.n	c030 <strlen+0x30>
    c0dc:	0000      	movs	r0, r0
	...

0000c0e0 <nan>:
    c0e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; c0e8 <nan+0x8>
    c0e4:	4770      	bx	lr
    c0e6:	bf00      	nop
    c0e8:	00000000 	.word	0x00000000
    c0ec:	7ff80000 	.word	0x7ff80000

0000c0f0 <nanf>:
    c0f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; c0f8 <nanf+0x8>
    c0f4:	4770      	bx	lr
    c0f6:	bf00      	nop
    c0f8:	7fc00000 	.word	0x7fc00000

0000c0fc <__register_exitproc>:
    c0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c100:	f8df a07c 	ldr.w	sl, [pc, #124]	; c180 <__register_exitproc+0x84>
    c104:	4606      	mov	r6, r0
    c106:	f8da 0000 	ldr.w	r0, [sl]
    c10a:	4698      	mov	r8, r3
    c10c:	460f      	mov	r7, r1
    c10e:	4691      	mov	r9, r2
    c110:	f7ff fd40 	bl	bb94 <__retarget_lock_acquire_recursive>
    c114:	4b18      	ldr	r3, [pc, #96]	; (c178 <__register_exitproc+0x7c>)
    c116:	681c      	ldr	r4, [r3, #0]
    c118:	b324      	cbz	r4, c164 <__register_exitproc+0x68>
    c11a:	6865      	ldr	r5, [r4, #4]
    c11c:	2d1f      	cmp	r5, #31
    c11e:	dc24      	bgt.n	c16a <__register_exitproc+0x6e>
    c120:	b95e      	cbnz	r6, c13a <__register_exitproc+0x3e>
    c122:	1c6b      	adds	r3, r5, #1
    c124:	3502      	adds	r5, #2
    c126:	f8da 0000 	ldr.w	r0, [sl]
    c12a:	6063      	str	r3, [r4, #4]
    c12c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    c130:	f7ff fd32 	bl	bb98 <__retarget_lock_release_recursive>
    c134:	2000      	movs	r0, #0
    c136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c13a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    c13e:	2301      	movs	r3, #1
    c140:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    c144:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    c148:	40ab      	lsls	r3, r5
    c14a:	431a      	orrs	r2, r3
    c14c:	2e02      	cmp	r6, #2
    c14e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    c152:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    c156:	d1e4      	bne.n	c122 <__register_exitproc+0x26>
    c158:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    c15c:	431a      	orrs	r2, r3
    c15e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    c162:	e7de      	b.n	c122 <__register_exitproc+0x26>
    c164:	4c05      	ldr	r4, [pc, #20]	; (c17c <__register_exitproc+0x80>)
    c166:	601c      	str	r4, [r3, #0]
    c168:	e7d7      	b.n	c11a <__register_exitproc+0x1e>
    c16a:	f8da 0000 	ldr.w	r0, [sl]
    c16e:	f7ff fd13 	bl	bb98 <__retarget_lock_release_recursive>
    c172:	f04f 30ff 	mov.w	r0, #4294967295
    c176:	e7de      	b.n	c136 <__register_exitproc+0x3a>
    c178:	2001e110 	.word	0x2001e110
    c17c:	2001e114 	.word	0x2001e114
    c180:	200085bc 	.word	0x200085bc

0000c184 <_malloc_trim_r>:
    c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c186:	4f24      	ldr	r7, [pc, #144]	; (c218 <_malloc_trim_r+0x94>)
    c188:	460c      	mov	r4, r1
    c18a:	4606      	mov	r6, r0
    c18c:	f7fd ff26 	bl	9fdc <__malloc_lock>
    c190:	68bb      	ldr	r3, [r7, #8]
    c192:	685d      	ldr	r5, [r3, #4]
    c194:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    c198:	310f      	adds	r1, #15
    c19a:	f025 0503 	bic.w	r5, r5, #3
    c19e:	194b      	adds	r3, r1, r5
    c1a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    c1a4:	f023 030f 	bic.w	r3, r3, #15
    c1a8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    c1ac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    c1b0:	db07      	blt.n	c1c2 <_malloc_trim_r+0x3e>
    c1b2:	2100      	movs	r1, #0
    c1b4:	4630      	mov	r0, r6
    c1b6:	f7ff fc97 	bl	bae8 <_sbrk_r>
    c1ba:	68bb      	ldr	r3, [r7, #8]
    c1bc:	442b      	add	r3, r5
    c1be:	4298      	cmp	r0, r3
    c1c0:	d004      	beq.n	c1cc <_malloc_trim_r+0x48>
    c1c2:	4630      	mov	r0, r6
    c1c4:	f7fd ff10 	bl	9fe8 <__malloc_unlock>
    c1c8:	2000      	movs	r0, #0
    c1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1cc:	4261      	negs	r1, r4
    c1ce:	4630      	mov	r0, r6
    c1d0:	f7ff fc8a 	bl	bae8 <_sbrk_r>
    c1d4:	3001      	adds	r0, #1
    c1d6:	d00d      	beq.n	c1f4 <_malloc_trim_r+0x70>
    c1d8:	4a10      	ldr	r2, [pc, #64]	; (c21c <_malloc_trim_r+0x98>)
    c1da:	68bb      	ldr	r3, [r7, #8]
    c1dc:	1b2d      	subs	r5, r5, r4
    c1de:	f045 0501 	orr.w	r5, r5, #1
    c1e2:	605d      	str	r5, [r3, #4]
    c1e4:	6813      	ldr	r3, [r2, #0]
    c1e6:	4630      	mov	r0, r6
    c1e8:	1b1b      	subs	r3, r3, r4
    c1ea:	6013      	str	r3, [r2, #0]
    c1ec:	f7fd fefc 	bl	9fe8 <__malloc_unlock>
    c1f0:	2001      	movs	r0, #1
    c1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1f4:	2100      	movs	r1, #0
    c1f6:	4630      	mov	r0, r6
    c1f8:	f7ff fc76 	bl	bae8 <_sbrk_r>
    c1fc:	68ba      	ldr	r2, [r7, #8]
    c1fe:	1a83      	subs	r3, r0, r2
    c200:	2b0f      	cmp	r3, #15
    c202:	ddde      	ble.n	c1c2 <_malloc_trim_r+0x3e>
    c204:	f043 0301 	orr.w	r3, r3, #1
    c208:	6053      	str	r3, [r2, #4]
    c20a:	4b05      	ldr	r3, [pc, #20]	; (c220 <_malloc_trim_r+0x9c>)
    c20c:	4903      	ldr	r1, [pc, #12]	; (c21c <_malloc_trim_r+0x98>)
    c20e:	681b      	ldr	r3, [r3, #0]
    c210:	1ac0      	subs	r0, r0, r3
    c212:	6008      	str	r0, [r1, #0]
    c214:	e7d5      	b.n	c1c2 <_malloc_trim_r+0x3e>
    c216:	bf00      	nop
    c218:	20008734 	.word	0x20008734
    c21c:	2001e2b0 	.word	0x2001e2b0
    c220:	20008b3c 	.word	0x20008b3c

0000c224 <_free_r>:
    c224:	2900      	cmp	r1, #0
    c226:	d061      	beq.n	c2ec <_free_r+0xc8>
    c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c22a:	460c      	mov	r4, r1
    c22c:	4606      	mov	r6, r0
    c22e:	f7fd fed5 	bl	9fdc <__malloc_lock>
    c232:	f854 2c04 	ldr.w	r2, [r4, #-4]
    c236:	4f7b      	ldr	r7, [pc, #492]	; (c424 <_free_r+0x200>)
    c238:	f1a4 0508 	sub.w	r5, r4, #8
    c23c:	f022 0101 	bic.w	r1, r2, #1
    c240:	eb05 0c01 	add.w	ip, r5, r1
    c244:	68b8      	ldr	r0, [r7, #8]
    c246:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c24a:	4560      	cmp	r0, ip
    c24c:	f023 0303 	bic.w	r3, r3, #3
    c250:	f000 808b 	beq.w	c36a <_free_r+0x146>
    c254:	07d2      	lsls	r2, r2, #31
    c256:	f8cc 3004 	str.w	r3, [ip, #4]
    c25a:	d432      	bmi.n	c2c2 <_free_r+0x9e>
    c25c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c260:	1aad      	subs	r5, r5, r2
    c262:	4411      	add	r1, r2
    c264:	68aa      	ldr	r2, [r5, #8]
    c266:	f107 0008 	add.w	r0, r7, #8
    c26a:	4282      	cmp	r2, r0
    c26c:	d06a      	beq.n	c344 <_free_r+0x120>
    c26e:	eb0c 0403 	add.w	r4, ip, r3
    c272:	f8d4 e004 	ldr.w	lr, [r4, #4]
    c276:	68ec      	ldr	r4, [r5, #12]
    c278:	60d4      	str	r4, [r2, #12]
    c27a:	f01e 0f01 	tst.w	lr, #1
    c27e:	60a2      	str	r2, [r4, #8]
    c280:	f000 8097 	beq.w	c3b2 <_free_r+0x18e>
    c284:	f041 0301 	orr.w	r3, r1, #1
    c288:	606b      	str	r3, [r5, #4]
    c28a:	f8cc 1000 	str.w	r1, [ip]
    c28e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c292:	d235      	bcs.n	c300 <_free_r+0xdc>
    c294:	6878      	ldr	r0, [r7, #4]
    c296:	08cb      	lsrs	r3, r1, #3
    c298:	2201      	movs	r2, #1
    c29a:	0949      	lsrs	r1, r1, #5
    c29c:	3301      	adds	r3, #1
    c29e:	408a      	lsls	r2, r1
    c2a0:	4302      	orrs	r2, r0
    c2a2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    c2a6:	607a      	str	r2, [r7, #4]
    c2a8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    c2ac:	3a08      	subs	r2, #8
    c2ae:	e9c5 1202 	strd	r1, r2, [r5, #8]
    c2b2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    c2b6:	60cd      	str	r5, [r1, #12]
    c2b8:	4630      	mov	r0, r6
    c2ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c2be:	f7fd be93 	b.w	9fe8 <__malloc_unlock>
    c2c2:	eb0c 0203 	add.w	r2, ip, r3
    c2c6:	6852      	ldr	r2, [r2, #4]
    c2c8:	07d0      	lsls	r0, r2, #31
    c2ca:	d410      	bmi.n	c2ee <_free_r+0xca>
    c2cc:	4419      	add	r1, r3
    c2ce:	f107 0008 	add.w	r0, r7, #8
    c2d2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c2d6:	4283      	cmp	r3, r0
    c2d8:	d073      	beq.n	c3c2 <_free_r+0x19e>
    c2da:	f8dc 200c 	ldr.w	r2, [ip, #12]
    c2de:	60da      	str	r2, [r3, #12]
    c2e0:	6093      	str	r3, [r2, #8]
    c2e2:	f041 0301 	orr.w	r3, r1, #1
    c2e6:	606b      	str	r3, [r5, #4]
    c2e8:	5069      	str	r1, [r5, r1]
    c2ea:	e7d0      	b.n	c28e <_free_r+0x6a>
    c2ec:	4770      	bx	lr
    c2ee:	f041 0301 	orr.w	r3, r1, #1
    c2f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c2f6:	f844 3c04 	str.w	r3, [r4, #-4]
    c2fa:	f8cc 1000 	str.w	r1, [ip]
    c2fe:	d3c9      	bcc.n	c294 <_free_r+0x70>
    c300:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    c304:	ea4f 2351 	mov.w	r3, r1, lsr #9
    c308:	d248      	bcs.n	c39c <_free_r+0x178>
    c30a:	098b      	lsrs	r3, r1, #6
    c30c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c310:	f103 0238 	add.w	r2, r3, #56	; 0x38
    c314:	00c3      	lsls	r3, r0, #3
    c316:	18f8      	adds	r0, r7, r3
    c318:	58fb      	ldr	r3, [r7, r3]
    c31a:	3808      	subs	r0, #8
    c31c:	4298      	cmp	r0, r3
    c31e:	d059      	beq.n	c3d4 <_free_r+0x1b0>
    c320:	685a      	ldr	r2, [r3, #4]
    c322:	f022 0203 	bic.w	r2, r2, #3
    c326:	428a      	cmp	r2, r1
    c328:	d902      	bls.n	c330 <_free_r+0x10c>
    c32a:	689b      	ldr	r3, [r3, #8]
    c32c:	4298      	cmp	r0, r3
    c32e:	d1f7      	bne.n	c320 <_free_r+0xfc>
    c330:	68d8      	ldr	r0, [r3, #12]
    c332:	e9c5 3002 	strd	r3, r0, [r5, #8]
    c336:	6085      	str	r5, [r0, #8]
    c338:	60dd      	str	r5, [r3, #12]
    c33a:	4630      	mov	r0, r6
    c33c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c340:	f7fd be52 	b.w	9fe8 <__malloc_unlock>
    c344:	eb0c 0203 	add.w	r2, ip, r3
    c348:	6852      	ldr	r2, [r2, #4]
    c34a:	07d2      	lsls	r2, r2, #31
    c34c:	d463      	bmi.n	c416 <_free_r+0x1f2>
    c34e:	440b      	add	r3, r1
    c350:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    c354:	60ca      	str	r2, [r1, #12]
    c356:	6091      	str	r1, [r2, #8]
    c358:	f043 0201 	orr.w	r2, r3, #1
    c35c:	606a      	str	r2, [r5, #4]
    c35e:	4630      	mov	r0, r6
    c360:	50eb      	str	r3, [r5, r3]
    c362:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c366:	f7fd be3f 	b.w	9fe8 <__malloc_unlock>
    c36a:	440b      	add	r3, r1
    c36c:	07d1      	lsls	r1, r2, #31
    c36e:	d407      	bmi.n	c380 <_free_r+0x15c>
    c370:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c374:	1aad      	subs	r5, r5, r2
    c376:	4413      	add	r3, r2
    c378:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    c37c:	60ca      	str	r2, [r1, #12]
    c37e:	6091      	str	r1, [r2, #8]
    c380:	f043 0201 	orr.w	r2, r3, #1
    c384:	606a      	str	r2, [r5, #4]
    c386:	4a28      	ldr	r2, [pc, #160]	; (c428 <_free_r+0x204>)
    c388:	60bd      	str	r5, [r7, #8]
    c38a:	6812      	ldr	r2, [r2, #0]
    c38c:	429a      	cmp	r2, r3
    c38e:	d893      	bhi.n	c2b8 <_free_r+0x94>
    c390:	4b26      	ldr	r3, [pc, #152]	; (c42c <_free_r+0x208>)
    c392:	4630      	mov	r0, r6
    c394:	6819      	ldr	r1, [r3, #0]
    c396:	f7ff fef5 	bl	c184 <_malloc_trim_r>
    c39a:	e78d      	b.n	c2b8 <_free_r+0x94>
    c39c:	2b14      	cmp	r3, #20
    c39e:	d90a      	bls.n	c3b6 <_free_r+0x192>
    c3a0:	2b54      	cmp	r3, #84	; 0x54
    c3a2:	d81f      	bhi.n	c3e4 <_free_r+0x1c0>
    c3a4:	0b0b      	lsrs	r3, r1, #12
    c3a6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c3aa:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    c3ae:	00c3      	lsls	r3, r0, #3
    c3b0:	e7b1      	b.n	c316 <_free_r+0xf2>
    c3b2:	4419      	add	r1, r3
    c3b4:	e78d      	b.n	c2d2 <_free_r+0xae>
    c3b6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c3ba:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    c3be:	00c3      	lsls	r3, r0, #3
    c3c0:	e7a9      	b.n	c316 <_free_r+0xf2>
    c3c2:	f041 0301 	orr.w	r3, r1, #1
    c3c6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    c3ca:	e9c5 0002 	strd	r0, r0, [r5, #8]
    c3ce:	606b      	str	r3, [r5, #4]
    c3d0:	5069      	str	r1, [r5, r1]
    c3d2:	e771      	b.n	c2b8 <_free_r+0x94>
    c3d4:	6879      	ldr	r1, [r7, #4]
    c3d6:	1092      	asrs	r2, r2, #2
    c3d8:	2401      	movs	r4, #1
    c3da:	fa04 f202 	lsl.w	r2, r4, r2
    c3de:	430a      	orrs	r2, r1
    c3e0:	607a      	str	r2, [r7, #4]
    c3e2:	e7a6      	b.n	c332 <_free_r+0x10e>
    c3e4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c3e8:	d806      	bhi.n	c3f8 <_free_r+0x1d4>
    c3ea:	0bcb      	lsrs	r3, r1, #15
    c3ec:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c3f0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    c3f4:	00c3      	lsls	r3, r0, #3
    c3f6:	e78e      	b.n	c316 <_free_r+0xf2>
    c3f8:	f240 5254 	movw	r2, #1364	; 0x554
    c3fc:	4293      	cmp	r3, r2
    c3fe:	d806      	bhi.n	c40e <_free_r+0x1ea>
    c400:	0c8b      	lsrs	r3, r1, #18
    c402:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c406:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    c40a:	00c3      	lsls	r3, r0, #3
    c40c:	e783      	b.n	c316 <_free_r+0xf2>
    c40e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c412:	227e      	movs	r2, #126	; 0x7e
    c414:	e77f      	b.n	c316 <_free_r+0xf2>
    c416:	f041 0301 	orr.w	r3, r1, #1
    c41a:	606b      	str	r3, [r5, #4]
    c41c:	f8cc 1000 	str.w	r1, [ip]
    c420:	e74a      	b.n	c2b8 <_free_r+0x94>
    c422:	bf00      	nop
    c424:	20008734 	.word	0x20008734
    c428:	20008b40 	.word	0x20008b40
    c42c:	2001e2e0 	.word	0x2001e2e0

0000c430 <rshift>:
    c430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c434:	6904      	ldr	r4, [r0, #16]
    c436:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    c43a:	dd2f      	ble.n	c49c <rshift+0x6c>
    c43c:	f100 0e14 	add.w	lr, r0, #20
    c440:	114e      	asrs	r6, r1, #5
    c442:	f011 0c1f 	ands.w	ip, r1, #31
    c446:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    c44a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    c44e:	d02b      	beq.n	c4a8 <rshift+0x78>
    c450:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    c454:	3304      	adds	r3, #4
    c456:	429d      	cmp	r5, r3
    c458:	fa21 f10c 	lsr.w	r1, r1, ip
    c45c:	f1cc 0820 	rsb	r8, ip, #32
    c460:	d918      	bls.n	c494 <rshift+0x64>
    c462:	4677      	mov	r7, lr
    c464:	681a      	ldr	r2, [r3, #0]
    c466:	fa02 f208 	lsl.w	r2, r2, r8
    c46a:	430a      	orrs	r2, r1
    c46c:	f847 2b04 	str.w	r2, [r7], #4
    c470:	f853 1b04 	ldr.w	r1, [r3], #4
    c474:	429d      	cmp	r5, r3
    c476:	fa21 f10c 	lsr.w	r1, r1, ip
    c47a:	d8f3      	bhi.n	c464 <rshift+0x34>
    c47c:	1ba3      	subs	r3, r4, r6
    c47e:	009b      	lsls	r3, r3, #2
    c480:	3b05      	subs	r3, #5
    c482:	089b      	lsrs	r3, r3, #2
    c484:	3301      	adds	r3, #1
    c486:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    c48a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    c48e:	b1c9      	cbz	r1, c4c4 <rshift+0x94>
    c490:	3404      	adds	r4, #4
    c492:	e017      	b.n	c4c4 <rshift+0x94>
    c494:	6141      	str	r1, [r0, #20]
    c496:	4674      	mov	r4, lr
    c498:	2900      	cmp	r1, #0
    c49a:	d1f9      	bne.n	c490 <rshift+0x60>
    c49c:	2300      	movs	r3, #0
    c49e:	6103      	str	r3, [r0, #16]
    c4a0:	2300      	movs	r3, #0
    c4a2:	6143      	str	r3, [r0, #20]
    c4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4a8:	429d      	cmp	r5, r3
    c4aa:	bf88      	it	hi
    c4ac:	f100 0210 	addhi.w	r2, r0, #16
    c4b0:	d9f4      	bls.n	c49c <rshift+0x6c>
    c4b2:	f853 1b04 	ldr.w	r1, [r3], #4
    c4b6:	f842 1f04 	str.w	r1, [r2, #4]!
    c4ba:	429d      	cmp	r5, r3
    c4bc:	d8f9      	bhi.n	c4b2 <rshift+0x82>
    c4be:	1ba4      	subs	r4, r4, r6
    c4c0:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    c4c4:	eba4 030e 	sub.w	r3, r4, lr
    c4c8:	109b      	asrs	r3, r3, #2
    c4ca:	4574      	cmp	r4, lr
    c4cc:	6103      	str	r3, [r0, #16]
    c4ce:	d0e7      	beq.n	c4a0 <rshift+0x70>
    c4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c4d4 <__gethex>:
    c4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4d8:	ed2d 8b02 	vpush	{d8}
    c4dc:	680c      	ldr	r4, [r1, #0]
    c4de:	468b      	mov	fp, r1
    c4e0:	78a1      	ldrb	r1, [r4, #2]
    c4e2:	b085      	sub	sp, #20
    c4e4:	2930      	cmp	r1, #48	; 0x30
    c4e6:	ee08 0a10 	vmov	s16, r0
    c4ea:	4692      	mov	sl, r2
    c4ec:	9302      	str	r3, [sp, #8]
    c4ee:	f040 81ce 	bne.w	c88e <__gethex+0x3ba>
    c4f2:	f06f 0001 	mvn.w	r0, #1
    c4f6:	1b00      	subs	r0, r0, r4
    c4f8:	1ce2      	adds	r2, r4, #3
    c4fa:	1883      	adds	r3, r0, r2
    c4fc:	4614      	mov	r4, r2
    c4fe:	f812 1b01 	ldrb.w	r1, [r2], #1
    c502:	2930      	cmp	r1, #48	; 0x30
    c504:	d0f9      	beq.n	c4fa <__gethex+0x26>
    c506:	f8df 8300 	ldr.w	r8, [pc, #768]	; c808 <__gethex+0x334>
    c50a:	f818 2001 	ldrb.w	r2, [r8, r1]
    c50e:	2a00      	cmp	r2, #0
    c510:	f000 80e5 	beq.w	c6de <__gethex+0x20a>
    c514:	7822      	ldrb	r2, [r4, #0]
    c516:	2700      	movs	r7, #0
    c518:	f818 2002 	ldrb.w	r2, [r8, r2]
    c51c:	463d      	mov	r5, r7
    c51e:	4626      	mov	r6, r4
    c520:	b12a      	cbz	r2, c52e <__gethex+0x5a>
    c522:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c526:	f818 2002 	ldrb.w	r2, [r8, r2]
    c52a:	2a00      	cmp	r2, #0
    c52c:	d1f9      	bne.n	c522 <__gethex+0x4e>
    c52e:	49b5      	ldr	r1, [pc, #724]	; (c804 <__gethex+0x330>)
    c530:	9301      	str	r3, [sp, #4]
    c532:	2201      	movs	r2, #1
    c534:	4630      	mov	r0, r6
    c536:	f7ff fa1b 	bl	b970 <strncmp>
    c53a:	9b01      	ldr	r3, [sp, #4]
    c53c:	4681      	mov	r9, r0
    c53e:	2800      	cmp	r0, #0
    c540:	d04d      	beq.n	c5de <__gethex+0x10a>
    c542:	2d00      	cmp	r5, #0
    c544:	d14e      	bne.n	c5e4 <__gethex+0x110>
    c546:	7832      	ldrb	r2, [r6, #0]
    c548:	46a9      	mov	r9, r5
    c54a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c54e:	2a50      	cmp	r2, #80	; 0x50
    c550:	4635      	mov	r5, r6
    c552:	d050      	beq.n	c5f6 <__gethex+0x122>
    c554:	f8cb 6000 	str.w	r6, [fp]
    c558:	2f00      	cmp	r7, #0
    c55a:	d169      	bne.n	c630 <__gethex+0x15c>
    c55c:	1b2b      	subs	r3, r5, r4
    c55e:	3b01      	subs	r3, #1
    c560:	2b07      	cmp	r3, #7
    c562:	4639      	mov	r1, r7
    c564:	dd04      	ble.n	c570 <__gethex+0x9c>
    c566:	105b      	asrs	r3, r3, #1
    c568:	2b07      	cmp	r3, #7
    c56a:	f101 0101 	add.w	r1, r1, #1
    c56e:	dcfa      	bgt.n	c566 <__gethex+0x92>
    c570:	ee18 0a10 	vmov	r0, s16
    c574:	f000 fb82 	bl	cc7c <_Balloc>
    c578:	4683      	mov	fp, r0
    c57a:	2800      	cmp	r0, #0
    c57c:	f000 8266 	beq.w	ca4c <__gethex+0x578>
    c580:	f100 0614 	add.w	r6, r0, #20
    c584:	42ac      	cmp	r4, r5
    c586:	9601      	str	r6, [sp, #4]
    c588:	f080 81d2 	bcs.w	c930 <__gethex+0x45c>
    c58c:	2700      	movs	r7, #0
    c58e:	f8cd 900c 	str.w	r9, [sp, #12]
    c592:	499c      	ldr	r1, [pc, #624]	; (c804 <__gethex+0x330>)
    c594:	46a1      	mov	r9, r4
    c596:	463c      	mov	r4, r7
    c598:	e00c      	b.n	c5b4 <__gethex+0xe0>
    c59a:	2f20      	cmp	r7, #32
    c59c:	d019      	beq.n	c5d2 <__gethex+0xfe>
    c59e:	4638      	mov	r0, r7
    c5a0:	3704      	adds	r7, #4
    c5a2:	782a      	ldrb	r2, [r5, #0]
    c5a4:	f818 2002 	ldrb.w	r2, [r8, r2]
    c5a8:	f002 020f 	and.w	r2, r2, #15
    c5ac:	4082      	lsls	r2, r0
    c5ae:	4314      	orrs	r4, r2
    c5b0:	454d      	cmp	r5, r9
    c5b2:	d047      	beq.n	c644 <__gethex+0x170>
    c5b4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    c5b8:	2a2e      	cmp	r2, #46	; 0x2e
    c5ba:	d1ee      	bne.n	c59a <__gethex+0xc6>
    c5bc:	454d      	cmp	r5, r9
    c5be:	d3ec      	bcc.n	c59a <__gethex+0xc6>
    c5c0:	2201      	movs	r2, #1
    c5c2:	4628      	mov	r0, r5
    c5c4:	f7ff f9d4 	bl	b970 <strncmp>
    c5c8:	498e      	ldr	r1, [pc, #568]	; (c804 <__gethex+0x330>)
    c5ca:	2800      	cmp	r0, #0
    c5cc:	d0f0      	beq.n	c5b0 <__gethex+0xdc>
    c5ce:	2f20      	cmp	r7, #32
    c5d0:	d1e5      	bne.n	c59e <__gethex+0xca>
    c5d2:	2000      	movs	r0, #0
    c5d4:	f846 4b04 	str.w	r4, [r6], #4
    c5d8:	2704      	movs	r7, #4
    c5da:	4604      	mov	r4, r0
    c5dc:	e7e1      	b.n	c5a2 <__gethex+0xce>
    c5de:	2d00      	cmp	r5, #0
    c5e0:	f000 8142 	beq.w	c868 <__gethex+0x394>
    c5e4:	7832      	ldrb	r2, [r6, #0]
    c5e6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c5ea:	1bad      	subs	r5, r5, r6
    c5ec:	2a50      	cmp	r2, #80	; 0x50
    c5ee:	ea4f 0985 	mov.w	r9, r5, lsl #2
    c5f2:	4635      	mov	r5, r6
    c5f4:	d1ae      	bne.n	c554 <__gethex+0x80>
    c5f6:	786a      	ldrb	r2, [r5, #1]
    c5f8:	2a2b      	cmp	r2, #43	; 0x2b
    c5fa:	f000 8125 	beq.w	c848 <__gethex+0x374>
    c5fe:	2a2d      	cmp	r2, #45	; 0x2d
    c600:	f000 80a5 	beq.w	c74e <__gethex+0x27a>
    c604:	1c6e      	adds	r6, r5, #1
    c606:	2000      	movs	r0, #0
    c608:	f818 1002 	ldrb.w	r1, [r8, r2]
    c60c:	1e4a      	subs	r2, r1, #1
    c60e:	2a18      	cmp	r2, #24
    c610:	f200 809b 	bhi.w	c74a <__gethex+0x276>
    c614:	7872      	ldrb	r2, [r6, #1]
    c616:	f818 2002 	ldrb.w	r2, [r8, r2]
    c61a:	3910      	subs	r1, #16
    c61c:	3601      	adds	r6, #1
    c61e:	2a00      	cmp	r2, #0
    c620:	d15a      	bne.n	c6d8 <__gethex+0x204>
    c622:	b100      	cbz	r0, c626 <__gethex+0x152>
    c624:	4249      	negs	r1, r1
    c626:	4489      	add	r9, r1
    c628:	f8cb 6000 	str.w	r6, [fp]
    c62c:	2f00      	cmp	r7, #0
    c62e:	d095      	beq.n	c55c <__gethex+0x88>
    c630:	2b00      	cmp	r3, #0
    c632:	bf14      	ite	ne
    c634:	2500      	movne	r5, #0
    c636:	2506      	moveq	r5, #6
    c638:	4628      	mov	r0, r5
    c63a:	b005      	add	sp, #20
    c63c:	ecbd 8b02 	vpop	{d8}
    c640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c644:	f8dd 900c 	ldr.w	r9, [sp, #12]
    c648:	4623      	mov	r3, r4
    c64a:	f846 3b04 	str.w	r3, [r6], #4
    c64e:	4618      	mov	r0, r3
    c650:	9b01      	ldr	r3, [sp, #4]
    c652:	1af6      	subs	r6, r6, r3
    c654:	10b6      	asrs	r6, r6, #2
    c656:	f8cb 6010 	str.w	r6, [fp, #16]
    c65a:	f000 fbe9 	bl	ce30 <__hi0bits>
    c65e:	0176      	lsls	r6, r6, #5
    c660:	f8da 4000 	ldr.w	r4, [sl]
    c664:	1a30      	subs	r0, r6, r0
    c666:	42a0      	cmp	r0, r4
    c668:	dc75      	bgt.n	c756 <__gethex+0x282>
    c66a:	f2c0 80ef 	blt.w	c84c <__gethex+0x378>
    c66e:	2700      	movs	r7, #0
    c670:	f8da 3008 	ldr.w	r3, [sl, #8]
    c674:	454b      	cmp	r3, r9
    c676:	f2c0 8151 	blt.w	c91c <__gethex+0x448>
    c67a:	f8da 3004 	ldr.w	r3, [sl, #4]
    c67e:	454b      	cmp	r3, r9
    c680:	dd4a      	ble.n	c718 <__gethex+0x244>
    c682:	eba3 0909 	sub.w	r9, r3, r9
    c686:	454c      	cmp	r4, r9
    c688:	f300 8082 	bgt.w	c790 <__gethex+0x2bc>
    c68c:	f8da 200c 	ldr.w	r2, [sl, #12]
    c690:	2a02      	cmp	r2, #2
    c692:	f000 8165 	beq.w	c960 <__gethex+0x48c>
    c696:	2a03      	cmp	r2, #3
    c698:	f000 8181 	beq.w	c99e <__gethex+0x4ca>
    c69c:	2a01      	cmp	r2, #1
    c69e:	f000 816f 	beq.w	c980 <__gethex+0x4ac>
    c6a2:	ee18 0a10 	vmov	r0, s16
    c6a6:	4659      	mov	r1, fp
    c6a8:	f000 fb0e 	bl	ccc8 <_Bfree>
    c6ac:	2550      	movs	r5, #80	; 0x50
    c6ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c6b0:	2300      	movs	r3, #0
    c6b2:	4628      	mov	r0, r5
    c6b4:	6013      	str	r3, [r2, #0]
    c6b6:	b005      	add	sp, #20
    c6b8:	ecbd 8b02 	vpop	{d8}
    c6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6c0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c6c4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    c6c8:	f1a2 0110 	sub.w	r1, r2, #16
    c6cc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c6d0:	f818 2002 	ldrb.w	r2, [r8, r2]
    c6d4:	2a00      	cmp	r2, #0
    c6d6:	d0a4      	beq.n	c622 <__gethex+0x14e>
    c6d8:	2a19      	cmp	r2, #25
    c6da:	ddf1      	ble.n	c6c0 <__gethex+0x1ec>
    c6dc:	e7a1      	b.n	c622 <__gethex+0x14e>
    c6de:	4949      	ldr	r1, [pc, #292]	; (c804 <__gethex+0x330>)
    c6e0:	9301      	str	r3, [sp, #4]
    c6e2:	2201      	movs	r2, #1
    c6e4:	4620      	mov	r0, r4
    c6e6:	f7ff f943 	bl	b970 <strncmp>
    c6ea:	9b01      	ldr	r3, [sp, #4]
    c6ec:	2800      	cmp	r0, #0
    c6ee:	d16d      	bne.n	c7cc <__gethex+0x2f8>
    c6f0:	7861      	ldrb	r1, [r4, #1]
    c6f2:	f818 2001 	ldrb.w	r2, [r8, r1]
    c6f6:	1c65      	adds	r5, r4, #1
    c6f8:	2a00      	cmp	r2, #0
    c6fa:	d069      	beq.n	c7d0 <__gethex+0x2fc>
    c6fc:	2930      	cmp	r1, #48	; 0x30
    c6fe:	462c      	mov	r4, r5
    c700:	d105      	bne.n	c70e <__gethex+0x23a>
    c702:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    c706:	2b30      	cmp	r3, #48	; 0x30
    c708:	d0fb      	beq.n	c702 <__gethex+0x22e>
    c70a:	f818 2003 	ldrb.w	r2, [r8, r3]
    c70e:	fab2 f782 	clz	r7, r2
    c712:	097f      	lsrs	r7, r7, #5
    c714:	2301      	movs	r3, #1
    c716:	e702      	b.n	c51e <__gethex+0x4a>
    c718:	2501      	movs	r5, #1
    c71a:	b157      	cbz	r7, c732 <__gethex+0x25e>
    c71c:	f8da 300c 	ldr.w	r3, [sl, #12]
    c720:	2b02      	cmp	r3, #2
    c722:	d05d      	beq.n	c7e0 <__gethex+0x30c>
    c724:	2b03      	cmp	r3, #3
    c726:	d05f      	beq.n	c7e8 <__gethex+0x314>
    c728:	2b01      	cmp	r3, #1
    c72a:	f000 8084 	beq.w	c836 <__gethex+0x362>
    c72e:	f045 0510 	orr.w	r5, r5, #16
    c732:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c734:	f8c3 b000 	str.w	fp, [r3]
    c738:	9b02      	ldr	r3, [sp, #8]
    c73a:	4628      	mov	r0, r5
    c73c:	f8c3 9000 	str.w	r9, [r3]
    c740:	b005      	add	sp, #20
    c742:	ecbd 8b02 	vpop	{d8}
    c746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c74a:	462e      	mov	r6, r5
    c74c:	e702      	b.n	c554 <__gethex+0x80>
    c74e:	2001      	movs	r0, #1
    c750:	78aa      	ldrb	r2, [r5, #2]
    c752:	1cae      	adds	r6, r5, #2
    c754:	e758      	b.n	c608 <__gethex+0x134>
    c756:	1b06      	subs	r6, r0, r4
    c758:	4631      	mov	r1, r6
    c75a:	4658      	mov	r0, fp
    c75c:	f000 ff96 	bl	d68c <__any_on>
    c760:	4607      	mov	r7, r0
    c762:	b178      	cbz	r0, c784 <__gethex+0x2b0>
    c764:	1e72      	subs	r2, r6, #1
    c766:	1153      	asrs	r3, r2, #5
    c768:	9901      	ldr	r1, [sp, #4]
    c76a:	2701      	movs	r7, #1
    c76c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    c770:	f002 031f 	and.w	r3, r2, #31
    c774:	fa07 f303 	lsl.w	r3, r7, r3
    c778:	420b      	tst	r3, r1
    c77a:	d003      	beq.n	c784 <__gethex+0x2b0>
    c77c:	42ba      	cmp	r2, r7
    c77e:	f300 80e2 	bgt.w	c946 <__gethex+0x472>
    c782:	2702      	movs	r7, #2
    c784:	4631      	mov	r1, r6
    c786:	4658      	mov	r0, fp
    c788:	44b1      	add	r9, r6
    c78a:	f7ff fe51 	bl	c430 <rshift>
    c78e:	e76f      	b.n	c670 <__gethex+0x19c>
    c790:	f109 35ff 	add.w	r5, r9, #4294967295
    c794:	2f00      	cmp	r7, #0
    c796:	f040 80ce 	bne.w	c936 <__gethex+0x462>
    c79a:	2d00      	cmp	r5, #0
    c79c:	f040 80cd 	bne.w	c93a <__gethex+0x466>
    c7a0:	116b      	asrs	r3, r5, #5
    c7a2:	9a01      	ldr	r2, [sp, #4]
    c7a4:	f005 051f 	and.w	r5, r5, #31
    c7a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c7ac:	2301      	movs	r3, #1
    c7ae:	40ab      	lsls	r3, r5
    c7b0:	4213      	tst	r3, r2
    c7b2:	4649      	mov	r1, r9
    c7b4:	4658      	mov	r0, fp
    c7b6:	bf18      	it	ne
    c7b8:	f047 0702 	orrne.w	r7, r7, #2
    c7bc:	eba4 0409 	sub.w	r4, r4, r9
    c7c0:	f7ff fe36 	bl	c430 <rshift>
    c7c4:	2502      	movs	r5, #2
    c7c6:	f8da 9004 	ldr.w	r9, [sl, #4]
    c7ca:	e7a6      	b.n	c71a <__gethex+0x246>
    c7cc:	7821      	ldrb	r1, [r4, #0]
    c7ce:	4625      	mov	r5, r4
    c7d0:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    c7d4:	2950      	cmp	r1, #80	; 0x50
    c7d6:	f000 80bf 	beq.w	c958 <__gethex+0x484>
    c7da:	f8cb 5000 	str.w	r5, [fp]
    c7de:	e727      	b.n	c630 <__gethex+0x15c>
    c7e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c7e2:	f1c3 0301 	rsb	r3, r3, #1
    c7e6:	9311      	str	r3, [sp, #68]	; 0x44
    c7e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c7ea:	2b00      	cmp	r3, #0
    c7ec:	d09f      	beq.n	c72e <__gethex+0x25a>
    c7ee:	f8db 7010 	ldr.w	r7, [fp, #16]
    c7f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    c7f6:	00ba      	lsls	r2, r7, #2
    c7f8:	4643      	mov	r3, r8
    c7fa:	9201      	str	r2, [sp, #4]
    c7fc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    c800:	2100      	movs	r1, #0
    c802:	e007      	b.n	c814 <__gethex+0x340>
    c804:	20007d0c 	.word	0x20007d0c
    c808:	20000918 	.word	0x20000918
    c80c:	4298      	cmp	r0, r3
    c80e:	f843 1c04 	str.w	r1, [r3, #-4]
    c812:	d93f      	bls.n	c894 <__gethex+0x3c0>
    c814:	461e      	mov	r6, r3
    c816:	f853 2b04 	ldr.w	r2, [r3], #4
    c81a:	f1b2 3fff 	cmp.w	r2, #4294967295
    c81e:	d0f5      	beq.n	c80c <__gethex+0x338>
    c820:	3201      	adds	r2, #1
    c822:	2d02      	cmp	r5, #2
    c824:	6032      	str	r2, [r6, #0]
    c826:	f000 80bf 	beq.w	c9a8 <__gethex+0x4d4>
    c82a:	f014 041f 	ands.w	r4, r4, #31
    c82e:	f040 80e7 	bne.w	ca00 <__gethex+0x52c>
    c832:	2521      	movs	r5, #33	; 0x21
    c834:	e77d      	b.n	c732 <__gethex+0x25e>
    c836:	07ba      	lsls	r2, r7, #30
    c838:	f57f af79 	bpl.w	c72e <__gethex+0x25a>
    c83c:	9b01      	ldr	r3, [sp, #4]
    c83e:	681b      	ldr	r3, [r3, #0]
    c840:	431f      	orrs	r7, r3
    c842:	07fb      	lsls	r3, r7, #31
    c844:	d4d3      	bmi.n	c7ee <__gethex+0x31a>
    c846:	e772      	b.n	c72e <__gethex+0x25a>
    c848:	2000      	movs	r0, #0
    c84a:	e781      	b.n	c750 <__gethex+0x27c>
    c84c:	1a22      	subs	r2, r4, r0
    c84e:	4659      	mov	r1, fp
    c850:	ee18 0a10 	vmov	r0, s16
    c854:	eba9 0902 	sub.w	r9, r9, r2
    c858:	f000 fc76 	bl	d148 <__lshift>
    c85c:	f100 0314 	add.w	r3, r0, #20
    c860:	4683      	mov	fp, r0
    c862:	9301      	str	r3, [sp, #4]
    c864:	2700      	movs	r7, #0
    c866:	e703      	b.n	c670 <__gethex+0x19c>
    c868:	7872      	ldrb	r2, [r6, #1]
    c86a:	f818 0002 	ldrb.w	r0, [r8, r2]
    c86e:	1c71      	adds	r1, r6, #1
    c870:	2800      	cmp	r0, #0
    c872:	f000 80a0 	beq.w	c9b6 <__gethex+0x4e2>
    c876:	460d      	mov	r5, r1
    c878:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    c87c:	f818 0002 	ldrb.w	r0, [r8, r2]
    c880:	2800      	cmp	r0, #0
    c882:	d1f8      	bne.n	c876 <__gethex+0x3a2>
    c884:	1b75      	subs	r5, r6, r5
    c886:	ea4f 0985 	mov.w	r9, r5, lsl #2
    c88a:	460e      	mov	r6, r1
    c88c:	e65d      	b.n	c54a <__gethex+0x76>
    c88e:	3402      	adds	r4, #2
    c890:	2300      	movs	r3, #0
    c892:	e638      	b.n	c506 <__gethex+0x32>
    c894:	f8db 3008 	ldr.w	r3, [fp, #8]
    c898:	429f      	cmp	r7, r3
    c89a:	f280 808e 	bge.w	c9ba <__gethex+0x4e6>
    c89e:	463b      	mov	r3, r7
    c8a0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    c8a4:	2101      	movs	r1, #1
    c8a6:	3301      	adds	r3, #1
    c8a8:	2d02      	cmp	r5, #2
    c8aa:	f8cb 3010 	str.w	r3, [fp, #16]
    c8ae:	6151      	str	r1, [r2, #20]
    c8b0:	d07a      	beq.n	c9a8 <__gethex+0x4d4>
    c8b2:	429f      	cmp	r7, r3
    c8b4:	dab9      	bge.n	c82a <__gethex+0x356>
    c8b6:	2b00      	cmp	r3, #0
    c8b8:	f340 809b 	ble.w	c9f2 <__gethex+0x51e>
    c8bc:	f8db 2014 	ldr.w	r2, [fp, #20]
    c8c0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    c8c4:	f10b 0018 	add.w	r0, fp, #24
    c8c8:	4283      	cmp	r3, r0
    c8ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
    c8ce:	f240 80b1 	bls.w	ca34 <__gethex+0x560>
    c8d2:	4644      	mov	r4, r8
    c8d4:	6801      	ldr	r1, [r0, #0]
    c8d6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c8da:	f844 2b04 	str.w	r2, [r4], #4
    c8de:	f850 2b04 	ldr.w	r2, [r0], #4
    c8e2:	4283      	cmp	r3, r0
    c8e4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    c8e8:	d8f4      	bhi.n	c8d4 <__gethex+0x400>
    c8ea:	eba3 030b 	sub.w	r3, r3, fp
    c8ee:	3b19      	subs	r3, #25
    c8f0:	089b      	lsrs	r3, r3, #2
    c8f2:	3301      	adds	r3, #1
    c8f4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    c8f8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    c8fc:	2a00      	cmp	r2, #0
    c8fe:	f040 809d 	bne.w	ca3c <__gethex+0x568>
    c902:	eba3 0208 	sub.w	r2, r3, r8
    c906:	1092      	asrs	r2, r2, #2
    c908:	4543      	cmp	r3, r8
    c90a:	f8cb 2010 	str.w	r2, [fp, #16]
    c90e:	d073      	beq.n	c9f8 <__gethex+0x524>
    c910:	f8da 3008 	ldr.w	r3, [sl, #8]
    c914:	f109 0901 	add.w	r9, r9, #1
    c918:	454b      	cmp	r3, r9
    c91a:	da8a      	bge.n	c832 <__gethex+0x35e>
    c91c:	ee18 0a10 	vmov	r0, s16
    c920:	4659      	mov	r1, fp
    c922:	f000 f9d1 	bl	ccc8 <_Bfree>
    c926:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c928:	2300      	movs	r3, #0
    c92a:	6013      	str	r3, [r2, #0]
    c92c:	25a3      	movs	r5, #163	; 0xa3
    c92e:	e683      	b.n	c638 <__gethex+0x164>
    c930:	9e01      	ldr	r6, [sp, #4]
    c932:	2300      	movs	r3, #0
    c934:	e689      	b.n	c64a <__gethex+0x176>
    c936:	2701      	movs	r7, #1
    c938:	e732      	b.n	c7a0 <__gethex+0x2cc>
    c93a:	4629      	mov	r1, r5
    c93c:	4658      	mov	r0, fp
    c93e:	f000 fea5 	bl	d68c <__any_on>
    c942:	4607      	mov	r7, r0
    c944:	e72c      	b.n	c7a0 <__gethex+0x2cc>
    c946:	1eb1      	subs	r1, r6, #2
    c948:	4658      	mov	r0, fp
    c94a:	f000 fe9f 	bl	d68c <__any_on>
    c94e:	2800      	cmp	r0, #0
    c950:	f43f af17 	beq.w	c782 <__gethex+0x2ae>
    c954:	2703      	movs	r7, #3
    c956:	e715      	b.n	c784 <__gethex+0x2b0>
    c958:	f04f 0900 	mov.w	r9, #0
    c95c:	2701      	movs	r7, #1
    c95e:	e64a      	b.n	c5f6 <__gethex+0x122>
    c960:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c962:	2a00      	cmp	r2, #0
    c964:	f47f ae9d 	bne.w	c6a2 <__gethex+0x1ce>
    c968:	9902      	ldr	r1, [sp, #8]
    c96a:	600b      	str	r3, [r1, #0]
    c96c:	9b01      	ldr	r3, [sp, #4]
    c96e:	2201      	movs	r2, #1
    c970:	f8cb 2010 	str.w	r2, [fp, #16]
    c974:	601a      	str	r2, [r3, #0]
    c976:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c978:	2562      	movs	r5, #98	; 0x62
    c97a:	f8c3 b000 	str.w	fp, [r3]
    c97e:	e65b      	b.n	c638 <__gethex+0x164>
    c980:	454c      	cmp	r4, r9
    c982:	f47f ae8e 	bne.w	c6a2 <__gethex+0x1ce>
    c986:	2c01      	cmp	r4, #1
    c988:	d0ee      	beq.n	c968 <__gethex+0x494>
    c98a:	1e61      	subs	r1, r4, #1
    c98c:	4658      	mov	r0, fp
    c98e:	f000 fe7d 	bl	d68c <__any_on>
    c992:	2800      	cmp	r0, #0
    c994:	f43f ae85 	beq.w	c6a2 <__gethex+0x1ce>
    c998:	f8da 3004 	ldr.w	r3, [sl, #4]
    c99c:	e7e4      	b.n	c968 <__gethex+0x494>
    c99e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c9a0:	2a00      	cmp	r2, #0
    c9a2:	f43f ae7e 	beq.w	c6a2 <__gethex+0x1ce>
    c9a6:	e7df      	b.n	c968 <__gethex+0x494>
    c9a8:	f8da 3000 	ldr.w	r3, [sl]
    c9ac:	3b01      	subs	r3, #1
    c9ae:	42a3      	cmp	r3, r4
    c9b0:	d034      	beq.n	ca1c <__gethex+0x548>
    c9b2:	2522      	movs	r5, #34	; 0x22
    c9b4:	e6bd      	b.n	c732 <__gethex+0x25e>
    c9b6:	460e      	mov	r6, r1
    c9b8:	e5c7      	b.n	c54a <__gethex+0x76>
    c9ba:	f8db 1004 	ldr.w	r1, [fp, #4]
    c9be:	ee18 0a10 	vmov	r0, s16
    c9c2:	3101      	adds	r1, #1
    c9c4:	f000 f95a 	bl	cc7c <_Balloc>
    c9c8:	4606      	mov	r6, r0
    c9ca:	b3c8      	cbz	r0, ca40 <__gethex+0x56c>
    c9cc:	f8db 3010 	ldr.w	r3, [fp, #16]
    c9d0:	3302      	adds	r3, #2
    c9d2:	009a      	lsls	r2, r3, #2
    c9d4:	f10b 010c 	add.w	r1, fp, #12
    c9d8:	300c      	adds	r0, #12
    c9da:	f7fb faab 	bl	7f34 <memcpy>
    c9de:	4659      	mov	r1, fp
    c9e0:	ee18 0a10 	vmov	r0, s16
    c9e4:	f000 f970 	bl	ccc8 <_Bfree>
    c9e8:	f106 0814 	add.w	r8, r6, #20
    c9ec:	6933      	ldr	r3, [r6, #16]
    c9ee:	46b3      	mov	fp, r6
    c9f0:	e756      	b.n	c8a0 <__gethex+0x3cc>
    c9f2:	2300      	movs	r3, #0
    c9f4:	f8cb 3010 	str.w	r3, [fp, #16]
    c9f8:	2300      	movs	r3, #0
    c9fa:	f8cb 3014 	str.w	r3, [fp, #20]
    c9fe:	e787      	b.n	c910 <__gethex+0x43c>
    ca00:	9b01      	ldr	r3, [sp, #4]
    ca02:	4443      	add	r3, r8
    ca04:	f1c4 0420 	rsb	r4, r4, #32
    ca08:	f853 0c04 	ldr.w	r0, [r3, #-4]
    ca0c:	f000 fa10 	bl	ce30 <__hi0bits>
    ca10:	42a0      	cmp	r0, r4
    ca12:	f6bf af0e 	bge.w	c832 <__gethex+0x35e>
    ca16:	f8db 3010 	ldr.w	r3, [fp, #16]
    ca1a:	e74c      	b.n	c8b6 <__gethex+0x3e2>
    ca1c:	1163      	asrs	r3, r4, #5
    ca1e:	f004 041f 	and.w	r4, r4, #31
    ca22:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    ca26:	2301      	movs	r3, #1
    ca28:	40a3      	lsls	r3, r4
    ca2a:	4213      	tst	r3, r2
    ca2c:	bf0c      	ite	eq
    ca2e:	2522      	moveq	r5, #34	; 0x22
    ca30:	2521      	movne	r5, #33	; 0x21
    ca32:	e67e      	b.n	c732 <__gethex+0x25e>
    ca34:	f8c8 2000 	str.w	r2, [r8]
    ca38:	4643      	mov	r3, r8
    ca3a:	b16a      	cbz	r2, ca58 <__gethex+0x584>
    ca3c:	3304      	adds	r3, #4
    ca3e:	e760      	b.n	c902 <__gethex+0x42e>
    ca40:	4b07      	ldr	r3, [pc, #28]	; (ca60 <__gethex+0x58c>)
    ca42:	4808      	ldr	r0, [pc, #32]	; (ca64 <__gethex+0x590>)
    ca44:	4632      	mov	r2, r6
    ca46:	2184      	movs	r1, #132	; 0x84
    ca48:	f004 fa0a 	bl	10e60 <__assert_func>
    ca4c:	4b04      	ldr	r3, [pc, #16]	; (ca60 <__gethex+0x58c>)
    ca4e:	4805      	ldr	r0, [pc, #20]	; (ca64 <__gethex+0x590>)
    ca50:	465a      	mov	r2, fp
    ca52:	21e4      	movs	r1, #228	; 0xe4
    ca54:	f004 fa04 	bl	10e60 <__assert_func>
    ca58:	f8cb 2010 	str.w	r2, [fp, #16]
    ca5c:	e7cc      	b.n	c9f8 <__gethex+0x524>
    ca5e:	bf00      	nop
    ca60:	200008a0 	.word	0x200008a0
    ca64:	200008b4 	.word	0x200008b4

0000ca68 <__match>:
    ca68:	b410      	push	{r4}
    ca6a:	6804      	ldr	r4, [r0, #0]
    ca6c:	e009      	b.n	ca82 <__match+0x1a>
    ca6e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    ca72:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    ca76:	f1bc 0f19 	cmp.w	ip, #25
    ca7a:	bf98      	it	ls
    ca7c:	3320      	addls	r3, #32
    ca7e:	4293      	cmp	r3, r2
    ca80:	d109      	bne.n	ca96 <__match+0x2e>
    ca82:	f811 2b01 	ldrb.w	r2, [r1], #1
    ca86:	2a00      	cmp	r2, #0
    ca88:	d1f1      	bne.n	ca6e <__match+0x6>
    ca8a:	3401      	adds	r4, #1
    ca8c:	6004      	str	r4, [r0, #0]
    ca8e:	2001      	movs	r0, #1
    ca90:	f85d 4b04 	ldr.w	r4, [sp], #4
    ca94:	4770      	bx	lr
    ca96:	2000      	movs	r0, #0
    ca98:	f85d 4b04 	ldr.w	r4, [sp], #4
    ca9c:	4770      	bx	lr
    ca9e:	bf00      	nop

0000caa0 <__hexnan>:
    caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caa4:	6809      	ldr	r1, [r1, #0]
    caa6:	b085      	sub	sp, #20
    caa8:	114b      	asrs	r3, r1, #5
    caaa:	f011 011f 	ands.w	r1, r1, #31
    caae:	9002      	str	r0, [sp, #8]
    cab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cab4:	9103      	str	r1, [sp, #12]
    cab6:	f040 808f 	bne.w	cbd8 <__hexnan+0x138>
    caba:	1f1d      	subs	r5, r3, #4
    cabc:	9301      	str	r3, [sp, #4]
    cabe:	9b02      	ldr	r3, [sp, #8]
    cac0:	9901      	ldr	r1, [sp, #4]
    cac2:	681c      	ldr	r4, [r3, #0]
    cac4:	2300      	movs	r3, #0
    cac6:	f841 3c04 	str.w	r3, [r1, #-4]
    caca:	7861      	ldrb	r1, [r4, #1]
    cacc:	3401      	adds	r4, #1
    cace:	2900      	cmp	r1, #0
    cad0:	f000 8098 	beq.w	cc04 <__hexnan+0x164>
    cad4:	f8df 9174 	ldr.w	r9, [pc, #372]	; cc4c <__hexnan+0x1ac>
    cad8:	46a8      	mov	r8, r5
    cada:	46ac      	mov	ip, r5
    cadc:	469a      	mov	sl, r3
    cade:	461e      	mov	r6, r3
    cae0:	e00e      	b.n	cb00 <__hexnan+0x60>
    cae2:	2920      	cmp	r1, #32
    cae4:	f200 808c 	bhi.w	cc00 <__hexnan+0x160>
    cae8:	4556      	cmp	r6, sl
    caea:	dd06      	ble.n	cafa <__hexnan+0x5a>
    caec:	45c4      	cmp	ip, r8
    caee:	d201      	bcs.n	caf4 <__hexnan+0x54>
    caf0:	2b07      	cmp	r3, #7
    caf2:	dd5b      	ble.n	cbac <__hexnan+0x10c>
    caf4:	4562      	cmp	r2, ip
    caf6:	d351      	bcc.n	cb9c <__hexnan+0xfc>
    caf8:	2308      	movs	r3, #8
    cafa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    cafe:	b1a1      	cbz	r1, cb2a <__hexnan+0x8a>
    cb00:	f819 0001 	ldrb.w	r0, [r9, r1]
    cb04:	2800      	cmp	r0, #0
    cb06:	d0ec      	beq.n	cae2 <__hexnan+0x42>
    cb08:	3301      	adds	r3, #1
    cb0a:	2b08      	cmp	r3, #8
    cb0c:	f106 0601 	add.w	r6, r6, #1
    cb10:	dc3a      	bgt.n	cb88 <__hexnan+0xe8>
    cb12:	f8dc 1000 	ldr.w	r1, [ip]
    cb16:	0109      	lsls	r1, r1, #4
    cb18:	f000 000f 	and.w	r0, r0, #15
    cb1c:	4308      	orrs	r0, r1
    cb1e:	f8cc 0000 	str.w	r0, [ip]
    cb22:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    cb26:	2900      	cmp	r1, #0
    cb28:	d1ea      	bne.n	cb00 <__hexnan+0x60>
    cb2a:	2e00      	cmp	r6, #0
    cb2c:	d06a      	beq.n	cc04 <__hexnan+0x164>
    cb2e:	45c4      	cmp	ip, r8
    cb30:	d201      	bcs.n	cb36 <__hexnan+0x96>
    cb32:	2b07      	cmp	r3, #7
    cb34:	dd74      	ble.n	cc20 <__hexnan+0x180>
    cb36:	4562      	cmp	r2, ip
    cb38:	d252      	bcs.n	cbe0 <__hexnan+0x140>
    cb3a:	1f11      	subs	r1, r2, #4
    cb3c:	4663      	mov	r3, ip
    cb3e:	f853 0b04 	ldr.w	r0, [r3], #4
    cb42:	f841 0f04 	str.w	r0, [r1, #4]!
    cb46:	42ab      	cmp	r3, r5
    cb48:	d9f9      	bls.n	cb3e <__hexnan+0x9e>
    cb4a:	eba5 030c 	sub.w	r3, r5, ip
    cb4e:	f023 0303 	bic.w	r3, r3, #3
    cb52:	1c69      	adds	r1, r5, #1
    cb54:	3304      	adds	r3, #4
    cb56:	f10c 0c01 	add.w	ip, ip, #1
    cb5a:	4561      	cmp	r1, ip
    cb5c:	bf38      	it	cc
    cb5e:	2304      	movcc	r3, #4
    cb60:	4413      	add	r3, r2
    cb62:	2100      	movs	r1, #0
    cb64:	f843 1b04 	str.w	r1, [r3], #4
    cb68:	42ab      	cmp	r3, r5
    cb6a:	d9fb      	bls.n	cb64 <__hexnan+0xc4>
    cb6c:	9b01      	ldr	r3, [sp, #4]
    cb6e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    cb72:	b92b      	cbnz	r3, cb80 <__hexnan+0xe0>
    cb74:	42aa      	cmp	r2, r5
    cb76:	d049      	beq.n	cc0c <__hexnan+0x16c>
    cb78:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    cb7c:	2b00      	cmp	r3, #0
    cb7e:	d0f9      	beq.n	cb74 <__hexnan+0xd4>
    cb80:	2005      	movs	r0, #5
    cb82:	b005      	add	sp, #20
    cb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb88:	4562      	cmp	r2, ip
    cb8a:	d2b6      	bcs.n	cafa <__hexnan+0x5a>
    cb8c:	2300      	movs	r3, #0
    cb8e:	f84c 3c04 	str.w	r3, [ip, #-4]
    cb92:	4619      	mov	r1, r3
    cb94:	f1ac 0c04 	sub.w	ip, ip, #4
    cb98:	2301      	movs	r3, #1
    cb9a:	e7bd      	b.n	cb18 <__hexnan+0x78>
    cb9c:	2300      	movs	r3, #0
    cb9e:	f1ac 0804 	sub.w	r8, ip, #4
    cba2:	f84c 3c04 	str.w	r3, [ip, #-4]
    cba6:	46b2      	mov	sl, r6
    cba8:	46c4      	mov	ip, r8
    cbaa:	e7a6      	b.n	cafa <__hexnan+0x5a>
    cbac:	f1c3 0108 	rsb	r1, r3, #8
    cbb0:	f8dc 3000 	ldr.w	r3, [ip]
    cbb4:	0089      	lsls	r1, r1, #2
    cbb6:	f1c1 0e20 	rsb	lr, r1, #32
    cbba:	4660      	mov	r0, ip
    cbbc:	469b      	mov	fp, r3
    cbbe:	6847      	ldr	r7, [r0, #4]
    cbc0:	fa07 f30e 	lsl.w	r3, r7, lr
    cbc4:	ea43 030b 	orr.w	r3, r3, fp
    cbc8:	fa27 fb01 	lsr.w	fp, r7, r1
    cbcc:	6003      	str	r3, [r0, #0]
    cbce:	f840 bf04 	str.w	fp, [r0, #4]!
    cbd2:	4540      	cmp	r0, r8
    cbd4:	d3f3      	bcc.n	cbbe <__hexnan+0x11e>
    cbd6:	e78d      	b.n	caf4 <__hexnan+0x54>
    cbd8:	1d19      	adds	r1, r3, #4
    cbda:	9101      	str	r1, [sp, #4]
    cbdc:	461d      	mov	r5, r3
    cbde:	e76e      	b.n	cabe <__hexnan+0x1e>
    cbe0:	9b03      	ldr	r3, [sp, #12]
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	d0c2      	beq.n	cb6c <__hexnan+0xcc>
    cbe6:	9b03      	ldr	r3, [sp, #12]
    cbe8:	9801      	ldr	r0, [sp, #4]
    cbea:	f1c3 0120 	rsb	r1, r3, #32
    cbee:	f04f 33ff 	mov.w	r3, #4294967295
    cbf2:	40cb      	lsrs	r3, r1
    cbf4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    cbf8:	400b      	ands	r3, r1
    cbfa:	f840 3c04 	str.w	r3, [r0, #-4]
    cbfe:	e7b8      	b.n	cb72 <__hexnan+0xd2>
    cc00:	2929      	cmp	r1, #41	; 0x29
    cc02:	d009      	beq.n	cc18 <__hexnan+0x178>
    cc04:	2004      	movs	r0, #4
    cc06:	b005      	add	sp, #20
    cc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc0c:	2301      	movs	r3, #1
    cc0e:	2005      	movs	r0, #5
    cc10:	602b      	str	r3, [r5, #0]
    cc12:	b005      	add	sp, #20
    cc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc18:	9902      	ldr	r1, [sp, #8]
    cc1a:	3401      	adds	r4, #1
    cc1c:	600c      	str	r4, [r1, #0]
    cc1e:	e784      	b.n	cb2a <__hexnan+0x8a>
    cc20:	f8dc 1000 	ldr.w	r1, [ip]
    cc24:	f1c3 0308 	rsb	r3, r3, #8
    cc28:	009b      	lsls	r3, r3, #2
    cc2a:	f1c3 0720 	rsb	r7, r3, #32
    cc2e:	4664      	mov	r4, ip
    cc30:	4608      	mov	r0, r1
    cc32:	6866      	ldr	r6, [r4, #4]
    cc34:	fa06 f107 	lsl.w	r1, r6, r7
    cc38:	4301      	orrs	r1, r0
    cc3a:	fa26 f003 	lsr.w	r0, r6, r3
    cc3e:	6021      	str	r1, [r4, #0]
    cc40:	f844 0f04 	str.w	r0, [r4, #4]!
    cc44:	4544      	cmp	r4, r8
    cc46:	d3f4      	bcc.n	cc32 <__hexnan+0x192>
    cc48:	e775      	b.n	cb36 <__hexnan+0x96>
    cc4a:	bf00      	nop
    cc4c:	20000918 	.word	0x20000918

0000cc50 <__ascii_mbtowc>:
    cc50:	b082      	sub	sp, #8
    cc52:	b149      	cbz	r1, cc68 <__ascii_mbtowc+0x18>
    cc54:	b15a      	cbz	r2, cc6e <__ascii_mbtowc+0x1e>
    cc56:	b16b      	cbz	r3, cc74 <__ascii_mbtowc+0x24>
    cc58:	7813      	ldrb	r3, [r2, #0]
    cc5a:	600b      	str	r3, [r1, #0]
    cc5c:	7812      	ldrb	r2, [r2, #0]
    cc5e:	1e10      	subs	r0, r2, #0
    cc60:	bf18      	it	ne
    cc62:	2001      	movne	r0, #1
    cc64:	b002      	add	sp, #8
    cc66:	4770      	bx	lr
    cc68:	a901      	add	r1, sp, #4
    cc6a:	2a00      	cmp	r2, #0
    cc6c:	d1f3      	bne.n	cc56 <__ascii_mbtowc+0x6>
    cc6e:	4610      	mov	r0, r2
    cc70:	b002      	add	sp, #8
    cc72:	4770      	bx	lr
    cc74:	f06f 0001 	mvn.w	r0, #1
    cc78:	e7f4      	b.n	cc64 <__ascii_mbtowc+0x14>
    cc7a:	bf00      	nop

0000cc7c <_Balloc>:
    cc7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cc7e:	b570      	push	{r4, r5, r6, lr}
    cc80:	4605      	mov	r5, r0
    cc82:	460c      	mov	r4, r1
    cc84:	b14b      	cbz	r3, cc9a <_Balloc+0x1e>
    cc86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    cc8a:	b180      	cbz	r0, ccae <_Balloc+0x32>
    cc8c:	6802      	ldr	r2, [r0, #0]
    cc8e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    cc92:	2300      	movs	r3, #0
    cc94:	e9c0 3303 	strd	r3, r3, [r0, #12]
    cc98:	bd70      	pop	{r4, r5, r6, pc}
    cc9a:	2221      	movs	r2, #33	; 0x21
    cc9c:	2104      	movs	r1, #4
    cc9e:	f004 f8ff 	bl	10ea0 <_calloc_r>
    cca2:	4603      	mov	r3, r0
    cca4:	6468      	str	r0, [r5, #68]	; 0x44
    cca6:	2800      	cmp	r0, #0
    cca8:	d1ed      	bne.n	cc86 <_Balloc+0xa>
    ccaa:	2000      	movs	r0, #0
    ccac:	bd70      	pop	{r4, r5, r6, pc}
    ccae:	2101      	movs	r1, #1
    ccb0:	fa01 f604 	lsl.w	r6, r1, r4
    ccb4:	1d72      	adds	r2, r6, #5
    ccb6:	0092      	lsls	r2, r2, #2
    ccb8:	4628      	mov	r0, r5
    ccba:	f004 f8f1 	bl	10ea0 <_calloc_r>
    ccbe:	2800      	cmp	r0, #0
    ccc0:	d0f3      	beq.n	ccaa <_Balloc+0x2e>
    ccc2:	e9c0 4601 	strd	r4, r6, [r0, #4]
    ccc6:	e7e4      	b.n	cc92 <_Balloc+0x16>

0000ccc8 <_Bfree>:
    ccc8:	b131      	cbz	r1, ccd8 <_Bfree+0x10>
    ccca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cccc:	684a      	ldr	r2, [r1, #4]
    ccce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ccd2:	6008      	str	r0, [r1, #0]
    ccd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ccd8:	4770      	bx	lr
    ccda:	bf00      	nop

0000ccdc <__multadd>:
    ccdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cce0:	690e      	ldr	r6, [r1, #16]
    cce2:	4680      	mov	r8, r0
    cce4:	460f      	mov	r7, r1
    cce6:	461d      	mov	r5, r3
    cce8:	f101 0e14 	add.w	lr, r1, #20
    ccec:	2000      	movs	r0, #0
    ccee:	f8de 1000 	ldr.w	r1, [lr]
    ccf2:	b28c      	uxth	r4, r1
    ccf4:	fb02 5304 	mla	r3, r2, r4, r5
    ccf8:	0c09      	lsrs	r1, r1, #16
    ccfa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    ccfe:	fb02 cc01 	mla	ip, r2, r1, ip
    cd02:	3001      	adds	r0, #1
    cd04:	b29c      	uxth	r4, r3
    cd06:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    cd0a:	4286      	cmp	r6, r0
    cd0c:	f84e 4b04 	str.w	r4, [lr], #4
    cd10:	ea4f 451c 	mov.w	r5, ip, lsr #16
    cd14:	dceb      	bgt.n	ccee <__multadd+0x12>
    cd16:	b13d      	cbz	r5, cd28 <__multadd+0x4c>
    cd18:	68bb      	ldr	r3, [r7, #8]
    cd1a:	42b3      	cmp	r3, r6
    cd1c:	dd07      	ble.n	cd2e <__multadd+0x52>
    cd1e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    cd22:	3601      	adds	r6, #1
    cd24:	615d      	str	r5, [r3, #20]
    cd26:	613e      	str	r6, [r7, #16]
    cd28:	4638      	mov	r0, r7
    cd2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd2e:	6879      	ldr	r1, [r7, #4]
    cd30:	4640      	mov	r0, r8
    cd32:	3101      	adds	r1, #1
    cd34:	f7ff ffa2 	bl	cc7c <_Balloc>
    cd38:	4604      	mov	r4, r0
    cd3a:	b1b0      	cbz	r0, cd6a <__multadd+0x8e>
    cd3c:	693a      	ldr	r2, [r7, #16]
    cd3e:	3202      	adds	r2, #2
    cd40:	f107 010c 	add.w	r1, r7, #12
    cd44:	0092      	lsls	r2, r2, #2
    cd46:	300c      	adds	r0, #12
    cd48:	f7fb f8f4 	bl	7f34 <memcpy>
    cd4c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    cd50:	687a      	ldr	r2, [r7, #4]
    cd52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    cd56:	6039      	str	r1, [r7, #0]
    cd58:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    cd5c:	4627      	mov	r7, r4
    cd5e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    cd62:	3601      	adds	r6, #1
    cd64:	615d      	str	r5, [r3, #20]
    cd66:	613e      	str	r6, [r7, #16]
    cd68:	e7de      	b.n	cd28 <__multadd+0x4c>
    cd6a:	4b03      	ldr	r3, [pc, #12]	; (cd78 <__multadd+0x9c>)
    cd6c:	4803      	ldr	r0, [pc, #12]	; (cd7c <__multadd+0xa0>)
    cd6e:	4622      	mov	r2, r4
    cd70:	21ba      	movs	r1, #186	; 0xba
    cd72:	f004 f875 	bl	10e60 <__assert_func>
    cd76:	bf00      	nop
    cd78:	200008a0 	.word	0x200008a0
    cd7c:	20000a18 	.word	0x20000a18

0000cd80 <__s2b>:
    cd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd84:	4617      	mov	r7, r2
    cd86:	4a27      	ldr	r2, [pc, #156]	; (ce24 <__s2b+0xa4>)
    cd88:	461e      	mov	r6, r3
    cd8a:	3308      	adds	r3, #8
    cd8c:	460c      	mov	r4, r1
    cd8e:	2e09      	cmp	r6, #9
    cd90:	fb82 1203 	smull	r1, r2, r2, r3
    cd94:	ea4f 73e3 	mov.w	r3, r3, asr #31
    cd98:	4605      	mov	r5, r0
    cd9a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    cd9e:	dd39      	ble.n	ce14 <__s2b+0x94>
    cda0:	f04f 0c01 	mov.w	ip, #1
    cda4:	2100      	movs	r1, #0
    cda6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    cdaa:	4563      	cmp	r3, ip
    cdac:	f101 0101 	add.w	r1, r1, #1
    cdb0:	dcf9      	bgt.n	cda6 <__s2b+0x26>
    cdb2:	4628      	mov	r0, r5
    cdb4:	f7ff ff62 	bl	cc7c <_Balloc>
    cdb8:	4601      	mov	r1, r0
    cdba:	b368      	cbz	r0, ce18 <__s2b+0x98>
    cdbc:	9b08      	ldr	r3, [sp, #32]
    cdbe:	6143      	str	r3, [r0, #20]
    cdc0:	2f09      	cmp	r7, #9
    cdc2:	f04f 0301 	mov.w	r3, #1
    cdc6:	6103      	str	r3, [r0, #16]
    cdc8:	dc12      	bgt.n	cdf0 <__s2b+0x70>
    cdca:	340a      	adds	r4, #10
    cdcc:	2709      	movs	r7, #9
    cdce:	42be      	cmp	r6, r7
    cdd0:	dd0b      	ble.n	cdea <__s2b+0x6a>
    cdd2:	1bf2      	subs	r2, r6, r7
    cdd4:	18a6      	adds	r6, r4, r2
    cdd6:	f814 3b01 	ldrb.w	r3, [r4], #1
    cdda:	220a      	movs	r2, #10
    cddc:	3b30      	subs	r3, #48	; 0x30
    cdde:	4628      	mov	r0, r5
    cde0:	f7ff ff7c 	bl	ccdc <__multadd>
    cde4:	42a6      	cmp	r6, r4
    cde6:	4601      	mov	r1, r0
    cde8:	d1f5      	bne.n	cdd6 <__s2b+0x56>
    cdea:	4608      	mov	r0, r1
    cdec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cdf0:	f104 0909 	add.w	r9, r4, #9
    cdf4:	46c8      	mov	r8, r9
    cdf6:	443c      	add	r4, r7
    cdf8:	f818 3b01 	ldrb.w	r3, [r8], #1
    cdfc:	220a      	movs	r2, #10
    cdfe:	3b30      	subs	r3, #48	; 0x30
    ce00:	4628      	mov	r0, r5
    ce02:	f7ff ff6b 	bl	ccdc <__multadd>
    ce06:	45a0      	cmp	r8, r4
    ce08:	4601      	mov	r1, r0
    ce0a:	d1f5      	bne.n	cdf8 <__s2b+0x78>
    ce0c:	f1a7 0408 	sub.w	r4, r7, #8
    ce10:	444c      	add	r4, r9
    ce12:	e7dc      	b.n	cdce <__s2b+0x4e>
    ce14:	2100      	movs	r1, #0
    ce16:	e7cc      	b.n	cdb2 <__s2b+0x32>
    ce18:	460a      	mov	r2, r1
    ce1a:	4b03      	ldr	r3, [pc, #12]	; (ce28 <__s2b+0xa8>)
    ce1c:	4803      	ldr	r0, [pc, #12]	; (ce2c <__s2b+0xac>)
    ce1e:	21d3      	movs	r1, #211	; 0xd3
    ce20:	f004 f81e 	bl	10e60 <__assert_func>
    ce24:	38e38e39 	.word	0x38e38e39
    ce28:	200008a0 	.word	0x200008a0
    ce2c:	20000a18 	.word	0x20000a18

0000ce30 <__hi0bits>:
    ce30:	0c03      	lsrs	r3, r0, #16
    ce32:	041b      	lsls	r3, r3, #16
    ce34:	b9d3      	cbnz	r3, ce6c <__hi0bits+0x3c>
    ce36:	0400      	lsls	r0, r0, #16
    ce38:	2310      	movs	r3, #16
    ce3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    ce3e:	bf04      	itt	eq
    ce40:	0200      	lsleq	r0, r0, #8
    ce42:	3308      	addeq	r3, #8
    ce44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    ce48:	bf04      	itt	eq
    ce4a:	0100      	lsleq	r0, r0, #4
    ce4c:	3304      	addeq	r3, #4
    ce4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    ce52:	bf04      	itt	eq
    ce54:	0080      	lsleq	r0, r0, #2
    ce56:	3302      	addeq	r3, #2
    ce58:	2800      	cmp	r0, #0
    ce5a:	db05      	blt.n	ce68 <__hi0bits+0x38>
    ce5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    ce60:	f103 0301 	add.w	r3, r3, #1
    ce64:	bf08      	it	eq
    ce66:	2320      	moveq	r3, #32
    ce68:	4618      	mov	r0, r3
    ce6a:	4770      	bx	lr
    ce6c:	2300      	movs	r3, #0
    ce6e:	e7e4      	b.n	ce3a <__hi0bits+0xa>

0000ce70 <__lo0bits>:
    ce70:	6803      	ldr	r3, [r0, #0]
    ce72:	f013 0207 	ands.w	r2, r3, #7
    ce76:	d008      	beq.n	ce8a <__lo0bits+0x1a>
    ce78:	07d9      	lsls	r1, r3, #31
    ce7a:	d41f      	bmi.n	cebc <__lo0bits+0x4c>
    ce7c:	079a      	lsls	r2, r3, #30
    ce7e:	d522      	bpl.n	cec6 <__lo0bits+0x56>
    ce80:	085b      	lsrs	r3, r3, #1
    ce82:	6003      	str	r3, [r0, #0]
    ce84:	2201      	movs	r2, #1
    ce86:	4610      	mov	r0, r2
    ce88:	4770      	bx	lr
    ce8a:	b299      	uxth	r1, r3
    ce8c:	b909      	cbnz	r1, ce92 <__lo0bits+0x22>
    ce8e:	0c1b      	lsrs	r3, r3, #16
    ce90:	2210      	movs	r2, #16
    ce92:	b2d9      	uxtb	r1, r3
    ce94:	b909      	cbnz	r1, ce9a <__lo0bits+0x2a>
    ce96:	3208      	adds	r2, #8
    ce98:	0a1b      	lsrs	r3, r3, #8
    ce9a:	0719      	lsls	r1, r3, #28
    ce9c:	bf04      	itt	eq
    ce9e:	091b      	lsreq	r3, r3, #4
    cea0:	3204      	addeq	r2, #4
    cea2:	0799      	lsls	r1, r3, #30
    cea4:	bf04      	itt	eq
    cea6:	089b      	lsreq	r3, r3, #2
    cea8:	3202      	addeq	r2, #2
    ceaa:	07d9      	lsls	r1, r3, #31
    ceac:	d403      	bmi.n	ceb6 <__lo0bits+0x46>
    ceae:	085b      	lsrs	r3, r3, #1
    ceb0:	f102 0201 	add.w	r2, r2, #1
    ceb4:	d005      	beq.n	cec2 <__lo0bits+0x52>
    ceb6:	6003      	str	r3, [r0, #0]
    ceb8:	4610      	mov	r0, r2
    ceba:	4770      	bx	lr
    cebc:	2200      	movs	r2, #0
    cebe:	4610      	mov	r0, r2
    cec0:	4770      	bx	lr
    cec2:	2220      	movs	r2, #32
    cec4:	e7df      	b.n	ce86 <__lo0bits+0x16>
    cec6:	089b      	lsrs	r3, r3, #2
    cec8:	2202      	movs	r2, #2
    ceca:	6003      	str	r3, [r0, #0]
    cecc:	4610      	mov	r0, r2
    cece:	4770      	bx	lr

0000ced0 <__i2b>:
    ced0:	b538      	push	{r3, r4, r5, lr}
    ced2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ced4:	4604      	mov	r4, r0
    ced6:	460d      	mov	r5, r1
    ced8:	b14b      	cbz	r3, ceee <__i2b+0x1e>
    ceda:	6858      	ldr	r0, [r3, #4]
    cedc:	b1b0      	cbz	r0, cf0c <__i2b+0x3c>
    cede:	6802      	ldr	r2, [r0, #0]
    cee0:	605a      	str	r2, [r3, #4]
    cee2:	2200      	movs	r2, #0
    cee4:	2301      	movs	r3, #1
    cee6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    ceea:	60c2      	str	r2, [r0, #12]
    ceec:	bd38      	pop	{r3, r4, r5, pc}
    ceee:	2221      	movs	r2, #33	; 0x21
    cef0:	2104      	movs	r1, #4
    cef2:	f003 ffd5 	bl	10ea0 <_calloc_r>
    cef6:	4603      	mov	r3, r0
    cef8:	6460      	str	r0, [r4, #68]	; 0x44
    cefa:	2800      	cmp	r0, #0
    cefc:	d1ed      	bne.n	ceda <__i2b+0xa>
    cefe:	4b09      	ldr	r3, [pc, #36]	; (cf24 <__i2b+0x54>)
    cf00:	4809      	ldr	r0, [pc, #36]	; (cf28 <__i2b+0x58>)
    cf02:	2200      	movs	r2, #0
    cf04:	f240 1145 	movw	r1, #325	; 0x145
    cf08:	f003 ffaa 	bl	10e60 <__assert_func>
    cf0c:	221c      	movs	r2, #28
    cf0e:	2101      	movs	r1, #1
    cf10:	4620      	mov	r0, r4
    cf12:	f003 ffc5 	bl	10ea0 <_calloc_r>
    cf16:	2800      	cmp	r0, #0
    cf18:	d0f1      	beq.n	cefe <__i2b+0x2e>
    cf1a:	2201      	movs	r2, #1
    cf1c:	2302      	movs	r3, #2
    cf1e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    cf22:	e7de      	b.n	cee2 <__i2b+0x12>
    cf24:	200008a0 	.word	0x200008a0
    cf28:	20000a18 	.word	0x20000a18

0000cf2c <__multiply>:
    cf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf30:	690e      	ldr	r6, [r1, #16]
    cf32:	6915      	ldr	r5, [r2, #16]
    cf34:	42ae      	cmp	r6, r5
    cf36:	b085      	sub	sp, #20
    cf38:	4688      	mov	r8, r1
    cf3a:	4614      	mov	r4, r2
    cf3c:	db05      	blt.n	cf4a <__multiply+0x1e>
    cf3e:	462a      	mov	r2, r5
    cf40:	4623      	mov	r3, r4
    cf42:	4635      	mov	r5, r6
    cf44:	460c      	mov	r4, r1
    cf46:	4616      	mov	r6, r2
    cf48:	4698      	mov	r8, r3
    cf4a:	68a3      	ldr	r3, [r4, #8]
    cf4c:	6861      	ldr	r1, [r4, #4]
    cf4e:	19af      	adds	r7, r5, r6
    cf50:	42bb      	cmp	r3, r7
    cf52:	bfb8      	it	lt
    cf54:	3101      	addlt	r1, #1
    cf56:	f7ff fe91 	bl	cc7c <_Balloc>
    cf5a:	9001      	str	r0, [sp, #4]
    cf5c:	2800      	cmp	r0, #0
    cf5e:	f000 8087 	beq.w	d070 <__multiply+0x144>
    cf62:	9b01      	ldr	r3, [sp, #4]
    cf64:	f103 0914 	add.w	r9, r3, #20
    cf68:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    cf6c:	45d1      	cmp	r9, sl
    cf6e:	d205      	bcs.n	cf7c <__multiply+0x50>
    cf70:	464b      	mov	r3, r9
    cf72:	2200      	movs	r2, #0
    cf74:	f843 2b04 	str.w	r2, [r3], #4
    cf78:	459a      	cmp	sl, r3
    cf7a:	d8fb      	bhi.n	cf74 <__multiply+0x48>
    cf7c:	f108 0814 	add.w	r8, r8, #20
    cf80:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    cf84:	f104 0314 	add.w	r3, r4, #20
    cf88:	45d8      	cmp	r8, fp
    cf8a:	461a      	mov	r2, r3
    cf8c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    cf90:	d25f      	bcs.n	d052 <__multiply+0x126>
    cf92:	1b2b      	subs	r3, r5, r4
    cf94:	3b15      	subs	r3, #21
    cf96:	f023 0303 	bic.w	r3, r3, #3
    cf9a:	3304      	adds	r3, #4
    cf9c:	3415      	adds	r4, #21
    cf9e:	42a5      	cmp	r5, r4
    cfa0:	bf38      	it	cc
    cfa2:	2304      	movcc	r3, #4
    cfa4:	e9cd a702 	strd	sl, r7, [sp, #8]
    cfa8:	46ac      	mov	ip, r5
    cfaa:	461f      	mov	r7, r3
    cfac:	4692      	mov	sl, r2
    cfae:	e005      	b.n	cfbc <__multiply+0x90>
    cfb0:	0c09      	lsrs	r1, r1, #16
    cfb2:	d129      	bne.n	d008 <__multiply+0xdc>
    cfb4:	45c3      	cmp	fp, r8
    cfb6:	f109 0904 	add.w	r9, r9, #4
    cfba:	d948      	bls.n	d04e <__multiply+0x122>
    cfbc:	f858 1b04 	ldr.w	r1, [r8], #4
    cfc0:	b28d      	uxth	r5, r1
    cfc2:	2d00      	cmp	r5, #0
    cfc4:	d0f4      	beq.n	cfb0 <__multiply+0x84>
    cfc6:	4656      	mov	r6, sl
    cfc8:	464c      	mov	r4, r9
    cfca:	2300      	movs	r3, #0
    cfcc:	f856 1b04 	ldr.w	r1, [r6], #4
    cfd0:	6822      	ldr	r2, [r4, #0]
    cfd2:	fa1f fe81 	uxth.w	lr, r1
    cfd6:	b290      	uxth	r0, r2
    cfd8:	0c09      	lsrs	r1, r1, #16
    cfda:	fb05 000e 	mla	r0, r5, lr, r0
    cfde:	0c12      	lsrs	r2, r2, #16
    cfe0:	4403      	add	r3, r0
    cfe2:	fb05 2201 	mla	r2, r5, r1, r2
    cfe6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    cfea:	b29b      	uxth	r3, r3
    cfec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cff0:	45b4      	cmp	ip, r6
    cff2:	f844 3b04 	str.w	r3, [r4], #4
    cff6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    cffa:	d8e7      	bhi.n	cfcc <__multiply+0xa0>
    cffc:	f849 3007 	str.w	r3, [r9, r7]
    d000:	f858 1c04 	ldr.w	r1, [r8, #-4]
    d004:	0c09      	lsrs	r1, r1, #16
    d006:	d0d5      	beq.n	cfb4 <__multiply+0x88>
    d008:	f8d9 3000 	ldr.w	r3, [r9]
    d00c:	4650      	mov	r0, sl
    d00e:	461a      	mov	r2, r3
    d010:	464c      	mov	r4, r9
    d012:	2600      	movs	r6, #0
    d014:	8805      	ldrh	r5, [r0, #0]
    d016:	0c12      	lsrs	r2, r2, #16
    d018:	fb01 2205 	mla	r2, r1, r5, r2
    d01c:	4416      	add	r6, r2
    d01e:	b29b      	uxth	r3, r3
    d020:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    d024:	f844 3b04 	str.w	r3, [r4], #4
    d028:	f850 5b04 	ldr.w	r5, [r0], #4
    d02c:	6822      	ldr	r2, [r4, #0]
    d02e:	0c2d      	lsrs	r5, r5, #16
    d030:	b293      	uxth	r3, r2
    d032:	fb01 3305 	mla	r3, r1, r5, r3
    d036:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    d03a:	4584      	cmp	ip, r0
    d03c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    d040:	d8e8      	bhi.n	d014 <__multiply+0xe8>
    d042:	45c3      	cmp	fp, r8
    d044:	f849 3007 	str.w	r3, [r9, r7]
    d048:	f109 0904 	add.w	r9, r9, #4
    d04c:	d8b6      	bhi.n	cfbc <__multiply+0x90>
    d04e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    d052:	2f00      	cmp	r7, #0
    d054:	dc02      	bgt.n	d05c <__multiply+0x130>
    d056:	e005      	b.n	d064 <__multiply+0x138>
    d058:	3f01      	subs	r7, #1
    d05a:	d003      	beq.n	d064 <__multiply+0x138>
    d05c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    d060:	2b00      	cmp	r3, #0
    d062:	d0f9      	beq.n	d058 <__multiply+0x12c>
    d064:	9b01      	ldr	r3, [sp, #4]
    d066:	4618      	mov	r0, r3
    d068:	611f      	str	r7, [r3, #16]
    d06a:	b005      	add	sp, #20
    d06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d070:	4b03      	ldr	r3, [pc, #12]	; (d080 <__multiply+0x154>)
    d072:	4804      	ldr	r0, [pc, #16]	; (d084 <__multiply+0x158>)
    d074:	9a01      	ldr	r2, [sp, #4]
    d076:	f44f 71b1 	mov.w	r1, #354	; 0x162
    d07a:	f003 fef1 	bl	10e60 <__assert_func>
    d07e:	bf00      	nop
    d080:	200008a0 	.word	0x200008a0
    d084:	20000a18 	.word	0x20000a18

0000d088 <__pow5mult>:
    d088:	f012 0303 	ands.w	r3, r2, #3
    d08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d090:	4614      	mov	r4, r2
    d092:	4606      	mov	r6, r0
    d094:	d132      	bne.n	d0fc <__pow5mult+0x74>
    d096:	460d      	mov	r5, r1
    d098:	10a4      	asrs	r4, r4, #2
    d09a:	d020      	beq.n	d0de <__pow5mult+0x56>
    d09c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    d0a0:	f1b8 0f00 	cmp.w	r8, #0
    d0a4:	d033      	beq.n	d10e <__pow5mult+0x86>
    d0a6:	07e3      	lsls	r3, r4, #31
    d0a8:	f04f 0700 	mov.w	r7, #0
    d0ac:	d407      	bmi.n	d0be <__pow5mult+0x36>
    d0ae:	1064      	asrs	r4, r4, #1
    d0b0:	d015      	beq.n	d0de <__pow5mult+0x56>
    d0b2:	f8d8 0000 	ldr.w	r0, [r8]
    d0b6:	b1a8      	cbz	r0, d0e4 <__pow5mult+0x5c>
    d0b8:	4680      	mov	r8, r0
    d0ba:	07e3      	lsls	r3, r4, #31
    d0bc:	d5f7      	bpl.n	d0ae <__pow5mult+0x26>
    d0be:	4642      	mov	r2, r8
    d0c0:	4629      	mov	r1, r5
    d0c2:	4630      	mov	r0, r6
    d0c4:	f7ff ff32 	bl	cf2c <__multiply>
    d0c8:	b1b5      	cbz	r5, d0f8 <__pow5mult+0x70>
    d0ca:	6869      	ldr	r1, [r5, #4]
    d0cc:	6c73      	ldr	r3, [r6, #68]	; 0x44
    d0ce:	1064      	asrs	r4, r4, #1
    d0d0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    d0d4:	602a      	str	r2, [r5, #0]
    d0d6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    d0da:	4605      	mov	r5, r0
    d0dc:	d1e9      	bne.n	d0b2 <__pow5mult+0x2a>
    d0de:	4628      	mov	r0, r5
    d0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0e4:	4642      	mov	r2, r8
    d0e6:	4641      	mov	r1, r8
    d0e8:	4630      	mov	r0, r6
    d0ea:	f7ff ff1f 	bl	cf2c <__multiply>
    d0ee:	f8c8 0000 	str.w	r0, [r8]
    d0f2:	6007      	str	r7, [r0, #0]
    d0f4:	4680      	mov	r8, r0
    d0f6:	e7e0      	b.n	d0ba <__pow5mult+0x32>
    d0f8:	4605      	mov	r5, r0
    d0fa:	e7d8      	b.n	d0ae <__pow5mult+0x26>
    d0fc:	3b01      	subs	r3, #1
    d0fe:	4a0f      	ldr	r2, [pc, #60]	; (d13c <__pow5mult+0xb4>)
    d100:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    d104:	2300      	movs	r3, #0
    d106:	f7ff fde9 	bl	ccdc <__multadd>
    d10a:	4605      	mov	r5, r0
    d10c:	e7c4      	b.n	d098 <__pow5mult+0x10>
    d10e:	2101      	movs	r1, #1
    d110:	4630      	mov	r0, r6
    d112:	f7ff fdb3 	bl	cc7c <_Balloc>
    d116:	4680      	mov	r8, r0
    d118:	b140      	cbz	r0, d12c <__pow5mult+0xa4>
    d11a:	2301      	movs	r3, #1
    d11c:	f240 2271 	movw	r2, #625	; 0x271
    d120:	e9c0 3204 	strd	r3, r2, [r0, #16]
    d124:	2300      	movs	r3, #0
    d126:	6430      	str	r0, [r6, #64]	; 0x40
    d128:	6003      	str	r3, [r0, #0]
    d12a:	e7bc      	b.n	d0a6 <__pow5mult+0x1e>
    d12c:	4b04      	ldr	r3, [pc, #16]	; (d140 <__pow5mult+0xb8>)
    d12e:	4805      	ldr	r0, [pc, #20]	; (d144 <__pow5mult+0xbc>)
    d130:	4642      	mov	r2, r8
    d132:	f240 1145 	movw	r1, #325	; 0x145
    d136:	f003 fe93 	bl	10e60 <__assert_func>
    d13a:	bf00      	nop
    d13c:	20007a70 	.word	0x20007a70
    d140:	200008a0 	.word	0x200008a0
    d144:	20000a18 	.word	0x20000a18

0000d148 <__lshift>:
    d148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d14c:	460d      	mov	r5, r1
    d14e:	4614      	mov	r4, r2
    d150:	692f      	ldr	r7, [r5, #16]
    d152:	68ab      	ldr	r3, [r5, #8]
    d154:	6849      	ldr	r1, [r1, #4]
    d156:	eb07 1762 	add.w	r7, r7, r2, asr #5
    d15a:	1c7e      	adds	r6, r7, #1
    d15c:	429e      	cmp	r6, r3
    d15e:	4680      	mov	r8, r0
    d160:	ea4f 1962 	mov.w	r9, r2, asr #5
    d164:	dd04      	ble.n	d170 <__lshift+0x28>
    d166:	005b      	lsls	r3, r3, #1
    d168:	429e      	cmp	r6, r3
    d16a:	f101 0101 	add.w	r1, r1, #1
    d16e:	dcfa      	bgt.n	d166 <__lshift+0x1e>
    d170:	4640      	mov	r0, r8
    d172:	f7ff fd83 	bl	cc7c <_Balloc>
    d176:	4684      	mov	ip, r0
    d178:	2800      	cmp	r0, #0
    d17a:	d052      	beq.n	d222 <__lshift+0xda>
    d17c:	f1b9 0f00 	cmp.w	r9, #0
    d180:	f100 0214 	add.w	r2, r0, #20
    d184:	dd0e      	ble.n	d1a4 <__lshift+0x5c>
    d186:	f109 0105 	add.w	r1, r9, #5
    d18a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    d18e:	4613      	mov	r3, r2
    d190:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    d194:	2000      	movs	r0, #0
    d196:	f843 0b04 	str.w	r0, [r3], #4
    d19a:	428b      	cmp	r3, r1
    d19c:	d1fb      	bne.n	d196 <__lshift+0x4e>
    d19e:	f1ae 0314 	sub.w	r3, lr, #20
    d1a2:	441a      	add	r2, r3
    d1a4:	6929      	ldr	r1, [r5, #16]
    d1a6:	f105 0314 	add.w	r3, r5, #20
    d1aa:	f014 0e1f 	ands.w	lr, r4, #31
    d1ae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d1b2:	d02e      	beq.n	d212 <__lshift+0xca>
    d1b4:	f1ce 0920 	rsb	r9, lr, #32
    d1b8:	4610      	mov	r0, r2
    d1ba:	f04f 0a00 	mov.w	sl, #0
    d1be:	681c      	ldr	r4, [r3, #0]
    d1c0:	fa04 f40e 	lsl.w	r4, r4, lr
    d1c4:	ea44 040a 	orr.w	r4, r4, sl
    d1c8:	f840 4b04 	str.w	r4, [r0], #4
    d1cc:	f853 4b04 	ldr.w	r4, [r3], #4
    d1d0:	4299      	cmp	r1, r3
    d1d2:	fa24 fa09 	lsr.w	sl, r4, r9
    d1d6:	d8f2      	bhi.n	d1be <__lshift+0x76>
    d1d8:	1b4b      	subs	r3, r1, r5
    d1da:	3b15      	subs	r3, #21
    d1dc:	f023 0303 	bic.w	r3, r3, #3
    d1e0:	3304      	adds	r3, #4
    d1e2:	f105 0015 	add.w	r0, r5, #21
    d1e6:	4281      	cmp	r1, r0
    d1e8:	bf38      	it	cc
    d1ea:	2304      	movcc	r3, #4
    d1ec:	f1ba 0f00 	cmp.w	sl, #0
    d1f0:	bf18      	it	ne
    d1f2:	4637      	movne	r7, r6
    d1f4:	f842 a003 	str.w	sl, [r2, r3]
    d1f8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    d1fc:	686a      	ldr	r2, [r5, #4]
    d1fe:	f8cc 7010 	str.w	r7, [ip, #16]
    d202:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d206:	6029      	str	r1, [r5, #0]
    d208:	4660      	mov	r0, ip
    d20a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    d20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d212:	3a04      	subs	r2, #4
    d214:	f853 0b04 	ldr.w	r0, [r3], #4
    d218:	f842 0f04 	str.w	r0, [r2, #4]!
    d21c:	4299      	cmp	r1, r3
    d21e:	d8f9      	bhi.n	d214 <__lshift+0xcc>
    d220:	e7ea      	b.n	d1f8 <__lshift+0xb0>
    d222:	4b03      	ldr	r3, [pc, #12]	; (d230 <__lshift+0xe8>)
    d224:	4803      	ldr	r0, [pc, #12]	; (d234 <__lshift+0xec>)
    d226:	4662      	mov	r2, ip
    d228:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    d22c:	f003 fe18 	bl	10e60 <__assert_func>
    d230:	200008a0 	.word	0x200008a0
    d234:	20000a18 	.word	0x20000a18

0000d238 <__mcmp>:
    d238:	690b      	ldr	r3, [r1, #16]
    d23a:	4684      	mov	ip, r0
    d23c:	6900      	ldr	r0, [r0, #16]
    d23e:	1ac0      	subs	r0, r0, r3
    d240:	d116      	bne.n	d270 <__mcmp+0x38>
    d242:	f10c 0c14 	add.w	ip, ip, #20
    d246:	3114      	adds	r1, #20
    d248:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    d24c:	b410      	push	{r4}
    d24e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    d252:	e001      	b.n	d258 <__mcmp+0x20>
    d254:	4594      	cmp	ip, r2
    d256:	d208      	bcs.n	d26a <__mcmp+0x32>
    d258:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d25c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d260:	428c      	cmp	r4, r1
    d262:	d0f7      	beq.n	d254 <__mcmp+0x1c>
    d264:	d205      	bcs.n	d272 <__mcmp+0x3a>
    d266:	f04f 30ff 	mov.w	r0, #4294967295
    d26a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d26e:	4770      	bx	lr
    d270:	4770      	bx	lr
    d272:	2001      	movs	r0, #1
    d274:	f85d 4b04 	ldr.w	r4, [sp], #4
    d278:	4770      	bx	lr
    d27a:	bf00      	nop

0000d27c <__mdiff>:
    d27c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d280:	690f      	ldr	r7, [r1, #16]
    d282:	6913      	ldr	r3, [r2, #16]
    d284:	1aff      	subs	r7, r7, r3
    d286:	2f00      	cmp	r7, #0
    d288:	460e      	mov	r6, r1
    d28a:	4690      	mov	r8, r2
    d28c:	d17f      	bne.n	d38e <__mdiff+0x112>
    d28e:	f101 0514 	add.w	r5, r1, #20
    d292:	3214      	adds	r2, #20
    d294:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    d298:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    d29c:	e001      	b.n	d2a2 <__mdiff+0x26>
    d29e:	429d      	cmp	r5, r3
    d2a0:	d278      	bcs.n	d394 <__mdiff+0x118>
    d2a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d2a6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d2aa:	42a1      	cmp	r1, r4
    d2ac:	d0f7      	beq.n	d29e <__mdiff+0x22>
    d2ae:	d369      	bcc.n	d384 <__mdiff+0x108>
    d2b0:	6871      	ldr	r1, [r6, #4]
    d2b2:	f7ff fce3 	bl	cc7c <_Balloc>
    d2b6:	4681      	mov	r9, r0
    d2b8:	2800      	cmp	r0, #0
    d2ba:	d077      	beq.n	d3ac <__mdiff+0x130>
    d2bc:	6935      	ldr	r5, [r6, #16]
    d2be:	f8d8 2010 	ldr.w	r2, [r8, #16]
    d2c2:	60c7      	str	r7, [r0, #12]
    d2c4:	f108 0e14 	add.w	lr, r8, #20
    d2c8:	f106 0014 	add.w	r0, r6, #20
    d2cc:	f109 0a14 	add.w	sl, r9, #20
    d2d0:	f106 0110 	add.w	r1, r6, #16
    d2d4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    d2d8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    d2dc:	4656      	mov	r6, sl
    d2de:	f04f 0c00 	mov.w	ip, #0
    d2e2:	f85e 4b04 	ldr.w	r4, [lr], #4
    d2e6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    d2ea:	b2a3      	uxth	r3, r4
    d2ec:	fa1c fc8b 	uxtah	ip, ip, fp
    d2f0:	ebac 0303 	sub.w	r3, ip, r3
    d2f4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    d2f8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    d2fc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    d300:	b29b      	uxth	r3, r3
    d302:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    d306:	4572      	cmp	r2, lr
    d308:	f846 3b04 	str.w	r3, [r6], #4
    d30c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    d310:	d8e7      	bhi.n	d2e2 <__mdiff+0x66>
    d312:	eba2 0108 	sub.w	r1, r2, r8
    d316:	3915      	subs	r1, #21
    d318:	f108 0815 	add.w	r8, r8, #21
    d31c:	4542      	cmp	r2, r8
    d31e:	f021 0403 	bic.w	r4, r1, #3
    d322:	f104 0404 	add.w	r4, r4, #4
    d326:	bf38      	it	cc
    d328:	2404      	movcc	r4, #4
    d32a:	4420      	add	r0, r4
    d32c:	f021 0203 	bic.w	r2, r1, #3
    d330:	bf38      	it	cc
    d332:	2200      	movcc	r2, #0
    d334:	4287      	cmp	r7, r0
    d336:	4452      	add	r2, sl
    d338:	4454      	add	r4, sl
    d33a:	d918      	bls.n	d36e <__mdiff+0xf2>
    d33c:	4626      	mov	r6, r4
    d33e:	4601      	mov	r1, r0
    d340:	f851 3b04 	ldr.w	r3, [r1], #4
    d344:	fa1c fc83 	uxtah	ip, ip, r3
    d348:	ea4f 422c 	mov.w	r2, ip, asr #16
    d34c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d350:	fa1f fc8c 	uxth.w	ip, ip
    d354:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    d358:	428f      	cmp	r7, r1
    d35a:	f846 3b04 	str.w	r3, [r6], #4
    d35e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    d362:	d8ed      	bhi.n	d340 <__mdiff+0xc4>
    d364:	3f01      	subs	r7, #1
    d366:	1a3f      	subs	r7, r7, r0
    d368:	f027 0703 	bic.w	r7, r7, #3
    d36c:	19e2      	adds	r2, r4, r7
    d36e:	b923      	cbnz	r3, d37a <__mdiff+0xfe>
    d370:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    d374:	3d01      	subs	r5, #1
    d376:	2b00      	cmp	r3, #0
    d378:	d0fa      	beq.n	d370 <__mdiff+0xf4>
    d37a:	f8c9 5010 	str.w	r5, [r9, #16]
    d37e:	4648      	mov	r0, r9
    d380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d384:	4633      	mov	r3, r6
    d386:	2701      	movs	r7, #1
    d388:	4646      	mov	r6, r8
    d38a:	4698      	mov	r8, r3
    d38c:	e790      	b.n	d2b0 <__mdiff+0x34>
    d38e:	dbf9      	blt.n	d384 <__mdiff+0x108>
    d390:	2700      	movs	r7, #0
    d392:	e78d      	b.n	d2b0 <__mdiff+0x34>
    d394:	2100      	movs	r1, #0
    d396:	f7ff fc71 	bl	cc7c <_Balloc>
    d39a:	4681      	mov	r9, r0
    d39c:	b168      	cbz	r0, d3ba <__mdiff+0x13e>
    d39e:	2201      	movs	r2, #1
    d3a0:	2300      	movs	r3, #0
    d3a2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    d3a6:	4648      	mov	r0, r9
    d3a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3ac:	4b06      	ldr	r3, [pc, #24]	; (d3c8 <__mdiff+0x14c>)
    d3ae:	4807      	ldr	r0, [pc, #28]	; (d3cc <__mdiff+0x150>)
    d3b0:	464a      	mov	r2, r9
    d3b2:	f240 2145 	movw	r1, #581	; 0x245
    d3b6:	f003 fd53 	bl	10e60 <__assert_func>
    d3ba:	4b03      	ldr	r3, [pc, #12]	; (d3c8 <__mdiff+0x14c>)
    d3bc:	4803      	ldr	r0, [pc, #12]	; (d3cc <__mdiff+0x150>)
    d3be:	464a      	mov	r2, r9
    d3c0:	f240 2137 	movw	r1, #567	; 0x237
    d3c4:	f003 fd4c 	bl	10e60 <__assert_func>
    d3c8:	200008a0 	.word	0x200008a0
    d3cc:	20000a18 	.word	0x20000a18

0000d3d0 <__ulp>:
    d3d0:	b082      	sub	sp, #8
    d3d2:	ed8d 0b00 	vstr	d0, [sp]
    d3d6:	4b16      	ldr	r3, [pc, #88]	; (d430 <__ulp+0x60>)
    d3d8:	9a01      	ldr	r2, [sp, #4]
    d3da:	4013      	ands	r3, r2
    d3dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    d3e0:	2b00      	cmp	r3, #0
    d3e2:	dd06      	ble.n	d3f2 <__ulp+0x22>
    d3e4:	2200      	movs	r2, #0
    d3e6:	4619      	mov	r1, r3
    d3e8:	4610      	mov	r0, r2
    d3ea:	ec41 0b10 	vmov	d0, r0, r1
    d3ee:	b002      	add	sp, #8
    d3f0:	4770      	bx	lr
    d3f2:	425b      	negs	r3, r3
    d3f4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    d3f8:	ea4f 5223 	mov.w	r2, r3, asr #20
    d3fc:	da09      	bge.n	d412 <__ulp+0x42>
    d3fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    d402:	4113      	asrs	r3, r2
    d404:	2200      	movs	r2, #0
    d406:	4619      	mov	r1, r3
    d408:	4610      	mov	r0, r2
    d40a:	ec41 0b10 	vmov	d0, r0, r1
    d40e:	b002      	add	sp, #8
    d410:	4770      	bx	lr
    d412:	f1a2 0314 	sub.w	r3, r2, #20
    d416:	2b1e      	cmp	r3, #30
    d418:	bfda      	itte	le
    d41a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    d41e:	40da      	lsrle	r2, r3
    d420:	2201      	movgt	r2, #1
    d422:	2300      	movs	r3, #0
    d424:	4619      	mov	r1, r3
    d426:	4610      	mov	r0, r2
    d428:	ec41 0b10 	vmov	d0, r0, r1
    d42c:	b002      	add	sp, #8
    d42e:	4770      	bx	lr
    d430:	7ff00000 	.word	0x7ff00000

0000d434 <__b2d>:
    d434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d436:	6904      	ldr	r4, [r0, #16]
    d438:	f100 0614 	add.w	r6, r0, #20
    d43c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    d440:	1f27      	subs	r7, r4, #4
    d442:	f854 5c04 	ldr.w	r5, [r4, #-4]
    d446:	4628      	mov	r0, r5
    d448:	f7ff fcf2 	bl	ce30 <__hi0bits>
    d44c:	f1c0 0320 	rsb	r3, r0, #32
    d450:	280a      	cmp	r0, #10
    d452:	600b      	str	r3, [r1, #0]
    d454:	dd1b      	ble.n	d48e <__b2d+0x5a>
    d456:	42be      	cmp	r6, r7
    d458:	d20b      	bcs.n	d472 <__b2d+0x3e>
    d45a:	380b      	subs	r0, #11
    d45c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    d460:	d12e      	bne.n	d4c0 <__b2d+0x8c>
    d462:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    d466:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d46a:	460a      	mov	r2, r1
    d46c:	ec43 2b10 	vmov	d0, r2, r3
    d470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d472:	f1b0 010b 	subs.w	r1, r0, #11
    d476:	d0f4      	beq.n	d462 <__b2d+0x2e>
    d478:	fa05 f101 	lsl.w	r1, r5, r1
    d47c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d480:	2100      	movs	r1, #0
    d482:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d486:	460a      	mov	r2, r1
    d488:	ec43 2b10 	vmov	d0, r2, r3
    d48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d48e:	f1c0 0c0b 	rsb	ip, r0, #11
    d492:	fa25 f10c 	lsr.w	r1, r5, ip
    d496:	42be      	cmp	r6, r7
    d498:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d49c:	bf38      	it	cc
    d49e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    d4a2:	f100 0015 	add.w	r0, r0, #21
    d4a6:	bf34      	ite	cc
    d4a8:	fa21 f10c 	lsrcc.w	r1, r1, ip
    d4ac:	2100      	movcs	r1, #0
    d4ae:	fa05 f000 	lsl.w	r0, r5, r0
    d4b2:	4301      	orrs	r1, r0
    d4b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d4b8:	460a      	mov	r2, r1
    d4ba:	ec43 2b10 	vmov	d0, r2, r3
    d4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d4c0:	f1c0 0c20 	rsb	ip, r0, #32
    d4c4:	4085      	lsls	r5, r0
    d4c6:	fa21 f30c 	lsr.w	r3, r1, ip
    d4ca:	ea45 0703 	orr.w	r7, r5, r3
    d4ce:	f1a4 0508 	sub.w	r5, r4, #8
    d4d2:	42ae      	cmp	r6, r5
    d4d4:	fa01 f100 	lsl.w	r1, r1, r0
    d4d8:	bf3c      	itt	cc
    d4da:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    d4de:	fa20 f00c 	lsrcc.w	r0, r0, ip
    d4e2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    d4e6:	bf38      	it	cc
    d4e8:	4301      	orrcc	r1, r0
    d4ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d4ee:	460a      	mov	r2, r1
    d4f0:	ec43 2b10 	vmov	d0, r2, r3
    d4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d4f6:	bf00      	nop

0000d4f8 <__d2b>:
    d4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d4fc:	4688      	mov	r8, r1
    d4fe:	b083      	sub	sp, #12
    d500:	2101      	movs	r1, #1
    d502:	ec57 6b10 	vmov	r6, r7, d0
    d506:	4615      	mov	r5, r2
    d508:	f7ff fbb8 	bl	cc7c <_Balloc>
    d50c:	4604      	mov	r4, r0
    d50e:	2800      	cmp	r0, #0
    d510:	d051      	beq.n	d5b6 <__d2b+0xbe>
    d512:	f3c7 590a 	ubfx	r9, r7, #20, #11
    d516:	f3c7 0313 	ubfx	r3, r7, #0, #20
    d51a:	f1b9 0f00 	cmp.w	r9, #0
    d51e:	d001      	beq.n	d524 <__d2b+0x2c>
    d520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d524:	2e00      	cmp	r6, #0
    d526:	9301      	str	r3, [sp, #4]
    d528:	d118      	bne.n	d55c <__d2b+0x64>
    d52a:	a801      	add	r0, sp, #4
    d52c:	f7ff fca0 	bl	ce70 <__lo0bits>
    d530:	9a01      	ldr	r2, [sp, #4]
    d532:	6162      	str	r2, [r4, #20]
    d534:	2201      	movs	r2, #1
    d536:	f100 0320 	add.w	r3, r0, #32
    d53a:	6122      	str	r2, [r4, #16]
    d53c:	f1b9 0f00 	cmp.w	r9, #0
    d540:	d025      	beq.n	d58e <__d2b+0x96>
    d542:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    d546:	eb09 0203 	add.w	r2, r9, r3
    d54a:	4620      	mov	r0, r4
    d54c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    d550:	f8c8 2000 	str.w	r2, [r8]
    d554:	602b      	str	r3, [r5, #0]
    d556:	b003      	add	sp, #12
    d558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d55c:	4668      	mov	r0, sp
    d55e:	9600      	str	r6, [sp, #0]
    d560:	f7ff fc86 	bl	ce70 <__lo0bits>
    d564:	4603      	mov	r3, r0
    d566:	b310      	cbz	r0, d5ae <__d2b+0xb6>
    d568:	e9dd 0200 	ldrd	r0, r2, [sp]
    d56c:	f1c3 0120 	rsb	r1, r3, #32
    d570:	fa02 f101 	lsl.w	r1, r2, r1
    d574:	4301      	orrs	r1, r0
    d576:	40da      	lsrs	r2, r3
    d578:	6161      	str	r1, [r4, #20]
    d57a:	9201      	str	r2, [sp, #4]
    d57c:	2a00      	cmp	r2, #0
    d57e:	61a2      	str	r2, [r4, #24]
    d580:	bf14      	ite	ne
    d582:	2202      	movne	r2, #2
    d584:	2201      	moveq	r2, #1
    d586:	6122      	str	r2, [r4, #16]
    d588:	f1b9 0f00 	cmp.w	r9, #0
    d58c:	d1d9      	bne.n	d542 <__d2b+0x4a>
    d58e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    d592:	f8c8 3000 	str.w	r3, [r8]
    d596:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    d59a:	6918      	ldr	r0, [r3, #16]
    d59c:	f7ff fc48 	bl	ce30 <__hi0bits>
    d5a0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    d5a4:	4620      	mov	r0, r4
    d5a6:	602b      	str	r3, [r5, #0]
    d5a8:	b003      	add	sp, #12
    d5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d5ae:	9a00      	ldr	r2, [sp, #0]
    d5b0:	6162      	str	r2, [r4, #20]
    d5b2:	9a01      	ldr	r2, [sp, #4]
    d5b4:	e7e2      	b.n	d57c <__d2b+0x84>
    d5b6:	4b03      	ldr	r3, [pc, #12]	; (d5c4 <__d2b+0xcc>)
    d5b8:	4803      	ldr	r0, [pc, #12]	; (d5c8 <__d2b+0xd0>)
    d5ba:	4622      	mov	r2, r4
    d5bc:	f240 310f 	movw	r1, #783	; 0x30f
    d5c0:	f003 fc4e 	bl	10e60 <__assert_func>
    d5c4:	200008a0 	.word	0x200008a0
    d5c8:	20000a18 	.word	0x20000a18

0000d5cc <__ratio>:
    d5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5ce:	b083      	sub	sp, #12
    d5d0:	460e      	mov	r6, r1
    d5d2:	4669      	mov	r1, sp
    d5d4:	4607      	mov	r7, r0
    d5d6:	f7ff ff2d 	bl	d434 <__b2d>
    d5da:	a901      	add	r1, sp, #4
    d5dc:	4630      	mov	r0, r6
    d5de:	ec55 4b10 	vmov	r4, r5, d0
    d5e2:	eeb0 7b40 	vmov.f64	d7, d0
    d5e6:	f7ff ff25 	bl	d434 <__b2d>
    d5ea:	6933      	ldr	r3, [r6, #16]
    d5ec:	693a      	ldr	r2, [r7, #16]
    d5ee:	1ad2      	subs	r2, r2, r3
    d5f0:	e9dd 3100 	ldrd	r3, r1, [sp]
    d5f4:	1a5b      	subs	r3, r3, r1
    d5f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    d5fa:	2b00      	cmp	r3, #0
    d5fc:	dd09      	ble.n	d612 <__ratio+0x46>
    d5fe:	ee17 2a90 	vmov	r2, s15
    d602:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    d606:	ec45 4b17 	vmov	d7, r4, r5
    d60a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d60e:	b003      	add	sp, #12
    d610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d612:	ee10 2a90 	vmov	r2, s1
    d616:	ec51 0b10 	vmov	r0, r1, d0
    d61a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    d61e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    d622:	ec41 0b10 	vmov	d0, r0, r1
    d626:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d62a:	b003      	add	sp, #12
    d62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d62e:	bf00      	nop

0000d630 <__copybits>:
    d630:	3901      	subs	r1, #1
    d632:	1149      	asrs	r1, r1, #5
    d634:	f101 0c01 	add.w	ip, r1, #1
    d638:	6911      	ldr	r1, [r2, #16]
    d63a:	f102 0314 	add.w	r3, r2, #20
    d63e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d642:	428b      	cmp	r3, r1
    d644:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    d648:	d217      	bcs.n	d67a <__copybits+0x4a>
    d64a:	b510      	push	{r4, lr}
    d64c:	f1a0 0e04 	sub.w	lr, r0, #4
    d650:	f853 4b04 	ldr.w	r4, [r3], #4
    d654:	f84e 4f04 	str.w	r4, [lr, #4]!
    d658:	4299      	cmp	r1, r3
    d65a:	d8f9      	bhi.n	d650 <__copybits+0x20>
    d65c:	1a8a      	subs	r2, r1, r2
    d65e:	f1a2 0315 	sub.w	r3, r2, #21
    d662:	f023 0303 	bic.w	r3, r3, #3
    d666:	3304      	adds	r3, #4
    d668:	4418      	add	r0, r3
    d66a:	4584      	cmp	ip, r0
    d66c:	d904      	bls.n	d678 <__copybits+0x48>
    d66e:	2300      	movs	r3, #0
    d670:	f840 3b04 	str.w	r3, [r0], #4
    d674:	4584      	cmp	ip, r0
    d676:	d8fb      	bhi.n	d670 <__copybits+0x40>
    d678:	bd10      	pop	{r4, pc}
    d67a:	4584      	cmp	ip, r0
    d67c:	d905      	bls.n	d68a <__copybits+0x5a>
    d67e:	2300      	movs	r3, #0
    d680:	f840 3b04 	str.w	r3, [r0], #4
    d684:	4584      	cmp	ip, r0
    d686:	d8fb      	bhi.n	d680 <__copybits+0x50>
    d688:	4770      	bx	lr
    d68a:	4770      	bx	lr

0000d68c <__any_on>:
    d68c:	6903      	ldr	r3, [r0, #16]
    d68e:	114a      	asrs	r2, r1, #5
    d690:	4293      	cmp	r3, r2
    d692:	f100 0014 	add.w	r0, r0, #20
    d696:	da09      	bge.n	d6ac <__any_on+0x20>
    d698:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d69c:	e002      	b.n	d6a4 <__any_on+0x18>
    d69e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d6a2:	b9c2      	cbnz	r2, d6d6 <__any_on+0x4a>
    d6a4:	4283      	cmp	r3, r0
    d6a6:	d8fa      	bhi.n	d69e <__any_on+0x12>
    d6a8:	2000      	movs	r0, #0
    d6aa:	4770      	bx	lr
    d6ac:	dd10      	ble.n	d6d0 <__any_on+0x44>
    d6ae:	f011 011f 	ands.w	r1, r1, #31
    d6b2:	d00d      	beq.n	d6d0 <__any_on+0x44>
    d6b4:	b410      	push	{r4}
    d6b6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    d6ba:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d6be:	fa24 f201 	lsr.w	r2, r4, r1
    d6c2:	408a      	lsls	r2, r1
    d6c4:	4294      	cmp	r4, r2
    d6c6:	d00c      	beq.n	d6e2 <__any_on+0x56>
    d6c8:	2001      	movs	r0, #1
    d6ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    d6ce:	4770      	bx	lr
    d6d0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d6d4:	e7e6      	b.n	d6a4 <__any_on+0x18>
    d6d6:	2001      	movs	r0, #1
    d6d8:	4770      	bx	lr
    d6da:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d6de:	2a00      	cmp	r2, #0
    d6e0:	d1f2      	bne.n	d6c8 <__any_on+0x3c>
    d6e2:	4283      	cmp	r3, r0
    d6e4:	d8f9      	bhi.n	d6da <__any_on+0x4e>
    d6e6:	2000      	movs	r0, #0
    d6e8:	f85d 4b04 	ldr.w	r4, [sp], #4
    d6ec:	4770      	bx	lr
    d6ee:	bf00      	nop

0000d6f0 <__ascii_wctomb>:
    d6f0:	b149      	cbz	r1, d706 <__ascii_wctomb+0x16>
    d6f2:	2aff      	cmp	r2, #255	; 0xff
    d6f4:	d802      	bhi.n	d6fc <__ascii_wctomb+0xc>
    d6f6:	700a      	strb	r2, [r1, #0]
    d6f8:	2001      	movs	r0, #1
    d6fa:	4770      	bx	lr
    d6fc:	238a      	movs	r3, #138	; 0x8a
    d6fe:	6003      	str	r3, [r0, #0]
    d700:	f04f 30ff 	mov.w	r0, #4294967295
    d704:	4770      	bx	lr
    d706:	4608      	mov	r0, r1
    d708:	4770      	bx	lr
    d70a:	bf00      	nop
    d70c:	0000      	movs	r0, r0
	...

0000d710 <_svfprintf_r>:
    d710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d714:	ed2d 8b08 	vpush	{d8-d11}
    d718:	b0d1      	sub	sp, #324	; 0x144
    d71a:	460c      	mov	r4, r1
    d71c:	ee0b 1a10 	vmov	s22, r1
    d720:	4690      	mov	r8, r2
    d722:	9308      	str	r3, [sp, #32]
    d724:	4683      	mov	fp, r0
    d726:	f003 fb59 	bl	10ddc <_localeconv_r>
    d72a:	6803      	ldr	r3, [r0, #0]
    d72c:	9312      	str	r3, [sp, #72]	; 0x48
    d72e:	4618      	mov	r0, r3
    d730:	f7fe fc66 	bl	c000 <strlen>
    d734:	af20      	add	r7, sp, #128	; 0x80
    d736:	9010      	str	r0, [sp, #64]	; 0x40
    d738:	2208      	movs	r2, #8
    d73a:	2100      	movs	r1, #0
    d73c:	4638      	mov	r0, r7
    d73e:	f7fe f8c5 	bl	b8cc <memset>
    d742:	89a3      	ldrh	r3, [r4, #12]
    d744:	061b      	lsls	r3, r3, #24
    d746:	d503      	bpl.n	d750 <_svfprintf_r+0x40>
    d748:	6923      	ldr	r3, [r4, #16]
    d74a:	2b00      	cmp	r3, #0
    d74c:	f000 8755 	beq.w	e5fa <_svfprintf_r+0xeea>
    d750:	2300      	movs	r3, #0
    d752:	ed9f 8b83 	vldr	d8, [pc, #524]	; d960 <_svfprintf_r+0x250>
    d756:	ed9f 9b84 	vldr	d9, [pc, #528]	; d968 <_svfprintf_r+0x258>
    d75a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    d75e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    d762:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    d766:	aa27      	add	r2, sp, #156	; 0x9c
    d768:	930e      	str	r3, [sp, #56]	; 0x38
    d76a:	9224      	str	r2, [sp, #144]	; 0x90
    d76c:	4692      	mov	sl, r2
    d76e:	9311      	str	r3, [sp, #68]	; 0x44
    d770:	9304      	str	r3, [sp, #16]
    d772:	4644      	mov	r4, r8
    d774:	46a1      	mov	r9, r4
    d776:	4b7e      	ldr	r3, [pc, #504]	; (d970 <_svfprintf_r+0x260>)
    d778:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    d77c:	f7fe f970 	bl	ba60 <__locale_mb_cur_max>
    d780:	464a      	mov	r2, r9
    d782:	4603      	mov	r3, r0
    d784:	a91c      	add	r1, sp, #112	; 0x70
    d786:	9700      	str	r7, [sp, #0]
    d788:	4658      	mov	r0, fp
    d78a:	47a8      	blx	r5
    d78c:	2800      	cmp	r0, #0
    d78e:	f000 80b0 	beq.w	d8f2 <_svfprintf_r+0x1e2>
    d792:	f2c0 80a6 	blt.w	d8e2 <_svfprintf_r+0x1d2>
    d796:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d798:	2a25      	cmp	r2, #37	; 0x25
    d79a:	4603      	mov	r3, r0
    d79c:	d001      	beq.n	d7a2 <_svfprintf_r+0x92>
    d79e:	4499      	add	r9, r3
    d7a0:	e7e9      	b.n	d776 <_svfprintf_r+0x66>
    d7a2:	ebb9 0504 	subs.w	r5, r9, r4
    d7a6:	4606      	mov	r6, r0
    d7a8:	f040 80a7 	bne.w	d8fa <_svfprintf_r+0x1ea>
    d7ac:	2300      	movs	r3, #0
    d7ae:	f04f 32ff 	mov.w	r2, #4294967295
    d7b2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d7b6:	4698      	mov	r8, r3
    d7b8:	9306      	str	r3, [sp, #24]
    d7ba:	f109 0901 	add.w	r9, r9, #1
    d7be:	f899 3000 	ldrb.w	r3, [r9]
    d7c2:	9203      	str	r2, [sp, #12]
    d7c4:	252b      	movs	r5, #43	; 0x2b
    d7c6:	2620      	movs	r6, #32
    d7c8:	f109 0901 	add.w	r9, r9, #1
    d7cc:	f1a3 0220 	sub.w	r2, r3, #32
    d7d0:	2a5a      	cmp	r2, #90	; 0x5a
    d7d2:	f200 80cf 	bhi.w	d974 <_svfprintf_r+0x264>
    d7d6:	e8df f012 	tbh	[pc, r2, lsl #1]
    d7da:	02e8      	.short	0x02e8
    d7dc:	00cd00cd 	.word	0x00cd00cd
    d7e0:	00cd02e3 	.word	0x00cd02e3
    d7e4:	00cd00cd 	.word	0x00cd00cd
    d7e8:	00cd006a 	.word	0x00cd006a
    d7ec:	020500cd 	.word	0x020500cd
    d7f0:	00cd0284 	.word	0x00cd0284
    d7f4:	02c90210 	.word	0x02c90210
    d7f8:	02bd00cd 	.word	0x02bd00cd
    d7fc:	005b005b 	.word	0x005b005b
    d800:	005b005b 	.word	0x005b005b
    d804:	005b005b 	.word	0x005b005b
    d808:	005b005b 	.word	0x005b005b
    d80c:	00cd005b 	.word	0x00cd005b
    d810:	00cd00cd 	.word	0x00cd00cd
    d814:	00cd00cd 	.word	0x00cd00cd
    d818:	00cd00cd 	.word	0x00cd00cd
    d81c:	00cd0153 	.word	0x00cd0153
    d820:	021a0183 	.word	0x021a0183
    d824:	01530153 	.word	0x01530153
    d828:	00cd0153 	.word	0x00cd0153
    d82c:	00cd00cd 	.word	0x00cd00cd
    d830:	021500cd 	.word	0x021500cd
    d834:	00cd00cd 	.word	0x00cd00cd
    d838:	00cd0296 	.word	0x00cd0296
    d83c:	00cd00cd 	.word	0x00cd00cd
    d840:	00cd01ab 	.word	0x00cd01ab
    d844:	00cd02aa 	.word	0x00cd02aa
    d848:	06e300cd 	.word	0x06e300cd
    d84c:	00cd00cd 	.word	0x00cd00cd
    d850:	00cd00cd 	.word	0x00cd00cd
    d854:	00cd00cd 	.word	0x00cd00cd
    d858:	00cd00cd 	.word	0x00cd00cd
    d85c:	00cd0153 	.word	0x00cd0153
    d860:	01de0183 	.word	0x01de0183
    d864:	01530153 	.word	0x01530153
    d868:	02770153 	.word	0x02770153
    d86c:	007f01de 	.word	0x007f01de
    d870:	028900cd 	.word	0x028900cd
    d874:	025f00cd 	.word	0x025f00cd
    d878:	022f06e0 	.word	0x022f06e0
    d87c:	00cd007f 	.word	0x00cd007f
    d880:	007c01ab 	.word	0x007c01ab
    d884:	00cd06b8 	.word	0x00cd06b8
    d888:	06bd00cd 	.word	0x06bd00cd
    d88c:	007c00cd 	.word	0x007c00cd
    d890:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d894:	2100      	movs	r1, #0
    d896:	f819 3b01 	ldrb.w	r3, [r9], #1
    d89a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d89e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d8a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d8a6:	2a09      	cmp	r2, #9
    d8a8:	d9f5      	bls.n	d896 <_svfprintf_r+0x186>
    d8aa:	9106      	str	r1, [sp, #24]
    d8ac:	e78e      	b.n	d7cc <_svfprintf_r+0xbc>
    d8ae:	4658      	mov	r0, fp
    d8b0:	f003 fa94 	bl	10ddc <_localeconv_r>
    d8b4:	6843      	ldr	r3, [r0, #4]
    d8b6:	9315      	str	r3, [sp, #84]	; 0x54
    d8b8:	4618      	mov	r0, r3
    d8ba:	f7fe fba1 	bl	c000 <strlen>
    d8be:	9016      	str	r0, [sp, #88]	; 0x58
    d8c0:	4658      	mov	r0, fp
    d8c2:	f003 fa8b 	bl	10ddc <_localeconv_r>
    d8c6:	6883      	ldr	r3, [r0, #8]
    d8c8:	9313      	str	r3, [sp, #76]	; 0x4c
    d8ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d8cc:	2b00      	cmp	r3, #0
    d8ce:	f040 862d 	bne.w	e52c <_svfprintf_r+0xe1c>
    d8d2:	f899 3000 	ldrb.w	r3, [r9]
    d8d6:	e777      	b.n	d7c8 <_svfprintf_r+0xb8>
    d8d8:	f899 3000 	ldrb.w	r3, [r9]
    d8dc:	f048 0820 	orr.w	r8, r8, #32
    d8e0:	e772      	b.n	d7c8 <_svfprintf_r+0xb8>
    d8e2:	2208      	movs	r2, #8
    d8e4:	2100      	movs	r1, #0
    d8e6:	4638      	mov	r0, r7
    d8e8:	f7fd fff0 	bl	b8cc <memset>
    d8ec:	2301      	movs	r3, #1
    d8ee:	4499      	add	r9, r3
    d8f0:	e741      	b.n	d776 <_svfprintf_r+0x66>
    d8f2:	ebb9 0504 	subs.w	r5, r9, r4
    d8f6:	4606      	mov	r6, r0
    d8f8:	d011      	beq.n	d91e <_svfprintf_r+0x20e>
    d8fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d8fc:	442b      	add	r3, r5
    d8fe:	9326      	str	r3, [sp, #152]	; 0x98
    d900:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d902:	3301      	adds	r3, #1
    d904:	2b07      	cmp	r3, #7
    d906:	e9ca 4500 	strd	r4, r5, [sl]
    d90a:	9325      	str	r3, [sp, #148]	; 0x94
    d90c:	dc1c      	bgt.n	d948 <_svfprintf_r+0x238>
    d90e:	f10a 0a08 	add.w	sl, sl, #8
    d912:	9b04      	ldr	r3, [sp, #16]
    d914:	442b      	add	r3, r5
    d916:	9304      	str	r3, [sp, #16]
    d918:	2e00      	cmp	r6, #0
    d91a:	f47f af47 	bne.w	d7ac <_svfprintf_r+0x9c>
    d91e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d920:	2b00      	cmp	r3, #0
    d922:	f041 820b 	bne.w	ed3c <_svfprintf_r+0x162c>
    d926:	ee1b 3a10 	vmov	r3, s22
    d92a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    d92e:	f013 0f40 	tst.w	r3, #64	; 0x40
    d932:	9b04      	ldr	r3, [sp, #16]
    d934:	bf18      	it	ne
    d936:	f04f 33ff 	movne.w	r3, #4294967295
    d93a:	9304      	str	r3, [sp, #16]
    d93c:	9804      	ldr	r0, [sp, #16]
    d93e:	b051      	add	sp, #324	; 0x144
    d940:	ecbd 8b08 	vpop	{d8-d11}
    d944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d948:	ee1b 1a10 	vmov	r1, s22
    d94c:	aa24      	add	r2, sp, #144	; 0x90
    d94e:	4658      	mov	r0, fp
    d950:	f004 fd6a 	bl	12428 <__ssprint_r>
    d954:	2800      	cmp	r0, #0
    d956:	d1e6      	bne.n	d926 <_svfprintf_r+0x216>
    d958:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d95c:	e7d9      	b.n	d912 <_svfprintf_r+0x202>
    d95e:	bf00      	nop
	...
    d968:	ffffffff 	.word	0xffffffff
    d96c:	7fefffff 	.word	0x7fefffff
    d970:	200085c8 	.word	0x200085c8
    d974:	930b      	str	r3, [sp, #44]	; 0x2c
    d976:	2b00      	cmp	r3, #0
    d978:	d0d1      	beq.n	d91e <_svfprintf_r+0x20e>
    d97a:	2100      	movs	r1, #0
    d97c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    d980:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    d984:	2301      	movs	r3, #1
    d986:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    d98a:	9302      	str	r3, [sp, #8]
    d98c:	9107      	str	r1, [sp, #28]
    d98e:	9305      	str	r3, [sp, #20]
    d990:	9103      	str	r1, [sp, #12]
    d992:	910f      	str	r1, [sp, #60]	; 0x3c
    d994:	ac37      	add	r4, sp, #220	; 0xdc
    d996:	f018 0302 	ands.w	r3, r8, #2
    d99a:	9309      	str	r3, [sp, #36]	; 0x24
    d99c:	d002      	beq.n	d9a4 <_svfprintf_r+0x294>
    d99e:	9b02      	ldr	r3, [sp, #8]
    d9a0:	3302      	adds	r3, #2
    d9a2:	9302      	str	r3, [sp, #8]
    d9a4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    d9a8:	930a      	str	r3, [sp, #40]	; 0x28
    d9aa:	d105      	bne.n	d9b8 <_svfprintf_r+0x2a8>
    d9ac:	9b06      	ldr	r3, [sp, #24]
    d9ae:	9a02      	ldr	r2, [sp, #8]
    d9b0:	1a9d      	subs	r5, r3, r2
    d9b2:	2d00      	cmp	r5, #0
    d9b4:	f300 8369 	bgt.w	e08a <_svfprintf_r+0x97a>
    d9b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d9ba:	b189      	cbz	r1, d9e0 <_svfprintf_r+0x2d0>
    d9bc:	9925      	ldr	r1, [sp, #148]	; 0x94
    d9be:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    d9c2:	3101      	adds	r1, #1
    d9c4:	3201      	adds	r2, #1
    d9c6:	f8ca 0000 	str.w	r0, [sl]
    d9ca:	2907      	cmp	r1, #7
    d9cc:	f04f 0001 	mov.w	r0, #1
    d9d0:	9226      	str	r2, [sp, #152]	; 0x98
    d9d2:	9125      	str	r1, [sp, #148]	; 0x94
    d9d4:	f8ca 0004 	str.w	r0, [sl, #4]
    d9d8:	f300 83a2 	bgt.w	e120 <_svfprintf_r+0xa10>
    d9dc:	f10a 0a08 	add.w	sl, sl, #8
    d9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d9e2:	b183      	cbz	r3, da06 <_svfprintf_r+0x2f6>
    d9e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d9e6:	a91a      	add	r1, sp, #104	; 0x68
    d9e8:	3301      	adds	r3, #1
    d9ea:	3202      	adds	r2, #2
    d9ec:	f8ca 1000 	str.w	r1, [sl]
    d9f0:	2b07      	cmp	r3, #7
    d9f2:	f04f 0102 	mov.w	r1, #2
    d9f6:	9226      	str	r2, [sp, #152]	; 0x98
    d9f8:	9325      	str	r3, [sp, #148]	; 0x94
    d9fa:	f8ca 1004 	str.w	r1, [sl, #4]
    d9fe:	f300 83a3 	bgt.w	e148 <_svfprintf_r+0xa38>
    da02:	f10a 0a08 	add.w	sl, sl, #8
    da06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    da08:	2b80      	cmp	r3, #128	; 0x80
    da0a:	f000 826c 	beq.w	dee6 <_svfprintf_r+0x7d6>
    da0e:	9b03      	ldr	r3, [sp, #12]
    da10:	9905      	ldr	r1, [sp, #20]
    da12:	1a5d      	subs	r5, r3, r1
    da14:	2d00      	cmp	r5, #0
    da16:	f300 82a5 	bgt.w	df64 <_svfprintf_r+0x854>
    da1a:	f418 7f80 	tst.w	r8, #256	; 0x100
    da1e:	f040 820d 	bne.w	de3c <_svfprintf_r+0x72c>
    da22:	9b05      	ldr	r3, [sp, #20]
    da24:	f8ca 3004 	str.w	r3, [sl, #4]
    da28:	441a      	add	r2, r3
    da2a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    da2c:	f8ca 4000 	str.w	r4, [sl]
    da30:	3301      	adds	r3, #1
    da32:	2b07      	cmp	r3, #7
    da34:	9226      	str	r2, [sp, #152]	; 0x98
    da36:	9325      	str	r3, [sp, #148]	; 0x94
    da38:	f300 831b 	bgt.w	e072 <_svfprintf_r+0x962>
    da3c:	f10a 0a08 	add.w	sl, sl, #8
    da40:	f018 0f04 	tst.w	r8, #4
    da44:	d005      	beq.n	da52 <_svfprintf_r+0x342>
    da46:	9b06      	ldr	r3, [sp, #24]
    da48:	9902      	ldr	r1, [sp, #8]
    da4a:	1a5c      	subs	r4, r3, r1
    da4c:	2c00      	cmp	r4, #0
    da4e:	f300 8388 	bgt.w	e162 <_svfprintf_r+0xa52>
    da52:	9b04      	ldr	r3, [sp, #16]
    da54:	9906      	ldr	r1, [sp, #24]
    da56:	9802      	ldr	r0, [sp, #8]
    da58:	4281      	cmp	r1, r0
    da5a:	bfac      	ite	ge
    da5c:	185b      	addge	r3, r3, r1
    da5e:	181b      	addlt	r3, r3, r0
    da60:	9304      	str	r3, [sp, #16]
    da62:	2a00      	cmp	r2, #0
    da64:	f040 82b0 	bne.w	dfc8 <_svfprintf_r+0x8b8>
    da68:	2300      	movs	r3, #0
    da6a:	9325      	str	r3, [sp, #148]	; 0x94
    da6c:	9b07      	ldr	r3, [sp, #28]
    da6e:	b11b      	cbz	r3, da78 <_svfprintf_r+0x368>
    da70:	9907      	ldr	r1, [sp, #28]
    da72:	4658      	mov	r0, fp
    da74:	f7fe fbd6 	bl	c224 <_free_r>
    da78:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    da7c:	464c      	mov	r4, r9
    da7e:	e679      	b.n	d774 <_svfprintf_r+0x64>
    da80:	930b      	str	r3, [sp, #44]	; 0x2c
    da82:	9b08      	ldr	r3, [sp, #32]
    da84:	3307      	adds	r3, #7
    da86:	f023 0307 	bic.w	r3, r3, #7
    da8a:	ecb3 8b02 	vldmia	r3!, {d8}
    da8e:	eeb0 7bc8 	vabs.f64	d7, d8
    da92:	eeb4 7b49 	vcmp.f64	d7, d9
    da96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    da9a:	9308      	str	r3, [sp, #32]
    da9c:	f340 84e9 	ble.w	e472 <_svfprintf_r+0xd62>
    daa0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    daa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    daa8:	f101 8059 	bmi.w	eb5e <_svfprintf_r+0x144e>
    daac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dab0:	4cab      	ldr	r4, [pc, #684]	; (dd60 <_svfprintf_r+0x650>)
    dab2:	4bac      	ldr	r3, [pc, #688]	; (dd64 <_svfprintf_r+0x654>)
    dab4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    dab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    daba:	2a47      	cmp	r2, #71	; 0x47
    dabc:	bfc8      	it	gt
    dabe:	461c      	movgt	r4, r3
    dac0:	2300      	movs	r3, #0
    dac2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    dac6:	2203      	movs	r2, #3
    dac8:	9307      	str	r3, [sp, #28]
    daca:	9202      	str	r2, [sp, #8]
    dacc:	9205      	str	r2, [sp, #20]
    dace:	9303      	str	r3, [sp, #12]
    dad0:	930f      	str	r3, [sp, #60]	; 0x3c
    dad2:	2900      	cmp	r1, #0
    dad4:	f43f af5f 	beq.w	d996 <_svfprintf_r+0x286>
    dad8:	9b02      	ldr	r3, [sp, #8]
    dada:	3301      	adds	r3, #1
    dadc:	9302      	str	r3, [sp, #8]
    dade:	e75a      	b.n	d996 <_svfprintf_r+0x286>
    dae0:	2b43      	cmp	r3, #67	; 0x43
    dae2:	930b      	str	r3, [sp, #44]	; 0x2c
    dae4:	d003      	beq.n	daee <_svfprintf_r+0x3de>
    dae6:	f018 0f10 	tst.w	r8, #16
    daea:	f000 855d 	beq.w	e5a8 <_svfprintf_r+0xe98>
    daee:	9d08      	ldr	r5, [sp, #32]
    daf0:	2208      	movs	r2, #8
    daf2:	2100      	movs	r1, #0
    daf4:	a822      	add	r0, sp, #136	; 0x88
    daf6:	ac37      	add	r4, sp, #220	; 0xdc
    daf8:	f7fd fee8 	bl	b8cc <memset>
    dafc:	ab22      	add	r3, sp, #136	; 0x88
    dafe:	f855 2b04 	ldr.w	r2, [r5], #4
    db02:	4621      	mov	r1, r4
    db04:	4658      	mov	r0, fp
    db06:	f004 fb65 	bl	121d4 <_wcrtomb_r>
    db0a:	4603      	mov	r3, r0
    db0c:	3301      	adds	r3, #1
    db0e:	9005      	str	r0, [sp, #20]
    db10:	f001 82ee 	beq.w	f0f0 <_svfprintf_r+0x19e0>
    db14:	9b05      	ldr	r3, [sp, #20]
    db16:	9508      	str	r5, [sp, #32]
    db18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    db1c:	9302      	str	r3, [sp, #8]
    db1e:	2100      	movs	r1, #0
    db20:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    db24:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    db28:	9107      	str	r1, [sp, #28]
    db2a:	9103      	str	r1, [sp, #12]
    db2c:	910f      	str	r1, [sp, #60]	; 0x3c
    db2e:	e732      	b.n	d996 <_svfprintf_r+0x286>
    db30:	930b      	str	r3, [sp, #44]	; 0x2c
    db32:	9b08      	ldr	r3, [sp, #32]
    db34:	461a      	mov	r2, r3
    db36:	2300      	movs	r3, #0
    db38:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    db3c:	4613      	mov	r3, r2
    db3e:	f853 4b04 	ldr.w	r4, [r3], #4
    db42:	9308      	str	r3, [sp, #32]
    db44:	2c00      	cmp	r4, #0
    db46:	f000 8548 	beq.w	e5da <_svfprintf_r+0xeca>
    db4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    db4c:	2b53      	cmp	r3, #83	; 0x53
    db4e:	f000 86ec 	beq.w	e92a <_svfprintf_r+0x121a>
    db52:	f018 0310 	ands.w	r3, r8, #16
    db56:	930c      	str	r3, [sp, #48]	; 0x30
    db58:	f040 86e7 	bne.w	e92a <_svfprintf_r+0x121a>
    db5c:	9b03      	ldr	r3, [sp, #12]
    db5e:	1c5d      	adds	r5, r3, #1
    db60:	f001 80e5 	beq.w	ed2e <_svfprintf_r+0x161e>
    db64:	990c      	ldr	r1, [sp, #48]	; 0x30
    db66:	461a      	mov	r2, r3
    db68:	4620      	mov	r0, r4
    db6a:	f7fe f9e9 	bl	bf40 <memchr>
    db6e:	9007      	str	r0, [sp, #28]
    db70:	2800      	cmp	r0, #0
    db72:	f001 8328 	beq.w	f1c6 <_svfprintf_r+0x1ab6>
    db76:	9b07      	ldr	r3, [sp, #28]
    db78:	1b1a      	subs	r2, r3, r4
    db7a:	9205      	str	r2, [sp, #20]
    db7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    db7e:	9303      	str	r3, [sp, #12]
    db80:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    db84:	930f      	str	r3, [sp, #60]	; 0x3c
    db86:	930d      	str	r3, [sp, #52]	; 0x34
    db88:	9307      	str	r3, [sp, #28]
    db8a:	2373      	movs	r3, #115	; 0x73
    db8c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    db90:	9202      	str	r2, [sp, #8]
    db92:	930b      	str	r3, [sp, #44]	; 0x2c
    db94:	e79d      	b.n	dad2 <_svfprintf_r+0x3c2>
    db96:	f018 0f20 	tst.w	r8, #32
    db9a:	930b      	str	r3, [sp, #44]	; 0x2c
    db9c:	9b08      	ldr	r3, [sp, #32]
    db9e:	d03d      	beq.n	dc1c <_svfprintf_r+0x50c>
    dba0:	3307      	adds	r3, #7
    dba2:	f023 0307 	bic.w	r3, r3, #7
    dba6:	461a      	mov	r2, r3
    dba8:	4611      	mov	r1, r2
    dbaa:	685b      	ldr	r3, [r3, #4]
    dbac:	f851 2b08 	ldr.w	r2, [r1], #8
    dbb0:	9108      	str	r1, [sp, #32]
    dbb2:	4619      	mov	r1, r3
    dbb4:	2b00      	cmp	r3, #0
    dbb6:	f2c0 840c 	blt.w	e3d2 <_svfprintf_r+0xcc2>
    dbba:	9b03      	ldr	r3, [sp, #12]
    dbbc:	3301      	adds	r3, #1
    dbbe:	f000 829e 	beq.w	e0fe <_svfprintf_r+0x9ee>
    dbc2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    dbc6:	ea52 0301 	orrs.w	r3, r2, r1
    dbca:	9002      	str	r0, [sp, #8]
    dbcc:	f040 8299 	bne.w	e102 <_svfprintf_r+0x9f2>
    dbd0:	9b03      	ldr	r3, [sp, #12]
    dbd2:	2b00      	cmp	r3, #0
    dbd4:	f040 829a 	bne.w	e10c <_svfprintf_r+0x9fc>
    dbd8:	4680      	mov	r8, r0
    dbda:	2300      	movs	r3, #0
    dbdc:	9303      	str	r3, [sp, #12]
    dbde:	9305      	str	r3, [sp, #20]
    dbe0:	ac50      	add	r4, sp, #320	; 0x140
    dbe2:	e106      	b.n	ddf2 <_svfprintf_r+0x6e2>
    dbe4:	9b08      	ldr	r3, [sp, #32]
    dbe6:	f853 2b04 	ldr.w	r2, [r3], #4
    dbea:	9206      	str	r2, [sp, #24]
    dbec:	2a00      	cmp	r2, #0
    dbee:	f280 8419 	bge.w	e424 <_svfprintf_r+0xd14>
    dbf2:	9a06      	ldr	r2, [sp, #24]
    dbf4:	9308      	str	r3, [sp, #32]
    dbf6:	4252      	negs	r2, r2
    dbf8:	9206      	str	r2, [sp, #24]
    dbfa:	f899 3000 	ldrb.w	r3, [r9]
    dbfe:	f048 0804 	orr.w	r8, r8, #4
    dc02:	e5e1      	b.n	d7c8 <_svfprintf_r+0xb8>
    dc04:	f899 3000 	ldrb.w	r3, [r9]
    dc08:	f048 0808 	orr.w	r8, r8, #8
    dc0c:	e5dc      	b.n	d7c8 <_svfprintf_r+0xb8>
    dc0e:	f048 0810 	orr.w	r8, r8, #16
    dc12:	f018 0f20 	tst.w	r8, #32
    dc16:	930b      	str	r3, [sp, #44]	; 0x2c
    dc18:	9b08      	ldr	r3, [sp, #32]
    dc1a:	d1c1      	bne.n	dba0 <_svfprintf_r+0x490>
    dc1c:	f018 0f10 	tst.w	r8, #16
    dc20:	f040 840b 	bne.w	e43a <_svfprintf_r+0xd2a>
    dc24:	f018 0f40 	tst.w	r8, #64	; 0x40
    dc28:	f000 8403 	beq.w	e432 <_svfprintf_r+0xd22>
    dc2c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    dc30:	9308      	str	r3, [sp, #32]
    dc32:	17d1      	asrs	r1, r2, #31
    dc34:	460b      	mov	r3, r1
    dc36:	e7bd      	b.n	dbb4 <_svfprintf_r+0x4a4>
    dc38:	9b08      	ldr	r3, [sp, #32]
    dc3a:	f048 0202 	orr.w	r2, r8, #2
    dc3e:	9202      	str	r2, [sp, #8]
    dc40:	f853 2b04 	ldr.w	r2, [r3], #4
    dc44:	9308      	str	r3, [sp, #32]
    dc46:	f647 0330 	movw	r3, #30768	; 0x7830
    dc4a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    dc4e:	2078      	movs	r0, #120	; 0x78
    dc50:	4b45      	ldr	r3, [pc, #276]	; (dd68 <_svfprintf_r+0x658>)
    dc52:	9311      	str	r3, [sp, #68]	; 0x44
    dc54:	2100      	movs	r1, #0
    dc56:	2302      	movs	r3, #2
    dc58:	900b      	str	r0, [sp, #44]	; 0x2c
    dc5a:	2000      	movs	r0, #0
    dc5c:	9c03      	ldr	r4, [sp, #12]
    dc5e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    dc62:	1c60      	adds	r0, r4, #1
    dc64:	f000 80ad 	beq.w	ddc2 <_svfprintf_r+0x6b2>
    dc68:	9802      	ldr	r0, [sp, #8]
    dc6a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    dc6e:	ea52 0001 	orrs.w	r0, r2, r1
    dc72:	f040 80a4 	bne.w	ddbe <_svfprintf_r+0x6ae>
    dc76:	2c00      	cmp	r4, #0
    dc78:	f040 86ae 	bne.w	e9d8 <_svfprintf_r+0x12c8>
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	d1ac      	bne.n	dbda <_svfprintf_r+0x4ca>
    dc80:	9b02      	ldr	r3, [sp, #8]
    dc82:	f013 0301 	ands.w	r3, r3, #1
    dc86:	9305      	str	r3, [sp, #20]
    dc88:	f000 83d1 	beq.w	e42e <_svfprintf_r+0xd1e>
    dc8c:	2330      	movs	r3, #48	; 0x30
    dc8e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    dc92:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    dc96:	e0ac      	b.n	ddf2 <_svfprintf_r+0x6e2>
    dc98:	f018 0f20 	tst.w	r8, #32
    dc9c:	f040 83d4 	bne.w	e448 <_svfprintf_r+0xd38>
    dca0:	f018 0f10 	tst.w	r8, #16
    dca4:	f040 869f 	bne.w	e9e6 <_svfprintf_r+0x12d6>
    dca8:	f018 0f40 	tst.w	r8, #64	; 0x40
    dcac:	f040 8797 	bne.w	ebde <_svfprintf_r+0x14ce>
    dcb0:	f418 7f00 	tst.w	r8, #512	; 0x200
    dcb4:	f000 8697 	beq.w	e9e6 <_svfprintf_r+0x12d6>
    dcb8:	9b08      	ldr	r3, [sp, #32]
    dcba:	9904      	ldr	r1, [sp, #16]
    dcbc:	f853 2b04 	ldr.w	r2, [r3], #4
    dcc0:	9308      	str	r3, [sp, #32]
    dcc2:	7011      	strb	r1, [r2, #0]
    dcc4:	464c      	mov	r4, r9
    dcc6:	e555      	b.n	d774 <_svfprintf_r+0x64>
    dcc8:	f899 3000 	ldrb.w	r3, [r9]
    dccc:	2b68      	cmp	r3, #104	; 0x68
    dcce:	bf03      	ittte	eq
    dcd0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    dcd4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    dcd8:	f109 0901 	addeq.w	r9, r9, #1
    dcdc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    dce0:	e572      	b.n	d7c8 <_svfprintf_r+0xb8>
    dce2:	f899 3000 	ldrb.w	r3, [r9]
    dce6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    dcea:	e56d      	b.n	d7c8 <_svfprintf_r+0xb8>
    dcec:	f899 3000 	ldrb.w	r3, [r9]
    dcf0:	2b6c      	cmp	r3, #108	; 0x6c
    dcf2:	bf03      	ittte	eq
    dcf4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    dcf8:	f048 0820 	orreq.w	r8, r8, #32
    dcfc:	f109 0901 	addeq.w	r9, r9, #1
    dd00:	f048 0810 	orrne.w	r8, r8, #16
    dd04:	e560      	b.n	d7c8 <_svfprintf_r+0xb8>
    dd06:	930b      	str	r3, [sp, #44]	; 0x2c
    dd08:	f048 0810 	orr.w	r8, r8, #16
    dd0c:	f018 0120 	ands.w	r1, r8, #32
    dd10:	f000 8351 	beq.w	e3b6 <_svfprintf_r+0xca6>
    dd14:	9b08      	ldr	r3, [sp, #32]
    dd16:	3307      	adds	r3, #7
    dd18:	f023 0307 	bic.w	r3, r3, #7
    dd1c:	6859      	ldr	r1, [r3, #4]
    dd1e:	f853 2b08 	ldr.w	r2, [r3], #8
    dd22:	9308      	str	r3, [sp, #32]
    dd24:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    dd28:	9302      	str	r3, [sp, #8]
    dd2a:	2300      	movs	r3, #0
    dd2c:	e795      	b.n	dc5a <_svfprintf_r+0x54a>
    dd2e:	930b      	str	r3, [sp, #44]	; 0x2c
    dd30:	f048 0310 	orr.w	r3, r8, #16
    dd34:	9302      	str	r3, [sp, #8]
    dd36:	9b02      	ldr	r3, [sp, #8]
    dd38:	f013 0120 	ands.w	r1, r3, #32
    dd3c:	f000 8329 	beq.w	e392 <_svfprintf_r+0xc82>
    dd40:	9b08      	ldr	r3, [sp, #32]
    dd42:	3307      	adds	r3, #7
    dd44:	f023 0307 	bic.w	r3, r3, #7
    dd48:	6859      	ldr	r1, [r3, #4]
    dd4a:	f853 2b08 	ldr.w	r2, [r3], #8
    dd4e:	9308      	str	r3, [sp, #32]
    dd50:	2301      	movs	r3, #1
    dd52:	e782      	b.n	dc5a <_svfprintf_r+0x54a>
    dd54:	f899 3000 	ldrb.w	r3, [r9]
    dd58:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    dd5c:	e534      	b.n	d7c8 <_svfprintf_r+0xb8>
    dd5e:	bf00      	nop
    dd60:	20000c10 	.word	0x20000c10
    dd64:	20000570 	.word	0x20000570
    dd68:	20000c18 	.word	0x20000c18
    dd6c:	4649      	mov	r1, r9
    dd6e:	f811 3b01 	ldrb.w	r3, [r1], #1
    dd72:	2b2a      	cmp	r3, #42	; 0x2a
    dd74:	f001 8249 	beq.w	f20a <_svfprintf_r+0x1afa>
    dd78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    dd7c:	2a09      	cmp	r2, #9
    dd7e:	4689      	mov	r9, r1
    dd80:	bf98      	it	ls
    dd82:	2100      	movls	r1, #0
    dd84:	f201 8144 	bhi.w	f010 <_svfprintf_r+0x1900>
    dd88:	f819 3b01 	ldrb.w	r3, [r9], #1
    dd8c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    dd90:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    dd94:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    dd98:	2a09      	cmp	r2, #9
    dd9a:	d9f5      	bls.n	dd88 <_svfprintf_r+0x678>
    dd9c:	9103      	str	r1, [sp, #12]
    dd9e:	e515      	b.n	d7cc <_svfprintf_r+0xbc>
    dda0:	f899 3000 	ldrb.w	r3, [r9]
    dda4:	f048 0801 	orr.w	r8, r8, #1
    dda8:	e50e      	b.n	d7c8 <_svfprintf_r+0xb8>
    ddaa:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    ddae:	2b00      	cmp	r3, #0
    ddb0:	f47f ad8f 	bne.w	d8d2 <_svfprintf_r+0x1c2>
    ddb4:	f899 3000 	ldrb.w	r3, [r9]
    ddb8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    ddbc:	e504      	b.n	d7c8 <_svfprintf_r+0xb8>
    ddbe:	f8cd 8008 	str.w	r8, [sp, #8]
    ddc2:	2b01      	cmp	r3, #1
    ddc4:	f000 819d 	beq.w	e102 <_svfprintf_r+0x9f2>
    ddc8:	2b02      	cmp	r3, #2
    ddca:	ac50      	add	r4, sp, #320	; 0x140
    ddcc:	d120      	bne.n	de10 <_svfprintf_r+0x700>
    ddce:	9811      	ldr	r0, [sp, #68]	; 0x44
    ddd0:	f002 030f 	and.w	r3, r2, #15
    ddd4:	0912      	lsrs	r2, r2, #4
    ddd6:	5cc3      	ldrb	r3, [r0, r3]
    ddd8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    dddc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    dde0:	0909      	lsrs	r1, r1, #4
    dde2:	ea52 0301 	orrs.w	r3, r2, r1
    dde6:	d1f3      	bne.n	ddd0 <_svfprintf_r+0x6c0>
    dde8:	ab50      	add	r3, sp, #320	; 0x140
    ddea:	1b1b      	subs	r3, r3, r4
    ddec:	f8dd 8008 	ldr.w	r8, [sp, #8]
    ddf0:	9305      	str	r3, [sp, #20]
    ddf2:	9a05      	ldr	r2, [sp, #20]
    ddf4:	9803      	ldr	r0, [sp, #12]
    ddf6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ddfa:	4282      	cmp	r2, r0
    ddfc:	f04f 0300 	mov.w	r3, #0
    de00:	bfb8      	it	lt
    de02:	4602      	movlt	r2, r0
    de04:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    de08:	9307      	str	r3, [sp, #28]
    de0a:	9202      	str	r2, [sp, #8]
    de0c:	930f      	str	r3, [sp, #60]	; 0x3c
    de0e:	e660      	b.n	dad2 <_svfprintf_r+0x3c2>
    de10:	f002 0307 	and.w	r3, r2, #7
    de14:	08d2      	lsrs	r2, r2, #3
    de16:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    de1a:	08c9      	lsrs	r1, r1, #3
    de1c:	3330      	adds	r3, #48	; 0x30
    de1e:	ea52 0501 	orrs.w	r5, r2, r1
    de22:	4620      	mov	r0, r4
    de24:	f804 3d01 	strb.w	r3, [r4, #-1]!
    de28:	d1f2      	bne.n	de10 <_svfprintf_r+0x700>
    de2a:	9a02      	ldr	r2, [sp, #8]
    de2c:	07d1      	lsls	r1, r2, #31
    de2e:	f100 824d 	bmi.w	e2cc <_svfprintf_r+0xbbc>
    de32:	ab50      	add	r3, sp, #320	; 0x140
    de34:	1b1b      	subs	r3, r3, r4
    de36:	4690      	mov	r8, r2
    de38:	9305      	str	r3, [sp, #20]
    de3a:	e7da      	b.n	ddf2 <_svfprintf_r+0x6e2>
    de3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de3e:	2b65      	cmp	r3, #101	; 0x65
    de40:	f340 80d4 	ble.w	dfec <_svfprintf_r+0x8dc>
    de44:	eeb5 8b40 	vcmp.f64	d8, #0.0
    de48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    de4c:	f040 81c1 	bne.w	e1d2 <_svfprintf_r+0xac2>
    de50:	9b25      	ldr	r3, [sp, #148]	; 0x94
    de52:	49ba      	ldr	r1, [pc, #744]	; (e13c <_svfprintf_r+0xa2c>)
    de54:	f8ca 1000 	str.w	r1, [sl]
    de58:	3301      	adds	r3, #1
    de5a:	3201      	adds	r2, #1
    de5c:	2101      	movs	r1, #1
    de5e:	2b07      	cmp	r3, #7
    de60:	9226      	str	r2, [sp, #152]	; 0x98
    de62:	9325      	str	r3, [sp, #148]	; 0x94
    de64:	f8ca 1004 	str.w	r1, [sl, #4]
    de68:	f300 8551 	bgt.w	e90e <_svfprintf_r+0x11fe>
    de6c:	f10a 0a08 	add.w	sl, sl, #8
    de70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    de72:	990e      	ldr	r1, [sp, #56]	; 0x38
    de74:	428b      	cmp	r3, r1
    de76:	f280 82d0 	bge.w	e41a <_svfprintf_r+0xd0a>
    de7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    de7c:	9912      	ldr	r1, [sp, #72]	; 0x48
    de7e:	441a      	add	r2, r3
    de80:	e9ca 1300 	strd	r1, r3, [sl]
    de84:	9b25      	ldr	r3, [sp, #148]	; 0x94
    de86:	9226      	str	r2, [sp, #152]	; 0x98
    de88:	3301      	adds	r3, #1
    de8a:	2b07      	cmp	r3, #7
    de8c:	9325      	str	r3, [sp, #148]	; 0x94
    de8e:	f300 8397 	bgt.w	e5c0 <_svfprintf_r+0xeb0>
    de92:	f10a 0a08 	add.w	sl, sl, #8
    de96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de98:	1e5c      	subs	r4, r3, #1
    de9a:	2c00      	cmp	r4, #0
    de9c:	f77f add0 	ble.w	da40 <_svfprintf_r+0x330>
    dea0:	2c10      	cmp	r4, #16
    dea2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dea4:	f340 856e 	ble.w	e984 <_svfprintf_r+0x1274>
    dea8:	ee1b 6a10 	vmov	r6, s22
    deac:	2510      	movs	r5, #16
    deae:	e005      	b.n	debc <_svfprintf_r+0x7ac>
    deb0:	f10a 0a08 	add.w	sl, sl, #8
    deb4:	3c10      	subs	r4, #16
    deb6:	2c10      	cmp	r4, #16
    deb8:	f340 8564 	ble.w	e984 <_svfprintf_r+0x1274>
    debc:	3301      	adds	r3, #1
    debe:	49a0      	ldr	r1, [pc, #640]	; (e140 <_svfprintf_r+0xa30>)
    dec0:	3210      	adds	r2, #16
    dec2:	2b07      	cmp	r3, #7
    dec4:	e9ca 1500 	strd	r1, r5, [sl]
    dec8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    decc:	ddf0      	ble.n	deb0 <_svfprintf_r+0x7a0>
    dece:	aa24      	add	r2, sp, #144	; 0x90
    ded0:	4631      	mov	r1, r6
    ded2:	4658      	mov	r0, fp
    ded4:	f004 faa8 	bl	12428 <__ssprint_r>
    ded8:	2800      	cmp	r0, #0
    deda:	d17e      	bne.n	dfda <_svfprintf_r+0x8ca>
    dedc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dee0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dee4:	e7e6      	b.n	deb4 <_svfprintf_r+0x7a4>
    dee6:	9b06      	ldr	r3, [sp, #24]
    dee8:	9902      	ldr	r1, [sp, #8]
    deea:	1a5d      	subs	r5, r3, r1
    deec:	2d00      	cmp	r5, #0
    deee:	f77f ad8e 	ble.w	da0e <_svfprintf_r+0x2fe>
    def2:	2d10      	cmp	r5, #16
    def4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    def6:	dd21      	ble.n	df3c <_svfprintf_r+0x82c>
    def8:	9409      	str	r4, [sp, #36]	; 0x24
    defa:	2610      	movs	r6, #16
    defc:	ee1b 4a10 	vmov	r4, s22
    df00:	e004      	b.n	df0c <_svfprintf_r+0x7fc>
    df02:	3d10      	subs	r5, #16
    df04:	2d10      	cmp	r5, #16
    df06:	f10a 0a08 	add.w	sl, sl, #8
    df0a:	dd16      	ble.n	df3a <_svfprintf_r+0x82a>
    df0c:	3301      	adds	r3, #1
    df0e:	498c      	ldr	r1, [pc, #560]	; (e140 <_svfprintf_r+0xa30>)
    df10:	3210      	adds	r2, #16
    df12:	2b07      	cmp	r3, #7
    df14:	e9ca 1600 	strd	r1, r6, [sl]
    df18:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    df1c:	ddf1      	ble.n	df02 <_svfprintf_r+0x7f2>
    df1e:	aa24      	add	r2, sp, #144	; 0x90
    df20:	4621      	mov	r1, r4
    df22:	4658      	mov	r0, fp
    df24:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    df28:	f004 fa7e 	bl	12428 <__ssprint_r>
    df2c:	2800      	cmp	r0, #0
    df2e:	d154      	bne.n	dfda <_svfprintf_r+0x8ca>
    df30:	3d10      	subs	r5, #16
    df32:	2d10      	cmp	r5, #16
    df34:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    df38:	dce8      	bgt.n	df0c <_svfprintf_r+0x7fc>
    df3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    df3c:	4980      	ldr	r1, [pc, #512]	; (e140 <_svfprintf_r+0xa30>)
    df3e:	f8ca 5004 	str.w	r5, [sl, #4]
    df42:	3301      	adds	r3, #1
    df44:	442a      	add	r2, r5
    df46:	2b07      	cmp	r3, #7
    df48:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    df4c:	f8ca 1000 	str.w	r1, [sl]
    df50:	f300 8526 	bgt.w	e9a0 <_svfprintf_r+0x1290>
    df54:	9b03      	ldr	r3, [sp, #12]
    df56:	9905      	ldr	r1, [sp, #20]
    df58:	1a5d      	subs	r5, r3, r1
    df5a:	2d00      	cmp	r5, #0
    df5c:	f10a 0a08 	add.w	sl, sl, #8
    df60:	f77f ad5b 	ble.w	da1a <_svfprintf_r+0x30a>
    df64:	2d10      	cmp	r5, #16
    df66:	9b25      	ldr	r3, [sp, #148]	; 0x94
    df68:	dd1f      	ble.n	dfaa <_svfprintf_r+0x89a>
    df6a:	4651      	mov	r1, sl
    df6c:	2610      	movs	r6, #16
    df6e:	ee1b aa10 	vmov	sl, s22
    df72:	e004      	b.n	df7e <_svfprintf_r+0x86e>
    df74:	3d10      	subs	r5, #16
    df76:	2d10      	cmp	r5, #16
    df78:	f101 0108 	add.w	r1, r1, #8
    df7c:	dd14      	ble.n	dfa8 <_svfprintf_r+0x898>
    df7e:	3301      	adds	r3, #1
    df80:	486f      	ldr	r0, [pc, #444]	; (e140 <_svfprintf_r+0xa30>)
    df82:	3210      	adds	r2, #16
    df84:	2b07      	cmp	r3, #7
    df86:	e9c1 0600 	strd	r0, r6, [r1]
    df8a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    df8e:	ddf1      	ble.n	df74 <_svfprintf_r+0x864>
    df90:	aa24      	add	r2, sp, #144	; 0x90
    df92:	4651      	mov	r1, sl
    df94:	4658      	mov	r0, fp
    df96:	f004 fa47 	bl	12428 <__ssprint_r>
    df9a:	b9f0      	cbnz	r0, dfda <_svfprintf_r+0x8ca>
    df9c:	3d10      	subs	r5, #16
    df9e:	2d10      	cmp	r5, #16
    dfa0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dfa4:	a927      	add	r1, sp, #156	; 0x9c
    dfa6:	dcea      	bgt.n	df7e <_svfprintf_r+0x86e>
    dfa8:	468a      	mov	sl, r1
    dfaa:	3301      	adds	r3, #1
    dfac:	4964      	ldr	r1, [pc, #400]	; (e140 <_svfprintf_r+0xa30>)
    dfae:	f8ca 5004 	str.w	r5, [sl, #4]
    dfb2:	442a      	add	r2, r5
    dfb4:	2b07      	cmp	r3, #7
    dfb6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dfba:	f8ca 1000 	str.w	r1, [sl]
    dfbe:	f300 81da 	bgt.w	e376 <_svfprintf_r+0xc66>
    dfc2:	f10a 0a08 	add.w	sl, sl, #8
    dfc6:	e528      	b.n	da1a <_svfprintf_r+0x30a>
    dfc8:	ee1b 1a10 	vmov	r1, s22
    dfcc:	aa24      	add	r2, sp, #144	; 0x90
    dfce:	4658      	mov	r0, fp
    dfd0:	f004 fa2a 	bl	12428 <__ssprint_r>
    dfd4:	2800      	cmp	r0, #0
    dfd6:	f43f ad47 	beq.w	da68 <_svfprintf_r+0x358>
    dfda:	9b07      	ldr	r3, [sp, #28]
    dfdc:	2b00      	cmp	r3, #0
    dfde:	f43f aca2 	beq.w	d926 <_svfprintf_r+0x216>
    dfe2:	9907      	ldr	r1, [sp, #28]
    dfe4:	4658      	mov	r0, fp
    dfe6:	f7fe f91d 	bl	c224 <_free_r>
    dfea:	e49c      	b.n	d926 <_svfprintf_r+0x216>
    dfec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dfee:	2b01      	cmp	r3, #1
    dff0:	f340 817a 	ble.w	e2e8 <_svfprintf_r+0xbd8>
    dff4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dff6:	f8ca 4000 	str.w	r4, [sl]
    dffa:	3301      	adds	r3, #1
    dffc:	3201      	adds	r2, #1
    dffe:	2101      	movs	r1, #1
    e000:	2b07      	cmp	r3, #7
    e002:	9226      	str	r2, [sp, #152]	; 0x98
    e004:	9325      	str	r3, [sp, #148]	; 0x94
    e006:	f8ca 1004 	str.w	r1, [sl, #4]
    e00a:	f300 81f8 	bgt.w	e3fe <_svfprintf_r+0xcee>
    e00e:	f10a 0a08 	add.w	sl, sl, #8
    e012:	9910      	ldr	r1, [sp, #64]	; 0x40
    e014:	9812      	ldr	r0, [sp, #72]	; 0x48
    e016:	3301      	adds	r3, #1
    e018:	440a      	add	r2, r1
    e01a:	2b07      	cmp	r3, #7
    e01c:	e9ca 0100 	strd	r0, r1, [sl]
    e020:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e024:	f300 81dd 	bgt.w	e3e2 <_svfprintf_r+0xcd2>
    e028:	f10a 0a08 	add.w	sl, sl, #8
    e02c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    e030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e034:	f000 8177 	beq.w	e326 <_svfprintf_r+0xc16>
    e038:	990e      	ldr	r1, [sp, #56]	; 0x38
    e03a:	3301      	adds	r3, #1
    e03c:	3901      	subs	r1, #1
    e03e:	3401      	adds	r4, #1
    e040:	440a      	add	r2, r1
    e042:	2b07      	cmp	r3, #7
    e044:	f8ca 4000 	str.w	r4, [sl]
    e048:	9325      	str	r3, [sp, #148]	; 0x94
    e04a:	f8ca 1004 	str.w	r1, [sl, #4]
    e04e:	9226      	str	r2, [sp, #152]	; 0x98
    e050:	f300 815b 	bgt.w	e30a <_svfprintf_r+0xbfa>
    e054:	f10a 0a08 	add.w	sl, sl, #8
    e058:	9914      	ldr	r1, [sp, #80]	; 0x50
    e05a:	f8ca 1004 	str.w	r1, [sl, #4]
    e05e:	3301      	adds	r3, #1
    e060:	440a      	add	r2, r1
    e062:	2b07      	cmp	r3, #7
    e064:	a91e      	add	r1, sp, #120	; 0x78
    e066:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e06a:	f8ca 1000 	str.w	r1, [sl]
    e06e:	f77f ace5 	ble.w	da3c <_svfprintf_r+0x32c>
    e072:	ee1b 1a10 	vmov	r1, s22
    e076:	aa24      	add	r2, sp, #144	; 0x90
    e078:	4658      	mov	r0, fp
    e07a:	f004 f9d5 	bl	12428 <__ssprint_r>
    e07e:	2800      	cmp	r0, #0
    e080:	d1ab      	bne.n	dfda <_svfprintf_r+0x8ca>
    e082:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e084:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e088:	e4da      	b.n	da40 <_svfprintf_r+0x330>
    e08a:	2d10      	cmp	r5, #16
    e08c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    e090:	4e2c      	ldr	r6, [pc, #176]	; (e144 <_svfprintf_r+0xa34>)
    e092:	dd24      	ble.n	e0de <_svfprintf_r+0x9ce>
    e094:	9417      	str	r4, [sp, #92]	; 0x5c
    e096:	2310      	movs	r3, #16
    e098:	ee1b 4a10 	vmov	r4, s22
    e09c:	4608      	mov	r0, r1
    e09e:	e004      	b.n	e0aa <_svfprintf_r+0x99a>
    e0a0:	3d10      	subs	r5, #16
    e0a2:	2d10      	cmp	r5, #16
    e0a4:	f10a 0a08 	add.w	sl, sl, #8
    e0a8:	dd17      	ble.n	e0da <_svfprintf_r+0x9ca>
    e0aa:	3001      	adds	r0, #1
    e0ac:	3210      	adds	r2, #16
    e0ae:	2807      	cmp	r0, #7
    e0b0:	e9ca 6300 	strd	r6, r3, [sl]
    e0b4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    e0b8:	ddf2      	ble.n	e0a0 <_svfprintf_r+0x990>
    e0ba:	aa24      	add	r2, sp, #144	; 0x90
    e0bc:	4621      	mov	r1, r4
    e0be:	4658      	mov	r0, fp
    e0c0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0c4:	f004 f9b0 	bl	12428 <__ssprint_r>
    e0c8:	2800      	cmp	r0, #0
    e0ca:	d186      	bne.n	dfda <_svfprintf_r+0x8ca>
    e0cc:	3d10      	subs	r5, #16
    e0ce:	2d10      	cmp	r5, #16
    e0d0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    e0d4:	f04f 0310 	mov.w	r3, #16
    e0d8:	dce7      	bgt.n	e0aa <_svfprintf_r+0x99a>
    e0da:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    e0dc:	4601      	mov	r1, r0
    e0de:	3101      	adds	r1, #1
    e0e0:	442a      	add	r2, r5
    e0e2:	2907      	cmp	r1, #7
    e0e4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    e0e8:	f8ca 6000 	str.w	r6, [sl]
    e0ec:	f8ca 5004 	str.w	r5, [sl, #4]
    e0f0:	f300 83bd 	bgt.w	e86e <_svfprintf_r+0x115e>
    e0f4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e0f8:	f10a 0a08 	add.w	sl, sl, #8
    e0fc:	e45d      	b.n	d9ba <_svfprintf_r+0x2aa>
    e0fe:	f8cd 8008 	str.w	r8, [sp, #8]
    e102:	2a0a      	cmp	r2, #10
    e104:	f171 0300 	sbcs.w	r3, r1, #0
    e108:	f080 8345 	bcs.w	e796 <_svfprintf_r+0x1086>
    e10c:	3230      	adds	r2, #48	; 0x30
    e10e:	2301      	movs	r3, #1
    e110:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e114:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    e118:	9305      	str	r3, [sp, #20]
    e11a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    e11e:	e668      	b.n	ddf2 <_svfprintf_r+0x6e2>
    e120:	ee1b 1a10 	vmov	r1, s22
    e124:	aa24      	add	r2, sp, #144	; 0x90
    e126:	4658      	mov	r0, fp
    e128:	f004 f97e 	bl	12428 <__ssprint_r>
    e12c:	2800      	cmp	r0, #0
    e12e:	f47f af54 	bne.w	dfda <_svfprintf_r+0x8ca>
    e132:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e134:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e138:	e452      	b.n	d9e0 <_svfprintf_r+0x2d0>
    e13a:	bf00      	nop
    e13c:	20000c48 	.word	0x20000c48
    e140:	2000845c 	.word	0x2000845c
    e144:	200026c4 	.word	0x200026c4
    e148:	ee1b 1a10 	vmov	r1, s22
    e14c:	aa24      	add	r2, sp, #144	; 0x90
    e14e:	4658      	mov	r0, fp
    e150:	f004 f96a 	bl	12428 <__ssprint_r>
    e154:	2800      	cmp	r0, #0
    e156:	f47f af40 	bne.w	dfda <_svfprintf_r+0x8ca>
    e15a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e15c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e160:	e451      	b.n	da06 <_svfprintf_r+0x2f6>
    e162:	2c10      	cmp	r4, #16
    e164:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e166:	4ebe      	ldr	r6, [pc, #760]	; (e460 <_svfprintf_r+0xd50>)
    e168:	dd1f      	ble.n	e1aa <_svfprintf_r+0xa9a>
    e16a:	ee1b 8a10 	vmov	r8, s22
    e16e:	2510      	movs	r5, #16
    e170:	e004      	b.n	e17c <_svfprintf_r+0xa6c>
    e172:	3c10      	subs	r4, #16
    e174:	2c10      	cmp	r4, #16
    e176:	f10a 0a08 	add.w	sl, sl, #8
    e17a:	dd16      	ble.n	e1aa <_svfprintf_r+0xa9a>
    e17c:	3301      	adds	r3, #1
    e17e:	3210      	adds	r2, #16
    e180:	2b07      	cmp	r3, #7
    e182:	e9ca 6500 	strd	r6, r5, [sl]
    e186:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e18a:	ddf2      	ble.n	e172 <_svfprintf_r+0xa62>
    e18c:	aa24      	add	r2, sp, #144	; 0x90
    e18e:	4641      	mov	r1, r8
    e190:	4658      	mov	r0, fp
    e192:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e196:	f004 f947 	bl	12428 <__ssprint_r>
    e19a:	2800      	cmp	r0, #0
    e19c:	f47f af1d 	bne.w	dfda <_svfprintf_r+0x8ca>
    e1a0:	3c10      	subs	r4, #16
    e1a2:	2c10      	cmp	r4, #16
    e1a4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e1a8:	dce8      	bgt.n	e17c <_svfprintf_r+0xa6c>
    e1aa:	3301      	adds	r3, #1
    e1ac:	4422      	add	r2, r4
    e1ae:	2b07      	cmp	r3, #7
    e1b0:	e9ca 6400 	strd	r6, r4, [sl]
    e1b4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e1b8:	f77f ac4b 	ble.w	da52 <_svfprintf_r+0x342>
    e1bc:	ee1b 1a10 	vmov	r1, s22
    e1c0:	aa24      	add	r2, sp, #144	; 0x90
    e1c2:	4658      	mov	r0, fp
    e1c4:	f004 f930 	bl	12428 <__ssprint_r>
    e1c8:	2800      	cmp	r0, #0
    e1ca:	f47f af06 	bne.w	dfda <_svfprintf_r+0x8ca>
    e1ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e1d0:	e43f      	b.n	da52 <_svfprintf_r+0x342>
    e1d2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e1d4:	2900      	cmp	r1, #0
    e1d6:	f340 835a 	ble.w	e88e <_svfprintf_r+0x117e>
    e1da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e1dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e1de:	429e      	cmp	r6, r3
    e1e0:	bfa8      	it	ge
    e1e2:	461e      	movge	r6, r3
    e1e4:	2e00      	cmp	r6, #0
    e1e6:	dd0b      	ble.n	e200 <_svfprintf_r+0xaf0>
    e1e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e1ea:	3301      	adds	r3, #1
    e1ec:	4432      	add	r2, r6
    e1ee:	2b07      	cmp	r3, #7
    e1f0:	e9ca 4600 	strd	r4, r6, [sl]
    e1f4:	9226      	str	r2, [sp, #152]	; 0x98
    e1f6:	9325      	str	r3, [sp, #148]	; 0x94
    e1f8:	f300 8689 	bgt.w	ef0e <_svfprintf_r+0x17fe>
    e1fc:	f10a 0a08 	add.w	sl, sl, #8
    e200:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e202:	2e00      	cmp	r6, #0
    e204:	bfa8      	it	ge
    e206:	1bad      	subge	r5, r5, r6
    e208:	2d00      	cmp	r5, #0
    e20a:	f300 8203 	bgt.w	e614 <_svfprintf_r+0xf04>
    e20e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e210:	f418 6f80 	tst.w	r8, #1024	; 0x400
    e214:	4423      	add	r3, r4
    e216:	9305      	str	r3, [sp, #20]
    e218:	f040 821f 	bne.w	e65a <_svfprintf_r+0xf4a>
    e21c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e21e:	990e      	ldr	r1, [sp, #56]	; 0x38
    e220:	428b      	cmp	r3, r1
    e222:	db03      	blt.n	e22c <_svfprintf_r+0xb1c>
    e224:	f018 0f01 	tst.w	r8, #1
    e228:	f000 84cf 	beq.w	ebca <_svfprintf_r+0x14ba>
    e22c:	9910      	ldr	r1, [sp, #64]	; 0x40
    e22e:	9812      	ldr	r0, [sp, #72]	; 0x48
    e230:	440a      	add	r2, r1
    e232:	e9ca 0100 	strd	r0, r1, [sl]
    e236:	9925      	ldr	r1, [sp, #148]	; 0x94
    e238:	9226      	str	r2, [sp, #152]	; 0x98
    e23a:	3101      	adds	r1, #1
    e23c:	2907      	cmp	r1, #7
    e23e:	9125      	str	r1, [sp, #148]	; 0x94
    e240:	f300 86a5 	bgt.w	ef8e <_svfprintf_r+0x187e>
    e244:	f10a 0a08 	add.w	sl, sl, #8
    e248:	990e      	ldr	r1, [sp, #56]	; 0x38
    e24a:	1865      	adds	r5, r4, r1
    e24c:	1acc      	subs	r4, r1, r3
    e24e:	9b05      	ldr	r3, [sp, #20]
    e250:	1aed      	subs	r5, r5, r3
    e252:	42a5      	cmp	r5, r4
    e254:	bfa8      	it	ge
    e256:	4625      	movge	r5, r4
    e258:	2d00      	cmp	r5, #0
    e25a:	dd0d      	ble.n	e278 <_svfprintf_r+0xb68>
    e25c:	f8ca 3000 	str.w	r3, [sl]
    e260:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e262:	f8ca 5004 	str.w	r5, [sl, #4]
    e266:	3301      	adds	r3, #1
    e268:	442a      	add	r2, r5
    e26a:	2b07      	cmp	r3, #7
    e26c:	9226      	str	r2, [sp, #152]	; 0x98
    e26e:	9325      	str	r3, [sp, #148]	; 0x94
    e270:	f300 86bb 	bgt.w	efea <_svfprintf_r+0x18da>
    e274:	f10a 0a08 	add.w	sl, sl, #8
    e278:	2d00      	cmp	r5, #0
    e27a:	bfa8      	it	ge
    e27c:	1b64      	subge	r4, r4, r5
    e27e:	2c00      	cmp	r4, #0
    e280:	f77f abde 	ble.w	da40 <_svfprintf_r+0x330>
    e284:	2c10      	cmp	r4, #16
    e286:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e288:	f340 837c 	ble.w	e984 <_svfprintf_r+0x1274>
    e28c:	ee1b 6a10 	vmov	r6, s22
    e290:	2510      	movs	r5, #16
    e292:	e005      	b.n	e2a0 <_svfprintf_r+0xb90>
    e294:	f10a 0a08 	add.w	sl, sl, #8
    e298:	3c10      	subs	r4, #16
    e29a:	2c10      	cmp	r4, #16
    e29c:	f340 8372 	ble.w	e984 <_svfprintf_r+0x1274>
    e2a0:	3301      	adds	r3, #1
    e2a2:	4970      	ldr	r1, [pc, #448]	; (e464 <_svfprintf_r+0xd54>)
    e2a4:	3210      	adds	r2, #16
    e2a6:	2b07      	cmp	r3, #7
    e2a8:	e9ca 1500 	strd	r1, r5, [sl]
    e2ac:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e2b0:	ddf0      	ble.n	e294 <_svfprintf_r+0xb84>
    e2b2:	aa24      	add	r2, sp, #144	; 0x90
    e2b4:	4631      	mov	r1, r6
    e2b6:	4658      	mov	r0, fp
    e2b8:	f004 f8b6 	bl	12428 <__ssprint_r>
    e2bc:	2800      	cmp	r0, #0
    e2be:	f47f ae8c 	bne.w	dfda <_svfprintf_r+0x8ca>
    e2c2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e2c6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e2ca:	e7e5      	b.n	e298 <_svfprintf_r+0xb88>
    e2cc:	2b30      	cmp	r3, #48	; 0x30
    e2ce:	f43f ad8b 	beq.w	dde8 <_svfprintf_r+0x6d8>
    e2d2:	2330      	movs	r3, #48	; 0x30
    e2d4:	3802      	subs	r0, #2
    e2d6:	f804 3c01 	strb.w	r3, [r4, #-1]
    e2da:	ab50      	add	r3, sp, #320	; 0x140
    e2dc:	1a1b      	subs	r3, r3, r0
    e2de:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e2e2:	9305      	str	r3, [sp, #20]
    e2e4:	4604      	mov	r4, r0
    e2e6:	e584      	b.n	ddf2 <_svfprintf_r+0x6e2>
    e2e8:	f018 0f01 	tst.w	r8, #1
    e2ec:	f47f ae82 	bne.w	dff4 <_svfprintf_r+0x8e4>
    e2f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e2f2:	f8ca 4000 	str.w	r4, [sl]
    e2f6:	3301      	adds	r3, #1
    e2f8:	3201      	adds	r2, #1
    e2fa:	2101      	movs	r1, #1
    e2fc:	2b07      	cmp	r3, #7
    e2fe:	9226      	str	r2, [sp, #152]	; 0x98
    e300:	9325      	str	r3, [sp, #148]	; 0x94
    e302:	f8ca 1004 	str.w	r1, [sl, #4]
    e306:	f77f aea5 	ble.w	e054 <_svfprintf_r+0x944>
    e30a:	ee1b 1a10 	vmov	r1, s22
    e30e:	aa24      	add	r2, sp, #144	; 0x90
    e310:	4658      	mov	r0, fp
    e312:	f004 f889 	bl	12428 <__ssprint_r>
    e316:	2800      	cmp	r0, #0
    e318:	f47f ae5f 	bne.w	dfda <_svfprintf_r+0x8ca>
    e31c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e320:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e324:	e698      	b.n	e058 <_svfprintf_r+0x948>
    e326:	990e      	ldr	r1, [sp, #56]	; 0x38
    e328:	1e4c      	subs	r4, r1, #1
    e32a:	2c00      	cmp	r4, #0
    e32c:	f77f ae94 	ble.w	e058 <_svfprintf_r+0x948>
    e330:	2c10      	cmp	r4, #16
    e332:	f340 8361 	ble.w	e9f8 <_svfprintf_r+0x12e8>
    e336:	ee1b 6a10 	vmov	r6, s22
    e33a:	2510      	movs	r5, #16
    e33c:	e005      	b.n	e34a <_svfprintf_r+0xc3a>
    e33e:	f10a 0a08 	add.w	sl, sl, #8
    e342:	3c10      	subs	r4, #16
    e344:	2c10      	cmp	r4, #16
    e346:	f340 8357 	ble.w	e9f8 <_svfprintf_r+0x12e8>
    e34a:	3301      	adds	r3, #1
    e34c:	4945      	ldr	r1, [pc, #276]	; (e464 <_svfprintf_r+0xd54>)
    e34e:	3210      	adds	r2, #16
    e350:	2b07      	cmp	r3, #7
    e352:	e9ca 1500 	strd	r1, r5, [sl]
    e356:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e35a:	ddf0      	ble.n	e33e <_svfprintf_r+0xc2e>
    e35c:	aa24      	add	r2, sp, #144	; 0x90
    e35e:	4631      	mov	r1, r6
    e360:	4658      	mov	r0, fp
    e362:	f004 f861 	bl	12428 <__ssprint_r>
    e366:	2800      	cmp	r0, #0
    e368:	f47f ae37 	bne.w	dfda <_svfprintf_r+0x8ca>
    e36c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e370:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e374:	e7e5      	b.n	e342 <_svfprintf_r+0xc32>
    e376:	ee1b 1a10 	vmov	r1, s22
    e37a:	aa24      	add	r2, sp, #144	; 0x90
    e37c:	4658      	mov	r0, fp
    e37e:	f004 f853 	bl	12428 <__ssprint_r>
    e382:	2800      	cmp	r0, #0
    e384:	f47f ae29 	bne.w	dfda <_svfprintf_r+0x8ca>
    e388:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e38a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e38e:	f7ff bb44 	b.w	da1a <_svfprintf_r+0x30a>
    e392:	9b02      	ldr	r3, [sp, #8]
    e394:	f013 0310 	ands.w	r3, r3, #16
    e398:	f040 80c1 	bne.w	e51e <_svfprintf_r+0xe0e>
    e39c:	9a02      	ldr	r2, [sp, #8]
    e39e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    e3a2:	f000 837a 	beq.w	ea9a <_svfprintf_r+0x138a>
    e3a6:	9808      	ldr	r0, [sp, #32]
    e3a8:	f850 2b04 	ldr.w	r2, [r0], #4
    e3ac:	9008      	str	r0, [sp, #32]
    e3ae:	4619      	mov	r1, r3
    e3b0:	b292      	uxth	r2, r2
    e3b2:	2301      	movs	r3, #1
    e3b4:	e451      	b.n	dc5a <_svfprintf_r+0x54a>
    e3b6:	f018 0310 	ands.w	r3, r8, #16
    e3ba:	d155      	bne.n	e468 <_svfprintf_r+0xd58>
    e3bc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e3c0:	f000 835d 	beq.w	ea7e <_svfprintf_r+0x136e>
    e3c4:	9808      	ldr	r0, [sp, #32]
    e3c6:	f850 2b04 	ldr.w	r2, [r0], #4
    e3ca:	9008      	str	r0, [sp, #32]
    e3cc:	4619      	mov	r1, r3
    e3ce:	b292      	uxth	r2, r2
    e3d0:	e4a8      	b.n	dd24 <_svfprintf_r+0x614>
    e3d2:	4252      	negs	r2, r2
    e3d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e3d8:	f8cd 8008 	str.w	r8, [sp, #8]
    e3dc:	202d      	movs	r0, #45	; 0x2d
    e3de:	2301      	movs	r3, #1
    e3e0:	e43c      	b.n	dc5c <_svfprintf_r+0x54c>
    e3e2:	ee1b 1a10 	vmov	r1, s22
    e3e6:	aa24      	add	r2, sp, #144	; 0x90
    e3e8:	4658      	mov	r0, fp
    e3ea:	f004 f81d 	bl	12428 <__ssprint_r>
    e3ee:	2800      	cmp	r0, #0
    e3f0:	f47f adf3 	bne.w	dfda <_svfprintf_r+0x8ca>
    e3f4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e3f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e3fc:	e616      	b.n	e02c <_svfprintf_r+0x91c>
    e3fe:	ee1b 1a10 	vmov	r1, s22
    e402:	aa24      	add	r2, sp, #144	; 0x90
    e404:	4658      	mov	r0, fp
    e406:	f004 f80f 	bl	12428 <__ssprint_r>
    e40a:	2800      	cmp	r0, #0
    e40c:	f47f ade5 	bne.w	dfda <_svfprintf_r+0x8ca>
    e410:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e414:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e418:	e5fb      	b.n	e012 <_svfprintf_r+0x902>
    e41a:	f018 0f01 	tst.w	r8, #1
    e41e:	f43f ab0f 	beq.w	da40 <_svfprintf_r+0x330>
    e422:	e52a      	b.n	de7a <_svfprintf_r+0x76a>
    e424:	9308      	str	r3, [sp, #32]
    e426:	f899 3000 	ldrb.w	r3, [r9]
    e42a:	f7ff b9cd 	b.w	d7c8 <_svfprintf_r+0xb8>
    e42e:	ac50      	add	r4, sp, #320	; 0x140
    e430:	e4df      	b.n	ddf2 <_svfprintf_r+0x6e2>
    e432:	f418 7f00 	tst.w	r8, #512	; 0x200
    e436:	f040 83db 	bne.w	ebf0 <_svfprintf_r+0x14e0>
    e43a:	f853 2b04 	ldr.w	r2, [r3], #4
    e43e:	9308      	str	r3, [sp, #32]
    e440:	17d1      	asrs	r1, r2, #31
    e442:	460b      	mov	r3, r1
    e444:	f7ff bbb6 	b.w	dbb4 <_svfprintf_r+0x4a4>
    e448:	9b08      	ldr	r3, [sp, #32]
    e44a:	9804      	ldr	r0, [sp, #16]
    e44c:	f853 1b04 	ldr.w	r1, [r3], #4
    e450:	9308      	str	r3, [sp, #32]
    e452:	17c2      	asrs	r2, r0, #31
    e454:	e9c1 0200 	strd	r0, r2, [r1]
    e458:	464c      	mov	r4, r9
    e45a:	f7ff b98b 	b.w	d774 <_svfprintf_r+0x64>
    e45e:	bf00      	nop
    e460:	200026c4 	.word	0x200026c4
    e464:	2000845c 	.word	0x2000845c
    e468:	9b08      	ldr	r3, [sp, #32]
    e46a:	f853 2b04 	ldr.w	r2, [r3], #4
    e46e:	9308      	str	r3, [sp, #32]
    e470:	e458      	b.n	dd24 <_svfprintf_r+0x614>
    e472:	eeb4 8b48 	vcmp.f64	d8, d8
    e476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e47a:	f180 8694 	bvs.w	f1a6 <_svfprintf_r+0x1a96>
    e47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e480:	2b61      	cmp	r3, #97	; 0x61
    e482:	f000 8552 	beq.w	ef2a <_svfprintf_r+0x181a>
    e486:	2b41      	cmp	r3, #65	; 0x41
    e488:	f000 85c0 	beq.w	f00c <_svfprintf_r+0x18fc>
    e48c:	9b03      	ldr	r3, [sp, #12]
    e48e:	3301      	adds	r3, #1
    e490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e492:	f023 0520 	bic.w	r5, r3, #32
    e496:	f000 8480 	beq.w	ed9a <_svfprintf_r+0x168a>
    e49a:	2d47      	cmp	r5, #71	; 0x47
    e49c:	d104      	bne.n	e4a8 <_svfprintf_r+0xd98>
    e49e:	9b03      	ldr	r3, [sp, #12]
    e4a0:	2b00      	cmp	r3, #0
    e4a2:	bf08      	it	eq
    e4a4:	2301      	moveq	r3, #1
    e4a6:	9303      	str	r3, [sp, #12]
    e4a8:	ee18 3a90 	vmov	r3, s17
    e4ac:	2b00      	cmp	r3, #0
    e4ae:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    e4b2:	4646      	mov	r6, r8
    e4b4:	f2c0 8618 	blt.w	f0e8 <_svfprintf_r+0x19d8>
    e4b8:	eeb0 ab48 	vmov.f64	d10, d8
    e4bc:	2300      	movs	r3, #0
    e4be:	4690      	mov	r8, r2
    e4c0:	9309      	str	r3, [sp, #36]	; 0x24
    e4c2:	9307      	str	r3, [sp, #28]
    e4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e4c6:	3b41      	subs	r3, #65	; 0x41
    e4c8:	2b25      	cmp	r3, #37	; 0x25
    e4ca:	f200 8398 	bhi.w	ebfe <_svfprintf_r+0x14ee>
    e4ce:	e8df f013 	tbh	[pc, r3, lsl #1]
    e4d2:	046f      	.short	0x046f
    e4d4:	03960396 	.word	0x03960396
    e4d8:	04680396 	.word	0x04680396
    e4dc:	0396046c 	.word	0x0396046c
    e4e0:	03960396 	.word	0x03960396
    e4e4:	03960396 	.word	0x03960396
    e4e8:	03960396 	.word	0x03960396
    e4ec:	03960396 	.word	0x03960396
    e4f0:	03960396 	.word	0x03960396
    e4f4:	03960396 	.word	0x03960396
    e4f8:	03960396 	.word	0x03960396
    e4fc:	03960396 	.word	0x03960396
    e500:	03960396 	.word	0x03960396
    e504:	03960396 	.word	0x03960396
    e508:	03960396 	.word	0x03960396
    e50c:	03960396 	.word	0x03960396
    e510:	03960396 	.word	0x03960396
    e514:	03960396 	.word	0x03960396
    e518:	04680396 	.word	0x04680396
    e51c:	046c      	.short	0x046c
    e51e:	9b08      	ldr	r3, [sp, #32]
    e520:	f853 2b04 	ldr.w	r2, [r3], #4
    e524:	9308      	str	r3, [sp, #32]
    e526:	2301      	movs	r3, #1
    e528:	f7ff bb97 	b.w	dc5a <_svfprintf_r+0x54a>
    e52c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e52e:	2b00      	cmp	r3, #0
    e530:	f43f a9cf 	beq.w	d8d2 <_svfprintf_r+0x1c2>
    e534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e536:	781b      	ldrb	r3, [r3, #0]
    e538:	2b00      	cmp	r3, #0
    e53a:	f43f a9ca 	beq.w	d8d2 <_svfprintf_r+0x1c2>
    e53e:	f899 3000 	ldrb.w	r3, [r9]
    e542:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    e546:	f7ff b93f 	b.w	d7c8 <_svfprintf_r+0xb8>
    e54a:	930b      	str	r3, [sp, #44]	; 0x2c
    e54c:	f8cd 8008 	str.w	r8, [sp, #8]
    e550:	f7ff bbf1 	b.w	dd36 <_svfprintf_r+0x626>
    e554:	930b      	str	r3, [sp, #44]	; 0x2c
    e556:	4b9a      	ldr	r3, [pc, #616]	; (e7c0 <_svfprintf_r+0x10b0>)
    e558:	9311      	str	r3, [sp, #68]	; 0x44
    e55a:	f018 0120 	ands.w	r1, r8, #32
    e55e:	f000 8105 	beq.w	e76c <_svfprintf_r+0x105c>
    e562:	9b08      	ldr	r3, [sp, #32]
    e564:	3307      	adds	r3, #7
    e566:	f023 0307 	bic.w	r3, r3, #7
    e56a:	6859      	ldr	r1, [r3, #4]
    e56c:	f853 2b08 	ldr.w	r2, [r3], #8
    e570:	9308      	str	r3, [sp, #32]
    e572:	f018 0f01 	tst.w	r8, #1
    e576:	d00a      	beq.n	e58e <_svfprintf_r+0xe7e>
    e578:	ea52 0301 	orrs.w	r3, r2, r1
    e57c:	d007      	beq.n	e58e <_svfprintf_r+0xe7e>
    e57e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e580:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    e584:	2330      	movs	r3, #48	; 0x30
    e586:	f048 0802 	orr.w	r8, r8, #2
    e58a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    e58e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    e592:	9302      	str	r3, [sp, #8]
    e594:	2302      	movs	r3, #2
    e596:	f7ff bb60 	b.w	dc5a <_svfprintf_r+0x54a>
    e59a:	930b      	str	r3, [sp, #44]	; 0x2c
    e59c:	f7ff bbb6 	b.w	dd0c <_svfprintf_r+0x5fc>
    e5a0:	930b      	str	r3, [sp, #44]	; 0x2c
    e5a2:	4b88      	ldr	r3, [pc, #544]	; (e7c4 <_svfprintf_r+0x10b4>)
    e5a4:	9311      	str	r3, [sp, #68]	; 0x44
    e5a6:	e7d8      	b.n	e55a <_svfprintf_r+0xe4a>
    e5a8:	9b08      	ldr	r3, [sp, #32]
    e5aa:	2101      	movs	r1, #1
    e5ac:	f853 2b04 	ldr.w	r2, [r3], #4
    e5b0:	9102      	str	r1, [sp, #8]
    e5b2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    e5b6:	9308      	str	r3, [sp, #32]
    e5b8:	9105      	str	r1, [sp, #20]
    e5ba:	ac37      	add	r4, sp, #220	; 0xdc
    e5bc:	f7ff baaf 	b.w	db1e <_svfprintf_r+0x40e>
    e5c0:	ee1b 1a10 	vmov	r1, s22
    e5c4:	aa24      	add	r2, sp, #144	; 0x90
    e5c6:	4658      	mov	r0, fp
    e5c8:	f003 ff2e 	bl	12428 <__ssprint_r>
    e5cc:	2800      	cmp	r0, #0
    e5ce:	f47f ad04 	bne.w	dfda <_svfprintf_r+0x8ca>
    e5d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e5d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e5d8:	e45d      	b.n	de96 <_svfprintf_r+0x786>
    e5da:	9b03      	ldr	r3, [sp, #12]
    e5dc:	9407      	str	r4, [sp, #28]
    e5de:	2b06      	cmp	r3, #6
    e5e0:	4622      	mov	r2, r4
    e5e2:	bf28      	it	cs
    e5e4:	2306      	movcs	r3, #6
    e5e6:	9403      	str	r4, [sp, #12]
    e5e8:	4621      	mov	r1, r4
    e5ea:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    e5ee:	4c76      	ldr	r4, [pc, #472]	; (e7c8 <_svfprintf_r+0x10b8>)
    e5f0:	9302      	str	r3, [sp, #8]
    e5f2:	9305      	str	r3, [sp, #20]
    e5f4:	920f      	str	r2, [sp, #60]	; 0x3c
    e5f6:	f7ff ba6c 	b.w	dad2 <_svfprintf_r+0x3c2>
    e5fa:	2140      	movs	r1, #64	; 0x40
    e5fc:	4658      	mov	r0, fp
    e5fe:	f7fb fa3d 	bl	9a7c <_malloc_r>
    e602:	6020      	str	r0, [r4, #0]
    e604:	6120      	str	r0, [r4, #16]
    e606:	2800      	cmp	r0, #0
    e608:	f000 860f 	beq.w	f22a <_svfprintf_r+0x1b1a>
    e60c:	2340      	movs	r3, #64	; 0x40
    e60e:	6163      	str	r3, [r4, #20]
    e610:	f7ff b89e 	b.w	d750 <_svfprintf_r+0x40>
    e614:	2d10      	cmp	r5, #16
    e616:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e618:	f340 825d 	ble.w	ead6 <_svfprintf_r+0x13c6>
    e61c:	4651      	mov	r1, sl
    e61e:	2610      	movs	r6, #16
    e620:	ee1b aa10 	vmov	sl, s22
    e624:	e004      	b.n	e630 <_svfprintf_r+0xf20>
    e626:	3108      	adds	r1, #8
    e628:	3d10      	subs	r5, #16
    e62a:	2d10      	cmp	r5, #16
    e62c:	f340 8252 	ble.w	ead4 <_svfprintf_r+0x13c4>
    e630:	3301      	adds	r3, #1
    e632:	4866      	ldr	r0, [pc, #408]	; (e7cc <_svfprintf_r+0x10bc>)
    e634:	3210      	adds	r2, #16
    e636:	2b07      	cmp	r3, #7
    e638:	e9c1 0600 	strd	r0, r6, [r1]
    e63c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e640:	ddf1      	ble.n	e626 <_svfprintf_r+0xf16>
    e642:	aa24      	add	r2, sp, #144	; 0x90
    e644:	4651      	mov	r1, sl
    e646:	4658      	mov	r0, fp
    e648:	f003 feee 	bl	12428 <__ssprint_r>
    e64c:	2800      	cmp	r0, #0
    e64e:	f47f acc4 	bne.w	dfda <_svfprintf_r+0x8ca>
    e652:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e656:	a927      	add	r1, sp, #156	; 0x9c
    e658:	e7e6      	b.n	e628 <_svfprintf_r+0xf18>
    e65a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e65c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    e660:	18e3      	adds	r3, r4, r3
    e662:	9303      	str	r3, [sp, #12]
    e664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e666:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    e66a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    e66c:	9d05      	ldr	r5, [sp, #20]
    e66e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    e672:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    e676:	940b      	str	r4, [sp, #44]	; 0x2c
    e678:	ee1b 1a10 	vmov	r1, s22
    e67c:	4650      	mov	r0, sl
    e67e:	2b00      	cmp	r3, #0
    e680:	d034      	beq.n	e6ec <_svfprintf_r+0xfdc>
    e682:	f1b8 0f00 	cmp.w	r8, #0
    e686:	d135      	bne.n	e6f4 <_svfprintf_r+0xfe4>
    e688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e68a:	3b01      	subs	r3, #1
    e68c:	3e01      	subs	r6, #1
    e68e:	930d      	str	r3, [sp, #52]	; 0x34
    e690:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e692:	e9c0 3900 	strd	r3, r9, [r0]
    e696:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e698:	3301      	adds	r3, #1
    e69a:	444a      	add	r2, r9
    e69c:	2b07      	cmp	r3, #7
    e69e:	9226      	str	r2, [sp, #152]	; 0x98
    e6a0:	9325      	str	r3, [sp, #148]	; 0x94
    e6a2:	dc6c      	bgt.n	e77e <_svfprintf_r+0x106e>
    e6a4:	3008      	adds	r0, #8
    e6a6:	9b03      	ldr	r3, [sp, #12]
    e6a8:	f896 c000 	ldrb.w	ip, [r6]
    e6ac:	1b5b      	subs	r3, r3, r5
    e6ae:	4563      	cmp	r3, ip
    e6b0:	bfa8      	it	ge
    e6b2:	4663      	movge	r3, ip
    e6b4:	2b00      	cmp	r3, #0
    e6b6:	469a      	mov	sl, r3
    e6b8:	dd0c      	ble.n	e6d4 <_svfprintf_r+0xfc4>
    e6ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e6bc:	3401      	adds	r4, #1
    e6be:	441a      	add	r2, r3
    e6c0:	2c07      	cmp	r4, #7
    e6c2:	e9c0 5300 	strd	r5, r3, [r0]
    e6c6:	9226      	str	r2, [sp, #152]	; 0x98
    e6c8:	9425      	str	r4, [sp, #148]	; 0x94
    e6ca:	f300 8177 	bgt.w	e9bc <_svfprintf_r+0x12ac>
    e6ce:	f896 c000 	ldrb.w	ip, [r6]
    e6d2:	3008      	adds	r0, #8
    e6d4:	f1ba 0f00 	cmp.w	sl, #0
    e6d8:	bfac      	ite	ge
    e6da:	ebac 040a 	subge.w	r4, ip, sl
    e6de:	4664      	movlt	r4, ip
    e6e0:	2c00      	cmp	r4, #0
    e6e2:	dc0a      	bgt.n	e6fa <_svfprintf_r+0xfea>
    e6e4:	4465      	add	r5, ip
    e6e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e6e8:	2b00      	cmp	r3, #0
    e6ea:	d1ca      	bne.n	e682 <_svfprintf_r+0xf72>
    e6ec:	f1b8 0f00 	cmp.w	r8, #0
    e6f0:	f000 83ac 	beq.w	ee4c <_svfprintf_r+0x173c>
    e6f4:	f108 38ff 	add.w	r8, r8, #4294967295
    e6f8:	e7ca      	b.n	e690 <_svfprintf_r+0xf80>
    e6fa:	2c10      	cmp	r4, #16
    e6fc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    e700:	dd24      	ble.n	e74c <_svfprintf_r+0x103c>
    e702:	9505      	str	r5, [sp, #20]
    e704:	f04f 0a10 	mov.w	sl, #16
    e708:	4663      	mov	r3, ip
    e70a:	460d      	mov	r5, r1
    e70c:	e004      	b.n	e718 <_svfprintf_r+0x1008>
    e70e:	3c10      	subs	r4, #16
    e710:	2c10      	cmp	r4, #16
    e712:	f100 0008 	add.w	r0, r0, #8
    e716:	dd16      	ble.n	e746 <_svfprintf_r+0x1036>
    e718:	3301      	adds	r3, #1
    e71a:	492c      	ldr	r1, [pc, #176]	; (e7cc <_svfprintf_r+0x10bc>)
    e71c:	3210      	adds	r2, #16
    e71e:	2b07      	cmp	r3, #7
    e720:	e9c0 1a00 	strd	r1, sl, [r0]
    e724:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e728:	ddf1      	ble.n	e70e <_svfprintf_r+0xffe>
    e72a:	aa24      	add	r2, sp, #144	; 0x90
    e72c:	4629      	mov	r1, r5
    e72e:	4658      	mov	r0, fp
    e730:	f003 fe7a 	bl	12428 <__ssprint_r>
    e734:	2800      	cmp	r0, #0
    e736:	f47f ac50 	bne.w	dfda <_svfprintf_r+0x8ca>
    e73a:	3c10      	subs	r4, #16
    e73c:	2c10      	cmp	r4, #16
    e73e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e742:	a827      	add	r0, sp, #156	; 0x9c
    e744:	dce8      	bgt.n	e718 <_svfprintf_r+0x1008>
    e746:	4629      	mov	r1, r5
    e748:	9d05      	ldr	r5, [sp, #20]
    e74a:	469c      	mov	ip, r3
    e74c:	f10c 0301 	add.w	r3, ip, #1
    e750:	4422      	add	r2, r4
    e752:	6044      	str	r4, [r0, #4]
    e754:	2b07      	cmp	r3, #7
    e756:	4c1d      	ldr	r4, [pc, #116]	; (e7cc <_svfprintf_r+0x10bc>)
    e758:	6004      	str	r4, [r0, #0]
    e75a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e75e:	f300 83c6 	bgt.w	eeee <_svfprintf_r+0x17de>
    e762:	f896 c000 	ldrb.w	ip, [r6]
    e766:	3008      	adds	r0, #8
    e768:	4465      	add	r5, ip
    e76a:	e7bc      	b.n	e6e6 <_svfprintf_r+0xfd6>
    e76c:	f018 0310 	ands.w	r3, r8, #16
    e770:	f000 80c2 	beq.w	e8f8 <_svfprintf_r+0x11e8>
    e774:	9b08      	ldr	r3, [sp, #32]
    e776:	f853 2b04 	ldr.w	r2, [r3], #4
    e77a:	9308      	str	r3, [sp, #32]
    e77c:	e6f9      	b.n	e572 <_svfprintf_r+0xe62>
    e77e:	aa24      	add	r2, sp, #144	; 0x90
    e780:	4658      	mov	r0, fp
    e782:	9105      	str	r1, [sp, #20]
    e784:	f003 fe50 	bl	12428 <__ssprint_r>
    e788:	2800      	cmp	r0, #0
    e78a:	f47f ac26 	bne.w	dfda <_svfprintf_r+0x8ca>
    e78e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e790:	9905      	ldr	r1, [sp, #20]
    e792:	a827      	add	r0, sp, #156	; 0x9c
    e794:	e787      	b.n	e6a6 <_svfprintf_r+0xf96>
    e796:	9802      	ldr	r0, [sp, #8]
    e798:	f8cd a01c 	str.w	sl, [sp, #28]
    e79c:	ac50      	add	r4, sp, #320	; 0x140
    e79e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    e7a2:	2500      	movs	r5, #0
    e7a4:	ee0a ba10 	vmov	s20, fp
    e7a8:	4b09      	ldr	r3, [pc, #36]	; (e7d0 <_svfprintf_r+0x10c0>)
    e7aa:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    e7ae:	f8cd 9014 	str.w	r9, [sp, #20]
    e7b2:	46a3      	mov	fp, r4
    e7b4:	f04f 0805 	mov.w	r8, #5
    e7b8:	46ac      	mov	ip, r5
    e7ba:	4604      	mov	r4, r0
    e7bc:	e010      	b.n	e7e0 <_svfprintf_r+0x10d0>
    e7be:	bf00      	nop
    e7c0:	20000c18 	.word	0x20000c18
    e7c4:	20000c2c 	.word	0x20000c2c
    e7c8:	20000c40 	.word	0x20000c40
    e7cc:	2000845c 	.word	0x2000845c
    e7d0:	cccccccd 	.word	0xcccccccd
    e7d4:	2a0a      	cmp	r2, #10
    e7d6:	f171 0100 	sbcs.w	r1, r1, #0
    e7da:	d336      	bcc.n	e84a <_svfprintf_r+0x113a>
    e7dc:	464a      	mov	r2, r9
    e7de:	4631      	mov	r1, r6
    e7e0:	1850      	adds	r0, r2, r1
    e7e2:	f140 0000 	adc.w	r0, r0, #0
    e7e6:	fba3 5600 	umull	r5, r6, r3, r0
    e7ea:	f026 0503 	bic.w	r5, r6, #3
    e7ee:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    e7f2:	1b40      	subs	r0, r0, r5
    e7f4:	1a15      	subs	r5, r2, r0
    e7f6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    e7fa:	f161 0e00 	sbc.w	lr, r1, #0
    e7fe:	fb06 f605 	mul.w	r6, r6, r5
    e802:	fba5 9503 	umull	r9, r5, r5, r3
    e806:	fb03 660e 	mla	r6, r3, lr, r6
    e80a:	f009 0e01 	and.w	lr, r9, #1
    e80e:	442e      	add	r6, r5
    e810:	fbae 5e08 	umull	r5, lr, lr, r8
    e814:	182d      	adds	r5, r5, r0
    e816:	ea4f 0959 	mov.w	r9, r9, lsr #1
    e81a:	3530      	adds	r5, #48	; 0x30
    e81c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    e820:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    e824:	f10c 0c01 	add.w	ip, ip, #1
    e828:	f10b 3bff 	add.w	fp, fp, #4294967295
    e82c:	0876      	lsrs	r6, r6, #1
    e82e:	2c00      	cmp	r4, #0
    e830:	d0d0      	beq.n	e7d4 <_svfprintf_r+0x10c4>
    e832:	f89a 0000 	ldrb.w	r0, [sl]
    e836:	4584      	cmp	ip, r0
    e838:	d1cc      	bne.n	e7d4 <_svfprintf_r+0x10c4>
    e83a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    e83e:	d0c9      	beq.n	e7d4 <_svfprintf_r+0x10c4>
    e840:	2a0a      	cmp	r2, #10
    e842:	f171 0100 	sbcs.w	r1, r1, #0
    e846:	f080 818f 	bcs.w	eb68 <_svfprintf_r+0x1458>
    e84a:	465c      	mov	r4, fp
    e84c:	ab50      	add	r3, sp, #320	; 0x140
    e84e:	1b1b      	subs	r3, r3, r4
    e850:	f8dd 9014 	ldr.w	r9, [sp, #20]
    e854:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    e858:	ee1a ba10 	vmov	fp, s20
    e85c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    e860:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e864:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    e868:	9305      	str	r3, [sp, #20]
    e86a:	f7ff bac2 	b.w	ddf2 <_svfprintf_r+0x6e2>
    e86e:	ee1b 1a10 	vmov	r1, s22
    e872:	aa24      	add	r2, sp, #144	; 0x90
    e874:	4658      	mov	r0, fp
    e876:	f003 fdd7 	bl	12428 <__ssprint_r>
    e87a:	2800      	cmp	r0, #0
    e87c:	f47f abad 	bne.w	dfda <_svfprintf_r+0x8ca>
    e880:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e884:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e886:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e88a:	f7ff b896 	b.w	d9ba <_svfprintf_r+0x2aa>
    e88e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e890:	48be      	ldr	r0, [pc, #760]	; (eb8c <_svfprintf_r+0x147c>)
    e892:	f8ca 0000 	str.w	r0, [sl]
    e896:	3301      	adds	r3, #1
    e898:	3201      	adds	r2, #1
    e89a:	2001      	movs	r0, #1
    e89c:	2b07      	cmp	r3, #7
    e89e:	9226      	str	r2, [sp, #152]	; 0x98
    e8a0:	9325      	str	r3, [sp, #148]	; 0x94
    e8a2:	f8ca 0004 	str.w	r0, [sl, #4]
    e8a6:	f300 8177 	bgt.w	eb98 <_svfprintf_r+0x1488>
    e8aa:	f10a 0a08 	add.w	sl, sl, #8
    e8ae:	2900      	cmp	r1, #0
    e8b0:	f040 80af 	bne.w	ea12 <_svfprintf_r+0x1302>
    e8b4:	990e      	ldr	r1, [sp, #56]	; 0x38
    e8b6:	f008 0301 	and.w	r3, r8, #1
    e8ba:	430b      	orrs	r3, r1
    e8bc:	f43f a8c0 	beq.w	da40 <_svfprintf_r+0x330>
    e8c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e8c2:	9912      	ldr	r1, [sp, #72]	; 0x48
    e8c4:	441a      	add	r2, r3
    e8c6:	e9ca 1300 	strd	r1, r3, [sl]
    e8ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e8cc:	9226      	str	r2, [sp, #152]	; 0x98
    e8ce:	3301      	adds	r3, #1
    e8d0:	2b07      	cmp	r3, #7
    e8d2:	9325      	str	r3, [sp, #148]	; 0x94
    e8d4:	f300 8252 	bgt.w	ed7c <_svfprintf_r+0x166c>
    e8d8:	f10a 0a08 	add.w	sl, sl, #8
    e8dc:	990e      	ldr	r1, [sp, #56]	; 0x38
    e8de:	f8ca 4000 	str.w	r4, [sl]
    e8e2:	3301      	adds	r3, #1
    e8e4:	440a      	add	r2, r1
    e8e6:	2b07      	cmp	r3, #7
    e8e8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e8ec:	f8ca 1004 	str.w	r1, [sl, #4]
    e8f0:	f77f a8a4 	ble.w	da3c <_svfprintf_r+0x32c>
    e8f4:	f7ff bbbd 	b.w	e072 <_svfprintf_r+0x962>
    e8f8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e8fc:	f000 80dd 	beq.w	eaba <_svfprintf_r+0x13aa>
    e900:	9808      	ldr	r0, [sp, #32]
    e902:	f850 2b04 	ldr.w	r2, [r0], #4
    e906:	9008      	str	r0, [sp, #32]
    e908:	4619      	mov	r1, r3
    e90a:	b292      	uxth	r2, r2
    e90c:	e631      	b.n	e572 <_svfprintf_r+0xe62>
    e90e:	ee1b 1a10 	vmov	r1, s22
    e912:	aa24      	add	r2, sp, #144	; 0x90
    e914:	4658      	mov	r0, fp
    e916:	f003 fd87 	bl	12428 <__ssprint_r>
    e91a:	2800      	cmp	r0, #0
    e91c:	f47f ab5d 	bne.w	dfda <_svfprintf_r+0x8ca>
    e920:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e922:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e926:	f7ff baa3 	b.w	de70 <_svfprintf_r+0x760>
    e92a:	ae22      	add	r6, sp, #136	; 0x88
    e92c:	2208      	movs	r2, #8
    e92e:	2100      	movs	r1, #0
    e930:	4630      	mov	r0, r6
    e932:	941d      	str	r4, [sp, #116]	; 0x74
    e934:	f7fc ffca 	bl	b8cc <memset>
    e938:	9b03      	ldr	r3, [sp, #12]
    e93a:	1c5a      	adds	r2, r3, #1
    e93c:	f000 80db 	beq.w	eaf6 <_svfprintf_r+0x13e6>
    e940:	2500      	movs	r5, #0
    e942:	f8cd 9008 	str.w	r9, [sp, #8]
    e946:	f8cd 801c 	str.w	r8, [sp, #28]
    e94a:	4699      	mov	r9, r3
    e94c:	46a8      	mov	r8, r5
    e94e:	e00c      	b.n	e96a <_svfprintf_r+0x125a>
    e950:	a937      	add	r1, sp, #220	; 0xdc
    e952:	4658      	mov	r0, fp
    e954:	f003 fc3e 	bl	121d4 <_wcrtomb_r>
    e958:	1c43      	adds	r3, r0, #1
    e95a:	4440      	add	r0, r8
    e95c:	f000 83c8 	beq.w	f0f0 <_svfprintf_r+0x19e0>
    e960:	4548      	cmp	r0, r9
    e962:	dc08      	bgt.n	e976 <_svfprintf_r+0x1266>
    e964:	f000 8418 	beq.w	f198 <_svfprintf_r+0x1a88>
    e968:	4680      	mov	r8, r0
    e96a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e96c:	5952      	ldr	r2, [r2, r5]
    e96e:	4633      	mov	r3, r6
    e970:	3504      	adds	r5, #4
    e972:	2a00      	cmp	r2, #0
    e974:	d1ec      	bne.n	e950 <_svfprintf_r+0x1240>
    e976:	f8cd 8014 	str.w	r8, [sp, #20]
    e97a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    e97e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    e982:	e0c5      	b.n	eb10 <_svfprintf_r+0x1400>
    e984:	3301      	adds	r3, #1
    e986:	4982      	ldr	r1, [pc, #520]	; (eb90 <_svfprintf_r+0x1480>)
    e988:	f8ca 4004 	str.w	r4, [sl, #4]
    e98c:	4422      	add	r2, r4
    e98e:	2b07      	cmp	r3, #7
    e990:	f8ca 1000 	str.w	r1, [sl]
    e994:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e998:	f77f a850 	ble.w	da3c <_svfprintf_r+0x32c>
    e99c:	f7ff bb69 	b.w	e072 <_svfprintf_r+0x962>
    e9a0:	ee1b 1a10 	vmov	r1, s22
    e9a4:	aa24      	add	r2, sp, #144	; 0x90
    e9a6:	4658      	mov	r0, fp
    e9a8:	f003 fd3e 	bl	12428 <__ssprint_r>
    e9ac:	2800      	cmp	r0, #0
    e9ae:	f47f ab14 	bne.w	dfda <_svfprintf_r+0x8ca>
    e9b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e9b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e9b8:	f7ff b829 	b.w	da0e <_svfprintf_r+0x2fe>
    e9bc:	aa24      	add	r2, sp, #144	; 0x90
    e9be:	4658      	mov	r0, fp
    e9c0:	9105      	str	r1, [sp, #20]
    e9c2:	f003 fd31 	bl	12428 <__ssprint_r>
    e9c6:	2800      	cmp	r0, #0
    e9c8:	f47f ab07 	bne.w	dfda <_svfprintf_r+0x8ca>
    e9cc:	f896 c000 	ldrb.w	ip, [r6]
    e9d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e9d2:	9905      	ldr	r1, [sp, #20]
    e9d4:	a827      	add	r0, sp, #156	; 0x9c
    e9d6:	e67d      	b.n	e6d4 <_svfprintf_r+0xfc4>
    e9d8:	2b01      	cmp	r3, #1
    e9da:	f8cd 8008 	str.w	r8, [sp, #8]
    e9de:	f47f a9f3 	bne.w	ddc8 <_svfprintf_r+0x6b8>
    e9e2:	f7ff bb93 	b.w	e10c <_svfprintf_r+0x9fc>
    e9e6:	9b08      	ldr	r3, [sp, #32]
    e9e8:	9904      	ldr	r1, [sp, #16]
    e9ea:	f853 2b04 	ldr.w	r2, [r3], #4
    e9ee:	464c      	mov	r4, r9
    e9f0:	6011      	str	r1, [r2, #0]
    e9f2:	9308      	str	r3, [sp, #32]
    e9f4:	f7fe bebe 	b.w	d774 <_svfprintf_r+0x64>
    e9f8:	3301      	adds	r3, #1
    e9fa:	4965      	ldr	r1, [pc, #404]	; (eb90 <_svfprintf_r+0x1480>)
    e9fc:	f8ca 4004 	str.w	r4, [sl, #4]
    ea00:	4422      	add	r2, r4
    ea02:	2b07      	cmp	r3, #7
    ea04:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ea08:	f8ca 1000 	str.w	r1, [sl]
    ea0c:	f77f ab22 	ble.w	e054 <_svfprintf_r+0x944>
    ea10:	e47b      	b.n	e30a <_svfprintf_r+0xbfa>
    ea12:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ea14:	9812      	ldr	r0, [sp, #72]	; 0x48
    ea16:	441a      	add	r2, r3
    ea18:	e9ca 0300 	strd	r0, r3, [sl]
    ea1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ea1e:	9226      	str	r2, [sp, #152]	; 0x98
    ea20:	3301      	adds	r3, #1
    ea22:	2b07      	cmp	r3, #7
    ea24:	9325      	str	r3, [sp, #148]	; 0x94
    ea26:	f300 81a9 	bgt.w	ed7c <_svfprintf_r+0x166c>
    ea2a:	f10a 0a08 	add.w	sl, sl, #8
    ea2e:	2900      	cmp	r1, #0
    ea30:	f6bf af54 	bge.w	e8dc <_svfprintf_r+0x11cc>
    ea34:	424d      	negs	r5, r1
    ea36:	3110      	adds	r1, #16
    ea38:	f280 830f 	bge.w	f05a <_svfprintf_r+0x194a>
    ea3c:	ee1b 1a10 	vmov	r1, s22
    ea40:	2610      	movs	r6, #16
    ea42:	e005      	b.n	ea50 <_svfprintf_r+0x1340>
    ea44:	f10a 0a08 	add.w	sl, sl, #8
    ea48:	3d10      	subs	r5, #16
    ea4a:	2d10      	cmp	r5, #16
    ea4c:	f340 8305 	ble.w	f05a <_svfprintf_r+0x194a>
    ea50:	3301      	adds	r3, #1
    ea52:	484f      	ldr	r0, [pc, #316]	; (eb90 <_svfprintf_r+0x1480>)
    ea54:	3210      	adds	r2, #16
    ea56:	2b07      	cmp	r3, #7
    ea58:	e9ca 0600 	strd	r0, r6, [sl]
    ea5c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ea60:	ddf0      	ble.n	ea44 <_svfprintf_r+0x1334>
    ea62:	aa24      	add	r2, sp, #144	; 0x90
    ea64:	4658      	mov	r0, fp
    ea66:	9103      	str	r1, [sp, #12]
    ea68:	f003 fcde 	bl	12428 <__ssprint_r>
    ea6c:	2800      	cmp	r0, #0
    ea6e:	f47f aab4 	bne.w	dfda <_svfprintf_r+0x8ca>
    ea72:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ea76:	9903      	ldr	r1, [sp, #12]
    ea78:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea7c:	e7e4      	b.n	ea48 <_svfprintf_r+0x1338>
    ea7e:	9b08      	ldr	r3, [sp, #32]
    ea80:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    ea84:	bf1a      	itte	ne
    ea86:	4611      	movne	r1, r2
    ea88:	f853 2b04 	ldrne.w	r2, [r3], #4
    ea8c:	f853 2b04 	ldreq.w	r2, [r3], #4
    ea90:	9308      	str	r3, [sp, #32]
    ea92:	bf18      	it	ne
    ea94:	b2d2      	uxtbne	r2, r2
    ea96:	f7ff b945 	b.w	dd24 <_svfprintf_r+0x614>
    ea9a:	9b02      	ldr	r3, [sp, #8]
    ea9c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    eaa0:	9b08      	ldr	r3, [sp, #32]
    eaa2:	bf1a      	itte	ne
    eaa4:	4611      	movne	r1, r2
    eaa6:	f853 2b04 	ldrne.w	r2, [r3], #4
    eaaa:	f853 2b04 	ldreq.w	r2, [r3], #4
    eaae:	9308      	str	r3, [sp, #32]
    eab0:	bf18      	it	ne
    eab2:	b2d2      	uxtbne	r2, r2
    eab4:	2301      	movs	r3, #1
    eab6:	f7ff b8d0 	b.w	dc5a <_svfprintf_r+0x54a>
    eaba:	9b08      	ldr	r3, [sp, #32]
    eabc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    eac0:	bf1a      	itte	ne
    eac2:	4611      	movne	r1, r2
    eac4:	f853 2b04 	ldrne.w	r2, [r3], #4
    eac8:	f853 2b04 	ldreq.w	r2, [r3], #4
    eacc:	9308      	str	r3, [sp, #32]
    eace:	bf18      	it	ne
    ead0:	b2d2      	uxtbne	r2, r2
    ead2:	e54e      	b.n	e572 <_svfprintf_r+0xe62>
    ead4:	468a      	mov	sl, r1
    ead6:	3301      	adds	r3, #1
    ead8:	492d      	ldr	r1, [pc, #180]	; (eb90 <_svfprintf_r+0x1480>)
    eada:	f8ca 5004 	str.w	r5, [sl, #4]
    eade:	442a      	add	r2, r5
    eae0:	2b07      	cmp	r3, #7
    eae2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eae6:	f8ca 1000 	str.w	r1, [sl]
    eaea:	f300 8139 	bgt.w	ed60 <_svfprintf_r+0x1650>
    eaee:	f10a 0a08 	add.w	sl, sl, #8
    eaf2:	f7ff bb8c 	b.w	e20e <_svfprintf_r+0xafe>
    eaf6:	2300      	movs	r3, #0
    eaf8:	4619      	mov	r1, r3
    eafa:	9600      	str	r6, [sp, #0]
    eafc:	aa1d      	add	r2, sp, #116	; 0x74
    eafe:	4658      	mov	r0, fp
    eb00:	f003 fb8e 	bl	12220 <_wcsrtombs_r>
    eb04:	4603      	mov	r3, r0
    eb06:	3301      	adds	r3, #1
    eb08:	9005      	str	r0, [sp, #20]
    eb0a:	f000 82f1 	beq.w	f0f0 <_svfprintf_r+0x19e0>
    eb0e:	941d      	str	r4, [sp, #116]	; 0x74
    eb10:	9b05      	ldr	r3, [sp, #20]
    eb12:	2b00      	cmp	r3, #0
    eb14:	d04e      	beq.n	ebb4 <_svfprintf_r+0x14a4>
    eb16:	2b63      	cmp	r3, #99	; 0x63
    eb18:	f300 8118 	bgt.w	ed4c <_svfprintf_r+0x163c>
    eb1c:	2300      	movs	r3, #0
    eb1e:	9307      	str	r3, [sp, #28]
    eb20:	ac37      	add	r4, sp, #220	; 0xdc
    eb22:	2208      	movs	r2, #8
    eb24:	2100      	movs	r1, #0
    eb26:	4630      	mov	r0, r6
    eb28:	f7fc fed0 	bl	b8cc <memset>
    eb2c:	9d05      	ldr	r5, [sp, #20]
    eb2e:	9600      	str	r6, [sp, #0]
    eb30:	462b      	mov	r3, r5
    eb32:	aa1d      	add	r2, sp, #116	; 0x74
    eb34:	4621      	mov	r1, r4
    eb36:	4658      	mov	r0, fp
    eb38:	f003 fb72 	bl	12220 <_wcsrtombs_r>
    eb3c:	4285      	cmp	r5, r0
    eb3e:	f040 837c 	bne.w	f23a <_svfprintf_r+0x1b2a>
    eb42:	9a05      	ldr	r2, [sp, #20]
    eb44:	2300      	movs	r3, #0
    eb46:	54a3      	strb	r3, [r4, r2]
    eb48:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    eb4c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    eb50:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    eb54:	9303      	str	r3, [sp, #12]
    eb56:	9202      	str	r2, [sp, #8]
    eb58:	930f      	str	r3, [sp, #60]	; 0x3c
    eb5a:	f7fe bfba 	b.w	dad2 <_svfprintf_r+0x3c2>
    eb5e:	212d      	movs	r1, #45	; 0x2d
    eb60:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    eb64:	f7fe bfa4 	b.w	dab0 <_svfprintf_r+0x3a0>
    eb68:	9b16      	ldr	r3, [sp, #88]	; 0x58
    eb6a:	9915      	ldr	r1, [sp, #84]	; 0x54
    eb6c:	ebab 0b03 	sub.w	fp, fp, r3
    eb70:	461a      	mov	r2, r3
    eb72:	4658      	mov	r0, fp
    eb74:	f7fc ff42 	bl	b9fc <strncpy>
    eb78:	f89a 2001 	ldrb.w	r2, [sl, #1]
    eb7c:	4b05      	ldr	r3, [pc, #20]	; (eb94 <_svfprintf_r+0x1484>)
    eb7e:	b10a      	cbz	r2, eb84 <_svfprintf_r+0x1474>
    eb80:	f10a 0a01 	add.w	sl, sl, #1
    eb84:	f04f 0c00 	mov.w	ip, #0
    eb88:	e628      	b.n	e7dc <_svfprintf_r+0x10cc>
    eb8a:	bf00      	nop
    eb8c:	20000c48 	.word	0x20000c48
    eb90:	2000845c 	.word	0x2000845c
    eb94:	cccccccd 	.word	0xcccccccd
    eb98:	ee1b 1a10 	vmov	r1, s22
    eb9c:	aa24      	add	r2, sp, #144	; 0x90
    eb9e:	4658      	mov	r0, fp
    eba0:	f003 fc42 	bl	12428 <__ssprint_r>
    eba4:	2800      	cmp	r0, #0
    eba6:	f47f aa18 	bne.w	dfda <_svfprintf_r+0x8ca>
    ebaa:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ebac:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ebae:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ebb2:	e67c      	b.n	e8ae <_svfprintf_r+0x119e>
    ebb4:	9b05      	ldr	r3, [sp, #20]
    ebb6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ebba:	930f      	str	r3, [sp, #60]	; 0x3c
    ebbc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    ebc0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ebc4:	9307      	str	r3, [sp, #28]
    ebc6:	f7fe bf84 	b.w	dad2 <_svfprintf_r+0x3c2>
    ebca:	990e      	ldr	r1, [sp, #56]	; 0x38
    ebcc:	9805      	ldr	r0, [sp, #20]
    ebce:	1865      	adds	r5, r4, r1
    ebd0:	1a2d      	subs	r5, r5, r0
    ebd2:	1acc      	subs	r4, r1, r3
    ebd4:	42a5      	cmp	r5, r4
    ebd6:	bfa8      	it	ge
    ebd8:	4625      	movge	r5, r4
    ebda:	f7ff bb4d 	b.w	e278 <_svfprintf_r+0xb68>
    ebde:	9b08      	ldr	r3, [sp, #32]
    ebe0:	9904      	ldr	r1, [sp, #16]
    ebe2:	f853 2b04 	ldr.w	r2, [r3], #4
    ebe6:	9308      	str	r3, [sp, #32]
    ebe8:	8011      	strh	r1, [r2, #0]
    ebea:	464c      	mov	r4, r9
    ebec:	f7fe bdc2 	b.w	d774 <_svfprintf_r+0x64>
    ebf0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    ebf4:	9308      	str	r3, [sp, #32]
    ebf6:	17d1      	asrs	r1, r2, #31
    ebf8:	460b      	mov	r3, r1
    ebfa:	f7fe bfdb 	b.w	dbb4 <_svfprintf_r+0x4a4>
    ebfe:	9a03      	ldr	r2, [sp, #12]
    ec00:	2102      	movs	r1, #2
    ec02:	ab22      	add	r3, sp, #136	; 0x88
    ec04:	9301      	str	r3, [sp, #4]
    ec06:	ab1d      	add	r3, sp, #116	; 0x74
    ec08:	9300      	str	r3, [sp, #0]
    ec0a:	4658      	mov	r0, fp
    ec0c:	ab1b      	add	r3, sp, #108	; 0x6c
    ec0e:	eeb0 0b4a 	vmov.f64	d0, d10
    ec12:	9202      	str	r2, [sp, #8]
    ec14:	f002 fa14 	bl	11040 <_dtoa_r>
    ec18:	2d47      	cmp	r5, #71	; 0x47
    ec1a:	9a02      	ldr	r2, [sp, #8]
    ec1c:	4604      	mov	r4, r0
    ec1e:	f000 8161 	beq.w	eee4 <_svfprintf_r+0x17d4>
    ec22:	2d46      	cmp	r5, #70	; 0x46
    ec24:	4410      	add	r0, r2
    ec26:	d105      	bne.n	ec34 <_svfprintf_r+0x1524>
    ec28:	7823      	ldrb	r3, [r4, #0]
    ec2a:	2b30      	cmp	r3, #48	; 0x30
    ec2c:	f000 826f 	beq.w	f10e <_svfprintf_r+0x19fe>
    ec30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ec32:	4410      	add	r0, r2
    ec34:	eeb5 ab40 	vcmp.f64	d10, #0.0
    ec38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ec3c:	f040 8146 	bne.w	eecc <_svfprintf_r+0x17bc>
    ec40:	4603      	mov	r3, r0
    ec42:	1b1b      	subs	r3, r3, r4
    ec44:	930e      	str	r3, [sp, #56]	; 0x38
    ec46:	2d47      	cmp	r5, #71	; 0x47
    ec48:	f000 8110 	beq.w	ee6c <_svfprintf_r+0x175c>
    ec4c:	2d46      	cmp	r5, #70	; 0x46
    ec4e:	f000 81b5 	beq.w	efbc <_svfprintf_r+0x18ac>
    ec52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ec54:	930c      	str	r3, [sp, #48]	; 0x30
    ec56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ec58:	2d41      	cmp	r5, #65	; 0x41
    ec5a:	f103 33ff 	add.w	r3, r3, #4294967295
    ec5e:	931b      	str	r3, [sp, #108]	; 0x6c
    ec60:	f000 81e5 	beq.w	f02e <_svfprintf_r+0x191e>
    ec64:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    ec68:	2100      	movs	r1, #0
    ec6a:	2b00      	cmp	r3, #0
    ec6c:	bfb8      	it	lt
    ec6e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    ec70:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    ec74:	bfba      	itte	lt
    ec76:	f1c3 0301 	rsblt	r3, r3, #1
    ec7a:	222d      	movlt	r2, #45	; 0x2d
    ec7c:	222b      	movge	r2, #43	; 0x2b
    ec7e:	2b09      	cmp	r3, #9
    ec80:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    ec84:	f340 81da 	ble.w	f03c <_svfprintf_r+0x192c>
    ec88:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    ec8c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; f0ac <_svfprintf_r+0x199c>
    ec90:	462a      	mov	r2, r5
    ec92:	4610      	mov	r0, r2
    ec94:	fb8c 2103 	smull	r2, r1, ip, r3
    ec98:	17da      	asrs	r2, r3, #31
    ec9a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    ec9e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    eca2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    eca6:	3130      	adds	r1, #48	; 0x30
    eca8:	f800 1c01 	strb.w	r1, [r0, #-1]
    ecac:	4619      	mov	r1, r3
    ecae:	2963      	cmp	r1, #99	; 0x63
    ecb0:	4613      	mov	r3, r2
    ecb2:	f100 32ff 	add.w	r2, r0, #4294967295
    ecb6:	dcec      	bgt.n	ec92 <_svfprintf_r+0x1582>
    ecb8:	3330      	adds	r3, #48	; 0x30
    ecba:	b2d9      	uxtb	r1, r3
    ecbc:	1e83      	subs	r3, r0, #2
    ecbe:	429d      	cmp	r5, r3
    ecc0:	f802 1c01 	strb.w	r1, [r2, #-1]
    ecc4:	f240 828b 	bls.w	f1de <_svfprintf_r+0x1ace>
    ecc8:	4613      	mov	r3, r2
    ecca:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ecce:	e001      	b.n	ecd4 <_svfprintf_r+0x15c4>
    ecd0:	f813 1b01 	ldrb.w	r1, [r3], #1
    ecd4:	f802 1b01 	strb.w	r1, [r2], #1
    ecd8:	429d      	cmp	r5, r3
    ecda:	d1f9      	bne.n	ecd0 <_svfprintf_r+0x15c0>
    ecdc:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    ece0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ece4:	1a1b      	subs	r3, r3, r0
    ece6:	4413      	add	r3, r2
    ece8:	aa1e      	add	r2, sp, #120	; 0x78
    ecea:	1a9b      	subs	r3, r3, r2
    ecec:	9314      	str	r3, [sp, #80]	; 0x50
    ecee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ecf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ecf2:	2b01      	cmp	r3, #1
    ecf4:	441a      	add	r2, r3
    ecf6:	9205      	str	r2, [sp, #20]
    ecf8:	f340 8203 	ble.w	f102 <_svfprintf_r+0x19f2>
    ecfc:	9b05      	ldr	r3, [sp, #20]
    ecfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ed00:	4413      	add	r3, r2
    ed02:	9305      	str	r3, [sp, #20]
    ed04:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    ed08:	9a05      	ldr	r2, [sp, #20]
    ed0a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    ed0e:	2300      	movs	r3, #0
    ed10:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ed14:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ed18:	930f      	str	r3, [sp, #60]	; 0x3c
    ed1a:	9202      	str	r2, [sp, #8]
    ed1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed1e:	2b00      	cmp	r3, #0
    ed20:	f040 80b1 	bne.w	ee86 <_svfprintf_r+0x1776>
    ed24:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ed28:	9303      	str	r3, [sp, #12]
    ed2a:	f7fe bed2 	b.w	dad2 <_svfprintf_r+0x3c2>
    ed2e:	4620      	mov	r0, r4
    ed30:	f7fd f966 	bl	c000 <strlen>
    ed34:	4602      	mov	r2, r0
    ed36:	9005      	str	r0, [sp, #20]
    ed38:	f7fe bf20 	b.w	db7c <_svfprintf_r+0x46c>
    ed3c:	ee1b 1a10 	vmov	r1, s22
    ed40:	aa24      	add	r2, sp, #144	; 0x90
    ed42:	4658      	mov	r0, fp
    ed44:	f003 fb70 	bl	12428 <__ssprint_r>
    ed48:	f7fe bded 	b.w	d926 <_svfprintf_r+0x216>
    ed4c:	1c59      	adds	r1, r3, #1
    ed4e:	4658      	mov	r0, fp
    ed50:	f7fa fe94 	bl	9a7c <_malloc_r>
    ed54:	4604      	mov	r4, r0
    ed56:	2800      	cmp	r0, #0
    ed58:	f000 81ca 	beq.w	f0f0 <_svfprintf_r+0x19e0>
    ed5c:	9007      	str	r0, [sp, #28]
    ed5e:	e6e0      	b.n	eb22 <_svfprintf_r+0x1412>
    ed60:	ee1b 1a10 	vmov	r1, s22
    ed64:	aa24      	add	r2, sp, #144	; 0x90
    ed66:	4658      	mov	r0, fp
    ed68:	f003 fb5e 	bl	12428 <__ssprint_r>
    ed6c:	2800      	cmp	r0, #0
    ed6e:	f47f a934 	bne.w	dfda <_svfprintf_r+0x8ca>
    ed72:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ed74:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ed78:	f7ff ba49 	b.w	e20e <_svfprintf_r+0xafe>
    ed7c:	ee1b 1a10 	vmov	r1, s22
    ed80:	aa24      	add	r2, sp, #144	; 0x90
    ed82:	4658      	mov	r0, fp
    ed84:	f003 fb50 	bl	12428 <__ssprint_r>
    ed88:	2800      	cmp	r0, #0
    ed8a:	f47f a926 	bne.w	dfda <_svfprintf_r+0x8ca>
    ed8e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ed92:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ed94:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ed98:	e649      	b.n	ea2e <_svfprintf_r+0x131e>
    ed9a:	2306      	movs	r3, #6
    ed9c:	9303      	str	r3, [sp, #12]
    ed9e:	f7ff bb83 	b.w	e4a8 <_svfprintf_r+0xd98>
    eda2:	9b03      	ldr	r3, [sp, #12]
    eda4:	2102      	movs	r1, #2
    eda6:	1c5a      	adds	r2, r3, #1
    eda8:	e72b      	b.n	ec02 <_svfprintf_r+0x14f2>
    edaa:	9a03      	ldr	r2, [sp, #12]
    edac:	2103      	movs	r1, #3
    edae:	e728      	b.n	ec02 <_svfprintf_r+0x14f2>
    edb0:	a81b      	add	r0, sp, #108	; 0x6c
    edb2:	eeb0 0b4a 	vmov.f64	d0, d10
    edb6:	f002 f817 	bl	10de8 <frexp>
    edba:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    edbe:	ee20 0b07 	vmul.f64	d0, d0, d7
    edc2:	eeb5 0b40 	vcmp.f64	d0, #0.0
    edc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    edca:	d101      	bne.n	edd0 <_svfprintf_r+0x16c0>
    edcc:	2301      	movs	r3, #1
    edce:	931b      	str	r3, [sp, #108]	; 0x6c
    edd0:	48b3      	ldr	r0, [pc, #716]	; (f0a0 <_svfprintf_r+0x1990>)
    edd2:	9b03      	ldr	r3, [sp, #12]
    edd4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    edd8:	3b01      	subs	r3, #1
    edda:	4622      	mov	r2, r4
    eddc:	e004      	b.n	ede8 <_svfprintf_r+0x16d8>
    edde:	eeb5 0b40 	vcmp.f64	d0, #0.0
    ede2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ede6:	d013      	beq.n	ee10 <_svfprintf_r+0x1700>
    ede8:	ee20 0b05 	vmul.f64	d0, d0, d5
    edec:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    edf0:	f1b3 3fff 	cmp.w	r3, #4294967295
    edf4:	ee17 1a90 	vmov	r1, s15
    edf8:	5c41      	ldrb	r1, [r0, r1]
    edfa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    edfe:	4694      	mov	ip, r2
    ee00:	ee30 0b46 	vsub.f64	d0, d0, d6
    ee04:	f802 1b01 	strb.w	r1, [r2], #1
    ee08:	4619      	mov	r1, r3
    ee0a:	f103 33ff 	add.w	r3, r3, #4294967295
    ee0e:	d1e6      	bne.n	edde <_svfprintf_r+0x16ce>
    ee10:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    ee14:	eeb4 0bc6 	vcmpe.f64	d0, d6
    ee18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ee1c:	f300 8148 	bgt.w	f0b0 <_svfprintf_r+0x19a0>
    ee20:	eeb4 0b46 	vcmp.f64	d0, d6
    ee24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ee28:	d104      	bne.n	ee34 <_svfprintf_r+0x1724>
    ee2a:	ee17 3a90 	vmov	r3, s15
    ee2e:	07db      	lsls	r3, r3, #31
    ee30:	f100 813e 	bmi.w	f0b0 <_svfprintf_r+0x19a0>
    ee34:	2900      	cmp	r1, #0
    ee36:	db06      	blt.n	ee46 <_svfprintf_r+0x1736>
    ee38:	1c4b      	adds	r3, r1, #1
    ee3a:	4413      	add	r3, r2
    ee3c:	2130      	movs	r1, #48	; 0x30
    ee3e:	f802 1b01 	strb.w	r1, [r2], #1
    ee42:	4293      	cmp	r3, r2
    ee44:	d1fb      	bne.n	ee3e <_svfprintf_r+0x172e>
    ee46:	1b13      	subs	r3, r2, r4
    ee48:	930e      	str	r3, [sp, #56]	; 0x38
    ee4a:	e6fc      	b.n	ec46 <_svfprintf_r+0x1536>
    ee4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ee4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee50:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    ee54:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ee58:	9613      	str	r6, [sp, #76]	; 0x4c
    ee5a:	18e3      	adds	r3, r4, r3
    ee5c:	429d      	cmp	r5, r3
    ee5e:	4629      	mov	r1, r5
    ee60:	bf28      	it	cs
    ee62:	4619      	movcs	r1, r3
    ee64:	4682      	mov	sl, r0
    ee66:	9105      	str	r1, [sp, #20]
    ee68:	f7ff b9d8 	b.w	e21c <_svfprintf_r+0xb0c>
    ee6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ee6e:	930c      	str	r3, [sp, #48]	; 0x30
    ee70:	1cda      	adds	r2, r3, #3
    ee72:	db02      	blt.n	ee7a <_svfprintf_r+0x176a>
    ee74:	9a03      	ldr	r2, [sp, #12]
    ee76:	4293      	cmp	r3, r2
    ee78:	dd0c      	ble.n	ee94 <_svfprintf_r+0x1784>
    ee7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ee7c:	3b02      	subs	r3, #2
    ee7e:	930b      	str	r3, [sp, #44]	; 0x2c
    ee80:	f023 0520 	bic.w	r5, r3, #32
    ee84:	e6e7      	b.n	ec56 <_svfprintf_r+0x1546>
    ee86:	212d      	movs	r1, #45	; 0x2d
    ee88:	2300      	movs	r3, #0
    ee8a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ee8e:	9303      	str	r3, [sp, #12]
    ee90:	f7fe be22 	b.w	dad8 <_svfprintf_r+0x3c8>
    ee94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ee96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ee98:	4293      	cmp	r3, r2
    ee9a:	f2c0 80bd 	blt.w	f018 <_svfprintf_r+0x1908>
    ee9e:	07f0      	lsls	r0, r6, #31
    eea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eea2:	f140 8132 	bpl.w	f10a <_svfprintf_r+0x19fa>
    eea6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    eea8:	4413      	add	r3, r2
    eeaa:	9305      	str	r3, [sp, #20]
    eeac:	0571      	lsls	r1, r6, #21
    eeae:	d503      	bpl.n	eeb8 <_svfprintf_r+0x17a8>
    eeb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eeb2:	2b00      	cmp	r3, #0
    eeb4:	f300 8135 	bgt.w	f122 <_svfprintf_r+0x1a12>
    eeb8:	9b05      	ldr	r3, [sp, #20]
    eeba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    eebe:	9302      	str	r3, [sp, #8]
    eec0:	2367      	movs	r3, #103	; 0x67
    eec2:	930b      	str	r3, [sp, #44]	; 0x2c
    eec4:	2300      	movs	r3, #0
    eec6:	930f      	str	r3, [sp, #60]	; 0x3c
    eec8:	930d      	str	r3, [sp, #52]	; 0x34
    eeca:	e727      	b.n	ed1c <_svfprintf_r+0x160c>
    eecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    eece:	4283      	cmp	r3, r0
    eed0:	f4bf aeb7 	bcs.w	ec42 <_svfprintf_r+0x1532>
    eed4:	2130      	movs	r1, #48	; 0x30
    eed6:	1c5a      	adds	r2, r3, #1
    eed8:	9222      	str	r2, [sp, #136]	; 0x88
    eeda:	7019      	strb	r1, [r3, #0]
    eedc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    eede:	4298      	cmp	r0, r3
    eee0:	d8f9      	bhi.n	eed6 <_svfprintf_r+0x17c6>
    eee2:	e6ae      	b.n	ec42 <_svfprintf_r+0x1532>
    eee4:	07f3      	lsls	r3, r6, #31
    eee6:	f100 80a7 	bmi.w	f038 <_svfprintf_r+0x1928>
    eeea:	9b22      	ldr	r3, [sp, #136]	; 0x88
    eeec:	e6a9      	b.n	ec42 <_svfprintf_r+0x1532>
    eeee:	aa24      	add	r2, sp, #144	; 0x90
    eef0:	4658      	mov	r0, fp
    eef2:	9105      	str	r1, [sp, #20]
    eef4:	f003 fa98 	bl	12428 <__ssprint_r>
    eef8:	2800      	cmp	r0, #0
    eefa:	f47f a86e 	bne.w	dfda <_svfprintf_r+0x8ca>
    eefe:	f896 c000 	ldrb.w	ip, [r6]
    ef02:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ef04:	9905      	ldr	r1, [sp, #20]
    ef06:	a827      	add	r0, sp, #156	; 0x9c
    ef08:	4465      	add	r5, ip
    ef0a:	f7ff bbec 	b.w	e6e6 <_svfprintf_r+0xfd6>
    ef0e:	ee1b 1a10 	vmov	r1, s22
    ef12:	aa24      	add	r2, sp, #144	; 0x90
    ef14:	4658      	mov	r0, fp
    ef16:	f003 fa87 	bl	12428 <__ssprint_r>
    ef1a:	2800      	cmp	r0, #0
    ef1c:	f47f a85d 	bne.w	dfda <_svfprintf_r+0x8ca>
    ef20:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ef22:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ef26:	f7ff b96b 	b.w	e200 <_svfprintf_r+0xaf0>
    ef2a:	2378      	movs	r3, #120	; 0x78
    ef2c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    ef30:	2330      	movs	r3, #48	; 0x30
    ef32:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    ef36:	9b03      	ldr	r3, [sp, #12]
    ef38:	2b63      	cmp	r3, #99	; 0x63
    ef3a:	f048 0602 	orr.w	r6, r8, #2
    ef3e:	f300 80a6 	bgt.w	f08e <_svfprintf_r+0x197e>
    ef42:	2300      	movs	r3, #0
    ef44:	9307      	str	r3, [sp, #28]
    ef46:	ac37      	add	r4, sp, #220	; 0xdc
    ef48:	ee18 3a90 	vmov	r3, s17
    ef4c:	2b00      	cmp	r3, #0
    ef4e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    ef52:	db2b      	blt.n	efac <_svfprintf_r+0x189c>
    ef54:	eeb0 ab48 	vmov.f64	d10, d8
    ef58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ef5a:	f023 0520 	bic.w	r5, r3, #32
    ef5e:	2300      	movs	r3, #0
    ef60:	9309      	str	r3, [sp, #36]	; 0x24
    ef62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ef64:	2b61      	cmp	r3, #97	; 0x61
    ef66:	f47f aaad 	bne.w	e4c4 <_svfprintf_r+0xdb4>
    ef6a:	eeb0 0b4a 	vmov.f64	d0, d10
    ef6e:	a81b      	add	r0, sp, #108	; 0x6c
    ef70:	f001 ff3a 	bl	10de8 <frexp>
    ef74:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    ef78:	ee20 0b07 	vmul.f64	d0, d0, d7
    ef7c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    ef80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef84:	d101      	bne.n	ef8a <_svfprintf_r+0x187a>
    ef86:	2301      	movs	r3, #1
    ef88:	931b      	str	r3, [sp, #108]	; 0x6c
    ef8a:	4846      	ldr	r0, [pc, #280]	; (f0a4 <_svfprintf_r+0x1994>)
    ef8c:	e721      	b.n	edd2 <_svfprintf_r+0x16c2>
    ef8e:	ee1b 1a10 	vmov	r1, s22
    ef92:	aa24      	add	r2, sp, #144	; 0x90
    ef94:	4658      	mov	r0, fp
    ef96:	f003 fa47 	bl	12428 <__ssprint_r>
    ef9a:	2800      	cmp	r0, #0
    ef9c:	f47f a81d 	bne.w	dfda <_svfprintf_r+0x8ca>
    efa0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    efa2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    efa4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    efa8:	f7ff b94e 	b.w	e248 <_svfprintf_r+0xb38>
    efac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    efae:	f023 0520 	bic.w	r5, r3, #32
    efb2:	232d      	movs	r3, #45	; 0x2d
    efb4:	9309      	str	r3, [sp, #36]	; 0x24
    efb6:	eeb1 ab48 	vneg.f64	d10, d8
    efba:	e7d2      	b.n	ef62 <_svfprintf_r+0x1852>
    efbc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    efbe:	920c      	str	r2, [sp, #48]	; 0x30
    efc0:	2a00      	cmp	r2, #0
    efc2:	f006 0301 	and.w	r3, r6, #1
    efc6:	f340 810d 	ble.w	f1e4 <_svfprintf_r+0x1ad4>
    efca:	9903      	ldr	r1, [sp, #12]
    efcc:	430b      	orrs	r3, r1
    efce:	f040 80cf 	bne.w	f170 <_svfprintf_r+0x1a60>
    efd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    efd4:	9305      	str	r3, [sp, #20]
    efd6:	2366      	movs	r3, #102	; 0x66
    efd8:	930b      	str	r3, [sp, #44]	; 0x2c
    efda:	0572      	lsls	r2, r6, #21
    efdc:	f100 80a3 	bmi.w	f126 <_svfprintf_r+0x1a16>
    efe0:	9b05      	ldr	r3, [sp, #20]
    efe2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    efe6:	9302      	str	r3, [sp, #8]
    efe8:	e76c      	b.n	eec4 <_svfprintf_r+0x17b4>
    efea:	ee1b 1a10 	vmov	r1, s22
    efee:	aa24      	add	r2, sp, #144	; 0x90
    eff0:	4658      	mov	r0, fp
    eff2:	f003 fa19 	bl	12428 <__ssprint_r>
    eff6:	2800      	cmp	r0, #0
    eff8:	f47e afef 	bne.w	dfda <_svfprintf_r+0x8ca>
    effc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    effe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f000:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f002:	1b1c      	subs	r4, r3, r4
    f004:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f008:	f7ff b936 	b.w	e278 <_svfprintf_r+0xb68>
    f00c:	2358      	movs	r3, #88	; 0x58
    f00e:	e78d      	b.n	ef2c <_svfprintf_r+0x181c>
    f010:	2200      	movs	r2, #0
    f012:	9203      	str	r2, [sp, #12]
    f014:	f7fe bbda 	b.w	d7cc <_svfprintf_r+0xbc>
    f018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f01a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f01c:	189a      	adds	r2, r3, r2
    f01e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f020:	9205      	str	r2, [sp, #20]
    f022:	2b00      	cmp	r3, #0
    f024:	f340 80ab 	ble.w	f17e <_svfprintf_r+0x1a6e>
    f028:	2367      	movs	r3, #103	; 0x67
    f02a:	930b      	str	r3, [sp, #44]	; 0x2c
    f02c:	e7d5      	b.n	efda <_svfprintf_r+0x18ca>
    f02e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f030:	320f      	adds	r2, #15
    f032:	b2d2      	uxtb	r2, r2
    f034:	2101      	movs	r1, #1
    f036:	e618      	b.n	ec6a <_svfprintf_r+0x155a>
    f038:	18a0      	adds	r0, r4, r2
    f03a:	e5fb      	b.n	ec34 <_svfprintf_r+0x1524>
    f03c:	2900      	cmp	r1, #0
    f03e:	f040 80a8 	bne.w	f192 <_svfprintf_r+0x1a82>
    f042:	2230      	movs	r2, #48	; 0x30
    f044:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    f048:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    f04c:	3330      	adds	r3, #48	; 0x30
    f04e:	f802 3b01 	strb.w	r3, [r2], #1
    f052:	ab1e      	add	r3, sp, #120	; 0x78
    f054:	1ad3      	subs	r3, r2, r3
    f056:	9314      	str	r3, [sp, #80]	; 0x50
    f058:	e649      	b.n	ecee <_svfprintf_r+0x15de>
    f05a:	3301      	adds	r3, #1
    f05c:	4912      	ldr	r1, [pc, #72]	; (f0a8 <_svfprintf_r+0x1998>)
    f05e:	f8ca 5004 	str.w	r5, [sl, #4]
    f062:	442a      	add	r2, r5
    f064:	2b07      	cmp	r3, #7
    f066:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f06a:	f8ca 1000 	str.w	r1, [sl]
    f06e:	f77f ac33 	ble.w	e8d8 <_svfprintf_r+0x11c8>
    f072:	ee1b 1a10 	vmov	r1, s22
    f076:	aa24      	add	r2, sp, #144	; 0x90
    f078:	4658      	mov	r0, fp
    f07a:	f003 f9d5 	bl	12428 <__ssprint_r>
    f07e:	2800      	cmp	r0, #0
    f080:	f47e afab 	bne.w	dfda <_svfprintf_r+0x8ca>
    f084:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f088:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f08c:	e426      	b.n	e8dc <_svfprintf_r+0x11cc>
    f08e:	1c59      	adds	r1, r3, #1
    f090:	4658      	mov	r0, fp
    f092:	f7fa fcf3 	bl	9a7c <_malloc_r>
    f096:	4604      	mov	r4, r0
    f098:	b350      	cbz	r0, f0f0 <_svfprintf_r+0x19e0>
    f09a:	9007      	str	r0, [sp, #28]
    f09c:	e754      	b.n	ef48 <_svfprintf_r+0x1838>
    f09e:	bf00      	nop
    f0a0:	20000c2c 	.word	0x20000c2c
    f0a4:	20000c18 	.word	0x20000c18
    f0a8:	2000845c 	.word	0x2000845c
    f0ac:	66666667 	.word	0x66666667
    f0b0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    f0b4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    f0b8:	f890 c00f 	ldrb.w	ip, [r0, #15]
    f0bc:	4561      	cmp	r1, ip
    f0be:	4613      	mov	r3, r2
    f0c0:	d10a      	bne.n	f0d8 <_svfprintf_r+0x19c8>
    f0c2:	f04f 0e30 	mov.w	lr, #48	; 0x30
    f0c6:	f803 ec01 	strb.w	lr, [r3, #-1]
    f0ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f0cc:	1e59      	subs	r1, r3, #1
    f0ce:	9122      	str	r1, [sp, #136]	; 0x88
    f0d0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    f0d4:	458c      	cmp	ip, r1
    f0d6:	d0f6      	beq.n	f0c6 <_svfprintf_r+0x19b6>
    f0d8:	2939      	cmp	r1, #57	; 0x39
    f0da:	bf16      	itet	ne
    f0dc:	3101      	addne	r1, #1
    f0de:	7a81      	ldrbeq	r1, [r0, #10]
    f0e0:	b2c9      	uxtbne	r1, r1
    f0e2:	f803 1c01 	strb.w	r1, [r3, #-1]
    f0e6:	e6ae      	b.n	ee46 <_svfprintf_r+0x1736>
    f0e8:	2300      	movs	r3, #0
    f0ea:	4690      	mov	r8, r2
    f0ec:	9307      	str	r3, [sp, #28]
    f0ee:	e760      	b.n	efb2 <_svfprintf_r+0x18a2>
    f0f0:	ee1b 2a10 	vmov	r2, s22
    f0f4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    f0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f0fc:	8193      	strh	r3, [r2, #12]
    f0fe:	f7fe bc16 	b.w	d92e <_svfprintf_r+0x21e>
    f102:	07f5      	lsls	r5, r6, #31
    f104:	f57f adfe 	bpl.w	ed04 <_svfprintf_r+0x15f4>
    f108:	e5f8      	b.n	ecfc <_svfprintf_r+0x15ec>
    f10a:	9305      	str	r3, [sp, #20]
    f10c:	e6ce      	b.n	eeac <_svfprintf_r+0x179c>
    f10e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    f112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f116:	f43f ad8b 	beq.w	ec30 <_svfprintf_r+0x1520>
    f11a:	f1c2 0201 	rsb	r2, r2, #1
    f11e:	921b      	str	r2, [sp, #108]	; 0x6c
    f120:	e587      	b.n	ec32 <_svfprintf_r+0x1522>
    f122:	2367      	movs	r3, #103	; 0x67
    f124:	930b      	str	r3, [sp, #44]	; 0x2c
    f126:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f128:	780b      	ldrb	r3, [r1, #0]
    f12a:	2bff      	cmp	r3, #255	; 0xff
    f12c:	d079      	beq.n	f222 <_svfprintf_r+0x1b12>
    f12e:	2500      	movs	r5, #0
    f130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f132:	4628      	mov	r0, r5
    f134:	e003      	b.n	f13e <_svfprintf_r+0x1a2e>
    f136:	3001      	adds	r0, #1
    f138:	3101      	adds	r1, #1
    f13a:	2bff      	cmp	r3, #255	; 0xff
    f13c:	d008      	beq.n	f150 <_svfprintf_r+0x1a40>
    f13e:	4293      	cmp	r3, r2
    f140:	da06      	bge.n	f150 <_svfprintf_r+0x1a40>
    f142:	1ad2      	subs	r2, r2, r3
    f144:	784b      	ldrb	r3, [r1, #1]
    f146:	2b00      	cmp	r3, #0
    f148:	d1f5      	bne.n	f136 <_svfprintf_r+0x1a26>
    f14a:	780b      	ldrb	r3, [r1, #0]
    f14c:	3501      	adds	r5, #1
    f14e:	e7f4      	b.n	f13a <_svfprintf_r+0x1a2a>
    f150:	920c      	str	r2, [sp, #48]	; 0x30
    f152:	9113      	str	r1, [sp, #76]	; 0x4c
    f154:	900d      	str	r0, [sp, #52]	; 0x34
    f156:	950f      	str	r5, [sp, #60]	; 0x3c
    f158:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f15c:	9916      	ldr	r1, [sp, #88]	; 0x58
    f15e:	4413      	add	r3, r2
    f160:	9a05      	ldr	r2, [sp, #20]
    f162:	fb01 2303 	mla	r3, r1, r3, r2
    f166:	9305      	str	r3, [sp, #20]
    f168:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f16c:	9302      	str	r3, [sp, #8]
    f16e:	e5d5      	b.n	ed1c <_svfprintf_r+0x160c>
    f170:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f172:	18d3      	adds	r3, r2, r3
    f174:	4419      	add	r1, r3
    f176:	2366      	movs	r3, #102	; 0x66
    f178:	9105      	str	r1, [sp, #20]
    f17a:	930b      	str	r3, [sp, #44]	; 0x2c
    f17c:	e72d      	b.n	efda <_svfprintf_r+0x18ca>
    f17e:	f1c3 0301 	rsb	r3, r3, #1
    f182:	441a      	add	r2, r3
    f184:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f188:	9302      	str	r3, [sp, #8]
    f18a:	2367      	movs	r3, #103	; 0x67
    f18c:	9205      	str	r2, [sp, #20]
    f18e:	930b      	str	r3, [sp, #44]	; 0x2c
    f190:	e698      	b.n	eec4 <_svfprintf_r+0x17b4>
    f192:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    f196:	e759      	b.n	f04c <_svfprintf_r+0x193c>
    f198:	9b03      	ldr	r3, [sp, #12]
    f19a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    f19e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f1a2:	9305      	str	r3, [sp, #20]
    f1a4:	e4b4      	b.n	eb10 <_svfprintf_r+0x1400>
    f1a6:	ee18 3a90 	vmov	r3, s17
    f1aa:	2b00      	cmp	r3, #0
    f1ac:	bfb4      	ite	lt
    f1ae:	212d      	movlt	r1, #45	; 0x2d
    f1b0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    f1b4:	4c25      	ldr	r4, [pc, #148]	; (f24c <_svfprintf_r+0x1b3c>)
    f1b6:	4b26      	ldr	r3, [pc, #152]	; (f250 <_svfprintf_r+0x1b40>)
    f1b8:	bfb8      	it	lt
    f1ba:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    f1be:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    f1c2:	f7fe bc79 	b.w	dab8 <_svfprintf_r+0x3a8>
    f1c6:	9b03      	ldr	r3, [sp, #12]
    f1c8:	9302      	str	r3, [sp, #8]
    f1ca:	9305      	str	r3, [sp, #20]
    f1cc:	2373      	movs	r3, #115	; 0x73
    f1ce:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f1d2:	9003      	str	r0, [sp, #12]
    f1d4:	900f      	str	r0, [sp, #60]	; 0x3c
    f1d6:	900d      	str	r0, [sp, #52]	; 0x34
    f1d8:	930b      	str	r3, [sp, #44]	; 0x2c
    f1da:	f7fe bc7a 	b.w	dad2 <_svfprintf_r+0x3c2>
    f1de:	2302      	movs	r3, #2
    f1e0:	9314      	str	r3, [sp, #80]	; 0x50
    f1e2:	e584      	b.n	ecee <_svfprintf_r+0x15de>
    f1e4:	9a03      	ldr	r2, [sp, #12]
    f1e6:	4313      	orrs	r3, r2
    f1e8:	d105      	bne.n	f1f6 <_svfprintf_r+0x1ae6>
    f1ea:	2301      	movs	r3, #1
    f1ec:	2266      	movs	r2, #102	; 0x66
    f1ee:	9302      	str	r3, [sp, #8]
    f1f0:	920b      	str	r2, [sp, #44]	; 0x2c
    f1f2:	9305      	str	r3, [sp, #20]
    f1f4:	e666      	b.n	eec4 <_svfprintf_r+0x17b4>
    f1f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f1f8:	3301      	adds	r3, #1
    f1fa:	441a      	add	r2, r3
    f1fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f200:	9302      	str	r3, [sp, #8]
    f202:	2366      	movs	r3, #102	; 0x66
    f204:	9205      	str	r2, [sp, #20]
    f206:	930b      	str	r3, [sp, #44]	; 0x2c
    f208:	e65c      	b.n	eec4 <_svfprintf_r+0x17b4>
    f20a:	9a08      	ldr	r2, [sp, #32]
    f20c:	f899 3001 	ldrb.w	r3, [r9, #1]
    f210:	4689      	mov	r9, r1
    f212:	f852 1b04 	ldr.w	r1, [r2], #4
    f216:	9208      	str	r2, [sp, #32]
    f218:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    f21c:	9103      	str	r1, [sp, #12]
    f21e:	f7fe bad3 	b.w	d7c8 <_svfprintf_r+0xb8>
    f222:	2300      	movs	r3, #0
    f224:	930f      	str	r3, [sp, #60]	; 0x3c
    f226:	930d      	str	r3, [sp, #52]	; 0x34
    f228:	e796      	b.n	f158 <_svfprintf_r+0x1a48>
    f22a:	230c      	movs	r3, #12
    f22c:	f8cb 3000 	str.w	r3, [fp]
    f230:	f04f 33ff 	mov.w	r3, #4294967295
    f234:	9304      	str	r3, [sp, #16]
    f236:	f7fe bb81 	b.w	d93c <_svfprintf_r+0x22c>
    f23a:	ee1b 2a10 	vmov	r2, s22
    f23e:	8993      	ldrh	r3, [r2, #12]
    f240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f244:	8193      	strh	r3, [r2, #12]
    f246:	f7fe bec8 	b.w	dfda <_svfprintf_r+0x8ca>
    f24a:	bf00      	nop
    f24c:	20000c14 	.word	0x20000c14
    f250:	2000056c 	.word	0x2000056c

0000f254 <__ssvfscanf_r>:
    f254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f258:	ed2d 8b02 	vpush	{d8}
    f25c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    f260:	468b      	mov	fp, r1
    f262:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    f266:	af02      	add	r7, sp, #8
    f268:	048c      	lsls	r4, r1, #18
    f26a:	4681      	mov	r9, r0
    f26c:	64fa      	str	r2, [r7, #76]	; 0x4c
    f26e:	633b      	str	r3, [r7, #48]	; 0x30
    f270:	d409      	bmi.n	f286 <__ssvfscanf_r+0x32>
    f272:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    f276:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    f27a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f27e:	f8ab 100c 	strh.w	r1, [fp, #12]
    f282:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    f286:	2300      	movs	r3, #0
    f288:	461c      	mov	r4, r3
    f28a:	2208      	movs	r2, #8
    f28c:	4619      	mov	r1, r3
    f28e:	f107 0058 	add.w	r0, r7, #88	; 0x58
    f292:	62fb      	str	r3, [r7, #44]	; 0x2c
    f294:	46a2      	mov	sl, r4
    f296:	f7fc fb19 	bl	b8cc <memset>
    f29a:	643c      	str	r4, [r7, #64]	; 0x40
    f29c:	627c      	str	r4, [r7, #36]	; 0x24
    f29e:	63bc      	str	r4, [r7, #56]	; 0x38
    f2a0:	647c      	str	r4, [r7, #68]	; 0x44
    f2a2:	4b83      	ldr	r3, [pc, #524]	; (f4b0 <__ssvfscanf_r+0x25c>)
    f2a4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f2a8:	f7fc fbda 	bl	ba60 <__locale_mb_cur_max>
    f2ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
    f2b0:	4603      	mov	r3, r0
    f2b2:	9200      	str	r2, [sp, #0]
    f2b4:	f107 0154 	add.w	r1, r7, #84	; 0x54
    f2b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    f2ba:	4648      	mov	r0, r9
    f2bc:	47a0      	blx	r4
    f2be:	1e05      	subs	r5, r0, #0
    f2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f2c2:	db33      	blt.n	f32c <__ssvfscanf_r+0xd8>
    f2c4:	442b      	add	r3, r5
    f2c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    f2c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f2ca:	462e      	mov	r6, r5
    f2cc:	2b00      	cmp	r3, #0
    f2ce:	f000 80b6 	beq.w	f43e <__ssvfscanf_r+0x1ea>
    f2d2:	2d01      	cmp	r5, #1
    f2d4:	d038      	beq.n	f348 <__ssvfscanf_r+0xf4>
    f2d6:	2b25      	cmp	r3, #37	; 0x25
    f2d8:	d040      	beq.n	f35c <__ssvfscanf_r+0x108>
    f2da:	2d00      	cmp	r5, #0
    f2dc:	d0e1      	beq.n	f2a2 <__ssvfscanf_r+0x4e>
    f2de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f2e0:	1b9e      	subs	r6, r3, r6
    f2e2:	f8db 3004 	ldr.w	r3, [fp, #4]
    f2e6:	1e74      	subs	r4, r6, #1
    f2e8:	2b00      	cmp	r3, #0
    f2ea:	f340 8098 	ble.w	f41e <__ssvfscanf_r+0x1ca>
    f2ee:	f8db 1000 	ldr.w	r1, [fp]
    f2f2:	f894 c001 	ldrb.w	ip, [r4, #1]
    f2f6:	f891 e000 	ldrb.w	lr, [r1]
    f2fa:	1ca3      	adds	r3, r4, #2
    f2fc:	eb0a 0003 	add.w	r0, sl, r3
    f300:	45e6      	cmp	lr, ip
    f302:	f101 0101 	add.w	r1, r1, #1
    f306:	eba3 0206 	sub.w	r2, r3, r6
    f30a:	f104 0401 	add.w	r4, r4, #1
    f30e:	eba0 0006 	sub.w	r0, r0, r6
    f312:	f040 8094 	bne.w	f43e <__ssvfscanf_r+0x1ea>
    f316:	f8db 3004 	ldr.w	r3, [fp, #4]
    f31a:	f8cb 1000 	str.w	r1, [fp]
    f31e:	3b01      	subs	r3, #1
    f320:	42aa      	cmp	r2, r5
    f322:	f8cb 3004 	str.w	r3, [fp, #4]
    f326:	dbdf      	blt.n	f2e8 <__ssvfscanf_r+0x94>
    f328:	4682      	mov	sl, r0
    f32a:	e7ba      	b.n	f2a2 <__ssvfscanf_r+0x4e>
    f32c:	3301      	adds	r3, #1
    f32e:	64fb      	str	r3, [r7, #76]	; 0x4c
    f330:	2208      	movs	r2, #8
    f332:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    f336:	2100      	movs	r1, #0
    f338:	f107 0058 	add.w	r0, r7, #88	; 0x58
    f33c:	657b      	str	r3, [r7, #84]	; 0x54
    f33e:	f7fc fac5 	bl	b8cc <memset>
    f342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f344:	2b00      	cmp	r3, #0
    f346:	d07a      	beq.n	f43e <__ssvfscanf_r+0x1ea>
    f348:	4e5a      	ldr	r6, [pc, #360]	; (f4b4 <__ssvfscanf_r+0x260>)
    f34a:	5cf2      	ldrb	r2, [r6, r3]
    f34c:	0710      	lsls	r0, r2, #28
    f34e:	f100 851c 	bmi.w	fd8a <__ssvfscanf_r+0xb36>
    f352:	2b25      	cmp	r3, #37	; 0x25
    f354:	f040 8086 	bne.w	f464 <__ssvfscanf_r+0x210>
    f358:	2501      	movs	r5, #1
    f35a:	462e      	mov	r6, r5
    f35c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    f35e:	2400      	movs	r4, #0
    f360:	7802      	ldrb	r2, [r0, #0]
    f362:	46a0      	mov	r8, r4
    f364:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    f368:	1c41      	adds	r1, r0, #1
    f36a:	2b55      	cmp	r3, #85	; 0x55
    f36c:	d867      	bhi.n	f43e <__ssvfscanf_r+0x1ea>
    f36e:	e8df f013 	tbh	[pc, r3, lsl #1]
    f372:	070a      	.short	0x070a
    f374:	00660066 	.word	0x00660066
    f378:	00660066 	.word	0x00660066
    f37c:	00660701 	.word	0x00660701
    f380:	00660066 	.word	0x00660066
    f384:	00660066 	.word	0x00660066
    f388:	060c060c 	.word	0x060c060c
    f38c:	060c060c 	.word	0x060c060c
    f390:	060c060c 	.word	0x060c060c
    f394:	060c060c 	.word	0x060c060c
    f398:	060c060c 	.word	0x060c060c
    f39c:	00660066 	.word	0x00660066
    f3a0:	00660066 	.word	0x00660066
    f3a4:	00660066 	.word	0x00660066
    f3a8:	06180066 	.word	0x06180066
    f3ac:	048e0066 	.word	0x048e0066
    f3b0:	061804c9 	.word	0x061804c9
    f3b4:	06180618 	.word	0x06180618
    f3b8:	00660066 	.word	0x00660066
    f3bc:	00660066 	.word	0x00660066
    f3c0:	00660082 	.word	0x00660082
    f3c4:	04bf0066 	.word	0x04bf0066
    f3c8:	00660066 	.word	0x00660066
    f3cc:	00890066 	.word	0x00890066
    f3d0:	00660066 	.word	0x00660066
    f3d4:	00660066 	.word	0x00660066
    f3d8:	0066066b 	.word	0x0066066b
    f3dc:	06dd0066 	.word	0x06dd0066
    f3e0:	00660066 	.word	0x00660066
    f3e4:	00660066 	.word	0x00660066
    f3e8:	06180066 	.word	0x06180066
    f3ec:	04900066 	.word	0x04900066
    f3f0:	061804cb 	.word	0x061804cb
    f3f4:	06180618 	.word	0x06180618
    f3f8:	06d206be 	.word	0x06d206be
    f3fc:	00660082 	.word	0x00660082
    f400:	06f306e7 	.word	0x06f306e7
    f404:	04c106ac 	.word	0x04c106ac
    f408:	006606da 	.word	0x006606da
    f40c:	008b0066 	.word	0x008b0066
    f410:	06ca007d 	.word	0x06ca007d
    f414:	00660066 	.word	0x00660066
    f418:	0066066b 	.word	0x0066066b
    f41c:	007d      	.short	0x007d
    f41e:	4659      	mov	r1, fp
    f420:	4648      	mov	r0, r9
    f422:	f003 f8c1 	bl	125a8 <__ssrefill_r>
    f426:	2800      	cmp	r0, #0
    f428:	f43f af61 	beq.w	f2ee <__ssvfscanf_r+0x9a>
    f42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f42e:	2b00      	cmp	r3, #0
    f430:	f001 8052 	beq.w	104d8 <__ssvfscanf_r+0x1284>
    f434:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    f438:	065a      	lsls	r2, r3, #25
    f43a:	f101 804d 	bmi.w	104d8 <__ssvfscanf_r+0x1284>
    f43e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f440:	b143      	cbz	r3, f454 <__ssvfscanf_r+0x200>
    f442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f444:	f8d3 8000 	ldr.w	r8, [r3]
    f448:	f1b8 0f00 	cmp.w	r8, #0
    f44c:	d002      	beq.n	f454 <__ssvfscanf_r+0x200>
    f44e:	4640      	mov	r0, r8
    f450:	f7fa fb0c 	bl	9a6c <free>
    f454:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f456:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    f45a:	46bd      	mov	sp, r7
    f45c:	ecbd 8b02 	vpop	{d8}
    f460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f466:	2501      	movs	r5, #1
    f468:	1e5e      	subs	r6, r3, #1
    f46a:	e73a      	b.n	f2e2 <__ssvfscanf_r+0x8e>
    f46c:	0723      	lsls	r3, r4, #28
    f46e:	d1e6      	bne.n	f43e <__ssvfscanf_r+0x1ea>
    f470:	7842      	ldrb	r2, [r0, #1]
    f472:	4608      	mov	r0, r1
    f474:	e776      	b.n	f364 <__ssvfscanf_r+0x110>
    f476:	0722      	lsls	r2, r4, #28
    f478:	d1e1      	bne.n	f43e <__ssvfscanf_r+0x1ea>
    f47a:	7842      	ldrb	r2, [r0, #1]
    f47c:	f044 0402 	orr.w	r4, r4, #2
    f480:	4608      	mov	r0, r1
    f482:	e76f      	b.n	f364 <__ssvfscanf_r+0x110>
    f484:	f044 0401 	orr.w	r4, r4, #1
    f488:	64f9      	str	r1, [r7, #76]	; 0x4c
    f48a:	2502      	movs	r5, #2
    f48c:	f8db 3004 	ldr.w	r3, [fp, #4]
    f490:	2b00      	cmp	r3, #0
    f492:	f340 8408 	ble.w	fca6 <__ssvfscanf_r+0xa52>
    f496:	0660      	lsls	r0, r4, #25
    f498:	f140 840f 	bpl.w	fcba <__ssvfscanf_r+0xa66>
    f49c:	1e6b      	subs	r3, r5, #1
    f49e:	2b03      	cmp	r3, #3
    f4a0:	f201 80eb 	bhi.w	1067a <__ssvfscanf_r+0x1426>
    f4a4:	e8df f013 	tbh	[pc, r3, lsl #1]
    f4a8:	01f1027b 	.word	0x01f1027b
    f4ac:	0008014b 	.word	0x0008014b
    f4b0:	200085c8 	.word	0x200085c8
    f4b4:	20000a7d 	.word	0x20000a7d
    f4b8:	4648      	mov	r0, r9
    f4ba:	f001 fc8f 	bl	10ddc <_localeconv_r>
    f4be:	6803      	ldr	r3, [r0, #0]
    f4c0:	623b      	str	r3, [r7, #32]
    f4c2:	f108 33ff 	add.w	r3, r8, #4294967295
    f4c6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f4ca:	f240 855a 	bls.w	ff82 <__ssvfscanf_r+0xd2e>
    f4ce:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    f4d2:	eb08 0305 	add.w	r3, r8, r5
    f4d6:	613b      	str	r3, [r7, #16]
    f4d8:	f240 185d 	movw	r8, #349	; 0x15d
    f4dc:	2600      	movs	r6, #0
    f4de:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f4e2:	ee08 9a10 	vmov	s16, r9
    f4e6:	e9c7 6605 	strd	r6, r6, [r7, #20]
    f4ea:	63fe      	str	r6, [r7, #60]	; 0x3c
    f4ec:	637e      	str	r6, [r7, #52]	; 0x34
    f4ee:	61fe      	str	r6, [r7, #28]
    f4f0:	64be      	str	r6, [r7, #72]	; 0x48
    f4f2:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    f4f6:	62bb      	str	r3, [r7, #40]	; 0x28
    f4f8:	461d      	mov	r5, r3
    f4fa:	4646      	mov	r6, r8
    f4fc:	f8db 1000 	ldr.w	r1, [fp]
    f500:	780a      	ldrb	r2, [r1, #0]
    f502:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    f506:	2b4e      	cmp	r3, #78	; 0x4e
    f508:	d850      	bhi.n	f5ac <__ssvfscanf_r+0x358>
    f50a:	e8df f013 	tbh	[pc, r3, lsl #1]
    f50e:	037e      	.short	0x037e
    f510:	037e004f 	.word	0x037e004f
    f514:	004f004f 	.word	0x004f004f
    f518:	00a600a3 	.word	0x00a600a3
    f51c:	00a600a6 	.word	0x00a600a6
    f520:	00a600a6 	.word	0x00a600a6
    f524:	00a600a6 	.word	0x00a600a6
    f528:	00a600a6 	.word	0x00a600a6
    f52c:	004f004f 	.word	0x004f004f
    f530:	004f004f 	.word	0x004f004f
    f534:	004f004f 	.word	0x004f004f
    f538:	0374004f 	.word	0x0374004f
    f53c:	030b030b 	.word	0x030b030b
    f540:	039e030b 	.word	0x039e030b
    f544:	004f0394 	.word	0x004f0394
    f548:	0384004f 	.word	0x0384004f
    f54c:	004f004f 	.word	0x004f004f
    f550:	004f004f 	.word	0x004f004f
    f554:	004f035d 	.word	0x004f035d
    f558:	004f033a 	.word	0x004f033a
    f55c:	004f004f 	.word	0x004f004f
    f560:	004f0333 	.word	0x004f0333
    f564:	004f004f 	.word	0x004f004f
    f568:	036d031e 	.word	0x036d031e
    f56c:	004f004f 	.word	0x004f004f
    f570:	004f004f 	.word	0x004f004f
    f574:	004f004f 	.word	0x004f004f
    f578:	0374004f 	.word	0x0374004f
    f57c:	030b030b 	.word	0x030b030b
    f580:	039e030b 	.word	0x039e030b
    f584:	004f0394 	.word	0x004f0394
    f588:	0384004f 	.word	0x0384004f
    f58c:	004f004f 	.word	0x004f004f
    f590:	004f004f 	.word	0x004f004f
    f594:	004f035d 	.word	0x004f035d
    f598:	004f033a 	.word	0x004f033a
    f59c:	004f004f 	.word	0x004f004f
    f5a0:	004f0333 	.word	0x004f0333
    f5a4:	004f004f 	.word	0x004f004f
    f5a8:	036d031e 	.word	0x036d031e
    f5ac:	05a0      	lsls	r0, r4, #22
    f5ae:	d56f      	bpl.n	f690 <__ssvfscanf_r+0x43c>
    f5b0:	6a38      	ldr	r0, [r7, #32]
    f5b2:	7803      	ldrb	r3, [r0, #0]
    f5b4:	4293      	cmp	r3, r2
    f5b6:	d16b      	bne.n	f690 <__ssvfscanf_r+0x43c>
    f5b8:	e9c7 4502 	strd	r4, r5, [r7, #8]
    f5bc:	607e      	str	r6, [r7, #4]
    f5be:	4681      	mov	r9, r0
    f5c0:	ee18 6a10 	vmov	r6, s16
    f5c4:	f04f 0800 	mov.w	r8, #0
    f5c8:	465c      	mov	r4, fp
    f5ca:	e007      	b.n	f5dc <__ssvfscanf_r+0x388>
    f5cc:	6021      	str	r1, [r4, #0]
    f5ce:	f891 e000 	ldrb.w	lr, [r1]
    f5d2:	f899 0000 	ldrb.w	r0, [r9]
    f5d6:	4586      	cmp	lr, r0
    f5d8:	d11c      	bne.n	f614 <__ssvfscanf_r+0x3c0>
    f5da:	46da      	mov	sl, fp
    f5dc:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    f5e0:	4645      	mov	r5, r8
    f5e2:	f10a 0b01 	add.w	fp, sl, #1
    f5e6:	3101      	adds	r1, #1
    f5e8:	f108 0801 	add.w	r8, r8, #1
    f5ec:	2800      	cmp	r0, #0
    f5ee:	f000 8664 	beq.w	102ba <__ssvfscanf_r+0x1066>
    f5f2:	6860      	ldr	r0, [r4, #4]
    f5f4:	3801      	subs	r0, #1
    f5f6:	2800      	cmp	r0, #0
    f5f8:	6060      	str	r0, [r4, #4]
    f5fa:	dce7      	bgt.n	f5cc <__ssvfscanf_r+0x378>
    f5fc:	4621      	mov	r1, r4
    f5fe:	4630      	mov	r0, r6
    f600:	f002 ffd2 	bl	125a8 <__ssrefill_r>
    f604:	b930      	cbnz	r0, f614 <__ssvfscanf_r+0x3c0>
    f606:	6821      	ldr	r1, [r4, #0]
    f608:	f899 0000 	ldrb.w	r0, [r9]
    f60c:	f891 e000 	ldrb.w	lr, [r1]
    f610:	4586      	cmp	lr, r0
    f612:	d0e2      	beq.n	f5da <__ssvfscanf_r+0x386>
    f614:	46a3      	mov	fp, r4
    f616:	6a3a      	ldr	r2, [r7, #32]
    f618:	68bc      	ldr	r4, [r7, #8]
    f61a:	613d      	str	r5, [r7, #16]
    f61c:	462b      	mov	r3, r5
    f61e:	46b1      	mov	r9, r6
    f620:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f622:	68fd      	ldr	r5, [r7, #12]
    f624:	64bd      	str	r5, [r7, #72]	; 0x48
    f626:	3301      	adds	r3, #1
    f628:	465d      	mov	r5, fp
    f62a:	eb02 0803 	add.w	r8, r2, r3
    f62e:	46b3      	mov	fp, r6
    f630:	4626      	mov	r6, r4
    f632:	4614      	mov	r4, r2
    f634:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    f638:	462a      	mov	r2, r5
    f63a:	4648      	mov	r0, r9
    f63c:	f002 ff74 	bl	12528 <_sungetc_r>
    f640:	4544      	cmp	r4, r8
    f642:	d1f7      	bne.n	f634 <__ssvfscanf_r+0x3e0>
    f644:	693b      	ldr	r3, [r7, #16]
    f646:	4634      	mov	r4, r6
    f648:	ebaa 0a03 	sub.w	sl, sl, r3
    f64c:	465e      	mov	r6, fp
    f64e:	46ab      	mov	fp, r5
    f650:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    f652:	e020      	b.n	f696 <__ssvfscanf_r+0x442>
    f654:	05e0      	lsls	r0, r4, #23
    f656:	f100 8501 	bmi.w	1005c <__ssvfscanf_r+0xe08>
    f65a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f65c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    f65e:	42d9      	cmn	r1, r3
    f660:	d116      	bne.n	f690 <__ssvfscanf_r+0x43c>
    f662:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    f666:	f805 2b01 	strb.w	r2, [r5], #1
    f66a:	3e01      	subs	r6, #1
    f66c:	f8db 3004 	ldr.w	r3, [fp, #4]
    f670:	3b01      	subs	r3, #1
    f672:	2b00      	cmp	r3, #0
    f674:	f10a 0a01 	add.w	sl, sl, #1
    f678:	f8cb 3004 	str.w	r3, [fp, #4]
    f67c:	f340 836f 	ble.w	fd5e <__ssvfscanf_r+0xb0a>
    f680:	f8db 3000 	ldr.w	r3, [fp]
    f684:	3301      	adds	r3, #1
    f686:	f8cb 3000 	str.w	r3, [fp]
    f68a:	2e00      	cmp	r6, #0
    f68c:	f47f af36 	bne.w	f4fc <__ssvfscanf_r+0x2a8>
    f690:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f692:	ee18 9a10 	vmov	r9, s16
    f696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f698:	2b00      	cmp	r3, #0
    f69a:	f040 82dc 	bne.w	fc56 <__ssvfscanf_r+0xa02>
    f69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f6a0:	3b01      	subs	r3, #1
    f6a2:	2b01      	cmp	r3, #1
    f6a4:	f241 8016 	bls.w	106d4 <__ssvfscanf_r+0x1480>
    f6a8:	1e73      	subs	r3, r6, #1
    f6aa:	2b06      	cmp	r3, #6
    f6ac:	f240 8627 	bls.w	102fe <__ssvfscanf_r+0x10aa>
    f6b0:	05e3      	lsls	r3, r4, #23
    f6b2:	d51b      	bpl.n	f6ec <__ssvfscanf_r+0x498>
    f6b4:	0566      	lsls	r6, r4, #21
    f6b6:	f101 80b5 	bmi.w	10824 <__ssvfscanf_r+0x15d0>
    f6ba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    f6be:	2965      	cmp	r1, #101	; 0x65
    f6c0:	f105 33ff 	add.w	r3, r5, #4294967295
    f6c4:	f10a 36ff 	add.w	r6, sl, #4294967295
    f6c8:	d00a      	beq.n	f6e0 <__ssvfscanf_r+0x48c>
    f6ca:	2945      	cmp	r1, #69	; 0x45
    f6cc:	d008      	beq.n	f6e0 <__ssvfscanf_r+0x48c>
    f6ce:	465a      	mov	r2, fp
    f6d0:	4648      	mov	r0, r9
    f6d2:	f002 ff29 	bl	12528 <_sungetc_r>
    f6d6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    f6da:	f1aa 0602 	sub.w	r6, sl, #2
    f6de:	1eab      	subs	r3, r5, #2
    f6e0:	465a      	mov	r2, fp
    f6e2:	4648      	mov	r0, r9
    f6e4:	46b2      	mov	sl, r6
    f6e6:	461d      	mov	r5, r3
    f6e8:	f002 ff1e 	bl	12528 <_sungetc_r>
    f6ec:	f014 0210 	ands.w	r2, r4, #16
    f6f0:	f47f add7 	bne.w	f2a2 <__ssvfscanf_r+0x4e>
    f6f4:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    f6f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f6fc:	702a      	strb	r2, [r5, #0]
    f6fe:	f000 84d2 	beq.w	100a6 <__ssvfscanf_r+0xe52>
    f702:	69bb      	ldr	r3, [r7, #24]
    f704:	2b00      	cmp	r3, #0
    f706:	f040 872c 	bne.w	10562 <__ssvfscanf_r+0x130e>
    f70a:	4648      	mov	r0, r9
    f70c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f70e:	2200      	movs	r2, #0
    f710:	f7fb fda2 	bl	b258 <_strtod_r>
    f714:	07e0      	lsls	r0, r4, #31
    f716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f718:	f100 85c9 	bmi.w	102ae <__ssvfscanf_r+0x105a>
    f71c:	07a1      	lsls	r1, r4, #30
    f71e:	f100 85c6 	bmi.w	102ae <__ssvfscanf_r+0x105a>
    f722:	eeb4 0b40 	vcmp.f64	d0, d0
    f726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f72a:	f853 4b04 	ldr.w	r4, [r3], #4
    f72e:	f180 86f4 	bvs.w	1051a <__ssvfscanf_r+0x12c6>
    f732:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f736:	633b      	str	r3, [r7, #48]	; 0x30
    f738:	ed84 0a00 	vstr	s0, [r4]
    f73c:	e3a2      	b.n	fe84 <__ssvfscanf_r+0xc30>
    f73e:	f108 33ff 	add.w	r3, r8, #4294967295
    f742:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f746:	f240 83a2 	bls.w	fe8e <__ssvfscanf_r+0xc3a>
    f74a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    f74e:	eb08 0302 	add.w	r3, r8, r2
    f752:	63fb      	str	r3, [r7, #60]	; 0x3c
    f754:	f240 185d 	movw	r8, #349	; 0x15d
    f758:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f75c:	2200      	movs	r2, #0
    f75e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    f760:	62bb      	str	r3, [r7, #40]	; 0x28
    f762:	4659      	mov	r1, fp
    f764:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    f768:	46d3      	mov	fp, sl
    f76a:	461d      	mov	r5, r3
    f76c:	4692      	mov	sl, r2
    f76e:	680a      	ldr	r2, [r1, #0]
    f770:	7810      	ldrb	r0, [r2, #0]
    f772:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    f776:	2b4d      	cmp	r3, #77	; 0x4d
    f778:	d860      	bhi.n	f83c <__ssvfscanf_r+0x5e8>
    f77a:	e8df f013 	tbh	[pc, r3, lsl #1]
    f77e:	0282      	.short	0x0282
    f780:	0282005f 	.word	0x0282005f
    f784:	005f005f 	.word	0x005f005f
    f788:	01e002cd 	.word	0x01e002cd
    f78c:	01e001e0 	.word	0x01e001e0
    f790:	01e001e0 	.word	0x01e001e0
    f794:	01e001e0 	.word	0x01e001e0
    f798:	026f026f 	.word	0x026f026f
    f79c:	005f005f 	.word	0x005f005f
    f7a0:	005f005f 	.word	0x005f005f
    f7a4:	005f005f 	.word	0x005f005f
    f7a8:	004e005f 	.word	0x004e005f
    f7ac:	004e004e 	.word	0x004e004e
    f7b0:	004e004e 	.word	0x004e004e
    f7b4:	005f004e 	.word	0x005f004e
    f7b8:	005f005f 	.word	0x005f005f
    f7bc:	005f005f 	.word	0x005f005f
    f7c0:	005f005f 	.word	0x005f005f
    f7c4:	005f005f 	.word	0x005f005f
    f7c8:	005f005f 	.word	0x005f005f
    f7cc:	005f005f 	.word	0x005f005f
    f7d0:	005f005f 	.word	0x005f005f
    f7d4:	005f005f 	.word	0x005f005f
    f7d8:	005f0276 	.word	0x005f0276
    f7dc:	005f005f 	.word	0x005f005f
    f7e0:	005f005f 	.word	0x005f005f
    f7e4:	005f005f 	.word	0x005f005f
    f7e8:	004e005f 	.word	0x004e005f
    f7ec:	004e004e 	.word	0x004e004e
    f7f0:	004e004e 	.word	0x004e004e
    f7f4:	005f004e 	.word	0x005f004e
    f7f8:	005f005f 	.word	0x005f005f
    f7fc:	005f005f 	.word	0x005f005f
    f800:	005f005f 	.word	0x005f005f
    f804:	005f005f 	.word	0x005f005f
    f808:	005f005f 	.word	0x005f005f
    f80c:	005f005f 	.word	0x005f005f
    f810:	005f005f 	.word	0x005f005f
    f814:	005f005f 	.word	0x005f005f
    f818:	0276      	.short	0x0276
    f81a:	2e0a      	cmp	r6, #10
    f81c:	dd0e      	ble.n	f83c <__ssvfscanf_r+0x5e8>
    f81e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    f822:	684b      	ldr	r3, [r1, #4]
    f824:	f805 0b01 	strb.w	r0, [r5], #1
    f828:	3b01      	subs	r3, #1
    f82a:	2b00      	cmp	r3, #0
    f82c:	604b      	str	r3, [r1, #4]
    f82e:	f340 828d 	ble.w	fd4c <__ssvfscanf_r+0xaf8>
    f832:	3201      	adds	r2, #1
    f834:	600a      	str	r2, [r1, #0]
    f836:	f1b8 0801 	subs.w	r8, r8, #1
    f83a:	d198      	bne.n	f76e <__ssvfscanf_r+0x51a>
    f83c:	05e0      	lsls	r0, r4, #23
    f83e:	46d0      	mov	r8, sl
    f840:	63be      	str	r6, [r7, #56]	; 0x38
    f842:	46da      	mov	sl, fp
    f844:	468b      	mov	fp, r1
    f846:	d507      	bpl.n	f858 <__ssvfscanf_r+0x604>
    f848:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f84a:	429d      	cmp	r5, r3
    f84c:	f200 8422 	bhi.w	10094 <__ssvfscanf_r+0xe40>
    f850:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f852:	429d      	cmp	r5, r3
    f854:	f43f adf3 	beq.w	f43e <__ssvfscanf_r+0x1ea>
    f858:	f014 0210 	ands.w	r2, r4, #16
    f85c:	d110      	bne.n	f880 <__ssvfscanf_r+0x62c>
    f85e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f862:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    f864:	702a      	strb	r2, [r5, #0]
    f866:	4648      	mov	r0, r9
    f868:	47b0      	blx	r6
    f86a:	06a1      	lsls	r1, r4, #26
    f86c:	f140 8408 	bpl.w	10080 <__ssvfscanf_r+0xe2c>
    f870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f872:	f853 2b04 	ldr.w	r2, [r3], #4
    f876:	6010      	str	r0, [r2, #0]
    f878:	633b      	str	r3, [r7, #48]	; 0x30
    f87a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f87c:	3301      	adds	r3, #1
    f87e:	647b      	str	r3, [r7, #68]	; 0x44
    f880:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f882:	1aed      	subs	r5, r5, r3
    f884:	4445      	add	r5, r8
    f886:	44aa      	add	sl, r5
    f888:	e50b      	b.n	f2a2 <__ssvfscanf_r+0x4e>
    f88a:	f1b8 0f00 	cmp.w	r8, #0
    f88e:	bf08      	it	eq
    f890:	f04f 38ff 	moveq.w	r8, #4294967295
    f894:	07e0      	lsls	r0, r4, #31
    f896:	f140 8295 	bpl.w	fdc4 <__ssvfscanf_r+0xb70>
    f89a:	f014 0310 	ands.w	r3, r4, #16
    f89e:	637b      	str	r3, [r7, #52]	; 0x34
    f8a0:	f040 8474 	bne.w	1018c <__ssvfscanf_r+0xf38>
    f8a4:	0621      	lsls	r1, r4, #24
    f8a6:	f140 8666 	bpl.w	10576 <__ssvfscanf_r+0x1322>
    f8aa:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    f8ac:	f854 3b04 	ldr.w	r3, [r4], #4
    f8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    f8b2:	2b00      	cmp	r3, #0
    f8b4:	f43f adc3 	beq.w	f43e <__ssvfscanf_r+0x1ea>
    f8b8:	2080      	movs	r0, #128	; 0x80
    f8ba:	f7fa f8cf 	bl	9a5c <malloc>
    f8be:	64b8      	str	r0, [r7, #72]	; 0x48
    f8c0:	2800      	cmp	r0, #0
    f8c2:	f000 8778 	beq.w	107b6 <__ssvfscanf_r+0x1562>
    f8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f8c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    f8ca:	601a      	str	r2, [r3, #0]
    f8cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    f8ce:	88d5      	ldrh	r5, [r2, #6]
    f8d0:	8893      	ldrh	r3, [r2, #4]
    f8d2:	429d      	cmp	r5, r3
    f8d4:	f080 8552 	bcs.w	1037c <__ssvfscanf_r+0x1128>
    f8d8:	6810      	ldr	r0, [r2, #0]
    f8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f8dc:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    f8e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f8e2:	633c      	str	r4, [r7, #48]	; 0x30
    f8e4:	3501      	adds	r5, #1
    f8e6:	80dd      	strh	r5, [r3, #6]
    f8e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f8ea:	62bb      	str	r3, [r7, #40]	; 0x28
    f8ec:	2320      	movs	r3, #32
    f8ee:	623b      	str	r3, [r7, #32]
    f8f0:	f8db 3000 	ldr.w	r3, [fp]
    f8f4:	4eb1      	ldr	r6, [pc, #708]	; (fbbc <__ssvfscanf_r+0x968>)
    f8f6:	781b      	ldrb	r3, [r3, #0]
    f8f8:	5cf3      	ldrb	r3, [r6, r3]
    f8fa:	f013 0308 	ands.w	r3, r3, #8
    f8fe:	f040 84bb 	bne.w	10278 <__ssvfscanf_r+0x1024>
    f902:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    f904:	627e      	str	r6, [r7, #36]	; 0x24
    f906:	461d      	mov	r5, r3
    f908:	f7fc f8aa 	bl	ba60 <__locale_mb_cur_max>
    f90c:	42a8      	cmp	r0, r5
    f90e:	f43f ad8d 	beq.w	f42c <__ssvfscanf_r+0x1d8>
    f912:	e9db 3200 	ldrd	r3, r2, [fp]
    f916:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    f91a:	f813 1b01 	ldrb.w	r1, [r3], #1
    f91e:	5541      	strb	r1, [r0, r5]
    f920:	3a01      	subs	r2, #1
    f922:	2c03      	cmp	r4, #3
    f924:	e9cb 3200 	strd	r3, r2, [fp]
    f928:	f105 0501 	add.w	r5, r5, #1
    f92c:	f107 0668 	add.w	r6, r7, #104	; 0x68
    f930:	d102      	bne.n	f938 <__ssvfscanf_r+0x6e4>
    f932:	6833      	ldr	r3, [r6, #0]
    f934:	2b04      	cmp	r3, #4
    f936:	d004      	beq.n	f942 <__ssvfscanf_r+0x6ee>
    f938:	2208      	movs	r2, #8
    f93a:	2100      	movs	r1, #0
    f93c:	4630      	mov	r0, r6
    f93e:	f7fb ffc5 	bl	b8cc <memset>
    f942:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    f946:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    f948:	9600      	str	r6, [sp, #0]
    f94a:	462b      	mov	r3, r5
    f94c:	4648      	mov	r0, r9
    f94e:	f002 fc17 	bl	12180 <_mbrtowc_r>
    f952:	1c42      	adds	r2, r0, #1
    f954:	4604      	mov	r4, r0
    f956:	f43f ad69 	beq.w	f42c <__ssvfscanf_r+0x1d8>
    f95a:	2800      	cmp	r0, #0
    f95c:	f040 8478 	bne.w	10250 <__ssvfscanf_r+0xffc>
    f960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f962:	6018      	str	r0, [r3, #0]
    f964:	f002 fc68 	bl	12238 <iswspace>
    f968:	2800      	cmp	r0, #0
    f96a:	f040 865c 	bne.w	10626 <__ssvfscanf_r+0x13d2>
    f96e:	44aa      	add	sl, r5
    f970:	f108 38ff 	add.w	r8, r8, #4294967295
    f974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f976:	2b00      	cmp	r3, #0
    f978:	f040 8633 	bne.w	105e2 <__ssvfscanf_r+0x138e>
    f97c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f97e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f980:	3304      	adds	r3, #4
    f982:	64bb      	str	r3, [r7, #72]	; 0x48
    f984:	2a00      	cmp	r2, #0
    f986:	f000 862c 	beq.w	105e2 <__ssvfscanf_r+0x138e>
    f98a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f98c:	1a9d      	subs	r5, r3, r2
    f98e:	6a3b      	ldr	r3, [r7, #32]
    f990:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    f994:	f240 8756 	bls.w	10844 <__ssvfscanf_r+0x15f0>
    f998:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    f99a:	f000 bc5c 	b.w	10256 <__ssvfscanf_r+0x1002>
    f99e:	f1b8 0f00 	cmp.w	r8, #0
    f9a2:	bf08      	it	eq
    f9a4:	f04f 38ff 	moveq.w	r8, #4294967295
    f9a8:	07e0      	lsls	r0, r4, #31
    f9aa:	f140 827b 	bpl.w	fea4 <__ssvfscanf_r+0xc50>
    f9ae:	f014 0310 	ands.w	r3, r4, #16
    f9b2:	62bb      	str	r3, [r7, #40]	; 0x28
    f9b4:	f040 83f3 	bne.w	1019e <__ssvfscanf_r+0xf4a>
    f9b8:	0621      	lsls	r1, r4, #24
    f9ba:	f140 85ed 	bpl.w	10598 <__ssvfscanf_r+0x1344>
    f9be:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    f9c0:	f856 3b04 	ldr.w	r3, [r6], #4
    f9c4:	623b      	str	r3, [r7, #32]
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	f43f ad39 	beq.w	f43e <__ssvfscanf_r+0x1ea>
    f9cc:	2080      	movs	r0, #128	; 0x80
    f9ce:	f7fa f845 	bl	9a5c <malloc>
    f9d2:	4604      	mov	r4, r0
    f9d4:	2800      	cmp	r0, #0
    f9d6:	f000 86ee 	beq.w	107b6 <__ssvfscanf_r+0x1562>
    f9da:	6a3b      	ldr	r3, [r7, #32]
    f9dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    f9de:	6018      	str	r0, [r3, #0]
    f9e0:	88d5      	ldrh	r5, [r2, #6]
    f9e2:	8893      	ldrh	r3, [r2, #4]
    f9e4:	429d      	cmp	r5, r3
    f9e6:	f080 84dd 	bcs.w	103a4 <__ssvfscanf_r+0x1150>
    f9ea:	6810      	ldr	r0, [r2, #0]
    f9ec:	6a3b      	ldr	r3, [r7, #32]
    f9ee:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    f9f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f9f4:	633e      	str	r6, [r7, #48]	; 0x30
    f9f6:	3501      	adds	r5, #1
    f9f8:	80dd      	strh	r5, [r3, #6]
    f9fa:	2320      	movs	r3, #32
    f9fc:	61fc      	str	r4, [r7, #28]
    f9fe:	61bb      	str	r3, [r7, #24]
    fa00:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    fa02:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    fa06:	2500      	movs	r5, #0
    fa08:	46c2      	mov	sl, r8
    fa0a:	46a0      	mov	r8, r4
    fa0c:	f7fc f828 	bl	ba60 <__locale_mb_cur_max>
    fa10:	42a8      	cmp	r0, r5
    fa12:	f43f ad0b 	beq.w	f42c <__ssvfscanf_r+0x1d8>
    fa16:	e9db 3200 	ldrd	r3, r2, [fp]
    fa1a:	f813 1b01 	ldrb.w	r1, [r3], #1
    fa1e:	3a01      	subs	r2, #1
    fa20:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    fa24:	e9cb 3200 	strd	r3, r2, [fp]
    fa28:	2e03      	cmp	r6, #3
    fa2a:	f105 0301 	add.w	r3, r5, #1
    fa2e:	5541      	strb	r1, [r0, r5]
    fa30:	64bb      	str	r3, [r7, #72]	; 0x48
    fa32:	f107 0460 	add.w	r4, r7, #96	; 0x60
    fa36:	d102      	bne.n	fa3e <__ssvfscanf_r+0x7ea>
    fa38:	6823      	ldr	r3, [r4, #0]
    fa3a:	2b04      	cmp	r3, #4
    fa3c:	d004      	beq.n	fa48 <__ssvfscanf_r+0x7f4>
    fa3e:	2208      	movs	r2, #8
    fa40:	2100      	movs	r1, #0
    fa42:	4620      	mov	r0, r4
    fa44:	f7fb ff42 	bl	b8cc <memset>
    fa48:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    fa4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fa4e:	9400      	str	r4, [sp, #0]
    fa50:	4641      	mov	r1, r8
    fa52:	4648      	mov	r0, r9
    fa54:	f002 fb94 	bl	12180 <_mbrtowc_r>
    fa58:	1c42      	adds	r2, r0, #1
    fa5a:	4606      	mov	r6, r0
    fa5c:	f43f ace6 	beq.w	f42c <__ssvfscanf_r+0x1d8>
    fa60:	2800      	cmp	r0, #0
    fa62:	f040 82ca 	bne.w	fffa <__ssvfscanf_r+0xda6>
    fa66:	f8c8 0000 	str.w	r0, [r8]
    fa6a:	4605      	mov	r5, r0
    fa6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
    fa70:	2208      	movs	r2, #8
    fa72:	2100      	movs	r1, #0
    fa74:	4618      	mov	r0, r3
    fa76:	637b      	str	r3, [r7, #52]	; 0x34
    fa78:	f7fb ff28 	bl	b8cc <memset>
    fa7c:	4950      	ldr	r1, [pc, #320]	; (fbc0 <__ssvfscanf_r+0x96c>)
    fa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fa80:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    fa84:	462a      	mov	r2, r5
    fa86:	4648      	mov	r0, r9
    fa88:	460d      	mov	r5, r1
    fa8a:	f107 0150 	add.w	r1, r7, #80	; 0x50
    fa8e:	47a8      	blx	r5
    fa90:	2801      	cmp	r0, #1
    fa92:	f000 83d5 	beq.w	10240 <__ssvfscanf_r+0xfec>
    fa96:	2200      	movs	r2, #0
    fa98:	f107 0370 	add.w	r3, r7, #112	; 0x70
    fa9c:	5c9b      	ldrb	r3, [r3, r2]
    fa9e:	2b00      	cmp	r3, #0
    faa0:	f000 85a1 	beq.w	105e6 <__ssvfscanf_r+0x1392>
    faa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    faa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    faa8:	2e03      	cmp	r6, #3
    faaa:	4413      	add	r3, r2
    faac:	63fb      	str	r3, [r7, #60]	; 0x3c
    faae:	f000 83ca 	beq.w	10246 <__ssvfscanf_r+0xff2>
    fab2:	f10a 3aff 	add.w	sl, sl, #4294967295
    fab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fab8:	b95b      	cbnz	r3, fad2 <__ssvfscanf_r+0x87e>
    faba:	6a3b      	ldr	r3, [r7, #32]
    fabc:	f108 0804 	add.w	r8, r8, #4
    fac0:	b13b      	cbz	r3, fad2 <__ssvfscanf_r+0x87e>
    fac2:	69fb      	ldr	r3, [r7, #28]
    fac4:	eba8 0403 	sub.w	r4, r8, r3
    fac8:	69bb      	ldr	r3, [r7, #24]
    faca:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    face:	f240 8405 	bls.w	102dc <__ssvfscanf_r+0x1088>
    fad2:	f8db 3004 	ldr.w	r3, [fp, #4]
    fad6:	2b00      	cmp	r3, #0
    fad8:	f04f 0500 	mov.w	r5, #0
    fadc:	f340 8296 	ble.w	1000c <__ssvfscanf_r+0xdb8>
    fae0:	f1ba 0f00 	cmp.w	sl, #0
    fae4:	d192      	bne.n	fa0c <__ssvfscanf_r+0x7b8>
    fae6:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    faea:	627e      	str	r6, [r7, #36]	; 0x24
    faec:	4644      	mov	r4, r8
    faee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    faf0:	2b00      	cmp	r3, #0
    faf2:	f47f abd6 	bne.w	f2a2 <__ssvfscanf_r+0x4e>
    faf6:	6023      	str	r3, [r4, #0]
    faf8:	6a3b      	ldr	r3, [r7, #32]
    fafa:	2b00      	cmp	r3, #0
    fafc:	f000 81c2 	beq.w	fe84 <__ssvfscanf_r+0xc30>
    fb00:	69fb      	ldr	r3, [r7, #28]
    fb02:	69ba      	ldr	r2, [r7, #24]
    fb04:	1ae1      	subs	r1, r4, r3
    fb06:	108b      	asrs	r3, r1, #2
    fb08:	3301      	adds	r3, #1
    fb0a:	429a      	cmp	r2, r3
    fb0c:	f240 81ba 	bls.w	fe84 <__ssvfscanf_r+0xc30>
    fb10:	6a3c      	ldr	r4, [r7, #32]
    fb12:	3104      	adds	r1, #4
    fb14:	6820      	ldr	r0, [r4, #0]
    fb16:	f7fa fa6d 	bl	9ff4 <realloc>
    fb1a:	2800      	cmp	r0, #0
    fb1c:	f000 81b2 	beq.w	fe84 <__ssvfscanf_r+0xc30>
    fb20:	6020      	str	r0, [r4, #0]
    fb22:	e1af      	b.n	fe84 <__ssvfscanf_r+0xc30>
    fb24:	0521      	lsls	r1, r4, #20
    fb26:	f57f adb3 	bpl.w	f690 <__ssvfscanf_r+0x43c>
    fb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fb2c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fb2e:	185b      	adds	r3, r3, r1
    fb30:	f47f adae 	bne.w	f690 <__ssvfscanf_r+0x43c>
    fb34:	64bb      	str	r3, [r7, #72]	; 0x48
    fb36:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    fb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    fb3c:	e593      	b.n	f666 <__ssvfscanf_r+0x412>
    fb3e:	4b21      	ldr	r3, [pc, #132]	; (fbc4 <__ssvfscanf_r+0x970>)
    fb40:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    fb44:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    fb48:	e66b      	b.n	f822 <__ssvfscanf_r+0x5ce>
    fb4a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    fb4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    fb52:	f47f ad9d 	bne.w	f690 <__ssvfscanf_r+0x43c>
    fb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb58:	2b01      	cmp	r3, #1
    fb5a:	f47f ad99 	bne.w	f690 <__ssvfscanf_r+0x43c>
    fb5e:	2330      	movs	r3, #48	; 0x30
    fb60:	f805 3b01 	strb.w	r3, [r5], #1
    fb64:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    fb68:	2300      	movs	r3, #0
    fb6a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    fb6e:	3e01      	subs	r6, #1
    fb70:	637b      	str	r3, [r7, #52]	; 0x34
    fb72:	e578      	b.n	f666 <__ssvfscanf_r+0x412>
    fb74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fb76:	2b06      	cmp	r3, #6
    fb78:	f040 8574 	bne.w	10664 <__ssvfscanf_r+0x1410>
    fb7c:	2307      	movs	r3, #7
    fb7e:	64bb      	str	r3, [r7, #72]	; 0x48
    fb80:	e571      	b.n	f666 <__ssvfscanf_r+0x412>
    fb82:	0523      	lsls	r3, r4, #20
    fb84:	f57f ad84 	bpl.w	f690 <__ssvfscanf_r+0x43c>
    fb88:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    fb8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    fb90:	d005      	beq.n	fb9e <__ssvfscanf_r+0x94a>
    fb92:	0561      	lsls	r1, r4, #21
    fb94:	f57f ad7c 	bpl.w	f690 <__ssvfscanf_r+0x43c>
    fb98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb9a:	2b00      	cmp	r3, #0
    fb9c:	d047      	beq.n	fc2e <__ssvfscanf_r+0x9da>
    fb9e:	05a3      	lsls	r3, r4, #22
    fba0:	d404      	bmi.n	fbac <__ssvfscanf_r+0x958>
    fba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fba4:	69f9      	ldr	r1, [r7, #28]
    fba6:	1a5b      	subs	r3, r3, r1
    fba8:	e9c7 5305 	strd	r5, r3, [r7, #20]
    fbac:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    fbb0:	2300      	movs	r3, #0
    fbb2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    fbb6:	637b      	str	r3, [r7, #52]	; 0x34
    fbb8:	e555      	b.n	f666 <__ssvfscanf_r+0x412>
    fbba:	bf00      	nop
    fbbc:	20000a7d 	.word	0x20000a7d
    fbc0:	200085c8 	.word	0x200085c8
    fbc4:	200026a0 	.word	0x200026a0
    fbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fbca:	2b00      	cmp	r3, #0
    fbcc:	f000 81ff 	beq.w	ffce <__ssvfscanf_r+0xd7a>
    fbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fbd2:	2b02      	cmp	r3, #2
    fbd4:	f000 83b0 	beq.w	10338 <__ssvfscanf_r+0x10e4>
    fbd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fbda:	2b01      	cmp	r3, #1
    fbdc:	f000 81f1 	beq.w	ffc2 <__ssvfscanf_r+0xd6e>
    fbe0:	2b04      	cmp	r3, #4
    fbe2:	f000 81ee 	beq.w	ffc2 <__ssvfscanf_r+0xd6e>
    fbe6:	e553      	b.n	f690 <__ssvfscanf_r+0x43c>
    fbe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fbea:	2b07      	cmp	r3, #7
    fbec:	f040 853a 	bne.w	10664 <__ssvfscanf_r+0x1410>
    fbf0:	2308      	movs	r3, #8
    fbf2:	64bb      	str	r3, [r7, #72]	; 0x48
    fbf4:	e537      	b.n	f666 <__ssvfscanf_r+0x412>
    fbf6:	0520      	lsls	r0, r4, #20
    fbf8:	f100 81f9 	bmi.w	ffee <__ssvfscanf_r+0xd9a>
    fbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fbfe:	2b01      	cmp	r3, #1
    fc00:	f47f ad46 	bne.w	f690 <__ssvfscanf_r+0x43c>
    fc04:	2302      	movs	r3, #2
    fc06:	63fb      	str	r3, [r7, #60]	; 0x3c
    fc08:	e52d      	b.n	f666 <__ssvfscanf_r+0x412>
    fc0a:	0623      	lsls	r3, r4, #24
    fc0c:	f57f ad40 	bpl.w	f690 <__ssvfscanf_r+0x43c>
    fc10:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fc14:	e527      	b.n	f666 <__ssvfscanf_r+0x412>
    fc16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fc18:	2b00      	cmp	r3, #0
    fc1a:	f040 81cc 	bne.w	ffb6 <__ssvfscanf_r+0xd62>
    fc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fc20:	b9b3      	cbnz	r3, fc50 <__ssvfscanf_r+0x9fc>
    fc22:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    fc26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    fc2a:	f000 8520 	beq.w	1066e <__ssvfscanf_r+0x141a>
    fc2e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    fc30:	ee18 9a10 	vmov	r9, s16
    fc34:	e533      	b.n	f69e <__ssvfscanf_r+0x44a>
    fc36:	0521      	lsls	r1, r4, #20
    fc38:	f100 81b7 	bmi.w	ffaa <__ssvfscanf_r+0xd56>
    fc3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fc3e:	2b02      	cmp	r3, #2
    fc40:	f040 8510 	bne.w	10664 <__ssvfscanf_r+0x1410>
    fc44:	2303      	movs	r3, #3
    fc46:	64bb      	str	r3, [r7, #72]	; 0x48
    fc48:	e50d      	b.n	f666 <__ssvfscanf_r+0x412>
    fc4a:	0520      	lsls	r0, r4, #20
    fc4c:	d59c      	bpl.n	fb88 <__ssvfscanf_r+0x934>
    fc4e:	e76c      	b.n	fb2a <__ssvfscanf_r+0x8d6>
    fc50:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    fc52:	ee18 9a10 	vmov	r9, s16
    fc56:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    fc5a:	e520      	b.n	f69e <__ssvfscanf_r+0x44a>
    fc5c:	4b8d      	ldr	r3, [pc, #564]	; (fe94 <__ssvfscanf_r+0xc40>)
    fc5e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    fc62:	2e08      	cmp	r6, #8
    fc64:	f73f addb 	bgt.w	f81e <__ssvfscanf_r+0x5ca>
    fc68:	e5e8      	b.n	f83c <__ssvfscanf_r+0x5e8>
    fc6a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    fc6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    fc72:	f47f ade3 	bne.w	f83c <__ssvfscanf_r+0x5e8>
    fc76:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    fc7a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    fc7e:	2610      	movs	r6, #16
    fc80:	e5cf      	b.n	f822 <__ssvfscanf_r+0x5ce>
    fc82:	0623      	lsls	r3, r4, #24
    fc84:	f57f adda 	bpl.w	f83c <__ssvfscanf_r+0x5e8>
    fc88:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fc8c:	e5c9      	b.n	f822 <__ssvfscanf_r+0x5ce>
    fc8e:	f044 0401 	orr.w	r4, r4, #1
    fc92:	f8db 3004 	ldr.w	r3, [fp, #4]
    fc96:	64f9      	str	r1, [r7, #76]	; 0x4c
    fc98:	2b00      	cmp	r3, #0
    fc9a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    fc9e:	f04f 0500 	mov.w	r5, #0
    fca2:	f73f abf8 	bgt.w	f496 <__ssvfscanf_r+0x242>
    fca6:	4659      	mov	r1, fp
    fca8:	4648      	mov	r0, r9
    fcaa:	f002 fc7d 	bl	125a8 <__ssrefill_r>
    fcae:	2800      	cmp	r0, #0
    fcb0:	f47f abbc 	bne.w	f42c <__ssvfscanf_r+0x1d8>
    fcb4:	0660      	lsls	r0, r4, #25
    fcb6:	f53f abf1 	bmi.w	f49c <__ssvfscanf_r+0x248>
    fcba:	f8db 2000 	ldr.w	r2, [fp]
    fcbe:	4e76      	ldr	r6, [pc, #472]	; (fe98 <__ssvfscanf_r+0xc44>)
    fcc0:	7813      	ldrb	r3, [r2, #0]
    fcc2:	5cf3      	ldrb	r3, [r6, r3]
    fcc4:	0719      	lsls	r1, r3, #28
    fcc6:	f57f abe9 	bpl.w	f49c <__ssvfscanf_r+0x248>
    fcca:	f8db 3004 	ldr.w	r3, [fp, #4]
    fcce:	3b01      	subs	r3, #1
    fcd0:	2b00      	cmp	r3, #0
    fcd2:	f10a 0a01 	add.w	sl, sl, #1
    fcd6:	f8cb 3004 	str.w	r3, [fp, #4]
    fcda:	f102 0201 	add.w	r2, r2, #1
    fcde:	dd4a      	ble.n	fd76 <__ssvfscanf_r+0xb22>
    fce0:	f8cb 2000 	str.w	r2, [fp]
    fce4:	7813      	ldrb	r3, [r2, #0]
    fce6:	5cf3      	ldrb	r3, [r6, r3]
    fce8:	0719      	lsls	r1, r3, #28
    fcea:	f57f abd7 	bpl.w	f49c <__ssvfscanf_r+0x248>
    fcee:	e7ec      	b.n	fcca <__ssvfscanf_r+0xa76>
    fcf0:	f044 0401 	orr.w	r4, r4, #1
    fcf4:	4b69      	ldr	r3, [pc, #420]	; (fe9c <__ssvfscanf_r+0xc48>)
    fcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    fcf8:	2308      	movs	r3, #8
    fcfa:	64f9      	str	r1, [r7, #76]	; 0x4c
    fcfc:	63bb      	str	r3, [r7, #56]	; 0x38
    fcfe:	2503      	movs	r5, #3
    fd00:	f7ff bbc4 	b.w	f48c <__ssvfscanf_r+0x238>
    fd04:	f044 0401 	orr.w	r4, r4, #1
    fd08:	4b65      	ldr	r3, [pc, #404]	; (fea0 <__ssvfscanf_r+0xc4c>)
    fd0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    fd0c:	230a      	movs	r3, #10
    fd0e:	64f9      	str	r1, [r7, #76]	; 0x4c
    fd10:	63bb      	str	r3, [r7, #56]	; 0x38
    fd12:	2503      	movs	r5, #3
    fd14:	f7ff bbba 	b.w	f48c <__ssvfscanf_r+0x238>
    fd18:	0523      	lsls	r3, r4, #20
    fd1a:	f57f ad82 	bpl.w	f822 <__ssvfscanf_r+0x5ce>
    fd1e:	b916      	cbnz	r6, fd26 <__ssvfscanf_r+0xad2>
    fd20:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    fd24:	2608      	movs	r6, #8
    fd26:	0563      	lsls	r3, r4, #21
    fd28:	f100 81a6 	bmi.w	10078 <__ssvfscanf_r+0xe24>
    fd2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fd2e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    fd32:	b11b      	cbz	r3, fd3c <__ssvfscanf_r+0xae8>
    fd34:	3b01      	subs	r3, #1
    fd36:	63fb      	str	r3, [r7, #60]	; 0x3c
    fd38:	f108 0801 	add.w	r8, r8, #1
    fd3c:	684b      	ldr	r3, [r1, #4]
    fd3e:	3b01      	subs	r3, #1
    fd40:	2b00      	cmp	r3, #0
    fd42:	f10a 0a01 	add.w	sl, sl, #1
    fd46:	604b      	str	r3, [r1, #4]
    fd48:	f73f ad73 	bgt.w	f832 <__ssvfscanf_r+0x5de>
    fd4c:	4648      	mov	r0, r9
    fd4e:	64b9      	str	r1, [r7, #72]	; 0x48
    fd50:	f002 fc2a 	bl	125a8 <__ssrefill_r>
    fd54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fd56:	2800      	cmp	r0, #0
    fd58:	f43f ad6d 	beq.w	f836 <__ssvfscanf_r+0x5e2>
    fd5c:	e56e      	b.n	f83c <__ssvfscanf_r+0x5e8>
    fd5e:	ee18 0a10 	vmov	r0, s16
    fd62:	4659      	mov	r1, fp
    fd64:	f002 fc20 	bl	125a8 <__ssrefill_r>
    fd68:	2800      	cmp	r0, #0
    fd6a:	f47f ac91 	bne.w	f690 <__ssvfscanf_r+0x43c>
    fd6e:	2e00      	cmp	r6, #0
    fd70:	f47f abc4 	bne.w	f4fc <__ssvfscanf_r+0x2a8>
    fd74:	e48c      	b.n	f690 <__ssvfscanf_r+0x43c>
    fd76:	4659      	mov	r1, fp
    fd78:	4648      	mov	r0, r9
    fd7a:	f002 fc15 	bl	125a8 <__ssrefill_r>
    fd7e:	2800      	cmp	r0, #0
    fd80:	f47f ab54 	bne.w	f42c <__ssvfscanf_r+0x1d8>
    fd84:	f8db 2000 	ldr.w	r2, [fp]
    fd88:	e79a      	b.n	fcc0 <__ssvfscanf_r+0xa6c>
    fd8a:	f8db 2004 	ldr.w	r2, [fp, #4]
    fd8e:	e00f      	b.n	fdb0 <__ssvfscanf_r+0xb5c>
    fd90:	f8db 3000 	ldr.w	r3, [fp]
    fd94:	781a      	ldrb	r2, [r3, #0]
    fd96:	5cb2      	ldrb	r2, [r6, r2]
    fd98:	0711      	lsls	r1, r2, #28
    fd9a:	f103 0301 	add.w	r3, r3, #1
    fd9e:	f57f aa80 	bpl.w	f2a2 <__ssvfscanf_r+0x4e>
    fda2:	f8db 2004 	ldr.w	r2, [fp, #4]
    fda6:	3a01      	subs	r2, #1
    fda8:	e9cb 3200 	strd	r3, r2, [fp]
    fdac:	f10a 0a01 	add.w	sl, sl, #1
    fdb0:	2a00      	cmp	r2, #0
    fdb2:	dced      	bgt.n	fd90 <__ssvfscanf_r+0xb3c>
    fdb4:	4659      	mov	r1, fp
    fdb6:	4648      	mov	r0, r9
    fdb8:	f002 fbf6 	bl	125a8 <__ssrefill_r>
    fdbc:	2800      	cmp	r0, #0
    fdbe:	d0e7      	beq.n	fd90 <__ssvfscanf_r+0xb3c>
    fdc0:	f7ff ba6f 	b.w	f2a2 <__ssvfscanf_r+0x4e>
    fdc4:	06e1      	lsls	r1, r4, #27
    fdc6:	f100 8349 	bmi.w	1045c <__ssvfscanf_r+0x1208>
    fdca:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    fdce:	f000 83ab 	beq.w	10528 <__ssvfscanf_r+0x12d4>
    fdd2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    fdd4:	f854 6b04 	ldr.w	r6, [r4], #4
    fdd8:	64be      	str	r6, [r7, #72]	; 0x48
    fdda:	2e00      	cmp	r6, #0
    fddc:	f43f ab2f 	beq.w	f43e <__ssvfscanf_r+0x1ea>
    fde0:	2020      	movs	r0, #32
    fde2:	f7f9 fe3b 	bl	9a5c <malloc>
    fde6:	4605      	mov	r5, r0
    fde8:	2800      	cmp	r0, #0
    fdea:	f000 8462 	beq.w	106b2 <__ssvfscanf_r+0x145e>
    fdee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fdf0:	6030      	str	r0, [r6, #0]
    fdf2:	8893      	ldrh	r3, [r2, #4]
    fdf4:	88d6      	ldrh	r6, [r2, #6]
    fdf6:	429e      	cmp	r6, r3
    fdf8:	f080 82a8 	bcs.w	1034c <__ssvfscanf_r+0x10f8>
    fdfc:	6810      	ldr	r0, [r2, #0]
    fdfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fe00:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    fe04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fe06:	633c      	str	r4, [r7, #48]	; 0x30
    fe08:	3601      	adds	r6, #1
    fe0a:	80de      	strh	r6, [r3, #6]
    fe0c:	2320      	movs	r3, #32
    fe0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    fe10:	f8db 2000 	ldr.w	r2, [fp]
    fe14:	4e20      	ldr	r6, [pc, #128]	; (fe98 <__ssvfscanf_r+0xc44>)
    fe16:	7811      	ldrb	r1, [r2, #0]
    fe18:	5c71      	ldrb	r1, [r6, r1]
    fe1a:	0708      	lsls	r0, r1, #28
    fe1c:	f100 82ac 	bmi.w	10378 <__ssvfscanf_r+0x1124>
    fe20:	4633      	mov	r3, r6
    fe22:	462c      	mov	r4, r5
    fe24:	4610      	mov	r0, r2
    fe26:	462e      	mov	r6, r5
    fe28:	f8db 1004 	ldr.w	r1, [fp, #4]
    fe2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fe2e:	3901      	subs	r1, #1
    fe30:	f8cb 1004 	str.w	r1, [fp, #4]
    fe34:	1c41      	adds	r1, r0, #1
    fe36:	f8cb 1000 	str.w	r1, [fp]
    fe3a:	4635      	mov	r5, r6
    fe3c:	7801      	ldrb	r1, [r0, #0]
    fe3e:	f805 1b01 	strb.w	r1, [r5], #1
    fe42:	b122      	cbz	r2, fe4e <__ssvfscanf_r+0xbfa>
    fe44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fe46:	1b2e      	subs	r6, r5, r4
    fe48:	4296      	cmp	r6, r2
    fe4a:	f080 837a 	bcs.w	10542 <__ssvfscanf_r+0x12ee>
    fe4e:	f1b8 0801 	subs.w	r8, r8, #1
    fe52:	d00b      	beq.n	fe6c <__ssvfscanf_r+0xc18>
    fe54:	f8db 1004 	ldr.w	r1, [fp, #4]
    fe58:	2900      	cmp	r1, #0
    fe5a:	462e      	mov	r6, r5
    fe5c:	f340 83ae 	ble.w	105bc <__ssvfscanf_r+0x1368>
    fe60:	f8db 0000 	ldr.w	r0, [fp]
    fe64:	7801      	ldrb	r1, [r0, #0]
    fe66:	5c59      	ldrb	r1, [r3, r1]
    fe68:	0709      	lsls	r1, r1, #28
    fe6a:	d5dd      	bpl.n	fe28 <__ssvfscanf_r+0xbd4>
    fe6c:	1b29      	subs	r1, r5, r4
    fe6e:	448a      	add	sl, r1
    fe70:	3101      	adds	r1, #1
    fe72:	f04f 0300 	mov.w	r3, #0
    fe76:	702b      	strb	r3, [r5, #0]
    fe78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fe7a:	b11b      	cbz	r3, fe84 <__ssvfscanf_r+0xc30>
    fe7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fe7e:	428b      	cmp	r3, r1
    fe80:	f200 8394 	bhi.w	105ac <__ssvfscanf_r+0x1358>
    fe84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fe86:	3301      	adds	r3, #1
    fe88:	647b      	str	r3, [r7, #68]	; 0x44
    fe8a:	f7ff ba0a 	b.w	f2a2 <__ssvfscanf_r+0x4e>
    fe8e:	2300      	movs	r3, #0
    fe90:	63fb      	str	r3, [r7, #60]	; 0x3c
    fe92:	e461      	b.n	f758 <__ssvfscanf_r+0x504>
    fe94:	200026a0 	.word	0x200026a0
    fe98:	20000a7d 	.word	0x20000a7d
    fe9c:	00011e6d 	.word	0x00011e6d
    fea0:	0000b3a9 	.word	0x0000b3a9
    fea4:	06e6      	lsls	r6, r4, #27
    fea6:	f100 8181 	bmi.w	101ac <__ssvfscanf_r+0xf58>
    feaa:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    feae:	f000 836d 	beq.w	1058c <__ssvfscanf_r+0x1338>
    feb2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    feb4:	f854 6b04 	ldr.w	r6, [r4], #4
    feb8:	64be      	str	r6, [r7, #72]	; 0x48
    feba:	2e00      	cmp	r6, #0
    febc:	f43f aabf 	beq.w	f43e <__ssvfscanf_r+0x1ea>
    fec0:	2020      	movs	r0, #32
    fec2:	f7f9 fdcb 	bl	9a5c <malloc>
    fec6:	4605      	mov	r5, r0
    fec8:	2800      	cmp	r0, #0
    feca:	f000 83f2 	beq.w	106b2 <__ssvfscanf_r+0x145e>
    fece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fed0:	6030      	str	r0, [r6, #0]
    fed2:	8893      	ldrh	r3, [r2, #4]
    fed4:	88d6      	ldrh	r6, [r2, #6]
    fed6:	429e      	cmp	r6, r3
    fed8:	f080 827a 	bcs.w	103d0 <__ssvfscanf_r+0x117c>
    fedc:	6810      	ldr	r0, [r2, #0]
    fede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fee0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    fee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fee6:	633c      	str	r4, [r7, #48]	; 0x30
    fee8:	3601      	adds	r6, #1
    feea:	80de      	strh	r6, [r3, #6]
    feec:	2420      	movs	r4, #32
    feee:	f8db 2000 	ldr.w	r2, [fp]
    fef2:	f107 0370 	add.w	r3, r7, #112	; 0x70
    fef6:	4619      	mov	r1, r3
    fef8:	7813      	ldrb	r3, [r2, #0]
    fefa:	5ccb      	ldrb	r3, [r1, r3]
    fefc:	2b00      	cmp	r3, #0
    fefe:	f43f aa9e 	beq.w	f43e <__ssvfscanf_r+0x1ea>
    ff02:	ee08 9a10 	vmov	s16, r9
    ff06:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
    ff0a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    ff0e:	462e      	mov	r6, r5
    ff10:	46a2      	mov	sl, r4
    ff12:	4610      	mov	r0, r2
    ff14:	460c      	mov	r4, r1
    ff16:	f8db 1004 	ldr.w	r1, [fp, #4]
    ff1a:	1c43      	adds	r3, r0, #1
    ff1c:	3901      	subs	r1, #1
    ff1e:	e9cb 3100 	strd	r3, r1, [fp]
    ff22:	4629      	mov	r1, r5
    ff24:	7800      	ldrb	r0, [r0, #0]
    ff26:	f801 0b01 	strb.w	r0, [r1], #1
    ff2a:	f1b9 0f00 	cmp.w	r9, #0
    ff2e:	d002      	beq.n	ff36 <__ssvfscanf_r+0xce2>
    ff30:	1b8d      	subs	r5, r1, r6
    ff32:	4555      	cmp	r5, sl
    ff34:	d27a      	bcs.n	1002c <__ssvfscanf_r+0xdd8>
    ff36:	460d      	mov	r5, r1
    ff38:	f1b8 0801 	subs.w	r8, r8, #1
    ff3c:	d00a      	beq.n	ff54 <__ssvfscanf_r+0xd00>
    ff3e:	f8db 1004 	ldr.w	r1, [fp, #4]
    ff42:	2900      	cmp	r1, #0
    ff44:	f340 816a 	ble.w	1021c <__ssvfscanf_r+0xfc8>
    ff48:	f8db 0000 	ldr.w	r0, [fp]
    ff4c:	7801      	ldrb	r1, [r0, #0]
    ff4e:	5c61      	ldrb	r1, [r4, r1]
    ff50:	2900      	cmp	r1, #0
    ff52:	d1e0      	bne.n	ff16 <__ssvfscanf_r+0xcc2>
    ff54:	4654      	mov	r4, sl
    ff56:	ee18 9a10 	vmov	r9, s16
    ff5a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    ff5e:	1bae      	subs	r6, r5, r6
    ff60:	f43f aa6d 	beq.w	f43e <__ssvfscanf_r+0x1ea>
    ff64:	f04f 0300 	mov.w	r3, #0
    ff68:	702b      	strb	r3, [r5, #0]
    ff6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ff6c:	b11b      	cbz	r3, ff76 <__ssvfscanf_r+0xd22>
    ff6e:	1c71      	adds	r1, r6, #1
    ff70:	428c      	cmp	r4, r1
    ff72:	f200 832d 	bhi.w	105d0 <__ssvfscanf_r+0x137c>
    ff76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ff78:	3301      	adds	r3, #1
    ff7a:	44b2      	add	sl, r6
    ff7c:	647b      	str	r3, [r7, #68]	; 0x44
    ff7e:	f7ff b990 	b.w	f2a2 <__ssvfscanf_r+0x4e>
    ff82:	2300      	movs	r3, #0
    ff84:	613b      	str	r3, [r7, #16]
    ff86:	f7ff baa9 	b.w	f4dc <__ssvfscanf_r+0x288>
    ff8a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
    ff8e:	f47f aa56 	bne.w	f43e <__ssvfscanf_r+0x1ea>
    ff92:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    ff96:	eb02 0848 	add.w	r8, r2, r8, lsl #1
    ff9a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    ff9e:	f7ff ba67 	b.w	f470 <__ssvfscanf_r+0x21c>
    ffa2:	64f9      	str	r1, [r7, #76]	; 0x4c
    ffa4:	2504      	movs	r5, #4
    ffa6:	f7ff ba71 	b.w	f48c <__ssvfscanf_r+0x238>
    ffaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ffac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    ffae:	185b      	adds	r3, r3, r1
    ffb0:	f47f ae44 	bne.w	fc3c <__ssvfscanf_r+0x9e8>
    ffb4:	e5be      	b.n	fb34 <__ssvfscanf_r+0x8e0>
    ffb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ffb8:	2b03      	cmp	r3, #3
    ffba:	d002      	beq.n	ffc2 <__ssvfscanf_r+0xd6e>
    ffbc:	2b05      	cmp	r3, #5
    ffbe:	f47f ab67 	bne.w	f690 <__ssvfscanf_r+0x43c>
    ffc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ffc4:	3301      	adds	r3, #1
    ffc6:	b2db      	uxtb	r3, r3
    ffc8:	64bb      	str	r3, [r7, #72]	; 0x48
    ffca:	f7ff bb4c 	b.w	f666 <__ssvfscanf_r+0x412>
    ffce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ffd0:	2b00      	cmp	r3, #0
    ffd2:	f47f ae01 	bne.w	fbd8 <__ssvfscanf_r+0x984>
    ffd6:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    ffda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    ffde:	f47f adfb 	bne.w	fbd8 <__ssvfscanf_r+0x984>
    ffe2:	2301      	movs	r3, #1
    ffe4:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    ffe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    ffea:	f7ff bb3c 	b.w	f666 <__ssvfscanf_r+0x412>
    ffee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fff0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fff2:	185b      	adds	r3, r3, r1
    fff4:	f47f ae02 	bne.w	fbfc <__ssvfscanf_r+0x9a8>
    fff8:	e59c      	b.n	fb34 <__ssvfscanf_r+0x8e0>
    fffa:	1c83      	adds	r3, r0, #2
    fffc:	f040 845b 	bne.w	108b6 <__ssvfscanf_r+0x1662>
   10000:	f8db 3004 	ldr.w	r3, [fp, #4]
   10004:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   10006:	2b00      	cmp	r3, #0
   10008:	f73f ad00 	bgt.w	fa0c <__ssvfscanf_r+0x7b8>
   1000c:	4659      	mov	r1, fp
   1000e:	4648      	mov	r0, r9
   10010:	f002 faca 	bl	125a8 <__ssrefill_r>
   10014:	2800      	cmp	r0, #0
   10016:	f43f ad63 	beq.w	fae0 <__ssvfscanf_r+0x88c>
   1001a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1001e:	627e      	str	r6, [r7, #36]	; 0x24
   10020:	4644      	mov	r4, r8
   10022:	2d00      	cmp	r5, #0
   10024:	f43f ad63 	beq.w	faee <__ssvfscanf_r+0x89a>
   10028:	f7ff ba00 	b.w	f42c <__ssvfscanf_r+0x1d8>
   1002c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   10030:	4630      	mov	r0, r6
   10032:	4651      	mov	r1, sl
   10034:	f7f9 ffde 	bl	9ff4 <realloc>
   10038:	4606      	mov	r6, r0
   1003a:	2800      	cmp	r0, #0
   1003c:	f000 8339 	beq.w	106b2 <__ssvfscanf_r+0x145e>
   10040:	4405      	add	r5, r0
   10042:	f8c9 0000 	str.w	r0, [r9]
   10046:	e777      	b.n	ff38 <__ssvfscanf_r+0xce4>
   10048:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   1004c:	4bbc      	ldr	r3, [pc, #752]	; (10340 <__ssvfscanf_r+0x10ec>)
   1004e:	62fb      	str	r3, [r7, #44]	; 0x2c
   10050:	2310      	movs	r3, #16
   10052:	64f9      	str	r1, [r7, #76]	; 0x4c
   10054:	63bb      	str	r3, [r7, #56]	; 0x38
   10056:	2503      	movs	r5, #3
   10058:	f7ff ba18 	b.w	f48c <__ssvfscanf_r+0x238>
   1005c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1005e:	3301      	adds	r3, #1
   10060:	637b      	str	r3, [r7, #52]	; 0x34
   10062:	693b      	ldr	r3, [r7, #16]
   10064:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10068:	2b00      	cmp	r3, #0
   1006a:	f43f aafe 	beq.w	f66a <__ssvfscanf_r+0x416>
   1006e:	693b      	ldr	r3, [r7, #16]
   10070:	3b01      	subs	r3, #1
   10072:	613b      	str	r3, [r7, #16]
   10074:	f7ff bafa 	b.w	f66c <__ssvfscanf_r+0x418>
   10078:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   1007c:	f7ff bbd1 	b.w	f822 <__ssvfscanf_r+0x5ce>
   10080:	0722      	lsls	r2, r4, #28
   10082:	f140 81c7 	bpl.w	10414 <__ssvfscanf_r+0x11c0>
   10086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10088:	f853 2b04 	ldr.w	r2, [r3], #4
   1008c:	633b      	str	r3, [r7, #48]	; 0x30
   1008e:	7010      	strb	r0, [r2, #0]
   10090:	f7ff bbf3 	b.w	f87a <__ssvfscanf_r+0x626>
   10094:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   10098:	465a      	mov	r2, fp
   1009a:	4648      	mov	r0, r9
   1009c:	3d01      	subs	r5, #1
   1009e:	f002 fa43 	bl	12528 <_sungetc_r>
   100a2:	f7ff bbd5 	b.w	f850 <__ssvfscanf_r+0x5fc>
   100a6:	69fb      	ldr	r3, [r7, #28]
   100a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   100aa:	4293      	cmp	r3, r2
   100ac:	f43f ab2d 	beq.w	f70a <__ssvfscanf_r+0x4b6>
   100b0:	1a9a      	subs	r2, r3, r2
   100b2:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   100b6:	429d      	cmp	r5, r3
   100b8:	bf28      	it	cs
   100ba:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   100be:	49a1      	ldr	r1, [pc, #644]	; (10344 <__ssvfscanf_r+0x10f0>)
   100c0:	4628      	mov	r0, r5
   100c2:	f7fb fa5d 	bl	b580 <sprintf>
   100c6:	f7ff bb20 	b.w	f70a <__ssvfscanf_r+0x4b6>
   100ca:	06e2      	lsls	r2, r4, #27
   100cc:	f100 8131 	bmi.w	10332 <__ssvfscanf_r+0x10de>
   100d0:	0723      	lsls	r3, r4, #28
   100d2:	f100 81ba 	bmi.w	1044a <__ssvfscanf_r+0x11f6>
   100d6:	0766      	lsls	r6, r4, #29
   100d8:	f140 82b4 	bpl.w	10644 <__ssvfscanf_r+0x13f0>
   100dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   100de:	64f9      	str	r1, [r7, #76]	; 0x4c
   100e0:	f853 2b04 	ldr.w	r2, [r3], #4
   100e4:	633b      	str	r3, [r7, #48]	; 0x30
   100e6:	f8a2 a000 	strh.w	sl, [r2]
   100ea:	f7ff b8da 	b.w	f2a2 <__ssvfscanf_r+0x4e>
   100ee:	0723      	lsls	r3, r4, #28
   100f0:	f47f a9a5 	bne.w	f43e <__ssvfscanf_r+0x1ea>
   100f4:	7842      	ldrb	r2, [r0, #1]
   100f6:	2a68      	cmp	r2, #104	; 0x68
   100f8:	f000 8186 	beq.w	10408 <__ssvfscanf_r+0x11b4>
   100fc:	f044 0404 	orr.w	r4, r4, #4
   10100:	4608      	mov	r0, r1
   10102:	f7ff b92f 	b.w	f364 <__ssvfscanf_r+0x110>
   10106:	4b8e      	ldr	r3, [pc, #568]	; (10340 <__ssvfscanf_r+0x10ec>)
   10108:	62fb      	str	r3, [r7, #44]	; 0x2c
   1010a:	230a      	movs	r3, #10
   1010c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1010e:	63bb      	str	r3, [r7, #56]	; 0x38
   10110:	2503      	movs	r5, #3
   10112:	f7ff b9bb 	b.w	f48c <__ssvfscanf_r+0x238>
   10116:	4b8c      	ldr	r3, [pc, #560]	; (10348 <__ssvfscanf_r+0x10f4>)
   10118:	62fb      	str	r3, [r7, #44]	; 0x2c
   1011a:	2300      	movs	r3, #0
   1011c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1011e:	63bb      	str	r3, [r7, #56]	; 0x38
   10120:	2503      	movs	r5, #3
   10122:	f7ff b9b3 	b.w	f48c <__ssvfscanf_r+0x238>
   10126:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   1012a:	e78f      	b.n	1004c <__ssvfscanf_r+0xdf8>
   1012c:	f107 0070 	add.w	r0, r7, #112	; 0x70
   10130:	f000 fdde 	bl	10cf0 <__sccl>
   10134:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   10138:	64f8      	str	r0, [r7, #76]	; 0x4c
   1013a:	2501      	movs	r5, #1
   1013c:	f7ff b9a6 	b.w	f48c <__ssvfscanf_r+0x238>
   10140:	0722      	lsls	r2, r4, #28
   10142:	f47f a97c 	bne.w	f43e <__ssvfscanf_r+0x1ea>
   10146:	7842      	ldrb	r2, [r0, #1]
   10148:	2a6c      	cmp	r2, #108	; 0x6c
   1014a:	f000 8157 	beq.w	103fc <__ssvfscanf_r+0x11a8>
   1014e:	f044 0401 	orr.w	r4, r4, #1
   10152:	4608      	mov	r0, r1
   10154:	f7ff b906 	b.w	f364 <__ssvfscanf_r+0x110>
   10158:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   1015c:	f47f a96f 	bne.w	f43e <__ssvfscanf_r+0x1ea>
   10160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10162:	2a00      	cmp	r2, #0
   10164:	f000 81e7 	beq.w	10536 <__ssvfscanf_r+0x12e2>
   10168:	7842      	ldrb	r2, [r0, #1]
   1016a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1016e:	4608      	mov	r0, r1
   10170:	f7ff b8f8 	b.w	f364 <__ssvfscanf_r+0x110>
   10174:	ea58 0804 	orrs.w	r8, r8, r4
   10178:	f47f a961 	bne.w	f43e <__ssvfscanf_r+0x1ea>
   1017c:	7842      	ldrb	r2, [r0, #1]
   1017e:	2410      	movs	r4, #16
   10180:	4608      	mov	r0, r1
   10182:	f7ff b8ef 	b.w	f364 <__ssvfscanf_r+0x110>
   10186:	64f9      	str	r1, [r7, #76]	; 0x4c
   10188:	f7ff b8a7 	b.w	f2da <__ssvfscanf_r+0x86>
   1018c:	2300      	movs	r3, #0
   1018e:	623b      	str	r3, [r7, #32]
   10190:	62bb      	str	r3, [r7, #40]	; 0x28
   10192:	63fb      	str	r3, [r7, #60]	; 0x3c
   10194:	f107 0354 	add.w	r3, r7, #84	; 0x54
   10198:	64bb      	str	r3, [r7, #72]	; 0x48
   1019a:	f7ff bba9 	b.w	f8f0 <__ssvfscanf_r+0x69c>
   1019e:	2300      	movs	r3, #0
   101a0:	e9c7 3306 	strd	r3, r3, [r7, #24]
   101a4:	623b      	str	r3, [r7, #32]
   101a6:	f107 0454 	add.w	r4, r7, #84	; 0x54
   101aa:	e429      	b.n	fa00 <__ssvfscanf_r+0x7ac>
   101ac:	f8db 3000 	ldr.w	r3, [fp]
   101b0:	f107 0270 	add.w	r2, r7, #112	; 0x70
   101b4:	4611      	mov	r1, r2
   101b6:	781a      	ldrb	r2, [r3, #0]
   101b8:	5c8a      	ldrb	r2, [r1, r2]
   101ba:	2a00      	cmp	r2, #0
   101bc:	f43f a93f 	beq.w	f43e <__ssvfscanf_r+0x1ea>
   101c0:	3301      	adds	r3, #1
   101c2:	f8cb 3000 	str.w	r3, [fp]
   101c6:	f8db 3004 	ldr.w	r3, [fp, #4]
   101ca:	f1b8 0f01 	cmp.w	r8, #1
   101ce:	f103 33ff 	add.w	r3, r3, #4294967295
   101d2:	f8cb 3004 	str.w	r3, [fp, #4]
   101d6:	bf18      	it	ne
   101d8:	460c      	movne	r4, r1
   101da:	d114      	bne.n	10206 <__ssvfscanf_r+0xfb2>
   101dc:	f7ff bb53 	b.w	f886 <__ssvfscanf_r+0x632>
   101e0:	f8db 3000 	ldr.w	r3, [fp]
   101e4:	781a      	ldrb	r2, [r3, #0]
   101e6:	5ca2      	ldrb	r2, [r4, r2]
   101e8:	3301      	adds	r3, #1
   101ea:	2a00      	cmp	r2, #0
   101ec:	f43f ab4b 	beq.w	f886 <__ssvfscanf_r+0x632>
   101f0:	f8cb 3000 	str.w	r3, [fp]
   101f4:	f8db 3004 	ldr.w	r3, [fp, #4]
   101f8:	3501      	adds	r5, #1
   101fa:	3b01      	subs	r3, #1
   101fc:	4545      	cmp	r5, r8
   101fe:	f8cb 3004 	str.w	r3, [fp, #4]
   10202:	f43f ab40 	beq.w	f886 <__ssvfscanf_r+0x632>
   10206:	2b00      	cmp	r3, #0
   10208:	dcea      	bgt.n	101e0 <__ssvfscanf_r+0xf8c>
   1020a:	4659      	mov	r1, fp
   1020c:	4648      	mov	r0, r9
   1020e:	f002 f9cb 	bl	125a8 <__ssrefill_r>
   10212:	2800      	cmp	r0, #0
   10214:	d0e4      	beq.n	101e0 <__ssvfscanf_r+0xf8c>
   10216:	44aa      	add	sl, r5
   10218:	f7ff b843 	b.w	f2a2 <__ssvfscanf_r+0x4e>
   1021c:	ee18 0a10 	vmov	r0, s16
   10220:	4659      	mov	r1, fp
   10222:	f002 f9c1 	bl	125a8 <__ssrefill_r>
   10226:	2800      	cmp	r0, #0
   10228:	f43f ae8e 	beq.w	ff48 <__ssvfscanf_r+0xcf4>
   1022c:	42b5      	cmp	r5, r6
   1022e:	4654      	mov	r4, sl
   10230:	ee18 9a10 	vmov	r9, s16
   10234:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   10238:	f47f ae91 	bne.w	ff5e <__ssvfscanf_r+0xd0a>
   1023c:	f7ff b8f6 	b.w	f42c <__ssvfscanf_r+0x1d8>
   10240:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   10244:	e428      	b.n	fa98 <__ssvfscanf_r+0x844>
   10246:	6823      	ldr	r3, [r4, #0]
   10248:	2b04      	cmp	r3, #4
   1024a:	f47f ac32 	bne.w	fab2 <__ssvfscanf_r+0x85e>
   1024e:	e432      	b.n	fab6 <__ssvfscanf_r+0x862>
   10250:	1c83      	adds	r3, r0, #2
   10252:	f040 8339 	bne.w	108c8 <__ssvfscanf_r+0x1674>
   10256:	f8db 3004 	ldr.w	r3, [fp, #4]
   1025a:	2b00      	cmp	r3, #0
   1025c:	f340 81d7 	ble.w	1060e <__ssvfscanf_r+0x13ba>
   10260:	f8db 3000 	ldr.w	r3, [fp]
   10264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10266:	781b      	ldrb	r3, [r3, #0]
   10268:	5cd3      	ldrb	r3, [r2, r3]
   1026a:	0718      	lsls	r0, r3, #28
   1026c:	d403      	bmi.n	10276 <__ssvfscanf_r+0x1022>
   1026e:	f1b8 0f00 	cmp.w	r8, #0
   10272:	f47f ab49 	bne.w	f908 <__ssvfscanf_r+0x6b4>
   10276:	627c      	str	r4, [r7, #36]	; 0x24
   10278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1027a:	2b00      	cmp	r3, #0
   1027c:	f47f a811 	bne.w	f2a2 <__ssvfscanf_r+0x4e>
   10280:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10282:	6013      	str	r3, [r2, #0]
   10284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10286:	2b00      	cmp	r3, #0
   10288:	f43f adfc 	beq.w	fe84 <__ssvfscanf_r+0xc30>
   1028c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1028e:	1ad1      	subs	r1, r2, r3
   10290:	108b      	asrs	r3, r1, #2
   10292:	6a3a      	ldr	r2, [r7, #32]
   10294:	3301      	adds	r3, #1
   10296:	429a      	cmp	r2, r3
   10298:	f67f adf4 	bls.w	fe84 <__ssvfscanf_r+0xc30>
   1029c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   1029e:	3104      	adds	r1, #4
   102a0:	6820      	ldr	r0, [r4, #0]
   102a2:	f7f9 fea7 	bl	9ff4 <realloc>
   102a6:	2800      	cmp	r0, #0
   102a8:	f47f ac3a 	bne.w	fb20 <__ssvfscanf_r+0x8cc>
   102ac:	e5ea      	b.n	fe84 <__ssvfscanf_r+0xc30>
   102ae:	f853 2b04 	ldr.w	r2, [r3], #4
   102b2:	ed82 0b00 	vstr	d0, [r2]
   102b6:	633b      	str	r3, [r7, #48]	; 0x30
   102b8:	e5e4      	b.n	fe84 <__ssvfscanf_r+0xc30>
   102ba:	68fd      	ldr	r5, [r7, #12]
   102bc:	6a39      	ldr	r1, [r7, #32]
   102be:	687e      	ldr	r6, [r7, #4]
   102c0:	4628      	mov	r0, r5
   102c2:	4642      	mov	r2, r8
   102c4:	46a3      	mov	fp, r4
   102c6:	68bc      	ldr	r4, [r7, #8]
   102c8:	f000 fd56 	bl	10d78 <stpncpy>
   102cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   102ce:	61fb      	str	r3, [r7, #28]
   102d0:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   102d4:	3e01      	subs	r6, #1
   102d6:	4605      	mov	r5, r0
   102d8:	f7ff b9c8 	b.w	f66c <__ssvfscanf_r+0x418>
   102dc:	69f8      	ldr	r0, [r7, #28]
   102de:	00d9      	lsls	r1, r3, #3
   102e0:	461d      	mov	r5, r3
   102e2:	f7f9 fe87 	bl	9ff4 <realloc>
   102e6:	61f8      	str	r0, [r7, #28]
   102e8:	2800      	cmp	r0, #0
   102ea:	f000 8264 	beq.w	107b6 <__ssvfscanf_r+0x1562>
   102ee:	6a3a      	ldr	r2, [r7, #32]
   102f0:	006b      	lsls	r3, r5, #1
   102f2:	eb00 0804 	add.w	r8, r0, r4
   102f6:	6010      	str	r0, [r2, #0]
   102f8:	61bb      	str	r3, [r7, #24]
   102fa:	f7ff bbea 	b.w	fad2 <__ssvfscanf_r+0x87e>
   102fe:	2e02      	cmp	r6, #2
   10300:	f240 82c4 	bls.w	1088c <__ssvfscanf_r+0x1638>
   10304:	2e03      	cmp	r6, #3
   10306:	f43f a9d3 	beq.w	f6b0 <__ssvfscanf_r+0x45c>
   1030a:	3e04      	subs	r6, #4
   1030c:	fa5f f886 	uxtb.w	r8, r6
   10310:	ea6f 0308 	mvn.w	r3, r8
   10314:	18ee      	adds	r6, r5, r3
   10316:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1031a:	465a      	mov	r2, fp
   1031c:	4648      	mov	r0, r9
   1031e:	f002 f903 	bl	12528 <_sungetc_r>
   10322:	42ae      	cmp	r6, r5
   10324:	d1f7      	bne.n	10316 <__ssvfscanf_r+0x10c2>
   10326:	f10a 3aff 	add.w	sl, sl, #4294967295
   1032a:	ebaa 0a08 	sub.w	sl, sl, r8
   1032e:	f7ff b9bf 	b.w	f6b0 <__ssvfscanf_r+0x45c>
   10332:	64f9      	str	r1, [r7, #76]	; 0x4c
   10334:	f7fe bfb5 	b.w	f2a2 <__ssvfscanf_r+0x4e>
   10338:	2303      	movs	r3, #3
   1033a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1033c:	f7ff b993 	b.w	f666 <__ssvfscanf_r+0x412>
   10340:	00011e6d 	.word	0x00011e6d
   10344:	20000a74 	.word	0x20000a74
   10348:	0000b3a9 	.word	0x0000b3a9
   1034c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10350:	4293      	cmp	r3, r2
   10352:	f200 8297 	bhi.w	10884 <__ssvfscanf_r+0x1630>
   10356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10358:	3308      	adds	r3, #8
   1035a:	b29b      	uxth	r3, r3
   1035c:	6810      	ldr	r0, [r2, #0]
   1035e:	63f8      	str	r0, [r7, #60]	; 0x3c
   10360:	0099      	lsls	r1, r3, #2
   10362:	637b      	str	r3, [r7, #52]	; 0x34
   10364:	f7f9 fe46 	bl	9ff4 <realloc>
   10368:	2800      	cmp	r0, #0
   1036a:	f000 827b 	beq.w	10864 <__ssvfscanf_r+0x1610>
   1036e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10372:	8093      	strh	r3, [r2, #4]
   10374:	6010      	str	r0, [r2, #0]
   10376:	e542      	b.n	fdfe <__ssvfscanf_r+0xbaa>
   10378:	2101      	movs	r1, #1
   1037a:	e57a      	b.n	fe72 <__ssvfscanf_r+0xc1e>
   1037c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10380:	4293      	cmp	r3, r2
   10382:	f200 8293 	bhi.w	108ac <__ssvfscanf_r+0x1658>
   10386:	3308      	adds	r3, #8
   10388:	b29e      	uxth	r6, r3
   1038a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1038c:	00b1      	lsls	r1, r6, #2
   1038e:	6818      	ldr	r0, [r3, #0]
   10390:	f7f9 fe30 	bl	9ff4 <realloc>
   10394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10396:	2800      	cmp	r0, #0
   10398:	f000 823e 	beq.w	10818 <__ssvfscanf_r+0x15c4>
   1039c:	809e      	strh	r6, [r3, #4]
   1039e:	6018      	str	r0, [r3, #0]
   103a0:	f7ff ba9b 	b.w	f8da <__ssvfscanf_r+0x686>
   103a4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   103a8:	4293      	cmp	r3, r2
   103aa:	f200 827f 	bhi.w	108ac <__ssvfscanf_r+0x1658>
   103ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   103b0:	3308      	adds	r3, #8
   103b2:	b29b      	uxth	r3, r3
   103b4:	0099      	lsls	r1, r3, #2
   103b6:	6810      	ldr	r0, [r2, #0]
   103b8:	64bb      	str	r3, [r7, #72]	; 0x48
   103ba:	f7f9 fe1b 	bl	9ff4 <realloc>
   103be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   103c0:	2800      	cmp	r0, #0
   103c2:	f000 8228 	beq.w	10816 <__ssvfscanf_r+0x15c2>
   103c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   103c8:	8093      	strh	r3, [r2, #4]
   103ca:	6010      	str	r0, [r2, #0]
   103cc:	f7ff bb0e 	b.w	f9ec <__ssvfscanf_r+0x798>
   103d0:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   103d4:	4293      	cmp	r3, r2
   103d6:	f200 8255 	bhi.w	10884 <__ssvfscanf_r+0x1630>
   103da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   103dc:	3308      	adds	r3, #8
   103de:	b29b      	uxth	r3, r3
   103e0:	6810      	ldr	r0, [r2, #0]
   103e2:	63f8      	str	r0, [r7, #60]	; 0x3c
   103e4:	0099      	lsls	r1, r3, #2
   103e6:	637b      	str	r3, [r7, #52]	; 0x34
   103e8:	f7f9 fe04 	bl	9ff4 <realloc>
   103ec:	2800      	cmp	r0, #0
   103ee:	f000 8239 	beq.w	10864 <__ssvfscanf_r+0x1610>
   103f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   103f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   103f6:	8093      	strh	r3, [r2, #4]
   103f8:	6010      	str	r0, [r2, #0]
   103fa:	e570      	b.n	fede <__ssvfscanf_r+0xc8a>
   103fc:	7882      	ldrb	r2, [r0, #2]
   103fe:	f044 0402 	orr.w	r4, r4, #2
   10402:	3002      	adds	r0, #2
   10404:	f7fe bfae 	b.w	f364 <__ssvfscanf_r+0x110>
   10408:	7882      	ldrb	r2, [r0, #2]
   1040a:	f044 0408 	orr.w	r4, r4, #8
   1040e:	3002      	adds	r0, #2
   10410:	f7fe bfa8 	b.w	f364 <__ssvfscanf_r+0x110>
   10414:	0763      	lsls	r3, r4, #29
   10416:	d458      	bmi.n	104ca <__ssvfscanf_r+0x1276>
   10418:	f014 0201 	ands.w	r2, r4, #1
   1041c:	f47f aa28 	bne.w	f870 <__ssvfscanf_r+0x61c>
   10420:	07a6      	lsls	r6, r4, #30
   10422:	f57f aa25 	bpl.w	f870 <__ssvfscanf_r+0x61c>
   10426:	4bb3      	ldr	r3, [pc, #716]	; (106f4 <__ssvfscanf_r+0x14a0>)
   10428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1042a:	4299      	cmp	r1, r3
   1042c:	4648      	mov	r0, r9
   1042e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10432:	f000 823d 	beq.w	108b0 <__ssvfscanf_r+0x165c>
   10436:	f001 fdd1 	bl	11fdc <_strtoll_r>
   1043a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1043c:	f853 2b04 	ldr.w	r2, [r3], #4
   10440:	633b      	str	r3, [r7, #48]	; 0x30
   10442:	e9c2 0100 	strd	r0, r1, [r2]
   10446:	f7ff ba18 	b.w	f87a <__ssvfscanf_r+0x626>
   1044a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1044c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1044e:	f853 2b04 	ldr.w	r2, [r3], #4
   10452:	633b      	str	r3, [r7, #48]	; 0x30
   10454:	f882 a000 	strb.w	sl, [r2]
   10458:	f7fe bf23 	b.w	f2a2 <__ssvfscanf_r+0x4e>
   1045c:	f8db 3000 	ldr.w	r3, [fp]
   10460:	4ea5      	ldr	r6, [pc, #660]	; (106f8 <__ssvfscanf_r+0x14a4>)
   10462:	781a      	ldrb	r2, [r3, #0]
   10464:	5cb2      	ldrb	r2, [r6, r2]
   10466:	0712      	lsls	r2, r2, #28
   10468:	f53e af1b 	bmi.w	f2a2 <__ssvfscanf_r+0x4e>
   1046c:	3301      	adds	r3, #1
   1046e:	f8cb 3000 	str.w	r3, [fp]
   10472:	f8db 3004 	ldr.w	r3, [fp, #4]
   10476:	f1b8 0f01 	cmp.w	r8, #1
   1047a:	f103 33ff 	add.w	r3, r3, #4294967295
   1047e:	f8cb 3004 	str.w	r3, [fp, #4]
   10482:	bf08      	it	eq
   10484:	f10a 0a01 	addeq.w	sl, sl, #1
   10488:	f43e af0b 	beq.w	f2a2 <__ssvfscanf_r+0x4e>
   1048c:	2401      	movs	r4, #1
   1048e:	e011      	b.n	104b4 <__ssvfscanf_r+0x1260>
   10490:	f8db 3000 	ldr.w	r3, [fp]
   10494:	781a      	ldrb	r2, [r3, #0]
   10496:	5cb2      	ldrb	r2, [r6, r2]
   10498:	0715      	lsls	r5, r2, #28
   1049a:	f103 0301 	add.w	r3, r3, #1
   1049e:	d411      	bmi.n	104c4 <__ssvfscanf_r+0x1270>
   104a0:	f8cb 3000 	str.w	r3, [fp]
   104a4:	f8db 3004 	ldr.w	r3, [fp, #4]
   104a8:	3401      	adds	r4, #1
   104aa:	3b01      	subs	r3, #1
   104ac:	4544      	cmp	r4, r8
   104ae:	f8cb 3004 	str.w	r3, [fp, #4]
   104b2:	d007      	beq.n	104c4 <__ssvfscanf_r+0x1270>
   104b4:	2b00      	cmp	r3, #0
   104b6:	dceb      	bgt.n	10490 <__ssvfscanf_r+0x123c>
   104b8:	4659      	mov	r1, fp
   104ba:	4648      	mov	r0, r9
   104bc:	f002 f874 	bl	125a8 <__ssrefill_r>
   104c0:	2800      	cmp	r0, #0
   104c2:	d0e5      	beq.n	10490 <__ssvfscanf_r+0x123c>
   104c4:	44a2      	add	sl, r4
   104c6:	f7fe beec 	b.w	f2a2 <__ssvfscanf_r+0x4e>
   104ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   104cc:	f853 2b04 	ldr.w	r2, [r3], #4
   104d0:	633b      	str	r3, [r7, #48]	; 0x30
   104d2:	8010      	strh	r0, [r2, #0]
   104d4:	f7ff b9d1 	b.w	f87a <__ssvfscanf_r+0x626>
   104d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   104da:	2b00      	cmp	r3, #0
   104dc:	f000 816e 	beq.w	107bc <__ssvfscanf_r+0x1568>
   104e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   104e2:	f8d3 8000 	ldr.w	r8, [r3]
   104e6:	88de      	ldrh	r6, [r3, #6]
   104e8:	b176      	cbz	r6, 10508 <__ssvfscanf_r+0x12b4>
   104ea:	2400      	movs	r4, #0
   104ec:	f1a8 0504 	sub.w	r5, r8, #4
   104f0:	46a1      	mov	r9, r4
   104f2:	f855 3f04 	ldr.w	r3, [r5, #4]!
   104f6:	6818      	ldr	r0, [r3, #0]
   104f8:	f7f9 fab8 	bl	9a6c <free>
   104fc:	3401      	adds	r4, #1
   104fe:	682b      	ldr	r3, [r5, #0]
   10500:	42a6      	cmp	r6, r4
   10502:	f8c3 9000 	str.w	r9, [r3]
   10506:	d1f4      	bne.n	104f2 <__ssvfscanf_r+0x129e>
   10508:	f04f 33ff 	mov.w	r3, #4294967295
   1050c:	647b      	str	r3, [r7, #68]	; 0x44
   1050e:	f1b8 0f00 	cmp.w	r8, #0
   10512:	f47e af9c 	bne.w	f44e <__ssvfscanf_r+0x1fa>
   10516:	f7fe bf9d 	b.w	f454 <__ssvfscanf_r+0x200>
   1051a:	4878      	ldr	r0, [pc, #480]	; (106fc <__ssvfscanf_r+0x14a8>)
   1051c:	633b      	str	r3, [r7, #48]	; 0x30
   1051e:	f7fb fde7 	bl	c0f0 <nanf>
   10522:	ed84 0a00 	vstr	s0, [r4]
   10526:	e4ad      	b.n	fe84 <__ssvfscanf_r+0xc30>
   10528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1052a:	63fc      	str	r4, [r7, #60]	; 0x3c
   1052c:	f852 5b04 	ldr.w	r5, [r2], #4
   10530:	633a      	str	r2, [r7, #48]	; 0x30
   10532:	64bc      	str	r4, [r7, #72]	; 0x48
   10534:	e46c      	b.n	fe10 <__ssvfscanf_r+0xbbc>
   10536:	b082      	sub	sp, #8
   10538:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1053c:	ab02      	add	r3, sp, #8
   1053e:	643b      	str	r3, [r7, #64]	; 0x40
   10540:	e612      	b.n	10168 <__ssvfscanf_r+0xf14>
   10542:	637b      	str	r3, [r7, #52]	; 0x34
   10544:	0053      	lsls	r3, r2, #1
   10546:	4620      	mov	r0, r4
   10548:	4619      	mov	r1, r3
   1054a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1054c:	f7f9 fd52 	bl	9ff4 <realloc>
   10550:	4604      	mov	r4, r0
   10552:	2800      	cmp	r0, #0
   10554:	f000 80ad 	beq.w	106b2 <__ssvfscanf_r+0x145e>
   10558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1055a:	1985      	adds	r5, r0, r6
   1055c:	6018      	str	r0, [r3, #0]
   1055e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10560:	e475      	b.n	fe4e <__ssvfscanf_r+0xbfa>
   10562:	697d      	ldr	r5, [r7, #20]
   10564:	4629      	mov	r1, r5
   10566:	230a      	movs	r3, #10
   10568:	3101      	adds	r1, #1
   1056a:	4648      	mov	r0, r9
   1056c:	f7fa ff1c 	bl	b3a8 <_strtol_r>
   10570:	69bb      	ldr	r3, [r7, #24]
   10572:	1ac2      	subs	r2, r0, r3
   10574:	e59d      	b.n	100b2 <__ssvfscanf_r+0xe5e>
   10576:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1057a:	f853 1b04 	ldr.w	r1, [r3], #4
   1057e:	623a      	str	r2, [r7, #32]
   10580:	64b9      	str	r1, [r7, #72]	; 0x48
   10582:	633b      	str	r3, [r7, #48]	; 0x30
   10584:	62ba      	str	r2, [r7, #40]	; 0x28
   10586:	63fa      	str	r2, [r7, #60]	; 0x3c
   10588:	f7ff b9b2 	b.w	f8f0 <__ssvfscanf_r+0x69c>
   1058c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1058e:	64bc      	str	r4, [r7, #72]	; 0x48
   10590:	f853 5b04 	ldr.w	r5, [r3], #4
   10594:	633b      	str	r3, [r7, #48]	; 0x30
   10596:	e4aa      	b.n	feee <__ssvfscanf_r+0xc9a>
   10598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1059a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1059c:	f853 4b04 	ldr.w	r4, [r3], #4
   105a0:	61ba      	str	r2, [r7, #24]
   105a2:	e9c7 2207 	strd	r2, r2, [r7, #28]
   105a6:	633b      	str	r3, [r7, #48]	; 0x30
   105a8:	f7ff ba2a 	b.w	fa00 <__ssvfscanf_r+0x7ac>
   105ac:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   105ae:	6820      	ldr	r0, [r4, #0]
   105b0:	f7f9 fd20 	bl	9ff4 <realloc>
   105b4:	2800      	cmp	r0, #0
   105b6:	f47f aab3 	bne.w	fb20 <__ssvfscanf_r+0x8cc>
   105ba:	e463      	b.n	fe84 <__ssvfscanf_r+0xc30>
   105bc:	4659      	mov	r1, fp
   105be:	4648      	mov	r0, r9
   105c0:	637b      	str	r3, [r7, #52]	; 0x34
   105c2:	f001 fff1 	bl	125a8 <__ssrefill_r>
   105c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   105c8:	2800      	cmp	r0, #0
   105ca:	f43f ac49 	beq.w	fe60 <__ssvfscanf_r+0xc0c>
   105ce:	e44d      	b.n	fe6c <__ssvfscanf_r+0xc18>
   105d0:	6818      	ldr	r0, [r3, #0]
   105d2:	461c      	mov	r4, r3
   105d4:	f7f9 fd0e 	bl	9ff4 <realloc>
   105d8:	2800      	cmp	r0, #0
   105da:	f43f accc 	beq.w	ff76 <__ssvfscanf_r+0xd22>
   105de:	6020      	str	r0, [r4, #0]
   105e0:	e4c9      	b.n	ff76 <__ssvfscanf_r+0xd22>
   105e2:	2500      	movs	r5, #0
   105e4:	e637      	b.n	10256 <__ssvfscanf_r+0x1002>
   105e6:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   105e8:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   105ec:	627e      	str	r6, [r7, #36]	; 0x24
   105ee:	4644      	mov	r4, r8
   105f0:	2d00      	cmp	r5, #0
   105f2:	f43f aa7c 	beq.w	faee <__ssvfscanf_r+0x89a>
   105f6:	3d01      	subs	r5, #1
   105f8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   105fc:	465a      	mov	r2, fp
   105fe:	5d59      	ldrb	r1, [r3, r5]
   10600:	4648      	mov	r0, r9
   10602:	f001 ff91 	bl	12528 <_sungetc_r>
   10606:	2d00      	cmp	r5, #0
   10608:	d1f5      	bne.n	105f6 <__ssvfscanf_r+0x13a2>
   1060a:	f7ff ba70 	b.w	faee <__ssvfscanf_r+0x89a>
   1060e:	4659      	mov	r1, fp
   10610:	4648      	mov	r0, r9
   10612:	f001 ffc9 	bl	125a8 <__ssrefill_r>
   10616:	2800      	cmp	r0, #0
   10618:	f43f ae22 	beq.w	10260 <__ssvfscanf_r+0x100c>
   1061c:	627c      	str	r4, [r7, #36]	; 0x24
   1061e:	2d00      	cmp	r5, #0
   10620:	f47e af04 	bne.w	f42c <__ssvfscanf_r+0x1d8>
   10624:	e628      	b.n	10278 <__ssvfscanf_r+0x1024>
   10626:	627c      	str	r4, [r7, #36]	; 0x24
   10628:	2d00      	cmp	r5, #0
   1062a:	f43f ae25 	beq.w	10278 <__ssvfscanf_r+0x1024>
   1062e:	3d01      	subs	r5, #1
   10630:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   10634:	465a      	mov	r2, fp
   10636:	5d59      	ldrb	r1, [r3, r5]
   10638:	4648      	mov	r0, r9
   1063a:	f001 ff75 	bl	12528 <_sungetc_r>
   1063e:	2d00      	cmp	r5, #0
   10640:	d1f5      	bne.n	1062e <__ssvfscanf_r+0x13da>
   10642:	e619      	b.n	10278 <__ssvfscanf_r+0x1024>
   10644:	07e5      	lsls	r5, r4, #31
   10646:	d43c      	bmi.n	106c2 <__ssvfscanf_r+0x146e>
   10648:	07a4      	lsls	r4, r4, #30
   1064a:	d53a      	bpl.n	106c2 <__ssvfscanf_r+0x146e>
   1064c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1064e:	64f9      	str	r1, [r7, #76]	; 0x4c
   10650:	f853 2b04 	ldr.w	r2, [r3], #4
   10654:	633b      	str	r3, [r7, #48]	; 0x30
   10656:	ea4f 73ea 	mov.w	r3, sl, asr #31
   1065a:	f8c2 a000 	str.w	sl, [r2]
   1065e:	6053      	str	r3, [r2, #4]
   10660:	f7fe be1f 	b.w	f2a2 <__ssvfscanf_r+0x4e>
   10664:	ee18 9a10 	vmov	r9, s16
   10668:	461e      	mov	r6, r3
   1066a:	f7ff b814 	b.w	f696 <__ssvfscanf_r+0x442>
   1066e:	2301      	movs	r3, #1
   10670:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   10674:	64bb      	str	r3, [r7, #72]	; 0x48
   10676:	f7fe bff6 	b.w	f666 <__ssvfscanf_r+0x412>
   1067a:	f1b8 0f01 	cmp.w	r8, #1
   1067e:	bf38      	it	cc
   10680:	f04f 0801 	movcc.w	r8, #1
   10684:	f014 0301 	ands.w	r3, r4, #1
   10688:	d13a      	bne.n	10700 <__ssvfscanf_r+0x14ac>
   1068a:	06e5      	lsls	r5, r4, #27
   1068c:	f100 8136 	bmi.w	108fc <__ssvfscanf_r+0x16a8>
   10690:	0624      	lsls	r4, r4, #24
   10692:	f140 814c 	bpl.w	1092e <__ssvfscanf_r+0x16da>
   10696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10698:	f853 5b04 	ldr.w	r5, [r3], #4
   1069c:	64bb      	str	r3, [r7, #72]	; 0x48
   1069e:	2d00      	cmp	r5, #0
   106a0:	f43e aecd 	beq.w	f43e <__ssvfscanf_r+0x1ea>
   106a4:	4640      	mov	r0, r8
   106a6:	f7f9 f9d9 	bl	9a5c <malloc>
   106aa:	4603      	mov	r3, r0
   106ac:	2800      	cmp	r0, #0
   106ae:	f040 80dc 	bne.w	1086a <__ssvfscanf_r+0x1616>
   106b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   106b4:	2b00      	cmp	r3, #0
   106b6:	f000 8081 	beq.w	107bc <__ssvfscanf_r+0x1568>
   106ba:	f8d3 8000 	ldr.w	r8, [r3]
   106be:	88de      	ldrh	r6, [r3, #6]
   106c0:	e712      	b.n	104e8 <__ssvfscanf_r+0x1294>
   106c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   106c4:	64f9      	str	r1, [r7, #76]	; 0x4c
   106c6:	f853 2b04 	ldr.w	r2, [r3], #4
   106ca:	f8c2 a000 	str.w	sl, [r2]
   106ce:	633b      	str	r3, [r7, #48]	; 0x30
   106d0:	f7fe bde7 	b.w	f2a2 <__ssvfscanf_r+0x4e>
   106d4:	462b      	mov	r3, r5
   106d6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   106d8:	42ab      	cmp	r3, r5
   106da:	f67e aeb0 	bls.w	f43e <__ssvfscanf_r+0x1ea>
   106de:	461c      	mov	r4, r3
   106e0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   106e4:	465a      	mov	r2, fp
   106e6:	4648      	mov	r0, r9
   106e8:	f001 ff1e 	bl	12528 <_sungetc_r>
   106ec:	42ac      	cmp	r4, r5
   106ee:	d1f7      	bne.n	106e0 <__ssvfscanf_r+0x148c>
   106f0:	f7fe bea5 	b.w	f43e <__ssvfscanf_r+0x1ea>
   106f4:	00011e6d 	.word	0x00011e6d
   106f8:	20000a7d 	.word	0x20000a7d
   106fc:	20007ffc 	.word	0x20007ffc
   10700:	f014 0310 	ands.w	r3, r4, #16
   10704:	637b      	str	r3, [r7, #52]	; 0x34
   10706:	d05e      	beq.n	107c6 <__ssvfscanf_r+0x1572>
   10708:	2500      	movs	r5, #0
   1070a:	63fd      	str	r5, [r7, #60]	; 0x3c
   1070c:	64bd      	str	r5, [r7, #72]	; 0x48
   1070e:	462e      	mov	r6, r5
   10710:	2400      	movs	r4, #0
   10712:	464b      	mov	r3, r9
   10714:	46c1      	mov	r9, r8
   10716:	46a8      	mov	r8, r5
   10718:	4625      	mov	r5, r4
   1071a:	461c      	mov	r4, r3
   1071c:	f7fb f9a0 	bl	ba60 <__locale_mb_cur_max>
   10720:	42a8      	cmp	r0, r5
   10722:	f43e ae83 	beq.w	f42c <__ssvfscanf_r+0x1d8>
   10726:	e9db 3200 	ldrd	r3, r2, [fp]
   1072a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1072e:	3a01      	subs	r2, #1
   10730:	e9cb 3200 	strd	r3, r2, [fp]
   10734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10736:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   1073a:	2a03      	cmp	r2, #3
   1073c:	5541      	strb	r1, [r0, r5]
   1073e:	f105 0301 	add.w	r3, r5, #1
   10742:	f107 0568 	add.w	r5, r7, #104	; 0x68
   10746:	d102      	bne.n	1074e <__ssvfscanf_r+0x14fa>
   10748:	682a      	ldr	r2, [r5, #0]
   1074a:	2a04      	cmp	r2, #4
   1074c:	d006      	beq.n	1075c <__ssvfscanf_r+0x1508>
   1074e:	2208      	movs	r2, #8
   10750:	2100      	movs	r1, #0
   10752:	4628      	mov	r0, r5
   10754:	62bb      	str	r3, [r7, #40]	; 0x28
   10756:	f7fb f8b9 	bl	b8cc <memset>
   1075a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1075c:	9500      	str	r5, [sp, #0]
   1075e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   10762:	4631      	mov	r1, r6
   10764:	4620      	mov	r0, r4
   10766:	62bb      	str	r3, [r7, #40]	; 0x28
   10768:	f001 fd0a 	bl	12180 <_mbrtowc_r>
   1076c:	1c43      	adds	r3, r0, #1
   1076e:	6278      	str	r0, [r7, #36]	; 0x24
   10770:	f43e ae5c 	beq.w	f42c <__ssvfscanf_r+0x1d8>
   10774:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10776:	2800      	cmp	r0, #0
   10778:	f040 8147 	bne.w	10a0a <__ssvfscanf_r+0x17b6>
   1077c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1077e:	b902      	cbnz	r2, 10782 <__ssvfscanf_r+0x152e>
   10780:	6032      	str	r2, [r6, #0]
   10782:	449a      	add	sl, r3
   10784:	f109 39ff 	add.w	r9, r9, #4294967295
   10788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1078a:	2b00      	cmp	r3, #0
   1078c:	f040 8175 	bne.w	10a7a <__ssvfscanf_r+0x1826>
   10790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10792:	2b00      	cmp	r3, #0
   10794:	f000 8170 	beq.w	10a78 <__ssvfscanf_r+0x1824>
   10798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1079a:	1af5      	subs	r5, r6, r3
   1079c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   107a0:	f200 816a 	bhi.w	10a78 <__ssvfscanf_r+0x1824>
   107a4:	4618      	mov	r0, r3
   107a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   107aa:	f7f9 fc23 	bl	9ff4 <realloc>
   107ae:	63f8      	str	r0, [r7, #60]	; 0x3c
   107b0:	2800      	cmp	r0, #0
   107b2:	f040 815c 	bne.w	10a6e <__ssvfscanf_r+0x181a>
   107b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   107b8:	2b00      	cmp	r3, #0
   107ba:	d12d      	bne.n	10818 <__ssvfscanf_r+0x15c4>
   107bc:	f04f 33ff 	mov.w	r3, #4294967295
   107c0:	647b      	str	r3, [r7, #68]	; 0x44
   107c2:	f7fe be47 	b.w	f454 <__ssvfscanf_r+0x200>
   107c6:	0622      	lsls	r2, r4, #24
   107c8:	f140 808f 	bpl.w	108ea <__ssvfscanf_r+0x1696>
   107cc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   107ce:	f854 3b04 	ldr.w	r3, [r4], #4
   107d2:	64bb      	str	r3, [r7, #72]	; 0x48
   107d4:	2b00      	cmp	r3, #0
   107d6:	f43e ae32 	beq.w	f43e <__ssvfscanf_r+0x1ea>
   107da:	2080      	movs	r0, #128	; 0x80
   107dc:	f7f9 f93e 	bl	9a5c <malloc>
   107e0:	4606      	mov	r6, r0
   107e2:	2800      	cmp	r0, #0
   107e4:	d0e7      	beq.n	107b6 <__ssvfscanf_r+0x1562>
   107e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   107e8:	6018      	str	r0, [r3, #0]
   107ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   107ec:	88dd      	ldrh	r5, [r3, #6]
   107ee:	889a      	ldrh	r2, [r3, #4]
   107f0:	4295      	cmp	r5, r2
   107f2:	f0c0 80b3 	bcc.w	1095c <__ssvfscanf_r+0x1708>
   107f6:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   107fa:	428a      	cmp	r2, r1
   107fc:	d856      	bhi.n	108ac <__ssvfscanf_r+0x1658>
   107fe:	3208      	adds	r2, #8
   10800:	b293      	uxth	r3, r2
   10802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10804:	63fb      	str	r3, [r7, #60]	; 0x3c
   10806:	0099      	lsls	r1, r3, #2
   10808:	6810      	ldr	r0, [r2, #0]
   1080a:	f7f9 fbf3 	bl	9ff4 <realloc>
   1080e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10810:	2800      	cmp	r0, #0
   10812:	f040 80ae 	bne.w	10972 <__ssvfscanf_r+0x171e>
   10816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10818:	88db      	ldrh	r3, [r3, #6]
   1081a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1081c:	461e      	mov	r6, r3
   1081e:	f8d2 8000 	ldr.w	r8, [r2]
   10822:	e661      	b.n	104e8 <__ssvfscanf_r+0x1294>
   10824:	462b      	mov	r3, r5
   10826:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10828:	42ab      	cmp	r3, r5
   1082a:	f67e ae08 	bls.w	f43e <__ssvfscanf_r+0x1ea>
   1082e:	461c      	mov	r4, r3
   10830:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   10834:	465a      	mov	r2, fp
   10836:	4648      	mov	r0, r9
   10838:	f001 fe76 	bl	12528 <_sungetc_r>
   1083c:	42ac      	cmp	r4, r5
   1083e:	d1f7      	bne.n	10830 <__ssvfscanf_r+0x15dc>
   10840:	f7fe bdfd 	b.w	f43e <__ssvfscanf_r+0x1ea>
   10844:	4610      	mov	r0, r2
   10846:	00d9      	lsls	r1, r3, #3
   10848:	461e      	mov	r6, r3
   1084a:	f7f9 fbd3 	bl	9ff4 <realloc>
   1084e:	62b8      	str	r0, [r7, #40]	; 0x28
   10850:	2800      	cmp	r0, #0
   10852:	d0b0      	beq.n	107b6 <__ssvfscanf_r+0x1562>
   10854:	1942      	adds	r2, r0, r5
   10856:	64ba      	str	r2, [r7, #72]	; 0x48
   10858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1085a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1085c:	6010      	str	r0, [r2, #0]
   1085e:	0073      	lsls	r3, r6, #1
   10860:	623b      	str	r3, [r7, #32]
   10862:	e4f8      	b.n	10256 <__ssvfscanf_r+0x1002>
   10864:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   10868:	e63e      	b.n	104e8 <__ssvfscanf_r+0x1294>
   1086a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1086c:	6028      	str	r0, [r5, #0]
   1086e:	88ce      	ldrh	r6, [r1, #6]
   10870:	888a      	ldrh	r2, [r1, #4]
   10872:	4296      	cmp	r6, r2
   10874:	f0c0 808e 	bcc.w	10994 <__ssvfscanf_r+0x1740>
   10878:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1087c:	428a      	cmp	r2, r1
   1087e:	6338      	str	r0, [r7, #48]	; 0x30
   10880:	f240 80a5 	bls.w	109ce <__ssvfscanf_r+0x177a>
   10884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10886:	f8d3 8000 	ldr.w	r8, [r3]
   1088a:	e62d      	b.n	104e8 <__ssvfscanf_r+0x1294>
   1088c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1088e:	4295      	cmp	r5, r2
   10890:	f67e add5 	bls.w	f43e <__ssvfscanf_r+0x1ea>
   10894:	462c      	mov	r4, r5
   10896:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10898:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   1089c:	465a      	mov	r2, fp
   1089e:	4648      	mov	r0, r9
   108a0:	f001 fe42 	bl	12528 <_sungetc_r>
   108a4:	42ac      	cmp	r4, r5
   108a6:	d1f7      	bne.n	10898 <__ssvfscanf_r+0x1644>
   108a8:	f7fe bdc9 	b.w	f43e <__ssvfscanf_r+0x1ea>
   108ac:	462b      	mov	r3, r5
   108ae:	e7b4      	b.n	1081a <__ssvfscanf_r+0x15c6>
   108b0:	f001 fc64 	bl	1217c <_strtoull_r>
   108b4:	e5c1      	b.n	1043a <__ssvfscanf_r+0x11e6>
   108b6:	f8d8 3000 	ldr.w	r3, [r8]
   108ba:	461d      	mov	r5, r3
   108bc:	3301      	adds	r3, #1
   108be:	f47f a8d5 	bne.w	fa6c <__ssvfscanf_r+0x818>
   108c2:	462a      	mov	r2, r5
   108c4:	f7ff b8e8 	b.w	fa98 <__ssvfscanf_r+0x844>
   108c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   108ca:	6818      	ldr	r0, [r3, #0]
   108cc:	f001 fcb4 	bl	12238 <iswspace>
   108d0:	2800      	cmp	r0, #0
   108d2:	f47f aea8 	bne.w	10626 <__ssvfscanf_r+0x13d2>
   108d6:	2c03      	cmp	r4, #3
   108d8:	44aa      	add	sl, r5
   108da:	f47f a849 	bne.w	f970 <__ssvfscanf_r+0x71c>
   108de:	6833      	ldr	r3, [r6, #0]
   108e0:	2b04      	cmp	r3, #4
   108e2:	f47f a845 	bne.w	f970 <__ssvfscanf_r+0x71c>
   108e6:	f7ff b845 	b.w	f974 <__ssvfscanf_r+0x720>
   108ea:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   108ee:	f853 6b04 	ldr.w	r6, [r3], #4
   108f2:	633b      	str	r3, [r7, #48]	; 0x30
   108f4:	4615      	mov	r5, r2
   108f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   108f8:	64ba      	str	r2, [r7, #72]	; 0x48
   108fa:	e709      	b.n	10710 <__ssvfscanf_r+0x14bc>
   108fc:	461c      	mov	r4, r3
   108fe:	f8db 3004 	ldr.w	r3, [fp, #4]
   10902:	4598      	cmp	r8, r3
   10904:	dd39      	ble.n	1097a <__ssvfscanf_r+0x1726>
   10906:	f8db 2000 	ldr.w	r2, [fp]
   1090a:	441a      	add	r2, r3
   1090c:	f8cb 2000 	str.w	r2, [fp]
   10910:	4659      	mov	r1, fp
   10912:	4648      	mov	r0, r9
   10914:	441c      	add	r4, r3
   10916:	eba8 0803 	sub.w	r8, r8, r3
   1091a:	f001 fe45 	bl	125a8 <__ssrefill_r>
   1091e:	2800      	cmp	r0, #0
   10920:	d0ed      	beq.n	108fe <__ssvfscanf_r+0x16aa>
   10922:	2c00      	cmp	r4, #0
   10924:	f43e ad82 	beq.w	f42c <__ssvfscanf_r+0x1d8>
   10928:	44a2      	add	sl, r4
   1092a:	f7fe bcba 	b.w	f2a2 <__ssvfscanf_r+0x4e>
   1092e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   10930:	4643      	mov	r3, r8
   10932:	6829      	ldr	r1, [r5, #0]
   10934:	f8cd b000 	str.w	fp, [sp]
   10938:	2201      	movs	r2, #1
   1093a:	4648      	mov	r0, r9
   1093c:	f001 fe52 	bl	125e4 <_sfread_r>
   10940:	4604      	mov	r4, r0
   10942:	2800      	cmp	r0, #0
   10944:	f43e ad72 	beq.w	f42c <__ssvfscanf_r+0x1d8>
   10948:	3504      	adds	r5, #4
   1094a:	64bd      	str	r5, [r7, #72]	; 0x48
   1094c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1094e:	3301      	adds	r3, #1
   10950:	647b      	str	r3, [r7, #68]	; 0x44
   10952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10954:	633b      	str	r3, [r7, #48]	; 0x30
   10956:	44a2      	add	sl, r4
   10958:	f7fe bca3 	b.w	f2a2 <__ssvfscanf_r+0x4e>
   1095c:	6818      	ldr	r0, [r3, #0]
   1095e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10960:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   10964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10966:	633c      	str	r4, [r7, #48]	; 0x30
   10968:	3501      	adds	r5, #1
   1096a:	80dd      	strh	r5, [r3, #6]
   1096c:	63fe      	str	r6, [r7, #60]	; 0x3c
   1096e:	2520      	movs	r5, #32
   10970:	e6ce      	b.n	10710 <__ssvfscanf_r+0x14bc>
   10972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10974:	8093      	strh	r3, [r2, #4]
   10976:	6010      	str	r0, [r2, #0]
   10978:	e7f1      	b.n	1095e <__ssvfscanf_r+0x170a>
   1097a:	eba3 0308 	sub.w	r3, r3, r8
   1097e:	f8cb 3004 	str.w	r3, [fp, #4]
   10982:	f8db 3000 	ldr.w	r3, [fp]
   10986:	4444      	add	r4, r8
   10988:	4443      	add	r3, r8
   1098a:	f8cb 3000 	str.w	r3, [fp]
   1098e:	44a2      	add	sl, r4
   10990:	f7fe bc87 	b.w	f2a2 <__ssvfscanf_r+0x4e>
   10994:	680a      	ldr	r2, [r1, #0]
   10996:	63fa      	str	r2, [r7, #60]	; 0x3c
   10998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1099a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   1099e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   109a0:	3601      	adds	r6, #1
   109a2:	b2b6      	uxth	r6, r6
   109a4:	80d6      	strh	r6, [r2, #6]
   109a6:	4619      	mov	r1, r3
   109a8:	f8cd b000 	str.w	fp, [sp]
   109ac:	4643      	mov	r3, r8
   109ae:	2201      	movs	r2, #1
   109b0:	4648      	mov	r0, r9
   109b2:	f001 fe17 	bl	125e4 <_sfread_r>
   109b6:	4604      	mov	r4, r0
   109b8:	b1d8      	cbz	r0, 109f2 <__ssvfscanf_r+0x179e>
   109ba:	4580      	cmp	r8, r0
   109bc:	d9c6      	bls.n	1094c <__ssvfscanf_r+0x16f8>
   109be:	6828      	ldr	r0, [r5, #0]
   109c0:	4621      	mov	r1, r4
   109c2:	f7f9 fb17 	bl	9ff4 <realloc>
   109c6:	2800      	cmp	r0, #0
   109c8:	d0c0      	beq.n	1094c <__ssvfscanf_r+0x16f8>
   109ca:	6028      	str	r0, [r5, #0]
   109cc:	e7be      	b.n	1094c <__ssvfscanf_r+0x16f8>
   109ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   109d0:	3208      	adds	r2, #8
   109d2:	b294      	uxth	r4, r2
   109d4:	681a      	ldr	r2, [r3, #0]
   109d6:	637a      	str	r2, [r7, #52]	; 0x34
   109d8:	4610      	mov	r0, r2
   109da:	00a1      	lsls	r1, r4, #2
   109dc:	f7f9 fb0a 	bl	9ff4 <realloc>
   109e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   109e2:	63f8      	str	r0, [r7, #60]	; 0x3c
   109e4:	2800      	cmp	r0, #0
   109e6:	d05b      	beq.n	10aa0 <__ssvfscanf_r+0x184c>
   109e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   109ea:	809c      	strh	r4, [r3, #4]
   109ec:	6018      	str	r0, [r3, #0]
   109ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   109f0:	e7d2      	b.n	10998 <__ssvfscanf_r+0x1744>
   109f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   109f4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   109f8:	2b00      	cmp	r3, #0
   109fa:	f43f ad75 	beq.w	104e8 <__ssvfscanf_r+0x1294>
   109fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10a02:	065b      	lsls	r3, r3, #25
   10a04:	f57e ad1d 	bpl.w	f442 <__ssvfscanf_r+0x1ee>
   10a08:	e56a      	b.n	104e0 <__ssvfscanf_r+0x128c>
   10a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10a0c:	3202      	adds	r2, #2
   10a0e:	d11d      	bne.n	10a4c <__ssvfscanf_r+0x17f8>
   10a10:	f8db 2004 	ldr.w	r2, [fp, #4]
   10a14:	2a00      	cmp	r2, #0
   10a16:	461d      	mov	r5, r3
   10a18:	f73f ae80 	bgt.w	1071c <__ssvfscanf_r+0x14c8>
   10a1c:	4659      	mov	r1, fp
   10a1e:	4620      	mov	r0, r4
   10a20:	f001 fdc2 	bl	125a8 <__ssrefill_r>
   10a24:	b9e0      	cbnz	r0, 10a60 <__ssvfscanf_r+0x180c>
   10a26:	f1b9 0f00 	cmp.w	r9, #0
   10a2a:	f47f ae77 	bne.w	1071c <__ssvfscanf_r+0x14c8>
   10a2e:	4645      	mov	r5, r8
   10a30:	46a1      	mov	r9, r4
   10a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a34:	b123      	cbz	r3, 10a40 <__ssvfscanf_r+0x17ec>
   10a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10a38:	1af1      	subs	r1, r6, r3
   10a3a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   10a3e:	d827      	bhi.n	10a90 <__ssvfscanf_r+0x183c>
   10a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10a42:	2b00      	cmp	r3, #0
   10a44:	f47e ac2d 	bne.w	f2a2 <__ssvfscanf_r+0x4e>
   10a48:	f7ff ba1c 	b.w	fe84 <__ssvfscanf_r+0xc30>
   10a4c:	449a      	add	sl, r3
   10a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10a50:	2b03      	cmp	r3, #3
   10a52:	f47f ae97 	bne.w	10784 <__ssvfscanf_r+0x1530>
   10a56:	682b      	ldr	r3, [r5, #0]
   10a58:	2b04      	cmp	r3, #4
   10a5a:	f47f ae93 	bne.w	10784 <__ssvfscanf_r+0x1530>
   10a5e:	e693      	b.n	10788 <__ssvfscanf_r+0x1534>
   10a60:	46a1      	mov	r9, r4
   10a62:	462c      	mov	r4, r5
   10a64:	4645      	mov	r5, r8
   10a66:	2c00      	cmp	r4, #0
   10a68:	d0e3      	beq.n	10a32 <__ssvfscanf_r+0x17de>
   10a6a:	f7fe bcdf 	b.w	f42c <__ssvfscanf_r+0x1d8>
   10a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10a70:	1946      	adds	r6, r0, r5
   10a72:	6010      	str	r0, [r2, #0]
   10a74:	ea4f 0848 	mov.w	r8, r8, lsl #1
   10a78:	3604      	adds	r6, #4
   10a7a:	f8db 3004 	ldr.w	r3, [fp, #4]
   10a7e:	2b00      	cmp	r3, #0
   10a80:	f04f 0500 	mov.w	r5, #0
   10a84:	ddca      	ble.n	10a1c <__ssvfscanf_r+0x17c8>
   10a86:	f1b9 0f00 	cmp.w	r9, #0
   10a8a:	f47f ae47 	bne.w	1071c <__ssvfscanf_r+0x14c8>
   10a8e:	e7ce      	b.n	10a2e <__ssvfscanf_r+0x17da>
   10a90:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   10a92:	6820      	ldr	r0, [r4, #0]
   10a94:	f7f9 faae 	bl	9ff4 <realloc>
   10a98:	2800      	cmp	r0, #0
   10a9a:	d0d1      	beq.n	10a40 <__ssvfscanf_r+0x17ec>
   10a9c:	6020      	str	r0, [r4, #0]
   10a9e:	e7cf      	b.n	10a40 <__ssvfscanf_r+0x17ec>
   10aa0:	4690      	mov	r8, r2
   10aa2:	e521      	b.n	104e8 <__ssvfscanf_r+0x1294>

00010aa4 <_fclose_r>:
   10aa4:	b570      	push	{r4, r5, r6, lr}
   10aa6:	2900      	cmp	r1, #0
   10aa8:	d04b      	beq.n	10b42 <_fclose_r+0x9e>
   10aaa:	4606      	mov	r6, r0
   10aac:	460c      	mov	r4, r1
   10aae:	b110      	cbz	r0, 10ab6 <_fclose_r+0x12>
   10ab0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10ab2:	2b00      	cmp	r3, #0
   10ab4:	d048      	beq.n	10b48 <_fclose_r+0xa4>
   10ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10ab8:	07d8      	lsls	r0, r3, #31
   10aba:	d534      	bpl.n	10b26 <_fclose_r+0x82>
   10abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10ac0:	2b00      	cmp	r3, #0
   10ac2:	d03e      	beq.n	10b42 <_fclose_r+0x9e>
   10ac4:	4621      	mov	r1, r4
   10ac6:	4630      	mov	r0, r6
   10ac8:	f000 f850 	bl	10b6c <__sflush_r>
   10acc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10ace:	4605      	mov	r5, r0
   10ad0:	b133      	cbz	r3, 10ae0 <_fclose_r+0x3c>
   10ad2:	69e1      	ldr	r1, [r4, #28]
   10ad4:	4630      	mov	r0, r6
   10ad6:	4798      	blx	r3
   10ad8:	2800      	cmp	r0, #0
   10ada:	bfb8      	it	lt
   10adc:	f04f 35ff 	movlt.w	r5, #4294967295
   10ae0:	89a3      	ldrh	r3, [r4, #12]
   10ae2:	061a      	lsls	r2, r3, #24
   10ae4:	d43c      	bmi.n	10b60 <_fclose_r+0xbc>
   10ae6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10ae8:	b141      	cbz	r1, 10afc <_fclose_r+0x58>
   10aea:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10aee:	4299      	cmp	r1, r3
   10af0:	d002      	beq.n	10af8 <_fclose_r+0x54>
   10af2:	4630      	mov	r0, r6
   10af4:	f7fb fb96 	bl	c224 <_free_r>
   10af8:	2300      	movs	r3, #0
   10afa:	6323      	str	r3, [r4, #48]	; 0x30
   10afc:	6c61      	ldr	r1, [r4, #68]	; 0x44
   10afe:	b121      	cbz	r1, 10b0a <_fclose_r+0x66>
   10b00:	4630      	mov	r0, r6
   10b02:	f7fb fb8f 	bl	c224 <_free_r>
   10b06:	2300      	movs	r3, #0
   10b08:	6463      	str	r3, [r4, #68]	; 0x44
   10b0a:	f7fa fd09 	bl	b520 <__sfp_lock_acquire>
   10b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10b10:	2200      	movs	r2, #0
   10b12:	07db      	lsls	r3, r3, #31
   10b14:	81a2      	strh	r2, [r4, #12]
   10b16:	d51f      	bpl.n	10b58 <_fclose_r+0xb4>
   10b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10b1a:	f7fb f839 	bl	bb90 <__retarget_lock_close_recursive>
   10b1e:	f7fa fd05 	bl	b52c <__sfp_lock_release>
   10b22:	4628      	mov	r0, r5
   10b24:	bd70      	pop	{r4, r5, r6, pc}
   10b26:	89a3      	ldrh	r3, [r4, #12]
   10b28:	0599      	lsls	r1, r3, #22
   10b2a:	d4cb      	bmi.n	10ac4 <_fclose_r+0x20>
   10b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10b2e:	f7fb f831 	bl	bb94 <__retarget_lock_acquire_recursive>
   10b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10b36:	2b00      	cmp	r3, #0
   10b38:	d1c4      	bne.n	10ac4 <_fclose_r+0x20>
   10b3a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10b3c:	f015 0501 	ands.w	r5, r5, #1
   10b40:	d005      	beq.n	10b4e <_fclose_r+0xaa>
   10b42:	2500      	movs	r5, #0
   10b44:	4628      	mov	r0, r5
   10b46:	bd70      	pop	{r4, r5, r6, pc}
   10b48:	f7fa fccc 	bl	b4e4 <__sinit>
   10b4c:	e7b3      	b.n	10ab6 <_fclose_r+0x12>
   10b4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10b50:	f7fb f822 	bl	bb98 <__retarget_lock_release_recursive>
   10b54:	4628      	mov	r0, r5
   10b56:	bd70      	pop	{r4, r5, r6, pc}
   10b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10b5a:	f7fb f81d 	bl	bb98 <__retarget_lock_release_recursive>
   10b5e:	e7db      	b.n	10b18 <_fclose_r+0x74>
   10b60:	6921      	ldr	r1, [r4, #16]
   10b62:	4630      	mov	r0, r6
   10b64:	f7fb fb5e 	bl	c224 <_free_r>
   10b68:	e7bd      	b.n	10ae6 <_fclose_r+0x42>
   10b6a:	bf00      	nop

00010b6c <__sflush_r>:
   10b6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   10b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b74:	460c      	mov	r4, r1
   10b76:	0711      	lsls	r1, r2, #28
   10b78:	4680      	mov	r8, r0
   10b7a:	d447      	bmi.n	10c0c <__sflush_r+0xa0>
   10b7c:	6863      	ldr	r3, [r4, #4]
   10b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   10b82:	2b00      	cmp	r3, #0
   10b84:	81a2      	strh	r2, [r4, #12]
   10b86:	dd5e      	ble.n	10c46 <__sflush_r+0xda>
   10b88:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10b8a:	2d00      	cmp	r5, #0
   10b8c:	d058      	beq.n	10c40 <__sflush_r+0xd4>
   10b8e:	2300      	movs	r3, #0
   10b90:	f8d8 6000 	ldr.w	r6, [r8]
   10b94:	f8c8 3000 	str.w	r3, [r8]
   10b98:	b293      	uxth	r3, r2
   10b9a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   10b9e:	d156      	bne.n	10c4e <__sflush_r+0xe2>
   10ba0:	2301      	movs	r3, #1
   10ba2:	69e1      	ldr	r1, [r4, #28]
   10ba4:	4640      	mov	r0, r8
   10ba6:	47a8      	blx	r5
   10ba8:	1c43      	adds	r3, r0, #1
   10baa:	d067      	beq.n	10c7c <__sflush_r+0x110>
   10bac:	89a3      	ldrh	r3, [r4, #12]
   10bae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10bb0:	075f      	lsls	r7, r3, #29
   10bb2:	d505      	bpl.n	10bc0 <__sflush_r+0x54>
   10bb4:	6863      	ldr	r3, [r4, #4]
   10bb6:	1ac0      	subs	r0, r0, r3
   10bb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10bba:	b10b      	cbz	r3, 10bc0 <__sflush_r+0x54>
   10bbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10bbe:	1ac0      	subs	r0, r0, r3
   10bc0:	69e1      	ldr	r1, [r4, #28]
   10bc2:	4602      	mov	r2, r0
   10bc4:	2300      	movs	r3, #0
   10bc6:	4640      	mov	r0, r8
   10bc8:	47a8      	blx	r5
   10bca:	1c41      	adds	r1, r0, #1
   10bcc:	d141      	bne.n	10c52 <__sflush_r+0xe6>
   10bce:	f8d8 3000 	ldr.w	r3, [r8]
   10bd2:	2b00      	cmp	r3, #0
   10bd4:	d03d      	beq.n	10c52 <__sflush_r+0xe6>
   10bd6:	2b1d      	cmp	r3, #29
   10bd8:	d001      	beq.n	10bde <__sflush_r+0x72>
   10bda:	2b16      	cmp	r3, #22
   10bdc:	d156      	bne.n	10c8c <__sflush_r+0x120>
   10bde:	89a3      	ldrh	r3, [r4, #12]
   10be0:	6922      	ldr	r2, [r4, #16]
   10be2:	6022      	str	r2, [r4, #0]
   10be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10be8:	2100      	movs	r1, #0
   10bea:	6061      	str	r1, [r4, #4]
   10bec:	81a3      	strh	r3, [r4, #12]
   10bee:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10bf0:	f8c8 6000 	str.w	r6, [r8]
   10bf4:	b321      	cbz	r1, 10c40 <__sflush_r+0xd4>
   10bf6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10bfa:	4299      	cmp	r1, r3
   10bfc:	d002      	beq.n	10c04 <__sflush_r+0x98>
   10bfe:	4640      	mov	r0, r8
   10c00:	f7fb fb10 	bl	c224 <_free_r>
   10c04:	2000      	movs	r0, #0
   10c06:	6320      	str	r0, [r4, #48]	; 0x30
   10c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c0c:	6926      	ldr	r6, [r4, #16]
   10c0e:	b1be      	cbz	r6, 10c40 <__sflush_r+0xd4>
   10c10:	b293      	uxth	r3, r2
   10c12:	6825      	ldr	r5, [r4, #0]
   10c14:	6026      	str	r6, [r4, #0]
   10c16:	079a      	lsls	r2, r3, #30
   10c18:	bf0c      	ite	eq
   10c1a:	6963      	ldreq	r3, [r4, #20]
   10c1c:	2300      	movne	r3, #0
   10c1e:	1bad      	subs	r5, r5, r6
   10c20:	60a3      	str	r3, [r4, #8]
   10c22:	e00b      	b.n	10c3c <__sflush_r+0xd0>
   10c24:	462b      	mov	r3, r5
   10c26:	4632      	mov	r2, r6
   10c28:	69e1      	ldr	r1, [r4, #28]
   10c2a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10c2c:	4640      	mov	r0, r8
   10c2e:	47b8      	blx	r7
   10c30:	f1b0 0c00 	subs.w	ip, r0, #0
   10c34:	eba5 050c 	sub.w	r5, r5, ip
   10c38:	4466      	add	r6, ip
   10c3a:	dd17      	ble.n	10c6c <__sflush_r+0x100>
   10c3c:	2d00      	cmp	r5, #0
   10c3e:	dcf1      	bgt.n	10c24 <__sflush_r+0xb8>
   10c40:	2000      	movs	r0, #0
   10c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10c48:	2b00      	cmp	r3, #0
   10c4a:	dc9d      	bgt.n	10b88 <__sflush_r+0x1c>
   10c4c:	e7f8      	b.n	10c40 <__sflush_r+0xd4>
   10c4e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10c50:	e7ae      	b.n	10bb0 <__sflush_r+0x44>
   10c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10c56:	6922      	ldr	r2, [r4, #16]
   10c58:	6022      	str	r2, [r4, #0]
   10c5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10c5e:	81a3      	strh	r3, [r4, #12]
   10c60:	2200      	movs	r2, #0
   10c62:	04db      	lsls	r3, r3, #19
   10c64:	6062      	str	r2, [r4, #4]
   10c66:	d5c2      	bpl.n	10bee <__sflush_r+0x82>
   10c68:	6520      	str	r0, [r4, #80]	; 0x50
   10c6a:	e7c0      	b.n	10bee <__sflush_r+0x82>
   10c6c:	89a3      	ldrh	r3, [r4, #12]
   10c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10c72:	f04f 30ff 	mov.w	r0, #4294967295
   10c76:	81a3      	strh	r3, [r4, #12]
   10c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c7c:	f8d8 3000 	ldr.w	r3, [r8]
   10c80:	2b00      	cmp	r3, #0
   10c82:	d093      	beq.n	10bac <__sflush_r+0x40>
   10c84:	2b1d      	cmp	r3, #29
   10c86:	d006      	beq.n	10c96 <__sflush_r+0x12a>
   10c88:	2b16      	cmp	r3, #22
   10c8a:	d004      	beq.n	10c96 <__sflush_r+0x12a>
   10c8c:	89a3      	ldrh	r3, [r4, #12]
   10c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10c92:	81a3      	strh	r3, [r4, #12]
   10c94:	e7d5      	b.n	10c42 <__sflush_r+0xd6>
   10c96:	f8c8 6000 	str.w	r6, [r8]
   10c9a:	e7d1      	b.n	10c40 <__sflush_r+0xd4>

00010c9c <_fflush_r>:
   10c9c:	b538      	push	{r3, r4, r5, lr}
   10c9e:	460c      	mov	r4, r1
   10ca0:	4605      	mov	r5, r0
   10ca2:	b108      	cbz	r0, 10ca8 <_fflush_r+0xc>
   10ca4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10ca6:	b303      	cbz	r3, 10cea <_fflush_r+0x4e>
   10ca8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10cac:	b188      	cbz	r0, 10cd2 <_fflush_r+0x36>
   10cae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10cb0:	07db      	lsls	r3, r3, #31
   10cb2:	d401      	bmi.n	10cb8 <_fflush_r+0x1c>
   10cb4:	0581      	lsls	r1, r0, #22
   10cb6:	d50f      	bpl.n	10cd8 <_fflush_r+0x3c>
   10cb8:	4628      	mov	r0, r5
   10cba:	4621      	mov	r1, r4
   10cbc:	f7ff ff56 	bl	10b6c <__sflush_r>
   10cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10cc2:	07da      	lsls	r2, r3, #31
   10cc4:	4605      	mov	r5, r0
   10cc6:	d402      	bmi.n	10cce <_fflush_r+0x32>
   10cc8:	89a3      	ldrh	r3, [r4, #12]
   10cca:	059b      	lsls	r3, r3, #22
   10ccc:	d508      	bpl.n	10ce0 <_fflush_r+0x44>
   10cce:	4628      	mov	r0, r5
   10cd0:	bd38      	pop	{r3, r4, r5, pc}
   10cd2:	4605      	mov	r5, r0
   10cd4:	4628      	mov	r0, r5
   10cd6:	bd38      	pop	{r3, r4, r5, pc}
   10cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10cda:	f7fa ff5b 	bl	bb94 <__retarget_lock_acquire_recursive>
   10cde:	e7eb      	b.n	10cb8 <_fflush_r+0x1c>
   10ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10ce2:	f7fa ff59 	bl	bb98 <__retarget_lock_release_recursive>
   10ce6:	4628      	mov	r0, r5
   10ce8:	bd38      	pop	{r3, r4, r5, pc}
   10cea:	f7fa fbfb 	bl	b4e4 <__sinit>
   10cee:	e7db      	b.n	10ca8 <_fflush_r+0xc>

00010cf0 <__sccl>:
   10cf0:	b570      	push	{r4, r5, r6, lr}
   10cf2:	780c      	ldrb	r4, [r1, #0]
   10cf4:	2c5e      	cmp	r4, #94	; 0x5e
   10cf6:	4686      	mov	lr, r0
   10cf8:	d01e      	beq.n	10d38 <__sccl+0x48>
   10cfa:	2200      	movs	r2, #0
   10cfc:	1c48      	adds	r0, r1, #1
   10cfe:	4694      	mov	ip, r2
   10d00:	f10e 33ff 	add.w	r3, lr, #4294967295
   10d04:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   10d08:	f803 2f01 	strb.w	r2, [r3, #1]!
   10d0c:	428b      	cmp	r3, r1
   10d0e:	d1fb      	bne.n	10d08 <__sccl+0x18>
   10d10:	b184      	cbz	r4, 10d34 <__sccl+0x44>
   10d12:	f08c 0101 	eor.w	r1, ip, #1
   10d16:	f80e 1004 	strb.w	r1, [lr, r4]
   10d1a:	1c45      	adds	r5, r0, #1
   10d1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   10d20:	2b2d      	cmp	r3, #45	; 0x2d
   10d22:	d00e      	beq.n	10d42 <__sccl+0x52>
   10d24:	2b5d      	cmp	r3, #93	; 0x5d
   10d26:	d003      	beq.n	10d30 <__sccl+0x40>
   10d28:	b11b      	cbz	r3, 10d32 <__sccl+0x42>
   10d2a:	461c      	mov	r4, r3
   10d2c:	4628      	mov	r0, r5
   10d2e:	e7f2      	b.n	10d16 <__sccl+0x26>
   10d30:	4628      	mov	r0, r5
   10d32:	bd70      	pop	{r4, r5, r6, pc}
   10d34:	3801      	subs	r0, #1
   10d36:	bd70      	pop	{r4, r5, r6, pc}
   10d38:	2201      	movs	r2, #1
   10d3a:	784c      	ldrb	r4, [r1, #1]
   10d3c:	1c88      	adds	r0, r1, #2
   10d3e:	4694      	mov	ip, r2
   10d40:	e7de      	b.n	10d00 <__sccl+0x10>
   10d42:	f890 c001 	ldrb.w	ip, [r0, #1]
   10d46:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   10d4a:	d0ee      	beq.n	10d2a <__sccl+0x3a>
   10d4c:	4564      	cmp	r4, ip
   10d4e:	dcec      	bgt.n	10d2a <__sccl+0x3a>
   10d50:	1c66      	adds	r6, r4, #1
   10d52:	3002      	adds	r0, #2
   10d54:	eb0e 0206 	add.w	r2, lr, r6
   10d58:	f802 1b01 	strb.w	r1, [r2], #1
   10d5c:	eba2 030e 	sub.w	r3, r2, lr
   10d60:	3b01      	subs	r3, #1
   10d62:	459c      	cmp	ip, r3
   10d64:	dcf8      	bgt.n	10d58 <__sccl+0x68>
   10d66:	ebac 0304 	sub.w	r3, ip, r4
   10d6a:	3b01      	subs	r3, #1
   10d6c:	4564      	cmp	r4, ip
   10d6e:	bfa8      	it	ge
   10d70:	2300      	movge	r3, #0
   10d72:	3502      	adds	r5, #2
   10d74:	199c      	adds	r4, r3, r6
   10d76:	e7d1      	b.n	10d1c <__sccl+0x2c>

00010d78 <stpncpy>:
   10d78:	ea41 0300 	orr.w	r3, r1, r0
   10d7c:	079b      	lsls	r3, r3, #30
   10d7e:	b430      	push	{r4, r5}
   10d80:	d101      	bne.n	10d86 <stpncpy+0xe>
   10d82:	2a03      	cmp	r2, #3
   10d84:	d80f      	bhi.n	10da6 <stpncpy+0x2e>
   10d86:	f101 3cff 	add.w	ip, r1, #4294967295
   10d8a:	e007      	b.n	10d9c <stpncpy+0x24>
   10d8c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   10d90:	f803 1b01 	strb.w	r1, [r3], #1
   10d94:	1e54      	subs	r4, r2, #1
   10d96:	b1c1      	cbz	r1, 10dca <stpncpy+0x52>
   10d98:	4622      	mov	r2, r4
   10d9a:	4618      	mov	r0, r3
   10d9c:	4603      	mov	r3, r0
   10d9e:	2a00      	cmp	r2, #0
   10da0:	d1f4      	bne.n	10d8c <stpncpy+0x14>
   10da2:	bc30      	pop	{r4, r5}
   10da4:	4770      	bx	lr
   10da6:	460b      	mov	r3, r1
   10da8:	4619      	mov	r1, r3
   10daa:	f853 5b04 	ldr.w	r5, [r3], #4
   10dae:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   10db2:	ea24 0405 	bic.w	r4, r4, r5
   10db6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   10dba:	d1e4      	bne.n	10d86 <stpncpy+0xe>
   10dbc:	3a04      	subs	r2, #4
   10dbe:	2a03      	cmp	r2, #3
   10dc0:	f840 5b04 	str.w	r5, [r0], #4
   10dc4:	4619      	mov	r1, r3
   10dc6:	d8ef      	bhi.n	10da8 <stpncpy+0x30>
   10dc8:	e7dd      	b.n	10d86 <stpncpy+0xe>
   10dca:	4402      	add	r2, r0
   10dcc:	2c00      	cmp	r4, #0
   10dce:	d0e8      	beq.n	10da2 <stpncpy+0x2a>
   10dd0:	f803 1b01 	strb.w	r1, [r3], #1
   10dd4:	4293      	cmp	r3, r2
   10dd6:	d1fb      	bne.n	10dd0 <stpncpy+0x58>
   10dd8:	bc30      	pop	{r4, r5}
   10dda:	4770      	bx	lr

00010ddc <_localeconv_r>:
   10ddc:	4800      	ldr	r0, [pc, #0]	; (10de0 <_localeconv_r+0x4>)
   10dde:	4770      	bx	lr
   10de0:	200086b8 	.word	0x200086b8
   10de4:	00000000 	.word	0x00000000

00010de8 <frexp>:
   10de8:	b430      	push	{r4, r5}
   10dea:	b082      	sub	sp, #8
   10dec:	ed8d 0b00 	vstr	d0, [sp]
   10df0:	9a01      	ldr	r2, [sp, #4]
   10df2:	4c19      	ldr	r4, [pc, #100]	; (10e58 <frexp+0x70>)
   10df4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10df8:	2100      	movs	r1, #0
   10dfa:	42a3      	cmp	r3, r4
   10dfc:	6001      	str	r1, [r0, #0]
   10dfe:	dc21      	bgt.n	10e44 <frexp+0x5c>
   10e00:	9c00      	ldr	r4, [sp, #0]
   10e02:	431c      	orrs	r4, r3
   10e04:	d01e      	beq.n	10e44 <frexp+0x5c>
   10e06:	4c15      	ldr	r4, [pc, #84]	; (10e5c <frexp+0x74>)
   10e08:	4014      	ands	r4, r2
   10e0a:	b954      	cbnz	r4, 10e22 <frexp+0x3a>
   10e0c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 10e50 <frexp+0x68>
   10e10:	ee20 7b07 	vmul.f64	d7, d0, d7
   10e14:	ed8d 7b00 	vstr	d7, [sp]
   10e18:	9a01      	ldr	r2, [sp, #4]
   10e1a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   10e1e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10e22:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   10e26:	e9dd 4500 	ldrd	r4, r5, [sp]
   10e2a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   10e2e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10e32:	151b      	asrs	r3, r3, #20
   10e34:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   10e38:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   10e3c:	e9cd 4500 	strd	r4, r5, [sp]
   10e40:	440b      	add	r3, r1
   10e42:	6003      	str	r3, [r0, #0]
   10e44:	ed9d 0b00 	vldr	d0, [sp]
   10e48:	b002      	add	sp, #8
   10e4a:	bc30      	pop	{r4, r5}
   10e4c:	4770      	bx	lr
   10e4e:	bf00      	nop
   10e50:	00000000 	.word	0x00000000
   10e54:	43500000 	.word	0x43500000
   10e58:	7fefffff 	.word	0x7fefffff
   10e5c:	7ff00000 	.word	0x7ff00000

00010e60 <__assert_func>:
   10e60:	b500      	push	{lr}
   10e62:	4c0b      	ldr	r4, [pc, #44]	; (10e90 <__assert_func+0x30>)
   10e64:	6825      	ldr	r5, [r4, #0]
   10e66:	4614      	mov	r4, r2
   10e68:	68ee      	ldr	r6, [r5, #12]
   10e6a:	461a      	mov	r2, r3
   10e6c:	b085      	sub	sp, #20
   10e6e:	4603      	mov	r3, r0
   10e70:	460d      	mov	r5, r1
   10e72:	b14c      	cbz	r4, 10e88 <__assert_func+0x28>
   10e74:	4907      	ldr	r1, [pc, #28]	; (10e94 <__assert_func+0x34>)
   10e76:	9500      	str	r5, [sp, #0]
   10e78:	e9cd 1401 	strd	r1, r4, [sp, #4]
   10e7c:	4630      	mov	r0, r6
   10e7e:	4906      	ldr	r1, [pc, #24]	; (10e98 <__assert_func+0x38>)
   10e80:	f001 fabe 	bl	12400 <fiprintf>
   10e84:	f7f7 fa46 	bl	8314 <abort>
   10e88:	4904      	ldr	r1, [pc, #16]	; (10e9c <__assert_func+0x3c>)
   10e8a:	460c      	mov	r4, r1
   10e8c:	e7f3      	b.n	10e76 <__assert_func+0x16>
   10e8e:	bf00      	nop
   10e90:	20008b50 	.word	0x20008b50
   10e94:	20000860 	.word	0x20000860
   10e98:	20000870 	.word	0x20000870
   10e9c:	20007ffc 	.word	0x20007ffc

00010ea0 <_calloc_r>:
   10ea0:	b538      	push	{r3, r4, r5, lr}
   10ea2:	fba1 1402 	umull	r1, r4, r1, r2
   10ea6:	bb8c      	cbnz	r4, 10f0c <_calloc_r+0x6c>
   10ea8:	f7f8 fde8 	bl	9a7c <_malloc_r>
   10eac:	4605      	mov	r5, r0
   10eae:	b1e0      	cbz	r0, 10eea <_calloc_r+0x4a>
   10eb0:	f850 2c04 	ldr.w	r2, [r0, #-4]
   10eb4:	f022 0203 	bic.w	r2, r2, #3
   10eb8:	3a04      	subs	r2, #4
   10eba:	2a24      	cmp	r2, #36	; 0x24
   10ebc:	d817      	bhi.n	10eee <_calloc_r+0x4e>
   10ebe:	2a13      	cmp	r2, #19
   10ec0:	d91a      	bls.n	10ef8 <_calloc_r+0x58>
   10ec2:	2a1b      	cmp	r2, #27
   10ec4:	e9c0 4400 	strd	r4, r4, [r0]
   10ec8:	d91d      	bls.n	10f06 <_calloc_r+0x66>
   10eca:	2a24      	cmp	r2, #36	; 0x24
   10ecc:	bf14      	ite	ne
   10ece:	f100 0210 	addne.w	r2, r0, #16
   10ed2:	f100 0218 	addeq.w	r2, r0, #24
   10ed6:	f04f 0300 	mov.w	r3, #0
   10eda:	e9c0 4402 	strd	r4, r4, [r0, #8]
   10ede:	bf04      	itt	eq
   10ee0:	6104      	streq	r4, [r0, #16]
   10ee2:	6144      	streq	r4, [r0, #20]
   10ee4:	e9c2 3300 	strd	r3, r3, [r2]
   10ee8:	6093      	str	r3, [r2, #8]
   10eea:	4628      	mov	r0, r5
   10eec:	bd38      	pop	{r3, r4, r5, pc}
   10eee:	4621      	mov	r1, r4
   10ef0:	f7fa fcec 	bl	b8cc <memset>
   10ef4:	4628      	mov	r0, r5
   10ef6:	bd38      	pop	{r3, r4, r5, pc}
   10ef8:	4602      	mov	r2, r0
   10efa:	2300      	movs	r3, #0
   10efc:	e9c2 3300 	strd	r3, r3, [r2]
   10f00:	6093      	str	r3, [r2, #8]
   10f02:	4628      	mov	r0, r5
   10f04:	bd38      	pop	{r3, r4, r5, pc}
   10f06:	f100 0208 	add.w	r2, r0, #8
   10f0a:	e7f6      	b.n	10efa <_calloc_r+0x5a>
   10f0c:	f7fa fe14 	bl	bb38 <__errno>
   10f10:	230c      	movs	r3, #12
   10f12:	2500      	movs	r5, #0
   10f14:	6003      	str	r3, [r0, #0]
   10f16:	e7e8      	b.n	10eea <_calloc_r+0x4a>

00010f18 <quorem>:
   10f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f1c:	6903      	ldr	r3, [r0, #16]
   10f1e:	690c      	ldr	r4, [r1, #16]
   10f20:	42a3      	cmp	r3, r4
   10f22:	b083      	sub	sp, #12
   10f24:	f2c0 8087 	blt.w	11036 <quorem+0x11e>
   10f28:	3c01      	subs	r4, #1
   10f2a:	f101 0514 	add.w	r5, r1, #20
   10f2e:	00a3      	lsls	r3, r4, #2
   10f30:	f100 0814 	add.w	r8, r0, #20
   10f34:	9300      	str	r3, [sp, #0]
   10f36:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   10f3a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10f3e:	3301      	adds	r3, #1
   10f40:	4681      	mov	r9, r0
   10f42:	429a      	cmp	r2, r3
   10f44:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   10f48:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   10f4c:	9001      	str	r0, [sp, #4]
   10f4e:	fbb2 f6f3 	udiv	r6, r2, r3
   10f52:	d33b      	bcc.n	10fcc <quorem+0xb4>
   10f54:	f04f 0c00 	mov.w	ip, #0
   10f58:	46ae      	mov	lr, r5
   10f5a:	4640      	mov	r0, r8
   10f5c:	46e2      	mov	sl, ip
   10f5e:	4663      	mov	r3, ip
   10f60:	f85e bb04 	ldr.w	fp, [lr], #4
   10f64:	6802      	ldr	r2, [r0, #0]
   10f66:	fa1f fc8b 	uxth.w	ip, fp
   10f6a:	fb06 330c 	mla	r3, r6, ip, r3
   10f6e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   10f72:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   10f76:	fb06 cc0b 	mla	ip, r6, fp, ip
   10f7a:	b29b      	uxth	r3, r3
   10f7c:	ebaa 0303 	sub.w	r3, sl, r3
   10f80:	fa1f fa8c 	uxth.w	sl, ip
   10f84:	fa13 f382 	uxtah	r3, r3, r2
   10f88:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   10f8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10f90:	b29b      	uxth	r3, r3
   10f92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10f96:	4577      	cmp	r7, lr
   10f98:	f840 3b04 	str.w	r3, [r0], #4
   10f9c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   10fa0:	ea4f 431c 	mov.w	r3, ip, lsr #16
   10fa4:	d2dc      	bcs.n	10f60 <quorem+0x48>
   10fa6:	9b00      	ldr	r3, [sp, #0]
   10fa8:	f858 3003 	ldr.w	r3, [r8, r3]
   10fac:	b973      	cbnz	r3, 10fcc <quorem+0xb4>
   10fae:	9b01      	ldr	r3, [sp, #4]
   10fb0:	3b04      	subs	r3, #4
   10fb2:	4598      	cmp	r8, r3
   10fb4:	d304      	bcc.n	10fc0 <quorem+0xa8>
   10fb6:	e007      	b.n	10fc8 <quorem+0xb0>
   10fb8:	4598      	cmp	r8, r3
   10fba:	f104 34ff 	add.w	r4, r4, #4294967295
   10fbe:	d203      	bcs.n	10fc8 <quorem+0xb0>
   10fc0:	f853 2904 	ldr.w	r2, [r3], #-4
   10fc4:	2a00      	cmp	r2, #0
   10fc6:	d0f7      	beq.n	10fb8 <quorem+0xa0>
   10fc8:	f8c9 4010 	str.w	r4, [r9, #16]
   10fcc:	4648      	mov	r0, r9
   10fce:	f7fc f933 	bl	d238 <__mcmp>
   10fd2:	2800      	cmp	r0, #0
   10fd4:	db2b      	blt.n	1102e <quorem+0x116>
   10fd6:	3601      	adds	r6, #1
   10fd8:	4641      	mov	r1, r8
   10fda:	2300      	movs	r3, #0
   10fdc:	f855 0b04 	ldr.w	r0, [r5], #4
   10fe0:	f8d1 c000 	ldr.w	ip, [r1]
   10fe4:	b282      	uxth	r2, r0
   10fe6:	1a9a      	subs	r2, r3, r2
   10fe8:	0c03      	lsrs	r3, r0, #16
   10fea:	fa12 f28c 	uxtah	r2, r2, ip
   10fee:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   10ff2:	eb03 4322 	add.w	r3, r3, r2, asr #16
   10ff6:	b292      	uxth	r2, r2
   10ff8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   10ffc:	42af      	cmp	r7, r5
   10ffe:	f841 2b04 	str.w	r2, [r1], #4
   11002:	ea4f 4323 	mov.w	r3, r3, asr #16
   11006:	d2e9      	bcs.n	10fdc <quorem+0xc4>
   11008:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1100c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   11010:	b96a      	cbnz	r2, 1102e <quorem+0x116>
   11012:	3b04      	subs	r3, #4
   11014:	4598      	cmp	r8, r3
   11016:	d304      	bcc.n	11022 <quorem+0x10a>
   11018:	e007      	b.n	1102a <quorem+0x112>
   1101a:	4598      	cmp	r8, r3
   1101c:	f104 34ff 	add.w	r4, r4, #4294967295
   11020:	d203      	bcs.n	1102a <quorem+0x112>
   11022:	f853 2904 	ldr.w	r2, [r3], #-4
   11026:	2a00      	cmp	r2, #0
   11028:	d0f7      	beq.n	1101a <quorem+0x102>
   1102a:	f8c9 4010 	str.w	r4, [r9, #16]
   1102e:	4630      	mov	r0, r6
   11030:	b003      	add	sp, #12
   11032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11036:	2000      	movs	r0, #0
   11038:	b003      	add	sp, #12
   1103a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1103e:	bf00      	nop

00011040 <_dtoa_r>:
   11040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11044:	ed2d 8b02 	vpush	{d8}
   11048:	b08f      	sub	sp, #60	; 0x3c
   1104a:	ed8d 0b02 	vstr	d0, [sp, #8]
   1104e:	9101      	str	r1, [sp, #4]
   11050:	6b81      	ldr	r1, [r0, #56]	; 0x38
   11052:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   11054:	9305      	str	r3, [sp, #20]
   11056:	ec57 6b10 	vmov	r6, r7, d0
   1105a:	4604      	mov	r4, r0
   1105c:	4693      	mov	fp, r2
   1105e:	b141      	cbz	r1, 11072 <_dtoa_r+0x32>
   11060:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   11062:	604a      	str	r2, [r1, #4]
   11064:	2301      	movs	r3, #1
   11066:	4093      	lsls	r3, r2
   11068:	608b      	str	r3, [r1, #8]
   1106a:	f7fb fe2d 	bl	ccc8 <_Bfree>
   1106e:	2300      	movs	r3, #0
   11070:	63a3      	str	r3, [r4, #56]	; 0x38
   11072:	f1b7 0800 	subs.w	r8, r7, #0
   11076:	bfb4      	ite	lt
   11078:	2301      	movlt	r3, #1
   1107a:	2300      	movge	r3, #0
   1107c:	602b      	str	r3, [r5, #0]
   1107e:	4bbe      	ldr	r3, [pc, #760]	; (11378 <_dtoa_r+0x338>)
   11080:	bfbc      	itt	lt
   11082:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   11086:	f8cd 800c 	strlt.w	r8, [sp, #12]
   1108a:	ea33 0308 	bics.w	r3, r3, r8
   1108e:	f000 809f 	beq.w	111d0 <_dtoa_r+0x190>
   11092:	ed9d 8b02 	vldr	d8, [sp, #8]
   11096:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1109e:	d111      	bne.n	110c4 <_dtoa_r+0x84>
   110a0:	9a05      	ldr	r2, [sp, #20]
   110a2:	2301      	movs	r3, #1
   110a4:	6013      	str	r3, [r2, #0]
   110a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   110a8:	2b00      	cmp	r3, #0
   110aa:	f000 823f 	beq.w	1152c <_dtoa_r+0x4ec>
   110ae:	4bb3      	ldr	r3, [pc, #716]	; (1137c <_dtoa_r+0x33c>)
   110b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   110b2:	6013      	str	r3, [r2, #0]
   110b4:	3b01      	subs	r3, #1
   110b6:	9300      	str	r3, [sp, #0]
   110b8:	9800      	ldr	r0, [sp, #0]
   110ba:	b00f      	add	sp, #60	; 0x3c
   110bc:	ecbd 8b02 	vpop	{d8}
   110c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110c4:	aa0c      	add	r2, sp, #48	; 0x30
   110c6:	a90d      	add	r1, sp, #52	; 0x34
   110c8:	4620      	mov	r0, r4
   110ca:	eeb0 0b48 	vmov.f64	d0, d8
   110ce:	f7fc fa13 	bl	d4f8 <__d2b>
   110d2:	ea5f 5318 	movs.w	r3, r8, lsr #20
   110d6:	4605      	mov	r5, r0
   110d8:	f040 8092 	bne.w	11200 <_dtoa_r+0x1c0>
   110dc:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   110e0:	440b      	add	r3, r1
   110e2:	f203 4232 	addw	r2, r3, #1074	; 0x432
   110e6:	2a20      	cmp	r2, #32
   110e8:	f340 82fa 	ble.w	116e0 <_dtoa_r+0x6a0>
   110ec:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   110f0:	fa08 f802 	lsl.w	r8, r8, r2
   110f4:	f203 4212 	addw	r2, r3, #1042	; 0x412
   110f8:	40d6      	lsrs	r6, r2
   110fa:	ea48 0206 	orr.w	r2, r8, r6
   110fe:	ee07 2a10 	vmov	s14, r2
   11102:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   11106:	1e58      	subs	r0, r3, #1
   11108:	ee17 6a90 	vmov	r6, s15
   1110c:	ec53 2b17 	vmov	r2, r3, d7
   11110:	f04f 0a01 	mov.w	sl, #1
   11114:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   11118:	ed9f 3b91 	vldr	d3, [pc, #580]	; 11360 <_dtoa_r+0x320>
   1111c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 11368 <_dtoa_r+0x328>
   11120:	ed9f 5b93 	vldr	d5, [pc, #588]	; 11370 <_dtoa_r+0x330>
   11124:	ee06 0a90 	vmov	s13, r0
   11128:	ec43 2b12 	vmov	d2, r2, r3
   1112c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   11130:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   11134:	ee32 6b46 	vsub.f64	d6, d2, d6
   11138:	eea6 7b03 	vfma.f64	d7, d6, d3
   1113c:	eea4 7b05 	vfma.f64	d7, d4, d5
   11140:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11144:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   11148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1114c:	ee16 7a90 	vmov	r7, s13
   11150:	d508      	bpl.n	11164 <_dtoa_r+0x124>
   11152:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   11156:	eeb4 6b47 	vcmp.f64	d6, d7
   1115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1115e:	bf18      	it	ne
   11160:	f107 37ff 	addne.w	r7, r7, #4294967295
   11164:	2f16      	cmp	r7, #22
   11166:	f200 8145 	bhi.w	113f4 <_dtoa_r+0x3b4>
   1116a:	4b85      	ldr	r3, [pc, #532]	; (11380 <_dtoa_r+0x340>)
   1116c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   11170:	ed93 7b00 	vldr	d7, [r3]
   11174:	eeb4 8bc7 	vcmpe.f64	d8, d7
   11178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1117c:	d557      	bpl.n	1122e <_dtoa_r+0x1ee>
   1117e:	1a09      	subs	r1, r1, r0
   11180:	2300      	movs	r3, #0
   11182:	f1b1 0801 	subs.w	r8, r1, #1
   11186:	f107 37ff 	add.w	r7, r7, #4294967295
   1118a:	930a      	str	r3, [sp, #40]	; 0x28
   1118c:	f100 8139 	bmi.w	11402 <_dtoa_r+0x3c2>
   11190:	2300      	movs	r3, #0
   11192:	9306      	str	r3, [sp, #24]
   11194:	2f00      	cmp	r7, #0
   11196:	da52      	bge.n	1123e <_dtoa_r+0x1fe>
   11198:	9b06      	ldr	r3, [sp, #24]
   1119a:	9704      	str	r7, [sp, #16]
   1119c:	1bdb      	subs	r3, r3, r7
   1119e:	9306      	str	r3, [sp, #24]
   111a0:	427b      	negs	r3, r7
   111a2:	9308      	str	r3, [sp, #32]
   111a4:	9b01      	ldr	r3, [sp, #4]
   111a6:	2b09      	cmp	r3, #9
   111a8:	f04f 0700 	mov.w	r7, #0
   111ac:	d84e      	bhi.n	1124c <_dtoa_r+0x20c>
   111ae:	2b05      	cmp	r3, #5
   111b0:	f340 829d 	ble.w	116ee <_dtoa_r+0x6ae>
   111b4:	3b04      	subs	r3, #4
   111b6:	9301      	str	r3, [sp, #4]
   111b8:	2600      	movs	r6, #0
   111ba:	9b01      	ldr	r3, [sp, #4]
   111bc:	1e9a      	subs	r2, r3, #2
   111be:	2a03      	cmp	r2, #3
   111c0:	f200 8125 	bhi.w	1140e <_dtoa_r+0x3ce>
   111c4:	e8df f012 	tbh	[pc, r2, lsl #1]
   111c8:	03a703aa 	.word	0x03a703aa
   111cc:	037e039d 	.word	0x037e039d
   111d0:	9a05      	ldr	r2, [sp, #20]
   111d2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   111d6:	f242 730f 	movw	r3, #9999	; 0x270f
   111da:	ea58 0806 	orrs.w	r8, r8, r6
   111de:	6013      	str	r3, [r2, #0]
   111e0:	d11e      	bne.n	11220 <_dtoa_r+0x1e0>
   111e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   111e4:	2b00      	cmp	r3, #0
   111e6:	f000 8591 	beq.w	11d0c <_dtoa_r+0xccc>
   111ea:	4b66      	ldr	r3, [pc, #408]	; (11384 <_dtoa_r+0x344>)
   111ec:	9300      	str	r3, [sp, #0]
   111ee:	3308      	adds	r3, #8
   111f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   111f2:	9800      	ldr	r0, [sp, #0]
   111f4:	6013      	str	r3, [r2, #0]
   111f6:	b00f      	add	sp, #60	; 0x3c
   111f8:	ecbd 8b02 	vpop	{d8}
   111fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11200:	ee18 6a90 	vmov	r6, s17
   11204:	f3c6 0613 	ubfx	r6, r6, #0, #20
   11208:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   1120c:	ec53 2b18 	vmov	r2, r3, d8
   11210:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   11214:	990c      	ldr	r1, [sp, #48]	; 0x30
   11216:	f04f 0a00 	mov.w	sl, #0
   1121a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1121e:	e77b      	b.n	11118 <_dtoa_r+0xd8>
   11220:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11222:	2b00      	cmp	r3, #0
   11224:	f040 833b 	bne.w	1189e <_dtoa_r+0x85e>
   11228:	4b57      	ldr	r3, [pc, #348]	; (11388 <_dtoa_r+0x348>)
   1122a:	9300      	str	r3, [sp, #0]
   1122c:	e744      	b.n	110b8 <_dtoa_r+0x78>
   1122e:	1a09      	subs	r1, r1, r0
   11230:	2300      	movs	r3, #0
   11232:	f1b1 0801 	subs.w	r8, r1, #1
   11236:	930a      	str	r3, [sp, #40]	; 0x28
   11238:	f100 80e3 	bmi.w	11402 <_dtoa_r+0x3c2>
   1123c:	9306      	str	r3, [sp, #24]
   1123e:	2300      	movs	r3, #0
   11240:	9308      	str	r3, [sp, #32]
   11242:	9b01      	ldr	r3, [sp, #4]
   11244:	9704      	str	r7, [sp, #16]
   11246:	2b09      	cmp	r3, #9
   11248:	44b8      	add	r8, r7
   1124a:	d9b0      	bls.n	111ae <_dtoa_r+0x16e>
   1124c:	2300      	movs	r3, #0
   1124e:	2601      	movs	r6, #1
   11250:	9301      	str	r3, [sp, #4]
   11252:	9607      	str	r6, [sp, #28]
   11254:	f04f 39ff 	mov.w	r9, #4294967295
   11258:	469b      	mov	fp, r3
   1125a:	2100      	movs	r1, #0
   1125c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1125e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   11262:	4620      	mov	r0, r4
   11264:	f7fb fd0a 	bl	cc7c <_Balloc>
   11268:	9000      	str	r0, [sp, #0]
   1126a:	2800      	cmp	r0, #0
   1126c:	f000 8540 	beq.w	11cf0 <_dtoa_r+0xcb0>
   11270:	9b00      	ldr	r3, [sp, #0]
   11272:	63a3      	str	r3, [r4, #56]	; 0x38
   11274:	f1b9 0f0e 	cmp.w	r9, #14
   11278:	f200 80dc 	bhi.w	11434 <_dtoa_r+0x3f4>
   1127c:	2e00      	cmp	r6, #0
   1127e:	f000 80d9 	beq.w	11434 <_dtoa_r+0x3f4>
   11282:	9b04      	ldr	r3, [sp, #16]
   11284:	2b00      	cmp	r3, #0
   11286:	f340 83de 	ble.w	11a46 <_dtoa_r+0xa06>
   1128a:	4a3d      	ldr	r2, [pc, #244]	; (11380 <_dtoa_r+0x340>)
   1128c:	f003 010f 	and.w	r1, r3, #15
   11290:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11294:	ed92 7b00 	vldr	d7, [r2]
   11298:	111a      	asrs	r2, r3, #4
   1129a:	05db      	lsls	r3, r3, #23
   1129c:	f140 8382 	bpl.w	119a4 <_dtoa_r+0x964>
   112a0:	493a      	ldr	r1, [pc, #232]	; (1138c <_dtoa_r+0x34c>)
   112a2:	ed91 6b08 	vldr	d6, [r1, #32]
   112a6:	f002 020f 	and.w	r2, r2, #15
   112aa:	2003      	movs	r0, #3
   112ac:	ee88 5b06 	vdiv.f64	d5, d8, d6
   112b0:	b15a      	cbz	r2, 112ca <_dtoa_r+0x28a>
   112b2:	4936      	ldr	r1, [pc, #216]	; (1138c <_dtoa_r+0x34c>)
   112b4:	07d6      	lsls	r6, r2, #31
   112b6:	d504      	bpl.n	112c2 <_dtoa_r+0x282>
   112b8:	ed91 6b00 	vldr	d6, [r1]
   112bc:	3001      	adds	r0, #1
   112be:	ee27 7b06 	vmul.f64	d7, d7, d6
   112c2:	1052      	asrs	r2, r2, #1
   112c4:	f101 0108 	add.w	r1, r1, #8
   112c8:	d1f4      	bne.n	112b4 <_dtoa_r+0x274>
   112ca:	ee85 6b07 	vdiv.f64	d6, d5, d7
   112ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   112d0:	b13b      	cbz	r3, 112e2 <_dtoa_r+0x2a2>
   112d2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   112d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   112da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   112de:	f100 84ae 	bmi.w	11c3e <_dtoa_r+0xbfe>
   112e2:	ee07 0a90 	vmov	s15, r0
   112e6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   112ea:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   112ee:	eea5 7b06 	vfma.f64	d7, d5, d6
   112f2:	ee17 2a90 	vmov	r2, s15
   112f6:	ec51 0b17 	vmov	r0, r1, d7
   112fa:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   112fe:	f1b9 0f00 	cmp.w	r9, #0
   11302:	f000 8388 	beq.w	11a16 <_dtoa_r+0x9d6>
   11306:	9e04      	ldr	r6, [sp, #16]
   11308:	464a      	mov	r2, r9
   1130a:	9b07      	ldr	r3, [sp, #28]
   1130c:	2b00      	cmp	r3, #0
   1130e:	f000 8447 	beq.w	11ba0 <_dtoa_r+0xb60>
   11312:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   11316:	4b1a      	ldr	r3, [pc, #104]	; (11380 <_dtoa_r+0x340>)
   11318:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   1131c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   11320:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   11324:	ee36 7b47 	vsub.f64	d7, d6, d7
   11328:	ed1c 6b02 	vldr	d6, [ip, #-8]
   1132c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   11330:	ec41 0b16 	vmov	d6, r0, r1
   11334:	ee14 0a90 	vmov	r0, s9
   11338:	ee35 5b46 	vsub.f64	d5, d5, d6
   1133c:	9900      	ldr	r1, [sp, #0]
   1133e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11342:	3030      	adds	r0, #48	; 0x30
   11344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11348:	f801 0b01 	strb.w	r0, [r1], #1
   1134c:	f300 84ac 	bgt.w	11ca8 <_dtoa_r+0xc68>
   11350:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   11354:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11358:	f04f 0c00 	mov.w	ip, #0
   1135c:	e031      	b.n	113c2 <_dtoa_r+0x382>
   1135e:	bf00      	nop
   11360:	636f4361 	.word	0x636f4361
   11364:	3fd287a7 	.word	0x3fd287a7
   11368:	8b60c8b3 	.word	0x8b60c8b3
   1136c:	3fc68a28 	.word	0x3fc68a28
   11370:	509f79fb 	.word	0x509f79fb
   11374:	3fd34413 	.word	0x3fd34413
   11378:	7ff00000 	.word	0x7ff00000
   1137c:	20000c49 	.word	0x20000c49
   11380:	200002a8 	.word	0x200002a8
   11384:	20000b80 	.word	0x20000b80
   11388:	20000b8c 	.word	0x20000b8c
   1138c:	20000280 	.word	0x20000280
   11390:	f10c 0c01 	add.w	ip, ip, #1
   11394:	4594      	cmp	ip, r2
   11396:	da4d      	bge.n	11434 <_dtoa_r+0x3f4>
   11398:	ee27 7b04 	vmul.f64	d7, d7, d4
   1139c:	ee25 5b04 	vmul.f64	d5, d5, d4
   113a0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   113a4:	ee16 3a90 	vmov	r3, s13
   113a8:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   113ac:	3330      	adds	r3, #48	; 0x30
   113ae:	ee37 7b43 	vsub.f64	d7, d7, d3
   113b2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   113b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   113ba:	f801 3b01 	strb.w	r3, [r1], #1
   113be:	f100 8473 	bmi.w	11ca8 <_dtoa_r+0xc68>
   113c2:	ee32 6b47 	vsub.f64	d6, d2, d7
   113c6:	eeb4 6bc5 	vcmpe.f64	d6, d5
   113ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   113ce:	d5df      	bpl.n	11390 <_dtoa_r+0x350>
   113d0:	9a00      	ldr	r2, [sp, #0]
   113d2:	9604      	str	r6, [sp, #16]
   113d4:	e002      	b.n	113dc <_dtoa_r+0x39c>
   113d6:	428a      	cmp	r2, r1
   113d8:	f000 8450 	beq.w	11c7c <_dtoa_r+0xc3c>
   113dc:	4689      	mov	r9, r1
   113de:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   113e2:	2b39      	cmp	r3, #57	; 0x39
   113e4:	d0f7      	beq.n	113d6 <_dtoa_r+0x396>
   113e6:	3301      	adds	r3, #1
   113e8:	b2db      	uxtb	r3, r3
   113ea:	700b      	strb	r3, [r1, #0]
   113ec:	9b04      	ldr	r3, [sp, #16]
   113ee:	3301      	adds	r3, #1
   113f0:	9304      	str	r3, [sp, #16]
   113f2:	e155      	b.n	116a0 <_dtoa_r+0x660>
   113f4:	1a09      	subs	r1, r1, r0
   113f6:	2301      	movs	r3, #1
   113f8:	f1b1 0801 	subs.w	r8, r1, #1
   113fc:	930a      	str	r3, [sp, #40]	; 0x28
   113fe:	f57f aec7 	bpl.w	11190 <_dtoa_r+0x150>
   11402:	f1c1 0301 	rsb	r3, r1, #1
   11406:	9306      	str	r3, [sp, #24]
   11408:	f04f 0800 	mov.w	r8, #0
   1140c:	e6c2      	b.n	11194 <_dtoa_r+0x154>
   1140e:	2600      	movs	r6, #0
   11410:	63e6      	str	r6, [r4, #60]	; 0x3c
   11412:	4631      	mov	r1, r6
   11414:	4620      	mov	r0, r4
   11416:	f7fb fc31 	bl	cc7c <_Balloc>
   1141a:	9000      	str	r0, [sp, #0]
   1141c:	2800      	cmp	r0, #0
   1141e:	f000 8467 	beq.w	11cf0 <_dtoa_r+0xcb0>
   11422:	9b00      	ldr	r3, [sp, #0]
   11424:	63a3      	str	r3, [r4, #56]	; 0x38
   11426:	f04f 33ff 	mov.w	r3, #4294967295
   1142a:	930b      	str	r3, [sp, #44]	; 0x2c
   1142c:	4699      	mov	r9, r3
   1142e:	2301      	movs	r3, #1
   11430:	46b3      	mov	fp, r6
   11432:	9307      	str	r3, [sp, #28]
   11434:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11436:	2a00      	cmp	r2, #0
   11438:	db55      	blt.n	114e6 <_dtoa_r+0x4a6>
   1143a:	9904      	ldr	r1, [sp, #16]
   1143c:	290e      	cmp	r1, #14
   1143e:	dc52      	bgt.n	114e6 <_dtoa_r+0x4a6>
   11440:	4bb7      	ldr	r3, [pc, #732]	; (11720 <_dtoa_r+0x6e0>)
   11442:	f1bb 0f00 	cmp.w	fp, #0
   11446:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1144a:	ed93 6b00 	vldr	d6, [r3]
   1144e:	da15      	bge.n	1147c <_dtoa_r+0x43c>
   11450:	f1b9 0f00 	cmp.w	r9, #0
   11454:	dc12      	bgt.n	1147c <_dtoa_r+0x43c>
   11456:	f040 82f2 	bne.w	11a3e <_dtoa_r+0x9fe>
   1145a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1145e:	ee26 7b07 	vmul.f64	d7, d6, d7
   11462:	eeb4 8bc7 	vcmpe.f64	d8, d7
   11466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1146a:	46ca      	mov	sl, r9
   1146c:	464e      	mov	r6, r9
   1146e:	f200 826d 	bhi.w	1194c <_dtoa_r+0x90c>
   11472:	f8dd 8000 	ldr.w	r8, [sp]
   11476:	ea6f 0b0b 	mvn.w	fp, fp
   1147a:	e270      	b.n	1195e <_dtoa_r+0x91e>
   1147c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   11480:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   11484:	9900      	ldr	r1, [sp, #0]
   11486:	ee17 3a10 	vmov	r3, s14
   1148a:	f1b9 0f01 	cmp.w	r9, #1
   1148e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   11492:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11496:	f801 3b01 	strb.w	r3, [r1], #1
   1149a:	eea5 8b46 	vfms.f64	d8, d5, d6
   1149e:	f000 8334 	beq.w	11b0a <_dtoa_r+0xaca>
   114a2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   114a6:	2301      	movs	r3, #1
   114a8:	e011      	b.n	114ce <_dtoa_r+0x48e>
   114aa:	ee88 7b06 	vdiv.f64	d7, d8, d6
   114ae:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   114b2:	3301      	adds	r3, #1
   114b4:	ee17 2a10 	vmov	r2, s14
   114b8:	454b      	cmp	r3, r9
   114ba:	f102 0230 	add.w	r2, r2, #48	; 0x30
   114be:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   114c2:	f801 2b01 	strb.w	r2, [r1], #1
   114c6:	eea5 8b46 	vfms.f64	d8, d5, d6
   114ca:	f000 831e 	beq.w	11b0a <_dtoa_r+0xaca>
   114ce:	ee28 8b04 	vmul.f64	d8, d8, d4
   114d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
   114d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   114da:	d1e6      	bne.n	114aa <_dtoa_r+0x46a>
   114dc:	9b04      	ldr	r3, [sp, #16]
   114de:	3301      	adds	r3, #1
   114e0:	9304      	str	r3, [sp, #16]
   114e2:	4689      	mov	r9, r1
   114e4:	e0dc      	b.n	116a0 <_dtoa_r+0x660>
   114e6:	9b07      	ldr	r3, [sp, #28]
   114e8:	b343      	cbz	r3, 1153c <_dtoa_r+0x4fc>
   114ea:	9b01      	ldr	r3, [sp, #4]
   114ec:	2b01      	cmp	r3, #1
   114ee:	f340 8276 	ble.w	119de <_dtoa_r+0x99e>
   114f2:	9b08      	ldr	r3, [sp, #32]
   114f4:	f109 3aff 	add.w	sl, r9, #4294967295
   114f8:	4553      	cmp	r3, sl
   114fa:	f280 823f 	bge.w	1197c <_dtoa_r+0x93c>
   114fe:	9b08      	ldr	r3, [sp, #32]
   11500:	f8cd a020 	str.w	sl, [sp, #32]
   11504:	ebaa 0203 	sub.w	r2, sl, r3
   11508:	4417      	add	r7, r2
   1150a:	f04f 0a00 	mov.w	sl, #0
   1150e:	f1b9 0f00 	cmp.w	r9, #0
   11512:	f2c0 8325 	blt.w	11b60 <_dtoa_r+0xb20>
   11516:	9b06      	ldr	r3, [sp, #24]
   11518:	9309      	str	r3, [sp, #36]	; 0x24
   1151a:	444b      	add	r3, r9
   1151c:	44c8      	add	r8, r9
   1151e:	9306      	str	r3, [sp, #24]
   11520:	2101      	movs	r1, #1
   11522:	4620      	mov	r0, r4
   11524:	f7fb fcd4 	bl	ced0 <__i2b>
   11528:	4606      	mov	r6, r0
   1152a:	e00c      	b.n	11546 <_dtoa_r+0x506>
   1152c:	4b7d      	ldr	r3, [pc, #500]	; (11724 <_dtoa_r+0x6e4>)
   1152e:	9300      	str	r3, [sp, #0]
   11530:	9800      	ldr	r0, [sp, #0]
   11532:	b00f      	add	sp, #60	; 0x3c
   11534:	ecbd 8b02 	vpop	{d8}
   11538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1153c:	9b06      	ldr	r3, [sp, #24]
   1153e:	f8dd a020 	ldr.w	sl, [sp, #32]
   11542:	9e07      	ldr	r6, [sp, #28]
   11544:	9309      	str	r3, [sp, #36]	; 0x24
   11546:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11548:	b16b      	cbz	r3, 11566 <_dtoa_r+0x526>
   1154a:	f1b8 0f00 	cmp.w	r8, #0
   1154e:	dd0a      	ble.n	11566 <_dtoa_r+0x526>
   11550:	4543      	cmp	r3, r8
   11552:	9906      	ldr	r1, [sp, #24]
   11554:	461a      	mov	r2, r3
   11556:	bfa8      	it	ge
   11558:	4642      	movge	r2, r8
   1155a:	1a89      	subs	r1, r1, r2
   1155c:	1a9b      	subs	r3, r3, r2
   1155e:	9106      	str	r1, [sp, #24]
   11560:	9309      	str	r3, [sp, #36]	; 0x24
   11562:	eba8 0802 	sub.w	r8, r8, r2
   11566:	9b08      	ldr	r3, [sp, #32]
   11568:	b163      	cbz	r3, 11584 <_dtoa_r+0x544>
   1156a:	9b07      	ldr	r3, [sp, #28]
   1156c:	2b00      	cmp	r3, #0
   1156e:	f000 82a7 	beq.w	11ac0 <_dtoa_r+0xa80>
   11572:	f1ba 0f00 	cmp.w	sl, #0
   11576:	f300 8204 	bgt.w	11982 <_dtoa_r+0x942>
   1157a:	9b08      	ldr	r3, [sp, #32]
   1157c:	ebb3 020a 	subs.w	r2, r3, sl
   11580:	f040 82ff 	bne.w	11b82 <_dtoa_r+0xb42>
   11584:	2101      	movs	r1, #1
   11586:	4620      	mov	r0, r4
   11588:	f7fb fca2 	bl	ced0 <__i2b>
   1158c:	2f00      	cmp	r7, #0
   1158e:	4682      	mov	sl, r0
   11590:	f300 80af 	bgt.w	116f2 <_dtoa_r+0x6b2>
   11594:	9b01      	ldr	r3, [sp, #4]
   11596:	2b01      	cmp	r3, #1
   11598:	f340 8187 	ble.w	118aa <_dtoa_r+0x86a>
   1159c:	2300      	movs	r3, #0
   1159e:	9308      	str	r3, [sp, #32]
   115a0:	2001      	movs	r0, #1
   115a2:	2f00      	cmp	r7, #0
   115a4:	f040 80b1 	bne.w	1170a <_dtoa_r+0x6ca>
   115a8:	4440      	add	r0, r8
   115aa:	f010 001f 	ands.w	r0, r0, #31
   115ae:	f000 817a 	beq.w	118a6 <_dtoa_r+0x866>
   115b2:	f1c0 0220 	rsb	r2, r0, #32
   115b6:	2a04      	cmp	r2, #4
   115b8:	f300 8088 	bgt.w	116cc <_dtoa_r+0x68c>
   115bc:	f040 81f6 	bne.w	119ac <_dtoa_r+0x96c>
   115c0:	9b06      	ldr	r3, [sp, #24]
   115c2:	2b00      	cmp	r3, #0
   115c4:	dd05      	ble.n	115d2 <_dtoa_r+0x592>
   115c6:	4629      	mov	r1, r5
   115c8:	461a      	mov	r2, r3
   115ca:	4620      	mov	r0, r4
   115cc:	f7fb fdbc 	bl	d148 <__lshift>
   115d0:	4605      	mov	r5, r0
   115d2:	f1b8 0f00 	cmp.w	r8, #0
   115d6:	dd05      	ble.n	115e4 <_dtoa_r+0x5a4>
   115d8:	4651      	mov	r1, sl
   115da:	4642      	mov	r2, r8
   115dc:	4620      	mov	r0, r4
   115de:	f7fb fdb3 	bl	d148 <__lshift>
   115e2:	4682      	mov	sl, r0
   115e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   115e6:	2b00      	cmp	r3, #0
   115e8:	f040 813f 	bne.w	1186a <_dtoa_r+0x82a>
   115ec:	f1b9 0f00 	cmp.w	r9, #0
   115f0:	f340 8125 	ble.w	1183e <_dtoa_r+0x7fe>
   115f4:	9b07      	ldr	r3, [sp, #28]
   115f6:	2b00      	cmp	r3, #0
   115f8:	f040 80a3 	bne.w	11742 <_dtoa_r+0x702>
   115fc:	9b04      	ldr	r3, [sp, #16]
   115fe:	3301      	adds	r3, #1
   11600:	9304      	str	r3, [sp, #16]
   11602:	f8dd 8000 	ldr.w	r8, [sp]
   11606:	2701      	movs	r7, #1
   11608:	e007      	b.n	1161a <_dtoa_r+0x5da>
   1160a:	4629      	mov	r1, r5
   1160c:	2300      	movs	r3, #0
   1160e:	220a      	movs	r2, #10
   11610:	4620      	mov	r0, r4
   11612:	f7fb fb63 	bl	ccdc <__multadd>
   11616:	3701      	adds	r7, #1
   11618:	4605      	mov	r5, r0
   1161a:	4651      	mov	r1, sl
   1161c:	4628      	mov	r0, r5
   1161e:	f7ff fc7b 	bl	10f18 <quorem>
   11622:	45b9      	cmp	r9, r7
   11624:	f100 0030 	add.w	r0, r0, #48	; 0x30
   11628:	f808 0b01 	strb.w	r0, [r8], #1
   1162c:	dced      	bgt.n	1160a <_dtoa_r+0x5ca>
   1162e:	f1b9 0f00 	cmp.w	r9, #0
   11632:	9a00      	ldr	r2, [sp, #0]
   11634:	bfcc      	ite	gt
   11636:	46cb      	movgt	fp, r9
   11638:	f04f 0b01 	movle.w	fp, #1
   1163c:	4603      	mov	r3, r0
   1163e:	4493      	add	fp, r2
   11640:	2700      	movs	r7, #0
   11642:	4629      	mov	r1, r5
   11644:	2201      	movs	r2, #1
   11646:	4620      	mov	r0, r4
   11648:	9301      	str	r3, [sp, #4]
   1164a:	f7fb fd7d 	bl	d148 <__lshift>
   1164e:	4651      	mov	r1, sl
   11650:	4605      	mov	r5, r0
   11652:	f7fb fdf1 	bl	d238 <__mcmp>
   11656:	2800      	cmp	r0, #0
   11658:	f340 81af 	ble.w	119ba <_dtoa_r+0x97a>
   1165c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   11660:	9a00      	ldr	r2, [sp, #0]
   11662:	f10b 3bff 	add.w	fp, fp, #4294967295
   11666:	e004      	b.n	11672 <_dtoa_r+0x632>
   11668:	455a      	cmp	r2, fp
   1166a:	f000 81b1 	beq.w	119d0 <_dtoa_r+0x990>
   1166e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11672:	2b39      	cmp	r3, #57	; 0x39
   11674:	f10b 0901 	add.w	r9, fp, #1
   11678:	d0f6      	beq.n	11668 <_dtoa_r+0x628>
   1167a:	3301      	adds	r3, #1
   1167c:	f88b 3000 	strb.w	r3, [fp]
   11680:	4651      	mov	r1, sl
   11682:	4620      	mov	r0, r4
   11684:	f7fb fb20 	bl	ccc8 <_Bfree>
   11688:	b156      	cbz	r6, 116a0 <_dtoa_r+0x660>
   1168a:	b12f      	cbz	r7, 11698 <_dtoa_r+0x658>
   1168c:	42b7      	cmp	r7, r6
   1168e:	d003      	beq.n	11698 <_dtoa_r+0x658>
   11690:	4639      	mov	r1, r7
   11692:	4620      	mov	r0, r4
   11694:	f7fb fb18 	bl	ccc8 <_Bfree>
   11698:	4631      	mov	r1, r6
   1169a:	4620      	mov	r0, r4
   1169c:	f7fb fb14 	bl	ccc8 <_Bfree>
   116a0:	4629      	mov	r1, r5
   116a2:	4620      	mov	r0, r4
   116a4:	f7fb fb10 	bl	ccc8 <_Bfree>
   116a8:	2300      	movs	r3, #0
   116aa:	f889 3000 	strb.w	r3, [r9]
   116ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   116b2:	601a      	str	r2, [r3, #0]
   116b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   116b6:	2b00      	cmp	r3, #0
   116b8:	f43f acfe 	beq.w	110b8 <_dtoa_r+0x78>
   116bc:	9800      	ldr	r0, [sp, #0]
   116be:	f8c3 9000 	str.w	r9, [r3]
   116c2:	b00f      	add	sp, #60	; 0x3c
   116c4:	ecbd 8b02 	vpop	{d8}
   116c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116cc:	f1c0 001c 	rsb	r0, r0, #28
   116d0:	9b06      	ldr	r3, [sp, #24]
   116d2:	4403      	add	r3, r0
   116d4:	9306      	str	r3, [sp, #24]
   116d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   116d8:	4403      	add	r3, r0
   116da:	9309      	str	r3, [sp, #36]	; 0x24
   116dc:	4480      	add	r8, r0
   116de:	e76f      	b.n	115c0 <_dtoa_r+0x580>
   116e0:	f1c2 0220 	rsb	r2, r2, #32
   116e4:	fa06 f202 	lsl.w	r2, r6, r2
   116e8:	ee07 2a10 	vmov	s14, r2
   116ec:	e509      	b.n	11102 <_dtoa_r+0xc2>
   116ee:	2601      	movs	r6, #1
   116f0:	e563      	b.n	111ba <_dtoa_r+0x17a>
   116f2:	4601      	mov	r1, r0
   116f4:	463a      	mov	r2, r7
   116f6:	4620      	mov	r0, r4
   116f8:	f7fb fcc6 	bl	d088 <__pow5mult>
   116fc:	9b01      	ldr	r3, [sp, #4]
   116fe:	2b01      	cmp	r3, #1
   11700:	4682      	mov	sl, r0
   11702:	f340 81c5 	ble.w	11a90 <_dtoa_r+0xa50>
   11706:	2300      	movs	r3, #0
   11708:	9308      	str	r3, [sp, #32]
   1170a:	f8da 2010 	ldr.w	r2, [sl, #16]
   1170e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   11712:	6910      	ldr	r0, [r2, #16]
   11714:	f7fb fb8c 	bl	ce30 <__hi0bits>
   11718:	f1c0 0020 	rsb	r0, r0, #32
   1171c:	e744      	b.n	115a8 <_dtoa_r+0x568>
   1171e:	bf00      	nop
   11720:	200002a8 	.word	0x200002a8
   11724:	20000c48 	.word	0x20000c48
   11728:	4631      	mov	r1, r6
   1172a:	2300      	movs	r3, #0
   1172c:	220a      	movs	r2, #10
   1172e:	4620      	mov	r0, r4
   11730:	f7fb fad4 	bl	ccdc <__multadd>
   11734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11736:	2b00      	cmp	r3, #0
   11738:	4606      	mov	r6, r0
   1173a:	f340 82ce 	ble.w	11cda <_dtoa_r+0xc9a>
   1173e:	9704      	str	r7, [sp, #16]
   11740:	4699      	mov	r9, r3
   11742:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11744:	2b00      	cmp	r3, #0
   11746:	dd05      	ble.n	11754 <_dtoa_r+0x714>
   11748:	4631      	mov	r1, r6
   1174a:	461a      	mov	r2, r3
   1174c:	4620      	mov	r0, r4
   1174e:	f7fb fcfb 	bl	d148 <__lshift>
   11752:	4606      	mov	r6, r0
   11754:	9b08      	ldr	r3, [sp, #32]
   11756:	2b00      	cmp	r3, #0
   11758:	f040 81eb 	bne.w	11b32 <_dtoa_r+0xaf2>
   1175c:	46b0      	mov	r8, r6
   1175e:	9b02      	ldr	r3, [sp, #8]
   11760:	9f00      	ldr	r7, [sp, #0]
   11762:	f003 0201 	and.w	r2, r3, #1
   11766:	1e7b      	subs	r3, r7, #1
   11768:	444b      	add	r3, r9
   1176a:	9308      	str	r3, [sp, #32]
   1176c:	9b01      	ldr	r3, [sp, #4]
   1176e:	920a      	str	r2, [sp, #40]	; 0x28
   11770:	4313      	orrs	r3, r2
   11772:	9309      	str	r3, [sp, #36]	; 0x24
   11774:	4651      	mov	r1, sl
   11776:	4628      	mov	r0, r5
   11778:	f7ff fbce 	bl	10f18 <quorem>
   1177c:	4631      	mov	r1, r6
   1177e:	4683      	mov	fp, r0
   11780:	4628      	mov	r0, r5
   11782:	f7fb fd59 	bl	d238 <__mcmp>
   11786:	4642      	mov	r2, r8
   11788:	4651      	mov	r1, sl
   1178a:	4681      	mov	r9, r0
   1178c:	4620      	mov	r0, r4
   1178e:	f7fb fd75 	bl	d27c <__mdiff>
   11792:	68c2      	ldr	r2, [r0, #12]
   11794:	4601      	mov	r1, r0
   11796:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1179a:	2a00      	cmp	r2, #0
   1179c:	d142      	bne.n	11824 <_dtoa_r+0x7e4>
   1179e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   117a2:	4628      	mov	r0, r5
   117a4:	f7fb fd48 	bl	d238 <__mcmp>
   117a8:	9906      	ldr	r1, [sp, #24]
   117aa:	9002      	str	r0, [sp, #8]
   117ac:	4620      	mov	r0, r4
   117ae:	f7fb fa8b 	bl	ccc8 <_Bfree>
   117b2:	9a02      	ldr	r2, [sp, #8]
   117b4:	9b07      	ldr	r3, [sp, #28]
   117b6:	b91a      	cbnz	r2, 117c0 <_dtoa_r+0x780>
   117b8:	9909      	ldr	r1, [sp, #36]	; 0x24
   117ba:	2900      	cmp	r1, #0
   117bc:	f000 827e 	beq.w	11cbc <_dtoa_r+0xc7c>
   117c0:	f1b9 0f00 	cmp.w	r9, #0
   117c4:	f2c0 8183 	blt.w	11ace <_dtoa_r+0xa8e>
   117c8:	9901      	ldr	r1, [sp, #4]
   117ca:	ea49 0901 	orr.w	r9, r9, r1
   117ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   117d0:	ea51 0909 	orrs.w	r9, r1, r9
   117d4:	f000 817b 	beq.w	11ace <_dtoa_r+0xa8e>
   117d8:	2a00      	cmp	r2, #0
   117da:	f300 81c6 	bgt.w	11b6a <_dtoa_r+0xb2a>
   117de:	9a08      	ldr	r2, [sp, #32]
   117e0:	703b      	strb	r3, [r7, #0]
   117e2:	f107 0901 	add.w	r9, r7, #1
   117e6:	4297      	cmp	r7, r2
   117e8:	46cb      	mov	fp, r9
   117ea:	f000 81c4 	beq.w	11b76 <_dtoa_r+0xb36>
   117ee:	4629      	mov	r1, r5
   117f0:	2300      	movs	r3, #0
   117f2:	220a      	movs	r2, #10
   117f4:	4620      	mov	r0, r4
   117f6:	f7fb fa71 	bl	ccdc <__multadd>
   117fa:	4546      	cmp	r6, r8
   117fc:	4605      	mov	r5, r0
   117fe:	4631      	mov	r1, r6
   11800:	f04f 0300 	mov.w	r3, #0
   11804:	f04f 020a 	mov.w	r2, #10
   11808:	4620      	mov	r0, r4
   1180a:	d012      	beq.n	11832 <_dtoa_r+0x7f2>
   1180c:	f7fb fa66 	bl	ccdc <__multadd>
   11810:	4641      	mov	r1, r8
   11812:	4606      	mov	r6, r0
   11814:	2300      	movs	r3, #0
   11816:	220a      	movs	r2, #10
   11818:	4620      	mov	r0, r4
   1181a:	f7fb fa5f 	bl	ccdc <__multadd>
   1181e:	464f      	mov	r7, r9
   11820:	4680      	mov	r8, r0
   11822:	e7a7      	b.n	11774 <_dtoa_r+0x734>
   11824:	4620      	mov	r0, r4
   11826:	9302      	str	r3, [sp, #8]
   11828:	f7fb fa4e 	bl	ccc8 <_Bfree>
   1182c:	9b02      	ldr	r3, [sp, #8]
   1182e:	2201      	movs	r2, #1
   11830:	e7c6      	b.n	117c0 <_dtoa_r+0x780>
   11832:	f7fb fa53 	bl	ccdc <__multadd>
   11836:	464f      	mov	r7, r9
   11838:	4606      	mov	r6, r0
   1183a:	4680      	mov	r8, r0
   1183c:	e79a      	b.n	11774 <_dtoa_r+0x734>
   1183e:	9b01      	ldr	r3, [sp, #4]
   11840:	2b02      	cmp	r3, #2
   11842:	dc71      	bgt.n	11928 <_dtoa_r+0x8e8>
   11844:	9b07      	ldr	r3, [sp, #28]
   11846:	2b00      	cmp	r3, #0
   11848:	f47f af7b 	bne.w	11742 <_dtoa_r+0x702>
   1184c:	9b04      	ldr	r3, [sp, #16]
   1184e:	4651      	mov	r1, sl
   11850:	3301      	adds	r3, #1
   11852:	4628      	mov	r0, r5
   11854:	9304      	str	r3, [sp, #16]
   11856:	f7ff fb5f 	bl	10f18 <quorem>
   1185a:	f8dd b000 	ldr.w	fp, [sp]
   1185e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   11862:	f80b 3b01 	strb.w	r3, [fp], #1
   11866:	2700      	movs	r7, #0
   11868:	e6eb      	b.n	11642 <_dtoa_r+0x602>
   1186a:	4651      	mov	r1, sl
   1186c:	4628      	mov	r0, r5
   1186e:	f7fb fce3 	bl	d238 <__mcmp>
   11872:	2800      	cmp	r0, #0
   11874:	f6bf aeba 	bge.w	115ec <_dtoa_r+0x5ac>
   11878:	4629      	mov	r1, r5
   1187a:	2300      	movs	r3, #0
   1187c:	220a      	movs	r2, #10
   1187e:	4620      	mov	r0, r4
   11880:	f7fb fa2c 	bl	ccdc <__multadd>
   11884:	9b04      	ldr	r3, [sp, #16]
   11886:	1e5f      	subs	r7, r3, #1
   11888:	9b07      	ldr	r3, [sp, #28]
   1188a:	4605      	mov	r5, r0
   1188c:	2b00      	cmp	r3, #0
   1188e:	f47f af4b 	bne.w	11728 <_dtoa_r+0x6e8>
   11892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11894:	2b00      	cmp	r3, #0
   11896:	f340 8218 	ble.w	11cca <_dtoa_r+0xc8a>
   1189a:	4699      	mov	r9, r3
   1189c:	e6b1      	b.n	11602 <_dtoa_r+0x5c2>
   1189e:	4bbc      	ldr	r3, [pc, #752]	; (11b90 <_dtoa_r+0xb50>)
   118a0:	9300      	str	r3, [sp, #0]
   118a2:	3303      	adds	r3, #3
   118a4:	e4a4      	b.n	111f0 <_dtoa_r+0x1b0>
   118a6:	201c      	movs	r0, #28
   118a8:	e712      	b.n	116d0 <_dtoa_r+0x690>
   118aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   118ae:	2800      	cmp	r0, #0
   118b0:	f47f ae74 	bne.w	1159c <_dtoa_r+0x55c>
   118b4:	f3c1 0213 	ubfx	r2, r1, #0, #20
   118b8:	2a00      	cmp	r2, #0
   118ba:	f000 80f4 	beq.w	11aa6 <_dtoa_r+0xa66>
   118be:	9b02      	ldr	r3, [sp, #8]
   118c0:	9308      	str	r3, [sp, #32]
   118c2:	e66d      	b.n	115a0 <_dtoa_r+0x560>
   118c4:	2301      	movs	r3, #1
   118c6:	9307      	str	r3, [sp, #28]
   118c8:	9b04      	ldr	r3, [sp, #16]
   118ca:	445b      	add	r3, fp
   118cc:	f103 0901 	add.w	r9, r3, #1
   118d0:	f1b9 0f01 	cmp.w	r9, #1
   118d4:	46cc      	mov	ip, r9
   118d6:	930b      	str	r3, [sp, #44]	; 0x2c
   118d8:	bfb8      	it	lt
   118da:	f04f 0c01 	movlt.w	ip, #1
   118de:	2100      	movs	r1, #0
   118e0:	f1bc 0f17 	cmp.w	ip, #23
   118e4:	63e1      	str	r1, [r4, #60]	; 0x3c
   118e6:	f77f acbc 	ble.w	11262 <_dtoa_r+0x222>
   118ea:	2001      	movs	r0, #1
   118ec:	2204      	movs	r2, #4
   118ee:	0052      	lsls	r2, r2, #1
   118f0:	f102 0314 	add.w	r3, r2, #20
   118f4:	4563      	cmp	r3, ip
   118f6:	4601      	mov	r1, r0
   118f8:	f100 0001 	add.w	r0, r0, #1
   118fc:	d9f7      	bls.n	118ee <_dtoa_r+0x8ae>
   118fe:	63e1      	str	r1, [r4, #60]	; 0x3c
   11900:	e4af      	b.n	11262 <_dtoa_r+0x222>
   11902:	2301      	movs	r3, #1
   11904:	9307      	str	r3, [sp, #28]
   11906:	f1bb 0f00 	cmp.w	fp, #0
   1190a:	dd52      	ble.n	119b2 <_dtoa_r+0x972>
   1190c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   11910:	46d9      	mov	r9, fp
   11912:	46dc      	mov	ip, fp
   11914:	e7e3      	b.n	118de <_dtoa_r+0x89e>
   11916:	2300      	movs	r3, #0
   11918:	9307      	str	r3, [sp, #28]
   1191a:	e7d5      	b.n	118c8 <_dtoa_r+0x888>
   1191c:	2300      	movs	r3, #0
   1191e:	9307      	str	r3, [sp, #28]
   11920:	e7f1      	b.n	11906 <_dtoa_r+0x8c6>
   11922:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11926:	9704      	str	r7, [sp, #16]
   11928:	f1b9 0f00 	cmp.w	r9, #0
   1192c:	f47f ada1 	bne.w	11472 <_dtoa_r+0x432>
   11930:	4651      	mov	r1, sl
   11932:	464b      	mov	r3, r9
   11934:	2205      	movs	r2, #5
   11936:	4620      	mov	r0, r4
   11938:	f7fb f9d0 	bl	ccdc <__multadd>
   1193c:	4601      	mov	r1, r0
   1193e:	4682      	mov	sl, r0
   11940:	4628      	mov	r0, r5
   11942:	f7fb fc79 	bl	d238 <__mcmp>
   11946:	2800      	cmp	r0, #0
   11948:	f77f ad93 	ble.w	11472 <_dtoa_r+0x432>
   1194c:	9b04      	ldr	r3, [sp, #16]
   1194e:	f103 0b01 	add.w	fp, r3, #1
   11952:	9b00      	ldr	r3, [sp, #0]
   11954:	2231      	movs	r2, #49	; 0x31
   11956:	4698      	mov	r8, r3
   11958:	f803 2b01 	strb.w	r2, [r3], #1
   1195c:	9300      	str	r3, [sp, #0]
   1195e:	4651      	mov	r1, sl
   11960:	4620      	mov	r0, r4
   11962:	f7fb f9b1 	bl	ccc8 <_Bfree>
   11966:	f10b 0301 	add.w	r3, fp, #1
   1196a:	f8dd 9000 	ldr.w	r9, [sp]
   1196e:	9304      	str	r3, [sp, #16]
   11970:	f8cd 8000 	str.w	r8, [sp]
   11974:	2e00      	cmp	r6, #0
   11976:	f47f ae8f 	bne.w	11698 <_dtoa_r+0x658>
   1197a:	e691      	b.n	116a0 <_dtoa_r+0x660>
   1197c:	eba3 0a0a 	sub.w	sl, r3, sl
   11980:	e5c5      	b.n	1150e <_dtoa_r+0x4ce>
   11982:	4631      	mov	r1, r6
   11984:	4652      	mov	r2, sl
   11986:	4620      	mov	r0, r4
   11988:	f7fb fb7e 	bl	d088 <__pow5mult>
   1198c:	462a      	mov	r2, r5
   1198e:	4601      	mov	r1, r0
   11990:	4606      	mov	r6, r0
   11992:	4620      	mov	r0, r4
   11994:	f7fb faca 	bl	cf2c <__multiply>
   11998:	4629      	mov	r1, r5
   1199a:	4605      	mov	r5, r0
   1199c:	4620      	mov	r0, r4
   1199e:	f7fb f993 	bl	ccc8 <_Bfree>
   119a2:	e5ea      	b.n	1157a <_dtoa_r+0x53a>
   119a4:	2002      	movs	r0, #2
   119a6:	eeb0 5b48 	vmov.f64	d5, d8
   119aa:	e481      	b.n	112b0 <_dtoa_r+0x270>
   119ac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   119b0:	e68e      	b.n	116d0 <_dtoa_r+0x690>
   119b2:	f04f 0b01 	mov.w	fp, #1
   119b6:	46d9      	mov	r9, fp
   119b8:	e44f      	b.n	1125a <_dtoa_r+0x21a>
   119ba:	d103      	bne.n	119c4 <_dtoa_r+0x984>
   119bc:	9b01      	ldr	r3, [sp, #4]
   119be:	07db      	lsls	r3, r3, #31
   119c0:	f53f ae4c 	bmi.w	1165c <_dtoa_r+0x61c>
   119c4:	46d9      	mov	r9, fp
   119c6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   119ca:	2b30      	cmp	r3, #48	; 0x30
   119cc:	d0fa      	beq.n	119c4 <_dtoa_r+0x984>
   119ce:	e657      	b.n	11680 <_dtoa_r+0x640>
   119d0:	9b04      	ldr	r3, [sp, #16]
   119d2:	9a00      	ldr	r2, [sp, #0]
   119d4:	3301      	adds	r3, #1
   119d6:	9304      	str	r3, [sp, #16]
   119d8:	2331      	movs	r3, #49	; 0x31
   119da:	7013      	strb	r3, [r2, #0]
   119dc:	e650      	b.n	11680 <_dtoa_r+0x640>
   119de:	f1ba 0f00 	cmp.w	sl, #0
   119e2:	f000 8123 	beq.w	11c2c <_dtoa_r+0xbec>
   119e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   119ea:	9b06      	ldr	r3, [sp, #24]
   119ec:	9309      	str	r3, [sp, #36]	; 0x24
   119ee:	4413      	add	r3, r2
   119f0:	f8dd a020 	ldr.w	sl, [sp, #32]
   119f4:	9306      	str	r3, [sp, #24]
   119f6:	4490      	add	r8, r2
   119f8:	e592      	b.n	11520 <_dtoa_r+0x4e0>
   119fa:	ee07 0a90 	vmov	s15, r0
   119fe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   11a02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   11a06:	eea6 5b07 	vfma.f64	d5, d6, d7
   11a0a:	ee15 2a90 	vmov	r2, s11
   11a0e:	ec51 0b15 	vmov	r0, r1, d5
   11a12:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   11a16:	ec41 0b15 	vmov	d5, r0, r1
   11a1a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   11a1e:	ee36 7b47 	vsub.f64	d7, d6, d7
   11a22:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11a2a:	f300 8137 	bgt.w	11c9c <_dtoa_r+0xc5c>
   11a2e:	eeb1 5b45 	vneg.f64	d5, d5
   11a32:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11a3a:	f57f acfb 	bpl.w	11434 <_dtoa_r+0x3f4>
   11a3e:	f04f 0a00 	mov.w	sl, #0
   11a42:	4656      	mov	r6, sl
   11a44:	e515      	b.n	11472 <_dtoa_r+0x432>
   11a46:	f000 80f5 	beq.w	11c34 <_dtoa_r+0xbf4>
   11a4a:	9b04      	ldr	r3, [sp, #16]
   11a4c:	4951      	ldr	r1, [pc, #324]	; (11b94 <_dtoa_r+0xb54>)
   11a4e:	425a      	negs	r2, r3
   11a50:	f002 000f 	and.w	r0, r2, #15
   11a54:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   11a58:	ed91 6b00 	vldr	d6, [r1]
   11a5c:	1112      	asrs	r2, r2, #4
   11a5e:	ee28 6b06 	vmul.f64	d6, d8, d6
   11a62:	f000 8142 	beq.w	11cea <_dtoa_r+0xcaa>
   11a66:	eeb0 7b46 	vmov.f64	d7, d6
   11a6a:	494b      	ldr	r1, [pc, #300]	; (11b98 <_dtoa_r+0xb58>)
   11a6c:	2600      	movs	r6, #0
   11a6e:	2002      	movs	r0, #2
   11a70:	07d3      	lsls	r3, r2, #31
   11a72:	d505      	bpl.n	11a80 <_dtoa_r+0xa40>
   11a74:	ed91 5b00 	vldr	d5, [r1]
   11a78:	3001      	adds	r0, #1
   11a7a:	2601      	movs	r6, #1
   11a7c:	ee27 7b05 	vmul.f64	d7, d7, d5
   11a80:	1052      	asrs	r2, r2, #1
   11a82:	f101 0108 	add.w	r1, r1, #8
   11a86:	d1f3      	bne.n	11a70 <_dtoa_r+0xa30>
   11a88:	2e00      	cmp	r6, #0
   11a8a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   11a8e:	e41e      	b.n	112ce <_dtoa_r+0x28e>
   11a90:	9b02      	ldr	r3, [sp, #8]
   11a92:	2b00      	cmp	r3, #0
   11a94:	f47f ae37 	bne.w	11706 <_dtoa_r+0x6c6>
   11a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11a9c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   11aa0:	2a00      	cmp	r2, #0
   11aa2:	f040 8137 	bne.w	11d14 <_dtoa_r+0xcd4>
   11aa6:	4a3d      	ldr	r2, [pc, #244]	; (11b9c <_dtoa_r+0xb5c>)
   11aa8:	400a      	ands	r2, r1
   11aaa:	2a00      	cmp	r2, #0
   11aac:	f000 80fa 	beq.w	11ca4 <_dtoa_r+0xc64>
   11ab0:	9b06      	ldr	r3, [sp, #24]
   11ab2:	3301      	adds	r3, #1
   11ab4:	9306      	str	r3, [sp, #24]
   11ab6:	2301      	movs	r3, #1
   11ab8:	f108 0801 	add.w	r8, r8, #1
   11abc:	9308      	str	r3, [sp, #32]
   11abe:	e56f      	b.n	115a0 <_dtoa_r+0x560>
   11ac0:	4629      	mov	r1, r5
   11ac2:	9a08      	ldr	r2, [sp, #32]
   11ac4:	4620      	mov	r0, r4
   11ac6:	f7fb fadf 	bl	d088 <__pow5mult>
   11aca:	4605      	mov	r5, r0
   11acc:	e55a      	b.n	11584 <_dtoa_r+0x544>
   11ace:	2a00      	cmp	r2, #0
   11ad0:	dd12      	ble.n	11af8 <_dtoa_r+0xab8>
   11ad2:	4629      	mov	r1, r5
   11ad4:	2201      	movs	r2, #1
   11ad6:	4620      	mov	r0, r4
   11ad8:	9301      	str	r3, [sp, #4]
   11ada:	f7fb fb35 	bl	d148 <__lshift>
   11ade:	4651      	mov	r1, sl
   11ae0:	4605      	mov	r5, r0
   11ae2:	f7fb fba9 	bl	d238 <__mcmp>
   11ae6:	2800      	cmp	r0, #0
   11ae8:	9b01      	ldr	r3, [sp, #4]
   11aea:	f340 80e1 	ble.w	11cb0 <_dtoa_r+0xc70>
   11aee:	2b39      	cmp	r3, #57	; 0x39
   11af0:	f000 80ca 	beq.w	11c88 <_dtoa_r+0xc48>
   11af4:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11af8:	46b9      	mov	r9, r7
   11afa:	f809 3b01 	strb.w	r3, [r9], #1
   11afe:	9b04      	ldr	r3, [sp, #16]
   11b00:	3301      	adds	r3, #1
   11b02:	4637      	mov	r7, r6
   11b04:	9304      	str	r3, [sp, #16]
   11b06:	4646      	mov	r6, r8
   11b08:	e5ba      	b.n	11680 <_dtoa_r+0x640>
   11b0a:	ee38 8b08 	vadd.f64	d8, d8, d8
   11b0e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   11b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11b16:	dc0a      	bgt.n	11b2e <_dtoa_r+0xaee>
   11b18:	eeb4 8b46 	vcmp.f64	d8, d6
   11b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11b20:	f47f acdc 	bne.w	114dc <_dtoa_r+0x49c>
   11b24:	ee17 3a10 	vmov	r3, s14
   11b28:	07d8      	lsls	r0, r3, #31
   11b2a:	f57f acd7 	bpl.w	114dc <_dtoa_r+0x49c>
   11b2e:	9a00      	ldr	r2, [sp, #0]
   11b30:	e454      	b.n	113dc <_dtoa_r+0x39c>
   11b32:	6871      	ldr	r1, [r6, #4]
   11b34:	4620      	mov	r0, r4
   11b36:	f7fb f8a1 	bl	cc7c <_Balloc>
   11b3a:	4607      	mov	r7, r0
   11b3c:	2800      	cmp	r0, #0
   11b3e:	f000 80de 	beq.w	11cfe <_dtoa_r+0xcbe>
   11b42:	6933      	ldr	r3, [r6, #16]
   11b44:	3302      	adds	r3, #2
   11b46:	009a      	lsls	r2, r3, #2
   11b48:	f106 010c 	add.w	r1, r6, #12
   11b4c:	300c      	adds	r0, #12
   11b4e:	f7f6 f9f1 	bl	7f34 <memcpy>
   11b52:	4639      	mov	r1, r7
   11b54:	2201      	movs	r2, #1
   11b56:	4620      	mov	r0, r4
   11b58:	f7fb faf6 	bl	d148 <__lshift>
   11b5c:	4680      	mov	r8, r0
   11b5e:	e5fe      	b.n	1175e <_dtoa_r+0x71e>
   11b60:	9b06      	ldr	r3, [sp, #24]
   11b62:	eba3 0309 	sub.w	r3, r3, r9
   11b66:	9309      	str	r3, [sp, #36]	; 0x24
   11b68:	e4da      	b.n	11520 <_dtoa_r+0x4e0>
   11b6a:	2b39      	cmp	r3, #57	; 0x39
   11b6c:	f000 808c 	beq.w	11c88 <_dtoa_r+0xc48>
   11b70:	46b9      	mov	r9, r7
   11b72:	3301      	adds	r3, #1
   11b74:	e7c1      	b.n	11afa <_dtoa_r+0xaba>
   11b76:	9a04      	ldr	r2, [sp, #16]
   11b78:	3201      	adds	r2, #1
   11b7a:	4637      	mov	r7, r6
   11b7c:	9204      	str	r2, [sp, #16]
   11b7e:	4646      	mov	r6, r8
   11b80:	e55f      	b.n	11642 <_dtoa_r+0x602>
   11b82:	4629      	mov	r1, r5
   11b84:	4620      	mov	r0, r4
   11b86:	f7fb fa7f 	bl	d088 <__pow5mult>
   11b8a:	4605      	mov	r5, r0
   11b8c:	e4fa      	b.n	11584 <_dtoa_r+0x544>
   11b8e:	bf00      	nop
   11b90:	20000b8c 	.word	0x20000b8c
   11b94:	200002a8 	.word	0x200002a8
   11b98:	20000280 	.word	0x20000280
   11b9c:	7ff00000 	.word	0x7ff00000
   11ba0:	4b5e      	ldr	r3, [pc, #376]	; (11d1c <_dtoa_r+0xcdc>)
   11ba2:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   11ba6:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   11baa:	ed1c 3b02 	vldr	d3, [ip, #-8]
   11bae:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   11bb2:	ee36 7b47 	vsub.f64	d7, d6, d7
   11bb6:	ec41 0b16 	vmov	d6, r0, r1
   11bba:	ee15 1a90 	vmov	r1, s11
   11bbe:	ee23 3b06 	vmul.f64	d3, d3, d6
   11bc2:	9800      	ldr	r0, [sp, #0]
   11bc4:	3130      	adds	r1, #48	; 0x30
   11bc6:	2a01      	cmp	r2, #1
   11bc8:	f800 1b01 	strb.w	r1, [r0], #1
   11bcc:	f000 8083 	beq.w	11cd6 <_dtoa_r+0xc96>
   11bd0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11bd4:	9b00      	ldr	r3, [sp, #0]
   11bd6:	1899      	adds	r1, r3, r2
   11bd8:	ee27 7b04 	vmul.f64	d7, d7, d4
   11bdc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11be0:	ee16 3a90 	vmov	r3, s13
   11be4:	3330      	adds	r3, #48	; 0x30
   11be6:	f800 3b01 	strb.w	r3, [r0], #1
   11bea:	4281      	cmp	r1, r0
   11bec:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   11bf0:	ee37 7b45 	vsub.f64	d7, d7, d5
   11bf4:	d1f0      	bne.n	11bd8 <_dtoa_r+0xb98>
   11bf6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   11bfa:	ee33 5b06 	vadd.f64	d5, d3, d6
   11bfe:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11c06:	f53f abe3 	bmi.w	113d0 <_dtoa_r+0x390>
   11c0a:	ee36 6b43 	vsub.f64	d6, d6, d3
   11c0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   11c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11c16:	f77f ac0d 	ble.w	11434 <_dtoa_r+0x3f4>
   11c1a:	4689      	mov	r9, r1
   11c1c:	3901      	subs	r1, #1
   11c1e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   11c22:	2b30      	cmp	r3, #48	; 0x30
   11c24:	d0f9      	beq.n	11c1a <_dtoa_r+0xbda>
   11c26:	1c73      	adds	r3, r6, #1
   11c28:	9304      	str	r3, [sp, #16]
   11c2a:	e539      	b.n	116a0 <_dtoa_r+0x660>
   11c2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11c2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   11c32:	e6da      	b.n	119ea <_dtoa_r+0x9aa>
   11c34:	2002      	movs	r0, #2
   11c36:	eeb0 6b48 	vmov.f64	d6, d8
   11c3a:	f7ff bb48 	b.w	112ce <_dtoa_r+0x28e>
   11c3e:	f1b9 0f00 	cmp.w	r9, #0
   11c42:	f43f aeda 	beq.w	119fa <_dtoa_r+0x9ba>
   11c46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11c48:	2a00      	cmp	r2, #0
   11c4a:	f77f abf3 	ble.w	11434 <_dtoa_r+0x3f4>
   11c4e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11c52:	ee26 6b04 	vmul.f64	d6, d6, d4
   11c56:	3001      	adds	r0, #1
   11c58:	ee07 0a90 	vmov	s15, r0
   11c5c:	9b04      	ldr	r3, [sp, #16]
   11c5e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   11c62:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   11c66:	eea6 7b05 	vfma.f64	d7, d6, d5
   11c6a:	ee17 ca90 	vmov	ip, s15
   11c6e:	ec51 0b17 	vmov	r0, r1, d7
   11c72:	1e5e      	subs	r6, r3, #1
   11c74:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   11c78:	f7ff bb47 	b.w	1130a <_dtoa_r+0x2ca>
   11c7c:	9b04      	ldr	r3, [sp, #16]
   11c7e:	3301      	adds	r3, #1
   11c80:	9304      	str	r3, [sp, #16]
   11c82:	2331      	movs	r3, #49	; 0x31
   11c84:	f7ff bbb1 	b.w	113ea <_dtoa_r+0x3aa>
   11c88:	9b04      	ldr	r3, [sp, #16]
   11c8a:	46bb      	mov	fp, r7
   11c8c:	3301      	adds	r3, #1
   11c8e:	9304      	str	r3, [sp, #16]
   11c90:	2339      	movs	r3, #57	; 0x39
   11c92:	4637      	mov	r7, r6
   11c94:	f80b 3b01 	strb.w	r3, [fp], #1
   11c98:	4646      	mov	r6, r8
   11c9a:	e4e1      	b.n	11660 <_dtoa_r+0x620>
   11c9c:	f04f 0a00 	mov.w	sl, #0
   11ca0:	4656      	mov	r6, sl
   11ca2:	e653      	b.n	1194c <_dtoa_r+0x90c>
   11ca4:	9208      	str	r2, [sp, #32]
   11ca6:	e47b      	b.n	115a0 <_dtoa_r+0x560>
   11ca8:	1c73      	adds	r3, r6, #1
   11caa:	9304      	str	r3, [sp, #16]
   11cac:	4689      	mov	r9, r1
   11cae:	e4f7      	b.n	116a0 <_dtoa_r+0x660>
   11cb0:	f47f af22 	bne.w	11af8 <_dtoa_r+0xab8>
   11cb4:	07da      	lsls	r2, r3, #31
   11cb6:	f57f af1f 	bpl.w	11af8 <_dtoa_r+0xab8>
   11cba:	e718      	b.n	11aee <_dtoa_r+0xaae>
   11cbc:	2b39      	cmp	r3, #57	; 0x39
   11cbe:	d0e3      	beq.n	11c88 <_dtoa_r+0xc48>
   11cc0:	f1b9 0f00 	cmp.w	r9, #0
   11cc4:	f73f af16 	bgt.w	11af4 <_dtoa_r+0xab4>
   11cc8:	e716      	b.n	11af8 <_dtoa_r+0xab8>
   11cca:	9b01      	ldr	r3, [sp, #4]
   11ccc:	2b02      	cmp	r3, #2
   11cce:	f73f ae28 	bgt.w	11922 <_dtoa_r+0x8e2>
   11cd2:	9704      	str	r7, [sp, #16]
   11cd4:	e5ba      	b.n	1184c <_dtoa_r+0x80c>
   11cd6:	4601      	mov	r1, r0
   11cd8:	e78d      	b.n	11bf6 <_dtoa_r+0xbb6>
   11cda:	9b01      	ldr	r3, [sp, #4]
   11cdc:	2b02      	cmp	r3, #2
   11cde:	f73f ae20 	bgt.w	11922 <_dtoa_r+0x8e2>
   11ce2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11ce6:	9704      	str	r7, [sp, #16]
   11ce8:	e52b      	b.n	11742 <_dtoa_r+0x702>
   11cea:	2002      	movs	r0, #2
   11cec:	f7ff baef 	b.w	112ce <_dtoa_r+0x28e>
   11cf0:	4b0b      	ldr	r3, [pc, #44]	; (11d20 <_dtoa_r+0xce0>)
   11cf2:	480c      	ldr	r0, [pc, #48]	; (11d24 <_dtoa_r+0xce4>)
   11cf4:	2200      	movs	r2, #0
   11cf6:	f240 11af 	movw	r1, #431	; 0x1af
   11cfa:	f7ff f8b1 	bl	10e60 <__assert_func>
   11cfe:	4b08      	ldr	r3, [pc, #32]	; (11d20 <_dtoa_r+0xce0>)
   11d00:	4808      	ldr	r0, [pc, #32]	; (11d24 <_dtoa_r+0xce4>)
   11d02:	463a      	mov	r2, r7
   11d04:	f240 21ef 	movw	r1, #751	; 0x2ef
   11d08:	f7ff f8aa 	bl	10e60 <__assert_func>
   11d0c:	4b06      	ldr	r3, [pc, #24]	; (11d28 <_dtoa_r+0xce8>)
   11d0e:	9300      	str	r3, [sp, #0]
   11d10:	f7ff b9d2 	b.w	110b8 <_dtoa_r+0x78>
   11d14:	9b02      	ldr	r3, [sp, #8]
   11d16:	9308      	str	r3, [sp, #32]
   11d18:	e4f7      	b.n	1170a <_dtoa_r+0x6ca>
   11d1a:	bf00      	nop
   11d1c:	200002a8 	.word	0x200002a8
   11d20:	200008a0 	.word	0x200008a0
   11d24:	20000b90 	.word	0x20000b90
   11d28:	20000b80 	.word	0x20000b80

00011d2c <_strtoul_l.constprop.0>:
   11d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d30:	4607      	mov	r7, r0
   11d32:	484c      	ldr	r0, [pc, #304]	; (11e64 <_strtoul_l.constprop.0+0x138>)
   11d34:	460e      	mov	r6, r1
   11d36:	4635      	mov	r5, r6
   11d38:	f816 eb01 	ldrb.w	lr, [r6], #1
   11d3c:	f810 c00e 	ldrb.w	ip, [r0, lr]
   11d40:	f01c 0c08 	ands.w	ip, ip, #8
   11d44:	d1f7      	bne.n	11d36 <_strtoul_l.constprop.0+0xa>
   11d46:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   11d4a:	d05a      	beq.n	11e02 <_strtoul_l.constprop.0+0xd6>
   11d4c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   11d50:	bf03      	ittte	eq
   11d52:	f896 e000 	ldrbeq.w	lr, [r6]
   11d56:	4664      	moveq	r4, ip
   11d58:	1cae      	addeq	r6, r5, #2
   11d5a:	4664      	movne	r4, ip
   11d5c:	b15b      	cbz	r3, 11d76 <_strtoul_l.constprop.0+0x4a>
   11d5e:	2b10      	cmp	r3, #16
   11d60:	d054      	beq.n	11e0c <_strtoul_l.constprop.0+0xe0>
   11d62:	f04f 38ff 	mov.w	r8, #4294967295
   11d66:	fbb8 f8f3 	udiv	r8, r8, r3
   11d6a:	fb03 fa08 	mul.w	sl, r3, r8
   11d6e:	ea6f 0a0a 	mvn.w	sl, sl
   11d72:	4699      	mov	r9, r3
   11d74:	e008      	b.n	11d88 <_strtoul_l.constprop.0+0x5c>
   11d76:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11d7a:	d05a      	beq.n	11e32 <_strtoul_l.constprop.0+0x106>
   11d7c:	230a      	movs	r3, #10
   11d7e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 11e68 <_strtoul_l.constprop.0+0x13c>
   11d82:	f04f 0a05 	mov.w	sl, #5
   11d86:	4699      	mov	r9, r3
   11d88:	2500      	movs	r5, #0
   11d8a:	4628      	mov	r0, r5
   11d8c:	e005      	b.n	11d9a <_strtoul_l.constprop.0+0x6e>
   11d8e:	d02c      	beq.n	11dea <_strtoul_l.constprop.0+0xbe>
   11d90:	fb09 c000 	mla	r0, r9, r0, ip
   11d94:	2501      	movs	r5, #1
   11d96:	f816 eb01 	ldrb.w	lr, [r6], #1
   11d9a:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   11d9e:	f1bc 0f09 	cmp.w	ip, #9
   11da2:	d906      	bls.n	11db2 <_strtoul_l.constprop.0+0x86>
   11da4:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   11da8:	f1bc 0f19 	cmp.w	ip, #25
   11dac:	d80b      	bhi.n	11dc6 <_strtoul_l.constprop.0+0x9a>
   11dae:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   11db2:	4563      	cmp	r3, ip
   11db4:	dd10      	ble.n	11dd8 <_strtoul_l.constprop.0+0xac>
   11db6:	f1b5 3fff 	cmp.w	r5, #4294967295
   11dba:	d0ec      	beq.n	11d96 <_strtoul_l.constprop.0+0x6a>
   11dbc:	4540      	cmp	r0, r8
   11dbe:	d9e6      	bls.n	11d8e <_strtoul_l.constprop.0+0x62>
   11dc0:	f04f 35ff 	mov.w	r5, #4294967295
   11dc4:	e7e7      	b.n	11d96 <_strtoul_l.constprop.0+0x6a>
   11dc6:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   11dca:	f1bc 0f19 	cmp.w	ip, #25
   11dce:	d803      	bhi.n	11dd8 <_strtoul_l.constprop.0+0xac>
   11dd0:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   11dd4:	4563      	cmp	r3, ip
   11dd6:	dcee      	bgt.n	11db6 <_strtoul_l.constprop.0+0x8a>
   11dd8:	1c6b      	adds	r3, r5, #1
   11dda:	d00b      	beq.n	11df4 <_strtoul_l.constprop.0+0xc8>
   11ddc:	b104      	cbz	r4, 11de0 <_strtoul_l.constprop.0+0xb4>
   11dde:	4240      	negs	r0, r0
   11de0:	b10a      	cbz	r2, 11de6 <_strtoul_l.constprop.0+0xba>
   11de2:	b965      	cbnz	r5, 11dfe <_strtoul_l.constprop.0+0xd2>
   11de4:	6011      	str	r1, [r2, #0]
   11de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11dea:	45d4      	cmp	ip, sl
   11dec:	ddd0      	ble.n	11d90 <_strtoul_l.constprop.0+0x64>
   11dee:	f04f 35ff 	mov.w	r5, #4294967295
   11df2:	e7d0      	b.n	11d96 <_strtoul_l.constprop.0+0x6a>
   11df4:	2322      	movs	r3, #34	; 0x22
   11df6:	603b      	str	r3, [r7, #0]
   11df8:	4628      	mov	r0, r5
   11dfa:	2a00      	cmp	r2, #0
   11dfc:	d0f3      	beq.n	11de6 <_strtoul_l.constprop.0+0xba>
   11dfe:	1e71      	subs	r1, r6, #1
   11e00:	e7f0      	b.n	11de4 <_strtoul_l.constprop.0+0xb8>
   11e02:	f896 e000 	ldrb.w	lr, [r6]
   11e06:	2401      	movs	r4, #1
   11e08:	1cae      	adds	r6, r5, #2
   11e0a:	e7a7      	b.n	11d5c <_strtoul_l.constprop.0+0x30>
   11e0c:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11e10:	d121      	bne.n	11e56 <_strtoul_l.constprop.0+0x12a>
   11e12:	7830      	ldrb	r0, [r6, #0]
   11e14:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   11e18:	2858      	cmp	r0, #88	; 0x58
   11e1a:	d116      	bne.n	11e4a <_strtoul_l.constprop.0+0x11e>
   11e1c:	f04f 0910 	mov.w	r9, #16
   11e20:	f896 e001 	ldrb.w	lr, [r6, #1]
   11e24:	f04f 0a0f 	mov.w	sl, #15
   11e28:	3602      	adds	r6, #2
   11e2a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11e2e:	464b      	mov	r3, r9
   11e30:	e7aa      	b.n	11d88 <_strtoul_l.constprop.0+0x5c>
   11e32:	7833      	ldrb	r3, [r6, #0]
   11e34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11e38:	2b58      	cmp	r3, #88	; 0x58
   11e3a:	d0ef      	beq.n	11e1c <_strtoul_l.constprop.0+0xf0>
   11e3c:	2308      	movs	r3, #8
   11e3e:	f04f 0a07 	mov.w	sl, #7
   11e42:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   11e46:	4699      	mov	r9, r3
   11e48:	e79e      	b.n	11d88 <_strtoul_l.constprop.0+0x5c>
   11e4a:	4699      	mov	r9, r3
   11e4c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11e50:	f04f 0a0f 	mov.w	sl, #15
   11e54:	e798      	b.n	11d88 <_strtoul_l.constprop.0+0x5c>
   11e56:	f04f 0a0f 	mov.w	sl, #15
   11e5a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11e5e:	4699      	mov	r9, r3
   11e60:	e792      	b.n	11d88 <_strtoul_l.constprop.0+0x5c>
   11e62:	bf00      	nop
   11e64:	20000a7d 	.word	0x20000a7d
   11e68:	19999999 	.word	0x19999999

00011e6c <_strtoul_r>:
   11e6c:	f7ff bf5e 	b.w	11d2c <_strtoul_l.constprop.0>

00011e70 <_strtoll_l.constprop.0>:
   11e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e74:	b085      	sub	sp, #20
   11e76:	461f      	mov	r7, r3
   11e78:	4b57      	ldr	r3, [pc, #348]	; (11fd8 <_strtoll_l.constprop.0+0x168>)
   11e7a:	9003      	str	r0, [sp, #12]
   11e7c:	468a      	mov	sl, r1
   11e7e:	9200      	str	r2, [sp, #0]
   11e80:	460d      	mov	r5, r1
   11e82:	462a      	mov	r2, r5
   11e84:	f815 4b01 	ldrb.w	r4, [r5], #1
   11e88:	5d1e      	ldrb	r6, [r3, r4]
   11e8a:	f016 0608 	ands.w	r6, r6, #8
   11e8e:	d1f8      	bne.n	11e82 <_strtoll_l.constprop.0+0x12>
   11e90:	2c2d      	cmp	r4, #45	; 0x2d
   11e92:	d075      	beq.n	11f80 <_strtoll_l.constprop.0+0x110>
   11e94:	2c2b      	cmp	r4, #43	; 0x2b
   11e96:	bf05      	ittet	eq
   11e98:	782c      	ldrbeq	r4, [r5, #0]
   11e9a:	9602      	streq	r6, [sp, #8]
   11e9c:	9602      	strne	r6, [sp, #8]
   11e9e:	1c95      	addeq	r5, r2, #2
   11ea0:	f04f 36ff 	mov.w	r6, #4294967295
   11ea4:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   11ea8:	b12f      	cbz	r7, 11eb6 <_strtoll_l.constprop.0+0x46>
   11eaa:	2f10      	cmp	r7, #16
   11eac:	d06f      	beq.n	11f8e <_strtoll_l.constprop.0+0x11e>
   11eae:	46b8      	mov	r8, r7
   11eb0:	ea4f 79e7 	mov.w	r9, r7, asr #31
   11eb4:	e005      	b.n	11ec2 <_strtoll_l.constprop.0+0x52>
   11eb6:	2c30      	cmp	r4, #48	; 0x30
   11eb8:	d074      	beq.n	11fa4 <_strtoll_l.constprop.0+0x134>
   11eba:	f04f 080a 	mov.w	r8, #10
   11ebe:	46b9      	mov	r9, r7
   11ec0:	4647      	mov	r7, r8
   11ec2:	4642      	mov	r2, r8
   11ec4:	464b      	mov	r3, r9
   11ec6:	4630      	mov	r0, r6
   11ec8:	4659      	mov	r1, fp
   11eca:	f7f7 fc49 	bl	9760 <__aeabi_uldivmod>
   11ece:	2300      	movs	r3, #0
   11ed0:	9201      	str	r2, [sp, #4]
   11ed2:	4684      	mov	ip, r0
   11ed4:	460a      	mov	r2, r1
   11ed6:	4618      	mov	r0, r3
   11ed8:	4619      	mov	r1, r3
   11eda:	e011      	b.n	11f00 <_strtoll_l.constprop.0+0x90>
   11edc:	428a      	cmp	r2, r1
   11ede:	bf08      	it	eq
   11ee0:	4584      	cmpeq	ip, r0
   11ee2:	d03d      	beq.n	11f60 <_strtoll_l.constprop.0+0xf0>
   11ee4:	fb00 f309 	mul.w	r3, r0, r9
   11ee8:	fb08 3301 	mla	r3, r8, r1, r3
   11eec:	fba0 0108 	umull	r0, r1, r0, r8
   11ef0:	440b      	add	r3, r1
   11ef2:	eb1e 0000 	adds.w	r0, lr, r0
   11ef6:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   11efa:	2301      	movs	r3, #1
   11efc:	f815 4b01 	ldrb.w	r4, [r5], #1
   11f00:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   11f04:	f1be 0f09 	cmp.w	lr, #9
   11f08:	d906      	bls.n	11f18 <_strtoll_l.constprop.0+0xa8>
   11f0a:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   11f0e:	f1be 0f19 	cmp.w	lr, #25
   11f12:	d80c      	bhi.n	11f2e <_strtoll_l.constprop.0+0xbe>
   11f14:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   11f18:	4577      	cmp	r7, lr
   11f1a:	dd11      	ble.n	11f40 <_strtoll_l.constprop.0+0xd0>
   11f1c:	1c5c      	adds	r4, r3, #1
   11f1e:	d0ed      	beq.n	11efc <_strtoll_l.constprop.0+0x8c>
   11f20:	4584      	cmp	ip, r0
   11f22:	eb72 0301 	sbcs.w	r3, r2, r1
   11f26:	d2d9      	bcs.n	11edc <_strtoll_l.constprop.0+0x6c>
   11f28:	f04f 33ff 	mov.w	r3, #4294967295
   11f2c:	e7e6      	b.n	11efc <_strtoll_l.constprop.0+0x8c>
   11f2e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   11f32:	f1be 0f19 	cmp.w	lr, #25
   11f36:	d803      	bhi.n	11f40 <_strtoll_l.constprop.0+0xd0>
   11f38:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   11f3c:	4577      	cmp	r7, lr
   11f3e:	dced      	bgt.n	11f1c <_strtoll_l.constprop.0+0xac>
   11f40:	1c5a      	adds	r2, r3, #1
   11f42:	d013      	beq.n	11f6c <_strtoll_l.constprop.0+0xfc>
   11f44:	9a02      	ldr	r2, [sp, #8]
   11f46:	b112      	cbz	r2, 11f4e <_strtoll_l.constprop.0+0xde>
   11f48:	4240      	negs	r0, r0
   11f4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11f4e:	9a00      	ldr	r2, [sp, #0]
   11f50:	b11a      	cbz	r2, 11f5a <_strtoll_l.constprop.0+0xea>
   11f52:	bba3      	cbnz	r3, 11fbe <_strtoll_l.constprop.0+0x14e>
   11f54:	9b00      	ldr	r3, [sp, #0]
   11f56:	f8c3 a000 	str.w	sl, [r3]
   11f5a:	b005      	add	sp, #20
   11f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f60:	9b01      	ldr	r3, [sp, #4]
   11f62:	4573      	cmp	r3, lr
   11f64:	dabe      	bge.n	11ee4 <_strtoll_l.constprop.0+0x74>
   11f66:	f04f 33ff 	mov.w	r3, #4294967295
   11f6a:	e7c7      	b.n	11efc <_strtoll_l.constprop.0+0x8c>
   11f6c:	9a03      	ldr	r2, [sp, #12]
   11f6e:	2322      	movs	r3, #34	; 0x22
   11f70:	6013      	str	r3, [r2, #0]
   11f72:	9b00      	ldr	r3, [sp, #0]
   11f74:	b333      	cbz	r3, 11fc4 <_strtoll_l.constprop.0+0x154>
   11f76:	f105 3aff 	add.w	sl, r5, #4294967295
   11f7a:	4630      	mov	r0, r6
   11f7c:	4659      	mov	r1, fp
   11f7e:	e7e9      	b.n	11f54 <_strtoll_l.constprop.0+0xe4>
   11f80:	2301      	movs	r3, #1
   11f82:	782c      	ldrb	r4, [r5, #0]
   11f84:	9302      	str	r3, [sp, #8]
   11f86:	1c95      	adds	r5, r2, #2
   11f88:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   11f8c:	e78c      	b.n	11ea8 <_strtoll_l.constprop.0+0x38>
   11f8e:	2c30      	cmp	r4, #48	; 0x30
   11f90:	d104      	bne.n	11f9c <_strtoll_l.constprop.0+0x12c>
   11f92:	782b      	ldrb	r3, [r5, #0]
   11f94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11f98:	2b58      	cmp	r3, #88	; 0x58
   11f9a:	d008      	beq.n	11fae <_strtoll_l.constprop.0+0x13e>
   11f9c:	46b8      	mov	r8, r7
   11f9e:	f04f 0900 	mov.w	r9, #0
   11fa2:	e78e      	b.n	11ec2 <_strtoll_l.constprop.0+0x52>
   11fa4:	782b      	ldrb	r3, [r5, #0]
   11fa6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11faa:	2b58      	cmp	r3, #88	; 0x58
   11fac:	d10f      	bne.n	11fce <_strtoll_l.constprop.0+0x15e>
   11fae:	f04f 0810 	mov.w	r8, #16
   11fb2:	786c      	ldrb	r4, [r5, #1]
   11fb4:	f04f 0900 	mov.w	r9, #0
   11fb8:	3502      	adds	r5, #2
   11fba:	4647      	mov	r7, r8
   11fbc:	e781      	b.n	11ec2 <_strtoll_l.constprop.0+0x52>
   11fbe:	4606      	mov	r6, r0
   11fc0:	468b      	mov	fp, r1
   11fc2:	e7d8      	b.n	11f76 <_strtoll_l.constprop.0+0x106>
   11fc4:	4630      	mov	r0, r6
   11fc6:	4659      	mov	r1, fp
   11fc8:	b005      	add	sp, #20
   11fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fce:	f04f 0808 	mov.w	r8, #8
   11fd2:	46b9      	mov	r9, r7
   11fd4:	4647      	mov	r7, r8
   11fd6:	e774      	b.n	11ec2 <_strtoll_l.constprop.0+0x52>
   11fd8:	20000a7d 	.word	0x20000a7d

00011fdc <_strtoll_r>:
   11fdc:	f7ff bf48 	b.w	11e70 <_strtoll_l.constprop.0>

00011fe0 <_strtoull_l.constprop.0>:
   11fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fe4:	b085      	sub	sp, #20
   11fe6:	468b      	mov	fp, r1
   11fe8:	9201      	str	r2, [sp, #4]
   11fea:	4a62      	ldr	r2, [pc, #392]	; (12174 <_strtoull_l.constprop.0+0x194>)
   11fec:	9003      	str	r0, [sp, #12]
   11fee:	461e      	mov	r6, r3
   11ff0:	460d      	mov	r5, r1
   11ff2:	4629      	mov	r1, r5
   11ff4:	f815 4b01 	ldrb.w	r4, [r5], #1
   11ff8:	5d13      	ldrb	r3, [r2, r4]
   11ffa:	f013 0308 	ands.w	r3, r3, #8
   11ffe:	d1f8      	bne.n	11ff2 <_strtoull_l.constprop.0+0x12>
   12000:	2c2d      	cmp	r4, #45	; 0x2d
   12002:	f000 8082 	beq.w	1210a <_strtoull_l.constprop.0+0x12a>
   12006:	2c2b      	cmp	r4, #43	; 0x2b
   12008:	bf03      	ittte	eq
   1200a:	782c      	ldrbeq	r4, [r5, #0]
   1200c:	9302      	streq	r3, [sp, #8]
   1200e:	1c8d      	addeq	r5, r1, #2
   12010:	9302      	strne	r3, [sp, #8]
   12012:	b1be      	cbz	r6, 12044 <_strtoull_l.constprop.0+0x64>
   12014:	2e10      	cmp	r6, #16
   12016:	d07d      	beq.n	12114 <_strtoull_l.constprop.0+0x134>
   12018:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   1201c:	4632      	mov	r2, r6
   1201e:	4653      	mov	r3, sl
   12020:	f04f 30ff 	mov.w	r0, #4294967295
   12024:	f04f 31ff 	mov.w	r1, #4294967295
   12028:	f7f7 fb9a 	bl	9760 <__aeabi_uldivmod>
   1202c:	4632      	mov	r2, r6
   1202e:	4607      	mov	r7, r0
   12030:	4688      	mov	r8, r1
   12032:	4653      	mov	r3, sl
   12034:	f04f 30ff 	mov.w	r0, #4294967295
   12038:	f04f 31ff 	mov.w	r1, #4294967295
   1203c:	46b1      	mov	r9, r6
   1203e:	f7f7 fb8f 	bl	9760 <__aeabi_uldivmod>
   12042:	e00a      	b.n	1205a <_strtoull_l.constprop.0+0x7a>
   12044:	2c30      	cmp	r4, #48	; 0x30
   12046:	d079      	beq.n	1213c <_strtoull_l.constprop.0+0x15c>
   12048:	f04f 090a 	mov.w	r9, #10
   1204c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 12178 <_strtoull_l.constprop.0+0x198>
   12050:	46b2      	mov	sl, r6
   12052:	2205      	movs	r2, #5
   12054:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   12058:	464e      	mov	r6, r9
   1205a:	f04f 0c00 	mov.w	ip, #0
   1205e:	4660      	mov	r0, ip
   12060:	4661      	mov	r1, ip
   12062:	e011      	b.n	12088 <_strtoull_l.constprop.0+0xa8>
   12064:	4541      	cmp	r1, r8
   12066:	bf08      	it	eq
   12068:	42b8      	cmpeq	r0, r7
   1206a:	d03e      	beq.n	120ea <_strtoull_l.constprop.0+0x10a>
   1206c:	fb00 f40a 	mul.w	r4, r0, sl
   12070:	fb09 4101 	mla	r1, r9, r1, r4
   12074:	fba0 0409 	umull	r0, r4, r0, r9
   12078:	4421      	add	r1, r4
   1207a:	1818      	adds	r0, r3, r0
   1207c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   12080:	f04f 0c01 	mov.w	ip, #1
   12084:	f815 4b01 	ldrb.w	r4, [r5], #1
   12088:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1208c:	2b09      	cmp	r3, #9
   1208e:	d905      	bls.n	1209c <_strtoull_l.constprop.0+0xbc>
   12090:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   12094:	2b19      	cmp	r3, #25
   12096:	d80d      	bhi.n	120b4 <_strtoull_l.constprop.0+0xd4>
   12098:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1209c:	429e      	cmp	r6, r3
   1209e:	dd11      	ble.n	120c4 <_strtoull_l.constprop.0+0xe4>
   120a0:	f1bc 3fff 	cmp.w	ip, #4294967295
   120a4:	d0ee      	beq.n	12084 <_strtoull_l.constprop.0+0xa4>
   120a6:	4287      	cmp	r7, r0
   120a8:	eb78 0401 	sbcs.w	r4, r8, r1
   120ac:	d2da      	bcs.n	12064 <_strtoull_l.constprop.0+0x84>
   120ae:	f04f 3cff 	mov.w	ip, #4294967295
   120b2:	e7e7      	b.n	12084 <_strtoull_l.constprop.0+0xa4>
   120b4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   120b8:	2b19      	cmp	r3, #25
   120ba:	d803      	bhi.n	120c4 <_strtoull_l.constprop.0+0xe4>
   120bc:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   120c0:	429e      	cmp	r6, r3
   120c2:	dced      	bgt.n	120a0 <_strtoull_l.constprop.0+0xc0>
   120c4:	f1bc 3fff 	cmp.w	ip, #4294967295
   120c8:	d014      	beq.n	120f4 <_strtoull_l.constprop.0+0x114>
   120ca:	9b02      	ldr	r3, [sp, #8]
   120cc:	b113      	cbz	r3, 120d4 <_strtoull_l.constprop.0+0xf4>
   120ce:	4240      	negs	r0, r0
   120d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   120d4:	9b01      	ldr	r3, [sp, #4]
   120d6:	b12b      	cbz	r3, 120e4 <_strtoull_l.constprop.0+0x104>
   120d8:	f1bc 0f00 	cmp.w	ip, #0
   120dc:	d112      	bne.n	12104 <_strtoull_l.constprop.0+0x124>
   120de:	9b01      	ldr	r3, [sp, #4]
   120e0:	f8c3 b000 	str.w	fp, [r3]
   120e4:	b005      	add	sp, #20
   120e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120ea:	4293      	cmp	r3, r2
   120ec:	ddbe      	ble.n	1206c <_strtoull_l.constprop.0+0x8c>
   120ee:	f04f 3cff 	mov.w	ip, #4294967295
   120f2:	e7c7      	b.n	12084 <_strtoull_l.constprop.0+0xa4>
   120f4:	9a03      	ldr	r2, [sp, #12]
   120f6:	2322      	movs	r3, #34	; 0x22
   120f8:	6013      	str	r3, [r2, #0]
   120fa:	9b01      	ldr	r3, [sp, #4]
   120fc:	4660      	mov	r0, ip
   120fe:	4661      	mov	r1, ip
   12100:	2b00      	cmp	r3, #0
   12102:	d0ef      	beq.n	120e4 <_strtoull_l.constprop.0+0x104>
   12104:	f105 3bff 	add.w	fp, r5, #4294967295
   12108:	e7e9      	b.n	120de <_strtoull_l.constprop.0+0xfe>
   1210a:	2301      	movs	r3, #1
   1210c:	782c      	ldrb	r4, [r5, #0]
   1210e:	9302      	str	r3, [sp, #8]
   12110:	1c8d      	adds	r5, r1, #2
   12112:	e77e      	b.n	12012 <_strtoull_l.constprop.0+0x32>
   12114:	2c30      	cmp	r4, #48	; 0x30
   12116:	d123      	bne.n	12160 <_strtoull_l.constprop.0+0x180>
   12118:	782b      	ldrb	r3, [r5, #0]
   1211a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1211e:	2b58      	cmp	r3, #88	; 0x58
   12120:	d11b      	bne.n	1215a <_strtoull_l.constprop.0+0x17a>
   12122:	f04f 0910 	mov.w	r9, #16
   12126:	786c      	ldrb	r4, [r5, #1]
   12128:	220f      	movs	r2, #15
   1212a:	3502      	adds	r5, #2
   1212c:	f04f 37ff 	mov.w	r7, #4294967295
   12130:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12134:	f04f 0a00 	mov.w	sl, #0
   12138:	464e      	mov	r6, r9
   1213a:	e78e      	b.n	1205a <_strtoull_l.constprop.0+0x7a>
   1213c:	782b      	ldrb	r3, [r5, #0]
   1213e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12142:	2b58      	cmp	r3, #88	; 0x58
   12144:	d0ed      	beq.n	12122 <_strtoull_l.constprop.0+0x142>
   12146:	f04f 0908 	mov.w	r9, #8
   1214a:	46b2      	mov	sl, r6
   1214c:	2207      	movs	r2, #7
   1214e:	f04f 37ff 	mov.w	r7, #4294967295
   12152:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   12156:	464e      	mov	r6, r9
   12158:	e77f      	b.n	1205a <_strtoull_l.constprop.0+0x7a>
   1215a:	f04f 0a00 	mov.w	sl, #0
   1215e:	e75d      	b.n	1201c <_strtoull_l.constprop.0+0x3c>
   12160:	220f      	movs	r2, #15
   12162:	f04f 37ff 	mov.w	r7, #4294967295
   12166:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1216a:	46b1      	mov	r9, r6
   1216c:	f04f 0a00 	mov.w	sl, #0
   12170:	e773      	b.n	1205a <_strtoull_l.constprop.0+0x7a>
   12172:	bf00      	nop
   12174:	20000a7d 	.word	0x20000a7d
   12178:	19999999 	.word	0x19999999

0001217c <_strtoull_r>:
   1217c:	f7ff bf30 	b.w	11fe0 <_strtoull_l.constprop.0>

00012180 <_mbrtowc_r>:
   12180:	b570      	push	{r4, r5, r6, lr}
   12182:	b082      	sub	sp, #8
   12184:	4604      	mov	r4, r0
   12186:	9d06      	ldr	r5, [sp, #24]
   12188:	b155      	cbz	r5, 121a0 <_mbrtowc_r+0x20>
   1218a:	b16a      	cbz	r2, 121a8 <_mbrtowc_r+0x28>
   1218c:	480f      	ldr	r0, [pc, #60]	; (121cc <_mbrtowc_r+0x4c>)
   1218e:	9500      	str	r5, [sp, #0]
   12190:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   12194:	4620      	mov	r0, r4
   12196:	47b0      	blx	r6
   12198:	1c43      	adds	r3, r0, #1
   1219a:	d010      	beq.n	121be <_mbrtowc_r+0x3e>
   1219c:	b002      	add	sp, #8
   1219e:	bd70      	pop	{r4, r5, r6, pc}
   121a0:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   121a4:	2a00      	cmp	r2, #0
   121a6:	d1f1      	bne.n	1218c <_mbrtowc_r+0xc>
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <_mbrtowc_r+0x4c>)
   121aa:	9500      	str	r5, [sp, #0]
   121ac:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   121b0:	4611      	mov	r1, r2
   121b2:	2301      	movs	r3, #1
   121b4:	4a06      	ldr	r2, [pc, #24]	; (121d0 <_mbrtowc_r+0x50>)
   121b6:	4620      	mov	r0, r4
   121b8:	47b0      	blx	r6
   121ba:	1c43      	adds	r3, r0, #1
   121bc:	d1ee      	bne.n	1219c <_mbrtowc_r+0x1c>
   121be:	2200      	movs	r2, #0
   121c0:	238a      	movs	r3, #138	; 0x8a
   121c2:	602a      	str	r2, [r5, #0]
   121c4:	6023      	str	r3, [r4, #0]
   121c6:	b002      	add	sp, #8
   121c8:	bd70      	pop	{r4, r5, r6, pc}
   121ca:	bf00      	nop
   121cc:	200085c8 	.word	0x200085c8
   121d0:	20007ffc 	.word	0x20007ffc

000121d4 <_wcrtomb_r>:
   121d4:	b570      	push	{r4, r5, r6, lr}
   121d6:	4605      	mov	r5, r0
   121d8:	b084      	sub	sp, #16
   121da:	b15b      	cbz	r3, 121f4 <_wcrtomb_r+0x20>
   121dc:	461c      	mov	r4, r3
   121de:	b169      	cbz	r1, 121fc <_wcrtomb_r+0x28>
   121e0:	4b0e      	ldr	r3, [pc, #56]	; (1221c <_wcrtomb_r+0x48>)
   121e2:	4628      	mov	r0, r5
   121e4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   121e8:	4623      	mov	r3, r4
   121ea:	47b0      	blx	r6
   121ec:	1c43      	adds	r3, r0, #1
   121ee:	d00f      	beq.n	12210 <_wcrtomb_r+0x3c>
   121f0:	b004      	add	sp, #16
   121f2:	bd70      	pop	{r4, r5, r6, pc}
   121f4:	f500 7482 	add.w	r4, r0, #260	; 0x104
   121f8:	2900      	cmp	r1, #0
   121fa:	d1f1      	bne.n	121e0 <_wcrtomb_r+0xc>
   121fc:	4a07      	ldr	r2, [pc, #28]	; (1221c <_wcrtomb_r+0x48>)
   121fe:	4623      	mov	r3, r4
   12200:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   12204:	4628      	mov	r0, r5
   12206:	460a      	mov	r2, r1
   12208:	a901      	add	r1, sp, #4
   1220a:	47b0      	blx	r6
   1220c:	1c43      	adds	r3, r0, #1
   1220e:	d1ef      	bne.n	121f0 <_wcrtomb_r+0x1c>
   12210:	2200      	movs	r2, #0
   12212:	238a      	movs	r3, #138	; 0x8a
   12214:	6022      	str	r2, [r4, #0]
   12216:	602b      	str	r3, [r5, #0]
   12218:	b004      	add	sp, #16
   1221a:	bd70      	pop	{r4, r5, r6, pc}
   1221c:	200085c8 	.word	0x200085c8

00012220 <_wcsrtombs_r>:
   12220:	b510      	push	{r4, lr}
   12222:	b082      	sub	sp, #8
   12224:	9c04      	ldr	r4, [sp, #16]
   12226:	e9cd 3400 	strd	r3, r4, [sp]
   1222a:	f04f 33ff 	mov.w	r3, #4294967295
   1222e:	f001 fd9f 	bl	13d70 <_wcsnrtombs_r>
   12232:	b002      	add	sp, #8
   12234:	bd10      	pop	{r4, pc}
   12236:	bf00      	nop

00012238 <iswspace>:
   12238:	2100      	movs	r1, #0
   1223a:	f000 b801 	b.w	12240 <iswspace_l>
   1223e:	bf00      	nop

00012240 <iswspace_l>:
   12240:	b510      	push	{r4, lr}
   12242:	f000 f8ab 	bl	1239c <_jp2uc_l>
   12246:	4604      	mov	r4, r0
   12248:	f001 fda4 	bl	13d94 <category>
   1224c:	f1a0 031a 	sub.w	r3, r0, #26
   12250:	b2db      	uxtb	r3, r3
   12252:	2b02      	cmp	r3, #2
   12254:	d906      	bls.n	12264 <iswspace_l+0x24>
   12256:	f1a4 0009 	sub.w	r0, r4, #9
   1225a:	2804      	cmp	r0, #4
   1225c:	bf8c      	ite	hi
   1225e:	2000      	movhi	r0, #0
   12260:	2001      	movls	r0, #1
   12262:	bd10      	pop	{r4, pc}
   12264:	2001      	movs	r0, #1
   12266:	bd10      	pop	{r4, pc}

00012268 <__jp2uc>:
   12268:	2902      	cmp	r1, #2
   1226a:	d032      	beq.n	122d2 <__jp2uc+0x6a>
   1226c:	2903      	cmp	r1, #3
   1226e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   12272:	bf1d      	ittte	ne
   12274:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   12278:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   1227c:	b2d2      	uxtbne	r2, r2
   1227e:	b2c2      	uxtbeq	r2, r0
   12280:	f103 0150 	add.w	r1, r3, #80	; 0x50
   12284:	b2c9      	uxtb	r1, r1
   12286:	291f      	cmp	r1, #31
   12288:	d806      	bhi.n	12298 <__jp2uc+0x30>
   1228a:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   1228e:	4288      	cmp	r0, r1
   12290:	d969      	bls.n	12366 <__jp2uc+0xfe>
   12292:	f04f 30ff 	mov.w	r0, #4294967295
   12296:	4770      	bx	lr
   12298:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1229c:	b2c9      	uxtb	r1, r1
   1229e:	2924      	cmp	r1, #36	; 0x24
   122a0:	d80e      	bhi.n	122c0 <__jp2uc+0x58>
   122a2:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   122a6:	4288      	cmp	r0, r1
   122a8:	d8f3      	bhi.n	12292 <__jp2uc+0x2a>
   122aa:	3bd0      	subs	r3, #208	; 0xd0
   122ac:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   122b0:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   122b4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   122b8:	4a30      	ldr	r2, [pc, #192]	; (1237c <__jp2uc+0x114>)
   122ba:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   122be:	4770      	bx	lr
   122c0:	3ba1      	subs	r3, #161	; 0xa1
   122c2:	2b07      	cmp	r3, #7
   122c4:	d8e5      	bhi.n	12292 <__jp2uc+0x2a>
   122c6:	e8df f003 	tbb	[pc, r3]
   122ca:	3e48      	.short	0x3e48
   122cc:	25292e34 	.word	0x25292e34
   122d0:	1921      	.short	0x1921
   122d2:	b2c2      	uxtb	r2, r0
   122d4:	2a9e      	cmp	r2, #158	; 0x9e
   122d6:	f3c0 2107 	ubfx	r1, r0, #8, #8
   122da:	d90b      	bls.n	122f4 <__jp2uc+0x8c>
   122dc:	3223      	adds	r2, #35	; 0x23
   122de:	b2d2      	uxtb	r2, r2
   122e0:	2380      	movs	r3, #128	; 0x80
   122e2:	299f      	cmp	r1, #159	; 0x9f
   122e4:	bf94      	ite	ls
   122e6:	3970      	subls	r1, #112	; 0x70
   122e8:	3150      	addhi	r1, #80	; 0x50
   122ea:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   122ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   122f2:	e7c5      	b.n	12280 <__jp2uc+0x18>
   122f4:	3a7e      	subs	r2, #126	; 0x7e
   122f6:	b2d2      	uxtb	r2, r2
   122f8:	237f      	movs	r3, #127	; 0x7f
   122fa:	e7f2      	b.n	122e2 <__jp2uc+0x7a>
   122fc:	2ac0      	cmp	r2, #192	; 0xc0
   122fe:	d8c8      	bhi.n	12292 <__jp2uc+0x2a>
   12300:	4b1f      	ldr	r3, [pc, #124]	; (12380 <__jp2uc+0x118>)
   12302:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12306:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1230a:	4770      	bx	lr
   1230c:	2af1      	cmp	r2, #241	; 0xf1
   1230e:	d8c0      	bhi.n	12292 <__jp2uc+0x2a>
   12310:	4b1c      	ldr	r3, [pc, #112]	; (12384 <__jp2uc+0x11c>)
   12312:	e019      	b.n	12348 <__jp2uc+0xe0>
   12314:	2ad8      	cmp	r2, #216	; 0xd8
   12316:	d8bc      	bhi.n	12292 <__jp2uc+0x2a>
   12318:	4b1b      	ldr	r3, [pc, #108]	; (12388 <__jp2uc+0x120>)
   1231a:	e015      	b.n	12348 <__jp2uc+0xe0>
   1231c:	2af6      	cmp	r2, #246	; 0xf6
   1231e:	d8b8      	bhi.n	12292 <__jp2uc+0x2a>
   12320:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   12324:	4770      	bx	lr
   12326:	2af3      	cmp	r2, #243	; 0xf3
   12328:	d8b3      	bhi.n	12292 <__jp2uc+0x2a>
   1232a:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   1232e:	3020      	adds	r0, #32
   12330:	4770      	bx	lr
   12332:	4b16      	ldr	r3, [pc, #88]	; (1238c <__jp2uc+0x124>)
   12334:	4413      	add	r3, r2
   12336:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   1233a:	2b00      	cmp	r3, #0
   1233c:	d0a9      	beq.n	12292 <__jp2uc+0x2a>
   1233e:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   12342:	3060      	adds	r0, #96	; 0x60
   12344:	4770      	bx	lr
   12346:	4b12      	ldr	r3, [pc, #72]	; (12390 <__jp2uc+0x128>)
   12348:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   1234c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12350:	2800      	cmp	r0, #0
   12352:	bf08      	it	eq
   12354:	f04f 30ff 	moveq.w	r0, #4294967295
   12358:	4770      	bx	lr
   1235a:	4b0e      	ldr	r3, [pc, #56]	; (12394 <__jp2uc+0x12c>)
   1235c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12360:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12364:	4770      	bx	lr
   12366:	3bb0      	subs	r3, #176	; 0xb0
   12368:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   1236c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12370:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   12374:	4a08      	ldr	r2, [pc, #32]	; (12398 <__jp2uc+0x130>)
   12376:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1237a:	4770      	bx	lr
   1237c:	20005c0c 	.word	0x20005c0c
   12380:	20000f34 	.word	0x20000f34
   12384:	20000e90 	.word	0x20000e90
   12388:	20000e20 	.word	0x20000e20
   1238c:	20000dc4 	.word	0x20000dc4
   12390:	20000d08 	.word	0x20000d08
   12394:	20000c4c 	.word	0x20000c4c
   12398:	20000f74 	.word	0x20000f74

0001239c <_jp2uc_l>:
   1239c:	b538      	push	{r3, r4, r5, lr}
   1239e:	4605      	mov	r5, r0
   123a0:	b1b9      	cbz	r1, 123d2 <_jp2uc_l+0x36>
   123a2:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   123a6:	4912      	ldr	r1, [pc, #72]	; (123f0 <_jp2uc_l+0x54>)
   123a8:	4620      	mov	r0, r4
   123aa:	f7f9 fbfd 	bl	bba8 <strcmp>
   123ae:	b928      	cbnz	r0, 123bc <_jp2uc_l+0x20>
   123b0:	4628      	mov	r0, r5
   123b2:	2101      	movs	r1, #1
   123b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   123b8:	f7ff bf56 	b.w	12268 <__jp2uc>
   123bc:	490d      	ldr	r1, [pc, #52]	; (123f4 <_jp2uc_l+0x58>)
   123be:	4620      	mov	r0, r4
   123c0:	f7f9 fbf2 	bl	bba8 <strcmp>
   123c4:	b938      	cbnz	r0, 123d6 <_jp2uc_l+0x3a>
   123c6:	4628      	mov	r0, r5
   123c8:	2102      	movs	r1, #2
   123ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   123ce:	f7ff bf4b 	b.w	12268 <__jp2uc>
   123d2:	4c09      	ldr	r4, [pc, #36]	; (123f8 <_jp2uc_l+0x5c>)
   123d4:	e7e7      	b.n	123a6 <_jp2uc_l+0xa>
   123d6:	4909      	ldr	r1, [pc, #36]	; (123fc <_jp2uc_l+0x60>)
   123d8:	4620      	mov	r0, r4
   123da:	f7f9 fbe5 	bl	bba8 <strcmp>
   123de:	b928      	cbnz	r0, 123ec <_jp2uc_l+0x50>
   123e0:	4628      	mov	r0, r5
   123e2:	2103      	movs	r1, #3
   123e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   123e8:	f7ff bf3e 	b.w	12268 <__jp2uc>
   123ec:	4628      	mov	r0, r5
   123ee:	bd38      	pop	{r3, r4, r5, pc}
   123f0:	20000bec 	.word	0x20000bec
   123f4:	20000bf0 	.word	0x20000bf0
   123f8:	200086f2 	.word	0x200086f2
   123fc:	20000bf8 	.word	0x20000bf8

00012400 <fiprintf>:
   12400:	b40e      	push	{r1, r2, r3}
   12402:	b510      	push	{r4, lr}
   12404:	b083      	sub	sp, #12
   12406:	ab05      	add	r3, sp, #20
   12408:	4c06      	ldr	r4, [pc, #24]	; (12424 <fiprintf+0x24>)
   1240a:	f853 2b04 	ldr.w	r2, [r3], #4
   1240e:	9301      	str	r3, [sp, #4]
   12410:	4601      	mov	r1, r0
   12412:	6820      	ldr	r0, [r4, #0]
   12414:	f000 f97c 	bl	12710 <_vfiprintf_r>
   12418:	b003      	add	sp, #12
   1241a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1241e:	b003      	add	sp, #12
   12420:	4770      	bx	lr
   12422:	bf00      	nop
   12424:	20008b50 	.word	0x20008b50

00012428 <__ssprint_r>:
   12428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1242c:	6893      	ldr	r3, [r2, #8]
   1242e:	6817      	ldr	r7, [r2, #0]
   12430:	b083      	sub	sp, #12
   12432:	4692      	mov	sl, r2
   12434:	2b00      	cmp	r3, #0
   12436:	d070      	beq.n	1251a <__ssprint_r+0xf2>
   12438:	4681      	mov	r9, r0
   1243a:	688a      	ldr	r2, [r1, #8]
   1243c:	6808      	ldr	r0, [r1, #0]
   1243e:	460c      	mov	r4, r1
   12440:	3708      	adds	r7, #8
   12442:	e043      	b.n	124cc <__ssprint_r+0xa4>
   12444:	89a3      	ldrh	r3, [r4, #12]
   12446:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1244a:	d02e      	beq.n	124aa <__ssprint_r+0x82>
   1244c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   12450:	eba0 0801 	sub.w	r8, r0, r1
   12454:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   12458:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   1245c:	f108 0001 	add.w	r0, r8, #1
   12460:	1076      	asrs	r6, r6, #1
   12462:	4428      	add	r0, r5
   12464:	42b0      	cmp	r0, r6
   12466:	4632      	mov	r2, r6
   12468:	bf84      	itt	hi
   1246a:	4606      	movhi	r6, r0
   1246c:	4632      	movhi	r2, r6
   1246e:	055b      	lsls	r3, r3, #21
   12470:	d537      	bpl.n	124e2 <__ssprint_r+0xba>
   12472:	4611      	mov	r1, r2
   12474:	4648      	mov	r0, r9
   12476:	f7f7 fb01 	bl	9a7c <_malloc_r>
   1247a:	9001      	str	r0, [sp, #4]
   1247c:	2800      	cmp	r0, #0
   1247e:	d03a      	beq.n	124f6 <__ssprint_r+0xce>
   12480:	4642      	mov	r2, r8
   12482:	6921      	ldr	r1, [r4, #16]
   12484:	f7f5 fd56 	bl	7f34 <memcpy>
   12488:	89a2      	ldrh	r2, [r4, #12]
   1248a:	9b01      	ldr	r3, [sp, #4]
   1248c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   12490:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12494:	81a2      	strh	r2, [r4, #12]
   12496:	eba6 0208 	sub.w	r2, r6, r8
   1249a:	eb03 0008 	add.w	r0, r3, r8
   1249e:	6166      	str	r6, [r4, #20]
   124a0:	60a2      	str	r2, [r4, #8]
   124a2:	6123      	str	r3, [r4, #16]
   124a4:	6020      	str	r0, [r4, #0]
   124a6:	462e      	mov	r6, r5
   124a8:	46a8      	mov	r8, r5
   124aa:	4642      	mov	r2, r8
   124ac:	4659      	mov	r1, fp
   124ae:	f7f9 f991 	bl	b7d4 <memmove>
   124b2:	f8da 3008 	ldr.w	r3, [sl, #8]
   124b6:	68a2      	ldr	r2, [r4, #8]
   124b8:	6820      	ldr	r0, [r4, #0]
   124ba:	1b92      	subs	r2, r2, r6
   124bc:	4440      	add	r0, r8
   124be:	1b5b      	subs	r3, r3, r5
   124c0:	60a2      	str	r2, [r4, #8]
   124c2:	6020      	str	r0, [r4, #0]
   124c4:	f8ca 3008 	str.w	r3, [sl, #8]
   124c8:	b33b      	cbz	r3, 1251a <__ssprint_r+0xf2>
   124ca:	3708      	adds	r7, #8
   124cc:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   124d0:	2d00      	cmp	r5, #0
   124d2:	d0fa      	beq.n	124ca <__ssprint_r+0xa2>
   124d4:	42aa      	cmp	r2, r5
   124d6:	4616      	mov	r6, r2
   124d8:	4690      	mov	r8, r2
   124da:	d9b3      	bls.n	12444 <__ssprint_r+0x1c>
   124dc:	462e      	mov	r6, r5
   124de:	46a8      	mov	r8, r5
   124e0:	e7e3      	b.n	124aa <__ssprint_r+0x82>
   124e2:	4648      	mov	r0, r9
   124e4:	f7f7 fd92 	bl	a00c <_realloc_r>
   124e8:	4603      	mov	r3, r0
   124ea:	2800      	cmp	r0, #0
   124ec:	d1d3      	bne.n	12496 <__ssprint_r+0x6e>
   124ee:	6921      	ldr	r1, [r4, #16]
   124f0:	4648      	mov	r0, r9
   124f2:	f7f9 fe97 	bl	c224 <_free_r>
   124f6:	89a3      	ldrh	r3, [r4, #12]
   124f8:	220c      	movs	r2, #12
   124fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   124fe:	f8c9 2000 	str.w	r2, [r9]
   12502:	f04f 30ff 	mov.w	r0, #4294967295
   12506:	81a3      	strh	r3, [r4, #12]
   12508:	2200      	movs	r2, #0
   1250a:	2300      	movs	r3, #0
   1250c:	f8ca 2008 	str.w	r2, [sl, #8]
   12510:	f8ca 3004 	str.w	r3, [sl, #4]
   12514:	b003      	add	sp, #12
   12516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1251a:	2000      	movs	r0, #0
   1251c:	2300      	movs	r3, #0
   1251e:	f8ca 3004 	str.w	r3, [sl, #4]
   12522:	b003      	add	sp, #12
   12524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012528 <_sungetc_r>:
   12528:	b538      	push	{r3, r4, r5, lr}
   1252a:	1c4b      	adds	r3, r1, #1
   1252c:	d01a      	beq.n	12564 <_sungetc_r+0x3c>
   1252e:	8993      	ldrh	r3, [r2, #12]
   12530:	4614      	mov	r4, r2
   12532:	6b12      	ldr	r2, [r2, #48]	; 0x30
   12534:	f023 0320 	bic.w	r3, r3, #32
   12538:	81a3      	strh	r3, [r4, #12]
   1253a:	b2cd      	uxtb	r5, r1
   1253c:	b1aa      	cbz	r2, 1256a <_sungetc_r+0x42>
   1253e:	6862      	ldr	r2, [r4, #4]
   12540:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12542:	429a      	cmp	r2, r3
   12544:	da09      	bge.n	1255a <_sungetc_r+0x32>
   12546:	6823      	ldr	r3, [r4, #0]
   12548:	1e5a      	subs	r2, r3, #1
   1254a:	6022      	str	r2, [r4, #0]
   1254c:	f803 5c01 	strb.w	r5, [r3, #-1]
   12550:	6863      	ldr	r3, [r4, #4]
   12552:	3301      	adds	r3, #1
   12554:	6063      	str	r3, [r4, #4]
   12556:	4628      	mov	r0, r5
   12558:	bd38      	pop	{r3, r4, r5, pc}
   1255a:	4621      	mov	r1, r4
   1255c:	f001 fa58 	bl	13a10 <__submore>
   12560:	2800      	cmp	r0, #0
   12562:	d0f0      	beq.n	12546 <_sungetc_r+0x1e>
   12564:	f04f 35ff 	mov.w	r5, #4294967295
   12568:	e7f5      	b.n	12556 <_sungetc_r+0x2e>
   1256a:	6923      	ldr	r3, [r4, #16]
   1256c:	6822      	ldr	r2, [r4, #0]
   1256e:	b12b      	cbz	r3, 1257c <_sungetc_r+0x54>
   12570:	4293      	cmp	r3, r2
   12572:	d203      	bcs.n	1257c <_sungetc_r+0x54>
   12574:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   12578:	42ab      	cmp	r3, r5
   1257a:	d00f      	beq.n	1259c <_sungetc_r+0x74>
   1257c:	6861      	ldr	r1, [r4, #4]
   1257e:	63e1      	str	r1, [r4, #60]	; 0x3c
   12580:	4623      	mov	r3, r4
   12582:	63a2      	str	r2, [r4, #56]	; 0x38
   12584:	f104 0140 	add.w	r1, r4, #64	; 0x40
   12588:	2203      	movs	r2, #3
   1258a:	6362      	str	r2, [r4, #52]	; 0x34
   1258c:	6321      	str	r1, [r4, #48]	; 0x30
   1258e:	f803 5f42 	strb.w	r5, [r3, #66]!
   12592:	2201      	movs	r2, #1
   12594:	e9c4 3200 	strd	r3, r2, [r4]
   12598:	4628      	mov	r0, r5
   1259a:	bd38      	pop	{r3, r4, r5, pc}
   1259c:	6863      	ldr	r3, [r4, #4]
   1259e:	3a01      	subs	r2, #1
   125a0:	3301      	adds	r3, #1
   125a2:	e9c4 2300 	strd	r2, r3, [r4]
   125a6:	e7d6      	b.n	12556 <_sungetc_r+0x2e>

000125a8 <__ssrefill_r>:
   125a8:	b510      	push	{r4, lr}
   125aa:	460c      	mov	r4, r1
   125ac:	6b09      	ldr	r1, [r1, #48]	; 0x30
   125ae:	b169      	cbz	r1, 125cc <__ssrefill_r+0x24>
   125b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   125b4:	4299      	cmp	r1, r3
   125b6:	d001      	beq.n	125bc <__ssrefill_r+0x14>
   125b8:	f7f9 fe34 	bl	c224 <_free_r>
   125bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   125be:	6063      	str	r3, [r4, #4]
   125c0:	2000      	movs	r0, #0
   125c2:	6320      	str	r0, [r4, #48]	; 0x30
   125c4:	b113      	cbz	r3, 125cc <__ssrefill_r+0x24>
   125c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   125c8:	6023      	str	r3, [r4, #0]
   125ca:	bd10      	pop	{r4, pc}
   125cc:	89a3      	ldrh	r3, [r4, #12]
   125ce:	6921      	ldr	r1, [r4, #16]
   125d0:	2200      	movs	r2, #0
   125d2:	f043 0320 	orr.w	r3, r3, #32
   125d6:	e9c4 1200 	strd	r1, r2, [r4]
   125da:	81a3      	strh	r3, [r4, #12]
   125dc:	f04f 30ff 	mov.w	r0, #4294967295
   125e0:	bd10      	pop	{r4, pc}
   125e2:	bf00      	nop

000125e4 <_sfread_r>:
   125e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125e8:	b085      	sub	sp, #20
   125ea:	e9cd 3202 	strd	r3, r2, [sp, #8]
   125ee:	fb02 f303 	mul.w	r3, r2, r3
   125f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   125f4:	9301      	str	r3, [sp, #4]
   125f6:	b3a3      	cbz	r3, 12662 <_sfread_r+0x7e>
   125f8:	f8d4 a004 	ldr.w	sl, [r4, #4]
   125fc:	9b01      	ldr	r3, [sp, #4]
   125fe:	4553      	cmp	r3, sl
   12600:	468b      	mov	fp, r1
   12602:	d946      	bls.n	12692 <_sfread_r+0xae>
   12604:	46a0      	mov	r8, r4
   12606:	9d01      	ldr	r5, [sp, #4]
   12608:	f858 1b40 	ldr.w	r1, [r8], #64
   1260c:	4607      	mov	r7, r0
   1260e:	2600      	movs	r6, #0
   12610:	4652      	mov	r2, sl
   12612:	4658      	mov	r0, fp
   12614:	f7f5 fc8e 	bl	7f34 <memcpy>
   12618:	6823      	ldr	r3, [r4, #0]
   1261a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1261c:	4453      	add	r3, sl
   1261e:	46a9      	mov	r9, r5
   12620:	e9c4 3600 	strd	r3, r6, [r4]
   12624:	4611      	mov	r1, r2
   12626:	4638      	mov	r0, r7
   12628:	44d3      	add	fp, sl
   1262a:	eba5 050a 	sub.w	r5, r5, sl
   1262e:	b1e2      	cbz	r2, 1266a <_sfread_r+0x86>
   12630:	4542      	cmp	r2, r8
   12632:	d001      	beq.n	12638 <_sfread_r+0x54>
   12634:	f7f9 fdf6 	bl	c224 <_free_r>
   12638:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1263a:	6326      	str	r6, [r4, #48]	; 0x30
   1263c:	6063      	str	r3, [r4, #4]
   1263e:	b1a3      	cbz	r3, 1266a <_sfread_r+0x86>
   12640:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   12642:	6021      	str	r1, [r4, #0]
   12644:	42ab      	cmp	r3, r5
   12646:	469a      	mov	sl, r3
   12648:	d3e2      	bcc.n	12610 <_sfread_r+0x2c>
   1264a:	9b02      	ldr	r3, [sp, #8]
   1264c:	9301      	str	r3, [sp, #4]
   1264e:	462a      	mov	r2, r5
   12650:	4658      	mov	r0, fp
   12652:	f7f5 fc6f 	bl	7f34 <memcpy>
   12656:	e9d4 3200 	ldrd	r3, r2, [r4]
   1265a:	1b52      	subs	r2, r2, r5
   1265c:	442b      	add	r3, r5
   1265e:	e9c4 3200 	strd	r3, r2, [r4]
   12662:	9801      	ldr	r0, [sp, #4]
   12664:	b005      	add	sp, #20
   12666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1266a:	9a01      	ldr	r2, [sp, #4]
   1266c:	9b03      	ldr	r3, [sp, #12]
   1266e:	4452      	add	r2, sl
   12670:	eba2 0209 	sub.w	r2, r2, r9
   12674:	fbb2 f3f3 	udiv	r3, r2, r3
   12678:	9301      	str	r3, [sp, #4]
   1267a:	89a3      	ldrh	r3, [r4, #12]
   1267c:	6922      	ldr	r2, [r4, #16]
   1267e:	9801      	ldr	r0, [sp, #4]
   12680:	f043 0320 	orr.w	r3, r3, #32
   12684:	81a3      	strh	r3, [r4, #12]
   12686:	2300      	movs	r3, #0
   12688:	e9c4 2300 	strd	r2, r3, [r4]
   1268c:	b005      	add	sp, #20
   1268e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12692:	6821      	ldr	r1, [r4, #0]
   12694:	461d      	mov	r5, r3
   12696:	e7d8      	b.n	1264a <_sfread_r+0x66>

00012698 <__sprint_r.part.0>:
   12698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1269c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1269e:	049c      	lsls	r4, r3, #18
   126a0:	4690      	mov	r8, r2
   126a2:	d52d      	bpl.n	12700 <__sprint_r.part.0+0x68>
   126a4:	6893      	ldr	r3, [r2, #8]
   126a6:	6812      	ldr	r2, [r2, #0]
   126a8:	b343      	cbz	r3, 126fc <__sprint_r.part.0+0x64>
   126aa:	468b      	mov	fp, r1
   126ac:	4606      	mov	r6, r0
   126ae:	f102 0908 	add.w	r9, r2, #8
   126b2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   126b6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   126ba:	d015      	beq.n	126e8 <__sprint_r.part.0+0x50>
   126bc:	3d04      	subs	r5, #4
   126be:	2400      	movs	r4, #0
   126c0:	e001      	b.n	126c6 <__sprint_r.part.0+0x2e>
   126c2:	42a7      	cmp	r7, r4
   126c4:	d00e      	beq.n	126e4 <__sprint_r.part.0+0x4c>
   126c6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   126ca:	465a      	mov	r2, fp
   126cc:	4630      	mov	r0, r6
   126ce:	f001 fa97 	bl	13c00 <_fputwc_r>
   126d2:	1c43      	adds	r3, r0, #1
   126d4:	f104 0401 	add.w	r4, r4, #1
   126d8:	d1f3      	bne.n	126c2 <__sprint_r.part.0+0x2a>
   126da:	2300      	movs	r3, #0
   126dc:	e9c8 3301 	strd	r3, r3, [r8, #4]
   126e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   126e8:	f02a 0a03 	bic.w	sl, sl, #3
   126ec:	eba3 030a 	sub.w	r3, r3, sl
   126f0:	f8c8 3008 	str.w	r3, [r8, #8]
   126f4:	f109 0908 	add.w	r9, r9, #8
   126f8:	2b00      	cmp	r3, #0
   126fa:	d1da      	bne.n	126b2 <__sprint_r.part.0+0x1a>
   126fc:	2000      	movs	r0, #0
   126fe:	e7ec      	b.n	126da <__sprint_r.part.0+0x42>
   12700:	f001 f80c 	bl	1371c <__sfvwrite_r>
   12704:	2300      	movs	r3, #0
   12706:	e9c8 3301 	strd	r3, r3, [r8, #4]
   1270a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1270e:	bf00      	nop

00012710 <_vfiprintf_r>:
   12710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12714:	ed2d 8b02 	vpush	{d8}
   12718:	b0c5      	sub	sp, #276	; 0x114
   1271a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   1271e:	4683      	mov	fp, r0
   12720:	ee08 1a10 	vmov	s16, r1
   12724:	4616      	mov	r6, r2
   12726:	2100      	movs	r1, #0
   12728:	2208      	movs	r2, #8
   1272a:	4650      	mov	r0, sl
   1272c:	461c      	mov	r4, r3
   1272e:	9307      	str	r3, [sp, #28]
   12730:	f7f9 f8cc 	bl	b8cc <memset>
   12734:	f1bb 0f00 	cmp.w	fp, #0
   12738:	d004      	beq.n	12744 <_vfiprintf_r+0x34>
   1273a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   1273e:	2b00      	cmp	r3, #0
   12740:	f000 86a0 	beq.w	13484 <_vfiprintf_r+0xd74>
   12744:	ee18 2a10 	vmov	r2, s16
   12748:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1274a:	07db      	lsls	r3, r3, #31
   1274c:	f140 8513 	bpl.w	13176 <_vfiprintf_r+0xa66>
   12750:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12754:	b28a      	uxth	r2, r1
   12756:	0495      	lsls	r5, r2, #18
   12758:	d40b      	bmi.n	12772 <_vfiprintf_r+0x62>
   1275a:	ee18 3a10 	vmov	r3, s16
   1275e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   12762:	8199      	strh	r1, [r3, #12]
   12764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12766:	b28a      	uxth	r2, r1
   12768:	ee18 1a10 	vmov	r1, s16
   1276c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12770:	664b      	str	r3, [r1, #100]	; 0x64
   12772:	0710      	lsls	r0, r2, #28
   12774:	f140 8105 	bpl.w	12982 <_vfiprintf_r+0x272>
   12778:	ee18 3a10 	vmov	r3, s16
   1277c:	691b      	ldr	r3, [r3, #16]
   1277e:	2b00      	cmp	r3, #0
   12780:	f000 80ff 	beq.w	12982 <_vfiprintf_r+0x272>
   12784:	f002 031a 	and.w	r3, r2, #26
   12788:	2b0a      	cmp	r3, #10
   1278a:	f000 810a 	beq.w	129a2 <_vfiprintf_r+0x292>
   1278e:	2300      	movs	r3, #0
   12790:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   12794:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   12798:	aa1b      	add	r2, sp, #108	; 0x6c
   1279a:	930c      	str	r3, [sp, #48]	; 0x30
   1279c:	9218      	str	r2, [sp, #96]	; 0x60
   1279e:	4691      	mov	r9, r2
   127a0:	930b      	str	r3, [sp, #44]	; 0x2c
   127a2:	9305      	str	r3, [sp, #20]
   127a4:	46b0      	mov	r8, r6
   127a6:	4644      	mov	r4, r8
   127a8:	4ba8      	ldr	r3, [pc, #672]	; (12a4c <_vfiprintf_r+0x33c>)
   127aa:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   127ae:	f7f9 f957 	bl	ba60 <__locale_mb_cur_max>
   127b2:	4622      	mov	r2, r4
   127b4:	4603      	mov	r3, r0
   127b6:	a912      	add	r1, sp, #72	; 0x48
   127b8:	f8cd a000 	str.w	sl, [sp]
   127bc:	4658      	mov	r0, fp
   127be:	47a8      	blx	r5
   127c0:	2800      	cmp	r0, #0
   127c2:	f000 8145 	beq.w	12a50 <_vfiprintf_r+0x340>
   127c6:	f2c0 8139 	blt.w	12a3c <_vfiprintf_r+0x32c>
   127ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
   127cc:	2a25      	cmp	r2, #37	; 0x25
   127ce:	4603      	mov	r3, r0
   127d0:	d001      	beq.n	127d6 <_vfiprintf_r+0xc6>
   127d2:	441c      	add	r4, r3
   127d4:	e7e8      	b.n	127a8 <_vfiprintf_r+0x98>
   127d6:	ebb4 0608 	subs.w	r6, r4, r8
   127da:	4605      	mov	r5, r0
   127dc:	f040 813c 	bne.w	12a58 <_vfiprintf_r+0x348>
   127e0:	2300      	movs	r3, #0
   127e2:	7861      	ldrb	r1, [r4, #1]
   127e4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   127e8:	f104 0801 	add.w	r8, r4, #1
   127ec:	9306      	str	r3, [sp, #24]
   127ee:	f04f 37ff 	mov.w	r7, #4294967295
   127f2:	461e      	mov	r6, r3
   127f4:	242b      	movs	r4, #43	; 0x2b
   127f6:	f108 0801 	add.w	r8, r8, #1
   127fa:	f1a1 0320 	sub.w	r3, r1, #32
   127fe:	2b5a      	cmp	r3, #90	; 0x5a
   12800:	f200 8178 	bhi.w	12af4 <_vfiprintf_r+0x3e4>
   12804:	e8df f013 	tbh	[pc, r3, lsl #1]
   12808:	017602b5 	.word	0x017602b5
   1280c:	02b00176 	.word	0x02b00176
   12810:	01760176 	.word	0x01760176
   12814:	006a0176 	.word	0x006a0176
   12818:	01760176 	.word	0x01760176
   1281c:	028d027d 	.word	0x028d027d
   12820:	02880176 	.word	0x02880176
   12824:	01760297 	.word	0x01760297
   12828:	005b0292 	.word	0x005b0292
   1282c:	005b005b 	.word	0x005b005b
   12830:	005b005b 	.word	0x005b005b
   12834:	005b005b 	.word	0x005b005b
   12838:	005b005b 	.word	0x005b005b
   1283c:	01760176 	.word	0x01760176
   12840:	01760176 	.word	0x01760176
   12844:	01760176 	.word	0x01760176
   12848:	01760176 	.word	0x01760176
   1284c:	025c0176 	.word	0x025c0176
   12850:	01760084 	.word	0x01760084
   12854:	01760176 	.word	0x01760176
   12858:	01760176 	.word	0x01760176
   1285c:	01760176 	.word	0x01760176
   12860:	01760176 	.word	0x01760176
   12864:	00e80176 	.word	0x00e80176
   12868:	01760176 	.word	0x01760176
   1286c:	02330176 	.word	0x02330176
   12870:	02da0176 	.word	0x02da0176
   12874:	01760176 	.word	0x01760176
   12878:	0176058b 	.word	0x0176058b
   1287c:	01760176 	.word	0x01760176
   12880:	01760176 	.word	0x01760176
   12884:	01760176 	.word	0x01760176
   12888:	01760176 	.word	0x01760176
   1288c:	025c0176 	.word	0x025c0176
   12890:	01760086 	.word	0x01760086
   12894:	01760176 	.word	0x01760176
   12898:	008602cd 	.word	0x008602cd
   1289c:	0176007f 	.word	0x0176007f
   128a0:	017602c0 	.word	0x017602c0
   128a4:	00ea02fd 	.word	0x00ea02fd
   128a8:	007f02ed 	.word	0x007f02ed
   128ac:	02330176 	.word	0x02330176
   128b0:	0569007c 	.word	0x0569007c
   128b4:	01760176 	.word	0x01760176
   128b8:	0176056b 	.word	0x0176056b
   128bc:	007c      	.short	0x007c
   128be:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   128c2:	2200      	movs	r2, #0
   128c4:	f818 1b01 	ldrb.w	r1, [r8], #1
   128c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   128cc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   128d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   128d4:	2b09      	cmp	r3, #9
   128d6:	d9f5      	bls.n	128c4 <_vfiprintf_r+0x1b4>
   128d8:	9206      	str	r2, [sp, #24]
   128da:	e78e      	b.n	127fa <_vfiprintf_r+0xea>
   128dc:	4658      	mov	r0, fp
   128de:	f7fe fa7d 	bl	10ddc <_localeconv_r>
   128e2:	6843      	ldr	r3, [r0, #4]
   128e4:	930d      	str	r3, [sp, #52]	; 0x34
   128e6:	4618      	mov	r0, r3
   128e8:	f7f9 fb8a 	bl	c000 <strlen>
   128ec:	900e      	str	r0, [sp, #56]	; 0x38
   128ee:	4605      	mov	r5, r0
   128f0:	4658      	mov	r0, fp
   128f2:	f7fe fa73 	bl	10ddc <_localeconv_r>
   128f6:	6883      	ldr	r3, [r0, #8]
   128f8:	930b      	str	r3, [sp, #44]	; 0x2c
   128fa:	2d00      	cmp	r5, #0
   128fc:	f040 84d6 	bne.w	132ac <_vfiprintf_r+0xb9c>
   12900:	f898 1000 	ldrb.w	r1, [r8]
   12904:	e777      	b.n	127f6 <_vfiprintf_r+0xe6>
   12906:	f898 1000 	ldrb.w	r1, [r8]
   1290a:	f046 0620 	orr.w	r6, r6, #32
   1290e:	e772      	b.n	127f6 <_vfiprintf_r+0xe6>
   12910:	f046 0610 	orr.w	r6, r6, #16
   12914:	06b4      	lsls	r4, r6, #26
   12916:	f140 818e 	bpl.w	12c36 <_vfiprintf_r+0x526>
   1291a:	9b07      	ldr	r3, [sp, #28]
   1291c:	3307      	adds	r3, #7
   1291e:	f023 0307 	bic.w	r3, r3, #7
   12922:	461a      	mov	r2, r3
   12924:	6859      	ldr	r1, [r3, #4]
   12926:	f852 3b08 	ldr.w	r3, [r2], #8
   1292a:	9207      	str	r2, [sp, #28]
   1292c:	460a      	mov	r2, r1
   1292e:	2900      	cmp	r1, #0
   12930:	f2c0 8470 	blt.w	13214 <_vfiprintf_r+0xb04>
   12934:	1c79      	adds	r1, r7, #1
   12936:	f000 85a2 	beq.w	1347e <_vfiprintf_r+0xd6e>
   1293a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   1293e:	9103      	str	r1, [sp, #12]
   12940:	ea53 0102 	orrs.w	r1, r3, r2
   12944:	f000 843f 	beq.w	131c6 <_vfiprintf_r+0xab6>
   12948:	2b0a      	cmp	r3, #10
   1294a:	f172 0100 	sbcs.w	r1, r2, #0
   1294e:	f080 8541 	bcs.w	133d4 <_vfiprintf_r+0xcc4>
   12952:	3330      	adds	r3, #48	; 0x30
   12954:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12958:	9e03      	ldr	r6, [sp, #12]
   1295a:	2301      	movs	r3, #1
   1295c:	9304      	str	r3, [sp, #16]
   1295e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12962:	9b04      	ldr	r3, [sp, #16]
   12964:	42bb      	cmp	r3, r7
   12966:	bfb8      	it	lt
   12968:	463b      	movlt	r3, r7
   1296a:	9303      	str	r3, [sp, #12]
   1296c:	2300      	movs	r3, #0
   1296e:	9308      	str	r3, [sp, #32]
   12970:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12974:	2b00      	cmp	r3, #0
   12976:	f000 80cb 	beq.w	12b10 <_vfiprintf_r+0x400>
   1297a:	9b03      	ldr	r3, [sp, #12]
   1297c:	3301      	adds	r3, #1
   1297e:	9303      	str	r3, [sp, #12]
   12980:	e0c6      	b.n	12b10 <_vfiprintf_r+0x400>
   12982:	ee18 1a10 	vmov	r1, s16
   12986:	4658      	mov	r0, fp
   12988:	ee18 5a10 	vmov	r5, s16
   1298c:	f001 f87c 	bl	13a88 <__swsetup_r>
   12990:	2800      	cmp	r0, #0
   12992:	f040 8652 	bne.w	1363a <_vfiprintf_r+0xf2a>
   12996:	89aa      	ldrh	r2, [r5, #12]
   12998:	f002 031a 	and.w	r3, r2, #26
   1299c:	2b0a      	cmp	r3, #10
   1299e:	f47f aef6 	bne.w	1278e <_vfiprintf_r+0x7e>
   129a2:	ee18 1a10 	vmov	r1, s16
   129a6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   129aa:	2b00      	cmp	r3, #0
   129ac:	f6ff aeef 	blt.w	1278e <_vfiprintf_r+0x7e>
   129b0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   129b2:	07db      	lsls	r3, r3, #31
   129b4:	d402      	bmi.n	129bc <_vfiprintf_r+0x2ac>
   129b6:	0597      	lsls	r7, r2, #22
   129b8:	f140 8612 	bpl.w	135e0 <_vfiprintf_r+0xed0>
   129bc:	ee18 1a10 	vmov	r1, s16
   129c0:	4623      	mov	r3, r4
   129c2:	4632      	mov	r2, r6
   129c4:	4658      	mov	r0, fp
   129c6:	f000 fe69 	bl	1369c <__sbprintf>
   129ca:	9005      	str	r0, [sp, #20]
   129cc:	9805      	ldr	r0, [sp, #20]
   129ce:	b045      	add	sp, #276	; 0x114
   129d0:	ecbd 8b02 	vpop	{d8}
   129d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129d8:	f046 0610 	orr.w	r6, r6, #16
   129dc:	f016 0220 	ands.w	r2, r6, #32
   129e0:	f000 8136 	beq.w	12c50 <_vfiprintf_r+0x540>
   129e4:	9b07      	ldr	r3, [sp, #28]
   129e6:	3307      	adds	r3, #7
   129e8:	f023 0307 	bic.w	r3, r3, #7
   129ec:	4619      	mov	r1, r3
   129ee:	685a      	ldr	r2, [r3, #4]
   129f0:	f851 3b08 	ldr.w	r3, [r1], #8
   129f4:	9107      	str	r1, [sp, #28]
   129f6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   129fa:	9103      	str	r1, [sp, #12]
   129fc:	2100      	movs	r1, #0
   129fe:	2000      	movs	r0, #0
   12a00:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12a04:	1c78      	adds	r0, r7, #1
   12a06:	f000 8210 	beq.w	12e2a <_vfiprintf_r+0x71a>
   12a0a:	9803      	ldr	r0, [sp, #12]
   12a0c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   12a10:	ea53 0002 	orrs.w	r0, r3, r2
   12a14:	f040 8208 	bne.w	12e28 <_vfiprintf_r+0x718>
   12a18:	2f00      	cmp	r7, #0
   12a1a:	f040 8538 	bne.w	1348e <_vfiprintf_r+0xd7e>
   12a1e:	2900      	cmp	r1, #0
   12a20:	f040 83d5 	bne.w	131ce <_vfiprintf_r+0xabe>
   12a24:	9b03      	ldr	r3, [sp, #12]
   12a26:	f013 0301 	ands.w	r3, r3, #1
   12a2a:	9304      	str	r3, [sp, #16]
   12a2c:	f000 8411 	beq.w	13252 <_vfiprintf_r+0xb42>
   12a30:	2330      	movs	r3, #48	; 0x30
   12a32:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12a36:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12a3a:	e792      	b.n	12962 <_vfiprintf_r+0x252>
   12a3c:	2208      	movs	r2, #8
   12a3e:	2100      	movs	r1, #0
   12a40:	4650      	mov	r0, sl
   12a42:	f7f8 ff43 	bl	b8cc <memset>
   12a46:	2301      	movs	r3, #1
   12a48:	441c      	add	r4, r3
   12a4a:	e6ad      	b.n	127a8 <_vfiprintf_r+0x98>
   12a4c:	200085c8 	.word	0x200085c8
   12a50:	ebb4 0608 	subs.w	r6, r4, r8
   12a54:	4605      	mov	r5, r0
   12a56:	d01b      	beq.n	12a90 <_vfiprintf_r+0x380>
   12a58:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12a5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12a5c:	3301      	adds	r3, #1
   12a5e:	4432      	add	r2, r6
   12a60:	2b07      	cmp	r3, #7
   12a62:	e9c9 8600 	strd	r8, r6, [r9]
   12a66:	921a      	str	r2, [sp, #104]	; 0x68
   12a68:	9319      	str	r3, [sp, #100]	; 0x64
   12a6a:	dd1c      	ble.n	12aa6 <_vfiprintf_r+0x396>
   12a6c:	2a00      	cmp	r2, #0
   12a6e:	f000 83a6 	beq.w	131be <_vfiprintf_r+0xaae>
   12a72:	ee18 1a10 	vmov	r1, s16
   12a76:	aa18      	add	r2, sp, #96	; 0x60
   12a78:	4658      	mov	r0, fp
   12a7a:	f7ff fe0d 	bl	12698 <__sprint_r.part.0>
   12a7e:	bb20      	cbnz	r0, 12aca <_vfiprintf_r+0x3ba>
   12a80:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a84:	9b05      	ldr	r3, [sp, #20]
   12a86:	4433      	add	r3, r6
   12a88:	9305      	str	r3, [sp, #20]
   12a8a:	2d00      	cmp	r5, #0
   12a8c:	f47f aea8 	bne.w	127e0 <_vfiprintf_r+0xd0>
   12a90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12a92:	2b00      	cmp	r3, #0
   12a94:	f040 85c1 	bne.w	1361a <_vfiprintf_r+0xf0a>
   12a98:	ee18 3a10 	vmov	r3, s16
   12a9c:	2200      	movs	r2, #0
   12a9e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12aa2:	9219      	str	r2, [sp, #100]	; 0x64
   12aa4:	e015      	b.n	12ad2 <_vfiprintf_r+0x3c2>
   12aa6:	f109 0908 	add.w	r9, r9, #8
   12aaa:	e7eb      	b.n	12a84 <_vfiprintf_r+0x374>
   12aac:	ee18 1a10 	vmov	r1, s16
   12ab0:	aa18      	add	r2, sp, #96	; 0x60
   12ab2:	4658      	mov	r0, fp
   12ab4:	f7ff fdf0 	bl	12698 <__sprint_r.part.0>
   12ab8:	2800      	cmp	r0, #0
   12aba:	f000 80a6 	beq.w	12c0a <_vfiprintf_r+0x4fa>
   12abe:	9b08      	ldr	r3, [sp, #32]
   12ac0:	b11b      	cbz	r3, 12aca <_vfiprintf_r+0x3ba>
   12ac2:	9908      	ldr	r1, [sp, #32]
   12ac4:	4658      	mov	r0, fp
   12ac6:	f7f9 fbad 	bl	c224 <_free_r>
   12aca:	ee18 3a10 	vmov	r3, s16
   12ace:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12ad2:	ee18 2a10 	vmov	r2, s16
   12ad6:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12ad8:	f012 0f01 	tst.w	r2, #1
   12adc:	b29a      	uxth	r2, r3
   12ade:	f000 80a0 	beq.w	12c22 <_vfiprintf_r+0x512>
   12ae2:	0650      	lsls	r0, r2, #25
   12ae4:	f100 85b2 	bmi.w	1364c <_vfiprintf_r+0xf3c>
   12ae8:	9805      	ldr	r0, [sp, #20]
   12aea:	b045      	add	sp, #276	; 0x114
   12aec:	ecbd 8b02 	vpop	{d8}
   12af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12af4:	2900      	cmp	r1, #0
   12af6:	d0cb      	beq.n	12a90 <_vfiprintf_r+0x380>
   12af8:	2300      	movs	r3, #0
   12afa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12afe:	2301      	movs	r3, #1
   12b00:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12b04:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12b08:	ac2b      	add	r4, sp, #172	; 0xac
   12b0a:	2300      	movs	r3, #0
   12b0c:	9308      	str	r3, [sp, #32]
   12b0e:	461f      	mov	r7, r3
   12b10:	f016 0302 	ands.w	r3, r6, #2
   12b14:	9309      	str	r3, [sp, #36]	; 0x24
   12b16:	d002      	beq.n	12b1e <_vfiprintf_r+0x40e>
   12b18:	9b03      	ldr	r3, [sp, #12]
   12b1a:	3302      	adds	r3, #2
   12b1c:	9303      	str	r3, [sp, #12]
   12b1e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12b22:	930a      	str	r3, [sp, #40]	; 0x28
   12b24:	d105      	bne.n	12b32 <_vfiprintf_r+0x422>
   12b26:	9b06      	ldr	r3, [sp, #24]
   12b28:	9a03      	ldr	r2, [sp, #12]
   12b2a:	1a9d      	subs	r5, r3, r2
   12b2c:	2d00      	cmp	r5, #0
   12b2e:	f300 827b 	bgt.w	13028 <_vfiprintf_r+0x918>
   12b32:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12b36:	1c41      	adds	r1, r0, #1
   12b38:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12b3c:	b182      	cbz	r2, 12b60 <_vfiprintf_r+0x450>
   12b3e:	2201      	movs	r2, #1
   12b40:	3301      	adds	r3, #1
   12b42:	f8c9 2004 	str.w	r2, [r9, #4]
   12b46:	2907      	cmp	r1, #7
   12b48:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12b4c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12b50:	f8c9 2000 	str.w	r2, [r9]
   12b54:	f300 824a 	bgt.w	12fec <_vfiprintf_r+0x8dc>
   12b58:	4608      	mov	r0, r1
   12b5a:	f109 0908 	add.w	r9, r9, #8
   12b5e:	3101      	adds	r1, #1
   12b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12b62:	b1e2      	cbz	r2, 12b9e <_vfiprintf_r+0x48e>
   12b64:	aa11      	add	r2, sp, #68	; 0x44
   12b66:	3302      	adds	r3, #2
   12b68:	f8c9 2000 	str.w	r2, [r9]
   12b6c:	2907      	cmp	r1, #7
   12b6e:	f04f 0202 	mov.w	r2, #2
   12b72:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12b76:	f8c9 2004 	str.w	r2, [r9, #4]
   12b7a:	f340 8250 	ble.w	1301e <_vfiprintf_r+0x90e>
   12b7e:	2b00      	cmp	r3, #0
   12b80:	f000 8343 	beq.w	1320a <_vfiprintf_r+0xafa>
   12b84:	ee18 1a10 	vmov	r1, s16
   12b88:	aa18      	add	r2, sp, #96	; 0x60
   12b8a:	4658      	mov	r0, fp
   12b8c:	f7ff fd84 	bl	12698 <__sprint_r.part.0>
   12b90:	2800      	cmp	r0, #0
   12b92:	d194      	bne.n	12abe <_vfiprintf_r+0x3ae>
   12b94:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12b98:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b9c:	1c41      	adds	r1, r0, #1
   12b9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12ba0:	2a80      	cmp	r2, #128	; 0x80
   12ba2:	f000 8184 	beq.w	12eae <_vfiprintf_r+0x79e>
   12ba6:	9a04      	ldr	r2, [sp, #16]
   12ba8:	1abd      	subs	r5, r7, r2
   12baa:	2d00      	cmp	r5, #0
   12bac:	f300 81d7 	bgt.w	12f5e <_vfiprintf_r+0x84e>
   12bb0:	9a04      	ldr	r2, [sp, #16]
   12bb2:	f8c9 4000 	str.w	r4, [r9]
   12bb6:	4413      	add	r3, r2
   12bb8:	2907      	cmp	r1, #7
   12bba:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12bbe:	f8c9 2004 	str.w	r2, [r9, #4]
   12bc2:	f340 816e 	ble.w	12ea2 <_vfiprintf_r+0x792>
   12bc6:	2b00      	cmp	r3, #0
   12bc8:	f000 8275 	beq.w	130b6 <_vfiprintf_r+0x9a6>
   12bcc:	ee18 1a10 	vmov	r1, s16
   12bd0:	aa18      	add	r2, sp, #96	; 0x60
   12bd2:	4658      	mov	r0, fp
   12bd4:	f7ff fd60 	bl	12698 <__sprint_r.part.0>
   12bd8:	2800      	cmp	r0, #0
   12bda:	f47f af70 	bne.w	12abe <_vfiprintf_r+0x3ae>
   12bde:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12be0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12be4:	0775      	lsls	r5, r6, #29
   12be6:	d505      	bpl.n	12bf4 <_vfiprintf_r+0x4e4>
   12be8:	9a06      	ldr	r2, [sp, #24]
   12bea:	9903      	ldr	r1, [sp, #12]
   12bec:	1a54      	subs	r4, r2, r1
   12bee:	2c00      	cmp	r4, #0
   12bf0:	f300 826b 	bgt.w	130ca <_vfiprintf_r+0x9ba>
   12bf4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12bf8:	9803      	ldr	r0, [sp, #12]
   12bfa:	4281      	cmp	r1, r0
   12bfc:	bfac      	ite	ge
   12bfe:	1852      	addge	r2, r2, r1
   12c00:	1812      	addlt	r2, r2, r0
   12c02:	9205      	str	r2, [sp, #20]
   12c04:	2b00      	cmp	r3, #0
   12c06:	f47f af51 	bne.w	12aac <_vfiprintf_r+0x39c>
   12c0a:	9908      	ldr	r1, [sp, #32]
   12c0c:	2300      	movs	r3, #0
   12c0e:	9319      	str	r3, [sp, #100]	; 0x64
   12c10:	2900      	cmp	r1, #0
   12c12:	f000 8149 	beq.w	12ea8 <_vfiprintf_r+0x798>
   12c16:	4658      	mov	r0, fp
   12c18:	f7f9 fb04 	bl	c224 <_free_r>
   12c1c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c20:	e5c1      	b.n	127a6 <_vfiprintf_r+0x96>
   12c22:	059c      	lsls	r4, r3, #22
   12c24:	f53f af5d 	bmi.w	12ae2 <_vfiprintf_r+0x3d2>
   12c28:	ee18 4a10 	vmov	r4, s16
   12c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12c2e:	f7f8 ffb3 	bl	bb98 <__retarget_lock_release_recursive>
   12c32:	89a2      	ldrh	r2, [r4, #12]
   12c34:	e755      	b.n	12ae2 <_vfiprintf_r+0x3d2>
   12c36:	06f0      	lsls	r0, r6, #27
   12c38:	9a07      	ldr	r2, [sp, #28]
   12c3a:	f100 831f 	bmi.w	1327c <_vfiprintf_r+0xb6c>
   12c3e:	0671      	lsls	r1, r6, #25
   12c40:	f140 8319 	bpl.w	13276 <_vfiprintf_r+0xb66>
   12c44:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12c48:	9207      	str	r2, [sp, #28]
   12c4a:	17da      	asrs	r2, r3, #31
   12c4c:	4611      	mov	r1, r2
   12c4e:	e66e      	b.n	1292e <_vfiprintf_r+0x21e>
   12c50:	f016 0310 	ands.w	r3, r6, #16
   12c54:	9907      	ldr	r1, [sp, #28]
   12c56:	f040 8309 	bne.w	1326c <_vfiprintf_r+0xb5c>
   12c5a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   12c5e:	f000 8301 	beq.w	13264 <_vfiprintf_r+0xb54>
   12c62:	461a      	mov	r2, r3
   12c64:	f851 3b04 	ldr.w	r3, [r1], #4
   12c68:	9107      	str	r1, [sp, #28]
   12c6a:	b29b      	uxth	r3, r3
   12c6c:	e6c3      	b.n	129f6 <_vfiprintf_r+0x2e6>
   12c6e:	9b07      	ldr	r3, [sp, #28]
   12c70:	461a      	mov	r2, r3
   12c72:	2300      	movs	r3, #0
   12c74:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12c78:	4613      	mov	r3, r2
   12c7a:	f853 4b04 	ldr.w	r4, [r3], #4
   12c7e:	9303      	str	r3, [sp, #12]
   12c80:	2c00      	cmp	r4, #0
   12c82:	f000 8412 	beq.w	134aa <_vfiprintf_r+0xd9a>
   12c86:	2953      	cmp	r1, #83	; 0x53
   12c88:	f000 8365 	beq.w	13356 <_vfiprintf_r+0xc46>
   12c8c:	f016 0510 	ands.w	r5, r6, #16
   12c90:	f040 8361 	bne.w	13356 <_vfiprintf_r+0xc46>
   12c94:	1c7b      	adds	r3, r7, #1
   12c96:	f000 84b3 	beq.w	13600 <_vfiprintf_r+0xef0>
   12c9a:	463a      	mov	r2, r7
   12c9c:	4629      	mov	r1, r5
   12c9e:	4620      	mov	r0, r4
   12ca0:	f7f9 f94e 	bl	bf40 <memchr>
   12ca4:	9008      	str	r0, [sp, #32]
   12ca6:	2800      	cmp	r0, #0
   12ca8:	f000 849f 	beq.w	135ea <_vfiprintf_r+0xeda>
   12cac:	1b03      	subs	r3, r0, r4
   12cae:	9a03      	ldr	r2, [sp, #12]
   12cb0:	9304      	str	r3, [sp, #16]
   12cb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12cb6:	462f      	mov	r7, r5
   12cb8:	9207      	str	r2, [sp, #28]
   12cba:	9303      	str	r3, [sp, #12]
   12cbc:	9508      	str	r5, [sp, #32]
   12cbe:	e657      	b.n	12970 <_vfiprintf_r+0x260>
   12cc0:	2943      	cmp	r1, #67	; 0x43
   12cc2:	d002      	beq.n	12cca <_vfiprintf_r+0x5ba>
   12cc4:	06f5      	lsls	r5, r6, #27
   12cc6:	f140 832d 	bpl.w	13324 <_vfiprintf_r+0xc14>
   12cca:	9d07      	ldr	r5, [sp, #28]
   12ccc:	2208      	movs	r2, #8
   12cce:	2100      	movs	r1, #0
   12cd0:	a816      	add	r0, sp, #88	; 0x58
   12cd2:	ac2b      	add	r4, sp, #172	; 0xac
   12cd4:	f7f8 fdfa 	bl	b8cc <memset>
   12cd8:	ab16      	add	r3, sp, #88	; 0x58
   12cda:	f855 2b04 	ldr.w	r2, [r5], #4
   12cde:	4621      	mov	r1, r4
   12ce0:	4658      	mov	r0, fp
   12ce2:	f7ff fa77 	bl	121d4 <_wcrtomb_r>
   12ce6:	4603      	mov	r3, r0
   12ce8:	3301      	adds	r3, #1
   12cea:	9004      	str	r0, [sp, #16]
   12cec:	f000 84b3 	beq.w	13656 <_vfiprintf_r+0xf46>
   12cf0:	9b04      	ldr	r3, [sp, #16]
   12cf2:	9507      	str	r5, [sp, #28]
   12cf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12cf8:	9303      	str	r3, [sp, #12]
   12cfa:	2300      	movs	r3, #0
   12cfc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12d00:	e703      	b.n	12b0a <_vfiprintf_r+0x3fa>
   12d02:	9b07      	ldr	r3, [sp, #28]
   12d04:	f853 2b04 	ldr.w	r2, [r3], #4
   12d08:	9206      	str	r2, [sp, #24]
   12d0a:	2a00      	cmp	r2, #0
   12d0c:	f280 829c 	bge.w	13248 <_vfiprintf_r+0xb38>
   12d10:	9a06      	ldr	r2, [sp, #24]
   12d12:	4252      	negs	r2, r2
   12d14:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12d18:	f898 1000 	ldrb.w	r1, [r8]
   12d1c:	f046 0604 	orr.w	r6, r6, #4
   12d20:	e569      	b.n	127f6 <_vfiprintf_r+0xe6>
   12d22:	f898 1000 	ldrb.w	r1, [r8]
   12d26:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12d2a:	e564      	b.n	127f6 <_vfiprintf_r+0xe6>
   12d2c:	f898 1000 	ldrb.w	r1, [r8]
   12d30:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12d34:	e55f      	b.n	127f6 <_vfiprintf_r+0xe6>
   12d36:	4642      	mov	r2, r8
   12d38:	f812 1b01 	ldrb.w	r1, [r2], #1
   12d3c:	292a      	cmp	r1, #42	; 0x2a
   12d3e:	f000 8496 	beq.w	1366e <_vfiprintf_r+0xf5e>
   12d42:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12d46:	2b09      	cmp	r3, #9
   12d48:	4690      	mov	r8, r2
   12d4a:	f04f 0700 	mov.w	r7, #0
   12d4e:	f63f ad54 	bhi.w	127fa <_vfiprintf_r+0xea>
   12d52:	f818 1b01 	ldrb.w	r1, [r8], #1
   12d56:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12d5a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   12d5e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12d62:	2b09      	cmp	r3, #9
   12d64:	d9f5      	bls.n	12d52 <_vfiprintf_r+0x642>
   12d66:	e548      	b.n	127fa <_vfiprintf_r+0xea>
   12d68:	f898 1000 	ldrb.w	r1, [r8]
   12d6c:	f046 0601 	orr.w	r6, r6, #1
   12d70:	e541      	b.n	127f6 <_vfiprintf_r+0xe6>
   12d72:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12d76:	2b00      	cmp	r3, #0
   12d78:	f47f adc2 	bne.w	12900 <_vfiprintf_r+0x1f0>
   12d7c:	2320      	movs	r3, #32
   12d7e:	f898 1000 	ldrb.w	r1, [r8]
   12d82:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12d86:	e536      	b.n	127f6 <_vfiprintf_r+0xe6>
   12d88:	f898 1000 	ldrb.w	r1, [r8]
   12d8c:	296c      	cmp	r1, #108	; 0x6c
   12d8e:	bf03      	ittte	eq
   12d90:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12d94:	f046 0620 	orreq.w	r6, r6, #32
   12d98:	f108 0801 	addeq.w	r8, r8, #1
   12d9c:	f046 0610 	orrne.w	r6, r6, #16
   12da0:	e529      	b.n	127f6 <_vfiprintf_r+0xe6>
   12da2:	f898 1000 	ldrb.w	r1, [r8]
   12da6:	2968      	cmp	r1, #104	; 0x68
   12da8:	bf03      	ittte	eq
   12daa:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12dae:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12db2:	f108 0801 	addeq.w	r8, r8, #1
   12db6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12dba:	e51c      	b.n	127f6 <_vfiprintf_r+0xe6>
   12dbc:	f046 0310 	orr.w	r3, r6, #16
   12dc0:	9303      	str	r3, [sp, #12]
   12dc2:	9b03      	ldr	r3, [sp, #12]
   12dc4:	f013 0220 	ands.w	r2, r3, #32
   12dc8:	f000 8206 	beq.w	131d8 <_vfiprintf_r+0xac8>
   12dcc:	9b07      	ldr	r3, [sp, #28]
   12dce:	3307      	adds	r3, #7
   12dd0:	f023 0307 	bic.w	r3, r3, #7
   12dd4:	4619      	mov	r1, r3
   12dd6:	685a      	ldr	r2, [r3, #4]
   12dd8:	f851 3b08 	ldr.w	r3, [r1], #8
   12ddc:	9107      	str	r1, [sp, #28]
   12dde:	2101      	movs	r1, #1
   12de0:	e60d      	b.n	129fe <_vfiprintf_r+0x2ee>
   12de2:	9a07      	ldr	r2, [sp, #28]
   12de4:	f046 0302 	orr.w	r3, r6, #2
   12de8:	9303      	str	r3, [sp, #12]
   12dea:	f852 3b04 	ldr.w	r3, [r2], #4
   12dee:	9207      	str	r2, [sp, #28]
   12df0:	f647 0230 	movw	r2, #30768	; 0x7830
   12df4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12df8:	4ab8      	ldr	r2, [pc, #736]	; (130dc <_vfiprintf_r+0x9cc>)
   12dfa:	920c      	str	r2, [sp, #48]	; 0x30
   12dfc:	2102      	movs	r1, #2
   12dfe:	2200      	movs	r2, #0
   12e00:	e5fd      	b.n	129fe <_vfiprintf_r+0x2ee>
   12e02:	06b7      	lsls	r7, r6, #26
   12e04:	f100 8248 	bmi.w	13298 <_vfiprintf_r+0xb88>
   12e08:	06f5      	lsls	r5, r6, #27
   12e0a:	f100 8346 	bmi.w	1349a <_vfiprintf_r+0xd8a>
   12e0e:	0674      	lsls	r4, r6, #25
   12e10:	f100 83d5 	bmi.w	135be <_vfiprintf_r+0xeae>
   12e14:	05b0      	lsls	r0, r6, #22
   12e16:	f140 8340 	bpl.w	1349a <_vfiprintf_r+0xd8a>
   12e1a:	9b07      	ldr	r3, [sp, #28]
   12e1c:	9905      	ldr	r1, [sp, #20]
   12e1e:	f853 2b04 	ldr.w	r2, [r3], #4
   12e22:	9307      	str	r3, [sp, #28]
   12e24:	7011      	strb	r1, [r2, #0]
   12e26:	e4be      	b.n	127a6 <_vfiprintf_r+0x96>
   12e28:	9603      	str	r6, [sp, #12]
   12e2a:	2901      	cmp	r1, #1
   12e2c:	f43f ad8c 	beq.w	12948 <_vfiprintf_r+0x238>
   12e30:	2902      	cmp	r1, #2
   12e32:	ac44      	add	r4, sp, #272	; 0x110
   12e34:	d111      	bne.n	12e5a <_vfiprintf_r+0x74a>
   12e36:	980c      	ldr	r0, [sp, #48]	; 0x30
   12e38:	f003 010f 	and.w	r1, r3, #15
   12e3c:	091b      	lsrs	r3, r3, #4
   12e3e:	5c41      	ldrb	r1, [r0, r1]
   12e40:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12e44:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12e48:	0912      	lsrs	r2, r2, #4
   12e4a:	ea53 0102 	orrs.w	r1, r3, r2
   12e4e:	d1f3      	bne.n	12e38 <_vfiprintf_r+0x728>
   12e50:	9e03      	ldr	r6, [sp, #12]
   12e52:	ab44      	add	r3, sp, #272	; 0x110
   12e54:	1b1b      	subs	r3, r3, r4
   12e56:	9304      	str	r3, [sp, #16]
   12e58:	e583      	b.n	12962 <_vfiprintf_r+0x252>
   12e5a:	f003 0107 	and.w	r1, r3, #7
   12e5e:	08db      	lsrs	r3, r3, #3
   12e60:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12e64:	08d2      	lsrs	r2, r2, #3
   12e66:	3130      	adds	r1, #48	; 0x30
   12e68:	ea53 0502 	orrs.w	r5, r3, r2
   12e6c:	4620      	mov	r0, r4
   12e6e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12e72:	d1f2      	bne.n	12e5a <_vfiprintf_r+0x74a>
   12e74:	9e03      	ldr	r6, [sp, #12]
   12e76:	07f3      	lsls	r3, r6, #31
   12e78:	d5eb      	bpl.n	12e52 <_vfiprintf_r+0x742>
   12e7a:	2930      	cmp	r1, #48	; 0x30
   12e7c:	d0e8      	beq.n	12e50 <_vfiprintf_r+0x740>
   12e7e:	2330      	movs	r3, #48	; 0x30
   12e80:	3802      	subs	r0, #2
   12e82:	f804 3c01 	strb.w	r3, [r4, #-1]
   12e86:	ab44      	add	r3, sp, #272	; 0x110
   12e88:	1a1b      	subs	r3, r3, r0
   12e8a:	9e03      	ldr	r6, [sp, #12]
   12e8c:	9304      	str	r3, [sp, #16]
   12e8e:	4604      	mov	r4, r0
   12e90:	e567      	b.n	12962 <_vfiprintf_r+0x252>
   12e92:	9b04      	ldr	r3, [sp, #16]
   12e94:	941b      	str	r4, [sp, #108]	; 0x6c
   12e96:	2201      	movs	r2, #1
   12e98:	931c      	str	r3, [sp, #112]	; 0x70
   12e9a:	931a      	str	r3, [sp, #104]	; 0x68
   12e9c:	9219      	str	r2, [sp, #100]	; 0x64
   12e9e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ea2:	f109 0908 	add.w	r9, r9, #8
   12ea6:	e69d      	b.n	12be4 <_vfiprintf_r+0x4d4>
   12ea8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12eac:	e47b      	b.n	127a6 <_vfiprintf_r+0x96>
   12eae:	9a06      	ldr	r2, [sp, #24]
   12eb0:	9d03      	ldr	r5, [sp, #12]
   12eb2:	1b55      	subs	r5, r2, r5
   12eb4:	2d00      	cmp	r5, #0
   12eb6:	f77f ae76 	ble.w	12ba6 <_vfiprintf_r+0x496>
   12eba:	2d10      	cmp	r5, #16
   12ebc:	f340 83bb 	ble.w	13636 <_vfiprintf_r+0xf26>
   12ec0:	9409      	str	r4, [sp, #36]	; 0x24
   12ec2:	ee18 4a10 	vmov	r4, s16
   12ec6:	e007      	b.n	12ed8 <_vfiprintf_r+0x7c8>
   12ec8:	f100 0c02 	add.w	ip, r0, #2
   12ecc:	f109 0908 	add.w	r9, r9, #8
   12ed0:	4610      	mov	r0, r2
   12ed2:	3d10      	subs	r5, #16
   12ed4:	2d10      	cmp	r5, #16
   12ed6:	dd1e      	ble.n	12f16 <_vfiprintf_r+0x806>
   12ed8:	4981      	ldr	r1, [pc, #516]	; (130e0 <_vfiprintf_r+0x9d0>)
   12eda:	f8c9 1000 	str.w	r1, [r9]
   12ede:	1c42      	adds	r2, r0, #1
   12ee0:	3310      	adds	r3, #16
   12ee2:	2110      	movs	r1, #16
   12ee4:	2a07      	cmp	r2, #7
   12ee6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12eea:	f8c9 1004 	str.w	r1, [r9, #4]
   12eee:	ddeb      	ble.n	12ec8 <_vfiprintf_r+0x7b8>
   12ef0:	aa18      	add	r2, sp, #96	; 0x60
   12ef2:	2b00      	cmp	r3, #0
   12ef4:	d074      	beq.n	12fe0 <_vfiprintf_r+0x8d0>
   12ef6:	4621      	mov	r1, r4
   12ef8:	4658      	mov	r0, fp
   12efa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12efe:	f7ff fbcb 	bl	12698 <__sprint_r.part.0>
   12f02:	2800      	cmp	r0, #0
   12f04:	f47f addb 	bne.w	12abe <_vfiprintf_r+0x3ae>
   12f08:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12f0c:	3d10      	subs	r5, #16
   12f0e:	2d10      	cmp	r5, #16
   12f10:	f100 0c01 	add.w	ip, r0, #1
   12f14:	dce0      	bgt.n	12ed8 <_vfiprintf_r+0x7c8>
   12f16:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12f18:	4a71      	ldr	r2, [pc, #452]	; (130e0 <_vfiprintf_r+0x9d0>)
   12f1a:	f8c9 5004 	str.w	r5, [r9, #4]
   12f1e:	442b      	add	r3, r5
   12f20:	f1bc 0f07 	cmp.w	ip, #7
   12f24:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   12f28:	f8c9 2000 	str.w	r2, [r9]
   12f2c:	f340 8194 	ble.w	13258 <_vfiprintf_r+0xb48>
   12f30:	2b00      	cmp	r3, #0
   12f32:	f000 831f 	beq.w	13574 <_vfiprintf_r+0xe64>
   12f36:	ee18 1a10 	vmov	r1, s16
   12f3a:	aa18      	add	r2, sp, #96	; 0x60
   12f3c:	4658      	mov	r0, fp
   12f3e:	f7ff fbab 	bl	12698 <__sprint_r.part.0>
   12f42:	2800      	cmp	r0, #0
   12f44:	f47f adbb 	bne.w	12abe <_vfiprintf_r+0x3ae>
   12f48:	9a04      	ldr	r2, [sp, #16]
   12f4a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12f4e:	1abd      	subs	r5, r7, r2
   12f50:	2d00      	cmp	r5, #0
   12f52:	f100 0101 	add.w	r1, r0, #1
   12f56:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f5a:	f77f ae29 	ble.w	12bb0 <_vfiprintf_r+0x4a0>
   12f5e:	2d10      	cmp	r5, #16
   12f60:	dd29      	ble.n	12fb6 <_vfiprintf_r+0x8a6>
   12f62:	9409      	str	r4, [sp, #36]	; 0x24
   12f64:	2710      	movs	r7, #16
   12f66:	ee18 4a10 	vmov	r4, s16
   12f6a:	e007      	b.n	12f7c <_vfiprintf_r+0x86c>
   12f6c:	f100 0c02 	add.w	ip, r0, #2
   12f70:	f109 0908 	add.w	r9, r9, #8
   12f74:	4610      	mov	r0, r2
   12f76:	3d10      	subs	r5, #16
   12f78:	2d10      	cmp	r5, #16
   12f7a:	dd1a      	ble.n	12fb2 <_vfiprintf_r+0x8a2>
   12f7c:	1c42      	adds	r2, r0, #1
   12f7e:	4958      	ldr	r1, [pc, #352]	; (130e0 <_vfiprintf_r+0x9d0>)
   12f80:	3310      	adds	r3, #16
   12f82:	2a07      	cmp	r2, #7
   12f84:	e9c9 1700 	strd	r1, r7, [r9]
   12f88:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12f8c:	ddee      	ble.n	12f6c <_vfiprintf_r+0x85c>
   12f8e:	aa18      	add	r2, sp, #96	; 0x60
   12f90:	b303      	cbz	r3, 12fd4 <_vfiprintf_r+0x8c4>
   12f92:	4621      	mov	r1, r4
   12f94:	4658      	mov	r0, fp
   12f96:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f9a:	f7ff fb7d 	bl	12698 <__sprint_r.part.0>
   12f9e:	2800      	cmp	r0, #0
   12fa0:	f47f ad8d 	bne.w	12abe <_vfiprintf_r+0x3ae>
   12fa4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12fa8:	3d10      	subs	r5, #16
   12faa:	2d10      	cmp	r5, #16
   12fac:	f100 0c01 	add.w	ip, r0, #1
   12fb0:	dce4      	bgt.n	12f7c <_vfiprintf_r+0x86c>
   12fb2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12fb4:	4661      	mov	r1, ip
   12fb6:	4a4a      	ldr	r2, [pc, #296]	; (130e0 <_vfiprintf_r+0x9d0>)
   12fb8:	f8c9 5004 	str.w	r5, [r9, #4]
   12fbc:	442b      	add	r3, r5
   12fbe:	2907      	cmp	r1, #7
   12fc0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12fc4:	f8c9 2000 	str.w	r2, [r9]
   12fc8:	f300 80e7 	bgt.w	1319a <_vfiprintf_r+0xa8a>
   12fcc:	f109 0908 	add.w	r9, r9, #8
   12fd0:	3101      	adds	r1, #1
   12fd2:	e5ed      	b.n	12bb0 <_vfiprintf_r+0x4a0>
   12fd4:	f04f 0c01 	mov.w	ip, #1
   12fd8:	4618      	mov	r0, r3
   12fda:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12fde:	e7ca      	b.n	12f76 <_vfiprintf_r+0x866>
   12fe0:	f04f 0c01 	mov.w	ip, #1
   12fe4:	4618      	mov	r0, r3
   12fe6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12fea:	e772      	b.n	12ed2 <_vfiprintf_r+0x7c2>
   12fec:	2b00      	cmp	r3, #0
   12fee:	f000 8104 	beq.w	131fa <_vfiprintf_r+0xaea>
   12ff2:	ee18 1a10 	vmov	r1, s16
   12ff6:	aa18      	add	r2, sp, #96	; 0x60
   12ff8:	4658      	mov	r0, fp
   12ffa:	f7ff fb4d 	bl	12698 <__sprint_r.part.0>
   12ffe:	2800      	cmp	r0, #0
   13000:	f47f ad5d 	bne.w	12abe <_vfiprintf_r+0x3ae>
   13004:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13008:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1300c:	1c41      	adds	r1, r0, #1
   1300e:	e5a7      	b.n	12b60 <_vfiprintf_r+0x450>
   13010:	2302      	movs	r3, #2
   13012:	aa11      	add	r2, sp, #68	; 0x44
   13014:	931c      	str	r3, [sp, #112]	; 0x70
   13016:	921b      	str	r2, [sp, #108]	; 0x6c
   13018:	2101      	movs	r1, #1
   1301a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1301e:	4608      	mov	r0, r1
   13020:	f109 0908 	add.w	r9, r9, #8
   13024:	1c41      	adds	r1, r0, #1
   13026:	e5ba      	b.n	12b9e <_vfiprintf_r+0x48e>
   13028:	2d10      	cmp	r5, #16
   1302a:	f340 82e5 	ble.w	135f8 <_vfiprintf_r+0xee8>
   1302e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   13032:	940f      	str	r4, [sp, #60]	; 0x3c
   13034:	4608      	mov	r0, r1
   13036:	ee18 4a10 	vmov	r4, s16
   1303a:	e007      	b.n	1304c <_vfiprintf_r+0x93c>
   1303c:	f100 0c02 	add.w	ip, r0, #2
   13040:	f109 0908 	add.w	r9, r9, #8
   13044:	4610      	mov	r0, r2
   13046:	3d10      	subs	r5, #16
   13048:	2d10      	cmp	r5, #16
   1304a:	dd1d      	ble.n	13088 <_vfiprintf_r+0x978>
   1304c:	4925      	ldr	r1, [pc, #148]	; (130e4 <_vfiprintf_r+0x9d4>)
   1304e:	f8c9 1000 	str.w	r1, [r9]
   13052:	1c42      	adds	r2, r0, #1
   13054:	3310      	adds	r3, #16
   13056:	2110      	movs	r1, #16
   13058:	2a07      	cmp	r2, #7
   1305a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1305e:	f8c9 1004 	str.w	r1, [r9, #4]
   13062:	ddeb      	ble.n	1303c <_vfiprintf_r+0x92c>
   13064:	aa18      	add	r2, sp, #96	; 0x60
   13066:	b303      	cbz	r3, 130aa <_vfiprintf_r+0x99a>
   13068:	4621      	mov	r1, r4
   1306a:	4658      	mov	r0, fp
   1306c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13070:	f7ff fb12 	bl	12698 <__sprint_r.part.0>
   13074:	2800      	cmp	r0, #0
   13076:	f47f ad22 	bne.w	12abe <_vfiprintf_r+0x3ae>
   1307a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1307e:	3d10      	subs	r5, #16
   13080:	2d10      	cmp	r5, #16
   13082:	f100 0c01 	add.w	ip, r0, #1
   13086:	dce1      	bgt.n	1304c <_vfiprintf_r+0x93c>
   13088:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1308a:	4660      	mov	r0, ip
   1308c:	4a15      	ldr	r2, [pc, #84]	; (130e4 <_vfiprintf_r+0x9d4>)
   1308e:	f8c9 5004 	str.w	r5, [r9, #4]
   13092:	442b      	add	r3, r5
   13094:	2807      	cmp	r0, #7
   13096:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1309a:	f8c9 2000 	str.w	r2, [r9]
   1309e:	f300 80c1 	bgt.w	13224 <_vfiprintf_r+0xb14>
   130a2:	f109 0908 	add.w	r9, r9, #8
   130a6:	1c41      	adds	r1, r0, #1
   130a8:	e546      	b.n	12b38 <_vfiprintf_r+0x428>
   130aa:	4618      	mov	r0, r3
   130ac:	f04f 0c01 	mov.w	ip, #1
   130b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130b4:	e7c7      	b.n	13046 <_vfiprintf_r+0x936>
   130b6:	0776      	lsls	r6, r6, #29
   130b8:	9319      	str	r3, [sp, #100]	; 0x64
   130ba:	d553      	bpl.n	13164 <_vfiprintf_r+0xa54>
   130bc:	9a06      	ldr	r2, [sp, #24]
   130be:	9903      	ldr	r1, [sp, #12]
   130c0:	1a54      	subs	r4, r2, r1
   130c2:	2c00      	cmp	r4, #0
   130c4:	dd4e      	ble.n	13164 <_vfiprintf_r+0xa54>
   130c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130ca:	2c10      	cmp	r4, #16
   130cc:	f340 82b0 	ble.w	13630 <_vfiprintf_r+0xf20>
   130d0:	9919      	ldr	r1, [sp, #100]	; 0x64
   130d2:	ee18 6a10 	vmov	r6, s16
   130d6:	2510      	movs	r5, #16
   130d8:	e00d      	b.n	130f6 <_vfiprintf_r+0x9e6>
   130da:	bf00      	nop
   130dc:	20000c18 	.word	0x20000c18
   130e0:	2000846c 	.word	0x2000846c
   130e4:	200026d4 	.word	0x200026d4
   130e8:	1c88      	adds	r0, r1, #2
   130ea:	f109 0908 	add.w	r9, r9, #8
   130ee:	4611      	mov	r1, r2
   130f0:	3c10      	subs	r4, #16
   130f2:	2c10      	cmp	r4, #16
   130f4:	dd1a      	ble.n	1312c <_vfiprintf_r+0xa1c>
   130f6:	1c4a      	adds	r2, r1, #1
   130f8:	48b3      	ldr	r0, [pc, #716]	; (133c8 <_vfiprintf_r+0xcb8>)
   130fa:	3310      	adds	r3, #16
   130fc:	2a07      	cmp	r2, #7
   130fe:	e9c9 0500 	strd	r0, r5, [r9]
   13102:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13106:	ddef      	ble.n	130e8 <_vfiprintf_r+0x9d8>
   13108:	aa18      	add	r2, sp, #96	; 0x60
   1310a:	b333      	cbz	r3, 1315a <_vfiprintf_r+0xa4a>
   1310c:	4631      	mov	r1, r6
   1310e:	4658      	mov	r0, fp
   13110:	f7ff fac2 	bl	12698 <__sprint_r.part.0>
   13114:	2800      	cmp	r0, #0
   13116:	f47f acd2 	bne.w	12abe <_vfiprintf_r+0x3ae>
   1311a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1311e:	3c10      	subs	r4, #16
   13120:	2c10      	cmp	r4, #16
   13122:	f101 0001 	add.w	r0, r1, #1
   13126:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1312a:	dce4      	bgt.n	130f6 <_vfiprintf_r+0x9e6>
   1312c:	4aa6      	ldr	r2, [pc, #664]	; (133c8 <_vfiprintf_r+0xcb8>)
   1312e:	f8c9 4004 	str.w	r4, [r9, #4]
   13132:	4423      	add	r3, r4
   13134:	2807      	cmp	r0, #7
   13136:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1313a:	f8c9 2000 	str.w	r2, [r9]
   1313e:	f77f ad59 	ble.w	12bf4 <_vfiprintf_r+0x4e4>
   13142:	b17b      	cbz	r3, 13164 <_vfiprintf_r+0xa54>
   13144:	ee18 1a10 	vmov	r1, s16
   13148:	aa18      	add	r2, sp, #96	; 0x60
   1314a:	4658      	mov	r0, fp
   1314c:	f7ff faa4 	bl	12698 <__sprint_r.part.0>
   13150:	2800      	cmp	r0, #0
   13152:	f47f acb4 	bne.w	12abe <_vfiprintf_r+0x3ae>
   13156:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13158:	e54c      	b.n	12bf4 <_vfiprintf_r+0x4e4>
   1315a:	2001      	movs	r0, #1
   1315c:	4619      	mov	r1, r3
   1315e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13162:	e7c5      	b.n	130f0 <_vfiprintf_r+0x9e0>
   13164:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   13168:	9903      	ldr	r1, [sp, #12]
   1316a:	428a      	cmp	r2, r1
   1316c:	bfac      	ite	ge
   1316e:	189b      	addge	r3, r3, r2
   13170:	185b      	addlt	r3, r3, r1
   13172:	9305      	str	r3, [sp, #20]
   13174:	e549      	b.n	12c0a <_vfiprintf_r+0x4fa>
   13176:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1317a:	058f      	lsls	r7, r1, #22
   1317c:	ee18 3a10 	vmov	r3, s16
   13180:	b28a      	uxth	r2, r1
   13182:	f53f aae8 	bmi.w	12756 <_vfiprintf_r+0x46>
   13186:	ee18 5a10 	vmov	r5, s16
   1318a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1318c:	f7f8 fd02 	bl	bb94 <__retarget_lock_acquire_recursive>
   13190:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   13194:	b28a      	uxth	r2, r1
   13196:	f7ff bade 	b.w	12756 <_vfiprintf_r+0x46>
   1319a:	2b00      	cmp	r3, #0
   1319c:	f43f ae79 	beq.w	12e92 <_vfiprintf_r+0x782>
   131a0:	ee18 1a10 	vmov	r1, s16
   131a4:	aa18      	add	r2, sp, #96	; 0x60
   131a6:	4658      	mov	r0, fp
   131a8:	f7ff fa76 	bl	12698 <__sprint_r.part.0>
   131ac:	2800      	cmp	r0, #0
   131ae:	f47f ac86 	bne.w	12abe <_vfiprintf_r+0x3ae>
   131b2:	9919      	ldr	r1, [sp, #100]	; 0x64
   131b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   131b6:	3101      	adds	r1, #1
   131b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131bc:	e4f8      	b.n	12bb0 <_vfiprintf_r+0x4a0>
   131be:	9219      	str	r2, [sp, #100]	; 0x64
   131c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131c4:	e45e      	b.n	12a84 <_vfiprintf_r+0x374>
   131c6:	2f00      	cmp	r7, #0
   131c8:	f47f abc3 	bne.w	12952 <_vfiprintf_r+0x242>
   131cc:	9e03      	ldr	r6, [sp, #12]
   131ce:	2700      	movs	r7, #0
   131d0:	9704      	str	r7, [sp, #16]
   131d2:	ac44      	add	r4, sp, #272	; 0x110
   131d4:	f7ff bbc5 	b.w	12962 <_vfiprintf_r+0x252>
   131d8:	9b03      	ldr	r3, [sp, #12]
   131da:	f013 0310 	ands.w	r3, r3, #16
   131de:	d154      	bne.n	1328a <_vfiprintf_r+0xb7a>
   131e0:	9a03      	ldr	r2, [sp, #12]
   131e2:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   131e6:	f000 816b 	beq.w	134c0 <_vfiprintf_r+0xdb0>
   131ea:	9907      	ldr	r1, [sp, #28]
   131ec:	461a      	mov	r2, r3
   131ee:	f851 3b04 	ldr.w	r3, [r1], #4
   131f2:	9107      	str	r1, [sp, #28]
   131f4:	b29b      	uxth	r3, r3
   131f6:	2101      	movs	r1, #1
   131f8:	e401      	b.n	129fe <_vfiprintf_r+0x2ee>
   131fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   131fc:	2a00      	cmp	r2, #0
   131fe:	d164      	bne.n	132ca <_vfiprintf_r+0xbba>
   13200:	4618      	mov	r0, r3
   13202:	2101      	movs	r1, #1
   13204:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13208:	e4c9      	b.n	12b9e <_vfiprintf_r+0x48e>
   1320a:	2101      	movs	r1, #1
   1320c:	4618      	mov	r0, r3
   1320e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13212:	e4c4      	b.n	12b9e <_vfiprintf_r+0x48e>
   13214:	425b      	negs	r3, r3
   13216:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1321a:	9603      	str	r6, [sp, #12]
   1321c:	202d      	movs	r0, #45	; 0x2d
   1321e:	2101      	movs	r1, #1
   13220:	f7ff bbee 	b.w	12a00 <_vfiprintf_r+0x2f0>
   13224:	2b00      	cmp	r3, #0
   13226:	f000 8088 	beq.w	1333a <_vfiprintf_r+0xc2a>
   1322a:	ee18 1a10 	vmov	r1, s16
   1322e:	aa18      	add	r2, sp, #96	; 0x60
   13230:	4658      	mov	r0, fp
   13232:	f7ff fa31 	bl	12698 <__sprint_r.part.0>
   13236:	2800      	cmp	r0, #0
   13238:	f47f ac41 	bne.w	12abe <_vfiprintf_r+0x3ae>
   1323c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13240:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13244:	1c41      	adds	r1, r0, #1
   13246:	e477      	b.n	12b38 <_vfiprintf_r+0x428>
   13248:	f898 1000 	ldrb.w	r1, [r8]
   1324c:	9307      	str	r3, [sp, #28]
   1324e:	f7ff bad2 	b.w	127f6 <_vfiprintf_r+0xe6>
   13252:	ac44      	add	r4, sp, #272	; 0x110
   13254:	f7ff bb85 	b.w	12962 <_vfiprintf_r+0x252>
   13258:	f109 0908 	add.w	r9, r9, #8
   1325c:	f10c 0101 	add.w	r1, ip, #1
   13260:	4660      	mov	r0, ip
   13262:	e4a0      	b.n	12ba6 <_vfiprintf_r+0x496>
   13264:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   13268:	f040 8197 	bne.w	1359a <_vfiprintf_r+0xe8a>
   1326c:	f851 3b04 	ldr.w	r3, [r1], #4
   13270:	9107      	str	r1, [sp, #28]
   13272:	f7ff bbc0 	b.w	129f6 <_vfiprintf_r+0x2e6>
   13276:	05b3      	lsls	r3, r6, #22
   13278:	f100 8188 	bmi.w	1358c <_vfiprintf_r+0xe7c>
   1327c:	f852 3b04 	ldr.w	r3, [r2], #4
   13280:	9207      	str	r2, [sp, #28]
   13282:	17da      	asrs	r2, r3, #31
   13284:	4611      	mov	r1, r2
   13286:	f7ff bb52 	b.w	1292e <_vfiprintf_r+0x21e>
   1328a:	9907      	ldr	r1, [sp, #28]
   1328c:	f851 3b04 	ldr.w	r3, [r1], #4
   13290:	9107      	str	r1, [sp, #28]
   13292:	2101      	movs	r1, #1
   13294:	f7ff bbb3 	b.w	129fe <_vfiprintf_r+0x2ee>
   13298:	9b07      	ldr	r3, [sp, #28]
   1329a:	9805      	ldr	r0, [sp, #20]
   1329c:	f853 1b04 	ldr.w	r1, [r3], #4
   132a0:	9307      	str	r3, [sp, #28]
   132a2:	17c2      	asrs	r2, r0, #31
   132a4:	e9c1 0200 	strd	r0, r2, [r1]
   132a8:	f7ff ba7d 	b.w	127a6 <_vfiprintf_r+0x96>
   132ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   132ae:	2b00      	cmp	r3, #0
   132b0:	f43f ab26 	beq.w	12900 <_vfiprintf_r+0x1f0>
   132b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   132b6:	781b      	ldrb	r3, [r3, #0]
   132b8:	2b00      	cmp	r3, #0
   132ba:	f43f ab21 	beq.w	12900 <_vfiprintf_r+0x1f0>
   132be:	f898 1000 	ldrb.w	r1, [r8]
   132c2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   132c6:	f7ff ba96 	b.w	127f6 <_vfiprintf_r+0xe6>
   132ca:	2302      	movs	r3, #2
   132cc:	aa11      	add	r2, sp, #68	; 0x44
   132ce:	931c      	str	r3, [sp, #112]	; 0x70
   132d0:	921b      	str	r2, [sp, #108]	; 0x6c
   132d2:	2001      	movs	r0, #1
   132d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132d8:	e6a2      	b.n	13020 <_vfiprintf_r+0x910>
   132da:	9603      	str	r6, [sp, #12]
   132dc:	e571      	b.n	12dc2 <_vfiprintf_r+0x6b2>
   132de:	4b3b      	ldr	r3, [pc, #236]	; (133cc <_vfiprintf_r+0xcbc>)
   132e0:	930c      	str	r3, [sp, #48]	; 0x30
   132e2:	f016 0220 	ands.w	r2, r6, #32
   132e6:	d059      	beq.n	1339c <_vfiprintf_r+0xc8c>
   132e8:	9b07      	ldr	r3, [sp, #28]
   132ea:	3307      	adds	r3, #7
   132ec:	f023 0307 	bic.w	r3, r3, #7
   132f0:	4618      	mov	r0, r3
   132f2:	685a      	ldr	r2, [r3, #4]
   132f4:	f850 3b08 	ldr.w	r3, [r0], #8
   132f8:	9007      	str	r0, [sp, #28]
   132fa:	07f4      	lsls	r4, r6, #31
   132fc:	d509      	bpl.n	13312 <_vfiprintf_r+0xc02>
   132fe:	ea53 0002 	orrs.w	r0, r3, r2
   13302:	d006      	beq.n	13312 <_vfiprintf_r+0xc02>
   13304:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   13308:	2130      	movs	r1, #48	; 0x30
   1330a:	f046 0602 	orr.w	r6, r6, #2
   1330e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   13312:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   13316:	9103      	str	r1, [sp, #12]
   13318:	2102      	movs	r1, #2
   1331a:	f7ff bb70 	b.w	129fe <_vfiprintf_r+0x2ee>
   1331e:	4b2c      	ldr	r3, [pc, #176]	; (133d0 <_vfiprintf_r+0xcc0>)
   13320:	930c      	str	r3, [sp, #48]	; 0x30
   13322:	e7de      	b.n	132e2 <_vfiprintf_r+0xbd2>
   13324:	9b07      	ldr	r3, [sp, #28]
   13326:	2101      	movs	r1, #1
   13328:	f853 2b04 	ldr.w	r2, [r3], #4
   1332c:	9103      	str	r1, [sp, #12]
   1332e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   13332:	9307      	str	r3, [sp, #28]
   13334:	9104      	str	r1, [sp, #16]
   13336:	ac2b      	add	r4, sp, #172	; 0xac
   13338:	e4df      	b.n	12cfa <_vfiprintf_r+0x5ea>
   1333a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1333e:	2a00      	cmp	r2, #0
   13340:	f040 8132 	bne.w	135a8 <_vfiprintf_r+0xe98>
   13344:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13346:	2a00      	cmp	r2, #0
   13348:	f47f ae62 	bne.w	13010 <_vfiprintf_r+0x900>
   1334c:	4618      	mov	r0, r3
   1334e:	2101      	movs	r1, #1
   13350:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13354:	e427      	b.n	12ba6 <_vfiprintf_r+0x496>
   13356:	2100      	movs	r1, #0
   13358:	2208      	movs	r2, #8
   1335a:	a816      	add	r0, sp, #88	; 0x58
   1335c:	9413      	str	r4, [sp, #76]	; 0x4c
   1335e:	f7f8 fab5 	bl	b8cc <memset>
   13362:	1c79      	adds	r1, r7, #1
   13364:	f000 80bc 	beq.w	134e0 <_vfiprintf_r+0xdd0>
   13368:	2500      	movs	r5, #0
   1336a:	9407      	str	r4, [sp, #28]
   1336c:	462c      	mov	r4, r5
   1336e:	e00c      	b.n	1338a <_vfiprintf_r+0xc7a>
   13370:	a92b      	add	r1, sp, #172	; 0xac
   13372:	4658      	mov	r0, fp
   13374:	f7fe ff2e 	bl	121d4 <_wcrtomb_r>
   13378:	1c42      	adds	r2, r0, #1
   1337a:	4420      	add	r0, r4
   1337c:	f000 816b 	beq.w	13656 <_vfiprintf_r+0xf46>
   13380:	42b8      	cmp	r0, r7
   13382:	dc08      	bgt.n	13396 <_vfiprintf_r+0xc86>
   13384:	f000 8170 	beq.w	13668 <_vfiprintf_r+0xf58>
   13388:	4604      	mov	r4, r0
   1338a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1338c:	5952      	ldr	r2, [r2, r5]
   1338e:	ab16      	add	r3, sp, #88	; 0x58
   13390:	3504      	adds	r5, #4
   13392:	2a00      	cmp	r2, #0
   13394:	d1ec      	bne.n	13370 <_vfiprintf_r+0xc60>
   13396:	9404      	str	r4, [sp, #16]
   13398:	9c07      	ldr	r4, [sp, #28]
   1339a:	e0af      	b.n	134fc <_vfiprintf_r+0xdec>
   1339c:	f016 0310 	ands.w	r3, r6, #16
   133a0:	9807      	ldr	r0, [sp, #28]
   133a2:	d10c      	bne.n	133be <_vfiprintf_r+0xcae>
   133a4:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   133a8:	d005      	beq.n	133b6 <_vfiprintf_r+0xca6>
   133aa:	461a      	mov	r2, r3
   133ac:	f850 3b04 	ldr.w	r3, [r0], #4
   133b0:	9007      	str	r0, [sp, #28]
   133b2:	b29b      	uxth	r3, r3
   133b4:	e7a1      	b.n	132fa <_vfiprintf_r+0xbea>
   133b6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   133ba:	f040 80e1 	bne.w	13580 <_vfiprintf_r+0xe70>
   133be:	f850 3b04 	ldr.w	r3, [r0], #4
   133c2:	9007      	str	r0, [sp, #28]
   133c4:	e799      	b.n	132fa <_vfiprintf_r+0xbea>
   133c6:	bf00      	nop
   133c8:	200026d4 	.word	0x200026d4
   133cc:	20000c18 	.word	0x20000c18
   133d0:	20000c2c 	.word	0x20000c2c
   133d4:	9903      	ldr	r1, [sp, #12]
   133d6:	9704      	str	r7, [sp, #16]
   133d8:	ac44      	add	r4, sp, #272	; 0x110
   133da:	469e      	mov	lr, r3
   133dc:	ee08 ba90 	vmov	s17, fp
   133e0:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   133e4:	f04f 0c00 	mov.w	ip, #0
   133e8:	4623      	mov	r3, r4
   133ea:	e006      	b.n	133fa <_vfiprintf_r+0xcea>
   133ec:	f1be 0f0a 	cmp.w	lr, #10
   133f0:	f172 0200 	sbcs.w	r2, r2, #0
   133f4:	d339      	bcc.n	1346a <_vfiprintf_r+0xd5a>
   133f6:	46a6      	mov	lr, r4
   133f8:	462a      	mov	r2, r5
   133fa:	49a6      	ldr	r1, [pc, #664]	; (13694 <_vfiprintf_r+0xf84>)
   133fc:	eb1e 0002 	adds.w	r0, lr, r2
   13400:	f140 0000 	adc.w	r0, r0, #0
   13404:	460f      	mov	r7, r1
   13406:	fba1 1400 	umull	r1, r4, r1, r0
   1340a:	f024 0103 	bic.w	r1, r4, #3
   1340e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   13412:	1a40      	subs	r0, r0, r1
   13414:	ebbe 0100 	subs.w	r1, lr, r0
   13418:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1341c:	f162 0400 	sbc.w	r4, r2, #0
   13420:	fb05 f501 	mul.w	r5, r5, r1
   13424:	fb07 5504 	mla	r5, r7, r4, r5
   13428:	fba1 4107 	umull	r4, r1, r1, r7
   1342c:	440d      	add	r5, r1
   1342e:	2705      	movs	r7, #5
   13430:	f004 0101 	and.w	r1, r4, #1
   13434:	fba1 1b07 	umull	r1, fp, r1, r7
   13438:	1809      	adds	r1, r1, r0
   1343a:	0864      	lsrs	r4, r4, #1
   1343c:	3130      	adds	r1, #48	; 0x30
   1343e:	f803 1c01 	strb.w	r1, [r3, #-1]
   13442:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   13446:	f10c 0c01 	add.w	ip, ip, #1
   1344a:	3b01      	subs	r3, #1
   1344c:	086d      	lsrs	r5, r5, #1
   1344e:	2e00      	cmp	r6, #0
   13450:	d0cc      	beq.n	133ec <_vfiprintf_r+0xcdc>
   13452:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13454:	7809      	ldrb	r1, [r1, #0]
   13456:	4561      	cmp	r1, ip
   13458:	d1c8      	bne.n	133ec <_vfiprintf_r+0xcdc>
   1345a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1345e:	d0c5      	beq.n	133ec <_vfiprintf_r+0xcdc>
   13460:	f1be 0f0a 	cmp.w	lr, #10
   13464:	f172 0200 	sbcs.w	r2, r2, #0
   13468:	d26c      	bcs.n	13544 <_vfiprintf_r+0xe34>
   1346a:	461c      	mov	r4, r3
   1346c:	ab44      	add	r3, sp, #272	; 0x110
   1346e:	1b1b      	subs	r3, r3, r4
   13470:	9f04      	ldr	r7, [sp, #16]
   13472:	9e03      	ldr	r6, [sp, #12]
   13474:	9304      	str	r3, [sp, #16]
   13476:	ee18 ba90 	vmov	fp, s17
   1347a:	f7ff ba72 	b.w	12962 <_vfiprintf_r+0x252>
   1347e:	9603      	str	r6, [sp, #12]
   13480:	f7ff ba62 	b.w	12948 <_vfiprintf_r+0x238>
   13484:	4658      	mov	r0, fp
   13486:	f7f8 f82d 	bl	b4e4 <__sinit>
   1348a:	f7ff b95b 	b.w	12744 <_vfiprintf_r+0x34>
   1348e:	2901      	cmp	r1, #1
   13490:	9603      	str	r6, [sp, #12]
   13492:	f47f accd 	bne.w	12e30 <_vfiprintf_r+0x720>
   13496:	f7ff ba5c 	b.w	12952 <_vfiprintf_r+0x242>
   1349a:	9b07      	ldr	r3, [sp, #28]
   1349c:	9905      	ldr	r1, [sp, #20]
   1349e:	f853 2b04 	ldr.w	r2, [r3], #4
   134a2:	6011      	str	r1, [r2, #0]
   134a4:	9307      	str	r3, [sp, #28]
   134a6:	f7ff b97e 	b.w	127a6 <_vfiprintf_r+0x96>
   134aa:	2f06      	cmp	r7, #6
   134ac:	463b      	mov	r3, r7
   134ae:	9a03      	ldr	r2, [sp, #12]
   134b0:	4c79      	ldr	r4, [pc, #484]	; (13698 <_vfiprintf_r+0xf88>)
   134b2:	9207      	str	r2, [sp, #28]
   134b4:	bf28      	it	cs
   134b6:	2306      	movcs	r3, #6
   134b8:	9304      	str	r3, [sp, #16]
   134ba:	9303      	str	r3, [sp, #12]
   134bc:	f7ff bb25 	b.w	12b0a <_vfiprintf_r+0x3fa>
   134c0:	9b03      	ldr	r3, [sp, #12]
   134c2:	9907      	ldr	r1, [sp, #28]
   134c4:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   134c8:	bf14      	ite	ne
   134ca:	f851 3b04 	ldrne.w	r3, [r1], #4
   134ce:	f851 3b04 	ldreq.w	r3, [r1], #4
   134d2:	9107      	str	r1, [sp, #28]
   134d4:	bf1c      	itt	ne
   134d6:	4602      	movne	r2, r0
   134d8:	b2db      	uxtbne	r3, r3
   134da:	2101      	movs	r1, #1
   134dc:	f7ff ba8f 	b.w	129fe <_vfiprintf_r+0x2ee>
   134e0:	ab16      	add	r3, sp, #88	; 0x58
   134e2:	9300      	str	r3, [sp, #0]
   134e4:	2300      	movs	r3, #0
   134e6:	4619      	mov	r1, r3
   134e8:	aa13      	add	r2, sp, #76	; 0x4c
   134ea:	4658      	mov	r0, fp
   134ec:	f7fe fe98 	bl	12220 <_wcsrtombs_r>
   134f0:	4603      	mov	r3, r0
   134f2:	3301      	adds	r3, #1
   134f4:	9004      	str	r0, [sp, #16]
   134f6:	f000 80ae 	beq.w	13656 <_vfiprintf_r+0xf46>
   134fa:	9413      	str	r4, [sp, #76]	; 0x4c
   134fc:	9b04      	ldr	r3, [sp, #16]
   134fe:	2b00      	cmp	r3, #0
   13500:	d030      	beq.n	13564 <_vfiprintf_r+0xe54>
   13502:	2b63      	cmp	r3, #99	; 0x63
   13504:	dc63      	bgt.n	135ce <_vfiprintf_r+0xebe>
   13506:	2300      	movs	r3, #0
   13508:	9308      	str	r3, [sp, #32]
   1350a:	ac2b      	add	r4, sp, #172	; 0xac
   1350c:	2208      	movs	r2, #8
   1350e:	2100      	movs	r1, #0
   13510:	a816      	add	r0, sp, #88	; 0x58
   13512:	f7f8 f9db 	bl	b8cc <memset>
   13516:	9d04      	ldr	r5, [sp, #16]
   13518:	ab16      	add	r3, sp, #88	; 0x58
   1351a:	9300      	str	r3, [sp, #0]
   1351c:	aa13      	add	r2, sp, #76	; 0x4c
   1351e:	462b      	mov	r3, r5
   13520:	4621      	mov	r1, r4
   13522:	4658      	mov	r0, fp
   13524:	f7fe fe7c 	bl	12220 <_wcsrtombs_r>
   13528:	4285      	cmp	r5, r0
   1352a:	f040 80ab 	bne.w	13684 <_vfiprintf_r+0xf74>
   1352e:	9b03      	ldr	r3, [sp, #12]
   13530:	9a04      	ldr	r2, [sp, #16]
   13532:	9307      	str	r3, [sp, #28]
   13534:	2300      	movs	r3, #0
   13536:	54a3      	strb	r3, [r4, r2]
   13538:	461f      	mov	r7, r3
   1353a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1353e:	9303      	str	r3, [sp, #12]
   13540:	f7ff ba16 	b.w	12970 <_vfiprintf_r+0x260>
   13544:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13546:	990d      	ldr	r1, [sp, #52]	; 0x34
   13548:	1a9b      	subs	r3, r3, r2
   1354a:	4618      	mov	r0, r3
   1354c:	9308      	str	r3, [sp, #32]
   1354e:	f7f8 fa55 	bl	b9fc <strncpy>
   13552:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13554:	9b08      	ldr	r3, [sp, #32]
   13556:	784a      	ldrb	r2, [r1, #1]
   13558:	b10a      	cbz	r2, 1355e <_vfiprintf_r+0xe4e>
   1355a:	3101      	adds	r1, #1
   1355c:	910b      	str	r1, [sp, #44]	; 0x2c
   1355e:	f04f 0c00 	mov.w	ip, #0
   13562:	e748      	b.n	133f6 <_vfiprintf_r+0xce6>
   13564:	9b03      	ldr	r3, [sp, #12]
   13566:	9307      	str	r3, [sp, #28]
   13568:	9b04      	ldr	r3, [sp, #16]
   1356a:	9303      	str	r3, [sp, #12]
   1356c:	461f      	mov	r7, r3
   1356e:	9308      	str	r3, [sp, #32]
   13570:	f7ff b9fe 	b.w	12970 <_vfiprintf_r+0x260>
   13574:	2101      	movs	r1, #1
   13576:	4618      	mov	r0, r3
   13578:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1357c:	f7ff bb13 	b.w	12ba6 <_vfiprintf_r+0x496>
   13580:	f850 3b04 	ldr.w	r3, [r0], #4
   13584:	9007      	str	r0, [sp, #28]
   13586:	4622      	mov	r2, r4
   13588:	b2db      	uxtb	r3, r3
   1358a:	e6b6      	b.n	132fa <_vfiprintf_r+0xbea>
   1358c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   13590:	9207      	str	r2, [sp, #28]
   13592:	17da      	asrs	r2, r3, #31
   13594:	4611      	mov	r1, r2
   13596:	f7ff b9ca 	b.w	1292e <_vfiprintf_r+0x21e>
   1359a:	f851 3b04 	ldr.w	r3, [r1], #4
   1359e:	9107      	str	r1, [sp, #28]
   135a0:	4602      	mov	r2, r0
   135a2:	b2db      	uxtb	r3, r3
   135a4:	f7ff ba27 	b.w	129f6 <_vfiprintf_r+0x2e6>
   135a8:	2301      	movs	r3, #1
   135aa:	931c      	str	r3, [sp, #112]	; 0x70
   135ac:	2101      	movs	r1, #1
   135ae:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   135b2:	931b      	str	r3, [sp, #108]	; 0x6c
   135b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   135b8:	460b      	mov	r3, r1
   135ba:	f7ff bacd 	b.w	12b58 <_vfiprintf_r+0x448>
   135be:	9b07      	ldr	r3, [sp, #28]
   135c0:	9905      	ldr	r1, [sp, #20]
   135c2:	f853 2b04 	ldr.w	r2, [r3], #4
   135c6:	9307      	str	r3, [sp, #28]
   135c8:	8011      	strh	r1, [r2, #0]
   135ca:	f7ff b8ec 	b.w	127a6 <_vfiprintf_r+0x96>
   135ce:	1c59      	adds	r1, r3, #1
   135d0:	4658      	mov	r0, fp
   135d2:	f7f6 fa53 	bl	9a7c <_malloc_r>
   135d6:	4604      	mov	r4, r0
   135d8:	2800      	cmp	r0, #0
   135da:	d03c      	beq.n	13656 <_vfiprintf_r+0xf46>
   135dc:	9008      	str	r0, [sp, #32]
   135de:	e795      	b.n	1350c <_vfiprintf_r+0xdfc>
   135e0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   135e2:	f7f8 fad9 	bl	bb98 <__retarget_lock_release_recursive>
   135e6:	f7ff b9e9 	b.w	129bc <_vfiprintf_r+0x2ac>
   135ea:	9b03      	ldr	r3, [sp, #12]
   135ec:	9307      	str	r3, [sp, #28]
   135ee:	e9cd 7703 	strd	r7, r7, [sp, #12]
   135f2:	9f08      	ldr	r7, [sp, #32]
   135f4:	f7ff b9bc 	b.w	12970 <_vfiprintf_r+0x260>
   135f8:	9819      	ldr	r0, [sp, #100]	; 0x64
   135fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   135fc:	3001      	adds	r0, #1
   135fe:	e545      	b.n	1308c <_vfiprintf_r+0x97c>
   13600:	9b03      	ldr	r3, [sp, #12]
   13602:	9307      	str	r3, [sp, #28]
   13604:	4620      	mov	r0, r4
   13606:	f7f8 fcfb 	bl	c000 <strlen>
   1360a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1360e:	462f      	mov	r7, r5
   13610:	9004      	str	r0, [sp, #16]
   13612:	9303      	str	r3, [sp, #12]
   13614:	9508      	str	r5, [sp, #32]
   13616:	f7ff b9ab 	b.w	12970 <_vfiprintf_r+0x260>
   1361a:	ee18 1a10 	vmov	r1, s16
   1361e:	aa18      	add	r2, sp, #96	; 0x60
   13620:	4658      	mov	r0, fp
   13622:	f7ff f839 	bl	12698 <__sprint_r.part.0>
   13626:	2800      	cmp	r0, #0
   13628:	f43f aa36 	beq.w	12a98 <_vfiprintf_r+0x388>
   1362c:	f7ff ba4d 	b.w	12aca <_vfiprintf_r+0x3ba>
   13630:	9819      	ldr	r0, [sp, #100]	; 0x64
   13632:	3001      	adds	r0, #1
   13634:	e57a      	b.n	1312c <_vfiprintf_r+0xa1c>
   13636:	468c      	mov	ip, r1
   13638:	e46e      	b.n	12f18 <_vfiprintf_r+0x808>
   1363a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1363c:	07d9      	lsls	r1, r3, #31
   1363e:	d405      	bmi.n	1364c <_vfiprintf_r+0xf3c>
   13640:	89ab      	ldrh	r3, [r5, #12]
   13642:	059a      	lsls	r2, r3, #22
   13644:	d402      	bmi.n	1364c <_vfiprintf_r+0xf3c>
   13646:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13648:	f7f8 faa6 	bl	bb98 <__retarget_lock_release_recursive>
   1364c:	f04f 33ff 	mov.w	r3, #4294967295
   13650:	9305      	str	r3, [sp, #20]
   13652:	f7ff ba49 	b.w	12ae8 <_vfiprintf_r+0x3d8>
   13656:	ee18 2a10 	vmov	r2, s16
   1365a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1365e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13662:	8193      	strh	r3, [r2, #12]
   13664:	f7ff ba35 	b.w	12ad2 <_vfiprintf_r+0x3c2>
   13668:	9c07      	ldr	r4, [sp, #28]
   1366a:	9704      	str	r7, [sp, #16]
   1366c:	e746      	b.n	134fc <_vfiprintf_r+0xdec>
   1366e:	9b07      	ldr	r3, [sp, #28]
   13670:	f898 1001 	ldrb.w	r1, [r8, #1]
   13674:	f853 7b04 	ldr.w	r7, [r3], #4
   13678:	9307      	str	r3, [sp, #28]
   1367a:	4690      	mov	r8, r2
   1367c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   13680:	f7ff b8b9 	b.w	127f6 <_vfiprintf_r+0xe6>
   13684:	ee18 2a10 	vmov	r2, s16
   13688:	8993      	ldrh	r3, [r2, #12]
   1368a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1368e:	8193      	strh	r3, [r2, #12]
   13690:	f7ff ba15 	b.w	12abe <_vfiprintf_r+0x3ae>
   13694:	cccccccd 	.word	0xcccccccd
   13698:	20000c40 	.word	0x20000c40

0001369c <__sbprintf>:
   1369c:	b570      	push	{r4, r5, r6, lr}
   1369e:	460c      	mov	r4, r1
   136a0:	8989      	ldrh	r1, [r1, #12]
   136a2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   136a6:	f021 0102 	bic.w	r1, r1, #2
   136aa:	f8ad 1014 	strh.w	r1, [sp, #20]
   136ae:	6e61      	ldr	r1, [r4, #100]	; 0x64
   136b0:	911b      	str	r1, [sp, #108]	; 0x6c
   136b2:	89e1      	ldrh	r1, [r4, #14]
   136b4:	f8ad 1016 	strh.w	r1, [sp, #22]
   136b8:	69e1      	ldr	r1, [r4, #28]
   136ba:	9109      	str	r1, [sp, #36]	; 0x24
   136bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   136be:	910b      	str	r1, [sp, #44]	; 0x2c
   136c0:	a91c      	add	r1, sp, #112	; 0x70
   136c2:	9102      	str	r1, [sp, #8]
   136c4:	9106      	str	r1, [sp, #24]
   136c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   136ca:	4606      	mov	r6, r0
   136cc:	9104      	str	r1, [sp, #16]
   136ce:	9107      	str	r1, [sp, #28]
   136d0:	a818      	add	r0, sp, #96	; 0x60
   136d2:	2100      	movs	r1, #0
   136d4:	e9cd 3200 	strd	r3, r2, [sp]
   136d8:	9108      	str	r1, [sp, #32]
   136da:	f7f8 fa57 	bl	bb8c <__retarget_lock_init_recursive>
   136de:	e9dd 3200 	ldrd	r3, r2, [sp]
   136e2:	a902      	add	r1, sp, #8
   136e4:	4630      	mov	r0, r6
   136e6:	f7ff f813 	bl	12710 <_vfiprintf_r>
   136ea:	1e05      	subs	r5, r0, #0
   136ec:	db07      	blt.n	136fe <__sbprintf+0x62>
   136ee:	a902      	add	r1, sp, #8
   136f0:	4630      	mov	r0, r6
   136f2:	f7fd fad3 	bl	10c9c <_fflush_r>
   136f6:	2800      	cmp	r0, #0
   136f8:	bf18      	it	ne
   136fa:	f04f 35ff 	movne.w	r5, #4294967295
   136fe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   13702:	065b      	lsls	r3, r3, #25
   13704:	d503      	bpl.n	1370e <__sbprintf+0x72>
   13706:	89a3      	ldrh	r3, [r4, #12]
   13708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1370c:	81a3      	strh	r3, [r4, #12]
   1370e:	9818      	ldr	r0, [sp, #96]	; 0x60
   13710:	f7f8 fa3e 	bl	bb90 <__retarget_lock_close_recursive>
   13714:	4628      	mov	r0, r5
   13716:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   1371a:	bd70      	pop	{r4, r5, r6, pc}

0001371c <__sfvwrite_r>:
   1371c:	6893      	ldr	r3, [r2, #8]
   1371e:	2b00      	cmp	r3, #0
   13720:	f000 8085 	beq.w	1382e <__sfvwrite_r+0x112>
   13724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13728:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1372c:	460c      	mov	r4, r1
   1372e:	0719      	lsls	r1, r3, #28
   13730:	4680      	mov	r8, r0
   13732:	b083      	sub	sp, #12
   13734:	4617      	mov	r7, r2
   13736:	b298      	uxth	r0, r3
   13738:	d525      	bpl.n	13786 <__sfvwrite_r+0x6a>
   1373a:	6923      	ldr	r3, [r4, #16]
   1373c:	b31b      	cbz	r3, 13786 <__sfvwrite_r+0x6a>
   1373e:	f010 0302 	ands.w	r3, r0, #2
   13742:	683d      	ldr	r5, [r7, #0]
   13744:	d02d      	beq.n	137a2 <__sfvwrite_r+0x86>
   13746:	f04f 0a00 	mov.w	sl, #0
   1374a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 13a0c <__sfvwrite_r+0x2f0>
   1374e:	4656      	mov	r6, sl
   13750:	46b9      	mov	r9, r7
   13752:	455e      	cmp	r6, fp
   13754:	4633      	mov	r3, r6
   13756:	4652      	mov	r2, sl
   13758:	bf28      	it	cs
   1375a:	465b      	movcs	r3, fp
   1375c:	4640      	mov	r0, r8
   1375e:	2e00      	cmp	r6, #0
   13760:	d052      	beq.n	13808 <__sfvwrite_r+0xec>
   13762:	69e1      	ldr	r1, [r4, #28]
   13764:	6a67      	ldr	r7, [r4, #36]	; 0x24
   13766:	47b8      	blx	r7
   13768:	2800      	cmp	r0, #0
   1376a:	dd56      	ble.n	1381a <__sfvwrite_r+0xfe>
   1376c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   13770:	1a1b      	subs	r3, r3, r0
   13772:	4482      	add	sl, r0
   13774:	1a36      	subs	r6, r6, r0
   13776:	f8c9 3008 	str.w	r3, [r9, #8]
   1377a:	2b00      	cmp	r3, #0
   1377c:	d1e9      	bne.n	13752 <__sfvwrite_r+0x36>
   1377e:	2000      	movs	r0, #0
   13780:	b003      	add	sp, #12
   13782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13786:	4621      	mov	r1, r4
   13788:	4640      	mov	r0, r8
   1378a:	f000 f97d 	bl	13a88 <__swsetup_r>
   1378e:	2800      	cmp	r0, #0
   13790:	f040 8138 	bne.w	13a04 <__sfvwrite_r+0x2e8>
   13794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13798:	683d      	ldr	r5, [r7, #0]
   1379a:	b298      	uxth	r0, r3
   1379c:	f010 0302 	ands.w	r3, r0, #2
   137a0:	d1d1      	bne.n	13746 <__sfvwrite_r+0x2a>
   137a2:	f010 0901 	ands.w	r9, r0, #1
   137a6:	d144      	bne.n	13832 <__sfvwrite_r+0x116>
   137a8:	464e      	mov	r6, r9
   137aa:	9700      	str	r7, [sp, #0]
   137ac:	b346      	cbz	r6, 13800 <__sfvwrite_r+0xe4>
   137ae:	0582      	lsls	r2, r0, #22
   137b0:	f8d4 b008 	ldr.w	fp, [r4, #8]
   137b4:	f140 8085 	bpl.w	138c2 <__sfvwrite_r+0x1a6>
   137b8:	45b3      	cmp	fp, r6
   137ba:	465a      	mov	r2, fp
   137bc:	f200 80b4 	bhi.w	13928 <__sfvwrite_r+0x20c>
   137c0:	f410 6f90 	tst.w	r0, #1152	; 0x480
   137c4:	f040 80c1 	bne.w	1394a <__sfvwrite_r+0x22e>
   137c8:	6820      	ldr	r0, [r4, #0]
   137ca:	9201      	str	r2, [sp, #4]
   137cc:	4649      	mov	r1, r9
   137ce:	f7f8 f801 	bl	b7d4 <memmove>
   137d2:	68a3      	ldr	r3, [r4, #8]
   137d4:	9a01      	ldr	r2, [sp, #4]
   137d6:	eba3 010b 	sub.w	r1, r3, fp
   137da:	6823      	ldr	r3, [r4, #0]
   137dc:	60a1      	str	r1, [r4, #8]
   137de:	4413      	add	r3, r2
   137e0:	46b2      	mov	sl, r6
   137e2:	6023      	str	r3, [r4, #0]
   137e4:	2600      	movs	r6, #0
   137e6:	9a00      	ldr	r2, [sp, #0]
   137e8:	6893      	ldr	r3, [r2, #8]
   137ea:	eba3 030a 	sub.w	r3, r3, sl
   137ee:	44d1      	add	r9, sl
   137f0:	6093      	str	r3, [r2, #8]
   137f2:	2b00      	cmp	r3, #0
   137f4:	d0c3      	beq.n	1377e <__sfvwrite_r+0x62>
   137f6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   137fa:	b280      	uxth	r0, r0
   137fc:	2e00      	cmp	r6, #0
   137fe:	d1d6      	bne.n	137ae <__sfvwrite_r+0x92>
   13800:	e9d5 9600 	ldrd	r9, r6, [r5]
   13804:	3508      	adds	r5, #8
   13806:	e7d1      	b.n	137ac <__sfvwrite_r+0x90>
   13808:	e9d5 a600 	ldrd	sl, r6, [r5]
   1380c:	3508      	adds	r5, #8
   1380e:	e7a0      	b.n	13752 <__sfvwrite_r+0x36>
   13810:	4621      	mov	r1, r4
   13812:	4640      	mov	r0, r8
   13814:	f7fd fa42 	bl	10c9c <_fflush_r>
   13818:	b388      	cbz	r0, 1387e <__sfvwrite_r+0x162>
   1381a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1381e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13822:	f04f 30ff 	mov.w	r0, #4294967295
   13826:	81a3      	strh	r3, [r4, #12]
   13828:	b003      	add	sp, #12
   1382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1382e:	2000      	movs	r0, #0
   13830:	4770      	bx	lr
   13832:	461e      	mov	r6, r3
   13834:	46ba      	mov	sl, r7
   13836:	4699      	mov	r9, r3
   13838:	4618      	mov	r0, r3
   1383a:	9500      	str	r5, [sp, #0]
   1383c:	461f      	mov	r7, r3
   1383e:	b366      	cbz	r6, 1389a <__sfvwrite_r+0x17e>
   13840:	2800      	cmp	r0, #0
   13842:	d032      	beq.n	138aa <__sfvwrite_r+0x18e>
   13844:	464a      	mov	r2, r9
   13846:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   1384a:	6820      	ldr	r0, [r4, #0]
   1384c:	68a5      	ldr	r5, [r4, #8]
   1384e:	42b2      	cmp	r2, r6
   13850:	bf28      	it	cs
   13852:	4632      	movcs	r2, r6
   13854:	4288      	cmp	r0, r1
   13856:	d904      	bls.n	13862 <__sfvwrite_r+0x146>
   13858:	eb05 0b03 	add.w	fp, r5, r3
   1385c:	455a      	cmp	r2, fp
   1385e:	f300 80a7 	bgt.w	139b0 <__sfvwrite_r+0x294>
   13862:	4293      	cmp	r3, r2
   13864:	dc64      	bgt.n	13930 <__sfvwrite_r+0x214>
   13866:	69e1      	ldr	r1, [r4, #28]
   13868:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1386a:	463a      	mov	r2, r7
   1386c:	4640      	mov	r0, r8
   1386e:	47a8      	blx	r5
   13870:	f1b0 0b00 	subs.w	fp, r0, #0
   13874:	ddd1      	ble.n	1381a <__sfvwrite_r+0xfe>
   13876:	ebb9 090b 	subs.w	r9, r9, fp
   1387a:	d0c9      	beq.n	13810 <__sfvwrite_r+0xf4>
   1387c:	2001      	movs	r0, #1
   1387e:	f8da 3008 	ldr.w	r3, [sl, #8]
   13882:	eba3 030b 	sub.w	r3, r3, fp
   13886:	445f      	add	r7, fp
   13888:	eba6 060b 	sub.w	r6, r6, fp
   1388c:	f8ca 3008 	str.w	r3, [sl, #8]
   13890:	2b00      	cmp	r3, #0
   13892:	f43f af74 	beq.w	1377e <__sfvwrite_r+0x62>
   13896:	2e00      	cmp	r6, #0
   13898:	d1d2      	bne.n	13840 <__sfvwrite_r+0x124>
   1389a:	9a00      	ldr	r2, [sp, #0]
   1389c:	6856      	ldr	r6, [r2, #4]
   1389e:	4613      	mov	r3, r2
   138a0:	3208      	adds	r2, #8
   138a2:	9200      	str	r2, [sp, #0]
   138a4:	2e00      	cmp	r6, #0
   138a6:	d0f8      	beq.n	1389a <__sfvwrite_r+0x17e>
   138a8:	681f      	ldr	r7, [r3, #0]
   138aa:	4632      	mov	r2, r6
   138ac:	210a      	movs	r1, #10
   138ae:	4638      	mov	r0, r7
   138b0:	f7f8 fb46 	bl	bf40 <memchr>
   138b4:	2800      	cmp	r0, #0
   138b6:	f000 809c 	beq.w	139f2 <__sfvwrite_r+0x2d6>
   138ba:	3001      	adds	r0, #1
   138bc:	eba0 0907 	sub.w	r9, r0, r7
   138c0:	e7c0      	b.n	13844 <__sfvwrite_r+0x128>
   138c2:	6820      	ldr	r0, [r4, #0]
   138c4:	6923      	ldr	r3, [r4, #16]
   138c6:	4298      	cmp	r0, r3
   138c8:	d816      	bhi.n	138f8 <__sfvwrite_r+0x1dc>
   138ca:	6962      	ldr	r2, [r4, #20]
   138cc:	42b2      	cmp	r2, r6
   138ce:	d813      	bhi.n	138f8 <__sfvwrite_r+0x1dc>
   138d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   138d4:	42b3      	cmp	r3, r6
   138d6:	bf28      	it	cs
   138d8:	4633      	movcs	r3, r6
   138da:	69e1      	ldr	r1, [r4, #28]
   138dc:	fb93 f3f2 	sdiv	r3, r3, r2
   138e0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   138e2:	fb02 f303 	mul.w	r3, r2, r3
   138e6:	4640      	mov	r0, r8
   138e8:	464a      	mov	r2, r9
   138ea:	47b8      	blx	r7
   138ec:	f1b0 0a00 	subs.w	sl, r0, #0
   138f0:	dd93      	ble.n	1381a <__sfvwrite_r+0xfe>
   138f2:	eba6 060a 	sub.w	r6, r6, sl
   138f6:	e776      	b.n	137e6 <__sfvwrite_r+0xca>
   138f8:	45b3      	cmp	fp, r6
   138fa:	46da      	mov	sl, fp
   138fc:	bf28      	it	cs
   138fe:	46b2      	movcs	sl, r6
   13900:	4652      	mov	r2, sl
   13902:	4649      	mov	r1, r9
   13904:	f7f7 ff66 	bl	b7d4 <memmove>
   13908:	68a3      	ldr	r3, [r4, #8]
   1390a:	6822      	ldr	r2, [r4, #0]
   1390c:	eba3 030a 	sub.w	r3, r3, sl
   13910:	4452      	add	r2, sl
   13912:	60a3      	str	r3, [r4, #8]
   13914:	6022      	str	r2, [r4, #0]
   13916:	2b00      	cmp	r3, #0
   13918:	d1eb      	bne.n	138f2 <__sfvwrite_r+0x1d6>
   1391a:	4621      	mov	r1, r4
   1391c:	4640      	mov	r0, r8
   1391e:	f7fd f9bd 	bl	10c9c <_fflush_r>
   13922:	2800      	cmp	r0, #0
   13924:	d0e5      	beq.n	138f2 <__sfvwrite_r+0x1d6>
   13926:	e778      	b.n	1381a <__sfvwrite_r+0xfe>
   13928:	6820      	ldr	r0, [r4, #0]
   1392a:	46b3      	mov	fp, r6
   1392c:	4632      	mov	r2, r6
   1392e:	e74c      	b.n	137ca <__sfvwrite_r+0xae>
   13930:	4639      	mov	r1, r7
   13932:	9201      	str	r2, [sp, #4]
   13934:	f7f7 ff4e 	bl	b7d4 <memmove>
   13938:	9a01      	ldr	r2, [sp, #4]
   1393a:	68a3      	ldr	r3, [r4, #8]
   1393c:	1a9b      	subs	r3, r3, r2
   1393e:	60a3      	str	r3, [r4, #8]
   13940:	6823      	ldr	r3, [r4, #0]
   13942:	4413      	add	r3, r2
   13944:	6023      	str	r3, [r4, #0]
   13946:	4693      	mov	fp, r2
   13948:	e795      	b.n	13876 <__sfvwrite_r+0x15a>
   1394a:	6823      	ldr	r3, [r4, #0]
   1394c:	6921      	ldr	r1, [r4, #16]
   1394e:	eba3 0b01 	sub.w	fp, r3, r1
   13952:	6963      	ldr	r3, [r4, #20]
   13954:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   13958:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   1395c:	f10b 0301 	add.w	r3, fp, #1
   13960:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   13964:	4433      	add	r3, r6
   13966:	4553      	cmp	r3, sl
   13968:	4652      	mov	r2, sl
   1396a:	bf84      	itt	hi
   1396c:	469a      	movhi	sl, r3
   1396e:	4652      	movhi	r2, sl
   13970:	0543      	lsls	r3, r0, #21
   13972:	d52c      	bpl.n	139ce <__sfvwrite_r+0x2b2>
   13974:	4611      	mov	r1, r2
   13976:	4640      	mov	r0, r8
   13978:	f7f6 f880 	bl	9a7c <_malloc_r>
   1397c:	2800      	cmp	r0, #0
   1397e:	d03b      	beq.n	139f8 <__sfvwrite_r+0x2dc>
   13980:	465a      	mov	r2, fp
   13982:	6921      	ldr	r1, [r4, #16]
   13984:	9001      	str	r0, [sp, #4]
   13986:	f7f4 fad5 	bl	7f34 <memcpy>
   1398a:	89a2      	ldrh	r2, [r4, #12]
   1398c:	9b01      	ldr	r3, [sp, #4]
   1398e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   13992:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13996:	81a2      	strh	r2, [r4, #12]
   13998:	eb03 000b 	add.w	r0, r3, fp
   1399c:	6123      	str	r3, [r4, #16]
   1399e:	ebaa 030b 	sub.w	r3, sl, fp
   139a2:	f8c4 a014 	str.w	sl, [r4, #20]
   139a6:	60a3      	str	r3, [r4, #8]
   139a8:	6020      	str	r0, [r4, #0]
   139aa:	46b3      	mov	fp, r6
   139ac:	4632      	mov	r2, r6
   139ae:	e70c      	b.n	137ca <__sfvwrite_r+0xae>
   139b0:	4639      	mov	r1, r7
   139b2:	465a      	mov	r2, fp
   139b4:	f7f7 ff0e 	bl	b7d4 <memmove>
   139b8:	6823      	ldr	r3, [r4, #0]
   139ba:	445b      	add	r3, fp
   139bc:	6023      	str	r3, [r4, #0]
   139be:	4621      	mov	r1, r4
   139c0:	4640      	mov	r0, r8
   139c2:	f7fd f96b 	bl	10c9c <_fflush_r>
   139c6:	2800      	cmp	r0, #0
   139c8:	f43f af55 	beq.w	13876 <__sfvwrite_r+0x15a>
   139cc:	e725      	b.n	1381a <__sfvwrite_r+0xfe>
   139ce:	4640      	mov	r0, r8
   139d0:	f7f6 fb1c 	bl	a00c <_realloc_r>
   139d4:	4603      	mov	r3, r0
   139d6:	2800      	cmp	r0, #0
   139d8:	d1de      	bne.n	13998 <__sfvwrite_r+0x27c>
   139da:	6921      	ldr	r1, [r4, #16]
   139dc:	4640      	mov	r0, r8
   139de:	f7f8 fc21 	bl	c224 <_free_r>
   139e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   139e6:	220c      	movs	r2, #12
   139e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   139ec:	f8c8 2000 	str.w	r2, [r8]
   139f0:	e715      	b.n	1381e <__sfvwrite_r+0x102>
   139f2:	1c72      	adds	r2, r6, #1
   139f4:	4691      	mov	r9, r2
   139f6:	e726      	b.n	13846 <__sfvwrite_r+0x12a>
   139f8:	220c      	movs	r2, #12
   139fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   139fe:	f8c8 2000 	str.w	r2, [r8]
   13a02:	e70c      	b.n	1381e <__sfvwrite_r+0x102>
   13a04:	f04f 30ff 	mov.w	r0, #4294967295
   13a08:	e6ba      	b.n	13780 <__sfvwrite_r+0x64>
   13a0a:	bf00      	nop
   13a0c:	7ffffc00 	.word	0x7ffffc00

00013a10 <__submore>:
   13a10:	f101 0340 	add.w	r3, r1, #64	; 0x40
   13a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a18:	460c      	mov	r4, r1
   13a1a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   13a1c:	4299      	cmp	r1, r3
   13a1e:	d014      	beq.n	13a4a <__submore+0x3a>
   13a20:	6b66      	ldr	r6, [r4, #52]	; 0x34
   13a22:	0077      	lsls	r7, r6, #1
   13a24:	463a      	mov	r2, r7
   13a26:	f7f6 faf1 	bl	a00c <_realloc_r>
   13a2a:	4605      	mov	r5, r0
   13a2c:	b340      	cbz	r0, 13a80 <__submore+0x70>
   13a2e:	eb00 0806 	add.w	r8, r0, r6
   13a32:	4601      	mov	r1, r0
   13a34:	4632      	mov	r2, r6
   13a36:	4640      	mov	r0, r8
   13a38:	f7f4 fa7c 	bl	7f34 <memcpy>
   13a3c:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   13a40:	f8c4 8000 	str.w	r8, [r4]
   13a44:	2000      	movs	r0, #0
   13a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13a4e:	f7f6 f815 	bl	9a7c <_malloc_r>
   13a52:	b1a8      	cbz	r0, 13a80 <__submore+0x70>
   13a54:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   13a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13a5c:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   13a60:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   13a64:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   13a68:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   13a6c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   13a70:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   13a74:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   13a78:	6023      	str	r3, [r4, #0]
   13a7a:	2000      	movs	r0, #0
   13a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a80:	f04f 30ff 	mov.w	r0, #4294967295
   13a84:	e7df      	b.n	13a46 <__submore+0x36>
   13a86:	bf00      	nop

00013a88 <__swsetup_r>:
   13a88:	b538      	push	{r3, r4, r5, lr}
   13a8a:	4b31      	ldr	r3, [pc, #196]	; (13b50 <__swsetup_r+0xc8>)
   13a8c:	681b      	ldr	r3, [r3, #0]
   13a8e:	4605      	mov	r5, r0
   13a90:	460c      	mov	r4, r1
   13a92:	b113      	cbz	r3, 13a9a <__swsetup_r+0x12>
   13a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13a96:	2a00      	cmp	r2, #0
   13a98:	d04e      	beq.n	13b38 <__swsetup_r+0xb0>
   13a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13a9e:	0718      	lsls	r0, r3, #28
   13aa0:	b29a      	uxth	r2, r3
   13aa2:	d51c      	bpl.n	13ade <__swsetup_r+0x56>
   13aa4:	6921      	ldr	r1, [r4, #16]
   13aa6:	b329      	cbz	r1, 13af4 <__swsetup_r+0x6c>
   13aa8:	f012 0001 	ands.w	r0, r2, #1
   13aac:	d007      	beq.n	13abe <__swsetup_r+0x36>
   13aae:	2000      	movs	r0, #0
   13ab0:	60a0      	str	r0, [r4, #8]
   13ab2:	6960      	ldr	r0, [r4, #20]
   13ab4:	4240      	negs	r0, r0
   13ab6:	61a0      	str	r0, [r4, #24]
   13ab8:	b139      	cbz	r1, 13aca <__swsetup_r+0x42>
   13aba:	2000      	movs	r0, #0
   13abc:	bd38      	pop	{r3, r4, r5, pc}
   13abe:	0795      	lsls	r5, r2, #30
   13ac0:	bf58      	it	pl
   13ac2:	6960      	ldrpl	r0, [r4, #20]
   13ac4:	60a0      	str	r0, [r4, #8]
   13ac6:	2900      	cmp	r1, #0
   13ac8:	d1f7      	bne.n	13aba <__swsetup_r+0x32>
   13aca:	0612      	lsls	r2, r2, #24
   13acc:	bf58      	it	pl
   13ace:	4608      	movpl	r0, r1
   13ad0:	d5f4      	bpl.n	13abc <__swsetup_r+0x34>
   13ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13ad6:	81a3      	strh	r3, [r4, #12]
   13ad8:	f04f 30ff 	mov.w	r0, #4294967295
   13adc:	bd38      	pop	{r3, r4, r5, pc}
   13ade:	06d1      	lsls	r1, r2, #27
   13ae0:	d52e      	bpl.n	13b40 <__swsetup_r+0xb8>
   13ae2:	0752      	lsls	r2, r2, #29
   13ae4:	d414      	bmi.n	13b10 <__swsetup_r+0x88>
   13ae6:	6921      	ldr	r1, [r4, #16]
   13ae8:	f043 0308 	orr.w	r3, r3, #8
   13aec:	81a3      	strh	r3, [r4, #12]
   13aee:	b29a      	uxth	r2, r3
   13af0:	2900      	cmp	r1, #0
   13af2:	d1d9      	bne.n	13aa8 <__swsetup_r+0x20>
   13af4:	f402 7020 	and.w	r0, r2, #640	; 0x280
   13af8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13afc:	d0d4      	beq.n	13aa8 <__swsetup_r+0x20>
   13afe:	4621      	mov	r1, r4
   13b00:	4628      	mov	r0, r5
   13b02:	f000 f977 	bl	13df4 <__smakebuf_r>
   13b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b0a:	6921      	ldr	r1, [r4, #16]
   13b0c:	b29a      	uxth	r2, r3
   13b0e:	e7cb      	b.n	13aa8 <__swsetup_r+0x20>
   13b10:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13b12:	b151      	cbz	r1, 13b2a <__swsetup_r+0xa2>
   13b14:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13b18:	4291      	cmp	r1, r2
   13b1a:	d004      	beq.n	13b26 <__swsetup_r+0x9e>
   13b1c:	4628      	mov	r0, r5
   13b1e:	f7f8 fb81 	bl	c224 <_free_r>
   13b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b26:	2200      	movs	r2, #0
   13b28:	6322      	str	r2, [r4, #48]	; 0x30
   13b2a:	6921      	ldr	r1, [r4, #16]
   13b2c:	2200      	movs	r2, #0
   13b2e:	e9c4 1200 	strd	r1, r2, [r4]
   13b32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13b36:	e7d7      	b.n	13ae8 <__swsetup_r+0x60>
   13b38:	4618      	mov	r0, r3
   13b3a:	f7f7 fcd3 	bl	b4e4 <__sinit>
   13b3e:	e7ac      	b.n	13a9a <__swsetup_r+0x12>
   13b40:	2209      	movs	r2, #9
   13b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13b46:	602a      	str	r2, [r5, #0]
   13b48:	f04f 30ff 	mov.w	r0, #4294967295
   13b4c:	81a3      	strh	r3, [r4, #12]
   13b4e:	bd38      	pop	{r3, r4, r5, pc}
   13b50:	20008b50 	.word	0x20008b50

00013b54 <__fputwc>:
   13b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b58:	b082      	sub	sp, #8
   13b5a:	4682      	mov	sl, r0
   13b5c:	4688      	mov	r8, r1
   13b5e:	4614      	mov	r4, r2
   13b60:	f7f7 ff7e 	bl	ba60 <__locale_mb_cur_max>
   13b64:	2801      	cmp	r0, #1
   13b66:	d103      	bne.n	13b70 <__fputwc+0x1c>
   13b68:	f108 33ff 	add.w	r3, r8, #4294967295
   13b6c:	2bfe      	cmp	r3, #254	; 0xfe
   13b6e:	d936      	bls.n	13bde <__fputwc+0x8a>
   13b70:	f10d 0904 	add.w	r9, sp, #4
   13b74:	4642      	mov	r2, r8
   13b76:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   13b7a:	4649      	mov	r1, r9
   13b7c:	4650      	mov	r0, sl
   13b7e:	f7fe fb29 	bl	121d4 <_wcrtomb_r>
   13b82:	1c42      	adds	r2, r0, #1
   13b84:	4606      	mov	r6, r0
   13b86:	d032      	beq.n	13bee <__fputwc+0x9a>
   13b88:	b320      	cbz	r0, 13bd4 <__fputwc+0x80>
   13b8a:	f89d c004 	ldrb.w	ip, [sp, #4]
   13b8e:	2500      	movs	r5, #0
   13b90:	e009      	b.n	13ba6 <__fputwc+0x52>
   13b92:	6823      	ldr	r3, [r4, #0]
   13b94:	1c5a      	adds	r2, r3, #1
   13b96:	6022      	str	r2, [r4, #0]
   13b98:	f883 c000 	strb.w	ip, [r3]
   13b9c:	3501      	adds	r5, #1
   13b9e:	42b5      	cmp	r5, r6
   13ba0:	d218      	bcs.n	13bd4 <__fputwc+0x80>
   13ba2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   13ba6:	68a3      	ldr	r3, [r4, #8]
   13ba8:	3b01      	subs	r3, #1
   13baa:	2b00      	cmp	r3, #0
   13bac:	60a3      	str	r3, [r4, #8]
   13bae:	daf0      	bge.n	13b92 <__fputwc+0x3e>
   13bb0:	69a7      	ldr	r7, [r4, #24]
   13bb2:	42bb      	cmp	r3, r7
   13bb4:	4661      	mov	r1, ip
   13bb6:	4622      	mov	r2, r4
   13bb8:	4650      	mov	r0, sl
   13bba:	db02      	blt.n	13bc2 <__fputwc+0x6e>
   13bbc:	f1bc 0f0a 	cmp.w	ip, #10
   13bc0:	d1e7      	bne.n	13b92 <__fputwc+0x3e>
   13bc2:	f000 f983 	bl	13ecc <__swbuf_r>
   13bc6:	1c43      	adds	r3, r0, #1
   13bc8:	d1e8      	bne.n	13b9c <__fputwc+0x48>
   13bca:	4606      	mov	r6, r0
   13bcc:	4630      	mov	r0, r6
   13bce:	b002      	add	sp, #8
   13bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13bd4:	4646      	mov	r6, r8
   13bd6:	4630      	mov	r0, r6
   13bd8:	b002      	add	sp, #8
   13bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13bde:	fa5f fc88 	uxtb.w	ip, r8
   13be2:	f88d c004 	strb.w	ip, [sp, #4]
   13be6:	4606      	mov	r6, r0
   13be8:	f10d 0904 	add.w	r9, sp, #4
   13bec:	e7cf      	b.n	13b8e <__fputwc+0x3a>
   13bee:	89a3      	ldrh	r3, [r4, #12]
   13bf0:	4630      	mov	r0, r6
   13bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13bf6:	81a3      	strh	r3, [r4, #12]
   13bf8:	b002      	add	sp, #8
   13bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13bfe:	bf00      	nop

00013c00 <_fputwc_r>:
   13c00:	b530      	push	{r4, r5, lr}
   13c02:	6e53      	ldr	r3, [r2, #100]	; 0x64
   13c04:	f013 0f01 	tst.w	r3, #1
   13c08:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13c0c:	4614      	mov	r4, r2
   13c0e:	b083      	sub	sp, #12
   13c10:	4605      	mov	r5, r0
   13c12:	b29a      	uxth	r2, r3
   13c14:	d101      	bne.n	13c1a <_fputwc_r+0x1a>
   13c16:	0598      	lsls	r0, r3, #22
   13c18:	d51c      	bpl.n	13c54 <_fputwc_r+0x54>
   13c1a:	0490      	lsls	r0, r2, #18
   13c1c:	d406      	bmi.n	13c2c <_fputwc_r+0x2c>
   13c1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13c20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13c28:	81a3      	strh	r3, [r4, #12]
   13c2a:	6662      	str	r2, [r4, #100]	; 0x64
   13c2c:	4622      	mov	r2, r4
   13c2e:	4628      	mov	r0, r5
   13c30:	f7ff ff90 	bl	13b54 <__fputwc>
   13c34:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13c36:	07da      	lsls	r2, r3, #31
   13c38:	4605      	mov	r5, r0
   13c3a:	d402      	bmi.n	13c42 <_fputwc_r+0x42>
   13c3c:	89a3      	ldrh	r3, [r4, #12]
   13c3e:	059b      	lsls	r3, r3, #22
   13c40:	d502      	bpl.n	13c48 <_fputwc_r+0x48>
   13c42:	4628      	mov	r0, r5
   13c44:	b003      	add	sp, #12
   13c46:	bd30      	pop	{r4, r5, pc}
   13c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13c4a:	f7f7 ffa5 	bl	bb98 <__retarget_lock_release_recursive>
   13c4e:	4628      	mov	r0, r5
   13c50:	b003      	add	sp, #12
   13c52:	bd30      	pop	{r4, r5, pc}
   13c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13c56:	9101      	str	r1, [sp, #4]
   13c58:	f7f7 ff9c 	bl	bb94 <__retarget_lock_acquire_recursive>
   13c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c60:	9901      	ldr	r1, [sp, #4]
   13c62:	b29a      	uxth	r2, r3
   13c64:	e7d9      	b.n	13c1a <_fputwc_r+0x1a>
   13c66:	bf00      	nop

00013c68 <_wcsnrtombs_l>:
   13c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c6c:	b08b      	sub	sp, #44	; 0x2c
   13c6e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   13c72:	9f14      	ldr	r7, [sp, #80]	; 0x50
   13c74:	9103      	str	r1, [sp, #12]
   13c76:	4681      	mov	r9, r0
   13c78:	9205      	str	r2, [sp, #20]
   13c7a:	461e      	mov	r6, r3
   13c7c:	f1b8 0f00 	cmp.w	r8, #0
   13c80:	d05c      	beq.n	13d3c <_wcsnrtombs_l+0xd4>
   13c82:	9b03      	ldr	r3, [sp, #12]
   13c84:	2b00      	cmp	r3, #0
   13c86:	d05e      	beq.n	13d46 <_wcsnrtombs_l+0xde>
   13c88:	9b05      	ldr	r3, [sp, #20]
   13c8a:	681d      	ldr	r5, [r3, #0]
   13c8c:	2f00      	cmp	r7, #0
   13c8e:	d06a      	beq.n	13d66 <_wcsnrtombs_l+0xfe>
   13c90:	1e74      	subs	r4, r6, #1
   13c92:	b34e      	cbz	r6, 13ce8 <_wcsnrtombs_l+0x80>
   13c94:	9b03      	ldr	r3, [sp, #12]
   13c96:	9304      	str	r3, [sp, #16]
   13c98:	3d04      	subs	r5, #4
   13c9a:	2600      	movs	r6, #0
   13c9c:	9501      	str	r5, [sp, #4]
   13c9e:	e00b      	b.n	13cb8 <_wcsnrtombs_l+0x50>
   13ca0:	9b03      	ldr	r3, [sp, #12]
   13ca2:	bb2b      	cbnz	r3, 13cf0 <_wcsnrtombs_l+0x88>
   13ca4:	9b01      	ldr	r3, [sp, #4]
   13ca6:	681a      	ldr	r2, [r3, #0]
   13ca8:	2a00      	cmp	r2, #0
   13caa:	d03a      	beq.n	13d22 <_wcsnrtombs_l+0xba>
   13cac:	45bc      	cmp	ip, r7
   13cae:	d25c      	bcs.n	13d6a <_wcsnrtombs_l+0x102>
   13cb0:	3c01      	subs	r4, #1
   13cb2:	1c63      	adds	r3, r4, #1
   13cb4:	4666      	mov	r6, ip
   13cb6:	d017      	beq.n	13ce8 <_wcsnrtombs_l+0x80>
   13cb8:	f8d8 3000 	ldr.w	r3, [r8]
   13cbc:	9302      	str	r3, [sp, #8]
   13cbe:	9b01      	ldr	r3, [sp, #4]
   13cc0:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   13cc4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13cc8:	9301      	str	r3, [sp, #4]
   13cca:	a907      	add	r1, sp, #28
   13ccc:	4643      	mov	r3, r8
   13cce:	4648      	mov	r0, r9
   13cd0:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13cd4:	47a8      	blx	r5
   13cd6:	1c42      	adds	r2, r0, #1
   13cd8:	d03a      	beq.n	13d50 <_wcsnrtombs_l+0xe8>
   13cda:	eb00 0c06 	add.w	ip, r0, r6
   13cde:	45bc      	cmp	ip, r7
   13ce0:	d9de      	bls.n	13ca0 <_wcsnrtombs_l+0x38>
   13ce2:	9b02      	ldr	r3, [sp, #8]
   13ce4:	e9c8 3b00 	strd	r3, fp, [r8]
   13ce8:	4630      	mov	r0, r6
   13cea:	b00b      	add	sp, #44	; 0x2c
   13cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cf0:	2800      	cmp	r0, #0
   13cf2:	dd0e      	ble.n	13d12 <_wcsnrtombs_l+0xaa>
   13cf4:	9b04      	ldr	r3, [sp, #16]
   13cf6:	9d01      	ldr	r5, [sp, #4]
   13cf8:	4418      	add	r0, r3
   13cfa:	1e5a      	subs	r2, r3, #1
   13cfc:	a907      	add	r1, sp, #28
   13cfe:	f100 3eff 	add.w	lr, r0, #4294967295
   13d02:	f811 3b01 	ldrb.w	r3, [r1], #1
   13d06:	f802 3f01 	strb.w	r3, [r2, #1]!
   13d0a:	4572      	cmp	r2, lr
   13d0c:	d1f9      	bne.n	13d02 <_wcsnrtombs_l+0x9a>
   13d0e:	9501      	str	r5, [sp, #4]
   13d10:	9004      	str	r0, [sp, #16]
   13d12:	9b05      	ldr	r3, [sp, #20]
   13d14:	681a      	ldr	r2, [r3, #0]
   13d16:	3204      	adds	r2, #4
   13d18:	601a      	str	r2, [r3, #0]
   13d1a:	9b01      	ldr	r3, [sp, #4]
   13d1c:	681a      	ldr	r2, [r3, #0]
   13d1e:	2a00      	cmp	r2, #0
   13d20:	d1c4      	bne.n	13cac <_wcsnrtombs_l+0x44>
   13d22:	9b03      	ldr	r3, [sp, #12]
   13d24:	b10b      	cbz	r3, 13d2a <_wcsnrtombs_l+0xc2>
   13d26:	9b05      	ldr	r3, [sp, #20]
   13d28:	601a      	str	r2, [r3, #0]
   13d2a:	f10c 36ff 	add.w	r6, ip, #4294967295
   13d2e:	2200      	movs	r2, #0
   13d30:	4630      	mov	r0, r6
   13d32:	f8c8 2000 	str.w	r2, [r8]
   13d36:	b00b      	add	sp, #44	; 0x2c
   13d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d3c:	9b03      	ldr	r3, [sp, #12]
   13d3e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   13d42:	2b00      	cmp	r3, #0
   13d44:	d1a0      	bne.n	13c88 <_wcsnrtombs_l+0x20>
   13d46:	9b05      	ldr	r3, [sp, #20]
   13d48:	f04f 37ff 	mov.w	r7, #4294967295
   13d4c:	681d      	ldr	r5, [r3, #0]
   13d4e:	e79f      	b.n	13c90 <_wcsnrtombs_l+0x28>
   13d50:	4606      	mov	r6, r0
   13d52:	218a      	movs	r1, #138	; 0x8a
   13d54:	2200      	movs	r2, #0
   13d56:	4630      	mov	r0, r6
   13d58:	f8c9 1000 	str.w	r1, [r9]
   13d5c:	f8c8 2000 	str.w	r2, [r8]
   13d60:	b00b      	add	sp, #44	; 0x2c
   13d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d66:	463e      	mov	r6, r7
   13d68:	e7be      	b.n	13ce8 <_wcsnrtombs_l+0x80>
   13d6a:	4666      	mov	r6, ip
   13d6c:	e7bc      	b.n	13ce8 <_wcsnrtombs_l+0x80>
   13d6e:	bf00      	nop

00013d70 <_wcsnrtombs_r>:
   13d70:	b510      	push	{r4, lr}
   13d72:	b084      	sub	sp, #16
   13d74:	4c05      	ldr	r4, [pc, #20]	; (13d8c <_wcsnrtombs_r+0x1c>)
   13d76:	9806      	ldr	r0, [sp, #24]
   13d78:	9000      	str	r0, [sp, #0]
   13d7a:	9807      	ldr	r0, [sp, #28]
   13d7c:	9001      	str	r0, [sp, #4]
   13d7e:	4804      	ldr	r0, [pc, #16]	; (13d90 <_wcsnrtombs_r+0x20>)
   13d80:	6800      	ldr	r0, [r0, #0]
   13d82:	9402      	str	r4, [sp, #8]
   13d84:	f7ff ff70 	bl	13c68 <_wcsnrtombs_l>
   13d88:	b004      	add	sp, #16
   13d8a:	bd10      	pop	{r4, pc}
   13d8c:	200085c8 	.word	0x200085c8
   13d90:	20008b50 	.word	0x20008b50

00013d94 <category>:
   13d94:	4b15      	ldr	r3, [pc, #84]	; (13dec <category+0x58>)
   13d96:	4298      	cmp	r0, r3
   13d98:	d823      	bhi.n	13de2 <category+0x4e>
   13d9a:	b570      	push	{r4, r5, r6, lr}
   13d9c:	4e14      	ldr	r6, [pc, #80]	; (13df0 <category+0x5c>)
   13d9e:	f04f 0e00 	mov.w	lr, #0
   13da2:	f640 04db 	movw	r4, #2267	; 0x8db
   13da6:	e003      	b.n	13db0 <category+0x1c>
   13da8:	f102 0e01 	add.w	lr, r2, #1
   13dac:	45a6      	cmp	lr, r4
   13dae:	dc16      	bgt.n	13dde <category+0x4a>
   13db0:	eb04 020e 	add.w	r2, r4, lr
   13db4:	f022 0301 	bic.w	r3, r2, #1
   13db8:	eb03 0362 	add.w	r3, r3, r2, asr #1
   13dbc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   13dc0:	1052      	asrs	r2, r2, #1
   13dc2:	7859      	ldrb	r1, [r3, #1]
   13dc4:	885d      	ldrh	r5, [r3, #2]
   13dc6:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   13dca:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   13dce:	448c      	add	ip, r1
   13dd0:	4560      	cmp	r0, ip
   13dd2:	d8e9      	bhi.n	13da8 <category+0x14>
   13dd4:	4288      	cmp	r0, r1
   13dd6:	d206      	bcs.n	13de6 <category+0x52>
   13dd8:	1e54      	subs	r4, r2, #1
   13dda:	45a6      	cmp	lr, r4
   13ddc:	dde8      	ble.n	13db0 <category+0x1c>
   13dde:	20ff      	movs	r0, #255	; 0xff
   13de0:	bd70      	pop	{r4, r5, r6, pc}
   13de2:	20ff      	movs	r0, #255	; 0xff
   13de4:	4770      	bx	lr
   13de6:	7818      	ldrb	r0, [r3, #0]
   13de8:	bd70      	pop	{r4, r5, r6, pc}
   13dea:	bf00      	nop
   13dec:	000e01ef 	.word	0x000e01ef
   13df0:	200026e4 	.word	0x200026e4

00013df4 <__smakebuf_r>:
   13df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13df8:	898b      	ldrh	r3, [r1, #12]
   13dfa:	460c      	mov	r4, r1
   13dfc:	0799      	lsls	r1, r3, #30
   13dfe:	b096      	sub	sp, #88	; 0x58
   13e00:	d508      	bpl.n	13e14 <__smakebuf_r+0x20>
   13e02:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13e06:	2201      	movs	r2, #1
   13e08:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13e0c:	6023      	str	r3, [r4, #0]
   13e0e:	b016      	add	sp, #88	; 0x58
   13e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13e18:	2900      	cmp	r1, #0
   13e1a:	4606      	mov	r6, r0
   13e1c:	db25      	blt.n	13e6a <__smakebuf_r+0x76>
   13e1e:	466a      	mov	r2, sp
   13e20:	f000 f8ac 	bl	13f7c <_fstat_r>
   13e24:	2800      	cmp	r0, #0
   13e26:	db1f      	blt.n	13e68 <__smakebuf_r+0x74>
   13e28:	9d01      	ldr	r5, [sp, #4]
   13e2a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   13e2e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   13e32:	fab5 f585 	clz	r5, r5
   13e36:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13e3a:	096d      	lsrs	r5, r5, #5
   13e3c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   13e40:	4641      	mov	r1, r8
   13e42:	4630      	mov	r0, r6
   13e44:	f7f5 fe1a 	bl	9a7c <_malloc_r>
   13e48:	b1e0      	cbz	r0, 13e84 <__smakebuf_r+0x90>
   13e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13e4e:	f8c4 8014 	str.w	r8, [r4, #20]
   13e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13e56:	6020      	str	r0, [r4, #0]
   13e58:	6120      	str	r0, [r4, #16]
   13e5a:	81a3      	strh	r3, [r4, #12]
   13e5c:	bb35      	cbnz	r5, 13eac <__smakebuf_r+0xb8>
   13e5e:	433b      	orrs	r3, r7
   13e60:	81a3      	strh	r3, [r4, #12]
   13e62:	b016      	add	sp, #88	; 0x58
   13e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13e68:	89a3      	ldrh	r3, [r4, #12]
   13e6a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   13e6e:	d019      	beq.n	13ea4 <__smakebuf_r+0xb0>
   13e70:	f04f 0840 	mov.w	r8, #64	; 0x40
   13e74:	2500      	movs	r5, #0
   13e76:	4641      	mov	r1, r8
   13e78:	4630      	mov	r0, r6
   13e7a:	462f      	mov	r7, r5
   13e7c:	f7f5 fdfe 	bl	9a7c <_malloc_r>
   13e80:	2800      	cmp	r0, #0
   13e82:	d1e2      	bne.n	13e4a <__smakebuf_r+0x56>
   13e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13e88:	059a      	lsls	r2, r3, #22
   13e8a:	d4c0      	bmi.n	13e0e <__smakebuf_r+0x1a>
   13e8c:	f023 0303 	bic.w	r3, r3, #3
   13e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13e94:	f043 0302 	orr.w	r3, r3, #2
   13e98:	2101      	movs	r1, #1
   13e9a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13e9e:	81a3      	strh	r3, [r4, #12]
   13ea0:	6022      	str	r2, [r4, #0]
   13ea2:	e7b4      	b.n	13e0e <__smakebuf_r+0x1a>
   13ea4:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13ea8:	462f      	mov	r7, r5
   13eaa:	e7c9      	b.n	13e40 <__smakebuf_r+0x4c>
   13eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13eb0:	4630      	mov	r0, r6
   13eb2:	f000 f879 	bl	13fa8 <_isatty_r>
   13eb6:	b910      	cbnz	r0, 13ebe <__smakebuf_r+0xca>
   13eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13ebc:	e7cf      	b.n	13e5e <__smakebuf_r+0x6a>
   13ebe:	89a3      	ldrh	r3, [r4, #12]
   13ec0:	f023 0303 	bic.w	r3, r3, #3
   13ec4:	f043 0301 	orr.w	r3, r3, #1
   13ec8:	b21b      	sxth	r3, r3
   13eca:	e7c8      	b.n	13e5e <__smakebuf_r+0x6a>

00013ecc <__swbuf_r>:
   13ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ece:	460d      	mov	r5, r1
   13ed0:	4614      	mov	r4, r2
   13ed2:	4606      	mov	r6, r0
   13ed4:	b110      	cbz	r0, 13edc <__swbuf_r+0x10>
   13ed6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13ed8:	2b00      	cmp	r3, #0
   13eda:	d04c      	beq.n	13f76 <__swbuf_r+0xaa>
   13edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13ee0:	69a3      	ldr	r3, [r4, #24]
   13ee2:	60a3      	str	r3, [r4, #8]
   13ee4:	0717      	lsls	r7, r2, #28
   13ee6:	b290      	uxth	r0, r2
   13ee8:	d51b      	bpl.n	13f22 <__swbuf_r+0x56>
   13eea:	6923      	ldr	r3, [r4, #16]
   13eec:	b1cb      	cbz	r3, 13f22 <__swbuf_r+0x56>
   13eee:	b2ed      	uxtb	r5, r5
   13ef0:	0481      	lsls	r1, r0, #18
   13ef2:	462f      	mov	r7, r5
   13ef4:	d522      	bpl.n	13f3c <__swbuf_r+0x70>
   13ef6:	6822      	ldr	r2, [r4, #0]
   13ef8:	6961      	ldr	r1, [r4, #20]
   13efa:	1ad3      	subs	r3, r2, r3
   13efc:	4299      	cmp	r1, r3
   13efe:	dd29      	ble.n	13f54 <__swbuf_r+0x88>
   13f00:	3301      	adds	r3, #1
   13f02:	68a1      	ldr	r1, [r4, #8]
   13f04:	3901      	subs	r1, #1
   13f06:	60a1      	str	r1, [r4, #8]
   13f08:	1c51      	adds	r1, r2, #1
   13f0a:	6021      	str	r1, [r4, #0]
   13f0c:	7015      	strb	r5, [r2, #0]
   13f0e:	6962      	ldr	r2, [r4, #20]
   13f10:	429a      	cmp	r2, r3
   13f12:	d027      	beq.n	13f64 <__swbuf_r+0x98>
   13f14:	89a3      	ldrh	r3, [r4, #12]
   13f16:	07db      	lsls	r3, r3, #31
   13f18:	d501      	bpl.n	13f1e <__swbuf_r+0x52>
   13f1a:	2d0a      	cmp	r5, #10
   13f1c:	d022      	beq.n	13f64 <__swbuf_r+0x98>
   13f1e:	4638      	mov	r0, r7
   13f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13f22:	4621      	mov	r1, r4
   13f24:	4630      	mov	r0, r6
   13f26:	f7ff fdaf 	bl	13a88 <__swsetup_r>
   13f2a:	bb08      	cbnz	r0, 13f70 <__swbuf_r+0xa4>
   13f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13f30:	6923      	ldr	r3, [r4, #16]
   13f32:	b290      	uxth	r0, r2
   13f34:	b2ed      	uxtb	r5, r5
   13f36:	0481      	lsls	r1, r0, #18
   13f38:	462f      	mov	r7, r5
   13f3a:	d4dc      	bmi.n	13ef6 <__swbuf_r+0x2a>
   13f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13f40:	81a2      	strh	r2, [r4, #12]
   13f42:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13f44:	6961      	ldr	r1, [r4, #20]
   13f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   13f4a:	6662      	str	r2, [r4, #100]	; 0x64
   13f4c:	6822      	ldr	r2, [r4, #0]
   13f4e:	1ad3      	subs	r3, r2, r3
   13f50:	4299      	cmp	r1, r3
   13f52:	dcd5      	bgt.n	13f00 <__swbuf_r+0x34>
   13f54:	4621      	mov	r1, r4
   13f56:	4630      	mov	r0, r6
   13f58:	f7fc fea0 	bl	10c9c <_fflush_r>
   13f5c:	b940      	cbnz	r0, 13f70 <__swbuf_r+0xa4>
   13f5e:	6822      	ldr	r2, [r4, #0]
   13f60:	2301      	movs	r3, #1
   13f62:	e7ce      	b.n	13f02 <__swbuf_r+0x36>
   13f64:	4621      	mov	r1, r4
   13f66:	4630      	mov	r0, r6
   13f68:	f7fc fe98 	bl	10c9c <_fflush_r>
   13f6c:	2800      	cmp	r0, #0
   13f6e:	d0d6      	beq.n	13f1e <__swbuf_r+0x52>
   13f70:	f04f 37ff 	mov.w	r7, #4294967295
   13f74:	e7d3      	b.n	13f1e <__swbuf_r+0x52>
   13f76:	f7f7 fab5 	bl	b4e4 <__sinit>
   13f7a:	e7af      	b.n	13edc <__swbuf_r+0x10>

00013f7c <_fstat_r>:
   13f7c:	b570      	push	{r4, r5, r6, lr}
   13f7e:	460c      	mov	r4, r1
   13f80:	4d08      	ldr	r5, [pc, #32]	; (13fa4 <_fstat_r+0x28>)
   13f82:	4603      	mov	r3, r0
   13f84:	2600      	movs	r6, #0
   13f86:	4620      	mov	r0, r4
   13f88:	4611      	mov	r1, r2
   13f8a:	461c      	mov	r4, r3
   13f8c:	602e      	str	r6, [r5, #0]
   13f8e:	f7f4 f9b5 	bl	82fc <_fstat>
   13f92:	1c43      	adds	r3, r0, #1
   13f94:	d000      	beq.n	13f98 <_fstat_r+0x1c>
   13f96:	bd70      	pop	{r4, r5, r6, pc}
   13f98:	682b      	ldr	r3, [r5, #0]
   13f9a:	2b00      	cmp	r3, #0
   13f9c:	d0fb      	beq.n	13f96 <_fstat_r+0x1a>
   13f9e:	6023      	str	r3, [r4, #0]
   13fa0:	bd70      	pop	{r4, r5, r6, pc}
   13fa2:	bf00      	nop
   13fa4:	2001e638 	.word	0x2001e638

00013fa8 <_isatty_r>:
   13fa8:	b538      	push	{r3, r4, r5, lr}
   13faa:	4d07      	ldr	r5, [pc, #28]	; (13fc8 <_isatty_r+0x20>)
   13fac:	2200      	movs	r2, #0
   13fae:	4604      	mov	r4, r0
   13fb0:	4608      	mov	r0, r1
   13fb2:	602a      	str	r2, [r5, #0]
   13fb4:	f7f4 f9a8 	bl	8308 <_isatty>
   13fb8:	1c43      	adds	r3, r0, #1
   13fba:	d000      	beq.n	13fbe <_isatty_r+0x16>
   13fbc:	bd38      	pop	{r3, r4, r5, pc}
   13fbe:	682b      	ldr	r3, [r5, #0]
   13fc0:	2b00      	cmp	r3, #0
   13fc2:	d0fb      	beq.n	13fbc <_isatty_r+0x14>
   13fc4:	6023      	str	r3, [r4, #0]
   13fc6:	bd38      	pop	{r3, r4, r5, pc}
   13fc8:	2001e638 	.word	0x2001e638

00013fcc <__aeabi_drsub>:
   13fcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   13fd0:	e002      	b.n	13fd8 <__adddf3>
   13fd2:	bf00      	nop

00013fd4 <__aeabi_dsub>:
   13fd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00013fd8 <__adddf3>:
   13fd8:	b530      	push	{r4, r5, lr}
   13fda:	ea4f 0441 	mov.w	r4, r1, lsl #1
   13fde:	ea4f 0543 	mov.w	r5, r3, lsl #1
   13fe2:	ea94 0f05 	teq	r4, r5
   13fe6:	bf08      	it	eq
   13fe8:	ea90 0f02 	teqeq	r0, r2
   13fec:	bf1f      	itttt	ne
   13fee:	ea54 0c00 	orrsne.w	ip, r4, r0
   13ff2:	ea55 0c02 	orrsne.w	ip, r5, r2
   13ff6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   13ffa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   13ffe:	f000 80e2 	beq.w	141c6 <__adddf3+0x1ee>
   14002:	ea4f 5454 	mov.w	r4, r4, lsr #21
   14006:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1400a:	bfb8      	it	lt
   1400c:	426d      	neglt	r5, r5
   1400e:	dd0c      	ble.n	1402a <__adddf3+0x52>
   14010:	442c      	add	r4, r5
   14012:	ea80 0202 	eor.w	r2, r0, r2
   14016:	ea81 0303 	eor.w	r3, r1, r3
   1401a:	ea82 0000 	eor.w	r0, r2, r0
   1401e:	ea83 0101 	eor.w	r1, r3, r1
   14022:	ea80 0202 	eor.w	r2, r0, r2
   14026:	ea81 0303 	eor.w	r3, r1, r3
   1402a:	2d36      	cmp	r5, #54	; 0x36
   1402c:	bf88      	it	hi
   1402e:	bd30      	pophi	{r4, r5, pc}
   14030:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   14034:	ea4f 3101 	mov.w	r1, r1, lsl #12
   14038:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1403c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   14040:	d002      	beq.n	14048 <__adddf3+0x70>
   14042:	4240      	negs	r0, r0
   14044:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14048:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1404c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   14050:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   14054:	d002      	beq.n	1405c <__adddf3+0x84>
   14056:	4252      	negs	r2, r2
   14058:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1405c:	ea94 0f05 	teq	r4, r5
   14060:	f000 80a7 	beq.w	141b2 <__adddf3+0x1da>
   14064:	f1a4 0401 	sub.w	r4, r4, #1
   14068:	f1d5 0e20 	rsbs	lr, r5, #32
   1406c:	db0d      	blt.n	1408a <__adddf3+0xb2>
   1406e:	fa02 fc0e 	lsl.w	ip, r2, lr
   14072:	fa22 f205 	lsr.w	r2, r2, r5
   14076:	1880      	adds	r0, r0, r2
   14078:	f141 0100 	adc.w	r1, r1, #0
   1407c:	fa03 f20e 	lsl.w	r2, r3, lr
   14080:	1880      	adds	r0, r0, r2
   14082:	fa43 f305 	asr.w	r3, r3, r5
   14086:	4159      	adcs	r1, r3
   14088:	e00e      	b.n	140a8 <__adddf3+0xd0>
   1408a:	f1a5 0520 	sub.w	r5, r5, #32
   1408e:	f10e 0e20 	add.w	lr, lr, #32
   14092:	2a01      	cmp	r2, #1
   14094:	fa03 fc0e 	lsl.w	ip, r3, lr
   14098:	bf28      	it	cs
   1409a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1409e:	fa43 f305 	asr.w	r3, r3, r5
   140a2:	18c0      	adds	r0, r0, r3
   140a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   140a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   140ac:	d507      	bpl.n	140be <__adddf3+0xe6>
   140ae:	f04f 0e00 	mov.w	lr, #0
   140b2:	f1dc 0c00 	rsbs	ip, ip, #0
   140b6:	eb7e 0000 	sbcs.w	r0, lr, r0
   140ba:	eb6e 0101 	sbc.w	r1, lr, r1
   140be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   140c2:	d31b      	bcc.n	140fc <__adddf3+0x124>
   140c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   140c8:	d30c      	bcc.n	140e4 <__adddf3+0x10c>
   140ca:	0849      	lsrs	r1, r1, #1
   140cc:	ea5f 0030 	movs.w	r0, r0, rrx
   140d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   140d4:	f104 0401 	add.w	r4, r4, #1
   140d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   140dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   140e0:	f080 809a 	bcs.w	14218 <__adddf3+0x240>
   140e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   140e8:	bf08      	it	eq
   140ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   140ee:	f150 0000 	adcs.w	r0, r0, #0
   140f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   140f6:	ea41 0105 	orr.w	r1, r1, r5
   140fa:	bd30      	pop	{r4, r5, pc}
   140fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   14100:	4140      	adcs	r0, r0
   14102:	eb41 0101 	adc.w	r1, r1, r1
   14106:	3c01      	subs	r4, #1
   14108:	bf28      	it	cs
   1410a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1410e:	d2e9      	bcs.n	140e4 <__adddf3+0x10c>
   14110:	f091 0f00 	teq	r1, #0
   14114:	bf04      	itt	eq
   14116:	4601      	moveq	r1, r0
   14118:	2000      	moveq	r0, #0
   1411a:	fab1 f381 	clz	r3, r1
   1411e:	bf08      	it	eq
   14120:	3320      	addeq	r3, #32
   14122:	f1a3 030b 	sub.w	r3, r3, #11
   14126:	f1b3 0220 	subs.w	r2, r3, #32
   1412a:	da0c      	bge.n	14146 <__adddf3+0x16e>
   1412c:	320c      	adds	r2, #12
   1412e:	dd08      	ble.n	14142 <__adddf3+0x16a>
   14130:	f102 0c14 	add.w	ip, r2, #20
   14134:	f1c2 020c 	rsb	r2, r2, #12
   14138:	fa01 f00c 	lsl.w	r0, r1, ip
   1413c:	fa21 f102 	lsr.w	r1, r1, r2
   14140:	e00c      	b.n	1415c <__adddf3+0x184>
   14142:	f102 0214 	add.w	r2, r2, #20
   14146:	bfd8      	it	le
   14148:	f1c2 0c20 	rsble	ip, r2, #32
   1414c:	fa01 f102 	lsl.w	r1, r1, r2
   14150:	fa20 fc0c 	lsr.w	ip, r0, ip
   14154:	bfdc      	itt	le
   14156:	ea41 010c 	orrle.w	r1, r1, ip
   1415a:	4090      	lslle	r0, r2
   1415c:	1ae4      	subs	r4, r4, r3
   1415e:	bfa2      	ittt	ge
   14160:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   14164:	4329      	orrge	r1, r5
   14166:	bd30      	popge	{r4, r5, pc}
   14168:	ea6f 0404 	mvn.w	r4, r4
   1416c:	3c1f      	subs	r4, #31
   1416e:	da1c      	bge.n	141aa <__adddf3+0x1d2>
   14170:	340c      	adds	r4, #12
   14172:	dc0e      	bgt.n	14192 <__adddf3+0x1ba>
   14174:	f104 0414 	add.w	r4, r4, #20
   14178:	f1c4 0220 	rsb	r2, r4, #32
   1417c:	fa20 f004 	lsr.w	r0, r0, r4
   14180:	fa01 f302 	lsl.w	r3, r1, r2
   14184:	ea40 0003 	orr.w	r0, r0, r3
   14188:	fa21 f304 	lsr.w	r3, r1, r4
   1418c:	ea45 0103 	orr.w	r1, r5, r3
   14190:	bd30      	pop	{r4, r5, pc}
   14192:	f1c4 040c 	rsb	r4, r4, #12
   14196:	f1c4 0220 	rsb	r2, r4, #32
   1419a:	fa20 f002 	lsr.w	r0, r0, r2
   1419e:	fa01 f304 	lsl.w	r3, r1, r4
   141a2:	ea40 0003 	orr.w	r0, r0, r3
   141a6:	4629      	mov	r1, r5
   141a8:	bd30      	pop	{r4, r5, pc}
   141aa:	fa21 f004 	lsr.w	r0, r1, r4
   141ae:	4629      	mov	r1, r5
   141b0:	bd30      	pop	{r4, r5, pc}
   141b2:	f094 0f00 	teq	r4, #0
   141b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   141ba:	bf06      	itte	eq
   141bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   141c0:	3401      	addeq	r4, #1
   141c2:	3d01      	subne	r5, #1
   141c4:	e74e      	b.n	14064 <__adddf3+0x8c>
   141c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   141ca:	bf18      	it	ne
   141cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   141d0:	d029      	beq.n	14226 <__adddf3+0x24e>
   141d2:	ea94 0f05 	teq	r4, r5
   141d6:	bf08      	it	eq
   141d8:	ea90 0f02 	teqeq	r0, r2
   141dc:	d005      	beq.n	141ea <__adddf3+0x212>
   141de:	ea54 0c00 	orrs.w	ip, r4, r0
   141e2:	bf04      	itt	eq
   141e4:	4619      	moveq	r1, r3
   141e6:	4610      	moveq	r0, r2
   141e8:	bd30      	pop	{r4, r5, pc}
   141ea:	ea91 0f03 	teq	r1, r3
   141ee:	bf1e      	ittt	ne
   141f0:	2100      	movne	r1, #0
   141f2:	2000      	movne	r0, #0
   141f4:	bd30      	popne	{r4, r5, pc}
   141f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   141fa:	d105      	bne.n	14208 <__adddf3+0x230>
   141fc:	0040      	lsls	r0, r0, #1
   141fe:	4149      	adcs	r1, r1
   14200:	bf28      	it	cs
   14202:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   14206:	bd30      	pop	{r4, r5, pc}
   14208:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1420c:	bf3c      	itt	cc
   1420e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   14212:	bd30      	popcc	{r4, r5, pc}
   14214:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   14218:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1421c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   14220:	f04f 0000 	mov.w	r0, #0
   14224:	bd30      	pop	{r4, r5, pc}
   14226:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1422a:	bf1a      	itte	ne
   1422c:	4619      	movne	r1, r3
   1422e:	4610      	movne	r0, r2
   14230:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   14234:	bf1c      	itt	ne
   14236:	460b      	movne	r3, r1
   14238:	4602      	movne	r2, r0
   1423a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1423e:	bf06      	itte	eq
   14240:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   14244:	ea91 0f03 	teqeq	r1, r3
   14248:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1424c:	bd30      	pop	{r4, r5, pc}
   1424e:	bf00      	nop

00014250 <__aeabi_ui2d>:
   14250:	f090 0f00 	teq	r0, #0
   14254:	bf04      	itt	eq
   14256:	2100      	moveq	r1, #0
   14258:	4770      	bxeq	lr
   1425a:	b530      	push	{r4, r5, lr}
   1425c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14260:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14264:	f04f 0500 	mov.w	r5, #0
   14268:	f04f 0100 	mov.w	r1, #0
   1426c:	e750      	b.n	14110 <__adddf3+0x138>
   1426e:	bf00      	nop

00014270 <__aeabi_i2d>:
   14270:	f090 0f00 	teq	r0, #0
   14274:	bf04      	itt	eq
   14276:	2100      	moveq	r1, #0
   14278:	4770      	bxeq	lr
   1427a:	b530      	push	{r4, r5, lr}
   1427c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14280:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14284:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   14288:	bf48      	it	mi
   1428a:	4240      	negmi	r0, r0
   1428c:	f04f 0100 	mov.w	r1, #0
   14290:	e73e      	b.n	14110 <__adddf3+0x138>
   14292:	bf00      	nop

00014294 <__aeabi_f2d>:
   14294:	0042      	lsls	r2, r0, #1
   14296:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1429a:	ea4f 0131 	mov.w	r1, r1, rrx
   1429e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   142a2:	bf1f      	itttt	ne
   142a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   142a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   142ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   142b0:	4770      	bxne	lr
   142b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   142b6:	bf08      	it	eq
   142b8:	4770      	bxeq	lr
   142ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   142be:	bf04      	itt	eq
   142c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   142c4:	4770      	bxeq	lr
   142c6:	b530      	push	{r4, r5, lr}
   142c8:	f44f 7460 	mov.w	r4, #896	; 0x380
   142cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   142d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   142d4:	e71c      	b.n	14110 <__adddf3+0x138>
   142d6:	bf00      	nop

000142d8 <__aeabi_ul2d>:
   142d8:	ea50 0201 	orrs.w	r2, r0, r1
   142dc:	bf08      	it	eq
   142de:	4770      	bxeq	lr
   142e0:	b530      	push	{r4, r5, lr}
   142e2:	f04f 0500 	mov.w	r5, #0
   142e6:	e00a      	b.n	142fe <__aeabi_l2d+0x16>

000142e8 <__aeabi_l2d>:
   142e8:	ea50 0201 	orrs.w	r2, r0, r1
   142ec:	bf08      	it	eq
   142ee:	4770      	bxeq	lr
   142f0:	b530      	push	{r4, r5, lr}
   142f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   142f6:	d502      	bpl.n	142fe <__aeabi_l2d+0x16>
   142f8:	4240      	negs	r0, r0
   142fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   142fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14302:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14306:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1430a:	f43f aed8 	beq.w	140be <__adddf3+0xe6>
   1430e:	f04f 0203 	mov.w	r2, #3
   14312:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   14316:	bf18      	it	ne
   14318:	3203      	addne	r2, #3
   1431a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1431e:	bf18      	it	ne
   14320:	3203      	addne	r2, #3
   14322:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   14326:	f1c2 0320 	rsb	r3, r2, #32
   1432a:	fa00 fc03 	lsl.w	ip, r0, r3
   1432e:	fa20 f002 	lsr.w	r0, r0, r2
   14332:	fa01 fe03 	lsl.w	lr, r1, r3
   14336:	ea40 000e 	orr.w	r0, r0, lr
   1433a:	fa21 f102 	lsr.w	r1, r1, r2
   1433e:	4414      	add	r4, r2
   14340:	e6bd      	b.n	140be <__adddf3+0xe6>
   14342:	bf00      	nop

00014344 <__aeabi_d2lz>:
   14344:	b508      	push	{r3, lr}
   14346:	4602      	mov	r2, r0
   14348:	460b      	mov	r3, r1
   1434a:	ec43 2b17 	vmov	d7, r2, r3
   1434e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   14352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14356:	d403      	bmi.n	14360 <__aeabi_d2lz+0x1c>
   14358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1435c:	f000 b80c 	b.w	14378 <__aeabi_d2ulz>
   14360:	eeb1 7b47 	vneg.f64	d7, d7
   14364:	ec51 0b17 	vmov	r0, r1, d7
   14368:	f000 f806 	bl	14378 <__aeabi_d2ulz>
   1436c:	4240      	negs	r0, r0
   1436e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14372:	bd08      	pop	{r3, pc}
   14374:	0000      	movs	r0, r0
	...

00014378 <__aeabi_d2ulz>:
   14378:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 143a8 <__aeabi_d2ulz+0x30>
   1437c:	ec41 0b17 	vmov	d7, r0, r1
   14380:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 143b0 <__aeabi_d2ulz+0x38>
   14384:	ee27 6b06 	vmul.f64	d6, d7, d6
   14388:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   1438c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   14390:	eea4 7b45 	vfms.f64	d7, d4, d5
   14394:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   14398:	ee16 1a10 	vmov	r1, s12
   1439c:	ee17 0a90 	vmov	r0, s15
   143a0:	4770      	bx	lr
   143a2:	bf00      	nop
   143a4:	f3af 8000 	nop.w
   143a8:	00000000 	.word	0x00000000
   143ac:	3df00000 	.word	0x3df00000
   143b0:	00000000 	.word	0x00000000
   143b4:	41f00000 	.word	0x41f00000

000143b8 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   143b8:	f85f f000 	ldr.w	pc, [pc]	; 143bc <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   143bc:	60001655 	.word	0x60001655

000143c0 <___ZN16CrashReportClasscvbEv_veneer>:
   143c0:	f85f f000 	ldr.w	pc, [pc]	; 143c4 <___ZN16CrashReportClasscvbEv_veneer+0x4>
   143c4:	60001ded 	.word	0x60001ded

000143c8 <___init_veneer>:
   143c8:	f85f f000 	ldr.w	pc, [pc]	; 143cc <___init_veneer+0x4>
   143cc:	600025f1 	.word	0x600025f1

000143d0 <___reboot_Teensyduino__veneer>:
   143d0:	f85f f000 	ldr.w	pc, [pc]	; 143d4 <___reboot_Teensyduino__veneer+0x4>
   143d4:	60002549 	.word	0x60002549
	...

Disassembly of section .fini:

000143e0 <_fini>:
   143e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   143e2:	bf00      	nop

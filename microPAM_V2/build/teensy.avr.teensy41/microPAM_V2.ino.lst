
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\B6A2B96C86D1458F5F30CD00E995713A/microPAM_V2.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 fd0c 	bl	60001e48 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 fcb8 	bl	60001e58 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 feda 	bl	600022d4 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f001 f86d 	bl	60002610 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 fce8 	bl	60001f50 <configure_external_ram>
	analog_init();
60001580:	f001 f80c 	bl	6000259c <analog_init>
	pwm_init();
60001584:	f001 f850 	bl	60002628 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fed2 	bl	60002330 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 fc5e 	bl	60001e4c <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 ff63 	bl	60002460 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 fc57 	bl	60001e54 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 fc53 	bl	60001e50 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f001 f82d 	bl	60002608 <____libc_init_array_veneer>
	main();
600015ae:	f001 f84f 	bl	60002650 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	000145a8 	.word	0x000145a8
600015c0:	60002870 	.word	0x60002870
600015c4:	00000000 	.word	0x00000000
600015c8:	20008ec0 	.word	0x20008ec0
600015cc:	60016e1c 	.word	0x60016e1c
600015d0:	20000000 	.word	0x20000000
600015d4:	200294e0 	.word	0x200294e0
600015d8:	20008ec0 	.word	0x20008ec0
600015dc:	20008c00 	.word	0x20008c00
600015e0:	000082ed 	.word	0x000082ed
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	000078ed 	.word	0x000078ed
600015f4:	20029458 	.word	0x20029458
600015f8:	000078f1 	.word	0x000078f1
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	016e3600 	.word	0x016e3600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	2002945c 	.word	0x2002945c
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001654:	4b7c      	ldr	r3, [pc, #496]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001656:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
6000165a:	2a0b      	cmp	r2, #11
{
6000165c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001660:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
60001662:	d11c      	bne.n	6000169e <CrashReportClass::printTo(Print&) const+0x4a>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001664:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001668:	4978      	ldr	r1, [pc, #480]	; (6000184c <CrashReportClass::printTo(Print&) const+0x1f8>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
6000166a:	4b79      	ldr	r3, [pc, #484]	; (60001850 <CrashReportClass::printTo(Print&) const+0x1fc>)
	while (data < end) {
6000166c:	4e79      	ldr	r6, [pc, #484]	; (60001854 <CrashReportClass::printTo(Print&) const+0x200>)
		crc ^= *data++;
6000166e:	f101 0c04 	add.w	ip, r1, #4
60001672:	4050      	eors	r0, r2
60001674:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001676:	f000 0201 	and.w	r2, r0, #1
6000167a:	3c01      	subs	r4, #1
6000167c:	fb03 f202 	mul.w	r2, r3, r2
60001680:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
60001684:	d1f7      	bne.n	60001676 <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
60001686:	45b4      	cmp	ip, r6
60001688:	d002      	beq.n	60001690 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
6000168a:	684a      	ldr	r2, [r1, #4]
6000168c:	4661      	mov	r1, ip
6000168e:	e7ee      	b.n	6000166e <CrashReportClass::printTo(Print&) const+0x1a>
	}
	if (crc != info->crc) return 0;
60001690:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 60001848 <CrashReportClass::printTo(Print&) const+0x1f4>
60001694:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001698:	4298      	cmp	r0, r3
6000169a:	f000 80fd 	beq.w	60001898 <CrashReportClass::printTo(Print&) const+0x244>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
6000169e:	682b      	ldr	r3, [r5, #0]
600016a0:	2217      	movs	r2, #23
600016a2:	496d      	ldr	r1, [pc, #436]	; (60001858 <CrashReportClass::printTo(Print&) const+0x204>)
600016a4:	4628      	mov	r0, r5
600016a6:	685b      	ldr	r3, [r3, #4]
600016a8:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600016aa:	4628      	mov	r0, r5
600016ac:	f000 ffb4 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016b0:	682b      	ldr	r3, [r5, #0]
600016b2:	2248      	movs	r2, #72	; 0x48
600016b4:	4969      	ldr	r1, [pc, #420]	; (6000185c <CrashReportClass::printTo(Print&) const+0x208>)
600016b6:	685b      	ldr	r3, [r3, #4]
600016b8:	4628      	mov	r0, r5
600016ba:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016bc:	4628      	mov	r0, r5
600016be:	f000 ffab 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016c2:	682b      	ldr	r3, [r5, #0]
600016c4:	2249      	movs	r2, #73	; 0x49
600016c6:	4966      	ldr	r1, [pc, #408]	; (60001860 <CrashReportClass::printTo(Print&) const+0x20c>)
600016c8:	685b      	ldr	r3, [r3, #4]
600016ca:	4628      	mov	r0, r5
600016cc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016ce:	4628      	mov	r0, r5
600016d0:	f000 ffa2 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016d4:	682b      	ldr	r3, [r5, #0]
600016d6:	2224      	movs	r2, #36	; 0x24
600016d8:	4962      	ldr	r1, [pc, #392]	; (60001864 <CrashReportClass::printTo(Print&) const+0x210>)
600016da:	685b      	ldr	r3, [r3, #4]
600016dc:	4628      	mov	r0, r5
600016de:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016e0:	4628      	mov	r0, r5
600016e2:	f000 ff99 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016e6:	682b      	ldr	r3, [r5, #0]
600016e8:	2247      	movs	r2, #71	; 0x47
600016ea:	495f      	ldr	r1, [pc, #380]	; (60001868 <CrashReportClass::printTo(Print&) const+0x214>)
600016ec:	685b      	ldr	r3, [r3, #4]
600016ee:	4628      	mov	r0, r5
600016f0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016f2:	4628      	mov	r0, r5
600016f4:	f000 ff90 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016f8:	682b      	ldr	r3, [r5, #0]
600016fa:	223f      	movs	r2, #63	; 0x3f
600016fc:	495b      	ldr	r1, [pc, #364]	; (6000186c <CrashReportClass::printTo(Print&) const+0x218>)
600016fe:	685b      	ldr	r3, [r3, #4]
60001700:	4628      	mov	r0, r5
60001702:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001704:	4628      	mov	r0, r5
60001706:	f000 ff87 	bl	60002618 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
6000170a:	4b59      	ldr	r3, [pc, #356]	; (60001870 <CrashReportClass::printTo(Print&) const+0x21c>)
6000170c:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
6000170e:	07a2      	lsls	r2, r4, #30
60001710:	d50d      	bpl.n	6000172e <CrashReportClass::printTo(Print&) const+0xda>
    uint32_t gpr5 = SRC_GPR5;
60001712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
60001714:	4b57      	ldr	r3, [pc, #348]	; (60001874 <CrashReportClass::printTo(Print&) const+0x220>)
60001716:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
60001718:	682b      	ldr	r3, [r5, #0]
6000171a:	f000 81b8 	beq.w	60001a8e <CrashReportClass::printTo(Print&) const+0x43a>
6000171e:	2240      	movs	r2, #64	; 0x40
60001720:	4955      	ldr	r1, [pc, #340]	; (60001878 <CrashReportClass::printTo(Print&) const+0x224>)
60001722:	685b      	ldr	r3, [r3, #4]
60001724:	4628      	mov	r0, r5
60001726:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001728:	4628      	mov	r0, r5
6000172a:	f000 ff75 	bl	60002618 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
6000172e:	0763      	lsls	r3, r4, #29
60001730:	f100 81a3 	bmi.w	60001a7a <CrashReportClass::printTo(Print&) const+0x426>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001734:	0727      	lsls	r7, r4, #28
60001736:	f100 8196 	bmi.w	60001a66 <CrashReportClass::printTo(Print&) const+0x412>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
6000173a:	06e6      	lsls	r6, r4, #27
6000173c:	f100 8189 	bmi.w	60001a52 <CrashReportClass::printTo(Print&) const+0x3fe>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001740:	06a0      	lsls	r0, r4, #26
60001742:	f100 817c 	bmi.w	60001a3e <CrashReportClass::printTo(Print&) const+0x3ea>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001746:	0661      	lsls	r1, r4, #25
60001748:	f100 816f 	bmi.w	60001a2a <CrashReportClass::printTo(Print&) const+0x3d6>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000174c:	0622      	lsls	r2, r4, #24
6000174e:	f100 8134 	bmi.w	600019ba <CrashReportClass::printTo(Print&) const+0x366>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001752:	05e3      	lsls	r3, r4, #23
60001754:	f100 813d 	bmi.w	600019d2 <CrashReportClass::printTo(Print&) const+0x37e>
  if (bc->bitmask) {
60001758:	4f3b      	ldr	r7, [pc, #236]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
6000175a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
6000175e:	2b00      	cmp	r3, #0
60001760:	d051      	beq.n	60001806 <CrashReportClass::printTo(Print&) const+0x1b2>
60001762:	2401      	movs	r4, #1
							  return write((const uint8_t *)str, strlen(str)); }
60001764:	f8df 912c 	ldr.w	r9, [pc, #300]	; 60001894 <CrashReportClass::printTo(Print&) const+0x240>
60001768:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6000188c <CrashReportClass::printTo(Print&) const+0x238>
6000176c:	e004      	b.n	60001778 <CrashReportClass::printTo(Print&) const+0x124>
    for (int i=0; i < 6; i++) {
6000176e:	3401      	adds	r4, #1
60001770:	2c07      	cmp	r4, #7
60001772:	d039      	beq.n	600017e8 <CrashReportClass::printTo(Print&) const+0x194>
      if (bc->bitmask & (1 << i)) {
60001774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
60001778:	1e62      	subs	r2, r4, #1
6000177a:	2601      	movs	r6, #1
6000177c:	fa06 f102 	lsl.w	r1, r6, r2
60001780:	4219      	tst	r1, r3
60001782:	d0f4      	beq.n	6000176e <CrashReportClass::printTo(Print&) const+0x11a>
60001784:	682b      	ldr	r3, [r5, #0]
60001786:	eb08 0a82 	add.w	sl, r8, r2, lsl #2
6000178a:	4649      	mov	r1, r9
6000178c:	220e      	movs	r2, #14
6000178e:	685b      	ldr	r3, [r3, #4]
60001790:	4628      	mov	r0, r5
60001792:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001794:	4621      	mov	r1, r4
60001796:	4628      	mov	r0, r5
    for (int i=0; i < 6; i++) {
60001798:	3401      	adds	r4, #1
6000179a:	f000 ff49 	bl	60002630 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000179e:	682b      	ldr	r3, [r5, #0]
600017a0:	2205      	movs	r2, #5
600017a2:	4936      	ldr	r1, [pc, #216]	; (6000187c <CrashReportClass::printTo(Print&) const+0x228>)
600017a4:	685b      	ldr	r3, [r3, #4]
600017a6:	4628      	mov	r0, r5
600017a8:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600017aa:	2300      	movs	r3, #0
600017ac:	f8da 1004 	ldr.w	r1, [sl, #4]
600017b0:	220a      	movs	r2, #10
600017b2:	4628      	mov	r0, r5
600017b4:	f000 ff34 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017b8:	682b      	ldr	r3, [r5, #0]
600017ba:	2204      	movs	r2, #4
600017bc:	4930      	ldr	r1, [pc, #192]	; (60001880 <CrashReportClass::printTo(Print&) const+0x22c>)
600017be:	685b      	ldr	r3, [r3, #4]
600017c0:	4628      	mov	r0, r5
600017c2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600017c4:	f8da 1004 	ldr.w	r1, [sl, #4]
600017c8:	2300      	movs	r3, #0
600017ca:	2210      	movs	r2, #16
600017cc:	4628      	mov	r0, r5
600017ce:	f000 ff27 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017d2:	682b      	ldr	r3, [r5, #0]
600017d4:	4632      	mov	r2, r6
600017d6:	492b      	ldr	r1, [pc, #172]	; (60001884 <CrashReportClass::printTo(Print&) const+0x230>)
600017d8:	685b      	ldr	r3, [r3, #4]
600017da:	4628      	mov	r0, r5
600017dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017de:	4628      	mov	r0, r5
600017e0:	f000 ff1a 	bl	60002618 <___ZN5Print7printlnEv_veneer>
600017e4:	2c07      	cmp	r4, #7
600017e6:	d1c5      	bne.n	60001774 <CrashReportClass::printTo(Print&) const+0x120>
    *(volatile uint32_t *)(&bc->bitmask) = 0;
600017e8:	4b27      	ldr	r3, [pc, #156]	; (60001888 <CrashReportClass::printTo(Print&) const+0x234>)
600017ea:	2200      	movs	r2, #0
600017ec:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600017f0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
600017f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600017f8:	4a24      	ldr	r2, [pc, #144]	; (6000188c <CrashReportClass::printTo(Print&) const+0x238>)
600017fa:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600017fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001802:	f3bf 8f6f 	isb	sy
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001806:	4a10      	ldr	r2, [pc, #64]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001808:	2300      	movs	r3, #0
	info->ipsr  = 0;
6000180a:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
6000180e:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001812:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001816:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
6000181a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000181e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001822:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001826:	4809      	ldr	r0, [pc, #36]	; (6000184c <CrashReportClass::printTo(Print&) const+0x1f8>)
60001828:	4919      	ldr	r1, [pc, #100]	; (60001890 <CrashReportClass::printTo(Print&) const+0x23c>)
6000182a:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
6000182e:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001832:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001836:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000183a:	4a0d      	ldr	r2, [pc, #52]	; (60001870 <CrashReportClass::printTo(Print&) const+0x21c>)
}
6000183c:	2001      	movs	r0, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000183e:	6891      	ldr	r1, [r2, #8]
60001840:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001842:	6313      	str	r3, [r2, #48]	; 0x30
}
60001844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60001848:	2027ff00 	.word	0x2027ff00
6000184c:	2027ff80 	.word	0x2027ff80
60001850:	edb88320 	.word	0xedb88320
60001854:	2027ffa8 	.word	0x2027ffa8
60001858:	2000802c 	.word	0x2000802c
6000185c:	20008044 	.word	0x20008044
60001860:	20008090 	.word	0x20008090
60001864:	200080dc 	.word	0x200080dc
60001868:	20008104 	.word	0x20008104
6000186c:	2000814c 	.word	0x2000814c
60001870:	400f8000 	.word	0x400f8000
60001874:	0bad00f1 	.word	0x0bad00f1
60001878:	200081d8 	.word	0x200081d8
6000187c:	200083b0 	.word	0x200083b0
60001880:	200083b8 	.word	0x200083b8
60001884:	200080d8 	.word	0x200080d8
60001888:	2027f000 	.word	0x2027f000
6000188c:	2027ffc0 	.word	0x2027ffc0
60001890:	2027ffa0 	.word	0x2027ffa0
60001894:	200083a0 	.word	0x200083a0
							  return write((const uint8_t *)str, strlen(str)); }
60001898:	682b      	ldr	r3, [r5, #0]
6000189a:	220c      	movs	r2, #12
6000189c:	49aa      	ldr	r1, [pc, #680]	; (60001b48 <CrashReportClass::printTo(Print&) const+0x4f4>)
6000189e:	4628      	mov	r0, r5
600018a0:	685b      	ldr	r3, [r3, #4]
600018a2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018a4:	4628      	mov	r0, r5
600018a6:	f000 feb7 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018aa:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
600018ac:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
600018b0:	4628      	mov	r0, r5
    info->time /= 60;
600018b2:	4ba6      	ldr	r3, [pc, #664]	; (60001b4c <CrashReportClass::printTo(Print&) const+0x4f8>)
600018b4:	f8d2 a004 	ldr.w	sl, [r2, #4]
600018b8:	fba3 2709 	umull	r2, r7, r3, r9
600018bc:	49a4      	ldr	r1, [pc, #656]	; (60001b50 <CrashReportClass::printTo(Print&) const+0x4fc>)
600018be:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
600018c0:	fba3 2307 	umull	r2, r3, r3, r7
600018c4:	2226      	movs	r2, #38	; 0x26
600018c6:	095e      	lsrs	r6, r3, #5
600018c8:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
600018cc:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
600018ce:	49a1      	ldr	r1, [pc, #644]	; (60001b54 <CrashReportClass::printTo(Print&) const+0x500>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018d0:	220a      	movs	r2, #10
600018d2:	4628      	mov	r0, r5
600018d4:	fba1 3106 	umull	r3, r1, r1, r6
600018d8:	4623      	mov	r3, r4
600018da:	0909      	lsrs	r1, r1, #4
600018dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
600018e0:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
600018e4:	f000 fe9c 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018e8:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
600018ea:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
600018ee:	2201      	movs	r2, #1
600018f0:	685b      	ldr	r3, [r3, #4]
600018f2:	4628      	mov	r0, r5
600018f4:	4998      	ldr	r1, [pc, #608]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x504>)
600018f6:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018f8:	4623      	mov	r3, r4
600018fa:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
600018fe:	220a      	movs	r2, #10
60001900:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
60001902:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
60001906:	f000 fe8b 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000190a:	682b      	ldr	r3, [r5, #0]
6000190c:	2201      	movs	r2, #1
6000190e:	4992      	ldr	r1, [pc, #584]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x504>)
60001910:	685b      	ldr	r3, [r3, #4]
60001912:	4628      	mov	r0, r5
60001914:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001916:	4623      	mov	r3, r4
60001918:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
6000191c:	220a      	movs	r2, #10
6000191e:	4628      	mov	r0, r5
60001920:	f000 fe7e 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001924:	4628      	mov	r0, r5
60001926:	f000 fe77 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000192a:	682b      	ldr	r3, [r5, #0]
6000192c:	2224      	movs	r2, #36	; 0x24
6000192e:	498b      	ldr	r1, [pc, #556]	; (60001b5c <CrashReportClass::printTo(Print&) const+0x508>)
60001930:	685b      	ldr	r3, [r3, #4]
60001932:	4628      	mov	r0, r5
60001934:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001936:	4623      	mov	r3, r4
60001938:	2210      	movs	r2, #16
6000193a:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
6000193e:	4628      	mov	r0, r5
60001940:	f000 fe6e 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001944:	4628      	mov	r0, r5
60001946:	f000 fe67 	bl	60002618 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
6000194a:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
6000194e:	2e00      	cmp	r6, #0
60001950:	f040 80a0 	bne.w	60001a94 <CrashReportClass::printTo(Print&) const+0x440>
    uint32_t _HFSR = info->hfsr;
60001954:	4e82      	ldr	r6, [pc, #520]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x50c>)
60001956:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
6000195a:	2c00      	cmp	r4, #0
6000195c:	f040 80bb 	bne.w	60001ad6 <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001960:	682b      	ldr	r3, [r5, #0]
60001962:	2222      	movs	r2, #34	; 0x22
60001964:	497f      	ldr	r1, [pc, #508]	; (60001b64 <CrashReportClass::printTo(Print&) const+0x510>)
60001966:	4628      	mov	r0, r5
60001968:	685b      	ldr	r3, [r3, #4]
6000196a:	4798      	blx	r3
    p.print(info->temp);
6000196c:	4b7c      	ldr	r3, [pc, #496]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x50c>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
6000196e:	2102      	movs	r1, #2
60001970:	4628      	mov	r0, r5
60001972:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001976:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
6000197a:	f000 fe61 	bl	60002640 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000197e:	682b      	ldr	r3, [r5, #0]
60001980:	2205      	movs	r2, #5
60001982:	4979      	ldr	r1, [pc, #484]	; (60001b68 <CrashReportClass::printTo(Print&) const+0x514>)
60001984:	685b      	ldr	r3, [r3, #4]
60001986:	4628      	mov	r0, r5
60001988:	4798      	blx	r3
6000198a:	682b      	ldr	r3, [r5, #0]
6000198c:	221d      	movs	r2, #29
6000198e:	4977      	ldr	r1, [pc, #476]	; (60001b6c <CrashReportClass::printTo(Print&) const+0x518>)
60001990:	685b      	ldr	r3, [r3, #4]
60001992:	4628      	mov	r0, r5
60001994:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001996:	4a76      	ldr	r2, [pc, #472]	; (60001b70 <CrashReportClass::printTo(Print&) const+0x51c>)
60001998:	4876      	ldr	r0, [pc, #472]	; (60001b74 <CrashReportClass::printTo(Print&) const+0x520>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000199a:	2300      	movs	r3, #0
6000199c:	6811      	ldr	r1, [r2, #0]
6000199e:	220a      	movs	r2, #10
600019a0:	fba0 0101 	umull	r0, r1, r0, r1
600019a4:	4628      	mov	r0, r5
600019a6:	0c89      	lsrs	r1, r1, #18
600019a8:	f000 fe3a 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019ac:	682b      	ldr	r3, [r5, #0]
600019ae:	2204      	movs	r2, #4
600019b0:	4971      	ldr	r1, [pc, #452]	; (60001b78 <CrashReportClass::printTo(Print&) const+0x524>)
600019b2:	685b      	ldr	r3, [r3, #4]
600019b4:	4628      	mov	r0, r5
600019b6:	4798      	blx	r3
600019b8:	e6a7      	b.n	6000170a <CrashReportClass::printTo(Print&) const+0xb6>
600019ba:	682b      	ldr	r3, [r5, #0]
600019bc:	2221      	movs	r2, #33	; 0x21
600019be:	496f      	ldr	r1, [pc, #444]	; (60001b7c <CrashReportClass::printTo(Print&) const+0x528>)
600019c0:	4628      	mov	r0, r5
600019c2:	685b      	ldr	r3, [r3, #4]
600019c4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019c6:	4628      	mov	r0, r5
600019c8:	f000 fe26 	bl	60002618 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
600019cc:	05e3      	lsls	r3, r4, #23
600019ce:	f57f aec3 	bpl.w	60001758 <CrashReportClass::printTo(Print&) const+0x104>
							  return write((const uint8_t *)str, strlen(str)); }
600019d2:	682b      	ldr	r3, [r5, #0]
600019d4:	2229      	movs	r2, #41	; 0x29
600019d6:	496a      	ldr	r1, [pc, #424]	; (60001b80 <CrashReportClass::printTo(Print&) const+0x52c>)
600019d8:	4628      	mov	r0, r5
600019da:	685b      	ldr	r3, [r3, #4]
600019dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019de:	4628      	mov	r0, r5
600019e0:	f000 fe1a 	bl	60002618 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
600019e4:	4967      	ldr	r1, [pc, #412]	; (60001b84 <CrashReportClass::printTo(Print&) const+0x530>)
							  return write((const uint8_t *)str, strlen(str)); }
600019e6:	6828      	ldr	r0, [r5, #0]
600019e8:	2221      	movs	r2, #33	; 0x21
600019ea:	688b      	ldr	r3, [r1, #8]
600019ec:	6844      	ldr	r4, [r0, #4]
600019ee:	4628      	mov	r0, r5
600019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
600019f4:	608b      	str	r3, [r1, #8]
600019f6:	4964      	ldr	r1, [pc, #400]	; (60001b88 <CrashReportClass::printTo(Print&) const+0x534>)
600019f8:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
600019fa:	4628      	mov	r0, r5
600019fc:	f000 fe0c 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a00:	682b      	ldr	r3, [r5, #0]
60001a02:	2242      	movs	r2, #66	; 0x42
60001a04:	4961      	ldr	r1, [pc, #388]	; (60001b8c <CrashReportClass::printTo(Print&) const+0x538>)
60001a06:	685b      	ldr	r3, [r3, #4]
60001a08:	4628      	mov	r0, r5
60001a0a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a0c:	4628      	mov	r0, r5
60001a0e:	f000 fe03 	bl	60002618 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a12:	4a5f      	ldr	r2, [pc, #380]	; (60001b90 <CrashReportClass::printTo(Print&) const+0x53c>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001a14:	4b5f      	ldr	r3, [pc, #380]	; (60001b94 <CrashReportClass::printTo(Print&) const+0x540>)
60001a16:	2107      	movs	r1, #7
60001a18:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001a20:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001a22:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001a26:	bf30      	wfi
60001a28:	e7fd      	b.n	60001a26 <CrashReportClass::printTo(Print&) const+0x3d2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a2a:	682b      	ldr	r3, [r5, #0]
60001a2c:	2221      	movs	r2, #33	; 0x21
60001a2e:	495a      	ldr	r1, [pc, #360]	; (60001b98 <CrashReportClass::printTo(Print&) const+0x544>)
60001a30:	4628      	mov	r0, r5
60001a32:	685b      	ldr	r3, [r3, #4]
60001a34:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a36:	4628      	mov	r0, r5
60001a38:	f000 fdee 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a3c:	e686      	b.n	6000174c <CrashReportClass::printTo(Print&) const+0xf8>
							  return write((const uint8_t *)str, strlen(str)); }
60001a3e:	682b      	ldr	r3, [r5, #0]
60001a40:	2229      	movs	r2, #41	; 0x29
60001a42:	4956      	ldr	r1, [pc, #344]	; (60001b9c <CrashReportClass::printTo(Print&) const+0x548>)
60001a44:	4628      	mov	r0, r5
60001a46:	685b      	ldr	r3, [r3, #4]
60001a48:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a4a:	4628      	mov	r0, r5
60001a4c:	f000 fde4 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a50:	e679      	b.n	60001746 <CrashReportClass::printTo(Print&) const+0xf2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a52:	682b      	ldr	r3, [r5, #0]
60001a54:	2226      	movs	r2, #38	; 0x26
60001a56:	4952      	ldr	r1, [pc, #328]	; (60001ba0 <CrashReportClass::printTo(Print&) const+0x54c>)
60001a58:	4628      	mov	r0, r5
60001a5a:	685b      	ldr	r3, [r3, #4]
60001a5c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a5e:	4628      	mov	r0, r5
60001a60:	f000 fdda 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a64:	e66c      	b.n	60001740 <CrashReportClass::printTo(Print&) const+0xec>
							  return write((const uint8_t *)str, strlen(str)); }
60001a66:	682b      	ldr	r3, [r5, #0]
60001a68:	222a      	movs	r2, #42	; 0x2a
60001a6a:	494e      	ldr	r1, [pc, #312]	; (60001ba4 <CrashReportClass::printTo(Print&) const+0x550>)
60001a6c:	4628      	mov	r0, r5
60001a6e:	685b      	ldr	r3, [r3, #4]
60001a70:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a72:	4628      	mov	r0, r5
60001a74:	f000 fdd0 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a78:	e65f      	b.n	6000173a <CrashReportClass::printTo(Print&) const+0xe6>
							  return write((const uint8_t *)str, strlen(str)); }
60001a7a:	682b      	ldr	r3, [r5, #0]
60001a7c:	2227      	movs	r2, #39	; 0x27
60001a7e:	494a      	ldr	r1, [pc, #296]	; (60001ba8 <CrashReportClass::printTo(Print&) const+0x554>)
60001a80:	4628      	mov	r0, r5
60001a82:	685b      	ldr	r3, [r3, #4]
60001a84:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a86:	4628      	mov	r0, r5
60001a88:	f000 fdc6 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a8c:	e652      	b.n	60001734 <CrashReportClass::printTo(Print&) const+0xe0>
							  return write((const uint8_t *)str, strlen(str)); }
60001a8e:	2248      	movs	r2, #72	; 0x48
60001a90:	4946      	ldr	r1, [pc, #280]	; (60001bac <CrashReportClass::printTo(Print&) const+0x558>)
60001a92:	e646      	b.n	60001722 <CrashReportClass::printTo(Print&) const+0xce>
60001a94:	682b      	ldr	r3, [r5, #0]
60001a96:	2208      	movs	r2, #8
60001a98:	4945      	ldr	r1, [pc, #276]	; (60001bb0 <CrashReportClass::printTo(Print&) const+0x55c>)
60001a9a:	4628      	mov	r0, r5
60001a9c:	685b      	ldr	r3, [r3, #4]
60001a9e:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001aa0:	4623      	mov	r3, r4
60001aa2:	2210      	movs	r2, #16
60001aa4:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001aa8:	4628      	mov	r0, r5
60001aaa:	f000 fdb9 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001aae:	4628      	mov	r0, r5
60001ab0:	f000 fdb2 	bl	60002618 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001ab4:	07f4      	lsls	r4, r6, #31
60001ab6:	d427      	bmi.n	60001b08 <CrashReportClass::printTo(Print&) const+0x4b4>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001ab8:	07b0      	lsls	r0, r6, #30
60001aba:	f100 811d 	bmi.w	60001cf8 <CrashReportClass::printTo(Print&) const+0x6a4>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001abe:	0731      	lsls	r1, r6, #28
60001ac0:	f100 810e 	bmi.w	60001ce0 <CrashReportClass::printTo(Print&) const+0x68c>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001ac4:	06f2      	lsls	r2, r6, #27
60001ac6:	f100 8127 	bmi.w	60001d18 <CrashReportClass::printTo(Print&) const+0x6c4>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001aca:	06b3      	lsls	r3, r6, #26
60001acc:	d525      	bpl.n	60001b1a <CrashReportClass::printTo(Print&) const+0x4c6>
							  return write((const uint8_t *)str, strlen(str)); }
60001ace:	682b      	ldr	r3, [r5, #0]
60001ad0:	222a      	movs	r2, #42	; 0x2a
60001ad2:	4938      	ldr	r1, [pc, #224]	; (60001bb4 <CrashReportClass::printTo(Print&) const+0x560>)
60001ad4:	e01b      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001ad6:	682b      	ldr	r3, [r5, #0]
60001ad8:	2208      	movs	r2, #8
60001ada:	4937      	ldr	r1, [pc, #220]	; (60001bb8 <CrashReportClass::printTo(Print&) const+0x564>)
60001adc:	4628      	mov	r0, r5
60001ade:	685b      	ldr	r3, [r3, #4]
60001ae0:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ae2:	2300      	movs	r3, #0
60001ae4:	2210      	movs	r2, #16
60001ae6:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001aea:	4628      	mov	r0, r5
60001aec:	f000 fd98 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001af0:	4628      	mov	r0, r5
60001af2:	f000 fd91 	bl	60002618 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001af6:	07a0      	lsls	r0, r4, #30
60001af8:	d466      	bmi.n	60001bc8 <CrashReportClass::printTo(Print&) const+0x574>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001afa:	0061      	lsls	r1, r4, #1
60001afc:	f57f af30 	bpl.w	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001b00:	682b      	ldr	r3, [r5, #0]
60001b02:	221b      	movs	r2, #27
60001b04:	492d      	ldr	r1, [pc, #180]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x568>)
60001b06:	e062      	b.n	60001bce <CrashReportClass::printTo(Print&) const+0x57a>
60001b08:	682b      	ldr	r3, [r5, #0]
60001b0a:	2228      	movs	r2, #40	; 0x28
60001b0c:	492c      	ldr	r1, [pc, #176]	; (60001bc0 <CrashReportClass::printTo(Print&) const+0x56c>)
60001b0e:	685b      	ldr	r3, [r3, #4]
60001b10:	4628      	mov	r0, r5
60001b12:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b14:	4628      	mov	r0, r5
60001b16:	f000 fd7f 	bl	60002618 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001b1a:	0637      	lsls	r7, r6, #24
60001b1c:	d47d      	bmi.n	60001c1a <CrashReportClass::printTo(Print&) const+0x5c6>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001b1e:	05f4      	lsls	r4, r6, #23
60001b20:	d45c      	bmi.n	60001bdc <CrashReportClass::printTo(Print&) const+0x588>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001b22:	05b0      	lsls	r0, r6, #22
60001b24:	f100 80e4 	bmi.w	60001cf0 <CrashReportClass::printTo(Print&) const+0x69c>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001b28:	0571      	lsls	r1, r6, #21
60001b2a:	f100 80dd 	bmi.w	60001ce8 <CrashReportClass::printTo(Print&) const+0x694>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001b2e:	0532      	lsls	r2, r6, #20
60001b30:	f100 80ee 	bmi.w	60001d10 <CrashReportClass::printTo(Print&) const+0x6bc>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001b34:	04f3      	lsls	r3, r6, #19
60001b36:	f100 80e7 	bmi.w	60001d08 <CrashReportClass::printTo(Print&) const+0x6b4>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001b3a:	04b7      	lsls	r7, r6, #18
60001b3c:	d557      	bpl.n	60001bee <CrashReportClass::printTo(Print&) const+0x59a>
							  return write((const uint8_t *)str, strlen(str)); }
60001b3e:	682b      	ldr	r3, [r5, #0]
60001b40:	2231      	movs	r2, #49	; 0x31
60001b42:	4920      	ldr	r1, [pc, #128]	; (60001bc4 <CrashReportClass::printTo(Print&) const+0x570>)
60001b44:	e04d      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001b46:	bf00      	nop
60001b48:	20007b14 	.word	0x20007b14
60001b4c:	88888889 	.word	0x88888889
60001b50:	20007b24 	.word	0x20007b24
60001b54:	aaaaaaab 	.word	0xaaaaaaab
60001b58:	20007b4c 	.word	0x20007b4c
60001b5c:	20007b50 	.word	0x20007b50
60001b60:	2027ff00 	.word	0x2027ff00
60001b64:	20007fd8 	.word	0x20007fd8
60001b68:	20007ffc 	.word	0x20007ffc
60001b6c:	20008004 	.word	0x20008004
60001b70:	200085d0 	.word	0x200085d0
60001b74:	431bde83 	.word	0x431bde83
60001b78:	20008024 	.word	0x20008024
60001b7c:	200082e8 	.word	0x200082e8
60001b80:	2000830c 	.word	0x2000830c
60001b84:	400f8000 	.word	0x400f8000
60001b88:	20008338 	.word	0x20008338
60001b8c:	2000835c 	.word	0x2000835c
60001b90:	400d4000 	.word	0x400d4000
60001b94:	400ac000 	.word	0x400ac000
60001b98:	200082c4 	.word	0x200082c4
60001b9c:	20008298 	.word	0x20008298
60001ba0:	20008270 	.word	0x20008270
60001ba4:	20008244 	.word	0x20008244
60001ba8:	2000821c 	.word	0x2000821c
60001bac:	2000818c 	.word	0x2000818c
60001bb0:	20007b78 	.word	0x20007b78
60001bb4:	20007c28 	.word	0x20007c28
60001bb8:	20007f88 	.word	0x20007f88
60001bbc:	20007fbc 	.word	0x20007fbc
60001bc0:	20007b84 	.word	0x20007b84
60001bc4:	20007e4c 	.word	0x20007e4c
60001bc8:	682b      	ldr	r3, [r5, #0]
60001bca:	2226      	movs	r2, #38	; 0x26
60001bcc:	495c      	ldr	r1, [pc, #368]	; (60001d40 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001bce:	4628      	mov	r0, r5
60001bd0:	685b      	ldr	r3, [r3, #4]
60001bd2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bd4:	4628      	mov	r0, r5
60001bd6:	f000 fd1f 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001bda:	e6c1      	b.n	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001bdc:	682b      	ldr	r3, [r5, #0]
60001bde:	2220      	movs	r2, #32
60001be0:	4958      	ldr	r1, [pc, #352]	; (60001d44 <CrashReportClass::printTo(Print&) const+0x6f0>)
60001be2:	685b      	ldr	r3, [r3, #4]
60001be4:	4628      	mov	r0, r5
60001be6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001be8:	4628      	mov	r0, r5
60001bea:	f000 fd15 	bl	60002618 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001bee:	0434      	lsls	r4, r6, #16
60001bf0:	d43f      	bmi.n	60001c72 <CrashReportClass::printTo(Print&) const+0x61e>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001bf2:	03f0      	lsls	r0, r6, #15
60001bf4:	d42d      	bmi.n	60001c52 <CrashReportClass::printTo(Print&) const+0x5fe>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001bf6:	03b1      	lsls	r1, r6, #14
60001bf8:	f100 8082 	bmi.w	60001d00 <CrashReportClass::printTo(Print&) const+0x6ac>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001bfc:	0372      	lsls	r2, r6, #13
60001bfe:	d44a      	bmi.n	60001c96 <CrashReportClass::printTo(Print&) const+0x642>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001c00:	0333      	lsls	r3, r6, #12
60001c02:	f100 8091 	bmi.w	60001d28 <CrashReportClass::printTo(Print&) const+0x6d4>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001c06:	01f7      	lsls	r7, r6, #7
60001c08:	f100 808a 	bmi.w	60001d20 <CrashReportClass::printTo(Print&) const+0x6cc>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001c0c:	01b4      	lsls	r4, r6, #6
60001c0e:	f57f aea1 	bpl.w	60001954 <CrashReportClass::printTo(Print&) const+0x300>
							  return write((const uint8_t *)str, strlen(str)); }
60001c12:	682b      	ldr	r3, [r5, #0]
60001c14:	221b      	movs	r2, #27
60001c16:	494c      	ldr	r1, [pc, #304]	; (60001d48 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001c18:	e01e      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001c1a:	682b      	ldr	r3, [r5, #0]
60001c1c:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001c1e:	4c4b      	ldr	r4, [pc, #300]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001c20:	4628      	mov	r0, r5
60001c22:	494b      	ldr	r1, [pc, #300]	; (60001d50 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001c24:	685b      	ldr	r3, [r3, #4]
60001c26:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c28:	2210      	movs	r2, #16
60001c2a:	2300      	movs	r3, #0
60001c2c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001c30:	4628      	mov	r0, r5
60001c32:	f000 fcf5 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001c36:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001c3a:	2a1f      	cmp	r2, #31
60001c3c:	d92f      	bls.n	60001c9e <CrashReportClass::printTo(Print&) const+0x64a>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001c3e:	4b45      	ldr	r3, [pc, #276]	; (60001d54 <CrashReportClass::printTo(Print&) const+0x700>)
60001c40:	429a      	cmp	r2, r3
60001c42:	d302      	bcc.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001c44:	3320      	adds	r3, #32
60001c46:	429a      	cmp	r2, r3
60001c48:	d372      	bcc.n	60001d30 <CrashReportClass::printTo(Print&) const+0x6dc>
        p.println();
60001c4a:	4628      	mov	r0, r5
60001c4c:	f000 fce4 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001c50:	e765      	b.n	60001b1e <CrashReportClass::printTo(Print&) const+0x4ca>
							  return write((const uint8_t *)str, strlen(str)); }
60001c52:	682b      	ldr	r3, [r5, #0]
60001c54:	2223      	movs	r2, #35	; 0x23
60001c56:	4940      	ldr	r1, [pc, #256]	; (60001d58 <CrashReportClass::printTo(Print&) const+0x704>)
60001c58:	685b      	ldr	r3, [r3, #4]
60001c5a:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001c5c:	4e3b      	ldr	r6, [pc, #236]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001c5e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c60:	4628      	mov	r0, r5
60001c62:	f000 fcd9 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001c66:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001c6a:	2c00      	cmp	r4, #0
60001c6c:	f43f ae78 	beq.w	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
60001c70:	e731      	b.n	60001ad6 <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001c72:	682b      	ldr	r3, [r5, #0]
60001c74:	2221      	movs	r2, #33	; 0x21
60001c76:	4939      	ldr	r1, [pc, #228]	; (60001d5c <CrashReportClass::printTo(Print&) const+0x708>)
60001c78:	4628      	mov	r0, r5
60001c7a:	685b      	ldr	r3, [r3, #4]
60001c7c:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001c7e:	4933      	ldr	r1, [pc, #204]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c80:	2300      	movs	r3, #0
60001c82:	2210      	movs	r2, #16
60001c84:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001c88:	4628      	mov	r0, r5
60001c8a:	f000 fcc9 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001c8e:	4628      	mov	r0, r5
60001c90:	f000 fcc2 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001c94:	e7ad      	b.n	60001bf2 <CrashReportClass::printTo(Print&) const+0x59e>
							  return write((const uint8_t *)str, strlen(str)); }
60001c96:	682b      	ldr	r3, [r5, #0]
60001c98:	2228      	movs	r2, #40	; 0x28
60001c9a:	4931      	ldr	r1, [pc, #196]	; (60001d60 <CrashReportClass::printTo(Print&) const+0x70c>)
60001c9c:	e7dc      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001c9e:	682b      	ldr	r3, [r5, #0]
60001ca0:	221e      	movs	r2, #30
60001ca2:	4930      	ldr	r1, [pc, #192]	; (60001d64 <CrashReportClass::printTo(Print&) const+0x710>)
60001ca4:	4628      	mov	r0, r5
60001ca6:	685b      	ldr	r3, [r3, #4]
60001ca8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001caa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001cae:	2300      	movs	r3, #0
60001cb0:	2210      	movs	r2, #16
60001cb2:	4628      	mov	r0, r5
60001cb4:	f000 fcb4 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cb8:	682b      	ldr	r3, [r5, #0]
60001cba:	223e      	movs	r2, #62	; 0x3e
60001cbc:	492a      	ldr	r1, [pc, #168]	; (60001d68 <CrashReportClass::printTo(Print&) const+0x714>)
60001cbe:	685b      	ldr	r3, [r3, #4]
60001cc0:	4628      	mov	r0, r5
60001cc2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cc4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001cc8:	2300      	movs	r3, #0
60001cca:	2210      	movs	r2, #16
60001ccc:	4628      	mov	r0, r5
60001cce:	f000 fca7 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cd2:	682b      	ldr	r3, [r5, #0]
60001cd4:	221d      	movs	r2, #29
60001cd6:	4925      	ldr	r1, [pc, #148]	; (60001d6c <CrashReportClass::printTo(Print&) const+0x718>)
60001cd8:	685b      	ldr	r3, [r3, #4]
60001cda:	4628      	mov	r0, r5
60001cdc:	4798      	blx	r3
60001cde:	e7b4      	b.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001ce0:	682b      	ldr	r3, [r5, #0]
60001ce2:	2229      	movs	r2, #41	; 0x29
60001ce4:	4922      	ldr	r1, [pc, #136]	; (60001d70 <CrashReportClass::printTo(Print&) const+0x71c>)
60001ce6:	e712      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001ce8:	682b      	ldr	r3, [r5, #0]
60001cea:	2244      	movs	r2, #68	; 0x44
60001cec:	4921      	ldr	r1, [pc, #132]	; (60001d74 <CrashReportClass::printTo(Print&) const+0x720>)
60001cee:	e778      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001cf0:	682b      	ldr	r3, [r5, #0]
60001cf2:	222c      	movs	r2, #44	; 0x2c
60001cf4:	4920      	ldr	r1, [pc, #128]	; (60001d78 <CrashReportClass::printTo(Print&) const+0x724>)
60001cf6:	e774      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001cf8:	682b      	ldr	r3, [r5, #0]
60001cfa:	2221      	movs	r2, #33	; 0x21
60001cfc:	491f      	ldr	r1, [pc, #124]	; (60001d7c <CrashReportClass::printTo(Print&) const+0x728>)
60001cfe:	e706      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001d00:	682b      	ldr	r3, [r5, #0]
60001d02:	2232      	movs	r2, #50	; 0x32
60001d04:	491e      	ldr	r1, [pc, #120]	; (60001d80 <CrashReportClass::printTo(Print&) const+0x72c>)
60001d06:	e7a7      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d08:	682b      	ldr	r3, [r5, #0]
60001d0a:	2233      	movs	r2, #51	; 0x33
60001d0c:	491d      	ldr	r1, [pc, #116]	; (60001d84 <CrashReportClass::printTo(Print&) const+0x730>)
60001d0e:	e768      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001d10:	682b      	ldr	r3, [r5, #0]
60001d12:	223f      	movs	r2, #63	; 0x3f
60001d14:	491c      	ldr	r1, [pc, #112]	; (60001d88 <CrashReportClass::printTo(Print&) const+0x734>)
60001d16:	e764      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001d18:	682b      	ldr	r3, [r5, #0]
60001d1a:	2225      	movs	r2, #37	; 0x25
60001d1c:	491b      	ldr	r1, [pc, #108]	; (60001d8c <CrashReportClass::printTo(Print&) const+0x738>)
60001d1e:	e6f6      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001d20:	682b      	ldr	r3, [r5, #0]
60001d22:	2228      	movs	r2, #40	; 0x28
60001d24:	491a      	ldr	r1, [pc, #104]	; (60001d90 <CrashReportClass::printTo(Print&) const+0x73c>)
60001d26:	e797      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d28:	682b      	ldr	r3, [r5, #0]
60001d2a:	2216      	movs	r2, #22
60001d2c:	4919      	ldr	r1, [pc, #100]	; (60001d94 <CrashReportClass::printTo(Print&) const+0x740>)
60001d2e:	e793      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d30:	682b      	ldr	r3, [r5, #0]
60001d32:	2241      	movs	r2, #65	; 0x41
60001d34:	4918      	ldr	r1, [pc, #96]	; (60001d98 <CrashReportClass::printTo(Print&) const+0x744>)
60001d36:	4628      	mov	r0, r5
60001d38:	685b      	ldr	r3, [r3, #4]
60001d3a:	4798      	blx	r3
60001d3c:	e785      	b.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001d3e:	bf00      	nop
60001d40:	20007f94 	.word	0x20007f94
60001d44:	20007d3c 	.word	0x20007d3c
60001d48:	20007f6c 	.word	0x20007f6c
60001d4c:	2027ff00 	.word	0x2027ff00
60001d50:	20007c54 	.word	0x20007c54
60001d54:	200294e0 	.word	0x200294e0
60001d58:	20007ea4 	.word	0x20007ea4
60001d5c:	20007e80 	.word	0x20007e80
60001d60:	20007efc 	.word	0x20007efc
60001d64:	20007c78 	.word	0x20007c78
60001d68:	20007c98 	.word	0x20007c98
60001d6c:	20007cd8 	.word	0x20007cd8
60001d70:	20007bd4 	.word	0x20007bd4
60001d74:	20007d90 	.word	0x20007d90
60001d78:	20007d60 	.word	0x20007d60
60001d7c:	20007bb0 	.word	0x20007bb0
60001d80:	20007ec8 	.word	0x20007ec8
60001d84:	20007e18 	.word	0x20007e18
60001d88:	20007dd8 	.word	0x20007dd8
60001d8c:	20007c00 	.word	0x20007c00
60001d90:	20007f40 	.word	0x20007f40
60001d94:	20007f28 	.word	0x20007f28
60001d98:	20007cf8 	.word	0x20007cf8

60001d9c <CrashReportClass::clear()>:
	info->len = 0;
60001d9c:	4a0f      	ldr	r2, [pc, #60]	; (60001ddc <CrashReportClass::clear()+0x40>)
60001d9e:	2300      	movs	r3, #0
	info->ipsr  = 0;
60001da0:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->hfsr  = 0;
60001da4:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->bfar  = 0;
60001da8:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->xpsr  = 0;
60001dac:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001db0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	asm("dsb");
60001db4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
60001db8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001dbc:	4808      	ldr	r0, [pc, #32]	; (60001de0 <CrashReportClass::clear()+0x44>)
60001dbe:	4909      	ldr	r1, [pc, #36]	; (60001de4 <CrashReportClass::clear()+0x48>)
60001dc0:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
60001dc4:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
	asm("dsb");
60001dc8:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001dcc:	f3bf 8f6f 	isb	sy
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001dd0:	4a05      	ldr	r2, [pc, #20]	; (60001de8 <CrashReportClass::clear()+0x4c>)
60001dd2:	6891      	ldr	r1, [r2, #8]
60001dd4:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001dd6:	6313      	str	r3, [r2, #48]	; 0x30
}
60001dd8:	4770      	bx	lr
60001dda:	bf00      	nop
60001ddc:	2027ff00 	.word	0x2027ff00
60001de0:	2027ff80 	.word	0x2027ff80
60001de4:	2027ffa0 	.word	0x2027ffa0
60001de8:	400f8000 	.word	0x400f8000

60001dec <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001dec:	4b12      	ldr	r3, [pc, #72]	; (60001e38 <CrashReportClass::operator bool()+0x4c>)
60001dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001df2:	2b0b      	cmp	r3, #11
60001df4:	d11e      	bne.n	60001e34 <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001df6:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001dfa:	4810      	ldr	r0, [pc, #64]	; (60001e3c <CrashReportClass::operator bool()+0x50>)
{
60001dfc:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001dfe:	4d10      	ldr	r5, [pc, #64]	; (60001e40 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001e00:	4c10      	ldr	r4, [pc, #64]	; (60001e44 <CrashReportClass::operator bool()+0x58>)
60001e02:	e001      	b.n	60001e08 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001e04:	686b      	ldr	r3, [r5, #4]
60001e06:	4675      	mov	r5, lr
60001e08:	f105 0e04 	add.w	lr, r5, #4
60001e0c:	405a      	eors	r2, r3
60001e0e:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e10:	f002 0301 	and.w	r3, r2, #1
60001e14:	3901      	subs	r1, #1
60001e16:	fb00 f303 	mul.w	r3, r0, r3
60001e1a:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001e1e:	d1f7      	bne.n	60001e10 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001e20:	45a6      	cmp	lr, r4
60001e22:	d1ef      	bne.n	60001e04 <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001e24:	4b04      	ldr	r3, [pc, #16]	; (60001e38 <CrashReportClass::operator bool()+0x4c>)
60001e26:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001e2a:	1a80      	subs	r0, r0, r2
60001e2c:	fab0 f080 	clz	r0, r0
60001e30:	0940      	lsrs	r0, r0, #5
}
60001e32:	bd30      	pop	{r4, r5, pc}
	return false;
60001e34:	2000      	movs	r0, #0
}
60001e36:	4770      	bx	lr
60001e38:	2027ff00 	.word	0x2027ff00
60001e3c:	edb88320 	.word	0xedb88320
60001e40:	2027ff80 	.word	0x2027ff80
60001e44:	2027ffa8 	.word	0x2027ffa8

60001e48 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001e48:	4770      	bx	lr
60001e4a:	bf00      	nop

60001e4c <startup_default_middle_hook>:
60001e4c:	4770      	bx	lr
60001e4e:	bf00      	nop

60001e50 <startup_default_late_hook>:
60001e50:	4770      	bx	lr
60001e52:	bf00      	nop

60001e54 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001e54:	bf00      	nop
60001e56:	4770      	bx	lr

60001e58 <configure_cache>:
{
60001e58:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001e5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e5e:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e60:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e62:	482b      	ldr	r0, [pc, #172]	; (60001f10 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001e64:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e68:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e6c:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e6e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001e72:	4828      	ldr	r0, [pc, #160]	; (60001f14 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e74:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001e78:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001e7a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001e7e:	4826      	ldr	r0, [pc, #152]	; (60001f18 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001e80:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001e84:	4a25      	ldr	r2, [pc, #148]	; (60001f1c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001e86:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001e8a:	4c25      	ldr	r4, [pc, #148]	; (60001f20 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001e8c:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001e90:	4824      	ldr	r0, [pc, #144]	; (60001f24 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001e92:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001e96:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001e9a:	4c23      	ldr	r4, [pc, #140]	; (60001f28 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001e9c:	4823      	ldr	r0, [pc, #140]	; (60001f2c <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001e9e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001ea2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001ea6:	4c22      	ldr	r4, [pc, #136]	; (60001f30 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001ea8:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001eac:	4821      	ldr	r0, [pc, #132]	; (60001f34 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001eae:	4a22      	ldr	r2, [pc, #136]	; (60001f38 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001eb0:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001eb4:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001eb8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ebc:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ec0:	4c1e      	ldr	r4, [pc, #120]	; (60001f3c <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ec2:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ec4:	481e      	ldr	r0, [pc, #120]	; (60001f40 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ec6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001eca:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ece:	4a1d      	ldr	r2, [pc, #116]	; (60001f44 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ed0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001ed4:	4c1c      	ldr	r4, [pc, #112]	; (60001f48 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ed6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001eda:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001edc:	481b      	ldr	r0, [pc, #108]	; (60001f4c <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001ede:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001ee2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001ee6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001eea:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001eee:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001ef2:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001ef6:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001efa:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001efe:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001f02:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001f06:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001f0a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001f0e:	4770      	bx	lr
60001f10:	1000003f 	.word	0x1000003f
60001f14:	03080025 	.word	0x03080025
60001f18:	00100009 	.word	0x00100009
60001f1c:	200294e0 	.word	0x200294e0
60001f20:	00200013 	.word	0x00200013
60001f24:	07020021 	.word	0x07020021
60001f28:	20000014 	.word	0x20000014
60001f2c:	13080025 	.word	0x13080025
60001f30:	10000009 	.word	0x10000009
60001f34:	20200016 	.word	0x20200016
60001f38:	130b0027 	.word	0x130b0027
60001f3c:	40000017 	.word	0x40000017
60001f40:	60000018 	.word	0x60000018
60001f44:	070b002f 	.word	0x070b002f
60001f48:	70000019 	.word	0x70000019
60001f4c:	130b002f 	.word	0x130b002f

60001f50 <configure_external_ram>:
{
60001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f52:	4bb8      	ldr	r3, [pc, #736]	; (60002234 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f54:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f56:	4eb8      	ldr	r6, [pc, #736]	; (60002238 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f58:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f5a:	4fb8      	ldr	r7, [pc, #736]	; (6000223c <configure_external_ram+0x2ec>)
{
60001f5c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f5e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f62:	49b7      	ldr	r1, [pc, #732]	; (60002240 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f64:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f68:	4db6      	ldr	r5, [pc, #728]	; (60002244 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f6a:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001f6e:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001f72:	4cb5      	ldr	r4, [pc, #724]	; (60002248 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001f74:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f78:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f7c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f80:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f84:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001f88:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f8c:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001f8e:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001f90:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001f92:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001f94:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001fa2:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fa6:	4aa9      	ldr	r2, [pc, #676]	; (6000224c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001fa8:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001fac:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001fb0:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001fb4:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001fb8:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fbc:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001fbe:	4ba4      	ldr	r3, [pc, #656]	; (60002250 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fc0:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001fc2:	48a4      	ldr	r0, [pc, #656]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001fc4:	49a4      	ldr	r1, [pc, #656]	; (60002258 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001fc6:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fc8:	4aa4      	ldr	r2, [pc, #656]	; (6000225c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fca:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001fcc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001fd0:	f043 030c 	orr.w	r3, r3, #12
60001fd4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001fd8:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001fdc:	6803      	ldr	r3, [r0, #0]
60001fde:	f043 0302 	orr.w	r3, r3, #2
60001fe2:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001fe4:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fe6:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001fe8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fec:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001fee:	4b9c      	ldr	r3, [pc, #624]	; (60002260 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ff0:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001ff2:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ff4:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001ff6:	4c9b      	ldr	r4, [pc, #620]	; (60002264 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ff8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ffa:	4a9b      	ldr	r2, [pc, #620]	; (60002268 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002000:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60002002:	68c3      	ldr	r3, [r0, #12]
60002004:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60002008:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000200a:	6a03      	ldr	r3, [r0, #32]
6000200c:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000200e:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002010:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002012:	6a03      	ldr	r3, [r0, #32]
60002014:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60002016:	4a95      	ldr	r2, [pc, #596]	; (6000226c <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002018:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000201a:	4c95      	ldr	r4, [pc, #596]	; (60002270 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000201c:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000201e:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60002020:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60002022:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60002024:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60002028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000202c:	f043 0301 	orr.w	r3, r3, #1
60002030:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002034:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002038:	498e      	ldr	r1, [pc, #568]	; (60002274 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000203a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000203e:	f043 0301 	orr.w	r3, r3, #1
60002042:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002046:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000204a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000204c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000204e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002050:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002054:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002056:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002058:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000205a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000205e:	6803      	ldr	r3, [r0, #0]
60002060:	f023 0302 	bic.w	r3, r3, #2
60002064:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002066:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002068:	4b83      	ldr	r3, [pc, #524]	; (60002278 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000206a:	4984      	ldr	r1, [pc, #528]	; (6000227c <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000206c:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000206e:	f843 2b04 	str.w	r2, [r3], #4
60002072:	428b      	cmp	r3, r1
60002074:	d1fb      	bne.n	6000206e <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60002076:	4a77      	ldr	r2, [pc, #476]	; (60002254 <configure_external_ram+0x304>)
60002078:	6813      	ldr	r3, [r2, #0]
6000207a:	f043 0301 	orr.w	r3, r3, #1
6000207e:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60002080:	6813      	ldr	r3, [r2, #0]
60002082:	f013 0301 	ands.w	r3, r3, #1
60002086:	d1fb      	bne.n	60002080 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002088:	487a      	ldr	r0, [pc, #488]	; (60002274 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000208a:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
6000208c:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002090:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002092:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002096:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002098:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
6000209c:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020a0:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600020a4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020a8:	4975      	ldr	r1, [pc, #468]	; (60002280 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600020aa:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020ae:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020b2:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020b6:	4873      	ldr	r0, [pc, #460]	; (60002284 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020b8:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020bc:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600020c0:	4c71      	ldr	r4, [pc, #452]	; (60002288 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020c2:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600020c6:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600020ca:	4970      	ldr	r1, [pc, #448]	; (6000228c <configure_external_ram+0x33c>)
600020cc:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600020d0:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600020d2:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600020d6:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020da:	485e      	ldr	r0, [pc, #376]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600020dc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020e0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600020e4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020e8:	6943      	ldr	r3, [r0, #20]
600020ea:	07da      	lsls	r2, r3, #31
600020ec:	d5fc      	bpl.n	600020e8 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600020ee:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600020f0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020f6:	4957      	ldr	r1, [pc, #348]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600020f8:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600020fa:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020fe:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002102:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002106:	694b      	ldr	r3, [r1, #20]
60002108:	07db      	lsls	r3, r3, #31
6000210a:	d5fc      	bpl.n	60002106 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000210c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000210e:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002110:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002114:	4a4f      	ldr	r2, [pc, #316]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002116:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002118:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000211c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002120:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002124:	6953      	ldr	r3, [r2, #20]
60002126:	07df      	lsls	r7, r3, #31
60002128:	d5fc      	bpl.n	60002124 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000212a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000212c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000212e:	4858      	ldr	r0, [pc, #352]	; (60002290 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002130:	4948      	ldr	r1, [pc, #288]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002132:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002134:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002138:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000213c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002140:	694b      	ldr	r3, [r1, #20]
60002142:	07de      	lsls	r6, r3, #31
60002144:	d5fc      	bpl.n	60002140 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60002146:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000214a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000214e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60002150:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002152:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002154:	4293      	cmp	r3, r2
60002156:	d165      	bne.n	60002224 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002158:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000215a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000215e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002160:	483c      	ldr	r0, [pc, #240]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60002162:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002166:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000216a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000216e:	6943      	ldr	r3, [r0, #20]
60002170:	07dd      	lsls	r5, r3, #31
60002172:	d5fc      	bpl.n	6000216e <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002174:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002176:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000217a:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000217c:	4a35      	ldr	r2, [pc, #212]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000217e:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60002180:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002184:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002188:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000218c:	6953      	ldr	r3, [r2, #20]
6000218e:	07dc      	lsls	r4, r3, #31
60002190:	d5fc      	bpl.n	6000218c <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002192:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002194:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002198:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000219c:	492d      	ldr	r1, [pc, #180]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000219e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021a0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021a4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021a8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ac:	694b      	ldr	r3, [r1, #20]
600021ae:	07d8      	lsls	r0, r3, #31
600021b0:	d5fc      	bpl.n	600021ac <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021b2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021b4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021bc:	4a25      	ldr	r2, [pc, #148]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021be:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600021c0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021c4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021c8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021cc:	6953      	ldr	r3, [r2, #20]
600021ce:	07d9      	lsls	r1, r3, #31
600021d0:	d5fc      	bpl.n	600021cc <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021d2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021d4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021d8:	482d      	ldr	r0, [pc, #180]	; (60002290 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021da:	491e      	ldr	r1, [pc, #120]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021dc:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021de:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021e2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ea:	694b      	ldr	r3, [r1, #20]
600021ec:	07da      	lsls	r2, r3, #31
600021ee:	d5fc      	bpl.n	600021ea <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600021f0:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600021f4:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021f8:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600021fa:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021fc:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600021fe:	4293      	cmp	r3, r2
60002200:	d050      	beq.n	600022a4 <configure_external_ram+0x354>
60002202:	2508      	movs	r5, #8
60002204:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60002208:	4922      	ldr	r1, [pc, #136]	; (60002294 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
6000220a:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
6000220c:	4b22      	ldr	r3, [pc, #136]	; (60002298 <configure_external_ram+0x348>)
			external_psram_size = 16;
6000220e:	4a23      	ldr	r2, [pc, #140]	; (6000229c <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002210:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60002212:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60002214:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002216:	2301      	movs	r3, #1
60002218:	4821      	ldr	r0, [pc, #132]	; (600022a0 <configure_external_ram+0x350>)
6000221a:	4422      	add	r2, r4
6000221c:	f000 fa14 	bl	60002648 <__sm_set_pool_veneer>
}
60002220:	b003      	add	sp, #12
60002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60002224:	4b1e      	ldr	r3, [pc, #120]	; (600022a0 <configure_external_ram+0x350>)
60002226:	2200      	movs	r2, #0
60002228:	e9c3 2200 	strd	r2, r2, [r3]
6000222c:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60002230:	b003      	add	sp, #12
60002232:	bdf0      	pop	{r4, r5, r6, r7, pc}
60002234:	401f8000 	.word	0x401f8000
60002238:	0001b0f9 	.word	0x0001b0f9
6000223c:	000110f9 	.word	0x000110f9
60002240:	401f8400 	.word	0x401f8400
60002244:	000170f9 	.word	0x000170f9
60002248:	400fc000 	.word	0x400fc000
6000224c:	1ffffcff 	.word	0x1ffffcff
60002250:	a0000300 	.word	0xa0000300
60002254:	402a4000 	.word	0x402a4000
60002258:	402a8000 	.word	0x402a8000
6000225c:	ffff0012 	.word	0xffff0012
60002260:	00f737ff 	.word	0x00f737ff
60002264:	80000040 	.word	0x80000040
60002268:	7cf0ff00 	.word	0x7cf0ff00
6000226c:	830f00ff 	.word	0x830f00ff
60002270:	00020063 	.word	0x00020063
60002274:	5af05af0 	.word	0x5af05af0
60002278:	402a4200 	.word	0x402a4200
6000227c:	402a4300 	.word	0x402a4300
60002280:	3018049f 	.word	0x3018049f
60002284:	0a1806eb 	.word	0x0a1806eb
60002288:	0a180638 	.word	0x0a180638
6000228c:	26013206 	.word	0x26013206
60002290:	00030004 	.word	0x00030004
60002294:	70000000 	.word	0x70000000
60002298:	70000000 	.word	0x70000000
6000229c:	200294a3 	.word	0x200294a3
600022a0:	20028e40 	.word	0x20028e40
	FLEXSPI2_IPCR0 = addr;
600022a4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022ac:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022ae:	4808      	ldr	r0, [pc, #32]	; (600022d0 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
600022b0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022b4:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022b8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022bc:	6943      	ldr	r3, [r0, #20]
600022be:	07db      	lsls	r3, r3, #31
600022c0:	d5fc      	bpl.n	600022bc <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022c2:	2301      	movs	r3, #1
600022c4:	2510      	movs	r5, #16
600022c6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
600022ca:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
600022cc:	e79c      	b.n	60002208 <configure_external_ram+0x2b8>
600022ce:	bf00      	nop
600022d0:	402a4000 	.word	0x402a4000

600022d4 <usb_pll_start>:
{
600022d4:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600022d6:	4a15      	ldr	r2, [pc, #84]	; (6000232c <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600022d8:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600022da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600022de:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600022e2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600022e6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600022ea:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600022ee:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600022f0:	f013 0f02 	tst.w	r3, #2
600022f4:	d10e      	bne.n	60002314 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600022f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600022fa:	d00f      	beq.n	6000231c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600022fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60002300:	d00e      	beq.n	60002320 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60002302:	2b00      	cmp	r3, #0
60002304:	daf3      	bge.n	600022ee <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60002306:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000230a:	d10b      	bne.n	60002324 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000230c:	065b      	lsls	r3, r3, #25
6000230e:	d50b      	bpl.n	60002328 <usb_pll_start+0x54>
}
60002310:	bcf0      	pop	{r4, r5, r6, r7}
60002312:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002314:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60002316:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60002318:	6190      	str	r0, [r2, #24]
			continue;
6000231a:	e7e8      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000231c:	6155      	str	r5, [r2, #20]
			continue;
6000231e:	e7e6      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60002320:	6156      	str	r6, [r2, #20]
			continue;
60002322:	e7e4      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60002324:	6191      	str	r1, [r2, #24]
			continue;
60002326:	e7e2      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002328:	6157      	str	r7, [r2, #20]
			continue;
6000232a:	e7e0      	b.n	600022ee <usb_pll_start+0x1a>
6000232c:	400d8000 	.word	0x400d8000

60002330 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002330:	4a3f      	ldr	r2, [pc, #252]	; (60002430 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002332:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60002334:	493f      	ldr	r1, [pc, #252]	; (60002434 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002336:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000233a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000233e:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002342:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60002438 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002346:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000234a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 6000243c <tempmon_init+0x10c>
{
6000234e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002354:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002358:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000235c:	4d38      	ldr	r5, [pc, #224]	; (60002440 <tempmon_init+0x110>)
6000235e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002360:	4c38      	ldr	r4, [pc, #224]	; (60002444 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002362:	4839      	ldr	r0, [pc, #228]	; (60002448 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002364:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002366:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000236a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000236c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002374:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002378:	ee07 1a10 	vmov	s14, r1
6000237c:	4b33      	ldr	r3, [pc, #204]	; (6000244c <tempmon_init+0x11c>)
6000237e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002382:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002384:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002388:	4931      	ldr	r1, [pc, #196]	; (60002450 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002392:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002396:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000239a:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000239e:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023a2:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023aa:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023ae:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023b2:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600023b6:	4827      	ldr	r0, [pc, #156]	; (60002454 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023b8:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023bc:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023c0:	ee75 5a87 	vadd.f32	s11, s11, s14
600023c4:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023c8:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023cc:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023d0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023d8:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023e0:	ee16 3a10 	vmov	r3, s12
600023e4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023ec:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600023f0:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023f2:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023f6:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600023fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
600023fe:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60002402:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60002404:	4914      	ldr	r1, [pc, #80]	; (60002458 <tempmon_init+0x128>)
60002406:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000240a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000240e:	f043 0302 	orr.w	r3, r3, #2
60002412:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60002416:	4b11      	ldr	r3, [pc, #68]	; (6000245c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002418:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000241c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002420:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002424:	2201      	movs	r2, #1
}
60002426:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002428:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000242c:	4770      	bx	lr
6000242e:	bf00      	nop
60002430:	400d8100 	.word	0x400d8100
60002434:	401f4400 	.word	0x401f4400
60002438:	42aa0000 	.word	0x42aa0000
6000243c:	42b40000 	.word	0x42b40000
60002440:	20028f90 	.word	0x20028f90
60002444:	20028f8c 	.word	0x20028f8c
60002448:	20028f94 	.word	0x20028f94
6000244c:	20028f98 	.word	0x20028f98
60002450:	0fff0000 	.word	0x0fff0000
60002454:	e000e400 	.word	0xe000e400
60002458:	20008c00 	.word	0x20008c00
6000245c:	000084c9 	.word	0x000084c9

60002460 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002460:	4b31      	ldr	r3, [pc, #196]	; (60002528 <usb_init+0xc8>)
60002462:	f640 7261 	movw	r2, #3937	; 0xf61
{
60002466:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002468:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000246c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60002470:	f000 f8e2 	bl	60002638 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002474:	4a2d      	ldr	r2, [pc, #180]	; (6000252c <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60002476:	492e      	ldr	r1, [pc, #184]	; (60002530 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002478:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000247c:	482d      	ldr	r0, [pc, #180]	; (60002534 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000247e:	f043 0303 	orr.w	r3, r3, #3
60002482:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002486:	4b2c      	ldr	r3, [pc, #176]	; (60002538 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002488:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000248c:	6802      	ldr	r2, [r0, #0]
6000248e:	421a      	tst	r2, r3
60002490:	d103      	bne.n	6000249a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60002492:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60002496:	079a      	lsls	r2, r3, #30
60002498:	d01b      	beq.n	600024d2 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000249a:	4a25      	ldr	r2, [pc, #148]	; (60002530 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
6000249c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600024a0:	4b24      	ldr	r3, [pc, #144]	; (60002534 <usb_init+0xd4>)
600024a2:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600024a4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024a8:	f043 0302 	orr.w	r3, r3, #2
600024ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600024b0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024b4:	079b      	lsls	r3, r3, #30
600024b6:	d4fb      	bmi.n	600024b0 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600024bc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600024c0:	4b1c      	ldr	r3, [pc, #112]	; (60002534 <usb_init+0xd4>)
600024c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024c6:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600024ca:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600024cc:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
600024ce:	f000 f8c3 	bl	60002658 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600024d2:	4a18      	ldr	r2, [pc, #96]	; (60002534 <usb_init+0xd4>)
600024d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024d8:	4c15      	ldr	r4, [pc, #84]	; (60002530 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600024da:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600024dc:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024de:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024e0:	4b16      	ldr	r3, [pc, #88]	; (6000253c <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600024e2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024e4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024e8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024ec:	4618      	mov	r0, r3
600024ee:	f000 f887 	bl	60002600 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600024f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024f6:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600024f8:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600024fc:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002500:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60002502:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60002506:	641a      	str	r2, [r3, #64]	; 0x40
60002508:	4b0d      	ldr	r3, [pc, #52]	; (60002540 <usb_init+0xe0>)
6000250a:	4a0e      	ldr	r2, [pc, #56]	; (60002544 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000250c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60002510:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60002514:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60002518:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000251c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000251e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60002522:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60002526:	bd10      	pop	{r4, pc}
60002528:	400d8000 	.word	0x400d8000
6000252c:	400fc000 	.word	0x400fc000
60002530:	402e0000 	.word	0x402e0000
60002534:	400d9000 	.word	0x400d9000
60002538:	001e1c00 	.word	0x001e1c00
6000253c:	20000000 	.word	0x20000000
60002540:	20008c00 	.word	0x20008c00
60002544:	000086b1 	.word	0x000086b1

60002548 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60002548:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000254a:	4b0e      	ldr	r3, [pc, #56]	; (60002584 <_reboot_Teensyduino_+0x3c>)
6000254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000254e:	079b      	lsls	r3, r3, #30
60002550:	d400      	bmi.n	60002554 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60002552:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60002554:	b672      	cpsid	i
		USB1_USBCMD = 0;
60002556:	4b0c      	ldr	r3, [pc, #48]	; (60002588 <_reboot_Teensyduino_+0x40>)
60002558:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000255a:	4a0c      	ldr	r2, [pc, #48]	; (6000258c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
6000255c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002560:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002564:	490a      	ldr	r1, [pc, #40]	; (60002590 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002566:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000256a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000256c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000256e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002572:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60002576:	4807      	ldr	r0, [pc, #28]	; (60002594 <_reboot_Teensyduino_+0x4c>)
60002578:	4a07      	ldr	r2, [pc, #28]	; (60002598 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000257a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
6000257c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000257e:	689b      	ldr	r3, [r3, #8]
60002580:	4798      	blx	r3
	}
	__builtin_unreachable();
60002582:	bf00      	nop
60002584:	401f4400 	.word	0x401f4400
60002588:	402e0000 	.word	0x402e0000
6000258c:	400ac000 	.word	0x400ac000
60002590:	00200003 	.word	0x00200003
60002594:	20208000 	.word	0x20208000
60002598:	eb120000 	.word	0xeb120000

6000259c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000259c:	4b10      	ldr	r3, [pc, #64]	; (600025e0 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000259e:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025a0:	4a10      	ldr	r2, [pc, #64]	; (600025e4 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025a2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025a4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600025a8:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025aa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025ac:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600025b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025b2:	f441 7140 	orr.w	r1, r1, #768	; 0x300
600025b6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025b8:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600025ba:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600025bc:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025be:	061b      	lsls	r3, r3, #24
600025c0:	d4fc      	bmi.n	600025bc <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600025c2:	4a09      	ldr	r2, [pc, #36]	; (600025e8 <analog_init+0x4c>)
600025c4:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600025c8:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600025ca:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600025cc:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600025ce:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025d0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600025d4:	d1fb      	bne.n	600025ce <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600025d6:	4a05      	ldr	r2, [pc, #20]	; (600025ec <analog_init+0x50>)
600025d8:	7013      	strb	r3, [r2, #0]
}
600025da:	f85d 4b04 	ldr.w	r4, [sp], #4
600025de:	4770      	bx	lr
600025e0:	400fc000 	.word	0x400fc000
600025e4:	400c4000 	.word	0x400c4000
600025e8:	400c8000 	.word	0x400c8000
600025ec:	200294a2 	.word	0x200294a2

600025f0 <_init>:
600025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600025f2:	bf00      	nop
600025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
600025f6:	bc08      	pop	{r3}
600025f8:	469e      	mov	lr, r3
600025fa:	4770      	bx	lr
600025fc:	0000      	movs	r0, r0
	...

60002600 <__memset_veneer>:
60002600:	f85f f000 	ldr.w	pc, [pc]	; 60002604 <__memset_veneer+0x4>
60002604:	0000ba7d 	.word	0x0000ba7d

60002608 <____libc_init_array_veneer>:
60002608:	f85f f000 	ldr.w	pc, [pc]	; 6000260c <____libc_init_array_veneer+0x4>
6000260c:	0000bcf5 	.word	0x0000bcf5

60002610 <__set_arm_clock_veneer>:
60002610:	f85f f000 	ldr.w	pc, [pc]	; 60002614 <__set_arm_clock_veneer+0x4>
60002614:	00007c25 	.word	0x00007c25

60002618 <___ZN5Print7printlnEv_veneer>:
60002618:	f85f f000 	ldr.w	pc, [pc]	; 6000261c <___ZN5Print7printlnEv_veneer+0x4>
6000261c:	000079b1 	.word	0x000079b1

60002620 <___ZN5Print11printNumberEmhh_veneer>:
60002620:	f85f f000 	ldr.w	pc, [pc]	; 60002624 <___ZN5Print11printNumberEmhh_veneer+0x4>
60002624:	00007a05 	.word	0x00007a05

60002628 <__pwm_init_veneer>:
60002628:	f85f f000 	ldr.w	pc, [pc]	; 6000262c <__pwm_init_veneer+0x4>
6000262c:	0000973d 	.word	0x0000973d

60002630 <___ZN5Print5printEl_veneer>:
60002630:	f85f f000 	ldr.w	pc, [pc]	; 60002634 <___ZN5Print5printEl_veneer+0x4>
60002634:	00007999 	.word	0x00007999

60002638 <__usb_init_serialnumber_veneer>:
60002638:	f85f f000 	ldr.w	pc, [pc]	; 6000263c <__usb_init_serialnumber_veneer+0x4>
6000263c:	00008e21 	.word	0x00008e21

60002640 <___ZN5Print10printFloatEdh_veneer>:
60002640:	f85f f000 	ldr.w	pc, [pc]	; 60002644 <___ZN5Print10printFloatEdh_veneer+0x4>
60002644:	00007a31 	.word	0x00007a31

60002648 <__sm_set_pool_veneer>:
60002648:	f85f f000 	ldr.w	pc, [pc]	; 6000264c <__sm_set_pool_veneer+0x4>
6000264c:	00009881 	.word	0x00009881

60002650 <__main_veneer>:
60002650:	f85f f000 	ldr.w	pc, [pc]	; 60002654 <__main_veneer+0x4>
60002654:	000080d5 	.word	0x000080d5

60002658 <__delay_veneer>:
60002658:	f85f f000 	ldr.w	pc, [pc]	; 6000265c <__delay_veneer+0x4>
6000265c:	00007f15 	.word	0x00007f15

60002660 <__frame_dummy_init_array_entry>:
60002660:	00000045 00000815 000015b9 000074c5     E............t..
60002670:	000076f9                                .v..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;  // ref manual 20.3.3.1.3 page 1231
		uint32_t lo2 = SNVS_HPRTCLR;
		if (lo1 == lo2 && hi1 == hi2) {
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      2c:	1049      	asrs	r1, r1, #1
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	4770      	bx	lr
      38:	20008ec0 	.word	0x20008ec0
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
      3c:	20008ec0 	.word	0x20008ec0
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags) {
    return m_fFile   ? m_fFile->ls(pr, flags)
           : m_xFile ? m_xFile->ls(pr, flags)
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20028ed0 	.word	0x20028ed0
      64:	60020c00 	.word	0x60020c00

00000068 <loop>:
      68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
      6c:	4c83      	ldr	r4, [pc, #524]	; (27c <loop+0x214>)
      6e:	b08b      	sub	sp, #44	; 0x2c
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
      70:	4d83      	ldr	r5, [pc, #524]	; (280 <loop+0x218>)
      72:	6823      	ldr	r3, [r4, #0]
      74:	3301      	adds	r3, #1
      76:	6023      	str	r3, [r4, #0]
      78:	f001 faea 	bl	1650 <getDataCount()>
      7c:	882b      	ldrh	r3, [r5, #0]
  }
}
      7e:	4283      	cmp	r3, r0
    *m_xFile = *from.m_xFile;
      80:	4b80      	ldr	r3, [pc, #512]	; (284 <loop+0x21c>)
}
      82:	681a      	ldr	r2, [r3, #0]
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      84:	bf38      	it	cc
    char sign;
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	8028      	strhcc	r0, [r5, #0]
      88:	07d2      	lsls	r2, r2, #31
}
      8a:	d513      	bpl.n	b4 <loop+0x4c>
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	4f7e      	ldr	r7, [pc, #504]	; (288 <loop+0x220>)
      8e:	f009 f9b7 	bl	9400 <usb_serial_available>
      92:	b9f0      	cbnz	r0, d2 <loop+0x6a>
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
      94:	8838      	ldrh	r0, [r7, #0]
		buf[sizeof(buf) - 1] = '0';
      96:	4e7d      	ldr	r6, [pc, #500]	; (28c <loop+0x224>)
      98:	b200      	sxth	r0, r0
		i = sizeof(buf) - 1;
      9a:	f001 f9b9 	bl	1410 <saveData(short)>
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
      9e:	4b7c      	ldr	r3, [pc, #496]	; (290 <loop+0x228>)
      a0:	8038      	strh	r0, [r7, #0]
      a2:	681f      	ldr	r7, [r3, #0]
  uint32_t freeClusterCount() {
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    if (switchSpi && !setDedicatedSpi(true)) {
      return 0;
    }
    uint32_t rtn = Vol::freeClusterCount();
      a4:	6833      	ldr	r3, [r6, #0]
      a6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
      aa:	42bb      	cmp	r3, r7
      ac:	d31b      	bcc.n	e6 <loop+0x7e>
      ae:	b00b      	add	sp, #44	; 0x2c
      b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static void i2c_write_data(uint8_t address, uint8_t reg, uint8_t *buffer, uint16_t nbuf)
{
  Wire.beginTransmission(address);
  Wire.write(reg);
  for(int ii=0; ii<nbuf; ii++) Wire.write(buffer[ii]);
      b4:	4a77      	ldr	r2, [pc, #476]	; (294 <loop+0x22c>)
      b6:	4f74      	ldr	r7, [pc, #464]	; (288 <loop+0x220>)
      b8:	6812      	ldr	r2, [r2, #0]
      ba:	2a01      	cmp	r2, #1
  return str - name;

fail:
  *name = 0;
  return 0;
}
      bc:	f04f 32ff 	mov.w	r2, #4294967295
      c0:	bf18      	it	ne
  for (uint8_t is = 2; is <= m_setCount; is++) {
      c2:	2200      	movne	r2, #0
      c4:	803a      	strh	r2, [r7, #0]
      c6:	2201      	movs	r2, #1
      c8:	601a      	str	r2, [r3, #0]
      ca:	f009 f999 	bl	9400 <usb_serial_available>
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      ce:	2800      	cmp	r0, #0
}
      d0:	d0e0      	beq.n	94 <loop+0x2c>
	while (newdiv > 65535 && prescale < 7) {
      d2:	f009 f9d9 	bl	9488 <usb_serial_getchar>
      d6:	b2c0      	uxtb	r0, r0
      d8:	2873      	cmp	r0, #115	; 0x73
      da:	d026      	beq.n	12a <loop+0xc2>
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    else if (c == '.')
      isFraction = true;
      dc:	2865      	cmp	r0, #101	; 0x65
      de:	d11c      	bne.n	11a <loop+0xb2>
      e0:	2304      	movs	r3, #4
    return 0; // zero returned if timeout
      e2:	803b      	strh	r3, [r7, #0]
      e4:	e7d6      	b.n	94 <loop+0x2c>
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      e6:	a808      	add	r0, sp, #32
      e8:	f001 fc76 	bl	19d8 <rtc_get_datetime(datetime_t*)>
      ec:	4b6a      	ldr	r3, [pc, #424]	; (298 <loop+0x230>)
      ee:	f9b3 3000 	ldrsh.w	r3, [r3]
      f2:	b9eb      	cbnz	r3, 130 <loop+0xc8>
      f4:	4b69      	ldr	r3, [pc, #420]	; (29c <loop+0x234>)
      f6:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 2dc <loop+0x274>
      fa:	9306      	str	r3, [sp, #24]
      fc:	4b68      	ldr	r3, [pc, #416]	; (2a0 <loop+0x238>)
      fe:	9307      	str	r3, [sp, #28]
     100:	2300      	movs	r3, #0
     102:	9a06      	ldr	r2, [sp, #24]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     104:	6037      	str	r7, [r6, #0]
     106:	6013      	str	r3, [r2, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
     108:	9a07      	ldr	r2, [sp, #28]
     10a:	6023      	str	r3, [r4, #0]
     10c:	f8cb 3000 	str.w	r3, [fp]
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          break;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
     110:	802b      	strh	r3, [r5, #0]
     112:	6013      	str	r3, [r2, #0]
     114:	b00b      	add	sp, #44	; 0x2c
     116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     11a:	286d      	cmp	r0, #109	; 0x6d
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     11c:	d17d      	bne.n	21a <loop+0x1b2>
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     11e:	4a5e      	ldr	r2, [pc, #376]	; (298 <loop+0x230>)
     120:	8813      	ldrh	r3, [r2, #0]
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     122:	f1c3 0301 	rsb	r3, r3, #1
     126:	8013      	strh	r3, [r2, #0]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     128:	e7b4      	b.n	94 <loop+0x2c>
				break;
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     12a:	2300      	movs	r3, #0
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     12c:	803b      	strh	r3, [r7, #0]
     12e:	e7b1      	b.n	94 <loop+0x2c>
     130:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
	if (!wait_idle()) return 4;
     134:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
	return rxBufferLength;
}
     138:	9304      	str	r3, [sp, #16]
     13a:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
     13e:	4959      	ldr	r1, [pc, #356]	; (2a4 <loop+0x23c>)
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     140:	9303      	str	r3, [sp, #12]
     142:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     146:	4858      	ldr	r0, [pc, #352]	; (2a8 <loop+0x240>)
     148:	9302      	str	r3, [sp, #8]
     14a:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
     14e:	f8df b18c 	ldr.w	fp, [pc, #396]	; 2dc <loop+0x274>
     152:	9301      	str	r3, [sp, #4]
     154:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     158:	9300      	str	r3, [sp, #0]
     15a:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     15e:	f007 fc43 	bl	79e8 <Print::printf(char const*, ...)>
     162:	2103      	movs	r1, #3
        if (flags & T_CREATE) {
          df->createTimeMs = ms10;
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
     164:	4851      	ldr	r0, [pc, #324]	; (2ac <loop+0x244>)
     166:	f009 f9b5 	bl	94d4 <usb_serial_write>
     16a:	2300      	movs	r3, #0
     16c:	220a      	movs	r2, #10
     16e:	6821      	ldr	r1, [r4, #0]
  bool skip = data[0] == EXFAT_TYPE_FILE;
     170:	484d      	ldr	r0, [pc, #308]	; (2a8 <loop+0x240>)
     172:	f007 fc47 	bl	7a04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     176:	2101      	movs	r1, #1
     178:	484d      	ldr	r0, [pc, #308]	; (2b0 <loop+0x248>)
     17a:	f009 f9ab 	bl	94d4 <usb_serial_write>
	n = __builtin_bswap32(n);
     17e:	4b47      	ldr	r3, [pc, #284]	; (29c <loop+0x234>)
     180:	220a      	movs	r2, #10
     182:	f8db 1000 	ldr.w	r1, [fp]
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     186:	9306      	str	r3, [sp, #24]
     188:	2300      	movs	r3, #0
     18a:	4847      	ldr	r0, [pc, #284]	; (2a8 <loop+0x240>)
     18c:	f007 fc3a 	bl	7a04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     190:	2101      	movs	r1, #1
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     192:	4847      	ldr	r0, [pc, #284]	; (2b0 <loop+0x248>)
     194:	f009 f99e 	bl	94d4 <usb_serial_write>
     198:	9906      	ldr	r1, [sp, #24]
     19a:	2300      	movs	r3, #0
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     19c:	220a      	movs	r2, #10
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     19e:	6809      	ldr	r1, [r1, #0]
     1a0:	4841      	ldr	r0, [pc, #260]	; (2a8 <loop+0x240>)
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     1a2:	f007 fc2f 	bl	7a04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	n = __builtin_bswap32(n);
     1a6:	2101      	movs	r1, #1
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     1a8:	4841      	ldr	r0, [pc, #260]	; (2b0 <loop+0x248>)
     1aa:	f009 f993 	bl	94d4 <usb_serial_write>
	if (priority(ch3) < priority(ch4)) swap(ch3, ch4);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
     1ae:	4b3c      	ldr	r3, [pc, #240]	; (2a0 <loop+0x238>)
     1b0:	882a      	ldrh	r2, [r5, #0]
	c = c1.channel;
     1b2:	4940      	ldr	r1, [pc, #256]	; (2b4 <loop+0x24c>)
	c1.channel = c2.channel;
     1b4:	483c      	ldr	r0, [pc, #240]	; (2a8 <loop+0x240>)
	c2.channel = c;
     1b6:	9307      	str	r3, [sp, #28]
	c1.TCD = c2.TCD;
     1b8:	f007 fc16 	bl	79e8 <Print::printf(char const*, ...)>
     1bc:	2102      	movs	r1, #2
	c2.TCD = t;
     1be:	483e      	ldr	r0, [pc, #248]	; (2b8 <loop+0x250>)
}
     1c0:	f009 f988 	bl	94d4 <usb_serial_write>
     1c4:	9907      	ldr	r1, [sp, #28]
     1c6:	2300      	movs	r3, #0
     1c8:	220a      	movs	r2, #10
     1ca:	6809      	ldr	r1, [r1, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     1cc:	4836      	ldr	r0, [pc, #216]	; (2a8 <loop+0x240>)
     1ce:	f007 fc19 	bl	7a04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  bool syncDevice() { return m_blockDev->syncDevice(); }
     1d2:	2104      	movs	r1, #4
     1d4:	4839      	ldr	r0, [pc, #228]	; (2bc <loop+0x254>)
     1d6:	f009 f97d 	bl	94d4 <usb_serial_write>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
     1da:	4b39      	ldr	r3, [pc, #228]	; (2c0 <loop+0x258>)
     1dc:	f9b3 3000 	ldrsh.w	r3, [r3]
     1e0:	bb5b      	cbnz	r3, 23a <loop+0x1d2>
     1e2:	4699      	mov	r9, r3
     1e4:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 2e0 <loop+0x278>
     1e8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2a8 <loop+0x240>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
     1ec:	4b35      	ldr	r3, [pc, #212]	; (2c4 <loop+0x25c>)
     1ee:	4651      	mov	r1, sl
     1f0:	4640      	mov	r0, r8
     1f2:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     1f6:	f109 0901 	add.w	r9, r9, #1

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
     1fa:	f007 fbf5 	bl	79e8 <Print::printf(char const*, ...)>
			if (d > 2) {
     1fe:	f1b9 0f08 	cmp.w	r9, #8
				div = d-2;
     202:	d1f3      	bne.n	1ec <loop+0x184>
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     204:	4b30      	ldr	r3, [pc, #192]	; (2c8 <loop+0x260>)
     206:	4931      	ldr	r1, [pc, #196]	; (2cc <loop+0x264>)
     208:	681a      	ldr	r2, [r3, #0]
     20a:	4827      	ldr	r0, [pc, #156]	; (2a8 <loop+0x240>)
     20c:	f007 fbec 	bl	79e8 <Print::printf(char const*, ...)>
     210:	2102      	movs	r1, #2
     212:	4829      	ldr	r0, [pc, #164]	; (2b8 <loop+0x250>)
     214:	f009 f95e 	bl	94d4 <usb_serial_write>
     218:	e772      	b.n	100 <loop+0x98>
     21a:	283a      	cmp	r0, #58	; 0x3a
     21c:	d102      	bne.n	224 <loop+0x1bc>
     21e:	f001 fc9d 	bl	1b5c <menu1()>
     222:	e737      	b.n	94 <loop+0x2c>
     224:	283f      	cmp	r0, #63	; 0x3f
     226:	d102      	bne.n	22e <loop+0x1c6>
     228:	f001 fca2 	bl	1b70 <menu2()>
     22c:	e732      	b.n	94 <loop+0x2c>
     22e:	2821      	cmp	r0, #33	; 0x21
     230:	f47f af30 	bne.w	94 <loop+0x2c>
void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     234:	f001 fd68 	bl	1d08 <menu3()>
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     238:	e72c      	b.n	94 <loop+0x2c>
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2e4 <loop+0x27c>
     23e:	4924      	ldr	r1, [pc, #144]	; (2d0 <loop+0x268>)
};
     240:	f8df 9064 	ldr.w	r9, [pc, #100]	; 2a8 <loop+0x240>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     244:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     248:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     24c:	4648      	mov	r0, r9
     24e:	f007 fbcb 	bl	79e8 <Print::printf(char const*, ...)>
     252:	491f      	ldr	r1, [pc, #124]	; (2d0 <loop+0x268>)
     254:	45d0      	cmp	r8, sl
     256:	d1f7      	bne.n	248 <loop+0x1e0>
     258:	f8df 808c 	ldr.w	r8, [pc, #140]	; 2e8 <loop+0x280>
     25c:	491d      	ldr	r1, [pc, #116]	; (2d4 <loop+0x26c>)
     25e:	f8d8 2000 	ldr.w	r2, [r8]
     262:	4811      	ldr	r0, [pc, #68]	; (2a8 <loop+0x240>)
     264:	f007 fbc0 	bl	79e8 <Print::printf(char const*, ...)>
     268:	2260      	movs	r2, #96	; 0x60
     26a:	2100      	movs	r1, #0
     26c:	481a      	ldr	r0, [pc, #104]	; (2d8 <loop+0x270>)
     26e:	f00b fc05 	bl	ba7c <memset>
     272:	2300      	movs	r3, #0
     274:	f8c8 3000 	str.w	r3, [r8]
      {
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
        Serial.printf("%2d",max_stat);

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
        max_stat=0;        
     278:	e7c4      	b.n	204 <loop+0x19c>
     27a:	bf00      	nop
     27c:	200288b4 	.word	0x200288b4
     280:	20029488 	.word	0x20029488
     284:	2000c53c 	.word	0x2000c53c
     288:	2002948a 	.word	0x2002948a
     28c:	200288b0 	.word	0x200288b0
     290:	2002945c 	.word	0x2002945c
     294:	20029470 	.word	0x20029470
     298:	2002948c 	.word	0x2002948c
     29c:	20028eec 	.word	0x20028eec
     2a0:	20028e28 	.word	0x20028e28
     2a4:	20007a48 	.word	0x20007a48
     2a8:	200085d4 	.word	0x200085d4
     2ac:	20007a6c 	.word	0x20007a6c
     2b0:	20000440 	.word	0x20000440
     2b4:	20007a70 	.word	0x20007a70
     2b8:	20007a74 	.word	0x20007a74
     2bc:	20007a78 	.word	0x20007a78
     2c0:	20029490 	.word	0x20029490
     2c4:	20028ea8 	.word	0x20028ea8
     2c8:	20028e24 	.word	0x20028e24
     2cc:	20007a94 	.word	0x20007a94
     2d0:	20007a88 	.word	0x20007a88
     2d4:	20007a90 	.word	0x20007a90
     2d8:	20028ef0 	.word	0x20028ef0
     2dc:	20028ee8 	.word	0x20028ee8
     2e0:	20007a80 	.word	0x20007a80
     2e4:	20028eec 	.word	0x20028eec
     2e8:	20028ec8 	.word	0x20028ec8

000002ec <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(1);} // wait for setup() to finish
     2ec:	b510      	push	{r4, lr}
     2ee:	4c0b      	ldr	r4, [pc, #44]	; (31c <setup1()+0x30>)
     2f0:	6823      	ldr	r3, [r4, #0]
     2f2:	b92b      	cbnz	r3, 300 <setup1()+0x14>
     2f4:	2001      	movs	r0, #1
     2f6:	f007 fe0d 	bl	7f14 <delay>
     2fa:	6823      	ldr	r3, [r4, #0]
     2fc:	2b00      	cmp	r3, #0
     2fe:	d0f9      	beq.n	2f4 <setup1()+0x8>
  i2s_setup();
     300:	f000 f9dc 	bl	6bc <i2s_setup()>
  dma_setup();
     304:	f000 fa20 	bl	748 <dma_setup()>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     308:	210b      	movs	r1, #11
     30a:	4805      	ldr	r0, [pc, #20]	; (320 <setup1()+0x34>)
     30c:	f009 f8e2 	bl	94d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     310:	4804      	ldr	r0, [pc, #16]	; (324 <setup1()+0x38>)

  Serial.println("Setup1 done");
}
     312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     316:	f007 bb4b 	b.w	79b0 <Print::println()>
     31a:	bf00      	nop
     31c:	20028f50 	.word	0x20028f50
     320:	2000051c 	.word	0x2000051c
     324:	200085d4 	.word	0x200085d4

00000328 <setup>:
{
     328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     32c:	4d4c      	ldr	r5, [pc, #304]	; (460 <setup+0x138>)
     32e:	b087      	sub	sp, #28
     330:	4c4c      	ldr	r4, [pc, #304]	; (464 <setup+0x13c>)
				if (elapsed > 750) break;
     332:	f240 28ee 	movw	r8, #750	; 0x2ee
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     336:	4f4c      	ldr	r7, [pc, #304]	; (468 <setup+0x140>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     338:	f8df 9154 	ldr.w	r9, [pc, #340]	; 490 <setup+0x168>
		uint32_t millis_begin = systick_millis_count;
     33c:	682e      	ldr	r6, [r5, #0]
		yield();
     33e:	f009 f947 	bl	95d0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     342:	7823      	ldrb	r3, [r4, #0]
     344:	2b00      	cmp	r3, #0
     346:	d069      	beq.n	41c <setup+0xf4>
     348:	783b      	ldrb	r3, [r7, #0]
     34a:	07da      	lsls	r2, r3, #31
     34c:	d566      	bpl.n	41c <setup+0xf4>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     34e:	682b      	ldr	r3, [r5, #0]
     350:	f8d9 2000 	ldr.w	r2, [r9]
     354:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     356:	2b0e      	cmp	r3, #14
     358:	d960      	bls.n	41c <setup+0xf4>
     35a:	682b      	ldr	r3, [r5, #0]
  while(millis()<10000) if(Serial) { termon=1; break;}
     35c:	f242 760f 	movw	r6, #9999	; 0x270f
     360:	42b3      	cmp	r3, r6
     362:	d813      	bhi.n	38c <setup+0x64>
     364:	4f40      	ldr	r7, [pc, #256]	; (468 <setup+0x140>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     366:	f8df 8128 	ldr.w	r8, [pc, #296]	; 490 <setup+0x168>
		yield();
     36a:	f009 f931 	bl	95d0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     36e:	7823      	ldrb	r3, [r4, #0]
     370:	2b00      	cmp	r3, #0
     372:	d05d      	beq.n	430 <setup+0x108>
     374:	783b      	ldrb	r3, [r7, #0]
     376:	07db      	lsls	r3, r3, #31
     378:	d55a      	bpl.n	430 <setup+0x108>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     37a:	682b      	ldr	r3, [r5, #0]
     37c:	f8d8 2000 	ldr.w	r2, [r8]
     380:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     382:	2b0e      	cmp	r3, #14
     384:	d954      	bls.n	430 <setup+0x108>
     386:	4b39      	ldr	r3, [pc, #228]	; (46c <setup+0x144>)
     388:	2201      	movs	r2, #1
     38a:	601a      	str	r2, [r3, #0]
    if(CrashReport) Serial.print(CrashReport);
     38c:	4838      	ldr	r0, [pc, #224]	; (470 <setup+0x148>)
     38e:	f014 f8f3 	bl	14578 <___ZN16CrashReportClasscvbEv_veneer>
     392:	2800      	cmp	r0, #0
     394:	d154      	bne.n	440 <setup+0x118>
  rtc_setup();
     396:	2113      	movs	r1, #19
     398:	2012      	movs	r0, #18
     39a:	f001 fb1b 	bl	19d4 <rtc_setup(unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     39e:	2110      	movs	r1, #16
     3a0:	4834      	ldr	r0, [pc, #208]	; (474 <setup+0x14c>)
     3a2:	f009 f897 	bl	94d4 <usb_serial_write>
     3a6:	4834      	ldr	r0, [pc, #208]	; (478 <setup+0x150>)
     3a8:	f007 fb02 	bl	79b0 <Print::println()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     3ac:	a804      	add	r0, sp, #16
     3ae:	f001 fb13 	bl	19d8 <rtc_get_datetime(datetime_t*)>
     3b2:	2800      	cmp	r0, #0
     3b4:	d04c      	beq.n	450 <setup+0x128>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     3b6:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     3ba:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     3be:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     3c2:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     3c6:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     3ca:	e9cd 2102 	strd	r2, r1, [sp, #8]
     3ce:	e9cd 0400 	strd	r0, r4, [sp]
     3d2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  ready=1;
     3d6:	2401      	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     3d8:	4928      	ldr	r1, [pc, #160]	; (47c <setup+0x154>)
     3da:	4827      	ldr	r0, [pc, #156]	; (478 <setup+0x150>)
     3dc:	f007 fb04 	bl	79e8 <Print::printf(char const*, ...)>
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     3e0:	4825      	ldr	r0, [pc, #148]	; (478 <setup+0x150>)
     3e2:	f007 fae5 	bl	79b0 <Print::println()>
     3e6:	210b      	movs	r1, #11
     3e8:	4825      	ldr	r0, [pc, #148]	; (480 <setup+0x158>)
     3ea:	f009 f873 	bl	94d4 <usb_serial_write>
     3ee:	4822      	ldr	r0, [pc, #136]	; (478 <setup+0x150>)
     3f0:	f007 fade 	bl	79b0 <Print::println()>
  filing_init();
     3f4:	f000 fc5e 	bl	cb4 <filing_init()>
     3f8:	210a      	movs	r1, #10
     3fa:	4822      	ldr	r0, [pc, #136]	; (484 <setup+0x15c>)
     3fc:	f009 f86a 	bl	94d4 <usb_serial_write>
     400:	481d      	ldr	r0, [pc, #116]	; (478 <setup+0x150>)
     402:	f007 fad5 	bl	79b0 <Print::println()>
  ready=1;
     406:	4b20      	ldr	r3, [pc, #128]	; (488 <setup+0x160>)
     408:	601c      	str	r4, [r3, #0]
    setup1();
     40a:	f7ff ff6f 	bl	2ec <setup1()>
    pinMode(13,OUTPUT);
     40e:	4621      	mov	r1, r4
     410:	200d      	movs	r0, #13
     412:	f007 fe27 	bl	8064 <pinMode>
}
     416:	b007      	add	sp, #28
     418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     41c:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     41e:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     420:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     422:	b192      	cbz	r2, 44a <setup+0x122>
				if (elapsed > 2000) break;
     424:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     428:	d897      	bhi.n	35a <setup+0x32>
			yield();
     42a:	f009 f8d1 	bl	95d0 <yield>
     42e:	e786      	b.n	33e <setup+0x16>
     430:	682b      	ldr	r3, [r5, #0]
  while(millis()<10000) if(Serial) { termon=1; break;}
     432:	42b3      	cmp	r3, r6
     434:	d999      	bls.n	36a <setup+0x42>
    if(CrashReport) Serial.print(CrashReport);
     436:	480e      	ldr	r0, [pc, #56]	; (470 <setup+0x148>)
     438:	f014 f89e 	bl	14578 <___ZN16CrashReportClasscvbEv_veneer>
     43c:	2800      	cmp	r0, #0
     43e:	d0aa      	beq.n	396 <setup+0x6e>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     440:	490d      	ldr	r1, [pc, #52]	; (478 <setup+0x150>)
     442:	480b      	ldr	r0, [pc, #44]	; (470 <setup+0x148>)
     444:	f014 f89c 	bl	14580 <___ZNK16CrashReportClass7printToER5Print_veneer>
     448:	e7a5      	b.n	396 <setup+0x6e>
				if (elapsed > 750) break;
     44a:	4543      	cmp	r3, r8
     44c:	d9ed      	bls.n	42a <setup+0x102>
     44e:	e784      	b.n	35a <setup+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     450:	2114      	movs	r1, #20
     452:	480e      	ldr	r0, [pc, #56]	; (48c <setup+0x164>)
     454:	f009 f83e 	bl	94d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     458:	4807      	ldr	r0, [pc, #28]	; (478 <setup+0x150>)
     45a:	f007 faa9 	bl	79b0 <Print::println()>
     45e:	e7aa      	b.n	3b6 <setup+0x8e>
     460:	2002945c 	.word	0x2002945c
     464:	200294ab 	.word	0x200294ab
     468:	200294aa 	.word	0x200294aa
     46c:	20029470 	.word	0x20029470
     470:	200085c8 	.word	0x200085c8
     474:	20007aa8 	.word	0x20007aa8
     478:	200085d4 	.word	0x200085d4
     47c:	20007ad4 	.word	0x20007ad4
     480:	20007afc 	.word	0x20007afc
     484:	20007b08 	.word	0x20007b08
     488:	20028f50 	.word	0x20028f50
     48c:	20007abc 	.word	0x20007abc
     490:	2002947c 	.word	0x2002947c

00000494 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     494:	4b39      	ldr	r3, [pc, #228]	; (57c <acq_isr()+0xe8>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     496:	4a3a      	ldr	r2, [pc, #232]	; (580 <acq_isr()+0xec>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     498:	493a      	ldr	r1, [pc, #232]	; (584 <acq_isr()+0xf0>)
  {
     49a:	b510      	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     49c:	681c      	ldr	r4, [r3, #0]
     49e:	7918      	ldrb	r0, [r3, #4]
     4a0:	6923      	ldr	r3, [r4, #16]
     4a2:	77c8      	strb	r0, [r1, #31]
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     4a4:	4293      	cmp	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     4a6:	bf28      	it	cs
     4a8:	f5a2 6280 	subcs.w	r2, r2, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     4ac:	4611      	mov	r1, r2
	asm("dsb");
     4ae:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
     4b2:	f502 6080 	add.w	r0, r2, #1024	; 0x400
     4b6:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
     4ba:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
     4be:	4298      	cmp	r0, r3
     4c0:	bf34      	ite	cc
     4c2:	2001      	movcc	r0, #1
     4c4:	2020      	movcs	r0, #32
     4c6:	eb02 1040 	add.w	r0, r2, r0, lsl #5
	} while (location < end_addr);
     4ca:	4283      	cmp	r3, r0
		SCB_CACHE_DCIMVAC = location;
     4cc:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
     4d0:	461a      	mov	r2, r3
	} while (location < end_addr);
     4d2:	f103 0320 	add.w	r3, r3, #32
     4d6:	d1f8      	bne.n	4ca <acq_isr()+0x36>
	asm("dsb");
     4d8:	f3bf 8f4f 	dsb	sy
	asm("isb");
     4dc:	f3bf 8f6f 	isb	sy
        arm_dcache_delete((void*)src, sizeof(i2s_buffer) / 2);
    #endif

    // extract data
    #if NCH==1
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     4e0:	4b29      	ldr	r3, [pc, #164]	; (588 <acq_isr()+0xf4>)
     4e2:	2200      	movs	r2, #0
     4e4:	4c29      	ldr	r4, [pc, #164]	; (58c <acq_isr()+0xf8>)
     4e6:	f9b3 0000 	ldrsh.w	r0, [r3]
     4ea:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
     4ee:	4423      	add	r3, r4
     4f0:	4103      	asrs	r3, r0
     4f2:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
     4f6:	3201      	adds	r2, #1
     4f8:	2a80      	cmp	r2, #128	; 0x80
     4fa:	d1f6      	bne.n	4ea <acq_isr()+0x56>

int32_t bias=0;

/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     4fc:	4c24      	ldr	r4, [pc, #144]	; (590 <acq_isr()+0xfc>)


  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];   
     4fe:	2200      	movs	r2, #0
     500:	4b24      	ldr	r3, [pc, #144]	; (594 <acq_isr()+0x100>)
{ procCount++;
     502:	6820      	ldr	r0, [r4, #0]
     504:	3001      	adds	r0, #1
     506:	6020      	str	r0, [r4, #0]
     508:	4618      	mov	r0, r3
  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];   
     50a:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
     50e:	3201      	adds	r2, #1
     510:	2a80      	cmp	r2, #128	; 0x80
     512:	f840 4f04 	str.w	r4, [r0, #4]!
     516:	d1f8      	bne.n	50a <acq_isr()+0x76>
     518:	4c1f      	ldr	r4, [pc, #124]	; (598 <acq_isr()+0x104>)
     51a:	4619      	mov	r1, r3

  int32_t tmp=0;  
     51c:	2000      	movs	r0, #0
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp+=acqBuffer[ii]/NBUF_ACQ;
     51e:	f851 2f04 	ldr.w	r2, [r1, #4]!
     522:	2a00      	cmp	r2, #0
     524:	bfb8      	it	lt
     526:	327f      	addlt	r2, #127	; 0x7f
     528:	42a1      	cmp	r1, r4
     52a:	eb00 10e2 	add.w	r0, r0, r2, asr #7
     52e:	d1f6      	bne.n	51e <acq_isr()+0x8a>
  bias=bias+(tmp-bias)/(1<<10);
     530:	4a1a      	ldr	r2, [pc, #104]	; (59c <acq_isr()+0x108>)
     532:	6811      	ldr	r1, [r2, #0]
     534:	1a40      	subs	r0, r0, r1
     536:	bf48      	it	mi
     538:	f200 30ff 	addwmi	r0, r0, #1023	; 0x3ff
     53c:	eb01 21a0 	add.w	r1, r1, r0, asr #10
     540:	6011      	str	r1, [r2, #0]

//  bias=(bias>>10)<<10;

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= (acqBuffer[ii] - bias)>>SHIFT;   
     542:	f853 2f04 	ldr.w	r2, [r3, #4]!
     546:	1a52      	subs	r2, r2, r1
     548:	42a3      	cmp	r3, r4
     54a:	601a      	str	r2, [r3, #0]
     54c:	d1f9      	bne.n	542 <acq_isr()+0xae>
  acqBuffer[0] = acqBuffer[0] + data1;
  for(int ii=1; ii<NBUF_ACQ;ii++) acqBuffer[ii]= acqBuffer[ii] + acqBuffer[ii-1];
  data1=acqBuffer[NBUF_ACQ-1];
  */

  if(proc==0)
     54e:	4b14      	ldr	r3, [pc, #80]	; (5a0 <acq_isr()+0x10c>)
     550:	f9b3 3000 	ldrsh.w	r3, [r3]
     554:	b113      	cbz	r3, 55c <acq_isr()+0xc8>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     556:	2b01      	cmp	r3, #1
     558:	d00a      	beq.n	570 <acq_isr()+0xdc>
  }
     55a:	bd10      	pop	{r4, pc}
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     55c:	4811      	ldr	r0, [pc, #68]	; (5a4 <acq_isr()+0x110>)
     55e:	f001 f88b 	bl	1678 <pushData(unsigned long*)>
     562:	2800      	cmp	r0, #0
     564:	d1f9      	bne.n	55a <acq_isr()+0xc6>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     566:	4a10      	ldr	r2, [pc, #64]	; (5a8 <acq_isr()+0x114>)
     568:	6813      	ldr	r3, [r2, #0]
     56a:	3301      	adds	r3, #1
     56c:	6013      	str	r3, [r2, #0]
  }
     56e:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     570:	480c      	ldr	r0, [pc, #48]	; (5a4 <acq_isr()+0x110>)
     572:	f000 f961 	bl	838 <compress(void*)>
     576:	2800      	cmp	r0, #0
     578:	d1ef      	bne.n	55a <acq_isr()+0xc6>
     57a:	e7f4      	b.n	566 <acq_isr()+0xd2>
     57c:	20027f4c 	.word	0x20027f4c
     580:	20200400 	.word	0x20200400
     584:	400e8000 	.word	0x400e8000
     588:	20029494 	.word	0x20029494
     58c:	0365c040 	.word	0x0365c040
     590:	20028ee8 	.word	0x20028ee8
     594:	20028c20 	.word	0x20028c20
     598:	20028e20 	.word	0x20028e20
     59c:	20028e24 	.word	0x20028e24
     5a0:	20029490 	.word	0x20029490
     5a4:	20028c24 	.word	0x20028c24
     5a8:	20028eec 	.word	0x20028eec

000005ac <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
     5ac:	b510      	push	{r4, lr}
     5ae:	4604      	mov	r4, r0
		release();
     5b0:	f007 f91e 	bl	77f0 <DMAChannel::release()>
	}
     5b4:	4620      	mov	r0, r4
     5b6:	bd10      	pop	{r4, pc}

000005b8 <setAudioFrequency(int)>:
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5b8:	ee07 0a90 	vmov	s15, r0
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     5bc:	4938      	ldr	r1, [pc, #224]	; (6a0 <setAudioFrequency(int)+0xe8>)
     5be:	0280      	lsls	r0, r0, #10
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5c0:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
     5c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     5c8:	4b36      	ldr	r3, [pc, #216]	; (6a4 <setAudioFrequency(int)+0xec>)
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5ca:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 688 <setAudioFrequency(int)+0xd0>
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     5ce:	fb91 f1f0 	sdiv	r1, r1, r0
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5d2:	ee27 7b06 	vmul.f64	d7, d7, d6
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     5d6:	1c4a      	adds	r2, r1, #1
     5d8:	ee06 2a10 	vmov	s12, r2
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5dc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     5e0:	ee27 7b03 	vmul.f64	d7, d7, d3
     5e4:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 690 <setAudioFrequency(int)+0xd8>
  {
     5e8:	b410      	push	{r4}
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5ea:	ee27 7b06 	vmul.f64	d7, d7, d6
    int c1 = C * c2 - (c0 * c2);
     5ee:	f242 7410 	movw	r4, #10000	; 0x2710
     5f2:	ed9f 5b29 	vldr	d5, [pc, #164]	; 698 <setAudioFrequency(int)+0xe0>
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5f6:	ee87 6b04 	vdiv.f64	d6, d7, d4
    int c0 = C;
     5fa:	eefd 7bc6 	vcvt.s32.f64	s15, d6
     5fe:	ee17 2a90 	vmov	r2, s15
    int c1 = C * c2 - (c0 * c2);
     602:	fb04 f002 	mul.w	r0, r4, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     606:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     60a:	ee07 0a10 	vmov	s14, r0
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     60e:	f442 1289 	orr.w	r2, r2, #1122304	; 0x112000
    int c1 = C * c2 - (c0 * c2);
     612:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     616:	671a      	str	r2, [r3, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     618:	ee96 7b05 	vfnms.f64	d7, d6, d5
     61c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     620:	ee17 2a90 	vmov	r2, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     624:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
     628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     62c:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     636:	671a      	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     638:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     63a:	2a00      	cmp	r2, #0
     63c:	dafc      	bge.n	638 <setAudioFrequency(int)+0x80>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     63e:	f8d3 4170 	ldr.w	r4, [r3, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     642:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     646:	4a18      	ldr	r2, [pc, #96]	; (6a8 <setAudioFrequency(int)+0xf0>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     648:	4818      	ldr	r0, [pc, #96]	; (6ac <setAudioFrequency(int)+0xf4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     64a:	4022      	ands	r2, r4
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     64c:	4c18      	ldr	r4, [pc, #96]	; (6b0 <setAudioFrequency(int)+0xf8>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     64e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     652:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     654:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     658:	671a      	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     65a:	69c2      	ldr	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     65c:	4b15      	ldr	r3, [pc, #84]	; (6b4 <setAudioFrequency(int)+0xfc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     65e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     666:	61c2      	str	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     668:	6a82      	ldr	r2, [r0, #40]	; 0x28
     66a:	4013      	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     66c:	4a12      	ldr	r2, [pc, #72]	; (6b8 <setAudioFrequency(int)+0x100>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     66e:	430b      	orrs	r3, r1
     670:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     674:	6283      	str	r3, [r0, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     676:	6863      	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     678:	401a      	ands	r2, r3
     67a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     67e:	6062      	str	r2, [r4, #4]
  }
     680:	f85d 4b04 	ldr.w	r4, [sp], #4
     684:	4770      	bx	lr
     686:	bf00      	nop
     688:	00000000 	.word	0x00000000
     68c:	40700000 	.word	0x40700000
     690:	00000000 	.word	0x00000000
     694:	4176e360 	.word	0x4176e360
     698:	00000000 	.word	0x00000000
     69c:	40c38800 	.word	0x40c38800
     6a0:	269fb200 	.word	0x269fb200
     6a4:	400d8000 	.word	0x400d8000
     6a8:	ff7f7fff 	.word	0xff7f7fff
     6ac:	400fc000 	.word	0x400fc000
     6b0:	400ac000 	.word	0x400ac000
     6b4:	fffffe00 	.word	0xfffffe00
     6b8:	fff7fff8 	.word	0xfff7fff8

000006bc <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     6bc:	4a19      	ldr	r2, [pc, #100]	; (724 <i2s_setup()+0x68>)
     6be:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     6c0:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     6c2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     6c6:	4c18      	ldr	r4, [pc, #96]	; (728 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     6c8:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     6ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     6ce:	2b00      	cmp	r3, #0
     6d0:	db27      	blt.n	722 <i2s_setup()+0x66>
    int fs = fsamp;
     6d2:	4b16      	ldr	r3, [pc, #88]	; (72c <i2s_setup()+0x70>)
    setAudioFrequency(fs);
     6d4:	6818      	ldr	r0, [r3, #0]
     6d6:	f7ff ff6f 	bl	5b8 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     6da:	4b15      	ldr	r3, [pc, #84]	; (730 <i2s_setup()+0x74>)
     6dc:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     6de:	4915      	ldr	r1, [pc, #84]	; (734 <i2s_setup()+0x78>)
     6e0:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     6e2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     6e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     6ea:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     6ee:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     6f2:	2201      	movs	r2, #1
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     6f4:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     6f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     6fc:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     6fe:	480e      	ldr	r0, [pc, #56]	; (738 <i2s_setup()+0x7c>)
    I2S1_RMR = 0;
     700:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     704:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     708:	490c      	ldr	r1, [pc, #48]	; (73c <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     70a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     70e:	4a0c      	ldr	r2, [pc, #48]	; (740 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     710:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     714:	4b0b      	ldr	r3, [pc, #44]	; (744 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     716:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     71a:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     71e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     722:	bd10      	pop	{r4, pc}
     724:	400fc000 	.word	0x400fc000
     728:	40384000 	.word	0x40384000
     72c:	20008b94 	.word	0x20008b94
     730:	401f8000 	.word	0x401f8000
     734:	401f8400 	.word	0x401f8400
     738:	07000001 	.word	0x07000001
     73c:	00011f1b 	.word	0x00011f1b
     740:	1f1f1f00 	.word	0x1f1f1f00
     744:	92000001 	.word	0x92000001

00000748 <dma_setup()>:
  {
     748:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     74a:	4c1c      	ldr	r4, [pc, #112]	; (7bc <dma_setup()+0x74>)
     74c:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     74e:	4d1c      	ldr	r5, [pc, #112]	; (7c0 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     750:	4620      	mov	r0, r4
     752:	f006 fff3 	bl	773c <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     756:	6823      	ldr	r3, [r4, #0]
     758:	481a      	ldr	r0, [pc, #104]	; (7c4 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     75a:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     75e:	491a      	ldr	r1, [pc, #104]	; (7c8 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     760:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     762:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     764:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     766:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     768:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     76a:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     76c:	4d17      	ldr	r5, [pc, #92]	; (7cc <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     76e:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     770:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     772:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     774:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     776:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     778:	2204      	movs	r2, #4
     77a:	4915      	ldr	r1, [pc, #84]	; (7d0 <dma_setup()+0x88>)
     77c:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     77e:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     780:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     782:	4d14      	ldr	r5, [pc, #80]	; (7d4 <dma_setup()+0x8c>)
     784:	60da      	str	r2, [r3, #12]
		*mux = 0;
     786:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     78a:	4b13      	ldr	r3, [pc, #76]	; (7d8 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     78c:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     790:	2101      	movs	r1, #1
     792:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     794:	4811      	ldr	r0, [pc, #68]	; (7dc <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     796:	f002 051f 	and.w	r5, r2, #31
     79a:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     79e:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     7a2:	40a9      	lsls	r1, r5
     7a4:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     7a6:	4d0e      	ldr	r5, [pc, #56]	; (7e0 <dma_setup()+0x98>)
     7a8:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     7ac:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     7ae:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     7b0:	490c      	ldr	r1, [pc, #48]	; (7e4 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     7b2:	4b0d      	ldr	r3, [pc, #52]	; (7e8 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     7b4:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     7b6:	7922      	ldrb	r2, [r4, #4]
     7b8:	76da      	strb	r2, [r3, #27]
  }
     7ba:	bd38      	pop	{r3, r4, r5, pc}
     7bc:	20027f4c 	.word	0x20027f4c
     7c0:	02020000 	.word	0x02020000
     7c4:	403840a0 	.word	0x403840a0
     7c8:	20200000 	.word	0x20200000
     7cc:	fffff800 	.word	0xfffff800
     7d0:	400ec000 	.word	0x400ec000
     7d4:	80000013 	.word	0x80000013
     7d8:	38003840 	.word	0x38003840
     7dc:	20008c00 	.word	0x20008c00
     7e0:	00000495 	.word	0x00000495
     7e4:	e000e400 	.word	0xe000e400
     7e8:	400e8000 	.word	0x400e8000

000007ec <acqModifyFrequency(unsigned long)>:
  {
     7ec:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     7ee:	4c08      	ldr	r4, [pc, #32]	; (810 <acqModifyFrequency(unsigned long)+0x24>)
     7f0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     7f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     7f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     7fc:	f7ff fedc 	bl	5b8 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     800:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     804:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     808:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     80c:	bd10      	pop	{r4, pc}
     80e:	bf00      	nop
     810:	40384000 	.word	0x40384000

00000814 <_GLOBAL__sub_I_procCount>:
		begin();
     814:	4805      	ldr	r0, [pc, #20]	; (82c <_GLOBAL__sub_I_procCount+0x18>)
     816:	2100      	movs	r1, #0
  }
}
     818:	b508      	push	{r3, lr}
     81a:	f006 ff8f 	bl	773c <DMAChannel::begin(bool)>
  static DMAChannel dma;
     81e:	4a04      	ldr	r2, [pc, #16]	; (830 <_GLOBAL__sub_I_procCount+0x1c>)
     820:	4904      	ldr	r1, [pc, #16]	; (834 <_GLOBAL__sub_I_procCount+0x20>)
     822:	4802      	ldr	r0, [pc, #8]	; (82c <_GLOBAL__sub_I_procCount+0x18>)
}
     824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     828:	f009 b86c 	b.w	9904 <__aeabi_atexit>
     82c:	20027f4c 	.word	0x20027f4c
     830:	200085f0 	.word	0x200085f0
     834:	000005ad 	.word	0x000005ad

00000838 <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     83c:	b083      	sub	sp, #12
     83e:	4604      	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
     840:	f007 fd1e 	bl	8280 <rtc_get>
     844:	4682      	mov	sl, r0
  uint32_t t1;
  t1 = micros();
     846:	f007 fbb9 	bl	7fbc <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     84a:	49a1      	ldr	r1, [pc, #644]	; (ad0 <compress(void*)+0x298>)
     84c:	6822      	ldr	r2, [r4, #0]
     84e:	4623      	mov	r3, r4
     850:	680d      	ldr	r5, [r1, #0]
     852:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     856:	499f      	ldr	r1, [pc, #636]	; (ad4 <compress(void*)+0x29c>)
  t1 = micros();
     858:	4681      	mov	r9, r0
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     85a:	602a      	str	r2, [r5, #0]
     85c:	462c      	mov	r4, r5
     85e:	600a      	str	r2, [r1, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     860:	4629      	mov	r1, r5
     862:	4618      	mov	r0, r3
     864:	3304      	adds	r3, #4
     866:	e9d0 0200 	ldrd	r0, r2, [r0]
     86a:	42b3      	cmp	r3, r6
     86c:	eba2 0200 	sub.w	r2, r2, r0
     870:	f844 2f04 	str.w	r2, [r4, #4]!
     874:	d1f5      	bne.n	862 <compress(void*)+0x2a>
     876:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc

  // find maximum in filtered data
  int32_t mx = 0;
     87a:	2200      	movs	r2, #0
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
     87c:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd;
    if(dd>mx) mx = dd;
     880:	2b00      	cmp	r3, #0
     882:	bfb8      	it	lt
     884:	425b      	neglt	r3, r3
     886:	429a      	cmp	r2, r3
     888:	bfb8      	it	lt
     88a:	461a      	movlt	r2, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     88c:	4281      	cmp	r1, r0
     88e:	d1f5      	bne.n	87c <compress(void*)+0x44>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     890:	2702      	movs	r7, #2
     892:	2101      	movs	r1, #1
     894:	e003      	b.n	89e <compress(void*)+0x66>
     896:	3701      	adds	r7, #1
     898:	2f18      	cmp	r7, #24
     89a:	f000 8110 	beq.w	abe <compress(void*)+0x286>
     89e:	1e7c      	subs	r4, r7, #1
     8a0:	fa01 f304 	lsl.w	r3, r1, r4
     8a4:	4293      	cmp	r3, r2
     8a6:	ddf6      	ble.n	896 <compress(void*)+0x5e>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NSAMP*nb) / MBIT;
     8a8:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
     8ac:	40b9      	lsls	r1, r7
  int ndat = NH+NCH + ncmp;
     8ae:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
     8b2:	1e48      	subs	r0, r1, #1
  int ndat = NH+NCH + ncmp;
     8b4:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     8b6:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
     8ba:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
     8be:	4986      	ldr	r1, [pc, #536]	; (ad8 <compress(void*)+0x2a0>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     8c0:	4d86      	ldr	r5, [pc, #536]	; (adc <compress(void*)+0x2a4>)
  proc_stat[nb-1]++;
     8c2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     8c6:	3201      	adds	r2, #1
     8c8:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     8cc:	682a      	ldr	r2, [r5, #0]
     8ce:	4c84      	ldr	r4, [pc, #528]	; (ae0 <compress(void*)+0x2a8>)
     8d0:	42ba      	cmp	r2, r7
     8d2:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     8d6:	46a3      	mov	fp, r4
     8d8:	4622      	mov	r2, r4
     8da:	bf38      	it	cc
     8dc:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     8de:	f852 1f04 	ldr.w	r1, [r2, #4]!
     8e2:	4001      	ands	r1, r0
     8e4:	4296      	cmp	r6, r2
     8e6:	6011      	str	r1, [r2, #0]
     8e8:	d1f9      	bne.n	8de <compress(void*)+0xa6>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     8ea:	4d7e      	ldr	r5, [pc, #504]	; (ae4 <compress(void*)+0x2ac>)
     8ec:	f44f 7200 	mov.w	r2, #512	; 0x200
     8f0:	2100      	movs	r1, #0
     8f2:	9300      	str	r3, [sp, #0]
     8f4:	4628      	mov	r0, r5
     8f6:	f00b f8c1 	bl	ba7c <memset>
  *iptr++ = nb | shift<<16;
     8fa:	4a7b      	ldr	r2, [pc, #492]	; (ae8 <compress(void*)+0x2b0>)
  *iptr++ = NCH+ncmp; // number of data after header
     8fc:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     8fe:	2100      	movs	r1, #0
  *iptr++ = nb | shift<<16;
     900:	f9b2 2000 	ldrsh.w	r2, [r2]

  // pack data
  // 
  int nx = MBIT;
     904:	f04f 0c20 	mov.w	ip, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
     908:	2007      	movs	r0, #7
  *iptr++ = NCH+ncmp; // number of data after header
     90a:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
     90c:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
     910:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     912:	f8db 2000 	ldr.w	r2, [fp]
     916:	f8cb 1000 	str.w	r1, [fp]
     91a:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     91c:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     920:	602a      	str	r2, [r5, #0]
  *iptr++ = NCH;
     922:	2201      	movs	r2, #1
  *iptr++ = t1;
     924:	e9c5 a902 	strd	sl, r9, [r5, #8]
  *iptr++ = NCH;
     928:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NSAMP; ii ++)
     92a:	e00a      	b.n	942 <compress(void*)+0x10a>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     92c:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
     930:	4694      	mov	ip, r2
     932:	ea41 010e 	orr.w	r1, r1, lr
     936:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NSAMP; ii ++)
     93a:	42a6      	cmp	r6, r4
     93c:	d018      	beq.n	970 <compress(void*)+0x138>
      {   outData[kk] |= (tempData[ii] << nx);
     93e:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     942:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
     946:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
     948:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
     94c:	dcee      	bgt.n	92c <compress(void*)+0xf4>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     94e:	eba7 0e0c 	sub.w	lr, r7, ip
     952:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
     956:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
     95a:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
     95e:	d12f      	bne.n	9c0 <compress(void*)+0x188>
      {   outData[kk++] |= tempData[ii];
     960:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NSAMP; ii ++)
     962:	42a6      	cmp	r6, r4
          nx=MBIT;
     964:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
     968:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     96c:	4648      	mov	r0, r9
  for (int ii = 0; ii < NSAMP; ii ++)
     96e:	d1e6      	bne.n	93e <compress(void*)+0x106>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     970:	4e5e      	ldr	r6, [pc, #376]	; (aec <compress(void*)+0x2b4>)
     972:	6834      	ldr	r4, [r6, #0]
     974:	eb04 0208 	add.w	r2, r4, r8
     978:	2a80      	cmp	r2, #128	; 0x80
     97a:	dc2d      	bgt.n	9d8 <compress(void*)+0x1a0>
     97c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     980:	4a5b      	ldr	r2, [pc, #364]	; (af0 <compress(void*)+0x2b8>)
     982:	4858      	ldr	r0, [pc, #352]	; (ae4 <compress(void*)+0x2ac>)
     984:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
     988:	4423      	add	r3, r4
     98a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     98e:	2300      	movs	r3, #0
     990:	e001      	b.n	996 <compress(void*)+0x15e>
     992:	f850 1f04 	ldr.w	r1, [r0, #4]!
     996:	3301      	adds	r3, #1
     998:	f842 1f04 	str.w	r1, [r2, #4]!
     99c:	4543      	cmp	r3, r8
     99e:	dbf8      	blt.n	992 <compress(void*)+0x15a>
     9a0:	f1b8 0f00 	cmp.w	r8, #0
     9a4:	f108 33ff 	add.w	r3, r8, #4294967295
     9a8:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
     9ac:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9b0:	bfd8      	it	le
     9b2:	2300      	movle	r3, #0
     9b4:	4423      	add	r3, r4
     9b6:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     9b8:	4638      	mov	r0, r7
     9ba:	b003      	add	sp, #12
     9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     9c0:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
     9c4:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     9c8:	ea4e 0202 	orr.w	r2, lr, r2
     9cc:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     9d0:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
     9d2:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
     9d6:	e7b0      	b.n	93a <compress(void*)+0x102>
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     9d8:	2c7a      	cmp	r4, #122	; 0x7a
     9da:	dd22      	ble.n	a22 <compress(void*)+0x1ea>
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     9dc:	2c7f      	cmp	r4, #127	; 0x7f
     9de:	dc0a      	bgt.n	9f6 <compress(void*)+0x1be>
     9e0:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
     9e4:	4842      	ldr	r0, [pc, #264]	; (af0 <compress(void*)+0x2b8>)
     9e6:	2100      	movs	r1, #0
     9e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     9ec:	0092      	lsls	r2, r2, #2
     9ee:	f00b f845 	bl	ba7c <memset>
     9f2:	2380      	movs	r3, #128	; 0x80
     9f4:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
     9f6:	483e      	ldr	r0, [pc, #248]	; (af0 <compress(void*)+0x2b8>)
     9f8:	f000 fe3e 	bl	1678 <pushData(unsigned long*)>
     9fc:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9fe:	ea4f 0288 	mov.w	r2, r8, lsl #2
     a02:	4938      	ldr	r1, [pc, #224]	; (ae4 <compress(void*)+0x2ac>)
      if(!pushData(dout)) ret = 0;
     a04:	bf18      	it	ne
     a06:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     a08:	f1b8 0f00 	cmp.w	r8, #0
     a0c:	4838      	ldr	r0, [pc, #224]	; (af0 <compress(void*)+0x2b8>)
     a0e:	bfd8      	it	le
     a10:	2204      	movle	r2, #4
     a12:	f007 fb67 	bl	80e4 <memcpy>
}
     a16:	4638      	mov	r0, r7
     a18:	f8c6 8000 	str.w	r8, [r6]
     a1c:	b003      	add	sp, #12
     a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     a22:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
     a26:	4832      	ldr	r0, [pc, #200]	; (af0 <compress(void*)+0x2b8>)
     a28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     a2c:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     a30:	616b      	str	r3, [r5, #20]
      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     a32:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     a36:	4d2b      	ldr	r5, [pc, #172]	; (ae4 <compress(void*)+0x2ac>)
     a38:	4423      	add	r3, r4
     a3a:	4629      	mov	r1, r5
     a3c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     a40:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
     a44:	e001      	b.n	a4a <compress(void*)+0x212>
     a46:	f851 2f04 	ldr.w	r2, [r1, #4]!
     a4a:	f843 2f04 	str.w	r2, [r3, #4]!
     a4e:	4298      	cmp	r0, r3
     a50:	d1f9      	bne.n	a46 <compress(void*)+0x20e>
     a52:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
     a54:	4826      	ldr	r0, [pc, #152]	; (af0 <compress(void*)+0x2b8>)
     a56:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
     a5a:	6033      	str	r3, [r6, #0]
     a5c:	f000 fe0c 	bl	1678 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a60:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
     a62:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
     a64:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a66:	4a23      	ldr	r2, [pc, #140]	; (af4 <compress(void*)+0x2bc>)
      if(!pushData(dout)) ret = 0;
     a68:	bf18      	it	ne
     a6a:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
     a6c:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a70:	f8df e070 	ldr.w	lr, [pc, #112]	; ae4 <compress(void*)+0x2ac>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a74:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a76:	f8df c078 	ldr.w	ip, [pc, #120]	; af0 <compress(void*)+0x2b8>
      while (ii < ndat) dout[nout++] = outData[ii++];
     a7a:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a7c:	ea42 0203 	orr.w	r2, r2, r3
     a80:	f04f 0306 	mov.w	r3, #6
     a84:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a86:	6033      	str	r3, [r6, #0]
     a88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     a8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     a90:	e89e 0003 	ldmia.w	lr, {r0, r1}
     a94:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
     a98:	da8e      	bge.n	9b8 <compress(void*)+0x180>
     a9a:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
     a9e:	eb05 0189 	add.w	r1, r5, r9, lsl #2
     aa2:	f10c 0008 	add.w	r0, ip, #8
     aa6:	4442      	add	r2, r8
     aa8:	0092      	lsls	r2, r2, #2
     aaa:	f007 fb1b 	bl	80e4 <memcpy>
     aae:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
     ab2:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
     ab4:	4443      	add	r3, r8
     ab6:	6033      	str	r3, [r6, #0]
}
     ab8:	b003      	add	sp, #12
     aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     abe:	2267      	movs	r2, #103	; 0x67
     ac0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
     ac4:	f04f 0868 	mov.w	r8, #104	; 0x68
     ac8:	2361      	movs	r3, #97	; 0x61
     aca:	2417      	movs	r4, #23
     acc:	9201      	str	r2, [sp, #4]
     ace:	e6f6      	b.n	8be <compress(void*)+0x86>
     ad0:	20008bdc 	.word	0x20008bdc
     ad4:	2002946c 	.word	0x2002946c
     ad8:	20028ef0 	.word	0x20028ef0
     adc:	20028ec8 	.word	0x20028ec8
     ae0:	20028664 	.word	0x20028664
     ae4:	20028214 	.word	0x20028214
     ae8:	20029494 	.word	0x20029494
     aec:	200288b8 	.word	0x200288b8
     af0:	20027f54 	.word	0x20027f54
     af4:	ffff0000 	.word	0xffff0000

00000af8 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     af8:	2000      	movs	r0, #0
     afa:	4770      	bx	lr

00000afc <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     afc:	4770      	bx	lr
     afe:	bf00      	nop

00000b00 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     b00:	b570      	push	{r4, r5, r6, lr}
     b02:	b082      	sub	sp, #8
     b04:	4606      	mov	r6, r0
     b06:	4614      	mov	r4, r2
     b08:	460d      	mov	r5, r1
    datetime_t t;
    rtc_get_datetime(&t);
     b0a:	4668      	mov	r0, sp
     b0c:	f000 ff64 	bl	19d8 <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
     b10:	f89d 2002 	ldrb.w	r2, [sp, #2]
     b14:	f89d c003 	ldrb.w	ip, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     b18:	f8bd 3000 	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0
     b1c:	2a0c      	cmp	r2, #12
     b1e:	bf98      	it	ls
     b20:	f1bc 0f1f 	cmpls.w	ip, #31
     b24:	d804      	bhi.n	b30 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x30>
     b26:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
     b2a:	b29b      	uxth	r3, r3
     b2c:	2b7f      	cmp	r3, #127	; 0x7f
     b2e:	d920      	bls.n	b72 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
                                              : year << 9 | month << 5 | day;
     b30:	f04f 0c00 	mov.w	ip, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
     b34:	f89d 2005 	ldrb.w	r2, [sp, #5]
     b38:	f89d 3006 	ldrb.w	r3, [sp, #6]
     b3c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
     b40:	2a17      	cmp	r2, #23
     b42:	bf98      	it	ls
     b44:	2b3b      	cmpls	r3, #59	; 0x3b
    *date = FS_DATE(t.year,t.month,t.day);
     b46:	f8a6 c000 	strh.w	ip, [r6]
     b4a:	d801      	bhi.n	b50 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x50>
     b4c:	293b      	cmp	r1, #59	; 0x3b
     b4e:	d905      	bls.n	b5c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5c>
             ? 0
             : hour << 11 | minute << 5 | second >> 1;
     b50:	2300      	movs	r3, #0
    *ms10 = 0;
     b52:	2200      	movs	r2, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
     b54:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
     b56:	7022      	strb	r2, [r4, #0]
}
     b58:	b002      	add	sp, #8
     b5a:	bd70      	pop	{r4, r5, r6, pc}
     b5c:	015b      	lsls	r3, r3, #5
     b5e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    *ms10 = 0;
     b62:	2200      	movs	r2, #0
     b64:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
     b68:	b29b      	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
     b6a:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
     b6c:	7022      	strb	r2, [r4, #0]
}
     b6e:	b002      	add	sp, #8
     b70:	bd70      	pop	{r4, r5, r6, pc}
                                              : year << 9 | month << 5 | day;
     b72:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
     b76:	ea4c 2c43 	orr.w	ip, ip, r3, lsl #9
     b7a:	fa1f fc8c 	uxth.w	ip, ip
     b7e:	e7d9      	b.n	b34 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x34>

00000b80 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template <class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     b80:	4b04      	ldr	r3, [pc, #16]	; (b94 <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b82:	b510      	push	{r4, lr}
     b84:	4604      	mov	r4, r0
     b86:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() { close(); }
     b8a:	f003 ff27 	bl	49dc <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b8e:	4620      	mov	r0, r4
     b90:	bd10      	pop	{r4, pc}
     b92:	bf00      	nop
     b94:	200006f8 	.word	0x200006f8

00000b98 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile   ? m_fFile->read(buf, count)
     b98:	6c83      	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
     b9a:	b500      	push	{lr}
     b9c:	b083      	sub	sp, #12
     b9e:	b163      	cbz	r3, bba <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     ba0:	2201      	movs	r2, #1
     ba2:	f10d 0107 	add.w	r1, sp, #7
     ba6:	4618      	mov	r0, r3
     ba8:	f002 fe90 	bl	38cc <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     bac:	2801      	cmp	r0, #1
     bae:	d10c      	bne.n	bca <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     bb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
     bb4:	b003      	add	sp, #12
     bb6:	f85d fb04 	ldr.w	pc, [sp], #4
     bba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->read(buf, count)
     bbc:	b128      	cbz	r0, bca <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     bbe:	2201      	movs	r2, #1
     bc0:	f10d 0107 	add.w	r1, sp, #7
     bc4:	f001 f988 	bl	1ed8 <ExFatFile::read(void*, unsigned int)>
     bc8:	e7f0      	b.n	bac <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     bca:	f04f 30ff 	mov.w	r0, #4294967295
     bce:	e7f1      	b.n	bb4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000bd0 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     bd0:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bd2:	b113      	cbz	r3, bda <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     bd4:	4618      	mov	r0, r3
     bd6:	f002 bf4d 	b.w	3a74 <FatFile::peek()>
     bda:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
     bdc:	b108      	cbz	r0, be2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     bde:	f001 ba4b 	b.w	2078 <ExFatFile::peek()>
  int peek() { return BaseFile::peek(); }
     be2:	f04f 30ff 	mov.w	r0, #4294967295
     be6:	4770      	bx	lr

00000be8 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     be8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bea:	b153      	cbz	r3, c02 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     bec:	7818      	ldrb	r0, [r3, #0]
     bee:	f010 0008 	ands.w	r0, r0, #8
     bf2:	d00d      	beq.n	c10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     bf4:	69d8      	ldr	r0, [r3, #28]
     bf6:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     bf8:	1ac0      	subs	r0, r0, r3
     bfa:	bf48      	it	mi
     bfc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     c00:	4770      	bx	lr
     c02:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     c04:	b1a3      	cbz	r3, c30 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
    return n > INT_MAX ? INT_MAX : n;
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     c06:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     c0a:	f010 0008 	ands.w	r0, r0, #8
     c0e:	d100      	bne.n	c12 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  int available() { return BaseFile::available(); }
     c10:	4770      	bx	lr
     c12:	6918      	ldr	r0, [r3, #16]
     c14:	6819      	ldr	r1, [r3, #0]
     c16:	695a      	ldr	r2, [r3, #20]
     c18:	1a40      	subs	r0, r0, r1
     c1a:	685b      	ldr	r3, [r3, #4]
     c1c:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     c20:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     c24:	f173 0300 	sbcs.w	r3, r3, #0
     c28:	d3f2      	bcc.n	c10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     c2a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     c2e:	4770      	bx	lr
     c30:	4618      	mov	r0, r3
     c32:	e7ed      	b.n	c10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000c34 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     c34:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c36:	b113      	cbz	r3, c3e <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     c38:	4618      	mov	r0, r3
     c3a:	f003 b81f 	b.w	3c7c <FatFile::sync()>
     c3e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
     c40:	b108      	cbz	r0, c46 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     c42:	f001 bdf1 	b.w	2828 <ExFatFile::sync()>
  void flush() { BaseFile::sync(); }
     c46:	4770      	bx	lr

00000c48 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     c48:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c4a:	b113      	cbz	r3, c52 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     c4c:	4618      	mov	r0, r3
     c4e:	f003 b81b 	b.w	3c88 <FatFile::write(void const*, unsigned int)>
     c52:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     c54:	b108      	cbz	r0, c5a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     c56:	f001 bf7b 	b.w	2b50 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     c5a:	4770      	bx	lr

00000c5c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) { return BaseFile::write(b); }
     c5c:	b500      	push	{lr}
    return m_fFile   ? m_fFile->write(buf, count)
     c5e:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c60:	b083      	sub	sp, #12
     c62:	f88d 1007 	strb.w	r1, [sp, #7]
     c66:	b143      	cbz	r3, c7a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     c68:	2201      	movs	r2, #1
     c6a:	f10d 0107 	add.w	r1, sp, #7
     c6e:	4618      	mov	r0, r3
     c70:	f003 f80a 	bl	3c88 <FatFile::write(void const*, unsigned int)>
     c74:	b003      	add	sp, #12
     c76:	f85d fb04 	ldr.w	pc, [sp], #4
     c7a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     c7c:	2800      	cmp	r0, #0
     c7e:	d0f9      	beq.n	c74 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     c80:	2201      	movs	r2, #1
     c82:	f10d 0107 	add.w	r1, sp, #7
     c86:	f001 ff63 	bl	2b50 <ExFatFile::write(void const*, unsigned int)>
     c8a:	b003      	add	sp, #12
     c8c:	f85d fb04 	ldr.w	pc, [sp], #4

00000c90 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     c90:	b538      	push	{r3, r4, r5, lr}
     c92:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     c94:	b149      	cbz	r1, caa <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
     c96:	4608      	mov	r0, r1
     c98:	460d      	mov	r5, r1
     c9a:	f00b fa91 	bl	c1c0 <strlen>
     c9e:	6823      	ldr	r3, [r4, #0]
     ca0:	4602      	mov	r2, r0
     ca2:	4629      	mov	r1, r5
     ca4:	685b      	ldr	r3, [r3, #4]
     ca6:	4620      	mov	r0, r4
     ca8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     caa:	4620      	mov	r0, r4
     cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     cb0:	f006 be7e 	b.w	79b0 <Print::println()>

00000cb4 <filing_init()>:
#    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     cb4:	4b26      	ldr	r3, [pc, #152]	; (d50 <filing_init()+0x9c>)
     cb6:	4a27      	ldr	r2, [pc, #156]	; (d54 <filing_init()+0xa0>)
     cb8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  #endif

  FsDateTime::callback = dateTime;
     cbc:	4926      	ldr	r1, [pc, #152]	; (d58 <filing_init()+0xa4>)
     cbe:	4827      	ldr	r0, [pc, #156]	; (d5c <filing_init()+0xa8>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     cc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
{
     cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     cc8:	4f25      	ldr	r7, [pc, #148]	; (d60 <filing_init()+0xac>)
     cca:	b082      	sub	sp, #8
  FsDateTime::callback = dateTime;
     ccc:	2505      	movs	r5, #5
     cce:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d74 <filing_init()+0xc0>
     cd2:	f207 468c 	addw	r6, r7, #1164	; 0x48c
     cd6:	6008      	str	r0, [r1, #0]
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     cd8:	6013      	str	r3, [r2, #0]
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     cda:	f04f 0100 	mov.w	r1, #0
     cde:	4630      	mov	r0, r6
     ce0:	f005 fb78 	bl	63d4 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     ce4:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     ce6:	f8c7 6488 	str.w	r6, [r7, #1160]	; 0x488
    return m_card && !m_card->errorCode();
     cea:	f004 fee5 	bl	5ab8 <SdioCard::errorCode() const>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cee:	2301      	movs	r3, #1
    return m_card && !m_card->errorCode();
     cf0:	4604      	mov	r4, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cf2:	4638      	mov	r0, r7
     cf4:	461a      	mov	r2, r3
    return m_card && !m_card->errorCode();
     cf6:	b99c      	cbnz	r4, d20 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cf8:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
     cfc:	9400      	str	r4, [sp, #0]
     cfe:	f003 fed7 	bl	4ab0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
     d02:	b168      	cbz	r0, d20 <filing_init()+0x6c>
     d04:	2111      	movs	r1, #17
     d06:	4817      	ldr	r0, [pc, #92]	; (d64 <filing_init()+0xb0>)
     d08:	f008 fbe4 	bl	94d4 <usb_serial_write>
     d0c:	4816      	ldr	r0, [pc, #88]	; (d68 <filing_init()+0xb4>)
     d0e:	f006 fe4f 	bl	79b0 <Print::println()>

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
     d12:	2301      	movs	r3, #1
     d14:	4a15      	ldr	r2, [pc, #84]	; (d6c <filing_init()+0xb8>)
      return 1;
     d16:	4618      	mov	r0, r3
      haveStore=1;
     d18:	6013      	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
     d1a:	b002      	add	sp, #8
     d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d20:	210f      	movs	r1, #15
     d22:	4640      	mov	r0, r8
     d24:	f008 fbd6 	bl	94d4 <usb_serial_write>
     d28:	480f      	ldr	r0, [pc, #60]	; (d68 <filing_init()+0xb4>)
     d2a:	f006 fe41 	bl	79b0 <Print::println()>
      delay(100);
     d2e:	2064      	movs	r0, #100	; 0x64
     d30:	f007 f8f0 	bl	7f14 <delay>
  for(int ii=0; ii<5;ii++)
     d34:	3d01      	subs	r5, #1
     d36:	d1d0      	bne.n	cda <filing_init()+0x26>
     d38:	211b      	movs	r1, #27
     d3a:	480d      	ldr	r0, [pc, #52]	; (d70 <filing_init()+0xbc>)
     d3c:	f008 fbca 	bl	94d4 <usb_serial_write>
     d40:	4809      	ldr	r0, [pc, #36]	; (d68 <filing_init()+0xb4>)
     d42:	f006 fe35 	bl	79b0 <Print::println()>
  return 0;
     d46:	4628      	mov	r0, r5
}
     d48:	b002      	add	sp, #8
     d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d4e:	bf00      	nop
     d50:	401f4400 	.word	0x401f4400
     d54:	2000c178 	.word	0x2000c178
     d58:	2002886c 	.word	0x2002886c
     d5c:	00000b01 	.word	0x00000b01
     d60:	20028fa0 	.word	0x20028fa0
     d64:	200003cc 	.word	0x200003cc
     d68:	200085d4 	.word	0x200085d4
     d6c:	20028ea0 	.word	0x20028ea0
     d70:	200003f0 	.word	0x200003f0
     d74:	200003e0 	.word	0x200003e0

00000d78 <timeStamp()>:

char * timeStamp(void)
{
     d78:	b510      	push	{r4, lr}
     d7a:	b086      	sub	sp, #24
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
     d7c:	4c0d      	ldr	r4, [pc, #52]	; (db4 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
     d7e:	a804      	add	r0, sp, #16
     d80:	f000 fe2a 	bl	19d8 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
     d84:	f99d 2017 	ldrsb.w	r2, [sp, #23]
     d88:	f99d 3016 	ldrsb.w	r3, [sp, #22]
     d8c:	f99d 0015 	ldrsb.w	r0, [sp, #21]
     d90:	f99d 1013 	ldrsb.w	r1, [sp, #19]
     d94:	e9cd 3202 	strd	r3, r2, [sp, #8]
     d98:	e9cd 1000 	strd	r1, r0, [sp]
     d9c:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     da0:	4620      	mov	r0, r4
     da2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     da6:	4904      	ldr	r1, [pc, #16]	; (db8 <timeStamp()+0x40>)
     da8:	f00a fcc2 	bl	b730 <sprintf>
  return date_time;
}
     dac:	4620      	mov	r0, r4
     dae:	b006      	add	sp, #24
     db0:	bd10      	pop	{r4, pc}
     db2:	bf00      	nop
     db4:	200288c4 	.word	0x200288c4
     db8:	20000558 	.word	0x20000558

00000dbc <headerInit(long, long, long, int)>:

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
  int nbytes=nbits/8;
     dbc:	2a00      	cmp	r2, #0
{
     dbe:	b530      	push	{r4, r5, lr}
  int nbytes=nbits/8;
     dc0:	bfb4      	ite	lt
     dc2:	1dd5      	addlt	r5, r2, #7
     dc4:	4615      	movge	r5, r2

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
     dc6:	4c22      	ldr	r4, [pc, #136]	; (e50 <headerInit(long, long, long, int)+0x94>)
{
     dc8:	b083      	sub	sp, #12
  int nbytes=nbits/8;
     dca:	10ed      	asrs	r5, r5, #3
  strcpy(wav_hdr.rId,"RIFF");
     dcc:	9301      	str	r3, [sp, #4]
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
     dce:	61a0      	str	r0, [r4, #24]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
  wav_hdr.nBlockAlign=nchan*nbytes;
     dd0:	fb11 fc05 	smulbb	ip, r1, r5
  wav_hdr.nBitsPerSamples=nbits;

  strcpy(&wav_hdr.info[0], MAGIC);
     dd4:	4b1f      	ldr	r3, [pc, #124]	; (e54 <headerInit(long, long, long, int)+0x98>)
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
     dd6:	fb05 f000 	mul.w	r0, r5, r0
  wav_hdr.nBitsPerSamples=nbits;
     dda:	8462      	strh	r2, [r4, #34]	; 0x22
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
     ddc:	fb01 f500 	mul.w	r5, r1, r0
  wav_hdr.nBlockAlign=nchan*nbytes;
     de0:	f8a4 c020 	strh.w	ip, [r4, #32]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
     de4:	61e5      	str	r5, [r4, #28]
  strcpy(&wav_hdr.info[0], MAGIC);
     de6:	e893 0003 	ldmia.w	r3, {r0, r1}
  strcpy(wav_hdr.wId,"WAVE");
     dea:	4b1b      	ldr	r3, [pc, #108]	; (e58 <headerInit(long, long, long, int)+0x9c>)
  strcpy(&wav_hdr.info[0], MAGIC);
     dec:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  strcpy(wav_hdr.wId,"WAVE");
     df0:	60a3      	str	r3, [r4, #8]
  strcpy(wav_hdr.dId,"data");
     df2:	4b1a      	ldr	r3, [pc, #104]	; (e5c <headerInit(long, long, long, int)+0xa0>)
  strcpy(wav_hdr.rId,"RIFF");
     df4:	491a      	ldr	r1, [pc, #104]	; (e60 <headerInit(long, long, long, int)+0xa4>)
  strcpy(wav_hdr.dId,"data");
     df6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  wav_hdr.rLen=512-2*4; // will be updated at closing
     dfa:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  strcpy(&wav_hdr.info[0], MAGIC);
     dfe:	62e0      	str	r0, [r4, #44]	; 0x2c
  strcpy(wav_hdr.rId,"RIFF");
     e00:	6021      	str	r1, [r4, #0]
  wav_hdr.rLen=512-2*4; // will be updated at closing
     e02:	6063      	str	r3, [r4, #4]
  wav_hdr.dLen = 0; // will be updated at closing
     e04:	2300      	movs	r3, #0
  strcpy(wav_hdr.fId,"fmt ");
     e06:	4817      	ldr	r0, [pc, #92]	; (e64 <headerInit(long, long, long, int)+0xa8>)
  strcpy(wav_hdr.iId,"info");
     e08:	4917      	ldr	r1, [pc, #92]	; (e68 <headerInit(long, long, long, int)+0xac>)
  strcpy(wav_hdr.fId,"fmt ");
     e0a:	60e0      	str	r0, [r4, #12]
  wav_hdr.iLen = 512 - 13*4;
     e0c:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
  strcpy(wav_hdr.iId,"info");
     e10:	6261      	str	r1, [r4, #36]	; 0x24
  wav_hdr.fLen=0x10;
     e12:	2110      	movs	r1, #16
  wav_hdr.dLen = 0; // will be updated at closing
     e14:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
     e18:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  wav_hdr.iLen = 512 - 13*4;
     e1c:	62a0      	str	r0, [r4, #40]	; 0x28
  wav_hdr.nFormatTag=1;
     e1e:	e9c4 1304 	strd	r1, r3, [r4, #16]
  strcpy(&wav_hdr.info[4], timeStamp());
     e22:	f7ff ffa9 	bl	d78 <timeStamp()>
     e26:	4601      	mov	r1, r0
     e28:	f104 0030 	add.w	r0, r4, #48	; 0x30
     e2c:	f00b f906 	bl	c03c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
     e30:	9a01      	ldr	r2, [sp, #4]
     e32:	490e      	ldr	r1, [pc, #56]	; (e6c <headerInit(long, long, long, int)+0xb0>)
     e34:	f104 0040 	add.w	r0, r4, #64	; 0x40
     e38:	f00a fc7a 	bl	b730 <sprintf>
  strcpy(&wav_hdr.info[30]," end");
     e3c:	4b0c      	ldr	r3, [pc, #48]	; (e70 <headerInit(long, long, long, int)+0xb4>)
     e3e:	6818      	ldr	r0, [r3, #0]
     e40:	791b      	ldrb	r3, [r3, #4]
     e42:	f8c4 004a 	str.w	r0, [r4, #74]	; 0x4a

  return (char *)&wav_hdr;
}
     e46:	4620      	mov	r0, r4
  strcpy(&wav_hdr.info[30]," end");
     e48:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     e4c:	b003      	add	sp, #12
     e4e:	bd30      	pop	{r4, r5, pc}
     e50:	20028414 	.word	0x20028414
     e54:	20000398 	.word	0x20000398
     e58:	45564157 	.word	0x45564157
     e5c:	61746164 	.word	0x61746164
     e60:	46464952 	.word	0x46464952
     e64:	20746d66 	.word	0x20746d66
     e68:	6f666e69 	.word	0x6f666e69
     e6c:	200003a0 	.word	0x200003a0
     e70:	200003a8 	.word	0x200003a8

00000e74 <writeHeader(char*)>:
  wav_hdr.rLen += wav_hdr.dLen;
  return (char *)&wav_hdr;
}

void writeHeader(char * wav_hdr) 
{ 
     e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_fFile   ? m_fFile->curPosition()
     e78:	4c1f      	ldr	r4, [pc, #124]	; (ef8 <writeHeader(char*)+0x84>)
     e7a:	4607      	mov	r7, r0
     e7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e7e:	b333      	cbz	r3, ece <writeHeader(char*)+0x5a>
  bool createContiguous(const char* path, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster() const { return m_curCluster; }

  /** \return The current position for a file or directory. */
  uint32_t curPosition() const { return m_curPosition; }
     e80:	695d      	ldr	r5, [r3, #20]
     e82:	462e      	mov	r6, r5
  uint32_t fpos;
  fpos = file.curPosition();
  Serial.printf(" fpos=%d ",fpos);
     e84:	462a      	mov	r2, r5
     e86:	491d      	ldr	r1, [pc, #116]	; (efc <writeHeader(char*)+0x88>)
     e88:	481d      	ldr	r0, [pc, #116]	; (f00 <writeHeader(char*)+0x8c>)
     e8a:	f006 fdad 	bl	79e8 <Print::printf(char const*, ...)>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     e8e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e90:	b1c8      	cbz	r0, ec6 <writeHeader(char*)+0x52>
     e92:	2100      	movs	r1, #0
     e94:	f002 fe24 	bl	3ae0 <FatFile::seekSet(unsigned long)>
    return m_fFile   ? m_fFile->write(buf, count)
     e98:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e9a:	b160      	cbz	r0, eb6 <writeHeader(char*)+0x42>
     e9c:	4639      	mov	r1, r7
     e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
     ea2:	f002 fef1 	bl	3c88 <FatFile::write(void const*, unsigned int)>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     ea6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     ea8:	b1db      	cbz	r3, ee2 <writeHeader(char*)+0x6e>
     eaa:	4629      	mov	r1, r5
     eac:	4618      	mov	r0, r3
  file.seek(0);
  file.write(wav_hdr,512);
  file.seek(fpos);
}
     eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     eb2:	f002 be15 	b.w	3ae0 <FatFile::seekSet(unsigned long)>
     eb6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     eb8:	b138      	cbz	r0, eca <writeHeader(char*)+0x56>
     eba:	4639      	mov	r1, r7
     ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
     ec0:	f001 fe46 	bl	2b50 <ExFatFile::write(void const*, unsigned int)>
     ec4:	e7ef      	b.n	ea6 <writeHeader(char*)+0x32>
     ec6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->seekSet(pos)
     ec8:	b930      	cbnz	r0, ed8 <writeHeader(char*)+0x64>
     eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ece:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->curPosition()
     ed0:	b17e      	cbz	r6, ef2 <writeHeader(char*)+0x7e>
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster() const { return m_curCluster; }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const { return m_curPosition; }
     ed2:	6835      	ldr	r5, [r6, #0]
     ed4:	462e      	mov	r6, r5
     ed6:	e7d5      	b.n	e84 <writeHeader(char*)+0x10>
           : m_xFile ? m_xFile->seekSet(pos)
     ed8:	2200      	movs	r2, #0
     eda:	2300      	movs	r3, #0
     edc:	f001 f8e2 	bl	20a4 <ExFatFile::seekSet(unsigned long long)>
     ee0:	e7da      	b.n	e98 <writeHeader(char*)+0x24>
     ee2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     ee4:	2800      	cmp	r0, #0
     ee6:	d0f0      	beq.n	eca <writeHeader(char*)+0x56>
     ee8:	4632      	mov	r2, r6
     eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     eee:	f001 b8d9 	b.w	20a4 <ExFatFile::seekSet(unsigned long long)>
     ef2:	4635      	mov	r5, r6
     ef4:	e7c6      	b.n	e84 <writeHeader(char*)+0x10>
     ef6:	bf00      	nop
     ef8:	20028e50 	.word	0x20028e50
     efc:	20000438 	.word	0x20000438
     f00:	200085d4 	.word	0x200085d4

00000f04 <makeHeader(long*)>:
   return wheader;
}
*/

int16_t makeHeader(int32_t *header)
{
     f04:	b530      	push	{r4, r5, lr}
     f06:	b089      	sub	sp, #36	; 0x24
     f08:	4604      	mov	r4, r0

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
     f0a:	4d1d      	ldr	r5, [pc, #116]	; (f80 <makeHeader(long*)+0x7c>)
    rtc_get_datetime(&t);
     f0c:	a806      	add	r0, sp, #24
     f0e:	f000 fd63 	bl	19d8 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
     f12:	f99d 001f 	ldrsb.w	r0, [sp, #31]
     f16:	f99d 301e 	ldrsb.w	r3, [sp, #30]
     f1a:	f99d 101d 	ldrsb.w	r1, [sp, #29]
     f1e:	f99d 201b 	ldrsb.w	r2, [sp, #27]
     f22:	e9cd 3003 	strd	r3, r0, [sp, #12]
     f26:	f99d 001a 	ldrsb.w	r0, [sp, #26]
     f2a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     f2e:	9000      	str	r0, [sp, #0]
     f30:	4620      	mov	r0, r4
     f32:	e9cd 2101 	strd	r2, r1, [sp, #4]
     f36:	4a13      	ldr	r2, [pc, #76]	; (f84 <makeHeader(long*)+0x80>)
     f38:	4913      	ldr	r1, [pc, #76]	; (f88 <makeHeader(long*)+0x84>)
     f3a:	f00a fbf9 	bl	b730 <sprintf>
    header[10] = t_on;
     f3e:	4b13      	ldr	r3, [pc, #76]	; (f8c <makeHeader(long*)+0x88>)
    header[9] = t_acq;
     f40:	682d      	ldr	r5, [r5, #0]
    header[8] = NCH;
     f42:	2001      	movs	r0, #1
    header[10] = t_on;
     f44:	681b      	ldr	r3, [r3, #0]
    header[6] = SerNum;      // serial number
     f46:	4a12      	ldr	r2, [pc, #72]	; (f90 <makeHeader(long*)+0x8c>)
    header[10] = t_on;
     f48:	62a3      	str	r3, [r4, #40]	; 0x28
    header[11] = t_off;
     f4a:	4b12      	ldr	r3, [pc, #72]	; (f94 <makeHeader(long*)+0x90>)
    header[6] = SerNum;      // serial number
     f4c:	6812      	ldr	r2, [r2, #0]
    header[11] = t_off;
     f4e:	681b      	ldr	r3, [r3, #0]
    header[7] = fsamp;
     f50:	4911      	ldr	r1, [pc, #68]	; (f98 <makeHeader(long*)+0x94>)
    header[6] = SerNum;      // serial number
     f52:	61a2      	str	r2, [r4, #24]
    header[7] = fsamp;
     f54:	6809      	ldr	r1, [r1, #0]
    header[12] = proc;
     f56:	4a11      	ldr	r2, [pc, #68]	; (f9c <makeHeader(long*)+0x98>)
    header[11] = t_off;
     f58:	62e3      	str	r3, [r4, #44]	; 0x2c
    header[13] = shift;
     f5a:	4b11      	ldr	r3, [pc, #68]	; (fa0 <makeHeader(long*)+0x9c>)
    header[9] = t_acq;
     f5c:	6265      	str	r5, [r4, #36]	; 0x24
    header[5] = 20;          // SW version
     f5e:	2514      	movs	r5, #20
    header[13] = shift;
     f60:	f9b3 3000 	ldrsh.w	r3, [r3]
    header[7] = fsamp;
     f64:	61e1      	str	r1, [r4, #28]
    header[12] = proc;
     f66:	f9b2 1000 	ldrsh.w	r1, [r2]

    header[127]=0x55555555;
     f6a:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
     f6e:	6165      	str	r5, [r4, #20]
    header[8] = NCH;
     f70:	6220      	str	r0, [r4, #32]
    header[12] = proc;
     f72:	6321      	str	r1, [r4, #48]	; 0x30
    header[127]=0x55555555;
     f74:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
    header[13] = shift;
     f78:	6363      	str	r3, [r4, #52]	; 0x34
    return 1;
}
     f7a:	b009      	add	sp, #36	; 0x24
     f7c:	bd30      	pop	{r4, r5, pc}
     f7e:	bf00      	nop
     f80:	20008bd4 	.word	0x20008bd4
     f84:	20000398 	.word	0x20000398
     f88:	200003b0 	.word	0x200003b0
     f8c:	20008bd8 	.word	0x20008bd8
     f90:	2000c178 	.word	0x2000c178
     f94:	20029464 	.word	0x20029464
     f98:	20008b94 	.word	0x20008b94
     f9c:	20029490 	.word	0x20029490
     fa0:	20029494 	.word	0x20029494

00000fa4 <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
     fa4:	b530      	push	{r4, r5, lr}
     fa6:	b087      	sub	sp, #28
     fa8:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
     faa:	a804      	add	r0, sp, #16
     fac:	f000 fd14 	bl	19d8 <rtc_get_datetime(datetime_t*)>

    if(t_acq<600)
     fb0:	4b23      	ldr	r3, [pc, #140]	; (1040 <newDirectory(char*)+0x9c>)
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
     fb8:	d218      	bcs.n	fec <newDirectory(char*)+0x48>
  if(h==ho) return 0;
     fba:	4922      	ldr	r1, [pc, #136]	; (1044 <newDirectory(char*)+0xa0>)
    {
      if(newFolder(t.hour))
     fbc:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(h==ho) return 0;
     fc0:	680b      	ldr	r3, [r1, #0]
     fc2:	429a      	cmp	r2, r3
     fc4:	d038      	beq.n	1038 <newDirectory(char*)+0x94>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     fc6:	f99d 0012 	ldrsb.w	r0, [sp, #18]
     fca:	f99d 5013 	ldrsb.w	r5, [sp, #19]
     fce:	4b1e      	ldr	r3, [pc, #120]	; (1048 <newDirectory(char*)+0xa4>)
     fd0:	e9cd 5202 	strd	r5, r2, [sp, #8]
     fd4:	681b      	ldr	r3, [r3, #0]
     fd6:	9001      	str	r0, [sp, #4]
     fd8:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  ho=h;
     fdc:	600a      	str	r2, [r1, #0]
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     fde:	9000      	str	r0, [sp, #0]
     fe0:	4620      	mov	r0, r4
     fe2:	4a1a      	ldr	r2, [pc, #104]	; (104c <newDirectory(char*)+0xa8>)
     fe4:	491a      	ldr	r1, [pc, #104]	; (1050 <newDirectory(char*)+0xac>)
     fe6:	f00a fba3 	bl	b730 <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
     fea:	e014      	b.n	1016 <newDirectory(char*)+0x72>
  if(h==ho) return 0;
     fec:	4815      	ldr	r0, [pc, #84]	; (1044 <newDirectory(char*)+0xa0>)
          return 1;   // have new directory
      }
    }
    else
    {
      if(newFolder(t.day))
     fee:	f99d 1013 	ldrsb.w	r1, [sp, #19]
  if(h==ho) return 0;
     ff2:	6803      	ldr	r3, [r0, #0]
     ff4:	4299      	cmp	r1, r3
     ff6:	d01f      	beq.n	1038 <newDirectory(char*)+0x94>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/", 
     ff8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     ffc:	f99d 5012 	ldrsb.w	r5, [sp, #18]
    1000:	4b11      	ldr	r3, [pc, #68]	; (1048 <newDirectory(char*)+0xa4>)
    1002:	e9cd 5101 	strd	r5, r1, [sp, #4]
    1006:	681b      	ldr	r3, [r3, #0]
    1008:	9200      	str	r2, [sp, #0]
  ho=h;
    100a:	6001      	str	r1, [r0, #0]
          sprintf(dirName, "/%s%06x_%04d%02d%02d/", 
    100c:	4620      	mov	r0, r4
    100e:	4a0f      	ldr	r2, [pc, #60]	; (104c <newDirectory(char*)+0xa8>)
    1010:	4910      	ldr	r1, [pc, #64]	; (1054 <newDirectory(char*)+0xb0>)
    1012:	f00a fb8d 	bl	b730 <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
    1016:	4810      	ldr	r0, [pc, #64]	; (1058 <newDirectory(char*)+0xb4>)
    1018:	f006 fcca 	bl	79b0 <Print::println()>
    101c:	2102      	movs	r1, #2
    101e:	480f      	ldr	r0, [pc, #60]	; (105c <newDirectory(char*)+0xb8>)
    1020:	f008 fa58 	bl	94d4 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    1024:	4620      	mov	r0, r4
    1026:	f00b f8cb 	bl	c1c0 <strlen>
    102a:	4601      	mov	r1, r0
    102c:	4620      	mov	r0, r4
    102e:	f008 fa51 	bl	94d4 <usb_serial_write>
          return 1;   // have new directory
    1032:	2001      	movs	r0, #1
      }
    }
    return 0;       // keep old directory

}
    1034:	b007      	add	sp, #28
    1036:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
    1038:	2000      	movs	r0, #0
}
    103a:	b007      	add	sp, #28
    103c:	bd30      	pop	{r4, r5, pc}
    103e:	bf00      	nop
    1040:	20008bd4 	.word	0x20008bd4
    1044:	200085e4 	.word	0x200085e4
    1048:	2000c178 	.word	0x2000c178
    104c:	20000444 	.word	0x20000444
    1050:	20000448 	.word	0x20000448
    1054:	20000468 	.word	0x20000468
    1058:	200085d4 	.word	0x200085d4
    105c:	20000464 	.word	0x20000464

00001060 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    1060:	b510      	push	{r4, lr}
    1062:	b084      	sub	sp, #16
    1064:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1066:	a802      	add	r0, sp, #8
    1068:	f000 fcb6 	bl	19d8 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    106c:	4b15      	ldr	r3, [pc, #84]	; (10c4 <newFileName(char*)+0x64>)
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    106e:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    if(proc==0)
    1072:	f9b3 3000 	ldrsh.w	r3, [r3]
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    1076:	f99d 100e 	ldrsb.w	r1, [sp, #14]
    if(proc==0)
    107a:	b9cb      	cbnz	r3, 10b0 <newFileName(char*)+0x50>
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    107c:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    1080:	4a11      	ldr	r2, [pc, #68]	; (10c8 <newFileName(char*)+0x68>)
    1082:	e9cd 1000 	strd	r1, r0, [sp]
    1086:	4911      	ldr	r1, [pc, #68]	; (10cc <newFileName(char*)+0x6c>)
    1088:	4620      	mov	r0, r4
    108a:	f00a fb51 	bl	b730 <sprintf>
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    108e:	4810      	ldr	r0, [pc, #64]	; (10d0 <newFileName(char*)+0x70>)
    1090:	f006 fc8e 	bl	79b0 <Print::println()>
    1094:	2102      	movs	r1, #2
    1096:	480f      	ldr	r0, [pc, #60]	; (10d4 <newFileName(char*)+0x74>)
    1098:	f008 fa1c 	bl	94d4 <usb_serial_write>
    109c:	4620      	mov	r0, r4
    109e:	f00b f88f 	bl	c1c0 <strlen>
    10a2:	4601      	mov	r1, r0
    10a4:	4620      	mov	r0, r4
    10a6:	f008 fa15 	bl	94d4 <usb_serial_write>
    return 1;
}
    10aa:	2001      	movs	r0, #1
    10ac:	b004      	add	sp, #16
    10ae:	bd10      	pop	{r4, pc}
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    10b0:	e9cd 1000 	strd	r1, r0, [sp]
    10b4:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    10b8:	4620      	mov	r0, r4
    10ba:	4a03      	ldr	r2, [pc, #12]	; (10c8 <newFileName(char*)+0x68>)
    10bc:	4906      	ldr	r1, [pc, #24]	; (10d8 <newFileName(char*)+0x78>)
    10be:	f00a fb37 	bl	b730 <sprintf>
    10c2:	e7e4      	b.n	108e <newFileName(char*)+0x2e>
    10c4:	20029490 	.word	0x20029490
    10c8:	2000040c 	.word	0x2000040c
    10cc:	20000410 	.word	0x20000410
    10d0:	200085d4 	.word	0x200085d4
    10d4:	20000464 	.word	0x20000464
    10d8:	20000424 	.word	0x20000424

000010dc <storeData(short)>:
static int32_t fileHeader[128];
uint32_t nbuf;

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    10dc:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    10de:	4604      	mov	r4, r0
{
    10e0:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    10e2:	2800      	cmp	r0, #0
    10e4:	d04a      	beq.n	117c <storeData(short)+0xa0>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    10e6:	2801      	cmp	r0, #1
    10e8:	d00a      	beq.n	1100 <storeData(short)+0x24>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    10ea:	2802      	cmp	r0, #2
    10ec:	f000 80c9 	beq.w	1282 <storeData(short)+0x1a6>
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    10f0:	1ec3      	subs	r3, r0, #3
    10f2:	b29b      	uxth	r3, r3
    10f4:	2b01      	cmp	r3, #1
    10f6:	f240 8144 	bls.w	1382 <storeData(short)+0x2a6>
            file.close();
        }
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    }
    return status;
}
    10fa:	4620      	mov	r0, r4
    10fc:	b014      	add	sp, #80	; 0x50
    10fe:	bd70      	pop	{r4, r5, r6, pc}
    1100:	4dad      	ldr	r5, [pc, #692]	; (13b8 <storeData(short)+0x2dc>)
        if(proc==0)
    1102:	4bae      	ldr	r3, [pc, #696]	; (13bc <storeData(short)+0x2e0>)
    {   nbuf=0;
    1104:	2200      	movs	r2, #0
    1106:	4eae      	ldr	r6, [pc, #696]	; (13c0 <storeData(short)+0x2e4>)
        if(proc==0)
    1108:	f9b3 3000 	ldrsh.w	r3, [r3]
    {   nbuf=0;
    110c:	6032      	str	r2, [r6, #0]
        if(proc==0)
    110e:	2b00      	cmp	r3, #0
    1110:	f040 8084 	bne.w	121c <storeData(short)+0x140>
          hdr = headerInit(fsamp, NCH, NBITS, SerNum);
    1114:	49ab      	ldr	r1, [pc, #684]	; (13c4 <storeData(short)+0x2e8>)
    1116:	2220      	movs	r2, #32
    1118:	4bab      	ldr	r3, [pc, #684]	; (13c8 <storeData(short)+0x2ec>)
    111a:	6808      	ldr	r0, [r1, #0]
    111c:	2101      	movs	r1, #1
    111e:	681b      	ldr	r3, [r3, #0]
    1120:	f7ff fe4c 	bl	dbc <headerInit(long, long, long, int)>
    1124:	4601      	mov	r1, r0
    return m_fFile   ? m_fFile->write(buf, count)
    1126:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1128:	2800      	cmp	r0, #0
    112a:	d07e      	beq.n	122a <storeData(short)+0x14e>
    112c:	f44f 7200 	mov.w	r2, #512	; 0x200
    1130:	f002 fdaa 	bl	3c88 <FatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    1134:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1138:	f0c0 8083 	bcc.w	1242 <storeData(short)+0x166>
    113c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    113e:	2800      	cmp	r0, #0
    1140:	f000 8096 	beq.w	1270 <storeData(short)+0x194>
    1144:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    1148:	49a0      	ldr	r1, [pc, #640]	; (13cc <storeData(short)+0x2f0>)
    114a:	f002 fd9d 	bl	3c88 <FatFile::write(void const*, unsigned int)>
    114e:	4604      	mov	r4, r0
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    1150:	f5b4 5fc0 	cmp.w	r4, #6144	; 0x1800
    1154:	f0c0 8099 	bcc.w	128a <storeData(short)+0x1ae>
        disk_count++;
    1158:	499d      	ldr	r1, [pc, #628]	; (13d0 <storeData(short)+0x2f4>)
          nbuf++;
    115a:	6833      	ldr	r3, [r6, #0]
        disk_count++;
    115c:	680a      	ldr	r2, [r1, #0]
          nbuf++;
    115e:	3301      	adds	r3, #1
        disk_count++;
    1160:	3201      	adds	r2, #1
          nbuf++;
    1162:	6033      	str	r3, [r6, #0]
        disk_count++;
    1164:	600a      	str	r2, [r1, #0]
    1166:	499b      	ldr	r1, [pc, #620]	; (13d4 <storeData(short)+0x2f8>)
        if((nbuf % 1000)==0 ) file.flush();
    1168:	4a9b      	ldr	r2, [pc, #620]	; (13d8 <storeData(short)+0x2fc>)
        disk_count++;
    116a:	fb01 f303 	mul.w	r3, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    116e:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
    1172:	d275      	bcs.n	1260 <storeData(short)+0x184>
    1174:	2402      	movs	r4, #2
}
    1176:	4620      	mov	r0, r4
    1178:	b014      	add	sp, #80	; 0x50
    117a:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    117c:	4897      	ldr	r0, [pc, #604]	; (13dc <storeData(short)+0x300>)
    117e:	f7ff ff11 	bl	fa4 <newDirectory(char*)>
    1182:	b1d8      	cbz	r0, 11bc <storeData(short)+0xe0>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
    1184:	4d96      	ldr	r5, [pc, #600]	; (13e0 <storeData(short)+0x304>)
    1186:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    118a:	2a00      	cmp	r2, #0
    118c:	f000 80bb 	beq.w	1306 <storeData(short)+0x22a>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1190:	466e      	mov	r6, sp
    1192:	4611      	mov	r1, r2
    1194:	4623      	mov	r3, r4
    1196:	4a91      	ldr	r2, [pc, #580]	; (13dc <storeData(short)+0x300>)
    1198:	4630      	mov	r0, r6
  FatFile() {}
    119a:	9400      	str	r4, [sp, #0]
    119c:	f002 fb72 	bl	3884 <FatFile::open(FatVolume*, char const*, int)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    11a0:	2800      	cmp	r0, #0
    11a2:	f000 80bd 	beq.w	1320 <storeData(short)+0x244>
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    11a6:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    11aa:	2800      	cmp	r0, #0
    11ac:	f000 80cf 	beq.w	134e <storeData(short)+0x272>
    11b0:	498a      	ldr	r1, [pc, #552]	; (13dc <storeData(short)+0x300>)
    11b2:	f003 fb9d 	bl	48f0 <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    11b6:	2800      	cmp	r0, #0
    11b8:	f000 80d2 	beq.w	1360 <storeData(short)+0x284>
        if(newFileName(fileName))
    11bc:	4889      	ldr	r0, [pc, #548]	; (13e4 <storeData(short)+0x308>)
    11be:	f7ff ff4f 	bl	1060 <newFileName(char*)>
    11c2:	2800      	cmp	r0, #0
    11c4:	f000 80f5 	beq.w	13b2 <storeData(short)+0x2d6>
            file = sd.open(fileName, FILE_WRITE); 
    11c8:	f244 2302 	movw	r3, #16898	; 0x4202
    11cc:	4a85      	ldr	r2, [pc, #532]	; (13e4 <storeData(short)+0x308>)
    11ce:	4984      	ldr	r1, [pc, #528]	; (13e0 <storeData(short)+0x304>)
    11d0:	4668      	mov	r0, sp
    11d2:	f003 fcf7 	bl	4bc4 <FsVolume::open(char const*, int)>
class Print
    11d6:	4d78      	ldr	r5, [pc, #480]	; (13b8 <storeData(short)+0x2dc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    11d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
class StreamFile : public stream_t, public BaseFile {
    11dc:	f105 0010 	add.w	r0, r5, #16
    11e0:	732b      	strb	r3, [r5, #12]
    11e2:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    11e6:	e9c5 1201 	strd	r1, r2, [r5, #4]
    11ea:	a904      	add	r1, sp, #16
    11ec:	f003 fba8 	bl	4940 <FsBaseFile::operator=(FsBaseFile const&)>
    11f0:	4b7d      	ldr	r3, [pc, #500]	; (13e8 <storeData(short)+0x30c>)
  ~FsBaseFile() { close(); }
    11f2:	a804      	add	r0, sp, #16
    11f4:	9300      	str	r3, [sp, #0]
    11f6:	f003 fbf1 	bl	49dc <FsBaseFile::close()>
  bool isOpen() const { return m_fFile || m_xFile; }
    11fa:	6cab      	ldr	r3, [r5, #72]	; 0x48
    11fc:	2b00      	cmp	r3, #0
    11fe:	d180      	bne.n	1102 <storeData(short)+0x26>
    1200:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1202:	2b00      	cmp	r3, #0
    1204:	f47f af7d 	bne.w	1102 <storeData(short)+0x26>
    1208:	2111      	movs	r1, #17
    120a:	4878      	ldr	r0, [pc, #480]	; (13ec <storeData(short)+0x310>)
    120c:	f008 f962 	bl	94d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1210:	4877      	ldr	r0, [pc, #476]	; (13f0 <storeData(short)+0x314>)
                return STOPPED; 
    1212:	f04f 34ff 	mov.w	r4, #4294967295
    1216:	f006 fbcb 	bl	79b0 <Print::println()>
    121a:	e76e      	b.n	10fa <storeData(short)+0x1e>
          makeHeader(fileHeader);
    121c:	4875      	ldr	r0, [pc, #468]	; (13f4 <storeData(short)+0x318>)
    121e:	f7ff fe71 	bl	f04 <makeHeader(long*)>
    return m_fFile   ? m_fFile->write(buf, count)
    1222:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr=(char *)fileHeader;
    1224:	4973      	ldr	r1, [pc, #460]	; (13f4 <storeData(short)+0x318>)
    1226:	2800      	cmp	r0, #0
    1228:	d180      	bne.n	112c <storeData(short)+0x50>
    122a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
    122c:	2800      	cmp	r0, #0
    122e:	f000 809e 	beq.w	136e <storeData(short)+0x292>
    1232:	f44f 7200 	mov.w	r2, #512	; 0x200
    1236:	f001 fc8b 	bl	2b50 <ExFatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    123a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    123e:	f4bf af7d 	bcs.w	113c <storeData(short)+0x60>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    1242:	2400      	movs	r4, #0
  bool isOpen() const { return m_fFile || m_xFile; }
    1244:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1246:	2b00      	cmp	r3, #0
    1248:	d059      	beq.n	12fe <storeData(short)+0x222>
        {   if(proc==0)
    124a:	4b5c      	ldr	r3, [pc, #368]	; (13bc <storeData(short)+0x2e0>)
    124c:	f9b3 3000 	ldrsh.w	r3, [r3]
    1250:	2b00      	cmp	r3, #0
    1252:	d046      	beq.n	12e2 <storeData(short)+0x206>
            file.close();
    1254:	4868      	ldr	r0, [pc, #416]	; (13f8 <storeData(short)+0x31c>)
    1256:	f003 fbc1 	bl	49dc <FsBaseFile::close()>
}
    125a:	4620      	mov	r0, r4
    125c:	b014      	add	sp, #80	; 0x50
    125e:	bd70      	pop	{r4, r5, r6, pc}
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    1260:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1262:	2800      	cmp	r0, #0
    1264:	f000 8085 	beq.w	1372 <storeData(short)+0x296>
    1268:	2402      	movs	r4, #2
    126a:	f002 fd07 	bl	3c7c <FatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    126e:	e744      	b.n	10fa <storeData(short)+0x1e>
    1270:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
    1272:	b148      	cbz	r0, 1288 <storeData(short)+0x1ac>
    1274:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    1278:	4954      	ldr	r1, [pc, #336]	; (13cc <storeData(short)+0x2f0>)
    127a:	f001 fc69 	bl	2b50 <ExFatFile::write(void const*, unsigned int)>
    127e:	4604      	mov	r4, r0
    1280:	e766      	b.n	1150 <storeData(short)+0x74>
    1282:	4d4d      	ldr	r5, [pc, #308]	; (13b8 <storeData(short)+0x2dc>)
    1284:	4e4e      	ldr	r6, [pc, #312]	; (13c0 <storeData(short)+0x2e4>)
    1286:	e759      	b.n	113c <storeData(short)+0x60>
    1288:	4604      	mov	r4, r0
    128a:	2101      	movs	r1, #1
    128c:	485b      	ldr	r0, [pc, #364]	; (13fc <storeData(short)+0x320>)
    128e:	f008 f921 	bl	94d4 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1292:	2300      	movs	r3, #0
    1294:	220a      	movs	r2, #10
    1296:	4621      	mov	r1, r4
    1298:	4855      	ldr	r0, [pc, #340]	; (13f0 <storeData(short)+0x314>)
    129a:	f006 fbb3 	bl	7a04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    129e:	2101      	movs	r1, #1
    12a0:	4857      	ldr	r0, [pc, #348]	; (1400 <storeData(short)+0x324>)
    12a2:	f008 f917 	bl	94d4 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    12a6:	2102      	movs	r1, #2
    12a8:	4851      	ldr	r0, [pc, #324]	; (13f0 <storeData(short)+0x314>)
    12aa:	f006 fb75 	bl	7998 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    12ae:	4850      	ldr	r0, [pc, #320]	; (13f0 <storeData(short)+0x314>)
    12b0:	f006 fb7e 	bl	79b0 <Print::println()>
        disk_count++;
    12b4:	4946      	ldr	r1, [pc, #280]	; (13d0 <storeData(short)+0x2f4>)
    12b6:	4847      	ldr	r0, [pc, #284]	; (13d4 <storeData(short)+0x2f8>)
    12b8:	6833      	ldr	r3, [r6, #0]
    12ba:	680a      	ldr	r2, [r1, #0]
    12bc:	fb00 f303 	mul.w	r3, r0, r3
        if((nbuf % 1000)==0 ) file.flush();
    12c0:	4845      	ldr	r0, [pc, #276]	; (13d8 <storeData(short)+0x2fc>)
        disk_count++;
    12c2:	3201      	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    12c4:	ebb0 0ff3 	cmp.w	r0, r3, ror #3
        disk_count++;
    12c8:	600a      	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    12ca:	d3ba      	bcc.n	1242 <storeData(short)+0x166>
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    12cc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    12ce:	2800      	cmp	r0, #0
    12d0:	d059      	beq.n	1386 <storeData(short)+0x2aa>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    12d2:	2403      	movs	r4, #3
    12d4:	f002 fcd2 	bl	3c7c <FatFile::sync()>
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    12d8:	3c03      	subs	r4, #3
    12da:	bf18      	it	ne
    12dc:	f04f 34ff 	movne.w	r4, #4294967295
    12e0:	e7b0      	b.n	1244 <storeData(short)+0x168>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    12e2:	4b37      	ldr	r3, [pc, #220]	; (13c0 <storeData(short)+0x2e4>)
  wav_hdr.dLen = nbytes;
    12e4:	4847      	ldr	r0, [pc, #284]	; (1404 <storeData(short)+0x328>)
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    12e6:	681b      	ldr	r3, [r3, #0]
  wav_hdr.rLen += wav_hdr.dLen;
    12e8:	6842      	ldr	r2, [r0, #4]
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    12ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    12ee:	02db      	lsls	r3, r3, #11
  wav_hdr.rLen += wav_hdr.dLen;
    12f0:	441a      	add	r2, r3
  wav_hdr.dLen = nbytes;
    12f2:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    12f6:	6042      	str	r2, [r0, #4]
              writeHeader(hdr);
    12f8:	f7ff fdbc 	bl	e74 <writeHeader(char*)>
    12fc:	e7aa      	b.n	1254 <storeData(short)+0x178>
  bool isOpen() const { return m_fFile || m_xFile; }
    12fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1300:	2b00      	cmp	r3, #0
    1302:	d1a2      	bne.n	124a <storeData(short)+0x16e>
    1304:	e6f9      	b.n	10fa <storeData(short)+0x1e>
    1306:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           : m_xVol ? m_xVol->exists(path)
    130a:	b1c9      	cbz	r1, 1340 <storeData(short)+0x264>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    130c:	466e      	mov	r6, sp
    130e:	4613      	mov	r3, r2
  ExFatFile() {}
    1310:	920c      	str	r2, [sp, #48]	; 0x30
    1312:	4630      	mov	r0, r6
    1314:	4a31      	ldr	r2, [pc, #196]	; (13dc <storeData(short)+0x300>)
    1316:	f001 f999 	bl	264c <ExFatFile::open(ExFatVolume*, char const*, int)>
    131a:	2800      	cmp	r0, #0
    131c:	f47f af43 	bne.w	11a6 <storeData(short)+0xca>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    1320:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    1324:	2a00      	cmp	r2, #0
    1326:	d035      	beq.n	1394 <storeData(short)+0x2b8>
    1328:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    132a:	f202 4144 	addw	r1, r2, #1092	; 0x444
    132e:	2301      	movs	r3, #1
    1330:	4630      	mov	r0, r6
    1332:	4a2a      	ldr	r2, [pc, #168]	; (13dc <storeData(short)+0x300>)
    1334:	9400      	str	r4, [sp, #0]
    1336:	f002 f9b7 	bl	36a8 <FatFile::mkdir(FatFile*, char const*, bool)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    133a:	2800      	cmp	r0, #0
    133c:	f47f af33 	bne.w	11a6 <storeData(short)+0xca>
    1340:	4931      	ldr	r1, [pc, #196]	; (1408 <storeData(short)+0x32c>)
    1342:	f04f 34ff 	mov.w	r4, #4294967295
    1346:	482a      	ldr	r0, [pc, #168]	; (13f0 <storeData(short)+0x314>)
    1348:	f7ff fca2 	bl	c90 <Print::println(char const*) [clone .isra.0]>
    134c:	e6d5      	b.n	10fa <storeData(short)+0x1e>
    134e:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    1352:	b128      	cbz	r0, 1360 <storeData(short)+0x284>
    1354:	4921      	ldr	r1, [pc, #132]	; (13dc <storeData(short)+0x300>)
    1356:	f001 fffd 	bl	3354 <ExFatVolume::chdir(char const*)>
    135a:	2800      	cmp	r0, #0
    135c:	f47f af2e 	bne.w	11bc <storeData(short)+0xe0>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1360:	492a      	ldr	r1, [pc, #168]	; (140c <storeData(short)+0x330>)
    1362:	f04f 34ff 	mov.w	r4, #4294967295
    1366:	4822      	ldr	r0, [pc, #136]	; (13f0 <storeData(short)+0x314>)
    1368:	f7ff fc92 	bl	c90 <Print::println(char const*) [clone .isra.0]>
    136c:	e6c5      	b.n	10fa <storeData(short)+0x1e>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    136e:	2400      	movs	r4, #0
    1370:	e6c3      	b.n	10fa <storeData(short)+0x1e>
    1372:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    1374:	2402      	movs	r4, #2
    1376:	2800      	cmp	r0, #0
    1378:	f43f aebf 	beq.w	10fa <storeData(short)+0x1e>
    137c:	f001 fa54 	bl	2828 <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1380:	e6bb      	b.n	10fa <storeData(short)+0x1e>
    1382:	4d0d      	ldr	r5, [pc, #52]	; (13b8 <storeData(short)+0x2dc>)
    1384:	e7a8      	b.n	12d8 <storeData(short)+0x1fc>
    1386:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1388:	2800      	cmp	r0, #0
    138a:	d0f0      	beq.n	136e <storeData(short)+0x292>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    138c:	2403      	movs	r4, #3
    138e:	f001 fa4b 	bl	2828 <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1392:	e7a1      	b.n	12d8 <storeData(short)+0x1fc>
    1394:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    1398:	2900      	cmp	r1, #0
    139a:	d0d1      	beq.n	1340 <storeData(short)+0x264>
    139c:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    139e:	2301      	movs	r3, #1
    13a0:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    13a4:	4630      	mov	r0, r6
    13a6:	4a0d      	ldr	r2, [pc, #52]	; (13dc <storeData(short)+0x300>)
    13a8:	f001 faf6 	bl	2998 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    13ac:	2800      	cmp	r0, #0
    13ae:	d0c7      	beq.n	1340 <storeData(short)+0x264>
    13b0:	e6f9      	b.n	11a6 <storeData(short)+0xca>
        {  return STOPPED; // if file open fails: don't do anything
    13b2:	f04f 34ff 	mov.w	r4, #4294967295
    13b6:	e6a0      	b.n	10fa <storeData(short)+0x1e>
    13b8:	20028e50 	.word	0x20028e50
    13bc:	20029490 	.word	0x20029490
    13c0:	20028ecc 	.word	0x20028ecc
    13c4:	20008b94 	.word	0x20008b94
    13c8:	2000c178 	.word	0x2000c178
    13cc:	2000c540 	.word	0x2000c540
    13d0:	20028e28 	.word	0x20028e28
    13d4:	26e978d5 	.word	0x26e978d5
    13d8:	00418937 	.word	0x00418937
    13dc:	200281c4 	.word	0x200281c4
    13e0:	20028fa0 	.word	0x20028fa0
    13e4:	20028614 	.word	0x20028614
    13e8:	200006f8 	.word	0x200006f8
    13ec:	20000540 	.word	0x20000540
    13f0:	200085d4 	.word	0x200085d4
    13f4:	2000dd40 	.word	0x2000dd40
    13f8:	20028e60 	.word	0x20028e60
    13fc:	20000554 	.word	0x20000554
    1400:	20000440 	.word	0x20000440
    1404:	20028414 	.word	0x20028414
    1408:	20000528 	.word	0x20000528
    140c:	20000534 	.word	0x20000534

00001410 <saveData(short)>:
//
volatile int32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    1410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1414:	4606      	mov	r6, r0
    if(status==STOPPED) 
    1416:	3001      	adds	r0, #1
    1418:	d076      	beq.n	1508 <saveData(short)+0xf8>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    141a:	4b57      	ldr	r3, [pc, #348]	; (1578 <saveData(short)+0x168>)
    141c:	2208      	movs	r2, #8
      digitalWriteFast(13,HIGH);
    }
    else
      digitalWriteFast(13,LOW);

    if(status<CLOSED) return status; // we are stopped: don't do anything
    141e:	2e00      	cmp	r6, #0
    1420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1424:	f2c0 8084 	blt.w	1530 <saveData(short)+0x120>
  tx=rtc_get();
    1428:	f006 ff2a 	bl	8280 <rtc_get>
  tx = tx % t_acq;
    142c:	4b53      	ldr	r3, [pc, #332]	; (157c <saveData(short)+0x16c>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    142e:	2e01      	cmp	r6, #1
  tx = tx % t_acq;
    1430:	681b      	ldr	r3, [r3, #0]
    1432:	fbb0 f2f3 	udiv	r2, r0, r3
    1436:	fb02 0013 	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    143a:	4b51      	ldr	r3, [pc, #324]	; (1580 <saveData(short)+0x170>)
    143c:	dd05      	ble.n	144a <saveData(short)+0x3a>
    143e:	681a      	ldr	r2, [r3, #0]
    1440:	b11a      	cbz	r2, 144a <saveData(short)+0x3a>
    1442:	681a      	ldr	r2, [r3, #0]
    1444:	4290      	cmp	r0, r2
    1446:	bf38      	it	cc
    1448:	2603      	movcc	r6, #3
  tx_=tx;
    144a:	6018      	str	r0, [r3, #0]

    status=checkEndOfFile(status);

    if(getDataCount()>=NDBL)
    144c:	f000 f900 	bl	1650 <getDataCount()>
    1450:	280b      	cmp	r0, #11
    1452:	d970      	bls.n	1536 <saveData(short)+0x126>
    { 
      digitalWriteFast(13,HIGH);
      if(proc==0)
    1454:	4b4b      	ldr	r3, [pc, #300]	; (1584 <saveData(short)+0x174>)
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    1456:	2108      	movs	r1, #8
    1458:	4a47      	ldr	r2, [pc, #284]	; (1578 <saveData(short)+0x168>)
    145a:	f9b3 3000 	ldrsh.w	r3, [r3]
    145e:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    1462:	2b00      	cmp	r3, #0
    1464:	d16e      	bne.n	1544 <saveData(short)+0x134>
    1466:	4d48      	ldr	r5, [pc, #288]	; (1588 <saveData(short)+0x178>)
    1468:	f505 58c0 	add.w	r8, r5, #6144	; 0x1800
    146c:	46a9      	mov	r9, r5
    146e:	462f      	mov	r7, r5
      { 
        if(NBITS==32)
        {
          for(int ii=0; ii<NDBL; ii++)
          { while(queue_isBusy()); //wait if acq writes to queue
    1470:	f000 f8fc 	bl	166c <queue_isBusy()>
    1474:	4604      	mov	r4, r0
    1476:	2800      	cmp	r0, #0
    1478:	d1fa      	bne.n	1470 <saveData(short)+0x60>
            pullData((uint32_t *)&tempBuffer[ii*NBUF_ACQ]);
    147a:	4638      	mov	r0, r7
          for(int ii=0; ii<NDBL; ii++)
    147c:	f507 7700 	add.w	r7, r7, #512	; 0x200
            pullData((uint32_t *)&tempBuffer[ii*NBUF_ACQ]);
    1480:	f000 f93c 	bl	16fc <pullData(unsigned long*)>
          for(int ii=0; ii<NDBL; ii++)
    1484:	4547      	cmp	r7, r8
    1486:	d1f3      	bne.n	1470 <saveData(short)+0x60>
          }
          
          // differentiate
          static int32_t data0=0;
          diskBuffer[0] =tempBuffer[0]-data0;
    1488:	f8df 8124 	ldr.w	r8, [pc, #292]	; 15b0 <saveData(short)+0x1a0>
    148c:	f8d9 2000 	ldr.w	r2, [r9]
    1490:	4f3e      	ldr	r7, [pc, #248]	; (158c <saveData(short)+0x17c>)
    1492:	f8d8 3000 	ldr.w	r3, [r8]
    1496:	483e      	ldr	r0, [pc, #248]	; (1590 <saveData(short)+0x180>)
    1498:	46b9      	mov	r9, r7
    149a:	eba2 0c03 	sub.w	ip, r2, r3
    149e:	4639      	mov	r1, r7
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=tempBuffer[ii]-tempBuffer[ii-1];
    14a0:	4613      	mov	r3, r2
    14a2:	f855 2f04 	ldr.w	r2, [r5, #4]!
    14a6:	1ad3      	subs	r3, r2, r3
    14a8:	4285      	cmp	r5, r0
    14aa:	f841 3f04 	str.w	r3, [r1, #4]!
    14ae:	d1f7      	bne.n	14a0 <saveData(short)+0x90>
          data0=tempBuffer[MAX_DISK_BUFFER-1];
    14b0:	4b38      	ldr	r3, [pc, #224]	; (1594 <saveData(short)+0x184>)
          // integrate
          static int32_t data1=0;
          diskBuffer[0]=diskBuffer[0]+data1;
    14b2:	f8df e100 	ldr.w	lr, [pc, #256]	; 15b4 <saveData(short)+0x1a4>
          data0=tempBuffer[MAX_DISK_BUFFER-1];
    14b6:	f8d3 37fc 	ldr.w	r3, [r3, #2044]	; 0x7fc
    14ba:	4837      	ldr	r0, [pc, #220]	; (1598 <saveData(short)+0x188>)
    14bc:	f8c8 3000 	str.w	r3, [r8]
          diskBuffer[0]=diskBuffer[0]+data1;
    14c0:	f8de 3000 	ldr.w	r3, [lr]
    14c4:	eb0c 0503 	add.w	r5, ip, r3
    14c8:	4b30      	ldr	r3, [pc, #192]	; (158c <saveData(short)+0x17c>)
    14ca:	462a      	mov	r2, r5
    14cc:	f8c9 5000 	str.w	r5, [r9]
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=diskBuffer[ii]+diskBuffer[ii-1];
    14d0:	f853 1f04 	ldr.w	r1, [r3, #4]!
    14d4:	440a      	add	r2, r1
    14d6:	4298      	cmp	r0, r3
    14d8:	601a      	str	r2, [r3, #0]
    14da:	d1f9      	bne.n	14d0 <saveData(short)+0xc0>
          data1=diskBuffer[MAX_DISK_BUFFER-1];
    14dc:	4b2f      	ldr	r3, [pc, #188]	; (159c <saveData(short)+0x18c>)
    14de:	4a30      	ldr	r2, [pc, #192]	; (15a0 <saveData(short)+0x190>)
    14e0:	f8d3 37fc 	ldr.w	r3, [r3, #2044]	; 0x7fc
    14e4:	f8ce 3000 	str.w	r3, [lr]
          
          #
          for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    14e8:	e001      	b.n	14ee <saveData(short)+0xde>
    14ea:	f857 5f04 	ldr.w	r5, [r7, #4]!
    14ee:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    14f2:	3401      	adds	r4, #1
    14f4:	2c08      	cmp	r4, #8
    14f6:	d1f8      	bne.n	14ea <saveData(short)+0xda>
        { while(queue_isBusy()); //wait if acq writes to queue
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
        }
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      }
      if(haveStore)
    14f8:	4b2a      	ldr	r3, [pc, #168]	; (15a4 <saveData(short)+0x194>)
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	b1c3      	cbz	r3, 1530 <saveData(short)+0x120>
        status=storeData(status);
    14fe:	4630      	mov	r0, r6
    }
    else
      digitalWriteFast(13,LOW);

    return status;
}
    1500:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        status=storeData(status);
    1504:	f7ff bdea 	b.w	10dc <storeData(short)>
      while(queue_isBusy()); //wait if acq writes to queue
    1508:	f000 f8b0 	bl	166c <queue_isBusy()>
    150c:	4604      	mov	r4, r0
    150e:	2800      	cmp	r0, #0
    1510:	d1fa      	bne.n	1508 <saveData(short)+0xf8>
      pullData((uint32_t*)tempBuffer);
    1512:	481d      	ldr	r0, [pc, #116]	; (1588 <saveData(short)+0x178>)
    1514:	f000 f8f2 	bl	16fc <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer[ii];
    1518:	4b23      	ldr	r3, [pc, #140]	; (15a8 <saveData(short)+0x198>)
    151a:	4a21      	ldr	r2, [pc, #132]	; (15a0 <saveData(short)+0x190>)
    151c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1520:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    1524:	3401      	adds	r4, #1
    1526:	2c08      	cmp	r4, #8
    1528:	d1f8      	bne.n	151c <saveData(short)+0x10c>
    152a:	4b13      	ldr	r3, [pc, #76]	; (1578 <saveData(short)+0x168>)
    152c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
    1530:	4630      	mov	r0, r6
    1532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1536:	4b10      	ldr	r3, [pc, #64]	; (1578 <saveData(short)+0x168>)
    1538:	2208      	movs	r2, #8
    153a:	4630      	mov	r0, r6
    153c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1544:	4d11      	ldr	r5, [pc, #68]	; (158c <saveData(short)+0x17c>)
    1546:	f505 57c0 	add.w	r7, r5, #6144	; 0x1800
        { while(queue_isBusy()); //wait if acq writes to queue
    154a:	f000 f88f 	bl	166c <queue_isBusy()>
    154e:	4604      	mov	r4, r0
    1550:	2800      	cmp	r0, #0
    1552:	d1fa      	bne.n	154a <saveData(short)+0x13a>
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    1554:	4628      	mov	r0, r5
        for(int ii=0; ii<NDBL; ii++)
    1556:	f505 7500 	add.w	r5, r5, #512	; 0x200
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    155a:	f000 f8cf 	bl	16fc <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    155e:	42bd      	cmp	r5, r7
    1560:	d1f3      	bne.n	154a <saveData(short)+0x13a>
    1562:	4b12      	ldr	r3, [pc, #72]	; (15ac <saveData(short)+0x19c>)
    1564:	4a0e      	ldr	r2, [pc, #56]	; (15a0 <saveData(short)+0x190>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1566:	f853 1f04 	ldr.w	r1, [r3, #4]!
    156a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    156e:	3401      	adds	r4, #1
    1570:	2c08      	cmp	r4, #8
    1572:	d1f8      	bne.n	1566 <saveData(short)+0x156>
    1574:	e7c0      	b.n	14f8 <saveData(short)+0xe8>
    1576:	bf00      	nop
    1578:	42004000 	.word	0x42004000
    157c:	20008bd4 	.word	0x20008bd4
    1580:	200288ac 	.word	0x200288ac
    1584:	20029490 	.word	0x20029490
    1588:	2000df48 	.word	0x2000df48
    158c:	2000c540 	.word	0x2000c540
    1590:	2000f744 	.word	0x2000f744
    1594:	2000ef48 	.word	0x2000ef48
    1598:	2000dd3c 	.word	0x2000dd3c
    159c:	2000d540 	.word	0x2000d540
    15a0:	20028ea8 	.word	0x20028ea8
    15a4:	20028ea0 	.word	0x20028ea0
    15a8:	2000df44 	.word	0x2000df44
    15ac:	2000c53c 	.word	0x2000c53c
    15b0:	200288bc 	.word	0x200288bc
    15b4:	200288c0 	.word	0x200288c0

000015b8 <_GLOBAL__sub_I_t_acq>:
  FsVolume() = default;
    15b8:	481c      	ldr	r0, [pc, #112]	; (162c <_GLOBAL__sub_I_t_acq+0x74>)
	SPISettings() : _clock(4000000) {
    15ba:	4b1d      	ldr	r3, [pc, #116]	; (1630 <_GLOBAL__sub_I_t_acq+0x78>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    15bc:	491d      	ldr	r1, [pc, #116]	; (1634 <_GLOBAL__sub_I_t_acq+0x7c>)
SdFs sd;
    15be:	4a1e      	ldr	r2, [pc, #120]	; (1638 <_GLOBAL__sub_I_t_acq+0x80>)
}
    15c0:	b510      	push	{r4, lr}
    15c2:	f8c0 34a0 	str.w	r3, [r0, #1184]	; 0x4a0
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() { initSharedSpiCard(); }
    15c6:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    15ca:	2400      	movs	r4, #0
    15cc:	f8c0 148c 	str.w	r1, [r0, #1164]	; 0x48c
    15d0:	f8c0 34a8 	str.w	r3, [r0, #1192]	; 0x4a8
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    15d4:	2107      	movs	r1, #7
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    15d6:	4b19      	ldr	r3, [pc, #100]	; (163c <_GLOBAL__sub_I_t_acq+0x84>)
    15d8:	f8c0 4480 	str.w	r4, [r0, #1152]	; 0x480
    15dc:	f8c0 4484 	str.w	r4, [r0, #1156]	; 0x484
class SdBase : public Vol {
    15e0:	f8c0 4488 	str.w	r4, [r0, #1160]	; 0x488
  SdioConfig() {}
    15e4:	f8a0 4494 	strh.w	r4, [r0, #1172]	; 0x494
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    15e8:	f8c0 449c 	str.w	r4, [r0, #1180]	; 0x49c
  SharedSpiCard() { initSharedSpiCard(); }
    15ec:	f8a0 44ac 	strh.w	r4, [r0, #1196]	; 0x4ac
    15f0:	f8c0 14a4 	str.w	r1, [r0, #1188]	; 0x4a4
    m_type = 0;
    15f4:	f880 44ae 	strb.w	r4, [r0, #1198]	; 0x4ae
SdFs sd;
    15f8:	4911      	ldr	r1, [pc, #68]	; (1640 <_GLOBAL__sub_I_t_acq+0x88>)
  DedicatedSpiCard() = default;
    15fa:	f8c0 44b0 	str.w	r4, [r0, #1200]	; 0x4b0
    15fe:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    1602:	f880 44b4 	strb.w	r4, [r0, #1204]	; 0x4b4
    1606:	f008 f97d 	bl	9904 <__aeabi_atexit>
	constexpr Print() : write_error(0) {}
    160a:	480e      	ldr	r0, [pc, #56]	; (1644 <_GLOBAL__sub_I_t_acq+0x8c>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    160c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1610:	4b0d      	ldr	r3, [pc, #52]	; (1648 <_GLOBAL__sub_I_t_acq+0x90>)
    1612:	7304      	strb	r4, [r0, #12]
FsFile file;
    1614:	4a08      	ldr	r2, [pc, #32]	; (1638 <_GLOBAL__sub_I_t_acq+0x80>)
    1616:	6003      	str	r3, [r0, #0]
    1618:	e9c0 4101 	strd	r4, r1, [r0, #4]
  FsBaseFile() = default;
    161c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    1620:	490a      	ldr	r1, [pc, #40]	; (164c <_GLOBAL__sub_I_t_acq+0x94>)
}
    1622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
FsFile file;
    1626:	f008 b96d 	b.w	9904 <__aeabi_atexit>
    162a:	bf00      	nop
    162c:	20028fa0 	.word	0x20028fa0
    1630:	003d0900 	.word	0x003d0900
    1634:	2000080c 	.word	0x2000080c
    1638:	200085f0 	.word	0x200085f0
    163c:	20000728 	.word	0x20000728
    1640:	00000afd 	.word	0x00000afd
    1644:	20028e50 	.word	0x20028e50
    1648:	200007c4 	.word	0x200007c4
    164c:	00000b81 	.word	0x00000b81

00001650 <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    1650:	4a04      	ldr	r2, [pc, #16]	; (1664 <getDataCount()+0x14>)
    1652:	4b05      	ldr	r3, [pc, #20]	; (1668 <getDataCount()+0x18>)
    1654:	6810      	ldr	r0, [r2, #0]
    1656:	681b      	ldr	r3, [r3, #0]
    1658:	1ac0      	subs	r0, r0, r3
    165a:	bf48      	it	mi
    165c:	30c0      	addmi	r0, #192	; 0xc0
    165e:	b280      	uxth	r0, r0
    1660:	4770      	bx	lr
    1662:	bf00      	nop
    1664:	20029468 	.word	0x20029468
    1668:	20028ea4 	.word	0x20028ea4

0000166c <queue_isBusy()>:

  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    166c:	4b01      	ldr	r3, [pc, #4]	; (1674 <queue_isBusy()+0x8>)
    166e:	6818      	ldr	r0, [r3, #0]
    1670:	4770      	bx	lr
    1672:	bf00      	nop
    1674:	2000df44 	.word	0x2000df44

00001678 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    1678:	b470      	push	{r4, r5, r6}
    if ( (tail+1)%MAXBUF == head ) return 0;
    167a:	4c1b      	ldr	r4, [pc, #108]	; (16e8 <pushData(unsigned long*)+0x70>)
    167c:	4a1b      	ldr	r2, [pc, #108]	; (16ec <pushData(unsigned long*)+0x74>)
    167e:	6823      	ldr	r3, [r4, #0]
    1680:	491b      	ldr	r1, [pc, #108]	; (16f0 <pushData(unsigned long*)+0x78>)
    1682:	3301      	adds	r3, #1
    1684:	680d      	ldr	r5, [r1, #0]
    1686:	fb82 2103 	smull	r2, r1, r2, r3
    168a:	17da      	asrs	r2, r3, #31
    168c:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    1690:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1694:	eba3 1382 	sub.w	r3, r3, r2, lsl #6
    1698:	42ab      	cmp	r3, r5
    169a:	d021      	beq.n	16e0 <pushData(unsigned long*)+0x68>
    //while(busy); 
    queue_busy=1;
    169c:	4e15      	ldr	r6, [pc, #84]	; (16f4 <pushData(unsigned long*)+0x7c>)
    169e:	2201      	movs	r2, #1
    16a0:	1f01      	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    16a2:	2300      	movs	r3, #0
    16a4:	4d14      	ldr	r5, [pc, #80]	; (16f8 <pushData(unsigned long*)+0x80>)
    queue_busy=1;
    16a6:	6032      	str	r2, [r6, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    16a8:	6822      	ldr	r2, [r4, #0]
    16aa:	f851 0f04 	ldr.w	r0, [r1, #4]!
    16ae:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    16b2:	3301      	adds	r3, #1
    16b4:	2b80      	cmp	r3, #128	; 0x80
    16b6:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    16ba:	d1f5      	bne.n	16a8 <pushData(unsigned long*)+0x30>
    tail = (tail+1)%MAXBUF;
    16bc:	6822      	ldr	r2, [r4, #0]
    queue_busy=0;
    return 1; // signal success.
    16be:	2001      	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    16c0:	490a      	ldr	r1, [pc, #40]	; (16ec <pushData(unsigned long*)+0x74>)
    16c2:	3201      	adds	r2, #1
    16c4:	fb81 3102 	smull	r3, r1, r1, r2
    16c8:	17d3      	asrs	r3, r2, #31
    16ca:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    queue_busy=0;
    16ce:	2100      	movs	r1, #0
    tail = (tail+1)%MAXBUF;
    16d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    16d4:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
    16d8:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    16da:	6031      	str	r1, [r6, #0]
  }
    16dc:	bc70      	pop	{r4, r5, r6}
    16de:	4770      	bx	lr
    if ( (tail+1)%MAXBUF == head ) return 0;
    16e0:	2000      	movs	r0, #0
  }
    16e2:	bc70      	pop	{r4, r5, r6}
    16e4:	4770      	bx	lr
    16e6:	bf00      	nop
    16e8:	20029468 	.word	0x20029468
    16ec:	2aaaaaab 	.word	0x2aaaaaab
    16f0:	20028ea4 	.word	0x20028ea4
    16f4:	2000df44 	.word	0x2000df44
    16f8:	2000ff48 	.word	0x2000ff48

000016fc <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    16fc:	4b15      	ldr	r3, [pc, #84]	; (1754 <pullData(unsigned long*)+0x58>)
  {
    16fe:	b430      	push	{r4, r5}
    if ( head==tail ) return 0;
    1700:	4c15      	ldr	r4, [pc, #84]	; (1758 <pullData(unsigned long*)+0x5c>)
    1702:	6822      	ldr	r2, [r4, #0]
    1704:	681b      	ldr	r3, [r3, #0]
    1706:	429a      	cmp	r2, r3
    1708:	d021      	beq.n	174e <pullData(unsigned long*)+0x52>
    //while(busy); 
    queue_busy=1;
    170a:	4d14      	ldr	r5, [pc, #80]	; (175c <pullData(unsigned long*)+0x60>)
    170c:	2201      	movs	r2, #1
    170e:	1f01      	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    1710:	2300      	movs	r3, #0
    1712:	4813      	ldr	r0, [pc, #76]	; (1760 <pullData(unsigned long*)+0x64>)
    queue_busy=1;
    1714:	602a      	str	r2, [r5, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    1716:	6822      	ldr	r2, [r4, #0]
    1718:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    171c:	3301      	adds	r3, #1
    171e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    1722:	2b80      	cmp	r3, #128	; 0x80
    1724:	f841 2f04 	str.w	r2, [r1, #4]!
    1728:	d1f5      	bne.n	1716 <pullData(unsigned long*)+0x1a>
    head = (head+1)%MAXBUF;
    172a:	6822      	ldr	r2, [r4, #0]
    queue_busy=0;
    return 1;
    172c:	2001      	movs	r0, #1
    head = (head+1)%MAXBUF;
    172e:	490d      	ldr	r1, [pc, #52]	; (1764 <pullData(unsigned long*)+0x68>)
    1730:	3201      	adds	r2, #1
    1732:	fb81 3102 	smull	r3, r1, r1, r2
    1736:	17d3      	asrs	r3, r2, #31
    1738:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    queue_busy=0;
    173c:	2100      	movs	r1, #0
    head = (head+1)%MAXBUF;
    173e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1742:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
    1746:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    1748:	6029      	str	r1, [r5, #0]
  }
    174a:	bc30      	pop	{r4, r5}
    174c:	4770      	bx	lr
    if ( head==tail ) return 0;
    174e:	2000      	movs	r0, #0
  }
    1750:	bc30      	pop	{r4, r5}
    1752:	4770      	bx	lr
    1754:	20029468 	.word	0x20029468
    1758:	20028ea4 	.word	0x20028ea4
    175c:	2000df44 	.word	0x2000df44
    1760:	2000ff48 	.word	0x2000ff48
    1764:	2aaaaaab 	.word	0x2aaaaaab

00001768 <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    1768:	4a54      	ldr	r2, [pc, #336]	; (18bc <time2date(unsigned long, datetime_t*)+0x154>)
  {
    176a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    176e:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1772:	f240 196d 	movw	r9, #365	; 0x16d
    1776:	4e52      	ldr	r6, [pc, #328]	; (18c0 <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1778:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    177a:	4f52      	ldr	r7, [pc, #328]	; (18c4 <time2date(unsigned long, datetime_t*)+0x15c>)
    177c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 18d8 <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    1780:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1784:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    1788:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    178a:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    178e:	4c4e      	ldr	r4, [pc, #312]	; (18c8 <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    1790:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    1794:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    1798:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    179c:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    179e:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    17a2:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    17a4:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    17a8:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    17ac:	4b47      	ldr	r3, [pc, #284]	; (18cc <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    17ae:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    17b2:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    17b6:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    17b8:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    17ba:	1ae2      	subs	r2, r4, r3
    17bc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    17c0:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    17c2:	089b      	lsrs	r3, r3, #2
    17c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    17c8:	1ae4      	subs	r4, r4, r3
    17ca:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    17cc:	b2c3      	uxtb	r3, r0
    17ce:	f240 1c6d 	movw	ip, #365	; 0x16d
    17d2:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    17d6:	f013 0403 	ands.w	r4, r3, #3
    17da:	fb06 f503 	mul.w	r5, r6, r3
    17de:	d108      	bne.n	17f2 <time2date(unsigned long, datetime_t*)+0x8a>
    17e0:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    17e4:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    17e8:	d303      	bcc.n	17f2 <time2date(unsigned long, datetime_t*)+0x8a>
    17ea:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    17ee:	bf38      	it	cc
    17f0:	46cc      	movcc	ip, r9
    17f2:	4462      	add	r2, ip
    17f4:	3001      	adds	r0, #1
    17f6:	4596      	cmp	lr, r2
    17f8:	d2e8      	bcs.n	17cc <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    17fa:	4d35      	ldr	r5, [pc, #212]	; (18d0 <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    17fc:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    17fe:	fba5 0503 	umull	r0, r5, r5, r3
    1802:	b3a4      	cbz	r4, 186e <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1804:	096e      	lsrs	r6, r5, #5
    1806:	2764      	movs	r7, #100	; 0x64
    1808:	f44f 70c8 	mov.w	r0, #400	; 0x190
    180c:	09ed      	lsrs	r5, r5, #7
    180e:	fb07 3616 	mls	r6, r7, r6, r3
    1812:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    1816:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    181a:	ebae 0e02 	sub.w	lr, lr, r2
    181e:	2300      	movs	r3, #0
    1820:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    1822:	4f2c      	ldr	r7, [pc, #176]	; (18d4 <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    1824:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    1826:	e00a      	b.n	183e <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    1828:	f813 c007 	ldrb.w	ip, [r3, r7]
    182c:	4584      	cmp	ip, r0
    182e:	d837      	bhi.n	18a0 <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    1830:	2a0c      	cmp	r2, #12
        time -= monthLength;
    1832:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    1836:	d012      	beq.n	185e <time2date(unsigned long, datetime_t*)+0xf6>
    1838:	3201      	adds	r2, #1
    183a:	3301      	adds	r3, #1
    183c:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    183e:	2b01      	cmp	r3, #1
    1840:	fa5f fe83 	uxtb.w	lr, r3
    1844:	d1f0      	bne.n	1828 <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    1846:	b91c      	cbnz	r4, 1850 <time2date(unsigned long, datetime_t*)+0xe8>
    1848:	b1f6      	cbz	r6, 1888 <time2date(unsigned long, datetime_t*)+0x120>
    184a:	f04f 0c1d 	mov.w	ip, #29
    184e:	e001      	b.n	1854 <time2date(unsigned long, datetime_t*)+0xec>
    1850:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    1854:	4560      	cmp	r0, ip
    1856:	d32d      	bcc.n	18b4 <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    1858:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    185c:	e7ec      	b.n	1838 <time2date(unsigned long, datetime_t*)+0xd0>
    185e:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    1862:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    1864:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    1868:	70c8      	strb	r0, [r1, #3]
  }
    186a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    186e:	2064      	movs	r0, #100	; 0x64
    1870:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1872:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    1874:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1878:	f44f 70c8 	mov.w	r0, #400	; 0x190
    187c:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    1880:	b14e      	cbz	r6, 1896 <time2date(unsigned long, datetime_t*)+0x12e>
    1882:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    1886:	e7c8      	b.n	181a <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    1888:	2d00      	cmp	r5, #0
    188a:	bf14      	ite	ne
    188c:	f04f 0c1c 	movne.w	ip, #28
    1890:	f04f 0c1d 	moveq.w	ip, #29
    1894:	e7de      	b.n	1854 <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    1896:	2d00      	cmp	r5, #0
    1898:	d1bd      	bne.n	1816 <time2date(unsigned long, datetime_t*)+0xae>
    189a:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    189e:	e7bc      	b.n	181a <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    18a0:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    18a4:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    18a6:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    18aa:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    18ac:	f881 e002 	strb.w	lr, [r1, #2]
  }
    18b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    18b4:	f04f 0e02 	mov.w	lr, #2
    18b8:	e7d3      	b.n	1862 <time2date(unsigned long, datetime_t*)+0xfa>
    18ba:	bf00      	nop
    18bc:	88888889 	.word	0x88888889
    18c0:	c28f5c29 	.word	0xc28f5c29
    18c4:	028f5c28 	.word	0x028f5c28
    18c8:	aaaaaaab 	.word	0xaaaaaaab
    18cc:	24924925 	.word	0x24924925
    18d0:	51eb851f 	.word	0x51eb851f
    18d4:	20000580 	.word	0x20000580
    18d8:	00a3d70a 	.word	0x00a3d70a

000018dc <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    18dc:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    18de:	4a35      	ldr	r2, [pc, #212]	; (19b4 <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    18e0:	314e      	adds	r1, #78	; 0x4e
    18e2:	b2c9      	uxtb	r1, r1
  {
    18e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    18e8:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    18ec:	b1e1      	cbz	r1, 1928 <date2time(datetime_t*)+0x4c>
    18ee:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    18f2:	f240 73b3 	movw	r3, #1971	; 0x7b3
    18f6:	4d30      	ldr	r5, [pc, #192]	; (19b8 <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    18f8:	4e30      	ldr	r6, [pc, #192]	; (19bc <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    18fa:	4f31      	ldr	r7, [pc, #196]	; (19c0 <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    18fc:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 19cc <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    1900:	4563      	cmp	r3, ip
    1902:	fb05 f403 	mul.w	r4, r5, r3
    1906:	d00f      	beq.n	1928 <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    1908:	f013 0f03 	tst.w	r3, #3
    190c:	f103 0301 	add.w	r3, r3, #1
    1910:	d1f6      	bne.n	1900 <date2time(datetime_t*)+0x24>
    1912:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    1916:	d302      	bcc.n	191e <date2time(datetime_t*)+0x42>
    1918:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    191c:	d3f0      	bcc.n	1900 <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    191e:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    1920:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    1922:	fb05 f403 	mul.w	r4, r5, r3
    1926:	d1ef      	bne.n	1908 <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    1928:	f990 e002 	ldrsb.w	lr, [r0, #2]
    192c:	f1be 0f01 	cmp.w	lr, #1
    1930:	dd29      	ble.n	1986 <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1932:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    1936:	4e23      	ldr	r6, [pc, #140]	; (19c4 <date2time(datetime_t*)+0xe8>)
    1938:	2564      	movs	r5, #100	; 0x64
    193a:	f44f 74c8 	mov.w	r4, #400	; 0x190
    193e:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    1942:	f8df 808c 	ldr.w	r8, [pc, #140]	; 19d0 <date2time(datetime_t*)+0xf4>
    1946:	4920      	ldr	r1, [pc, #128]	; (19c8 <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1948:	0977      	lsrs	r7, r6, #5
    194a:	09f6      	lsrs	r6, r6, #7
    194c:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1950:	4d1b      	ldr	r5, [pc, #108]	; (19c0 <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1952:	fb04 3616 	mls	r6, r4, r6, r3
    1956:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    195a:	2301      	movs	r3, #1
    195c:	e007      	b.n	196e <date2time(datetime_t*)+0x92>
    195e:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1960:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    1964:	3101      	adds	r1, #1
    1966:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1968:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    196c:	d00b      	beq.n	1986 <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    196e:	2b02      	cmp	r3, #2
    1970:	d1f5      	bne.n	195e <date2time(datetime_t*)+0x82>
    1972:	2c00      	cmp	r4, #0
    1974:	d1f3      	bne.n	195e <date2time(datetime_t*)+0x82>
    1976:	b90f      	cbnz	r7, 197c <date2time(datetime_t*)+0xa0>
    1978:	2e00      	cmp	r6, #0
    197a:	d1f0      	bne.n	195e <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    197c:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    197e:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    1980:	3101      	adds	r1, #1
    1982:	4573      	cmp	r3, lr
    1984:	d1f3      	bne.n	196e <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    1986:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    198a:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    198e:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    1992:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    1996:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    199a:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    199c:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    19a0:	f990 1003 	ldrsb.w	r1, [r0, #3]
    19a4:	4c06      	ldr	r4, [pc, #24]	; (19c0 <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    19a6:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    19a8:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    19aa:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    19ae:	4410      	add	r0, r2
    19b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19b4:	01e13380 	.word	0x01e13380
    19b8:	c28f5c29 	.word	0xc28f5c29
    19bc:	028f5c28 	.word	0x028f5c28
    19c0:	00015180 	.word	0x00015180
    19c4:	51eb851f 	.word	0x51eb851f
    19c8:	20000580 	.word	0x20000580
    19cc:	00a3d70a 	.word	0x00a3d70a
    19d0:	00263b80 	.word	0x00263b80

000019d4 <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    19d4:	2001      	movs	r0, #1
    19d6:	4770      	bx	lr

000019d8 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    19d8:	b500      	push	{lr}
    19da:	b083      	sub	sp, #12
    19dc:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    19de:	f006 fc4f 	bl	8280 <rtc_get>
    19e2:	9901      	ldr	r1, [sp, #4]
    19e4:	f7ff fec0 	bl	1768 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    19e8:	2001      	movs	r0, #1
    19ea:	b003      	add	sp, #12
    19ec:	f85d fb04 	ldr.w	pc, [sp], #4

000019f0 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    19f0:	b570      	push	{r4, r5, r6, lr}
    19f2:	b082      	sub	sp, #8
    19f4:	4614      	mov	r4, r2
    19f6:	460d      	mov	r5, r1
    19f8:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    19fa:	f006 fc41 	bl	8280 <rtc_get>
    19fe:	4669      	mov	r1, sp
    1a00:	f7ff feb2 	bl	1768 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    1a04:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    1a08:	4608      	mov	r0, r1
    t.month=month;
    1a0a:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    1a0e:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    1a12:	f7ff ff63 	bl	18dc <date2time(datetime_t*)>
    1a16:	f006 fc45 	bl	82a4 <rtc_set>
    rtc_set_datetime(&t);
  }
    1a1a:	b002      	add	sp, #8
    1a1c:	bd70      	pop	{r4, r5, r6, pc}
    1a1e:	bf00      	nop

00001a20 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    1a20:	b570      	push	{r4, r5, r6, lr}
    1a22:	b082      	sub	sp, #8
    1a24:	4614      	mov	r4, r2
    1a26:	460d      	mov	r5, r1
    1a28:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    1a2a:	f006 fc29 	bl	8280 <rtc_get>
    1a2e:	4669      	mov	r1, sp
    1a30:	f7ff fe9a 	bl	1768 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    1a34:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    1a38:	4608      	mov	r0, r1
    t.min=minutes;
    1a3a:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    1a3e:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    1a42:	f7ff ff4b 	bl	18dc <date2time(datetime_t*)>
    1a46:	f006 fc2d 	bl	82a4 <rtc_set>
    rtc_set_datetime(&t);
  }
    1a4a:	b002      	add	sp, #8
    1a4c:	bd70      	pop	{r4, r5, r6, pc}
    1a4e:	bf00      	nop

00001a50 <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1a50:	b510      	push	{r4, lr}
    1a52:	4604      	mov	r4, r0
    1a54:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    1a56:	f007 fcd3 	bl	9400 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1a5a:	2800      	cmp	r0, #0
    1a5c:	d0fb      	beq.n	1a56 <menuGetInt32(long*) [clone .isra.0]+0x6>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1a5e:	210d      	movs	r1, #13
    1a60:	aa02      	add	r2, sp, #8
    1a62:	2328      	movs	r3, #40	; 0x28
    1a64:	480d      	ldr	r0, [pc, #52]	; (1a9c <menuGetInt32(long*) [clone .isra.0]+0x4c>)
    1a66:	f006 f899 	bl	7b9c <Stream::readBytesUntil(char, char*, unsigned int)>
    1a6a:	4603      	mov	r3, r0
  buffer[count]=0;
    1a6c:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1a6e:	a802      	add	r0, sp, #8
    1a70:	3330      	adds	r3, #48	; 0x30
    1a72:	446b      	add	r3, sp
    1a74:	f803 2c28 	strb.w	r2, [r3, #-40]
    1a78:	f00a fba2 	bl	c1c0 <strlen>
    1a7c:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a7e:	a802      	add	r0, sp, #8
    1a80:	f007 fd28 	bl	94d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a84:	4805      	ldr	r0, [pc, #20]	; (1a9c <menuGetInt32(long*) [clone .isra.0]+0x4c>)
    1a86:	f005 ff93 	bl	79b0 <Print::println()>
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1a8a:	aa01      	add	r2, sp, #4
    1a8c:	4904      	ldr	r1, [pc, #16]	; (1aa0 <menuGetInt32(long*) [clone .isra.0]+0x50>)
    1a8e:	a802      	add	r0, sp, #8
    1a90:	f009 fe6e 	bl	b770 <sscanf>
    1a94:	9b01      	ldr	r3, [sp, #4]
    1a96:	6023      	str	r3, [r4, #0]
  return 1;
}
    1a98:	b00c      	add	sp, #48	; 0x30
    1a9a:	bd10      	pop	{r4, pc}
    1a9c:	200085d4 	.word	0x200085d4
    1aa0:	2000057c 	.word	0x2000057c

00001aa4 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1aa4:	b510      	push	{r4, lr}
    1aa6:	4604      	mov	r4, r0
    1aa8:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    1aaa:	f007 fca9 	bl	9400 <usb_serial_available>
  while(!Serial.available()) continue;
    1aae:	2800      	cmp	r0, #0
    1ab0:	d0fb      	beq.n	1aaa <menuGetInt16(short*) [clone .isra.0]+0x6>
  count = Serial.readBytesUntil('\r',buffer,40);
    1ab2:	210d      	movs	r1, #13
    1ab4:	aa02      	add	r2, sp, #8
    1ab6:	2328      	movs	r3, #40	; 0x28
    1ab8:	480d      	ldr	r0, [pc, #52]	; (1af0 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    1aba:	f006 f86f 	bl	7b9c <Stream::readBytesUntil(char, char*, unsigned int)>
    1abe:	4603      	mov	r3, r0
  buffer[count]=0;
    1ac0:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1ac2:	a802      	add	r0, sp, #8
    1ac4:	3330      	adds	r3, #48	; 0x30
    1ac6:	446b      	add	r3, sp
    1ac8:	f803 2c28 	strb.w	r2, [r3, #-40]
    1acc:	f00a fb78 	bl	c1c0 <strlen>
    1ad0:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1ad2:	a802      	add	r0, sp, #8
    1ad4:	f007 fcfe 	bl	94d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1ad8:	4805      	ldr	r0, [pc, #20]	; (1af0 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    1ada:	f005 ff69 	bl	79b0 <Print::println()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1ade:	aa01      	add	r2, sp, #4
    1ae0:	4904      	ldr	r1, [pc, #16]	; (1af4 <menuGetInt16(short*) [clone .isra.0]+0x50>)
    1ae2:	a802      	add	r0, sp, #8
    1ae4:	f009 fe44 	bl	b770 <sscanf>
    1ae8:	9b01      	ldr	r3, [sp, #4]
    1aea:	8023      	strh	r3, [r4, #0]
}
    1aec:	b00c      	add	sp, #48	; 0x30
    1aee:	bd10      	pop	{r4, pc}
    1af0:	200085d4 	.word	0x200085d4
    1af4:	2000057c 	.word	0x2000057c

00001af8 <menuGet3Int(int*, int*, int*) [clone .isra.0]>:

static int menuGet3Int(int *val1, int *val2, int *val3)
    1af8:	b570      	push	{r4, r5, r6, lr}
    1afa:	4606      	mov	r6, r0
    1afc:	b090      	sub	sp, #64	; 0x40
    1afe:	460c      	mov	r4, r1
    1b00:	4615      	mov	r5, r2
        virtual int available() { return usb_serial_available(); }
    1b02:	f007 fc7d 	bl	9400 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1b06:	2800      	cmp	r0, #0
    1b08:	d0fb      	beq.n	1b02 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0xa>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1b0a:	aa06      	add	r2, sp, #24
    1b0c:	210d      	movs	r1, #13
    1b0e:	2328      	movs	r3, #40	; 0x28
    1b10:	4810      	ldr	r0, [pc, #64]	; (1b54 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    1b12:	f006 f843 	bl	7b9c <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1b16:	f100 0340 	add.w	r3, r0, #64	; 0x40
    1b1a:	eb0d 0003 	add.w	r0, sp, r3
    1b1e:	2300      	movs	r3, #0
    1b20:	f800 3c28 	strb.w	r3, [r0, #-40]
							  return write((const uint8_t *)str, strlen(str)); }
    1b24:	a806      	add	r0, sp, #24
    1b26:	f00a fb4b 	bl	c1c0 <strlen>
    1b2a:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1b2c:	a806      	add	r0, sp, #24
    1b2e:	f007 fcd1 	bl	94d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1b32:	4808      	ldr	r0, [pc, #32]	; (1b54 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    1b34:	f005 ff3c 	bl	79b0 <Print::println()>
  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1b38:	f10d 0317 	add.w	r3, sp, #23
    1b3c:	4632      	mov	r2, r6
    1b3e:	4906      	ldr	r1, [pc, #24]	; (1b58 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x60>)
    1b40:	a806      	add	r0, sp, #24
    1b42:	9400      	str	r4, [sp, #0]
    1b44:	e9cd 3501 	strd	r3, r5, [sp, #4]
    1b48:	f10d 0316 	add.w	r3, sp, #22
    1b4c:	f009 fe10 	bl	b770 <sscanf>
}
    1b50:	b010      	add	sp, #64	; 0x40
    1b52:	bd70      	pop	{r4, r5, r6, pc}
    1b54:	200085d4 	.word	0x200085d4
    1b58:	20000574 	.word	0x20000574

00001b5c <menu1()>:

void menu1(void)
{   // have ':'
    1b5c:	b508      	push	{r3, lr}
        virtual int available() { return usb_serial_available(); }
    1b5e:	f007 fc4f 	bl	9400 <usb_serial_available>
    while(!Serial.available()) ;
    1b62:	2800      	cmp	r0, #0
    1b64:	d0fb      	beq.n	1b5e <menu1()+0x2>
    char ch;
    ch=Serial.read();
    if(ch=='x') return;
}
    1b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        virtual int read() { return usb_serial_getchar(); }
    1b6a:	f007 bc8d 	b.w	9488 <usb_serial_getchar>
    1b6e:	bf00      	nop

00001b70 <menu2()>:

void menu2(void)
{   // have '?'
    1b70:	b510      	push	{r4, lr}
    1b72:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    1b74:	f007 fc44 	bl	9400 <usb_serial_available>
    datetime_t t;

    while(!Serial.available()) ;
    1b78:	2800      	cmp	r0, #0
    1b7a:	d0fb      	beq.n	1b74 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1b7c:	f007 fc84 	bl	9488 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1b80:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    1b82:	2870      	cmp	r0, #112	; 0x70
    1b84:	d018      	beq.n	1bb8 <menu2()+0x48>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    1b86:	2864      	cmp	r0, #100	; 0x64
    1b88:	d065      	beq.n	1c56 <menu2()+0xe6>
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
    1b8a:	3861      	subs	r0, #97	; 0x61
    1b8c:	2813      	cmp	r0, #19
    1b8e:	d80d      	bhi.n	1bac <menu2()+0x3c>
    1b90:	e8df f000 	tbb	[pc, r0]
    1b94:	0c530c70 	.word	0x0c530c70
    1b98:	0c0c7f0c 	.word	0x0c0c7f0c
    1b9c:	0c0c0c0c 	.word	0x0c0c0c0c
    1ba0:	0c0c0c0c 	.word	0x0c0c0c0c
    1ba4:	928c0c0c 	.word	0x928c0c0c
    1ba8:	f007 fc6e 	bl	9488 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    1bac:	f007 fc28 	bl	9400 <usb_serial_available>
    }
    else if(ch=='c')
    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
    1bb0:	2800      	cmp	r0, #0
    1bb2:	d1f9      	bne.n	1ba8 <menu2()+0x38>

}
    1bb4:	b008      	add	sp, #32
    1bb6:	bd10      	pop	{r4, pc}
      rtc_get_datetime(&t);
    1bb8:	a806      	add	r0, sp, #24
    1bba:	f7ff ff0d 	bl	19d8 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    1bbe:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    1bc2:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    1bc6:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1bca:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1bce:	f99d 401e 	ldrsb.w	r4, [sp, #30]
    1bd2:	9000      	str	r0, [sp, #0]
    1bd4:	4840      	ldr	r0, [pc, #256]	; (1cd8 <menu2()+0x168>)
    1bd6:	e9cd 3203 	strd	r3, r2, [sp, #12]
    1bda:	e9cd 1401 	strd	r1, r4, [sp, #4]
    1bde:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1be2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1be6:	493d      	ldr	r1, [pc, #244]	; (1cdc <menu2()+0x16c>)
    1be8:	f005 fefe 	bl	79e8 <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1bec:	210c      	movs	r1, #12
    1bee:	483c      	ldr	r0, [pc, #240]	; (1ce0 <menu2()+0x170>)
    1bf0:	f007 fc70 	bl	94d4 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    1bf4:	493b      	ldr	r1, [pc, #236]	; (1ce4 <menu2()+0x174>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1bf6:	220a      	movs	r2, #10
    1bf8:	2300      	movs	r3, #0
    1bfa:	6809      	ldr	r1, [r1, #0]
    1bfc:	4836      	ldr	r0, [pc, #216]	; (1cd8 <menu2()+0x168>)
    1bfe:	f005 ff01 	bl	7a04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1c02:	4835      	ldr	r0, [pc, #212]	; (1cd8 <menu2()+0x168>)
    1c04:	f005 fed4 	bl	79b0 <Print::println()>
    1c08:	210c      	movs	r1, #12
    1c0a:	4837      	ldr	r0, [pc, #220]	; (1ce8 <menu2()+0x178>)
    1c0c:	f007 fc62 	bl	94d4 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1c10:	4b36      	ldr	r3, [pc, #216]	; (1cec <menu2()+0x17c>)
	size_t println(long n)				{ return print(n) + println(); }
    1c12:	4831      	ldr	r0, [pc, #196]	; (1cd8 <menu2()+0x168>)
    1c14:	6819      	ldr	r1, [r3, #0]
    1c16:	f005 febf 	bl	7998 <Print::print(long)>
    1c1a:	482f      	ldr	r0, [pc, #188]	; (1cd8 <menu2()+0x168>)
    1c1c:	f005 fec8 	bl	79b0 <Print::println()>
    1c20:	210c      	movs	r1, #12
    1c22:	4833      	ldr	r0, [pc, #204]	; (1cf0 <menu2()+0x180>)
    1c24:	f007 fc56 	bl	94d4 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1c28:	4b32      	ldr	r3, [pc, #200]	; (1cf4 <menu2()+0x184>)
	size_t print(int n)				{ return print((long)n); }
    1c2a:	482b      	ldr	r0, [pc, #172]	; (1cd8 <menu2()+0x168>)
    1c2c:	f9b3 1000 	ldrsh.w	r1, [r3]
    1c30:	f005 feb2 	bl	7998 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1c34:	4828      	ldr	r0, [pc, #160]	; (1cd8 <menu2()+0x168>)
    1c36:	f005 febb 	bl	79b0 <Print::println()>
    1c3a:	210c      	movs	r1, #12
    1c3c:	482e      	ldr	r0, [pc, #184]	; (1cf8 <menu2()+0x188>)
    1c3e:	f007 fc49 	bl	94d4 <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    1c42:	4b2e      	ldr	r3, [pc, #184]	; (1cfc <menu2()+0x18c>)
	size_t print(int n)				{ return print((long)n); }
    1c44:	f9b3 1000 	ldrsh.w	r1, [r3]
    1c48:	4823      	ldr	r0, [pc, #140]	; (1cd8 <menu2()+0x168>)
    1c4a:	f005 fea5 	bl	7998 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1c4e:	4822      	ldr	r0, [pc, #136]	; (1cd8 <menu2()+0x168>)
    1c50:	f005 feae 	bl	79b0 <Print::println()>
    1c54:	e7aa      	b.n	1bac <menu2()+0x3c>
      rtc_get_datetime(&t);
    1c56:	a806      	add	r0, sp, #24
    1c58:	f7ff febe 	bl	19d8 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    1c5c:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1c60:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1c64:	9000      	str	r0, [sp, #0]
    1c66:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1c6a:	4925      	ldr	r1, [pc, #148]	; (1d00 <menu2()+0x190>)
    1c6c:	481a      	ldr	r0, [pc, #104]	; (1cd8 <menu2()+0x168>)
    1c6e:	f005 febb 	bl	79e8 <Print::printf(char const*, ...)>
    1c72:	e79b      	b.n	1bac <menu2()+0x3c>
    1c74:	210c      	movs	r1, #12
    1c76:	481a      	ldr	r0, [pc, #104]	; (1ce0 <menu2()+0x170>)
    1c78:	f007 fc2c 	bl	94d4 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    1c7c:	4919      	ldr	r1, [pc, #100]	; (1ce4 <menu2()+0x174>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1c7e:	2300      	movs	r3, #0
    1c80:	220a      	movs	r2, #10
    1c82:	6809      	ldr	r1, [r1, #0]
    1c84:	4814      	ldr	r0, [pc, #80]	; (1cd8 <menu2()+0x168>)
    1c86:	f005 febd 	bl	7a04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1c8a:	4813      	ldr	r0, [pc, #76]	; (1cd8 <menu2()+0x168>)
    1c8c:	f005 fe90 	bl	79b0 <Print::println()>
    1c90:	e78c      	b.n	1bac <menu2()+0x3c>
    1c92:	210c      	movs	r1, #12
    1c94:	4814      	ldr	r0, [pc, #80]	; (1ce8 <menu2()+0x178>)
    1c96:	f007 fc1d 	bl	94d4 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1c9a:	4b14      	ldr	r3, [pc, #80]	; (1cec <menu2()+0x17c>)
	size_t println(long n)				{ return print(n) + println(); }
    1c9c:	480e      	ldr	r0, [pc, #56]	; (1cd8 <menu2()+0x168>)
    1c9e:	6819      	ldr	r1, [r3, #0]
    1ca0:	f005 fe7a 	bl	7998 <Print::print(long)>
    1ca4:	480c      	ldr	r0, [pc, #48]	; (1cd8 <menu2()+0x168>)
    1ca6:	f005 fe83 	bl	79b0 <Print::println()>
    1caa:	e77f      	b.n	1bac <menu2()+0x3c>
    1cac:	210c      	movs	r1, #12
    1cae:	4810      	ldr	r0, [pc, #64]	; (1cf0 <menu2()+0x180>)
    1cb0:	f007 fc10 	bl	94d4 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1cb4:	4b0f      	ldr	r3, [pc, #60]	; (1cf4 <menu2()+0x184>)
    1cb6:	e7c5      	b.n	1c44 <menu2()+0xd4>
      rtc_get_datetime(&t);
    1cb8:	a806      	add	r0, sp, #24
    1cba:	f7ff fe8d 	bl	19d8 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    1cbe:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    1cc2:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1cc6:	9000      	str	r0, [sp, #0]
    1cc8:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    1ccc:	490d      	ldr	r1, [pc, #52]	; (1d04 <menu2()+0x194>)
    1cce:	4802      	ldr	r0, [pc, #8]	; (1cd8 <menu2()+0x168>)
    1cd0:	f005 fe8a 	bl	79e8 <Print::printf(char const*, ...)>
    1cd4:	e76a      	b.n	1bac <menu2()+0x3c>
    1cd6:	bf00      	nop
    1cd8:	200085d4 	.word	0x200085d4
    1cdc:	20000480 	.word	0x20000480
    1ce0:	200004a4 	.word	0x200004a4
    1ce4:	20008bd4 	.word	0x20008bd4
    1ce8:	200004b4 	.word	0x200004b4
    1cec:	20008b94 	.word	0x20008b94
    1cf0:	200004c4 	.word	0x200004c4
    1cf4:	20029494 	.word	0x20029494
    1cf8:	200004d4 	.word	0x200004d4
    1cfc:	20029490 	.word	0x20029490
    1d00:	200004e4 	.word	0x200004e4
    1d04:	20000500 	.word	0x20000500

00001d08 <menu3()>:

void menu3(void)
{   // have '!'
    1d08:	b510      	push	{r4, lr}
    1d0a:	b084      	sub	sp, #16
        virtual int available() { return usb_serial_available(); }
    1d0c:	f007 fb78 	bl	9400 <usb_serial_available>

    while(!Serial.available()) ;
    1d10:	2800      	cmp	r0, #0
    1d12:	d0fb      	beq.n	1d0c <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1d14:	f007 fbb8 	bl	9488 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1d18:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    1d1a:	2864      	cmp	r0, #100	; 0x64
    1d1c:	d00e      	beq.n	1d3c <menu3()+0x34>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    1d1e:	3861      	subs	r0, #97	; 0x61
    1d20:	2813      	cmp	r0, #19
    1d22:	d815      	bhi.n	1d50 <menu3()+0x48>
    1d24:	e8df f000 	tbb	[pc, r0]
    1d28:	14281422 	.word	0x14281422
    1d2c:	14142e14 	.word	0x14142e14
    1d30:	14141414 	.word	0x14141414
    1d34:	14141414 	.word	0x14141414
    1d38:	16381414 	.word	0x16381414
      menuGet3Int(&year,&month,&day);
    1d3c:	aa03      	add	r2, sp, #12
    1d3e:	a902      	add	r1, sp, #8
    1d40:	a801      	add	r0, sp, #4
    1d42:	f7ff fed9 	bl	1af8 <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetDate(year,month,day);
    1d46:	9801      	ldr	r0, [sp, #4]
    1d48:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    1d4c:	f7ff fe50 	bl	19f0 <rtcSetDate(int, int, int)>
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
    }
}
    1d50:	b004      	add	sp, #16
    1d52:	bd10      	pop	{r4, pc}
      menuGet3Int(&hour,&minutes,&seconds);
    1d54:	aa03      	add	r2, sp, #12
    1d56:	a902      	add	r1, sp, #8
    1d58:	a801      	add	r0, sp, #4
    1d5a:	f7ff fecd 	bl	1af8 <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetTime(hour,minutes,seconds);
    1d5e:	9801      	ldr	r0, [sp, #4]
    1d60:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    1d64:	f7ff fe5c 	bl	1a20 <rtcSetTime(int, int, int)>
}
    1d68:	b004      	add	sp, #16
    1d6a:	bd10      	pop	{r4, pc}
      menuGetInt32((int32_t *)&t_acq);
    1d6c:	4810      	ldr	r0, [pc, #64]	; (1db0 <menu3()+0xa8>)
}
    1d6e:	b004      	add	sp, #16
    1d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_acq);
    1d74:	f7ff be6c 	b.w	1a50 <menuGetInt32(long*) [clone .isra.0]>
      menuGetInt16(&proc);
    1d78:	480e      	ldr	r0, [pc, #56]	; (1db4 <menu3()+0xac>)
}
    1d7a:	b004      	add	sp, #16
    1d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt16(&proc);
    1d80:	f7ff be90 	b.w	1aa4 <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt32(&fsamp);
    1d84:	4c0c      	ldr	r4, [pc, #48]	; (1db8 <menu3()+0xb0>)
    1d86:	4620      	mov	r0, r4
    1d88:	f7ff fe62 	bl	1a50 <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    1d8c:	6820      	ldr	r0, [r4, #0]
}
    1d8e:	b004      	add	sp, #16
    1d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    1d94:	f7fe bd2a 	b.w	7ec <acqModifyFrequency(unsigned long)>
      menuGetInt16(&shift); if(shift<0) shift=0;
    1d98:	4c08      	ldr	r4, [pc, #32]	; (1dbc <menu3()+0xb4>)
    1d9a:	4620      	mov	r0, r4
    1d9c:	f7ff fe82 	bl	1aa4 <menuGetInt16(short*) [clone .isra.0]>
    1da0:	f9b4 3000 	ldrsh.w	r3, [r4]
    1da4:	2b00      	cmp	r3, #0
    1da6:	dad3      	bge.n	1d50 <menu3()+0x48>
    1da8:	2300      	movs	r3, #0
    1daa:	8023      	strh	r3, [r4, #0]
    1dac:	e7d0      	b.n	1d50 <menu3()+0x48>
    1dae:	bf00      	nop
    1db0:	20008bd4 	.word	0x20008bd4
    1db4:	20029490 	.word	0x20029490
    1db8:	20008b94 	.word	0x20008b94
    1dbc:	20029494 	.word	0x20029494

00001dc0 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1dc0:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    1dc2:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1dc6:	b084      	sub	sp, #16
    1dc8:	468c      	mov	ip, r1
    1dca:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    1dcc:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1dce:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    1dd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1dd4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    1dd8:	ea4f 124c 	mov.w	r2, ip, lsl #5
    1ddc:	4629      	mov	r1, r5
    1dde:	6a20      	ldr	r0, [r4, #32]
    1de0:	f001 f952 	bl	3088 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1de4:	2801      	cmp	r0, #1
    1de6:	d106      	bne.n	1df6 <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    1de8:	4632      	mov	r2, r6
    1dea:	4629      	mov	r1, r5
    1dec:	6a20      	ldr	r0, [r4, #32]
    1dee:	f001 f92f 	bl	3050 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    1df2:	b004      	add	sp, #16
    1df4:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    1df6:	2000      	movs	r0, #0
}
    1df8:	b004      	add	sp, #16
    1dfa:	bd70      	pop	{r4, r5, r6, pc}

00001dfc <ExFatFile::close()>:
bool ExFatFile::close() {
    1dfc:	b510      	push	{r4, lr}
    1dfe:	4604      	mov	r4, r0
  bool rtn = sync();
    1e00:	f000 fd12 	bl	2828 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    1e04:	2300      	movs	r3, #0
    1e06:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    1e0a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    1e0e:	bd10      	pop	{r4, pc}

00001e10 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    1e10:	b538      	push	{r3, r4, r5, lr}
    1e12:	460d      	mov	r5, r1
  if (isOpen()) {
    1e14:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    1e18:	b109      	cbz	r1, 1e1e <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    1e1a:	2000      	movs	r0, #0
}
    1e1c:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    1e1e:	2238      	movs	r2, #56	; 0x38
    1e20:	4604      	mov	r4, r0
    1e22:	f009 fe2b 	bl	ba7c <memset>
  m_flags = FILE_FLAG_READ;
    1e26:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    1e28:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    1e2a:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    1e2c:	4618      	mov	r0, r3
    1e2e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    1e32:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    1e36:	bd38      	pop	{r3, r4, r5, pc}

00001e38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    1e38:	b4f0      	push	{r4, r5, r6, r7}
    1e3a:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    1e3c:	7809      	ldrb	r1, [r1, #0]
    1e3e:	2920      	cmp	r1, #32
    1e40:	d103      	bne.n	1e4a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    1e42:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1e46:	2c20      	cmp	r4, #32
    1e48:	d0fb      	beq.n	1e42 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    1e4a:	6015      	str	r5, [r2, #0]
  fname->end = path;
    1e4c:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    1e4e:	782c      	ldrb	r4, [r5, #0]
    1e50:	2c2f      	cmp	r4, #47	; 0x2f
    1e52:	d011      	beq.n	1e78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1e54:	b184      	cbz	r4, 1e78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1e56:	1c6e      	adds	r6, r5, #1
    1e58:	2c3c      	cmp	r4, #60	; 0x3c
    1e5a:	4f1e      	ldr	r7, [pc, #120]	; (1ed4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>)
    uint8_t c = *path++;
    1e5c:	4635      	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    1e5e:	d82a      	bhi.n	1eb6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    1e60:	2c21      	cmp	r4, #33	; 0x21
    1e62:	d812      	bhi.n	1e8a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    1e64:	f104 3cff 	add.w	ip, r4, #4294967295
    1e68:	f1bc 0f1e 	cmp.w	ip, #30
    1e6c:	d816      	bhi.n	1e9c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

fail:
  return false;
}
    1e6e:	2000      	movs	r0, #0
    1e70:	bcf0      	pop	{r4, r5, r6, r7}
    1e72:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    1e74:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1e78:	2c20      	cmp	r4, #32
    1e7a:	d0fb      	beq.n	1e74 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    1e7c:	2c2f      	cmp	r4, #47	; 0x2f
    1e7e:	d0f9      	beq.n	1e74 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    1e80:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    1e82:	4611      	mov	r1, r2
}
    1e84:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    1e86:	f000 bfd5 	b.w	2e34 <ExFatFile::hashName(ExName_t*)>
    1e8a:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    1e8e:	fa5f fc8c 	uxtb.w	ip, ip
    1e92:	fa27 fc0c 	lsr.w	ip, r7, ip
    1e96:	f01c 0f01 	tst.w	ip, #1
    1e9a:	d1e8      	bne.n	1e6e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    1e9c:	2c2e      	cmp	r4, #46	; 0x2e
    1e9e:	d001      	beq.n	1ea4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1ea0:	2c20      	cmp	r4, #32
    1ea2:	d10f      	bne.n	1ec4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
  while (*path && !isDirSeparator(*path)) {
    1ea4:	f816 4b01 	ldrb.w	r4, [r6], #1
    1ea8:	2c00      	cmp	r4, #0
    1eaa:	d0e5      	beq.n	1e78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1eac:	2c2f      	cmp	r4, #47	; 0x2f
    1eae:	d0e3      	beq.n	1e78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    1eb0:	2c3c      	cmp	r4, #60	; 0x3c
    1eb2:	4635      	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    1eb4:	d9d4      	bls.n	1e60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    1eb6:	2c5c      	cmp	r4, #92	; 0x5c
    1eb8:	d0d9      	beq.n	1e6e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1eba:	d905      	bls.n	1ec8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    1ebc:	2c7c      	cmp	r4, #124	; 0x7c
    1ebe:	d0d6      	beq.n	1e6e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1ec0:	0621      	lsls	r1, r4, #24
    1ec2:	d4d4      	bmi.n	1e6e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    1ec4:	6096      	str	r6, [r2, #8]
    1ec6:	e7ed      	b.n	1ea4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1ec8:	3c3e      	subs	r4, #62	; 0x3e
    1eca:	2c01      	cmp	r4, #1
    1ecc:	d8fa      	bhi.n	1ec4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
}
    1ece:	2000      	movs	r0, #0
    1ed0:	bcf0      	pop	{r4, r5, r6, r7}
    1ed2:	4770      	bx	lr
    1ed4:	05002101 	.word	0x05002101

00001ed8 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    1ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const { return m_attributes & FS_ATTRIB_READ_ONLY; }
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    1edc:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    1ee0:	b083      	sub	sp, #12
    1ee2:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    1ee4:	07dc      	lsls	r4, r3, #31
    1ee6:	d574      	bpl.n	1fd2 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    1ee8:	0658      	lsls	r0, r3, #25
    1eea:	460f      	mov	r7, r1
    1eec:	4690      	mov	r8, r2
    1eee:	f140 80b0 	bpl.w	2052 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    1ef2:	e9d5 2300 	ldrd	r2, r3, [r5]
    1ef6:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    1efa:	eb18 0402 	adds.w	r4, r8, r2
    1efe:	f143 0300 	adc.w	r3, r3, #0
    1f02:	42a1      	cmp	r1, r4
    1f04:	eb70 0303 	sbcs.w	r3, r0, r3
    1f08:	f0c0 80a9 	bcc.w	205e <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    1f0c:	f1b8 0f00 	cmp.w	r8, #0
    1f10:	d05b      	beq.n	1fca <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    1f12:	4646      	mov	r6, r8
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1f14:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    1f18:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1f1c:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1f20:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    1f24:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    1f26:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    1f2a:	2c00      	cmp	r4, #0
    1f2c:	d170      	bne.n	2010 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    1f2e:	4313      	orrs	r3, r2
    1f30:	d170      	bne.n	2014 <ExFatFile::read(void*, unsigned int)+0x13c>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1f32:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1f36:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    1f38:	bf4c      	ite	mi
    1f3a:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    1f3e:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    1f40:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1f42:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    1f46:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    1f48:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1f4c:	0a63      	lsrs	r3, r4, #9
    1f4e:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    1f50:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    1f54:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    1f56:	f1bb 0f00 	cmp.w	fp, #0
    1f5a:	d145      	bne.n	1fe8 <ExFatFile::read(void*, unsigned int)+0x110>
    1f5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1f60:	d342      	bcc.n	1fe8 <ExFatFile::read(void*, unsigned int)+0x110>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
    1f62:	f8da 2218 	ldr.w	r2, [sl, #536]	; 0x218
    1f66:	4291      	cmp	r1, r2
    1f68:	d03e      	beq.n	1fe8 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    1f6a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    1f6e:	d358      	bcc.n	2022 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    1f70:	f04f 0b01 	mov.w	fp, #1
    1f74:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    1f78:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    1f7c:	0a73      	lsrs	r3, r6, #9
    1f7e:	459b      	cmp	fp, r3
    1f80:	bf28      	it	cs
    1f82:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    1f84:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1f86:	ea4f 244b 	mov.w	r4, fp, lsl #9
    1f8a:	d80a      	bhi.n	1fa2 <ExFatFile::read(void*, unsigned int)+0xca>
    1f8c:	eb01 030b 	add.w	r3, r1, fp
    1f90:	429a      	cmp	r2, r3
    1f92:	d206      	bcs.n	1fa2 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    1f94:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1f98:	9101      	str	r1, [sp, #4]
    1f9a:	f005 f8e9 	bl	7170 <FsCache::sync()>
    1f9e:	9901      	ldr	r1, [sp, #4]
    1fa0:	b1b8      	cbz	r0, 1fd2 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    1fa2:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1fa6:	465b      	mov	r3, fp
    1fa8:	6802      	ldr	r2, [r0, #0]
    1faa:	f8d2 a014 	ldr.w	sl, [r2, #20]
    1fae:	463a      	mov	r2, r7
    1fb0:	47d0      	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    1fb2:	b170      	cbz	r0, 1fd2 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    1fb4:	4623      	mov	r3, r4
    dst += n;
    1fb6:	4427      	add	r7, r4
    m_curPosition += n;
    1fb8:	e9d5 1200 	ldrd	r1, r2, [r5]
    1fbc:	185b      	adds	r3, r3, r1
    1fbe:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    1fc2:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    1fc4:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    1fc8:	d1a8      	bne.n	1f1c <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    1fca:	4640      	mov	r0, r8

fail:
  m_error |= READ_ERROR;
  return -1;
}
    1fcc:	b003      	add	sp, #12
    1fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    1fd2:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    1fd6:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    1fda:	f043 0302 	orr.w	r3, r3, #2
    1fde:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    1fe2:	b003      	add	sp, #12
    1fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    1fe8:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    1fec:	2200      	movs	r2, #0
    1fee:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1ff2:	42b4      	cmp	r4, r6
    1ff4:	bf28      	it	cs
    1ff6:	4634      	movcs	r4, r6
    1ff8:	f005 f8e6 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    1ffc:	2800      	cmp	r0, #0
    1ffe:	d0e8      	beq.n	1fd2 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    2000:	eb00 010b 	add.w	r1, r0, fp
    2004:	4622      	mov	r2, r4
    2006:	4638      	mov	r0, r7
    2008:	f006 f86c 	bl	80e4 <memcpy>
    m_curPosition += n;
    200c:	4623      	mov	r3, r4
    200e:	e7d2      	b.n	1fb6 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    2010:	69aa      	ldr	r2, [r5, #24]
    2012:	e796      	b.n	1f42 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    2014:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2018:	065b      	lsls	r3, r3, #25
    201a:	d50e      	bpl.n	203a <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    201c:	69aa      	ldr	r2, [r5, #24]
    201e:	3201      	adds	r2, #1
    2020:	e78e      	b.n	1f40 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    2022:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    2026:	463a      	mov	r2, r7
    2028:	6803      	ldr	r3, [r0, #0]
    202a:	691b      	ldr	r3, [r3, #16]
    202c:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    202e:	2800      	cmp	r0, #0
    2030:	d0cf      	beq.n	1fd2 <ExFatFile::read(void*, unsigned int)+0xfa>
    2032:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2036:	461c      	mov	r4, r3
    2038:	e7bd      	b.n	1fb6 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    203a:	464a      	mov	r2, r9
    203c:	4650      	mov	r0, sl
    203e:	69a9      	ldr	r1, [r5, #24]
    2040:	f001 f864 	bl	310c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    2044:	2800      	cmp	r0, #0
    2046:	dbc4      	blt.n	1fd2 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    2048:	d00c      	beq.n	2064 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    204a:	f8d5 a020 	ldr.w	sl, [r5, #32]
    204e:	69aa      	ldr	r2, [r5, #24]
    2050:	e777      	b.n	1f42 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    2052:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2056:	0719      	lsls	r1, r3, #28
    2058:	f57f af58 	bpl.w	1f0c <ExFatFile::read(void*, unsigned int)+0x34>
    205c:	e749      	b.n	1ef2 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    205e:	eba1 0802 	sub.w	r8, r1, r2
    2062:	e753      	b.n	1f0c <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    2064:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2068:	f013 0f50 	tst.w	r3, #80	; 0x50
    206c:	d0b1      	beq.n	1fd2 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    206e:	eba8 0806 	sub.w	r8, r8, r6
    2072:	4640      	mov	r0, r8
    2074:	e7aa      	b.n	1fcc <ExFatFile::read(void*, unsigned int)+0xf4>
    2076:	bf00      	nop

00002078 <ExFatFile::peek()>:
int ExFatFile::peek() {
    2078:	b5f0      	push	{r4, r5, r6, r7, lr}
    207a:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    207c:	2201      	movs	r2, #1
    207e:	4604      	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    2080:	6985      	ldr	r5, [r0, #24]
    2082:	f10d 0107 	add.w	r1, sp, #7
  uint64_t saveCurPosition = m_curPosition;
    2086:	e9d0 6700 	ldrd	r6, r7, [r0]
    208a:	f7ff ff25 	bl	1ed8 <ExFatFile::read(void*, unsigned int)>
    208e:	2801      	cmp	r0, #1
  m_curCluster = saveCurCluster;
    2090:	61a5      	str	r5, [r4, #24]
    2092:	bf0c      	ite	eq
    2094:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    2098:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = saveCurPosition;
    209c:	e9c4 6700 	strd	r6, r7, [r4]
}
    20a0:	b003      	add	sp, #12
    20a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000020a4 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    20a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20a8:	461f      	mov	r7, r3
  bool isOpen() const { return m_attributes; }
    20aa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    20ae:	b083      	sub	sp, #12
    20b0:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    20b2:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    20b6:	2b00      	cmp	r3, #0
    20b8:	d051      	beq.n	215e <ExFatFile::seekSet(unsigned long long)+0xba>
    20ba:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    20bc:	e9d0 1c00 	ldrd	r1, ip, [r0]
    20c0:	45bc      	cmp	ip, r7
    20c2:	bf08      	it	eq
    20c4:	4291      	cmpeq	r1, r2
    20c6:	d05c      	beq.n	2182 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    20c8:	ea56 0207 	orrs.w	r2, r6, r7
    20cc:	d04d      	beq.n	216a <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    20ce:	071d      	lsls	r5, r3, #28
    20d0:	d504      	bpl.n	20dc <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    20d2:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    20d6:	42b0      	cmp	r0, r6
    20d8:	41ba      	sbcs	r2, r7
    20da:	d340      	bcc.n	215e <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    20dc:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    20e0:	1e75      	subs	r5, r6, #1
    20e2:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    20e6:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    20e8:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    20ec:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    20f0:	3209      	adds	r2, #9
    20f2:	b2d2      	uxtb	r2, r2
    20f4:	f1c2 0e20 	rsb	lr, r2, #32
    20f8:	40d5      	lsrs	r5, r2
    20fa:	f1a2 0920 	sub.w	r9, r2, #32
    20fe:	fa00 fb0e 	lsl.w	fp, r0, lr
    2102:	fa20 f009 	lsr.w	r0, r0, r9
    2106:	ea45 050b 	orr.w	r5, r5, fp
    210a:	4305      	orrs	r5, r0
  if (isContiguous()) {
    210c:	9801      	ldr	r0, [sp, #4]
    210e:	0640      	lsls	r0, r0, #25
    2110:	d433      	bmi.n	217a <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    2112:	1e48      	subs	r0, r1, #1
    2114:	fa20 f202 	lsr.w	r2, r0, r2
    2118:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    211c:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    2120:	fa00 fe0e 	lsl.w	lr, r0, lr
    2124:	fa20 f009 	lsr.w	r0, r0, r9
    2128:	ea42 020e 	orr.w	r2, r2, lr
    212c:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    2130:	d001      	beq.n	2136 <ExFatFile::seekSet(unsigned long long)+0x92>
    2132:	4295      	cmp	r5, r2
    2134:	d229      	bcs.n	218a <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    2136:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    2138:	bf4c      	ite	mi
    213a:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    213e:	69e3      	ldrpl	r3, [r4, #28]
    2140:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    2142:	f104 0918 	add.w	r9, r4, #24
    2146:	e006      	b.n	2156 <ExFatFile::seekSet(unsigned long long)+0xb2>
    2148:	69a1      	ldr	r1, [r4, #24]
    214a:	3d01      	subs	r5, #1
    214c:	6a20      	ldr	r0, [r4, #32]
    214e:	f000 ffdd 	bl	310c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    2152:	2800      	cmp	r0, #0
    2154:	dd03      	ble.n	215e <ExFatFile::seekSet(unsigned long long)+0xba>
    2156:	464a      	mov	r2, r9
  while (nNew--) {
    2158:	2d00      	cmp	r5, #0
    215a:	d1f5      	bne.n	2148 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

done:
    215c:	e007      	b.n	216e <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    215e:	2000      	movs	r0, #0
  m_curCluster = tmp;
    2160:	f8c4 8018 	str.w	r8, [r4, #24]
}
    2164:	b003      	add	sp, #12
    2166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    216a:	2300      	movs	r3, #0
    216c:	6183      	str	r3, [r0, #24]
  return true;
    216e:	2001      	movs	r0, #1
  m_curPosition = pos;
    2170:	e9c4 6700 	strd	r6, r7, [r4]
}
    2174:	b003      	add	sp, #12
    2176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    217a:	69e3      	ldr	r3, [r4, #28]
    217c:	442b      	add	r3, r5
    217e:	61a3      	str	r3, [r4, #24]
    goto done;
    2180:	e7f5      	b.n	216e <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    2182:	2001      	movs	r0, #1
}
    2184:	b003      	add	sp, #12
    2186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    218a:	1aad      	subs	r5, r5, r2
    218c:	e7d9      	b.n	2142 <ExFatFile::seekSet(unsigned long long)+0x9e>
    218e:	bf00      	nop

00002190 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    2190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2194:	4690      	mov	r8, r2
    2196:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    219a:	b08f      	sub	sp, #60	; 0x3c
    219c:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    219e:	2a00      	cmp	r2, #0
    21a0:	f040 80d6 	bne.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
    21a4:	468b      	mov	fp, r1
    21a6:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    21aa:	f011 0f50 	tst.w	r1, #80	; 0x50
    21ae:	f000 80cf 	beq.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  switch (oflag & O_ACCMODE) {
    21b2:	f003 0103 	and.w	r1, r3, #3
    21b6:	469a      	mov	sl, r3
    21b8:	2903      	cmp	r1, #3
    21ba:	f000 80c9 	beq.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    21be:	3101      	adds	r1, #1
    21c0:	f003 0008 	and.w	r0, r3, #8
    21c4:	ea41 0300 	orr.w	r3, r1, r0
    21c8:	9302      	str	r3, [sp, #8]
  if (fname) {
    21ca:	f1b8 0f00 	cmp.w	r8, #0
    21ce:	f000 80c9 	beq.w	2364 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d4>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    21d2:	f8d8 100c 	ldr.w	r1, [r8, #12]
    21d6:	f101 070e 	add.w	r7, r1, #14
    21da:	49bd      	ldr	r1, [pc, #756]	; (24d0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x340>)
    21dc:	fba1 1707 	umull	r1, r7, r1, r7
  if (pos == m_curPosition) {
    21e0:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    21e4:	08ff      	lsrs	r7, r7, #3
  if (pos == m_curPosition) {
    21e6:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    21e8:	f107 0702 	add.w	r7, r7, #2
    21ec:	b2ff      	uxtb	r7, r7
  if (pos == m_curPosition) {
    21ee:	d005      	beq.n	21fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    21f0:	2000      	movs	r0, #0
    21f2:	2100      	movs	r1, #0
    m_curCluster = 0;
    21f4:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    21f8:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    21fc:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    21fe:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    2200:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2206:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    2208:	2220      	movs	r2, #32
    220a:	a906      	add	r1, sp, #24
    220c:	4658      	mov	r0, fp
    220e:	f7ff fe63 	bl	1ed8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    2212:	b300      	cbz	r0, 2256 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    2214:	2820      	cmp	r0, #32
    2216:	f040 809b 	bne.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    221a:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    221e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2222:	2a00      	cmp	r2, #0
    2224:	f2c0 80a0 	blt.w	2368 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
      if (freeCount == 0) {
    2228:	b934      	cbnz	r4, 2238 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    222a:	f8db 2000 	ldr.w	r2, [fp]
    222e:	f1a2 0920 	sub.w	r9, r2, #32
  uint32_t curCluster() const { return m_curCluster; }
    2232:	f8db 2018 	ldr.w	r2, [fp, #24]
    2236:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    2238:	42bc      	cmp	r4, r7
    223a:	d201      	bcs.n	2240 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    223c:	3401      	adds	r4, #1
    223e:	b2e4      	uxtb	r4, r4
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    2240:	2b00      	cmp	r3, #0
    2242:	f000 80f9 	beq.w	2438 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a8>
    n = dir->read(buf, FS_DIR_SIZE);
    2246:	2220      	movs	r2, #32
    2248:	a906      	add	r1, sp, #24
    224a:	4658      	mov	r0, fp
      inSet = false;
    224c:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    224e:	f7ff fe43 	bl	1ed8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    2252:	2800      	cmp	r0, #0
    2254:	d1de      	bne.n	2214 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    2256:	f41a 7f00 	tst.w	sl, #512	; 0x200
    225a:	d079      	beq.n	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    225c:	9b02      	ldr	r3, [sp, #8]
    225e:	079b      	lsls	r3, r3, #30
    2260:	d576      	bpl.n	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    2262:	f1b8 0f00 	cmp.w	r8, #0
    2266:	d073      	beq.n	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  while (freeCount < freeNeed) {
    2268:	42bc      	cmp	r4, r7
    226a:	d217      	bcs.n	229c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
    226c:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    2270:	2220      	movs	r2, #32
    2272:	a906      	add	r1, sp, #24
    2274:	4658      	mov	r0, fp
    2276:	f7ff fe2f 	bl	1ed8 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    227a:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    227c:	2800      	cmp	r0, #0
    227e:	d060      	beq.n	2342 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    2280:	2820      	cmp	r0, #32
    2282:	d165      	bne.n	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (freeCount == 0) {
    2284:	b92c      	cbnz	r4, 2292 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    2286:	f8db 2000 	ldr.w	r2, [fp]
    228a:	f8db a018 	ldr.w	sl, [fp, #24]
    228e:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    2292:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    2294:	42a7      	cmp	r7, r4
    2296:	d8eb      	bhi.n	2270 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe0>
    2298:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    229c:	2238      	movs	r2, #56	; 0x38
    229e:	2100      	movs	r1, #0
    22a0:	4628      	mov	r0, r5
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    22a2:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    22a6:	f009 fbe9 	bl	ba7c <memset>
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
    22aa:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    22ae:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    22b2:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    22b4:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    22b6:	2328      	movs	r3, #40	; 0x28
  m_dirPos = freePos;
    22b8:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    22bc:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    22c0:	f8d8 3000 	ldr.w	r3, [r8]
  m_dirPos = freePos;
    22c4:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    22c8:	f8c8 3004 	str.w	r3, [r8, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    22cc:	b3a7      	cbz	r7, 2338 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
    22ce:	2400      	movs	r4, #0
      m_setCount = freeNeed - 1;
    22d0:	1e7e      	subs	r6, r7, #1
      if (FsDateTime::callback) {
    22d2:	f8df 9200 	ldr.w	r9, [pc, #512]	; 24d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
      m_setCount = freeNeed - 1;
    22d6:	b2f6      	uxtb	r6, r6
      if (FsDateTime::callback) {
    22d8:	46a2      	mov	sl, r4
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    22da:	2201      	movs	r2, #1
    22dc:	4651      	mov	r1, sl
    22de:	4628      	mov	r0, r5
    22e0:	f7ff fd6e 	bl	1dc0 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    22e4:	4683      	mov	fp, r0
    22e6:	b398      	cbz	r0, 2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    22e8:	f990 2000 	ldrsb.w	r2, [r0]
    22ec:	2a00      	cmp	r2, #0
    22ee:	db2f      	blt.n	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    memset(cache, 0, FS_DIR_SIZE);
    22f0:	2220      	movs	r2, #32
    22f2:	2100      	movs	r1, #0
    22f4:	f009 fbc2 	bl	ba7c <memset>
    if (i == 0) {
    22f8:	2c00      	cmp	r4, #0
    22fa:	f000 80cb 	beq.w	2494 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x304>
    } else if (i == 1) {
    22fe:	f1ba 0f01 	cmp.w	sl, #1
    2302:	f000 80e9 	beq.w	24d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x348>
      dirName->type = EXFAT_TYPE_NAME;
    2306:	23c1      	movs	r3, #193	; 0xc1
    2308:	465a      	mov	r2, fp
    230a:	f10b 0b20 	add.w	fp, fp, #32
    230e:	f802 3b02 	strb.w	r3, [r2], #2
  bool atEnd() { return next == end; }
    2312:	e9d8 3001 	ldrd	r3, r0, [r8, #4]
        if (fname->atEnd()) {
    2316:	4298      	cmp	r0, r3
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    2318:	f103 0301 	add.w	r3, r3, #1
    231c:	d007      	beq.n	232e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    231e:	f8c8 3004 	str.w	r3, [r8, #4]
    2322:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    2326:	f822 1b02 	strh.w	r1, [r2], #2
      for (size_t k = 0; k < 15; k++) {
    232a:	4593      	cmp	fp, r2
    232c:	d1f3      	bne.n	2316 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x186>
  for (uint8_t i = 0; i < freeNeed; i++) {
    232e:	3401      	adds	r4, #1
    2330:	fa5f fa84 	uxtb.w	sl, r4
    2334:	4557      	cmp	r7, sl
    2336:	d8d0      	bhi.n	22da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14a>
  return sync();
    2338:	4628      	mov	r0, r5
    233a:	f000 fa75 	bl	2828 <ExFatFile::sync()>
    233e:	4606      	mov	r6, r0
    2340:	e00c      	b.n	235c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      if (!dir->addDirCluster()) {
    2342:	4658      	mov	r0, fp
      uint32_t saveCurCluster = dir->m_curCluster;
    2344:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    2348:	f000 fa9e 	bl	2888 <ExFatFile::addDirCluster()>
    234c:	2800      	cmp	r0, #0
    234e:	d178      	bne.n	2442 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b2>
  m_attributes = FILE_ATTR_CLOSED;
    2350:	2300      	movs	r3, #0
  return false;
    2352:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    2354:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    2358:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    235c:	4630      	mov	r0, r6
    235e:	b00f      	add	sp, #60	; 0x3c
    2360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    2364:	2703      	movs	r7, #3
    2366:	e749      	b.n	21fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    2368:	bb56      	cbnz	r6, 23c0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x230>
        freeCount = 0;
    236a:	42bc      	cmp	r4, r7
    236c:	bf38      	it	cc
    236e:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    2370:	2b85      	cmp	r3, #133	; 0x85
    2372:	f47f af49 	bne.w	2208 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    2376:	4631      	mov	r1, r6
    2378:	2238      	movs	r2, #56	; 0x38
    237a:	4628      	mov	r0, r5
      inSet = true;
    237c:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    237e:	f009 fb7d 	bl	ba7c <memset>
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    2382:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    2386:	f89d 3019 	ldrb.w	r3, [sp, #25]
    238a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    238e:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    2392:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    2394:	bf58      	it	pl
    2396:	f043 0308 	orrpl.w	r3, r3, #8
    239a:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    239e:	f8db 3000 	ldr.w	r3, [fp]
    23a2:	f8db 2020 	ldr.w	r2, [fp, #32]
    23a6:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    23a8:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    23aa:	f8db 2018 	ldr.w	r2, [fp, #24]
    23ae:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    23b2:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    23b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    23ba:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    23be:	e723      	b.n	2208 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    23c0:	2bc0      	cmp	r3, #192	; 0xc0
    23c2:	d00e      	beq.n	23e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x252>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    23c4:	2bc1      	cmp	r3, #193	; 0xc1
    23c6:	f47f af3e 	bne.w	2246 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    23ca:	4642      	mov	r2, r8
    23cc:	a906      	add	r1, sp, #24
    23ce:	4628      	mov	r0, r5
    23d0:	f000 fcfe 	bl	2dd0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    23d4:	b118      	cbz	r0, 23de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
      if (fname->atEnd()) {
    23d6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
    23da:	429a      	cmp	r2, r3
    23dc:	d034      	beq.n	2448 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
        inSet = false;
    23de:	4606      	mov	r6, r0
    23e0:	e712      	b.n	2208 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    23e2:	9b02      	ldr	r3, [sp, #8]
    23e4:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    23e8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    23ec:	079b      	lsls	r3, r3, #30
    23ee:	d502      	bpl.n	23f6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x266>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    23f0:	9b03      	ldr	r3, [sp, #12]
    23f2:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    23f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    23f8:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    23fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    23fe:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    2402:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    2406:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    240a:	f1b8 0f00 	cmp.w	r8, #0
    240e:	d01b      	beq.n	2448 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
  void reset() { next = begin; }
    2410:	f8d8 3000 	ldr.w	r3, [r8]
      if (fname->nameLength != dirStream->nameLength ||
    2414:	f8d8 200c 	ldr.w	r2, [r8, #12]
    2418:	f8c8 3004 	str.w	r3, [r8, #4]
    241c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2420:	429a      	cmp	r2, r3
    2422:	f47f af10 	bne.w	2246 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    2426:	f8b8 6010 	ldrh.w	r6, [r8, #16]
    242a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    242e:	1af6      	subs	r6, r6, r3
    2430:	fab6 f686 	clz	r6, r6
    2434:	0976      	lsrs	r6, r6, #5
    2436:	e6e7      	b.n	2208 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    2438:	f1b8 0f00 	cmp.w	r8, #0
    243c:	f47f af0b 	bne.w	2256 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    2440:	e786      	b.n	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
      dir->m_curCluster = saveCurCluster;
    2442:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    2446:	e725      	b.n	2294 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x104>
  if (oflag & O_EXCL) {
    2448:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    244c:	d180      	bne.n	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    244e:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    2452:	d15d      	bne.n	2510 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
    2454:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2458:	079f      	lsls	r7, r3, #30
    245a:	d459      	bmi.n	2510 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
  if (oflag & O_TRUNC) {
    245c:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    2460:	f47f af76 	bne.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    2464:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    2468:	f43f af78 	beq.w	235c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    246c:	4628      	mov	r0, r5
    246e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    2472:	f7ff fe17 	bl	20a4 <ExFatFile::seekSet(unsigned long long)>
    2476:	2800      	cmp	r0, #0
    2478:	f43f af6a 	beq.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (isWritable()) {
    247c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2480:	079a      	lsls	r2, r3, #30
    2482:	f57f af6b 	bpl.w	235c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    2486:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    248a:	f043 0320 	orr.w	r3, r3, #32
    248e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    2492:	e763      	b.n	235c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      dirFile->type = EXFAT_TYPE_FILE;
    2494:	2385      	movs	r3, #133	; 0x85
    2496:	f88b 3000 	strb.w	r3, [fp]
      m_setCount = freeNeed - 1;
    249a:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    249e:	f88b 6001 	strb.w	r6, [fp, #1]
      if (FsDateTime::callback) {
    24a2:	f8d9 3000 	ldr.w	r3, [r9]
    24a6:	b353      	cbz	r3, 24fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x36e>
        FsDateTime::callback(&date, &time, &ms10);
    24a8:	f10d 0213 	add.w	r2, sp, #19
    24ac:	f10d 0116 	add.w	r1, sp, #22
    24b0:	a805      	add	r0, sp, #20
    24b2:	4798      	blx	r3
    24b4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    24b8:	f8ab 300a 	strh.w	r3, [fp, #10]
    24bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    24c0:	f8ab 3008 	strh.w	r3, [fp, #8]
        dirFile->createTimeMs = ms10;
    24c4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    24c8:	f88b 3014 	strb.w	r3, [fp, #20]
    24cc:	e72f      	b.n	232e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    24ce:	bf00      	nop
    24d0:	88888889 	.word	0x88888889
    24d4:	2002886c 	.word	0x2002886c
      dirStream->type = EXFAT_TYPE_STREAM;
    24d8:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    24da:	f88b a001 	strb.w	sl, [fp, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    24de:	f88b 3000 	strb.w	r3, [fp]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    24e2:	9b02      	ldr	r3, [sp, #8]
    24e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    24e8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    24ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
    24f0:	f88b 3003 	strb.w	r3, [fp, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    24f4:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    24f8:	f8ab 3004 	strh.w	r3, [fp, #4]
}
    24fc:	e717      	b.n	232e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    24fe:	f245 6321 	movw	r3, #22049	; 0x5621
    2502:	f8ab 300a 	strh.w	r3, [fp, #10]
    2506:	f8ab 300e 	strh.w	r3, [fp, #14]
    250a:	f8ab 3012 	strh.w	r3, [fp, #18]
        if (FS_DEFAULT_TIME) {
    250e:	e70e      	b.n	232e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    2510:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    2514:	06dc      	lsls	r4, r3, #27
    2516:	f53f af1b 	bmi.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    251a:	07d8      	lsls	r0, r3, #31
    251c:	f53f af18 	bmi.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (oflag & O_TRUNC) {
    2520:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    2524:	d013      	beq.n	254e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3be>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    2526:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    252a:	0799      	lsls	r1, r3, #30
    252c:	f57f af10 	bpl.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    2530:	2200      	movs	r2, #0
    2532:	2300      	movs	r3, #0
    2534:	4628      	mov	r0, r5
    2536:	f7ff fdb5 	bl	20a4 <ExFatFile::seekSet(unsigned long long)>
    253a:	2800      	cmp	r0, #0
    253c:	f43f af08 	beq.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    2540:	4628      	mov	r0, r5
    2542:	f000 fa93 	bl	2a6c <ExFatFile::truncate()>
    2546:	2800      	cmp	r0, #0
    2548:	f43f af02 	beq.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    254c:	e796      	b.n	247c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    254e:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    2552:	d093      	beq.n	247c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
    2554:	e78a      	b.n	246c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    2556:	bf00      	nop

00002558 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    2558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    255c:	2500      	movs	r5, #0
    255e:	b097      	sub	sp, #92	; 0x5c
    2560:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    2562:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    2566:	9201      	str	r2, [sp, #4]
    2568:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
    256a:	2b00      	cmp	r3, #0
    256c:	d13e      	bne.n	25ec <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    256e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2572:	460f      	mov	r7, r1
    2574:	f013 0f50 	tst.w	r3, #80	; 0x50
    2578:	d038      	beq.n	25ec <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
  if (isDirSeparator(*path)) {
    257a:	7813      	ldrb	r3, [r2, #0]
    257c:	4604      	mov	r4, r0
    257e:	4616      	mov	r6, r2
    2580:	2b2f      	cmp	r3, #47	; 0x2f
    2582:	d037      	beq.n	25f4 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2584:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    2588:	ab01      	add	r3, sp, #4
    258a:	aa03      	add	r2, sp, #12
    258c:	4631      	mov	r1, r6
    258e:	4620      	mov	r0, r4
    2590:	f7ff fc52 	bl	1e38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2594:	b350      	cbz	r0, 25ec <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    if (*path == 0) {
    2596:	9e01      	ldr	r6, [sp, #4]
    2598:	7833      	ldrb	r3, [r6, #0]
    259a:	2b00      	cmp	r3, #0
    259c:	d03e      	beq.n	261c <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    259e:	2300      	movs	r3, #0
    25a0:	aa03      	add	r2, sp, #12
    25a2:	4639      	mov	r1, r7
    25a4:	4620      	mov	r0, r4
    25a6:	f7ff fdf3 	bl	2190 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    25aa:	b1f8      	cbz	r0, 25ec <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    tmpDir = *this;
    25ac:	46a4      	mov	ip, r4
    25ae:	ad08      	add	r5, sp, #32
    25b0:	f104 0730 	add.w	r7, r4, #48	; 0x30
    25b4:	f8dc 0000 	ldr.w	r0, [ip]
    25b8:	f10c 0c10 	add.w	ip, ip, #16
    25bc:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    25c0:	46ae      	mov	lr, r5
    25c2:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    25c6:	3510      	adds	r5, #16
    25c8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    25cc:	45bc      	cmp	ip, r7
    25ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    25d2:	d1ef      	bne.n	25b4 <ExFatFile::open(ExFatFile*, char const*, int)+0x5c>
    25d4:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    25d8:	af08      	add	r7, sp, #32
    tmpDir = *this;
    25da:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    25dc:	4620      	mov	r0, r4
    25de:	f000 f923 	bl	2828 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    25e2:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    25e6:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    25ea:	e7cd      	b.n	2588 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  return false;
    25ec:	2000      	movs	r0, #0
}
    25ee:	b017      	add	sp, #92	; 0x5c
    25f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    25f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    25f8:	292f      	cmp	r1, #47	; 0x2f
    25fa:	d0fb      	beq.n	25f4 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    25fc:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    25fe:	b9b1      	cbnz	r1, 262e <ExFatFile::open(ExFatFile*, char const*, int)+0xd6>
  memset(this, 0, sizeof(ExFatFile));
    2600:	2238      	movs	r2, #56	; 0x38
    2602:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    2604:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    2606:	f009 fa39 	bl	ba7c <memset>
  m_flags = FILE_FLAG_READ;
    260a:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    260c:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    260e:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    2610:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    2612:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    2616:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    261a:	e7e8      	b.n	25ee <ExFatFile::open(ExFatFile*, char const*, int)+0x96>
  return openPrivate(dirFile, &fname, oflag);
    261c:	464b      	mov	r3, r9
    261e:	aa03      	add	r2, sp, #12
    2620:	4639      	mov	r1, r7
    2622:	4620      	mov	r0, r4
    2624:	f7ff fdb4 	bl	2190 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    2628:	b017      	add	sp, #92	; 0x5c
    262a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    262e:	2238      	movs	r2, #56	; 0x38
    2630:	2100      	movs	r1, #0
    2632:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    2634:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    2636:	f009 fa21 	bl	ba7c <memset>
  m_flags = FILE_FLAG_READ;
    263a:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    263c:	af08      	add	r7, sp, #32
  m_vol = vol;
    263e:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    2640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    2644:	2340      	movs	r3, #64	; 0x40
    2646:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    264a:	e79b      	b.n	2584 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>

0000264c <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    264c:	b119      	cbz	r1, 2656 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    264e:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    2652:	f7ff bf81 	b.w	2558 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    2656:	4608      	mov	r0, r1
    2658:	4770      	bx	lr
    265a:	bf00      	nop

0000265c <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    265c:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    265e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2660:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2662:	6a00      	ldr	r0, [r0, #32]
    2664:	b101      	cbz	r1, 2668 <ExFatFile::addCluster()+0xc>
    2666:	3101      	adds	r1, #1
    2668:	2201      	movs	r2, #1
    266a:	f000 fc15 	bl	2e98 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    266e:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2670:	4605      	mov	r5, r0
  if (find < 2) {
    2672:	d932      	bls.n	26da <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    2674:	2301      	movs	r3, #1
    2676:	4601      	mov	r1, r0
    2678:	6a20      	ldr	r0, [r4, #32]
    267a:	461a      	mov	r2, r3
    267c:	f000 fc6c 	bl	2f58 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2680:	4606      	mov	r6, r0
    2682:	b350      	cbz	r0, 26da <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    2684:	69a3      	ldr	r3, [r4, #24]
    2686:	b35b      	cbz	r3, 26e0 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    2688:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    268c:	0651      	lsls	r1, r2, #25
    268e:	d512      	bpl.n	26b6 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    2690:	1c59      	adds	r1, r3, #1
    2692:	42a9      	cmp	r1, r5
    2694:	d018      	beq.n	26c8 <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    269a:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    269c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    26a0:	e005      	b.n	26ae <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    26a2:	6a20      	ldr	r0, [r4, #32]
    26a4:	f000 fd54 	bl	3150 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    26a8:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    26aa:	b1b0      	cbz	r0, 26da <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    26ac:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    26ae:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    26b0:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    26b2:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    26b4:	d3f5      	bcc.n	26a2 <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    26b6:	f04f 32ff 	mov.w	r2, #4294967295
    26ba:	4629      	mov	r1, r5
    26bc:	6a20      	ldr	r0, [r4, #32]
    26be:	f000 fd47 	bl	3150 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    26c2:	b150      	cbz	r0, 26da <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    26c4:	69a1      	ldr	r1, [r4, #24]
    26c6:	b911      	cbnz	r1, 26ce <ExFatFile::addCluster()+0x72>
}
    26c8:	4630      	mov	r0, r6
  m_curCluster = find;
    26ca:	61a5      	str	r5, [r4, #24]
}
    26cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    26ce:	462a      	mov	r2, r5
    26d0:	6a20      	ldr	r0, [r4, #32]
    26d2:	f000 fd3d 	bl	3150 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    26d6:	2800      	cmp	r0, #0
    26d8:	d1f6      	bne.n	26c8 <ExFatFile::addCluster()+0x6c>
  return false;
    26da:	2600      	movs	r6, #0
}
    26dc:	4630      	mov	r0, r6
    26de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    26e0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    26e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26e8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    26ec:	e7ec      	b.n	26c8 <ExFatFile::addCluster()+0x6c>
    26ee:	bf00      	nop

000026f0 <ExFatFile::syncDir()>:
bool ExFatFile::syncDir() {
    26f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26f4:	f04f 0800 	mov.w	r8, #0
    26f8:	b082      	sub	sp, #8
        if (FsDateTime::callback) {
    26fa:	4f4a      	ldr	r7, [pc, #296]	; (2824 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    26fc:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    26fe:	4644      	mov	r4, r8
    2700:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    2702:	2200      	movs	r2, #0
    2704:	4630      	mov	r0, r6
    2706:	f7ff fb5b 	bl	1dc0 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    270a:	4605      	mov	r5, r0
    270c:	b130      	cbz	r0, 271c <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    270e:	7801      	ldrb	r1, [r0, #0]
    2710:	29c0      	cmp	r1, #192	; 0xc0
    2712:	d069      	beq.n	27e8 <ExFatFile::syncDir()+0xf8>
    2714:	29c1      	cmp	r1, #193	; 0xc1
    2716:	d02b      	beq.n	2770 <ExFatFile::syncDir()+0x80>
    2718:	2985      	cmp	r1, #133	; 0x85
    271a:	d009      	beq.n	2730 <ExFatFile::syncDir()+0x40>
  m_error |= WRITE_ERROR;
    271c:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    2720:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2722:	f043 0301 	orr.w	r3, r3, #1
    2726:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    272a:	b002      	add	sp, #8
    272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    2730:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    2734:	f003 0337 	and.w	r3, r3, #55	; 0x37
    2738:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    273a:	683b      	ldr	r3, [r7, #0]
    273c:	b183      	cbz	r3, 2760 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    273e:	f10d 0203 	add.w	r2, sp, #3
    2742:	f10d 0106 	add.w	r1, sp, #6
    2746:	a801      	add	r0, sp, #4
    2748:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    274a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    274e:	81ab      	strh	r3, [r5, #12]
    2750:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    2752:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    2756:	81eb      	strh	r3, [r5, #14]
    2758:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    275a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    275e:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    2760:	6a32      	ldr	r2, [r6, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    2762:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    2766:	f043 0301 	orr.w	r3, r3, #1
    276a:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    276e:	7829      	ldrb	r1, [r5, #0]
    2770:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2774:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2776:	fab0 f080 	clz	r0, r0
    277a:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    277c:	e001      	b.n	2782 <ExFatFile::syncDir()+0x92>
    277e:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2780:	5ca9      	ldrb	r1, [r5, r2]
    2782:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2784:	2a01      	cmp	r2, #1
    2786:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    278a:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    278e:	fa11 f383 	uxtah	r3, r1, r3
    2792:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2794:	d101      	bne.n	279a <ExFatFile::syncDir()+0xaa>
    2796:	2800      	cmp	r0, #0
    2798:	d1f1      	bne.n	277e <ExFatFile::syncDir()+0x8e>
    279a:	2a1f      	cmp	r2, #31
    279c:	d9f0      	bls.n	2780 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    279e:	f108 0801 	add.w	r8, r8, #1
    27a2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    27a6:	fa5f f188 	uxtb.w	r1, r8
    27aa:	428b      	cmp	r3, r1
    27ac:	d2a9      	bcs.n	2702 <ExFatFile::syncDir()+0x12>
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    27ae:	2201      	movs	r2, #1
    27b0:	f106 0124 	add.w	r1, r6, #36	; 0x24
    27b4:	6a30      	ldr	r0, [r6, #32]
    27b6:	f000 fc4b 	bl	3050 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    27ba:	2800      	cmp	r0, #0
    27bc:	d0ae      	beq.n	271c <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    27be:	6a35      	ldr	r5, [r6, #32]
    27c0:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    27c2:	4628      	mov	r0, r5
    27c4:	f004 fcd4 	bl	7170 <FsCache::sync()>
    27c8:	2800      	cmp	r0, #0
    27ca:	d0a7      	beq.n	271c <ExFatFile::syncDir()+0x2c>
    27cc:	f505 7004 	add.w	r0, r5, #528	; 0x210
    27d0:	f004 fcce 	bl	7170 <FsCache::sync()>
    27d4:	2800      	cmp	r0, #0
    27d6:	d0a1      	beq.n	271c <ExFatFile::syncDir()+0x2c>
    27d8:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    27dc:	6803      	ldr	r3, [r0, #0]
    27de:	69db      	ldr	r3, [r3, #28]
    27e0:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    27e2:	2800      	cmp	r0, #0
    27e4:	d1a1      	bne.n	272a <ExFatFile::syncDir()+0x3a>
    27e6:	e799      	b.n	271c <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    27e8:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    27ec:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    27f0:	7843      	ldrb	r3, [r0, #1]
    27f2:	bf14      	ite	ne
    27f4:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    27f8:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    27fc:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    27fe:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    2802:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    2806:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    280a:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    280e:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    2810:	e9c5 0106 	strd	r0, r1, [r5, #24]
    2814:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    2818:	f043 0301 	orr.w	r3, r3, #1
    281c:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2820:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() { m_dataCache.dirty(); }
    2822:	e7a5      	b.n	2770 <ExFatFile::syncDir()+0x80>
    2824:	2002886c 	.word	0x2002886c

00002828 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    2828:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    282a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    282e:	b343      	cbz	r3, 2882 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    2830:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    2834:	4604      	mov	r4, r0
    2836:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    283a:	2a00      	cmp	r2, #0
    283c:	db0c      	blt.n	2858 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    283e:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2840:	4628      	mov	r0, r5
    2842:	f004 fc95 	bl	7170 <FsCache::sync()>
    2846:	b978      	cbnz	r0, 2868 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    2848:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    284c:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    284e:	f043 0301 	orr.w	r3, r3, #1
    2852:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2856:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    285c:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    2860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    2864:	f7ff bf44 	b.w	26f0 <ExFatFile::syncDir()>
    2868:	f505 7004 	add.w	r0, r5, #528	; 0x210
    286c:	f004 fc80 	bl	7170 <FsCache::sync()>
    2870:	2800      	cmp	r0, #0
    2872:	d0e9      	beq.n	2848 <ExFatFile::sync()+0x20>
    2874:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    2878:	6803      	ldr	r3, [r0, #0]
    287a:	69db      	ldr	r3, [r3, #28]
    287c:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    287e:	2800      	cmp	r0, #0
    2880:	d0e2      	beq.n	2848 <ExFatFile::sync()+0x20>
    return true;
    2882:	2001      	movs	r0, #1
}
    2884:	bd38      	pop	{r3, r4, r5, pc}
    2886:	bf00      	nop

00002888 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    2888:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    288a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    288e:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2890:	065a      	lsls	r2, r3, #25
    2892:	d44c      	bmi.n	292e <ExFatFile::addDirCluster()+0xa6>
    2894:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    2896:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    2898:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    289c:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    289e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    28a2:	d301      	bcc.n	28a8 <ExFatFile::addDirCluster()+0x20>
}
    28a4:	2000      	movs	r0, #0
    28a6:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    28a8:	4628      	mov	r0, r5
    28aa:	f7ff fed7 	bl	265c <ExFatFile::addCluster()>
    28ae:	2800      	cmp	r0, #0
    28b0:	d0f8      	beq.n	28a4 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    28b2:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    28b4:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    28b6:	69ae      	ldr	r6, [r5, #24]
    28b8:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    28bc:	3e02      	subs	r6, #2
    28be:	409e      	lsls	r6, r3
    28c0:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    28c4:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    28c6:	1931      	adds	r1, r6, r4
    28c8:	2205      	movs	r2, #5
    28ca:	f500 7004 	add.w	r0, r0, #528	; 0x210
    28ce:	3401      	adds	r4, #1
    28d0:	f004 fc7a 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    28d4:	f44f 7200 	mov.w	r2, #512	; 0x200
    28d8:	2100      	movs	r1, #0
    if (!cache) {
    28da:	2800      	cmp	r0, #0
    28dc:	d0e2      	beq.n	28a4 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    28de:	f009 f8cd 	bl	ba7c <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    28e2:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    28e4:	2301      	movs	r3, #1
    28e6:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    28ea:	4093      	lsls	r3, r2
    28ec:	429c      	cmp	r4, r3
    28ee:	d3ea      	bcc.n	28c6 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    28f0:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    28f4:	065b      	lsls	r3, r3, #25
    28f6:	d415      	bmi.n	2924 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    28f8:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    28fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength += m_vol->bytesPerCluster();
    2900:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2904:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    2908:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    290c:	189b      	adds	r3, r3, r2
    290e:	f141 0000 	adc.w	r0, r1, #0
    2912:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    2914:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength += m_vol->bytesPerCluster();
    2918:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    291a:	189b      	adds	r3, r3, r2
    291c:	f141 0100 	adc.w	r1, r1, #0
    2920:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    2924:	4628      	mov	r0, r5
}
    2926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    292a:	f7ff bf7d 	b.w	2828 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    292e:	6a00      	ldr	r0, [r0, #32]
    2930:	f000 fd04 	bl	333c <ExFatPartition::rootLength()>
    2934:	e7af      	b.n	2896 <ExFatFile::addDirCluster()+0xe>
    2936:	bf00      	nop

00002938 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    2938:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    293a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    293e:	f013 0f50 	tst.w	r3, #80	; 0x50
    2942:	d102      	bne.n	294a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    2944:	2500      	movs	r5, #0
}
    2946:	4628      	mov	r0, r5
    2948:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    294a:	f640 2302 	movw	r3, #2562	; 0xa02
    294e:	4604      	mov	r4, r0
    2950:	f7ff fc1e 	bl	2190 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2954:	2800      	cmp	r0, #0
    2956:	d0f5      	beq.n	2944 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    2958:	2330      	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    295a:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    295c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    2960:	f7ff ff92 	bl	2888 <ExFatFile::addDirCluster()>
    2964:	4605      	mov	r5, r0
    2966:	2800      	cmp	r0, #0
    2968:	d0ec      	beq.n	2944 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    296a:	69a1      	ldr	r1, [r4, #24]
  void rewind() { seekSet(0); }
    296c:	2200      	movs	r2, #0
    296e:	2300      	movs	r3, #0
    2970:	4620      	mov	r0, r4
    2972:	61e1      	str	r1, [r4, #28]
    2974:	f7ff fb96 	bl	20a4 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    2978:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    297a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    297e:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    2982:	2b00      	cmp	r3, #0
    2984:	d0df      	beq.n	2946 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2986:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    2988:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    298a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    298e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    2992:	f7ff bead 	b.w	26f0 <ExFatFile::syncDir()>
    2996:	bf00      	nop

00002998 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2998:	b5f0      	push	{r4, r5, r6, r7, lr}
  ExFatFile() {}
    299a:	2500      	movs	r5, #0
    299c:	b097      	sub	sp, #92	; 0x5c
    299e:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    29a0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    29a4:	9201      	str	r2, [sp, #4]
    29a6:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    29a8:	2b00      	cmp	r3, #0
    29aa:	d146      	bne.n	2a3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    29ac:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    29b0:	460e      	mov	r6, r1
    29b2:	f013 0f50 	tst.w	r3, #80	; 0x50
    29b6:	d040      	beq.n	2a3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
  if (isDirSeparator(*path)) {
    29b8:	7813      	ldrb	r3, [r2, #0]
    29ba:	4604      	mov	r4, r0
    29bc:	4611      	mov	r1, r2
    29be:	2b2f      	cmp	r3, #47	; 0x2f
    29c0:	d03e      	beq.n	2a40 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!parsePathName(path, &fname, &path)) {
    29c2:	ab01      	add	r3, sp, #4
    29c4:	aa03      	add	r2, sp, #12
    29c6:	4620      	mov	r0, r4
    29c8:	f7ff fa36 	bl	1e38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    29cc:	2800      	cmp	r0, #0
    29ce:	d034      	beq.n	2a3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!*path) {
    29d0:	9b01      	ldr	r3, [sp, #4]
    29d2:	781b      	ldrb	r3, [r3, #0]
    29d4:	2b00      	cmp	r3, #0
    29d6:	d041      	beq.n	2a5c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc4>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    29d8:	2300      	movs	r3, #0
    29da:	aa03      	add	r2, sp, #12
    29dc:	4631      	mov	r1, r6
    29de:	4620      	mov	r0, r4
    29e0:	f7ff fbd6 	bl	2190 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    29e4:	b930      	cbnz	r0, 29f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5c>
      if (!pFlag || !mkdir(parent, &fname)) {
    29e6:	b347      	cbz	r7, 2a3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    29e8:	aa03      	add	r2, sp, #12
    29ea:	4631      	mov	r1, r6
    29ec:	4620      	mov	r0, r4
    29ee:	f7ff ffa3 	bl	2938 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    29f2:	b310      	cbz	r0, 2a3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    tmpDir = *this;
    29f4:	46a4      	mov	ip, r4
    29f6:	ad08      	add	r5, sp, #32
    29f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
    29fc:	f8dc 0000 	ldr.w	r0, [ip]
    2a00:	f10c 0c10 	add.w	ip, ip, #16
    2a04:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    2a08:	46ae      	mov	lr, r5
    2a0a:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    2a0e:	3510      	adds	r5, #16
    2a10:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    2a14:	45b4      	cmp	ip, r6
    2a16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2a1a:	d1ef      	bne.n	29fc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x64>
    2a1c:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    2a20:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    2a22:	6028      	str	r0, [r5, #0]
    close();
    2a24:	4620      	mov	r0, r4
    2a26:	f7ff f9e9 	bl	1dfc <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    2a2a:	9901      	ldr	r1, [sp, #4]
    2a2c:	ab01      	add	r3, sp, #4
    2a2e:	aa03      	add	r2, sp, #12
    2a30:	4620      	mov	r0, r4
    2a32:	f7ff fa01 	bl	1e38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2a36:	2800      	cmp	r0, #0
    2a38:	d1ca      	bne.n	29d0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x38>
  return false;
    2a3a:	2000      	movs	r0, #0
}
    2a3c:	b017      	add	sp, #92	; 0x5c
    2a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    2a40:	3101      	adds	r1, #1
    2a42:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    2a44:	780b      	ldrb	r3, [r1, #0]
    2a46:	2b2f      	cmp	r3, #47	; 0x2f
    2a48:	d0fa      	beq.n	2a40 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!tmpDir.openRoot(parent->m_vol)) {
    2a4a:	6a31      	ldr	r1, [r6, #32]
    2a4c:	a808      	add	r0, sp, #32
    2a4e:	f7ff f9df 	bl	1e10 <ExFatFile::openRoot(ExFatVolume*)>
    2a52:	2800      	cmp	r0, #0
    2a54:	d0f1      	beq.n	2a3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!parsePathName(path, &fname, &path)) {
    2a56:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    2a58:	ae08      	add	r6, sp, #32
    2a5a:	e7b2      	b.n	29c2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2a>
  return mkdir(parent, &fname);
    2a5c:	aa03      	add	r2, sp, #12
    2a5e:	4631      	mov	r1, r6
    2a60:	4620      	mov	r0, r4
    2a62:	f7ff ff69 	bl	2938 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    2a66:	b017      	add	sp, #92	; 0x5c
    2a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a6a:	bf00      	nop

00002a6c <ExFatFile::truncate()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    2a6c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    2a70:	079a      	lsls	r2, r3, #30
    2a72:	d562      	bpl.n	2b3a <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    2a74:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    2a76:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    2a78:	b082      	sub	sp, #8
    2a7a:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    2a7c:	b3a5      	cbz	r5, 2ae8 <ExFatFile::truncate()+0x7c>
    return true;
  }
  if (isContiguous()) {
    2a7e:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    2a82:	d034      	beq.n	2aee <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2a84:	6a00      	ldr	r0, [r0, #32]
    2a86:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2a88:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    2a8c:	3a01      	subs	r2, #1
    2a8e:	68e1      	ldr	r1, [r4, #12]
    2a90:	f10c 0c09 	add.w	ip, ip, #9
    2a94:	f141 31ff 	adc.w	r1, r1, #4294967295
    2a98:	fa5f fc8c 	uxtb.w	ip, ip
    2a9c:	f1cc 0e20 	rsb	lr, ip, #32
    2aa0:	fa22 f20c 	lsr.w	r2, r2, ip
    2aa4:	f1ac 0c20 	sub.w	ip, ip, #32
    2aa8:	fa01 fe0e 	lsl.w	lr, r1, lr
    2aac:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    2ab0:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2ab2:	ea42 020e 	orr.w	r2, r2, lr
    2ab6:	ea42 020c 	orr.w	r2, r2, ip
    2aba:	3201      	adds	r2, #1
    if (m_curCluster) {
    2abc:	b319      	cbz	r1, 2b06 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    2abe:	3d01      	subs	r5, #1
    2ac0:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    2ac2:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    2ac4:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    2ac6:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2ac8:	bb72      	cbnz	r2, 2b28 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2aca:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    2ace:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    2ad0:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2ad4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    2ad8:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    2adc:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    2ae0:	f7ff fea2 	bl	2828 <ExFatFile::sync()>

fail:
  return false;
}
    2ae4:	b002      	add	sp, #8
    2ae6:	bd70      	pop	{r4, r5, r6, pc}
    return true;
    2ae8:	2001      	movs	r0, #1
}
    2aea:	b002      	add	sp, #8
    2aec:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    2aee:	6981      	ldr	r1, [r0, #24]
    2af0:	b961      	cbnz	r1, 2b0c <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    2af2:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2af4:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    2af6:	4629      	mov	r1, r5
    2af8:	6a20      	ldr	r0, [r4, #32]
    2afa:	f000 fb49 	bl	3190 <ExFatPartition::freeChain(unsigned long)>
    2afe:	b1c8      	cbz	r0, 2b34 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2b00:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2b04:	e7e1      	b.n	2aca <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    2b06:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2b08:	61e1      	str	r1, [r4, #28]
    2b0a:	e7dd      	b.n	2ac8 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2b0c:	aa01      	add	r2, sp, #4
    2b0e:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    2b10:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2b12:	f000 fafb 	bl	310c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    2b16:	2800      	cmp	r0, #0
    2b18:	db0c      	blt.n	2b34 <ExFatFile::truncate()+0xc8>
      if (fg) {
    2b1a:	d110      	bne.n	2b3e <ExFatFile::truncate()+0xd2>
    if (toFree) {
    2b1c:	9d01      	ldr	r5, [sp, #4]
    2b1e:	2d00      	cmp	r5, #0
    2b20:	d1e9      	bne.n	2af6 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2b22:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2b26:	e7d0      	b.n	2aca <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2b28:	2300      	movs	r3, #0
    2b2a:	9901      	ldr	r1, [sp, #4]
    2b2c:	f000 fa14 	bl	2f58 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2b30:	2800      	cmp	r0, #0
    2b32:	d1e5      	bne.n	2b00 <ExFatFile::truncate()+0x94>
  return false;
    2b34:	2000      	movs	r0, #0
}
    2b36:	b002      	add	sp, #8
    2b38:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2b3a:	2000      	movs	r0, #0
}
    2b3c:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    2b3e:	f04f 32ff 	mov.w	r2, #4294967295
    2b42:	69a1      	ldr	r1, [r4, #24]
    2b44:	6a20      	ldr	r0, [r4, #32]
    2b46:	f000 fb03 	bl	3150 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2b4a:	2800      	cmp	r0, #0
    2b4c:	d1e6      	bne.n	2b1c <ExFatFile::truncate()+0xb0>
    2b4e:	e7f1      	b.n	2b34 <ExFatFile::truncate()+0xc8>

00002b50 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    2b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2b54:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    2b58:	b083      	sub	sp, #12
    2b5a:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    2b5c:	079d      	lsls	r5, r3, #30
    2b5e:	f140 80a1 	bpl.w	2ca4 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    2b62:	4691      	mov	r9, r2
    2b64:	071a      	lsls	r2, r3, #28
    2b66:	460e      	mov	r6, r1
    2b68:	f100 8095 	bmi.w	2c96 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    2b6c:	f1b9 0f00 	cmp.w	r9, #0
    2b70:	f000 8128 	beq.w	2dc4 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    2b74:	6823      	ldr	r3, [r4, #0]
    2b76:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2b78:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    2b7a:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2b7c:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    2b80:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    2b84:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    2b88:	f1b8 0f00 	cmp.w	r8, #0
    2b8c:	f040 8094 	bne.w	2cb8 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    2b90:	2900      	cmp	r1, #0
    2b92:	f000 80d4 	beq.w	2d3e <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    2b96:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2b9a:	065b      	lsls	r3, r3, #25
    2b9c:	f140 80ec 	bpl.w	2d78 <ExFatFile::write(void const*, unsigned int)+0x228>
    2ba0:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    2ba4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2ba8:	f10c 0c09 	add.w	ip, ip, #9
    2bac:	3b01      	subs	r3, #1
    2bae:	fa5f fc8c 	uxtb.w	ip, ip
    2bb2:	f142 32ff 	adc.w	r2, r2, #4294967295
    2bb6:	f1cc 0e20 	rsb	lr, ip, #32
    2bba:	fa23 f30c 	lsr.w	r3, r3, ip
    2bbe:	f1ac 0c20 	sub.w	ip, ip, #32
    2bc2:	fa02 fe0e 	lsl.w	lr, r2, lr
    2bc6:	fa22 fc0c 	lsr.w	ip, r2, ip
    2bca:	69e2      	ldr	r2, [r4, #28]
    2bcc:	ea43 030e 	orr.w	r3, r3, lr
    2bd0:	ea43 030c 	orr.w	r3, r3, ip
    2bd4:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    2bd6:	4299      	cmp	r1, r3
    2bd8:	f080 80d5 	bcs.w	2d86 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    2bdc:	3101      	adds	r1, #1
    2bde:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    2be0:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2be4:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    2be6:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2bea:	4091      	lsls	r1, r2
    2bec:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2bee:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    2bf2:	f0c0 808a 	bcc.w	2d0a <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    2bf6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    2bfa:	f0c0 80a6 	bcc.w	2d4a <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    2bfe:	2301      	movs	r3, #1
    2c00:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    2c02:	0a6a      	lsrs	r2, r5, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    2c04:	eba3 0308 	sub.w	r3, r3, r8
    2c08:	4293      	cmp	r3, r2
    2c0a:	bf28      	it	cs
    2c0c:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    2c0e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
    2c12:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    2c14:	ea4f 2843 	mov.w	r8, r3, lsl #9
    2c18:	d309      	bcc.n	2c2e <ExFatFile::write(void const*, unsigned int)+0xde>
    2c1a:	185f      	adds	r7, r3, r1
    2c1c:	42ba      	cmp	r2, r7
    2c1e:	d206      	bcs.n	2c2e <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    2c20:	2200      	movs	r2, #0
    2c22:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2c26:	f04f 32ff 	mov.w	r2, #4294967295
    2c2a:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
    2c2e:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2c32:	4632      	mov	r2, r6
    2c34:	6807      	ldr	r7, [r0, #0]
    2c36:	6a7f      	ldr	r7, [r7, #36]	; 0x24
    2c38:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    2c3a:	b398      	cbz	r0, 2ca4 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    2c3c:	4643      	mov	r3, r8
    src += n;
    2c3e:	4446      	add	r6, r8
    toWrite -= n;
    2c40:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    2c44:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    2c48:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    2c4c:	19db      	adds	r3, r3, r7
    2c4e:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    2c52:	4298      	cmp	r0, r3
    2c54:	4191      	sbcs	r1, r2
    m_curPosition += n;
    2c56:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    2c5a:	d207      	bcs.n	2c6c <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2c5c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2c60:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    2c64:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2c68:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    2c6c:	2d00      	cmp	r5, #0
    2c6e:	d183      	bne.n	2b78 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    2c70:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    2c74:	4298      	cmp	r0, r3
    2c76:	4191      	sbcs	r1, r2
    2c78:	f0c0 8096 	bcc.w	2da8 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    2c7c:	4b53      	ldr	r3, [pc, #332]	; (2dcc <ExFatFile::write(void const*, unsigned int)+0x27c>)
    2c7e:	681b      	ldr	r3, [r3, #0]
    2c80:	2b00      	cmp	r3, #0
    2c82:	f000 809d 	beq.w	2dc0 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2c86:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2c8a:	4648      	mov	r0, r9
    2c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c90:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    2c94:	e00d      	b.n	2cb2 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    2c96:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    2c9a:	f7ff fa03 	bl	20a4 <ExFatFile::seekSet(unsigned long long)>
    2c9e:	2800      	cmp	r0, #0
    2ca0:	f47f af64 	bne.w	2b6c <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    2ca4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    2ca8:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2caa:	f043 0301 	orr.w	r3, r3, #1
    2cae:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2cb2:	b003      	add	sp, #12
    2cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    2cb8:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2cbc:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2cbe:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    2cc2:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2cc6:	4091      	lsls	r1, r2
    2cc8:	4441      	add	r1, r8
    2cca:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2ccc:	2f00      	cmp	r7, #0
    2cce:	d08e      	beq.n	2bee <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    2cd0:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    2cd4:	2201      	movs	r2, #1
    2cd6:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2cda:	45a8      	cmp	r8, r5
    2cdc:	bf28      	it	cs
    2cde:	46a8      	movcs	r8, r5
    2ce0:	f004 fa72 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2ce4:	2800      	cmp	r0, #0
    2ce6:	d0dd      	beq.n	2ca4 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2ce8:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2cea:	4447      	add	r7, r8
      memcpy(dst, src, n);
    2cec:	4642      	mov	r2, r8
    2cee:	4631      	mov	r1, r6
    2cf0:	f005 f9f8 	bl	80e4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2cf4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    2cf8:	6a20      	ldr	r0, [r4, #32]
    2cfa:	d19f      	bne.n	2c3c <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() { return m_dataCache.sync(); }
    2cfc:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2d00:	f004 fa36 	bl	7170 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    2d04:	2800      	cmp	r0, #0
    2d06:	d199      	bne.n	2c3c <ExFatFile::write(void const*, unsigned int)+0xec>
    2d08:	e7cc      	b.n	2ca4 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    2d0a:	6862      	ldr	r2, [r4, #4]
    2d0c:	6963      	ldr	r3, [r4, #20]
    2d0e:	9200      	str	r2, [sp, #0]
    2d10:	9301      	str	r3, [sp, #4]
    2d12:	6922      	ldr	r2, [r4, #16]
    2d14:	6823      	ldr	r3, [r4, #0]
    2d16:	4293      	cmp	r3, r2
    2d18:	e9dd 2300 	ldrd	r2, r3, [sp]
    2d1c:	419a      	sbcs	r2, r3
    2d1e:	d212      	bcs.n	2d46 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    2d20:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    2d22:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2d26:	f004 fa4f 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2d2a:	2800      	cmp	r0, #0
    2d2c:	d0ba      	beq.n	2ca4 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2d2e:	462a      	mov	r2, r5
    2d30:	4631      	mov	r1, r6
    2d32:	4438      	add	r0, r7
    m_curPosition += n;
    2d34:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    2d36:	f005 f9d5 	bl	80e4 <memcpy>
    m_curPosition += n;
    2d3a:	462b      	mov	r3, r5
    2d3c:	e77f      	b.n	2c3e <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    2d3e:	69e1      	ldr	r1, [r4, #28]
    2d40:	b349      	cbz	r1, 2d96 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    2d42:	61a1      	str	r1, [r4, #24]
    2d44:	e74c      	b.n	2be0 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    2d46:	2205      	movs	r2, #5
    2d48:	e7eb      	b.n	2d22 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    2d4a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    2d4e:	428b      	cmp	r3, r1
    2d50:	d106      	bne.n	2d60 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    2d52:	2300      	movs	r3, #0
    2d54:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2d58:	f04f 33ff 	mov.w	r3, #4294967295
    2d5c:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
    2d60:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2d64:	4632      	mov	r2, r6
    2d66:	6803      	ldr	r3, [r0, #0]
    2d68:	6a1b      	ldr	r3, [r3, #32]
    2d6a:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    2d6c:	2800      	cmp	r0, #0
    2d6e:	d099      	beq.n	2ca4 <ExFatFile::write(void const*, unsigned int)+0x154>
    2d70:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2d74:	4698      	mov	r8, r3
    2d76:	e762      	b.n	2c3e <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2d78:	f104 0218 	add.w	r2, r4, #24
    2d7c:	f000 f9c6 	bl	310c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    2d80:	2800      	cmp	r0, #0
    2d82:	db8f      	blt.n	2ca4 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    2d84:	d104      	bne.n	2d90 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    2d86:	4620      	mov	r0, r4
    2d88:	f7ff fc68 	bl	265c <ExFatFile::addCluster()>
    2d8c:	2800      	cmp	r0, #0
    2d8e:	d089      	beq.n	2ca4 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    2d90:	69a1      	ldr	r1, [r4, #24]
    2d92:	6a20      	ldr	r0, [r4, #32]
    2d94:	e724      	b.n	2be0 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    2d96:	4620      	mov	r0, r4
    2d98:	f7ff fc60 	bl	265c <ExFatFile::addCluster()>
    2d9c:	2800      	cmp	r0, #0
    2d9e:	d081      	beq.n	2ca4 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    2da0:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    2da2:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    2da4:	61e1      	str	r1, [r4, #28]
    2da6:	e71b      	b.n	2be0 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2da8:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2dac:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    2dae:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2db2:	f061 037f 	orn	r3, r1, #127	; 0x7f
    2db6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2dba:	b003      	add	sp, #12
    2dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2dc0:	4648      	mov	r0, r9
    2dc2:	e776      	b.n	2cb2 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    2dc4:	e9d4 3200 	ldrd	r3, r2, [r4]
    2dc8:	e752      	b.n	2c70 <ExFatFile::write(void const*, unsigned int)+0x120>
    2dca:	bf00      	nop
    2dcc:	2002886c 	.word	0x2002886c

00002dd0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    2dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  bool atEnd() { return next == end; }
    2dd4:	e9d2 3801 	ldrd	r3, r8, [r2, #4]
    2dd8:	f103 090f 	add.w	r9, r3, #15
  return *reinterpret_cast<const uint16_t*>(src);
    2ddc:	f831 0f02 	ldrh.w	r0, [r1, #2]!
    if (fname->atEnd()) {
    2de0:	4598      	cmp	r8, r3
  char getch() { return atEnd() ? 0 : *next++; }
    2de2:	f103 0301 	add.w	r3, r3, #1
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2de6:	fa5f fc80 	uxtb.w	ip, r0
    if (fname->atEnd()) {
    2dea:	d01e      	beq.n	2e2a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    2dec:	6053      	str	r3, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2dee:	287e      	cmp	r0, #126	; 0x7e
    2df0:	f813 ec01 	ldrb.w	lr, [r3, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2df4:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
    2df8:	f1ac 0620 	sub.w	r6, ip, #32
    2dfc:	f1ae 0561 	sub.w	r5, lr, #97	; 0x61
    2e00:	f1ae 0720 	sub.w	r7, lr, #32
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2e04:	d80e      	bhi.n	2e24 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2e06:	2d19      	cmp	r5, #25
    2e08:	bf98      	it	ls
    2e0a:	fa5f fe87 	uxtbls.w	lr, r7
    2e0e:	2c19      	cmp	r4, #25
    2e10:	bf98      	it	ls
    2e12:	fa5f fc86 	uxtbls.w	ip, r6
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2e16:	45f4      	cmp	ip, lr
    2e18:	d104      	bne.n	2e24 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
  for (uint8_t i = 0; i < 15; i++) {
    2e1a:	4599      	cmp	r9, r3
    2e1c:	d1de      	bne.n	2ddc <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    2e1e:	2001      	movs	r0, #1
}
    2e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
    2e24:	2000      	movs	r0, #0
}
    2e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return u == 0;
    2e2a:	fab0 f080 	clz	r0, r0
    2e2e:	0940      	lsrs	r0, r0, #5
}
    2e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00002e34 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    2e34:	b530      	push	{r4, r5, lr}
  void reset() { next = begin; }
    2e36:	680d      	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
    2e38:	688c      	ldr	r4, [r1, #8]
  void reset() { next = begin; }
    2e3a:	604d      	str	r5, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    2e3c:	42ac      	cmp	r4, r5
    2e3e:	d025      	beq.n	2e8c <ExFatFile::hashName(ExName_t*)+0x58>
    2e40:	462a      	mov	r2, r5
  uint16_t hash = 0;
    2e42:	2300      	movs	r3, #0
  char getch() { return atEnd() ? 0 : *next++; }
    2e44:	3201      	adds	r2, #1
  hash = ((hash << 15) | (hash >> 1)) + u;
    2e46:	03d8      	lsls	r0, r3, #15
    2e48:	604a      	str	r2, [r1, #4]
    2e4a:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
    2e4e:	f812 0c01 	ldrb.w	r0, [r2, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2e52:	f1a0 0c61 	sub.w	ip, r0, #97	; 0x61
    2e56:	f1a0 0e20 	sub.w	lr, r0, #32
    2e5a:	f1bc 0f19 	cmp.w	ip, #25
    2e5e:	bf98      	it	ls
    2e60:	fa5f f08e 	uxtbls.w	r0, lr
  while (!fname->atEnd()) {
    2e64:	4294      	cmp	r4, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
    2e66:	4403      	add	r3, r0
  hash = ((hash << 15) | (hash >> 1));
    2e68:	ea4f 30c3 	mov.w	r0, r3, lsl #15
    2e6c:	f3c3 034e 	ubfx	r3, r3, #1, #15
    2e70:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    2e74:	ea43 0300 	orr.w	r3, r3, r0
  while (!fname->atEnd()) {
    2e78:	d1e4      	bne.n	2e44 <ExFatFile::hashName(ExName_t*)+0x10>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    2e7a:	1b64      	subs	r4, r4, r5
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    2e7c:	820b      	strh	r3, [r1, #16]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2e7e:	1e60      	subs	r0, r4, #1
  fname->nameLength = fname->end - fname->begin;
    2e80:	60cc      	str	r4, [r1, #12]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2e82:	28fe      	cmp	r0, #254	; 0xfe
    2e84:	bf8c      	ite	hi
    2e86:	2000      	movhi	r0, #0
    2e88:	2001      	movls	r0, #1
  }
  return true;

fail:
  return false;
}
    2e8a:	bd30      	pop	{r4, r5, pc}
  while (!fname->atEnd()) {
    2e8c:	2000      	movs	r0, #0
    2e8e:	4604      	mov	r4, r0
  uint16_t hash = 0;
    2e90:	4603      	mov	r3, r0
  fname->nameLength = fname->end - fname->begin;
    2e92:	60cc      	str	r4, [r1, #12]
  fname->nameHash = hash;
    2e94:	820b      	strh	r3, [r1, #16]
}
    2e96:	bd30      	pop	{r4, r5, pc}

00002e98 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e9c:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2e9e:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2ea0:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2ea2:	2900      	cmp	r1, #0
    2ea4:	d042      	beq.n	2f2c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    2ea6:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    2eaa:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2eae:	4543      	cmp	r3, r8
    2eb0:	d942      	bls.n	2f38 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    2eb2:	f008 0307 	and.w	r3, r8, #7
    2eb6:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    2eb8:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    2ebc:	409d      	lsls	r5, r3
    2ebe:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    2ec0:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    2ec2:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector =
    2ec4:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    2ec8:	2200      	movs	r2, #0
    2eca:	4638      	mov	r0, r7
    2ecc:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    2ed0:	f004 f97a 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2ed4:	b1e8      	cbz	r0, 2f12 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    2ed6:	f10b 3bff 	add.w	fp, fp, #4294967295
    2eda:	4483      	add	fp, r0
    2edc:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    2ee0:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    2ee4:	e00a      	b.n	2efc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    2ee6:	454a      	cmp	r2, r9
    2ee8:	d02b      	beq.n	2f42 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2eea:	45a0      	cmp	r8, r4
    2eec:	d010      	beq.n	2f10 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    2eee:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    2ef2:	42a5      	cmp	r5, r4
    2ef4:	d914      	bls.n	2f20 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    2ef6:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    2efa:	d00c      	beq.n	2f16 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    2efc:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    2efe:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    2f00:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    2f04:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    2f08:	d0ed      	beq.n	2ee6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    2f0a:	45a0      	cmp	r8, r4
        endAlloc++;
    2f0c:	4626      	mov	r6, r4
        if (endAlloc == start) {
    2f0e:	d1ee      	bne.n	2eee <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    2f10:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    2f12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    2f16:	4558      	cmp	r0, fp
      mask = 1;
    2f18:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    2f1c:	d1e0      	bne.n	2ee0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    2f1e:	e001      	b.n	2f24 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    2f20:	2600      	movs	r6, #0
    2f22:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    2f24:	2501      	movs	r5, #1
    i = 0;
    2f26:	f04f 0b00 	mov.w	fp, #0
    2f2a:	e7cb      	b.n	2ec4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2f2c:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    2f30:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2f34:	4543      	cmp	r3, r8
    2f36:	d8bc      	bhi.n	2eb2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    2f38:	f04f 0800 	mov.w	r8, #0
    2f3c:	2501      	movs	r5, #1
    start = 0;
    2f3e:	46c3      	mov	fp, r8
    2f40:	e7be      	b.n	2ec0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    2f42:	f1ba 0f00 	cmp.w	sl, #0
    2f46:	d104      	bne.n	2f52 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    2f48:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    2f4c:	bf08      	it	eq
    2f4e:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    2f52:	1cb0      	adds	r0, r6, #2
}
    2f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002f58 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    2f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f5c:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    2f5e:	1e88      	subs	r0, r1, #2
                                  bool value) {
    2f60:	4615      	mov	r5, r2
    2f62:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    2f64:	1883      	adds	r3, r0, r2
    2f66:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    2f6a:	4293      	cmp	r3, r2
    2f6c:	d837      	bhi.n	2fde <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    2f6e:	bbce      	cbnz	r6, 2fe4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    2f70:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    2f74:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    2f76:	bf88      	it	hi
    2f78:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    2f7c:	f000 0307 	and.w	r3, r0, #7
    2f80:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2f82:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    2f86:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    2f8a:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2f8c:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    2f90:	b2e4      	uxtb	r4, r4
    2f92:	2201      	movs	r2, #1
    2f94:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2f96:	188f      	adds	r7, r1, r2
    2f98:	f004 f916 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2f9c:	b1f8      	cbz	r0, 2fde <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2f9e:	f109 3eff 	add.w	lr, r9, #4294967295
    2fa2:	4486      	add	lr, r0
    2fa4:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2fa8:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    2fac:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2fb0:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    2fb4:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    2fb8:	bf14      	ite	ne
    2fba:	2201      	movne	r2, #1
    2fbc:	2200      	moveq	r2, #0
    2fbe:	42b2      	cmp	r2, r6
    2fc0:	d00d      	beq.n	2fde <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    2fc2:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    2fc4:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    2fc8:	d018      	beq.n	2ffc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    2fca:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2fce:	d1ed      	bne.n	2fac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    2fd0:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2fd2:	46a1      	mov	r9, r4
    2fd4:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    2fd8:	d1e6      	bne.n	2fa8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2fda:	4639      	mov	r1, r7
    2fdc:	e7d9      	b.n	2f92 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

fail:
  return false;
    2fde:	2000      	movs	r0, #0
}
    2fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2fe4:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    2fe8:	428b      	cmp	r3, r1
    2fea:	d9c7      	bls.n	2f7c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    2fec:	4281      	cmp	r1, r0
    2fee:	d3c5      	bcc.n	2f7c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2ff0:	4293      	cmp	r3, r2
    2ff2:	bf28      	it	cs
    2ff4:	2300      	movcs	r3, #0
    2ff6:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    2ffa:	e7bf      	b.n	2f7c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    2ffc:	2001      	movs	r0, #1
}
    2ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3002:	bf00      	nop

00003004 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    3004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    3006:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    300a:	3301      	adds	r3, #1
    300c:	428b      	cmp	r3, r1
    300e:	d201      	bcs.n	3014 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    3010:	2000      	movs	r0, #0
}
    3012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3014:	4607      	mov	r7, r0
    3016:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    3018:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    301c:	2500      	movs	r5, #0
    301e:	e005      	b.n	302c <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    3020:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    3024:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    3026:	3301      	adds	r3, #1
    3028:	42a3      	cmp	r3, r4
    302a:	d3f1      	bcc.n	3010 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    302c:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    3030:	2200      	movs	r2, #0
    3032:	4630      	mov	r0, r6
    3034:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    3038:	f004 f8c6 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    303c:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    303e:	2800      	cmp	r0, #0
    3040:	d0e6      	beq.n	3010 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3042:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    3046:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    3048:	1c63      	adds	r3, r4, #1
    304a:	d1e9      	bne.n	3020 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    304c:	1c68      	adds	r0, r5, #1
}
    304e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003050 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    3050:	b538      	push	{r3, r4, r5, lr}
    3052:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    3054:	680b      	ldr	r3, [r1, #0]
    3056:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    305a:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    305e:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    3062:	3b02      	subs	r3, #2
    3064:	6865      	ldr	r5, [r4, #4]
    3066:	fa03 f30c 	lsl.w	r3, r3, ip
    306a:	4029      	ands	r1, r5
    306c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    3070:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    3074:	4419      	add	r1, r3
    3076:	f004 f8a7 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    307a:	b118      	cbz	r0, 3084 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    307c:	6863      	ldr	r3, [r4, #4]
    307e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3082:	4418      	add	r0, r3
}
    3084:	bd38      	pop	{r3, r4, r5, pc}
    3086:	bf00      	nop

00003088 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    3088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    308c:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    308e:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    3092:	6849      	ldr	r1, [r1, #4]
    3094:	400b      	ands	r3, r1
  pos->position += offset;
    3096:	4411      	add	r1, r2
    3098:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    309a:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    309c:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    30a0:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    30a4:	b2d2      	uxtb	r2, r2
    30a6:	40d3      	lsrs	r3, r2
  while (tmp--) {
    30a8:	b32b      	cbz	r3, 30f6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    30aa:	4680      	mov	r8, r0
    30ac:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    30ae:	f500 7904 	add.w	r9, r0, #528	; 0x210
    30b2:	e005      	b.n	30c0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    30b4:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    30b6:	3d01      	subs	r5, #1
      pos->cluster++;
    30b8:	f103 0301 	add.w	r3, r3, #1
    30bc:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    30be:	d31a      	bcc.n	30f6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    30c0:	7a26      	ldrb	r6, [r4, #8]
    30c2:	2e00      	cmp	r6, #0
    30c4:	d1f6      	bne.n	30b4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    30c6:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    30ca:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    30cc:	6827      	ldr	r7, [r4, #0]
    30ce:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    30d0:	3301      	adds	r3, #1
    30d2:	429f      	cmp	r7, r3
    30d4:	d812      	bhi.n	30fc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    30d6:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    30da:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    30de:	f004 f873 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    30e2:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    30e4:	b150      	cbz	r0, 30fc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    30e6:	f3c7 0708 	ubfx	r7, r7, #0, #9
    30ea:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    30ec:	1c5a      	adds	r2, r3, #1
    30ee:	d009      	beq.n	3104 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    30f0:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    30f2:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    30f4:	d2e4      	bcs.n	30c0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    30f6:	2001      	movs	r0, #1
}
    30f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    30fc:	f04f 30ff 	mov.w	r0, #4294967295
}
    3100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    3104:	4630      	mov	r0, r6
}
    3106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    310a:	bf00      	nop

0000310c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    310c:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    310e:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    3112:	3301      	adds	r3, #1
    3114:	428b      	cmp	r3, r1
    3116:	d202      	bcs.n	311e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    3118:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    311c:	bd38      	pop	{r3, r4, r5, pc}
    311e:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3120:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    3124:	4615      	mov	r5, r2
    3126:	f500 7004 	add.w	r0, r0, #528	; 0x210
    312a:	2200      	movs	r2, #0
    312c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    3130:	f004 f84a 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    3134:	2800      	cmp	r0, #0
    3136:	d0ef      	beq.n	3118 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3138:	00a4      	lsls	r4, r4, #2
    313a:	f3c4 0408 	ubfx	r4, r4, #0, #9
    313e:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    3140:	1c5a      	adds	r2, r3, #1
    3142:	d002      	beq.n	314a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    3144:	2001      	movs	r0, #1
  *value = next;
    3146:	602b      	str	r3, [r5, #0]
}
    3148:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    314a:	2000      	movs	r0, #0
}
    314c:	bd38      	pop	{r3, r4, r5, pc}
    314e:	bf00      	nop

00003150 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3150:	2901      	cmp	r1, #1
    3152:	d91b      	bls.n	318c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    3154:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3156:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    315a:	460c      	mov	r4, r1
    315c:	3301      	adds	r3, #1
    315e:	428b      	cmp	r3, r1
    3160:	d201      	bcs.n	3166 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
    3162:	2000      	movs	r0, #0
}
    3164:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3166:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    316a:	4615      	mov	r5, r2
    316c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    3170:	2201      	movs	r2, #1
    3172:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    3176:	f004 f827 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    317a:	4603      	mov	r3, r0
    317c:	2800      	cmp	r0, #0
    317e:	d0f0      	beq.n	3162 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    3180:	00a4      	lsls	r4, r4, #2
  return true;
    3182:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    3184:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    3188:	511d      	str	r5, [r3, r4]
}
    318a:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    318c:	2000      	movs	r0, #0
}
    318e:	4770      	bx	lr

00003190 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    3190:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    3194:	3301      	adds	r3, #1
    3196:	4299      	cmp	r1, r3
    3198:	d901      	bls.n	319e <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

fail:
  return false;
}
    319a:	2000      	movs	r0, #0
    319c:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    319e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31a2:	4605      	mov	r5, r0
    31a4:	b083      	sub	sp, #12
    31a6:	460c      	mov	r4, r1
    31a8:	f500 7904 	add.w	r9, r0, #528	; 0x210
    31ac:	460f      	mov	r7, r1
    31ae:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    31b2:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    31b6:	2200      	movs	r2, #0
    31b8:	4648      	mov	r0, r9
    31ba:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    31be:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    31c2:	f004 f801 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    31c6:	b190      	cbz	r0, 31ee <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    31c8:	00a3      	lsls	r3, r4, #2
    31ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    31ce:	58c2      	ldr	r2, [r0, r3]
    31d0:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    31d2:	1c53      	adds	r3, r2, #1
    31d4:	bf16      	itet	ne
    31d6:	4616      	movne	r6, r2
    31d8:	f04f 0a00 	moveq.w	sl, #0
    31dc:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    31e0:	2c01      	cmp	r4, #1
    31e2:	d904      	bls.n	31ee <ExFatPartition::freeChain(unsigned long)+0x5e>
    31e4:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    31e8:	3201      	adds	r2, #1
    31ea:	4294      	cmp	r4, r2
    31ec:	d903      	bls.n	31f6 <ExFatPartition::freeChain(unsigned long)+0x66>
}
    31ee:	2000      	movs	r0, #0
    31f0:	b003      	add	sp, #12
    31f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    31f6:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    31fa:	2201      	movs	r2, #1
    31fc:	4648      	mov	r0, r9
    31fe:	4459      	add	r1, fp
    3200:	f003 ffe2 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    3204:	2800      	cmp	r0, #0
    3206:	d0f2      	beq.n	31ee <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    3208:	9b01      	ldr	r3, [sp, #4]
    320a:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    320e:	f1ba 0f00 	cmp.w	sl, #0
    3212:	d012      	beq.n	323a <ExFatPartition::freeChain(unsigned long)+0xaa>
    3214:	3401      	adds	r4, #1
    3216:	42b4      	cmp	r4, r6
    3218:	d008      	beq.n	322c <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    321a:	2300      	movs	r3, #0
    321c:	1be2      	subs	r2, r4, r7
    321e:	4639      	mov	r1, r7
    3220:	4628      	mov	r0, r5
    3222:	f7ff fe99 	bl	2f58 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3226:	2800      	cmp	r0, #0
    3228:	d0e1      	beq.n	31ee <ExFatPartition::freeChain(unsigned long)+0x5e>
    322a:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    322c:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    3230:	3301      	adds	r3, #1
    3232:	42b3      	cmp	r3, r6
    3234:	d3db      	bcc.n	31ee <ExFatPartition::freeChain(unsigned long)+0x5e>
    3236:	4634      	mov	r4, r6
    3238:	e7bb      	b.n	31b2 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    323a:	1c62      	adds	r2, r4, #1
    323c:	4653      	mov	r3, sl
    323e:	4639      	mov	r1, r7
    3240:	4628      	mov	r0, r5
    3242:	1bd2      	subs	r2, r2, r7
}
    3244:	b003      	add	sp, #12
    3246:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    324a:	f7ff be85 	b.w	2f58 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    324e:	bf00      	nop

00003250 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    3250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    3252:	f04f 0c00 	mov.w	ip, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    3256:	4615      	mov	r5, r2
    m_sector = 0XFFFFFFFF;
    3258:	f04f 32ff 	mov.w	r2, #4294967295
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    325c:	4604      	mov	r4, r0
  m_fatType = 0;
    325e:	f880 c444 	strb.w	ip, [r0, #1092]	; 0x444
  m_blockDev = dev;
    3262:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    3266:	6041      	str	r1, [r0, #4]
    3268:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    m_status = 0;
    326c:	f880 c000 	strb.w	ip, [r0]
    3270:	f880 c210 	strb.w	ip, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    3274:	6082      	str	r2, [r0, #8]
    3276:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
  if (part) {
    327a:	b1e5      	cbz	r5, 32b6 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    327c:	2d04      	cmp	r5, #4
    327e:	d901      	bls.n	3284 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    3280:	2000      	movs	r0, #0
}
    3282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3284:	f500 7704 	add.w	r7, r0, #528	; 0x210
    3288:	4662      	mov	r2, ip
    328a:	4661      	mov	r1, ip
    328c:	4638      	mov	r0, r7
    328e:	f003 ff9b 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    3292:	2800      	cmp	r0, #0
    3294:	d0f4      	beq.n	3280 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    MbrPart_t* mp = mbr->part + part - 1;
    3296:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    329a:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    329e:	442b      	add	r3, r5
    32a0:	0119      	lsls	r1, r3, #4
    32a2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    32a6:	791a      	ldrb	r2, [r3, #4]
    32a8:	2a00      	cmp	r2, #0
    32aa:	d0e9      	beq.n	3280 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    32ac:	5c42      	ldrb	r2, [r0, r1]
    32ae:	0652      	lsls	r2, r2, #25
    32b0:	d1e6      	bne.n	3280 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  return *reinterpret_cast<const uint32_t*>(src);
    32b2:	689e      	ldr	r6, [r3, #8]
    32b4:	e002      	b.n	32bc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    32b6:	461e      	mov	r6, r3
    32b8:	f500 7704 	add.w	r7, r0, #528	; 0x210
    32bc:	2200      	movs	r2, #0
    32be:	4631      	mov	r1, r6
    32c0:	4638      	mov	r0, r7
    32c2:	f003 ff81 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    32c6:	4605      	mov	r5, r0
    32c8:	2800      	cmp	r0, #0
    32ca:	d0d9      	beq.n	3280 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    32cc:	2205      	movs	r2, #5
    32ce:	491a      	ldr	r1, [pc, #104]	; (3338 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe8>)
    32d0:	3003      	adds	r0, #3
    32d2:	f008 fc25 	bl	bb20 <strncmp>
    32d6:	2800      	cmp	r0, #0
    32d8:	d1d2      	bne.n	3280 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    32da:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    32de:	2b09      	cmp	r3, #9
    32e0:	d1ce      	bne.n	3280 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    32e2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  bitmapFind(0, 1);
    32e4:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    32e6:	4433      	add	r3, r6
    32e8:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    32ec:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    32ee:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    32f2:	6dab      	ldr	r3, [r5, #88]	; 0x58
    32f4:	4433      	add	r3, r6
    32f6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    32fa:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    32fc:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    3300:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3302:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3306:	f895 206d 	ldrb.w	r2, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    330a:	2501      	movs	r5, #1
  m_bitmapStart = 0;
    330c:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    3310:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3312:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3316:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    331a:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    331e:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3320:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    3324:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    3328:	462a      	mov	r2, r5
    332a:	f7ff fdb5 	bl	2e98 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    332e:	2340      	movs	r3, #64	; 0x40
  return true;
    3330:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    3332:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    3336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3338:	2000058c 	.word	0x2000058c

0000333c <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    333c:	b510      	push	{r4, lr}
    333e:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    3340:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    3344:	f7ff fe5e 	bl	3004 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3348:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    334c:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    334e:	b2db      	uxtb	r3, r3
}
    3350:	4098      	lsls	r0, r3
    3352:	bd10      	pop	{r4, pc}

00003354 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    3354:	b570      	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    3356:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    335a:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    335c:	2300      	movs	r3, #0
    335e:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    3360:	4668      	mov	r0, sp
    3362:	4621      	mov	r1, r4
    3364:	930c      	str	r3, [sp, #48]	; 0x30
    3366:	f7ff f8f7 	bl	2558 <ExFatFile::open(ExFatFile*, char const*, int)>
    336a:	4605      	mov	r5, r0
    336c:	b1d8      	cbz	r0, 33a6 <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    336e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3372:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    3376:	d019      	beq.n	33ac <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    3378:	46ee      	mov	lr, sp
    337a:	46a4      	mov	ip, r4
    337c:	ae0c      	add	r6, sp, #48	; 0x30
    337e:	4674      	mov	r4, lr
    3380:	f10c 0c10 	add.w	ip, ip, #16
    3384:	f10e 0e10 	add.w	lr, lr, #16
    3388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    338a:	42b4      	cmp	r4, r6
    338c:	f84c 0c10 	str.w	r0, [ip, #-16]
    3390:	f84c 1c0c 	str.w	r1, [ip, #-12]
    3394:	f84c 2c08 	str.w	r2, [ip, #-8]
    3398:	f84c 3c04 	str.w	r3, [ip, #-4]
    339c:	d1ef      	bne.n	337e <ExFatVolume::chdir(char const*)+0x2a>
    339e:	f8de 0000 	ldr.w	r0, [lr]
    33a2:	f8cc 0000 	str.w	r0, [ip]
  return true;

fail:
  return false;
}
    33a6:	4628      	mov	r0, r5
    33a8:	b00e      	add	sp, #56	; 0x38
    33aa:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    33ac:	461d      	mov	r5, r3
}
    33ae:	4628      	mov	r0, r5
    33b0:	b00e      	add	sp, #56	; 0x38
    33b2:	bd70      	pop	{r4, r5, r6, pc}

000033b4 <FatFile::sync() [clone .part.0]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    33b4:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    33b6:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    33ba:	b082      	sub	sp, #8
    33bc:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    33be:	2b00      	cmp	r3, #0
    33c0:	db0d      	blt.n	33de <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    33c2:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    33c4:	f105 0024 	add.w	r0, r5, #36	; 0x24
    33c8:	f003 fed2 	bl	7170 <FsCache::sync()>
    33cc:	2800      	cmp	r0, #0
    33ce:	d13f      	bne.n	3450 <FatFile::sync() [clone .part.0]+0x9c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    33d0:	7863      	ldrb	r3, [r4, #1]
  return false;
    33d2:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    33d4:	f043 0301 	orr.w	r3, r3, #1
    33d8:	7063      	strb	r3, [r4, #1]
}
    33da:	b002      	add	sp, #8
    33dc:	bd70      	pop	{r4, r5, r6, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    33de:	6880      	ldr	r0, [r0, #8]
    33e0:	2201      	movs	r2, #1
    33e2:	69a1      	ldr	r1, [r4, #24]
    33e4:	3024      	adds	r0, #36	; 0x24
    33e6:	f003 feef 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    33ea:	2800      	cmp	r0, #0
    33ec:	d0f0      	beq.n	33d0 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    33ee:	88a5      	ldrh	r5, [r4, #4]
    33f0:	f005 050f 	and.w	r5, r5, #15
    33f4:	016b      	lsls	r3, r5, #5
    33f6:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    33fa:	5cc3      	ldrb	r3, [r0, r3]
    33fc:	2be5      	cmp	r3, #229	; 0xe5
    33fe:	d0e7      	beq.n	33d0 <FatFile::sync() [clone .part.0]+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    3400:	7823      	ldrb	r3, [r4, #0]
    3402:	f003 0337 	and.w	r3, r3, #55	; 0x37
    3406:	72eb      	strb	r3, [r5, #11]
    if (isFile()) {
    3408:	7823      	ldrb	r3, [r4, #0]
    340a:	071b      	lsls	r3, r3, #28
    340c:	d501      	bpl.n	3412 <FatFile::sync() [clone .part.0]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    340e:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    3410:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    3412:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    3414:	4915      	ldr	r1, [pc, #84]	; (346c <FatFile::sync() [clone .part.0]+0xb8>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    3416:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    3418:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    341a:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    341c:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    341e:	b166      	cbz	r6, 343a <FatFile::sync() [clone .part.0]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    3420:	f10d 0203 	add.w	r2, sp, #3
    3424:	f10d 0106 	add.w	r1, sp, #6
    3428:	a801      	add	r0, sp, #4
    342a:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    342c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3430:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3434:	832b      	strh	r3, [r5, #24]
    3436:	826b      	strh	r3, [r5, #18]
    3438:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    343a:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    343c:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    343e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3442:	f105 0024 	add.w	r0, r5, #36	; 0x24
    3446:	70a3      	strb	r3, [r4, #2]
    3448:	f003 fe92 	bl	7170 <FsCache::sync()>
    344c:	2800      	cmp	r0, #0
    344e:	d0bf      	beq.n	33d0 <FatFile::sync() [clone .part.0]+0x1c>
    3450:	f505 700d 	add.w	r0, r5, #564	; 0x234
    3454:	f003 fe8c 	bl	7170 <FsCache::sync()>
    3458:	2800      	cmp	r0, #0
    345a:	d0b9      	beq.n	33d0 <FatFile::sync() [clone .part.0]+0x1c>
    345c:	6828      	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    345e:	6803      	ldr	r3, [r0, #0]
    3460:	69db      	ldr	r3, [r3, #28]
    3462:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3464:	2800      	cmp	r0, #0
    3466:	d0b3      	beq.n	33d0 <FatFile::sync() [clone .part.0]+0x1c>
    3468:	e7b7      	b.n	33da <FatFile::sync() [clone .part.0]+0x26>
    346a:	bf00      	nop
    346c:	2002886c 	.word	0x2002886c

00003470 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    3470:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    3472:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    3474:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    3478:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    347a:	6880      	ldr	r0, [r0, #8]
    347c:	4629      	mov	r1, r5
    347e:	f001 f941 	bl	4704 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    3482:	b150      	cbz	r0, 349a <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    3484:	b155      	cbz	r5, 349c <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    3486:	6923      	ldr	r3, [r4, #16]
    3488:	3501      	adds	r5, #1
    348a:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    348c:	78a3      	ldrb	r3, [r4, #2]
    348e:	bf18      	it	ne
    3490:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    3494:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3498:	70a3      	strb	r3, [r4, #2]
}
    349a:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    349c:	78a3      	ldrb	r3, [r4, #2]
    349e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    34a2:	e7f7      	b.n	3494 <FatFile::addCluster()+0x24>

000034a4 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    34a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    34a6:	7804      	ldrb	r4, [r0, #0]
    34a8:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    34ac:	d104      	bne.n	34b8 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL * 4095) {
    34ae:	4b1a      	ldr	r3, [pc, #104]	; (3518 <FatFile::addDirCluster()+0x74>)
    34b0:	4605      	mov	r5, r0
    34b2:	6942      	ldr	r2, [r0, #20]
    34b4:	429a      	cmp	r2, r3
    34b6:	d302      	bcc.n	34be <FatFile::addDirCluster()+0x1a>
  return false;
    34b8:	2700      	movs	r7, #0
}
    34ba:	4638      	mov	r0, r7
    34bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    34be:	f7ff ffd7 	bl	3470 <FatFile::addCluster()>
    34c2:	4607      	mov	r7, r0
    34c4:	2800      	cmp	r0, #0
    34c6:	d0f7      	beq.n	34b8 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    34c8:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    34ca:	692e      	ldr	r6, [r5, #16]
    34cc:	7982      	ldrb	r2, [r0, #6]
    34ce:	3e02      	subs	r6, #2
    34d0:	6941      	ldr	r1, [r0, #20]
    34d2:	4096      	lsls	r6, r2
    34d4:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    34d6:	7901      	ldrb	r1, [r0, #4]
    34d8:	b1a9      	cbz	r1, 3506 <FatFile::addDirCluster()+0x62>
    34da:	4621      	mov	r1, r4
    34dc:	e006      	b.n	34ec <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    34de:	f008 facd 	bl	ba7c <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    34e2:	68a8      	ldr	r0, [r5, #8]
    34e4:	b2e1      	uxtb	r1, r4
    34e6:	7902      	ldrb	r2, [r0, #4]
    34e8:	428a      	cmp	r2, r1
    34ea:	d90b      	bls.n	3504 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    34ec:	4431      	add	r1, r6
    34ee:	2205      	movs	r2, #5
    34f0:	3024      	adds	r0, #36	; 0x24
    34f2:	3401      	adds	r4, #1
    34f4:	f003 fe68 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    34f8:	f44f 7200 	mov.w	r2, #512	; 0x200
    34fc:	2100      	movs	r1, #0
    if (!pc) {
    34fe:	2800      	cmp	r0, #0
    3500:	d1ed      	bne.n	34de <FatFile::addDirCluster()+0x3a>
    3502:	e7d9      	b.n	34b8 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    3504:	7982      	ldrb	r2, [r0, #6]
    3506:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    350a:	6969      	ldr	r1, [r5, #20]
}
    350c:	4638      	mov	r0, r7
    350e:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    3510:	fa11 f383 	uxtah	r3, r1, r3
    3514:	616b      	str	r3, [r5, #20]
}
    3516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3518:	001ffe00 	.word	0x001ffe00

0000351c <FatFile::close()>:
bool FatFile::close() {
    351c:	b510      	push	{r4, lr}
  if (!isOpen()) {
    351e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    3520:	4604      	mov	r4, r0
  if (!isOpen()) {
    3522:	b12b      	cbz	r3, 3530 <FatFile::close()+0x14>
    3524:	f7ff ff46 	bl	33b4 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    3528:	2300      	movs	r3, #0
    352a:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    352c:	70a3      	strb	r3, [r4, #2]
}
    352e:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    3530:	2300      	movs	r3, #0
    return true;
    3532:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    3534:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3536:	70a3      	strb	r3, [r4, #2]
}
    3538:	bd10      	pop	{r4, pc}
    353a:	bf00      	nop

0000353c <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    353c:	780b      	ldrb	r3, [r1, #0]
    353e:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    3542:	d101      	bne.n	3548 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    3544:	2000      	movs	r0, #0
    3546:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    3548:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    354a:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    354e:	b089      	sub	sp, #36	; 0x24
    3550:	460d      	mov	r5, r1
    3552:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    3554:	f000 fe70 	bl	4238 <FatFile::open(FatFile*, FatLfn_t*, int)>
    3558:	b138      	cbz	r0, 356a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    355a:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    355c:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    355e:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    3560:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    3562:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    3564:	f7ff ff9e 	bl	34a4 <FatFile::addDirCluster()>
    3568:	b910      	cbnz	r0, 3570 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    356a:	2000      	movs	r0, #0
    356c:	b009      	add	sp, #36	; 0x24
    356e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    3570:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    3572:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    3574:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    3576:	b16b      	cbz	r3, 3594 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    3578:	6963      	ldr	r3, [r4, #20]
    357a:	b133      	cbz	r3, 358a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    357c:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    357e:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3580:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    3584:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3588:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    358a:	4620      	mov	r0, r4
    358c:	f7ff ff12 	bl	33b4 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    3590:	2800      	cmp	r0, #0
    3592:	d0ea      	beq.n	356a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    return m_cache.prepare(sector, options);
    3594:	68a0      	ldr	r0, [r4, #8]
    3596:	2201      	movs	r2, #1
    3598:	69a1      	ldr	r1, [r4, #24]
    359a:	3024      	adds	r0, #36	; 0x24
    359c:	f003 fe14 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    35a0:	2800      	cmp	r0, #0
    35a2:	d0e2      	beq.n	356a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    35a4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FS_ATTRIB_DIRECTORY;
    35a8:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    35aa:	f00c 0c0f 	and.w	ip, ip, #15
    35ae:	ea4f 134c 	mov.w	r3, ip, lsl #5
    35b2:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FS_ATTRIB_DIRECTORY;
    35b6:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    35ba:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    35bc:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    35be:	6a23      	ldr	r3, [r4, #32]
    35c0:	f897 e006 	ldrb.w	lr, [r7, #6]
    35c4:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    35c6:	f8dc 1004 	ldr.w	r1, [ip, #4]
    35ca:	f8dc 2008 	ldr.w	r2, [ip, #8]
    35ce:	f8dc 300c 	ldr.w	r3, [ip, #12]
    35d2:	fa06 f60e 	lsl.w	r6, r6, lr
    35d6:	46ee      	mov	lr, sp
    35d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    35dc:	f8dc 0010 	ldr.w	r0, [ip, #16]
    35e0:	f8dc 1014 	ldr.w	r1, [ip, #20]
    35e4:	f8dc 2018 	ldr.w	r2, [ip, #24]
    35e8:	f8dc 301c 	ldr.w	r3, [ip, #28]
    35ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    35f0:	697b      	ldr	r3, [r7, #20]
    35f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
    35f6:	2201      	movs	r2, #1
    35f8:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    35fa:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    35fe:	f8cd 3001 	str.w	r3, [sp, #1]
    3602:	f8cd 3005 	str.w	r3, [sp, #5]
    3606:	f8ad 3009 	strh.w	r3, [sp, #9]
    360a:	f003 fddd 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    360e:	4684      	mov	ip, r0
    3610:	2800      	cmp	r0, #0
    3612:	d0aa      	beq.n	356a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    3614:	272e      	movs	r7, #46	; 0x2e
    3616:	46ee      	mov	lr, sp
    3618:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    361c:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    361e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3622:	f8cc 0000 	str.w	r0, [ip]
    3626:	f8cc 1004 	str.w	r1, [ip, #4]
    362a:	f8cc 2008 	str.w	r2, [ip, #8]
    362e:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    3632:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    3636:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    363a:	f8cc 0010 	str.w	r0, [ip, #16]
    363e:	f8cc 1014 	str.w	r1, [ip, #20]
    3642:	f8cc 2018 	str.w	r2, [ip, #24]
    3646:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    364a:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    364c:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    364e:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    3652:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    3656:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3658:	f8cc 0020 	str.w	r0, [ip, #32]
    365c:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    3660:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    3664:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    3668:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    366a:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    366e:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    3672:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    3676:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    367a:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    367c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3680:	f003 fd76 	bl	7170 <FsCache::sync()>
    3684:	2800      	cmp	r0, #0
    3686:	f43f af70 	beq.w	356a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    368a:	f504 700d 	add.w	r0, r4, #564	; 0x234
    368e:	f003 fd6f 	bl	7170 <FsCache::sync()>
    3692:	2800      	cmp	r0, #0
    3694:	f43f af69 	beq.w	356a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    3698:	6820      	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    369a:	6803      	ldr	r3, [r0, #0]
    369c:	69db      	ldr	r3, [r3, #28]
}
    369e:	b009      	add	sp, #36	; 0x24
    36a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    36a4:	4718      	bx	r3
    36a6:	bf00      	nop

000036a8 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    36a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36ac:	2600      	movs	r6, #0
    36ae:	b094      	sub	sp, #80	; 0x50
    36b0:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    36b2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    36b4:	9201      	str	r2, [sp, #4]
    36b6:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    36b8:	2b00      	cmp	r3, #0
    36ba:	d141      	bne.n	3740 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    36bc:	780b      	ldrb	r3, [r1, #0]
    36be:	460d      	mov	r5, r1
    36c0:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    36c4:	d03c      	beq.n	3740 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
  if (isDirSeparator(*path)) {
    36c6:	7813      	ldrb	r3, [r2, #0]
    36c8:	4604      	mov	r4, r0
    36ca:	4616      	mov	r6, r2
    36cc:	2b2f      	cmp	r3, #47	; 0x2f
    36ce:	d03b      	beq.n	3748 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!open(parent, &fname, O_RDONLY)) {
    36d0:	2700      	movs	r7, #0
    36d2:	e028      	b.n	3726 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
    if (!*path) {
    36d4:	9e01      	ldr	r6, [sp, #4]
    36d6:	7836      	ldrb	r6, [r6, #0]
    36d8:	2e00      	cmp	r6, #0
    36da:	d04e      	beq.n	377a <FatFile::mkdir(FatFile*, char const*, bool)+0xd2>
    if (!open(parent, &fname, O_RDONLY)) {
    36dc:	f000 fdac 	bl	4238 <FatFile::open(FatFile*, FatLfn_t*, int)>
    36e0:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    36e2:	aa03      	add	r2, sp, #12
    36e4:	4629      	mov	r1, r5
    36e6:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    36e8:	b92b      	cbnz	r3, 36f6 <FatFile::mkdir(FatFile*, char const*, bool)+0x4e>
      if (!pFlag || !mkdir(parent, &fname)) {
    36ea:	f1b8 0f00 	cmp.w	r8, #0
    36ee:	d027      	beq.n	3740 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    36f0:	f7ff ff24 	bl	353c <FatFile::mkdir(FatFile*, FatLfn_t*)>
    36f4:	b320      	cbz	r0, 3740 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    tmpDir = *this;
    36f6:	46a6      	mov	lr, r4
    36f8:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    36fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3700:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3704:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3708:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    370c:	f8de 5000 	ldr.w	r5, [lr]
    3710:	4620      	mov	r0, r4
  if (!isOpen()) {
    3712:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    3714:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    3718:	b10b      	cbz	r3, 371e <FatFile::mkdir(FatFile*, char const*, bool)+0x76>
    371a:	f7ff fe4b 	bl	33b4 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    371e:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    3720:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    3722:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    3724:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    3726:	4631      	mov	r1, r6
    3728:	ab01      	add	r3, sp, #4
    372a:	aa03      	add	r2, sp, #12
    372c:	4620      	mov	r0, r4
    372e:	f000 fed3 	bl	44d8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    3732:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    3734:	aa03      	add	r2, sp, #12
    3736:	4629      	mov	r1, r5
    3738:	2300      	movs	r3, #0
    373a:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    373c:	2e00      	cmp	r6, #0
    373e:	d1c9      	bne.n	36d4 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  switch (vol->fatType()) {
    3740:	2000      	movs	r0, #0
}
    3742:	b014      	add	sp, #80	; 0x50
    3744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    3748:	3601      	adds	r6, #1
    374a:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    374c:	7833      	ldrb	r3, [r6, #0]
    374e:	2b2f      	cmp	r3, #47	; 0x2f
    3750:	d0fa      	beq.n	3748 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!tmpDir.openRoot(parent->m_vol)) {
    3752:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    3754:	2224      	movs	r2, #36	; 0x24
    3756:	2100      	movs	r1, #0
    3758:	a80b      	add	r0, sp, #44	; 0x2c
    375a:	f008 f98f 	bl	ba7c <memset>
  m_vol = vol;
    375e:	950d      	str	r5, [sp, #52]	; 0x34
  uint8_t fatType() const { return m_fatType; }
    3760:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    3762:	2b10      	cmp	r3, #16
    3764:	d00f      	beq.n	3786 <FatFile::mkdir(FatFile*, char const*, bool)+0xde>
    3766:	2b20      	cmp	r3, #32
    3768:	d1ea      	bne.n	3740 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    376a:	2380      	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    376c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    3770:	2301      	movs	r3, #1
    parent = &tmpDir;
    3772:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    3774:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    3778:	e7aa      	b.n	36d0 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
  return mkdir(parent, &fname);
    377a:	aa03      	add	r2, sp, #12
    377c:	f7ff fede 	bl	353c <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    3780:	b014      	add	sp, #80	; 0x50
    3782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    3786:	2340      	movs	r3, #64	; 0x40
    3788:	e7f0      	b.n	376c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    378a:	bf00      	nop

0000378c <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3790:	2500      	movs	r5, #0
    3792:	b094      	sub	sp, #80	; 0x50
    3794:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    3796:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    3798:	9201      	str	r2, [sp, #4]
    379a:	950b      	str	r5, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
    379c:	2b00      	cmp	r3, #0
    379e:	d137      	bne.n	3810 <FatFile::open(FatFile*, char const*, int)+0x84>
    37a0:	780b      	ldrb	r3, [r1, #0]
    37a2:	460e      	mov	r6, r1
    37a4:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    37a8:	d032      	beq.n	3810 <FatFile::open(FatFile*, char const*, int)+0x84>
  if (isDirSeparator(*path)) {
    37aa:	7813      	ldrb	r3, [r2, #0]
    37ac:	4604      	mov	r4, r0
    37ae:	4615      	mov	r5, r2
    37b0:	2b2f      	cmp	r3, #47	; 0x2f
    37b2:	d031      	beq.n	3818 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
    37b4:	2700      	movs	r7, #0
    37b6:	e01e      	b.n	37f6 <FatFile::open(FatFile*, char const*, int)+0x6a>
    if (*path == 0) {
    37b8:	9d01      	ldr	r5, [sp, #4]
    37ba:	782d      	ldrb	r5, [r5, #0]
    37bc:	2d00      	cmp	r5, #0
    37be:	d042      	beq.n	3846 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    37c0:	f000 fd3a 	bl	4238 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    37c4:	46a6      	mov	lr, r4
    37c6:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    if (!open(dirFile, &fname, O_RDONLY)) {
    37ca:	b308      	cbz	r0, 3810 <FatFile::open(FatFile*, char const*, int)+0x84>
    dirFile = &tmpDir;
    37cc:	4666      	mov	r6, ip
  if (!isOpen()) {
    37ce:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    37d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    37d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    37d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    37dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    37e0:	f8de 3000 	ldr.w	r3, [lr]
    37e4:	4620      	mov	r0, r4
    37e6:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    37ea:	b10d      	cbz	r5, 37f0 <FatFile::open(FatFile*, char const*, int)+0x64>
    37ec:	f7ff fde2 	bl	33b4 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    37f0:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    37f2:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    37f4:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    37f6:	4629      	mov	r1, r5
    37f8:	ab01      	add	r3, sp, #4
    37fa:	aa03      	add	r2, sp, #12
    37fc:	4620      	mov	r0, r4
    37fe:	f000 fe6b 	bl	44d8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    3802:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    3804:	aa03      	add	r2, sp, #12
    3806:	4631      	mov	r1, r6
    3808:	2300      	movs	r3, #0
    380a:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    380c:	2d00      	cmp	r5, #0
    380e:	d1d3      	bne.n	37b8 <FatFile::open(FatFile*, char const*, int)+0x2c>
  return false;
    3810:	2000      	movs	r0, #0
}
    3812:	b014      	add	sp, #80	; 0x50
    3814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    3818:	3501      	adds	r5, #1
    381a:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    381c:	7829      	ldrb	r1, [r5, #0]
    381e:	292f      	cmp	r1, #47	; 0x2f
    3820:	d0fa      	beq.n	3818 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (*path == 0) {
    3822:	b9b9      	cbnz	r1, 3854 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    3824:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    3826:	2224      	movs	r2, #36	; 0x24
    3828:	4620      	mov	r0, r4
    382a:	f008 f927 	bl	ba7c <memset>
  m_vol = vol;
    382e:	60a5      	str	r5, [r4, #8]
    3830:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    3832:	2b10      	cmp	r3, #16
    3834:	d024      	beq.n	3880 <FatFile::open(FatFile*, char const*, int)+0xf4>
    3836:	2b20      	cmp	r3, #32
    3838:	d1ea      	bne.n	3810 <FatFile::open(FatFile*, char const*, int)+0x84>
    383a:	2280      	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    383c:	2301      	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    383e:	7022      	strb	r2, [r4, #0]
  return true;
    3840:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    3842:	70a3      	strb	r3, [r4, #2]
  return true;
    3844:	e7e5      	b.n	3812 <FatFile::open(FatFile*, char const*, int)+0x86>
  return open(dirFile, &fname, oflag);
    3846:	4643      	mov	r3, r8
    3848:	aa03      	add	r2, sp, #12
    384a:	f000 fcf5 	bl	4238 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    384e:	b014      	add	sp, #80	; 0x50
    3850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    3854:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    3856:	2224      	movs	r2, #36	; 0x24
    3858:	2100      	movs	r1, #0
    385a:	a80b      	add	r0, sp, #44	; 0x2c
    385c:	f008 f90e 	bl	ba7c <memset>
  m_vol = vol;
    3860:	960d      	str	r6, [sp, #52]	; 0x34
    3862:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    3864:	2b10      	cmp	r3, #16
    3866:	d009      	beq.n	387c <FatFile::open(FatFile*, char const*, int)+0xf0>
    3868:	2b20      	cmp	r3, #32
    386a:	d1d1      	bne.n	3810 <FatFile::open(FatFile*, char const*, int)+0x84>
    386c:	2380      	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    386e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    3872:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    3874:	ae0b      	add	r6, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    3876:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    387a:	e79b      	b.n	37b4 <FatFile::open(FatFile*, char const*, int)+0x28>
  switch (vol->fatType()) {
    387c:	2340      	movs	r3, #64	; 0x40
    387e:	e7f6      	b.n	386e <FatFile::open(FatFile*, char const*, int)+0xe2>
    3880:	2240      	movs	r2, #64	; 0x40
    3882:	e7db      	b.n	383c <FatFile::open(FatFile*, char const*, int)+0xb0>

00003884 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    3884:	b119      	cbz	r1, 388e <FatFile::open(FatVolume*, char const*, int)+0xa>
    3886:	f201 4144 	addw	r1, r1, #1092	; 0x444
    388a:	f7ff bf7f 	b.w	378c <FatFile::open(FatFile*, char const*, int)>
}
    388e:	4608      	mov	r0, r1
    3890:	4770      	bx	lr
    3892:	bf00      	nop

00003894 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    3894:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    3896:	7805      	ldrb	r5, [r0, #0]
    3898:	b10d      	cbz	r5, 389e <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    389a:	2000      	movs	r0, #0
}
    389c:	bd70      	pop	{r4, r5, r6, pc}
    389e:	460e      	mov	r6, r1
    38a0:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    38a2:	2224      	movs	r2, #36	; 0x24
    38a4:	4629      	mov	r1, r5
    38a6:	f008 f8e9 	bl	ba7c <memset>
  m_vol = vol;
    38aa:	60a6      	str	r6, [r4, #8]
    38ac:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    38ae:	2b10      	cmp	r3, #16
    38b0:	d009      	beq.n	38c6 <FatFile::openRoot(FatVolume*)+0x32>
    38b2:	2b20      	cmp	r3, #32
    38b4:	d105      	bne.n	38c2 <FatFile::openRoot(FatVolume*)+0x2e>
    38b6:	2280      	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    38b8:	2301      	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    38ba:	7022      	strb	r2, [r4, #0]
  return true;
    38bc:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    38be:	70a3      	strb	r3, [r4, #2]
}
    38c0:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    38c2:	4628      	mov	r0, r5
}
    38c4:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    38c6:	2240      	movs	r2, #64	; 0x40
    38c8:	e7f6      	b.n	38b8 <FatFile::openRoot(FatVolume*)+0x24>
    38ca:	bf00      	nop

000038cc <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    38cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38d0:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const { return m_lfnOrd; }
  /** \return True if this is an open file/directory. */
  bool isOpen() const { return m_attributes; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    38d4:	7883      	ldrb	r3, [r0, #2]
    38d6:	b083      	sub	sp, #12
    38d8:	4605      	mov	r5, r0
  if (!isReadable()) {
    38da:	07df      	lsls	r7, r3, #31
    38dc:	f140 808c 	bpl.w	39f8 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
    38e0:	4688      	mov	r8, r1
    38e2:	7801      	ldrb	r1, [r0, #0]
    38e4:	4692      	mov	sl, r2
  if (isFile()) {
    38e6:	070e      	lsls	r6, r1, #28
    38e8:	f100 8091 	bmi.w	3a0e <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    38ec:	064c      	lsls	r4, r1, #25
    38ee:	d508      	bpl.n	3902 <FatFile::read(void*, unsigned int)+0x36>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    38f0:	6883      	ldr	r3, [r0, #8]
    38f2:	891a      	ldrh	r2, [r3, #8]
    38f4:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    38f6:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    38fa:	b29b      	uxth	r3, r3
    38fc:	459a      	cmp	sl, r3
    38fe:	bf28      	it	cs
    3900:	469a      	movcs	sl, r3
  while (toRead) {
    3902:	f1ba 0f00 	cmp.w	sl, #0
    3906:	f000 80af 	beq.w	3a68 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    390a:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    390c:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    3910:	0648      	lsls	r0, r1, #25
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3912:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    3914:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3918:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    391c:	68af      	ldr	r7, [r5, #8]
    391e:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    3922:	d53d      	bpl.n	39a0 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart() +
    3924:	6a39      	ldr	r1, [r7, #32]
    3926:	eb01 2152 	add.w	r1, r1, r2, lsr #9
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    392a:	f1bb 0f00 	cmp.w	fp, #0
    392e:	d151      	bne.n	39d4 <FatFile::read(void*, unsigned int)+0x108>
    3930:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3934:	d34e      	bcc.n	39d4 <FatFile::read(void*, unsigned int)+0x108>
  uint32_t sector() { return m_sector; }
    3936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3938:	4291      	cmp	r1, r2
    393a:	d04b      	beq.n	39d4 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    393c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    3940:	f0c0 8082 	bcc.w	3a48 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    3944:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3946:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    3948:	0640      	lsls	r0, r0, #25
    394a:	d405      	bmi.n	3958 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    394c:	7938      	ldrb	r0, [r7, #4]
    394e:	eba0 0009 	sub.w	r0, r0, r9
    3952:	4283      	cmp	r3, r0
    3954:	bf28      	it	cs
    3956:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    3958:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    395a:	ea4f 2443 	mov.w	r4, r3, lsl #9
    395e:	d80c      	bhi.n	397a <FatFile::read(void*, unsigned int)+0xae>
    3960:	18c8      	adds	r0, r1, r3
    3962:	4282      	cmp	r2, r0
    3964:	d209      	bcs.n	397a <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    3966:	f107 0024 	add.w	r0, r7, #36	; 0x24
    396a:	e9cd 1300 	strd	r1, r3, [sp]
    396e:	f003 fbff 	bl	7170 <FsCache::sync()>
    3972:	e9dd 1300 	ldrd	r1, r3, [sp]
    3976:	2800      	cmp	r0, #0
    3978:	d03e      	beq.n	39f8 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    397a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    397c:	6802      	ldr	r2, [r0, #0]
    397e:	6957      	ldr	r7, [r2, #20]
    3980:	4642      	mov	r2, r8
    3982:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3984:	2800      	cmp	r0, #0
    3986:	d037      	beq.n	39f8 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    3988:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    398a:	1b36      	subs	r6, r6, r4
    dst += n;
    398c:	44a0      	add	r8, r4
    m_curPosition += n;
    398e:	4422      	add	r2, r4
    3990:	616a      	str	r2, [r5, #20]
  while (toRead) {
    3992:	d069      	beq.n	3a68 <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const { return m_attributes & FILE_ATTR_ROOT32; }
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
    3994:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    3996:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    399a:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    399c:	0648      	lsls	r0, r1, #25
    399e:	d4c1      	bmi.n	3924 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    39a0:	f897 9005 	ldrb.w	r9, [r7, #5]
    39a4:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    39a8:	f1bb 0f00 	cmp.w	fp, #0
    39ac:	d136      	bne.n	3a1c <FatFile::read(void*, unsigned int)+0x150>
    39ae:	f1b9 0f00 	cmp.w	r9, #0
    39b2:	d133      	bne.n	3a1c <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    39b4:	2a00      	cmp	r2, #0
    39b6:	d133      	bne.n	3a20 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    39b8:	060a      	lsls	r2, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    39ba:	bf4c      	ite	mi
    39bc:	6a3a      	ldrmi	r2, [r7, #32]
    39be:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    39c0:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    39c2:	3a02      	subs	r2, #2
    39c4:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    39c6:	6979      	ldr	r1, [r7, #20]
    39c8:	4082      	lsls	r2, r0
    39ca:	4449      	add	r1, r9
    39cc:	4411      	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    39ce:	f1bb 0f00 	cmp.w	fp, #0
    39d2:	d0ad      	beq.n	3930 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    39d4:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    39d8:	2200      	movs	r2, #0
    39da:	f107 0024 	add.w	r0, r7, #36	; 0x24
    39de:	42b4      	cmp	r4, r6
    39e0:	bf28      	it	cs
    39e2:	4634      	movcs	r4, r6
    39e4:	f003 fbf0 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    39e8:	b130      	cbz	r0, 39f8 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    39ea:	eb00 010b 	add.w	r1, r0, fp
    39ee:	4622      	mov	r2, r4
    39f0:	4640      	mov	r0, r8
    39f2:	f004 fb77 	bl	80e4 <memcpy>
    39f6:	e7c7      	b.n	3988 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    39f8:	786b      	ldrb	r3, [r5, #1]
  return -1;
    39fa:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    39fe:	f043 0302 	orr.w	r3, r3, #2
    3a02:	706b      	strb	r3, [r5, #1]
}
    3a04:	b003      	add	sp, #12
    3a06:	ecbd 8b02 	vpop	{d8}
    3a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3a0e:	69c3      	ldr	r3, [r0, #28]
    3a10:	6942      	ldr	r2, [r0, #20]
    3a12:	1a9b      	subs	r3, r3, r2
    3a14:	459a      	cmp	sl, r3
    3a16:	bf28      	it	cs
    3a18:	469a      	movcs	sl, r3
    3a1a:	e772      	b.n	3902 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    3a1c:	692a      	ldr	r2, [r5, #16]
    3a1e:	e7d0      	b.n	39c2 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    3a20:	070b      	lsls	r3, r1, #28
    3a22:	d505      	bpl.n	3a30 <FatFile::read(void*, unsigned int)+0x164>
    3a24:	78aa      	ldrb	r2, [r5, #2]
    3a26:	0654      	lsls	r4, r2, #25
    3a28:	d502      	bpl.n	3a30 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    3a2a:	692a      	ldr	r2, [r5, #16]
    3a2c:	3201      	adds	r2, #1
    3a2e:	e7c7      	b.n	39c0 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3a30:	ee18 2a10 	vmov	r2, s16
    3a34:	4638      	mov	r0, r7
    3a36:	6929      	ldr	r1, [r5, #16]
    3a38:	f000 fe1e 	bl	4678 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3a3c:	2800      	cmp	r0, #0
    3a3e:	dbdb      	blt.n	39f8 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    3a40:	d00c      	beq.n	3a5c <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3a42:	68af      	ldr	r7, [r5, #8]
    3a44:	692a      	ldr	r2, [r5, #16]
    3a46:	e7bc      	b.n	39c2 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    3a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3a4a:	4642      	mov	r2, r8
    3a4c:	6803      	ldr	r3, [r0, #0]
    3a4e:	691b      	ldr	r3, [r3, #16]
    3a50:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3a52:	2800      	cmp	r0, #0
    3a54:	d0d0      	beq.n	39f8 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    3a56:	f44f 7400 	mov.w	r4, #512	; 0x200
    3a5a:	e795      	b.n	3988 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    3a5c:	782b      	ldrb	r3, [r5, #0]
    3a5e:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    3a62:	d0c9      	beq.n	39f8 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    3a64:	ebaa 0a06 	sub.w	sl, sl, r6
    3a68:	4650      	mov	r0, sl
}
    3a6a:	b003      	add	sp, #12
    3a6c:	ecbd 8b02 	vpop	{d8}
    3a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003a74 <FatFile::peek()>:
int FatFile::peek() {
    3a74:	b570      	push	{r4, r5, r6, lr}
    3a76:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3a78:	2201      	movs	r2, #1
    3a7a:	4604      	mov	r4, r0
    3a7c:	f10d 0107 	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    3a80:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    3a84:	f7ff ff22 	bl	38cc <FatFile::read(void*, unsigned int)>
    3a88:	2801      	cmp	r0, #1
    3a8a:	bf0c      	ite	eq
    3a8c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    3a90:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    3a94:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    3a98:	b002      	add	sp, #8
    3a9a:	bd70      	pop	{r4, r5, r6, pc}

00003a9c <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3a9c:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    3a9e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    3aa2:	b530      	push	{r4, r5, lr}
    3aa4:	4604      	mov	r4, r0
    3aa6:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3aa8:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    3aac:	d009      	beq.n	3ac2 <FatFile::readDirCache(bool)+0x26>
    3aae:	2901      	cmp	r1, #1
    3ab0:	d107      	bne.n	3ac2 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    3ab2:	3320      	adds	r3, #32
    3ab4:	6143      	str	r3, [r0, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    3ab6:	68a0      	ldr	r0, [r4, #8]
    3ab8:	3034      	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    3aba:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    3abe:	b003      	add	sp, #12
    3ac0:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    3ac2:	2201      	movs	r2, #1
    3ac4:	f10d 0107 	add.w	r1, sp, #7
    3ac8:	4620      	mov	r0, r4
    3aca:	f7ff feff 	bl	38cc <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    3ace:	b240      	sxtb	r0, r0
    3ad0:	2801      	cmp	r0, #1
    3ad2:	d103      	bne.n	3adc <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    3ad4:	6963      	ldr	r3, [r4, #20]
    3ad6:	331f      	adds	r3, #31
    3ad8:	6163      	str	r3, [r4, #20]
    3ada:	e7ec      	b.n	3ab6 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    3adc:	2000      	movs	r0, #0
    3ade:	e7ee      	b.n	3abe <FatFile::readDirCache(bool)+0x22>

00003ae0 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    3ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const { return m_attributes; }
    3ae4:	7803      	ldrb	r3, [r0, #0]
    3ae6:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    3ae8:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    3aea:	2b00      	cmp	r3, #0
    3aec:	d039      	beq.n	3b62 <FatFile::seekSet(unsigned long)+0x82>
    3aee:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    3af0:	6941      	ldr	r1, [r0, #20]
    3af2:	42a9      	cmp	r1, r5
    3af4:	d042      	beq.n	3b7c <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    3af6:	2d00      	cmp	r5, #0
    3af8:	d037      	beq.n	3b6a <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    3afa:	0718      	lsls	r0, r3, #28
    3afc:	d52a      	bpl.n	3b54 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    3afe:	69e2      	ldr	r2, [r4, #28]
    3b00:	42aa      	cmp	r2, r5
    3b02:	d32e      	bcc.n	3b62 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3b04:	f8d4 c008 	ldr.w	ip, [r4, #8]
    3b08:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    3b0a:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    3b0c:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    3b10:	f012 0f40 	tst.w	r2, #64	; 0x40
    3b14:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3b18:	b2c0      	uxtb	r0, r0
    3b1a:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    3b1e:	d130      	bne.n	3b82 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    3b20:	1e4a      	subs	r2, r1, #1
    3b22:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3b24:	b109      	cbz	r1, 3b2a <FatFile::seekSet(unsigned long)+0x4a>
    3b26:	4296      	cmp	r6, r2
    3b28:	d22f      	bcs.n	3b8a <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    3b2a:	061b      	lsls	r3, r3, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    3b2c:	bf4c      	ite	mi
    3b2e:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    3b32:	6a23      	ldrpl	r3, [r4, #32]
    3b34:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3b36:	f104 0810 	add.w	r8, r4, #16
    3b3a:	e006      	b.n	3b4a <FatFile::seekSet(unsigned long)+0x6a>
    3b3c:	6921      	ldr	r1, [r4, #16]
    3b3e:	3e01      	subs	r6, #1
    3b40:	68a0      	ldr	r0, [r4, #8]
    3b42:	f000 fd99 	bl	4678 <FatPartition::fatGet(unsigned long, unsigned long*)>
    3b46:	2800      	cmp	r0, #0
    3b48:	dd0b      	ble.n	3b62 <FatFile::seekSet(unsigned long)+0x82>
    3b4a:	4642      	mov	r2, r8
  while (nNew--) {
    3b4c:	2e00      	cmp	r6, #0
    3b4e:	d1f5      	bne.n	3b3c <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3b50:	78a2      	ldrb	r2, [r4, #2]
    3b52:	e00c      	b.n	3b6e <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    3b54:	065a      	lsls	r2, r3, #25
    3b56:	d5d5      	bpl.n	3b04 <FatFile::seekSet(unsigned long)+0x24>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
    3b58:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    3b5a:	891b      	ldrh	r3, [r3, #8]
    3b5c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    3b60:	d9f6      	bls.n	3b50 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    3b62:	2000      	movs	r0, #0
  m_curCluster = tmp;
    3b64:	6127      	str	r7, [r4, #16]
}
    3b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b6a:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    3b6c:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3b6e:	f022 0220 	bic.w	r2, r2, #32
  return true;
    3b72:	2001      	movs	r0, #1
  m_curPosition = pos;
    3b74:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3b76:	70a2      	strb	r2, [r4, #2]
}
    3b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    3b7c:	2001      	movs	r0, #1
}
    3b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    3b82:	6a23      	ldr	r3, [r4, #32]
    3b84:	4433      	add	r3, r6
    3b86:	6123      	str	r3, [r4, #16]
    goto done;
    3b88:	e7f1      	b.n	3b6e <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    3b8a:	1ab6      	subs	r6, r6, r2
    3b8c:	e7d3      	b.n	3b36 <FatFile::seekSet(unsigned long)+0x56>
    3b8e:	bf00      	nop

00003b90 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    3b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b94:	460e      	mov	r6, r1
    3b96:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    3b98:	2100      	movs	r1, #0
    3b9a:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    3b9c:	4604      	mov	r4, r0
    3b9e:	4698      	mov	r8, r3
    3ba0:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    3ba4:	f007 ff6a 	bl	ba7c <memset>
  m_vol = dirFile->m_vol;
    3ba8:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    3baa:	6a33      	ldr	r3, [r6, #32]
    3bac:	f100 0234 	add.w	r2, r0, #52	; 0x34
  m_dirIndex = dirIndex;
    3bb0:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    3bb2:	f005 050f 	and.w	r5, r5, #15
    3bb6:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    3bba:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFatFile(const DirFat_t* dir) {
  return (dir->attributes & (FS_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFatFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    3bbe:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
    3bc0:	070b      	lsls	r3, r1, #28
    3bc2:	d411      	bmi.n	3be8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    3bc4:	f001 0137 	and.w	r1, r1, #55	; 0x37
    3bc8:	7021      	strb	r1, [r4, #0]
  if (isFatFile(dir)) {
    3bca:	7ad3      	ldrb	r3, [r2, #11]
    3bcc:	f013 0f18 	tst.w	r3, #24
    3bd0:	d102      	bne.n	3bd8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    3bd2:	f041 0108 	orr.w	r1, r1, #8
    3bd6:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    3bd8:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    3bdc:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    3bde:	2b01      	cmp	r3, #1
    3be0:	d03c      	beq.n	3c5c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xcc>
    3be2:	2b02      	cmp	r3, #2
    3be4:	d006      	beq.n	3bf4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    3be6:	b313      	cbz	r3, 3c2e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
  m_attributes = FILE_ATTR_CLOSED;
    3be8:	2300      	movs	r3, #0
  return false;
    3bea:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    3bec:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3bee:	70a3      	strb	r3, [r4, #2]
}
    3bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3bf4:	2303      	movs	r3, #3
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    3bf6:	7821      	ldrb	r1, [r4, #0]
      m_flags = FILE_FLAG_WRITE;
    3bf8:	70a3      	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    3bfa:	06cd      	lsls	r5, r1, #27
    3bfc:	d4f4      	bmi.n	3be8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    3bfe:	07ce      	lsls	r6, r1, #31
    3c00:	d4f2      	bmi.n	3be8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3c02:	f041 0120 	orr.w	r1, r1, #32
  if (oflag & O_TRUNC) {
    3c06:	f418 6f80 	tst.w	r8, #1024	; 0x400
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3c0a:	7021      	strb	r1, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3c0c:	f008 0108 	and.w	r1, r8, #8
    3c10:	ea43 0301 	orr.w	r3, r3, r1
    3c14:	70a3      	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
    3c16:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3c18:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3c1a:	61a1      	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    3c1c:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3c1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    3c22:	d012      	beq.n	3c4a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xba>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3c24:	bb19      	cbnz	r1, 3c6e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xde>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3c26:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3c2a:	70a3      	strb	r3, [r4, #2]
    3c2c:	e010      	b.n	3c50 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
      if (oflag & O_TRUNC) {
    3c2e:	f418 6f80 	tst.w	r8, #1024	; 0x400
    3c32:	d1d9      	bne.n	3be8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3c34:	f008 0308 	and.w	r3, r8, #8
    3c38:	f043 0301 	orr.w	r3, r3, #1
    3c3c:	70a3      	strb	r3, [r4, #2]
    3c3e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3c40:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3c42:	61a1      	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    3c44:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    3c4a:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    3c4c:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    3c4e:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3c50:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    3c54:	d104      	bne.n	3c60 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
  return true;
    3c56:	2001      	movs	r0, #1
}
    3c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3c5c:	2302      	movs	r3, #2
    3c5e:	e7ca      	b.n	3bf6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3c60:	69e1      	ldr	r1, [r4, #28]
    3c62:	4620      	mov	r0, r4
    3c64:	f7ff ff3c 	bl	3ae0 <FatFile::seekSet(unsigned long)>
    3c68:	2800      	cmp	r0, #0
    3c6a:	d1f4      	bne.n	3c56 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>
    3c6c:	e7bc      	b.n	3be8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3c6e:	f000 fd89 	bl	4784 <FatPartition::freeChain(unsigned long)>
    3c72:	2800      	cmp	r0, #0
    3c74:	d0b8      	beq.n	3be8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3c76:	78a3      	ldrb	r3, [r4, #2]
    3c78:	e7d5      	b.n	3c26 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
    3c7a:	bf00      	nop

00003c7c <FatFile::sync()>:
  if (!isOpen()) {
    3c7c:	7803      	ldrb	r3, [r0, #0]
    3c7e:	b10b      	cbz	r3, 3c84 <FatFile::sync()+0x8>
    3c80:	f7ff bb98 	b.w	33b4 <FatFile::sync() [clone .part.0]>
}
    3c84:	2001      	movs	r0, #1
    3c86:	4770      	bx	lr

00003c88 <FatFile::write(void const*, unsigned int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    3c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    3c8c:	7883      	ldrb	r3, [r0, #2]
    3c8e:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    3c90:	079c      	lsls	r4, r3, #30
    3c92:	d577      	bpl.n	3d84 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3c94:	4688      	mov	r8, r1
    3c96:	0719      	lsls	r1, r3, #28
    3c98:	4691      	mov	r9, r2
    3c9a:	f100 80b5 	bmi.w	3e08 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    3c9e:	696b      	ldr	r3, [r5, #20]
    3ca0:	eb13 0209 	adds.w	r2, r3, r9
    3ca4:	d26e      	bcs.n	3d84 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3ca6:	f1b9 0f00 	cmp.w	r9, #0
    3caa:	d040      	beq.n	3d2e <FatFile::write(void const*, unsigned int)+0xa6>
    3cac:	464f      	mov	r7, r9
    m_status = 0;
    3cae:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    3cb2:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    3cb4:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3cb8:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    3cba:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3cbc:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    3cc0:	d13f      	bne.n	3d42 <FatFile::write(void const*, unsigned int)+0xba>
    3cc2:	2e00      	cmp	r6, #0
    3cc4:	d13d      	bne.n	3d42 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    3cc6:	2900      	cmp	r1, #0
    3cc8:	d06e      	beq.n	3da8 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    3cca:	78aa      	ldrb	r2, [r5, #2]
    3ccc:	0652      	lsls	r2, r2, #25
    3cce:	d576      	bpl.n	3dbe <FatFile::write(void const*, unsigned int)+0x136>
    3cd0:	69ea      	ldr	r2, [r5, #28]
    3cd2:	429a      	cmp	r2, r3
    3cd4:	d973      	bls.n	3dbe <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    3cd6:	3101      	adds	r1, #1
    3cd8:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3cda:	3902      	subs	r1, #2
    3cdc:	7982      	ldrb	r2, [r0, #6]
    3cde:	6943      	ldr	r3, [r0, #20]
    3ce0:	4091      	lsls	r1, r2
    3ce2:	4419      	add	r1, r3
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3ce4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    3ce8:	d353      	bcc.n	3d92 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    3cea:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    3cee:	d370      	bcc.n	3dd2 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3cf0:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    3cf2:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3cf4:	1b1b      	subs	r3, r3, r4
    3cf6:	4293      	cmp	r3, r2
    3cf8:	bf28      	it	cs
    3cfa:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    3cfc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    3cfe:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3d00:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3d04:	d307      	bcc.n	3d16 <FatFile::write(void const*, unsigned int)+0x8e>
    3d06:	185e      	adds	r6, r3, r1
    3d08:	42b2      	cmp	r2, r6
    3d0a:	d204      	bcs.n	3d16 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    3d0c:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    3d10:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3d14:	62c2      	str	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
    3d16:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3d18:	4642      	mov	r2, r8
    3d1a:	6806      	ldr	r6, [r0, #0]
    3d1c:	6a76      	ldr	r6, [r6, #36]	; 0x24
    3d1e:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    3d20:	b380      	cbz	r0, 3d84 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3d22:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    3d24:	1b3f      	subs	r7, r7, r4
    src += n;
    3d26:	44a0      	add	r8, r4
    m_curPosition += n;
    3d28:	4423      	add	r3, r4
    3d2a:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    3d2c:	d1c1      	bne.n	3cb2 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    3d2e:	69ea      	ldr	r2, [r5, #28]
    3d30:	429a      	cmp	r2, r3
    3d32:	d276      	bcs.n	3e22 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3d34:	78aa      	ldrb	r2, [r5, #2]
    3d36:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    3d38:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3d3a:	f062 037f 	orn	r3, r2, #127	; 0x7f
    3d3e:	70ab      	strb	r3, [r5, #2]
    3d40:	e025      	b.n	3d8e <FatFile::write(void const*, unsigned int)+0x106>
    3d42:	7982      	ldrb	r2, [r0, #6]
    3d44:	3902      	subs	r1, #2
    3d46:	6943      	ldr	r3, [r0, #20]
    3d48:	4091      	lsls	r1, r2
    3d4a:	4419      	add	r1, r3
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3d4c:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3d4e:	2e00      	cmp	r6, #0
    3d50:	d0c8      	beq.n	3ce4 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    3d52:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3d56:	2201      	movs	r2, #1
    3d58:	42bc      	cmp	r4, r7
    3d5a:	bf28      	it	cs
    3d5c:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    3d5e:	3024      	adds	r0, #36	; 0x24
    3d60:	f003 fa32 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    3d64:	b170      	cbz	r0, 3d84 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    3d66:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3d68:	4426      	add	r6, r4
      memcpy(dst, src, n);
    3d6a:	4622      	mov	r2, r4
    3d6c:	4641      	mov	r1, r8
    3d6e:	f004 f9b9 	bl	80e4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3d72:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3d76:	68a8      	ldr	r0, [r5, #8]
    3d78:	d1d3      	bne.n	3d22 <FatFile::write(void const*, unsigned int)+0x9a>
  bool cacheSyncData() { return m_cache.sync(); }
    3d7a:	3024      	adds	r0, #36	; 0x24
    3d7c:	f003 f9f8 	bl	7170 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    3d80:	2800      	cmp	r0, #0
    3d82:	d1ce      	bne.n	3d22 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3d84:	786b      	ldrb	r3, [r5, #1]
  return 0;
    3d86:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3d88:	f043 0301 	orr.w	r3, r3, #1
    3d8c:	706b      	strb	r3, [r5, #1]
}
    3d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3d92:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    3d96:	696a      	ldr	r2, [r5, #20]
    3d98:	69eb      	ldr	r3, [r5, #28]
    3d9a:	42bc      	cmp	r4, r7
    3d9c:	bf28      	it	cs
    3d9e:	463c      	movcs	r4, r7
    3da0:	429a      	cmp	r2, r3
    3da2:	d305      	bcc.n	3db0 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3da4:	2205      	movs	r2, #5
    3da6:	e7da      	b.n	3d5e <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    3da8:	6a29      	ldr	r1, [r5, #32]
    3daa:	b321      	cbz	r1, 3df6 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    3dac:	6129      	str	r1, [r5, #16]
    3dae:	e794      	b.n	3cda <FatFile::write(void const*, unsigned int)+0x52>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    3db0:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3db2:	f013 0f20 	tst.w	r3, #32
    3db6:	bf14      	ite	ne
    3db8:	2205      	movne	r2, #5
    3dba:	2201      	moveq	r2, #1
    3dbc:	e7cf      	b.n	3d5e <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3dbe:	f105 0210 	add.w	r2, r5, #16
    3dc2:	f000 fc59 	bl	4678 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3dc6:	2800      	cmp	r0, #0
    3dc8:	dbdc      	blt.n	3d84 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    3dca:	d024      	beq.n	3e16 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3dcc:	68a8      	ldr	r0, [r5, #8]
    3dce:	6929      	ldr	r1, [r5, #16]
    3dd0:	e783      	b.n	3cda <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    3dd2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3dd4:	428b      	cmp	r3, r1
    3dd6:	d104      	bne.n	3de2 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    3dd8:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    3ddc:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3de0:	62c3      	str	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
    3de2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3de4:	4642      	mov	r2, r8
    3de6:	6803      	ldr	r3, [r0, #0]
    3de8:	6a1b      	ldr	r3, [r3, #32]
    3dea:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3dec:	2800      	cmp	r0, #0
    3dee:	d0c9      	beq.n	3d84 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    3df0:	f44f 7400 	mov.w	r4, #512	; 0x200
    3df4:	e795      	b.n	3d22 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    3df6:	4628      	mov	r0, r5
    3df8:	f7ff fb3a 	bl	3470 <FatFile::addCluster()>
    3dfc:	2800      	cmp	r0, #0
    3dfe:	d0c1      	beq.n	3d84 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    3e00:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3e02:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    3e04:	6229      	str	r1, [r5, #32]
    3e06:	e768      	b.n	3cda <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    3e08:	69c1      	ldr	r1, [r0, #28]
    3e0a:	f7ff fe69 	bl	3ae0 <FatFile::seekSet(unsigned long)>
    3e0e:	2800      	cmp	r0, #0
    3e10:	f47f af45 	bne.w	3c9e <FatFile::write(void const*, unsigned int)+0x16>
    3e14:	e7b6      	b.n	3d84 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    3e16:	4628      	mov	r0, r5
    3e18:	f7ff fb2a 	bl	3470 <FatFile::addCluster()>
    3e1c:	2800      	cmp	r0, #0
    3e1e:	d1d5      	bne.n	3dcc <FatFile::write(void const*, unsigned int)+0x144>
    3e20:	e7b0      	b.n	3d84 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    3e22:	4b05      	ldr	r3, [pc, #20]	; (3e38 <FatFile::write(void const*, unsigned int)+0x1b0>)
    3e24:	681b      	ldr	r3, [r3, #0]
    3e26:	b12b      	cbz	r3, 3e34 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3e28:	78ab      	ldrb	r3, [r5, #2]
    3e2a:	4648      	mov	r0, r9
    3e2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3e30:	70ab      	strb	r3, [r5, #2]
    3e32:	e7ac      	b.n	3d8e <FatFile::write(void const*, unsigned int)+0x106>
    3e34:	4648      	mov	r0, r9
    3e36:	e7aa      	b.n	3d8e <FatFile::write(void const*, unsigned int)+0x106>
    3e38:	2002886c 	.word	0x2002886c

00003e3c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    3e40:	4686      	mov	lr, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3e42:	b08a      	sub	sp, #40	; 0x28
    3e44:	4615      	mov	r5, r2
  void reset() { next = begin; }
    3e46:	6814      	ldr	r4, [r2, #0]
    3e48:	4606      	mov	r6, r0
    3e4a:	4688      	mov	r8, r1
  FatFile dir = *this;
    3e4c:	f10d 0c04 	add.w	ip, sp, #4
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3e50:	461f      	mov	r7, r3
  FatFile dir = *this;
    3e52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3e56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3e5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3e5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3e62:	f8de 3000 	ldr.w	r3, [lr]
    3e66:	606c      	str	r4, [r5, #4]
    3e68:	f8cc 3000 	str.w	r3, [ip]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3e6c:	2f00      	cmp	r7, #0
    3e6e:	d03b      	beq.n	3ee8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xac>
    3e70:	f04f 0901 	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3e74:	eba8 0109 	sub.w	r1, r8, r9
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3e78:	a801      	add	r0, sp, #4
    3e7a:	b289      	uxth	r1, r1
    3e7c:	0149      	lsls	r1, r1, #5
    3e7e:	f7ff fe2f 	bl	3ae0 <FatFile::seekSet(unsigned long)>
    3e82:	b398      	cbz	r0, 3eec <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    3e84:	2100      	movs	r1, #0
    3e86:	a801      	add	r0, sp, #4
    3e88:	f7ff fe08 	bl	3a9c <FatFile::readDirCache(bool)>
    if (!ldir) {
    3e8c:	4682      	mov	sl, r0
    3e8e:	b368      	cbz	r0, 3eec <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    3e90:	2400      	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    3e92:	b2e2      	uxtb	r2, r4
    3e94:	4651      	mov	r1, sl
    3e96:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    3e98:	3401      	adds	r4, #1
      uint16_t u = getLfnChar(ldir, i);
    3e9a:	f000 fb75 	bl	4588 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3e9e:	b2c3      	uxtb	r3, r0
      if (fname->atEnd()) {
    3ea0:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
    3ea4:	428a      	cmp	r2, r1
  char getch() { return atEnd() ? 0 : *next++; }
    3ea6:	f101 0c01 	add.w	ip, r1, #1
    3eaa:	d023      	beq.n	3ef4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3eac:	287f      	cmp	r0, #127	; 0x7f
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    3eae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    3eb2:	f1a3 0e20 	sub.w	lr, r3, #32
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3eb6:	d819      	bhi.n	3eec <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    3eb8:	2a19      	cmp	r2, #25
    3eba:	f8c5 c004 	str.w	ip, [r5, #4]
    3ebe:	780a      	ldrb	r2, [r1, #0]
    3ec0:	bf98      	it	ls
    3ec2:	fa5f f38e 	uxtbls.w	r3, lr
    3ec6:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    3eca:	f1a2 0020 	sub.w	r0, r2, #32
    3ece:	2919      	cmp	r1, #25
    3ed0:	bf98      	it	ls
    3ed2:	b2c2      	uxtbls	r2, r0
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3ed4:	429a      	cmp	r2, r3
    3ed6:	d109      	bne.n	3eec <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    for (uint8_t i = 0; i < 13; i++) {
    3ed8:	2c0d      	cmp	r4, #13
    3eda:	d1da      	bne.n	3e92 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x56>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3edc:	f109 0901 	add.w	r9, r9, #1
    3ee0:	fa5f f989 	uxtb.w	r9, r9
    3ee4:	454f      	cmp	r7, r9
    3ee6:	d2c5      	bcs.n	3e74 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x38>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    3ee8:	2001      	movs	r0, #1
    3eea:	e000      	b.n	3eee <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>

fail:
  return false;
    3eec:	2000      	movs	r0, #0
}
    3eee:	b00a      	add	sp, #40	; 0x28
    3ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return u == 0;
    3ef4:	fab0 f080 	clz	r0, r0
    3ef8:	0940      	lsrs	r0, r0, #5
}
    3efa:	b00a      	add	sp, #40	; 0x28
    3efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003f00 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    3f04:	4686      	mov	lr, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3f06:	b08a      	sub	sp, #40	; 0x28
    3f08:	4614      	mov	r4, r2
    3f0a:	4688      	mov	r8, r1
    3f0c:	461e      	mov	r6, r3
  FatFile dir = *this;
    3f0e:	f10d 0904 	add.w	r9, sp, #4
    3f12:	f102 0711 	add.w	r7, r2, #17
    3f16:	f102 0c1c 	add.w	ip, r2, #28
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    3f1a:	2500      	movs	r5, #0
    3f1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3f20:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    3f24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3f28:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    3f2c:	f8de 3000 	ldr.w	r3, [lr]
    3f30:	f8c9 3000 	str.w	r3, [r9]
    for (uint8_t i = 0; i < 11; i++) {
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3f34:	01eb      	lsls	r3, r5, #7
    3f36:	f817 2f01 	ldrb.w	r2, [r7, #1]!
    3f3a:	ea43 0355 	orr.w	r3, r3, r5, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    3f3e:	4567      	cmp	r7, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3f40:	fa52 f383 	uxtab	r3, r2, r3
    3f44:	b2dd      	uxtb	r5, r3
    for (uint8_t i = 0; i < 11; i++) {
    3f46:	d1f5      	bne.n	3f34 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
  void reset() { next = begin; }
    3f48:	6823      	ldr	r3, [r4, #0]
    3f4a:	6063      	str	r3, [r4, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3f4c:	2e00      	cmp	r6, #0
    3f4e:	d059      	beq.n	4004 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x104>
  uint8_t fc = 0;
    3f50:	f04f 0900 	mov.w	r9, #0
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3f54:	f04f 0a01 	mov.w	sl, #1
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3f58:	464f      	mov	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3f5a:	eba8 010a 	sub.w	r1, r8, sl
    3f5e:	a801      	add	r0, sp, #4
    3f60:	b289      	uxth	r1, r1
    3f62:	0149      	lsls	r1, r1, #5
    3f64:	f7ff fdbc 	bl	3ae0 <FatFile::seekSet(unsigned long)>
    3f68:	2800      	cmp	r0, #0
    3f6a:	d053      	beq.n	4014 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    3f6c:	2100      	movs	r1, #0
    3f6e:	a801      	add	r0, sp, #4
    3f70:	f7ff fd94 	bl	3a9c <FatFile::readDirCache(bool)>
    if (!ldir) {
    3f74:	2800      	cmp	r0, #0
    3f76:	d04d      	beq.n	4014 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    3f78:	9a03      	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3f7a:	45b2      	cmp	sl, r6
  bool atEnd() { return next == end; }
    3f7c:	f04f 0c01 	mov.w	ip, #1
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    3f80:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    3f84:	f043 0301 	orr.w	r3, r3, #1
    3f88:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    3f8c:	bf0c      	ite	eq
    3f8e:	f04a 0240 	orreq.w	r2, sl, #64	; 0x40
    3f92:	4652      	movne	r2, sl
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3f94:	230f      	movs	r3, #15
    ldir->mustBeZero1 = 0;
    3f96:	7307      	strb	r7, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3f98:	7002      	strb	r2, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3f9a:	1c42      	adds	r2, r0, #1
    3f9c:	72c3      	strb	r3, [r0, #11]
    3f9e:	2300      	movs	r3, #0
    ldir->checksum = checksum;
    3fa0:	7345      	strb	r5, [r0, #13]
    3fa2:	68a1      	ldr	r1, [r4, #8]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3fa4:	8347      	strh	r7, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    3fa6:	e006      	b.n	3fb6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb6>
    3fa8:	8010      	strh	r0, [r2, #0]
    3faa:	f10c 0c01 	add.w	ip, ip, #1
    3fae:	3301      	adds	r3, #1
    3fb0:	3202      	adds	r2, #2
    3fb2:	fa5f fc8c 	uxtb.w	ip, ip
    3fb6:	6860      	ldr	r0, [r4, #4]
      uint16_t cp;
      if (fname->atEnd()) {
    3fb8:	4288      	cmp	r0, r1
    3fba:	d00e      	beq.n	3fda <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xda>
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    3fbc:	f100 0e01 	add.w	lr, r0, #1
    3fc0:	f8c4 e004 	str.w	lr, [r4, #4]
    3fc4:	7800      	ldrb	r0, [r0, #0]
  if (i < 5) {
    3fc6:	2b04      	cmp	r3, #4
    3fc8:	fa5f fe83 	uxtb.w	lr, r3
    3fcc:	d9ec      	bls.n	3fa8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
  } else if (i < 11) {
    3fce:	f1be 0f0a 	cmp.w	lr, #10
    3fd2:	d80c      	bhi.n	3fee <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xee>
    3fd4:	f8a2 0003 	strh.w	r0, [r2, #3]
}
    3fd8:	e7e7      	b.n	3faa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
        cp = fc++ ? 0XFFFF : 0;
    3fda:	f1b9 0f00 	cmp.w	r9, #0
    3fde:	d015      	beq.n	400c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
    3fe0:	f109 0901 	add.w	r9, r9, #1
    3fe4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3fe8:	fa5f f989 	uxtb.w	r9, r9
    3fec:	e7eb      	b.n	3fc6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    for (uint8_t i = 0; i < 13; i++) {
    3fee:	f1bc 0f0d 	cmp.w	ip, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    3ff2:	f8a2 0005 	strh.w	r0, [r2, #5]
    3ff6:	d1d8      	bne.n	3faa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3ff8:	f10a 0a01 	add.w	sl, sl, #1
    3ffc:	fa5f fa8a 	uxtb.w	sl, sl
    4000:	4556      	cmp	r6, sl
    4002:	d2aa      	bcs.n	3f5a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    4004:	2001      	movs	r0, #1

fail:
  return false;
}
    4006:	b00a      	add	sp, #40	; 0x28
    4008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cp = fc++ ? 0XFFFF : 0;
    400c:	4648      	mov	r0, r9
    400e:	f04f 0901 	mov.w	r9, #1
    4012:	e7d8      	b.n	3fc6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
  return false;
    4014:	2000      	movs	r0, #0
}
    4016:	b00a      	add	sp, #40	; 0x28
    4018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000401c <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    401c:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    401e:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    4022:	f852 3b12 	ldr.w	r3, [r2], #18
bool FatFile::makeSFN(FatLfn_t* fname) {
    4026:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    402a:	f8c0 1012 	str.w	r1, [r0, #18]
bool FatFile::makeSFN(FatLfn_t* fname) {
    402e:	4686      	mov	lr, r0
  const char* end = fname->end;
    4030:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    4032:	6051      	str	r1, [r2, #4]
    4034:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    4038:	781a      	ldrb	r2, [r3, #0]
    403a:	2a2e      	cmp	r2, #46	; 0x2e
    403c:	bf14      	ite	ne
    403e:	2001      	movne	r0, #1
    4040:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    4042:	d103      	bne.n	404c <FatFile::makeSFN(FatLfn_t*)+0x30>
    4044:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4048:	2a2e      	cmp	r2, #46	; 0x2e
    404a:	d0fb      	beq.n	4044 <FatFile::makeSFN(FatLfn_t*)+0x28>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    404c:	1e61      	subs	r1, r4, #1
    404e:	4299      	cmp	r1, r3
    4050:	d90b      	bls.n	406a <FatFile::makeSFN(FatLfn_t*)+0x4e>
    4052:	460a      	mov	r2, r1
    4054:	e002      	b.n	405c <FatFile::makeSFN(FatLfn_t*)+0x40>
    4056:	4293      	cmp	r3, r2
    4058:	4611      	mov	r1, r2
    405a:	d006      	beq.n	406a <FatFile::makeSFN(FatLfn_t*)+0x4e>
    405c:	4611      	mov	r1, r2
    405e:	3a01      	subs	r2, #1
    4060:	f891 c000 	ldrb.w	ip, [r1]
    4064:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    4068:	d1f5      	bne.n	4056 <FatFile::makeSFN(FatLfn_t*)+0x3a>
  }

  for (; ptr < end; ptr++) {
    406a:	429c      	cmp	r4, r3
    406c:	f04f 0500 	mov.w	r5, #0
    4070:	f240 8086 	bls.w	4180 <FatFile::makeSFN(FatLfn_t*)+0x164>
    4074:	2607      	movs	r6, #7
    4076:	2708      	movs	r7, #8
    4078:	46a9      	mov	r9, r5
    407a:	46a8      	mov	r8, r5
    407c:	e006      	b.n	408c <FatFile::makeSFN(FatLfn_t*)+0x70>
    407e:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
    4080:	260a      	movs	r6, #10
      i = 8;                  // Place for extension.
    4082:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    4086:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    4088:	429c      	cmp	r4, r3
    408a:	d95b      	bls.n	4144 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    408c:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    408e:	2a2e      	cmp	r2, #46	; 0x2e
    4090:	bf08      	it	eq
    4092:	4299      	cmpeq	r1, r3
    4094:	d0f3      	beq.n	407e <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    4096:	2a22      	cmp	r2, #34	; 0x22
    4098:	d00d      	beq.n	40b6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    409a:	2a7c      	cmp	r2, #124	; 0x7c
    409c:	d00b      	beq.n	40b6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    409e:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    40a2:	f1bc 0f02 	cmp.w	ip, #2
    40a6:	d906      	bls.n	40b6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    40a8:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    40ac:	f1bc 0f05 	cmp.w	ip, #5
    40b0:	d821      	bhi.n	40f6 <FatFile::makeSFN(FatLfn_t*)+0xda>
    40b2:	2a2d      	cmp	r2, #45	; 0x2d
    40b4:	d01f      	beq.n	40f6 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    40b6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    40ba:	2a80      	cmp	r2, #128	; 0x80
    40bc:	d05d      	beq.n	417a <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    40be:	454e      	cmp	r6, r9
    40c0:	d22f      	bcs.n	4122 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    40c2:	4299      	cmp	r1, r3
    40c4:	bf2c      	ite	cs
    40c6:	2000      	movcs	r0, #0
    40c8:	2001      	movcc	r0, #1
    40ca:	2e0a      	cmp	r6, #10
    40cc:	bf08      	it	eq
    40ce:	f040 0001 	orreq.w	r0, r0, #1
    40d2:	2800      	cmp	r0, #0
    40d4:	d047      	beq.n	4166 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    40d6:	f89e 3012 	ldrb.w	r3, [lr, #18]
    40da:	2b20      	cmp	r3, #32
    40dc:	d040      	beq.n	4160 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    40de:	f89e 3010 	ldrb.w	r3, [lr, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    40e2:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    40e4:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    40e6:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    40e8:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    40ea:	f88e 0011 	strb.w	r0, [lr, #17]
    fname->sfn[fname->seqPos] = '~';
    40ee:	7499      	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    40f0:	74da      	strb	r2, [r3, #19]
  }
  return true;

fail:
  return false;
}
    40f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    40f6:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    40fa:	f1bc 0f05 	cmp.w	ip, #5
    40fe:	d9da      	bls.n	40b6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    4100:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    4104:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    4108:	d8d5      	bhi.n	40b6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    410a:	454e      	cmp	r6, r9
    410c:	d3d9      	bcc.n	40c2 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    410e:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    4112:	f1bc 0f19 	cmp.w	ip, #25
    4116:	d828      	bhi.n	416a <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    4118:	3a20      	subs	r2, #32
        lc |= bit;
    411a:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    411c:	b2d2      	uxtb	r2, r2
        lc |= bit;
    411e:	b2ed      	uxtb	r5, r5
    4120:	e001      	b.n	4126 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    4122:	2000      	movs	r0, #0
        c = '_';
    4124:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    4126:	f109 0c01 	add.w	ip, r9, #1
    412a:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    412c:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    412e:	f889 2012 	strb.w	r2, [r9, #18]
    4132:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    4136:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    4138:	4691      	mov	r9, r2
    413a:	bf98      	it	ls
    413c:	f88e 2010 	strbls.w	r2, [lr, #16]
  for (; ptr < end; ptr++) {
    4140:	429c      	cmp	r4, r3
    4142:	d8a3      	bhi.n	408c <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    4144:	f89e 3012 	ldrb.w	r3, [lr, #18]
    4148:	2b20      	cmp	r3, #32
    414a:	d009      	beq.n	4160 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    414c:	2800      	cmp	r0, #0
    414e:	d0c6      	beq.n	40de <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    4150:	ea18 0f05 	tst.w	r8, r5
    4154:	bf18      	it	ne
    4156:	2502      	movne	r5, #2
    4158:	f88e 5011 	strb.w	r5, [lr, #17]
}
    415c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    4160:	2000      	movs	r0, #0
}
    4162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4166:	460b      	mov	r3, r1
    4168:	e78e      	b.n	4088 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    416a:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    416e:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    4172:	bf98      	it	ls
    4174:	ea47 0808 	orrls.w	r8, r7, r8
    4178:	e7d5      	b.n	4126 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    417a:	3301      	adds	r3, #1
        is83 = false;
    417c:	2000      	movs	r0, #0
    417e:	e783      	b.n	4088 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    4180:	46a8      	mov	r8, r5
    4182:	e7df      	b.n	4144 <FatFile::makeSFN(FatLfn_t*)+0x128>

00004184 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    4184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    4188:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    418c:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    418e:	460f      	mov	r7, r1
    4190:	4604      	mov	r4, r0
    4192:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 4234 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    4196:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    419a:	f891 8010 	ldrb.w	r8, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    419e:	f101 0612 	add.w	r6, r1, #18
	return systick_millis_count;
    41a2:	f1b8 0f03 	cmp.w	r8, #3
    41a6:	f8db 3000 	ldr.w	r3, [fp]
    41aa:	bf28      	it	cs
    41ac:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    41b0:	442b      	add	r3, r5
    41b2:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    41b4:	f108 0304 	add.w	r3, r8, #4
    41b8:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    41ba:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4; i > pos; i--) {
    41be:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    41c0:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    41c2:	2a09      	cmp	r2, #9
    41c4:	f102 0137 	add.w	r1, r2, #55	; 0x37
    41c8:	bf98      	it	ls
    41ca:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    41ce:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    41d0:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    41d2:	7491      	strb	r1, [r2, #18]
    for (uint8_t i = pos + 4; i > pos; i--) {
    41d4:	4598      	cmp	r8, r3
    41d6:	d1f0      	bne.n	41ba <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    41d8:	eb07 0308 	add.w	r3, r7, r8
  void rewind() { seekSet(0); }
    41dc:	2100      	movs	r1, #0
    41de:	4620      	mov	r0, r4
    41e0:	f883 a012 	strb.w	sl, [r3, #18]
    41e4:	f7ff fc7c 	bl	3ae0 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    41e8:	2101      	movs	r1, #1
    41ea:	4620      	mov	r0, r4
    41ec:	f7ff fc56 	bl	3a9c <FatFile::readDirCache(bool)>
    41f0:	4603      	mov	r3, r0
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    41f2:	220b      	movs	r2, #11
    41f4:	4630      	mov	r0, r6
      if (!dir) {
    41f6:	b19b      	cbz	r3, 4220 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    41f8:	f893 c000 	ldrb.w	ip, [r3]
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    41fc:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    41fe:	f1bc 0f00 	cmp.w	ip, #0
    4202:	d013      	beq.n	422c <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4204:	7adb      	ldrb	r3, [r3, #11]
    4206:	071b      	lsls	r3, r3, #28
    4208:	d4ee      	bmi.n	41e8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    420a:	f007 fb8b 	bl	b924 <memcmp>
    420e:	2800      	cmp	r0, #0
    4210:	d1ea      	bne.n	41e8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    4212:	f109 39ff 	add.w	r9, r9, #4294967295
    4216:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    421a:	d1c2      	bne.n	41a2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    421c:	4648      	mov	r0, r9
fail:
    421e:	e003      	b.n	4228 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    4220:	7860      	ldrb	r0, [r4, #1]
    4222:	fab0 f080 	clz	r0, r0
    4226:	0940      	lsrs	r0, r0, #5

done:
  return true;
}
    4228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    422c:	2001      	movs	r0, #1
}
    422e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4232:	bf00      	nop
    4234:	2002945c 	.word	0x2002945c

00004238 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    4238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    423c:	ed2d 8b02 	vpush	{d8}
    4240:	b08b      	sub	sp, #44	; 0x2c
    4242:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t freeIndex = 0;
  uint16_t freeTotal;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    4246:	688b      	ldr	r3, [r1, #8]
    4248:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    424a:	780b      	ldrb	r3, [r1, #0]
    424c:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    4250:	d052      	beq.n	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  bool isOpen() const { return m_attributes; }
    4252:	9b02      	ldr	r3, [sp, #8]
    4254:	781b      	ldrb	r3, [r3, #0]
    4256:	2b00      	cmp	r3, #0
    4258:	d14e      	bne.n	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    425a:	68d3      	ldr	r3, [r2, #12]
    425c:	4690      	mov	r8, r2
    425e:	4a9c      	ldr	r2, [pc, #624]	; (44d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x298>)
    4260:	460e      	mov	r6, r1
    4262:	330c      	adds	r3, #12
    4264:	fba2 2303 	umull	r2, r3, r2, r3
    4268:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    426c:	f898 3011 	ldrb.w	r3, [r8, #17]
    4270:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12) / 13;
    4272:	9204      	str	r2, [sp, #16]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    4274:	f000 80ab 	beq.w	43ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x196>
    4278:	1c57      	adds	r7, r2, #1
    427a:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    427c:	2300      	movs	r3, #0
  void rewind() { seekSet(0); }
    427e:	4630      	mov	r0, r6
    4280:	4619      	mov	r1, r3
    4282:	461c      	mov	r4, r3
    4284:	9306      	str	r3, [sp, #24]
    4286:	f7ff fc2b 	bl	3ae0 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    428a:	f108 0312 	add.w	r3, r8, #18
  uint8_t order = 0;
    428e:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    4290:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    4292:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4294:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    4298:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    429a:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    429c:	2100      	movs	r1, #0
    429e:	4630      	mov	r0, r6
    42a0:	f7ff fbfc 	bl	3a9c <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    42a4:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    42a8:	4603      	mov	r3, r0
    42aa:	b318      	cbz	r0, 42f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    42ac:	7802      	ldrb	r2, [r0, #0]
    42ae:	2ae5      	cmp	r2, #229	; 0xe5
    42b0:	d028      	beq.n	4304 <FatFile::open(FatFile*, FatLfn_t*, int)+0xcc>
    42b2:	b33a      	cbz	r2, 4304 <FatFile::open(FatFile*, FatLfn_t*, int)+0xcc>
        freeFound = 0;
    42b4:	42bc      	cmp	r4, r7
    42b6:	bf38      	it	cc
    42b8:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    42ba:	2a2e      	cmp	r2, #46	; 0x2e
    42bc:	d02a      	beq.n	4314 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
}
static inline uint8_t isFatLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    42be:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isFatLongName(dir)) {
    42c2:	f1bc 0f0f 	cmp.w	ip, #15
    42c6:	d057      	beq.n	4378 <FatFile::open(FatFile*, FatLfn_t*, int)+0x140>
    } else if (isFatFileOrSubdir(dir)) {
    42c8:	f01c 0c08 	ands.w	ip, ip, #8
    42cc:	d122      	bne.n	4314 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
      if (lfnOrd) {
    42ce:	f1b9 0f00 	cmp.w	r9, #0
    42d2:	d17e      	bne.n	43d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x19a>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    42d4:	220b      	movs	r2, #11
    42d6:	ee18 1a10 	vmov	r1, s16
    42da:	f007 fb23 	bl	b924 <memcmp>
    42de:	2800      	cmp	r0, #0
    42e0:	d1db      	bne.n	429a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    42e2:	f898 3011 	ldrb.w	r3, [r8, #17]
    42e6:	f013 0301 	ands.w	r3, r3, #1
    42ea:	f000 80e9 	beq.w	44c0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x288>
          goto found;
        }
        fnameFound = true;
    42ee:	2301      	movs	r3, #1
    42f0:	9305      	str	r3, [sp, #20]
    42f2:	e7d2      	b.n	429a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    42f4:	7873      	ldrb	r3, [r6, #1]
    42f6:	b183      	cbz	r3, 431a <FatFile::open(FatFile*, FatLfn_t*, int)+0xe2>
    goto fail;
  }
  return true;

fail:
  return false;
    42f8:	2000      	movs	r0, #0
}
    42fa:	b00b      	add	sp, #44	; 0x2c
    42fc:	ecbd 8b02 	vpop	{d8}
    4300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    4304:	2c00      	cmp	r4, #0
    4306:	bf08      	it	eq
    4308:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    430a:	42bc      	cmp	r4, r7
    430c:	d201      	bcs.n	4312 <FatFile::open(FatFile*, FatLfn_t*, int)+0xda>
        freeFound++;
    430e:	3401      	adds	r4, #1
    4310:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    4312:	b112      	cbz	r2, 431a <FatFile::open(FatFile*, FatLfn_t*, int)+0xe2>
      lfnOrd = 0;
    4314:	f04f 0900 	mov.w	r9, #0
    4318:	e7bf      	b.n	429a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    431a:	9b03      	ldr	r3, [sp, #12]
    431c:	059a      	lsls	r2, r3, #22
    431e:	d5eb      	bpl.n	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    4320:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    4324:	3b01      	subs	r3, #1
    4326:	2b01      	cmp	r3, #1
    4328:	d8e6      	bhi.n	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  if (freeFound == 0) {
    432a:	2c00      	cmp	r4, #0
    432c:	bf08      	it	eq
    432e:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    4330:	42bc      	cmp	r4, r7
    4332:	d303      	bcc.n	433c <FatFile::open(FatFile*, FatLfn_t*, int)+0x104>
    4334:	e00c      	b.n	4350 <FatFile::open(FatFile*, FatLfn_t*, int)+0x118>
    freeFound++;
    4336:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    4338:	42a7      	cmp	r7, r4
    433a:	d009      	beq.n	4350 <FatFile::open(FatFile*, FatLfn_t*, int)+0x118>
    dir = dirFile->readDirCache();
    433c:	2100      	movs	r1, #0
    433e:	4630      	mov	r0, r6
    4340:	f7ff fbac 	bl	3a9c <FatFile::readDirCache(bool)>
    freeFound++;
    4344:	1c63      	adds	r3, r4, #1
    if (!dir) {
    4346:	2800      	cmp	r0, #0
    4348:	d1f5      	bne.n	4336 <FatFile::open(FatFile*, FatLfn_t*, int)+0xfe>
      if (dirFile->getError()) {
    434a:	7873      	ldrb	r3, [r6, #1]
    434c:	2b00      	cmp	r3, #0
    434e:	d1d3      	bne.n	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  freeTotal = freeFound;
    4350:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
    4352:	b2bd      	uxth	r5, r7
    4354:	42a7      	cmp	r7, r4
    4356:	d95e      	bls.n	4416 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1de>
    4358:	f8dd 901c 	ldr.w	r9, [sp, #28]
    435c:	e006      	b.n	436c <FatFile::open(FatFile*, FatLfn_t*, int)+0x134>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
    435e:	f899 3004 	ldrb.w	r3, [r9, #4]
    freeTotal += vol->dirEntriesPerCluster();
    4362:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    4366:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
    4368:	42a5      	cmp	r5, r4
    436a:	d954      	bls.n	4416 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1de>
    if (!dirFile->addDirCluster()) {
    436c:	4630      	mov	r0, r6
    436e:	f7ff f899 	bl	34a4 <FatFile::addDirCluster()>
    4372:	2800      	cmp	r0, #0
    4374:	d1f3      	bne.n	435e <FatFile::open(FatFile*, FatLfn_t*, int)+0x126>
    4376:	e7bf      	b.n	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
      if (!lfnOrd) {
    4378:	f1b9 0f00 	cmp.w	r9, #0
    437c:	d11a      	bne.n	43b4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
        order = ldir->order & 0X1F;
    437e:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    4382:	9904      	ldr	r1, [sp, #16]
    4384:	4559      	cmp	r1, fp
    4386:	d188      	bne.n	429a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    4388:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    438c:	d085      	beq.n	429a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    438e:	7b43      	ldrb	r3, [r0, #13]
    4390:	4689      	mov	r9, r1
    4392:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    4394:	f1bb 0f01 	cmp.w	fp, #1
    4398:	f47f af7f 	bne.w	429a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    439c:	1c69      	adds	r1, r5, #1
    439e:	464b      	mov	r3, r9
    43a0:	4642      	mov	r2, r8
    43a2:	4630      	mov	r0, r6
    43a4:	b289      	uxth	r1, r1
    43a6:	f7ff fd49 	bl	3e3c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    43aa:	2800      	cmp	r0, #0
    43ac:	bf08      	it	eq
    43ae:	f04f 0900 	moveq.w	r9, #0
    43b2:	e772      	b.n	429a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    43b4:	f10b 3bff 	add.w	fp, fp, #4294967295
    43b8:	fa5f fb8b 	uxtb.w	fp, fp
    43bc:	455a      	cmp	r2, fp
    43be:	d1a9      	bne.n	4314 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
    43c0:	7b43      	ldrb	r3, [r0, #13]
    43c2:	9a06      	ldr	r2, [sp, #24]
    43c4:	4293      	cmp	r3, r2
    43c6:	d0e5      	beq.n	4394 <FatFile::open(FatFile*, FatLfn_t*, int)+0x15c>
      lfnOrd = 0;
    43c8:	f04f 0900 	mov.w	r9, #0
    43cc:	e765      	b.n	429a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    43ce:	2701      	movs	r7, #1
    43d0:	e754      	b.n	427c <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    43d2:	f1bb 0f01 	cmp.w	fp, #1
    43d6:	d18f      	bne.n	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    for (uint8_t i = 0; i < 11; i++) {
    43d8:	300a      	adds	r0, #10
    43da:	e001      	b.n	43e0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a8>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    43dc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    43e0:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    43e4:	4298      	cmp	r0, r3
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    43e6:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    43ea:	fa52 f281 	uxtab	r2, r2, r1
    43ee:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    43f2:	d1f3      	bne.n	43dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a4>
    43f4:	9b06      	ldr	r3, [sp, #24]
    43f6:	4563      	cmp	r3, ip
    43f8:	f47f af7e 	bne.w	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    43fc:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    43fe:	9b03      	ldr	r3, [sp, #12]
    4400:	0519      	lsls	r1, r3, #20
    4402:	f53f af79 	bmi.w	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    4406:	9b03      	ldr	r3, [sp, #12]
    4408:	462a      	mov	r2, r5
    440a:	4631      	mov	r1, r6
    440c:	9802      	ldr	r0, [sp, #8]
    440e:	9700      	str	r7, [sp, #0]
    4410:	f7ff fbbe 	bl	3b90 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    4414:	e771      	b.n	42fa <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (fnameFound) {
    4416:	9b05      	ldr	r3, [sp, #20]
    4418:	b133      	cbz	r3, 4428 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f0>
    if (!dirFile->makeUniqueSfn(fname)) {
    441a:	4641      	mov	r1, r8
    441c:	4630      	mov	r0, r6
    441e:	f7ff feb1 	bl	4184 <FatFile::makeUniqueSfn(FatLfn_t*)>
    4422:	2800      	cmp	r0, #0
    4424:	f43f af68 	beq.w	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  lfnOrd = freeNeed - 1;
    4428:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    442a:	4642      	mov	r2, r8
    442c:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    442e:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    4430:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    4434:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    4436:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    4438:	4629      	mov	r1, r5
    443a:	f7ff fd61 	bl	3f00 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    443e:	2800      	cmp	r0, #0
    4440:	f43f af5a 	beq.w	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    4444:	0169      	lsls	r1, r5, #5
    4446:	4630      	mov	r0, r6
    4448:	f7ff fb4a 	bl	3ae0 <FatFile::seekSet(unsigned long)>
    444c:	2800      	cmp	r0, #0
    444e:	f43f af53 	beq.w	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    4452:	2100      	movs	r1, #0
    4454:	4630      	mov	r0, r6
    4456:	f7ff fb21 	bl	3a9c <FatFile::readDirCache(bool)>
  if (!dir) {
    445a:	4604      	mov	r4, r0
    445c:	2800      	cmp	r0, #0
    445e:	f43f af4b 	beq.w	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  memset(dir, 0, sizeof(DirFat_t));
    4462:	2220      	movs	r2, #32
    4464:	2100      	movs	r1, #0
    4466:	f007 fb09 	bl	ba7c <memset>
  memcpy(dir->name, fname->sfn, 11);
    446a:	f8d8 2012 	ldr.w	r2, [r8, #18]
    446e:	f8d8 3016 	ldr.w	r3, [r8, #22]
    4472:	6022      	str	r2, [r4, #0]
    4474:	6063      	str	r3, [r4, #4]
    4476:	f898 301c 	ldrb.w	r3, [r8, #28]
    447a:	f8b8 201a 	ldrh.w	r2, [r8, #26]
    447e:	72a3      	strb	r3, [r4, #10]
    4480:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    4482:	f898 3011 	ldrb.w	r3, [r8, #17]
    4486:	f003 0318 	and.w	r3, r3, #24
    448a:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    448c:	4b11      	ldr	r3, [pc, #68]	; (44d4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x29c>)
    448e:	681b      	ldr	r3, [r3, #0]
    4490:	b1c3      	cbz	r3, 44c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x28c>
    FsDateTime::callback(&date, &time, &ms10);
    4492:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    4496:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    449a:	a809      	add	r0, sp, #36	; 0x24
    449c:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    449e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    44a2:	8223      	strh	r3, [r4, #16]
    44a4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    44a8:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    44aa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    44ae:	7363      	strb	r3, [r4, #13]
    44b0:	9a07      	ldr	r2, [sp, #28]
    44b2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    44b6:	f043 0301 	orr.w	r3, r3, #1
    44ba:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  void cacheDirty() { m_cache.dirty(); }
    44be:	e7a2      	b.n	4406 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1ce>
    44c0:	461f      	mov	r7, r3
    44c2:	e79c      	b.n	43fe <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
    44c4:	f245 6321 	movw	r3, #22049	; 0x5621
    44c8:	8223      	strh	r3, [r4, #16]
    44ca:	8323      	strh	r3, [r4, #24]
    44cc:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    44ce:	e7ef      	b.n	44b0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x278>
    44d0:	4ec4ec4f 	.word	0x4ec4ec4f
    44d4:	2002886c 	.word	0x2002886c

000044d8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    44d8:	7808      	ldrb	r0, [r1, #0]
    44da:	2820      	cmp	r0, #32
                            const char** ptr) {
    44dc:	b430      	push	{r4, r5}
  while (*path == ' ') {
    44de:	d103      	bne.n	44e8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    44e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    44e4:	2c20      	cmp	r4, #32
    44e6:	d0fb      	beq.n	44e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    44e8:	2500      	movs	r5, #0
  fname->begin = path;
    44ea:	6011      	str	r1, [r2, #0]
  fname->len = 0;
    44ec:	60d5      	str	r5, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
    44ee:	780c      	ldrb	r4, [r1, #0]
    44f0:	2c2f      	cmp	r4, #47	; 0x2f
    44f2:	d00f      	beq.n	4514 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    44f4:	b174      	cbz	r4, 4514 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    44f6:	4823      	ldr	r0, [pc, #140]	; (4584 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>)
      DBG_FAIL_MACRO;
      goto fail;
    }
#else   // USE_UTF8_LONG_NAMES
    uint8_t cp = *path++;
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    44f8:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t cp = *path++;
    44fc:	f101 0101 	add.w	r1, r1, #1
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    4500:	d108      	bne.n	4514 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    4502:	2c3c      	cmp	r4, #60	; 0x3c
    4504:	d82f      	bhi.n	4566 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8e>
    4506:	2c21      	cmp	r4, #33	; 0x21
    4508:	d807      	bhi.n	451a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x42>
    450a:	f104 3cff 	add.w	ip, r4, #4294967295
    450e:	f1bc 0f1e 	cmp.w	ip, #30
    4512:	d80b      	bhi.n	452c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  *ptr = path;
  return makeSFN(fname);

fail:
  return false;
}
    4514:	2000      	movs	r0, #0
    4516:	bc30      	pop	{r4, r5}
    4518:	4770      	bx	lr
    451a:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    451e:	fa5f fc8c 	uxtb.w	ip, ip
    4522:	fa20 fc0c 	lsr.w	ip, r0, ip
    4526:	f01c 0f01 	tst.w	ip, #1
    452a:	d1f3      	bne.n	4514 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    if (cp != '.' && cp != ' ') {
    452c:	2c2e      	cmp	r4, #46	; 0x2e
    len++;
    452e:	f105 0501 	add.w	r5, r5, #1
    if (cp != '.' && cp != ' ') {
    4532:	d001      	beq.n	4538 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    4534:	2c20      	cmp	r4, #32
    4536:	d11c      	bne.n	4572 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
  while (*path && !isDirSeparator(*path)) {
    4538:	780c      	ldrb	r4, [r1, #0]
    453a:	b10c      	cbz	r4, 4540 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    453c:	2c2f      	cmp	r4, #47	; 0x2f
    453e:	d1db      	bne.n	44f8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    4540:	68d0      	ldr	r0, [r2, #12]
    4542:	3801      	subs	r0, #1
    4544:	28fe      	cmp	r0, #254	; 0xfe
    4546:	d8e5      	bhi.n	4514 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    4548:	2c20      	cmp	r4, #32
    454a:	d001      	beq.n	4550 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    454c:	2c2f      	cmp	r4, #47	; 0x2f
    454e:	d105      	bne.n	455c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x84>
    4550:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    4554:	2820      	cmp	r0, #32
    4556:	d0fb      	beq.n	4550 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    4558:	282f      	cmp	r0, #47	; 0x2f
    455a:	d0f9      	beq.n	4550 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
  return makeSFN(fname);
    455c:	4610      	mov	r0, r2
  *ptr = path;
    455e:	6019      	str	r1, [r3, #0]
}
    4560:	bc30      	pop	{r4, r5}
  return makeSFN(fname);
    4562:	f7ff bd5b 	b.w	401c <FatFile::makeSFN(FatLfn_t*)>
    4566:	2c5c      	cmp	r4, #92	; 0x5c
    4568:	d0d4      	beq.n	4514 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    456a:	d905      	bls.n	4578 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa0>
    456c:	2c7c      	cmp	r4, #124	; 0x7c
    456e:	d0d1      	beq.n	4514 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    len++;
    4570:	3501      	adds	r5, #1
      fname->end = path;
    4572:	e9c2 1502 	strd	r1, r5, [r2, #8]
    4576:	e7df      	b.n	4538 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    4578:	3c3e      	subs	r4, #62	; 0x3e
    457a:	2c01      	cmp	r4, #1
    457c:	d8f8      	bhi.n	4570 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x98>
}
    457e:	2000      	movs	r0, #0
    4580:	bc30      	pop	{r4, r5}
    4582:	4770      	bx	lr
    4584:	05002101 	.word	0x05002101

00004588 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
  if (i < 5) {
    4588:	2a04      	cmp	r2, #4
    458a:	d804      	bhi.n	4596 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    458c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4590:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
    4594:	4770      	bx	lr
  } else if (i < 11) {
    4596:	2a0a      	cmp	r2, #10
    4598:	d803      	bhi.n	45a2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    459a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    459e:	8890      	ldrh	r0, [r2, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    45a0:	4770      	bx	lr
  } else if (i < 13) {
    45a2:	2a0c      	cmp	r2, #12
    45a4:	d803      	bhi.n	45ae <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    45a6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    45aa:	88c8      	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    45ac:	4770      	bx	lr
  return 0;
    45ae:	2000      	movs	r0, #0
}
    45b0:	4770      	bx	lr
    45b2:	bf00      	nop

000045b4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    45b4:	b570      	push	{r4, r5, r6, lr}
  uint8_t fatType() const { return m_fatType; }
    45b6:	79c3      	ldrb	r3, [r0, #7]
    45b8:	4605      	mov	r5, r0
    45ba:	460c      	mov	r4, r1
    45bc:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    45be:	2b20      	cmp	r3, #32
    45c0:	d019      	beq.n	45f6 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x42>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    45c2:	2b10      	cmp	r3, #16
    45c4:	d002      	beq.n	45cc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x18>
  }
  *value = next;
  return 1;

fail:
  return -1;
    45c6:	f04f 30ff 	mov.w	r0, #4294967295
}
    45ca:	bd70      	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    45cc:	6983      	ldr	r3, [r0, #24]
    45ce:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    45d2:	f500 700d 	add.w	r0, r0, #564	; 0x234
    45d6:	2202      	movs	r2, #2
    45d8:	4419      	add	r1, r3
    45da:	f002 fdf5 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    45de:	2800      	cmp	r0, #0
    45e0:	d0f1      	beq.n	45c6 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    45e2:	0061      	lsls	r1, r4, #1
  if (isEOC(next)) {
    45e4:	69ea      	ldr	r2, [r5, #28]
    next = getLe16(pc + offset);
    45e6:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
    45ea:	5a43      	ldrh	r3, [r0, r1]
  if (isEOC(next)) {
    45ec:	429a      	cmp	r2, r3
    45ee:	d313      	bcc.n	4618 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x64>
  return 1;
    45f0:	2001      	movs	r0, #1
  *value = next;
    45f2:	6033      	str	r3, [r6, #0]
}
    45f4:	bd70      	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    45f6:	6981      	ldr	r1, [r0, #24]
    45f8:	2202      	movs	r2, #2
    45fa:	f500 700d 	add.w	r0, r0, #564	; 0x234
    45fe:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4602:	f002 fde1 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4606:	2800      	cmp	r0, #0
    4608:	d0dd      	beq.n	45c6 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    460a:	00a1      	lsls	r1, r4, #2
  if (isEOC(next)) {
    460c:	69ea      	ldr	r2, [r5, #28]
    next = getLe32(pc + offset);
    460e:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    4612:	5843      	ldr	r3, [r0, r1]
  if (isEOC(next)) {
    4614:	429a      	cmp	r2, r3
    4616:	d2eb      	bcs.n	45f0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x3c>
    return 0;
    4618:	2000      	movs	r0, #0
}
    461a:	bd70      	pop	{r4, r5, r6, pc}

0000461c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    461c:	b538      	push	{r3, r4, r5, lr}
  uint8_t fatType() const { return m_fatType; }
    461e:	79c3      	ldrb	r3, [r0, #7]
    4620:	460c      	mov	r4, r1
    4622:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    4624:	2b20      	cmp	r3, #32
    4626:	d015      	beq.n	4654 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x38>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    4628:	2b10      	cmp	r3, #16
    462a:	d001      	beq.n	4630 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    462c:	2000      	movs	r0, #0
}
    462e:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    4630:	6983      	ldr	r3, [r0, #24]
    4632:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    4636:	f500 700d 	add.w	r0, r0, #564	; 0x234
    463a:	2203      	movs	r2, #3
    463c:	4419      	add	r1, r3
    463e:	f002 fdc3 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4642:	4603      	mov	r3, r0
    4644:	2800      	cmp	r0, #0
    4646:	d0f1      	beq.n	462c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    4648:	0061      	lsls	r1, r4, #1
    return true;
    464a:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    464c:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
    4650:	525d      	strh	r5, [r3, r1]
}
    4652:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4654:	6981      	ldr	r1, [r0, #24]
    4656:	2203      	movs	r2, #3
    4658:	f500 700d 	add.w	r0, r0, #564	; 0x234
    465c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4660:	f002 fdb2 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4664:	4603      	mov	r3, r0
    4666:	2800      	cmp	r0, #0
    4668:	d0e0      	beq.n	462c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    466a:	00a1      	lsls	r1, r4, #2
    return true;
    466c:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    466e:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    4672:	505d      	str	r5, [r3, r1]
}
    4674:	bd38      	pop	{r3, r4, r5, pc}
    4676:	bf00      	nop

00004678 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    4678:	2901      	cmp	r1, #1
    467a:	d90c      	bls.n	4696 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    467c:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    467e:	69c4      	ldr	r4, [r0, #28]
    4680:	428c      	cmp	r4, r1
    4682:	d303      	bcc.n	468c <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    4684:	f85d 4b04 	ldr.w	r4, [sp], #4
    4688:	f7ff bf94 	b.w	45b4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    468c:	f04f 30ff 	mov.w	r0, #4294967295
    4690:	f85d 4b04 	ldr.w	r4, [sp], #4
    4694:	4770      	bx	lr
    4696:	f04f 30ff 	mov.w	r0, #4294967295
    469a:	4770      	bx	lr

0000469c <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    469c:	2901      	cmp	r1, #1
    469e:	d90c      	bls.n	46ba <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    46a0:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > m_lastCluster) {
    46a2:	69c3      	ldr	r3, [r0, #28]
    46a4:	460c      	mov	r4, r1
    46a6:	428b      	cmp	r3, r1
    46a8:	d305      	bcc.n	46b6 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
  uint8_t fatType() const { return m_fatType; }
    46aa:	79c3      	ldrb	r3, [r0, #7]
    46ac:	4615      	mov	r5, r2
  if (fatType() == 32) {
    46ae:	2b20      	cmp	r3, #32
    46b0:	d017      	beq.n	46e2 <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
  if (fatType() == 16) {
    46b2:	2b10      	cmp	r3, #16
    46b4:	d003      	beq.n	46be <FatPartition::fatPut(unsigned long, unsigned long)+0x22>
  return false;
    46b6:	2000      	movs	r0, #0
}
    46b8:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    46ba:	2000      	movs	r0, #0
}
    46bc:	4770      	bx	lr
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    46be:	6983      	ldr	r3, [r0, #24]
    46c0:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    46c4:	f500 700d 	add.w	r0, r0, #564	; 0x234
    46c8:	2203      	movs	r2, #3
    46ca:	4419      	add	r1, r3
    46cc:	f002 fd7c 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    46d0:	4603      	mov	r3, r0
    46d2:	2800      	cmp	r0, #0
    46d4:	d0ef      	beq.n	46b6 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    46d6:	0064      	lsls	r4, r4, #1
    return true;
    46d8:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    46da:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    46de:	531d      	strh	r5, [r3, r4]
}
    46e0:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    46e2:	6981      	ldr	r1, [r0, #24]
    46e4:	2203      	movs	r2, #3
    46e6:	f500 700d 	add.w	r0, r0, #564	; 0x234
    46ea:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    46ee:	f002 fd6b 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    46f2:	4603      	mov	r3, r0
    46f4:	2800      	cmp	r0, #0
    46f6:	d0de      	beq.n	46b6 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    46f8:	00a4      	lsls	r4, r4, #2
    return true;
    46fa:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    46fc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
    4700:	511d      	str	r5, [r3, r4]
}
    4702:	bd38      	pop	{r3, r4, r5, pc}

00004704 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    4708:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    470a:	b082      	sub	sp, #8
    470c:	4605      	mov	r5, r0
    470e:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    4710:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4712:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    4714:	d333      	bcc.n	477e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    setStart = true;
    4716:	2701      	movs	r7, #1
    find++;
    4718:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    471a:	69eb      	ldr	r3, [r5, #28]
    471c:	aa01      	add	r2, sp, #4
    471e:	4628      	mov	r0, r5
    4720:	42a3      	cmp	r3, r4
    4722:	d205      	bcs.n	4730 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    4724:	bb37      	cbnz	r7, 4774 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
      find = m_allocSearchStart;
    4726:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    4728:	2701      	movs	r7, #1
    find++;
    472a:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    472c:	42a3      	cmp	r3, r4
    472e:	d321      	bcc.n	4774 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (cluster < 2 || cluster > m_lastCluster) {
    4730:	42a6      	cmp	r6, r4
    4732:	bf18      	it	ne
    4734:	2c01      	cmpne	r4, #1
    4736:	4621      	mov	r1, r4
    4738:	d91c      	bls.n	4774 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    473a:	f7ff ff3b 	bl	45b4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    473e:	2800      	cmp	r0, #0
    4740:	db18      	blt.n	4774 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    if (fg && f == 0) {
    4742:	d0e9      	beq.n	4718 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    4744:	9b01      	ldr	r3, [sp, #4]
    4746:	2b00      	cmp	r3, #0
    4748:	d1e6      	bne.n	4718 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    474a:	b107      	cbz	r7, 474e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    474c:	60ec      	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    474e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    4752:	4621      	mov	r1, r4
    4754:	4628      	mov	r0, r5
    4756:	f7ff ffa1 	bl	469c <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    475a:	4607      	mov	r7, r0
    475c:	b150      	cbz	r0, 4774 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (current) {
    475e:	b916      	cbnz	r6, 4766 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  *next = find;
    4760:	f8c8 4000 	str.w	r4, [r8]
  return true;
    4764:	e007      	b.n	4776 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (!fatPut(current, find)) {
    4766:	4631      	mov	r1, r6
    4768:	4628      	mov	r0, r5
    476a:	4622      	mov	r2, r4
    476c:	f7ff ff96 	bl	469c <FatPartition::fatPut(unsigned long, unsigned long)>
    4770:	2800      	cmp	r0, #0
    4772:	d1f5      	bne.n	4760 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5c>
  return false;
    4774:	2700      	movs	r7, #0
}
    4776:	4638      	mov	r0, r7
    4778:	b002      	add	sp, #8
    477a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    477e:	460c      	mov	r4, r1
    setStart = false;
    4780:	2700      	movs	r7, #0
    4782:	e7c9      	b.n	4718 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>

00004784 <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    4784:	b570      	push	{r4, r5, r6, lr}
    4786:	4605      	mov	r5, r0
    4788:	b082      	sub	sp, #8
    478a:	460c      	mov	r4, r1
    478c:	e017      	b.n	47be <FatPartition::freeChain(unsigned long)+0x3a>
  if (cluster < 2 || cluster > m_lastCluster) {
    478e:	69eb      	ldr	r3, [r5, #28]
    4790:	429c      	cmp	r4, r3
    4792:	d819      	bhi.n	47c8 <FatPartition::freeChain(unsigned long)+0x44>
    4794:	f7ff ff0e 	bl	45b4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    4798:	4606      	mov	r6, r0
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    479a:	4621      	mov	r1, r4
    479c:	2200      	movs	r2, #0
    479e:	2e00      	cmp	r6, #0
    47a0:	4628      	mov	r0, r5
    47a2:	db11      	blt.n	47c8 <FatPartition::freeChain(unsigned long)+0x44>
  if (cluster < 2 || cluster > m_lastCluster) {
    47a4:	69eb      	ldr	r3, [r5, #28]
    47a6:	429c      	cmp	r4, r3
    47a8:	d80e      	bhi.n	47c8 <FatPartition::freeChain(unsigned long)+0x44>
    47aa:	f7ff ff37 	bl	461c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    47ae:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    47b0:	b150      	cbz	r0, 47c8 <FatPartition::freeChain(unsigned long)+0x44>
    if (cluster < m_allocSearchStart) {
    47b2:	68eb      	ldr	r3, [r5, #12]
    47b4:	42a3      	cmp	r3, r4
    }
    cluster = next;
    47b6:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    47b8:	bf88      	it	hi
    47ba:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    47bc:	b12e      	cbz	r6, 47ca <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    47be:	2c01      	cmp	r4, #1
    47c0:	4621      	mov	r1, r4
    47c2:	aa01      	add	r2, sp, #4
    47c4:	4628      	mov	r0, r5
    47c6:	d8e2      	bhi.n	478e <FatPartition::freeChain(unsigned long)+0xa>

  return true;

fail:
  return false;
    47c8:	2000      	movs	r0, #0
}
    47ca:	b002      	add	sp, #8
    47cc:	bd70      	pop	{r4, r5, r6, pc}
    47ce:	bf00      	nop

000047d0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    47d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47d2:	461e      	mov	r6, r3
    m_sector = 0XFFFFFFFF;
    47d4:	f04f 33ff 	mov.w	r3, #4294967295
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    47d8:	f04f 0c00 	mov.w	ip, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    47dc:	4604      	mov	r4, r0
    47de:	62c3      	str	r3, [r0, #44]	; 0x2c
  m_allocSearchStart = 1;
  m_cache.init(dev);
    47e0:	f100 0724 	add.w	r7, r0, #36	; 0x24
    47e4:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  m_allocSearchStart = 1;
    47e8:	2301      	movs	r3, #1
  m_blockDev = dev;
    47ea:	6001      	str	r1, [r0, #0]
  m_fatType = 0;
    47ec:	f880 c007 	strb.w	ip, [r0, #7]
    m_blockDev = blockDev;
    47f0:	6281      	str	r1, [r0, #40]	; 0x28
    47f2:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
    m_status = 0;
    47f6:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
    47fa:	f880 c234 	strb.w	ip, [r0, #564]	; 0x234
  m_allocSearchStart = 1;
    47fe:	60c3      	str	r3, [r0, #12]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4800:	b1d2      	cbz	r2, 4838 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x68>
    if (part > 4) {
    4802:	2a04      	cmp	r2, #4
    4804:	4615      	mov	r5, r2
    4806:	d901      	bls.n	480c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x3c>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    4808:	2000      	movs	r0, #0
}
    480a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
    480c:	4662      	mov	r2, ip
    480e:	4661      	mov	r1, ip
    4810:	4638      	mov	r0, r7
    4812:	f002 fcd9 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    4816:	2800      	cmp	r0, #0
    4818:	d0f6      	beq.n	4808 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    MbrPart_t* mp = mbr->part + part - 1;
    481a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    481e:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    4822:	442b      	add	r3, r5
    4824:	0119      	lsls	r1, r3, #4
    4826:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    482a:	791a      	ldrb	r2, [r3, #4]
    482c:	2a00      	cmp	r2, #0
    482e:	d0eb      	beq.n	4808 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    4830:	5c42      	ldrb	r2, [r0, r1]
    4832:	0652      	lsls	r2, r2, #25
    4834:	d1e8      	bne.n	4808 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    4836:	689e      	ldr	r6, [r3, #8]
    4838:	2200      	movs	r2, #0
    483a:	4631      	mov	r1, r6
    483c:	4638      	mov	r0, r7
    483e:	f002 fcc3 	bl	71c8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    4842:	2800      	cmp	r0, #0
    4844:	d0e0      	beq.n	4808 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    4846:	7c03      	ldrb	r3, [r0, #16]
    4848:	2b02      	cmp	r3, #2
    484a:	d1dd      	bne.n	4808 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    484c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    4850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4854:	d1d8      	bne.n	4808 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    4856:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    4858:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    485a:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    485c:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    485e:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    4860:	f04f 0300 	mov.w	r3, #0
    4864:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4866:	d041      	beq.n	48ec <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x11c>
    4868:	2201      	movs	r2, #1
    486a:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    486c:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    486e:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    4870:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4872:	4291      	cmp	r1, r2
    4874:	d004      	beq.n	4880 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb0>
    if (tmp == 0) {
    4876:	2b08      	cmp	r3, #8
    4878:	d1f7      	bne.n	486a <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x9a>
  return false;
    487a:	2000      	movs	r0, #0
    487c:	71a3      	strb	r3, [r4, #6]
}
    487e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  countOfClusters >>= m_sectorsPerClusterShift;
    4880:	461d      	mov	r5, r3
    4882:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    4884:	8ac1      	ldrh	r1, [r0, #22]
    4886:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    4888:	b909      	cbnz	r1, 488e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xbe>
    488a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    488c:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    488e:	89c3      	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    4890:	f8b0 2011 	ldrh.w	r2, [r0, #17]
    4894:	4433      	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    4896:	8122      	strh	r2, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    4898:	0152      	lsls	r2, r2, #5
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    489a:	61a3      	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    489c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    48a0:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    48a4:	6223      	str	r3, [r4, #32]
      m_rootDirStart +
    48a6:	eb03 2352 	add.w	r3, r3, r2, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    48aa:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector =
    48ae:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    48b0:	b902      	cbnz	r2, 48b4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe4>
  return *reinterpret_cast<const uint32_t*>(src);
    48b2:	6a02      	ldr	r2, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    48b4:	1af3      	subs	r3, r6, r3
    48b6:	4413      	add	r3, r2
  countOfClusters >>= m_sectorsPerClusterShift;
    48b8:	40eb      	lsrs	r3, r5
  m_lastCluster = countOfClusters + 1;
    48ba:	1c5a      	adds	r2, r3, #1
    48bc:	61e2      	str	r2, [r4, #28]
  if (countOfClusters < 4085) {
    48be:	f640 72f4 	movw	r2, #4084	; 0xff4
    48c2:	4293      	cmp	r3, r2
    48c4:	d90c      	bls.n	48e0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x110>
  } else if (countOfClusters < 65525) {
    48c6:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    48ca:	4293      	cmp	r3, r2
    48cc:	d90c      	bls.n	48e8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x118>
    48ce:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    48d0:	2320      	movs	r3, #32
    48d2:	6222      	str	r2, [r4, #32]
  return true;
    48d4:	2001      	movs	r0, #1
    m_fatType = 16;
    48d6:	71e3      	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    48d8:	6321      	str	r1, [r4, #48]	; 0x30
    48da:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    48de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 12;
    48e0:	230c      	movs	r3, #12
  return false;
    48e2:	2000      	movs	r0, #0
    m_fatType = 12;
    48e4:	71e3      	strb	r3, [r4, #7]
}
    48e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48e8:	2310      	movs	r3, #16
    48ea:	e7f3      	b.n	48d4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x104>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    48ec:	461d      	mov	r5, r3
    48ee:	e7c9      	b.n	4884 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb4>

000048f0 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char* path) {
    48f0:	b530      	push	{r4, r5, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    48f2:	f200 4444 	addw	r4, r0, #1092	; 0x444
    48f6:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    48f8:	2300      	movs	r3, #0
    48fa:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    48fc:	a801      	add	r0, sp, #4
    48fe:	4621      	mov	r1, r4
    4900:	9301      	str	r3, [sp, #4]
    4902:	f7fe ff43 	bl	378c <FatFile::open(FatFile*, char const*, int)>
    4906:	4605      	mov	r5, r0
    4908:	b198      	cbz	r0, 4932 <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    490a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    490e:	f013 03d0 	ands.w	r3, r3, #208	; 0xd0
    4912:	d011      	beq.n	4938 <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    4914:	f10d 0e04 	add.w	lr, sp, #4
    4918:	46a4      	mov	ip, r4
    491a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    491e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4922:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4926:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    492a:	f8de 3000 	ldr.w	r3, [lr]
    492e:	f8cc 3000 	str.w	r3, [ip]
  return true;

fail:
  return false;
}
    4932:	4628      	mov	r0, r5
    4934:	b00b      	add	sp, #44	; 0x2c
    4936:	bd30      	pop	{r4, r5, pc}
  return false;
    4938:	461d      	mov	r5, r3
}
    493a:	4628      	mov	r0, r5
    493c:	b00b      	add	sp, #44	; 0x2c
    493e:	bd30      	pop	{r4, r5, pc}

00004940 <FsBaseFile::operator=(FsBaseFile const&)>:
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) {
    4940:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    4942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4944:	4604      	mov	r4, r0
  if (this == &from) {
    4946:	d01b      	beq.n	4980 <FsBaseFile::operator=(FsBaseFile const&)+0x40>
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4948:	6b80      	ldr	r0, [r0, #56]	; 0x38
    494a:	460d      	mov	r5, r1
    494c:	b1d0      	cbz	r0, 4984 <FsBaseFile::operator=(FsBaseFile const&)+0x44>
    494e:	f7fe fde5 	bl	351c <FatFile::close()>
  m_fFile = nullptr;
    4952:	2600      	movs	r6, #0
    4954:	63a6      	str	r6, [r4, #56]	; 0x38
  if (from.m_fFile) {
    4956:	6baf      	ldr	r7, [r5, #56]	; 0x38
  m_xFile = nullptr;
    4958:	63e6      	str	r6, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    495a:	b1cf      	cbz	r7, 4990 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    495c:	4621      	mov	r1, r4
    495e:	2024      	movs	r0, #36	; 0x24
    4960:	f000 f8a4 	bl	4aac <operator new(unsigned int, unsigned long*)>
    4964:	8006      	strh	r6, [r0, #0]
    4966:	7086      	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    4968:	4684      	mov	ip, r0
    m_fFile = new (m_fileMem) FatFile;
    496a:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    496c:	6bad      	ldr	r5, [r5, #56]	; 0x38
    496e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4970:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4976:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    497a:	682b      	ldr	r3, [r5, #0]
    497c:	f8cc 3000 	str.w	r3, [ip]
}
    4980:	4620      	mov	r0, r4
    4982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4984:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4986:	2800      	cmp	r0, #0
    4988:	d0e3      	beq.n	4952 <FsBaseFile::operator=(FsBaseFile const&)+0x12>
    498a:	f7fd fa37 	bl	1dfc <ExFatFile::close()>
    498e:	e7e0      	b.n	4952 <FsBaseFile::operator=(FsBaseFile const&)+0x12>
  } else if (from.m_xFile) {
    4990:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    4992:	2b00      	cmp	r3, #0
    4994:	d0f4      	beq.n	4980 <FsBaseFile::operator=(FsBaseFile const&)+0x40>
    m_xFile = new (m_fileMem) ExFatFile;
    4996:	4621      	mov	r1, r4
    4998:	2038      	movs	r0, #56	; 0x38
    499a:	f000 f887 	bl	4aac <operator new(unsigned int, unsigned long*)>
    499e:	f880 7031 	strb.w	r7, [r0, #49]	; 0x31
    49a2:	8647      	strh	r7, [r0, #50]	; 0x32
    49a4:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    49a6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    49a8:	f103 0730 	add.w	r7, r3, #48	; 0x30
    49ac:	681e      	ldr	r6, [r3, #0]
    49ae:	3310      	adds	r3, #16
    49b0:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    49b4:	3010      	adds	r0, #16
    49b6:	f853 1c08 	ldr.w	r1, [r3, #-8]
    49ba:	f853 2c04 	ldr.w	r2, [r3, #-4]
    49be:	42bb      	cmp	r3, r7
    49c0:	f840 6c10 	str.w	r6, [r0, #-16]
    49c4:	f840 5c0c 	str.w	r5, [r0, #-12]
    49c8:	f840 1c08 	str.w	r1, [r0, #-8]
    49cc:	f840 2c04 	str.w	r2, [r0, #-4]
    49d0:	d1ec      	bne.n	49ac <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	6003      	str	r3, [r0, #0]
}
    49d6:	4620      	mov	r0, r4
    49d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49da:	bf00      	nop

000049dc <FsBaseFile::close()>:
bool FsBaseFile::close() {
    49dc:	b510      	push	{r4, lr}
    49de:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    49e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
    49e2:	b128      	cbz	r0, 49f0 <FsBaseFile::close()+0x14>
    49e4:	f7fe fd9a 	bl	351c <FatFile::close()>
  m_fFile = nullptr;
    49e8:	2300      	movs	r3, #0
  m_xFile = nullptr;
    49ea:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
  return rtn;
}
    49ee:	bd10      	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    49f0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    49f2:	b128      	cbz	r0, 4a00 <FsBaseFile::close()+0x24>
    49f4:	f7fd fa02 	bl	1dfc <ExFatFile::close()>
  m_fFile = nullptr;
    49f8:	2300      	movs	r3, #0
  m_xFile = nullptr;
    49fa:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
    49fe:	bd10      	pop	{r4, pc}
  m_fFile = nullptr;
    4a00:	2300      	movs	r3, #0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4a02:	2001      	movs	r0, #1
  m_xFile = nullptr;
    4a04:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
    4a08:	bd10      	pop	{r4, pc}
    4a0a:	bf00      	nop

00004a0c <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    4a0c:	2900      	cmp	r1, #0
    4a0e:	d04b      	beq.n	4aa8 <FsBaseFile::open(FsVolume*, char const*, int)+0x9c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    4a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4a14:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4a16:	6b80      	ldr	r0, [r0, #56]	; 0x38
    4a18:	460d      	mov	r5, r1
    4a1a:	4690      	mov	r8, r2
    4a1c:	461f      	mov	r7, r3
    4a1e:	b1d0      	cbz	r0, 4a56 <FsBaseFile::open(FsVolume*, char const*, int)+0x4a>
    4a20:	f7fe fd7c 	bl	351c <FatFile::close()>
  m_fFile = nullptr;
    4a24:	2600      	movs	r6, #0
    return false;
  }
  close();
  if (vol->m_fVol) {
    4a26:	f8d5 9480 	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    4a2a:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    4a2e:	f1b9 0f00 	cmp.w	r9, #0
    4a32:	d01d      	beq.n	4a70 <FsBaseFile::open(FsVolume*, char const*, int)+0x64>
    m_fFile = new (m_fileMem) FatFile;
    4a34:	4621      	mov	r1, r4
    4a36:	2024      	movs	r0, #36	; 0x24
    4a38:	f000 f838 	bl	4aac <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4a3c:	463b      	mov	r3, r7
    4a3e:	8006      	strh	r6, [r0, #0]
    4a40:	4642      	mov	r2, r8
    4a42:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    4a44:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4a46:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    4a4a:	f7fe ff1b 	bl	3884 <FatFile::open(FatVolume*, char const*, int)>
    4a4e:	bb40      	cbnz	r0, 4aa2 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
      return true;
    }
    m_fFile = nullptr;
    4a50:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    4a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4a56:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4a58:	2800      	cmp	r0, #0
    4a5a:	d0e3      	beq.n	4a24 <FsBaseFile::open(FsVolume*, char const*, int)+0x18>
    4a5c:	f7fd f9ce 	bl	1dfc <ExFatFile::close()>
  m_fFile = nullptr;
    4a60:	2600      	movs	r6, #0
  if (vol->m_fVol) {
    4a62:	f8d5 9480 	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    4a66:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    4a6a:	f1b9 0f00 	cmp.w	r9, #0
    4a6e:	d1e1      	bne.n	4a34 <FsBaseFile::open(FsVolume*, char const*, int)+0x28>
  } else if (vol->m_xVol) {
    4a70:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    4a74:	b193      	cbz	r3, 4a9c <FsBaseFile::open(FsVolume*, char const*, int)+0x90>
    m_xFile = new (m_fileMem) ExFatFile;
    4a76:	4621      	mov	r1, r4
    4a78:	2038      	movs	r0, #56	; 0x38
    4a7a:	f000 f817 	bl	4aac <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4a7e:	463b      	mov	r3, r7
    4a80:	f880 9031 	strb.w	r9, [r0, #49]	; 0x31
    4a84:	4642      	mov	r2, r8
    4a86:	f8a0 9032 	strh.w	r9, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    4a8a:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4a8c:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    4a90:	f7fd fddc 	bl	264c <ExFatFile::open(ExFatVolume*, char const*, int)>
    4a94:	b928      	cbnz	r0, 4aa2 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
    m_xFile = nullptr;
    4a96:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    4a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    4a9c:	2000      	movs	r0, #0
}
    4a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return true;
    4aa2:	2001      	movs	r0, #1
}
    4aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    4aa8:	2000      	movs	r0, #0
}
    4aaa:	4770      	bx	lr

00004aac <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    4aac:	4608      	mov	r0, r1
    4aae:	4770      	bx	lr

00004ab0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    4ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
    4ab4:	2500      	movs	r5, #0
                     uint32_t volStart) {
    4ab6:	4606      	mov	r6, r0
    4ab8:	460f      	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
    4aba:	4601      	mov	r1, r0
  m_fVol = nullptr;
    4abc:	f8c0 5480 	str.w	r5, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    4ac0:	f44f 6090 	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
    4ac4:	4698      	mov	r8, r3
    4ac6:	f8dd a020 	ldr.w	sl, [sp, #32]
    4aca:	4691      	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    4acc:	f7ff ffee 	bl	4aac <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    4ad0:	f04f 33ff 	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    4ad4:	6045      	str	r5, [r0, #4]
    m_status = 0;
    4ad6:	7005      	strb	r5, [r0, #0]
    if (!init(dev, part, volStart)) {
    4ad8:	4642      	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    4ada:	6083      	str	r3, [r0, #8]
    4adc:	4639      	mov	r1, r7
    4ade:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
    4ae2:	4653      	mov	r3, sl
    m_blockDev = blockDev;
    4ae4:	f8c0 5214 	str.w	r5, [r0, #532]	; 0x214
    4ae8:	4604      	mov	r4, r0
    m_status = 0;
    4aea:	f880 5210 	strb.w	r5, [r0, #528]	; 0x210
  ExFatPartition() = default;
    4aee:	f880 5444 	strb.w	r5, [r0, #1092]	; 0x444
    4af2:	f880 5479 	strb.w	r5, [r0, #1145]	; 0x479
    4af6:	f8a0 547a 	strh.w	r5, [r0, #1146]	; 0x47a
    4afa:	f8c6 0484 	str.w	r0, [r6, #1156]	; 0x484
    4afe:	f7fe fba7 	bl	3250 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4b02:	2800      	cmp	r0, #0
    4b04:	d13e      	bne.n	4b84 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xd4>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    4b06:	2500      	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    4b08:	4631      	mov	r1, r6
    4b0a:	f44f 608d 	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
    4b0e:	f8c6 5484 	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    4b12:	f7ff ffcb 	bl	4aac <operator new(unsigned int, unsigned long*)>
  FatPartition() = default;
    4b16:	71c5      	strb	r5, [r0, #7]
    m_blockDev = blockDev;
    4b18:	6285      	str	r5, [r0, #40]	; 0x28
    if (!init(dev, part, volStart)) {
    4b1a:	4653      	mov	r3, sl
    m_status = 0;
    4b1c:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
    4b20:	4642      	mov	r2, r8
    m_blockDev = blockDev;
    4b22:	f8c0 5238 	str.w	r5, [r0, #568]	; 0x238
    4b26:	4639      	mov	r1, r7
    m_status = 0;
    4b28:	f880 5234 	strb.w	r5, [r0, #564]	; 0x234
    4b2c:	4604      	mov	r4, r0
    4b2e:	f8a0 5444 	strh.w	r5, [r0, #1092]	; 0x444
    4b32:	f880 5446 	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    4b36:	f04f 35ff 	mov.w	r5, #4294967295
    4b3a:	62c5      	str	r5, [r0, #44]	; 0x2c
    4b3c:	f8c0 523c 	str.w	r5, [r0, #572]	; 0x23c
    4b40:	f8c6 0480 	str.w	r0, [r6, #1152]	; 0x480
    4b44:	f7ff fe44 	bl	47d0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4b48:	b928      	cbnz	r0, 4b56 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xa6>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    4b4a:	2300      	movs	r3, #0
  return false;
    4b4c:	4618      	mov	r0, r3
  m_fVol = nullptr;
    4b4e:	f8c6 3480 	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    4b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    4b56:	f204 4544 	addw	r5, r4, #1092	; 0x444
    4b5a:	4628      	mov	r0, r5
    4b5c:	f7fe fcde 	bl	351c <FatFile::close()>
    return m_vwd.openRoot(this);
    4b60:	4621      	mov	r1, r4
    4b62:	4628      	mov	r0, r5
    4b64:	f7fe fe96 	bl	3894 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    4b68:	2800      	cmp	r0, #0
    4b6a:	d0ee      	beq.n	4b4a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x9a>
    if (setCwv || !m_cwv) {
    4b6c:	4b12      	ldr	r3, [pc, #72]	; (4bb8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
    4b6e:	681a      	ldr	r2, [r3, #0]
    4b70:	b9ba      	cbnz	r2, 4ba2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf2>
      m_cwv = this;
    4b72:	601c      	str	r4, [r3, #0]
  if (setCwv || !m_cwv) {
    4b74:	4b11      	ldr	r3, [pc, #68]	; (4bbc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    4b76:	f1b9 0f00 	cmp.w	r9, #0
    4b7a:	d016      	beq.n	4baa <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfa>
  return true;
    4b7c:	2001      	movs	r0, #1
    m_cwv = this;
    4b7e:	601e      	str	r6, [r3, #0]
}
    4b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    4b84:	f504 6589 	add.w	r5, r4, #1096	; 0x448
    4b88:	4628      	mov	r0, r5
    4b8a:	f7fd f937 	bl	1dfc <ExFatFile::close()>
    return m_vwd.openRoot(this);
    4b8e:	4621      	mov	r1, r4
    4b90:	4628      	mov	r0, r5
    4b92:	f7fd f93d 	bl	1e10 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    4b96:	2800      	cmp	r0, #0
    4b98:	d0b5      	beq.n	4b06 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
    if (setCwv || !m_cwv) {
    4b9a:	4b09      	ldr	r3, [pc, #36]	; (4bc0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x110>)
    4b9c:	681a      	ldr	r2, [r3, #0]
    4b9e:	2a00      	cmp	r2, #0
    4ba0:	d0e7      	beq.n	4b72 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc2>
  if (setCwv || !m_cwv) {
    4ba2:	4b06      	ldr	r3, [pc, #24]	; (4bbc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    4ba4:	f1b9 0f00 	cmp.w	r9, #0
    4ba8:	d1e8      	bne.n	4b7c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
    4baa:	681a      	ldr	r2, [r3, #0]
    4bac:	2a00      	cmp	r2, #0
    4bae:	d0e5      	beq.n	4b7c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
  return true;
    4bb0:	2001      	movs	r0, #1
}
    4bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bb6:	bf00      	nop
    4bb8:	200288a8 	.word	0x200288a8
    4bbc:	200288a4 	.word	0x200288a4
    4bc0:	20028870 	.word	0x20028870

00004bc4 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    4bc4:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    4bc6:	2500      	movs	r5, #0
    4bc8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    4bcc:	4604      	mov	r4, r0
    4bce:	6045      	str	r5, [r0, #4]
    4bd0:	7305      	strb	r5, [r0, #12]
    4bd2:	6086      	str	r6, [r0, #8]
    4bd4:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4bd8:	4d03      	ldr	r5, [pc, #12]	; (4be8 <FsVolume::open(char const*, int)+0x24>)
    4bda:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    4bde:	f7ff ff15 	bl	4a0c <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    4be2:	4620      	mov	r0, r4
    4be4:	bd70      	pop	{r4, r5, r6, pc}
    4be6:	bf00      	nop
    4be8:	200007c4 	.word	0x200007c4

00004bec <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
    4bec:	f04f 30ff 	mov.w	r0, #4294967295
    4bf0:	4770      	bx	lr
    4bf2:	bf00      	nop

00004bf4 <SharedSpiCard::errorCode() const>:
  uint8_t errorCode() const { return m_errorCode; }
    4bf4:	7c80      	ldrb	r0, [r0, #18]
    4bf6:	4770      	bx	lr

00004bf8 <SharedSpiCard::errorData() const>:
  uint32_t errorData() const { return m_status; }
    4bf8:	7d40      	ldrb	r0, [r0, #21]
    4bfa:	4770      	bx	lr

00004bfc <SharedSpiCard::type() const>:
  uint8_t type() const { return m_type; }
    4bfc:	7d80      	ldrb	r0, [r0, #22]
    4bfe:	4770      	bx	lr

00004c00 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    4c00:	2001      	movs	r0, #1
    4c02:	4770      	bx	lr

00004c04 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    4c04:	7f00      	ldrb	r0, [r0, #28]
    4c06:	4770      	bx	lr

00004c08 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4c08:	4770      	bx	lr
    4c0a:	bf00      	nop

00004c0c <DedicatedSpiCard::~DedicatedSpiCard()>:
    4c0c:	b510      	push	{r4, lr}
    4c0e:	4604      	mov	r4, r0
    4c10:	2120      	movs	r1, #32
    4c12:	f003 fb01 	bl	8218 <operator delete(void*, unsigned int)>
    4c16:	4620      	mov	r0, r4
    4c18:	bd10      	pop	{r4, pc}
    4c1a:	bf00      	nop

00004c1c <SharedSpiCard::end()>:
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
//------------------------------------------------------------------------------
void SharedSpiCard::end() {
    4c1c:	b538      	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    4c1e:	7c03      	ldrb	r3, [r0, #16]
    4c20:	b153      	cbz	r3, 4c38 <SharedSpiCard::end()+0x1c>
    syncDevice();
    4c22:	4605      	mov	r5, r0
    4c24:	4604      	mov	r4, r0
    4c26:	f855 3b04 	ldr.w	r3, [r5], #4
    4c2a:	69db      	ldr	r3, [r3, #28]
    4c2c:	4798      	blx	r3
  void spiEnd() { m_spiDriver.end(); }
    4c2e:	4628      	mov	r0, r5
    4c30:	f002 fa4a 	bl	70c8 <SdSpiArduinoDriver::end()>
    spiEnd();
    m_beginCalled = false;
    4c34:	2300      	movs	r3, #0
    4c36:	7423      	strb	r3, [r4, #16]
  }
}
    4c38:	bd38      	pop	{r3, r4, r5, pc}
    4c3a:	bf00      	nop

00004c3c <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    4c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c40:	4e20      	ldr	r6, [pc, #128]	; (4cc4 <SharedSpiCard::writeStop()+0x88>)
    4c42:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    4c44:	f100 0804 	add.w	r8, r0, #4
    4c48:	6835      	ldr	r5, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4c4a:	f505 7516 	add.w	r5, r5, #600	; 0x258
    4c4e:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    4c50:	e003      	b.n	4c5a <SharedSpiCard::writeStop()+0x1e>
    4c52:	6833      	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4c54:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4c56:	041b      	lsls	r3, r3, #16
    4c58:	d410      	bmi.n	4c7c <SharedSpiCard::writeStop()+0x40>
    4c5a:	4640      	mov	r0, r8
    4c5c:	f002 fa38 	bl	70d0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4c60:	28ff      	cmp	r0, #255	; 0xff
    4c62:	4604      	mov	r4, r0
    4c64:	d1f5      	bne.n	4c52 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    4c66:	21fd      	movs	r1, #253	; 0xfd
    4c68:	4640      	mov	r0, r8
    4c6a:	f002 fa4f 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    4c6e:	7cfb      	ldrb	r3, [r7, #19]
    4c70:	b9cb      	cbnz	r3, 4ca6 <SharedSpiCard::writeStop()+0x6a>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4c72:	2300      	movs	r3, #0
    4c74:	2001      	movs	r0, #1
    4c76:	753b      	strb	r3, [r7, #20]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    4c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    4c7c:	231f      	movs	r3, #31
  if (m_spiActive) {
    4c7e:	7cf8      	ldrb	r0, [r7, #19]
    4c80:	74bb      	strb	r3, [r7, #18]
    4c82:	2800      	cmp	r0, #0
    4c84:	d0f8      	beq.n	4c78 <SharedSpiCard::writeStop()+0x3c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4c86:	7c78      	ldrb	r0, [r7, #17]
    4c88:	2101      	movs	r1, #1
    4c8a:	f002 f961 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c8e:	21ff      	movs	r1, #255	; 0xff
    4c90:	4640      	mov	r0, r8
    4c92:	f002 fa3b 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4c96:	4640      	mov	r0, r8
    4c98:	f002 f9ee 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4c9c:	2300      	movs	r3, #0
  return false;
    4c9e:	4618      	mov	r0, r3
    m_spiActive = false;
    4ca0:	74fb      	strb	r3, [r7, #19]
}
    4ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4ca6:	2101      	movs	r1, #1
    4ca8:	7c78      	ldrb	r0, [r7, #17]
    4caa:	f002 f951 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4cae:	4621      	mov	r1, r4
    4cb0:	4640      	mov	r0, r8
    4cb2:	f002 fa2b 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4cb6:	4640      	mov	r0, r8
    4cb8:	f002 f9de 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4cbc:	2300      	movs	r3, #0
    4cbe:	74fb      	strb	r3, [r7, #19]
}
    4cc0:	e7d7      	b.n	4c72 <SharedSpiCard::writeStop()+0x36>
    4cc2:	bf00      	nop
    4cc4:	2002945c 	.word	0x2002945c

00004cc8 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    4cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    4ccc:	7d03      	ldrb	r3, [r0, #20]
    4cce:	2b01      	cmp	r3, #1
    4cd0:	d035      	beq.n	4d3e <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    4cd2:	7cc6      	ldrb	r6, [r0, #19]
    4cd4:	4604      	mov	r4, r0
    4cd6:	b14e      	cbz	r6, 4cec <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    4cd8:	3004      	adds	r0, #4
    4cda:	f002 f9f9 	bl	70d0 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    4cde:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4ce2:	bf18      	it	ne
    4ce4:	2501      	movne	r5, #1
}
    4ce6:	4628      	mov	r0, r5
    4ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    4cec:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    4cee:	f04f 0801 	mov.w	r8, #1
    4cf2:	4638      	mov	r0, r7
    4cf4:	f002 f9b6 	bl	7064 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    4cf8:	4631      	mov	r1, r6
    4cfa:	7c60      	ldrb	r0, [r4, #17]
    4cfc:	f884 8013 	strb.w	r8, [r4, #19]
    4d00:	f002 f926 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d04:	21ff      	movs	r1, #255	; 0xff
    4d06:	4638      	mov	r0, r7
    4d08:	f002 fa00 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4d0c:	4638      	mov	r0, r7
    4d0e:	f002 f9df 	bl	70d0 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    4d12:	7ce3      	ldrb	r3, [r4, #19]
  bool rtn = 0XFF != spiReceive();
    4d14:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4d18:	bf18      	it	ne
    4d1a:	2501      	movne	r5, #1
  if (m_spiActive) {
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d0e2      	beq.n	4ce6 <SharedSpiCard::isBusy()+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4d20:	4641      	mov	r1, r8
    4d22:	7c60      	ldrb	r0, [r4, #17]
    4d24:	f002 f914 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d28:	21ff      	movs	r1, #255	; 0xff
    4d2a:	4638      	mov	r0, r7
    4d2c:	f002 f9ee 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4d30:	4638      	mov	r0, r7
    4d32:	f002 f9a1 	bl	7078 <SdSpiArduinoDriver::deactivate()>
}
    4d36:	4628      	mov	r0, r5
    m_spiActive = false;
    4d38:	74e6      	strb	r6, [r4, #19]
}
    4d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4d3e:	2500      	movs	r5, #0
}
    4d40:	4628      	mov	r0, r5
    4d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d46:	bf00      	nop

00004d48 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    4d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d4c:	4f20      	ldr	r7, [pc, #128]	; (4dd0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    4d4e:	4604      	mov	r4, r0
    4d50:	4688      	mov	r8, r1
    4d52:	4691      	mov	r9, r2
    4d54:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    4d56:	1d06      	adds	r6, r0, #4
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4d58:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    4d5c:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    4d5e:	e003      	b.n	4d68 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    4d60:	683b      	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4d62:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4d64:	041b      	lsls	r3, r3, #16
    4d66:	d40d      	bmi.n	4d84 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    4d68:	4630      	mov	r0, r6
    4d6a:	f002 f9b1 	bl	70d0 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    4d6e:	28ff      	cmp	r0, #255	; 0xff
    4d70:	7560      	strb	r0, [r4, #21]
    4d72:	d0f5      	beq.n	4d60 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    4d74:	28fe      	cmp	r0, #254	; 0xfe
    4d76:	d01a      	beq.n	4dae <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    4d78:	2319      	movs	r3, #25
  if (m_spiActive) {
    4d7a:	7ce0      	ldrb	r0, [r4, #19]
    m_errorCode = code;
    4d7c:	74a3      	strb	r3, [r4, #18]
    4d7e:	b930      	cbnz	r0, 4d8e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    4d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4d84:	231e      	movs	r3, #30
  if (m_spiActive) {
    4d86:	7ce0      	ldrb	r0, [r4, #19]
    4d88:	74a3      	strb	r3, [r4, #18]
    4d8a:	2800      	cmp	r0, #0
    4d8c:	d0f8      	beq.n	4d80 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4d8e:	7c60      	ldrb	r0, [r4, #17]
    4d90:	2101      	movs	r1, #1
    4d92:	f002 f8dd 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d96:	21ff      	movs	r1, #255	; 0xff
    4d98:	4630      	mov	r0, r6
    4d9a:	f002 f9b7 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4d9e:	4630      	mov	r0, r6
    4da0:	f002 f96a 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4da4:	2300      	movs	r3, #0
  return false;
    4da6:	4618      	mov	r0, r3
    m_spiActive = false;
    4da8:	74e3      	strb	r3, [r4, #19]
}
    4daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    4dae:	464a      	mov	r2, r9
    4db0:	4641      	mov	r1, r8
    4db2:	4630      	mov	r0, r6
    4db4:	f002 f998 	bl	70e8 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    4db8:	7560      	strb	r0, [r4, #21]
    4dba:	b938      	cbnz	r0, 4dcc <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    4dbc:	4630      	mov	r0, r6
    4dbe:	f002 f987 	bl	70d0 <SdSpiArduinoDriver::receive()>
    4dc2:	4630      	mov	r0, r6
    4dc4:	f002 f984 	bl	70d0 <SdSpiArduinoDriver::receive()>
  return true;
    4dc8:	2001      	movs	r0, #1
    4dca:	e7d9      	b.n	4d80 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    4dcc:	2326      	movs	r3, #38	; 0x26
    4dce:	e7d4      	b.n	4d7a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    4dd0:	2002945c 	.word	0x2002945c

00004dd4 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    4dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    4dd6:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    4dd8:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    4dda:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    4ddc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    4dde:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    4de0:	7507      	strb	r7, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    4de2:	f000 f83b 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4de6:	b9b0      	cbnz	r0, 4e16 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    4de8:	7ce6      	ldrb	r6, [r4, #19]
    4dea:	b91e      	cbnz	r6, 4df4 <SharedSpiCard::readStop()+0x20>
  return true;
    4dec:	2601      	movs	r6, #1
}
    4dee:	4630      	mov	r0, r6
    4df0:	b003      	add	sp, #12
    4df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4df4:	4605      	mov	r5, r0
    4df6:	2101      	movs	r1, #1
    4df8:	7c60      	ldrb	r0, [r4, #17]
    4dfa:	f002 f8a9 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4dfe:	1d20      	adds	r0, r4, #4
    4e00:	21ff      	movs	r1, #255	; 0xff
    4e02:	9001      	str	r0, [sp, #4]
    4e04:	f002 f982 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4e08:	9801      	ldr	r0, [sp, #4]
    4e0a:	f002 f935 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    4e0e:	4630      	mov	r0, r6
    m_spiActive = false;
    4e10:	74e5      	strb	r5, [r4, #19]
}
    4e12:	b003      	add	sp, #12
    4e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    4e16:	2309      	movs	r3, #9
  if (m_spiActive) {
    4e18:	7ce6      	ldrb	r6, [r4, #19]
    4e1a:	74a3      	strb	r3, [r4, #18]
    4e1c:	2e00      	cmp	r6, #0
    4e1e:	d0e6      	beq.n	4dee <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    4e20:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4e22:	7c60      	ldrb	r0, [r4, #17]
    4e24:	2101      	movs	r1, #1
}
    4e26:	463e      	mov	r6, r7
    4e28:	f002 f892 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4e2c:	21ff      	movs	r1, #255	; 0xff
    4e2e:	4628      	mov	r0, r5
    4e30:	f002 f96c 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4e34:	4628      	mov	r0, r5
    4e36:	f002 f91f 	bl	7078 <SdSpiArduinoDriver::deactivate()>
}
    4e3a:	4630      	mov	r0, r6
    m_spiActive = false;
    4e3c:	74e7      	strb	r7, [r4, #19]
}
    4e3e:	b003      	add	sp, #12
    4e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e42:	bf00      	nop

00004e44 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    4e44:	7d02      	ldrb	r2, [r0, #20]
    4e46:	2a02      	cmp	r2, #2
    4e48:	d003      	beq.n	4e52 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    4e4a:	2a01      	cmp	r2, #1
    4e4c:	d004      	beq.n	4e58 <SharedSpiCard::syncDevice()+0x14>
}
    4e4e:	2001      	movs	r0, #1
    4e50:	4770      	bx	lr
    return writeStop();
    4e52:	6803      	ldr	r3, [r0, #0]
    4e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4e56:	4718      	bx	r3
    return readStop();
    4e58:	f7ff bfbc 	b.w	4dd4 <SharedSpiCard::readStop()>

00004e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    4e60:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4e62:	b082      	sub	sp, #8
    4e64:	460f      	mov	r7, r1
    4e66:	4936      	ldr	r1, [pc, #216]	; (4f40 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>)
    4e68:	9201      	str	r2, [sp, #4]
    4e6a:	4606      	mov	r6, r0
  if (!syncDevice()) {
    4e6c:	69da      	ldr	r2, [r3, #28]
    4e6e:	428a      	cmp	r2, r1
    4e70:	d15d      	bne.n	4f2e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd2>
  if (m_state == WRITE_STATE) {
    4e72:	7d02      	ldrb	r2, [r0, #20]
    4e74:	2a02      	cmp	r2, #2
    4e76:	d043      	beq.n	4f00 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
  if (m_state == READ_STATE) {
    4e78:	2a01      	cmp	r2, #1
    4e7a:	d05c      	beq.n	4f36 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xda>
  if (!m_spiActive) {
    4e7c:	7cf4      	ldrb	r4, [r6, #19]
    4e7e:	2c00      	cmp	r4, #0
    4e80:	d046      	beq.n	4f10 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb4>
  void spiActivate() { m_spiDriver.activate(); }
    4e82:	1d35      	adds	r5, r6, #4
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    4e84:	b19f      	cbz	r7, 4eae <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    4e86:	2f0c      	cmp	r7, #12
    4e88:	d011      	beq.n	4eae <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    4e8a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4f44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe8>
    4e8e:	f8d8 4000 	ldr.w	r4, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4e92:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    4e96:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    4e98:	e004      	b.n	4ea4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    4e9a:	f8d8 3000 	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4e9e:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    4ea0:	0419      	lsls	r1, r3, #16
    4ea2:	d431      	bmi.n	4f08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    return m_spiDriver.receive();
    4ea4:	4628      	mov	r0, r5
    4ea6:	f002 f913 	bl	70d0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4eaa:	28ff      	cmp	r0, #255	; 0xff
    4eac:	d1f5      	bne.n	4e9a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
    m_spiDriver.send(data);
    4eae:	f10d 0804 	add.w	r8, sp, #4
    4eb2:	ac02      	add	r4, sp, #8
    4eb4:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    4eb8:	4628      	mov	r0, r5
    4eba:	f002 f927 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
    4ebe:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    4ec2:	4628      	mov	r0, r5
    4ec4:	f002 f922 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    4ec8:	4544      	cmp	r4, r8
    4eca:	d1f8      	bne.n	4ebe <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    4ecc:	2f00      	cmp	r7, #0
    4ece:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    4ed0:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    4ed4:	bf0c      	ite	eq
    4ed6:	2195      	moveq	r1, #149	; 0x95
    4ed8:	2187      	movne	r1, #135	; 0x87
    4eda:	f002 f917 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4ede:	4628      	mov	r0, r5
    4ee0:	f002 f8f6 	bl	70d0 <SdSpiArduinoDriver::receive()>
    4ee4:	4628      	mov	r0, r5
    4ee6:	f002 f8f3 	bl	70d0 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    4eea:	0602      	lsls	r2, r0, #24
    4eec:	f104 33ff 	add.w	r3, r4, #4294967295
    m_status = spiReceive();
    4ef0:	7570      	strb	r0, [r6, #21]
  } while (m_status & 0X80 && ++n < 10);
    4ef2:	d502      	bpl.n	4efa <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9e>
    4ef4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    4ef8:	d1f4      	bne.n	4ee4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x88>
}
    4efa:	b002      	add	sp, #8
    4efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    4f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4f02:	4798      	blx	r3
  if (!syncDevice()) {
    4f04:	2800      	cmp	r0, #0
    4f06:	d1b9      	bne.n	4e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    4f08:	20ff      	movs	r0, #255	; 0xff
}
    4f0a:	b002      	add	sp, #8
    4f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    4f10:	1d35      	adds	r5, r6, #4
    4f12:	4628      	mov	r0, r5
    4f14:	f002 f8a6 	bl	7064 <SdSpiArduinoDriver::activate()>
    m_spiActive = true;
    4f18:	2301      	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
    4f1a:	4621      	mov	r1, r4
    4f1c:	7c70      	ldrb	r0, [r6, #17]
    4f1e:	74f3      	strb	r3, [r6, #19]
    4f20:	f002 f816 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f24:	21ff      	movs	r1, #255	; 0xff
    4f26:	4628      	mov	r0, r5
    4f28:	f002 f8f0 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
}
    4f2c:	e7aa      	b.n	4e84 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    4f2e:	4790      	blx	r2
    4f30:	2800      	cmp	r0, #0
    4f32:	d0e9      	beq.n	4f08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    4f34:	e7a2      	b.n	4e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return readStop();
    4f36:	f7ff ff4d 	bl	4dd4 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    4f3a:	2800      	cmp	r0, #0
    4f3c:	d0e4      	beq.n	4f08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    4f3e:	e79d      	b.n	4e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    4f40:	00004e45 	.word	0x00004e45
    4f44:	2002945c 	.word	0x2002945c

00004f48 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    4f48:	b570      	push	{r4, r5, r6, lr}
    4f4a:	460c      	mov	r4, r1
    4f4c:	b082      	sub	sp, #8
    4f4e:	4616      	mov	r6, r2
  if (cardCommand(CMD6, arg)) {
    4f50:	2106      	movs	r1, #6
    4f52:	4622      	mov	r2, r4
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    4f54:	4604      	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    4f56:	f7ff ff81 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4f5a:	b1b0      	cbz	r0, 4f8a <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x42>
    m_errorCode = code;
    4f5c:	2304      	movs	r3, #4
    4f5e:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    4f60:	7ce0      	ldrb	r0, [r4, #19]
    4f62:	b908      	cbnz	r0, 4f68 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x20>
}
    4f64:	b002      	add	sp, #8
    4f66:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    4f68:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4f6a:	7c60      	ldrb	r0, [r4, #17]
    4f6c:	2101      	movs	r1, #1
    4f6e:	f001 ffef 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f72:	21ff      	movs	r1, #255	; 0xff
    4f74:	4628      	mov	r0, r5
    4f76:	f002 f8c9 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4f7a:	4628      	mov	r0, r5
    4f7c:	f002 f87c 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4f80:	2300      	movs	r3, #0
  return false;
    4f82:	4618      	mov	r0, r3
    m_spiActive = false;
    4f84:	74e3      	strb	r3, [r4, #19]
}
    4f86:	b002      	add	sp, #8
    4f88:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(status, 64)) {
    4f8a:	4605      	mov	r5, r0
    4f8c:	2240      	movs	r2, #64	; 0x40
    4f8e:	4631      	mov	r1, r6
    4f90:	4620      	mov	r0, r4
    4f92:	f7ff fed9 	bl	4d48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    4f96:	2800      	cmp	r0, #0
    4f98:	d0e2      	beq.n	4f60 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x18>
  if (m_spiActive) {
    4f9a:	7ce6      	ldrb	r6, [r4, #19]
    4f9c:	2e00      	cmp	r6, #0
    4f9e:	d0e1      	beq.n	4f64 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4fa0:	7c60      	ldrb	r0, [r4, #17]
    4fa2:	2101      	movs	r1, #1
    4fa4:	f001 ffd4 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4fa8:	1d20      	adds	r0, r4, #4
    4faa:	21ff      	movs	r1, #255	; 0xff
    4fac:	9001      	str	r0, [sp, #4]
    4fae:	f002 f8ad 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4fb2:	9801      	ldr	r0, [sp, #4]
    4fb4:	f002 f860 	bl	7078 <SdSpiArduinoDriver::deactivate()>
}
    4fb8:	4630      	mov	r0, r6
    m_spiActive = false;
    4fba:	74e5      	strb	r5, [r4, #19]
}
    4fbc:	b002      	add	sp, #8
    4fbe:	bd70      	pop	{r4, r5, r6, pc}

00004fc0 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    4fc2:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4fc4:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    4fc6:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4fc8:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    4fca:	f7ff ff47 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4fce:	b9e0      	cbnz	r0, 500a <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    4fd0:	1d37      	adds	r7, r6, #4
    4fd2:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    4fd4:	4638      	mov	r0, r7
    4fd6:	f002 f87b 	bl	70d0 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    4fda:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    4fde:	42a5      	cmp	r5, r4
    4fe0:	d1f8      	bne.n	4fd4 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    4fe2:	7cf4      	ldrb	r4, [r6, #19]
    4fe4:	b914      	cbnz	r4, 4fec <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    4fe6:	2401      	movs	r4, #1
}
    4fe8:	4620      	mov	r0, r4
    4fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4fec:	7c70      	ldrb	r0, [r6, #17]
    4fee:	2101      	movs	r1, #1
    4ff0:	f001 ffae 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ff4:	21ff      	movs	r1, #255	; 0xff
    4ff6:	4638      	mov	r0, r7
    4ff8:	f002 f888 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4ffc:	4638      	mov	r0, r7
    4ffe:	f002 f83b 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5002:	2300      	movs	r3, #0
}
    5004:	4620      	mov	r0, r4
    m_spiActive = false;
    5006:	74f3      	strb	r3, [r6, #19]
}
    5008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    500a:	2312      	movs	r3, #18
  if (m_spiActive) {
    500c:	7cf4      	ldrb	r4, [r6, #19]
    500e:	74b3      	strb	r3, [r6, #18]
    5010:	2c00      	cmp	r4, #0
    5012:	d0e9      	beq.n	4fe8 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    5014:	1d34      	adds	r4, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5016:	7c70      	ldrb	r0, [r6, #17]
    5018:	2101      	movs	r1, #1
    501a:	f001 ff99 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    501e:	21ff      	movs	r1, #255	; 0xff
    5020:	4620      	mov	r0, r4
    5022:	f002 f873 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5026:	4620      	mov	r0, r4
    5028:	f002 f826 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    502c:	2300      	movs	r3, #0
  return false;
    502e:	461c      	mov	r4, r3
    m_spiActive = false;
    5030:	74f3      	strb	r3, [r6, #19]
}
    5032:	4620      	mov	r0, r4
    5034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5036:	bf00      	nop

00005038 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    5038:	b570      	push	{r4, r5, r6, lr}
    503a:	4616      	mov	r6, r2
    503c:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    503e:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    5040:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    5042:	f7ff ff0b 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5046:	b1b0      	cbz	r0, 5076 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    5048:	231c      	movs	r3, #28
    504a:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    504c:	7ce0      	ldrb	r0, [r4, #19]
    504e:	b908      	cbnz	r0, 5054 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    5050:	b002      	add	sp, #8
    5052:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5054:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5056:	7c60      	ldrb	r0, [r4, #17]
    5058:	2101      	movs	r1, #1
    505a:	f001 ff79 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    505e:	21ff      	movs	r1, #255	; 0xff
    5060:	4628      	mov	r0, r5
    5062:	f002 f853 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5066:	4628      	mov	r0, r5
    5068:	f002 f806 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    506c:	2300      	movs	r3, #0
  return false;
    506e:	4618      	mov	r0, r3
    m_spiActive = false;
    5070:	74e3      	strb	r3, [r4, #19]
}
    5072:	b002      	add	sp, #8
    5074:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    5076:	4605      	mov	r5, r0
    5078:	2210      	movs	r2, #16
    507a:	4631      	mov	r1, r6
    507c:	4620      	mov	r0, r4
    507e:	f7ff fe63 	bl	4d48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5082:	2800      	cmp	r0, #0
    5084:	d0e2      	beq.n	504c <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    5086:	7ce6      	ldrb	r6, [r4, #19]
    5088:	2e00      	cmp	r6, #0
    508a:	d0e1      	beq.n	5050 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    508c:	7c60      	ldrb	r0, [r4, #17]
    508e:	2101      	movs	r1, #1
    5090:	f001 ff5e 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5094:	1d20      	adds	r0, r4, #4
    5096:	21ff      	movs	r1, #255	; 0xff
    5098:	9001      	str	r0, [sp, #4]
    509a:	f002 f837 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    509e:	9801      	ldr	r0, [sp, #4]
    50a0:	f001 ffea 	bl	7078 <SdSpiArduinoDriver::deactivate()>
}
    50a4:	4630      	mov	r0, r6
    m_spiActive = false;
    50a6:	74e5      	strb	r5, [r4, #19]
}
    50a8:	b002      	add	sp, #8
    50aa:	bd70      	pop	{r4, r5, r6, pc}

000050ac <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? csd.capacity() : 0;
    50ac:	6803      	ldr	r3, [r0, #0]
    50ae:	4a24      	ldr	r2, [pc, #144]	; (5140 <SharedSpiCard::sectorCount()+0x94>)
    50b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    50b2:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    50b4:	b500      	push	{lr}
    50b6:	b085      	sub	sp, #20
    50b8:	d10e      	bne.n	50d8 <SharedSpiCard::sectorCount()+0x2c>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    50ba:	466a      	mov	r2, sp
    50bc:	2109      	movs	r1, #9
    50be:	f7ff ffbb 	bl	5038 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? csd.capacity() : 0;
    50c2:	b130      	cbz	r0, 50d2 <SharedSpiCard::sectorCount()+0x26>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    50c4:	f89d 3000 	ldrb.w	r3, [sp]
    if (ver == 0) {
    50c8:	099b      	lsrs	r3, r3, #6
    50ca:	d008      	beq.n	50de <SharedSpiCard::sectorCount()+0x32>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    50cc:	2b01      	cmp	r3, #1
    50ce:	d027      	beq.n	5120 <SharedSpiCard::sectorCount()+0x74>
    50d0:	2000      	movs	r0, #0
}
    50d2:	b005      	add	sp, #20
    50d4:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? csd.capacity() : 0;
    50d8:	4669      	mov	r1, sp
    50da:	4798      	blx	r3
    50dc:	e7f1      	b.n	50c2 <SharedSpiCard::sectorCount()+0x16>
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    50de:	f89d 3009 	ldrb.w	r3, [sp, #9]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    50e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    50e6:	f89d 0008 	ldrb.w	r0, [sp, #8]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    50ea:	005b      	lsls	r3, r3, #1
    50ec:	f89d 100a 	ldrb.w	r1, [sp, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    50f0:	0292      	lsls	r2, r2, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    50f2:	f89d c007 	ldrb.w	ip, [sp, #7]
    50f6:	0980      	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    50f8:	f003 0306 	and.w	r3, r3, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    50fc:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5100:	ea40 008c 	orr.w	r0, r0, ip, lsl #2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5104:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
      uint8_t read_bl_len = csd[5] & 15;
    5108:	f89d 1005 	ldrb.w	r1, [sp, #5]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    510c:	4310      	orrs	r0, r2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    510e:	f001 020f 	and.w	r2, r1, #15
    5112:	3001      	adds	r0, #1
    5114:	4413      	add	r3, r2
    5116:	3b07      	subs	r3, #7
    5118:	4098      	lsls	r0, r3
}
    511a:	b005      	add	sp, #20
    511c:	f85d fb04 	ldr.w	pc, [sp], #4
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5120:	f89d 3007 	ldrb.w	r3, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
    5124:	f8bd 0008 	ldrh.w	r0, [sp, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5128:	041b      	lsls	r3, r3, #16
      c_size |= csd[9];
    512a:	ba40      	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    512c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    5130:	b280      	uxth	r0, r0
    5132:	4318      	orrs	r0, r3
      return (c_size + 1) << 10;
    5134:	3001      	adds	r0, #1
    5136:	0280      	lsls	r0, r0, #10
    5138:	b005      	add	sp, #20
    513a:	f85d fb04 	ldr.w	pc, [sp], #4
    513e:	bf00      	nop
    5140:	00005511 	.word	0x00005511

00005144 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    5144:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    5146:	460a      	mov	r2, r1
    5148:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    514a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::readStart(uint32_t sector) {
    514c:	b083      	sub	sp, #12
    514e:	4d16      	ldr	r5, [pc, #88]	; (51a8 <SharedSpiCard::readStart(unsigned long)+0x64>)
    5150:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    5152:	42ab      	cmp	r3, r5
    5154:	d124      	bne.n	51a0 <SharedSpiCard::readStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    5156:	7d80      	ldrb	r0, [r0, #22]
    5158:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    515a:	f04f 0112 	mov.w	r1, #18
    515e:	4620      	mov	r0, r4
    sector <<= 9;
    5160:	bf18      	it	ne
    5162:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    5164:	f7ff fe7a 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5168:	b920      	cbnz	r0, 5174 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    516a:	2301      	movs	r3, #1
  return true;
    516c:	4618      	mov	r0, r3
  m_state = READ_STATE;
    516e:	7523      	strb	r3, [r4, #20]
}
    5170:	b003      	add	sp, #12
    5172:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    5174:	230c      	movs	r3, #12
  if (m_spiActive) {
    5176:	7ce0      	ldrb	r0, [r4, #19]
    5178:	74a3      	strb	r3, [r4, #18]
    517a:	2800      	cmp	r0, #0
    517c:	d0f8      	beq.n	5170 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    517e:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5180:	7c60      	ldrb	r0, [r4, #17]
    5182:	2101      	movs	r1, #1
    5184:	f001 fee4 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5188:	21ff      	movs	r1, #255	; 0xff
    518a:	4628      	mov	r0, r5
    518c:	f001 ffbe 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5190:	4628      	mov	r0, r5
    5192:	f001 ff71 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5196:	2300      	movs	r3, #0
}
    5198:	4618      	mov	r0, r3
    m_spiActive = false;
    519a:	74e3      	strb	r3, [r4, #19]
}
    519c:	b003      	add	sp, #12
    519e:	bd30      	pop	{r4, r5, pc}
    51a0:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    51a2:	4798      	blx	r3
    51a4:	9a01      	ldr	r2, [sp, #4]
    51a6:	e7d7      	b.n	5158 <SharedSpiCard::readStart(unsigned long)+0x14>
    51a8:	00004bfd 	.word	0x00004bfd

000051ac <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    51ac:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    51ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    51b2:	695f      	ldr	r7, [r3, #20]
    51b4:	4b16      	ldr	r3, [pc, #88]	; (5210 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    51b6:	429f      	cmp	r7, r3
    51b8:	d11f      	bne.n	51fa <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    51ba:	7d03      	ldrb	r3, [r0, #20]
    51bc:	4604      	mov	r4, r0
    51be:	460d      	mov	r5, r1
    51c0:	4616      	mov	r6, r2
    51c2:	2b01      	cmp	r3, #1
    51c4:	d102      	bne.n	51cc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    51c6:	6983      	ldr	r3, [r0, #24]
    51c8:	4299      	cmp	r1, r3
    51ca:	d005      	beq.n	51d8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    51cc:	4629      	mov	r1, r5
    51ce:	4620      	mov	r0, r4
    51d0:	f7ff ffb8 	bl	5144 <SharedSpiCard::readStart(unsigned long)>
    51d4:	b170      	cbz	r0, 51f4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    51d6:	61a5      	str	r5, [r4, #24]
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    51d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    51dc:	4631      	mov	r1, r6
    51de:	4620      	mov	r0, r4
    51e0:	f7ff fdb2 	bl	4d48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    51e4:	b130      	cbz	r0, 51f4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
  }
  m_curSector += ns;
    51e6:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    51e8:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    51ea:	3301      	adds	r3, #1
    51ec:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    51ee:	b148      	cbz	r0, 5204 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    51f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

fail:
  return false;
    51f4:	2000      	movs	r0, #0
}
    51f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    51fa:	46bc      	mov	ip, r7
    51fc:	2301      	movs	r3, #1
}
    51fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    5202:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    5204:	4620      	mov	r0, r4
}
    5206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    520a:	f7ff bde3 	b.w	4dd4 <SharedSpiCard::readStop()>
    520e:	bf00      	nop
    5210:	00005589 	.word	0x00005589

00005214 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    5214:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    5216:	460a      	mov	r2, r1
    5218:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    521a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeStart(uint32_t sector) {
    521c:	b083      	sub	sp, #12
    521e:	4d16      	ldr	r5, [pc, #88]	; (5278 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    5220:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    5222:	42ab      	cmp	r3, r5
    5224:	d124      	bne.n	5270 <SharedSpiCard::writeStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    5226:	7d80      	ldrb	r0, [r0, #22]
    5228:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    522a:	f04f 0119 	mov.w	r1, #25
    522e:	4620      	mov	r0, r4
    sector <<= 9;
    5230:	bf18      	it	ne
    5232:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    5234:	f7ff fe12 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5238:	b920      	cbnz	r0, 5244 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    523a:	2302      	movs	r3, #2
  return true;
    523c:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    523e:	7523      	strb	r3, [r4, #20]
}
    5240:	b003      	add	sp, #12
    5242:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    5244:	230e      	movs	r3, #14
  if (m_spiActive) {
    5246:	7ce0      	ldrb	r0, [r4, #19]
    5248:	74a3      	strb	r3, [r4, #18]
    524a:	2800      	cmp	r0, #0
    524c:	d0f8      	beq.n	5240 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    524e:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5250:	7c60      	ldrb	r0, [r4, #17]
    5252:	2101      	movs	r1, #1
    5254:	f001 fe7c 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5258:	21ff      	movs	r1, #255	; 0xff
    525a:	4628      	mov	r0, r5
    525c:	f001 ff56 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5260:	4628      	mov	r0, r5
    5262:	f001 ff09 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5266:	2300      	movs	r3, #0
}
    5268:	4618      	mov	r0, r3
    m_spiActive = false;
    526a:	74e3      	strb	r3, [r4, #19]
}
    526c:	b003      	add	sp, #12
    526e:	bd30      	pop	{r4, r5, pc}
    5270:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    5272:	4798      	blx	r3
    5274:	9a01      	ldr	r2, [sp, #4]
    5276:	e7d7      	b.n	5228 <SharedSpiCard::writeStart(unsigned long)+0x14>
    5278:	00004bfd 	.word	0x00004bfd

0000527c <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    527c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    527e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    5282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5284:	4617      	mov	r7, r2
    5286:	4a41      	ldr	r2, [pc, #260]	; (538c <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    5288:	b085      	sub	sp, #20
    528a:	4604      	mov	r4, r0
    528c:	460e      	mov	r6, r1
    528e:	4293      	cmp	r3, r2
    5290:	d145      	bne.n	531e <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5292:	466a      	mov	r2, sp
    5294:	2109      	movs	r1, #9
    5296:	f7ff fecf 	bl	5038 <SharedSpiCard::readRegister(unsigned char, void*)>
    529a:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    529c:	b1b5      	cbz	r5, 52cc <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    } else {
      return 0;
    }
  }
  /** \return true if erase granularity is single block. */
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    529e:	f89d 300a 	ldrb.w	r3, [sp, #10]
  if (!csd.eraseSingleBlock()) {
    52a2:	065a      	lsls	r2, r3, #25
    52a4:	d518      	bpl.n	52d8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    52a6:	7da3      	ldrb	r3, [r4, #22]
    52a8:	2b03      	cmp	r3, #3
    52aa:	d001      	beq.n	52b0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    52ac:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    52ae:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    52b0:	4632      	mov	r2, r6
    52b2:	2120      	movs	r1, #32
    52b4:	4620      	mov	r0, r4
    52b6:	f7ff fdd1 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    52ba:	b928      	cbnz	r0, 52c8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    52bc:	463a      	mov	r2, r7
    52be:	2121      	movs	r1, #33	; 0x21
    52c0:	4620      	mov	r0, r4
    52c2:	f7ff fdcb 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    52c6:	b370      	cbz	r0, 5326 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    52c8:	2327      	movs	r3, #39	; 0x27
    52ca:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    52cc:	7ce5      	ldrb	r5, [r4, #19]
    52ce:	b99d      	cbnz	r5, 52f8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    52d0:	4628      	mov	r0, r5
    52d2:	b005      	add	sp, #20
    52d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  /** \return erase size in 512 byte blocks if eraseSingleBlock is false. */
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    52d8:	005b      	lsls	r3, r3, #1
    52da:	f89d 200b 	ldrb.w	r2, [sp, #11]
    52de:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    52e2:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    52e6:	1c7a      	adds	r2, r7, #1
    52e8:	4332      	orrs	r2, r6
    52ea:	4213      	tst	r3, r2
    52ec:	d0db      	beq.n	52a6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    52ee:	2328      	movs	r3, #40	; 0x28
  if (m_spiActive) {
    52f0:	7ce5      	ldrb	r5, [r4, #19]
    52f2:	74a3      	strb	r3, [r4, #18]
    52f4:	2d00      	cmp	r5, #0
    52f6:	d0eb      	beq.n	52d0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    52f8:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    52fa:	7c60      	ldrb	r0, [r4, #17]
    52fc:	2101      	movs	r1, #1
    52fe:	f001 fe27 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5302:	21ff      	movs	r1, #255	; 0xff
    5304:	4628      	mov	r0, r5
    5306:	f001 ff01 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    530a:	4628      	mov	r0, r5
    530c:	f001 feb4 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5310:	2300      	movs	r3, #0
  return false;
    5312:	461d      	mov	r5, r3
    m_spiActive = false;
    5314:	74e3      	strb	r3, [r4, #19]
}
    5316:	4628      	mov	r0, r5
    5318:	b005      	add	sp, #20
    531a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    531e:	4669      	mov	r1, sp
    5320:	4798      	blx	r3
    5322:	4605      	mov	r5, r0
    5324:	e7ba      	b.n	529c <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      cardCommand(CMD38, 0)) {
    5326:	4602      	mov	r2, r0
    5328:	2126      	movs	r1, #38	; 0x26
    532a:	4620      	mov	r0, r4
    532c:	f7ff fd96 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    5330:	2800      	cmp	r0, #0
    5332:	d1c9      	bne.n	52c8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    5334:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5390 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5338:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    533c:	f104 0904 	add.w	r9, r4, #4
    5340:	f8d8 3000 	ldr.w	r3, [r8]
    5344:	441f      	add	r7, r3
    5346:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    5348:	e004      	b.n	5354 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    534a:	f8d8 3000 	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    534e:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    5350:	041b      	lsls	r3, r3, #16
    5352:	d417      	bmi.n	5384 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    5354:	4648      	mov	r0, r9
    5356:	f001 febb 	bl	70d0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    535a:	28ff      	cmp	r0, #255	; 0xff
    535c:	4606      	mov	r6, r0
    535e:	d1f4      	bne.n	534a <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    5360:	7ce3      	ldrb	r3, [r4, #19]
    5362:	2b00      	cmp	r3, #0
    5364:	d0b4      	beq.n	52d0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5366:	2101      	movs	r1, #1
    5368:	7c60      	ldrb	r0, [r4, #17]
  return true;
    536a:	461d      	mov	r5, r3
    536c:	f001 fdf0 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5370:	4631      	mov	r1, r6
    5372:	4648      	mov	r0, r9
    5374:	f001 feca 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5378:	4648      	mov	r0, r9
    537a:	f001 fe7d 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    537e:	2300      	movs	r3, #0
    5380:	74e3      	strb	r3, [r4, #19]
}
    5382:	e7a5      	b.n	52d0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    5384:	2329      	movs	r3, #41	; 0x29
    5386:	74a3      	strb	r3, [r4, #18]
    goto fail;
    5388:	e7a0      	b.n	52cc <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    538a:	bf00      	nop
    538c:	00005511 	.word	0x00005511
    5390:	2002945c 	.word	0x2002945c

00005394 <SharedSpiCard::readSCR(scr_t*)>:
bool SharedSpiCard::readSCR(scr_t* scr) {
    5394:	b570      	push	{r4, r5, r6, lr}
    5396:	4604      	mov	r4, r0
    5398:	b082      	sub	sp, #8
    cardCommand(CMD55, 0);
    539a:	2200      	movs	r2, #0
    539c:	460e      	mov	r6, r1
    539e:	2137      	movs	r1, #55	; 0x37
    53a0:	f7ff fd5c 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    53a4:	2200      	movs	r2, #0
    53a6:	2133      	movs	r1, #51	; 0x33
    53a8:	4620      	mov	r0, r4
    53aa:	f7ff fd57 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD51, 0)) {
    53ae:	b1b0      	cbz	r0, 53de <SharedSpiCard::readSCR(scr_t*)+0x4a>
    m_errorCode = code;
    53b0:	2318      	movs	r3, #24
    53b2:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    53b4:	7ce0      	ldrb	r0, [r4, #19]
    53b6:	b908      	cbnz	r0, 53bc <SharedSpiCard::readSCR(scr_t*)+0x28>
}
    53b8:	b002      	add	sp, #8
    53ba:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    53bc:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    53be:	7c60      	ldrb	r0, [r4, #17]
    53c0:	2101      	movs	r1, #1
    53c2:	f001 fdc5 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    53c6:	21ff      	movs	r1, #255	; 0xff
    53c8:	4628      	mov	r0, r5
    53ca:	f001 fe9f 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    53ce:	4628      	mov	r0, r5
    53d0:	f001 fe52 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    53d4:	2300      	movs	r3, #0
  return false;
    53d6:	4618      	mov	r0, r3
    m_spiActive = false;
    53d8:	74e3      	strb	r3, [r4, #19]
}
    53da:	b002      	add	sp, #8
    53dc:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, sizeof(scr_t))) {
    53de:	4605      	mov	r5, r0
    53e0:	2208      	movs	r2, #8
    53e2:	4631      	mov	r1, r6
    53e4:	4620      	mov	r0, r4
    53e6:	f7ff fcaf 	bl	4d48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    53ea:	2800      	cmp	r0, #0
    53ec:	d0e2      	beq.n	53b4 <SharedSpiCard::readSCR(scr_t*)+0x20>
  if (m_spiActive) {
    53ee:	7ce6      	ldrb	r6, [r4, #19]
    53f0:	2e00      	cmp	r6, #0
    53f2:	d0e1      	beq.n	53b8 <SharedSpiCard::readSCR(scr_t*)+0x24>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    53f4:	7c60      	ldrb	r0, [r4, #17]
    53f6:	2101      	movs	r1, #1
    53f8:	f001 fdaa 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    53fc:	1d20      	adds	r0, r4, #4
    53fe:	21ff      	movs	r1, #255	; 0xff
    5400:	9001      	str	r0, [sp, #4]
    5402:	f001 fe83 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5406:	9801      	ldr	r0, [sp, #4]
    5408:	f001 fe36 	bl	7078 <SdSpiArduinoDriver::deactivate()>
}
    540c:	4630      	mov	r0, r6
    m_spiActive = false;
    540e:	74e5      	strb	r5, [r4, #19]
}
    5410:	b002      	add	sp, #8
    5412:	bd70      	pop	{r4, r5, r6, pc}

00005414 <SharedSpiCard::readSDS(sds_t*)>:
bool SharedSpiCard::readSDS(sds_t* sds) {
    5414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5416:	4604      	mov	r4, r0
    cardCommand(CMD55, 0);
    5418:	2200      	movs	r2, #0
    541a:	460d      	mov	r5, r1
    541c:	2137      	movs	r1, #55	; 0x37
    541e:	f7ff fd1d 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    5422:	2200      	movs	r2, #0
    5424:	210d      	movs	r1, #13
    5426:	4620      	mov	r0, r4
    5428:	f7ff fd18 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    542c:	b1a0      	cbz	r0, 5458 <SharedSpiCard::readSDS(sds_t*)+0x44>
    m_errorCode = code;
    542e:	2315      	movs	r3, #21
    5430:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5432:	7ce0      	ldrb	r0, [r4, #19]
    5434:	b900      	cbnz	r0, 5438 <SharedSpiCard::readSDS(sds_t*)+0x24>
}
    5436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_spiDriver.send(data);
    5438:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    543a:	7c60      	ldrb	r0, [r4, #17]
    543c:	2101      	movs	r1, #1
    543e:	f001 fd87 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5442:	21ff      	movs	r1, #255	; 0xff
    5444:	4628      	mov	r0, r5
    5446:	f001 fe61 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    544a:	4628      	mov	r0, r5
    544c:	f001 fe14 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5450:	2300      	movs	r3, #0
  return false;
    5452:	4618      	mov	r0, r3
    m_spiActive = false;
    5454:	74e3      	strb	r3, [r4, #19]
}
    5456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_spiDriver.receive();
    5458:	1d27      	adds	r7, r4, #4
    545a:	4638      	mov	r0, r7
    545c:	f001 fe38 	bl	70d0 <SdSpiArduinoDriver::receive()>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    5460:	4606      	mov	r6, r0
    5462:	2800      	cmp	r0, #0
    5464:	d1e3      	bne.n	542e <SharedSpiCard::readSDS(sds_t*)+0x1a>
  if (!readData(dst, sizeof(sds_t))) {
    5466:	2240      	movs	r2, #64	; 0x40
    5468:	4629      	mov	r1, r5
    546a:	4620      	mov	r0, r4
    546c:	f7ff fc6c 	bl	4d48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5470:	2800      	cmp	r0, #0
    5472:	d0de      	beq.n	5432 <SharedSpiCard::readSDS(sds_t*)+0x1e>
  if (m_spiActive) {
    5474:	7ce5      	ldrb	r5, [r4, #19]
    5476:	2d00      	cmp	r5, #0
    5478:	d0dd      	beq.n	5436 <SharedSpiCard::readSDS(sds_t*)+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    547a:	7c60      	ldrb	r0, [r4, #17]
    547c:	2101      	movs	r1, #1
    547e:	f001 fd67 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5482:	21ff      	movs	r1, #255	; 0xff
    5484:	4638      	mov	r0, r7
    5486:	f001 fe41 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    548a:	4638      	mov	r0, r7
    548c:	f001 fdf4 	bl	7078 <SdSpiArduinoDriver::deactivate()>
  return true;
    5490:	4628      	mov	r0, r5
    m_spiActive = false;
    5492:	74e6      	strb	r6, [r4, #19]
}
    5494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5496:	bf00      	nop

00005498 <SharedSpiCard::readCID(cid_t*)>:
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    5498:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    549a:	2200      	movs	r2, #0
    549c:	b082      	sub	sp, #8
    549e:	460e      	mov	r6, r1
    54a0:	210a      	movs	r1, #10
    54a2:	4604      	mov	r4, r0
    54a4:	f7ff fcda 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    54a8:	b1b0      	cbz	r0, 54d8 <SharedSpiCard::readCID(cid_t*)+0x40>
    m_errorCode = code;
    54aa:	231c      	movs	r3, #28
    54ac:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    54ae:	7ce0      	ldrb	r0, [r4, #19]
    54b0:	b908      	cbnz	r0, 54b6 <SharedSpiCard::readCID(cid_t*)+0x1e>
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    54b2:	b002      	add	sp, #8
    54b4:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    54b6:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    54b8:	7c60      	ldrb	r0, [r4, #17]
    54ba:	2101      	movs	r1, #1
    54bc:	f001 fd48 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    54c0:	21ff      	movs	r1, #255	; 0xff
    54c2:	4628      	mov	r0, r5
    54c4:	f001 fe22 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    54c8:	4628      	mov	r0, r5
    54ca:	f001 fdd5 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    54ce:	2300      	movs	r3, #0
  return false;
    54d0:	4618      	mov	r0, r3
    m_spiActive = false;
    54d2:	74e3      	strb	r3, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    54d4:	b002      	add	sp, #8
    54d6:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    54d8:	4605      	mov	r5, r0
    54da:	2210      	movs	r2, #16
    54dc:	4631      	mov	r1, r6
    54de:	4620      	mov	r0, r4
    54e0:	f7ff fc32 	bl	4d48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    54e4:	2800      	cmp	r0, #0
    54e6:	d0e2      	beq.n	54ae <SharedSpiCard::readCID(cid_t*)+0x16>
  if (m_spiActive) {
    54e8:	7ce6      	ldrb	r6, [r4, #19]
    54ea:	2e00      	cmp	r6, #0
    54ec:	d0e1      	beq.n	54b2 <SharedSpiCard::readCID(cid_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    54ee:	7c60      	ldrb	r0, [r4, #17]
    54f0:	2101      	movs	r1, #1
    54f2:	f001 fd2d 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    54f6:	1d20      	adds	r0, r4, #4
    54f8:	21ff      	movs	r1, #255	; 0xff
    54fa:	9001      	str	r0, [sp, #4]
    54fc:	f001 fe06 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5500:	9801      	ldr	r0, [sp, #4]
    5502:	f001 fdb9 	bl	7078 <SdSpiArduinoDriver::deactivate()>
}
    5506:	4630      	mov	r0, r6
    m_spiActive = false;
    5508:	74e5      	strb	r5, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    550a:	b002      	add	sp, #8
    550c:	bd70      	pop	{r4, r5, r6, pc}
    550e:	bf00      	nop

00005510 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5510:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    5512:	2200      	movs	r2, #0
    5514:	b082      	sub	sp, #8
    5516:	460e      	mov	r6, r1
    5518:	2109      	movs	r1, #9
    551a:	4604      	mov	r4, r0
    551c:	f7ff fc9e 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5520:	b1b0      	cbz	r0, 5550 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    5522:	231c      	movs	r3, #28
    5524:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5526:	7ce0      	ldrb	r0, [r4, #19]
    5528:	b908      	cbnz	r0, 552e <SharedSpiCard::readCSD(csd_t*)+0x1e>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    552a:	b002      	add	sp, #8
    552c:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    552e:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5530:	7c60      	ldrb	r0, [r4, #17]
    5532:	2101      	movs	r1, #1
    5534:	f001 fd0c 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5538:	21ff      	movs	r1, #255	; 0xff
    553a:	4628      	mov	r0, r5
    553c:	f001 fde6 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5540:	4628      	mov	r0, r5
    5542:	f001 fd99 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5546:	2300      	movs	r3, #0
  return false;
    5548:	4618      	mov	r0, r3
    m_spiActive = false;
    554a:	74e3      	strb	r3, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    554c:	b002      	add	sp, #8
    554e:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    5550:	4605      	mov	r5, r0
    5552:	2210      	movs	r2, #16
    5554:	4631      	mov	r1, r6
    5556:	4620      	mov	r0, r4
    5558:	f7ff fbf6 	bl	4d48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    555c:	2800      	cmp	r0, #0
    555e:	d0e2      	beq.n	5526 <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    5560:	7ce6      	ldrb	r6, [r4, #19]
    5562:	2e00      	cmp	r6, #0
    5564:	d0e1      	beq.n	552a <SharedSpiCard::readCSD(csd_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5566:	7c60      	ldrb	r0, [r4, #17]
    5568:	2101      	movs	r1, #1
    556a:	f001 fcf1 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    556e:	1d20      	adds	r0, r4, #4
    5570:	21ff      	movs	r1, #255	; 0xff
    5572:	9001      	str	r0, [sp, #4]
    5574:	f001 fdca 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5578:	9801      	ldr	r0, [sp, #4]
    557a:	f001 fd7d 	bl	7078 <SdSpiArduinoDriver::deactivate()>
}
    557e:	4630      	mov	r0, r6
    m_spiActive = false;
    5580:	74e5      	strb	r5, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5582:	b002      	add	sp, #8
    5584:	bd70      	pop	{r4, r5, r6, pc}
    5586:	bf00      	nop

00005588 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    5588:	b5f0      	push	{r4, r5, r6, r7, lr}
    558a:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    558c:	7d02      	ldrb	r2, [r0, #20]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    558e:	b083      	sub	sp, #12
    5590:	4606      	mov	r6, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
    5592:	2a01      	cmp	r2, #1
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    5594:	460d      	mov	r5, r1
    5596:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    5598:	d102      	bne.n	55a0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
    559a:	6983      	ldr	r3, [r0, #24]
    559c:	428b      	cmp	r3, r1
    559e:	d005      	beq.n	55ac <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    55a0:	4629      	mov	r1, r5
    55a2:	4630      	mov	r0, r6
    55a4:	f7ff fdce 	bl	5144 <SharedSpiCard::readStart(unsigned long)>
    55a8:	b180      	cbz	r0, 55cc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_curSector = sector;
    55aa:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    55ac:	b197      	cbz	r7, 55d4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    if (!readStart(sector)) {
    55ae:	2500      	movs	r5, #0
    55b0:	e001      	b.n	55b6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    55b2:	42af      	cmp	r7, r5
    55b4:	d00e      	beq.n	55d4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    55b6:	4621      	mov	r1, r4
    55b8:	f44f 7200 	mov.w	r2, #512	; 0x200
    55bc:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    55be:	3501      	adds	r5, #1
    55c0:	f504 7400 	add.w	r4, r4, #512	; 0x200
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    55c4:	f7ff fbc0 	bl	4d48 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    55c8:	2800      	cmp	r0, #0
    55ca:	d1f2      	bne.n	55b2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
  return false;
    55cc:	2400      	movs	r4, #0
}
    55ce:	4620      	mov	r0, r4
    55d0:	b003      	add	sp, #12
    55d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_curSector += ns;
    55d4:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    55d6:	7f34      	ldrb	r4, [r6, #28]
  m_curSector += ns;
    55d8:	443b      	add	r3, r7
    55da:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    55dc:	b11c      	cbz	r4, 55e6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
    55de:	2401      	movs	r4, #1
}
    55e0:	4620      	mov	r0, r4
    55e2:	b003      	add	sp, #12
    55e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cardCommand(CMD12, 0)) {
    55e6:	4622      	mov	r2, r4
    55e8:	210c      	movs	r1, #12
    55ea:	4630      	mov	r0, r6
  m_state = IDLE_STATE;
    55ec:	7534      	strb	r4, [r6, #20]
  if (cardCommand(CMD12, 0)) {
    55ee:	f7ff fc35 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    55f2:	4605      	mov	r5, r0
    55f4:	b980      	cbnz	r0, 5618 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
  if (m_spiActive) {
    55f6:	7cf4      	ldrb	r4, [r6, #19]
    55f8:	2c00      	cmp	r4, #0
    55fa:	d0f0      	beq.n	55de <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    55fc:	2101      	movs	r1, #1
    55fe:	7c70      	ldrb	r0, [r6, #17]
    5600:	f001 fca6 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5604:	1d30      	adds	r0, r6, #4
    5606:	21ff      	movs	r1, #255	; 0xff
    5608:	9001      	str	r0, [sp, #4]
    560a:	f001 fd7f 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    560e:	9801      	ldr	r0, [sp, #4]
    5610:	f001 fd32 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5614:	74f5      	strb	r5, [r6, #19]
}
    5616:	e7da      	b.n	55ce <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    m_errorCode = code;
    5618:	2209      	movs	r2, #9
  if (m_spiActive) {
    561a:	7cf3      	ldrb	r3, [r6, #19]
    561c:	74b2      	strb	r2, [r6, #18]
    561e:	2b00      	cmp	r3, #0
    5620:	d0d4      	beq.n	55cc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_spiDriver.send(data);
    5622:	1d35      	adds	r5, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5624:	2101      	movs	r1, #1
    5626:	7c70      	ldrb	r0, [r6, #17]
    5628:	f001 fc92 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    562c:	21ff      	movs	r1, #255	; 0xff
    562e:	4628      	mov	r0, r5
    5630:	f001 fd6c 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5634:	4628      	mov	r0, r5
    5636:	f001 fd1f 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    563a:	74f4      	strb	r4, [r6, #19]
}
    563c:	e7c7      	b.n	55ce <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    563e:	bf00      	nop

00005640 <DedicatedSpiCard::setDedicatedSpi(bool)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
  if (!syncDevice()) {
    5640:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    5642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    5646:	69da      	ldr	r2, [r3, #28]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    5648:	b082      	sub	sp, #8
    564a:	4d24      	ldr	r5, [pc, #144]	; (56dc <DedicatedSpiCard::setDedicatedSpi(bool)+0x9c>)
    564c:	4604      	mov	r4, r0
    564e:	460e      	mov	r6, r1
    5650:	42aa      	cmp	r2, r5
    5652:	d111      	bne.n	5678 <DedicatedSpiCard::setDedicatedSpi(bool)+0x38>
  if (m_state == WRITE_STATE) {
    5654:	7d05      	ldrb	r5, [r0, #20]
    5656:	2d02      	cmp	r5, #2
    5658:	d006      	beq.n	5668 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
  if (m_state == READ_STATE) {
    565a:	2d01      	cmp	r5, #1
    565c:	d00e      	beq.n	567c <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>
    return false;
  }
  m_dedicatedSpi = value;
  return true;
    565e:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    5660:	7726      	strb	r6, [r4, #28]
}
    5662:	b002      	add	sp, #8
    5664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    5668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    566a:	4798      	blx	r3
  if (!syncDevice()) {
    566c:	2800      	cmp	r0, #0
    566e:	d1f6      	bne.n	565e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    return false;
    5670:	2000      	movs	r0, #0
}
    5672:	b002      	add	sp, #8
    5674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncDevice()) {
    5678:	4790      	blx	r2
    567a:	e7f7      	b.n	566c <DedicatedSpiCard::setDedicatedSpi(bool)+0x2c>
  m_state = IDLE_STATE;
    567c:	f04f 0800 	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    5680:	210c      	movs	r1, #12
    5682:	4642      	mov	r2, r8
  m_state = IDLE_STATE;
    5684:	f880 8014 	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    5688:	f7ff fbe8 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    568c:	4607      	mov	r7, r0
    568e:	b980      	cbnz	r0, 56b2 <DedicatedSpiCard::setDedicatedSpi(bool)+0x72>
  if (m_spiActive) {
    5690:	7ce3      	ldrb	r3, [r4, #19]
    5692:	2b00      	cmp	r3, #0
    5694:	d0e3      	beq.n	565e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5696:	4629      	mov	r1, r5
    5698:	7c60      	ldrb	r0, [r4, #17]
    569a:	f001 fc59 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    569e:	1d20      	adds	r0, r4, #4
    56a0:	21ff      	movs	r1, #255	; 0xff
    56a2:	9001      	str	r0, [sp, #4]
    56a4:	f001 fd32 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    56a8:	9801      	ldr	r0, [sp, #4]
    56aa:	f001 fce5 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    56ae:	74e7      	strb	r7, [r4, #19]
    56b0:	e7d5      	b.n	565e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    m_errorCode = code;
    56b2:	2209      	movs	r2, #9
  if (m_spiActive) {
    56b4:	7ce3      	ldrb	r3, [r4, #19]
    56b6:	74a2      	strb	r2, [r4, #18]
    56b8:	2b00      	cmp	r3, #0
    56ba:	d0d9      	beq.n	5670 <DedicatedSpiCard::setDedicatedSpi(bool)+0x30>
    m_spiDriver.send(data);
    56bc:	1d26      	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    56be:	4629      	mov	r1, r5
    56c0:	7c60      	ldrb	r0, [r4, #17]
    56c2:	f001 fc45 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    56c6:	21ff      	movs	r1, #255	; 0xff
    56c8:	4630      	mov	r0, r6
    56ca:	f001 fd1f 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    56ce:	4630      	mov	r0, r6
    56d0:	f001 fcd2 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    return false;
    56d4:	4640      	mov	r0, r8
    m_spiActive = false;
    56d6:	f884 8013 	strb.w	r8, [r4, #19]
    56da:	e7c2      	b.n	5662 <DedicatedSpiCard::setDedicatedSpi(bool)+0x22>
    56dc:	00004e45 	.word	0x00004e45

000056e0 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    56e0:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    56e2:	1d05      	adds	r5, r0, #4
    56e4:	4616      	mov	r6, r2
    56e6:	4604      	mov	r4, r0
    56e8:	4628      	mov	r0, r5
    56ea:	f001 fd0f 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    56ee:	f44f 7200 	mov.w	r2, #512	; 0x200
    56f2:	4631      	mov	r1, r6
    56f4:	4628      	mov	r0, r5
    56f6:	f001 fd13 	bl	7120 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    56fa:	21ff      	movs	r1, #255	; 0xff
    56fc:	4628      	mov	r0, r5
    56fe:	f001 fd05 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
    5702:	21ff      	movs	r1, #255	; 0xff
    5704:	4628      	mov	r0, r5
    5706:	f001 fd01 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    570a:	4628      	mov	r0, r5
    570c:	f001 fce0 	bl	70d0 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5710:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    5714:	7560      	strb	r0, [r4, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5716:	2b05      	cmp	r3, #5
    5718:	d004      	beq.n	5724 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    571a:	2321      	movs	r3, #33	; 0x21
  if (m_spiActive) {
    571c:	7ce0      	ldrb	r0, [r4, #19]
    571e:	74a3      	strb	r3, [r4, #18]
    5720:	b910      	cbnz	r0, 5728 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    5722:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    5724:	2001      	movs	r0, #1
}
    5726:	bd70      	pop	{r4, r5, r6, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5728:	7c60      	ldrb	r0, [r4, #17]
    572a:	2101      	movs	r1, #1
    572c:	f001 fc10 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5730:	21ff      	movs	r1, #255	; 0xff
    5732:	4628      	mov	r0, r5
    5734:	f001 fcea 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5738:	4628      	mov	r0, r5
    573a:	f001 fc9d 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    573e:	2300      	movs	r3, #0
}
    5740:	4618      	mov	r0, r3
    m_spiActive = false;
    5742:	74e3      	strb	r3, [r4, #19]
}
    5744:	bd70      	pop	{r4, r5, r6, pc}
    5746:	bf00      	nop

00005748 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    5748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    574c:	4d17      	ldr	r5, [pc, #92]	; (57ac <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    574e:	4606      	mov	r6, r0
    5750:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    5752:	f100 0804 	add.w	r8, r0, #4
    5756:	682c      	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5758:	f504 7416 	add.w	r4, r4, #600	; 0x258
    575c:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    575e:	e003      	b.n	5768 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    5760:	682b      	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5762:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    5764:	041b      	lsls	r3, r3, #16
    5766:	d40c      	bmi.n	5782 <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    5768:	4640      	mov	r0, r8
    576a:	f001 fcb1 	bl	70d0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    576e:	28ff      	cmp	r0, #255	; 0xff
    5770:	d1f6      	bne.n	5760 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    5772:	463a      	mov	r2, r7
    5774:	21fc      	movs	r1, #252	; 0xfc
    5776:	4630      	mov	r0, r6
    5778:	f7ff ffb2 	bl	56e0 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    577c:	b118      	cbz	r0, 5786 <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    577e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    5782:	2325      	movs	r3, #37	; 0x25
    5784:	74b3      	strb	r3, [r6, #18]
  if (m_spiActive) {
    5786:	7cf0      	ldrb	r0, [r6, #19]
    5788:	2800      	cmp	r0, #0
    578a:	d0f8      	beq.n	577e <SharedSpiCard::writeData(unsigned char const*)+0x36>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    578c:	7c70      	ldrb	r0, [r6, #17]
    578e:	2101      	movs	r1, #1
    5790:	f001 fbde 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5794:	21ff      	movs	r1, #255	; 0xff
    5796:	4640      	mov	r0, r8
    5798:	f001 fcb8 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    579c:	4640      	mov	r0, r8
    579e:	f001 fc6b 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    57a2:	2300      	movs	r3, #0
}
    57a4:	4618      	mov	r0, r3
    m_spiActive = false;
    57a6:	74f3      	strb	r3, [r6, #19]
}
    57a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57ac:	2002945c 	.word	0x2002945c

000057b0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    57b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    57b4:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    57b6:	4615      	mov	r5, r2
    57b8:	4a35      	ldr	r2, [pc, #212]	; (5890 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    57ba:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    57bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    57be:	460e      	mov	r6, r1
    57c0:	4293      	cmp	r3, r2
    57c2:	d15c      	bne.n	587e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xce>
  uint8_t type() const { return m_type; }
    57c4:	7d80      	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    57c6:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    57c8:	f04f 0118 	mov.w	r1, #24
    57cc:	4620      	mov	r0, r4
    sector <<= 9;
    57ce:	bf18      	it	ne
    57d0:	0276      	lslne	r6, r6, #9
  if (cardCommand(CMD24, sector)) {
    57d2:	4632      	mov	r2, r6
    57d4:	f7ff fb42 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    57d8:	b148      	cbz	r0, 57ee <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    m_errorCode = code;
    57da:	230d      	movs	r3, #13
    57dc:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    57de:	f894 9013 	ldrb.w	r9, [r4, #19]
    57e2:	f1b9 0f00 	cmp.w	r9, #0
    57e6:	d138      	bne.n	585a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xaa>
}
    57e8:	4648      	mov	r0, r9
    57ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    57ee:	462a      	mov	r2, r5
    57f0:	21fe      	movs	r1, #254	; 0xfe
    57f2:	4620      	mov	r0, r4
    57f4:	f7ff ff74 	bl	56e0 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    57f8:	4681      	mov	r9, r0
    57fa:	2800      	cmp	r0, #0
    57fc:	d0ef      	beq.n	57de <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    57fe:	4f25      	ldr	r7, [pc, #148]	; (5894 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    return m_spiDriver.receive();
    5800:	f104 0804 	add.w	r8, r4, #4
    5804:	683e      	ldr	r6, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5806:	f506 7616 	add.w	r6, r6, #600	; 0x258
    580a:	b2b6      	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    580c:	e003      	b.n	5816 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x66>
    580e:	683b      	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5810:	1af3      	subs	r3, r6, r3
    if (timeout.timedOut()) {
    5812:	041b      	lsls	r3, r3, #16
    5814:	d438      	bmi.n	5888 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd8>
    5816:	4640      	mov	r0, r8
    5818:	f001 fc5a 	bl	70d0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    581c:	28ff      	cmp	r0, #255	; 0xff
    581e:	4605      	mov	r5, r0
    5820:	d1f5      	bne.n	580e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
    5822:	2200      	movs	r2, #0
    5824:	210d      	movs	r1, #13
    5826:	4620      	mov	r0, r4
    5828:	f7ff fb18 	bl	4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    582c:	bb48      	cbnz	r0, 5882 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
    582e:	4640      	mov	r0, r8
    5830:	f001 fc4e 	bl	70d0 <SdSpiArduinoDriver::receive()>
    5834:	4606      	mov	r6, r0
    5836:	bb20      	cbnz	r0, 5882 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
  if (m_spiActive) {
    5838:	7ce3      	ldrb	r3, [r4, #19]
    583a:	2b00      	cmp	r3, #0
    583c:	d0d4      	beq.n	57e8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    583e:	2101      	movs	r1, #1
    5840:	7c60      	ldrb	r0, [r4, #17]
  return true;
    5842:	4699      	mov	r9, r3
    5844:	f001 fb84 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5848:	4629      	mov	r1, r5
    584a:	4640      	mov	r0, r8
    584c:	f001 fc5e 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5850:	4640      	mov	r0, r8
    5852:	f001 fc11 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5856:	74e6      	strb	r6, [r4, #19]
}
    5858:	e7c6      	b.n	57e8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    m_spiDriver.send(data);
    585a:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    585c:	7c60      	ldrb	r0, [r4, #17]
    585e:	2101      	movs	r1, #1
    5860:	f001 fb76 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5864:	21ff      	movs	r1, #255	; 0xff
    5866:	4628      	mov	r0, r5
    5868:	f001 fc50 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    586c:	4628      	mov	r0, r5
    586e:	f001 fc03 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5872:	2300      	movs	r3, #0
  return false;
    5874:	4699      	mov	r9, r3
    m_spiActive = false;
    5876:	74e3      	strb	r3, [r4, #19]
}
    5878:	4648      	mov	r0, r9
    587a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    587e:	4798      	blx	r3
    5880:	e7a1      	b.n	57c6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    m_errorCode = code;
    5882:	230a      	movs	r3, #10
    5884:	74a3      	strb	r3, [r4, #18]
    goto fail;
    5886:	e7aa      	b.n	57de <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    5888:	2324      	movs	r3, #36	; 0x24
    588a:	74a3      	strb	r3, [r4, #18]
    goto fail;
    588c:	e7a7      	b.n	57de <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    588e:	bf00      	nop
    5890:	00004bfd 	.word	0x00004bfd
    5894:	2002945c 	.word	0x2002945c

00005898 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    5898:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    589a:	7f04      	ldrb	r4, [r0, #28]
    589c:	b134      	cbz	r4, 58ac <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    589e:	6804      	ldr	r4, [r0, #0]
    58a0:	2301      	movs	r3, #1
    58a2:	6a64      	ldr	r4, [r4, #36]	; 0x24
    58a4:	46a4      	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    58a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    58aa:	4760      	bx	ip
}
    58ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    58b0:	f7ff bf7e 	b.w	57b0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

000058b4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    58b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58b8:	469a      	mov	sl, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    58ba:	7d03      	ldrb	r3, [r0, #20]
                                    size_t ns) {
    58bc:	b081      	sub	sp, #4
    58be:	4607      	mov	r7, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    58c0:	2b02      	cmp	r3, #2
                                    size_t ns) {
    58c2:	460c      	mov	r4, r1
    58c4:	4690      	mov	r8, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    58c6:	d059      	beq.n	597c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    if (!writeStart(sector)) {
    58c8:	683b      	ldr	r3, [r7, #0]
    58ca:	4621      	mov	r1, r4
    58cc:	4638      	mov	r0, r7
    58ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    58d0:	4798      	blx	r3
    58d2:	2800      	cmp	r0, #0
    58d4:	d037      	beq.n	5946 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
      goto fail;
    }
    m_curSector = sector;
    58d6:	61bc      	str	r4, [r7, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    58d8:	f1ba 0f00 	cmp.w	sl, #0
    58dc:	d023      	beq.n	5926 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x72>
    if (!writeStart(sector)) {
    58de:	f04f 0900 	mov.w	r9, #0
    58e2:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 5988 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd4>
    58e6:	4d27      	ldr	r5, [pc, #156]	; (5984 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd0>)
    return m_spiDriver.receive();
    58e8:	1d3e      	adds	r6, r7, #4
    if (!writeData(src)) {
    58ea:	683b      	ldr	r3, [r7, #0]
    58ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    58ee:	455b      	cmp	r3, fp
    58f0:	d12d      	bne.n	594e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x9a>
    58f2:	682c      	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    58f4:	f504 7416 	add.w	r4, r4, #600	; 0x258
    58f8:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    58fa:	e003      	b.n	5904 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    58fc:	682b      	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    58fe:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    5900:	041b      	lsls	r3, r3, #16
    5902:	d41c      	bmi.n	593e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8a>
    5904:	4630      	mov	r0, r6
    5906:	f001 fbe3 	bl	70d0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    590a:	28ff      	cmp	r0, #255	; 0xff
    590c:	d1f6      	bne.n	58fc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    590e:	4642      	mov	r2, r8
    5910:	21fc      	movs	r1, #252	; 0xfc
    5912:	4638      	mov	r0, r7
    5914:	f7ff fee4 	bl	56e0 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5918:	b198      	cbz	r0, 5942 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8e>
  for (size_t i = 0; i < ns; i++, src += 512) {
    591a:	f109 0901 	add.w	r9, r9, #1
    591e:	f508 7800 	add.w	r8, r8, #512	; 0x200
    5922:	45ca      	cmp	sl, r9
    5924:	d1e1      	bne.n	58ea <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
      goto fail;
    }
  }
  m_curSector += ns;
    5926:	69bb      	ldr	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    5928:	7f38      	ldrb	r0, [r7, #28]
  m_curSector += ns;
    592a:	4453      	add	r3, sl
    592c:	61bb      	str	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    592e:	b958      	cbnz	r0, 5948 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x94>
    5930:	683b      	ldr	r3, [r7, #0]
    5932:	4638      	mov	r0, r7
    5934:	6e9b      	ldr	r3, [r3, #104]	; 0x68

fail:
  return false;
}
    5936:	b001      	add	sp, #4
    5938:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : writeStop();
    593c:	4718      	bx	r3
    m_errorCode = code;
    593e:	2325      	movs	r3, #37	; 0x25
    5940:	74bb      	strb	r3, [r7, #18]
  if (m_spiActive) {
    5942:	7cfb      	ldrb	r3, [r7, #19]
    5944:	b94b      	cbnz	r3, 595a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xa6>
  return false;
    5946:	2000      	movs	r0, #0
}
    5948:	b001      	add	sp, #4
    594a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!writeData(src)) {
    594e:	4641      	mov	r1, r8
    5950:	4638      	mov	r0, r7
    5952:	4798      	blx	r3
    5954:	2800      	cmp	r0, #0
    5956:	d1e0      	bne.n	591a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x66>
    5958:	e7f5      	b.n	5946 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    595a:	7c78      	ldrb	r0, [r7, #17]
    595c:	2101      	movs	r1, #1
    595e:	f001 faf7 	bl	6f50 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5962:	21ff      	movs	r1, #255	; 0xff
    5964:	4630      	mov	r0, r6
    5966:	f001 fbd1 	bl	710c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    596a:	4630      	mov	r0, r6
    596c:	f001 fb84 	bl	7078 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5970:	2300      	movs	r3, #0
  return false;
    5972:	4618      	mov	r0, r3
    m_spiActive = false;
    5974:	74fb      	strb	r3, [r7, #19]
}
    5976:	b001      	add	sp, #4
    5978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    597c:	6983      	ldr	r3, [r0, #24]
    597e:	428b      	cmp	r3, r1
    5980:	d1a2      	bne.n	58c8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
    5982:	e7a9      	b.n	58d8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
    5984:	2002945c 	.word	0x2002945c
    5988:	00005749 	.word	0x00005749

0000598c <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() { return false; }
    598c:	2000      	movs	r0, #0
    598e:	4770      	bx	lr

00005990 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() { return false; }
    5990:	2000      	movs	r0, #0
    5992:	4770      	bx	lr

00005994 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    5994:	2000      	movs	r0, #0
    5996:	4770      	bx	lr

00005998 <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    5998:	4770      	bx	lr
    599a:	bf00      	nop

0000599c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    599c:	4b08      	ldr	r3, [pc, #32]	; (59c0 <sdIrs()+0x24>)
    599e:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    59a0:	4a08      	ldr	r2, [pc, #32]	; (59c4 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    59a2:	4809      	ldr	r0, [pc, #36]	; (59c8 <sdIrs()+0x2c>)
static void sdIrs() {
    59a4:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    59a6:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    59a8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    59aa:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    59ac:	6812      	ldr	r2, [r2, #0]
}
    59ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    59b2:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    59b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    59b6:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    59ba:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    59bc:	7001      	strb	r1, [r0, #0]
}
    59be:	4770      	bx	lr
    59c0:	402c0000 	.word	0x402c0000
    59c4:	20028868 	.word	0x20028868
    59c8:	2002949e 	.word	0x2002949e

000059cc <isBusyDat()>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    59cc:	4b03      	ldr	r3, [pc, #12]	; (59dc <isBusyDat()+0x10>)
    59ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
    59d0:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    59d4:	f3c0 6000 	ubfx	r0, r0, #24, #1
    59d8:	4770      	bx	lr
    59da:	bf00      	nop
    59dc:	402c0000 	.word	0x402c0000

000059e0 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    59e0:	4b01      	ldr	r3, [pc, #4]	; (59e8 <isBusyDMA()+0x8>)
    59e2:	7818      	ldrb	r0, [r3, #0]
    59e4:	4770      	bx	lr
    59e6:	bf00      	nop
    59e8:	2002949e 	.word	0x2002949e

000059ec <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    59ec:	4a2b      	ldr	r2, [pc, #172]	; (5a9c <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    59ee:	4b2c      	ldr	r3, [pc, #176]	; (5aa0 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    59f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    59f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    59f6:	492b      	ldr	r1, [pc, #172]	; (5aa4 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    59f8:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    59fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5a00:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    5a02:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5a04:	4c28      	ldr	r4, [pc, #160]	; (5aa8 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    5a06:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5a0a:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000 * kHzMax;
    5a0e:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5a12:	089b      	lsrs	r3, r3, #2
    5a14:	fbb1 fef3 	udiv	lr, r1, r3
    5a18:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5a1c:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    5a20:	d235      	bcs.n	5a8e <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    5a22:	2301      	movs	r3, #1
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    5a24:	461e      	mov	r6, r3
    5a26:	005b      	lsls	r3, r3, #1
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5a28:	011a      	lsls	r2, r3, #4
    5a2a:	fbbe f2f2 	udiv	r2, lr, r2
    5a2e:	4282      	cmp	r2, r0
    5a30:	d901      	bls.n	5a36 <setSdclk(unsigned long)+0x4a>
    5a32:	2bff      	cmp	r3, #255	; 0xff
    5a34:	d9f6      	bls.n	5a24 <setSdclk(unsigned long)+0x38>
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5a36:	fbbe f2f3 	udiv	r2, lr, r3
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    5a3a:	0236      	lsls	r6, r6, #8
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5a3c:	4290      	cmp	r0, r2
    5a3e:	d22a      	bcs.n	5a96 <setSdclk(unsigned long)+0xaa>
    5a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5a44:	2201      	movs	r2, #1
    5a46:	e000      	b.n	5a4a <setSdclk(unsigned long)+0x5e>
    5a48:	46a4      	mov	ip, r4
    dvs++;
    5a4a:	4615      	mov	r5, r2
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5a4c:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    5a50:	3201      	adds	r2, #1
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5a52:	fbbe f1fc 	udiv	r1, lr, ip
    5a56:	4281      	cmp	r1, r0
    5a58:	d917      	bls.n	5a8a <setSdclk(unsigned long)+0x9e>
    5a5a:	2a10      	cmp	r2, #16
    5a5c:	d1f4      	bne.n	5a48 <setSdclk(unsigned long)+0x5c>
    5a5e:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    5a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5a64:	4911      	ldr	r1, [pc, #68]	; (5aac <setSdclk(unsigned long)+0xc0>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    5a66:	4a12      	ldr	r2, [pc, #72]	; (5ab0 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    5a68:	fb03 fc0c 	mul.w	ip, r3, ip
    5a6c:	fbbe f3fc 	udiv	r3, lr, ip
    5a70:	600b      	str	r3, [r1, #0]
                      SDHC_SYSCTL_SDCLKFS_MASK);
    5a72:	4b10      	ldr	r3, [pc, #64]	; (5ab4 <setSdclk(unsigned long)+0xc8>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    5a74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);
    5a76:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    5a78:	432b      	orrs	r3, r5
    5a7a:	4333      	orrs	r3, r6
    5a7c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
    5a80:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    5a82:	6a53      	ldr	r3, [r2, #36]	; 0x24
    5a84:	071b      	lsls	r3, r3, #28
    5a86:	d5fc      	bpl.n	5a82 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    5a88:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    5a8a:	012d      	lsls	r5, r5, #4
    5a8c:	e7e8      	b.n	5a60 <setSdclk(unsigned long)+0x74>
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5a8e:	4672      	mov	r2, lr
    5a90:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    5a92:	2301      	movs	r3, #1
    5a94:	e7d2      	b.n	5a3c <setSdclk(unsigned long)+0x50>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5a96:	469c      	mov	ip, r3
    5a98:	2500      	movs	r5, #0
    5a9a:	e7e1      	b.n	5a60 <setSdclk(unsigned long)+0x74>
    5a9c:	400fc000 	.word	0x400fc000
    5aa0:	400d8000 	.word	0x400d8000
    5aa4:	5e69ec00 	.word	0x5e69ec00
    5aa8:	aaaaaaab 	.word	0xaaaaaaab
    5aac:	2000df40 	.word	0x2000df40
    5ab0:	402c0000 	.word	0x402c0000
    5ab4:	fff0000f 	.word	0xfff0000f

00005ab8 <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    5ab8:	4b01      	ldr	r3, [pc, #4]	; (5ac0 <SdioCard::errorCode() const+0x8>)
    5aba:	7818      	ldrb	r0, [r3, #0]
    5abc:	4770      	bx	lr
    5abe:	bf00      	nop
    5ac0:	20008bf6 	.word	0x20008bf6

00005ac4 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    5ac4:	4b01      	ldr	r3, [pc, #4]	; (5acc <SdioCard::errorData() const+0x8>)
    5ac6:	6818      	ldr	r0, [r3, #0]
    5ac8:	4770      	bx	lr
    5aca:	bf00      	nop
    5acc:	20028868 	.word	0x20028868

00005ad0 <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    5ad0:	b410      	push	{r4}
  memcpy(cid, &m_cid, sizeof(cid_t));
    5ad2:	4c07      	ldr	r4, [pc, #28]	; (5af0 <SdioCard::readCID(cid_t*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    5ad4:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    5ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5ad8:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    5adc:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
    5ade:	f8cc 1004 	str.w	r1, [ip, #4]
    5ae2:	f8cc 2008 	str.w	r2, [ip, #8]
    5ae6:	f8cc 300c 	str.w	r3, [ip, #12]
}
    5aea:	f85d 4b04 	ldr.w	r4, [sp], #4
    5aee:	4770      	bx	lr
    5af0:	20028154 	.word	0x20028154

00005af4 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    5af4:	b410      	push	{r4}
  memcpy(csd, &m_csd, sizeof(csd_t));
    5af6:	4c07      	ldr	r4, [pc, #28]	; (5b14 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    5af8:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    5afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5afc:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    5b00:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, sizeof(csd_t));
    5b02:	f8cc 1004 	str.w	r1, [ip, #4]
    5b06:	f8cc 2008 	str.w	r2, [ip, #8]
    5b0a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    5b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    5b12:	4770      	bx	lr
    5b14:	20028164 	.word	0x20028164

00005b18 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    5b18:	4b02      	ldr	r3, [pc, #8]	; (5b24 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    5b1a:	2001      	movs	r0, #1
  *ocr = m_ocr;
    5b1c:	681b      	ldr	r3, [r3, #0]
    5b1e:	600b      	str	r3, [r1, #0]
}
    5b20:	4770      	bx	lr
    5b22:	bf00      	nop
    5b24:	20028174 	.word	0x20028174

00005b28 <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    5b28:	4a03      	ldr	r2, [pc, #12]	; (5b38 <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readSCR(scr_t* scr) {
    5b2a:	460b      	mov	r3, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    5b2c:	ca03      	ldmia	r2!, {r0, r1}
    5b2e:	6018      	str	r0, [r3, #0]
  return true;
}
    5b30:	2001      	movs	r0, #1
  memcpy(scr, &m_scr, sizeof(scr_t));
    5b32:	6059      	str	r1, [r3, #4]
}
    5b34:	4770      	bx	lr
    5b36:	bf00      	nop
    5b38:	2002817c 	.word	0x2002817c

00005b3c <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    5b3c:	b530      	push	{r4, r5, lr}
  memcpy(sds, &m_sds, sizeof(sds_t));
    5b3e:	4c0b      	ldr	r4, [pc, #44]	; (5b6c <SdioCard::readSDS(sds_t*)+0x30>)
    5b40:	468c      	mov	ip, r1
    5b42:	f104 0540 	add.w	r5, r4, #64	; 0x40
    5b46:	46a6      	mov	lr, r4
    5b48:	f10c 0c10 	add.w	ip, ip, #16
    5b4c:	3410      	adds	r4, #16
    5b4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5b52:	45ae      	cmp	lr, r5
    5b54:	f84c 0c10 	str.w	r0, [ip, #-16]
    5b58:	f84c 1c0c 	str.w	r1, [ip, #-12]
    5b5c:	f84c 2c08 	str.w	r2, [ip, #-8]
    5b60:	f84c 3c04 	str.w	r3, [ip, #-4]
    5b64:	d1ef      	bne.n	5b46 <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    5b66:	2001      	movs	r0, #1
    5b68:	bd30      	pop	{r4, r5, pc}
    5b6a:	bf00      	nop
    5b6c:	20028184 	.word	0x20028184

00005b70 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    5b70:	4770      	bx	lr
    5b72:	bf00      	nop

00005b74 <SdioCard::~SdioCard()>:
    5b74:	b510      	push	{r4, lr}
    5b76:	4604      	mov	r4, r0
    5b78:	210c      	movs	r1, #12
    5b7a:	f002 fb4d 	bl	8218 <operator delete(void*, unsigned int)>
    5b7e:	4620      	mov	r0, r4
    5b80:	bd10      	pop	{r4, pc}
    5b82:	bf00      	nop

00005b84 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
    5b84:	4b04      	ldr	r3, [pc, #16]	; (5b98 <SdioCard::type() const+0x14>)
    5b86:	781b      	ldrb	r3, [r3, #0]
    5b88:	b123      	cbz	r3, 5b94 <SdioCard::type() const+0x10>
    5b8a:	4b04      	ldr	r3, [pc, #16]	; (5b9c <SdioCard::type() const+0x18>)
    5b8c:	7818      	ldrb	r0, [r3, #0]
    5b8e:	3002      	adds	r0, #2
    5b90:	b2c0      	uxtb	r0, r0
    5b92:	4770      	bx	lr
    5b94:	2001      	movs	r0, #1
                    : SD_CARD_TYPE_SD1;
}
    5b96:	4770      	bx	lr
    5b98:	2002949b 	.word	0x2002949b
    5b9c:	2002949c 	.word	0x2002949c

00005ba0 <SdioCard::sectorCount()>:
    uint8_t ver = csd[0] >> 6;
    5ba0:	4a16      	ldr	r2, [pc, #88]	; (5bfc <SdioCard::sectorCount()+0x5c>)
    5ba2:	7813      	ldrb	r3, [r2, #0]
    if (ver == 0) {
    5ba4:	099b      	lsrs	r3, r3, #6
    5ba6:	d00e      	beq.n	5bc6 <SdioCard::sectorCount()+0x26>
    } else if (ver == 1) {
    5ba8:	2b01      	cmp	r3, #1
    5baa:	d001      	beq.n	5bb0 <SdioCard::sectorCount()+0x10>
      return 0;
    5bac:	2000      	movs	r0, #0
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    5bae:	4770      	bx	lr
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5bb0:	79d3      	ldrb	r3, [r2, #7]
      c_size |= csd[9];
    5bb2:	8910      	ldrh	r0, [r2, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5bb4:	041b      	lsls	r3, r3, #16
      c_size |= csd[9];
    5bb6:	ba40      	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5bb8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    5bbc:	b280      	uxth	r0, r0
    5bbe:	4318      	orrs	r0, r3
      return (c_size + 1) << 10;
    5bc0:	3001      	adds	r0, #1
    5bc2:	0280      	lsls	r0, r0, #10
    5bc4:	4770      	bx	lr
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5bc6:	7a53      	ldrb	r3, [r2, #9]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5bc8:	7a10      	ldrb	r0, [r2, #8]
    5bca:	f892 c007 	ldrb.w	ip, [r2, #7]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5bce:	005b      	lsls	r3, r3, #1
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5bd0:	7991      	ldrb	r1, [r2, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5bd2:	0980      	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5bd4:	f003 0306 	and.w	r3, r3, #6
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5bd8:	ea40 008c 	orr.w	r0, r0, ip, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5bdc:	f892 c00a 	ldrb.w	ip, [r2, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5be0:	0289      	lsls	r1, r1, #10
      uint8_t read_bl_len = csd[5] & 15;
    5be2:	7952      	ldrb	r2, [r2, #5]
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5be4:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5be8:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5bec:	f002 020f 	and.w	r2, r2, #15
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5bf0:	4308      	orrs	r0, r1
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5bf2:	4413      	add	r3, r2
    5bf4:	3001      	adds	r0, #1
    5bf6:	3b07      	subs	r3, #7
    5bf8:	4098      	lsls	r0, r3
    5bfa:	4770      	bx	lr
    5bfc:	20028164 	.word	0x20028164

00005c00 <waitDmaStatus()>:
static bool waitDmaStatus() {
    5c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  m_busyFcn = fcn;
    5c02:	4b13      	ldr	r3, [pc, #76]	; (5c50 <waitDmaStatus()+0x50>)
    5c04:	4f13      	ldr	r7, [pc, #76]	; (5c54 <waitDmaStatus()+0x54>)
static bool isBusyDMA() { return m_dmaBusy; }
    5c06:	4d14      	ldr	r5, [pc, #80]	; (5c58 <waitDmaStatus()+0x58>)
  m_busyFcn = fcn;
    5c08:	603b      	str	r3, [r7, #0]
  uint32_t m = micros();
    5c0a:	f002 f9d7 	bl	7fbc <micros>
static bool isBusyDMA() { return m_dmaBusy; }
    5c0e:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5c10:	b17b      	cbz	r3, 5c32 <waitDmaStatus()+0x32>
    5c12:	4604      	mov	r4, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c14:	4e11      	ldr	r6, [pc, #68]	; (5c5c <waitDmaStatus()+0x5c>)
    5c16:	e003      	b.n	5c20 <waitDmaStatus()+0x20>
    yield();
    5c18:	f003 fcda 	bl	95d0 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    5c1c:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5c1e:	b143      	cbz	r3, 5c32 <waitDmaStatus()+0x32>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c20:	f002 f9cc 	bl	7fbc <micros>
    5c24:	1b00      	subs	r0, r0, r4
    5c26:	42b0      	cmp	r0, r6
    5c28:	d9f6      	bls.n	5c18 <waitDmaStatus()+0x18>
      m_busyFcn = 0;
    5c2a:	2300      	movs	r3, #0
    return false;  // Caller will set errorCode.
    5c2c:	4618      	mov	r0, r3
      m_busyFcn = 0;
    5c2e:	603b      	str	r3, [r7, #0]
}
    5c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5c32:	4b0b      	ldr	r3, [pc, #44]	; (5c60 <waitDmaStatus()+0x60>)
  m_busyFcn = 0;
    5c34:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5c36:	6818      	ldr	r0, [r3, #0]
  m_busyFcn = 0;
    5c38:	603a      	str	r2, [r7, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5c3a:	f010 0002 	ands.w	r0, r0, #2
    5c3e:	d0f7      	beq.n	5c30 <waitDmaStatus()+0x30>
    5c40:	681a      	ldr	r2, [r3, #0]
    5c42:	4b08      	ldr	r3, [pc, #32]	; (5c64 <waitDmaStatus()+0x64>)
    5c44:	421a      	tst	r2, r3
    5c46:	bf0c      	ite	eq
    5c48:	2001      	moveq	r0, #1
    5c4a:	2000      	movne	r0, #0
}
    5c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c4e:	bf00      	nop
    5c50:	000059e1 	.word	0x000059e1
    5c54:	20028864 	.word	0x20028864
    5c58:	2002949e 	.word	0x2002949e
    5c5c:	000f4240 	.word	0x000f4240
    5c60:	20028868 	.word	0x20028868
    5c64:	117f0000 	.word	0x117f0000

00005c68 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    5c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    5c6c:	f002 f9a6 	bl	7fbc <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5c70:	4e17      	ldr	r6, [pc, #92]	; (5cd0 <waitTransferComplete() [clone .part.0]+0x68>)
    5c72:	4d18      	ldr	r5, [pc, #96]	; (5cd4 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    5c74:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c76:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5cec <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    5c7a:	e004      	b.n	5c86 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c7c:	f002 f99e 	bl	7fbc <micros>
    5c80:	1bc0      	subs	r0, r0, r7
    5c82:	4540      	cmp	r0, r8
    5c84:	d81b      	bhi.n	5cbe <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5c86:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    5c88:	402c      	ands	r4, r5
    5c8a:	d0f7      	beq.n	5c7c <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    5c8c:	4a12      	ldr	r2, [pc, #72]	; (5cd8 <waitTransferComplete() [clone .part.0]+0x70>)
    5c8e:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    5c90:	4b12      	ldr	r3, [pc, #72]	; (5cdc <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5c92:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5c94:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5c96:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5c98:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5c9a:	4a11      	ldr	r2, [pc, #68]	; (5ce0 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    5c9c:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5c9e:	681b      	ldr	r3, [r3, #0]
    5ca0:	4213      	tst	r3, r2
    5ca2:	d009      	beq.n	5cb8 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    5ca4:	490f      	ldr	r1, [pc, #60]	; (5ce4 <waitTransferComplete() [clone .part.0]+0x7c>)
    5ca6:	2420      	movs	r4, #32
  m_errorLine = line;
    5ca8:	4b0f      	ldr	r3, [pc, #60]	; (5ce8 <waitTransferComplete() [clone .part.0]+0x80>)
    5caa:	f240 22aa 	movw	r2, #682	; 0x2aa
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    5cae:	2000      	movs	r0, #0
  m_errorCode = code;
    5cb0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5cb2:	601a      	str	r2, [r3, #0]
}
    5cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    5cb8:	2001      	movs	r0, #1
}
    5cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    5cbe:	4a06      	ldr	r2, [pc, #24]	; (5cd8 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    5cc0:	4b06      	ldr	r3, [pc, #24]	; (5cdc <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5cc2:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5cc4:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5cc6:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5cc8:	681b      	ldr	r3, [r3, #0]
    5cca:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5ccc:	e7ea      	b.n	5ca4 <waitTransferComplete() [clone .part.0]+0x3c>
    5cce:	bf00      	nop
    5cd0:	402c0000 	.word	0x402c0000
    5cd4:	117f0002 	.word	0x117f0002
    5cd8:	2002949d 	.word	0x2002949d
    5cdc:	20028868 	.word	0x20028868
    5ce0:	117f0000 	.word	0x117f0000
    5ce4:	20008bf6 	.word	0x20008bf6
    5ce8:	20027f48 	.word	0x20027f48
    5cec:	000f4240 	.word	0x000f4240

00005cf0 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    5cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    5cf4:	4c26      	ldr	r4, [pc, #152]	; (5d90 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    5cf6:	460f      	mov	r7, r1
  if (!m_transferActive) {
    5cf8:	7823      	ldrb	r3, [r4, #0]
    5cfa:	2b00      	cmp	r3, #0
    5cfc:	d138      	bne.n	5d70 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    5cfe:	4b25      	ldr	r3, [pc, #148]	; (5d94 <SdioCard::writeData(unsigned char const*)+0xa4>)
    5d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5d02:	05d2      	lsls	r2, r2, #23
    5d04:	d52b      	bpl.n	5d5e <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5d06:	4d23      	ldr	r5, [pc, #140]	; (5d94 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d08:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5da0 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5d0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5d12:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    5d14:	f002 f952 	bl	7fbc <micros>
    5d18:	4606      	mov	r6, r0
  while (fcn()) {
    5d1a:	e004      	b.n	5d26 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d1c:	f002 f94e 	bl	7fbc <micros>
    5d20:	1b80      	subs	r0, r0, r6
    5d22:	4540      	cmp	r0, r8
    5d24:	d82a      	bhi.n	5d7c <SdioCard::writeData(unsigned char const*)+0x8c>
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    5d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    5d28:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    5d2c:	d0f6      	beq.n	5d1c <SdioCard::writeData(unsigned char const*)+0x2c>
    5d2e:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    5d32:	4818      	ldr	r0, [pc, #96]	; (5d94 <SdioCard::writeData(unsigned char const*)+0xa4>)
    5d34:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    5d38:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5d3a:	055b      	lsls	r3, r3, #21
    5d3c:	d5fc      	bpl.n	5d38 <SdioCard::writeData(unsigned char const*)+0x48>
    5d3e:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    5d42:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5d46:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    5d48:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5d4a:	d1fa      	bne.n	5d42 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    5d4c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    5d50:	45bc      	cmp	ip, r7
    5d52:	d1f1      	bne.n	5d38 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    5d54:	2301      	movs	r3, #1
  return true;
    5d56:	4618      	mov	r0, r3
  m_transferActive = true;
    5d58:	7023      	strb	r3, [r4, #0]
}
    5d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5d60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    5d64:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    5d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5d68:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    5d6c:	629a      	str	r2, [r3, #40]	; 0x28
    5d6e:	e7ca      	b.n	5d06 <SdioCard::writeData(unsigned char const*)+0x16>
    5d70:	f7ff ff7a 	bl	5c68 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    5d74:	2800      	cmp	r0, #0
    5d76:	d1c2      	bne.n	5cfe <SdioCard::writeData(unsigned char const*)+0xe>
}
    5d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    5d7c:	4906      	ldr	r1, [pc, #24]	; (5d98 <SdioCard::writeData(unsigned char const*)+0xa8>)
    5d7e:	2422      	movs	r4, #34	; 0x22
  m_errorLine = line;
    5d80:	4b06      	ldr	r3, [pc, #24]	; (5d9c <SdioCard::writeData(unsigned char const*)+0xac>)
    5d82:	f240 421f 	movw	r2, #1055	; 0x41f
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    5d86:	4648      	mov	r0, r9
  m_errorCode = code;
    5d88:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5d8a:	601a      	str	r2, [r3, #0]
}
    5d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d90:	2002949d 	.word	0x2002949d
    5d94:	402c0000 	.word	0x402c0000
    5d98:	20008bf6 	.word	0x20008bf6
    5d9c:	20027f48 	.word	0x20027f48
    5da0:	000f4240 	.word	0x000f4240

00005da4 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    5da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5da8:	4607      	mov	r7, r0
    5daa:	4688      	mov	r8, r1
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    5dac:	4c1f      	ldr	r4, [pc, #124]	; (5e2c <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    5dae:	f002 f905 	bl	7fbc <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5db2:	4e1f      	ldr	r6, [pc, #124]	; (5e30 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5db4:	4605      	mov	r5, r0
  while (fcn()) {
    5db6:	e004      	b.n	5dc2 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5db8:	f002 f900 	bl	7fbc <micros>
    5dbc:	1b43      	subs	r3, r0, r5
    5dbe:	42b3      	cmp	r3, r6
    5dc0:	d824      	bhi.n	5e0c <cardCommand(unsigned long, unsigned long)+0x68>
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    5dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5dc4:	07d9      	lsls	r1, r3, #31
    5dc6:	d4f7      	bmi.n	5db8 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5dc8:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    5dca:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5dce:	d420      	bmi.n	5e12 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    5dd0:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    5dd4:	4c15      	ldr	r4, [pc, #84]	; (5e2c <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5dd6:	4e17      	ldr	r6, [pc, #92]	; (5e34 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    5dd8:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    5dda:	f002 f8ef 	bl	7fbc <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5dde:	4f14      	ldr	r7, [pc, #80]	; (5e30 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5de0:	4605      	mov	r5, r0
  while (fcn()) {
    5de2:	e004      	b.n	5dee <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5de4:	f002 f8ea 	bl	7fbc <micros>
    5de8:	1b40      	subs	r0, r0, r5
    5dea:	42b8      	cmp	r0, r7
    5dec:	d80e      	bhi.n	5e0c <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5dee:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    5df0:	4233      	tst	r3, r6
    5df2:	d0f7      	beq.n	5de4 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    5df4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5df6:	4b10      	ldr	r3, [pc, #64]	; (5e38 <cardCommand(unsigned long, unsigned long)+0x94>)
    5df8:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5dfa:	681a      	ldr	r2, [r3, #0]
    5dfc:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5dfe:	681a      	ldr	r2, [r3, #0]
    5e00:	07d2      	lsls	r2, r2, #31
    5e02:	d503      	bpl.n	5e0c <cardCommand(unsigned long, unsigned long)+0x68>
    5e04:	681b      	ldr	r3, [r3, #0]
    5e06:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    5e0a:	d00b      	beq.n	5e24 <cardCommand(unsigned long, unsigned long)+0x80>
    5e0c:	2000      	movs	r0, #0
}
    5e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5e12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5e14:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5e16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    5e1a:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5e1c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    5e1e:	4313      	orrs	r3, r2
    5e20:	64a3      	str	r3, [r4, #72]	; 0x48
    5e22:	e7d5      	b.n	5dd0 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5e24:	2001      	movs	r0, #1
}
    5e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e2a:	bf00      	nop
    5e2c:	402c0000 	.word	0x402c0000
    5e30:	000f4240 	.word	0x000f4240
    5e34:	000f0001 	.word	0x000f0001
    5e38:	20028868 	.word	0x20028868

00005e3c <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    5e3c:	4b15      	ldr	r3, [pc, #84]	; (5e94 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    5e3e:	b530      	push	{r4, r5, lr}
    5e40:	460d      	mov	r5, r1
    5e42:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    5e44:	6819      	ldr	r1, [r3, #0]
    5e46:	f7ff ffad 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    5e4a:	b308      	cbz	r0, 5e90 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    5e4c:	4b12      	ldr	r3, [pc, #72]	; (5e98 <readReg16(unsigned long, void*)+0x5c>)
    5e4e:	f105 040f 	add.w	r4, r5, #15
    5e52:	691a      	ldr	r2, [r3, #16]
    5e54:	9200      	str	r2, [sp, #0]
    5e56:	6959      	ldr	r1, [r3, #20]
    5e58:	9101      	str	r1, [sp, #4]
    5e5a:	6999      	ldr	r1, [r3, #24]
    5e5c:	9102      	str	r1, [sp, #8]
    5e5e:	69db      	ldr	r3, [r3, #28]
    5e60:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    5e62:	2300      	movs	r3, #0
    5e64:	e001      	b.n	5e6a <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5e66:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    5e6a:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    5e6e:	3301      	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5e70:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    5e74:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    5e78:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5e7a:	fa22 f20c 	lsr.w	r2, r2, ip
    5e7e:	f10e 0110 	add.w	r1, lr, #16
    5e82:	f804 2d01 	strb.w	r2, [r4, #-1]!
    5e86:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    5e8a:	d1ec      	bne.n	5e66 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    5e8c:	2300      	movs	r3, #0
    5e8e:	73eb      	strb	r3, [r5, #15]
}
    5e90:	b005      	add	sp, #20
    5e92:	bd30      	pop	{r4, r5, pc}
    5e94:	20028178 	.word	0x20028178
    5e98:	402c0000 	.word	0x402c0000

00005e9c <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    5e9c:	b510      	push	{r4, lr}
  bool useDma() { return m_options & DMA_SDIO; }
    5e9e:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    5ea0:	07db      	lsls	r3, r3, #31
    5ea2:	d505      	bpl.n	5eb0 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5ea4:	4b15      	ldr	r3, [pc, #84]	; (5efc <SdioCard::isBusy()+0x60>)
    5ea6:	681b      	ldr	r3, [r3, #0]
    5ea8:	b1b3      	cbz	r3, 5ed8 <SdioCard::isBusy()+0x3c>
}
    5eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5eae:	4718      	bx	r3
    if (m_transferActive) {
    5eb0:	4b13      	ldr	r3, [pc, #76]	; (5f00 <SdioCard::isBusy()+0x64>)
    5eb2:	781b      	ldrb	r3, [r3, #0]
    5eb4:	b93b      	cbnz	r3, 5ec6 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5eb6:	4b13      	ldr	r3, [pc, #76]	; (5f04 <SdioCard::isBusy()+0x68>)
    5eb8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    5eba:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    5ebe:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    5ec2:	4620      	mov	r0, r4
    5ec4:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5ec6:	4b0f      	ldr	r3, [pc, #60]	; (5f04 <SdioCard::isBusy()+0x68>)
    5ec8:	4c0f      	ldr	r4, [pc, #60]	; (5f08 <SdioCard::isBusy()+0x6c>)
    5eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5ecc:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    5ece:	fab4 f484 	clz	r4, r4
    5ed2:	0964      	lsrs	r4, r4, #5
}
    5ed4:	4620      	mov	r0, r4
    5ed6:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5ed8:	4b0c      	ldr	r3, [pc, #48]	; (5f0c <SdioCard::isBusy()+0x70>)
    5eda:	781c      	ldrb	r4, [r3, #0]
    5edc:	2c00      	cmp	r4, #0
    5ede:	d0f0      	beq.n	5ec2 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ee0:	4b0b      	ldr	r3, [pc, #44]	; (5f10 <SdioCard::isBusy()+0x74>)
    5ee2:	480c      	ldr	r0, [pc, #48]	; (5f14 <SdioCard::isBusy()+0x78>)
    5ee4:	6819      	ldr	r1, [r3, #0]
    5ee6:	f7ff ff5d 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    5eea:	2800      	cmp	r0, #0
    5eec:	d0e9      	beq.n	5ec2 <SdioCard::isBusy()+0x26>
    5eee:	4b05      	ldr	r3, [pc, #20]	; (5f04 <SdioCard::isBusy()+0x68>)
    5ef0:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5ef2:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    5ef6:	f3c4 2400 	ubfx	r4, r4, #8, #1
    5efa:	e7e2      	b.n	5ec2 <SdioCard::isBusy()+0x26>
    5efc:	20028864 	.word	0x20028864
    5f00:	2002949d 	.word	0x2002949d
    5f04:	402c0000 	.word	0x402c0000
    5f08:	117f0002 	.word	0x117f0002
    5f0c:	2002949a 	.word	0x2002949a
    5f10:	20028178 	.word	0x20028178
    5f14:	0d1a0000 	.word	0x0d1a0000

00005f18 <SdioCard::status()>:
uint32_t SdioCard::status() { return statusCMD13(); }
    5f18:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f1a:	4b04      	ldr	r3, [pc, #16]	; (5f2c <SdioCard::status()+0x14>)
    5f1c:	4804      	ldr	r0, [pc, #16]	; (5f30 <SdioCard::status()+0x18>)
    5f1e:	6819      	ldr	r1, [r3, #0]
    5f20:	f7ff ff40 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    5f24:	b108      	cbz	r0, 5f2a <SdioCard::status()+0x12>
    5f26:	4b03      	ldr	r3, [pc, #12]	; (5f34 <SdioCard::status()+0x1c>)
    5f28:	6918      	ldr	r0, [r3, #16]
uint32_t SdioCard::status() { return statusCMD13(); }
    5f2a:	bd08      	pop	{r3, pc}
    5f2c:	20028178 	.word	0x20028178
    5f30:	0d1a0000 	.word	0x0d1a0000
    5f34:	402c0000 	.word	0x402c0000

00005f38 <isBusyCMD13()>:
static bool isBusyCMD13() {
    5f38:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f3a:	4b07      	ldr	r3, [pc, #28]	; (5f58 <isBusyCMD13()+0x20>)
    5f3c:	4807      	ldr	r0, [pc, #28]	; (5f5c <isBusyCMD13()+0x24>)
    5f3e:	6819      	ldr	r1, [r3, #0]
    5f40:	f7ff ff30 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    5f44:	b130      	cbz	r0, 5f54 <isBusyCMD13()+0x1c>
    5f46:	4b06      	ldr	r3, [pc, #24]	; (5f60 <isBusyCMD13()+0x28>)
    5f48:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    5f4a:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    5f4e:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    5f52:	bd08      	pop	{r3, pc}
    5f54:	2001      	movs	r0, #1
    5f56:	bd08      	pop	{r3, pc}
    5f58:	20028178 	.word	0x20028178
    5f5c:	0d1a0000 	.word	0x0d1a0000
    5f60:	402c0000 	.word	0x402c0000

00005f64 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    5f68:	4b29      	ldr	r3, [pc, #164]	; (6010 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    5f6a:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    5f6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6030 <SdioCard::writeStart(unsigned long)+0xcc>
    5f70:	4e28      	ldr	r6, [pc, #160]	; (6014 <SdioCard::writeStart(unsigned long)+0xb0>)
    5f72:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    5f76:	f002 f821 	bl	7fbc <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f7a:	4d27      	ldr	r5, [pc, #156]	; (6018 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    5f7c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f7e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6034 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f82:	4f26      	ldr	r7, [pc, #152]	; (601c <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    5f84:	e006      	b.n	5f94 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f86:	f002 f819 	bl	7fbc <micros>
    5f8a:	1b00      	subs	r0, r0, r4
    5f8c:	42b8      	cmp	r0, r7
    5f8e:	d829      	bhi.n	5fe4 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    5f90:	f003 fb1e 	bl	95d0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f94:	6831      	ldr	r1, [r6, #0]
    5f96:	4628      	mov	r0, r5
    5f98:	f7ff ff04 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    5f9c:	2800      	cmp	r0, #0
    5f9e:	d0f2      	beq.n	5f86 <SdioCard::writeStart(unsigned long)+0x22>
    5fa0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5fa4:	05db      	lsls	r3, r3, #23
    5fa6:	d5ee      	bpl.n	5f86 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    5fa8:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5faa:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    5fae:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5fb2:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    5fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5fba:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5fbe:	4b18      	ldr	r3, [pc, #96]	; (6020 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5fc0:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5fc4:	781b      	ldrb	r3, [r3, #0]
    5fc6:	b1cb      	cbz	r3, 5ffc <SdioCard::writeStart(unsigned long)+0x98>
    5fc8:	4649      	mov	r1, r9
    5fca:	4816      	ldr	r0, [pc, #88]	; (6024 <SdioCard::writeStart(unsigned long)+0xc0>)
    5fcc:	f7ff feea 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    5fd0:	b930      	cbnz	r0, 5fe0 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    5fd2:	4915      	ldr	r1, [pc, #84]	; (6028 <SdioCard::writeStart(unsigned long)+0xc4>)
    5fd4:	240e      	movs	r4, #14
  m_errorLine = line;
    5fd6:	4b15      	ldr	r3, [pc, #84]	; (602c <SdioCard::writeStart(unsigned long)+0xc8>)
    5fd8:	f240 427e 	movw	r2, #1150	; 0x47e
  m_errorCode = code;
    5fdc:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5fde:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    5fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5fe4:	4a10      	ldr	r2, [pc, #64]	; (6028 <SdioCard::writeStart(unsigned long)+0xc4>)
    5fe6:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5fe8:	2000      	movs	r0, #0
  m_errorLine = line;
    5fea:	4b10      	ldr	r3, [pc, #64]	; (602c <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    5fec:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5fee:	f240 4272 	movw	r2, #1138	; 0x472
      m_busyFcn = 0;
    5ff2:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    5ff6:	601a      	str	r2, [r3, #0]
}
    5ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5ffc:	ea4f 2949 	mov.w	r9, r9, lsl #9
    6000:	4808      	ldr	r0, [pc, #32]	; (6024 <SdioCard::writeStart(unsigned long)+0xc0>)
    6002:	4649      	mov	r1, r9
    6004:	f7ff fece 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6008:	2800      	cmp	r0, #0
    600a:	d1e9      	bne.n	5fe0 <SdioCard::writeStart(unsigned long)+0x7c>
    600c:	e7e1      	b.n	5fd2 <SdioCard::writeStart(unsigned long)+0x6e>
    600e:	bf00      	nop
    6010:	00005f39 	.word	0x00005f39
    6014:	20028178 	.word	0x20028178
    6018:	0d1a0000 	.word	0x0d1a0000
    601c:	000f4240 	.word	0x000f4240
    6020:	2002949c 	.word	0x2002949c
    6024:	193a0020 	.word	0x193a0020
    6028:	20008bf6 	.word	0x20008bf6
    602c:	20027f48 	.word	0x20027f48
    6030:	20028864 	.word	0x20028864
    6034:	402c0000 	.word	0x402c0000

00006038 <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    6038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    603c:	468a      	mov	sl, r1
    603e:	4691      	mov	r9, r2
    6040:	4e24      	ldr	r6, [pc, #144]	; (60d4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x9c>)
  uint32_t m = micros();
    6042:	f001 ffbb 	bl	7fbc <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6046:	4d24      	ldr	r5, [pc, #144]	; (60d8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa0>)
  uint32_t m = micros();
    6048:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    604a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 60fc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc4>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    604e:	4f23      	ldr	r7, [pc, #140]	; (60dc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa4>)
  while (fcn()) {
    6050:	e004      	b.n	605c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6052:	f001 ffb3 	bl	7fbc <micros>
    6056:	1b00      	subs	r0, r0, r4
    6058:	42b8      	cmp	r0, r7
    605a:	d825      	bhi.n	60a8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    605c:	6831      	ldr	r1, [r6, #0]
    605e:	4628      	mov	r0, r5
    6060:	f7ff fea0 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6064:	2800      	cmp	r0, #0
    6066:	d0f4      	beq.n	6052 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
    6068:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    606c:	05db      	lsls	r3, r3, #23
    606e:	d5f0      	bpl.n	6052 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    6070:	4b1b      	ldr	r3, [pc, #108]	; (60e0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa8>)
    6072:	2201      	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    6074:	4651      	mov	r1, sl
    6076:	481b      	ldr	r0, [pc, #108]	; (60e4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xac>)
  m_dmaBusy = true;
    6078:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    607a:	2200      	movs	r2, #0
    607c:	4b1a      	ldr	r3, [pc, #104]	; (60e8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb0>)
    607e:	601a      	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    6080:	4a1a      	ldr	r2, [pc, #104]	; (60ec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6082:	4b1b      	ldr	r3, [pc, #108]	; (60f0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb8>)
  SDHC_DSADDR = (uint32_t)status;
    6084:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    6088:	f8c8 2004 	str.w	r2, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    608c:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    6090:	f7ff fe88 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6094:	b990      	cbnz	r0, 60bc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>
  m_errorCode = code;
    6096:	4917      	ldr	r1, [pc, #92]	; (60f4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    6098:	2404      	movs	r4, #4
  m_errorLine = line;
    609a:	4b17      	ldr	r3, [pc, #92]	; (60f8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    609c:	f240 321b 	movw	r2, #795	; 0x31b
  m_errorCode = code;
    60a0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    60a2:	601a      	str	r2, [r3, #0]
}
    60a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    60a8:	4912      	ldr	r1, [pc, #72]	; (60f4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    60aa:	240a      	movs	r4, #10
  m_errorLine = line;
    60ac:	4b12      	ldr	r3, [pc, #72]	; (60f8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    60ae:	f44f 7245 	mov.w	r2, #788	; 0x314
    return sdError(SD_CARD_ERROR_CMD13);
    60b2:	2000      	movs	r0, #0
  m_errorCode = code;
    60b4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    60b6:	601a      	str	r2, [r3, #0]
}
    60b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!waitDmaStatus()) {
    60bc:	f7ff fda0 	bl	5c00 <waitDmaStatus()>
    60c0:	2800      	cmp	r0, #0
    60c2:	d1f9      	bne.n	60b8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
  m_errorCode = code;
    60c4:	490b      	ldr	r1, [pc, #44]	; (60f4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    60c6:	2426      	movs	r4, #38	; 0x26
  m_errorLine = line;
    60c8:	4b0b      	ldr	r3, [pc, #44]	; (60f8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    60ca:	f240 321e 	movw	r2, #798	; 0x31e
  m_errorCode = code;
    60ce:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    60d0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    60d2:	e7f1      	b.n	60b8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
    60d4:	20028178 	.word	0x20028178
    60d8:	0d1a0000 	.word	0x0d1a0000
    60dc:	000f4240 	.word	0x000f4240
    60e0:	2002949e 	.word	0x2002949e
    60e4:	063a0011 	.word	0x063a0011
    60e8:	20028868 	.word	0x20028868
    60ec:	00010040 	.word	0x00010040
    60f0:	117f0002 	.word	0x117f0002
    60f4:	20008bf6 	.word	0x20008bf6
    60f8:	20027f48 	.word	0x20027f48
    60fc:	402c0000 	.word	0x402c0000

00006100 <SdioCard::readStop()>:
bool SdioCard::readStop() { return transferStop(); }
    6100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6104:	4c25      	ldr	r4, [pc, #148]	; (619c <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6106:	2100      	movs	r1, #0
    6108:	4825      	ldr	r0, [pc, #148]	; (61a0 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    610a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    610c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6110:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6112:	f7ff fe47 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6116:	4605      	mov	r5, r0
    6118:	b948      	cbnz	r0, 612e <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    611a:	4922      	ldr	r1, [pc, #136]	; (61a4 <SdioCard::readStop()+0xa4>)
    611c:	2009      	movs	r0, #9
  m_errorLine = line;
    611e:	4b22      	ldr	r3, [pc, #136]	; (61a8 <SdioCard::readStop()+0xa8>)
    6120:	f240 226d 	movw	r2, #621	; 0x26d
  m_errorCode = code;
    6124:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6126:	601a      	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    6128:	4628      	mov	r0, r5
    612a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    612e:	4b1f      	ldr	r3, [pc, #124]	; (61ac <SdioCard::readStop()+0xac>)
    6130:	f8df 8080 	ldr.w	r8, [pc, #128]	; 61b4 <SdioCard::readStop()+0xb4>
    6134:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    6138:	f001 ff40 	bl	7fbc <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    613c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    613e:	4606      	mov	r6, r0
  while (fcn()) {
    6140:	01d8      	lsls	r0, r3, #7
    6142:	d418      	bmi.n	6176 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6144:	4f1a      	ldr	r7, [pc, #104]	; (61b0 <SdioCard::readStop()+0xb0>)
    6146:	e004      	b.n	6152 <SdioCard::readStop()+0x52>
    yield();
    6148:	f003 fa42 	bl	95d0 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    614c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    614e:	01d9      	lsls	r1, r3, #7
    6150:	d411      	bmi.n	6176 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6152:	f001 ff33 	bl	7fbc <micros>
    6156:	1b83      	subs	r3, r0, r6
    6158:	42bb      	cmp	r3, r7
    615a:	d9f5      	bls.n	6148 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    615c:	4a11      	ldr	r2, [pc, #68]	; (61a4 <SdioCard::readStop()+0xa4>)
    615e:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6160:	2500      	movs	r5, #0
  m_errorLine = line;
    6162:	4b11      	ldr	r3, [pc, #68]	; (61a8 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    6164:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6166:	f44f 721c 	mov.w	r2, #624	; 0x270
bool SdioCard::readStop() { return transferStop(); }
    616a:	4628      	mov	r0, r5
      m_busyFcn = 0;
    616c:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    6170:	601a      	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    6172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    6176:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    6178:	4b08      	ldr	r3, [pc, #32]	; (619c <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    617a:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    617e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6180:	0792      	lsls	r2, r2, #30
    6182:	d5d1      	bpl.n	6128 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    6184:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    6186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    6188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    618a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    618e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    6192:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    6194:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    6196:	629a      	str	r2, [r3, #40]	; 0x28
    6198:	e7c6      	b.n	6128 <SdioCard::readStop()+0x28>
    619a:	bf00      	nop
    619c:	402c0000 	.word	0x402c0000
    61a0:	0cdb0000 	.word	0x0cdb0000
    61a4:	20008bf6 	.word	0x20008bf6
    61a8:	20027f48 	.word	0x20027f48
    61ac:	000059cd 	.word	0x000059cd
    61b0:	000f4240 	.word	0x000f4240
    61b4:	20028864 	.word	0x20028864

000061b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                        size_t n) {
    61b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61bc:	4614      	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    61be:	f012 0203 	ands.w	r2, r2, #3
                        size_t n) {
    61c2:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    61c4:	bf18      	it	ne
    61c6:	2201      	movne	r2, #1
    61c8:	9301      	str	r3, [sp, #4]
    61ca:	2b00      	cmp	r3, #0
    61cc:	bf08      	it	eq
    61ce:	f042 0201 	orreq.w	r2, r2, #1
    61d2:	b152      	cbz	r2, 61ea <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x32>
  m_errorCode = code;
    61d4:	492e      	ldr	r1, [pc, #184]	; (6290 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    61d6:	2026      	movs	r0, #38	; 0x26
  m_errorLine = line;
    61d8:	4b2e      	ldr	r3, [pc, #184]	; (6294 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
    61da:	f240 2223 	movw	r2, #547	; 0x223
  m_errorCode = code;
    61de:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    61e0:	601a      	str	r2, [r3, #0]
}
    61e2:	2000      	movs	r0, #0
    61e4:	b003      	add	sp, #12
    61e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    61ea:	4b2b      	ldr	r3, [pc, #172]	; (6298 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe0>)
    61ec:	4606      	mov	r6, r0
    61ee:	4a2b      	ldr	r2, [pc, #172]	; (629c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
    61f0:	460d      	mov	r5, r1
    61f2:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 62b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xfc>
    61f6:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    61f8:	f001 fee0 	bl	7fbc <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    61fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 62b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
  uint32_t m = micros();
    6200:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6202:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 62bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6206:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 62c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>
  while (fcn()) {
    620a:	e006      	b.n	621a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x62>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    620c:	f001 fed6 	bl	7fbc <micros>
    6210:	1bc0      	subs	r0, r0, r7
    6212:	4550      	cmp	r0, sl
    6214:	d82f      	bhi.n	6276 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xbe>
    yield();
    6216:	f003 f9db 	bl	95d0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    621a:	f8d9 1000 	ldr.w	r1, [r9]
    621e:	4640      	mov	r0, r8
    6220:	f7ff fdc0 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6224:	2800      	cmp	r0, #0
    6226:	d0f1      	beq.n	620c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
    6228:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    622c:	05db      	lsls	r3, r3, #23
    622e:	d5ed      	bpl.n	620c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6230:	9a01      	ldr	r2, [sp, #4]
  m_dmaBusy = true;
    6232:	2001      	movs	r0, #1
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6234:	4b1a      	ldr	r3, [pc, #104]	; (62a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe8>)
  m_busyFcn = 0;
    6236:	4919      	ldr	r1, [pc, #100]	; (629c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6238:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    623c:	2200      	movs	r2, #0
    623e:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    6244:	4917      	ldr	r1, [pc, #92]	; (62a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xec>)
    6246:	7008      	strb	r0, [r1, #0]
  m_irqstat = 0;
    6248:	4917      	ldr	r1, [pc, #92]	; (62a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf0>)
    624a:	600a      	str	r2, [r1, #0]
  SDHC_DSADDR = (uint32_t)buf;
    624c:	f8cb 4000 	str.w	r4, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6250:	f8cb 3004 	str.w	r3, [fp, #4]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    6254:	4b15      	ldr	r3, [pc, #84]	; (62ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6256:	4a16      	ldr	r2, [pc, #88]	; (62b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf8>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    6258:	781b      	ldrb	r3, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    625a:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    625e:	b1ab      	cbz	r3, 628c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd4>
    6260:	4629      	mov	r1, r5
    6262:	4630      	mov	r0, r6
    6264:	f7ff fd9e 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6268:	2800      	cmp	r0, #0
    626a:	d0ba      	beq.n	61e2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
}
    626c:	b003      	add	sp, #12
    626e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return waitDmaStatus();
    6272:	f7ff bcc5 	b.w	5c00 <waitDmaStatus()>
  m_errorCode = code;
    6276:	4a06      	ldr	r2, [pc, #24]	; (6290 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    6278:	210a      	movs	r1, #10
      m_busyFcn = 0;
    627a:	2000      	movs	r0, #0
  m_errorLine = line;
    627c:	4b05      	ldr	r3, [pc, #20]	; (6294 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
      m_busyFcn = 0;
    627e:	4c07      	ldr	r4, [pc, #28]	; (629c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  m_errorCode = code;
    6280:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6282:	f240 2226 	movw	r2, #550	; 0x226
      m_busyFcn = 0;
    6286:	6020      	str	r0, [r4, #0]
  m_errorLine = line;
    6288:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    628a:	e7aa      	b.n	61e2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    628c:	026d      	lsls	r5, r5, #9
    628e:	e7e7      	b.n	6260 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>
    6290:	20008bf6 	.word	0x20008bf6
    6294:	20027f48 	.word	0x20027f48
    6298:	00005f39 	.word	0x00005f39
    629c:	20028864 	.word	0x20028864
    62a0:	1fff0000 	.word	0x1fff0000
    62a4:	2002949e 	.word	0x2002949e
    62a8:	20028868 	.word	0x20028868
    62ac:	2002949c 	.word	0x2002949c
    62b0:	117f0002 	.word	0x117f0002
    62b4:	20028178 	.word	0x20028178
    62b8:	0d1a0000 	.word	0x0d1a0000
    62bc:	402c0000 	.word	0x402c0000
    62c0:	000f4240 	.word	0x000f4240

000062c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    62c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62c6:	4606      	mov	r6, r0
    62c8:	7a00      	ldrb	r0, [r0, #8]
    62ca:	460c      	mov	r4, r1
    62cc:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    62ce:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    62d0:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    62d2:	d413      	bmi.n	62fc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    62d4:	b183      	cbz	r3, 62f8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    62d6:	440f      	add	r7, r1
    62d8:	e001      	b.n	62de <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    62da:	42bc      	cmp	r4, r7
    62dc:	d00c      	beq.n	62f8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    62de:	6833      	ldr	r3, [r6, #0]
    62e0:	462a      	mov	r2, r5
    62e2:	4621      	mov	r1, r4
    62e4:	4630      	mov	r0, r6
    62e6:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    62e8:	3401      	adds	r4, #1
    62ea:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i * 512UL)) {
    62ee:	4798      	blx	r3
    62f0:	2800      	cmp	r0, #0
    62f2:	d1f2      	bne.n	62da <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    62f4:	2000      	movs	r0, #0
}
    62f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    62f8:	2001      	movs	r0, #1
}
    62fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    62fc:	0790      	lsls	r0, r2, #30
    62fe:	d012      	beq.n	6326 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    6300:	2b00      	cmp	r3, #0
    6302:	d0f9      	beq.n	62f8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    6304:	440f      	add	r7, r1
    6306:	e001      	b.n	630c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    6308:	42bc      	cmp	r4, r7
    630a:	d0f5      	beq.n	62f8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    630c:	6833      	ldr	r3, [r6, #0]
    630e:	462a      	mov	r2, r5
    6310:	4621      	mov	r1, r4
    6312:	4630      	mov	r0, r6
    6314:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    6316:	3401      	adds	r4, #1
    6318:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    631c:	4798      	blx	r3
    631e:	2800      	cmp	r0, #0
    6320:	d1f2      	bne.n	6308 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    6322:	2000      	movs	r0, #0
    6324:	e7e7      	b.n	62f6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    6326:	4806      	ldr	r0, [pc, #24]	; (6340 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    6328:	f7ff ff46 	bl	61b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    632c:	2800      	cmp	r0, #0
    632e:	d1e3      	bne.n	62f8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    6330:	4904      	ldr	r1, [pc, #16]	; (6344 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    6332:	240c      	movs	r4, #12
  m_errorLine = line;
    6334:	4b04      	ldr	r3, [pc, #16]	; (6348 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    6336:	f240 32ce 	movw	r2, #974	; 0x3ce
  m_errorCode = code;
    633a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    633c:	601a      	str	r2, [r3, #0]
}
    633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6340:	123a0037 	.word	0x123a0037
    6344:	20008bf6 	.word	0x20008bf6
    6348:	20027f48 	.word	0x20027f48

0000634c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    634e:	4606      	mov	r6, r0
    6350:	7a00      	ldrb	r0, [r0, #8]
    6352:	460c      	mov	r4, r1
    6354:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    6356:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    6358:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    635a:	d413      	bmi.n	6384 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    635c:	b183      	cbz	r3, 6380 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    635e:	440f      	add	r7, r1
    6360:	e001      	b.n	6366 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    6362:	42bc      	cmp	r4, r7
    6364:	d00c      	beq.n	6380 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    6366:	6833      	ldr	r3, [r6, #0]
    6368:	462a      	mov	r2, r5
    636a:	4621      	mov	r1, r4
    636c:	4630      	mov	r0, r6
    636e:	6a1b      	ldr	r3, [r3, #32]
    for (size_t i = 0; i < n; i++) {
    6370:	3401      	adds	r4, #1
    6372:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i * 512UL)) {
    6376:	4798      	blx	r3
    6378:	2800      	cmp	r0, #0
    637a:	d1f2      	bne.n	6362 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    637c:	2000      	movs	r0, #0
}
    637e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    6380:	2001      	movs	r0, #1
}
    6382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    6384:	0790      	lsls	r0, r2, #30
    6386:	d012      	beq.n	63ae <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    6388:	2b00      	cmp	r3, #0
    638a:	d0f9      	beq.n	6380 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    638c:	440f      	add	r7, r1
    638e:	e001      	b.n	6394 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    6390:	42bc      	cmp	r4, r7
    6392:	d0f5      	beq.n	6380 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    6394:	6833      	ldr	r3, [r6, #0]
    6396:	462a      	mov	r2, r5
    6398:	4621      	mov	r1, r4
    639a:	4630      	mov	r0, r6
    639c:	6a1b      	ldr	r3, [r3, #32]
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    639e:	3401      	adds	r4, #1
    63a0:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    63a4:	4798      	blx	r3
    63a6:	2800      	cmp	r0, #0
    63a8:	d1f2      	bne.n	6390 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    63aa:	2000      	movs	r0, #0
    63ac:	e7e7      	b.n	637e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    63ae:	4806      	ldr	r0, [pc, #24]	; (63c8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    63b0:	f7ff ff02 	bl	61b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    63b4:	2800      	cmp	r0, #0
    63b6:	d1e3      	bne.n	6380 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    63b8:	4904      	ldr	r1, [pc, #16]	; (63cc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    63ba:	240e      	movs	r4, #14
  m_errorLine = line;
    63bc:	4b04      	ldr	r3, [pc, #16]	; (63d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    63be:	f240 4264 	movw	r2, #1124	; 0x464
  m_errorCode = code;
    63c2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    63c4:	601a      	str	r2, [r3, #0]
}
    63c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63c8:	193a0027 	.word	0x193a0027
    63cc:	20008bf6 	.word	0x20008bf6
    63d0:	20027f48 	.word	0x20027f48

000063d4 <SdioCard::begin(SdioConfig)>:
  m_curState = IDLE_STATE;
    63d4:	2200      	movs	r2, #0
  m_initDone = false;
    63d6:	4bb1      	ldr	r3, [pc, #708]	; (669c <SdioCard::begin(SdioConfig)+0x2c8>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    63d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_initDone = false;
    63dc:	701a      	strb	r2, [r3, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
    63de:	4606      	mov	r6, r0
  CCM_ANALOG_PFD_528 |= (1 << 7);
    63e0:	4baf      	ldr	r3, [pc, #700]	; (66a0 <SdioCard::begin(SdioConfig)+0x2cc>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    63e2:	b093      	sub	sp, #76	; 0x4c
  m_errorCode = SD_CARD_ERROR_NONE;
    63e4:	4caf      	ldr	r4, [pc, #700]	; (66a4 <SdioCard::begin(SdioConfig)+0x2d0>)
  m_highCapacity = false;
    63e6:	f8df a314 	ldr.w	sl, [pc, #788]	; 66fc <SdioCard::begin(SdioConfig)+0x328>
  m_version2 = false;
    63ea:	4faf      	ldr	r7, [pc, #700]	; (66a8 <SdioCard::begin(SdioConfig)+0x2d4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    63ec:	7022      	strb	r2, [r4, #0]
  m_curState = IDLE_STATE;
    63ee:	7242      	strb	r2, [r0, #9]
  m_highCapacity = false;
    63f0:	f88a 2000 	strb.w	r2, [sl]
  m_version2 = false;
    63f4:	703a      	strb	r2, [r7, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    63f6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    63fa:	7201      	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    63fc:	2105      	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    63fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    6402:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 66c4 <SdioCard::begin(SdioConfig)+0x2f0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6406:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    640a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    640e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    6412:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    6416:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    641a:	f042 0218 	orr.w	r2, r2, #24
    641e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    6422:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    642a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    642e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6432:	4a9e      	ldr	r2, [pc, #632]	; (66ac <SdioCard::begin(SdioConfig)+0x2d8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6434:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    6438:	f040 000c 	orr.w	r0, r0, #12
    643c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    6440:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6442:	f420 5060 	bic.w	r0, r0, #14336	; 0x3800
    6446:	6258      	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    6448:	69d8      	ldr	r0, [r3, #28]
    644a:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    644e:	61d8      	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    6450:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6452:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    6456:	6258      	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6458:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    645c:	f8c2 11d0 	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6460:	f8c2 11bc 	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6464:	f8c2 11c0 	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6468:	f8c2 11c4 	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    646c:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    6470:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6474:	4b8e      	ldr	r3, [pc, #568]	; (66b0 <SdioCard::begin(SdioConfig)+0x2dc>)
  SDHC_MIX_CTRL |= 0x80000000;
    6476:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    647a:	f8c8 2048 	str.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    647e:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    6482:	4313      	orrs	r3, r2
    6484:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    6488:	f8d8 502c 	ldr.w	r5, [r8, #44]	; 0x2c
    648c:	f015 7580 	ands.w	r5, r5, #16777216	; 0x1000000
    6490:	d1fa      	bne.n	6488 <SdioCard::begin(SdioConfig)+0xb4>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    6492:	f44f 70c8 	mov.w	r0, #400	; 0x190
    6496:	f7ff faa9 	bl	59ec <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    649a:	4b84      	ldr	r3, [pc, #528]	; (66ac <SdioCard::begin(SdioConfig)+0x2d8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    649c:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    64a0:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    64a4:	f8c3 51cc 	str.w	r5, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    64a8:	f8c3 51d0 	str.w	r5, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    64ac:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    64b0:	f8c3 51c0 	str.w	r5, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    64b4:	f8c3 51c4 	str.w	r5, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    64b8:	f8c3 51c8 	str.w	r5, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    64bc:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    64c0:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    64c4:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    64c8:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    64cc:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    64d0:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    64d4:	4b77      	ldr	r3, [pc, #476]	; (66b4 <SdioCard::begin(SdioConfig)+0x2e0>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    64d6:	4a78      	ldr	r2, [pc, #480]	; (66b8 <SdioCard::begin(SdioConfig)+0x2e4>)
    64d8:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
    64dc:	4b77      	ldr	r3, [pc, #476]	; (66bc <SdioCard::begin(SdioConfig)+0x2e8>)
    64de:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    64e2:	4b77      	ldr	r3, [pc, #476]	; (66c0 <SdioCard::begin(SdioConfig)+0x2ec>)
    64e4:	2260      	movs	r2, #96	; 0x60
    64e6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    64ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    64ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    64f2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    64f6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    64fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    64fe:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    6502:	4b70      	ldr	r3, [pc, #448]	; (66c4 <SdioCard::begin(SdioConfig)+0x2f0>)
    6504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    6506:	f011 6100 	ands.w	r1, r1, #134217728	; 0x8000000
    650a:	d1fb      	bne.n	6504 <SdioCard::begin(SdioConfig)+0x130>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    650c:	4608      	mov	r0, r1
    650e:	f7ff fc49 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6512:	4683      	mov	fp, r0
    6514:	b948      	cbnz	r0, 652a <SdioCard::begin(SdioConfig)+0x156>
  m_errorCode = code;
    6516:	2101      	movs	r1, #1
  m_errorLine = line;
    6518:	4b6b      	ldr	r3, [pc, #428]	; (66c8 <SdioCard::begin(SdioConfig)+0x2f4>)
    651a:	f240 22be 	movw	r2, #702	; 0x2be
  m_errorCode = code;
    651e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6520:	601a      	str	r2, [r3, #0]
}
    6522:	4658      	mov	r0, fp
    6524:	b013      	add	sp, #76	; 0x4c
    6526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    652a:	f04f 0803 	mov.w	r8, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    652e:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 6700 <SdioCard::begin(SdioConfig)+0x32c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    6532:	4d64      	ldr	r5, [pc, #400]	; (66c4 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    6534:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    6538:	4648      	mov	r0, r9
    653a:	f7ff fc33 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    653e:	2800      	cmp	r0, #0
    6540:	d14e      	bne.n	65e0 <SdioCard::begin(SdioConfig)+0x20c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    6542:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    6544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    6548:	62eb      	str	r3, [r5, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    654a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    654c:	01db      	lsls	r3, r3, #7
    654e:	d4fc      	bmi.n	654a <SdioCard::begin(SdioConfig)+0x176>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    6550:	f1b8 0801 	subs.w	r8, r8, #1
    6554:	d1ee      	bne.n	6534 <SdioCard::begin(SdioConfig)+0x160>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6556:	783b      	ldrb	r3, [r7, #0]
    6558:	2b00      	cmp	r3, #0
    655a:	4b5c      	ldr	r3, [pc, #368]	; (66cc <SdioCard::begin(SdioConfig)+0x2f8>)
    655c:	bf0c      	ite	eq
    655e:	f44f 1940 	moveq.w	r9, #3145728	; 0x300000
    6562:	4699      	movne	r9, r3
  int m = micros();
    6564:	f001 fd2a 	bl	7fbc <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6568:	4f59      	ldr	r7, [pc, #356]	; (66d0 <SdioCard::begin(SdioConfig)+0x2fc>)
  int m = micros();
    656a:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    656c:	f8df b194 	ldr.w	fp, [pc, #404]	; 6704 <SdioCard::begin(SdioConfig)+0x330>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6570:	f8df 8194 	ldr.w	r8, [pc, #404]	; 6708 <SdioCard::begin(SdioConfig)+0x334>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6574:	2100      	movs	r1, #0
    6576:	4638      	mov	r0, r7
    6578:	f7ff fc14 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    657c:	b958      	cbnz	r0, 6596 <SdioCard::begin(SdioConfig)+0x1c2>
      return sdError(SD_CARD_ERROR_ACMD41);
    657e:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    6582:	2117      	movs	r1, #23
  m_errorLine = line;
    6584:	4b50      	ldr	r3, [pc, #320]	; (66c8 <SdioCard::begin(SdioConfig)+0x2f4>)
    6586:	f240 22d3 	movw	r2, #723	; 0x2d3
}
    658a:	4658      	mov	r0, fp
  m_errorCode = code;
    658c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    658e:	601a      	str	r2, [r3, #0]
}
    6590:	b013      	add	sp, #76	; 0x4c
    6592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6596:	4649      	mov	r1, r9
    6598:	4658      	mov	r0, fp
    659a:	f7ff fc03 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    659e:	2800      	cmp	r0, #0
    65a0:	d0ed      	beq.n	657e <SdioCard::begin(SdioConfig)+0x1aa>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    65a2:	f001 fd0b 	bl	7fbc <micros>
    65a6:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    65a8:	4b46      	ldr	r3, [pc, #280]	; (66c4 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    65aa:	4540      	cmp	r0, r8
    65ac:	d8e7      	bhi.n	657e <SdioCard::begin(SdioConfig)+0x1aa>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    65ae:	691a      	ldr	r2, [r3, #16]
    65b0:	2a00      	cmp	r2, #0
    65b2:	dadf      	bge.n	6574 <SdioCard::begin(SdioConfig)+0x1a0>
  m_ocr = SDHC_CMDRSP0;
    65b4:	6919      	ldr	r1, [r3, #16]
    65b6:	4a47      	ldr	r2, [pc, #284]	; (66d4 <SdioCard::begin(SdioConfig)+0x300>)
    65b8:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    65ba:	691b      	ldr	r3, [r3, #16]
    65bc:	005d      	lsls	r5, r3, #1
    65be:	d502      	bpl.n	65c6 <SdioCard::begin(SdioConfig)+0x1f2>
    m_highCapacity = true;
    65c0:	2301      	movs	r3, #1
    65c2:	f88a 3000 	strb.w	r3, [sl]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    65c6:	2100      	movs	r1, #0
    65c8:	4843      	ldr	r0, [pc, #268]	; (66d8 <SdioCard::begin(SdioConfig)+0x304>)
    65ca:	f7ff fbeb 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    65ce:	4683      	mov	fp, r0
    65d0:	b9c8      	cbnz	r0, 6606 <SdioCard::begin(SdioConfig)+0x232>
  m_errorCode = code;
    65d2:	2102      	movs	r1, #2
  m_errorLine = line;
    65d4:	4b3c      	ldr	r3, [pc, #240]	; (66c8 <SdioCard::begin(SdioConfig)+0x2f4>)
    65d6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  m_errorCode = code;
    65da:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    65dc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    65de:	e7a0      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
      if (SDHC_CMDRSP0 != 0X1AA) {
    65e0:	4b38      	ldr	r3, [pc, #224]	; (66c4 <SdioCard::begin(SdioConfig)+0x2f0>)
    65e2:	691b      	ldr	r3, [r3, #16]
    65e4:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    65e8:	d008      	beq.n	65fc <SdioCard::begin(SdioConfig)+0x228>
  m_errorCode = code;
    65ea:	2106      	movs	r1, #6
  m_errorLine = line;
    65ec:	4b36      	ldr	r3, [pc, #216]	; (66c8 <SdioCard::begin(SdioConfig)+0x2f4>)
    65ee:	f44f 7231 	mov.w	r2, #708	; 0x2c4
        return sdError(SD_CARD_ERROR_CMD8);
    65f2:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    65f6:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    65f8:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    65fa:	e792      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
      m_version2 = true;
    65fc:	2301      	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    65fe:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 66cc <SdioCard::begin(SdioConfig)+0x2f8>
      m_version2 = true;
    6602:	703b      	strb	r3, [r7, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6604:	e7ae      	b.n	6564 <SdioCard::begin(SdioConfig)+0x190>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    6606:	2100      	movs	r1, #0
    6608:	4834      	ldr	r0, [pc, #208]	; (66dc <SdioCard::begin(SdioConfig)+0x308>)
    660a:	f7ff fbcb 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    660e:	4683      	mov	fp, r0
    6610:	b930      	cbnz	r0, 6620 <SdioCard::begin(SdioConfig)+0x24c>
  m_errorCode = code;
    6612:	2103      	movs	r1, #3
  m_errorLine = line;
    6614:	4b2c      	ldr	r3, [pc, #176]	; (66c8 <SdioCard::begin(SdioConfig)+0x2f4>)
    6616:	f240 22df 	movw	r2, #735	; 0x2df
  m_errorCode = code;
    661a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    661c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    661e:	e780      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6620:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 66c4 <SdioCard::begin(SdioConfig)+0x2f0>
    6624:	4b2e      	ldr	r3, [pc, #184]	; (66e0 <SdioCard::begin(SdioConfig)+0x30c>)
    6626:	f8da 2010 	ldr.w	r2, [sl, #16]
    662a:	4d2e      	ldr	r5, [pc, #184]	; (66e4 <SdioCard::begin(SdioConfig)+0x310>)
    662c:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    662e:	492e      	ldr	r1, [pc, #184]	; (66e8 <SdioCard::begin(SdioConfig)+0x314>)
    6630:	482e      	ldr	r0, [pc, #184]	; (66ec <SdioCard::begin(SdioConfig)+0x318>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6632:	602b      	str	r3, [r5, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6634:	f7ff fc02 	bl	5e3c <readReg16(unsigned long, void*)>
    6638:	4683      	mov	fp, r0
    663a:	b930      	cbnz	r0, 664a <SdioCard::begin(SdioConfig)+0x276>
  m_errorCode = code;
    663c:	2107      	movs	r1, #7
  m_errorLine = line;
    663e:	4b22      	ldr	r3, [pc, #136]	; (66c8 <SdioCard::begin(SdioConfig)+0x2f4>)
    6640:	f44f 7239 	mov.w	r2, #740	; 0x2e4
  m_errorCode = code;
    6644:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6646:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    6648:	e76b      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    664a:	4929      	ldr	r1, [pc, #164]	; (66f0 <SdioCard::begin(SdioConfig)+0x31c>)
    664c:	4829      	ldr	r0, [pc, #164]	; (66f4 <SdioCard::begin(SdioConfig)+0x320>)
    664e:	f7ff fbf5 	bl	5e3c <readReg16(unsigned long, void*)>
    6652:	4683      	mov	fp, r0
    6654:	b930      	cbnz	r0, 6664 <SdioCard::begin(SdioConfig)+0x290>
  m_errorCode = code;
    6656:	2108      	movs	r1, #8
  m_errorLine = line;
    6658:	4b1b      	ldr	r3, [pc, #108]	; (66c8 <SdioCard::begin(SdioConfig)+0x2f4>)
    665a:	f240 22e7 	movw	r2, #743	; 0x2e7
  m_errorCode = code;
    665e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6660:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    6662:	e75e      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    6664:	6829      	ldr	r1, [r5, #0]
    6666:	4824      	ldr	r0, [pc, #144]	; (66f8 <SdioCard::begin(SdioConfig)+0x324>)
    6668:	f7ff fb9c 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    666c:	4683      	mov	fp, r0
    666e:	b930      	cbnz	r0, 667e <SdioCard::begin(SdioConfig)+0x2aa>
  m_errorCode = code;
    6670:	2105      	movs	r1, #5
  m_errorLine = line;
    6672:	4b15      	ldr	r3, [pc, #84]	; (66c8 <SdioCard::begin(SdioConfig)+0x2f4>)
    6674:	f240 22ea 	movw	r2, #746	; 0x2ea
  m_errorCode = code;
    6678:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    667a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    667c:	e751      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    667e:	6829      	ldr	r1, [r5, #0]
    6680:	4813      	ldr	r0, [pc, #76]	; (66d0 <SdioCard::begin(SdioConfig)+0x2fc>)
    6682:	f7ff fb8f 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6686:	2800      	cmp	r0, #0
    6688:	d140      	bne.n	670c <SdioCard::begin(SdioConfig)+0x338>
  m_errorCode = code;
    668a:	2114      	movs	r1, #20
  m_errorLine = line;
    668c:	4b0e      	ldr	r3, [pc, #56]	; (66c8 <SdioCard::begin(SdioConfig)+0x2f4>)
    668e:	f240 22ee 	movw	r2, #750	; 0x2ee
    return sdError(SD_CARD_ERROR_ACMD6);
    6692:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    6696:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6698:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    669a:	e742      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
    669c:	2002949a 	.word	0x2002949a
    66a0:	400d8000 	.word	0x400d8000
    66a4:	20008bf6 	.word	0x20008bf6
    66a8:	2002949b 	.word	0x2002949b
    66ac:	401f8000 	.word	0x401f8000
    66b0:	01008000 	.word	0x01008000
    66b4:	117f000b 	.word	0x117f000b
    66b8:	0000599d 	.word	0x0000599d
    66bc:	20008c00 	.word	0x20008c00
    66c0:	e000e400 	.word	0xe000e400
    66c4:	402c0000 	.word	0x402c0000
    66c8:	20027f48 	.word	0x20027f48
    66cc:	40300000 	.word	0x40300000
    66d0:	371a0000 	.word	0x371a0000
    66d4:	20028174 	.word	0x20028174
    66d8:	02090000 	.word	0x02090000
    66dc:	031a0000 	.word	0x031a0000
    66e0:	ffff0000 	.word	0xffff0000
    66e4:	20028178 	.word	0x20028178
    66e8:	20028164 	.word	0x20028164
    66ec:	09090000 	.word	0x09090000
    66f0:	20028154 	.word	0x20028154
    66f4:	0a090000 	.word	0x0a090000
    66f8:	071b0000 	.word	0x071b0000
    66fc:	2002949c 	.word	0x2002949c
    6700:	081a0000 	.word	0x081a0000
    6704:	29020000 	.word	0x29020000
    6708:	000f4240 	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    670c:	2102      	movs	r1, #2
    670e:	4886      	ldr	r0, [pc, #536]	; (6928 <SdioCard::begin(SdioConfig)+0x554>)
    6710:	f7ff fb48 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6714:	2800      	cmp	r0, #0
    6716:	d0b8      	beq.n	668a <SdioCard::begin(SdioConfig)+0x2b6>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6718:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    671c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 6960 <SdioCard::begin(SdioConfig)+0x58c>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6720:	f023 0306 	bic.w	r3, r3, #6
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6724:	f8df 821c 	ldr.w	r8, [pc, #540]	; 6944 <SdioCard::begin(SdioConfig)+0x570>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6728:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    672c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    6730:	f043 0302 	orr.w	r3, r3, #2
    6734:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    6738:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    673c:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
  uint32_t m = micros();
    6740:	f001 fc3c 	bl	7fbc <micros>
    6744:	4607      	mov	r7, r0
  while (fcn()) {
    6746:	e004      	b.n	6752 <SdioCard::begin(SdioConfig)+0x37e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6748:	f001 fc38 	bl	7fbc <micros>
    674c:	1bc0      	subs	r0, r0, r7
    674e:	4540      	cmp	r0, r8
    6750:	d82b      	bhi.n	67aa <SdioCard::begin(SdioConfig)+0x3d6>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6752:	6829      	ldr	r1, [r5, #0]
    6754:	4648      	mov	r0, r9
    6756:	f7ff fb25 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    675a:	2800      	cmp	r0, #0
    675c:	d0f4      	beq.n	6748 <SdioCard::begin(SdioConfig)+0x374>
    675e:	f8da 3010 	ldr.w	r3, [sl, #16]
  while (fcn()) {
    6762:	05d8      	lsls	r0, r3, #23
    6764:	d5f0      	bpl.n	6748 <SdioCard::begin(SdioConfig)+0x374>
  m_dmaBusy = true;
    6766:	2301      	movs	r3, #1
    6768:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 6964 <SdioCard::begin(SdioConfig)+0x590>
  m_irqstat = 0;
    676c:	4f6f      	ldr	r7, [pc, #444]	; (692c <SdioCard::begin(SdioConfig)+0x558>)
    676e:	f04f 0b00 	mov.w	fp, #0
  m_dmaBusy = true;
    6772:	f888 3000 	strb.w	r3, [r8]
  SDHC_DSADDR = (uint32_t)scr;
    6776:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 6968 <SdioCard::begin(SdioConfig)+0x594>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    677a:	4b6d      	ldr	r3, [pc, #436]	; (6930 <SdioCard::begin(SdioConfig)+0x55c>)
  m_irqstat = 0;
    677c:	f8c7 b000 	str.w	fp, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    6780:	f8ca 9000 	str.w	r9, [sl]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    6784:	f8ca 3004 	str.w	r3, [sl, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6788:	4b6a      	ldr	r3, [pc, #424]	; (6934 <SdioCard::begin(SdioConfig)+0x560>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    678a:	486b      	ldr	r0, [pc, #428]	; (6938 <SdioCard::begin(SdioConfig)+0x564>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    678c:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6790:	6829      	ldr	r1, [r5, #0]
    6792:	f7ff fb07 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6796:	b988      	cbnz	r0, 67bc <SdioCard::begin(SdioConfig)+0x3e8>
  m_errorCode = code;
    6798:	2118      	movs	r1, #24
  m_errorLine = line;
    679a:	4b68      	ldr	r3, [pc, #416]	; (693c <SdioCard::begin(SdioConfig)+0x568>)
    679c:	f240 12d7 	movw	r2, #471	; 0x1d7
    return false;
    67a0:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    67a4:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    67a6:	601a      	str	r2, [r3, #0]
  return false;
    67a8:	e6bb      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    67aa:	210a      	movs	r1, #10
  m_errorLine = line;
    67ac:	4b63      	ldr	r3, [pc, #396]	; (693c <SdioCard::begin(SdioConfig)+0x568>)
    67ae:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    return false;
    67b2:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    67b6:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    67b8:	601a      	str	r2, [r3, #0]
  return false;
    67ba:	e6b2      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    67bc:	4659      	mov	r1, fp
    67be:	4860      	ldr	r0, [pc, #384]	; (6940 <SdioCard::begin(SdioConfig)+0x56c>)
    67c0:	f7ff faf0 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    67c4:	2800      	cmp	r0, #0
    67c6:	d0e7      	beq.n	6798 <SdioCard::begin(SdioConfig)+0x3c4>
  if (!waitDmaStatus()) {
    67c8:	f7ff fa1a 	bl	5c00 <waitDmaStatus()>
    67cc:	4683      	mov	fp, r0
    67ce:	b930      	cbnz	r0, 67de <SdioCard::begin(SdioConfig)+0x40a>
  m_errorCode = code;
    67d0:	2126      	movs	r1, #38	; 0x26
  m_errorLine = line;
    67d2:	4b5a      	ldr	r3, [pc, #360]	; (693c <SdioCard::begin(SdioConfig)+0x568>)
    67d4:	f44f 72ed 	mov.w	r2, #474	; 0x1da
  m_errorCode = code;
    67d8:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    67da:	601a      	str	r2, [r3, #0]
  return false;
    67dc:	e6a1      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
  uint32_t m = micros();
    67de:	f001 fbed 	bl	7fbc <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    67e2:	f8df a17c 	ldr.w	sl, [pc, #380]	; 6960 <SdioCard::begin(SdioConfig)+0x58c>
    67e6:	f8df b184 	ldr.w	fp, [pc, #388]	; 696c <SdioCard::begin(SdioConfig)+0x598>
  uint32_t m = micros();
    67ea:	9001      	str	r0, [sp, #4]
  while (fcn()) {
    67ec:	e006      	b.n	67fc <SdioCard::begin(SdioConfig)+0x428>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    67ee:	f001 fbe5 	bl	7fbc <micros>
    67f2:	9b01      	ldr	r3, [sp, #4]
    67f4:	1ac0      	subs	r0, r0, r3
    67f6:	4b53      	ldr	r3, [pc, #332]	; (6944 <SdioCard::begin(SdioConfig)+0x570>)
    67f8:	4298      	cmp	r0, r3
    67fa:	d827      	bhi.n	684c <SdioCard::begin(SdioConfig)+0x478>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    67fc:	6829      	ldr	r1, [r5, #0]
    67fe:	4650      	mov	r0, sl
    6800:	f7ff fad0 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6804:	2800      	cmp	r0, #0
    6806:	d0f2      	beq.n	67ee <SdioCard::begin(SdioConfig)+0x41a>
    6808:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    680c:	05d9      	lsls	r1, r3, #23
    680e:	d5ee      	bpl.n	67ee <SdioCard::begin(SdioConfig)+0x41a>
  m_dmaBusy = true;
    6810:	2201      	movs	r2, #1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6812:	4849      	ldr	r0, [pc, #292]	; (6938 <SdioCard::begin(SdioConfig)+0x564>)
  m_dmaBusy = true;
    6814:	f888 2000 	strb.w	r2, [r8]
  m_irqstat = 0;
    6818:	f04f 0800 	mov.w	r8, #0
  SDHC_DSADDR = (uint32_t)scr;
    681c:	4a4a      	ldr	r2, [pc, #296]	; (6948 <SdioCard::begin(SdioConfig)+0x574>)
  m_irqstat = 0;
    681e:	f8c7 8000 	str.w	r8, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    6822:	f8cb 2000 	str.w	r2, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    6826:	4a49      	ldr	r2, [pc, #292]	; (694c <SdioCard::begin(SdioConfig)+0x578>)
    6828:	f8cb 2004 	str.w	r2, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    682c:	4a41      	ldr	r2, [pc, #260]	; (6934 <SdioCard::begin(SdioConfig)+0x560>)
    682e:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6832:	6829      	ldr	r1, [r5, #0]
    6834:	f7ff fab6 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6838:	b988      	cbnz	r0, 685e <SdioCard::begin(SdioConfig)+0x48a>
  m_errorCode = code;
    683a:	2115      	movs	r1, #21
  m_errorLine = line;
    683c:	4b3f      	ldr	r3, [pc, #252]	; (693c <SdioCard::begin(SdioConfig)+0x568>)
    683e:	f240 12c5 	movw	r2, #453	; 0x1c5
    return false;
    6842:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    6846:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6848:	601a      	str	r2, [r3, #0]
  return false;
    684a:	e66a      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    684c:	210a      	movs	r1, #10
  m_errorLine = line;
    684e:	4b3b      	ldr	r3, [pc, #236]	; (693c <SdioCard::begin(SdioConfig)+0x568>)
    6850:	f44f 72df 	mov.w	r2, #446	; 0x1be
    return false;
    6854:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    6858:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    685a:	601a      	str	r2, [r3, #0]
  return false;
    685c:	e661      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    685e:	4641      	mov	r1, r8
    6860:	483b      	ldr	r0, [pc, #236]	; (6950 <SdioCard::begin(SdioConfig)+0x57c>)
    6862:	f7ff fa9f 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6866:	2800      	cmp	r0, #0
    6868:	d0e7      	beq.n	683a <SdioCard::begin(SdioConfig)+0x466>
  if (!waitDmaStatus()) {
    686a:	f7ff f9c9 	bl	5c00 <waitDmaStatus()>
    686e:	4683      	mov	fp, r0
    6870:	b930      	cbnz	r0, 6880 <SdioCard::begin(SdioConfig)+0x4ac>
  m_errorCode = code;
    6872:	2126      	movs	r1, #38	; 0x26
  m_errorLine = line;
    6874:	4b31      	ldr	r3, [pc, #196]	; (693c <SdioCard::begin(SdioConfig)+0x568>)
    6876:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
  m_errorCode = code;
    687a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    687c:	601a      	str	r2, [r3, #0]
  return false;
    687e:	e650      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
  /** Bytes 0-3 SD Association, bytes 4-7 reserved for manufacturer. */
  uint8_t scr[8];
  /** \return SCR_STRUCTURE field  - must be zero.*/
  uint8_t srcStructure() const { return scr[0] >> 4; }
  /** \return SD_SPEC field 0 - v1.0 or V1.01, 1 - 1.10, 2 - V2.00 or greater */
  uint8_t sdSpec() const { return scr[0] & 0XF; }
    6880:	f899 3000 	ldrb.w	r3, [r9]
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6884:	071a      	lsls	r2, r3, #28
    6886:	d018      	beq.n	68ba <SdioCard::begin(SdioConfig)+0x4e6>
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    6888:	6833      	ldr	r3, [r6, #0]
    688a:	aa02      	add	r2, sp, #8
    688c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
    6890:	4630      	mov	r0, r6
    6892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6894:	4798      	blx	r3
    6896:	b180      	cbz	r0, 68ba <SdioCard::begin(SdioConfig)+0x4e6>
    6898:	f89d 3015 	ldrb.w	r3, [sp, #21]
    689c:	079b      	lsls	r3, r3, #30
    689e:	d50c      	bpl.n	68ba <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    68a0:	6833      	ldr	r3, [r6, #0]
    68a2:	aa02      	add	r2, sp, #8
    68a4:	4630      	mov	r0, r6
    68a6:	492b      	ldr	r1, [pc, #172]	; (6954 <SdioCard::begin(SdioConfig)+0x580>)
    68a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    68aa:	4798      	blx	r3
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    68ac:	b128      	cbz	r0, 68ba <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    68ae:	f89d 3018 	ldrb.w	r3, [sp, #24]
    68b2:	f003 030f 	and.w	r3, r3, #15
    68b6:	2b01      	cmp	r3, #1
    68b8:	d032      	beq.n	6920 <SdioCard::begin(SdioConfig)+0x54c>
    kHzSdClk = 25000;
    68ba:	f246 10a8 	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    68be:	4c26      	ldr	r4, [pc, #152]	; (6958 <SdioCard::begin(SdioConfig)+0x584>)
    68c0:	2305      	movs	r3, #5
    68c2:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    68c6:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    68ca:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    68ce:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    68d2:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    68d6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    68da:	f7ff f887 	bl	59ec <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    68de:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    68e0:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    68e4:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    68e8:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    68ec:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    68f0:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    68f4:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    68f8:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    68fc:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6900:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    6904:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    6908:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    690c:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    6910:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    6912:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    6916:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    691a:	4a10      	ldr	r2, [pc, #64]	; (695c <SdioCard::begin(SdioConfig)+0x588>)
    691c:	7013      	strb	r3, [r2, #0]
  return true;
    691e:	e600      	b.n	6522 <SdioCard::begin(SdioConfig)+0x14e>
    kHzSdClk = 50000;
    6920:	f24c 3050 	movw	r0, #50000	; 0xc350
    6924:	e7cb      	b.n	68be <SdioCard::begin(SdioConfig)+0x4ea>
    6926:	bf00      	nop
    6928:	061a0000 	.word	0x061a0000
    692c:	20028868 	.word	0x20028868
    6930:	00010008 	.word	0x00010008
    6934:	117f0002 	.word	0x117f0002
    6938:	371a0000 	.word	0x371a0000
    693c:	20027f48 	.word	0x20027f48
    6940:	333a0011 	.word	0x333a0011
    6944:	000f4240 	.word	0x000f4240
    6948:	20028184 	.word	0x20028184
    694c:	00010040 	.word	0x00010040
    6950:	0d3a0011 	.word	0x0d3a0011
    6954:	80fffff1 	.word	0x80fffff1
    6958:	401f8000 	.word	0x401f8000
    695c:	2002949a 	.word	0x2002949a
    6960:	0d1a0000 	.word	0x0d1a0000
    6964:	2002949e 	.word	0x2002949e
    6968:	2002817c 	.word	0x2002817c
    696c:	402c0000 	.word	0x402c0000

00006970 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    6970:	4b37      	ldr	r3, [pc, #220]	; (6a50 <SdioCard::readData(unsigned char*)+0xe0>)
    6972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6974:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    6976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    697a:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    697c:	d40d      	bmi.n	699a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    697e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6980:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    6984:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    6986:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    6988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    698a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    698e:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6992:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    6996:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    6998:	b662      	cpsie	i
  uint32_t m = micros();
    699a:	f001 fb0f 	bl	7fbc <micros>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    699e:	4e2c      	ldr	r6, [pc, #176]	; (6a50 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    69a0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 6a68 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    69a4:	4605      	mov	r5, r0
  while (fcn()) {
    69a6:	e004      	b.n	69b2 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    69a8:	f001 fb08 	bl	7fbc <micros>
    69ac:	1b43      	subs	r3, r0, r5
    69ae:	4543      	cmp	r3, r8
    69b0:	d837      	bhi.n	6a22 <SdioCard::readData(unsigned char*)+0xb2>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    69b2:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    69b4:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    69b8:	d0f6      	beq.n	69a8 <SdioCard::readData(unsigned char*)+0x38>
    69ba:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    69be:	4824      	ldr	r0, [pc, #144]	; (6a50 <SdioCard::readData(unsigned char*)+0xe0>)
    69c0:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    69c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    69c6:	051b      	lsls	r3, r3, #20
    69c8:	d5fc      	bpl.n	69c4 <SdioCard::readData(unsigned char*)+0x54>
    69ca:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    69ce:	6a02      	ldr	r2, [r0, #32]
    69d0:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    69d4:	459c      	cmp	ip, r3
    69d6:	d1fa      	bne.n	69ce <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    69d8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    69dc:	4567      	cmp	r7, ip
    69de:	d1f1      	bne.n	69c4 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    69e0:	f001 faec 	bl	7fbc <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    69e4:	4f1a      	ldr	r7, [pc, #104]	; (6a50 <SdioCard::readData(unsigned char*)+0xe0>)
    69e6:	4d1b      	ldr	r5, [pc, #108]	; (6a54 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    69e8:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    69ea:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6a68 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    69ee:	e004      	b.n	69fa <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    69f0:	f001 fae4 	bl	7fbc <micros>
    69f4:	1b83      	subs	r3, r0, r6
    69f6:	4543      	cmp	r3, r8
    69f8:	d81d      	bhi.n	6a36 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    69fa:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    69fc:	402c      	ands	r4, r5
    69fe:	d0f7      	beq.n	69f0 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    6a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6a02:	4a15      	ldr	r2, [pc, #84]	; (6a58 <SdioCard::readData(unsigned char*)+0xe8>)
    6a04:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    6a06:	6813      	ldr	r3, [r2, #0]
    6a08:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6a0a:	6813      	ldr	r3, [r2, #0]
    6a0c:	f013 0302 	ands.w	r3, r3, #2
    6a10:	d01b      	beq.n	6a4a <SdioCard::readData(unsigned char*)+0xda>
    6a12:	6812      	ldr	r2, [r2, #0]
    6a14:	4b11      	ldr	r3, [pc, #68]	; (6a5c <SdioCard::readData(unsigned char*)+0xec>)
    6a16:	421a      	tst	r2, r3
    6a18:	bf0c      	ite	eq
    6a1a:	2001      	moveq	r0, #1
    6a1c:	2000      	movne	r0, #0
}
    6a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    6a22:	490f      	ldr	r1, [pc, #60]	; (6a60 <SdioCard::readData(unsigned char*)+0xf0>)
    6a24:	251b      	movs	r5, #27
  m_errorLine = line;
    6a26:	4b0f      	ldr	r3, [pc, #60]	; (6a64 <SdioCard::readData(unsigned char*)+0xf4>)
    6a28:	f240 3279 	movw	r2, #889	; 0x379
    return sdError(SD_CARD_ERROR_READ_FIFO);
    6a2c:	4620      	mov	r0, r4
  m_errorCode = code;
    6a2e:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6a30:	601a      	str	r2, [r3, #0]
}
    6a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    6a36:	490a      	ldr	r1, [pc, #40]	; (6a60 <SdioCard::readData(unsigned char*)+0xf0>)
    6a38:	251e      	movs	r5, #30
  m_errorLine = line;
    6a3a:	4b0a      	ldr	r3, [pc, #40]	; (6a64 <SdioCard::readData(unsigned char*)+0xf4>)
    6a3c:	f44f 7261 	mov.w	r2, #900	; 0x384
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    6a40:	4620      	mov	r0, r4
  m_errorCode = code;
    6a42:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6a44:	601a      	str	r2, [r3, #0]
}
    6a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6a4a:	4618      	mov	r0, r3
}
    6a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a50:	402c0000 	.word	0x402c0000
    6a54:	117f0002 	.word	0x117f0002
    6a58:	20028868 	.word	0x20028868
    6a5c:	117f0000 	.word	0x117f0000
    6a60:	20008bf6 	.word	0x20008bf6
    6a64:	20027f48 	.word	0x20027f48
    6a68:	000f4240 	.word	0x000f4240

00006a6c <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    6a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    6a70:	4b29      	ldr	r3, [pc, #164]	; (6b18 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    6a72:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    6a74:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6b38 <SdioCard::readStart(unsigned long)+0xcc>
    6a78:	4e28      	ldr	r6, [pc, #160]	; (6b1c <SdioCard::readStart(unsigned long)+0xb0>)
    6a7a:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    6a7e:	f001 fa9d 	bl	7fbc <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6a82:	4d27      	ldr	r5, [pc, #156]	; (6b20 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    6a84:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6a86:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6b3c <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6a8a:	4f26      	ldr	r7, [pc, #152]	; (6b24 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    6a8c:	e006      	b.n	6a9c <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6a8e:	f001 fa95 	bl	7fbc <micros>
    6a92:	1b00      	subs	r0, r0, r4
    6a94:	42b8      	cmp	r0, r7
    6a96:	d829      	bhi.n	6aec <SdioCard::readStart(unsigned long)+0x80>
    yield();
    6a98:	f002 fd9a 	bl	95d0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6a9c:	6831      	ldr	r1, [r6, #0]
    6a9e:	4628      	mov	r0, r5
    6aa0:	f7ff f980 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6aa4:	2800      	cmp	r0, #0
    6aa6:	d0f2      	beq.n	6a8e <SdioCard::readStart(unsigned long)+0x22>
    6aa8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6aac:	05db      	lsls	r3, r3, #23
    6aae:	d5ee      	bpl.n	6a8e <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    6ab0:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    6ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    6ab6:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6aba:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    6abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6ac2:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6ac6:	4b18      	ldr	r3, [pc, #96]	; (6b28 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    6ac8:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6acc:	781b      	ldrb	r3, [r3, #0]
    6ace:	b1cb      	cbz	r3, 6b04 <SdioCard::readStart(unsigned long)+0x98>
    6ad0:	4649      	mov	r1, r9
    6ad2:	4816      	ldr	r0, [pc, #88]	; (6b2c <SdioCard::readStart(unsigned long)+0xc0>)
    6ad4:	f7ff f966 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6ad8:	b930      	cbnz	r0, 6ae8 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    6ada:	4915      	ldr	r1, [pc, #84]	; (6b30 <SdioCard::readStart(unsigned long)+0xc4>)
    6adc:	240c      	movs	r4, #12
  m_errorLine = line;
    6ade:	4b15      	ldr	r3, [pc, #84]	; (6b34 <SdioCard::readStart(unsigned long)+0xc8>)
    6ae0:	f240 32ea 	movw	r2, #1002	; 0x3ea
  m_errorCode = code;
    6ae4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6ae6:	601a      	str	r2, [r3, #0]
}
    6ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    6aec:	4a10      	ldr	r2, [pc, #64]	; (6b30 <SdioCard::readStart(unsigned long)+0xc4>)
    6aee:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6af0:	2000      	movs	r0, #0
  m_errorLine = line;
    6af2:	4b10      	ldr	r3, [pc, #64]	; (6b34 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    6af4:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6af6:	f240 32de 	movw	r2, #990	; 0x3de
      m_busyFcn = 0;
    6afa:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    6afe:	601a      	str	r2, [r3, #0]
}
    6b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6b04:	ea4f 2949 	mov.w	r9, r9, lsl #9
    6b08:	4808      	ldr	r0, [pc, #32]	; (6b2c <SdioCard::readStart(unsigned long)+0xc0>)
    6b0a:	4649      	mov	r1, r9
    6b0c:	f7ff f94a 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6b10:	2800      	cmp	r0, #0
    6b12:	d1e9      	bne.n	6ae8 <SdioCard::readStart(unsigned long)+0x7c>
    6b14:	e7e1      	b.n	6ada <SdioCard::readStart(unsigned long)+0x6e>
    6b16:	bf00      	nop
    6b18:	00005f39 	.word	0x00005f39
    6b1c:	20028178 	.word	0x20028178
    6b20:	0d1a0000 	.word	0x0d1a0000
    6b24:	000f4240 	.word	0x000f4240
    6b28:	2002949c 	.word	0x2002949c
    6b2c:	123a0030 	.word	0x123a0030
    6b30:	20008bf6 	.word	0x20008bf6
    6b34:	20027f48 	.word	0x20027f48
    6b38:	20028864 	.word	0x20028864
    6b3c:	402c0000 	.word	0x402c0000

00006b40 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    6b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    6b44:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6b46:	4c1d      	ldr	r4, [pc, #116]	; (6bbc <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    6b48:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    6b4a:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6b4c:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6b4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6b50:	481b      	ldr	r0, [pc, #108]	; (6bc0 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6b56:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6b58:	f7ff f924 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6b5c:	b940      	cbnz	r0, 6b70 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    6b5e:	4919      	ldr	r1, [pc, #100]	; (6bc4 <SdioCard::stopTransmission(bool)+0x84>)
    6b60:	2409      	movs	r4, #9
  m_errorLine = line;
    6b62:	4b19      	ldr	r3, [pc, #100]	; (6bc8 <SdioCard::stopTransmission(bool)+0x88>)
    6b64:	f240 32fa 	movw	r2, #1018	; 0x3fa
  m_errorCode = code;
    6b68:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6b6a:	601a      	str	r2, [r3, #0]
}
    6b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    6b70:	2d00      	cmp	r5, #0
    6b72:	d0fb      	beq.n	6b6c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    6b74:	4b15      	ldr	r3, [pc, #84]	; (6bcc <SdioCard::stopTransmission(bool)+0x8c>)
    6b76:	4e16      	ldr	r6, [pc, #88]	; (6bd0 <SdioCard::stopTransmission(bool)+0x90>)
    6b78:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    6b7a:	f001 fa1f 	bl	7fbc <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    6b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    6b80:	4607      	mov	r7, r0
  while (fcn()) {
    6b82:	01da      	lsls	r2, r3, #7
    6b84:	d416      	bmi.n	6bb4 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6b86:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6bd4 <SdioCard::stopTransmission(bool)+0x94>
    6b8a:	e004      	b.n	6b96 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    6b8c:	f002 fd20 	bl	95d0 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    6b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    6b92:	01db      	lsls	r3, r3, #7
    6b94:	d40e      	bmi.n	6bb4 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6b96:	f001 fa11 	bl	7fbc <micros>
    6b9a:	1bc0      	subs	r0, r0, r7
    6b9c:	4540      	cmp	r0, r8
    6b9e:	d9f5      	bls.n	6b8c <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    6ba0:	4a08      	ldr	r2, [pc, #32]	; (6bc4 <SdioCard::stopTransmission(bool)+0x84>)
    6ba2:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6ba4:	2000      	movs	r0, #0
  m_errorLine = line;
    6ba6:	4b08      	ldr	r3, [pc, #32]	; (6bc8 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    6ba8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6baa:	f240 32fe 	movw	r2, #1022	; 0x3fe
      m_busyFcn = 0;
    6bae:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    6bb0:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    6bb2:	e7db      	b.n	6b6c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    6bb4:	2300      	movs	r3, #0
  return true;
    6bb6:	4628      	mov	r0, r5
  m_busyFcn = 0;
    6bb8:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    6bba:	e7d7      	b.n	6b6c <SdioCard::stopTransmission(bool)+0x2c>
    6bbc:	402c0000 	.word	0x402c0000
    6bc0:	0cdb0000 	.word	0x0cdb0000
    6bc4:	20008bf6 	.word	0x20008bf6
    6bc8:	20027f48 	.word	0x20027f48
    6bcc:	000059cd 	.word	0x000059cd
    6bd0:	20028864 	.word	0x20028864
    6bd4:	000f4240 	.word	0x000f4240

00006bd8 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    6bd8:	4b0a      	ldr	r3, [pc, #40]	; (6c04 <SdioCard::syncDevice()+0x2c>)
    6bda:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    6bdc:	b510      	push	{r4, lr}
    6bde:	4604      	mov	r4, r0
  if (!m_transferActive) {
    6be0:	b91b      	cbnz	r3, 6bea <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    6be2:	7a63      	ldrb	r3, [r4, #9]
    6be4:	b943      	cbnz	r3, 6bf8 <SdioCard::syncDevice()+0x20>
  return true;
    6be6:	2001      	movs	r0, #1
}
    6be8:	bd10      	pop	{r4, pc}
    6bea:	f7ff f83d 	bl	5c68 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6bee:	2800      	cmp	r0, #0
    6bf0:	d0fa      	beq.n	6be8 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    6bf2:	7a63      	ldrb	r3, [r4, #9]
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	d0f6      	beq.n	6be6 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    6bf8:	4620      	mov	r0, r4
    6bfa:	2101      	movs	r1, #1
}
    6bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    6c00:	f7ff bf9e 	b.w	6b40 <SdioCard::stopTransmission(bool)>
    6c04:	2002949d 	.word	0x2002949d

00006c08 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6c0c:	7a43      	ldrb	r3, [r0, #9]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6c0e:	460d      	mov	r5, r1
    6c10:	4616      	mov	r6, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6c12:	b1bb      	cbz	r3, 6c44 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    6c14:	6803      	ldr	r3, [r0, #0]
    6c16:	4604      	mov	r4, r0
    6c18:	4a3f      	ldr	r2, [pc, #252]	; (6d18 <SdioCard::erase(unsigned long, unsigned long)+0x110>)
    6c1a:	69db      	ldr	r3, [r3, #28]
    6c1c:	4293      	cmp	r3, r2
    6c1e:	d14a      	bne.n	6cb6 <SdioCard::erase(unsigned long, unsigned long)+0xae>
  if (!m_transferActive) {
    6c20:	4b3e      	ldr	r3, [pc, #248]	; (6d1c <SdioCard::erase(unsigned long, unsigned long)+0x114>)
    6c22:	781b      	ldrb	r3, [r3, #0]
    6c24:	b93b      	cbnz	r3, 6c36 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
    return stopTransmission(true);
    6c26:	2101      	movs	r1, #1
    6c28:	4620      	mov	r0, r4
    6c2a:	f7ff ff89 	bl	6b40 <SdioCard::stopTransmission(bool)>
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6c2e:	b948      	cbnz	r0, 6c44 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return false;
    6c30:	2000      	movs	r0, #0
}
    6c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c36:	f7ff f817 	bl	5c68 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6c3a:	2800      	cmp	r0, #0
    6c3c:	d0f8      	beq.n	6c30 <SdioCard::erase(unsigned long, unsigned long)+0x28>
  if (m_curState != IDLE_STATE) {
    6c3e:	7a63      	ldrb	r3, [r4, #9]
    6c40:	2b00      	cmp	r3, #0
    6c42:	d1f0      	bne.n	6c26 <SdioCard::erase(unsigned long, unsigned long)+0x1e>
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    6c44:	4c36      	ldr	r4, [pc, #216]	; (6d20 <SdioCard::erase(unsigned long, unsigned long)+0x118>)
    6c46:	7aa3      	ldrb	r3, [r4, #10]
  if (!m_csd.eraseSingleBlock()) {
    6c48:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    6c4c:	d112      	bne.n	6c74 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    6c4e:	005b      	lsls	r3, r3, #1
    6c50:	7ae2      	ldrb	r2, [r4, #11]
    6c52:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    6c56:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    6c5a:	1c72      	adds	r2, r6, #1
    6c5c:	432a      	orrs	r2, r5
    6c5e:	4213      	tst	r3, r2
    6c60:	d008      	beq.n	6c74 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  m_errorCode = code;
    6c62:	4930      	ldr	r1, [pc, #192]	; (6d24 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6c64:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    6c66:	4b30      	ldr	r3, [pc, #192]	; (6d28 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6c68:	f240 322d 	movw	r2, #813	; 0x32d
  m_errorCode = code;
    6c6c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6c6e:	601a      	str	r2, [r3, #0]
}
    6c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    6c74:	4b2d      	ldr	r3, [pc, #180]	; (6d2c <SdioCard::erase(unsigned long, unsigned long)+0x124>)
    6c76:	781b      	ldrb	r3, [r3, #0]
    6c78:	b90b      	cbnz	r3, 6c7e <SdioCard::erase(unsigned long, unsigned long)+0x76>
    firstSector <<= 9;
    6c7a:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    6c7c:	0276      	lsls	r6, r6, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    6c7e:	4629      	mov	r1, r5
    6c80:	482b      	ldr	r0, [pc, #172]	; (6d30 <SdioCard::erase(unsigned long, unsigned long)+0x128>)
    6c82:	f7ff f88f 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6c86:	b940      	cbnz	r0, 6c9a <SdioCard::erase(unsigned long, unsigned long)+0x92>
  m_errorCode = code;
    6c88:	4926      	ldr	r1, [pc, #152]	; (6d24 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6c8a:	240f      	movs	r4, #15
  m_errorLine = line;
    6c8c:	4b26      	ldr	r3, [pc, #152]	; (6d28 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6c8e:	f240 3235 	movw	r2, #821	; 0x335
  m_errorCode = code;
    6c92:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6c94:	601a      	str	r2, [r3, #0]
}
    6c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    6c9a:	4631      	mov	r1, r6
    6c9c:	4825      	ldr	r0, [pc, #148]	; (6d34 <SdioCard::erase(unsigned long, unsigned long)+0x12c>)
    6c9e:	f7ff f881 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6ca2:	b960      	cbnz	r0, 6cbe <SdioCard::erase(unsigned long, unsigned long)+0xb6>
  m_errorCode = code;
    6ca4:	491f      	ldr	r1, [pc, #124]	; (6d24 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6ca6:	2410      	movs	r4, #16
  m_errorLine = line;
    6ca8:	4b1f      	ldr	r3, [pc, #124]	; (6d28 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6caa:	f44f 724e 	mov.w	r2, #824	; 0x338
  m_errorCode = code;
    6cae:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6cb0:	601a      	str	r2, [r3, #0]
}
    6cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6cb6:	4798      	blx	r3
    6cb8:	2800      	cmp	r0, #0
    6cba:	d0b9      	beq.n	6c30 <SdioCard::erase(unsigned long, unsigned long)+0x28>
    6cbc:	e7c2      	b.n	6c44 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    6cbe:	2100      	movs	r1, #0
    6cc0:	481d      	ldr	r0, [pc, #116]	; (6d38 <SdioCard::erase(unsigned long, unsigned long)+0x130>)
    6cc2:	f7ff f86f 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6cc6:	b938      	cbnz	r0, 6cd8 <SdioCard::erase(unsigned long, unsigned long)+0xd0>
  m_errorCode = code;
    6cc8:	4916      	ldr	r1, [pc, #88]	; (6d24 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6cca:	2411      	movs	r4, #17
  m_errorLine = line;
    6ccc:	4b16      	ldr	r3, [pc, #88]	; (6d28 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6cce:	f240 323b 	movw	r2, #827	; 0x33b
  m_errorCode = code;
    6cd2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6cd4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    6cd6:	e7cb      	b.n	6c70 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  uint32_t m = micros();
    6cd8:	f001 f970 	bl	7fbc <micros>
    6cdc:	4e17      	ldr	r6, [pc, #92]	; (6d3c <SdioCard::erase(unsigned long, unsigned long)+0x134>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6cde:	4d18      	ldr	r5, [pc, #96]	; (6d40 <SdioCard::erase(unsigned long, unsigned long)+0x138>)
  uint32_t m = micros();
    6ce0:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6ce2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 6d48 <SdioCard::erase(unsigned long, unsigned long)+0x140>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6ce6:	4f17      	ldr	r7, [pc, #92]	; (6d44 <SdioCard::erase(unsigned long, unsigned long)+0x13c>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6ce8:	6831      	ldr	r1, [r6, #0]
    6cea:	4628      	mov	r0, r5
    6cec:	f7ff f85a 	bl	5da4 <cardCommand(unsigned long, unsigned long)>
    6cf0:	b118      	cbz	r0, 6cfa <SdioCard::erase(unsigned long, unsigned long)+0xf2>
    6cf2:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6cf6:	05db      	lsls	r3, r3, #23
    6cf8:	d4ba      	bmi.n	6c70 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6cfa:	f001 f95f 	bl	7fbc <micros>
    6cfe:	1b00      	subs	r0, r0, r4
    6d00:	42b8      	cmp	r0, r7
    6d02:	d9f1      	bls.n	6ce8 <SdioCard::erase(unsigned long, unsigned long)+0xe0>
  m_errorCode = code;
    6d04:	4907      	ldr	r1, [pc, #28]	; (6d24 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6d06:	2429      	movs	r4, #41	; 0x29
  m_errorLine = line;
    6d08:	4b07      	ldr	r3, [pc, #28]	; (6d28 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6d0a:	f240 323e 	movw	r2, #830	; 0x33e
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    6d0e:	2000      	movs	r0, #0
  m_errorCode = code;
    6d10:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6d12:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    6d14:	e7ac      	b.n	6c70 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    6d16:	bf00      	nop
    6d18:	00006bd9 	.word	0x00006bd9
    6d1c:	2002949d 	.word	0x2002949d
    6d20:	20028164 	.word	0x20028164
    6d24:	20008bf6 	.word	0x20008bf6
    6d28:	20027f48 	.word	0x20027f48
    6d2c:	2002949c 	.word	0x2002949c
    6d30:	201a0000 	.word	0x201a0000
    6d34:	211a0000 	.word	0x211a0000
    6d38:	261b0000 	.word	0x261b0000
    6d3c:	20028178 	.word	0x20028178
    6d40:	0d1a0000 	.word	0x0d1a0000
    6d44:	000f4240 	.word	0x000f4240
    6d48:	402c0000 	.word	0x402c0000

00006d4c <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d50:	4604      	mov	r4, r0
    6d52:	7a00      	ldrb	r0, [r0, #8]
    6d54:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6d58:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    6d5a:	f010 0501 	ands.w	r5, r0, #1
    6d5e:	d013      	beq.n	6d88 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    6d60:	0793      	lsls	r3, r2, #30
    6d62:	d03c      	beq.n	6dde <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6d64:	2301      	movs	r3, #1
    6d66:	4838      	ldr	r0, [pc, #224]	; (6e48 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6d68:	466a      	mov	r2, sp
    6d6a:	f7ff fa25 	bl	61b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6d6e:	2800      	cmp	r0, #0
    6d70:	d03a      	beq.n	6de8 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    6d72:	f44f 7200 	mov.w	r2, #512	; 0x200
    6d76:	4669      	mov	r1, sp
    6d78:	4630      	mov	r0, r6
    6d7a:	f001 f9b3 	bl	80e4 <memcpy>
}
    6d7e:	4628      	mov	r0, r5
    6d80:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6d88:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6e58 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    6d8c:	460f      	mov	r7, r1
    6d8e:	f898 3000 	ldrb.w	r3, [r8]
    6d92:	2b00      	cmp	r3, #0
    6d94:	d135      	bne.n	6e02 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6d96:	7a63      	ldrb	r3, [r4, #9]
    6d98:	2b01      	cmp	r3, #1
    6d9a:	d039      	beq.n	6e10 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    6d9c:	6822      	ldr	r2, [r4, #0]
    6d9e:	492b      	ldr	r1, [pc, #172]	; (6e4c <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    6da0:	69d2      	ldr	r2, [r2, #28]
    6da2:	428a      	cmp	r2, r1
    6da4:	d14a      	bne.n	6e3c <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    6da6:	f898 2000 	ldrb.w	r2, [r8]
    6daa:	2a00      	cmp	r2, #0
    6dac:	d134      	bne.n	6e18 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    6dae:	2b00      	cmp	r3, #0
    6db0:	d139      	bne.n	6e26 <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    6db2:	4639      	mov	r1, r7
    6db4:	4620      	mov	r0, r4
    6db6:	f7ff fe59 	bl	6a6c <SdioCard::readStart(unsigned long)>
    6dba:	b1e8      	cbz	r0, 6df8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    6dbc:	2301      	movs	r3, #1
      m_curSector = sector;
    6dbe:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    6dc0:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    6dc2:	4631      	mov	r1, r6
    6dc4:	4620      	mov	r0, r4
    6dc6:	f7ff fdd3 	bl	6970 <SdioCard::readData(unsigned char*)>
    6dca:	b1a8      	cbz	r0, 6df8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    6dcc:	6863      	ldr	r3, [r4, #4]
  return true;
    6dce:	4605      	mov	r5, r0
    m_curSector++;
    6dd0:	3301      	adds	r3, #1
}
    6dd2:	4628      	mov	r0, r5
    m_curSector++;
    6dd4:	6063      	str	r3, [r4, #4]
}
    6dd6:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6dde:	2301      	movs	r3, #1
    6de0:	4819      	ldr	r0, [pc, #100]	; (6e48 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6de2:	f7ff f9e9 	bl	61b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6de6:	b938      	cbnz	r0, 6df8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    6de8:	4919      	ldr	r1, [pc, #100]	; (6e50 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    6dea:	200b      	movs	r0, #11
  m_errorLine = line;
    6dec:	4b19      	ldr	r3, [pc, #100]	; (6e54 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    6dee:	f240 32a1 	movw	r2, #929	; 0x3a1
      return sdError(SD_CARD_ERROR_CMD17);
    6df2:	2500      	movs	r5, #0
  m_errorCode = code;
    6df4:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6df6:	601a      	str	r2, [r3, #0]
}
    6df8:	4628      	mov	r0, r5
    6dfa:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e02:	f7fe ff31 	bl	5c68 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6e06:	2800      	cmp	r0, #0
    6e08:	d0f6      	beq.n	6df8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6e0a:	7a63      	ldrb	r3, [r4, #9]
    6e0c:	2b01      	cmp	r3, #1
    6e0e:	d1c5      	bne.n	6d9c <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6e10:	6862      	ldr	r2, [r4, #4]
    6e12:	42ba      	cmp	r2, r7
    6e14:	d1c2      	bne.n	6d9c <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6e16:	e7d4      	b.n	6dc2 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    6e18:	f7fe ff26 	bl	5c68 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6e1c:	2800      	cmp	r0, #0
    6e1e:	d0eb      	beq.n	6df8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    6e20:	7a63      	ldrb	r3, [r4, #9]
    6e22:	2b00      	cmp	r3, #0
    6e24:	d0c5      	beq.n	6db2 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    6e26:	2101      	movs	r1, #1
    6e28:	4620      	mov	r0, r4
    6e2a:	f7ff fe89 	bl	6b40 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6e2e:	2800      	cmp	r0, #0
    6e30:	d1bf      	bne.n	6db2 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    6e32:	4628      	mov	r0, r5
    6e34:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    6e3c:	4620      	mov	r0, r4
    6e3e:	4790      	blx	r2
    6e40:	2800      	cmp	r0, #0
    6e42:	d0f6      	beq.n	6e32 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    6e44:	e7b5      	b.n	6db2 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    6e46:	bf00      	nop
    6e48:	113a0011 	.word	0x113a0011
    6e4c:	00006bd9 	.word	0x00006bd9
    6e50:	20008bf6 	.word	0x20008bf6
    6e54:	20027f48 	.word	0x20027f48
    6e58:	2002949d 	.word	0x2002949d

00006e5c <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    6e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e60:	7a04      	ldrb	r4, [r0, #8]
    6e62:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6e66:	460f      	mov	r7, r1
    6e68:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    6e6a:	f014 0401 	ands.w	r4, r4, #1
    6e6e:	d01d      	beq.n	6eac <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    6e70:	f012 0f03 	tst.w	r2, #3
    6e74:	d006      	beq.n	6e84 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    6e76:	4668      	mov	r0, sp
    6e78:	4611      	mov	r1, r2
    6e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    6e7e:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    6e80:	f001 f930 	bl	80e4 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    6e84:	2301      	movs	r3, #1
    6e86:	4642      	mov	r2, r8
    6e88:	4639      	mov	r1, r7
    6e8a:	482c      	ldr	r0, [pc, #176]	; (6f3c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    6e8c:	f7ff f994 	bl	61b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6e90:	4604      	mov	r4, r0
    6e92:	b930      	cbnz	r0, 6ea2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    6e94:	492a      	ldr	r1, [pc, #168]	; (6f40 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    6e96:	200d      	movs	r0, #13
  m_errorLine = line;
    6e98:	4b2a      	ldr	r3, [pc, #168]	; (6f44 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    6e9a:	f44f 6287 	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    6e9e:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6ea0:	601a      	str	r2, [r3, #0]
}
    6ea2:	4620      	mov	r0, r4
    6ea4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6eac:	4d26      	ldr	r5, [pc, #152]	; (6f48 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    6eae:	4606      	mov	r6, r0
    6eb0:	782b      	ldrb	r3, [r5, #0]
    6eb2:	bb2b      	cbnz	r3, 6f00 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6eb4:	7a73      	ldrb	r3, [r6, #9]
    6eb6:	2b02      	cmp	r3, #2
    6eb8:	d029      	beq.n	6f0e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    6eba:	6832      	ldr	r2, [r6, #0]
    6ebc:	4923      	ldr	r1, [pc, #140]	; (6f4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    6ebe:	69d2      	ldr	r2, [r2, #28]
    6ec0:	428a      	cmp	r2, r1
    6ec2:	d136      	bne.n	6f32 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    6ec4:	782a      	ldrb	r2, [r5, #0]
    6ec6:	bb32      	cbnz	r2, 6f16 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    6ec8:	2b00      	cmp	r3, #0
    6eca:	d12b      	bne.n	6f24 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector)) {
    6ecc:	6833      	ldr	r3, [r6, #0]
    6ece:	4639      	mov	r1, r7
    6ed0:	4630      	mov	r0, r6
    6ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    6ed4:	4798      	blx	r3
    6ed6:	2800      	cmp	r0, #0
    6ed8:	d0e3      	beq.n	6ea2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    6eda:	2302      	movs	r3, #2
      m_curSector = sector;
    6edc:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    6ede:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    6ee0:	6833      	ldr	r3, [r6, #0]
    6ee2:	4641      	mov	r1, r8
    6ee4:	4630      	mov	r0, r6
    6ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6ee8:	4798      	blx	r3
    6eea:	2800      	cmp	r0, #0
    6eec:	d0d9      	beq.n	6ea2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    6eee:	6873      	ldr	r3, [r6, #4]
  return true;
    6ef0:	4604      	mov	r4, r0
    m_curSector++;
    6ef2:	3301      	adds	r3, #1
}
    6ef4:	4620      	mov	r0, r4
    m_curSector++;
    6ef6:	6073      	str	r3, [r6, #4]
}
    6ef8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f00:	f7fe feb2 	bl	5c68 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6f04:	2800      	cmp	r0, #0
    6f06:	d0cc      	beq.n	6ea2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6f08:	7a73      	ldrb	r3, [r6, #9]
    6f0a:	2b02      	cmp	r3, #2
    6f0c:	d1d5      	bne.n	6eba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6f0e:	6872      	ldr	r2, [r6, #4]
    6f10:	42ba      	cmp	r2, r7
    6f12:	d1d2      	bne.n	6eba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6f14:	e7e4      	b.n	6ee0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    6f16:	f7fe fea7 	bl	5c68 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6f1a:	2800      	cmp	r0, #0
    6f1c:	d0c1      	beq.n	6ea2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    6f1e:	7a73      	ldrb	r3, [r6, #9]
    6f20:	2b00      	cmp	r3, #0
    6f22:	d0d3      	beq.n	6ecc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    6f24:	2101      	movs	r1, #1
    6f26:	4630      	mov	r0, r6
    6f28:	f7ff fe0a 	bl	6b40 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6f2c:	2800      	cmp	r0, #0
    6f2e:	d0b8      	beq.n	6ea2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6f30:	e7cc      	b.n	6ecc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6f32:	4630      	mov	r0, r6
    6f34:	4790      	blx	r2
    6f36:	2800      	cmp	r0, #0
    6f38:	d0b3      	beq.n	6ea2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6f3a:	e7c7      	b.n	6ecc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6f3c:	183a0001 	.word	0x183a0001
    6f40:	20008bf6 	.word	0x20008bf6
    6f44:	20027f48 	.word	0x20027f48
    6f48:	2002949d 	.word	0x2002949d
    6f4c:	00006bd9 	.word	0x00006bd9

00006f50 <sdCsWrite(unsigned char, bool)>:
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    6f50:	f001 b85e 	b.w	8010 <digitalWrite>

00006f54 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    6f54:	b430      	push	{r4, r5}
    6f56:	b082      	sub	sp, #8
    6f58:	460c      	mov	r4, r1
    6f5a:	ab02      	add	r3, sp, #8
    6f5c:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    6f60:	7cc3      	ldrb	r3, [r0, #19]
    6f62:	2b00      	cmp	r3, #0
    6f64:	d030      	beq.n	6fc8 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    6f66:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6f68:	7cc3      	ldrb	r3, [r0, #19]
    6f6a:	07da      	lsls	r2, r3, #31
    6f6c:	d508      	bpl.n	6f80 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    6f6e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6f72:	6945      	ldr	r5, [r0, #20]
    6f74:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    6f78:	402a      	ands	r2, r5
    6f7a:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    6f7c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    6f80:	079d      	lsls	r5, r3, #30
    6f82:	d508      	bpl.n	6f96 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6f84:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6f88:	6985      	ldr	r5, [r0, #24]
    6f8a:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    6f8e:	402a      	ands	r2, r5
    6f90:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    6f92:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    6f96:	0759      	lsls	r1, r3, #29
    6f98:	d508      	bpl.n	6fac <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    6f9a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6f9e:	69c5      	ldr	r5, [r0, #28]
    6fa0:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    6fa4:	402a      	ands	r2, r5
    6fa6:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    6fa8:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    6fac:	071a      	lsls	r2, r3, #28
    6fae:	d508      	bpl.n	6fc2 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    6fb0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6fb4:	6a05      	ldr	r5, [r0, #32]
    6fb6:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    6fba:	402a      	ands	r2, r5
    6fbc:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    6fbe:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    6fc2:	06db      	lsls	r3, r3, #27
    6fc4:	d42f      	bmi.n	7026 <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    6fc6:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    6fc8:	6883      	ldr	r3, [r0, #8]
    6fca:	429c      	cmp	r4, r3
    6fcc:	d035      	beq.n	703a <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    6fce:	4b22      	ldr	r3, [pc, #136]	; (7058 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    6fd0:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    6fd2:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    6fd4:	4a21      	ldr	r2, [pc, #132]	; (705c <SPIClass::beginTransaction(SPISettings)+0x108>)
    6fd6:	f3c3 1101 	ubfx	r1, r3, #4, #2
    6fda:	f3c3 6382 	ubfx	r3, r3, #26, #3
    6fde:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    6fe2:	3301      	adds	r3, #1
    6fe4:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    6fe8:	b1cc      	cbz	r4, 701e <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    6fea:	4294      	cmp	r4, r2
    6fec:	d827      	bhi.n	703e <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    6fee:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    6ff2:	fbb2 f2f3 	udiv	r2, r2, r3
    6ff6:	4294      	cmp	r4, r2
    6ff8:	d32c      	bcc.n	7054 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    6ffa:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    6ffe:	d320      	bcc.n	7042 <SPIClass::beginTransaction(SPISettings)+0xee>
    7000:	4c17      	ldr	r4, [pc, #92]	; (7060 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    7002:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7004:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7006:	2203      	movs	r2, #3
		port().CR = 0;
    7008:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    700a:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    700c:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    700e:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    7010:	2201      	movs	r2, #1
		port().CCR = _ccr;
    7012:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    7014:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7016:	611a      	str	r2, [r3, #16]
	}
    7018:	b002      	add	sp, #8
    701a:	bc30      	pop	{r4, r5}
    701c:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    701e:	4299      	cmp	r1, r3
    7020:	d3ef      	bcc.n	7002 <SPIClass::beginTransaction(SPISettings)+0xae>
    7022:	1c53      	adds	r3, r2, #1
    7024:	e7e9      	b.n	6ffa <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    7026:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    702a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    702c:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    7030:	400b      	ands	r3, r1
    7032:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    7034:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    7038:	e7c5      	b.n	6fc6 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    703a:	68c4      	ldr	r4, [r0, #12]
    703c:	e7e2      	b.n	7004 <SPIClass::beginTransaction(SPISettings)+0xb0>
    703e:	2400      	movs	r4, #0
    7040:	e7df      	b.n	7002 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    7042:	2b02      	cmp	r3, #2
    7044:	d9fb      	bls.n	703e <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    7046:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    7048:	085a      	lsrs	r2, r3, #1
    704a:	0214      	lsls	r4, r2, #8
    704c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    7050:	431c      	orrs	r4, r3
    7052:	e7d6      	b.n	7002 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    7054:	461a      	mov	r2, r3
    7056:	e7e4      	b.n	7022 <SPIClass::beginTransaction(SPISettings)+0xce>
    7058:	400fc000 	.word	0x400fc000
    705c:	20000878 	.word	0x20000878
    7060:	007f7fff 	.word	0x007f7fff

00007064 <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    7064:	b508      	push	{r3, lr}
    7066:	4603      	mov	r3, r0
    7068:	f853 0b04 	ldr.w	r0, [r3], #4
    706c:	e893 0006 	ldmia.w	r3, {r1, r2}
    7070:	f7ff ff70 	bl	6f54 <SPIClass::beginTransaction(SPISettings)>
    7074:	bd08      	pop	{r3, pc}
    7076:	bf00      	nop

00007078 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    7078:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    707a:	7cd3      	ldrb	r3, [r2, #19]
    707c:	b313      	cbz	r3, 70c4 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    707e:	07d8      	lsls	r0, r3, #31
    7080:	d504      	bpl.n	708c <SdSpiArduinoDriver::deactivate()+0x14>
    7082:	6a90      	ldr	r0, [r2, #40]	; 0x28
    7084:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7088:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    708c:	0799      	lsls	r1, r3, #30
    708e:	d504      	bpl.n	709a <SdSpiArduinoDriver::deactivate()+0x22>
    7090:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    7092:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7096:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    709a:	0758      	lsls	r0, r3, #29
    709c:	d504      	bpl.n	70a8 <SdSpiArduinoDriver::deactivate()+0x30>
    709e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    70a0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    70a4:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    70a8:	0719      	lsls	r1, r3, #28
    70aa:	d504      	bpl.n	70b6 <SdSpiArduinoDriver::deactivate()+0x3e>
    70ac:	6b50      	ldr	r0, [r2, #52]	; 0x34
    70ae:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    70b2:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    70b6:	06db      	lsls	r3, r3, #27
    70b8:	d504      	bpl.n	70c4 <SdSpiArduinoDriver::deactivate()+0x4c>
    70ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
    70bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    70c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    70c4:	4770      	bx	lr
    70c6:	bf00      	nop

000070c8 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    70c8:	6800      	ldr	r0, [r0, #0]
    70ca:	f000 b9d7 	b.w	747c <SPIClass::end()>
    70ce:	bf00      	nop

000070d0 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    70d0:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    70d2:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    70d4:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    70d6:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    70d8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    70da:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    70de:	d0fb      	beq.n	70d8 <SdSpiArduinoDriver::receive()+0x8>
    70e0:	6f50      	ldr	r0, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    70e2:	b2c0      	uxtb	r0, r0
    70e4:	4770      	bx	lr
    70e6:	bf00      	nop

000070e8 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    70e8:	b530      	push	{r4, r5, lr}
    70ea:	460c      	mov	r4, r1
    70ec:	b083      	sub	sp, #12
    70ee:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    70f0:	21ff      	movs	r1, #255	; 0xff
    70f2:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    70f4:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    70f6:	f004 fcc1 	bl	ba7c <memset>
		transfer(buf, buf, count);
    70fa:	6828      	ldr	r0, [r5, #0]
    70fc:	9b01      	ldr	r3, [sp, #4]
    70fe:	4622      	mov	r2, r4
    7100:	4621      	mov	r1, r4
    7102:	f000 f9b7 	bl	7474 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    7106:	2000      	movs	r0, #0
    7108:	b003      	add	sp, #12
    710a:	bd30      	pop	{r4, r5, pc}

0000710c <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    710c:	6803      	ldr	r3, [r0, #0]
    710e:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    7110:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7112:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7114:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    7118:	d0fb      	beq.n	7112 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    711a:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    711c:	4770      	bx	lr
    711e:	bf00      	nop

00007120 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    7120:	1e53      	subs	r3, r2, #1
    7122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    7126:	b530      	push	{r4, r5, lr}
    7128:	4614      	mov	r4, r2
    712a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    712e:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    7130:	d311      	bcc.n	7156 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    7132:	b16a      	cbz	r2, 7150 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7134:	6803      	ldr	r3, [r0, #0]
    7136:	1e48      	subs	r0, r1, #1
    7138:	6819      	ldr	r1, [r3, #0]
    713a:	1882      	adds	r2, r0, r2
		port().TDR = data;
    713c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    7140:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7142:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7144:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    7148:	d0fb      	beq.n	7142 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    714a:	4290      	cmp	r0, r2
    714c:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    714e:	d1f5      	bne.n	713c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    7150:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    7154:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    7156:	4668      	mov	r0, sp
    7158:	f000 ffc4 	bl	80e4 <memcpy>
		transfer(buf, buf, count);
    715c:	466a      	mov	r2, sp
    715e:	4623      	mov	r3, r4
    7160:	6828      	ldr	r0, [r5, #0]
    7162:	4611      	mov	r1, r2
    7164:	f000 f986 	bl	7474 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    7168:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    716c:	bd30      	pop	{r4, r5, pc}
    716e:	bf00      	nop

00007170 <FsCache::sync()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    7170:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    7172:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    7174:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    7176:	07dc      	lsls	r4, r3, #31
    7178:	d51d      	bpl.n	71b6 <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    717a:	4604      	mov	r4, r0
    717c:	6840      	ldr	r0, [r0, #4]
    717e:	f104 0210 	add.w	r2, r4, #16
    7182:	6803      	ldr	r3, [r0, #0]
    7184:	68a1      	ldr	r1, [r4, #8]
    7186:	9201      	str	r2, [sp, #4]
    7188:	6a1b      	ldr	r3, [r3, #32]
    718a:	4798      	blx	r3
    718c:	9a01      	ldr	r2, [sp, #4]
    718e:	4605      	mov	r5, r0
    7190:	b1a8      	cbz	r0, 71be <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    7192:	7823      	ldrb	r3, [r4, #0]
    7194:	0799      	lsls	r1, r3, #30
    7196:	d508      	bpl.n	71aa <FsCache::sync()+0x3a>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    7198:	68e3      	ldr	r3, [r4, #12]
    719a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    719e:	4419      	add	r1, r3
    71a0:	6803      	ldr	r3, [r0, #0]
    71a2:	6a1b      	ldr	r3, [r3, #32]
    71a4:	4798      	blx	r3
    71a6:	b150      	cbz	r0, 71be <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    71a8:	7823      	ldrb	r3, [r4, #0]
    71aa:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    71ae:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    71b0:	7023      	strb	r3, [r4, #0]
}
    71b2:	b003      	add	sp, #12
    71b4:	bd30      	pop	{r4, r5, pc}
  return true;
    71b6:	2501      	movs	r5, #1
}
    71b8:	4628      	mov	r0, r5
    71ba:	b003      	add	sp, #12
    71bc:	bd30      	pop	{r4, r5, pc}
  return false;
    71be:	2500      	movs	r5, #0
}
    71c0:	4628      	mov	r0, r5
    71c2:	b003      	add	sp, #12
    71c4:	bd30      	pop	{r4, r5, pc}
    71c6:	bf00      	nop

000071c8 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    71c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    71ca:	6843      	ldr	r3, [r0, #4]
    71cc:	b30b      	cbz	r3, 7212 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    71ce:	6883      	ldr	r3, [r0, #8]
    71d0:	4604      	mov	r4, r0
    71d2:	460f      	mov	r7, r1
    71d4:	4615      	mov	r5, r2
    71d6:	428b      	cmp	r3, r1
    71d8:	d106      	bne.n	71e8 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    71da:	f810 3b10 	ldrb.w	r3, [r0], #16
    71de:	f005 0503 	and.w	r5, r5, #3
    71e2:	432b      	orrs	r3, r5
    71e4:	7023      	strb	r3, [r4, #0]
}
    71e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    71e8:	f7ff ffc2 	bl	7170 <FsCache::sync()>
    71ec:	b188      	cbz	r0, 7212 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    71ee:	076b      	lsls	r3, r5, #29
    71f0:	d505      	bpl.n	71fe <FsCache::prepare(unsigned long, unsigned char)+0x36>
    71f2:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    71f6:	4630      	mov	r0, r6
    m_sector = sector;
    71f8:	2300      	movs	r3, #0
    71fa:	60a7      	str	r7, [r4, #8]
    71fc:	e7ef      	b.n	71de <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    71fe:	6860      	ldr	r0, [r4, #4]
    7200:	f104 0610 	add.w	r6, r4, #16
    7204:	4639      	mov	r1, r7
    7206:	6803      	ldr	r3, [r0, #0]
    7208:	4632      	mov	r2, r6
    720a:	691b      	ldr	r3, [r3, #16]
    720c:	4798      	blx	r3
    720e:	2800      	cmp	r0, #0
    7210:	d1f1      	bne.n	71f6 <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    7212:	2000      	movs	r0, #0
}
    7214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7216:	bf00      	nop

00007218 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7218:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    721c:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    721e:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    7222:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7224:	d101      	bne.n	722a <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    7226:	6883      	ldr	r3, [r0, #8]
    7228:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    722a:	f000 bafb 	b.w	7824 <EventResponder::triggerEventNotImmediate()>
    722e:	bf00      	nop

00007230 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    7230:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7232:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    7234:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    7238:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    723a:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    723c:	b1a3      	cbz	r3, 7268 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    723e:	b321      	cbz	r1, 728a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    7240:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    7244:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7246:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7248:	6f25      	ldr	r5, [r4, #112]	; 0x70
    724a:	07af      	lsls	r7, r5, #30
    724c:	d407      	bmi.n	725e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    724e:	4615      	mov	r5, r2
				count_read--;
    7250:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    7252:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    7254:	b11a      	cbz	r2, 725e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    7256:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    725a:	462a      	mov	r2, r5
    725c:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    725e:	6965      	ldr	r5, [r4, #20]
    7260:	07ed      	lsls	r5, r5, #31
    7262:	d5f1      	bpl.n	7248 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    7264:	2b00      	cmp	r3, #0
    7266:	d1ea      	bne.n	723e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    7268:	b16e      	cbz	r6, 7286 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    726a:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    726c:	6f19      	ldr	r1, [r3, #112]	; 0x70
    726e:	0789      	lsls	r1, r1, #30
    7270:	d4fa      	bmi.n	7268 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    7272:	4611      	mov	r1, r2
			count_read--;
    7274:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    7276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    7278:	2a00      	cmp	r2, #0
    727a:	d0f5      	beq.n	7268 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    727c:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    7280:	460a      	mov	r2, r1
	while (count_read) {
    7282:	2e00      	cmp	r6, #0
    7284:	d1f1      	bne.n	726a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    7286:	bcf0      	pop	{r4, r5, r6, r7}
    7288:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    728a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    728e:	e7d9      	b.n	7244 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00007290 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    7290:	4b32      	ldr	r3, [pc, #200]	; (735c <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    7292:	4933      	ldr	r1, [pc, #204]	; (7360 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7294:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    7296:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    729a:	7920      	ldrb	r0, [r4, #4]
    729c:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    729e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    72a0:	f895 c004 	ldrb.w	ip, [r5, #4]
    72a4:	f881 c01c 	strb.w	ip, [r1, #28]
    72a8:	7708      	strb	r0, [r1, #28]
    72aa:	b152      	cbz	r2, 72c2 <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    72ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    72b0:	d323      	bcc.n	72fa <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    72b2:	492c      	ldr	r1, [pc, #176]	; (7364 <_spi_dma_rxISR1()+0xd4>)
    72b4:	4411      	add	r1, r2
		DMA_SERQ = channel;
    72b6:	4a2a      	ldr	r2, [pc, #168]	; (7360 <_spi_dma_rxISR1()+0xd0>)
    72b8:	6419      	str	r1, [r3, #64]	; 0x40
    72ba:	76d0      	strb	r0, [r2, #27]
    72bc:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    72c0:	bd30      	pop	{r4, r5, pc}
    72c2:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    72c4:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    72c6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    72c8:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    72ca:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    72ce:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    72d0:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    72d2:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    72d6:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    72d8:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    72da:	6804      	ldr	r4, [r0, #0]
    72dc:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    72de:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    72e2:	4b21      	ldr	r3, [pc, #132]	; (7368 <_spi_dma_rxISR1()+0xd8>)
    72e4:	429c      	cmp	r4, r3
    72e6:	d126      	bne.n	7336 <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    72e8:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    72ea:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    72ec:	2b02      	cmp	r3, #2
		_data = data;
    72ee:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    72f0:	d126      	bne.n	7340 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    72f2:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    72f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    72f8:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    72fa:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    72fc:	8be9      	ldrh	r1, [r5, #30]
    72fe:	0409      	lsls	r1, r1, #16
    7300:	d422      	bmi.n	7348 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    7302:	b292      	uxth	r2, r2
    7304:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    7306:	6821      	ldr	r1, [r4, #0]
    7308:	8bec      	ldrh	r4, [r5, #30]
    730a:	b2a4      	uxth	r4, r4
    730c:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    730e:	8bcc      	ldrh	r4, [r1, #30]
    7310:	0424      	lsls	r4, r4, #16
    7312:	d505      	bpl.n	7320 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7314:	8bcc      	ldrh	r4, [r1, #30]
    7316:	f3c2 0208 	ubfx	r2, r2, #0, #9
    731a:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    731e:	4322      	orrs	r2, r4
    7320:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    7322:	8bca      	ldrh	r2, [r1, #30]
    7324:	b292      	uxth	r2, r2
    7326:	82ca      	strh	r2, [r1, #22]
    7328:	2100      	movs	r1, #0
    732a:	4a0d      	ldr	r2, [pc, #52]	; (7360 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    732c:	6419      	str	r1, [r3, #64]	; 0x40
    732e:	76d0      	strb	r0, [r2, #27]
    7330:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7334:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    7336:	4623      	mov	r3, r4
    7338:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    733a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    733e:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    7344:	f000 ba6e 	b.w	7824 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7348:	8be9      	ldrh	r1, [r5, #30]
    734a:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    734e:	b292      	uxth	r2, r2
    7350:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    7354:	ea41 010e 	orr.w	r1, r1, lr
    7358:	83e9      	strh	r1, [r5, #30]
    735a:	e7d4      	b.n	7306 <_spi_dma_rxISR1()+0x76>
    735c:	2000c0d8 	.word	0x2000c0d8
    7360:	400e8000 	.word	0x400e8000
    7364:	ffff8001 	.word	0xffff8001
    7368:	00007219 	.word	0x00007219

0000736c <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    736c:	4b32      	ldr	r3, [pc, #200]	; (7438 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    736e:	4933      	ldr	r1, [pc, #204]	; (743c <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7370:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    7372:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    7376:	7920      	ldrb	r0, [r4, #4]
    7378:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    737a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    737c:	f895 c004 	ldrb.w	ip, [r5, #4]
    7380:	f881 c01c 	strb.w	ip, [r1, #28]
    7384:	7708      	strb	r0, [r1, #28]
    7386:	b152      	cbz	r2, 739e <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    7388:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    738c:	d323      	bcc.n	73d6 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    738e:	492c      	ldr	r1, [pc, #176]	; (7440 <_spi_dma_rxISR0()+0xd4>)
    7390:	4411      	add	r1, r2
		DMA_SERQ = channel;
    7392:	4a2a      	ldr	r2, [pc, #168]	; (743c <_spi_dma_rxISR0()+0xd0>)
    7394:	6419      	str	r1, [r3, #64]	; 0x40
    7396:	76d0      	strb	r0, [r2, #27]
    7398:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    739c:	bd30      	pop	{r4, r5, pc}
    739e:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    73a0:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    73a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    73a4:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    73a6:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    73aa:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    73ac:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    73ae:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    73b2:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    73b4:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    73b6:	6804      	ldr	r4, [r0, #0]
    73b8:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    73ba:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    73be:	4b21      	ldr	r3, [pc, #132]	; (7444 <_spi_dma_rxISR0()+0xd8>)
    73c0:	429c      	cmp	r4, r3
    73c2:	d126      	bne.n	7412 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    73c4:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    73c6:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    73c8:	2b02      	cmp	r3, #2
		_data = data;
    73ca:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    73cc:	d126      	bne.n	741c <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    73ce:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    73d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    73d4:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    73d6:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    73d8:	8be9      	ldrh	r1, [r5, #30]
    73da:	0409      	lsls	r1, r1, #16
    73dc:	d422      	bmi.n	7424 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    73de:	b292      	uxth	r2, r2
    73e0:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    73e2:	6821      	ldr	r1, [r4, #0]
    73e4:	8bec      	ldrh	r4, [r5, #30]
    73e6:	b2a4      	uxth	r4, r4
    73e8:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    73ea:	8bcc      	ldrh	r4, [r1, #30]
    73ec:	0424      	lsls	r4, r4, #16
    73ee:	d505      	bpl.n	73fc <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    73f0:	8bcc      	ldrh	r4, [r1, #30]
    73f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
    73f6:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    73fa:	4322      	orrs	r2, r4
    73fc:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    73fe:	8bca      	ldrh	r2, [r1, #30]
    7400:	b292      	uxth	r2, r2
    7402:	82ca      	strh	r2, [r1, #22]
    7404:	2100      	movs	r1, #0
    7406:	4a0d      	ldr	r2, [pc, #52]	; (743c <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    7408:	6419      	str	r1, [r3, #64]	; 0x40
    740a:	76d0      	strb	r0, [r2, #27]
    740c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7410:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    7412:	4623      	mov	r3, r4
    7414:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7416:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    741a:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    741c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    7420:	f000 ba00 	b.w	7824 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7424:	8be9      	ldrh	r1, [r5, #30]
    7426:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    742a:	b292      	uxth	r2, r2
    742c:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    7430:	ea41 010e 	orr.w	r1, r1, lr
    7434:	83e9      	strh	r1, [r5, #30]
    7436:	e7d4      	b.n	73e2 <_spi_dma_rxISR0()+0x76>
    7438:	2000c088 	.word	0x2000c088
    743c:	400e8000 	.word	0x400e8000
    7440:	ffff8001 	.word	0xffff8001
    7444:	00007219 	.word	0x00007219

00007448 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    7448:	2300      	movs	r3, #0
    744a:	e9c0 1200 	strd	r1, r2, [r0]
    744e:	e9c0 3302 	strd	r3, r3, [r0, #8]
    7452:	e9c0 3304 	strd	r3, r3, [r0, #16]
    7456:	e9c0 3306 	strd	r3, r3, [r0, #24]
    745a:	e9c0 3308 	strd	r3, r3, [r0, #32]
    745e:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    7462:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    7466:	6383      	str	r3, [r0, #56]	; 0x38
    7468:	8783      	strh	r3, [r0, #60]	; 0x3c
    746a:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    746e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    7472:	4770      	bx	lr

00007474 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    7474:	b10b      	cbz	r3, 747a <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    7476:	f7ff bedb 	b.w	7230 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    747a:	4770      	bx	lr

0000747c <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    747c:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    747e:	e9d3 1200 	ldrd	r1, r2, [r3]
    7482:	6809      	ldr	r1, [r1, #0]
    7484:	4211      	tst	r1, r2
    7486:	d100      	bne.n	748a <SPIClass::end()+0xe>
    7488:	4770      	bx	lr
void SPIClass::end() {
    748a:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    748c:	6802      	ldr	r2, [r0, #0]
    748e:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    7490:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    7492:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    7494:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    7496:	7c22      	ldrb	r2, [r4, #16]
    7498:	4413      	add	r3, r2
    749a:	7c18      	ldrb	r0, [r3, #16]
    749c:	f000 fde2 	bl	8064 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    74a0:	7c62      	ldrb	r2, [r4, #17]
    74a2:	6863      	ldr	r3, [r4, #4]
    74a4:	2105      	movs	r1, #5
    74a6:	4413      	add	r3, r2
    74a8:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    74ac:	f000 fdda 	bl	8064 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    74b0:	6863      	ldr	r3, [r4, #4]
    74b2:	7ca2      	ldrb	r2, [r4, #18]
    74b4:	2105      	movs	r1, #5
    74b6:	4413      	add	r3, r2
}
    74b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    74bc:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    74c0:	f000 bdd0 	b.w	8064 <pinMode>

000074c4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    74c4:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    74c6:	4a08      	ldr	r2, [pc, #32]	; (74e8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    74c8:	4908      	ldr	r1, [pc, #32]	; (74ec <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    74ca:	4809      	ldr	r0, [pc, #36]	; (74f0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    74cc:	f7ff ffbc 	bl	7448 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    74d0:	4a08      	ldr	r2, [pc, #32]	; (74f4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    74d2:	4909      	ldr	r1, [pc, #36]	; (74f8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    74d4:	4809      	ldr	r0, [pc, #36]	; (74fc <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    74d6:	f7ff ffb7 	bl	7448 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    74da:	4a09      	ldr	r2, [pc, #36]	; (7500 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    74dc:	4909      	ldr	r1, [pc, #36]	; (7504 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    74de:	480a      	ldr	r0, [pc, #40]	; (7508 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    74e0:	f7ff ffb2 	bl	7448 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    74e4:	bd08      	pop	{r3, pc}
    74e6:	bf00      	nop
    74e8:	20000680 	.word	0x20000680
    74ec:	403a0000 	.word	0x403a0000
    74f0:	2000c088 	.word	0x2000c088
    74f4:	20000610 	.word	0x20000610
    74f8:	4039c000 	.word	0x4039c000
    74fc:	2000c0d8 	.word	0x2000c0d8
    7500:	200005a0 	.word	0x200005a0
    7504:	40394000 	.word	0x40394000
    7508:	2000c128 	.word	0x2000c128

0000750c <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    750c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7510:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    7514:	1a10      	subs	r0, r2, r0
    7516:	4770      	bx	lr

00007518 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    7518:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    751c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7520:	429a      	cmp	r2, r3
    7522:	d905      	bls.n	7530 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    7524:	1c5a      	adds	r2, r3, #1
    7526:	4403      	add	r3, r0
    7528:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    752c:	7e98      	ldrb	r0, [r3, #26]
    752e:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    7530:	f04f 30ff 	mov.w	r0, #4294967295
	}
    7534:	4770      	bx	lr
    7536:	bf00      	nop

00007538 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    7538:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    753c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7540:	429a      	cmp	r2, r3
    7542:	d902      	bls.n	754a <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    7544:	4418      	add	r0, r3
    7546:	7e80      	ldrb	r0, [r0, #26]
    7548:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    754a:	f04f 30ff 	mov.w	r0, #4294967295
	}
    754e:	4770      	bx	lr

00007550 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    7550:	4770      	bx	lr
    7552:	bf00      	nop

00007554 <TwoWire::write(unsigned char)>:
{
    7554:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    7556:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    755a:	b178      	cbz	r0, 757c <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    755c:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    7560:	2a88      	cmp	r2, #136	; 0x88
    7562:	d903      	bls.n	756c <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    7564:	2201      	movs	r2, #1
			return 0;
    7566:	2000      	movs	r0, #0
    7568:	605a      	str	r2, [r3, #4]
    756a:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    756c:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    7570:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    7572:	441a      	add	r2, r3
    7574:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    7578:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    757c:	4770      	bx	lr
    757e:	bf00      	nop

00007580 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    7580:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    7582:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    7586:	b90c      	cbnz	r4, 758c <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    7588:	4620      	mov	r0, r4
    758a:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    758c:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    7590:	4605      	mov	r5, r0
    7592:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    7596:	42a2      	cmp	r2, r4
    7598:	d80d      	bhi.n	75b6 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    759a:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    759c:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    75a0:	4622      	mov	r2, r4
    75a2:	4418      	add	r0, r3
    75a4:	f000 fd9e 	bl	80e4 <memcpy>
		txBufferLength += quantity;
    75a8:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    75ac:	4620      	mov	r0, r4
		txBufferLength += quantity;
    75ae:	4423      	add	r3, r4
    75b0:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    75b4:	bd38      	pop	{r3, r4, r5, pc}
    75b6:	2201      	movs	r2, #1
    75b8:	6042      	str	r2, [r0, #4]
    75ba:	e7ef      	b.n	759c <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

000075bc <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    75bc:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    75be:	2500      	movs	r5, #0
    75c0:	4613      	mov	r3, r2
    75c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    75c6:	4604      	mov	r4, r0
    75c8:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
    75cc:	4815      	ldr	r0, [pc, #84]	; (7624 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    75ce:	2288      	movs	r2, #136	; 0x88
    75d0:	6121      	str	r1, [r4, #16]
    75d2:	4629      	mov	r1, r5
    75d4:	6020      	str	r0, [r4, #0]
    75d6:	f104 001a 	add.w	r0, r4, #26
    75da:	6163      	str	r3, [r4, #20]
    75dc:	7325      	strb	r5, [r4, #12]
    75de:	7625      	strb	r5, [r4, #24]
    75e0:	7665      	strb	r5, [r4, #25]
    75e2:	f004 fa4b 	bl	ba7c <memset>
    75e6:	2289      	movs	r2, #137	; 0x89
    75e8:	4629      	mov	r1, r5
    75ea:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    75ee:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    75f2:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    75f6:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    75fa:	f004 fa3f 	bl	ba7c <memset>
	}
    75fe:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
    7600:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    7604:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    7608:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    760c:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    7610:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    7614:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    7618:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    761c:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
    7620:	bd38      	pop	{r3, r4, r5, pc}
    7622:	bf00      	nop
    7624:	200007e8 	.word	0x200007e8

00007628 <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    7628:	6903      	ldr	r3, [r0, #16]
{
    762a:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    762c:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
    7630:	4604      	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    7632:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    7636:	d001      	beq.n	763c <TwoWire::isr()+0x14>
    7638:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    763c:	07ae      	lsls	r6, r5, #30
    763e:	d50b      	bpl.n	7658 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    7640:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    7644:	0408      	lsls	r0, r1, #16
    7646:	d53e      	bpl.n	76c6 <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    7648:	2200      	movs	r2, #0
    764a:	2001      	movs	r0, #1
    764c:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    7650:	4422      	add	r2, r4
    7652:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    7656:	7691      	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    7658:	07ea      	lsls	r2, r5, #31
    765a:	d510      	bpl.n	767e <TwoWire::isr()+0x56>
		if (!transmitting) {
    765c:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
    7660:	b1f6      	cbz	r6, 76a0 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    7662:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
    7666:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    766a:	42b2      	cmp	r2, r6
    766c:	d927      	bls.n	76be <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    766e:	1c72      	adds	r2, r6, #1
    7670:	4426      	add	r6, r4
    7672:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    7676:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
    767a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    767e:	05ab      	lsls	r3, r5, #22
    7680:	d50d      	bpl.n	769e <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    7682:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    7686:	b118      	cbz	r0, 7690 <TwoWire::isr()+0x68>
    7688:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    768c:	b103      	cbz	r3, 7690 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    768e:	4798      	blx	r3
		}
		rxBufferIndex = 0;
    7690:	2300      	movs	r3, #0
    7692:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    7696:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    769a:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
	}
}
    769e:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    76a0:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    76a4:	b10a      	cbz	r2, 76aa <TwoWire::isr()+0x82>
				(*user_onRequest)();
    76a6:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    76a8:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    76aa:	2200      	movs	r2, #0
    76ac:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    76b0:	2201      	movs	r2, #1
    76b2:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    76b6:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    76ba:	42b2      	cmp	r2, r6
    76bc:	d8d7      	bhi.n	766e <TwoWire::isr()+0x46>
			port->STDR = 0;
    76be:	2200      	movs	r2, #0
    76c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    76c4:	e7db      	b.n	767e <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    76c6:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    76ca:	2a87      	cmp	r2, #135	; 0x87
    76cc:	d8c4      	bhi.n	7658 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    76ce:	1c50      	adds	r0, r2, #1
    76d0:	b2c0      	uxtb	r0, r0
    76d2:	e7bd      	b.n	7650 <TwoWire::isr()+0x28>

000076d4 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    76d4:	4801      	ldr	r0, [pc, #4]	; (76dc <lpi2c1_isr()+0x8>)
    76d6:	f7ff bfa7 	b.w	7628 <TwoWire::isr()>
    76da:	bf00      	nop
    76dc:	2000c17c 	.word	0x2000c17c

000076e0 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    76e0:	4801      	ldr	r0, [pc, #4]	; (76e8 <lpi2c3_isr()+0x8>)
    76e2:	f7ff bfa1 	b.w	7628 <TwoWire::isr()>
    76e6:	bf00      	nop
    76e8:	2000c2bc 	.word	0x2000c2bc

000076ec <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    76ec:	4801      	ldr	r0, [pc, #4]	; (76f4 <lpi2c4_isr()+0x8>)
    76ee:	f7ff bf9b 	b.w	7628 <TwoWire::isr()>
    76f2:	bf00      	nop
    76f4:	2000c3fc 	.word	0x2000c3fc

000076f8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    76f8:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    76fa:	4c09      	ldr	r4, [pc, #36]	; (7720 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    76fc:	4909      	ldr	r1, [pc, #36]	; (7724 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    76fe:	4622      	mov	r2, r4
    7700:	4809      	ldr	r0, [pc, #36]	; (7728 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    7702:	f7ff ff5b 	bl	75bc <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    7706:	f104 0250 	add.w	r2, r4, #80	; 0x50
    770a:	4908      	ldr	r1, [pc, #32]	; (772c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    770c:	4808      	ldr	r0, [pc, #32]	; (7730 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    770e:	f7ff ff55 	bl	75bc <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    7712:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    7716:	4907      	ldr	r1, [pc, #28]	; (7734 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    7718:	4807      	ldr	r0, [pc, #28]	; (7738 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    771a:	f7ff ff4f 	bl	75bc <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    771e:	bd10      	pop	{r4, pc}
    7720:	60002674 	.word	0x60002674
    7724:	403f0000 	.word	0x403f0000
    7728:	2000c17c 	.word	0x2000c17c
    772c:	403f8000 	.word	0x403f8000
    7730:	2000c2bc 	.word	0x2000c2bc
    7734:	403fc000 	.word	0x403fc000
    7738:	2000c3fc 	.word	0x2000c3fc

0000773c <DMAChannel::begin(bool)>:
{
    773c:	b430      	push	{r4, r5}
	__disable_irq();
    773e:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    7740:	b921      	cbnz	r1, 774c <DMAChannel::begin(bool)+0x10>
    7742:	6803      	ldr	r3, [r0, #0]
    7744:	b113      	cbz	r3, 774c <DMAChannel::begin(bool)+0x10>
    7746:	7902      	ldrb	r2, [r0, #4]
    7748:	2a0f      	cmp	r2, #15
    774a:	d93b      	bls.n	77c4 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    774c:	4c24      	ldr	r4, [pc, #144]	; (77e0 <DMAChannel::begin(bool)+0xa4>)
    774e:	8821      	ldrh	r1, [r4, #0]
{
    7750:	2300      	movs	r3, #0
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    7752:	fa41 f203 	asr.w	r2, r1, r3
    7756:	f012 0201 	ands.w	r2, r2, #1
    775a:	d008      	beq.n	776e <DMAChannel::begin(bool)+0x32>
		if (++ch >= DMA_MAX_CHANNELS) {
    775c:	3301      	adds	r3, #1
    775e:	2b10      	cmp	r3, #16
    7760:	d1f7      	bne.n	7752 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    7762:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    7764:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    7766:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    7768:	6002      	str	r2, [r0, #0]
}
    776a:	bc30      	pop	{r4, r5}
    776c:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    776e:	f04f 0c01 	mov.w	ip, #1
    7772:	fa0c fc03 	lsl.w	ip, ip, r3
    7776:	ea41 010c 	orr.w	r1, r1, ip
    777a:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    777c:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    777e:	4919      	ldr	r1, [pc, #100]	; (77e4 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    7780:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    7784:	4c18      	ldr	r4, [pc, #96]	; (77e8 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7786:	4419      	add	r1, r3
	channel = ch;
    7788:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    778c:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    778e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    7790:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    7794:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    7796:	f240 4482 	movw	r4, #1154	; 0x482
    779a:	4914      	ldr	r1, [pc, #80]	; (77ec <DMAChannel::begin(bool)+0xb0>)
    779c:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    779e:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    77a2:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    77a6:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    77aa:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    77ae:	6003      	str	r3, [r0, #0]
}
    77b0:	bc30      	pop	{r4, r5}
	*p++ = 0;
    77b2:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    77b6:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    77ba:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    77be:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    77c2:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    77c4:	4c06      	ldr	r4, [pc, #24]	; (77e0 <DMAChannel::begin(bool)+0xa4>)
    77c6:	8821      	ldrh	r1, [r4, #0]
    77c8:	fa41 f502 	asr.w	r5, r1, r2
    77cc:	07ed      	lsls	r5, r5, #31
    77ce:	d5bf      	bpl.n	7750 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    77d0:	4d04      	ldr	r5, [pc, #16]	; (77e4 <DMAChannel::begin(bool)+0xa8>)
    77d2:	4415      	add	r5, r2
    77d4:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    77d8:	d1ba      	bne.n	7750 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    77da:	b662      	cpsie	i
		return;
    77dc:	e7c5      	b.n	776a <DMAChannel::begin(bool)+0x2e>
    77de:	bf00      	nop
    77e0:	2002948e 	.word	0x2002948e
    77e4:	02007480 	.word	0x02007480
    77e8:	400fc000 	.word	0x400fc000
    77ec:	400e8000 	.word	0x400e8000

000077f0 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
    77f0:	7903      	ldrb	r3, [r0, #4]
    77f2:	2b0f      	cmp	r3, #15
    77f4:	d811      	bhi.n	781a <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    77f6:	4a09      	ldr	r2, [pc, #36]	; (781c <DMAChannel::release()+0x2c>)
    77f8:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    77fa:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    77fc:	4908      	ldr	r1, [pc, #32]	; (7820 <DMAChannel::release()+0x30>)
    77fe:	2201      	movs	r2, #1
    7800:	f890 c004 	ldrb.w	ip, [r0, #4]
    7804:	880b      	ldrh	r3, [r1, #0]
    7806:	fa02 f20c 	lsl.w	r2, r2, ip
    780a:	ea23 0302 	bic.w	r3, r3, r2
    780e:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    7810:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    7812:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    7814:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    7816:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    7818:	6003      	str	r3, [r0, #0]
}
    781a:	4770      	bx	lr
    781c:	400e8000 	.word	0x400e8000
    7820:	2002948e 	.word	0x2002948e

00007824 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7824:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7828:	b672      	cpsid	i
	if (_triggered == false) {
    782a:	7f43      	ldrb	r3, [r0, #29]
    782c:	b95b      	cbnz	r3, 7846 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    782e:	7f01      	ldrb	r1, [r0, #28]
    7830:	2901      	cmp	r1, #1
{
    7832:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    7834:	d00b      	beq.n	784e <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    7836:	2903      	cmp	r1, #3
    7838:	d013      	beq.n	7862 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    783a:	2301      	movs	r3, #1
    783c:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    783e:	b902      	cbnz	r2, 7842 <EventResponder::triggerEventNotImmediate()+0x1e>
    7840:	b662      	cpsie	i
}
    7842:	bc30      	pop	{r4, r5}
    7844:	4770      	bx	lr
    7846:	b90a      	cbnz	r2, 784c <EventResponder::triggerEventNotImmediate()+0x28>
    7848:	b662      	cpsie	i
    784a:	4770      	bx	lr
    784c:	4770      	bx	lr
			if (firstYield == nullptr) {
    784e:	4c12      	ldr	r4, [pc, #72]	; (7898 <EventResponder::triggerEventNotImmediate()+0x74>)
    7850:	6821      	ldr	r1, [r4, #0]
    7852:	b1b1      	cbz	r1, 7882 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    7854:	4911      	ldr	r1, [pc, #68]	; (789c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    7856:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    7858:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    785a:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    785c:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    785e:	6158      	str	r0, [r3, #20]
				lastYield = this;
    7860:	e7eb      	b.n	783a <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    7862:	4d0f      	ldr	r5, [pc, #60]	; (78a0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    7864:	490f      	ldr	r1, [pc, #60]	; (78a4 <EventResponder::triggerEventNotImmediate()+0x80>)
    7866:	682c      	ldr	r4, [r5, #0]
    7868:	b18c      	cbz	r4, 788e <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    786a:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    786c:	680b      	ldr	r3, [r1, #0]
    786e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    7870:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    7872:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7876:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    787a:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    787c:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    7880:	e7db      	b.n	783a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    7882:	4b06      	ldr	r3, [pc, #24]	; (789c <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    7884:	6020      	str	r0, [r4, #0]
				lastYield = this;
    7886:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    7888:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    788c:	e7d5      	b.n	783a <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    788e:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    7892:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    7894:	e7ed      	b.n	7872 <EventResponder::triggerEventNotImmediate()+0x4e>
    7896:	bf00      	nop
    7898:	20028874 	.word	0x20028874
    789c:	20028880 	.word	0x20028880
    78a0:	2002887c 	.word	0x2002887c
    78a4:	20028878 	.word	0x20028878

000078a8 <EventResponder::runFromInterrupt()>:
{
    78a8:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    78aa:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    78ae:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    78b0:	4c0c      	ldr	r4, [pc, #48]	; (78e4 <EventResponder::runFromInterrupt()+0x3c>)
    78b2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    78b4:	b180      	cbz	r0, 78d8 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    78b6:	4e0c      	ldr	r6, [pc, #48]	; (78e8 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    78b8:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    78ba:	6943      	ldr	r3, [r0, #20]
    78bc:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    78be:	b173      	cbz	r3, 78de <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    78c0:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    78c2:	b902      	cbnz	r2, 78c6 <EventResponder::runFromInterrupt()+0x1e>
    78c4:	b662      	cpsie	i
			(*(first->_function))(*first);
    78c6:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    78c8:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    78ca:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    78cc:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    78d0:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    78d2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    78d4:	2800      	cmp	r0, #0
    78d6:	d1f0      	bne.n	78ba <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    78d8:	b902      	cbnz	r2, 78dc <EventResponder::runFromInterrupt()+0x34>
    78da:	b662      	cpsie	i
}
    78dc:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    78de:	6033      	str	r3, [r6, #0]
    78e0:	e7ef      	b.n	78c2 <EventResponder::runFromInterrupt()+0x1a>
    78e2:	bf00      	nop
    78e4:	2002887c 	.word	0x2002887c
    78e8:	20028878 	.word	0x20028878

000078ec <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    78ec:	f7ff bfdc 	b.w	78a8 <EventResponder::runFromInterrupt()>

000078f0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    78f0:	4904      	ldr	r1, [pc, #16]	; (7904 <systick_isr+0x14>)
	systick_millis_count++;
    78f2:	4a05      	ldr	r2, [pc, #20]	; (7908 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    78f4:	6849      	ldr	r1, [r1, #4]
    78f6:	4b05      	ldr	r3, [pc, #20]	; (790c <systick_isr+0x1c>)
    78f8:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    78fa:	6813      	ldr	r3, [r2, #0]
    78fc:	3301      	adds	r3, #1
    78fe:	6013      	str	r3, [r2, #0]
}
    7900:	4770      	bx	lr
    7902:	bf00      	nop
    7904:	e0001000 	.word	0xe0001000
    7908:	2002945c 	.word	0x2002945c
    790c:	20029458 	.word	0x20029458

00007910 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7910:	4608      	mov	r0, r1
    7912:	f001 bdc9 	b.w	94a8 <usb_serial_putchar>
    7916:	bf00      	nop

00007918 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
    7918:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    791a:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    791c:	bf08      	it	eq
    791e:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7920:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
    7922:	b391      	cbz	r1, 798a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
    7924:	f04f 0e21 	mov.w	lr, #33	; 0x21
    7928:	e001      	b.n	792e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
    792a:	fa5f fe86 	uxtb.w	lr, r6
    792e:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    7932:	fbb1 f5f2 	udiv	r5, r1, r2
    7936:	fb02 1415 	mls	r4, r2, r5, r1
    793a:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    793e:	2c09      	cmp	r4, #9
    7940:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    7944:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    7948:	bf98      	it	ls
    794a:	fa5f f48c 	uxtbls.w	r4, ip
    794e:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    7952:	bf88      	it	hi
    7954:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    7956:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7958:	44ec      	add	ip, sp
			n /= base;
    795a:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    795c:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    7960:	d2e3      	bcs.n	792a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    7962:	b14b      	cbz	r3, 7978 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    7964:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    7968:	222d      	movs	r2, #45	; 0x2d
		i--;
    796a:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    796e:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    7972:	446b      	add	r3, sp
    7974:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    7978:	6803      	ldr	r3, [r0, #0]
    797a:	a901      	add	r1, sp, #4
    797c:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    7980:	685b      	ldr	r3, [r3, #4]
    7982:	4471      	add	r1, lr
    7984:	4798      	blx	r3
}
    7986:	b00a      	add	sp, #40	; 0x28
    7988:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    798a:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    798c:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    7990:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    7994:	e7e5      	b.n	7962 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    7996:	bf00      	nop

00007998 <Print::print(long)>:
	if (n < 0) {
    7998:	2900      	cmp	r1, #0
    799a:	db03      	blt.n	79a4 <Print::print(long)+0xc>
	uint8_t sign=0;
    799c:	2300      	movs	r3, #0
	if (base == 0) {
    799e:	220a      	movs	r2, #10
    79a0:	f7ff bfba 	b.w	7918 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    79a4:	4249      	negs	r1, r1
		sign = '-';
    79a6:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    79a8:	220a      	movs	r2, #10
    79aa:	f7ff bfb5 	b.w	7918 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    79ae:	bf00      	nop

000079b0 <Print::println()>:
{
    79b0:	b500      	push	{lr}
	return write(buf, 2);
    79b2:	6803      	ldr	r3, [r0, #0]
{
    79b4:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    79b6:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    79ba:	2202      	movs	r2, #2
    79bc:	a901      	add	r1, sp, #4
    79be:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    79c0:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    79c4:	4798      	blx	r3
}
    79c6:	b003      	add	sp, #12
    79c8:	f85d fb04 	ldr.w	pc, [sp], #4

000079cc <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    79cc:	4b05      	ldr	r3, [pc, #20]	; (79e4 <_write+0x18>)
    79ce:	2802      	cmp	r0, #2
    79d0:	bf88      	it	hi
    79d2:	4603      	movhi	r3, r0
{
    79d4:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    79d6:	681c      	ldr	r4, [r3, #0]
    79d8:	4618      	mov	r0, r3
    79da:	6863      	ldr	r3, [r4, #4]
}
    79dc:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    79e0:	4718      	bx	r3
    79e2:	bf00      	nop
    79e4:	200085d4 	.word	0x200085d4

000079e8 <Print::printf(char const*, ...)>:
{
    79e8:	b40e      	push	{r1, r2, r3}
    79ea:	b500      	push	{lr}
    79ec:	b082      	sub	sp, #8
    79ee:	aa03      	add	r2, sp, #12
    79f0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    79f4:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    79f6:	f003 ff55 	bl	b8a4 <vdprintf>
}
    79fa:	b002      	add	sp, #8
    79fc:	f85d eb04 	ldr.w	lr, [sp], #4
    7a00:	b003      	add	sp, #12
    7a02:	4770      	bx	lr

00007a04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    7a04:	b95a      	cbnz	r2, 7a1e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    7a06:	6803      	ldr	r3, [r0, #0]
    7a08:	b2c9      	uxtb	r1, r1
    7a0a:	4a07      	ldr	r2, [pc, #28]	; (7a28 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    7a0c:	681b      	ldr	r3, [r3, #0]
    7a0e:	4293      	cmp	r3, r2
{
    7a10:	b500      	push	{lr}
    7a12:	d106      	bne.n	7a22 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    7a14:	4608      	mov	r0, r1
}
    7a16:	f85d eb04 	ldr.w	lr, [sp], #4
    7a1a:	f001 bd45 	b.w	94a8 <usb_serial_putchar>
    7a1e:	f7ff bf7b 	b.w	7918 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7a22:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    7a26:	4718      	bx	r3
    7a28:	00007911 	.word	0x00007911
    7a2c:	00000000 	.word	0x00000000

00007a30 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    7a30:	eeb4 0b40 	vcmp.f64	d0, d0
{
    7a34:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    7a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    7a3a:	4605      	mov	r5, r0
    7a3c:	ed2d 8b02 	vpush	{d8}
    7a40:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    7a42:	d67c      	bvs.n	7b3e <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    7a44:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    7a48:	ed9f 6b47 	vldr	d6, [pc, #284]	; 7b68 <Print::printFloat(double, unsigned char)+0x138>
    7a4c:	eeb4 7b46 	vcmp.f64	d7, d6
    7a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a54:	dc6b      	bgt.n	7b2e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    7a56:	ed9f 7b46 	vldr	d7, [pc, #280]	; 7b70 <Print::printFloat(double, unsigned char)+0x140>
    7a5a:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a62:	dc5a      	bgt.n	7b1a <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    7a64:	ed9f 7b44 	vldr	d7, [pc, #272]	; 7b78 <Print::printFloat(double, unsigned char)+0x148>
    7a68:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a70:	d453      	bmi.n	7b1a <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    7a72:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    7a76:	460c      	mov	r4, r1
    7a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a7c:	d45b      	bmi.n	7b36 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    7a7e:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    7a80:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    7a84:	2c00      	cmp	r4, #0
    7a86:	d05e      	beq.n	7b46 <Print::printFloat(double, unsigned char)+0x116>
    7a88:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    7a8c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 7b80 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    7a90:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    7a94:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    7a98:	fa5f f28c 	uxtb.w	r2, ip
    7a9c:	42a2      	cmp	r2, r4
    7a9e:	d3f7      	bcc.n	7a90 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    7aa0:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    7aa4:	220a      	movs	r2, #10
    7aa6:	4628      	mov	r0, r5
    7aa8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    7aac:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    7ab0:	ee17 1a90 	vmov	r1, s15
    7ab4:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    7ab8:	f7ff ff2e 	bl	7918 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7abc:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    7abe:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    7ac2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    7ac6:	4606      	mov	r6, r0
		buf[0] = '.';
    7ac8:	bf28      	it	cs
    7aca:	240f      	movcs	r4, #15
    7acc:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    7ad0:	f10d 0309 	add.w	r3, sp, #9
    7ad4:	aa02      	add	r2, sp, #8
    7ad6:	1e61      	subs	r1, r4, #1
    7ad8:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    7adc:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    7ae0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    7ae4:	edcd 7a01 	vstr	s15, [sp, #4]
    7ae8:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    7aec:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    7af0:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    7af2:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    7af6:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    7afa:	4291      	cmp	r1, r2
			remainder -= n; 
    7afc:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    7b00:	d1ec      	bne.n	7adc <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    7b02:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    7b04:	3401      	adds	r4, #1
		count += write(buf, count);
    7b06:	a902      	add	r1, sp, #8
    7b08:	4628      	mov	r0, r5
    7b0a:	685b      	ldr	r3, [r3, #4]
    7b0c:	b2e2      	uxtb	r2, r4
    7b0e:	4798      	blx	r3
	}
	return count;
}
    7b10:	4630      	mov	r0, r6
    7b12:	b006      	add	sp, #24
    7b14:	ecbd 8b02 	vpop	{d8}
    7b18:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    7b1a:	682b      	ldr	r3, [r5, #0]
    7b1c:	2203      	movs	r2, #3
    7b1e:	491a      	ldr	r1, [pc, #104]	; (7b88 <Print::printFloat(double, unsigned char)+0x158>)
    7b20:	685b      	ldr	r3, [r3, #4]
    7b22:	b006      	add	sp, #24
    7b24:	ecbd 8b02 	vpop	{d8}
    7b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b2c:	4718      	bx	r3
    7b2e:	6803      	ldr	r3, [r0, #0]
    7b30:	2203      	movs	r2, #3
    7b32:	4916      	ldr	r1, [pc, #88]	; (7b8c <Print::printFloat(double, unsigned char)+0x15c>)
    7b34:	e7f4      	b.n	7b20 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    7b36:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    7b3a:	2301      	movs	r3, #1
    7b3c:	e7a0      	b.n	7a80 <Print::printFloat(double, unsigned char)+0x50>
    7b3e:	6803      	ldr	r3, [r0, #0]
    7b40:	2203      	movs	r2, #3
    7b42:	4913      	ldr	r1, [pc, #76]	; (7b90 <Print::printFloat(double, unsigned char)+0x160>)
    7b44:	e7ec      	b.n	7b20 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    7b46:	ee30 0b07 	vadd.f64	d0, d0, d7
    7b4a:	220a      	movs	r2, #10
    7b4c:	4628      	mov	r0, r5
    7b4e:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    7b52:	ee17 1a90 	vmov	r1, s15
}
    7b56:	b006      	add	sp, #24
    7b58:	ecbd 8b02 	vpop	{d8}
    7b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b60:	f7ff beda 	b.w	7918 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7b64:	f3af 8000 	nop.w
    7b68:	ffffffff 	.word	0xffffffff
    7b6c:	7fefffff 	.word	0x7fefffff
    7b70:	e0000000 	.word	0xe0000000
    7b74:	41efffff 	.word	0x41efffff
    7b78:	e0000000 	.word	0xe0000000
    7b7c:	c1efffff 	.word	0xc1efffff
    7b80:	9999999a 	.word	0x9999999a
    7b84:	3fb99999 	.word	0x3fb99999
    7b88:	2000059c 	.word	0x2000059c
    7b8c:	20000598 	.word	0x20000598
    7b90:	20000594 	.word	0x20000594

00007b94 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    7b94:	f001 bc78 	b.w	9488 <usb_serial_getchar>

00007b98 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    7b98:	f001 bc10 	b.w	93bc <usb_serial_peekchar>

00007b9c <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    7b9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    7ba0:	b392      	cbz	r2, 7c08 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    7ba2:	4617      	mov	r7, r2
    7ba4:	fab3 f283 	clz	r2, r3
    7ba8:	0952      	lsrs	r2, r2, #5
    7baa:	b36b      	cbz	r3, 7c08 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    7bac:	f1b3 0801 	subs.w	r8, r3, #1
    7bb0:	d025      	beq.n	7bfe <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7bb2:	eb07 0a08 	add.w	sl, r7, r8
    7bb6:	4683      	mov	fp, r0
    7bb8:	4689      	mov	r9, r1
	size_t index = 0;
    7bba:	4690      	mov	r8, r2
    7bbc:	4c17      	ldr	r4, [pc, #92]	; (7c1c <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    7bbe:	4e18      	ldr	r6, [pc, #96]	; (7c20 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    7bc0:	6825      	ldr	r5, [r4, #0]
    7bc2:	e00b      	b.n	7bdc <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    7bc4:	f001 fc60 	bl	9488 <usb_serial_getchar>
    if (c >= 0) return c;
    7bc8:	2800      	cmp	r0, #0
    7bca:	da10      	bge.n	7bee <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    7bcc:	f001 fd00 	bl	95d0 <yield>
    7bd0:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    7bd2:	f8db 2008 	ldr.w	r2, [fp, #8]
    7bd6:	1b5b      	subs	r3, r3, r5
    7bd8:	4293      	cmp	r3, r2
    7bda:	d21a      	bcs.n	7c12 <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    7bdc:	f8db 3000 	ldr.w	r3, [fp]
    7be0:	695b      	ldr	r3, [r3, #20]
    7be2:	42b3      	cmp	r3, r6
    7be4:	d0ee      	beq.n	7bc4 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    7be6:	4658      	mov	r0, fp
    7be8:	4798      	blx	r3
    if (c >= 0) return c;
    7bea:	2800      	cmp	r0, #0
    7bec:	dbee      	blt.n	7bcc <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    7bee:	4548      	cmp	r0, r9
    7bf0:	d005      	beq.n	7bfe <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    7bf2:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    7bf6:	45ba      	cmp	sl, r7
		index++;
    7bf8:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    7bfc:	d1e0      	bne.n	7bc0 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    7bfe:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    7c00:	4640      	mov	r0, r8
	*buffer = 0;
    7c02:	703b      	strb	r3, [r7, #0]
}
    7c04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    7c08:	f04f 0800 	mov.w	r8, #0
}
    7c0c:	4640      	mov	r0, r8
    7c0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    7c12:	2301      	movs	r3, #1
    7c14:	f88b 300c 	strb.w	r3, [fp, #12]
    7c18:	e7f1      	b.n	7bfe <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7c1a:	bf00      	nop
    7c1c:	2002945c 	.word	0x2002945c
    7c20:	00007b95 	.word	0x00007b95

00007c24 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7c24:	49a2      	ldr	r1, [pc, #648]	; (7eb0 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7c26:	4ba3      	ldr	r3, [pc, #652]	; (7eb4 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    7c28:	4288      	cmp	r0, r1
{
    7c2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    7c2e:	4ca2      	ldr	r4, [pc, #648]	; (7eb8 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7c30:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    7c32:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    7c34:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    7c38:	d91b      	bls.n	7c72 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    7c3a:	4ba0      	ldr	r3, [pc, #640]	; (7ebc <set_arm_clock+0x298>)
    7c3c:	4298      	cmp	r0, r3
    7c3e:	f240 8102 	bls.w	7e46 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7c42:	1ac3      	subs	r3, r0, r3
    7c44:	499e      	ldr	r1, [pc, #632]	; (7ec0 <set_arm_clock+0x29c>)
    7c46:	0a1b      	lsrs	r3, r3, #8
    7c48:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c4c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7c50:	09db      	lsrs	r3, r3, #7
    7c52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7c56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7c5a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c5e:	428b      	cmp	r3, r1
    7c60:	bf28      	it	cs
    7c62:	460b      	movcs	r3, r1
    7c64:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    7c68:	4b96      	ldr	r3, [pc, #600]	; (7ec4 <set_arm_clock+0x2a0>)
    7c6a:	fba3 3707 	umull	r3, r7, r3, r7
    7c6e:	08ff      	lsrs	r7, r7, #3
    7c70:	e004      	b.n	7c7c <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    7c72:	4f95      	ldr	r7, [pc, #596]	; (7ec8 <set_arm_clock+0x2a4>)
    7c74:	42b8      	cmp	r0, r7
    7c76:	bf8c      	ite	hi
    7c78:	270e      	movhi	r7, #14
    7c7a:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7c7c:	498d      	ldr	r1, [pc, #564]	; (7eb4 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c7e:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7c82:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c86:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7c88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    7c8c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c90:	d20c      	bcs.n	7cac <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7c92:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7c96:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7c9a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    7c9e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7ca2:	680b      	ldr	r3, [r1, #0]
    7ca4:	2b00      	cmp	r3, #0
    7ca6:	dafc      	bge.n	7ca2 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7ca8:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    7cac:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    7cb0:	d124      	bne.n	7cfc <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    7cb2:	4986      	ldr	r1, [pc, #536]	; (7ecc <set_arm_clock+0x2a8>)
    7cb4:	690c      	ldr	r4, [r1, #16]
    7cb6:	4986      	ldr	r1, [pc, #536]	; (7ed0 <set_arm_clock+0x2ac>)
    7cb8:	43a1      	bics	r1, r4
    7cba:	f000 80ea 	beq.w	7e92 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7cbe:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    7cc2:	4634      	mov	r4, r6
    7cc4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7cc8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    7ccc:	d004      	beq.n	7cd8 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    7cce:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    7cd2:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    7cd4:	4b77      	ldr	r3, [pc, #476]	; (7eb4 <set_arm_clock+0x290>)
    7cd6:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7cd8:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    7cdc:	d007      	beq.n	7cee <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    7cde:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    7ce2:	4974      	ldr	r1, [pc, #464]	; (7eb4 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    7ce4:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    7ce6:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    7ce8:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    7cea:	071a      	lsls	r2, r3, #28
    7cec:	d4fc      	bmi.n	7ce8 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    7cee:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    7cf2:	4a70      	ldr	r2, [pc, #448]	; (7eb4 <set_arm_clock+0x290>)
    7cf4:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7cf6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7cf8:	069b      	lsls	r3, r3, #26
    7cfa:	d4fc      	bmi.n	7cf6 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    7cfc:	4c75      	ldr	r4, [pc, #468]	; (7ed4 <set_arm_clock+0x2b0>)
    7cfe:	42a0      	cmp	r0, r4
    7d00:	f200 80ce 	bhi.w	7ea0 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    7d04:	f04f 0c01 	mov.w	ip, #1
    7d08:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    7d0a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    7d0c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    7d10:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    7d14:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7d18:	42a2      	cmp	r2, r4
    7d1a:	d818      	bhi.n	7d4e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    7d1c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    7d20:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    7d24:	f040 808d 	bne.w	7e42 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    7d28:	f1bc 0f04 	cmp.w	ip, #4
    7d2c:	f200 8091 	bhi.w	7e52 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    7d30:	180a      	adds	r2, r1, r0
    7d32:	42a2      	cmp	r2, r4
    7d34:	f200 80a4 	bhi.w	7e80 <set_arm_clock+0x25c>
    7d38:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    7d3c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    7d3e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7d42:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    7d46:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7d4a:	42a2      	cmp	r2, r4
    7d4c:	d9e6      	bls.n	7d1c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7d4e:	f10c 31ff 	add.w	r1, ip, #4294967295
    7d52:	028c      	lsls	r4, r1, #10
    7d54:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7d58:	485f      	ldr	r0, [pc, #380]	; (7ed8 <set_arm_clock+0x2b4>)
    7d5a:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    7d5c:	4a5f      	ldr	r2, [pc, #380]	; (7edc <set_arm_clock+0x2b8>)
    7d5e:	4290      	cmp	r0, r2
    7d60:	d97f      	bls.n	7e62 <set_arm_clock+0x23e>
    7d62:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 7f08 <set_arm_clock+0x2e4>
    7d66:	226c      	movs	r2, #108	; 0x6c
    7d68:	485d      	ldr	r0, [pc, #372]	; (7ee0 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7d6a:	4d58      	ldr	r5, [pc, #352]	; (7ecc <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    7d6c:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7d70:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    7d74:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7d78:	f8df c190 	ldr.w	ip, [pc, #400]	; 7f0c <set_arm_clock+0x2e8>
    7d7c:	ea0e 0c0c 	and.w	ip, lr, ip
    7d80:	45d4      	cmp	ip, sl
    7d82:	d009      	beq.n	7d98 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    7d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    7d88:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    7d8c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    7d90:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    7d92:	682a      	ldr	r2, [r5, #0]
    7d94:	2a00      	cmp	r2, #0
    7d96:	dafc      	bge.n	7d92 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    7d98:	4a46      	ldr	r2, [pc, #280]	; (7eb4 <set_arm_clock+0x290>)
    7d9a:	6915      	ldr	r5, [r2, #16]
    7d9c:	f005 0507 	and.w	r5, r5, #7
    7da0:	429d      	cmp	r5, r3
    7da2:	d003      	beq.n	7dac <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    7da4:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    7da6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7da8:	03dd      	lsls	r5, r3, #15
    7daa:	d4fc      	bmi.n	7da6 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7dac:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    7db0:	d009      	beq.n	7dc6 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    7db2:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7db6:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    7dba:	4a3e      	ldr	r2, [pc, #248]	; (7eb4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7dbc:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    7dbe:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    7dc0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7dc2:	0799      	lsls	r1, r3, #30
    7dc4:	d4fc      	bmi.n	7dc0 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7dc6:	4947      	ldr	r1, [pc, #284]	; (7ee4 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    7dc8:	4a47      	ldr	r2, [pc, #284]	; (7ee8 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7dca:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    7dcc:	4291      	cmp	r1, r2
    7dce:	d83c      	bhi.n	7e4a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7dd0:	4b46      	ldr	r3, [pc, #280]	; (7eec <set_arm_clock+0x2c8>)
    7dd2:	09c9      	lsrs	r1, r1, #7
    7dd4:	fba3 3101 	umull	r3, r1, r3, r1
    7dd8:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    7dda:	1e4b      	subs	r3, r1, #1
    7ddc:	021b      	lsls	r3, r3, #8
    7dde:	ea86 0203 	eor.w	r2, r6, r3
    7de2:	f412 7f40 	tst.w	r2, #768	; 0x300
    7de6:	d006      	beq.n	7df6 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    7de8:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    7df0:	4a30      	ldr	r2, [pc, #192]	; (7eb4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7df2:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    7df4:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    7df6:	4a2f      	ldr	r2, [pc, #188]	; (7eb4 <set_arm_clock+0x290>)
    7df8:	6953      	ldr	r3, [r2, #20]
    7dfa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    7dfe:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7e00:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7e02:	069b      	lsls	r3, r3, #26
    7e04:	d4fc      	bmi.n	7e00 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7e06:	4b3a      	ldr	r3, [pc, #232]	; (7ef0 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7e08:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7e0a:	fba3 2300 	umull	r2, r3, r3, r0
    7e0e:	f04f 32ff 	mov.w	r2, #4294967295
    7e12:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    7e16:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7e1a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    7e1e:	4a35      	ldr	r2, [pc, #212]	; (7ef4 <set_arm_clock+0x2d0>)
    7e20:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    7e22:	4a35      	ldr	r2, [pc, #212]	; (7ef8 <set_arm_clock+0x2d4>)
    7e24:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7e26:	4a35      	ldr	r2, [pc, #212]	; (7efc <set_arm_clock+0x2d8>)
    7e28:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7e2a:	d208      	bcs.n	7e3e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7e2c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7e30:	4a21      	ldr	r2, [pc, #132]	; (7eb8 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7e32:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    7e36:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7e38:	6813      	ldr	r3, [r2, #0]
    7e3a:	2b00      	cmp	r3, #0
    7e3c:	dafc      	bge.n	7e38 <set_arm_clock+0x214>
	}

	return frequency;
}
    7e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e42:	4673      	mov	r3, lr
    7e44:	e762      	b.n	7d0c <set_arm_clock+0xe8>
    7e46:	2712      	movs	r7, #18
    7e48:	e718      	b.n	7c7c <set_arm_clock+0x58>
    7e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    7e4e:	2104      	movs	r1, #4
    7e50:	e7c5      	b.n	7dde <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7e52:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7e56:	4820      	ldr	r0, [pc, #128]	; (7ed8 <set_arm_clock+0x2b4>)
    7e58:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7e5a:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7e5c:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7e5e:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7e62:	4a27      	ldr	r2, [pc, #156]	; (7f00 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7e64:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 7f10 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7e68:	fba2 2000 	umull	r2, r0, r2, r0
    7e6c:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    7e6e:	4825      	ldr	r0, [pc, #148]	; (7f04 <set_arm_clock+0x2e0>)
    7e70:	2a36      	cmp	r2, #54	; 0x36
    7e72:	bf38      	it	cc
    7e74:	2236      	movcc	r2, #54	; 0x36
    7e76:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7e7a:	ea42 0a0a 	orr.w	sl, r2, sl
    7e7e:	e774      	b.n	7d6a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7e80:	ea4f 248c 	mov.w	r4, ip, lsl #10
    7e84:	2300      	movs	r3, #0
    7e86:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    7e8a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    7e8e:	46ac      	mov	ip, r5
    7e90:	e762      	b.n	7d58 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7e92:	461d      	mov	r5, r3
    7e94:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    7e98:	4611      	mov	r1, r2
    7e9a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    7e9e:	e713      	b.n	7cc8 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    7ea0:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    7ea2:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7ea6:	4602      	mov	r2, r0
    7ea8:	4631      	mov	r1, r6
    7eaa:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    7eac:	46e6      	mov	lr, ip
    7eae:	e753      	b.n	7d58 <set_arm_clock+0x134>
    7eb0:	1f78a400 	.word	0x1f78a400
    7eb4:	400fc000 	.word	0x400fc000
    7eb8:	40080000 	.word	0x40080000
    7ebc:	23c34600 	.word	0x23c34600
    7ec0:	004cb223 	.word	0x004cb223
    7ec4:	51eb851f 	.word	0x51eb851f
    7ec8:	016e3600 	.word	0x016e3600
    7ecc:	400d8000 	.word	0x400d8000
    7ed0:	80003040 	.word	0x80003040
    7ed4:	269fb1ff 	.word	0x269fb1ff
    7ed8:	005b8d80 	.word	0x005b8d80
    7edc:	4df67eff 	.word	0x4df67eff
    7ee0:	4d3f6400 	.word	0x4d3f6400
    7ee4:	08f0d17f 	.word	0x08f0d17f
    7ee8:	2cb4177f 	.word	0x2cb4177f
    7eec:	00e5109f 	.word	0x00e5109f
    7ef0:	431bde83 	.word	0x431bde83
    7ef4:	200085d0 	.word	0x200085d0
    7ef8:	200085cc 	.word	0x200085cc
    7efc:	20028f9c 	.word	0x20028f9c
    7f00:	165e9f81 	.word	0x165e9f81
    7f04:	00b71b00 	.word	0x00b71b00
    7f08:	8000206c 	.word	0x8000206c
    7f0c:	8001307f 	.word	0x8001307f
    7f10:	80002000 	.word	0x80002000

00007f14 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    7f14:	b900      	cbnz	r0, 7f18 <delay+0x4>
    7f16:	4770      	bx	lr
{
    7f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7f1c:	2101      	movs	r1, #1
    7f1e:	4681      	mov	r9, r0
    7f20:	4c21      	ldr	r4, [pc, #132]	; (7fa8 <delay+0x94>)
    7f22:	4d22      	ldr	r5, [pc, #136]	; (7fac <delay+0x98>)
    7f24:	4e22      	ldr	r6, [pc, #136]	; (7fb0 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7f26:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    7f2a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    7f2c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7f2e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7f32:	2b00      	cmp	r3, #0
    7f34:	d1f7      	bne.n	7f26 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7f36:	491f      	ldr	r1, [pc, #124]	; (7fb4 <delay+0xa0>)
    7f38:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    7f3a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f3e:	f8df a078 	ldr.w	sl, [pc, #120]	; 7fb8 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    7f42:	1a1b      	subs	r3, r3, r0
    7f44:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    7f46:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f4a:	f8da 2000 	ldr.w	r2, [sl]
    7f4e:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    7f52:	455a      	cmp	r2, fp
    7f54:	bf94      	ite	ls
    7f56:	4490      	addls	r8, r2
    7f58:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7f5a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    7f5e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    7f60:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7f62:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7f66:	2b00      	cmp	r3, #0
    7f68:	d1f7      	bne.n	7f5a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7f6a:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f6c:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    7f70:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    7f72:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f76:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    7f7a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    7f7e:	bf94      	ite	ls
    7f80:	4462      	addls	r2, ip
    7f82:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    7f86:	eba2 0208 	sub.w	r2, r2, r8
    7f8a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    7f8e:	d306      	bcc.n	7f9e <delay+0x8a>
			if (--msec == 0) return;
    7f90:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    7f94:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    7f98:	d1df      	bne.n	7f5a <delay+0x46>
}
    7f9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    7f9e:	f001 fb17 	bl	95d0 <yield>
		while ((micros() - start) >= 1000) {
    7fa2:	4904      	ldr	r1, [pc, #16]	; (7fb4 <delay+0xa0>)
    7fa4:	e7d9      	b.n	7f5a <delay+0x46>
    7fa6:	bf00      	nop
    7fa8:	20029460 	.word	0x20029460
    7fac:	2002945c 	.word	0x2002945c
    7fb0:	20029458 	.word	0x20029458
    7fb4:	e0001000 	.word	0xe0001000
    7fb8:	20028f9c 	.word	0x20028f9c

00007fbc <micros>:
{
    7fbc:	b430      	push	{r4, r5}
    7fbe:	4b0f      	ldr	r3, [pc, #60]	; (7ffc <micros+0x40>)
    7fc0:	f04f 0c01 	mov.w	ip, #1
    7fc4:	4d0e      	ldr	r5, [pc, #56]	; (8000 <micros+0x44>)
    7fc6:	4c0f      	ldr	r4, [pc, #60]	; (8004 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7fc8:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    7fcc:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    7fce:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7fd0:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    7fd4:	2a00      	cmp	r2, #0
    7fd6:	d1f7      	bne.n	7fc8 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7fd8:	4b0b      	ldr	r3, [pc, #44]	; (8008 <micros+0x4c>)
    7fda:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7fdc:	4a0b      	ldr	r2, [pc, #44]	; (800c <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    7fde:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    7fe0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7fe4:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    7fe6:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7fea:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    7fee:	bc30      	pop	{r4, r5}
    7ff0:	428a      	cmp	r2, r1
    7ff2:	bf94      	ite	ls
    7ff4:	1880      	addls	r0, r0, r2
    7ff6:	1840      	addhi	r0, r0, r1
    7ff8:	4770      	bx	lr
    7ffa:	bf00      	nop
    7ffc:	20029460 	.word	0x20029460
    8000:	2002945c 	.word	0x2002945c
    8004:	20029458 	.word	0x20029458
    8008:	e0001000 	.word	0xe0001000
    800c:	20028f9c 	.word	0x20028f9c

00008010 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    8010:	2836      	cmp	r0, #54	; 0x36
    8012:	d816      	bhi.n	8042 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    8014:	0102      	lsls	r2, r0, #4
    8016:	4b10      	ldr	r3, [pc, #64]	; (8058 <digitalWrite+0x48>)
    8018:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    801c:	589b      	ldr	r3, [r3, r2]
{
    801e:	b410      	push	{r4}
	mask = p->mask;
    8020:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    8022:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    8024:	4214      	tst	r4, r2
    8026:	d005      	beq.n	8034 <digitalWrite+0x24>
		if (val) {
    8028:	b961      	cbnz	r1, 8044 <digitalWrite+0x34>
		}
	}
}
    802a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    802e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    8032:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8034:	6883      	ldr	r3, [r0, #8]
		if (val) {
    8036:	b151      	cbz	r1, 804e <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8038:	4a08      	ldr	r2, [pc, #32]	; (805c <digitalWrite+0x4c>)
}
    803a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    803e:	601a      	str	r2, [r3, #0]
}
    8040:	4770      	bx	lr
    8042:	4770      	bx	lr
    8044:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    8048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    804c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    804e:	4a04      	ldr	r2, [pc, #16]	; (8060 <digitalWrite+0x50>)
}
    8050:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8054:	601a      	str	r2, [r3, #0]
}
    8056:	4770      	bx	lr
    8058:	200076b0 	.word	0x200076b0
    805c:	0001f038 	.word	0x0001f038
    8060:	00013038 	.word	0x00013038

00008064 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    8064:	2836      	cmp	r0, #54	; 0x36
    8066:	d829      	bhi.n	80bc <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    8068:	4b16      	ldr	r3, [pc, #88]	; (80c4 <pinMode+0x60>)
    806a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    806c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    806e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8072:	589a      	ldr	r2, [r3, r2]
{
    8074:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8076:	6853      	ldr	r3, [r2, #4]
    8078:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    807a:	d00e      	beq.n	809a <pinMode+0x36>
    807c:	2904      	cmp	r1, #4
    807e:	d00c      	beq.n	809a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8080:	ea23 0304 	bic.w	r3, r3, r4
    8084:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8086:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    8088:	b1a9      	cbz	r1, 80b6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    808a:	2902      	cmp	r1, #2
    808c:	d017      	beq.n	80be <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    808e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8090:	bf0c      	ite	eq
    8092:	4a0d      	ldreq	r2, [pc, #52]	; (80c8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    8094:	4a0d      	ldrne	r2, [pc, #52]	; (80cc <pinMode+0x68>)
    8096:	601a      	str	r2, [r3, #0]
    8098:	e007      	b.n	80aa <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    809a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    809c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    809e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    80a0:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    80a2:	d008      	beq.n	80b6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    80a4:	f640 0238 	movw	r2, #2104	; 0x838
    80a8:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    80aa:	6843      	ldr	r3, [r0, #4]
    80ac:	2215      	movs	r2, #21
}
    80ae:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    80b2:	601a      	str	r2, [r3, #0]
}
    80b4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    80b6:	2238      	movs	r2, #56	; 0x38
    80b8:	601a      	str	r2, [r3, #0]
    80ba:	e7f6      	b.n	80aa <pinMode+0x46>
    80bc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    80be:	4a04      	ldr	r2, [pc, #16]	; (80d0 <pinMode+0x6c>)
    80c0:	601a      	str	r2, [r3, #0]
    80c2:	e7f2      	b.n	80aa <pinMode+0x46>
    80c4:	200076b0 	.word	0x200076b0
    80c8:	00013038 	.word	0x00013038
    80cc:	00010038 	.word	0x00010038
    80d0:	0001f038 	.word	0x0001f038

000080d4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    80d4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    80d6:	f7f8 f927 	bl	328 <setup>
	while (1) {
		loop();
    80da:	f7f7 ffc5 	bl	68 <loop>
		yield();
    80de:	f001 fa77 	bl	95d0 <yield>
	while (1) {
    80e2:	e7fa      	b.n	80da <main+0x6>

000080e4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    80e4:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    80e6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    80ea:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    80ee:	d16d      	bne.n	81cc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    80f0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    80f2:	d341      	bcc.n	8178 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    80f4:	f851 3b04 	ldr.w	r3, [r1], #4
    80f8:	f840 3b04 	str.w	r3, [r0], #4
    80fc:	f851 3b04 	ldr.w	r3, [r1], #4
    8100:	f840 3b04 	str.w	r3, [r0], #4
    8104:	f851 3b04 	ldr.w	r3, [r1], #4
    8108:	f840 3b04 	str.w	r3, [r0], #4
    810c:	f851 3b04 	ldr.w	r3, [r1], #4
    8110:	f840 3b04 	str.w	r3, [r0], #4
    8114:	f851 3b04 	ldr.w	r3, [r1], #4
    8118:	f840 3b04 	str.w	r3, [r0], #4
    811c:	f851 3b04 	ldr.w	r3, [r1], #4
    8120:	f840 3b04 	str.w	r3, [r0], #4
    8124:	f851 3b04 	ldr.w	r3, [r1], #4
    8128:	f840 3b04 	str.w	r3, [r0], #4
    812c:	f851 3b04 	ldr.w	r3, [r1], #4
    8130:	f840 3b04 	str.w	r3, [r0], #4
    8134:	f851 3b04 	ldr.w	r3, [r1], #4
    8138:	f840 3b04 	str.w	r3, [r0], #4
    813c:	f851 3b04 	ldr.w	r3, [r1], #4
    8140:	f840 3b04 	str.w	r3, [r0], #4
    8144:	f851 3b04 	ldr.w	r3, [r1], #4
    8148:	f840 3b04 	str.w	r3, [r0], #4
    814c:	f851 3b04 	ldr.w	r3, [r1], #4
    8150:	f840 3b04 	str.w	r3, [r0], #4
    8154:	f851 3b04 	ldr.w	r3, [r1], #4
    8158:	f840 3b04 	str.w	r3, [r0], #4
    815c:	f851 3b04 	ldr.w	r3, [r1], #4
    8160:	f840 3b04 	str.w	r3, [r0], #4
    8164:	f851 3b04 	ldr.w	r3, [r1], #4
    8168:	f840 3b04 	str.w	r3, [r0], #4
    816c:	f851 3b04 	ldr.w	r3, [r1], #4
    8170:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8174:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8176:	d2bd      	bcs.n	80f4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8178:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    817a:	d311      	bcc.n	81a0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    817c:	f851 3b04 	ldr.w	r3, [r1], #4
    8180:	f840 3b04 	str.w	r3, [r0], #4
    8184:	f851 3b04 	ldr.w	r3, [r1], #4
    8188:	f840 3b04 	str.w	r3, [r0], #4
    818c:	f851 3b04 	ldr.w	r3, [r1], #4
    8190:	f840 3b04 	str.w	r3, [r0], #4
    8194:	f851 3b04 	ldr.w	r3, [r1], #4
    8198:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    819c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    819e:	d2ed      	bcs.n	817c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    81a0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    81a2:	d305      	bcc.n	81b0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    81a4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    81a8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    81ac:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    81ae:	d2f9      	bcs.n	81a4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    81b0:	3204      	adds	r2, #4
	beq	.Ldone
    81b2:	d008      	beq.n	81c6 <memcpy+0xe2>

	lsls	r2, r2, #31
    81b4:	07d2      	lsls	r2, r2, #31
	itt ne
    81b6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    81b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    81bc:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    81c0:	d301      	bcc.n	81c6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    81c2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    81c4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    81c6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    81c8:	4770      	bx	lr
    81ca:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    81cc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    81ce:	d313      	bcc.n	81f8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    81d0:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    81d2:	d08d      	beq.n	80f0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    81d4:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    81d8:	d08a      	beq.n	80f0 <memcpy+0xc>

	rsb	r3, #4
    81da:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    81de:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    81e0:	07db      	lsls	r3, r3, #31
	itt ne
    81e2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    81e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    81e8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    81ec:	d380      	bcc.n	80f0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    81ee:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    81f2:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    81f6:	e77b      	b.n	80f0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    81f8:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    81fa:	d3d9      	bcc.n	81b0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    81fc:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    81fe:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8202:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8206:	d2f9      	bcs.n	81fc <memcpy+0x118>

	ldrb	r3, [r1]
    8208:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    820a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    820c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    820e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8210:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8212:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8214:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8216:	4770      	bx	lr

00008218 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    8218:	f001 bd00 	b.w	9c1c <free>

0000821c <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    821c:	f101 3cff 	add.w	ip, r1, #4294967295
{
    8220:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    8222:	4666      	mov	r6, ip
	int i=0, j;
    8224:	2400      	movs	r4, #0
    8226:	e000      	b.n	822a <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    8228:	3401      	adds	r4, #1
		digit = val % radix;
    822a:	fbb0 f5f2 	udiv	r5, r0, r2
    822e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8232:	2b09      	cmp	r3, #9
    8234:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    8238:	f103 0330 	add.w	r3, r3, #48	; 0x30
    823c:	fa5f fe8e 	uxtb.w	lr, lr
    8240:	bf98      	it	ls
    8242:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    8246:	4290      	cmp	r0, r2
		val /= radix;
    8248:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    824a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    824e:	d2eb      	bcs.n	8228 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    8250:	1c63      	adds	r3, r4, #1
    8252:	2200      	movs	r2, #0
    8254:	18c8      	adds	r0, r1, r3
    8256:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    8258:	b17c      	cbz	r4, 827a <ultoa+0x5e>
		t = buf[j];
    825a:	4662      	mov	r2, ip
    825c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    8260:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    8264:	eba1 030c 	sub.w	r3, r1, ip
    8268:	3202      	adds	r2, #2
		buf[j] = buf[i];
    826a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    826e:	3b01      	subs	r3, #1
    8270:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    8272:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    8274:	4423      	add	r3, r4
    8276:	429a      	cmp	r2, r3
    8278:	dbef      	blt.n	825a <ultoa+0x3e>
	}
	return buf;
}
    827a:	4608      	mov	r0, r1
    827c:	bd70      	pop	{r4, r5, r6, pc}
    827e:	bf00      	nop

00008280 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    8280:	4a07      	ldr	r2, [pc, #28]	; (82a0 <rtc_get+0x20>)
    8282:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    8284:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    8286:	4619      	mov	r1, r3
    8288:	4684      	mov	ip, r0
    828a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    828c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    828e:	4299      	cmp	r1, r3
    8290:	d1f9      	bne.n	8286 <rtc_get+0x6>
    8292:	4584      	cmp	ip, r0
    8294:	d1f7      	bne.n	8286 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    8296:	0bdb      	lsrs	r3, r3, #15
}
    8298:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    829c:	4770      	bx	lr
    829e:	bf00      	nop
    82a0:	400d4000 	.word	0x400d4000

000082a4 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    82a4:	4910      	ldr	r1, [pc, #64]	; (82e8 <rtc_set+0x44>)
    82a6:	688b      	ldr	r3, [r1, #8]
    82a8:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    82ac:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    82ae:	688b      	ldr	r3, [r1, #8]
    82b0:	07db      	lsls	r3, r3, #31
    82b2:	d4fc      	bmi.n	82ae <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    82b4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    82b6:	4a0c      	ldr	r2, [pc, #48]	; (82e8 <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    82b8:	f023 0301 	bic.w	r3, r3, #1
    82bc:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    82be:	6b93      	ldr	r3, [r2, #56]	; 0x38
    82c0:	07d9      	lsls	r1, r3, #31
    82c2:	d4fc      	bmi.n	82be <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    82c4:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    82c6:	4908      	ldr	r1, [pc, #32]	; (82e8 <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    82c8:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    82ca:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    82cc:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    82ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
    82d0:	f043 0301 	orr.w	r3, r3, #1
    82d4:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    82d6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    82d8:	07db      	lsls	r3, r3, #31
    82da:	d5fc      	bpl.n	82d6 <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    82dc:	688b      	ldr	r3, [r1, #8]
    82de:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    82e2:	608b      	str	r3, [r1, #8]
}
    82e4:	4770      	bx	lr
    82e6:	bf00      	nop
    82e8:	400d4000 	.word	0x400d4000

000082ec <unused_interrupt_vector>:
	__disable_irq();
    82ec:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    82ee:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    82f2:	4c4f      	ldr	r4, [pc, #316]	; (8430 <unused_interrupt_vector+0x144>)
    82f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    82f8:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    82fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    8300:	4e4c      	ldr	r6, [pc, #304]	; (8434 <unused_interrupt_vector+0x148>)
	while (p < end) {
    8302:	4d4d      	ldr	r5, [pc, #308]	; (8438 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    8304:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    8308:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    830c:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    8310:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    8314:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    8318:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    831c:	6993      	ldr	r3, [r2, #24]
    831e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    8322:	69d3      	ldr	r3, [r2, #28]
    8324:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    8328:	f000 f8d0 	bl	84cc <tempmonGetTemp>
    832c:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    8330:	f7ff ffa6 	bl	8280 <rtc_get>
	info->len = sizeof(*info) / 4;
    8334:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    8336:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    833a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    833e:	460b      	mov	r3, r1
    8340:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8344:	493d      	ldr	r1, [pc, #244]	; (843c <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    8346:	1d30      	adds	r0, r6, #4
    8348:	405a      	eors	r2, r3
    834a:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    834c:	f002 0301 	and.w	r3, r2, #1
    8350:	3c01      	subs	r4, #1
    8352:	fb01 f303 	mul.w	r3, r1, r3
    8356:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    835a:	d1f7      	bne.n	834c <unused_interrupt_vector+0x60>
	while (p < end) {
    835c:	42a8      	cmp	r0, r5
    835e:	d002      	beq.n	8366 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    8360:	6873      	ldr	r3, [r6, #4]
    8362:	4606      	mov	r6, r0
    8364:	e7ef      	b.n	8346 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    8366:	4b32      	ldr	r3, [pc, #200]	; (8430 <unused_interrupt_vector+0x144>)
    8368:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    836c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8370:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8374:	492f      	ldr	r1, [pc, #188]	; (8434 <unused_interrupt_vector+0x148>)
    8376:	4a32      	ldr	r2, [pc, #200]	; (8440 <unused_interrupt_vector+0x154>)
    8378:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    837c:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    8380:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8384:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8388:	4a2e      	ldr	r2, [pc, #184]	; (8444 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    838a:	2502      	movs	r5, #2
    838c:	482e      	ldr	r0, [pc, #184]	; (8448 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    838e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8390:	492e      	ldr	r1, [pc, #184]	; (844c <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8392:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    8396:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    8398:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    839a:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    839c:	482c      	ldr	r0, [pc, #176]	; (8450 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    839e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    83a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    83a6:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    83a8:	680b      	ldr	r3, [r1, #0]
    83aa:	4283      	cmp	r3, r0
    83ac:	d83d      	bhi.n	842a <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    83ae:	4d26      	ldr	r5, [pc, #152]	; (8448 <unused_interrupt_vector+0x15c>)
    83b0:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    83b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    83b6:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    83ba:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    83bc:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    83be:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    83c2:	4924      	ldr	r1, [pc, #144]	; (8454 <unused_interrupt_vector+0x168>)
    83c4:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    83c8:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    83cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    83d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    83d4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    83d8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    83dc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    83e0:	e001      	b.n	83e6 <unused_interrupt_vector+0xfa>
		usb_isr();
    83e2:	f000 f965 	bl	86b0 <usb_isr>
		if (PIT_TFLG0) {
    83e6:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    83ea:	2b00      	cmp	r3, #0
    83ec:	d0f9      	beq.n	83e2 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    83ee:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    83f0:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    83f4:	2c4f      	cmp	r4, #79	; 0x4f
    83f6:	d9f4      	bls.n	83e2 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    83f8:	4b17      	ldr	r3, [pc, #92]	; (8458 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    83fa:	2002      	movs	r0, #2
    83fc:	4917      	ldr	r1, [pc, #92]	; (845c <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    83fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    8402:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8406:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8408:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    840c:	b93b      	cbnz	r3, 841e <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    840e:	4814      	ldr	r0, [pc, #80]	; (8460 <unused_interrupt_vector+0x174>)
    8410:	4914      	ldr	r1, [pc, #80]	; (8464 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8412:	4a0d      	ldr	r2, [pc, #52]	; (8448 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    8414:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8416:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    841a:	2b00      	cmp	r3, #0
    841c:	d0fa      	beq.n	8414 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    841e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8422:	4a11      	ldr	r2, [pc, #68]	; (8468 <unused_interrupt_vector+0x17c>)
    8424:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    8428:	e7fe      	b.n	8428 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    842a:	f7ff fbfb 	bl	7c24 <set_arm_clock>
    842e:	e7be      	b.n	83ae <unused_interrupt_vector+0xc2>
    8430:	2027ff00 	.word	0x2027ff00
    8434:	2027ff80 	.word	0x2027ff80
    8438:	2027ffa8 	.word	0x2027ffa8
    843c:	edb88320 	.word	0xedb88320
    8440:	2027ffa0 	.word	0x2027ffa0
    8444:	400fc000 	.word	0x400fc000
    8448:	40084000 	.word	0x40084000
    844c:	200085d0 	.word	0x200085d0
    8450:	0bcd3d80 	.word	0x0bcd3d80
    8454:	00249f00 	.word	0x00249f00
    8458:	400d9000 	.word	0x400d9000
    845c:	402e0000 	.word	0x402e0000
    8460:	400f8000 	.word	0x400f8000
    8464:	0bad00f1 	.word	0x0bad00f1
    8468:	05fa0004 	.word	0x05fa0004

0000846c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    846c:	490a      	ldr	r1, [pc, #40]	; (8498 <_sbrk+0x2c>)
    846e:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    8470:	b138      	cbz	r0, 8482 <_sbrk+0x16>
{
    8472:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    8474:	1813      	adds	r3, r2, r0
    8476:	4809      	ldr	r0, [pc, #36]	; (849c <_sbrk+0x30>)
    8478:	4283      	cmp	r3, r0
    847a:	d804      	bhi.n	8486 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    847c:	4610      	mov	r0, r2
                __brkval = prev + incr;
    847e:	600b      	str	r3, [r1, #0]
}
    8480:	bd08      	pop	{r3, pc}
    8482:	4610      	mov	r0, r2
    8484:	4770      	bx	lr
                        errno = ENOMEM;
    8486:	f003 fc2f 	bl	bce8 <__errno>
    848a:	230c      	movs	r3, #12
                        return (void *)-1;
    848c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    8490:	6003      	str	r3, [r0, #0]
}
    8492:	4610      	mov	r0, r2
    8494:	bd08      	pop	{r3, pc}
    8496:	bf00      	nop
    8498:	200085ec 	.word	0x200085ec
    849c:	20280000 	.word	0x20280000

000084a0 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    84a0:	2000      	movs	r0, #0
    84a2:	4770      	bx	lr

000084a4 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    84a4:	f04f 30ff 	mov.w	r0, #4294967295
    84a8:	4770      	bx	lr
    84aa:	bf00      	nop

000084ac <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    84ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    84b0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    84b2:	604b      	str	r3, [r1, #4]
}
    84b4:	4770      	bx	lr
    84b6:	bf00      	nop

000084b8 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    84b8:	2001      	movs	r0, #1
    84ba:	4770      	bx	lr

000084bc <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    84bc:	f04f 30ff 	mov.w	r0, #4294967295
    84c0:	4770      	bx	lr
    84c2:	bf00      	nop

000084c4 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    84c4:	bf30      	wfi
    84c6:	e7fd      	b.n	84c4 <abort>

000084c8 <Panic_Temp_isr>:
  unused_interrupt_vector();
    84c8:	f7ff bf10 	b.w	82ec <unused_interrupt_vector>

000084cc <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    84cc:	4a12      	ldr	r2, [pc, #72]	; (8518 <tempmonGetTemp+0x4c>)
    84ce:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    84d2:	075b      	lsls	r3, r3, #29
    84d4:	d5fb      	bpl.n	84ce <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    84d6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    84da:	4810      	ldr	r0, [pc, #64]	; (851c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    84dc:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    84e0:	490f      	ldr	r1, [pc, #60]	; (8520 <tempmonGetTemp+0x54>)
    84e2:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    84e6:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    84ea:	ed91 6a00 	vldr	s12, [r1]
    84ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    84f2:	4a0c      	ldr	r2, [pc, #48]	; (8524 <tempmonGetTemp+0x58>)
    84f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    84f8:	4b0b      	ldr	r3, [pc, #44]	; (8528 <tempmonGetTemp+0x5c>)
    84fa:	edd2 6a00 	vldr	s13, [r2]
    84fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8502:	ed93 7a00 	vldr	s14, [r3]
    8506:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    850a:	ee67 7a86 	vmul.f32	s15, s15, s12
    850e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    8512:	ee37 0a40 	vsub.f32	s0, s14, s0
    8516:	4770      	bx	lr
    8518:	400d8100 	.word	0x400d8100
    851c:	20028f8c 	.word	0x20028f8c
    8520:	20028f94 	.word	0x20028f94
    8524:	20028f98 	.word	0x20028f98
    8528:	20028f90 	.word	0x20028f90

0000852c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    852c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    852e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    8530:	b11b      	cbz	r3, 853a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    8532:	6853      	ldr	r3, [r2, #4]
    8534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8538:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    853a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    853c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    853e:	b33c      	cbz	r4, 8590 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8540:	4b1a      	ldr	r3, [pc, #104]	; (85ac <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    8542:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8544:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8548:	420c      	tst	r4, r1
    854a:	d11d      	bne.n	8588 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    854c:	4e18      	ldr	r6, [pc, #96]	; (85b0 <schedule_transfer+0x84>)
    854e:	6877      	ldr	r7, [r6, #4]
    8550:	e004      	b.n	855c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8552:	6874      	ldr	r4, [r6, #4]
    8554:	1be4      	subs	r4, r4, r7
    8556:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    855a:	d20b      	bcs.n	8574 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    855c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8560:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    8564:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8568:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    856c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8570:	0464      	lsls	r4, r4, #17
    8572:	d5ee      	bpl.n	8552 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8574:	400d      	ands	r5, r1
    8576:	d107      	bne.n	8588 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    8578:	4c0c      	ldr	r4, [pc, #48]	; (85ac <schedule_transfer+0x80>)
		endpoint->status = 0;
    857a:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    857e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8582:	430b      	orrs	r3, r1
    8584:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    8588:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    858a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    858c:	bcf0      	pop	{r4, r5, r6, r7}
    858e:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    8590:	4d06      	ldr	r5, [pc, #24]	; (85ac <schedule_transfer+0x80>)
	endpoint->status = 0;
    8592:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    8596:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    859a:	430b      	orrs	r3, r1
    859c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    85a0:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    85a2:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    85a4:	b662      	cpsie	i
}
    85a6:	bcf0      	pop	{r4, r5, r6, r7}
    85a8:	4770      	bx	lr
    85aa:	bf00      	nop
    85ac:	402e0000 	.word	0x402e0000
    85b0:	e0001000 	.word	0xe0001000

000085b4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    85b4:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    85b6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    85b8:	b19d      	cbz	r5, 85e2 <run_callbacks+0x2e>
    85ba:	4606      	mov	r6, r0
    85bc:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    85be:	2400      	movs	r4, #0
    85c0:	e003      	b.n	85ca <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    85c2:	6812      	ldr	r2, [r2, #0]
		count++;
    85c4:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    85c6:	2a01      	cmp	r2, #1
    85c8:	d00c      	beq.n	85e4 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    85ca:	6853      	ldr	r3, [r2, #4]
    85cc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    85d0:	d0f7      	beq.n	85c2 <run_callbacks+0xe>
			ep->first_transfer = t;
    85d2:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    85d4:	b12c      	cbz	r4, 85e2 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    85d6:	4628      	mov	r0, r5
		ep->callback_function(first);
    85d8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    85da:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    85dc:	4798      	blx	r3
	while (count) {
    85de:	3c01      	subs	r4, #1
    85e0:	d1f9      	bne.n	85d6 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    85e2:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    85e4:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    85e8:	e7f4      	b.n	85d4 <run_callbacks+0x20>
    85ea:	bf00      	nop

000085ec <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    85ec:	b430      	push	{r4, r5}
	if (len > 0) {
    85ee:	b9d9      	cbnz	r1, 8628 <endpoint0_transmit.constprop.0+0x3c>
    85f0:	4c1f      	ldr	r4, [pc, #124]	; (8670 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    85f2:	4b20      	ldr	r3, [pc, #128]	; (8674 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    85f4:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    85f6:	4a20      	ldr	r2, [pc, #128]	; (8678 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    85f8:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    85fa:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    85fe:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8600:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    8602:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8606:	2480      	movs	r4, #128	; 0x80
    8608:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    860a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    860e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8612:	481a      	ldr	r0, [pc, #104]	; (867c <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    8614:	432b      	orrs	r3, r5
    8616:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    861a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    861c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8620:	2b00      	cmp	r3, #0
    8622:	d1fb      	bne.n	861c <endpoint0_transmit.constprop.0+0x30>
}
    8624:	bc30      	pop	{r4, r5}
    8626:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8628:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    862a:	4b15      	ldr	r3, [pc, #84]	; (8680 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    862c:	4c10      	ldr	r4, [pc, #64]	; (8670 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    862e:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8630:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8634:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    8636:	4a10      	ldr	r2, [pc, #64]	; (8678 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8638:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    863a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    863e:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8640:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8642:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8646:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8648:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    864a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    864e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8652:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    8654:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8656:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    8658:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    865a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    865e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8662:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8666:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    866a:	2b00      	cmp	r3, #0
    866c:	d1fb      	bne.n	8666 <endpoint0_transmit.constprop.0+0x7a>
    866e:	e7c0      	b.n	85f2 <endpoint0_transmit.constprop.0+0x6>
    8670:	20000000 	.word	0x20000000
    8674:	20008ec0 	.word	0x20008ec0
    8678:	402e0000 	.word	0x402e0000
    867c:	20028e34 	.word	0x20028e34
    8680:	20008ee0 	.word	0x20008ee0

00008684 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    8684:	4908      	ldr	r1, [pc, #32]	; (86a8 <usb_stop_sof_interrupts+0x24>)
    8686:	2201      	movs	r2, #1
    8688:	780b      	ldrb	r3, [r1, #0]
    868a:	fa02 f000 	lsl.w	r0, r2, r0
    868e:	ea23 0000 	bic.w	r0, r3, r0
    8692:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    8694:	b930      	cbnz	r0, 86a4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    8696:	4a05      	ldr	r2, [pc, #20]	; (86ac <usb_stop_sof_interrupts+0x28>)
    8698:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    869c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    86a0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    86a4:	4770      	bx	lr
    86a6:	bf00      	nop
    86a8:	200294a6 	.word	0x200294a6
    86ac:	402e0000 	.word	0x402e0000

000086b0 <usb_isr>:
{
    86b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    86b4:	4c97      	ldr	r4, [pc, #604]	; (8914 <usb_isr+0x264>)
{
    86b6:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    86b8:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    86bc:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    86be:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    86c2:	d553      	bpl.n	876c <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    86c4:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    86c8:	2a00      	cmp	r2, #0
    86ca:	d04a      	beq.n	8762 <usb_isr+0xb2>
    86cc:	4e92      	ldr	r6, [pc, #584]	; (8918 <usb_isr+0x268>)
    86ce:	f8df a260 	ldr.w	sl, [pc, #608]	; 8930 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    86d2:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8948 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    86d6:	f8df b274 	ldr.w	fp, [pc, #628]	; 894c <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    86da:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8950 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    86de:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    86e2:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    86e6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    86ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    86ee:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    86f2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    86f6:	049d      	lsls	r5, r3, #18
    86f8:	d5f5      	bpl.n	86e6 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    86fa:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    86fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    8702:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8706:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    870a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    870e:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    8712:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    8716:	d1fa      	bne.n	870e <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    8718:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    871a:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    871c:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    8720:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    8724:	f000 81cf 	beq.w	8ac6 <usb_isr+0x416>
    8728:	f200 80db 	bhi.w	88e2 <usb_isr+0x232>
    872c:	f240 3102 	movw	r1, #770	; 0x302
    8730:	428b      	cmp	r3, r1
    8732:	f000 81e7 	beq.w	8b04 <usb_isr+0x454>
    8736:	f200 809a 	bhi.w	886e <usb_isr+0x1be>
    873a:	2b82      	cmp	r3, #130	; 0x82
    873c:	f000 81cb 	beq.w	8ad6 <usb_isr+0x426>
    8740:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    8744:	f040 808a 	bne.w	885c <usb_isr+0x1ac>
		if (endpoint > 7) break;
    8748:	f010 0f78 	tst.w	r0, #120	; 0x78
    874c:	b283      	uxth	r3, r0
    874e:	f000 8203 	beq.w	8b58 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8752:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8756:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    875a:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    875e:	2a00      	cmp	r2, #0
    8760:	d1bd      	bne.n	86de <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    8762:	4a6c      	ldr	r2, [pc, #432]	; (8914 <usb_isr+0x264>)
    8764:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    8768:	2b00      	cmp	r3, #0
    876a:	d142      	bne.n	87f2 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    876c:	067e      	lsls	r6, r7, #25
    876e:	d516      	bpl.n	879e <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8770:	4b68      	ldr	r3, [pc, #416]	; (8914 <usb_isr+0x264>)
    8772:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    8776:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    877a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    877e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8782:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8786:	2c00      	cmp	r4, #0
    8788:	d1fb      	bne.n	8782 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    878a:	f04f 32ff 	mov.w	r2, #4294967295
    878e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    8792:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    8796:	f000 fd29 	bl	91ec <usb_serial_reset>
		endpointN_notify_mask = 0;
    879a:	4b60      	ldr	r3, [pc, #384]	; (891c <usb_isr+0x26c>)
    879c:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    879e:	01fc      	lsls	r4, r7, #7
    87a0:	d503      	bpl.n	87aa <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    87a2:	4b5f      	ldr	r3, [pc, #380]	; (8920 <usb_isr+0x270>)
    87a4:	681b      	ldr	r3, [r3, #0]
    87a6:	b103      	cbz	r3, 87aa <usb_isr+0xfa>
    87a8:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    87aa:	01b8      	lsls	r0, r7, #6
    87ac:	d503      	bpl.n	87b6 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    87ae:	4b5d      	ldr	r3, [pc, #372]	; (8924 <usb_isr+0x274>)
    87b0:	681b      	ldr	r3, [r3, #0]
    87b2:	b103      	cbz	r3, 87b6 <usb_isr+0x106>
    87b4:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    87b6:	0779      	lsls	r1, r7, #29
    87b8:	d508      	bpl.n	87cc <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    87ba:	4b56      	ldr	r3, [pc, #344]	; (8914 <usb_isr+0x264>)
    87bc:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    87c0:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    87c4:	d047      	beq.n	8856 <usb_isr+0x1a6>
			usb_high_speed = 1;
    87c6:	4b58      	ldr	r3, [pc, #352]	; (8928 <usb_isr+0x278>)
    87c8:	2201      	movs	r2, #1
    87ca:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    87cc:	4b51      	ldr	r3, [pc, #324]	; (8914 <usb_isr+0x264>)
    87ce:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    87d2:	061a      	lsls	r2, r3, #24
    87d4:	d50a      	bpl.n	87ec <usb_isr+0x13c>
    87d6:	063b      	lsls	r3, r7, #24
    87d8:	d508      	bpl.n	87ec <usb_isr+0x13c>
		if (usb_reboot_timer) {
    87da:	4a54      	ldr	r2, [pc, #336]	; (892c <usb_isr+0x27c>)
    87dc:	7813      	ldrb	r3, [r2, #0]
    87de:	b12b      	cbz	r3, 87ec <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    87e0:	3b01      	subs	r3, #1
    87e2:	b2db      	uxtb	r3, r3
    87e4:	7013      	strb	r3, [r2, #0]
    87e6:	2b00      	cmp	r3, #0
    87e8:	f000 8272 	beq.w	8cd0 <usb_isr+0x620>
}
    87ec:	b003      	add	sp, #12
    87ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    87f2:	494f      	ldr	r1, [pc, #316]	; (8930 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    87f4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    87f8:	6808      	ldr	r0, [r1, #0]
    87fa:	4203      	tst	r3, r0
    87fc:	f040 81d1 	bne.w	8ba2 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    8800:	4a46      	ldr	r2, [pc, #280]	; (891c <usb_isr+0x26c>)
    8802:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    8804:	401c      	ands	r4, r3
    8806:	d0b1      	beq.n	876c <usb_isr+0xbc>
				while (tx) {
    8808:	ea5f 4814 	movs.w	r8, r4, lsr #16
    880c:	d010      	beq.n	8830 <usb_isr+0x180>
    880e:	4e42      	ldr	r6, [pc, #264]	; (8918 <usb_isr+0x268>)
					tx &= ~(1<<p);
    8810:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    8814:	fa98 f5a8 	rbit	r5, r8
    8818:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    881c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    8820:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8824:	3040      	adds	r0, #64	; 0x40
    8826:	f7ff fec5 	bl	85b4 <run_callbacks>
				while (tx) {
    882a:	ea38 0805 	bics.w	r8, r8, r5
    882e:	d1f1      	bne.n	8814 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    8830:	b2a4      	uxth	r4, r4
				while(rx) {
    8832:	2c00      	cmp	r4, #0
    8834:	d09a      	beq.n	876c <usb_isr+0xbc>
    8836:	4e38      	ldr	r6, [pc, #224]	; (8918 <usb_isr+0x268>)
					rx &= ~(1<<p);
    8838:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    883c:	fa94 f5a4 	rbit	r5, r4
    8840:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    8844:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    8848:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    884c:	f7ff feb2 	bl	85b4 <run_callbacks>
				while(rx) {
    8850:	43ac      	bics	r4, r5
    8852:	d1f3      	bne.n	883c <usb_isr+0x18c>
    8854:	e78a      	b.n	876c <usb_isr+0xbc>
			usb_high_speed = 0;
    8856:	4a34      	ldr	r2, [pc, #208]	; (8928 <usb_isr+0x278>)
    8858:	7013      	strb	r3, [r2, #0]
    885a:	e7b7      	b.n	87cc <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    885c:	2b80      	cmp	r3, #128	; 0x80
    885e:	f47f af78 	bne.w	8752 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    8862:	4834      	ldr	r0, [pc, #208]	; (8934 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    8864:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    8866:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8868:	f7ff fec0 	bl	85ec <endpoint0_transmit.constprop.0>
		return;
    886c:	e775      	b.n	875a <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    886e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    8872:	f000 810b 	beq.w	8a8c <usb_isr+0x3dc>
    8876:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    887a:	2b01      	cmp	r3, #1
    887c:	f63f af69 	bhi.w	8752 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8880:	4b2d      	ldr	r3, [pc, #180]	; (8938 <usb_isr+0x288>)
    8882:	685d      	ldr	r5, [r3, #4]
    8884:	2d00      	cmp	r5, #0
    8886:	f43f af64 	beq.w	8752 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    888a:	fa1f fc8c 	uxth.w	ip, ip
    888e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8892:	e004      	b.n	889e <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8894:	691d      	ldr	r5, [r3, #16]
    8896:	330c      	adds	r3, #12
    8898:	2d00      	cmp	r5, #0
    889a:	f43f af5a 	beq.w	8752 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    889e:	881a      	ldrh	r2, [r3, #0]
    88a0:	4572      	cmp	r2, lr
    88a2:	d1f7      	bne.n	8894 <usb_isr+0x1e4>
    88a4:	885a      	ldrh	r2, [r3, #2]
    88a6:	4562      	cmp	r2, ip
    88a8:	d1f4      	bne.n	8894 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    88aa:	ea4f 221e 	mov.w	r2, lr, lsr #8
    88ae:	2a03      	cmp	r2, #3
    88b0:	f000 81a5 	beq.w	8bfe <usb_isr+0x54e>
					datalen = list->length;
    88b4:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    88b6:	0c00      	lsrs	r0, r0, #16
    88b8:	4282      	cmp	r2, r0
    88ba:	bf28      	it	cs
    88bc:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    88be:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    88c2:	f040 81a1 	bne.w	8c08 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    88c6:	4b18      	ldr	r3, [pc, #96]	; (8928 <usb_isr+0x278>)
    88c8:	491c      	ldr	r1, [pc, #112]	; (893c <usb_isr+0x28c>)
    88ca:	7818      	ldrb	r0, [r3, #0]
    88cc:	4b1c      	ldr	r3, [pc, #112]	; (8940 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    88ce:	9201      	str	r2, [sp, #4]
    88d0:	2800      	cmp	r0, #0
    88d2:	bf18      	it	ne
    88d4:	4619      	movne	r1, r3
    88d6:	481b      	ldr	r0, [pc, #108]	; (8944 <usb_isr+0x294>)
    88d8:	f7ff fc04 	bl	80e4 <memcpy>
    88dc:	4d19      	ldr	r5, [pc, #100]	; (8944 <usb_isr+0x294>)
    88de:	9a01      	ldr	r2, [sp, #4]
    88e0:	e1e1      	b.n	8ca6 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    88e2:	f242 2121 	movw	r1, #8737	; 0x2221
    88e6:	428b      	cmp	r3, r1
    88e8:	d07c      	beq.n	89e4 <usb_isr+0x334>
    88ea:	d933      	bls.n	8954 <usb_isr+0x2a4>
    88ec:	f242 3121 	movw	r1, #8993	; 0x2321
    88f0:	428b      	cmp	r3, r1
    88f2:	f000 8081 	beq.w	89f8 <usb_isr+0x348>
    88f6:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    88fa:	428b      	cmp	r3, r1
    88fc:	f47f af29 	bne.w	8752 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    8900:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    8904:	b283      	uxth	r3, r0
    8906:	f47f af24 	bne.w	8752 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    890a:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    890e:	f363 0c0f 	bfi	ip, r3, #0, #16
    8912:	e7b5      	b.n	8880 <usb_isr+0x1d0>
    8914:	402e0000 	.word	0x402e0000
    8918:	20000000 	.word	0x20000000
    891c:	20028e38 	.word	0x20028e38
    8920:	20029480 	.word	0x20029480
    8924:	20029484 	.word	0x20029484
    8928:	200294ac 	.word	0x200294ac
    892c:	200294ad 	.word	0x200294ad
    8930:	20028e34 	.word	0x20028e34
    8934:	20028f54 	.word	0x20028f54
    8938:	20008404 	.word	0x20008404
    893c:	6000279c 	.word	0x6000279c
    8940:	60002800 	.word	0x60002800
    8944:	20200800 	.word	0x20200800
    8948:	20028e2c 	.word	0x20028e2c
    894c:	b8c6cf5d 	.word	0xb8c6cf5d
    8950:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    8954:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8958:	d066      	beq.n	8a28 <usb_isr+0x378>
    895a:	f242 0121 	movw	r1, #8225	; 0x2021
    895e:	428b      	cmp	r3, r1
    8960:	f47f aef7 	bne.w	8752 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    8964:	0c03      	lsrs	r3, r0, #16
    8966:	2b07      	cmp	r3, #7
    8968:	f47f aef3 	bne.w	8752 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    896c:	4bb2      	ldr	r3, [pc, #712]	; (8c38 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    896e:	49b3      	ldr	r1, [pc, #716]	; (8c3c <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    8970:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8972:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    8974:	49b2      	ldr	r1, [pc, #712]	; (8c40 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    8976:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8978:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    897c:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    8980:	2201      	movs	r2, #1
    8982:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8984:	4aaf      	ldr	r2, [pc, #700]	; (8c44 <usb_isr+0x594>)
    8986:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8988:	4aaf      	ldr	r2, [pc, #700]	; (8c48 <usb_isr+0x598>)
    898a:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    898c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    8990:	f041 0101 	orr.w	r1, r1, #1
    8994:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8998:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    899c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    89a0:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    89a2:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    89a4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    89a8:	2b00      	cmp	r3, #0
    89aa:	d1fb      	bne.n	89a4 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    89ac:	4aa7      	ldr	r2, [pc, #668]	; (8c4c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    89ae:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    89b0:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    89b2:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    89b4:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    89b6:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    89b8:	f248 0380 	movw	r3, #32896	; 0x8080
    89bc:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    89be:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    89c2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    89c6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    89ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    89ce:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    89d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    89d6:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    89da:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    89de:	2b00      	cmp	r3, #0
    89e0:	d1fb      	bne.n	89da <usb_isr+0x32a>
    89e2:	e6ba      	b.n	875a <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    89e4:	b280      	uxth	r0, r0
    89e6:	b938      	cbnz	r0, 89f8 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    89e8:	4b99      	ldr	r3, [pc, #612]	; (8c50 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    89ea:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    89ee:	6819      	ldr	r1, [r3, #0]
    89f0:	4b98      	ldr	r3, [pc, #608]	; (8c54 <usb_isr+0x5a4>)
    89f2:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    89f4:	4b98      	ldr	r3, [pc, #608]	; (8c58 <usb_isr+0x5a8>)
    89f6:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    89f8:	4b94      	ldr	r3, [pc, #592]	; (8c4c <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    89fa:	2200      	movs	r2, #0
    89fc:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    89fe:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    8a00:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8a02:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8a04:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a06:	2280      	movs	r2, #128	; 0x80
    8a08:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a0a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8a0e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8a12:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8a1a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8a1e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a22:	2b00      	cmp	r3, #0
    8a24:	d1fb      	bne.n	8a1e <usb_isr+0x36e>
    8a26:	e698      	b.n	875a <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    8a28:	f3c2 4207 	ubfx	r2, r2, #16, #8
    8a2c:	4b8b      	ldr	r3, [pc, #556]	; (8c5c <usb_isr+0x5ac>)
    8a2e:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8a30:	4b8b      	ldr	r3, [pc, #556]	; (8c60 <usb_isr+0x5b0>)
    8a32:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8a36:	4b8b      	ldr	r3, [pc, #556]	; (8c64 <usb_isr+0x5b4>)
    8a38:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    8a3c:	4b8a      	ldr	r3, [pc, #552]	; (8c68 <usb_isr+0x5b8>)
    8a3e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    8a42:	f000 fbd5 	bl	91f0 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    8a46:	2280      	movs	r2, #128	; 0x80
    8a48:	4629      	mov	r1, r5
    8a4a:	4888      	ldr	r0, [pc, #544]	; (8c6c <usb_isr+0x5bc>)
    8a4c:	f003 f816 	bl	ba7c <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    8a50:	4b87      	ldr	r3, [pc, #540]	; (8c70 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a52:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    8a54:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    8a58:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    8a5c:	4b7b      	ldr	r3, [pc, #492]	; (8c4c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    8a5e:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a60:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    8a62:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8a64:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    8a66:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8a68:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a6a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8a6e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8a72:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8a7a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8a7e:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    8a82:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a86:	2b00      	cmp	r3, #0
    8a88:	d1fb      	bne.n	8a82 <usb_isr+0x3d2>
    8a8a:	e666      	b.n	875a <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    8a8c:	4b6f      	ldr	r3, [pc, #444]	; (8c4c <usb_isr+0x59c>)
    8a8e:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    8a90:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    8a92:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a94:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    8a96:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8a98:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a9a:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a9c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8aa0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8aa4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8aac:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8ab0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	d1fb      	bne.n	8ab0 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8ab8:	0c13      	lsrs	r3, r2, #16
    8aba:	065b      	lsls	r3, r3, #25
    8abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8ac0:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    8ac4:	e649      	b.n	875a <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    8ac6:	4b65      	ldr	r3, [pc, #404]	; (8c5c <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    8ac8:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    8aca:	486a      	ldr	r0, [pc, #424]	; (8c74 <usb_isr+0x5c4>)
    8acc:	781b      	ldrb	r3, [r3, #0]
    8ace:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    8ad0:	f7ff fd8c 	bl	85ec <endpoint0_transmit.constprop.0>
		return;
    8ad4:	e641      	b.n	875a <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    8ad6:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    8ad8:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    8adc:	f47f ae39 	bne.w	8752 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    8ae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8ae4:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    8ae8:	4a62      	ldr	r2, [pc, #392]	; (8c74 <usb_isr+0x5c4>)
    8aea:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8aec:	0618      	lsls	r0, r3, #24
    8aee:	f100 809e 	bmi.w	8c2e <usb_isr+0x57e>
    8af2:	07cb      	lsls	r3, r1, #31
    8af4:	d501      	bpl.n	8afa <usb_isr+0x44a>
			reply_buffer[0] = 1;
    8af6:	2301      	movs	r3, #1
    8af8:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8afa:	2102      	movs	r1, #2
    8afc:	485d      	ldr	r0, [pc, #372]	; (8c74 <usb_isr+0x5c4>)
    8afe:	f7ff fd75 	bl	85ec <endpoint0_transmit.constprop.0>
		return;
    8b02:	e62a      	b.n	875a <usb_isr+0xaa>
		if (endpoint > 7) break;
    8b04:	f010 0f78 	tst.w	r0, #120	; 0x78
    8b08:	b283      	uxth	r3, r0
    8b0a:	f47f ae22 	bne.w	8752 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    8b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8b12:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8b16:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8b1a:	bf14      	ite	ne
    8b1c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8b20:	f043 0301 	orreq.w	r3, r3, #1
    8b24:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8b28:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8b2a:	4b48      	ldr	r3, [pc, #288]	; (8c4c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    8b2c:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8b2e:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8b30:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8b32:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8b34:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8b36:	2280      	movs	r2, #128	; 0x80
    8b38:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8b3a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8b3e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8b42:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8b4a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8b4e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8b52:	2b00      	cmp	r3, #0
    8b54:	d1fb      	bne.n	8b4e <usb_isr+0x49e>
    8b56:	e600      	b.n	875a <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    8b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8b5c:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8b60:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8b64:	bf14      	ite	ne
    8b66:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    8b6a:	f023 0301 	biceq.w	r3, r3, #1
    8b6e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8b72:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8b74:	4b35      	ldr	r3, [pc, #212]	; (8c4c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    8b76:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8b78:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8b7a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8b7c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8b7e:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8b80:	2280      	movs	r2, #128	; 0x80
    8b82:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8b84:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8b88:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8b8c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8b94:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8b98:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	d1fb      	bne.n	8b98 <usb_isr+0x4e8>
    8ba0:	e5db      	b.n	875a <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    8ba2:	2000      	movs	r0, #0
    8ba4:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    8ba6:	4926      	ldr	r1, [pc, #152]	; (8c40 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8ba8:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    8baa:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8bac:	f242 0121 	movw	r1, #8225	; 0x2021
    8bb0:	428c      	cmp	r4, r1
    8bb2:	f47f ae25 	bne.w	8800 <usb_isr+0x150>
    8bb6:	b280      	uxth	r0, r0
    8bb8:	2800      	cmp	r0, #0
    8bba:	f47f ae21 	bne.w	8800 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8bbe:	492e      	ldr	r1, [pc, #184]	; (8c78 <usb_isr+0x5c8>)
    8bc0:	4c2e      	ldr	r4, [pc, #184]	; (8c7c <usb_isr+0x5cc>)
    8bc2:	c903      	ldmia	r1, {r0, r1}
    8bc4:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    8bc6:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8bc8:	ea4f 4111 	mov.w	r1, r1, lsr #16
    8bcc:	6020      	str	r0, [r4, #0]
    8bce:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    8bd0:	f47f ae16 	bne.w	8800 <usb_isr+0x150>
	__disable_irq();
    8bd4:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    8bd6:	482a      	ldr	r0, [pc, #168]	; (8c80 <usb_isr+0x5d0>)
    8bd8:	7801      	ldrb	r1, [r0, #0]
    8bda:	f041 0108 	orr.w	r1, r1, #8
    8bde:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    8be0:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    8be4:	060d      	lsls	r5, r1, #24
    8be6:	d405      	bmi.n	8bf4 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8be8:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8bea:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8bec:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8bf0:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    8bf4:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    8bf6:	4a23      	ldr	r2, [pc, #140]	; (8c84 <usb_isr+0x5d4>)
    8bf8:	2150      	movs	r1, #80	; 0x50
    8bfa:	7011      	strb	r1, [r2, #0]
    8bfc:	e600      	b.n	8800 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    8bfe:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    8c00:	782a      	ldrb	r2, [r5, #0]
    8c02:	4282      	cmp	r2, r0
    8c04:	bf28      	it	cs
    8c06:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    8c08:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    8c0c:	d144      	bne.n	8c98 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    8c0e:	4b1e      	ldr	r3, [pc, #120]	; (8c88 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8c10:	4d1e      	ldr	r5, [pc, #120]	; (8c8c <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    8c12:	7818      	ldrb	r0, [r3, #0]
    8c14:	491e      	ldr	r1, [pc, #120]	; (8c90 <usb_isr+0x5e0>)
    8c16:	4b1f      	ldr	r3, [pc, #124]	; (8c94 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8c18:	9201      	str	r2, [sp, #4]
    8c1a:	2800      	cmp	r0, #0
    8c1c:	bf18      	it	ne
    8c1e:	4619      	movne	r1, r3
    8c20:	4628      	mov	r0, r5
    8c22:	f7ff fa5f 	bl	80e4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    8c26:	2307      	movs	r3, #7
    8c28:	706b      	strb	r3, [r5, #1]
    8c2a:	9a01      	ldr	r2, [sp, #4]
    8c2c:	e03b      	b.n	8ca6 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8c2e:	03c9      	lsls	r1, r1, #15
    8c30:	f53f af61 	bmi.w	8af6 <usb_isr+0x446>
    8c34:	e761      	b.n	8afa <usb_isr+0x44a>
    8c36:	bf00      	nop
    8c38:	20008ee0 	.word	0x20008ee0
    8c3c:	20029e2c 	.word	0x20029e2c
    8c40:	2000c080 	.word	0x2000c080
    8c44:	00070080 	.word	0x00070080
    8c48:	2002ae2c 	.word	0x2002ae2c
    8c4c:	20008ec0 	.word	0x20008ec0
    8c50:	2002945c 	.word	0x2002945c
    8c54:	2002947c 	.word	0x2002947c
    8c58:	200294aa 	.word	0x200294aa
    8c5c:	200294ab 	.word	0x200294ab
    8c60:	00cc0002 	.word	0x00cc0002
    8c64:	000200c8 	.word	0x000200c8
    8c68:	00c80002 	.word	0x00c80002
    8c6c:	20000080 	.word	0x20000080
    8c70:	74d59319 	.word	0x74d59319
    8c74:	20028f54 	.word	0x20028f54
    8c78:	20028e2c 	.word	0x20028e2c
    8c7c:	20029474 	.word	0x20029474
    8c80:	200294a6 	.word	0x200294a6
    8c84:	200294ad 	.word	0x200294ad
    8c88:	200294ac 	.word	0x200294ac
    8c8c:	20200800 	.word	0x20200800
    8c90:	60002800 	.word	0x60002800
    8c94:	6000279c 	.word	0x6000279c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    8c98:	4629      	mov	r1, r5
    8c9a:	4d10      	ldr	r5, [pc, #64]	; (8cdc <usb_isr+0x62c>)
    8c9c:	9201      	str	r2, [sp, #4]
    8c9e:	4628      	mov	r0, r5
    8ca0:	f7ff fa20 	bl	80e4 <memcpy>
    8ca4:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8ca6:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8caa:	4415      	add	r5, r2
	asm("dsb");
    8cac:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8cb0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8cb4:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    8cb8:	3320      	adds	r3, #32
	} while (location < end_addr);
    8cba:	429d      	cmp	r5, r3
    8cbc:	d8fa      	bhi.n	8cb4 <usb_isr+0x604>
	asm("dsb");
    8cbe:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8cc2:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    8cc6:	4805      	ldr	r0, [pc, #20]	; (8cdc <usb_isr+0x62c>)
    8cc8:	4611      	mov	r1, r2
    8cca:	f7ff fc8f 	bl	85ec <endpoint0_transmit.constprop.0>
				return;
    8cce:	e544      	b.n	875a <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    8cd0:	2003      	movs	r0, #3
    8cd2:	f7ff fcd7 	bl	8684 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    8cd6:	f00b fc5b 	bl	14590 <___reboot_Teensyduino__veneer>
    8cda:	bf00      	nop
    8cdc:	20200800 	.word	0x20200800

00008ce0 <usb_config_rx>:
{
    8ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ce4:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8ce6:	1e83      	subs	r3, r0, #2
    8ce8:	2b02      	cmp	r3, #2
    8cea:	d901      	bls.n	8cf0 <usb_config_rx+0x10>
}
    8cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8cf0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8d40 <usb_config_rx+0x60>
    8cf4:	4615      	mov	r5, r2
    8cf6:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    8cf8:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8cfa:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    8cfe:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8d00:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    8d04:	2100      	movs	r1, #0
    8d06:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8d0a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    8d0c:	f002 feb6 	bl	ba7c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8d10:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    8d14:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8d16:	0952      	lsrs	r2, r2, #5
    8d18:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    8d1c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    8d20:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8d24:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    8d28:	2f00      	cmp	r7, #0
    8d2a:	d0df      	beq.n	8cec <usb_config_rx+0xc>
    8d2c:	4a03      	ldr	r2, [pc, #12]	; (8d3c <usb_config_rx+0x5c>)
    8d2e:	40b3      	lsls	r3, r6
    8d30:	6811      	ldr	r1, [r2, #0]
    8d32:	430b      	orrs	r3, r1
    8d34:	6013      	str	r3, [r2, #0]
}
    8d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d3a:	bf00      	nop
    8d3c:	20028e38 	.word	0x20028e38
    8d40:	20000000 	.word	0x20000000

00008d44 <usb_config_tx>:
{
    8d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8d48:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8d4a:	1e81      	subs	r1, r0, #2
    8d4c:	2902      	cmp	r1, #2
    8d4e:	d901      	bls.n	8d54 <usb_config_tx+0x10>
}
    8d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8d54:	01c7      	lsls	r7, r0, #7
    8d56:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8da4 <usb_config_tx+0x60>
    8d5a:	4692      	mov	sl, r2
    8d5c:	4604      	mov	r4, r0
    8d5e:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    8d60:	223c      	movs	r2, #60	; 0x3c
    8d62:	2100      	movs	r1, #0
    8d64:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8d66:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8d6a:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    8d6c:	f108 0004 	add.w	r0, r8, #4
    8d70:	f002 fe84 	bl	ba7c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8d74:	faba f28a 	clz	r2, sl
    8d78:	0952      	lsrs	r2, r2, #5
    8d7a:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    8d7e:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    8d82:	2201      	movs	r2, #1
	qh->callback_function = callback;
    8d84:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8d88:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    8d8c:	2e00      	cmp	r6, #0
    8d8e:	d0df      	beq.n	8d50 <usb_config_tx+0xc>
    8d90:	4b03      	ldr	r3, [pc, #12]	; (8da0 <usb_config_tx+0x5c>)
    8d92:	3410      	adds	r4, #16
    8d94:	6819      	ldr	r1, [r3, #0]
    8d96:	40a2      	lsls	r2, r4
    8d98:	430a      	orrs	r2, r1
    8d9a:	601a      	str	r2, [r3, #0]
}
    8d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8da0:	20028e38 	.word	0x20028e38
    8da4:	20000000 	.word	0x20000000

00008da8 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    8da8:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    8daa:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    8dac:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    8dae:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    8db2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    8db6:	b410      	push	{r4}
	transfer->next = 1;
    8db8:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    8dba:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    8dbc:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    8dc0:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    8dc2:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    8dc6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    8dca:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    8dcc:	6181      	str	r1, [r0, #24]
}
    8dce:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    8dd2:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    8dd6:	4770      	bx	lr

00008dd8 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8dd8:	1e83      	subs	r3, r0, #2
{
    8dda:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8ddc:	2b02      	cmp	r3, #2
    8dde:	d900      	bls.n	8de2 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    8de0:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8de2:	4b06      	ldr	r3, [pc, #24]	; (8dfc <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    8de4:	f100 0110 	add.w	r1, r0, #16
    8de8:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8dec:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    8df0:	fa0c f101 	lsl.w	r1, ip, r1
    8df4:	3040      	adds	r0, #64	; 0x40
    8df6:	f7ff bb99 	b.w	852c <schedule_transfer>
    8dfa:	bf00      	nop
    8dfc:	20000000 	.word	0x20000000

00008e00 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8e00:	1e83      	subs	r3, r0, #2
{
    8e02:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8e04:	2b02      	cmp	r3, #2
    8e06:	d900      	bls.n	8e0a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    8e08:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    8e0a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    8e0c:	4b02      	ldr	r3, [pc, #8]	; (8e18 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    8e0e:	4081      	lsls	r1, r0
    8e10:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    8e14:	f7ff bb8a 	b.w	852c <schedule_transfer>
    8e18:	20000000 	.word	0x20000000

00008e1c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    8e1c:	6840      	ldr	r0, [r0, #4]
#endif
}
    8e1e:	4770      	bx	lr

00008e20 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8e20:	4a12      	ldr	r2, [pc, #72]	; (8e6c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    8e22:	4b13      	ldr	r3, [pc, #76]	; (8e70 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8e24:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    8e28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    8e2c:	4298      	cmp	r0, r3
{
    8e2e:	b510      	push	{r4, lr}
    8e30:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    8e32:	d202      	bcs.n	8e3a <usb_init_serialnumber+0x1a>
    8e34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8e38:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    8e3a:	4c0e      	ldr	r4, [pc, #56]	; (8e74 <usb_init_serialnumber+0x54>)
    8e3c:	a901      	add	r1, sp, #4
    8e3e:	220a      	movs	r2, #10
    8e40:	f7ff f9ec 	bl	821c <ultoa>
	for (i=0; i<10; i++) {
    8e44:	a901      	add	r1, sp, #4
    8e46:	2300      	movs	r3, #0
    8e48:	4620      	mov	r0, r4
		char c = buf[i];
    8e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    8e4e:	3301      	adds	r3, #1
		if (!c) break;
    8e50:	b13a      	cbz	r2, 8e62 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    8e52:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    8e54:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    8e58:	d1f7      	bne.n	8e4a <usb_init_serialnumber+0x2a>
    8e5a:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    8e5c:	7023      	strb	r3, [r4, #0]
}
    8e5e:	b004      	add	sp, #16
    8e60:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    8e62:	005b      	lsls	r3, r3, #1
    8e64:	b2db      	uxtb	r3, r3
    8e66:	7023      	strb	r3, [r4, #0]
}
    8e68:	b004      	add	sp, #16
    8e6a:	bd10      	pop	{r4, pc}
    8e6c:	401f4400 	.word	0x401f4400
    8e70:	00989680 	.word	0x00989680
    8e74:	20008be0 	.word	0x20008be0

00008e78 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    8e78:	f000 bace 	b.w	9418 <usb_serial_flush_input>

00008e7c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    8e7c:	f000 bac0 	b.w	9400 <usb_serial_available>

00008e80 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    8e80:	f000 bb5c 	b.w	953c <usb_serial_flush_output>

00008e84 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    8e84:	f000 bb32 	b.w	94ec <usb_serial_write_buffer_free>

00008e88 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8e88:	4608      	mov	r0, r1
    8e8a:	4611      	mov	r1, r2
    8e8c:	f000 bb22 	b.w	94d4 <usb_serial_write>

00008e90 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    8e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8e92:	4c14      	ldr	r4, [pc, #80]	; (8ee4 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e94:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8e98:	4e13      	ldr	r6, [pc, #76]	; (8ee8 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8e9e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8ea2:	4f12      	ldr	r7, [pc, #72]	; (8eec <rx_queue_transfer+0x5c>)
    8ea4:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    8ea8:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8eaa:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8eae:	4621      	mov	r1, r4
    8eb0:	883a      	ldrh	r2, [r7, #0]
    8eb2:	4630      	mov	r0, r6
    8eb4:	f7ff ff78 	bl	8da8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    8eb8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    8eba:	4423      	add	r3, r4
	asm("dsb");
    8ebc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    8ec0:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    8ec4:	3420      	adds	r4, #32
	} while (location < end_addr);
    8ec6:	42a3      	cmp	r3, r4
    8ec8:	d8fa      	bhi.n	8ec0 <rx_queue_transfer+0x30>
	asm("dsb");
    8eca:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8ece:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    8ed2:	2003      	movs	r0, #3
    8ed4:	4631      	mov	r1, r6
    8ed6:	f7ff ff93 	bl	8e00 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8ede:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    8ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ee4:	20008f00 	.word	0x20008f00
    8ee8:	20009f00 	.word	0x20009f00
    8eec:	20029492 	.word	0x20029492

00008ef0 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8ef0:	4b24      	ldr	r3, [pc, #144]	; (8f84 <rx_event+0x94>)
{
    8ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8ef6:	881c      	ldrh	r4, [r3, #0]
    8ef8:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    8efa:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8efc:	f3c3 430e 	ubfx	r3, r3, #16, #15
    8f00:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    8f02:	2c00      	cmp	r4, #0
    8f04:	dd24      	ble.n	8f50 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    8f06:	4920      	ldr	r1, [pc, #128]	; (8f88 <rx_event+0x98>)
		if (head != rx_tail) {
    8f08:	4820      	ldr	r0, [pc, #128]	; (8f8c <rx_event+0x9c>)
		uint32_t head = rx_head;
    8f0a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    8f0c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    8f0e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    8f10:	4e1f      	ldr	r6, [pc, #124]	; (8f90 <rx_event+0xa0>)
		if (head != rx_tail) {
    8f12:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    8f14:	481f      	ldr	r0, [pc, #124]	; (8f94 <rx_event+0xa4>)
		if (head != rx_tail) {
    8f16:	d007      	beq.n	8f28 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    8f18:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    8f1c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8f20:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    8f24:	4294      	cmp	r4, r2
    8f26:	d918      	bls.n	8f5a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    8f28:	3301      	adds	r3, #1
		rx_index[i] = 0;
    8f2a:	2200      	movs	r2, #0
		rx_count[i] = len;
    8f2c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    8f30:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    8f32:	4e19      	ldr	r6, [pc, #100]	; (8f98 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    8f34:	bf88      	it	hi
    8f36:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    8f38:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    8f3c:	bf98      	it	ls
    8f3e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    8f40:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    8f42:	4b16      	ldr	r3, [pc, #88]	; (8f9c <rx_event+0xac>)
		rx_head = head;
    8f44:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    8f46:	681a      	ldr	r2, [r3, #0]
    8f48:	4414      	add	r4, r2
    8f4a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    8f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    8f50:	4628      	mov	r0, r5
}
    8f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    8f56:	f7ff bf9b 	b.w	8e90 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8f5a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    8f5e:	4910      	ldr	r1, [pc, #64]	; (8fa0 <rx_event+0xb0>)
    8f60:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    8f62:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8f64:	4408      	add	r0, r1
    8f66:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    8f6a:	f7ff f8bb 	bl	80e4 <memcpy>
				rx_available += len;
    8f6e:	4a0b      	ldr	r2, [pc, #44]	; (8f9c <rx_event+0xac>)
				rx_queue_transfer(i);
    8f70:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    8f72:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    8f76:	6813      	ldr	r3, [r2, #0]
    8f78:	4423      	add	r3, r4
}
    8f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    8f7e:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    8f80:	f7ff bf86 	b.w	8e90 <rx_queue_transfer>
    8f84:	20029492 	.word	0x20029492
    8f88:	200294a4 	.word	0x200294a4
    8f8c:	200294a5 	.word	0x200294a5
    8f90:	20028f60 	.word	0x20028f60
    8f94:	20028f80 	.word	0x20028f80
    8f98:	20028f70 	.word	0x20028f70
    8f9c:	20028f5c 	.word	0x20028f5c
    8fa0:	20008f00 	.word	0x20008f00

00008fa4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    8fa4:	4b1d      	ldr	r3, [pc, #116]	; (901c <usb_serial_flush_callback+0x78>)
    8fa6:	781a      	ldrb	r2, [r3, #0]
    8fa8:	2a00      	cmp	r2, #0
    8faa:	d136      	bne.n	901a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    8fac:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    8fb0:	4a1b      	ldr	r2, [pc, #108]	; (9020 <usb_serial_flush_callback+0x7c>)
    8fb2:	7812      	ldrb	r2, [r2, #0]
    8fb4:	b38a      	cbz	r2, 901a <usb_serial_flush_callback+0x76>
{
    8fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    8fba:	4d1a      	ldr	r5, [pc, #104]	; (9024 <usb_serial_flush_callback+0x80>)
    8fbc:	882a      	ldrh	r2, [r5, #0]
    8fbe:	b352      	cbz	r2, 9016 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8fc0:	4e19      	ldr	r6, [pc, #100]	; (9028 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8fc2:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    8fc6:	4f19      	ldr	r7, [pc, #100]	; (902c <usb_serial_flush_callback+0x88>)
    8fc8:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8fca:	4c19      	ldr	r4, [pc, #100]	; (9030 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    8fcc:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8fd0:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8fd4:	4642      	mov	r2, r8
    8fd6:	4638      	mov	r0, r7
    8fd8:	4621      	mov	r1, r4
    8fda:	f7ff fee5 	bl	8da8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    8fde:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    8fe2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8fe6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8fea:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    8fee:	3420      	adds	r4, #32
	} while (location < end_addr);
    8ff0:	42a2      	cmp	r2, r4
    8ff2:	d8fa      	bhi.n	8fea <usb_serial_flush_callback+0x46>
	asm("dsb");
    8ff4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8ff8:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8ffc:	2004      	movs	r0, #4
    8ffe:	4639      	mov	r1, r7
    9000:	f7ff feea 	bl	8dd8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9004:	7833      	ldrb	r3, [r6, #0]
    9006:	3301      	adds	r3, #1
    9008:	b2db      	uxtb	r3, r3
    900a:	2b03      	cmp	r3, #3
    900c:	bf88      	it	hi
    900e:	2300      	movhi	r3, #0
    9010:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    9012:	2300      	movs	r3, #0
    9014:	802b      	strh	r3, [r5, #0]
}
    9016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    901a:	4770      	bx	lr
    901c:	200294a9 	.word	0x200294a9
    9020:	200294ab 	.word	0x200294ab
    9024:	20029496 	.word	0x20029496
    9028:	200294a8 	.word	0x200294a8
    902c:	2000a000 	.word	0x2000a000
    9030:	2000a080 	.word	0x2000a080

00009034 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    9034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9038:	b085      	sub	sp, #20
	while (size > 0) {
    903a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    903e:	2900      	cmp	r1, #0
    9040:	f000 80bf 	beq.w	91c2 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    9044:	2300      	movs	r3, #0
    9046:	4c60      	ldr	r4, [pc, #384]	; (91c8 <usb_serial_write.part.0+0x194>)
    9048:	f8df 8198 	ldr.w	r8, [pc, #408]	; 91e4 <usb_serial_write.part.0+0x1b0>
    904c:	f8df a198 	ldr.w	sl, [pc, #408]	; 91e8 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    9050:	4f5e      	ldr	r7, [pc, #376]	; (91cc <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    9052:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    9054:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    9056:	4a5e      	ldr	r2, [pc, #376]	; (91d0 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    9058:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    905a:	4b5e      	ldr	r3, [pc, #376]	; (91d4 <usb_serial_write.part.0+0x1a0>)
    905c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    905e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    9062:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    9066:	2b00      	cmp	r3, #0
    9068:	f040 80a7 	bne.w	91ba <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    906c:	461e      	mov	r6, r3
		int waiting=0;
    906e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    9070:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    9072:	4648      	mov	r0, r9
    9074:	f7ff fed2 	bl	8e1c <usb_transfer_status>
			if (!(status & 0x80)) {
    9078:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    907c:	f000 808c 	beq.w	9198 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    9080:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    9084:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    9088:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    908c:	b905      	cbnz	r5, 9090 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    908e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    9090:	2b00      	cmp	r3, #0
    9092:	d17d      	bne.n	9190 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9094:	683b      	ldr	r3, [r7, #0]
    9096:	1b9b      	subs	r3, r3, r6
    9098:	2b78      	cmp	r3, #120	; 0x78
    909a:	f200 8087 	bhi.w	91ac <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    909e:	4b4e      	ldr	r3, [pc, #312]	; (91d8 <usb_serial_write.part.0+0x1a4>)
    90a0:	781b      	ldrb	r3, [r3, #0]
    90a2:	2b00      	cmp	r3, #0
    90a4:	d074      	beq.n	9190 <usb_serial_write.part.0+0x15c>
			yield();
    90a6:	f000 fa93 	bl	95d0 <yield>
			tx_noautoflush = 1;
    90aa:	2201      	movs	r2, #1
		while (!tx_available) {
    90ac:	f8b8 3000 	ldrh.w	r3, [r8]
    90b0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    90b2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    90b4:	2b00      	cmp	r3, #0
    90b6:	d0dc      	beq.n	9072 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    90b8:	4a46      	ldr	r2, [pc, #280]	; (91d4 <usb_serial_write.part.0+0x1a0>)
    90ba:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    90be:	7811      	ldrb	r1, [r2, #0]
    90c0:	461a      	mov	r2, r3
    90c2:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    90c6:	4d45      	ldr	r5, [pc, #276]	; (91dc <usb_serial_write.part.0+0x1a8>)
    90c8:	02c9      	lsls	r1, r1, #11
    90ca:	4428      	add	r0, r5
		if (size >= tx_available) {
    90cc:	9d01      	ldr	r5, [sp, #4]
    90ce:	4295      	cmp	r5, r2
    90d0:	d217      	bcs.n	9102 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    90d2:	9303      	str	r3, [sp, #12]
    90d4:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    90d8:	462a      	mov	r2, r5
    90da:	f7ff f803 	bl	80e4 <memcpy>
			tx_available -= size;
    90de:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    90e0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    90e4:	1b5b      	subs	r3, r3, r5
    90e6:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    90ea:	4b3d      	ldr	r3, [pc, #244]	; (91e0 <usb_serial_write.part.0+0x1ac>)
    90ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    90f0:	f3bf 8f4f 	dsb	sy
			sent += size;
    90f4:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    90f6:	2300      	movs	r3, #0
			sent += size;
    90f8:	4428      	add	r0, r5
		tx_noautoflush = 0;
    90fa:	7023      	strb	r3, [r4, #0]
}
    90fc:	b005      	add	sp, #20
    90fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9102:	4b36      	ldr	r3, [pc, #216]	; (91dc <usb_serial_write.part.0+0x1a8>)
    9104:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    9106:	9902      	ldr	r1, [sp, #8]
    9108:	f7fe ffec 	bl	80e4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    910c:	2300      	movs	r3, #0
    910e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9112:	4629      	mov	r1, r5
    9114:	4648      	mov	r0, r9
    9116:	f7ff fe47 	bl	8da8 <usb_prepare_transfer>
	asm("dsb");
    911a:	f3bf 8f4f 	dsb	sy
    911e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    9122:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    9126:	4293      	cmp	r3, r2
    9128:	bf34      	ite	cc
    912a:	2301      	movcc	r3, #1
    912c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    912e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9132:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9136:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    913a:	3520      	adds	r5, #32
	} while (location < end_addr);
    913c:	42ab      	cmp	r3, r5
    913e:	d1fa      	bne.n	9136 <usb_serial_write.part.0+0x102>
	asm("dsb");
    9140:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9144:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9148:	2004      	movs	r0, #4
    914a:	4649      	mov	r1, r9
    914c:	f7ff fe44 	bl	8dd8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9150:	4a20      	ldr	r2, [pc, #128]	; (91d4 <usb_serial_write.part.0+0x1a0>)
    9152:	7813      	ldrb	r3, [r2, #0]
    9154:	3301      	adds	r3, #1
    9156:	b2db      	uxtb	r3, r3
    9158:	2b03      	cmp	r3, #3
    915a:	bf84      	itt	hi
    915c:	2300      	movhi	r3, #0
    915e:	4a1d      	ldrhi	r2, [pc, #116]	; (91d4 <usb_serial_write.part.0+0x1a0>)
    9160:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    9162:	f8b8 3000 	ldrh.w	r3, [r8]
    9166:	9a01      	ldr	r2, [sp, #4]
    9168:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    916a:	9a00      	ldr	r2, [sp, #0]
    916c:	441a      	add	r2, r3
			size -= tx_available;
    916e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    9170:	9200      	str	r2, [sp, #0]
			data += tx_available;
    9172:	9a02      	ldr	r2, [sp, #8]
    9174:	441a      	add	r2, r3
			tx_available = 0;
    9176:	2300      	movs	r3, #0
			data += tx_available;
    9178:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    917a:	4a19      	ldr	r2, [pc, #100]	; (91e0 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    917c:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    9180:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    9184:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    9188:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    918a:	2900      	cmp	r1, #0
    918c:	f47f af62 	bne.w	9054 <usb_serial_write.part.0+0x20>
	return sent;
    9190:	9800      	ldr	r0, [sp, #0]
}
    9192:	b005      	add	sp, #20
    9194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    9198:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    919c:	4b0d      	ldr	r3, [pc, #52]	; (91d4 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    919e:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    91a2:	7819      	ldrb	r1, [r3, #0]
				break;
    91a4:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    91a6:	f8a8 2000 	strh.w	r2, [r8]
				break;
    91aa:	e78a      	b.n	90c2 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    91ac:	2301      	movs	r3, #1
				return sent;
    91ae:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    91b0:	f88a 3000 	strb.w	r3, [sl]
}
    91b4:	b005      	add	sp, #20
    91b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    91ba:	461a      	mov	r2, r3
    91bc:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    91c0:	e77f      	b.n	90c2 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    91c2:	9801      	ldr	r0, [sp, #4]
	return sent;
    91c4:	e7e5      	b.n	9192 <usb_serial_write.part.0+0x15e>
    91c6:	bf00      	nop
    91c8:	200294a9 	.word	0x200294a9
    91cc:	2002945c 	.word	0x2002945c
    91d0:	2000a000 	.word	0x2000a000
    91d4:	200294a8 	.word	0x200294a8
    91d8:	200294ab 	.word	0x200294ab
    91dc:	2000a080 	.word	0x2000a080
    91e0:	402e0000 	.word	0x402e0000
    91e4:	20029496 	.word	0x20029496
    91e8:	200294a7 	.word	0x200294a7

000091ec <usb_serial_reset>:
}
    91ec:	4770      	bx	lr
    91ee:	bf00      	nop

000091f0 <usb_serial_configure>:
	if (usb_high_speed) {
    91f0:	4b2a      	ldr	r3, [pc, #168]	; (929c <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    91f2:	2100      	movs	r1, #0
    91f4:	2280      	movs	r2, #128	; 0x80
    91f6:	482a      	ldr	r0, [pc, #168]	; (92a0 <usb_serial_configure+0xb0>)
{
    91f8:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    91fa:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    91fc:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    91fe:	4d29      	ldr	r5, [pc, #164]	; (92a4 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    9200:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    9202:	4e29      	ldr	r6, [pc, #164]	; (92a8 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    9204:	bf0c      	ite	eq
    9206:	2340      	moveq	r3, #64	; 0x40
    9208:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    920c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    920e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9210:	f002 fc34 	bl	ba7c <memset>
	tx_head = 0;
    9214:	4a25      	ldr	r2, [pc, #148]	; (92ac <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9216:	4621      	mov	r1, r4
	tx_available = 0;
    9218:	4b25      	ldr	r3, [pc, #148]	; (92b0 <usb_serial_configure+0xc0>)
	tx_head = 0;
    921a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    921c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9220:	4824      	ldr	r0, [pc, #144]	; (92b4 <usb_serial_configure+0xc4>)
	tx_available = 0;
    9222:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9224:	f002 fc2a 	bl	ba7c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9228:	4a23      	ldr	r2, [pc, #140]	; (92b8 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    922a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    922c:	4b23      	ldr	r3, [pc, #140]	; (92bc <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    922e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    9230:	e9c2 4400 	strd	r4, r4, [r2]
    9234:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    9238:	4a21      	ldr	r2, [pc, #132]	; (92c0 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    923a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    923e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    9240:	4a20      	ldr	r2, [pc, #128]	; (92c4 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    9242:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    9246:	4b20      	ldr	r3, [pc, #128]	; (92c8 <usb_serial_configure+0xd8>)
    9248:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    924a:	4623      	mov	r3, r4
	rx_available = 0;
    924c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    924e:	4622      	mov	r2, r4
    9250:	f7ff fd78 	bl	8d44 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9254:	4622      	mov	r2, r4
    9256:	8831      	ldrh	r1, [r6, #0]
    9258:	2003      	movs	r0, #3
    925a:	4b1c      	ldr	r3, [pc, #112]	; (92cc <usb_serial_configure+0xdc>)
    925c:	f7ff fd40 	bl	8ce0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    9260:	4623      	mov	r3, r4
    9262:	2201      	movs	r2, #1
    9264:	8829      	ldrh	r1, [r5, #0]
    9266:	2004      	movs	r0, #4
    9268:	f7ff fd6c 	bl	8d44 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    926c:	4620      	mov	r0, r4
    926e:	3401      	adds	r4, #1
    9270:	f7ff fe0e 	bl	8e90 <rx_queue_transfer>
    9274:	2c08      	cmp	r4, #8
    9276:	d1f9      	bne.n	926c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    9278:	4b15      	ldr	r3, [pc, #84]	; (92d0 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    927a:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    927c:	4815      	ldr	r0, [pc, #84]	; (92d4 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    927e:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    9280:	4c15      	ldr	r4, [pc, #84]	; (92d8 <usb_serial_configure+0xe8>)
    9282:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    9284:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    9288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    928c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    9290:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    9294:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    9298:	bd70      	pop	{r4, r5, r6, pc}
    929a:	bf00      	nop
    929c:	200294ac 	.word	0x200294ac
    92a0:	2000a000 	.word	0x2000a000
    92a4:	20029498 	.word	0x20029498
    92a8:	20029492 	.word	0x20029492
    92ac:	200294a8 	.word	0x200294a8
    92b0:	20029496 	.word	0x20029496
    92b4:	20009f00 	.word	0x20009f00
    92b8:	20028f60 	.word	0x20028f60
    92bc:	20028f70 	.word	0x20028f70
    92c0:	200294a4 	.word	0x200294a4
    92c4:	20028f5c 	.word	0x20028f5c
    92c8:	200294a5 	.word	0x200294a5
    92cc:	00008ef1 	.word	0x00008ef1
    92d0:	402e0000 	.word	0x402e0000
    92d4:	20029480 	.word	0x20029480
    92d8:	00008fa5 	.word	0x00008fa5

000092dc <usb_serial_read>:
{
    92dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    92e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    92e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    92e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 93b4 <usb_serial_read+0xd8>
{
    92ec:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    92ee:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    92f2:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    92f4:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    92f8:	2900      	cmp	r1, #0
    92fa:	d04f      	beq.n	939c <usb_serial_read+0xc0>
    92fc:	4680      	mov	r8, r0
    92fe:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    9300:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    9302:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 93b8 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    9306:	4b26      	ldr	r3, [pc, #152]	; (93a0 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    9308:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    930c:	4925      	ldr	r1, [pc, #148]	; (93a4 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    930e:	781b      	ldrb	r3, [r3, #0]
    9310:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    9312:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    9316:	d03f      	beq.n	9398 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    9318:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    931a:	4b23      	ldr	r3, [pc, #140]	; (93a8 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    931c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    931e:	bf28      	it	cs
    9320:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    9322:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    9324:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9328:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    932c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    932e:	4b1f      	ldr	r3, [pc, #124]	; (93ac <usb_serial_read+0xd0>)
    9330:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    9334:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    9338:	42aa      	cmp	r2, r5
    933a:	d21c      	bcs.n	9376 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    933c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    9340:	4918      	ldr	r1, [pc, #96]	; (93a4 <usb_serial_read+0xc8>)
			rx_available -= len;
    9342:	4c1b      	ldr	r4, [pc, #108]	; (93b0 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    9344:	4461      	add	r1, ip
    9346:	9201      	str	r2, [sp, #4]
    9348:	f7fe fecc 	bl	80e4 <memcpy>
			rx_available -= len;
    934c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    934e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    9352:	4658      	mov	r0, fp
			rx_index[i] += len;
    9354:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    9356:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    935a:	442a      	add	r2, r5
			rx_available -= len;
    935c:	4439      	add	r1, r7
			rx_index[i] += len;
    935e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    9362:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9364:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9368:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    936c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    9370:	b003      	add	sp, #12
    9372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9376:	462a      	mov	r2, r5
			count += avail;
    9378:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    937a:	f7fe feb3 	bl	80e4 <memcpy>
			rx_available -= avail;
    937e:	490c      	ldr	r1, [pc, #48]	; (93b0 <usb_serial_read+0xd4>)
			rx_tail = tail;
    9380:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    9382:	4630      	mov	r0, r6
			rx_available -= avail;
    9384:	680a      	ldr	r2, [r1, #0]
			p += avail;
    9386:	44a8      	add	r8, r5
			rx_available -= avail;
    9388:	1b52      	subs	r2, r2, r5
    938a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    938c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    9390:	f7ff fd7e 	bl	8e90 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    9394:	45bb      	cmp	fp, r7
    9396:	d8b6      	bhi.n	9306 <usb_serial_read+0x2a>
	return count;
    9398:	4638      	mov	r0, r7
    939a:	e7e3      	b.n	9364 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    939c:	4608      	mov	r0, r1
    939e:	e7e1      	b.n	9364 <usb_serial_read+0x88>
    93a0:	200294a4 	.word	0x200294a4
    93a4:	20008f00 	.word	0x20008f00
    93a8:	20028f80 	.word	0x20028f80
    93ac:	20028f60 	.word	0x20028f60
    93b0:	20028f5c 	.word	0x20028f5c
    93b4:	200294a5 	.word	0x200294a5
    93b8:	20028f70 	.word	0x20028f70

000093bc <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    93bc:	4b0b      	ldr	r3, [pc, #44]	; (93ec <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    93be:	4a0c      	ldr	r2, [pc, #48]	; (93f0 <usb_serial_peekchar+0x34>)
    93c0:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    93c2:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    93c4:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    93c6:	428a      	cmp	r2, r1
    93c8:	d00d      	beq.n	93e6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    93ca:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    93cc:	4809      	ldr	r0, [pc, #36]	; (93f4 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    93ce:	4a0a      	ldr	r2, [pc, #40]	; (93f8 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    93d0:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    93d2:	490a      	ldr	r1, [pc, #40]	; (93fc <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    93d4:	bf28      	it	cs
    93d6:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    93d8:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    93da:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    93de:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    93e2:	5c58      	ldrb	r0, [r3, r1]
    93e4:	4770      	bx	lr
	if (tail == rx_head) return -1;
    93e6:	f04f 30ff 	mov.w	r0, #4294967295
}
    93ea:	4770      	bx	lr
    93ec:	200294a4 	.word	0x200294a4
    93f0:	200294a5 	.word	0x200294a5
    93f4:	20028f80 	.word	0x20028f80
    93f8:	20008f00 	.word	0x20008f00
    93fc:	20028f70 	.word	0x20028f70

00009400 <usb_serial_available>:
	uint32_t n = rx_available;
    9400:	4b04      	ldr	r3, [pc, #16]	; (9414 <usb_serial_available+0x14>)
{
    9402:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    9404:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    9406:	b10c      	cbz	r4, 940c <usb_serial_available+0xc>
}
    9408:	4620      	mov	r0, r4
    940a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    940c:	f000 f8e0 	bl	95d0 <yield>
}
    9410:	4620      	mov	r0, r4
    9412:	bd10      	pop	{r4, pc}
    9414:	20028f5c 	.word	0x20028f5c

00009418 <usb_serial_flush_input>:
{
    9418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    941c:	4e14      	ldr	r6, [pc, #80]	; (9470 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    941e:	4d15      	ldr	r5, [pc, #84]	; (9474 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    9420:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    9422:	782a      	ldrb	r2, [r5, #0]
    9424:	4293      	cmp	r3, r2
    9426:	d021      	beq.n	946c <usb_serial_flush_input+0x54>
    9428:	b2dc      	uxtb	r4, r3
    942a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 947c <usb_serial_flush_input+0x64>
    942e:	f8df b050 	ldr.w	fp, [pc, #80]	; 9480 <usb_serial_flush_input+0x68>
    9432:	f8df 8050 	ldr.w	r8, [pc, #80]	; 9484 <usb_serial_flush_input+0x6c>
    9436:	4f10      	ldr	r7, [pc, #64]	; (9478 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    9438:	3401      	adds	r4, #1
    943a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    943c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    9440:	d901      	bls.n	9446 <usb_serial_flush_input+0x2e>
    9442:	2400      	movs	r4, #0
    9444:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    9446:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    944a:	f8db 3000 	ldr.w	r3, [fp]
    944e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    9452:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    9456:	1a52      	subs	r2, r2, r1
    9458:	1a9b      	subs	r3, r3, r2
    945a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    945e:	f7ff fd17 	bl	8e90 <rx_queue_transfer>
		rx_tail = tail;
    9462:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    9466:	782b      	ldrb	r3, [r5, #0]
    9468:	42a3      	cmp	r3, r4
    946a:	d1e5      	bne.n	9438 <usb_serial_flush_input+0x20>
}
    946c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9470:	200294a5 	.word	0x200294a5
    9474:	200294a4 	.word	0x200294a4
    9478:	20028f70 	.word	0x20028f70
    947c:	20028f80 	.word	0x20028f80
    9480:	20028f5c 	.word	0x20028f5c
    9484:	20028f60 	.word	0x20028f60

00009488 <usb_serial_getchar>:
{
    9488:	b500      	push	{lr}
    948a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    948c:	2101      	movs	r1, #1
    948e:	f10d 0007 	add.w	r0, sp, #7
    9492:	f7ff ff23 	bl	92dc <usb_serial_read>
    9496:	b120      	cbz	r0, 94a2 <usb_serial_getchar+0x1a>
    9498:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    949c:	b003      	add	sp, #12
    949e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    94a2:	f04f 30ff 	mov.w	r0, #4294967295
    94a6:	e7f9      	b.n	949c <usb_serial_getchar+0x14>

000094a8 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    94a8:	4b09      	ldr	r3, [pc, #36]	; (94d0 <usb_serial_putchar+0x28>)
{
    94aa:	b500      	push	{lr}
    94ac:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    94ae:	781b      	ldrb	r3, [r3, #0]
{
    94b0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    94b4:	b13b      	cbz	r3, 94c6 <usb_serial_putchar+0x1e>
    94b6:	2101      	movs	r1, #1
    94b8:	f10d 0007 	add.w	r0, sp, #7
    94bc:	f7ff fdba 	bl	9034 <usb_serial_write.part.0>
}
    94c0:	b003      	add	sp, #12
    94c2:	f85d fb04 	ldr.w	pc, [sp], #4
    94c6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    94ca:	b003      	add	sp, #12
    94cc:	f85d fb04 	ldr.w	pc, [sp], #4
    94d0:	200294ab 	.word	0x200294ab

000094d4 <usb_serial_write>:
	if (!usb_configuration) return 0;
    94d4:	4b04      	ldr	r3, [pc, #16]	; (94e8 <usb_serial_write+0x14>)
    94d6:	781b      	ldrb	r3, [r3, #0]
    94d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    94dc:	b10b      	cbz	r3, 94e2 <usb_serial_write+0xe>
    94de:	f7ff bda9 	b.w	9034 <usb_serial_write.part.0>
}
    94e2:	4610      	mov	r0, r2
    94e4:	4770      	bx	lr
    94e6:	bf00      	nop
    94e8:	200294ab 	.word	0x200294ab

000094ec <usb_serial_write_buffer_free>:
{
    94ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    94f0:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    94f2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 9538 <usb_serial_write_buffer_free+0x4c>
    94f6:	2301      	movs	r3, #1
    94f8:	4d0d      	ldr	r5, [pc, #52]	; (9530 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    94fa:	4627      	mov	r7, r4
    94fc:	4e0d      	ldr	r6, [pc, #52]	; (9534 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    94fe:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    9502:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9504:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    9506:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    9508:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    950a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    950e:	d005      	beq.n	951c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9510:	f7ff fc84 	bl	8e1c <usb_transfer_status>
    9514:	0603      	lsls	r3, r0, #24
    9516:	bf58      	it	pl
    9518:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    951c:	2c04      	cmp	r4, #4
    951e:	d1f0      	bne.n	9502 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    9520:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    9524:	2300      	movs	r3, #0
}
    9526:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    9528:	f888 3000 	strb.w	r3, [r8]
}
    952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9530:	2000a000 	.word	0x2000a000
    9534:	200294a8 	.word	0x200294a8
    9538:	200294a9 	.word	0x200294a9

0000953c <usb_serial_flush_output>:
{
    953c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    9540:	4b1d      	ldr	r3, [pc, #116]	; (95b8 <usb_serial_flush_output+0x7c>)
    9542:	781b      	ldrb	r3, [r3, #0]
    9544:	b113      	cbz	r3, 954c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    9546:	4d1d      	ldr	r5, [pc, #116]	; (95bc <usb_serial_flush_output+0x80>)
    9548:	882a      	ldrh	r2, [r5, #0]
    954a:	b90a      	cbnz	r2, 9550 <usb_serial_flush_output+0x14>
}
    954c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    9550:	4e1b      	ldr	r6, [pc, #108]	; (95c0 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    9552:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    9556:	491b      	ldr	r1, [pc, #108]	; (95c4 <usb_serial_flush_output+0x88>)
    9558:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    955a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    955c:	4c1a      	ldr	r4, [pc, #104]	; (95c8 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    955e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    9562:	4f1a      	ldr	r7, [pc, #104]	; (95cc <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9564:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    9568:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    956a:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    956c:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    956e:	4621      	mov	r1, r4
    9570:	2300      	movs	r3, #0
    9572:	f7ff fc19 	bl	8da8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    9576:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    957a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    957e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9582:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9586:	3420      	adds	r4, #32
	} while (location < end_addr);
    9588:	42a2      	cmp	r2, r4
    958a:	d8fa      	bhi.n	9582 <usb_serial_flush_output+0x46>
	asm("dsb");
    958c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9590:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9594:	2004      	movs	r0, #4
    9596:	4641      	mov	r1, r8
    9598:	f7ff fc1e 	bl	8dd8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    959c:	7833      	ldrb	r3, [r6, #0]
    959e:	3301      	adds	r3, #1
    95a0:	b2db      	uxtb	r3, r3
    95a2:	2b03      	cmp	r3, #3
    95a4:	bf88      	it	hi
    95a6:	2300      	movhi	r3, #0
    95a8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    95aa:	2300      	movs	r3, #0
    95ac:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    95ae:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    95b2:	703b      	strb	r3, [r7, #0]
}
    95b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    95b8:	200294ab 	.word	0x200294ab
    95bc:	20029496 	.word	0x20029496
    95c0:	200294a8 	.word	0x200294a8
    95c4:	2000a000 	.word	0x2000a000
    95c8:	2000a080 	.word	0x2000a080
    95cc:	200294a9 	.word	0x200294a9

000095d0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    95d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    95d4:	4e32      	ldr	r6, [pc, #200]	; (96a0 <yield+0xd0>)
    95d6:	7833      	ldrb	r3, [r6, #0]
    95d8:	b163      	cbz	r3, 95f4 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    95da:	4f32      	ldr	r7, [pc, #200]	; (96a4 <yield+0xd4>)
    95dc:	783a      	ldrb	r2, [r7, #0]
    95de:	b94a      	cbnz	r2, 95f4 <yield+0x24>
	running = 1;
    95e0:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    95e2:	07d9      	lsls	r1, r3, #31
	running = 1;
    95e4:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    95e6:	d444      	bmi.n	9672 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    95e8:	079a      	lsls	r2, r3, #30
    95ea:	d426      	bmi.n	963a <yield+0x6a>

	running = 0;
    95ec:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    95ee:	075b      	lsls	r3, r3, #29
	running = 0;
    95f0:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    95f2:	d401      	bmi.n	95f8 <yield+0x28>
	
};
    95f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    95f8:	4b2b      	ldr	r3, [pc, #172]	; (96a8 <yield+0xd8>)
    95fa:	681a      	ldr	r2, [r3, #0]
    95fc:	2a00      	cmp	r2, #0
    95fe:	d0f9      	beq.n	95f4 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9600:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    9604:	2a00      	cmp	r2, #0
    9606:	d1f5      	bne.n	95f4 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9608:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    960c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    960e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    9610:	2800      	cmp	r0, #0
    9612:	d03b      	beq.n	968c <yield+0xbc>
		if (runningFromYield) {
    9614:	4c25      	ldr	r4, [pc, #148]	; (96ac <yield+0xdc>)
    9616:	7821      	ldrb	r1, [r4, #0]
    9618:	2900      	cmp	r1, #0
    961a:	d137      	bne.n	968c <yield+0xbc>
		runningFromYield = true;
    961c:	2201      	movs	r2, #1
    961e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    9620:	6942      	ldr	r2, [r0, #20]
    9622:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    9624:	2a00      	cmp	r2, #0
    9626:	d038      	beq.n	969a <yield+0xca>
			firstYield->_prev = nullptr;
    9628:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    962a:	b905      	cbnz	r5, 962e <yield+0x5e>
    962c:	b662      	cpsie	i
		first->_triggered = false;
    962e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    9630:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    9632:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    9634:	4798      	blx	r3
		runningFromYield = false;
    9636:	7025      	strb	r5, [r4, #0]
    9638:	e7dc      	b.n	95f4 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    963a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 96b8 <yield+0xe8>
    963e:	f898 2000 	ldrb.w	r2, [r8]
    9642:	2a00      	cmp	r2, #0
    9644:	d0d2      	beq.n	95ec <yield+0x1c>
    9646:	2500      	movs	r5, #0
    9648:	f8df 9070 	ldr.w	r9, [pc, #112]	; 96bc <yield+0xec>
    964c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    964e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9652:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    9654:	6823      	ldr	r3, [r4, #0]
    9656:	4620      	mov	r0, r4
    9658:	691b      	ldr	r3, [r3, #16]
    965a:	4798      	blx	r3
    965c:	b110      	cbz	r0, 9664 <yield+0x94>
    965e:	6963      	ldr	r3, [r4, #20]
    9660:	689b      	ldr	r3, [r3, #8]
    9662:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9664:	f898 2000 	ldrb.w	r2, [r8]
    9668:	b2eb      	uxtb	r3, r5
    966a:	429a      	cmp	r2, r3
    966c:	d8ef      	bhi.n	964e <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    966e:	7833      	ldrb	r3, [r6, #0]
    9670:	e7bc      	b.n	95ec <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    9672:	f7ff fec5 	bl	9400 <usb_serial_available>
		if (Serial.available()) serialEvent();
    9676:	b968      	cbnz	r0, 9694 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    9678:	4b0d      	ldr	r3, [pc, #52]	; (96b0 <yield+0xe0>)
    967a:	781b      	ldrb	r3, [r3, #0]
    967c:	b90b      	cbnz	r3, 9682 <yield+0xb2>
    967e:	7833      	ldrb	r3, [r6, #0]
    9680:	e7b2      	b.n	95e8 <yield+0x18>
    9682:	7833      	ldrb	r3, [r6, #0]
    9684:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    9688:	7033      	strb	r3, [r6, #0]
    968a:	e7ad      	b.n	95e8 <yield+0x18>
		if (doit) __enable_irq();
    968c:	2d00      	cmp	r5, #0
    968e:	d1b1      	bne.n	95f4 <yield+0x24>
    9690:	b662      	cpsie	i
    9692:	e7af      	b.n	95f4 <yield+0x24>
		if (Serial.available()) serialEvent();
    9694:	f000 f8cc 	bl	9830 <serialEvent()>
    9698:	e7ee      	b.n	9678 <yield+0xa8>
			lastYield = nullptr;
    969a:	4b06      	ldr	r3, [pc, #24]	; (96b4 <yield+0xe4>)
    969c:	601a      	str	r2, [r3, #0]
    969e:	e7c4      	b.n	962a <yield+0x5a>
    96a0:	20008bf7 	.word	0x20008bf7
    96a4:	200294a1 	.word	0x200294a1
    96a8:	20028874 	.word	0x20028874
    96ac:	2002949f 	.word	0x2002949f
    96b0:	60002766 	.word	0x60002766
    96b4:	20028880 	.word	0x20028880
    96b8:	200294a0 	.word	0x200294a0
    96bc:	20028884 	.word	0x20028884

000096c0 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    96c0:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    96c2:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    96c4:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    96c8:	4619      	mov	r1, r3
{
    96ca:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    96cc:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    96d0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    96d4:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    96d8:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    96dc:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    96e0:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    96e2:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    96e6:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    96ea:	b29b      	uxth	r3, r3
    96ec:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    96f0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    96f4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    96f8:	3101      	adds	r1, #1
    96fa:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    96fe:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9700:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9702:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9706:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9708:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    970a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    970c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    970e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    9712:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9714:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9716:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9718:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    971a:	d1eb      	bne.n	96f4 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    971c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    9720:	b29b      	uxth	r3, r3
    9722:	f043 030f 	orr.w	r3, r3, #15
    9726:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    972a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    972e:	b29b      	uxth	r3, r3
    9730:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    9734:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    9738:	bd10      	pop	{r4, pc}
    973a:	bf00      	nop

0000973c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    973c:	4b37      	ldr	r3, [pc, #220]	; (981c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    973e:	4a38      	ldr	r2, [pc, #224]	; (9820 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9740:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    9742:	4838      	ldr	r0, [pc, #224]	; (9824 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9744:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    9748:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    974a:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    974c:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9750:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9754:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9758:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    975c:	430a      	orrs	r2, r1
    975e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    9762:	f7ff ffad 	bl	96c0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    9766:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    976a:	f7ff ffa9 	bl	96c0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    976e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    9772:	f7ff ffa5 	bl	96c0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    9776:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    977a:	f7ff ffa1 	bl	96c0 <flexpwm_init>
	for (i=0; i < 4; i++) {
    977e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    9780:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9784:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    9788:	4611      	mov	r1, r2
    978a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    978e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    9792:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9794:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    9796:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    9798:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    979a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    979e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    97a0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    97a2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    97a6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    97a8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    97aa:	d1ee      	bne.n	978a <pwm_init+0x4e>
    97ac:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    97ae:	481e      	ldr	r0, [pc, #120]	; (9828 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    97b0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    97b4:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    97b8:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    97ba:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    97be:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    97c2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    97c6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    97ca:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    97cc:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    97ce:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    97d0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    97d2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    97d6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    97d8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    97da:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    97de:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    97e0:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    97e2:	d1ee      	bne.n	97c2 <pwm_init+0x86>
    97e4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    97e6:	4811      	ldr	r0, [pc, #68]	; (982c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    97e8:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    97ea:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    97ee:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    97f0:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    97f4:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    97f8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    97fc:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    9800:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9802:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    9804:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    9806:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9808:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    980a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    980c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    980e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    9812:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9814:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    9818:	d1ee      	bne.n	97f8 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    981a:	bd70      	pop	{r4, r5, r6, pc}
    981c:	400fc000 	.word	0x400fc000
    9820:	fc030000 	.word	0xfc030000
    9824:	403dc000 	.word	0x403dc000
    9828:	401e0000 	.word	0x401e0000
    982c:	401e4000 	.word	0x401e4000

00009830 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    9830:	4770      	bx	lr
    9832:	bf00      	nop

00009834 <sm_align_pool>:
{
    9834:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    9836:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    983a:	b15b      	cbz	r3, 9854 <sm_align_pool+0x20>
    983c:	b1ba      	cbz	r2, 986e <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    983e:	4b0f      	ldr	r3, [pc, #60]	; (987c <sm_align_pool+0x48>)
    9840:	fba3 1302 	umull	r1, r3, r3, r2
    9844:	08db      	lsrs	r3, r3, #3
    9846:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    984a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    984e:	d10a      	bne.n	9866 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    9850:	2001      	movs	r0, #1
}
    9852:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    9854:	4b09      	ldr	r3, [pc, #36]	; (987c <sm_align_pool+0x48>)
    9856:	fba3 1302 	umull	r1, r3, r3, r2
    985a:	08db      	lsrs	r3, r3, #3
    985c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    9860:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    9864:	d001      	beq.n	986a <sm_align_pool+0x36>
    9866:	1ad2      	subs	r2, r2, r3
    9868:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    986a:	2af0      	cmp	r2, #240	; 0xf0
    986c:	d8f0      	bhi.n	9850 <sm_align_pool+0x1c>
		errno = ENOSPC;
    986e:	f002 fa3b 	bl	bce8 <__errno>
    9872:	221c      	movs	r2, #28
    9874:	4603      	mov	r3, r0
    9876:	2000      	movs	r0, #0
    9878:	601a      	str	r2, [r3, #0]
}
    987a:	bd08      	pop	{r3, pc}
    987c:	aaaaaaab 	.word	0xaaaaaaab

00009880 <sm_set_pool>:
{
    9880:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    9882:	4604      	mov	r4, r0
    9884:	b338      	cbz	r0, 98d6 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    9886:	b119      	cbz	r1, 9890 <sm_set_pool+0x10>
    9888:	fab2 f682 	clz	r6, r2
    988c:	0976      	lsrs	r6, r6, #5
    988e:	b9a2      	cbnz	r2, 98ba <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    9890:	6820      	ldr	r0, [r4, #0]
    9892:	b300      	cbz	r0, 98d6 <sm_set_pool+0x56>
    9894:	6862      	ldr	r2, [r4, #4]
    9896:	b1f2      	cbz	r2, 98d6 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    9898:	4b18      	ldr	r3, [pc, #96]	; (98fc <sm_set_pool+0x7c>)
    989a:	4919      	ldr	r1, [pc, #100]	; (9900 <sm_set_pool+0x80>)
    989c:	fb02 f303 	mul.w	r3, r2, r3
    98a0:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    98a4:	d317      	bcc.n	98d6 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    98a6:	68a3      	ldr	r3, [r4, #8]
    98a8:	b9e3      	cbnz	r3, 98e4 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    98aa:	2200      	movs	r2, #0
			return 1;
    98ac:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    98ae:	6022      	str	r2, [r4, #0]
    98b0:	6062      	str	r2, [r4, #4]
    98b2:	60a2      	str	r2, [r4, #8]
    98b4:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    98b6:	4618      	mov	r0, r3
    98b8:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    98ba:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    98bc:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    98be:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    98c2:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    98c4:	f7ff ffb6 	bl	9834 <sm_align_pool>
    98c8:	4603      	mov	r3, r0
    98ca:	2800      	cmp	r0, #0
    98cc:	d0f3      	beq.n	98b6 <sm_set_pool+0x36>
	if (do_zero) {
    98ce:	b96d      	cbnz	r5, 98ec <sm_set_pool+0x6c>
	return 1;
    98d0:	2301      	movs	r3, #1
}
    98d2:	4618      	mov	r0, r3
    98d4:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    98d6:	f002 fa07 	bl	bce8 <__errno>
    98da:	2216      	movs	r2, #22
		return 0;
    98dc:	2300      	movs	r3, #0
		errno = EINVAL;
    98de:	6002      	str	r2, [r0, #0]
}
    98e0:	4618      	mov	r0, r3
    98e2:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    98e4:	2100      	movs	r1, #0
    98e6:	f002 f8c9 	bl	ba7c <memset>
    98ea:	e7de      	b.n	98aa <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    98ec:	6862      	ldr	r2, [r4, #4]
    98ee:	4631      	mov	r1, r6
    98f0:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    98f2:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    98f4:	f002 f8c2 	bl	ba7c <memset>
	return 1;
    98f8:	2301      	movs	r3, #1
    98fa:	e7dc      	b.n	98b6 <sm_set_pool+0x36>
    98fc:	aaaaaaab 	.word	0xaaaaaaab
    9900:	15555555 	.word	0x15555555

00009904 <__aeabi_atexit>:
    9904:	4603      	mov	r3, r0
    9906:	4608      	mov	r0, r1
    9908:	4619      	mov	r1, r3
    990a:	f001 be27 	b.w	b55c <__cxa_atexit>
    990e:	bf00      	nop

00009910 <__aeabi_uldivmod>:
    9910:	b953      	cbnz	r3, 9928 <__aeabi_uldivmod+0x18>
    9912:	b94a      	cbnz	r2, 9928 <__aeabi_uldivmod+0x18>
    9914:	2900      	cmp	r1, #0
    9916:	bf08      	it	eq
    9918:	2800      	cmpeq	r0, #0
    991a:	bf1c      	itt	ne
    991c:	f04f 31ff 	movne.w	r1, #4294967295
    9920:	f04f 30ff 	movne.w	r0, #4294967295
    9924:	f000 b970 	b.w	9c08 <__aeabi_idiv0>
    9928:	f1ad 0c08 	sub.w	ip, sp, #8
    992c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    9930:	f000 f806 	bl	9940 <__udivmoddi4>
    9934:	f8dd e004 	ldr.w	lr, [sp, #4]
    9938:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    993c:	b004      	add	sp, #16
    993e:	4770      	bx	lr

00009940 <__udivmoddi4>:
    9940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9944:	9e08      	ldr	r6, [sp, #32]
    9946:	460d      	mov	r5, r1
    9948:	4604      	mov	r4, r0
    994a:	460f      	mov	r7, r1
    994c:	2b00      	cmp	r3, #0
    994e:	d14a      	bne.n	99e6 <__udivmoddi4+0xa6>
    9950:	428a      	cmp	r2, r1
    9952:	4694      	mov	ip, r2
    9954:	d965      	bls.n	9a22 <__udivmoddi4+0xe2>
    9956:	fab2 f382 	clz	r3, r2
    995a:	b143      	cbz	r3, 996e <__udivmoddi4+0x2e>
    995c:	fa02 fc03 	lsl.w	ip, r2, r3
    9960:	f1c3 0220 	rsb	r2, r3, #32
    9964:	409f      	lsls	r7, r3
    9966:	fa20 f202 	lsr.w	r2, r0, r2
    996a:	4317      	orrs	r7, r2
    996c:	409c      	lsls	r4, r3
    996e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    9972:	fa1f f58c 	uxth.w	r5, ip
    9976:	fbb7 f1fe 	udiv	r1, r7, lr
    997a:	0c22      	lsrs	r2, r4, #16
    997c:	fb0e 7711 	mls	r7, lr, r1, r7
    9980:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    9984:	fb01 f005 	mul.w	r0, r1, r5
    9988:	4290      	cmp	r0, r2
    998a:	d90a      	bls.n	99a2 <__udivmoddi4+0x62>
    998c:	eb1c 0202 	adds.w	r2, ip, r2
    9990:	f101 37ff 	add.w	r7, r1, #4294967295
    9994:	f080 811c 	bcs.w	9bd0 <__udivmoddi4+0x290>
    9998:	4290      	cmp	r0, r2
    999a:	f240 8119 	bls.w	9bd0 <__udivmoddi4+0x290>
    999e:	3902      	subs	r1, #2
    99a0:	4462      	add	r2, ip
    99a2:	1a12      	subs	r2, r2, r0
    99a4:	b2a4      	uxth	r4, r4
    99a6:	fbb2 f0fe 	udiv	r0, r2, lr
    99aa:	fb0e 2210 	mls	r2, lr, r0, r2
    99ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    99b2:	fb00 f505 	mul.w	r5, r0, r5
    99b6:	42a5      	cmp	r5, r4
    99b8:	d90a      	bls.n	99d0 <__udivmoddi4+0x90>
    99ba:	eb1c 0404 	adds.w	r4, ip, r4
    99be:	f100 32ff 	add.w	r2, r0, #4294967295
    99c2:	f080 8107 	bcs.w	9bd4 <__udivmoddi4+0x294>
    99c6:	42a5      	cmp	r5, r4
    99c8:	f240 8104 	bls.w	9bd4 <__udivmoddi4+0x294>
    99cc:	4464      	add	r4, ip
    99ce:	3802      	subs	r0, #2
    99d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    99d4:	1b64      	subs	r4, r4, r5
    99d6:	2100      	movs	r1, #0
    99d8:	b11e      	cbz	r6, 99e2 <__udivmoddi4+0xa2>
    99da:	40dc      	lsrs	r4, r3
    99dc:	2300      	movs	r3, #0
    99de:	e9c6 4300 	strd	r4, r3, [r6]
    99e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    99e6:	428b      	cmp	r3, r1
    99e8:	d908      	bls.n	99fc <__udivmoddi4+0xbc>
    99ea:	2e00      	cmp	r6, #0
    99ec:	f000 80ed 	beq.w	9bca <__udivmoddi4+0x28a>
    99f0:	2100      	movs	r1, #0
    99f2:	e9c6 0500 	strd	r0, r5, [r6]
    99f6:	4608      	mov	r0, r1
    99f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    99fc:	fab3 f183 	clz	r1, r3
    9a00:	2900      	cmp	r1, #0
    9a02:	d149      	bne.n	9a98 <__udivmoddi4+0x158>
    9a04:	42ab      	cmp	r3, r5
    9a06:	d302      	bcc.n	9a0e <__udivmoddi4+0xce>
    9a08:	4282      	cmp	r2, r0
    9a0a:	f200 80f8 	bhi.w	9bfe <__udivmoddi4+0x2be>
    9a0e:	1a84      	subs	r4, r0, r2
    9a10:	eb65 0203 	sbc.w	r2, r5, r3
    9a14:	2001      	movs	r0, #1
    9a16:	4617      	mov	r7, r2
    9a18:	2e00      	cmp	r6, #0
    9a1a:	d0e2      	beq.n	99e2 <__udivmoddi4+0xa2>
    9a1c:	e9c6 4700 	strd	r4, r7, [r6]
    9a20:	e7df      	b.n	99e2 <__udivmoddi4+0xa2>
    9a22:	b902      	cbnz	r2, 9a26 <__udivmoddi4+0xe6>
    9a24:	deff      	udf	#255	; 0xff
    9a26:	fab2 f382 	clz	r3, r2
    9a2a:	2b00      	cmp	r3, #0
    9a2c:	f040 8090 	bne.w	9b50 <__udivmoddi4+0x210>
    9a30:	1a8a      	subs	r2, r1, r2
    9a32:	ea4f 471c 	mov.w	r7, ip, lsr #16
    9a36:	fa1f fe8c 	uxth.w	lr, ip
    9a3a:	2101      	movs	r1, #1
    9a3c:	fbb2 f5f7 	udiv	r5, r2, r7
    9a40:	fb07 2015 	mls	r0, r7, r5, r2
    9a44:	0c22      	lsrs	r2, r4, #16
    9a46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    9a4a:	fb0e f005 	mul.w	r0, lr, r5
    9a4e:	4290      	cmp	r0, r2
    9a50:	d908      	bls.n	9a64 <__udivmoddi4+0x124>
    9a52:	eb1c 0202 	adds.w	r2, ip, r2
    9a56:	f105 38ff 	add.w	r8, r5, #4294967295
    9a5a:	d202      	bcs.n	9a62 <__udivmoddi4+0x122>
    9a5c:	4290      	cmp	r0, r2
    9a5e:	f200 80cb 	bhi.w	9bf8 <__udivmoddi4+0x2b8>
    9a62:	4645      	mov	r5, r8
    9a64:	1a12      	subs	r2, r2, r0
    9a66:	b2a4      	uxth	r4, r4
    9a68:	fbb2 f0f7 	udiv	r0, r2, r7
    9a6c:	fb07 2210 	mls	r2, r7, r0, r2
    9a70:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    9a74:	fb0e fe00 	mul.w	lr, lr, r0
    9a78:	45a6      	cmp	lr, r4
    9a7a:	d908      	bls.n	9a8e <__udivmoddi4+0x14e>
    9a7c:	eb1c 0404 	adds.w	r4, ip, r4
    9a80:	f100 32ff 	add.w	r2, r0, #4294967295
    9a84:	d202      	bcs.n	9a8c <__udivmoddi4+0x14c>
    9a86:	45a6      	cmp	lr, r4
    9a88:	f200 80bb 	bhi.w	9c02 <__udivmoddi4+0x2c2>
    9a8c:	4610      	mov	r0, r2
    9a8e:	eba4 040e 	sub.w	r4, r4, lr
    9a92:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    9a96:	e79f      	b.n	99d8 <__udivmoddi4+0x98>
    9a98:	f1c1 0720 	rsb	r7, r1, #32
    9a9c:	408b      	lsls	r3, r1
    9a9e:	fa22 fc07 	lsr.w	ip, r2, r7
    9aa2:	ea4c 0c03 	orr.w	ip, ip, r3
    9aa6:	fa05 f401 	lsl.w	r4, r5, r1
    9aaa:	fa20 f307 	lsr.w	r3, r0, r7
    9aae:	40fd      	lsrs	r5, r7
    9ab0:	ea4f 491c 	mov.w	r9, ip, lsr #16
    9ab4:	4323      	orrs	r3, r4
    9ab6:	fbb5 f8f9 	udiv	r8, r5, r9
    9aba:	fa1f fe8c 	uxth.w	lr, ip
    9abe:	fb09 5518 	mls	r5, r9, r8, r5
    9ac2:	0c1c      	lsrs	r4, r3, #16
    9ac4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    9ac8:	fb08 f50e 	mul.w	r5, r8, lr
    9acc:	42a5      	cmp	r5, r4
    9ace:	fa02 f201 	lsl.w	r2, r2, r1
    9ad2:	fa00 f001 	lsl.w	r0, r0, r1
    9ad6:	d90b      	bls.n	9af0 <__udivmoddi4+0x1b0>
    9ad8:	eb1c 0404 	adds.w	r4, ip, r4
    9adc:	f108 3aff 	add.w	sl, r8, #4294967295
    9ae0:	f080 8088 	bcs.w	9bf4 <__udivmoddi4+0x2b4>
    9ae4:	42a5      	cmp	r5, r4
    9ae6:	f240 8085 	bls.w	9bf4 <__udivmoddi4+0x2b4>
    9aea:	f1a8 0802 	sub.w	r8, r8, #2
    9aee:	4464      	add	r4, ip
    9af0:	1b64      	subs	r4, r4, r5
    9af2:	b29d      	uxth	r5, r3
    9af4:	fbb4 f3f9 	udiv	r3, r4, r9
    9af8:	fb09 4413 	mls	r4, r9, r3, r4
    9afc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    9b00:	fb03 fe0e 	mul.w	lr, r3, lr
    9b04:	45a6      	cmp	lr, r4
    9b06:	d908      	bls.n	9b1a <__udivmoddi4+0x1da>
    9b08:	eb1c 0404 	adds.w	r4, ip, r4
    9b0c:	f103 35ff 	add.w	r5, r3, #4294967295
    9b10:	d26c      	bcs.n	9bec <__udivmoddi4+0x2ac>
    9b12:	45a6      	cmp	lr, r4
    9b14:	d96a      	bls.n	9bec <__udivmoddi4+0x2ac>
    9b16:	3b02      	subs	r3, #2
    9b18:	4464      	add	r4, ip
    9b1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    9b1e:	fba3 9502 	umull	r9, r5, r3, r2
    9b22:	eba4 040e 	sub.w	r4, r4, lr
    9b26:	42ac      	cmp	r4, r5
    9b28:	46c8      	mov	r8, r9
    9b2a:	46ae      	mov	lr, r5
    9b2c:	d356      	bcc.n	9bdc <__udivmoddi4+0x29c>
    9b2e:	d053      	beq.n	9bd8 <__udivmoddi4+0x298>
    9b30:	b156      	cbz	r6, 9b48 <__udivmoddi4+0x208>
    9b32:	ebb0 0208 	subs.w	r2, r0, r8
    9b36:	eb64 040e 	sbc.w	r4, r4, lr
    9b3a:	fa04 f707 	lsl.w	r7, r4, r7
    9b3e:	40ca      	lsrs	r2, r1
    9b40:	40cc      	lsrs	r4, r1
    9b42:	4317      	orrs	r7, r2
    9b44:	e9c6 7400 	strd	r7, r4, [r6]
    9b48:	4618      	mov	r0, r3
    9b4a:	2100      	movs	r1, #0
    9b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9b50:	f1c3 0120 	rsb	r1, r3, #32
    9b54:	fa02 fc03 	lsl.w	ip, r2, r3
    9b58:	fa20 f201 	lsr.w	r2, r0, r1
    9b5c:	fa25 f101 	lsr.w	r1, r5, r1
    9b60:	409d      	lsls	r5, r3
    9b62:	432a      	orrs	r2, r5
    9b64:	ea4f 471c 	mov.w	r7, ip, lsr #16
    9b68:	fa1f fe8c 	uxth.w	lr, ip
    9b6c:	fbb1 f0f7 	udiv	r0, r1, r7
    9b70:	fb07 1510 	mls	r5, r7, r0, r1
    9b74:	0c11      	lsrs	r1, r2, #16
    9b76:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    9b7a:	fb00 f50e 	mul.w	r5, r0, lr
    9b7e:	428d      	cmp	r5, r1
    9b80:	fa04 f403 	lsl.w	r4, r4, r3
    9b84:	d908      	bls.n	9b98 <__udivmoddi4+0x258>
    9b86:	eb1c 0101 	adds.w	r1, ip, r1
    9b8a:	f100 38ff 	add.w	r8, r0, #4294967295
    9b8e:	d22f      	bcs.n	9bf0 <__udivmoddi4+0x2b0>
    9b90:	428d      	cmp	r5, r1
    9b92:	d92d      	bls.n	9bf0 <__udivmoddi4+0x2b0>
    9b94:	3802      	subs	r0, #2
    9b96:	4461      	add	r1, ip
    9b98:	1b49      	subs	r1, r1, r5
    9b9a:	b292      	uxth	r2, r2
    9b9c:	fbb1 f5f7 	udiv	r5, r1, r7
    9ba0:	fb07 1115 	mls	r1, r7, r5, r1
    9ba4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    9ba8:	fb05 f10e 	mul.w	r1, r5, lr
    9bac:	4291      	cmp	r1, r2
    9bae:	d908      	bls.n	9bc2 <__udivmoddi4+0x282>
    9bb0:	eb1c 0202 	adds.w	r2, ip, r2
    9bb4:	f105 38ff 	add.w	r8, r5, #4294967295
    9bb8:	d216      	bcs.n	9be8 <__udivmoddi4+0x2a8>
    9bba:	4291      	cmp	r1, r2
    9bbc:	d914      	bls.n	9be8 <__udivmoddi4+0x2a8>
    9bbe:	3d02      	subs	r5, #2
    9bc0:	4462      	add	r2, ip
    9bc2:	1a52      	subs	r2, r2, r1
    9bc4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    9bc8:	e738      	b.n	9a3c <__udivmoddi4+0xfc>
    9bca:	4631      	mov	r1, r6
    9bcc:	4630      	mov	r0, r6
    9bce:	e708      	b.n	99e2 <__udivmoddi4+0xa2>
    9bd0:	4639      	mov	r1, r7
    9bd2:	e6e6      	b.n	99a2 <__udivmoddi4+0x62>
    9bd4:	4610      	mov	r0, r2
    9bd6:	e6fb      	b.n	99d0 <__udivmoddi4+0x90>
    9bd8:	4548      	cmp	r0, r9
    9bda:	d2a9      	bcs.n	9b30 <__udivmoddi4+0x1f0>
    9bdc:	ebb9 0802 	subs.w	r8, r9, r2
    9be0:	eb65 0e0c 	sbc.w	lr, r5, ip
    9be4:	3b01      	subs	r3, #1
    9be6:	e7a3      	b.n	9b30 <__udivmoddi4+0x1f0>
    9be8:	4645      	mov	r5, r8
    9bea:	e7ea      	b.n	9bc2 <__udivmoddi4+0x282>
    9bec:	462b      	mov	r3, r5
    9bee:	e794      	b.n	9b1a <__udivmoddi4+0x1da>
    9bf0:	4640      	mov	r0, r8
    9bf2:	e7d1      	b.n	9b98 <__udivmoddi4+0x258>
    9bf4:	46d0      	mov	r8, sl
    9bf6:	e77b      	b.n	9af0 <__udivmoddi4+0x1b0>
    9bf8:	3d02      	subs	r5, #2
    9bfa:	4462      	add	r2, ip
    9bfc:	e732      	b.n	9a64 <__udivmoddi4+0x124>
    9bfe:	4608      	mov	r0, r1
    9c00:	e70a      	b.n	9a18 <__udivmoddi4+0xd8>
    9c02:	4464      	add	r4, ip
    9c04:	3802      	subs	r0, #2
    9c06:	e742      	b.n	9a8e <__udivmoddi4+0x14e>

00009c08 <__aeabi_idiv0>:
    9c08:	4770      	bx	lr
    9c0a:	bf00      	nop

00009c0c <malloc>:
    9c0c:	4b02      	ldr	r3, [pc, #8]	; (9c18 <malloc+0xc>)
    9c0e:	4601      	mov	r1, r0
    9c10:	6818      	ldr	r0, [r3, #0]
    9c12:	f000 b80b 	b.w	9c2c <_malloc_r>
    9c16:	bf00      	nop
    9c18:	20008b7c 	.word	0x20008b7c

00009c1c <free>:
    9c1c:	4b02      	ldr	r3, [pc, #8]	; (9c28 <free+0xc>)
    9c1e:	4601      	mov	r1, r0
    9c20:	6818      	ldr	r0, [r3, #0]
    9c22:	f002 bbdf 	b.w	c3e4 <_free_r>
    9c26:	bf00      	nop
    9c28:	20008b7c 	.word	0x20008b7c

00009c2c <_malloc_r>:
    9c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c30:	f101 060b 	add.w	r6, r1, #11
    9c34:	2e16      	cmp	r6, #22
    9c36:	b083      	sub	sp, #12
    9c38:	4604      	mov	r4, r0
    9c3a:	d824      	bhi.n	9c86 <_malloc_r+0x5a>
    9c3c:	2910      	cmp	r1, #16
    9c3e:	f200 80ba 	bhi.w	9db6 <_malloc_r+0x18a>
    9c42:	f000 faa3 	bl	a18c <__malloc_lock>
    9c46:	2610      	movs	r6, #16
    9c48:	2218      	movs	r2, #24
    9c4a:	2002      	movs	r0, #2
    9c4c:	4fb5      	ldr	r7, [pc, #724]	; (9f24 <_malloc_r+0x2f8>)
    9c4e:	443a      	add	r2, r7
    9c50:	f1a2 0108 	sub.w	r1, r2, #8
    9c54:	6853      	ldr	r3, [r2, #4]
    9c56:	428b      	cmp	r3, r1
    9c58:	f000 80ba 	beq.w	9dd0 <_malloc_r+0x1a4>
    9c5c:	685a      	ldr	r2, [r3, #4]
    9c5e:	68d9      	ldr	r1, [r3, #12]
    9c60:	f022 0203 	bic.w	r2, r2, #3
    9c64:	441a      	add	r2, r3
    9c66:	689d      	ldr	r5, [r3, #8]
    9c68:	60e9      	str	r1, [r5, #12]
    9c6a:	608d      	str	r5, [r1, #8]
    9c6c:	6851      	ldr	r1, [r2, #4]
    9c6e:	f041 0101 	orr.w	r1, r1, #1
    9c72:	4620      	mov	r0, r4
    9c74:	6051      	str	r1, [r2, #4]
    9c76:	f103 0508 	add.w	r5, r3, #8
    9c7a:	f000 fa8d 	bl	a198 <__malloc_unlock>
    9c7e:	4628      	mov	r0, r5
    9c80:	b003      	add	sp, #12
    9c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c86:	f036 0607 	bics.w	r6, r6, #7
    9c8a:	f100 8094 	bmi.w	9db6 <_malloc_r+0x18a>
    9c8e:	42b1      	cmp	r1, r6
    9c90:	f200 8091 	bhi.w	9db6 <_malloc_r+0x18a>
    9c94:	f000 fa7a 	bl	a18c <__malloc_lock>
    9c98:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    9c9c:	f0c0 819a 	bcc.w	9fd4 <_malloc_r+0x3a8>
    9ca0:	0a73      	lsrs	r3, r6, #9
    9ca2:	f000 808f 	beq.w	9dc4 <_malloc_r+0x198>
    9ca6:	2b04      	cmp	r3, #4
    9ca8:	f200 816f 	bhi.w	9f8a <_malloc_r+0x35e>
    9cac:	09b3      	lsrs	r3, r6, #6
    9cae:	f103 0039 	add.w	r0, r3, #57	; 0x39
    9cb2:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    9cb6:	00c3      	lsls	r3, r0, #3
    9cb8:	4f9a      	ldr	r7, [pc, #616]	; (9f24 <_malloc_r+0x2f8>)
    9cba:	443b      	add	r3, r7
    9cbc:	f1a3 0508 	sub.w	r5, r3, #8
    9cc0:	685b      	ldr	r3, [r3, #4]
    9cc2:	429d      	cmp	r5, r3
    9cc4:	d106      	bne.n	9cd4 <_malloc_r+0xa8>
    9cc6:	e00c      	b.n	9ce2 <_malloc_r+0xb6>
    9cc8:	2900      	cmp	r1, #0
    9cca:	f280 8127 	bge.w	9f1c <_malloc_r+0x2f0>
    9cce:	68db      	ldr	r3, [r3, #12]
    9cd0:	429d      	cmp	r5, r3
    9cd2:	d006      	beq.n	9ce2 <_malloc_r+0xb6>
    9cd4:	685a      	ldr	r2, [r3, #4]
    9cd6:	f022 0203 	bic.w	r2, r2, #3
    9cda:	1b91      	subs	r1, r2, r6
    9cdc:	290f      	cmp	r1, #15
    9cde:	ddf3      	ble.n	9cc8 <_malloc_r+0x9c>
    9ce0:	4660      	mov	r0, ip
    9ce2:	693d      	ldr	r5, [r7, #16]
    9ce4:	f8df c250 	ldr.w	ip, [pc, #592]	; 9f38 <_malloc_r+0x30c>
    9ce8:	4565      	cmp	r5, ip
    9cea:	d07c      	beq.n	9de6 <_malloc_r+0x1ba>
    9cec:	686a      	ldr	r2, [r5, #4]
    9cee:	f022 0203 	bic.w	r2, r2, #3
    9cf2:	1b93      	subs	r3, r2, r6
    9cf4:	2b0f      	cmp	r3, #15
    9cf6:	f300 817b 	bgt.w	9ff0 <_malloc_r+0x3c4>
    9cfa:	2b00      	cmp	r3, #0
    9cfc:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    9d00:	f280 816c 	bge.w	9fdc <_malloc_r+0x3b0>
    9d04:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    9d08:	f080 811a 	bcs.w	9f40 <_malloc_r+0x314>
    9d0c:	08d3      	lsrs	r3, r2, #3
    9d0e:	6879      	ldr	r1, [r7, #4]
    9d10:	3301      	adds	r3, #1
    9d12:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    9d16:	2201      	movs	r2, #1
    9d18:	fa02 f20e 	lsl.w	r2, r2, lr
    9d1c:	430a      	orrs	r2, r1
    9d1e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    9d22:	f8c5 e008 	str.w	lr, [r5, #8]
    9d26:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    9d2a:	3908      	subs	r1, #8
    9d2c:	60e9      	str	r1, [r5, #12]
    9d2e:	607a      	str	r2, [r7, #4]
    9d30:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    9d34:	f8ce 500c 	str.w	r5, [lr, #12]
    9d38:	1083      	asrs	r3, r0, #2
    9d3a:	2101      	movs	r1, #1
    9d3c:	4099      	lsls	r1, r3
    9d3e:	4291      	cmp	r1, r2
    9d40:	d857      	bhi.n	9df2 <_malloc_r+0x1c6>
    9d42:	4211      	tst	r1, r2
    9d44:	d106      	bne.n	9d54 <_malloc_r+0x128>
    9d46:	f020 0003 	bic.w	r0, r0, #3
    9d4a:	0049      	lsls	r1, r1, #1
    9d4c:	4211      	tst	r1, r2
    9d4e:	f100 0004 	add.w	r0, r0, #4
    9d52:	d0fa      	beq.n	9d4a <_malloc_r+0x11e>
    9d54:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    9d58:	464d      	mov	r5, r9
    9d5a:	4686      	mov	lr, r0
    9d5c:	f8d5 800c 	ldr.w	r8, [r5, #12]
    9d60:	4545      	cmp	r5, r8
    9d62:	d108      	bne.n	9d76 <_malloc_r+0x14a>
    9d64:	e11d      	b.n	9fa2 <_malloc_r+0x376>
    9d66:	2b00      	cmp	r3, #0
    9d68:	f280 8124 	bge.w	9fb4 <_malloc_r+0x388>
    9d6c:	f8d8 800c 	ldr.w	r8, [r8, #12]
    9d70:	4545      	cmp	r5, r8
    9d72:	f000 8116 	beq.w	9fa2 <_malloc_r+0x376>
    9d76:	f8d8 2004 	ldr.w	r2, [r8, #4]
    9d7a:	f022 0203 	bic.w	r2, r2, #3
    9d7e:	1b93      	subs	r3, r2, r6
    9d80:	2b0f      	cmp	r3, #15
    9d82:	ddf0      	ble.n	9d66 <_malloc_r+0x13a>
    9d84:	4620      	mov	r0, r4
    9d86:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    9d8a:	eb08 0106 	add.w	r1, r8, r6
    9d8e:	f046 0601 	orr.w	r6, r6, #1
    9d92:	f8c8 6004 	str.w	r6, [r8, #4]
    9d96:	60ec      	str	r4, [r5, #12]
    9d98:	60a5      	str	r5, [r4, #8]
    9d9a:	f043 0401 	orr.w	r4, r3, #1
    9d9e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    9da2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    9da6:	604c      	str	r4, [r1, #4]
    9da8:	f848 3002 	str.w	r3, [r8, r2]
    9dac:	f000 f9f4 	bl	a198 <__malloc_unlock>
    9db0:	f108 0508 	add.w	r5, r8, #8
    9db4:	e002      	b.n	9dbc <_malloc_r+0x190>
    9db6:	230c      	movs	r3, #12
    9db8:	6023      	str	r3, [r4, #0]
    9dba:	2500      	movs	r5, #0
    9dbc:	4628      	mov	r0, r5
    9dbe:	b003      	add	sp, #12
    9dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
    9dc8:	2040      	movs	r0, #64	; 0x40
    9dca:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    9dce:	e773      	b.n	9cb8 <_malloc_r+0x8c>
    9dd0:	68d3      	ldr	r3, [r2, #12]
    9dd2:	429a      	cmp	r2, r3
    9dd4:	bf08      	it	eq
    9dd6:	3002      	addeq	r0, #2
    9dd8:	f47f af40 	bne.w	9c5c <_malloc_r+0x30>
    9ddc:	693d      	ldr	r5, [r7, #16]
    9dde:	f8df c158 	ldr.w	ip, [pc, #344]	; 9f38 <_malloc_r+0x30c>
    9de2:	4565      	cmp	r5, ip
    9de4:	d182      	bne.n	9cec <_malloc_r+0xc0>
    9de6:	687a      	ldr	r2, [r7, #4]
    9de8:	1083      	asrs	r3, r0, #2
    9dea:	2101      	movs	r1, #1
    9dec:	4099      	lsls	r1, r3
    9dee:	4291      	cmp	r1, r2
    9df0:	d9a7      	bls.n	9d42 <_malloc_r+0x116>
    9df2:	68bd      	ldr	r5, [r7, #8]
    9df4:	686b      	ldr	r3, [r5, #4]
    9df6:	f023 0903 	bic.w	r9, r3, #3
    9dfa:	454e      	cmp	r6, r9
    9dfc:	d803      	bhi.n	9e06 <_malloc_r+0x1da>
    9dfe:	eba9 0306 	sub.w	r3, r9, r6
    9e02:	2b0f      	cmp	r3, #15
    9e04:	dc7a      	bgt.n	9efc <_malloc_r+0x2d0>
    9e06:	f8df b134 	ldr.w	fp, [pc, #308]	; 9f3c <_malloc_r+0x310>
    9e0a:	4b47      	ldr	r3, [pc, #284]	; (9f28 <_malloc_r+0x2fc>)
    9e0c:	f8db 2000 	ldr.w	r2, [fp]
    9e10:	681b      	ldr	r3, [r3, #0]
    9e12:	3201      	adds	r2, #1
    9e14:	4433      	add	r3, r6
    9e16:	eb05 0a09 	add.w	sl, r5, r9
    9e1a:	f000 8133 	beq.w	a084 <_malloc_r+0x458>
    9e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    9e22:	330f      	adds	r3, #15
    9e24:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    9e28:	f028 080f 	bic.w	r8, r8, #15
    9e2c:	4641      	mov	r1, r8
    9e2e:	4620      	mov	r0, r4
    9e30:	f001 ff32 	bl	bc98 <_sbrk_r>
    9e34:	1c41      	adds	r1, r0, #1
    9e36:	4602      	mov	r2, r0
    9e38:	f000 80f3 	beq.w	a022 <_malloc_r+0x3f6>
    9e3c:	4582      	cmp	sl, r0
    9e3e:	f200 80ee 	bhi.w	a01e <_malloc_r+0x3f2>
    9e42:	4b3a      	ldr	r3, [pc, #232]	; (9f2c <_malloc_r+0x300>)
    9e44:	6819      	ldr	r1, [r3, #0]
    9e46:	4441      	add	r1, r8
    9e48:	6019      	str	r1, [r3, #0]
    9e4a:	4608      	mov	r0, r1
    9e4c:	f000 814e 	beq.w	a0ec <_malloc_r+0x4c0>
    9e50:	f8db 1000 	ldr.w	r1, [fp]
    9e54:	9301      	str	r3, [sp, #4]
    9e56:	3101      	adds	r1, #1
    9e58:	bf1b      	ittet	ne
    9e5a:	eba2 010a 	subne.w	r1, r2, sl
    9e5e:	1809      	addne	r1, r1, r0
    9e60:	f8cb 2000 	streq.w	r2, [fp]
    9e64:	6019      	strne	r1, [r3, #0]
    9e66:	f012 0b07 	ands.w	fp, r2, #7
    9e6a:	f000 8117 	beq.w	a09c <_malloc_r+0x470>
    9e6e:	f1cb 0108 	rsb	r1, fp, #8
    9e72:	440a      	add	r2, r1
    9e74:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    9e78:	4490      	add	r8, r2
    9e7a:	3108      	adds	r1, #8
    9e7c:	eba1 0108 	sub.w	r1, r1, r8
    9e80:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    9e84:	4651      	mov	r1, sl
    9e86:	4620      	mov	r0, r4
    9e88:	9200      	str	r2, [sp, #0]
    9e8a:	f001 ff05 	bl	bc98 <_sbrk_r>
    9e8e:	1c42      	adds	r2, r0, #1
    9e90:	e9dd 2300 	ldrd	r2, r3, [sp]
    9e94:	f000 814f 	beq.w	a136 <_malloc_r+0x50a>
    9e98:	1a80      	subs	r0, r0, r2
    9e9a:	eb00 080a 	add.w	r8, r0, sl
    9e9e:	6819      	ldr	r1, [r3, #0]
    9ea0:	60ba      	str	r2, [r7, #8]
    9ea2:	f048 0001 	orr.w	r0, r8, #1
    9ea6:	4451      	add	r1, sl
    9ea8:	42bd      	cmp	r5, r7
    9eaa:	6050      	str	r0, [r2, #4]
    9eac:	6019      	str	r1, [r3, #0]
    9eae:	f000 8129 	beq.w	a104 <_malloc_r+0x4d8>
    9eb2:	f1b9 0f0f 	cmp.w	r9, #15
    9eb6:	f240 8127 	bls.w	a108 <_malloc_r+0x4dc>
    9eba:	6868      	ldr	r0, [r5, #4]
    9ebc:	f1a9 0c0c 	sub.w	ip, r9, #12
    9ec0:	f02c 0c07 	bic.w	ip, ip, #7
    9ec4:	f000 0001 	and.w	r0, r0, #1
    9ec8:	ea40 000c 	orr.w	r0, r0, ip
    9ecc:	6068      	str	r0, [r5, #4]
    9ece:	f04f 0e05 	mov.w	lr, #5
    9ed2:	eb05 000c 	add.w	r0, r5, ip
    9ed6:	f1bc 0f0f 	cmp.w	ip, #15
    9eda:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    9ede:	f200 8132 	bhi.w	a146 <_malloc_r+0x51a>
    9ee2:	6850      	ldr	r0, [r2, #4]
    9ee4:	4615      	mov	r5, r2
    9ee6:	4b12      	ldr	r3, [pc, #72]	; (9f30 <_malloc_r+0x304>)
    9ee8:	681a      	ldr	r2, [r3, #0]
    9eea:	428a      	cmp	r2, r1
    9eec:	bf38      	it	cc
    9eee:	6019      	strcc	r1, [r3, #0]
    9ef0:	4b10      	ldr	r3, [pc, #64]	; (9f34 <_malloc_r+0x308>)
    9ef2:	681a      	ldr	r2, [r3, #0]
    9ef4:	428a      	cmp	r2, r1
    9ef6:	bf38      	it	cc
    9ef8:	6019      	strcc	r1, [r3, #0]
    9efa:	e094      	b.n	a026 <_malloc_r+0x3fa>
    9efc:	19aa      	adds	r2, r5, r6
    9efe:	f043 0301 	orr.w	r3, r3, #1
    9f02:	f046 0601 	orr.w	r6, r6, #1
    9f06:	606e      	str	r6, [r5, #4]
    9f08:	4620      	mov	r0, r4
    9f0a:	60ba      	str	r2, [r7, #8]
    9f0c:	6053      	str	r3, [r2, #4]
    9f0e:	f000 f943 	bl	a198 <__malloc_unlock>
    9f12:	3508      	adds	r5, #8
    9f14:	4628      	mov	r0, r5
    9f16:	b003      	add	sp, #12
    9f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f1c:	68d9      	ldr	r1, [r3, #12]
    9f1e:	441a      	add	r2, r3
    9f20:	e6a1      	b.n	9c66 <_malloc_r+0x3a>
    9f22:	bf00      	nop
    9f24:	20008760 	.word	0x20008760
    9f28:	20028ae4 	.word	0x20028ae4
    9f2c:	20028ab4 	.word	0x20028ab4
    9f30:	20028adc 	.word	0x20028adc
    9f34:	20028ae0 	.word	0x20028ae0
    9f38:	20008768 	.word	0x20008768
    9f3c:	20008b68 	.word	0x20008b68
    9f40:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    9f44:	ea4f 2352 	mov.w	r3, r2, lsr #9
    9f48:	d363      	bcc.n	a012 <_malloc_r+0x3e6>
    9f4a:	2b14      	cmp	r3, #20
    9f4c:	f200 80b7 	bhi.w	a0be <_malloc_r+0x492>
    9f50:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    9f54:	00c9      	lsls	r1, r1, #3
    9f56:	335b      	adds	r3, #91	; 0x5b
    9f58:	eb07 0e01 	add.w	lr, r7, r1
    9f5c:	5879      	ldr	r1, [r7, r1]
    9f5e:	f1ae 0e08 	sub.w	lr, lr, #8
    9f62:	458e      	cmp	lr, r1
    9f64:	f000 8091 	beq.w	a08a <_malloc_r+0x45e>
    9f68:	684b      	ldr	r3, [r1, #4]
    9f6a:	f023 0303 	bic.w	r3, r3, #3
    9f6e:	4293      	cmp	r3, r2
    9f70:	d902      	bls.n	9f78 <_malloc_r+0x34c>
    9f72:	6889      	ldr	r1, [r1, #8]
    9f74:	458e      	cmp	lr, r1
    9f76:	d1f7      	bne.n	9f68 <_malloc_r+0x33c>
    9f78:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    9f7c:	687a      	ldr	r2, [r7, #4]
    9f7e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    9f82:	f8ce 5008 	str.w	r5, [lr, #8]
    9f86:	60cd      	str	r5, [r1, #12]
    9f88:	e6d6      	b.n	9d38 <_malloc_r+0x10c>
    9f8a:	2b14      	cmp	r3, #20
    9f8c:	d959      	bls.n	a042 <_malloc_r+0x416>
    9f8e:	2b54      	cmp	r3, #84	; 0x54
    9f90:	f200 809d 	bhi.w	a0ce <_malloc_r+0x4a2>
    9f94:	0b33      	lsrs	r3, r6, #12
    9f96:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    9f9a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    9f9e:	00c3      	lsls	r3, r0, #3
    9fa0:	e68a      	b.n	9cb8 <_malloc_r+0x8c>
    9fa2:	f10e 0e01 	add.w	lr, lr, #1
    9fa6:	f01e 0f03 	tst.w	lr, #3
    9faa:	f105 0508 	add.w	r5, r5, #8
    9fae:	f47f aed5 	bne.w	9d5c <_malloc_r+0x130>
    9fb2:	e051      	b.n	a058 <_malloc_r+0x42c>
    9fb4:	4442      	add	r2, r8
    9fb6:	4645      	mov	r5, r8
    9fb8:	6853      	ldr	r3, [r2, #4]
    9fba:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9fbe:	f043 0301 	orr.w	r3, r3, #1
    9fc2:	6053      	str	r3, [r2, #4]
    9fc4:	f855 3f08 	ldr.w	r3, [r5, #8]!
    9fc8:	4620      	mov	r0, r4
    9fca:	60d9      	str	r1, [r3, #12]
    9fcc:	608b      	str	r3, [r1, #8]
    9fce:	f000 f8e3 	bl	a198 <__malloc_unlock>
    9fd2:	e6f3      	b.n	9dbc <_malloc_r+0x190>
    9fd4:	08f0      	lsrs	r0, r6, #3
    9fd6:	f106 0208 	add.w	r2, r6, #8
    9fda:	e637      	b.n	9c4c <_malloc_r+0x20>
    9fdc:	442a      	add	r2, r5
    9fde:	4620      	mov	r0, r4
    9fe0:	6853      	ldr	r3, [r2, #4]
    9fe2:	f043 0301 	orr.w	r3, r3, #1
    9fe6:	6053      	str	r3, [r2, #4]
    9fe8:	3508      	adds	r5, #8
    9fea:	f000 f8d5 	bl	a198 <__malloc_unlock>
    9fee:	e6e5      	b.n	9dbc <_malloc_r+0x190>
    9ff0:	19a9      	adds	r1, r5, r6
    9ff2:	4620      	mov	r0, r4
    9ff4:	f046 0601 	orr.w	r6, r6, #1
    9ff8:	f043 0401 	orr.w	r4, r3, #1
    9ffc:	606e      	str	r6, [r5, #4]
    9ffe:	e9c7 1104 	strd	r1, r1, [r7, #16]
    a002:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    a006:	604c      	str	r4, [r1, #4]
    a008:	50ab      	str	r3, [r5, r2]
    a00a:	f000 f8c5 	bl	a198 <__malloc_unlock>
    a00e:	3508      	adds	r5, #8
    a010:	e6d4      	b.n	9dbc <_malloc_r+0x190>
    a012:	0993      	lsrs	r3, r2, #6
    a014:	f103 0139 	add.w	r1, r3, #57	; 0x39
    a018:	00c9      	lsls	r1, r1, #3
    a01a:	3338      	adds	r3, #56	; 0x38
    a01c:	e79c      	b.n	9f58 <_malloc_r+0x32c>
    a01e:	42bd      	cmp	r5, r7
    a020:	d05f      	beq.n	a0e2 <_malloc_r+0x4b6>
    a022:	68bd      	ldr	r5, [r7, #8]
    a024:	6868      	ldr	r0, [r5, #4]
    a026:	f020 0803 	bic.w	r8, r0, #3
    a02a:	4546      	cmp	r6, r8
    a02c:	eba8 0306 	sub.w	r3, r8, r6
    a030:	d802      	bhi.n	a038 <_malloc_r+0x40c>
    a032:	2b0f      	cmp	r3, #15
    a034:	f73f af62 	bgt.w	9efc <_malloc_r+0x2d0>
    a038:	4620      	mov	r0, r4
    a03a:	f000 f8ad 	bl	a198 <__malloc_unlock>
    a03e:	2500      	movs	r5, #0
    a040:	e6bc      	b.n	9dbc <_malloc_r+0x190>
    a042:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    a046:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    a04a:	00c3      	lsls	r3, r0, #3
    a04c:	e634      	b.n	9cb8 <_malloc_r+0x8c>
    a04e:	f859 3908 	ldr.w	r3, [r9], #-8
    a052:	454b      	cmp	r3, r9
    a054:	f040 8096 	bne.w	a184 <_malloc_r+0x558>
    a058:	f010 0f03 	tst.w	r0, #3
    a05c:	f100 30ff 	add.w	r0, r0, #4294967295
    a060:	d1f5      	bne.n	a04e <_malloc_r+0x422>
    a062:	687b      	ldr	r3, [r7, #4]
    a064:	ea23 0301 	bic.w	r3, r3, r1
    a068:	607b      	str	r3, [r7, #4]
    a06a:	0049      	lsls	r1, r1, #1
    a06c:	4299      	cmp	r1, r3
    a06e:	f63f aec0 	bhi.w	9df2 <_malloc_r+0x1c6>
    a072:	b919      	cbnz	r1, a07c <_malloc_r+0x450>
    a074:	e6bd      	b.n	9df2 <_malloc_r+0x1c6>
    a076:	0049      	lsls	r1, r1, #1
    a078:	f10e 0e04 	add.w	lr, lr, #4
    a07c:	4219      	tst	r1, r3
    a07e:	d0fa      	beq.n	a076 <_malloc_r+0x44a>
    a080:	4670      	mov	r0, lr
    a082:	e667      	b.n	9d54 <_malloc_r+0x128>
    a084:	f103 0810 	add.w	r8, r3, #16
    a088:	e6d0      	b.n	9e2c <_malloc_r+0x200>
    a08a:	109a      	asrs	r2, r3, #2
    a08c:	f04f 0801 	mov.w	r8, #1
    a090:	687b      	ldr	r3, [r7, #4]
    a092:	fa08 f202 	lsl.w	r2, r8, r2
    a096:	431a      	orrs	r2, r3
    a098:	607a      	str	r2, [r7, #4]
    a09a:	e770      	b.n	9f7e <_malloc_r+0x352>
    a09c:	eb02 0108 	add.w	r1, r2, r8
    a0a0:	4249      	negs	r1, r1
    a0a2:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    a0a6:	4651      	mov	r1, sl
    a0a8:	4620      	mov	r0, r4
    a0aa:	9200      	str	r2, [sp, #0]
    a0ac:	f001 fdf4 	bl	bc98 <_sbrk_r>
    a0b0:	1c43      	adds	r3, r0, #1
    a0b2:	e9dd 2300 	ldrd	r2, r3, [sp]
    a0b6:	f47f aeef 	bne.w	9e98 <_malloc_r+0x26c>
    a0ba:	46da      	mov	sl, fp
    a0bc:	e6ef      	b.n	9e9e <_malloc_r+0x272>
    a0be:	2b54      	cmp	r3, #84	; 0x54
    a0c0:	d825      	bhi.n	a10e <_malloc_r+0x4e2>
    a0c2:	0b13      	lsrs	r3, r2, #12
    a0c4:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    a0c8:	00c9      	lsls	r1, r1, #3
    a0ca:	336e      	adds	r3, #110	; 0x6e
    a0cc:	e744      	b.n	9f58 <_malloc_r+0x32c>
    a0ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    a0d2:	d825      	bhi.n	a120 <_malloc_r+0x4f4>
    a0d4:	0bf3      	lsrs	r3, r6, #15
    a0d6:	f103 0078 	add.w	r0, r3, #120	; 0x78
    a0da:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    a0de:	00c3      	lsls	r3, r0, #3
    a0e0:	e5ea      	b.n	9cb8 <_malloc_r+0x8c>
    a0e2:	4b29      	ldr	r3, [pc, #164]	; (a188 <_malloc_r+0x55c>)
    a0e4:	6818      	ldr	r0, [r3, #0]
    a0e6:	4440      	add	r0, r8
    a0e8:	6018      	str	r0, [r3, #0]
    a0ea:	e6b1      	b.n	9e50 <_malloc_r+0x224>
    a0ec:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    a0f0:	f1bc 0f00 	cmp.w	ip, #0
    a0f4:	f47f aeac 	bne.w	9e50 <_malloc_r+0x224>
    a0f8:	68bd      	ldr	r5, [r7, #8]
    a0fa:	44c8      	add	r8, r9
    a0fc:	f048 0001 	orr.w	r0, r8, #1
    a100:	6068      	str	r0, [r5, #4]
    a102:	e6f0      	b.n	9ee6 <_malloc_r+0x2ba>
    a104:	4615      	mov	r5, r2
    a106:	e6ee      	b.n	9ee6 <_malloc_r+0x2ba>
    a108:	2301      	movs	r3, #1
    a10a:	6053      	str	r3, [r2, #4]
    a10c:	e794      	b.n	a038 <_malloc_r+0x40c>
    a10e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    a112:	d823      	bhi.n	a15c <_malloc_r+0x530>
    a114:	0bd3      	lsrs	r3, r2, #15
    a116:	f103 0178 	add.w	r1, r3, #120	; 0x78
    a11a:	00c9      	lsls	r1, r1, #3
    a11c:	3377      	adds	r3, #119	; 0x77
    a11e:	e71b      	b.n	9f58 <_malloc_r+0x32c>
    a120:	f240 5254 	movw	r2, #1364	; 0x554
    a124:	4293      	cmp	r3, r2
    a126:	d823      	bhi.n	a170 <_malloc_r+0x544>
    a128:	0cb3      	lsrs	r3, r6, #18
    a12a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    a12e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    a132:	00c3      	lsls	r3, r0, #3
    a134:	e5c0      	b.n	9cb8 <_malloc_r+0x8c>
    a136:	f1ab 0b08 	sub.w	fp, fp, #8
    a13a:	44d8      	add	r8, fp
    a13c:	eba8 0802 	sub.w	r8, r8, r2
    a140:	f04f 0a00 	mov.w	sl, #0
    a144:	e6ab      	b.n	9e9e <_malloc_r+0x272>
    a146:	f105 0108 	add.w	r1, r5, #8
    a14a:	4620      	mov	r0, r4
    a14c:	9300      	str	r3, [sp, #0]
    a14e:	f002 f949 	bl	c3e4 <_free_r>
    a152:	68bd      	ldr	r5, [r7, #8]
    a154:	9b00      	ldr	r3, [sp, #0]
    a156:	6868      	ldr	r0, [r5, #4]
    a158:	6819      	ldr	r1, [r3, #0]
    a15a:	e6c4      	b.n	9ee6 <_malloc_r+0x2ba>
    a15c:	f240 5154 	movw	r1, #1364	; 0x554
    a160:	428b      	cmp	r3, r1
    a162:	d80b      	bhi.n	a17c <_malloc_r+0x550>
    a164:	0c93      	lsrs	r3, r2, #18
    a166:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    a16a:	00c9      	lsls	r1, r1, #3
    a16c:	337c      	adds	r3, #124	; 0x7c
    a16e:	e6f3      	b.n	9f58 <_malloc_r+0x32c>
    a170:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    a174:	207f      	movs	r0, #127	; 0x7f
    a176:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    a17a:	e59d      	b.n	9cb8 <_malloc_r+0x8c>
    a17c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    a180:	237e      	movs	r3, #126	; 0x7e
    a182:	e6e9      	b.n	9f58 <_malloc_r+0x32c>
    a184:	687b      	ldr	r3, [r7, #4]
    a186:	e770      	b.n	a06a <_malloc_r+0x43e>
    a188:	20028ab4 	.word	0x20028ab4

0000a18c <__malloc_lock>:
    a18c:	4801      	ldr	r0, [pc, #4]	; (a194 <__malloc_lock+0x8>)
    a18e:	f001 bdd9 	b.w	bd44 <__retarget_lock_acquire_recursive>
    a192:	bf00      	nop
    a194:	20028aac 	.word	0x20028aac

0000a198 <__malloc_unlock>:
    a198:	4801      	ldr	r0, [pc, #4]	; (a1a0 <__malloc_unlock+0x8>)
    a19a:	f001 bdd5 	b.w	bd48 <__retarget_lock_release_recursive>
    a19e:	bf00      	nop
    a1a0:	20028aac 	.word	0x20028aac

0000a1a4 <realloc>:
    a1a4:	b410      	push	{r4}
    a1a6:	4c04      	ldr	r4, [pc, #16]	; (a1b8 <realloc+0x14>)
    a1a8:	4603      	mov	r3, r0
    a1aa:	460a      	mov	r2, r1
    a1ac:	6820      	ldr	r0, [r4, #0]
    a1ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    a1b2:	4619      	mov	r1, r3
    a1b4:	f000 b802 	b.w	a1bc <_realloc_r>
    a1b8:	20008b7c 	.word	0x20008b7c

0000a1bc <_realloc_r>:
    a1bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1c0:	4617      	mov	r7, r2
    a1c2:	2900      	cmp	r1, #0
    a1c4:	f000 8098 	beq.w	a2f8 <_realloc_r+0x13c>
    a1c8:	460c      	mov	r4, r1
    a1ca:	f107 050b 	add.w	r5, r7, #11
    a1ce:	4680      	mov	r8, r0
    a1d0:	f7ff ffdc 	bl	a18c <__malloc_lock>
    a1d4:	2d16      	cmp	r5, #22
    a1d6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    a1da:	d85b      	bhi.n	a294 <_realloc_r+0xd8>
    a1dc:	2510      	movs	r5, #16
    a1de:	462a      	mov	r2, r5
    a1e0:	42af      	cmp	r7, r5
    a1e2:	d85c      	bhi.n	a29e <_realloc_r+0xe2>
    a1e4:	f021 0603 	bic.w	r6, r1, #3
    a1e8:	4296      	cmp	r6, r2
    a1ea:	f1a4 0908 	sub.w	r9, r4, #8
    a1ee:	da62      	bge.n	a2b6 <_realloc_r+0xfa>
    a1f0:	4bbc      	ldr	r3, [pc, #752]	; (a4e4 <_realloc_r+0x328>)
    a1f2:	f8d3 c008 	ldr.w	ip, [r3, #8]
    a1f6:	eb09 0006 	add.w	r0, r9, r6
    a1fa:	4584      	cmp	ip, r0
    a1fc:	f000 8097 	beq.w	a32e <_realloc_r+0x172>
    a200:	f8d0 c004 	ldr.w	ip, [r0, #4]
    a204:	f02c 0301 	bic.w	r3, ip, #1
    a208:	4403      	add	r3, r0
    a20a:	685b      	ldr	r3, [r3, #4]
    a20c:	07db      	lsls	r3, r3, #31
    a20e:	d468      	bmi.n	a2e2 <_realloc_r+0x126>
    a210:	f02c 0c03 	bic.w	ip, ip, #3
    a214:	eb06 030c 	add.w	r3, r6, ip
    a218:	4293      	cmp	r3, r2
    a21a:	da47      	bge.n	a2ac <_realloc_r+0xf0>
    a21c:	07cb      	lsls	r3, r1, #31
    a21e:	d410      	bmi.n	a242 <_realloc_r+0x86>
    a220:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a224:	eba9 0a03 	sub.w	sl, r9, r3
    a228:	f8da 3004 	ldr.w	r3, [sl, #4]
    a22c:	f023 0103 	bic.w	r1, r3, #3
    a230:	448c      	add	ip, r1
    a232:	44b4      	add	ip, r6
    a234:	4594      	cmp	ip, r2
    a236:	f280 8111 	bge.w	a45c <_realloc_r+0x2a0>
    a23a:	1873      	adds	r3, r6, r1
    a23c:	4293      	cmp	r3, r2
    a23e:	f280 80e8 	bge.w	a412 <_realloc_r+0x256>
    a242:	4639      	mov	r1, r7
    a244:	4640      	mov	r0, r8
    a246:	f7ff fcf1 	bl	9c2c <_malloc_r>
    a24a:	4607      	mov	r7, r0
    a24c:	b1e0      	cbz	r0, a288 <_realloc_r+0xcc>
    a24e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a252:	f023 0301 	bic.w	r3, r3, #1
    a256:	444b      	add	r3, r9
    a258:	f1a0 0208 	sub.w	r2, r0, #8
    a25c:	4293      	cmp	r3, r2
    a25e:	f000 80d2 	beq.w	a406 <_realloc_r+0x24a>
    a262:	1f32      	subs	r2, r6, #4
    a264:	2a24      	cmp	r2, #36	; 0x24
    a266:	f200 80f5 	bhi.w	a454 <_realloc_r+0x298>
    a26a:	2a13      	cmp	r2, #19
    a26c:	f200 80ac 	bhi.w	a3c8 <_realloc_r+0x20c>
    a270:	4603      	mov	r3, r0
    a272:	4622      	mov	r2, r4
    a274:	6811      	ldr	r1, [r2, #0]
    a276:	6019      	str	r1, [r3, #0]
    a278:	6851      	ldr	r1, [r2, #4]
    a27a:	6059      	str	r1, [r3, #4]
    a27c:	6892      	ldr	r2, [r2, #8]
    a27e:	609a      	str	r2, [r3, #8]
    a280:	4621      	mov	r1, r4
    a282:	4640      	mov	r0, r8
    a284:	f002 f8ae 	bl	c3e4 <_free_r>
    a288:	4640      	mov	r0, r8
    a28a:	f7ff ff85 	bl	a198 <__malloc_unlock>
    a28e:	4638      	mov	r0, r7
    a290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a294:	f025 0507 	bic.w	r5, r5, #7
    a298:	2d00      	cmp	r5, #0
    a29a:	462a      	mov	r2, r5
    a29c:	daa0      	bge.n	a1e0 <_realloc_r+0x24>
    a29e:	230c      	movs	r3, #12
    a2a0:	f8c8 3000 	str.w	r3, [r8]
    a2a4:	2700      	movs	r7, #0
    a2a6:	4638      	mov	r0, r7
    a2a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2ac:	461e      	mov	r6, r3
    a2ae:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    a2b2:	60d3      	str	r3, [r2, #12]
    a2b4:	609a      	str	r2, [r3, #8]
    a2b6:	1b73      	subs	r3, r6, r5
    a2b8:	2b0f      	cmp	r3, #15
    a2ba:	d822      	bhi.n	a302 <_realloc_r+0x146>
    a2bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a2c0:	f003 0301 	and.w	r3, r3, #1
    a2c4:	4333      	orrs	r3, r6
    a2c6:	444e      	add	r6, r9
    a2c8:	f8c9 3004 	str.w	r3, [r9, #4]
    a2cc:	6873      	ldr	r3, [r6, #4]
    a2ce:	f043 0301 	orr.w	r3, r3, #1
    a2d2:	6073      	str	r3, [r6, #4]
    a2d4:	4640      	mov	r0, r8
    a2d6:	4627      	mov	r7, r4
    a2d8:	f7ff ff5e 	bl	a198 <__malloc_unlock>
    a2dc:	4638      	mov	r0, r7
    a2de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2e2:	07c9      	lsls	r1, r1, #31
    a2e4:	d4ad      	bmi.n	a242 <_realloc_r+0x86>
    a2e6:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a2ea:	eba9 0a03 	sub.w	sl, r9, r3
    a2ee:	f8da 1004 	ldr.w	r1, [sl, #4]
    a2f2:	f021 0103 	bic.w	r1, r1, #3
    a2f6:	e7a0      	b.n	a23a <_realloc_r+0x7e>
    a2f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2fc:	4611      	mov	r1, r2
    a2fe:	f7ff bc95 	b.w	9c2c <_malloc_r>
    a302:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a306:	eb09 0105 	add.w	r1, r9, r5
    a30a:	f002 0201 	and.w	r2, r2, #1
    a30e:	444e      	add	r6, r9
    a310:	f043 0301 	orr.w	r3, r3, #1
    a314:	432a      	orrs	r2, r5
    a316:	f8c9 2004 	str.w	r2, [r9, #4]
    a31a:	604b      	str	r3, [r1, #4]
    a31c:	6873      	ldr	r3, [r6, #4]
    a31e:	f043 0301 	orr.w	r3, r3, #1
    a322:	3108      	adds	r1, #8
    a324:	6073      	str	r3, [r6, #4]
    a326:	4640      	mov	r0, r8
    a328:	f002 f85c 	bl	c3e4 <_free_r>
    a32c:	e7d2      	b.n	a2d4 <_realloc_r+0x118>
    a32e:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a332:	f020 0b03 	bic.w	fp, r0, #3
    a336:	eb06 0c0b 	add.w	ip, r6, fp
    a33a:	f105 0010 	add.w	r0, r5, #16
    a33e:	4584      	cmp	ip, r0
    a340:	da4d      	bge.n	a3de <_realloc_r+0x222>
    a342:	07c9      	lsls	r1, r1, #31
    a344:	f53f af7d 	bmi.w	a242 <_realloc_r+0x86>
    a348:	f854 1c08 	ldr.w	r1, [r4, #-8]
    a34c:	eba9 0a01 	sub.w	sl, r9, r1
    a350:	f8da 1004 	ldr.w	r1, [sl, #4]
    a354:	f021 0103 	bic.w	r1, r1, #3
    a358:	448b      	add	fp, r1
    a35a:	44b3      	add	fp, r6
    a35c:	4558      	cmp	r0, fp
    a35e:	f73f af6c 	bgt.w	a23a <_realloc_r+0x7e>
    a362:	4657      	mov	r7, sl
    a364:	f8da 100c 	ldr.w	r1, [sl, #12]
    a368:	f857 0f08 	ldr.w	r0, [r7, #8]!
    a36c:	1f32      	subs	r2, r6, #4
    a36e:	2a24      	cmp	r2, #36	; 0x24
    a370:	60c1      	str	r1, [r0, #12]
    a372:	6088      	str	r0, [r1, #8]
    a374:	f200 80db 	bhi.w	a52e <_realloc_r+0x372>
    a378:	2a13      	cmp	r2, #19
    a37a:	f240 80d6 	bls.w	a52a <_realloc_r+0x36e>
    a37e:	6821      	ldr	r1, [r4, #0]
    a380:	f8ca 1008 	str.w	r1, [sl, #8]
    a384:	6861      	ldr	r1, [r4, #4]
    a386:	f8ca 100c 	str.w	r1, [sl, #12]
    a38a:	2a1b      	cmp	r2, #27
    a38c:	f200 80df 	bhi.w	a54e <_realloc_r+0x392>
    a390:	3408      	adds	r4, #8
    a392:	f10a 0210 	add.w	r2, sl, #16
    a396:	6821      	ldr	r1, [r4, #0]
    a398:	6011      	str	r1, [r2, #0]
    a39a:	6861      	ldr	r1, [r4, #4]
    a39c:	6051      	str	r1, [r2, #4]
    a39e:	68a1      	ldr	r1, [r4, #8]
    a3a0:	6091      	str	r1, [r2, #8]
    a3a2:	eb0a 0105 	add.w	r1, sl, r5
    a3a6:	ebab 0205 	sub.w	r2, fp, r5
    a3aa:	f042 0201 	orr.w	r2, r2, #1
    a3ae:	6099      	str	r1, [r3, #8]
    a3b0:	604a      	str	r2, [r1, #4]
    a3b2:	f8da 3004 	ldr.w	r3, [sl, #4]
    a3b6:	f003 0301 	and.w	r3, r3, #1
    a3ba:	432b      	orrs	r3, r5
    a3bc:	4640      	mov	r0, r8
    a3be:	f8ca 3004 	str.w	r3, [sl, #4]
    a3c2:	f7ff fee9 	bl	a198 <__malloc_unlock>
    a3c6:	e76e      	b.n	a2a6 <_realloc_r+0xea>
    a3c8:	6823      	ldr	r3, [r4, #0]
    a3ca:	6003      	str	r3, [r0, #0]
    a3cc:	6863      	ldr	r3, [r4, #4]
    a3ce:	6043      	str	r3, [r0, #4]
    a3d0:	2a1b      	cmp	r2, #27
    a3d2:	d868      	bhi.n	a4a6 <_realloc_r+0x2ea>
    a3d4:	f104 0208 	add.w	r2, r4, #8
    a3d8:	f100 0308 	add.w	r3, r0, #8
    a3dc:	e74a      	b.n	a274 <_realloc_r+0xb8>
    a3de:	eb09 0205 	add.w	r2, r9, r5
    a3e2:	609a      	str	r2, [r3, #8]
    a3e4:	ebac 0305 	sub.w	r3, ip, r5
    a3e8:	f043 0301 	orr.w	r3, r3, #1
    a3ec:	6053      	str	r3, [r2, #4]
    a3ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a3f2:	f003 0301 	and.w	r3, r3, #1
    a3f6:	432b      	orrs	r3, r5
    a3f8:	4640      	mov	r0, r8
    a3fa:	f844 3c04 	str.w	r3, [r4, #-4]
    a3fe:	f7ff fecb 	bl	a198 <__malloc_unlock>
    a402:	4627      	mov	r7, r4
    a404:	e74f      	b.n	a2a6 <_realloc_r+0xea>
    a406:	f850 3c04 	ldr.w	r3, [r0, #-4]
    a40a:	f023 0303 	bic.w	r3, r3, #3
    a40e:	441e      	add	r6, r3
    a410:	e751      	b.n	a2b6 <_realloc_r+0xfa>
    a412:	4657      	mov	r7, sl
    a414:	f8da 100c 	ldr.w	r1, [sl, #12]
    a418:	f857 0f08 	ldr.w	r0, [r7, #8]!
    a41c:	1f32      	subs	r2, r6, #4
    a41e:	2a24      	cmp	r2, #36	; 0x24
    a420:	60c1      	str	r1, [r0, #12]
    a422:	6088      	str	r0, [r1, #8]
    a424:	d84c      	bhi.n	a4c0 <_realloc_r+0x304>
    a426:	2a13      	cmp	r2, #19
    a428:	d948      	bls.n	a4bc <_realloc_r+0x300>
    a42a:	6821      	ldr	r1, [r4, #0]
    a42c:	f8ca 1008 	str.w	r1, [sl, #8]
    a430:	6861      	ldr	r1, [r4, #4]
    a432:	f8ca 100c 	str.w	r1, [sl, #12]
    a436:	2a1b      	cmp	r2, #27
    a438:	d856      	bhi.n	a4e8 <_realloc_r+0x32c>
    a43a:	3408      	adds	r4, #8
    a43c:	f10a 0210 	add.w	r2, sl, #16
    a440:	461e      	mov	r6, r3
    a442:	6823      	ldr	r3, [r4, #0]
    a444:	6013      	str	r3, [r2, #0]
    a446:	6863      	ldr	r3, [r4, #4]
    a448:	6053      	str	r3, [r2, #4]
    a44a:	68a3      	ldr	r3, [r4, #8]
    a44c:	6093      	str	r3, [r2, #8]
    a44e:	46d1      	mov	r9, sl
    a450:	463c      	mov	r4, r7
    a452:	e730      	b.n	a2b6 <_realloc_r+0xfa>
    a454:	4621      	mov	r1, r4
    a456:	f001 fa95 	bl	b984 <memmove>
    a45a:	e711      	b.n	a280 <_realloc_r+0xc4>
    a45c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    a460:	4657      	mov	r7, sl
    a462:	60cb      	str	r3, [r1, #12]
    a464:	6099      	str	r1, [r3, #8]
    a466:	f857 1f08 	ldr.w	r1, [r7, #8]!
    a46a:	f8da 300c 	ldr.w	r3, [sl, #12]
    a46e:	60cb      	str	r3, [r1, #12]
    a470:	1f32      	subs	r2, r6, #4
    a472:	2a24      	cmp	r2, #36	; 0x24
    a474:	6099      	str	r1, [r3, #8]
    a476:	d82d      	bhi.n	a4d4 <_realloc_r+0x318>
    a478:	2a13      	cmp	r2, #19
    a47a:	d929      	bls.n	a4d0 <_realloc_r+0x314>
    a47c:	6823      	ldr	r3, [r4, #0]
    a47e:	f8ca 3008 	str.w	r3, [sl, #8]
    a482:	6863      	ldr	r3, [r4, #4]
    a484:	f8ca 300c 	str.w	r3, [sl, #12]
    a488:	2a1b      	cmp	r2, #27
    a48a:	d842      	bhi.n	a512 <_realloc_r+0x356>
    a48c:	3408      	adds	r4, #8
    a48e:	f10a 0310 	add.w	r3, sl, #16
    a492:	6822      	ldr	r2, [r4, #0]
    a494:	601a      	str	r2, [r3, #0]
    a496:	6862      	ldr	r2, [r4, #4]
    a498:	605a      	str	r2, [r3, #4]
    a49a:	68a2      	ldr	r2, [r4, #8]
    a49c:	609a      	str	r2, [r3, #8]
    a49e:	4666      	mov	r6, ip
    a4a0:	46d1      	mov	r9, sl
    a4a2:	463c      	mov	r4, r7
    a4a4:	e707      	b.n	a2b6 <_realloc_r+0xfa>
    a4a6:	68a3      	ldr	r3, [r4, #8]
    a4a8:	6083      	str	r3, [r0, #8]
    a4aa:	68e3      	ldr	r3, [r4, #12]
    a4ac:	60c3      	str	r3, [r0, #12]
    a4ae:	2a24      	cmp	r2, #36	; 0x24
    a4b0:	d026      	beq.n	a500 <_realloc_r+0x344>
    a4b2:	f104 0210 	add.w	r2, r4, #16
    a4b6:	f100 0310 	add.w	r3, r0, #16
    a4ba:	e6db      	b.n	a274 <_realloc_r+0xb8>
    a4bc:	463a      	mov	r2, r7
    a4be:	e7bf      	b.n	a440 <_realloc_r+0x284>
    a4c0:	4621      	mov	r1, r4
    a4c2:	4638      	mov	r0, r7
    a4c4:	461e      	mov	r6, r3
    a4c6:	46d1      	mov	r9, sl
    a4c8:	f001 fa5c 	bl	b984 <memmove>
    a4cc:	463c      	mov	r4, r7
    a4ce:	e6f2      	b.n	a2b6 <_realloc_r+0xfa>
    a4d0:	463b      	mov	r3, r7
    a4d2:	e7de      	b.n	a492 <_realloc_r+0x2d6>
    a4d4:	4621      	mov	r1, r4
    a4d6:	4638      	mov	r0, r7
    a4d8:	4666      	mov	r6, ip
    a4da:	46d1      	mov	r9, sl
    a4dc:	f001 fa52 	bl	b984 <memmove>
    a4e0:	463c      	mov	r4, r7
    a4e2:	e6e8      	b.n	a2b6 <_realloc_r+0xfa>
    a4e4:	20008760 	.word	0x20008760
    a4e8:	68a1      	ldr	r1, [r4, #8]
    a4ea:	f8ca 1010 	str.w	r1, [sl, #16]
    a4ee:	68e1      	ldr	r1, [r4, #12]
    a4f0:	f8ca 1014 	str.w	r1, [sl, #20]
    a4f4:	2a24      	cmp	r2, #36	; 0x24
    a4f6:	d020      	beq.n	a53a <_realloc_r+0x37e>
    a4f8:	3410      	adds	r4, #16
    a4fa:	f10a 0218 	add.w	r2, sl, #24
    a4fe:	e79f      	b.n	a440 <_realloc_r+0x284>
    a500:	6923      	ldr	r3, [r4, #16]
    a502:	6103      	str	r3, [r0, #16]
    a504:	6961      	ldr	r1, [r4, #20]
    a506:	6141      	str	r1, [r0, #20]
    a508:	f104 0218 	add.w	r2, r4, #24
    a50c:	f100 0318 	add.w	r3, r0, #24
    a510:	e6b0      	b.n	a274 <_realloc_r+0xb8>
    a512:	68a3      	ldr	r3, [r4, #8]
    a514:	f8ca 3010 	str.w	r3, [sl, #16]
    a518:	68e3      	ldr	r3, [r4, #12]
    a51a:	f8ca 3014 	str.w	r3, [sl, #20]
    a51e:	2a24      	cmp	r2, #36	; 0x24
    a520:	d021      	beq.n	a566 <_realloc_r+0x3aa>
    a522:	3410      	adds	r4, #16
    a524:	f10a 0318 	add.w	r3, sl, #24
    a528:	e7b3      	b.n	a492 <_realloc_r+0x2d6>
    a52a:	463a      	mov	r2, r7
    a52c:	e733      	b.n	a396 <_realloc_r+0x1da>
    a52e:	4621      	mov	r1, r4
    a530:	4638      	mov	r0, r7
    a532:	f001 fa27 	bl	b984 <memmove>
    a536:	4b16      	ldr	r3, [pc, #88]	; (a590 <_realloc_r+0x3d4>)
    a538:	e733      	b.n	a3a2 <_realloc_r+0x1e6>
    a53a:	6922      	ldr	r2, [r4, #16]
    a53c:	f8ca 2018 	str.w	r2, [sl, #24]
    a540:	6962      	ldr	r2, [r4, #20]
    a542:	f8ca 201c 	str.w	r2, [sl, #28]
    a546:	3418      	adds	r4, #24
    a548:	f10a 0220 	add.w	r2, sl, #32
    a54c:	e778      	b.n	a440 <_realloc_r+0x284>
    a54e:	68a1      	ldr	r1, [r4, #8]
    a550:	f8ca 1010 	str.w	r1, [sl, #16]
    a554:	68e1      	ldr	r1, [r4, #12]
    a556:	f8ca 1014 	str.w	r1, [sl, #20]
    a55a:	2a24      	cmp	r2, #36	; 0x24
    a55c:	d00d      	beq.n	a57a <_realloc_r+0x3be>
    a55e:	3410      	adds	r4, #16
    a560:	f10a 0218 	add.w	r2, sl, #24
    a564:	e717      	b.n	a396 <_realloc_r+0x1da>
    a566:	6923      	ldr	r3, [r4, #16]
    a568:	f8ca 3018 	str.w	r3, [sl, #24]
    a56c:	6963      	ldr	r3, [r4, #20]
    a56e:	f8ca 301c 	str.w	r3, [sl, #28]
    a572:	3418      	adds	r4, #24
    a574:	f10a 0320 	add.w	r3, sl, #32
    a578:	e78b      	b.n	a492 <_realloc_r+0x2d6>
    a57a:	6922      	ldr	r2, [r4, #16]
    a57c:	f8ca 2018 	str.w	r2, [sl, #24]
    a580:	6962      	ldr	r2, [r4, #20]
    a582:	f8ca 201c 	str.w	r2, [sl, #28]
    a586:	3418      	adds	r4, #24
    a588:	f10a 0220 	add.w	r2, sl, #32
    a58c:	e703      	b.n	a396 <_realloc_r+0x1da>
    a58e:	bf00      	nop
    a590:	20008760 	.word	0x20008760
    a594:	00000000 	.word	0x00000000

0000a598 <_strtod_l>:
    a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a59c:	ed2d 8b10 	vpush	{d8-d15}
    a5a0:	b097      	sub	sp, #92	; 0x5c
    a5a2:	468a      	mov	sl, r1
    a5a4:	2100      	movs	r1, #0
    a5a6:	9207      	str	r2, [sp, #28]
    a5a8:	9112      	str	r1, [sp, #72]	; 0x48
    a5aa:	2200      	movs	r2, #0
    a5ac:	2100      	movs	r1, #0
    a5ae:	e9cd 1204 	strd	r1, r2, [sp, #16]
    a5b2:	4680      	mov	r8, r0
    a5b4:	4651      	mov	r1, sl
    a5b6:	9111      	str	r1, [sp, #68]	; 0x44
    a5b8:	460f      	mov	r7, r1
    a5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
    a5be:	2a2d      	cmp	r2, #45	; 0x2d
    a5c0:	d85e      	bhi.n	a680 <_strtod_l+0xe8>
    a5c2:	a001      	add	r0, pc, #4	; (adr r0, a5c8 <_strtod_l+0x30>)
    a5c4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    a5c8:	0000a769 	.word	0x0000a769
    a5cc:	0000a681 	.word	0x0000a681
    a5d0:	0000a681 	.word	0x0000a681
    a5d4:	0000a681 	.word	0x0000a681
    a5d8:	0000a681 	.word	0x0000a681
    a5dc:	0000a681 	.word	0x0000a681
    a5e0:	0000a681 	.word	0x0000a681
    a5e4:	0000a681 	.word	0x0000a681
    a5e8:	0000a681 	.word	0x0000a681
    a5ec:	0000a5b7 	.word	0x0000a5b7
    a5f0:	0000a5b7 	.word	0x0000a5b7
    a5f4:	0000a5b7 	.word	0x0000a5b7
    a5f8:	0000a5b7 	.word	0x0000a5b7
    a5fc:	0000a5b7 	.word	0x0000a5b7
    a600:	0000a681 	.word	0x0000a681
    a604:	0000a681 	.word	0x0000a681
    a608:	0000a681 	.word	0x0000a681
    a60c:	0000a681 	.word	0x0000a681
    a610:	0000a681 	.word	0x0000a681
    a614:	0000a681 	.word	0x0000a681
    a618:	0000a681 	.word	0x0000a681
    a61c:	0000a681 	.word	0x0000a681
    a620:	0000a681 	.word	0x0000a681
    a624:	0000a681 	.word	0x0000a681
    a628:	0000a681 	.word	0x0000a681
    a62c:	0000a681 	.word	0x0000a681
    a630:	0000a681 	.word	0x0000a681
    a634:	0000a681 	.word	0x0000a681
    a638:	0000a681 	.word	0x0000a681
    a63c:	0000a681 	.word	0x0000a681
    a640:	0000a681 	.word	0x0000a681
    a644:	0000a681 	.word	0x0000a681
    a648:	0000a5b7 	.word	0x0000a5b7
    a64c:	0000a681 	.word	0x0000a681
    a650:	0000a681 	.word	0x0000a681
    a654:	0000a681 	.word	0x0000a681
    a658:	0000a681 	.word	0x0000a681
    a65c:	0000a681 	.word	0x0000a681
    a660:	0000a681 	.word	0x0000a681
    a664:	0000a681 	.word	0x0000a681
    a668:	0000a681 	.word	0x0000a681
    a66c:	0000a681 	.word	0x0000a681
    a670:	0000a681 	.word	0x0000a681
    a674:	0000ada3 	.word	0x0000ada3
    a678:	0000a681 	.word	0x0000a681
    a67c:	0000ad8f 	.word	0x0000ad8f
    a680:	2100      	movs	r1, #0
    a682:	9109      	str	r1, [sp, #36]	; 0x24
    a684:	2a30      	cmp	r2, #48	; 0x30
    a686:	d07d      	beq.n	a784 <_strtod_l+0x1ec>
    a688:	2300      	movs	r3, #0
    a68a:	9308      	str	r3, [sp, #32]
    a68c:	2a2f      	cmp	r2, #47	; 0x2f
    a68e:	4614      	mov	r4, r2
    a690:	f240 84cd 	bls.w	b02e <_strtod_l+0xa96>
    a694:	f04f 0900 	mov.w	r9, #0
    a698:	4638      	mov	r0, r7
    a69a:	464e      	mov	r6, r9
    a69c:	464d      	mov	r5, r9
    a69e:	e012      	b.n	a6c6 <_strtod_l+0x12e>
    a6a0:	3001      	adds	r0, #1
    a6a2:	2d08      	cmp	r5, #8
    a6a4:	9011      	str	r0, [sp, #68]	; 0x44
    a6a6:	bfc8      	it	gt
    a6a8:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    a6ac:	7804      	ldrb	r4, [r0, #0]
    a6ae:	bfc6      	itte	gt
    a6b0:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    a6b4:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    a6b8:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    a6bc:	2c2f      	cmp	r4, #47	; 0x2f
    a6be:	f105 0501 	add.w	r5, r5, #1
    a6c2:	4622      	mov	r2, r4
    a6c4:	dd6f      	ble.n	a7a6 <_strtod_l+0x20e>
    a6c6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    a6ca:	2c39      	cmp	r4, #57	; 0x39
    a6cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a6d0:	dde6      	ble.n	a6a0 <_strtod_l+0x108>
    a6d2:	499f      	ldr	r1, [pc, #636]	; (a950 <_strtod_l+0x3b8>)
    a6d4:	2201      	movs	r2, #1
    a6d6:	f001 fa23 	bl	bb20 <strncmp>
    a6da:	2800      	cmp	r0, #0
    a6dc:	d137      	bne.n	a74e <_strtod_l+0x1b6>
    a6de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a6e0:	461a      	mov	r2, r3
    a6e2:	3301      	adds	r3, #1
    a6e4:	9311      	str	r3, [sp, #68]	; 0x44
    a6e6:	7854      	ldrb	r4, [r2, #1]
    a6e8:	2d00      	cmp	r5, #0
    a6ea:	f040 8543 	bne.w	b174 <_strtod_l+0xbdc>
    a6ee:	2c30      	cmp	r4, #48	; 0x30
    a6f0:	f040 8524 	bne.w	b13c <_strtod_l+0xba4>
    a6f4:	f1c3 0201 	rsb	r2, r3, #1
    a6f8:	1898      	adds	r0, r3, r2
    a6fa:	3301      	adds	r3, #1
    a6fc:	9311      	str	r3, [sp, #68]	; 0x44
    a6fe:	781c      	ldrb	r4, [r3, #0]
    a700:	2c30      	cmp	r4, #48	; 0x30
    a702:	d0f9      	beq.n	a6f8 <_strtod_l+0x160>
    a704:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a708:	2b08      	cmp	r3, #8
    a70a:	f200 8301 	bhi.w	ad10 <_strtod_l+0x778>
    a70e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    a710:	1c43      	adds	r3, r0, #1
    a712:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a716:	930b      	str	r3, [sp, #44]	; 0x2c
    a718:	2501      	movs	r5, #1
    a71a:	46bc      	mov	ip, r7
    a71c:	f04f 0e00 	mov.w	lr, #0
    a720:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    a724:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    a728:	2000      	movs	r0, #0
    a72a:	f10c 0301 	add.w	r3, ip, #1
    a72e:	9311      	str	r3, [sp, #68]	; 0x44
    a730:	f89c 4001 	ldrb.w	r4, [ip, #1]
    a734:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    a738:	2909      	cmp	r1, #9
    a73a:	f200 82bb 	bhi.w	acb4 <_strtod_l+0x71c>
    a73e:	3001      	adds	r0, #1
    a740:	468b      	mov	fp, r1
    a742:	2900      	cmp	r1, #0
    a744:	f040 844f 	bne.w	afe6 <_strtod_l+0xa4e>
    a748:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    a74c:	e7ed      	b.n	a72a <_strtod_l+0x192>
    a74e:	2000      	movs	r0, #0
    a750:	2c65      	cmp	r4, #101	; 0x65
    a752:	46ae      	mov	lr, r5
    a754:	900b      	str	r0, [sp, #44]	; 0x2c
    a756:	4684      	mov	ip, r0
    a758:	d001      	beq.n	a75e <_strtod_l+0x1c6>
    a75a:	2c45      	cmp	r4, #69	; 0x45
    a75c:	d130      	bne.n	a7c0 <_strtod_l+0x228>
    a75e:	2d00      	cmp	r5, #0
    a760:	d16b      	bne.n	a83a <_strtod_l+0x2a2>
    a762:	9b08      	ldr	r3, [sp, #32]
    a764:	4303      	orrs	r3, r0
    a766:	d167      	bne.n	a838 <_strtod_l+0x2a0>
    a768:	9b07      	ldr	r3, [sp, #28]
    a76a:	ed9f 8b77 	vldr	d8, [pc, #476]	; a948 <_strtod_l+0x3b0>
    a76e:	b113      	cbz	r3, a776 <_strtod_l+0x1de>
    a770:	9b07      	ldr	r3, [sp, #28]
    a772:	f8c3 a000 	str.w	sl, [r3]
    a776:	eeb0 0b48 	vmov.f64	d0, d8
    a77a:	b017      	add	sp, #92	; 0x5c
    a77c:	ecbd 8b10 	vpop	{d8-d15}
    a780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a784:	787a      	ldrb	r2, [r7, #1]
    a786:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    a78a:	2a58      	cmp	r2, #88	; 0x58
    a78c:	f000 840c 	beq.w	afa8 <_strtod_l+0xa10>
    a790:	3701      	adds	r7, #1
    a792:	9711      	str	r7, [sp, #68]	; 0x44
    a794:	783a      	ldrb	r2, [r7, #0]
    a796:	2a30      	cmp	r2, #48	; 0x30
    a798:	d0fa      	beq.n	a790 <_strtod_l+0x1f8>
    a79a:	2a00      	cmp	r2, #0
    a79c:	f000 80b7 	beq.w	a90e <_strtod_l+0x376>
    a7a0:	2301      	movs	r3, #1
    a7a2:	9308      	str	r3, [sp, #32]
    a7a4:	e772      	b.n	a68c <_strtod_l+0xf4>
    a7a6:	496a      	ldr	r1, [pc, #424]	; (a950 <_strtod_l+0x3b8>)
    a7a8:	2201      	movs	r2, #1
    a7aa:	f001 f9b9 	bl	bb20 <strncmp>
    a7ae:	2800      	cmp	r0, #0
    a7b0:	f000 80c0 	beq.w	a934 <_strtod_l+0x39c>
    a7b4:	46ae      	mov	lr, r5
    a7b6:	f04f 0c00 	mov.w	ip, #0
    a7ba:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    a7be:	4660      	mov	r0, ip
    a7c0:	f04f 0b00 	mov.w	fp, #0
    a7c4:	2d00      	cmp	r5, #0
    a7c6:	d07e      	beq.n	a8c6 <_strtod_l+0x32e>
    a7c8:	ee07 6a90 	vmov	s15, r6
    a7cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    a7d2:	ebab 0303 	sub.w	r3, fp, r3
    a7d6:	f1be 0f00 	cmp.w	lr, #0
    a7da:	bf08      	it	eq
    a7dc:	46ae      	moveq	lr, r5
    a7de:	2d10      	cmp	r5, #16
    a7e0:	930a      	str	r3, [sp, #40]	; 0x28
    a7e2:	462b      	mov	r3, r5
    a7e4:	bfa8      	it	ge
    a7e6:	2310      	movge	r3, #16
    a7e8:	2d09      	cmp	r5, #9
    a7ea:	ed8d 7b04 	vstr	d7, [sp, #16]
    a7ee:	dd0c      	ble.n	a80a <_strtod_l+0x272>
    a7f0:	4a58      	ldr	r2, [pc, #352]	; (a954 <_strtod_l+0x3bc>)
    a7f2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    a7f6:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    a7fa:	ee06 9a90 	vmov	s13, r9
    a7fe:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a802:	eea7 6b05 	vfma.f64	d6, d7, d5
    a806:	ed8d 6b04 	vstr	d6, [sp, #16]
    a80a:	2d0f      	cmp	r5, #15
    a80c:	f300 80a8 	bgt.w	a960 <_strtod_l+0x3c8>
    a810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a812:	2a00      	cmp	r2, #0
    a814:	f000 83e4 	beq.w	afe0 <_strtod_l+0xa48>
    a818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a81a:	f340 833c 	ble.w	ae96 <_strtod_l+0x8fe>
    a81e:	2a16      	cmp	r2, #22
    a820:	f340 8498 	ble.w	b154 <_strtod_l+0xbbc>
    a824:	990a      	ldr	r1, [sp, #40]	; 0x28
    a826:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    a82a:	428a      	cmp	r2, r1
    a82c:	f280 84a6 	bge.w	b17c <_strtod_l+0xbe4>
    a830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a832:	1aeb      	subs	r3, r5, r3
    a834:	4413      	add	r3, r2
    a836:	e099      	b.n	a96c <_strtod_l+0x3d4>
    a838:	2500      	movs	r5, #0
    a83a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    a83e:	f10a 0301 	add.w	r3, sl, #1
    a842:	9311      	str	r3, [sp, #68]	; 0x44
    a844:	f89a 4001 	ldrb.w	r4, [sl, #1]
    a848:	2c2b      	cmp	r4, #43	; 0x2b
    a84a:	f000 825e 	beq.w	ad0a <_strtod_l+0x772>
    a84e:	2c2d      	cmp	r4, #45	; 0x2d
    a850:	f000 81f7 	beq.w	ac42 <_strtod_l+0x6aa>
    a854:	2300      	movs	r3, #0
    a856:	930a      	str	r3, [sp, #40]	; 0x28
    a858:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    a85c:	2b09      	cmp	r3, #9
    a85e:	f200 81eb 	bhi.w	ac38 <_strtod_l+0x6a0>
    a862:	2c30      	cmp	r4, #48	; 0x30
    a864:	d105      	bne.n	a872 <_strtod_l+0x2da>
    a866:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a868:	3301      	adds	r3, #1
    a86a:	9311      	str	r3, [sp, #68]	; 0x44
    a86c:	781c      	ldrb	r4, [r3, #0]
    a86e:	2c30      	cmp	r4, #48	; 0x30
    a870:	d0fa      	beq.n	a868 <_strtod_l+0x2d0>
    a872:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a876:	2b08      	cmp	r3, #8
    a878:	d8a2      	bhi.n	a7c0 <_strtod_l+0x228>
    a87a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a87c:	920c      	str	r2, [sp, #48]	; 0x30
    a87e:	1c53      	adds	r3, r2, #1
    a880:	9311      	str	r3, [sp, #68]	; 0x44
    a882:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a886:	7854      	ldrb	r4, [r2, #1]
    a888:	2c2f      	cmp	r4, #47	; 0x2f
    a88a:	dc07      	bgt.n	a89c <_strtod_l+0x304>
    a88c:	e3de      	b.n	b04c <_strtod_l+0xab4>
    a88e:	3301      	adds	r3, #1
    a890:	9311      	str	r3, [sp, #68]	; 0x44
    a892:	784c      	ldrb	r4, [r1, #1]
    a894:	2c2f      	cmp	r4, #47	; 0x2f
    a896:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    a89a:	dd06      	ble.n	a8aa <_strtod_l+0x312>
    a89c:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    a8a0:	2c39      	cmp	r4, #57	; 0x39
    a8a2:	4619      	mov	r1, r3
    a8a4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    a8a8:	ddf1      	ble.n	a88e <_strtod_l+0x2f6>
    a8aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a8ac:	1a9b      	subs	r3, r3, r2
    a8ae:	2b08      	cmp	r3, #8
    a8b0:	f340 83cc 	ble.w	b04c <_strtod_l+0xab4>
    a8b4:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    a8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a8ba:	2b00      	cmp	r3, #0
    a8bc:	d082      	beq.n	a7c4 <_strtod_l+0x22c>
    a8be:	f1cb 0b00 	rsb	fp, fp, #0
    a8c2:	2d00      	cmp	r5, #0
    a8c4:	d180      	bne.n	a7c8 <_strtod_l+0x230>
    a8c6:	9b08      	ldr	r3, [sp, #32]
    a8c8:	4303      	orrs	r3, r0
    a8ca:	d120      	bne.n	a90e <_strtod_l+0x376>
    a8cc:	f1bc 0f00 	cmp.w	ip, #0
    a8d0:	f47f af4a 	bne.w	a768 <_strtod_l+0x1d0>
    a8d4:	2c69      	cmp	r4, #105	; 0x69
    a8d6:	f000 83cf 	beq.w	b078 <_strtod_l+0xae0>
    a8da:	f300 82f3 	bgt.w	aec4 <_strtod_l+0x92c>
    a8de:	2c49      	cmp	r4, #73	; 0x49
    a8e0:	f000 83ca 	beq.w	b078 <_strtod_l+0xae0>
    a8e4:	2c4e      	cmp	r4, #78	; 0x4e
    a8e6:	f47f af3f 	bne.w	a768 <_strtod_l+0x1d0>
    a8ea:	491b      	ldr	r1, [pc, #108]	; (a958 <_strtod_l+0x3c0>)
    a8ec:	a811      	add	r0, sp, #68	; 0x44
    a8ee:	f002 f99b 	bl	cc28 <__match>
    a8f2:	2800      	cmp	r0, #0
    a8f4:	f43f af38 	beq.w	a768 <_strtod_l+0x1d0>
    a8f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a8fa:	781b      	ldrb	r3, [r3, #0]
    a8fc:	2b28      	cmp	r3, #40	; 0x28
    a8fe:	f000 84f2 	beq.w	b2e6 <_strtod_l+0xd4e>
    a902:	4816      	ldr	r0, [pc, #88]	; (a95c <_strtod_l+0x3c4>)
    a904:	f001 fccc 	bl	c2a0 <nan>
    a908:	eeb0 8b40 	vmov.f64	d8, d0
    a90c:	e001      	b.n	a912 <_strtod_l+0x37a>
    a90e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; a948 <_strtod_l+0x3b0>
    a912:	9a07      	ldr	r2, [sp, #28]
    a914:	b10a      	cbz	r2, a91a <_strtod_l+0x382>
    a916:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a918:	6013      	str	r3, [r2, #0]
    a91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a91c:	2b00      	cmp	r3, #0
    a91e:	f43f af2a 	beq.w	a776 <_strtod_l+0x1de>
    a922:	eeb1 8b48 	vneg.f64	d8, d8
    a926:	eeb0 0b48 	vmov.f64	d0, d8
    a92a:	b017      	add	sp, #92	; 0x5c
    a92c:	ecbd 8b10 	vpop	{d8-d15}
    a930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a934:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a936:	900b      	str	r0, [sp, #44]	; 0x2c
    a938:	1c5a      	adds	r2, r3, #1
    a93a:	9211      	str	r2, [sp, #68]	; 0x44
    a93c:	785c      	ldrb	r4, [r3, #1]
    a93e:	46ae      	mov	lr, r5
    a940:	e6f8      	b.n	a734 <_strtod_l+0x19c>
    a942:	bf00      	nop
    a944:	f3af 8000 	nop.w
	...
    a950:	20007d38 	.word	0x20007d38
    a954:	200002a8 	.word	0x200002a8
    a958:	20000c34 	.word	0x20000c34
    a95c:	20008028 	.word	0x20008028
    a960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a962:	1aeb      	subs	r3, r5, r3
    a964:	4413      	add	r3, r2
    a966:	2b00      	cmp	r3, #0
    a968:	f340 82b0 	ble.w	aecc <_strtod_l+0x934>
    a96c:	f013 010f 	ands.w	r1, r3, #15
    a970:	d00a      	beq.n	a988 <_strtod_l+0x3f0>
    a972:	4ac3      	ldr	r2, [pc, #780]	; (ac80 <_strtod_l+0x6e8>)
    a974:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a978:	ed9d 6b04 	vldr	d6, [sp, #16]
    a97c:	ed92 7b00 	vldr	d7, [r2]
    a980:	ee27 7b06 	vmul.f64	d7, d7, d6
    a984:	ed8d 7b04 	vstr	d7, [sp, #16]
    a988:	f033 020f 	bics.w	r2, r3, #15
    a98c:	f040 8238 	bne.w	ae00 <_strtod_l+0x868>
    a990:	2300      	movs	r3, #0
    a992:	9308      	str	r3, [sp, #32]
    a994:	9600      	str	r6, [sp, #0]
    a996:	462b      	mov	r3, r5
    a998:	4672      	mov	r2, lr
    a99a:	4639      	mov	r1, r7
    a99c:	4640      	mov	r0, r8
    a99e:	f002 facf 	bl	cf40 <__s2b>
    a9a2:	4681      	mov	r9, r0
    a9a4:	2800      	cmp	r0, #0
    a9a6:	f000 82e1 	beq.w	af6c <_strtod_l+0x9d4>
    a9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a9ac:	eba3 0b0b 	sub.w	fp, r3, fp
    a9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a9b2:	ed9f eba9 	vldr	d14, [pc, #676]	; ac58 <_strtod_l+0x6c0>
    a9b6:	2b00      	cmp	r3, #0
    a9b8:	ed9f cba9 	vldr	d12, [pc, #676]	; ac60 <_strtod_l+0x6c8>
    a9bc:	ed9f dbaa 	vldr	d13, [pc, #680]	; ac68 <_strtod_l+0x6d0>
    a9c0:	ed9f bbab 	vldr	d11, [pc, #684]	; ac70 <_strtod_l+0x6d8>
    a9c4:	bfb4      	ite	lt
    a9c6:	465a      	movlt	r2, fp
    a9c8:	2200      	movge	r2, #0
    a9ca:	f04f 0a00 	mov.w	sl, #0
    a9ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a9d2:	920b      	str	r2, [sp, #44]	; 0x2c
    a9d4:	930c      	str	r3, [sp, #48]	; 0x30
    a9d6:	4654      	mov	r4, sl
    a9d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a9dc:	4640      	mov	r0, r8
    a9de:	f002 fa2d 	bl	ce3c <_Balloc>
    a9e2:	4606      	mov	r6, r0
    a9e4:	2800      	cmp	r0, #0
    a9e6:	f000 810e 	beq.w	ac06 <_strtod_l+0x66e>
    a9ea:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a9ee:	ed9d 8b04 	vldr	d8, [sp, #16]
    a9f2:	3202      	adds	r2, #2
    a9f4:	0092      	lsls	r2, r2, #2
    a9f6:	f109 010c 	add.w	r1, r9, #12
    a9fa:	300c      	adds	r0, #12
    a9fc:	f7fd fb72 	bl	80e4 <memcpy>
    aa00:	eeb0 0b48 	vmov.f64	d0, d8
    aa04:	aa14      	add	r2, sp, #80	; 0x50
    aa06:	a913      	add	r1, sp, #76	; 0x4c
    aa08:	4640      	mov	r0, r8
    aa0a:	f002 fe55 	bl	d6b8 <__d2b>
    aa0e:	9012      	str	r0, [sp, #72]	; 0x48
    aa10:	2800      	cmp	r0, #0
    aa12:	f000 80e4 	beq.w	abde <_strtod_l+0x646>
    aa16:	2101      	movs	r1, #1
    aa18:	4640      	mov	r0, r8
    aa1a:	f002 fb39 	bl	d090 <__i2b>
    aa1e:	4604      	mov	r4, r0
    aa20:	2800      	cmp	r0, #0
    aa22:	f000 80f0 	beq.w	ac06 <_strtod_l+0x66e>
    aa26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    aa28:	2a00      	cmp	r2, #0
    aa2a:	f2c0 80de 	blt.w	abea <_strtod_l+0x652>
    aa2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa30:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    aa32:	eb02 0b03 	add.w	fp, r2, r3
    aa36:	9b08      	ldr	r3, [sp, #32]
    aa38:	9d14      	ldr	r5, [sp, #80]	; 0x50
    aa3a:	1ad2      	subs	r2, r2, r3
    aa3c:	442a      	add	r2, r5
    aa3e:	4b91      	ldr	r3, [pc, #580]	; (ac84 <_strtod_l+0x6ec>)
    aa40:	3a01      	subs	r2, #1
    aa42:	429a      	cmp	r2, r3
    aa44:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    aa48:	f280 8098 	bge.w	ab7c <_strtod_l+0x5e4>
    aa4c:	1a99      	subs	r1, r3, r2
    aa4e:	291f      	cmp	r1, #31
    aa50:	eba5 0501 	sub.w	r5, r5, r1
    aa54:	f300 80e3 	bgt.w	ac1e <_strtod_l+0x686>
    aa58:	2201      	movs	r2, #1
    aa5a:	fa02 f301 	lsl.w	r3, r2, r1
    aa5e:	930d      	str	r3, [sp, #52]	; 0x34
    aa60:	2300      	movs	r3, #0
    aa62:	930e      	str	r3, [sp, #56]	; 0x38
    aa64:	442f      	add	r7, r5
    aa66:	9b08      	ldr	r3, [sp, #32]
    aa68:	445d      	add	r5, fp
    aa6a:	45ab      	cmp	fp, r5
    aa6c:	465a      	mov	r2, fp
    aa6e:	441f      	add	r7, r3
    aa70:	bfa8      	it	ge
    aa72:	462a      	movge	r2, r5
    aa74:	42ba      	cmp	r2, r7
    aa76:	bfa8      	it	ge
    aa78:	463a      	movge	r2, r7
    aa7a:	2a00      	cmp	r2, #0
    aa7c:	dd03      	ble.n	aa86 <_strtod_l+0x4ee>
    aa7e:	1aad      	subs	r5, r5, r2
    aa80:	1abf      	subs	r7, r7, r2
    aa82:	ebab 0b02 	sub.w	fp, fp, r2
    aa86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa88:	2b00      	cmp	r3, #0
    aa8a:	f300 8088 	bgt.w	ab9e <_strtod_l+0x606>
    aa8e:	2d00      	cmp	r5, #0
    aa90:	f300 809c 	bgt.w	abcc <_strtod_l+0x634>
    aa94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aa96:	2b00      	cmp	r3, #0
    aa98:	f300 80b7 	bgt.w	ac0a <_strtod_l+0x672>
    aa9c:	2f00      	cmp	r7, #0
    aa9e:	f300 80a9 	bgt.w	abf4 <_strtod_l+0x65c>
    aaa2:	f1bb 0f00 	cmp.w	fp, #0
    aaa6:	dd08      	ble.n	aaba <_strtod_l+0x522>
    aaa8:	4621      	mov	r1, r4
    aaaa:	465a      	mov	r2, fp
    aaac:	4640      	mov	r0, r8
    aaae:	f002 fc2b 	bl	d308 <__lshift>
    aab2:	4604      	mov	r4, r0
    aab4:	2800      	cmp	r0, #0
    aab6:	f000 80a6 	beq.w	ac06 <_strtod_l+0x66e>
    aaba:	9912      	ldr	r1, [sp, #72]	; 0x48
    aabc:	4632      	mov	r2, r6
    aabe:	4640      	mov	r0, r8
    aac0:	f002 fcbc 	bl	d43c <__mdiff>
    aac4:	4682      	mov	sl, r0
    aac6:	2800      	cmp	r0, #0
    aac8:	f000 809d 	beq.w	ac06 <_strtod_l+0x66e>
    aacc:	2300      	movs	r3, #0
    aace:	68c5      	ldr	r5, [r0, #12]
    aad0:	60c3      	str	r3, [r0, #12]
    aad2:	4621      	mov	r1, r4
    aad4:	f002 fc90 	bl	d3f8 <__mcmp>
    aad8:	2800      	cmp	r0, #0
    aada:	f2c0 83c7 	blt.w	b26c <_strtod_l+0xcd4>
    aade:	f000 8361 	beq.w	b1a4 <_strtod_l+0xc0c>
    aae2:	4621      	mov	r1, r4
    aae4:	4650      	mov	r0, sl
    aae6:	f002 fe51 	bl	d78c <__ratio>
    aaea:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    aaee:	eeb4 0bc7 	vcmpe.f64	d0, d7
    aaf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aaf6:	d846      	bhi.n	ab86 <_strtod_l+0x5ee>
    aaf8:	2d00      	cmp	r5, #0
    aafa:	f000 80cb 	beq.w	ac94 <_strtod_l+0x6fc>
    aafe:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    ab02:	9805      	ldr	r0, [sp, #20]
    ab04:	4b60      	ldr	r3, [pc, #384]	; (ac88 <_strtod_l+0x6f0>)
    ab06:	2200      	movs	r2, #0
    ab08:	4960      	ldr	r1, [pc, #384]	; (ac8c <_strtod_l+0x6f4>)
    ab0a:	f8df c184 	ldr.w	ip, [pc, #388]	; ac90 <_strtod_l+0x6f8>
    ab0e:	ea00 0701 	and.w	r7, r0, r1
    ab12:	4567      	cmp	r7, ip
    ab14:	f000 80d4 	beq.w	acc0 <_strtod_l+0x728>
    ab18:	9908      	ldr	r1, [sp, #32]
    ab1a:	b159      	cbz	r1, ab34 <_strtod_l+0x59c>
    ab1c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    ab20:	d808      	bhi.n	ab34 <_strtod_l+0x59c>
    ab22:	eeb4 9bcb 	vcmpe.f64	d9, d11
    ab26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ab2a:	f240 8156 	bls.w	adda <_strtod_l+0x842>
    ab2e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    ab32:	1bcb      	subs	r3, r1, r7
    ab34:	eeb0 0b48 	vmov.f64	d0, d8
    ab38:	ec43 2b1a 	vmov	d10, r2, r3
    ab3c:	f002 fd28 	bl	d590 <__ulp>
    ab40:	eeaa 8b00 	vfma.f64	d8, d10, d0
    ab44:	ed8d 8b04 	vstr	d8, [sp, #16]
    ab48:	ee18 3a90 	vmov	r3, s17
    ab4c:	9a08      	ldr	r2, [sp, #32]
    ab4e:	b922      	cbnz	r2, ab5a <_strtod_l+0x5c2>
    ab50:	4a4e      	ldr	r2, [pc, #312]	; (ac8c <_strtod_l+0x6f4>)
    ab52:	401a      	ands	r2, r3
    ab54:	4297      	cmp	r7, r2
    ab56:	f000 80e4 	beq.w	ad22 <_strtod_l+0x78a>
    ab5a:	9912      	ldr	r1, [sp, #72]	; 0x48
    ab5c:	4640      	mov	r0, r8
    ab5e:	f002 f993 	bl	ce88 <_Bfree>
    ab62:	4631      	mov	r1, r6
    ab64:	4640      	mov	r0, r8
    ab66:	f002 f98f 	bl	ce88 <_Bfree>
    ab6a:	4621      	mov	r1, r4
    ab6c:	4640      	mov	r0, r8
    ab6e:	f002 f98b 	bl	ce88 <_Bfree>
    ab72:	4651      	mov	r1, sl
    ab74:	4640      	mov	r0, r8
    ab76:	f002 f987 	bl	ce88 <_Bfree>
    ab7a:	e72d      	b.n	a9d8 <_strtod_l+0x440>
    ab7c:	2301      	movs	r3, #1
    ab7e:	2100      	movs	r1, #0
    ab80:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    ab84:	e76e      	b.n	aa64 <_strtod_l+0x4cc>
    ab86:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    ab8a:	ee20 9b09 	vmul.f64	d9, d0, d9
    ab8e:	2d00      	cmp	r5, #0
    ab90:	d15f      	bne.n	ac52 <_strtod_l+0x6ba>
    ab92:	eeb1 7b49 	vneg.f64	d7, d9
    ab96:	9805      	ldr	r0, [sp, #20]
    ab98:	ec53 2b17 	vmov	r2, r3, d7
    ab9c:	e7b4      	b.n	ab08 <_strtod_l+0x570>
    ab9e:	4621      	mov	r1, r4
    aba0:	461a      	mov	r2, r3
    aba2:	4640      	mov	r0, r8
    aba4:	f002 fb50 	bl	d248 <__pow5mult>
    aba8:	4604      	mov	r4, r0
    abaa:	b360      	cbz	r0, ac06 <_strtod_l+0x66e>
    abac:	4601      	mov	r1, r0
    abae:	9a12      	ldr	r2, [sp, #72]	; 0x48
    abb0:	4640      	mov	r0, r8
    abb2:	f002 fa9b 	bl	d0ec <__multiply>
    abb6:	b330      	cbz	r0, ac06 <_strtod_l+0x66e>
    abb8:	900f      	str	r0, [sp, #60]	; 0x3c
    abba:	9912      	ldr	r1, [sp, #72]	; 0x48
    abbc:	4640      	mov	r0, r8
    abbe:	f002 f963 	bl	ce88 <_Bfree>
    abc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    abc4:	9212      	str	r2, [sp, #72]	; 0x48
    abc6:	2d00      	cmp	r5, #0
    abc8:	f77f af64 	ble.w	aa94 <_strtod_l+0x4fc>
    abcc:	9912      	ldr	r1, [sp, #72]	; 0x48
    abce:	462a      	mov	r2, r5
    abd0:	4640      	mov	r0, r8
    abd2:	f002 fb99 	bl	d308 <__lshift>
    abd6:	9012      	str	r0, [sp, #72]	; 0x48
    abd8:	2800      	cmp	r0, #0
    abda:	f47f af5b 	bne.w	aa94 <_strtod_l+0x4fc>
    abde:	2322      	movs	r3, #34	; 0x22
    abe0:	ed9f 8b25 	vldr	d8, [pc, #148]	; ac78 <_strtod_l+0x6e0>
    abe4:	f8c8 3000 	str.w	r3, [r8]
    abe8:	e0bc      	b.n	ad64 <_strtod_l+0x7cc>
    abea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    abec:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    abf0:	1a9f      	subs	r7, r3, r2
    abf2:	e720      	b.n	aa36 <_strtod_l+0x49e>
    abf4:	4631      	mov	r1, r6
    abf6:	463a      	mov	r2, r7
    abf8:	4640      	mov	r0, r8
    abfa:	f002 fb85 	bl	d308 <__lshift>
    abfe:	4606      	mov	r6, r0
    ac00:	2800      	cmp	r0, #0
    ac02:	f47f af4e 	bne.w	aaa2 <_strtod_l+0x50a>
    ac06:	9812      	ldr	r0, [sp, #72]	; 0x48
    ac08:	e7e9      	b.n	abde <_strtod_l+0x646>
    ac0a:	4631      	mov	r1, r6
    ac0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ac0e:	4640      	mov	r0, r8
    ac10:	f002 fb1a 	bl	d248 <__pow5mult>
    ac14:	4606      	mov	r6, r0
    ac16:	2800      	cmp	r0, #0
    ac18:	f47f af40 	bne.w	aa9c <_strtod_l+0x504>
    ac1c:	e7f3      	b.n	ac06 <_strtod_l+0x66e>
    ac1e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    ac22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    ac26:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    ac2a:	2101      	movs	r1, #1
    ac2c:	32e2      	adds	r2, #226	; 0xe2
    ac2e:	fa01 f302 	lsl.w	r3, r1, r2
    ac32:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    ac36:	e715      	b.n	aa64 <_strtod_l+0x4cc>
    ac38:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    ac3c:	f04f 0b00 	mov.w	fp, #0
    ac40:	e5c0      	b.n	a7c4 <_strtod_l+0x22c>
    ac42:	2301      	movs	r3, #1
    ac44:	930a      	str	r3, [sp, #40]	; 0x28
    ac46:	f10a 0302 	add.w	r3, sl, #2
    ac4a:	9311      	str	r3, [sp, #68]	; 0x44
    ac4c:	f89a 4002 	ldrb.w	r4, [sl, #2]
    ac50:	e602      	b.n	a858 <_strtod_l+0x2c0>
    ac52:	eeb0 7b49 	vmov.f64	d7, d9
    ac56:	e79e      	b.n	ab96 <_strtod_l+0x5fe>
    ac58:	94a03595 	.word	0x94a03595
    ac5c:	3fcfffff 	.word	0x3fcfffff
    ac60:	94a03595 	.word	0x94a03595
    ac64:	3fdfffff 	.word	0x3fdfffff
    ac68:	35afe535 	.word	0x35afe535
    ac6c:	3fe00000 	.word	0x3fe00000
    ac70:	ffc00000 	.word	0xffc00000
    ac74:	41dfffff 	.word	0x41dfffff
    ac78:	00000000 	.word	0x00000000
    ac7c:	7ff00000 	.word	0x7ff00000
    ac80:	200002a8 	.word	0x200002a8
    ac84:	fffffc02 	.word	0xfffffc02
    ac88:	3ff00000 	.word	0x3ff00000
    ac8c:	7ff00000 	.word	0x7ff00000
    ac90:	7fe00000 	.word	0x7fe00000
    ac94:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ac98:	2900      	cmp	r1, #0
    ac9a:	f000 8085 	beq.w	ada8 <_strtod_l+0x810>
    ac9e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    aca2:	2901      	cmp	r1, #1
    aca4:	f000 81d8 	beq.w	b058 <_strtod_l+0xac0>
    aca8:	4610      	mov	r0, r2
    acaa:	4bb7      	ldr	r3, [pc, #732]	; (af88 <_strtod_l+0x9f0>)
    acac:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    acb0:	2200      	movs	r2, #0
    acb2:	e729      	b.n	ab08 <_strtod_l+0x570>
    acb4:	2c65      	cmp	r4, #101	; 0x65
    acb6:	f04f 0c01 	mov.w	ip, #1
    acba:	f43f adbe 	beq.w	a83a <_strtod_l+0x2a2>
    acbe:	e54c      	b.n	a75a <_strtod_l+0x1c2>
    acc0:	ec43 2b1a 	vmov	d10, r2, r3
    acc4:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    acc8:	9305      	str	r3, [sp, #20]
    acca:	ed9d fb04 	vldr	d15, [sp, #16]
    acce:	eeb0 0b4f 	vmov.f64	d0, d15
    acd2:	f002 fc5d 	bl	d590 <__ulp>
    acd6:	49ad      	ldr	r1, [pc, #692]	; (af8c <_strtod_l+0x9f4>)
    acd8:	eeaa fb00 	vfma.f64	d15, d10, d0
    acdc:	ee1f 3a90 	vmov	r3, s31
    ace0:	4aab      	ldr	r2, [pc, #684]	; (af90 <_strtod_l+0x9f8>)
    ace2:	4019      	ands	r1, r3
    ace4:	4291      	cmp	r1, r2
    ace6:	ed8d fb04 	vstr	d15, [sp, #16]
    acea:	d972      	bls.n	add2 <_strtod_l+0x83a>
    acec:	4ba9      	ldr	r3, [pc, #676]	; (af94 <_strtod_l+0x9fc>)
    acee:	ee18 2a90 	vmov	r2, s17
    acf2:	429a      	cmp	r2, r3
    acf4:	d103      	bne.n	acfe <_strtod_l+0x766>
    acf6:	ee18 3a10 	vmov	r3, s16
    acfa:	3301      	adds	r3, #1
    acfc:	d083      	beq.n	ac06 <_strtod_l+0x66e>
    acfe:	4aa5      	ldr	r2, [pc, #660]	; (af94 <_strtod_l+0x9fc>)
    ad00:	f04f 33ff 	mov.w	r3, #4294967295
    ad04:	e9cd 3204 	strd	r3, r2, [sp, #16]
    ad08:	e727      	b.n	ab5a <_strtod_l+0x5c2>
    ad0a:	2300      	movs	r3, #0
    ad0c:	930a      	str	r3, [sp, #40]	; 0x28
    ad0e:	e79a      	b.n	ac46 <_strtod_l+0x6ae>
    ad10:	2c65      	cmp	r4, #101	; 0x65
    ad12:	f000 80d0 	beq.w	aeb6 <_strtod_l+0x91e>
    ad16:	2c45      	cmp	r4, #69	; 0x45
    ad18:	f000 80cd 	beq.w	aeb6 <_strtod_l+0x91e>
    ad1c:	f04f 0c01 	mov.w	ip, #1
    ad20:	e5d1      	b.n	a8c6 <_strtod_l+0x32e>
    ad22:	ec51 0b19 	vmov	r0, r1, d9
    ad26:	930d      	str	r3, [sp, #52]	; 0x34
    ad28:	f009 fbec 	bl	14504 <__aeabi_d2lz>
    ad2c:	f009 fbbc 	bl	144a8 <__aeabi_l2d>
    ad30:	9b04      	ldr	r3, [sp, #16]
    ad32:	431d      	orrs	r5, r3
    ad34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ad36:	ec41 0b17 	vmov	d7, r0, r1
    ad3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ad3e:	431d      	orrs	r5, r3
    ad40:	ee39 9b47 	vsub.f64	d9, d9, d7
    ad44:	f000 80a0 	beq.w	ae88 <_strtod_l+0x8f0>
    ad48:	eeb4 9bcc 	vcmpe.f64	d9, d12
    ad4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ad50:	d405      	bmi.n	ad5e <_strtod_l+0x7c6>
    ad52:	eeb4 9bcd 	vcmpe.f64	d9, d13
    ad56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ad5a:	f77f aefe 	ble.w	ab5a <_strtod_l+0x5c2>
    ad5e:	ed9d 8b04 	vldr	d8, [sp, #16]
    ad62:	9812      	ldr	r0, [sp, #72]	; 0x48
    ad64:	4601      	mov	r1, r0
    ad66:	4640      	mov	r0, r8
    ad68:	f002 f88e 	bl	ce88 <_Bfree>
    ad6c:	4631      	mov	r1, r6
    ad6e:	4640      	mov	r0, r8
    ad70:	f002 f88a 	bl	ce88 <_Bfree>
    ad74:	4621      	mov	r1, r4
    ad76:	4640      	mov	r0, r8
    ad78:	f002 f886 	bl	ce88 <_Bfree>
    ad7c:	4649      	mov	r1, r9
    ad7e:	4640      	mov	r0, r8
    ad80:	f002 f882 	bl	ce88 <_Bfree>
    ad84:	4651      	mov	r1, sl
    ad86:	4640      	mov	r0, r8
    ad88:	f002 f87e 	bl	ce88 <_Bfree>
    ad8c:	e5c1      	b.n	a912 <_strtod_l+0x37a>
    ad8e:	2201      	movs	r2, #1
    ad90:	9209      	str	r2, [sp, #36]	; 0x24
    ad92:	1c79      	adds	r1, r7, #1
    ad94:	9111      	str	r1, [sp, #68]	; 0x44
    ad96:	787a      	ldrb	r2, [r7, #1]
    ad98:	2a00      	cmp	r2, #0
    ad9a:	f43f ace5 	beq.w	a768 <_strtod_l+0x1d0>
    ad9e:	460f      	mov	r7, r1
    ada0:	e470      	b.n	a684 <_strtod_l+0xec>
    ada2:	2200      	movs	r2, #0
    ada4:	9209      	str	r2, [sp, #36]	; 0x24
    ada6:	e7f4      	b.n	ad92 <_strtod_l+0x7fa>
    ada8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    adac:	4610      	mov	r0, r2
    adae:	2b00      	cmp	r3, #0
    adb0:	f47f af7b 	bne.w	acaa <_strtod_l+0x712>
    adb4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    adb8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    adbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    adc0:	f100 81d3 	bmi.w	b16a <_strtod_l+0xbd2>
    adc4:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    adc8:	ee20 9b09 	vmul.f64	d9, d0, d9
    adcc:	eeb1 7b49 	vneg.f64	d7, d9
    add0:	e6e2      	b.n	ab98 <_strtod_l+0x600>
    add2:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    add6:	9305      	str	r3, [sp, #20]
    add8:	e6b8      	b.n	ab4c <_strtod_l+0x5b4>
    adda:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    adde:	ee19 3a10 	vmov	r3, s18
    ade2:	2b01      	cmp	r3, #1
    ade4:	bf38      	it	cc
    ade6:	2301      	movcc	r3, #1
    ade8:	ee09 3a10 	vmov	s18, r3
    adec:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    adf0:	2d00      	cmp	r5, #0
    adf2:	f040 813e 	bne.w	b072 <_strtod_l+0xada>
    adf6:	eeb1 7b49 	vneg.f64	d7, d9
    adfa:	ec53 2b17 	vmov	r2, r3, d7
    adfe:	e696      	b.n	ab2e <_strtod_l+0x596>
    ae00:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    ae04:	f300 80b2 	bgt.w	af6c <_strtod_l+0x9d4>
    ae08:	2a10      	cmp	r2, #16
    ae0a:	ea4f 1322 	mov.w	r3, r2, asr #4
    ae0e:	f340 8286 	ble.w	b31e <_strtod_l+0xd86>
    ae12:	4c61      	ldr	r4, [pc, #388]	; (af98 <_strtod_l+0xa00>)
    ae14:	ed9d 7b04 	vldr	d7, [sp, #16]
    ae18:	2000      	movs	r0, #0
    ae1a:	4622      	mov	r2, r4
    ae1c:	4601      	mov	r1, r0
    ae1e:	f013 0f01 	tst.w	r3, #1
    ae22:	f101 0101 	add.w	r1, r1, #1
    ae26:	ea4f 0363 	mov.w	r3, r3, asr #1
    ae2a:	d004      	beq.n	ae36 <_strtod_l+0x89e>
    ae2c:	ed92 6b00 	vldr	d6, [r2]
    ae30:	2001      	movs	r0, #1
    ae32:	ee27 7b06 	vmul.f64	d7, d7, d6
    ae36:	2b01      	cmp	r3, #1
    ae38:	f102 0208 	add.w	r2, r2, #8
    ae3c:	d1ef      	bne.n	ae1e <_strtod_l+0x886>
    ae3e:	b108      	cbz	r0, ae44 <_strtod_l+0x8ac>
    ae40:	ed8d 7b04 	vstr	d7, [sp, #16]
    ae44:	9b05      	ldr	r3, [sp, #20]
    ae46:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    ae4a:	9305      	str	r3, [sp, #20]
    ae4c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    ae50:	ed9d 6b04 	vldr	d6, [sp, #16]
    ae54:	ed94 7b00 	vldr	d7, [r4]
    ae58:	4b4c      	ldr	r3, [pc, #304]	; (af8c <_strtod_l+0x9f4>)
    ae5a:	ee27 7b06 	vmul.f64	d7, d7, d6
    ae5e:	ee17 2a90 	vmov	r2, s15
    ae62:	494e      	ldr	r1, [pc, #312]	; (af9c <_strtod_l+0xa04>)
    ae64:	4013      	ands	r3, r2
    ae66:	428b      	cmp	r3, r1
    ae68:	ed8d 7b04 	vstr	d7, [sp, #16]
    ae6c:	d87e      	bhi.n	af6c <_strtod_l+0x9d4>
    ae6e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    ae72:	428b      	cmp	r3, r1
    ae74:	f240 81d6 	bls.w	b224 <_strtod_l+0xc8c>
    ae78:	4c46      	ldr	r4, [pc, #280]	; (af94 <_strtod_l+0x9fc>)
    ae7a:	f04f 33ff 	mov.w	r3, #4294967295
    ae7e:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ae82:	2300      	movs	r3, #0
    ae84:	9308      	str	r3, [sp, #32]
    ae86:	e585      	b.n	a994 <_strtod_l+0x3fc>
    ae88:	eeb4 9bce 	vcmpe.f64	d9, d14
    ae8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae90:	f57f ae63 	bpl.w	ab5a <_strtod_l+0x5c2>
    ae94:	e763      	b.n	ad5e <_strtod_l+0x7c6>
    ae96:	3216      	adds	r2, #22
    ae98:	f6ff ad62 	blt.w	a960 <_strtod_l+0x3c8>
    ae9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae9e:	eba3 0b0b 	sub.w	fp, r3, fp
    aea2:	4b3f      	ldr	r3, [pc, #252]	; (afa0 <_strtod_l+0xa08>)
    aea4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    aea8:	ed93 7b00 	vldr	d7, [r3]
    aeac:	ed9d 6b04 	vldr	d6, [sp, #16]
    aeb0:	ee86 8b07 	vdiv.f64	d8, d6, d7
    aeb4:	e52d      	b.n	a912 <_strtod_l+0x37a>
    aeb6:	f04f 0e00 	mov.w	lr, #0
    aeba:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    aebe:	f04f 0c01 	mov.w	ip, #1
    aec2:	e44e      	b.n	a762 <_strtod_l+0x1ca>
    aec4:	2c6e      	cmp	r4, #110	; 0x6e
    aec6:	f43f ad10 	beq.w	a8ea <_strtod_l+0x352>
    aeca:	e44d      	b.n	a768 <_strtod_l+0x1d0>
    aecc:	f43f ad60 	beq.w	a990 <_strtod_l+0x3f8>
    aed0:	425b      	negs	r3, r3
    aed2:	f013 010f 	ands.w	r1, r3, #15
    aed6:	d00a      	beq.n	aeee <_strtod_l+0x956>
    aed8:	4a31      	ldr	r2, [pc, #196]	; (afa0 <_strtod_l+0xa08>)
    aeda:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    aede:	ed9d 6b04 	vldr	d6, [sp, #16]
    aee2:	ed92 7b00 	vldr	d7, [r2]
    aee6:	ee86 7b07 	vdiv.f64	d7, d6, d7
    aeea:	ed8d 7b04 	vstr	d7, [sp, #16]
    aeee:	111b      	asrs	r3, r3, #4
    aef0:	f43f ad4e 	beq.w	a990 <_strtod_l+0x3f8>
    aef4:	2b1f      	cmp	r3, #31
    aef6:	dc33      	bgt.n	af60 <_strtod_l+0x9c8>
    aef8:	f013 0210 	ands.w	r2, r3, #16
    aefc:	bf18      	it	ne
    aefe:	226a      	movne	r2, #106	; 0x6a
    af00:	ed9d 7b04 	vldr	d7, [sp, #16]
    af04:	9208      	str	r2, [sp, #32]
    af06:	4a27      	ldr	r2, [pc, #156]	; (afa4 <_strtod_l+0xa0c>)
    af08:	2100      	movs	r1, #0
    af0a:	07d8      	lsls	r0, r3, #31
    af0c:	d504      	bpl.n	af18 <_strtod_l+0x980>
    af0e:	ed92 6b00 	vldr	d6, [r2]
    af12:	2101      	movs	r1, #1
    af14:	ee27 7b06 	vmul.f64	d7, d7, d6
    af18:	105b      	asrs	r3, r3, #1
    af1a:	f102 0208 	add.w	r2, r2, #8
    af1e:	d1f4      	bne.n	af0a <_strtod_l+0x972>
    af20:	b109      	cbz	r1, af26 <_strtod_l+0x98e>
    af22:	ed8d 7b04 	vstr	d7, [sp, #16]
    af26:	9b08      	ldr	r3, [sp, #32]
    af28:	b193      	cbz	r3, af50 <_strtod_l+0x9b8>
    af2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    af2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
    af32:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    af36:	2b00      	cmp	r3, #0
    af38:	dd0a      	ble.n	af50 <_strtod_l+0x9b8>
    af3a:	2b1f      	cmp	r3, #31
    af3c:	f340 822f 	ble.w	b39e <_strtod_l+0xe06>
    af40:	2000      	movs	r0, #0
    af42:	2b34      	cmp	r3, #52	; 0x34
    af44:	9004      	str	r0, [sp, #16]
    af46:	f340 8240 	ble.w	b3ca <_strtod_l+0xe32>
    af4a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    af4e:	9305      	str	r3, [sp, #20]
    af50:	ed9d 7b04 	vldr	d7, [sp, #16]
    af54:	eeb5 7b40 	vcmp.f64	d7, #0.0
    af58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af5c:	f47f ad1a 	bne.w	a994 <_strtod_l+0x3fc>
    af60:	2322      	movs	r3, #34	; 0x22
    af62:	ed9f 8b05 	vldr	d8, [pc, #20]	; af78 <_strtod_l+0x9e0>
    af66:	f8c8 3000 	str.w	r3, [r8]
    af6a:	e4d2      	b.n	a912 <_strtod_l+0x37a>
    af6c:	2322      	movs	r3, #34	; 0x22
    af6e:	ed9f 8b04 	vldr	d8, [pc, #16]	; af80 <_strtod_l+0x9e8>
    af72:	f8c8 3000 	str.w	r3, [r8]
    af76:	e4cc      	b.n	a912 <_strtod_l+0x37a>
	...
    af84:	7ff00000 	.word	0x7ff00000
    af88:	bff00000 	.word	0xbff00000
    af8c:	7ff00000 	.word	0x7ff00000
    af90:	7c9fffff 	.word	0x7c9fffff
    af94:	7fefffff 	.word	0x7fefffff
    af98:	20000280 	.word	0x20000280
    af9c:	7ca00000 	.word	0x7ca00000
    afa0:	200002a8 	.word	0x200002a8
    afa4:	20000370 	.word	0x20000370
    afa8:	9302      	str	r3, [sp, #8]
    afaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    afac:	9301      	str	r3, [sp, #4]
    afae:	ab12      	add	r3, sp, #72	; 0x48
    afb0:	9300      	str	r3, [sp, #0]
    afb2:	4aa7      	ldr	r2, [pc, #668]	; (b250 <_strtod_l+0xcb8>)
    afb4:	ab13      	add	r3, sp, #76	; 0x4c
    afb6:	a911      	add	r1, sp, #68	; 0x44
    afb8:	4640      	mov	r0, r8
    afba:	f001 fb6b 	bl	c694 <__gethex>
    afbe:	f010 050f 	ands.w	r5, r0, #15
    afc2:	4604      	mov	r4, r0
    afc4:	f43f aca3 	beq.w	a90e <_strtod_l+0x376>
    afc8:	2d06      	cmp	r5, #6
    afca:	d174      	bne.n	b0b6 <_strtod_l+0xb1e>
    afcc:	9b07      	ldr	r3, [sp, #28]
    afce:	ed9f 8b9a 	vldr	d8, [pc, #616]	; b238 <_strtod_l+0xca0>
    afd2:	3701      	adds	r7, #1
    afd4:	2b00      	cmp	r3, #0
    afd6:	f43f abce 	beq.w	a776 <_strtod_l+0x1de>
    afda:	601f      	str	r7, [r3, #0]
    afdc:	f7ff bbcb 	b.w	a776 <_strtod_l+0x1de>
    afe0:	ed9d 8b04 	vldr	d8, [sp, #16]
    afe4:	e495      	b.n	a912 <_strtod_l+0x37a>
    afe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    afe8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    afec:	4403      	add	r3, r0
    afee:	930b      	str	r3, [sp, #44]	; 0x2c
    aff0:	2801      	cmp	r0, #1
    aff2:	f105 0301 	add.w	r3, r5, #1
    aff6:	461a      	mov	r2, r3
    aff8:	d014      	beq.n	b024 <_strtod_l+0xa8c>
    affa:	4428      	add	r0, r5
    affc:	1e44      	subs	r4, r0, #1
    affe:	e003      	b.n	b008 <_strtod_l+0xa70>
    b000:	0046      	lsls	r6, r0, #1
    b002:	429c      	cmp	r4, r3
    b004:	d00d      	beq.n	b022 <_strtod_l+0xa8a>
    b006:	3301      	adds	r3, #1
    b008:	462a      	mov	r2, r5
    b00a:	2a08      	cmp	r2, #8
    b00c:	461d      	mov	r5, r3
    b00e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    b012:	d9f5      	bls.n	b000 <_strtod_l+0xa68>
    b014:	2b10      	cmp	r3, #16
    b016:	bfdc      	itt	le
    b018:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    b01c:	ea4f 0949 	movle.w	r9, r9, lsl #1
    b020:	e7ef      	b.n	b002 <_strtod_l+0xa6a>
    b022:	3202      	adds	r2, #2
    b024:	2d08      	cmp	r5, #8
    b026:	dc3c      	bgt.n	b0a2 <_strtod_l+0xb0a>
    b028:	4615      	mov	r5, r2
    b02a:	f7ff bb79 	b.w	a720 <_strtod_l+0x188>
    b02e:	4989      	ldr	r1, [pc, #548]	; (b254 <_strtod_l+0xcbc>)
    b030:	2201      	movs	r2, #1
    b032:	4638      	mov	r0, r7
    b034:	f000 fd74 	bl	bb20 <strncmp>
    b038:	2800      	cmp	r0, #0
    b03a:	f000 8082 	beq.w	b142 <_strtod_l+0xbaa>
    b03e:	f04f 0e00 	mov.w	lr, #0
    b042:	46f1      	mov	r9, lr
    b044:	4676      	mov	r6, lr
    b046:	4675      	mov	r5, lr
    b048:	f7ff bbb5 	b.w	a7b6 <_strtod_l+0x21e>
    b04c:	f644 631f 	movw	r3, #19999	; 0x4e1f
    b050:	459b      	cmp	fp, r3
    b052:	bfa8      	it	ge
    b054:	469b      	movge	fp, r3
    b056:	e42f      	b.n	a8b8 <_strtod_l+0x320>
    b058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b05c:	4618      	mov	r0, r3
    b05e:	2b00      	cmp	r3, #0
    b060:	f47f ae23 	bne.w	acaa <_strtod_l+0x712>
    b064:	2322      	movs	r3, #34	; 0x22
    b066:	ed9f 8b74 	vldr	d8, [pc, #464]	; b238 <_strtod_l+0xca0>
    b06a:	9812      	ldr	r0, [sp, #72]	; 0x48
    b06c:	f8c8 3000 	str.w	r3, [r8]
    b070:	e678      	b.n	ad64 <_strtod_l+0x7cc>
    b072:	eeb0 7b49 	vmov.f64	d7, d9
    b076:	e6c0      	b.n	adfa <_strtod_l+0x862>
    b078:	4977      	ldr	r1, [pc, #476]	; (b258 <_strtod_l+0xcc0>)
    b07a:	a811      	add	r0, sp, #68	; 0x44
    b07c:	f001 fdd4 	bl	cc28 <__match>
    b080:	2800      	cmp	r0, #0
    b082:	f43f ab71 	beq.w	a768 <_strtod_l+0x1d0>
    b086:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b088:	4974      	ldr	r1, [pc, #464]	; (b25c <_strtod_l+0xcc4>)
    b08a:	3b01      	subs	r3, #1
    b08c:	a811      	add	r0, sp, #68	; 0x44
    b08e:	9311      	str	r3, [sp, #68]	; 0x44
    b090:	f001 fdca 	bl	cc28 <__match>
    b094:	b910      	cbnz	r0, b09c <_strtod_l+0xb04>
    b096:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b098:	3301      	adds	r3, #1
    b09a:	9311      	str	r3, [sp, #68]	; 0x44
    b09c:	ed9f 8b68 	vldr	d8, [pc, #416]	; b240 <_strtod_l+0xca8>
    b0a0:	e437      	b.n	a912 <_strtod_l+0x37a>
    b0a2:	2a10      	cmp	r2, #16
    b0a4:	bfdc      	itt	le
    b0a6:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    b0aa:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    b0ae:	4615      	mov	r5, r2
    b0b0:	2000      	movs	r0, #0
    b0b2:	f7ff bb3a 	b.w	a72a <_strtod_l+0x192>
    b0b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b0b8:	b13a      	cbz	r2, b0ca <_strtod_l+0xb32>
    b0ba:	2135      	movs	r1, #53	; 0x35
    b0bc:	a814      	add	r0, sp, #80	; 0x50
    b0be:	f002 fb97 	bl	d7f0 <__copybits>
    b0c2:	9912      	ldr	r1, [sp, #72]	; 0x48
    b0c4:	4640      	mov	r0, r8
    b0c6:	f001 fedf 	bl	ce88 <_Bfree>
    b0ca:	3d01      	subs	r5, #1
    b0cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b0ce:	2d04      	cmp	r5, #4
    b0d0:	f200 818f 	bhi.w	b3f2 <_strtod_l+0xe5a>
    b0d4:	e8df f005 	tbb	[pc, r5]
    b0d8:	1f2a2d03 	.word	0x1f2a2d03
    b0dc:	03          	.byte	0x03
    b0dd:	00          	.byte	0x00
    b0de:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b0e0:	9204      	str	r2, [sp, #16]
    b0e2:	f203 4233 	addw	r2, r3, #1075	; 0x433
    b0e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b0e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    b0ec:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    b0f0:	9305      	str	r3, [sp, #20]
    b0f2:	05e5      	lsls	r5, r4, #23
    b0f4:	d502      	bpl.n	b0fc <_strtod_l+0xb64>
    b0f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b0fa:	9305      	str	r3, [sp, #20]
    b0fc:	4a58      	ldr	r2, [pc, #352]	; (b260 <_strtod_l+0xcc8>)
    b0fe:	401a      	ands	r2, r3
    b100:	ed9d 8b04 	vldr	d8, [sp, #16]
    b104:	2a00      	cmp	r2, #0
    b106:	f47f ac04 	bne.w	a912 <_strtod_l+0x37a>
    b10a:	f000 fded 	bl	bce8 <__errno>
    b10e:	2322      	movs	r3, #34	; 0x22
    b110:	6003      	str	r3, [r0, #0]
    b112:	f7ff bbfe 	b.w	a912 <_strtod_l+0x37a>
    b116:	f04f 33ff 	mov.w	r3, #4294967295
    b11a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    b11e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    b122:	05e3      	lsls	r3, r4, #23
    b124:	f57f af5c 	bpl.w	afe0 <_strtod_l+0xa48>
    b128:	9b05      	ldr	r3, [sp, #20]
    b12a:	e7e4      	b.n	b0f6 <_strtod_l+0xb5e>
    b12c:	4b4c      	ldr	r3, [pc, #304]	; (b260 <_strtod_l+0xcc8>)
    b12e:	9305      	str	r3, [sp, #20]
    b130:	e7f7      	b.n	b122 <_strtod_l+0xb8a>
    b132:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b134:	9304      	str	r3, [sp, #16]
    b136:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b138:	9305      	str	r3, [sp, #20]
    b13a:	e7da      	b.n	b0f2 <_strtod_l+0xb5a>
    b13c:	2000      	movs	r0, #0
    b13e:	f7ff bae1 	b.w	a704 <_strtod_l+0x16c>
    b142:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b144:	461a      	mov	r2, r3
    b146:	3301      	adds	r3, #1
    b148:	9311      	str	r3, [sp, #68]	; 0x44
    b14a:	7854      	ldrb	r4, [r2, #1]
    b14c:	4606      	mov	r6, r0
    b14e:	4681      	mov	r9, r0
    b150:	f7ff bacd 	b.w	a6ee <_strtod_l+0x156>
    b154:	4b43      	ldr	r3, [pc, #268]	; (b264 <_strtod_l+0xccc>)
    b156:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b15a:	ed93 8b00 	vldr	d8, [r3]
    b15e:	ed9d 7b04 	vldr	d7, [sp, #16]
    b162:	ee28 8b07 	vmul.f64	d8, d8, d7
    b166:	f7ff bbd4 	b.w	a912 <_strtod_l+0x37a>
    b16a:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    b16e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    b172:	e511      	b.n	ab98 <_strtod_l+0x600>
    b174:	46ae      	mov	lr, r5
    b176:	900b      	str	r0, [sp, #44]	; 0x2c
    b178:	f7ff badc 	b.w	a734 <_strtod_l+0x19c>
    b17c:	4b39      	ldr	r3, [pc, #228]	; (b264 <_strtod_l+0xccc>)
    b17e:	f1c5 050f 	rsb	r5, r5, #15
    b182:	1b4a      	subs	r2, r1, r5
    b184:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    b188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b18c:	ed95 8b00 	vldr	d8, [r5]
    b190:	ed93 7b00 	vldr	d7, [r3]
    b194:	ed9d 6b04 	vldr	d6, [sp, #16]
    b198:	ee28 8b06 	vmul.f64	d8, d8, d6
    b19c:	ee28 8b07 	vmul.f64	d8, d8, d7
    b1a0:	f7ff bbb7 	b.w	a912 <_strtod_l+0x37a>
    b1a4:	2d00      	cmp	r5, #0
    b1a6:	f000 8095 	beq.w	b2d4 <_strtod_l+0xd3c>
    b1aa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    b1ae:	4b2e      	ldr	r3, [pc, #184]	; (b268 <_strtod_l+0xcd0>)
    b1b0:	f3cc 0113 	ubfx	r1, ip, #0, #20
    b1b4:	4299      	cmp	r1, r3
    b1b6:	4662      	mov	r2, ip
    b1b8:	f000 80d2 	beq.w	b360 <_strtod_l+0xdc8>
    b1bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b1be:	2b00      	cmp	r3, #0
    b1c0:	f000 80a5 	beq.w	b30e <_strtod_l+0xd76>
    b1c4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b1c8:	4213      	tst	r3, r2
    b1ca:	4617      	mov	r7, r2
    b1cc:	d01a      	beq.n	b204 <_strtod_l+0xc6c>
    b1ce:	eeb0 0b48 	vmov.f64	d0, d8
    b1d2:	2d00      	cmp	r5, #0
    b1d4:	f000 80a6 	beq.w	b324 <_strtod_l+0xd8c>
    b1d8:	f002 f9da 	bl	d590 <__ulp>
    b1dc:	9b08      	ldr	r3, [sp, #32]
    b1de:	b17b      	cbz	r3, b200 <_strtod_l+0xc68>
    b1e0:	f3c7 530a 	ubfx	r3, r7, #20, #11
    b1e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b1e8:	2b00      	cmp	r3, #0
    b1ea:	dd09      	ble.n	b200 <_strtod_l+0xc68>
    b1ec:	051b      	lsls	r3, r3, #20
    b1ee:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    b1f2:	2000      	movs	r0, #0
    b1f4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    b1f8:	ec41 0b17 	vmov	d7, r0, r1
    b1fc:	ee20 0b07 	vmul.f64	d0, d0, d7
    b200:	ee38 8b00 	vadd.f64	d8, d8, d0
    b204:	9b08      	ldr	r3, [sp, #32]
    b206:	b15b      	cbz	r3, b220 <_strtod_l+0xc88>
    b208:	ed9f 7b0f 	vldr	d7, [pc, #60]	; b248 <_strtod_l+0xcb0>
    b20c:	4b14      	ldr	r3, [pc, #80]	; (b260 <_strtod_l+0xcc8>)
    b20e:	ee28 8b07 	vmul.f64	d8, d8, d7
    b212:	ee18 2a90 	vmov	r2, s17
    b216:	4013      	ands	r3, r2
    b218:	b913      	cbnz	r3, b220 <_strtod_l+0xc88>
    b21a:	2322      	movs	r3, #34	; 0x22
    b21c:	f8c8 3000 	str.w	r3, [r8]
    b220:	9812      	ldr	r0, [sp, #72]	; 0x48
    b222:	e59f      	b.n	ad64 <_strtod_l+0x7cc>
    b224:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    b228:	9305      	str	r3, [sp, #20]
    b22a:	2300      	movs	r3, #0
    b22c:	9308      	str	r3, [sp, #32]
    b22e:	f7ff bbb1 	b.w	a994 <_strtod_l+0x3fc>
    b232:	bf00      	nop
    b234:	f3af 8000 	nop.w
	...
    b244:	7ff00000 	.word	0x7ff00000
    b248:	00000000 	.word	0x00000000
    b24c:	39500000 	.word	0x39500000
    b250:	20007a20 	.word	0x20007a20
    b254:	20007d38 	.word	0x20007d38
    b258:	20000c28 	.word	0x20000c28
    b25c:	20000c2c 	.word	0x20000c2c
    b260:	7ff00000 	.word	0x7ff00000
    b264:	200002a8 	.word	0x200002a8
    b268:	000fffff 	.word	0x000fffff
    b26c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b270:	430d      	orrs	r5, r1
    b272:	d1c7      	bne.n	b204 <_strtod_l+0xc6c>
    b274:	f3c2 0313 	ubfx	r3, r2, #0, #20
    b278:	4617      	mov	r7, r2
    b27a:	2b00      	cmp	r3, #0
    b27c:	d1c2      	bne.n	b204 <_strtod_l+0xc6c>
    b27e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b282:	0d1b      	lsrs	r3, r3, #20
    b284:	051b      	lsls	r3, r3, #20
    b286:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    b28a:	d9bb      	bls.n	b204 <_strtod_l+0xc6c>
    b28c:	f8da 3014 	ldr.w	r3, [sl, #20]
    b290:	b91b      	cbnz	r3, b29a <_strtod_l+0xd02>
    b292:	f8da 3010 	ldr.w	r3, [sl, #16]
    b296:	2b01      	cmp	r3, #1
    b298:	ddb4      	ble.n	b204 <_strtod_l+0xc6c>
    b29a:	4651      	mov	r1, sl
    b29c:	2201      	movs	r2, #1
    b29e:	4640      	mov	r0, r8
    b2a0:	f002 f832 	bl	d308 <__lshift>
    b2a4:	4621      	mov	r1, r4
    b2a6:	4682      	mov	sl, r0
    b2a8:	f002 f8a6 	bl	d3f8 <__mcmp>
    b2ac:	2800      	cmp	r0, #0
    b2ae:	dda9      	ble.n	b204 <_strtod_l+0xc6c>
    b2b0:	9b08      	ldr	r3, [sp, #32]
    b2b2:	2b00      	cmp	r3, #0
    b2b4:	d17e      	bne.n	b3b4 <_strtod_l+0xe1c>
    b2b6:	4b50      	ldr	r3, [pc, #320]	; (b3f8 <_strtod_l+0xe60>)
    b2b8:	403b      	ands	r3, r7
    b2ba:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    b2be:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    b2c2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    b2c6:	9305      	str	r3, [sp, #20]
    b2c8:	f04f 33ff 	mov.w	r3, #4294967295
    b2cc:	9304      	str	r3, [sp, #16]
    b2ce:	ed9d 8b04 	vldr	d8, [sp, #16]
    b2d2:	e797      	b.n	b204 <_strtod_l+0xc6c>
    b2d4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b2d8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    b2dc:	430b      	orrs	r3, r1
    b2de:	4617      	mov	r7, r2
    b2e0:	f47f af6c 	bne.w	b1bc <_strtod_l+0xc24>
    b2e4:	e7e4      	b.n	b2b0 <_strtod_l+0xd18>
    b2e6:	4945      	ldr	r1, [pc, #276]	; (b3fc <_strtod_l+0xe64>)
    b2e8:	a811      	add	r0, sp, #68	; 0x44
    b2ea:	aa14      	add	r2, sp, #80	; 0x50
    b2ec:	f001 fcb8 	bl	cc60 <__hexnan>
    b2f0:	2805      	cmp	r0, #5
    b2f2:	f47f ab06 	bne.w	a902 <_strtod_l+0x36a>
    b2f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b2f8:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    b2fc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    b300:	9305      	str	r3, [sp, #20]
    b302:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b304:	9304      	str	r3, [sp, #16]
    b306:	ed9d 8b04 	vldr	d8, [sp, #16]
    b30a:	f7ff bb02 	b.w	a912 <_strtod_l+0x37a>
    b30e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b314:	4203      	tst	r3, r0
    b316:	f43f af75 	beq.w	b204 <_strtod_l+0xc6c>
    b31a:	460f      	mov	r7, r1
    b31c:	e757      	b.n	b1ce <_strtod_l+0xc36>
    b31e:	4c38      	ldr	r4, [pc, #224]	; (b400 <_strtod_l+0xe68>)
    b320:	2100      	movs	r1, #0
    b322:	e58f      	b.n	ae44 <_strtod_l+0x8ac>
    b324:	f002 f934 	bl	d590 <__ulp>
    b328:	9b08      	ldr	r3, [sp, #32]
    b32a:	2b00      	cmp	r3, #0
    b32c:	d055      	beq.n	b3da <_strtod_l+0xe42>
    b32e:	f3c7 530a 	ubfx	r3, r7, #20, #11
    b332:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b336:	2b00      	cmp	r3, #0
    b338:	dd09      	ble.n	b34e <_strtod_l+0xdb6>
    b33a:	051b      	lsls	r3, r3, #20
    b33c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    b340:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    b344:	4628      	mov	r0, r5
    b346:	ec41 0b17 	vmov	d7, r0, r1
    b34a:	ee20 0b07 	vmul.f64	d0, d0, d7
    b34e:	ee38 8b40 	vsub.f64	d8, d8, d0
    b352:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b35a:	f47f af55 	bne.w	b208 <_strtod_l+0xc70>
    b35e:	e681      	b.n	b064 <_strtod_l+0xacc>
    b360:	9b08      	ldr	r3, [sp, #32]
    b362:	9904      	ldr	r1, [sp, #16]
    b364:	b31b      	cbz	r3, b3ae <_strtod_l+0xe16>
    b366:	4b24      	ldr	r3, [pc, #144]	; (b3f8 <_strtod_l+0xe60>)
    b368:	4013      	ands	r3, r2
    b36a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    b36e:	d81e      	bhi.n	b3ae <_strtod_l+0xe16>
    b370:	0d1b      	lsrs	r3, r3, #20
    b372:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b376:	f04f 30ff 	mov.w	r0, #4294967295
    b37a:	fa00 f303 	lsl.w	r3, r0, r3
    b37e:	4299      	cmp	r1, r3
    b380:	f47f af1c 	bne.w	b1bc <_strtod_l+0xc24>
    b384:	4b1f      	ldr	r3, [pc, #124]	; (b404 <_strtod_l+0xe6c>)
    b386:	429a      	cmp	r2, r3
    b388:	d030      	beq.n	b3ec <_strtod_l+0xe54>
    b38a:	4b1b      	ldr	r3, [pc, #108]	; (b3f8 <_strtod_l+0xe60>)
    b38c:	4013      	ands	r3, r2
    b38e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    b392:	9305      	str	r3, [sp, #20]
    b394:	2300      	movs	r3, #0
    b396:	9304      	str	r3, [sp, #16]
    b398:	ed9d 8b04 	vldr	d8, [sp, #16]
    b39c:	e732      	b.n	b204 <_strtod_l+0xc6c>
    b39e:	f04f 32ff 	mov.w	r2, #4294967295
    b3a2:	fa02 f303 	lsl.w	r3, r2, r3
    b3a6:	9a04      	ldr	r2, [sp, #16]
    b3a8:	401a      	ands	r2, r3
    b3aa:	9204      	str	r2, [sp, #16]
    b3ac:	e5d0      	b.n	af50 <_strtod_l+0x9b8>
    b3ae:	f04f 33ff 	mov.w	r3, #4294967295
    b3b2:	e7e4      	b.n	b37e <_strtod_l+0xde6>
    b3b4:	4b10      	ldr	r3, [pc, #64]	; (b3f8 <_strtod_l+0xe60>)
    b3b6:	403b      	ands	r3, r7
    b3b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    b3bc:	f73f af7d 	bgt.w	b2ba <_strtod_l+0xd22>
    b3c0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    b3c4:	f73f af20 	bgt.w	b208 <_strtod_l+0xc70>
    b3c8:	e64c      	b.n	b064 <_strtod_l+0xacc>
    b3ca:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    b3ce:	f04f 33ff 	mov.w	r3, #4294967295
    b3d2:	4093      	lsls	r3, r2
    b3d4:	400b      	ands	r3, r1
    b3d6:	9305      	str	r3, [sp, #20]
    b3d8:	e5ba      	b.n	af50 <_strtod_l+0x9b8>
    b3da:	ee38 8b40 	vsub.f64	d8, d8, d0
    b3de:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b3e6:	f47f af1b 	bne.w	b220 <_strtod_l+0xc88>
    b3ea:	e63b      	b.n	b064 <_strtod_l+0xacc>
    b3ec:	3101      	adds	r1, #1
    b3ee:	d1cc      	bne.n	b38a <_strtod_l+0xdf2>
    b3f0:	e409      	b.n	ac06 <_strtod_l+0x66e>
    b3f2:	2300      	movs	r3, #0
    b3f4:	e67d      	b.n	b0f2 <_strtod_l+0xb5a>
    b3f6:	bf00      	nop
    b3f8:	7ff00000 	.word	0x7ff00000
    b3fc:	20007a34 	.word	0x20007a34
    b400:	20000280 	.word	0x20000280
    b404:	7fefffff 	.word	0x7fefffff

0000b408 <_strtod_r>:
    b408:	4b01      	ldr	r3, [pc, #4]	; (b410 <_strtod_r+0x8>)
    b40a:	f7ff b8c5 	b.w	a598 <_strtod_l>
    b40e:	bf00      	nop
    b410:	200085f4 	.word	0x200085f4

0000b414 <_strtol_l.constprop.0>:
    b414:	2b01      	cmp	r3, #1
    b416:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b41a:	d040      	beq.n	b49e <_strtol_l.constprop.0+0x8a>
    b41c:	2b24      	cmp	r3, #36	; 0x24
    b41e:	4698      	mov	r8, r3
    b420:	d83d      	bhi.n	b49e <_strtol_l.constprop.0+0x8a>
    b422:	4d4c      	ldr	r5, [pc, #304]	; (b554 <_strtol_l.constprop.0+0x140>)
    b424:	468e      	mov	lr, r1
    b426:	4676      	mov	r6, lr
    b428:	f81e bb01 	ldrb.w	fp, [lr], #1
    b42c:	f815 400b 	ldrb.w	r4, [r5, fp]
    b430:	f014 0408 	ands.w	r4, r4, #8
    b434:	d1f7      	bne.n	b426 <_strtol_l.constprop.0+0x12>
    b436:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    b43a:	d072      	beq.n	b522 <_strtol_l.constprop.0+0x10e>
    b43c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    b440:	bf08      	it	eq
    b442:	f89e b000 	ldrbeq.w	fp, [lr]
    b446:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    b44a:	bf08      	it	eq
    b44c:	f106 0e02 	addeq.w	lr, r6, #2
    b450:	2b00      	cmp	r3, #0
    b452:	d042      	beq.n	b4da <_strtol_l.constprop.0+0xc6>
    b454:	2b10      	cmp	r3, #16
    b456:	d057      	beq.n	b508 <_strtol_l.constprop.0+0xf4>
    b458:	fbb9 f7f8 	udiv	r7, r9, r8
    b45c:	2500      	movs	r5, #0
    b45e:	462e      	mov	r6, r5
    b460:	fb08 9a17 	mls	sl, r8, r7, r9
    b464:	e005      	b.n	b472 <_strtol_l.constprop.0+0x5e>
    b466:	d033      	beq.n	b4d0 <_strtol_l.constprop.0+0xbc>
    b468:	fb08 c606 	mla	r6, r8, r6, ip
    b46c:	2501      	movs	r5, #1
    b46e:	f81e bb01 	ldrb.w	fp, [lr], #1
    b472:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    b476:	f1bc 0f09 	cmp.w	ip, #9
    b47a:	d906      	bls.n	b48a <_strtol_l.constprop.0+0x76>
    b47c:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    b480:	f1bc 0f19 	cmp.w	ip, #25
    b484:	d812      	bhi.n	b4ac <_strtol_l.constprop.0+0x98>
    b486:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    b48a:	4563      	cmp	r3, ip
    b48c:	dd17      	ble.n	b4be <_strtol_l.constprop.0+0xaa>
    b48e:	f1b5 3fff 	cmp.w	r5, #4294967295
    b492:	d0ec      	beq.n	b46e <_strtol_l.constprop.0+0x5a>
    b494:	42b7      	cmp	r7, r6
    b496:	d2e6      	bcs.n	b466 <_strtol_l.constprop.0+0x52>
    b498:	f04f 35ff 	mov.w	r5, #4294967295
    b49c:	e7e7      	b.n	b46e <_strtol_l.constprop.0+0x5a>
    b49e:	f000 fc23 	bl	bce8 <__errno>
    b4a2:	2316      	movs	r3, #22
    b4a4:	6003      	str	r3, [r0, #0]
    b4a6:	2000      	movs	r0, #0
    b4a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4ac:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    b4b0:	f1bc 0f19 	cmp.w	ip, #25
    b4b4:	d803      	bhi.n	b4be <_strtol_l.constprop.0+0xaa>
    b4b6:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    b4ba:	4563      	cmp	r3, ip
    b4bc:	dce7      	bgt.n	b48e <_strtol_l.constprop.0+0x7a>
    b4be:	1c6b      	adds	r3, r5, #1
    b4c0:	d027      	beq.n	b512 <_strtol_l.constprop.0+0xfe>
    b4c2:	b98c      	cbnz	r4, b4e8 <_strtol_l.constprop.0+0xd4>
    b4c4:	b10a      	cbz	r2, b4ca <_strtol_l.constprop.0+0xb6>
    b4c6:	bba5      	cbnz	r5, b532 <_strtol_l.constprop.0+0x11e>
    b4c8:	6011      	str	r1, [r2, #0]
    b4ca:	4630      	mov	r0, r6
    b4cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4d0:	45e2      	cmp	sl, ip
    b4d2:	dac9      	bge.n	b468 <_strtol_l.constprop.0+0x54>
    b4d4:	f04f 35ff 	mov.w	r5, #4294967295
    b4d8:	e7c9      	b.n	b46e <_strtol_l.constprop.0+0x5a>
    b4da:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b4de:	d005      	beq.n	b4ec <_strtol_l.constprop.0+0xd8>
    b4e0:	f04f 080a 	mov.w	r8, #10
    b4e4:	4643      	mov	r3, r8
    b4e6:	e7b7      	b.n	b458 <_strtol_l.constprop.0+0x44>
    b4e8:	4276      	negs	r6, r6
    b4ea:	e7eb      	b.n	b4c4 <_strtol_l.constprop.0+0xb0>
    b4ec:	f89e 3000 	ldrb.w	r3, [lr]
    b4f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b4f4:	2b58      	cmp	r3, #88	; 0x58
    b4f6:	d121      	bne.n	b53c <_strtol_l.constprop.0+0x128>
    b4f8:	f04f 0810 	mov.w	r8, #16
    b4fc:	f89e b001 	ldrb.w	fp, [lr, #1]
    b500:	4643      	mov	r3, r8
    b502:	f10e 0e02 	add.w	lr, lr, #2
    b506:	e7a7      	b.n	b458 <_strtol_l.constprop.0+0x44>
    b508:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b50c:	d01a      	beq.n	b544 <_strtol_l.constprop.0+0x130>
    b50e:	4698      	mov	r8, r3
    b510:	e7a2      	b.n	b458 <_strtol_l.constprop.0+0x44>
    b512:	2322      	movs	r3, #34	; 0x22
    b514:	6003      	str	r3, [r0, #0]
    b516:	b172      	cbz	r2, b536 <_strtol_l.constprop.0+0x122>
    b518:	f10e 31ff 	add.w	r1, lr, #4294967295
    b51c:	464e      	mov	r6, r9
    b51e:	6011      	str	r1, [r2, #0]
    b520:	e7d3      	b.n	b4ca <_strtol_l.constprop.0+0xb6>
    b522:	f89e b000 	ldrb.w	fp, [lr]
    b526:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    b52a:	f106 0e02 	add.w	lr, r6, #2
    b52e:	2401      	movs	r4, #1
    b530:	e78e      	b.n	b450 <_strtol_l.constprop.0+0x3c>
    b532:	46b1      	mov	r9, r6
    b534:	e7f0      	b.n	b518 <_strtol_l.constprop.0+0x104>
    b536:	464e      	mov	r6, r9
    b538:	4630      	mov	r0, r6
    b53a:	e7c7      	b.n	b4cc <_strtol_l.constprop.0+0xb8>
    b53c:	f04f 0808 	mov.w	r8, #8
    b540:	4643      	mov	r3, r8
    b542:	e789      	b.n	b458 <_strtol_l.constprop.0+0x44>
    b544:	f89e 5000 	ldrb.w	r5, [lr]
    b548:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    b54c:	2d58      	cmp	r5, #88	; 0x58
    b54e:	d0d3      	beq.n	b4f8 <_strtol_l.constprop.0+0xe4>
    b550:	4698      	mov	r8, r3
    b552:	e781      	b.n	b458 <_strtol_l.constprop.0+0x44>
    b554:	20000aa5 	.word	0x20000aa5

0000b558 <_strtol_r>:
    b558:	f7ff bf5c 	b.w	b414 <_strtol_l.constprop.0>

0000b55c <__cxa_atexit>:
    b55c:	4613      	mov	r3, r2
    b55e:	460a      	mov	r2, r1
    b560:	4601      	mov	r1, r0
    b562:	2002      	movs	r0, #2
    b564:	f000 beaa 	b.w	c2bc <__register_exitproc>

0000b568 <stdio_exit_handler>:
    b568:	4a02      	ldr	r2, [pc, #8]	; (b574 <stdio_exit_handler+0xc>)
    b56a:	4903      	ldr	r1, [pc, #12]	; (b578 <stdio_exit_handler+0x10>)
    b56c:	4803      	ldr	r0, [pc, #12]	; (b57c <stdio_exit_handler+0x14>)
    b56e:	f000 b8bb 	b.w	b6e8 <_fwalk_sglue>
    b572:	bf00      	nop
    b574:	20008b70 	.word	0x20008b70
    b578:	00010c65 	.word	0x00010c65
    b57c:	200084a8 	.word	0x200084a8

0000b580 <cleanup_stdio>:
    b580:	4b0c      	ldr	r3, [pc, #48]	; (b5b4 <cleanup_stdio+0x34>)
    b582:	6841      	ldr	r1, [r0, #4]
    b584:	4299      	cmp	r1, r3
    b586:	b510      	push	{r4, lr}
    b588:	4604      	mov	r4, r0
    b58a:	d001      	beq.n	b590 <cleanup_stdio+0x10>
    b58c:	f005 fb6a 	bl	10c64 <_fclose_r>
    b590:	68a1      	ldr	r1, [r4, #8]
    b592:	4b09      	ldr	r3, [pc, #36]	; (b5b8 <cleanup_stdio+0x38>)
    b594:	4299      	cmp	r1, r3
    b596:	d002      	beq.n	b59e <cleanup_stdio+0x1e>
    b598:	4620      	mov	r0, r4
    b59a:	f005 fb63 	bl	10c64 <_fclose_r>
    b59e:	68e1      	ldr	r1, [r4, #12]
    b5a0:	4b06      	ldr	r3, [pc, #24]	; (b5bc <cleanup_stdio+0x3c>)
    b5a2:	4299      	cmp	r1, r3
    b5a4:	d004      	beq.n	b5b0 <cleanup_stdio+0x30>
    b5a6:	4620      	mov	r0, r4
    b5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b5ac:	f005 bb5a 	b.w	10c64 <_fclose_r>
    b5b0:	bd10      	pop	{r4, pc}
    b5b2:	bf00      	nop
    b5b4:	20028ae8 	.word	0x20028ae8
    b5b8:	20028b50 	.word	0x20028b50
    b5bc:	20028bb8 	.word	0x20028bb8

0000b5c0 <global_stdio_init.part.0>:
    b5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b5c4:	4c2a      	ldr	r4, [pc, #168]	; (b670 <global_stdio_init.part.0+0xb0>)
    b5c6:	4b2b      	ldr	r3, [pc, #172]	; (b674 <global_stdio_init.part.0+0xb4>)
    b5c8:	482b      	ldr	r0, [pc, #172]	; (b678 <global_stdio_init.part.0+0xb8>)
    b5ca:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b68c <global_stdio_init.part.0+0xcc>
    b5ce:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b690 <global_stdio_init.part.0+0xd0>
    b5d2:	4f2a      	ldr	r7, [pc, #168]	; (b67c <global_stdio_init.part.0+0xbc>)
    b5d4:	6018      	str	r0, [r3, #0]
    b5d6:	2500      	movs	r5, #0
    b5d8:	2304      	movs	r3, #4
    b5da:	2208      	movs	r2, #8
    b5dc:	4629      	mov	r1, r5
    b5de:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b5e2:	4e27      	ldr	r6, [pc, #156]	; (b680 <global_stdio_init.part.0+0xc0>)
    b5e4:	6665      	str	r5, [r4, #100]	; 0x64
    b5e6:	e9c4 5302 	strd	r5, r3, [r4, #8]
    b5ea:	e9c4 5500 	strd	r5, r5, [r4]
    b5ee:	e9c4 5504 	strd	r5, r5, [r4, #16]
    b5f2:	61a5      	str	r5, [r4, #24]
    b5f4:	f000 fa42 	bl	ba7c <memset>
    b5f8:	4b22      	ldr	r3, [pc, #136]	; (b684 <global_stdio_init.part.0+0xc4>)
    b5fa:	6763      	str	r3, [r4, #116]	; 0x74
    b5fc:	2208      	movs	r2, #8
    b5fe:	4629      	mov	r1, r5
    b600:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b604:	e9c4 4907 	strd	r4, r9, [r4, #28]
    b608:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    b60c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    b610:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    b614:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    b618:	6725      	str	r5, [r4, #112]	; 0x70
    b61a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    b61e:	62e6      	str	r6, [r4, #44]	; 0x2c
    b620:	f000 fa2c 	bl	ba7c <memset>
    b624:	4b18      	ldr	r3, [pc, #96]	; (b688 <global_stdio_init.part.0+0xc8>)
    b626:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    b62a:	4629      	mov	r1, r5
    b62c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    b630:	2208      	movs	r2, #8
    b632:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b636:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    b63a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    b63e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    b642:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    b646:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    b64a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    b64e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    b652:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b656:	f000 fa11 	bl	ba7c <memset>
    b65a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    b65e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    b662:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    b666:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    b66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b66e:	bf00      	nop
    b670:	20028ae8 	.word	0x20028ae8
    b674:	20028c20 	.word	0x20028c20
    b678:	0000b569 	.word	0x0000b569
    b67c:	0000b831 	.word	0x0000b831
    b680:	0000b851 	.word	0x0000b851
    b684:	00010009 	.word	0x00010009
    b688:	00020012 	.word	0x00020012
    b68c:	0000b7c9 	.word	0x0000b7c9
    b690:	0000b7f1 	.word	0x0000b7f1

0000b694 <__sinit>:
    b694:	b510      	push	{r4, lr}
    b696:	4604      	mov	r4, r0
    b698:	480a      	ldr	r0, [pc, #40]	; (b6c4 <__sinit+0x30>)
    b69a:	f000 fb53 	bl	bd44 <__retarget_lock_acquire_recursive>
    b69e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b6a0:	b923      	cbnz	r3, b6ac <__sinit+0x18>
    b6a2:	4b09      	ldr	r3, [pc, #36]	; (b6c8 <__sinit+0x34>)
    b6a4:	4a09      	ldr	r2, [pc, #36]	; (b6cc <__sinit+0x38>)
    b6a6:	681b      	ldr	r3, [r3, #0]
    b6a8:	6362      	str	r2, [r4, #52]	; 0x34
    b6aa:	b123      	cbz	r3, b6b6 <__sinit+0x22>
    b6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6b0:	4804      	ldr	r0, [pc, #16]	; (b6c4 <__sinit+0x30>)
    b6b2:	f000 bb49 	b.w	bd48 <__retarget_lock_release_recursive>
    b6b6:	f7ff ff83 	bl	b5c0 <global_stdio_init.part.0>
    b6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6be:	4801      	ldr	r0, [pc, #4]	; (b6c4 <__sinit+0x30>)
    b6c0:	f000 bb42 	b.w	bd48 <__retarget_lock_release_recursive>
    b6c4:	20028ab0 	.word	0x20028ab0
    b6c8:	20028c20 	.word	0x20028c20
    b6cc:	0000b581 	.word	0x0000b581

0000b6d0 <__sfp_lock_acquire>:
    b6d0:	4801      	ldr	r0, [pc, #4]	; (b6d8 <__sfp_lock_acquire+0x8>)
    b6d2:	f000 bb37 	b.w	bd44 <__retarget_lock_acquire_recursive>
    b6d6:	bf00      	nop
    b6d8:	20028ab0 	.word	0x20028ab0

0000b6dc <__sfp_lock_release>:
    b6dc:	4801      	ldr	r0, [pc, #4]	; (b6e4 <__sfp_lock_release+0x8>)
    b6de:	f000 bb33 	b.w	bd48 <__retarget_lock_release_recursive>
    b6e2:	bf00      	nop
    b6e4:	20028ab0 	.word	0x20028ab0

0000b6e8 <_fwalk_sglue>:
    b6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b6ec:	4680      	mov	r8, r0
    b6ee:	460f      	mov	r7, r1
    b6f0:	4616      	mov	r6, r2
    b6f2:	f04f 0900 	mov.w	r9, #0
    b6f6:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    b6fa:	3d01      	subs	r5, #1
    b6fc:	d411      	bmi.n	b722 <_fwalk_sglue+0x3a>
    b6fe:	89a3      	ldrh	r3, [r4, #12]
    b700:	2b01      	cmp	r3, #1
    b702:	f105 35ff 	add.w	r5, r5, #4294967295
    b706:	d908      	bls.n	b71a <_fwalk_sglue+0x32>
    b708:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    b70c:	3301      	adds	r3, #1
    b70e:	4621      	mov	r1, r4
    b710:	d003      	beq.n	b71a <_fwalk_sglue+0x32>
    b712:	4640      	mov	r0, r8
    b714:	47b8      	blx	r7
    b716:	ea49 0900 	orr.w	r9, r9, r0
    b71a:	1c6b      	adds	r3, r5, #1
    b71c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    b720:	d1ed      	bne.n	b6fe <_fwalk_sglue+0x16>
    b722:	6836      	ldr	r6, [r6, #0]
    b724:	2e00      	cmp	r6, #0
    b726:	d1e6      	bne.n	b6f6 <_fwalk_sglue+0xe>
    b728:	4648      	mov	r0, r9
    b72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b72e:	bf00      	nop

0000b730 <sprintf>:
    b730:	b40e      	push	{r1, r2, r3}
    b732:	b510      	push	{r4, lr}
    b734:	b09d      	sub	sp, #116	; 0x74
    b736:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b73a:	ab1f      	add	r3, sp, #124	; 0x7c
    b73c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b740:	9104      	str	r1, [sp, #16]
    b742:	4909      	ldr	r1, [pc, #36]	; (b768 <sprintf+0x38>)
    b744:	f853 2b04 	ldr.w	r2, [r3], #4
    b748:	9002      	str	r0, [sp, #8]
    b74a:	4c08      	ldr	r4, [pc, #32]	; (b76c <sprintf+0x3c>)
    b74c:	6808      	ldr	r0, [r1, #0]
    b74e:	9301      	str	r3, [sp, #4]
    b750:	a902      	add	r1, sp, #8
    b752:	9405      	str	r4, [sp, #20]
    b754:	f002 f8bc 	bl	d8d0 <_svfprintf_r>
    b758:	9b02      	ldr	r3, [sp, #8]
    b75a:	2200      	movs	r2, #0
    b75c:	701a      	strb	r2, [r3, #0]
    b75e:	b01d      	add	sp, #116	; 0x74
    b760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b764:	b003      	add	sp, #12
    b766:	4770      	bx	lr
    b768:	20008b7c 	.word	0x20008b7c
    b76c:	ffff0208 	.word	0xffff0208

0000b770 <sscanf>:
    b770:	b40e      	push	{r1, r2, r3}
    b772:	b510      	push	{r4, lr}
    b774:	b09f      	sub	sp, #124	; 0x7c
    b776:	ac21      	add	r4, sp, #132	; 0x84
    b778:	f44f 7101 	mov.w	r1, #516	; 0x204
    b77c:	f854 2b04 	ldr.w	r2, [r4], #4
    b780:	9201      	str	r2, [sp, #4]
    b782:	f8ad 101c 	strh.w	r1, [sp, #28]
    b786:	9004      	str	r0, [sp, #16]
    b788:	9008      	str	r0, [sp, #32]
    b78a:	f000 fd19 	bl	c1c0 <strlen>
    b78e:	9005      	str	r0, [sp, #20]
    b790:	9009      	str	r0, [sp, #36]	; 0x24
    b792:	480b      	ldr	r0, [pc, #44]	; (b7c0 <sscanf+0x50>)
    b794:	490b      	ldr	r1, [pc, #44]	; (b7c4 <sscanf+0x54>)
    b796:	910c      	str	r1, [sp, #48]	; 0x30
    b798:	2300      	movs	r3, #0
    b79a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    b79e:	9310      	str	r3, [sp, #64]	; 0x40
    b7a0:	9315      	str	r3, [sp, #84]	; 0x54
    b7a2:	9a01      	ldr	r2, [sp, #4]
    b7a4:	6800      	ldr	r0, [r0, #0]
    b7a6:	f8ad c01e 	strh.w	ip, [sp, #30]
    b7aa:	4623      	mov	r3, r4
    b7ac:	a904      	add	r1, sp, #16
    b7ae:	9403      	str	r4, [sp, #12]
    b7b0:	f003 fe30 	bl	f414 <__ssvfscanf_r>
    b7b4:	b01f      	add	sp, #124	; 0x7c
    b7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7ba:	b003      	add	sp, #12
    b7bc:	4770      	bx	lr
    b7be:	bf00      	nop
    b7c0:	20008b7c 	.word	0x20008b7c
    b7c4:	0000b7ed 	.word	0x0000b7ed

0000b7c8 <__sread>:
    b7c8:	b510      	push	{r4, lr}
    b7ca:	460c      	mov	r4, r1
    b7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b7d0:	f000 fa4c 	bl	bc6c <_read_r>
    b7d4:	2800      	cmp	r0, #0
    b7d6:	db03      	blt.n	b7e0 <__sread+0x18>
    b7d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b7da:	4403      	add	r3, r0
    b7dc:	6523      	str	r3, [r4, #80]	; 0x50
    b7de:	bd10      	pop	{r4, pc}
    b7e0:	89a3      	ldrh	r3, [r4, #12]
    b7e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b7e6:	81a3      	strh	r3, [r4, #12]
    b7e8:	bd10      	pop	{r4, pc}
    b7ea:	bf00      	nop

0000b7ec <__seofread>:
    b7ec:	2000      	movs	r0, #0
    b7ee:	4770      	bx	lr

0000b7f0 <__swrite>:
    b7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7f4:	460c      	mov	r4, r1
    b7f6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    b7fa:	461f      	mov	r7, r3
    b7fc:	05cb      	lsls	r3, r1, #23
    b7fe:	4605      	mov	r5, r0
    b800:	4616      	mov	r6, r2
    b802:	d40b      	bmi.n	b81c <__swrite+0x2c>
    b804:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    b808:	81a1      	strh	r1, [r4, #12]
    b80a:	463b      	mov	r3, r7
    b80c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b810:	4632      	mov	r2, r6
    b812:	4628      	mov	r0, r5
    b814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b818:	f000 ba50 	b.w	bcbc <_write_r>
    b81c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b820:	2302      	movs	r3, #2
    b822:	2200      	movs	r2, #0
    b824:	f000 fa0c 	bl	bc40 <_lseek_r>
    b828:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    b82c:	e7ea      	b.n	b804 <__swrite+0x14>
    b82e:	bf00      	nop

0000b830 <__sseek>:
    b830:	b510      	push	{r4, lr}
    b832:	460c      	mov	r4, r1
    b834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b838:	f000 fa02 	bl	bc40 <_lseek_r>
    b83c:	89a3      	ldrh	r3, [r4, #12]
    b83e:	1c42      	adds	r2, r0, #1
    b840:	bf0e      	itee	eq
    b842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b84a:	6520      	strne	r0, [r4, #80]	; 0x50
    b84c:	81a3      	strh	r3, [r4, #12]
    b84e:	bd10      	pop	{r4, pc}

0000b850 <__sclose>:
    b850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b854:	f000 b9e2 	b.w	bc1c <_close_r>

0000b858 <_vdprintf_r>:
    b858:	b5f0      	push	{r4, r5, r6, r7, lr}
    b85a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    b85e:	af04      	add	r7, sp, #16
    b860:	9300      	str	r3, [sp, #0]
    b862:	4613      	mov	r3, r2
    b864:	f44f 7200 	mov.w	r2, #512	; 0x200
    b868:	460e      	mov	r6, r1
    b86a:	9203      	str	r2, [sp, #12]
    b86c:	4639      	mov	r1, r7
    b86e:	aa03      	add	r2, sp, #12
    b870:	4605      	mov	r5, r0
    b872:	f000 f825 	bl	b8c0 <_vasnprintf_r>
    b876:	b188      	cbz	r0, b89c <_vdprintf_r+0x44>
    b878:	4604      	mov	r4, r0
    b87a:	4602      	mov	r2, r0
    b87c:	9b03      	ldr	r3, [sp, #12]
    b87e:	4631      	mov	r1, r6
    b880:	4628      	mov	r0, r5
    b882:	f000 fa1b 	bl	bcbc <_write_r>
    b886:	42bc      	cmp	r4, r7
    b888:	9003      	str	r0, [sp, #12]
    b88a:	d004      	beq.n	b896 <_vdprintf_r+0x3e>
    b88c:	4628      	mov	r0, r5
    b88e:	4621      	mov	r1, r4
    b890:	f000 fda8 	bl	c3e4 <_free_r>
    b894:	9803      	ldr	r0, [sp, #12]
    b896:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    b89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b89c:	f04f 30ff 	mov.w	r0, #4294967295
    b8a0:	e7f9      	b.n	b896 <_vdprintf_r+0x3e>
    b8a2:	bf00      	nop

0000b8a4 <vdprintf>:
    b8a4:	b410      	push	{r4}
    b8a6:	4c05      	ldr	r4, [pc, #20]	; (b8bc <vdprintf+0x18>)
    b8a8:	4684      	mov	ip, r0
    b8aa:	4613      	mov	r3, r2
    b8ac:	6820      	ldr	r0, [r4, #0]
    b8ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    b8b2:	460a      	mov	r2, r1
    b8b4:	4661      	mov	r1, ip
    b8b6:	f7ff bfcf 	b.w	b858 <_vdprintf_r>
    b8ba:	bf00      	nop
    b8bc:	20008b7c 	.word	0x20008b7c

0000b8c0 <_vasnprintf_r>:
    b8c0:	b530      	push	{r4, r5, lr}
    b8c2:	6814      	ldr	r4, [r2, #0]
    b8c4:	4615      	mov	r5, r2
    b8c6:	b09b      	sub	sp, #108	; 0x6c
    b8c8:	461a      	mov	r2, r3
    b8ca:	b109      	cbz	r1, b8d0 <_vasnprintf_r+0x10>
    b8cc:	2c00      	cmp	r4, #0
    b8ce:	d119      	bne.n	b904 <_vasnprintf_r+0x44>
    b8d0:	2100      	movs	r1, #0
    b8d2:	f44f 7322 	mov.w	r3, #648	; 0x288
    b8d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    b8da:	9100      	str	r1, [sp, #0]
    b8dc:	9104      	str	r1, [sp, #16]
    b8de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b8e2:	9102      	str	r1, [sp, #8]
    b8e4:	9105      	str	r1, [sp, #20]
    b8e6:	f8ad 300e 	strh.w	r3, [sp, #14]
    b8ea:	4669      	mov	r1, sp
    b8ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    b8ee:	f001 ffef 	bl	d8d0 <_svfprintf_r>
    b8f2:	2800      	cmp	r0, #0
    b8f4:	db13      	blt.n	b91e <_vasnprintf_r+0x5e>
    b8f6:	9b00      	ldr	r3, [sp, #0]
    b8f8:	6028      	str	r0, [r5, #0]
    b8fa:	2200      	movs	r2, #0
    b8fc:	701a      	strb	r2, [r3, #0]
    b8fe:	9804      	ldr	r0, [sp, #16]
    b900:	b01b      	add	sp, #108	; 0x6c
    b902:	bd30      	pop	{r4, r5, pc}
    b904:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    b908:	9100      	str	r1, [sp, #0]
    b90a:	9104      	str	r1, [sp, #16]
    b90c:	f8ad 300c 	strh.w	r3, [sp, #12]
    b910:	4621      	mov	r1, r4
    b912:	dae4      	bge.n	b8de <_vasnprintf_r+0x1e>
    b914:	238b      	movs	r3, #139	; 0x8b
    b916:	6003      	str	r3, [r0, #0]
    b918:	2000      	movs	r0, #0
    b91a:	b01b      	add	sp, #108	; 0x6c
    b91c:	bd30      	pop	{r4, r5, pc}
    b91e:	2000      	movs	r0, #0
    b920:	e7ee      	b.n	b900 <_vasnprintf_r+0x40>
    b922:	bf00      	nop

0000b924 <memcmp>:
    b924:	2a03      	cmp	r2, #3
    b926:	b570      	push	{r4, r5, r6, lr}
    b928:	d914      	bls.n	b954 <memcmp+0x30>
    b92a:	ea40 0301 	orr.w	r3, r0, r1
    b92e:	079b      	lsls	r3, r3, #30
    b930:	d122      	bne.n	b978 <memcmp+0x54>
    b932:	4604      	mov	r4, r0
    b934:	460b      	mov	r3, r1
    b936:	4619      	mov	r1, r3
    b938:	4620      	mov	r0, r4
    b93a:	680e      	ldr	r6, [r1, #0]
    b93c:	6805      	ldr	r5, [r0, #0]
    b93e:	42b5      	cmp	r5, r6
    b940:	f104 0404 	add.w	r4, r4, #4
    b944:	f103 0304 	add.w	r3, r3, #4
    b948:	d116      	bne.n	b978 <memcmp+0x54>
    b94a:	3a04      	subs	r2, #4
    b94c:	2a03      	cmp	r2, #3
    b94e:	4620      	mov	r0, r4
    b950:	4619      	mov	r1, r3
    b952:	d8f0      	bhi.n	b936 <memcmp+0x12>
    b954:	1e54      	subs	r4, r2, #1
    b956:	b19a      	cbz	r2, b980 <memcmp+0x5c>
    b958:	1e42      	subs	r2, r0, #1
    b95a:	3901      	subs	r1, #1
    b95c:	e001      	b.n	b962 <memcmp+0x3e>
    b95e:	18c3      	adds	r3, r0, r3
    b960:	d00c      	beq.n	b97c <memcmp+0x58>
    b962:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    b966:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    b96a:	45e6      	cmp	lr, ip
    b96c:	eba4 0302 	sub.w	r3, r4, r2
    b970:	d0f5      	beq.n	b95e <memcmp+0x3a>
    b972:	ebae 000c 	sub.w	r0, lr, ip
    b976:	bd70      	pop	{r4, r5, r6, pc}
    b978:	1e54      	subs	r4, r2, #1
    b97a:	e7ed      	b.n	b958 <memcmp+0x34>
    b97c:	4618      	mov	r0, r3
    b97e:	bd70      	pop	{r4, r5, r6, pc}
    b980:	4610      	mov	r0, r2
    b982:	bd70      	pop	{r4, r5, r6, pc}

0000b984 <memmove>:
    b984:	4288      	cmp	r0, r1
    b986:	d90d      	bls.n	b9a4 <memmove+0x20>
    b988:	188b      	adds	r3, r1, r2
    b98a:	4283      	cmp	r3, r0
    b98c:	d90a      	bls.n	b9a4 <memmove+0x20>
    b98e:	eb00 0c02 	add.w	ip, r0, r2
    b992:	b1ba      	cbz	r2, b9c4 <memmove+0x40>
    b994:	4662      	mov	r2, ip
    b996:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    b99a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    b99e:	4299      	cmp	r1, r3
    b9a0:	d1f9      	bne.n	b996 <memmove+0x12>
    b9a2:	4770      	bx	lr
    b9a4:	2a0f      	cmp	r2, #15
    b9a6:	d80e      	bhi.n	b9c6 <memmove+0x42>
    b9a8:	4603      	mov	r3, r0
    b9aa:	f102 3cff 	add.w	ip, r2, #4294967295
    b9ae:	b14a      	cbz	r2, b9c4 <memmove+0x40>
    b9b0:	f10c 0c01 	add.w	ip, ip, #1
    b9b4:	3b01      	subs	r3, #1
    b9b6:	448c      	add	ip, r1
    b9b8:	f811 2b01 	ldrb.w	r2, [r1], #1
    b9bc:	f803 2f01 	strb.w	r2, [r3, #1]!
    b9c0:	4561      	cmp	r1, ip
    b9c2:	d1f9      	bne.n	b9b8 <memmove+0x34>
    b9c4:	4770      	bx	lr
    b9c6:	ea40 0301 	orr.w	r3, r0, r1
    b9ca:	079b      	lsls	r3, r3, #30
    b9cc:	d150      	bne.n	ba70 <memmove+0xec>
    b9ce:	f1a2 0310 	sub.w	r3, r2, #16
    b9d2:	b570      	push	{r4, r5, r6, lr}
    b9d4:	f101 0c20 	add.w	ip, r1, #32
    b9d8:	f023 050f 	bic.w	r5, r3, #15
    b9dc:	f101 0e10 	add.w	lr, r1, #16
    b9e0:	f100 0410 	add.w	r4, r0, #16
    b9e4:	44ac      	add	ip, r5
    b9e6:	091b      	lsrs	r3, r3, #4
    b9e8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    b9ec:	f844 5c10 	str.w	r5, [r4, #-16]
    b9f0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    b9f4:	f844 5c0c 	str.w	r5, [r4, #-12]
    b9f8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    b9fc:	f844 5c08 	str.w	r5, [r4, #-8]
    ba00:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    ba04:	f844 5c04 	str.w	r5, [r4, #-4]
    ba08:	f10e 0e10 	add.w	lr, lr, #16
    ba0c:	45e6      	cmp	lr, ip
    ba0e:	f104 0410 	add.w	r4, r4, #16
    ba12:	d1e9      	bne.n	b9e8 <memmove+0x64>
    ba14:	3301      	adds	r3, #1
    ba16:	f012 0f0c 	tst.w	r2, #12
    ba1a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    ba1e:	f002 040f 	and.w	r4, r2, #15
    ba22:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    ba26:	d027      	beq.n	ba78 <memmove+0xf4>
    ba28:	3c04      	subs	r4, #4
    ba2a:	f024 0603 	bic.w	r6, r4, #3
    ba2e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    ba32:	441e      	add	r6, r3
    ba34:	1f1c      	subs	r4, r3, #4
    ba36:	468e      	mov	lr, r1
    ba38:	f85e 5b04 	ldr.w	r5, [lr], #4
    ba3c:	f844 5f04 	str.w	r5, [r4, #4]!
    ba40:	42b4      	cmp	r4, r6
    ba42:	d1f9      	bne.n	ba38 <memmove+0xb4>
    ba44:	f10c 0401 	add.w	r4, ip, #1
    ba48:	f002 0203 	and.w	r2, r2, #3
    ba4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    ba50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    ba54:	f102 3cff 	add.w	ip, r2, #4294967295
    ba58:	b14a      	cbz	r2, ba6e <memmove+0xea>
    ba5a:	f10c 0c01 	add.w	ip, ip, #1
    ba5e:	3b01      	subs	r3, #1
    ba60:	448c      	add	ip, r1
    ba62:	f811 2b01 	ldrb.w	r2, [r1], #1
    ba66:	f803 2f01 	strb.w	r2, [r3, #1]!
    ba6a:	4561      	cmp	r1, ip
    ba6c:	d1f9      	bne.n	ba62 <memmove+0xde>
    ba6e:	bd70      	pop	{r4, r5, r6, pc}
    ba70:	f102 3cff 	add.w	ip, r2, #4294967295
    ba74:	4603      	mov	r3, r0
    ba76:	e79b      	b.n	b9b0 <memmove+0x2c>
    ba78:	4622      	mov	r2, r4
    ba7a:	e7eb      	b.n	ba54 <memmove+0xd0>

0000ba7c <memset>:
    ba7c:	0783      	lsls	r3, r0, #30
    ba7e:	b530      	push	{r4, r5, lr}
    ba80:	d048      	beq.n	bb14 <memset+0x98>
    ba82:	1e54      	subs	r4, r2, #1
    ba84:	2a00      	cmp	r2, #0
    ba86:	d03f      	beq.n	bb08 <memset+0x8c>
    ba88:	b2ca      	uxtb	r2, r1
    ba8a:	4603      	mov	r3, r0
    ba8c:	e001      	b.n	ba92 <memset+0x16>
    ba8e:	3c01      	subs	r4, #1
    ba90:	d33a      	bcc.n	bb08 <memset+0x8c>
    ba92:	f803 2b01 	strb.w	r2, [r3], #1
    ba96:	079d      	lsls	r5, r3, #30
    ba98:	d1f9      	bne.n	ba8e <memset+0x12>
    ba9a:	2c03      	cmp	r4, #3
    ba9c:	d92d      	bls.n	bafa <memset+0x7e>
    ba9e:	b2cd      	uxtb	r5, r1
    baa0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    baa4:	2c0f      	cmp	r4, #15
    baa6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    baaa:	d936      	bls.n	bb1a <memset+0x9e>
    baac:	f1a4 0210 	sub.w	r2, r4, #16
    bab0:	f022 0c0f 	bic.w	ip, r2, #15
    bab4:	f103 0e20 	add.w	lr, r3, #32
    bab8:	44e6      	add	lr, ip
    baba:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    babe:	f103 0210 	add.w	r2, r3, #16
    bac2:	e942 5504 	strd	r5, r5, [r2, #-16]
    bac6:	e942 5502 	strd	r5, r5, [r2, #-8]
    baca:	3210      	adds	r2, #16
    bacc:	4572      	cmp	r2, lr
    bace:	d1f8      	bne.n	bac2 <memset+0x46>
    bad0:	f10c 0201 	add.w	r2, ip, #1
    bad4:	f014 0f0c 	tst.w	r4, #12
    bad8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    badc:	f004 0c0f 	and.w	ip, r4, #15
    bae0:	d013      	beq.n	bb0a <memset+0x8e>
    bae2:	f1ac 0304 	sub.w	r3, ip, #4
    bae6:	f023 0303 	bic.w	r3, r3, #3
    baea:	3304      	adds	r3, #4
    baec:	4413      	add	r3, r2
    baee:	f842 5b04 	str.w	r5, [r2], #4
    baf2:	4293      	cmp	r3, r2
    baf4:	d1fb      	bne.n	baee <memset+0x72>
    baf6:	f00c 0403 	and.w	r4, ip, #3
    bafa:	b12c      	cbz	r4, bb08 <memset+0x8c>
    bafc:	b2c9      	uxtb	r1, r1
    bafe:	441c      	add	r4, r3
    bb00:	f803 1b01 	strb.w	r1, [r3], #1
    bb04:	429c      	cmp	r4, r3
    bb06:	d1fb      	bne.n	bb00 <memset+0x84>
    bb08:	bd30      	pop	{r4, r5, pc}
    bb0a:	4664      	mov	r4, ip
    bb0c:	4613      	mov	r3, r2
    bb0e:	2c00      	cmp	r4, #0
    bb10:	d1f4      	bne.n	bafc <memset+0x80>
    bb12:	e7f9      	b.n	bb08 <memset+0x8c>
    bb14:	4603      	mov	r3, r0
    bb16:	4614      	mov	r4, r2
    bb18:	e7bf      	b.n	ba9a <memset+0x1e>
    bb1a:	461a      	mov	r2, r3
    bb1c:	46a4      	mov	ip, r4
    bb1e:	e7e0      	b.n	bae2 <memset+0x66>

0000bb20 <strncmp>:
    bb20:	2a00      	cmp	r2, #0
    bb22:	d03e      	beq.n	bba2 <strncmp+0x82>
    bb24:	ea40 0301 	orr.w	r3, r0, r1
    bb28:	079b      	lsls	r3, r3, #30
    bb2a:	b530      	push	{r4, r5, lr}
    bb2c:	4684      	mov	ip, r0
    bb2e:	d12f      	bne.n	bb90 <strncmp+0x70>
    bb30:	2a03      	cmp	r2, #3
    bb32:	d92d      	bls.n	bb90 <strncmp+0x70>
    bb34:	460b      	mov	r3, r1
    bb36:	e008      	b.n	bb4a <strncmp+0x2a>
    bb38:	3a04      	subs	r2, #4
    bb3a:	4684      	mov	ip, r0
    bb3c:	4619      	mov	r1, r3
    bb3e:	d025      	beq.n	bb8c <strncmp+0x6c>
    bb40:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    bb44:	d122      	bne.n	bb8c <strncmp+0x6c>
    bb46:	2a03      	cmp	r2, #3
    bb48:	d922      	bls.n	bb90 <strncmp+0x70>
    bb4a:	6804      	ldr	r4, [r0, #0]
    bb4c:	4619      	mov	r1, r3
    bb4e:	f853 5b04 	ldr.w	r5, [r3], #4
    bb52:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    bb56:	42ac      	cmp	r4, r5
    bb58:	4684      	mov	ip, r0
    bb5a:	ea2e 0e04 	bic.w	lr, lr, r4
    bb5e:	f100 0004 	add.w	r0, r0, #4
    bb62:	d0e9      	beq.n	bb38 <strncmp+0x18>
    bb64:	f89c 0000 	ldrb.w	r0, [ip]
    bb68:	780c      	ldrb	r4, [r1, #0]
    bb6a:	42a0      	cmp	r0, r4
    bb6c:	d11b      	bne.n	bba6 <strncmp+0x86>
    bb6e:	46e6      	mov	lr, ip
    bb70:	b168      	cbz	r0, bb8e <strncmp+0x6e>
    bb72:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    bb76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bb7a:	eba2 030e 	sub.w	r3, r2, lr
    bb7e:	42a0      	cmp	r0, r4
    bb80:	f103 33ff 	add.w	r3, r3, #4294967295
    bb84:	d10f      	bne.n	bba6 <strncmp+0x86>
    bb86:	eb1c 0303 	adds.w	r3, ip, r3
    bb8a:	d1f1      	bne.n	bb70 <strncmp+0x50>
    bb8c:	2000      	movs	r0, #0
    bb8e:	bd30      	pop	{r4, r5, pc}
    bb90:	f89c 0000 	ldrb.w	r0, [ip]
    bb94:	780c      	ldrb	r4, [r1, #0]
    bb96:	4284      	cmp	r4, r0
    bb98:	d105      	bne.n	bba6 <strncmp+0x86>
    bb9a:	2a01      	cmp	r2, #1
    bb9c:	d0f6      	beq.n	bb8c <strncmp+0x6c>
    bb9e:	46e6      	mov	lr, ip
    bba0:	e7e6      	b.n	bb70 <strncmp+0x50>
    bba2:	4610      	mov	r0, r2
    bba4:	4770      	bx	lr
    bba6:	1b00      	subs	r0, r0, r4
    bba8:	bd30      	pop	{r4, r5, pc}
    bbaa:	bf00      	nop

0000bbac <strncpy>:
    bbac:	ea40 0301 	orr.w	r3, r0, r1
    bbb0:	079b      	lsls	r3, r3, #30
    bbb2:	b530      	push	{r4, r5, lr}
    bbb4:	d101      	bne.n	bbba <strncpy+0xe>
    bbb6:	2a03      	cmp	r2, #3
    bbb8:	d80f      	bhi.n	bbda <strncpy+0x2e>
    bbba:	4684      	mov	ip, r0
    bbbc:	f101 3eff 	add.w	lr, r1, #4294967295
    bbc0:	e007      	b.n	bbd2 <strncpy+0x26>
    bbc2:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    bbc6:	f803 1b01 	strb.w	r1, [r3], #1
    bbca:	1e54      	subs	r4, r2, #1
    bbcc:	b1c1      	cbz	r1, bc00 <strncpy+0x54>
    bbce:	469c      	mov	ip, r3
    bbd0:	4622      	mov	r2, r4
    bbd2:	4663      	mov	r3, ip
    bbd4:	2a00      	cmp	r2, #0
    bbd6:	d1f4      	bne.n	bbc2 <strncpy+0x16>
    bbd8:	bd30      	pop	{r4, r5, pc}
    bbda:	460b      	mov	r3, r1
    bbdc:	4684      	mov	ip, r0
    bbde:	4619      	mov	r1, r3
    bbe0:	f853 5b04 	ldr.w	r5, [r3], #4
    bbe4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    bbe8:	ea24 0405 	bic.w	r4, r4, r5
    bbec:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    bbf0:	d1e4      	bne.n	bbbc <strncpy+0x10>
    bbf2:	3a04      	subs	r2, #4
    bbf4:	2a03      	cmp	r2, #3
    bbf6:	f84c 5b04 	str.w	r5, [ip], #4
    bbfa:	4619      	mov	r1, r3
    bbfc:	d8ef      	bhi.n	bbde <strncpy+0x32>
    bbfe:	e7dd      	b.n	bbbc <strncpy+0x10>
    bc00:	4494      	add	ip, r2
    bc02:	2c00      	cmp	r4, #0
    bc04:	d0e8      	beq.n	bbd8 <strncpy+0x2c>
    bc06:	f803 1b01 	strb.w	r1, [r3], #1
    bc0a:	4563      	cmp	r3, ip
    bc0c:	d1fb      	bne.n	bc06 <strncpy+0x5a>
    bc0e:	bd30      	pop	{r4, r5, pc}

0000bc10 <__locale_mb_cur_max>:
    bc10:	4b01      	ldr	r3, [pc, #4]	; (bc18 <__locale_mb_cur_max+0x8>)
    bc12:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    bc16:	4770      	bx	lr
    bc18:	200085f4 	.word	0x200085f4

0000bc1c <_close_r>:
    bc1c:	b538      	push	{r3, r4, r5, lr}
    bc1e:	4d07      	ldr	r5, [pc, #28]	; (bc3c <_close_r+0x20>)
    bc20:	2200      	movs	r2, #0
    bc22:	4604      	mov	r4, r0
    bc24:	4608      	mov	r0, r1
    bc26:	602a      	str	r2, [r5, #0]
    bc28:	f7fc fc3c 	bl	84a4 <_close>
    bc2c:	1c43      	adds	r3, r0, #1
    bc2e:	d000      	beq.n	bc32 <_close_r+0x16>
    bc30:	bd38      	pop	{r3, r4, r5, pc}
    bc32:	682b      	ldr	r3, [r5, #0]
    bc34:	2b00      	cmp	r3, #0
    bc36:	d0fb      	beq.n	bc30 <_close_r+0x14>
    bc38:	6023      	str	r3, [r4, #0]
    bc3a:	bd38      	pop	{r3, r4, r5, pc}
    bc3c:	20028e3c 	.word	0x20028e3c

0000bc40 <_lseek_r>:
    bc40:	b538      	push	{r3, r4, r5, lr}
    bc42:	460c      	mov	r4, r1
    bc44:	4d08      	ldr	r5, [pc, #32]	; (bc68 <_lseek_r+0x28>)
    bc46:	4684      	mov	ip, r0
    bc48:	4611      	mov	r1, r2
    bc4a:	4620      	mov	r0, r4
    bc4c:	461a      	mov	r2, r3
    bc4e:	2300      	movs	r3, #0
    bc50:	602b      	str	r3, [r5, #0]
    bc52:	4664      	mov	r4, ip
    bc54:	f7fc fc32 	bl	84bc <_lseek>
    bc58:	1c43      	adds	r3, r0, #1
    bc5a:	d000      	beq.n	bc5e <_lseek_r+0x1e>
    bc5c:	bd38      	pop	{r3, r4, r5, pc}
    bc5e:	682b      	ldr	r3, [r5, #0]
    bc60:	2b00      	cmp	r3, #0
    bc62:	d0fb      	beq.n	bc5c <_lseek_r+0x1c>
    bc64:	6023      	str	r3, [r4, #0]
    bc66:	bd38      	pop	{r3, r4, r5, pc}
    bc68:	20028e3c 	.word	0x20028e3c

0000bc6c <_read_r>:
    bc6c:	b538      	push	{r3, r4, r5, lr}
    bc6e:	460c      	mov	r4, r1
    bc70:	4d08      	ldr	r5, [pc, #32]	; (bc94 <_read_r+0x28>)
    bc72:	4684      	mov	ip, r0
    bc74:	4611      	mov	r1, r2
    bc76:	4620      	mov	r0, r4
    bc78:	461a      	mov	r2, r3
    bc7a:	2300      	movs	r3, #0
    bc7c:	602b      	str	r3, [r5, #0]
    bc7e:	4664      	mov	r4, ip
    bc80:	f7fc fc0e 	bl	84a0 <_read>
    bc84:	1c43      	adds	r3, r0, #1
    bc86:	d000      	beq.n	bc8a <_read_r+0x1e>
    bc88:	bd38      	pop	{r3, r4, r5, pc}
    bc8a:	682b      	ldr	r3, [r5, #0]
    bc8c:	2b00      	cmp	r3, #0
    bc8e:	d0fb      	beq.n	bc88 <_read_r+0x1c>
    bc90:	6023      	str	r3, [r4, #0]
    bc92:	bd38      	pop	{r3, r4, r5, pc}
    bc94:	20028e3c 	.word	0x20028e3c

0000bc98 <_sbrk_r>:
    bc98:	b538      	push	{r3, r4, r5, lr}
    bc9a:	4d07      	ldr	r5, [pc, #28]	; (bcb8 <_sbrk_r+0x20>)
    bc9c:	2200      	movs	r2, #0
    bc9e:	4604      	mov	r4, r0
    bca0:	4608      	mov	r0, r1
    bca2:	602a      	str	r2, [r5, #0]
    bca4:	f7fc fbe2 	bl	846c <_sbrk>
    bca8:	1c43      	adds	r3, r0, #1
    bcaa:	d000      	beq.n	bcae <_sbrk_r+0x16>
    bcac:	bd38      	pop	{r3, r4, r5, pc}
    bcae:	682b      	ldr	r3, [r5, #0]
    bcb0:	2b00      	cmp	r3, #0
    bcb2:	d0fb      	beq.n	bcac <_sbrk_r+0x14>
    bcb4:	6023      	str	r3, [r4, #0]
    bcb6:	bd38      	pop	{r3, r4, r5, pc}
    bcb8:	20028e3c 	.word	0x20028e3c

0000bcbc <_write_r>:
    bcbc:	b538      	push	{r3, r4, r5, lr}
    bcbe:	460c      	mov	r4, r1
    bcc0:	4d08      	ldr	r5, [pc, #32]	; (bce4 <_write_r+0x28>)
    bcc2:	4684      	mov	ip, r0
    bcc4:	4611      	mov	r1, r2
    bcc6:	4620      	mov	r0, r4
    bcc8:	461a      	mov	r2, r3
    bcca:	2300      	movs	r3, #0
    bccc:	602b      	str	r3, [r5, #0]
    bcce:	4664      	mov	r4, ip
    bcd0:	f7fb fe7c 	bl	79cc <_write>
    bcd4:	1c43      	adds	r3, r0, #1
    bcd6:	d000      	beq.n	bcda <_write_r+0x1e>
    bcd8:	bd38      	pop	{r3, r4, r5, pc}
    bcda:	682b      	ldr	r3, [r5, #0]
    bcdc:	2b00      	cmp	r3, #0
    bcde:	d0fb      	beq.n	bcd8 <_write_r+0x1c>
    bce0:	6023      	str	r3, [r4, #0]
    bce2:	bd38      	pop	{r3, r4, r5, pc}
    bce4:	20028e3c 	.word	0x20028e3c

0000bce8 <__errno>:
    bce8:	4b01      	ldr	r3, [pc, #4]	; (bcf0 <__errno+0x8>)
    bcea:	6818      	ldr	r0, [r3, #0]
    bcec:	4770      	bx	lr
    bcee:	bf00      	nop
    bcf0:	20008b7c 	.word	0x20008b7c

0000bcf4 <__libc_init_array>:
    bcf4:	b570      	push	{r4, r5, r6, lr}
    bcf6:	4e0d      	ldr	r6, [pc, #52]	; (bd2c <__libc_init_array+0x38>)
    bcf8:	4d0d      	ldr	r5, [pc, #52]	; (bd30 <__libc_init_array+0x3c>)
    bcfa:	1b76      	subs	r6, r6, r5
    bcfc:	10b6      	asrs	r6, r6, #2
    bcfe:	d006      	beq.n	bd0e <__libc_init_array+0x1a>
    bd00:	2400      	movs	r4, #0
    bd02:	f855 3b04 	ldr.w	r3, [r5], #4
    bd06:	3401      	adds	r4, #1
    bd08:	4798      	blx	r3
    bd0a:	42a6      	cmp	r6, r4
    bd0c:	d1f9      	bne.n	bd02 <__libc_init_array+0xe>
    bd0e:	4e09      	ldr	r6, [pc, #36]	; (bd34 <__libc_init_array+0x40>)
    bd10:	4d09      	ldr	r5, [pc, #36]	; (bd38 <__libc_init_array+0x44>)
    bd12:	1b76      	subs	r6, r6, r5
    bd14:	f008 fc38 	bl	14588 <___init_veneer>
    bd18:	10b6      	asrs	r6, r6, #2
    bd1a:	d006      	beq.n	bd2a <__libc_init_array+0x36>
    bd1c:	2400      	movs	r4, #0
    bd1e:	f855 3b04 	ldr.w	r3, [r5], #4
    bd22:	3401      	adds	r4, #1
    bd24:	4798      	blx	r3
    bd26:	42a6      	cmp	r6, r4
    bd28:	d1f9      	bne.n	bd1e <__libc_init_array+0x2a>
    bd2a:	bd70      	pop	{r4, r5, r6, pc}
    bd2c:	60002660 	.word	0x60002660
    bd30:	60002660 	.word	0x60002660
    bd34:	60002674 	.word	0x60002674
    bd38:	60002660 	.word	0x60002660

0000bd3c <__retarget_lock_init_recursive>:
    bd3c:	4770      	bx	lr
    bd3e:	bf00      	nop

0000bd40 <__retarget_lock_close_recursive>:
    bd40:	4770      	bx	lr
    bd42:	bf00      	nop

0000bd44 <__retarget_lock_acquire_recursive>:
    bd44:	4770      	bx	lr
    bd46:	bf00      	nop

0000bd48 <__retarget_lock_release_recursive>:
    bd48:	4770      	bx	lr
    bd4a:	bf00      	nop
	...
    bd60:	eba2 0003 	sub.w	r0, r2, r3
    bd64:	4770      	bx	lr
    bd66:	bf00      	nop

0000bd68 <strcmp>:
    bd68:	7802      	ldrb	r2, [r0, #0]
    bd6a:	780b      	ldrb	r3, [r1, #0]
    bd6c:	2a01      	cmp	r2, #1
    bd6e:	bf28      	it	cs
    bd70:	429a      	cmpcs	r2, r3
    bd72:	d1f5      	bne.n	bd60 <__retarget_lock_release_recursive+0x18>
    bd74:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    bd78:	ea40 0401 	orr.w	r4, r0, r1
    bd7c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    bd80:	f06f 0c00 	mvn.w	ip, #0
    bd84:	ea4f 7244 	mov.w	r2, r4, lsl #29
    bd88:	b312      	cbz	r2, bdd0 <strcmp+0x68>
    bd8a:	ea80 0401 	eor.w	r4, r0, r1
    bd8e:	f014 0f07 	tst.w	r4, #7
    bd92:	d16a      	bne.n	be6a <strcmp+0x102>
    bd94:	f000 0407 	and.w	r4, r0, #7
    bd98:	f020 0007 	bic.w	r0, r0, #7
    bd9c:	f004 0503 	and.w	r5, r4, #3
    bda0:	f021 0107 	bic.w	r1, r1, #7
    bda4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bda8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bdac:	f014 0f04 	tst.w	r4, #4
    bdb0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bdb4:	fa0c f405 	lsl.w	r4, ip, r5
    bdb8:	ea62 0204 	orn	r2, r2, r4
    bdbc:	ea66 0604 	orn	r6, r6, r4
    bdc0:	d00a      	beq.n	bdd8 <strcmp+0x70>
    bdc2:	ea63 0304 	orn	r3, r3, r4
    bdc6:	4662      	mov	r2, ip
    bdc8:	ea67 0704 	orn	r7, r7, r4
    bdcc:	4666      	mov	r6, ip
    bdce:	e003      	b.n	bdd8 <strcmp+0x70>
    bdd0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bdd4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bdd8:	fa82 f54c 	uadd8	r5, r2, ip
    bddc:	ea82 0406 	eor.w	r4, r2, r6
    bde0:	faa4 f48c 	sel	r4, r4, ip
    bde4:	bb6c      	cbnz	r4, be42 <strcmp+0xda>
    bde6:	fa83 f54c 	uadd8	r5, r3, ip
    bdea:	ea83 0507 	eor.w	r5, r3, r7
    bdee:	faa5 f58c 	sel	r5, r5, ip
    bdf2:	b995      	cbnz	r5, be1a <strcmp+0xb2>
    bdf4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    bdf8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    bdfc:	fa82 f54c 	uadd8	r5, r2, ip
    be00:	ea82 0406 	eor.w	r4, r2, r6
    be04:	faa4 f48c 	sel	r4, r4, ip
    be08:	fa83 f54c 	uadd8	r5, r3, ip
    be0c:	ea83 0507 	eor.w	r5, r3, r7
    be10:	faa5 f58c 	sel	r5, r5, ip
    be14:	4325      	orrs	r5, r4
    be16:	d0db      	beq.n	bdd0 <strcmp+0x68>
    be18:	b99c      	cbnz	r4, be42 <strcmp+0xda>
    be1a:	ba2d      	rev	r5, r5
    be1c:	fab5 f485 	clz	r4, r5
    be20:	f024 0407 	bic.w	r4, r4, #7
    be24:	fa27 f104 	lsr.w	r1, r7, r4
    be28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    be2c:	fa23 f304 	lsr.w	r3, r3, r4
    be30:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    be34:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    be38:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    be3c:	eba0 0001 	sub.w	r0, r0, r1
    be40:	4770      	bx	lr
    be42:	ba24      	rev	r4, r4
    be44:	fab4 f484 	clz	r4, r4
    be48:	f024 0407 	bic.w	r4, r4, #7
    be4c:	fa26 f104 	lsr.w	r1, r6, r4
    be50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    be54:	fa22 f204 	lsr.w	r2, r2, r4
    be58:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    be5c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    be60:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    be64:	eba0 0001 	sub.w	r0, r0, r1
    be68:	4770      	bx	lr
    be6a:	f014 0f03 	tst.w	r4, #3
    be6e:	d13c      	bne.n	beea <strcmp+0x182>
    be70:	f010 0403 	ands.w	r4, r0, #3
    be74:	d128      	bne.n	bec8 <strcmp+0x160>
    be76:	f850 2b08 	ldr.w	r2, [r0], #8
    be7a:	f851 3b08 	ldr.w	r3, [r1], #8
    be7e:	fa82 f54c 	uadd8	r5, r2, ip
    be82:	ea82 0503 	eor.w	r5, r2, r3
    be86:	faa5 f58c 	sel	r5, r5, ip
    be8a:	b95d      	cbnz	r5, bea4 <strcmp+0x13c>
    be8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    be90:	f851 3c04 	ldr.w	r3, [r1, #-4]
    be94:	fa82 f54c 	uadd8	r5, r2, ip
    be98:	ea82 0503 	eor.w	r5, r2, r3
    be9c:	faa5 f58c 	sel	r5, r5, ip
    bea0:	2d00      	cmp	r5, #0
    bea2:	d0e8      	beq.n	be76 <strcmp+0x10e>
    bea4:	ba2d      	rev	r5, r5
    bea6:	fab5 f485 	clz	r4, r5
    beaa:	f024 0407 	bic.w	r4, r4, #7
    beae:	fa23 f104 	lsr.w	r1, r3, r4
    beb2:	fa22 f204 	lsr.w	r2, r2, r4
    beb6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    beba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bebe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bec2:	eba0 0001 	sub.w	r0, r0, r1
    bec6:	4770      	bx	lr
    bec8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    becc:	f020 0003 	bic.w	r0, r0, #3
    bed0:	f850 2b08 	ldr.w	r2, [r0], #8
    bed4:	f021 0103 	bic.w	r1, r1, #3
    bed8:	f851 3b08 	ldr.w	r3, [r1], #8
    bedc:	fa0c f404 	lsl.w	r4, ip, r4
    bee0:	ea62 0204 	orn	r2, r2, r4
    bee4:	ea63 0304 	orn	r3, r3, r4
    bee8:	e7c9      	b.n	be7e <strcmp+0x116>
    beea:	f010 0403 	ands.w	r4, r0, #3
    beee:	d01a      	beq.n	bf26 <strcmp+0x1be>
    bef0:	eba1 0104 	sub.w	r1, r1, r4
    bef4:	f020 0003 	bic.w	r0, r0, #3
    bef8:	07e4      	lsls	r4, r4, #31
    befa:	f850 2b04 	ldr.w	r2, [r0], #4
    befe:	d006      	beq.n	bf0e <strcmp+0x1a6>
    bf00:	d20f      	bcs.n	bf22 <strcmp+0x1ba>
    bf02:	788b      	ldrb	r3, [r1, #2]
    bf04:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    bf08:	1ae4      	subs	r4, r4, r3
    bf0a:	d106      	bne.n	bf1a <strcmp+0x1b2>
    bf0c:	b12b      	cbz	r3, bf1a <strcmp+0x1b2>
    bf0e:	78cb      	ldrb	r3, [r1, #3]
    bf10:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    bf14:	1ae4      	subs	r4, r4, r3
    bf16:	d100      	bne.n	bf1a <strcmp+0x1b2>
    bf18:	b91b      	cbnz	r3, bf22 <strcmp+0x1ba>
    bf1a:	4620      	mov	r0, r4
    bf1c:	f85d 4b10 	ldr.w	r4, [sp], #16
    bf20:	4770      	bx	lr
    bf22:	f101 0104 	add.w	r1, r1, #4
    bf26:	f850 2b04 	ldr.w	r2, [r0], #4
    bf2a:	07cc      	lsls	r4, r1, #31
    bf2c:	f021 0103 	bic.w	r1, r1, #3
    bf30:	f851 3b04 	ldr.w	r3, [r1], #4
    bf34:	d848      	bhi.n	bfc8 <strcmp+0x260>
    bf36:	d224      	bcs.n	bf82 <strcmp+0x21a>
    bf38:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    bf3c:	fa82 f54c 	uadd8	r5, r2, ip
    bf40:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    bf44:	faa5 f58c 	sel	r5, r5, ip
    bf48:	d10a      	bne.n	bf60 <strcmp+0x1f8>
    bf4a:	b965      	cbnz	r5, bf66 <strcmp+0x1fe>
    bf4c:	f851 3b04 	ldr.w	r3, [r1], #4
    bf50:	ea84 0402 	eor.w	r4, r4, r2
    bf54:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    bf58:	d10e      	bne.n	bf78 <strcmp+0x210>
    bf5a:	f850 2b04 	ldr.w	r2, [r0], #4
    bf5e:	e7eb      	b.n	bf38 <strcmp+0x1d0>
    bf60:	ea4f 2313 	mov.w	r3, r3, lsr #8
    bf64:	e055      	b.n	c012 <strcmp+0x2aa>
    bf66:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    bf6a:	d14d      	bne.n	c008 <strcmp+0x2a0>
    bf6c:	7808      	ldrb	r0, [r1, #0]
    bf6e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bf72:	f1c0 0000 	rsb	r0, r0, #0
    bf76:	4770      	bx	lr
    bf78:	ea4f 6212 	mov.w	r2, r2, lsr #24
    bf7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bf80:	e047      	b.n	c012 <strcmp+0x2aa>
    bf82:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    bf86:	fa82 f54c 	uadd8	r5, r2, ip
    bf8a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    bf8e:	faa5 f58c 	sel	r5, r5, ip
    bf92:	d10a      	bne.n	bfaa <strcmp+0x242>
    bf94:	b965      	cbnz	r5, bfb0 <strcmp+0x248>
    bf96:	f851 3b04 	ldr.w	r3, [r1], #4
    bf9a:	ea84 0402 	eor.w	r4, r4, r2
    bf9e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    bfa2:	d10c      	bne.n	bfbe <strcmp+0x256>
    bfa4:	f850 2b04 	ldr.w	r2, [r0], #4
    bfa8:	e7eb      	b.n	bf82 <strcmp+0x21a>
    bfaa:	ea4f 4313 	mov.w	r3, r3, lsr #16
    bfae:	e030      	b.n	c012 <strcmp+0x2aa>
    bfb0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    bfb4:	d128      	bne.n	c008 <strcmp+0x2a0>
    bfb6:	880b      	ldrh	r3, [r1, #0]
    bfb8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bfbc:	e029      	b.n	c012 <strcmp+0x2aa>
    bfbe:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bfc2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    bfc6:	e024      	b.n	c012 <strcmp+0x2aa>
    bfc8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    bfcc:	fa82 f54c 	uadd8	r5, r2, ip
    bfd0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    bfd4:	faa5 f58c 	sel	r5, r5, ip
    bfd8:	d10a      	bne.n	bff0 <strcmp+0x288>
    bfda:	b965      	cbnz	r5, bff6 <strcmp+0x28e>
    bfdc:	f851 3b04 	ldr.w	r3, [r1], #4
    bfe0:	ea84 0402 	eor.w	r4, r4, r2
    bfe4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    bfe8:	d109      	bne.n	bffe <strcmp+0x296>
    bfea:	f850 2b04 	ldr.w	r2, [r0], #4
    bfee:	e7eb      	b.n	bfc8 <strcmp+0x260>
    bff0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    bff4:	e00d      	b.n	c012 <strcmp+0x2aa>
    bff6:	f015 0fff 	tst.w	r5, #255	; 0xff
    bffa:	d105      	bne.n	c008 <strcmp+0x2a0>
    bffc:	680b      	ldr	r3, [r1, #0]
    bffe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    c002:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c006:	e004      	b.n	c012 <strcmp+0x2aa>
    c008:	f04f 0000 	mov.w	r0, #0
    c00c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c010:	4770      	bx	lr
    c012:	ba12      	rev	r2, r2
    c014:	ba1b      	rev	r3, r3
    c016:	fa82 f44c 	uadd8	r4, r2, ip
    c01a:	ea82 0403 	eor.w	r4, r2, r3
    c01e:	faa4 f58c 	sel	r5, r4, ip
    c022:	fab5 f485 	clz	r4, r5
    c026:	fa02 f204 	lsl.w	r2, r2, r4
    c02a:	fa03 f304 	lsl.w	r3, r3, r4
    c02e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    c032:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c036:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    c03a:	4770      	bx	lr

0000c03c <strcpy>:
    c03c:	ea80 0201 	eor.w	r2, r0, r1
    c040:	4684      	mov	ip, r0
    c042:	f012 0f03 	tst.w	r2, #3
    c046:	d14f      	bne.n	c0e8 <strcpy+0xac>
    c048:	f011 0f03 	tst.w	r1, #3
    c04c:	d132      	bne.n	c0b4 <strcpy+0x78>
    c04e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    c052:	f011 0f04 	tst.w	r1, #4
    c056:	f851 3b04 	ldr.w	r3, [r1], #4
    c05a:	d00b      	beq.n	c074 <strcpy+0x38>
    c05c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    c060:	439a      	bics	r2, r3
    c062:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c066:	bf04      	itt	eq
    c068:	f84c 3b04 	streq.w	r3, [ip], #4
    c06c:	f851 3b04 	ldreq.w	r3, [r1], #4
    c070:	d116      	bne.n	c0a0 <strcpy+0x64>
    c072:	bf00      	nop
    c074:	f851 4b04 	ldr.w	r4, [r1], #4
    c078:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    c07c:	439a      	bics	r2, r3
    c07e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c082:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    c086:	d10b      	bne.n	c0a0 <strcpy+0x64>
    c088:	f84c 3b04 	str.w	r3, [ip], #4
    c08c:	43a2      	bics	r2, r4
    c08e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c092:	bf04      	itt	eq
    c094:	f851 3b04 	ldreq.w	r3, [r1], #4
    c098:	f84c 4b04 	streq.w	r4, [ip], #4
    c09c:	d0ea      	beq.n	c074 <strcpy+0x38>
    c09e:	4623      	mov	r3, r4
    c0a0:	f80c 3b01 	strb.w	r3, [ip], #1
    c0a4:	f013 0fff 	tst.w	r3, #255	; 0xff
    c0a8:	ea4f 2333 	mov.w	r3, r3, ror #8
    c0ac:	d1f8      	bne.n	c0a0 <strcpy+0x64>
    c0ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    c0b2:	4770      	bx	lr
    c0b4:	f011 0f01 	tst.w	r1, #1
    c0b8:	d006      	beq.n	c0c8 <strcpy+0x8c>
    c0ba:	f811 2b01 	ldrb.w	r2, [r1], #1
    c0be:	f80c 2b01 	strb.w	r2, [ip], #1
    c0c2:	2a00      	cmp	r2, #0
    c0c4:	bf08      	it	eq
    c0c6:	4770      	bxeq	lr
    c0c8:	f011 0f02 	tst.w	r1, #2
    c0cc:	d0bf      	beq.n	c04e <strcpy+0x12>
    c0ce:	f831 2b02 	ldrh.w	r2, [r1], #2
    c0d2:	f012 0fff 	tst.w	r2, #255	; 0xff
    c0d6:	bf16      	itet	ne
    c0d8:	f82c 2b02 	strhne.w	r2, [ip], #2
    c0dc:	f88c 2000 	strbeq.w	r2, [ip]
    c0e0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    c0e4:	d1b3      	bne.n	c04e <strcpy+0x12>
    c0e6:	4770      	bx	lr
    c0e8:	f811 2b01 	ldrb.w	r2, [r1], #1
    c0ec:	f80c 2b01 	strb.w	r2, [ip], #1
    c0f0:	2a00      	cmp	r2, #0
    c0f2:	d1f9      	bne.n	c0e8 <strcpy+0xac>
    c0f4:	4770      	bx	lr
    c0f6:	bf00      	nop
	...

0000c100 <memchr>:
    c100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c104:	2a10      	cmp	r2, #16
    c106:	db2b      	blt.n	c160 <memchr+0x60>
    c108:	f010 0f07 	tst.w	r0, #7
    c10c:	d008      	beq.n	c120 <memchr+0x20>
    c10e:	f810 3b01 	ldrb.w	r3, [r0], #1
    c112:	3a01      	subs	r2, #1
    c114:	428b      	cmp	r3, r1
    c116:	d02d      	beq.n	c174 <memchr+0x74>
    c118:	f010 0f07 	tst.w	r0, #7
    c11c:	b342      	cbz	r2, c170 <memchr+0x70>
    c11e:	d1f6      	bne.n	c10e <memchr+0xe>
    c120:	b4f0      	push	{r4, r5, r6, r7}
    c122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    c12a:	f022 0407 	bic.w	r4, r2, #7
    c12e:	f07f 0700 	mvns.w	r7, #0
    c132:	2300      	movs	r3, #0
    c134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    c138:	3c08      	subs	r4, #8
    c13a:	ea85 0501 	eor.w	r5, r5, r1
    c13e:	ea86 0601 	eor.w	r6, r6, r1
    c142:	fa85 f547 	uadd8	r5, r5, r7
    c146:	faa3 f587 	sel	r5, r3, r7
    c14a:	fa86 f647 	uadd8	r6, r6, r7
    c14e:	faa5 f687 	sel	r6, r5, r7
    c152:	b98e      	cbnz	r6, c178 <memchr+0x78>
    c154:	d1ee      	bne.n	c134 <memchr+0x34>
    c156:	bcf0      	pop	{r4, r5, r6, r7}
    c158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c15c:	f002 0207 	and.w	r2, r2, #7
    c160:	b132      	cbz	r2, c170 <memchr+0x70>
    c162:	f810 3b01 	ldrb.w	r3, [r0], #1
    c166:	3a01      	subs	r2, #1
    c168:	ea83 0301 	eor.w	r3, r3, r1
    c16c:	b113      	cbz	r3, c174 <memchr+0x74>
    c16e:	d1f8      	bne.n	c162 <memchr+0x62>
    c170:	2000      	movs	r0, #0
    c172:	4770      	bx	lr
    c174:	3801      	subs	r0, #1
    c176:	4770      	bx	lr
    c178:	2d00      	cmp	r5, #0
    c17a:	bf06      	itte	eq
    c17c:	4635      	moveq	r5, r6
    c17e:	3803      	subeq	r0, #3
    c180:	3807      	subne	r0, #7
    c182:	f015 0f01 	tst.w	r5, #1
    c186:	d107      	bne.n	c198 <memchr+0x98>
    c188:	3001      	adds	r0, #1
    c18a:	f415 7f80 	tst.w	r5, #256	; 0x100
    c18e:	bf02      	ittt	eq
    c190:	3001      	addeq	r0, #1
    c192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    c196:	3001      	addeq	r0, #1
    c198:	bcf0      	pop	{r4, r5, r6, r7}
    c19a:	3801      	subs	r0, #1
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop
	...

0000c1c0 <strlen>:
    c1c0:	f890 f000 	pld	[r0]
    c1c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    c1c8:	f020 0107 	bic.w	r1, r0, #7
    c1cc:	f06f 0c00 	mvn.w	ip, #0
    c1d0:	f010 0407 	ands.w	r4, r0, #7
    c1d4:	f891 f020 	pld	[r1, #32]
    c1d8:	f040 8049 	bne.w	c26e <strlen+0xae>
    c1dc:	f04f 0400 	mov.w	r4, #0
    c1e0:	f06f 0007 	mvn.w	r0, #7
    c1e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    c1e8:	f891 f040 	pld	[r1, #64]	; 0x40
    c1ec:	f100 0008 	add.w	r0, r0, #8
    c1f0:	fa82 f24c 	uadd8	r2, r2, ip
    c1f4:	faa4 f28c 	sel	r2, r4, ip
    c1f8:	fa83 f34c 	uadd8	r3, r3, ip
    c1fc:	faa2 f38c 	sel	r3, r2, ip
    c200:	bb4b      	cbnz	r3, c256 <strlen+0x96>
    c202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    c206:	fa82 f24c 	uadd8	r2, r2, ip
    c20a:	f100 0008 	add.w	r0, r0, #8
    c20e:	faa4 f28c 	sel	r2, r4, ip
    c212:	fa83 f34c 	uadd8	r3, r3, ip
    c216:	faa2 f38c 	sel	r3, r2, ip
    c21a:	b9e3      	cbnz	r3, c256 <strlen+0x96>
    c21c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    c220:	fa82 f24c 	uadd8	r2, r2, ip
    c224:	f100 0008 	add.w	r0, r0, #8
    c228:	faa4 f28c 	sel	r2, r4, ip
    c22c:	fa83 f34c 	uadd8	r3, r3, ip
    c230:	faa2 f38c 	sel	r3, r2, ip
    c234:	b97b      	cbnz	r3, c256 <strlen+0x96>
    c236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    c23a:	f101 0120 	add.w	r1, r1, #32
    c23e:	fa82 f24c 	uadd8	r2, r2, ip
    c242:	f100 0008 	add.w	r0, r0, #8
    c246:	faa4 f28c 	sel	r2, r4, ip
    c24a:	fa83 f34c 	uadd8	r3, r3, ip
    c24e:	faa2 f38c 	sel	r3, r2, ip
    c252:	2b00      	cmp	r3, #0
    c254:	d0c6      	beq.n	c1e4 <strlen+0x24>
    c256:	2a00      	cmp	r2, #0
    c258:	bf04      	itt	eq
    c25a:	3004      	addeq	r0, #4
    c25c:	461a      	moveq	r2, r3
    c25e:	ba12      	rev	r2, r2
    c260:	fab2 f282 	clz	r2, r2
    c264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    c268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    c26c:	4770      	bx	lr
    c26e:	e9d1 2300 	ldrd	r2, r3, [r1]
    c272:	f004 0503 	and.w	r5, r4, #3
    c276:	f1c4 0000 	rsb	r0, r4, #0
    c27a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    c27e:	f014 0f04 	tst.w	r4, #4
    c282:	f891 f040 	pld	[r1, #64]	; 0x40
    c286:	fa0c f505 	lsl.w	r5, ip, r5
    c28a:	ea62 0205 	orn	r2, r2, r5
    c28e:	bf1c      	itt	ne
    c290:	ea63 0305 	ornne	r3, r3, r5
    c294:	4662      	movne	r2, ip
    c296:	f04f 0400 	mov.w	r4, #0
    c29a:	e7a9      	b.n	c1f0 <strlen+0x30>
    c29c:	0000      	movs	r0, r0
	...

0000c2a0 <nan>:
    c2a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; c2a8 <nan+0x8>
    c2a4:	4770      	bx	lr
    c2a6:	bf00      	nop
    c2a8:	00000000 	.word	0x00000000
    c2ac:	7ff80000 	.word	0x7ff80000

0000c2b0 <nanf>:
    c2b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; c2b8 <nanf+0x8>
    c2b4:	4770      	bx	lr
    c2b6:	bf00      	nop
    c2b8:	7fc00000 	.word	0x7fc00000

0000c2bc <__register_exitproc>:
    c2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c2c0:	f8df a07c 	ldr.w	sl, [pc, #124]	; c340 <__register_exitproc+0x84>
    c2c4:	4606      	mov	r6, r0
    c2c6:	f8da 0000 	ldr.w	r0, [sl]
    c2ca:	4698      	mov	r8, r3
    c2cc:	460f      	mov	r7, r1
    c2ce:	4691      	mov	r9, r2
    c2d0:	f7ff fd38 	bl	bd44 <__retarget_lock_acquire_recursive>
    c2d4:	4b18      	ldr	r3, [pc, #96]	; (c338 <__register_exitproc+0x7c>)
    c2d6:	681c      	ldr	r4, [r3, #0]
    c2d8:	b324      	cbz	r4, c324 <__register_exitproc+0x68>
    c2da:	6865      	ldr	r5, [r4, #4]
    c2dc:	2d1f      	cmp	r5, #31
    c2de:	dc24      	bgt.n	c32a <__register_exitproc+0x6e>
    c2e0:	b95e      	cbnz	r6, c2fa <__register_exitproc+0x3e>
    c2e2:	1c6b      	adds	r3, r5, #1
    c2e4:	3502      	adds	r5, #2
    c2e6:	f8da 0000 	ldr.w	r0, [sl]
    c2ea:	6063      	str	r3, [r4, #4]
    c2ec:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    c2f0:	f7ff fd2a 	bl	bd48 <__retarget_lock_release_recursive>
    c2f4:	2000      	movs	r0, #0
    c2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2fa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    c2fe:	2301      	movs	r3, #1
    c300:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    c304:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    c308:	40ab      	lsls	r3, r5
    c30a:	431a      	orrs	r2, r3
    c30c:	2e02      	cmp	r6, #2
    c30e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    c312:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    c316:	d1e4      	bne.n	c2e2 <__register_exitproc+0x26>
    c318:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    c31c:	431a      	orrs	r2, r3
    c31e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    c322:	e7de      	b.n	c2e2 <__register_exitproc+0x26>
    c324:	4c05      	ldr	r4, [pc, #20]	; (c33c <__register_exitproc+0x80>)
    c326:	601c      	str	r4, [r3, #0]
    c328:	e7d7      	b.n	c2da <__register_exitproc+0x1e>
    c32a:	f8da 0000 	ldr.w	r0, [sl]
    c32e:	f7ff fd0b 	bl	bd48 <__retarget_lock_release_recursive>
    c332:	f04f 30ff 	mov.w	r0, #4294967295
    c336:	e7de      	b.n	c2f6 <__register_exitproc+0x3a>
    c338:	20028914 	.word	0x20028914
    c33c:	20028918 	.word	0x20028918
    c340:	200085e8 	.word	0x200085e8

0000c344 <_malloc_trim_r>:
    c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c346:	4f24      	ldr	r7, [pc, #144]	; (c3d8 <_malloc_trim_r+0x94>)
    c348:	460c      	mov	r4, r1
    c34a:	4606      	mov	r6, r0
    c34c:	f7fd ff1e 	bl	a18c <__malloc_lock>
    c350:	68bb      	ldr	r3, [r7, #8]
    c352:	685d      	ldr	r5, [r3, #4]
    c354:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    c358:	310f      	adds	r1, #15
    c35a:	f025 0503 	bic.w	r5, r5, #3
    c35e:	194b      	adds	r3, r1, r5
    c360:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    c364:	f023 030f 	bic.w	r3, r3, #15
    c368:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    c36c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    c370:	db07      	blt.n	c382 <_malloc_trim_r+0x3e>
    c372:	2100      	movs	r1, #0
    c374:	4630      	mov	r0, r6
    c376:	f7ff fc8f 	bl	bc98 <_sbrk_r>
    c37a:	68bb      	ldr	r3, [r7, #8]
    c37c:	442b      	add	r3, r5
    c37e:	4298      	cmp	r0, r3
    c380:	d004      	beq.n	c38c <_malloc_trim_r+0x48>
    c382:	4630      	mov	r0, r6
    c384:	f7fd ff08 	bl	a198 <__malloc_unlock>
    c388:	2000      	movs	r0, #0
    c38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c38c:	4261      	negs	r1, r4
    c38e:	4630      	mov	r0, r6
    c390:	f7ff fc82 	bl	bc98 <_sbrk_r>
    c394:	3001      	adds	r0, #1
    c396:	d00d      	beq.n	c3b4 <_malloc_trim_r+0x70>
    c398:	4a10      	ldr	r2, [pc, #64]	; (c3dc <_malloc_trim_r+0x98>)
    c39a:	68bb      	ldr	r3, [r7, #8]
    c39c:	1b2d      	subs	r5, r5, r4
    c39e:	f045 0501 	orr.w	r5, r5, #1
    c3a2:	605d      	str	r5, [r3, #4]
    c3a4:	6813      	ldr	r3, [r2, #0]
    c3a6:	4630      	mov	r0, r6
    c3a8:	1b1b      	subs	r3, r3, r4
    c3aa:	6013      	str	r3, [r2, #0]
    c3ac:	f7fd fef4 	bl	a198 <__malloc_unlock>
    c3b0:	2001      	movs	r0, #1
    c3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3b4:	2100      	movs	r1, #0
    c3b6:	4630      	mov	r0, r6
    c3b8:	f7ff fc6e 	bl	bc98 <_sbrk_r>
    c3bc:	68ba      	ldr	r2, [r7, #8]
    c3be:	1a83      	subs	r3, r0, r2
    c3c0:	2b0f      	cmp	r3, #15
    c3c2:	ddde      	ble.n	c382 <_malloc_trim_r+0x3e>
    c3c4:	f043 0301 	orr.w	r3, r3, #1
    c3c8:	6053      	str	r3, [r2, #4]
    c3ca:	4b05      	ldr	r3, [pc, #20]	; (c3e0 <_malloc_trim_r+0x9c>)
    c3cc:	4903      	ldr	r1, [pc, #12]	; (c3dc <_malloc_trim_r+0x98>)
    c3ce:	681b      	ldr	r3, [r3, #0]
    c3d0:	1ac0      	subs	r0, r0, r3
    c3d2:	6008      	str	r0, [r1, #0]
    c3d4:	e7d5      	b.n	c382 <_malloc_trim_r+0x3e>
    c3d6:	bf00      	nop
    c3d8:	20008760 	.word	0x20008760
    c3dc:	20028ab4 	.word	0x20028ab4
    c3e0:	20008b68 	.word	0x20008b68

0000c3e4 <_free_r>:
    c3e4:	2900      	cmp	r1, #0
    c3e6:	d061      	beq.n	c4ac <_free_r+0xc8>
    c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3ea:	460c      	mov	r4, r1
    c3ec:	4606      	mov	r6, r0
    c3ee:	f7fd fecd 	bl	a18c <__malloc_lock>
    c3f2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    c3f6:	4f7b      	ldr	r7, [pc, #492]	; (c5e4 <_free_r+0x200>)
    c3f8:	f1a4 0508 	sub.w	r5, r4, #8
    c3fc:	f022 0101 	bic.w	r1, r2, #1
    c400:	eb05 0c01 	add.w	ip, r5, r1
    c404:	68b8      	ldr	r0, [r7, #8]
    c406:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c40a:	4560      	cmp	r0, ip
    c40c:	f023 0303 	bic.w	r3, r3, #3
    c410:	f000 808b 	beq.w	c52a <_free_r+0x146>
    c414:	07d2      	lsls	r2, r2, #31
    c416:	f8cc 3004 	str.w	r3, [ip, #4]
    c41a:	d432      	bmi.n	c482 <_free_r+0x9e>
    c41c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c420:	1aad      	subs	r5, r5, r2
    c422:	4411      	add	r1, r2
    c424:	68aa      	ldr	r2, [r5, #8]
    c426:	f107 0008 	add.w	r0, r7, #8
    c42a:	4282      	cmp	r2, r0
    c42c:	d06a      	beq.n	c504 <_free_r+0x120>
    c42e:	eb0c 0403 	add.w	r4, ip, r3
    c432:	f8d4 e004 	ldr.w	lr, [r4, #4]
    c436:	68ec      	ldr	r4, [r5, #12]
    c438:	60d4      	str	r4, [r2, #12]
    c43a:	f01e 0f01 	tst.w	lr, #1
    c43e:	60a2      	str	r2, [r4, #8]
    c440:	f000 8097 	beq.w	c572 <_free_r+0x18e>
    c444:	f041 0301 	orr.w	r3, r1, #1
    c448:	606b      	str	r3, [r5, #4]
    c44a:	f8cc 1000 	str.w	r1, [ip]
    c44e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c452:	d235      	bcs.n	c4c0 <_free_r+0xdc>
    c454:	6878      	ldr	r0, [r7, #4]
    c456:	08cb      	lsrs	r3, r1, #3
    c458:	2201      	movs	r2, #1
    c45a:	0949      	lsrs	r1, r1, #5
    c45c:	3301      	adds	r3, #1
    c45e:	408a      	lsls	r2, r1
    c460:	4302      	orrs	r2, r0
    c462:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    c466:	607a      	str	r2, [r7, #4]
    c468:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    c46c:	3a08      	subs	r2, #8
    c46e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    c472:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    c476:	60cd      	str	r5, [r1, #12]
    c478:	4630      	mov	r0, r6
    c47a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c47e:	f7fd be8b 	b.w	a198 <__malloc_unlock>
    c482:	eb0c 0203 	add.w	r2, ip, r3
    c486:	6852      	ldr	r2, [r2, #4]
    c488:	07d0      	lsls	r0, r2, #31
    c48a:	d410      	bmi.n	c4ae <_free_r+0xca>
    c48c:	4419      	add	r1, r3
    c48e:	f107 0008 	add.w	r0, r7, #8
    c492:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c496:	4283      	cmp	r3, r0
    c498:	d073      	beq.n	c582 <_free_r+0x19e>
    c49a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    c49e:	60da      	str	r2, [r3, #12]
    c4a0:	6093      	str	r3, [r2, #8]
    c4a2:	f041 0301 	orr.w	r3, r1, #1
    c4a6:	606b      	str	r3, [r5, #4]
    c4a8:	5069      	str	r1, [r5, r1]
    c4aa:	e7d0      	b.n	c44e <_free_r+0x6a>
    c4ac:	4770      	bx	lr
    c4ae:	f041 0301 	orr.w	r3, r1, #1
    c4b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c4b6:	f844 3c04 	str.w	r3, [r4, #-4]
    c4ba:	f8cc 1000 	str.w	r1, [ip]
    c4be:	d3c9      	bcc.n	c454 <_free_r+0x70>
    c4c0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    c4c4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    c4c8:	d248      	bcs.n	c55c <_free_r+0x178>
    c4ca:	098b      	lsrs	r3, r1, #6
    c4cc:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c4d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    c4d4:	00c3      	lsls	r3, r0, #3
    c4d6:	18f8      	adds	r0, r7, r3
    c4d8:	58fb      	ldr	r3, [r7, r3]
    c4da:	3808      	subs	r0, #8
    c4dc:	4298      	cmp	r0, r3
    c4de:	d059      	beq.n	c594 <_free_r+0x1b0>
    c4e0:	685a      	ldr	r2, [r3, #4]
    c4e2:	f022 0203 	bic.w	r2, r2, #3
    c4e6:	428a      	cmp	r2, r1
    c4e8:	d902      	bls.n	c4f0 <_free_r+0x10c>
    c4ea:	689b      	ldr	r3, [r3, #8]
    c4ec:	4298      	cmp	r0, r3
    c4ee:	d1f7      	bne.n	c4e0 <_free_r+0xfc>
    c4f0:	68d8      	ldr	r0, [r3, #12]
    c4f2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    c4f6:	6085      	str	r5, [r0, #8]
    c4f8:	60dd      	str	r5, [r3, #12]
    c4fa:	4630      	mov	r0, r6
    c4fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c500:	f7fd be4a 	b.w	a198 <__malloc_unlock>
    c504:	eb0c 0203 	add.w	r2, ip, r3
    c508:	6852      	ldr	r2, [r2, #4]
    c50a:	07d2      	lsls	r2, r2, #31
    c50c:	d463      	bmi.n	c5d6 <_free_r+0x1f2>
    c50e:	440b      	add	r3, r1
    c510:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    c514:	60ca      	str	r2, [r1, #12]
    c516:	6091      	str	r1, [r2, #8]
    c518:	f043 0201 	orr.w	r2, r3, #1
    c51c:	606a      	str	r2, [r5, #4]
    c51e:	4630      	mov	r0, r6
    c520:	50eb      	str	r3, [r5, r3]
    c522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c526:	f7fd be37 	b.w	a198 <__malloc_unlock>
    c52a:	440b      	add	r3, r1
    c52c:	07d1      	lsls	r1, r2, #31
    c52e:	d407      	bmi.n	c540 <_free_r+0x15c>
    c530:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c534:	1aad      	subs	r5, r5, r2
    c536:	4413      	add	r3, r2
    c538:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    c53c:	60ca      	str	r2, [r1, #12]
    c53e:	6091      	str	r1, [r2, #8]
    c540:	f043 0201 	orr.w	r2, r3, #1
    c544:	606a      	str	r2, [r5, #4]
    c546:	4a28      	ldr	r2, [pc, #160]	; (c5e8 <_free_r+0x204>)
    c548:	60bd      	str	r5, [r7, #8]
    c54a:	6812      	ldr	r2, [r2, #0]
    c54c:	429a      	cmp	r2, r3
    c54e:	d893      	bhi.n	c478 <_free_r+0x94>
    c550:	4b26      	ldr	r3, [pc, #152]	; (c5ec <_free_r+0x208>)
    c552:	4630      	mov	r0, r6
    c554:	6819      	ldr	r1, [r3, #0]
    c556:	f7ff fef5 	bl	c344 <_malloc_trim_r>
    c55a:	e78d      	b.n	c478 <_free_r+0x94>
    c55c:	2b14      	cmp	r3, #20
    c55e:	d90a      	bls.n	c576 <_free_r+0x192>
    c560:	2b54      	cmp	r3, #84	; 0x54
    c562:	d81f      	bhi.n	c5a4 <_free_r+0x1c0>
    c564:	0b0b      	lsrs	r3, r1, #12
    c566:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c56a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    c56e:	00c3      	lsls	r3, r0, #3
    c570:	e7b1      	b.n	c4d6 <_free_r+0xf2>
    c572:	4419      	add	r1, r3
    c574:	e78d      	b.n	c492 <_free_r+0xae>
    c576:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c57a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    c57e:	00c3      	lsls	r3, r0, #3
    c580:	e7a9      	b.n	c4d6 <_free_r+0xf2>
    c582:	f041 0301 	orr.w	r3, r1, #1
    c586:	e9c7 5504 	strd	r5, r5, [r7, #16]
    c58a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    c58e:	606b      	str	r3, [r5, #4]
    c590:	5069      	str	r1, [r5, r1]
    c592:	e771      	b.n	c478 <_free_r+0x94>
    c594:	6879      	ldr	r1, [r7, #4]
    c596:	1092      	asrs	r2, r2, #2
    c598:	2401      	movs	r4, #1
    c59a:	fa04 f202 	lsl.w	r2, r4, r2
    c59e:	430a      	orrs	r2, r1
    c5a0:	607a      	str	r2, [r7, #4]
    c5a2:	e7a6      	b.n	c4f2 <_free_r+0x10e>
    c5a4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c5a8:	d806      	bhi.n	c5b8 <_free_r+0x1d4>
    c5aa:	0bcb      	lsrs	r3, r1, #15
    c5ac:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c5b0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    c5b4:	00c3      	lsls	r3, r0, #3
    c5b6:	e78e      	b.n	c4d6 <_free_r+0xf2>
    c5b8:	f240 5254 	movw	r2, #1364	; 0x554
    c5bc:	4293      	cmp	r3, r2
    c5be:	d806      	bhi.n	c5ce <_free_r+0x1ea>
    c5c0:	0c8b      	lsrs	r3, r1, #18
    c5c2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c5c6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    c5ca:	00c3      	lsls	r3, r0, #3
    c5cc:	e783      	b.n	c4d6 <_free_r+0xf2>
    c5ce:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c5d2:	227e      	movs	r2, #126	; 0x7e
    c5d4:	e77f      	b.n	c4d6 <_free_r+0xf2>
    c5d6:	f041 0301 	orr.w	r3, r1, #1
    c5da:	606b      	str	r3, [r5, #4]
    c5dc:	f8cc 1000 	str.w	r1, [ip]
    c5e0:	e74a      	b.n	c478 <_free_r+0x94>
    c5e2:	bf00      	nop
    c5e4:	20008760 	.word	0x20008760
    c5e8:	20008b6c 	.word	0x20008b6c
    c5ec:	20028ae4 	.word	0x20028ae4

0000c5f0 <rshift>:
    c5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5f4:	6904      	ldr	r4, [r0, #16]
    c5f6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    c5fa:	dd2f      	ble.n	c65c <rshift+0x6c>
    c5fc:	f100 0e14 	add.w	lr, r0, #20
    c600:	114e      	asrs	r6, r1, #5
    c602:	f011 0c1f 	ands.w	ip, r1, #31
    c606:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    c60a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    c60e:	d02b      	beq.n	c668 <rshift+0x78>
    c610:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    c614:	3304      	adds	r3, #4
    c616:	429d      	cmp	r5, r3
    c618:	fa21 f10c 	lsr.w	r1, r1, ip
    c61c:	f1cc 0820 	rsb	r8, ip, #32
    c620:	d918      	bls.n	c654 <rshift+0x64>
    c622:	4677      	mov	r7, lr
    c624:	681a      	ldr	r2, [r3, #0]
    c626:	fa02 f208 	lsl.w	r2, r2, r8
    c62a:	430a      	orrs	r2, r1
    c62c:	f847 2b04 	str.w	r2, [r7], #4
    c630:	f853 1b04 	ldr.w	r1, [r3], #4
    c634:	429d      	cmp	r5, r3
    c636:	fa21 f10c 	lsr.w	r1, r1, ip
    c63a:	d8f3      	bhi.n	c624 <rshift+0x34>
    c63c:	1ba3      	subs	r3, r4, r6
    c63e:	009b      	lsls	r3, r3, #2
    c640:	3b05      	subs	r3, #5
    c642:	089b      	lsrs	r3, r3, #2
    c644:	3301      	adds	r3, #1
    c646:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    c64a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    c64e:	b1c9      	cbz	r1, c684 <rshift+0x94>
    c650:	3404      	adds	r4, #4
    c652:	e017      	b.n	c684 <rshift+0x94>
    c654:	6141      	str	r1, [r0, #20]
    c656:	4674      	mov	r4, lr
    c658:	2900      	cmp	r1, #0
    c65a:	d1f9      	bne.n	c650 <rshift+0x60>
    c65c:	2300      	movs	r3, #0
    c65e:	6103      	str	r3, [r0, #16]
    c660:	2300      	movs	r3, #0
    c662:	6143      	str	r3, [r0, #20]
    c664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c668:	429d      	cmp	r5, r3
    c66a:	bf88      	it	hi
    c66c:	f100 0210 	addhi.w	r2, r0, #16
    c670:	d9f4      	bls.n	c65c <rshift+0x6c>
    c672:	f853 1b04 	ldr.w	r1, [r3], #4
    c676:	f842 1f04 	str.w	r1, [r2, #4]!
    c67a:	429d      	cmp	r5, r3
    c67c:	d8f9      	bhi.n	c672 <rshift+0x82>
    c67e:	1ba4      	subs	r4, r4, r6
    c680:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    c684:	eba4 030e 	sub.w	r3, r4, lr
    c688:	109b      	asrs	r3, r3, #2
    c68a:	4574      	cmp	r4, lr
    c68c:	6103      	str	r3, [r0, #16]
    c68e:	d0e7      	beq.n	c660 <rshift+0x70>
    c690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c694 <__gethex>:
    c694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c698:	ed2d 8b02 	vpush	{d8}
    c69c:	680c      	ldr	r4, [r1, #0]
    c69e:	468b      	mov	fp, r1
    c6a0:	78a1      	ldrb	r1, [r4, #2]
    c6a2:	b085      	sub	sp, #20
    c6a4:	2930      	cmp	r1, #48	; 0x30
    c6a6:	ee08 0a10 	vmov	s16, r0
    c6aa:	4692      	mov	sl, r2
    c6ac:	9302      	str	r3, [sp, #8]
    c6ae:	f040 81ce 	bne.w	ca4e <__gethex+0x3ba>
    c6b2:	f06f 0001 	mvn.w	r0, #1
    c6b6:	1b00      	subs	r0, r0, r4
    c6b8:	1ce2      	adds	r2, r4, #3
    c6ba:	1883      	adds	r3, r0, r2
    c6bc:	4614      	mov	r4, r2
    c6be:	f812 1b01 	ldrb.w	r1, [r2], #1
    c6c2:	2930      	cmp	r1, #48	; 0x30
    c6c4:	d0f9      	beq.n	c6ba <__gethex+0x26>
    c6c6:	f8df 8300 	ldr.w	r8, [pc, #768]	; c9c8 <__gethex+0x334>
    c6ca:	f818 2001 	ldrb.w	r2, [r8, r1]
    c6ce:	2a00      	cmp	r2, #0
    c6d0:	f000 80e5 	beq.w	c89e <__gethex+0x20a>
    c6d4:	7822      	ldrb	r2, [r4, #0]
    c6d6:	2700      	movs	r7, #0
    c6d8:	f818 2002 	ldrb.w	r2, [r8, r2]
    c6dc:	463d      	mov	r5, r7
    c6de:	4626      	mov	r6, r4
    c6e0:	b12a      	cbz	r2, c6ee <__gethex+0x5a>
    c6e2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c6e6:	f818 2002 	ldrb.w	r2, [r8, r2]
    c6ea:	2a00      	cmp	r2, #0
    c6ec:	d1f9      	bne.n	c6e2 <__gethex+0x4e>
    c6ee:	49b5      	ldr	r1, [pc, #724]	; (c9c4 <__gethex+0x330>)
    c6f0:	9301      	str	r3, [sp, #4]
    c6f2:	2201      	movs	r2, #1
    c6f4:	4630      	mov	r0, r6
    c6f6:	f7ff fa13 	bl	bb20 <strncmp>
    c6fa:	9b01      	ldr	r3, [sp, #4]
    c6fc:	4681      	mov	r9, r0
    c6fe:	2800      	cmp	r0, #0
    c700:	d04d      	beq.n	c79e <__gethex+0x10a>
    c702:	2d00      	cmp	r5, #0
    c704:	d14e      	bne.n	c7a4 <__gethex+0x110>
    c706:	7832      	ldrb	r2, [r6, #0]
    c708:	46a9      	mov	r9, r5
    c70a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c70e:	2a50      	cmp	r2, #80	; 0x50
    c710:	4635      	mov	r5, r6
    c712:	d050      	beq.n	c7b6 <__gethex+0x122>
    c714:	f8cb 6000 	str.w	r6, [fp]
    c718:	2f00      	cmp	r7, #0
    c71a:	d169      	bne.n	c7f0 <__gethex+0x15c>
    c71c:	1b2b      	subs	r3, r5, r4
    c71e:	3b01      	subs	r3, #1
    c720:	2b07      	cmp	r3, #7
    c722:	4639      	mov	r1, r7
    c724:	dd04      	ble.n	c730 <__gethex+0x9c>
    c726:	105b      	asrs	r3, r3, #1
    c728:	2b07      	cmp	r3, #7
    c72a:	f101 0101 	add.w	r1, r1, #1
    c72e:	dcfa      	bgt.n	c726 <__gethex+0x92>
    c730:	ee18 0a10 	vmov	r0, s16
    c734:	f000 fb82 	bl	ce3c <_Balloc>
    c738:	4683      	mov	fp, r0
    c73a:	2800      	cmp	r0, #0
    c73c:	f000 8266 	beq.w	cc0c <__gethex+0x578>
    c740:	f100 0614 	add.w	r6, r0, #20
    c744:	42ac      	cmp	r4, r5
    c746:	9601      	str	r6, [sp, #4]
    c748:	f080 81d2 	bcs.w	caf0 <__gethex+0x45c>
    c74c:	2700      	movs	r7, #0
    c74e:	f8cd 900c 	str.w	r9, [sp, #12]
    c752:	499c      	ldr	r1, [pc, #624]	; (c9c4 <__gethex+0x330>)
    c754:	46a1      	mov	r9, r4
    c756:	463c      	mov	r4, r7
    c758:	e00c      	b.n	c774 <__gethex+0xe0>
    c75a:	2f20      	cmp	r7, #32
    c75c:	d019      	beq.n	c792 <__gethex+0xfe>
    c75e:	4638      	mov	r0, r7
    c760:	3704      	adds	r7, #4
    c762:	782a      	ldrb	r2, [r5, #0]
    c764:	f818 2002 	ldrb.w	r2, [r8, r2]
    c768:	f002 020f 	and.w	r2, r2, #15
    c76c:	4082      	lsls	r2, r0
    c76e:	4314      	orrs	r4, r2
    c770:	454d      	cmp	r5, r9
    c772:	d047      	beq.n	c804 <__gethex+0x170>
    c774:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    c778:	2a2e      	cmp	r2, #46	; 0x2e
    c77a:	d1ee      	bne.n	c75a <__gethex+0xc6>
    c77c:	454d      	cmp	r5, r9
    c77e:	d3ec      	bcc.n	c75a <__gethex+0xc6>
    c780:	2201      	movs	r2, #1
    c782:	4628      	mov	r0, r5
    c784:	f7ff f9cc 	bl	bb20 <strncmp>
    c788:	498e      	ldr	r1, [pc, #568]	; (c9c4 <__gethex+0x330>)
    c78a:	2800      	cmp	r0, #0
    c78c:	d0f0      	beq.n	c770 <__gethex+0xdc>
    c78e:	2f20      	cmp	r7, #32
    c790:	d1e5      	bne.n	c75e <__gethex+0xca>
    c792:	2000      	movs	r0, #0
    c794:	f846 4b04 	str.w	r4, [r6], #4
    c798:	2704      	movs	r7, #4
    c79a:	4604      	mov	r4, r0
    c79c:	e7e1      	b.n	c762 <__gethex+0xce>
    c79e:	2d00      	cmp	r5, #0
    c7a0:	f000 8142 	beq.w	ca28 <__gethex+0x394>
    c7a4:	7832      	ldrb	r2, [r6, #0]
    c7a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c7aa:	1bad      	subs	r5, r5, r6
    c7ac:	2a50      	cmp	r2, #80	; 0x50
    c7ae:	ea4f 0985 	mov.w	r9, r5, lsl #2
    c7b2:	4635      	mov	r5, r6
    c7b4:	d1ae      	bne.n	c714 <__gethex+0x80>
    c7b6:	786a      	ldrb	r2, [r5, #1]
    c7b8:	2a2b      	cmp	r2, #43	; 0x2b
    c7ba:	f000 8125 	beq.w	ca08 <__gethex+0x374>
    c7be:	2a2d      	cmp	r2, #45	; 0x2d
    c7c0:	f000 80a5 	beq.w	c90e <__gethex+0x27a>
    c7c4:	1c6e      	adds	r6, r5, #1
    c7c6:	2000      	movs	r0, #0
    c7c8:	f818 1002 	ldrb.w	r1, [r8, r2]
    c7cc:	1e4a      	subs	r2, r1, #1
    c7ce:	2a18      	cmp	r2, #24
    c7d0:	f200 809b 	bhi.w	c90a <__gethex+0x276>
    c7d4:	7872      	ldrb	r2, [r6, #1]
    c7d6:	f818 2002 	ldrb.w	r2, [r8, r2]
    c7da:	3910      	subs	r1, #16
    c7dc:	3601      	adds	r6, #1
    c7de:	2a00      	cmp	r2, #0
    c7e0:	d15a      	bne.n	c898 <__gethex+0x204>
    c7e2:	b100      	cbz	r0, c7e6 <__gethex+0x152>
    c7e4:	4249      	negs	r1, r1
    c7e6:	4489      	add	r9, r1
    c7e8:	f8cb 6000 	str.w	r6, [fp]
    c7ec:	2f00      	cmp	r7, #0
    c7ee:	d095      	beq.n	c71c <__gethex+0x88>
    c7f0:	2b00      	cmp	r3, #0
    c7f2:	bf14      	ite	ne
    c7f4:	2500      	movne	r5, #0
    c7f6:	2506      	moveq	r5, #6
    c7f8:	4628      	mov	r0, r5
    c7fa:	b005      	add	sp, #20
    c7fc:	ecbd 8b02 	vpop	{d8}
    c800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c804:	f8dd 900c 	ldr.w	r9, [sp, #12]
    c808:	4623      	mov	r3, r4
    c80a:	f846 3b04 	str.w	r3, [r6], #4
    c80e:	4618      	mov	r0, r3
    c810:	9b01      	ldr	r3, [sp, #4]
    c812:	1af6      	subs	r6, r6, r3
    c814:	10b6      	asrs	r6, r6, #2
    c816:	f8cb 6010 	str.w	r6, [fp, #16]
    c81a:	f000 fbe9 	bl	cff0 <__hi0bits>
    c81e:	0176      	lsls	r6, r6, #5
    c820:	f8da 4000 	ldr.w	r4, [sl]
    c824:	1a30      	subs	r0, r6, r0
    c826:	42a0      	cmp	r0, r4
    c828:	dc75      	bgt.n	c916 <__gethex+0x282>
    c82a:	f2c0 80ef 	blt.w	ca0c <__gethex+0x378>
    c82e:	2700      	movs	r7, #0
    c830:	f8da 3008 	ldr.w	r3, [sl, #8]
    c834:	454b      	cmp	r3, r9
    c836:	f2c0 8151 	blt.w	cadc <__gethex+0x448>
    c83a:	f8da 3004 	ldr.w	r3, [sl, #4]
    c83e:	454b      	cmp	r3, r9
    c840:	dd4a      	ble.n	c8d8 <__gethex+0x244>
    c842:	eba3 0909 	sub.w	r9, r3, r9
    c846:	454c      	cmp	r4, r9
    c848:	f300 8082 	bgt.w	c950 <__gethex+0x2bc>
    c84c:	f8da 200c 	ldr.w	r2, [sl, #12]
    c850:	2a02      	cmp	r2, #2
    c852:	f000 8165 	beq.w	cb20 <__gethex+0x48c>
    c856:	2a03      	cmp	r2, #3
    c858:	f000 8181 	beq.w	cb5e <__gethex+0x4ca>
    c85c:	2a01      	cmp	r2, #1
    c85e:	f000 816f 	beq.w	cb40 <__gethex+0x4ac>
    c862:	ee18 0a10 	vmov	r0, s16
    c866:	4659      	mov	r1, fp
    c868:	f000 fb0e 	bl	ce88 <_Bfree>
    c86c:	2550      	movs	r5, #80	; 0x50
    c86e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c870:	2300      	movs	r3, #0
    c872:	4628      	mov	r0, r5
    c874:	6013      	str	r3, [r2, #0]
    c876:	b005      	add	sp, #20
    c878:	ecbd 8b02 	vpop	{d8}
    c87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c880:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c884:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    c888:	f1a2 0110 	sub.w	r1, r2, #16
    c88c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c890:	f818 2002 	ldrb.w	r2, [r8, r2]
    c894:	2a00      	cmp	r2, #0
    c896:	d0a4      	beq.n	c7e2 <__gethex+0x14e>
    c898:	2a19      	cmp	r2, #25
    c89a:	ddf1      	ble.n	c880 <__gethex+0x1ec>
    c89c:	e7a1      	b.n	c7e2 <__gethex+0x14e>
    c89e:	4949      	ldr	r1, [pc, #292]	; (c9c4 <__gethex+0x330>)
    c8a0:	9301      	str	r3, [sp, #4]
    c8a2:	2201      	movs	r2, #1
    c8a4:	4620      	mov	r0, r4
    c8a6:	f7ff f93b 	bl	bb20 <strncmp>
    c8aa:	9b01      	ldr	r3, [sp, #4]
    c8ac:	2800      	cmp	r0, #0
    c8ae:	d16d      	bne.n	c98c <__gethex+0x2f8>
    c8b0:	7861      	ldrb	r1, [r4, #1]
    c8b2:	f818 2001 	ldrb.w	r2, [r8, r1]
    c8b6:	1c65      	adds	r5, r4, #1
    c8b8:	2a00      	cmp	r2, #0
    c8ba:	d069      	beq.n	c990 <__gethex+0x2fc>
    c8bc:	2930      	cmp	r1, #48	; 0x30
    c8be:	462c      	mov	r4, r5
    c8c0:	d105      	bne.n	c8ce <__gethex+0x23a>
    c8c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    c8c6:	2b30      	cmp	r3, #48	; 0x30
    c8c8:	d0fb      	beq.n	c8c2 <__gethex+0x22e>
    c8ca:	f818 2003 	ldrb.w	r2, [r8, r3]
    c8ce:	fab2 f782 	clz	r7, r2
    c8d2:	097f      	lsrs	r7, r7, #5
    c8d4:	2301      	movs	r3, #1
    c8d6:	e702      	b.n	c6de <__gethex+0x4a>
    c8d8:	2501      	movs	r5, #1
    c8da:	b157      	cbz	r7, c8f2 <__gethex+0x25e>
    c8dc:	f8da 300c 	ldr.w	r3, [sl, #12]
    c8e0:	2b02      	cmp	r3, #2
    c8e2:	d05d      	beq.n	c9a0 <__gethex+0x30c>
    c8e4:	2b03      	cmp	r3, #3
    c8e6:	d05f      	beq.n	c9a8 <__gethex+0x314>
    c8e8:	2b01      	cmp	r3, #1
    c8ea:	f000 8084 	beq.w	c9f6 <__gethex+0x362>
    c8ee:	f045 0510 	orr.w	r5, r5, #16
    c8f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c8f4:	f8c3 b000 	str.w	fp, [r3]
    c8f8:	9b02      	ldr	r3, [sp, #8]
    c8fa:	4628      	mov	r0, r5
    c8fc:	f8c3 9000 	str.w	r9, [r3]
    c900:	b005      	add	sp, #20
    c902:	ecbd 8b02 	vpop	{d8}
    c906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c90a:	462e      	mov	r6, r5
    c90c:	e702      	b.n	c714 <__gethex+0x80>
    c90e:	2001      	movs	r0, #1
    c910:	78aa      	ldrb	r2, [r5, #2]
    c912:	1cae      	adds	r6, r5, #2
    c914:	e758      	b.n	c7c8 <__gethex+0x134>
    c916:	1b06      	subs	r6, r0, r4
    c918:	4631      	mov	r1, r6
    c91a:	4658      	mov	r0, fp
    c91c:	f000 ff96 	bl	d84c <__any_on>
    c920:	4607      	mov	r7, r0
    c922:	b178      	cbz	r0, c944 <__gethex+0x2b0>
    c924:	1e72      	subs	r2, r6, #1
    c926:	1153      	asrs	r3, r2, #5
    c928:	9901      	ldr	r1, [sp, #4]
    c92a:	2701      	movs	r7, #1
    c92c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    c930:	f002 031f 	and.w	r3, r2, #31
    c934:	fa07 f303 	lsl.w	r3, r7, r3
    c938:	420b      	tst	r3, r1
    c93a:	d003      	beq.n	c944 <__gethex+0x2b0>
    c93c:	42ba      	cmp	r2, r7
    c93e:	f300 80e2 	bgt.w	cb06 <__gethex+0x472>
    c942:	2702      	movs	r7, #2
    c944:	4631      	mov	r1, r6
    c946:	4658      	mov	r0, fp
    c948:	44b1      	add	r9, r6
    c94a:	f7ff fe51 	bl	c5f0 <rshift>
    c94e:	e76f      	b.n	c830 <__gethex+0x19c>
    c950:	f109 35ff 	add.w	r5, r9, #4294967295
    c954:	2f00      	cmp	r7, #0
    c956:	f040 80ce 	bne.w	caf6 <__gethex+0x462>
    c95a:	2d00      	cmp	r5, #0
    c95c:	f040 80cd 	bne.w	cafa <__gethex+0x466>
    c960:	116b      	asrs	r3, r5, #5
    c962:	9a01      	ldr	r2, [sp, #4]
    c964:	f005 051f 	and.w	r5, r5, #31
    c968:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c96c:	2301      	movs	r3, #1
    c96e:	40ab      	lsls	r3, r5
    c970:	4213      	tst	r3, r2
    c972:	4649      	mov	r1, r9
    c974:	4658      	mov	r0, fp
    c976:	bf18      	it	ne
    c978:	f047 0702 	orrne.w	r7, r7, #2
    c97c:	eba4 0409 	sub.w	r4, r4, r9
    c980:	f7ff fe36 	bl	c5f0 <rshift>
    c984:	2502      	movs	r5, #2
    c986:	f8da 9004 	ldr.w	r9, [sl, #4]
    c98a:	e7a6      	b.n	c8da <__gethex+0x246>
    c98c:	7821      	ldrb	r1, [r4, #0]
    c98e:	4625      	mov	r5, r4
    c990:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    c994:	2950      	cmp	r1, #80	; 0x50
    c996:	f000 80bf 	beq.w	cb18 <__gethex+0x484>
    c99a:	f8cb 5000 	str.w	r5, [fp]
    c99e:	e727      	b.n	c7f0 <__gethex+0x15c>
    c9a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c9a2:	f1c3 0301 	rsb	r3, r3, #1
    c9a6:	9311      	str	r3, [sp, #68]	; 0x44
    c9a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c9aa:	2b00      	cmp	r3, #0
    c9ac:	d09f      	beq.n	c8ee <__gethex+0x25a>
    c9ae:	f8db 7010 	ldr.w	r7, [fp, #16]
    c9b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    c9b6:	00ba      	lsls	r2, r7, #2
    c9b8:	4643      	mov	r3, r8
    c9ba:	9201      	str	r2, [sp, #4]
    c9bc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    c9c0:	2100      	movs	r1, #0
    c9c2:	e007      	b.n	c9d4 <__gethex+0x340>
    c9c4:	20007d38 	.word	0x20007d38
    c9c8:	20000940 	.word	0x20000940
    c9cc:	4298      	cmp	r0, r3
    c9ce:	f843 1c04 	str.w	r1, [r3, #-4]
    c9d2:	d93f      	bls.n	ca54 <__gethex+0x3c0>
    c9d4:	461e      	mov	r6, r3
    c9d6:	f853 2b04 	ldr.w	r2, [r3], #4
    c9da:	f1b2 3fff 	cmp.w	r2, #4294967295
    c9de:	d0f5      	beq.n	c9cc <__gethex+0x338>
    c9e0:	3201      	adds	r2, #1
    c9e2:	2d02      	cmp	r5, #2
    c9e4:	6032      	str	r2, [r6, #0]
    c9e6:	f000 80bf 	beq.w	cb68 <__gethex+0x4d4>
    c9ea:	f014 041f 	ands.w	r4, r4, #31
    c9ee:	f040 80e7 	bne.w	cbc0 <__gethex+0x52c>
    c9f2:	2521      	movs	r5, #33	; 0x21
    c9f4:	e77d      	b.n	c8f2 <__gethex+0x25e>
    c9f6:	07ba      	lsls	r2, r7, #30
    c9f8:	f57f af79 	bpl.w	c8ee <__gethex+0x25a>
    c9fc:	9b01      	ldr	r3, [sp, #4]
    c9fe:	681b      	ldr	r3, [r3, #0]
    ca00:	431f      	orrs	r7, r3
    ca02:	07fb      	lsls	r3, r7, #31
    ca04:	d4d3      	bmi.n	c9ae <__gethex+0x31a>
    ca06:	e772      	b.n	c8ee <__gethex+0x25a>
    ca08:	2000      	movs	r0, #0
    ca0a:	e781      	b.n	c910 <__gethex+0x27c>
    ca0c:	1a22      	subs	r2, r4, r0
    ca0e:	4659      	mov	r1, fp
    ca10:	ee18 0a10 	vmov	r0, s16
    ca14:	eba9 0902 	sub.w	r9, r9, r2
    ca18:	f000 fc76 	bl	d308 <__lshift>
    ca1c:	f100 0314 	add.w	r3, r0, #20
    ca20:	4683      	mov	fp, r0
    ca22:	9301      	str	r3, [sp, #4]
    ca24:	2700      	movs	r7, #0
    ca26:	e703      	b.n	c830 <__gethex+0x19c>
    ca28:	7872      	ldrb	r2, [r6, #1]
    ca2a:	f818 0002 	ldrb.w	r0, [r8, r2]
    ca2e:	1c71      	adds	r1, r6, #1
    ca30:	2800      	cmp	r0, #0
    ca32:	f000 80a0 	beq.w	cb76 <__gethex+0x4e2>
    ca36:	460d      	mov	r5, r1
    ca38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    ca3c:	f818 0002 	ldrb.w	r0, [r8, r2]
    ca40:	2800      	cmp	r0, #0
    ca42:	d1f8      	bne.n	ca36 <__gethex+0x3a2>
    ca44:	1b75      	subs	r5, r6, r5
    ca46:	ea4f 0985 	mov.w	r9, r5, lsl #2
    ca4a:	460e      	mov	r6, r1
    ca4c:	e65d      	b.n	c70a <__gethex+0x76>
    ca4e:	3402      	adds	r4, #2
    ca50:	2300      	movs	r3, #0
    ca52:	e638      	b.n	c6c6 <__gethex+0x32>
    ca54:	f8db 3008 	ldr.w	r3, [fp, #8]
    ca58:	429f      	cmp	r7, r3
    ca5a:	f280 808e 	bge.w	cb7a <__gethex+0x4e6>
    ca5e:	463b      	mov	r3, r7
    ca60:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    ca64:	2101      	movs	r1, #1
    ca66:	3301      	adds	r3, #1
    ca68:	2d02      	cmp	r5, #2
    ca6a:	f8cb 3010 	str.w	r3, [fp, #16]
    ca6e:	6151      	str	r1, [r2, #20]
    ca70:	d07a      	beq.n	cb68 <__gethex+0x4d4>
    ca72:	429f      	cmp	r7, r3
    ca74:	dab9      	bge.n	c9ea <__gethex+0x356>
    ca76:	2b00      	cmp	r3, #0
    ca78:	f340 809b 	ble.w	cbb2 <__gethex+0x51e>
    ca7c:	f8db 2014 	ldr.w	r2, [fp, #20]
    ca80:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    ca84:	f10b 0018 	add.w	r0, fp, #24
    ca88:	4283      	cmp	r3, r0
    ca8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    ca8e:	f240 80b1 	bls.w	cbf4 <__gethex+0x560>
    ca92:	4644      	mov	r4, r8
    ca94:	6801      	ldr	r1, [r0, #0]
    ca96:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    ca9a:	f844 2b04 	str.w	r2, [r4], #4
    ca9e:	f850 2b04 	ldr.w	r2, [r0], #4
    caa2:	4283      	cmp	r3, r0
    caa4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    caa8:	d8f4      	bhi.n	ca94 <__gethex+0x400>
    caaa:	eba3 030b 	sub.w	r3, r3, fp
    caae:	3b19      	subs	r3, #25
    cab0:	089b      	lsrs	r3, r3, #2
    cab2:	3301      	adds	r3, #1
    cab4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    cab8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    cabc:	2a00      	cmp	r2, #0
    cabe:	f040 809d 	bne.w	cbfc <__gethex+0x568>
    cac2:	eba3 0208 	sub.w	r2, r3, r8
    cac6:	1092      	asrs	r2, r2, #2
    cac8:	4543      	cmp	r3, r8
    caca:	f8cb 2010 	str.w	r2, [fp, #16]
    cace:	d073      	beq.n	cbb8 <__gethex+0x524>
    cad0:	f8da 3008 	ldr.w	r3, [sl, #8]
    cad4:	f109 0901 	add.w	r9, r9, #1
    cad8:	454b      	cmp	r3, r9
    cada:	da8a      	bge.n	c9f2 <__gethex+0x35e>
    cadc:	ee18 0a10 	vmov	r0, s16
    cae0:	4659      	mov	r1, fp
    cae2:	f000 f9d1 	bl	ce88 <_Bfree>
    cae6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cae8:	2300      	movs	r3, #0
    caea:	6013      	str	r3, [r2, #0]
    caec:	25a3      	movs	r5, #163	; 0xa3
    caee:	e683      	b.n	c7f8 <__gethex+0x164>
    caf0:	9e01      	ldr	r6, [sp, #4]
    caf2:	2300      	movs	r3, #0
    caf4:	e689      	b.n	c80a <__gethex+0x176>
    caf6:	2701      	movs	r7, #1
    caf8:	e732      	b.n	c960 <__gethex+0x2cc>
    cafa:	4629      	mov	r1, r5
    cafc:	4658      	mov	r0, fp
    cafe:	f000 fea5 	bl	d84c <__any_on>
    cb02:	4607      	mov	r7, r0
    cb04:	e72c      	b.n	c960 <__gethex+0x2cc>
    cb06:	1eb1      	subs	r1, r6, #2
    cb08:	4658      	mov	r0, fp
    cb0a:	f000 fe9f 	bl	d84c <__any_on>
    cb0e:	2800      	cmp	r0, #0
    cb10:	f43f af17 	beq.w	c942 <__gethex+0x2ae>
    cb14:	2703      	movs	r7, #3
    cb16:	e715      	b.n	c944 <__gethex+0x2b0>
    cb18:	f04f 0900 	mov.w	r9, #0
    cb1c:	2701      	movs	r7, #1
    cb1e:	e64a      	b.n	c7b6 <__gethex+0x122>
    cb20:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cb22:	2a00      	cmp	r2, #0
    cb24:	f47f ae9d 	bne.w	c862 <__gethex+0x1ce>
    cb28:	9902      	ldr	r1, [sp, #8]
    cb2a:	600b      	str	r3, [r1, #0]
    cb2c:	9b01      	ldr	r3, [sp, #4]
    cb2e:	2201      	movs	r2, #1
    cb30:	f8cb 2010 	str.w	r2, [fp, #16]
    cb34:	601a      	str	r2, [r3, #0]
    cb36:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cb38:	2562      	movs	r5, #98	; 0x62
    cb3a:	f8c3 b000 	str.w	fp, [r3]
    cb3e:	e65b      	b.n	c7f8 <__gethex+0x164>
    cb40:	454c      	cmp	r4, r9
    cb42:	f47f ae8e 	bne.w	c862 <__gethex+0x1ce>
    cb46:	2c01      	cmp	r4, #1
    cb48:	d0ee      	beq.n	cb28 <__gethex+0x494>
    cb4a:	1e61      	subs	r1, r4, #1
    cb4c:	4658      	mov	r0, fp
    cb4e:	f000 fe7d 	bl	d84c <__any_on>
    cb52:	2800      	cmp	r0, #0
    cb54:	f43f ae85 	beq.w	c862 <__gethex+0x1ce>
    cb58:	f8da 3004 	ldr.w	r3, [sl, #4]
    cb5c:	e7e4      	b.n	cb28 <__gethex+0x494>
    cb5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cb60:	2a00      	cmp	r2, #0
    cb62:	f43f ae7e 	beq.w	c862 <__gethex+0x1ce>
    cb66:	e7df      	b.n	cb28 <__gethex+0x494>
    cb68:	f8da 3000 	ldr.w	r3, [sl]
    cb6c:	3b01      	subs	r3, #1
    cb6e:	42a3      	cmp	r3, r4
    cb70:	d034      	beq.n	cbdc <__gethex+0x548>
    cb72:	2522      	movs	r5, #34	; 0x22
    cb74:	e6bd      	b.n	c8f2 <__gethex+0x25e>
    cb76:	460e      	mov	r6, r1
    cb78:	e5c7      	b.n	c70a <__gethex+0x76>
    cb7a:	f8db 1004 	ldr.w	r1, [fp, #4]
    cb7e:	ee18 0a10 	vmov	r0, s16
    cb82:	3101      	adds	r1, #1
    cb84:	f000 f95a 	bl	ce3c <_Balloc>
    cb88:	4606      	mov	r6, r0
    cb8a:	b3c8      	cbz	r0, cc00 <__gethex+0x56c>
    cb8c:	f8db 3010 	ldr.w	r3, [fp, #16]
    cb90:	3302      	adds	r3, #2
    cb92:	009a      	lsls	r2, r3, #2
    cb94:	f10b 010c 	add.w	r1, fp, #12
    cb98:	300c      	adds	r0, #12
    cb9a:	f7fb faa3 	bl	80e4 <memcpy>
    cb9e:	4659      	mov	r1, fp
    cba0:	ee18 0a10 	vmov	r0, s16
    cba4:	f000 f970 	bl	ce88 <_Bfree>
    cba8:	f106 0814 	add.w	r8, r6, #20
    cbac:	6933      	ldr	r3, [r6, #16]
    cbae:	46b3      	mov	fp, r6
    cbb0:	e756      	b.n	ca60 <__gethex+0x3cc>
    cbb2:	2300      	movs	r3, #0
    cbb4:	f8cb 3010 	str.w	r3, [fp, #16]
    cbb8:	2300      	movs	r3, #0
    cbba:	f8cb 3014 	str.w	r3, [fp, #20]
    cbbe:	e787      	b.n	cad0 <__gethex+0x43c>
    cbc0:	9b01      	ldr	r3, [sp, #4]
    cbc2:	4443      	add	r3, r8
    cbc4:	f1c4 0420 	rsb	r4, r4, #32
    cbc8:	f853 0c04 	ldr.w	r0, [r3, #-4]
    cbcc:	f000 fa10 	bl	cff0 <__hi0bits>
    cbd0:	42a0      	cmp	r0, r4
    cbd2:	f6bf af0e 	bge.w	c9f2 <__gethex+0x35e>
    cbd6:	f8db 3010 	ldr.w	r3, [fp, #16]
    cbda:	e74c      	b.n	ca76 <__gethex+0x3e2>
    cbdc:	1163      	asrs	r3, r4, #5
    cbde:	f004 041f 	and.w	r4, r4, #31
    cbe2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    cbe6:	2301      	movs	r3, #1
    cbe8:	40a3      	lsls	r3, r4
    cbea:	4213      	tst	r3, r2
    cbec:	bf0c      	ite	eq
    cbee:	2522      	moveq	r5, #34	; 0x22
    cbf0:	2521      	movne	r5, #33	; 0x21
    cbf2:	e67e      	b.n	c8f2 <__gethex+0x25e>
    cbf4:	f8c8 2000 	str.w	r2, [r8]
    cbf8:	4643      	mov	r3, r8
    cbfa:	b16a      	cbz	r2, cc18 <__gethex+0x584>
    cbfc:	3304      	adds	r3, #4
    cbfe:	e760      	b.n	cac2 <__gethex+0x42e>
    cc00:	4b07      	ldr	r3, [pc, #28]	; (cc20 <__gethex+0x58c>)
    cc02:	4808      	ldr	r0, [pc, #32]	; (cc24 <__gethex+0x590>)
    cc04:	4632      	mov	r2, r6
    cc06:	2184      	movs	r1, #132	; 0x84
    cc08:	f004 fa0a 	bl	11020 <__assert_func>
    cc0c:	4b04      	ldr	r3, [pc, #16]	; (cc20 <__gethex+0x58c>)
    cc0e:	4805      	ldr	r0, [pc, #20]	; (cc24 <__gethex+0x590>)
    cc10:	465a      	mov	r2, fp
    cc12:	21e4      	movs	r1, #228	; 0xe4
    cc14:	f004 fa04 	bl	11020 <__assert_func>
    cc18:	f8cb 2010 	str.w	r2, [fp, #16]
    cc1c:	e7cc      	b.n	cbb8 <__gethex+0x524>
    cc1e:	bf00      	nop
    cc20:	200008c8 	.word	0x200008c8
    cc24:	200008dc 	.word	0x200008dc

0000cc28 <__match>:
    cc28:	b410      	push	{r4}
    cc2a:	6804      	ldr	r4, [r0, #0]
    cc2c:	e009      	b.n	cc42 <__match+0x1a>
    cc2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    cc32:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    cc36:	f1bc 0f19 	cmp.w	ip, #25
    cc3a:	bf98      	it	ls
    cc3c:	3320      	addls	r3, #32
    cc3e:	4293      	cmp	r3, r2
    cc40:	d109      	bne.n	cc56 <__match+0x2e>
    cc42:	f811 2b01 	ldrb.w	r2, [r1], #1
    cc46:	2a00      	cmp	r2, #0
    cc48:	d1f1      	bne.n	cc2e <__match+0x6>
    cc4a:	3401      	adds	r4, #1
    cc4c:	6004      	str	r4, [r0, #0]
    cc4e:	2001      	movs	r0, #1
    cc50:	f85d 4b04 	ldr.w	r4, [sp], #4
    cc54:	4770      	bx	lr
    cc56:	2000      	movs	r0, #0
    cc58:	f85d 4b04 	ldr.w	r4, [sp], #4
    cc5c:	4770      	bx	lr
    cc5e:	bf00      	nop

0000cc60 <__hexnan>:
    cc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc64:	6809      	ldr	r1, [r1, #0]
    cc66:	b085      	sub	sp, #20
    cc68:	114b      	asrs	r3, r1, #5
    cc6a:	f011 011f 	ands.w	r1, r1, #31
    cc6e:	9002      	str	r0, [sp, #8]
    cc70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cc74:	9103      	str	r1, [sp, #12]
    cc76:	f040 808f 	bne.w	cd98 <__hexnan+0x138>
    cc7a:	1f1d      	subs	r5, r3, #4
    cc7c:	9301      	str	r3, [sp, #4]
    cc7e:	9b02      	ldr	r3, [sp, #8]
    cc80:	9901      	ldr	r1, [sp, #4]
    cc82:	681c      	ldr	r4, [r3, #0]
    cc84:	2300      	movs	r3, #0
    cc86:	f841 3c04 	str.w	r3, [r1, #-4]
    cc8a:	7861      	ldrb	r1, [r4, #1]
    cc8c:	3401      	adds	r4, #1
    cc8e:	2900      	cmp	r1, #0
    cc90:	f000 8098 	beq.w	cdc4 <__hexnan+0x164>
    cc94:	f8df 9174 	ldr.w	r9, [pc, #372]	; ce0c <__hexnan+0x1ac>
    cc98:	46a8      	mov	r8, r5
    cc9a:	46ac      	mov	ip, r5
    cc9c:	469a      	mov	sl, r3
    cc9e:	461e      	mov	r6, r3
    cca0:	e00e      	b.n	ccc0 <__hexnan+0x60>
    cca2:	2920      	cmp	r1, #32
    cca4:	f200 808c 	bhi.w	cdc0 <__hexnan+0x160>
    cca8:	4556      	cmp	r6, sl
    ccaa:	dd06      	ble.n	ccba <__hexnan+0x5a>
    ccac:	45c4      	cmp	ip, r8
    ccae:	d201      	bcs.n	ccb4 <__hexnan+0x54>
    ccb0:	2b07      	cmp	r3, #7
    ccb2:	dd5b      	ble.n	cd6c <__hexnan+0x10c>
    ccb4:	4562      	cmp	r2, ip
    ccb6:	d351      	bcc.n	cd5c <__hexnan+0xfc>
    ccb8:	2308      	movs	r3, #8
    ccba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    ccbe:	b1a1      	cbz	r1, ccea <__hexnan+0x8a>
    ccc0:	f819 0001 	ldrb.w	r0, [r9, r1]
    ccc4:	2800      	cmp	r0, #0
    ccc6:	d0ec      	beq.n	cca2 <__hexnan+0x42>
    ccc8:	3301      	adds	r3, #1
    ccca:	2b08      	cmp	r3, #8
    cccc:	f106 0601 	add.w	r6, r6, #1
    ccd0:	dc3a      	bgt.n	cd48 <__hexnan+0xe8>
    ccd2:	f8dc 1000 	ldr.w	r1, [ip]
    ccd6:	0109      	lsls	r1, r1, #4
    ccd8:	f000 000f 	and.w	r0, r0, #15
    ccdc:	4308      	orrs	r0, r1
    ccde:	f8cc 0000 	str.w	r0, [ip]
    cce2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    cce6:	2900      	cmp	r1, #0
    cce8:	d1ea      	bne.n	ccc0 <__hexnan+0x60>
    ccea:	2e00      	cmp	r6, #0
    ccec:	d06a      	beq.n	cdc4 <__hexnan+0x164>
    ccee:	45c4      	cmp	ip, r8
    ccf0:	d201      	bcs.n	ccf6 <__hexnan+0x96>
    ccf2:	2b07      	cmp	r3, #7
    ccf4:	dd74      	ble.n	cde0 <__hexnan+0x180>
    ccf6:	4562      	cmp	r2, ip
    ccf8:	d252      	bcs.n	cda0 <__hexnan+0x140>
    ccfa:	1f11      	subs	r1, r2, #4
    ccfc:	4663      	mov	r3, ip
    ccfe:	f853 0b04 	ldr.w	r0, [r3], #4
    cd02:	f841 0f04 	str.w	r0, [r1, #4]!
    cd06:	42ab      	cmp	r3, r5
    cd08:	d9f9      	bls.n	ccfe <__hexnan+0x9e>
    cd0a:	eba5 030c 	sub.w	r3, r5, ip
    cd0e:	f023 0303 	bic.w	r3, r3, #3
    cd12:	1c69      	adds	r1, r5, #1
    cd14:	3304      	adds	r3, #4
    cd16:	f10c 0c01 	add.w	ip, ip, #1
    cd1a:	4561      	cmp	r1, ip
    cd1c:	bf38      	it	cc
    cd1e:	2304      	movcc	r3, #4
    cd20:	4413      	add	r3, r2
    cd22:	2100      	movs	r1, #0
    cd24:	f843 1b04 	str.w	r1, [r3], #4
    cd28:	42ab      	cmp	r3, r5
    cd2a:	d9fb      	bls.n	cd24 <__hexnan+0xc4>
    cd2c:	9b01      	ldr	r3, [sp, #4]
    cd2e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    cd32:	b92b      	cbnz	r3, cd40 <__hexnan+0xe0>
    cd34:	42aa      	cmp	r2, r5
    cd36:	d049      	beq.n	cdcc <__hexnan+0x16c>
    cd38:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    cd3c:	2b00      	cmp	r3, #0
    cd3e:	d0f9      	beq.n	cd34 <__hexnan+0xd4>
    cd40:	2005      	movs	r0, #5
    cd42:	b005      	add	sp, #20
    cd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd48:	4562      	cmp	r2, ip
    cd4a:	d2b6      	bcs.n	ccba <__hexnan+0x5a>
    cd4c:	2300      	movs	r3, #0
    cd4e:	f84c 3c04 	str.w	r3, [ip, #-4]
    cd52:	4619      	mov	r1, r3
    cd54:	f1ac 0c04 	sub.w	ip, ip, #4
    cd58:	2301      	movs	r3, #1
    cd5a:	e7bd      	b.n	ccd8 <__hexnan+0x78>
    cd5c:	2300      	movs	r3, #0
    cd5e:	f1ac 0804 	sub.w	r8, ip, #4
    cd62:	f84c 3c04 	str.w	r3, [ip, #-4]
    cd66:	46b2      	mov	sl, r6
    cd68:	46c4      	mov	ip, r8
    cd6a:	e7a6      	b.n	ccba <__hexnan+0x5a>
    cd6c:	f1c3 0108 	rsb	r1, r3, #8
    cd70:	f8dc 3000 	ldr.w	r3, [ip]
    cd74:	0089      	lsls	r1, r1, #2
    cd76:	f1c1 0e20 	rsb	lr, r1, #32
    cd7a:	4660      	mov	r0, ip
    cd7c:	469b      	mov	fp, r3
    cd7e:	6847      	ldr	r7, [r0, #4]
    cd80:	fa07 f30e 	lsl.w	r3, r7, lr
    cd84:	ea43 030b 	orr.w	r3, r3, fp
    cd88:	fa27 fb01 	lsr.w	fp, r7, r1
    cd8c:	6003      	str	r3, [r0, #0]
    cd8e:	f840 bf04 	str.w	fp, [r0, #4]!
    cd92:	4540      	cmp	r0, r8
    cd94:	d3f3      	bcc.n	cd7e <__hexnan+0x11e>
    cd96:	e78d      	b.n	ccb4 <__hexnan+0x54>
    cd98:	1d19      	adds	r1, r3, #4
    cd9a:	9101      	str	r1, [sp, #4]
    cd9c:	461d      	mov	r5, r3
    cd9e:	e76e      	b.n	cc7e <__hexnan+0x1e>
    cda0:	9b03      	ldr	r3, [sp, #12]
    cda2:	2b00      	cmp	r3, #0
    cda4:	d0c2      	beq.n	cd2c <__hexnan+0xcc>
    cda6:	9b03      	ldr	r3, [sp, #12]
    cda8:	9801      	ldr	r0, [sp, #4]
    cdaa:	f1c3 0120 	rsb	r1, r3, #32
    cdae:	f04f 33ff 	mov.w	r3, #4294967295
    cdb2:	40cb      	lsrs	r3, r1
    cdb4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    cdb8:	400b      	ands	r3, r1
    cdba:	f840 3c04 	str.w	r3, [r0, #-4]
    cdbe:	e7b8      	b.n	cd32 <__hexnan+0xd2>
    cdc0:	2929      	cmp	r1, #41	; 0x29
    cdc2:	d009      	beq.n	cdd8 <__hexnan+0x178>
    cdc4:	2004      	movs	r0, #4
    cdc6:	b005      	add	sp, #20
    cdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cdcc:	2301      	movs	r3, #1
    cdce:	2005      	movs	r0, #5
    cdd0:	602b      	str	r3, [r5, #0]
    cdd2:	b005      	add	sp, #20
    cdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cdd8:	9902      	ldr	r1, [sp, #8]
    cdda:	3401      	adds	r4, #1
    cddc:	600c      	str	r4, [r1, #0]
    cdde:	e784      	b.n	ccea <__hexnan+0x8a>
    cde0:	f8dc 1000 	ldr.w	r1, [ip]
    cde4:	f1c3 0308 	rsb	r3, r3, #8
    cde8:	009b      	lsls	r3, r3, #2
    cdea:	f1c3 0720 	rsb	r7, r3, #32
    cdee:	4664      	mov	r4, ip
    cdf0:	4608      	mov	r0, r1
    cdf2:	6866      	ldr	r6, [r4, #4]
    cdf4:	fa06 f107 	lsl.w	r1, r6, r7
    cdf8:	4301      	orrs	r1, r0
    cdfa:	fa26 f003 	lsr.w	r0, r6, r3
    cdfe:	6021      	str	r1, [r4, #0]
    ce00:	f844 0f04 	str.w	r0, [r4, #4]!
    ce04:	4544      	cmp	r4, r8
    ce06:	d3f4      	bcc.n	cdf2 <__hexnan+0x192>
    ce08:	e775      	b.n	ccf6 <__hexnan+0x96>
    ce0a:	bf00      	nop
    ce0c:	20000940 	.word	0x20000940

0000ce10 <__ascii_mbtowc>:
    ce10:	b082      	sub	sp, #8
    ce12:	b149      	cbz	r1, ce28 <__ascii_mbtowc+0x18>
    ce14:	b15a      	cbz	r2, ce2e <__ascii_mbtowc+0x1e>
    ce16:	b16b      	cbz	r3, ce34 <__ascii_mbtowc+0x24>
    ce18:	7813      	ldrb	r3, [r2, #0]
    ce1a:	600b      	str	r3, [r1, #0]
    ce1c:	7812      	ldrb	r2, [r2, #0]
    ce1e:	1e10      	subs	r0, r2, #0
    ce20:	bf18      	it	ne
    ce22:	2001      	movne	r0, #1
    ce24:	b002      	add	sp, #8
    ce26:	4770      	bx	lr
    ce28:	a901      	add	r1, sp, #4
    ce2a:	2a00      	cmp	r2, #0
    ce2c:	d1f3      	bne.n	ce16 <__ascii_mbtowc+0x6>
    ce2e:	4610      	mov	r0, r2
    ce30:	b002      	add	sp, #8
    ce32:	4770      	bx	lr
    ce34:	f06f 0001 	mvn.w	r0, #1
    ce38:	e7f4      	b.n	ce24 <__ascii_mbtowc+0x14>
    ce3a:	bf00      	nop

0000ce3c <_Balloc>:
    ce3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ce3e:	b570      	push	{r4, r5, r6, lr}
    ce40:	4605      	mov	r5, r0
    ce42:	460c      	mov	r4, r1
    ce44:	b14b      	cbz	r3, ce5a <_Balloc+0x1e>
    ce46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    ce4a:	b180      	cbz	r0, ce6e <_Balloc+0x32>
    ce4c:	6802      	ldr	r2, [r0, #0]
    ce4e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    ce52:	2300      	movs	r3, #0
    ce54:	e9c0 3303 	strd	r3, r3, [r0, #12]
    ce58:	bd70      	pop	{r4, r5, r6, pc}
    ce5a:	2221      	movs	r2, #33	; 0x21
    ce5c:	2104      	movs	r1, #4
    ce5e:	f004 f8ff 	bl	11060 <_calloc_r>
    ce62:	4603      	mov	r3, r0
    ce64:	6468      	str	r0, [r5, #68]	; 0x44
    ce66:	2800      	cmp	r0, #0
    ce68:	d1ed      	bne.n	ce46 <_Balloc+0xa>
    ce6a:	2000      	movs	r0, #0
    ce6c:	bd70      	pop	{r4, r5, r6, pc}
    ce6e:	2101      	movs	r1, #1
    ce70:	fa01 f604 	lsl.w	r6, r1, r4
    ce74:	1d72      	adds	r2, r6, #5
    ce76:	0092      	lsls	r2, r2, #2
    ce78:	4628      	mov	r0, r5
    ce7a:	f004 f8f1 	bl	11060 <_calloc_r>
    ce7e:	2800      	cmp	r0, #0
    ce80:	d0f3      	beq.n	ce6a <_Balloc+0x2e>
    ce82:	e9c0 4601 	strd	r4, r6, [r0, #4]
    ce86:	e7e4      	b.n	ce52 <_Balloc+0x16>

0000ce88 <_Bfree>:
    ce88:	b131      	cbz	r1, ce98 <_Bfree+0x10>
    ce8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ce8c:	684a      	ldr	r2, [r1, #4]
    ce8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ce92:	6008      	str	r0, [r1, #0]
    ce94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ce98:	4770      	bx	lr
    ce9a:	bf00      	nop

0000ce9c <__multadd>:
    ce9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cea0:	690e      	ldr	r6, [r1, #16]
    cea2:	4680      	mov	r8, r0
    cea4:	460f      	mov	r7, r1
    cea6:	461d      	mov	r5, r3
    cea8:	f101 0e14 	add.w	lr, r1, #20
    ceac:	2000      	movs	r0, #0
    ceae:	f8de 1000 	ldr.w	r1, [lr]
    ceb2:	b28c      	uxth	r4, r1
    ceb4:	fb02 5304 	mla	r3, r2, r4, r5
    ceb8:	0c09      	lsrs	r1, r1, #16
    ceba:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    cebe:	fb02 cc01 	mla	ip, r2, r1, ip
    cec2:	3001      	adds	r0, #1
    cec4:	b29c      	uxth	r4, r3
    cec6:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    ceca:	4286      	cmp	r6, r0
    cecc:	f84e 4b04 	str.w	r4, [lr], #4
    ced0:	ea4f 451c 	mov.w	r5, ip, lsr #16
    ced4:	dceb      	bgt.n	ceae <__multadd+0x12>
    ced6:	b13d      	cbz	r5, cee8 <__multadd+0x4c>
    ced8:	68bb      	ldr	r3, [r7, #8]
    ceda:	42b3      	cmp	r3, r6
    cedc:	dd07      	ble.n	ceee <__multadd+0x52>
    cede:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    cee2:	3601      	adds	r6, #1
    cee4:	615d      	str	r5, [r3, #20]
    cee6:	613e      	str	r6, [r7, #16]
    cee8:	4638      	mov	r0, r7
    ceea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ceee:	6879      	ldr	r1, [r7, #4]
    cef0:	4640      	mov	r0, r8
    cef2:	3101      	adds	r1, #1
    cef4:	f7ff ffa2 	bl	ce3c <_Balloc>
    cef8:	4604      	mov	r4, r0
    cefa:	b1b0      	cbz	r0, cf2a <__multadd+0x8e>
    cefc:	693a      	ldr	r2, [r7, #16]
    cefe:	3202      	adds	r2, #2
    cf00:	f107 010c 	add.w	r1, r7, #12
    cf04:	0092      	lsls	r2, r2, #2
    cf06:	300c      	adds	r0, #12
    cf08:	f7fb f8ec 	bl	80e4 <memcpy>
    cf0c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    cf10:	687a      	ldr	r2, [r7, #4]
    cf12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    cf16:	6039      	str	r1, [r7, #0]
    cf18:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    cf1c:	4627      	mov	r7, r4
    cf1e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    cf22:	3601      	adds	r6, #1
    cf24:	615d      	str	r5, [r3, #20]
    cf26:	613e      	str	r6, [r7, #16]
    cf28:	e7de      	b.n	cee8 <__multadd+0x4c>
    cf2a:	4b03      	ldr	r3, [pc, #12]	; (cf38 <__multadd+0x9c>)
    cf2c:	4803      	ldr	r0, [pc, #12]	; (cf3c <__multadd+0xa0>)
    cf2e:	4622      	mov	r2, r4
    cf30:	21ba      	movs	r1, #186	; 0xba
    cf32:	f004 f875 	bl	11020 <__assert_func>
    cf36:	bf00      	nop
    cf38:	200008c8 	.word	0x200008c8
    cf3c:	20000a40 	.word	0x20000a40

0000cf40 <__s2b>:
    cf40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cf44:	4617      	mov	r7, r2
    cf46:	4a27      	ldr	r2, [pc, #156]	; (cfe4 <__s2b+0xa4>)
    cf48:	461e      	mov	r6, r3
    cf4a:	3308      	adds	r3, #8
    cf4c:	460c      	mov	r4, r1
    cf4e:	2e09      	cmp	r6, #9
    cf50:	fb82 1203 	smull	r1, r2, r2, r3
    cf54:	ea4f 73e3 	mov.w	r3, r3, asr #31
    cf58:	4605      	mov	r5, r0
    cf5a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    cf5e:	dd39      	ble.n	cfd4 <__s2b+0x94>
    cf60:	f04f 0c01 	mov.w	ip, #1
    cf64:	2100      	movs	r1, #0
    cf66:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    cf6a:	4563      	cmp	r3, ip
    cf6c:	f101 0101 	add.w	r1, r1, #1
    cf70:	dcf9      	bgt.n	cf66 <__s2b+0x26>
    cf72:	4628      	mov	r0, r5
    cf74:	f7ff ff62 	bl	ce3c <_Balloc>
    cf78:	4601      	mov	r1, r0
    cf7a:	b368      	cbz	r0, cfd8 <__s2b+0x98>
    cf7c:	9b08      	ldr	r3, [sp, #32]
    cf7e:	6143      	str	r3, [r0, #20]
    cf80:	2f09      	cmp	r7, #9
    cf82:	f04f 0301 	mov.w	r3, #1
    cf86:	6103      	str	r3, [r0, #16]
    cf88:	dc12      	bgt.n	cfb0 <__s2b+0x70>
    cf8a:	340a      	adds	r4, #10
    cf8c:	2709      	movs	r7, #9
    cf8e:	42be      	cmp	r6, r7
    cf90:	dd0b      	ble.n	cfaa <__s2b+0x6a>
    cf92:	1bf2      	subs	r2, r6, r7
    cf94:	18a6      	adds	r6, r4, r2
    cf96:	f814 3b01 	ldrb.w	r3, [r4], #1
    cf9a:	220a      	movs	r2, #10
    cf9c:	3b30      	subs	r3, #48	; 0x30
    cf9e:	4628      	mov	r0, r5
    cfa0:	f7ff ff7c 	bl	ce9c <__multadd>
    cfa4:	42a6      	cmp	r6, r4
    cfa6:	4601      	mov	r1, r0
    cfa8:	d1f5      	bne.n	cf96 <__s2b+0x56>
    cfaa:	4608      	mov	r0, r1
    cfac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cfb0:	f104 0909 	add.w	r9, r4, #9
    cfb4:	46c8      	mov	r8, r9
    cfb6:	443c      	add	r4, r7
    cfb8:	f818 3b01 	ldrb.w	r3, [r8], #1
    cfbc:	220a      	movs	r2, #10
    cfbe:	3b30      	subs	r3, #48	; 0x30
    cfc0:	4628      	mov	r0, r5
    cfc2:	f7ff ff6b 	bl	ce9c <__multadd>
    cfc6:	45a0      	cmp	r8, r4
    cfc8:	4601      	mov	r1, r0
    cfca:	d1f5      	bne.n	cfb8 <__s2b+0x78>
    cfcc:	f1a7 0408 	sub.w	r4, r7, #8
    cfd0:	444c      	add	r4, r9
    cfd2:	e7dc      	b.n	cf8e <__s2b+0x4e>
    cfd4:	2100      	movs	r1, #0
    cfd6:	e7cc      	b.n	cf72 <__s2b+0x32>
    cfd8:	460a      	mov	r2, r1
    cfda:	4b03      	ldr	r3, [pc, #12]	; (cfe8 <__s2b+0xa8>)
    cfdc:	4803      	ldr	r0, [pc, #12]	; (cfec <__s2b+0xac>)
    cfde:	21d3      	movs	r1, #211	; 0xd3
    cfe0:	f004 f81e 	bl	11020 <__assert_func>
    cfe4:	38e38e39 	.word	0x38e38e39
    cfe8:	200008c8 	.word	0x200008c8
    cfec:	20000a40 	.word	0x20000a40

0000cff0 <__hi0bits>:
    cff0:	0c03      	lsrs	r3, r0, #16
    cff2:	041b      	lsls	r3, r3, #16
    cff4:	b9d3      	cbnz	r3, d02c <__hi0bits+0x3c>
    cff6:	0400      	lsls	r0, r0, #16
    cff8:	2310      	movs	r3, #16
    cffa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    cffe:	bf04      	itt	eq
    d000:	0200      	lsleq	r0, r0, #8
    d002:	3308      	addeq	r3, #8
    d004:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    d008:	bf04      	itt	eq
    d00a:	0100      	lsleq	r0, r0, #4
    d00c:	3304      	addeq	r3, #4
    d00e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    d012:	bf04      	itt	eq
    d014:	0080      	lsleq	r0, r0, #2
    d016:	3302      	addeq	r3, #2
    d018:	2800      	cmp	r0, #0
    d01a:	db05      	blt.n	d028 <__hi0bits+0x38>
    d01c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    d020:	f103 0301 	add.w	r3, r3, #1
    d024:	bf08      	it	eq
    d026:	2320      	moveq	r3, #32
    d028:	4618      	mov	r0, r3
    d02a:	4770      	bx	lr
    d02c:	2300      	movs	r3, #0
    d02e:	e7e4      	b.n	cffa <__hi0bits+0xa>

0000d030 <__lo0bits>:
    d030:	6803      	ldr	r3, [r0, #0]
    d032:	f013 0207 	ands.w	r2, r3, #7
    d036:	d008      	beq.n	d04a <__lo0bits+0x1a>
    d038:	07d9      	lsls	r1, r3, #31
    d03a:	d41f      	bmi.n	d07c <__lo0bits+0x4c>
    d03c:	079a      	lsls	r2, r3, #30
    d03e:	d522      	bpl.n	d086 <__lo0bits+0x56>
    d040:	085b      	lsrs	r3, r3, #1
    d042:	6003      	str	r3, [r0, #0]
    d044:	2201      	movs	r2, #1
    d046:	4610      	mov	r0, r2
    d048:	4770      	bx	lr
    d04a:	b299      	uxth	r1, r3
    d04c:	b909      	cbnz	r1, d052 <__lo0bits+0x22>
    d04e:	0c1b      	lsrs	r3, r3, #16
    d050:	2210      	movs	r2, #16
    d052:	b2d9      	uxtb	r1, r3
    d054:	b909      	cbnz	r1, d05a <__lo0bits+0x2a>
    d056:	3208      	adds	r2, #8
    d058:	0a1b      	lsrs	r3, r3, #8
    d05a:	0719      	lsls	r1, r3, #28
    d05c:	bf04      	itt	eq
    d05e:	091b      	lsreq	r3, r3, #4
    d060:	3204      	addeq	r2, #4
    d062:	0799      	lsls	r1, r3, #30
    d064:	bf04      	itt	eq
    d066:	089b      	lsreq	r3, r3, #2
    d068:	3202      	addeq	r2, #2
    d06a:	07d9      	lsls	r1, r3, #31
    d06c:	d403      	bmi.n	d076 <__lo0bits+0x46>
    d06e:	085b      	lsrs	r3, r3, #1
    d070:	f102 0201 	add.w	r2, r2, #1
    d074:	d005      	beq.n	d082 <__lo0bits+0x52>
    d076:	6003      	str	r3, [r0, #0]
    d078:	4610      	mov	r0, r2
    d07a:	4770      	bx	lr
    d07c:	2200      	movs	r2, #0
    d07e:	4610      	mov	r0, r2
    d080:	4770      	bx	lr
    d082:	2220      	movs	r2, #32
    d084:	e7df      	b.n	d046 <__lo0bits+0x16>
    d086:	089b      	lsrs	r3, r3, #2
    d088:	2202      	movs	r2, #2
    d08a:	6003      	str	r3, [r0, #0]
    d08c:	4610      	mov	r0, r2
    d08e:	4770      	bx	lr

0000d090 <__i2b>:
    d090:	b538      	push	{r3, r4, r5, lr}
    d092:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d094:	4604      	mov	r4, r0
    d096:	460d      	mov	r5, r1
    d098:	b14b      	cbz	r3, d0ae <__i2b+0x1e>
    d09a:	6858      	ldr	r0, [r3, #4]
    d09c:	b1b0      	cbz	r0, d0cc <__i2b+0x3c>
    d09e:	6802      	ldr	r2, [r0, #0]
    d0a0:	605a      	str	r2, [r3, #4]
    d0a2:	2200      	movs	r2, #0
    d0a4:	2301      	movs	r3, #1
    d0a6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    d0aa:	60c2      	str	r2, [r0, #12]
    d0ac:	bd38      	pop	{r3, r4, r5, pc}
    d0ae:	2221      	movs	r2, #33	; 0x21
    d0b0:	2104      	movs	r1, #4
    d0b2:	f003 ffd5 	bl	11060 <_calloc_r>
    d0b6:	4603      	mov	r3, r0
    d0b8:	6460      	str	r0, [r4, #68]	; 0x44
    d0ba:	2800      	cmp	r0, #0
    d0bc:	d1ed      	bne.n	d09a <__i2b+0xa>
    d0be:	4b09      	ldr	r3, [pc, #36]	; (d0e4 <__i2b+0x54>)
    d0c0:	4809      	ldr	r0, [pc, #36]	; (d0e8 <__i2b+0x58>)
    d0c2:	2200      	movs	r2, #0
    d0c4:	f240 1145 	movw	r1, #325	; 0x145
    d0c8:	f003 ffaa 	bl	11020 <__assert_func>
    d0cc:	221c      	movs	r2, #28
    d0ce:	2101      	movs	r1, #1
    d0d0:	4620      	mov	r0, r4
    d0d2:	f003 ffc5 	bl	11060 <_calloc_r>
    d0d6:	2800      	cmp	r0, #0
    d0d8:	d0f1      	beq.n	d0be <__i2b+0x2e>
    d0da:	2201      	movs	r2, #1
    d0dc:	2302      	movs	r3, #2
    d0de:	e9c0 2301 	strd	r2, r3, [r0, #4]
    d0e2:	e7de      	b.n	d0a2 <__i2b+0x12>
    d0e4:	200008c8 	.word	0x200008c8
    d0e8:	20000a40 	.word	0x20000a40

0000d0ec <__multiply>:
    d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0f0:	690e      	ldr	r6, [r1, #16]
    d0f2:	6915      	ldr	r5, [r2, #16]
    d0f4:	42ae      	cmp	r6, r5
    d0f6:	b085      	sub	sp, #20
    d0f8:	4688      	mov	r8, r1
    d0fa:	4614      	mov	r4, r2
    d0fc:	db05      	blt.n	d10a <__multiply+0x1e>
    d0fe:	462a      	mov	r2, r5
    d100:	4623      	mov	r3, r4
    d102:	4635      	mov	r5, r6
    d104:	460c      	mov	r4, r1
    d106:	4616      	mov	r6, r2
    d108:	4698      	mov	r8, r3
    d10a:	68a3      	ldr	r3, [r4, #8]
    d10c:	6861      	ldr	r1, [r4, #4]
    d10e:	19af      	adds	r7, r5, r6
    d110:	42bb      	cmp	r3, r7
    d112:	bfb8      	it	lt
    d114:	3101      	addlt	r1, #1
    d116:	f7ff fe91 	bl	ce3c <_Balloc>
    d11a:	9001      	str	r0, [sp, #4]
    d11c:	2800      	cmp	r0, #0
    d11e:	f000 8087 	beq.w	d230 <__multiply+0x144>
    d122:	9b01      	ldr	r3, [sp, #4]
    d124:	f103 0914 	add.w	r9, r3, #20
    d128:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    d12c:	45d1      	cmp	r9, sl
    d12e:	d205      	bcs.n	d13c <__multiply+0x50>
    d130:	464b      	mov	r3, r9
    d132:	2200      	movs	r2, #0
    d134:	f843 2b04 	str.w	r2, [r3], #4
    d138:	459a      	cmp	sl, r3
    d13a:	d8fb      	bhi.n	d134 <__multiply+0x48>
    d13c:	f108 0814 	add.w	r8, r8, #20
    d140:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    d144:	f104 0314 	add.w	r3, r4, #20
    d148:	45d8      	cmp	r8, fp
    d14a:	461a      	mov	r2, r3
    d14c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    d150:	d25f      	bcs.n	d212 <__multiply+0x126>
    d152:	1b2b      	subs	r3, r5, r4
    d154:	3b15      	subs	r3, #21
    d156:	f023 0303 	bic.w	r3, r3, #3
    d15a:	3304      	adds	r3, #4
    d15c:	3415      	adds	r4, #21
    d15e:	42a5      	cmp	r5, r4
    d160:	bf38      	it	cc
    d162:	2304      	movcc	r3, #4
    d164:	e9cd a702 	strd	sl, r7, [sp, #8]
    d168:	46ac      	mov	ip, r5
    d16a:	461f      	mov	r7, r3
    d16c:	4692      	mov	sl, r2
    d16e:	e005      	b.n	d17c <__multiply+0x90>
    d170:	0c09      	lsrs	r1, r1, #16
    d172:	d129      	bne.n	d1c8 <__multiply+0xdc>
    d174:	45c3      	cmp	fp, r8
    d176:	f109 0904 	add.w	r9, r9, #4
    d17a:	d948      	bls.n	d20e <__multiply+0x122>
    d17c:	f858 1b04 	ldr.w	r1, [r8], #4
    d180:	b28d      	uxth	r5, r1
    d182:	2d00      	cmp	r5, #0
    d184:	d0f4      	beq.n	d170 <__multiply+0x84>
    d186:	4656      	mov	r6, sl
    d188:	464c      	mov	r4, r9
    d18a:	2300      	movs	r3, #0
    d18c:	f856 1b04 	ldr.w	r1, [r6], #4
    d190:	6822      	ldr	r2, [r4, #0]
    d192:	fa1f fe81 	uxth.w	lr, r1
    d196:	b290      	uxth	r0, r2
    d198:	0c09      	lsrs	r1, r1, #16
    d19a:	fb05 000e 	mla	r0, r5, lr, r0
    d19e:	0c12      	lsrs	r2, r2, #16
    d1a0:	4403      	add	r3, r0
    d1a2:	fb05 2201 	mla	r2, r5, r1, r2
    d1a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d1aa:	b29b      	uxth	r3, r3
    d1ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    d1b0:	45b4      	cmp	ip, r6
    d1b2:	f844 3b04 	str.w	r3, [r4], #4
    d1b6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    d1ba:	d8e7      	bhi.n	d18c <__multiply+0xa0>
    d1bc:	f849 3007 	str.w	r3, [r9, r7]
    d1c0:	f858 1c04 	ldr.w	r1, [r8, #-4]
    d1c4:	0c09      	lsrs	r1, r1, #16
    d1c6:	d0d5      	beq.n	d174 <__multiply+0x88>
    d1c8:	f8d9 3000 	ldr.w	r3, [r9]
    d1cc:	4650      	mov	r0, sl
    d1ce:	461a      	mov	r2, r3
    d1d0:	464c      	mov	r4, r9
    d1d2:	2600      	movs	r6, #0
    d1d4:	8805      	ldrh	r5, [r0, #0]
    d1d6:	0c12      	lsrs	r2, r2, #16
    d1d8:	fb01 2205 	mla	r2, r1, r5, r2
    d1dc:	4416      	add	r6, r2
    d1de:	b29b      	uxth	r3, r3
    d1e0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    d1e4:	f844 3b04 	str.w	r3, [r4], #4
    d1e8:	f850 5b04 	ldr.w	r5, [r0], #4
    d1ec:	6822      	ldr	r2, [r4, #0]
    d1ee:	0c2d      	lsrs	r5, r5, #16
    d1f0:	b293      	uxth	r3, r2
    d1f2:	fb01 3305 	mla	r3, r1, r5, r3
    d1f6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    d1fa:	4584      	cmp	ip, r0
    d1fc:	ea4f 4613 	mov.w	r6, r3, lsr #16
    d200:	d8e8      	bhi.n	d1d4 <__multiply+0xe8>
    d202:	45c3      	cmp	fp, r8
    d204:	f849 3007 	str.w	r3, [r9, r7]
    d208:	f109 0904 	add.w	r9, r9, #4
    d20c:	d8b6      	bhi.n	d17c <__multiply+0x90>
    d20e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    d212:	2f00      	cmp	r7, #0
    d214:	dc02      	bgt.n	d21c <__multiply+0x130>
    d216:	e005      	b.n	d224 <__multiply+0x138>
    d218:	3f01      	subs	r7, #1
    d21a:	d003      	beq.n	d224 <__multiply+0x138>
    d21c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    d220:	2b00      	cmp	r3, #0
    d222:	d0f9      	beq.n	d218 <__multiply+0x12c>
    d224:	9b01      	ldr	r3, [sp, #4]
    d226:	4618      	mov	r0, r3
    d228:	611f      	str	r7, [r3, #16]
    d22a:	b005      	add	sp, #20
    d22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d230:	4b03      	ldr	r3, [pc, #12]	; (d240 <__multiply+0x154>)
    d232:	4804      	ldr	r0, [pc, #16]	; (d244 <__multiply+0x158>)
    d234:	9a01      	ldr	r2, [sp, #4]
    d236:	f44f 71b1 	mov.w	r1, #354	; 0x162
    d23a:	f003 fef1 	bl	11020 <__assert_func>
    d23e:	bf00      	nop
    d240:	200008c8 	.word	0x200008c8
    d244:	20000a40 	.word	0x20000a40

0000d248 <__pow5mult>:
    d248:	f012 0303 	ands.w	r3, r2, #3
    d24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d250:	4614      	mov	r4, r2
    d252:	4606      	mov	r6, r0
    d254:	d132      	bne.n	d2bc <__pow5mult+0x74>
    d256:	460d      	mov	r5, r1
    d258:	10a4      	asrs	r4, r4, #2
    d25a:	d020      	beq.n	d29e <__pow5mult+0x56>
    d25c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    d260:	f1b8 0f00 	cmp.w	r8, #0
    d264:	d033      	beq.n	d2ce <__pow5mult+0x86>
    d266:	07e3      	lsls	r3, r4, #31
    d268:	f04f 0700 	mov.w	r7, #0
    d26c:	d407      	bmi.n	d27e <__pow5mult+0x36>
    d26e:	1064      	asrs	r4, r4, #1
    d270:	d015      	beq.n	d29e <__pow5mult+0x56>
    d272:	f8d8 0000 	ldr.w	r0, [r8]
    d276:	b1a8      	cbz	r0, d2a4 <__pow5mult+0x5c>
    d278:	4680      	mov	r8, r0
    d27a:	07e3      	lsls	r3, r4, #31
    d27c:	d5f7      	bpl.n	d26e <__pow5mult+0x26>
    d27e:	4642      	mov	r2, r8
    d280:	4629      	mov	r1, r5
    d282:	4630      	mov	r0, r6
    d284:	f7ff ff32 	bl	d0ec <__multiply>
    d288:	b1b5      	cbz	r5, d2b8 <__pow5mult+0x70>
    d28a:	6869      	ldr	r1, [r5, #4]
    d28c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    d28e:	1064      	asrs	r4, r4, #1
    d290:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    d294:	602a      	str	r2, [r5, #0]
    d296:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    d29a:	4605      	mov	r5, r0
    d29c:	d1e9      	bne.n	d272 <__pow5mult+0x2a>
    d29e:	4628      	mov	r0, r5
    d2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d2a4:	4642      	mov	r2, r8
    d2a6:	4641      	mov	r1, r8
    d2a8:	4630      	mov	r0, r6
    d2aa:	f7ff ff1f 	bl	d0ec <__multiply>
    d2ae:	f8c8 0000 	str.w	r0, [r8]
    d2b2:	6007      	str	r7, [r0, #0]
    d2b4:	4680      	mov	r8, r0
    d2b6:	e7e0      	b.n	d27a <__pow5mult+0x32>
    d2b8:	4605      	mov	r5, r0
    d2ba:	e7d8      	b.n	d26e <__pow5mult+0x26>
    d2bc:	3b01      	subs	r3, #1
    d2be:	4a0f      	ldr	r2, [pc, #60]	; (d2fc <__pow5mult+0xb4>)
    d2c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    d2c4:	2300      	movs	r3, #0
    d2c6:	f7ff fde9 	bl	ce9c <__multadd>
    d2ca:	4605      	mov	r5, r0
    d2cc:	e7c4      	b.n	d258 <__pow5mult+0x10>
    d2ce:	2101      	movs	r1, #1
    d2d0:	4630      	mov	r0, r6
    d2d2:	f7ff fdb3 	bl	ce3c <_Balloc>
    d2d6:	4680      	mov	r8, r0
    d2d8:	b140      	cbz	r0, d2ec <__pow5mult+0xa4>
    d2da:	2301      	movs	r3, #1
    d2dc:	f240 2271 	movw	r2, #625	; 0x271
    d2e0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    d2e4:	2300      	movs	r3, #0
    d2e6:	6430      	str	r0, [r6, #64]	; 0x40
    d2e8:	6003      	str	r3, [r0, #0]
    d2ea:	e7bc      	b.n	d266 <__pow5mult+0x1e>
    d2ec:	4b04      	ldr	r3, [pc, #16]	; (d300 <__pow5mult+0xb8>)
    d2ee:	4805      	ldr	r0, [pc, #20]	; (d304 <__pow5mult+0xbc>)
    d2f0:	4642      	mov	r2, r8
    d2f2:	f240 1145 	movw	r1, #325	; 0x145
    d2f6:	f003 fe93 	bl	11020 <__assert_func>
    d2fa:	bf00      	nop
    d2fc:	20007a9c 	.word	0x20007a9c
    d300:	200008c8 	.word	0x200008c8
    d304:	20000a40 	.word	0x20000a40

0000d308 <__lshift>:
    d308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d30c:	460d      	mov	r5, r1
    d30e:	4614      	mov	r4, r2
    d310:	692f      	ldr	r7, [r5, #16]
    d312:	68ab      	ldr	r3, [r5, #8]
    d314:	6849      	ldr	r1, [r1, #4]
    d316:	eb07 1762 	add.w	r7, r7, r2, asr #5
    d31a:	1c7e      	adds	r6, r7, #1
    d31c:	429e      	cmp	r6, r3
    d31e:	4680      	mov	r8, r0
    d320:	ea4f 1962 	mov.w	r9, r2, asr #5
    d324:	dd04      	ble.n	d330 <__lshift+0x28>
    d326:	005b      	lsls	r3, r3, #1
    d328:	429e      	cmp	r6, r3
    d32a:	f101 0101 	add.w	r1, r1, #1
    d32e:	dcfa      	bgt.n	d326 <__lshift+0x1e>
    d330:	4640      	mov	r0, r8
    d332:	f7ff fd83 	bl	ce3c <_Balloc>
    d336:	4684      	mov	ip, r0
    d338:	2800      	cmp	r0, #0
    d33a:	d052      	beq.n	d3e2 <__lshift+0xda>
    d33c:	f1b9 0f00 	cmp.w	r9, #0
    d340:	f100 0214 	add.w	r2, r0, #20
    d344:	dd0e      	ble.n	d364 <__lshift+0x5c>
    d346:	f109 0105 	add.w	r1, r9, #5
    d34a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    d34e:	4613      	mov	r3, r2
    d350:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    d354:	2000      	movs	r0, #0
    d356:	f843 0b04 	str.w	r0, [r3], #4
    d35a:	428b      	cmp	r3, r1
    d35c:	d1fb      	bne.n	d356 <__lshift+0x4e>
    d35e:	f1ae 0314 	sub.w	r3, lr, #20
    d362:	441a      	add	r2, r3
    d364:	6929      	ldr	r1, [r5, #16]
    d366:	f105 0314 	add.w	r3, r5, #20
    d36a:	f014 0e1f 	ands.w	lr, r4, #31
    d36e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d372:	d02e      	beq.n	d3d2 <__lshift+0xca>
    d374:	f1ce 0920 	rsb	r9, lr, #32
    d378:	4610      	mov	r0, r2
    d37a:	f04f 0a00 	mov.w	sl, #0
    d37e:	681c      	ldr	r4, [r3, #0]
    d380:	fa04 f40e 	lsl.w	r4, r4, lr
    d384:	ea44 040a 	orr.w	r4, r4, sl
    d388:	f840 4b04 	str.w	r4, [r0], #4
    d38c:	f853 4b04 	ldr.w	r4, [r3], #4
    d390:	4299      	cmp	r1, r3
    d392:	fa24 fa09 	lsr.w	sl, r4, r9
    d396:	d8f2      	bhi.n	d37e <__lshift+0x76>
    d398:	1b4b      	subs	r3, r1, r5
    d39a:	3b15      	subs	r3, #21
    d39c:	f023 0303 	bic.w	r3, r3, #3
    d3a0:	3304      	adds	r3, #4
    d3a2:	f105 0015 	add.w	r0, r5, #21
    d3a6:	4281      	cmp	r1, r0
    d3a8:	bf38      	it	cc
    d3aa:	2304      	movcc	r3, #4
    d3ac:	f1ba 0f00 	cmp.w	sl, #0
    d3b0:	bf18      	it	ne
    d3b2:	4637      	movne	r7, r6
    d3b4:	f842 a003 	str.w	sl, [r2, r3]
    d3b8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    d3bc:	686a      	ldr	r2, [r5, #4]
    d3be:	f8cc 7010 	str.w	r7, [ip, #16]
    d3c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d3c6:	6029      	str	r1, [r5, #0]
    d3c8:	4660      	mov	r0, ip
    d3ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    d3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d3d2:	3a04      	subs	r2, #4
    d3d4:	f853 0b04 	ldr.w	r0, [r3], #4
    d3d8:	f842 0f04 	str.w	r0, [r2, #4]!
    d3dc:	4299      	cmp	r1, r3
    d3de:	d8f9      	bhi.n	d3d4 <__lshift+0xcc>
    d3e0:	e7ea      	b.n	d3b8 <__lshift+0xb0>
    d3e2:	4b03      	ldr	r3, [pc, #12]	; (d3f0 <__lshift+0xe8>)
    d3e4:	4803      	ldr	r0, [pc, #12]	; (d3f4 <__lshift+0xec>)
    d3e6:	4662      	mov	r2, ip
    d3e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    d3ec:	f003 fe18 	bl	11020 <__assert_func>
    d3f0:	200008c8 	.word	0x200008c8
    d3f4:	20000a40 	.word	0x20000a40

0000d3f8 <__mcmp>:
    d3f8:	690b      	ldr	r3, [r1, #16]
    d3fa:	4684      	mov	ip, r0
    d3fc:	6900      	ldr	r0, [r0, #16]
    d3fe:	1ac0      	subs	r0, r0, r3
    d400:	d116      	bne.n	d430 <__mcmp+0x38>
    d402:	f10c 0c14 	add.w	ip, ip, #20
    d406:	3114      	adds	r1, #20
    d408:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    d40c:	b410      	push	{r4}
    d40e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    d412:	e001      	b.n	d418 <__mcmp+0x20>
    d414:	4594      	cmp	ip, r2
    d416:	d208      	bcs.n	d42a <__mcmp+0x32>
    d418:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d41c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d420:	428c      	cmp	r4, r1
    d422:	d0f7      	beq.n	d414 <__mcmp+0x1c>
    d424:	d205      	bcs.n	d432 <__mcmp+0x3a>
    d426:	f04f 30ff 	mov.w	r0, #4294967295
    d42a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d42e:	4770      	bx	lr
    d430:	4770      	bx	lr
    d432:	2001      	movs	r0, #1
    d434:	f85d 4b04 	ldr.w	r4, [sp], #4
    d438:	4770      	bx	lr
    d43a:	bf00      	nop

0000d43c <__mdiff>:
    d43c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d440:	690f      	ldr	r7, [r1, #16]
    d442:	6913      	ldr	r3, [r2, #16]
    d444:	1aff      	subs	r7, r7, r3
    d446:	2f00      	cmp	r7, #0
    d448:	460e      	mov	r6, r1
    d44a:	4690      	mov	r8, r2
    d44c:	d17f      	bne.n	d54e <__mdiff+0x112>
    d44e:	f101 0514 	add.w	r5, r1, #20
    d452:	3214      	adds	r2, #20
    d454:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    d458:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    d45c:	e001      	b.n	d462 <__mdiff+0x26>
    d45e:	429d      	cmp	r5, r3
    d460:	d278      	bcs.n	d554 <__mdiff+0x118>
    d462:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d466:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d46a:	42a1      	cmp	r1, r4
    d46c:	d0f7      	beq.n	d45e <__mdiff+0x22>
    d46e:	d369      	bcc.n	d544 <__mdiff+0x108>
    d470:	6871      	ldr	r1, [r6, #4]
    d472:	f7ff fce3 	bl	ce3c <_Balloc>
    d476:	4681      	mov	r9, r0
    d478:	2800      	cmp	r0, #0
    d47a:	d077      	beq.n	d56c <__mdiff+0x130>
    d47c:	6935      	ldr	r5, [r6, #16]
    d47e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    d482:	60c7      	str	r7, [r0, #12]
    d484:	f108 0e14 	add.w	lr, r8, #20
    d488:	f106 0014 	add.w	r0, r6, #20
    d48c:	f109 0a14 	add.w	sl, r9, #20
    d490:	f106 0110 	add.w	r1, r6, #16
    d494:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    d498:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    d49c:	4656      	mov	r6, sl
    d49e:	f04f 0c00 	mov.w	ip, #0
    d4a2:	f85e 4b04 	ldr.w	r4, [lr], #4
    d4a6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    d4aa:	b2a3      	uxth	r3, r4
    d4ac:	fa1c fc8b 	uxtah	ip, ip, fp
    d4b0:	ebac 0303 	sub.w	r3, ip, r3
    d4b4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    d4b8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    d4bc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    d4c0:	b29b      	uxth	r3, r3
    d4c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    d4c6:	4572      	cmp	r2, lr
    d4c8:	f846 3b04 	str.w	r3, [r6], #4
    d4cc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    d4d0:	d8e7      	bhi.n	d4a2 <__mdiff+0x66>
    d4d2:	eba2 0108 	sub.w	r1, r2, r8
    d4d6:	3915      	subs	r1, #21
    d4d8:	f108 0815 	add.w	r8, r8, #21
    d4dc:	4542      	cmp	r2, r8
    d4de:	f021 0403 	bic.w	r4, r1, #3
    d4e2:	f104 0404 	add.w	r4, r4, #4
    d4e6:	bf38      	it	cc
    d4e8:	2404      	movcc	r4, #4
    d4ea:	4420      	add	r0, r4
    d4ec:	f021 0203 	bic.w	r2, r1, #3
    d4f0:	bf38      	it	cc
    d4f2:	2200      	movcc	r2, #0
    d4f4:	4287      	cmp	r7, r0
    d4f6:	4452      	add	r2, sl
    d4f8:	4454      	add	r4, sl
    d4fa:	d918      	bls.n	d52e <__mdiff+0xf2>
    d4fc:	4626      	mov	r6, r4
    d4fe:	4601      	mov	r1, r0
    d500:	f851 3b04 	ldr.w	r3, [r1], #4
    d504:	fa1c fc83 	uxtah	ip, ip, r3
    d508:	ea4f 422c 	mov.w	r2, ip, asr #16
    d50c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d510:	fa1f fc8c 	uxth.w	ip, ip
    d514:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    d518:	428f      	cmp	r7, r1
    d51a:	f846 3b04 	str.w	r3, [r6], #4
    d51e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    d522:	d8ed      	bhi.n	d500 <__mdiff+0xc4>
    d524:	3f01      	subs	r7, #1
    d526:	1a3f      	subs	r7, r7, r0
    d528:	f027 0703 	bic.w	r7, r7, #3
    d52c:	19e2      	adds	r2, r4, r7
    d52e:	b923      	cbnz	r3, d53a <__mdiff+0xfe>
    d530:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    d534:	3d01      	subs	r5, #1
    d536:	2b00      	cmp	r3, #0
    d538:	d0fa      	beq.n	d530 <__mdiff+0xf4>
    d53a:	f8c9 5010 	str.w	r5, [r9, #16]
    d53e:	4648      	mov	r0, r9
    d540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d544:	4633      	mov	r3, r6
    d546:	2701      	movs	r7, #1
    d548:	4646      	mov	r6, r8
    d54a:	4698      	mov	r8, r3
    d54c:	e790      	b.n	d470 <__mdiff+0x34>
    d54e:	dbf9      	blt.n	d544 <__mdiff+0x108>
    d550:	2700      	movs	r7, #0
    d552:	e78d      	b.n	d470 <__mdiff+0x34>
    d554:	2100      	movs	r1, #0
    d556:	f7ff fc71 	bl	ce3c <_Balloc>
    d55a:	4681      	mov	r9, r0
    d55c:	b168      	cbz	r0, d57a <__mdiff+0x13e>
    d55e:	2201      	movs	r2, #1
    d560:	2300      	movs	r3, #0
    d562:	e9c9 2304 	strd	r2, r3, [r9, #16]
    d566:	4648      	mov	r0, r9
    d568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d56c:	4b06      	ldr	r3, [pc, #24]	; (d588 <__mdiff+0x14c>)
    d56e:	4807      	ldr	r0, [pc, #28]	; (d58c <__mdiff+0x150>)
    d570:	464a      	mov	r2, r9
    d572:	f240 2145 	movw	r1, #581	; 0x245
    d576:	f003 fd53 	bl	11020 <__assert_func>
    d57a:	4b03      	ldr	r3, [pc, #12]	; (d588 <__mdiff+0x14c>)
    d57c:	4803      	ldr	r0, [pc, #12]	; (d58c <__mdiff+0x150>)
    d57e:	464a      	mov	r2, r9
    d580:	f240 2137 	movw	r1, #567	; 0x237
    d584:	f003 fd4c 	bl	11020 <__assert_func>
    d588:	200008c8 	.word	0x200008c8
    d58c:	20000a40 	.word	0x20000a40

0000d590 <__ulp>:
    d590:	b082      	sub	sp, #8
    d592:	ed8d 0b00 	vstr	d0, [sp]
    d596:	4b16      	ldr	r3, [pc, #88]	; (d5f0 <__ulp+0x60>)
    d598:	9a01      	ldr	r2, [sp, #4]
    d59a:	4013      	ands	r3, r2
    d59c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    d5a0:	2b00      	cmp	r3, #0
    d5a2:	dd06      	ble.n	d5b2 <__ulp+0x22>
    d5a4:	2200      	movs	r2, #0
    d5a6:	4619      	mov	r1, r3
    d5a8:	4610      	mov	r0, r2
    d5aa:	ec41 0b10 	vmov	d0, r0, r1
    d5ae:	b002      	add	sp, #8
    d5b0:	4770      	bx	lr
    d5b2:	425b      	negs	r3, r3
    d5b4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    d5b8:	ea4f 5223 	mov.w	r2, r3, asr #20
    d5bc:	da09      	bge.n	d5d2 <__ulp+0x42>
    d5be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    d5c2:	4113      	asrs	r3, r2
    d5c4:	2200      	movs	r2, #0
    d5c6:	4619      	mov	r1, r3
    d5c8:	4610      	mov	r0, r2
    d5ca:	ec41 0b10 	vmov	d0, r0, r1
    d5ce:	b002      	add	sp, #8
    d5d0:	4770      	bx	lr
    d5d2:	f1a2 0314 	sub.w	r3, r2, #20
    d5d6:	2b1e      	cmp	r3, #30
    d5d8:	bfda      	itte	le
    d5da:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    d5de:	40da      	lsrle	r2, r3
    d5e0:	2201      	movgt	r2, #1
    d5e2:	2300      	movs	r3, #0
    d5e4:	4619      	mov	r1, r3
    d5e6:	4610      	mov	r0, r2
    d5e8:	ec41 0b10 	vmov	d0, r0, r1
    d5ec:	b002      	add	sp, #8
    d5ee:	4770      	bx	lr
    d5f0:	7ff00000 	.word	0x7ff00000

0000d5f4 <__b2d>:
    d5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5f6:	6904      	ldr	r4, [r0, #16]
    d5f8:	f100 0614 	add.w	r6, r0, #20
    d5fc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    d600:	1f27      	subs	r7, r4, #4
    d602:	f854 5c04 	ldr.w	r5, [r4, #-4]
    d606:	4628      	mov	r0, r5
    d608:	f7ff fcf2 	bl	cff0 <__hi0bits>
    d60c:	f1c0 0320 	rsb	r3, r0, #32
    d610:	280a      	cmp	r0, #10
    d612:	600b      	str	r3, [r1, #0]
    d614:	dd1b      	ble.n	d64e <__b2d+0x5a>
    d616:	42be      	cmp	r6, r7
    d618:	d20b      	bcs.n	d632 <__b2d+0x3e>
    d61a:	380b      	subs	r0, #11
    d61c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    d620:	d12e      	bne.n	d680 <__b2d+0x8c>
    d622:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    d626:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d62a:	460a      	mov	r2, r1
    d62c:	ec43 2b10 	vmov	d0, r2, r3
    d630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d632:	f1b0 010b 	subs.w	r1, r0, #11
    d636:	d0f4      	beq.n	d622 <__b2d+0x2e>
    d638:	fa05 f101 	lsl.w	r1, r5, r1
    d63c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d640:	2100      	movs	r1, #0
    d642:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d646:	460a      	mov	r2, r1
    d648:	ec43 2b10 	vmov	d0, r2, r3
    d64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d64e:	f1c0 0c0b 	rsb	ip, r0, #11
    d652:	fa25 f10c 	lsr.w	r1, r5, ip
    d656:	42be      	cmp	r6, r7
    d658:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d65c:	bf38      	it	cc
    d65e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    d662:	f100 0015 	add.w	r0, r0, #21
    d666:	bf34      	ite	cc
    d668:	fa21 f10c 	lsrcc.w	r1, r1, ip
    d66c:	2100      	movcs	r1, #0
    d66e:	fa05 f000 	lsl.w	r0, r5, r0
    d672:	4301      	orrs	r1, r0
    d674:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d678:	460a      	mov	r2, r1
    d67a:	ec43 2b10 	vmov	d0, r2, r3
    d67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d680:	f1c0 0c20 	rsb	ip, r0, #32
    d684:	4085      	lsls	r5, r0
    d686:	fa21 f30c 	lsr.w	r3, r1, ip
    d68a:	ea45 0703 	orr.w	r7, r5, r3
    d68e:	f1a4 0508 	sub.w	r5, r4, #8
    d692:	42ae      	cmp	r6, r5
    d694:	fa01 f100 	lsl.w	r1, r1, r0
    d698:	bf3c      	itt	cc
    d69a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    d69e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    d6a2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    d6a6:	bf38      	it	cc
    d6a8:	4301      	orrcc	r1, r0
    d6aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d6ae:	460a      	mov	r2, r1
    d6b0:	ec43 2b10 	vmov	d0, r2, r3
    d6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d6b6:	bf00      	nop

0000d6b8 <__d2b>:
    d6b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d6bc:	4688      	mov	r8, r1
    d6be:	b083      	sub	sp, #12
    d6c0:	2101      	movs	r1, #1
    d6c2:	ec57 6b10 	vmov	r6, r7, d0
    d6c6:	4615      	mov	r5, r2
    d6c8:	f7ff fbb8 	bl	ce3c <_Balloc>
    d6cc:	4604      	mov	r4, r0
    d6ce:	2800      	cmp	r0, #0
    d6d0:	d051      	beq.n	d776 <__d2b+0xbe>
    d6d2:	f3c7 590a 	ubfx	r9, r7, #20, #11
    d6d6:	f3c7 0313 	ubfx	r3, r7, #0, #20
    d6da:	f1b9 0f00 	cmp.w	r9, #0
    d6de:	d001      	beq.n	d6e4 <__d2b+0x2c>
    d6e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d6e4:	2e00      	cmp	r6, #0
    d6e6:	9301      	str	r3, [sp, #4]
    d6e8:	d118      	bne.n	d71c <__d2b+0x64>
    d6ea:	a801      	add	r0, sp, #4
    d6ec:	f7ff fca0 	bl	d030 <__lo0bits>
    d6f0:	9a01      	ldr	r2, [sp, #4]
    d6f2:	6162      	str	r2, [r4, #20]
    d6f4:	2201      	movs	r2, #1
    d6f6:	f100 0320 	add.w	r3, r0, #32
    d6fa:	6122      	str	r2, [r4, #16]
    d6fc:	f1b9 0f00 	cmp.w	r9, #0
    d700:	d025      	beq.n	d74e <__d2b+0x96>
    d702:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    d706:	eb09 0203 	add.w	r2, r9, r3
    d70a:	4620      	mov	r0, r4
    d70c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    d710:	f8c8 2000 	str.w	r2, [r8]
    d714:	602b      	str	r3, [r5, #0]
    d716:	b003      	add	sp, #12
    d718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d71c:	4668      	mov	r0, sp
    d71e:	9600      	str	r6, [sp, #0]
    d720:	f7ff fc86 	bl	d030 <__lo0bits>
    d724:	4603      	mov	r3, r0
    d726:	b310      	cbz	r0, d76e <__d2b+0xb6>
    d728:	e9dd 0200 	ldrd	r0, r2, [sp]
    d72c:	f1c3 0120 	rsb	r1, r3, #32
    d730:	fa02 f101 	lsl.w	r1, r2, r1
    d734:	4301      	orrs	r1, r0
    d736:	40da      	lsrs	r2, r3
    d738:	6161      	str	r1, [r4, #20]
    d73a:	9201      	str	r2, [sp, #4]
    d73c:	2a00      	cmp	r2, #0
    d73e:	61a2      	str	r2, [r4, #24]
    d740:	bf14      	ite	ne
    d742:	2202      	movne	r2, #2
    d744:	2201      	moveq	r2, #1
    d746:	6122      	str	r2, [r4, #16]
    d748:	f1b9 0f00 	cmp.w	r9, #0
    d74c:	d1d9      	bne.n	d702 <__d2b+0x4a>
    d74e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    d752:	f8c8 3000 	str.w	r3, [r8]
    d756:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    d75a:	6918      	ldr	r0, [r3, #16]
    d75c:	f7ff fc48 	bl	cff0 <__hi0bits>
    d760:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    d764:	4620      	mov	r0, r4
    d766:	602b      	str	r3, [r5, #0]
    d768:	b003      	add	sp, #12
    d76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d76e:	9a00      	ldr	r2, [sp, #0]
    d770:	6162      	str	r2, [r4, #20]
    d772:	9a01      	ldr	r2, [sp, #4]
    d774:	e7e2      	b.n	d73c <__d2b+0x84>
    d776:	4b03      	ldr	r3, [pc, #12]	; (d784 <__d2b+0xcc>)
    d778:	4803      	ldr	r0, [pc, #12]	; (d788 <__d2b+0xd0>)
    d77a:	4622      	mov	r2, r4
    d77c:	f240 310f 	movw	r1, #783	; 0x30f
    d780:	f003 fc4e 	bl	11020 <__assert_func>
    d784:	200008c8 	.word	0x200008c8
    d788:	20000a40 	.word	0x20000a40

0000d78c <__ratio>:
    d78c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d78e:	b083      	sub	sp, #12
    d790:	460e      	mov	r6, r1
    d792:	4669      	mov	r1, sp
    d794:	4607      	mov	r7, r0
    d796:	f7ff ff2d 	bl	d5f4 <__b2d>
    d79a:	a901      	add	r1, sp, #4
    d79c:	4630      	mov	r0, r6
    d79e:	ec55 4b10 	vmov	r4, r5, d0
    d7a2:	eeb0 7b40 	vmov.f64	d7, d0
    d7a6:	f7ff ff25 	bl	d5f4 <__b2d>
    d7aa:	6933      	ldr	r3, [r6, #16]
    d7ac:	693a      	ldr	r2, [r7, #16]
    d7ae:	1ad2      	subs	r2, r2, r3
    d7b0:	e9dd 3100 	ldrd	r3, r1, [sp]
    d7b4:	1a5b      	subs	r3, r3, r1
    d7b6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    d7ba:	2b00      	cmp	r3, #0
    d7bc:	dd09      	ble.n	d7d2 <__ratio+0x46>
    d7be:	ee17 2a90 	vmov	r2, s15
    d7c2:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    d7c6:	ec45 4b17 	vmov	d7, r4, r5
    d7ca:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d7ce:	b003      	add	sp, #12
    d7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d7d2:	ee10 2a90 	vmov	r2, s1
    d7d6:	ec51 0b10 	vmov	r0, r1, d0
    d7da:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    d7de:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    d7e2:	ec41 0b10 	vmov	d0, r0, r1
    d7e6:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d7ea:	b003      	add	sp, #12
    d7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d7ee:	bf00      	nop

0000d7f0 <__copybits>:
    d7f0:	3901      	subs	r1, #1
    d7f2:	1149      	asrs	r1, r1, #5
    d7f4:	f101 0c01 	add.w	ip, r1, #1
    d7f8:	6911      	ldr	r1, [r2, #16]
    d7fa:	f102 0314 	add.w	r3, r2, #20
    d7fe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d802:	428b      	cmp	r3, r1
    d804:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    d808:	d217      	bcs.n	d83a <__copybits+0x4a>
    d80a:	b510      	push	{r4, lr}
    d80c:	f1a0 0e04 	sub.w	lr, r0, #4
    d810:	f853 4b04 	ldr.w	r4, [r3], #4
    d814:	f84e 4f04 	str.w	r4, [lr, #4]!
    d818:	4299      	cmp	r1, r3
    d81a:	d8f9      	bhi.n	d810 <__copybits+0x20>
    d81c:	1a8a      	subs	r2, r1, r2
    d81e:	f1a2 0315 	sub.w	r3, r2, #21
    d822:	f023 0303 	bic.w	r3, r3, #3
    d826:	3304      	adds	r3, #4
    d828:	4418      	add	r0, r3
    d82a:	4584      	cmp	ip, r0
    d82c:	d904      	bls.n	d838 <__copybits+0x48>
    d82e:	2300      	movs	r3, #0
    d830:	f840 3b04 	str.w	r3, [r0], #4
    d834:	4584      	cmp	ip, r0
    d836:	d8fb      	bhi.n	d830 <__copybits+0x40>
    d838:	bd10      	pop	{r4, pc}
    d83a:	4584      	cmp	ip, r0
    d83c:	d905      	bls.n	d84a <__copybits+0x5a>
    d83e:	2300      	movs	r3, #0
    d840:	f840 3b04 	str.w	r3, [r0], #4
    d844:	4584      	cmp	ip, r0
    d846:	d8fb      	bhi.n	d840 <__copybits+0x50>
    d848:	4770      	bx	lr
    d84a:	4770      	bx	lr

0000d84c <__any_on>:
    d84c:	6903      	ldr	r3, [r0, #16]
    d84e:	114a      	asrs	r2, r1, #5
    d850:	4293      	cmp	r3, r2
    d852:	f100 0014 	add.w	r0, r0, #20
    d856:	da09      	bge.n	d86c <__any_on+0x20>
    d858:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d85c:	e002      	b.n	d864 <__any_on+0x18>
    d85e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d862:	b9c2      	cbnz	r2, d896 <__any_on+0x4a>
    d864:	4283      	cmp	r3, r0
    d866:	d8fa      	bhi.n	d85e <__any_on+0x12>
    d868:	2000      	movs	r0, #0
    d86a:	4770      	bx	lr
    d86c:	dd10      	ble.n	d890 <__any_on+0x44>
    d86e:	f011 011f 	ands.w	r1, r1, #31
    d872:	d00d      	beq.n	d890 <__any_on+0x44>
    d874:	b410      	push	{r4}
    d876:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    d87a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d87e:	fa24 f201 	lsr.w	r2, r4, r1
    d882:	408a      	lsls	r2, r1
    d884:	4294      	cmp	r4, r2
    d886:	d00c      	beq.n	d8a2 <__any_on+0x56>
    d888:	2001      	movs	r0, #1
    d88a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d88e:	4770      	bx	lr
    d890:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d894:	e7e6      	b.n	d864 <__any_on+0x18>
    d896:	2001      	movs	r0, #1
    d898:	4770      	bx	lr
    d89a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d89e:	2a00      	cmp	r2, #0
    d8a0:	d1f2      	bne.n	d888 <__any_on+0x3c>
    d8a2:	4283      	cmp	r3, r0
    d8a4:	d8f9      	bhi.n	d89a <__any_on+0x4e>
    d8a6:	2000      	movs	r0, #0
    d8a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    d8ac:	4770      	bx	lr
    d8ae:	bf00      	nop

0000d8b0 <__ascii_wctomb>:
    d8b0:	b149      	cbz	r1, d8c6 <__ascii_wctomb+0x16>
    d8b2:	2aff      	cmp	r2, #255	; 0xff
    d8b4:	d802      	bhi.n	d8bc <__ascii_wctomb+0xc>
    d8b6:	700a      	strb	r2, [r1, #0]
    d8b8:	2001      	movs	r0, #1
    d8ba:	4770      	bx	lr
    d8bc:	238a      	movs	r3, #138	; 0x8a
    d8be:	6003      	str	r3, [r0, #0]
    d8c0:	f04f 30ff 	mov.w	r0, #4294967295
    d8c4:	4770      	bx	lr
    d8c6:	4608      	mov	r0, r1
    d8c8:	4770      	bx	lr
    d8ca:	bf00      	nop
    d8cc:	0000      	movs	r0, r0
	...

0000d8d0 <_svfprintf_r>:
    d8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8d4:	ed2d 8b08 	vpush	{d8-d11}
    d8d8:	b0d1      	sub	sp, #324	; 0x144
    d8da:	460c      	mov	r4, r1
    d8dc:	ee0b 1a10 	vmov	s22, r1
    d8e0:	4690      	mov	r8, r2
    d8e2:	9308      	str	r3, [sp, #32]
    d8e4:	4683      	mov	fp, r0
    d8e6:	f003 fb59 	bl	10f9c <_localeconv_r>
    d8ea:	6803      	ldr	r3, [r0, #0]
    d8ec:	9312      	str	r3, [sp, #72]	; 0x48
    d8ee:	4618      	mov	r0, r3
    d8f0:	f7fe fc66 	bl	c1c0 <strlen>
    d8f4:	af20      	add	r7, sp, #128	; 0x80
    d8f6:	9010      	str	r0, [sp, #64]	; 0x40
    d8f8:	2208      	movs	r2, #8
    d8fa:	2100      	movs	r1, #0
    d8fc:	4638      	mov	r0, r7
    d8fe:	f7fe f8bd 	bl	ba7c <memset>
    d902:	89a3      	ldrh	r3, [r4, #12]
    d904:	061b      	lsls	r3, r3, #24
    d906:	d503      	bpl.n	d910 <_svfprintf_r+0x40>
    d908:	6923      	ldr	r3, [r4, #16]
    d90a:	2b00      	cmp	r3, #0
    d90c:	f000 8755 	beq.w	e7ba <_svfprintf_r+0xeea>
    d910:	2300      	movs	r3, #0
    d912:	ed9f 8b83 	vldr	d8, [pc, #524]	; db20 <_svfprintf_r+0x250>
    d916:	ed9f 9b84 	vldr	d9, [pc, #528]	; db28 <_svfprintf_r+0x258>
    d91a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    d91e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    d922:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    d926:	aa27      	add	r2, sp, #156	; 0x9c
    d928:	930e      	str	r3, [sp, #56]	; 0x38
    d92a:	9224      	str	r2, [sp, #144]	; 0x90
    d92c:	4692      	mov	sl, r2
    d92e:	9311      	str	r3, [sp, #68]	; 0x44
    d930:	9304      	str	r3, [sp, #16]
    d932:	4644      	mov	r4, r8
    d934:	46a1      	mov	r9, r4
    d936:	4b7e      	ldr	r3, [pc, #504]	; (db30 <_svfprintf_r+0x260>)
    d938:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    d93c:	f7fe f968 	bl	bc10 <__locale_mb_cur_max>
    d940:	464a      	mov	r2, r9
    d942:	4603      	mov	r3, r0
    d944:	a91c      	add	r1, sp, #112	; 0x70
    d946:	9700      	str	r7, [sp, #0]
    d948:	4658      	mov	r0, fp
    d94a:	47a8      	blx	r5
    d94c:	2800      	cmp	r0, #0
    d94e:	f000 80b0 	beq.w	dab2 <_svfprintf_r+0x1e2>
    d952:	f2c0 80a6 	blt.w	daa2 <_svfprintf_r+0x1d2>
    d956:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d958:	2a25      	cmp	r2, #37	; 0x25
    d95a:	4603      	mov	r3, r0
    d95c:	d001      	beq.n	d962 <_svfprintf_r+0x92>
    d95e:	4499      	add	r9, r3
    d960:	e7e9      	b.n	d936 <_svfprintf_r+0x66>
    d962:	ebb9 0504 	subs.w	r5, r9, r4
    d966:	4606      	mov	r6, r0
    d968:	f040 80a7 	bne.w	daba <_svfprintf_r+0x1ea>
    d96c:	2300      	movs	r3, #0
    d96e:	f04f 32ff 	mov.w	r2, #4294967295
    d972:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d976:	4698      	mov	r8, r3
    d978:	9306      	str	r3, [sp, #24]
    d97a:	f109 0901 	add.w	r9, r9, #1
    d97e:	f899 3000 	ldrb.w	r3, [r9]
    d982:	9203      	str	r2, [sp, #12]
    d984:	252b      	movs	r5, #43	; 0x2b
    d986:	2620      	movs	r6, #32
    d988:	f109 0901 	add.w	r9, r9, #1
    d98c:	f1a3 0220 	sub.w	r2, r3, #32
    d990:	2a5a      	cmp	r2, #90	; 0x5a
    d992:	f200 80cf 	bhi.w	db34 <_svfprintf_r+0x264>
    d996:	e8df f012 	tbh	[pc, r2, lsl #1]
    d99a:	02e8      	.short	0x02e8
    d99c:	00cd00cd 	.word	0x00cd00cd
    d9a0:	00cd02e3 	.word	0x00cd02e3
    d9a4:	00cd00cd 	.word	0x00cd00cd
    d9a8:	00cd006a 	.word	0x00cd006a
    d9ac:	020500cd 	.word	0x020500cd
    d9b0:	00cd0284 	.word	0x00cd0284
    d9b4:	02c90210 	.word	0x02c90210
    d9b8:	02bd00cd 	.word	0x02bd00cd
    d9bc:	005b005b 	.word	0x005b005b
    d9c0:	005b005b 	.word	0x005b005b
    d9c4:	005b005b 	.word	0x005b005b
    d9c8:	005b005b 	.word	0x005b005b
    d9cc:	00cd005b 	.word	0x00cd005b
    d9d0:	00cd00cd 	.word	0x00cd00cd
    d9d4:	00cd00cd 	.word	0x00cd00cd
    d9d8:	00cd00cd 	.word	0x00cd00cd
    d9dc:	00cd0153 	.word	0x00cd0153
    d9e0:	021a0183 	.word	0x021a0183
    d9e4:	01530153 	.word	0x01530153
    d9e8:	00cd0153 	.word	0x00cd0153
    d9ec:	00cd00cd 	.word	0x00cd00cd
    d9f0:	021500cd 	.word	0x021500cd
    d9f4:	00cd00cd 	.word	0x00cd00cd
    d9f8:	00cd0296 	.word	0x00cd0296
    d9fc:	00cd00cd 	.word	0x00cd00cd
    da00:	00cd01ab 	.word	0x00cd01ab
    da04:	00cd02aa 	.word	0x00cd02aa
    da08:	06e300cd 	.word	0x06e300cd
    da0c:	00cd00cd 	.word	0x00cd00cd
    da10:	00cd00cd 	.word	0x00cd00cd
    da14:	00cd00cd 	.word	0x00cd00cd
    da18:	00cd00cd 	.word	0x00cd00cd
    da1c:	00cd0153 	.word	0x00cd0153
    da20:	01de0183 	.word	0x01de0183
    da24:	01530153 	.word	0x01530153
    da28:	02770153 	.word	0x02770153
    da2c:	007f01de 	.word	0x007f01de
    da30:	028900cd 	.word	0x028900cd
    da34:	025f00cd 	.word	0x025f00cd
    da38:	022f06e0 	.word	0x022f06e0
    da3c:	00cd007f 	.word	0x00cd007f
    da40:	007c01ab 	.word	0x007c01ab
    da44:	00cd06b8 	.word	0x00cd06b8
    da48:	06bd00cd 	.word	0x06bd00cd
    da4c:	007c00cd 	.word	0x007c00cd
    da50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    da54:	2100      	movs	r1, #0
    da56:	f819 3b01 	ldrb.w	r3, [r9], #1
    da5a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    da5e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    da62:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    da66:	2a09      	cmp	r2, #9
    da68:	d9f5      	bls.n	da56 <_svfprintf_r+0x186>
    da6a:	9106      	str	r1, [sp, #24]
    da6c:	e78e      	b.n	d98c <_svfprintf_r+0xbc>
    da6e:	4658      	mov	r0, fp
    da70:	f003 fa94 	bl	10f9c <_localeconv_r>
    da74:	6843      	ldr	r3, [r0, #4]
    da76:	9315      	str	r3, [sp, #84]	; 0x54
    da78:	4618      	mov	r0, r3
    da7a:	f7fe fba1 	bl	c1c0 <strlen>
    da7e:	9016      	str	r0, [sp, #88]	; 0x58
    da80:	4658      	mov	r0, fp
    da82:	f003 fa8b 	bl	10f9c <_localeconv_r>
    da86:	6883      	ldr	r3, [r0, #8]
    da88:	9313      	str	r3, [sp, #76]	; 0x4c
    da8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da8c:	2b00      	cmp	r3, #0
    da8e:	f040 862d 	bne.w	e6ec <_svfprintf_r+0xe1c>
    da92:	f899 3000 	ldrb.w	r3, [r9]
    da96:	e777      	b.n	d988 <_svfprintf_r+0xb8>
    da98:	f899 3000 	ldrb.w	r3, [r9]
    da9c:	f048 0820 	orr.w	r8, r8, #32
    daa0:	e772      	b.n	d988 <_svfprintf_r+0xb8>
    daa2:	2208      	movs	r2, #8
    daa4:	2100      	movs	r1, #0
    daa6:	4638      	mov	r0, r7
    daa8:	f7fd ffe8 	bl	ba7c <memset>
    daac:	2301      	movs	r3, #1
    daae:	4499      	add	r9, r3
    dab0:	e741      	b.n	d936 <_svfprintf_r+0x66>
    dab2:	ebb9 0504 	subs.w	r5, r9, r4
    dab6:	4606      	mov	r6, r0
    dab8:	d011      	beq.n	dade <_svfprintf_r+0x20e>
    daba:	9b26      	ldr	r3, [sp, #152]	; 0x98
    dabc:	442b      	add	r3, r5
    dabe:	9326      	str	r3, [sp, #152]	; 0x98
    dac0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dac2:	3301      	adds	r3, #1
    dac4:	2b07      	cmp	r3, #7
    dac6:	e9ca 4500 	strd	r4, r5, [sl]
    daca:	9325      	str	r3, [sp, #148]	; 0x94
    dacc:	dc1c      	bgt.n	db08 <_svfprintf_r+0x238>
    dace:	f10a 0a08 	add.w	sl, sl, #8
    dad2:	9b04      	ldr	r3, [sp, #16]
    dad4:	442b      	add	r3, r5
    dad6:	9304      	str	r3, [sp, #16]
    dad8:	2e00      	cmp	r6, #0
    dada:	f47f af47 	bne.w	d96c <_svfprintf_r+0x9c>
    dade:	9b26      	ldr	r3, [sp, #152]	; 0x98
    dae0:	2b00      	cmp	r3, #0
    dae2:	f041 820b 	bne.w	eefc <_svfprintf_r+0x162c>
    dae6:	ee1b 3a10 	vmov	r3, s22
    daea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    daee:	f013 0f40 	tst.w	r3, #64	; 0x40
    daf2:	9b04      	ldr	r3, [sp, #16]
    daf4:	bf18      	it	ne
    daf6:	f04f 33ff 	movne.w	r3, #4294967295
    dafa:	9304      	str	r3, [sp, #16]
    dafc:	9804      	ldr	r0, [sp, #16]
    dafe:	b051      	add	sp, #324	; 0x144
    db00:	ecbd 8b08 	vpop	{d8-d11}
    db04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db08:	ee1b 1a10 	vmov	r1, s22
    db0c:	aa24      	add	r2, sp, #144	; 0x90
    db0e:	4658      	mov	r0, fp
    db10:	f004 fd6a 	bl	125e8 <__ssprint_r>
    db14:	2800      	cmp	r0, #0
    db16:	d1e6      	bne.n	dae6 <_svfprintf_r+0x216>
    db18:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db1c:	e7d9      	b.n	dad2 <_svfprintf_r+0x202>
    db1e:	bf00      	nop
	...
    db28:	ffffffff 	.word	0xffffffff
    db2c:	7fefffff 	.word	0x7fefffff
    db30:	200085f4 	.word	0x200085f4
    db34:	930b      	str	r3, [sp, #44]	; 0x2c
    db36:	2b00      	cmp	r3, #0
    db38:	d0d1      	beq.n	dade <_svfprintf_r+0x20e>
    db3a:	2100      	movs	r1, #0
    db3c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    db40:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    db44:	2301      	movs	r3, #1
    db46:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    db4a:	9302      	str	r3, [sp, #8]
    db4c:	9107      	str	r1, [sp, #28]
    db4e:	9305      	str	r3, [sp, #20]
    db50:	9103      	str	r1, [sp, #12]
    db52:	910f      	str	r1, [sp, #60]	; 0x3c
    db54:	ac37      	add	r4, sp, #220	; 0xdc
    db56:	f018 0302 	ands.w	r3, r8, #2
    db5a:	9309      	str	r3, [sp, #36]	; 0x24
    db5c:	d002      	beq.n	db64 <_svfprintf_r+0x294>
    db5e:	9b02      	ldr	r3, [sp, #8]
    db60:	3302      	adds	r3, #2
    db62:	9302      	str	r3, [sp, #8]
    db64:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    db68:	930a      	str	r3, [sp, #40]	; 0x28
    db6a:	d105      	bne.n	db78 <_svfprintf_r+0x2a8>
    db6c:	9b06      	ldr	r3, [sp, #24]
    db6e:	9a02      	ldr	r2, [sp, #8]
    db70:	1a9d      	subs	r5, r3, r2
    db72:	2d00      	cmp	r5, #0
    db74:	f300 8369 	bgt.w	e24a <_svfprintf_r+0x97a>
    db78:	9a26      	ldr	r2, [sp, #152]	; 0x98
    db7a:	b189      	cbz	r1, dba0 <_svfprintf_r+0x2d0>
    db7c:	9925      	ldr	r1, [sp, #148]	; 0x94
    db7e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    db82:	3101      	adds	r1, #1
    db84:	3201      	adds	r2, #1
    db86:	f8ca 0000 	str.w	r0, [sl]
    db8a:	2907      	cmp	r1, #7
    db8c:	f04f 0001 	mov.w	r0, #1
    db90:	9226      	str	r2, [sp, #152]	; 0x98
    db92:	9125      	str	r1, [sp, #148]	; 0x94
    db94:	f8ca 0004 	str.w	r0, [sl, #4]
    db98:	f300 83a2 	bgt.w	e2e0 <_svfprintf_r+0xa10>
    db9c:	f10a 0a08 	add.w	sl, sl, #8
    dba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dba2:	b183      	cbz	r3, dbc6 <_svfprintf_r+0x2f6>
    dba4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dba6:	a91a      	add	r1, sp, #104	; 0x68
    dba8:	3301      	adds	r3, #1
    dbaa:	3202      	adds	r2, #2
    dbac:	f8ca 1000 	str.w	r1, [sl]
    dbb0:	2b07      	cmp	r3, #7
    dbb2:	f04f 0102 	mov.w	r1, #2
    dbb6:	9226      	str	r2, [sp, #152]	; 0x98
    dbb8:	9325      	str	r3, [sp, #148]	; 0x94
    dbba:	f8ca 1004 	str.w	r1, [sl, #4]
    dbbe:	f300 83a3 	bgt.w	e308 <_svfprintf_r+0xa38>
    dbc2:	f10a 0a08 	add.w	sl, sl, #8
    dbc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dbc8:	2b80      	cmp	r3, #128	; 0x80
    dbca:	f000 826c 	beq.w	e0a6 <_svfprintf_r+0x7d6>
    dbce:	9b03      	ldr	r3, [sp, #12]
    dbd0:	9905      	ldr	r1, [sp, #20]
    dbd2:	1a5d      	subs	r5, r3, r1
    dbd4:	2d00      	cmp	r5, #0
    dbd6:	f300 82a5 	bgt.w	e124 <_svfprintf_r+0x854>
    dbda:	f418 7f80 	tst.w	r8, #256	; 0x100
    dbde:	f040 820d 	bne.w	dffc <_svfprintf_r+0x72c>
    dbe2:	9b05      	ldr	r3, [sp, #20]
    dbe4:	f8ca 3004 	str.w	r3, [sl, #4]
    dbe8:	441a      	add	r2, r3
    dbea:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dbec:	f8ca 4000 	str.w	r4, [sl]
    dbf0:	3301      	adds	r3, #1
    dbf2:	2b07      	cmp	r3, #7
    dbf4:	9226      	str	r2, [sp, #152]	; 0x98
    dbf6:	9325      	str	r3, [sp, #148]	; 0x94
    dbf8:	f300 831b 	bgt.w	e232 <_svfprintf_r+0x962>
    dbfc:	f10a 0a08 	add.w	sl, sl, #8
    dc00:	f018 0f04 	tst.w	r8, #4
    dc04:	d005      	beq.n	dc12 <_svfprintf_r+0x342>
    dc06:	9b06      	ldr	r3, [sp, #24]
    dc08:	9902      	ldr	r1, [sp, #8]
    dc0a:	1a5c      	subs	r4, r3, r1
    dc0c:	2c00      	cmp	r4, #0
    dc0e:	f300 8388 	bgt.w	e322 <_svfprintf_r+0xa52>
    dc12:	9b04      	ldr	r3, [sp, #16]
    dc14:	9906      	ldr	r1, [sp, #24]
    dc16:	9802      	ldr	r0, [sp, #8]
    dc18:	4281      	cmp	r1, r0
    dc1a:	bfac      	ite	ge
    dc1c:	185b      	addge	r3, r3, r1
    dc1e:	181b      	addlt	r3, r3, r0
    dc20:	9304      	str	r3, [sp, #16]
    dc22:	2a00      	cmp	r2, #0
    dc24:	f040 82b0 	bne.w	e188 <_svfprintf_r+0x8b8>
    dc28:	2300      	movs	r3, #0
    dc2a:	9325      	str	r3, [sp, #148]	; 0x94
    dc2c:	9b07      	ldr	r3, [sp, #28]
    dc2e:	b11b      	cbz	r3, dc38 <_svfprintf_r+0x368>
    dc30:	9907      	ldr	r1, [sp, #28]
    dc32:	4658      	mov	r0, fp
    dc34:	f7fe fbd6 	bl	c3e4 <_free_r>
    dc38:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dc3c:	464c      	mov	r4, r9
    dc3e:	e679      	b.n	d934 <_svfprintf_r+0x64>
    dc40:	930b      	str	r3, [sp, #44]	; 0x2c
    dc42:	9b08      	ldr	r3, [sp, #32]
    dc44:	3307      	adds	r3, #7
    dc46:	f023 0307 	bic.w	r3, r3, #7
    dc4a:	ecb3 8b02 	vldmia	r3!, {d8}
    dc4e:	eeb0 7bc8 	vabs.f64	d7, d8
    dc52:	eeb4 7b49 	vcmp.f64	d7, d9
    dc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc5a:	9308      	str	r3, [sp, #32]
    dc5c:	f340 84e9 	ble.w	e632 <_svfprintf_r+0xd62>
    dc60:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    dc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc68:	f101 8059 	bmi.w	ed1e <_svfprintf_r+0x144e>
    dc6c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dc70:	4cab      	ldr	r4, [pc, #684]	; (df20 <_svfprintf_r+0x650>)
    dc72:	4bac      	ldr	r3, [pc, #688]	; (df24 <_svfprintf_r+0x654>)
    dc74:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    dc78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dc7a:	2a47      	cmp	r2, #71	; 0x47
    dc7c:	bfc8      	it	gt
    dc7e:	461c      	movgt	r4, r3
    dc80:	2300      	movs	r3, #0
    dc82:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    dc86:	2203      	movs	r2, #3
    dc88:	9307      	str	r3, [sp, #28]
    dc8a:	9202      	str	r2, [sp, #8]
    dc8c:	9205      	str	r2, [sp, #20]
    dc8e:	9303      	str	r3, [sp, #12]
    dc90:	930f      	str	r3, [sp, #60]	; 0x3c
    dc92:	2900      	cmp	r1, #0
    dc94:	f43f af5f 	beq.w	db56 <_svfprintf_r+0x286>
    dc98:	9b02      	ldr	r3, [sp, #8]
    dc9a:	3301      	adds	r3, #1
    dc9c:	9302      	str	r3, [sp, #8]
    dc9e:	e75a      	b.n	db56 <_svfprintf_r+0x286>
    dca0:	2b43      	cmp	r3, #67	; 0x43
    dca2:	930b      	str	r3, [sp, #44]	; 0x2c
    dca4:	d003      	beq.n	dcae <_svfprintf_r+0x3de>
    dca6:	f018 0f10 	tst.w	r8, #16
    dcaa:	f000 855d 	beq.w	e768 <_svfprintf_r+0xe98>
    dcae:	9d08      	ldr	r5, [sp, #32]
    dcb0:	2208      	movs	r2, #8
    dcb2:	2100      	movs	r1, #0
    dcb4:	a822      	add	r0, sp, #136	; 0x88
    dcb6:	ac37      	add	r4, sp, #220	; 0xdc
    dcb8:	f7fd fee0 	bl	ba7c <memset>
    dcbc:	ab22      	add	r3, sp, #136	; 0x88
    dcbe:	f855 2b04 	ldr.w	r2, [r5], #4
    dcc2:	4621      	mov	r1, r4
    dcc4:	4658      	mov	r0, fp
    dcc6:	f004 fb65 	bl	12394 <_wcrtomb_r>
    dcca:	4603      	mov	r3, r0
    dccc:	3301      	adds	r3, #1
    dcce:	9005      	str	r0, [sp, #20]
    dcd0:	f001 82ee 	beq.w	f2b0 <_svfprintf_r+0x19e0>
    dcd4:	9b05      	ldr	r3, [sp, #20]
    dcd6:	9508      	str	r5, [sp, #32]
    dcd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    dcdc:	9302      	str	r3, [sp, #8]
    dcde:	2100      	movs	r1, #0
    dce0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    dce4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    dce8:	9107      	str	r1, [sp, #28]
    dcea:	9103      	str	r1, [sp, #12]
    dcec:	910f      	str	r1, [sp, #60]	; 0x3c
    dcee:	e732      	b.n	db56 <_svfprintf_r+0x286>
    dcf0:	930b      	str	r3, [sp, #44]	; 0x2c
    dcf2:	9b08      	ldr	r3, [sp, #32]
    dcf4:	461a      	mov	r2, r3
    dcf6:	2300      	movs	r3, #0
    dcf8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    dcfc:	4613      	mov	r3, r2
    dcfe:	f853 4b04 	ldr.w	r4, [r3], #4
    dd02:	9308      	str	r3, [sp, #32]
    dd04:	2c00      	cmp	r4, #0
    dd06:	f000 8548 	beq.w	e79a <_svfprintf_r+0xeca>
    dd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd0c:	2b53      	cmp	r3, #83	; 0x53
    dd0e:	f000 86ec 	beq.w	eaea <_svfprintf_r+0x121a>
    dd12:	f018 0310 	ands.w	r3, r8, #16
    dd16:	930c      	str	r3, [sp, #48]	; 0x30
    dd18:	f040 86e7 	bne.w	eaea <_svfprintf_r+0x121a>
    dd1c:	9b03      	ldr	r3, [sp, #12]
    dd1e:	1c5d      	adds	r5, r3, #1
    dd20:	f001 80e5 	beq.w	eeee <_svfprintf_r+0x161e>
    dd24:	990c      	ldr	r1, [sp, #48]	; 0x30
    dd26:	461a      	mov	r2, r3
    dd28:	4620      	mov	r0, r4
    dd2a:	f7fe f9e9 	bl	c100 <memchr>
    dd2e:	9007      	str	r0, [sp, #28]
    dd30:	2800      	cmp	r0, #0
    dd32:	f001 8328 	beq.w	f386 <_svfprintf_r+0x1ab6>
    dd36:	9b07      	ldr	r3, [sp, #28]
    dd38:	1b1a      	subs	r2, r3, r4
    dd3a:	9205      	str	r2, [sp, #20]
    dd3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dd3e:	9303      	str	r3, [sp, #12]
    dd40:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    dd44:	930f      	str	r3, [sp, #60]	; 0x3c
    dd46:	930d      	str	r3, [sp, #52]	; 0x34
    dd48:	9307      	str	r3, [sp, #28]
    dd4a:	2373      	movs	r3, #115	; 0x73
    dd4c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dd50:	9202      	str	r2, [sp, #8]
    dd52:	930b      	str	r3, [sp, #44]	; 0x2c
    dd54:	e79d      	b.n	dc92 <_svfprintf_r+0x3c2>
    dd56:	f018 0f20 	tst.w	r8, #32
    dd5a:	930b      	str	r3, [sp, #44]	; 0x2c
    dd5c:	9b08      	ldr	r3, [sp, #32]
    dd5e:	d03d      	beq.n	dddc <_svfprintf_r+0x50c>
    dd60:	3307      	adds	r3, #7
    dd62:	f023 0307 	bic.w	r3, r3, #7
    dd66:	461a      	mov	r2, r3
    dd68:	4611      	mov	r1, r2
    dd6a:	685b      	ldr	r3, [r3, #4]
    dd6c:	f851 2b08 	ldr.w	r2, [r1], #8
    dd70:	9108      	str	r1, [sp, #32]
    dd72:	4619      	mov	r1, r3
    dd74:	2b00      	cmp	r3, #0
    dd76:	f2c0 840c 	blt.w	e592 <_svfprintf_r+0xcc2>
    dd7a:	9b03      	ldr	r3, [sp, #12]
    dd7c:	3301      	adds	r3, #1
    dd7e:	f000 829e 	beq.w	e2be <_svfprintf_r+0x9ee>
    dd82:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    dd86:	ea52 0301 	orrs.w	r3, r2, r1
    dd8a:	9002      	str	r0, [sp, #8]
    dd8c:	f040 8299 	bne.w	e2c2 <_svfprintf_r+0x9f2>
    dd90:	9b03      	ldr	r3, [sp, #12]
    dd92:	2b00      	cmp	r3, #0
    dd94:	f040 829a 	bne.w	e2cc <_svfprintf_r+0x9fc>
    dd98:	4680      	mov	r8, r0
    dd9a:	2300      	movs	r3, #0
    dd9c:	9303      	str	r3, [sp, #12]
    dd9e:	9305      	str	r3, [sp, #20]
    dda0:	ac50      	add	r4, sp, #320	; 0x140
    dda2:	e106      	b.n	dfb2 <_svfprintf_r+0x6e2>
    dda4:	9b08      	ldr	r3, [sp, #32]
    dda6:	f853 2b04 	ldr.w	r2, [r3], #4
    ddaa:	9206      	str	r2, [sp, #24]
    ddac:	2a00      	cmp	r2, #0
    ddae:	f280 8419 	bge.w	e5e4 <_svfprintf_r+0xd14>
    ddb2:	9a06      	ldr	r2, [sp, #24]
    ddb4:	9308      	str	r3, [sp, #32]
    ddb6:	4252      	negs	r2, r2
    ddb8:	9206      	str	r2, [sp, #24]
    ddba:	f899 3000 	ldrb.w	r3, [r9]
    ddbe:	f048 0804 	orr.w	r8, r8, #4
    ddc2:	e5e1      	b.n	d988 <_svfprintf_r+0xb8>
    ddc4:	f899 3000 	ldrb.w	r3, [r9]
    ddc8:	f048 0808 	orr.w	r8, r8, #8
    ddcc:	e5dc      	b.n	d988 <_svfprintf_r+0xb8>
    ddce:	f048 0810 	orr.w	r8, r8, #16
    ddd2:	f018 0f20 	tst.w	r8, #32
    ddd6:	930b      	str	r3, [sp, #44]	; 0x2c
    ddd8:	9b08      	ldr	r3, [sp, #32]
    ddda:	d1c1      	bne.n	dd60 <_svfprintf_r+0x490>
    dddc:	f018 0f10 	tst.w	r8, #16
    dde0:	f040 840b 	bne.w	e5fa <_svfprintf_r+0xd2a>
    dde4:	f018 0f40 	tst.w	r8, #64	; 0x40
    dde8:	f000 8403 	beq.w	e5f2 <_svfprintf_r+0xd22>
    ddec:	f933 2b04 	ldrsh.w	r2, [r3], #4
    ddf0:	9308      	str	r3, [sp, #32]
    ddf2:	17d1      	asrs	r1, r2, #31
    ddf4:	460b      	mov	r3, r1
    ddf6:	e7bd      	b.n	dd74 <_svfprintf_r+0x4a4>
    ddf8:	9b08      	ldr	r3, [sp, #32]
    ddfa:	f048 0202 	orr.w	r2, r8, #2
    ddfe:	9202      	str	r2, [sp, #8]
    de00:	f853 2b04 	ldr.w	r2, [r3], #4
    de04:	9308      	str	r3, [sp, #32]
    de06:	f647 0330 	movw	r3, #30768	; 0x7830
    de0a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    de0e:	2078      	movs	r0, #120	; 0x78
    de10:	4b45      	ldr	r3, [pc, #276]	; (df28 <_svfprintf_r+0x658>)
    de12:	9311      	str	r3, [sp, #68]	; 0x44
    de14:	2100      	movs	r1, #0
    de16:	2302      	movs	r3, #2
    de18:	900b      	str	r0, [sp, #44]	; 0x2c
    de1a:	2000      	movs	r0, #0
    de1c:	9c03      	ldr	r4, [sp, #12]
    de1e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    de22:	1c60      	adds	r0, r4, #1
    de24:	f000 80ad 	beq.w	df82 <_svfprintf_r+0x6b2>
    de28:	9802      	ldr	r0, [sp, #8]
    de2a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    de2e:	ea52 0001 	orrs.w	r0, r2, r1
    de32:	f040 80a4 	bne.w	df7e <_svfprintf_r+0x6ae>
    de36:	2c00      	cmp	r4, #0
    de38:	f040 86ae 	bne.w	eb98 <_svfprintf_r+0x12c8>
    de3c:	2b00      	cmp	r3, #0
    de3e:	d1ac      	bne.n	dd9a <_svfprintf_r+0x4ca>
    de40:	9b02      	ldr	r3, [sp, #8]
    de42:	f013 0301 	ands.w	r3, r3, #1
    de46:	9305      	str	r3, [sp, #20]
    de48:	f000 83d1 	beq.w	e5ee <_svfprintf_r+0xd1e>
    de4c:	2330      	movs	r3, #48	; 0x30
    de4e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    de52:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    de56:	e0ac      	b.n	dfb2 <_svfprintf_r+0x6e2>
    de58:	f018 0f20 	tst.w	r8, #32
    de5c:	f040 83d4 	bne.w	e608 <_svfprintf_r+0xd38>
    de60:	f018 0f10 	tst.w	r8, #16
    de64:	f040 869f 	bne.w	eba6 <_svfprintf_r+0x12d6>
    de68:	f018 0f40 	tst.w	r8, #64	; 0x40
    de6c:	f040 8797 	bne.w	ed9e <_svfprintf_r+0x14ce>
    de70:	f418 7f00 	tst.w	r8, #512	; 0x200
    de74:	f000 8697 	beq.w	eba6 <_svfprintf_r+0x12d6>
    de78:	9b08      	ldr	r3, [sp, #32]
    de7a:	9904      	ldr	r1, [sp, #16]
    de7c:	f853 2b04 	ldr.w	r2, [r3], #4
    de80:	9308      	str	r3, [sp, #32]
    de82:	7011      	strb	r1, [r2, #0]
    de84:	464c      	mov	r4, r9
    de86:	e555      	b.n	d934 <_svfprintf_r+0x64>
    de88:	f899 3000 	ldrb.w	r3, [r9]
    de8c:	2b68      	cmp	r3, #104	; 0x68
    de8e:	bf03      	ittte	eq
    de90:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    de94:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    de98:	f109 0901 	addeq.w	r9, r9, #1
    de9c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    dea0:	e572      	b.n	d988 <_svfprintf_r+0xb8>
    dea2:	f899 3000 	ldrb.w	r3, [r9]
    dea6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    deaa:	e56d      	b.n	d988 <_svfprintf_r+0xb8>
    deac:	f899 3000 	ldrb.w	r3, [r9]
    deb0:	2b6c      	cmp	r3, #108	; 0x6c
    deb2:	bf03      	ittte	eq
    deb4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    deb8:	f048 0820 	orreq.w	r8, r8, #32
    debc:	f109 0901 	addeq.w	r9, r9, #1
    dec0:	f048 0810 	orrne.w	r8, r8, #16
    dec4:	e560      	b.n	d988 <_svfprintf_r+0xb8>
    dec6:	930b      	str	r3, [sp, #44]	; 0x2c
    dec8:	f048 0810 	orr.w	r8, r8, #16
    decc:	f018 0120 	ands.w	r1, r8, #32
    ded0:	f000 8351 	beq.w	e576 <_svfprintf_r+0xca6>
    ded4:	9b08      	ldr	r3, [sp, #32]
    ded6:	3307      	adds	r3, #7
    ded8:	f023 0307 	bic.w	r3, r3, #7
    dedc:	6859      	ldr	r1, [r3, #4]
    dede:	f853 2b08 	ldr.w	r2, [r3], #8
    dee2:	9308      	str	r3, [sp, #32]
    dee4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    dee8:	9302      	str	r3, [sp, #8]
    deea:	2300      	movs	r3, #0
    deec:	e795      	b.n	de1a <_svfprintf_r+0x54a>
    deee:	930b      	str	r3, [sp, #44]	; 0x2c
    def0:	f048 0310 	orr.w	r3, r8, #16
    def4:	9302      	str	r3, [sp, #8]
    def6:	9b02      	ldr	r3, [sp, #8]
    def8:	f013 0120 	ands.w	r1, r3, #32
    defc:	f000 8329 	beq.w	e552 <_svfprintf_r+0xc82>
    df00:	9b08      	ldr	r3, [sp, #32]
    df02:	3307      	adds	r3, #7
    df04:	f023 0307 	bic.w	r3, r3, #7
    df08:	6859      	ldr	r1, [r3, #4]
    df0a:	f853 2b08 	ldr.w	r2, [r3], #8
    df0e:	9308      	str	r3, [sp, #32]
    df10:	2301      	movs	r3, #1
    df12:	e782      	b.n	de1a <_svfprintf_r+0x54a>
    df14:	f899 3000 	ldrb.w	r3, [r9]
    df18:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    df1c:	e534      	b.n	d988 <_svfprintf_r+0xb8>
    df1e:	bf00      	nop
    df20:	20000c38 	.word	0x20000c38
    df24:	20000598 	.word	0x20000598
    df28:	20000c40 	.word	0x20000c40
    df2c:	4649      	mov	r1, r9
    df2e:	f811 3b01 	ldrb.w	r3, [r1], #1
    df32:	2b2a      	cmp	r3, #42	; 0x2a
    df34:	f001 8249 	beq.w	f3ca <_svfprintf_r+0x1afa>
    df38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    df3c:	2a09      	cmp	r2, #9
    df3e:	4689      	mov	r9, r1
    df40:	bf98      	it	ls
    df42:	2100      	movls	r1, #0
    df44:	f201 8144 	bhi.w	f1d0 <_svfprintf_r+0x1900>
    df48:	f819 3b01 	ldrb.w	r3, [r9], #1
    df4c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    df50:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    df54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    df58:	2a09      	cmp	r2, #9
    df5a:	d9f5      	bls.n	df48 <_svfprintf_r+0x678>
    df5c:	9103      	str	r1, [sp, #12]
    df5e:	e515      	b.n	d98c <_svfprintf_r+0xbc>
    df60:	f899 3000 	ldrb.w	r3, [r9]
    df64:	f048 0801 	orr.w	r8, r8, #1
    df68:	e50e      	b.n	d988 <_svfprintf_r+0xb8>
    df6a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    df6e:	2b00      	cmp	r3, #0
    df70:	f47f ad8f 	bne.w	da92 <_svfprintf_r+0x1c2>
    df74:	f899 3000 	ldrb.w	r3, [r9]
    df78:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    df7c:	e504      	b.n	d988 <_svfprintf_r+0xb8>
    df7e:	f8cd 8008 	str.w	r8, [sp, #8]
    df82:	2b01      	cmp	r3, #1
    df84:	f000 819d 	beq.w	e2c2 <_svfprintf_r+0x9f2>
    df88:	2b02      	cmp	r3, #2
    df8a:	ac50      	add	r4, sp, #320	; 0x140
    df8c:	d120      	bne.n	dfd0 <_svfprintf_r+0x700>
    df8e:	9811      	ldr	r0, [sp, #68]	; 0x44
    df90:	f002 030f 	and.w	r3, r2, #15
    df94:	0912      	lsrs	r2, r2, #4
    df96:	5cc3      	ldrb	r3, [r0, r3]
    df98:	f804 3d01 	strb.w	r3, [r4, #-1]!
    df9c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    dfa0:	0909      	lsrs	r1, r1, #4
    dfa2:	ea52 0301 	orrs.w	r3, r2, r1
    dfa6:	d1f3      	bne.n	df90 <_svfprintf_r+0x6c0>
    dfa8:	ab50      	add	r3, sp, #320	; 0x140
    dfaa:	1b1b      	subs	r3, r3, r4
    dfac:	f8dd 8008 	ldr.w	r8, [sp, #8]
    dfb0:	9305      	str	r3, [sp, #20]
    dfb2:	9a05      	ldr	r2, [sp, #20]
    dfb4:	9803      	ldr	r0, [sp, #12]
    dfb6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dfba:	4282      	cmp	r2, r0
    dfbc:	f04f 0300 	mov.w	r3, #0
    dfc0:	bfb8      	it	lt
    dfc2:	4602      	movlt	r2, r0
    dfc4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    dfc8:	9307      	str	r3, [sp, #28]
    dfca:	9202      	str	r2, [sp, #8]
    dfcc:	930f      	str	r3, [sp, #60]	; 0x3c
    dfce:	e660      	b.n	dc92 <_svfprintf_r+0x3c2>
    dfd0:	f002 0307 	and.w	r3, r2, #7
    dfd4:	08d2      	lsrs	r2, r2, #3
    dfd6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    dfda:	08c9      	lsrs	r1, r1, #3
    dfdc:	3330      	adds	r3, #48	; 0x30
    dfde:	ea52 0501 	orrs.w	r5, r2, r1
    dfe2:	4620      	mov	r0, r4
    dfe4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    dfe8:	d1f2      	bne.n	dfd0 <_svfprintf_r+0x700>
    dfea:	9a02      	ldr	r2, [sp, #8]
    dfec:	07d1      	lsls	r1, r2, #31
    dfee:	f100 824d 	bmi.w	e48c <_svfprintf_r+0xbbc>
    dff2:	ab50      	add	r3, sp, #320	; 0x140
    dff4:	1b1b      	subs	r3, r3, r4
    dff6:	4690      	mov	r8, r2
    dff8:	9305      	str	r3, [sp, #20]
    dffa:	e7da      	b.n	dfb2 <_svfprintf_r+0x6e2>
    dffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dffe:	2b65      	cmp	r3, #101	; 0x65
    e000:	f340 80d4 	ble.w	e1ac <_svfprintf_r+0x8dc>
    e004:	eeb5 8b40 	vcmp.f64	d8, #0.0
    e008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e00c:	f040 81c1 	bne.w	e392 <_svfprintf_r+0xac2>
    e010:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e012:	49ba      	ldr	r1, [pc, #744]	; (e2fc <_svfprintf_r+0xa2c>)
    e014:	f8ca 1000 	str.w	r1, [sl]
    e018:	3301      	adds	r3, #1
    e01a:	3201      	adds	r2, #1
    e01c:	2101      	movs	r1, #1
    e01e:	2b07      	cmp	r3, #7
    e020:	9226      	str	r2, [sp, #152]	; 0x98
    e022:	9325      	str	r3, [sp, #148]	; 0x94
    e024:	f8ca 1004 	str.w	r1, [sl, #4]
    e028:	f300 8551 	bgt.w	eace <_svfprintf_r+0x11fe>
    e02c:	f10a 0a08 	add.w	sl, sl, #8
    e030:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e032:	990e      	ldr	r1, [sp, #56]	; 0x38
    e034:	428b      	cmp	r3, r1
    e036:	f280 82d0 	bge.w	e5da <_svfprintf_r+0xd0a>
    e03a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e03c:	9912      	ldr	r1, [sp, #72]	; 0x48
    e03e:	441a      	add	r2, r3
    e040:	e9ca 1300 	strd	r1, r3, [sl]
    e044:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e046:	9226      	str	r2, [sp, #152]	; 0x98
    e048:	3301      	adds	r3, #1
    e04a:	2b07      	cmp	r3, #7
    e04c:	9325      	str	r3, [sp, #148]	; 0x94
    e04e:	f300 8397 	bgt.w	e780 <_svfprintf_r+0xeb0>
    e052:	f10a 0a08 	add.w	sl, sl, #8
    e056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e058:	1e5c      	subs	r4, r3, #1
    e05a:	2c00      	cmp	r4, #0
    e05c:	f77f add0 	ble.w	dc00 <_svfprintf_r+0x330>
    e060:	2c10      	cmp	r4, #16
    e062:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e064:	f340 856e 	ble.w	eb44 <_svfprintf_r+0x1274>
    e068:	ee1b 6a10 	vmov	r6, s22
    e06c:	2510      	movs	r5, #16
    e06e:	e005      	b.n	e07c <_svfprintf_r+0x7ac>
    e070:	f10a 0a08 	add.w	sl, sl, #8
    e074:	3c10      	subs	r4, #16
    e076:	2c10      	cmp	r4, #16
    e078:	f340 8564 	ble.w	eb44 <_svfprintf_r+0x1274>
    e07c:	3301      	adds	r3, #1
    e07e:	49a0      	ldr	r1, [pc, #640]	; (e300 <_svfprintf_r+0xa30>)
    e080:	3210      	adds	r2, #16
    e082:	2b07      	cmp	r3, #7
    e084:	e9ca 1500 	strd	r1, r5, [sl]
    e088:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e08c:	ddf0      	ble.n	e070 <_svfprintf_r+0x7a0>
    e08e:	aa24      	add	r2, sp, #144	; 0x90
    e090:	4631      	mov	r1, r6
    e092:	4658      	mov	r0, fp
    e094:	f004 faa8 	bl	125e8 <__ssprint_r>
    e098:	2800      	cmp	r0, #0
    e09a:	d17e      	bne.n	e19a <_svfprintf_r+0x8ca>
    e09c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e0a0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0a4:	e7e6      	b.n	e074 <_svfprintf_r+0x7a4>
    e0a6:	9b06      	ldr	r3, [sp, #24]
    e0a8:	9902      	ldr	r1, [sp, #8]
    e0aa:	1a5d      	subs	r5, r3, r1
    e0ac:	2d00      	cmp	r5, #0
    e0ae:	f77f ad8e 	ble.w	dbce <_svfprintf_r+0x2fe>
    e0b2:	2d10      	cmp	r5, #16
    e0b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e0b6:	dd21      	ble.n	e0fc <_svfprintf_r+0x82c>
    e0b8:	9409      	str	r4, [sp, #36]	; 0x24
    e0ba:	2610      	movs	r6, #16
    e0bc:	ee1b 4a10 	vmov	r4, s22
    e0c0:	e004      	b.n	e0cc <_svfprintf_r+0x7fc>
    e0c2:	3d10      	subs	r5, #16
    e0c4:	2d10      	cmp	r5, #16
    e0c6:	f10a 0a08 	add.w	sl, sl, #8
    e0ca:	dd16      	ble.n	e0fa <_svfprintf_r+0x82a>
    e0cc:	3301      	adds	r3, #1
    e0ce:	498c      	ldr	r1, [pc, #560]	; (e300 <_svfprintf_r+0xa30>)
    e0d0:	3210      	adds	r2, #16
    e0d2:	2b07      	cmp	r3, #7
    e0d4:	e9ca 1600 	strd	r1, r6, [sl]
    e0d8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e0dc:	ddf1      	ble.n	e0c2 <_svfprintf_r+0x7f2>
    e0de:	aa24      	add	r2, sp, #144	; 0x90
    e0e0:	4621      	mov	r1, r4
    e0e2:	4658      	mov	r0, fp
    e0e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0e8:	f004 fa7e 	bl	125e8 <__ssprint_r>
    e0ec:	2800      	cmp	r0, #0
    e0ee:	d154      	bne.n	e19a <_svfprintf_r+0x8ca>
    e0f0:	3d10      	subs	r5, #16
    e0f2:	2d10      	cmp	r5, #16
    e0f4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e0f8:	dce8      	bgt.n	e0cc <_svfprintf_r+0x7fc>
    e0fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e0fc:	4980      	ldr	r1, [pc, #512]	; (e300 <_svfprintf_r+0xa30>)
    e0fe:	f8ca 5004 	str.w	r5, [sl, #4]
    e102:	3301      	adds	r3, #1
    e104:	442a      	add	r2, r5
    e106:	2b07      	cmp	r3, #7
    e108:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e10c:	f8ca 1000 	str.w	r1, [sl]
    e110:	f300 8526 	bgt.w	eb60 <_svfprintf_r+0x1290>
    e114:	9b03      	ldr	r3, [sp, #12]
    e116:	9905      	ldr	r1, [sp, #20]
    e118:	1a5d      	subs	r5, r3, r1
    e11a:	2d00      	cmp	r5, #0
    e11c:	f10a 0a08 	add.w	sl, sl, #8
    e120:	f77f ad5b 	ble.w	dbda <_svfprintf_r+0x30a>
    e124:	2d10      	cmp	r5, #16
    e126:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e128:	dd1f      	ble.n	e16a <_svfprintf_r+0x89a>
    e12a:	4651      	mov	r1, sl
    e12c:	2610      	movs	r6, #16
    e12e:	ee1b aa10 	vmov	sl, s22
    e132:	e004      	b.n	e13e <_svfprintf_r+0x86e>
    e134:	3d10      	subs	r5, #16
    e136:	2d10      	cmp	r5, #16
    e138:	f101 0108 	add.w	r1, r1, #8
    e13c:	dd14      	ble.n	e168 <_svfprintf_r+0x898>
    e13e:	3301      	adds	r3, #1
    e140:	486f      	ldr	r0, [pc, #444]	; (e300 <_svfprintf_r+0xa30>)
    e142:	3210      	adds	r2, #16
    e144:	2b07      	cmp	r3, #7
    e146:	e9c1 0600 	strd	r0, r6, [r1]
    e14a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e14e:	ddf1      	ble.n	e134 <_svfprintf_r+0x864>
    e150:	aa24      	add	r2, sp, #144	; 0x90
    e152:	4651      	mov	r1, sl
    e154:	4658      	mov	r0, fp
    e156:	f004 fa47 	bl	125e8 <__ssprint_r>
    e15a:	b9f0      	cbnz	r0, e19a <_svfprintf_r+0x8ca>
    e15c:	3d10      	subs	r5, #16
    e15e:	2d10      	cmp	r5, #16
    e160:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e164:	a927      	add	r1, sp, #156	; 0x9c
    e166:	dcea      	bgt.n	e13e <_svfprintf_r+0x86e>
    e168:	468a      	mov	sl, r1
    e16a:	3301      	adds	r3, #1
    e16c:	4964      	ldr	r1, [pc, #400]	; (e300 <_svfprintf_r+0xa30>)
    e16e:	f8ca 5004 	str.w	r5, [sl, #4]
    e172:	442a      	add	r2, r5
    e174:	2b07      	cmp	r3, #7
    e176:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e17a:	f8ca 1000 	str.w	r1, [sl]
    e17e:	f300 81da 	bgt.w	e536 <_svfprintf_r+0xc66>
    e182:	f10a 0a08 	add.w	sl, sl, #8
    e186:	e528      	b.n	dbda <_svfprintf_r+0x30a>
    e188:	ee1b 1a10 	vmov	r1, s22
    e18c:	aa24      	add	r2, sp, #144	; 0x90
    e18e:	4658      	mov	r0, fp
    e190:	f004 fa2a 	bl	125e8 <__ssprint_r>
    e194:	2800      	cmp	r0, #0
    e196:	f43f ad47 	beq.w	dc28 <_svfprintf_r+0x358>
    e19a:	9b07      	ldr	r3, [sp, #28]
    e19c:	2b00      	cmp	r3, #0
    e19e:	f43f aca2 	beq.w	dae6 <_svfprintf_r+0x216>
    e1a2:	9907      	ldr	r1, [sp, #28]
    e1a4:	4658      	mov	r0, fp
    e1a6:	f7fe f91d 	bl	c3e4 <_free_r>
    e1aa:	e49c      	b.n	dae6 <_svfprintf_r+0x216>
    e1ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e1ae:	2b01      	cmp	r3, #1
    e1b0:	f340 817a 	ble.w	e4a8 <_svfprintf_r+0xbd8>
    e1b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e1b6:	f8ca 4000 	str.w	r4, [sl]
    e1ba:	3301      	adds	r3, #1
    e1bc:	3201      	adds	r2, #1
    e1be:	2101      	movs	r1, #1
    e1c0:	2b07      	cmp	r3, #7
    e1c2:	9226      	str	r2, [sp, #152]	; 0x98
    e1c4:	9325      	str	r3, [sp, #148]	; 0x94
    e1c6:	f8ca 1004 	str.w	r1, [sl, #4]
    e1ca:	f300 81f8 	bgt.w	e5be <_svfprintf_r+0xcee>
    e1ce:	f10a 0a08 	add.w	sl, sl, #8
    e1d2:	9910      	ldr	r1, [sp, #64]	; 0x40
    e1d4:	9812      	ldr	r0, [sp, #72]	; 0x48
    e1d6:	3301      	adds	r3, #1
    e1d8:	440a      	add	r2, r1
    e1da:	2b07      	cmp	r3, #7
    e1dc:	e9ca 0100 	strd	r0, r1, [sl]
    e1e0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e1e4:	f300 81dd 	bgt.w	e5a2 <_svfprintf_r+0xcd2>
    e1e8:	f10a 0a08 	add.w	sl, sl, #8
    e1ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
    e1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e1f4:	f000 8177 	beq.w	e4e6 <_svfprintf_r+0xc16>
    e1f8:	990e      	ldr	r1, [sp, #56]	; 0x38
    e1fa:	3301      	adds	r3, #1
    e1fc:	3901      	subs	r1, #1
    e1fe:	3401      	adds	r4, #1
    e200:	440a      	add	r2, r1
    e202:	2b07      	cmp	r3, #7
    e204:	f8ca 4000 	str.w	r4, [sl]
    e208:	9325      	str	r3, [sp, #148]	; 0x94
    e20a:	f8ca 1004 	str.w	r1, [sl, #4]
    e20e:	9226      	str	r2, [sp, #152]	; 0x98
    e210:	f300 815b 	bgt.w	e4ca <_svfprintf_r+0xbfa>
    e214:	f10a 0a08 	add.w	sl, sl, #8
    e218:	9914      	ldr	r1, [sp, #80]	; 0x50
    e21a:	f8ca 1004 	str.w	r1, [sl, #4]
    e21e:	3301      	adds	r3, #1
    e220:	440a      	add	r2, r1
    e222:	2b07      	cmp	r3, #7
    e224:	a91e      	add	r1, sp, #120	; 0x78
    e226:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e22a:	f8ca 1000 	str.w	r1, [sl]
    e22e:	f77f ace5 	ble.w	dbfc <_svfprintf_r+0x32c>
    e232:	ee1b 1a10 	vmov	r1, s22
    e236:	aa24      	add	r2, sp, #144	; 0x90
    e238:	4658      	mov	r0, fp
    e23a:	f004 f9d5 	bl	125e8 <__ssprint_r>
    e23e:	2800      	cmp	r0, #0
    e240:	d1ab      	bne.n	e19a <_svfprintf_r+0x8ca>
    e242:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e244:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e248:	e4da      	b.n	dc00 <_svfprintf_r+0x330>
    e24a:	2d10      	cmp	r5, #16
    e24c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    e250:	4e2c      	ldr	r6, [pc, #176]	; (e304 <_svfprintf_r+0xa34>)
    e252:	dd24      	ble.n	e29e <_svfprintf_r+0x9ce>
    e254:	9417      	str	r4, [sp, #92]	; 0x5c
    e256:	2310      	movs	r3, #16
    e258:	ee1b 4a10 	vmov	r4, s22
    e25c:	4608      	mov	r0, r1
    e25e:	e004      	b.n	e26a <_svfprintf_r+0x99a>
    e260:	3d10      	subs	r5, #16
    e262:	2d10      	cmp	r5, #16
    e264:	f10a 0a08 	add.w	sl, sl, #8
    e268:	dd17      	ble.n	e29a <_svfprintf_r+0x9ca>
    e26a:	3001      	adds	r0, #1
    e26c:	3210      	adds	r2, #16
    e26e:	2807      	cmp	r0, #7
    e270:	e9ca 6300 	strd	r6, r3, [sl]
    e274:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    e278:	ddf2      	ble.n	e260 <_svfprintf_r+0x990>
    e27a:	aa24      	add	r2, sp, #144	; 0x90
    e27c:	4621      	mov	r1, r4
    e27e:	4658      	mov	r0, fp
    e280:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e284:	f004 f9b0 	bl	125e8 <__ssprint_r>
    e288:	2800      	cmp	r0, #0
    e28a:	d186      	bne.n	e19a <_svfprintf_r+0x8ca>
    e28c:	3d10      	subs	r5, #16
    e28e:	2d10      	cmp	r5, #16
    e290:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    e294:	f04f 0310 	mov.w	r3, #16
    e298:	dce7      	bgt.n	e26a <_svfprintf_r+0x99a>
    e29a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    e29c:	4601      	mov	r1, r0
    e29e:	3101      	adds	r1, #1
    e2a0:	442a      	add	r2, r5
    e2a2:	2907      	cmp	r1, #7
    e2a4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    e2a8:	f8ca 6000 	str.w	r6, [sl]
    e2ac:	f8ca 5004 	str.w	r5, [sl, #4]
    e2b0:	f300 83bd 	bgt.w	ea2e <_svfprintf_r+0x115e>
    e2b4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e2b8:	f10a 0a08 	add.w	sl, sl, #8
    e2bc:	e45d      	b.n	db7a <_svfprintf_r+0x2aa>
    e2be:	f8cd 8008 	str.w	r8, [sp, #8]
    e2c2:	2a0a      	cmp	r2, #10
    e2c4:	f171 0300 	sbcs.w	r3, r1, #0
    e2c8:	f080 8345 	bcs.w	e956 <_svfprintf_r+0x1086>
    e2cc:	3230      	adds	r2, #48	; 0x30
    e2ce:	2301      	movs	r3, #1
    e2d0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e2d4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    e2d8:	9305      	str	r3, [sp, #20]
    e2da:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    e2de:	e668      	b.n	dfb2 <_svfprintf_r+0x6e2>
    e2e0:	ee1b 1a10 	vmov	r1, s22
    e2e4:	aa24      	add	r2, sp, #144	; 0x90
    e2e6:	4658      	mov	r0, fp
    e2e8:	f004 f97e 	bl	125e8 <__ssprint_r>
    e2ec:	2800      	cmp	r0, #0
    e2ee:	f47f af54 	bne.w	e19a <_svfprintf_r+0x8ca>
    e2f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e2f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e2f8:	e452      	b.n	dba0 <_svfprintf_r+0x2d0>
    e2fa:	bf00      	nop
    e2fc:	20000c70 	.word	0x20000c70
    e300:	20008488 	.word	0x20008488
    e304:	200026ec 	.word	0x200026ec
    e308:	ee1b 1a10 	vmov	r1, s22
    e30c:	aa24      	add	r2, sp, #144	; 0x90
    e30e:	4658      	mov	r0, fp
    e310:	f004 f96a 	bl	125e8 <__ssprint_r>
    e314:	2800      	cmp	r0, #0
    e316:	f47f af40 	bne.w	e19a <_svfprintf_r+0x8ca>
    e31a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e31c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e320:	e451      	b.n	dbc6 <_svfprintf_r+0x2f6>
    e322:	2c10      	cmp	r4, #16
    e324:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e326:	4ebe      	ldr	r6, [pc, #760]	; (e620 <_svfprintf_r+0xd50>)
    e328:	dd1f      	ble.n	e36a <_svfprintf_r+0xa9a>
    e32a:	ee1b 8a10 	vmov	r8, s22
    e32e:	2510      	movs	r5, #16
    e330:	e004      	b.n	e33c <_svfprintf_r+0xa6c>
    e332:	3c10      	subs	r4, #16
    e334:	2c10      	cmp	r4, #16
    e336:	f10a 0a08 	add.w	sl, sl, #8
    e33a:	dd16      	ble.n	e36a <_svfprintf_r+0xa9a>
    e33c:	3301      	adds	r3, #1
    e33e:	3210      	adds	r2, #16
    e340:	2b07      	cmp	r3, #7
    e342:	e9ca 6500 	strd	r6, r5, [sl]
    e346:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e34a:	ddf2      	ble.n	e332 <_svfprintf_r+0xa62>
    e34c:	aa24      	add	r2, sp, #144	; 0x90
    e34e:	4641      	mov	r1, r8
    e350:	4658      	mov	r0, fp
    e352:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e356:	f004 f947 	bl	125e8 <__ssprint_r>
    e35a:	2800      	cmp	r0, #0
    e35c:	f47f af1d 	bne.w	e19a <_svfprintf_r+0x8ca>
    e360:	3c10      	subs	r4, #16
    e362:	2c10      	cmp	r4, #16
    e364:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e368:	dce8      	bgt.n	e33c <_svfprintf_r+0xa6c>
    e36a:	3301      	adds	r3, #1
    e36c:	4422      	add	r2, r4
    e36e:	2b07      	cmp	r3, #7
    e370:	e9ca 6400 	strd	r6, r4, [sl]
    e374:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e378:	f77f ac4b 	ble.w	dc12 <_svfprintf_r+0x342>
    e37c:	ee1b 1a10 	vmov	r1, s22
    e380:	aa24      	add	r2, sp, #144	; 0x90
    e382:	4658      	mov	r0, fp
    e384:	f004 f930 	bl	125e8 <__ssprint_r>
    e388:	2800      	cmp	r0, #0
    e38a:	f47f af06 	bne.w	e19a <_svfprintf_r+0x8ca>
    e38e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e390:	e43f      	b.n	dc12 <_svfprintf_r+0x342>
    e392:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e394:	2900      	cmp	r1, #0
    e396:	f340 835a 	ble.w	ea4e <_svfprintf_r+0x117e>
    e39a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e39c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e39e:	429e      	cmp	r6, r3
    e3a0:	bfa8      	it	ge
    e3a2:	461e      	movge	r6, r3
    e3a4:	2e00      	cmp	r6, #0
    e3a6:	dd0b      	ble.n	e3c0 <_svfprintf_r+0xaf0>
    e3a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e3aa:	3301      	adds	r3, #1
    e3ac:	4432      	add	r2, r6
    e3ae:	2b07      	cmp	r3, #7
    e3b0:	e9ca 4600 	strd	r4, r6, [sl]
    e3b4:	9226      	str	r2, [sp, #152]	; 0x98
    e3b6:	9325      	str	r3, [sp, #148]	; 0x94
    e3b8:	f300 8689 	bgt.w	f0ce <_svfprintf_r+0x17fe>
    e3bc:	f10a 0a08 	add.w	sl, sl, #8
    e3c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e3c2:	2e00      	cmp	r6, #0
    e3c4:	bfa8      	it	ge
    e3c6:	1bad      	subge	r5, r5, r6
    e3c8:	2d00      	cmp	r5, #0
    e3ca:	f300 8203 	bgt.w	e7d4 <_svfprintf_r+0xf04>
    e3ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e3d0:	f418 6f80 	tst.w	r8, #1024	; 0x400
    e3d4:	4423      	add	r3, r4
    e3d6:	9305      	str	r3, [sp, #20]
    e3d8:	f040 821f 	bne.w	e81a <_svfprintf_r+0xf4a>
    e3dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e3de:	990e      	ldr	r1, [sp, #56]	; 0x38
    e3e0:	428b      	cmp	r3, r1
    e3e2:	db03      	blt.n	e3ec <_svfprintf_r+0xb1c>
    e3e4:	f018 0f01 	tst.w	r8, #1
    e3e8:	f000 84cf 	beq.w	ed8a <_svfprintf_r+0x14ba>
    e3ec:	9910      	ldr	r1, [sp, #64]	; 0x40
    e3ee:	9812      	ldr	r0, [sp, #72]	; 0x48
    e3f0:	440a      	add	r2, r1
    e3f2:	e9ca 0100 	strd	r0, r1, [sl]
    e3f6:	9925      	ldr	r1, [sp, #148]	; 0x94
    e3f8:	9226      	str	r2, [sp, #152]	; 0x98
    e3fa:	3101      	adds	r1, #1
    e3fc:	2907      	cmp	r1, #7
    e3fe:	9125      	str	r1, [sp, #148]	; 0x94
    e400:	f300 86a5 	bgt.w	f14e <_svfprintf_r+0x187e>
    e404:	f10a 0a08 	add.w	sl, sl, #8
    e408:	990e      	ldr	r1, [sp, #56]	; 0x38
    e40a:	1865      	adds	r5, r4, r1
    e40c:	1acc      	subs	r4, r1, r3
    e40e:	9b05      	ldr	r3, [sp, #20]
    e410:	1aed      	subs	r5, r5, r3
    e412:	42a5      	cmp	r5, r4
    e414:	bfa8      	it	ge
    e416:	4625      	movge	r5, r4
    e418:	2d00      	cmp	r5, #0
    e41a:	dd0d      	ble.n	e438 <_svfprintf_r+0xb68>
    e41c:	f8ca 3000 	str.w	r3, [sl]
    e420:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e422:	f8ca 5004 	str.w	r5, [sl, #4]
    e426:	3301      	adds	r3, #1
    e428:	442a      	add	r2, r5
    e42a:	2b07      	cmp	r3, #7
    e42c:	9226      	str	r2, [sp, #152]	; 0x98
    e42e:	9325      	str	r3, [sp, #148]	; 0x94
    e430:	f300 86bb 	bgt.w	f1aa <_svfprintf_r+0x18da>
    e434:	f10a 0a08 	add.w	sl, sl, #8
    e438:	2d00      	cmp	r5, #0
    e43a:	bfa8      	it	ge
    e43c:	1b64      	subge	r4, r4, r5
    e43e:	2c00      	cmp	r4, #0
    e440:	f77f abde 	ble.w	dc00 <_svfprintf_r+0x330>
    e444:	2c10      	cmp	r4, #16
    e446:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e448:	f340 837c 	ble.w	eb44 <_svfprintf_r+0x1274>
    e44c:	ee1b 6a10 	vmov	r6, s22
    e450:	2510      	movs	r5, #16
    e452:	e005      	b.n	e460 <_svfprintf_r+0xb90>
    e454:	f10a 0a08 	add.w	sl, sl, #8
    e458:	3c10      	subs	r4, #16
    e45a:	2c10      	cmp	r4, #16
    e45c:	f340 8372 	ble.w	eb44 <_svfprintf_r+0x1274>
    e460:	3301      	adds	r3, #1
    e462:	4970      	ldr	r1, [pc, #448]	; (e624 <_svfprintf_r+0xd54>)
    e464:	3210      	adds	r2, #16
    e466:	2b07      	cmp	r3, #7
    e468:	e9ca 1500 	strd	r1, r5, [sl]
    e46c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e470:	ddf0      	ble.n	e454 <_svfprintf_r+0xb84>
    e472:	aa24      	add	r2, sp, #144	; 0x90
    e474:	4631      	mov	r1, r6
    e476:	4658      	mov	r0, fp
    e478:	f004 f8b6 	bl	125e8 <__ssprint_r>
    e47c:	2800      	cmp	r0, #0
    e47e:	f47f ae8c 	bne.w	e19a <_svfprintf_r+0x8ca>
    e482:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e486:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e48a:	e7e5      	b.n	e458 <_svfprintf_r+0xb88>
    e48c:	2b30      	cmp	r3, #48	; 0x30
    e48e:	f43f ad8b 	beq.w	dfa8 <_svfprintf_r+0x6d8>
    e492:	2330      	movs	r3, #48	; 0x30
    e494:	3802      	subs	r0, #2
    e496:	f804 3c01 	strb.w	r3, [r4, #-1]
    e49a:	ab50      	add	r3, sp, #320	; 0x140
    e49c:	1a1b      	subs	r3, r3, r0
    e49e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e4a2:	9305      	str	r3, [sp, #20]
    e4a4:	4604      	mov	r4, r0
    e4a6:	e584      	b.n	dfb2 <_svfprintf_r+0x6e2>
    e4a8:	f018 0f01 	tst.w	r8, #1
    e4ac:	f47f ae82 	bne.w	e1b4 <_svfprintf_r+0x8e4>
    e4b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e4b2:	f8ca 4000 	str.w	r4, [sl]
    e4b6:	3301      	adds	r3, #1
    e4b8:	3201      	adds	r2, #1
    e4ba:	2101      	movs	r1, #1
    e4bc:	2b07      	cmp	r3, #7
    e4be:	9226      	str	r2, [sp, #152]	; 0x98
    e4c0:	9325      	str	r3, [sp, #148]	; 0x94
    e4c2:	f8ca 1004 	str.w	r1, [sl, #4]
    e4c6:	f77f aea5 	ble.w	e214 <_svfprintf_r+0x944>
    e4ca:	ee1b 1a10 	vmov	r1, s22
    e4ce:	aa24      	add	r2, sp, #144	; 0x90
    e4d0:	4658      	mov	r0, fp
    e4d2:	f004 f889 	bl	125e8 <__ssprint_r>
    e4d6:	2800      	cmp	r0, #0
    e4d8:	f47f ae5f 	bne.w	e19a <_svfprintf_r+0x8ca>
    e4dc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e4e0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e4e4:	e698      	b.n	e218 <_svfprintf_r+0x948>
    e4e6:	990e      	ldr	r1, [sp, #56]	; 0x38
    e4e8:	1e4c      	subs	r4, r1, #1
    e4ea:	2c00      	cmp	r4, #0
    e4ec:	f77f ae94 	ble.w	e218 <_svfprintf_r+0x948>
    e4f0:	2c10      	cmp	r4, #16
    e4f2:	f340 8361 	ble.w	ebb8 <_svfprintf_r+0x12e8>
    e4f6:	ee1b 6a10 	vmov	r6, s22
    e4fa:	2510      	movs	r5, #16
    e4fc:	e005      	b.n	e50a <_svfprintf_r+0xc3a>
    e4fe:	f10a 0a08 	add.w	sl, sl, #8
    e502:	3c10      	subs	r4, #16
    e504:	2c10      	cmp	r4, #16
    e506:	f340 8357 	ble.w	ebb8 <_svfprintf_r+0x12e8>
    e50a:	3301      	adds	r3, #1
    e50c:	4945      	ldr	r1, [pc, #276]	; (e624 <_svfprintf_r+0xd54>)
    e50e:	3210      	adds	r2, #16
    e510:	2b07      	cmp	r3, #7
    e512:	e9ca 1500 	strd	r1, r5, [sl]
    e516:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e51a:	ddf0      	ble.n	e4fe <_svfprintf_r+0xc2e>
    e51c:	aa24      	add	r2, sp, #144	; 0x90
    e51e:	4631      	mov	r1, r6
    e520:	4658      	mov	r0, fp
    e522:	f004 f861 	bl	125e8 <__ssprint_r>
    e526:	2800      	cmp	r0, #0
    e528:	f47f ae37 	bne.w	e19a <_svfprintf_r+0x8ca>
    e52c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e530:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e534:	e7e5      	b.n	e502 <_svfprintf_r+0xc32>
    e536:	ee1b 1a10 	vmov	r1, s22
    e53a:	aa24      	add	r2, sp, #144	; 0x90
    e53c:	4658      	mov	r0, fp
    e53e:	f004 f853 	bl	125e8 <__ssprint_r>
    e542:	2800      	cmp	r0, #0
    e544:	f47f ae29 	bne.w	e19a <_svfprintf_r+0x8ca>
    e548:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e54a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e54e:	f7ff bb44 	b.w	dbda <_svfprintf_r+0x30a>
    e552:	9b02      	ldr	r3, [sp, #8]
    e554:	f013 0310 	ands.w	r3, r3, #16
    e558:	f040 80c1 	bne.w	e6de <_svfprintf_r+0xe0e>
    e55c:	9a02      	ldr	r2, [sp, #8]
    e55e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    e562:	f000 837a 	beq.w	ec5a <_svfprintf_r+0x138a>
    e566:	9808      	ldr	r0, [sp, #32]
    e568:	f850 2b04 	ldr.w	r2, [r0], #4
    e56c:	9008      	str	r0, [sp, #32]
    e56e:	4619      	mov	r1, r3
    e570:	b292      	uxth	r2, r2
    e572:	2301      	movs	r3, #1
    e574:	e451      	b.n	de1a <_svfprintf_r+0x54a>
    e576:	f018 0310 	ands.w	r3, r8, #16
    e57a:	d155      	bne.n	e628 <_svfprintf_r+0xd58>
    e57c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e580:	f000 835d 	beq.w	ec3e <_svfprintf_r+0x136e>
    e584:	9808      	ldr	r0, [sp, #32]
    e586:	f850 2b04 	ldr.w	r2, [r0], #4
    e58a:	9008      	str	r0, [sp, #32]
    e58c:	4619      	mov	r1, r3
    e58e:	b292      	uxth	r2, r2
    e590:	e4a8      	b.n	dee4 <_svfprintf_r+0x614>
    e592:	4252      	negs	r2, r2
    e594:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e598:	f8cd 8008 	str.w	r8, [sp, #8]
    e59c:	202d      	movs	r0, #45	; 0x2d
    e59e:	2301      	movs	r3, #1
    e5a0:	e43c      	b.n	de1c <_svfprintf_r+0x54c>
    e5a2:	ee1b 1a10 	vmov	r1, s22
    e5a6:	aa24      	add	r2, sp, #144	; 0x90
    e5a8:	4658      	mov	r0, fp
    e5aa:	f004 f81d 	bl	125e8 <__ssprint_r>
    e5ae:	2800      	cmp	r0, #0
    e5b0:	f47f adf3 	bne.w	e19a <_svfprintf_r+0x8ca>
    e5b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e5b8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e5bc:	e616      	b.n	e1ec <_svfprintf_r+0x91c>
    e5be:	ee1b 1a10 	vmov	r1, s22
    e5c2:	aa24      	add	r2, sp, #144	; 0x90
    e5c4:	4658      	mov	r0, fp
    e5c6:	f004 f80f 	bl	125e8 <__ssprint_r>
    e5ca:	2800      	cmp	r0, #0
    e5cc:	f47f ade5 	bne.w	e19a <_svfprintf_r+0x8ca>
    e5d0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e5d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e5d8:	e5fb      	b.n	e1d2 <_svfprintf_r+0x902>
    e5da:	f018 0f01 	tst.w	r8, #1
    e5de:	f43f ab0f 	beq.w	dc00 <_svfprintf_r+0x330>
    e5e2:	e52a      	b.n	e03a <_svfprintf_r+0x76a>
    e5e4:	9308      	str	r3, [sp, #32]
    e5e6:	f899 3000 	ldrb.w	r3, [r9]
    e5ea:	f7ff b9cd 	b.w	d988 <_svfprintf_r+0xb8>
    e5ee:	ac50      	add	r4, sp, #320	; 0x140
    e5f0:	e4df      	b.n	dfb2 <_svfprintf_r+0x6e2>
    e5f2:	f418 7f00 	tst.w	r8, #512	; 0x200
    e5f6:	f040 83db 	bne.w	edb0 <_svfprintf_r+0x14e0>
    e5fa:	f853 2b04 	ldr.w	r2, [r3], #4
    e5fe:	9308      	str	r3, [sp, #32]
    e600:	17d1      	asrs	r1, r2, #31
    e602:	460b      	mov	r3, r1
    e604:	f7ff bbb6 	b.w	dd74 <_svfprintf_r+0x4a4>
    e608:	9b08      	ldr	r3, [sp, #32]
    e60a:	9804      	ldr	r0, [sp, #16]
    e60c:	f853 1b04 	ldr.w	r1, [r3], #4
    e610:	9308      	str	r3, [sp, #32]
    e612:	17c2      	asrs	r2, r0, #31
    e614:	e9c1 0200 	strd	r0, r2, [r1]
    e618:	464c      	mov	r4, r9
    e61a:	f7ff b98b 	b.w	d934 <_svfprintf_r+0x64>
    e61e:	bf00      	nop
    e620:	200026ec 	.word	0x200026ec
    e624:	20008488 	.word	0x20008488
    e628:	9b08      	ldr	r3, [sp, #32]
    e62a:	f853 2b04 	ldr.w	r2, [r3], #4
    e62e:	9308      	str	r3, [sp, #32]
    e630:	e458      	b.n	dee4 <_svfprintf_r+0x614>
    e632:	eeb4 8b48 	vcmp.f64	d8, d8
    e636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e63a:	f180 8694 	bvs.w	f366 <_svfprintf_r+0x1a96>
    e63e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e640:	2b61      	cmp	r3, #97	; 0x61
    e642:	f000 8552 	beq.w	f0ea <_svfprintf_r+0x181a>
    e646:	2b41      	cmp	r3, #65	; 0x41
    e648:	f000 85c0 	beq.w	f1cc <_svfprintf_r+0x18fc>
    e64c:	9b03      	ldr	r3, [sp, #12]
    e64e:	3301      	adds	r3, #1
    e650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e652:	f023 0520 	bic.w	r5, r3, #32
    e656:	f000 8480 	beq.w	ef5a <_svfprintf_r+0x168a>
    e65a:	2d47      	cmp	r5, #71	; 0x47
    e65c:	d104      	bne.n	e668 <_svfprintf_r+0xd98>
    e65e:	9b03      	ldr	r3, [sp, #12]
    e660:	2b00      	cmp	r3, #0
    e662:	bf08      	it	eq
    e664:	2301      	moveq	r3, #1
    e666:	9303      	str	r3, [sp, #12]
    e668:	ee18 3a90 	vmov	r3, s17
    e66c:	2b00      	cmp	r3, #0
    e66e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    e672:	4646      	mov	r6, r8
    e674:	f2c0 8618 	blt.w	f2a8 <_svfprintf_r+0x19d8>
    e678:	eeb0 ab48 	vmov.f64	d10, d8
    e67c:	2300      	movs	r3, #0
    e67e:	4690      	mov	r8, r2
    e680:	9309      	str	r3, [sp, #36]	; 0x24
    e682:	9307      	str	r3, [sp, #28]
    e684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e686:	3b41      	subs	r3, #65	; 0x41
    e688:	2b25      	cmp	r3, #37	; 0x25
    e68a:	f200 8398 	bhi.w	edbe <_svfprintf_r+0x14ee>
    e68e:	e8df f013 	tbh	[pc, r3, lsl #1]
    e692:	046f      	.short	0x046f
    e694:	03960396 	.word	0x03960396
    e698:	04680396 	.word	0x04680396
    e69c:	0396046c 	.word	0x0396046c
    e6a0:	03960396 	.word	0x03960396
    e6a4:	03960396 	.word	0x03960396
    e6a8:	03960396 	.word	0x03960396
    e6ac:	03960396 	.word	0x03960396
    e6b0:	03960396 	.word	0x03960396
    e6b4:	03960396 	.word	0x03960396
    e6b8:	03960396 	.word	0x03960396
    e6bc:	03960396 	.word	0x03960396
    e6c0:	03960396 	.word	0x03960396
    e6c4:	03960396 	.word	0x03960396
    e6c8:	03960396 	.word	0x03960396
    e6cc:	03960396 	.word	0x03960396
    e6d0:	03960396 	.word	0x03960396
    e6d4:	03960396 	.word	0x03960396
    e6d8:	04680396 	.word	0x04680396
    e6dc:	046c      	.short	0x046c
    e6de:	9b08      	ldr	r3, [sp, #32]
    e6e0:	f853 2b04 	ldr.w	r2, [r3], #4
    e6e4:	9308      	str	r3, [sp, #32]
    e6e6:	2301      	movs	r3, #1
    e6e8:	f7ff bb97 	b.w	de1a <_svfprintf_r+0x54a>
    e6ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e6ee:	2b00      	cmp	r3, #0
    e6f0:	f43f a9cf 	beq.w	da92 <_svfprintf_r+0x1c2>
    e6f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e6f6:	781b      	ldrb	r3, [r3, #0]
    e6f8:	2b00      	cmp	r3, #0
    e6fa:	f43f a9ca 	beq.w	da92 <_svfprintf_r+0x1c2>
    e6fe:	f899 3000 	ldrb.w	r3, [r9]
    e702:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    e706:	f7ff b93f 	b.w	d988 <_svfprintf_r+0xb8>
    e70a:	930b      	str	r3, [sp, #44]	; 0x2c
    e70c:	f8cd 8008 	str.w	r8, [sp, #8]
    e710:	f7ff bbf1 	b.w	def6 <_svfprintf_r+0x626>
    e714:	930b      	str	r3, [sp, #44]	; 0x2c
    e716:	4b9a      	ldr	r3, [pc, #616]	; (e980 <_svfprintf_r+0x10b0>)
    e718:	9311      	str	r3, [sp, #68]	; 0x44
    e71a:	f018 0120 	ands.w	r1, r8, #32
    e71e:	f000 8105 	beq.w	e92c <_svfprintf_r+0x105c>
    e722:	9b08      	ldr	r3, [sp, #32]
    e724:	3307      	adds	r3, #7
    e726:	f023 0307 	bic.w	r3, r3, #7
    e72a:	6859      	ldr	r1, [r3, #4]
    e72c:	f853 2b08 	ldr.w	r2, [r3], #8
    e730:	9308      	str	r3, [sp, #32]
    e732:	f018 0f01 	tst.w	r8, #1
    e736:	d00a      	beq.n	e74e <_svfprintf_r+0xe7e>
    e738:	ea52 0301 	orrs.w	r3, r2, r1
    e73c:	d007      	beq.n	e74e <_svfprintf_r+0xe7e>
    e73e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e740:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    e744:	2330      	movs	r3, #48	; 0x30
    e746:	f048 0802 	orr.w	r8, r8, #2
    e74a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    e74e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    e752:	9302      	str	r3, [sp, #8]
    e754:	2302      	movs	r3, #2
    e756:	f7ff bb60 	b.w	de1a <_svfprintf_r+0x54a>
    e75a:	930b      	str	r3, [sp, #44]	; 0x2c
    e75c:	f7ff bbb6 	b.w	decc <_svfprintf_r+0x5fc>
    e760:	930b      	str	r3, [sp, #44]	; 0x2c
    e762:	4b88      	ldr	r3, [pc, #544]	; (e984 <_svfprintf_r+0x10b4>)
    e764:	9311      	str	r3, [sp, #68]	; 0x44
    e766:	e7d8      	b.n	e71a <_svfprintf_r+0xe4a>
    e768:	9b08      	ldr	r3, [sp, #32]
    e76a:	2101      	movs	r1, #1
    e76c:	f853 2b04 	ldr.w	r2, [r3], #4
    e770:	9102      	str	r1, [sp, #8]
    e772:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    e776:	9308      	str	r3, [sp, #32]
    e778:	9105      	str	r1, [sp, #20]
    e77a:	ac37      	add	r4, sp, #220	; 0xdc
    e77c:	f7ff baaf 	b.w	dcde <_svfprintf_r+0x40e>
    e780:	ee1b 1a10 	vmov	r1, s22
    e784:	aa24      	add	r2, sp, #144	; 0x90
    e786:	4658      	mov	r0, fp
    e788:	f003 ff2e 	bl	125e8 <__ssprint_r>
    e78c:	2800      	cmp	r0, #0
    e78e:	f47f ad04 	bne.w	e19a <_svfprintf_r+0x8ca>
    e792:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e794:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e798:	e45d      	b.n	e056 <_svfprintf_r+0x786>
    e79a:	9b03      	ldr	r3, [sp, #12]
    e79c:	9407      	str	r4, [sp, #28]
    e79e:	2b06      	cmp	r3, #6
    e7a0:	4622      	mov	r2, r4
    e7a2:	bf28      	it	cs
    e7a4:	2306      	movcs	r3, #6
    e7a6:	9403      	str	r4, [sp, #12]
    e7a8:	4621      	mov	r1, r4
    e7aa:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    e7ae:	4c76      	ldr	r4, [pc, #472]	; (e988 <_svfprintf_r+0x10b8>)
    e7b0:	9302      	str	r3, [sp, #8]
    e7b2:	9305      	str	r3, [sp, #20]
    e7b4:	920f      	str	r2, [sp, #60]	; 0x3c
    e7b6:	f7ff ba6c 	b.w	dc92 <_svfprintf_r+0x3c2>
    e7ba:	2140      	movs	r1, #64	; 0x40
    e7bc:	4658      	mov	r0, fp
    e7be:	f7fb fa35 	bl	9c2c <_malloc_r>
    e7c2:	6020      	str	r0, [r4, #0]
    e7c4:	6120      	str	r0, [r4, #16]
    e7c6:	2800      	cmp	r0, #0
    e7c8:	f000 860f 	beq.w	f3ea <_svfprintf_r+0x1b1a>
    e7cc:	2340      	movs	r3, #64	; 0x40
    e7ce:	6163      	str	r3, [r4, #20]
    e7d0:	f7ff b89e 	b.w	d910 <_svfprintf_r+0x40>
    e7d4:	2d10      	cmp	r5, #16
    e7d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e7d8:	f340 825d 	ble.w	ec96 <_svfprintf_r+0x13c6>
    e7dc:	4651      	mov	r1, sl
    e7de:	2610      	movs	r6, #16
    e7e0:	ee1b aa10 	vmov	sl, s22
    e7e4:	e004      	b.n	e7f0 <_svfprintf_r+0xf20>
    e7e6:	3108      	adds	r1, #8
    e7e8:	3d10      	subs	r5, #16
    e7ea:	2d10      	cmp	r5, #16
    e7ec:	f340 8252 	ble.w	ec94 <_svfprintf_r+0x13c4>
    e7f0:	3301      	adds	r3, #1
    e7f2:	4866      	ldr	r0, [pc, #408]	; (e98c <_svfprintf_r+0x10bc>)
    e7f4:	3210      	adds	r2, #16
    e7f6:	2b07      	cmp	r3, #7
    e7f8:	e9c1 0600 	strd	r0, r6, [r1]
    e7fc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e800:	ddf1      	ble.n	e7e6 <_svfprintf_r+0xf16>
    e802:	aa24      	add	r2, sp, #144	; 0x90
    e804:	4651      	mov	r1, sl
    e806:	4658      	mov	r0, fp
    e808:	f003 feee 	bl	125e8 <__ssprint_r>
    e80c:	2800      	cmp	r0, #0
    e80e:	f47f acc4 	bne.w	e19a <_svfprintf_r+0x8ca>
    e812:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e816:	a927      	add	r1, sp, #156	; 0x9c
    e818:	e7e6      	b.n	e7e8 <_svfprintf_r+0xf18>
    e81a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e81c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    e820:	18e3      	adds	r3, r4, r3
    e822:	9303      	str	r3, [sp, #12]
    e824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e826:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    e82a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    e82c:	9d05      	ldr	r5, [sp, #20]
    e82e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    e832:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    e836:	940b      	str	r4, [sp, #44]	; 0x2c
    e838:	ee1b 1a10 	vmov	r1, s22
    e83c:	4650      	mov	r0, sl
    e83e:	2b00      	cmp	r3, #0
    e840:	d034      	beq.n	e8ac <_svfprintf_r+0xfdc>
    e842:	f1b8 0f00 	cmp.w	r8, #0
    e846:	d135      	bne.n	e8b4 <_svfprintf_r+0xfe4>
    e848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e84a:	3b01      	subs	r3, #1
    e84c:	3e01      	subs	r6, #1
    e84e:	930d      	str	r3, [sp, #52]	; 0x34
    e850:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e852:	e9c0 3900 	strd	r3, r9, [r0]
    e856:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e858:	3301      	adds	r3, #1
    e85a:	444a      	add	r2, r9
    e85c:	2b07      	cmp	r3, #7
    e85e:	9226      	str	r2, [sp, #152]	; 0x98
    e860:	9325      	str	r3, [sp, #148]	; 0x94
    e862:	dc6c      	bgt.n	e93e <_svfprintf_r+0x106e>
    e864:	3008      	adds	r0, #8
    e866:	9b03      	ldr	r3, [sp, #12]
    e868:	f896 c000 	ldrb.w	ip, [r6]
    e86c:	1b5b      	subs	r3, r3, r5
    e86e:	4563      	cmp	r3, ip
    e870:	bfa8      	it	ge
    e872:	4663      	movge	r3, ip
    e874:	2b00      	cmp	r3, #0
    e876:	469a      	mov	sl, r3
    e878:	dd0c      	ble.n	e894 <_svfprintf_r+0xfc4>
    e87a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e87c:	3401      	adds	r4, #1
    e87e:	441a      	add	r2, r3
    e880:	2c07      	cmp	r4, #7
    e882:	e9c0 5300 	strd	r5, r3, [r0]
    e886:	9226      	str	r2, [sp, #152]	; 0x98
    e888:	9425      	str	r4, [sp, #148]	; 0x94
    e88a:	f300 8177 	bgt.w	eb7c <_svfprintf_r+0x12ac>
    e88e:	f896 c000 	ldrb.w	ip, [r6]
    e892:	3008      	adds	r0, #8
    e894:	f1ba 0f00 	cmp.w	sl, #0
    e898:	bfac      	ite	ge
    e89a:	ebac 040a 	subge.w	r4, ip, sl
    e89e:	4664      	movlt	r4, ip
    e8a0:	2c00      	cmp	r4, #0
    e8a2:	dc0a      	bgt.n	e8ba <_svfprintf_r+0xfea>
    e8a4:	4465      	add	r5, ip
    e8a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e8a8:	2b00      	cmp	r3, #0
    e8aa:	d1ca      	bne.n	e842 <_svfprintf_r+0xf72>
    e8ac:	f1b8 0f00 	cmp.w	r8, #0
    e8b0:	f000 83ac 	beq.w	f00c <_svfprintf_r+0x173c>
    e8b4:	f108 38ff 	add.w	r8, r8, #4294967295
    e8b8:	e7ca      	b.n	e850 <_svfprintf_r+0xf80>
    e8ba:	2c10      	cmp	r4, #16
    e8bc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    e8c0:	dd24      	ble.n	e90c <_svfprintf_r+0x103c>
    e8c2:	9505      	str	r5, [sp, #20]
    e8c4:	f04f 0a10 	mov.w	sl, #16
    e8c8:	4663      	mov	r3, ip
    e8ca:	460d      	mov	r5, r1
    e8cc:	e004      	b.n	e8d8 <_svfprintf_r+0x1008>
    e8ce:	3c10      	subs	r4, #16
    e8d0:	2c10      	cmp	r4, #16
    e8d2:	f100 0008 	add.w	r0, r0, #8
    e8d6:	dd16      	ble.n	e906 <_svfprintf_r+0x1036>
    e8d8:	3301      	adds	r3, #1
    e8da:	492c      	ldr	r1, [pc, #176]	; (e98c <_svfprintf_r+0x10bc>)
    e8dc:	3210      	adds	r2, #16
    e8de:	2b07      	cmp	r3, #7
    e8e0:	e9c0 1a00 	strd	r1, sl, [r0]
    e8e4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e8e8:	ddf1      	ble.n	e8ce <_svfprintf_r+0xffe>
    e8ea:	aa24      	add	r2, sp, #144	; 0x90
    e8ec:	4629      	mov	r1, r5
    e8ee:	4658      	mov	r0, fp
    e8f0:	f003 fe7a 	bl	125e8 <__ssprint_r>
    e8f4:	2800      	cmp	r0, #0
    e8f6:	f47f ac50 	bne.w	e19a <_svfprintf_r+0x8ca>
    e8fa:	3c10      	subs	r4, #16
    e8fc:	2c10      	cmp	r4, #16
    e8fe:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e902:	a827      	add	r0, sp, #156	; 0x9c
    e904:	dce8      	bgt.n	e8d8 <_svfprintf_r+0x1008>
    e906:	4629      	mov	r1, r5
    e908:	9d05      	ldr	r5, [sp, #20]
    e90a:	469c      	mov	ip, r3
    e90c:	f10c 0301 	add.w	r3, ip, #1
    e910:	4422      	add	r2, r4
    e912:	6044      	str	r4, [r0, #4]
    e914:	2b07      	cmp	r3, #7
    e916:	4c1d      	ldr	r4, [pc, #116]	; (e98c <_svfprintf_r+0x10bc>)
    e918:	6004      	str	r4, [r0, #0]
    e91a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e91e:	f300 83c6 	bgt.w	f0ae <_svfprintf_r+0x17de>
    e922:	f896 c000 	ldrb.w	ip, [r6]
    e926:	3008      	adds	r0, #8
    e928:	4465      	add	r5, ip
    e92a:	e7bc      	b.n	e8a6 <_svfprintf_r+0xfd6>
    e92c:	f018 0310 	ands.w	r3, r8, #16
    e930:	f000 80c2 	beq.w	eab8 <_svfprintf_r+0x11e8>
    e934:	9b08      	ldr	r3, [sp, #32]
    e936:	f853 2b04 	ldr.w	r2, [r3], #4
    e93a:	9308      	str	r3, [sp, #32]
    e93c:	e6f9      	b.n	e732 <_svfprintf_r+0xe62>
    e93e:	aa24      	add	r2, sp, #144	; 0x90
    e940:	4658      	mov	r0, fp
    e942:	9105      	str	r1, [sp, #20]
    e944:	f003 fe50 	bl	125e8 <__ssprint_r>
    e948:	2800      	cmp	r0, #0
    e94a:	f47f ac26 	bne.w	e19a <_svfprintf_r+0x8ca>
    e94e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e950:	9905      	ldr	r1, [sp, #20]
    e952:	a827      	add	r0, sp, #156	; 0x9c
    e954:	e787      	b.n	e866 <_svfprintf_r+0xf96>
    e956:	9802      	ldr	r0, [sp, #8]
    e958:	f8cd a01c 	str.w	sl, [sp, #28]
    e95c:	ac50      	add	r4, sp, #320	; 0x140
    e95e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    e962:	2500      	movs	r5, #0
    e964:	ee0a ba10 	vmov	s20, fp
    e968:	4b09      	ldr	r3, [pc, #36]	; (e990 <_svfprintf_r+0x10c0>)
    e96a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    e96e:	f8cd 9014 	str.w	r9, [sp, #20]
    e972:	46a3      	mov	fp, r4
    e974:	f04f 0805 	mov.w	r8, #5
    e978:	46ac      	mov	ip, r5
    e97a:	4604      	mov	r4, r0
    e97c:	e010      	b.n	e9a0 <_svfprintf_r+0x10d0>
    e97e:	bf00      	nop
    e980:	20000c40 	.word	0x20000c40
    e984:	20000c54 	.word	0x20000c54
    e988:	20000c68 	.word	0x20000c68
    e98c:	20008488 	.word	0x20008488
    e990:	cccccccd 	.word	0xcccccccd
    e994:	2a0a      	cmp	r2, #10
    e996:	f171 0100 	sbcs.w	r1, r1, #0
    e99a:	d336      	bcc.n	ea0a <_svfprintf_r+0x113a>
    e99c:	464a      	mov	r2, r9
    e99e:	4631      	mov	r1, r6
    e9a0:	1850      	adds	r0, r2, r1
    e9a2:	f140 0000 	adc.w	r0, r0, #0
    e9a6:	fba3 5600 	umull	r5, r6, r3, r0
    e9aa:	f026 0503 	bic.w	r5, r6, #3
    e9ae:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    e9b2:	1b40      	subs	r0, r0, r5
    e9b4:	1a15      	subs	r5, r2, r0
    e9b6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    e9ba:	f161 0e00 	sbc.w	lr, r1, #0
    e9be:	fb06 f605 	mul.w	r6, r6, r5
    e9c2:	fba5 9503 	umull	r9, r5, r5, r3
    e9c6:	fb03 660e 	mla	r6, r3, lr, r6
    e9ca:	f009 0e01 	and.w	lr, r9, #1
    e9ce:	442e      	add	r6, r5
    e9d0:	fbae 5e08 	umull	r5, lr, lr, r8
    e9d4:	182d      	adds	r5, r5, r0
    e9d6:	ea4f 0959 	mov.w	r9, r9, lsr #1
    e9da:	3530      	adds	r5, #48	; 0x30
    e9dc:	f80b 5c01 	strb.w	r5, [fp, #-1]
    e9e0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    e9e4:	f10c 0c01 	add.w	ip, ip, #1
    e9e8:	f10b 3bff 	add.w	fp, fp, #4294967295
    e9ec:	0876      	lsrs	r6, r6, #1
    e9ee:	2c00      	cmp	r4, #0
    e9f0:	d0d0      	beq.n	e994 <_svfprintf_r+0x10c4>
    e9f2:	f89a 0000 	ldrb.w	r0, [sl]
    e9f6:	4584      	cmp	ip, r0
    e9f8:	d1cc      	bne.n	e994 <_svfprintf_r+0x10c4>
    e9fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    e9fe:	d0c9      	beq.n	e994 <_svfprintf_r+0x10c4>
    ea00:	2a0a      	cmp	r2, #10
    ea02:	f171 0100 	sbcs.w	r1, r1, #0
    ea06:	f080 818f 	bcs.w	ed28 <_svfprintf_r+0x1458>
    ea0a:	465c      	mov	r4, fp
    ea0c:	ab50      	add	r3, sp, #320	; 0x140
    ea0e:	1b1b      	subs	r3, r3, r4
    ea10:	f8dd 9014 	ldr.w	r9, [sp, #20]
    ea14:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    ea18:	ee1a ba10 	vmov	fp, s20
    ea1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    ea20:	f8dd 8008 	ldr.w	r8, [sp, #8]
    ea24:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    ea28:	9305      	str	r3, [sp, #20]
    ea2a:	f7ff bac2 	b.w	dfb2 <_svfprintf_r+0x6e2>
    ea2e:	ee1b 1a10 	vmov	r1, s22
    ea32:	aa24      	add	r2, sp, #144	; 0x90
    ea34:	4658      	mov	r0, fp
    ea36:	f003 fdd7 	bl	125e8 <__ssprint_r>
    ea3a:	2800      	cmp	r0, #0
    ea3c:	f47f abad 	bne.w	e19a <_svfprintf_r+0x8ca>
    ea40:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ea44:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ea46:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea4a:	f7ff b896 	b.w	db7a <_svfprintf_r+0x2aa>
    ea4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ea50:	48be      	ldr	r0, [pc, #760]	; (ed4c <_svfprintf_r+0x147c>)
    ea52:	f8ca 0000 	str.w	r0, [sl]
    ea56:	3301      	adds	r3, #1
    ea58:	3201      	adds	r2, #1
    ea5a:	2001      	movs	r0, #1
    ea5c:	2b07      	cmp	r3, #7
    ea5e:	9226      	str	r2, [sp, #152]	; 0x98
    ea60:	9325      	str	r3, [sp, #148]	; 0x94
    ea62:	f8ca 0004 	str.w	r0, [sl, #4]
    ea66:	f300 8177 	bgt.w	ed58 <_svfprintf_r+0x1488>
    ea6a:	f10a 0a08 	add.w	sl, sl, #8
    ea6e:	2900      	cmp	r1, #0
    ea70:	f040 80af 	bne.w	ebd2 <_svfprintf_r+0x1302>
    ea74:	990e      	ldr	r1, [sp, #56]	; 0x38
    ea76:	f008 0301 	and.w	r3, r8, #1
    ea7a:	430b      	orrs	r3, r1
    ea7c:	f43f a8c0 	beq.w	dc00 <_svfprintf_r+0x330>
    ea80:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ea82:	9912      	ldr	r1, [sp, #72]	; 0x48
    ea84:	441a      	add	r2, r3
    ea86:	e9ca 1300 	strd	r1, r3, [sl]
    ea8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ea8c:	9226      	str	r2, [sp, #152]	; 0x98
    ea8e:	3301      	adds	r3, #1
    ea90:	2b07      	cmp	r3, #7
    ea92:	9325      	str	r3, [sp, #148]	; 0x94
    ea94:	f300 8252 	bgt.w	ef3c <_svfprintf_r+0x166c>
    ea98:	f10a 0a08 	add.w	sl, sl, #8
    ea9c:	990e      	ldr	r1, [sp, #56]	; 0x38
    ea9e:	f8ca 4000 	str.w	r4, [sl]
    eaa2:	3301      	adds	r3, #1
    eaa4:	440a      	add	r2, r1
    eaa6:	2b07      	cmp	r3, #7
    eaa8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eaac:	f8ca 1004 	str.w	r1, [sl, #4]
    eab0:	f77f a8a4 	ble.w	dbfc <_svfprintf_r+0x32c>
    eab4:	f7ff bbbd 	b.w	e232 <_svfprintf_r+0x962>
    eab8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    eabc:	f000 80dd 	beq.w	ec7a <_svfprintf_r+0x13aa>
    eac0:	9808      	ldr	r0, [sp, #32]
    eac2:	f850 2b04 	ldr.w	r2, [r0], #4
    eac6:	9008      	str	r0, [sp, #32]
    eac8:	4619      	mov	r1, r3
    eaca:	b292      	uxth	r2, r2
    eacc:	e631      	b.n	e732 <_svfprintf_r+0xe62>
    eace:	ee1b 1a10 	vmov	r1, s22
    ead2:	aa24      	add	r2, sp, #144	; 0x90
    ead4:	4658      	mov	r0, fp
    ead6:	f003 fd87 	bl	125e8 <__ssprint_r>
    eada:	2800      	cmp	r0, #0
    eadc:	f47f ab5d 	bne.w	e19a <_svfprintf_r+0x8ca>
    eae0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eae2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eae6:	f7ff baa3 	b.w	e030 <_svfprintf_r+0x760>
    eaea:	ae22      	add	r6, sp, #136	; 0x88
    eaec:	2208      	movs	r2, #8
    eaee:	2100      	movs	r1, #0
    eaf0:	4630      	mov	r0, r6
    eaf2:	941d      	str	r4, [sp, #116]	; 0x74
    eaf4:	f7fc ffc2 	bl	ba7c <memset>
    eaf8:	9b03      	ldr	r3, [sp, #12]
    eafa:	1c5a      	adds	r2, r3, #1
    eafc:	f000 80db 	beq.w	ecb6 <_svfprintf_r+0x13e6>
    eb00:	2500      	movs	r5, #0
    eb02:	f8cd 9008 	str.w	r9, [sp, #8]
    eb06:	f8cd 801c 	str.w	r8, [sp, #28]
    eb0a:	4699      	mov	r9, r3
    eb0c:	46a8      	mov	r8, r5
    eb0e:	e00c      	b.n	eb2a <_svfprintf_r+0x125a>
    eb10:	a937      	add	r1, sp, #220	; 0xdc
    eb12:	4658      	mov	r0, fp
    eb14:	f003 fc3e 	bl	12394 <_wcrtomb_r>
    eb18:	1c43      	adds	r3, r0, #1
    eb1a:	4440      	add	r0, r8
    eb1c:	f000 83c8 	beq.w	f2b0 <_svfprintf_r+0x19e0>
    eb20:	4548      	cmp	r0, r9
    eb22:	dc08      	bgt.n	eb36 <_svfprintf_r+0x1266>
    eb24:	f000 8418 	beq.w	f358 <_svfprintf_r+0x1a88>
    eb28:	4680      	mov	r8, r0
    eb2a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    eb2c:	5952      	ldr	r2, [r2, r5]
    eb2e:	4633      	mov	r3, r6
    eb30:	3504      	adds	r5, #4
    eb32:	2a00      	cmp	r2, #0
    eb34:	d1ec      	bne.n	eb10 <_svfprintf_r+0x1240>
    eb36:	f8cd 8014 	str.w	r8, [sp, #20]
    eb3a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    eb3e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    eb42:	e0c5      	b.n	ecd0 <_svfprintf_r+0x1400>
    eb44:	3301      	adds	r3, #1
    eb46:	4982      	ldr	r1, [pc, #520]	; (ed50 <_svfprintf_r+0x1480>)
    eb48:	f8ca 4004 	str.w	r4, [sl, #4]
    eb4c:	4422      	add	r2, r4
    eb4e:	2b07      	cmp	r3, #7
    eb50:	f8ca 1000 	str.w	r1, [sl]
    eb54:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eb58:	f77f a850 	ble.w	dbfc <_svfprintf_r+0x32c>
    eb5c:	f7ff bb69 	b.w	e232 <_svfprintf_r+0x962>
    eb60:	ee1b 1a10 	vmov	r1, s22
    eb64:	aa24      	add	r2, sp, #144	; 0x90
    eb66:	4658      	mov	r0, fp
    eb68:	f003 fd3e 	bl	125e8 <__ssprint_r>
    eb6c:	2800      	cmp	r0, #0
    eb6e:	f47f ab14 	bne.w	e19a <_svfprintf_r+0x8ca>
    eb72:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eb74:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eb78:	f7ff b829 	b.w	dbce <_svfprintf_r+0x2fe>
    eb7c:	aa24      	add	r2, sp, #144	; 0x90
    eb7e:	4658      	mov	r0, fp
    eb80:	9105      	str	r1, [sp, #20]
    eb82:	f003 fd31 	bl	125e8 <__ssprint_r>
    eb86:	2800      	cmp	r0, #0
    eb88:	f47f ab07 	bne.w	e19a <_svfprintf_r+0x8ca>
    eb8c:	f896 c000 	ldrb.w	ip, [r6]
    eb90:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eb92:	9905      	ldr	r1, [sp, #20]
    eb94:	a827      	add	r0, sp, #156	; 0x9c
    eb96:	e67d      	b.n	e894 <_svfprintf_r+0xfc4>
    eb98:	2b01      	cmp	r3, #1
    eb9a:	f8cd 8008 	str.w	r8, [sp, #8]
    eb9e:	f47f a9f3 	bne.w	df88 <_svfprintf_r+0x6b8>
    eba2:	f7ff bb93 	b.w	e2cc <_svfprintf_r+0x9fc>
    eba6:	9b08      	ldr	r3, [sp, #32]
    eba8:	9904      	ldr	r1, [sp, #16]
    ebaa:	f853 2b04 	ldr.w	r2, [r3], #4
    ebae:	464c      	mov	r4, r9
    ebb0:	6011      	str	r1, [r2, #0]
    ebb2:	9308      	str	r3, [sp, #32]
    ebb4:	f7fe bebe 	b.w	d934 <_svfprintf_r+0x64>
    ebb8:	3301      	adds	r3, #1
    ebba:	4965      	ldr	r1, [pc, #404]	; (ed50 <_svfprintf_r+0x1480>)
    ebbc:	f8ca 4004 	str.w	r4, [sl, #4]
    ebc0:	4422      	add	r2, r4
    ebc2:	2b07      	cmp	r3, #7
    ebc4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ebc8:	f8ca 1000 	str.w	r1, [sl]
    ebcc:	f77f ab22 	ble.w	e214 <_svfprintf_r+0x944>
    ebd0:	e47b      	b.n	e4ca <_svfprintf_r+0xbfa>
    ebd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ebd4:	9812      	ldr	r0, [sp, #72]	; 0x48
    ebd6:	441a      	add	r2, r3
    ebd8:	e9ca 0300 	strd	r0, r3, [sl]
    ebdc:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ebde:	9226      	str	r2, [sp, #152]	; 0x98
    ebe0:	3301      	adds	r3, #1
    ebe2:	2b07      	cmp	r3, #7
    ebe4:	9325      	str	r3, [sp, #148]	; 0x94
    ebe6:	f300 81a9 	bgt.w	ef3c <_svfprintf_r+0x166c>
    ebea:	f10a 0a08 	add.w	sl, sl, #8
    ebee:	2900      	cmp	r1, #0
    ebf0:	f6bf af54 	bge.w	ea9c <_svfprintf_r+0x11cc>
    ebf4:	424d      	negs	r5, r1
    ebf6:	3110      	adds	r1, #16
    ebf8:	f280 830f 	bge.w	f21a <_svfprintf_r+0x194a>
    ebfc:	ee1b 1a10 	vmov	r1, s22
    ec00:	2610      	movs	r6, #16
    ec02:	e005      	b.n	ec10 <_svfprintf_r+0x1340>
    ec04:	f10a 0a08 	add.w	sl, sl, #8
    ec08:	3d10      	subs	r5, #16
    ec0a:	2d10      	cmp	r5, #16
    ec0c:	f340 8305 	ble.w	f21a <_svfprintf_r+0x194a>
    ec10:	3301      	adds	r3, #1
    ec12:	484f      	ldr	r0, [pc, #316]	; (ed50 <_svfprintf_r+0x1480>)
    ec14:	3210      	adds	r2, #16
    ec16:	2b07      	cmp	r3, #7
    ec18:	e9ca 0600 	strd	r0, r6, [sl]
    ec1c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ec20:	ddf0      	ble.n	ec04 <_svfprintf_r+0x1334>
    ec22:	aa24      	add	r2, sp, #144	; 0x90
    ec24:	4658      	mov	r0, fp
    ec26:	9103      	str	r1, [sp, #12]
    ec28:	f003 fcde 	bl	125e8 <__ssprint_r>
    ec2c:	2800      	cmp	r0, #0
    ec2e:	f47f aab4 	bne.w	e19a <_svfprintf_r+0x8ca>
    ec32:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ec36:	9903      	ldr	r1, [sp, #12]
    ec38:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ec3c:	e7e4      	b.n	ec08 <_svfprintf_r+0x1338>
    ec3e:	9b08      	ldr	r3, [sp, #32]
    ec40:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    ec44:	bf1a      	itte	ne
    ec46:	4611      	movne	r1, r2
    ec48:	f853 2b04 	ldrne.w	r2, [r3], #4
    ec4c:	f853 2b04 	ldreq.w	r2, [r3], #4
    ec50:	9308      	str	r3, [sp, #32]
    ec52:	bf18      	it	ne
    ec54:	b2d2      	uxtbne	r2, r2
    ec56:	f7ff b945 	b.w	dee4 <_svfprintf_r+0x614>
    ec5a:	9b02      	ldr	r3, [sp, #8]
    ec5c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    ec60:	9b08      	ldr	r3, [sp, #32]
    ec62:	bf1a      	itte	ne
    ec64:	4611      	movne	r1, r2
    ec66:	f853 2b04 	ldrne.w	r2, [r3], #4
    ec6a:	f853 2b04 	ldreq.w	r2, [r3], #4
    ec6e:	9308      	str	r3, [sp, #32]
    ec70:	bf18      	it	ne
    ec72:	b2d2      	uxtbne	r2, r2
    ec74:	2301      	movs	r3, #1
    ec76:	f7ff b8d0 	b.w	de1a <_svfprintf_r+0x54a>
    ec7a:	9b08      	ldr	r3, [sp, #32]
    ec7c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    ec80:	bf1a      	itte	ne
    ec82:	4611      	movne	r1, r2
    ec84:	f853 2b04 	ldrne.w	r2, [r3], #4
    ec88:	f853 2b04 	ldreq.w	r2, [r3], #4
    ec8c:	9308      	str	r3, [sp, #32]
    ec8e:	bf18      	it	ne
    ec90:	b2d2      	uxtbne	r2, r2
    ec92:	e54e      	b.n	e732 <_svfprintf_r+0xe62>
    ec94:	468a      	mov	sl, r1
    ec96:	3301      	adds	r3, #1
    ec98:	492d      	ldr	r1, [pc, #180]	; (ed50 <_svfprintf_r+0x1480>)
    ec9a:	f8ca 5004 	str.w	r5, [sl, #4]
    ec9e:	442a      	add	r2, r5
    eca0:	2b07      	cmp	r3, #7
    eca2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eca6:	f8ca 1000 	str.w	r1, [sl]
    ecaa:	f300 8139 	bgt.w	ef20 <_svfprintf_r+0x1650>
    ecae:	f10a 0a08 	add.w	sl, sl, #8
    ecb2:	f7ff bb8c 	b.w	e3ce <_svfprintf_r+0xafe>
    ecb6:	2300      	movs	r3, #0
    ecb8:	4619      	mov	r1, r3
    ecba:	9600      	str	r6, [sp, #0]
    ecbc:	aa1d      	add	r2, sp, #116	; 0x74
    ecbe:	4658      	mov	r0, fp
    ecc0:	f003 fb8e 	bl	123e0 <_wcsrtombs_r>
    ecc4:	4603      	mov	r3, r0
    ecc6:	3301      	adds	r3, #1
    ecc8:	9005      	str	r0, [sp, #20]
    ecca:	f000 82f1 	beq.w	f2b0 <_svfprintf_r+0x19e0>
    ecce:	941d      	str	r4, [sp, #116]	; 0x74
    ecd0:	9b05      	ldr	r3, [sp, #20]
    ecd2:	2b00      	cmp	r3, #0
    ecd4:	d04e      	beq.n	ed74 <_svfprintf_r+0x14a4>
    ecd6:	2b63      	cmp	r3, #99	; 0x63
    ecd8:	f300 8118 	bgt.w	ef0c <_svfprintf_r+0x163c>
    ecdc:	2300      	movs	r3, #0
    ecde:	9307      	str	r3, [sp, #28]
    ece0:	ac37      	add	r4, sp, #220	; 0xdc
    ece2:	2208      	movs	r2, #8
    ece4:	2100      	movs	r1, #0
    ece6:	4630      	mov	r0, r6
    ece8:	f7fc fec8 	bl	ba7c <memset>
    ecec:	9d05      	ldr	r5, [sp, #20]
    ecee:	9600      	str	r6, [sp, #0]
    ecf0:	462b      	mov	r3, r5
    ecf2:	aa1d      	add	r2, sp, #116	; 0x74
    ecf4:	4621      	mov	r1, r4
    ecf6:	4658      	mov	r0, fp
    ecf8:	f003 fb72 	bl	123e0 <_wcsrtombs_r>
    ecfc:	4285      	cmp	r5, r0
    ecfe:	f040 837c 	bne.w	f3fa <_svfprintf_r+0x1b2a>
    ed02:	9a05      	ldr	r2, [sp, #20]
    ed04:	2300      	movs	r3, #0
    ed06:	54a3      	strb	r3, [r4, r2]
    ed08:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ed0c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ed10:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ed14:	9303      	str	r3, [sp, #12]
    ed16:	9202      	str	r2, [sp, #8]
    ed18:	930f      	str	r3, [sp, #60]	; 0x3c
    ed1a:	f7fe bfba 	b.w	dc92 <_svfprintf_r+0x3c2>
    ed1e:	212d      	movs	r1, #45	; 0x2d
    ed20:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ed24:	f7fe bfa4 	b.w	dc70 <_svfprintf_r+0x3a0>
    ed28:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ed2a:	9915      	ldr	r1, [sp, #84]	; 0x54
    ed2c:	ebab 0b03 	sub.w	fp, fp, r3
    ed30:	461a      	mov	r2, r3
    ed32:	4658      	mov	r0, fp
    ed34:	f7fc ff3a 	bl	bbac <strncpy>
    ed38:	f89a 2001 	ldrb.w	r2, [sl, #1]
    ed3c:	4b05      	ldr	r3, [pc, #20]	; (ed54 <_svfprintf_r+0x1484>)
    ed3e:	b10a      	cbz	r2, ed44 <_svfprintf_r+0x1474>
    ed40:	f10a 0a01 	add.w	sl, sl, #1
    ed44:	f04f 0c00 	mov.w	ip, #0
    ed48:	e628      	b.n	e99c <_svfprintf_r+0x10cc>
    ed4a:	bf00      	nop
    ed4c:	20000c70 	.word	0x20000c70
    ed50:	20008488 	.word	0x20008488
    ed54:	cccccccd 	.word	0xcccccccd
    ed58:	ee1b 1a10 	vmov	r1, s22
    ed5c:	aa24      	add	r2, sp, #144	; 0x90
    ed5e:	4658      	mov	r0, fp
    ed60:	f003 fc42 	bl	125e8 <__ssprint_r>
    ed64:	2800      	cmp	r0, #0
    ed66:	f47f aa18 	bne.w	e19a <_svfprintf_r+0x8ca>
    ed6a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ed6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ed6e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ed72:	e67c      	b.n	ea6e <_svfprintf_r+0x119e>
    ed74:	9b05      	ldr	r3, [sp, #20]
    ed76:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ed7a:	930f      	str	r3, [sp, #60]	; 0x3c
    ed7c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    ed80:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ed84:	9307      	str	r3, [sp, #28]
    ed86:	f7fe bf84 	b.w	dc92 <_svfprintf_r+0x3c2>
    ed8a:	990e      	ldr	r1, [sp, #56]	; 0x38
    ed8c:	9805      	ldr	r0, [sp, #20]
    ed8e:	1865      	adds	r5, r4, r1
    ed90:	1a2d      	subs	r5, r5, r0
    ed92:	1acc      	subs	r4, r1, r3
    ed94:	42a5      	cmp	r5, r4
    ed96:	bfa8      	it	ge
    ed98:	4625      	movge	r5, r4
    ed9a:	f7ff bb4d 	b.w	e438 <_svfprintf_r+0xb68>
    ed9e:	9b08      	ldr	r3, [sp, #32]
    eda0:	9904      	ldr	r1, [sp, #16]
    eda2:	f853 2b04 	ldr.w	r2, [r3], #4
    eda6:	9308      	str	r3, [sp, #32]
    eda8:	8011      	strh	r1, [r2, #0]
    edaa:	464c      	mov	r4, r9
    edac:	f7fe bdc2 	b.w	d934 <_svfprintf_r+0x64>
    edb0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    edb4:	9308      	str	r3, [sp, #32]
    edb6:	17d1      	asrs	r1, r2, #31
    edb8:	460b      	mov	r3, r1
    edba:	f7fe bfdb 	b.w	dd74 <_svfprintf_r+0x4a4>
    edbe:	9a03      	ldr	r2, [sp, #12]
    edc0:	2102      	movs	r1, #2
    edc2:	ab22      	add	r3, sp, #136	; 0x88
    edc4:	9301      	str	r3, [sp, #4]
    edc6:	ab1d      	add	r3, sp, #116	; 0x74
    edc8:	9300      	str	r3, [sp, #0]
    edca:	4658      	mov	r0, fp
    edcc:	ab1b      	add	r3, sp, #108	; 0x6c
    edce:	eeb0 0b4a 	vmov.f64	d0, d10
    edd2:	9202      	str	r2, [sp, #8]
    edd4:	f002 fa14 	bl	11200 <_dtoa_r>
    edd8:	2d47      	cmp	r5, #71	; 0x47
    edda:	9a02      	ldr	r2, [sp, #8]
    eddc:	4604      	mov	r4, r0
    edde:	f000 8161 	beq.w	f0a4 <_svfprintf_r+0x17d4>
    ede2:	2d46      	cmp	r5, #70	; 0x46
    ede4:	4410      	add	r0, r2
    ede6:	d105      	bne.n	edf4 <_svfprintf_r+0x1524>
    ede8:	7823      	ldrb	r3, [r4, #0]
    edea:	2b30      	cmp	r3, #48	; 0x30
    edec:	f000 826f 	beq.w	f2ce <_svfprintf_r+0x19fe>
    edf0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    edf2:	4410      	add	r0, r2
    edf4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    edf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    edfc:	f040 8146 	bne.w	f08c <_svfprintf_r+0x17bc>
    ee00:	4603      	mov	r3, r0
    ee02:	1b1b      	subs	r3, r3, r4
    ee04:	930e      	str	r3, [sp, #56]	; 0x38
    ee06:	2d47      	cmp	r5, #71	; 0x47
    ee08:	f000 8110 	beq.w	f02c <_svfprintf_r+0x175c>
    ee0c:	2d46      	cmp	r5, #70	; 0x46
    ee0e:	f000 81b5 	beq.w	f17c <_svfprintf_r+0x18ac>
    ee12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ee14:	930c      	str	r3, [sp, #48]	; 0x30
    ee16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ee18:	2d41      	cmp	r5, #65	; 0x41
    ee1a:	f103 33ff 	add.w	r3, r3, #4294967295
    ee1e:	931b      	str	r3, [sp, #108]	; 0x6c
    ee20:	f000 81e5 	beq.w	f1ee <_svfprintf_r+0x191e>
    ee24:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    ee28:	2100      	movs	r1, #0
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	bfb8      	it	lt
    ee2e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    ee30:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    ee34:	bfba      	itte	lt
    ee36:	f1c3 0301 	rsblt	r3, r3, #1
    ee3a:	222d      	movlt	r2, #45	; 0x2d
    ee3c:	222b      	movge	r2, #43	; 0x2b
    ee3e:	2b09      	cmp	r3, #9
    ee40:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    ee44:	f340 81da 	ble.w	f1fc <_svfprintf_r+0x192c>
    ee48:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    ee4c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; f26c <_svfprintf_r+0x199c>
    ee50:	462a      	mov	r2, r5
    ee52:	4610      	mov	r0, r2
    ee54:	fb8c 2103 	smull	r2, r1, ip, r3
    ee58:	17da      	asrs	r2, r3, #31
    ee5a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    ee5e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    ee62:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    ee66:	3130      	adds	r1, #48	; 0x30
    ee68:	f800 1c01 	strb.w	r1, [r0, #-1]
    ee6c:	4619      	mov	r1, r3
    ee6e:	2963      	cmp	r1, #99	; 0x63
    ee70:	4613      	mov	r3, r2
    ee72:	f100 32ff 	add.w	r2, r0, #4294967295
    ee76:	dcec      	bgt.n	ee52 <_svfprintf_r+0x1582>
    ee78:	3330      	adds	r3, #48	; 0x30
    ee7a:	b2d9      	uxtb	r1, r3
    ee7c:	1e83      	subs	r3, r0, #2
    ee7e:	429d      	cmp	r5, r3
    ee80:	f802 1c01 	strb.w	r1, [r2, #-1]
    ee84:	f240 828b 	bls.w	f39e <_svfprintf_r+0x1ace>
    ee88:	4613      	mov	r3, r2
    ee8a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ee8e:	e001      	b.n	ee94 <_svfprintf_r+0x15c4>
    ee90:	f813 1b01 	ldrb.w	r1, [r3], #1
    ee94:	f802 1b01 	strb.w	r1, [r2], #1
    ee98:	429d      	cmp	r5, r3
    ee9a:	d1f9      	bne.n	ee90 <_svfprintf_r+0x15c0>
    ee9c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    eea0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    eea4:	1a1b      	subs	r3, r3, r0
    eea6:	4413      	add	r3, r2
    eea8:	aa1e      	add	r2, sp, #120	; 0x78
    eeaa:	1a9b      	subs	r3, r3, r2
    eeac:	9314      	str	r3, [sp, #80]	; 0x50
    eeae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eeb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    eeb2:	2b01      	cmp	r3, #1
    eeb4:	441a      	add	r2, r3
    eeb6:	9205      	str	r2, [sp, #20]
    eeb8:	f340 8203 	ble.w	f2c2 <_svfprintf_r+0x19f2>
    eebc:	9b05      	ldr	r3, [sp, #20]
    eebe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    eec0:	4413      	add	r3, r2
    eec2:	9305      	str	r3, [sp, #20]
    eec4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    eec8:	9a05      	ldr	r2, [sp, #20]
    eeca:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    eece:	2300      	movs	r3, #0
    eed0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    eed4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    eed8:	930f      	str	r3, [sp, #60]	; 0x3c
    eeda:	9202      	str	r2, [sp, #8]
    eedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eede:	2b00      	cmp	r3, #0
    eee0:	f040 80b1 	bne.w	f046 <_svfprintf_r+0x1776>
    eee4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    eee8:	9303      	str	r3, [sp, #12]
    eeea:	f7fe bed2 	b.w	dc92 <_svfprintf_r+0x3c2>
    eeee:	4620      	mov	r0, r4
    eef0:	f7fd f966 	bl	c1c0 <strlen>
    eef4:	4602      	mov	r2, r0
    eef6:	9005      	str	r0, [sp, #20]
    eef8:	f7fe bf20 	b.w	dd3c <_svfprintf_r+0x46c>
    eefc:	ee1b 1a10 	vmov	r1, s22
    ef00:	aa24      	add	r2, sp, #144	; 0x90
    ef02:	4658      	mov	r0, fp
    ef04:	f003 fb70 	bl	125e8 <__ssprint_r>
    ef08:	f7fe bded 	b.w	dae6 <_svfprintf_r+0x216>
    ef0c:	1c59      	adds	r1, r3, #1
    ef0e:	4658      	mov	r0, fp
    ef10:	f7fa fe8c 	bl	9c2c <_malloc_r>
    ef14:	4604      	mov	r4, r0
    ef16:	2800      	cmp	r0, #0
    ef18:	f000 81ca 	beq.w	f2b0 <_svfprintf_r+0x19e0>
    ef1c:	9007      	str	r0, [sp, #28]
    ef1e:	e6e0      	b.n	ece2 <_svfprintf_r+0x1412>
    ef20:	ee1b 1a10 	vmov	r1, s22
    ef24:	aa24      	add	r2, sp, #144	; 0x90
    ef26:	4658      	mov	r0, fp
    ef28:	f003 fb5e 	bl	125e8 <__ssprint_r>
    ef2c:	2800      	cmp	r0, #0
    ef2e:	f47f a934 	bne.w	e19a <_svfprintf_r+0x8ca>
    ef32:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ef34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ef38:	f7ff ba49 	b.w	e3ce <_svfprintf_r+0xafe>
    ef3c:	ee1b 1a10 	vmov	r1, s22
    ef40:	aa24      	add	r2, sp, #144	; 0x90
    ef42:	4658      	mov	r0, fp
    ef44:	f003 fb50 	bl	125e8 <__ssprint_r>
    ef48:	2800      	cmp	r0, #0
    ef4a:	f47f a926 	bne.w	e19a <_svfprintf_r+0x8ca>
    ef4e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ef52:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ef54:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ef58:	e649      	b.n	ebee <_svfprintf_r+0x131e>
    ef5a:	2306      	movs	r3, #6
    ef5c:	9303      	str	r3, [sp, #12]
    ef5e:	f7ff bb83 	b.w	e668 <_svfprintf_r+0xd98>
    ef62:	9b03      	ldr	r3, [sp, #12]
    ef64:	2102      	movs	r1, #2
    ef66:	1c5a      	adds	r2, r3, #1
    ef68:	e72b      	b.n	edc2 <_svfprintf_r+0x14f2>
    ef6a:	9a03      	ldr	r2, [sp, #12]
    ef6c:	2103      	movs	r1, #3
    ef6e:	e728      	b.n	edc2 <_svfprintf_r+0x14f2>
    ef70:	a81b      	add	r0, sp, #108	; 0x6c
    ef72:	eeb0 0b4a 	vmov.f64	d0, d10
    ef76:	f002 f817 	bl	10fa8 <frexp>
    ef7a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    ef7e:	ee20 0b07 	vmul.f64	d0, d0, d7
    ef82:	eeb5 0b40 	vcmp.f64	d0, #0.0
    ef86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef8a:	d101      	bne.n	ef90 <_svfprintf_r+0x16c0>
    ef8c:	2301      	movs	r3, #1
    ef8e:	931b      	str	r3, [sp, #108]	; 0x6c
    ef90:	48b3      	ldr	r0, [pc, #716]	; (f260 <_svfprintf_r+0x1990>)
    ef92:	9b03      	ldr	r3, [sp, #12]
    ef94:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    ef98:	3b01      	subs	r3, #1
    ef9a:	4622      	mov	r2, r4
    ef9c:	e004      	b.n	efa8 <_svfprintf_r+0x16d8>
    ef9e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    efa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    efa6:	d013      	beq.n	efd0 <_svfprintf_r+0x1700>
    efa8:	ee20 0b05 	vmul.f64	d0, d0, d5
    efac:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    efb0:	f1b3 3fff 	cmp.w	r3, #4294967295
    efb4:	ee17 1a90 	vmov	r1, s15
    efb8:	5c41      	ldrb	r1, [r0, r1]
    efba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    efbe:	4694      	mov	ip, r2
    efc0:	ee30 0b46 	vsub.f64	d0, d0, d6
    efc4:	f802 1b01 	strb.w	r1, [r2], #1
    efc8:	4619      	mov	r1, r3
    efca:	f103 33ff 	add.w	r3, r3, #4294967295
    efce:	d1e6      	bne.n	ef9e <_svfprintf_r+0x16ce>
    efd0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    efd4:	eeb4 0bc6 	vcmpe.f64	d0, d6
    efd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    efdc:	f300 8148 	bgt.w	f270 <_svfprintf_r+0x19a0>
    efe0:	eeb4 0b46 	vcmp.f64	d0, d6
    efe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    efe8:	d104      	bne.n	eff4 <_svfprintf_r+0x1724>
    efea:	ee17 3a90 	vmov	r3, s15
    efee:	07db      	lsls	r3, r3, #31
    eff0:	f100 813e 	bmi.w	f270 <_svfprintf_r+0x19a0>
    eff4:	2900      	cmp	r1, #0
    eff6:	db06      	blt.n	f006 <_svfprintf_r+0x1736>
    eff8:	1c4b      	adds	r3, r1, #1
    effa:	4413      	add	r3, r2
    effc:	2130      	movs	r1, #48	; 0x30
    effe:	f802 1b01 	strb.w	r1, [r2], #1
    f002:	4293      	cmp	r3, r2
    f004:	d1fb      	bne.n	effe <_svfprintf_r+0x172e>
    f006:	1b13      	subs	r3, r2, r4
    f008:	930e      	str	r3, [sp, #56]	; 0x38
    f00a:	e6fc      	b.n	ee06 <_svfprintf_r+0x1536>
    f00c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    f00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f010:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    f014:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    f018:	9613      	str	r6, [sp, #76]	; 0x4c
    f01a:	18e3      	adds	r3, r4, r3
    f01c:	429d      	cmp	r5, r3
    f01e:	4629      	mov	r1, r5
    f020:	bf28      	it	cs
    f022:	4619      	movcs	r1, r3
    f024:	4682      	mov	sl, r0
    f026:	9105      	str	r1, [sp, #20]
    f028:	f7ff b9d8 	b.w	e3dc <_svfprintf_r+0xb0c>
    f02c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f02e:	930c      	str	r3, [sp, #48]	; 0x30
    f030:	1cda      	adds	r2, r3, #3
    f032:	db02      	blt.n	f03a <_svfprintf_r+0x176a>
    f034:	9a03      	ldr	r2, [sp, #12]
    f036:	4293      	cmp	r3, r2
    f038:	dd0c      	ble.n	f054 <_svfprintf_r+0x1784>
    f03a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f03c:	3b02      	subs	r3, #2
    f03e:	930b      	str	r3, [sp, #44]	; 0x2c
    f040:	f023 0520 	bic.w	r5, r3, #32
    f044:	e6e7      	b.n	ee16 <_svfprintf_r+0x1546>
    f046:	212d      	movs	r1, #45	; 0x2d
    f048:	2300      	movs	r3, #0
    f04a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    f04e:	9303      	str	r3, [sp, #12]
    f050:	f7fe be22 	b.w	dc98 <_svfprintf_r+0x3c8>
    f054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f058:	4293      	cmp	r3, r2
    f05a:	f2c0 80bd 	blt.w	f1d8 <_svfprintf_r+0x1908>
    f05e:	07f0      	lsls	r0, r6, #31
    f060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f062:	f140 8132 	bpl.w	f2ca <_svfprintf_r+0x19fa>
    f066:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f068:	4413      	add	r3, r2
    f06a:	9305      	str	r3, [sp, #20]
    f06c:	0571      	lsls	r1, r6, #21
    f06e:	d503      	bpl.n	f078 <_svfprintf_r+0x17a8>
    f070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f072:	2b00      	cmp	r3, #0
    f074:	f300 8135 	bgt.w	f2e2 <_svfprintf_r+0x1a12>
    f078:	9b05      	ldr	r3, [sp, #20]
    f07a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f07e:	9302      	str	r3, [sp, #8]
    f080:	2367      	movs	r3, #103	; 0x67
    f082:	930b      	str	r3, [sp, #44]	; 0x2c
    f084:	2300      	movs	r3, #0
    f086:	930f      	str	r3, [sp, #60]	; 0x3c
    f088:	930d      	str	r3, [sp, #52]	; 0x34
    f08a:	e727      	b.n	eedc <_svfprintf_r+0x160c>
    f08c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f08e:	4283      	cmp	r3, r0
    f090:	f4bf aeb7 	bcs.w	ee02 <_svfprintf_r+0x1532>
    f094:	2130      	movs	r1, #48	; 0x30
    f096:	1c5a      	adds	r2, r3, #1
    f098:	9222      	str	r2, [sp, #136]	; 0x88
    f09a:	7019      	strb	r1, [r3, #0]
    f09c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f09e:	4298      	cmp	r0, r3
    f0a0:	d8f9      	bhi.n	f096 <_svfprintf_r+0x17c6>
    f0a2:	e6ae      	b.n	ee02 <_svfprintf_r+0x1532>
    f0a4:	07f3      	lsls	r3, r6, #31
    f0a6:	f100 80a7 	bmi.w	f1f8 <_svfprintf_r+0x1928>
    f0aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f0ac:	e6a9      	b.n	ee02 <_svfprintf_r+0x1532>
    f0ae:	aa24      	add	r2, sp, #144	; 0x90
    f0b0:	4658      	mov	r0, fp
    f0b2:	9105      	str	r1, [sp, #20]
    f0b4:	f003 fa98 	bl	125e8 <__ssprint_r>
    f0b8:	2800      	cmp	r0, #0
    f0ba:	f47f a86e 	bne.w	e19a <_svfprintf_r+0x8ca>
    f0be:	f896 c000 	ldrb.w	ip, [r6]
    f0c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f0c4:	9905      	ldr	r1, [sp, #20]
    f0c6:	a827      	add	r0, sp, #156	; 0x9c
    f0c8:	4465      	add	r5, ip
    f0ca:	f7ff bbec 	b.w	e8a6 <_svfprintf_r+0xfd6>
    f0ce:	ee1b 1a10 	vmov	r1, s22
    f0d2:	aa24      	add	r2, sp, #144	; 0x90
    f0d4:	4658      	mov	r0, fp
    f0d6:	f003 fa87 	bl	125e8 <__ssprint_r>
    f0da:	2800      	cmp	r0, #0
    f0dc:	f47f a85d 	bne.w	e19a <_svfprintf_r+0x8ca>
    f0e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f0e2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f0e6:	f7ff b96b 	b.w	e3c0 <_svfprintf_r+0xaf0>
    f0ea:	2378      	movs	r3, #120	; 0x78
    f0ec:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    f0f0:	2330      	movs	r3, #48	; 0x30
    f0f2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    f0f6:	9b03      	ldr	r3, [sp, #12]
    f0f8:	2b63      	cmp	r3, #99	; 0x63
    f0fa:	f048 0602 	orr.w	r6, r8, #2
    f0fe:	f300 80a6 	bgt.w	f24e <_svfprintf_r+0x197e>
    f102:	2300      	movs	r3, #0
    f104:	9307      	str	r3, [sp, #28]
    f106:	ac37      	add	r4, sp, #220	; 0xdc
    f108:	ee18 3a90 	vmov	r3, s17
    f10c:	2b00      	cmp	r3, #0
    f10e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    f112:	db2b      	blt.n	f16c <_svfprintf_r+0x189c>
    f114:	eeb0 ab48 	vmov.f64	d10, d8
    f118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f11a:	f023 0520 	bic.w	r5, r3, #32
    f11e:	2300      	movs	r3, #0
    f120:	9309      	str	r3, [sp, #36]	; 0x24
    f122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f124:	2b61      	cmp	r3, #97	; 0x61
    f126:	f47f aaad 	bne.w	e684 <_svfprintf_r+0xdb4>
    f12a:	eeb0 0b4a 	vmov.f64	d0, d10
    f12e:	a81b      	add	r0, sp, #108	; 0x6c
    f130:	f001 ff3a 	bl	10fa8 <frexp>
    f134:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    f138:	ee20 0b07 	vmul.f64	d0, d0, d7
    f13c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f144:	d101      	bne.n	f14a <_svfprintf_r+0x187a>
    f146:	2301      	movs	r3, #1
    f148:	931b      	str	r3, [sp, #108]	; 0x6c
    f14a:	4846      	ldr	r0, [pc, #280]	; (f264 <_svfprintf_r+0x1994>)
    f14c:	e721      	b.n	ef92 <_svfprintf_r+0x16c2>
    f14e:	ee1b 1a10 	vmov	r1, s22
    f152:	aa24      	add	r2, sp, #144	; 0x90
    f154:	4658      	mov	r0, fp
    f156:	f003 fa47 	bl	125e8 <__ssprint_r>
    f15a:	2800      	cmp	r0, #0
    f15c:	f47f a81d 	bne.w	e19a <_svfprintf_r+0x8ca>
    f160:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f162:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f164:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f168:	f7ff b94e 	b.w	e408 <_svfprintf_r+0xb38>
    f16c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f16e:	f023 0520 	bic.w	r5, r3, #32
    f172:	232d      	movs	r3, #45	; 0x2d
    f174:	9309      	str	r3, [sp, #36]	; 0x24
    f176:	eeb1 ab48 	vneg.f64	d10, d8
    f17a:	e7d2      	b.n	f122 <_svfprintf_r+0x1852>
    f17c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f17e:	920c      	str	r2, [sp, #48]	; 0x30
    f180:	2a00      	cmp	r2, #0
    f182:	f006 0301 	and.w	r3, r6, #1
    f186:	f340 810d 	ble.w	f3a4 <_svfprintf_r+0x1ad4>
    f18a:	9903      	ldr	r1, [sp, #12]
    f18c:	430b      	orrs	r3, r1
    f18e:	f040 80cf 	bne.w	f330 <_svfprintf_r+0x1a60>
    f192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f194:	9305      	str	r3, [sp, #20]
    f196:	2366      	movs	r3, #102	; 0x66
    f198:	930b      	str	r3, [sp, #44]	; 0x2c
    f19a:	0572      	lsls	r2, r6, #21
    f19c:	f100 80a3 	bmi.w	f2e6 <_svfprintf_r+0x1a16>
    f1a0:	9b05      	ldr	r3, [sp, #20]
    f1a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f1a6:	9302      	str	r3, [sp, #8]
    f1a8:	e76c      	b.n	f084 <_svfprintf_r+0x17b4>
    f1aa:	ee1b 1a10 	vmov	r1, s22
    f1ae:	aa24      	add	r2, sp, #144	; 0x90
    f1b0:	4658      	mov	r0, fp
    f1b2:	f003 fa19 	bl	125e8 <__ssprint_r>
    f1b6:	2800      	cmp	r0, #0
    f1b8:	f47e afef 	bne.w	e19a <_svfprintf_r+0x8ca>
    f1bc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    f1be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f1c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f1c2:	1b1c      	subs	r4, r3, r4
    f1c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f1c8:	f7ff b936 	b.w	e438 <_svfprintf_r+0xb68>
    f1cc:	2358      	movs	r3, #88	; 0x58
    f1ce:	e78d      	b.n	f0ec <_svfprintf_r+0x181c>
    f1d0:	2200      	movs	r2, #0
    f1d2:	9203      	str	r2, [sp, #12]
    f1d4:	f7fe bbda 	b.w	d98c <_svfprintf_r+0xbc>
    f1d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f1da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f1dc:	189a      	adds	r2, r3, r2
    f1de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f1e0:	9205      	str	r2, [sp, #20]
    f1e2:	2b00      	cmp	r3, #0
    f1e4:	f340 80ab 	ble.w	f33e <_svfprintf_r+0x1a6e>
    f1e8:	2367      	movs	r3, #103	; 0x67
    f1ea:	930b      	str	r3, [sp, #44]	; 0x2c
    f1ec:	e7d5      	b.n	f19a <_svfprintf_r+0x18ca>
    f1ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f1f0:	320f      	adds	r2, #15
    f1f2:	b2d2      	uxtb	r2, r2
    f1f4:	2101      	movs	r1, #1
    f1f6:	e618      	b.n	ee2a <_svfprintf_r+0x155a>
    f1f8:	18a0      	adds	r0, r4, r2
    f1fa:	e5fb      	b.n	edf4 <_svfprintf_r+0x1524>
    f1fc:	2900      	cmp	r1, #0
    f1fe:	f040 80a8 	bne.w	f352 <_svfprintf_r+0x1a82>
    f202:	2230      	movs	r2, #48	; 0x30
    f204:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    f208:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    f20c:	3330      	adds	r3, #48	; 0x30
    f20e:	f802 3b01 	strb.w	r3, [r2], #1
    f212:	ab1e      	add	r3, sp, #120	; 0x78
    f214:	1ad3      	subs	r3, r2, r3
    f216:	9314      	str	r3, [sp, #80]	; 0x50
    f218:	e649      	b.n	eeae <_svfprintf_r+0x15de>
    f21a:	3301      	adds	r3, #1
    f21c:	4912      	ldr	r1, [pc, #72]	; (f268 <_svfprintf_r+0x1998>)
    f21e:	f8ca 5004 	str.w	r5, [sl, #4]
    f222:	442a      	add	r2, r5
    f224:	2b07      	cmp	r3, #7
    f226:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f22a:	f8ca 1000 	str.w	r1, [sl]
    f22e:	f77f ac33 	ble.w	ea98 <_svfprintf_r+0x11c8>
    f232:	ee1b 1a10 	vmov	r1, s22
    f236:	aa24      	add	r2, sp, #144	; 0x90
    f238:	4658      	mov	r0, fp
    f23a:	f003 f9d5 	bl	125e8 <__ssprint_r>
    f23e:	2800      	cmp	r0, #0
    f240:	f47e afab 	bne.w	e19a <_svfprintf_r+0x8ca>
    f244:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f248:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f24c:	e426      	b.n	ea9c <_svfprintf_r+0x11cc>
    f24e:	1c59      	adds	r1, r3, #1
    f250:	4658      	mov	r0, fp
    f252:	f7fa fceb 	bl	9c2c <_malloc_r>
    f256:	4604      	mov	r4, r0
    f258:	b350      	cbz	r0, f2b0 <_svfprintf_r+0x19e0>
    f25a:	9007      	str	r0, [sp, #28]
    f25c:	e754      	b.n	f108 <_svfprintf_r+0x1838>
    f25e:	bf00      	nop
    f260:	20000c54 	.word	0x20000c54
    f264:	20000c40 	.word	0x20000c40
    f268:	20008488 	.word	0x20008488
    f26c:	66666667 	.word	0x66666667
    f270:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    f274:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    f278:	f890 c00f 	ldrb.w	ip, [r0, #15]
    f27c:	4561      	cmp	r1, ip
    f27e:	4613      	mov	r3, r2
    f280:	d10a      	bne.n	f298 <_svfprintf_r+0x19c8>
    f282:	f04f 0e30 	mov.w	lr, #48	; 0x30
    f286:	f803 ec01 	strb.w	lr, [r3, #-1]
    f28a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f28c:	1e59      	subs	r1, r3, #1
    f28e:	9122      	str	r1, [sp, #136]	; 0x88
    f290:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    f294:	458c      	cmp	ip, r1
    f296:	d0f6      	beq.n	f286 <_svfprintf_r+0x19b6>
    f298:	2939      	cmp	r1, #57	; 0x39
    f29a:	bf16      	itet	ne
    f29c:	3101      	addne	r1, #1
    f29e:	7a81      	ldrbeq	r1, [r0, #10]
    f2a0:	b2c9      	uxtbne	r1, r1
    f2a2:	f803 1c01 	strb.w	r1, [r3, #-1]
    f2a6:	e6ae      	b.n	f006 <_svfprintf_r+0x1736>
    f2a8:	2300      	movs	r3, #0
    f2aa:	4690      	mov	r8, r2
    f2ac:	9307      	str	r3, [sp, #28]
    f2ae:	e760      	b.n	f172 <_svfprintf_r+0x18a2>
    f2b0:	ee1b 2a10 	vmov	r2, s22
    f2b4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    f2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f2bc:	8193      	strh	r3, [r2, #12]
    f2be:	f7fe bc16 	b.w	daee <_svfprintf_r+0x21e>
    f2c2:	07f5      	lsls	r5, r6, #31
    f2c4:	f57f adfe 	bpl.w	eec4 <_svfprintf_r+0x15f4>
    f2c8:	e5f8      	b.n	eebc <_svfprintf_r+0x15ec>
    f2ca:	9305      	str	r3, [sp, #20]
    f2cc:	e6ce      	b.n	f06c <_svfprintf_r+0x179c>
    f2ce:	eeb5 ab40 	vcmp.f64	d10, #0.0
    f2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f2d6:	f43f ad8b 	beq.w	edf0 <_svfprintf_r+0x1520>
    f2da:	f1c2 0201 	rsb	r2, r2, #1
    f2de:	921b      	str	r2, [sp, #108]	; 0x6c
    f2e0:	e587      	b.n	edf2 <_svfprintf_r+0x1522>
    f2e2:	2367      	movs	r3, #103	; 0x67
    f2e4:	930b      	str	r3, [sp, #44]	; 0x2c
    f2e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f2e8:	780b      	ldrb	r3, [r1, #0]
    f2ea:	2bff      	cmp	r3, #255	; 0xff
    f2ec:	d079      	beq.n	f3e2 <_svfprintf_r+0x1b12>
    f2ee:	2500      	movs	r5, #0
    f2f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f2f2:	4628      	mov	r0, r5
    f2f4:	e003      	b.n	f2fe <_svfprintf_r+0x1a2e>
    f2f6:	3001      	adds	r0, #1
    f2f8:	3101      	adds	r1, #1
    f2fa:	2bff      	cmp	r3, #255	; 0xff
    f2fc:	d008      	beq.n	f310 <_svfprintf_r+0x1a40>
    f2fe:	4293      	cmp	r3, r2
    f300:	da06      	bge.n	f310 <_svfprintf_r+0x1a40>
    f302:	1ad2      	subs	r2, r2, r3
    f304:	784b      	ldrb	r3, [r1, #1]
    f306:	2b00      	cmp	r3, #0
    f308:	d1f5      	bne.n	f2f6 <_svfprintf_r+0x1a26>
    f30a:	780b      	ldrb	r3, [r1, #0]
    f30c:	3501      	adds	r5, #1
    f30e:	e7f4      	b.n	f2fa <_svfprintf_r+0x1a2a>
    f310:	920c      	str	r2, [sp, #48]	; 0x30
    f312:	9113      	str	r1, [sp, #76]	; 0x4c
    f314:	900d      	str	r0, [sp, #52]	; 0x34
    f316:	950f      	str	r5, [sp, #60]	; 0x3c
    f318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f31c:	9916      	ldr	r1, [sp, #88]	; 0x58
    f31e:	4413      	add	r3, r2
    f320:	9a05      	ldr	r2, [sp, #20]
    f322:	fb01 2303 	mla	r3, r1, r3, r2
    f326:	9305      	str	r3, [sp, #20]
    f328:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f32c:	9302      	str	r3, [sp, #8]
    f32e:	e5d5      	b.n	eedc <_svfprintf_r+0x160c>
    f330:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f332:	18d3      	adds	r3, r2, r3
    f334:	4419      	add	r1, r3
    f336:	2366      	movs	r3, #102	; 0x66
    f338:	9105      	str	r1, [sp, #20]
    f33a:	930b      	str	r3, [sp, #44]	; 0x2c
    f33c:	e72d      	b.n	f19a <_svfprintf_r+0x18ca>
    f33e:	f1c3 0301 	rsb	r3, r3, #1
    f342:	441a      	add	r2, r3
    f344:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f348:	9302      	str	r3, [sp, #8]
    f34a:	2367      	movs	r3, #103	; 0x67
    f34c:	9205      	str	r2, [sp, #20]
    f34e:	930b      	str	r3, [sp, #44]	; 0x2c
    f350:	e698      	b.n	f084 <_svfprintf_r+0x17b4>
    f352:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    f356:	e759      	b.n	f20c <_svfprintf_r+0x193c>
    f358:	9b03      	ldr	r3, [sp, #12]
    f35a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    f35e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f362:	9305      	str	r3, [sp, #20]
    f364:	e4b4      	b.n	ecd0 <_svfprintf_r+0x1400>
    f366:	ee18 3a90 	vmov	r3, s17
    f36a:	2b00      	cmp	r3, #0
    f36c:	bfb4      	ite	lt
    f36e:	212d      	movlt	r1, #45	; 0x2d
    f370:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    f374:	4c25      	ldr	r4, [pc, #148]	; (f40c <_svfprintf_r+0x1b3c>)
    f376:	4b26      	ldr	r3, [pc, #152]	; (f410 <_svfprintf_r+0x1b40>)
    f378:	bfb8      	it	lt
    f37a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    f37e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    f382:	f7fe bc79 	b.w	dc78 <_svfprintf_r+0x3a8>
    f386:	9b03      	ldr	r3, [sp, #12]
    f388:	9302      	str	r3, [sp, #8]
    f38a:	9305      	str	r3, [sp, #20]
    f38c:	2373      	movs	r3, #115	; 0x73
    f38e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f392:	9003      	str	r0, [sp, #12]
    f394:	900f      	str	r0, [sp, #60]	; 0x3c
    f396:	900d      	str	r0, [sp, #52]	; 0x34
    f398:	930b      	str	r3, [sp, #44]	; 0x2c
    f39a:	f7fe bc7a 	b.w	dc92 <_svfprintf_r+0x3c2>
    f39e:	2302      	movs	r3, #2
    f3a0:	9314      	str	r3, [sp, #80]	; 0x50
    f3a2:	e584      	b.n	eeae <_svfprintf_r+0x15de>
    f3a4:	9a03      	ldr	r2, [sp, #12]
    f3a6:	4313      	orrs	r3, r2
    f3a8:	d105      	bne.n	f3b6 <_svfprintf_r+0x1ae6>
    f3aa:	2301      	movs	r3, #1
    f3ac:	2266      	movs	r2, #102	; 0x66
    f3ae:	9302      	str	r3, [sp, #8]
    f3b0:	920b      	str	r2, [sp, #44]	; 0x2c
    f3b2:	9305      	str	r3, [sp, #20]
    f3b4:	e666      	b.n	f084 <_svfprintf_r+0x17b4>
    f3b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f3b8:	3301      	adds	r3, #1
    f3ba:	441a      	add	r2, r3
    f3bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f3c0:	9302      	str	r3, [sp, #8]
    f3c2:	2366      	movs	r3, #102	; 0x66
    f3c4:	9205      	str	r2, [sp, #20]
    f3c6:	930b      	str	r3, [sp, #44]	; 0x2c
    f3c8:	e65c      	b.n	f084 <_svfprintf_r+0x17b4>
    f3ca:	9a08      	ldr	r2, [sp, #32]
    f3cc:	f899 3001 	ldrb.w	r3, [r9, #1]
    f3d0:	4689      	mov	r9, r1
    f3d2:	f852 1b04 	ldr.w	r1, [r2], #4
    f3d6:	9208      	str	r2, [sp, #32]
    f3d8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    f3dc:	9103      	str	r1, [sp, #12]
    f3de:	f7fe bad3 	b.w	d988 <_svfprintf_r+0xb8>
    f3e2:	2300      	movs	r3, #0
    f3e4:	930f      	str	r3, [sp, #60]	; 0x3c
    f3e6:	930d      	str	r3, [sp, #52]	; 0x34
    f3e8:	e796      	b.n	f318 <_svfprintf_r+0x1a48>
    f3ea:	230c      	movs	r3, #12
    f3ec:	f8cb 3000 	str.w	r3, [fp]
    f3f0:	f04f 33ff 	mov.w	r3, #4294967295
    f3f4:	9304      	str	r3, [sp, #16]
    f3f6:	f7fe bb81 	b.w	dafc <_svfprintf_r+0x22c>
    f3fa:	ee1b 2a10 	vmov	r2, s22
    f3fe:	8993      	ldrh	r3, [r2, #12]
    f400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f404:	8193      	strh	r3, [r2, #12]
    f406:	f7fe bec8 	b.w	e19a <_svfprintf_r+0x8ca>
    f40a:	bf00      	nop
    f40c:	20000c3c 	.word	0x20000c3c
    f410:	20000594 	.word	0x20000594

0000f414 <__ssvfscanf_r>:
    f414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f418:	ed2d 8b02 	vpush	{d8}
    f41c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    f420:	468b      	mov	fp, r1
    f422:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    f426:	af02      	add	r7, sp, #8
    f428:	048c      	lsls	r4, r1, #18
    f42a:	4681      	mov	r9, r0
    f42c:	64fa      	str	r2, [r7, #76]	; 0x4c
    f42e:	633b      	str	r3, [r7, #48]	; 0x30
    f430:	d409      	bmi.n	f446 <__ssvfscanf_r+0x32>
    f432:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    f436:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    f43a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f43e:	f8ab 100c 	strh.w	r1, [fp, #12]
    f442:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    f446:	2300      	movs	r3, #0
    f448:	461c      	mov	r4, r3
    f44a:	2208      	movs	r2, #8
    f44c:	4619      	mov	r1, r3
    f44e:	f107 0058 	add.w	r0, r7, #88	; 0x58
    f452:	62fb      	str	r3, [r7, #44]	; 0x2c
    f454:	46a2      	mov	sl, r4
    f456:	f7fc fb11 	bl	ba7c <memset>
    f45a:	643c      	str	r4, [r7, #64]	; 0x40
    f45c:	627c      	str	r4, [r7, #36]	; 0x24
    f45e:	63bc      	str	r4, [r7, #56]	; 0x38
    f460:	647c      	str	r4, [r7, #68]	; 0x44
    f462:	4b83      	ldr	r3, [pc, #524]	; (f670 <__ssvfscanf_r+0x25c>)
    f464:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f468:	f7fc fbd2 	bl	bc10 <__locale_mb_cur_max>
    f46c:	f107 0258 	add.w	r2, r7, #88	; 0x58
    f470:	4603      	mov	r3, r0
    f472:	9200      	str	r2, [sp, #0]
    f474:	f107 0154 	add.w	r1, r7, #84	; 0x54
    f478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    f47a:	4648      	mov	r0, r9
    f47c:	47a0      	blx	r4
    f47e:	1e05      	subs	r5, r0, #0
    f480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f482:	db33      	blt.n	f4ec <__ssvfscanf_r+0xd8>
    f484:	442b      	add	r3, r5
    f486:	64fb      	str	r3, [r7, #76]	; 0x4c
    f488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f48a:	462e      	mov	r6, r5
    f48c:	2b00      	cmp	r3, #0
    f48e:	f000 80b6 	beq.w	f5fe <__ssvfscanf_r+0x1ea>
    f492:	2d01      	cmp	r5, #1
    f494:	d038      	beq.n	f508 <__ssvfscanf_r+0xf4>
    f496:	2b25      	cmp	r3, #37	; 0x25
    f498:	d040      	beq.n	f51c <__ssvfscanf_r+0x108>
    f49a:	2d00      	cmp	r5, #0
    f49c:	d0e1      	beq.n	f462 <__ssvfscanf_r+0x4e>
    f49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f4a0:	1b9e      	subs	r6, r3, r6
    f4a2:	f8db 3004 	ldr.w	r3, [fp, #4]
    f4a6:	1e74      	subs	r4, r6, #1
    f4a8:	2b00      	cmp	r3, #0
    f4aa:	f340 8098 	ble.w	f5de <__ssvfscanf_r+0x1ca>
    f4ae:	f8db 1000 	ldr.w	r1, [fp]
    f4b2:	f894 c001 	ldrb.w	ip, [r4, #1]
    f4b6:	f891 e000 	ldrb.w	lr, [r1]
    f4ba:	1ca3      	adds	r3, r4, #2
    f4bc:	eb0a 0003 	add.w	r0, sl, r3
    f4c0:	45e6      	cmp	lr, ip
    f4c2:	f101 0101 	add.w	r1, r1, #1
    f4c6:	eba3 0206 	sub.w	r2, r3, r6
    f4ca:	f104 0401 	add.w	r4, r4, #1
    f4ce:	eba0 0006 	sub.w	r0, r0, r6
    f4d2:	f040 8094 	bne.w	f5fe <__ssvfscanf_r+0x1ea>
    f4d6:	f8db 3004 	ldr.w	r3, [fp, #4]
    f4da:	f8cb 1000 	str.w	r1, [fp]
    f4de:	3b01      	subs	r3, #1
    f4e0:	42aa      	cmp	r2, r5
    f4e2:	f8cb 3004 	str.w	r3, [fp, #4]
    f4e6:	dbdf      	blt.n	f4a8 <__ssvfscanf_r+0x94>
    f4e8:	4682      	mov	sl, r0
    f4ea:	e7ba      	b.n	f462 <__ssvfscanf_r+0x4e>
    f4ec:	3301      	adds	r3, #1
    f4ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    f4f0:	2208      	movs	r2, #8
    f4f2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    f4f6:	2100      	movs	r1, #0
    f4f8:	f107 0058 	add.w	r0, r7, #88	; 0x58
    f4fc:	657b      	str	r3, [r7, #84]	; 0x54
    f4fe:	f7fc fabd 	bl	ba7c <memset>
    f502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f504:	2b00      	cmp	r3, #0
    f506:	d07a      	beq.n	f5fe <__ssvfscanf_r+0x1ea>
    f508:	4e5a      	ldr	r6, [pc, #360]	; (f674 <__ssvfscanf_r+0x260>)
    f50a:	5cf2      	ldrb	r2, [r6, r3]
    f50c:	0710      	lsls	r0, r2, #28
    f50e:	f100 851c 	bmi.w	ff4a <__ssvfscanf_r+0xb36>
    f512:	2b25      	cmp	r3, #37	; 0x25
    f514:	f040 8086 	bne.w	f624 <__ssvfscanf_r+0x210>
    f518:	2501      	movs	r5, #1
    f51a:	462e      	mov	r6, r5
    f51c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    f51e:	2400      	movs	r4, #0
    f520:	7802      	ldrb	r2, [r0, #0]
    f522:	46a0      	mov	r8, r4
    f524:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    f528:	1c41      	adds	r1, r0, #1
    f52a:	2b55      	cmp	r3, #85	; 0x55
    f52c:	d867      	bhi.n	f5fe <__ssvfscanf_r+0x1ea>
    f52e:	e8df f013 	tbh	[pc, r3, lsl #1]
    f532:	070a      	.short	0x070a
    f534:	00660066 	.word	0x00660066
    f538:	00660066 	.word	0x00660066
    f53c:	00660701 	.word	0x00660701
    f540:	00660066 	.word	0x00660066
    f544:	00660066 	.word	0x00660066
    f548:	060c060c 	.word	0x060c060c
    f54c:	060c060c 	.word	0x060c060c
    f550:	060c060c 	.word	0x060c060c
    f554:	060c060c 	.word	0x060c060c
    f558:	060c060c 	.word	0x060c060c
    f55c:	00660066 	.word	0x00660066
    f560:	00660066 	.word	0x00660066
    f564:	00660066 	.word	0x00660066
    f568:	06180066 	.word	0x06180066
    f56c:	048e0066 	.word	0x048e0066
    f570:	061804c9 	.word	0x061804c9
    f574:	06180618 	.word	0x06180618
    f578:	00660066 	.word	0x00660066
    f57c:	00660066 	.word	0x00660066
    f580:	00660082 	.word	0x00660082
    f584:	04bf0066 	.word	0x04bf0066
    f588:	00660066 	.word	0x00660066
    f58c:	00890066 	.word	0x00890066
    f590:	00660066 	.word	0x00660066
    f594:	00660066 	.word	0x00660066
    f598:	0066066b 	.word	0x0066066b
    f59c:	06dd0066 	.word	0x06dd0066
    f5a0:	00660066 	.word	0x00660066
    f5a4:	00660066 	.word	0x00660066
    f5a8:	06180066 	.word	0x06180066
    f5ac:	04900066 	.word	0x04900066
    f5b0:	061804cb 	.word	0x061804cb
    f5b4:	06180618 	.word	0x06180618
    f5b8:	06d206be 	.word	0x06d206be
    f5bc:	00660082 	.word	0x00660082
    f5c0:	06f306e7 	.word	0x06f306e7
    f5c4:	04c106ac 	.word	0x04c106ac
    f5c8:	006606da 	.word	0x006606da
    f5cc:	008b0066 	.word	0x008b0066
    f5d0:	06ca007d 	.word	0x06ca007d
    f5d4:	00660066 	.word	0x00660066
    f5d8:	0066066b 	.word	0x0066066b
    f5dc:	007d      	.short	0x007d
    f5de:	4659      	mov	r1, fp
    f5e0:	4648      	mov	r0, r9
    f5e2:	f003 f8c1 	bl	12768 <__ssrefill_r>
    f5e6:	2800      	cmp	r0, #0
    f5e8:	f43f af61 	beq.w	f4ae <__ssvfscanf_r+0x9a>
    f5ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f5ee:	2b00      	cmp	r3, #0
    f5f0:	f001 8052 	beq.w	10698 <__ssvfscanf_r+0x1284>
    f5f4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    f5f8:	065a      	lsls	r2, r3, #25
    f5fa:	f101 804d 	bmi.w	10698 <__ssvfscanf_r+0x1284>
    f5fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f600:	b143      	cbz	r3, f614 <__ssvfscanf_r+0x200>
    f602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f604:	f8d3 8000 	ldr.w	r8, [r3]
    f608:	f1b8 0f00 	cmp.w	r8, #0
    f60c:	d002      	beq.n	f614 <__ssvfscanf_r+0x200>
    f60e:	4640      	mov	r0, r8
    f610:	f7fa fb04 	bl	9c1c <free>
    f614:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f616:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    f61a:	46bd      	mov	sp, r7
    f61c:	ecbd 8b02 	vpop	{d8}
    f620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f626:	2501      	movs	r5, #1
    f628:	1e5e      	subs	r6, r3, #1
    f62a:	e73a      	b.n	f4a2 <__ssvfscanf_r+0x8e>
    f62c:	0723      	lsls	r3, r4, #28
    f62e:	d1e6      	bne.n	f5fe <__ssvfscanf_r+0x1ea>
    f630:	7842      	ldrb	r2, [r0, #1]
    f632:	4608      	mov	r0, r1
    f634:	e776      	b.n	f524 <__ssvfscanf_r+0x110>
    f636:	0722      	lsls	r2, r4, #28
    f638:	d1e1      	bne.n	f5fe <__ssvfscanf_r+0x1ea>
    f63a:	7842      	ldrb	r2, [r0, #1]
    f63c:	f044 0402 	orr.w	r4, r4, #2
    f640:	4608      	mov	r0, r1
    f642:	e76f      	b.n	f524 <__ssvfscanf_r+0x110>
    f644:	f044 0401 	orr.w	r4, r4, #1
    f648:	64f9      	str	r1, [r7, #76]	; 0x4c
    f64a:	2502      	movs	r5, #2
    f64c:	f8db 3004 	ldr.w	r3, [fp, #4]
    f650:	2b00      	cmp	r3, #0
    f652:	f340 8408 	ble.w	fe66 <__ssvfscanf_r+0xa52>
    f656:	0660      	lsls	r0, r4, #25
    f658:	f140 840f 	bpl.w	fe7a <__ssvfscanf_r+0xa66>
    f65c:	1e6b      	subs	r3, r5, #1
    f65e:	2b03      	cmp	r3, #3
    f660:	f201 80eb 	bhi.w	1083a <__ssvfscanf_r+0x1426>
    f664:	e8df f013 	tbh	[pc, r3, lsl #1]
    f668:	01f1027b 	.word	0x01f1027b
    f66c:	0008014b 	.word	0x0008014b
    f670:	200085f4 	.word	0x200085f4
    f674:	20000aa5 	.word	0x20000aa5
    f678:	4648      	mov	r0, r9
    f67a:	f001 fc8f 	bl	10f9c <_localeconv_r>
    f67e:	6803      	ldr	r3, [r0, #0]
    f680:	623b      	str	r3, [r7, #32]
    f682:	f108 33ff 	add.w	r3, r8, #4294967295
    f686:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f68a:	f240 855a 	bls.w	10142 <__ssvfscanf_r+0xd2e>
    f68e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    f692:	eb08 0305 	add.w	r3, r8, r5
    f696:	613b      	str	r3, [r7, #16]
    f698:	f240 185d 	movw	r8, #349	; 0x15d
    f69c:	2600      	movs	r6, #0
    f69e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f6a2:	ee08 9a10 	vmov	s16, r9
    f6a6:	e9c7 6605 	strd	r6, r6, [r7, #20]
    f6aa:	63fe      	str	r6, [r7, #60]	; 0x3c
    f6ac:	637e      	str	r6, [r7, #52]	; 0x34
    f6ae:	61fe      	str	r6, [r7, #28]
    f6b0:	64be      	str	r6, [r7, #72]	; 0x48
    f6b2:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    f6b6:	62bb      	str	r3, [r7, #40]	; 0x28
    f6b8:	461d      	mov	r5, r3
    f6ba:	4646      	mov	r6, r8
    f6bc:	f8db 1000 	ldr.w	r1, [fp]
    f6c0:	780a      	ldrb	r2, [r1, #0]
    f6c2:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    f6c6:	2b4e      	cmp	r3, #78	; 0x4e
    f6c8:	d850      	bhi.n	f76c <__ssvfscanf_r+0x358>
    f6ca:	e8df f013 	tbh	[pc, r3, lsl #1]
    f6ce:	037e      	.short	0x037e
    f6d0:	037e004f 	.word	0x037e004f
    f6d4:	004f004f 	.word	0x004f004f
    f6d8:	00a600a3 	.word	0x00a600a3
    f6dc:	00a600a6 	.word	0x00a600a6
    f6e0:	00a600a6 	.word	0x00a600a6
    f6e4:	00a600a6 	.word	0x00a600a6
    f6e8:	00a600a6 	.word	0x00a600a6
    f6ec:	004f004f 	.word	0x004f004f
    f6f0:	004f004f 	.word	0x004f004f
    f6f4:	004f004f 	.word	0x004f004f
    f6f8:	0374004f 	.word	0x0374004f
    f6fc:	030b030b 	.word	0x030b030b
    f700:	039e030b 	.word	0x039e030b
    f704:	004f0394 	.word	0x004f0394
    f708:	0384004f 	.word	0x0384004f
    f70c:	004f004f 	.word	0x004f004f
    f710:	004f004f 	.word	0x004f004f
    f714:	004f035d 	.word	0x004f035d
    f718:	004f033a 	.word	0x004f033a
    f71c:	004f004f 	.word	0x004f004f
    f720:	004f0333 	.word	0x004f0333
    f724:	004f004f 	.word	0x004f004f
    f728:	036d031e 	.word	0x036d031e
    f72c:	004f004f 	.word	0x004f004f
    f730:	004f004f 	.word	0x004f004f
    f734:	004f004f 	.word	0x004f004f
    f738:	0374004f 	.word	0x0374004f
    f73c:	030b030b 	.word	0x030b030b
    f740:	039e030b 	.word	0x039e030b
    f744:	004f0394 	.word	0x004f0394
    f748:	0384004f 	.word	0x0384004f
    f74c:	004f004f 	.word	0x004f004f
    f750:	004f004f 	.word	0x004f004f
    f754:	004f035d 	.word	0x004f035d
    f758:	004f033a 	.word	0x004f033a
    f75c:	004f004f 	.word	0x004f004f
    f760:	004f0333 	.word	0x004f0333
    f764:	004f004f 	.word	0x004f004f
    f768:	036d031e 	.word	0x036d031e
    f76c:	05a0      	lsls	r0, r4, #22
    f76e:	d56f      	bpl.n	f850 <__ssvfscanf_r+0x43c>
    f770:	6a38      	ldr	r0, [r7, #32]
    f772:	7803      	ldrb	r3, [r0, #0]
    f774:	4293      	cmp	r3, r2
    f776:	d16b      	bne.n	f850 <__ssvfscanf_r+0x43c>
    f778:	e9c7 4502 	strd	r4, r5, [r7, #8]
    f77c:	607e      	str	r6, [r7, #4]
    f77e:	4681      	mov	r9, r0
    f780:	ee18 6a10 	vmov	r6, s16
    f784:	f04f 0800 	mov.w	r8, #0
    f788:	465c      	mov	r4, fp
    f78a:	e007      	b.n	f79c <__ssvfscanf_r+0x388>
    f78c:	6021      	str	r1, [r4, #0]
    f78e:	f891 e000 	ldrb.w	lr, [r1]
    f792:	f899 0000 	ldrb.w	r0, [r9]
    f796:	4586      	cmp	lr, r0
    f798:	d11c      	bne.n	f7d4 <__ssvfscanf_r+0x3c0>
    f79a:	46da      	mov	sl, fp
    f79c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    f7a0:	4645      	mov	r5, r8
    f7a2:	f10a 0b01 	add.w	fp, sl, #1
    f7a6:	3101      	adds	r1, #1
    f7a8:	f108 0801 	add.w	r8, r8, #1
    f7ac:	2800      	cmp	r0, #0
    f7ae:	f000 8664 	beq.w	1047a <__ssvfscanf_r+0x1066>
    f7b2:	6860      	ldr	r0, [r4, #4]
    f7b4:	3801      	subs	r0, #1
    f7b6:	2800      	cmp	r0, #0
    f7b8:	6060      	str	r0, [r4, #4]
    f7ba:	dce7      	bgt.n	f78c <__ssvfscanf_r+0x378>
    f7bc:	4621      	mov	r1, r4
    f7be:	4630      	mov	r0, r6
    f7c0:	f002 ffd2 	bl	12768 <__ssrefill_r>
    f7c4:	b930      	cbnz	r0, f7d4 <__ssvfscanf_r+0x3c0>
    f7c6:	6821      	ldr	r1, [r4, #0]
    f7c8:	f899 0000 	ldrb.w	r0, [r9]
    f7cc:	f891 e000 	ldrb.w	lr, [r1]
    f7d0:	4586      	cmp	lr, r0
    f7d2:	d0e2      	beq.n	f79a <__ssvfscanf_r+0x386>
    f7d4:	46a3      	mov	fp, r4
    f7d6:	6a3a      	ldr	r2, [r7, #32]
    f7d8:	68bc      	ldr	r4, [r7, #8]
    f7da:	613d      	str	r5, [r7, #16]
    f7dc:	462b      	mov	r3, r5
    f7de:	46b1      	mov	r9, r6
    f7e0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f7e2:	68fd      	ldr	r5, [r7, #12]
    f7e4:	64bd      	str	r5, [r7, #72]	; 0x48
    f7e6:	3301      	adds	r3, #1
    f7e8:	465d      	mov	r5, fp
    f7ea:	eb02 0803 	add.w	r8, r2, r3
    f7ee:	46b3      	mov	fp, r6
    f7f0:	4626      	mov	r6, r4
    f7f2:	4614      	mov	r4, r2
    f7f4:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    f7f8:	462a      	mov	r2, r5
    f7fa:	4648      	mov	r0, r9
    f7fc:	f002 ff74 	bl	126e8 <_sungetc_r>
    f800:	4544      	cmp	r4, r8
    f802:	d1f7      	bne.n	f7f4 <__ssvfscanf_r+0x3e0>
    f804:	693b      	ldr	r3, [r7, #16]
    f806:	4634      	mov	r4, r6
    f808:	ebaa 0a03 	sub.w	sl, sl, r3
    f80c:	465e      	mov	r6, fp
    f80e:	46ab      	mov	fp, r5
    f810:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    f812:	e020      	b.n	f856 <__ssvfscanf_r+0x442>
    f814:	05e0      	lsls	r0, r4, #23
    f816:	f100 8501 	bmi.w	1021c <__ssvfscanf_r+0xe08>
    f81a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f81c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    f81e:	42d9      	cmn	r1, r3
    f820:	d116      	bne.n	f850 <__ssvfscanf_r+0x43c>
    f822:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    f826:	f805 2b01 	strb.w	r2, [r5], #1
    f82a:	3e01      	subs	r6, #1
    f82c:	f8db 3004 	ldr.w	r3, [fp, #4]
    f830:	3b01      	subs	r3, #1
    f832:	2b00      	cmp	r3, #0
    f834:	f10a 0a01 	add.w	sl, sl, #1
    f838:	f8cb 3004 	str.w	r3, [fp, #4]
    f83c:	f340 836f 	ble.w	ff1e <__ssvfscanf_r+0xb0a>
    f840:	f8db 3000 	ldr.w	r3, [fp]
    f844:	3301      	adds	r3, #1
    f846:	f8cb 3000 	str.w	r3, [fp]
    f84a:	2e00      	cmp	r6, #0
    f84c:	f47f af36 	bne.w	f6bc <__ssvfscanf_r+0x2a8>
    f850:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f852:	ee18 9a10 	vmov	r9, s16
    f856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f858:	2b00      	cmp	r3, #0
    f85a:	f040 82dc 	bne.w	fe16 <__ssvfscanf_r+0xa02>
    f85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f860:	3b01      	subs	r3, #1
    f862:	2b01      	cmp	r3, #1
    f864:	f241 8016 	bls.w	10894 <__ssvfscanf_r+0x1480>
    f868:	1e73      	subs	r3, r6, #1
    f86a:	2b06      	cmp	r3, #6
    f86c:	f240 8627 	bls.w	104be <__ssvfscanf_r+0x10aa>
    f870:	05e3      	lsls	r3, r4, #23
    f872:	d51b      	bpl.n	f8ac <__ssvfscanf_r+0x498>
    f874:	0566      	lsls	r6, r4, #21
    f876:	f101 80b5 	bmi.w	109e4 <__ssvfscanf_r+0x15d0>
    f87a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    f87e:	2965      	cmp	r1, #101	; 0x65
    f880:	f105 33ff 	add.w	r3, r5, #4294967295
    f884:	f10a 36ff 	add.w	r6, sl, #4294967295
    f888:	d00a      	beq.n	f8a0 <__ssvfscanf_r+0x48c>
    f88a:	2945      	cmp	r1, #69	; 0x45
    f88c:	d008      	beq.n	f8a0 <__ssvfscanf_r+0x48c>
    f88e:	465a      	mov	r2, fp
    f890:	4648      	mov	r0, r9
    f892:	f002 ff29 	bl	126e8 <_sungetc_r>
    f896:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    f89a:	f1aa 0602 	sub.w	r6, sl, #2
    f89e:	1eab      	subs	r3, r5, #2
    f8a0:	465a      	mov	r2, fp
    f8a2:	4648      	mov	r0, r9
    f8a4:	46b2      	mov	sl, r6
    f8a6:	461d      	mov	r5, r3
    f8a8:	f002 ff1e 	bl	126e8 <_sungetc_r>
    f8ac:	f014 0210 	ands.w	r2, r4, #16
    f8b0:	f47f add7 	bne.w	f462 <__ssvfscanf_r+0x4e>
    f8b4:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    f8b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f8bc:	702a      	strb	r2, [r5, #0]
    f8be:	f000 84d2 	beq.w	10266 <__ssvfscanf_r+0xe52>
    f8c2:	69bb      	ldr	r3, [r7, #24]
    f8c4:	2b00      	cmp	r3, #0
    f8c6:	f040 872c 	bne.w	10722 <__ssvfscanf_r+0x130e>
    f8ca:	4648      	mov	r0, r9
    f8cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f8ce:	2200      	movs	r2, #0
    f8d0:	f7fb fd9a 	bl	b408 <_strtod_r>
    f8d4:	07e0      	lsls	r0, r4, #31
    f8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f8d8:	f100 85c9 	bmi.w	1046e <__ssvfscanf_r+0x105a>
    f8dc:	07a1      	lsls	r1, r4, #30
    f8de:	f100 85c6 	bmi.w	1046e <__ssvfscanf_r+0x105a>
    f8e2:	eeb4 0b40 	vcmp.f64	d0, d0
    f8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f8ea:	f853 4b04 	ldr.w	r4, [r3], #4
    f8ee:	f180 86f4 	bvs.w	106da <__ssvfscanf_r+0x12c6>
    f8f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f8f6:	633b      	str	r3, [r7, #48]	; 0x30
    f8f8:	ed84 0a00 	vstr	s0, [r4]
    f8fc:	e3a2      	b.n	10044 <__ssvfscanf_r+0xc30>
    f8fe:	f108 33ff 	add.w	r3, r8, #4294967295
    f902:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f906:	f240 83a2 	bls.w	1004e <__ssvfscanf_r+0xc3a>
    f90a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    f90e:	eb08 0302 	add.w	r3, r8, r2
    f912:	63fb      	str	r3, [r7, #60]	; 0x3c
    f914:	f240 185d 	movw	r8, #349	; 0x15d
    f918:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f91c:	2200      	movs	r2, #0
    f91e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    f920:	62bb      	str	r3, [r7, #40]	; 0x28
    f922:	4659      	mov	r1, fp
    f924:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    f928:	46d3      	mov	fp, sl
    f92a:	461d      	mov	r5, r3
    f92c:	4692      	mov	sl, r2
    f92e:	680a      	ldr	r2, [r1, #0]
    f930:	7810      	ldrb	r0, [r2, #0]
    f932:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    f936:	2b4d      	cmp	r3, #77	; 0x4d
    f938:	d860      	bhi.n	f9fc <__ssvfscanf_r+0x5e8>
    f93a:	e8df f013 	tbh	[pc, r3, lsl #1]
    f93e:	0282      	.short	0x0282
    f940:	0282005f 	.word	0x0282005f
    f944:	005f005f 	.word	0x005f005f
    f948:	01e002cd 	.word	0x01e002cd
    f94c:	01e001e0 	.word	0x01e001e0
    f950:	01e001e0 	.word	0x01e001e0
    f954:	01e001e0 	.word	0x01e001e0
    f958:	026f026f 	.word	0x026f026f
    f95c:	005f005f 	.word	0x005f005f
    f960:	005f005f 	.word	0x005f005f
    f964:	005f005f 	.word	0x005f005f
    f968:	004e005f 	.word	0x004e005f
    f96c:	004e004e 	.word	0x004e004e
    f970:	004e004e 	.word	0x004e004e
    f974:	005f004e 	.word	0x005f004e
    f978:	005f005f 	.word	0x005f005f
    f97c:	005f005f 	.word	0x005f005f
    f980:	005f005f 	.word	0x005f005f
    f984:	005f005f 	.word	0x005f005f
    f988:	005f005f 	.word	0x005f005f
    f98c:	005f005f 	.word	0x005f005f
    f990:	005f005f 	.word	0x005f005f
    f994:	005f005f 	.word	0x005f005f
    f998:	005f0276 	.word	0x005f0276
    f99c:	005f005f 	.word	0x005f005f
    f9a0:	005f005f 	.word	0x005f005f
    f9a4:	005f005f 	.word	0x005f005f
    f9a8:	004e005f 	.word	0x004e005f
    f9ac:	004e004e 	.word	0x004e004e
    f9b0:	004e004e 	.word	0x004e004e
    f9b4:	005f004e 	.word	0x005f004e
    f9b8:	005f005f 	.word	0x005f005f
    f9bc:	005f005f 	.word	0x005f005f
    f9c0:	005f005f 	.word	0x005f005f
    f9c4:	005f005f 	.word	0x005f005f
    f9c8:	005f005f 	.word	0x005f005f
    f9cc:	005f005f 	.word	0x005f005f
    f9d0:	005f005f 	.word	0x005f005f
    f9d4:	005f005f 	.word	0x005f005f
    f9d8:	0276      	.short	0x0276
    f9da:	2e0a      	cmp	r6, #10
    f9dc:	dd0e      	ble.n	f9fc <__ssvfscanf_r+0x5e8>
    f9de:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    f9e2:	684b      	ldr	r3, [r1, #4]
    f9e4:	f805 0b01 	strb.w	r0, [r5], #1
    f9e8:	3b01      	subs	r3, #1
    f9ea:	2b00      	cmp	r3, #0
    f9ec:	604b      	str	r3, [r1, #4]
    f9ee:	f340 828d 	ble.w	ff0c <__ssvfscanf_r+0xaf8>
    f9f2:	3201      	adds	r2, #1
    f9f4:	600a      	str	r2, [r1, #0]
    f9f6:	f1b8 0801 	subs.w	r8, r8, #1
    f9fa:	d198      	bne.n	f92e <__ssvfscanf_r+0x51a>
    f9fc:	05e0      	lsls	r0, r4, #23
    f9fe:	46d0      	mov	r8, sl
    fa00:	63be      	str	r6, [r7, #56]	; 0x38
    fa02:	46da      	mov	sl, fp
    fa04:	468b      	mov	fp, r1
    fa06:	d507      	bpl.n	fa18 <__ssvfscanf_r+0x604>
    fa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fa0a:	429d      	cmp	r5, r3
    fa0c:	f200 8422 	bhi.w	10254 <__ssvfscanf_r+0xe40>
    fa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fa12:	429d      	cmp	r5, r3
    fa14:	f43f adf3 	beq.w	f5fe <__ssvfscanf_r+0x1ea>
    fa18:	f014 0210 	ands.w	r2, r4, #16
    fa1c:	d110      	bne.n	fa40 <__ssvfscanf_r+0x62c>
    fa1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    fa20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fa22:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    fa24:	702a      	strb	r2, [r5, #0]
    fa26:	4648      	mov	r0, r9
    fa28:	47b0      	blx	r6
    fa2a:	06a1      	lsls	r1, r4, #26
    fa2c:	f140 8408 	bpl.w	10240 <__ssvfscanf_r+0xe2c>
    fa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fa32:	f853 2b04 	ldr.w	r2, [r3], #4
    fa36:	6010      	str	r0, [r2, #0]
    fa38:	633b      	str	r3, [r7, #48]	; 0x30
    fa3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fa3c:	3301      	adds	r3, #1
    fa3e:	647b      	str	r3, [r7, #68]	; 0x44
    fa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fa42:	1aed      	subs	r5, r5, r3
    fa44:	4445      	add	r5, r8
    fa46:	44aa      	add	sl, r5
    fa48:	e50b      	b.n	f462 <__ssvfscanf_r+0x4e>
    fa4a:	f1b8 0f00 	cmp.w	r8, #0
    fa4e:	bf08      	it	eq
    fa50:	f04f 38ff 	moveq.w	r8, #4294967295
    fa54:	07e0      	lsls	r0, r4, #31
    fa56:	f140 8295 	bpl.w	ff84 <__ssvfscanf_r+0xb70>
    fa5a:	f014 0310 	ands.w	r3, r4, #16
    fa5e:	637b      	str	r3, [r7, #52]	; 0x34
    fa60:	f040 8474 	bne.w	1034c <__ssvfscanf_r+0xf38>
    fa64:	0621      	lsls	r1, r4, #24
    fa66:	f140 8666 	bpl.w	10736 <__ssvfscanf_r+0x1322>
    fa6a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    fa6c:	f854 3b04 	ldr.w	r3, [r4], #4
    fa70:	63fb      	str	r3, [r7, #60]	; 0x3c
    fa72:	2b00      	cmp	r3, #0
    fa74:	f43f adc3 	beq.w	f5fe <__ssvfscanf_r+0x1ea>
    fa78:	2080      	movs	r0, #128	; 0x80
    fa7a:	f7fa f8c7 	bl	9c0c <malloc>
    fa7e:	64b8      	str	r0, [r7, #72]	; 0x48
    fa80:	2800      	cmp	r0, #0
    fa82:	f000 8778 	beq.w	10976 <__ssvfscanf_r+0x1562>
    fa86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fa88:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fa8a:	601a      	str	r2, [r3, #0]
    fa8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fa8e:	88d5      	ldrh	r5, [r2, #6]
    fa90:	8893      	ldrh	r3, [r2, #4]
    fa92:	429d      	cmp	r5, r3
    fa94:	f080 8552 	bcs.w	1053c <__ssvfscanf_r+0x1128>
    fa98:	6810      	ldr	r0, [r2, #0]
    fa9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fa9c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    faa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    faa2:	633c      	str	r4, [r7, #48]	; 0x30
    faa4:	3501      	adds	r5, #1
    faa6:	80dd      	strh	r5, [r3, #6]
    faa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    faaa:	62bb      	str	r3, [r7, #40]	; 0x28
    faac:	2320      	movs	r3, #32
    faae:	623b      	str	r3, [r7, #32]
    fab0:	f8db 3000 	ldr.w	r3, [fp]
    fab4:	4eb1      	ldr	r6, [pc, #708]	; (fd7c <__ssvfscanf_r+0x968>)
    fab6:	781b      	ldrb	r3, [r3, #0]
    fab8:	5cf3      	ldrb	r3, [r6, r3]
    faba:	f013 0308 	ands.w	r3, r3, #8
    fabe:	f040 84bb 	bne.w	10438 <__ssvfscanf_r+0x1024>
    fac2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    fac4:	627e      	str	r6, [r7, #36]	; 0x24
    fac6:	461d      	mov	r5, r3
    fac8:	f7fc f8a2 	bl	bc10 <__locale_mb_cur_max>
    facc:	42a8      	cmp	r0, r5
    face:	f43f ad8d 	beq.w	f5ec <__ssvfscanf_r+0x1d8>
    fad2:	e9db 3200 	ldrd	r3, r2, [fp]
    fad6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    fada:	f813 1b01 	ldrb.w	r1, [r3], #1
    fade:	5541      	strb	r1, [r0, r5]
    fae0:	3a01      	subs	r2, #1
    fae2:	2c03      	cmp	r4, #3
    fae4:	e9cb 3200 	strd	r3, r2, [fp]
    fae8:	f105 0501 	add.w	r5, r5, #1
    faec:	f107 0668 	add.w	r6, r7, #104	; 0x68
    faf0:	d102      	bne.n	faf8 <__ssvfscanf_r+0x6e4>
    faf2:	6833      	ldr	r3, [r6, #0]
    faf4:	2b04      	cmp	r3, #4
    faf6:	d004      	beq.n	fb02 <__ssvfscanf_r+0x6ee>
    faf8:	2208      	movs	r2, #8
    fafa:	2100      	movs	r1, #0
    fafc:	4630      	mov	r0, r6
    fafe:	f7fb ffbd 	bl	ba7c <memset>
    fb02:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    fb06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fb08:	9600      	str	r6, [sp, #0]
    fb0a:	462b      	mov	r3, r5
    fb0c:	4648      	mov	r0, r9
    fb0e:	f002 fc17 	bl	12340 <_mbrtowc_r>
    fb12:	1c42      	adds	r2, r0, #1
    fb14:	4604      	mov	r4, r0
    fb16:	f43f ad69 	beq.w	f5ec <__ssvfscanf_r+0x1d8>
    fb1a:	2800      	cmp	r0, #0
    fb1c:	f040 8478 	bne.w	10410 <__ssvfscanf_r+0xffc>
    fb20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fb22:	6018      	str	r0, [r3, #0]
    fb24:	f002 fc68 	bl	123f8 <iswspace>
    fb28:	2800      	cmp	r0, #0
    fb2a:	f040 865c 	bne.w	107e6 <__ssvfscanf_r+0x13d2>
    fb2e:	44aa      	add	sl, r5
    fb30:	f108 38ff 	add.w	r8, r8, #4294967295
    fb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb36:	2b00      	cmp	r3, #0
    fb38:	f040 8633 	bne.w	107a2 <__ssvfscanf_r+0x138e>
    fb3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fb3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fb40:	3304      	adds	r3, #4
    fb42:	64bb      	str	r3, [r7, #72]	; 0x48
    fb44:	2a00      	cmp	r2, #0
    fb46:	f000 862c 	beq.w	107a2 <__ssvfscanf_r+0x138e>
    fb4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fb4c:	1a9d      	subs	r5, r3, r2
    fb4e:	6a3b      	ldr	r3, [r7, #32]
    fb50:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    fb54:	f240 8756 	bls.w	10a04 <__ssvfscanf_r+0x15f0>
    fb58:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    fb5a:	f000 bc5c 	b.w	10416 <__ssvfscanf_r+0x1002>
    fb5e:	f1b8 0f00 	cmp.w	r8, #0
    fb62:	bf08      	it	eq
    fb64:	f04f 38ff 	moveq.w	r8, #4294967295
    fb68:	07e0      	lsls	r0, r4, #31
    fb6a:	f140 827b 	bpl.w	10064 <__ssvfscanf_r+0xc50>
    fb6e:	f014 0310 	ands.w	r3, r4, #16
    fb72:	62bb      	str	r3, [r7, #40]	; 0x28
    fb74:	f040 83f3 	bne.w	1035e <__ssvfscanf_r+0xf4a>
    fb78:	0621      	lsls	r1, r4, #24
    fb7a:	f140 85ed 	bpl.w	10758 <__ssvfscanf_r+0x1344>
    fb7e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    fb80:	f856 3b04 	ldr.w	r3, [r6], #4
    fb84:	623b      	str	r3, [r7, #32]
    fb86:	2b00      	cmp	r3, #0
    fb88:	f43f ad39 	beq.w	f5fe <__ssvfscanf_r+0x1ea>
    fb8c:	2080      	movs	r0, #128	; 0x80
    fb8e:	f7fa f83d 	bl	9c0c <malloc>
    fb92:	4604      	mov	r4, r0
    fb94:	2800      	cmp	r0, #0
    fb96:	f000 86ee 	beq.w	10976 <__ssvfscanf_r+0x1562>
    fb9a:	6a3b      	ldr	r3, [r7, #32]
    fb9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fb9e:	6018      	str	r0, [r3, #0]
    fba0:	88d5      	ldrh	r5, [r2, #6]
    fba2:	8893      	ldrh	r3, [r2, #4]
    fba4:	429d      	cmp	r5, r3
    fba6:	f080 84dd 	bcs.w	10564 <__ssvfscanf_r+0x1150>
    fbaa:	6810      	ldr	r0, [r2, #0]
    fbac:	6a3b      	ldr	r3, [r7, #32]
    fbae:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    fbb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fbb4:	633e      	str	r6, [r7, #48]	; 0x30
    fbb6:	3501      	adds	r5, #1
    fbb8:	80dd      	strh	r5, [r3, #6]
    fbba:	2320      	movs	r3, #32
    fbbc:	61fc      	str	r4, [r7, #28]
    fbbe:	61bb      	str	r3, [r7, #24]
    fbc0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    fbc2:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    fbc6:	2500      	movs	r5, #0
    fbc8:	46c2      	mov	sl, r8
    fbca:	46a0      	mov	r8, r4
    fbcc:	f7fc f820 	bl	bc10 <__locale_mb_cur_max>
    fbd0:	42a8      	cmp	r0, r5
    fbd2:	f43f ad0b 	beq.w	f5ec <__ssvfscanf_r+0x1d8>
    fbd6:	e9db 3200 	ldrd	r3, r2, [fp]
    fbda:	f813 1b01 	ldrb.w	r1, [r3], #1
    fbde:	3a01      	subs	r2, #1
    fbe0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    fbe4:	e9cb 3200 	strd	r3, r2, [fp]
    fbe8:	2e03      	cmp	r6, #3
    fbea:	f105 0301 	add.w	r3, r5, #1
    fbee:	5541      	strb	r1, [r0, r5]
    fbf0:	64bb      	str	r3, [r7, #72]	; 0x48
    fbf2:	f107 0460 	add.w	r4, r7, #96	; 0x60
    fbf6:	d102      	bne.n	fbfe <__ssvfscanf_r+0x7ea>
    fbf8:	6823      	ldr	r3, [r4, #0]
    fbfa:	2b04      	cmp	r3, #4
    fbfc:	d004      	beq.n	fc08 <__ssvfscanf_r+0x7f4>
    fbfe:	2208      	movs	r2, #8
    fc00:	2100      	movs	r1, #0
    fc02:	4620      	mov	r0, r4
    fc04:	f7fb ff3a 	bl	ba7c <memset>
    fc08:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    fc0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fc0e:	9400      	str	r4, [sp, #0]
    fc10:	4641      	mov	r1, r8
    fc12:	4648      	mov	r0, r9
    fc14:	f002 fb94 	bl	12340 <_mbrtowc_r>
    fc18:	1c42      	adds	r2, r0, #1
    fc1a:	4606      	mov	r6, r0
    fc1c:	f43f ace6 	beq.w	f5ec <__ssvfscanf_r+0x1d8>
    fc20:	2800      	cmp	r0, #0
    fc22:	f040 82ca 	bne.w	101ba <__ssvfscanf_r+0xda6>
    fc26:	f8c8 0000 	str.w	r0, [r8]
    fc2a:	4605      	mov	r5, r0
    fc2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
    fc30:	2208      	movs	r2, #8
    fc32:	2100      	movs	r1, #0
    fc34:	4618      	mov	r0, r3
    fc36:	637b      	str	r3, [r7, #52]	; 0x34
    fc38:	f7fb ff20 	bl	ba7c <memset>
    fc3c:	4950      	ldr	r1, [pc, #320]	; (fd80 <__ssvfscanf_r+0x96c>)
    fc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fc40:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    fc44:	462a      	mov	r2, r5
    fc46:	4648      	mov	r0, r9
    fc48:	460d      	mov	r5, r1
    fc4a:	f107 0150 	add.w	r1, r7, #80	; 0x50
    fc4e:	47a8      	blx	r5
    fc50:	2801      	cmp	r0, #1
    fc52:	f000 83d5 	beq.w	10400 <__ssvfscanf_r+0xfec>
    fc56:	2200      	movs	r2, #0
    fc58:	f107 0370 	add.w	r3, r7, #112	; 0x70
    fc5c:	5c9b      	ldrb	r3, [r3, r2]
    fc5e:	2b00      	cmp	r3, #0
    fc60:	f000 85a1 	beq.w	107a6 <__ssvfscanf_r+0x1392>
    fc64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fc66:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fc68:	2e03      	cmp	r6, #3
    fc6a:	4413      	add	r3, r2
    fc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    fc6e:	f000 83ca 	beq.w	10406 <__ssvfscanf_r+0xff2>
    fc72:	f10a 3aff 	add.w	sl, sl, #4294967295
    fc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc78:	b95b      	cbnz	r3, fc92 <__ssvfscanf_r+0x87e>
    fc7a:	6a3b      	ldr	r3, [r7, #32]
    fc7c:	f108 0804 	add.w	r8, r8, #4
    fc80:	b13b      	cbz	r3, fc92 <__ssvfscanf_r+0x87e>
    fc82:	69fb      	ldr	r3, [r7, #28]
    fc84:	eba8 0403 	sub.w	r4, r8, r3
    fc88:	69bb      	ldr	r3, [r7, #24]
    fc8a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    fc8e:	f240 8405 	bls.w	1049c <__ssvfscanf_r+0x1088>
    fc92:	f8db 3004 	ldr.w	r3, [fp, #4]
    fc96:	2b00      	cmp	r3, #0
    fc98:	f04f 0500 	mov.w	r5, #0
    fc9c:	f340 8296 	ble.w	101cc <__ssvfscanf_r+0xdb8>
    fca0:	f1ba 0f00 	cmp.w	sl, #0
    fca4:	d192      	bne.n	fbcc <__ssvfscanf_r+0x7b8>
    fca6:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    fcaa:	627e      	str	r6, [r7, #36]	; 0x24
    fcac:	4644      	mov	r4, r8
    fcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fcb0:	2b00      	cmp	r3, #0
    fcb2:	f47f abd6 	bne.w	f462 <__ssvfscanf_r+0x4e>
    fcb6:	6023      	str	r3, [r4, #0]
    fcb8:	6a3b      	ldr	r3, [r7, #32]
    fcba:	2b00      	cmp	r3, #0
    fcbc:	f000 81c2 	beq.w	10044 <__ssvfscanf_r+0xc30>
    fcc0:	69fb      	ldr	r3, [r7, #28]
    fcc2:	69ba      	ldr	r2, [r7, #24]
    fcc4:	1ae1      	subs	r1, r4, r3
    fcc6:	108b      	asrs	r3, r1, #2
    fcc8:	3301      	adds	r3, #1
    fcca:	429a      	cmp	r2, r3
    fccc:	f240 81ba 	bls.w	10044 <__ssvfscanf_r+0xc30>
    fcd0:	6a3c      	ldr	r4, [r7, #32]
    fcd2:	3104      	adds	r1, #4
    fcd4:	6820      	ldr	r0, [r4, #0]
    fcd6:	f7fa fa65 	bl	a1a4 <realloc>
    fcda:	2800      	cmp	r0, #0
    fcdc:	f000 81b2 	beq.w	10044 <__ssvfscanf_r+0xc30>
    fce0:	6020      	str	r0, [r4, #0]
    fce2:	e1af      	b.n	10044 <__ssvfscanf_r+0xc30>
    fce4:	0521      	lsls	r1, r4, #20
    fce6:	f57f adb3 	bpl.w	f850 <__ssvfscanf_r+0x43c>
    fcea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fcec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fcee:	185b      	adds	r3, r3, r1
    fcf0:	f47f adae 	bne.w	f850 <__ssvfscanf_r+0x43c>
    fcf4:	64bb      	str	r3, [r7, #72]	; 0x48
    fcf6:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    fcfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    fcfc:	e593      	b.n	f826 <__ssvfscanf_r+0x412>
    fcfe:	4b21      	ldr	r3, [pc, #132]	; (fd84 <__ssvfscanf_r+0x970>)
    fd00:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    fd04:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    fd08:	e66b      	b.n	f9e2 <__ssvfscanf_r+0x5ce>
    fd0a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    fd0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    fd12:	f47f ad9d 	bne.w	f850 <__ssvfscanf_r+0x43c>
    fd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fd18:	2b01      	cmp	r3, #1
    fd1a:	f47f ad99 	bne.w	f850 <__ssvfscanf_r+0x43c>
    fd1e:	2330      	movs	r3, #48	; 0x30
    fd20:	f805 3b01 	strb.w	r3, [r5], #1
    fd24:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    fd28:	2300      	movs	r3, #0
    fd2a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    fd2e:	3e01      	subs	r6, #1
    fd30:	637b      	str	r3, [r7, #52]	; 0x34
    fd32:	e578      	b.n	f826 <__ssvfscanf_r+0x412>
    fd34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fd36:	2b06      	cmp	r3, #6
    fd38:	f040 8574 	bne.w	10824 <__ssvfscanf_r+0x1410>
    fd3c:	2307      	movs	r3, #7
    fd3e:	64bb      	str	r3, [r7, #72]	; 0x48
    fd40:	e571      	b.n	f826 <__ssvfscanf_r+0x412>
    fd42:	0523      	lsls	r3, r4, #20
    fd44:	f57f ad84 	bpl.w	f850 <__ssvfscanf_r+0x43c>
    fd48:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    fd4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    fd50:	d005      	beq.n	fd5e <__ssvfscanf_r+0x94a>
    fd52:	0561      	lsls	r1, r4, #21
    fd54:	f57f ad7c 	bpl.w	f850 <__ssvfscanf_r+0x43c>
    fd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fd5a:	2b00      	cmp	r3, #0
    fd5c:	d047      	beq.n	fdee <__ssvfscanf_r+0x9da>
    fd5e:	05a3      	lsls	r3, r4, #22
    fd60:	d404      	bmi.n	fd6c <__ssvfscanf_r+0x958>
    fd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fd64:	69f9      	ldr	r1, [r7, #28]
    fd66:	1a5b      	subs	r3, r3, r1
    fd68:	e9c7 5305 	strd	r5, r3, [r7, #20]
    fd6c:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    fd70:	2300      	movs	r3, #0
    fd72:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    fd76:	637b      	str	r3, [r7, #52]	; 0x34
    fd78:	e555      	b.n	f826 <__ssvfscanf_r+0x412>
    fd7a:	bf00      	nop
    fd7c:	20000aa5 	.word	0x20000aa5
    fd80:	200085f4 	.word	0x200085f4
    fd84:	200026c8 	.word	0x200026c8
    fd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fd8a:	2b00      	cmp	r3, #0
    fd8c:	f000 81ff 	beq.w	1018e <__ssvfscanf_r+0xd7a>
    fd90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fd92:	2b02      	cmp	r3, #2
    fd94:	f000 83b0 	beq.w	104f8 <__ssvfscanf_r+0x10e4>
    fd98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fd9a:	2b01      	cmp	r3, #1
    fd9c:	f000 81f1 	beq.w	10182 <__ssvfscanf_r+0xd6e>
    fda0:	2b04      	cmp	r3, #4
    fda2:	f000 81ee 	beq.w	10182 <__ssvfscanf_r+0xd6e>
    fda6:	e553      	b.n	f850 <__ssvfscanf_r+0x43c>
    fda8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fdaa:	2b07      	cmp	r3, #7
    fdac:	f040 853a 	bne.w	10824 <__ssvfscanf_r+0x1410>
    fdb0:	2308      	movs	r3, #8
    fdb2:	64bb      	str	r3, [r7, #72]	; 0x48
    fdb4:	e537      	b.n	f826 <__ssvfscanf_r+0x412>
    fdb6:	0520      	lsls	r0, r4, #20
    fdb8:	f100 81f9 	bmi.w	101ae <__ssvfscanf_r+0xd9a>
    fdbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fdbe:	2b01      	cmp	r3, #1
    fdc0:	f47f ad46 	bne.w	f850 <__ssvfscanf_r+0x43c>
    fdc4:	2302      	movs	r3, #2
    fdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    fdc8:	e52d      	b.n	f826 <__ssvfscanf_r+0x412>
    fdca:	0623      	lsls	r3, r4, #24
    fdcc:	f57f ad40 	bpl.w	f850 <__ssvfscanf_r+0x43c>
    fdd0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fdd4:	e527      	b.n	f826 <__ssvfscanf_r+0x412>
    fdd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fdd8:	2b00      	cmp	r3, #0
    fdda:	f040 81cc 	bne.w	10176 <__ssvfscanf_r+0xd62>
    fdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fde0:	b9b3      	cbnz	r3, fe10 <__ssvfscanf_r+0x9fc>
    fde2:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    fde6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    fdea:	f000 8520 	beq.w	1082e <__ssvfscanf_r+0x141a>
    fdee:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    fdf0:	ee18 9a10 	vmov	r9, s16
    fdf4:	e533      	b.n	f85e <__ssvfscanf_r+0x44a>
    fdf6:	0521      	lsls	r1, r4, #20
    fdf8:	f100 81b7 	bmi.w	1016a <__ssvfscanf_r+0xd56>
    fdfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fdfe:	2b02      	cmp	r3, #2
    fe00:	f040 8510 	bne.w	10824 <__ssvfscanf_r+0x1410>
    fe04:	2303      	movs	r3, #3
    fe06:	64bb      	str	r3, [r7, #72]	; 0x48
    fe08:	e50d      	b.n	f826 <__ssvfscanf_r+0x412>
    fe0a:	0520      	lsls	r0, r4, #20
    fe0c:	d59c      	bpl.n	fd48 <__ssvfscanf_r+0x934>
    fe0e:	e76c      	b.n	fcea <__ssvfscanf_r+0x8d6>
    fe10:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    fe12:	ee18 9a10 	vmov	r9, s16
    fe16:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    fe1a:	e520      	b.n	f85e <__ssvfscanf_r+0x44a>
    fe1c:	4b8d      	ldr	r3, [pc, #564]	; (10054 <__ssvfscanf_r+0xc40>)
    fe1e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    fe22:	2e08      	cmp	r6, #8
    fe24:	f73f addb 	bgt.w	f9de <__ssvfscanf_r+0x5ca>
    fe28:	e5e8      	b.n	f9fc <__ssvfscanf_r+0x5e8>
    fe2a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    fe2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    fe32:	f47f ade3 	bne.w	f9fc <__ssvfscanf_r+0x5e8>
    fe36:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    fe3a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    fe3e:	2610      	movs	r6, #16
    fe40:	e5cf      	b.n	f9e2 <__ssvfscanf_r+0x5ce>
    fe42:	0623      	lsls	r3, r4, #24
    fe44:	f57f adda 	bpl.w	f9fc <__ssvfscanf_r+0x5e8>
    fe48:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fe4c:	e5c9      	b.n	f9e2 <__ssvfscanf_r+0x5ce>
    fe4e:	f044 0401 	orr.w	r4, r4, #1
    fe52:	f8db 3004 	ldr.w	r3, [fp, #4]
    fe56:	64f9      	str	r1, [r7, #76]	; 0x4c
    fe58:	2b00      	cmp	r3, #0
    fe5a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    fe5e:	f04f 0500 	mov.w	r5, #0
    fe62:	f73f abf8 	bgt.w	f656 <__ssvfscanf_r+0x242>
    fe66:	4659      	mov	r1, fp
    fe68:	4648      	mov	r0, r9
    fe6a:	f002 fc7d 	bl	12768 <__ssrefill_r>
    fe6e:	2800      	cmp	r0, #0
    fe70:	f47f abbc 	bne.w	f5ec <__ssvfscanf_r+0x1d8>
    fe74:	0660      	lsls	r0, r4, #25
    fe76:	f53f abf1 	bmi.w	f65c <__ssvfscanf_r+0x248>
    fe7a:	f8db 2000 	ldr.w	r2, [fp]
    fe7e:	4e76      	ldr	r6, [pc, #472]	; (10058 <__ssvfscanf_r+0xc44>)
    fe80:	7813      	ldrb	r3, [r2, #0]
    fe82:	5cf3      	ldrb	r3, [r6, r3]
    fe84:	0719      	lsls	r1, r3, #28
    fe86:	f57f abe9 	bpl.w	f65c <__ssvfscanf_r+0x248>
    fe8a:	f8db 3004 	ldr.w	r3, [fp, #4]
    fe8e:	3b01      	subs	r3, #1
    fe90:	2b00      	cmp	r3, #0
    fe92:	f10a 0a01 	add.w	sl, sl, #1
    fe96:	f8cb 3004 	str.w	r3, [fp, #4]
    fe9a:	f102 0201 	add.w	r2, r2, #1
    fe9e:	dd4a      	ble.n	ff36 <__ssvfscanf_r+0xb22>
    fea0:	f8cb 2000 	str.w	r2, [fp]
    fea4:	7813      	ldrb	r3, [r2, #0]
    fea6:	5cf3      	ldrb	r3, [r6, r3]
    fea8:	0719      	lsls	r1, r3, #28
    feaa:	f57f abd7 	bpl.w	f65c <__ssvfscanf_r+0x248>
    feae:	e7ec      	b.n	fe8a <__ssvfscanf_r+0xa76>
    feb0:	f044 0401 	orr.w	r4, r4, #1
    feb4:	4b69      	ldr	r3, [pc, #420]	; (1005c <__ssvfscanf_r+0xc48>)
    feb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    feb8:	2308      	movs	r3, #8
    feba:	64f9      	str	r1, [r7, #76]	; 0x4c
    febc:	63bb      	str	r3, [r7, #56]	; 0x38
    febe:	2503      	movs	r5, #3
    fec0:	f7ff bbc4 	b.w	f64c <__ssvfscanf_r+0x238>
    fec4:	f044 0401 	orr.w	r4, r4, #1
    fec8:	4b65      	ldr	r3, [pc, #404]	; (10060 <__ssvfscanf_r+0xc4c>)
    feca:	62fb      	str	r3, [r7, #44]	; 0x2c
    fecc:	230a      	movs	r3, #10
    fece:	64f9      	str	r1, [r7, #76]	; 0x4c
    fed0:	63bb      	str	r3, [r7, #56]	; 0x38
    fed2:	2503      	movs	r5, #3
    fed4:	f7ff bbba 	b.w	f64c <__ssvfscanf_r+0x238>
    fed8:	0523      	lsls	r3, r4, #20
    feda:	f57f ad82 	bpl.w	f9e2 <__ssvfscanf_r+0x5ce>
    fede:	b916      	cbnz	r6, fee6 <__ssvfscanf_r+0xad2>
    fee0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    fee4:	2608      	movs	r6, #8
    fee6:	0563      	lsls	r3, r4, #21
    fee8:	f100 81a6 	bmi.w	10238 <__ssvfscanf_r+0xe24>
    feec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    feee:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    fef2:	b11b      	cbz	r3, fefc <__ssvfscanf_r+0xae8>
    fef4:	3b01      	subs	r3, #1
    fef6:	63fb      	str	r3, [r7, #60]	; 0x3c
    fef8:	f108 0801 	add.w	r8, r8, #1
    fefc:	684b      	ldr	r3, [r1, #4]
    fefe:	3b01      	subs	r3, #1
    ff00:	2b00      	cmp	r3, #0
    ff02:	f10a 0a01 	add.w	sl, sl, #1
    ff06:	604b      	str	r3, [r1, #4]
    ff08:	f73f ad73 	bgt.w	f9f2 <__ssvfscanf_r+0x5de>
    ff0c:	4648      	mov	r0, r9
    ff0e:	64b9      	str	r1, [r7, #72]	; 0x48
    ff10:	f002 fc2a 	bl	12768 <__ssrefill_r>
    ff14:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    ff16:	2800      	cmp	r0, #0
    ff18:	f43f ad6d 	beq.w	f9f6 <__ssvfscanf_r+0x5e2>
    ff1c:	e56e      	b.n	f9fc <__ssvfscanf_r+0x5e8>
    ff1e:	ee18 0a10 	vmov	r0, s16
    ff22:	4659      	mov	r1, fp
    ff24:	f002 fc20 	bl	12768 <__ssrefill_r>
    ff28:	2800      	cmp	r0, #0
    ff2a:	f47f ac91 	bne.w	f850 <__ssvfscanf_r+0x43c>
    ff2e:	2e00      	cmp	r6, #0
    ff30:	f47f abc4 	bne.w	f6bc <__ssvfscanf_r+0x2a8>
    ff34:	e48c      	b.n	f850 <__ssvfscanf_r+0x43c>
    ff36:	4659      	mov	r1, fp
    ff38:	4648      	mov	r0, r9
    ff3a:	f002 fc15 	bl	12768 <__ssrefill_r>
    ff3e:	2800      	cmp	r0, #0
    ff40:	f47f ab54 	bne.w	f5ec <__ssvfscanf_r+0x1d8>
    ff44:	f8db 2000 	ldr.w	r2, [fp]
    ff48:	e79a      	b.n	fe80 <__ssvfscanf_r+0xa6c>
    ff4a:	f8db 2004 	ldr.w	r2, [fp, #4]
    ff4e:	e00f      	b.n	ff70 <__ssvfscanf_r+0xb5c>
    ff50:	f8db 3000 	ldr.w	r3, [fp]
    ff54:	781a      	ldrb	r2, [r3, #0]
    ff56:	5cb2      	ldrb	r2, [r6, r2]
    ff58:	0711      	lsls	r1, r2, #28
    ff5a:	f103 0301 	add.w	r3, r3, #1
    ff5e:	f57f aa80 	bpl.w	f462 <__ssvfscanf_r+0x4e>
    ff62:	f8db 2004 	ldr.w	r2, [fp, #4]
    ff66:	3a01      	subs	r2, #1
    ff68:	e9cb 3200 	strd	r3, r2, [fp]
    ff6c:	f10a 0a01 	add.w	sl, sl, #1
    ff70:	2a00      	cmp	r2, #0
    ff72:	dced      	bgt.n	ff50 <__ssvfscanf_r+0xb3c>
    ff74:	4659      	mov	r1, fp
    ff76:	4648      	mov	r0, r9
    ff78:	f002 fbf6 	bl	12768 <__ssrefill_r>
    ff7c:	2800      	cmp	r0, #0
    ff7e:	d0e7      	beq.n	ff50 <__ssvfscanf_r+0xb3c>
    ff80:	f7ff ba6f 	b.w	f462 <__ssvfscanf_r+0x4e>
    ff84:	06e1      	lsls	r1, r4, #27
    ff86:	f100 8349 	bmi.w	1061c <__ssvfscanf_r+0x1208>
    ff8a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    ff8e:	f000 83ab 	beq.w	106e8 <__ssvfscanf_r+0x12d4>
    ff92:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    ff94:	f854 6b04 	ldr.w	r6, [r4], #4
    ff98:	64be      	str	r6, [r7, #72]	; 0x48
    ff9a:	2e00      	cmp	r6, #0
    ff9c:	f43f ab2f 	beq.w	f5fe <__ssvfscanf_r+0x1ea>
    ffa0:	2020      	movs	r0, #32
    ffa2:	f7f9 fe33 	bl	9c0c <malloc>
    ffa6:	4605      	mov	r5, r0
    ffa8:	2800      	cmp	r0, #0
    ffaa:	f000 8462 	beq.w	10872 <__ssvfscanf_r+0x145e>
    ffae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ffb0:	6030      	str	r0, [r6, #0]
    ffb2:	8893      	ldrh	r3, [r2, #4]
    ffb4:	88d6      	ldrh	r6, [r2, #6]
    ffb6:	429e      	cmp	r6, r3
    ffb8:	f080 82a8 	bcs.w	1050c <__ssvfscanf_r+0x10f8>
    ffbc:	6810      	ldr	r0, [r2, #0]
    ffbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ffc0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    ffc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ffc6:	633c      	str	r4, [r7, #48]	; 0x30
    ffc8:	3601      	adds	r6, #1
    ffca:	80de      	strh	r6, [r3, #6]
    ffcc:	2320      	movs	r3, #32
    ffce:	63fb      	str	r3, [r7, #60]	; 0x3c
    ffd0:	f8db 2000 	ldr.w	r2, [fp]
    ffd4:	4e20      	ldr	r6, [pc, #128]	; (10058 <__ssvfscanf_r+0xc44>)
    ffd6:	7811      	ldrb	r1, [r2, #0]
    ffd8:	5c71      	ldrb	r1, [r6, r1]
    ffda:	0708      	lsls	r0, r1, #28
    ffdc:	f100 82ac 	bmi.w	10538 <__ssvfscanf_r+0x1124>
    ffe0:	4633      	mov	r3, r6
    ffe2:	462c      	mov	r4, r5
    ffe4:	4610      	mov	r0, r2
    ffe6:	462e      	mov	r6, r5
    ffe8:	f8db 1004 	ldr.w	r1, [fp, #4]
    ffec:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ffee:	3901      	subs	r1, #1
    fff0:	f8cb 1004 	str.w	r1, [fp, #4]
    fff4:	1c41      	adds	r1, r0, #1
    fff6:	f8cb 1000 	str.w	r1, [fp]
    fffa:	4635      	mov	r5, r6
    fffc:	7801      	ldrb	r1, [r0, #0]
    fffe:	f805 1b01 	strb.w	r1, [r5], #1
   10002:	b122      	cbz	r2, 1000e <__ssvfscanf_r+0xbfa>
   10004:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10006:	1b2e      	subs	r6, r5, r4
   10008:	4296      	cmp	r6, r2
   1000a:	f080 837a 	bcs.w	10702 <__ssvfscanf_r+0x12ee>
   1000e:	f1b8 0801 	subs.w	r8, r8, #1
   10012:	d00b      	beq.n	1002c <__ssvfscanf_r+0xc18>
   10014:	f8db 1004 	ldr.w	r1, [fp, #4]
   10018:	2900      	cmp	r1, #0
   1001a:	462e      	mov	r6, r5
   1001c:	f340 83ae 	ble.w	1077c <__ssvfscanf_r+0x1368>
   10020:	f8db 0000 	ldr.w	r0, [fp]
   10024:	7801      	ldrb	r1, [r0, #0]
   10026:	5c59      	ldrb	r1, [r3, r1]
   10028:	0709      	lsls	r1, r1, #28
   1002a:	d5dd      	bpl.n	ffe8 <__ssvfscanf_r+0xbd4>
   1002c:	1b29      	subs	r1, r5, r4
   1002e:	448a      	add	sl, r1
   10030:	3101      	adds	r1, #1
   10032:	f04f 0300 	mov.w	r3, #0
   10036:	702b      	strb	r3, [r5, #0]
   10038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1003a:	b11b      	cbz	r3, 10044 <__ssvfscanf_r+0xc30>
   1003c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1003e:	428b      	cmp	r3, r1
   10040:	f200 8394 	bhi.w	1076c <__ssvfscanf_r+0x1358>
   10044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10046:	3301      	adds	r3, #1
   10048:	647b      	str	r3, [r7, #68]	; 0x44
   1004a:	f7ff ba0a 	b.w	f462 <__ssvfscanf_r+0x4e>
   1004e:	2300      	movs	r3, #0
   10050:	63fb      	str	r3, [r7, #60]	; 0x3c
   10052:	e461      	b.n	f918 <__ssvfscanf_r+0x504>
   10054:	200026c8 	.word	0x200026c8
   10058:	20000aa5 	.word	0x20000aa5
   1005c:	0001202d 	.word	0x0001202d
   10060:	0000b559 	.word	0x0000b559
   10064:	06e6      	lsls	r6, r4, #27
   10066:	f100 8181 	bmi.w	1036c <__ssvfscanf_r+0xf58>
   1006a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   1006e:	f000 836d 	beq.w	1074c <__ssvfscanf_r+0x1338>
   10072:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10074:	f854 6b04 	ldr.w	r6, [r4], #4
   10078:	64be      	str	r6, [r7, #72]	; 0x48
   1007a:	2e00      	cmp	r6, #0
   1007c:	f43f aabf 	beq.w	f5fe <__ssvfscanf_r+0x1ea>
   10080:	2020      	movs	r0, #32
   10082:	f7f9 fdc3 	bl	9c0c <malloc>
   10086:	4605      	mov	r5, r0
   10088:	2800      	cmp	r0, #0
   1008a:	f000 83f2 	beq.w	10872 <__ssvfscanf_r+0x145e>
   1008e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10090:	6030      	str	r0, [r6, #0]
   10092:	8893      	ldrh	r3, [r2, #4]
   10094:	88d6      	ldrh	r6, [r2, #6]
   10096:	429e      	cmp	r6, r3
   10098:	f080 827a 	bcs.w	10590 <__ssvfscanf_r+0x117c>
   1009c:	6810      	ldr	r0, [r2, #0]
   1009e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   100a0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   100a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100a6:	633c      	str	r4, [r7, #48]	; 0x30
   100a8:	3601      	adds	r6, #1
   100aa:	80de      	strh	r6, [r3, #6]
   100ac:	2420      	movs	r4, #32
   100ae:	f8db 2000 	ldr.w	r2, [fp]
   100b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
   100b6:	4619      	mov	r1, r3
   100b8:	7813      	ldrb	r3, [r2, #0]
   100ba:	5ccb      	ldrb	r3, [r1, r3]
   100bc:	2b00      	cmp	r3, #0
   100be:	f43f aa9e 	beq.w	f5fe <__ssvfscanf_r+0x1ea>
   100c2:	ee08 9a10 	vmov	s16, r9
   100c6:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   100ca:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   100ce:	462e      	mov	r6, r5
   100d0:	46a2      	mov	sl, r4
   100d2:	4610      	mov	r0, r2
   100d4:	460c      	mov	r4, r1
   100d6:	f8db 1004 	ldr.w	r1, [fp, #4]
   100da:	1c43      	adds	r3, r0, #1
   100dc:	3901      	subs	r1, #1
   100de:	e9cb 3100 	strd	r3, r1, [fp]
   100e2:	4629      	mov	r1, r5
   100e4:	7800      	ldrb	r0, [r0, #0]
   100e6:	f801 0b01 	strb.w	r0, [r1], #1
   100ea:	f1b9 0f00 	cmp.w	r9, #0
   100ee:	d002      	beq.n	100f6 <__ssvfscanf_r+0xce2>
   100f0:	1b8d      	subs	r5, r1, r6
   100f2:	4555      	cmp	r5, sl
   100f4:	d27a      	bcs.n	101ec <__ssvfscanf_r+0xdd8>
   100f6:	460d      	mov	r5, r1
   100f8:	f1b8 0801 	subs.w	r8, r8, #1
   100fc:	d00a      	beq.n	10114 <__ssvfscanf_r+0xd00>
   100fe:	f8db 1004 	ldr.w	r1, [fp, #4]
   10102:	2900      	cmp	r1, #0
   10104:	f340 816a 	ble.w	103dc <__ssvfscanf_r+0xfc8>
   10108:	f8db 0000 	ldr.w	r0, [fp]
   1010c:	7801      	ldrb	r1, [r0, #0]
   1010e:	5c61      	ldrb	r1, [r4, r1]
   10110:	2900      	cmp	r1, #0
   10112:	d1e0      	bne.n	100d6 <__ssvfscanf_r+0xcc2>
   10114:	4654      	mov	r4, sl
   10116:	ee18 9a10 	vmov	r9, s16
   1011a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1011e:	1bae      	subs	r6, r5, r6
   10120:	f43f aa6d 	beq.w	f5fe <__ssvfscanf_r+0x1ea>
   10124:	f04f 0300 	mov.w	r3, #0
   10128:	702b      	strb	r3, [r5, #0]
   1012a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1012c:	b11b      	cbz	r3, 10136 <__ssvfscanf_r+0xd22>
   1012e:	1c71      	adds	r1, r6, #1
   10130:	428c      	cmp	r4, r1
   10132:	f200 832d 	bhi.w	10790 <__ssvfscanf_r+0x137c>
   10136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10138:	3301      	adds	r3, #1
   1013a:	44b2      	add	sl, r6
   1013c:	647b      	str	r3, [r7, #68]	; 0x44
   1013e:	f7ff b990 	b.w	f462 <__ssvfscanf_r+0x4e>
   10142:	2300      	movs	r3, #0
   10144:	613b      	str	r3, [r7, #16]
   10146:	f7ff baa9 	b.w	f69c <__ssvfscanf_r+0x288>
   1014a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   1014e:	f47f aa56 	bne.w	f5fe <__ssvfscanf_r+0x1ea>
   10152:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   10156:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   1015a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   1015e:	f7ff ba67 	b.w	f630 <__ssvfscanf_r+0x21c>
   10162:	64f9      	str	r1, [r7, #76]	; 0x4c
   10164:	2504      	movs	r5, #4
   10166:	f7ff ba71 	b.w	f64c <__ssvfscanf_r+0x238>
   1016a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1016c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1016e:	185b      	adds	r3, r3, r1
   10170:	f47f ae44 	bne.w	fdfc <__ssvfscanf_r+0x9e8>
   10174:	e5be      	b.n	fcf4 <__ssvfscanf_r+0x8e0>
   10176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10178:	2b03      	cmp	r3, #3
   1017a:	d002      	beq.n	10182 <__ssvfscanf_r+0xd6e>
   1017c:	2b05      	cmp	r3, #5
   1017e:	f47f ab67 	bne.w	f850 <__ssvfscanf_r+0x43c>
   10182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10184:	3301      	adds	r3, #1
   10186:	b2db      	uxtb	r3, r3
   10188:	64bb      	str	r3, [r7, #72]	; 0x48
   1018a:	f7ff bb4c 	b.w	f826 <__ssvfscanf_r+0x412>
   1018e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10190:	2b00      	cmp	r3, #0
   10192:	f47f ae01 	bne.w	fd98 <__ssvfscanf_r+0x984>
   10196:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   1019a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1019e:	f47f adfb 	bne.w	fd98 <__ssvfscanf_r+0x984>
   101a2:	2301      	movs	r3, #1
   101a4:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   101a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   101aa:	f7ff bb3c 	b.w	f826 <__ssvfscanf_r+0x412>
   101ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   101b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   101b2:	185b      	adds	r3, r3, r1
   101b4:	f47f ae02 	bne.w	fdbc <__ssvfscanf_r+0x9a8>
   101b8:	e59c      	b.n	fcf4 <__ssvfscanf_r+0x8e0>
   101ba:	1c83      	adds	r3, r0, #2
   101bc:	f040 845b 	bne.w	10a76 <__ssvfscanf_r+0x1662>
   101c0:	f8db 3004 	ldr.w	r3, [fp, #4]
   101c4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   101c6:	2b00      	cmp	r3, #0
   101c8:	f73f ad00 	bgt.w	fbcc <__ssvfscanf_r+0x7b8>
   101cc:	4659      	mov	r1, fp
   101ce:	4648      	mov	r0, r9
   101d0:	f002 faca 	bl	12768 <__ssrefill_r>
   101d4:	2800      	cmp	r0, #0
   101d6:	f43f ad63 	beq.w	fca0 <__ssvfscanf_r+0x88c>
   101da:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   101de:	627e      	str	r6, [r7, #36]	; 0x24
   101e0:	4644      	mov	r4, r8
   101e2:	2d00      	cmp	r5, #0
   101e4:	f43f ad63 	beq.w	fcae <__ssvfscanf_r+0x89a>
   101e8:	f7ff ba00 	b.w	f5ec <__ssvfscanf_r+0x1d8>
   101ec:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   101f0:	4630      	mov	r0, r6
   101f2:	4651      	mov	r1, sl
   101f4:	f7f9 ffd6 	bl	a1a4 <realloc>
   101f8:	4606      	mov	r6, r0
   101fa:	2800      	cmp	r0, #0
   101fc:	f000 8339 	beq.w	10872 <__ssvfscanf_r+0x145e>
   10200:	4405      	add	r5, r0
   10202:	f8c9 0000 	str.w	r0, [r9]
   10206:	e777      	b.n	100f8 <__ssvfscanf_r+0xce4>
   10208:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   1020c:	4bbc      	ldr	r3, [pc, #752]	; (10500 <__ssvfscanf_r+0x10ec>)
   1020e:	62fb      	str	r3, [r7, #44]	; 0x2c
   10210:	2310      	movs	r3, #16
   10212:	64f9      	str	r1, [r7, #76]	; 0x4c
   10214:	63bb      	str	r3, [r7, #56]	; 0x38
   10216:	2503      	movs	r5, #3
   10218:	f7ff ba18 	b.w	f64c <__ssvfscanf_r+0x238>
   1021c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1021e:	3301      	adds	r3, #1
   10220:	637b      	str	r3, [r7, #52]	; 0x34
   10222:	693b      	ldr	r3, [r7, #16]
   10224:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10228:	2b00      	cmp	r3, #0
   1022a:	f43f aafe 	beq.w	f82a <__ssvfscanf_r+0x416>
   1022e:	693b      	ldr	r3, [r7, #16]
   10230:	3b01      	subs	r3, #1
   10232:	613b      	str	r3, [r7, #16]
   10234:	f7ff bafa 	b.w	f82c <__ssvfscanf_r+0x418>
   10238:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   1023c:	f7ff bbd1 	b.w	f9e2 <__ssvfscanf_r+0x5ce>
   10240:	0722      	lsls	r2, r4, #28
   10242:	f140 81c7 	bpl.w	105d4 <__ssvfscanf_r+0x11c0>
   10246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10248:	f853 2b04 	ldr.w	r2, [r3], #4
   1024c:	633b      	str	r3, [r7, #48]	; 0x30
   1024e:	7010      	strb	r0, [r2, #0]
   10250:	f7ff bbf3 	b.w	fa3a <__ssvfscanf_r+0x626>
   10254:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   10258:	465a      	mov	r2, fp
   1025a:	4648      	mov	r0, r9
   1025c:	3d01      	subs	r5, #1
   1025e:	f002 fa43 	bl	126e8 <_sungetc_r>
   10262:	f7ff bbd5 	b.w	fa10 <__ssvfscanf_r+0x5fc>
   10266:	69fb      	ldr	r3, [r7, #28]
   10268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1026a:	4293      	cmp	r3, r2
   1026c:	f43f ab2d 	beq.w	f8ca <__ssvfscanf_r+0x4b6>
   10270:	1a9a      	subs	r2, r3, r2
   10272:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   10276:	429d      	cmp	r5, r3
   10278:	bf28      	it	cs
   1027a:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   1027e:	49a1      	ldr	r1, [pc, #644]	; (10504 <__ssvfscanf_r+0x10f0>)
   10280:	4628      	mov	r0, r5
   10282:	f7fb fa55 	bl	b730 <sprintf>
   10286:	f7ff bb20 	b.w	f8ca <__ssvfscanf_r+0x4b6>
   1028a:	06e2      	lsls	r2, r4, #27
   1028c:	f100 8131 	bmi.w	104f2 <__ssvfscanf_r+0x10de>
   10290:	0723      	lsls	r3, r4, #28
   10292:	f100 81ba 	bmi.w	1060a <__ssvfscanf_r+0x11f6>
   10296:	0766      	lsls	r6, r4, #29
   10298:	f140 82b4 	bpl.w	10804 <__ssvfscanf_r+0x13f0>
   1029c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1029e:	64f9      	str	r1, [r7, #76]	; 0x4c
   102a0:	f853 2b04 	ldr.w	r2, [r3], #4
   102a4:	633b      	str	r3, [r7, #48]	; 0x30
   102a6:	f8a2 a000 	strh.w	sl, [r2]
   102aa:	f7ff b8da 	b.w	f462 <__ssvfscanf_r+0x4e>
   102ae:	0723      	lsls	r3, r4, #28
   102b0:	f47f a9a5 	bne.w	f5fe <__ssvfscanf_r+0x1ea>
   102b4:	7842      	ldrb	r2, [r0, #1]
   102b6:	2a68      	cmp	r2, #104	; 0x68
   102b8:	f000 8186 	beq.w	105c8 <__ssvfscanf_r+0x11b4>
   102bc:	f044 0404 	orr.w	r4, r4, #4
   102c0:	4608      	mov	r0, r1
   102c2:	f7ff b92f 	b.w	f524 <__ssvfscanf_r+0x110>
   102c6:	4b8e      	ldr	r3, [pc, #568]	; (10500 <__ssvfscanf_r+0x10ec>)
   102c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   102ca:	230a      	movs	r3, #10
   102cc:	64f9      	str	r1, [r7, #76]	; 0x4c
   102ce:	63bb      	str	r3, [r7, #56]	; 0x38
   102d0:	2503      	movs	r5, #3
   102d2:	f7ff b9bb 	b.w	f64c <__ssvfscanf_r+0x238>
   102d6:	4b8c      	ldr	r3, [pc, #560]	; (10508 <__ssvfscanf_r+0x10f4>)
   102d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   102da:	2300      	movs	r3, #0
   102dc:	64f9      	str	r1, [r7, #76]	; 0x4c
   102de:	63bb      	str	r3, [r7, #56]	; 0x38
   102e0:	2503      	movs	r5, #3
   102e2:	f7ff b9b3 	b.w	f64c <__ssvfscanf_r+0x238>
   102e6:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   102ea:	e78f      	b.n	1020c <__ssvfscanf_r+0xdf8>
   102ec:	f107 0070 	add.w	r0, r7, #112	; 0x70
   102f0:	f000 fdde 	bl	10eb0 <__sccl>
   102f4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   102f8:	64f8      	str	r0, [r7, #76]	; 0x4c
   102fa:	2501      	movs	r5, #1
   102fc:	f7ff b9a6 	b.w	f64c <__ssvfscanf_r+0x238>
   10300:	0722      	lsls	r2, r4, #28
   10302:	f47f a97c 	bne.w	f5fe <__ssvfscanf_r+0x1ea>
   10306:	7842      	ldrb	r2, [r0, #1]
   10308:	2a6c      	cmp	r2, #108	; 0x6c
   1030a:	f000 8157 	beq.w	105bc <__ssvfscanf_r+0x11a8>
   1030e:	f044 0401 	orr.w	r4, r4, #1
   10312:	4608      	mov	r0, r1
   10314:	f7ff b906 	b.w	f524 <__ssvfscanf_r+0x110>
   10318:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   1031c:	f47f a96f 	bne.w	f5fe <__ssvfscanf_r+0x1ea>
   10320:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10322:	2a00      	cmp	r2, #0
   10324:	f000 81e7 	beq.w	106f6 <__ssvfscanf_r+0x12e2>
   10328:	7842      	ldrb	r2, [r0, #1]
   1032a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1032e:	4608      	mov	r0, r1
   10330:	f7ff b8f8 	b.w	f524 <__ssvfscanf_r+0x110>
   10334:	ea58 0804 	orrs.w	r8, r8, r4
   10338:	f47f a961 	bne.w	f5fe <__ssvfscanf_r+0x1ea>
   1033c:	7842      	ldrb	r2, [r0, #1]
   1033e:	2410      	movs	r4, #16
   10340:	4608      	mov	r0, r1
   10342:	f7ff b8ef 	b.w	f524 <__ssvfscanf_r+0x110>
   10346:	64f9      	str	r1, [r7, #76]	; 0x4c
   10348:	f7ff b8a7 	b.w	f49a <__ssvfscanf_r+0x86>
   1034c:	2300      	movs	r3, #0
   1034e:	623b      	str	r3, [r7, #32]
   10350:	62bb      	str	r3, [r7, #40]	; 0x28
   10352:	63fb      	str	r3, [r7, #60]	; 0x3c
   10354:	f107 0354 	add.w	r3, r7, #84	; 0x54
   10358:	64bb      	str	r3, [r7, #72]	; 0x48
   1035a:	f7ff bba9 	b.w	fab0 <__ssvfscanf_r+0x69c>
   1035e:	2300      	movs	r3, #0
   10360:	e9c7 3306 	strd	r3, r3, [r7, #24]
   10364:	623b      	str	r3, [r7, #32]
   10366:	f107 0454 	add.w	r4, r7, #84	; 0x54
   1036a:	e429      	b.n	fbc0 <__ssvfscanf_r+0x7ac>
   1036c:	f8db 3000 	ldr.w	r3, [fp]
   10370:	f107 0270 	add.w	r2, r7, #112	; 0x70
   10374:	4611      	mov	r1, r2
   10376:	781a      	ldrb	r2, [r3, #0]
   10378:	5c8a      	ldrb	r2, [r1, r2]
   1037a:	2a00      	cmp	r2, #0
   1037c:	f43f a93f 	beq.w	f5fe <__ssvfscanf_r+0x1ea>
   10380:	3301      	adds	r3, #1
   10382:	f8cb 3000 	str.w	r3, [fp]
   10386:	f8db 3004 	ldr.w	r3, [fp, #4]
   1038a:	f1b8 0f01 	cmp.w	r8, #1
   1038e:	f103 33ff 	add.w	r3, r3, #4294967295
   10392:	f8cb 3004 	str.w	r3, [fp, #4]
   10396:	bf18      	it	ne
   10398:	460c      	movne	r4, r1
   1039a:	d114      	bne.n	103c6 <__ssvfscanf_r+0xfb2>
   1039c:	f7ff bb53 	b.w	fa46 <__ssvfscanf_r+0x632>
   103a0:	f8db 3000 	ldr.w	r3, [fp]
   103a4:	781a      	ldrb	r2, [r3, #0]
   103a6:	5ca2      	ldrb	r2, [r4, r2]
   103a8:	3301      	adds	r3, #1
   103aa:	2a00      	cmp	r2, #0
   103ac:	f43f ab4b 	beq.w	fa46 <__ssvfscanf_r+0x632>
   103b0:	f8cb 3000 	str.w	r3, [fp]
   103b4:	f8db 3004 	ldr.w	r3, [fp, #4]
   103b8:	3501      	adds	r5, #1
   103ba:	3b01      	subs	r3, #1
   103bc:	4545      	cmp	r5, r8
   103be:	f8cb 3004 	str.w	r3, [fp, #4]
   103c2:	f43f ab40 	beq.w	fa46 <__ssvfscanf_r+0x632>
   103c6:	2b00      	cmp	r3, #0
   103c8:	dcea      	bgt.n	103a0 <__ssvfscanf_r+0xf8c>
   103ca:	4659      	mov	r1, fp
   103cc:	4648      	mov	r0, r9
   103ce:	f002 f9cb 	bl	12768 <__ssrefill_r>
   103d2:	2800      	cmp	r0, #0
   103d4:	d0e4      	beq.n	103a0 <__ssvfscanf_r+0xf8c>
   103d6:	44aa      	add	sl, r5
   103d8:	f7ff b843 	b.w	f462 <__ssvfscanf_r+0x4e>
   103dc:	ee18 0a10 	vmov	r0, s16
   103e0:	4659      	mov	r1, fp
   103e2:	f002 f9c1 	bl	12768 <__ssrefill_r>
   103e6:	2800      	cmp	r0, #0
   103e8:	f43f ae8e 	beq.w	10108 <__ssvfscanf_r+0xcf4>
   103ec:	42b5      	cmp	r5, r6
   103ee:	4654      	mov	r4, sl
   103f0:	ee18 9a10 	vmov	r9, s16
   103f4:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   103f8:	f47f ae91 	bne.w	1011e <__ssvfscanf_r+0xd0a>
   103fc:	f7ff b8f6 	b.w	f5ec <__ssvfscanf_r+0x1d8>
   10400:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   10404:	e428      	b.n	fc58 <__ssvfscanf_r+0x844>
   10406:	6823      	ldr	r3, [r4, #0]
   10408:	2b04      	cmp	r3, #4
   1040a:	f47f ac32 	bne.w	fc72 <__ssvfscanf_r+0x85e>
   1040e:	e432      	b.n	fc76 <__ssvfscanf_r+0x862>
   10410:	1c83      	adds	r3, r0, #2
   10412:	f040 8339 	bne.w	10a88 <__ssvfscanf_r+0x1674>
   10416:	f8db 3004 	ldr.w	r3, [fp, #4]
   1041a:	2b00      	cmp	r3, #0
   1041c:	f340 81d7 	ble.w	107ce <__ssvfscanf_r+0x13ba>
   10420:	f8db 3000 	ldr.w	r3, [fp]
   10424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10426:	781b      	ldrb	r3, [r3, #0]
   10428:	5cd3      	ldrb	r3, [r2, r3]
   1042a:	0718      	lsls	r0, r3, #28
   1042c:	d403      	bmi.n	10436 <__ssvfscanf_r+0x1022>
   1042e:	f1b8 0f00 	cmp.w	r8, #0
   10432:	f47f ab49 	bne.w	fac8 <__ssvfscanf_r+0x6b4>
   10436:	627c      	str	r4, [r7, #36]	; 0x24
   10438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1043a:	2b00      	cmp	r3, #0
   1043c:	f47f a811 	bne.w	f462 <__ssvfscanf_r+0x4e>
   10440:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10442:	6013      	str	r3, [r2, #0]
   10444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10446:	2b00      	cmp	r3, #0
   10448:	f43f adfc 	beq.w	10044 <__ssvfscanf_r+0xc30>
   1044c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1044e:	1ad1      	subs	r1, r2, r3
   10450:	108b      	asrs	r3, r1, #2
   10452:	6a3a      	ldr	r2, [r7, #32]
   10454:	3301      	adds	r3, #1
   10456:	429a      	cmp	r2, r3
   10458:	f67f adf4 	bls.w	10044 <__ssvfscanf_r+0xc30>
   1045c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   1045e:	3104      	adds	r1, #4
   10460:	6820      	ldr	r0, [r4, #0]
   10462:	f7f9 fe9f 	bl	a1a4 <realloc>
   10466:	2800      	cmp	r0, #0
   10468:	f47f ac3a 	bne.w	fce0 <__ssvfscanf_r+0x8cc>
   1046c:	e5ea      	b.n	10044 <__ssvfscanf_r+0xc30>
   1046e:	f853 2b04 	ldr.w	r2, [r3], #4
   10472:	ed82 0b00 	vstr	d0, [r2]
   10476:	633b      	str	r3, [r7, #48]	; 0x30
   10478:	e5e4      	b.n	10044 <__ssvfscanf_r+0xc30>
   1047a:	68fd      	ldr	r5, [r7, #12]
   1047c:	6a39      	ldr	r1, [r7, #32]
   1047e:	687e      	ldr	r6, [r7, #4]
   10480:	4628      	mov	r0, r5
   10482:	4642      	mov	r2, r8
   10484:	46a3      	mov	fp, r4
   10486:	68bc      	ldr	r4, [r7, #8]
   10488:	f000 fd56 	bl	10f38 <stpncpy>
   1048c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1048e:	61fb      	str	r3, [r7, #28]
   10490:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   10494:	3e01      	subs	r6, #1
   10496:	4605      	mov	r5, r0
   10498:	f7ff b9c8 	b.w	f82c <__ssvfscanf_r+0x418>
   1049c:	69f8      	ldr	r0, [r7, #28]
   1049e:	00d9      	lsls	r1, r3, #3
   104a0:	461d      	mov	r5, r3
   104a2:	f7f9 fe7f 	bl	a1a4 <realloc>
   104a6:	61f8      	str	r0, [r7, #28]
   104a8:	2800      	cmp	r0, #0
   104aa:	f000 8264 	beq.w	10976 <__ssvfscanf_r+0x1562>
   104ae:	6a3a      	ldr	r2, [r7, #32]
   104b0:	006b      	lsls	r3, r5, #1
   104b2:	eb00 0804 	add.w	r8, r0, r4
   104b6:	6010      	str	r0, [r2, #0]
   104b8:	61bb      	str	r3, [r7, #24]
   104ba:	f7ff bbea 	b.w	fc92 <__ssvfscanf_r+0x87e>
   104be:	2e02      	cmp	r6, #2
   104c0:	f240 82c4 	bls.w	10a4c <__ssvfscanf_r+0x1638>
   104c4:	2e03      	cmp	r6, #3
   104c6:	f43f a9d3 	beq.w	f870 <__ssvfscanf_r+0x45c>
   104ca:	3e04      	subs	r6, #4
   104cc:	fa5f f886 	uxtb.w	r8, r6
   104d0:	ea6f 0308 	mvn.w	r3, r8
   104d4:	18ee      	adds	r6, r5, r3
   104d6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   104da:	465a      	mov	r2, fp
   104dc:	4648      	mov	r0, r9
   104de:	f002 f903 	bl	126e8 <_sungetc_r>
   104e2:	42ae      	cmp	r6, r5
   104e4:	d1f7      	bne.n	104d6 <__ssvfscanf_r+0x10c2>
   104e6:	f10a 3aff 	add.w	sl, sl, #4294967295
   104ea:	ebaa 0a08 	sub.w	sl, sl, r8
   104ee:	f7ff b9bf 	b.w	f870 <__ssvfscanf_r+0x45c>
   104f2:	64f9      	str	r1, [r7, #76]	; 0x4c
   104f4:	f7fe bfb5 	b.w	f462 <__ssvfscanf_r+0x4e>
   104f8:	2303      	movs	r3, #3
   104fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   104fc:	f7ff b993 	b.w	f826 <__ssvfscanf_r+0x412>
   10500:	0001202d 	.word	0x0001202d
   10504:	20000a9c 	.word	0x20000a9c
   10508:	0000b559 	.word	0x0000b559
   1050c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10510:	4293      	cmp	r3, r2
   10512:	f200 8297 	bhi.w	10a44 <__ssvfscanf_r+0x1630>
   10516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10518:	3308      	adds	r3, #8
   1051a:	b29b      	uxth	r3, r3
   1051c:	6810      	ldr	r0, [r2, #0]
   1051e:	63f8      	str	r0, [r7, #60]	; 0x3c
   10520:	0099      	lsls	r1, r3, #2
   10522:	637b      	str	r3, [r7, #52]	; 0x34
   10524:	f7f9 fe3e 	bl	a1a4 <realloc>
   10528:	2800      	cmp	r0, #0
   1052a:	f000 827b 	beq.w	10a24 <__ssvfscanf_r+0x1610>
   1052e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10532:	8093      	strh	r3, [r2, #4]
   10534:	6010      	str	r0, [r2, #0]
   10536:	e542      	b.n	ffbe <__ssvfscanf_r+0xbaa>
   10538:	2101      	movs	r1, #1
   1053a:	e57a      	b.n	10032 <__ssvfscanf_r+0xc1e>
   1053c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10540:	4293      	cmp	r3, r2
   10542:	f200 8293 	bhi.w	10a6c <__ssvfscanf_r+0x1658>
   10546:	3308      	adds	r3, #8
   10548:	b29e      	uxth	r6, r3
   1054a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1054c:	00b1      	lsls	r1, r6, #2
   1054e:	6818      	ldr	r0, [r3, #0]
   10550:	f7f9 fe28 	bl	a1a4 <realloc>
   10554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10556:	2800      	cmp	r0, #0
   10558:	f000 823e 	beq.w	109d8 <__ssvfscanf_r+0x15c4>
   1055c:	809e      	strh	r6, [r3, #4]
   1055e:	6018      	str	r0, [r3, #0]
   10560:	f7ff ba9b 	b.w	fa9a <__ssvfscanf_r+0x686>
   10564:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10568:	4293      	cmp	r3, r2
   1056a:	f200 827f 	bhi.w	10a6c <__ssvfscanf_r+0x1658>
   1056e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10570:	3308      	adds	r3, #8
   10572:	b29b      	uxth	r3, r3
   10574:	0099      	lsls	r1, r3, #2
   10576:	6810      	ldr	r0, [r2, #0]
   10578:	64bb      	str	r3, [r7, #72]	; 0x48
   1057a:	f7f9 fe13 	bl	a1a4 <realloc>
   1057e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10580:	2800      	cmp	r0, #0
   10582:	f000 8228 	beq.w	109d6 <__ssvfscanf_r+0x15c2>
   10586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10588:	8093      	strh	r3, [r2, #4]
   1058a:	6010      	str	r0, [r2, #0]
   1058c:	f7ff bb0e 	b.w	fbac <__ssvfscanf_r+0x798>
   10590:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10594:	4293      	cmp	r3, r2
   10596:	f200 8255 	bhi.w	10a44 <__ssvfscanf_r+0x1630>
   1059a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1059c:	3308      	adds	r3, #8
   1059e:	b29b      	uxth	r3, r3
   105a0:	6810      	ldr	r0, [r2, #0]
   105a2:	63f8      	str	r0, [r7, #60]	; 0x3c
   105a4:	0099      	lsls	r1, r3, #2
   105a6:	637b      	str	r3, [r7, #52]	; 0x34
   105a8:	f7f9 fdfc 	bl	a1a4 <realloc>
   105ac:	2800      	cmp	r0, #0
   105ae:	f000 8239 	beq.w	10a24 <__ssvfscanf_r+0x1610>
   105b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   105b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   105b6:	8093      	strh	r3, [r2, #4]
   105b8:	6010      	str	r0, [r2, #0]
   105ba:	e570      	b.n	1009e <__ssvfscanf_r+0xc8a>
   105bc:	7882      	ldrb	r2, [r0, #2]
   105be:	f044 0402 	orr.w	r4, r4, #2
   105c2:	3002      	adds	r0, #2
   105c4:	f7fe bfae 	b.w	f524 <__ssvfscanf_r+0x110>
   105c8:	7882      	ldrb	r2, [r0, #2]
   105ca:	f044 0408 	orr.w	r4, r4, #8
   105ce:	3002      	adds	r0, #2
   105d0:	f7fe bfa8 	b.w	f524 <__ssvfscanf_r+0x110>
   105d4:	0763      	lsls	r3, r4, #29
   105d6:	d458      	bmi.n	1068a <__ssvfscanf_r+0x1276>
   105d8:	f014 0201 	ands.w	r2, r4, #1
   105dc:	f47f aa28 	bne.w	fa30 <__ssvfscanf_r+0x61c>
   105e0:	07a6      	lsls	r6, r4, #30
   105e2:	f57f aa25 	bpl.w	fa30 <__ssvfscanf_r+0x61c>
   105e6:	4bb3      	ldr	r3, [pc, #716]	; (108b4 <__ssvfscanf_r+0x14a0>)
   105e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   105ea:	4299      	cmp	r1, r3
   105ec:	4648      	mov	r0, r9
   105ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   105f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   105f2:	f000 823d 	beq.w	10a70 <__ssvfscanf_r+0x165c>
   105f6:	f001 fdd1 	bl	1219c <_strtoll_r>
   105fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   105fc:	f853 2b04 	ldr.w	r2, [r3], #4
   10600:	633b      	str	r3, [r7, #48]	; 0x30
   10602:	e9c2 0100 	strd	r0, r1, [r2]
   10606:	f7ff ba18 	b.w	fa3a <__ssvfscanf_r+0x626>
   1060a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1060c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1060e:	f853 2b04 	ldr.w	r2, [r3], #4
   10612:	633b      	str	r3, [r7, #48]	; 0x30
   10614:	f882 a000 	strb.w	sl, [r2]
   10618:	f7fe bf23 	b.w	f462 <__ssvfscanf_r+0x4e>
   1061c:	f8db 3000 	ldr.w	r3, [fp]
   10620:	4ea5      	ldr	r6, [pc, #660]	; (108b8 <__ssvfscanf_r+0x14a4>)
   10622:	781a      	ldrb	r2, [r3, #0]
   10624:	5cb2      	ldrb	r2, [r6, r2]
   10626:	0712      	lsls	r2, r2, #28
   10628:	f53e af1b 	bmi.w	f462 <__ssvfscanf_r+0x4e>
   1062c:	3301      	adds	r3, #1
   1062e:	f8cb 3000 	str.w	r3, [fp]
   10632:	f8db 3004 	ldr.w	r3, [fp, #4]
   10636:	f1b8 0f01 	cmp.w	r8, #1
   1063a:	f103 33ff 	add.w	r3, r3, #4294967295
   1063e:	f8cb 3004 	str.w	r3, [fp, #4]
   10642:	bf08      	it	eq
   10644:	f10a 0a01 	addeq.w	sl, sl, #1
   10648:	f43e af0b 	beq.w	f462 <__ssvfscanf_r+0x4e>
   1064c:	2401      	movs	r4, #1
   1064e:	e011      	b.n	10674 <__ssvfscanf_r+0x1260>
   10650:	f8db 3000 	ldr.w	r3, [fp]
   10654:	781a      	ldrb	r2, [r3, #0]
   10656:	5cb2      	ldrb	r2, [r6, r2]
   10658:	0715      	lsls	r5, r2, #28
   1065a:	f103 0301 	add.w	r3, r3, #1
   1065e:	d411      	bmi.n	10684 <__ssvfscanf_r+0x1270>
   10660:	f8cb 3000 	str.w	r3, [fp]
   10664:	f8db 3004 	ldr.w	r3, [fp, #4]
   10668:	3401      	adds	r4, #1
   1066a:	3b01      	subs	r3, #1
   1066c:	4544      	cmp	r4, r8
   1066e:	f8cb 3004 	str.w	r3, [fp, #4]
   10672:	d007      	beq.n	10684 <__ssvfscanf_r+0x1270>
   10674:	2b00      	cmp	r3, #0
   10676:	dceb      	bgt.n	10650 <__ssvfscanf_r+0x123c>
   10678:	4659      	mov	r1, fp
   1067a:	4648      	mov	r0, r9
   1067c:	f002 f874 	bl	12768 <__ssrefill_r>
   10680:	2800      	cmp	r0, #0
   10682:	d0e5      	beq.n	10650 <__ssvfscanf_r+0x123c>
   10684:	44a2      	add	sl, r4
   10686:	f7fe beec 	b.w	f462 <__ssvfscanf_r+0x4e>
   1068a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1068c:	f853 2b04 	ldr.w	r2, [r3], #4
   10690:	633b      	str	r3, [r7, #48]	; 0x30
   10692:	8010      	strh	r0, [r2, #0]
   10694:	f7ff b9d1 	b.w	fa3a <__ssvfscanf_r+0x626>
   10698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1069a:	2b00      	cmp	r3, #0
   1069c:	f000 816e 	beq.w	1097c <__ssvfscanf_r+0x1568>
   106a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   106a2:	f8d3 8000 	ldr.w	r8, [r3]
   106a6:	88de      	ldrh	r6, [r3, #6]
   106a8:	b176      	cbz	r6, 106c8 <__ssvfscanf_r+0x12b4>
   106aa:	2400      	movs	r4, #0
   106ac:	f1a8 0504 	sub.w	r5, r8, #4
   106b0:	46a1      	mov	r9, r4
   106b2:	f855 3f04 	ldr.w	r3, [r5, #4]!
   106b6:	6818      	ldr	r0, [r3, #0]
   106b8:	f7f9 fab0 	bl	9c1c <free>
   106bc:	3401      	adds	r4, #1
   106be:	682b      	ldr	r3, [r5, #0]
   106c0:	42a6      	cmp	r6, r4
   106c2:	f8c3 9000 	str.w	r9, [r3]
   106c6:	d1f4      	bne.n	106b2 <__ssvfscanf_r+0x129e>
   106c8:	f04f 33ff 	mov.w	r3, #4294967295
   106cc:	647b      	str	r3, [r7, #68]	; 0x44
   106ce:	f1b8 0f00 	cmp.w	r8, #0
   106d2:	f47e af9c 	bne.w	f60e <__ssvfscanf_r+0x1fa>
   106d6:	f7fe bf9d 	b.w	f614 <__ssvfscanf_r+0x200>
   106da:	4878      	ldr	r0, [pc, #480]	; (108bc <__ssvfscanf_r+0x14a8>)
   106dc:	633b      	str	r3, [r7, #48]	; 0x30
   106de:	f7fb fde7 	bl	c2b0 <nanf>
   106e2:	ed84 0a00 	vstr	s0, [r4]
   106e6:	e4ad      	b.n	10044 <__ssvfscanf_r+0xc30>
   106e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   106ea:	63fc      	str	r4, [r7, #60]	; 0x3c
   106ec:	f852 5b04 	ldr.w	r5, [r2], #4
   106f0:	633a      	str	r2, [r7, #48]	; 0x30
   106f2:	64bc      	str	r4, [r7, #72]	; 0x48
   106f4:	e46c      	b.n	ffd0 <__ssvfscanf_r+0xbbc>
   106f6:	b082      	sub	sp, #8
   106f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   106fc:	ab02      	add	r3, sp, #8
   106fe:	643b      	str	r3, [r7, #64]	; 0x40
   10700:	e612      	b.n	10328 <__ssvfscanf_r+0xf14>
   10702:	637b      	str	r3, [r7, #52]	; 0x34
   10704:	0053      	lsls	r3, r2, #1
   10706:	4620      	mov	r0, r4
   10708:	4619      	mov	r1, r3
   1070a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1070c:	f7f9 fd4a 	bl	a1a4 <realloc>
   10710:	4604      	mov	r4, r0
   10712:	2800      	cmp	r0, #0
   10714:	f000 80ad 	beq.w	10872 <__ssvfscanf_r+0x145e>
   10718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1071a:	1985      	adds	r5, r0, r6
   1071c:	6018      	str	r0, [r3, #0]
   1071e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10720:	e475      	b.n	1000e <__ssvfscanf_r+0xbfa>
   10722:	697d      	ldr	r5, [r7, #20]
   10724:	4629      	mov	r1, r5
   10726:	230a      	movs	r3, #10
   10728:	3101      	adds	r1, #1
   1072a:	4648      	mov	r0, r9
   1072c:	f7fa ff14 	bl	b558 <_strtol_r>
   10730:	69bb      	ldr	r3, [r7, #24]
   10732:	1ac2      	subs	r2, r0, r3
   10734:	e59d      	b.n	10272 <__ssvfscanf_r+0xe5e>
   10736:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1073a:	f853 1b04 	ldr.w	r1, [r3], #4
   1073e:	623a      	str	r2, [r7, #32]
   10740:	64b9      	str	r1, [r7, #72]	; 0x48
   10742:	633b      	str	r3, [r7, #48]	; 0x30
   10744:	62ba      	str	r2, [r7, #40]	; 0x28
   10746:	63fa      	str	r2, [r7, #60]	; 0x3c
   10748:	f7ff b9b2 	b.w	fab0 <__ssvfscanf_r+0x69c>
   1074c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1074e:	64bc      	str	r4, [r7, #72]	; 0x48
   10750:	f853 5b04 	ldr.w	r5, [r3], #4
   10754:	633b      	str	r3, [r7, #48]	; 0x30
   10756:	e4aa      	b.n	100ae <__ssvfscanf_r+0xc9a>
   10758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1075a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1075c:	f853 4b04 	ldr.w	r4, [r3], #4
   10760:	61ba      	str	r2, [r7, #24]
   10762:	e9c7 2207 	strd	r2, r2, [r7, #28]
   10766:	633b      	str	r3, [r7, #48]	; 0x30
   10768:	f7ff ba2a 	b.w	fbc0 <__ssvfscanf_r+0x7ac>
   1076c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1076e:	6820      	ldr	r0, [r4, #0]
   10770:	f7f9 fd18 	bl	a1a4 <realloc>
   10774:	2800      	cmp	r0, #0
   10776:	f47f aab3 	bne.w	fce0 <__ssvfscanf_r+0x8cc>
   1077a:	e463      	b.n	10044 <__ssvfscanf_r+0xc30>
   1077c:	4659      	mov	r1, fp
   1077e:	4648      	mov	r0, r9
   10780:	637b      	str	r3, [r7, #52]	; 0x34
   10782:	f001 fff1 	bl	12768 <__ssrefill_r>
   10786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10788:	2800      	cmp	r0, #0
   1078a:	f43f ac49 	beq.w	10020 <__ssvfscanf_r+0xc0c>
   1078e:	e44d      	b.n	1002c <__ssvfscanf_r+0xc18>
   10790:	6818      	ldr	r0, [r3, #0]
   10792:	461c      	mov	r4, r3
   10794:	f7f9 fd06 	bl	a1a4 <realloc>
   10798:	2800      	cmp	r0, #0
   1079a:	f43f accc 	beq.w	10136 <__ssvfscanf_r+0xd22>
   1079e:	6020      	str	r0, [r4, #0]
   107a0:	e4c9      	b.n	10136 <__ssvfscanf_r+0xd22>
   107a2:	2500      	movs	r5, #0
   107a4:	e637      	b.n	10416 <__ssvfscanf_r+0x1002>
   107a6:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   107a8:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   107ac:	627e      	str	r6, [r7, #36]	; 0x24
   107ae:	4644      	mov	r4, r8
   107b0:	2d00      	cmp	r5, #0
   107b2:	f43f aa7c 	beq.w	fcae <__ssvfscanf_r+0x89a>
   107b6:	3d01      	subs	r5, #1
   107b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   107bc:	465a      	mov	r2, fp
   107be:	5d59      	ldrb	r1, [r3, r5]
   107c0:	4648      	mov	r0, r9
   107c2:	f001 ff91 	bl	126e8 <_sungetc_r>
   107c6:	2d00      	cmp	r5, #0
   107c8:	d1f5      	bne.n	107b6 <__ssvfscanf_r+0x13a2>
   107ca:	f7ff ba70 	b.w	fcae <__ssvfscanf_r+0x89a>
   107ce:	4659      	mov	r1, fp
   107d0:	4648      	mov	r0, r9
   107d2:	f001 ffc9 	bl	12768 <__ssrefill_r>
   107d6:	2800      	cmp	r0, #0
   107d8:	f43f ae22 	beq.w	10420 <__ssvfscanf_r+0x100c>
   107dc:	627c      	str	r4, [r7, #36]	; 0x24
   107de:	2d00      	cmp	r5, #0
   107e0:	f47e af04 	bne.w	f5ec <__ssvfscanf_r+0x1d8>
   107e4:	e628      	b.n	10438 <__ssvfscanf_r+0x1024>
   107e6:	627c      	str	r4, [r7, #36]	; 0x24
   107e8:	2d00      	cmp	r5, #0
   107ea:	f43f ae25 	beq.w	10438 <__ssvfscanf_r+0x1024>
   107ee:	3d01      	subs	r5, #1
   107f0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   107f4:	465a      	mov	r2, fp
   107f6:	5d59      	ldrb	r1, [r3, r5]
   107f8:	4648      	mov	r0, r9
   107fa:	f001 ff75 	bl	126e8 <_sungetc_r>
   107fe:	2d00      	cmp	r5, #0
   10800:	d1f5      	bne.n	107ee <__ssvfscanf_r+0x13da>
   10802:	e619      	b.n	10438 <__ssvfscanf_r+0x1024>
   10804:	07e5      	lsls	r5, r4, #31
   10806:	d43c      	bmi.n	10882 <__ssvfscanf_r+0x146e>
   10808:	07a4      	lsls	r4, r4, #30
   1080a:	d53a      	bpl.n	10882 <__ssvfscanf_r+0x146e>
   1080c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1080e:	64f9      	str	r1, [r7, #76]	; 0x4c
   10810:	f853 2b04 	ldr.w	r2, [r3], #4
   10814:	633b      	str	r3, [r7, #48]	; 0x30
   10816:	ea4f 73ea 	mov.w	r3, sl, asr #31
   1081a:	f8c2 a000 	str.w	sl, [r2]
   1081e:	6053      	str	r3, [r2, #4]
   10820:	f7fe be1f 	b.w	f462 <__ssvfscanf_r+0x4e>
   10824:	ee18 9a10 	vmov	r9, s16
   10828:	461e      	mov	r6, r3
   1082a:	f7ff b814 	b.w	f856 <__ssvfscanf_r+0x442>
   1082e:	2301      	movs	r3, #1
   10830:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   10834:	64bb      	str	r3, [r7, #72]	; 0x48
   10836:	f7fe bff6 	b.w	f826 <__ssvfscanf_r+0x412>
   1083a:	f1b8 0f01 	cmp.w	r8, #1
   1083e:	bf38      	it	cc
   10840:	f04f 0801 	movcc.w	r8, #1
   10844:	f014 0301 	ands.w	r3, r4, #1
   10848:	d13a      	bne.n	108c0 <__ssvfscanf_r+0x14ac>
   1084a:	06e5      	lsls	r5, r4, #27
   1084c:	f100 8136 	bmi.w	10abc <__ssvfscanf_r+0x16a8>
   10850:	0624      	lsls	r4, r4, #24
   10852:	f140 814c 	bpl.w	10aee <__ssvfscanf_r+0x16da>
   10856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10858:	f853 5b04 	ldr.w	r5, [r3], #4
   1085c:	64bb      	str	r3, [r7, #72]	; 0x48
   1085e:	2d00      	cmp	r5, #0
   10860:	f43e aecd 	beq.w	f5fe <__ssvfscanf_r+0x1ea>
   10864:	4640      	mov	r0, r8
   10866:	f7f9 f9d1 	bl	9c0c <malloc>
   1086a:	4603      	mov	r3, r0
   1086c:	2800      	cmp	r0, #0
   1086e:	f040 80dc 	bne.w	10a2a <__ssvfscanf_r+0x1616>
   10872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10874:	2b00      	cmp	r3, #0
   10876:	f000 8081 	beq.w	1097c <__ssvfscanf_r+0x1568>
   1087a:	f8d3 8000 	ldr.w	r8, [r3]
   1087e:	88de      	ldrh	r6, [r3, #6]
   10880:	e712      	b.n	106a8 <__ssvfscanf_r+0x1294>
   10882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10884:	64f9      	str	r1, [r7, #76]	; 0x4c
   10886:	f853 2b04 	ldr.w	r2, [r3], #4
   1088a:	f8c2 a000 	str.w	sl, [r2]
   1088e:	633b      	str	r3, [r7, #48]	; 0x30
   10890:	f7fe bde7 	b.w	f462 <__ssvfscanf_r+0x4e>
   10894:	462b      	mov	r3, r5
   10896:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10898:	42ab      	cmp	r3, r5
   1089a:	f67e aeb0 	bls.w	f5fe <__ssvfscanf_r+0x1ea>
   1089e:	461c      	mov	r4, r3
   108a0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   108a4:	465a      	mov	r2, fp
   108a6:	4648      	mov	r0, r9
   108a8:	f001 ff1e 	bl	126e8 <_sungetc_r>
   108ac:	42ac      	cmp	r4, r5
   108ae:	d1f7      	bne.n	108a0 <__ssvfscanf_r+0x148c>
   108b0:	f7fe bea5 	b.w	f5fe <__ssvfscanf_r+0x1ea>
   108b4:	0001202d 	.word	0x0001202d
   108b8:	20000aa5 	.word	0x20000aa5
   108bc:	20008028 	.word	0x20008028
   108c0:	f014 0310 	ands.w	r3, r4, #16
   108c4:	637b      	str	r3, [r7, #52]	; 0x34
   108c6:	d05e      	beq.n	10986 <__ssvfscanf_r+0x1572>
   108c8:	2500      	movs	r5, #0
   108ca:	63fd      	str	r5, [r7, #60]	; 0x3c
   108cc:	64bd      	str	r5, [r7, #72]	; 0x48
   108ce:	462e      	mov	r6, r5
   108d0:	2400      	movs	r4, #0
   108d2:	464b      	mov	r3, r9
   108d4:	46c1      	mov	r9, r8
   108d6:	46a8      	mov	r8, r5
   108d8:	4625      	mov	r5, r4
   108da:	461c      	mov	r4, r3
   108dc:	f7fb f998 	bl	bc10 <__locale_mb_cur_max>
   108e0:	42a8      	cmp	r0, r5
   108e2:	f43e ae83 	beq.w	f5ec <__ssvfscanf_r+0x1d8>
   108e6:	e9db 3200 	ldrd	r3, r2, [fp]
   108ea:	f813 1b01 	ldrb.w	r1, [r3], #1
   108ee:	3a01      	subs	r2, #1
   108f0:	e9cb 3200 	strd	r3, r2, [fp]
   108f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   108f6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   108fa:	2a03      	cmp	r2, #3
   108fc:	5541      	strb	r1, [r0, r5]
   108fe:	f105 0301 	add.w	r3, r5, #1
   10902:	f107 0568 	add.w	r5, r7, #104	; 0x68
   10906:	d102      	bne.n	1090e <__ssvfscanf_r+0x14fa>
   10908:	682a      	ldr	r2, [r5, #0]
   1090a:	2a04      	cmp	r2, #4
   1090c:	d006      	beq.n	1091c <__ssvfscanf_r+0x1508>
   1090e:	2208      	movs	r2, #8
   10910:	2100      	movs	r1, #0
   10912:	4628      	mov	r0, r5
   10914:	62bb      	str	r3, [r7, #40]	; 0x28
   10916:	f7fb f8b1 	bl	ba7c <memset>
   1091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1091c:	9500      	str	r5, [sp, #0]
   1091e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   10922:	4631      	mov	r1, r6
   10924:	4620      	mov	r0, r4
   10926:	62bb      	str	r3, [r7, #40]	; 0x28
   10928:	f001 fd0a 	bl	12340 <_mbrtowc_r>
   1092c:	1c43      	adds	r3, r0, #1
   1092e:	6278      	str	r0, [r7, #36]	; 0x24
   10930:	f43e ae5c 	beq.w	f5ec <__ssvfscanf_r+0x1d8>
   10934:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10936:	2800      	cmp	r0, #0
   10938:	f040 8147 	bne.w	10bca <__ssvfscanf_r+0x17b6>
   1093c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1093e:	b902      	cbnz	r2, 10942 <__ssvfscanf_r+0x152e>
   10940:	6032      	str	r2, [r6, #0]
   10942:	449a      	add	sl, r3
   10944:	f109 39ff 	add.w	r9, r9, #4294967295
   10948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1094a:	2b00      	cmp	r3, #0
   1094c:	f040 8175 	bne.w	10c3a <__ssvfscanf_r+0x1826>
   10950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10952:	2b00      	cmp	r3, #0
   10954:	f000 8170 	beq.w	10c38 <__ssvfscanf_r+0x1824>
   10958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1095a:	1af5      	subs	r5, r6, r3
   1095c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   10960:	f200 816a 	bhi.w	10c38 <__ssvfscanf_r+0x1824>
   10964:	4618      	mov	r0, r3
   10966:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   1096a:	f7f9 fc1b 	bl	a1a4 <realloc>
   1096e:	63f8      	str	r0, [r7, #60]	; 0x3c
   10970:	2800      	cmp	r0, #0
   10972:	f040 815c 	bne.w	10c2e <__ssvfscanf_r+0x181a>
   10976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10978:	2b00      	cmp	r3, #0
   1097a:	d12d      	bne.n	109d8 <__ssvfscanf_r+0x15c4>
   1097c:	f04f 33ff 	mov.w	r3, #4294967295
   10980:	647b      	str	r3, [r7, #68]	; 0x44
   10982:	f7fe be47 	b.w	f614 <__ssvfscanf_r+0x200>
   10986:	0622      	lsls	r2, r4, #24
   10988:	f140 808f 	bpl.w	10aaa <__ssvfscanf_r+0x1696>
   1098c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1098e:	f854 3b04 	ldr.w	r3, [r4], #4
   10992:	64bb      	str	r3, [r7, #72]	; 0x48
   10994:	2b00      	cmp	r3, #0
   10996:	f43e ae32 	beq.w	f5fe <__ssvfscanf_r+0x1ea>
   1099a:	2080      	movs	r0, #128	; 0x80
   1099c:	f7f9 f936 	bl	9c0c <malloc>
   109a0:	4606      	mov	r6, r0
   109a2:	2800      	cmp	r0, #0
   109a4:	d0e7      	beq.n	10976 <__ssvfscanf_r+0x1562>
   109a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   109a8:	6018      	str	r0, [r3, #0]
   109aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   109ac:	88dd      	ldrh	r5, [r3, #6]
   109ae:	889a      	ldrh	r2, [r3, #4]
   109b0:	4295      	cmp	r5, r2
   109b2:	f0c0 80b3 	bcc.w	10b1c <__ssvfscanf_r+0x1708>
   109b6:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   109ba:	428a      	cmp	r2, r1
   109bc:	d856      	bhi.n	10a6c <__ssvfscanf_r+0x1658>
   109be:	3208      	adds	r2, #8
   109c0:	b293      	uxth	r3, r2
   109c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   109c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   109c6:	0099      	lsls	r1, r3, #2
   109c8:	6810      	ldr	r0, [r2, #0]
   109ca:	f7f9 fbeb 	bl	a1a4 <realloc>
   109ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   109d0:	2800      	cmp	r0, #0
   109d2:	f040 80ae 	bne.w	10b32 <__ssvfscanf_r+0x171e>
   109d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   109d8:	88db      	ldrh	r3, [r3, #6]
   109da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   109dc:	461e      	mov	r6, r3
   109de:	f8d2 8000 	ldr.w	r8, [r2]
   109e2:	e661      	b.n	106a8 <__ssvfscanf_r+0x1294>
   109e4:	462b      	mov	r3, r5
   109e6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   109e8:	42ab      	cmp	r3, r5
   109ea:	f67e ae08 	bls.w	f5fe <__ssvfscanf_r+0x1ea>
   109ee:	461c      	mov	r4, r3
   109f0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   109f4:	465a      	mov	r2, fp
   109f6:	4648      	mov	r0, r9
   109f8:	f001 fe76 	bl	126e8 <_sungetc_r>
   109fc:	42ac      	cmp	r4, r5
   109fe:	d1f7      	bne.n	109f0 <__ssvfscanf_r+0x15dc>
   10a00:	f7fe bdfd 	b.w	f5fe <__ssvfscanf_r+0x1ea>
   10a04:	4610      	mov	r0, r2
   10a06:	00d9      	lsls	r1, r3, #3
   10a08:	461e      	mov	r6, r3
   10a0a:	f7f9 fbcb 	bl	a1a4 <realloc>
   10a0e:	62b8      	str	r0, [r7, #40]	; 0x28
   10a10:	2800      	cmp	r0, #0
   10a12:	d0b0      	beq.n	10976 <__ssvfscanf_r+0x1562>
   10a14:	1942      	adds	r2, r0, r5
   10a16:	64ba      	str	r2, [r7, #72]	; 0x48
   10a18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10a1a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   10a1c:	6010      	str	r0, [r2, #0]
   10a1e:	0073      	lsls	r3, r6, #1
   10a20:	623b      	str	r3, [r7, #32]
   10a22:	e4f8      	b.n	10416 <__ssvfscanf_r+0x1002>
   10a24:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   10a28:	e63e      	b.n	106a8 <__ssvfscanf_r+0x1294>
   10a2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   10a2c:	6028      	str	r0, [r5, #0]
   10a2e:	88ce      	ldrh	r6, [r1, #6]
   10a30:	888a      	ldrh	r2, [r1, #4]
   10a32:	4296      	cmp	r6, r2
   10a34:	f0c0 808e 	bcc.w	10b54 <__ssvfscanf_r+0x1740>
   10a38:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   10a3c:	428a      	cmp	r2, r1
   10a3e:	6338      	str	r0, [r7, #48]	; 0x30
   10a40:	f240 80a5 	bls.w	10b8e <__ssvfscanf_r+0x177a>
   10a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10a46:	f8d3 8000 	ldr.w	r8, [r3]
   10a4a:	e62d      	b.n	106a8 <__ssvfscanf_r+0x1294>
   10a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10a4e:	4295      	cmp	r5, r2
   10a50:	f67e add5 	bls.w	f5fe <__ssvfscanf_r+0x1ea>
   10a54:	462c      	mov	r4, r5
   10a56:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10a58:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   10a5c:	465a      	mov	r2, fp
   10a5e:	4648      	mov	r0, r9
   10a60:	f001 fe42 	bl	126e8 <_sungetc_r>
   10a64:	42ac      	cmp	r4, r5
   10a66:	d1f7      	bne.n	10a58 <__ssvfscanf_r+0x1644>
   10a68:	f7fe bdc9 	b.w	f5fe <__ssvfscanf_r+0x1ea>
   10a6c:	462b      	mov	r3, r5
   10a6e:	e7b4      	b.n	109da <__ssvfscanf_r+0x15c6>
   10a70:	f001 fc64 	bl	1233c <_strtoull_r>
   10a74:	e5c1      	b.n	105fa <__ssvfscanf_r+0x11e6>
   10a76:	f8d8 3000 	ldr.w	r3, [r8]
   10a7a:	461d      	mov	r5, r3
   10a7c:	3301      	adds	r3, #1
   10a7e:	f47f a8d5 	bne.w	fc2c <__ssvfscanf_r+0x818>
   10a82:	462a      	mov	r2, r5
   10a84:	f7ff b8e8 	b.w	fc58 <__ssvfscanf_r+0x844>
   10a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a8a:	6818      	ldr	r0, [r3, #0]
   10a8c:	f001 fcb4 	bl	123f8 <iswspace>
   10a90:	2800      	cmp	r0, #0
   10a92:	f47f aea8 	bne.w	107e6 <__ssvfscanf_r+0x13d2>
   10a96:	2c03      	cmp	r4, #3
   10a98:	44aa      	add	sl, r5
   10a9a:	f47f a849 	bne.w	fb30 <__ssvfscanf_r+0x71c>
   10a9e:	6833      	ldr	r3, [r6, #0]
   10aa0:	2b04      	cmp	r3, #4
   10aa2:	f47f a845 	bne.w	fb30 <__ssvfscanf_r+0x71c>
   10aa6:	f7ff b845 	b.w	fb34 <__ssvfscanf_r+0x720>
   10aaa:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   10aae:	f853 6b04 	ldr.w	r6, [r3], #4
   10ab2:	633b      	str	r3, [r7, #48]	; 0x30
   10ab4:	4615      	mov	r5, r2
   10ab6:	63fa      	str	r2, [r7, #60]	; 0x3c
   10ab8:	64ba      	str	r2, [r7, #72]	; 0x48
   10aba:	e709      	b.n	108d0 <__ssvfscanf_r+0x14bc>
   10abc:	461c      	mov	r4, r3
   10abe:	f8db 3004 	ldr.w	r3, [fp, #4]
   10ac2:	4598      	cmp	r8, r3
   10ac4:	dd39      	ble.n	10b3a <__ssvfscanf_r+0x1726>
   10ac6:	f8db 2000 	ldr.w	r2, [fp]
   10aca:	441a      	add	r2, r3
   10acc:	f8cb 2000 	str.w	r2, [fp]
   10ad0:	4659      	mov	r1, fp
   10ad2:	4648      	mov	r0, r9
   10ad4:	441c      	add	r4, r3
   10ad6:	eba8 0803 	sub.w	r8, r8, r3
   10ada:	f001 fe45 	bl	12768 <__ssrefill_r>
   10ade:	2800      	cmp	r0, #0
   10ae0:	d0ed      	beq.n	10abe <__ssvfscanf_r+0x16aa>
   10ae2:	2c00      	cmp	r4, #0
   10ae4:	f43e ad82 	beq.w	f5ec <__ssvfscanf_r+0x1d8>
   10ae8:	44a2      	add	sl, r4
   10aea:	f7fe bcba 	b.w	f462 <__ssvfscanf_r+0x4e>
   10aee:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   10af0:	4643      	mov	r3, r8
   10af2:	6829      	ldr	r1, [r5, #0]
   10af4:	f8cd b000 	str.w	fp, [sp]
   10af8:	2201      	movs	r2, #1
   10afa:	4648      	mov	r0, r9
   10afc:	f001 fe52 	bl	127a4 <_sfread_r>
   10b00:	4604      	mov	r4, r0
   10b02:	2800      	cmp	r0, #0
   10b04:	f43e ad72 	beq.w	f5ec <__ssvfscanf_r+0x1d8>
   10b08:	3504      	adds	r5, #4
   10b0a:	64bd      	str	r5, [r7, #72]	; 0x48
   10b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10b0e:	3301      	adds	r3, #1
   10b10:	647b      	str	r3, [r7, #68]	; 0x44
   10b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10b14:	633b      	str	r3, [r7, #48]	; 0x30
   10b16:	44a2      	add	sl, r4
   10b18:	f7fe bca3 	b.w	f462 <__ssvfscanf_r+0x4e>
   10b1c:	6818      	ldr	r0, [r3, #0]
   10b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10b20:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   10b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10b26:	633c      	str	r4, [r7, #48]	; 0x30
   10b28:	3501      	adds	r5, #1
   10b2a:	80dd      	strh	r5, [r3, #6]
   10b2c:	63fe      	str	r6, [r7, #60]	; 0x3c
   10b2e:	2520      	movs	r5, #32
   10b30:	e6ce      	b.n	108d0 <__ssvfscanf_r+0x14bc>
   10b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10b34:	8093      	strh	r3, [r2, #4]
   10b36:	6010      	str	r0, [r2, #0]
   10b38:	e7f1      	b.n	10b1e <__ssvfscanf_r+0x170a>
   10b3a:	eba3 0308 	sub.w	r3, r3, r8
   10b3e:	f8cb 3004 	str.w	r3, [fp, #4]
   10b42:	f8db 3000 	ldr.w	r3, [fp]
   10b46:	4444      	add	r4, r8
   10b48:	4443      	add	r3, r8
   10b4a:	f8cb 3000 	str.w	r3, [fp]
   10b4e:	44a2      	add	sl, r4
   10b50:	f7fe bc87 	b.w	f462 <__ssvfscanf_r+0x4e>
   10b54:	680a      	ldr	r2, [r1, #0]
   10b56:	63fa      	str	r2, [r7, #60]	; 0x3c
   10b58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10b5a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   10b5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10b60:	3601      	adds	r6, #1
   10b62:	b2b6      	uxth	r6, r6
   10b64:	80d6      	strh	r6, [r2, #6]
   10b66:	4619      	mov	r1, r3
   10b68:	f8cd b000 	str.w	fp, [sp]
   10b6c:	4643      	mov	r3, r8
   10b6e:	2201      	movs	r2, #1
   10b70:	4648      	mov	r0, r9
   10b72:	f001 fe17 	bl	127a4 <_sfread_r>
   10b76:	4604      	mov	r4, r0
   10b78:	b1d8      	cbz	r0, 10bb2 <__ssvfscanf_r+0x179e>
   10b7a:	4580      	cmp	r8, r0
   10b7c:	d9c6      	bls.n	10b0c <__ssvfscanf_r+0x16f8>
   10b7e:	6828      	ldr	r0, [r5, #0]
   10b80:	4621      	mov	r1, r4
   10b82:	f7f9 fb0f 	bl	a1a4 <realloc>
   10b86:	2800      	cmp	r0, #0
   10b88:	d0c0      	beq.n	10b0c <__ssvfscanf_r+0x16f8>
   10b8a:	6028      	str	r0, [r5, #0]
   10b8c:	e7be      	b.n	10b0c <__ssvfscanf_r+0x16f8>
   10b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10b90:	3208      	adds	r2, #8
   10b92:	b294      	uxth	r4, r2
   10b94:	681a      	ldr	r2, [r3, #0]
   10b96:	637a      	str	r2, [r7, #52]	; 0x34
   10b98:	4610      	mov	r0, r2
   10b9a:	00a1      	lsls	r1, r4, #2
   10b9c:	f7f9 fb02 	bl	a1a4 <realloc>
   10ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10ba2:	63f8      	str	r0, [r7, #60]	; 0x3c
   10ba4:	2800      	cmp	r0, #0
   10ba6:	d05b      	beq.n	10c60 <__ssvfscanf_r+0x184c>
   10ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10baa:	809c      	strh	r4, [r3, #4]
   10bac:	6018      	str	r0, [r3, #0]
   10bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10bb0:	e7d2      	b.n	10b58 <__ssvfscanf_r+0x1744>
   10bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10bb4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   10bb8:	2b00      	cmp	r3, #0
   10bba:	f43f ad75 	beq.w	106a8 <__ssvfscanf_r+0x1294>
   10bbe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10bc2:	065b      	lsls	r3, r3, #25
   10bc4:	f57e ad1d 	bpl.w	f602 <__ssvfscanf_r+0x1ee>
   10bc8:	e56a      	b.n	106a0 <__ssvfscanf_r+0x128c>
   10bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10bcc:	3202      	adds	r2, #2
   10bce:	d11d      	bne.n	10c0c <__ssvfscanf_r+0x17f8>
   10bd0:	f8db 2004 	ldr.w	r2, [fp, #4]
   10bd4:	2a00      	cmp	r2, #0
   10bd6:	461d      	mov	r5, r3
   10bd8:	f73f ae80 	bgt.w	108dc <__ssvfscanf_r+0x14c8>
   10bdc:	4659      	mov	r1, fp
   10bde:	4620      	mov	r0, r4
   10be0:	f001 fdc2 	bl	12768 <__ssrefill_r>
   10be4:	b9e0      	cbnz	r0, 10c20 <__ssvfscanf_r+0x180c>
   10be6:	f1b9 0f00 	cmp.w	r9, #0
   10bea:	f47f ae77 	bne.w	108dc <__ssvfscanf_r+0x14c8>
   10bee:	4645      	mov	r5, r8
   10bf0:	46a1      	mov	r9, r4
   10bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10bf4:	b123      	cbz	r3, 10c00 <__ssvfscanf_r+0x17ec>
   10bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10bf8:	1af1      	subs	r1, r6, r3
   10bfa:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   10bfe:	d827      	bhi.n	10c50 <__ssvfscanf_r+0x183c>
   10c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10c02:	2b00      	cmp	r3, #0
   10c04:	f47e ac2d 	bne.w	f462 <__ssvfscanf_r+0x4e>
   10c08:	f7ff ba1c 	b.w	10044 <__ssvfscanf_r+0xc30>
   10c0c:	449a      	add	sl, r3
   10c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10c10:	2b03      	cmp	r3, #3
   10c12:	f47f ae97 	bne.w	10944 <__ssvfscanf_r+0x1530>
   10c16:	682b      	ldr	r3, [r5, #0]
   10c18:	2b04      	cmp	r3, #4
   10c1a:	f47f ae93 	bne.w	10944 <__ssvfscanf_r+0x1530>
   10c1e:	e693      	b.n	10948 <__ssvfscanf_r+0x1534>
   10c20:	46a1      	mov	r9, r4
   10c22:	462c      	mov	r4, r5
   10c24:	4645      	mov	r5, r8
   10c26:	2c00      	cmp	r4, #0
   10c28:	d0e3      	beq.n	10bf2 <__ssvfscanf_r+0x17de>
   10c2a:	f7fe bcdf 	b.w	f5ec <__ssvfscanf_r+0x1d8>
   10c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10c30:	1946      	adds	r6, r0, r5
   10c32:	6010      	str	r0, [r2, #0]
   10c34:	ea4f 0848 	mov.w	r8, r8, lsl #1
   10c38:	3604      	adds	r6, #4
   10c3a:	f8db 3004 	ldr.w	r3, [fp, #4]
   10c3e:	2b00      	cmp	r3, #0
   10c40:	f04f 0500 	mov.w	r5, #0
   10c44:	ddca      	ble.n	10bdc <__ssvfscanf_r+0x17c8>
   10c46:	f1b9 0f00 	cmp.w	r9, #0
   10c4a:	f47f ae47 	bne.w	108dc <__ssvfscanf_r+0x14c8>
   10c4e:	e7ce      	b.n	10bee <__ssvfscanf_r+0x17da>
   10c50:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   10c52:	6820      	ldr	r0, [r4, #0]
   10c54:	f7f9 faa6 	bl	a1a4 <realloc>
   10c58:	2800      	cmp	r0, #0
   10c5a:	d0d1      	beq.n	10c00 <__ssvfscanf_r+0x17ec>
   10c5c:	6020      	str	r0, [r4, #0]
   10c5e:	e7cf      	b.n	10c00 <__ssvfscanf_r+0x17ec>
   10c60:	4690      	mov	r8, r2
   10c62:	e521      	b.n	106a8 <__ssvfscanf_r+0x1294>

00010c64 <_fclose_r>:
   10c64:	b570      	push	{r4, r5, r6, lr}
   10c66:	2900      	cmp	r1, #0
   10c68:	d04b      	beq.n	10d02 <_fclose_r+0x9e>
   10c6a:	4606      	mov	r6, r0
   10c6c:	460c      	mov	r4, r1
   10c6e:	b110      	cbz	r0, 10c76 <_fclose_r+0x12>
   10c70:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10c72:	2b00      	cmp	r3, #0
   10c74:	d048      	beq.n	10d08 <_fclose_r+0xa4>
   10c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10c78:	07d8      	lsls	r0, r3, #31
   10c7a:	d534      	bpl.n	10ce6 <_fclose_r+0x82>
   10c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10c80:	2b00      	cmp	r3, #0
   10c82:	d03e      	beq.n	10d02 <_fclose_r+0x9e>
   10c84:	4621      	mov	r1, r4
   10c86:	4630      	mov	r0, r6
   10c88:	f000 f850 	bl	10d2c <__sflush_r>
   10c8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10c8e:	4605      	mov	r5, r0
   10c90:	b133      	cbz	r3, 10ca0 <_fclose_r+0x3c>
   10c92:	69e1      	ldr	r1, [r4, #28]
   10c94:	4630      	mov	r0, r6
   10c96:	4798      	blx	r3
   10c98:	2800      	cmp	r0, #0
   10c9a:	bfb8      	it	lt
   10c9c:	f04f 35ff 	movlt.w	r5, #4294967295
   10ca0:	89a3      	ldrh	r3, [r4, #12]
   10ca2:	061a      	lsls	r2, r3, #24
   10ca4:	d43c      	bmi.n	10d20 <_fclose_r+0xbc>
   10ca6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10ca8:	b141      	cbz	r1, 10cbc <_fclose_r+0x58>
   10caa:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10cae:	4299      	cmp	r1, r3
   10cb0:	d002      	beq.n	10cb8 <_fclose_r+0x54>
   10cb2:	4630      	mov	r0, r6
   10cb4:	f7fb fb96 	bl	c3e4 <_free_r>
   10cb8:	2300      	movs	r3, #0
   10cba:	6323      	str	r3, [r4, #48]	; 0x30
   10cbc:	6c61      	ldr	r1, [r4, #68]	; 0x44
   10cbe:	b121      	cbz	r1, 10cca <_fclose_r+0x66>
   10cc0:	4630      	mov	r0, r6
   10cc2:	f7fb fb8f 	bl	c3e4 <_free_r>
   10cc6:	2300      	movs	r3, #0
   10cc8:	6463      	str	r3, [r4, #68]	; 0x44
   10cca:	f7fa fd01 	bl	b6d0 <__sfp_lock_acquire>
   10cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10cd0:	2200      	movs	r2, #0
   10cd2:	07db      	lsls	r3, r3, #31
   10cd4:	81a2      	strh	r2, [r4, #12]
   10cd6:	d51f      	bpl.n	10d18 <_fclose_r+0xb4>
   10cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10cda:	f7fb f831 	bl	bd40 <__retarget_lock_close_recursive>
   10cde:	f7fa fcfd 	bl	b6dc <__sfp_lock_release>
   10ce2:	4628      	mov	r0, r5
   10ce4:	bd70      	pop	{r4, r5, r6, pc}
   10ce6:	89a3      	ldrh	r3, [r4, #12]
   10ce8:	0599      	lsls	r1, r3, #22
   10cea:	d4cb      	bmi.n	10c84 <_fclose_r+0x20>
   10cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10cee:	f7fb f829 	bl	bd44 <__retarget_lock_acquire_recursive>
   10cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10cf6:	2b00      	cmp	r3, #0
   10cf8:	d1c4      	bne.n	10c84 <_fclose_r+0x20>
   10cfa:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10cfc:	f015 0501 	ands.w	r5, r5, #1
   10d00:	d005      	beq.n	10d0e <_fclose_r+0xaa>
   10d02:	2500      	movs	r5, #0
   10d04:	4628      	mov	r0, r5
   10d06:	bd70      	pop	{r4, r5, r6, pc}
   10d08:	f7fa fcc4 	bl	b694 <__sinit>
   10d0c:	e7b3      	b.n	10c76 <_fclose_r+0x12>
   10d0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10d10:	f7fb f81a 	bl	bd48 <__retarget_lock_release_recursive>
   10d14:	4628      	mov	r0, r5
   10d16:	bd70      	pop	{r4, r5, r6, pc}
   10d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10d1a:	f7fb f815 	bl	bd48 <__retarget_lock_release_recursive>
   10d1e:	e7db      	b.n	10cd8 <_fclose_r+0x74>
   10d20:	6921      	ldr	r1, [r4, #16]
   10d22:	4630      	mov	r0, r6
   10d24:	f7fb fb5e 	bl	c3e4 <_free_r>
   10d28:	e7bd      	b.n	10ca6 <_fclose_r+0x42>
   10d2a:	bf00      	nop

00010d2c <__sflush_r>:
   10d2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   10d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d34:	460c      	mov	r4, r1
   10d36:	0711      	lsls	r1, r2, #28
   10d38:	4680      	mov	r8, r0
   10d3a:	d447      	bmi.n	10dcc <__sflush_r+0xa0>
   10d3c:	6863      	ldr	r3, [r4, #4]
   10d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   10d42:	2b00      	cmp	r3, #0
   10d44:	81a2      	strh	r2, [r4, #12]
   10d46:	dd5e      	ble.n	10e06 <__sflush_r+0xda>
   10d48:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10d4a:	2d00      	cmp	r5, #0
   10d4c:	d058      	beq.n	10e00 <__sflush_r+0xd4>
   10d4e:	2300      	movs	r3, #0
   10d50:	f8d8 6000 	ldr.w	r6, [r8]
   10d54:	f8c8 3000 	str.w	r3, [r8]
   10d58:	b293      	uxth	r3, r2
   10d5a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   10d5e:	d156      	bne.n	10e0e <__sflush_r+0xe2>
   10d60:	2301      	movs	r3, #1
   10d62:	69e1      	ldr	r1, [r4, #28]
   10d64:	4640      	mov	r0, r8
   10d66:	47a8      	blx	r5
   10d68:	1c43      	adds	r3, r0, #1
   10d6a:	d067      	beq.n	10e3c <__sflush_r+0x110>
   10d6c:	89a3      	ldrh	r3, [r4, #12]
   10d6e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10d70:	075f      	lsls	r7, r3, #29
   10d72:	d505      	bpl.n	10d80 <__sflush_r+0x54>
   10d74:	6863      	ldr	r3, [r4, #4]
   10d76:	1ac0      	subs	r0, r0, r3
   10d78:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10d7a:	b10b      	cbz	r3, 10d80 <__sflush_r+0x54>
   10d7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10d7e:	1ac0      	subs	r0, r0, r3
   10d80:	69e1      	ldr	r1, [r4, #28]
   10d82:	4602      	mov	r2, r0
   10d84:	2300      	movs	r3, #0
   10d86:	4640      	mov	r0, r8
   10d88:	47a8      	blx	r5
   10d8a:	1c41      	adds	r1, r0, #1
   10d8c:	d141      	bne.n	10e12 <__sflush_r+0xe6>
   10d8e:	f8d8 3000 	ldr.w	r3, [r8]
   10d92:	2b00      	cmp	r3, #0
   10d94:	d03d      	beq.n	10e12 <__sflush_r+0xe6>
   10d96:	2b1d      	cmp	r3, #29
   10d98:	d001      	beq.n	10d9e <__sflush_r+0x72>
   10d9a:	2b16      	cmp	r3, #22
   10d9c:	d156      	bne.n	10e4c <__sflush_r+0x120>
   10d9e:	89a3      	ldrh	r3, [r4, #12]
   10da0:	6922      	ldr	r2, [r4, #16]
   10da2:	6022      	str	r2, [r4, #0]
   10da4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10da8:	2100      	movs	r1, #0
   10daa:	6061      	str	r1, [r4, #4]
   10dac:	81a3      	strh	r3, [r4, #12]
   10dae:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10db0:	f8c8 6000 	str.w	r6, [r8]
   10db4:	b321      	cbz	r1, 10e00 <__sflush_r+0xd4>
   10db6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10dba:	4299      	cmp	r1, r3
   10dbc:	d002      	beq.n	10dc4 <__sflush_r+0x98>
   10dbe:	4640      	mov	r0, r8
   10dc0:	f7fb fb10 	bl	c3e4 <_free_r>
   10dc4:	2000      	movs	r0, #0
   10dc6:	6320      	str	r0, [r4, #48]	; 0x30
   10dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dcc:	6926      	ldr	r6, [r4, #16]
   10dce:	b1be      	cbz	r6, 10e00 <__sflush_r+0xd4>
   10dd0:	b293      	uxth	r3, r2
   10dd2:	6825      	ldr	r5, [r4, #0]
   10dd4:	6026      	str	r6, [r4, #0]
   10dd6:	079a      	lsls	r2, r3, #30
   10dd8:	bf0c      	ite	eq
   10dda:	6963      	ldreq	r3, [r4, #20]
   10ddc:	2300      	movne	r3, #0
   10dde:	1bad      	subs	r5, r5, r6
   10de0:	60a3      	str	r3, [r4, #8]
   10de2:	e00b      	b.n	10dfc <__sflush_r+0xd0>
   10de4:	462b      	mov	r3, r5
   10de6:	4632      	mov	r2, r6
   10de8:	69e1      	ldr	r1, [r4, #28]
   10dea:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10dec:	4640      	mov	r0, r8
   10dee:	47b8      	blx	r7
   10df0:	f1b0 0c00 	subs.w	ip, r0, #0
   10df4:	eba5 050c 	sub.w	r5, r5, ip
   10df8:	4466      	add	r6, ip
   10dfa:	dd17      	ble.n	10e2c <__sflush_r+0x100>
   10dfc:	2d00      	cmp	r5, #0
   10dfe:	dcf1      	bgt.n	10de4 <__sflush_r+0xb8>
   10e00:	2000      	movs	r0, #0
   10e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10e08:	2b00      	cmp	r3, #0
   10e0a:	dc9d      	bgt.n	10d48 <__sflush_r+0x1c>
   10e0c:	e7f8      	b.n	10e00 <__sflush_r+0xd4>
   10e0e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10e10:	e7ae      	b.n	10d70 <__sflush_r+0x44>
   10e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10e16:	6922      	ldr	r2, [r4, #16]
   10e18:	6022      	str	r2, [r4, #0]
   10e1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10e1e:	81a3      	strh	r3, [r4, #12]
   10e20:	2200      	movs	r2, #0
   10e22:	04db      	lsls	r3, r3, #19
   10e24:	6062      	str	r2, [r4, #4]
   10e26:	d5c2      	bpl.n	10dae <__sflush_r+0x82>
   10e28:	6520      	str	r0, [r4, #80]	; 0x50
   10e2a:	e7c0      	b.n	10dae <__sflush_r+0x82>
   10e2c:	89a3      	ldrh	r3, [r4, #12]
   10e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10e32:	f04f 30ff 	mov.w	r0, #4294967295
   10e36:	81a3      	strh	r3, [r4, #12]
   10e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e3c:	f8d8 3000 	ldr.w	r3, [r8]
   10e40:	2b00      	cmp	r3, #0
   10e42:	d093      	beq.n	10d6c <__sflush_r+0x40>
   10e44:	2b1d      	cmp	r3, #29
   10e46:	d006      	beq.n	10e56 <__sflush_r+0x12a>
   10e48:	2b16      	cmp	r3, #22
   10e4a:	d004      	beq.n	10e56 <__sflush_r+0x12a>
   10e4c:	89a3      	ldrh	r3, [r4, #12]
   10e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10e52:	81a3      	strh	r3, [r4, #12]
   10e54:	e7d5      	b.n	10e02 <__sflush_r+0xd6>
   10e56:	f8c8 6000 	str.w	r6, [r8]
   10e5a:	e7d1      	b.n	10e00 <__sflush_r+0xd4>

00010e5c <_fflush_r>:
   10e5c:	b538      	push	{r3, r4, r5, lr}
   10e5e:	460c      	mov	r4, r1
   10e60:	4605      	mov	r5, r0
   10e62:	b108      	cbz	r0, 10e68 <_fflush_r+0xc>
   10e64:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10e66:	b303      	cbz	r3, 10eaa <_fflush_r+0x4e>
   10e68:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10e6c:	b188      	cbz	r0, 10e92 <_fflush_r+0x36>
   10e6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10e70:	07db      	lsls	r3, r3, #31
   10e72:	d401      	bmi.n	10e78 <_fflush_r+0x1c>
   10e74:	0581      	lsls	r1, r0, #22
   10e76:	d50f      	bpl.n	10e98 <_fflush_r+0x3c>
   10e78:	4628      	mov	r0, r5
   10e7a:	4621      	mov	r1, r4
   10e7c:	f7ff ff56 	bl	10d2c <__sflush_r>
   10e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10e82:	07da      	lsls	r2, r3, #31
   10e84:	4605      	mov	r5, r0
   10e86:	d402      	bmi.n	10e8e <_fflush_r+0x32>
   10e88:	89a3      	ldrh	r3, [r4, #12]
   10e8a:	059b      	lsls	r3, r3, #22
   10e8c:	d508      	bpl.n	10ea0 <_fflush_r+0x44>
   10e8e:	4628      	mov	r0, r5
   10e90:	bd38      	pop	{r3, r4, r5, pc}
   10e92:	4605      	mov	r5, r0
   10e94:	4628      	mov	r0, r5
   10e96:	bd38      	pop	{r3, r4, r5, pc}
   10e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10e9a:	f7fa ff53 	bl	bd44 <__retarget_lock_acquire_recursive>
   10e9e:	e7eb      	b.n	10e78 <_fflush_r+0x1c>
   10ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10ea2:	f7fa ff51 	bl	bd48 <__retarget_lock_release_recursive>
   10ea6:	4628      	mov	r0, r5
   10ea8:	bd38      	pop	{r3, r4, r5, pc}
   10eaa:	f7fa fbf3 	bl	b694 <__sinit>
   10eae:	e7db      	b.n	10e68 <_fflush_r+0xc>

00010eb0 <__sccl>:
   10eb0:	b570      	push	{r4, r5, r6, lr}
   10eb2:	780c      	ldrb	r4, [r1, #0]
   10eb4:	2c5e      	cmp	r4, #94	; 0x5e
   10eb6:	4686      	mov	lr, r0
   10eb8:	d01e      	beq.n	10ef8 <__sccl+0x48>
   10eba:	2200      	movs	r2, #0
   10ebc:	1c48      	adds	r0, r1, #1
   10ebe:	4694      	mov	ip, r2
   10ec0:	f10e 33ff 	add.w	r3, lr, #4294967295
   10ec4:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   10ec8:	f803 2f01 	strb.w	r2, [r3, #1]!
   10ecc:	428b      	cmp	r3, r1
   10ece:	d1fb      	bne.n	10ec8 <__sccl+0x18>
   10ed0:	b184      	cbz	r4, 10ef4 <__sccl+0x44>
   10ed2:	f08c 0101 	eor.w	r1, ip, #1
   10ed6:	f80e 1004 	strb.w	r1, [lr, r4]
   10eda:	1c45      	adds	r5, r0, #1
   10edc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   10ee0:	2b2d      	cmp	r3, #45	; 0x2d
   10ee2:	d00e      	beq.n	10f02 <__sccl+0x52>
   10ee4:	2b5d      	cmp	r3, #93	; 0x5d
   10ee6:	d003      	beq.n	10ef0 <__sccl+0x40>
   10ee8:	b11b      	cbz	r3, 10ef2 <__sccl+0x42>
   10eea:	461c      	mov	r4, r3
   10eec:	4628      	mov	r0, r5
   10eee:	e7f2      	b.n	10ed6 <__sccl+0x26>
   10ef0:	4628      	mov	r0, r5
   10ef2:	bd70      	pop	{r4, r5, r6, pc}
   10ef4:	3801      	subs	r0, #1
   10ef6:	bd70      	pop	{r4, r5, r6, pc}
   10ef8:	2201      	movs	r2, #1
   10efa:	784c      	ldrb	r4, [r1, #1]
   10efc:	1c88      	adds	r0, r1, #2
   10efe:	4694      	mov	ip, r2
   10f00:	e7de      	b.n	10ec0 <__sccl+0x10>
   10f02:	f890 c001 	ldrb.w	ip, [r0, #1]
   10f06:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   10f0a:	d0ee      	beq.n	10eea <__sccl+0x3a>
   10f0c:	4564      	cmp	r4, ip
   10f0e:	dcec      	bgt.n	10eea <__sccl+0x3a>
   10f10:	1c66      	adds	r6, r4, #1
   10f12:	3002      	adds	r0, #2
   10f14:	eb0e 0206 	add.w	r2, lr, r6
   10f18:	f802 1b01 	strb.w	r1, [r2], #1
   10f1c:	eba2 030e 	sub.w	r3, r2, lr
   10f20:	3b01      	subs	r3, #1
   10f22:	459c      	cmp	ip, r3
   10f24:	dcf8      	bgt.n	10f18 <__sccl+0x68>
   10f26:	ebac 0304 	sub.w	r3, ip, r4
   10f2a:	3b01      	subs	r3, #1
   10f2c:	4564      	cmp	r4, ip
   10f2e:	bfa8      	it	ge
   10f30:	2300      	movge	r3, #0
   10f32:	3502      	adds	r5, #2
   10f34:	199c      	adds	r4, r3, r6
   10f36:	e7d1      	b.n	10edc <__sccl+0x2c>

00010f38 <stpncpy>:
   10f38:	ea41 0300 	orr.w	r3, r1, r0
   10f3c:	079b      	lsls	r3, r3, #30
   10f3e:	b430      	push	{r4, r5}
   10f40:	d101      	bne.n	10f46 <stpncpy+0xe>
   10f42:	2a03      	cmp	r2, #3
   10f44:	d80f      	bhi.n	10f66 <stpncpy+0x2e>
   10f46:	f101 3cff 	add.w	ip, r1, #4294967295
   10f4a:	e007      	b.n	10f5c <stpncpy+0x24>
   10f4c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   10f50:	f803 1b01 	strb.w	r1, [r3], #1
   10f54:	1e54      	subs	r4, r2, #1
   10f56:	b1c1      	cbz	r1, 10f8a <stpncpy+0x52>
   10f58:	4622      	mov	r2, r4
   10f5a:	4618      	mov	r0, r3
   10f5c:	4603      	mov	r3, r0
   10f5e:	2a00      	cmp	r2, #0
   10f60:	d1f4      	bne.n	10f4c <stpncpy+0x14>
   10f62:	bc30      	pop	{r4, r5}
   10f64:	4770      	bx	lr
   10f66:	460b      	mov	r3, r1
   10f68:	4619      	mov	r1, r3
   10f6a:	f853 5b04 	ldr.w	r5, [r3], #4
   10f6e:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   10f72:	ea24 0405 	bic.w	r4, r4, r5
   10f76:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   10f7a:	d1e4      	bne.n	10f46 <stpncpy+0xe>
   10f7c:	3a04      	subs	r2, #4
   10f7e:	2a03      	cmp	r2, #3
   10f80:	f840 5b04 	str.w	r5, [r0], #4
   10f84:	4619      	mov	r1, r3
   10f86:	d8ef      	bhi.n	10f68 <stpncpy+0x30>
   10f88:	e7dd      	b.n	10f46 <stpncpy+0xe>
   10f8a:	4402      	add	r2, r0
   10f8c:	2c00      	cmp	r4, #0
   10f8e:	d0e8      	beq.n	10f62 <stpncpy+0x2a>
   10f90:	f803 1b01 	strb.w	r1, [r3], #1
   10f94:	4293      	cmp	r3, r2
   10f96:	d1fb      	bne.n	10f90 <stpncpy+0x58>
   10f98:	bc30      	pop	{r4, r5}
   10f9a:	4770      	bx	lr

00010f9c <_localeconv_r>:
   10f9c:	4800      	ldr	r0, [pc, #0]	; (10fa0 <_localeconv_r+0x4>)
   10f9e:	4770      	bx	lr
   10fa0:	200086e4 	.word	0x200086e4
   10fa4:	00000000 	.word	0x00000000

00010fa8 <frexp>:
   10fa8:	b430      	push	{r4, r5}
   10faa:	b082      	sub	sp, #8
   10fac:	ed8d 0b00 	vstr	d0, [sp]
   10fb0:	9a01      	ldr	r2, [sp, #4]
   10fb2:	4c19      	ldr	r4, [pc, #100]	; (11018 <frexp+0x70>)
   10fb4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10fb8:	2100      	movs	r1, #0
   10fba:	42a3      	cmp	r3, r4
   10fbc:	6001      	str	r1, [r0, #0]
   10fbe:	dc21      	bgt.n	11004 <frexp+0x5c>
   10fc0:	9c00      	ldr	r4, [sp, #0]
   10fc2:	431c      	orrs	r4, r3
   10fc4:	d01e      	beq.n	11004 <frexp+0x5c>
   10fc6:	4c15      	ldr	r4, [pc, #84]	; (1101c <frexp+0x74>)
   10fc8:	4014      	ands	r4, r2
   10fca:	b954      	cbnz	r4, 10fe2 <frexp+0x3a>
   10fcc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 11010 <frexp+0x68>
   10fd0:	ee20 7b07 	vmul.f64	d7, d0, d7
   10fd4:	ed8d 7b00 	vstr	d7, [sp]
   10fd8:	9a01      	ldr	r2, [sp, #4]
   10fda:	f06f 0135 	mvn.w	r1, #53	; 0x35
   10fde:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10fe2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   10fe6:	e9dd 4500 	ldrd	r4, r5, [sp]
   10fea:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   10fee:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10ff2:	151b      	asrs	r3, r3, #20
   10ff4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   10ff8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   10ffc:	e9cd 4500 	strd	r4, r5, [sp]
   11000:	440b      	add	r3, r1
   11002:	6003      	str	r3, [r0, #0]
   11004:	ed9d 0b00 	vldr	d0, [sp]
   11008:	b002      	add	sp, #8
   1100a:	bc30      	pop	{r4, r5}
   1100c:	4770      	bx	lr
   1100e:	bf00      	nop
   11010:	00000000 	.word	0x00000000
   11014:	43500000 	.word	0x43500000
   11018:	7fefffff 	.word	0x7fefffff
   1101c:	7ff00000 	.word	0x7ff00000

00011020 <__assert_func>:
   11020:	b500      	push	{lr}
   11022:	4c0b      	ldr	r4, [pc, #44]	; (11050 <__assert_func+0x30>)
   11024:	6825      	ldr	r5, [r4, #0]
   11026:	4614      	mov	r4, r2
   11028:	68ee      	ldr	r6, [r5, #12]
   1102a:	461a      	mov	r2, r3
   1102c:	b085      	sub	sp, #20
   1102e:	4603      	mov	r3, r0
   11030:	460d      	mov	r5, r1
   11032:	b14c      	cbz	r4, 11048 <__assert_func+0x28>
   11034:	4907      	ldr	r1, [pc, #28]	; (11054 <__assert_func+0x34>)
   11036:	9500      	str	r5, [sp, #0]
   11038:	e9cd 1401 	strd	r1, r4, [sp, #4]
   1103c:	4630      	mov	r0, r6
   1103e:	4906      	ldr	r1, [pc, #24]	; (11058 <__assert_func+0x38>)
   11040:	f001 fabe 	bl	125c0 <fiprintf>
   11044:	f7f7 fa3e 	bl	84c4 <abort>
   11048:	4904      	ldr	r1, [pc, #16]	; (1105c <__assert_func+0x3c>)
   1104a:	460c      	mov	r4, r1
   1104c:	e7f3      	b.n	11036 <__assert_func+0x16>
   1104e:	bf00      	nop
   11050:	20008b7c 	.word	0x20008b7c
   11054:	20000888 	.word	0x20000888
   11058:	20000898 	.word	0x20000898
   1105c:	20008028 	.word	0x20008028

00011060 <_calloc_r>:
   11060:	b538      	push	{r3, r4, r5, lr}
   11062:	fba1 1402 	umull	r1, r4, r1, r2
   11066:	bb8c      	cbnz	r4, 110cc <_calloc_r+0x6c>
   11068:	f7f8 fde0 	bl	9c2c <_malloc_r>
   1106c:	4605      	mov	r5, r0
   1106e:	b1e0      	cbz	r0, 110aa <_calloc_r+0x4a>
   11070:	f850 2c04 	ldr.w	r2, [r0, #-4]
   11074:	f022 0203 	bic.w	r2, r2, #3
   11078:	3a04      	subs	r2, #4
   1107a:	2a24      	cmp	r2, #36	; 0x24
   1107c:	d817      	bhi.n	110ae <_calloc_r+0x4e>
   1107e:	2a13      	cmp	r2, #19
   11080:	d91a      	bls.n	110b8 <_calloc_r+0x58>
   11082:	2a1b      	cmp	r2, #27
   11084:	e9c0 4400 	strd	r4, r4, [r0]
   11088:	d91d      	bls.n	110c6 <_calloc_r+0x66>
   1108a:	2a24      	cmp	r2, #36	; 0x24
   1108c:	bf14      	ite	ne
   1108e:	f100 0210 	addne.w	r2, r0, #16
   11092:	f100 0218 	addeq.w	r2, r0, #24
   11096:	f04f 0300 	mov.w	r3, #0
   1109a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   1109e:	bf04      	itt	eq
   110a0:	6104      	streq	r4, [r0, #16]
   110a2:	6144      	streq	r4, [r0, #20]
   110a4:	e9c2 3300 	strd	r3, r3, [r2]
   110a8:	6093      	str	r3, [r2, #8]
   110aa:	4628      	mov	r0, r5
   110ac:	bd38      	pop	{r3, r4, r5, pc}
   110ae:	4621      	mov	r1, r4
   110b0:	f7fa fce4 	bl	ba7c <memset>
   110b4:	4628      	mov	r0, r5
   110b6:	bd38      	pop	{r3, r4, r5, pc}
   110b8:	4602      	mov	r2, r0
   110ba:	2300      	movs	r3, #0
   110bc:	e9c2 3300 	strd	r3, r3, [r2]
   110c0:	6093      	str	r3, [r2, #8]
   110c2:	4628      	mov	r0, r5
   110c4:	bd38      	pop	{r3, r4, r5, pc}
   110c6:	f100 0208 	add.w	r2, r0, #8
   110ca:	e7f6      	b.n	110ba <_calloc_r+0x5a>
   110cc:	f7fa fe0c 	bl	bce8 <__errno>
   110d0:	230c      	movs	r3, #12
   110d2:	2500      	movs	r5, #0
   110d4:	6003      	str	r3, [r0, #0]
   110d6:	e7e8      	b.n	110aa <_calloc_r+0x4a>

000110d8 <quorem>:
   110d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110dc:	6903      	ldr	r3, [r0, #16]
   110de:	690c      	ldr	r4, [r1, #16]
   110e0:	42a3      	cmp	r3, r4
   110e2:	b083      	sub	sp, #12
   110e4:	f2c0 8087 	blt.w	111f6 <quorem+0x11e>
   110e8:	3c01      	subs	r4, #1
   110ea:	f101 0514 	add.w	r5, r1, #20
   110ee:	00a3      	lsls	r3, r4, #2
   110f0:	f100 0814 	add.w	r8, r0, #20
   110f4:	9300      	str	r3, [sp, #0]
   110f6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   110fa:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   110fe:	3301      	adds	r3, #1
   11100:	4681      	mov	r9, r0
   11102:	429a      	cmp	r2, r3
   11104:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   11108:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   1110c:	9001      	str	r0, [sp, #4]
   1110e:	fbb2 f6f3 	udiv	r6, r2, r3
   11112:	d33b      	bcc.n	1118c <quorem+0xb4>
   11114:	f04f 0c00 	mov.w	ip, #0
   11118:	46ae      	mov	lr, r5
   1111a:	4640      	mov	r0, r8
   1111c:	46e2      	mov	sl, ip
   1111e:	4663      	mov	r3, ip
   11120:	f85e bb04 	ldr.w	fp, [lr], #4
   11124:	6802      	ldr	r2, [r0, #0]
   11126:	fa1f fc8b 	uxth.w	ip, fp
   1112a:	fb06 330c 	mla	r3, r6, ip, r3
   1112e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   11132:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   11136:	fb06 cc0b 	mla	ip, r6, fp, ip
   1113a:	b29b      	uxth	r3, r3
   1113c:	ebaa 0303 	sub.w	r3, sl, r3
   11140:	fa1f fa8c 	uxth.w	sl, ip
   11144:	fa13 f382 	uxtah	r3, r3, r2
   11148:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   1114c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   11150:	b29b      	uxth	r3, r3
   11152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11156:	4577      	cmp	r7, lr
   11158:	f840 3b04 	str.w	r3, [r0], #4
   1115c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   11160:	ea4f 431c 	mov.w	r3, ip, lsr #16
   11164:	d2dc      	bcs.n	11120 <quorem+0x48>
   11166:	9b00      	ldr	r3, [sp, #0]
   11168:	f858 3003 	ldr.w	r3, [r8, r3]
   1116c:	b973      	cbnz	r3, 1118c <quorem+0xb4>
   1116e:	9b01      	ldr	r3, [sp, #4]
   11170:	3b04      	subs	r3, #4
   11172:	4598      	cmp	r8, r3
   11174:	d304      	bcc.n	11180 <quorem+0xa8>
   11176:	e007      	b.n	11188 <quorem+0xb0>
   11178:	4598      	cmp	r8, r3
   1117a:	f104 34ff 	add.w	r4, r4, #4294967295
   1117e:	d203      	bcs.n	11188 <quorem+0xb0>
   11180:	f853 2904 	ldr.w	r2, [r3], #-4
   11184:	2a00      	cmp	r2, #0
   11186:	d0f7      	beq.n	11178 <quorem+0xa0>
   11188:	f8c9 4010 	str.w	r4, [r9, #16]
   1118c:	4648      	mov	r0, r9
   1118e:	f7fc f933 	bl	d3f8 <__mcmp>
   11192:	2800      	cmp	r0, #0
   11194:	db2b      	blt.n	111ee <quorem+0x116>
   11196:	3601      	adds	r6, #1
   11198:	4641      	mov	r1, r8
   1119a:	2300      	movs	r3, #0
   1119c:	f855 0b04 	ldr.w	r0, [r5], #4
   111a0:	f8d1 c000 	ldr.w	ip, [r1]
   111a4:	b282      	uxth	r2, r0
   111a6:	1a9a      	subs	r2, r3, r2
   111a8:	0c03      	lsrs	r3, r0, #16
   111aa:	fa12 f28c 	uxtah	r2, r2, ip
   111ae:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   111b2:	eb03 4322 	add.w	r3, r3, r2, asr #16
   111b6:	b292      	uxth	r2, r2
   111b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   111bc:	42af      	cmp	r7, r5
   111be:	f841 2b04 	str.w	r2, [r1], #4
   111c2:	ea4f 4323 	mov.w	r3, r3, asr #16
   111c6:	d2e9      	bcs.n	1119c <quorem+0xc4>
   111c8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   111cc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   111d0:	b96a      	cbnz	r2, 111ee <quorem+0x116>
   111d2:	3b04      	subs	r3, #4
   111d4:	4598      	cmp	r8, r3
   111d6:	d304      	bcc.n	111e2 <quorem+0x10a>
   111d8:	e007      	b.n	111ea <quorem+0x112>
   111da:	4598      	cmp	r8, r3
   111dc:	f104 34ff 	add.w	r4, r4, #4294967295
   111e0:	d203      	bcs.n	111ea <quorem+0x112>
   111e2:	f853 2904 	ldr.w	r2, [r3], #-4
   111e6:	2a00      	cmp	r2, #0
   111e8:	d0f7      	beq.n	111da <quorem+0x102>
   111ea:	f8c9 4010 	str.w	r4, [r9, #16]
   111ee:	4630      	mov	r0, r6
   111f0:	b003      	add	sp, #12
   111f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111f6:	2000      	movs	r0, #0
   111f8:	b003      	add	sp, #12
   111fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111fe:	bf00      	nop

00011200 <_dtoa_r>:
   11200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11204:	ed2d 8b02 	vpush	{d8}
   11208:	b08f      	sub	sp, #60	; 0x3c
   1120a:	ed8d 0b02 	vstr	d0, [sp, #8]
   1120e:	9101      	str	r1, [sp, #4]
   11210:	6b81      	ldr	r1, [r0, #56]	; 0x38
   11212:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   11214:	9305      	str	r3, [sp, #20]
   11216:	ec57 6b10 	vmov	r6, r7, d0
   1121a:	4604      	mov	r4, r0
   1121c:	4693      	mov	fp, r2
   1121e:	b141      	cbz	r1, 11232 <_dtoa_r+0x32>
   11220:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   11222:	604a      	str	r2, [r1, #4]
   11224:	2301      	movs	r3, #1
   11226:	4093      	lsls	r3, r2
   11228:	608b      	str	r3, [r1, #8]
   1122a:	f7fb fe2d 	bl	ce88 <_Bfree>
   1122e:	2300      	movs	r3, #0
   11230:	63a3      	str	r3, [r4, #56]	; 0x38
   11232:	f1b7 0800 	subs.w	r8, r7, #0
   11236:	bfb4      	ite	lt
   11238:	2301      	movlt	r3, #1
   1123a:	2300      	movge	r3, #0
   1123c:	602b      	str	r3, [r5, #0]
   1123e:	4bbe      	ldr	r3, [pc, #760]	; (11538 <_dtoa_r+0x338>)
   11240:	bfbc      	itt	lt
   11242:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   11246:	f8cd 800c 	strlt.w	r8, [sp, #12]
   1124a:	ea33 0308 	bics.w	r3, r3, r8
   1124e:	f000 809f 	beq.w	11390 <_dtoa_r+0x190>
   11252:	ed9d 8b02 	vldr	d8, [sp, #8]
   11256:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1125e:	d111      	bne.n	11284 <_dtoa_r+0x84>
   11260:	9a05      	ldr	r2, [sp, #20]
   11262:	2301      	movs	r3, #1
   11264:	6013      	str	r3, [r2, #0]
   11266:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11268:	2b00      	cmp	r3, #0
   1126a:	f000 823f 	beq.w	116ec <_dtoa_r+0x4ec>
   1126e:	4bb3      	ldr	r3, [pc, #716]	; (1153c <_dtoa_r+0x33c>)
   11270:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11272:	6013      	str	r3, [r2, #0]
   11274:	3b01      	subs	r3, #1
   11276:	9300      	str	r3, [sp, #0]
   11278:	9800      	ldr	r0, [sp, #0]
   1127a:	b00f      	add	sp, #60	; 0x3c
   1127c:	ecbd 8b02 	vpop	{d8}
   11280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11284:	aa0c      	add	r2, sp, #48	; 0x30
   11286:	a90d      	add	r1, sp, #52	; 0x34
   11288:	4620      	mov	r0, r4
   1128a:	eeb0 0b48 	vmov.f64	d0, d8
   1128e:	f7fc fa13 	bl	d6b8 <__d2b>
   11292:	ea5f 5318 	movs.w	r3, r8, lsr #20
   11296:	4605      	mov	r5, r0
   11298:	f040 8092 	bne.w	113c0 <_dtoa_r+0x1c0>
   1129c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   112a0:	440b      	add	r3, r1
   112a2:	f203 4232 	addw	r2, r3, #1074	; 0x432
   112a6:	2a20      	cmp	r2, #32
   112a8:	f340 82fa 	ble.w	118a0 <_dtoa_r+0x6a0>
   112ac:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   112b0:	fa08 f802 	lsl.w	r8, r8, r2
   112b4:	f203 4212 	addw	r2, r3, #1042	; 0x412
   112b8:	40d6      	lsrs	r6, r2
   112ba:	ea48 0206 	orr.w	r2, r8, r6
   112be:	ee07 2a10 	vmov	s14, r2
   112c2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   112c6:	1e58      	subs	r0, r3, #1
   112c8:	ee17 6a90 	vmov	r6, s15
   112cc:	ec53 2b17 	vmov	r2, r3, d7
   112d0:	f04f 0a01 	mov.w	sl, #1
   112d4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   112d8:	ed9f 3b91 	vldr	d3, [pc, #580]	; 11520 <_dtoa_r+0x320>
   112dc:	ed9f 7b92 	vldr	d7, [pc, #584]	; 11528 <_dtoa_r+0x328>
   112e0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 11530 <_dtoa_r+0x330>
   112e4:	ee06 0a90 	vmov	s13, r0
   112e8:	ec43 2b12 	vmov	d2, r2, r3
   112ec:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   112f0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   112f4:	ee32 6b46 	vsub.f64	d6, d2, d6
   112f8:	eea6 7b03 	vfma.f64	d7, d6, d3
   112fc:	eea4 7b05 	vfma.f64	d7, d4, d5
   11300:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11304:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   11308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1130c:	ee16 7a90 	vmov	r7, s13
   11310:	d508      	bpl.n	11324 <_dtoa_r+0x124>
   11312:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   11316:	eeb4 6b47 	vcmp.f64	d6, d7
   1131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1131e:	bf18      	it	ne
   11320:	f107 37ff 	addne.w	r7, r7, #4294967295
   11324:	2f16      	cmp	r7, #22
   11326:	f200 8145 	bhi.w	115b4 <_dtoa_r+0x3b4>
   1132a:	4b85      	ldr	r3, [pc, #532]	; (11540 <_dtoa_r+0x340>)
   1132c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   11330:	ed93 7b00 	vldr	d7, [r3]
   11334:	eeb4 8bc7 	vcmpe.f64	d8, d7
   11338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1133c:	d557      	bpl.n	113ee <_dtoa_r+0x1ee>
   1133e:	1a09      	subs	r1, r1, r0
   11340:	2300      	movs	r3, #0
   11342:	f1b1 0801 	subs.w	r8, r1, #1
   11346:	f107 37ff 	add.w	r7, r7, #4294967295
   1134a:	930a      	str	r3, [sp, #40]	; 0x28
   1134c:	f100 8139 	bmi.w	115c2 <_dtoa_r+0x3c2>
   11350:	2300      	movs	r3, #0
   11352:	9306      	str	r3, [sp, #24]
   11354:	2f00      	cmp	r7, #0
   11356:	da52      	bge.n	113fe <_dtoa_r+0x1fe>
   11358:	9b06      	ldr	r3, [sp, #24]
   1135a:	9704      	str	r7, [sp, #16]
   1135c:	1bdb      	subs	r3, r3, r7
   1135e:	9306      	str	r3, [sp, #24]
   11360:	427b      	negs	r3, r7
   11362:	9308      	str	r3, [sp, #32]
   11364:	9b01      	ldr	r3, [sp, #4]
   11366:	2b09      	cmp	r3, #9
   11368:	f04f 0700 	mov.w	r7, #0
   1136c:	d84e      	bhi.n	1140c <_dtoa_r+0x20c>
   1136e:	2b05      	cmp	r3, #5
   11370:	f340 829d 	ble.w	118ae <_dtoa_r+0x6ae>
   11374:	3b04      	subs	r3, #4
   11376:	9301      	str	r3, [sp, #4]
   11378:	2600      	movs	r6, #0
   1137a:	9b01      	ldr	r3, [sp, #4]
   1137c:	1e9a      	subs	r2, r3, #2
   1137e:	2a03      	cmp	r2, #3
   11380:	f200 8125 	bhi.w	115ce <_dtoa_r+0x3ce>
   11384:	e8df f012 	tbh	[pc, r2, lsl #1]
   11388:	03a703aa 	.word	0x03a703aa
   1138c:	037e039d 	.word	0x037e039d
   11390:	9a05      	ldr	r2, [sp, #20]
   11392:	f3c8 0813 	ubfx	r8, r8, #0, #20
   11396:	f242 730f 	movw	r3, #9999	; 0x270f
   1139a:	ea58 0806 	orrs.w	r8, r8, r6
   1139e:	6013      	str	r3, [r2, #0]
   113a0:	d11e      	bne.n	113e0 <_dtoa_r+0x1e0>
   113a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   113a4:	2b00      	cmp	r3, #0
   113a6:	f000 8591 	beq.w	11ecc <_dtoa_r+0xccc>
   113aa:	4b66      	ldr	r3, [pc, #408]	; (11544 <_dtoa_r+0x344>)
   113ac:	9300      	str	r3, [sp, #0]
   113ae:	3308      	adds	r3, #8
   113b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   113b2:	9800      	ldr	r0, [sp, #0]
   113b4:	6013      	str	r3, [r2, #0]
   113b6:	b00f      	add	sp, #60	; 0x3c
   113b8:	ecbd 8b02 	vpop	{d8}
   113bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113c0:	ee18 6a90 	vmov	r6, s17
   113c4:	f3c6 0613 	ubfx	r6, r6, #0, #20
   113c8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   113cc:	ec53 2b18 	vmov	r2, r3, d8
   113d0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   113d4:	990c      	ldr	r1, [sp, #48]	; 0x30
   113d6:	f04f 0a00 	mov.w	sl, #0
   113da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   113de:	e77b      	b.n	112d8 <_dtoa_r+0xd8>
   113e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   113e2:	2b00      	cmp	r3, #0
   113e4:	f040 833b 	bne.w	11a5e <_dtoa_r+0x85e>
   113e8:	4b57      	ldr	r3, [pc, #348]	; (11548 <_dtoa_r+0x348>)
   113ea:	9300      	str	r3, [sp, #0]
   113ec:	e744      	b.n	11278 <_dtoa_r+0x78>
   113ee:	1a09      	subs	r1, r1, r0
   113f0:	2300      	movs	r3, #0
   113f2:	f1b1 0801 	subs.w	r8, r1, #1
   113f6:	930a      	str	r3, [sp, #40]	; 0x28
   113f8:	f100 80e3 	bmi.w	115c2 <_dtoa_r+0x3c2>
   113fc:	9306      	str	r3, [sp, #24]
   113fe:	2300      	movs	r3, #0
   11400:	9308      	str	r3, [sp, #32]
   11402:	9b01      	ldr	r3, [sp, #4]
   11404:	9704      	str	r7, [sp, #16]
   11406:	2b09      	cmp	r3, #9
   11408:	44b8      	add	r8, r7
   1140a:	d9b0      	bls.n	1136e <_dtoa_r+0x16e>
   1140c:	2300      	movs	r3, #0
   1140e:	2601      	movs	r6, #1
   11410:	9301      	str	r3, [sp, #4]
   11412:	9607      	str	r6, [sp, #28]
   11414:	f04f 39ff 	mov.w	r9, #4294967295
   11418:	469b      	mov	fp, r3
   1141a:	2100      	movs	r1, #0
   1141c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1141e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   11422:	4620      	mov	r0, r4
   11424:	f7fb fd0a 	bl	ce3c <_Balloc>
   11428:	9000      	str	r0, [sp, #0]
   1142a:	2800      	cmp	r0, #0
   1142c:	f000 8540 	beq.w	11eb0 <_dtoa_r+0xcb0>
   11430:	9b00      	ldr	r3, [sp, #0]
   11432:	63a3      	str	r3, [r4, #56]	; 0x38
   11434:	f1b9 0f0e 	cmp.w	r9, #14
   11438:	f200 80dc 	bhi.w	115f4 <_dtoa_r+0x3f4>
   1143c:	2e00      	cmp	r6, #0
   1143e:	f000 80d9 	beq.w	115f4 <_dtoa_r+0x3f4>
   11442:	9b04      	ldr	r3, [sp, #16]
   11444:	2b00      	cmp	r3, #0
   11446:	f340 83de 	ble.w	11c06 <_dtoa_r+0xa06>
   1144a:	4a3d      	ldr	r2, [pc, #244]	; (11540 <_dtoa_r+0x340>)
   1144c:	f003 010f 	and.w	r1, r3, #15
   11450:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11454:	ed92 7b00 	vldr	d7, [r2]
   11458:	111a      	asrs	r2, r3, #4
   1145a:	05db      	lsls	r3, r3, #23
   1145c:	f140 8382 	bpl.w	11b64 <_dtoa_r+0x964>
   11460:	493a      	ldr	r1, [pc, #232]	; (1154c <_dtoa_r+0x34c>)
   11462:	ed91 6b08 	vldr	d6, [r1, #32]
   11466:	f002 020f 	and.w	r2, r2, #15
   1146a:	2003      	movs	r0, #3
   1146c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   11470:	b15a      	cbz	r2, 1148a <_dtoa_r+0x28a>
   11472:	4936      	ldr	r1, [pc, #216]	; (1154c <_dtoa_r+0x34c>)
   11474:	07d6      	lsls	r6, r2, #31
   11476:	d504      	bpl.n	11482 <_dtoa_r+0x282>
   11478:	ed91 6b00 	vldr	d6, [r1]
   1147c:	3001      	adds	r0, #1
   1147e:	ee27 7b06 	vmul.f64	d7, d7, d6
   11482:	1052      	asrs	r2, r2, #1
   11484:	f101 0108 	add.w	r1, r1, #8
   11488:	d1f4      	bne.n	11474 <_dtoa_r+0x274>
   1148a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1148e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11490:	b13b      	cbz	r3, 114a2 <_dtoa_r+0x2a2>
   11492:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   11496:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1149e:	f100 84ae 	bmi.w	11dfe <_dtoa_r+0xbfe>
   114a2:	ee07 0a90 	vmov	s15, r0
   114a6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   114aa:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   114ae:	eea5 7b06 	vfma.f64	d7, d5, d6
   114b2:	ee17 2a90 	vmov	r2, s15
   114b6:	ec51 0b17 	vmov	r0, r1, d7
   114ba:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   114be:	f1b9 0f00 	cmp.w	r9, #0
   114c2:	f000 8388 	beq.w	11bd6 <_dtoa_r+0x9d6>
   114c6:	9e04      	ldr	r6, [sp, #16]
   114c8:	464a      	mov	r2, r9
   114ca:	9b07      	ldr	r3, [sp, #28]
   114cc:	2b00      	cmp	r3, #0
   114ce:	f000 8447 	beq.w	11d60 <_dtoa_r+0xb60>
   114d2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   114d6:	4b1a      	ldr	r3, [pc, #104]	; (11540 <_dtoa_r+0x340>)
   114d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   114dc:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   114e0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   114e4:	ee36 7b47 	vsub.f64	d7, d6, d7
   114e8:	ed1c 6b02 	vldr	d6, [ip, #-8]
   114ec:	ee83 5b06 	vdiv.f64	d5, d3, d6
   114f0:	ec41 0b16 	vmov	d6, r0, r1
   114f4:	ee14 0a90 	vmov	r0, s9
   114f8:	ee35 5b46 	vsub.f64	d5, d5, d6
   114fc:	9900      	ldr	r1, [sp, #0]
   114fe:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11502:	3030      	adds	r0, #48	; 0x30
   11504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11508:	f801 0b01 	strb.w	r0, [r1], #1
   1150c:	f300 84ac 	bgt.w	11e68 <_dtoa_r+0xc68>
   11510:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   11514:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11518:	f04f 0c00 	mov.w	ip, #0
   1151c:	e031      	b.n	11582 <_dtoa_r+0x382>
   1151e:	bf00      	nop
   11520:	636f4361 	.word	0x636f4361
   11524:	3fd287a7 	.word	0x3fd287a7
   11528:	8b60c8b3 	.word	0x8b60c8b3
   1152c:	3fc68a28 	.word	0x3fc68a28
   11530:	509f79fb 	.word	0x509f79fb
   11534:	3fd34413 	.word	0x3fd34413
   11538:	7ff00000 	.word	0x7ff00000
   1153c:	20000c71 	.word	0x20000c71
   11540:	200002a8 	.word	0x200002a8
   11544:	20000ba8 	.word	0x20000ba8
   11548:	20000bb4 	.word	0x20000bb4
   1154c:	20000280 	.word	0x20000280
   11550:	f10c 0c01 	add.w	ip, ip, #1
   11554:	4594      	cmp	ip, r2
   11556:	da4d      	bge.n	115f4 <_dtoa_r+0x3f4>
   11558:	ee27 7b04 	vmul.f64	d7, d7, d4
   1155c:	ee25 5b04 	vmul.f64	d5, d5, d4
   11560:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11564:	ee16 3a90 	vmov	r3, s13
   11568:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1156c:	3330      	adds	r3, #48	; 0x30
   1156e:	ee37 7b43 	vsub.f64	d7, d7, d3
   11572:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1157a:	f801 3b01 	strb.w	r3, [r1], #1
   1157e:	f100 8473 	bmi.w	11e68 <_dtoa_r+0xc68>
   11582:	ee32 6b47 	vsub.f64	d6, d2, d7
   11586:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1158e:	d5df      	bpl.n	11550 <_dtoa_r+0x350>
   11590:	9a00      	ldr	r2, [sp, #0]
   11592:	9604      	str	r6, [sp, #16]
   11594:	e002      	b.n	1159c <_dtoa_r+0x39c>
   11596:	428a      	cmp	r2, r1
   11598:	f000 8450 	beq.w	11e3c <_dtoa_r+0xc3c>
   1159c:	4689      	mov	r9, r1
   1159e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   115a2:	2b39      	cmp	r3, #57	; 0x39
   115a4:	d0f7      	beq.n	11596 <_dtoa_r+0x396>
   115a6:	3301      	adds	r3, #1
   115a8:	b2db      	uxtb	r3, r3
   115aa:	700b      	strb	r3, [r1, #0]
   115ac:	9b04      	ldr	r3, [sp, #16]
   115ae:	3301      	adds	r3, #1
   115b0:	9304      	str	r3, [sp, #16]
   115b2:	e155      	b.n	11860 <_dtoa_r+0x660>
   115b4:	1a09      	subs	r1, r1, r0
   115b6:	2301      	movs	r3, #1
   115b8:	f1b1 0801 	subs.w	r8, r1, #1
   115bc:	930a      	str	r3, [sp, #40]	; 0x28
   115be:	f57f aec7 	bpl.w	11350 <_dtoa_r+0x150>
   115c2:	f1c1 0301 	rsb	r3, r1, #1
   115c6:	9306      	str	r3, [sp, #24]
   115c8:	f04f 0800 	mov.w	r8, #0
   115cc:	e6c2      	b.n	11354 <_dtoa_r+0x154>
   115ce:	2600      	movs	r6, #0
   115d0:	63e6      	str	r6, [r4, #60]	; 0x3c
   115d2:	4631      	mov	r1, r6
   115d4:	4620      	mov	r0, r4
   115d6:	f7fb fc31 	bl	ce3c <_Balloc>
   115da:	9000      	str	r0, [sp, #0]
   115dc:	2800      	cmp	r0, #0
   115de:	f000 8467 	beq.w	11eb0 <_dtoa_r+0xcb0>
   115e2:	9b00      	ldr	r3, [sp, #0]
   115e4:	63a3      	str	r3, [r4, #56]	; 0x38
   115e6:	f04f 33ff 	mov.w	r3, #4294967295
   115ea:	930b      	str	r3, [sp, #44]	; 0x2c
   115ec:	4699      	mov	r9, r3
   115ee:	2301      	movs	r3, #1
   115f0:	46b3      	mov	fp, r6
   115f2:	9307      	str	r3, [sp, #28]
   115f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   115f6:	2a00      	cmp	r2, #0
   115f8:	db55      	blt.n	116a6 <_dtoa_r+0x4a6>
   115fa:	9904      	ldr	r1, [sp, #16]
   115fc:	290e      	cmp	r1, #14
   115fe:	dc52      	bgt.n	116a6 <_dtoa_r+0x4a6>
   11600:	4bb7      	ldr	r3, [pc, #732]	; (118e0 <_dtoa_r+0x6e0>)
   11602:	f1bb 0f00 	cmp.w	fp, #0
   11606:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1160a:	ed93 6b00 	vldr	d6, [r3]
   1160e:	da15      	bge.n	1163c <_dtoa_r+0x43c>
   11610:	f1b9 0f00 	cmp.w	r9, #0
   11614:	dc12      	bgt.n	1163c <_dtoa_r+0x43c>
   11616:	f040 82f2 	bne.w	11bfe <_dtoa_r+0x9fe>
   1161a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1161e:	ee26 7b07 	vmul.f64	d7, d6, d7
   11622:	eeb4 8bc7 	vcmpe.f64	d8, d7
   11626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1162a:	46ca      	mov	sl, r9
   1162c:	464e      	mov	r6, r9
   1162e:	f200 826d 	bhi.w	11b0c <_dtoa_r+0x90c>
   11632:	f8dd 8000 	ldr.w	r8, [sp]
   11636:	ea6f 0b0b 	mvn.w	fp, fp
   1163a:	e270      	b.n	11b1e <_dtoa_r+0x91e>
   1163c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   11640:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   11644:	9900      	ldr	r1, [sp, #0]
   11646:	ee17 3a10 	vmov	r3, s14
   1164a:	f1b9 0f01 	cmp.w	r9, #1
   1164e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   11652:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11656:	f801 3b01 	strb.w	r3, [r1], #1
   1165a:	eea5 8b46 	vfms.f64	d8, d5, d6
   1165e:	f000 8334 	beq.w	11cca <_dtoa_r+0xaca>
   11662:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11666:	2301      	movs	r3, #1
   11668:	e011      	b.n	1168e <_dtoa_r+0x48e>
   1166a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   1166e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   11672:	3301      	adds	r3, #1
   11674:	ee17 2a10 	vmov	r2, s14
   11678:	454b      	cmp	r3, r9
   1167a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1167e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11682:	f801 2b01 	strb.w	r2, [r1], #1
   11686:	eea5 8b46 	vfms.f64	d8, d5, d6
   1168a:	f000 831e 	beq.w	11cca <_dtoa_r+0xaca>
   1168e:	ee28 8b04 	vmul.f64	d8, d8, d4
   11692:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1169a:	d1e6      	bne.n	1166a <_dtoa_r+0x46a>
   1169c:	9b04      	ldr	r3, [sp, #16]
   1169e:	3301      	adds	r3, #1
   116a0:	9304      	str	r3, [sp, #16]
   116a2:	4689      	mov	r9, r1
   116a4:	e0dc      	b.n	11860 <_dtoa_r+0x660>
   116a6:	9b07      	ldr	r3, [sp, #28]
   116a8:	b343      	cbz	r3, 116fc <_dtoa_r+0x4fc>
   116aa:	9b01      	ldr	r3, [sp, #4]
   116ac:	2b01      	cmp	r3, #1
   116ae:	f340 8276 	ble.w	11b9e <_dtoa_r+0x99e>
   116b2:	9b08      	ldr	r3, [sp, #32]
   116b4:	f109 3aff 	add.w	sl, r9, #4294967295
   116b8:	4553      	cmp	r3, sl
   116ba:	f280 823f 	bge.w	11b3c <_dtoa_r+0x93c>
   116be:	9b08      	ldr	r3, [sp, #32]
   116c0:	f8cd a020 	str.w	sl, [sp, #32]
   116c4:	ebaa 0203 	sub.w	r2, sl, r3
   116c8:	4417      	add	r7, r2
   116ca:	f04f 0a00 	mov.w	sl, #0
   116ce:	f1b9 0f00 	cmp.w	r9, #0
   116d2:	f2c0 8325 	blt.w	11d20 <_dtoa_r+0xb20>
   116d6:	9b06      	ldr	r3, [sp, #24]
   116d8:	9309      	str	r3, [sp, #36]	; 0x24
   116da:	444b      	add	r3, r9
   116dc:	44c8      	add	r8, r9
   116de:	9306      	str	r3, [sp, #24]
   116e0:	2101      	movs	r1, #1
   116e2:	4620      	mov	r0, r4
   116e4:	f7fb fcd4 	bl	d090 <__i2b>
   116e8:	4606      	mov	r6, r0
   116ea:	e00c      	b.n	11706 <_dtoa_r+0x506>
   116ec:	4b7d      	ldr	r3, [pc, #500]	; (118e4 <_dtoa_r+0x6e4>)
   116ee:	9300      	str	r3, [sp, #0]
   116f0:	9800      	ldr	r0, [sp, #0]
   116f2:	b00f      	add	sp, #60	; 0x3c
   116f4:	ecbd 8b02 	vpop	{d8}
   116f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116fc:	9b06      	ldr	r3, [sp, #24]
   116fe:	f8dd a020 	ldr.w	sl, [sp, #32]
   11702:	9e07      	ldr	r6, [sp, #28]
   11704:	9309      	str	r3, [sp, #36]	; 0x24
   11706:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11708:	b16b      	cbz	r3, 11726 <_dtoa_r+0x526>
   1170a:	f1b8 0f00 	cmp.w	r8, #0
   1170e:	dd0a      	ble.n	11726 <_dtoa_r+0x526>
   11710:	4543      	cmp	r3, r8
   11712:	9906      	ldr	r1, [sp, #24]
   11714:	461a      	mov	r2, r3
   11716:	bfa8      	it	ge
   11718:	4642      	movge	r2, r8
   1171a:	1a89      	subs	r1, r1, r2
   1171c:	1a9b      	subs	r3, r3, r2
   1171e:	9106      	str	r1, [sp, #24]
   11720:	9309      	str	r3, [sp, #36]	; 0x24
   11722:	eba8 0802 	sub.w	r8, r8, r2
   11726:	9b08      	ldr	r3, [sp, #32]
   11728:	b163      	cbz	r3, 11744 <_dtoa_r+0x544>
   1172a:	9b07      	ldr	r3, [sp, #28]
   1172c:	2b00      	cmp	r3, #0
   1172e:	f000 82a7 	beq.w	11c80 <_dtoa_r+0xa80>
   11732:	f1ba 0f00 	cmp.w	sl, #0
   11736:	f300 8204 	bgt.w	11b42 <_dtoa_r+0x942>
   1173a:	9b08      	ldr	r3, [sp, #32]
   1173c:	ebb3 020a 	subs.w	r2, r3, sl
   11740:	f040 82ff 	bne.w	11d42 <_dtoa_r+0xb42>
   11744:	2101      	movs	r1, #1
   11746:	4620      	mov	r0, r4
   11748:	f7fb fca2 	bl	d090 <__i2b>
   1174c:	2f00      	cmp	r7, #0
   1174e:	4682      	mov	sl, r0
   11750:	f300 80af 	bgt.w	118b2 <_dtoa_r+0x6b2>
   11754:	9b01      	ldr	r3, [sp, #4]
   11756:	2b01      	cmp	r3, #1
   11758:	f340 8187 	ble.w	11a6a <_dtoa_r+0x86a>
   1175c:	2300      	movs	r3, #0
   1175e:	9308      	str	r3, [sp, #32]
   11760:	2001      	movs	r0, #1
   11762:	2f00      	cmp	r7, #0
   11764:	f040 80b1 	bne.w	118ca <_dtoa_r+0x6ca>
   11768:	4440      	add	r0, r8
   1176a:	f010 001f 	ands.w	r0, r0, #31
   1176e:	f000 817a 	beq.w	11a66 <_dtoa_r+0x866>
   11772:	f1c0 0220 	rsb	r2, r0, #32
   11776:	2a04      	cmp	r2, #4
   11778:	f300 8088 	bgt.w	1188c <_dtoa_r+0x68c>
   1177c:	f040 81f6 	bne.w	11b6c <_dtoa_r+0x96c>
   11780:	9b06      	ldr	r3, [sp, #24]
   11782:	2b00      	cmp	r3, #0
   11784:	dd05      	ble.n	11792 <_dtoa_r+0x592>
   11786:	4629      	mov	r1, r5
   11788:	461a      	mov	r2, r3
   1178a:	4620      	mov	r0, r4
   1178c:	f7fb fdbc 	bl	d308 <__lshift>
   11790:	4605      	mov	r5, r0
   11792:	f1b8 0f00 	cmp.w	r8, #0
   11796:	dd05      	ble.n	117a4 <_dtoa_r+0x5a4>
   11798:	4651      	mov	r1, sl
   1179a:	4642      	mov	r2, r8
   1179c:	4620      	mov	r0, r4
   1179e:	f7fb fdb3 	bl	d308 <__lshift>
   117a2:	4682      	mov	sl, r0
   117a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   117a6:	2b00      	cmp	r3, #0
   117a8:	f040 813f 	bne.w	11a2a <_dtoa_r+0x82a>
   117ac:	f1b9 0f00 	cmp.w	r9, #0
   117b0:	f340 8125 	ble.w	119fe <_dtoa_r+0x7fe>
   117b4:	9b07      	ldr	r3, [sp, #28]
   117b6:	2b00      	cmp	r3, #0
   117b8:	f040 80a3 	bne.w	11902 <_dtoa_r+0x702>
   117bc:	9b04      	ldr	r3, [sp, #16]
   117be:	3301      	adds	r3, #1
   117c0:	9304      	str	r3, [sp, #16]
   117c2:	f8dd 8000 	ldr.w	r8, [sp]
   117c6:	2701      	movs	r7, #1
   117c8:	e007      	b.n	117da <_dtoa_r+0x5da>
   117ca:	4629      	mov	r1, r5
   117cc:	2300      	movs	r3, #0
   117ce:	220a      	movs	r2, #10
   117d0:	4620      	mov	r0, r4
   117d2:	f7fb fb63 	bl	ce9c <__multadd>
   117d6:	3701      	adds	r7, #1
   117d8:	4605      	mov	r5, r0
   117da:	4651      	mov	r1, sl
   117dc:	4628      	mov	r0, r5
   117de:	f7ff fc7b 	bl	110d8 <quorem>
   117e2:	45b9      	cmp	r9, r7
   117e4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   117e8:	f808 0b01 	strb.w	r0, [r8], #1
   117ec:	dced      	bgt.n	117ca <_dtoa_r+0x5ca>
   117ee:	f1b9 0f00 	cmp.w	r9, #0
   117f2:	9a00      	ldr	r2, [sp, #0]
   117f4:	bfcc      	ite	gt
   117f6:	46cb      	movgt	fp, r9
   117f8:	f04f 0b01 	movle.w	fp, #1
   117fc:	4603      	mov	r3, r0
   117fe:	4493      	add	fp, r2
   11800:	2700      	movs	r7, #0
   11802:	4629      	mov	r1, r5
   11804:	2201      	movs	r2, #1
   11806:	4620      	mov	r0, r4
   11808:	9301      	str	r3, [sp, #4]
   1180a:	f7fb fd7d 	bl	d308 <__lshift>
   1180e:	4651      	mov	r1, sl
   11810:	4605      	mov	r5, r0
   11812:	f7fb fdf1 	bl	d3f8 <__mcmp>
   11816:	2800      	cmp	r0, #0
   11818:	f340 81af 	ble.w	11b7a <_dtoa_r+0x97a>
   1181c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   11820:	9a00      	ldr	r2, [sp, #0]
   11822:	f10b 3bff 	add.w	fp, fp, #4294967295
   11826:	e004      	b.n	11832 <_dtoa_r+0x632>
   11828:	455a      	cmp	r2, fp
   1182a:	f000 81b1 	beq.w	11b90 <_dtoa_r+0x990>
   1182e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11832:	2b39      	cmp	r3, #57	; 0x39
   11834:	f10b 0901 	add.w	r9, fp, #1
   11838:	d0f6      	beq.n	11828 <_dtoa_r+0x628>
   1183a:	3301      	adds	r3, #1
   1183c:	f88b 3000 	strb.w	r3, [fp]
   11840:	4651      	mov	r1, sl
   11842:	4620      	mov	r0, r4
   11844:	f7fb fb20 	bl	ce88 <_Bfree>
   11848:	b156      	cbz	r6, 11860 <_dtoa_r+0x660>
   1184a:	b12f      	cbz	r7, 11858 <_dtoa_r+0x658>
   1184c:	42b7      	cmp	r7, r6
   1184e:	d003      	beq.n	11858 <_dtoa_r+0x658>
   11850:	4639      	mov	r1, r7
   11852:	4620      	mov	r0, r4
   11854:	f7fb fb18 	bl	ce88 <_Bfree>
   11858:	4631      	mov	r1, r6
   1185a:	4620      	mov	r0, r4
   1185c:	f7fb fb14 	bl	ce88 <_Bfree>
   11860:	4629      	mov	r1, r5
   11862:	4620      	mov	r0, r4
   11864:	f7fb fb10 	bl	ce88 <_Bfree>
   11868:	2300      	movs	r3, #0
   1186a:	f889 3000 	strb.w	r3, [r9]
   1186e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11872:	601a      	str	r2, [r3, #0]
   11874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11876:	2b00      	cmp	r3, #0
   11878:	f43f acfe 	beq.w	11278 <_dtoa_r+0x78>
   1187c:	9800      	ldr	r0, [sp, #0]
   1187e:	f8c3 9000 	str.w	r9, [r3]
   11882:	b00f      	add	sp, #60	; 0x3c
   11884:	ecbd 8b02 	vpop	{d8}
   11888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1188c:	f1c0 001c 	rsb	r0, r0, #28
   11890:	9b06      	ldr	r3, [sp, #24]
   11892:	4403      	add	r3, r0
   11894:	9306      	str	r3, [sp, #24]
   11896:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11898:	4403      	add	r3, r0
   1189a:	9309      	str	r3, [sp, #36]	; 0x24
   1189c:	4480      	add	r8, r0
   1189e:	e76f      	b.n	11780 <_dtoa_r+0x580>
   118a0:	f1c2 0220 	rsb	r2, r2, #32
   118a4:	fa06 f202 	lsl.w	r2, r6, r2
   118a8:	ee07 2a10 	vmov	s14, r2
   118ac:	e509      	b.n	112c2 <_dtoa_r+0xc2>
   118ae:	2601      	movs	r6, #1
   118b0:	e563      	b.n	1137a <_dtoa_r+0x17a>
   118b2:	4601      	mov	r1, r0
   118b4:	463a      	mov	r2, r7
   118b6:	4620      	mov	r0, r4
   118b8:	f7fb fcc6 	bl	d248 <__pow5mult>
   118bc:	9b01      	ldr	r3, [sp, #4]
   118be:	2b01      	cmp	r3, #1
   118c0:	4682      	mov	sl, r0
   118c2:	f340 81c5 	ble.w	11c50 <_dtoa_r+0xa50>
   118c6:	2300      	movs	r3, #0
   118c8:	9308      	str	r3, [sp, #32]
   118ca:	f8da 2010 	ldr.w	r2, [sl, #16]
   118ce:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   118d2:	6910      	ldr	r0, [r2, #16]
   118d4:	f7fb fb8c 	bl	cff0 <__hi0bits>
   118d8:	f1c0 0020 	rsb	r0, r0, #32
   118dc:	e744      	b.n	11768 <_dtoa_r+0x568>
   118de:	bf00      	nop
   118e0:	200002a8 	.word	0x200002a8
   118e4:	20000c70 	.word	0x20000c70
   118e8:	4631      	mov	r1, r6
   118ea:	2300      	movs	r3, #0
   118ec:	220a      	movs	r2, #10
   118ee:	4620      	mov	r0, r4
   118f0:	f7fb fad4 	bl	ce9c <__multadd>
   118f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   118f6:	2b00      	cmp	r3, #0
   118f8:	4606      	mov	r6, r0
   118fa:	f340 82ce 	ble.w	11e9a <_dtoa_r+0xc9a>
   118fe:	9704      	str	r7, [sp, #16]
   11900:	4699      	mov	r9, r3
   11902:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11904:	2b00      	cmp	r3, #0
   11906:	dd05      	ble.n	11914 <_dtoa_r+0x714>
   11908:	4631      	mov	r1, r6
   1190a:	461a      	mov	r2, r3
   1190c:	4620      	mov	r0, r4
   1190e:	f7fb fcfb 	bl	d308 <__lshift>
   11912:	4606      	mov	r6, r0
   11914:	9b08      	ldr	r3, [sp, #32]
   11916:	2b00      	cmp	r3, #0
   11918:	f040 81eb 	bne.w	11cf2 <_dtoa_r+0xaf2>
   1191c:	46b0      	mov	r8, r6
   1191e:	9b02      	ldr	r3, [sp, #8]
   11920:	9f00      	ldr	r7, [sp, #0]
   11922:	f003 0201 	and.w	r2, r3, #1
   11926:	1e7b      	subs	r3, r7, #1
   11928:	444b      	add	r3, r9
   1192a:	9308      	str	r3, [sp, #32]
   1192c:	9b01      	ldr	r3, [sp, #4]
   1192e:	920a      	str	r2, [sp, #40]	; 0x28
   11930:	4313      	orrs	r3, r2
   11932:	9309      	str	r3, [sp, #36]	; 0x24
   11934:	4651      	mov	r1, sl
   11936:	4628      	mov	r0, r5
   11938:	f7ff fbce 	bl	110d8 <quorem>
   1193c:	4631      	mov	r1, r6
   1193e:	4683      	mov	fp, r0
   11940:	4628      	mov	r0, r5
   11942:	f7fb fd59 	bl	d3f8 <__mcmp>
   11946:	4642      	mov	r2, r8
   11948:	4651      	mov	r1, sl
   1194a:	4681      	mov	r9, r0
   1194c:	4620      	mov	r0, r4
   1194e:	f7fb fd75 	bl	d43c <__mdiff>
   11952:	68c2      	ldr	r2, [r0, #12]
   11954:	4601      	mov	r1, r0
   11956:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1195a:	2a00      	cmp	r2, #0
   1195c:	d142      	bne.n	119e4 <_dtoa_r+0x7e4>
   1195e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   11962:	4628      	mov	r0, r5
   11964:	f7fb fd48 	bl	d3f8 <__mcmp>
   11968:	9906      	ldr	r1, [sp, #24]
   1196a:	9002      	str	r0, [sp, #8]
   1196c:	4620      	mov	r0, r4
   1196e:	f7fb fa8b 	bl	ce88 <_Bfree>
   11972:	9a02      	ldr	r2, [sp, #8]
   11974:	9b07      	ldr	r3, [sp, #28]
   11976:	b91a      	cbnz	r2, 11980 <_dtoa_r+0x780>
   11978:	9909      	ldr	r1, [sp, #36]	; 0x24
   1197a:	2900      	cmp	r1, #0
   1197c:	f000 827e 	beq.w	11e7c <_dtoa_r+0xc7c>
   11980:	f1b9 0f00 	cmp.w	r9, #0
   11984:	f2c0 8183 	blt.w	11c8e <_dtoa_r+0xa8e>
   11988:	9901      	ldr	r1, [sp, #4]
   1198a:	ea49 0901 	orr.w	r9, r9, r1
   1198e:	990a      	ldr	r1, [sp, #40]	; 0x28
   11990:	ea51 0909 	orrs.w	r9, r1, r9
   11994:	f000 817b 	beq.w	11c8e <_dtoa_r+0xa8e>
   11998:	2a00      	cmp	r2, #0
   1199a:	f300 81c6 	bgt.w	11d2a <_dtoa_r+0xb2a>
   1199e:	9a08      	ldr	r2, [sp, #32]
   119a0:	703b      	strb	r3, [r7, #0]
   119a2:	f107 0901 	add.w	r9, r7, #1
   119a6:	4297      	cmp	r7, r2
   119a8:	46cb      	mov	fp, r9
   119aa:	f000 81c4 	beq.w	11d36 <_dtoa_r+0xb36>
   119ae:	4629      	mov	r1, r5
   119b0:	2300      	movs	r3, #0
   119b2:	220a      	movs	r2, #10
   119b4:	4620      	mov	r0, r4
   119b6:	f7fb fa71 	bl	ce9c <__multadd>
   119ba:	4546      	cmp	r6, r8
   119bc:	4605      	mov	r5, r0
   119be:	4631      	mov	r1, r6
   119c0:	f04f 0300 	mov.w	r3, #0
   119c4:	f04f 020a 	mov.w	r2, #10
   119c8:	4620      	mov	r0, r4
   119ca:	d012      	beq.n	119f2 <_dtoa_r+0x7f2>
   119cc:	f7fb fa66 	bl	ce9c <__multadd>
   119d0:	4641      	mov	r1, r8
   119d2:	4606      	mov	r6, r0
   119d4:	2300      	movs	r3, #0
   119d6:	220a      	movs	r2, #10
   119d8:	4620      	mov	r0, r4
   119da:	f7fb fa5f 	bl	ce9c <__multadd>
   119de:	464f      	mov	r7, r9
   119e0:	4680      	mov	r8, r0
   119e2:	e7a7      	b.n	11934 <_dtoa_r+0x734>
   119e4:	4620      	mov	r0, r4
   119e6:	9302      	str	r3, [sp, #8]
   119e8:	f7fb fa4e 	bl	ce88 <_Bfree>
   119ec:	9b02      	ldr	r3, [sp, #8]
   119ee:	2201      	movs	r2, #1
   119f0:	e7c6      	b.n	11980 <_dtoa_r+0x780>
   119f2:	f7fb fa53 	bl	ce9c <__multadd>
   119f6:	464f      	mov	r7, r9
   119f8:	4606      	mov	r6, r0
   119fa:	4680      	mov	r8, r0
   119fc:	e79a      	b.n	11934 <_dtoa_r+0x734>
   119fe:	9b01      	ldr	r3, [sp, #4]
   11a00:	2b02      	cmp	r3, #2
   11a02:	dc71      	bgt.n	11ae8 <_dtoa_r+0x8e8>
   11a04:	9b07      	ldr	r3, [sp, #28]
   11a06:	2b00      	cmp	r3, #0
   11a08:	f47f af7b 	bne.w	11902 <_dtoa_r+0x702>
   11a0c:	9b04      	ldr	r3, [sp, #16]
   11a0e:	4651      	mov	r1, sl
   11a10:	3301      	adds	r3, #1
   11a12:	4628      	mov	r0, r5
   11a14:	9304      	str	r3, [sp, #16]
   11a16:	f7ff fb5f 	bl	110d8 <quorem>
   11a1a:	f8dd b000 	ldr.w	fp, [sp]
   11a1e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   11a22:	f80b 3b01 	strb.w	r3, [fp], #1
   11a26:	2700      	movs	r7, #0
   11a28:	e6eb      	b.n	11802 <_dtoa_r+0x602>
   11a2a:	4651      	mov	r1, sl
   11a2c:	4628      	mov	r0, r5
   11a2e:	f7fb fce3 	bl	d3f8 <__mcmp>
   11a32:	2800      	cmp	r0, #0
   11a34:	f6bf aeba 	bge.w	117ac <_dtoa_r+0x5ac>
   11a38:	4629      	mov	r1, r5
   11a3a:	2300      	movs	r3, #0
   11a3c:	220a      	movs	r2, #10
   11a3e:	4620      	mov	r0, r4
   11a40:	f7fb fa2c 	bl	ce9c <__multadd>
   11a44:	9b04      	ldr	r3, [sp, #16]
   11a46:	1e5f      	subs	r7, r3, #1
   11a48:	9b07      	ldr	r3, [sp, #28]
   11a4a:	4605      	mov	r5, r0
   11a4c:	2b00      	cmp	r3, #0
   11a4e:	f47f af4b 	bne.w	118e8 <_dtoa_r+0x6e8>
   11a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11a54:	2b00      	cmp	r3, #0
   11a56:	f340 8218 	ble.w	11e8a <_dtoa_r+0xc8a>
   11a5a:	4699      	mov	r9, r3
   11a5c:	e6b1      	b.n	117c2 <_dtoa_r+0x5c2>
   11a5e:	4bbc      	ldr	r3, [pc, #752]	; (11d50 <_dtoa_r+0xb50>)
   11a60:	9300      	str	r3, [sp, #0]
   11a62:	3303      	adds	r3, #3
   11a64:	e4a4      	b.n	113b0 <_dtoa_r+0x1b0>
   11a66:	201c      	movs	r0, #28
   11a68:	e712      	b.n	11890 <_dtoa_r+0x690>
   11a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11a6e:	2800      	cmp	r0, #0
   11a70:	f47f ae74 	bne.w	1175c <_dtoa_r+0x55c>
   11a74:	f3c1 0213 	ubfx	r2, r1, #0, #20
   11a78:	2a00      	cmp	r2, #0
   11a7a:	f000 80f4 	beq.w	11c66 <_dtoa_r+0xa66>
   11a7e:	9b02      	ldr	r3, [sp, #8]
   11a80:	9308      	str	r3, [sp, #32]
   11a82:	e66d      	b.n	11760 <_dtoa_r+0x560>
   11a84:	2301      	movs	r3, #1
   11a86:	9307      	str	r3, [sp, #28]
   11a88:	9b04      	ldr	r3, [sp, #16]
   11a8a:	445b      	add	r3, fp
   11a8c:	f103 0901 	add.w	r9, r3, #1
   11a90:	f1b9 0f01 	cmp.w	r9, #1
   11a94:	46cc      	mov	ip, r9
   11a96:	930b      	str	r3, [sp, #44]	; 0x2c
   11a98:	bfb8      	it	lt
   11a9a:	f04f 0c01 	movlt.w	ip, #1
   11a9e:	2100      	movs	r1, #0
   11aa0:	f1bc 0f17 	cmp.w	ip, #23
   11aa4:	63e1      	str	r1, [r4, #60]	; 0x3c
   11aa6:	f77f acbc 	ble.w	11422 <_dtoa_r+0x222>
   11aaa:	2001      	movs	r0, #1
   11aac:	2204      	movs	r2, #4
   11aae:	0052      	lsls	r2, r2, #1
   11ab0:	f102 0314 	add.w	r3, r2, #20
   11ab4:	4563      	cmp	r3, ip
   11ab6:	4601      	mov	r1, r0
   11ab8:	f100 0001 	add.w	r0, r0, #1
   11abc:	d9f7      	bls.n	11aae <_dtoa_r+0x8ae>
   11abe:	63e1      	str	r1, [r4, #60]	; 0x3c
   11ac0:	e4af      	b.n	11422 <_dtoa_r+0x222>
   11ac2:	2301      	movs	r3, #1
   11ac4:	9307      	str	r3, [sp, #28]
   11ac6:	f1bb 0f00 	cmp.w	fp, #0
   11aca:	dd52      	ble.n	11b72 <_dtoa_r+0x972>
   11acc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   11ad0:	46d9      	mov	r9, fp
   11ad2:	46dc      	mov	ip, fp
   11ad4:	e7e3      	b.n	11a9e <_dtoa_r+0x89e>
   11ad6:	2300      	movs	r3, #0
   11ad8:	9307      	str	r3, [sp, #28]
   11ada:	e7d5      	b.n	11a88 <_dtoa_r+0x888>
   11adc:	2300      	movs	r3, #0
   11ade:	9307      	str	r3, [sp, #28]
   11ae0:	e7f1      	b.n	11ac6 <_dtoa_r+0x8c6>
   11ae2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11ae6:	9704      	str	r7, [sp, #16]
   11ae8:	f1b9 0f00 	cmp.w	r9, #0
   11aec:	f47f ada1 	bne.w	11632 <_dtoa_r+0x432>
   11af0:	4651      	mov	r1, sl
   11af2:	464b      	mov	r3, r9
   11af4:	2205      	movs	r2, #5
   11af6:	4620      	mov	r0, r4
   11af8:	f7fb f9d0 	bl	ce9c <__multadd>
   11afc:	4601      	mov	r1, r0
   11afe:	4682      	mov	sl, r0
   11b00:	4628      	mov	r0, r5
   11b02:	f7fb fc79 	bl	d3f8 <__mcmp>
   11b06:	2800      	cmp	r0, #0
   11b08:	f77f ad93 	ble.w	11632 <_dtoa_r+0x432>
   11b0c:	9b04      	ldr	r3, [sp, #16]
   11b0e:	f103 0b01 	add.w	fp, r3, #1
   11b12:	9b00      	ldr	r3, [sp, #0]
   11b14:	2231      	movs	r2, #49	; 0x31
   11b16:	4698      	mov	r8, r3
   11b18:	f803 2b01 	strb.w	r2, [r3], #1
   11b1c:	9300      	str	r3, [sp, #0]
   11b1e:	4651      	mov	r1, sl
   11b20:	4620      	mov	r0, r4
   11b22:	f7fb f9b1 	bl	ce88 <_Bfree>
   11b26:	f10b 0301 	add.w	r3, fp, #1
   11b2a:	f8dd 9000 	ldr.w	r9, [sp]
   11b2e:	9304      	str	r3, [sp, #16]
   11b30:	f8cd 8000 	str.w	r8, [sp]
   11b34:	2e00      	cmp	r6, #0
   11b36:	f47f ae8f 	bne.w	11858 <_dtoa_r+0x658>
   11b3a:	e691      	b.n	11860 <_dtoa_r+0x660>
   11b3c:	eba3 0a0a 	sub.w	sl, r3, sl
   11b40:	e5c5      	b.n	116ce <_dtoa_r+0x4ce>
   11b42:	4631      	mov	r1, r6
   11b44:	4652      	mov	r2, sl
   11b46:	4620      	mov	r0, r4
   11b48:	f7fb fb7e 	bl	d248 <__pow5mult>
   11b4c:	462a      	mov	r2, r5
   11b4e:	4601      	mov	r1, r0
   11b50:	4606      	mov	r6, r0
   11b52:	4620      	mov	r0, r4
   11b54:	f7fb faca 	bl	d0ec <__multiply>
   11b58:	4629      	mov	r1, r5
   11b5a:	4605      	mov	r5, r0
   11b5c:	4620      	mov	r0, r4
   11b5e:	f7fb f993 	bl	ce88 <_Bfree>
   11b62:	e5ea      	b.n	1173a <_dtoa_r+0x53a>
   11b64:	2002      	movs	r0, #2
   11b66:	eeb0 5b48 	vmov.f64	d5, d8
   11b6a:	e481      	b.n	11470 <_dtoa_r+0x270>
   11b6c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   11b70:	e68e      	b.n	11890 <_dtoa_r+0x690>
   11b72:	f04f 0b01 	mov.w	fp, #1
   11b76:	46d9      	mov	r9, fp
   11b78:	e44f      	b.n	1141a <_dtoa_r+0x21a>
   11b7a:	d103      	bne.n	11b84 <_dtoa_r+0x984>
   11b7c:	9b01      	ldr	r3, [sp, #4]
   11b7e:	07db      	lsls	r3, r3, #31
   11b80:	f53f ae4c 	bmi.w	1181c <_dtoa_r+0x61c>
   11b84:	46d9      	mov	r9, fp
   11b86:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11b8a:	2b30      	cmp	r3, #48	; 0x30
   11b8c:	d0fa      	beq.n	11b84 <_dtoa_r+0x984>
   11b8e:	e657      	b.n	11840 <_dtoa_r+0x640>
   11b90:	9b04      	ldr	r3, [sp, #16]
   11b92:	9a00      	ldr	r2, [sp, #0]
   11b94:	3301      	adds	r3, #1
   11b96:	9304      	str	r3, [sp, #16]
   11b98:	2331      	movs	r3, #49	; 0x31
   11b9a:	7013      	strb	r3, [r2, #0]
   11b9c:	e650      	b.n	11840 <_dtoa_r+0x640>
   11b9e:	f1ba 0f00 	cmp.w	sl, #0
   11ba2:	f000 8123 	beq.w	11dec <_dtoa_r+0xbec>
   11ba6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   11baa:	9b06      	ldr	r3, [sp, #24]
   11bac:	9309      	str	r3, [sp, #36]	; 0x24
   11bae:	4413      	add	r3, r2
   11bb0:	f8dd a020 	ldr.w	sl, [sp, #32]
   11bb4:	9306      	str	r3, [sp, #24]
   11bb6:	4490      	add	r8, r2
   11bb8:	e592      	b.n	116e0 <_dtoa_r+0x4e0>
   11bba:	ee07 0a90 	vmov	s15, r0
   11bbe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   11bc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   11bc6:	eea6 5b07 	vfma.f64	d5, d6, d7
   11bca:	ee15 2a90 	vmov	r2, s11
   11bce:	ec51 0b15 	vmov	r0, r1, d5
   11bd2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   11bd6:	ec41 0b15 	vmov	d5, r0, r1
   11bda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   11bde:	ee36 7b47 	vsub.f64	d7, d6, d7
   11be2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11bea:	f300 8137 	bgt.w	11e5c <_dtoa_r+0xc5c>
   11bee:	eeb1 5b45 	vneg.f64	d5, d5
   11bf2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11bfa:	f57f acfb 	bpl.w	115f4 <_dtoa_r+0x3f4>
   11bfe:	f04f 0a00 	mov.w	sl, #0
   11c02:	4656      	mov	r6, sl
   11c04:	e515      	b.n	11632 <_dtoa_r+0x432>
   11c06:	f000 80f5 	beq.w	11df4 <_dtoa_r+0xbf4>
   11c0a:	9b04      	ldr	r3, [sp, #16]
   11c0c:	4951      	ldr	r1, [pc, #324]	; (11d54 <_dtoa_r+0xb54>)
   11c0e:	425a      	negs	r2, r3
   11c10:	f002 000f 	and.w	r0, r2, #15
   11c14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   11c18:	ed91 6b00 	vldr	d6, [r1]
   11c1c:	1112      	asrs	r2, r2, #4
   11c1e:	ee28 6b06 	vmul.f64	d6, d8, d6
   11c22:	f000 8142 	beq.w	11eaa <_dtoa_r+0xcaa>
   11c26:	eeb0 7b46 	vmov.f64	d7, d6
   11c2a:	494b      	ldr	r1, [pc, #300]	; (11d58 <_dtoa_r+0xb58>)
   11c2c:	2600      	movs	r6, #0
   11c2e:	2002      	movs	r0, #2
   11c30:	07d3      	lsls	r3, r2, #31
   11c32:	d505      	bpl.n	11c40 <_dtoa_r+0xa40>
   11c34:	ed91 5b00 	vldr	d5, [r1]
   11c38:	3001      	adds	r0, #1
   11c3a:	2601      	movs	r6, #1
   11c3c:	ee27 7b05 	vmul.f64	d7, d7, d5
   11c40:	1052      	asrs	r2, r2, #1
   11c42:	f101 0108 	add.w	r1, r1, #8
   11c46:	d1f3      	bne.n	11c30 <_dtoa_r+0xa30>
   11c48:	2e00      	cmp	r6, #0
   11c4a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   11c4e:	e41e      	b.n	1148e <_dtoa_r+0x28e>
   11c50:	9b02      	ldr	r3, [sp, #8]
   11c52:	2b00      	cmp	r3, #0
   11c54:	f47f ae37 	bne.w	118c6 <_dtoa_r+0x6c6>
   11c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11c5c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   11c60:	2a00      	cmp	r2, #0
   11c62:	f040 8137 	bne.w	11ed4 <_dtoa_r+0xcd4>
   11c66:	4a3d      	ldr	r2, [pc, #244]	; (11d5c <_dtoa_r+0xb5c>)
   11c68:	400a      	ands	r2, r1
   11c6a:	2a00      	cmp	r2, #0
   11c6c:	f000 80fa 	beq.w	11e64 <_dtoa_r+0xc64>
   11c70:	9b06      	ldr	r3, [sp, #24]
   11c72:	3301      	adds	r3, #1
   11c74:	9306      	str	r3, [sp, #24]
   11c76:	2301      	movs	r3, #1
   11c78:	f108 0801 	add.w	r8, r8, #1
   11c7c:	9308      	str	r3, [sp, #32]
   11c7e:	e56f      	b.n	11760 <_dtoa_r+0x560>
   11c80:	4629      	mov	r1, r5
   11c82:	9a08      	ldr	r2, [sp, #32]
   11c84:	4620      	mov	r0, r4
   11c86:	f7fb fadf 	bl	d248 <__pow5mult>
   11c8a:	4605      	mov	r5, r0
   11c8c:	e55a      	b.n	11744 <_dtoa_r+0x544>
   11c8e:	2a00      	cmp	r2, #0
   11c90:	dd12      	ble.n	11cb8 <_dtoa_r+0xab8>
   11c92:	4629      	mov	r1, r5
   11c94:	2201      	movs	r2, #1
   11c96:	4620      	mov	r0, r4
   11c98:	9301      	str	r3, [sp, #4]
   11c9a:	f7fb fb35 	bl	d308 <__lshift>
   11c9e:	4651      	mov	r1, sl
   11ca0:	4605      	mov	r5, r0
   11ca2:	f7fb fba9 	bl	d3f8 <__mcmp>
   11ca6:	2800      	cmp	r0, #0
   11ca8:	9b01      	ldr	r3, [sp, #4]
   11caa:	f340 80e1 	ble.w	11e70 <_dtoa_r+0xc70>
   11cae:	2b39      	cmp	r3, #57	; 0x39
   11cb0:	f000 80ca 	beq.w	11e48 <_dtoa_r+0xc48>
   11cb4:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11cb8:	46b9      	mov	r9, r7
   11cba:	f809 3b01 	strb.w	r3, [r9], #1
   11cbe:	9b04      	ldr	r3, [sp, #16]
   11cc0:	3301      	adds	r3, #1
   11cc2:	4637      	mov	r7, r6
   11cc4:	9304      	str	r3, [sp, #16]
   11cc6:	4646      	mov	r6, r8
   11cc8:	e5ba      	b.n	11840 <_dtoa_r+0x640>
   11cca:	ee38 8b08 	vadd.f64	d8, d8, d8
   11cce:	eeb4 8bc6 	vcmpe.f64	d8, d6
   11cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11cd6:	dc0a      	bgt.n	11cee <_dtoa_r+0xaee>
   11cd8:	eeb4 8b46 	vcmp.f64	d8, d6
   11cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11ce0:	f47f acdc 	bne.w	1169c <_dtoa_r+0x49c>
   11ce4:	ee17 3a10 	vmov	r3, s14
   11ce8:	07d8      	lsls	r0, r3, #31
   11cea:	f57f acd7 	bpl.w	1169c <_dtoa_r+0x49c>
   11cee:	9a00      	ldr	r2, [sp, #0]
   11cf0:	e454      	b.n	1159c <_dtoa_r+0x39c>
   11cf2:	6871      	ldr	r1, [r6, #4]
   11cf4:	4620      	mov	r0, r4
   11cf6:	f7fb f8a1 	bl	ce3c <_Balloc>
   11cfa:	4607      	mov	r7, r0
   11cfc:	2800      	cmp	r0, #0
   11cfe:	f000 80de 	beq.w	11ebe <_dtoa_r+0xcbe>
   11d02:	6933      	ldr	r3, [r6, #16]
   11d04:	3302      	adds	r3, #2
   11d06:	009a      	lsls	r2, r3, #2
   11d08:	f106 010c 	add.w	r1, r6, #12
   11d0c:	300c      	adds	r0, #12
   11d0e:	f7f6 f9e9 	bl	80e4 <memcpy>
   11d12:	4639      	mov	r1, r7
   11d14:	2201      	movs	r2, #1
   11d16:	4620      	mov	r0, r4
   11d18:	f7fb faf6 	bl	d308 <__lshift>
   11d1c:	4680      	mov	r8, r0
   11d1e:	e5fe      	b.n	1191e <_dtoa_r+0x71e>
   11d20:	9b06      	ldr	r3, [sp, #24]
   11d22:	eba3 0309 	sub.w	r3, r3, r9
   11d26:	9309      	str	r3, [sp, #36]	; 0x24
   11d28:	e4da      	b.n	116e0 <_dtoa_r+0x4e0>
   11d2a:	2b39      	cmp	r3, #57	; 0x39
   11d2c:	f000 808c 	beq.w	11e48 <_dtoa_r+0xc48>
   11d30:	46b9      	mov	r9, r7
   11d32:	3301      	adds	r3, #1
   11d34:	e7c1      	b.n	11cba <_dtoa_r+0xaba>
   11d36:	9a04      	ldr	r2, [sp, #16]
   11d38:	3201      	adds	r2, #1
   11d3a:	4637      	mov	r7, r6
   11d3c:	9204      	str	r2, [sp, #16]
   11d3e:	4646      	mov	r6, r8
   11d40:	e55f      	b.n	11802 <_dtoa_r+0x602>
   11d42:	4629      	mov	r1, r5
   11d44:	4620      	mov	r0, r4
   11d46:	f7fb fa7f 	bl	d248 <__pow5mult>
   11d4a:	4605      	mov	r5, r0
   11d4c:	e4fa      	b.n	11744 <_dtoa_r+0x544>
   11d4e:	bf00      	nop
   11d50:	20000bb4 	.word	0x20000bb4
   11d54:	200002a8 	.word	0x200002a8
   11d58:	20000280 	.word	0x20000280
   11d5c:	7ff00000 	.word	0x7ff00000
   11d60:	4b5e      	ldr	r3, [pc, #376]	; (11edc <_dtoa_r+0xcdc>)
   11d62:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   11d66:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   11d6a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   11d6e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   11d72:	ee36 7b47 	vsub.f64	d7, d6, d7
   11d76:	ec41 0b16 	vmov	d6, r0, r1
   11d7a:	ee15 1a90 	vmov	r1, s11
   11d7e:	ee23 3b06 	vmul.f64	d3, d3, d6
   11d82:	9800      	ldr	r0, [sp, #0]
   11d84:	3130      	adds	r1, #48	; 0x30
   11d86:	2a01      	cmp	r2, #1
   11d88:	f800 1b01 	strb.w	r1, [r0], #1
   11d8c:	f000 8083 	beq.w	11e96 <_dtoa_r+0xc96>
   11d90:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11d94:	9b00      	ldr	r3, [sp, #0]
   11d96:	1899      	adds	r1, r3, r2
   11d98:	ee27 7b04 	vmul.f64	d7, d7, d4
   11d9c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11da0:	ee16 3a90 	vmov	r3, s13
   11da4:	3330      	adds	r3, #48	; 0x30
   11da6:	f800 3b01 	strb.w	r3, [r0], #1
   11daa:	4281      	cmp	r1, r0
   11dac:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   11db0:	ee37 7b45 	vsub.f64	d7, d7, d5
   11db4:	d1f0      	bne.n	11d98 <_dtoa_r+0xb98>
   11db6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   11dba:	ee33 5b06 	vadd.f64	d5, d3, d6
   11dbe:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11dc6:	f53f abe3 	bmi.w	11590 <_dtoa_r+0x390>
   11dca:	ee36 6b43 	vsub.f64	d6, d6, d3
   11dce:	eeb4 6bc7 	vcmpe.f64	d6, d7
   11dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11dd6:	f77f ac0d 	ble.w	115f4 <_dtoa_r+0x3f4>
   11dda:	4689      	mov	r9, r1
   11ddc:	3901      	subs	r1, #1
   11dde:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   11de2:	2b30      	cmp	r3, #48	; 0x30
   11de4:	d0f9      	beq.n	11dda <_dtoa_r+0xbda>
   11de6:	1c73      	adds	r3, r6, #1
   11de8:	9304      	str	r3, [sp, #16]
   11dea:	e539      	b.n	11860 <_dtoa_r+0x660>
   11dec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11dee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   11df2:	e6da      	b.n	11baa <_dtoa_r+0x9aa>
   11df4:	2002      	movs	r0, #2
   11df6:	eeb0 6b48 	vmov.f64	d6, d8
   11dfa:	f7ff bb48 	b.w	1148e <_dtoa_r+0x28e>
   11dfe:	f1b9 0f00 	cmp.w	r9, #0
   11e02:	f43f aeda 	beq.w	11bba <_dtoa_r+0x9ba>
   11e06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11e08:	2a00      	cmp	r2, #0
   11e0a:	f77f abf3 	ble.w	115f4 <_dtoa_r+0x3f4>
   11e0e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11e12:	ee26 6b04 	vmul.f64	d6, d6, d4
   11e16:	3001      	adds	r0, #1
   11e18:	ee07 0a90 	vmov	s15, r0
   11e1c:	9b04      	ldr	r3, [sp, #16]
   11e1e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   11e22:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   11e26:	eea6 7b05 	vfma.f64	d7, d6, d5
   11e2a:	ee17 ca90 	vmov	ip, s15
   11e2e:	ec51 0b17 	vmov	r0, r1, d7
   11e32:	1e5e      	subs	r6, r3, #1
   11e34:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   11e38:	f7ff bb47 	b.w	114ca <_dtoa_r+0x2ca>
   11e3c:	9b04      	ldr	r3, [sp, #16]
   11e3e:	3301      	adds	r3, #1
   11e40:	9304      	str	r3, [sp, #16]
   11e42:	2331      	movs	r3, #49	; 0x31
   11e44:	f7ff bbb1 	b.w	115aa <_dtoa_r+0x3aa>
   11e48:	9b04      	ldr	r3, [sp, #16]
   11e4a:	46bb      	mov	fp, r7
   11e4c:	3301      	adds	r3, #1
   11e4e:	9304      	str	r3, [sp, #16]
   11e50:	2339      	movs	r3, #57	; 0x39
   11e52:	4637      	mov	r7, r6
   11e54:	f80b 3b01 	strb.w	r3, [fp], #1
   11e58:	4646      	mov	r6, r8
   11e5a:	e4e1      	b.n	11820 <_dtoa_r+0x620>
   11e5c:	f04f 0a00 	mov.w	sl, #0
   11e60:	4656      	mov	r6, sl
   11e62:	e653      	b.n	11b0c <_dtoa_r+0x90c>
   11e64:	9208      	str	r2, [sp, #32]
   11e66:	e47b      	b.n	11760 <_dtoa_r+0x560>
   11e68:	1c73      	adds	r3, r6, #1
   11e6a:	9304      	str	r3, [sp, #16]
   11e6c:	4689      	mov	r9, r1
   11e6e:	e4f7      	b.n	11860 <_dtoa_r+0x660>
   11e70:	f47f af22 	bne.w	11cb8 <_dtoa_r+0xab8>
   11e74:	07da      	lsls	r2, r3, #31
   11e76:	f57f af1f 	bpl.w	11cb8 <_dtoa_r+0xab8>
   11e7a:	e718      	b.n	11cae <_dtoa_r+0xaae>
   11e7c:	2b39      	cmp	r3, #57	; 0x39
   11e7e:	d0e3      	beq.n	11e48 <_dtoa_r+0xc48>
   11e80:	f1b9 0f00 	cmp.w	r9, #0
   11e84:	f73f af16 	bgt.w	11cb4 <_dtoa_r+0xab4>
   11e88:	e716      	b.n	11cb8 <_dtoa_r+0xab8>
   11e8a:	9b01      	ldr	r3, [sp, #4]
   11e8c:	2b02      	cmp	r3, #2
   11e8e:	f73f ae28 	bgt.w	11ae2 <_dtoa_r+0x8e2>
   11e92:	9704      	str	r7, [sp, #16]
   11e94:	e5ba      	b.n	11a0c <_dtoa_r+0x80c>
   11e96:	4601      	mov	r1, r0
   11e98:	e78d      	b.n	11db6 <_dtoa_r+0xbb6>
   11e9a:	9b01      	ldr	r3, [sp, #4]
   11e9c:	2b02      	cmp	r3, #2
   11e9e:	f73f ae20 	bgt.w	11ae2 <_dtoa_r+0x8e2>
   11ea2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11ea6:	9704      	str	r7, [sp, #16]
   11ea8:	e52b      	b.n	11902 <_dtoa_r+0x702>
   11eaa:	2002      	movs	r0, #2
   11eac:	f7ff baef 	b.w	1148e <_dtoa_r+0x28e>
   11eb0:	4b0b      	ldr	r3, [pc, #44]	; (11ee0 <_dtoa_r+0xce0>)
   11eb2:	480c      	ldr	r0, [pc, #48]	; (11ee4 <_dtoa_r+0xce4>)
   11eb4:	2200      	movs	r2, #0
   11eb6:	f240 11af 	movw	r1, #431	; 0x1af
   11eba:	f7ff f8b1 	bl	11020 <__assert_func>
   11ebe:	4b08      	ldr	r3, [pc, #32]	; (11ee0 <_dtoa_r+0xce0>)
   11ec0:	4808      	ldr	r0, [pc, #32]	; (11ee4 <_dtoa_r+0xce4>)
   11ec2:	463a      	mov	r2, r7
   11ec4:	f240 21ef 	movw	r1, #751	; 0x2ef
   11ec8:	f7ff f8aa 	bl	11020 <__assert_func>
   11ecc:	4b06      	ldr	r3, [pc, #24]	; (11ee8 <_dtoa_r+0xce8>)
   11ece:	9300      	str	r3, [sp, #0]
   11ed0:	f7ff b9d2 	b.w	11278 <_dtoa_r+0x78>
   11ed4:	9b02      	ldr	r3, [sp, #8]
   11ed6:	9308      	str	r3, [sp, #32]
   11ed8:	e4f7      	b.n	118ca <_dtoa_r+0x6ca>
   11eda:	bf00      	nop
   11edc:	200002a8 	.word	0x200002a8
   11ee0:	200008c8 	.word	0x200008c8
   11ee4:	20000bb8 	.word	0x20000bb8
   11ee8:	20000ba8 	.word	0x20000ba8

00011eec <_strtoul_l.constprop.0>:
   11eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11ef0:	4607      	mov	r7, r0
   11ef2:	484c      	ldr	r0, [pc, #304]	; (12024 <_strtoul_l.constprop.0+0x138>)
   11ef4:	460e      	mov	r6, r1
   11ef6:	4635      	mov	r5, r6
   11ef8:	f816 eb01 	ldrb.w	lr, [r6], #1
   11efc:	f810 c00e 	ldrb.w	ip, [r0, lr]
   11f00:	f01c 0c08 	ands.w	ip, ip, #8
   11f04:	d1f7      	bne.n	11ef6 <_strtoul_l.constprop.0+0xa>
   11f06:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   11f0a:	d05a      	beq.n	11fc2 <_strtoul_l.constprop.0+0xd6>
   11f0c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   11f10:	bf03      	ittte	eq
   11f12:	f896 e000 	ldrbeq.w	lr, [r6]
   11f16:	4664      	moveq	r4, ip
   11f18:	1cae      	addeq	r6, r5, #2
   11f1a:	4664      	movne	r4, ip
   11f1c:	b15b      	cbz	r3, 11f36 <_strtoul_l.constprop.0+0x4a>
   11f1e:	2b10      	cmp	r3, #16
   11f20:	d054      	beq.n	11fcc <_strtoul_l.constprop.0+0xe0>
   11f22:	f04f 38ff 	mov.w	r8, #4294967295
   11f26:	fbb8 f8f3 	udiv	r8, r8, r3
   11f2a:	fb03 fa08 	mul.w	sl, r3, r8
   11f2e:	ea6f 0a0a 	mvn.w	sl, sl
   11f32:	4699      	mov	r9, r3
   11f34:	e008      	b.n	11f48 <_strtoul_l.constprop.0+0x5c>
   11f36:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11f3a:	d05a      	beq.n	11ff2 <_strtoul_l.constprop.0+0x106>
   11f3c:	230a      	movs	r3, #10
   11f3e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 12028 <_strtoul_l.constprop.0+0x13c>
   11f42:	f04f 0a05 	mov.w	sl, #5
   11f46:	4699      	mov	r9, r3
   11f48:	2500      	movs	r5, #0
   11f4a:	4628      	mov	r0, r5
   11f4c:	e005      	b.n	11f5a <_strtoul_l.constprop.0+0x6e>
   11f4e:	d02c      	beq.n	11faa <_strtoul_l.constprop.0+0xbe>
   11f50:	fb09 c000 	mla	r0, r9, r0, ip
   11f54:	2501      	movs	r5, #1
   11f56:	f816 eb01 	ldrb.w	lr, [r6], #1
   11f5a:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   11f5e:	f1bc 0f09 	cmp.w	ip, #9
   11f62:	d906      	bls.n	11f72 <_strtoul_l.constprop.0+0x86>
   11f64:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   11f68:	f1bc 0f19 	cmp.w	ip, #25
   11f6c:	d80b      	bhi.n	11f86 <_strtoul_l.constprop.0+0x9a>
   11f6e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   11f72:	4563      	cmp	r3, ip
   11f74:	dd10      	ble.n	11f98 <_strtoul_l.constprop.0+0xac>
   11f76:	f1b5 3fff 	cmp.w	r5, #4294967295
   11f7a:	d0ec      	beq.n	11f56 <_strtoul_l.constprop.0+0x6a>
   11f7c:	4540      	cmp	r0, r8
   11f7e:	d9e6      	bls.n	11f4e <_strtoul_l.constprop.0+0x62>
   11f80:	f04f 35ff 	mov.w	r5, #4294967295
   11f84:	e7e7      	b.n	11f56 <_strtoul_l.constprop.0+0x6a>
   11f86:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   11f8a:	f1bc 0f19 	cmp.w	ip, #25
   11f8e:	d803      	bhi.n	11f98 <_strtoul_l.constprop.0+0xac>
   11f90:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   11f94:	4563      	cmp	r3, ip
   11f96:	dcee      	bgt.n	11f76 <_strtoul_l.constprop.0+0x8a>
   11f98:	1c6b      	adds	r3, r5, #1
   11f9a:	d00b      	beq.n	11fb4 <_strtoul_l.constprop.0+0xc8>
   11f9c:	b104      	cbz	r4, 11fa0 <_strtoul_l.constprop.0+0xb4>
   11f9e:	4240      	negs	r0, r0
   11fa0:	b10a      	cbz	r2, 11fa6 <_strtoul_l.constprop.0+0xba>
   11fa2:	b965      	cbnz	r5, 11fbe <_strtoul_l.constprop.0+0xd2>
   11fa4:	6011      	str	r1, [r2, #0]
   11fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11faa:	45d4      	cmp	ip, sl
   11fac:	ddd0      	ble.n	11f50 <_strtoul_l.constprop.0+0x64>
   11fae:	f04f 35ff 	mov.w	r5, #4294967295
   11fb2:	e7d0      	b.n	11f56 <_strtoul_l.constprop.0+0x6a>
   11fb4:	2322      	movs	r3, #34	; 0x22
   11fb6:	603b      	str	r3, [r7, #0]
   11fb8:	4628      	mov	r0, r5
   11fba:	2a00      	cmp	r2, #0
   11fbc:	d0f3      	beq.n	11fa6 <_strtoul_l.constprop.0+0xba>
   11fbe:	1e71      	subs	r1, r6, #1
   11fc0:	e7f0      	b.n	11fa4 <_strtoul_l.constprop.0+0xb8>
   11fc2:	f896 e000 	ldrb.w	lr, [r6]
   11fc6:	2401      	movs	r4, #1
   11fc8:	1cae      	adds	r6, r5, #2
   11fca:	e7a7      	b.n	11f1c <_strtoul_l.constprop.0+0x30>
   11fcc:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11fd0:	d121      	bne.n	12016 <_strtoul_l.constprop.0+0x12a>
   11fd2:	7830      	ldrb	r0, [r6, #0]
   11fd4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   11fd8:	2858      	cmp	r0, #88	; 0x58
   11fda:	d116      	bne.n	1200a <_strtoul_l.constprop.0+0x11e>
   11fdc:	f04f 0910 	mov.w	r9, #16
   11fe0:	f896 e001 	ldrb.w	lr, [r6, #1]
   11fe4:	f04f 0a0f 	mov.w	sl, #15
   11fe8:	3602      	adds	r6, #2
   11fea:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11fee:	464b      	mov	r3, r9
   11ff0:	e7aa      	b.n	11f48 <_strtoul_l.constprop.0+0x5c>
   11ff2:	7833      	ldrb	r3, [r6, #0]
   11ff4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11ff8:	2b58      	cmp	r3, #88	; 0x58
   11ffa:	d0ef      	beq.n	11fdc <_strtoul_l.constprop.0+0xf0>
   11ffc:	2308      	movs	r3, #8
   11ffe:	f04f 0a07 	mov.w	sl, #7
   12002:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   12006:	4699      	mov	r9, r3
   12008:	e79e      	b.n	11f48 <_strtoul_l.constprop.0+0x5c>
   1200a:	4699      	mov	r9, r3
   1200c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12010:	f04f 0a0f 	mov.w	sl, #15
   12014:	e798      	b.n	11f48 <_strtoul_l.constprop.0+0x5c>
   12016:	f04f 0a0f 	mov.w	sl, #15
   1201a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1201e:	4699      	mov	r9, r3
   12020:	e792      	b.n	11f48 <_strtoul_l.constprop.0+0x5c>
   12022:	bf00      	nop
   12024:	20000aa5 	.word	0x20000aa5
   12028:	19999999 	.word	0x19999999

0001202c <_strtoul_r>:
   1202c:	f7ff bf5e 	b.w	11eec <_strtoul_l.constprop.0>

00012030 <_strtoll_l.constprop.0>:
   12030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12034:	b085      	sub	sp, #20
   12036:	461f      	mov	r7, r3
   12038:	4b57      	ldr	r3, [pc, #348]	; (12198 <_strtoll_l.constprop.0+0x168>)
   1203a:	9003      	str	r0, [sp, #12]
   1203c:	468a      	mov	sl, r1
   1203e:	9200      	str	r2, [sp, #0]
   12040:	460d      	mov	r5, r1
   12042:	462a      	mov	r2, r5
   12044:	f815 4b01 	ldrb.w	r4, [r5], #1
   12048:	5d1e      	ldrb	r6, [r3, r4]
   1204a:	f016 0608 	ands.w	r6, r6, #8
   1204e:	d1f8      	bne.n	12042 <_strtoll_l.constprop.0+0x12>
   12050:	2c2d      	cmp	r4, #45	; 0x2d
   12052:	d075      	beq.n	12140 <_strtoll_l.constprop.0+0x110>
   12054:	2c2b      	cmp	r4, #43	; 0x2b
   12056:	bf05      	ittet	eq
   12058:	782c      	ldrbeq	r4, [r5, #0]
   1205a:	9602      	streq	r6, [sp, #8]
   1205c:	9602      	strne	r6, [sp, #8]
   1205e:	1c95      	addeq	r5, r2, #2
   12060:	f04f 36ff 	mov.w	r6, #4294967295
   12064:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   12068:	b12f      	cbz	r7, 12076 <_strtoll_l.constprop.0+0x46>
   1206a:	2f10      	cmp	r7, #16
   1206c:	d06f      	beq.n	1214e <_strtoll_l.constprop.0+0x11e>
   1206e:	46b8      	mov	r8, r7
   12070:	ea4f 79e7 	mov.w	r9, r7, asr #31
   12074:	e005      	b.n	12082 <_strtoll_l.constprop.0+0x52>
   12076:	2c30      	cmp	r4, #48	; 0x30
   12078:	d074      	beq.n	12164 <_strtoll_l.constprop.0+0x134>
   1207a:	f04f 080a 	mov.w	r8, #10
   1207e:	46b9      	mov	r9, r7
   12080:	4647      	mov	r7, r8
   12082:	4642      	mov	r2, r8
   12084:	464b      	mov	r3, r9
   12086:	4630      	mov	r0, r6
   12088:	4659      	mov	r1, fp
   1208a:	f7f7 fc41 	bl	9910 <__aeabi_uldivmod>
   1208e:	2300      	movs	r3, #0
   12090:	9201      	str	r2, [sp, #4]
   12092:	4684      	mov	ip, r0
   12094:	460a      	mov	r2, r1
   12096:	4618      	mov	r0, r3
   12098:	4619      	mov	r1, r3
   1209a:	e011      	b.n	120c0 <_strtoll_l.constprop.0+0x90>
   1209c:	428a      	cmp	r2, r1
   1209e:	bf08      	it	eq
   120a0:	4584      	cmpeq	ip, r0
   120a2:	d03d      	beq.n	12120 <_strtoll_l.constprop.0+0xf0>
   120a4:	fb00 f309 	mul.w	r3, r0, r9
   120a8:	fb08 3301 	mla	r3, r8, r1, r3
   120ac:	fba0 0108 	umull	r0, r1, r0, r8
   120b0:	440b      	add	r3, r1
   120b2:	eb1e 0000 	adds.w	r0, lr, r0
   120b6:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   120ba:	2301      	movs	r3, #1
   120bc:	f815 4b01 	ldrb.w	r4, [r5], #1
   120c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   120c4:	f1be 0f09 	cmp.w	lr, #9
   120c8:	d906      	bls.n	120d8 <_strtoll_l.constprop.0+0xa8>
   120ca:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   120ce:	f1be 0f19 	cmp.w	lr, #25
   120d2:	d80c      	bhi.n	120ee <_strtoll_l.constprop.0+0xbe>
   120d4:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   120d8:	4577      	cmp	r7, lr
   120da:	dd11      	ble.n	12100 <_strtoll_l.constprop.0+0xd0>
   120dc:	1c5c      	adds	r4, r3, #1
   120de:	d0ed      	beq.n	120bc <_strtoll_l.constprop.0+0x8c>
   120e0:	4584      	cmp	ip, r0
   120e2:	eb72 0301 	sbcs.w	r3, r2, r1
   120e6:	d2d9      	bcs.n	1209c <_strtoll_l.constprop.0+0x6c>
   120e8:	f04f 33ff 	mov.w	r3, #4294967295
   120ec:	e7e6      	b.n	120bc <_strtoll_l.constprop.0+0x8c>
   120ee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   120f2:	f1be 0f19 	cmp.w	lr, #25
   120f6:	d803      	bhi.n	12100 <_strtoll_l.constprop.0+0xd0>
   120f8:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   120fc:	4577      	cmp	r7, lr
   120fe:	dced      	bgt.n	120dc <_strtoll_l.constprop.0+0xac>
   12100:	1c5a      	adds	r2, r3, #1
   12102:	d013      	beq.n	1212c <_strtoll_l.constprop.0+0xfc>
   12104:	9a02      	ldr	r2, [sp, #8]
   12106:	b112      	cbz	r2, 1210e <_strtoll_l.constprop.0+0xde>
   12108:	4240      	negs	r0, r0
   1210a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1210e:	9a00      	ldr	r2, [sp, #0]
   12110:	b11a      	cbz	r2, 1211a <_strtoll_l.constprop.0+0xea>
   12112:	bba3      	cbnz	r3, 1217e <_strtoll_l.constprop.0+0x14e>
   12114:	9b00      	ldr	r3, [sp, #0]
   12116:	f8c3 a000 	str.w	sl, [r3]
   1211a:	b005      	add	sp, #20
   1211c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12120:	9b01      	ldr	r3, [sp, #4]
   12122:	4573      	cmp	r3, lr
   12124:	dabe      	bge.n	120a4 <_strtoll_l.constprop.0+0x74>
   12126:	f04f 33ff 	mov.w	r3, #4294967295
   1212a:	e7c7      	b.n	120bc <_strtoll_l.constprop.0+0x8c>
   1212c:	9a03      	ldr	r2, [sp, #12]
   1212e:	2322      	movs	r3, #34	; 0x22
   12130:	6013      	str	r3, [r2, #0]
   12132:	9b00      	ldr	r3, [sp, #0]
   12134:	b333      	cbz	r3, 12184 <_strtoll_l.constprop.0+0x154>
   12136:	f105 3aff 	add.w	sl, r5, #4294967295
   1213a:	4630      	mov	r0, r6
   1213c:	4659      	mov	r1, fp
   1213e:	e7e9      	b.n	12114 <_strtoll_l.constprop.0+0xe4>
   12140:	2301      	movs	r3, #1
   12142:	782c      	ldrb	r4, [r5, #0]
   12144:	9302      	str	r3, [sp, #8]
   12146:	1c95      	adds	r5, r2, #2
   12148:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   1214c:	e78c      	b.n	12068 <_strtoll_l.constprop.0+0x38>
   1214e:	2c30      	cmp	r4, #48	; 0x30
   12150:	d104      	bne.n	1215c <_strtoll_l.constprop.0+0x12c>
   12152:	782b      	ldrb	r3, [r5, #0]
   12154:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12158:	2b58      	cmp	r3, #88	; 0x58
   1215a:	d008      	beq.n	1216e <_strtoll_l.constprop.0+0x13e>
   1215c:	46b8      	mov	r8, r7
   1215e:	f04f 0900 	mov.w	r9, #0
   12162:	e78e      	b.n	12082 <_strtoll_l.constprop.0+0x52>
   12164:	782b      	ldrb	r3, [r5, #0]
   12166:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1216a:	2b58      	cmp	r3, #88	; 0x58
   1216c:	d10f      	bne.n	1218e <_strtoll_l.constprop.0+0x15e>
   1216e:	f04f 0810 	mov.w	r8, #16
   12172:	786c      	ldrb	r4, [r5, #1]
   12174:	f04f 0900 	mov.w	r9, #0
   12178:	3502      	adds	r5, #2
   1217a:	4647      	mov	r7, r8
   1217c:	e781      	b.n	12082 <_strtoll_l.constprop.0+0x52>
   1217e:	4606      	mov	r6, r0
   12180:	468b      	mov	fp, r1
   12182:	e7d8      	b.n	12136 <_strtoll_l.constprop.0+0x106>
   12184:	4630      	mov	r0, r6
   12186:	4659      	mov	r1, fp
   12188:	b005      	add	sp, #20
   1218a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1218e:	f04f 0808 	mov.w	r8, #8
   12192:	46b9      	mov	r9, r7
   12194:	4647      	mov	r7, r8
   12196:	e774      	b.n	12082 <_strtoll_l.constprop.0+0x52>
   12198:	20000aa5 	.word	0x20000aa5

0001219c <_strtoll_r>:
   1219c:	f7ff bf48 	b.w	12030 <_strtoll_l.constprop.0>

000121a0 <_strtoull_l.constprop.0>:
   121a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121a4:	b085      	sub	sp, #20
   121a6:	468b      	mov	fp, r1
   121a8:	9201      	str	r2, [sp, #4]
   121aa:	4a62      	ldr	r2, [pc, #392]	; (12334 <_strtoull_l.constprop.0+0x194>)
   121ac:	9003      	str	r0, [sp, #12]
   121ae:	461e      	mov	r6, r3
   121b0:	460d      	mov	r5, r1
   121b2:	4629      	mov	r1, r5
   121b4:	f815 4b01 	ldrb.w	r4, [r5], #1
   121b8:	5d13      	ldrb	r3, [r2, r4]
   121ba:	f013 0308 	ands.w	r3, r3, #8
   121be:	d1f8      	bne.n	121b2 <_strtoull_l.constprop.0+0x12>
   121c0:	2c2d      	cmp	r4, #45	; 0x2d
   121c2:	f000 8082 	beq.w	122ca <_strtoull_l.constprop.0+0x12a>
   121c6:	2c2b      	cmp	r4, #43	; 0x2b
   121c8:	bf03      	ittte	eq
   121ca:	782c      	ldrbeq	r4, [r5, #0]
   121cc:	9302      	streq	r3, [sp, #8]
   121ce:	1c8d      	addeq	r5, r1, #2
   121d0:	9302      	strne	r3, [sp, #8]
   121d2:	b1be      	cbz	r6, 12204 <_strtoull_l.constprop.0+0x64>
   121d4:	2e10      	cmp	r6, #16
   121d6:	d07d      	beq.n	122d4 <_strtoull_l.constprop.0+0x134>
   121d8:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   121dc:	4632      	mov	r2, r6
   121de:	4653      	mov	r3, sl
   121e0:	f04f 30ff 	mov.w	r0, #4294967295
   121e4:	f04f 31ff 	mov.w	r1, #4294967295
   121e8:	f7f7 fb92 	bl	9910 <__aeabi_uldivmod>
   121ec:	4632      	mov	r2, r6
   121ee:	4607      	mov	r7, r0
   121f0:	4688      	mov	r8, r1
   121f2:	4653      	mov	r3, sl
   121f4:	f04f 30ff 	mov.w	r0, #4294967295
   121f8:	f04f 31ff 	mov.w	r1, #4294967295
   121fc:	46b1      	mov	r9, r6
   121fe:	f7f7 fb87 	bl	9910 <__aeabi_uldivmod>
   12202:	e00a      	b.n	1221a <_strtoull_l.constprop.0+0x7a>
   12204:	2c30      	cmp	r4, #48	; 0x30
   12206:	d079      	beq.n	122fc <_strtoull_l.constprop.0+0x15c>
   12208:	f04f 090a 	mov.w	r9, #10
   1220c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 12338 <_strtoull_l.constprop.0+0x198>
   12210:	46b2      	mov	sl, r6
   12212:	2205      	movs	r2, #5
   12214:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   12218:	464e      	mov	r6, r9
   1221a:	f04f 0c00 	mov.w	ip, #0
   1221e:	4660      	mov	r0, ip
   12220:	4661      	mov	r1, ip
   12222:	e011      	b.n	12248 <_strtoull_l.constprop.0+0xa8>
   12224:	4541      	cmp	r1, r8
   12226:	bf08      	it	eq
   12228:	42b8      	cmpeq	r0, r7
   1222a:	d03e      	beq.n	122aa <_strtoull_l.constprop.0+0x10a>
   1222c:	fb00 f40a 	mul.w	r4, r0, sl
   12230:	fb09 4101 	mla	r1, r9, r1, r4
   12234:	fba0 0409 	umull	r0, r4, r0, r9
   12238:	4421      	add	r1, r4
   1223a:	1818      	adds	r0, r3, r0
   1223c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   12240:	f04f 0c01 	mov.w	ip, #1
   12244:	f815 4b01 	ldrb.w	r4, [r5], #1
   12248:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1224c:	2b09      	cmp	r3, #9
   1224e:	d905      	bls.n	1225c <_strtoull_l.constprop.0+0xbc>
   12250:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   12254:	2b19      	cmp	r3, #25
   12256:	d80d      	bhi.n	12274 <_strtoull_l.constprop.0+0xd4>
   12258:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1225c:	429e      	cmp	r6, r3
   1225e:	dd11      	ble.n	12284 <_strtoull_l.constprop.0+0xe4>
   12260:	f1bc 3fff 	cmp.w	ip, #4294967295
   12264:	d0ee      	beq.n	12244 <_strtoull_l.constprop.0+0xa4>
   12266:	4287      	cmp	r7, r0
   12268:	eb78 0401 	sbcs.w	r4, r8, r1
   1226c:	d2da      	bcs.n	12224 <_strtoull_l.constprop.0+0x84>
   1226e:	f04f 3cff 	mov.w	ip, #4294967295
   12272:	e7e7      	b.n	12244 <_strtoull_l.constprop.0+0xa4>
   12274:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   12278:	2b19      	cmp	r3, #25
   1227a:	d803      	bhi.n	12284 <_strtoull_l.constprop.0+0xe4>
   1227c:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   12280:	429e      	cmp	r6, r3
   12282:	dced      	bgt.n	12260 <_strtoull_l.constprop.0+0xc0>
   12284:	f1bc 3fff 	cmp.w	ip, #4294967295
   12288:	d014      	beq.n	122b4 <_strtoull_l.constprop.0+0x114>
   1228a:	9b02      	ldr	r3, [sp, #8]
   1228c:	b113      	cbz	r3, 12294 <_strtoull_l.constprop.0+0xf4>
   1228e:	4240      	negs	r0, r0
   12290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12294:	9b01      	ldr	r3, [sp, #4]
   12296:	b12b      	cbz	r3, 122a4 <_strtoull_l.constprop.0+0x104>
   12298:	f1bc 0f00 	cmp.w	ip, #0
   1229c:	d112      	bne.n	122c4 <_strtoull_l.constprop.0+0x124>
   1229e:	9b01      	ldr	r3, [sp, #4]
   122a0:	f8c3 b000 	str.w	fp, [r3]
   122a4:	b005      	add	sp, #20
   122a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122aa:	4293      	cmp	r3, r2
   122ac:	ddbe      	ble.n	1222c <_strtoull_l.constprop.0+0x8c>
   122ae:	f04f 3cff 	mov.w	ip, #4294967295
   122b2:	e7c7      	b.n	12244 <_strtoull_l.constprop.0+0xa4>
   122b4:	9a03      	ldr	r2, [sp, #12]
   122b6:	2322      	movs	r3, #34	; 0x22
   122b8:	6013      	str	r3, [r2, #0]
   122ba:	9b01      	ldr	r3, [sp, #4]
   122bc:	4660      	mov	r0, ip
   122be:	4661      	mov	r1, ip
   122c0:	2b00      	cmp	r3, #0
   122c2:	d0ef      	beq.n	122a4 <_strtoull_l.constprop.0+0x104>
   122c4:	f105 3bff 	add.w	fp, r5, #4294967295
   122c8:	e7e9      	b.n	1229e <_strtoull_l.constprop.0+0xfe>
   122ca:	2301      	movs	r3, #1
   122cc:	782c      	ldrb	r4, [r5, #0]
   122ce:	9302      	str	r3, [sp, #8]
   122d0:	1c8d      	adds	r5, r1, #2
   122d2:	e77e      	b.n	121d2 <_strtoull_l.constprop.0+0x32>
   122d4:	2c30      	cmp	r4, #48	; 0x30
   122d6:	d123      	bne.n	12320 <_strtoull_l.constprop.0+0x180>
   122d8:	782b      	ldrb	r3, [r5, #0]
   122da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   122de:	2b58      	cmp	r3, #88	; 0x58
   122e0:	d11b      	bne.n	1231a <_strtoull_l.constprop.0+0x17a>
   122e2:	f04f 0910 	mov.w	r9, #16
   122e6:	786c      	ldrb	r4, [r5, #1]
   122e8:	220f      	movs	r2, #15
   122ea:	3502      	adds	r5, #2
   122ec:	f04f 37ff 	mov.w	r7, #4294967295
   122f0:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   122f4:	f04f 0a00 	mov.w	sl, #0
   122f8:	464e      	mov	r6, r9
   122fa:	e78e      	b.n	1221a <_strtoull_l.constprop.0+0x7a>
   122fc:	782b      	ldrb	r3, [r5, #0]
   122fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12302:	2b58      	cmp	r3, #88	; 0x58
   12304:	d0ed      	beq.n	122e2 <_strtoull_l.constprop.0+0x142>
   12306:	f04f 0908 	mov.w	r9, #8
   1230a:	46b2      	mov	sl, r6
   1230c:	2207      	movs	r2, #7
   1230e:	f04f 37ff 	mov.w	r7, #4294967295
   12312:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   12316:	464e      	mov	r6, r9
   12318:	e77f      	b.n	1221a <_strtoull_l.constprop.0+0x7a>
   1231a:	f04f 0a00 	mov.w	sl, #0
   1231e:	e75d      	b.n	121dc <_strtoull_l.constprop.0+0x3c>
   12320:	220f      	movs	r2, #15
   12322:	f04f 37ff 	mov.w	r7, #4294967295
   12326:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1232a:	46b1      	mov	r9, r6
   1232c:	f04f 0a00 	mov.w	sl, #0
   12330:	e773      	b.n	1221a <_strtoull_l.constprop.0+0x7a>
   12332:	bf00      	nop
   12334:	20000aa5 	.word	0x20000aa5
   12338:	19999999 	.word	0x19999999

0001233c <_strtoull_r>:
   1233c:	f7ff bf30 	b.w	121a0 <_strtoull_l.constprop.0>

00012340 <_mbrtowc_r>:
   12340:	b570      	push	{r4, r5, r6, lr}
   12342:	b082      	sub	sp, #8
   12344:	4604      	mov	r4, r0
   12346:	9d06      	ldr	r5, [sp, #24]
   12348:	b155      	cbz	r5, 12360 <_mbrtowc_r+0x20>
   1234a:	b16a      	cbz	r2, 12368 <_mbrtowc_r+0x28>
   1234c:	480f      	ldr	r0, [pc, #60]	; (1238c <_mbrtowc_r+0x4c>)
   1234e:	9500      	str	r5, [sp, #0]
   12350:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   12354:	4620      	mov	r0, r4
   12356:	47b0      	blx	r6
   12358:	1c43      	adds	r3, r0, #1
   1235a:	d010      	beq.n	1237e <_mbrtowc_r+0x3e>
   1235c:	b002      	add	sp, #8
   1235e:	bd70      	pop	{r4, r5, r6, pc}
   12360:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   12364:	2a00      	cmp	r2, #0
   12366:	d1f1      	bne.n	1234c <_mbrtowc_r+0xc>
   12368:	4b08      	ldr	r3, [pc, #32]	; (1238c <_mbrtowc_r+0x4c>)
   1236a:	9500      	str	r5, [sp, #0]
   1236c:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   12370:	4611      	mov	r1, r2
   12372:	2301      	movs	r3, #1
   12374:	4a06      	ldr	r2, [pc, #24]	; (12390 <_mbrtowc_r+0x50>)
   12376:	4620      	mov	r0, r4
   12378:	47b0      	blx	r6
   1237a:	1c43      	adds	r3, r0, #1
   1237c:	d1ee      	bne.n	1235c <_mbrtowc_r+0x1c>
   1237e:	2200      	movs	r2, #0
   12380:	238a      	movs	r3, #138	; 0x8a
   12382:	602a      	str	r2, [r5, #0]
   12384:	6023      	str	r3, [r4, #0]
   12386:	b002      	add	sp, #8
   12388:	bd70      	pop	{r4, r5, r6, pc}
   1238a:	bf00      	nop
   1238c:	200085f4 	.word	0x200085f4
   12390:	20008028 	.word	0x20008028

00012394 <_wcrtomb_r>:
   12394:	b570      	push	{r4, r5, r6, lr}
   12396:	4605      	mov	r5, r0
   12398:	b084      	sub	sp, #16
   1239a:	b15b      	cbz	r3, 123b4 <_wcrtomb_r+0x20>
   1239c:	461c      	mov	r4, r3
   1239e:	b169      	cbz	r1, 123bc <_wcrtomb_r+0x28>
   123a0:	4b0e      	ldr	r3, [pc, #56]	; (123dc <_wcrtomb_r+0x48>)
   123a2:	4628      	mov	r0, r5
   123a4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   123a8:	4623      	mov	r3, r4
   123aa:	47b0      	blx	r6
   123ac:	1c43      	adds	r3, r0, #1
   123ae:	d00f      	beq.n	123d0 <_wcrtomb_r+0x3c>
   123b0:	b004      	add	sp, #16
   123b2:	bd70      	pop	{r4, r5, r6, pc}
   123b4:	f500 7482 	add.w	r4, r0, #260	; 0x104
   123b8:	2900      	cmp	r1, #0
   123ba:	d1f1      	bne.n	123a0 <_wcrtomb_r+0xc>
   123bc:	4a07      	ldr	r2, [pc, #28]	; (123dc <_wcrtomb_r+0x48>)
   123be:	4623      	mov	r3, r4
   123c0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   123c4:	4628      	mov	r0, r5
   123c6:	460a      	mov	r2, r1
   123c8:	a901      	add	r1, sp, #4
   123ca:	47b0      	blx	r6
   123cc:	1c43      	adds	r3, r0, #1
   123ce:	d1ef      	bne.n	123b0 <_wcrtomb_r+0x1c>
   123d0:	2200      	movs	r2, #0
   123d2:	238a      	movs	r3, #138	; 0x8a
   123d4:	6022      	str	r2, [r4, #0]
   123d6:	602b      	str	r3, [r5, #0]
   123d8:	b004      	add	sp, #16
   123da:	bd70      	pop	{r4, r5, r6, pc}
   123dc:	200085f4 	.word	0x200085f4

000123e0 <_wcsrtombs_r>:
   123e0:	b510      	push	{r4, lr}
   123e2:	b082      	sub	sp, #8
   123e4:	9c04      	ldr	r4, [sp, #16]
   123e6:	e9cd 3400 	strd	r3, r4, [sp]
   123ea:	f04f 33ff 	mov.w	r3, #4294967295
   123ee:	f001 fd9f 	bl	13f30 <_wcsnrtombs_r>
   123f2:	b002      	add	sp, #8
   123f4:	bd10      	pop	{r4, pc}
   123f6:	bf00      	nop

000123f8 <iswspace>:
   123f8:	2100      	movs	r1, #0
   123fa:	f000 b801 	b.w	12400 <iswspace_l>
   123fe:	bf00      	nop

00012400 <iswspace_l>:
   12400:	b510      	push	{r4, lr}
   12402:	f000 f8ab 	bl	1255c <_jp2uc_l>
   12406:	4604      	mov	r4, r0
   12408:	f001 fda4 	bl	13f54 <category>
   1240c:	f1a0 031a 	sub.w	r3, r0, #26
   12410:	b2db      	uxtb	r3, r3
   12412:	2b02      	cmp	r3, #2
   12414:	d906      	bls.n	12424 <iswspace_l+0x24>
   12416:	f1a4 0009 	sub.w	r0, r4, #9
   1241a:	2804      	cmp	r0, #4
   1241c:	bf8c      	ite	hi
   1241e:	2000      	movhi	r0, #0
   12420:	2001      	movls	r0, #1
   12422:	bd10      	pop	{r4, pc}
   12424:	2001      	movs	r0, #1
   12426:	bd10      	pop	{r4, pc}

00012428 <__jp2uc>:
   12428:	2902      	cmp	r1, #2
   1242a:	d032      	beq.n	12492 <__jp2uc+0x6a>
   1242c:	2903      	cmp	r1, #3
   1242e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   12432:	bf1d      	ittte	ne
   12434:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   12438:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   1243c:	b2d2      	uxtbne	r2, r2
   1243e:	b2c2      	uxtbeq	r2, r0
   12440:	f103 0150 	add.w	r1, r3, #80	; 0x50
   12444:	b2c9      	uxtb	r1, r1
   12446:	291f      	cmp	r1, #31
   12448:	d806      	bhi.n	12458 <__jp2uc+0x30>
   1244a:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   1244e:	4288      	cmp	r0, r1
   12450:	d969      	bls.n	12526 <__jp2uc+0xfe>
   12452:	f04f 30ff 	mov.w	r0, #4294967295
   12456:	4770      	bx	lr
   12458:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1245c:	b2c9      	uxtb	r1, r1
   1245e:	2924      	cmp	r1, #36	; 0x24
   12460:	d80e      	bhi.n	12480 <__jp2uc+0x58>
   12462:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   12466:	4288      	cmp	r0, r1
   12468:	d8f3      	bhi.n	12452 <__jp2uc+0x2a>
   1246a:	3bd0      	subs	r3, #208	; 0xd0
   1246c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   12470:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12474:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   12478:	4a30      	ldr	r2, [pc, #192]	; (1253c <__jp2uc+0x114>)
   1247a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1247e:	4770      	bx	lr
   12480:	3ba1      	subs	r3, #161	; 0xa1
   12482:	2b07      	cmp	r3, #7
   12484:	d8e5      	bhi.n	12452 <__jp2uc+0x2a>
   12486:	e8df f003 	tbb	[pc, r3]
   1248a:	3e48      	.short	0x3e48
   1248c:	25292e34 	.word	0x25292e34
   12490:	1921      	.short	0x1921
   12492:	b2c2      	uxtb	r2, r0
   12494:	2a9e      	cmp	r2, #158	; 0x9e
   12496:	f3c0 2107 	ubfx	r1, r0, #8, #8
   1249a:	d90b      	bls.n	124b4 <__jp2uc+0x8c>
   1249c:	3223      	adds	r2, #35	; 0x23
   1249e:	b2d2      	uxtb	r2, r2
   124a0:	2380      	movs	r3, #128	; 0x80
   124a2:	299f      	cmp	r1, #159	; 0x9f
   124a4:	bf94      	ite	ls
   124a6:	3970      	subls	r1, #112	; 0x70
   124a8:	3150      	addhi	r1, #80	; 0x50
   124aa:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   124ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   124b2:	e7c5      	b.n	12440 <__jp2uc+0x18>
   124b4:	3a7e      	subs	r2, #126	; 0x7e
   124b6:	b2d2      	uxtb	r2, r2
   124b8:	237f      	movs	r3, #127	; 0x7f
   124ba:	e7f2      	b.n	124a2 <__jp2uc+0x7a>
   124bc:	2ac0      	cmp	r2, #192	; 0xc0
   124be:	d8c8      	bhi.n	12452 <__jp2uc+0x2a>
   124c0:	4b1f      	ldr	r3, [pc, #124]	; (12540 <__jp2uc+0x118>)
   124c2:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   124c6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   124ca:	4770      	bx	lr
   124cc:	2af1      	cmp	r2, #241	; 0xf1
   124ce:	d8c0      	bhi.n	12452 <__jp2uc+0x2a>
   124d0:	4b1c      	ldr	r3, [pc, #112]	; (12544 <__jp2uc+0x11c>)
   124d2:	e019      	b.n	12508 <__jp2uc+0xe0>
   124d4:	2ad8      	cmp	r2, #216	; 0xd8
   124d6:	d8bc      	bhi.n	12452 <__jp2uc+0x2a>
   124d8:	4b1b      	ldr	r3, [pc, #108]	; (12548 <__jp2uc+0x120>)
   124da:	e015      	b.n	12508 <__jp2uc+0xe0>
   124dc:	2af6      	cmp	r2, #246	; 0xf6
   124de:	d8b8      	bhi.n	12452 <__jp2uc+0x2a>
   124e0:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   124e4:	4770      	bx	lr
   124e6:	2af3      	cmp	r2, #243	; 0xf3
   124e8:	d8b3      	bhi.n	12452 <__jp2uc+0x2a>
   124ea:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   124ee:	3020      	adds	r0, #32
   124f0:	4770      	bx	lr
   124f2:	4b16      	ldr	r3, [pc, #88]	; (1254c <__jp2uc+0x124>)
   124f4:	4413      	add	r3, r2
   124f6:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   124fa:	2b00      	cmp	r3, #0
   124fc:	d0a9      	beq.n	12452 <__jp2uc+0x2a>
   124fe:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   12502:	3060      	adds	r0, #96	; 0x60
   12504:	4770      	bx	lr
   12506:	4b12      	ldr	r3, [pc, #72]	; (12550 <__jp2uc+0x128>)
   12508:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   1250c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12510:	2800      	cmp	r0, #0
   12512:	bf08      	it	eq
   12514:	f04f 30ff 	moveq.w	r0, #4294967295
   12518:	4770      	bx	lr
   1251a:	4b0e      	ldr	r3, [pc, #56]	; (12554 <__jp2uc+0x12c>)
   1251c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12520:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12524:	4770      	bx	lr
   12526:	3bb0      	subs	r3, #176	; 0xb0
   12528:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   1252c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12530:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   12534:	4a08      	ldr	r2, [pc, #32]	; (12558 <__jp2uc+0x130>)
   12536:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1253a:	4770      	bx	lr
   1253c:	20005c34 	.word	0x20005c34
   12540:	20000f5c 	.word	0x20000f5c
   12544:	20000eb8 	.word	0x20000eb8
   12548:	20000e48 	.word	0x20000e48
   1254c:	20000dec 	.word	0x20000dec
   12550:	20000d30 	.word	0x20000d30
   12554:	20000c74 	.word	0x20000c74
   12558:	20000f9c 	.word	0x20000f9c

0001255c <_jp2uc_l>:
   1255c:	b538      	push	{r3, r4, r5, lr}
   1255e:	4605      	mov	r5, r0
   12560:	b1b9      	cbz	r1, 12592 <_jp2uc_l+0x36>
   12562:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   12566:	4912      	ldr	r1, [pc, #72]	; (125b0 <_jp2uc_l+0x54>)
   12568:	4620      	mov	r0, r4
   1256a:	f7f9 fbfd 	bl	bd68 <strcmp>
   1256e:	b928      	cbnz	r0, 1257c <_jp2uc_l+0x20>
   12570:	4628      	mov	r0, r5
   12572:	2101      	movs	r1, #1
   12574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12578:	f7ff bf56 	b.w	12428 <__jp2uc>
   1257c:	490d      	ldr	r1, [pc, #52]	; (125b4 <_jp2uc_l+0x58>)
   1257e:	4620      	mov	r0, r4
   12580:	f7f9 fbf2 	bl	bd68 <strcmp>
   12584:	b938      	cbnz	r0, 12596 <_jp2uc_l+0x3a>
   12586:	4628      	mov	r0, r5
   12588:	2102      	movs	r1, #2
   1258a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1258e:	f7ff bf4b 	b.w	12428 <__jp2uc>
   12592:	4c09      	ldr	r4, [pc, #36]	; (125b8 <_jp2uc_l+0x5c>)
   12594:	e7e7      	b.n	12566 <_jp2uc_l+0xa>
   12596:	4909      	ldr	r1, [pc, #36]	; (125bc <_jp2uc_l+0x60>)
   12598:	4620      	mov	r0, r4
   1259a:	f7f9 fbe5 	bl	bd68 <strcmp>
   1259e:	b928      	cbnz	r0, 125ac <_jp2uc_l+0x50>
   125a0:	4628      	mov	r0, r5
   125a2:	2103      	movs	r1, #3
   125a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   125a8:	f7ff bf3e 	b.w	12428 <__jp2uc>
   125ac:	4628      	mov	r0, r5
   125ae:	bd38      	pop	{r3, r4, r5, pc}
   125b0:	20000c14 	.word	0x20000c14
   125b4:	20000c18 	.word	0x20000c18
   125b8:	2000871e 	.word	0x2000871e
   125bc:	20000c20 	.word	0x20000c20

000125c0 <fiprintf>:
   125c0:	b40e      	push	{r1, r2, r3}
   125c2:	b510      	push	{r4, lr}
   125c4:	b083      	sub	sp, #12
   125c6:	ab05      	add	r3, sp, #20
   125c8:	4c06      	ldr	r4, [pc, #24]	; (125e4 <fiprintf+0x24>)
   125ca:	f853 2b04 	ldr.w	r2, [r3], #4
   125ce:	9301      	str	r3, [sp, #4]
   125d0:	4601      	mov	r1, r0
   125d2:	6820      	ldr	r0, [r4, #0]
   125d4:	f000 f97c 	bl	128d0 <_vfiprintf_r>
   125d8:	b003      	add	sp, #12
   125da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   125de:	b003      	add	sp, #12
   125e0:	4770      	bx	lr
   125e2:	bf00      	nop
   125e4:	20008b7c 	.word	0x20008b7c

000125e8 <__ssprint_r>:
   125e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125ec:	6893      	ldr	r3, [r2, #8]
   125ee:	6817      	ldr	r7, [r2, #0]
   125f0:	b083      	sub	sp, #12
   125f2:	4692      	mov	sl, r2
   125f4:	2b00      	cmp	r3, #0
   125f6:	d070      	beq.n	126da <__ssprint_r+0xf2>
   125f8:	4681      	mov	r9, r0
   125fa:	688a      	ldr	r2, [r1, #8]
   125fc:	6808      	ldr	r0, [r1, #0]
   125fe:	460c      	mov	r4, r1
   12600:	3708      	adds	r7, #8
   12602:	e043      	b.n	1268c <__ssprint_r+0xa4>
   12604:	89a3      	ldrh	r3, [r4, #12]
   12606:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1260a:	d02e      	beq.n	1266a <__ssprint_r+0x82>
   1260c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   12610:	eba0 0801 	sub.w	r8, r0, r1
   12614:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   12618:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   1261c:	f108 0001 	add.w	r0, r8, #1
   12620:	1076      	asrs	r6, r6, #1
   12622:	4428      	add	r0, r5
   12624:	42b0      	cmp	r0, r6
   12626:	4632      	mov	r2, r6
   12628:	bf84      	itt	hi
   1262a:	4606      	movhi	r6, r0
   1262c:	4632      	movhi	r2, r6
   1262e:	055b      	lsls	r3, r3, #21
   12630:	d537      	bpl.n	126a2 <__ssprint_r+0xba>
   12632:	4611      	mov	r1, r2
   12634:	4648      	mov	r0, r9
   12636:	f7f7 faf9 	bl	9c2c <_malloc_r>
   1263a:	9001      	str	r0, [sp, #4]
   1263c:	2800      	cmp	r0, #0
   1263e:	d03a      	beq.n	126b6 <__ssprint_r+0xce>
   12640:	4642      	mov	r2, r8
   12642:	6921      	ldr	r1, [r4, #16]
   12644:	f7f5 fd4e 	bl	80e4 <memcpy>
   12648:	89a2      	ldrh	r2, [r4, #12]
   1264a:	9b01      	ldr	r3, [sp, #4]
   1264c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   12650:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12654:	81a2      	strh	r2, [r4, #12]
   12656:	eba6 0208 	sub.w	r2, r6, r8
   1265a:	eb03 0008 	add.w	r0, r3, r8
   1265e:	6166      	str	r6, [r4, #20]
   12660:	60a2      	str	r2, [r4, #8]
   12662:	6123      	str	r3, [r4, #16]
   12664:	6020      	str	r0, [r4, #0]
   12666:	462e      	mov	r6, r5
   12668:	46a8      	mov	r8, r5
   1266a:	4642      	mov	r2, r8
   1266c:	4659      	mov	r1, fp
   1266e:	f7f9 f989 	bl	b984 <memmove>
   12672:	f8da 3008 	ldr.w	r3, [sl, #8]
   12676:	68a2      	ldr	r2, [r4, #8]
   12678:	6820      	ldr	r0, [r4, #0]
   1267a:	1b92      	subs	r2, r2, r6
   1267c:	4440      	add	r0, r8
   1267e:	1b5b      	subs	r3, r3, r5
   12680:	60a2      	str	r2, [r4, #8]
   12682:	6020      	str	r0, [r4, #0]
   12684:	f8ca 3008 	str.w	r3, [sl, #8]
   12688:	b33b      	cbz	r3, 126da <__ssprint_r+0xf2>
   1268a:	3708      	adds	r7, #8
   1268c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   12690:	2d00      	cmp	r5, #0
   12692:	d0fa      	beq.n	1268a <__ssprint_r+0xa2>
   12694:	42aa      	cmp	r2, r5
   12696:	4616      	mov	r6, r2
   12698:	4690      	mov	r8, r2
   1269a:	d9b3      	bls.n	12604 <__ssprint_r+0x1c>
   1269c:	462e      	mov	r6, r5
   1269e:	46a8      	mov	r8, r5
   126a0:	e7e3      	b.n	1266a <__ssprint_r+0x82>
   126a2:	4648      	mov	r0, r9
   126a4:	f7f7 fd8a 	bl	a1bc <_realloc_r>
   126a8:	4603      	mov	r3, r0
   126aa:	2800      	cmp	r0, #0
   126ac:	d1d3      	bne.n	12656 <__ssprint_r+0x6e>
   126ae:	6921      	ldr	r1, [r4, #16]
   126b0:	4648      	mov	r0, r9
   126b2:	f7f9 fe97 	bl	c3e4 <_free_r>
   126b6:	89a3      	ldrh	r3, [r4, #12]
   126b8:	220c      	movs	r2, #12
   126ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   126be:	f8c9 2000 	str.w	r2, [r9]
   126c2:	f04f 30ff 	mov.w	r0, #4294967295
   126c6:	81a3      	strh	r3, [r4, #12]
   126c8:	2200      	movs	r2, #0
   126ca:	2300      	movs	r3, #0
   126cc:	f8ca 2008 	str.w	r2, [sl, #8]
   126d0:	f8ca 3004 	str.w	r3, [sl, #4]
   126d4:	b003      	add	sp, #12
   126d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126da:	2000      	movs	r0, #0
   126dc:	2300      	movs	r3, #0
   126de:	f8ca 3004 	str.w	r3, [sl, #4]
   126e2:	b003      	add	sp, #12
   126e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000126e8 <_sungetc_r>:
   126e8:	b538      	push	{r3, r4, r5, lr}
   126ea:	1c4b      	adds	r3, r1, #1
   126ec:	d01a      	beq.n	12724 <_sungetc_r+0x3c>
   126ee:	8993      	ldrh	r3, [r2, #12]
   126f0:	4614      	mov	r4, r2
   126f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
   126f4:	f023 0320 	bic.w	r3, r3, #32
   126f8:	81a3      	strh	r3, [r4, #12]
   126fa:	b2cd      	uxtb	r5, r1
   126fc:	b1aa      	cbz	r2, 1272a <_sungetc_r+0x42>
   126fe:	6862      	ldr	r2, [r4, #4]
   12700:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12702:	429a      	cmp	r2, r3
   12704:	da09      	bge.n	1271a <_sungetc_r+0x32>
   12706:	6823      	ldr	r3, [r4, #0]
   12708:	1e5a      	subs	r2, r3, #1
   1270a:	6022      	str	r2, [r4, #0]
   1270c:	f803 5c01 	strb.w	r5, [r3, #-1]
   12710:	6863      	ldr	r3, [r4, #4]
   12712:	3301      	adds	r3, #1
   12714:	6063      	str	r3, [r4, #4]
   12716:	4628      	mov	r0, r5
   12718:	bd38      	pop	{r3, r4, r5, pc}
   1271a:	4621      	mov	r1, r4
   1271c:	f001 fa58 	bl	13bd0 <__submore>
   12720:	2800      	cmp	r0, #0
   12722:	d0f0      	beq.n	12706 <_sungetc_r+0x1e>
   12724:	f04f 35ff 	mov.w	r5, #4294967295
   12728:	e7f5      	b.n	12716 <_sungetc_r+0x2e>
   1272a:	6923      	ldr	r3, [r4, #16]
   1272c:	6822      	ldr	r2, [r4, #0]
   1272e:	b12b      	cbz	r3, 1273c <_sungetc_r+0x54>
   12730:	4293      	cmp	r3, r2
   12732:	d203      	bcs.n	1273c <_sungetc_r+0x54>
   12734:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   12738:	42ab      	cmp	r3, r5
   1273a:	d00f      	beq.n	1275c <_sungetc_r+0x74>
   1273c:	6861      	ldr	r1, [r4, #4]
   1273e:	63e1      	str	r1, [r4, #60]	; 0x3c
   12740:	4623      	mov	r3, r4
   12742:	63a2      	str	r2, [r4, #56]	; 0x38
   12744:	f104 0140 	add.w	r1, r4, #64	; 0x40
   12748:	2203      	movs	r2, #3
   1274a:	6362      	str	r2, [r4, #52]	; 0x34
   1274c:	6321      	str	r1, [r4, #48]	; 0x30
   1274e:	f803 5f42 	strb.w	r5, [r3, #66]!
   12752:	2201      	movs	r2, #1
   12754:	e9c4 3200 	strd	r3, r2, [r4]
   12758:	4628      	mov	r0, r5
   1275a:	bd38      	pop	{r3, r4, r5, pc}
   1275c:	6863      	ldr	r3, [r4, #4]
   1275e:	3a01      	subs	r2, #1
   12760:	3301      	adds	r3, #1
   12762:	e9c4 2300 	strd	r2, r3, [r4]
   12766:	e7d6      	b.n	12716 <_sungetc_r+0x2e>

00012768 <__ssrefill_r>:
   12768:	b510      	push	{r4, lr}
   1276a:	460c      	mov	r4, r1
   1276c:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1276e:	b169      	cbz	r1, 1278c <__ssrefill_r+0x24>
   12770:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12774:	4299      	cmp	r1, r3
   12776:	d001      	beq.n	1277c <__ssrefill_r+0x14>
   12778:	f7f9 fe34 	bl	c3e4 <_free_r>
   1277c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1277e:	6063      	str	r3, [r4, #4]
   12780:	2000      	movs	r0, #0
   12782:	6320      	str	r0, [r4, #48]	; 0x30
   12784:	b113      	cbz	r3, 1278c <__ssrefill_r+0x24>
   12786:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12788:	6023      	str	r3, [r4, #0]
   1278a:	bd10      	pop	{r4, pc}
   1278c:	89a3      	ldrh	r3, [r4, #12]
   1278e:	6921      	ldr	r1, [r4, #16]
   12790:	2200      	movs	r2, #0
   12792:	f043 0320 	orr.w	r3, r3, #32
   12796:	e9c4 1200 	strd	r1, r2, [r4]
   1279a:	81a3      	strh	r3, [r4, #12]
   1279c:	f04f 30ff 	mov.w	r0, #4294967295
   127a0:	bd10      	pop	{r4, pc}
   127a2:	bf00      	nop

000127a4 <_sfread_r>:
   127a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127a8:	b085      	sub	sp, #20
   127aa:	e9cd 3202 	strd	r3, r2, [sp, #8]
   127ae:	fb02 f303 	mul.w	r3, r2, r3
   127b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   127b4:	9301      	str	r3, [sp, #4]
   127b6:	b3a3      	cbz	r3, 12822 <_sfread_r+0x7e>
   127b8:	f8d4 a004 	ldr.w	sl, [r4, #4]
   127bc:	9b01      	ldr	r3, [sp, #4]
   127be:	4553      	cmp	r3, sl
   127c0:	468b      	mov	fp, r1
   127c2:	d946      	bls.n	12852 <_sfread_r+0xae>
   127c4:	46a0      	mov	r8, r4
   127c6:	9d01      	ldr	r5, [sp, #4]
   127c8:	f858 1b40 	ldr.w	r1, [r8], #64
   127cc:	4607      	mov	r7, r0
   127ce:	2600      	movs	r6, #0
   127d0:	4652      	mov	r2, sl
   127d2:	4658      	mov	r0, fp
   127d4:	f7f5 fc86 	bl	80e4 <memcpy>
   127d8:	6823      	ldr	r3, [r4, #0]
   127da:	6b22      	ldr	r2, [r4, #48]	; 0x30
   127dc:	4453      	add	r3, sl
   127de:	46a9      	mov	r9, r5
   127e0:	e9c4 3600 	strd	r3, r6, [r4]
   127e4:	4611      	mov	r1, r2
   127e6:	4638      	mov	r0, r7
   127e8:	44d3      	add	fp, sl
   127ea:	eba5 050a 	sub.w	r5, r5, sl
   127ee:	b1e2      	cbz	r2, 1282a <_sfread_r+0x86>
   127f0:	4542      	cmp	r2, r8
   127f2:	d001      	beq.n	127f8 <_sfread_r+0x54>
   127f4:	f7f9 fdf6 	bl	c3e4 <_free_r>
   127f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   127fa:	6326      	str	r6, [r4, #48]	; 0x30
   127fc:	6063      	str	r3, [r4, #4]
   127fe:	b1a3      	cbz	r3, 1282a <_sfread_r+0x86>
   12800:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   12802:	6021      	str	r1, [r4, #0]
   12804:	42ab      	cmp	r3, r5
   12806:	469a      	mov	sl, r3
   12808:	d3e2      	bcc.n	127d0 <_sfread_r+0x2c>
   1280a:	9b02      	ldr	r3, [sp, #8]
   1280c:	9301      	str	r3, [sp, #4]
   1280e:	462a      	mov	r2, r5
   12810:	4658      	mov	r0, fp
   12812:	f7f5 fc67 	bl	80e4 <memcpy>
   12816:	e9d4 3200 	ldrd	r3, r2, [r4]
   1281a:	1b52      	subs	r2, r2, r5
   1281c:	442b      	add	r3, r5
   1281e:	e9c4 3200 	strd	r3, r2, [r4]
   12822:	9801      	ldr	r0, [sp, #4]
   12824:	b005      	add	sp, #20
   12826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1282a:	9a01      	ldr	r2, [sp, #4]
   1282c:	9b03      	ldr	r3, [sp, #12]
   1282e:	4452      	add	r2, sl
   12830:	eba2 0209 	sub.w	r2, r2, r9
   12834:	fbb2 f3f3 	udiv	r3, r2, r3
   12838:	9301      	str	r3, [sp, #4]
   1283a:	89a3      	ldrh	r3, [r4, #12]
   1283c:	6922      	ldr	r2, [r4, #16]
   1283e:	9801      	ldr	r0, [sp, #4]
   12840:	f043 0320 	orr.w	r3, r3, #32
   12844:	81a3      	strh	r3, [r4, #12]
   12846:	2300      	movs	r3, #0
   12848:	e9c4 2300 	strd	r2, r3, [r4]
   1284c:	b005      	add	sp, #20
   1284e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12852:	6821      	ldr	r1, [r4, #0]
   12854:	461d      	mov	r5, r3
   12856:	e7d8      	b.n	1280a <_sfread_r+0x66>

00012858 <__sprint_r.part.0>:
   12858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1285c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1285e:	049c      	lsls	r4, r3, #18
   12860:	4690      	mov	r8, r2
   12862:	d52d      	bpl.n	128c0 <__sprint_r.part.0+0x68>
   12864:	6893      	ldr	r3, [r2, #8]
   12866:	6812      	ldr	r2, [r2, #0]
   12868:	b343      	cbz	r3, 128bc <__sprint_r.part.0+0x64>
   1286a:	468b      	mov	fp, r1
   1286c:	4606      	mov	r6, r0
   1286e:	f102 0908 	add.w	r9, r2, #8
   12872:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   12876:	ea5f 079a 	movs.w	r7, sl, lsr #2
   1287a:	d015      	beq.n	128a8 <__sprint_r.part.0+0x50>
   1287c:	3d04      	subs	r5, #4
   1287e:	2400      	movs	r4, #0
   12880:	e001      	b.n	12886 <__sprint_r.part.0+0x2e>
   12882:	42a7      	cmp	r7, r4
   12884:	d00e      	beq.n	128a4 <__sprint_r.part.0+0x4c>
   12886:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1288a:	465a      	mov	r2, fp
   1288c:	4630      	mov	r0, r6
   1288e:	f001 fa97 	bl	13dc0 <_fputwc_r>
   12892:	1c43      	adds	r3, r0, #1
   12894:	f104 0401 	add.w	r4, r4, #1
   12898:	d1f3      	bne.n	12882 <__sprint_r.part.0+0x2a>
   1289a:	2300      	movs	r3, #0
   1289c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   128a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   128a8:	f02a 0a03 	bic.w	sl, sl, #3
   128ac:	eba3 030a 	sub.w	r3, r3, sl
   128b0:	f8c8 3008 	str.w	r3, [r8, #8]
   128b4:	f109 0908 	add.w	r9, r9, #8
   128b8:	2b00      	cmp	r3, #0
   128ba:	d1da      	bne.n	12872 <__sprint_r.part.0+0x1a>
   128bc:	2000      	movs	r0, #0
   128be:	e7ec      	b.n	1289a <__sprint_r.part.0+0x42>
   128c0:	f001 f80c 	bl	138dc <__sfvwrite_r>
   128c4:	2300      	movs	r3, #0
   128c6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   128ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128ce:	bf00      	nop

000128d0 <_vfiprintf_r>:
   128d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128d4:	ed2d 8b02 	vpush	{d8}
   128d8:	b0c5      	sub	sp, #276	; 0x114
   128da:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   128de:	4683      	mov	fp, r0
   128e0:	ee08 1a10 	vmov	s16, r1
   128e4:	4616      	mov	r6, r2
   128e6:	2100      	movs	r1, #0
   128e8:	2208      	movs	r2, #8
   128ea:	4650      	mov	r0, sl
   128ec:	461c      	mov	r4, r3
   128ee:	9307      	str	r3, [sp, #28]
   128f0:	f7f9 f8c4 	bl	ba7c <memset>
   128f4:	f1bb 0f00 	cmp.w	fp, #0
   128f8:	d004      	beq.n	12904 <_vfiprintf_r+0x34>
   128fa:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   128fe:	2b00      	cmp	r3, #0
   12900:	f000 86a0 	beq.w	13644 <_vfiprintf_r+0xd74>
   12904:	ee18 2a10 	vmov	r2, s16
   12908:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1290a:	07db      	lsls	r3, r3, #31
   1290c:	f140 8513 	bpl.w	13336 <_vfiprintf_r+0xa66>
   12910:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12914:	b28a      	uxth	r2, r1
   12916:	0495      	lsls	r5, r2, #18
   12918:	d40b      	bmi.n	12932 <_vfiprintf_r+0x62>
   1291a:	ee18 3a10 	vmov	r3, s16
   1291e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   12922:	8199      	strh	r1, [r3, #12]
   12924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12926:	b28a      	uxth	r2, r1
   12928:	ee18 1a10 	vmov	r1, s16
   1292c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12930:	664b      	str	r3, [r1, #100]	; 0x64
   12932:	0710      	lsls	r0, r2, #28
   12934:	f140 8105 	bpl.w	12b42 <_vfiprintf_r+0x272>
   12938:	ee18 3a10 	vmov	r3, s16
   1293c:	691b      	ldr	r3, [r3, #16]
   1293e:	2b00      	cmp	r3, #0
   12940:	f000 80ff 	beq.w	12b42 <_vfiprintf_r+0x272>
   12944:	f002 031a 	and.w	r3, r2, #26
   12948:	2b0a      	cmp	r3, #10
   1294a:	f000 810a 	beq.w	12b62 <_vfiprintf_r+0x292>
   1294e:	2300      	movs	r3, #0
   12950:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   12954:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   12958:	aa1b      	add	r2, sp, #108	; 0x6c
   1295a:	930c      	str	r3, [sp, #48]	; 0x30
   1295c:	9218      	str	r2, [sp, #96]	; 0x60
   1295e:	4691      	mov	r9, r2
   12960:	930b      	str	r3, [sp, #44]	; 0x2c
   12962:	9305      	str	r3, [sp, #20]
   12964:	46b0      	mov	r8, r6
   12966:	4644      	mov	r4, r8
   12968:	4ba8      	ldr	r3, [pc, #672]	; (12c0c <_vfiprintf_r+0x33c>)
   1296a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1296e:	f7f9 f94f 	bl	bc10 <__locale_mb_cur_max>
   12972:	4622      	mov	r2, r4
   12974:	4603      	mov	r3, r0
   12976:	a912      	add	r1, sp, #72	; 0x48
   12978:	f8cd a000 	str.w	sl, [sp]
   1297c:	4658      	mov	r0, fp
   1297e:	47a8      	blx	r5
   12980:	2800      	cmp	r0, #0
   12982:	f000 8145 	beq.w	12c10 <_vfiprintf_r+0x340>
   12986:	f2c0 8139 	blt.w	12bfc <_vfiprintf_r+0x32c>
   1298a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1298c:	2a25      	cmp	r2, #37	; 0x25
   1298e:	4603      	mov	r3, r0
   12990:	d001      	beq.n	12996 <_vfiprintf_r+0xc6>
   12992:	441c      	add	r4, r3
   12994:	e7e8      	b.n	12968 <_vfiprintf_r+0x98>
   12996:	ebb4 0608 	subs.w	r6, r4, r8
   1299a:	4605      	mov	r5, r0
   1299c:	f040 813c 	bne.w	12c18 <_vfiprintf_r+0x348>
   129a0:	2300      	movs	r3, #0
   129a2:	7861      	ldrb	r1, [r4, #1]
   129a4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   129a8:	f104 0801 	add.w	r8, r4, #1
   129ac:	9306      	str	r3, [sp, #24]
   129ae:	f04f 37ff 	mov.w	r7, #4294967295
   129b2:	461e      	mov	r6, r3
   129b4:	242b      	movs	r4, #43	; 0x2b
   129b6:	f108 0801 	add.w	r8, r8, #1
   129ba:	f1a1 0320 	sub.w	r3, r1, #32
   129be:	2b5a      	cmp	r3, #90	; 0x5a
   129c0:	f200 8178 	bhi.w	12cb4 <_vfiprintf_r+0x3e4>
   129c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   129c8:	017602b5 	.word	0x017602b5
   129cc:	02b00176 	.word	0x02b00176
   129d0:	01760176 	.word	0x01760176
   129d4:	006a0176 	.word	0x006a0176
   129d8:	01760176 	.word	0x01760176
   129dc:	028d027d 	.word	0x028d027d
   129e0:	02880176 	.word	0x02880176
   129e4:	01760297 	.word	0x01760297
   129e8:	005b0292 	.word	0x005b0292
   129ec:	005b005b 	.word	0x005b005b
   129f0:	005b005b 	.word	0x005b005b
   129f4:	005b005b 	.word	0x005b005b
   129f8:	005b005b 	.word	0x005b005b
   129fc:	01760176 	.word	0x01760176
   12a00:	01760176 	.word	0x01760176
   12a04:	01760176 	.word	0x01760176
   12a08:	01760176 	.word	0x01760176
   12a0c:	025c0176 	.word	0x025c0176
   12a10:	01760084 	.word	0x01760084
   12a14:	01760176 	.word	0x01760176
   12a18:	01760176 	.word	0x01760176
   12a1c:	01760176 	.word	0x01760176
   12a20:	01760176 	.word	0x01760176
   12a24:	00e80176 	.word	0x00e80176
   12a28:	01760176 	.word	0x01760176
   12a2c:	02330176 	.word	0x02330176
   12a30:	02da0176 	.word	0x02da0176
   12a34:	01760176 	.word	0x01760176
   12a38:	0176058b 	.word	0x0176058b
   12a3c:	01760176 	.word	0x01760176
   12a40:	01760176 	.word	0x01760176
   12a44:	01760176 	.word	0x01760176
   12a48:	01760176 	.word	0x01760176
   12a4c:	025c0176 	.word	0x025c0176
   12a50:	01760086 	.word	0x01760086
   12a54:	01760176 	.word	0x01760176
   12a58:	008602cd 	.word	0x008602cd
   12a5c:	0176007f 	.word	0x0176007f
   12a60:	017602c0 	.word	0x017602c0
   12a64:	00ea02fd 	.word	0x00ea02fd
   12a68:	007f02ed 	.word	0x007f02ed
   12a6c:	02330176 	.word	0x02330176
   12a70:	0569007c 	.word	0x0569007c
   12a74:	01760176 	.word	0x01760176
   12a78:	0176056b 	.word	0x0176056b
   12a7c:	007c      	.short	0x007c
   12a7e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12a82:	2200      	movs	r2, #0
   12a84:	f818 1b01 	ldrb.w	r1, [r8], #1
   12a88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   12a8c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   12a90:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12a94:	2b09      	cmp	r3, #9
   12a96:	d9f5      	bls.n	12a84 <_vfiprintf_r+0x1b4>
   12a98:	9206      	str	r2, [sp, #24]
   12a9a:	e78e      	b.n	129ba <_vfiprintf_r+0xea>
   12a9c:	4658      	mov	r0, fp
   12a9e:	f7fe fa7d 	bl	10f9c <_localeconv_r>
   12aa2:	6843      	ldr	r3, [r0, #4]
   12aa4:	930d      	str	r3, [sp, #52]	; 0x34
   12aa6:	4618      	mov	r0, r3
   12aa8:	f7f9 fb8a 	bl	c1c0 <strlen>
   12aac:	900e      	str	r0, [sp, #56]	; 0x38
   12aae:	4605      	mov	r5, r0
   12ab0:	4658      	mov	r0, fp
   12ab2:	f7fe fa73 	bl	10f9c <_localeconv_r>
   12ab6:	6883      	ldr	r3, [r0, #8]
   12ab8:	930b      	str	r3, [sp, #44]	; 0x2c
   12aba:	2d00      	cmp	r5, #0
   12abc:	f040 84d6 	bne.w	1346c <_vfiprintf_r+0xb9c>
   12ac0:	f898 1000 	ldrb.w	r1, [r8]
   12ac4:	e777      	b.n	129b6 <_vfiprintf_r+0xe6>
   12ac6:	f898 1000 	ldrb.w	r1, [r8]
   12aca:	f046 0620 	orr.w	r6, r6, #32
   12ace:	e772      	b.n	129b6 <_vfiprintf_r+0xe6>
   12ad0:	f046 0610 	orr.w	r6, r6, #16
   12ad4:	06b4      	lsls	r4, r6, #26
   12ad6:	f140 818e 	bpl.w	12df6 <_vfiprintf_r+0x526>
   12ada:	9b07      	ldr	r3, [sp, #28]
   12adc:	3307      	adds	r3, #7
   12ade:	f023 0307 	bic.w	r3, r3, #7
   12ae2:	461a      	mov	r2, r3
   12ae4:	6859      	ldr	r1, [r3, #4]
   12ae6:	f852 3b08 	ldr.w	r3, [r2], #8
   12aea:	9207      	str	r2, [sp, #28]
   12aec:	460a      	mov	r2, r1
   12aee:	2900      	cmp	r1, #0
   12af0:	f2c0 8470 	blt.w	133d4 <_vfiprintf_r+0xb04>
   12af4:	1c79      	adds	r1, r7, #1
   12af6:	f000 85a2 	beq.w	1363e <_vfiprintf_r+0xd6e>
   12afa:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   12afe:	9103      	str	r1, [sp, #12]
   12b00:	ea53 0102 	orrs.w	r1, r3, r2
   12b04:	f000 843f 	beq.w	13386 <_vfiprintf_r+0xab6>
   12b08:	2b0a      	cmp	r3, #10
   12b0a:	f172 0100 	sbcs.w	r1, r2, #0
   12b0e:	f080 8541 	bcs.w	13594 <_vfiprintf_r+0xcc4>
   12b12:	3330      	adds	r3, #48	; 0x30
   12b14:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12b18:	9e03      	ldr	r6, [sp, #12]
   12b1a:	2301      	movs	r3, #1
   12b1c:	9304      	str	r3, [sp, #16]
   12b1e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12b22:	9b04      	ldr	r3, [sp, #16]
   12b24:	42bb      	cmp	r3, r7
   12b26:	bfb8      	it	lt
   12b28:	463b      	movlt	r3, r7
   12b2a:	9303      	str	r3, [sp, #12]
   12b2c:	2300      	movs	r3, #0
   12b2e:	9308      	str	r3, [sp, #32]
   12b30:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12b34:	2b00      	cmp	r3, #0
   12b36:	f000 80cb 	beq.w	12cd0 <_vfiprintf_r+0x400>
   12b3a:	9b03      	ldr	r3, [sp, #12]
   12b3c:	3301      	adds	r3, #1
   12b3e:	9303      	str	r3, [sp, #12]
   12b40:	e0c6      	b.n	12cd0 <_vfiprintf_r+0x400>
   12b42:	ee18 1a10 	vmov	r1, s16
   12b46:	4658      	mov	r0, fp
   12b48:	ee18 5a10 	vmov	r5, s16
   12b4c:	f001 f87c 	bl	13c48 <__swsetup_r>
   12b50:	2800      	cmp	r0, #0
   12b52:	f040 8652 	bne.w	137fa <_vfiprintf_r+0xf2a>
   12b56:	89aa      	ldrh	r2, [r5, #12]
   12b58:	f002 031a 	and.w	r3, r2, #26
   12b5c:	2b0a      	cmp	r3, #10
   12b5e:	f47f aef6 	bne.w	1294e <_vfiprintf_r+0x7e>
   12b62:	ee18 1a10 	vmov	r1, s16
   12b66:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   12b6a:	2b00      	cmp	r3, #0
   12b6c:	f6ff aeef 	blt.w	1294e <_vfiprintf_r+0x7e>
   12b70:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12b72:	07db      	lsls	r3, r3, #31
   12b74:	d402      	bmi.n	12b7c <_vfiprintf_r+0x2ac>
   12b76:	0597      	lsls	r7, r2, #22
   12b78:	f140 8612 	bpl.w	137a0 <_vfiprintf_r+0xed0>
   12b7c:	ee18 1a10 	vmov	r1, s16
   12b80:	4623      	mov	r3, r4
   12b82:	4632      	mov	r2, r6
   12b84:	4658      	mov	r0, fp
   12b86:	f000 fe69 	bl	1385c <__sbprintf>
   12b8a:	9005      	str	r0, [sp, #20]
   12b8c:	9805      	ldr	r0, [sp, #20]
   12b8e:	b045      	add	sp, #276	; 0x114
   12b90:	ecbd 8b02 	vpop	{d8}
   12b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b98:	f046 0610 	orr.w	r6, r6, #16
   12b9c:	f016 0220 	ands.w	r2, r6, #32
   12ba0:	f000 8136 	beq.w	12e10 <_vfiprintf_r+0x540>
   12ba4:	9b07      	ldr	r3, [sp, #28]
   12ba6:	3307      	adds	r3, #7
   12ba8:	f023 0307 	bic.w	r3, r3, #7
   12bac:	4619      	mov	r1, r3
   12bae:	685a      	ldr	r2, [r3, #4]
   12bb0:	f851 3b08 	ldr.w	r3, [r1], #8
   12bb4:	9107      	str	r1, [sp, #28]
   12bb6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12bba:	9103      	str	r1, [sp, #12]
   12bbc:	2100      	movs	r1, #0
   12bbe:	2000      	movs	r0, #0
   12bc0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12bc4:	1c78      	adds	r0, r7, #1
   12bc6:	f000 8210 	beq.w	12fea <_vfiprintf_r+0x71a>
   12bca:	9803      	ldr	r0, [sp, #12]
   12bcc:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   12bd0:	ea53 0002 	orrs.w	r0, r3, r2
   12bd4:	f040 8208 	bne.w	12fe8 <_vfiprintf_r+0x718>
   12bd8:	2f00      	cmp	r7, #0
   12bda:	f040 8538 	bne.w	1364e <_vfiprintf_r+0xd7e>
   12bde:	2900      	cmp	r1, #0
   12be0:	f040 83d5 	bne.w	1338e <_vfiprintf_r+0xabe>
   12be4:	9b03      	ldr	r3, [sp, #12]
   12be6:	f013 0301 	ands.w	r3, r3, #1
   12bea:	9304      	str	r3, [sp, #16]
   12bec:	f000 8411 	beq.w	13412 <_vfiprintf_r+0xb42>
   12bf0:	2330      	movs	r3, #48	; 0x30
   12bf2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12bf6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12bfa:	e792      	b.n	12b22 <_vfiprintf_r+0x252>
   12bfc:	2208      	movs	r2, #8
   12bfe:	2100      	movs	r1, #0
   12c00:	4650      	mov	r0, sl
   12c02:	f7f8 ff3b 	bl	ba7c <memset>
   12c06:	2301      	movs	r3, #1
   12c08:	441c      	add	r4, r3
   12c0a:	e6ad      	b.n	12968 <_vfiprintf_r+0x98>
   12c0c:	200085f4 	.word	0x200085f4
   12c10:	ebb4 0608 	subs.w	r6, r4, r8
   12c14:	4605      	mov	r5, r0
   12c16:	d01b      	beq.n	12c50 <_vfiprintf_r+0x380>
   12c18:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12c1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12c1c:	3301      	adds	r3, #1
   12c1e:	4432      	add	r2, r6
   12c20:	2b07      	cmp	r3, #7
   12c22:	e9c9 8600 	strd	r8, r6, [r9]
   12c26:	921a      	str	r2, [sp, #104]	; 0x68
   12c28:	9319      	str	r3, [sp, #100]	; 0x64
   12c2a:	dd1c      	ble.n	12c66 <_vfiprintf_r+0x396>
   12c2c:	2a00      	cmp	r2, #0
   12c2e:	f000 83a6 	beq.w	1337e <_vfiprintf_r+0xaae>
   12c32:	ee18 1a10 	vmov	r1, s16
   12c36:	aa18      	add	r2, sp, #96	; 0x60
   12c38:	4658      	mov	r0, fp
   12c3a:	f7ff fe0d 	bl	12858 <__sprint_r.part.0>
   12c3e:	bb20      	cbnz	r0, 12c8a <_vfiprintf_r+0x3ba>
   12c40:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c44:	9b05      	ldr	r3, [sp, #20]
   12c46:	4433      	add	r3, r6
   12c48:	9305      	str	r3, [sp, #20]
   12c4a:	2d00      	cmp	r5, #0
   12c4c:	f47f aea8 	bne.w	129a0 <_vfiprintf_r+0xd0>
   12c50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12c52:	2b00      	cmp	r3, #0
   12c54:	f040 85c1 	bne.w	137da <_vfiprintf_r+0xf0a>
   12c58:	ee18 3a10 	vmov	r3, s16
   12c5c:	2200      	movs	r2, #0
   12c5e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12c62:	9219      	str	r2, [sp, #100]	; 0x64
   12c64:	e015      	b.n	12c92 <_vfiprintf_r+0x3c2>
   12c66:	f109 0908 	add.w	r9, r9, #8
   12c6a:	e7eb      	b.n	12c44 <_vfiprintf_r+0x374>
   12c6c:	ee18 1a10 	vmov	r1, s16
   12c70:	aa18      	add	r2, sp, #96	; 0x60
   12c72:	4658      	mov	r0, fp
   12c74:	f7ff fdf0 	bl	12858 <__sprint_r.part.0>
   12c78:	2800      	cmp	r0, #0
   12c7a:	f000 80a6 	beq.w	12dca <_vfiprintf_r+0x4fa>
   12c7e:	9b08      	ldr	r3, [sp, #32]
   12c80:	b11b      	cbz	r3, 12c8a <_vfiprintf_r+0x3ba>
   12c82:	9908      	ldr	r1, [sp, #32]
   12c84:	4658      	mov	r0, fp
   12c86:	f7f9 fbad 	bl	c3e4 <_free_r>
   12c8a:	ee18 3a10 	vmov	r3, s16
   12c8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12c92:	ee18 2a10 	vmov	r2, s16
   12c96:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12c98:	f012 0f01 	tst.w	r2, #1
   12c9c:	b29a      	uxth	r2, r3
   12c9e:	f000 80a0 	beq.w	12de2 <_vfiprintf_r+0x512>
   12ca2:	0650      	lsls	r0, r2, #25
   12ca4:	f100 85b2 	bmi.w	1380c <_vfiprintf_r+0xf3c>
   12ca8:	9805      	ldr	r0, [sp, #20]
   12caa:	b045      	add	sp, #276	; 0x114
   12cac:	ecbd 8b02 	vpop	{d8}
   12cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cb4:	2900      	cmp	r1, #0
   12cb6:	d0cb      	beq.n	12c50 <_vfiprintf_r+0x380>
   12cb8:	2300      	movs	r3, #0
   12cba:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12cbe:	2301      	movs	r3, #1
   12cc0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12cc4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12cc8:	ac2b      	add	r4, sp, #172	; 0xac
   12cca:	2300      	movs	r3, #0
   12ccc:	9308      	str	r3, [sp, #32]
   12cce:	461f      	mov	r7, r3
   12cd0:	f016 0302 	ands.w	r3, r6, #2
   12cd4:	9309      	str	r3, [sp, #36]	; 0x24
   12cd6:	d002      	beq.n	12cde <_vfiprintf_r+0x40e>
   12cd8:	9b03      	ldr	r3, [sp, #12]
   12cda:	3302      	adds	r3, #2
   12cdc:	9303      	str	r3, [sp, #12]
   12cde:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12ce2:	930a      	str	r3, [sp, #40]	; 0x28
   12ce4:	d105      	bne.n	12cf2 <_vfiprintf_r+0x422>
   12ce6:	9b06      	ldr	r3, [sp, #24]
   12ce8:	9a03      	ldr	r2, [sp, #12]
   12cea:	1a9d      	subs	r5, r3, r2
   12cec:	2d00      	cmp	r5, #0
   12cee:	f300 827b 	bgt.w	131e8 <_vfiprintf_r+0x918>
   12cf2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12cf6:	1c41      	adds	r1, r0, #1
   12cf8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12cfc:	b182      	cbz	r2, 12d20 <_vfiprintf_r+0x450>
   12cfe:	2201      	movs	r2, #1
   12d00:	3301      	adds	r3, #1
   12d02:	f8c9 2004 	str.w	r2, [r9, #4]
   12d06:	2907      	cmp	r1, #7
   12d08:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12d0c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12d10:	f8c9 2000 	str.w	r2, [r9]
   12d14:	f300 824a 	bgt.w	131ac <_vfiprintf_r+0x8dc>
   12d18:	4608      	mov	r0, r1
   12d1a:	f109 0908 	add.w	r9, r9, #8
   12d1e:	3101      	adds	r1, #1
   12d20:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12d22:	b1e2      	cbz	r2, 12d5e <_vfiprintf_r+0x48e>
   12d24:	aa11      	add	r2, sp, #68	; 0x44
   12d26:	3302      	adds	r3, #2
   12d28:	f8c9 2000 	str.w	r2, [r9]
   12d2c:	2907      	cmp	r1, #7
   12d2e:	f04f 0202 	mov.w	r2, #2
   12d32:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12d36:	f8c9 2004 	str.w	r2, [r9, #4]
   12d3a:	f340 8250 	ble.w	131de <_vfiprintf_r+0x90e>
   12d3e:	2b00      	cmp	r3, #0
   12d40:	f000 8343 	beq.w	133ca <_vfiprintf_r+0xafa>
   12d44:	ee18 1a10 	vmov	r1, s16
   12d48:	aa18      	add	r2, sp, #96	; 0x60
   12d4a:	4658      	mov	r0, fp
   12d4c:	f7ff fd84 	bl	12858 <__sprint_r.part.0>
   12d50:	2800      	cmp	r0, #0
   12d52:	d194      	bne.n	12c7e <_vfiprintf_r+0x3ae>
   12d54:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12d58:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d5c:	1c41      	adds	r1, r0, #1
   12d5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12d60:	2a80      	cmp	r2, #128	; 0x80
   12d62:	f000 8184 	beq.w	1306e <_vfiprintf_r+0x79e>
   12d66:	9a04      	ldr	r2, [sp, #16]
   12d68:	1abd      	subs	r5, r7, r2
   12d6a:	2d00      	cmp	r5, #0
   12d6c:	f300 81d7 	bgt.w	1311e <_vfiprintf_r+0x84e>
   12d70:	9a04      	ldr	r2, [sp, #16]
   12d72:	f8c9 4000 	str.w	r4, [r9]
   12d76:	4413      	add	r3, r2
   12d78:	2907      	cmp	r1, #7
   12d7a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12d7e:	f8c9 2004 	str.w	r2, [r9, #4]
   12d82:	f340 816e 	ble.w	13062 <_vfiprintf_r+0x792>
   12d86:	2b00      	cmp	r3, #0
   12d88:	f000 8275 	beq.w	13276 <_vfiprintf_r+0x9a6>
   12d8c:	ee18 1a10 	vmov	r1, s16
   12d90:	aa18      	add	r2, sp, #96	; 0x60
   12d92:	4658      	mov	r0, fp
   12d94:	f7ff fd60 	bl	12858 <__sprint_r.part.0>
   12d98:	2800      	cmp	r0, #0
   12d9a:	f47f af70 	bne.w	12c7e <_vfiprintf_r+0x3ae>
   12d9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12da0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12da4:	0775      	lsls	r5, r6, #29
   12da6:	d505      	bpl.n	12db4 <_vfiprintf_r+0x4e4>
   12da8:	9a06      	ldr	r2, [sp, #24]
   12daa:	9903      	ldr	r1, [sp, #12]
   12dac:	1a54      	subs	r4, r2, r1
   12dae:	2c00      	cmp	r4, #0
   12db0:	f300 826b 	bgt.w	1328a <_vfiprintf_r+0x9ba>
   12db4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12db8:	9803      	ldr	r0, [sp, #12]
   12dba:	4281      	cmp	r1, r0
   12dbc:	bfac      	ite	ge
   12dbe:	1852      	addge	r2, r2, r1
   12dc0:	1812      	addlt	r2, r2, r0
   12dc2:	9205      	str	r2, [sp, #20]
   12dc4:	2b00      	cmp	r3, #0
   12dc6:	f47f af51 	bne.w	12c6c <_vfiprintf_r+0x39c>
   12dca:	9908      	ldr	r1, [sp, #32]
   12dcc:	2300      	movs	r3, #0
   12dce:	9319      	str	r3, [sp, #100]	; 0x64
   12dd0:	2900      	cmp	r1, #0
   12dd2:	f000 8149 	beq.w	13068 <_vfiprintf_r+0x798>
   12dd6:	4658      	mov	r0, fp
   12dd8:	f7f9 fb04 	bl	c3e4 <_free_r>
   12ddc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12de0:	e5c1      	b.n	12966 <_vfiprintf_r+0x96>
   12de2:	059c      	lsls	r4, r3, #22
   12de4:	f53f af5d 	bmi.w	12ca2 <_vfiprintf_r+0x3d2>
   12de8:	ee18 4a10 	vmov	r4, s16
   12dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12dee:	f7f8 ffab 	bl	bd48 <__retarget_lock_release_recursive>
   12df2:	89a2      	ldrh	r2, [r4, #12]
   12df4:	e755      	b.n	12ca2 <_vfiprintf_r+0x3d2>
   12df6:	06f0      	lsls	r0, r6, #27
   12df8:	9a07      	ldr	r2, [sp, #28]
   12dfa:	f100 831f 	bmi.w	1343c <_vfiprintf_r+0xb6c>
   12dfe:	0671      	lsls	r1, r6, #25
   12e00:	f140 8319 	bpl.w	13436 <_vfiprintf_r+0xb66>
   12e04:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12e08:	9207      	str	r2, [sp, #28]
   12e0a:	17da      	asrs	r2, r3, #31
   12e0c:	4611      	mov	r1, r2
   12e0e:	e66e      	b.n	12aee <_vfiprintf_r+0x21e>
   12e10:	f016 0310 	ands.w	r3, r6, #16
   12e14:	9907      	ldr	r1, [sp, #28]
   12e16:	f040 8309 	bne.w	1342c <_vfiprintf_r+0xb5c>
   12e1a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   12e1e:	f000 8301 	beq.w	13424 <_vfiprintf_r+0xb54>
   12e22:	461a      	mov	r2, r3
   12e24:	f851 3b04 	ldr.w	r3, [r1], #4
   12e28:	9107      	str	r1, [sp, #28]
   12e2a:	b29b      	uxth	r3, r3
   12e2c:	e6c3      	b.n	12bb6 <_vfiprintf_r+0x2e6>
   12e2e:	9b07      	ldr	r3, [sp, #28]
   12e30:	461a      	mov	r2, r3
   12e32:	2300      	movs	r3, #0
   12e34:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12e38:	4613      	mov	r3, r2
   12e3a:	f853 4b04 	ldr.w	r4, [r3], #4
   12e3e:	9303      	str	r3, [sp, #12]
   12e40:	2c00      	cmp	r4, #0
   12e42:	f000 8412 	beq.w	1366a <_vfiprintf_r+0xd9a>
   12e46:	2953      	cmp	r1, #83	; 0x53
   12e48:	f000 8365 	beq.w	13516 <_vfiprintf_r+0xc46>
   12e4c:	f016 0510 	ands.w	r5, r6, #16
   12e50:	f040 8361 	bne.w	13516 <_vfiprintf_r+0xc46>
   12e54:	1c7b      	adds	r3, r7, #1
   12e56:	f000 84b3 	beq.w	137c0 <_vfiprintf_r+0xef0>
   12e5a:	463a      	mov	r2, r7
   12e5c:	4629      	mov	r1, r5
   12e5e:	4620      	mov	r0, r4
   12e60:	f7f9 f94e 	bl	c100 <memchr>
   12e64:	9008      	str	r0, [sp, #32]
   12e66:	2800      	cmp	r0, #0
   12e68:	f000 849f 	beq.w	137aa <_vfiprintf_r+0xeda>
   12e6c:	1b03      	subs	r3, r0, r4
   12e6e:	9a03      	ldr	r2, [sp, #12]
   12e70:	9304      	str	r3, [sp, #16]
   12e72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12e76:	462f      	mov	r7, r5
   12e78:	9207      	str	r2, [sp, #28]
   12e7a:	9303      	str	r3, [sp, #12]
   12e7c:	9508      	str	r5, [sp, #32]
   12e7e:	e657      	b.n	12b30 <_vfiprintf_r+0x260>
   12e80:	2943      	cmp	r1, #67	; 0x43
   12e82:	d002      	beq.n	12e8a <_vfiprintf_r+0x5ba>
   12e84:	06f5      	lsls	r5, r6, #27
   12e86:	f140 832d 	bpl.w	134e4 <_vfiprintf_r+0xc14>
   12e8a:	9d07      	ldr	r5, [sp, #28]
   12e8c:	2208      	movs	r2, #8
   12e8e:	2100      	movs	r1, #0
   12e90:	a816      	add	r0, sp, #88	; 0x58
   12e92:	ac2b      	add	r4, sp, #172	; 0xac
   12e94:	f7f8 fdf2 	bl	ba7c <memset>
   12e98:	ab16      	add	r3, sp, #88	; 0x58
   12e9a:	f855 2b04 	ldr.w	r2, [r5], #4
   12e9e:	4621      	mov	r1, r4
   12ea0:	4658      	mov	r0, fp
   12ea2:	f7ff fa77 	bl	12394 <_wcrtomb_r>
   12ea6:	4603      	mov	r3, r0
   12ea8:	3301      	adds	r3, #1
   12eaa:	9004      	str	r0, [sp, #16]
   12eac:	f000 84b3 	beq.w	13816 <_vfiprintf_r+0xf46>
   12eb0:	9b04      	ldr	r3, [sp, #16]
   12eb2:	9507      	str	r5, [sp, #28]
   12eb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12eb8:	9303      	str	r3, [sp, #12]
   12eba:	2300      	movs	r3, #0
   12ebc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12ec0:	e703      	b.n	12cca <_vfiprintf_r+0x3fa>
   12ec2:	9b07      	ldr	r3, [sp, #28]
   12ec4:	f853 2b04 	ldr.w	r2, [r3], #4
   12ec8:	9206      	str	r2, [sp, #24]
   12eca:	2a00      	cmp	r2, #0
   12ecc:	f280 829c 	bge.w	13408 <_vfiprintf_r+0xb38>
   12ed0:	9a06      	ldr	r2, [sp, #24]
   12ed2:	4252      	negs	r2, r2
   12ed4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12ed8:	f898 1000 	ldrb.w	r1, [r8]
   12edc:	f046 0604 	orr.w	r6, r6, #4
   12ee0:	e569      	b.n	129b6 <_vfiprintf_r+0xe6>
   12ee2:	f898 1000 	ldrb.w	r1, [r8]
   12ee6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12eea:	e564      	b.n	129b6 <_vfiprintf_r+0xe6>
   12eec:	f898 1000 	ldrb.w	r1, [r8]
   12ef0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12ef4:	e55f      	b.n	129b6 <_vfiprintf_r+0xe6>
   12ef6:	4642      	mov	r2, r8
   12ef8:	f812 1b01 	ldrb.w	r1, [r2], #1
   12efc:	292a      	cmp	r1, #42	; 0x2a
   12efe:	f000 8496 	beq.w	1382e <_vfiprintf_r+0xf5e>
   12f02:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12f06:	2b09      	cmp	r3, #9
   12f08:	4690      	mov	r8, r2
   12f0a:	f04f 0700 	mov.w	r7, #0
   12f0e:	f63f ad54 	bhi.w	129ba <_vfiprintf_r+0xea>
   12f12:	f818 1b01 	ldrb.w	r1, [r8], #1
   12f16:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12f1a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   12f1e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12f22:	2b09      	cmp	r3, #9
   12f24:	d9f5      	bls.n	12f12 <_vfiprintf_r+0x642>
   12f26:	e548      	b.n	129ba <_vfiprintf_r+0xea>
   12f28:	f898 1000 	ldrb.w	r1, [r8]
   12f2c:	f046 0601 	orr.w	r6, r6, #1
   12f30:	e541      	b.n	129b6 <_vfiprintf_r+0xe6>
   12f32:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12f36:	2b00      	cmp	r3, #0
   12f38:	f47f adc2 	bne.w	12ac0 <_vfiprintf_r+0x1f0>
   12f3c:	2320      	movs	r3, #32
   12f3e:	f898 1000 	ldrb.w	r1, [r8]
   12f42:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12f46:	e536      	b.n	129b6 <_vfiprintf_r+0xe6>
   12f48:	f898 1000 	ldrb.w	r1, [r8]
   12f4c:	296c      	cmp	r1, #108	; 0x6c
   12f4e:	bf03      	ittte	eq
   12f50:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12f54:	f046 0620 	orreq.w	r6, r6, #32
   12f58:	f108 0801 	addeq.w	r8, r8, #1
   12f5c:	f046 0610 	orrne.w	r6, r6, #16
   12f60:	e529      	b.n	129b6 <_vfiprintf_r+0xe6>
   12f62:	f898 1000 	ldrb.w	r1, [r8]
   12f66:	2968      	cmp	r1, #104	; 0x68
   12f68:	bf03      	ittte	eq
   12f6a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12f6e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12f72:	f108 0801 	addeq.w	r8, r8, #1
   12f76:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12f7a:	e51c      	b.n	129b6 <_vfiprintf_r+0xe6>
   12f7c:	f046 0310 	orr.w	r3, r6, #16
   12f80:	9303      	str	r3, [sp, #12]
   12f82:	9b03      	ldr	r3, [sp, #12]
   12f84:	f013 0220 	ands.w	r2, r3, #32
   12f88:	f000 8206 	beq.w	13398 <_vfiprintf_r+0xac8>
   12f8c:	9b07      	ldr	r3, [sp, #28]
   12f8e:	3307      	adds	r3, #7
   12f90:	f023 0307 	bic.w	r3, r3, #7
   12f94:	4619      	mov	r1, r3
   12f96:	685a      	ldr	r2, [r3, #4]
   12f98:	f851 3b08 	ldr.w	r3, [r1], #8
   12f9c:	9107      	str	r1, [sp, #28]
   12f9e:	2101      	movs	r1, #1
   12fa0:	e60d      	b.n	12bbe <_vfiprintf_r+0x2ee>
   12fa2:	9a07      	ldr	r2, [sp, #28]
   12fa4:	f046 0302 	orr.w	r3, r6, #2
   12fa8:	9303      	str	r3, [sp, #12]
   12faa:	f852 3b04 	ldr.w	r3, [r2], #4
   12fae:	9207      	str	r2, [sp, #28]
   12fb0:	f647 0230 	movw	r2, #30768	; 0x7830
   12fb4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12fb8:	4ab8      	ldr	r2, [pc, #736]	; (1329c <_vfiprintf_r+0x9cc>)
   12fba:	920c      	str	r2, [sp, #48]	; 0x30
   12fbc:	2102      	movs	r1, #2
   12fbe:	2200      	movs	r2, #0
   12fc0:	e5fd      	b.n	12bbe <_vfiprintf_r+0x2ee>
   12fc2:	06b7      	lsls	r7, r6, #26
   12fc4:	f100 8248 	bmi.w	13458 <_vfiprintf_r+0xb88>
   12fc8:	06f5      	lsls	r5, r6, #27
   12fca:	f100 8346 	bmi.w	1365a <_vfiprintf_r+0xd8a>
   12fce:	0674      	lsls	r4, r6, #25
   12fd0:	f100 83d5 	bmi.w	1377e <_vfiprintf_r+0xeae>
   12fd4:	05b0      	lsls	r0, r6, #22
   12fd6:	f140 8340 	bpl.w	1365a <_vfiprintf_r+0xd8a>
   12fda:	9b07      	ldr	r3, [sp, #28]
   12fdc:	9905      	ldr	r1, [sp, #20]
   12fde:	f853 2b04 	ldr.w	r2, [r3], #4
   12fe2:	9307      	str	r3, [sp, #28]
   12fe4:	7011      	strb	r1, [r2, #0]
   12fe6:	e4be      	b.n	12966 <_vfiprintf_r+0x96>
   12fe8:	9603      	str	r6, [sp, #12]
   12fea:	2901      	cmp	r1, #1
   12fec:	f43f ad8c 	beq.w	12b08 <_vfiprintf_r+0x238>
   12ff0:	2902      	cmp	r1, #2
   12ff2:	ac44      	add	r4, sp, #272	; 0x110
   12ff4:	d111      	bne.n	1301a <_vfiprintf_r+0x74a>
   12ff6:	980c      	ldr	r0, [sp, #48]	; 0x30
   12ff8:	f003 010f 	and.w	r1, r3, #15
   12ffc:	091b      	lsrs	r3, r3, #4
   12ffe:	5c41      	ldrb	r1, [r0, r1]
   13000:	f804 1d01 	strb.w	r1, [r4, #-1]!
   13004:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   13008:	0912      	lsrs	r2, r2, #4
   1300a:	ea53 0102 	orrs.w	r1, r3, r2
   1300e:	d1f3      	bne.n	12ff8 <_vfiprintf_r+0x728>
   13010:	9e03      	ldr	r6, [sp, #12]
   13012:	ab44      	add	r3, sp, #272	; 0x110
   13014:	1b1b      	subs	r3, r3, r4
   13016:	9304      	str	r3, [sp, #16]
   13018:	e583      	b.n	12b22 <_vfiprintf_r+0x252>
   1301a:	f003 0107 	and.w	r1, r3, #7
   1301e:	08db      	lsrs	r3, r3, #3
   13020:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   13024:	08d2      	lsrs	r2, r2, #3
   13026:	3130      	adds	r1, #48	; 0x30
   13028:	ea53 0502 	orrs.w	r5, r3, r2
   1302c:	4620      	mov	r0, r4
   1302e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   13032:	d1f2      	bne.n	1301a <_vfiprintf_r+0x74a>
   13034:	9e03      	ldr	r6, [sp, #12]
   13036:	07f3      	lsls	r3, r6, #31
   13038:	d5eb      	bpl.n	13012 <_vfiprintf_r+0x742>
   1303a:	2930      	cmp	r1, #48	; 0x30
   1303c:	d0e8      	beq.n	13010 <_vfiprintf_r+0x740>
   1303e:	2330      	movs	r3, #48	; 0x30
   13040:	3802      	subs	r0, #2
   13042:	f804 3c01 	strb.w	r3, [r4, #-1]
   13046:	ab44      	add	r3, sp, #272	; 0x110
   13048:	1a1b      	subs	r3, r3, r0
   1304a:	9e03      	ldr	r6, [sp, #12]
   1304c:	9304      	str	r3, [sp, #16]
   1304e:	4604      	mov	r4, r0
   13050:	e567      	b.n	12b22 <_vfiprintf_r+0x252>
   13052:	9b04      	ldr	r3, [sp, #16]
   13054:	941b      	str	r4, [sp, #108]	; 0x6c
   13056:	2201      	movs	r2, #1
   13058:	931c      	str	r3, [sp, #112]	; 0x70
   1305a:	931a      	str	r3, [sp, #104]	; 0x68
   1305c:	9219      	str	r2, [sp, #100]	; 0x64
   1305e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13062:	f109 0908 	add.w	r9, r9, #8
   13066:	e69d      	b.n	12da4 <_vfiprintf_r+0x4d4>
   13068:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1306c:	e47b      	b.n	12966 <_vfiprintf_r+0x96>
   1306e:	9a06      	ldr	r2, [sp, #24]
   13070:	9d03      	ldr	r5, [sp, #12]
   13072:	1b55      	subs	r5, r2, r5
   13074:	2d00      	cmp	r5, #0
   13076:	f77f ae76 	ble.w	12d66 <_vfiprintf_r+0x496>
   1307a:	2d10      	cmp	r5, #16
   1307c:	f340 83bb 	ble.w	137f6 <_vfiprintf_r+0xf26>
   13080:	9409      	str	r4, [sp, #36]	; 0x24
   13082:	ee18 4a10 	vmov	r4, s16
   13086:	e007      	b.n	13098 <_vfiprintf_r+0x7c8>
   13088:	f100 0c02 	add.w	ip, r0, #2
   1308c:	f109 0908 	add.w	r9, r9, #8
   13090:	4610      	mov	r0, r2
   13092:	3d10      	subs	r5, #16
   13094:	2d10      	cmp	r5, #16
   13096:	dd1e      	ble.n	130d6 <_vfiprintf_r+0x806>
   13098:	4981      	ldr	r1, [pc, #516]	; (132a0 <_vfiprintf_r+0x9d0>)
   1309a:	f8c9 1000 	str.w	r1, [r9]
   1309e:	1c42      	adds	r2, r0, #1
   130a0:	3310      	adds	r3, #16
   130a2:	2110      	movs	r1, #16
   130a4:	2a07      	cmp	r2, #7
   130a6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   130aa:	f8c9 1004 	str.w	r1, [r9, #4]
   130ae:	ddeb      	ble.n	13088 <_vfiprintf_r+0x7b8>
   130b0:	aa18      	add	r2, sp, #96	; 0x60
   130b2:	2b00      	cmp	r3, #0
   130b4:	d074      	beq.n	131a0 <_vfiprintf_r+0x8d0>
   130b6:	4621      	mov	r1, r4
   130b8:	4658      	mov	r0, fp
   130ba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130be:	f7ff fbcb 	bl	12858 <__sprint_r.part.0>
   130c2:	2800      	cmp	r0, #0
   130c4:	f47f addb 	bne.w	12c7e <_vfiprintf_r+0x3ae>
   130c8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   130cc:	3d10      	subs	r5, #16
   130ce:	2d10      	cmp	r5, #16
   130d0:	f100 0c01 	add.w	ip, r0, #1
   130d4:	dce0      	bgt.n	13098 <_vfiprintf_r+0x7c8>
   130d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   130d8:	4a71      	ldr	r2, [pc, #452]	; (132a0 <_vfiprintf_r+0x9d0>)
   130da:	f8c9 5004 	str.w	r5, [r9, #4]
   130de:	442b      	add	r3, r5
   130e0:	f1bc 0f07 	cmp.w	ip, #7
   130e4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   130e8:	f8c9 2000 	str.w	r2, [r9]
   130ec:	f340 8194 	ble.w	13418 <_vfiprintf_r+0xb48>
   130f0:	2b00      	cmp	r3, #0
   130f2:	f000 831f 	beq.w	13734 <_vfiprintf_r+0xe64>
   130f6:	ee18 1a10 	vmov	r1, s16
   130fa:	aa18      	add	r2, sp, #96	; 0x60
   130fc:	4658      	mov	r0, fp
   130fe:	f7ff fbab 	bl	12858 <__sprint_r.part.0>
   13102:	2800      	cmp	r0, #0
   13104:	f47f adbb 	bne.w	12c7e <_vfiprintf_r+0x3ae>
   13108:	9a04      	ldr	r2, [sp, #16]
   1310a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1310e:	1abd      	subs	r5, r7, r2
   13110:	2d00      	cmp	r5, #0
   13112:	f100 0101 	add.w	r1, r0, #1
   13116:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1311a:	f77f ae29 	ble.w	12d70 <_vfiprintf_r+0x4a0>
   1311e:	2d10      	cmp	r5, #16
   13120:	dd29      	ble.n	13176 <_vfiprintf_r+0x8a6>
   13122:	9409      	str	r4, [sp, #36]	; 0x24
   13124:	2710      	movs	r7, #16
   13126:	ee18 4a10 	vmov	r4, s16
   1312a:	e007      	b.n	1313c <_vfiprintf_r+0x86c>
   1312c:	f100 0c02 	add.w	ip, r0, #2
   13130:	f109 0908 	add.w	r9, r9, #8
   13134:	4610      	mov	r0, r2
   13136:	3d10      	subs	r5, #16
   13138:	2d10      	cmp	r5, #16
   1313a:	dd1a      	ble.n	13172 <_vfiprintf_r+0x8a2>
   1313c:	1c42      	adds	r2, r0, #1
   1313e:	4958      	ldr	r1, [pc, #352]	; (132a0 <_vfiprintf_r+0x9d0>)
   13140:	3310      	adds	r3, #16
   13142:	2a07      	cmp	r2, #7
   13144:	e9c9 1700 	strd	r1, r7, [r9]
   13148:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1314c:	ddee      	ble.n	1312c <_vfiprintf_r+0x85c>
   1314e:	aa18      	add	r2, sp, #96	; 0x60
   13150:	b303      	cbz	r3, 13194 <_vfiprintf_r+0x8c4>
   13152:	4621      	mov	r1, r4
   13154:	4658      	mov	r0, fp
   13156:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1315a:	f7ff fb7d 	bl	12858 <__sprint_r.part.0>
   1315e:	2800      	cmp	r0, #0
   13160:	f47f ad8d 	bne.w	12c7e <_vfiprintf_r+0x3ae>
   13164:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13168:	3d10      	subs	r5, #16
   1316a:	2d10      	cmp	r5, #16
   1316c:	f100 0c01 	add.w	ip, r0, #1
   13170:	dce4      	bgt.n	1313c <_vfiprintf_r+0x86c>
   13172:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13174:	4661      	mov	r1, ip
   13176:	4a4a      	ldr	r2, [pc, #296]	; (132a0 <_vfiprintf_r+0x9d0>)
   13178:	f8c9 5004 	str.w	r5, [r9, #4]
   1317c:	442b      	add	r3, r5
   1317e:	2907      	cmp	r1, #7
   13180:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13184:	f8c9 2000 	str.w	r2, [r9]
   13188:	f300 80e7 	bgt.w	1335a <_vfiprintf_r+0xa8a>
   1318c:	f109 0908 	add.w	r9, r9, #8
   13190:	3101      	adds	r1, #1
   13192:	e5ed      	b.n	12d70 <_vfiprintf_r+0x4a0>
   13194:	f04f 0c01 	mov.w	ip, #1
   13198:	4618      	mov	r0, r3
   1319a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1319e:	e7ca      	b.n	13136 <_vfiprintf_r+0x866>
   131a0:	f04f 0c01 	mov.w	ip, #1
   131a4:	4618      	mov	r0, r3
   131a6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131aa:	e772      	b.n	13092 <_vfiprintf_r+0x7c2>
   131ac:	2b00      	cmp	r3, #0
   131ae:	f000 8104 	beq.w	133ba <_vfiprintf_r+0xaea>
   131b2:	ee18 1a10 	vmov	r1, s16
   131b6:	aa18      	add	r2, sp, #96	; 0x60
   131b8:	4658      	mov	r0, fp
   131ba:	f7ff fb4d 	bl	12858 <__sprint_r.part.0>
   131be:	2800      	cmp	r0, #0
   131c0:	f47f ad5d 	bne.w	12c7e <_vfiprintf_r+0x3ae>
   131c4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   131c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131cc:	1c41      	adds	r1, r0, #1
   131ce:	e5a7      	b.n	12d20 <_vfiprintf_r+0x450>
   131d0:	2302      	movs	r3, #2
   131d2:	aa11      	add	r2, sp, #68	; 0x44
   131d4:	931c      	str	r3, [sp, #112]	; 0x70
   131d6:	921b      	str	r2, [sp, #108]	; 0x6c
   131d8:	2101      	movs	r1, #1
   131da:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131de:	4608      	mov	r0, r1
   131e0:	f109 0908 	add.w	r9, r9, #8
   131e4:	1c41      	adds	r1, r0, #1
   131e6:	e5ba      	b.n	12d5e <_vfiprintf_r+0x48e>
   131e8:	2d10      	cmp	r5, #16
   131ea:	f340 82e5 	ble.w	137b8 <_vfiprintf_r+0xee8>
   131ee:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   131f2:	940f      	str	r4, [sp, #60]	; 0x3c
   131f4:	4608      	mov	r0, r1
   131f6:	ee18 4a10 	vmov	r4, s16
   131fa:	e007      	b.n	1320c <_vfiprintf_r+0x93c>
   131fc:	f100 0c02 	add.w	ip, r0, #2
   13200:	f109 0908 	add.w	r9, r9, #8
   13204:	4610      	mov	r0, r2
   13206:	3d10      	subs	r5, #16
   13208:	2d10      	cmp	r5, #16
   1320a:	dd1d      	ble.n	13248 <_vfiprintf_r+0x978>
   1320c:	4925      	ldr	r1, [pc, #148]	; (132a4 <_vfiprintf_r+0x9d4>)
   1320e:	f8c9 1000 	str.w	r1, [r9]
   13212:	1c42      	adds	r2, r0, #1
   13214:	3310      	adds	r3, #16
   13216:	2110      	movs	r1, #16
   13218:	2a07      	cmp	r2, #7
   1321a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1321e:	f8c9 1004 	str.w	r1, [r9, #4]
   13222:	ddeb      	ble.n	131fc <_vfiprintf_r+0x92c>
   13224:	aa18      	add	r2, sp, #96	; 0x60
   13226:	b303      	cbz	r3, 1326a <_vfiprintf_r+0x99a>
   13228:	4621      	mov	r1, r4
   1322a:	4658      	mov	r0, fp
   1322c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13230:	f7ff fb12 	bl	12858 <__sprint_r.part.0>
   13234:	2800      	cmp	r0, #0
   13236:	f47f ad22 	bne.w	12c7e <_vfiprintf_r+0x3ae>
   1323a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1323e:	3d10      	subs	r5, #16
   13240:	2d10      	cmp	r5, #16
   13242:	f100 0c01 	add.w	ip, r0, #1
   13246:	dce1      	bgt.n	1320c <_vfiprintf_r+0x93c>
   13248:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1324a:	4660      	mov	r0, ip
   1324c:	4a15      	ldr	r2, [pc, #84]	; (132a4 <_vfiprintf_r+0x9d4>)
   1324e:	f8c9 5004 	str.w	r5, [r9, #4]
   13252:	442b      	add	r3, r5
   13254:	2807      	cmp	r0, #7
   13256:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1325a:	f8c9 2000 	str.w	r2, [r9]
   1325e:	f300 80c1 	bgt.w	133e4 <_vfiprintf_r+0xb14>
   13262:	f109 0908 	add.w	r9, r9, #8
   13266:	1c41      	adds	r1, r0, #1
   13268:	e546      	b.n	12cf8 <_vfiprintf_r+0x428>
   1326a:	4618      	mov	r0, r3
   1326c:	f04f 0c01 	mov.w	ip, #1
   13270:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13274:	e7c7      	b.n	13206 <_vfiprintf_r+0x936>
   13276:	0776      	lsls	r6, r6, #29
   13278:	9319      	str	r3, [sp, #100]	; 0x64
   1327a:	d553      	bpl.n	13324 <_vfiprintf_r+0xa54>
   1327c:	9a06      	ldr	r2, [sp, #24]
   1327e:	9903      	ldr	r1, [sp, #12]
   13280:	1a54      	subs	r4, r2, r1
   13282:	2c00      	cmp	r4, #0
   13284:	dd4e      	ble.n	13324 <_vfiprintf_r+0xa54>
   13286:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1328a:	2c10      	cmp	r4, #16
   1328c:	f340 82b0 	ble.w	137f0 <_vfiprintf_r+0xf20>
   13290:	9919      	ldr	r1, [sp, #100]	; 0x64
   13292:	ee18 6a10 	vmov	r6, s16
   13296:	2510      	movs	r5, #16
   13298:	e00d      	b.n	132b6 <_vfiprintf_r+0x9e6>
   1329a:	bf00      	nop
   1329c:	20000c40 	.word	0x20000c40
   132a0:	20008498 	.word	0x20008498
   132a4:	200026fc 	.word	0x200026fc
   132a8:	1c88      	adds	r0, r1, #2
   132aa:	f109 0908 	add.w	r9, r9, #8
   132ae:	4611      	mov	r1, r2
   132b0:	3c10      	subs	r4, #16
   132b2:	2c10      	cmp	r4, #16
   132b4:	dd1a      	ble.n	132ec <_vfiprintf_r+0xa1c>
   132b6:	1c4a      	adds	r2, r1, #1
   132b8:	48b3      	ldr	r0, [pc, #716]	; (13588 <_vfiprintf_r+0xcb8>)
   132ba:	3310      	adds	r3, #16
   132bc:	2a07      	cmp	r2, #7
   132be:	e9c9 0500 	strd	r0, r5, [r9]
   132c2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   132c6:	ddef      	ble.n	132a8 <_vfiprintf_r+0x9d8>
   132c8:	aa18      	add	r2, sp, #96	; 0x60
   132ca:	b333      	cbz	r3, 1331a <_vfiprintf_r+0xa4a>
   132cc:	4631      	mov	r1, r6
   132ce:	4658      	mov	r0, fp
   132d0:	f7ff fac2 	bl	12858 <__sprint_r.part.0>
   132d4:	2800      	cmp	r0, #0
   132d6:	f47f acd2 	bne.w	12c7e <_vfiprintf_r+0x3ae>
   132da:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   132de:	3c10      	subs	r4, #16
   132e0:	2c10      	cmp	r4, #16
   132e2:	f101 0001 	add.w	r0, r1, #1
   132e6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132ea:	dce4      	bgt.n	132b6 <_vfiprintf_r+0x9e6>
   132ec:	4aa6      	ldr	r2, [pc, #664]	; (13588 <_vfiprintf_r+0xcb8>)
   132ee:	f8c9 4004 	str.w	r4, [r9, #4]
   132f2:	4423      	add	r3, r4
   132f4:	2807      	cmp	r0, #7
   132f6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   132fa:	f8c9 2000 	str.w	r2, [r9]
   132fe:	f77f ad59 	ble.w	12db4 <_vfiprintf_r+0x4e4>
   13302:	b17b      	cbz	r3, 13324 <_vfiprintf_r+0xa54>
   13304:	ee18 1a10 	vmov	r1, s16
   13308:	aa18      	add	r2, sp, #96	; 0x60
   1330a:	4658      	mov	r0, fp
   1330c:	f7ff faa4 	bl	12858 <__sprint_r.part.0>
   13310:	2800      	cmp	r0, #0
   13312:	f47f acb4 	bne.w	12c7e <_vfiprintf_r+0x3ae>
   13316:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13318:	e54c      	b.n	12db4 <_vfiprintf_r+0x4e4>
   1331a:	2001      	movs	r0, #1
   1331c:	4619      	mov	r1, r3
   1331e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13322:	e7c5      	b.n	132b0 <_vfiprintf_r+0x9e0>
   13324:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   13328:	9903      	ldr	r1, [sp, #12]
   1332a:	428a      	cmp	r2, r1
   1332c:	bfac      	ite	ge
   1332e:	189b      	addge	r3, r3, r2
   13330:	185b      	addlt	r3, r3, r1
   13332:	9305      	str	r3, [sp, #20]
   13334:	e549      	b.n	12dca <_vfiprintf_r+0x4fa>
   13336:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1333a:	058f      	lsls	r7, r1, #22
   1333c:	ee18 3a10 	vmov	r3, s16
   13340:	b28a      	uxth	r2, r1
   13342:	f53f aae8 	bmi.w	12916 <_vfiprintf_r+0x46>
   13346:	ee18 5a10 	vmov	r5, s16
   1334a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1334c:	f7f8 fcfa 	bl	bd44 <__retarget_lock_acquire_recursive>
   13350:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   13354:	b28a      	uxth	r2, r1
   13356:	f7ff bade 	b.w	12916 <_vfiprintf_r+0x46>
   1335a:	2b00      	cmp	r3, #0
   1335c:	f43f ae79 	beq.w	13052 <_vfiprintf_r+0x782>
   13360:	ee18 1a10 	vmov	r1, s16
   13364:	aa18      	add	r2, sp, #96	; 0x60
   13366:	4658      	mov	r0, fp
   13368:	f7ff fa76 	bl	12858 <__sprint_r.part.0>
   1336c:	2800      	cmp	r0, #0
   1336e:	f47f ac86 	bne.w	12c7e <_vfiprintf_r+0x3ae>
   13372:	9919      	ldr	r1, [sp, #100]	; 0x64
   13374:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13376:	3101      	adds	r1, #1
   13378:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1337c:	e4f8      	b.n	12d70 <_vfiprintf_r+0x4a0>
   1337e:	9219      	str	r2, [sp, #100]	; 0x64
   13380:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13384:	e45e      	b.n	12c44 <_vfiprintf_r+0x374>
   13386:	2f00      	cmp	r7, #0
   13388:	f47f abc3 	bne.w	12b12 <_vfiprintf_r+0x242>
   1338c:	9e03      	ldr	r6, [sp, #12]
   1338e:	2700      	movs	r7, #0
   13390:	9704      	str	r7, [sp, #16]
   13392:	ac44      	add	r4, sp, #272	; 0x110
   13394:	f7ff bbc5 	b.w	12b22 <_vfiprintf_r+0x252>
   13398:	9b03      	ldr	r3, [sp, #12]
   1339a:	f013 0310 	ands.w	r3, r3, #16
   1339e:	d154      	bne.n	1344a <_vfiprintf_r+0xb7a>
   133a0:	9a03      	ldr	r2, [sp, #12]
   133a2:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   133a6:	f000 816b 	beq.w	13680 <_vfiprintf_r+0xdb0>
   133aa:	9907      	ldr	r1, [sp, #28]
   133ac:	461a      	mov	r2, r3
   133ae:	f851 3b04 	ldr.w	r3, [r1], #4
   133b2:	9107      	str	r1, [sp, #28]
   133b4:	b29b      	uxth	r3, r3
   133b6:	2101      	movs	r1, #1
   133b8:	e401      	b.n	12bbe <_vfiprintf_r+0x2ee>
   133ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   133bc:	2a00      	cmp	r2, #0
   133be:	d164      	bne.n	1348a <_vfiprintf_r+0xbba>
   133c0:	4618      	mov	r0, r3
   133c2:	2101      	movs	r1, #1
   133c4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   133c8:	e4c9      	b.n	12d5e <_vfiprintf_r+0x48e>
   133ca:	2101      	movs	r1, #1
   133cc:	4618      	mov	r0, r3
   133ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   133d2:	e4c4      	b.n	12d5e <_vfiprintf_r+0x48e>
   133d4:	425b      	negs	r3, r3
   133d6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   133da:	9603      	str	r6, [sp, #12]
   133dc:	202d      	movs	r0, #45	; 0x2d
   133de:	2101      	movs	r1, #1
   133e0:	f7ff bbee 	b.w	12bc0 <_vfiprintf_r+0x2f0>
   133e4:	2b00      	cmp	r3, #0
   133e6:	f000 8088 	beq.w	134fa <_vfiprintf_r+0xc2a>
   133ea:	ee18 1a10 	vmov	r1, s16
   133ee:	aa18      	add	r2, sp, #96	; 0x60
   133f0:	4658      	mov	r0, fp
   133f2:	f7ff fa31 	bl	12858 <__sprint_r.part.0>
   133f6:	2800      	cmp	r0, #0
   133f8:	f47f ac41 	bne.w	12c7e <_vfiprintf_r+0x3ae>
   133fc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13400:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13404:	1c41      	adds	r1, r0, #1
   13406:	e477      	b.n	12cf8 <_vfiprintf_r+0x428>
   13408:	f898 1000 	ldrb.w	r1, [r8]
   1340c:	9307      	str	r3, [sp, #28]
   1340e:	f7ff bad2 	b.w	129b6 <_vfiprintf_r+0xe6>
   13412:	ac44      	add	r4, sp, #272	; 0x110
   13414:	f7ff bb85 	b.w	12b22 <_vfiprintf_r+0x252>
   13418:	f109 0908 	add.w	r9, r9, #8
   1341c:	f10c 0101 	add.w	r1, ip, #1
   13420:	4660      	mov	r0, ip
   13422:	e4a0      	b.n	12d66 <_vfiprintf_r+0x496>
   13424:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   13428:	f040 8197 	bne.w	1375a <_vfiprintf_r+0xe8a>
   1342c:	f851 3b04 	ldr.w	r3, [r1], #4
   13430:	9107      	str	r1, [sp, #28]
   13432:	f7ff bbc0 	b.w	12bb6 <_vfiprintf_r+0x2e6>
   13436:	05b3      	lsls	r3, r6, #22
   13438:	f100 8188 	bmi.w	1374c <_vfiprintf_r+0xe7c>
   1343c:	f852 3b04 	ldr.w	r3, [r2], #4
   13440:	9207      	str	r2, [sp, #28]
   13442:	17da      	asrs	r2, r3, #31
   13444:	4611      	mov	r1, r2
   13446:	f7ff bb52 	b.w	12aee <_vfiprintf_r+0x21e>
   1344a:	9907      	ldr	r1, [sp, #28]
   1344c:	f851 3b04 	ldr.w	r3, [r1], #4
   13450:	9107      	str	r1, [sp, #28]
   13452:	2101      	movs	r1, #1
   13454:	f7ff bbb3 	b.w	12bbe <_vfiprintf_r+0x2ee>
   13458:	9b07      	ldr	r3, [sp, #28]
   1345a:	9805      	ldr	r0, [sp, #20]
   1345c:	f853 1b04 	ldr.w	r1, [r3], #4
   13460:	9307      	str	r3, [sp, #28]
   13462:	17c2      	asrs	r2, r0, #31
   13464:	e9c1 0200 	strd	r0, r2, [r1]
   13468:	f7ff ba7d 	b.w	12966 <_vfiprintf_r+0x96>
   1346c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1346e:	2b00      	cmp	r3, #0
   13470:	f43f ab26 	beq.w	12ac0 <_vfiprintf_r+0x1f0>
   13474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13476:	781b      	ldrb	r3, [r3, #0]
   13478:	2b00      	cmp	r3, #0
   1347a:	f43f ab21 	beq.w	12ac0 <_vfiprintf_r+0x1f0>
   1347e:	f898 1000 	ldrb.w	r1, [r8]
   13482:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   13486:	f7ff ba96 	b.w	129b6 <_vfiprintf_r+0xe6>
   1348a:	2302      	movs	r3, #2
   1348c:	aa11      	add	r2, sp, #68	; 0x44
   1348e:	931c      	str	r3, [sp, #112]	; 0x70
   13490:	921b      	str	r2, [sp, #108]	; 0x6c
   13492:	2001      	movs	r0, #1
   13494:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13498:	e6a2      	b.n	131e0 <_vfiprintf_r+0x910>
   1349a:	9603      	str	r6, [sp, #12]
   1349c:	e571      	b.n	12f82 <_vfiprintf_r+0x6b2>
   1349e:	4b3b      	ldr	r3, [pc, #236]	; (1358c <_vfiprintf_r+0xcbc>)
   134a0:	930c      	str	r3, [sp, #48]	; 0x30
   134a2:	f016 0220 	ands.w	r2, r6, #32
   134a6:	d059      	beq.n	1355c <_vfiprintf_r+0xc8c>
   134a8:	9b07      	ldr	r3, [sp, #28]
   134aa:	3307      	adds	r3, #7
   134ac:	f023 0307 	bic.w	r3, r3, #7
   134b0:	4618      	mov	r0, r3
   134b2:	685a      	ldr	r2, [r3, #4]
   134b4:	f850 3b08 	ldr.w	r3, [r0], #8
   134b8:	9007      	str	r0, [sp, #28]
   134ba:	07f4      	lsls	r4, r6, #31
   134bc:	d509      	bpl.n	134d2 <_vfiprintf_r+0xc02>
   134be:	ea53 0002 	orrs.w	r0, r3, r2
   134c2:	d006      	beq.n	134d2 <_vfiprintf_r+0xc02>
   134c4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   134c8:	2130      	movs	r1, #48	; 0x30
   134ca:	f046 0602 	orr.w	r6, r6, #2
   134ce:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   134d2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   134d6:	9103      	str	r1, [sp, #12]
   134d8:	2102      	movs	r1, #2
   134da:	f7ff bb70 	b.w	12bbe <_vfiprintf_r+0x2ee>
   134de:	4b2c      	ldr	r3, [pc, #176]	; (13590 <_vfiprintf_r+0xcc0>)
   134e0:	930c      	str	r3, [sp, #48]	; 0x30
   134e2:	e7de      	b.n	134a2 <_vfiprintf_r+0xbd2>
   134e4:	9b07      	ldr	r3, [sp, #28]
   134e6:	2101      	movs	r1, #1
   134e8:	f853 2b04 	ldr.w	r2, [r3], #4
   134ec:	9103      	str	r1, [sp, #12]
   134ee:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   134f2:	9307      	str	r3, [sp, #28]
   134f4:	9104      	str	r1, [sp, #16]
   134f6:	ac2b      	add	r4, sp, #172	; 0xac
   134f8:	e4df      	b.n	12eba <_vfiprintf_r+0x5ea>
   134fa:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   134fe:	2a00      	cmp	r2, #0
   13500:	f040 8132 	bne.w	13768 <_vfiprintf_r+0xe98>
   13504:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13506:	2a00      	cmp	r2, #0
   13508:	f47f ae62 	bne.w	131d0 <_vfiprintf_r+0x900>
   1350c:	4618      	mov	r0, r3
   1350e:	2101      	movs	r1, #1
   13510:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13514:	e427      	b.n	12d66 <_vfiprintf_r+0x496>
   13516:	2100      	movs	r1, #0
   13518:	2208      	movs	r2, #8
   1351a:	a816      	add	r0, sp, #88	; 0x58
   1351c:	9413      	str	r4, [sp, #76]	; 0x4c
   1351e:	f7f8 faad 	bl	ba7c <memset>
   13522:	1c79      	adds	r1, r7, #1
   13524:	f000 80bc 	beq.w	136a0 <_vfiprintf_r+0xdd0>
   13528:	2500      	movs	r5, #0
   1352a:	9407      	str	r4, [sp, #28]
   1352c:	462c      	mov	r4, r5
   1352e:	e00c      	b.n	1354a <_vfiprintf_r+0xc7a>
   13530:	a92b      	add	r1, sp, #172	; 0xac
   13532:	4658      	mov	r0, fp
   13534:	f7fe ff2e 	bl	12394 <_wcrtomb_r>
   13538:	1c42      	adds	r2, r0, #1
   1353a:	4420      	add	r0, r4
   1353c:	f000 816b 	beq.w	13816 <_vfiprintf_r+0xf46>
   13540:	42b8      	cmp	r0, r7
   13542:	dc08      	bgt.n	13556 <_vfiprintf_r+0xc86>
   13544:	f000 8170 	beq.w	13828 <_vfiprintf_r+0xf58>
   13548:	4604      	mov	r4, r0
   1354a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1354c:	5952      	ldr	r2, [r2, r5]
   1354e:	ab16      	add	r3, sp, #88	; 0x58
   13550:	3504      	adds	r5, #4
   13552:	2a00      	cmp	r2, #0
   13554:	d1ec      	bne.n	13530 <_vfiprintf_r+0xc60>
   13556:	9404      	str	r4, [sp, #16]
   13558:	9c07      	ldr	r4, [sp, #28]
   1355a:	e0af      	b.n	136bc <_vfiprintf_r+0xdec>
   1355c:	f016 0310 	ands.w	r3, r6, #16
   13560:	9807      	ldr	r0, [sp, #28]
   13562:	d10c      	bne.n	1357e <_vfiprintf_r+0xcae>
   13564:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   13568:	d005      	beq.n	13576 <_vfiprintf_r+0xca6>
   1356a:	461a      	mov	r2, r3
   1356c:	f850 3b04 	ldr.w	r3, [r0], #4
   13570:	9007      	str	r0, [sp, #28]
   13572:	b29b      	uxth	r3, r3
   13574:	e7a1      	b.n	134ba <_vfiprintf_r+0xbea>
   13576:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1357a:	f040 80e1 	bne.w	13740 <_vfiprintf_r+0xe70>
   1357e:	f850 3b04 	ldr.w	r3, [r0], #4
   13582:	9007      	str	r0, [sp, #28]
   13584:	e799      	b.n	134ba <_vfiprintf_r+0xbea>
   13586:	bf00      	nop
   13588:	200026fc 	.word	0x200026fc
   1358c:	20000c40 	.word	0x20000c40
   13590:	20000c54 	.word	0x20000c54
   13594:	9903      	ldr	r1, [sp, #12]
   13596:	9704      	str	r7, [sp, #16]
   13598:	ac44      	add	r4, sp, #272	; 0x110
   1359a:	469e      	mov	lr, r3
   1359c:	ee08 ba90 	vmov	s17, fp
   135a0:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   135a4:	f04f 0c00 	mov.w	ip, #0
   135a8:	4623      	mov	r3, r4
   135aa:	e006      	b.n	135ba <_vfiprintf_r+0xcea>
   135ac:	f1be 0f0a 	cmp.w	lr, #10
   135b0:	f172 0200 	sbcs.w	r2, r2, #0
   135b4:	d339      	bcc.n	1362a <_vfiprintf_r+0xd5a>
   135b6:	46a6      	mov	lr, r4
   135b8:	462a      	mov	r2, r5
   135ba:	49a6      	ldr	r1, [pc, #664]	; (13854 <_vfiprintf_r+0xf84>)
   135bc:	eb1e 0002 	adds.w	r0, lr, r2
   135c0:	f140 0000 	adc.w	r0, r0, #0
   135c4:	460f      	mov	r7, r1
   135c6:	fba1 1400 	umull	r1, r4, r1, r0
   135ca:	f024 0103 	bic.w	r1, r4, #3
   135ce:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   135d2:	1a40      	subs	r0, r0, r1
   135d4:	ebbe 0100 	subs.w	r1, lr, r0
   135d8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   135dc:	f162 0400 	sbc.w	r4, r2, #0
   135e0:	fb05 f501 	mul.w	r5, r5, r1
   135e4:	fb07 5504 	mla	r5, r7, r4, r5
   135e8:	fba1 4107 	umull	r4, r1, r1, r7
   135ec:	440d      	add	r5, r1
   135ee:	2705      	movs	r7, #5
   135f0:	f004 0101 	and.w	r1, r4, #1
   135f4:	fba1 1b07 	umull	r1, fp, r1, r7
   135f8:	1809      	adds	r1, r1, r0
   135fa:	0864      	lsrs	r4, r4, #1
   135fc:	3130      	adds	r1, #48	; 0x30
   135fe:	f803 1c01 	strb.w	r1, [r3, #-1]
   13602:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   13606:	f10c 0c01 	add.w	ip, ip, #1
   1360a:	3b01      	subs	r3, #1
   1360c:	086d      	lsrs	r5, r5, #1
   1360e:	2e00      	cmp	r6, #0
   13610:	d0cc      	beq.n	135ac <_vfiprintf_r+0xcdc>
   13612:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13614:	7809      	ldrb	r1, [r1, #0]
   13616:	4561      	cmp	r1, ip
   13618:	d1c8      	bne.n	135ac <_vfiprintf_r+0xcdc>
   1361a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1361e:	d0c5      	beq.n	135ac <_vfiprintf_r+0xcdc>
   13620:	f1be 0f0a 	cmp.w	lr, #10
   13624:	f172 0200 	sbcs.w	r2, r2, #0
   13628:	d26c      	bcs.n	13704 <_vfiprintf_r+0xe34>
   1362a:	461c      	mov	r4, r3
   1362c:	ab44      	add	r3, sp, #272	; 0x110
   1362e:	1b1b      	subs	r3, r3, r4
   13630:	9f04      	ldr	r7, [sp, #16]
   13632:	9e03      	ldr	r6, [sp, #12]
   13634:	9304      	str	r3, [sp, #16]
   13636:	ee18 ba90 	vmov	fp, s17
   1363a:	f7ff ba72 	b.w	12b22 <_vfiprintf_r+0x252>
   1363e:	9603      	str	r6, [sp, #12]
   13640:	f7ff ba62 	b.w	12b08 <_vfiprintf_r+0x238>
   13644:	4658      	mov	r0, fp
   13646:	f7f8 f825 	bl	b694 <__sinit>
   1364a:	f7ff b95b 	b.w	12904 <_vfiprintf_r+0x34>
   1364e:	2901      	cmp	r1, #1
   13650:	9603      	str	r6, [sp, #12]
   13652:	f47f accd 	bne.w	12ff0 <_vfiprintf_r+0x720>
   13656:	f7ff ba5c 	b.w	12b12 <_vfiprintf_r+0x242>
   1365a:	9b07      	ldr	r3, [sp, #28]
   1365c:	9905      	ldr	r1, [sp, #20]
   1365e:	f853 2b04 	ldr.w	r2, [r3], #4
   13662:	6011      	str	r1, [r2, #0]
   13664:	9307      	str	r3, [sp, #28]
   13666:	f7ff b97e 	b.w	12966 <_vfiprintf_r+0x96>
   1366a:	2f06      	cmp	r7, #6
   1366c:	463b      	mov	r3, r7
   1366e:	9a03      	ldr	r2, [sp, #12]
   13670:	4c79      	ldr	r4, [pc, #484]	; (13858 <_vfiprintf_r+0xf88>)
   13672:	9207      	str	r2, [sp, #28]
   13674:	bf28      	it	cs
   13676:	2306      	movcs	r3, #6
   13678:	9304      	str	r3, [sp, #16]
   1367a:	9303      	str	r3, [sp, #12]
   1367c:	f7ff bb25 	b.w	12cca <_vfiprintf_r+0x3fa>
   13680:	9b03      	ldr	r3, [sp, #12]
   13682:	9907      	ldr	r1, [sp, #28]
   13684:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   13688:	bf14      	ite	ne
   1368a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1368e:	f851 3b04 	ldreq.w	r3, [r1], #4
   13692:	9107      	str	r1, [sp, #28]
   13694:	bf1c      	itt	ne
   13696:	4602      	movne	r2, r0
   13698:	b2db      	uxtbne	r3, r3
   1369a:	2101      	movs	r1, #1
   1369c:	f7ff ba8f 	b.w	12bbe <_vfiprintf_r+0x2ee>
   136a0:	ab16      	add	r3, sp, #88	; 0x58
   136a2:	9300      	str	r3, [sp, #0]
   136a4:	2300      	movs	r3, #0
   136a6:	4619      	mov	r1, r3
   136a8:	aa13      	add	r2, sp, #76	; 0x4c
   136aa:	4658      	mov	r0, fp
   136ac:	f7fe fe98 	bl	123e0 <_wcsrtombs_r>
   136b0:	4603      	mov	r3, r0
   136b2:	3301      	adds	r3, #1
   136b4:	9004      	str	r0, [sp, #16]
   136b6:	f000 80ae 	beq.w	13816 <_vfiprintf_r+0xf46>
   136ba:	9413      	str	r4, [sp, #76]	; 0x4c
   136bc:	9b04      	ldr	r3, [sp, #16]
   136be:	2b00      	cmp	r3, #0
   136c0:	d030      	beq.n	13724 <_vfiprintf_r+0xe54>
   136c2:	2b63      	cmp	r3, #99	; 0x63
   136c4:	dc63      	bgt.n	1378e <_vfiprintf_r+0xebe>
   136c6:	2300      	movs	r3, #0
   136c8:	9308      	str	r3, [sp, #32]
   136ca:	ac2b      	add	r4, sp, #172	; 0xac
   136cc:	2208      	movs	r2, #8
   136ce:	2100      	movs	r1, #0
   136d0:	a816      	add	r0, sp, #88	; 0x58
   136d2:	f7f8 f9d3 	bl	ba7c <memset>
   136d6:	9d04      	ldr	r5, [sp, #16]
   136d8:	ab16      	add	r3, sp, #88	; 0x58
   136da:	9300      	str	r3, [sp, #0]
   136dc:	aa13      	add	r2, sp, #76	; 0x4c
   136de:	462b      	mov	r3, r5
   136e0:	4621      	mov	r1, r4
   136e2:	4658      	mov	r0, fp
   136e4:	f7fe fe7c 	bl	123e0 <_wcsrtombs_r>
   136e8:	4285      	cmp	r5, r0
   136ea:	f040 80ab 	bne.w	13844 <_vfiprintf_r+0xf74>
   136ee:	9b03      	ldr	r3, [sp, #12]
   136f0:	9a04      	ldr	r2, [sp, #16]
   136f2:	9307      	str	r3, [sp, #28]
   136f4:	2300      	movs	r3, #0
   136f6:	54a3      	strb	r3, [r4, r2]
   136f8:	461f      	mov	r7, r3
   136fa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   136fe:	9303      	str	r3, [sp, #12]
   13700:	f7ff ba16 	b.w	12b30 <_vfiprintf_r+0x260>
   13704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13706:	990d      	ldr	r1, [sp, #52]	; 0x34
   13708:	1a9b      	subs	r3, r3, r2
   1370a:	4618      	mov	r0, r3
   1370c:	9308      	str	r3, [sp, #32]
   1370e:	f7f8 fa4d 	bl	bbac <strncpy>
   13712:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13714:	9b08      	ldr	r3, [sp, #32]
   13716:	784a      	ldrb	r2, [r1, #1]
   13718:	b10a      	cbz	r2, 1371e <_vfiprintf_r+0xe4e>
   1371a:	3101      	adds	r1, #1
   1371c:	910b      	str	r1, [sp, #44]	; 0x2c
   1371e:	f04f 0c00 	mov.w	ip, #0
   13722:	e748      	b.n	135b6 <_vfiprintf_r+0xce6>
   13724:	9b03      	ldr	r3, [sp, #12]
   13726:	9307      	str	r3, [sp, #28]
   13728:	9b04      	ldr	r3, [sp, #16]
   1372a:	9303      	str	r3, [sp, #12]
   1372c:	461f      	mov	r7, r3
   1372e:	9308      	str	r3, [sp, #32]
   13730:	f7ff b9fe 	b.w	12b30 <_vfiprintf_r+0x260>
   13734:	2101      	movs	r1, #1
   13736:	4618      	mov	r0, r3
   13738:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1373c:	f7ff bb13 	b.w	12d66 <_vfiprintf_r+0x496>
   13740:	f850 3b04 	ldr.w	r3, [r0], #4
   13744:	9007      	str	r0, [sp, #28]
   13746:	4622      	mov	r2, r4
   13748:	b2db      	uxtb	r3, r3
   1374a:	e6b6      	b.n	134ba <_vfiprintf_r+0xbea>
   1374c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   13750:	9207      	str	r2, [sp, #28]
   13752:	17da      	asrs	r2, r3, #31
   13754:	4611      	mov	r1, r2
   13756:	f7ff b9ca 	b.w	12aee <_vfiprintf_r+0x21e>
   1375a:	f851 3b04 	ldr.w	r3, [r1], #4
   1375e:	9107      	str	r1, [sp, #28]
   13760:	4602      	mov	r2, r0
   13762:	b2db      	uxtb	r3, r3
   13764:	f7ff ba27 	b.w	12bb6 <_vfiprintf_r+0x2e6>
   13768:	2301      	movs	r3, #1
   1376a:	931c      	str	r3, [sp, #112]	; 0x70
   1376c:	2101      	movs	r1, #1
   1376e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   13772:	931b      	str	r3, [sp, #108]	; 0x6c
   13774:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13778:	460b      	mov	r3, r1
   1377a:	f7ff bacd 	b.w	12d18 <_vfiprintf_r+0x448>
   1377e:	9b07      	ldr	r3, [sp, #28]
   13780:	9905      	ldr	r1, [sp, #20]
   13782:	f853 2b04 	ldr.w	r2, [r3], #4
   13786:	9307      	str	r3, [sp, #28]
   13788:	8011      	strh	r1, [r2, #0]
   1378a:	f7ff b8ec 	b.w	12966 <_vfiprintf_r+0x96>
   1378e:	1c59      	adds	r1, r3, #1
   13790:	4658      	mov	r0, fp
   13792:	f7f6 fa4b 	bl	9c2c <_malloc_r>
   13796:	4604      	mov	r4, r0
   13798:	2800      	cmp	r0, #0
   1379a:	d03c      	beq.n	13816 <_vfiprintf_r+0xf46>
   1379c:	9008      	str	r0, [sp, #32]
   1379e:	e795      	b.n	136cc <_vfiprintf_r+0xdfc>
   137a0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   137a2:	f7f8 fad1 	bl	bd48 <__retarget_lock_release_recursive>
   137a6:	f7ff b9e9 	b.w	12b7c <_vfiprintf_r+0x2ac>
   137aa:	9b03      	ldr	r3, [sp, #12]
   137ac:	9307      	str	r3, [sp, #28]
   137ae:	e9cd 7703 	strd	r7, r7, [sp, #12]
   137b2:	9f08      	ldr	r7, [sp, #32]
   137b4:	f7ff b9bc 	b.w	12b30 <_vfiprintf_r+0x260>
   137b8:	9819      	ldr	r0, [sp, #100]	; 0x64
   137ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   137bc:	3001      	adds	r0, #1
   137be:	e545      	b.n	1324c <_vfiprintf_r+0x97c>
   137c0:	9b03      	ldr	r3, [sp, #12]
   137c2:	9307      	str	r3, [sp, #28]
   137c4:	4620      	mov	r0, r4
   137c6:	f7f8 fcfb 	bl	c1c0 <strlen>
   137ca:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   137ce:	462f      	mov	r7, r5
   137d0:	9004      	str	r0, [sp, #16]
   137d2:	9303      	str	r3, [sp, #12]
   137d4:	9508      	str	r5, [sp, #32]
   137d6:	f7ff b9ab 	b.w	12b30 <_vfiprintf_r+0x260>
   137da:	ee18 1a10 	vmov	r1, s16
   137de:	aa18      	add	r2, sp, #96	; 0x60
   137e0:	4658      	mov	r0, fp
   137e2:	f7ff f839 	bl	12858 <__sprint_r.part.0>
   137e6:	2800      	cmp	r0, #0
   137e8:	f43f aa36 	beq.w	12c58 <_vfiprintf_r+0x388>
   137ec:	f7ff ba4d 	b.w	12c8a <_vfiprintf_r+0x3ba>
   137f0:	9819      	ldr	r0, [sp, #100]	; 0x64
   137f2:	3001      	adds	r0, #1
   137f4:	e57a      	b.n	132ec <_vfiprintf_r+0xa1c>
   137f6:	468c      	mov	ip, r1
   137f8:	e46e      	b.n	130d8 <_vfiprintf_r+0x808>
   137fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   137fc:	07d9      	lsls	r1, r3, #31
   137fe:	d405      	bmi.n	1380c <_vfiprintf_r+0xf3c>
   13800:	89ab      	ldrh	r3, [r5, #12]
   13802:	059a      	lsls	r2, r3, #22
   13804:	d402      	bmi.n	1380c <_vfiprintf_r+0xf3c>
   13806:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13808:	f7f8 fa9e 	bl	bd48 <__retarget_lock_release_recursive>
   1380c:	f04f 33ff 	mov.w	r3, #4294967295
   13810:	9305      	str	r3, [sp, #20]
   13812:	f7ff ba49 	b.w	12ca8 <_vfiprintf_r+0x3d8>
   13816:	ee18 2a10 	vmov	r2, s16
   1381a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1381e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13822:	8193      	strh	r3, [r2, #12]
   13824:	f7ff ba35 	b.w	12c92 <_vfiprintf_r+0x3c2>
   13828:	9c07      	ldr	r4, [sp, #28]
   1382a:	9704      	str	r7, [sp, #16]
   1382c:	e746      	b.n	136bc <_vfiprintf_r+0xdec>
   1382e:	9b07      	ldr	r3, [sp, #28]
   13830:	f898 1001 	ldrb.w	r1, [r8, #1]
   13834:	f853 7b04 	ldr.w	r7, [r3], #4
   13838:	9307      	str	r3, [sp, #28]
   1383a:	4690      	mov	r8, r2
   1383c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   13840:	f7ff b8b9 	b.w	129b6 <_vfiprintf_r+0xe6>
   13844:	ee18 2a10 	vmov	r2, s16
   13848:	8993      	ldrh	r3, [r2, #12]
   1384a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1384e:	8193      	strh	r3, [r2, #12]
   13850:	f7ff ba15 	b.w	12c7e <_vfiprintf_r+0x3ae>
   13854:	cccccccd 	.word	0xcccccccd
   13858:	20000c68 	.word	0x20000c68

0001385c <__sbprintf>:
   1385c:	b570      	push	{r4, r5, r6, lr}
   1385e:	460c      	mov	r4, r1
   13860:	8989      	ldrh	r1, [r1, #12]
   13862:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   13866:	f021 0102 	bic.w	r1, r1, #2
   1386a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1386e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   13870:	911b      	str	r1, [sp, #108]	; 0x6c
   13872:	89e1      	ldrh	r1, [r4, #14]
   13874:	f8ad 1016 	strh.w	r1, [sp, #22]
   13878:	69e1      	ldr	r1, [r4, #28]
   1387a:	9109      	str	r1, [sp, #36]	; 0x24
   1387c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1387e:	910b      	str	r1, [sp, #44]	; 0x2c
   13880:	a91c      	add	r1, sp, #112	; 0x70
   13882:	9102      	str	r1, [sp, #8]
   13884:	9106      	str	r1, [sp, #24]
   13886:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1388a:	4606      	mov	r6, r0
   1388c:	9104      	str	r1, [sp, #16]
   1388e:	9107      	str	r1, [sp, #28]
   13890:	a818      	add	r0, sp, #96	; 0x60
   13892:	2100      	movs	r1, #0
   13894:	e9cd 3200 	strd	r3, r2, [sp]
   13898:	9108      	str	r1, [sp, #32]
   1389a:	f7f8 fa4f 	bl	bd3c <__retarget_lock_init_recursive>
   1389e:	e9dd 3200 	ldrd	r3, r2, [sp]
   138a2:	a902      	add	r1, sp, #8
   138a4:	4630      	mov	r0, r6
   138a6:	f7ff f813 	bl	128d0 <_vfiprintf_r>
   138aa:	1e05      	subs	r5, r0, #0
   138ac:	db07      	blt.n	138be <__sbprintf+0x62>
   138ae:	a902      	add	r1, sp, #8
   138b0:	4630      	mov	r0, r6
   138b2:	f7fd fad3 	bl	10e5c <_fflush_r>
   138b6:	2800      	cmp	r0, #0
   138b8:	bf18      	it	ne
   138ba:	f04f 35ff 	movne.w	r5, #4294967295
   138be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   138c2:	065b      	lsls	r3, r3, #25
   138c4:	d503      	bpl.n	138ce <__sbprintf+0x72>
   138c6:	89a3      	ldrh	r3, [r4, #12]
   138c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   138cc:	81a3      	strh	r3, [r4, #12]
   138ce:	9818      	ldr	r0, [sp, #96]	; 0x60
   138d0:	f7f8 fa36 	bl	bd40 <__retarget_lock_close_recursive>
   138d4:	4628      	mov	r0, r5
   138d6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   138da:	bd70      	pop	{r4, r5, r6, pc}

000138dc <__sfvwrite_r>:
   138dc:	6893      	ldr	r3, [r2, #8]
   138de:	2b00      	cmp	r3, #0
   138e0:	f000 8085 	beq.w	139ee <__sfvwrite_r+0x112>
   138e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138e8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   138ec:	460c      	mov	r4, r1
   138ee:	0719      	lsls	r1, r3, #28
   138f0:	4680      	mov	r8, r0
   138f2:	b083      	sub	sp, #12
   138f4:	4617      	mov	r7, r2
   138f6:	b298      	uxth	r0, r3
   138f8:	d525      	bpl.n	13946 <__sfvwrite_r+0x6a>
   138fa:	6923      	ldr	r3, [r4, #16]
   138fc:	b31b      	cbz	r3, 13946 <__sfvwrite_r+0x6a>
   138fe:	f010 0302 	ands.w	r3, r0, #2
   13902:	683d      	ldr	r5, [r7, #0]
   13904:	d02d      	beq.n	13962 <__sfvwrite_r+0x86>
   13906:	f04f 0a00 	mov.w	sl, #0
   1390a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 13bcc <__sfvwrite_r+0x2f0>
   1390e:	4656      	mov	r6, sl
   13910:	46b9      	mov	r9, r7
   13912:	455e      	cmp	r6, fp
   13914:	4633      	mov	r3, r6
   13916:	4652      	mov	r2, sl
   13918:	bf28      	it	cs
   1391a:	465b      	movcs	r3, fp
   1391c:	4640      	mov	r0, r8
   1391e:	2e00      	cmp	r6, #0
   13920:	d052      	beq.n	139c8 <__sfvwrite_r+0xec>
   13922:	69e1      	ldr	r1, [r4, #28]
   13924:	6a67      	ldr	r7, [r4, #36]	; 0x24
   13926:	47b8      	blx	r7
   13928:	2800      	cmp	r0, #0
   1392a:	dd56      	ble.n	139da <__sfvwrite_r+0xfe>
   1392c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   13930:	1a1b      	subs	r3, r3, r0
   13932:	4482      	add	sl, r0
   13934:	1a36      	subs	r6, r6, r0
   13936:	f8c9 3008 	str.w	r3, [r9, #8]
   1393a:	2b00      	cmp	r3, #0
   1393c:	d1e9      	bne.n	13912 <__sfvwrite_r+0x36>
   1393e:	2000      	movs	r0, #0
   13940:	b003      	add	sp, #12
   13942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13946:	4621      	mov	r1, r4
   13948:	4640      	mov	r0, r8
   1394a:	f000 f97d 	bl	13c48 <__swsetup_r>
   1394e:	2800      	cmp	r0, #0
   13950:	f040 8138 	bne.w	13bc4 <__sfvwrite_r+0x2e8>
   13954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13958:	683d      	ldr	r5, [r7, #0]
   1395a:	b298      	uxth	r0, r3
   1395c:	f010 0302 	ands.w	r3, r0, #2
   13960:	d1d1      	bne.n	13906 <__sfvwrite_r+0x2a>
   13962:	f010 0901 	ands.w	r9, r0, #1
   13966:	d144      	bne.n	139f2 <__sfvwrite_r+0x116>
   13968:	464e      	mov	r6, r9
   1396a:	9700      	str	r7, [sp, #0]
   1396c:	b346      	cbz	r6, 139c0 <__sfvwrite_r+0xe4>
   1396e:	0582      	lsls	r2, r0, #22
   13970:	f8d4 b008 	ldr.w	fp, [r4, #8]
   13974:	f140 8085 	bpl.w	13a82 <__sfvwrite_r+0x1a6>
   13978:	45b3      	cmp	fp, r6
   1397a:	465a      	mov	r2, fp
   1397c:	f200 80b4 	bhi.w	13ae8 <__sfvwrite_r+0x20c>
   13980:	f410 6f90 	tst.w	r0, #1152	; 0x480
   13984:	f040 80c1 	bne.w	13b0a <__sfvwrite_r+0x22e>
   13988:	6820      	ldr	r0, [r4, #0]
   1398a:	9201      	str	r2, [sp, #4]
   1398c:	4649      	mov	r1, r9
   1398e:	f7f7 fff9 	bl	b984 <memmove>
   13992:	68a3      	ldr	r3, [r4, #8]
   13994:	9a01      	ldr	r2, [sp, #4]
   13996:	eba3 010b 	sub.w	r1, r3, fp
   1399a:	6823      	ldr	r3, [r4, #0]
   1399c:	60a1      	str	r1, [r4, #8]
   1399e:	4413      	add	r3, r2
   139a0:	46b2      	mov	sl, r6
   139a2:	6023      	str	r3, [r4, #0]
   139a4:	2600      	movs	r6, #0
   139a6:	9a00      	ldr	r2, [sp, #0]
   139a8:	6893      	ldr	r3, [r2, #8]
   139aa:	eba3 030a 	sub.w	r3, r3, sl
   139ae:	44d1      	add	r9, sl
   139b0:	6093      	str	r3, [r2, #8]
   139b2:	2b00      	cmp	r3, #0
   139b4:	d0c3      	beq.n	1393e <__sfvwrite_r+0x62>
   139b6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   139ba:	b280      	uxth	r0, r0
   139bc:	2e00      	cmp	r6, #0
   139be:	d1d6      	bne.n	1396e <__sfvwrite_r+0x92>
   139c0:	e9d5 9600 	ldrd	r9, r6, [r5]
   139c4:	3508      	adds	r5, #8
   139c6:	e7d1      	b.n	1396c <__sfvwrite_r+0x90>
   139c8:	e9d5 a600 	ldrd	sl, r6, [r5]
   139cc:	3508      	adds	r5, #8
   139ce:	e7a0      	b.n	13912 <__sfvwrite_r+0x36>
   139d0:	4621      	mov	r1, r4
   139d2:	4640      	mov	r0, r8
   139d4:	f7fd fa42 	bl	10e5c <_fflush_r>
   139d8:	b388      	cbz	r0, 13a3e <__sfvwrite_r+0x162>
   139da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   139de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   139e2:	f04f 30ff 	mov.w	r0, #4294967295
   139e6:	81a3      	strh	r3, [r4, #12]
   139e8:	b003      	add	sp, #12
   139ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139ee:	2000      	movs	r0, #0
   139f0:	4770      	bx	lr
   139f2:	461e      	mov	r6, r3
   139f4:	46ba      	mov	sl, r7
   139f6:	4699      	mov	r9, r3
   139f8:	4618      	mov	r0, r3
   139fa:	9500      	str	r5, [sp, #0]
   139fc:	461f      	mov	r7, r3
   139fe:	b366      	cbz	r6, 13a5a <__sfvwrite_r+0x17e>
   13a00:	2800      	cmp	r0, #0
   13a02:	d032      	beq.n	13a6a <__sfvwrite_r+0x18e>
   13a04:	464a      	mov	r2, r9
   13a06:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   13a0a:	6820      	ldr	r0, [r4, #0]
   13a0c:	68a5      	ldr	r5, [r4, #8]
   13a0e:	42b2      	cmp	r2, r6
   13a10:	bf28      	it	cs
   13a12:	4632      	movcs	r2, r6
   13a14:	4288      	cmp	r0, r1
   13a16:	d904      	bls.n	13a22 <__sfvwrite_r+0x146>
   13a18:	eb05 0b03 	add.w	fp, r5, r3
   13a1c:	455a      	cmp	r2, fp
   13a1e:	f300 80a7 	bgt.w	13b70 <__sfvwrite_r+0x294>
   13a22:	4293      	cmp	r3, r2
   13a24:	dc64      	bgt.n	13af0 <__sfvwrite_r+0x214>
   13a26:	69e1      	ldr	r1, [r4, #28]
   13a28:	6a65      	ldr	r5, [r4, #36]	; 0x24
   13a2a:	463a      	mov	r2, r7
   13a2c:	4640      	mov	r0, r8
   13a2e:	47a8      	blx	r5
   13a30:	f1b0 0b00 	subs.w	fp, r0, #0
   13a34:	ddd1      	ble.n	139da <__sfvwrite_r+0xfe>
   13a36:	ebb9 090b 	subs.w	r9, r9, fp
   13a3a:	d0c9      	beq.n	139d0 <__sfvwrite_r+0xf4>
   13a3c:	2001      	movs	r0, #1
   13a3e:	f8da 3008 	ldr.w	r3, [sl, #8]
   13a42:	eba3 030b 	sub.w	r3, r3, fp
   13a46:	445f      	add	r7, fp
   13a48:	eba6 060b 	sub.w	r6, r6, fp
   13a4c:	f8ca 3008 	str.w	r3, [sl, #8]
   13a50:	2b00      	cmp	r3, #0
   13a52:	f43f af74 	beq.w	1393e <__sfvwrite_r+0x62>
   13a56:	2e00      	cmp	r6, #0
   13a58:	d1d2      	bne.n	13a00 <__sfvwrite_r+0x124>
   13a5a:	9a00      	ldr	r2, [sp, #0]
   13a5c:	6856      	ldr	r6, [r2, #4]
   13a5e:	4613      	mov	r3, r2
   13a60:	3208      	adds	r2, #8
   13a62:	9200      	str	r2, [sp, #0]
   13a64:	2e00      	cmp	r6, #0
   13a66:	d0f8      	beq.n	13a5a <__sfvwrite_r+0x17e>
   13a68:	681f      	ldr	r7, [r3, #0]
   13a6a:	4632      	mov	r2, r6
   13a6c:	210a      	movs	r1, #10
   13a6e:	4638      	mov	r0, r7
   13a70:	f7f8 fb46 	bl	c100 <memchr>
   13a74:	2800      	cmp	r0, #0
   13a76:	f000 809c 	beq.w	13bb2 <__sfvwrite_r+0x2d6>
   13a7a:	3001      	adds	r0, #1
   13a7c:	eba0 0907 	sub.w	r9, r0, r7
   13a80:	e7c0      	b.n	13a04 <__sfvwrite_r+0x128>
   13a82:	6820      	ldr	r0, [r4, #0]
   13a84:	6923      	ldr	r3, [r4, #16]
   13a86:	4298      	cmp	r0, r3
   13a88:	d816      	bhi.n	13ab8 <__sfvwrite_r+0x1dc>
   13a8a:	6962      	ldr	r2, [r4, #20]
   13a8c:	42b2      	cmp	r2, r6
   13a8e:	d813      	bhi.n	13ab8 <__sfvwrite_r+0x1dc>
   13a90:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13a94:	42b3      	cmp	r3, r6
   13a96:	bf28      	it	cs
   13a98:	4633      	movcs	r3, r6
   13a9a:	69e1      	ldr	r1, [r4, #28]
   13a9c:	fb93 f3f2 	sdiv	r3, r3, r2
   13aa0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   13aa2:	fb02 f303 	mul.w	r3, r2, r3
   13aa6:	4640      	mov	r0, r8
   13aa8:	464a      	mov	r2, r9
   13aaa:	47b8      	blx	r7
   13aac:	f1b0 0a00 	subs.w	sl, r0, #0
   13ab0:	dd93      	ble.n	139da <__sfvwrite_r+0xfe>
   13ab2:	eba6 060a 	sub.w	r6, r6, sl
   13ab6:	e776      	b.n	139a6 <__sfvwrite_r+0xca>
   13ab8:	45b3      	cmp	fp, r6
   13aba:	46da      	mov	sl, fp
   13abc:	bf28      	it	cs
   13abe:	46b2      	movcs	sl, r6
   13ac0:	4652      	mov	r2, sl
   13ac2:	4649      	mov	r1, r9
   13ac4:	f7f7 ff5e 	bl	b984 <memmove>
   13ac8:	68a3      	ldr	r3, [r4, #8]
   13aca:	6822      	ldr	r2, [r4, #0]
   13acc:	eba3 030a 	sub.w	r3, r3, sl
   13ad0:	4452      	add	r2, sl
   13ad2:	60a3      	str	r3, [r4, #8]
   13ad4:	6022      	str	r2, [r4, #0]
   13ad6:	2b00      	cmp	r3, #0
   13ad8:	d1eb      	bne.n	13ab2 <__sfvwrite_r+0x1d6>
   13ada:	4621      	mov	r1, r4
   13adc:	4640      	mov	r0, r8
   13ade:	f7fd f9bd 	bl	10e5c <_fflush_r>
   13ae2:	2800      	cmp	r0, #0
   13ae4:	d0e5      	beq.n	13ab2 <__sfvwrite_r+0x1d6>
   13ae6:	e778      	b.n	139da <__sfvwrite_r+0xfe>
   13ae8:	6820      	ldr	r0, [r4, #0]
   13aea:	46b3      	mov	fp, r6
   13aec:	4632      	mov	r2, r6
   13aee:	e74c      	b.n	1398a <__sfvwrite_r+0xae>
   13af0:	4639      	mov	r1, r7
   13af2:	9201      	str	r2, [sp, #4]
   13af4:	f7f7 ff46 	bl	b984 <memmove>
   13af8:	9a01      	ldr	r2, [sp, #4]
   13afa:	68a3      	ldr	r3, [r4, #8]
   13afc:	1a9b      	subs	r3, r3, r2
   13afe:	60a3      	str	r3, [r4, #8]
   13b00:	6823      	ldr	r3, [r4, #0]
   13b02:	4413      	add	r3, r2
   13b04:	6023      	str	r3, [r4, #0]
   13b06:	4693      	mov	fp, r2
   13b08:	e795      	b.n	13a36 <__sfvwrite_r+0x15a>
   13b0a:	6823      	ldr	r3, [r4, #0]
   13b0c:	6921      	ldr	r1, [r4, #16]
   13b0e:	eba3 0b01 	sub.w	fp, r3, r1
   13b12:	6963      	ldr	r3, [r4, #20]
   13b14:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   13b18:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   13b1c:	f10b 0301 	add.w	r3, fp, #1
   13b20:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   13b24:	4433      	add	r3, r6
   13b26:	4553      	cmp	r3, sl
   13b28:	4652      	mov	r2, sl
   13b2a:	bf84      	itt	hi
   13b2c:	469a      	movhi	sl, r3
   13b2e:	4652      	movhi	r2, sl
   13b30:	0543      	lsls	r3, r0, #21
   13b32:	d52c      	bpl.n	13b8e <__sfvwrite_r+0x2b2>
   13b34:	4611      	mov	r1, r2
   13b36:	4640      	mov	r0, r8
   13b38:	f7f6 f878 	bl	9c2c <_malloc_r>
   13b3c:	2800      	cmp	r0, #0
   13b3e:	d03b      	beq.n	13bb8 <__sfvwrite_r+0x2dc>
   13b40:	465a      	mov	r2, fp
   13b42:	6921      	ldr	r1, [r4, #16]
   13b44:	9001      	str	r0, [sp, #4]
   13b46:	f7f4 facd 	bl	80e4 <memcpy>
   13b4a:	89a2      	ldrh	r2, [r4, #12]
   13b4c:	9b01      	ldr	r3, [sp, #4]
   13b4e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   13b52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13b56:	81a2      	strh	r2, [r4, #12]
   13b58:	eb03 000b 	add.w	r0, r3, fp
   13b5c:	6123      	str	r3, [r4, #16]
   13b5e:	ebaa 030b 	sub.w	r3, sl, fp
   13b62:	f8c4 a014 	str.w	sl, [r4, #20]
   13b66:	60a3      	str	r3, [r4, #8]
   13b68:	6020      	str	r0, [r4, #0]
   13b6a:	46b3      	mov	fp, r6
   13b6c:	4632      	mov	r2, r6
   13b6e:	e70c      	b.n	1398a <__sfvwrite_r+0xae>
   13b70:	4639      	mov	r1, r7
   13b72:	465a      	mov	r2, fp
   13b74:	f7f7 ff06 	bl	b984 <memmove>
   13b78:	6823      	ldr	r3, [r4, #0]
   13b7a:	445b      	add	r3, fp
   13b7c:	6023      	str	r3, [r4, #0]
   13b7e:	4621      	mov	r1, r4
   13b80:	4640      	mov	r0, r8
   13b82:	f7fd f96b 	bl	10e5c <_fflush_r>
   13b86:	2800      	cmp	r0, #0
   13b88:	f43f af55 	beq.w	13a36 <__sfvwrite_r+0x15a>
   13b8c:	e725      	b.n	139da <__sfvwrite_r+0xfe>
   13b8e:	4640      	mov	r0, r8
   13b90:	f7f6 fb14 	bl	a1bc <_realloc_r>
   13b94:	4603      	mov	r3, r0
   13b96:	2800      	cmp	r0, #0
   13b98:	d1de      	bne.n	13b58 <__sfvwrite_r+0x27c>
   13b9a:	6921      	ldr	r1, [r4, #16]
   13b9c:	4640      	mov	r0, r8
   13b9e:	f7f8 fc21 	bl	c3e4 <_free_r>
   13ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13ba6:	220c      	movs	r2, #12
   13ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13bac:	f8c8 2000 	str.w	r2, [r8]
   13bb0:	e715      	b.n	139de <__sfvwrite_r+0x102>
   13bb2:	1c72      	adds	r2, r6, #1
   13bb4:	4691      	mov	r9, r2
   13bb6:	e726      	b.n	13a06 <__sfvwrite_r+0x12a>
   13bb8:	220c      	movs	r2, #12
   13bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13bbe:	f8c8 2000 	str.w	r2, [r8]
   13bc2:	e70c      	b.n	139de <__sfvwrite_r+0x102>
   13bc4:	f04f 30ff 	mov.w	r0, #4294967295
   13bc8:	e6ba      	b.n	13940 <__sfvwrite_r+0x64>
   13bca:	bf00      	nop
   13bcc:	7ffffc00 	.word	0x7ffffc00

00013bd0 <__submore>:
   13bd0:	f101 0340 	add.w	r3, r1, #64	; 0x40
   13bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13bd8:	460c      	mov	r4, r1
   13bda:	6b09      	ldr	r1, [r1, #48]	; 0x30
   13bdc:	4299      	cmp	r1, r3
   13bde:	d014      	beq.n	13c0a <__submore+0x3a>
   13be0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   13be2:	0077      	lsls	r7, r6, #1
   13be4:	463a      	mov	r2, r7
   13be6:	f7f6 fae9 	bl	a1bc <_realloc_r>
   13bea:	4605      	mov	r5, r0
   13bec:	b340      	cbz	r0, 13c40 <__submore+0x70>
   13bee:	eb00 0806 	add.w	r8, r0, r6
   13bf2:	4601      	mov	r1, r0
   13bf4:	4632      	mov	r2, r6
   13bf6:	4640      	mov	r0, r8
   13bf8:	f7f4 fa74 	bl	80e4 <memcpy>
   13bfc:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   13c00:	f8c4 8000 	str.w	r8, [r4]
   13c04:	2000      	movs	r0, #0
   13c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13c0e:	f7f6 f80d 	bl	9c2c <_malloc_r>
   13c12:	b1a8      	cbz	r0, 13c40 <__submore+0x70>
   13c14:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   13c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13c1c:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   13c20:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   13c24:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   13c28:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   13c2c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   13c30:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   13c34:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   13c38:	6023      	str	r3, [r4, #0]
   13c3a:	2000      	movs	r0, #0
   13c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c40:	f04f 30ff 	mov.w	r0, #4294967295
   13c44:	e7df      	b.n	13c06 <__submore+0x36>
   13c46:	bf00      	nop

00013c48 <__swsetup_r>:
   13c48:	b538      	push	{r3, r4, r5, lr}
   13c4a:	4b31      	ldr	r3, [pc, #196]	; (13d10 <__swsetup_r+0xc8>)
   13c4c:	681b      	ldr	r3, [r3, #0]
   13c4e:	4605      	mov	r5, r0
   13c50:	460c      	mov	r4, r1
   13c52:	b113      	cbz	r3, 13c5a <__swsetup_r+0x12>
   13c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13c56:	2a00      	cmp	r2, #0
   13c58:	d04e      	beq.n	13cf8 <__swsetup_r+0xb0>
   13c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c5e:	0718      	lsls	r0, r3, #28
   13c60:	b29a      	uxth	r2, r3
   13c62:	d51c      	bpl.n	13c9e <__swsetup_r+0x56>
   13c64:	6921      	ldr	r1, [r4, #16]
   13c66:	b329      	cbz	r1, 13cb4 <__swsetup_r+0x6c>
   13c68:	f012 0001 	ands.w	r0, r2, #1
   13c6c:	d007      	beq.n	13c7e <__swsetup_r+0x36>
   13c6e:	2000      	movs	r0, #0
   13c70:	60a0      	str	r0, [r4, #8]
   13c72:	6960      	ldr	r0, [r4, #20]
   13c74:	4240      	negs	r0, r0
   13c76:	61a0      	str	r0, [r4, #24]
   13c78:	b139      	cbz	r1, 13c8a <__swsetup_r+0x42>
   13c7a:	2000      	movs	r0, #0
   13c7c:	bd38      	pop	{r3, r4, r5, pc}
   13c7e:	0795      	lsls	r5, r2, #30
   13c80:	bf58      	it	pl
   13c82:	6960      	ldrpl	r0, [r4, #20]
   13c84:	60a0      	str	r0, [r4, #8]
   13c86:	2900      	cmp	r1, #0
   13c88:	d1f7      	bne.n	13c7a <__swsetup_r+0x32>
   13c8a:	0612      	lsls	r2, r2, #24
   13c8c:	bf58      	it	pl
   13c8e:	4608      	movpl	r0, r1
   13c90:	d5f4      	bpl.n	13c7c <__swsetup_r+0x34>
   13c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13c96:	81a3      	strh	r3, [r4, #12]
   13c98:	f04f 30ff 	mov.w	r0, #4294967295
   13c9c:	bd38      	pop	{r3, r4, r5, pc}
   13c9e:	06d1      	lsls	r1, r2, #27
   13ca0:	d52e      	bpl.n	13d00 <__swsetup_r+0xb8>
   13ca2:	0752      	lsls	r2, r2, #29
   13ca4:	d414      	bmi.n	13cd0 <__swsetup_r+0x88>
   13ca6:	6921      	ldr	r1, [r4, #16]
   13ca8:	f043 0308 	orr.w	r3, r3, #8
   13cac:	81a3      	strh	r3, [r4, #12]
   13cae:	b29a      	uxth	r2, r3
   13cb0:	2900      	cmp	r1, #0
   13cb2:	d1d9      	bne.n	13c68 <__swsetup_r+0x20>
   13cb4:	f402 7020 	and.w	r0, r2, #640	; 0x280
   13cb8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13cbc:	d0d4      	beq.n	13c68 <__swsetup_r+0x20>
   13cbe:	4621      	mov	r1, r4
   13cc0:	4628      	mov	r0, r5
   13cc2:	f000 f977 	bl	13fb4 <__smakebuf_r>
   13cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13cca:	6921      	ldr	r1, [r4, #16]
   13ccc:	b29a      	uxth	r2, r3
   13cce:	e7cb      	b.n	13c68 <__swsetup_r+0x20>
   13cd0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13cd2:	b151      	cbz	r1, 13cea <__swsetup_r+0xa2>
   13cd4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13cd8:	4291      	cmp	r1, r2
   13cda:	d004      	beq.n	13ce6 <__swsetup_r+0x9e>
   13cdc:	4628      	mov	r0, r5
   13cde:	f7f8 fb81 	bl	c3e4 <_free_r>
   13ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13ce6:	2200      	movs	r2, #0
   13ce8:	6322      	str	r2, [r4, #48]	; 0x30
   13cea:	6921      	ldr	r1, [r4, #16]
   13cec:	2200      	movs	r2, #0
   13cee:	e9c4 1200 	strd	r1, r2, [r4]
   13cf2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13cf6:	e7d7      	b.n	13ca8 <__swsetup_r+0x60>
   13cf8:	4618      	mov	r0, r3
   13cfa:	f7f7 fccb 	bl	b694 <__sinit>
   13cfe:	e7ac      	b.n	13c5a <__swsetup_r+0x12>
   13d00:	2209      	movs	r2, #9
   13d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13d06:	602a      	str	r2, [r5, #0]
   13d08:	f04f 30ff 	mov.w	r0, #4294967295
   13d0c:	81a3      	strh	r3, [r4, #12]
   13d0e:	bd38      	pop	{r3, r4, r5, pc}
   13d10:	20008b7c 	.word	0x20008b7c

00013d14 <__fputwc>:
   13d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d18:	b082      	sub	sp, #8
   13d1a:	4682      	mov	sl, r0
   13d1c:	4688      	mov	r8, r1
   13d1e:	4614      	mov	r4, r2
   13d20:	f7f7 ff76 	bl	bc10 <__locale_mb_cur_max>
   13d24:	2801      	cmp	r0, #1
   13d26:	d103      	bne.n	13d30 <__fputwc+0x1c>
   13d28:	f108 33ff 	add.w	r3, r8, #4294967295
   13d2c:	2bfe      	cmp	r3, #254	; 0xfe
   13d2e:	d936      	bls.n	13d9e <__fputwc+0x8a>
   13d30:	f10d 0904 	add.w	r9, sp, #4
   13d34:	4642      	mov	r2, r8
   13d36:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   13d3a:	4649      	mov	r1, r9
   13d3c:	4650      	mov	r0, sl
   13d3e:	f7fe fb29 	bl	12394 <_wcrtomb_r>
   13d42:	1c42      	adds	r2, r0, #1
   13d44:	4606      	mov	r6, r0
   13d46:	d032      	beq.n	13dae <__fputwc+0x9a>
   13d48:	b320      	cbz	r0, 13d94 <__fputwc+0x80>
   13d4a:	f89d c004 	ldrb.w	ip, [sp, #4]
   13d4e:	2500      	movs	r5, #0
   13d50:	e009      	b.n	13d66 <__fputwc+0x52>
   13d52:	6823      	ldr	r3, [r4, #0]
   13d54:	1c5a      	adds	r2, r3, #1
   13d56:	6022      	str	r2, [r4, #0]
   13d58:	f883 c000 	strb.w	ip, [r3]
   13d5c:	3501      	adds	r5, #1
   13d5e:	42b5      	cmp	r5, r6
   13d60:	d218      	bcs.n	13d94 <__fputwc+0x80>
   13d62:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   13d66:	68a3      	ldr	r3, [r4, #8]
   13d68:	3b01      	subs	r3, #1
   13d6a:	2b00      	cmp	r3, #0
   13d6c:	60a3      	str	r3, [r4, #8]
   13d6e:	daf0      	bge.n	13d52 <__fputwc+0x3e>
   13d70:	69a7      	ldr	r7, [r4, #24]
   13d72:	42bb      	cmp	r3, r7
   13d74:	4661      	mov	r1, ip
   13d76:	4622      	mov	r2, r4
   13d78:	4650      	mov	r0, sl
   13d7a:	db02      	blt.n	13d82 <__fputwc+0x6e>
   13d7c:	f1bc 0f0a 	cmp.w	ip, #10
   13d80:	d1e7      	bne.n	13d52 <__fputwc+0x3e>
   13d82:	f000 f983 	bl	1408c <__swbuf_r>
   13d86:	1c43      	adds	r3, r0, #1
   13d88:	d1e8      	bne.n	13d5c <__fputwc+0x48>
   13d8a:	4606      	mov	r6, r0
   13d8c:	4630      	mov	r0, r6
   13d8e:	b002      	add	sp, #8
   13d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d94:	4646      	mov	r6, r8
   13d96:	4630      	mov	r0, r6
   13d98:	b002      	add	sp, #8
   13d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d9e:	fa5f fc88 	uxtb.w	ip, r8
   13da2:	f88d c004 	strb.w	ip, [sp, #4]
   13da6:	4606      	mov	r6, r0
   13da8:	f10d 0904 	add.w	r9, sp, #4
   13dac:	e7cf      	b.n	13d4e <__fputwc+0x3a>
   13dae:	89a3      	ldrh	r3, [r4, #12]
   13db0:	4630      	mov	r0, r6
   13db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13db6:	81a3      	strh	r3, [r4, #12]
   13db8:	b002      	add	sp, #8
   13dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13dbe:	bf00      	nop

00013dc0 <_fputwc_r>:
   13dc0:	b530      	push	{r4, r5, lr}
   13dc2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   13dc4:	f013 0f01 	tst.w	r3, #1
   13dc8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13dcc:	4614      	mov	r4, r2
   13dce:	b083      	sub	sp, #12
   13dd0:	4605      	mov	r5, r0
   13dd2:	b29a      	uxth	r2, r3
   13dd4:	d101      	bne.n	13dda <_fputwc_r+0x1a>
   13dd6:	0598      	lsls	r0, r3, #22
   13dd8:	d51c      	bpl.n	13e14 <_fputwc_r+0x54>
   13dda:	0490      	lsls	r0, r2, #18
   13ddc:	d406      	bmi.n	13dec <_fputwc_r+0x2c>
   13dde:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13de0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13de8:	81a3      	strh	r3, [r4, #12]
   13dea:	6662      	str	r2, [r4, #100]	; 0x64
   13dec:	4622      	mov	r2, r4
   13dee:	4628      	mov	r0, r5
   13df0:	f7ff ff90 	bl	13d14 <__fputwc>
   13df4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13df6:	07da      	lsls	r2, r3, #31
   13df8:	4605      	mov	r5, r0
   13dfa:	d402      	bmi.n	13e02 <_fputwc_r+0x42>
   13dfc:	89a3      	ldrh	r3, [r4, #12]
   13dfe:	059b      	lsls	r3, r3, #22
   13e00:	d502      	bpl.n	13e08 <_fputwc_r+0x48>
   13e02:	4628      	mov	r0, r5
   13e04:	b003      	add	sp, #12
   13e06:	bd30      	pop	{r4, r5, pc}
   13e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13e0a:	f7f7 ff9d 	bl	bd48 <__retarget_lock_release_recursive>
   13e0e:	4628      	mov	r0, r5
   13e10:	b003      	add	sp, #12
   13e12:	bd30      	pop	{r4, r5, pc}
   13e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13e16:	9101      	str	r1, [sp, #4]
   13e18:	f7f7 ff94 	bl	bd44 <__retarget_lock_acquire_recursive>
   13e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13e20:	9901      	ldr	r1, [sp, #4]
   13e22:	b29a      	uxth	r2, r3
   13e24:	e7d9      	b.n	13dda <_fputwc_r+0x1a>
   13e26:	bf00      	nop

00013e28 <_wcsnrtombs_l>:
   13e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e2c:	b08b      	sub	sp, #44	; 0x2c
   13e2e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   13e32:	9f14      	ldr	r7, [sp, #80]	; 0x50
   13e34:	9103      	str	r1, [sp, #12]
   13e36:	4681      	mov	r9, r0
   13e38:	9205      	str	r2, [sp, #20]
   13e3a:	461e      	mov	r6, r3
   13e3c:	f1b8 0f00 	cmp.w	r8, #0
   13e40:	d05c      	beq.n	13efc <_wcsnrtombs_l+0xd4>
   13e42:	9b03      	ldr	r3, [sp, #12]
   13e44:	2b00      	cmp	r3, #0
   13e46:	d05e      	beq.n	13f06 <_wcsnrtombs_l+0xde>
   13e48:	9b05      	ldr	r3, [sp, #20]
   13e4a:	681d      	ldr	r5, [r3, #0]
   13e4c:	2f00      	cmp	r7, #0
   13e4e:	d06a      	beq.n	13f26 <_wcsnrtombs_l+0xfe>
   13e50:	1e74      	subs	r4, r6, #1
   13e52:	b34e      	cbz	r6, 13ea8 <_wcsnrtombs_l+0x80>
   13e54:	9b03      	ldr	r3, [sp, #12]
   13e56:	9304      	str	r3, [sp, #16]
   13e58:	3d04      	subs	r5, #4
   13e5a:	2600      	movs	r6, #0
   13e5c:	9501      	str	r5, [sp, #4]
   13e5e:	e00b      	b.n	13e78 <_wcsnrtombs_l+0x50>
   13e60:	9b03      	ldr	r3, [sp, #12]
   13e62:	bb2b      	cbnz	r3, 13eb0 <_wcsnrtombs_l+0x88>
   13e64:	9b01      	ldr	r3, [sp, #4]
   13e66:	681a      	ldr	r2, [r3, #0]
   13e68:	2a00      	cmp	r2, #0
   13e6a:	d03a      	beq.n	13ee2 <_wcsnrtombs_l+0xba>
   13e6c:	45bc      	cmp	ip, r7
   13e6e:	d25c      	bcs.n	13f2a <_wcsnrtombs_l+0x102>
   13e70:	3c01      	subs	r4, #1
   13e72:	1c63      	adds	r3, r4, #1
   13e74:	4666      	mov	r6, ip
   13e76:	d017      	beq.n	13ea8 <_wcsnrtombs_l+0x80>
   13e78:	f8d8 3000 	ldr.w	r3, [r8]
   13e7c:	9302      	str	r3, [sp, #8]
   13e7e:	9b01      	ldr	r3, [sp, #4]
   13e80:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   13e84:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13e88:	9301      	str	r3, [sp, #4]
   13e8a:	a907      	add	r1, sp, #28
   13e8c:	4643      	mov	r3, r8
   13e8e:	4648      	mov	r0, r9
   13e90:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13e94:	47a8      	blx	r5
   13e96:	1c42      	adds	r2, r0, #1
   13e98:	d03a      	beq.n	13f10 <_wcsnrtombs_l+0xe8>
   13e9a:	eb00 0c06 	add.w	ip, r0, r6
   13e9e:	45bc      	cmp	ip, r7
   13ea0:	d9de      	bls.n	13e60 <_wcsnrtombs_l+0x38>
   13ea2:	9b02      	ldr	r3, [sp, #8]
   13ea4:	e9c8 3b00 	strd	r3, fp, [r8]
   13ea8:	4630      	mov	r0, r6
   13eaa:	b00b      	add	sp, #44	; 0x2c
   13eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eb0:	2800      	cmp	r0, #0
   13eb2:	dd0e      	ble.n	13ed2 <_wcsnrtombs_l+0xaa>
   13eb4:	9b04      	ldr	r3, [sp, #16]
   13eb6:	9d01      	ldr	r5, [sp, #4]
   13eb8:	4418      	add	r0, r3
   13eba:	1e5a      	subs	r2, r3, #1
   13ebc:	a907      	add	r1, sp, #28
   13ebe:	f100 3eff 	add.w	lr, r0, #4294967295
   13ec2:	f811 3b01 	ldrb.w	r3, [r1], #1
   13ec6:	f802 3f01 	strb.w	r3, [r2, #1]!
   13eca:	4572      	cmp	r2, lr
   13ecc:	d1f9      	bne.n	13ec2 <_wcsnrtombs_l+0x9a>
   13ece:	9501      	str	r5, [sp, #4]
   13ed0:	9004      	str	r0, [sp, #16]
   13ed2:	9b05      	ldr	r3, [sp, #20]
   13ed4:	681a      	ldr	r2, [r3, #0]
   13ed6:	3204      	adds	r2, #4
   13ed8:	601a      	str	r2, [r3, #0]
   13eda:	9b01      	ldr	r3, [sp, #4]
   13edc:	681a      	ldr	r2, [r3, #0]
   13ede:	2a00      	cmp	r2, #0
   13ee0:	d1c4      	bne.n	13e6c <_wcsnrtombs_l+0x44>
   13ee2:	9b03      	ldr	r3, [sp, #12]
   13ee4:	b10b      	cbz	r3, 13eea <_wcsnrtombs_l+0xc2>
   13ee6:	9b05      	ldr	r3, [sp, #20]
   13ee8:	601a      	str	r2, [r3, #0]
   13eea:	f10c 36ff 	add.w	r6, ip, #4294967295
   13eee:	2200      	movs	r2, #0
   13ef0:	4630      	mov	r0, r6
   13ef2:	f8c8 2000 	str.w	r2, [r8]
   13ef6:	b00b      	add	sp, #44	; 0x2c
   13ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13efc:	9b03      	ldr	r3, [sp, #12]
   13efe:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   13f02:	2b00      	cmp	r3, #0
   13f04:	d1a0      	bne.n	13e48 <_wcsnrtombs_l+0x20>
   13f06:	9b05      	ldr	r3, [sp, #20]
   13f08:	f04f 37ff 	mov.w	r7, #4294967295
   13f0c:	681d      	ldr	r5, [r3, #0]
   13f0e:	e79f      	b.n	13e50 <_wcsnrtombs_l+0x28>
   13f10:	4606      	mov	r6, r0
   13f12:	218a      	movs	r1, #138	; 0x8a
   13f14:	2200      	movs	r2, #0
   13f16:	4630      	mov	r0, r6
   13f18:	f8c9 1000 	str.w	r1, [r9]
   13f1c:	f8c8 2000 	str.w	r2, [r8]
   13f20:	b00b      	add	sp, #44	; 0x2c
   13f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f26:	463e      	mov	r6, r7
   13f28:	e7be      	b.n	13ea8 <_wcsnrtombs_l+0x80>
   13f2a:	4666      	mov	r6, ip
   13f2c:	e7bc      	b.n	13ea8 <_wcsnrtombs_l+0x80>
   13f2e:	bf00      	nop

00013f30 <_wcsnrtombs_r>:
   13f30:	b510      	push	{r4, lr}
   13f32:	b084      	sub	sp, #16
   13f34:	4c05      	ldr	r4, [pc, #20]	; (13f4c <_wcsnrtombs_r+0x1c>)
   13f36:	9806      	ldr	r0, [sp, #24]
   13f38:	9000      	str	r0, [sp, #0]
   13f3a:	9807      	ldr	r0, [sp, #28]
   13f3c:	9001      	str	r0, [sp, #4]
   13f3e:	4804      	ldr	r0, [pc, #16]	; (13f50 <_wcsnrtombs_r+0x20>)
   13f40:	6800      	ldr	r0, [r0, #0]
   13f42:	9402      	str	r4, [sp, #8]
   13f44:	f7ff ff70 	bl	13e28 <_wcsnrtombs_l>
   13f48:	b004      	add	sp, #16
   13f4a:	bd10      	pop	{r4, pc}
   13f4c:	200085f4 	.word	0x200085f4
   13f50:	20008b7c 	.word	0x20008b7c

00013f54 <category>:
   13f54:	4b15      	ldr	r3, [pc, #84]	; (13fac <category+0x58>)
   13f56:	4298      	cmp	r0, r3
   13f58:	d823      	bhi.n	13fa2 <category+0x4e>
   13f5a:	b570      	push	{r4, r5, r6, lr}
   13f5c:	4e14      	ldr	r6, [pc, #80]	; (13fb0 <category+0x5c>)
   13f5e:	f04f 0e00 	mov.w	lr, #0
   13f62:	f640 04db 	movw	r4, #2267	; 0x8db
   13f66:	e003      	b.n	13f70 <category+0x1c>
   13f68:	f102 0e01 	add.w	lr, r2, #1
   13f6c:	45a6      	cmp	lr, r4
   13f6e:	dc16      	bgt.n	13f9e <category+0x4a>
   13f70:	eb04 020e 	add.w	r2, r4, lr
   13f74:	f022 0301 	bic.w	r3, r2, #1
   13f78:	eb03 0362 	add.w	r3, r3, r2, asr #1
   13f7c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   13f80:	1052      	asrs	r2, r2, #1
   13f82:	7859      	ldrb	r1, [r3, #1]
   13f84:	885d      	ldrh	r5, [r3, #2]
   13f86:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   13f8a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   13f8e:	448c      	add	ip, r1
   13f90:	4560      	cmp	r0, ip
   13f92:	d8e9      	bhi.n	13f68 <category+0x14>
   13f94:	4288      	cmp	r0, r1
   13f96:	d206      	bcs.n	13fa6 <category+0x52>
   13f98:	1e54      	subs	r4, r2, #1
   13f9a:	45a6      	cmp	lr, r4
   13f9c:	dde8      	ble.n	13f70 <category+0x1c>
   13f9e:	20ff      	movs	r0, #255	; 0xff
   13fa0:	bd70      	pop	{r4, r5, r6, pc}
   13fa2:	20ff      	movs	r0, #255	; 0xff
   13fa4:	4770      	bx	lr
   13fa6:	7818      	ldrb	r0, [r3, #0]
   13fa8:	bd70      	pop	{r4, r5, r6, pc}
   13faa:	bf00      	nop
   13fac:	000e01ef 	.word	0x000e01ef
   13fb0:	2000270c 	.word	0x2000270c

00013fb4 <__smakebuf_r>:
   13fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13fb8:	898b      	ldrh	r3, [r1, #12]
   13fba:	460c      	mov	r4, r1
   13fbc:	0799      	lsls	r1, r3, #30
   13fbe:	b096      	sub	sp, #88	; 0x58
   13fc0:	d508      	bpl.n	13fd4 <__smakebuf_r+0x20>
   13fc2:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13fc6:	2201      	movs	r2, #1
   13fc8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13fcc:	6023      	str	r3, [r4, #0]
   13fce:	b016      	add	sp, #88	; 0x58
   13fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13fd8:	2900      	cmp	r1, #0
   13fda:	4606      	mov	r6, r0
   13fdc:	db25      	blt.n	1402a <__smakebuf_r+0x76>
   13fde:	466a      	mov	r2, sp
   13fe0:	f000 f8ac 	bl	1413c <_fstat_r>
   13fe4:	2800      	cmp	r0, #0
   13fe6:	db1f      	blt.n	14028 <__smakebuf_r+0x74>
   13fe8:	9d01      	ldr	r5, [sp, #4]
   13fea:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   13fee:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   13ff2:	fab5 f585 	clz	r5, r5
   13ff6:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13ffa:	096d      	lsrs	r5, r5, #5
   13ffc:	f44f 6700 	mov.w	r7, #2048	; 0x800
   14000:	4641      	mov	r1, r8
   14002:	4630      	mov	r0, r6
   14004:	f7f5 fe12 	bl	9c2c <_malloc_r>
   14008:	b1e0      	cbz	r0, 14044 <__smakebuf_r+0x90>
   1400a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1400e:	f8c4 8014 	str.w	r8, [r4, #20]
   14012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14016:	6020      	str	r0, [r4, #0]
   14018:	6120      	str	r0, [r4, #16]
   1401a:	81a3      	strh	r3, [r4, #12]
   1401c:	bb35      	cbnz	r5, 1406c <__smakebuf_r+0xb8>
   1401e:	433b      	orrs	r3, r7
   14020:	81a3      	strh	r3, [r4, #12]
   14022:	b016      	add	sp, #88	; 0x58
   14024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14028:	89a3      	ldrh	r3, [r4, #12]
   1402a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1402e:	d019      	beq.n	14064 <__smakebuf_r+0xb0>
   14030:	f04f 0840 	mov.w	r8, #64	; 0x40
   14034:	2500      	movs	r5, #0
   14036:	4641      	mov	r1, r8
   14038:	4630      	mov	r0, r6
   1403a:	462f      	mov	r7, r5
   1403c:	f7f5 fdf6 	bl	9c2c <_malloc_r>
   14040:	2800      	cmp	r0, #0
   14042:	d1e2      	bne.n	1400a <__smakebuf_r+0x56>
   14044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14048:	059a      	lsls	r2, r3, #22
   1404a:	d4c0      	bmi.n	13fce <__smakebuf_r+0x1a>
   1404c:	f023 0303 	bic.w	r3, r3, #3
   14050:	f104 0243 	add.w	r2, r4, #67	; 0x43
   14054:	f043 0302 	orr.w	r3, r3, #2
   14058:	2101      	movs	r1, #1
   1405a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1405e:	81a3      	strh	r3, [r4, #12]
   14060:	6022      	str	r2, [r4, #0]
   14062:	e7b4      	b.n	13fce <__smakebuf_r+0x1a>
   14064:	f44f 6880 	mov.w	r8, #1024	; 0x400
   14068:	462f      	mov	r7, r5
   1406a:	e7c9      	b.n	14000 <__smakebuf_r+0x4c>
   1406c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14070:	4630      	mov	r0, r6
   14072:	f000 f879 	bl	14168 <_isatty_r>
   14076:	b910      	cbnz	r0, 1407e <__smakebuf_r+0xca>
   14078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1407c:	e7cf      	b.n	1401e <__smakebuf_r+0x6a>
   1407e:	89a3      	ldrh	r3, [r4, #12]
   14080:	f023 0303 	bic.w	r3, r3, #3
   14084:	f043 0301 	orr.w	r3, r3, #1
   14088:	b21b      	sxth	r3, r3
   1408a:	e7c8      	b.n	1401e <__smakebuf_r+0x6a>

0001408c <__swbuf_r>:
   1408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1408e:	460d      	mov	r5, r1
   14090:	4614      	mov	r4, r2
   14092:	4606      	mov	r6, r0
   14094:	b110      	cbz	r0, 1409c <__swbuf_r+0x10>
   14096:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14098:	2b00      	cmp	r3, #0
   1409a:	d04c      	beq.n	14136 <__swbuf_r+0xaa>
   1409c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   140a0:	69a3      	ldr	r3, [r4, #24]
   140a2:	60a3      	str	r3, [r4, #8]
   140a4:	0717      	lsls	r7, r2, #28
   140a6:	b290      	uxth	r0, r2
   140a8:	d51b      	bpl.n	140e2 <__swbuf_r+0x56>
   140aa:	6923      	ldr	r3, [r4, #16]
   140ac:	b1cb      	cbz	r3, 140e2 <__swbuf_r+0x56>
   140ae:	b2ed      	uxtb	r5, r5
   140b0:	0481      	lsls	r1, r0, #18
   140b2:	462f      	mov	r7, r5
   140b4:	d522      	bpl.n	140fc <__swbuf_r+0x70>
   140b6:	6822      	ldr	r2, [r4, #0]
   140b8:	6961      	ldr	r1, [r4, #20]
   140ba:	1ad3      	subs	r3, r2, r3
   140bc:	4299      	cmp	r1, r3
   140be:	dd29      	ble.n	14114 <__swbuf_r+0x88>
   140c0:	3301      	adds	r3, #1
   140c2:	68a1      	ldr	r1, [r4, #8]
   140c4:	3901      	subs	r1, #1
   140c6:	60a1      	str	r1, [r4, #8]
   140c8:	1c51      	adds	r1, r2, #1
   140ca:	6021      	str	r1, [r4, #0]
   140cc:	7015      	strb	r5, [r2, #0]
   140ce:	6962      	ldr	r2, [r4, #20]
   140d0:	429a      	cmp	r2, r3
   140d2:	d027      	beq.n	14124 <__swbuf_r+0x98>
   140d4:	89a3      	ldrh	r3, [r4, #12]
   140d6:	07db      	lsls	r3, r3, #31
   140d8:	d501      	bpl.n	140de <__swbuf_r+0x52>
   140da:	2d0a      	cmp	r5, #10
   140dc:	d022      	beq.n	14124 <__swbuf_r+0x98>
   140de:	4638      	mov	r0, r7
   140e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140e2:	4621      	mov	r1, r4
   140e4:	4630      	mov	r0, r6
   140e6:	f7ff fdaf 	bl	13c48 <__swsetup_r>
   140ea:	bb08      	cbnz	r0, 14130 <__swbuf_r+0xa4>
   140ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   140f0:	6923      	ldr	r3, [r4, #16]
   140f2:	b290      	uxth	r0, r2
   140f4:	b2ed      	uxtb	r5, r5
   140f6:	0481      	lsls	r1, r0, #18
   140f8:	462f      	mov	r7, r5
   140fa:	d4dc      	bmi.n	140b6 <__swbuf_r+0x2a>
   140fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14100:	81a2      	strh	r2, [r4, #12]
   14102:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14104:	6961      	ldr	r1, [r4, #20]
   14106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1410a:	6662      	str	r2, [r4, #100]	; 0x64
   1410c:	6822      	ldr	r2, [r4, #0]
   1410e:	1ad3      	subs	r3, r2, r3
   14110:	4299      	cmp	r1, r3
   14112:	dcd5      	bgt.n	140c0 <__swbuf_r+0x34>
   14114:	4621      	mov	r1, r4
   14116:	4630      	mov	r0, r6
   14118:	f7fc fea0 	bl	10e5c <_fflush_r>
   1411c:	b940      	cbnz	r0, 14130 <__swbuf_r+0xa4>
   1411e:	6822      	ldr	r2, [r4, #0]
   14120:	2301      	movs	r3, #1
   14122:	e7ce      	b.n	140c2 <__swbuf_r+0x36>
   14124:	4621      	mov	r1, r4
   14126:	4630      	mov	r0, r6
   14128:	f7fc fe98 	bl	10e5c <_fflush_r>
   1412c:	2800      	cmp	r0, #0
   1412e:	d0d6      	beq.n	140de <__swbuf_r+0x52>
   14130:	f04f 37ff 	mov.w	r7, #4294967295
   14134:	e7d3      	b.n	140de <__swbuf_r+0x52>
   14136:	f7f7 faad 	bl	b694 <__sinit>
   1413a:	e7af      	b.n	1409c <__swbuf_r+0x10>

0001413c <_fstat_r>:
   1413c:	b570      	push	{r4, r5, r6, lr}
   1413e:	460c      	mov	r4, r1
   14140:	4d08      	ldr	r5, [pc, #32]	; (14164 <_fstat_r+0x28>)
   14142:	4603      	mov	r3, r0
   14144:	2600      	movs	r6, #0
   14146:	4620      	mov	r0, r4
   14148:	4611      	mov	r1, r2
   1414a:	461c      	mov	r4, r3
   1414c:	602e      	str	r6, [r5, #0]
   1414e:	f7f4 f9ad 	bl	84ac <_fstat>
   14152:	1c43      	adds	r3, r0, #1
   14154:	d000      	beq.n	14158 <_fstat_r+0x1c>
   14156:	bd70      	pop	{r4, r5, r6, pc}
   14158:	682b      	ldr	r3, [r5, #0]
   1415a:	2b00      	cmp	r3, #0
   1415c:	d0fb      	beq.n	14156 <_fstat_r+0x1a>
   1415e:	6023      	str	r3, [r4, #0]
   14160:	bd70      	pop	{r4, r5, r6, pc}
   14162:	bf00      	nop
   14164:	20028e3c 	.word	0x20028e3c

00014168 <_isatty_r>:
   14168:	b538      	push	{r3, r4, r5, lr}
   1416a:	4d07      	ldr	r5, [pc, #28]	; (14188 <_isatty_r+0x20>)
   1416c:	2200      	movs	r2, #0
   1416e:	4604      	mov	r4, r0
   14170:	4608      	mov	r0, r1
   14172:	602a      	str	r2, [r5, #0]
   14174:	f7f4 f9a0 	bl	84b8 <_isatty>
   14178:	1c43      	adds	r3, r0, #1
   1417a:	d000      	beq.n	1417e <_isatty_r+0x16>
   1417c:	bd38      	pop	{r3, r4, r5, pc}
   1417e:	682b      	ldr	r3, [r5, #0]
   14180:	2b00      	cmp	r3, #0
   14182:	d0fb      	beq.n	1417c <_isatty_r+0x14>
   14184:	6023      	str	r3, [r4, #0]
   14186:	bd38      	pop	{r3, r4, r5, pc}
   14188:	20028e3c 	.word	0x20028e3c

0001418c <__aeabi_drsub>:
   1418c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   14190:	e002      	b.n	14198 <__adddf3>
   14192:	bf00      	nop

00014194 <__aeabi_dsub>:
   14194:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00014198 <__adddf3>:
   14198:	b530      	push	{r4, r5, lr}
   1419a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1419e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   141a2:	ea94 0f05 	teq	r4, r5
   141a6:	bf08      	it	eq
   141a8:	ea90 0f02 	teqeq	r0, r2
   141ac:	bf1f      	itttt	ne
   141ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   141b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   141b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   141ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   141be:	f000 80e2 	beq.w	14386 <__adddf3+0x1ee>
   141c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   141c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   141ca:	bfb8      	it	lt
   141cc:	426d      	neglt	r5, r5
   141ce:	dd0c      	ble.n	141ea <__adddf3+0x52>
   141d0:	442c      	add	r4, r5
   141d2:	ea80 0202 	eor.w	r2, r0, r2
   141d6:	ea81 0303 	eor.w	r3, r1, r3
   141da:	ea82 0000 	eor.w	r0, r2, r0
   141de:	ea83 0101 	eor.w	r1, r3, r1
   141e2:	ea80 0202 	eor.w	r2, r0, r2
   141e6:	ea81 0303 	eor.w	r3, r1, r3
   141ea:	2d36      	cmp	r5, #54	; 0x36
   141ec:	bf88      	it	hi
   141ee:	bd30      	pophi	{r4, r5, pc}
   141f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   141f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   141f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   141fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   14200:	d002      	beq.n	14208 <__adddf3+0x70>
   14202:	4240      	negs	r0, r0
   14204:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14208:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1420c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   14210:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   14214:	d002      	beq.n	1421c <__adddf3+0x84>
   14216:	4252      	negs	r2, r2
   14218:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1421c:	ea94 0f05 	teq	r4, r5
   14220:	f000 80a7 	beq.w	14372 <__adddf3+0x1da>
   14224:	f1a4 0401 	sub.w	r4, r4, #1
   14228:	f1d5 0e20 	rsbs	lr, r5, #32
   1422c:	db0d      	blt.n	1424a <__adddf3+0xb2>
   1422e:	fa02 fc0e 	lsl.w	ip, r2, lr
   14232:	fa22 f205 	lsr.w	r2, r2, r5
   14236:	1880      	adds	r0, r0, r2
   14238:	f141 0100 	adc.w	r1, r1, #0
   1423c:	fa03 f20e 	lsl.w	r2, r3, lr
   14240:	1880      	adds	r0, r0, r2
   14242:	fa43 f305 	asr.w	r3, r3, r5
   14246:	4159      	adcs	r1, r3
   14248:	e00e      	b.n	14268 <__adddf3+0xd0>
   1424a:	f1a5 0520 	sub.w	r5, r5, #32
   1424e:	f10e 0e20 	add.w	lr, lr, #32
   14252:	2a01      	cmp	r2, #1
   14254:	fa03 fc0e 	lsl.w	ip, r3, lr
   14258:	bf28      	it	cs
   1425a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1425e:	fa43 f305 	asr.w	r3, r3, r5
   14262:	18c0      	adds	r0, r0, r3
   14264:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   14268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1426c:	d507      	bpl.n	1427e <__adddf3+0xe6>
   1426e:	f04f 0e00 	mov.w	lr, #0
   14272:	f1dc 0c00 	rsbs	ip, ip, #0
   14276:	eb7e 0000 	sbcs.w	r0, lr, r0
   1427a:	eb6e 0101 	sbc.w	r1, lr, r1
   1427e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   14282:	d31b      	bcc.n	142bc <__adddf3+0x124>
   14284:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   14288:	d30c      	bcc.n	142a4 <__adddf3+0x10c>
   1428a:	0849      	lsrs	r1, r1, #1
   1428c:	ea5f 0030 	movs.w	r0, r0, rrx
   14290:	ea4f 0c3c 	mov.w	ip, ip, rrx
   14294:	f104 0401 	add.w	r4, r4, #1
   14298:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1429c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   142a0:	f080 809a 	bcs.w	143d8 <__adddf3+0x240>
   142a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   142a8:	bf08      	it	eq
   142aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   142ae:	f150 0000 	adcs.w	r0, r0, #0
   142b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   142b6:	ea41 0105 	orr.w	r1, r1, r5
   142ba:	bd30      	pop	{r4, r5, pc}
   142bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   142c0:	4140      	adcs	r0, r0
   142c2:	eb41 0101 	adc.w	r1, r1, r1
   142c6:	3c01      	subs	r4, #1
   142c8:	bf28      	it	cs
   142ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   142ce:	d2e9      	bcs.n	142a4 <__adddf3+0x10c>
   142d0:	f091 0f00 	teq	r1, #0
   142d4:	bf04      	itt	eq
   142d6:	4601      	moveq	r1, r0
   142d8:	2000      	moveq	r0, #0
   142da:	fab1 f381 	clz	r3, r1
   142de:	bf08      	it	eq
   142e0:	3320      	addeq	r3, #32
   142e2:	f1a3 030b 	sub.w	r3, r3, #11
   142e6:	f1b3 0220 	subs.w	r2, r3, #32
   142ea:	da0c      	bge.n	14306 <__adddf3+0x16e>
   142ec:	320c      	adds	r2, #12
   142ee:	dd08      	ble.n	14302 <__adddf3+0x16a>
   142f0:	f102 0c14 	add.w	ip, r2, #20
   142f4:	f1c2 020c 	rsb	r2, r2, #12
   142f8:	fa01 f00c 	lsl.w	r0, r1, ip
   142fc:	fa21 f102 	lsr.w	r1, r1, r2
   14300:	e00c      	b.n	1431c <__adddf3+0x184>
   14302:	f102 0214 	add.w	r2, r2, #20
   14306:	bfd8      	it	le
   14308:	f1c2 0c20 	rsble	ip, r2, #32
   1430c:	fa01 f102 	lsl.w	r1, r1, r2
   14310:	fa20 fc0c 	lsr.w	ip, r0, ip
   14314:	bfdc      	itt	le
   14316:	ea41 010c 	orrle.w	r1, r1, ip
   1431a:	4090      	lslle	r0, r2
   1431c:	1ae4      	subs	r4, r4, r3
   1431e:	bfa2      	ittt	ge
   14320:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   14324:	4329      	orrge	r1, r5
   14326:	bd30      	popge	{r4, r5, pc}
   14328:	ea6f 0404 	mvn.w	r4, r4
   1432c:	3c1f      	subs	r4, #31
   1432e:	da1c      	bge.n	1436a <__adddf3+0x1d2>
   14330:	340c      	adds	r4, #12
   14332:	dc0e      	bgt.n	14352 <__adddf3+0x1ba>
   14334:	f104 0414 	add.w	r4, r4, #20
   14338:	f1c4 0220 	rsb	r2, r4, #32
   1433c:	fa20 f004 	lsr.w	r0, r0, r4
   14340:	fa01 f302 	lsl.w	r3, r1, r2
   14344:	ea40 0003 	orr.w	r0, r0, r3
   14348:	fa21 f304 	lsr.w	r3, r1, r4
   1434c:	ea45 0103 	orr.w	r1, r5, r3
   14350:	bd30      	pop	{r4, r5, pc}
   14352:	f1c4 040c 	rsb	r4, r4, #12
   14356:	f1c4 0220 	rsb	r2, r4, #32
   1435a:	fa20 f002 	lsr.w	r0, r0, r2
   1435e:	fa01 f304 	lsl.w	r3, r1, r4
   14362:	ea40 0003 	orr.w	r0, r0, r3
   14366:	4629      	mov	r1, r5
   14368:	bd30      	pop	{r4, r5, pc}
   1436a:	fa21 f004 	lsr.w	r0, r1, r4
   1436e:	4629      	mov	r1, r5
   14370:	bd30      	pop	{r4, r5, pc}
   14372:	f094 0f00 	teq	r4, #0
   14376:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1437a:	bf06      	itte	eq
   1437c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   14380:	3401      	addeq	r4, #1
   14382:	3d01      	subne	r5, #1
   14384:	e74e      	b.n	14224 <__adddf3+0x8c>
   14386:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1438a:	bf18      	it	ne
   1438c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   14390:	d029      	beq.n	143e6 <__adddf3+0x24e>
   14392:	ea94 0f05 	teq	r4, r5
   14396:	bf08      	it	eq
   14398:	ea90 0f02 	teqeq	r0, r2
   1439c:	d005      	beq.n	143aa <__adddf3+0x212>
   1439e:	ea54 0c00 	orrs.w	ip, r4, r0
   143a2:	bf04      	itt	eq
   143a4:	4619      	moveq	r1, r3
   143a6:	4610      	moveq	r0, r2
   143a8:	bd30      	pop	{r4, r5, pc}
   143aa:	ea91 0f03 	teq	r1, r3
   143ae:	bf1e      	ittt	ne
   143b0:	2100      	movne	r1, #0
   143b2:	2000      	movne	r0, #0
   143b4:	bd30      	popne	{r4, r5, pc}
   143b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   143ba:	d105      	bne.n	143c8 <__adddf3+0x230>
   143bc:	0040      	lsls	r0, r0, #1
   143be:	4149      	adcs	r1, r1
   143c0:	bf28      	it	cs
   143c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   143c6:	bd30      	pop	{r4, r5, pc}
   143c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   143cc:	bf3c      	itt	cc
   143ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   143d2:	bd30      	popcc	{r4, r5, pc}
   143d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   143d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   143dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   143e0:	f04f 0000 	mov.w	r0, #0
   143e4:	bd30      	pop	{r4, r5, pc}
   143e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   143ea:	bf1a      	itte	ne
   143ec:	4619      	movne	r1, r3
   143ee:	4610      	movne	r0, r2
   143f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   143f4:	bf1c      	itt	ne
   143f6:	460b      	movne	r3, r1
   143f8:	4602      	movne	r2, r0
   143fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   143fe:	bf06      	itte	eq
   14400:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   14404:	ea91 0f03 	teqeq	r1, r3
   14408:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1440c:	bd30      	pop	{r4, r5, pc}
   1440e:	bf00      	nop

00014410 <__aeabi_ui2d>:
   14410:	f090 0f00 	teq	r0, #0
   14414:	bf04      	itt	eq
   14416:	2100      	moveq	r1, #0
   14418:	4770      	bxeq	lr
   1441a:	b530      	push	{r4, r5, lr}
   1441c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14420:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14424:	f04f 0500 	mov.w	r5, #0
   14428:	f04f 0100 	mov.w	r1, #0
   1442c:	e750      	b.n	142d0 <__adddf3+0x138>
   1442e:	bf00      	nop

00014430 <__aeabi_i2d>:
   14430:	f090 0f00 	teq	r0, #0
   14434:	bf04      	itt	eq
   14436:	2100      	moveq	r1, #0
   14438:	4770      	bxeq	lr
   1443a:	b530      	push	{r4, r5, lr}
   1443c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14440:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14444:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   14448:	bf48      	it	mi
   1444a:	4240      	negmi	r0, r0
   1444c:	f04f 0100 	mov.w	r1, #0
   14450:	e73e      	b.n	142d0 <__adddf3+0x138>
   14452:	bf00      	nop

00014454 <__aeabi_f2d>:
   14454:	0042      	lsls	r2, r0, #1
   14456:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1445a:	ea4f 0131 	mov.w	r1, r1, rrx
   1445e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   14462:	bf1f      	itttt	ne
   14464:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   14468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1446c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   14470:	4770      	bxne	lr
   14472:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   14476:	bf08      	it	eq
   14478:	4770      	bxeq	lr
   1447a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1447e:	bf04      	itt	eq
   14480:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   14484:	4770      	bxeq	lr
   14486:	b530      	push	{r4, r5, lr}
   14488:	f44f 7460 	mov.w	r4, #896	; 0x380
   1448c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   14490:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   14494:	e71c      	b.n	142d0 <__adddf3+0x138>
   14496:	bf00      	nop

00014498 <__aeabi_ul2d>:
   14498:	ea50 0201 	orrs.w	r2, r0, r1
   1449c:	bf08      	it	eq
   1449e:	4770      	bxeq	lr
   144a0:	b530      	push	{r4, r5, lr}
   144a2:	f04f 0500 	mov.w	r5, #0
   144a6:	e00a      	b.n	144be <__aeabi_l2d+0x16>

000144a8 <__aeabi_l2d>:
   144a8:	ea50 0201 	orrs.w	r2, r0, r1
   144ac:	bf08      	it	eq
   144ae:	4770      	bxeq	lr
   144b0:	b530      	push	{r4, r5, lr}
   144b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   144b6:	d502      	bpl.n	144be <__aeabi_l2d+0x16>
   144b8:	4240      	negs	r0, r0
   144ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   144be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   144c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   144c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   144ca:	f43f aed8 	beq.w	1427e <__adddf3+0xe6>
   144ce:	f04f 0203 	mov.w	r2, #3
   144d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   144d6:	bf18      	it	ne
   144d8:	3203      	addne	r2, #3
   144da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   144de:	bf18      	it	ne
   144e0:	3203      	addne	r2, #3
   144e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   144e6:	f1c2 0320 	rsb	r3, r2, #32
   144ea:	fa00 fc03 	lsl.w	ip, r0, r3
   144ee:	fa20 f002 	lsr.w	r0, r0, r2
   144f2:	fa01 fe03 	lsl.w	lr, r1, r3
   144f6:	ea40 000e 	orr.w	r0, r0, lr
   144fa:	fa21 f102 	lsr.w	r1, r1, r2
   144fe:	4414      	add	r4, r2
   14500:	e6bd      	b.n	1427e <__adddf3+0xe6>
   14502:	bf00      	nop

00014504 <__aeabi_d2lz>:
   14504:	b508      	push	{r3, lr}
   14506:	4602      	mov	r2, r0
   14508:	460b      	mov	r3, r1
   1450a:	ec43 2b17 	vmov	d7, r2, r3
   1450e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   14512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14516:	d403      	bmi.n	14520 <__aeabi_d2lz+0x1c>
   14518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1451c:	f000 b80c 	b.w	14538 <__aeabi_d2ulz>
   14520:	eeb1 7b47 	vneg.f64	d7, d7
   14524:	ec51 0b17 	vmov	r0, r1, d7
   14528:	f000 f806 	bl	14538 <__aeabi_d2ulz>
   1452c:	4240      	negs	r0, r0
   1452e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14532:	bd08      	pop	{r3, pc}
   14534:	0000      	movs	r0, r0
	...

00014538 <__aeabi_d2ulz>:
   14538:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 14568 <__aeabi_d2ulz+0x30>
   1453c:	ec41 0b17 	vmov	d7, r0, r1
   14540:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 14570 <__aeabi_d2ulz+0x38>
   14544:	ee27 6b06 	vmul.f64	d6, d7, d6
   14548:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   1454c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   14550:	eea4 7b45 	vfms.f64	d7, d4, d5
   14554:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   14558:	ee16 1a10 	vmov	r1, s12
   1455c:	ee17 0a90 	vmov	r0, s15
   14560:	4770      	bx	lr
   14562:	bf00      	nop
   14564:	f3af 8000 	nop.w
   14568:	00000000 	.word	0x00000000
   1456c:	3df00000 	.word	0x3df00000
   14570:	00000000 	.word	0x00000000
   14574:	41f00000 	.word	0x41f00000

00014578 <___ZN16CrashReportClasscvbEv_veneer>:
   14578:	f85f f000 	ldr.w	pc, [pc]	; 1457c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1457c:	60001ded 	.word	0x60001ded

00014580 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   14580:	f85f f000 	ldr.w	pc, [pc]	; 14584 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   14584:	60001655 	.word	0x60001655

00014588 <___init_veneer>:
   14588:	f85f f000 	ldr.w	pc, [pc]	; 1458c <___init_veneer+0x4>
   1458c:	600025f1 	.word	0x600025f1

00014590 <___reboot_Teensyduino__veneer>:
   14590:	f85f f000 	ldr.w	pc, [pc]	; 14594 <___reboot_Teensyduino__veneer+0x4>
   14594:	60002549 	.word	0x60002549
	...

Disassembly of section .fini:

000145a0 <_fini>:
   145a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145a2:	bf00      	nop

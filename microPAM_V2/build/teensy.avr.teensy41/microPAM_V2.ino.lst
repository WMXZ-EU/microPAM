
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\B6A2B96C86D1458F5F30CD00E995713A/microPAM_V2.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 fd0c 	bl	60001e48 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 fcb8 	bl	60001e58 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 feda 	bl	600022d4 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f001 f86d 	bl	60002610 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 fce8 	bl	60001f50 <configure_external_ram>
	analog_init();
60001580:	f001 f80c 	bl	6000259c <analog_init>
	pwm_init();
60001584:	f001 f850 	bl	60002628 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fed2 	bl	60002330 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 fc5e 	bl	60001e4c <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 ff63 	bl	60002460 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 fc57 	bl	60001e54 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 fc53 	bl	60001e50 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f001 f82d 	bl	60002608 <____libc_init_array_veneer>
	main();
600015ae:	f001 f84f 	bl	60002650 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	00014528 	.word	0x00014528
600015c0:	60002870 	.word	0x60002870
600015c4:	00000000 	.word	0x00000000
600015c8:	20008ec0 	.word	0x20008ec0
600015cc:	60016d9c 	.word	0x60016d9c
600015d0:	20000000 	.word	0x20000000
600015d4:	2002b4e0 	.word	0x2002b4e0
600015d8:	20008ec0 	.word	0x20008ec0
600015dc:	20008c00 	.word	0x20008c00
600015e0:	0000827d 	.word	0x0000827d
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	00007881 	.word	0x00007881
600015f4:	2002b454 	.word	0x2002b454
600015f8:	00007885 	.word	0x00007885
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	016e3600 	.word	0x016e3600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	2002b458 	.word	0x2002b458
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001654:	4b7c      	ldr	r3, [pc, #496]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001656:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
6000165a:	2a0b      	cmp	r2, #11
{
6000165c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001660:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
60001662:	d11c      	bne.n	6000169e <CrashReportClass::printTo(Print&) const+0x4a>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001664:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001668:	4978      	ldr	r1, [pc, #480]	; (6000184c <CrashReportClass::printTo(Print&) const+0x1f8>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
6000166a:	4b79      	ldr	r3, [pc, #484]	; (60001850 <CrashReportClass::printTo(Print&) const+0x1fc>)
	while (data < end) {
6000166c:	4e79      	ldr	r6, [pc, #484]	; (60001854 <CrashReportClass::printTo(Print&) const+0x200>)
		crc ^= *data++;
6000166e:	f101 0c04 	add.w	ip, r1, #4
60001672:	4050      	eors	r0, r2
60001674:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001676:	f000 0201 	and.w	r2, r0, #1
6000167a:	3c01      	subs	r4, #1
6000167c:	fb03 f202 	mul.w	r2, r3, r2
60001680:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
60001684:	d1f7      	bne.n	60001676 <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
60001686:	45b4      	cmp	ip, r6
60001688:	d002      	beq.n	60001690 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
6000168a:	684a      	ldr	r2, [r1, #4]
6000168c:	4661      	mov	r1, ip
6000168e:	e7ee      	b.n	6000166e <CrashReportClass::printTo(Print&) const+0x1a>
	}
	if (crc != info->crc) return 0;
60001690:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 60001848 <CrashReportClass::printTo(Print&) const+0x1f4>
60001694:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001698:	4298      	cmp	r0, r3
6000169a:	f000 80fd 	beq.w	60001898 <CrashReportClass::printTo(Print&) const+0x244>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
6000169e:	682b      	ldr	r3, [r5, #0]
600016a0:	2217      	movs	r2, #23
600016a2:	496d      	ldr	r1, [pc, #436]	; (60001858 <CrashReportClass::printTo(Print&) const+0x204>)
600016a4:	4628      	mov	r0, r5
600016a6:	685b      	ldr	r3, [r3, #4]
600016a8:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600016aa:	4628      	mov	r0, r5
600016ac:	f000 ffb4 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016b0:	682b      	ldr	r3, [r5, #0]
600016b2:	2248      	movs	r2, #72	; 0x48
600016b4:	4969      	ldr	r1, [pc, #420]	; (6000185c <CrashReportClass::printTo(Print&) const+0x208>)
600016b6:	685b      	ldr	r3, [r3, #4]
600016b8:	4628      	mov	r0, r5
600016ba:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016bc:	4628      	mov	r0, r5
600016be:	f000 ffab 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016c2:	682b      	ldr	r3, [r5, #0]
600016c4:	2249      	movs	r2, #73	; 0x49
600016c6:	4966      	ldr	r1, [pc, #408]	; (60001860 <CrashReportClass::printTo(Print&) const+0x20c>)
600016c8:	685b      	ldr	r3, [r3, #4]
600016ca:	4628      	mov	r0, r5
600016cc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016ce:	4628      	mov	r0, r5
600016d0:	f000 ffa2 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016d4:	682b      	ldr	r3, [r5, #0]
600016d6:	2224      	movs	r2, #36	; 0x24
600016d8:	4962      	ldr	r1, [pc, #392]	; (60001864 <CrashReportClass::printTo(Print&) const+0x210>)
600016da:	685b      	ldr	r3, [r3, #4]
600016dc:	4628      	mov	r0, r5
600016de:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016e0:	4628      	mov	r0, r5
600016e2:	f000 ff99 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016e6:	682b      	ldr	r3, [r5, #0]
600016e8:	2247      	movs	r2, #71	; 0x47
600016ea:	495f      	ldr	r1, [pc, #380]	; (60001868 <CrashReportClass::printTo(Print&) const+0x214>)
600016ec:	685b      	ldr	r3, [r3, #4]
600016ee:	4628      	mov	r0, r5
600016f0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016f2:	4628      	mov	r0, r5
600016f4:	f000 ff90 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016f8:	682b      	ldr	r3, [r5, #0]
600016fa:	223f      	movs	r2, #63	; 0x3f
600016fc:	495b      	ldr	r1, [pc, #364]	; (6000186c <CrashReportClass::printTo(Print&) const+0x218>)
600016fe:	685b      	ldr	r3, [r3, #4]
60001700:	4628      	mov	r0, r5
60001702:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001704:	4628      	mov	r0, r5
60001706:	f000 ff87 	bl	60002618 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
6000170a:	4b59      	ldr	r3, [pc, #356]	; (60001870 <CrashReportClass::printTo(Print&) const+0x21c>)
6000170c:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
6000170e:	07a2      	lsls	r2, r4, #30
60001710:	d50d      	bpl.n	6000172e <CrashReportClass::printTo(Print&) const+0xda>
    uint32_t gpr5 = SRC_GPR5;
60001712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
60001714:	4b57      	ldr	r3, [pc, #348]	; (60001874 <CrashReportClass::printTo(Print&) const+0x220>)
60001716:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
60001718:	682b      	ldr	r3, [r5, #0]
6000171a:	f000 81b8 	beq.w	60001a8e <CrashReportClass::printTo(Print&) const+0x43a>
6000171e:	2240      	movs	r2, #64	; 0x40
60001720:	4955      	ldr	r1, [pc, #340]	; (60001878 <CrashReportClass::printTo(Print&) const+0x224>)
60001722:	685b      	ldr	r3, [r3, #4]
60001724:	4628      	mov	r0, r5
60001726:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001728:	4628      	mov	r0, r5
6000172a:	f000 ff75 	bl	60002618 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
6000172e:	0763      	lsls	r3, r4, #29
60001730:	f100 81a3 	bmi.w	60001a7a <CrashReportClass::printTo(Print&) const+0x426>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001734:	0727      	lsls	r7, r4, #28
60001736:	f100 8196 	bmi.w	60001a66 <CrashReportClass::printTo(Print&) const+0x412>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
6000173a:	06e6      	lsls	r6, r4, #27
6000173c:	f100 8189 	bmi.w	60001a52 <CrashReportClass::printTo(Print&) const+0x3fe>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001740:	06a0      	lsls	r0, r4, #26
60001742:	f100 817c 	bmi.w	60001a3e <CrashReportClass::printTo(Print&) const+0x3ea>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001746:	0661      	lsls	r1, r4, #25
60001748:	f100 816f 	bmi.w	60001a2a <CrashReportClass::printTo(Print&) const+0x3d6>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000174c:	0622      	lsls	r2, r4, #24
6000174e:	f100 8134 	bmi.w	600019ba <CrashReportClass::printTo(Print&) const+0x366>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001752:	05e3      	lsls	r3, r4, #23
60001754:	f100 813d 	bmi.w	600019d2 <CrashReportClass::printTo(Print&) const+0x37e>
  if (bc->bitmask) {
60001758:	4f3b      	ldr	r7, [pc, #236]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
6000175a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
6000175e:	2b00      	cmp	r3, #0
60001760:	d051      	beq.n	60001806 <CrashReportClass::printTo(Print&) const+0x1b2>
60001762:	2401      	movs	r4, #1
							  return write((const uint8_t *)str, strlen(str)); }
60001764:	f8df 912c 	ldr.w	r9, [pc, #300]	; 60001894 <CrashReportClass::printTo(Print&) const+0x240>
60001768:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6000188c <CrashReportClass::printTo(Print&) const+0x238>
6000176c:	e004      	b.n	60001778 <CrashReportClass::printTo(Print&) const+0x124>
    for (int i=0; i < 6; i++) {
6000176e:	3401      	adds	r4, #1
60001770:	2c07      	cmp	r4, #7
60001772:	d039      	beq.n	600017e8 <CrashReportClass::printTo(Print&) const+0x194>
      if (bc->bitmask & (1 << i)) {
60001774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
60001778:	1e62      	subs	r2, r4, #1
6000177a:	2601      	movs	r6, #1
6000177c:	fa06 f102 	lsl.w	r1, r6, r2
60001780:	4219      	tst	r1, r3
60001782:	d0f4      	beq.n	6000176e <CrashReportClass::printTo(Print&) const+0x11a>
60001784:	682b      	ldr	r3, [r5, #0]
60001786:	eb08 0a82 	add.w	sl, r8, r2, lsl #2
6000178a:	4649      	mov	r1, r9
6000178c:	220e      	movs	r2, #14
6000178e:	685b      	ldr	r3, [r3, #4]
60001790:	4628      	mov	r0, r5
60001792:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001794:	4621      	mov	r1, r4
60001796:	4628      	mov	r0, r5
    for (int i=0; i < 6; i++) {
60001798:	3401      	adds	r4, #1
6000179a:	f000 ff49 	bl	60002630 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000179e:	682b      	ldr	r3, [r5, #0]
600017a0:	2205      	movs	r2, #5
600017a2:	4936      	ldr	r1, [pc, #216]	; (6000187c <CrashReportClass::printTo(Print&) const+0x228>)
600017a4:	685b      	ldr	r3, [r3, #4]
600017a6:	4628      	mov	r0, r5
600017a8:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600017aa:	2300      	movs	r3, #0
600017ac:	f8da 1004 	ldr.w	r1, [sl, #4]
600017b0:	220a      	movs	r2, #10
600017b2:	4628      	mov	r0, r5
600017b4:	f000 ff34 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017b8:	682b      	ldr	r3, [r5, #0]
600017ba:	2204      	movs	r2, #4
600017bc:	4930      	ldr	r1, [pc, #192]	; (60001880 <CrashReportClass::printTo(Print&) const+0x22c>)
600017be:	685b      	ldr	r3, [r3, #4]
600017c0:	4628      	mov	r0, r5
600017c2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600017c4:	f8da 1004 	ldr.w	r1, [sl, #4]
600017c8:	2300      	movs	r3, #0
600017ca:	2210      	movs	r2, #16
600017cc:	4628      	mov	r0, r5
600017ce:	f000 ff27 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017d2:	682b      	ldr	r3, [r5, #0]
600017d4:	4632      	mov	r2, r6
600017d6:	492b      	ldr	r1, [pc, #172]	; (60001884 <CrashReportClass::printTo(Print&) const+0x230>)
600017d8:	685b      	ldr	r3, [r3, #4]
600017da:	4628      	mov	r0, r5
600017dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017de:	4628      	mov	r0, r5
600017e0:	f000 ff1a 	bl	60002618 <___ZN5Print7printlnEv_veneer>
600017e4:	2c07      	cmp	r4, #7
600017e6:	d1c5      	bne.n	60001774 <CrashReportClass::printTo(Print&) const+0x120>
    *(volatile uint32_t *)(&bc->bitmask) = 0;
600017e8:	4b27      	ldr	r3, [pc, #156]	; (60001888 <CrashReportClass::printTo(Print&) const+0x234>)
600017ea:	2200      	movs	r2, #0
600017ec:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600017f0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
600017f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600017f8:	4a24      	ldr	r2, [pc, #144]	; (6000188c <CrashReportClass::printTo(Print&) const+0x238>)
600017fa:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600017fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001802:	f3bf 8f6f 	isb	sy
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001806:	4a10      	ldr	r2, [pc, #64]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001808:	2300      	movs	r3, #0
	info->ipsr  = 0;
6000180a:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
6000180e:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001812:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001816:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
6000181a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000181e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001822:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001826:	4809      	ldr	r0, [pc, #36]	; (6000184c <CrashReportClass::printTo(Print&) const+0x1f8>)
60001828:	4919      	ldr	r1, [pc, #100]	; (60001890 <CrashReportClass::printTo(Print&) const+0x23c>)
6000182a:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
6000182e:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001832:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001836:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000183a:	4a0d      	ldr	r2, [pc, #52]	; (60001870 <CrashReportClass::printTo(Print&) const+0x21c>)
}
6000183c:	2001      	movs	r0, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000183e:	6891      	ldr	r1, [r2, #8]
60001840:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001842:	6313      	str	r3, [r2, #48]	; 0x30
}
60001844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60001848:	2027ff00 	.word	0x2027ff00
6000184c:	2027ff80 	.word	0x2027ff80
60001850:	edb88320 	.word	0xedb88320
60001854:	2027ffa8 	.word	0x2027ffa8
60001858:	20008018 	.word	0x20008018
6000185c:	20008030 	.word	0x20008030
60001860:	2000807c 	.word	0x2000807c
60001864:	200080c8 	.word	0x200080c8
60001868:	200080f0 	.word	0x200080f0
6000186c:	20008138 	.word	0x20008138
60001870:	400f8000 	.word	0x400f8000
60001874:	0bad00f1 	.word	0x0bad00f1
60001878:	200081c4 	.word	0x200081c4
6000187c:	2000839c 	.word	0x2000839c
60001880:	200083a4 	.word	0x200083a4
60001884:	200080c4 	.word	0x200080c4
60001888:	2027f000 	.word	0x2027f000
6000188c:	2027ffc0 	.word	0x2027ffc0
60001890:	2027ffa0 	.word	0x2027ffa0
60001894:	2000838c 	.word	0x2000838c
							  return write((const uint8_t *)str, strlen(str)); }
60001898:	682b      	ldr	r3, [r5, #0]
6000189a:	220c      	movs	r2, #12
6000189c:	49aa      	ldr	r1, [pc, #680]	; (60001b48 <CrashReportClass::printTo(Print&) const+0x4f4>)
6000189e:	4628      	mov	r0, r5
600018a0:	685b      	ldr	r3, [r3, #4]
600018a2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018a4:	4628      	mov	r0, r5
600018a6:	f000 feb7 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018aa:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
600018ac:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
600018b0:	4628      	mov	r0, r5
    info->time /= 60;
600018b2:	4ba6      	ldr	r3, [pc, #664]	; (60001b4c <CrashReportClass::printTo(Print&) const+0x4f8>)
600018b4:	f8d2 a004 	ldr.w	sl, [r2, #4]
600018b8:	fba3 2709 	umull	r2, r7, r3, r9
600018bc:	49a4      	ldr	r1, [pc, #656]	; (60001b50 <CrashReportClass::printTo(Print&) const+0x4fc>)
600018be:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
600018c0:	fba3 2307 	umull	r2, r3, r3, r7
600018c4:	2226      	movs	r2, #38	; 0x26
600018c6:	095e      	lsrs	r6, r3, #5
600018c8:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
600018cc:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
600018ce:	49a1      	ldr	r1, [pc, #644]	; (60001b54 <CrashReportClass::printTo(Print&) const+0x500>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018d0:	220a      	movs	r2, #10
600018d2:	4628      	mov	r0, r5
600018d4:	fba1 3106 	umull	r3, r1, r1, r6
600018d8:	4623      	mov	r3, r4
600018da:	0909      	lsrs	r1, r1, #4
600018dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
600018e0:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
600018e4:	f000 fe9c 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018e8:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
600018ea:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
600018ee:	2201      	movs	r2, #1
600018f0:	685b      	ldr	r3, [r3, #4]
600018f2:	4628      	mov	r0, r5
600018f4:	4998      	ldr	r1, [pc, #608]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x504>)
600018f6:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018f8:	4623      	mov	r3, r4
600018fa:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
600018fe:	220a      	movs	r2, #10
60001900:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
60001902:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
60001906:	f000 fe8b 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000190a:	682b      	ldr	r3, [r5, #0]
6000190c:	2201      	movs	r2, #1
6000190e:	4992      	ldr	r1, [pc, #584]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x504>)
60001910:	685b      	ldr	r3, [r3, #4]
60001912:	4628      	mov	r0, r5
60001914:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001916:	4623      	mov	r3, r4
60001918:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
6000191c:	220a      	movs	r2, #10
6000191e:	4628      	mov	r0, r5
60001920:	f000 fe7e 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001924:	4628      	mov	r0, r5
60001926:	f000 fe77 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000192a:	682b      	ldr	r3, [r5, #0]
6000192c:	2224      	movs	r2, #36	; 0x24
6000192e:	498b      	ldr	r1, [pc, #556]	; (60001b5c <CrashReportClass::printTo(Print&) const+0x508>)
60001930:	685b      	ldr	r3, [r3, #4]
60001932:	4628      	mov	r0, r5
60001934:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001936:	4623      	mov	r3, r4
60001938:	2210      	movs	r2, #16
6000193a:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
6000193e:	4628      	mov	r0, r5
60001940:	f000 fe6e 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001944:	4628      	mov	r0, r5
60001946:	f000 fe67 	bl	60002618 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
6000194a:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
6000194e:	2e00      	cmp	r6, #0
60001950:	f040 80a0 	bne.w	60001a94 <CrashReportClass::printTo(Print&) const+0x440>
    uint32_t _HFSR = info->hfsr;
60001954:	4e82      	ldr	r6, [pc, #520]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x50c>)
60001956:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
6000195a:	2c00      	cmp	r4, #0
6000195c:	f040 80bb 	bne.w	60001ad6 <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001960:	682b      	ldr	r3, [r5, #0]
60001962:	2222      	movs	r2, #34	; 0x22
60001964:	497f      	ldr	r1, [pc, #508]	; (60001b64 <CrashReportClass::printTo(Print&) const+0x510>)
60001966:	4628      	mov	r0, r5
60001968:	685b      	ldr	r3, [r3, #4]
6000196a:	4798      	blx	r3
    p.print(info->temp);
6000196c:	4b7c      	ldr	r3, [pc, #496]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x50c>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
6000196e:	2102      	movs	r1, #2
60001970:	4628      	mov	r0, r5
60001972:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001976:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
6000197a:	f000 fe61 	bl	60002640 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000197e:	682b      	ldr	r3, [r5, #0]
60001980:	2205      	movs	r2, #5
60001982:	4979      	ldr	r1, [pc, #484]	; (60001b68 <CrashReportClass::printTo(Print&) const+0x514>)
60001984:	685b      	ldr	r3, [r3, #4]
60001986:	4628      	mov	r0, r5
60001988:	4798      	blx	r3
6000198a:	682b      	ldr	r3, [r5, #0]
6000198c:	221d      	movs	r2, #29
6000198e:	4977      	ldr	r1, [pc, #476]	; (60001b6c <CrashReportClass::printTo(Print&) const+0x518>)
60001990:	685b      	ldr	r3, [r3, #4]
60001992:	4628      	mov	r0, r5
60001994:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001996:	4a76      	ldr	r2, [pc, #472]	; (60001b70 <CrashReportClass::printTo(Print&) const+0x51c>)
60001998:	4876      	ldr	r0, [pc, #472]	; (60001b74 <CrashReportClass::printTo(Print&) const+0x520>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000199a:	2300      	movs	r3, #0
6000199c:	6811      	ldr	r1, [r2, #0]
6000199e:	220a      	movs	r2, #10
600019a0:	fba0 0101 	umull	r0, r1, r0, r1
600019a4:	4628      	mov	r0, r5
600019a6:	0c89      	lsrs	r1, r1, #18
600019a8:	f000 fe3a 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019ac:	682b      	ldr	r3, [r5, #0]
600019ae:	2204      	movs	r2, #4
600019b0:	4971      	ldr	r1, [pc, #452]	; (60001b78 <CrashReportClass::printTo(Print&) const+0x524>)
600019b2:	685b      	ldr	r3, [r3, #4]
600019b4:	4628      	mov	r0, r5
600019b6:	4798      	blx	r3
600019b8:	e6a7      	b.n	6000170a <CrashReportClass::printTo(Print&) const+0xb6>
600019ba:	682b      	ldr	r3, [r5, #0]
600019bc:	2221      	movs	r2, #33	; 0x21
600019be:	496f      	ldr	r1, [pc, #444]	; (60001b7c <CrashReportClass::printTo(Print&) const+0x528>)
600019c0:	4628      	mov	r0, r5
600019c2:	685b      	ldr	r3, [r3, #4]
600019c4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019c6:	4628      	mov	r0, r5
600019c8:	f000 fe26 	bl	60002618 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
600019cc:	05e3      	lsls	r3, r4, #23
600019ce:	f57f aec3 	bpl.w	60001758 <CrashReportClass::printTo(Print&) const+0x104>
							  return write((const uint8_t *)str, strlen(str)); }
600019d2:	682b      	ldr	r3, [r5, #0]
600019d4:	2229      	movs	r2, #41	; 0x29
600019d6:	496a      	ldr	r1, [pc, #424]	; (60001b80 <CrashReportClass::printTo(Print&) const+0x52c>)
600019d8:	4628      	mov	r0, r5
600019da:	685b      	ldr	r3, [r3, #4]
600019dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019de:	4628      	mov	r0, r5
600019e0:	f000 fe1a 	bl	60002618 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
600019e4:	4967      	ldr	r1, [pc, #412]	; (60001b84 <CrashReportClass::printTo(Print&) const+0x530>)
							  return write((const uint8_t *)str, strlen(str)); }
600019e6:	6828      	ldr	r0, [r5, #0]
600019e8:	2221      	movs	r2, #33	; 0x21
600019ea:	688b      	ldr	r3, [r1, #8]
600019ec:	6844      	ldr	r4, [r0, #4]
600019ee:	4628      	mov	r0, r5
600019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
600019f4:	608b      	str	r3, [r1, #8]
600019f6:	4964      	ldr	r1, [pc, #400]	; (60001b88 <CrashReportClass::printTo(Print&) const+0x534>)
600019f8:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
600019fa:	4628      	mov	r0, r5
600019fc:	f000 fe0c 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a00:	682b      	ldr	r3, [r5, #0]
60001a02:	2242      	movs	r2, #66	; 0x42
60001a04:	4961      	ldr	r1, [pc, #388]	; (60001b8c <CrashReportClass::printTo(Print&) const+0x538>)
60001a06:	685b      	ldr	r3, [r3, #4]
60001a08:	4628      	mov	r0, r5
60001a0a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a0c:	4628      	mov	r0, r5
60001a0e:	f000 fe03 	bl	60002618 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a12:	4a5f      	ldr	r2, [pc, #380]	; (60001b90 <CrashReportClass::printTo(Print&) const+0x53c>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001a14:	4b5f      	ldr	r3, [pc, #380]	; (60001b94 <CrashReportClass::printTo(Print&) const+0x540>)
60001a16:	2107      	movs	r1, #7
60001a18:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001a20:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001a22:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001a26:	bf30      	wfi
60001a28:	e7fd      	b.n	60001a26 <CrashReportClass::printTo(Print&) const+0x3d2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a2a:	682b      	ldr	r3, [r5, #0]
60001a2c:	2221      	movs	r2, #33	; 0x21
60001a2e:	495a      	ldr	r1, [pc, #360]	; (60001b98 <CrashReportClass::printTo(Print&) const+0x544>)
60001a30:	4628      	mov	r0, r5
60001a32:	685b      	ldr	r3, [r3, #4]
60001a34:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a36:	4628      	mov	r0, r5
60001a38:	f000 fdee 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a3c:	e686      	b.n	6000174c <CrashReportClass::printTo(Print&) const+0xf8>
							  return write((const uint8_t *)str, strlen(str)); }
60001a3e:	682b      	ldr	r3, [r5, #0]
60001a40:	2229      	movs	r2, #41	; 0x29
60001a42:	4956      	ldr	r1, [pc, #344]	; (60001b9c <CrashReportClass::printTo(Print&) const+0x548>)
60001a44:	4628      	mov	r0, r5
60001a46:	685b      	ldr	r3, [r3, #4]
60001a48:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a4a:	4628      	mov	r0, r5
60001a4c:	f000 fde4 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a50:	e679      	b.n	60001746 <CrashReportClass::printTo(Print&) const+0xf2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a52:	682b      	ldr	r3, [r5, #0]
60001a54:	2226      	movs	r2, #38	; 0x26
60001a56:	4952      	ldr	r1, [pc, #328]	; (60001ba0 <CrashReportClass::printTo(Print&) const+0x54c>)
60001a58:	4628      	mov	r0, r5
60001a5a:	685b      	ldr	r3, [r3, #4]
60001a5c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a5e:	4628      	mov	r0, r5
60001a60:	f000 fdda 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a64:	e66c      	b.n	60001740 <CrashReportClass::printTo(Print&) const+0xec>
							  return write((const uint8_t *)str, strlen(str)); }
60001a66:	682b      	ldr	r3, [r5, #0]
60001a68:	222a      	movs	r2, #42	; 0x2a
60001a6a:	494e      	ldr	r1, [pc, #312]	; (60001ba4 <CrashReportClass::printTo(Print&) const+0x550>)
60001a6c:	4628      	mov	r0, r5
60001a6e:	685b      	ldr	r3, [r3, #4]
60001a70:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a72:	4628      	mov	r0, r5
60001a74:	f000 fdd0 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a78:	e65f      	b.n	6000173a <CrashReportClass::printTo(Print&) const+0xe6>
							  return write((const uint8_t *)str, strlen(str)); }
60001a7a:	682b      	ldr	r3, [r5, #0]
60001a7c:	2227      	movs	r2, #39	; 0x27
60001a7e:	494a      	ldr	r1, [pc, #296]	; (60001ba8 <CrashReportClass::printTo(Print&) const+0x554>)
60001a80:	4628      	mov	r0, r5
60001a82:	685b      	ldr	r3, [r3, #4]
60001a84:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a86:	4628      	mov	r0, r5
60001a88:	f000 fdc6 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a8c:	e652      	b.n	60001734 <CrashReportClass::printTo(Print&) const+0xe0>
							  return write((const uint8_t *)str, strlen(str)); }
60001a8e:	2248      	movs	r2, #72	; 0x48
60001a90:	4946      	ldr	r1, [pc, #280]	; (60001bac <CrashReportClass::printTo(Print&) const+0x558>)
60001a92:	e646      	b.n	60001722 <CrashReportClass::printTo(Print&) const+0xce>
60001a94:	682b      	ldr	r3, [r5, #0]
60001a96:	2208      	movs	r2, #8
60001a98:	4945      	ldr	r1, [pc, #276]	; (60001bb0 <CrashReportClass::printTo(Print&) const+0x55c>)
60001a9a:	4628      	mov	r0, r5
60001a9c:	685b      	ldr	r3, [r3, #4]
60001a9e:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001aa0:	4623      	mov	r3, r4
60001aa2:	2210      	movs	r2, #16
60001aa4:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001aa8:	4628      	mov	r0, r5
60001aaa:	f000 fdb9 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001aae:	4628      	mov	r0, r5
60001ab0:	f000 fdb2 	bl	60002618 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001ab4:	07f4      	lsls	r4, r6, #31
60001ab6:	d427      	bmi.n	60001b08 <CrashReportClass::printTo(Print&) const+0x4b4>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001ab8:	07b0      	lsls	r0, r6, #30
60001aba:	f100 811d 	bmi.w	60001cf8 <CrashReportClass::printTo(Print&) const+0x6a4>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001abe:	0731      	lsls	r1, r6, #28
60001ac0:	f100 810e 	bmi.w	60001ce0 <CrashReportClass::printTo(Print&) const+0x68c>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001ac4:	06f2      	lsls	r2, r6, #27
60001ac6:	f100 8127 	bmi.w	60001d18 <CrashReportClass::printTo(Print&) const+0x6c4>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001aca:	06b3      	lsls	r3, r6, #26
60001acc:	d525      	bpl.n	60001b1a <CrashReportClass::printTo(Print&) const+0x4c6>
							  return write((const uint8_t *)str, strlen(str)); }
60001ace:	682b      	ldr	r3, [r5, #0]
60001ad0:	222a      	movs	r2, #42	; 0x2a
60001ad2:	4938      	ldr	r1, [pc, #224]	; (60001bb4 <CrashReportClass::printTo(Print&) const+0x560>)
60001ad4:	e01b      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001ad6:	682b      	ldr	r3, [r5, #0]
60001ad8:	2208      	movs	r2, #8
60001ada:	4937      	ldr	r1, [pc, #220]	; (60001bb8 <CrashReportClass::printTo(Print&) const+0x564>)
60001adc:	4628      	mov	r0, r5
60001ade:	685b      	ldr	r3, [r3, #4]
60001ae0:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ae2:	2300      	movs	r3, #0
60001ae4:	2210      	movs	r2, #16
60001ae6:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001aea:	4628      	mov	r0, r5
60001aec:	f000 fd98 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001af0:	4628      	mov	r0, r5
60001af2:	f000 fd91 	bl	60002618 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001af6:	07a0      	lsls	r0, r4, #30
60001af8:	d466      	bmi.n	60001bc8 <CrashReportClass::printTo(Print&) const+0x574>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001afa:	0061      	lsls	r1, r4, #1
60001afc:	f57f af30 	bpl.w	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001b00:	682b      	ldr	r3, [r5, #0]
60001b02:	221b      	movs	r2, #27
60001b04:	492d      	ldr	r1, [pc, #180]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x568>)
60001b06:	e062      	b.n	60001bce <CrashReportClass::printTo(Print&) const+0x57a>
60001b08:	682b      	ldr	r3, [r5, #0]
60001b0a:	2228      	movs	r2, #40	; 0x28
60001b0c:	492c      	ldr	r1, [pc, #176]	; (60001bc0 <CrashReportClass::printTo(Print&) const+0x56c>)
60001b0e:	685b      	ldr	r3, [r3, #4]
60001b10:	4628      	mov	r0, r5
60001b12:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b14:	4628      	mov	r0, r5
60001b16:	f000 fd7f 	bl	60002618 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001b1a:	0637      	lsls	r7, r6, #24
60001b1c:	d47d      	bmi.n	60001c1a <CrashReportClass::printTo(Print&) const+0x5c6>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001b1e:	05f4      	lsls	r4, r6, #23
60001b20:	d45c      	bmi.n	60001bdc <CrashReportClass::printTo(Print&) const+0x588>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001b22:	05b0      	lsls	r0, r6, #22
60001b24:	f100 80e4 	bmi.w	60001cf0 <CrashReportClass::printTo(Print&) const+0x69c>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001b28:	0571      	lsls	r1, r6, #21
60001b2a:	f100 80dd 	bmi.w	60001ce8 <CrashReportClass::printTo(Print&) const+0x694>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001b2e:	0532      	lsls	r2, r6, #20
60001b30:	f100 80ee 	bmi.w	60001d10 <CrashReportClass::printTo(Print&) const+0x6bc>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001b34:	04f3      	lsls	r3, r6, #19
60001b36:	f100 80e7 	bmi.w	60001d08 <CrashReportClass::printTo(Print&) const+0x6b4>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001b3a:	04b7      	lsls	r7, r6, #18
60001b3c:	d557      	bpl.n	60001bee <CrashReportClass::printTo(Print&) const+0x59a>
							  return write((const uint8_t *)str, strlen(str)); }
60001b3e:	682b      	ldr	r3, [r5, #0]
60001b40:	2231      	movs	r2, #49	; 0x31
60001b42:	4920      	ldr	r1, [pc, #128]	; (60001bc4 <CrashReportClass::printTo(Print&) const+0x570>)
60001b44:	e04d      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001b46:	bf00      	nop
60001b48:	20007b00 	.word	0x20007b00
60001b4c:	88888889 	.word	0x88888889
60001b50:	20007b10 	.word	0x20007b10
60001b54:	aaaaaaab 	.word	0xaaaaaaab
60001b58:	20007b38 	.word	0x20007b38
60001b5c:	20007b3c 	.word	0x20007b3c
60001b60:	2027ff00 	.word	0x2027ff00
60001b64:	20007fc4 	.word	0x20007fc4
60001b68:	20007fe8 	.word	0x20007fe8
60001b6c:	20007ff0 	.word	0x20007ff0
60001b70:	200085c0 	.word	0x200085c0
60001b74:	431bde83 	.word	0x431bde83
60001b78:	20008010 	.word	0x20008010
60001b7c:	200082d4 	.word	0x200082d4
60001b80:	200082f8 	.word	0x200082f8
60001b84:	400f8000 	.word	0x400f8000
60001b88:	20008324 	.word	0x20008324
60001b8c:	20008348 	.word	0x20008348
60001b90:	400d4000 	.word	0x400d4000
60001b94:	400ac000 	.word	0x400ac000
60001b98:	200082b0 	.word	0x200082b0
60001b9c:	20008284 	.word	0x20008284
60001ba0:	2000825c 	.word	0x2000825c
60001ba4:	20008230 	.word	0x20008230
60001ba8:	20008208 	.word	0x20008208
60001bac:	20008178 	.word	0x20008178
60001bb0:	20007b64 	.word	0x20007b64
60001bb4:	20007c14 	.word	0x20007c14
60001bb8:	20007f74 	.word	0x20007f74
60001bbc:	20007fa8 	.word	0x20007fa8
60001bc0:	20007b70 	.word	0x20007b70
60001bc4:	20007e38 	.word	0x20007e38
60001bc8:	682b      	ldr	r3, [r5, #0]
60001bca:	2226      	movs	r2, #38	; 0x26
60001bcc:	495c      	ldr	r1, [pc, #368]	; (60001d40 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001bce:	4628      	mov	r0, r5
60001bd0:	685b      	ldr	r3, [r3, #4]
60001bd2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bd4:	4628      	mov	r0, r5
60001bd6:	f000 fd1f 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001bda:	e6c1      	b.n	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001bdc:	682b      	ldr	r3, [r5, #0]
60001bde:	2220      	movs	r2, #32
60001be0:	4958      	ldr	r1, [pc, #352]	; (60001d44 <CrashReportClass::printTo(Print&) const+0x6f0>)
60001be2:	685b      	ldr	r3, [r3, #4]
60001be4:	4628      	mov	r0, r5
60001be6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001be8:	4628      	mov	r0, r5
60001bea:	f000 fd15 	bl	60002618 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001bee:	0434      	lsls	r4, r6, #16
60001bf0:	d43f      	bmi.n	60001c72 <CrashReportClass::printTo(Print&) const+0x61e>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001bf2:	03f0      	lsls	r0, r6, #15
60001bf4:	d42d      	bmi.n	60001c52 <CrashReportClass::printTo(Print&) const+0x5fe>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001bf6:	03b1      	lsls	r1, r6, #14
60001bf8:	f100 8082 	bmi.w	60001d00 <CrashReportClass::printTo(Print&) const+0x6ac>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001bfc:	0372      	lsls	r2, r6, #13
60001bfe:	d44a      	bmi.n	60001c96 <CrashReportClass::printTo(Print&) const+0x642>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001c00:	0333      	lsls	r3, r6, #12
60001c02:	f100 8091 	bmi.w	60001d28 <CrashReportClass::printTo(Print&) const+0x6d4>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001c06:	01f7      	lsls	r7, r6, #7
60001c08:	f100 808a 	bmi.w	60001d20 <CrashReportClass::printTo(Print&) const+0x6cc>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001c0c:	01b4      	lsls	r4, r6, #6
60001c0e:	f57f aea1 	bpl.w	60001954 <CrashReportClass::printTo(Print&) const+0x300>
							  return write((const uint8_t *)str, strlen(str)); }
60001c12:	682b      	ldr	r3, [r5, #0]
60001c14:	221b      	movs	r2, #27
60001c16:	494c      	ldr	r1, [pc, #304]	; (60001d48 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001c18:	e01e      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001c1a:	682b      	ldr	r3, [r5, #0]
60001c1c:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001c1e:	4c4b      	ldr	r4, [pc, #300]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001c20:	4628      	mov	r0, r5
60001c22:	494b      	ldr	r1, [pc, #300]	; (60001d50 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001c24:	685b      	ldr	r3, [r3, #4]
60001c26:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c28:	2210      	movs	r2, #16
60001c2a:	2300      	movs	r3, #0
60001c2c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001c30:	4628      	mov	r0, r5
60001c32:	f000 fcf5 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001c36:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001c3a:	2a1f      	cmp	r2, #31
60001c3c:	d92f      	bls.n	60001c9e <CrashReportClass::printTo(Print&) const+0x64a>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001c3e:	4b45      	ldr	r3, [pc, #276]	; (60001d54 <CrashReportClass::printTo(Print&) const+0x700>)
60001c40:	429a      	cmp	r2, r3
60001c42:	d302      	bcc.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001c44:	3320      	adds	r3, #32
60001c46:	429a      	cmp	r2, r3
60001c48:	d372      	bcc.n	60001d30 <CrashReportClass::printTo(Print&) const+0x6dc>
        p.println();
60001c4a:	4628      	mov	r0, r5
60001c4c:	f000 fce4 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001c50:	e765      	b.n	60001b1e <CrashReportClass::printTo(Print&) const+0x4ca>
							  return write((const uint8_t *)str, strlen(str)); }
60001c52:	682b      	ldr	r3, [r5, #0]
60001c54:	2223      	movs	r2, #35	; 0x23
60001c56:	4940      	ldr	r1, [pc, #256]	; (60001d58 <CrashReportClass::printTo(Print&) const+0x704>)
60001c58:	685b      	ldr	r3, [r3, #4]
60001c5a:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001c5c:	4e3b      	ldr	r6, [pc, #236]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001c5e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c60:	4628      	mov	r0, r5
60001c62:	f000 fcd9 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001c66:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001c6a:	2c00      	cmp	r4, #0
60001c6c:	f43f ae78 	beq.w	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
60001c70:	e731      	b.n	60001ad6 <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001c72:	682b      	ldr	r3, [r5, #0]
60001c74:	2221      	movs	r2, #33	; 0x21
60001c76:	4939      	ldr	r1, [pc, #228]	; (60001d5c <CrashReportClass::printTo(Print&) const+0x708>)
60001c78:	4628      	mov	r0, r5
60001c7a:	685b      	ldr	r3, [r3, #4]
60001c7c:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001c7e:	4933      	ldr	r1, [pc, #204]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c80:	2300      	movs	r3, #0
60001c82:	2210      	movs	r2, #16
60001c84:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001c88:	4628      	mov	r0, r5
60001c8a:	f000 fcc9 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001c8e:	4628      	mov	r0, r5
60001c90:	f000 fcc2 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001c94:	e7ad      	b.n	60001bf2 <CrashReportClass::printTo(Print&) const+0x59e>
							  return write((const uint8_t *)str, strlen(str)); }
60001c96:	682b      	ldr	r3, [r5, #0]
60001c98:	2228      	movs	r2, #40	; 0x28
60001c9a:	4931      	ldr	r1, [pc, #196]	; (60001d60 <CrashReportClass::printTo(Print&) const+0x70c>)
60001c9c:	e7dc      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001c9e:	682b      	ldr	r3, [r5, #0]
60001ca0:	221e      	movs	r2, #30
60001ca2:	4930      	ldr	r1, [pc, #192]	; (60001d64 <CrashReportClass::printTo(Print&) const+0x710>)
60001ca4:	4628      	mov	r0, r5
60001ca6:	685b      	ldr	r3, [r3, #4]
60001ca8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001caa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001cae:	2300      	movs	r3, #0
60001cb0:	2210      	movs	r2, #16
60001cb2:	4628      	mov	r0, r5
60001cb4:	f000 fcb4 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cb8:	682b      	ldr	r3, [r5, #0]
60001cba:	223e      	movs	r2, #62	; 0x3e
60001cbc:	492a      	ldr	r1, [pc, #168]	; (60001d68 <CrashReportClass::printTo(Print&) const+0x714>)
60001cbe:	685b      	ldr	r3, [r3, #4]
60001cc0:	4628      	mov	r0, r5
60001cc2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cc4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001cc8:	2300      	movs	r3, #0
60001cca:	2210      	movs	r2, #16
60001ccc:	4628      	mov	r0, r5
60001cce:	f000 fca7 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cd2:	682b      	ldr	r3, [r5, #0]
60001cd4:	221d      	movs	r2, #29
60001cd6:	4925      	ldr	r1, [pc, #148]	; (60001d6c <CrashReportClass::printTo(Print&) const+0x718>)
60001cd8:	685b      	ldr	r3, [r3, #4]
60001cda:	4628      	mov	r0, r5
60001cdc:	4798      	blx	r3
60001cde:	e7b4      	b.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001ce0:	682b      	ldr	r3, [r5, #0]
60001ce2:	2229      	movs	r2, #41	; 0x29
60001ce4:	4922      	ldr	r1, [pc, #136]	; (60001d70 <CrashReportClass::printTo(Print&) const+0x71c>)
60001ce6:	e712      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001ce8:	682b      	ldr	r3, [r5, #0]
60001cea:	2244      	movs	r2, #68	; 0x44
60001cec:	4921      	ldr	r1, [pc, #132]	; (60001d74 <CrashReportClass::printTo(Print&) const+0x720>)
60001cee:	e778      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001cf0:	682b      	ldr	r3, [r5, #0]
60001cf2:	222c      	movs	r2, #44	; 0x2c
60001cf4:	4920      	ldr	r1, [pc, #128]	; (60001d78 <CrashReportClass::printTo(Print&) const+0x724>)
60001cf6:	e774      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001cf8:	682b      	ldr	r3, [r5, #0]
60001cfa:	2221      	movs	r2, #33	; 0x21
60001cfc:	491f      	ldr	r1, [pc, #124]	; (60001d7c <CrashReportClass::printTo(Print&) const+0x728>)
60001cfe:	e706      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001d00:	682b      	ldr	r3, [r5, #0]
60001d02:	2232      	movs	r2, #50	; 0x32
60001d04:	491e      	ldr	r1, [pc, #120]	; (60001d80 <CrashReportClass::printTo(Print&) const+0x72c>)
60001d06:	e7a7      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d08:	682b      	ldr	r3, [r5, #0]
60001d0a:	2233      	movs	r2, #51	; 0x33
60001d0c:	491d      	ldr	r1, [pc, #116]	; (60001d84 <CrashReportClass::printTo(Print&) const+0x730>)
60001d0e:	e768      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001d10:	682b      	ldr	r3, [r5, #0]
60001d12:	223f      	movs	r2, #63	; 0x3f
60001d14:	491c      	ldr	r1, [pc, #112]	; (60001d88 <CrashReportClass::printTo(Print&) const+0x734>)
60001d16:	e764      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001d18:	682b      	ldr	r3, [r5, #0]
60001d1a:	2225      	movs	r2, #37	; 0x25
60001d1c:	491b      	ldr	r1, [pc, #108]	; (60001d8c <CrashReportClass::printTo(Print&) const+0x738>)
60001d1e:	e6f6      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001d20:	682b      	ldr	r3, [r5, #0]
60001d22:	2228      	movs	r2, #40	; 0x28
60001d24:	491a      	ldr	r1, [pc, #104]	; (60001d90 <CrashReportClass::printTo(Print&) const+0x73c>)
60001d26:	e797      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d28:	682b      	ldr	r3, [r5, #0]
60001d2a:	2216      	movs	r2, #22
60001d2c:	4919      	ldr	r1, [pc, #100]	; (60001d94 <CrashReportClass::printTo(Print&) const+0x740>)
60001d2e:	e793      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d30:	682b      	ldr	r3, [r5, #0]
60001d32:	2241      	movs	r2, #65	; 0x41
60001d34:	4918      	ldr	r1, [pc, #96]	; (60001d98 <CrashReportClass::printTo(Print&) const+0x744>)
60001d36:	4628      	mov	r0, r5
60001d38:	685b      	ldr	r3, [r3, #4]
60001d3a:	4798      	blx	r3
60001d3c:	e785      	b.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001d3e:	bf00      	nop
60001d40:	20007f80 	.word	0x20007f80
60001d44:	20007d28 	.word	0x20007d28
60001d48:	20007f58 	.word	0x20007f58
60001d4c:	2027ff00 	.word	0x2027ff00
60001d50:	20007c40 	.word	0x20007c40
60001d54:	2002b4e0 	.word	0x2002b4e0
60001d58:	20007e90 	.word	0x20007e90
60001d5c:	20007e6c 	.word	0x20007e6c
60001d60:	20007ee8 	.word	0x20007ee8
60001d64:	20007c64 	.word	0x20007c64
60001d68:	20007c84 	.word	0x20007c84
60001d6c:	20007cc4 	.word	0x20007cc4
60001d70:	20007bc0 	.word	0x20007bc0
60001d74:	20007d7c 	.word	0x20007d7c
60001d78:	20007d4c 	.word	0x20007d4c
60001d7c:	20007b9c 	.word	0x20007b9c
60001d80:	20007eb4 	.word	0x20007eb4
60001d84:	20007e04 	.word	0x20007e04
60001d88:	20007dc4 	.word	0x20007dc4
60001d8c:	20007bec 	.word	0x20007bec
60001d90:	20007f2c 	.word	0x20007f2c
60001d94:	20007f14 	.word	0x20007f14
60001d98:	20007ce4 	.word	0x20007ce4

60001d9c <CrashReportClass::clear()>:
	info->len = 0;
60001d9c:	4a0f      	ldr	r2, [pc, #60]	; (60001ddc <CrashReportClass::clear()+0x40>)
60001d9e:	2300      	movs	r3, #0
	info->ipsr  = 0;
60001da0:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->hfsr  = 0;
60001da4:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->bfar  = 0;
60001da8:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->xpsr  = 0;
60001dac:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001db0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	asm("dsb");
60001db4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
60001db8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001dbc:	4808      	ldr	r0, [pc, #32]	; (60001de0 <CrashReportClass::clear()+0x44>)
60001dbe:	4909      	ldr	r1, [pc, #36]	; (60001de4 <CrashReportClass::clear()+0x48>)
60001dc0:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
60001dc4:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
	asm("dsb");
60001dc8:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001dcc:	f3bf 8f6f 	isb	sy
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001dd0:	4a05      	ldr	r2, [pc, #20]	; (60001de8 <CrashReportClass::clear()+0x4c>)
60001dd2:	6891      	ldr	r1, [r2, #8]
60001dd4:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001dd6:	6313      	str	r3, [r2, #48]	; 0x30
}
60001dd8:	4770      	bx	lr
60001dda:	bf00      	nop
60001ddc:	2027ff00 	.word	0x2027ff00
60001de0:	2027ff80 	.word	0x2027ff80
60001de4:	2027ffa0 	.word	0x2027ffa0
60001de8:	400f8000 	.word	0x400f8000

60001dec <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001dec:	4b12      	ldr	r3, [pc, #72]	; (60001e38 <CrashReportClass::operator bool()+0x4c>)
60001dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001df2:	2b0b      	cmp	r3, #11
60001df4:	d11e      	bne.n	60001e34 <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001df6:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001dfa:	4810      	ldr	r0, [pc, #64]	; (60001e3c <CrashReportClass::operator bool()+0x50>)
{
60001dfc:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001dfe:	4d10      	ldr	r5, [pc, #64]	; (60001e40 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001e00:	4c10      	ldr	r4, [pc, #64]	; (60001e44 <CrashReportClass::operator bool()+0x58>)
60001e02:	e001      	b.n	60001e08 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001e04:	686b      	ldr	r3, [r5, #4]
60001e06:	4675      	mov	r5, lr
60001e08:	f105 0e04 	add.w	lr, r5, #4
60001e0c:	405a      	eors	r2, r3
60001e0e:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e10:	f002 0301 	and.w	r3, r2, #1
60001e14:	3901      	subs	r1, #1
60001e16:	fb00 f303 	mul.w	r3, r0, r3
60001e1a:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001e1e:	d1f7      	bne.n	60001e10 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001e20:	45a6      	cmp	lr, r4
60001e22:	d1ef      	bne.n	60001e04 <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001e24:	4b04      	ldr	r3, [pc, #16]	; (60001e38 <CrashReportClass::operator bool()+0x4c>)
60001e26:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001e2a:	1a80      	subs	r0, r0, r2
60001e2c:	fab0 f080 	clz	r0, r0
60001e30:	0940      	lsrs	r0, r0, #5
}
60001e32:	bd30      	pop	{r4, r5, pc}
	return false;
60001e34:	2000      	movs	r0, #0
}
60001e36:	4770      	bx	lr
60001e38:	2027ff00 	.word	0x2027ff00
60001e3c:	edb88320 	.word	0xedb88320
60001e40:	2027ff80 	.word	0x2027ff80
60001e44:	2027ffa8 	.word	0x2027ffa8

60001e48 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001e48:	4770      	bx	lr
60001e4a:	bf00      	nop

60001e4c <startup_default_middle_hook>:
60001e4c:	4770      	bx	lr
60001e4e:	bf00      	nop

60001e50 <startup_default_late_hook>:
60001e50:	4770      	bx	lr
60001e52:	bf00      	nop

60001e54 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001e54:	bf00      	nop
60001e56:	4770      	bx	lr

60001e58 <configure_cache>:
{
60001e58:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001e5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e5e:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e60:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e62:	482b      	ldr	r0, [pc, #172]	; (60001f10 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001e64:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e68:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e6c:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e6e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001e72:	4828      	ldr	r0, [pc, #160]	; (60001f14 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e74:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001e78:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001e7a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001e7e:	4826      	ldr	r0, [pc, #152]	; (60001f18 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001e80:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001e84:	4a25      	ldr	r2, [pc, #148]	; (60001f1c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001e86:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001e8a:	4c25      	ldr	r4, [pc, #148]	; (60001f20 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001e8c:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001e90:	4824      	ldr	r0, [pc, #144]	; (60001f24 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001e92:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001e96:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001e9a:	4c23      	ldr	r4, [pc, #140]	; (60001f28 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001e9c:	4823      	ldr	r0, [pc, #140]	; (60001f2c <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001e9e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001ea2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001ea6:	4c22      	ldr	r4, [pc, #136]	; (60001f30 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001ea8:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001eac:	4821      	ldr	r0, [pc, #132]	; (60001f34 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001eae:	4a22      	ldr	r2, [pc, #136]	; (60001f38 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001eb0:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001eb4:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001eb8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ebc:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ec0:	4c1e      	ldr	r4, [pc, #120]	; (60001f3c <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ec2:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ec4:	481e      	ldr	r0, [pc, #120]	; (60001f40 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ec6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001eca:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ece:	4a1d      	ldr	r2, [pc, #116]	; (60001f44 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ed0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001ed4:	4c1c      	ldr	r4, [pc, #112]	; (60001f48 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ed6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001eda:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001edc:	481b      	ldr	r0, [pc, #108]	; (60001f4c <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001ede:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001ee2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001ee6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001eea:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001eee:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001ef2:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001ef6:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001efa:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001efe:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001f02:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001f06:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001f0a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001f0e:	4770      	bx	lr
60001f10:	1000003f 	.word	0x1000003f
60001f14:	03080025 	.word	0x03080025
60001f18:	00100009 	.word	0x00100009
60001f1c:	2002b4e0 	.word	0x2002b4e0
60001f20:	00200013 	.word	0x00200013
60001f24:	07020021 	.word	0x07020021
60001f28:	20000014 	.word	0x20000014
60001f2c:	13080025 	.word	0x13080025
60001f30:	10000009 	.word	0x10000009
60001f34:	20200016 	.word	0x20200016
60001f38:	130b0027 	.word	0x130b0027
60001f3c:	40000017 	.word	0x40000017
60001f40:	60000018 	.word	0x60000018
60001f44:	070b002f 	.word	0x070b002f
60001f48:	70000019 	.word	0x70000019
60001f4c:	130b002f 	.word	0x130b002f

60001f50 <configure_external_ram>:
{
60001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f52:	4bb8      	ldr	r3, [pc, #736]	; (60002234 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f54:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f56:	4eb8      	ldr	r6, [pc, #736]	; (60002238 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f58:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f5a:	4fb8      	ldr	r7, [pc, #736]	; (6000223c <configure_external_ram+0x2ec>)
{
60001f5c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f5e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f62:	49b7      	ldr	r1, [pc, #732]	; (60002240 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f64:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f68:	4db6      	ldr	r5, [pc, #728]	; (60002244 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f6a:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001f6e:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001f72:	4cb5      	ldr	r4, [pc, #724]	; (60002248 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001f74:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f78:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f7c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f80:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f84:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001f88:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f8c:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001f8e:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001f90:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001f92:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001f94:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001fa2:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fa6:	4aa9      	ldr	r2, [pc, #676]	; (6000224c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001fa8:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001fac:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001fb0:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001fb4:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001fb8:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fbc:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001fbe:	4ba4      	ldr	r3, [pc, #656]	; (60002250 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fc0:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001fc2:	48a4      	ldr	r0, [pc, #656]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001fc4:	49a4      	ldr	r1, [pc, #656]	; (60002258 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001fc6:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fc8:	4aa4      	ldr	r2, [pc, #656]	; (6000225c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fca:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001fcc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001fd0:	f043 030c 	orr.w	r3, r3, #12
60001fd4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001fd8:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001fdc:	6803      	ldr	r3, [r0, #0]
60001fde:	f043 0302 	orr.w	r3, r3, #2
60001fe2:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001fe4:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fe6:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001fe8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fec:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001fee:	4b9c      	ldr	r3, [pc, #624]	; (60002260 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ff0:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001ff2:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ff4:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001ff6:	4c9b      	ldr	r4, [pc, #620]	; (60002264 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ff8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ffa:	4a9b      	ldr	r2, [pc, #620]	; (60002268 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002000:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60002002:	68c3      	ldr	r3, [r0, #12]
60002004:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60002008:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000200a:	6a03      	ldr	r3, [r0, #32]
6000200c:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000200e:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002010:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002012:	6a03      	ldr	r3, [r0, #32]
60002014:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60002016:	4a95      	ldr	r2, [pc, #596]	; (6000226c <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002018:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000201a:	4c95      	ldr	r4, [pc, #596]	; (60002270 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000201c:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000201e:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60002020:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60002022:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60002024:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60002028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000202c:	f043 0301 	orr.w	r3, r3, #1
60002030:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002034:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002038:	498e      	ldr	r1, [pc, #568]	; (60002274 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000203a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000203e:	f043 0301 	orr.w	r3, r3, #1
60002042:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002046:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000204a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000204c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000204e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002050:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002054:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002056:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002058:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000205a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000205e:	6803      	ldr	r3, [r0, #0]
60002060:	f023 0302 	bic.w	r3, r3, #2
60002064:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002066:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002068:	4b83      	ldr	r3, [pc, #524]	; (60002278 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000206a:	4984      	ldr	r1, [pc, #528]	; (6000227c <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000206c:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000206e:	f843 2b04 	str.w	r2, [r3], #4
60002072:	428b      	cmp	r3, r1
60002074:	d1fb      	bne.n	6000206e <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60002076:	4a77      	ldr	r2, [pc, #476]	; (60002254 <configure_external_ram+0x304>)
60002078:	6813      	ldr	r3, [r2, #0]
6000207a:	f043 0301 	orr.w	r3, r3, #1
6000207e:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60002080:	6813      	ldr	r3, [r2, #0]
60002082:	f013 0301 	ands.w	r3, r3, #1
60002086:	d1fb      	bne.n	60002080 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002088:	487a      	ldr	r0, [pc, #488]	; (60002274 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000208a:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
6000208c:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002090:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002092:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002096:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002098:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
6000209c:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020a0:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600020a4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020a8:	4975      	ldr	r1, [pc, #468]	; (60002280 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600020aa:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020ae:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020b2:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020b6:	4873      	ldr	r0, [pc, #460]	; (60002284 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020b8:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020bc:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600020c0:	4c71      	ldr	r4, [pc, #452]	; (60002288 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020c2:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600020c6:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600020ca:	4970      	ldr	r1, [pc, #448]	; (6000228c <configure_external_ram+0x33c>)
600020cc:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600020d0:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600020d2:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600020d6:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020da:	485e      	ldr	r0, [pc, #376]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600020dc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020e0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600020e4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020e8:	6943      	ldr	r3, [r0, #20]
600020ea:	07da      	lsls	r2, r3, #31
600020ec:	d5fc      	bpl.n	600020e8 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600020ee:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600020f0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020f6:	4957      	ldr	r1, [pc, #348]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600020f8:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600020fa:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020fe:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002102:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002106:	694b      	ldr	r3, [r1, #20]
60002108:	07db      	lsls	r3, r3, #31
6000210a:	d5fc      	bpl.n	60002106 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000210c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000210e:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002110:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002114:	4a4f      	ldr	r2, [pc, #316]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002116:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002118:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000211c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002120:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002124:	6953      	ldr	r3, [r2, #20]
60002126:	07df      	lsls	r7, r3, #31
60002128:	d5fc      	bpl.n	60002124 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000212a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000212c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000212e:	4858      	ldr	r0, [pc, #352]	; (60002290 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002130:	4948      	ldr	r1, [pc, #288]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002132:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002134:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002138:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000213c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002140:	694b      	ldr	r3, [r1, #20]
60002142:	07de      	lsls	r6, r3, #31
60002144:	d5fc      	bpl.n	60002140 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60002146:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000214a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000214e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60002150:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002152:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002154:	4293      	cmp	r3, r2
60002156:	d165      	bne.n	60002224 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002158:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000215a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000215e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002160:	483c      	ldr	r0, [pc, #240]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60002162:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002166:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000216a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000216e:	6943      	ldr	r3, [r0, #20]
60002170:	07dd      	lsls	r5, r3, #31
60002172:	d5fc      	bpl.n	6000216e <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002174:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002176:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000217a:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000217c:	4a35      	ldr	r2, [pc, #212]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000217e:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60002180:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002184:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002188:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000218c:	6953      	ldr	r3, [r2, #20]
6000218e:	07dc      	lsls	r4, r3, #31
60002190:	d5fc      	bpl.n	6000218c <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002192:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002194:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002198:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000219c:	492d      	ldr	r1, [pc, #180]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000219e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021a0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021a4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021a8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ac:	694b      	ldr	r3, [r1, #20]
600021ae:	07d8      	lsls	r0, r3, #31
600021b0:	d5fc      	bpl.n	600021ac <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021b2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021b4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021bc:	4a25      	ldr	r2, [pc, #148]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021be:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600021c0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021c4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021c8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021cc:	6953      	ldr	r3, [r2, #20]
600021ce:	07d9      	lsls	r1, r3, #31
600021d0:	d5fc      	bpl.n	600021cc <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021d2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021d4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021d8:	482d      	ldr	r0, [pc, #180]	; (60002290 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021da:	491e      	ldr	r1, [pc, #120]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021dc:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021de:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021e2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ea:	694b      	ldr	r3, [r1, #20]
600021ec:	07da      	lsls	r2, r3, #31
600021ee:	d5fc      	bpl.n	600021ea <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600021f0:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600021f4:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021f8:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600021fa:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021fc:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600021fe:	4293      	cmp	r3, r2
60002200:	d050      	beq.n	600022a4 <configure_external_ram+0x354>
60002202:	2508      	movs	r5, #8
60002204:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60002208:	4922      	ldr	r1, [pc, #136]	; (60002294 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
6000220a:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
6000220c:	4b22      	ldr	r3, [pc, #136]	; (60002298 <configure_external_ram+0x348>)
			external_psram_size = 16;
6000220e:	4a23      	ldr	r2, [pc, #140]	; (6000229c <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002210:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60002212:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60002214:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002216:	2301      	movs	r3, #1
60002218:	4821      	ldr	r0, [pc, #132]	; (600022a0 <configure_external_ram+0x350>)
6000221a:	4422      	add	r2, r4
6000221c:	f000 fa14 	bl	60002648 <__sm_set_pool_veneer>
}
60002220:	b003      	add	sp, #12
60002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60002224:	4b1e      	ldr	r3, [pc, #120]	; (600022a0 <configure_external_ram+0x350>)
60002226:	2200      	movs	r2, #0
60002228:	e9c3 2200 	strd	r2, r2, [r3]
6000222c:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60002230:	b003      	add	sp, #12
60002232:	bdf0      	pop	{r4, r5, r6, r7, pc}
60002234:	401f8000 	.word	0x401f8000
60002238:	0001b0f9 	.word	0x0001b0f9
6000223c:	000110f9 	.word	0x000110f9
60002240:	401f8400 	.word	0x401f8400
60002244:	000170f9 	.word	0x000170f9
60002248:	400fc000 	.word	0x400fc000
6000224c:	1ffffcff 	.word	0x1ffffcff
60002250:	a0000300 	.word	0xa0000300
60002254:	402a4000 	.word	0x402a4000
60002258:	402a8000 	.word	0x402a8000
6000225c:	ffff0012 	.word	0xffff0012
60002260:	00f737ff 	.word	0x00f737ff
60002264:	80000040 	.word	0x80000040
60002268:	7cf0ff00 	.word	0x7cf0ff00
6000226c:	830f00ff 	.word	0x830f00ff
60002270:	00020063 	.word	0x00020063
60002274:	5af05af0 	.word	0x5af05af0
60002278:	402a4200 	.word	0x402a4200
6000227c:	402a4300 	.word	0x402a4300
60002280:	3018049f 	.word	0x3018049f
60002284:	0a1806eb 	.word	0x0a1806eb
60002288:	0a180638 	.word	0x0a180638
6000228c:	26013206 	.word	0x26013206
60002290:	00030004 	.word	0x00030004
60002294:	70000000 	.word	0x70000000
60002298:	70000000 	.word	0x70000000
6000229c:	2002b49f 	.word	0x2002b49f
600022a0:	2002ae3c 	.word	0x2002ae3c
	FLEXSPI2_IPCR0 = addr;
600022a4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022ac:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022ae:	4808      	ldr	r0, [pc, #32]	; (600022d0 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
600022b0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022b4:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022b8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022bc:	6943      	ldr	r3, [r0, #20]
600022be:	07db      	lsls	r3, r3, #31
600022c0:	d5fc      	bpl.n	600022bc <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022c2:	2301      	movs	r3, #1
600022c4:	2510      	movs	r5, #16
600022c6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
600022ca:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
600022cc:	e79c      	b.n	60002208 <configure_external_ram+0x2b8>
600022ce:	bf00      	nop
600022d0:	402a4000 	.word	0x402a4000

600022d4 <usb_pll_start>:
{
600022d4:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600022d6:	4a15      	ldr	r2, [pc, #84]	; (6000232c <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600022d8:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600022da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600022de:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600022e2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600022e6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600022ea:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600022ee:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600022f0:	f013 0f02 	tst.w	r3, #2
600022f4:	d10e      	bne.n	60002314 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600022f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600022fa:	d00f      	beq.n	6000231c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600022fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60002300:	d00e      	beq.n	60002320 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60002302:	2b00      	cmp	r3, #0
60002304:	daf3      	bge.n	600022ee <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60002306:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000230a:	d10b      	bne.n	60002324 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000230c:	065b      	lsls	r3, r3, #25
6000230e:	d50b      	bpl.n	60002328 <usb_pll_start+0x54>
}
60002310:	bcf0      	pop	{r4, r5, r6, r7}
60002312:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002314:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60002316:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60002318:	6190      	str	r0, [r2, #24]
			continue;
6000231a:	e7e8      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000231c:	6155      	str	r5, [r2, #20]
			continue;
6000231e:	e7e6      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60002320:	6156      	str	r6, [r2, #20]
			continue;
60002322:	e7e4      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60002324:	6191      	str	r1, [r2, #24]
			continue;
60002326:	e7e2      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002328:	6157      	str	r7, [r2, #20]
			continue;
6000232a:	e7e0      	b.n	600022ee <usb_pll_start+0x1a>
6000232c:	400d8000 	.word	0x400d8000

60002330 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002330:	4a3f      	ldr	r2, [pc, #252]	; (60002430 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002332:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60002334:	493f      	ldr	r1, [pc, #252]	; (60002434 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002336:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000233a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000233e:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002342:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60002438 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002346:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000234a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 6000243c <tempmon_init+0x10c>
{
6000234e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002354:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002358:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000235c:	4d38      	ldr	r5, [pc, #224]	; (60002440 <tempmon_init+0x110>)
6000235e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002360:	4c38      	ldr	r4, [pc, #224]	; (60002444 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002362:	4839      	ldr	r0, [pc, #228]	; (60002448 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002364:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002366:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000236a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000236c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002374:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002378:	ee07 1a10 	vmov	s14, r1
6000237c:	4b33      	ldr	r3, [pc, #204]	; (6000244c <tempmon_init+0x11c>)
6000237e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002382:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002384:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002388:	4931      	ldr	r1, [pc, #196]	; (60002450 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002392:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002396:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000239a:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000239e:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023a2:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023aa:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023ae:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023b2:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600023b6:	4827      	ldr	r0, [pc, #156]	; (60002454 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023b8:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023bc:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023c0:	ee75 5a87 	vadd.f32	s11, s11, s14
600023c4:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023c8:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023cc:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023d0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023d8:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023e0:	ee16 3a10 	vmov	r3, s12
600023e4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023ec:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600023f0:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023f2:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023f6:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600023fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
600023fe:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60002402:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60002404:	4914      	ldr	r1, [pc, #80]	; (60002458 <tempmon_init+0x128>)
60002406:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000240a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000240e:	f043 0302 	orr.w	r3, r3, #2
60002412:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60002416:	4b11      	ldr	r3, [pc, #68]	; (6000245c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002418:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000241c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002420:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002424:	2201      	movs	r2, #1
}
60002426:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002428:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000242c:	4770      	bx	lr
6000242e:	bf00      	nop
60002430:	400d8100 	.word	0x400d8100
60002434:	401f4400 	.word	0x401f4400
60002438:	42aa0000 	.word	0x42aa0000
6000243c:	42b40000 	.word	0x42b40000
60002440:	2002af8c 	.word	0x2002af8c
60002444:	2002af88 	.word	0x2002af88
60002448:	2002af90 	.word	0x2002af90
6000244c:	2002af94 	.word	0x2002af94
60002450:	0fff0000 	.word	0x0fff0000
60002454:	e000e400 	.word	0xe000e400
60002458:	20008c00 	.word	0x20008c00
6000245c:	00008459 	.word	0x00008459

60002460 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002460:	4b31      	ldr	r3, [pc, #196]	; (60002528 <usb_init+0xc8>)
60002462:	f640 7261 	movw	r2, #3937	; 0xf61
{
60002466:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002468:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000246c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60002470:	f000 f8e2 	bl	60002638 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002474:	4a2d      	ldr	r2, [pc, #180]	; (6000252c <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60002476:	492e      	ldr	r1, [pc, #184]	; (60002530 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002478:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000247c:	482d      	ldr	r0, [pc, #180]	; (60002534 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000247e:	f043 0303 	orr.w	r3, r3, #3
60002482:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002486:	4b2c      	ldr	r3, [pc, #176]	; (60002538 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002488:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000248c:	6802      	ldr	r2, [r0, #0]
6000248e:	421a      	tst	r2, r3
60002490:	d103      	bne.n	6000249a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60002492:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60002496:	079a      	lsls	r2, r3, #30
60002498:	d01b      	beq.n	600024d2 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000249a:	4a25      	ldr	r2, [pc, #148]	; (60002530 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
6000249c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600024a0:	4b24      	ldr	r3, [pc, #144]	; (60002534 <usb_init+0xd4>)
600024a2:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600024a4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024a8:	f043 0302 	orr.w	r3, r3, #2
600024ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600024b0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024b4:	079b      	lsls	r3, r3, #30
600024b6:	d4fb      	bmi.n	600024b0 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600024bc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600024c0:	4b1c      	ldr	r3, [pc, #112]	; (60002534 <usb_init+0xd4>)
600024c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024c6:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600024ca:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600024cc:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
600024ce:	f000 f8c3 	bl	60002658 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600024d2:	4a18      	ldr	r2, [pc, #96]	; (60002534 <usb_init+0xd4>)
600024d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024d8:	4c15      	ldr	r4, [pc, #84]	; (60002530 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600024da:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600024dc:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024de:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024e0:	4b16      	ldr	r3, [pc, #88]	; (6000253c <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600024e2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024e4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024e8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024ec:	4618      	mov	r0, r3
600024ee:	f000 f887 	bl	60002600 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600024f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024f6:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600024f8:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600024fc:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002500:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60002502:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60002506:	641a      	str	r2, [r3, #64]	; 0x40
60002508:	4b0d      	ldr	r3, [pc, #52]	; (60002540 <usb_init+0xe0>)
6000250a:	4a0e      	ldr	r2, [pc, #56]	; (60002544 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000250c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60002510:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60002514:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60002518:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000251c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000251e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60002522:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60002526:	bd10      	pop	{r4, pc}
60002528:	400d8000 	.word	0x400d8000
6000252c:	400fc000 	.word	0x400fc000
60002530:	402e0000 	.word	0x402e0000
60002534:	400d9000 	.word	0x400d9000
60002538:	001e1c00 	.word	0x001e1c00
6000253c:	20000000 	.word	0x20000000
60002540:	20008c00 	.word	0x20008c00
60002544:	00008641 	.word	0x00008641

60002548 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60002548:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000254a:	4b0e      	ldr	r3, [pc, #56]	; (60002584 <_reboot_Teensyduino_+0x3c>)
6000254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000254e:	079b      	lsls	r3, r3, #30
60002550:	d400      	bmi.n	60002554 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60002552:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60002554:	b672      	cpsid	i
		USB1_USBCMD = 0;
60002556:	4b0c      	ldr	r3, [pc, #48]	; (60002588 <_reboot_Teensyduino_+0x40>)
60002558:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000255a:	4a0c      	ldr	r2, [pc, #48]	; (6000258c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
6000255c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002560:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002564:	490a      	ldr	r1, [pc, #40]	; (60002590 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002566:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000256a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000256c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000256e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002572:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60002576:	4807      	ldr	r0, [pc, #28]	; (60002594 <_reboot_Teensyduino_+0x4c>)
60002578:	4a07      	ldr	r2, [pc, #28]	; (60002598 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000257a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
6000257c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000257e:	689b      	ldr	r3, [r3, #8]
60002580:	4798      	blx	r3
	}
	__builtin_unreachable();
60002582:	bf00      	nop
60002584:	401f4400 	.word	0x401f4400
60002588:	402e0000 	.word	0x402e0000
6000258c:	400ac000 	.word	0x400ac000
60002590:	00200003 	.word	0x00200003
60002594:	20208000 	.word	0x20208000
60002598:	eb120000 	.word	0xeb120000

6000259c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000259c:	4b10      	ldr	r3, [pc, #64]	; (600025e0 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000259e:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025a0:	4a10      	ldr	r2, [pc, #64]	; (600025e4 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025a2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025a4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600025a8:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025aa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025ac:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600025b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025b2:	f441 7140 	orr.w	r1, r1, #768	; 0x300
600025b6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025b8:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600025ba:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600025bc:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025be:	061b      	lsls	r3, r3, #24
600025c0:	d4fc      	bmi.n	600025bc <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600025c2:	4a09      	ldr	r2, [pc, #36]	; (600025e8 <analog_init+0x4c>)
600025c4:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600025c8:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600025ca:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600025cc:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600025ce:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025d0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600025d4:	d1fb      	bne.n	600025ce <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600025d6:	4a05      	ldr	r2, [pc, #20]	; (600025ec <analog_init+0x50>)
600025d8:	7013      	strb	r3, [r2, #0]
}
600025da:	f85d 4b04 	ldr.w	r4, [sp], #4
600025de:	4770      	bx	lr
600025e0:	400fc000 	.word	0x400fc000
600025e4:	400c4000 	.word	0x400c4000
600025e8:	400c8000 	.word	0x400c8000
600025ec:	2002b49e 	.word	0x2002b49e

600025f0 <_init>:
600025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600025f2:	bf00      	nop
600025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
600025f6:	bc08      	pop	{r3}
600025f8:	469e      	mov	lr, r3
600025fa:	4770      	bx	lr
600025fc:	0000      	movs	r0, r0
	...

60002600 <__memset_veneer>:
60002600:	f85f f000 	ldr.w	pc, [pc]	; 60002604 <__memset_veneer+0x4>
60002604:	0000ba0d 	.word	0x0000ba0d

60002608 <____libc_init_array_veneer>:
60002608:	f85f f000 	ldr.w	pc, [pc]	; 6000260c <____libc_init_array_veneer+0x4>
6000260c:	0000bc85 	.word	0x0000bc85

60002610 <__set_arm_clock_veneer>:
60002610:	f85f f000 	ldr.w	pc, [pc]	; 60002614 <__set_arm_clock_veneer+0x4>
60002614:	00007bb5 	.word	0x00007bb5

60002618 <___ZN5Print7printlnEv_veneer>:
60002618:	f85f f000 	ldr.w	pc, [pc]	; 6000261c <___ZN5Print7printlnEv_veneer+0x4>
6000261c:	00007945 	.word	0x00007945

60002620 <___ZN5Print11printNumberEmhh_veneer>:
60002620:	f85f f000 	ldr.w	pc, [pc]	; 60002624 <___ZN5Print11printNumberEmhh_veneer+0x4>
60002624:	00007999 	.word	0x00007999

60002628 <__pwm_init_veneer>:
60002628:	f85f f000 	ldr.w	pc, [pc]	; 6000262c <__pwm_init_veneer+0x4>
6000262c:	000096cd 	.word	0x000096cd

60002630 <___ZN5Print5printEl_veneer>:
60002630:	f85f f000 	ldr.w	pc, [pc]	; 60002634 <___ZN5Print5printEl_veneer+0x4>
60002634:	0000792d 	.word	0x0000792d

60002638 <__usb_init_serialnumber_veneer>:
60002638:	f85f f000 	ldr.w	pc, [pc]	; 6000263c <__usb_init_serialnumber_veneer+0x4>
6000263c:	00008db1 	.word	0x00008db1

60002640 <___ZN5Print10printFloatEdh_veneer>:
60002640:	f85f f000 	ldr.w	pc, [pc]	; 60002644 <___ZN5Print10printFloatEdh_veneer+0x4>
60002644:	000079c1 	.word	0x000079c1

60002648 <__sm_set_pool_veneer>:
60002648:	f85f f000 	ldr.w	pc, [pc]	; 6000264c <__sm_set_pool_veneer+0x4>
6000264c:	00009811 	.word	0x00009811

60002650 <__main_veneer>:
60002650:	f85f f000 	ldr.w	pc, [pc]	; 60002654 <__main_veneer+0x4>
60002654:	00008065 	.word	0x00008065

60002658 <__delay_veneer>:
60002658:	f85f f000 	ldr.w	pc, [pc]	; 6000265c <__delay_veneer+0x4>
6000265c:	00007ea5 	.word	0x00007ea5

60002660 <__frame_dummy_init_array_entry>:
60002660:	00000045 00000795 0000154d 00007459     E.......M...Yt..
60002670:	0000768d                                .v..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;  // ref manual 20.3.3.1.3 page 1231
		uint32_t lo2 = SNVS_HPRTCLR;
		if (lo1 == lo2 && hi1 == hi2) {
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      2c:	1049      	asrs	r1, r1, #1
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	4770      	bx	lr
      38:	20008ec0 	.word	0x20008ec0
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
      3c:	20008ec0 	.word	0x20008ec0
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags) {
    return m_fFile   ? m_fFile->ls(pr, flags)
           : m_xFile ? m_xFile->ls(pr, flags)
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	2002aecc 	.word	0x2002aecc
      64:	60020c00 	.word	0x60020c00

00000068 <loop>:
      68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
      6c:	4c7e      	ldr	r4, [pc, #504]	; (268 <loop+0x200>)
      6e:	b08b      	sub	sp, #44	; 0x2c
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
      70:	4d7e      	ldr	r5, [pc, #504]	; (26c <loop+0x204>)
      72:	6823      	ldr	r3, [r4, #0]
      74:	3301      	adds	r3, #1
      76:	6023      	str	r3, [r4, #0]
      78:	f001 fab4 	bl	15e4 <getDataCount()>
      7c:	882b      	ldrh	r3, [r5, #0]
  }
}
      7e:	4283      	cmp	r3, r0
    *m_xFile = *from.m_xFile;
      80:	4b7b      	ldr	r3, [pc, #492]	; (270 <loop+0x208>)
}
      82:	681a      	ldr	r2, [r3, #0]
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      84:	bf38      	it	cc
    char sign;
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	8028      	strhcc	r0, [r5, #0]
      88:	07d2      	lsls	r2, r2, #31
}
      8a:	d513      	bpl.n	b4 <loop+0x4c>
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	4f79      	ldr	r7, [pc, #484]	; (274 <loop+0x20c>)
      8e:	f009 f97f 	bl	9390 <usb_serial_available>
      92:	b9f0      	cbnz	r0, d2 <loop+0x6a>
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
      94:	8838      	ldrh	r0, [r7, #0]
		buf[sizeof(buf) - 1] = '0';
      96:	4e78      	ldr	r6, [pc, #480]	; (278 <loop+0x210>)
      98:	b200      	sxth	r0, r0
		i = sizeof(buf) - 1;
      9a:	f001 f965 	bl	1368 <saveData(short)>
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
      9e:	4b77      	ldr	r3, [pc, #476]	; (27c <loop+0x214>)
      a0:	8038      	strh	r0, [r7, #0]
      a2:	681f      	ldr	r7, [r3, #0]
  uint32_t freeClusterCount() {
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    if (switchSpi && !setDedicatedSpi(true)) {
      return 0;
    }
    uint32_t rtn = Vol::freeClusterCount();
      a4:	6833      	ldr	r3, [r6, #0]
      a6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
      aa:	42bb      	cmp	r3, r7
      ac:	d31b      	bcc.n	e6 <loop+0x7e>
      ae:	b00b      	add	sp, #44	; 0x2c
      b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static void i2c_write_data(uint8_t address, uint8_t reg, uint8_t *buffer, uint16_t nbuf)
{
  Wire.beginTransmission(address);
  Wire.write(reg);
  for(int ii=0; ii<nbuf; ii++) Wire.write(buffer[ii]);
      b4:	4a72      	ldr	r2, [pc, #456]	; (280 <loop+0x218>)
      b6:	4f6f      	ldr	r7, [pc, #444]	; (274 <loop+0x20c>)
      b8:	6812      	ldr	r2, [r2, #0]
      ba:	2a01      	cmp	r2, #1
  return str - name;

fail:
  *name = 0;
  return 0;
}
      bc:	f04f 32ff 	mov.w	r2, #4294967295
      c0:	bf18      	it	ne
  for (uint8_t is = 2; is <= m_setCount; is++) {
      c2:	2200      	movne	r2, #0
      c4:	803a      	strh	r2, [r7, #0]
      c6:	2201      	movs	r2, #1
      c8:	601a      	str	r2, [r3, #0]
      ca:	f009 f961 	bl	9390 <usb_serial_available>
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      ce:	2800      	cmp	r0, #0
}
      d0:	d0e0      	beq.n	94 <loop+0x2c>
	while (newdiv > 65535 && prescale < 7) {
      d2:	f009 f9a1 	bl	9418 <usb_serial_getchar>
      d6:	b2c0      	uxtb	r0, r0
      d8:	2873      	cmp	r0, #115	; 0x73
      da:	d026      	beq.n	12a <loop+0xc2>
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    else if (c == '.')
      isFraction = true;
      dc:	2865      	cmp	r0, #101	; 0x65
      de:	d11c      	bne.n	11a <loop+0xb2>
      e0:	2304      	movs	r3, #4
    return 0; // zero returned if timeout
      e2:	803b      	strh	r3, [r7, #0]
      e4:	e7d6      	b.n	94 <loop+0x2c>
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      e6:	a808      	add	r0, sp, #32
      e8:	f001 fc40 	bl	196c <rtc_get_datetime(datetime_t*)>
      ec:	4b65      	ldr	r3, [pc, #404]	; (284 <loop+0x21c>)
      ee:	f9b3 3000 	ldrsh.w	r3, [r3]
      f2:	b9eb      	cbnz	r3, 130 <loop+0xc8>
      f4:	4b64      	ldr	r3, [pc, #400]	; (288 <loop+0x220>)
      f6:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 2c0 <loop+0x258>
      fa:	9307      	str	r3, [sp, #28]
      fc:	4b63      	ldr	r3, [pc, #396]	; (28c <loop+0x224>)
      fe:	9306      	str	r3, [sp, #24]
     100:	2300      	movs	r3, #0
     102:	9a07      	ldr	r2, [sp, #28]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     104:	6037      	str	r7, [r6, #0]
     106:	6013      	str	r3, [r2, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
     108:	9a06      	ldr	r2, [sp, #24]
     10a:	6023      	str	r3, [r4, #0]
     10c:	f8cb 3000 	str.w	r3, [fp]
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          break;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
     110:	802b      	strh	r3, [r5, #0]
     112:	6013      	str	r3, [r2, #0]
     114:	b00b      	add	sp, #44	; 0x2c
     116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     11a:	286d      	cmp	r0, #109	; 0x6d
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     11c:	d173      	bne.n	206 <loop+0x19e>
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     11e:	4a59      	ldr	r2, [pc, #356]	; (284 <loop+0x21c>)
     120:	8813      	ldrh	r3, [r2, #0]
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     122:	f1c3 0301 	rsb	r3, r3, #1
     126:	8013      	strh	r3, [r2, #0]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     128:	e7b4      	b.n	94 <loop+0x2c>
				break;
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     12a:	2300      	movs	r3, #0
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     12c:	803b      	strh	r3, [r7, #0]
     12e:	e7b1      	b.n	94 <loop+0x2c>
     130:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
	if (!wait_idle()) return 4;
     134:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
	return rxBufferLength;
}
     138:	9304      	str	r3, [sp, #16]
     13a:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
     13e:	4954      	ldr	r1, [pc, #336]	; (290 <loop+0x228>)
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     140:	9303      	str	r3, [sp, #12]
     142:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     146:	4853      	ldr	r0, [pc, #332]	; (294 <loop+0x22c>)
     148:	9302      	str	r3, [sp, #8]
     14a:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
     14e:	f8df b170 	ldr.w	fp, [pc, #368]	; 2c0 <loop+0x258>
     152:	9301      	str	r3, [sp, #4]
     154:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     158:	9300      	str	r3, [sp, #0]
     15a:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     15e:	f007 fc0d 	bl	797c <Print::printf(char const*, ...)>
     162:	2103      	movs	r1, #3
        if (flags & T_CREATE) {
          df->createTimeMs = ms10;
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
     164:	484c      	ldr	r0, [pc, #304]	; (298 <loop+0x230>)
     166:	f009 f97d 	bl	9464 <usb_serial_write>
     16a:	2300      	movs	r3, #0
     16c:	220a      	movs	r2, #10
     16e:	6821      	ldr	r1, [r4, #0]
  bool skip = data[0] == EXFAT_TYPE_FILE;
     170:	4848      	ldr	r0, [pc, #288]	; (294 <loop+0x22c>)
     172:	f007 fc11 	bl	7998 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     176:	2101      	movs	r1, #1
     178:	4848      	ldr	r0, [pc, #288]	; (29c <loop+0x234>)
     17a:	f009 f973 	bl	9464 <usb_serial_write>
	n = __builtin_bswap32(n);
     17e:	4b42      	ldr	r3, [pc, #264]	; (288 <loop+0x220>)
     180:	220a      	movs	r2, #10
     182:	f8db 1000 	ldr.w	r1, [fp]
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     186:	9307      	str	r3, [sp, #28]
     188:	2300      	movs	r3, #0
     18a:	4842      	ldr	r0, [pc, #264]	; (294 <loop+0x22c>)
     18c:	f007 fc04 	bl	7998 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     190:	2101      	movs	r1, #1
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     192:	4842      	ldr	r0, [pc, #264]	; (29c <loop+0x234>)
     194:	f009 f966 	bl	9464 <usb_serial_write>
     198:	9907      	ldr	r1, [sp, #28]
     19a:	2300      	movs	r3, #0
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     19c:	220a      	movs	r2, #10
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     19e:	6809      	ldr	r1, [r1, #0]
     1a0:	483c      	ldr	r0, [pc, #240]	; (294 <loop+0x22c>)
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     1a2:	f007 fbf9 	bl	7998 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	n = __builtin_bswap32(n);
     1a6:	2101      	movs	r1, #1
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     1a8:	483c      	ldr	r0, [pc, #240]	; (29c <loop+0x234>)
     1aa:	f009 f95b 	bl	9464 <usb_serial_write>
	if (priority(ch3) < priority(ch4)) swap(ch3, ch4);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
     1ae:	4b37      	ldr	r3, [pc, #220]	; (28c <loop+0x224>)
     1b0:	882a      	ldrh	r2, [r5, #0]
	c = c1.channel;
     1b2:	493b      	ldr	r1, [pc, #236]	; (2a0 <loop+0x238>)
	c1.channel = c2.channel;
     1b4:	4837      	ldr	r0, [pc, #220]	; (294 <loop+0x22c>)
	c2.channel = c;
     1b6:	9306      	str	r3, [sp, #24]
	c1.TCD = c2.TCD;
     1b8:	f007 fbe0 	bl	797c <Print::printf(char const*, ...)>
     1bc:	2102      	movs	r1, #2
	c2.TCD = t;
     1be:	4839      	ldr	r0, [pc, #228]	; (2a4 <loop+0x23c>)
}
     1c0:	f009 f950 	bl	9464 <usb_serial_write>
     1c4:	9906      	ldr	r1, [sp, #24]
     1c6:	2300      	movs	r3, #0
     1c8:	220a      	movs	r2, #10
     1ca:	6809      	ldr	r1, [r1, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     1cc:	4831      	ldr	r0, [pc, #196]	; (294 <loop+0x22c>)
     1ce:	f007 fbe3 	bl	7998 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  bool syncDevice() { return m_blockDev->syncDevice(); }
     1d2:	2104      	movs	r1, #4
     1d4:	4834      	ldr	r0, [pc, #208]	; (2a8 <loop+0x240>)
     1d6:	f009 f945 	bl	9464 <usb_serial_write>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
     1da:	4b34      	ldr	r3, [pc, #208]	; (2ac <loop+0x244>)
     1dc:	f9b3 3000 	ldrsh.w	r3, [r3]
     1e0:	bb0b      	cbnz	r3, 226 <loop+0x1be>
     1e2:	4699      	mov	r9, r3
     1e4:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 2c4 <loop+0x25c>
     1e8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 294 <loop+0x22c>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
     1ec:	4b30      	ldr	r3, [pc, #192]	; (2b0 <loop+0x248>)
     1ee:	4651      	mov	r1, sl
     1f0:	4640      	mov	r0, r8
     1f2:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     1f6:	f109 0901 	add.w	r9, r9, #1

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
     1fa:	f007 fbbf 	bl	797c <Print::printf(char const*, ...)>
			if (d > 2) {
     1fe:	f1b9 0f08 	cmp.w	r9, #8
				div = d-2;
     202:	d1f3      	bne.n	1ec <loop+0x184>
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     204:	e77c      	b.n	100 <loop+0x98>
     206:	283a      	cmp	r0, #58	; 0x3a
     208:	d102      	bne.n	210 <loop+0x1a8>
     20a:	f001 fc71 	bl	1af0 <menu1()>
     20e:	e741      	b.n	94 <loop+0x2c>
     210:	283f      	cmp	r0, #63	; 0x3f
     212:	d102      	bne.n	21a <loop+0x1b2>
     214:	f001 fc76 	bl	1b04 <menu2()>
     218:	e73c      	b.n	94 <loop+0x2c>
     21a:	2821      	cmp	r0, #33	; 0x21
     21c:	f47f af3a 	bne.w	94 <loop+0x2c>
     220:	f001 fd3c 	bl	1c9c <menu3()>
     224:	e736      	b.n	94 <loop+0x2c>
     226:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 2c8 <loop+0x260>
     22a:	4922      	ldr	r1, [pc, #136]	; (2b4 <loop+0x24c>)
     22c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 294 <loop+0x22c>
     230:	f10a 0860 	add.w	r8, sl, #96	; 0x60
      {
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
      }
      else
      {
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     234:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     238:	4648      	mov	r0, r9
     23a:	f007 fb9f 	bl	797c <Print::printf(char const*, ...)>
     23e:	491d      	ldr	r1, [pc, #116]	; (2b4 <loop+0x24c>)
     240:	45d0      	cmp	r8, sl
     242:	d1f7      	bne.n	234 <loop+0x1cc>
        Serial.printf("%2d",max_stat);
     244:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2cc <loop+0x264>
     248:	491b      	ldr	r1, [pc, #108]	; (2b8 <loop+0x250>)
     24a:	f8d8 2000 	ldr.w	r2, [r8]
     24e:	4811      	ldr	r0, [pc, #68]	; (294 <loop+0x22c>)
     250:	f007 fb94 	bl	797c <Print::printf(char const*, ...)>

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     254:	2260      	movs	r2, #96	; 0x60
     256:	2100      	movs	r1, #0
     258:	4818      	ldr	r0, [pc, #96]	; (2bc <loop+0x254>)
     25a:	f00b fbd7 	bl	ba0c <memset>
        max_stat=0;        
     25e:	2300      	movs	r3, #0
     260:	f8c8 3000 	str.w	r3, [r8]
     264:	e74c      	b.n	100 <loop+0x98>
     266:	bf00      	nop
     268:	2002a8b4 	.word	0x2002a8b4
     26c:	2002b484 	.word	0x2002b484
     270:	2000c53c 	.word	0x2000c53c
     274:	2002b486 	.word	0x2002b486
     278:	2002a8b0 	.word	0x2002a8b0
     27c:	2002b458 	.word	0x2002b458
     280:	2002b46c 	.word	0x2002b46c
     284:	2002b488 	.word	0x2002b488
     288:	2002aee8 	.word	0x2002aee8
     28c:	2002ae24 	.word	0x2002ae24
     290:	20007a3c 	.word	0x20007a3c
     294:	200085c4 	.word	0x200085c4
     298:	20007a60 	.word	0x20007a60
     29c:	2000044c 	.word	0x2000044c
     2a0:	20007a64 	.word	0x20007a64
     2a4:	20007a68 	.word	0x20007a68
     2a8:	20007a6c 	.word	0x20007a6c
     2ac:	2002b48c 	.word	0x2002b48c
     2b0:	2002aea4 	.word	0x2002aea4
     2b4:	20007a7c 	.word	0x20007a7c
     2b8:	20007a84 	.word	0x20007a84
     2bc:	2002aeec 	.word	0x2002aeec
     2c0:	2002aee4 	.word	0x2002aee4
     2c4:	20007a74 	.word	0x20007a74
     2c8:	2002aee8 	.word	0x2002aee8
     2cc:	2002aec4 	.word	0x2002aec4

000002d0 <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(1);} // wait for setup() to finish
     2d0:	b510      	push	{r4, lr}
     2d2:	4c0b      	ldr	r4, [pc, #44]	; (300 <setup1()+0x30>)
     2d4:	6823      	ldr	r3, [r4, #0]
     2d6:	b92b      	cbnz	r3, 2e4 <setup1()+0x14>
     2d8:	2001      	movs	r0, #1
     2da:	f007 fde3 	bl	7ea4 <delay>
     2de:	6823      	ldr	r3, [r4, #0]
     2e0:	2b00      	cmp	r3, #0
     2e2:	d0f9      	beq.n	2d8 <setup1()+0x8>
  i2s_setup();
     2e4:	f000 f9aa 	bl	63c <i2s_setup()>
  dma_setup();
     2e8:	f000 f9ee 	bl	6c8 <dma_setup()>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2ec:	210b      	movs	r1, #11
     2ee:	4805      	ldr	r0, [pc, #20]	; (304 <setup1()+0x34>)
     2f0:	f009 f8b8 	bl	9464 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     2f4:	4804      	ldr	r0, [pc, #16]	; (308 <setup1()+0x38>)

  Serial.println("Setup1 done");
}
     2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2fa:	f007 bb23 	b.w	7944 <Print::println()>
     2fe:	bf00      	nop
     300:	2002af4c 	.word	0x2002af4c
     304:	20000510 	.word	0x20000510
     308:	200085c4 	.word	0x200085c4

0000030c <setup>:
{
     30c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     310:	4d4c      	ldr	r5, [pc, #304]	; (444 <setup+0x138>)
     312:	b087      	sub	sp, #28
     314:	4c4c      	ldr	r4, [pc, #304]	; (448 <setup+0x13c>)
				if (elapsed > 750) break;
     316:	f240 28ee 	movw	r8, #750	; 0x2ee
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     31a:	4f4c      	ldr	r7, [pc, #304]	; (44c <setup+0x140>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     31c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 474 <setup+0x168>
		uint32_t millis_begin = systick_millis_count;
     320:	682e      	ldr	r6, [r5, #0]
		yield();
     322:	f009 f91d 	bl	9560 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     326:	7823      	ldrb	r3, [r4, #0]
     328:	2b00      	cmp	r3, #0
     32a:	d069      	beq.n	400 <setup+0xf4>
     32c:	783b      	ldrb	r3, [r7, #0]
     32e:	07da      	lsls	r2, r3, #31
     330:	d566      	bpl.n	400 <setup+0xf4>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     332:	682b      	ldr	r3, [r5, #0]
     334:	f8d9 2000 	ldr.w	r2, [r9]
     338:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     33a:	2b0e      	cmp	r3, #14
     33c:	d960      	bls.n	400 <setup+0xf4>
     33e:	682b      	ldr	r3, [r5, #0]
  while(millis()<10000) if(Serial) { termon=1; break;}
     340:	f242 760f 	movw	r6, #9999	; 0x270f
     344:	42b3      	cmp	r3, r6
     346:	d813      	bhi.n	370 <setup+0x64>
     348:	4f40      	ldr	r7, [pc, #256]	; (44c <setup+0x140>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     34a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 474 <setup+0x168>
		yield();
     34e:	f009 f907 	bl	9560 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     352:	7823      	ldrb	r3, [r4, #0]
     354:	2b00      	cmp	r3, #0
     356:	d05d      	beq.n	414 <setup+0x108>
     358:	783b      	ldrb	r3, [r7, #0]
     35a:	07db      	lsls	r3, r3, #31
     35c:	d55a      	bpl.n	414 <setup+0x108>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     35e:	682b      	ldr	r3, [r5, #0]
     360:	f8d8 2000 	ldr.w	r2, [r8]
     364:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     366:	2b0e      	cmp	r3, #14
     368:	d954      	bls.n	414 <setup+0x108>
     36a:	4b39      	ldr	r3, [pc, #228]	; (450 <setup+0x144>)
     36c:	2201      	movs	r2, #1
     36e:	601a      	str	r2, [r3, #0]
    if(CrashReport) Serial.print(CrashReport);
     370:	4838      	ldr	r0, [pc, #224]	; (454 <setup+0x148>)
     372:	f014 f8c1 	bl	144f8 <___ZN16CrashReportClasscvbEv_veneer>
     376:	2800      	cmp	r0, #0
     378:	d154      	bne.n	424 <setup+0x118>
  rtc_setup();
     37a:	2113      	movs	r1, #19
     37c:	2012      	movs	r0, #18
     37e:	f001 faf3 	bl	1968 <rtc_setup(unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     382:	2110      	movs	r1, #16
     384:	4834      	ldr	r0, [pc, #208]	; (458 <setup+0x14c>)
     386:	f009 f86d 	bl	9464 <usb_serial_write>
     38a:	4834      	ldr	r0, [pc, #208]	; (45c <setup+0x150>)
     38c:	f007 fada 	bl	7944 <Print::println()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     390:	a804      	add	r0, sp, #16
     392:	f001 faeb 	bl	196c <rtc_get_datetime(datetime_t*)>
     396:	2800      	cmp	r0, #0
     398:	d04c      	beq.n	434 <setup+0x128>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     39a:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     39e:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     3a2:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     3a6:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     3aa:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     3ae:	e9cd 2102 	strd	r2, r1, [sp, #8]
     3b2:	e9cd 0400 	strd	r0, r4, [sp]
     3b6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  ready=1;
     3ba:	2401      	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     3bc:	4928      	ldr	r1, [pc, #160]	; (460 <setup+0x154>)
     3be:	4827      	ldr	r0, [pc, #156]	; (45c <setup+0x150>)
     3c0:	f007 fadc 	bl	797c <Print::printf(char const*, ...)>
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     3c4:	4825      	ldr	r0, [pc, #148]	; (45c <setup+0x150>)
     3c6:	f007 fabd 	bl	7944 <Print::println()>
     3ca:	210b      	movs	r1, #11
     3cc:	4825      	ldr	r0, [pc, #148]	; (464 <setup+0x158>)
     3ce:	f009 f849 	bl	9464 <usb_serial_write>
     3d2:	4822      	ldr	r0, [pc, #136]	; (45c <setup+0x150>)
     3d4:	f007 fab6 	bl	7944 <Print::println()>
  filing_init();
     3d8:	f000 fc2c 	bl	c34 <filing_init()>
     3dc:	210a      	movs	r1, #10
     3de:	4822      	ldr	r0, [pc, #136]	; (468 <setup+0x15c>)
     3e0:	f009 f840 	bl	9464 <usb_serial_write>
     3e4:	481d      	ldr	r0, [pc, #116]	; (45c <setup+0x150>)
     3e6:	f007 faad 	bl	7944 <Print::println()>
  ready=1;
     3ea:	4b20      	ldr	r3, [pc, #128]	; (46c <setup+0x160>)
     3ec:	601c      	str	r4, [r3, #0]
    setup1();
     3ee:	f7ff ff6f 	bl	2d0 <setup1()>
    pinMode(13,OUTPUT);
     3f2:	4621      	mov	r1, r4
     3f4:	200d      	movs	r0, #13
     3f6:	f007 fdfd 	bl	7ff4 <pinMode>
}
     3fa:	b007      	add	sp, #28
     3fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     400:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     402:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     404:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     406:	b192      	cbz	r2, 42e <setup+0x122>
				if (elapsed > 2000) break;
     408:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     40c:	d897      	bhi.n	33e <setup+0x32>
			yield();
     40e:	f009 f8a7 	bl	9560 <yield>
     412:	e786      	b.n	322 <setup+0x16>
     414:	682b      	ldr	r3, [r5, #0]
  while(millis()<10000) if(Serial) { termon=1; break;}
     416:	42b3      	cmp	r3, r6
     418:	d999      	bls.n	34e <setup+0x42>
    if(CrashReport) Serial.print(CrashReport);
     41a:	480e      	ldr	r0, [pc, #56]	; (454 <setup+0x148>)
     41c:	f014 f86c 	bl	144f8 <___ZN16CrashReportClasscvbEv_veneer>
     420:	2800      	cmp	r0, #0
     422:	d0aa      	beq.n	37a <setup+0x6e>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     424:	490d      	ldr	r1, [pc, #52]	; (45c <setup+0x150>)
     426:	480b      	ldr	r0, [pc, #44]	; (454 <setup+0x148>)
     428:	f014 f86a 	bl	14500 <___ZNK16CrashReportClass7printToER5Print_veneer>
     42c:	e7a5      	b.n	37a <setup+0x6e>
				if (elapsed > 750) break;
     42e:	4543      	cmp	r3, r8
     430:	d9ed      	bls.n	40e <setup+0x102>
     432:	e784      	b.n	33e <setup+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     434:	2114      	movs	r1, #20
     436:	480e      	ldr	r0, [pc, #56]	; (470 <setup+0x164>)
     438:	f009 f814 	bl	9464 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     43c:	4807      	ldr	r0, [pc, #28]	; (45c <setup+0x150>)
     43e:	f007 fa81 	bl	7944 <Print::println()>
     442:	e7aa      	b.n	39a <setup+0x8e>
     444:	2002b458 	.word	0x2002b458
     448:	2002b4a7 	.word	0x2002b4a7
     44c:	2002b4a6 	.word	0x2002b4a6
     450:	2002b46c 	.word	0x2002b46c
     454:	200085b8 	.word	0x200085b8
     458:	20007a94 	.word	0x20007a94
     45c:	200085c4 	.word	0x200085c4
     460:	20007ac0 	.word	0x20007ac0
     464:	20007ae8 	.word	0x20007ae8
     468:	20007af4 	.word	0x20007af4
     46c:	2002af4c 	.word	0x2002af4c
     470:	20007aa8 	.word	0x20007aa8
     474:	2002b478 	.word	0x2002b478

00000478 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     478:	4b24      	ldr	r3, [pc, #144]	; (50c <acq_isr()+0x94>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     47a:	4a25      	ldr	r2, [pc, #148]	; (510 <acq_isr()+0x98>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     47c:	4925      	ldr	r1, [pc, #148]	; (514 <acq_isr()+0x9c>)
  {
     47e:	b510      	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     480:	681c      	ldr	r4, [r3, #0]
     482:	7918      	ldrb	r0, [r3, #4]
     484:	6923      	ldr	r3, [r4, #16]
     486:	77c8      	strb	r0, [r1, #31]
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     488:	4293      	cmp	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     48a:	bf28      	it	cs
     48c:	f5a2 6280 	subcs.w	r2, r2, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     490:	4610      	mov	r0, r2
	asm("dsb");
     492:	f3bf 8f4f 	dsb	sy
     496:	f102 0320 	add.w	r3, r2, #32
	uint32_t end_addr = (uint32_t)addr + size;
     49a:	f502 6180 	add.w	r1, r2, #1024	; 0x400
		SCB_CACHE_DCIMVAC = location;
     49e:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
     4a2:	428b      	cmp	r3, r1
     4a4:	bf8c      	ite	hi
     4a6:	2101      	movhi	r1, #1
     4a8:	2120      	movls	r1, #32
     4aa:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
     4ae:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
     4b0:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
     4b4:	461a      	mov	r2, r3
	} while (location < end_addr);
     4b6:	f103 0320 	add.w	r3, r3, #32
     4ba:	d1f8      	bne.n	4ae <acq_isr()+0x36>
	asm("dsb");
     4bc:	f3bf 8f4f 	dsb	sy
	asm("isb");
     4c0:	f3bf 8f6f 	isb	sy

//int32_t bias=0;

/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     4c4:	4c14      	ldr	r4, [pc, #80]	; (518 <acq_isr()+0xa0>)

  // extract data
  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH]>>SHIFT;   
     4c6:	2300      	movs	r3, #0
     4c8:	4a14      	ldr	r2, [pc, #80]	; (51c <acq_isr()+0xa4>)
{ procCount++;
     4ca:	6821      	ldr	r1, [r4, #0]
     4cc:	3101      	adds	r1, #1
     4ce:	6021      	str	r1, [r4, #0]
  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH]>>SHIFT;   
     4d0:	f850 1033 	ldr.w	r1, [r0, r3, lsl #3]
     4d4:	3301      	adds	r3, #1
     4d6:	2b80      	cmp	r3, #128	; 0x80
     4d8:	f842 1f04 	str.w	r1, [r2, #4]!
     4dc:	d1f8      	bne.n	4d0 <acq_isr()+0x58>
  if(proc==0)
     4de:	4b10      	ldr	r3, [pc, #64]	; (520 <acq_isr()+0xa8>)
     4e0:	f9b3 3000 	ldrsh.w	r3, [r3]
     4e4:	b113      	cbz	r3, 4ec <acq_isr()+0x74>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     4e6:	2b01      	cmp	r3, #1
     4e8:	d00a      	beq.n	500 <acq_isr()+0x88>
  }
     4ea:	bd10      	pop	{r4, pc}
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     4ec:	480d      	ldr	r0, [pc, #52]	; (524 <acq_isr()+0xac>)
     4ee:	f001 f88d 	bl	160c <pushData(unsigned long*)>
     4f2:	2800      	cmp	r0, #0
     4f4:	d1f9      	bne.n	4ea <acq_isr()+0x72>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     4f6:	4a0c      	ldr	r2, [pc, #48]	; (528 <acq_isr()+0xb0>)
     4f8:	6813      	ldr	r3, [r2, #0]
     4fa:	3301      	adds	r3, #1
     4fc:	6013      	str	r3, [r2, #0]
  }
     4fe:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     500:	4808      	ldr	r0, [pc, #32]	; (524 <acq_isr()+0xac>)
     502:	f000 f959 	bl	7b8 <compress(void*)>
     506:	2800      	cmp	r0, #0
     508:	d1ef      	bne.n	4ea <acq_isr()+0x72>
     50a:	e7f4      	b.n	4f6 <acq_isr()+0x7e>
     50c:	20029f4c 	.word	0x20029f4c
     510:	20200400 	.word	0x20200400
     514:	400e8000 	.word	0x400e8000
     518:	2002aee4 	.word	0x2002aee4
     51c:	2002ac20 	.word	0x2002ac20
     520:	2002b48c 	.word	0x2002b48c
     524:	2002ac24 	.word	0x2002ac24
     528:	2002aee8 	.word	0x2002aee8

0000052c <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
     52c:	b510      	push	{r4, lr}
     52e:	4604      	mov	r4, r0
		release();
     530:	f007 f928 	bl	7784 <DMAChannel::release()>
	}
     534:	4620      	mov	r0, r4
     536:	bd10      	pop	{r4, pc}

00000538 <setAudioFrequency(int)>:
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     538:	ee07 0a90 	vmov	s15, r0
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     53c:	4938      	ldr	r1, [pc, #224]	; (620 <setAudioFrequency(int)+0xe8>)
     53e:	0280      	lsls	r0, r0, #10
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     540:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
     544:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     548:	4b36      	ldr	r3, [pc, #216]	; (624 <setAudioFrequency(int)+0xec>)
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     54a:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 608 <setAudioFrequency(int)+0xd0>
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     54e:	fb91 f1f0 	sdiv	r1, r1, r0
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     552:	ee27 7b06 	vmul.f64	d7, d7, d6
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     556:	1c4a      	adds	r2, r1, #1
     558:	ee06 2a10 	vmov	s12, r2
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     55c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     560:	ee27 7b03 	vmul.f64	d7, d7, d3
     564:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 610 <setAudioFrequency(int)+0xd8>
  {
     568:	b410      	push	{r4}
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     56a:	ee27 7b06 	vmul.f64	d7, d7, d6
    int c1 = C * c2 - (c0 * c2);
     56e:	f242 7410 	movw	r4, #10000	; 0x2710
     572:	ed9f 5b29 	vldr	d5, [pc, #164]	; 618 <setAudioFrequency(int)+0xe0>
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     576:	ee87 6b04 	vdiv.f64	d6, d7, d4
    int c0 = C;
     57a:	eefd 7bc6 	vcvt.s32.f64	s15, d6
     57e:	ee17 2a90 	vmov	r2, s15
    int c1 = C * c2 - (c0 * c2);
     582:	fb04 f002 	mul.w	r0, r4, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     586:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     58a:	ee07 0a10 	vmov	s14, r0
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     58e:	f442 1289 	orr.w	r2, r2, #1122304	; 0x112000
    int c1 = C * c2 - (c0 * c2);
     592:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     596:	671a      	str	r2, [r3, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     598:	ee96 7b05 	vfnms.f64	d7, d6, d5
     59c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     5a0:	ee17 2a90 	vmov	r2, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     5a4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
     5a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     5ac:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     5b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     5b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     5b6:	671a      	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     5b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     5ba:	2a00      	cmp	r2, #0
     5bc:	dafc      	bge.n	5b8 <setAudioFrequency(int)+0x80>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     5be:	f8d3 4170 	ldr.w	r4, [r3, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     5c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     5c6:	4a18      	ldr	r2, [pc, #96]	; (628 <setAudioFrequency(int)+0xf0>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     5c8:	4818      	ldr	r0, [pc, #96]	; (62c <setAudioFrequency(int)+0xf4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     5ca:	4022      	ands	r2, r4
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     5cc:	4c18      	ldr	r4, [pc, #96]	; (630 <setAudioFrequency(int)+0xf8>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     5ce:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     5d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     5d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     5d8:	671a      	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     5da:	69c2      	ldr	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     5dc:	4b15      	ldr	r3, [pc, #84]	; (634 <setAudioFrequency(int)+0xfc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     5de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     5e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     5e6:	61c2      	str	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     5e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
     5ea:	4013      	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     5ec:	4a12      	ldr	r2, [pc, #72]	; (638 <setAudioFrequency(int)+0x100>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     5ee:	430b      	orrs	r3, r1
     5f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     5f4:	6283      	str	r3, [r0, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     5f6:	6863      	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     5f8:	401a      	ands	r2, r3
     5fa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     5fe:	6062      	str	r2, [r4, #4]
  }
     600:	f85d 4b04 	ldr.w	r4, [sp], #4
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	00000000 	.word	0x00000000
     60c:	40700000 	.word	0x40700000
     610:	00000000 	.word	0x00000000
     614:	4176e360 	.word	0x4176e360
     618:	00000000 	.word	0x00000000
     61c:	40c38800 	.word	0x40c38800
     620:	269fb200 	.word	0x269fb200
     624:	400d8000 	.word	0x400d8000
     628:	ff7f7fff 	.word	0xff7f7fff
     62c:	400fc000 	.word	0x400fc000
     630:	400ac000 	.word	0x400ac000
     634:	fffffe00 	.word	0xfffffe00
     638:	fff7fff8 	.word	0xfff7fff8

0000063c <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     63c:	4a19      	ldr	r2, [pc, #100]	; (6a4 <i2s_setup()+0x68>)
     63e:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     640:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     642:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     646:	4c18      	ldr	r4, [pc, #96]	; (6a8 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     648:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     64a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     64e:	2b00      	cmp	r3, #0
     650:	db27      	blt.n	6a2 <i2s_setup()+0x66>
    int fs = fsamp;
     652:	4b16      	ldr	r3, [pc, #88]	; (6ac <i2s_setup()+0x70>)
    setAudioFrequency(fs);
     654:	6818      	ldr	r0, [r3, #0]
     656:	f7ff ff6f 	bl	538 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     65a:	4b15      	ldr	r3, [pc, #84]	; (6b0 <i2s_setup()+0x74>)
     65c:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     65e:	4915      	ldr	r1, [pc, #84]	; (6b4 <i2s_setup()+0x78>)
     660:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     662:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     666:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     66a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     66e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     672:	2201      	movs	r2, #1
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     674:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     67c:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     67e:	480e      	ldr	r0, [pc, #56]	; (6b8 <i2s_setup()+0x7c>)
    I2S1_RMR = 0;
     680:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     684:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     688:	490c      	ldr	r1, [pc, #48]	; (6bc <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     68a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     68e:	4a0c      	ldr	r2, [pc, #48]	; (6c0 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     690:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     694:	4b0b      	ldr	r3, [pc, #44]	; (6c4 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     696:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     69a:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     69e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     6a2:	bd10      	pop	{r4, pc}
     6a4:	400fc000 	.word	0x400fc000
     6a8:	40384000 	.word	0x40384000
     6ac:	20008b88 	.word	0x20008b88
     6b0:	401f8000 	.word	0x401f8000
     6b4:	401f8400 	.word	0x401f8400
     6b8:	07000001 	.word	0x07000001
     6bc:	00011f1b 	.word	0x00011f1b
     6c0:	1f1f1f00 	.word	0x1f1f1f00
     6c4:	92000001 	.word	0x92000001

000006c8 <dma_setup()>:
  {
     6c8:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     6ca:	4c1c      	ldr	r4, [pc, #112]	; (73c <dma_setup()+0x74>)
     6cc:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     6ce:	4d1c      	ldr	r5, [pc, #112]	; (740 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     6d0:	4620      	mov	r0, r4
     6d2:	f006 fffd 	bl	76d0 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     6d6:	6823      	ldr	r3, [r4, #0]
     6d8:	481a      	ldr	r0, [pc, #104]	; (744 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     6da:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     6de:	491a      	ldr	r1, [pc, #104]	; (748 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     6e0:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     6e2:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     6e4:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     6e6:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     6e8:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     6ea:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     6ec:	4d17      	ldr	r5, [pc, #92]	; (74c <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     6ee:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     6f0:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     6f2:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     6f4:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     6f6:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     6f8:	2204      	movs	r2, #4
     6fa:	4915      	ldr	r1, [pc, #84]	; (750 <dma_setup()+0x88>)
     6fc:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     6fe:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     700:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     702:	4d14      	ldr	r5, [pc, #80]	; (754 <dma_setup()+0x8c>)
     704:	60da      	str	r2, [r3, #12]
		*mux = 0;
     706:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     70a:	4b13      	ldr	r3, [pc, #76]	; (758 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     70c:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     710:	2101      	movs	r1, #1
     712:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     714:	4811      	ldr	r0, [pc, #68]	; (75c <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     716:	f002 051f 	and.w	r5, r2, #31
     71a:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     71e:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     722:	40a9      	lsls	r1, r5
     724:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     726:	4d0e      	ldr	r5, [pc, #56]	; (760 <dma_setup()+0x98>)
     728:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     72c:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     72e:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     730:	490c      	ldr	r1, [pc, #48]	; (764 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     732:	4b0d      	ldr	r3, [pc, #52]	; (768 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     734:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     736:	7922      	ldrb	r2, [r4, #4]
     738:	76da      	strb	r2, [r3, #27]
  }
     73a:	bd38      	pop	{r3, r4, r5, pc}
     73c:	20029f4c 	.word	0x20029f4c
     740:	02020000 	.word	0x02020000
     744:	403840a0 	.word	0x403840a0
     748:	20200000 	.word	0x20200000
     74c:	fffff800 	.word	0xfffff800
     750:	400ec000 	.word	0x400ec000
     754:	80000013 	.word	0x80000013
     758:	38003840 	.word	0x38003840
     75c:	20008c00 	.word	0x20008c00
     760:	00000479 	.word	0x00000479
     764:	e000e400 	.word	0xe000e400
     768:	400e8000 	.word	0x400e8000

0000076c <acqModifyFrequency(unsigned long)>:
  {
     76c:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     76e:	4c08      	ldr	r4, [pc, #32]	; (790 <acqModifyFrequency(unsigned long)+0x24>)
     770:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     774:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     778:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     77c:	f7ff fedc 	bl	538 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     780:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     784:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     788:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     78c:	bd10      	pop	{r4, pc}
     78e:	bf00      	nop
     790:	40384000 	.word	0x40384000

00000794 <_GLOBAL__sub_I_procCount>:
		begin();
     794:	4805      	ldr	r0, [pc, #20]	; (7ac <_GLOBAL__sub_I_procCount+0x18>)
     796:	2100      	movs	r1, #0
  }
}
     798:	b508      	push	{r3, lr}
     79a:	f006 ff99 	bl	76d0 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     79e:	4a04      	ldr	r2, [pc, #16]	; (7b0 <_GLOBAL__sub_I_procCount+0x1c>)
     7a0:	4904      	ldr	r1, [pc, #16]	; (7b4 <_GLOBAL__sub_I_procCount+0x20>)
     7a2:	4802      	ldr	r0, [pc, #8]	; (7ac <_GLOBAL__sub_I_procCount+0x18>)
}
     7a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     7a8:	f009 b874 	b.w	9894 <__aeabi_atexit>
     7ac:	20029f4c 	.word	0x20029f4c
     7b0:	200085e4 	.word	0x200085e4
     7b4:	0000052d 	.word	0x0000052d

000007b8 <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7bc:	b083      	sub	sp, #12
     7be:	4604      	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
     7c0:	f007 fd26 	bl	8210 <rtc_get>
     7c4:	4682      	mov	sl, r0
  uint32_t t1;
  t1 = micros();
     7c6:	f007 fbc1 	bl	7f4c <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     7ca:	49a1      	ldr	r1, [pc, #644]	; (a50 <compress(void*)+0x298>)
     7cc:	6822      	ldr	r2, [r4, #0]
     7ce:	4623      	mov	r3, r4
     7d0:	680d      	ldr	r5, [r1, #0]
     7d2:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     7d6:	499f      	ldr	r1, [pc, #636]	; (a54 <compress(void*)+0x29c>)
  t1 = micros();
     7d8:	4681      	mov	r9, r0
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     7da:	602a      	str	r2, [r5, #0]
     7dc:	462c      	mov	r4, r5
     7de:	600a      	str	r2, [r1, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     7e0:	4629      	mov	r1, r5
     7e2:	4618      	mov	r0, r3
     7e4:	3304      	adds	r3, #4
     7e6:	e9d0 0200 	ldrd	r0, r2, [r0]
     7ea:	42b3      	cmp	r3, r6
     7ec:	eba2 0200 	sub.w	r2, r2, r0
     7f0:	f844 2f04 	str.w	r2, [r4, #4]!
     7f4:	d1f5      	bne.n	7e2 <compress(void*)+0x2a>
     7f6:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc

  // find maximum in filtered data
  int32_t mx = 0;
     7fa:	2200      	movs	r2, #0
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
     7fc:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd;
    if(dd>mx) mx = dd;
     800:	2b00      	cmp	r3, #0
     802:	bfb8      	it	lt
     804:	425b      	neglt	r3, r3
     806:	429a      	cmp	r2, r3
     808:	bfb8      	it	lt
     80a:	461a      	movlt	r2, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     80c:	4281      	cmp	r1, r0
     80e:	d1f5      	bne.n	7fc <compress(void*)+0x44>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     810:	2702      	movs	r7, #2
     812:	2101      	movs	r1, #1
     814:	e003      	b.n	81e <compress(void*)+0x66>
     816:	3701      	adds	r7, #1
     818:	2f18      	cmp	r7, #24
     81a:	f000 8110 	beq.w	a3e <compress(void*)+0x286>
     81e:	1e7c      	subs	r4, r7, #1
     820:	fa01 f304 	lsl.w	r3, r1, r4
     824:	4293      	cmp	r3, r2
     826:	ddf6      	ble.n	816 <compress(void*)+0x5e>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NSAMP*nb) / MBIT;
     828:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
     82c:	40b9      	lsls	r1, r7
  int ndat = NH+NCH + ncmp;
     82e:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
     832:	1e48      	subs	r0, r1, #1
  int ndat = NH+NCH + ncmp;
     834:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     836:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
     83a:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
     83e:	4986      	ldr	r1, [pc, #536]	; (a58 <compress(void*)+0x2a0>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     840:	4d86      	ldr	r5, [pc, #536]	; (a5c <compress(void*)+0x2a4>)
  proc_stat[nb-1]++;
     842:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     846:	3201      	adds	r2, #1
     848:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     84c:	682a      	ldr	r2, [r5, #0]
     84e:	4c84      	ldr	r4, [pc, #528]	; (a60 <compress(void*)+0x2a8>)
     850:	42ba      	cmp	r2, r7
     852:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     856:	46a3      	mov	fp, r4
     858:	4622      	mov	r2, r4
     85a:	bf38      	it	cc
     85c:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     85e:	f852 1f04 	ldr.w	r1, [r2, #4]!
     862:	4001      	ands	r1, r0
     864:	4296      	cmp	r6, r2
     866:	6011      	str	r1, [r2, #0]
     868:	d1f9      	bne.n	85e <compress(void*)+0xa6>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     86a:	4d7e      	ldr	r5, [pc, #504]	; (a64 <compress(void*)+0x2ac>)
     86c:	f44f 7200 	mov.w	r2, #512	; 0x200
     870:	2100      	movs	r1, #0
     872:	9300      	str	r3, [sp, #0]
     874:	4628      	mov	r0, r5
     876:	f00b f8c9 	bl	ba0c <memset>
  *iptr++ = nb | shift<<16;
     87a:	4a7b      	ldr	r2, [pc, #492]	; (a68 <compress(void*)+0x2b0>)
  *iptr++ = NCH+ncmp; // number of data after header
     87c:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     87e:	2100      	movs	r1, #0
  *iptr++ = nb | shift<<16;
     880:	f9b2 2000 	ldrsh.w	r2, [r2]

  // pack data
  // 
  int nx = MBIT;
     884:	f04f 0c20 	mov.w	ip, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
     888:	2007      	movs	r0, #7
  *iptr++ = NCH+ncmp; // number of data after header
     88a:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
     88c:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
     890:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     892:	f8db 2000 	ldr.w	r2, [fp]
     896:	f8cb 1000 	str.w	r1, [fp]
     89a:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     89c:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     8a0:	602a      	str	r2, [r5, #0]
  *iptr++ = NCH;
     8a2:	2201      	movs	r2, #1
  *iptr++ = t1;
     8a4:	e9c5 a902 	strd	sl, r9, [r5, #8]
  *iptr++ = NCH;
     8a8:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NSAMP; ii ++)
     8aa:	e00a      	b.n	8c2 <compress(void*)+0x10a>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     8ac:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
     8b0:	4694      	mov	ip, r2
     8b2:	ea41 010e 	orr.w	r1, r1, lr
     8b6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NSAMP; ii ++)
     8ba:	42a6      	cmp	r6, r4
     8bc:	d018      	beq.n	8f0 <compress(void*)+0x138>
      {   outData[kk] |= (tempData[ii] << nx);
     8be:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     8c2:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
     8c6:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
     8c8:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
     8cc:	dcee      	bgt.n	8ac <compress(void*)+0xf4>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     8ce:	eba7 0e0c 	sub.w	lr, r7, ip
     8d2:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
     8d6:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
     8da:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
     8de:	d12f      	bne.n	940 <compress(void*)+0x188>
      {   outData[kk++] |= tempData[ii];
     8e0:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NSAMP; ii ++)
     8e2:	42a6      	cmp	r6, r4
          nx=MBIT;
     8e4:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
     8e8:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     8ec:	4648      	mov	r0, r9
  for (int ii = 0; ii < NSAMP; ii ++)
     8ee:	d1e6      	bne.n	8be <compress(void*)+0x106>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     8f0:	4e5e      	ldr	r6, [pc, #376]	; (a6c <compress(void*)+0x2b4>)
     8f2:	6834      	ldr	r4, [r6, #0]
     8f4:	eb04 0208 	add.w	r2, r4, r8
     8f8:	2a80      	cmp	r2, #128	; 0x80
     8fa:	dc2d      	bgt.n	958 <compress(void*)+0x1a0>
     8fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     900:	4a5b      	ldr	r2, [pc, #364]	; (a70 <compress(void*)+0x2b8>)
     902:	4858      	ldr	r0, [pc, #352]	; (a64 <compress(void*)+0x2ac>)
     904:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
     908:	4423      	add	r3, r4
     90a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     90e:	2300      	movs	r3, #0
     910:	e001      	b.n	916 <compress(void*)+0x15e>
     912:	f850 1f04 	ldr.w	r1, [r0, #4]!
     916:	3301      	adds	r3, #1
     918:	f842 1f04 	str.w	r1, [r2, #4]!
     91c:	4543      	cmp	r3, r8
     91e:	dbf8      	blt.n	912 <compress(void*)+0x15a>
     920:	f1b8 0f00 	cmp.w	r8, #0
     924:	f108 33ff 	add.w	r3, r8, #4294967295
     928:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
     92c:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     930:	bfd8      	it	le
     932:	2300      	movle	r3, #0
     934:	4423      	add	r3, r4
     936:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     938:	4638      	mov	r0, r7
     93a:	b003      	add	sp, #12
     93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     940:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
     944:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     948:	ea4e 0202 	orr.w	r2, lr, r2
     94c:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     950:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
     952:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
     956:	e7b0      	b.n	8ba <compress(void*)+0x102>
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     958:	2c7a      	cmp	r4, #122	; 0x7a
     95a:	dd22      	ble.n	9a2 <compress(void*)+0x1ea>
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     95c:	2c7f      	cmp	r4, #127	; 0x7f
     95e:	dc0a      	bgt.n	976 <compress(void*)+0x1be>
     960:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
     964:	4842      	ldr	r0, [pc, #264]	; (a70 <compress(void*)+0x2b8>)
     966:	2100      	movs	r1, #0
     968:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     96c:	0092      	lsls	r2, r2, #2
     96e:	f00b f84d 	bl	ba0c <memset>
     972:	2380      	movs	r3, #128	; 0x80
     974:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
     976:	483e      	ldr	r0, [pc, #248]	; (a70 <compress(void*)+0x2b8>)
     978:	f000 fe48 	bl	160c <pushData(unsigned long*)>
     97c:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     97e:	ea4f 0288 	mov.w	r2, r8, lsl #2
     982:	4938      	ldr	r1, [pc, #224]	; (a64 <compress(void*)+0x2ac>)
      if(!pushData(dout)) ret = 0;
     984:	bf18      	it	ne
     986:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     988:	f1b8 0f00 	cmp.w	r8, #0
     98c:	4838      	ldr	r0, [pc, #224]	; (a70 <compress(void*)+0x2b8>)
     98e:	bfd8      	it	le
     990:	2204      	movle	r2, #4
     992:	f007 fb6f 	bl	8074 <memcpy>
}
     996:	4638      	mov	r0, r7
     998:	f8c6 8000 	str.w	r8, [r6]
     99c:	b003      	add	sp, #12
     99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     9a2:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
     9a6:	4832      	ldr	r0, [pc, #200]	; (a70 <compress(void*)+0x2b8>)
     9a8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     9ac:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     9b0:	616b      	str	r3, [r5, #20]
      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     9b2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     9b6:	4d2b      	ldr	r5, [pc, #172]	; (a64 <compress(void*)+0x2ac>)
     9b8:	4423      	add	r3, r4
     9ba:	4629      	mov	r1, r5
     9bc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     9c0:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
     9c4:	e001      	b.n	9ca <compress(void*)+0x212>
     9c6:	f851 2f04 	ldr.w	r2, [r1, #4]!
     9ca:	f843 2f04 	str.w	r2, [r3, #4]!
     9ce:	4298      	cmp	r0, r3
     9d0:	d1f9      	bne.n	9c6 <compress(void*)+0x20e>
     9d2:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
     9d4:	4826      	ldr	r0, [pc, #152]	; (a70 <compress(void*)+0x2b8>)
     9d6:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
     9da:	6033      	str	r3, [r6, #0]
     9dc:	f000 fe16 	bl	160c <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     9e0:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
     9e2:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
     9e4:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     9e6:	4a23      	ldr	r2, [pc, #140]	; (a74 <compress(void*)+0x2bc>)
      if(!pushData(dout)) ret = 0;
     9e8:	bf18      	it	ne
     9ea:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
     9ec:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     9f0:	f8df e070 	ldr.w	lr, [pc, #112]	; a64 <compress(void*)+0x2ac>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     9f4:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     9f6:	f8df c078 	ldr.w	ip, [pc, #120]	; a70 <compress(void*)+0x2b8>
      while (ii < ndat) dout[nout++] = outData[ii++];
     9fa:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     9fc:	ea42 0203 	orr.w	r2, r2, r3
     a00:	f04f 0306 	mov.w	r3, #6
     a04:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a06:	6033      	str	r3, [r6, #0]
     a08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     a0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     a10:	e89e 0003 	ldmia.w	lr, {r0, r1}
     a14:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
     a18:	da8e      	bge.n	938 <compress(void*)+0x180>
     a1a:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
     a1e:	eb05 0189 	add.w	r1, r5, r9, lsl #2
     a22:	f10c 0008 	add.w	r0, ip, #8
     a26:	4442      	add	r2, r8
     a28:	0092      	lsls	r2, r2, #2
     a2a:	f007 fb23 	bl	8074 <memcpy>
     a2e:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
     a32:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
     a34:	4443      	add	r3, r8
     a36:	6033      	str	r3, [r6, #0]
}
     a38:	b003      	add	sp, #12
     a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a3e:	2267      	movs	r2, #103	; 0x67
     a40:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
     a44:	f04f 0868 	mov.w	r8, #104	; 0x68
     a48:	2361      	movs	r3, #97	; 0x61
     a4a:	2417      	movs	r4, #23
     a4c:	9201      	str	r2, [sp, #4]
     a4e:	e6f6      	b.n	83e <compress(void*)+0x86>
     a50:	20008bd0 	.word	0x20008bd0
     a54:	2002b468 	.word	0x2002b468
     a58:	2002aeec 	.word	0x2002aeec
     a5c:	2002aec4 	.word	0x2002aec4
     a60:	2002a664 	.word	0x2002a664
     a64:	2002a214 	.word	0x2002a214
     a68:	2002b490 	.word	0x2002b490
     a6c:	2002a8b8 	.word	0x2002a8b8
     a70:	20029f54 	.word	0x20029f54
     a74:	ffff0000 	.word	0xffff0000

00000a78 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     a78:	2000      	movs	r0, #0
     a7a:	4770      	bx	lr

00000a7c <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     a7c:	4770      	bx	lr
     a7e:	bf00      	nop

00000a80 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     a80:	b570      	push	{r4, r5, r6, lr}
     a82:	b082      	sub	sp, #8
     a84:	4606      	mov	r6, r0
     a86:	4614      	mov	r4, r2
     a88:	460d      	mov	r5, r1
    datetime_t t;
    rtc_get_datetime(&t);
     a8a:	4668      	mov	r0, sp
     a8c:	f000 ff6e 	bl	196c <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
     a90:	f89d 2002 	ldrb.w	r2, [sp, #2]
     a94:	f89d c003 	ldrb.w	ip, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     a98:	f8bd 3000 	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0
     a9c:	2a0c      	cmp	r2, #12
     a9e:	bf98      	it	ls
     aa0:	f1bc 0f1f 	cmpls.w	ip, #31
     aa4:	d804      	bhi.n	ab0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x30>
     aa6:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
     aaa:	b29b      	uxth	r3, r3
     aac:	2b7f      	cmp	r3, #127	; 0x7f
     aae:	d920      	bls.n	af2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
                                              : year << 9 | month << 5 | day;
     ab0:	f04f 0c00 	mov.w	ip, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
     ab4:	f89d 2005 	ldrb.w	r2, [sp, #5]
     ab8:	f89d 3006 	ldrb.w	r3, [sp, #6]
     abc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
     ac0:	2a17      	cmp	r2, #23
     ac2:	bf98      	it	ls
     ac4:	2b3b      	cmpls	r3, #59	; 0x3b
    *date = FS_DATE(t.year,t.month,t.day);
     ac6:	f8a6 c000 	strh.w	ip, [r6]
     aca:	d801      	bhi.n	ad0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x50>
     acc:	293b      	cmp	r1, #59	; 0x3b
     ace:	d905      	bls.n	adc <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5c>
             ? 0
             : hour << 11 | minute << 5 | second >> 1;
     ad0:	2300      	movs	r3, #0
    *ms10 = 0;
     ad2:	2200      	movs	r2, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
     ad4:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
     ad6:	7022      	strb	r2, [r4, #0]
}
     ad8:	b002      	add	sp, #8
     ada:	bd70      	pop	{r4, r5, r6, pc}
     adc:	015b      	lsls	r3, r3, #5
     ade:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    *ms10 = 0;
     ae2:	2200      	movs	r2, #0
     ae4:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
     ae8:	b29b      	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
     aea:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
     aec:	7022      	strb	r2, [r4, #0]
}
     aee:	b002      	add	sp, #8
     af0:	bd70      	pop	{r4, r5, r6, pc}
                                              : year << 9 | month << 5 | day;
     af2:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
     af6:	ea4c 2c43 	orr.w	ip, ip, r3, lsl #9
     afa:	fa1f fc8c 	uxth.w	ip, ip
     afe:	e7d9      	b.n	ab4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x34>

00000b00 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template <class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     b00:	4b04      	ldr	r3, [pc, #16]	; (b14 <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b02:	b510      	push	{r4, lr}
     b04:	4604      	mov	r4, r0
     b06:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() { close(); }
     b0a:	f003 ff31 	bl	4970 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b0e:	4620      	mov	r0, r4
     b10:	bd10      	pop	{r4, pc}
     b12:	bf00      	nop
     b14:	200006ec 	.word	0x200006ec

00000b18 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile   ? m_fFile->read(buf, count)
     b18:	6c83      	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
     b1a:	b500      	push	{lr}
     b1c:	b083      	sub	sp, #12
     b1e:	b163      	cbz	r3, b3a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     b20:	2201      	movs	r2, #1
     b22:	f10d 0107 	add.w	r1, sp, #7
     b26:	4618      	mov	r0, r3
     b28:	f002 fe9a 	bl	3860 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     b2c:	2801      	cmp	r0, #1
     b2e:	d10c      	bne.n	b4a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     b30:	f89d 0007 	ldrb.w	r0, [sp, #7]
     b34:	b003      	add	sp, #12
     b36:	f85d fb04 	ldr.w	pc, [sp], #4
     b3a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->read(buf, count)
     b3c:	b128      	cbz	r0, b4a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     b3e:	2201      	movs	r2, #1
     b40:	f10d 0107 	add.w	r1, sp, #7
     b44:	f001 f992 	bl	1e6c <ExFatFile::read(void*, unsigned int)>
     b48:	e7f0      	b.n	b2c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     b4a:	f04f 30ff 	mov.w	r0, #4294967295
     b4e:	e7f1      	b.n	b34 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000b50 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     b50:	6c83      	ldr	r3, [r0, #72]	; 0x48
     b52:	b113      	cbz	r3, b5a <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     b54:	4618      	mov	r0, r3
     b56:	f002 bf57 	b.w	3a08 <FatFile::peek()>
     b5a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
     b5c:	b108      	cbz	r0, b62 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     b5e:	f001 ba55 	b.w	200c <ExFatFile::peek()>
  int peek() { return BaseFile::peek(); }
     b62:	f04f 30ff 	mov.w	r0, #4294967295
     b66:	4770      	bx	lr

00000b68 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     b68:	6c83      	ldr	r3, [r0, #72]	; 0x48
     b6a:	b153      	cbz	r3, b82 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     b6c:	7818      	ldrb	r0, [r3, #0]
     b6e:	f010 0008 	ands.w	r0, r0, #8
     b72:	d00d      	beq.n	b90 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     b74:	69d8      	ldr	r0, [r3, #28]
     b76:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     b78:	1ac0      	subs	r0, r0, r3
     b7a:	bf48      	it	mi
     b7c:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     b80:	4770      	bx	lr
     b82:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     b84:	b1a3      	cbz	r3, bb0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
    return n > INT_MAX ? INT_MAX : n;
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     b86:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     b8a:	f010 0008 	ands.w	r0, r0, #8
     b8e:	d100      	bne.n	b92 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  int available() { return BaseFile::available(); }
     b90:	4770      	bx	lr
     b92:	6918      	ldr	r0, [r3, #16]
     b94:	6819      	ldr	r1, [r3, #0]
     b96:	695a      	ldr	r2, [r3, #20]
     b98:	1a40      	subs	r0, r0, r1
     b9a:	685b      	ldr	r3, [r3, #4]
     b9c:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     ba0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     ba4:	f173 0300 	sbcs.w	r3, r3, #0
     ba8:	d3f2      	bcc.n	b90 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     baa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     bae:	4770      	bx	lr
     bb0:	4618      	mov	r0, r3
     bb2:	e7ed      	b.n	b90 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000bb4 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     bb4:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bb6:	b113      	cbz	r3, bbe <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     bb8:	4618      	mov	r0, r3
     bba:	f003 b829 	b.w	3c10 <FatFile::sync()>
     bbe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
     bc0:	b108      	cbz	r0, bc6 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     bc2:	f001 bdfb 	b.w	27bc <ExFatFile::sync()>
  void flush() { BaseFile::sync(); }
     bc6:	4770      	bx	lr

00000bc8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     bc8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bca:	b113      	cbz	r3, bd2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     bcc:	4618      	mov	r0, r3
     bce:	f003 b825 	b.w	3c1c <FatFile::write(void const*, unsigned int)>
     bd2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     bd4:	b108      	cbz	r0, bda <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     bd6:	f001 bf85 	b.w	2ae4 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     bda:	4770      	bx	lr

00000bdc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) { return BaseFile::write(b); }
     bdc:	b500      	push	{lr}
    return m_fFile   ? m_fFile->write(buf, count)
     bde:	6c83      	ldr	r3, [r0, #72]	; 0x48
     be0:	b083      	sub	sp, #12
     be2:	f88d 1007 	strb.w	r1, [sp, #7]
     be6:	b143      	cbz	r3, bfa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     be8:	2201      	movs	r2, #1
     bea:	f10d 0107 	add.w	r1, sp, #7
     bee:	4618      	mov	r0, r3
     bf0:	f003 f814 	bl	3c1c <FatFile::write(void const*, unsigned int)>
     bf4:	b003      	add	sp, #12
     bf6:	f85d fb04 	ldr.w	pc, [sp], #4
     bfa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     bfc:	2800      	cmp	r0, #0
     bfe:	d0f9      	beq.n	bf4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     c00:	2201      	movs	r2, #1
     c02:	f10d 0107 	add.w	r1, sp, #7
     c06:	f001 ff6d 	bl	2ae4 <ExFatFile::write(void const*, unsigned int)>
     c0a:	b003      	add	sp, #12
     c0c:	f85d fb04 	ldr.w	pc, [sp], #4

00000c10 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     c10:	b538      	push	{r3, r4, r5, lr}
     c12:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     c14:	b149      	cbz	r1, c2a <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
     c16:	4608      	mov	r0, r1
     c18:	460d      	mov	r5, r1
     c1a:	f00b fa91 	bl	c140 <strlen>
     c1e:	6823      	ldr	r3, [r4, #0]
     c20:	4602      	mov	r2, r0
     c22:	4629      	mov	r1, r5
     c24:	685b      	ldr	r3, [r3, #4]
     c26:	4620      	mov	r0, r4
     c28:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     c2a:	4620      	mov	r0, r4
     c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     c30:	f006 be88 	b.w	7944 <Print::println()>

00000c34 <filing_init()>:
#    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     c34:	4b26      	ldr	r3, [pc, #152]	; (cd0 <filing_init()+0x9c>)
     c36:	4a27      	ldr	r2, [pc, #156]	; (cd4 <filing_init()+0xa0>)
     c38:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  #endif

  FsDateTime::callback = dateTime;
     c3c:	4926      	ldr	r1, [pc, #152]	; (cd8 <filing_init()+0xa4>)
     c3e:	4827      	ldr	r0, [pc, #156]	; (cdc <filing_init()+0xa8>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     c40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
{
     c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     c48:	4f25      	ldr	r7, [pc, #148]	; (ce0 <filing_init()+0xac>)
     c4a:	b082      	sub	sp, #8
  FsDateTime::callback = dateTime;
     c4c:	2505      	movs	r5, #5
     c4e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; cf4 <filing_init()+0xc0>
     c52:	f207 468c 	addw	r6, r7, #1164	; 0x48c
     c56:	6008      	str	r0, [r1, #0]
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     c58:	6013      	str	r3, [r2, #0]
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     c5a:	f04f 0100 	mov.w	r1, #0
     c5e:	4630      	mov	r0, r6
     c60:	f005 fb82 	bl	6368 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     c64:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     c66:	f8c7 6488 	str.w	r6, [r7, #1160]	; 0x488
    return m_card && !m_card->errorCode();
     c6a:	f004 feef 	bl	5a4c <SdioCard::errorCode() const>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     c6e:	2301      	movs	r3, #1
    return m_card && !m_card->errorCode();
     c70:	4604      	mov	r4, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     c72:	4638      	mov	r0, r7
     c74:	461a      	mov	r2, r3
    return m_card && !m_card->errorCode();
     c76:	b99c      	cbnz	r4, ca0 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     c78:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
     c7c:	9400      	str	r4, [sp, #0]
     c7e:	f003 fee1 	bl	4a44 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
     c82:	b168      	cbz	r0, ca0 <filing_init()+0x6c>
     c84:	2111      	movs	r1, #17
     c86:	4817      	ldr	r0, [pc, #92]	; (ce4 <filing_init()+0xb0>)
     c88:	f008 fbec 	bl	9464 <usb_serial_write>
     c8c:	4816      	ldr	r0, [pc, #88]	; (ce8 <filing_init()+0xb4>)
     c8e:	f006 fe59 	bl	7944 <Print::println()>

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
     c92:	2301      	movs	r3, #1
     c94:	4a15      	ldr	r2, [pc, #84]	; (cec <filing_init()+0xb8>)
      return 1;
     c96:	4618      	mov	r0, r3
      haveStore=1;
     c98:	6013      	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
     c9a:	b002      	add	sp, #8
     c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ca0:	210f      	movs	r1, #15
     ca2:	4640      	mov	r0, r8
     ca4:	f008 fbde 	bl	9464 <usb_serial_write>
     ca8:	480f      	ldr	r0, [pc, #60]	; (ce8 <filing_init()+0xb4>)
     caa:	f006 fe4b 	bl	7944 <Print::println()>
      delay(100);
     cae:	2064      	movs	r0, #100	; 0x64
     cb0:	f007 f8f8 	bl	7ea4 <delay>
  for(int ii=0; ii<5;ii++)
     cb4:	3d01      	subs	r5, #1
     cb6:	d1d0      	bne.n	c5a <filing_init()+0x26>
     cb8:	211b      	movs	r1, #27
     cba:	480d      	ldr	r0, [pc, #52]	; (cf0 <filing_init()+0xbc>)
     cbc:	f008 fbd2 	bl	9464 <usb_serial_write>
     cc0:	4809      	ldr	r0, [pc, #36]	; (ce8 <filing_init()+0xb4>)
     cc2:	f006 fe3f 	bl	7944 <Print::println()>
  return 0;
     cc6:	4628      	mov	r0, r5
}
     cc8:	b002      	add	sp, #8
     cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     cce:	bf00      	nop
     cd0:	401f4400 	.word	0x401f4400
     cd4:	2000c178 	.word	0x2000c178
     cd8:	2002a86c 	.word	0x2002a86c
     cdc:	00000a81 	.word	0x00000a81
     ce0:	2002af9c 	.word	0x2002af9c
     ce4:	200003cc 	.word	0x200003cc
     ce8:	200085c4 	.word	0x200085c4
     cec:	2002ae9c 	.word	0x2002ae9c
     cf0:	200003f0 	.word	0x200003f0
     cf4:	200003e0 	.word	0x200003e0

00000cf8 <timeStamp()>:

char * timeStamp(void)
{
     cf8:	b510      	push	{r4, lr}
     cfa:	b086      	sub	sp, #24
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
     cfc:	4c0d      	ldr	r4, [pc, #52]	; (d34 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
     cfe:	a804      	add	r0, sp, #16
     d00:	f000 fe34 	bl	196c <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
     d04:	f99d 2017 	ldrsb.w	r2, [sp, #23]
     d08:	f99d 3016 	ldrsb.w	r3, [sp, #22]
     d0c:	f99d 0015 	ldrsb.w	r0, [sp, #21]
     d10:	f99d 1013 	ldrsb.w	r1, [sp, #19]
     d14:	e9cd 3202 	strd	r3, r2, [sp, #8]
     d18:	e9cd 1000 	strd	r1, r0, [sp]
     d1c:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     d20:	4620      	mov	r0, r4
     d22:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     d26:	4904      	ldr	r1, [pc, #16]	; (d38 <timeStamp()+0x40>)
     d28:	f00a fcca 	bl	b6c0 <sprintf>
  return date_time;
}
     d2c:	4620      	mov	r0, r4
     d2e:	b006      	add	sp, #24
     d30:	bd10      	pop	{r4, pc}
     d32:	bf00      	nop
     d34:	2002a8c4 	.word	0x2002a8c4
     d38:	2000054c 	.word	0x2000054c

00000d3c <headerInit(long, long, long, int)>:

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
  int nbytes=nbits/8;
     d3c:	2a00      	cmp	r2, #0
{
     d3e:	b530      	push	{r4, r5, lr}
  int nbytes=nbits/8;
     d40:	bfb4      	ite	lt
     d42:	1dd5      	addlt	r5, r2, #7
     d44:	4615      	movge	r5, r2

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
     d46:	4c22      	ldr	r4, [pc, #136]	; (dd0 <headerInit(long, long, long, int)+0x94>)
{
     d48:	b083      	sub	sp, #12
  int nbytes=nbits/8;
     d4a:	10ed      	asrs	r5, r5, #3
  strcpy(wav_hdr.rId,"RIFF");
     d4c:	9301      	str	r3, [sp, #4]
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
     d4e:	61a0      	str	r0, [r4, #24]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
  wav_hdr.nBlockAlign=nchan*nbytes;
     d50:	fb11 fc05 	smulbb	ip, r1, r5
  wav_hdr.nBitsPerSamples=nbits;

  strcpy(&wav_hdr.info[0], MAGIC);
     d54:	4b1f      	ldr	r3, [pc, #124]	; (dd4 <headerInit(long, long, long, int)+0x98>)
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
     d56:	fb05 f000 	mul.w	r0, r5, r0
  wav_hdr.nBitsPerSamples=nbits;
     d5a:	8462      	strh	r2, [r4, #34]	; 0x22
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
     d5c:	fb01 f500 	mul.w	r5, r1, r0
  wav_hdr.nBlockAlign=nchan*nbytes;
     d60:	f8a4 c020 	strh.w	ip, [r4, #32]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
     d64:	61e5      	str	r5, [r4, #28]
  strcpy(&wav_hdr.info[0], MAGIC);
     d66:	e893 0003 	ldmia.w	r3, {r0, r1}
  strcpy(wav_hdr.wId,"WAVE");
     d6a:	4b1b      	ldr	r3, [pc, #108]	; (dd8 <headerInit(long, long, long, int)+0x9c>)
  strcpy(&wav_hdr.info[0], MAGIC);
     d6c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  strcpy(wav_hdr.wId,"WAVE");
     d70:	60a3      	str	r3, [r4, #8]
  strcpy(wav_hdr.dId,"data");
     d72:	4b1a      	ldr	r3, [pc, #104]	; (ddc <headerInit(long, long, long, int)+0xa0>)
  strcpy(wav_hdr.rId,"RIFF");
     d74:	491a      	ldr	r1, [pc, #104]	; (de0 <headerInit(long, long, long, int)+0xa4>)
  strcpy(wav_hdr.dId,"data");
     d76:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  wav_hdr.rLen=512-2*4; // will be updated at closing
     d7a:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  strcpy(&wav_hdr.info[0], MAGIC);
     d7e:	62e0      	str	r0, [r4, #44]	; 0x2c
  strcpy(wav_hdr.rId,"RIFF");
     d80:	6021      	str	r1, [r4, #0]
  wav_hdr.rLen=512-2*4; // will be updated at closing
     d82:	6063      	str	r3, [r4, #4]
  wav_hdr.dLen = 0; // will be updated at closing
     d84:	2300      	movs	r3, #0
  strcpy(wav_hdr.fId,"fmt ");
     d86:	4817      	ldr	r0, [pc, #92]	; (de4 <headerInit(long, long, long, int)+0xa8>)
  strcpy(wav_hdr.iId,"info");
     d88:	4917      	ldr	r1, [pc, #92]	; (de8 <headerInit(long, long, long, int)+0xac>)
  strcpy(wav_hdr.fId,"fmt ");
     d8a:	60e0      	str	r0, [r4, #12]
  wav_hdr.iLen = 512 - 13*4;
     d8c:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
  strcpy(wav_hdr.iId,"info");
     d90:	6261      	str	r1, [r4, #36]	; 0x24
  wav_hdr.fLen=0x10;
     d92:	2110      	movs	r1, #16
  wav_hdr.dLen = 0; // will be updated at closing
     d94:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
     d98:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  wav_hdr.iLen = 512 - 13*4;
     d9c:	62a0      	str	r0, [r4, #40]	; 0x28
  wav_hdr.nFormatTag=1;
     d9e:	e9c4 1304 	strd	r1, r3, [r4, #16]
  strcpy(&wav_hdr.info[4], timeStamp());
     da2:	f7ff ffa9 	bl	cf8 <timeStamp()>
     da6:	4601      	mov	r1, r0
     da8:	f104 0030 	add.w	r0, r4, #48	; 0x30
     dac:	f00b f906 	bl	bfbc <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
     db0:	9a01      	ldr	r2, [sp, #4]
     db2:	490e      	ldr	r1, [pc, #56]	; (dec <headerInit(long, long, long, int)+0xb0>)
     db4:	f104 0040 	add.w	r0, r4, #64	; 0x40
     db8:	f00a fc82 	bl	b6c0 <sprintf>
  strcpy(&wav_hdr.info[30]," end");
     dbc:	4b0c      	ldr	r3, [pc, #48]	; (df0 <headerInit(long, long, long, int)+0xb4>)
     dbe:	6818      	ldr	r0, [r3, #0]
     dc0:	791b      	ldrb	r3, [r3, #4]
     dc2:	f8c4 004a 	str.w	r0, [r4, #74]	; 0x4a

  return (char *)&wav_hdr;
}
     dc6:	4620      	mov	r0, r4
  strcpy(&wav_hdr.info[30]," end");
     dc8:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     dcc:	b003      	add	sp, #12
     dce:	bd30      	pop	{r4, r5, pc}
     dd0:	2002a414 	.word	0x2002a414
     dd4:	20000398 	.word	0x20000398
     dd8:	45564157 	.word	0x45564157
     ddc:	61746164 	.word	0x61746164
     de0:	46464952 	.word	0x46464952
     de4:	20746d66 	.word	0x20746d66
     de8:	6f666e69 	.word	0x6f666e69
     dec:	200003a0 	.word	0x200003a0
     df0:	200003a8 	.word	0x200003a8

00000df4 <writeHeader(char*)>:
  wav_hdr.rLen += wav_hdr.dLen;
  return (char *)&wav_hdr;
}

void writeHeader(char * wav_hdr) 
{ 
     df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_fFile   ? m_fFile->curPosition()
     df8:	4c1f      	ldr	r4, [pc, #124]	; (e78 <writeHeader(char*)+0x84>)
     dfa:	4607      	mov	r7, r0
     dfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     dfe:	b333      	cbz	r3, e4e <writeHeader(char*)+0x5a>
  bool createContiguous(const char* path, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster() const { return m_curCluster; }

  /** \return The current position for a file or directory. */
  uint32_t curPosition() const { return m_curPosition; }
     e00:	695d      	ldr	r5, [r3, #20]
     e02:	462e      	mov	r6, r5
  uint32_t fpos;
  fpos = file.curPosition();
  Serial.printf(" fpos=%d ",fpos);
     e04:	462a      	mov	r2, r5
     e06:	491d      	ldr	r1, [pc, #116]	; (e7c <writeHeader(char*)+0x88>)
     e08:	481d      	ldr	r0, [pc, #116]	; (e80 <writeHeader(char*)+0x8c>)
     e0a:	f006 fdb7 	bl	797c <Print::printf(char const*, ...)>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     e0e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e10:	b1c8      	cbz	r0, e46 <writeHeader(char*)+0x52>
     e12:	2100      	movs	r1, #0
     e14:	f002 fe2e 	bl	3a74 <FatFile::seekSet(unsigned long)>
    return m_fFile   ? m_fFile->write(buf, count)
     e18:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e1a:	b160      	cbz	r0, e36 <writeHeader(char*)+0x42>
     e1c:	4639      	mov	r1, r7
     e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
     e22:	f002 fefb 	bl	3c1c <FatFile::write(void const*, unsigned int)>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     e26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e28:	b1db      	cbz	r3, e62 <writeHeader(char*)+0x6e>
     e2a:	4629      	mov	r1, r5
     e2c:	4618      	mov	r0, r3
  file.seek(0);
  file.write(wav_hdr,512);
  file.seek(fpos);
}
     e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     e32:	f002 be1f 	b.w	3a74 <FatFile::seekSet(unsigned long)>
     e36:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     e38:	b138      	cbz	r0, e4a <writeHeader(char*)+0x56>
     e3a:	4639      	mov	r1, r7
     e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
     e40:	f001 fe50 	bl	2ae4 <ExFatFile::write(void const*, unsigned int)>
     e44:	e7ef      	b.n	e26 <writeHeader(char*)+0x32>
     e46:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->seekSet(pos)
     e48:	b930      	cbnz	r0, e58 <writeHeader(char*)+0x64>
     e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e4e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->curPosition()
     e50:	b17e      	cbz	r6, e72 <writeHeader(char*)+0x7e>
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster() const { return m_curCluster; }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const { return m_curPosition; }
     e52:	6835      	ldr	r5, [r6, #0]
     e54:	462e      	mov	r6, r5
     e56:	e7d5      	b.n	e04 <writeHeader(char*)+0x10>
           : m_xFile ? m_xFile->seekSet(pos)
     e58:	2200      	movs	r2, #0
     e5a:	2300      	movs	r3, #0
     e5c:	f001 f8ec 	bl	2038 <ExFatFile::seekSet(unsigned long long)>
     e60:	e7da      	b.n	e18 <writeHeader(char*)+0x24>
     e62:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     e64:	2800      	cmp	r0, #0
     e66:	d0f0      	beq.n	e4a <writeHeader(char*)+0x56>
     e68:	4632      	mov	r2, r6
     e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     e6e:	f001 b8e3 	b.w	2038 <ExFatFile::seekSet(unsigned long long)>
     e72:	4635      	mov	r5, r6
     e74:	e7c6      	b.n	e04 <writeHeader(char*)+0x10>
     e76:	bf00      	nop
     e78:	2002ae4c 	.word	0x2002ae4c
     e7c:	20000444 	.word	0x20000444
     e80:	200085c4 	.word	0x200085c4

00000e84 <makeHeader(long*)>:
   return wheader;
}
*/

int16_t makeHeader(int32_t *header)
{
     e84:	b530      	push	{r4, r5, lr}
     e86:	b089      	sub	sp, #36	; 0x24
     e88:	4604      	mov	r4, r0

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
     e8a:	4d1d      	ldr	r5, [pc, #116]	; (f00 <makeHeader(long*)+0x7c>)
    rtc_get_datetime(&t);
     e8c:	a806      	add	r0, sp, #24
     e8e:	f000 fd6d 	bl	196c <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
     e92:	f99d 001f 	ldrsb.w	r0, [sp, #31]
     e96:	f99d 301e 	ldrsb.w	r3, [sp, #30]
     e9a:	f99d 101d 	ldrsb.w	r1, [sp, #29]
     e9e:	f99d 201b 	ldrsb.w	r2, [sp, #27]
     ea2:	e9cd 3003 	strd	r3, r0, [sp, #12]
     ea6:	f99d 001a 	ldrsb.w	r0, [sp, #26]
     eaa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     eae:	9000      	str	r0, [sp, #0]
     eb0:	4620      	mov	r0, r4
     eb2:	e9cd 2101 	strd	r2, r1, [sp, #4]
     eb6:	4a13      	ldr	r2, [pc, #76]	; (f04 <makeHeader(long*)+0x80>)
     eb8:	4913      	ldr	r1, [pc, #76]	; (f08 <makeHeader(long*)+0x84>)
     eba:	f00a fc01 	bl	b6c0 <sprintf>
    header[10] = t_on;
     ebe:	4b13      	ldr	r3, [pc, #76]	; (f0c <makeHeader(long*)+0x88>)
    header[9] = t_acq;
     ec0:	682d      	ldr	r5, [r5, #0]
    header[8] = NCH;
     ec2:	2001      	movs	r0, #1
    header[10] = t_on;
     ec4:	681b      	ldr	r3, [r3, #0]
    header[6] = SerNum;      // serial number
     ec6:	4a12      	ldr	r2, [pc, #72]	; (f10 <makeHeader(long*)+0x8c>)
    header[10] = t_on;
     ec8:	62a3      	str	r3, [r4, #40]	; 0x28
    header[11] = t_off;
     eca:	4b12      	ldr	r3, [pc, #72]	; (f14 <makeHeader(long*)+0x90>)
    header[6] = SerNum;      // serial number
     ecc:	6812      	ldr	r2, [r2, #0]
    header[11] = t_off;
     ece:	681b      	ldr	r3, [r3, #0]
    header[7] = fsamp;
     ed0:	4911      	ldr	r1, [pc, #68]	; (f18 <makeHeader(long*)+0x94>)
    header[6] = SerNum;      // serial number
     ed2:	61a2      	str	r2, [r4, #24]
    header[7] = fsamp;
     ed4:	6809      	ldr	r1, [r1, #0]
    header[12] = proc;
     ed6:	4a11      	ldr	r2, [pc, #68]	; (f1c <makeHeader(long*)+0x98>)
    header[11] = t_off;
     ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
    header[13] = shift;
     eda:	4b11      	ldr	r3, [pc, #68]	; (f20 <makeHeader(long*)+0x9c>)
    header[9] = t_acq;
     edc:	6265      	str	r5, [r4, #36]	; 0x24
    header[5] = 20;          // SW version
     ede:	2514      	movs	r5, #20
    header[13] = shift;
     ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
    header[7] = fsamp;
     ee4:	61e1      	str	r1, [r4, #28]
    header[12] = proc;
     ee6:	f9b2 1000 	ldrsh.w	r1, [r2]

    header[127]=0x55555555;
     eea:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
     eee:	6165      	str	r5, [r4, #20]
    header[8] = NCH;
     ef0:	6220      	str	r0, [r4, #32]
    header[12] = proc;
     ef2:	6321      	str	r1, [r4, #48]	; 0x30
    header[127]=0x55555555;
     ef4:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
    header[13] = shift;
     ef8:	6363      	str	r3, [r4, #52]	; 0x34
    return 1;
}
     efa:	b009      	add	sp, #36	; 0x24
     efc:	bd30      	pop	{r4, r5, pc}
     efe:	bf00      	nop
     f00:	20008bc8 	.word	0x20008bc8
     f04:	20000398 	.word	0x20000398
     f08:	200003b0 	.word	0x200003b0
     f0c:	20008bcc 	.word	0x20008bcc
     f10:	2000c178 	.word	0x2000c178
     f14:	2002b460 	.word	0x2002b460
     f18:	20008b88 	.word	0x20008b88
     f1c:	2002b48c 	.word	0x2002b48c
     f20:	2002b490 	.word	0x2002b490

00000f24 <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
     f24:	b530      	push	{r4, r5, lr}
     f26:	b087      	sub	sp, #28
     f28:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
     f2a:	a804      	add	r0, sp, #16
     f2c:	f000 fd1e 	bl	196c <rtc_get_datetime(datetime_t*)>
  if(h==ho) return 0;
     f30:	4915      	ldr	r1, [pc, #84]	; (f88 <newDirectory(char*)+0x64>)

    if(HourDir)
    {
      if(newFolder(t.hour))
     f32:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(h==ho) return 0;
     f36:	680b      	ldr	r3, [r1, #0]
     f38:	429a      	cmp	r2, r3
     f3a:	d022      	beq.n	f82 <newDirectory(char*)+0x5e>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     f3c:	f99d 0012 	ldrsb.w	r0, [sp, #18]
     f40:	f99d 5013 	ldrsb.w	r5, [sp, #19]
     f44:	4b11      	ldr	r3, [pc, #68]	; (f8c <newDirectory(char*)+0x68>)
     f46:	e9cd 5202 	strd	r5, r2, [sp, #8]
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	9001      	str	r0, [sp, #4]
     f4e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  ho=h;
     f52:	600a      	str	r2, [r1, #0]
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     f54:	4a0e      	ldr	r2, [pc, #56]	; (f90 <newDirectory(char*)+0x6c>)
     f56:	490f      	ldr	r1, [pc, #60]	; (f94 <newDirectory(char*)+0x70>)
     f58:	9000      	str	r0, [sp, #0]
     f5a:	4620      	mov	r0, r4
     f5c:	f00a fbb0 	bl	b6c0 <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
     f60:	480d      	ldr	r0, [pc, #52]	; (f98 <newDirectory(char*)+0x74>)
     f62:	f006 fcef 	bl	7944 <Print::println()>
     f66:	2102      	movs	r1, #2
     f68:	480c      	ldr	r0, [pc, #48]	; (f9c <newDirectory(char*)+0x78>)
     f6a:	f008 fa7b 	bl	9464 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
     f6e:	4620      	mov	r0, r4
     f70:	f00b f8e6 	bl	c140 <strlen>
     f74:	4601      	mov	r1, r0
     f76:	4620      	mov	r0, r4
     f78:	f008 fa74 	bl	9464 <usb_serial_write>
          return 1;   // have new directory
     f7c:	2001      	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
     f7e:	b007      	add	sp, #28
     f80:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
     f82:	2000      	movs	r0, #0
}
     f84:	b007      	add	sp, #28
     f86:	bd30      	pop	{r4, r5, pc}
     f88:	200085d8 	.word	0x200085d8
     f8c:	2000c178 	.word	0x2000c178
     f90:	20000450 	.word	0x20000450
     f94:	20000454 	.word	0x20000454
     f98:	200085c4 	.word	0x200085c4
     f9c:	20000470 	.word	0x20000470

00000fa0 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
     fa0:	b510      	push	{r4, lr}
     fa2:	b088      	sub	sp, #32
     fa4:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
     fa6:	a806      	add	r0, sp, #24
     fa8:	f000 fce0 	bl	196c <rtc_get_datetime(datetime_t*)>
    if(proc==0)
     fac:	4b1b      	ldr	r3, [pc, #108]	; (101c <newFileName(char*)+0x7c>)
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
     fae:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    if(proc==0)
     fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
     fb6:	bb23      	cbnz	r3, 1002 <newFileName(char*)+0x62>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
     fb8:	f99d 301e 	ldrsb.w	r3, [sp, #30]
     fbc:	f99d 101d 	ldrsb.w	r1, [sp, #29]
     fc0:	f99d 201b 	ldrsb.w	r2, [sp, #27]
     fc4:	e9cd 3003 	strd	r3, r0, [sp, #12]
     fc8:	f99d 001a 	ldrsb.w	r0, [sp, #26]
     fcc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     fd0:	9000      	str	r0, [sp, #0]
     fd2:	4620      	mov	r0, r4
     fd4:	e9cd 2101 	strd	r2, r1, [sp, #4]
     fd8:	4a11      	ldr	r2, [pc, #68]	; (1020 <newFileName(char*)+0x80>)
     fda:	4912      	ldr	r1, [pc, #72]	; (1024 <newFileName(char*)+0x84>)
     fdc:	f00a fb70 	bl	b6c0 <sprintf>
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
     fe0:	4811      	ldr	r0, [pc, #68]	; (1028 <newFileName(char*)+0x88>)
     fe2:	f006 fcaf 	bl	7944 <Print::println()>
     fe6:	2102      	movs	r1, #2
     fe8:	4810      	ldr	r0, [pc, #64]	; (102c <newFileName(char*)+0x8c>)
     fea:	f008 fa3b 	bl	9464 <usb_serial_write>
     fee:	4620      	mov	r0, r4
     ff0:	f00b f8a6 	bl	c140 <strlen>
     ff4:	4601      	mov	r1, r0
     ff6:	4620      	mov	r0, r4
     ff8:	f008 fa34 	bl	9464 <usb_serial_write>
    return 1;
}
     ffc:	2001      	movs	r0, #1
     ffe:	b008      	add	sp, #32
    1000:	bd10      	pop	{r4, pc}
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    1002:	f99d 101e 	ldrsb.w	r1, [sp, #30]
    1006:	f99d 301d 	ldrsb.w	r3, [sp, #29]
    100a:	4a05      	ldr	r2, [pc, #20]	; (1020 <newFileName(char*)+0x80>)
    100c:	e9cd 1000 	strd	r1, r0, [sp]
    1010:	4907      	ldr	r1, [pc, #28]	; (1030 <newFileName(char*)+0x90>)
    1012:	4620      	mov	r0, r4
    1014:	f00a fb54 	bl	b6c0 <sprintf>
    1018:	e7e2      	b.n	fe0 <newFileName(char*)+0x40>
    101a:	bf00      	nop
    101c:	2002b48c 	.word	0x2002b48c
    1020:	2000040c 	.word	0x2000040c
    1024:	20000410 	.word	0x20000410
    1028:	200085c4 	.word	0x200085c4
    102c:	20000470 	.word	0x20000470
    1030:	20000430 	.word	0x20000430

00001034 <storeData(short)>:
static int32_t fileHeader[128];
uint32_t nbuf;

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    1034:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    1036:	4604      	mov	r4, r0
{
    1038:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    103a:	2800      	cmp	r0, #0
    103c:	d04a      	beq.n	10d4 <storeData(short)+0xa0>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    103e:	2801      	cmp	r0, #1
    1040:	d00a      	beq.n	1058 <storeData(short)+0x24>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    1042:	2802      	cmp	r0, #2
    1044:	f000 80c9 	beq.w	11da <storeData(short)+0x1a6>
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1048:	1ec3      	subs	r3, r0, #3
    104a:	b29b      	uxth	r3, r3
    104c:	2b01      	cmp	r3, #1
    104e:	f240 8144 	bls.w	12da <storeData(short)+0x2a6>
            file.close();
        }
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    }
    return status;
}
    1052:	4620      	mov	r0, r4
    1054:	b014      	add	sp, #80	; 0x50
    1056:	bd70      	pop	{r4, r5, r6, pc}
    1058:	4dad      	ldr	r5, [pc, #692]	; (1310 <storeData(short)+0x2dc>)
        if(proc==0)
    105a:	4bae      	ldr	r3, [pc, #696]	; (1314 <storeData(short)+0x2e0>)
    {   nbuf=0;
    105c:	2200      	movs	r2, #0
    105e:	4eae      	ldr	r6, [pc, #696]	; (1318 <storeData(short)+0x2e4>)
        if(proc==0)
    1060:	f9b3 3000 	ldrsh.w	r3, [r3]
    {   nbuf=0;
    1064:	6032      	str	r2, [r6, #0]
        if(proc==0)
    1066:	2b00      	cmp	r3, #0
    1068:	f040 8084 	bne.w	1174 <storeData(short)+0x140>
          hdr = headerInit(fsamp, NCH, NBITS, SerNum);
    106c:	49ab      	ldr	r1, [pc, #684]	; (131c <storeData(short)+0x2e8>)
    106e:	2218      	movs	r2, #24
    1070:	4bab      	ldr	r3, [pc, #684]	; (1320 <storeData(short)+0x2ec>)
    1072:	6808      	ldr	r0, [r1, #0]
    1074:	2101      	movs	r1, #1
    1076:	681b      	ldr	r3, [r3, #0]
    1078:	f7ff fe60 	bl	d3c <headerInit(long, long, long, int)>
    107c:	4601      	mov	r1, r0
    return m_fFile   ? m_fFile->write(buf, count)
    107e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1080:	2800      	cmp	r0, #0
    1082:	d07e      	beq.n	1182 <storeData(short)+0x14e>
    1084:	f44f 7200 	mov.w	r2, #512	; 0x200
    1088:	f002 fdc8 	bl	3c1c <FatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    108c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1090:	f0c0 8083 	bcc.w	119a <storeData(short)+0x166>
    1094:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1096:	2800      	cmp	r0, #0
    1098:	f000 8096 	beq.w	11c8 <storeData(short)+0x194>
    109c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    10a0:	49a0      	ldr	r1, [pc, #640]	; (1324 <storeData(short)+0x2f0>)
    10a2:	f002 fdbb 	bl	3c1c <FatFile::write(void const*, unsigned int)>
    10a6:	4604      	mov	r4, r0
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    10a8:	f5b4 5fc0 	cmp.w	r4, #6144	; 0x1800
    10ac:	f0c0 8099 	bcc.w	11e2 <storeData(short)+0x1ae>
        disk_count++;
    10b0:	499d      	ldr	r1, [pc, #628]	; (1328 <storeData(short)+0x2f4>)
          nbuf++;
    10b2:	6833      	ldr	r3, [r6, #0]
        disk_count++;
    10b4:	680a      	ldr	r2, [r1, #0]
          nbuf++;
    10b6:	3301      	adds	r3, #1
        disk_count++;
    10b8:	3201      	adds	r2, #1
          nbuf++;
    10ba:	6033      	str	r3, [r6, #0]
        disk_count++;
    10bc:	600a      	str	r2, [r1, #0]
    10be:	499b      	ldr	r1, [pc, #620]	; (132c <storeData(short)+0x2f8>)
        if((nbuf % 1000)==0 ) file.flush();
    10c0:	4a9b      	ldr	r2, [pc, #620]	; (1330 <storeData(short)+0x2fc>)
        disk_count++;
    10c2:	fb01 f303 	mul.w	r3, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    10c6:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
    10ca:	d275      	bcs.n	11b8 <storeData(short)+0x184>
    10cc:	2402      	movs	r4, #2
}
    10ce:	4620      	mov	r0, r4
    10d0:	b014      	add	sp, #80	; 0x50
    10d2:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    10d4:	4897      	ldr	r0, [pc, #604]	; (1334 <storeData(short)+0x300>)
    10d6:	f7ff ff25 	bl	f24 <newDirectory(char*)>
    10da:	b1d8      	cbz	r0, 1114 <storeData(short)+0xe0>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
    10dc:	4d96      	ldr	r5, [pc, #600]	; (1338 <storeData(short)+0x304>)
    10de:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    10e2:	2a00      	cmp	r2, #0
    10e4:	f000 80bb 	beq.w	125e <storeData(short)+0x22a>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    10e8:	466e      	mov	r6, sp
    10ea:	4611      	mov	r1, r2
    10ec:	4623      	mov	r3, r4
    10ee:	4a91      	ldr	r2, [pc, #580]	; (1334 <storeData(short)+0x300>)
    10f0:	4630      	mov	r0, r6
  FatFile() {}
    10f2:	9400      	str	r4, [sp, #0]
    10f4:	f002 fb90 	bl	3818 <FatFile::open(FatVolume*, char const*, int)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    10f8:	2800      	cmp	r0, #0
    10fa:	f000 80bd 	beq.w	1278 <storeData(short)+0x244>
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    10fe:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    1102:	2800      	cmp	r0, #0
    1104:	f000 80cf 	beq.w	12a6 <storeData(short)+0x272>
    1108:	498a      	ldr	r1, [pc, #552]	; (1334 <storeData(short)+0x300>)
    110a:	f003 fbbb 	bl	4884 <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    110e:	2800      	cmp	r0, #0
    1110:	f000 80d2 	beq.w	12b8 <storeData(short)+0x284>
        if(newFileName(fileName))
    1114:	4889      	ldr	r0, [pc, #548]	; (133c <storeData(short)+0x308>)
    1116:	f7ff ff43 	bl	fa0 <newFileName(char*)>
    111a:	2800      	cmp	r0, #0
    111c:	f000 80f5 	beq.w	130a <storeData(short)+0x2d6>
            file = sd.open(fileName, FILE_WRITE); 
    1120:	f244 2302 	movw	r3, #16898	; 0x4202
    1124:	4a85      	ldr	r2, [pc, #532]	; (133c <storeData(short)+0x308>)
    1126:	4984      	ldr	r1, [pc, #528]	; (1338 <storeData(short)+0x304>)
    1128:	4668      	mov	r0, sp
    112a:	f003 fd15 	bl	4b58 <FsVolume::open(char const*, int)>
class Print
    112e:	4d78      	ldr	r5, [pc, #480]	; (1310 <storeData(short)+0x2dc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1130:	f89d 300c 	ldrb.w	r3, [sp, #12]
class StreamFile : public stream_t, public BaseFile {
    1134:	f105 0010 	add.w	r0, r5, #16
    1138:	732b      	strb	r3, [r5, #12]
    113a:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    113e:	e9c5 1201 	strd	r1, r2, [r5, #4]
    1142:	a904      	add	r1, sp, #16
    1144:	f003 fbc6 	bl	48d4 <FsBaseFile::operator=(FsBaseFile const&)>
    1148:	4b7d      	ldr	r3, [pc, #500]	; (1340 <storeData(short)+0x30c>)
  ~FsBaseFile() { close(); }
    114a:	a804      	add	r0, sp, #16
    114c:	9300      	str	r3, [sp, #0]
    114e:	f003 fc0f 	bl	4970 <FsBaseFile::close()>
  bool isOpen() const { return m_fFile || m_xFile; }
    1152:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1154:	2b00      	cmp	r3, #0
    1156:	d180      	bne.n	105a <storeData(short)+0x26>
    1158:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    115a:	2b00      	cmp	r3, #0
    115c:	f47f af7d 	bne.w	105a <storeData(short)+0x26>
    1160:	2111      	movs	r1, #17
    1162:	4878      	ldr	r0, [pc, #480]	; (1344 <storeData(short)+0x310>)
    1164:	f008 f97e 	bl	9464 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1168:	4877      	ldr	r0, [pc, #476]	; (1348 <storeData(short)+0x314>)
                return STOPPED; 
    116a:	f04f 34ff 	mov.w	r4, #4294967295
    116e:	f006 fbe9 	bl	7944 <Print::println()>
    1172:	e76e      	b.n	1052 <storeData(short)+0x1e>
          makeHeader(fileHeader);
    1174:	4875      	ldr	r0, [pc, #468]	; (134c <storeData(short)+0x318>)
    1176:	f7ff fe85 	bl	e84 <makeHeader(long*)>
    return m_fFile   ? m_fFile->write(buf, count)
    117a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr=(char *)fileHeader;
    117c:	4973      	ldr	r1, [pc, #460]	; (134c <storeData(short)+0x318>)
    117e:	2800      	cmp	r0, #0
    1180:	d180      	bne.n	1084 <storeData(short)+0x50>
    1182:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
    1184:	2800      	cmp	r0, #0
    1186:	f000 809e 	beq.w	12c6 <storeData(short)+0x292>
    118a:	f44f 7200 	mov.w	r2, #512	; 0x200
    118e:	f001 fca9 	bl	2ae4 <ExFatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    1192:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1196:	f4bf af7d 	bcs.w	1094 <storeData(short)+0x60>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    119a:	2400      	movs	r4, #0
  bool isOpen() const { return m_fFile || m_xFile; }
    119c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    119e:	2b00      	cmp	r3, #0
    11a0:	d059      	beq.n	1256 <storeData(short)+0x222>
        {   if(proc==0)
    11a2:	4b5c      	ldr	r3, [pc, #368]	; (1314 <storeData(short)+0x2e0>)
    11a4:	f9b3 3000 	ldrsh.w	r3, [r3]
    11a8:	2b00      	cmp	r3, #0
    11aa:	d046      	beq.n	123a <storeData(short)+0x206>
            file.close();
    11ac:	4868      	ldr	r0, [pc, #416]	; (1350 <storeData(short)+0x31c>)
    11ae:	f003 fbdf 	bl	4970 <FsBaseFile::close()>
}
    11b2:	4620      	mov	r0, r4
    11b4:	b014      	add	sp, #80	; 0x50
    11b6:	bd70      	pop	{r4, r5, r6, pc}
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    11b8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    11ba:	2800      	cmp	r0, #0
    11bc:	f000 8085 	beq.w	12ca <storeData(short)+0x296>
    11c0:	2402      	movs	r4, #2
    11c2:	f002 fd25 	bl	3c10 <FatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    11c6:	e744      	b.n	1052 <storeData(short)+0x1e>
    11c8:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
    11ca:	b148      	cbz	r0, 11e0 <storeData(short)+0x1ac>
    11cc:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    11d0:	4954      	ldr	r1, [pc, #336]	; (1324 <storeData(short)+0x2f0>)
    11d2:	f001 fc87 	bl	2ae4 <ExFatFile::write(void const*, unsigned int)>
    11d6:	4604      	mov	r4, r0
    11d8:	e766      	b.n	10a8 <storeData(short)+0x74>
    11da:	4d4d      	ldr	r5, [pc, #308]	; (1310 <storeData(short)+0x2dc>)
    11dc:	4e4e      	ldr	r6, [pc, #312]	; (1318 <storeData(short)+0x2e4>)
    11de:	e759      	b.n	1094 <storeData(short)+0x60>
    11e0:	4604      	mov	r4, r0
    11e2:	2101      	movs	r1, #1
    11e4:	485b      	ldr	r0, [pc, #364]	; (1354 <storeData(short)+0x320>)
    11e6:	f008 f93d 	bl	9464 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    11ea:	2300      	movs	r3, #0
    11ec:	220a      	movs	r2, #10
    11ee:	4621      	mov	r1, r4
    11f0:	4855      	ldr	r0, [pc, #340]	; (1348 <storeData(short)+0x314>)
    11f2:	f006 fbd1 	bl	7998 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    11f6:	2101      	movs	r1, #1
    11f8:	4857      	ldr	r0, [pc, #348]	; (1358 <storeData(short)+0x324>)
    11fa:	f008 f933 	bl	9464 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    11fe:	2102      	movs	r1, #2
    1200:	4851      	ldr	r0, [pc, #324]	; (1348 <storeData(short)+0x314>)
    1202:	f006 fb93 	bl	792c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1206:	4850      	ldr	r0, [pc, #320]	; (1348 <storeData(short)+0x314>)
    1208:	f006 fb9c 	bl	7944 <Print::println()>
        disk_count++;
    120c:	4946      	ldr	r1, [pc, #280]	; (1328 <storeData(short)+0x2f4>)
    120e:	4847      	ldr	r0, [pc, #284]	; (132c <storeData(short)+0x2f8>)
    1210:	6833      	ldr	r3, [r6, #0]
    1212:	680a      	ldr	r2, [r1, #0]
    1214:	fb00 f303 	mul.w	r3, r0, r3
        if((nbuf % 1000)==0 ) file.flush();
    1218:	4845      	ldr	r0, [pc, #276]	; (1330 <storeData(short)+0x2fc>)
        disk_count++;
    121a:	3201      	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    121c:	ebb0 0ff3 	cmp.w	r0, r3, ror #3
        disk_count++;
    1220:	600a      	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    1222:	d3ba      	bcc.n	119a <storeData(short)+0x166>
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    1224:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1226:	2800      	cmp	r0, #0
    1228:	d059      	beq.n	12de <storeData(short)+0x2aa>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    122a:	2403      	movs	r4, #3
    122c:	f002 fcf0 	bl	3c10 <FatFile::sync()>
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    1230:	3c03      	subs	r4, #3
    1232:	bf18      	it	ne
    1234:	f04f 34ff 	movne.w	r4, #4294967295
    1238:	e7b0      	b.n	119c <storeData(short)+0x168>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    123a:	4b37      	ldr	r3, [pc, #220]	; (1318 <storeData(short)+0x2e4>)
  wav_hdr.dLen = nbytes;
    123c:	4847      	ldr	r0, [pc, #284]	; (135c <storeData(short)+0x328>)
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    123e:	681b      	ldr	r3, [r3, #0]
  wav_hdr.rLen += wav_hdr.dLen;
    1240:	6842      	ldr	r2, [r0, #4]
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    1242:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1246:	02db      	lsls	r3, r3, #11
  wav_hdr.rLen += wav_hdr.dLen;
    1248:	441a      	add	r2, r3
  wav_hdr.dLen = nbytes;
    124a:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    124e:	6042      	str	r2, [r0, #4]
              writeHeader(hdr);
    1250:	f7ff fdd0 	bl	df4 <writeHeader(char*)>
    1254:	e7aa      	b.n	11ac <storeData(short)+0x178>
  bool isOpen() const { return m_fFile || m_xFile; }
    1256:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1258:	2b00      	cmp	r3, #0
    125a:	d1a2      	bne.n	11a2 <storeData(short)+0x16e>
    125c:	e6f9      	b.n	1052 <storeData(short)+0x1e>
    125e:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           : m_xVol ? m_xVol->exists(path)
    1262:	b1c9      	cbz	r1, 1298 <storeData(short)+0x264>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1264:	466e      	mov	r6, sp
    1266:	4613      	mov	r3, r2
  ExFatFile() {}
    1268:	920c      	str	r2, [sp, #48]	; 0x30
    126a:	4630      	mov	r0, r6
    126c:	4a31      	ldr	r2, [pc, #196]	; (1334 <storeData(short)+0x300>)
    126e:	f001 f9b7 	bl	25e0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1272:	2800      	cmp	r0, #0
    1274:	f47f af43 	bne.w	10fe <storeData(short)+0xca>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    1278:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    127c:	2a00      	cmp	r2, #0
    127e:	d035      	beq.n	12ec <storeData(short)+0x2b8>
    1280:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1282:	f202 4144 	addw	r1, r2, #1092	; 0x444
    1286:	2301      	movs	r3, #1
    1288:	4630      	mov	r0, r6
    128a:	4a2a      	ldr	r2, [pc, #168]	; (1334 <storeData(short)+0x300>)
    128c:	9400      	str	r4, [sp, #0]
    128e:	f002 f9d5 	bl	363c <FatFile::mkdir(FatFile*, char const*, bool)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1292:	2800      	cmp	r0, #0
    1294:	f47f af33 	bne.w	10fe <storeData(short)+0xca>
    1298:	4931      	ldr	r1, [pc, #196]	; (1360 <storeData(short)+0x32c>)
    129a:	f04f 34ff 	mov.w	r4, #4294967295
    129e:	482a      	ldr	r0, [pc, #168]	; (1348 <storeData(short)+0x314>)
    12a0:	f7ff fcb6 	bl	c10 <Print::println(char const*) [clone .isra.0]>
    12a4:	e6d5      	b.n	1052 <storeData(short)+0x1e>
    12a6:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    12aa:	b128      	cbz	r0, 12b8 <storeData(short)+0x284>
    12ac:	4921      	ldr	r1, [pc, #132]	; (1334 <storeData(short)+0x300>)
    12ae:	f002 f81b 	bl	32e8 <ExFatVolume::chdir(char const*)>
    12b2:	2800      	cmp	r0, #0
    12b4:	f47f af2e 	bne.w	1114 <storeData(short)+0xe0>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    12b8:	492a      	ldr	r1, [pc, #168]	; (1364 <storeData(short)+0x330>)
    12ba:	f04f 34ff 	mov.w	r4, #4294967295
    12be:	4822      	ldr	r0, [pc, #136]	; (1348 <storeData(short)+0x314>)
    12c0:	f7ff fca6 	bl	c10 <Print::println(char const*) [clone .isra.0]>
    12c4:	e6c5      	b.n	1052 <storeData(short)+0x1e>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    12c6:	2400      	movs	r4, #0
    12c8:	e6c3      	b.n	1052 <storeData(short)+0x1e>
    12ca:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    12cc:	2402      	movs	r4, #2
    12ce:	2800      	cmp	r0, #0
    12d0:	f43f aebf 	beq.w	1052 <storeData(short)+0x1e>
    12d4:	f001 fa72 	bl	27bc <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    12d8:	e6bb      	b.n	1052 <storeData(short)+0x1e>
    12da:	4d0d      	ldr	r5, [pc, #52]	; (1310 <storeData(short)+0x2dc>)
    12dc:	e7a8      	b.n	1230 <storeData(short)+0x1fc>
    12de:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    12e0:	2800      	cmp	r0, #0
    12e2:	d0f0      	beq.n	12c6 <storeData(short)+0x292>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    12e4:	2403      	movs	r4, #3
    12e6:	f001 fa69 	bl	27bc <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    12ea:	e7a1      	b.n	1230 <storeData(short)+0x1fc>
    12ec:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    12f0:	2900      	cmp	r1, #0
    12f2:	d0d1      	beq.n	1298 <storeData(short)+0x264>
    12f4:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    12f6:	2301      	movs	r3, #1
    12f8:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    12fc:	4630      	mov	r0, r6
    12fe:	4a0d      	ldr	r2, [pc, #52]	; (1334 <storeData(short)+0x300>)
    1300:	f001 fb14 	bl	292c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1304:	2800      	cmp	r0, #0
    1306:	d0c7      	beq.n	1298 <storeData(short)+0x264>
    1308:	e6f9      	b.n	10fe <storeData(short)+0xca>
        {  return STOPPED; // if file open fails: don't do anything
    130a:	f04f 34ff 	mov.w	r4, #4294967295
    130e:	e6a0      	b.n	1052 <storeData(short)+0x1e>
    1310:	2002ae4c 	.word	0x2002ae4c
    1314:	2002b48c 	.word	0x2002b48c
    1318:	2002aec8 	.word	0x2002aec8
    131c:	20008b88 	.word	0x20008b88
    1320:	2000c178 	.word	0x2000c178
    1324:	2000c540 	.word	0x2000c540
    1328:	2002ae24 	.word	0x2002ae24
    132c:	26e978d5 	.word	0x26e978d5
    1330:	00418937 	.word	0x00418937
    1334:	2002a1c4 	.word	0x2002a1c4
    1338:	2002af9c 	.word	0x2002af9c
    133c:	2002a614 	.word	0x2002a614
    1340:	200006ec 	.word	0x200006ec
    1344:	20000534 	.word	0x20000534
    1348:	200085c4 	.word	0x200085c4
    134c:	2000dd40 	.word	0x2000dd40
    1350:	2002ae5c 	.word	0x2002ae5c
    1354:	20000548 	.word	0x20000548
    1358:	2000044c 	.word	0x2000044c
    135c:	2002a414 	.word	0x2002a414
    1360:	2000051c 	.word	0x2000051c
    1364:	20000528 	.word	0x20000528

00001368 <saveData(short)>:
//
volatile int32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    1368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    136c:	4605      	mov	r5, r0
    if(status==STOPPED) 
    136e:	3001      	adds	r0, #1
    1370:	f000 8091 	beq.w	1496 <saveData(short)+0x12e>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1374:	4b63      	ldr	r3, [pc, #396]	; (1504 <saveData(short)+0x19c>)
    1376:	2208      	movs	r2, #8
      digitalWriteFast(13,HIGH);
    }
    else
      digitalWriteFast(13,LOW);

    if(status<CLOSED) return status; // we are stopped: don't do anything
    1378:	2d00      	cmp	r5, #0
    137a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    137e:	f2c0 809e 	blt.w	14be <saveData(short)+0x156>
  tx=rtc_get();
    1382:	f006 ff45 	bl	8210 <rtc_get>
  tx = tx % t_acq;
    1386:	4b60      	ldr	r3, [pc, #384]	; (1508 <saveData(short)+0x1a0>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    1388:	2d01      	cmp	r5, #1
  tx = tx % t_acq;
    138a:	681b      	ldr	r3, [r3, #0]
    138c:	fbb0 f2f3 	udiv	r2, r0, r3
    1390:	fb02 0013 	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    1394:	4b5d      	ldr	r3, [pc, #372]	; (150c <saveData(short)+0x1a4>)
    1396:	dd05      	ble.n	13a4 <saveData(short)+0x3c>
    1398:	681a      	ldr	r2, [r3, #0]
    139a:	b11a      	cbz	r2, 13a4 <saveData(short)+0x3c>
    139c:	681a      	ldr	r2, [r3, #0]
    139e:	4290      	cmp	r0, r2
    13a0:	bf38      	it	cc
    13a2:	2503      	movcc	r5, #3
  tx_=tx;
    13a4:	6018      	str	r0, [r3, #0]

    status=checkEndOfFile(status);

    if(getDataCount()>=nblocks)
    13a6:	f000 f91d 	bl	15e4 <getDataCount()>
    13aa:	280f      	cmp	r0, #15
    13ac:	f240 808a 	bls.w	14c4 <saveData(short)+0x15c>
    { 
      digitalWriteFast(13,HIGH);
      if(proc==0)
    13b0:	4b57      	ldr	r3, [pc, #348]	; (1510 <saveData(short)+0x1a8>)
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    13b2:	2108      	movs	r1, #8
    13b4:	4a53      	ldr	r2, [pc, #332]	; (1504 <saveData(short)+0x19c>)
    13b6:	f9b3 3000 	ldrsh.w	r3, [r3]
    13ba:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    13be:	2b00      	cmp	r3, #0
    13c0:	f040 8087 	bne.w	14d2 <saveData(short)+0x16a>
    13c4:	4e53      	ldr	r6, [pc, #332]	; (1514 <saveData(short)+0x1ac>)
    13c6:	f506 5800 	add.w	r8, r6, #8192	; 0x2000
    13ca:	46b1      	mov	r9, r6
    13cc:	4637      	mov	r7, r6
      { 
        for(int ii=0; ii<nblocks; ii++)
        { while(queue_isBusy()); //wait if acq writes to queue
    13ce:	f000 f917 	bl	1600 <queue_isBusy()>
    13d2:	4604      	mov	r4, r0
    13d4:	2800      	cmp	r0, #0
    13d6:	d1fa      	bne.n	13ce <saveData(short)+0x66>
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    13d8:	4638      	mov	r0, r7
        for(int ii=0; ii<nblocks; ii++)
    13da:	f507 7700 	add.w	r7, r7, #512	; 0x200
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    13de:	f000 f957 	bl	1690 <pullData(unsigned long*)>
        for(int ii=0; ii<nblocks; ii++)
    13e2:	4547      	cmp	r7, r8
    13e4:	d1f3      	bne.n	13ce <saveData(short)+0x66>
        }

        // differentiate
        static int32_t data0=0;
        tempBuffer1[0] =tempBuffer0[0]-data0;
    13e6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1544 <saveData(short)+0x1dc>
    13ea:	4f4b      	ldr	r7, [pc, #300]	; (1518 <saveData(short)+0x1b0>)
    13ec:	f8d9 2000 	ldr.w	r2, [r9]
    13f0:	f8d8 3000 	ldr.w	r3, [r8]
    13f4:	46be      	mov	lr, r7
    13f6:	4849      	ldr	r0, [pc, #292]	; (151c <saveData(short)+0x1b4>)
    13f8:	4639      	mov	r1, r7
    13fa:	eba2 0c03 	sub.w	ip, r2, r3
        for(int ii=1;ii<MAX_TEMP_BUFFER; ii++) tempBuffer1[ii]=tempBuffer0[ii]-tempBuffer0[ii-1];
    13fe:	4613      	mov	r3, r2
    1400:	f856 2f04 	ldr.w	r2, [r6, #4]!
    1404:	1ad3      	subs	r3, r2, r3
    1406:	4286      	cmp	r6, r0
    1408:	f841 3f04 	str.w	r3, [r1, #4]!
    140c:	d1f7      	bne.n	13fe <saveData(short)+0x96>
        data0=tempBuffer0[MAX_TEMP_BUFFER-1];
    140e:	4b44      	ldr	r3, [pc, #272]	; (1520 <saveData(short)+0x1b8>)
    1410:	f8d3 3ffc 	ldr.w	r3, [r3, #4092]	; 0xffc
    1414:	f8c8 3000 	str.w	r3, [r8]

        // remove initial offset
        static int first=1; if(first)  { tempBuffer1[0]=0; first=0;} 
    1418:	4b42      	ldr	r3, [pc, #264]	; (1524 <saveData(short)+0x1bc>)
    141a:	681a      	ldr	r2, [r3, #0]
    141c:	b112      	cbz	r2, 1424 <saveData(short)+0xbc>
    141e:	2600      	movs	r6, #0
    1420:	46b4      	mov	ip, r6
    1422:	601e      	str	r6, [r3, #0]

        // integrate
        static int32_t data1=0;
        tempBuffer1[0]=tempBuffer1[0]+data1;
    1424:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1548 <saveData(short)+0x1e0>
    1428:	483f      	ldr	r0, [pc, #252]	; (1528 <saveData(short)+0x1c0>)
    142a:	f8d8 2000 	ldr.w	r2, [r8]
    142e:	4b3a      	ldr	r3, [pc, #232]	; (1518 <saveData(short)+0x1b0>)
    1430:	eb0c 0602 	add.w	r6, ip, r2
    1434:	4632      	mov	r2, r6
    1436:	f8ce 6000 	str.w	r6, [lr]
        for(int ii=1;ii<MAX_TEMP_BUFFER; ii++) tempBuffer1[ii] += tempBuffer1[ii-1];
    143a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    143e:	440a      	add	r2, r1
    1440:	4283      	cmp	r3, r0
    1442:	601a      	str	r2, [r3, #0]
    1444:	d1f9      	bne.n	143a <saveData(short)+0xd2>
        data1=tempBuffer1[MAX_TEMP_BUFFER-1];        
    1446:	4b39      	ldr	r3, [pc, #228]	; (152c <saveData(short)+0x1c4>)
    1448:	4a39      	ldr	r2, [pc, #228]	; (1530 <saveData(short)+0x1c8>)
    144a:	f8d3 3ffc 	ldr.w	r3, [r3, #4092]	; 0xffc
    144e:	f8c8 3000 	str.w	r3, [r8]

        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer1[ii];
    1452:	e001      	b.n	1458 <saveData(short)+0xf0>
    1454:	f857 6f04 	ldr.w	r6, [r7, #4]!
    1458:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    145c:	3401      	adds	r4, #1
    145e:	2c08      	cmp	r4, #8
    1460:	d1f8      	bne.n	1454 <saveData(short)+0xec>
    1462:	4934      	ldr	r1, [pc, #208]	; (1534 <saveData(short)+0x1cc>)
    1464:	4a34      	ldr	r2, [pc, #208]	; (1538 <saveData(short)+0x1d0>)
          int jj=0;
          uint8_t * outptr=(uint8_t *) diskBuffer;
          uint32_t *inpp=(uint32_t *) tempBuffer1;
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
          {
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    1466:	f851 3f04 	ldr.w	r3, [r1, #4]!
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    146a:	3203      	adds	r2, #3
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    146c:	0a1e      	lsrs	r6, r3, #8
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    146e:	4281      	cmp	r1, r0
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    1470:	ea4f 4413 	mov.w	r4, r3, lsr #16
            outptr[jj++]=(inpp[ii]>>24) &0xff;
    1474:	ea4f 6313 	mov.w	r3, r3, lsr #24
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    1478:	f802 6c03 	strb.w	r6, [r2, #-3]
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    147c:	f802 4c02 	strb.w	r4, [r2, #-2]
            outptr[jj++]=(inpp[ii]>>24) &0xff;
    1480:	f802 3c01 	strb.w	r3, [r2, #-1]
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    1484:	d1ef      	bne.n	1466 <saveData(short)+0xfe>
        { while(queue_isBusy()); //wait if acq writes to queue
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
        }
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      }
      if(haveStore)
    1486:	4b2d      	ldr	r3, [pc, #180]	; (153c <saveData(short)+0x1d4>)
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	b1c3      	cbz	r3, 14be <saveData(short)+0x156>
        status=storeData(status);
    148c:	4628      	mov	r0, r5
    }
    else
      digitalWriteFast(13,LOW);

    return status;
}
    148e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        status=storeData(status);
    1492:	f7ff bdcf 	b.w	1034 <storeData(short)>
      while(queue_isBusy()); //wait if acq writes to queue
    1496:	f000 f8b3 	bl	1600 <queue_isBusy()>
    149a:	4604      	mov	r4, r0
    149c:	2800      	cmp	r0, #0
    149e:	d1fa      	bne.n	1496 <saveData(short)+0x12e>
      pullData((uint32_t*)tempBuffer1);
    14a0:	481d      	ldr	r0, [pc, #116]	; (1518 <saveData(short)+0x1b0>)
    14a2:	f000 f8f5 	bl	1690 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer1[ii];
    14a6:	4b23      	ldr	r3, [pc, #140]	; (1534 <saveData(short)+0x1cc>)
    14a8:	4a21      	ldr	r2, [pc, #132]	; (1530 <saveData(short)+0x1c8>)
    14aa:	f853 1f04 	ldr.w	r1, [r3, #4]!
    14ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    14b2:	3401      	adds	r4, #1
    14b4:	2c08      	cmp	r4, #8
    14b6:	d1f8      	bne.n	14aa <saveData(short)+0x142>
    14b8:	4b12      	ldr	r3, [pc, #72]	; (1504 <saveData(short)+0x19c>)
    14ba:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
    14be:	4628      	mov	r0, r5
    14c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    14c4:	4b0f      	ldr	r3, [pc, #60]	; (1504 <saveData(short)+0x19c>)
    14c6:	2208      	movs	r2, #8
    14c8:	4628      	mov	r0, r5
    14ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    14ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    14d2:	4e19      	ldr	r6, [pc, #100]	; (1538 <saveData(short)+0x1d0>)
    14d4:	f506 57c0 	add.w	r7, r6, #6144	; 0x1800
        { while(queue_isBusy()); //wait if acq writes to queue
    14d8:	f000 f892 	bl	1600 <queue_isBusy()>
    14dc:	4604      	mov	r4, r0
    14de:	2800      	cmp	r0, #0
    14e0:	d1fa      	bne.n	14d8 <saveData(short)+0x170>
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    14e2:	4630      	mov	r0, r6
        for(int ii=0; ii<NDBL; ii++)
    14e4:	f506 7600 	add.w	r6, r6, #512	; 0x200
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    14e8:	f000 f8d2 	bl	1690 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    14ec:	42be      	cmp	r6, r7
    14ee:	d1f3      	bne.n	14d8 <saveData(short)+0x170>
    14f0:	4b13      	ldr	r3, [pc, #76]	; (1540 <saveData(short)+0x1d8>)
    14f2:	4a0f      	ldr	r2, [pc, #60]	; (1530 <saveData(short)+0x1c8>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    14f4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    14f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    14fc:	3401      	adds	r4, #1
    14fe:	2c08      	cmp	r4, #8
    1500:	d1f8      	bne.n	14f4 <saveData(short)+0x18c>
    1502:	e7c0      	b.n	1486 <saveData(short)+0x11e>
    1504:	42004000 	.word	0x42004000
    1508:	20008bc8 	.word	0x20008bc8
    150c:	2002a8ac 	.word	0x2002a8ac
    1510:	2002b48c 	.word	0x2002b48c
    1514:	20025f4c 	.word	0x20025f4c
    1518:	20027f4c 	.word	0x20027f4c
    151c:	20027f48 	.word	0x20027f48
    1520:	20026f4c 	.word	0x20026f4c
    1524:	200085d4 	.word	0x200085d4
    1528:	20029f48 	.word	0x20029f48
    152c:	20028f4c 	.word	0x20028f4c
    1530:	2002aea4 	.word	0x2002aea4
    1534:	20027f48 	.word	0x20027f48
    1538:	2000c540 	.word	0x2000c540
    153c:	2002ae9c 	.word	0x2002ae9c
    1540:	2000c53c 	.word	0x2000c53c
    1544:	2002a8bc 	.word	0x2002a8bc
    1548:	2002a8c0 	.word	0x2002a8c0

0000154c <_GLOBAL__sub_I_t_acq>:
  FsVolume() = default;
    154c:	481c      	ldr	r0, [pc, #112]	; (15c0 <_GLOBAL__sub_I_t_acq+0x74>)
	SPISettings() : _clock(4000000) {
    154e:	4b1d      	ldr	r3, [pc, #116]	; (15c4 <_GLOBAL__sub_I_t_acq+0x78>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1550:	491d      	ldr	r1, [pc, #116]	; (15c8 <_GLOBAL__sub_I_t_acq+0x7c>)
SdFs sd;
    1552:	4a1e      	ldr	r2, [pc, #120]	; (15cc <_GLOBAL__sub_I_t_acq+0x80>)
}
    1554:	b510      	push	{r4, lr}
    1556:	f8c0 34a0 	str.w	r3, [r0, #1184]	; 0x4a0
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() { initSharedSpiCard(); }
    155a:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    155e:	2400      	movs	r4, #0
    1560:	f8c0 148c 	str.w	r1, [r0, #1164]	; 0x48c
    1564:	f8c0 34a8 	str.w	r3, [r0, #1192]	; 0x4a8
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1568:	2107      	movs	r1, #7
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    156a:	4b19      	ldr	r3, [pc, #100]	; (15d0 <_GLOBAL__sub_I_t_acq+0x84>)
    156c:	f8c0 4480 	str.w	r4, [r0, #1152]	; 0x480
    1570:	f8c0 4484 	str.w	r4, [r0, #1156]	; 0x484
class SdBase : public Vol {
    1574:	f8c0 4488 	str.w	r4, [r0, #1160]	; 0x488
  SdioConfig() {}
    1578:	f8a0 4494 	strh.w	r4, [r0, #1172]	; 0x494
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    157c:	f8c0 449c 	str.w	r4, [r0, #1180]	; 0x49c
  SharedSpiCard() { initSharedSpiCard(); }
    1580:	f8a0 44ac 	strh.w	r4, [r0, #1196]	; 0x4ac
    1584:	f8c0 14a4 	str.w	r1, [r0, #1188]	; 0x4a4
    m_type = 0;
    1588:	f880 44ae 	strb.w	r4, [r0, #1198]	; 0x4ae
SdFs sd;
    158c:	4911      	ldr	r1, [pc, #68]	; (15d4 <_GLOBAL__sub_I_t_acq+0x88>)
  DedicatedSpiCard() = default;
    158e:	f8c0 44b0 	str.w	r4, [r0, #1200]	; 0x4b0
    1592:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    1596:	f880 44b4 	strb.w	r4, [r0, #1204]	; 0x4b4
    159a:	f008 f97b 	bl	9894 <__aeabi_atexit>
	constexpr Print() : write_error(0) {}
    159e:	480e      	ldr	r0, [pc, #56]	; (15d8 <_GLOBAL__sub_I_t_acq+0x8c>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    15a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    15a4:	4b0d      	ldr	r3, [pc, #52]	; (15dc <_GLOBAL__sub_I_t_acq+0x90>)
    15a6:	7304      	strb	r4, [r0, #12]
FsFile file;
    15a8:	4a08      	ldr	r2, [pc, #32]	; (15cc <_GLOBAL__sub_I_t_acq+0x80>)
    15aa:	6003      	str	r3, [r0, #0]
    15ac:	e9c0 4101 	strd	r4, r1, [r0, #4]
  FsBaseFile() = default;
    15b0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    15b4:	490a      	ldr	r1, [pc, #40]	; (15e0 <_GLOBAL__sub_I_t_acq+0x94>)
}
    15b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
FsFile file;
    15ba:	f008 b96b 	b.w	9894 <__aeabi_atexit>
    15be:	bf00      	nop
    15c0:	2002af9c 	.word	0x2002af9c
    15c4:	003d0900 	.word	0x003d0900
    15c8:	20000800 	.word	0x20000800
    15cc:	200085e4 	.word	0x200085e4
    15d0:	2000071c 	.word	0x2000071c
    15d4:	00000a7d 	.word	0x00000a7d
    15d8:	2002ae4c 	.word	0x2002ae4c
    15dc:	200007b8 	.word	0x200007b8
    15e0:	00000b01 	.word	0x00000b01

000015e4 <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    15e4:	4a04      	ldr	r2, [pc, #16]	; (15f8 <getDataCount()+0x14>)
    15e6:	4b05      	ldr	r3, [pc, #20]	; (15fc <getDataCount()+0x18>)
    15e8:	6810      	ldr	r0, [r2, #0]
    15ea:	681b      	ldr	r3, [r3, #0]
    15ec:	1ac0      	subs	r0, r0, r3
    15ee:	bf48      	it	mi
    15f0:	30c0      	addmi	r0, #192	; 0xc0
    15f2:	b280      	uxth	r0, r0
    15f4:	4770      	bx	lr
    15f6:	bf00      	nop
    15f8:	2002b464 	.word	0x2002b464
    15fc:	2002aea0 	.word	0x2002aea0

00001600 <queue_isBusy()>:

  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    1600:	4b01      	ldr	r3, [pc, #4]	; (1608 <queue_isBusy()+0x8>)
    1602:	6818      	ldr	r0, [r3, #0]
    1604:	4770      	bx	lr
    1606:	bf00      	nop
    1608:	2000df44 	.word	0x2000df44

0000160c <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    160c:	b470      	push	{r4, r5, r6}
    if ( (tail+1)%MAXBUF == head ) return 0;
    160e:	4c1b      	ldr	r4, [pc, #108]	; (167c <pushData(unsigned long*)+0x70>)
    1610:	4a1b      	ldr	r2, [pc, #108]	; (1680 <pushData(unsigned long*)+0x74>)
    1612:	6823      	ldr	r3, [r4, #0]
    1614:	491b      	ldr	r1, [pc, #108]	; (1684 <pushData(unsigned long*)+0x78>)
    1616:	3301      	adds	r3, #1
    1618:	680d      	ldr	r5, [r1, #0]
    161a:	fb82 2103 	smull	r2, r1, r2, r3
    161e:	17da      	asrs	r2, r3, #31
    1620:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    1624:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1628:	eba3 1382 	sub.w	r3, r3, r2, lsl #6
    162c:	42ab      	cmp	r3, r5
    162e:	d021      	beq.n	1674 <pushData(unsigned long*)+0x68>
    //while(busy); 
    queue_busy=1;
    1630:	4e15      	ldr	r6, [pc, #84]	; (1688 <pushData(unsigned long*)+0x7c>)
    1632:	2201      	movs	r2, #1
    1634:	1f01      	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    1636:	2300      	movs	r3, #0
    1638:	4d14      	ldr	r5, [pc, #80]	; (168c <pushData(unsigned long*)+0x80>)
    queue_busy=1;
    163a:	6032      	str	r2, [r6, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    163c:	6822      	ldr	r2, [r4, #0]
    163e:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1642:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    1646:	3301      	adds	r3, #1
    1648:	2b80      	cmp	r3, #128	; 0x80
    164a:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    164e:	d1f5      	bne.n	163c <pushData(unsigned long*)+0x30>
    tail = (tail+1)%MAXBUF;
    1650:	6822      	ldr	r2, [r4, #0]
    queue_busy=0;
    return 1; // signal success.
    1652:	2001      	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    1654:	490a      	ldr	r1, [pc, #40]	; (1680 <pushData(unsigned long*)+0x74>)
    1656:	3201      	adds	r2, #1
    1658:	fb81 3102 	smull	r3, r1, r1, r2
    165c:	17d3      	asrs	r3, r2, #31
    165e:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    queue_busy=0;
    1662:	2100      	movs	r1, #0
    tail = (tail+1)%MAXBUF;
    1664:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1668:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
    166c:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    166e:	6031      	str	r1, [r6, #0]
  }
    1670:	bc70      	pop	{r4, r5, r6}
    1672:	4770      	bx	lr
    if ( (tail+1)%MAXBUF == head ) return 0;
    1674:	2000      	movs	r0, #0
  }
    1676:	bc70      	pop	{r4, r5, r6}
    1678:	4770      	bx	lr
    167a:	bf00      	nop
    167c:	2002b464 	.word	0x2002b464
    1680:	2aaaaaab 	.word	0x2aaaaaab
    1684:	2002aea0 	.word	0x2002aea0
    1688:	2000df44 	.word	0x2000df44
    168c:	2000df48 	.word	0x2000df48

00001690 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    1690:	4b15      	ldr	r3, [pc, #84]	; (16e8 <pullData(unsigned long*)+0x58>)
  {
    1692:	b430      	push	{r4, r5}
    if ( head==tail ) return 0;
    1694:	4c15      	ldr	r4, [pc, #84]	; (16ec <pullData(unsigned long*)+0x5c>)
    1696:	6822      	ldr	r2, [r4, #0]
    1698:	681b      	ldr	r3, [r3, #0]
    169a:	429a      	cmp	r2, r3
    169c:	d021      	beq.n	16e2 <pullData(unsigned long*)+0x52>
    //while(busy); 
    queue_busy=1;
    169e:	4d14      	ldr	r5, [pc, #80]	; (16f0 <pullData(unsigned long*)+0x60>)
    16a0:	2201      	movs	r2, #1
    16a2:	1f01      	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    16a4:	2300      	movs	r3, #0
    16a6:	4813      	ldr	r0, [pc, #76]	; (16f4 <pullData(unsigned long*)+0x64>)
    queue_busy=1;
    16a8:	602a      	str	r2, [r5, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    16aa:	6822      	ldr	r2, [r4, #0]
    16ac:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    16b0:	3301      	adds	r3, #1
    16b2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    16b6:	2b80      	cmp	r3, #128	; 0x80
    16b8:	f841 2f04 	str.w	r2, [r1, #4]!
    16bc:	d1f5      	bne.n	16aa <pullData(unsigned long*)+0x1a>
    head = (head+1)%MAXBUF;
    16be:	6822      	ldr	r2, [r4, #0]
    queue_busy=0;
    return 1;
    16c0:	2001      	movs	r0, #1
    head = (head+1)%MAXBUF;
    16c2:	490d      	ldr	r1, [pc, #52]	; (16f8 <pullData(unsigned long*)+0x68>)
    16c4:	3201      	adds	r2, #1
    16c6:	fb81 3102 	smull	r3, r1, r1, r2
    16ca:	17d3      	asrs	r3, r2, #31
    16cc:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    queue_busy=0;
    16d0:	2100      	movs	r1, #0
    head = (head+1)%MAXBUF;
    16d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    16d6:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
    16da:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    16dc:	6029      	str	r1, [r5, #0]
  }
    16de:	bc30      	pop	{r4, r5}
    16e0:	4770      	bx	lr
    if ( head==tail ) return 0;
    16e2:	2000      	movs	r0, #0
  }
    16e4:	bc30      	pop	{r4, r5}
    16e6:	4770      	bx	lr
    16e8:	2002b464 	.word	0x2002b464
    16ec:	2002aea0 	.word	0x2002aea0
    16f0:	2000df44 	.word	0x2000df44
    16f4:	2000df48 	.word	0x2000df48
    16f8:	2aaaaaab 	.word	0x2aaaaaab

000016fc <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    16fc:	4a54      	ldr	r2, [pc, #336]	; (1850 <time2date(unsigned long, datetime_t*)+0x154>)
  {
    16fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1702:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1706:	f240 196d 	movw	r9, #365	; 0x16d
    170a:	4e52      	ldr	r6, [pc, #328]	; (1854 <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    170c:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    170e:	4f52      	ldr	r7, [pc, #328]	; (1858 <time2date(unsigned long, datetime_t*)+0x15c>)
    1710:	f8df 8158 	ldr.w	r8, [pc, #344]	; 186c <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    1714:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1718:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    171c:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    171e:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    1722:	4c4e      	ldr	r4, [pc, #312]	; (185c <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    1724:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    1728:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    172c:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1730:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    1732:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    1736:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1738:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    173c:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1740:	4b47      	ldr	r3, [pc, #284]	; (1860 <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    1742:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1746:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    174a:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    174c:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    174e:	1ae2      	subs	r2, r4, r3
    1750:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    1754:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1756:	089b      	lsrs	r3, r3, #2
    1758:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    175c:	1ae4      	subs	r4, r4, r3
    175e:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1760:	b2c3      	uxtb	r3, r0
    1762:	f240 1c6d 	movw	ip, #365	; 0x16d
    1766:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    176a:	f013 0403 	ands.w	r4, r3, #3
    176e:	fb06 f503 	mul.w	r5, r6, r3
    1772:	d108      	bne.n	1786 <time2date(unsigned long, datetime_t*)+0x8a>
    1774:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    1778:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    177c:	d303      	bcc.n	1786 <time2date(unsigned long, datetime_t*)+0x8a>
    177e:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    1782:	bf38      	it	cc
    1784:	46cc      	movcc	ip, r9
    1786:	4462      	add	r2, ip
    1788:	3001      	adds	r0, #1
    178a:	4596      	cmp	lr, r2
    178c:	d2e8      	bcs.n	1760 <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    178e:	4d35      	ldr	r5, [pc, #212]	; (1864 <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    1790:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    1792:	fba5 0503 	umull	r0, r5, r5, r3
    1796:	b3a4      	cbz	r4, 1802 <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1798:	096e      	lsrs	r6, r5, #5
    179a:	2764      	movs	r7, #100	; 0x64
    179c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    17a0:	09ed      	lsrs	r5, r5, #7
    17a2:	fb07 3616 	mls	r6, r7, r6, r3
    17a6:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    17aa:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    17ae:	ebae 0e02 	sub.w	lr, lr, r2
    17b2:	2300      	movs	r3, #0
    17b4:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    17b6:	4f2c      	ldr	r7, [pc, #176]	; (1868 <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    17b8:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    17ba:	e00a      	b.n	17d2 <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    17bc:	f813 c007 	ldrb.w	ip, [r3, r7]
    17c0:	4584      	cmp	ip, r0
    17c2:	d837      	bhi.n	1834 <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    17c4:	2a0c      	cmp	r2, #12
        time -= monthLength;
    17c6:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    17ca:	d012      	beq.n	17f2 <time2date(unsigned long, datetime_t*)+0xf6>
    17cc:	3201      	adds	r2, #1
    17ce:	3301      	adds	r3, #1
    17d0:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    17d2:	2b01      	cmp	r3, #1
    17d4:	fa5f fe83 	uxtb.w	lr, r3
    17d8:	d1f0      	bne.n	17bc <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    17da:	b91c      	cbnz	r4, 17e4 <time2date(unsigned long, datetime_t*)+0xe8>
    17dc:	b1f6      	cbz	r6, 181c <time2date(unsigned long, datetime_t*)+0x120>
    17de:	f04f 0c1d 	mov.w	ip, #29
    17e2:	e001      	b.n	17e8 <time2date(unsigned long, datetime_t*)+0xec>
    17e4:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    17e8:	4560      	cmp	r0, ip
    17ea:	d32d      	bcc.n	1848 <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    17ec:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    17f0:	e7ec      	b.n	17cc <time2date(unsigned long, datetime_t*)+0xd0>
    17f2:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    17f6:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    17f8:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    17fc:	70c8      	strb	r0, [r1, #3]
  }
    17fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    1802:	2064      	movs	r0, #100	; 0x64
    1804:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1806:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    1808:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    180c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1810:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    1814:	b14e      	cbz	r6, 182a <time2date(unsigned long, datetime_t*)+0x12e>
    1816:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    181a:	e7c8      	b.n	17ae <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    181c:	2d00      	cmp	r5, #0
    181e:	bf14      	ite	ne
    1820:	f04f 0c1c 	movne.w	ip, #28
    1824:	f04f 0c1d 	moveq.w	ip, #29
    1828:	e7de      	b.n	17e8 <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    182a:	2d00      	cmp	r5, #0
    182c:	d1bd      	bne.n	17aa <time2date(unsigned long, datetime_t*)+0xae>
    182e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    1832:	e7bc      	b.n	17ae <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    1834:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    1838:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    183a:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    183e:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    1840:	f881 e002 	strb.w	lr, [r1, #2]
  }
    1844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    1848:	f04f 0e02 	mov.w	lr, #2
    184c:	e7d3      	b.n	17f6 <time2date(unsigned long, datetime_t*)+0xfa>
    184e:	bf00      	nop
    1850:	88888889 	.word	0x88888889
    1854:	c28f5c29 	.word	0xc28f5c29
    1858:	028f5c28 	.word	0x028f5c28
    185c:	aaaaaaab 	.word	0xaaaaaaab
    1860:	24924925 	.word	0x24924925
    1864:	51eb851f 	.word	0x51eb851f
    1868:	20000574 	.word	0x20000574
    186c:	00a3d70a 	.word	0x00a3d70a

00001870 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    1870:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    1872:	4a35      	ldr	r2, [pc, #212]	; (1948 <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    1874:	314e      	adds	r1, #78	; 0x4e
    1876:	b2c9      	uxtb	r1, r1
  {
    1878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    187c:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    1880:	b1e1      	cbz	r1, 18bc <date2time(datetime_t*)+0x4c>
    1882:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    1886:	f240 73b3 	movw	r3, #1971	; 0x7b3
    188a:	4d30      	ldr	r5, [pc, #192]	; (194c <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    188c:	4e30      	ldr	r6, [pc, #192]	; (1950 <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    188e:	4f31      	ldr	r7, [pc, #196]	; (1954 <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    1890:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 1960 <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    1894:	4563      	cmp	r3, ip
    1896:	fb05 f403 	mul.w	r4, r5, r3
    189a:	d00f      	beq.n	18bc <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    189c:	f013 0f03 	tst.w	r3, #3
    18a0:	f103 0301 	add.w	r3, r3, #1
    18a4:	d1f6      	bne.n	1894 <date2time(datetime_t*)+0x24>
    18a6:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    18aa:	d302      	bcc.n	18b2 <date2time(datetime_t*)+0x42>
    18ac:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    18b0:	d3f0      	bcc.n	1894 <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    18b2:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    18b4:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    18b6:	fb05 f403 	mul.w	r4, r5, r3
    18ba:	d1ef      	bne.n	189c <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    18bc:	f990 e002 	ldrsb.w	lr, [r0, #2]
    18c0:	f1be 0f01 	cmp.w	lr, #1
    18c4:	dd29      	ble.n	191a <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    18c6:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    18ca:	4e23      	ldr	r6, [pc, #140]	; (1958 <date2time(datetime_t*)+0xe8>)
    18cc:	2564      	movs	r5, #100	; 0x64
    18ce:	f44f 74c8 	mov.w	r4, #400	; 0x190
    18d2:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    18d6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1964 <date2time(datetime_t*)+0xf4>
    18da:	4920      	ldr	r1, [pc, #128]	; (195c <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    18dc:	0977      	lsrs	r7, r6, #5
    18de:	09f6      	lsrs	r6, r6, #7
    18e0:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    18e4:	4d1b      	ldr	r5, [pc, #108]	; (1954 <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    18e6:	fb04 3616 	mls	r6, r4, r6, r3
    18ea:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    18ee:	2301      	movs	r3, #1
    18f0:	e007      	b.n	1902 <date2time(datetime_t*)+0x92>
    18f2:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    18f4:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    18f8:	3101      	adds	r1, #1
    18fa:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    18fc:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    1900:	d00b      	beq.n	191a <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1902:	2b02      	cmp	r3, #2
    1904:	d1f5      	bne.n	18f2 <date2time(datetime_t*)+0x82>
    1906:	2c00      	cmp	r4, #0
    1908:	d1f3      	bne.n	18f2 <date2time(datetime_t*)+0x82>
    190a:	b90f      	cbnz	r7, 1910 <date2time(datetime_t*)+0xa0>
    190c:	2e00      	cmp	r6, #0
    190e:	d1f0      	bne.n	18f2 <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    1910:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    1912:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    1914:	3101      	adds	r1, #1
    1916:	4573      	cmp	r3, lr
    1918:	d1f3      	bne.n	1902 <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    191a:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    191e:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    1922:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    1926:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    192a:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    192e:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    1930:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    1934:	f990 1003 	ldrsb.w	r1, [r0, #3]
    1938:	4c06      	ldr	r4, [pc, #24]	; (1954 <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    193a:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    193c:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    193e:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    1942:	4410      	add	r0, r2
    1944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1948:	01e13380 	.word	0x01e13380
    194c:	c28f5c29 	.word	0xc28f5c29
    1950:	028f5c28 	.word	0x028f5c28
    1954:	00015180 	.word	0x00015180
    1958:	51eb851f 	.word	0x51eb851f
    195c:	20000574 	.word	0x20000574
    1960:	00a3d70a 	.word	0x00a3d70a
    1964:	00263b80 	.word	0x00263b80

00001968 <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    1968:	2001      	movs	r0, #1
    196a:	4770      	bx	lr

0000196c <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    196c:	b500      	push	{lr}
    196e:	b083      	sub	sp, #12
    1970:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    1972:	f006 fc4d 	bl	8210 <rtc_get>
    1976:	9901      	ldr	r1, [sp, #4]
    1978:	f7ff fec0 	bl	16fc <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    197c:	2001      	movs	r0, #1
    197e:	b003      	add	sp, #12
    1980:	f85d fb04 	ldr.w	pc, [sp], #4

00001984 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    1984:	b570      	push	{r4, r5, r6, lr}
    1986:	b082      	sub	sp, #8
    1988:	4614      	mov	r4, r2
    198a:	460d      	mov	r5, r1
    198c:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    198e:	f006 fc3f 	bl	8210 <rtc_get>
    1992:	4669      	mov	r1, sp
    1994:	f7ff feb2 	bl	16fc <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    1998:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    199c:	4608      	mov	r0, r1
    t.month=month;
    199e:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    19a2:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    19a6:	f7ff ff63 	bl	1870 <date2time(datetime_t*)>
    19aa:	f006 fc43 	bl	8234 <rtc_set>
    rtc_set_datetime(&t);
  }
    19ae:	b002      	add	sp, #8
    19b0:	bd70      	pop	{r4, r5, r6, pc}
    19b2:	bf00      	nop

000019b4 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    19b4:	b570      	push	{r4, r5, r6, lr}
    19b6:	b082      	sub	sp, #8
    19b8:	4614      	mov	r4, r2
    19ba:	460d      	mov	r5, r1
    19bc:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    19be:	f006 fc27 	bl	8210 <rtc_get>
    19c2:	4669      	mov	r1, sp
    19c4:	f7ff fe9a 	bl	16fc <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    19c8:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    19cc:	4608      	mov	r0, r1
    t.min=minutes;
    19ce:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    19d2:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    19d6:	f7ff ff4b 	bl	1870 <date2time(datetime_t*)>
    19da:	f006 fc2b 	bl	8234 <rtc_set>
    rtc_set_datetime(&t);
  }
    19de:	b002      	add	sp, #8
    19e0:	bd70      	pop	{r4, r5, r6, pc}
    19e2:	bf00      	nop

000019e4 <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    19e4:	b510      	push	{r4, lr}
    19e6:	4604      	mov	r4, r0
    19e8:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    19ea:	f007 fcd1 	bl	9390 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    19ee:	2800      	cmp	r0, #0
    19f0:	d0fb      	beq.n	19ea <menuGetInt32(long*) [clone .isra.0]+0x6>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    19f2:	210d      	movs	r1, #13
    19f4:	aa02      	add	r2, sp, #8
    19f6:	2328      	movs	r3, #40	; 0x28
    19f8:	480d      	ldr	r0, [pc, #52]	; (1a30 <menuGetInt32(long*) [clone .isra.0]+0x4c>)
    19fa:	f006 f897 	bl	7b2c <Stream::readBytesUntil(char, char*, unsigned int)>
    19fe:	4603      	mov	r3, r0
  buffer[count]=0;
    1a00:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1a02:	a802      	add	r0, sp, #8
    1a04:	3330      	adds	r3, #48	; 0x30
    1a06:	446b      	add	r3, sp
    1a08:	f803 2c28 	strb.w	r2, [r3, #-40]
    1a0c:	f00a fb98 	bl	c140 <strlen>
    1a10:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a12:	a802      	add	r0, sp, #8
    1a14:	f007 fd26 	bl	9464 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a18:	4805      	ldr	r0, [pc, #20]	; (1a30 <menuGetInt32(long*) [clone .isra.0]+0x4c>)
    1a1a:	f005 ff93 	bl	7944 <Print::println()>
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1a1e:	aa01      	add	r2, sp, #4
    1a20:	4904      	ldr	r1, [pc, #16]	; (1a34 <menuGetInt32(long*) [clone .isra.0]+0x50>)
    1a22:	a802      	add	r0, sp, #8
    1a24:	f009 fe6c 	bl	b700 <sscanf>
    1a28:	9b01      	ldr	r3, [sp, #4]
    1a2a:	6023      	str	r3, [r4, #0]
  return 1;
}
    1a2c:	b00c      	add	sp, #48	; 0x30
    1a2e:	bd10      	pop	{r4, pc}
    1a30:	200085c4 	.word	0x200085c4
    1a34:	20000570 	.word	0x20000570

00001a38 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1a38:	b510      	push	{r4, lr}
    1a3a:	4604      	mov	r4, r0
    1a3c:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    1a3e:	f007 fca7 	bl	9390 <usb_serial_available>
  while(!Serial.available()) continue;
    1a42:	2800      	cmp	r0, #0
    1a44:	d0fb      	beq.n	1a3e <menuGetInt16(short*) [clone .isra.0]+0x6>
  count = Serial.readBytesUntil('\r',buffer,40);
    1a46:	210d      	movs	r1, #13
    1a48:	aa02      	add	r2, sp, #8
    1a4a:	2328      	movs	r3, #40	; 0x28
    1a4c:	480d      	ldr	r0, [pc, #52]	; (1a84 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    1a4e:	f006 f86d 	bl	7b2c <Stream::readBytesUntil(char, char*, unsigned int)>
    1a52:	4603      	mov	r3, r0
  buffer[count]=0;
    1a54:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1a56:	a802      	add	r0, sp, #8
    1a58:	3330      	adds	r3, #48	; 0x30
    1a5a:	446b      	add	r3, sp
    1a5c:	f803 2c28 	strb.w	r2, [r3, #-40]
    1a60:	f00a fb6e 	bl	c140 <strlen>
    1a64:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a66:	a802      	add	r0, sp, #8
    1a68:	f007 fcfc 	bl	9464 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a6c:	4805      	ldr	r0, [pc, #20]	; (1a84 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    1a6e:	f005 ff69 	bl	7944 <Print::println()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1a72:	aa01      	add	r2, sp, #4
    1a74:	4904      	ldr	r1, [pc, #16]	; (1a88 <menuGetInt16(short*) [clone .isra.0]+0x50>)
    1a76:	a802      	add	r0, sp, #8
    1a78:	f009 fe42 	bl	b700 <sscanf>
    1a7c:	9b01      	ldr	r3, [sp, #4]
    1a7e:	8023      	strh	r3, [r4, #0]
}
    1a80:	b00c      	add	sp, #48	; 0x30
    1a82:	bd10      	pop	{r4, pc}
    1a84:	200085c4 	.word	0x200085c4
    1a88:	20000570 	.word	0x20000570

00001a8c <menuGet3Int(int*, int*, int*) [clone .isra.0]>:

static int menuGet3Int(int *val1, int *val2, int *val3)
    1a8c:	b570      	push	{r4, r5, r6, lr}
    1a8e:	4606      	mov	r6, r0
    1a90:	b090      	sub	sp, #64	; 0x40
    1a92:	460c      	mov	r4, r1
    1a94:	4615      	mov	r5, r2
        virtual int available() { return usb_serial_available(); }
    1a96:	f007 fc7b 	bl	9390 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1a9a:	2800      	cmp	r0, #0
    1a9c:	d0fb      	beq.n	1a96 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0xa>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1a9e:	aa06      	add	r2, sp, #24
    1aa0:	210d      	movs	r1, #13
    1aa2:	2328      	movs	r3, #40	; 0x28
    1aa4:	4810      	ldr	r0, [pc, #64]	; (1ae8 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    1aa6:	f006 f841 	bl	7b2c <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1aaa:	f100 0340 	add.w	r3, r0, #64	; 0x40
    1aae:	eb0d 0003 	add.w	r0, sp, r3
    1ab2:	2300      	movs	r3, #0
    1ab4:	f800 3c28 	strb.w	r3, [r0, #-40]
							  return write((const uint8_t *)str, strlen(str)); }
    1ab8:	a806      	add	r0, sp, #24
    1aba:	f00a fb41 	bl	c140 <strlen>
    1abe:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1ac0:	a806      	add	r0, sp, #24
    1ac2:	f007 fccf 	bl	9464 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1ac6:	4808      	ldr	r0, [pc, #32]	; (1ae8 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    1ac8:	f005 ff3c 	bl	7944 <Print::println()>
  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1acc:	f10d 0317 	add.w	r3, sp, #23
    1ad0:	4632      	mov	r2, r6
    1ad2:	4906      	ldr	r1, [pc, #24]	; (1aec <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x60>)
    1ad4:	a806      	add	r0, sp, #24
    1ad6:	9400      	str	r4, [sp, #0]
    1ad8:	e9cd 3501 	strd	r3, r5, [sp, #4]
    1adc:	f10d 0316 	add.w	r3, sp, #22
    1ae0:	f009 fe0e 	bl	b700 <sscanf>
}
    1ae4:	b010      	add	sp, #64	; 0x40
    1ae6:	bd70      	pop	{r4, r5, r6, pc}
    1ae8:	200085c4 	.word	0x200085c4
    1aec:	20000568 	.word	0x20000568

00001af0 <menu1()>:

void menu1(void)
{   // have ':'
    1af0:	b508      	push	{r3, lr}
        virtual int available() { return usb_serial_available(); }
    1af2:	f007 fc4d 	bl	9390 <usb_serial_available>
    while(!Serial.available()) ;
    1af6:	2800      	cmp	r0, #0
    1af8:	d0fb      	beq.n	1af2 <menu1()+0x2>
    char ch;
    ch=Serial.read();
    if(ch=='x') return;
}
    1afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        virtual int read() { return usb_serial_getchar(); }
    1afe:	f007 bc8b 	b.w	9418 <usb_serial_getchar>
    1b02:	bf00      	nop

00001b04 <menu2()>:

void menu2(void)
{   // have '?'
    1b04:	b510      	push	{r4, lr}
    1b06:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    1b08:	f007 fc42 	bl	9390 <usb_serial_available>
    datetime_t t;

    while(!Serial.available()) ;
    1b0c:	2800      	cmp	r0, #0
    1b0e:	d0fb      	beq.n	1b08 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1b10:	f007 fc82 	bl	9418 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1b14:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    1b16:	2870      	cmp	r0, #112	; 0x70
    1b18:	d018      	beq.n	1b4c <menu2()+0x48>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    1b1a:	2864      	cmp	r0, #100	; 0x64
    1b1c:	d065      	beq.n	1bea <menu2()+0xe6>
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
    1b1e:	3861      	subs	r0, #97	; 0x61
    1b20:	2813      	cmp	r0, #19
    1b22:	d80d      	bhi.n	1b40 <menu2()+0x3c>
    1b24:	e8df f000 	tbb	[pc, r0]
    1b28:	0c530c70 	.word	0x0c530c70
    1b2c:	0c0c7f0c 	.word	0x0c0c7f0c
    1b30:	0c0c0c0c 	.word	0x0c0c0c0c
    1b34:	0c0c0c0c 	.word	0x0c0c0c0c
    1b38:	928c0c0c 	.word	0x928c0c0c
    1b3c:	f007 fc6c 	bl	9418 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    1b40:	f007 fc26 	bl	9390 <usb_serial_available>
    }
    else if(ch=='c')
    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
    1b44:	2800      	cmp	r0, #0
    1b46:	d1f9      	bne.n	1b3c <menu2()+0x38>

}
    1b48:	b008      	add	sp, #32
    1b4a:	bd10      	pop	{r4, pc}
      rtc_get_datetime(&t);
    1b4c:	a806      	add	r0, sp, #24
    1b4e:	f7ff ff0d 	bl	196c <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    1b52:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    1b56:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    1b5a:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1b5e:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1b62:	f99d 401e 	ldrsb.w	r4, [sp, #30]
    1b66:	9000      	str	r0, [sp, #0]
    1b68:	4840      	ldr	r0, [pc, #256]	; (1c6c <menu2()+0x168>)
    1b6a:	e9cd 3203 	strd	r3, r2, [sp, #12]
    1b6e:	e9cd 1401 	strd	r1, r4, [sp, #4]
    1b72:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1b76:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1b7a:	493d      	ldr	r1, [pc, #244]	; (1c70 <menu2()+0x16c>)
    1b7c:	f005 fefe 	bl	797c <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1b80:	210c      	movs	r1, #12
    1b82:	483c      	ldr	r0, [pc, #240]	; (1c74 <menu2()+0x170>)
    1b84:	f007 fc6e 	bl	9464 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    1b88:	493b      	ldr	r1, [pc, #236]	; (1c78 <menu2()+0x174>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1b8a:	220a      	movs	r2, #10
    1b8c:	2300      	movs	r3, #0
    1b8e:	6809      	ldr	r1, [r1, #0]
    1b90:	4836      	ldr	r0, [pc, #216]	; (1c6c <menu2()+0x168>)
    1b92:	f005 ff01 	bl	7998 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1b96:	4835      	ldr	r0, [pc, #212]	; (1c6c <menu2()+0x168>)
    1b98:	f005 fed4 	bl	7944 <Print::println()>
    1b9c:	210c      	movs	r1, #12
    1b9e:	4837      	ldr	r0, [pc, #220]	; (1c7c <menu2()+0x178>)
    1ba0:	f007 fc60 	bl	9464 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1ba4:	4b36      	ldr	r3, [pc, #216]	; (1c80 <menu2()+0x17c>)
	size_t println(long n)				{ return print(n) + println(); }
    1ba6:	4831      	ldr	r0, [pc, #196]	; (1c6c <menu2()+0x168>)
    1ba8:	6819      	ldr	r1, [r3, #0]
    1baa:	f005 febf 	bl	792c <Print::print(long)>
    1bae:	482f      	ldr	r0, [pc, #188]	; (1c6c <menu2()+0x168>)
    1bb0:	f005 fec8 	bl	7944 <Print::println()>
    1bb4:	210c      	movs	r1, #12
    1bb6:	4833      	ldr	r0, [pc, #204]	; (1c84 <menu2()+0x180>)
    1bb8:	f007 fc54 	bl	9464 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1bbc:	4b32      	ldr	r3, [pc, #200]	; (1c88 <menu2()+0x184>)
	size_t print(int n)				{ return print((long)n); }
    1bbe:	482b      	ldr	r0, [pc, #172]	; (1c6c <menu2()+0x168>)
    1bc0:	f9b3 1000 	ldrsh.w	r1, [r3]
    1bc4:	f005 feb2 	bl	792c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1bc8:	4828      	ldr	r0, [pc, #160]	; (1c6c <menu2()+0x168>)
    1bca:	f005 febb 	bl	7944 <Print::println()>
    1bce:	210c      	movs	r1, #12
    1bd0:	482e      	ldr	r0, [pc, #184]	; (1c8c <menu2()+0x188>)
    1bd2:	f007 fc47 	bl	9464 <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    1bd6:	4b2e      	ldr	r3, [pc, #184]	; (1c90 <menu2()+0x18c>)
	size_t print(int n)				{ return print((long)n); }
    1bd8:	f9b3 1000 	ldrsh.w	r1, [r3]
    1bdc:	4823      	ldr	r0, [pc, #140]	; (1c6c <menu2()+0x168>)
    1bde:	f005 fea5 	bl	792c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1be2:	4822      	ldr	r0, [pc, #136]	; (1c6c <menu2()+0x168>)
    1be4:	f005 feae 	bl	7944 <Print::println()>
    1be8:	e7aa      	b.n	1b40 <menu2()+0x3c>
      rtc_get_datetime(&t);
    1bea:	a806      	add	r0, sp, #24
    1bec:	f7ff febe 	bl	196c <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    1bf0:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1bf4:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1bf8:	9000      	str	r0, [sp, #0]
    1bfa:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1bfe:	4925      	ldr	r1, [pc, #148]	; (1c94 <menu2()+0x190>)
    1c00:	481a      	ldr	r0, [pc, #104]	; (1c6c <menu2()+0x168>)
    1c02:	f005 febb 	bl	797c <Print::printf(char const*, ...)>
    1c06:	e79b      	b.n	1b40 <menu2()+0x3c>
    1c08:	210c      	movs	r1, #12
    1c0a:	481a      	ldr	r0, [pc, #104]	; (1c74 <menu2()+0x170>)
    1c0c:	f007 fc2a 	bl	9464 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    1c10:	4919      	ldr	r1, [pc, #100]	; (1c78 <menu2()+0x174>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1c12:	2300      	movs	r3, #0
    1c14:	220a      	movs	r2, #10
    1c16:	6809      	ldr	r1, [r1, #0]
    1c18:	4814      	ldr	r0, [pc, #80]	; (1c6c <menu2()+0x168>)
    1c1a:	f005 febd 	bl	7998 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1c1e:	4813      	ldr	r0, [pc, #76]	; (1c6c <menu2()+0x168>)
    1c20:	f005 fe90 	bl	7944 <Print::println()>
    1c24:	e78c      	b.n	1b40 <menu2()+0x3c>
    1c26:	210c      	movs	r1, #12
    1c28:	4814      	ldr	r0, [pc, #80]	; (1c7c <menu2()+0x178>)
    1c2a:	f007 fc1b 	bl	9464 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1c2e:	4b14      	ldr	r3, [pc, #80]	; (1c80 <menu2()+0x17c>)
	size_t println(long n)				{ return print(n) + println(); }
    1c30:	480e      	ldr	r0, [pc, #56]	; (1c6c <menu2()+0x168>)
    1c32:	6819      	ldr	r1, [r3, #0]
    1c34:	f005 fe7a 	bl	792c <Print::print(long)>
    1c38:	480c      	ldr	r0, [pc, #48]	; (1c6c <menu2()+0x168>)
    1c3a:	f005 fe83 	bl	7944 <Print::println()>
    1c3e:	e77f      	b.n	1b40 <menu2()+0x3c>
    1c40:	210c      	movs	r1, #12
    1c42:	4810      	ldr	r0, [pc, #64]	; (1c84 <menu2()+0x180>)
    1c44:	f007 fc0e 	bl	9464 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1c48:	4b0f      	ldr	r3, [pc, #60]	; (1c88 <menu2()+0x184>)
    1c4a:	e7c5      	b.n	1bd8 <menu2()+0xd4>
      rtc_get_datetime(&t);
    1c4c:	a806      	add	r0, sp, #24
    1c4e:	f7ff fe8d 	bl	196c <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    1c52:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    1c56:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1c5a:	9000      	str	r0, [sp, #0]
    1c5c:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    1c60:	490d      	ldr	r1, [pc, #52]	; (1c98 <menu2()+0x194>)
    1c62:	4802      	ldr	r0, [pc, #8]	; (1c6c <menu2()+0x168>)
    1c64:	f005 fe8a 	bl	797c <Print::printf(char const*, ...)>
    1c68:	e76a      	b.n	1b40 <menu2()+0x3c>
    1c6a:	bf00      	nop
    1c6c:	200085c4 	.word	0x200085c4
    1c70:	20000474 	.word	0x20000474
    1c74:	20000498 	.word	0x20000498
    1c78:	20008bc8 	.word	0x20008bc8
    1c7c:	200004a8 	.word	0x200004a8
    1c80:	20008b88 	.word	0x20008b88
    1c84:	200004b8 	.word	0x200004b8
    1c88:	2002b490 	.word	0x2002b490
    1c8c:	200004c8 	.word	0x200004c8
    1c90:	2002b48c 	.word	0x2002b48c
    1c94:	200004d8 	.word	0x200004d8
    1c98:	200004f4 	.word	0x200004f4

00001c9c <menu3()>:

void menu3(void)
{   // have '!'
    1c9c:	b510      	push	{r4, lr}
    1c9e:	b084      	sub	sp, #16
        virtual int available() { return usb_serial_available(); }
    1ca0:	f007 fb76 	bl	9390 <usb_serial_available>

    while(!Serial.available()) ;
    1ca4:	2800      	cmp	r0, #0
    1ca6:	d0fb      	beq.n	1ca0 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1ca8:	f007 fbb6 	bl	9418 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1cac:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    1cae:	2864      	cmp	r0, #100	; 0x64
    1cb0:	d00e      	beq.n	1cd0 <menu3()+0x34>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    1cb2:	3861      	subs	r0, #97	; 0x61
    1cb4:	2813      	cmp	r0, #19
    1cb6:	d815      	bhi.n	1ce4 <menu3()+0x48>
    1cb8:	e8df f000 	tbb	[pc, r0]
    1cbc:	14281422 	.word	0x14281422
    1cc0:	14142e14 	.word	0x14142e14
    1cc4:	14141414 	.word	0x14141414
    1cc8:	14141414 	.word	0x14141414
    1ccc:	16381414 	.word	0x16381414
      menuGet3Int(&year,&month,&day);
    1cd0:	aa03      	add	r2, sp, #12
    1cd2:	a902      	add	r1, sp, #8
    1cd4:	a801      	add	r0, sp, #4
    1cd6:	f7ff fed9 	bl	1a8c <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetDate(year,month,day);
    1cda:	9801      	ldr	r0, [sp, #4]
    1cdc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    1ce0:	f7ff fe50 	bl	1984 <rtcSetDate(int, int, int)>
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
    }
}
    1ce4:	b004      	add	sp, #16
    1ce6:	bd10      	pop	{r4, pc}
      menuGet3Int(&hour,&minutes,&seconds);
    1ce8:	aa03      	add	r2, sp, #12
    1cea:	a902      	add	r1, sp, #8
    1cec:	a801      	add	r0, sp, #4
    1cee:	f7ff fecd 	bl	1a8c <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetTime(hour,minutes,seconds);
    1cf2:	9801      	ldr	r0, [sp, #4]
    1cf4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    1cf8:	f7ff fe5c 	bl	19b4 <rtcSetTime(int, int, int)>
}
    1cfc:	b004      	add	sp, #16
    1cfe:	bd10      	pop	{r4, pc}
      menuGetInt32((int32_t *)&t_acq);
    1d00:	4810      	ldr	r0, [pc, #64]	; (1d44 <menu3()+0xa8>)
}
    1d02:	b004      	add	sp, #16
    1d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_acq);
    1d08:	f7ff be6c 	b.w	19e4 <menuGetInt32(long*) [clone .isra.0]>
      menuGetInt16(&proc);
    1d0c:	480e      	ldr	r0, [pc, #56]	; (1d48 <menu3()+0xac>)
}
    1d0e:	b004      	add	sp, #16
    1d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt16(&proc);
    1d14:	f7ff be90 	b.w	1a38 <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt32(&fsamp);
    1d18:	4c0c      	ldr	r4, [pc, #48]	; (1d4c <menu3()+0xb0>)
    1d1a:	4620      	mov	r0, r4
    1d1c:	f7ff fe62 	bl	19e4 <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    1d20:	6820      	ldr	r0, [r4, #0]
}
    1d22:	b004      	add	sp, #16
    1d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    1d28:	f7fe bd20 	b.w	76c <acqModifyFrequency(unsigned long)>
      menuGetInt16(&shift); if(shift<0) shift=0;
    1d2c:	4c08      	ldr	r4, [pc, #32]	; (1d50 <menu3()+0xb4>)
    1d2e:	4620      	mov	r0, r4
    1d30:	f7ff fe82 	bl	1a38 <menuGetInt16(short*) [clone .isra.0]>
    1d34:	f9b4 3000 	ldrsh.w	r3, [r4]
    1d38:	2b00      	cmp	r3, #0
    1d3a:	dad3      	bge.n	1ce4 <menu3()+0x48>
    1d3c:	2300      	movs	r3, #0
    1d3e:	8023      	strh	r3, [r4, #0]
    1d40:	e7d0      	b.n	1ce4 <menu3()+0x48>
    1d42:	bf00      	nop
    1d44:	20008bc8 	.word	0x20008bc8
    1d48:	2002b48c 	.word	0x2002b48c
    1d4c:	20008b88 	.word	0x20008b88
    1d50:	2002b490 	.word	0x2002b490

00001d54 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1d54:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    1d56:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1d5a:	b084      	sub	sp, #16
    1d5c:	468c      	mov	ip, r1
    1d5e:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    1d60:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1d62:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    1d64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1d68:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    1d6c:	ea4f 124c 	mov.w	r2, ip, lsl #5
    1d70:	4629      	mov	r1, r5
    1d72:	6a20      	ldr	r0, [r4, #32]
    1d74:	f001 f952 	bl	301c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1d78:	2801      	cmp	r0, #1
    1d7a:	d106      	bne.n	1d8a <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    1d7c:	4632      	mov	r2, r6
    1d7e:	4629      	mov	r1, r5
    1d80:	6a20      	ldr	r0, [r4, #32]
    1d82:	f001 f92f 	bl	2fe4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    1d86:	b004      	add	sp, #16
    1d88:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    1d8a:	2000      	movs	r0, #0
}
    1d8c:	b004      	add	sp, #16
    1d8e:	bd70      	pop	{r4, r5, r6, pc}

00001d90 <ExFatFile::close()>:
bool ExFatFile::close() {
    1d90:	b510      	push	{r4, lr}
    1d92:	4604      	mov	r4, r0
  bool rtn = sync();
    1d94:	f000 fd12 	bl	27bc <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    1d98:	2300      	movs	r3, #0
    1d9a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    1d9e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    1da2:	bd10      	pop	{r4, pc}

00001da4 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    1da4:	b538      	push	{r3, r4, r5, lr}
    1da6:	460d      	mov	r5, r1
  if (isOpen()) {
    1da8:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    1dac:	b109      	cbz	r1, 1db2 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    1dae:	2000      	movs	r0, #0
}
    1db0:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    1db2:	2238      	movs	r2, #56	; 0x38
    1db4:	4604      	mov	r4, r0
    1db6:	f009 fe29 	bl	ba0c <memset>
  m_flags = FILE_FLAG_READ;
    1dba:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    1dbc:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    1dbe:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    1dc0:	4618      	mov	r0, r3
    1dc2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    1dc6:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    1dca:	bd38      	pop	{r3, r4, r5, pc}

00001dcc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    1dcc:	b4f0      	push	{r4, r5, r6, r7}
    1dce:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    1dd0:	7809      	ldrb	r1, [r1, #0]
    1dd2:	2920      	cmp	r1, #32
    1dd4:	d103      	bne.n	1dde <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    1dd6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1dda:	2c20      	cmp	r4, #32
    1ddc:	d0fb      	beq.n	1dd6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    1dde:	6015      	str	r5, [r2, #0]
  fname->end = path;
    1de0:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    1de2:	782c      	ldrb	r4, [r5, #0]
    1de4:	2c2f      	cmp	r4, #47	; 0x2f
    1de6:	d011      	beq.n	1e0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1de8:	b184      	cbz	r4, 1e0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1dea:	1c6e      	adds	r6, r5, #1
    1dec:	2c3c      	cmp	r4, #60	; 0x3c
    1dee:	4f1e      	ldr	r7, [pc, #120]	; (1e68 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>)
    uint8_t c = *path++;
    1df0:	4635      	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    1df2:	d82a      	bhi.n	1e4a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    1df4:	2c21      	cmp	r4, #33	; 0x21
    1df6:	d812      	bhi.n	1e1e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    1df8:	f104 3cff 	add.w	ip, r4, #4294967295
    1dfc:	f1bc 0f1e 	cmp.w	ip, #30
    1e00:	d816      	bhi.n	1e30 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

fail:
  return false;
}
    1e02:	2000      	movs	r0, #0
    1e04:	bcf0      	pop	{r4, r5, r6, r7}
    1e06:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    1e08:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1e0c:	2c20      	cmp	r4, #32
    1e0e:	d0fb      	beq.n	1e08 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    1e10:	2c2f      	cmp	r4, #47	; 0x2f
    1e12:	d0f9      	beq.n	1e08 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    1e14:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    1e16:	4611      	mov	r1, r2
}
    1e18:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    1e1a:	f000 bfd5 	b.w	2dc8 <ExFatFile::hashName(ExName_t*)>
    1e1e:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    1e22:	fa5f fc8c 	uxtb.w	ip, ip
    1e26:	fa27 fc0c 	lsr.w	ip, r7, ip
    1e2a:	f01c 0f01 	tst.w	ip, #1
    1e2e:	d1e8      	bne.n	1e02 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    1e30:	2c2e      	cmp	r4, #46	; 0x2e
    1e32:	d001      	beq.n	1e38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1e34:	2c20      	cmp	r4, #32
    1e36:	d10f      	bne.n	1e58 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
  while (*path && !isDirSeparator(*path)) {
    1e38:	f816 4b01 	ldrb.w	r4, [r6], #1
    1e3c:	2c00      	cmp	r4, #0
    1e3e:	d0e5      	beq.n	1e0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1e40:	2c2f      	cmp	r4, #47	; 0x2f
    1e42:	d0e3      	beq.n	1e0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    1e44:	2c3c      	cmp	r4, #60	; 0x3c
    1e46:	4635      	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    1e48:	d9d4      	bls.n	1df4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    1e4a:	2c5c      	cmp	r4, #92	; 0x5c
    1e4c:	d0d9      	beq.n	1e02 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1e4e:	d905      	bls.n	1e5c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    1e50:	2c7c      	cmp	r4, #124	; 0x7c
    1e52:	d0d6      	beq.n	1e02 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1e54:	0621      	lsls	r1, r4, #24
    1e56:	d4d4      	bmi.n	1e02 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    1e58:	6096      	str	r6, [r2, #8]
    1e5a:	e7ed      	b.n	1e38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1e5c:	3c3e      	subs	r4, #62	; 0x3e
    1e5e:	2c01      	cmp	r4, #1
    1e60:	d8fa      	bhi.n	1e58 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
}
    1e62:	2000      	movs	r0, #0
    1e64:	bcf0      	pop	{r4, r5, r6, r7}
    1e66:	4770      	bx	lr
    1e68:	05002101 	.word	0x05002101

00001e6c <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    1e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const { return m_attributes & FS_ATTRIB_READ_ONLY; }
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    1e70:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    1e74:	b083      	sub	sp, #12
    1e76:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    1e78:	07dc      	lsls	r4, r3, #31
    1e7a:	d574      	bpl.n	1f66 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    1e7c:	0658      	lsls	r0, r3, #25
    1e7e:	460f      	mov	r7, r1
    1e80:	4690      	mov	r8, r2
    1e82:	f140 80b0 	bpl.w	1fe6 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    1e86:	e9d5 2300 	ldrd	r2, r3, [r5]
    1e8a:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    1e8e:	eb18 0402 	adds.w	r4, r8, r2
    1e92:	f143 0300 	adc.w	r3, r3, #0
    1e96:	42a1      	cmp	r1, r4
    1e98:	eb70 0303 	sbcs.w	r3, r0, r3
    1e9c:	f0c0 80a9 	bcc.w	1ff2 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    1ea0:	f1b8 0f00 	cmp.w	r8, #0
    1ea4:	d05b      	beq.n	1f5e <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    1ea6:	4646      	mov	r6, r8
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1ea8:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    1eac:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1eb0:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1eb4:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    1eb8:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    1eba:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    1ebe:	2c00      	cmp	r4, #0
    1ec0:	d170      	bne.n	1fa4 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    1ec2:	4313      	orrs	r3, r2
    1ec4:	d170      	bne.n	1fa8 <ExFatFile::read(void*, unsigned int)+0x13c>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1ec6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1eca:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    1ecc:	bf4c      	ite	mi
    1ece:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    1ed2:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    1ed4:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1ed6:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    1eda:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    1edc:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1ee0:	0a63      	lsrs	r3, r4, #9
    1ee2:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    1ee4:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    1ee8:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    1eea:	f1bb 0f00 	cmp.w	fp, #0
    1eee:	d145      	bne.n	1f7c <ExFatFile::read(void*, unsigned int)+0x110>
    1ef0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1ef4:	d342      	bcc.n	1f7c <ExFatFile::read(void*, unsigned int)+0x110>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
    1ef6:	f8da 2218 	ldr.w	r2, [sl, #536]	; 0x218
    1efa:	4291      	cmp	r1, r2
    1efc:	d03e      	beq.n	1f7c <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    1efe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    1f02:	d358      	bcc.n	1fb6 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    1f04:	f04f 0b01 	mov.w	fp, #1
    1f08:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    1f0c:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    1f10:	0a73      	lsrs	r3, r6, #9
    1f12:	459b      	cmp	fp, r3
    1f14:	bf28      	it	cs
    1f16:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    1f18:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1f1a:	ea4f 244b 	mov.w	r4, fp, lsl #9
    1f1e:	d80a      	bhi.n	1f36 <ExFatFile::read(void*, unsigned int)+0xca>
    1f20:	eb01 030b 	add.w	r3, r1, fp
    1f24:	429a      	cmp	r2, r3
    1f26:	d206      	bcs.n	1f36 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    1f28:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1f2c:	9101      	str	r1, [sp, #4]
    1f2e:	f005 f8e9 	bl	7104 <FsCache::sync()>
    1f32:	9901      	ldr	r1, [sp, #4]
    1f34:	b1b8      	cbz	r0, 1f66 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    1f36:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1f3a:	465b      	mov	r3, fp
    1f3c:	6802      	ldr	r2, [r0, #0]
    1f3e:	f8d2 a014 	ldr.w	sl, [r2, #20]
    1f42:	463a      	mov	r2, r7
    1f44:	47d0      	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    1f46:	b170      	cbz	r0, 1f66 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    1f48:	4623      	mov	r3, r4
    dst += n;
    1f4a:	4427      	add	r7, r4
    m_curPosition += n;
    1f4c:	e9d5 1200 	ldrd	r1, r2, [r5]
    1f50:	185b      	adds	r3, r3, r1
    1f52:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    1f56:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    1f58:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    1f5c:	d1a8      	bne.n	1eb0 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    1f5e:	4640      	mov	r0, r8

fail:
  m_error |= READ_ERROR;
  return -1;
}
    1f60:	b003      	add	sp, #12
    1f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    1f66:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    1f6a:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    1f6e:	f043 0302 	orr.w	r3, r3, #2
    1f72:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    1f76:	b003      	add	sp, #12
    1f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    1f7c:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    1f80:	2200      	movs	r2, #0
    1f82:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1f86:	42b4      	cmp	r4, r6
    1f88:	bf28      	it	cs
    1f8a:	4634      	movcs	r4, r6
    1f8c:	f005 f8e6 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    1f90:	2800      	cmp	r0, #0
    1f92:	d0e8      	beq.n	1f66 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    1f94:	eb00 010b 	add.w	r1, r0, fp
    1f98:	4622      	mov	r2, r4
    1f9a:	4638      	mov	r0, r7
    1f9c:	f006 f86a 	bl	8074 <memcpy>
    m_curPosition += n;
    1fa0:	4623      	mov	r3, r4
    1fa2:	e7d2      	b.n	1f4a <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    1fa4:	69aa      	ldr	r2, [r5, #24]
    1fa6:	e796      	b.n	1ed6 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    1fa8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    1fac:	065b      	lsls	r3, r3, #25
    1fae:	d50e      	bpl.n	1fce <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    1fb0:	69aa      	ldr	r2, [r5, #24]
    1fb2:	3201      	adds	r2, #1
    1fb4:	e78e      	b.n	1ed4 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    1fb6:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1fba:	463a      	mov	r2, r7
    1fbc:	6803      	ldr	r3, [r0, #0]
    1fbe:	691b      	ldr	r3, [r3, #16]
    1fc0:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    1fc2:	2800      	cmp	r0, #0
    1fc4:	d0cf      	beq.n	1f66 <ExFatFile::read(void*, unsigned int)+0xfa>
    1fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    1fca:	461c      	mov	r4, r3
    1fcc:	e7bd      	b.n	1f4a <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1fce:	464a      	mov	r2, r9
    1fd0:	4650      	mov	r0, sl
    1fd2:	69a9      	ldr	r1, [r5, #24]
    1fd4:	f001 f864 	bl	30a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    1fd8:	2800      	cmp	r0, #0
    1fda:	dbc4      	blt.n	1f66 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    1fdc:	d00c      	beq.n	1ff8 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    1fde:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1fe2:	69aa      	ldr	r2, [r5, #24]
    1fe4:	e777      	b.n	1ed6 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    1fe6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1fea:	0719      	lsls	r1, r3, #28
    1fec:	f57f af58 	bpl.w	1ea0 <ExFatFile::read(void*, unsigned int)+0x34>
    1ff0:	e749      	b.n	1e86 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    1ff2:	eba1 0802 	sub.w	r8, r1, r2
    1ff6:	e753      	b.n	1ea0 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    1ff8:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1ffc:	f013 0f50 	tst.w	r3, #80	; 0x50
    2000:	d0b1      	beq.n	1f66 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    2002:	eba8 0806 	sub.w	r8, r8, r6
    2006:	4640      	mov	r0, r8
    2008:	e7aa      	b.n	1f60 <ExFatFile::read(void*, unsigned int)+0xf4>
    200a:	bf00      	nop

0000200c <ExFatFile::peek()>:
int ExFatFile::peek() {
    200c:	b5f0      	push	{r4, r5, r6, r7, lr}
    200e:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    2010:	2201      	movs	r2, #1
    2012:	4604      	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    2014:	6985      	ldr	r5, [r0, #24]
    2016:	f10d 0107 	add.w	r1, sp, #7
  uint64_t saveCurPosition = m_curPosition;
    201a:	e9d0 6700 	ldrd	r6, r7, [r0]
    201e:	f7ff ff25 	bl	1e6c <ExFatFile::read(void*, unsigned int)>
    2022:	2801      	cmp	r0, #1
  m_curCluster = saveCurCluster;
    2024:	61a5      	str	r5, [r4, #24]
    2026:	bf0c      	ite	eq
    2028:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    202c:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = saveCurPosition;
    2030:	e9c4 6700 	strd	r6, r7, [r4]
}
    2034:	b003      	add	sp, #12
    2036:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002038 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    2038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    203c:	461f      	mov	r7, r3
  bool isOpen() const { return m_attributes; }
    203e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2042:	b083      	sub	sp, #12
    2044:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    2046:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    204a:	2b00      	cmp	r3, #0
    204c:	d051      	beq.n	20f2 <ExFatFile::seekSet(unsigned long long)+0xba>
    204e:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    2050:	e9d0 1c00 	ldrd	r1, ip, [r0]
    2054:	45bc      	cmp	ip, r7
    2056:	bf08      	it	eq
    2058:	4291      	cmpeq	r1, r2
    205a:	d05c      	beq.n	2116 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    205c:	ea56 0207 	orrs.w	r2, r6, r7
    2060:	d04d      	beq.n	20fe <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    2062:	071d      	lsls	r5, r3, #28
    2064:	d504      	bpl.n	2070 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    2066:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    206a:	42b0      	cmp	r0, r6
    206c:	41ba      	sbcs	r2, r7
    206e:	d340      	bcc.n	20f2 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    2070:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    2074:	1e75      	subs	r5, r6, #1
    2076:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    207a:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    207c:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2080:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    2084:	3209      	adds	r2, #9
    2086:	b2d2      	uxtb	r2, r2
    2088:	f1c2 0e20 	rsb	lr, r2, #32
    208c:	40d5      	lsrs	r5, r2
    208e:	f1a2 0920 	sub.w	r9, r2, #32
    2092:	fa00 fb0e 	lsl.w	fp, r0, lr
    2096:	fa20 f009 	lsr.w	r0, r0, r9
    209a:	ea45 050b 	orr.w	r5, r5, fp
    209e:	4305      	orrs	r5, r0
  if (isContiguous()) {
    20a0:	9801      	ldr	r0, [sp, #4]
    20a2:	0640      	lsls	r0, r0, #25
    20a4:	d433      	bmi.n	210e <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    20a6:	1e48      	subs	r0, r1, #1
    20a8:	fa20 f202 	lsr.w	r2, r0, r2
    20ac:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    20b0:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    20b4:	fa00 fe0e 	lsl.w	lr, r0, lr
    20b8:	fa20 f009 	lsr.w	r0, r0, r9
    20bc:	ea42 020e 	orr.w	r2, r2, lr
    20c0:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    20c4:	d001      	beq.n	20ca <ExFatFile::seekSet(unsigned long long)+0x92>
    20c6:	4295      	cmp	r5, r2
    20c8:	d229      	bcs.n	211e <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    20ca:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    20cc:	bf4c      	ite	mi
    20ce:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    20d2:	69e3      	ldrpl	r3, [r4, #28]
    20d4:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    20d6:	f104 0918 	add.w	r9, r4, #24
    20da:	e006      	b.n	20ea <ExFatFile::seekSet(unsigned long long)+0xb2>
    20dc:	69a1      	ldr	r1, [r4, #24]
    20de:	3d01      	subs	r5, #1
    20e0:	6a20      	ldr	r0, [r4, #32]
    20e2:	f000 ffdd 	bl	30a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    20e6:	2800      	cmp	r0, #0
    20e8:	dd03      	ble.n	20f2 <ExFatFile::seekSet(unsigned long long)+0xba>
    20ea:	464a      	mov	r2, r9
  while (nNew--) {
    20ec:	2d00      	cmp	r5, #0
    20ee:	d1f5      	bne.n	20dc <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

done:
    20f0:	e007      	b.n	2102 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    20f2:	2000      	movs	r0, #0
  m_curCluster = tmp;
    20f4:	f8c4 8018 	str.w	r8, [r4, #24]
}
    20f8:	b003      	add	sp, #12
    20fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    20fe:	2300      	movs	r3, #0
    2100:	6183      	str	r3, [r0, #24]
  return true;
    2102:	2001      	movs	r0, #1
  m_curPosition = pos;
    2104:	e9c4 6700 	strd	r6, r7, [r4]
}
    2108:	b003      	add	sp, #12
    210a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    210e:	69e3      	ldr	r3, [r4, #28]
    2110:	442b      	add	r3, r5
    2112:	61a3      	str	r3, [r4, #24]
    goto done;
    2114:	e7f5      	b.n	2102 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    2116:	2001      	movs	r0, #1
}
    2118:	b003      	add	sp, #12
    211a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    211e:	1aad      	subs	r5, r5, r2
    2120:	e7d9      	b.n	20d6 <ExFatFile::seekSet(unsigned long long)+0x9e>
    2122:	bf00      	nop

00002124 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    2124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2128:	4690      	mov	r8, r2
    212a:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    212e:	b08f      	sub	sp, #60	; 0x3c
    2130:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    2132:	2a00      	cmp	r2, #0
    2134:	f040 80d6 	bne.w	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
    2138:	468b      	mov	fp, r1
    213a:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    213e:	f011 0f50 	tst.w	r1, #80	; 0x50
    2142:	f000 80cf 	beq.w	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  switch (oflag & O_ACCMODE) {
    2146:	f003 0103 	and.w	r1, r3, #3
    214a:	469a      	mov	sl, r3
    214c:	2903      	cmp	r1, #3
    214e:	f000 80c9 	beq.w	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    2152:	3101      	adds	r1, #1
    2154:	f003 0008 	and.w	r0, r3, #8
    2158:	ea41 0300 	orr.w	r3, r1, r0
    215c:	9302      	str	r3, [sp, #8]
  if (fname) {
    215e:	f1b8 0f00 	cmp.w	r8, #0
    2162:	f000 80c9 	beq.w	22f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d4>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    2166:	f8d8 100c 	ldr.w	r1, [r8, #12]
    216a:	f101 070e 	add.w	r7, r1, #14
    216e:	49bd      	ldr	r1, [pc, #756]	; (2464 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x340>)
    2170:	fba1 1707 	umull	r1, r7, r1, r7
  if (pos == m_curPosition) {
    2174:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    2178:	08ff      	lsrs	r7, r7, #3
  if (pos == m_curPosition) {
    217a:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    217c:	f107 0702 	add.w	r7, r7, #2
    2180:	b2ff      	uxtb	r7, r7
  if (pos == m_curPosition) {
    2182:	d005      	beq.n	2190 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    2184:	2000      	movs	r0, #0
    2186:	2100      	movs	r1, #0
    m_curCluster = 0;
    2188:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    218c:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    2190:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2192:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    2194:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    219a:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    219c:	2220      	movs	r2, #32
    219e:	a906      	add	r1, sp, #24
    21a0:	4658      	mov	r0, fp
    21a2:	f7ff fe63 	bl	1e6c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    21a6:	b300      	cbz	r0, 21ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    21a8:	2820      	cmp	r0, #32
    21aa:	f040 809b 	bne.w	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    21ae:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    21b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    21b6:	2a00      	cmp	r2, #0
    21b8:	f2c0 80a0 	blt.w	22fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
      if (freeCount == 0) {
    21bc:	b934      	cbnz	r4, 21cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    21be:	f8db 2000 	ldr.w	r2, [fp]
    21c2:	f1a2 0920 	sub.w	r9, r2, #32
  uint32_t curCluster() const { return m_curCluster; }
    21c6:	f8db 2018 	ldr.w	r2, [fp, #24]
    21ca:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    21cc:	42bc      	cmp	r4, r7
    21ce:	d201      	bcs.n	21d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    21d0:	3401      	adds	r4, #1
    21d2:	b2e4      	uxtb	r4, r4
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    21d4:	2b00      	cmp	r3, #0
    21d6:	f000 80f9 	beq.w	23cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a8>
    n = dir->read(buf, FS_DIR_SIZE);
    21da:	2220      	movs	r2, #32
    21dc:	a906      	add	r1, sp, #24
    21de:	4658      	mov	r0, fp
      inSet = false;
    21e0:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    21e2:	f7ff fe43 	bl	1e6c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    21e6:	2800      	cmp	r0, #0
    21e8:	d1de      	bne.n	21a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    21ea:	f41a 7f00 	tst.w	sl, #512	; 0x200
    21ee:	d079      	beq.n	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    21f0:	9b02      	ldr	r3, [sp, #8]
    21f2:	079b      	lsls	r3, r3, #30
    21f4:	d576      	bpl.n	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    21f6:	f1b8 0f00 	cmp.w	r8, #0
    21fa:	d073      	beq.n	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  while (freeCount < freeNeed) {
    21fc:	42bc      	cmp	r4, r7
    21fe:	d217      	bcs.n	2230 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
    2200:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    2204:	2220      	movs	r2, #32
    2206:	a906      	add	r1, sp, #24
    2208:	4658      	mov	r0, fp
    220a:	f7ff fe2f 	bl	1e6c <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    220e:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    2210:	2800      	cmp	r0, #0
    2212:	d060      	beq.n	22d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    2214:	2820      	cmp	r0, #32
    2216:	d165      	bne.n	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (freeCount == 0) {
    2218:	b92c      	cbnz	r4, 2226 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    221a:	f8db 2000 	ldr.w	r2, [fp]
    221e:	f8db a018 	ldr.w	sl, [fp, #24]
    2222:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    2226:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    2228:	42a7      	cmp	r7, r4
    222a:	d8eb      	bhi.n	2204 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe0>
    222c:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    2230:	2238      	movs	r2, #56	; 0x38
    2232:	2100      	movs	r1, #0
    2234:	4628      	mov	r0, r5
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    2236:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    223a:	f009 fbe7 	bl	ba0c <memset>
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
    223e:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    2242:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    2246:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    2248:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    224a:	2328      	movs	r3, #40	; 0x28
  m_dirPos = freePos;
    224c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    2250:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    2254:	f8d8 3000 	ldr.w	r3, [r8]
  m_dirPos = freePos;
    2258:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    225c:	f8c8 3004 	str.w	r3, [r8, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    2260:	b3a7      	cbz	r7, 22cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
    2262:	2400      	movs	r4, #0
      m_setCount = freeNeed - 1;
    2264:	1e7e      	subs	r6, r7, #1
      if (FsDateTime::callback) {
    2266:	f8df 9200 	ldr.w	r9, [pc, #512]	; 2468 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
      m_setCount = freeNeed - 1;
    226a:	b2f6      	uxtb	r6, r6
      if (FsDateTime::callback) {
    226c:	46a2      	mov	sl, r4
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    226e:	2201      	movs	r2, #1
    2270:	4651      	mov	r1, sl
    2272:	4628      	mov	r0, r5
    2274:	f7ff fd6e 	bl	1d54 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    2278:	4683      	mov	fp, r0
    227a:	b398      	cbz	r0, 22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    227c:	f990 2000 	ldrsb.w	r2, [r0]
    2280:	2a00      	cmp	r2, #0
    2282:	db2f      	blt.n	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    memset(cache, 0, FS_DIR_SIZE);
    2284:	2220      	movs	r2, #32
    2286:	2100      	movs	r1, #0
    2288:	f009 fbc0 	bl	ba0c <memset>
    if (i == 0) {
    228c:	2c00      	cmp	r4, #0
    228e:	f000 80cb 	beq.w	2428 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x304>
    } else if (i == 1) {
    2292:	f1ba 0f01 	cmp.w	sl, #1
    2296:	f000 80e9 	beq.w	246c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x348>
      dirName->type = EXFAT_TYPE_NAME;
    229a:	23c1      	movs	r3, #193	; 0xc1
    229c:	465a      	mov	r2, fp
    229e:	f10b 0b20 	add.w	fp, fp, #32
    22a2:	f802 3b02 	strb.w	r3, [r2], #2
  bool atEnd() { return next == end; }
    22a6:	e9d8 3001 	ldrd	r3, r0, [r8, #4]
        if (fname->atEnd()) {
    22aa:	4298      	cmp	r0, r3
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    22ac:	f103 0301 	add.w	r3, r3, #1
    22b0:	d007      	beq.n	22c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    22b2:	f8c8 3004 	str.w	r3, [r8, #4]
    22b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    22ba:	f822 1b02 	strh.w	r1, [r2], #2
      for (size_t k = 0; k < 15; k++) {
    22be:	4593      	cmp	fp, r2
    22c0:	d1f3      	bne.n	22aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x186>
  for (uint8_t i = 0; i < freeNeed; i++) {
    22c2:	3401      	adds	r4, #1
    22c4:	fa5f fa84 	uxtb.w	sl, r4
    22c8:	4557      	cmp	r7, sl
    22ca:	d8d0      	bhi.n	226e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14a>
  return sync();
    22cc:	4628      	mov	r0, r5
    22ce:	f000 fa75 	bl	27bc <ExFatFile::sync()>
    22d2:	4606      	mov	r6, r0
    22d4:	e00c      	b.n	22f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      if (!dir->addDirCluster()) {
    22d6:	4658      	mov	r0, fp
      uint32_t saveCurCluster = dir->m_curCluster;
    22d8:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    22dc:	f000 fa9e 	bl	281c <ExFatFile::addDirCluster()>
    22e0:	2800      	cmp	r0, #0
    22e2:	d178      	bne.n	23d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b2>
  m_attributes = FILE_ATTR_CLOSED;
    22e4:	2300      	movs	r3, #0
  return false;
    22e6:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    22e8:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    22ec:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    22f0:	4630      	mov	r0, r6
    22f2:	b00f      	add	sp, #60	; 0x3c
    22f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    22f8:	2703      	movs	r7, #3
    22fa:	e749      	b.n	2190 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    22fc:	bb56      	cbnz	r6, 2354 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x230>
        freeCount = 0;
    22fe:	42bc      	cmp	r4, r7
    2300:	bf38      	it	cc
    2302:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    2304:	2b85      	cmp	r3, #133	; 0x85
    2306:	f47f af49 	bne.w	219c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    230a:	4631      	mov	r1, r6
    230c:	2238      	movs	r2, #56	; 0x38
    230e:	4628      	mov	r0, r5
      inSet = true;
    2310:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    2312:	f009 fb7b 	bl	ba0c <memset>
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    2316:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    231a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    231e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    2322:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    2326:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    2328:	bf58      	it	pl
    232a:	f043 0308 	orrpl.w	r3, r3, #8
    232e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    2332:	f8db 3000 	ldr.w	r3, [fp]
    2336:	f8db 2020 	ldr.w	r2, [fp, #32]
    233a:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    233c:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    233e:	f8db 2018 	ldr.w	r2, [fp, #24]
    2342:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    2346:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    234a:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    234e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    2352:	e723      	b.n	219c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    2354:	2bc0      	cmp	r3, #192	; 0xc0
    2356:	d00e      	beq.n	2376 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x252>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    2358:	2bc1      	cmp	r3, #193	; 0xc1
    235a:	f47f af3e 	bne.w	21da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    235e:	4642      	mov	r2, r8
    2360:	a906      	add	r1, sp, #24
    2362:	4628      	mov	r0, r5
    2364:	f000 fcfe 	bl	2d64 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    2368:	b118      	cbz	r0, 2372 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
      if (fname->atEnd()) {
    236a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
    236e:	429a      	cmp	r2, r3
    2370:	d034      	beq.n	23dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
        inSet = false;
    2372:	4606      	mov	r6, r0
    2374:	e712      	b.n	219c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    2376:	9b02      	ldr	r3, [sp, #8]
    2378:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    237c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2380:	079b      	lsls	r3, r3, #30
    2382:	d502      	bpl.n	238a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x266>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2384:	9b03      	ldr	r3, [sp, #12]
    2386:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    238a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    238c:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    238e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    2392:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    2396:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    239a:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    239e:	f1b8 0f00 	cmp.w	r8, #0
    23a2:	d01b      	beq.n	23dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
  void reset() { next = begin; }
    23a4:	f8d8 3000 	ldr.w	r3, [r8]
      if (fname->nameLength != dirStream->nameLength ||
    23a8:	f8d8 200c 	ldr.w	r2, [r8, #12]
    23ac:	f8c8 3004 	str.w	r3, [r8, #4]
    23b0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    23b4:	429a      	cmp	r2, r3
    23b6:	f47f af10 	bne.w	21da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    23ba:	f8b8 6010 	ldrh.w	r6, [r8, #16]
    23be:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    23c2:	1af6      	subs	r6, r6, r3
    23c4:	fab6 f686 	clz	r6, r6
    23c8:	0976      	lsrs	r6, r6, #5
    23ca:	e6e7      	b.n	219c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    23cc:	f1b8 0f00 	cmp.w	r8, #0
    23d0:	f47f af0b 	bne.w	21ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    23d4:	e786      	b.n	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
      dir->m_curCluster = saveCurCluster;
    23d6:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    23da:	e725      	b.n	2228 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x104>
  if (oflag & O_EXCL) {
    23dc:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    23e0:	d180      	bne.n	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    23e2:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    23e6:	d15d      	bne.n	24a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
    23e8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    23ec:	079f      	lsls	r7, r3, #30
    23ee:	d459      	bmi.n	24a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
  if (oflag & O_TRUNC) {
    23f0:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    23f4:	f47f af76 	bne.w	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    23f8:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    23fc:	f43f af78 	beq.w	22f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    2400:	4628      	mov	r0, r5
    2402:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    2406:	f7ff fe17 	bl	2038 <ExFatFile::seekSet(unsigned long long)>
    240a:	2800      	cmp	r0, #0
    240c:	f43f af6a 	beq.w	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (isWritable()) {
    2410:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2414:	079a      	lsls	r2, r3, #30
    2416:	f57f af6b 	bpl.w	22f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    241a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    241e:	f043 0320 	orr.w	r3, r3, #32
    2422:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    2426:	e763      	b.n	22f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      dirFile->type = EXFAT_TYPE_FILE;
    2428:	2385      	movs	r3, #133	; 0x85
    242a:	f88b 3000 	strb.w	r3, [fp]
      m_setCount = freeNeed - 1;
    242e:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    2432:	f88b 6001 	strb.w	r6, [fp, #1]
      if (FsDateTime::callback) {
    2436:	f8d9 3000 	ldr.w	r3, [r9]
    243a:	b353      	cbz	r3, 2492 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x36e>
        FsDateTime::callback(&date, &time, &ms10);
    243c:	f10d 0213 	add.w	r2, sp, #19
    2440:	f10d 0116 	add.w	r1, sp, #22
    2444:	a805      	add	r0, sp, #20
    2446:	4798      	blx	r3
    2448:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    244c:	f8ab 300a 	strh.w	r3, [fp, #10]
    2450:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    2454:	f8ab 3008 	strh.w	r3, [fp, #8]
        dirFile->createTimeMs = ms10;
    2458:	f89d 3013 	ldrb.w	r3, [sp, #19]
    245c:	f88b 3014 	strb.w	r3, [fp, #20]
    2460:	e72f      	b.n	22c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    2462:	bf00      	nop
    2464:	88888889 	.word	0x88888889
    2468:	2002a86c 	.word	0x2002a86c
      dirStream->type = EXFAT_TYPE_STREAM;
    246c:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    246e:	f88b a001 	strb.w	sl, [fp, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    2472:	f88b 3000 	strb.w	r3, [fp]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    2476:	9b02      	ldr	r3, [sp, #8]
    2478:	f063 037f 	orn	r3, r3, #127	; 0x7f
    247c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    2480:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2484:	f88b 3003 	strb.w	r3, [fp, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    2488:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    248c:	f8ab 3004 	strh.w	r3, [fp, #4]
}
    2490:	e717      	b.n	22c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    2492:	f245 6321 	movw	r3, #22049	; 0x5621
    2496:	f8ab 300a 	strh.w	r3, [fp, #10]
    249a:	f8ab 300e 	strh.w	r3, [fp, #14]
    249e:	f8ab 3012 	strh.w	r3, [fp, #18]
        if (FS_DEFAULT_TIME) {
    24a2:	e70e      	b.n	22c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    24a4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    24a8:	06dc      	lsls	r4, r3, #27
    24aa:	f53f af1b 	bmi.w	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    24ae:	07d8      	lsls	r0, r3, #31
    24b0:	f53f af18 	bmi.w	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (oflag & O_TRUNC) {
    24b4:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    24b8:	d013      	beq.n	24e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3be>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    24ba:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    24be:	0799      	lsls	r1, r3, #30
    24c0:	f57f af10 	bpl.w	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    24c4:	2200      	movs	r2, #0
    24c6:	2300      	movs	r3, #0
    24c8:	4628      	mov	r0, r5
    24ca:	f7ff fdb5 	bl	2038 <ExFatFile::seekSet(unsigned long long)>
    24ce:	2800      	cmp	r0, #0
    24d0:	f43f af08 	beq.w	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    24d4:	4628      	mov	r0, r5
    24d6:	f000 fa93 	bl	2a00 <ExFatFile::truncate()>
    24da:	2800      	cmp	r0, #0
    24dc:	f43f af02 	beq.w	22e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    24e0:	e796      	b.n	2410 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    24e2:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    24e6:	d093      	beq.n	2410 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
    24e8:	e78a      	b.n	2400 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    24ea:	bf00      	nop

000024ec <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    24ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    24f0:	2500      	movs	r5, #0
    24f2:	b097      	sub	sp, #92	; 0x5c
    24f4:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    24f6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    24fa:	9201      	str	r2, [sp, #4]
    24fc:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
    24fe:	2b00      	cmp	r3, #0
    2500:	d13e      	bne.n	2580 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    2502:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2506:	460f      	mov	r7, r1
    2508:	f013 0f50 	tst.w	r3, #80	; 0x50
    250c:	d038      	beq.n	2580 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
  if (isDirSeparator(*path)) {
    250e:	7813      	ldrb	r3, [r2, #0]
    2510:	4604      	mov	r4, r0
    2512:	4616      	mov	r6, r2
    2514:	2b2f      	cmp	r3, #47	; 0x2f
    2516:	d037      	beq.n	2588 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2518:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    251c:	ab01      	add	r3, sp, #4
    251e:	aa03      	add	r2, sp, #12
    2520:	4631      	mov	r1, r6
    2522:	4620      	mov	r0, r4
    2524:	f7ff fc52 	bl	1dcc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2528:	b350      	cbz	r0, 2580 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    if (*path == 0) {
    252a:	9e01      	ldr	r6, [sp, #4]
    252c:	7833      	ldrb	r3, [r6, #0]
    252e:	2b00      	cmp	r3, #0
    2530:	d03e      	beq.n	25b0 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2532:	2300      	movs	r3, #0
    2534:	aa03      	add	r2, sp, #12
    2536:	4639      	mov	r1, r7
    2538:	4620      	mov	r0, r4
    253a:	f7ff fdf3 	bl	2124 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    253e:	b1f8      	cbz	r0, 2580 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    tmpDir = *this;
    2540:	46a4      	mov	ip, r4
    2542:	ad08      	add	r5, sp, #32
    2544:	f104 0730 	add.w	r7, r4, #48	; 0x30
    2548:	f8dc 0000 	ldr.w	r0, [ip]
    254c:	f10c 0c10 	add.w	ip, ip, #16
    2550:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    2554:	46ae      	mov	lr, r5
    2556:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    255a:	3510      	adds	r5, #16
    255c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    2560:	45bc      	cmp	ip, r7
    2562:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2566:	d1ef      	bne.n	2548 <ExFatFile::open(ExFatFile*, char const*, int)+0x5c>
    2568:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    256c:	af08      	add	r7, sp, #32
    tmpDir = *this;
    256e:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    2570:	4620      	mov	r0, r4
    2572:	f000 f923 	bl	27bc <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    2576:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    257a:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    257e:	e7cd      	b.n	251c <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  return false;
    2580:	2000      	movs	r0, #0
}
    2582:	b017      	add	sp, #92	; 0x5c
    2584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    2588:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    258c:	292f      	cmp	r1, #47	; 0x2f
    258e:	d0fb      	beq.n	2588 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    2590:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    2592:	b9b1      	cbnz	r1, 25c2 <ExFatFile::open(ExFatFile*, char const*, int)+0xd6>
  memset(this, 0, sizeof(ExFatFile));
    2594:	2238      	movs	r2, #56	; 0x38
    2596:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    2598:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    259a:	f009 fa37 	bl	ba0c <memset>
  m_flags = FILE_FLAG_READ;
    259e:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    25a0:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    25a2:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    25a4:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    25a6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    25aa:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    25ae:	e7e8      	b.n	2582 <ExFatFile::open(ExFatFile*, char const*, int)+0x96>
  return openPrivate(dirFile, &fname, oflag);
    25b0:	464b      	mov	r3, r9
    25b2:	aa03      	add	r2, sp, #12
    25b4:	4639      	mov	r1, r7
    25b6:	4620      	mov	r0, r4
    25b8:	f7ff fdb4 	bl	2124 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    25bc:	b017      	add	sp, #92	; 0x5c
    25be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    25c2:	2238      	movs	r2, #56	; 0x38
    25c4:	2100      	movs	r1, #0
    25c6:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    25c8:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    25ca:	f009 fa1f 	bl	ba0c <memset>
  m_flags = FILE_FLAG_READ;
    25ce:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    25d0:	af08      	add	r7, sp, #32
  m_vol = vol;
    25d2:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    25d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    25d8:	2340      	movs	r3, #64	; 0x40
    25da:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    25de:	e79b      	b.n	2518 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>

000025e0 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    25e0:	b119      	cbz	r1, 25ea <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    25e2:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    25e6:	f7ff bf81 	b.w	24ec <ExFatFile::open(ExFatFile*, char const*, int)>
}
    25ea:	4608      	mov	r0, r1
    25ec:	4770      	bx	lr
    25ee:	bf00      	nop

000025f0 <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    25f0:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    25f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25f4:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    25f6:	6a00      	ldr	r0, [r0, #32]
    25f8:	b101      	cbz	r1, 25fc <ExFatFile::addCluster()+0xc>
    25fa:	3101      	adds	r1, #1
    25fc:	2201      	movs	r2, #1
    25fe:	f000 fc15 	bl	2e2c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    2602:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2604:	4605      	mov	r5, r0
  if (find < 2) {
    2606:	d932      	bls.n	266e <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    2608:	2301      	movs	r3, #1
    260a:	4601      	mov	r1, r0
    260c:	6a20      	ldr	r0, [r4, #32]
    260e:	461a      	mov	r2, r3
    2610:	f000 fc6c 	bl	2eec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2614:	4606      	mov	r6, r0
    2616:	b350      	cbz	r0, 266e <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    2618:	69a3      	ldr	r3, [r4, #24]
    261a:	b35b      	cbz	r3, 2674 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    261c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    2620:	0651      	lsls	r1, r2, #25
    2622:	d512      	bpl.n	264a <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    2624:	1c59      	adds	r1, r3, #1
    2626:	42a9      	cmp	r1, r5
    2628:	d018      	beq.n	265c <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    262a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    262e:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2630:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2634:	e005      	b.n	2642 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    2636:	6a20      	ldr	r0, [r4, #32]
    2638:	f000 fd54 	bl	30e4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    263c:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    263e:	b1b0      	cbz	r0, 266e <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2640:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    2642:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2644:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    2646:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2648:	d3f5      	bcc.n	2636 <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    264a:	f04f 32ff 	mov.w	r2, #4294967295
    264e:	4629      	mov	r1, r5
    2650:	6a20      	ldr	r0, [r4, #32]
    2652:	f000 fd47 	bl	30e4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2656:	b150      	cbz	r0, 266e <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    2658:	69a1      	ldr	r1, [r4, #24]
    265a:	b911      	cbnz	r1, 2662 <ExFatFile::addCluster()+0x72>
}
    265c:	4630      	mov	r0, r6
  m_curCluster = find;
    265e:	61a5      	str	r5, [r4, #24]
}
    2660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    2662:	462a      	mov	r2, r5
    2664:	6a20      	ldr	r0, [r4, #32]
    2666:	f000 fd3d 	bl	30e4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    266a:	2800      	cmp	r0, #0
    266c:	d1f6      	bne.n	265c <ExFatFile::addCluster()+0x6c>
  return false;
    266e:	2600      	movs	r6, #0
}
    2670:	4630      	mov	r0, r6
    2672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    2674:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    267c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    2680:	e7ec      	b.n	265c <ExFatFile::addCluster()+0x6c>
    2682:	bf00      	nop

00002684 <ExFatFile::syncDir()>:
bool ExFatFile::syncDir() {
    2684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2688:	f04f 0800 	mov.w	r8, #0
    268c:	b082      	sub	sp, #8
        if (FsDateTime::callback) {
    268e:	4f4a      	ldr	r7, [pc, #296]	; (27b8 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    2690:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    2692:	4644      	mov	r4, r8
    2694:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    2696:	2200      	movs	r2, #0
    2698:	4630      	mov	r0, r6
    269a:	f7ff fb5b 	bl	1d54 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    269e:	4605      	mov	r5, r0
    26a0:	b130      	cbz	r0, 26b0 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    26a2:	7801      	ldrb	r1, [r0, #0]
    26a4:	29c0      	cmp	r1, #192	; 0xc0
    26a6:	d069      	beq.n	277c <ExFatFile::syncDir()+0xf8>
    26a8:	29c1      	cmp	r1, #193	; 0xc1
    26aa:	d02b      	beq.n	2704 <ExFatFile::syncDir()+0x80>
    26ac:	2985      	cmp	r1, #133	; 0x85
    26ae:	d009      	beq.n	26c4 <ExFatFile::syncDir()+0x40>
  m_error |= WRITE_ERROR;
    26b0:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    26b4:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    26b6:	f043 0301 	orr.w	r3, r3, #1
    26ba:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    26be:	b002      	add	sp, #8
    26c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    26c4:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    26c8:	f003 0337 	and.w	r3, r3, #55	; 0x37
    26cc:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    26ce:	683b      	ldr	r3, [r7, #0]
    26d0:	b183      	cbz	r3, 26f4 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    26d2:	f10d 0203 	add.w	r2, sp, #3
    26d6:	f10d 0106 	add.w	r1, sp, #6
    26da:	a801      	add	r0, sp, #4
    26dc:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    26de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    26e2:	81ab      	strh	r3, [r5, #12]
    26e4:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    26e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    26ea:	81eb      	strh	r3, [r5, #14]
    26ec:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    26ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    26f2:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    26f4:	6a32      	ldr	r2, [r6, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    26f6:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    26fa:	f043 0301 	orr.w	r3, r3, #1
    26fe:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2702:	7829      	ldrb	r1, [r5, #0]
    2704:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2708:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    270a:	fab0 f080 	clz	r0, r0
    270e:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2710:	e001      	b.n	2716 <ExFatFile::syncDir()+0x92>
    2712:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2714:	5ca9      	ldrb	r1, [r5, r2]
    2716:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2718:	2a01      	cmp	r2, #1
    271a:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    271e:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    2722:	fa11 f383 	uxtah	r3, r1, r3
    2726:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2728:	d101      	bne.n	272e <ExFatFile::syncDir()+0xaa>
    272a:	2800      	cmp	r0, #0
    272c:	d1f1      	bne.n	2712 <ExFatFile::syncDir()+0x8e>
    272e:	2a1f      	cmp	r2, #31
    2730:	d9f0      	bls.n	2714 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    2732:	f108 0801 	add.w	r8, r8, #1
    2736:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    273a:	fa5f f188 	uxtb.w	r1, r8
    273e:	428b      	cmp	r3, r1
    2740:	d2a9      	bcs.n	2696 <ExFatFile::syncDir()+0x12>
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    2742:	2201      	movs	r2, #1
    2744:	f106 0124 	add.w	r1, r6, #36	; 0x24
    2748:	6a30      	ldr	r0, [r6, #32]
    274a:	f000 fc4b 	bl	2fe4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    274e:	2800      	cmp	r0, #0
    2750:	d0ae      	beq.n	26b0 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    2752:	6a35      	ldr	r5, [r6, #32]
    2754:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2756:	4628      	mov	r0, r5
    2758:	f004 fcd4 	bl	7104 <FsCache::sync()>
    275c:	2800      	cmp	r0, #0
    275e:	d0a7      	beq.n	26b0 <ExFatFile::syncDir()+0x2c>
    2760:	f505 7004 	add.w	r0, r5, #528	; 0x210
    2764:	f004 fcce 	bl	7104 <FsCache::sync()>
    2768:	2800      	cmp	r0, #0
    276a:	d0a1      	beq.n	26b0 <ExFatFile::syncDir()+0x2c>
    276c:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    2770:	6803      	ldr	r3, [r0, #0]
    2772:	69db      	ldr	r3, [r3, #28]
    2774:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2776:	2800      	cmp	r0, #0
    2778:	d1a1      	bne.n	26be <ExFatFile::syncDir()+0x3a>
    277a:	e799      	b.n	26b0 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    277c:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    2780:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    2784:	7843      	ldrb	r3, [r0, #1]
    2786:	bf14      	ite	ne
    2788:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    278c:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    2790:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    2792:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    2796:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    279a:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    279e:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    27a2:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    27a4:	e9c5 0106 	strd	r0, r1, [r5, #24]
    27a8:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    27ac:	f043 0301 	orr.w	r3, r3, #1
    27b0:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    27b4:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() { m_dataCache.dirty(); }
    27b6:	e7a5      	b.n	2704 <ExFatFile::syncDir()+0x80>
    27b8:	2002a86c 	.word	0x2002a86c

000027bc <ExFatFile::sync()>:
bool ExFatFile::sync() {
    27bc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    27be:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    27c2:	b343      	cbz	r3, 2816 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    27c4:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    27c8:	4604      	mov	r4, r0
    27ca:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    27ce:	2a00      	cmp	r2, #0
    27d0:	db0c      	blt.n	27ec <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    27d2:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    27d4:	4628      	mov	r0, r5
    27d6:	f004 fc95 	bl	7104 <FsCache::sync()>
    27da:	b978      	cbnz	r0, 27fc <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    27dc:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    27e0:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    27e2:	f043 0301 	orr.w	r3, r3, #1
    27e6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    27ea:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    27ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    27f0:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    27f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    27f8:	f7ff bf44 	b.w	2684 <ExFatFile::syncDir()>
    27fc:	f505 7004 	add.w	r0, r5, #528	; 0x210
    2800:	f004 fc80 	bl	7104 <FsCache::sync()>
    2804:	2800      	cmp	r0, #0
    2806:	d0e9      	beq.n	27dc <ExFatFile::sync()+0x20>
    2808:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    280c:	6803      	ldr	r3, [r0, #0]
    280e:	69db      	ldr	r3, [r3, #28]
    2810:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2812:	2800      	cmp	r0, #0
    2814:	d0e2      	beq.n	27dc <ExFatFile::sync()+0x20>
    return true;
    2816:	2001      	movs	r0, #1
}
    2818:	bd38      	pop	{r3, r4, r5, pc}
    281a:	bf00      	nop

0000281c <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    281c:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    281e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    2822:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2824:	065a      	lsls	r2, r3, #25
    2826:	d44c      	bmi.n	28c2 <ExFatFile::addDirCluster()+0xa6>
    2828:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    282a:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    282c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    2830:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    2832:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    2836:	d301      	bcc.n	283c <ExFatFile::addDirCluster()+0x20>
}
    2838:	2000      	movs	r0, #0
    283a:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    283c:	4628      	mov	r0, r5
    283e:	f7ff fed7 	bl	25f0 <ExFatFile::addCluster()>
    2842:	2800      	cmp	r0, #0
    2844:	d0f8      	beq.n	2838 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    2846:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    2848:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    284a:	69ae      	ldr	r6, [r5, #24]
    284c:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    2850:	3e02      	subs	r6, #2
    2852:	409e      	lsls	r6, r3
    2854:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2858:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    285a:	1931      	adds	r1, r6, r4
    285c:	2205      	movs	r2, #5
    285e:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2862:	3401      	adds	r4, #1
    2864:	f004 fc7a 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    2868:	f44f 7200 	mov.w	r2, #512	; 0x200
    286c:	2100      	movs	r1, #0
    if (!cache) {
    286e:	2800      	cmp	r0, #0
    2870:	d0e2      	beq.n	2838 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    2872:	f009 f8cb 	bl	ba0c <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    2876:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    2878:	2301      	movs	r3, #1
    287a:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    287e:	4093      	lsls	r3, r2
    2880:	429c      	cmp	r4, r3
    2882:	d3ea      	bcc.n	285a <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    2884:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2888:	065b      	lsls	r3, r3, #25
    288a:	d415      	bmi.n	28b8 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    288c:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    2890:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength += m_vol->bytesPerCluster();
    2894:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2898:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    289c:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    28a0:	189b      	adds	r3, r3, r2
    28a2:	f141 0000 	adc.w	r0, r1, #0
    28a6:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    28a8:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength += m_vol->bytesPerCluster();
    28ac:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    28ae:	189b      	adds	r3, r3, r2
    28b0:	f141 0100 	adc.w	r1, r1, #0
    28b4:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    28b8:	4628      	mov	r0, r5
}
    28ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    28be:	f7ff bf7d 	b.w	27bc <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    28c2:	6a00      	ldr	r0, [r0, #32]
    28c4:	f000 fd04 	bl	32d0 <ExFatPartition::rootLength()>
    28c8:	e7af      	b.n	282a <ExFatFile::addDirCluster()+0xe>
    28ca:	bf00      	nop

000028cc <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    28cc:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    28ce:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    28d2:	f013 0f50 	tst.w	r3, #80	; 0x50
    28d6:	d102      	bne.n	28de <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    28d8:	2500      	movs	r5, #0
}
    28da:	4628      	mov	r0, r5
    28dc:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    28de:	f640 2302 	movw	r3, #2562	; 0xa02
    28e2:	4604      	mov	r4, r0
    28e4:	f7ff fc1e 	bl	2124 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    28e8:	2800      	cmp	r0, #0
    28ea:	d0f5      	beq.n	28d8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    28ec:	2330      	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    28ee:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    28f0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    28f4:	f7ff ff92 	bl	281c <ExFatFile::addDirCluster()>
    28f8:	4605      	mov	r5, r0
    28fa:	2800      	cmp	r0, #0
    28fc:	d0ec      	beq.n	28d8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    28fe:	69a1      	ldr	r1, [r4, #24]
  void rewind() { seekSet(0); }
    2900:	2200      	movs	r2, #0
    2902:	2300      	movs	r3, #0
    2904:	4620      	mov	r0, r4
    2906:	61e1      	str	r1, [r4, #28]
    2908:	f7ff fb96 	bl	2038 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    290c:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    290e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    2912:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    2916:	2b00      	cmp	r3, #0
    2918:	d0df      	beq.n	28da <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    291a:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    291c:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    291e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    2926:	f7ff bead 	b.w	2684 <ExFatFile::syncDir()>
    292a:	bf00      	nop

0000292c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    292c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ExFatFile() {}
    292e:	2500      	movs	r5, #0
    2930:	b097      	sub	sp, #92	; 0x5c
    2932:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    2934:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2938:	9201      	str	r2, [sp, #4]
    293a:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    293c:	2b00      	cmp	r3, #0
    293e:	d146      	bne.n	29ce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    2940:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2944:	460e      	mov	r6, r1
    2946:	f013 0f50 	tst.w	r3, #80	; 0x50
    294a:	d040      	beq.n	29ce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
  if (isDirSeparator(*path)) {
    294c:	7813      	ldrb	r3, [r2, #0]
    294e:	4604      	mov	r4, r0
    2950:	4611      	mov	r1, r2
    2952:	2b2f      	cmp	r3, #47	; 0x2f
    2954:	d03e      	beq.n	29d4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!parsePathName(path, &fname, &path)) {
    2956:	ab01      	add	r3, sp, #4
    2958:	aa03      	add	r2, sp, #12
    295a:	4620      	mov	r0, r4
    295c:	f7ff fa36 	bl	1dcc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2960:	2800      	cmp	r0, #0
    2962:	d034      	beq.n	29ce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!*path) {
    2964:	9b01      	ldr	r3, [sp, #4]
    2966:	781b      	ldrb	r3, [r3, #0]
    2968:	2b00      	cmp	r3, #0
    296a:	d041      	beq.n	29f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc4>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    296c:	2300      	movs	r3, #0
    296e:	aa03      	add	r2, sp, #12
    2970:	4631      	mov	r1, r6
    2972:	4620      	mov	r0, r4
    2974:	f7ff fbd6 	bl	2124 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2978:	b930      	cbnz	r0, 2988 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5c>
      if (!pFlag || !mkdir(parent, &fname)) {
    297a:	b347      	cbz	r7, 29ce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    297c:	aa03      	add	r2, sp, #12
    297e:	4631      	mov	r1, r6
    2980:	4620      	mov	r0, r4
    2982:	f7ff ffa3 	bl	28cc <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    2986:	b310      	cbz	r0, 29ce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    tmpDir = *this;
    2988:	46a4      	mov	ip, r4
    298a:	ad08      	add	r5, sp, #32
    298c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2990:	f8dc 0000 	ldr.w	r0, [ip]
    2994:	f10c 0c10 	add.w	ip, ip, #16
    2998:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    299c:	46ae      	mov	lr, r5
    299e:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    29a2:	3510      	adds	r5, #16
    29a4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    29a8:	45b4      	cmp	ip, r6
    29aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    29ae:	d1ef      	bne.n	2990 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x64>
    29b0:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    29b4:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    29b6:	6028      	str	r0, [r5, #0]
    close();
    29b8:	4620      	mov	r0, r4
    29ba:	f7ff f9e9 	bl	1d90 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    29be:	9901      	ldr	r1, [sp, #4]
    29c0:	ab01      	add	r3, sp, #4
    29c2:	aa03      	add	r2, sp, #12
    29c4:	4620      	mov	r0, r4
    29c6:	f7ff fa01 	bl	1dcc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    29ca:	2800      	cmp	r0, #0
    29cc:	d1ca      	bne.n	2964 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x38>
  return false;
    29ce:	2000      	movs	r0, #0
}
    29d0:	b017      	add	sp, #92	; 0x5c
    29d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    29d4:	3101      	adds	r1, #1
    29d6:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    29d8:	780b      	ldrb	r3, [r1, #0]
    29da:	2b2f      	cmp	r3, #47	; 0x2f
    29dc:	d0fa      	beq.n	29d4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!tmpDir.openRoot(parent->m_vol)) {
    29de:	6a31      	ldr	r1, [r6, #32]
    29e0:	a808      	add	r0, sp, #32
    29e2:	f7ff f9df 	bl	1da4 <ExFatFile::openRoot(ExFatVolume*)>
    29e6:	2800      	cmp	r0, #0
    29e8:	d0f1      	beq.n	29ce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!parsePathName(path, &fname, &path)) {
    29ea:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    29ec:	ae08      	add	r6, sp, #32
    29ee:	e7b2      	b.n	2956 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2a>
  return mkdir(parent, &fname);
    29f0:	aa03      	add	r2, sp, #12
    29f2:	4631      	mov	r1, r6
    29f4:	4620      	mov	r0, r4
    29f6:	f7ff ff69 	bl	28cc <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    29fa:	b017      	add	sp, #92	; 0x5c
    29fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29fe:	bf00      	nop

00002a00 <ExFatFile::truncate()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    2a00:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    2a04:	079a      	lsls	r2, r3, #30
    2a06:	d562      	bpl.n	2ace <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    2a08:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    2a0a:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    2a0c:	b082      	sub	sp, #8
    2a0e:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    2a10:	b3a5      	cbz	r5, 2a7c <ExFatFile::truncate()+0x7c>
    return true;
  }
  if (isContiguous()) {
    2a12:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    2a16:	d034      	beq.n	2a82 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2a18:	6a00      	ldr	r0, [r0, #32]
    2a1a:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2a1c:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    2a20:	3a01      	subs	r2, #1
    2a22:	68e1      	ldr	r1, [r4, #12]
    2a24:	f10c 0c09 	add.w	ip, ip, #9
    2a28:	f141 31ff 	adc.w	r1, r1, #4294967295
    2a2c:	fa5f fc8c 	uxtb.w	ip, ip
    2a30:	f1cc 0e20 	rsb	lr, ip, #32
    2a34:	fa22 f20c 	lsr.w	r2, r2, ip
    2a38:	f1ac 0c20 	sub.w	ip, ip, #32
    2a3c:	fa01 fe0e 	lsl.w	lr, r1, lr
    2a40:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    2a44:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2a46:	ea42 020e 	orr.w	r2, r2, lr
    2a4a:	ea42 020c 	orr.w	r2, r2, ip
    2a4e:	3201      	adds	r2, #1
    if (m_curCluster) {
    2a50:	b319      	cbz	r1, 2a9a <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    2a52:	3d01      	subs	r5, #1
    2a54:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    2a56:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    2a58:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    2a5a:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2a5c:	bb72      	cbnz	r2, 2abc <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2a5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    2a62:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    2a64:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2a68:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    2a6c:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    2a70:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    2a74:	f7ff fea2 	bl	27bc <ExFatFile::sync()>

fail:
  return false;
}
    2a78:	b002      	add	sp, #8
    2a7a:	bd70      	pop	{r4, r5, r6, pc}
    return true;
    2a7c:	2001      	movs	r0, #1
}
    2a7e:	b002      	add	sp, #8
    2a80:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    2a82:	6981      	ldr	r1, [r0, #24]
    2a84:	b961      	cbnz	r1, 2aa0 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    2a86:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2a88:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    2a8a:	4629      	mov	r1, r5
    2a8c:	6a20      	ldr	r0, [r4, #32]
    2a8e:	f000 fb49 	bl	3124 <ExFatPartition::freeChain(unsigned long)>
    2a92:	b1c8      	cbz	r0, 2ac8 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2a94:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2a98:	e7e1      	b.n	2a5e <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    2a9a:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2a9c:	61e1      	str	r1, [r4, #28]
    2a9e:	e7dd      	b.n	2a5c <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2aa0:	aa01      	add	r2, sp, #4
    2aa2:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    2aa4:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2aa6:	f000 fafb 	bl	30a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    2aaa:	2800      	cmp	r0, #0
    2aac:	db0c      	blt.n	2ac8 <ExFatFile::truncate()+0xc8>
      if (fg) {
    2aae:	d110      	bne.n	2ad2 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    2ab0:	9d01      	ldr	r5, [sp, #4]
    2ab2:	2d00      	cmp	r5, #0
    2ab4:	d1e9      	bne.n	2a8a <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2ab6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2aba:	e7d0      	b.n	2a5e <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2abc:	2300      	movs	r3, #0
    2abe:	9901      	ldr	r1, [sp, #4]
    2ac0:	f000 fa14 	bl	2eec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2ac4:	2800      	cmp	r0, #0
    2ac6:	d1e5      	bne.n	2a94 <ExFatFile::truncate()+0x94>
  return false;
    2ac8:	2000      	movs	r0, #0
}
    2aca:	b002      	add	sp, #8
    2acc:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2ace:	2000      	movs	r0, #0
}
    2ad0:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    2ad2:	f04f 32ff 	mov.w	r2, #4294967295
    2ad6:	69a1      	ldr	r1, [r4, #24]
    2ad8:	6a20      	ldr	r0, [r4, #32]
    2ada:	f000 fb03 	bl	30e4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2ade:	2800      	cmp	r0, #0
    2ae0:	d1e6      	bne.n	2ab0 <ExFatFile::truncate()+0xb0>
    2ae2:	e7f1      	b.n	2ac8 <ExFatFile::truncate()+0xc8>

00002ae4 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    2ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2ae8:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    2aec:	b083      	sub	sp, #12
    2aee:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    2af0:	079d      	lsls	r5, r3, #30
    2af2:	f140 80a1 	bpl.w	2c38 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    2af6:	4691      	mov	r9, r2
    2af8:	071a      	lsls	r2, r3, #28
    2afa:	460e      	mov	r6, r1
    2afc:	f100 8095 	bmi.w	2c2a <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    2b00:	f1b9 0f00 	cmp.w	r9, #0
    2b04:	f000 8128 	beq.w	2d58 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    2b08:	6823      	ldr	r3, [r4, #0]
    2b0a:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2b0c:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    2b0e:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2b10:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    2b14:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    2b18:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    2b1c:	f1b8 0f00 	cmp.w	r8, #0
    2b20:	f040 8094 	bne.w	2c4c <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    2b24:	2900      	cmp	r1, #0
    2b26:	f000 80d4 	beq.w	2cd2 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    2b2a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2b2e:	065b      	lsls	r3, r3, #25
    2b30:	f140 80ec 	bpl.w	2d0c <ExFatFile::write(void const*, unsigned int)+0x228>
    2b34:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    2b38:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2b3c:	f10c 0c09 	add.w	ip, ip, #9
    2b40:	3b01      	subs	r3, #1
    2b42:	fa5f fc8c 	uxtb.w	ip, ip
    2b46:	f142 32ff 	adc.w	r2, r2, #4294967295
    2b4a:	f1cc 0e20 	rsb	lr, ip, #32
    2b4e:	fa23 f30c 	lsr.w	r3, r3, ip
    2b52:	f1ac 0c20 	sub.w	ip, ip, #32
    2b56:	fa02 fe0e 	lsl.w	lr, r2, lr
    2b5a:	fa22 fc0c 	lsr.w	ip, r2, ip
    2b5e:	69e2      	ldr	r2, [r4, #28]
    2b60:	ea43 030e 	orr.w	r3, r3, lr
    2b64:	ea43 030c 	orr.w	r3, r3, ip
    2b68:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    2b6a:	4299      	cmp	r1, r3
    2b6c:	f080 80d5 	bcs.w	2d1a <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    2b70:	3101      	adds	r1, #1
    2b72:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    2b74:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2b78:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    2b7a:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2b7e:	4091      	lsls	r1, r2
    2b80:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2b82:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    2b86:	f0c0 808a 	bcc.w	2c9e <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    2b8a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    2b8e:	f0c0 80a6 	bcc.w	2cde <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    2b92:	2301      	movs	r3, #1
    2b94:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    2b96:	0a6a      	lsrs	r2, r5, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    2b98:	eba3 0308 	sub.w	r3, r3, r8
    2b9c:	4293      	cmp	r3, r2
    2b9e:	bf28      	it	cs
    2ba0:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    2ba2:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
    2ba6:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    2ba8:	ea4f 2843 	mov.w	r8, r3, lsl #9
    2bac:	d309      	bcc.n	2bc2 <ExFatFile::write(void const*, unsigned int)+0xde>
    2bae:	185f      	adds	r7, r3, r1
    2bb0:	42ba      	cmp	r2, r7
    2bb2:	d206      	bcs.n	2bc2 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    2bb4:	2200      	movs	r2, #0
    2bb6:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2bba:	f04f 32ff 	mov.w	r2, #4294967295
    2bbe:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
    2bc2:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2bc6:	4632      	mov	r2, r6
    2bc8:	6807      	ldr	r7, [r0, #0]
    2bca:	6a7f      	ldr	r7, [r7, #36]	; 0x24
    2bcc:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    2bce:	b398      	cbz	r0, 2c38 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    2bd0:	4643      	mov	r3, r8
    src += n;
    2bd2:	4446      	add	r6, r8
    toWrite -= n;
    2bd4:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    2bd8:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    2bdc:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    2be0:	19db      	adds	r3, r3, r7
    2be2:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    2be6:	4298      	cmp	r0, r3
    2be8:	4191      	sbcs	r1, r2
    m_curPosition += n;
    2bea:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    2bee:	d207      	bcs.n	2c00 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2bf0:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2bf4:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    2bf8:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2bfc:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    2c00:	2d00      	cmp	r5, #0
    2c02:	d183      	bne.n	2b0c <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    2c04:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    2c08:	4298      	cmp	r0, r3
    2c0a:	4191      	sbcs	r1, r2
    2c0c:	f0c0 8096 	bcc.w	2d3c <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    2c10:	4b53      	ldr	r3, [pc, #332]	; (2d60 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    2c12:	681b      	ldr	r3, [r3, #0]
    2c14:	2b00      	cmp	r3, #0
    2c16:	f000 809d 	beq.w	2d54 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2c1a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2c1e:	4648      	mov	r0, r9
    2c20:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c24:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    2c28:	e00d      	b.n	2c46 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    2c2a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    2c2e:	f7ff fa03 	bl	2038 <ExFatFile::seekSet(unsigned long long)>
    2c32:	2800      	cmp	r0, #0
    2c34:	f47f af64 	bne.w	2b00 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    2c38:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    2c3c:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2c3e:	f043 0301 	orr.w	r3, r3, #1
    2c42:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2c46:	b003      	add	sp, #12
    2c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    2c4c:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2c50:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2c52:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    2c56:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2c5a:	4091      	lsls	r1, r2
    2c5c:	4441      	add	r1, r8
    2c5e:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2c60:	2f00      	cmp	r7, #0
    2c62:	d08e      	beq.n	2b82 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    2c64:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    2c68:	2201      	movs	r2, #1
    2c6a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2c6e:	45a8      	cmp	r8, r5
    2c70:	bf28      	it	cs
    2c72:	46a8      	movcs	r8, r5
    2c74:	f004 fa72 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2c78:	2800      	cmp	r0, #0
    2c7a:	d0dd      	beq.n	2c38 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2c7c:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2c7e:	4447      	add	r7, r8
      memcpy(dst, src, n);
    2c80:	4642      	mov	r2, r8
    2c82:	4631      	mov	r1, r6
    2c84:	f005 f9f6 	bl	8074 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2c88:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    2c8c:	6a20      	ldr	r0, [r4, #32]
    2c8e:	d19f      	bne.n	2bd0 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() { return m_dataCache.sync(); }
    2c90:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2c94:	f004 fa36 	bl	7104 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    2c98:	2800      	cmp	r0, #0
    2c9a:	d199      	bne.n	2bd0 <ExFatFile::write(void const*, unsigned int)+0xec>
    2c9c:	e7cc      	b.n	2c38 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    2c9e:	6862      	ldr	r2, [r4, #4]
    2ca0:	6963      	ldr	r3, [r4, #20]
    2ca2:	9200      	str	r2, [sp, #0]
    2ca4:	9301      	str	r3, [sp, #4]
    2ca6:	6922      	ldr	r2, [r4, #16]
    2ca8:	6823      	ldr	r3, [r4, #0]
    2caa:	4293      	cmp	r3, r2
    2cac:	e9dd 2300 	ldrd	r2, r3, [sp]
    2cb0:	419a      	sbcs	r2, r3
    2cb2:	d212      	bcs.n	2cda <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    2cb4:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    2cb6:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2cba:	f004 fa4f 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2cbe:	2800      	cmp	r0, #0
    2cc0:	d0ba      	beq.n	2c38 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2cc2:	462a      	mov	r2, r5
    2cc4:	4631      	mov	r1, r6
    2cc6:	4438      	add	r0, r7
    m_curPosition += n;
    2cc8:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    2cca:	f005 f9d3 	bl	8074 <memcpy>
    m_curPosition += n;
    2cce:	462b      	mov	r3, r5
    2cd0:	e77f      	b.n	2bd2 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    2cd2:	69e1      	ldr	r1, [r4, #28]
    2cd4:	b349      	cbz	r1, 2d2a <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    2cd6:	61a1      	str	r1, [r4, #24]
    2cd8:	e74c      	b.n	2b74 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    2cda:	2205      	movs	r2, #5
    2cdc:	e7eb      	b.n	2cb6 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    2cde:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    2ce2:	428b      	cmp	r3, r1
    2ce4:	d106      	bne.n	2cf4 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    2ce6:	2300      	movs	r3, #0
    2ce8:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2cec:	f04f 33ff 	mov.w	r3, #4294967295
    2cf0:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
    2cf4:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2cf8:	4632      	mov	r2, r6
    2cfa:	6803      	ldr	r3, [r0, #0]
    2cfc:	6a1b      	ldr	r3, [r3, #32]
    2cfe:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    2d00:	2800      	cmp	r0, #0
    2d02:	d099      	beq.n	2c38 <ExFatFile::write(void const*, unsigned int)+0x154>
    2d04:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2d08:	4698      	mov	r8, r3
    2d0a:	e762      	b.n	2bd2 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2d0c:	f104 0218 	add.w	r2, r4, #24
    2d10:	f000 f9c6 	bl	30a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    2d14:	2800      	cmp	r0, #0
    2d16:	db8f      	blt.n	2c38 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    2d18:	d104      	bne.n	2d24 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    2d1a:	4620      	mov	r0, r4
    2d1c:	f7ff fc68 	bl	25f0 <ExFatFile::addCluster()>
    2d20:	2800      	cmp	r0, #0
    2d22:	d089      	beq.n	2c38 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    2d24:	69a1      	ldr	r1, [r4, #24]
    2d26:	6a20      	ldr	r0, [r4, #32]
    2d28:	e724      	b.n	2b74 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    2d2a:	4620      	mov	r0, r4
    2d2c:	f7ff fc60 	bl	25f0 <ExFatFile::addCluster()>
    2d30:	2800      	cmp	r0, #0
    2d32:	d081      	beq.n	2c38 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    2d34:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    2d36:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    2d38:	61e1      	str	r1, [r4, #28]
    2d3a:	e71b      	b.n	2b74 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2d3c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2d40:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    2d42:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2d46:	f061 037f 	orn	r3, r1, #127	; 0x7f
    2d4a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2d4e:	b003      	add	sp, #12
    2d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2d54:	4648      	mov	r0, r9
    2d56:	e776      	b.n	2c46 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    2d58:	e9d4 3200 	ldrd	r3, r2, [r4]
    2d5c:	e752      	b.n	2c04 <ExFatFile::write(void const*, unsigned int)+0x120>
    2d5e:	bf00      	nop
    2d60:	2002a86c 	.word	0x2002a86c

00002d64 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    2d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  bool atEnd() { return next == end; }
    2d68:	e9d2 3801 	ldrd	r3, r8, [r2, #4]
    2d6c:	f103 090f 	add.w	r9, r3, #15
  return *reinterpret_cast<const uint16_t*>(src);
    2d70:	f831 0f02 	ldrh.w	r0, [r1, #2]!
    if (fname->atEnd()) {
    2d74:	4598      	cmp	r8, r3
  char getch() { return atEnd() ? 0 : *next++; }
    2d76:	f103 0301 	add.w	r3, r3, #1
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2d7a:	fa5f fc80 	uxtb.w	ip, r0
    if (fname->atEnd()) {
    2d7e:	d01e      	beq.n	2dbe <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    2d80:	6053      	str	r3, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2d82:	287e      	cmp	r0, #126	; 0x7e
    2d84:	f813 ec01 	ldrb.w	lr, [r3, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2d88:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
    2d8c:	f1ac 0620 	sub.w	r6, ip, #32
    2d90:	f1ae 0561 	sub.w	r5, lr, #97	; 0x61
    2d94:	f1ae 0720 	sub.w	r7, lr, #32
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2d98:	d80e      	bhi.n	2db8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2d9a:	2d19      	cmp	r5, #25
    2d9c:	bf98      	it	ls
    2d9e:	fa5f fe87 	uxtbls.w	lr, r7
    2da2:	2c19      	cmp	r4, #25
    2da4:	bf98      	it	ls
    2da6:	fa5f fc86 	uxtbls.w	ip, r6
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2daa:	45f4      	cmp	ip, lr
    2dac:	d104      	bne.n	2db8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
  for (uint8_t i = 0; i < 15; i++) {
    2dae:	4599      	cmp	r9, r3
    2db0:	d1de      	bne.n	2d70 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    2db2:	2001      	movs	r0, #1
}
    2db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
    2db8:	2000      	movs	r0, #0
}
    2dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return u == 0;
    2dbe:	fab0 f080 	clz	r0, r0
    2dc2:	0940      	lsrs	r0, r0, #5
}
    2dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00002dc8 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    2dc8:	b530      	push	{r4, r5, lr}
  void reset() { next = begin; }
    2dca:	680d      	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
    2dcc:	688c      	ldr	r4, [r1, #8]
  void reset() { next = begin; }
    2dce:	604d      	str	r5, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    2dd0:	42ac      	cmp	r4, r5
    2dd2:	d025      	beq.n	2e20 <ExFatFile::hashName(ExName_t*)+0x58>
    2dd4:	462a      	mov	r2, r5
  uint16_t hash = 0;
    2dd6:	2300      	movs	r3, #0
  char getch() { return atEnd() ? 0 : *next++; }
    2dd8:	3201      	adds	r2, #1
  hash = ((hash << 15) | (hash >> 1)) + u;
    2dda:	03d8      	lsls	r0, r3, #15
    2ddc:	604a      	str	r2, [r1, #4]
    2dde:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
    2de2:	f812 0c01 	ldrb.w	r0, [r2, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2de6:	f1a0 0c61 	sub.w	ip, r0, #97	; 0x61
    2dea:	f1a0 0e20 	sub.w	lr, r0, #32
    2dee:	f1bc 0f19 	cmp.w	ip, #25
    2df2:	bf98      	it	ls
    2df4:	fa5f f08e 	uxtbls.w	r0, lr
  while (!fname->atEnd()) {
    2df8:	4294      	cmp	r4, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
    2dfa:	4403      	add	r3, r0
  hash = ((hash << 15) | (hash >> 1));
    2dfc:	ea4f 30c3 	mov.w	r0, r3, lsl #15
    2e00:	f3c3 034e 	ubfx	r3, r3, #1, #15
    2e04:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    2e08:	ea43 0300 	orr.w	r3, r3, r0
  while (!fname->atEnd()) {
    2e0c:	d1e4      	bne.n	2dd8 <ExFatFile::hashName(ExName_t*)+0x10>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    2e0e:	1b64      	subs	r4, r4, r5
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    2e10:	820b      	strh	r3, [r1, #16]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2e12:	1e60      	subs	r0, r4, #1
  fname->nameLength = fname->end - fname->begin;
    2e14:	60cc      	str	r4, [r1, #12]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2e16:	28fe      	cmp	r0, #254	; 0xfe
    2e18:	bf8c      	ite	hi
    2e1a:	2000      	movhi	r0, #0
    2e1c:	2001      	movls	r0, #1
  }
  return true;

fail:
  return false;
}
    2e1e:	bd30      	pop	{r4, r5, pc}
  while (!fname->atEnd()) {
    2e20:	2000      	movs	r0, #0
    2e22:	4604      	mov	r4, r0
  uint16_t hash = 0;
    2e24:	4603      	mov	r3, r0
  fname->nameLength = fname->end - fname->begin;
    2e26:	60cc      	str	r4, [r1, #12]
  fname->nameHash = hash;
    2e28:	820b      	strh	r3, [r1, #16]
}
    2e2a:	bd30      	pop	{r4, r5, pc}

00002e2c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e30:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2e32:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2e34:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2e36:	2900      	cmp	r1, #0
    2e38:	d042      	beq.n	2ec0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    2e3a:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    2e3e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2e42:	4543      	cmp	r3, r8
    2e44:	d942      	bls.n	2ecc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    2e46:	f008 0307 	and.w	r3, r8, #7
    2e4a:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    2e4c:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    2e50:	409d      	lsls	r5, r3
    2e52:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    2e54:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    2e56:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector =
    2e58:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    2e5c:	2200      	movs	r2, #0
    2e5e:	4638      	mov	r0, r7
    2e60:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    2e64:	f004 f97a 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2e68:	b1e8      	cbz	r0, 2ea6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    2e6a:	f10b 3bff 	add.w	fp, fp, #4294967295
    2e6e:	4483      	add	fp, r0
    2e70:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    2e74:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    2e78:	e00a      	b.n	2e90 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    2e7a:	454a      	cmp	r2, r9
    2e7c:	d02b      	beq.n	2ed6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2e7e:	45a0      	cmp	r8, r4
    2e80:	d010      	beq.n	2ea4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    2e82:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    2e86:	42a5      	cmp	r5, r4
    2e88:	d914      	bls.n	2eb4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    2e8a:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    2e8e:	d00c      	beq.n	2eaa <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    2e90:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    2e92:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    2e94:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    2e98:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    2e9c:	d0ed      	beq.n	2e7a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    2e9e:	45a0      	cmp	r8, r4
        endAlloc++;
    2ea0:	4626      	mov	r6, r4
        if (endAlloc == start) {
    2ea2:	d1ee      	bne.n	2e82 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    2ea4:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    2ea6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    2eaa:	4558      	cmp	r0, fp
      mask = 1;
    2eac:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    2eb0:	d1e0      	bne.n	2e74 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    2eb2:	e001      	b.n	2eb8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    2eb4:	2600      	movs	r6, #0
    2eb6:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    2eb8:	2501      	movs	r5, #1
    i = 0;
    2eba:	f04f 0b00 	mov.w	fp, #0
    2ebe:	e7cb      	b.n	2e58 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2ec0:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    2ec4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2ec8:	4543      	cmp	r3, r8
    2eca:	d8bc      	bhi.n	2e46 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    2ecc:	f04f 0800 	mov.w	r8, #0
    2ed0:	2501      	movs	r5, #1
    start = 0;
    2ed2:	46c3      	mov	fp, r8
    2ed4:	e7be      	b.n	2e54 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    2ed6:	f1ba 0f00 	cmp.w	sl, #0
    2eda:	d104      	bne.n	2ee6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    2edc:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    2ee0:	bf08      	it	eq
    2ee2:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    2ee6:	1cb0      	adds	r0, r6, #2
}
    2ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002eec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    2eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ef0:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    2ef2:	1e88      	subs	r0, r1, #2
                                  bool value) {
    2ef4:	4615      	mov	r5, r2
    2ef6:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    2ef8:	1883      	adds	r3, r0, r2
    2efa:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    2efe:	4293      	cmp	r3, r2
    2f00:	d837      	bhi.n	2f72 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    2f02:	bbce      	cbnz	r6, 2f78 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    2f04:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    2f08:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    2f0a:	bf88      	it	hi
    2f0c:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    2f10:	f000 0307 	and.w	r3, r0, #7
    2f14:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2f16:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    2f1a:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    2f1e:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2f20:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    2f24:	b2e4      	uxtb	r4, r4
    2f26:	2201      	movs	r2, #1
    2f28:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2f2a:	188f      	adds	r7, r1, r2
    2f2c:	f004 f916 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2f30:	b1f8      	cbz	r0, 2f72 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2f32:	f109 3eff 	add.w	lr, r9, #4294967295
    2f36:	4486      	add	lr, r0
    2f38:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2f3c:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    2f40:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2f44:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    2f48:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    2f4c:	bf14      	ite	ne
    2f4e:	2201      	movne	r2, #1
    2f50:	2200      	moveq	r2, #0
    2f52:	42b2      	cmp	r2, r6
    2f54:	d00d      	beq.n	2f72 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    2f56:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    2f58:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    2f5c:	d018      	beq.n	2f90 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    2f5e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2f62:	d1ed      	bne.n	2f40 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    2f64:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2f66:	46a1      	mov	r9, r4
    2f68:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    2f6c:	d1e6      	bne.n	2f3c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2f6e:	4639      	mov	r1, r7
    2f70:	e7d9      	b.n	2f26 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

fail:
  return false;
    2f72:	2000      	movs	r0, #0
}
    2f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2f78:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    2f7c:	428b      	cmp	r3, r1
    2f7e:	d9c7      	bls.n	2f10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    2f80:	4281      	cmp	r1, r0
    2f82:	d3c5      	bcc.n	2f10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2f84:	4293      	cmp	r3, r2
    2f86:	bf28      	it	cs
    2f88:	2300      	movcs	r3, #0
    2f8a:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    2f8e:	e7bf      	b.n	2f10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    2f90:	2001      	movs	r0, #1
}
    2f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f96:	bf00      	nop

00002f98 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    2f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    2f9a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2f9e:	3301      	adds	r3, #1
    2fa0:	428b      	cmp	r3, r1
    2fa2:	d201      	bcs.n	2fa8 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    2fa4:	2000      	movs	r0, #0
}
    2fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fa8:	4607      	mov	r7, r0
    2faa:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    2fac:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    2fb0:	2500      	movs	r5, #0
    2fb2:	e005      	b.n	2fc0 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    2fb4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    2fb8:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    2fba:	3301      	adds	r3, #1
    2fbc:	42a3      	cmp	r3, r4
    2fbe:	d3f1      	bcc.n	2fa4 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2fc0:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    2fc4:	2200      	movs	r2, #0
    2fc6:	4630      	mov	r0, r6
    2fc8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2fcc:	f004 f8c6 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2fd0:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    2fd2:	2800      	cmp	r0, #0
    2fd4:	d0e6      	beq.n	2fa4 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2fd6:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2fda:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    2fdc:	1c63      	adds	r3, r4, #1
    2fde:	d1e9      	bne.n	2fb4 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    2fe0:	1c68      	adds	r0, r5, #1
}
    2fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002fe4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    2fe4:	b538      	push	{r3, r4, r5, lr}
    2fe6:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    2fe8:	680b      	ldr	r3, [r1, #0]
    2fea:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    2fee:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    2ff2:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    2ff6:	3b02      	subs	r3, #2
    2ff8:	6865      	ldr	r5, [r4, #4]
    2ffa:	fa03 f30c 	lsl.w	r3, r3, ip
    2ffe:	4029      	ands	r1, r5
    3000:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    3004:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    3008:	4419      	add	r1, r3
    300a:	f004 f8a7 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    300e:	b118      	cbz	r0, 3018 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    3010:	6863      	ldr	r3, [r4, #4]
    3012:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3016:	4418      	add	r0, r3
}
    3018:	bd38      	pop	{r3, r4, r5, pc}
    301a:	bf00      	nop

0000301c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    301c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3020:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    3022:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    3026:	6849      	ldr	r1, [r1, #4]
    3028:	400b      	ands	r3, r1
  pos->position += offset;
    302a:	4411      	add	r1, r2
    302c:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    302e:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3030:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    3034:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    3038:	b2d2      	uxtb	r2, r2
    303a:	40d3      	lsrs	r3, r2
  while (tmp--) {
    303c:	b32b      	cbz	r3, 308a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    303e:	4680      	mov	r8, r0
    3040:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    3042:	f500 7904 	add.w	r9, r0, #528	; 0x210
    3046:	e005      	b.n	3054 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    3048:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    304a:	3d01      	subs	r5, #1
      pos->cluster++;
    304c:	f103 0301 	add.w	r3, r3, #1
    3050:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    3052:	d31a      	bcc.n	308a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    3054:	7a26      	ldrb	r6, [r4, #8]
    3056:	2e00      	cmp	r6, #0
    3058:	d1f6      	bne.n	3048 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    305a:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    305e:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    3060:	6827      	ldr	r7, [r4, #0]
    3062:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    3064:	3301      	adds	r3, #1
    3066:	429f      	cmp	r7, r3
    3068:	d812      	bhi.n	3090 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    306a:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    306e:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    3072:	f004 f873 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3076:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    3078:	b150      	cbz	r0, 3090 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    307a:	f3c7 0708 	ubfx	r7, r7, #0, #9
    307e:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    3080:	1c5a      	adds	r2, r3, #1
    3082:	d009      	beq.n	3098 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    3084:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    3086:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    3088:	d2e4      	bcs.n	3054 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    308a:	2001      	movs	r0, #1
}
    308c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    3090:	f04f 30ff 	mov.w	r0, #4294967295
}
    3094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    3098:	4630      	mov	r0, r6
}
    309a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    309e:	bf00      	nop

000030a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    30a0:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    30a2:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    30a6:	3301      	adds	r3, #1
    30a8:	428b      	cmp	r3, r1
    30aa:	d202      	bcs.n	30b2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    30ac:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    30b0:	bd38      	pop	{r3, r4, r5, pc}
    30b2:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    30b4:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    30b8:	4615      	mov	r5, r2
    30ba:	f500 7004 	add.w	r0, r0, #528	; 0x210
    30be:	2200      	movs	r2, #0
    30c0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    30c4:	f004 f84a 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    30c8:	2800      	cmp	r0, #0
    30ca:	d0ef      	beq.n	30ac <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    30cc:	00a4      	lsls	r4, r4, #2
    30ce:	f3c4 0408 	ubfx	r4, r4, #0, #9
    30d2:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    30d4:	1c5a      	adds	r2, r3, #1
    30d6:	d002      	beq.n	30de <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    30d8:	2001      	movs	r0, #1
  *value = next;
    30da:	602b      	str	r3, [r5, #0]
}
    30dc:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    30de:	2000      	movs	r0, #0
}
    30e0:	bd38      	pop	{r3, r4, r5, pc}
    30e2:	bf00      	nop

000030e4 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    30e4:	2901      	cmp	r1, #1
    30e6:	d91b      	bls.n	3120 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    30e8:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    30ea:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    30ee:	460c      	mov	r4, r1
    30f0:	3301      	adds	r3, #1
    30f2:	428b      	cmp	r3, r1
    30f4:	d201      	bcs.n	30fa <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
    30f6:	2000      	movs	r0, #0
}
    30f8:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    30fa:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    30fe:	4615      	mov	r5, r2
    3100:	f500 7004 	add.w	r0, r0, #528	; 0x210
    3104:	2201      	movs	r2, #1
    3106:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    310a:	f004 f827 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    310e:	4603      	mov	r3, r0
    3110:	2800      	cmp	r0, #0
    3112:	d0f0      	beq.n	30f6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    3114:	00a4      	lsls	r4, r4, #2
  return true;
    3116:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    3118:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    311c:	511d      	str	r5, [r3, r4]
}
    311e:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    3120:	2000      	movs	r0, #0
}
    3122:	4770      	bx	lr

00003124 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    3124:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    3128:	3301      	adds	r3, #1
    312a:	4299      	cmp	r1, r3
    312c:	d901      	bls.n	3132 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

fail:
  return false;
}
    312e:	2000      	movs	r0, #0
    3130:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    3132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3136:	4605      	mov	r5, r0
    3138:	b083      	sub	sp, #12
    313a:	460c      	mov	r4, r1
    313c:	f500 7904 	add.w	r9, r0, #528	; 0x210
    3140:	460f      	mov	r7, r1
    3142:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3146:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    314a:	2200      	movs	r2, #0
    314c:	4648      	mov	r0, r9
    314e:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    3152:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    3156:	f004 f801 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    315a:	b190      	cbz	r0, 3182 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    315c:	00a3      	lsls	r3, r4, #2
    315e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    3162:	58c2      	ldr	r2, [r0, r3]
    3164:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    3166:	1c53      	adds	r3, r2, #1
    3168:	bf16      	itet	ne
    316a:	4616      	movne	r6, r2
    316c:	f04f 0a00 	moveq.w	sl, #0
    3170:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3174:	2c01      	cmp	r4, #1
    3176:	d904      	bls.n	3182 <ExFatPartition::freeChain(unsigned long)+0x5e>
    3178:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    317c:	3201      	adds	r2, #1
    317e:	4294      	cmp	r4, r2
    3180:	d903      	bls.n	318a <ExFatPartition::freeChain(unsigned long)+0x66>
}
    3182:	2000      	movs	r0, #0
    3184:	b003      	add	sp, #12
    3186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    318a:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    318e:	2201      	movs	r2, #1
    3190:	4648      	mov	r0, r9
    3192:	4459      	add	r1, fp
    3194:	f003 ffe2 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    3198:	2800      	cmp	r0, #0
    319a:	d0f2      	beq.n	3182 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    319c:	9b01      	ldr	r3, [sp, #4]
    319e:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    31a2:	f1ba 0f00 	cmp.w	sl, #0
    31a6:	d012      	beq.n	31ce <ExFatPartition::freeChain(unsigned long)+0xaa>
    31a8:	3401      	adds	r4, #1
    31aa:	42b4      	cmp	r4, r6
    31ac:	d008      	beq.n	31c0 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    31ae:	2300      	movs	r3, #0
    31b0:	1be2      	subs	r2, r4, r7
    31b2:	4639      	mov	r1, r7
    31b4:	4628      	mov	r0, r5
    31b6:	f7ff fe99 	bl	2eec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    31ba:	2800      	cmp	r0, #0
    31bc:	d0e1      	beq.n	3182 <ExFatPartition::freeChain(unsigned long)+0x5e>
    31be:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    31c0:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    31c4:	3301      	adds	r3, #1
    31c6:	42b3      	cmp	r3, r6
    31c8:	d3db      	bcc.n	3182 <ExFatPartition::freeChain(unsigned long)+0x5e>
    31ca:	4634      	mov	r4, r6
    31cc:	e7bb      	b.n	3146 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    31ce:	1c62      	adds	r2, r4, #1
    31d0:	4653      	mov	r3, sl
    31d2:	4639      	mov	r1, r7
    31d4:	4628      	mov	r0, r5
    31d6:	1bd2      	subs	r2, r2, r7
}
    31d8:	b003      	add	sp, #12
    31da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    31de:	f7ff be85 	b.w	2eec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    31e2:	bf00      	nop

000031e4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    31e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    31e6:	f04f 0c00 	mov.w	ip, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    31ea:	4615      	mov	r5, r2
    m_sector = 0XFFFFFFFF;
    31ec:	f04f 32ff 	mov.w	r2, #4294967295
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    31f0:	4604      	mov	r4, r0
  m_fatType = 0;
    31f2:	f880 c444 	strb.w	ip, [r0, #1092]	; 0x444
  m_blockDev = dev;
    31f6:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    31fa:	6041      	str	r1, [r0, #4]
    31fc:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    m_status = 0;
    3200:	f880 c000 	strb.w	ip, [r0]
    3204:	f880 c210 	strb.w	ip, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    3208:	6082      	str	r2, [r0, #8]
    320a:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
  if (part) {
    320e:	b1e5      	cbz	r5, 324a <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    3210:	2d04      	cmp	r5, #4
    3212:	d901      	bls.n	3218 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    3214:	2000      	movs	r0, #0
}
    3216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3218:	f500 7704 	add.w	r7, r0, #528	; 0x210
    321c:	4662      	mov	r2, ip
    321e:	4661      	mov	r1, ip
    3220:	4638      	mov	r0, r7
    3222:	f003 ff9b 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    3226:	2800      	cmp	r0, #0
    3228:	d0f4      	beq.n	3214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    MbrPart_t* mp = mbr->part + part - 1;
    322a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    322e:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    3232:	442b      	add	r3, r5
    3234:	0119      	lsls	r1, r3, #4
    3236:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    323a:	791a      	ldrb	r2, [r3, #4]
    323c:	2a00      	cmp	r2, #0
    323e:	d0e9      	beq.n	3214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    3240:	5c42      	ldrb	r2, [r0, r1]
    3242:	0652      	lsls	r2, r2, #25
    3244:	d1e6      	bne.n	3214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  return *reinterpret_cast<const uint32_t*>(src);
    3246:	689e      	ldr	r6, [r3, #8]
    3248:	e002      	b.n	3250 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    324a:	461e      	mov	r6, r3
    324c:	f500 7704 	add.w	r7, r0, #528	; 0x210
    3250:	2200      	movs	r2, #0
    3252:	4631      	mov	r1, r6
    3254:	4638      	mov	r0, r7
    3256:	f003 ff81 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    325a:	4605      	mov	r5, r0
    325c:	2800      	cmp	r0, #0
    325e:	d0d9      	beq.n	3214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    3260:	2205      	movs	r2, #5
    3262:	491a      	ldr	r1, [pc, #104]	; (32cc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe8>)
    3264:	3003      	adds	r0, #3
    3266:	f008 fc23 	bl	bab0 <strncmp>
    326a:	2800      	cmp	r0, #0
    326c:	d1d2      	bne.n	3214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    326e:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    3272:	2b09      	cmp	r3, #9
    3274:	d1ce      	bne.n	3214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3276:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  bitmapFind(0, 1);
    3278:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    327a:	4433      	add	r3, r6
    327c:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    3280:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    3282:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3286:	6dab      	ldr	r3, [r5, #88]	; 0x58
    3288:	4433      	add	r3, r6
    328a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    328e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    3290:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    3294:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3296:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    329a:	f895 206d 	ldrb.w	r2, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    329e:	2501      	movs	r5, #1
  m_bitmapStart = 0;
    32a0:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    32a4:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    32a6:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    32aa:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    32ae:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    32b2:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    32b4:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    32b8:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    32bc:	462a      	mov	r2, r5
    32be:	f7ff fdb5 	bl	2e2c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    32c2:	2340      	movs	r3, #64	; 0x40
  return true;
    32c4:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    32c6:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    32ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32cc:	20000580 	.word	0x20000580

000032d0 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    32d0:	b510      	push	{r4, lr}
    32d2:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    32d4:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    32d8:	f7ff fe5e 	bl	2f98 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    32dc:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    32e0:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    32e2:	b2db      	uxtb	r3, r3
}
    32e4:	4098      	lsls	r0, r3
    32e6:	bd10      	pop	{r4, pc}

000032e8 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    32e8:	b570      	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    32ea:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    32ee:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    32f0:	2300      	movs	r3, #0
    32f2:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    32f4:	4668      	mov	r0, sp
    32f6:	4621      	mov	r1, r4
    32f8:	930c      	str	r3, [sp, #48]	; 0x30
    32fa:	f7ff f8f7 	bl	24ec <ExFatFile::open(ExFatFile*, char const*, int)>
    32fe:	4605      	mov	r5, r0
    3300:	b1d8      	cbz	r0, 333a <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    3302:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3306:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    330a:	d019      	beq.n	3340 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    330c:	46ee      	mov	lr, sp
    330e:	46a4      	mov	ip, r4
    3310:	ae0c      	add	r6, sp, #48	; 0x30
    3312:	4674      	mov	r4, lr
    3314:	f10c 0c10 	add.w	ip, ip, #16
    3318:	f10e 0e10 	add.w	lr, lr, #16
    331c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    331e:	42b4      	cmp	r4, r6
    3320:	f84c 0c10 	str.w	r0, [ip, #-16]
    3324:	f84c 1c0c 	str.w	r1, [ip, #-12]
    3328:	f84c 2c08 	str.w	r2, [ip, #-8]
    332c:	f84c 3c04 	str.w	r3, [ip, #-4]
    3330:	d1ef      	bne.n	3312 <ExFatVolume::chdir(char const*)+0x2a>
    3332:	f8de 0000 	ldr.w	r0, [lr]
    3336:	f8cc 0000 	str.w	r0, [ip]
  return true;

fail:
  return false;
}
    333a:	4628      	mov	r0, r5
    333c:	b00e      	add	sp, #56	; 0x38
    333e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    3340:	461d      	mov	r5, r3
}
    3342:	4628      	mov	r0, r5
    3344:	b00e      	add	sp, #56	; 0x38
    3346:	bd70      	pop	{r4, r5, r6, pc}

00003348 <FatFile::sync() [clone .part.0]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    3348:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    334a:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    334e:	b082      	sub	sp, #8
    3350:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    3352:	2b00      	cmp	r3, #0
    3354:	db0d      	blt.n	3372 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    3356:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3358:	f105 0024 	add.w	r0, r5, #36	; 0x24
    335c:	f003 fed2 	bl	7104 <FsCache::sync()>
    3360:	2800      	cmp	r0, #0
    3362:	d13f      	bne.n	33e4 <FatFile::sync() [clone .part.0]+0x9c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    3364:	7863      	ldrb	r3, [r4, #1]
  return false;
    3366:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3368:	f043 0301 	orr.w	r3, r3, #1
    336c:	7063      	strb	r3, [r4, #1]
}
    336e:	b002      	add	sp, #8
    3370:	bd70      	pop	{r4, r5, r6, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    3372:	6880      	ldr	r0, [r0, #8]
    3374:	2201      	movs	r2, #1
    3376:	69a1      	ldr	r1, [r4, #24]
    3378:	3024      	adds	r0, #36	; 0x24
    337a:	f003 feef 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    337e:	2800      	cmp	r0, #0
    3380:	d0f0      	beq.n	3364 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    3382:	88a5      	ldrh	r5, [r4, #4]
    3384:	f005 050f 	and.w	r5, r5, #15
    3388:	016b      	lsls	r3, r5, #5
    338a:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    338e:	5cc3      	ldrb	r3, [r0, r3]
    3390:	2be5      	cmp	r3, #229	; 0xe5
    3392:	d0e7      	beq.n	3364 <FatFile::sync() [clone .part.0]+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    3394:	7823      	ldrb	r3, [r4, #0]
    3396:	f003 0337 	and.w	r3, r3, #55	; 0x37
    339a:	72eb      	strb	r3, [r5, #11]
    if (isFile()) {
    339c:	7823      	ldrb	r3, [r4, #0]
    339e:	071b      	lsls	r3, r3, #28
    33a0:	d501      	bpl.n	33a6 <FatFile::sync() [clone .part.0]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    33a2:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    33a4:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    33a6:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    33a8:	4915      	ldr	r1, [pc, #84]	; (3400 <FatFile::sync() [clone .part.0]+0xb8>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    33aa:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    33ac:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    33ae:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    33b0:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    33b2:	b166      	cbz	r6, 33ce <FatFile::sync() [clone .part.0]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    33b4:	f10d 0203 	add.w	r2, sp, #3
    33b8:	f10d 0106 	add.w	r1, sp, #6
    33bc:	a801      	add	r0, sp, #4
    33be:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    33c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    33c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    33c8:	832b      	strh	r3, [r5, #24]
    33ca:	826b      	strh	r3, [r5, #18]
    33cc:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    33ce:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    33d0:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    33d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    33d6:	f105 0024 	add.w	r0, r5, #36	; 0x24
    33da:	70a3      	strb	r3, [r4, #2]
    33dc:	f003 fe92 	bl	7104 <FsCache::sync()>
    33e0:	2800      	cmp	r0, #0
    33e2:	d0bf      	beq.n	3364 <FatFile::sync() [clone .part.0]+0x1c>
    33e4:	f505 700d 	add.w	r0, r5, #564	; 0x234
    33e8:	f003 fe8c 	bl	7104 <FsCache::sync()>
    33ec:	2800      	cmp	r0, #0
    33ee:	d0b9      	beq.n	3364 <FatFile::sync() [clone .part.0]+0x1c>
    33f0:	6828      	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    33f2:	6803      	ldr	r3, [r0, #0]
    33f4:	69db      	ldr	r3, [r3, #28]
    33f6:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    33f8:	2800      	cmp	r0, #0
    33fa:	d0b3      	beq.n	3364 <FatFile::sync() [clone .part.0]+0x1c>
    33fc:	e7b7      	b.n	336e <FatFile::sync() [clone .part.0]+0x26>
    33fe:	bf00      	nop
    3400:	2002a86c 	.word	0x2002a86c

00003404 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    3404:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    3406:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    3408:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    340c:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    340e:	6880      	ldr	r0, [r0, #8]
    3410:	4629      	mov	r1, r5
    3412:	f001 f941 	bl	4698 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    3416:	b150      	cbz	r0, 342e <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    3418:	b155      	cbz	r5, 3430 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    341a:	6923      	ldr	r3, [r4, #16]
    341c:	3501      	adds	r5, #1
    341e:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    3420:	78a3      	ldrb	r3, [r4, #2]
    3422:	bf18      	it	ne
    3424:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    3428:	f063 037f 	orn	r3, r3, #127	; 0x7f
    342c:	70a3      	strb	r3, [r4, #2]
}
    342e:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    3430:	78a3      	ldrb	r3, [r4, #2]
    3432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3436:	e7f7      	b.n	3428 <FatFile::addCluster()+0x24>

00003438 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    3438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    343a:	7804      	ldrb	r4, [r0, #0]
    343c:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    3440:	d104      	bne.n	344c <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL * 4095) {
    3442:	4b1a      	ldr	r3, [pc, #104]	; (34ac <FatFile::addDirCluster()+0x74>)
    3444:	4605      	mov	r5, r0
    3446:	6942      	ldr	r2, [r0, #20]
    3448:	429a      	cmp	r2, r3
    344a:	d302      	bcc.n	3452 <FatFile::addDirCluster()+0x1a>
  return false;
    344c:	2700      	movs	r7, #0
}
    344e:	4638      	mov	r0, r7
    3450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    3452:	f7ff ffd7 	bl	3404 <FatFile::addCluster()>
    3456:	4607      	mov	r7, r0
    3458:	2800      	cmp	r0, #0
    345a:	d0f7      	beq.n	344c <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    345c:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    345e:	692e      	ldr	r6, [r5, #16]
    3460:	7982      	ldrb	r2, [r0, #6]
    3462:	3e02      	subs	r6, #2
    3464:	6941      	ldr	r1, [r0, #20]
    3466:	4096      	lsls	r6, r2
    3468:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    346a:	7901      	ldrb	r1, [r0, #4]
    346c:	b1a9      	cbz	r1, 349a <FatFile::addDirCluster()+0x62>
    346e:	4621      	mov	r1, r4
    3470:	e006      	b.n	3480 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    3472:	f008 facb 	bl	ba0c <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    3476:	68a8      	ldr	r0, [r5, #8]
    3478:	b2e1      	uxtb	r1, r4
    347a:	7902      	ldrb	r2, [r0, #4]
    347c:	428a      	cmp	r2, r1
    347e:	d90b      	bls.n	3498 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    3480:	4431      	add	r1, r6
    3482:	2205      	movs	r2, #5
    3484:	3024      	adds	r0, #36	; 0x24
    3486:	3401      	adds	r4, #1
    3488:	f003 fe68 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    348c:	f44f 7200 	mov.w	r2, #512	; 0x200
    3490:	2100      	movs	r1, #0
    if (!pc) {
    3492:	2800      	cmp	r0, #0
    3494:	d1ed      	bne.n	3472 <FatFile::addDirCluster()+0x3a>
    3496:	e7d9      	b.n	344c <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    3498:	7982      	ldrb	r2, [r0, #6]
    349a:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    349e:	6969      	ldr	r1, [r5, #20]
}
    34a0:	4638      	mov	r0, r7
    34a2:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    34a4:	fa11 f383 	uxtah	r3, r1, r3
    34a8:	616b      	str	r3, [r5, #20]
}
    34aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34ac:	001ffe00 	.word	0x001ffe00

000034b0 <FatFile::close()>:
bool FatFile::close() {
    34b0:	b510      	push	{r4, lr}
  if (!isOpen()) {
    34b2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    34b4:	4604      	mov	r4, r0
  if (!isOpen()) {
    34b6:	b12b      	cbz	r3, 34c4 <FatFile::close()+0x14>
    34b8:	f7ff ff46 	bl	3348 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    34bc:	2300      	movs	r3, #0
    34be:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    34c0:	70a3      	strb	r3, [r4, #2]
}
    34c2:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    34c4:	2300      	movs	r3, #0
    return true;
    34c6:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    34c8:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    34ca:	70a3      	strb	r3, [r4, #2]
}
    34cc:	bd10      	pop	{r4, pc}
    34ce:	bf00      	nop

000034d0 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    34d0:	780b      	ldrb	r3, [r1, #0]
    34d2:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    34d6:	d101      	bne.n	34dc <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    34d8:	2000      	movs	r0, #0
    34da:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    34dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    34de:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    34e2:	b089      	sub	sp, #36	; 0x24
    34e4:	460d      	mov	r5, r1
    34e6:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    34e8:	f000 fe70 	bl	41cc <FatFile::open(FatFile*, FatLfn_t*, int)>
    34ec:	b138      	cbz	r0, 34fe <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    34ee:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    34f0:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    34f2:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    34f4:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    34f6:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    34f8:	f7ff ff9e 	bl	3438 <FatFile::addDirCluster()>
    34fc:	b910      	cbnz	r0, 3504 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    34fe:	2000      	movs	r0, #0
    3500:	b009      	add	sp, #36	; 0x24
    3502:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    3504:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    3506:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    3508:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    350a:	b16b      	cbz	r3, 3528 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    350c:	6963      	ldr	r3, [r4, #20]
    350e:	b133      	cbz	r3, 351e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3510:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    3512:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3514:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    3518:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    351c:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    351e:	4620      	mov	r0, r4
    3520:	f7ff ff12 	bl	3348 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    3524:	2800      	cmp	r0, #0
    3526:	d0ea      	beq.n	34fe <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    return m_cache.prepare(sector, options);
    3528:	68a0      	ldr	r0, [r4, #8]
    352a:	2201      	movs	r2, #1
    352c:	69a1      	ldr	r1, [r4, #24]
    352e:	3024      	adds	r0, #36	; 0x24
    3530:	f003 fe14 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3534:	2800      	cmp	r0, #0
    3536:	d0e2      	beq.n	34fe <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    3538:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FS_ATTRIB_DIRECTORY;
    353c:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    353e:	f00c 0c0f 	and.w	ip, ip, #15
    3542:	ea4f 134c 	mov.w	r3, ip, lsl #5
    3546:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FS_ATTRIB_DIRECTORY;
    354a:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    354e:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    3550:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3552:	6a23      	ldr	r3, [r4, #32]
    3554:	f897 e006 	ldrb.w	lr, [r7, #6]
    3558:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    355a:	f8dc 1004 	ldr.w	r1, [ip, #4]
    355e:	f8dc 2008 	ldr.w	r2, [ip, #8]
    3562:	f8dc 300c 	ldr.w	r3, [ip, #12]
    3566:	fa06 f60e 	lsl.w	r6, r6, lr
    356a:	46ee      	mov	lr, sp
    356c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3570:	f8dc 0010 	ldr.w	r0, [ip, #16]
    3574:	f8dc 1014 	ldr.w	r1, [ip, #20]
    3578:	f8dc 2018 	ldr.w	r2, [ip, #24]
    357c:	f8dc 301c 	ldr.w	r3, [ip, #28]
    3580:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    3584:	697b      	ldr	r3, [r7, #20]
    3586:	f107 0024 	add.w	r0, r7, #36	; 0x24
    358a:	2201      	movs	r2, #1
    358c:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    358e:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    3592:	f8cd 3001 	str.w	r3, [sp, #1]
    3596:	f8cd 3005 	str.w	r3, [sp, #5]
    359a:	f8ad 3009 	strh.w	r3, [sp, #9]
    359e:	f003 fddd 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    35a2:	4684      	mov	ip, r0
    35a4:	2800      	cmp	r0, #0
    35a6:	d0aa      	beq.n	34fe <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    35a8:	272e      	movs	r7, #46	; 0x2e
    35aa:	46ee      	mov	lr, sp
    35ac:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    35b0:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    35b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    35b6:	f8cc 0000 	str.w	r0, [ip]
    35ba:	f8cc 1004 	str.w	r1, [ip, #4]
    35be:	f8cc 2008 	str.w	r2, [ip, #8]
    35c2:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    35c6:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    35ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    35ce:	f8cc 0010 	str.w	r0, [ip, #16]
    35d2:	f8cc 1014 	str.w	r1, [ip, #20]
    35d6:	f8cc 2018 	str.w	r2, [ip, #24]
    35da:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    35de:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    35e0:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    35e2:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    35e6:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    35ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    35ec:	f8cc 0020 	str.w	r0, [ip, #32]
    35f0:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    35f4:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    35f8:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    35fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    35fe:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    3602:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    3606:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    360a:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    360e:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3610:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3614:	f003 fd76 	bl	7104 <FsCache::sync()>
    3618:	2800      	cmp	r0, #0
    361a:	f43f af70 	beq.w	34fe <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    361e:	f504 700d 	add.w	r0, r4, #564	; 0x234
    3622:	f003 fd6f 	bl	7104 <FsCache::sync()>
    3626:	2800      	cmp	r0, #0
    3628:	f43f af69 	beq.w	34fe <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    362c:	6820      	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    362e:	6803      	ldr	r3, [r0, #0]
    3630:	69db      	ldr	r3, [r3, #28]
}
    3632:	b009      	add	sp, #36	; 0x24
    3634:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3638:	4718      	bx	r3
    363a:	bf00      	nop

0000363c <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    363c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3640:	2600      	movs	r6, #0
    3642:	b094      	sub	sp, #80	; 0x50
    3644:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    3646:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    3648:	9201      	str	r2, [sp, #4]
    364a:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    364c:	2b00      	cmp	r3, #0
    364e:	d141      	bne.n	36d4 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    3650:	780b      	ldrb	r3, [r1, #0]
    3652:	460d      	mov	r5, r1
    3654:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    3658:	d03c      	beq.n	36d4 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
  if (isDirSeparator(*path)) {
    365a:	7813      	ldrb	r3, [r2, #0]
    365c:	4604      	mov	r4, r0
    365e:	4616      	mov	r6, r2
    3660:	2b2f      	cmp	r3, #47	; 0x2f
    3662:	d03b      	beq.n	36dc <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!open(parent, &fname, O_RDONLY)) {
    3664:	2700      	movs	r7, #0
    3666:	e028      	b.n	36ba <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
    if (!*path) {
    3668:	9e01      	ldr	r6, [sp, #4]
    366a:	7836      	ldrb	r6, [r6, #0]
    366c:	2e00      	cmp	r6, #0
    366e:	d04e      	beq.n	370e <FatFile::mkdir(FatFile*, char const*, bool)+0xd2>
    if (!open(parent, &fname, O_RDONLY)) {
    3670:	f000 fdac 	bl	41cc <FatFile::open(FatFile*, FatLfn_t*, int)>
    3674:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    3676:	aa03      	add	r2, sp, #12
    3678:	4629      	mov	r1, r5
    367a:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    367c:	b92b      	cbnz	r3, 368a <FatFile::mkdir(FatFile*, char const*, bool)+0x4e>
      if (!pFlag || !mkdir(parent, &fname)) {
    367e:	f1b8 0f00 	cmp.w	r8, #0
    3682:	d027      	beq.n	36d4 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    3684:	f7ff ff24 	bl	34d0 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    3688:	b320      	cbz	r0, 36d4 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    tmpDir = *this;
    368a:	46a6      	mov	lr, r4
    368c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    3690:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3694:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3698:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    369c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    36a0:	f8de 5000 	ldr.w	r5, [lr]
    36a4:	4620      	mov	r0, r4
  if (!isOpen()) {
    36a6:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    36a8:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    36ac:	b10b      	cbz	r3, 36b2 <FatFile::mkdir(FatFile*, char const*, bool)+0x76>
    36ae:	f7ff fe4b 	bl	3348 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    36b2:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    36b4:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    36b6:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    36b8:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    36ba:	4631      	mov	r1, r6
    36bc:	ab01      	add	r3, sp, #4
    36be:	aa03      	add	r2, sp, #12
    36c0:	4620      	mov	r0, r4
    36c2:	f000 fed3 	bl	446c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    36c6:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    36c8:	aa03      	add	r2, sp, #12
    36ca:	4629      	mov	r1, r5
    36cc:	2300      	movs	r3, #0
    36ce:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    36d0:	2e00      	cmp	r6, #0
    36d2:	d1c9      	bne.n	3668 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  switch (vol->fatType()) {
    36d4:	2000      	movs	r0, #0
}
    36d6:	b014      	add	sp, #80	; 0x50
    36d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    36dc:	3601      	adds	r6, #1
    36de:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    36e0:	7833      	ldrb	r3, [r6, #0]
    36e2:	2b2f      	cmp	r3, #47	; 0x2f
    36e4:	d0fa      	beq.n	36dc <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!tmpDir.openRoot(parent->m_vol)) {
    36e6:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    36e8:	2224      	movs	r2, #36	; 0x24
    36ea:	2100      	movs	r1, #0
    36ec:	a80b      	add	r0, sp, #44	; 0x2c
    36ee:	f008 f98d 	bl	ba0c <memset>
  m_vol = vol;
    36f2:	950d      	str	r5, [sp, #52]	; 0x34
  uint8_t fatType() const { return m_fatType; }
    36f4:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    36f6:	2b10      	cmp	r3, #16
    36f8:	d00f      	beq.n	371a <FatFile::mkdir(FatFile*, char const*, bool)+0xde>
    36fa:	2b20      	cmp	r3, #32
    36fc:	d1ea      	bne.n	36d4 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    36fe:	2380      	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    3700:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    3704:	2301      	movs	r3, #1
    parent = &tmpDir;
    3706:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    3708:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    370c:	e7aa      	b.n	3664 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
  return mkdir(parent, &fname);
    370e:	aa03      	add	r2, sp, #12
    3710:	f7ff fede 	bl	34d0 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    3714:	b014      	add	sp, #80	; 0x50
    3716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    371a:	2340      	movs	r3, #64	; 0x40
    371c:	e7f0      	b.n	3700 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    371e:	bf00      	nop

00003720 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    3720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3724:	2500      	movs	r5, #0
    3726:	b094      	sub	sp, #80	; 0x50
    3728:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    372a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    372c:	9201      	str	r2, [sp, #4]
    372e:	950b      	str	r5, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
    3730:	2b00      	cmp	r3, #0
    3732:	d137      	bne.n	37a4 <FatFile::open(FatFile*, char const*, int)+0x84>
    3734:	780b      	ldrb	r3, [r1, #0]
    3736:	460e      	mov	r6, r1
    3738:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    373c:	d032      	beq.n	37a4 <FatFile::open(FatFile*, char const*, int)+0x84>
  if (isDirSeparator(*path)) {
    373e:	7813      	ldrb	r3, [r2, #0]
    3740:	4604      	mov	r4, r0
    3742:	4615      	mov	r5, r2
    3744:	2b2f      	cmp	r3, #47	; 0x2f
    3746:	d031      	beq.n	37ac <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
    3748:	2700      	movs	r7, #0
    374a:	e01e      	b.n	378a <FatFile::open(FatFile*, char const*, int)+0x6a>
    if (*path == 0) {
    374c:	9d01      	ldr	r5, [sp, #4]
    374e:	782d      	ldrb	r5, [r5, #0]
    3750:	2d00      	cmp	r5, #0
    3752:	d042      	beq.n	37da <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    3754:	f000 fd3a 	bl	41cc <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    3758:	46a6      	mov	lr, r4
    375a:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    if (!open(dirFile, &fname, O_RDONLY)) {
    375e:	b308      	cbz	r0, 37a4 <FatFile::open(FatFile*, char const*, int)+0x84>
    dirFile = &tmpDir;
    3760:	4666      	mov	r6, ip
  if (!isOpen()) {
    3762:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    3764:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3768:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    376c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3770:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3774:	f8de 3000 	ldr.w	r3, [lr]
    3778:	4620      	mov	r0, r4
    377a:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    377e:	b10d      	cbz	r5, 3784 <FatFile::open(FatFile*, char const*, int)+0x64>
    3780:	f7ff fde2 	bl	3348 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    3784:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    3786:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    3788:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    378a:	4629      	mov	r1, r5
    378c:	ab01      	add	r3, sp, #4
    378e:	aa03      	add	r2, sp, #12
    3790:	4620      	mov	r0, r4
    3792:	f000 fe6b 	bl	446c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    3796:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    3798:	aa03      	add	r2, sp, #12
    379a:	4631      	mov	r1, r6
    379c:	2300      	movs	r3, #0
    379e:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    37a0:	2d00      	cmp	r5, #0
    37a2:	d1d3      	bne.n	374c <FatFile::open(FatFile*, char const*, int)+0x2c>
  return false;
    37a4:	2000      	movs	r0, #0
}
    37a6:	b014      	add	sp, #80	; 0x50
    37a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    37ac:	3501      	adds	r5, #1
    37ae:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    37b0:	7829      	ldrb	r1, [r5, #0]
    37b2:	292f      	cmp	r1, #47	; 0x2f
    37b4:	d0fa      	beq.n	37ac <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (*path == 0) {
    37b6:	b9b9      	cbnz	r1, 37e8 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    37b8:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    37ba:	2224      	movs	r2, #36	; 0x24
    37bc:	4620      	mov	r0, r4
    37be:	f008 f925 	bl	ba0c <memset>
  m_vol = vol;
    37c2:	60a5      	str	r5, [r4, #8]
    37c4:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    37c6:	2b10      	cmp	r3, #16
    37c8:	d024      	beq.n	3814 <FatFile::open(FatFile*, char const*, int)+0xf4>
    37ca:	2b20      	cmp	r3, #32
    37cc:	d1ea      	bne.n	37a4 <FatFile::open(FatFile*, char const*, int)+0x84>
    37ce:	2280      	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    37d0:	2301      	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    37d2:	7022      	strb	r2, [r4, #0]
  return true;
    37d4:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    37d6:	70a3      	strb	r3, [r4, #2]
  return true;
    37d8:	e7e5      	b.n	37a6 <FatFile::open(FatFile*, char const*, int)+0x86>
  return open(dirFile, &fname, oflag);
    37da:	4643      	mov	r3, r8
    37dc:	aa03      	add	r2, sp, #12
    37de:	f000 fcf5 	bl	41cc <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    37e2:	b014      	add	sp, #80	; 0x50
    37e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    37e8:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    37ea:	2224      	movs	r2, #36	; 0x24
    37ec:	2100      	movs	r1, #0
    37ee:	a80b      	add	r0, sp, #44	; 0x2c
    37f0:	f008 f90c 	bl	ba0c <memset>
  m_vol = vol;
    37f4:	960d      	str	r6, [sp, #52]	; 0x34
    37f6:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    37f8:	2b10      	cmp	r3, #16
    37fa:	d009      	beq.n	3810 <FatFile::open(FatFile*, char const*, int)+0xf0>
    37fc:	2b20      	cmp	r3, #32
    37fe:	d1d1      	bne.n	37a4 <FatFile::open(FatFile*, char const*, int)+0x84>
    3800:	2380      	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    3802:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    3806:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    3808:	ae0b      	add	r6, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    380a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    380e:	e79b      	b.n	3748 <FatFile::open(FatFile*, char const*, int)+0x28>
  switch (vol->fatType()) {
    3810:	2340      	movs	r3, #64	; 0x40
    3812:	e7f6      	b.n	3802 <FatFile::open(FatFile*, char const*, int)+0xe2>
    3814:	2240      	movs	r2, #64	; 0x40
    3816:	e7db      	b.n	37d0 <FatFile::open(FatFile*, char const*, int)+0xb0>

00003818 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    3818:	b119      	cbz	r1, 3822 <FatFile::open(FatVolume*, char const*, int)+0xa>
    381a:	f201 4144 	addw	r1, r1, #1092	; 0x444
    381e:	f7ff bf7f 	b.w	3720 <FatFile::open(FatFile*, char const*, int)>
}
    3822:	4608      	mov	r0, r1
    3824:	4770      	bx	lr
    3826:	bf00      	nop

00003828 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    3828:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    382a:	7805      	ldrb	r5, [r0, #0]
    382c:	b10d      	cbz	r5, 3832 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    382e:	2000      	movs	r0, #0
}
    3830:	bd70      	pop	{r4, r5, r6, pc}
    3832:	460e      	mov	r6, r1
    3834:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    3836:	2224      	movs	r2, #36	; 0x24
    3838:	4629      	mov	r1, r5
    383a:	f008 f8e7 	bl	ba0c <memset>
  m_vol = vol;
    383e:	60a6      	str	r6, [r4, #8]
    3840:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    3842:	2b10      	cmp	r3, #16
    3844:	d009      	beq.n	385a <FatFile::openRoot(FatVolume*)+0x32>
    3846:	2b20      	cmp	r3, #32
    3848:	d105      	bne.n	3856 <FatFile::openRoot(FatVolume*)+0x2e>
    384a:	2280      	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    384c:	2301      	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    384e:	7022      	strb	r2, [r4, #0]
  return true;
    3850:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    3852:	70a3      	strb	r3, [r4, #2]
}
    3854:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    3856:	4628      	mov	r0, r5
}
    3858:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    385a:	2240      	movs	r2, #64	; 0x40
    385c:	e7f6      	b.n	384c <FatFile::openRoot(FatVolume*)+0x24>
    385e:	bf00      	nop

00003860 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    3860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3864:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const { return m_lfnOrd; }
  /** \return True if this is an open file/directory. */
  bool isOpen() const { return m_attributes; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    3868:	7883      	ldrb	r3, [r0, #2]
    386a:	b083      	sub	sp, #12
    386c:	4605      	mov	r5, r0
  if (!isReadable()) {
    386e:	07df      	lsls	r7, r3, #31
    3870:	f140 808c 	bpl.w	398c <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
    3874:	4688      	mov	r8, r1
    3876:	7801      	ldrb	r1, [r0, #0]
    3878:	4692      	mov	sl, r2
  if (isFile()) {
    387a:	070e      	lsls	r6, r1, #28
    387c:	f100 8091 	bmi.w	39a2 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    3880:	064c      	lsls	r4, r1, #25
    3882:	d508      	bpl.n	3896 <FatFile::read(void*, unsigned int)+0x36>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    3884:	6883      	ldr	r3, [r0, #8]
    3886:	891a      	ldrh	r2, [r3, #8]
    3888:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    388a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    388e:	b29b      	uxth	r3, r3
    3890:	459a      	cmp	sl, r3
    3892:	bf28      	it	cs
    3894:	469a      	movcs	sl, r3
  while (toRead) {
    3896:	f1ba 0f00 	cmp.w	sl, #0
    389a:	f000 80af 	beq.w	39fc <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    389e:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    38a0:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    38a4:	0648      	lsls	r0, r1, #25
    uint32_t tmp32 = m_fileSize - m_curPosition;
    38a6:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    38a8:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    38ac:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    38b0:	68af      	ldr	r7, [r5, #8]
    38b2:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    38b6:	d53d      	bpl.n	3934 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart() +
    38b8:	6a39      	ldr	r1, [r7, #32]
    38ba:	eb01 2152 	add.w	r1, r1, r2, lsr #9
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    38be:	f1bb 0f00 	cmp.w	fp, #0
    38c2:	d151      	bne.n	3968 <FatFile::read(void*, unsigned int)+0x108>
    38c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    38c8:	d34e      	bcc.n	3968 <FatFile::read(void*, unsigned int)+0x108>
  uint32_t sector() { return m_sector; }
    38ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    38cc:	4291      	cmp	r1, r2
    38ce:	d04b      	beq.n	3968 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    38d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    38d4:	f0c0 8082 	bcc.w	39dc <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    38d8:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    38da:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    38dc:	0640      	lsls	r0, r0, #25
    38de:	d405      	bmi.n	38ec <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    38e0:	7938      	ldrb	r0, [r7, #4]
    38e2:	eba0 0009 	sub.w	r0, r0, r9
    38e6:	4283      	cmp	r3, r0
    38e8:	bf28      	it	cs
    38ea:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    38ec:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    38ee:	ea4f 2443 	mov.w	r4, r3, lsl #9
    38f2:	d80c      	bhi.n	390e <FatFile::read(void*, unsigned int)+0xae>
    38f4:	18c8      	adds	r0, r1, r3
    38f6:	4282      	cmp	r2, r0
    38f8:	d209      	bcs.n	390e <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    38fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
    38fe:	e9cd 1300 	strd	r1, r3, [sp]
    3902:	f003 fbff 	bl	7104 <FsCache::sync()>
    3906:	e9dd 1300 	ldrd	r1, r3, [sp]
    390a:	2800      	cmp	r0, #0
    390c:	d03e      	beq.n	398c <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    390e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3910:	6802      	ldr	r2, [r0, #0]
    3912:	6957      	ldr	r7, [r2, #20]
    3914:	4642      	mov	r2, r8
    3916:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3918:	2800      	cmp	r0, #0
    391a:	d037      	beq.n	398c <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    391c:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    391e:	1b36      	subs	r6, r6, r4
    dst += n;
    3920:	44a0      	add	r8, r4
    m_curPosition += n;
    3922:	4422      	add	r2, r4
    3924:	616a      	str	r2, [r5, #20]
  while (toRead) {
    3926:	d069      	beq.n	39fc <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const { return m_attributes & FILE_ATTR_ROOT32; }
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
    3928:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    392a:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    392e:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    3930:	0648      	lsls	r0, r1, #25
    3932:	d4c1      	bmi.n	38b8 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    3934:	f897 9005 	ldrb.w	r9, [r7, #5]
    3938:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    393c:	f1bb 0f00 	cmp.w	fp, #0
    3940:	d136      	bne.n	39b0 <FatFile::read(void*, unsigned int)+0x150>
    3942:	f1b9 0f00 	cmp.w	r9, #0
    3946:	d133      	bne.n	39b0 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    3948:	2a00      	cmp	r2, #0
    394a:	d133      	bne.n	39b4 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    394c:	060a      	lsls	r2, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    394e:	bf4c      	ite	mi
    3950:	6a3a      	ldrmi	r2, [r7, #32]
    3952:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    3954:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3956:	3a02      	subs	r2, #2
    3958:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    395a:	6979      	ldr	r1, [r7, #20]
    395c:	4082      	lsls	r2, r0
    395e:	4449      	add	r1, r9
    3960:	4411      	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    3962:	f1bb 0f00 	cmp.w	fp, #0
    3966:	d0ad      	beq.n	38c4 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    3968:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    396c:	2200      	movs	r2, #0
    396e:	f107 0024 	add.w	r0, r7, #36	; 0x24
    3972:	42b4      	cmp	r4, r6
    3974:	bf28      	it	cs
    3976:	4634      	movcs	r4, r6
    3978:	f003 fbf0 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    397c:	b130      	cbz	r0, 398c <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    397e:	eb00 010b 	add.w	r1, r0, fp
    3982:	4622      	mov	r2, r4
    3984:	4640      	mov	r0, r8
    3986:	f004 fb75 	bl	8074 <memcpy>
    398a:	e7c7      	b.n	391c <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    398c:	786b      	ldrb	r3, [r5, #1]
  return -1;
    398e:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    3992:	f043 0302 	orr.w	r3, r3, #2
    3996:	706b      	strb	r3, [r5, #1]
}
    3998:	b003      	add	sp, #12
    399a:	ecbd 8b02 	vpop	{d8}
    399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    39a2:	69c3      	ldr	r3, [r0, #28]
    39a4:	6942      	ldr	r2, [r0, #20]
    39a6:	1a9b      	subs	r3, r3, r2
    39a8:	459a      	cmp	sl, r3
    39aa:	bf28      	it	cs
    39ac:	469a      	movcs	sl, r3
    39ae:	e772      	b.n	3896 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    39b0:	692a      	ldr	r2, [r5, #16]
    39b2:	e7d0      	b.n	3956 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    39b4:	070b      	lsls	r3, r1, #28
    39b6:	d505      	bpl.n	39c4 <FatFile::read(void*, unsigned int)+0x164>
    39b8:	78aa      	ldrb	r2, [r5, #2]
    39ba:	0654      	lsls	r4, r2, #25
    39bc:	d502      	bpl.n	39c4 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    39be:	692a      	ldr	r2, [r5, #16]
    39c0:	3201      	adds	r2, #1
    39c2:	e7c7      	b.n	3954 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    39c4:	ee18 2a10 	vmov	r2, s16
    39c8:	4638      	mov	r0, r7
    39ca:	6929      	ldr	r1, [r5, #16]
    39cc:	f000 fe1e 	bl	460c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    39d0:	2800      	cmp	r0, #0
    39d2:	dbdb      	blt.n	398c <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    39d4:	d00c      	beq.n	39f0 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    39d6:	68af      	ldr	r7, [r5, #8]
    39d8:	692a      	ldr	r2, [r5, #16]
    39da:	e7bc      	b.n	3956 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    39dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    39de:	4642      	mov	r2, r8
    39e0:	6803      	ldr	r3, [r0, #0]
    39e2:	691b      	ldr	r3, [r3, #16]
    39e4:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    39e6:	2800      	cmp	r0, #0
    39e8:	d0d0      	beq.n	398c <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    39ea:	f44f 7400 	mov.w	r4, #512	; 0x200
    39ee:	e795      	b.n	391c <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    39f0:	782b      	ldrb	r3, [r5, #0]
    39f2:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    39f6:	d0c9      	beq.n	398c <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    39f8:	ebaa 0a06 	sub.w	sl, sl, r6
    39fc:	4650      	mov	r0, sl
}
    39fe:	b003      	add	sp, #12
    3a00:	ecbd 8b02 	vpop	{d8}
    3a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003a08 <FatFile::peek()>:
int FatFile::peek() {
    3a08:	b570      	push	{r4, r5, r6, lr}
    3a0a:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3a0c:	2201      	movs	r2, #1
    3a0e:	4604      	mov	r4, r0
    3a10:	f10d 0107 	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    3a14:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    3a18:	f7ff ff22 	bl	3860 <FatFile::read(void*, unsigned int)>
    3a1c:	2801      	cmp	r0, #1
    3a1e:	bf0c      	ite	eq
    3a20:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    3a24:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    3a28:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    3a2c:	b002      	add	sp, #8
    3a2e:	bd70      	pop	{r4, r5, r6, pc}

00003a30 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3a30:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    3a32:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    3a36:	b530      	push	{r4, r5, lr}
    3a38:	4604      	mov	r4, r0
    3a3a:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3a3c:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    3a40:	d009      	beq.n	3a56 <FatFile::readDirCache(bool)+0x26>
    3a42:	2901      	cmp	r1, #1
    3a44:	d107      	bne.n	3a56 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    3a46:	3320      	adds	r3, #32
    3a48:	6143      	str	r3, [r0, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    3a4a:	68a0      	ldr	r0, [r4, #8]
    3a4c:	3034      	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    3a4e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    3a52:	b003      	add	sp, #12
    3a54:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    3a56:	2201      	movs	r2, #1
    3a58:	f10d 0107 	add.w	r1, sp, #7
    3a5c:	4620      	mov	r0, r4
    3a5e:	f7ff feff 	bl	3860 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    3a62:	b240      	sxtb	r0, r0
    3a64:	2801      	cmp	r0, #1
    3a66:	d103      	bne.n	3a70 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    3a68:	6963      	ldr	r3, [r4, #20]
    3a6a:	331f      	adds	r3, #31
    3a6c:	6163      	str	r3, [r4, #20]
    3a6e:	e7ec      	b.n	3a4a <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    3a70:	2000      	movs	r0, #0
    3a72:	e7ee      	b.n	3a52 <FatFile::readDirCache(bool)+0x22>

00003a74 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    3a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const { return m_attributes; }
    3a78:	7803      	ldrb	r3, [r0, #0]
    3a7a:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    3a7c:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d039      	beq.n	3af6 <FatFile::seekSet(unsigned long)+0x82>
    3a82:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    3a84:	6941      	ldr	r1, [r0, #20]
    3a86:	42a9      	cmp	r1, r5
    3a88:	d042      	beq.n	3b10 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    3a8a:	2d00      	cmp	r5, #0
    3a8c:	d037      	beq.n	3afe <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    3a8e:	0718      	lsls	r0, r3, #28
    3a90:	d52a      	bpl.n	3ae8 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    3a92:	69e2      	ldr	r2, [r4, #28]
    3a94:	42aa      	cmp	r2, r5
    3a96:	d32e      	bcc.n	3af6 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3a98:	f8d4 c008 	ldr.w	ip, [r4, #8]
    3a9c:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    3a9e:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    3aa0:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    3aa4:	f012 0f40 	tst.w	r2, #64	; 0x40
    3aa8:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3aac:	b2c0      	uxtb	r0, r0
    3aae:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    3ab2:	d130      	bne.n	3b16 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    3ab4:	1e4a      	subs	r2, r1, #1
    3ab6:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3ab8:	b109      	cbz	r1, 3abe <FatFile::seekSet(unsigned long)+0x4a>
    3aba:	4296      	cmp	r6, r2
    3abc:	d22f      	bcs.n	3b1e <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    3abe:	061b      	lsls	r3, r3, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    3ac0:	bf4c      	ite	mi
    3ac2:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    3ac6:	6a23      	ldrpl	r3, [r4, #32]
    3ac8:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3aca:	f104 0810 	add.w	r8, r4, #16
    3ace:	e006      	b.n	3ade <FatFile::seekSet(unsigned long)+0x6a>
    3ad0:	6921      	ldr	r1, [r4, #16]
    3ad2:	3e01      	subs	r6, #1
    3ad4:	68a0      	ldr	r0, [r4, #8]
    3ad6:	f000 fd99 	bl	460c <FatPartition::fatGet(unsigned long, unsigned long*)>
    3ada:	2800      	cmp	r0, #0
    3adc:	dd0b      	ble.n	3af6 <FatFile::seekSet(unsigned long)+0x82>
    3ade:	4642      	mov	r2, r8
  while (nNew--) {
    3ae0:	2e00      	cmp	r6, #0
    3ae2:	d1f5      	bne.n	3ad0 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3ae4:	78a2      	ldrb	r2, [r4, #2]
    3ae6:	e00c      	b.n	3b02 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    3ae8:	065a      	lsls	r2, r3, #25
    3aea:	d5d5      	bpl.n	3a98 <FatFile::seekSet(unsigned long)+0x24>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
    3aec:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    3aee:	891b      	ldrh	r3, [r3, #8]
    3af0:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    3af4:	d9f6      	bls.n	3ae4 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    3af6:	2000      	movs	r0, #0
  m_curCluster = tmp;
    3af8:	6127      	str	r7, [r4, #16]
}
    3afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3afe:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    3b00:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3b02:	f022 0220 	bic.w	r2, r2, #32
  return true;
    3b06:	2001      	movs	r0, #1
  m_curPosition = pos;
    3b08:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3b0a:	70a2      	strb	r2, [r4, #2]
}
    3b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    3b10:	2001      	movs	r0, #1
}
    3b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    3b16:	6a23      	ldr	r3, [r4, #32]
    3b18:	4433      	add	r3, r6
    3b1a:	6123      	str	r3, [r4, #16]
    goto done;
    3b1c:	e7f1      	b.n	3b02 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    3b1e:	1ab6      	subs	r6, r6, r2
    3b20:	e7d3      	b.n	3aca <FatFile::seekSet(unsigned long)+0x56>
    3b22:	bf00      	nop

00003b24 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    3b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b28:	460e      	mov	r6, r1
    3b2a:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    3b2c:	2100      	movs	r1, #0
    3b2e:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    3b30:	4604      	mov	r4, r0
    3b32:	4698      	mov	r8, r3
    3b34:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    3b38:	f007 ff68 	bl	ba0c <memset>
  m_vol = dirFile->m_vol;
    3b3c:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    3b3e:	6a33      	ldr	r3, [r6, #32]
    3b40:	f100 0234 	add.w	r2, r0, #52	; 0x34
  m_dirIndex = dirIndex;
    3b44:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    3b46:	f005 050f 	and.w	r5, r5, #15
    3b4a:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    3b4e:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFatFile(const DirFat_t* dir) {
  return (dir->attributes & (FS_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFatFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    3b52:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
    3b54:	070b      	lsls	r3, r1, #28
    3b56:	d411      	bmi.n	3b7c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    3b58:	f001 0137 	and.w	r1, r1, #55	; 0x37
    3b5c:	7021      	strb	r1, [r4, #0]
  if (isFatFile(dir)) {
    3b5e:	7ad3      	ldrb	r3, [r2, #11]
    3b60:	f013 0f18 	tst.w	r3, #24
    3b64:	d102      	bne.n	3b6c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    3b66:	f041 0108 	orr.w	r1, r1, #8
    3b6a:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    3b6c:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    3b70:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    3b72:	2b01      	cmp	r3, #1
    3b74:	d03c      	beq.n	3bf0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xcc>
    3b76:	2b02      	cmp	r3, #2
    3b78:	d006      	beq.n	3b88 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    3b7a:	b313      	cbz	r3, 3bc2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
  m_attributes = FILE_ATTR_CLOSED;
    3b7c:	2300      	movs	r3, #0
  return false;
    3b7e:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    3b80:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3b82:	70a3      	strb	r3, [r4, #2]
}
    3b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3b88:	2303      	movs	r3, #3
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    3b8a:	7821      	ldrb	r1, [r4, #0]
      m_flags = FILE_FLAG_WRITE;
    3b8c:	70a3      	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    3b8e:	06cd      	lsls	r5, r1, #27
    3b90:	d4f4      	bmi.n	3b7c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    3b92:	07ce      	lsls	r6, r1, #31
    3b94:	d4f2      	bmi.n	3b7c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3b96:	f041 0120 	orr.w	r1, r1, #32
  if (oflag & O_TRUNC) {
    3b9a:	f418 6f80 	tst.w	r8, #1024	; 0x400
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3b9e:	7021      	strb	r1, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3ba0:	f008 0108 	and.w	r1, r8, #8
    3ba4:	ea43 0301 	orr.w	r3, r3, r1
    3ba8:	70a3      	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
    3baa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3bac:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3bae:	61a1      	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    3bb0:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3bb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    3bb6:	d012      	beq.n	3bde <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xba>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3bb8:	bb19      	cbnz	r1, 3c02 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xde>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3bba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3bbe:	70a3      	strb	r3, [r4, #2]
    3bc0:	e010      	b.n	3be4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
      if (oflag & O_TRUNC) {
    3bc2:	f418 6f80 	tst.w	r8, #1024	; 0x400
    3bc6:	d1d9      	bne.n	3b7c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3bc8:	f008 0308 	and.w	r3, r8, #8
    3bcc:	f043 0301 	orr.w	r3, r3, #1
    3bd0:	70a3      	strb	r3, [r4, #2]
    3bd2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3bd4:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3bd6:	61a1      	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    3bd8:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3bda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    3bde:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    3be0:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    3be2:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3be4:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    3be8:	d104      	bne.n	3bf4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
  return true;
    3bea:	2001      	movs	r0, #1
}
    3bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3bf0:	2302      	movs	r3, #2
    3bf2:	e7ca      	b.n	3b8a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3bf4:	69e1      	ldr	r1, [r4, #28]
    3bf6:	4620      	mov	r0, r4
    3bf8:	f7ff ff3c 	bl	3a74 <FatFile::seekSet(unsigned long)>
    3bfc:	2800      	cmp	r0, #0
    3bfe:	d1f4      	bne.n	3bea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>
    3c00:	e7bc      	b.n	3b7c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3c02:	f000 fd89 	bl	4718 <FatPartition::freeChain(unsigned long)>
    3c06:	2800      	cmp	r0, #0
    3c08:	d0b8      	beq.n	3b7c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3c0a:	78a3      	ldrb	r3, [r4, #2]
    3c0c:	e7d5      	b.n	3bba <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
    3c0e:	bf00      	nop

00003c10 <FatFile::sync()>:
  if (!isOpen()) {
    3c10:	7803      	ldrb	r3, [r0, #0]
    3c12:	b10b      	cbz	r3, 3c18 <FatFile::sync()+0x8>
    3c14:	f7ff bb98 	b.w	3348 <FatFile::sync() [clone .part.0]>
}
    3c18:	2001      	movs	r0, #1
    3c1a:	4770      	bx	lr

00003c1c <FatFile::write(void const*, unsigned int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    3c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    3c20:	7883      	ldrb	r3, [r0, #2]
    3c22:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    3c24:	079c      	lsls	r4, r3, #30
    3c26:	d577      	bpl.n	3d18 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3c28:	4688      	mov	r8, r1
    3c2a:	0719      	lsls	r1, r3, #28
    3c2c:	4691      	mov	r9, r2
    3c2e:	f100 80b5 	bmi.w	3d9c <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    3c32:	696b      	ldr	r3, [r5, #20]
    3c34:	eb13 0209 	adds.w	r2, r3, r9
    3c38:	d26e      	bcs.n	3d18 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3c3a:	f1b9 0f00 	cmp.w	r9, #0
    3c3e:	d040      	beq.n	3cc2 <FatFile::write(void const*, unsigned int)+0xa6>
    3c40:	464f      	mov	r7, r9
    m_status = 0;
    3c42:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    3c46:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    3c48:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3c4c:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    3c4e:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3c50:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    3c54:	d13f      	bne.n	3cd6 <FatFile::write(void const*, unsigned int)+0xba>
    3c56:	2e00      	cmp	r6, #0
    3c58:	d13d      	bne.n	3cd6 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    3c5a:	2900      	cmp	r1, #0
    3c5c:	d06e      	beq.n	3d3c <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    3c5e:	78aa      	ldrb	r2, [r5, #2]
    3c60:	0652      	lsls	r2, r2, #25
    3c62:	d576      	bpl.n	3d52 <FatFile::write(void const*, unsigned int)+0x136>
    3c64:	69ea      	ldr	r2, [r5, #28]
    3c66:	429a      	cmp	r2, r3
    3c68:	d973      	bls.n	3d52 <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    3c6a:	3101      	adds	r1, #1
    3c6c:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3c6e:	3902      	subs	r1, #2
    3c70:	7982      	ldrb	r2, [r0, #6]
    3c72:	6943      	ldr	r3, [r0, #20]
    3c74:	4091      	lsls	r1, r2
    3c76:	4419      	add	r1, r3
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3c78:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    3c7c:	d353      	bcc.n	3d26 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    3c7e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    3c82:	d370      	bcc.n	3d66 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3c84:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    3c86:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3c88:	1b1b      	subs	r3, r3, r4
    3c8a:	4293      	cmp	r3, r2
    3c8c:	bf28      	it	cs
    3c8e:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    3c90:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    3c92:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3c94:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3c98:	d307      	bcc.n	3caa <FatFile::write(void const*, unsigned int)+0x8e>
    3c9a:	185e      	adds	r6, r3, r1
    3c9c:	42b2      	cmp	r2, r6
    3c9e:	d204      	bcs.n	3caa <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    3ca0:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    3ca4:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3ca8:	62c2      	str	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
    3caa:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3cac:	4642      	mov	r2, r8
    3cae:	6806      	ldr	r6, [r0, #0]
    3cb0:	6a76      	ldr	r6, [r6, #36]	; 0x24
    3cb2:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    3cb4:	b380      	cbz	r0, 3d18 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3cb6:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    3cb8:	1b3f      	subs	r7, r7, r4
    src += n;
    3cba:	44a0      	add	r8, r4
    m_curPosition += n;
    3cbc:	4423      	add	r3, r4
    3cbe:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    3cc0:	d1c1      	bne.n	3c46 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    3cc2:	69ea      	ldr	r2, [r5, #28]
    3cc4:	429a      	cmp	r2, r3
    3cc6:	d276      	bcs.n	3db6 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3cc8:	78aa      	ldrb	r2, [r5, #2]
    3cca:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    3ccc:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3cce:	f062 037f 	orn	r3, r2, #127	; 0x7f
    3cd2:	70ab      	strb	r3, [r5, #2]
    3cd4:	e025      	b.n	3d22 <FatFile::write(void const*, unsigned int)+0x106>
    3cd6:	7982      	ldrb	r2, [r0, #6]
    3cd8:	3902      	subs	r1, #2
    3cda:	6943      	ldr	r3, [r0, #20]
    3cdc:	4091      	lsls	r1, r2
    3cde:	4419      	add	r1, r3
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3ce0:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3ce2:	2e00      	cmp	r6, #0
    3ce4:	d0c8      	beq.n	3c78 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    3ce6:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3cea:	2201      	movs	r2, #1
    3cec:	42bc      	cmp	r4, r7
    3cee:	bf28      	it	cs
    3cf0:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    3cf2:	3024      	adds	r0, #36	; 0x24
    3cf4:	f003 fa32 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    3cf8:	b170      	cbz	r0, 3d18 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    3cfa:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3cfc:	4426      	add	r6, r4
      memcpy(dst, src, n);
    3cfe:	4622      	mov	r2, r4
    3d00:	4641      	mov	r1, r8
    3d02:	f004 f9b7 	bl	8074 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3d06:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3d0a:	68a8      	ldr	r0, [r5, #8]
    3d0c:	d1d3      	bne.n	3cb6 <FatFile::write(void const*, unsigned int)+0x9a>
  bool cacheSyncData() { return m_cache.sync(); }
    3d0e:	3024      	adds	r0, #36	; 0x24
    3d10:	f003 f9f8 	bl	7104 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    3d14:	2800      	cmp	r0, #0
    3d16:	d1ce      	bne.n	3cb6 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3d18:	786b      	ldrb	r3, [r5, #1]
  return 0;
    3d1a:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3d1c:	f043 0301 	orr.w	r3, r3, #1
    3d20:	706b      	strb	r3, [r5, #1]
}
    3d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3d26:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    3d2a:	696a      	ldr	r2, [r5, #20]
    3d2c:	69eb      	ldr	r3, [r5, #28]
    3d2e:	42bc      	cmp	r4, r7
    3d30:	bf28      	it	cs
    3d32:	463c      	movcs	r4, r7
    3d34:	429a      	cmp	r2, r3
    3d36:	d305      	bcc.n	3d44 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3d38:	2205      	movs	r2, #5
    3d3a:	e7da      	b.n	3cf2 <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    3d3c:	6a29      	ldr	r1, [r5, #32]
    3d3e:	b321      	cbz	r1, 3d8a <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    3d40:	6129      	str	r1, [r5, #16]
    3d42:	e794      	b.n	3c6e <FatFile::write(void const*, unsigned int)+0x52>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    3d44:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3d46:	f013 0f20 	tst.w	r3, #32
    3d4a:	bf14      	ite	ne
    3d4c:	2205      	movne	r2, #5
    3d4e:	2201      	moveq	r2, #1
    3d50:	e7cf      	b.n	3cf2 <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3d52:	f105 0210 	add.w	r2, r5, #16
    3d56:	f000 fc59 	bl	460c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3d5a:	2800      	cmp	r0, #0
    3d5c:	dbdc      	blt.n	3d18 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    3d5e:	d024      	beq.n	3daa <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3d60:	68a8      	ldr	r0, [r5, #8]
    3d62:	6929      	ldr	r1, [r5, #16]
    3d64:	e783      	b.n	3c6e <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    3d66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3d68:	428b      	cmp	r3, r1
    3d6a:	d104      	bne.n	3d76 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    3d6c:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    3d70:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3d74:	62c3      	str	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
    3d76:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3d78:	4642      	mov	r2, r8
    3d7a:	6803      	ldr	r3, [r0, #0]
    3d7c:	6a1b      	ldr	r3, [r3, #32]
    3d7e:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3d80:	2800      	cmp	r0, #0
    3d82:	d0c9      	beq.n	3d18 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    3d84:	f44f 7400 	mov.w	r4, #512	; 0x200
    3d88:	e795      	b.n	3cb6 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    3d8a:	4628      	mov	r0, r5
    3d8c:	f7ff fb3a 	bl	3404 <FatFile::addCluster()>
    3d90:	2800      	cmp	r0, #0
    3d92:	d0c1      	beq.n	3d18 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    3d94:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3d96:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    3d98:	6229      	str	r1, [r5, #32]
    3d9a:	e768      	b.n	3c6e <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    3d9c:	69c1      	ldr	r1, [r0, #28]
    3d9e:	f7ff fe69 	bl	3a74 <FatFile::seekSet(unsigned long)>
    3da2:	2800      	cmp	r0, #0
    3da4:	f47f af45 	bne.w	3c32 <FatFile::write(void const*, unsigned int)+0x16>
    3da8:	e7b6      	b.n	3d18 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    3daa:	4628      	mov	r0, r5
    3dac:	f7ff fb2a 	bl	3404 <FatFile::addCluster()>
    3db0:	2800      	cmp	r0, #0
    3db2:	d1d5      	bne.n	3d60 <FatFile::write(void const*, unsigned int)+0x144>
    3db4:	e7b0      	b.n	3d18 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    3db6:	4b05      	ldr	r3, [pc, #20]	; (3dcc <FatFile::write(void const*, unsigned int)+0x1b0>)
    3db8:	681b      	ldr	r3, [r3, #0]
    3dba:	b12b      	cbz	r3, 3dc8 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3dbc:	78ab      	ldrb	r3, [r5, #2]
    3dbe:	4648      	mov	r0, r9
    3dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3dc4:	70ab      	strb	r3, [r5, #2]
    3dc6:	e7ac      	b.n	3d22 <FatFile::write(void const*, unsigned int)+0x106>
    3dc8:	4648      	mov	r0, r9
    3dca:	e7aa      	b.n	3d22 <FatFile::write(void const*, unsigned int)+0x106>
    3dcc:	2002a86c 	.word	0x2002a86c

00003dd0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    3dd4:	4686      	mov	lr, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3dd6:	b08a      	sub	sp, #40	; 0x28
    3dd8:	4615      	mov	r5, r2
  void reset() { next = begin; }
    3dda:	6814      	ldr	r4, [r2, #0]
    3ddc:	4606      	mov	r6, r0
    3dde:	4688      	mov	r8, r1
  FatFile dir = *this;
    3de0:	f10d 0c04 	add.w	ip, sp, #4
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3de4:	461f      	mov	r7, r3
  FatFile dir = *this;
    3de6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3dea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3dee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3df2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3df6:	f8de 3000 	ldr.w	r3, [lr]
    3dfa:	606c      	str	r4, [r5, #4]
    3dfc:	f8cc 3000 	str.w	r3, [ip]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3e00:	2f00      	cmp	r7, #0
    3e02:	d03b      	beq.n	3e7c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xac>
    3e04:	f04f 0901 	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3e08:	eba8 0109 	sub.w	r1, r8, r9
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3e0c:	a801      	add	r0, sp, #4
    3e0e:	b289      	uxth	r1, r1
    3e10:	0149      	lsls	r1, r1, #5
    3e12:	f7ff fe2f 	bl	3a74 <FatFile::seekSet(unsigned long)>
    3e16:	b398      	cbz	r0, 3e80 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    3e18:	2100      	movs	r1, #0
    3e1a:	a801      	add	r0, sp, #4
    3e1c:	f7ff fe08 	bl	3a30 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3e20:	4682      	mov	sl, r0
    3e22:	b368      	cbz	r0, 3e80 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    3e24:	2400      	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    3e26:	b2e2      	uxtb	r2, r4
    3e28:	4651      	mov	r1, sl
    3e2a:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    3e2c:	3401      	adds	r4, #1
      uint16_t u = getLfnChar(ldir, i);
    3e2e:	f000 fb75 	bl	451c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3e32:	b2c3      	uxtb	r3, r0
      if (fname->atEnd()) {
    3e34:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
    3e38:	428a      	cmp	r2, r1
  char getch() { return atEnd() ? 0 : *next++; }
    3e3a:	f101 0c01 	add.w	ip, r1, #1
    3e3e:	d023      	beq.n	3e88 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3e40:	287f      	cmp	r0, #127	; 0x7f
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    3e42:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    3e46:	f1a3 0e20 	sub.w	lr, r3, #32
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3e4a:	d819      	bhi.n	3e80 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    3e4c:	2a19      	cmp	r2, #25
    3e4e:	f8c5 c004 	str.w	ip, [r5, #4]
    3e52:	780a      	ldrb	r2, [r1, #0]
    3e54:	bf98      	it	ls
    3e56:	fa5f f38e 	uxtbls.w	r3, lr
    3e5a:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    3e5e:	f1a2 0020 	sub.w	r0, r2, #32
    3e62:	2919      	cmp	r1, #25
    3e64:	bf98      	it	ls
    3e66:	b2c2      	uxtbls	r2, r0
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3e68:	429a      	cmp	r2, r3
    3e6a:	d109      	bne.n	3e80 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    for (uint8_t i = 0; i < 13; i++) {
    3e6c:	2c0d      	cmp	r4, #13
    3e6e:	d1da      	bne.n	3e26 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x56>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3e70:	f109 0901 	add.w	r9, r9, #1
    3e74:	fa5f f989 	uxtb.w	r9, r9
    3e78:	454f      	cmp	r7, r9
    3e7a:	d2c5      	bcs.n	3e08 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x38>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    3e7c:	2001      	movs	r0, #1
    3e7e:	e000      	b.n	3e82 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>

fail:
  return false;
    3e80:	2000      	movs	r0, #0
}
    3e82:	b00a      	add	sp, #40	; 0x28
    3e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return u == 0;
    3e88:	fab0 f080 	clz	r0, r0
    3e8c:	0940      	lsrs	r0, r0, #5
}
    3e8e:	b00a      	add	sp, #40	; 0x28
    3e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003e94 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    3e98:	4686      	mov	lr, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3e9a:	b08a      	sub	sp, #40	; 0x28
    3e9c:	4614      	mov	r4, r2
    3e9e:	4688      	mov	r8, r1
    3ea0:	461e      	mov	r6, r3
  FatFile dir = *this;
    3ea2:	f10d 0904 	add.w	r9, sp, #4
    3ea6:	f102 0711 	add.w	r7, r2, #17
    3eaa:	f102 0c1c 	add.w	ip, r2, #28
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    3eae:	2500      	movs	r5, #0
    3eb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3eb4:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    3eb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3ebc:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    3ec0:	f8de 3000 	ldr.w	r3, [lr]
    3ec4:	f8c9 3000 	str.w	r3, [r9]
    for (uint8_t i = 0; i < 11; i++) {
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3ec8:	01eb      	lsls	r3, r5, #7
    3eca:	f817 2f01 	ldrb.w	r2, [r7, #1]!
    3ece:	ea43 0355 	orr.w	r3, r3, r5, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    3ed2:	4567      	cmp	r7, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3ed4:	fa52 f383 	uxtab	r3, r2, r3
    3ed8:	b2dd      	uxtb	r5, r3
    for (uint8_t i = 0; i < 11; i++) {
    3eda:	d1f5      	bne.n	3ec8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
  void reset() { next = begin; }
    3edc:	6823      	ldr	r3, [r4, #0]
    3ede:	6063      	str	r3, [r4, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3ee0:	2e00      	cmp	r6, #0
    3ee2:	d059      	beq.n	3f98 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x104>
  uint8_t fc = 0;
    3ee4:	f04f 0900 	mov.w	r9, #0
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3ee8:	f04f 0a01 	mov.w	sl, #1
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3eec:	464f      	mov	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3eee:	eba8 010a 	sub.w	r1, r8, sl
    3ef2:	a801      	add	r0, sp, #4
    3ef4:	b289      	uxth	r1, r1
    3ef6:	0149      	lsls	r1, r1, #5
    3ef8:	f7ff fdbc 	bl	3a74 <FatFile::seekSet(unsigned long)>
    3efc:	2800      	cmp	r0, #0
    3efe:	d053      	beq.n	3fa8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    3f00:	2100      	movs	r1, #0
    3f02:	a801      	add	r0, sp, #4
    3f04:	f7ff fd94 	bl	3a30 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3f08:	2800      	cmp	r0, #0
    3f0a:	d04d      	beq.n	3fa8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    3f0c:	9a03      	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3f0e:	45b2      	cmp	sl, r6
  bool atEnd() { return next == end; }
    3f10:	f04f 0c01 	mov.w	ip, #1
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    3f14:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    3f18:	f043 0301 	orr.w	r3, r3, #1
    3f1c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    3f20:	bf0c      	ite	eq
    3f22:	f04a 0240 	orreq.w	r2, sl, #64	; 0x40
    3f26:	4652      	movne	r2, sl
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3f28:	230f      	movs	r3, #15
    ldir->mustBeZero1 = 0;
    3f2a:	7307      	strb	r7, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3f2c:	7002      	strb	r2, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3f2e:	1c42      	adds	r2, r0, #1
    3f30:	72c3      	strb	r3, [r0, #11]
    3f32:	2300      	movs	r3, #0
    ldir->checksum = checksum;
    3f34:	7345      	strb	r5, [r0, #13]
    3f36:	68a1      	ldr	r1, [r4, #8]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3f38:	8347      	strh	r7, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    3f3a:	e006      	b.n	3f4a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb6>
    3f3c:	8010      	strh	r0, [r2, #0]
    3f3e:	f10c 0c01 	add.w	ip, ip, #1
    3f42:	3301      	adds	r3, #1
    3f44:	3202      	adds	r2, #2
    3f46:	fa5f fc8c 	uxtb.w	ip, ip
    3f4a:	6860      	ldr	r0, [r4, #4]
      uint16_t cp;
      if (fname->atEnd()) {
    3f4c:	4288      	cmp	r0, r1
    3f4e:	d00e      	beq.n	3f6e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xda>
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    3f50:	f100 0e01 	add.w	lr, r0, #1
    3f54:	f8c4 e004 	str.w	lr, [r4, #4]
    3f58:	7800      	ldrb	r0, [r0, #0]
  if (i < 5) {
    3f5a:	2b04      	cmp	r3, #4
    3f5c:	fa5f fe83 	uxtb.w	lr, r3
    3f60:	d9ec      	bls.n	3f3c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
  } else if (i < 11) {
    3f62:	f1be 0f0a 	cmp.w	lr, #10
    3f66:	d80c      	bhi.n	3f82 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xee>
    3f68:	f8a2 0003 	strh.w	r0, [r2, #3]
}
    3f6c:	e7e7      	b.n	3f3e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
        cp = fc++ ? 0XFFFF : 0;
    3f6e:	f1b9 0f00 	cmp.w	r9, #0
    3f72:	d015      	beq.n	3fa0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
    3f74:	f109 0901 	add.w	r9, r9, #1
    3f78:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3f7c:	fa5f f989 	uxtb.w	r9, r9
    3f80:	e7eb      	b.n	3f5a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    for (uint8_t i = 0; i < 13; i++) {
    3f82:	f1bc 0f0d 	cmp.w	ip, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    3f86:	f8a2 0005 	strh.w	r0, [r2, #5]
    3f8a:	d1d8      	bne.n	3f3e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3f8c:	f10a 0a01 	add.w	sl, sl, #1
    3f90:	fa5f fa8a 	uxtb.w	sl, sl
    3f94:	4556      	cmp	r6, sl
    3f96:	d2aa      	bcs.n	3eee <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    3f98:	2001      	movs	r0, #1

fail:
  return false;
}
    3f9a:	b00a      	add	sp, #40	; 0x28
    3f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cp = fc++ ? 0XFFFF : 0;
    3fa0:	4648      	mov	r0, r9
    3fa2:	f04f 0901 	mov.w	r9, #1
    3fa6:	e7d8      	b.n	3f5a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
  return false;
    3fa8:	2000      	movs	r0, #0
}
    3faa:	b00a      	add	sp, #40	; 0x28
    3fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003fb0 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    3fb0:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    3fb2:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    3fb6:	f852 3b12 	ldr.w	r3, [r2], #18
bool FatFile::makeSFN(FatLfn_t* fname) {
    3fba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    3fbe:	f8c0 1012 	str.w	r1, [r0, #18]
bool FatFile::makeSFN(FatLfn_t* fname) {
    3fc2:	4686      	mov	lr, r0
  const char* end = fname->end;
    3fc4:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    3fc6:	6051      	str	r1, [r2, #4]
    3fc8:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    3fcc:	781a      	ldrb	r2, [r3, #0]
    3fce:	2a2e      	cmp	r2, #46	; 0x2e
    3fd0:	bf14      	ite	ne
    3fd2:	2001      	movne	r0, #1
    3fd4:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    3fd6:	d103      	bne.n	3fe0 <FatFile::makeSFN(FatLfn_t*)+0x30>
    3fd8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3fdc:	2a2e      	cmp	r2, #46	; 0x2e
    3fde:	d0fb      	beq.n	3fd8 <FatFile::makeSFN(FatLfn_t*)+0x28>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    3fe0:	1e61      	subs	r1, r4, #1
    3fe2:	4299      	cmp	r1, r3
    3fe4:	d90b      	bls.n	3ffe <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3fe6:	460a      	mov	r2, r1
    3fe8:	e002      	b.n	3ff0 <FatFile::makeSFN(FatLfn_t*)+0x40>
    3fea:	4293      	cmp	r3, r2
    3fec:	4611      	mov	r1, r2
    3fee:	d006      	beq.n	3ffe <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3ff0:	4611      	mov	r1, r2
    3ff2:	3a01      	subs	r2, #1
    3ff4:	f891 c000 	ldrb.w	ip, [r1]
    3ff8:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    3ffc:	d1f5      	bne.n	3fea <FatFile::makeSFN(FatLfn_t*)+0x3a>
  }

  for (; ptr < end; ptr++) {
    3ffe:	429c      	cmp	r4, r3
    4000:	f04f 0500 	mov.w	r5, #0
    4004:	f240 8086 	bls.w	4114 <FatFile::makeSFN(FatLfn_t*)+0x164>
    4008:	2607      	movs	r6, #7
    400a:	2708      	movs	r7, #8
    400c:	46a9      	mov	r9, r5
    400e:	46a8      	mov	r8, r5
    4010:	e006      	b.n	4020 <FatFile::makeSFN(FatLfn_t*)+0x70>
    4012:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
    4014:	260a      	movs	r6, #10
      i = 8;                  // Place for extension.
    4016:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    401a:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    401c:	429c      	cmp	r4, r3
    401e:	d95b      	bls.n	40d8 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    4020:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    4022:	2a2e      	cmp	r2, #46	; 0x2e
    4024:	bf08      	it	eq
    4026:	4299      	cmpeq	r1, r3
    4028:	d0f3      	beq.n	4012 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    402a:	2a22      	cmp	r2, #34	; 0x22
    402c:	d00d      	beq.n	404a <FatFile::makeSFN(FatLfn_t*)+0x9a>
    402e:	2a7c      	cmp	r2, #124	; 0x7c
    4030:	d00b      	beq.n	404a <FatFile::makeSFN(FatLfn_t*)+0x9a>
    4032:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    4036:	f1bc 0f02 	cmp.w	ip, #2
    403a:	d906      	bls.n	404a <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    403c:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    4040:	f1bc 0f05 	cmp.w	ip, #5
    4044:	d821      	bhi.n	408a <FatFile::makeSFN(FatLfn_t*)+0xda>
    4046:	2a2d      	cmp	r2, #45	; 0x2d
    4048:	d01f      	beq.n	408a <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    404a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    404e:	2a80      	cmp	r2, #128	; 0x80
    4050:	d05d      	beq.n	410e <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    4052:	454e      	cmp	r6, r9
    4054:	d22f      	bcs.n	40b6 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    4056:	4299      	cmp	r1, r3
    4058:	bf2c      	ite	cs
    405a:	2000      	movcs	r0, #0
    405c:	2001      	movcc	r0, #1
    405e:	2e0a      	cmp	r6, #10
    4060:	bf08      	it	eq
    4062:	f040 0001 	orreq.w	r0, r0, #1
    4066:	2800      	cmp	r0, #0
    4068:	d047      	beq.n	40fa <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    406a:	f89e 3012 	ldrb.w	r3, [lr, #18]
    406e:	2b20      	cmp	r3, #32
    4070:	d040      	beq.n	40f4 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    4072:	f89e 3010 	ldrb.w	r3, [lr, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    4076:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    4078:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    407a:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    407c:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    407e:	f88e 0011 	strb.w	r0, [lr, #17]
    fname->sfn[fname->seqPos] = '~';
    4082:	7499      	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    4084:	74da      	strb	r2, [r3, #19]
  }
  return true;

fail:
  return false;
}
    4086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    408a:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    408e:	f1bc 0f05 	cmp.w	ip, #5
    4092:	d9da      	bls.n	404a <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    4094:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    4098:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    409c:	d8d5      	bhi.n	404a <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    409e:	454e      	cmp	r6, r9
    40a0:	d3d9      	bcc.n	4056 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    40a2:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    40a6:	f1bc 0f19 	cmp.w	ip, #25
    40aa:	d828      	bhi.n	40fe <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    40ac:	3a20      	subs	r2, #32
        lc |= bit;
    40ae:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    40b0:	b2d2      	uxtb	r2, r2
        lc |= bit;
    40b2:	b2ed      	uxtb	r5, r5
    40b4:	e001      	b.n	40ba <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    40b6:	2000      	movs	r0, #0
        c = '_';
    40b8:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    40ba:	f109 0c01 	add.w	ip, r9, #1
    40be:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    40c0:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    40c2:	f889 2012 	strb.w	r2, [r9, #18]
    40c6:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    40ca:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    40cc:	4691      	mov	r9, r2
    40ce:	bf98      	it	ls
    40d0:	f88e 2010 	strbls.w	r2, [lr, #16]
  for (; ptr < end; ptr++) {
    40d4:	429c      	cmp	r4, r3
    40d6:	d8a3      	bhi.n	4020 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    40d8:	f89e 3012 	ldrb.w	r3, [lr, #18]
    40dc:	2b20      	cmp	r3, #32
    40de:	d009      	beq.n	40f4 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    40e0:	2800      	cmp	r0, #0
    40e2:	d0c6      	beq.n	4072 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    40e4:	ea18 0f05 	tst.w	r8, r5
    40e8:	bf18      	it	ne
    40ea:	2502      	movne	r5, #2
    40ec:	f88e 5011 	strb.w	r5, [lr, #17]
}
    40f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    40f4:	2000      	movs	r0, #0
}
    40f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    40fa:	460b      	mov	r3, r1
    40fc:	e78e      	b.n	401c <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    40fe:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    4102:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    4106:	bf98      	it	ls
    4108:	ea47 0808 	orrls.w	r8, r7, r8
    410c:	e7d5      	b.n	40ba <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    410e:	3301      	adds	r3, #1
        is83 = false;
    4110:	2000      	movs	r0, #0
    4112:	e783      	b.n	401c <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    4114:	46a8      	mov	r8, r5
    4116:	e7df      	b.n	40d8 <FatFile::makeSFN(FatLfn_t*)+0x128>

00004118 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    4118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    411c:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    4120:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    4122:	460f      	mov	r7, r1
    4124:	4604      	mov	r4, r0
    4126:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 41c8 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    412a:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    412e:	f891 8010 	ldrb.w	r8, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4132:	f101 0612 	add.w	r6, r1, #18
	return systick_millis_count;
    4136:	f1b8 0f03 	cmp.w	r8, #3
    413a:	f8db 3000 	ldr.w	r3, [fp]
    413e:	bf28      	it	cs
    4140:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    4144:	442b      	add	r3, r5
    4146:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    4148:	f108 0304 	add.w	r3, r8, #4
    414c:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    414e:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4; i > pos; i--) {
    4152:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    4154:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    4156:	2a09      	cmp	r2, #9
    4158:	f102 0137 	add.w	r1, r2, #55	; 0x37
    415c:	bf98      	it	ls
    415e:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    4162:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    4164:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    4166:	7491      	strb	r1, [r2, #18]
    for (uint8_t i = pos + 4; i > pos; i--) {
    4168:	4598      	cmp	r8, r3
    416a:	d1f0      	bne.n	414e <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    416c:	eb07 0308 	add.w	r3, r7, r8
  void rewind() { seekSet(0); }
    4170:	2100      	movs	r1, #0
    4172:	4620      	mov	r0, r4
    4174:	f883 a012 	strb.w	sl, [r3, #18]
    4178:	f7ff fc7c 	bl	3a74 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    417c:	2101      	movs	r1, #1
    417e:	4620      	mov	r0, r4
    4180:	f7ff fc56 	bl	3a30 <FatFile::readDirCache(bool)>
    4184:	4603      	mov	r3, r0
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4186:	220b      	movs	r2, #11
    4188:	4630      	mov	r0, r6
      if (!dir) {
    418a:	b19b      	cbz	r3, 41b4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    418c:	f893 c000 	ldrb.w	ip, [r3]
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4190:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    4192:	f1bc 0f00 	cmp.w	ip, #0
    4196:	d013      	beq.n	41c0 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4198:	7adb      	ldrb	r3, [r3, #11]
    419a:	071b      	lsls	r3, r3, #28
    419c:	d4ee      	bmi.n	417c <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    419e:	f007 fb89 	bl	b8b4 <memcmp>
    41a2:	2800      	cmp	r0, #0
    41a4:	d1ea      	bne.n	417c <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    41a6:	f109 39ff 	add.w	r9, r9, #4294967295
    41aa:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    41ae:	d1c2      	bne.n	4136 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    41b0:	4648      	mov	r0, r9
fail:
    41b2:	e003      	b.n	41bc <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    41b4:	7860      	ldrb	r0, [r4, #1]
    41b6:	fab0 f080 	clz	r0, r0
    41ba:	0940      	lsrs	r0, r0, #5

done:
  return true;
}
    41bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    41c0:	2001      	movs	r0, #1
}
    41c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41c6:	bf00      	nop
    41c8:	2002b458 	.word	0x2002b458

000041cc <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    41cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41d0:	ed2d 8b02 	vpush	{d8}
    41d4:	b08b      	sub	sp, #44	; 0x2c
    41d6:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t freeIndex = 0;
  uint16_t freeTotal;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    41da:	688b      	ldr	r3, [r1, #8]
    41dc:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    41de:	780b      	ldrb	r3, [r1, #0]
    41e0:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    41e4:	d052      	beq.n	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  bool isOpen() const { return m_attributes; }
    41e6:	9b02      	ldr	r3, [sp, #8]
    41e8:	781b      	ldrb	r3, [r3, #0]
    41ea:	2b00      	cmp	r3, #0
    41ec:	d14e      	bne.n	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    41ee:	68d3      	ldr	r3, [r2, #12]
    41f0:	4690      	mov	r8, r2
    41f2:	4a9c      	ldr	r2, [pc, #624]	; (4464 <FatFile::open(FatFile*, FatLfn_t*, int)+0x298>)
    41f4:	460e      	mov	r6, r1
    41f6:	330c      	adds	r3, #12
    41f8:	fba2 2303 	umull	r2, r3, r2, r3
    41fc:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    4200:	f898 3011 	ldrb.w	r3, [r8, #17]
    4204:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12) / 13;
    4206:	9204      	str	r2, [sp, #16]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    4208:	f000 80ab 	beq.w	4362 <FatFile::open(FatFile*, FatLfn_t*, int)+0x196>
    420c:	1c57      	adds	r7, r2, #1
    420e:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    4210:	2300      	movs	r3, #0
  void rewind() { seekSet(0); }
    4212:	4630      	mov	r0, r6
    4214:	4619      	mov	r1, r3
    4216:	461c      	mov	r4, r3
    4218:	9306      	str	r3, [sp, #24]
    421a:	f7ff fc2b 	bl	3a74 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    421e:	f108 0312 	add.w	r3, r8, #18
  uint8_t order = 0;
    4222:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    4224:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    4226:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4228:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    422c:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    422e:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    4230:	2100      	movs	r1, #0
    4232:	4630      	mov	r0, r6
    4234:	f7ff fbfc 	bl	3a30 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    4238:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    423c:	4603      	mov	r3, r0
    423e:	b318      	cbz	r0, 4288 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    4240:	7802      	ldrb	r2, [r0, #0]
    4242:	2ae5      	cmp	r2, #229	; 0xe5
    4244:	d028      	beq.n	4298 <FatFile::open(FatFile*, FatLfn_t*, int)+0xcc>
    4246:	b33a      	cbz	r2, 4298 <FatFile::open(FatFile*, FatLfn_t*, int)+0xcc>
        freeFound = 0;
    4248:	42bc      	cmp	r4, r7
    424a:	bf38      	it	cc
    424c:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    424e:	2a2e      	cmp	r2, #46	; 0x2e
    4250:	d02a      	beq.n	42a8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
}
static inline uint8_t isFatLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    4252:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isFatLongName(dir)) {
    4256:	f1bc 0f0f 	cmp.w	ip, #15
    425a:	d057      	beq.n	430c <FatFile::open(FatFile*, FatLfn_t*, int)+0x140>
    } else if (isFatFileOrSubdir(dir)) {
    425c:	f01c 0c08 	ands.w	ip, ip, #8
    4260:	d122      	bne.n	42a8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
      if (lfnOrd) {
    4262:	f1b9 0f00 	cmp.w	r9, #0
    4266:	d17e      	bne.n	4366 <FatFile::open(FatFile*, FatLfn_t*, int)+0x19a>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4268:	220b      	movs	r2, #11
    426a:	ee18 1a10 	vmov	r1, s16
    426e:	f007 fb21 	bl	b8b4 <memcmp>
    4272:	2800      	cmp	r0, #0
    4274:	d1db      	bne.n	422e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    4276:	f898 3011 	ldrb.w	r3, [r8, #17]
    427a:	f013 0301 	ands.w	r3, r3, #1
    427e:	f000 80e9 	beq.w	4454 <FatFile::open(FatFile*, FatLfn_t*, int)+0x288>
          goto found;
        }
        fnameFound = true;
    4282:	2301      	movs	r3, #1
    4284:	9305      	str	r3, [sp, #20]
    4286:	e7d2      	b.n	422e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    4288:	7873      	ldrb	r3, [r6, #1]
    428a:	b183      	cbz	r3, 42ae <FatFile::open(FatFile*, FatLfn_t*, int)+0xe2>
    goto fail;
  }
  return true;

fail:
  return false;
    428c:	2000      	movs	r0, #0
}
    428e:	b00b      	add	sp, #44	; 0x2c
    4290:	ecbd 8b02 	vpop	{d8}
    4294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    4298:	2c00      	cmp	r4, #0
    429a:	bf08      	it	eq
    429c:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    429e:	42bc      	cmp	r4, r7
    42a0:	d201      	bcs.n	42a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xda>
        freeFound++;
    42a2:	3401      	adds	r4, #1
    42a4:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    42a6:	b112      	cbz	r2, 42ae <FatFile::open(FatFile*, FatLfn_t*, int)+0xe2>
      lfnOrd = 0;
    42a8:	f04f 0900 	mov.w	r9, #0
    42ac:	e7bf      	b.n	422e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    42ae:	9b03      	ldr	r3, [sp, #12]
    42b0:	059a      	lsls	r2, r3, #22
    42b2:	d5eb      	bpl.n	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    42b4:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    42b8:	3b01      	subs	r3, #1
    42ba:	2b01      	cmp	r3, #1
    42bc:	d8e6      	bhi.n	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  if (freeFound == 0) {
    42be:	2c00      	cmp	r4, #0
    42c0:	bf08      	it	eq
    42c2:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    42c4:	42bc      	cmp	r4, r7
    42c6:	d303      	bcc.n	42d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x104>
    42c8:	e00c      	b.n	42e4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x118>
    freeFound++;
    42ca:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    42cc:	42a7      	cmp	r7, r4
    42ce:	d009      	beq.n	42e4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x118>
    dir = dirFile->readDirCache();
    42d0:	2100      	movs	r1, #0
    42d2:	4630      	mov	r0, r6
    42d4:	f7ff fbac 	bl	3a30 <FatFile::readDirCache(bool)>
    freeFound++;
    42d8:	1c63      	adds	r3, r4, #1
    if (!dir) {
    42da:	2800      	cmp	r0, #0
    42dc:	d1f5      	bne.n	42ca <FatFile::open(FatFile*, FatLfn_t*, int)+0xfe>
      if (dirFile->getError()) {
    42de:	7873      	ldrb	r3, [r6, #1]
    42e0:	2b00      	cmp	r3, #0
    42e2:	d1d3      	bne.n	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  freeTotal = freeFound;
    42e4:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
    42e6:	b2bd      	uxth	r5, r7
    42e8:	42a7      	cmp	r7, r4
    42ea:	d95e      	bls.n	43aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x1de>
    42ec:	f8dd 901c 	ldr.w	r9, [sp, #28]
    42f0:	e006      	b.n	4300 <FatFile::open(FatFile*, FatLfn_t*, int)+0x134>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
    42f2:	f899 3004 	ldrb.w	r3, [r9, #4]
    freeTotal += vol->dirEntriesPerCluster();
    42f6:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    42fa:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
    42fc:	42a5      	cmp	r5, r4
    42fe:	d954      	bls.n	43aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x1de>
    if (!dirFile->addDirCluster()) {
    4300:	4630      	mov	r0, r6
    4302:	f7ff f899 	bl	3438 <FatFile::addDirCluster()>
    4306:	2800      	cmp	r0, #0
    4308:	d1f3      	bne.n	42f2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x126>
    430a:	e7bf      	b.n	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
      if (!lfnOrd) {
    430c:	f1b9 0f00 	cmp.w	r9, #0
    4310:	d11a      	bne.n	4348 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
        order = ldir->order & 0X1F;
    4312:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    4316:	9904      	ldr	r1, [sp, #16]
    4318:	4559      	cmp	r1, fp
    431a:	d188      	bne.n	422e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    431c:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    4320:	d085      	beq.n	422e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    4322:	7b43      	ldrb	r3, [r0, #13]
    4324:	4689      	mov	r9, r1
    4326:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    4328:	f1bb 0f01 	cmp.w	fp, #1
    432c:	f47f af7f 	bne.w	422e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    4330:	1c69      	adds	r1, r5, #1
    4332:	464b      	mov	r3, r9
    4334:	4642      	mov	r2, r8
    4336:	4630      	mov	r0, r6
    4338:	b289      	uxth	r1, r1
    433a:	f7ff fd49 	bl	3dd0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    433e:	2800      	cmp	r0, #0
    4340:	bf08      	it	eq
    4342:	f04f 0900 	moveq.w	r9, #0
    4346:	e772      	b.n	422e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    4348:	f10b 3bff 	add.w	fp, fp, #4294967295
    434c:	fa5f fb8b 	uxtb.w	fp, fp
    4350:	455a      	cmp	r2, fp
    4352:	d1a9      	bne.n	42a8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
    4354:	7b43      	ldrb	r3, [r0, #13]
    4356:	9a06      	ldr	r2, [sp, #24]
    4358:	4293      	cmp	r3, r2
    435a:	d0e5      	beq.n	4328 <FatFile::open(FatFile*, FatLfn_t*, int)+0x15c>
      lfnOrd = 0;
    435c:	f04f 0900 	mov.w	r9, #0
    4360:	e765      	b.n	422e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    4362:	2701      	movs	r7, #1
    4364:	e754      	b.n	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    4366:	f1bb 0f01 	cmp.w	fp, #1
    436a:	d18f      	bne.n	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    for (uint8_t i = 0; i < 11; i++) {
    436c:	300a      	adds	r0, #10
    436e:	e001      	b.n	4374 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a8>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4370:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4374:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    4378:	4298      	cmp	r0, r3
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    437a:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    437e:	fa52 f281 	uxtab	r2, r2, r1
    4382:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    4386:	d1f3      	bne.n	4370 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a4>
    4388:	9b06      	ldr	r3, [sp, #24]
    438a:	4563      	cmp	r3, ip
    438c:	f47f af7e 	bne.w	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    4390:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    4392:	9b03      	ldr	r3, [sp, #12]
    4394:	0519      	lsls	r1, r3, #20
    4396:	f53f af79 	bmi.w	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    439a:	9b03      	ldr	r3, [sp, #12]
    439c:	462a      	mov	r2, r5
    439e:	4631      	mov	r1, r6
    43a0:	9802      	ldr	r0, [sp, #8]
    43a2:	9700      	str	r7, [sp, #0]
    43a4:	f7ff fbbe 	bl	3b24 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    43a8:	e771      	b.n	428e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (fnameFound) {
    43aa:	9b05      	ldr	r3, [sp, #20]
    43ac:	b133      	cbz	r3, 43bc <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f0>
    if (!dirFile->makeUniqueSfn(fname)) {
    43ae:	4641      	mov	r1, r8
    43b0:	4630      	mov	r0, r6
    43b2:	f7ff feb1 	bl	4118 <FatFile::makeUniqueSfn(FatLfn_t*)>
    43b6:	2800      	cmp	r0, #0
    43b8:	f43f af68 	beq.w	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  lfnOrd = freeNeed - 1;
    43bc:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    43be:	4642      	mov	r2, r8
    43c0:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    43c2:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    43c4:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    43c8:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    43ca:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    43cc:	4629      	mov	r1, r5
    43ce:	f7ff fd61 	bl	3e94 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    43d2:	2800      	cmp	r0, #0
    43d4:	f43f af5a 	beq.w	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    43d8:	0169      	lsls	r1, r5, #5
    43da:	4630      	mov	r0, r6
    43dc:	f7ff fb4a 	bl	3a74 <FatFile::seekSet(unsigned long)>
    43e0:	2800      	cmp	r0, #0
    43e2:	f43f af53 	beq.w	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    43e6:	2100      	movs	r1, #0
    43e8:	4630      	mov	r0, r6
    43ea:	f7ff fb21 	bl	3a30 <FatFile::readDirCache(bool)>
  if (!dir) {
    43ee:	4604      	mov	r4, r0
    43f0:	2800      	cmp	r0, #0
    43f2:	f43f af4b 	beq.w	428c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  memset(dir, 0, sizeof(DirFat_t));
    43f6:	2220      	movs	r2, #32
    43f8:	2100      	movs	r1, #0
    43fa:	f007 fb07 	bl	ba0c <memset>
  memcpy(dir->name, fname->sfn, 11);
    43fe:	f8d8 2012 	ldr.w	r2, [r8, #18]
    4402:	f8d8 3016 	ldr.w	r3, [r8, #22]
    4406:	6022      	str	r2, [r4, #0]
    4408:	6063      	str	r3, [r4, #4]
    440a:	f898 301c 	ldrb.w	r3, [r8, #28]
    440e:	f8b8 201a 	ldrh.w	r2, [r8, #26]
    4412:	72a3      	strb	r3, [r4, #10]
    4414:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    4416:	f898 3011 	ldrb.w	r3, [r8, #17]
    441a:	f003 0318 	and.w	r3, r3, #24
    441e:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    4420:	4b11      	ldr	r3, [pc, #68]	; (4468 <FatFile::open(FatFile*, FatLfn_t*, int)+0x29c>)
    4422:	681b      	ldr	r3, [r3, #0]
    4424:	b1c3      	cbz	r3, 4458 <FatFile::open(FatFile*, FatLfn_t*, int)+0x28c>
    FsDateTime::callback(&date, &time, &ms10);
    4426:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    442a:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    442e:	a809      	add	r0, sp, #36	; 0x24
    4430:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    4432:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    4436:	8223      	strh	r3, [r4, #16]
    4438:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    443c:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    443e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    4442:	7363      	strb	r3, [r4, #13]
    4444:	9a07      	ldr	r2, [sp, #28]
    4446:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    444a:	f043 0301 	orr.w	r3, r3, #1
    444e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  void cacheDirty() { m_cache.dirty(); }
    4452:	e7a2      	b.n	439a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1ce>
    4454:	461f      	mov	r7, r3
    4456:	e79c      	b.n	4392 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
    4458:	f245 6321 	movw	r3, #22049	; 0x5621
    445c:	8223      	strh	r3, [r4, #16]
    445e:	8323      	strh	r3, [r4, #24]
    4460:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    4462:	e7ef      	b.n	4444 <FatFile::open(FatFile*, FatLfn_t*, int)+0x278>
    4464:	4ec4ec4f 	.word	0x4ec4ec4f
    4468:	2002a86c 	.word	0x2002a86c

0000446c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    446c:	7808      	ldrb	r0, [r1, #0]
    446e:	2820      	cmp	r0, #32
                            const char** ptr) {
    4470:	b430      	push	{r4, r5}
  while (*path == ' ') {
    4472:	d103      	bne.n	447c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    4474:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    4478:	2c20      	cmp	r4, #32
    447a:	d0fb      	beq.n	4474 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    447c:	2500      	movs	r5, #0
  fname->begin = path;
    447e:	6011      	str	r1, [r2, #0]
  fname->len = 0;
    4480:	60d5      	str	r5, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
    4482:	780c      	ldrb	r4, [r1, #0]
    4484:	2c2f      	cmp	r4, #47	; 0x2f
    4486:	d00f      	beq.n	44a8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    4488:	b174      	cbz	r4, 44a8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    448a:	4823      	ldr	r0, [pc, #140]	; (4518 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>)
      DBG_FAIL_MACRO;
      goto fail;
    }
#else   // USE_UTF8_LONG_NAMES
    uint8_t cp = *path++;
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    448c:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t cp = *path++;
    4490:	f101 0101 	add.w	r1, r1, #1
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    4494:	d108      	bne.n	44a8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    4496:	2c3c      	cmp	r4, #60	; 0x3c
    4498:	d82f      	bhi.n	44fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8e>
    449a:	2c21      	cmp	r4, #33	; 0x21
    449c:	d807      	bhi.n	44ae <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x42>
    449e:	f104 3cff 	add.w	ip, r4, #4294967295
    44a2:	f1bc 0f1e 	cmp.w	ip, #30
    44a6:	d80b      	bhi.n	44c0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  *ptr = path;
  return makeSFN(fname);

fail:
  return false;
}
    44a8:	2000      	movs	r0, #0
    44aa:	bc30      	pop	{r4, r5}
    44ac:	4770      	bx	lr
    44ae:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    44b2:	fa5f fc8c 	uxtb.w	ip, ip
    44b6:	fa20 fc0c 	lsr.w	ip, r0, ip
    44ba:	f01c 0f01 	tst.w	ip, #1
    44be:	d1f3      	bne.n	44a8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    if (cp != '.' && cp != ' ') {
    44c0:	2c2e      	cmp	r4, #46	; 0x2e
    len++;
    44c2:	f105 0501 	add.w	r5, r5, #1
    if (cp != '.' && cp != ' ') {
    44c6:	d001      	beq.n	44cc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    44c8:	2c20      	cmp	r4, #32
    44ca:	d11c      	bne.n	4506 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
  while (*path && !isDirSeparator(*path)) {
    44cc:	780c      	ldrb	r4, [r1, #0]
    44ce:	b10c      	cbz	r4, 44d4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    44d0:	2c2f      	cmp	r4, #47	; 0x2f
    44d2:	d1db      	bne.n	448c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    44d4:	68d0      	ldr	r0, [r2, #12]
    44d6:	3801      	subs	r0, #1
    44d8:	28fe      	cmp	r0, #254	; 0xfe
    44da:	d8e5      	bhi.n	44a8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    44dc:	2c20      	cmp	r4, #32
    44de:	d001      	beq.n	44e4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    44e0:	2c2f      	cmp	r4, #47	; 0x2f
    44e2:	d105      	bne.n	44f0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x84>
    44e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    44e8:	2820      	cmp	r0, #32
    44ea:	d0fb      	beq.n	44e4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    44ec:	282f      	cmp	r0, #47	; 0x2f
    44ee:	d0f9      	beq.n	44e4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
  return makeSFN(fname);
    44f0:	4610      	mov	r0, r2
  *ptr = path;
    44f2:	6019      	str	r1, [r3, #0]
}
    44f4:	bc30      	pop	{r4, r5}
  return makeSFN(fname);
    44f6:	f7ff bd5b 	b.w	3fb0 <FatFile::makeSFN(FatLfn_t*)>
    44fa:	2c5c      	cmp	r4, #92	; 0x5c
    44fc:	d0d4      	beq.n	44a8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    44fe:	d905      	bls.n	450c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa0>
    4500:	2c7c      	cmp	r4, #124	; 0x7c
    4502:	d0d1      	beq.n	44a8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    len++;
    4504:	3501      	adds	r5, #1
      fname->end = path;
    4506:	e9c2 1502 	strd	r1, r5, [r2, #8]
    450a:	e7df      	b.n	44cc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    450c:	3c3e      	subs	r4, #62	; 0x3e
    450e:	2c01      	cmp	r4, #1
    4510:	d8f8      	bhi.n	4504 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x98>
}
    4512:	2000      	movs	r0, #0
    4514:	bc30      	pop	{r4, r5}
    4516:	4770      	bx	lr
    4518:	05002101 	.word	0x05002101

0000451c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
  if (i < 5) {
    451c:	2a04      	cmp	r2, #4
    451e:	d804      	bhi.n	452a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    4520:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4524:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
    4528:	4770      	bx	lr
  } else if (i < 11) {
    452a:	2a0a      	cmp	r2, #10
    452c:	d803      	bhi.n	4536 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    452e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4532:	8890      	ldrh	r0, [r2, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    4534:	4770      	bx	lr
  } else if (i < 13) {
    4536:	2a0c      	cmp	r2, #12
    4538:	d803      	bhi.n	4542 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    453a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    453e:	88c8      	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    4540:	4770      	bx	lr
  return 0;
    4542:	2000      	movs	r0, #0
}
    4544:	4770      	bx	lr
    4546:	bf00      	nop

00004548 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4548:	b570      	push	{r4, r5, r6, lr}
  uint8_t fatType() const { return m_fatType; }
    454a:	79c3      	ldrb	r3, [r0, #7]
    454c:	4605      	mov	r5, r0
    454e:	460c      	mov	r4, r1
    4550:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    4552:	2b20      	cmp	r3, #32
    4554:	d019      	beq.n	458a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x42>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    4556:	2b10      	cmp	r3, #16
    4558:	d002      	beq.n	4560 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x18>
  }
  *value = next;
  return 1;

fail:
  return -1;
    455a:	f04f 30ff 	mov.w	r0, #4294967295
}
    455e:	bd70      	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    4560:	6983      	ldr	r3, [r0, #24]
    4562:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    4566:	f500 700d 	add.w	r0, r0, #564	; 0x234
    456a:	2202      	movs	r2, #2
    456c:	4419      	add	r1, r3
    456e:	f002 fdf5 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4572:	2800      	cmp	r0, #0
    4574:	d0f1      	beq.n	455a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    4576:	0061      	lsls	r1, r4, #1
  if (isEOC(next)) {
    4578:	69ea      	ldr	r2, [r5, #28]
    next = getLe16(pc + offset);
    457a:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
    457e:	5a43      	ldrh	r3, [r0, r1]
  if (isEOC(next)) {
    4580:	429a      	cmp	r2, r3
    4582:	d313      	bcc.n	45ac <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x64>
  return 1;
    4584:	2001      	movs	r0, #1
  *value = next;
    4586:	6033      	str	r3, [r6, #0]
}
    4588:	bd70      	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    458a:	6981      	ldr	r1, [r0, #24]
    458c:	2202      	movs	r2, #2
    458e:	f500 700d 	add.w	r0, r0, #564	; 0x234
    4592:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4596:	f002 fde1 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    459a:	2800      	cmp	r0, #0
    459c:	d0dd      	beq.n	455a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    459e:	00a1      	lsls	r1, r4, #2
  if (isEOC(next)) {
    45a0:	69ea      	ldr	r2, [r5, #28]
    next = getLe32(pc + offset);
    45a2:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    45a6:	5843      	ldr	r3, [r0, r1]
  if (isEOC(next)) {
    45a8:	429a      	cmp	r2, r3
    45aa:	d2eb      	bcs.n	4584 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x3c>
    return 0;
    45ac:	2000      	movs	r0, #0
}
    45ae:	bd70      	pop	{r4, r5, r6, pc}

000045b0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    45b0:	b538      	push	{r3, r4, r5, lr}
  uint8_t fatType() const { return m_fatType; }
    45b2:	79c3      	ldrb	r3, [r0, #7]
    45b4:	460c      	mov	r4, r1
    45b6:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    45b8:	2b20      	cmp	r3, #32
    45ba:	d015      	beq.n	45e8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x38>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    45bc:	2b10      	cmp	r3, #16
    45be:	d001      	beq.n	45c4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    45c0:	2000      	movs	r0, #0
}
    45c2:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    45c4:	6983      	ldr	r3, [r0, #24]
    45c6:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    45ca:	f500 700d 	add.w	r0, r0, #564	; 0x234
    45ce:	2203      	movs	r2, #3
    45d0:	4419      	add	r1, r3
    45d2:	f002 fdc3 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    45d6:	4603      	mov	r3, r0
    45d8:	2800      	cmp	r0, #0
    45da:	d0f1      	beq.n	45c0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    45dc:	0061      	lsls	r1, r4, #1
    return true;
    45de:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    45e0:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
    45e4:	525d      	strh	r5, [r3, r1]
}
    45e6:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    45e8:	6981      	ldr	r1, [r0, #24]
    45ea:	2203      	movs	r2, #3
    45ec:	f500 700d 	add.w	r0, r0, #564	; 0x234
    45f0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    45f4:	f002 fdb2 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    45f8:	4603      	mov	r3, r0
    45fa:	2800      	cmp	r0, #0
    45fc:	d0e0      	beq.n	45c0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    45fe:	00a1      	lsls	r1, r4, #2
    return true;
    4600:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    4602:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    4606:	505d      	str	r5, [r3, r1]
}
    4608:	bd38      	pop	{r3, r4, r5, pc}
    460a:	bf00      	nop

0000460c <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    460c:	2901      	cmp	r1, #1
    460e:	d90c      	bls.n	462a <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4610:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    4612:	69c4      	ldr	r4, [r0, #28]
    4614:	428c      	cmp	r4, r1
    4616:	d303      	bcc.n	4620 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    4618:	f85d 4b04 	ldr.w	r4, [sp], #4
    461c:	f7ff bf94 	b.w	4548 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    4620:	f04f 30ff 	mov.w	r0, #4294967295
    4624:	f85d 4b04 	ldr.w	r4, [sp], #4
    4628:	4770      	bx	lr
    462a:	f04f 30ff 	mov.w	r0, #4294967295
    462e:	4770      	bx	lr

00004630 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    4630:	2901      	cmp	r1, #1
    4632:	d90c      	bls.n	464e <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4634:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > m_lastCluster) {
    4636:	69c3      	ldr	r3, [r0, #28]
    4638:	460c      	mov	r4, r1
    463a:	428b      	cmp	r3, r1
    463c:	d305      	bcc.n	464a <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
  uint8_t fatType() const { return m_fatType; }
    463e:	79c3      	ldrb	r3, [r0, #7]
    4640:	4615      	mov	r5, r2
  if (fatType() == 32) {
    4642:	2b20      	cmp	r3, #32
    4644:	d017      	beq.n	4676 <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
  if (fatType() == 16) {
    4646:	2b10      	cmp	r3, #16
    4648:	d003      	beq.n	4652 <FatPartition::fatPut(unsigned long, unsigned long)+0x22>
  return false;
    464a:	2000      	movs	r0, #0
}
    464c:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    464e:	2000      	movs	r0, #0
}
    4650:	4770      	bx	lr
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    4652:	6983      	ldr	r3, [r0, #24]
    4654:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    4658:	f500 700d 	add.w	r0, r0, #564	; 0x234
    465c:	2203      	movs	r2, #3
    465e:	4419      	add	r1, r3
    4660:	f002 fd7c 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4664:	4603      	mov	r3, r0
    4666:	2800      	cmp	r0, #0
    4668:	d0ef      	beq.n	464a <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    466a:	0064      	lsls	r4, r4, #1
    return true;
    466c:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    466e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    4672:	531d      	strh	r5, [r3, r4]
}
    4674:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4676:	6981      	ldr	r1, [r0, #24]
    4678:	2203      	movs	r2, #3
    467a:	f500 700d 	add.w	r0, r0, #564	; 0x234
    467e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4682:	f002 fd6b 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4686:	4603      	mov	r3, r0
    4688:	2800      	cmp	r0, #0
    468a:	d0de      	beq.n	464a <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    468c:	00a4      	lsls	r4, r4, #2
    return true;
    468e:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    4690:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
    4694:	511d      	str	r5, [r3, r4]
}
    4696:	bd38      	pop	{r3, r4, r5, pc}

00004698 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    469c:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    469e:	b082      	sub	sp, #8
    46a0:	4605      	mov	r5, r0
    46a2:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    46a4:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    46a6:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    46a8:	d333      	bcc.n	4712 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    setStart = true;
    46aa:	2701      	movs	r7, #1
    find++;
    46ac:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    46ae:	69eb      	ldr	r3, [r5, #28]
    46b0:	aa01      	add	r2, sp, #4
    46b2:	4628      	mov	r0, r5
    46b4:	42a3      	cmp	r3, r4
    46b6:	d205      	bcs.n	46c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    46b8:	bb37      	cbnz	r7, 4708 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
      find = m_allocSearchStart;
    46ba:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    46bc:	2701      	movs	r7, #1
    find++;
    46be:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    46c0:	42a3      	cmp	r3, r4
    46c2:	d321      	bcc.n	4708 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (cluster < 2 || cluster > m_lastCluster) {
    46c4:	42a6      	cmp	r6, r4
    46c6:	bf18      	it	ne
    46c8:	2c01      	cmpne	r4, #1
    46ca:	4621      	mov	r1, r4
    46cc:	d91c      	bls.n	4708 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    46ce:	f7ff ff3b 	bl	4548 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    46d2:	2800      	cmp	r0, #0
    46d4:	db18      	blt.n	4708 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    if (fg && f == 0) {
    46d6:	d0e9      	beq.n	46ac <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    46d8:	9b01      	ldr	r3, [sp, #4]
    46da:	2b00      	cmp	r3, #0
    46dc:	d1e6      	bne.n	46ac <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    46de:	b107      	cbz	r7, 46e2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    46e0:	60ec      	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    46e2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    46e6:	4621      	mov	r1, r4
    46e8:	4628      	mov	r0, r5
    46ea:	f7ff ffa1 	bl	4630 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    46ee:	4607      	mov	r7, r0
    46f0:	b150      	cbz	r0, 4708 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (current) {
    46f2:	b916      	cbnz	r6, 46fa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  *next = find;
    46f4:	f8c8 4000 	str.w	r4, [r8]
  return true;
    46f8:	e007      	b.n	470a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (!fatPut(current, find)) {
    46fa:	4631      	mov	r1, r6
    46fc:	4628      	mov	r0, r5
    46fe:	4622      	mov	r2, r4
    4700:	f7ff ff96 	bl	4630 <FatPartition::fatPut(unsigned long, unsigned long)>
    4704:	2800      	cmp	r0, #0
    4706:	d1f5      	bne.n	46f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5c>
  return false;
    4708:	2700      	movs	r7, #0
}
    470a:	4638      	mov	r0, r7
    470c:	b002      	add	sp, #8
    470e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4712:	460c      	mov	r4, r1
    setStart = false;
    4714:	2700      	movs	r7, #0
    4716:	e7c9      	b.n	46ac <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>

00004718 <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    4718:	b570      	push	{r4, r5, r6, lr}
    471a:	4605      	mov	r5, r0
    471c:	b082      	sub	sp, #8
    471e:	460c      	mov	r4, r1
    4720:	e017      	b.n	4752 <FatPartition::freeChain(unsigned long)+0x3a>
  if (cluster < 2 || cluster > m_lastCluster) {
    4722:	69eb      	ldr	r3, [r5, #28]
    4724:	429c      	cmp	r4, r3
    4726:	d819      	bhi.n	475c <FatPartition::freeChain(unsigned long)+0x44>
    4728:	f7ff ff0e 	bl	4548 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    472c:	4606      	mov	r6, r0
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    472e:	4621      	mov	r1, r4
    4730:	2200      	movs	r2, #0
    4732:	2e00      	cmp	r6, #0
    4734:	4628      	mov	r0, r5
    4736:	db11      	blt.n	475c <FatPartition::freeChain(unsigned long)+0x44>
  if (cluster < 2 || cluster > m_lastCluster) {
    4738:	69eb      	ldr	r3, [r5, #28]
    473a:	429c      	cmp	r4, r3
    473c:	d80e      	bhi.n	475c <FatPartition::freeChain(unsigned long)+0x44>
    473e:	f7ff ff37 	bl	45b0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    4742:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    4744:	b150      	cbz	r0, 475c <FatPartition::freeChain(unsigned long)+0x44>
    if (cluster < m_allocSearchStart) {
    4746:	68eb      	ldr	r3, [r5, #12]
    4748:	42a3      	cmp	r3, r4
    }
    cluster = next;
    474a:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    474c:	bf88      	it	hi
    474e:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    4750:	b12e      	cbz	r6, 475e <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    4752:	2c01      	cmp	r4, #1
    4754:	4621      	mov	r1, r4
    4756:	aa01      	add	r2, sp, #4
    4758:	4628      	mov	r0, r5
    475a:	d8e2      	bhi.n	4722 <FatPartition::freeChain(unsigned long)+0xa>

  return true;

fail:
  return false;
    475c:	2000      	movs	r0, #0
}
    475e:	b002      	add	sp, #8
    4760:	bd70      	pop	{r4, r5, r6, pc}
    4762:	bf00      	nop

00004764 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4766:	461e      	mov	r6, r3
    m_sector = 0XFFFFFFFF;
    4768:	f04f 33ff 	mov.w	r3, #4294967295
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    476c:	f04f 0c00 	mov.w	ip, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4770:	4604      	mov	r4, r0
    4772:	62c3      	str	r3, [r0, #44]	; 0x2c
  m_allocSearchStart = 1;
  m_cache.init(dev);
    4774:	f100 0724 	add.w	r7, r0, #36	; 0x24
    4778:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  m_allocSearchStart = 1;
    477c:	2301      	movs	r3, #1
  m_blockDev = dev;
    477e:	6001      	str	r1, [r0, #0]
  m_fatType = 0;
    4780:	f880 c007 	strb.w	ip, [r0, #7]
    m_blockDev = blockDev;
    4784:	6281      	str	r1, [r0, #40]	; 0x28
    4786:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
    m_status = 0;
    478a:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
    478e:	f880 c234 	strb.w	ip, [r0, #564]	; 0x234
  m_allocSearchStart = 1;
    4792:	60c3      	str	r3, [r0, #12]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4794:	b1d2      	cbz	r2, 47cc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x68>
    if (part > 4) {
    4796:	2a04      	cmp	r2, #4
    4798:	4615      	mov	r5, r2
    479a:	d901      	bls.n	47a0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x3c>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    479c:	2000      	movs	r0, #0
}
    479e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
    47a0:	4662      	mov	r2, ip
    47a2:	4661      	mov	r1, ip
    47a4:	4638      	mov	r0, r7
    47a6:	f002 fcd9 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    47aa:	2800      	cmp	r0, #0
    47ac:	d0f6      	beq.n	479c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    MbrPart_t* mp = mbr->part + part - 1;
    47ae:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    47b2:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    47b6:	442b      	add	r3, r5
    47b8:	0119      	lsls	r1, r3, #4
    47ba:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    47be:	791a      	ldrb	r2, [r3, #4]
    47c0:	2a00      	cmp	r2, #0
    47c2:	d0eb      	beq.n	479c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    47c4:	5c42      	ldrb	r2, [r0, r1]
    47c6:	0652      	lsls	r2, r2, #25
    47c8:	d1e8      	bne.n	479c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    47ca:	689e      	ldr	r6, [r3, #8]
    47cc:	2200      	movs	r2, #0
    47ce:	4631      	mov	r1, r6
    47d0:	4638      	mov	r0, r7
    47d2:	f002 fcc3 	bl	715c <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    47d6:	2800      	cmp	r0, #0
    47d8:	d0e0      	beq.n	479c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    47da:	7c03      	ldrb	r3, [r0, #16]
    47dc:	2b02      	cmp	r3, #2
    47de:	d1dd      	bne.n	479c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    47e0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    47e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    47e8:	d1d8      	bne.n	479c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    47ea:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    47ec:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    47ee:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    47f0:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    47f2:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    47f4:	f04f 0300 	mov.w	r3, #0
    47f8:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    47fa:	d041      	beq.n	4880 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x11c>
    47fc:	2201      	movs	r2, #1
    47fe:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    4800:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4802:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    4804:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4806:	4291      	cmp	r1, r2
    4808:	d004      	beq.n	4814 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb0>
    if (tmp == 0) {
    480a:	2b08      	cmp	r3, #8
    480c:	d1f7      	bne.n	47fe <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x9a>
  return false;
    480e:	2000      	movs	r0, #0
    4810:	71a3      	strb	r3, [r4, #6]
}
    4812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  countOfClusters >>= m_sectorsPerClusterShift;
    4814:	461d      	mov	r5, r3
    4816:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    4818:	8ac1      	ldrh	r1, [r0, #22]
    481a:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    481c:	b909      	cbnz	r1, 4822 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xbe>
    481e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    4820:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    4822:	89c3      	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    4824:	f8b0 2011 	ldrh.w	r2, [r0, #17]
    4828:	4433      	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    482a:	8122      	strh	r2, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    482c:	0152      	lsls	r2, r2, #5
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    482e:	61a3      	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    4830:	eb03 0341 	add.w	r3, r3, r1, lsl #1
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    4834:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    4838:	6223      	str	r3, [r4, #32]
      m_rootDirStart +
    483a:	eb03 2352 	add.w	r3, r3, r2, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    483e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector =
    4842:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    4844:	b902      	cbnz	r2, 4848 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe4>
  return *reinterpret_cast<const uint32_t*>(src);
    4846:	6a02      	ldr	r2, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    4848:	1af3      	subs	r3, r6, r3
    484a:	4413      	add	r3, r2
  countOfClusters >>= m_sectorsPerClusterShift;
    484c:	40eb      	lsrs	r3, r5
  m_lastCluster = countOfClusters + 1;
    484e:	1c5a      	adds	r2, r3, #1
    4850:	61e2      	str	r2, [r4, #28]
  if (countOfClusters < 4085) {
    4852:	f640 72f4 	movw	r2, #4084	; 0xff4
    4856:	4293      	cmp	r3, r2
    4858:	d90c      	bls.n	4874 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x110>
  } else if (countOfClusters < 65525) {
    485a:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    485e:	4293      	cmp	r3, r2
    4860:	d90c      	bls.n	487c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x118>
    4862:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    4864:	2320      	movs	r3, #32
    4866:	6222      	str	r2, [r4, #32]
  return true;
    4868:	2001      	movs	r0, #1
    m_fatType = 16;
    486a:	71e3      	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    486c:	6321      	str	r1, [r4, #48]	; 0x30
    486e:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    4872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 12;
    4874:	230c      	movs	r3, #12
  return false;
    4876:	2000      	movs	r0, #0
    m_fatType = 12;
    4878:	71e3      	strb	r3, [r4, #7]
}
    487a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    487c:	2310      	movs	r3, #16
    487e:	e7f3      	b.n	4868 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x104>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4880:	461d      	mov	r5, r3
    4882:	e7c9      	b.n	4818 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb4>

00004884 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char* path) {
    4884:	b530      	push	{r4, r5, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    4886:	f200 4444 	addw	r4, r0, #1092	; 0x444
    488a:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    488c:	2300      	movs	r3, #0
    488e:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    4890:	a801      	add	r0, sp, #4
    4892:	4621      	mov	r1, r4
    4894:	9301      	str	r3, [sp, #4]
    4896:	f7fe ff43 	bl	3720 <FatFile::open(FatFile*, char const*, int)>
    489a:	4605      	mov	r5, r0
    489c:	b198      	cbz	r0, 48c6 <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    489e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    48a2:	f013 03d0 	ands.w	r3, r3, #208	; 0xd0
    48a6:	d011      	beq.n	48cc <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    48a8:	f10d 0e04 	add.w	lr, sp, #4
    48ac:	46a4      	mov	ip, r4
    48ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    48b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    48b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    48ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    48be:	f8de 3000 	ldr.w	r3, [lr]
    48c2:	f8cc 3000 	str.w	r3, [ip]
  return true;

fail:
  return false;
}
    48c6:	4628      	mov	r0, r5
    48c8:	b00b      	add	sp, #44	; 0x2c
    48ca:	bd30      	pop	{r4, r5, pc}
  return false;
    48cc:	461d      	mov	r5, r3
}
    48ce:	4628      	mov	r0, r5
    48d0:	b00b      	add	sp, #44	; 0x2c
    48d2:	bd30      	pop	{r4, r5, pc}

000048d4 <FsBaseFile::operator=(FsBaseFile const&)>:
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) {
    48d4:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    48d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48d8:	4604      	mov	r4, r0
  if (this == &from) {
    48da:	d01b      	beq.n	4914 <FsBaseFile::operator=(FsBaseFile const&)+0x40>
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    48dc:	6b80      	ldr	r0, [r0, #56]	; 0x38
    48de:	460d      	mov	r5, r1
    48e0:	b1d0      	cbz	r0, 4918 <FsBaseFile::operator=(FsBaseFile const&)+0x44>
    48e2:	f7fe fde5 	bl	34b0 <FatFile::close()>
  m_fFile = nullptr;
    48e6:	2600      	movs	r6, #0
    48e8:	63a6      	str	r6, [r4, #56]	; 0x38
  if (from.m_fFile) {
    48ea:	6baf      	ldr	r7, [r5, #56]	; 0x38
  m_xFile = nullptr;
    48ec:	63e6      	str	r6, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    48ee:	b1cf      	cbz	r7, 4924 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    48f0:	4621      	mov	r1, r4
    48f2:	2024      	movs	r0, #36	; 0x24
    48f4:	f000 f8a4 	bl	4a40 <operator new(unsigned int, unsigned long*)>
    48f8:	8006      	strh	r6, [r0, #0]
    48fa:	7086      	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    48fc:	4684      	mov	ip, r0
    m_fFile = new (m_fileMem) FatFile;
    48fe:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    4900:	6bad      	ldr	r5, [r5, #56]	; 0x38
    4902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    490a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    490e:	682b      	ldr	r3, [r5, #0]
    4910:	f8cc 3000 	str.w	r3, [ip]
}
    4914:	4620      	mov	r0, r4
    4916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4918:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    491a:	2800      	cmp	r0, #0
    491c:	d0e3      	beq.n	48e6 <FsBaseFile::operator=(FsBaseFile const&)+0x12>
    491e:	f7fd fa37 	bl	1d90 <ExFatFile::close()>
    4922:	e7e0      	b.n	48e6 <FsBaseFile::operator=(FsBaseFile const&)+0x12>
  } else if (from.m_xFile) {
    4924:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    4926:	2b00      	cmp	r3, #0
    4928:	d0f4      	beq.n	4914 <FsBaseFile::operator=(FsBaseFile const&)+0x40>
    m_xFile = new (m_fileMem) ExFatFile;
    492a:	4621      	mov	r1, r4
    492c:	2038      	movs	r0, #56	; 0x38
    492e:	f000 f887 	bl	4a40 <operator new(unsigned int, unsigned long*)>
    4932:	f880 7031 	strb.w	r7, [r0, #49]	; 0x31
    4936:	8647      	strh	r7, [r0, #50]	; 0x32
    4938:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    493a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    493c:	f103 0730 	add.w	r7, r3, #48	; 0x30
    4940:	681e      	ldr	r6, [r3, #0]
    4942:	3310      	adds	r3, #16
    4944:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    4948:	3010      	adds	r0, #16
    494a:	f853 1c08 	ldr.w	r1, [r3, #-8]
    494e:	f853 2c04 	ldr.w	r2, [r3, #-4]
    4952:	42bb      	cmp	r3, r7
    4954:	f840 6c10 	str.w	r6, [r0, #-16]
    4958:	f840 5c0c 	str.w	r5, [r0, #-12]
    495c:	f840 1c08 	str.w	r1, [r0, #-8]
    4960:	f840 2c04 	str.w	r2, [r0, #-4]
    4964:	d1ec      	bne.n	4940 <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    4966:	681b      	ldr	r3, [r3, #0]
    4968:	6003      	str	r3, [r0, #0]
}
    496a:	4620      	mov	r0, r4
    496c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    496e:	bf00      	nop

00004970 <FsBaseFile::close()>:
bool FsBaseFile::close() {
    4970:	b510      	push	{r4, lr}
    4972:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4974:	6b80      	ldr	r0, [r0, #56]	; 0x38
    4976:	b128      	cbz	r0, 4984 <FsBaseFile::close()+0x14>
    4978:	f7fe fd9a 	bl	34b0 <FatFile::close()>
  m_fFile = nullptr;
    497c:	2300      	movs	r3, #0
  m_xFile = nullptr;
    497e:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
  return rtn;
}
    4982:	bd10      	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4984:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4986:	b128      	cbz	r0, 4994 <FsBaseFile::close()+0x24>
    4988:	f7fd fa02 	bl	1d90 <ExFatFile::close()>
  m_fFile = nullptr;
    498c:	2300      	movs	r3, #0
  m_xFile = nullptr;
    498e:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
    4992:	bd10      	pop	{r4, pc}
  m_fFile = nullptr;
    4994:	2300      	movs	r3, #0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4996:	2001      	movs	r0, #1
  m_xFile = nullptr;
    4998:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
    499c:	bd10      	pop	{r4, pc}
    499e:	bf00      	nop

000049a0 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    49a0:	2900      	cmp	r1, #0
    49a2:	d04b      	beq.n	4a3c <FsBaseFile::open(FsVolume*, char const*, int)+0x9c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    49a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    49a8:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    49aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
    49ac:	460d      	mov	r5, r1
    49ae:	4690      	mov	r8, r2
    49b0:	461f      	mov	r7, r3
    49b2:	b1d0      	cbz	r0, 49ea <FsBaseFile::open(FsVolume*, char const*, int)+0x4a>
    49b4:	f7fe fd7c 	bl	34b0 <FatFile::close()>
  m_fFile = nullptr;
    49b8:	2600      	movs	r6, #0
    return false;
  }
  close();
  if (vol->m_fVol) {
    49ba:	f8d5 9480 	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    49be:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    49c2:	f1b9 0f00 	cmp.w	r9, #0
    49c6:	d01d      	beq.n	4a04 <FsBaseFile::open(FsVolume*, char const*, int)+0x64>
    m_fFile = new (m_fileMem) FatFile;
    49c8:	4621      	mov	r1, r4
    49ca:	2024      	movs	r0, #36	; 0x24
    49cc:	f000 f838 	bl	4a40 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    49d0:	463b      	mov	r3, r7
    49d2:	8006      	strh	r6, [r0, #0]
    49d4:	4642      	mov	r2, r8
    49d6:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    49d8:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    49da:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    49de:	f7fe ff1b 	bl	3818 <FatFile::open(FatVolume*, char const*, int)>
    49e2:	bb40      	cbnz	r0, 4a36 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
      return true;
    }
    m_fFile = nullptr;
    49e4:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    49e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    49ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    49ec:	2800      	cmp	r0, #0
    49ee:	d0e3      	beq.n	49b8 <FsBaseFile::open(FsVolume*, char const*, int)+0x18>
    49f0:	f7fd f9ce 	bl	1d90 <ExFatFile::close()>
  m_fFile = nullptr;
    49f4:	2600      	movs	r6, #0
  if (vol->m_fVol) {
    49f6:	f8d5 9480 	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    49fa:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    49fe:	f1b9 0f00 	cmp.w	r9, #0
    4a02:	d1e1      	bne.n	49c8 <FsBaseFile::open(FsVolume*, char const*, int)+0x28>
  } else if (vol->m_xVol) {
    4a04:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    4a08:	b193      	cbz	r3, 4a30 <FsBaseFile::open(FsVolume*, char const*, int)+0x90>
    m_xFile = new (m_fileMem) ExFatFile;
    4a0a:	4621      	mov	r1, r4
    4a0c:	2038      	movs	r0, #56	; 0x38
    4a0e:	f000 f817 	bl	4a40 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4a12:	463b      	mov	r3, r7
    4a14:	f880 9031 	strb.w	r9, [r0, #49]	; 0x31
    4a18:	4642      	mov	r2, r8
    4a1a:	f8a0 9032 	strh.w	r9, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    4a1e:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4a20:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    4a24:	f7fd fddc 	bl	25e0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4a28:	b928      	cbnz	r0, 4a36 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
    m_xFile = nullptr;
    4a2a:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    4a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    4a30:	2000      	movs	r0, #0
}
    4a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return true;
    4a36:	2001      	movs	r0, #1
}
    4a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    4a3c:	2000      	movs	r0, #0
}
    4a3e:	4770      	bx	lr

00004a40 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    4a40:	4608      	mov	r0, r1
    4a42:	4770      	bx	lr

00004a44 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    4a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
    4a48:	2500      	movs	r5, #0
                     uint32_t volStart) {
    4a4a:	4606      	mov	r6, r0
    4a4c:	460f      	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
    4a4e:	4601      	mov	r1, r0
  m_fVol = nullptr;
    4a50:	f8c0 5480 	str.w	r5, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    4a54:	f44f 6090 	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
    4a58:	4698      	mov	r8, r3
    4a5a:	f8dd a020 	ldr.w	sl, [sp, #32]
    4a5e:	4691      	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    4a60:	f7ff ffee 	bl	4a40 <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    4a64:	f04f 33ff 	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    4a68:	6045      	str	r5, [r0, #4]
    m_status = 0;
    4a6a:	7005      	strb	r5, [r0, #0]
    if (!init(dev, part, volStart)) {
    4a6c:	4642      	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    4a6e:	6083      	str	r3, [r0, #8]
    4a70:	4639      	mov	r1, r7
    4a72:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
    4a76:	4653      	mov	r3, sl
    m_blockDev = blockDev;
    4a78:	f8c0 5214 	str.w	r5, [r0, #532]	; 0x214
    4a7c:	4604      	mov	r4, r0
    m_status = 0;
    4a7e:	f880 5210 	strb.w	r5, [r0, #528]	; 0x210
  ExFatPartition() = default;
    4a82:	f880 5444 	strb.w	r5, [r0, #1092]	; 0x444
    4a86:	f880 5479 	strb.w	r5, [r0, #1145]	; 0x479
    4a8a:	f8a0 547a 	strh.w	r5, [r0, #1146]	; 0x47a
    4a8e:	f8c6 0484 	str.w	r0, [r6, #1156]	; 0x484
    4a92:	f7fe fba7 	bl	31e4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4a96:	2800      	cmp	r0, #0
    4a98:	d13e      	bne.n	4b18 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xd4>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    4a9a:	2500      	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    4a9c:	4631      	mov	r1, r6
    4a9e:	f44f 608d 	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
    4aa2:	f8c6 5484 	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    4aa6:	f7ff ffcb 	bl	4a40 <operator new(unsigned int, unsigned long*)>
  FatPartition() = default;
    4aaa:	71c5      	strb	r5, [r0, #7]
    m_blockDev = blockDev;
    4aac:	6285      	str	r5, [r0, #40]	; 0x28
    if (!init(dev, part, volStart)) {
    4aae:	4653      	mov	r3, sl
    m_status = 0;
    4ab0:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
    4ab4:	4642      	mov	r2, r8
    m_blockDev = blockDev;
    4ab6:	f8c0 5238 	str.w	r5, [r0, #568]	; 0x238
    4aba:	4639      	mov	r1, r7
    m_status = 0;
    4abc:	f880 5234 	strb.w	r5, [r0, #564]	; 0x234
    4ac0:	4604      	mov	r4, r0
    4ac2:	f8a0 5444 	strh.w	r5, [r0, #1092]	; 0x444
    4ac6:	f880 5446 	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    4aca:	f04f 35ff 	mov.w	r5, #4294967295
    4ace:	62c5      	str	r5, [r0, #44]	; 0x2c
    4ad0:	f8c0 523c 	str.w	r5, [r0, #572]	; 0x23c
    4ad4:	f8c6 0480 	str.w	r0, [r6, #1152]	; 0x480
    4ad8:	f7ff fe44 	bl	4764 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4adc:	b928      	cbnz	r0, 4aea <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xa6>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    4ade:	2300      	movs	r3, #0
  return false;
    4ae0:	4618      	mov	r0, r3
  m_fVol = nullptr;
    4ae2:	f8c6 3480 	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    4ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    4aea:	f204 4544 	addw	r5, r4, #1092	; 0x444
    4aee:	4628      	mov	r0, r5
    4af0:	f7fe fcde 	bl	34b0 <FatFile::close()>
    return m_vwd.openRoot(this);
    4af4:	4621      	mov	r1, r4
    4af6:	4628      	mov	r0, r5
    4af8:	f7fe fe96 	bl	3828 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    4afc:	2800      	cmp	r0, #0
    4afe:	d0ee      	beq.n	4ade <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x9a>
    if (setCwv || !m_cwv) {
    4b00:	4b12      	ldr	r3, [pc, #72]	; (4b4c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
    4b02:	681a      	ldr	r2, [r3, #0]
    4b04:	b9ba      	cbnz	r2, 4b36 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf2>
      m_cwv = this;
    4b06:	601c      	str	r4, [r3, #0]
  if (setCwv || !m_cwv) {
    4b08:	4b11      	ldr	r3, [pc, #68]	; (4b50 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    4b0a:	f1b9 0f00 	cmp.w	r9, #0
    4b0e:	d016      	beq.n	4b3e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfa>
  return true;
    4b10:	2001      	movs	r0, #1
    m_cwv = this;
    4b12:	601e      	str	r6, [r3, #0]
}
    4b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    4b18:	f504 6589 	add.w	r5, r4, #1096	; 0x448
    4b1c:	4628      	mov	r0, r5
    4b1e:	f7fd f937 	bl	1d90 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    4b22:	4621      	mov	r1, r4
    4b24:	4628      	mov	r0, r5
    4b26:	f7fd f93d 	bl	1da4 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    4b2a:	2800      	cmp	r0, #0
    4b2c:	d0b5      	beq.n	4a9a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
    if (setCwv || !m_cwv) {
    4b2e:	4b09      	ldr	r3, [pc, #36]	; (4b54 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x110>)
    4b30:	681a      	ldr	r2, [r3, #0]
    4b32:	2a00      	cmp	r2, #0
    4b34:	d0e7      	beq.n	4b06 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc2>
  if (setCwv || !m_cwv) {
    4b36:	4b06      	ldr	r3, [pc, #24]	; (4b50 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    4b38:	f1b9 0f00 	cmp.w	r9, #0
    4b3c:	d1e8      	bne.n	4b10 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
    4b3e:	681a      	ldr	r2, [r3, #0]
    4b40:	2a00      	cmp	r2, #0
    4b42:	d0e5      	beq.n	4b10 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
  return true;
    4b44:	2001      	movs	r0, #1
}
    4b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b4a:	bf00      	nop
    4b4c:	2002a8a8 	.word	0x2002a8a8
    4b50:	2002a8a4 	.word	0x2002a8a4
    4b54:	2002a870 	.word	0x2002a870

00004b58 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    4b58:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    4b5a:	2500      	movs	r5, #0
    4b5c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    4b60:	4604      	mov	r4, r0
    4b62:	6045      	str	r5, [r0, #4]
    4b64:	7305      	strb	r5, [r0, #12]
    4b66:	6086      	str	r6, [r0, #8]
    4b68:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4b6c:	4d03      	ldr	r5, [pc, #12]	; (4b7c <FsVolume::open(char const*, int)+0x24>)
    4b6e:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    4b72:	f7ff ff15 	bl	49a0 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    4b76:	4620      	mov	r0, r4
    4b78:	bd70      	pop	{r4, r5, r6, pc}
    4b7a:	bf00      	nop
    4b7c:	200007b8 	.word	0x200007b8

00004b80 <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
    4b80:	f04f 30ff 	mov.w	r0, #4294967295
    4b84:	4770      	bx	lr
    4b86:	bf00      	nop

00004b88 <SharedSpiCard::errorCode() const>:
  uint8_t errorCode() const { return m_errorCode; }
    4b88:	7c80      	ldrb	r0, [r0, #18]
    4b8a:	4770      	bx	lr

00004b8c <SharedSpiCard::errorData() const>:
  uint32_t errorData() const { return m_status; }
    4b8c:	7d40      	ldrb	r0, [r0, #21]
    4b8e:	4770      	bx	lr

00004b90 <SharedSpiCard::type() const>:
  uint8_t type() const { return m_type; }
    4b90:	7d80      	ldrb	r0, [r0, #22]
    4b92:	4770      	bx	lr

00004b94 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    4b94:	2001      	movs	r0, #1
    4b96:	4770      	bx	lr

00004b98 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    4b98:	7f00      	ldrb	r0, [r0, #28]
    4b9a:	4770      	bx	lr

00004b9c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4b9c:	4770      	bx	lr
    4b9e:	bf00      	nop

00004ba0 <DedicatedSpiCard::~DedicatedSpiCard()>:
    4ba0:	b510      	push	{r4, lr}
    4ba2:	4604      	mov	r4, r0
    4ba4:	2120      	movs	r1, #32
    4ba6:	f003 faff 	bl	81a8 <operator delete(void*, unsigned int)>
    4baa:	4620      	mov	r0, r4
    4bac:	bd10      	pop	{r4, pc}
    4bae:	bf00      	nop

00004bb0 <SharedSpiCard::end()>:
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
//------------------------------------------------------------------------------
void SharedSpiCard::end() {
    4bb0:	b538      	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    4bb2:	7c03      	ldrb	r3, [r0, #16]
    4bb4:	b153      	cbz	r3, 4bcc <SharedSpiCard::end()+0x1c>
    syncDevice();
    4bb6:	4605      	mov	r5, r0
    4bb8:	4604      	mov	r4, r0
    4bba:	f855 3b04 	ldr.w	r3, [r5], #4
    4bbe:	69db      	ldr	r3, [r3, #28]
    4bc0:	4798      	blx	r3
  void spiEnd() { m_spiDriver.end(); }
    4bc2:	4628      	mov	r0, r5
    4bc4:	f002 fa4a 	bl	705c <SdSpiArduinoDriver::end()>
    spiEnd();
    m_beginCalled = false;
    4bc8:	2300      	movs	r3, #0
    4bca:	7423      	strb	r3, [r4, #16]
  }
}
    4bcc:	bd38      	pop	{r3, r4, r5, pc}
    4bce:	bf00      	nop

00004bd0 <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    4bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bd4:	4e20      	ldr	r6, [pc, #128]	; (4c58 <SharedSpiCard::writeStop()+0x88>)
    4bd6:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    4bd8:	f100 0804 	add.w	r8, r0, #4
    4bdc:	6835      	ldr	r5, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4bde:	f505 7516 	add.w	r5, r5, #600	; 0x258
    4be2:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    4be4:	e003      	b.n	4bee <SharedSpiCard::writeStop()+0x1e>
    4be6:	6833      	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4be8:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4bea:	041b      	lsls	r3, r3, #16
    4bec:	d410      	bmi.n	4c10 <SharedSpiCard::writeStop()+0x40>
    4bee:	4640      	mov	r0, r8
    4bf0:	f002 fa38 	bl	7064 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4bf4:	28ff      	cmp	r0, #255	; 0xff
    4bf6:	4604      	mov	r4, r0
    4bf8:	d1f5      	bne.n	4be6 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    4bfa:	21fd      	movs	r1, #253	; 0xfd
    4bfc:	4640      	mov	r0, r8
    4bfe:	f002 fa4f 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    4c02:	7cfb      	ldrb	r3, [r7, #19]
    4c04:	b9cb      	cbnz	r3, 4c3a <SharedSpiCard::writeStop()+0x6a>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4c06:	2300      	movs	r3, #0
    4c08:	2001      	movs	r0, #1
    4c0a:	753b      	strb	r3, [r7, #20]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    4c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    4c10:	231f      	movs	r3, #31
  if (m_spiActive) {
    4c12:	7cf8      	ldrb	r0, [r7, #19]
    4c14:	74bb      	strb	r3, [r7, #18]
    4c16:	2800      	cmp	r0, #0
    4c18:	d0f8      	beq.n	4c0c <SharedSpiCard::writeStop()+0x3c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4c1a:	7c78      	ldrb	r0, [r7, #17]
    4c1c:	2101      	movs	r1, #1
    4c1e:	f002 f961 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c22:	21ff      	movs	r1, #255	; 0xff
    4c24:	4640      	mov	r0, r8
    4c26:	f002 fa3b 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4c2a:	4640      	mov	r0, r8
    4c2c:	f002 f9ee 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4c30:	2300      	movs	r3, #0
  return false;
    4c32:	4618      	mov	r0, r3
    m_spiActive = false;
    4c34:	74fb      	strb	r3, [r7, #19]
}
    4c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4c3a:	2101      	movs	r1, #1
    4c3c:	7c78      	ldrb	r0, [r7, #17]
    4c3e:	f002 f951 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c42:	4621      	mov	r1, r4
    4c44:	4640      	mov	r0, r8
    4c46:	f002 fa2b 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4c4a:	4640      	mov	r0, r8
    4c4c:	f002 f9de 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4c50:	2300      	movs	r3, #0
    4c52:	74fb      	strb	r3, [r7, #19]
}
    4c54:	e7d7      	b.n	4c06 <SharedSpiCard::writeStop()+0x36>
    4c56:	bf00      	nop
    4c58:	2002b458 	.word	0x2002b458

00004c5c <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    4c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    4c60:	7d03      	ldrb	r3, [r0, #20]
    4c62:	2b01      	cmp	r3, #1
    4c64:	d035      	beq.n	4cd2 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    4c66:	7cc6      	ldrb	r6, [r0, #19]
    4c68:	4604      	mov	r4, r0
    4c6a:	b14e      	cbz	r6, 4c80 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    4c6c:	3004      	adds	r0, #4
    4c6e:	f002 f9f9 	bl	7064 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    4c72:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4c76:	bf18      	it	ne
    4c78:	2501      	movne	r5, #1
}
    4c7a:	4628      	mov	r0, r5
    4c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    4c80:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    4c82:	f04f 0801 	mov.w	r8, #1
    4c86:	4638      	mov	r0, r7
    4c88:	f002 f9b6 	bl	6ff8 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    4c8c:	4631      	mov	r1, r6
    4c8e:	7c60      	ldrb	r0, [r4, #17]
    4c90:	f884 8013 	strb.w	r8, [r4, #19]
    4c94:	f002 f926 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c98:	21ff      	movs	r1, #255	; 0xff
    4c9a:	4638      	mov	r0, r7
    4c9c:	f002 fa00 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4ca0:	4638      	mov	r0, r7
    4ca2:	f002 f9df 	bl	7064 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    4ca6:	7ce3      	ldrb	r3, [r4, #19]
  bool rtn = 0XFF != spiReceive();
    4ca8:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4cac:	bf18      	it	ne
    4cae:	2501      	movne	r5, #1
  if (m_spiActive) {
    4cb0:	2b00      	cmp	r3, #0
    4cb2:	d0e2      	beq.n	4c7a <SharedSpiCard::isBusy()+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4cb4:	4641      	mov	r1, r8
    4cb6:	7c60      	ldrb	r0, [r4, #17]
    4cb8:	f002 f914 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4cbc:	21ff      	movs	r1, #255	; 0xff
    4cbe:	4638      	mov	r0, r7
    4cc0:	f002 f9ee 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4cc4:	4638      	mov	r0, r7
    4cc6:	f002 f9a1 	bl	700c <SdSpiArduinoDriver::deactivate()>
}
    4cca:	4628      	mov	r0, r5
    m_spiActive = false;
    4ccc:	74e6      	strb	r6, [r4, #19]
}
    4cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4cd2:	2500      	movs	r5, #0
}
    4cd4:	4628      	mov	r0, r5
    4cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4cda:	bf00      	nop

00004cdc <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    4cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4ce0:	4f20      	ldr	r7, [pc, #128]	; (4d64 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    4ce2:	4604      	mov	r4, r0
    4ce4:	4688      	mov	r8, r1
    4ce6:	4691      	mov	r9, r2
    4ce8:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    4cea:	1d06      	adds	r6, r0, #4
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4cec:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    4cf0:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    4cf2:	e003      	b.n	4cfc <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    4cf4:	683b      	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4cf6:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4cf8:	041b      	lsls	r3, r3, #16
    4cfa:	d40d      	bmi.n	4d18 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    4cfc:	4630      	mov	r0, r6
    4cfe:	f002 f9b1 	bl	7064 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    4d02:	28ff      	cmp	r0, #255	; 0xff
    4d04:	7560      	strb	r0, [r4, #21]
    4d06:	d0f5      	beq.n	4cf4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    4d08:	28fe      	cmp	r0, #254	; 0xfe
    4d0a:	d01a      	beq.n	4d42 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    4d0c:	2319      	movs	r3, #25
  if (m_spiActive) {
    4d0e:	7ce0      	ldrb	r0, [r4, #19]
    m_errorCode = code;
    4d10:	74a3      	strb	r3, [r4, #18]
    4d12:	b930      	cbnz	r0, 4d22 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    4d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4d18:	231e      	movs	r3, #30
  if (m_spiActive) {
    4d1a:	7ce0      	ldrb	r0, [r4, #19]
    4d1c:	74a3      	strb	r3, [r4, #18]
    4d1e:	2800      	cmp	r0, #0
    4d20:	d0f8      	beq.n	4d14 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4d22:	7c60      	ldrb	r0, [r4, #17]
    4d24:	2101      	movs	r1, #1
    4d26:	f002 f8dd 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d2a:	21ff      	movs	r1, #255	; 0xff
    4d2c:	4630      	mov	r0, r6
    4d2e:	f002 f9b7 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4d32:	4630      	mov	r0, r6
    4d34:	f002 f96a 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4d38:	2300      	movs	r3, #0
  return false;
    4d3a:	4618      	mov	r0, r3
    m_spiActive = false;
    4d3c:	74e3      	strb	r3, [r4, #19]
}
    4d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    4d42:	464a      	mov	r2, r9
    4d44:	4641      	mov	r1, r8
    4d46:	4630      	mov	r0, r6
    4d48:	f002 f998 	bl	707c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    4d4c:	7560      	strb	r0, [r4, #21]
    4d4e:	b938      	cbnz	r0, 4d60 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    4d50:	4630      	mov	r0, r6
    4d52:	f002 f987 	bl	7064 <SdSpiArduinoDriver::receive()>
    4d56:	4630      	mov	r0, r6
    4d58:	f002 f984 	bl	7064 <SdSpiArduinoDriver::receive()>
  return true;
    4d5c:	2001      	movs	r0, #1
    4d5e:	e7d9      	b.n	4d14 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    4d60:	2326      	movs	r3, #38	; 0x26
    4d62:	e7d4      	b.n	4d0e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    4d64:	2002b458 	.word	0x2002b458

00004d68 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    4d68:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    4d6a:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    4d6c:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    4d6e:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    4d70:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    4d72:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    4d74:	7507      	strb	r7, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    4d76:	f000 f83b 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4d7a:	b9b0      	cbnz	r0, 4daa <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    4d7c:	7ce6      	ldrb	r6, [r4, #19]
    4d7e:	b91e      	cbnz	r6, 4d88 <SharedSpiCard::readStop()+0x20>
  return true;
    4d80:	2601      	movs	r6, #1
}
    4d82:	4630      	mov	r0, r6
    4d84:	b003      	add	sp, #12
    4d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4d88:	4605      	mov	r5, r0
    4d8a:	2101      	movs	r1, #1
    4d8c:	7c60      	ldrb	r0, [r4, #17]
    4d8e:	f002 f8a9 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d92:	1d20      	adds	r0, r4, #4
    4d94:	21ff      	movs	r1, #255	; 0xff
    4d96:	9001      	str	r0, [sp, #4]
    4d98:	f002 f982 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4d9c:	9801      	ldr	r0, [sp, #4]
    4d9e:	f002 f935 	bl	700c <SdSpiArduinoDriver::deactivate()>
    4da2:	4630      	mov	r0, r6
    m_spiActive = false;
    4da4:	74e5      	strb	r5, [r4, #19]
}
    4da6:	b003      	add	sp, #12
    4da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    4daa:	2309      	movs	r3, #9
  if (m_spiActive) {
    4dac:	7ce6      	ldrb	r6, [r4, #19]
    4dae:	74a3      	strb	r3, [r4, #18]
    4db0:	2e00      	cmp	r6, #0
    4db2:	d0e6      	beq.n	4d82 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    4db4:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4db6:	7c60      	ldrb	r0, [r4, #17]
    4db8:	2101      	movs	r1, #1
}
    4dba:	463e      	mov	r6, r7
    4dbc:	f002 f892 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4dc0:	21ff      	movs	r1, #255	; 0xff
    4dc2:	4628      	mov	r0, r5
    4dc4:	f002 f96c 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4dc8:	4628      	mov	r0, r5
    4dca:	f002 f91f 	bl	700c <SdSpiArduinoDriver::deactivate()>
}
    4dce:	4630      	mov	r0, r6
    m_spiActive = false;
    4dd0:	74e7      	strb	r7, [r4, #19]
}
    4dd2:	b003      	add	sp, #12
    4dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dd6:	bf00      	nop

00004dd8 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    4dd8:	7d02      	ldrb	r2, [r0, #20]
    4dda:	2a02      	cmp	r2, #2
    4ddc:	d003      	beq.n	4de6 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    4dde:	2a01      	cmp	r2, #1
    4de0:	d004      	beq.n	4dec <SharedSpiCard::syncDevice()+0x14>
}
    4de2:	2001      	movs	r0, #1
    4de4:	4770      	bx	lr
    return writeStop();
    4de6:	6803      	ldr	r3, [r0, #0]
    4de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4dea:	4718      	bx	r3
    return readStop();
    4dec:	f7ff bfbc 	b.w	4d68 <SharedSpiCard::readStop()>

00004df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    4df4:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4df6:	b082      	sub	sp, #8
    4df8:	460f      	mov	r7, r1
    4dfa:	4936      	ldr	r1, [pc, #216]	; (4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>)
    4dfc:	9201      	str	r2, [sp, #4]
    4dfe:	4606      	mov	r6, r0
  if (!syncDevice()) {
    4e00:	69da      	ldr	r2, [r3, #28]
    4e02:	428a      	cmp	r2, r1
    4e04:	d15d      	bne.n	4ec2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd2>
  if (m_state == WRITE_STATE) {
    4e06:	7d02      	ldrb	r2, [r0, #20]
    4e08:	2a02      	cmp	r2, #2
    4e0a:	d043      	beq.n	4e94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
  if (m_state == READ_STATE) {
    4e0c:	2a01      	cmp	r2, #1
    4e0e:	d05c      	beq.n	4eca <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xda>
  if (!m_spiActive) {
    4e10:	7cf4      	ldrb	r4, [r6, #19]
    4e12:	2c00      	cmp	r4, #0
    4e14:	d046      	beq.n	4ea4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb4>
  void spiActivate() { m_spiDriver.activate(); }
    4e16:	1d35      	adds	r5, r6, #4
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    4e18:	b19f      	cbz	r7, 4e42 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    4e1a:	2f0c      	cmp	r7, #12
    4e1c:	d011      	beq.n	4e42 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    4e1e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4ed8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe8>
    4e22:	f8d8 4000 	ldr.w	r4, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4e26:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    4e2a:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    4e2c:	e004      	b.n	4e38 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    4e2e:	f8d8 3000 	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4e32:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    4e34:	0419      	lsls	r1, r3, #16
    4e36:	d431      	bmi.n	4e9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    return m_spiDriver.receive();
    4e38:	4628      	mov	r0, r5
    4e3a:	f002 f913 	bl	7064 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4e3e:	28ff      	cmp	r0, #255	; 0xff
    4e40:	d1f5      	bne.n	4e2e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
    m_spiDriver.send(data);
    4e42:	f10d 0804 	add.w	r8, sp, #4
    4e46:	ac02      	add	r4, sp, #8
    4e48:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    4e4c:	4628      	mov	r0, r5
    4e4e:	f002 f927 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
    4e52:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    4e56:	4628      	mov	r0, r5
    4e58:	f002 f922 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    4e5c:	4544      	cmp	r4, r8
    4e5e:	d1f8      	bne.n	4e52 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    4e60:	2f00      	cmp	r7, #0
    4e62:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    4e64:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    4e68:	bf0c      	ite	eq
    4e6a:	2195      	moveq	r1, #149	; 0x95
    4e6c:	2187      	movne	r1, #135	; 0x87
    4e6e:	f002 f917 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4e72:	4628      	mov	r0, r5
    4e74:	f002 f8f6 	bl	7064 <SdSpiArduinoDriver::receive()>
    4e78:	4628      	mov	r0, r5
    4e7a:	f002 f8f3 	bl	7064 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    4e7e:	0602      	lsls	r2, r0, #24
    4e80:	f104 33ff 	add.w	r3, r4, #4294967295
    m_status = spiReceive();
    4e84:	7570      	strb	r0, [r6, #21]
  } while (m_status & 0X80 && ++n < 10);
    4e86:	d502      	bpl.n	4e8e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9e>
    4e88:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    4e8c:	d1f4      	bne.n	4e78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x88>
}
    4e8e:	b002      	add	sp, #8
    4e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    4e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4e96:	4798      	blx	r3
  if (!syncDevice()) {
    4e98:	2800      	cmp	r0, #0
    4e9a:	d1b9      	bne.n	4e10 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    4e9c:	20ff      	movs	r0, #255	; 0xff
}
    4e9e:	b002      	add	sp, #8
    4ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    4ea4:	1d35      	adds	r5, r6, #4
    4ea6:	4628      	mov	r0, r5
    4ea8:	f002 f8a6 	bl	6ff8 <SdSpiArduinoDriver::activate()>
    m_spiActive = true;
    4eac:	2301      	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
    4eae:	4621      	mov	r1, r4
    4eb0:	7c70      	ldrb	r0, [r6, #17]
    4eb2:	74f3      	strb	r3, [r6, #19]
    4eb4:	f002 f816 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4eb8:	21ff      	movs	r1, #255	; 0xff
    4eba:	4628      	mov	r0, r5
    4ebc:	f002 f8f0 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
}
    4ec0:	e7aa      	b.n	4e18 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    4ec2:	4790      	blx	r2
    4ec4:	2800      	cmp	r0, #0
    4ec6:	d0e9      	beq.n	4e9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    4ec8:	e7a2      	b.n	4e10 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return readStop();
    4eca:	f7ff ff4d 	bl	4d68 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    4ece:	2800      	cmp	r0, #0
    4ed0:	d0e4      	beq.n	4e9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    4ed2:	e79d      	b.n	4e10 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    4ed4:	00004dd9 	.word	0x00004dd9
    4ed8:	2002b458 	.word	0x2002b458

00004edc <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    4edc:	b570      	push	{r4, r5, r6, lr}
    4ede:	460c      	mov	r4, r1
    4ee0:	b082      	sub	sp, #8
    4ee2:	4616      	mov	r6, r2
  if (cardCommand(CMD6, arg)) {
    4ee4:	2106      	movs	r1, #6
    4ee6:	4622      	mov	r2, r4
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    4ee8:	4604      	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    4eea:	f7ff ff81 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4eee:	b1b0      	cbz	r0, 4f1e <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x42>
    m_errorCode = code;
    4ef0:	2304      	movs	r3, #4
    4ef2:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    4ef4:	7ce0      	ldrb	r0, [r4, #19]
    4ef6:	b908      	cbnz	r0, 4efc <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x20>
}
    4ef8:	b002      	add	sp, #8
    4efa:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    4efc:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4efe:	7c60      	ldrb	r0, [r4, #17]
    4f00:	2101      	movs	r1, #1
    4f02:	f001 ffef 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f06:	21ff      	movs	r1, #255	; 0xff
    4f08:	4628      	mov	r0, r5
    4f0a:	f002 f8c9 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4f0e:	4628      	mov	r0, r5
    4f10:	f002 f87c 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4f14:	2300      	movs	r3, #0
  return false;
    4f16:	4618      	mov	r0, r3
    m_spiActive = false;
    4f18:	74e3      	strb	r3, [r4, #19]
}
    4f1a:	b002      	add	sp, #8
    4f1c:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(status, 64)) {
    4f1e:	4605      	mov	r5, r0
    4f20:	2240      	movs	r2, #64	; 0x40
    4f22:	4631      	mov	r1, r6
    4f24:	4620      	mov	r0, r4
    4f26:	f7ff fed9 	bl	4cdc <SharedSpiCard::readData(unsigned char*, unsigned int)>
    4f2a:	2800      	cmp	r0, #0
    4f2c:	d0e2      	beq.n	4ef4 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x18>
  if (m_spiActive) {
    4f2e:	7ce6      	ldrb	r6, [r4, #19]
    4f30:	2e00      	cmp	r6, #0
    4f32:	d0e1      	beq.n	4ef8 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4f34:	7c60      	ldrb	r0, [r4, #17]
    4f36:	2101      	movs	r1, #1
    4f38:	f001 ffd4 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f3c:	1d20      	adds	r0, r4, #4
    4f3e:	21ff      	movs	r1, #255	; 0xff
    4f40:	9001      	str	r0, [sp, #4]
    4f42:	f002 f8ad 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4f46:	9801      	ldr	r0, [sp, #4]
    4f48:	f002 f860 	bl	700c <SdSpiArduinoDriver::deactivate()>
}
    4f4c:	4630      	mov	r0, r6
    m_spiActive = false;
    4f4e:	74e5      	strb	r5, [r4, #19]
}
    4f50:	b002      	add	sp, #8
    4f52:	bd70      	pop	{r4, r5, r6, pc}

00004f54 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    4f56:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4f58:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    4f5a:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4f5c:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    4f5e:	f7ff ff47 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4f62:	b9e0      	cbnz	r0, 4f9e <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    4f64:	1d37      	adds	r7, r6, #4
    4f66:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    4f68:	4638      	mov	r0, r7
    4f6a:	f002 f87b 	bl	7064 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    4f6e:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    4f72:	42a5      	cmp	r5, r4
    4f74:	d1f8      	bne.n	4f68 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    4f76:	7cf4      	ldrb	r4, [r6, #19]
    4f78:	b914      	cbnz	r4, 4f80 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    4f7a:	2401      	movs	r4, #1
}
    4f7c:	4620      	mov	r0, r4
    4f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4f80:	7c70      	ldrb	r0, [r6, #17]
    4f82:	2101      	movs	r1, #1
    4f84:	f001 ffae 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f88:	21ff      	movs	r1, #255	; 0xff
    4f8a:	4638      	mov	r0, r7
    4f8c:	f002 f888 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4f90:	4638      	mov	r0, r7
    4f92:	f002 f83b 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4f96:	2300      	movs	r3, #0
}
    4f98:	4620      	mov	r0, r4
    m_spiActive = false;
    4f9a:	74f3      	strb	r3, [r6, #19]
}
    4f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    4f9e:	2312      	movs	r3, #18
  if (m_spiActive) {
    4fa0:	7cf4      	ldrb	r4, [r6, #19]
    4fa2:	74b3      	strb	r3, [r6, #18]
    4fa4:	2c00      	cmp	r4, #0
    4fa6:	d0e9      	beq.n	4f7c <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    4fa8:	1d34      	adds	r4, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4faa:	7c70      	ldrb	r0, [r6, #17]
    4fac:	2101      	movs	r1, #1
    4fae:	f001 ff99 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4fb2:	21ff      	movs	r1, #255	; 0xff
    4fb4:	4620      	mov	r0, r4
    4fb6:	f002 f873 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4fba:	4620      	mov	r0, r4
    4fbc:	f002 f826 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4fc0:	2300      	movs	r3, #0
  return false;
    4fc2:	461c      	mov	r4, r3
    m_spiActive = false;
    4fc4:	74f3      	strb	r3, [r6, #19]
}
    4fc6:	4620      	mov	r0, r4
    4fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fca:	bf00      	nop

00004fcc <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    4fcc:	b570      	push	{r4, r5, r6, lr}
    4fce:	4616      	mov	r6, r2
    4fd0:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    4fd2:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    4fd4:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    4fd6:	f7ff ff0b 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4fda:	b1b0      	cbz	r0, 500a <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    4fdc:	231c      	movs	r3, #28
    4fde:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    4fe0:	7ce0      	ldrb	r0, [r4, #19]
    4fe2:	b908      	cbnz	r0, 4fe8 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    4fe4:	b002      	add	sp, #8
    4fe6:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    4fe8:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4fea:	7c60      	ldrb	r0, [r4, #17]
    4fec:	2101      	movs	r1, #1
    4fee:	f001 ff79 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ff2:	21ff      	movs	r1, #255	; 0xff
    4ff4:	4628      	mov	r0, r5
    4ff6:	f002 f853 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4ffa:	4628      	mov	r0, r5
    4ffc:	f002 f806 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5000:	2300      	movs	r3, #0
  return false;
    5002:	4618      	mov	r0, r3
    m_spiActive = false;
    5004:	74e3      	strb	r3, [r4, #19]
}
    5006:	b002      	add	sp, #8
    5008:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    500a:	4605      	mov	r5, r0
    500c:	2210      	movs	r2, #16
    500e:	4631      	mov	r1, r6
    5010:	4620      	mov	r0, r4
    5012:	f7ff fe63 	bl	4cdc <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5016:	2800      	cmp	r0, #0
    5018:	d0e2      	beq.n	4fe0 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    501a:	7ce6      	ldrb	r6, [r4, #19]
    501c:	2e00      	cmp	r6, #0
    501e:	d0e1      	beq.n	4fe4 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5020:	7c60      	ldrb	r0, [r4, #17]
    5022:	2101      	movs	r1, #1
    5024:	f001 ff5e 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5028:	1d20      	adds	r0, r4, #4
    502a:	21ff      	movs	r1, #255	; 0xff
    502c:	9001      	str	r0, [sp, #4]
    502e:	f002 f837 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5032:	9801      	ldr	r0, [sp, #4]
    5034:	f001 ffea 	bl	700c <SdSpiArduinoDriver::deactivate()>
}
    5038:	4630      	mov	r0, r6
    m_spiActive = false;
    503a:	74e5      	strb	r5, [r4, #19]
}
    503c:	b002      	add	sp, #8
    503e:	bd70      	pop	{r4, r5, r6, pc}

00005040 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? csd.capacity() : 0;
    5040:	6803      	ldr	r3, [r0, #0]
    5042:	4a24      	ldr	r2, [pc, #144]	; (50d4 <SharedSpiCard::sectorCount()+0x94>)
    5044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5046:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    5048:	b500      	push	{lr}
    504a:	b085      	sub	sp, #20
    504c:	d10e      	bne.n	506c <SharedSpiCard::sectorCount()+0x2c>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    504e:	466a      	mov	r2, sp
    5050:	2109      	movs	r1, #9
    5052:	f7ff ffbb 	bl	4fcc <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? csd.capacity() : 0;
    5056:	b130      	cbz	r0, 5066 <SharedSpiCard::sectorCount()+0x26>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    5058:	f89d 3000 	ldrb.w	r3, [sp]
    if (ver == 0) {
    505c:	099b      	lsrs	r3, r3, #6
    505e:	d008      	beq.n	5072 <SharedSpiCard::sectorCount()+0x32>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    5060:	2b01      	cmp	r3, #1
    5062:	d027      	beq.n	50b4 <SharedSpiCard::sectorCount()+0x74>
    5064:	2000      	movs	r0, #0
}
    5066:	b005      	add	sp, #20
    5068:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? csd.capacity() : 0;
    506c:	4669      	mov	r1, sp
    506e:	4798      	blx	r3
    5070:	e7f1      	b.n	5056 <SharedSpiCard::sectorCount()+0x16>
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5072:	f89d 3009 	ldrb.w	r3, [sp, #9]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5076:	f89d 2006 	ldrb.w	r2, [sp, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    507a:	f89d 0008 	ldrb.w	r0, [sp, #8]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    507e:	005b      	lsls	r3, r3, #1
    5080:	f89d 100a 	ldrb.w	r1, [sp, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5084:	0292      	lsls	r2, r2, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5086:	f89d c007 	ldrb.w	ip, [sp, #7]
    508a:	0980      	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    508c:	f003 0306 	and.w	r3, r3, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5090:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5094:	ea40 008c 	orr.w	r0, r0, ip, lsl #2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5098:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
      uint8_t read_bl_len = csd[5] & 15;
    509c:	f89d 1005 	ldrb.w	r1, [sp, #5]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    50a0:	4310      	orrs	r0, r2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    50a2:	f001 020f 	and.w	r2, r1, #15
    50a6:	3001      	adds	r0, #1
    50a8:	4413      	add	r3, r2
    50aa:	3b07      	subs	r3, #7
    50ac:	4098      	lsls	r0, r3
}
    50ae:	b005      	add	sp, #20
    50b0:	f85d fb04 	ldr.w	pc, [sp], #4
      c_size = (uint32_t)(csd[7] & 63) << 16;
    50b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
    50b8:	f8bd 0008 	ldrh.w	r0, [sp, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    50bc:	041b      	lsls	r3, r3, #16
      c_size |= csd[9];
    50be:	ba40      	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    50c0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    50c4:	b280      	uxth	r0, r0
    50c6:	4318      	orrs	r0, r3
      return (c_size + 1) << 10;
    50c8:	3001      	adds	r0, #1
    50ca:	0280      	lsls	r0, r0, #10
    50cc:	b005      	add	sp, #20
    50ce:	f85d fb04 	ldr.w	pc, [sp], #4
    50d2:	bf00      	nop
    50d4:	000054a5 	.word	0x000054a5

000050d8 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    50d8:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    50da:	460a      	mov	r2, r1
    50dc:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    50de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::readStart(uint32_t sector) {
    50e0:	b083      	sub	sp, #12
    50e2:	4d16      	ldr	r5, [pc, #88]	; (513c <SharedSpiCard::readStart(unsigned long)+0x64>)
    50e4:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    50e6:	42ab      	cmp	r3, r5
    50e8:	d124      	bne.n	5134 <SharedSpiCard::readStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    50ea:	7d80      	ldrb	r0, [r0, #22]
    50ec:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    50ee:	f04f 0112 	mov.w	r1, #18
    50f2:	4620      	mov	r0, r4
    sector <<= 9;
    50f4:	bf18      	it	ne
    50f6:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    50f8:	f7ff fe7a 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    50fc:	b920      	cbnz	r0, 5108 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    50fe:	2301      	movs	r3, #1
  return true;
    5100:	4618      	mov	r0, r3
  m_state = READ_STATE;
    5102:	7523      	strb	r3, [r4, #20]
}
    5104:	b003      	add	sp, #12
    5106:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    5108:	230c      	movs	r3, #12
  if (m_spiActive) {
    510a:	7ce0      	ldrb	r0, [r4, #19]
    510c:	74a3      	strb	r3, [r4, #18]
    510e:	2800      	cmp	r0, #0
    5110:	d0f8      	beq.n	5104 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    5112:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5114:	7c60      	ldrb	r0, [r4, #17]
    5116:	2101      	movs	r1, #1
    5118:	f001 fee4 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    511c:	21ff      	movs	r1, #255	; 0xff
    511e:	4628      	mov	r0, r5
    5120:	f001 ffbe 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5124:	4628      	mov	r0, r5
    5126:	f001 ff71 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    512a:	2300      	movs	r3, #0
}
    512c:	4618      	mov	r0, r3
    m_spiActive = false;
    512e:	74e3      	strb	r3, [r4, #19]
}
    5130:	b003      	add	sp, #12
    5132:	bd30      	pop	{r4, r5, pc}
    5134:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    5136:	4798      	blx	r3
    5138:	9a01      	ldr	r2, [sp, #4]
    513a:	e7d7      	b.n	50ec <SharedSpiCard::readStart(unsigned long)+0x14>
    513c:	00004b91 	.word	0x00004b91

00005140 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    5140:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    5142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    5146:	695f      	ldr	r7, [r3, #20]
    5148:	4b16      	ldr	r3, [pc, #88]	; (51a4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    514a:	429f      	cmp	r7, r3
    514c:	d11f      	bne.n	518e <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    514e:	7d03      	ldrb	r3, [r0, #20]
    5150:	4604      	mov	r4, r0
    5152:	460d      	mov	r5, r1
    5154:	4616      	mov	r6, r2
    5156:	2b01      	cmp	r3, #1
    5158:	d102      	bne.n	5160 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    515a:	6983      	ldr	r3, [r0, #24]
    515c:	4299      	cmp	r1, r3
    515e:	d005      	beq.n	516c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    5160:	4629      	mov	r1, r5
    5162:	4620      	mov	r0, r4
    5164:	f7ff ffb8 	bl	50d8 <SharedSpiCard::readStart(unsigned long)>
    5168:	b170      	cbz	r0, 5188 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    516a:	61a5      	str	r5, [r4, #24]
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    516c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5170:	4631      	mov	r1, r6
    5172:	4620      	mov	r0, r4
    5174:	f7ff fdb2 	bl	4cdc <SharedSpiCard::readData(unsigned char*, unsigned int)>
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    5178:	b130      	cbz	r0, 5188 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
  }
  m_curSector += ns;
    517a:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    517c:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    517e:	3301      	adds	r3, #1
    5180:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    5182:	b148      	cbz	r0, 5198 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    5184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

fail:
  return false;
    5188:	2000      	movs	r0, #0
}
    518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    518e:	46bc      	mov	ip, r7
    5190:	2301      	movs	r3, #1
}
    5192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    5196:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    5198:	4620      	mov	r0, r4
}
    519a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    519e:	f7ff bde3 	b.w	4d68 <SharedSpiCard::readStop()>
    51a2:	bf00      	nop
    51a4:	0000551d 	.word	0x0000551d

000051a8 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    51a8:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    51aa:	460a      	mov	r2, r1
    51ac:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    51ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeStart(uint32_t sector) {
    51b0:	b083      	sub	sp, #12
    51b2:	4d16      	ldr	r5, [pc, #88]	; (520c <SharedSpiCard::writeStart(unsigned long)+0x64>)
    51b4:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    51b6:	42ab      	cmp	r3, r5
    51b8:	d124      	bne.n	5204 <SharedSpiCard::writeStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    51ba:	7d80      	ldrb	r0, [r0, #22]
    51bc:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    51be:	f04f 0119 	mov.w	r1, #25
    51c2:	4620      	mov	r0, r4
    sector <<= 9;
    51c4:	bf18      	it	ne
    51c6:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    51c8:	f7ff fe12 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    51cc:	b920      	cbnz	r0, 51d8 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    51ce:	2302      	movs	r3, #2
  return true;
    51d0:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    51d2:	7523      	strb	r3, [r4, #20]
}
    51d4:	b003      	add	sp, #12
    51d6:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    51d8:	230e      	movs	r3, #14
  if (m_spiActive) {
    51da:	7ce0      	ldrb	r0, [r4, #19]
    51dc:	74a3      	strb	r3, [r4, #18]
    51de:	2800      	cmp	r0, #0
    51e0:	d0f8      	beq.n	51d4 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    51e2:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    51e4:	7c60      	ldrb	r0, [r4, #17]
    51e6:	2101      	movs	r1, #1
    51e8:	f001 fe7c 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    51ec:	21ff      	movs	r1, #255	; 0xff
    51ee:	4628      	mov	r0, r5
    51f0:	f001 ff56 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    51f4:	4628      	mov	r0, r5
    51f6:	f001 ff09 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    51fa:	2300      	movs	r3, #0
}
    51fc:	4618      	mov	r0, r3
    m_spiActive = false;
    51fe:	74e3      	strb	r3, [r4, #19]
}
    5200:	b003      	add	sp, #12
    5202:	bd30      	pop	{r4, r5, pc}
    5204:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    5206:	4798      	blx	r3
    5208:	9a01      	ldr	r2, [sp, #4]
    520a:	e7d7      	b.n	51bc <SharedSpiCard::writeStart(unsigned long)+0x14>
    520c:	00004b91 	.word	0x00004b91

00005210 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    5210:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5212:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    5216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5218:	4617      	mov	r7, r2
    521a:	4a41      	ldr	r2, [pc, #260]	; (5320 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    521c:	b085      	sub	sp, #20
    521e:	4604      	mov	r4, r0
    5220:	460e      	mov	r6, r1
    5222:	4293      	cmp	r3, r2
    5224:	d145      	bne.n	52b2 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5226:	466a      	mov	r2, sp
    5228:	2109      	movs	r1, #9
    522a:	f7ff fecf 	bl	4fcc <SharedSpiCard::readRegister(unsigned char, void*)>
    522e:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    5230:	b1b5      	cbz	r5, 5260 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    } else {
      return 0;
    }
  }
  /** \return true if erase granularity is single block. */
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    5232:	f89d 300a 	ldrb.w	r3, [sp, #10]
  if (!csd.eraseSingleBlock()) {
    5236:	065a      	lsls	r2, r3, #25
    5238:	d518      	bpl.n	526c <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    523a:	7da3      	ldrb	r3, [r4, #22]
    523c:	2b03      	cmp	r3, #3
    523e:	d001      	beq.n	5244 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    5240:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    5242:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    5244:	4632      	mov	r2, r6
    5246:	2120      	movs	r1, #32
    5248:	4620      	mov	r0, r4
    524a:	f7ff fdd1 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    524e:	b928      	cbnz	r0, 525c <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    5250:	463a      	mov	r2, r7
    5252:	2121      	movs	r1, #33	; 0x21
    5254:	4620      	mov	r0, r4
    5256:	f7ff fdcb 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    525a:	b370      	cbz	r0, 52ba <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    525c:	2327      	movs	r3, #39	; 0x27
    525e:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5260:	7ce5      	ldrb	r5, [r4, #19]
    5262:	b99d      	cbnz	r5, 528c <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    5264:	4628      	mov	r0, r5
    5266:	b005      	add	sp, #20
    5268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  /** \return erase size in 512 byte blocks if eraseSingleBlock is false. */
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    526c:	005b      	lsls	r3, r3, #1
    526e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    5272:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    5276:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    527a:	1c7a      	adds	r2, r7, #1
    527c:	4332      	orrs	r2, r6
    527e:	4213      	tst	r3, r2
    5280:	d0db      	beq.n	523a <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    5282:	2328      	movs	r3, #40	; 0x28
  if (m_spiActive) {
    5284:	7ce5      	ldrb	r5, [r4, #19]
    5286:	74a3      	strb	r3, [r4, #18]
    5288:	2d00      	cmp	r5, #0
    528a:	d0eb      	beq.n	5264 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    528c:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    528e:	7c60      	ldrb	r0, [r4, #17]
    5290:	2101      	movs	r1, #1
    5292:	f001 fe27 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5296:	21ff      	movs	r1, #255	; 0xff
    5298:	4628      	mov	r0, r5
    529a:	f001 ff01 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    529e:	4628      	mov	r0, r5
    52a0:	f001 feb4 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    52a4:	2300      	movs	r3, #0
  return false;
    52a6:	461d      	mov	r5, r3
    m_spiActive = false;
    52a8:	74e3      	strb	r3, [r4, #19]
}
    52aa:	4628      	mov	r0, r5
    52ac:	b005      	add	sp, #20
    52ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    52b2:	4669      	mov	r1, sp
    52b4:	4798      	blx	r3
    52b6:	4605      	mov	r5, r0
    52b8:	e7ba      	b.n	5230 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      cardCommand(CMD38, 0)) {
    52ba:	4602      	mov	r2, r0
    52bc:	2126      	movs	r1, #38	; 0x26
    52be:	4620      	mov	r0, r4
    52c0:	f7ff fd96 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    52c4:	2800      	cmp	r0, #0
    52c6:	d1c9      	bne.n	525c <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    52c8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5324 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    52cc:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    52d0:	f104 0904 	add.w	r9, r4, #4
    52d4:	f8d8 3000 	ldr.w	r3, [r8]
    52d8:	441f      	add	r7, r3
    52da:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    52dc:	e004      	b.n	52e8 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    52de:	f8d8 3000 	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    52e2:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    52e4:	041b      	lsls	r3, r3, #16
    52e6:	d417      	bmi.n	5318 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    52e8:	4648      	mov	r0, r9
    52ea:	f001 febb 	bl	7064 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    52ee:	28ff      	cmp	r0, #255	; 0xff
    52f0:	4606      	mov	r6, r0
    52f2:	d1f4      	bne.n	52de <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    52f4:	7ce3      	ldrb	r3, [r4, #19]
    52f6:	2b00      	cmp	r3, #0
    52f8:	d0b4      	beq.n	5264 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    52fa:	2101      	movs	r1, #1
    52fc:	7c60      	ldrb	r0, [r4, #17]
  return true;
    52fe:	461d      	mov	r5, r3
    5300:	f001 fdf0 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5304:	4631      	mov	r1, r6
    5306:	4648      	mov	r0, r9
    5308:	f001 feca 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    530c:	4648      	mov	r0, r9
    530e:	f001 fe7d 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5312:	2300      	movs	r3, #0
    5314:	74e3      	strb	r3, [r4, #19]
}
    5316:	e7a5      	b.n	5264 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    5318:	2329      	movs	r3, #41	; 0x29
    531a:	74a3      	strb	r3, [r4, #18]
    goto fail;
    531c:	e7a0      	b.n	5260 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    531e:	bf00      	nop
    5320:	000054a5 	.word	0x000054a5
    5324:	2002b458 	.word	0x2002b458

00005328 <SharedSpiCard::readSCR(scr_t*)>:
bool SharedSpiCard::readSCR(scr_t* scr) {
    5328:	b570      	push	{r4, r5, r6, lr}
    532a:	4604      	mov	r4, r0
    532c:	b082      	sub	sp, #8
    cardCommand(CMD55, 0);
    532e:	2200      	movs	r2, #0
    5330:	460e      	mov	r6, r1
    5332:	2137      	movs	r1, #55	; 0x37
    5334:	f7ff fd5c 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    5338:	2200      	movs	r2, #0
    533a:	2133      	movs	r1, #51	; 0x33
    533c:	4620      	mov	r0, r4
    533e:	f7ff fd57 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD51, 0)) {
    5342:	b1b0      	cbz	r0, 5372 <SharedSpiCard::readSCR(scr_t*)+0x4a>
    m_errorCode = code;
    5344:	2318      	movs	r3, #24
    5346:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5348:	7ce0      	ldrb	r0, [r4, #19]
    534a:	b908      	cbnz	r0, 5350 <SharedSpiCard::readSCR(scr_t*)+0x28>
}
    534c:	b002      	add	sp, #8
    534e:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5350:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5352:	7c60      	ldrb	r0, [r4, #17]
    5354:	2101      	movs	r1, #1
    5356:	f001 fdc5 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    535a:	21ff      	movs	r1, #255	; 0xff
    535c:	4628      	mov	r0, r5
    535e:	f001 fe9f 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5362:	4628      	mov	r0, r5
    5364:	f001 fe52 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5368:	2300      	movs	r3, #0
  return false;
    536a:	4618      	mov	r0, r3
    m_spiActive = false;
    536c:	74e3      	strb	r3, [r4, #19]
}
    536e:	b002      	add	sp, #8
    5370:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, sizeof(scr_t))) {
    5372:	4605      	mov	r5, r0
    5374:	2208      	movs	r2, #8
    5376:	4631      	mov	r1, r6
    5378:	4620      	mov	r0, r4
    537a:	f7ff fcaf 	bl	4cdc <SharedSpiCard::readData(unsigned char*, unsigned int)>
    537e:	2800      	cmp	r0, #0
    5380:	d0e2      	beq.n	5348 <SharedSpiCard::readSCR(scr_t*)+0x20>
  if (m_spiActive) {
    5382:	7ce6      	ldrb	r6, [r4, #19]
    5384:	2e00      	cmp	r6, #0
    5386:	d0e1      	beq.n	534c <SharedSpiCard::readSCR(scr_t*)+0x24>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5388:	7c60      	ldrb	r0, [r4, #17]
    538a:	2101      	movs	r1, #1
    538c:	f001 fdaa 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5390:	1d20      	adds	r0, r4, #4
    5392:	21ff      	movs	r1, #255	; 0xff
    5394:	9001      	str	r0, [sp, #4]
    5396:	f001 fe83 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    539a:	9801      	ldr	r0, [sp, #4]
    539c:	f001 fe36 	bl	700c <SdSpiArduinoDriver::deactivate()>
}
    53a0:	4630      	mov	r0, r6
    m_spiActive = false;
    53a2:	74e5      	strb	r5, [r4, #19]
}
    53a4:	b002      	add	sp, #8
    53a6:	bd70      	pop	{r4, r5, r6, pc}

000053a8 <SharedSpiCard::readSDS(sds_t*)>:
bool SharedSpiCard::readSDS(sds_t* sds) {
    53a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53aa:	4604      	mov	r4, r0
    cardCommand(CMD55, 0);
    53ac:	2200      	movs	r2, #0
    53ae:	460d      	mov	r5, r1
    53b0:	2137      	movs	r1, #55	; 0x37
    53b2:	f7ff fd1d 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    53b6:	2200      	movs	r2, #0
    53b8:	210d      	movs	r1, #13
    53ba:	4620      	mov	r0, r4
    53bc:	f7ff fd18 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    53c0:	b1a0      	cbz	r0, 53ec <SharedSpiCard::readSDS(sds_t*)+0x44>
    m_errorCode = code;
    53c2:	2315      	movs	r3, #21
    53c4:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    53c6:	7ce0      	ldrb	r0, [r4, #19]
    53c8:	b900      	cbnz	r0, 53cc <SharedSpiCard::readSDS(sds_t*)+0x24>
}
    53ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_spiDriver.send(data);
    53cc:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    53ce:	7c60      	ldrb	r0, [r4, #17]
    53d0:	2101      	movs	r1, #1
    53d2:	f001 fd87 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    53d6:	21ff      	movs	r1, #255	; 0xff
    53d8:	4628      	mov	r0, r5
    53da:	f001 fe61 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    53de:	4628      	mov	r0, r5
    53e0:	f001 fe14 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    53e4:	2300      	movs	r3, #0
  return false;
    53e6:	4618      	mov	r0, r3
    m_spiActive = false;
    53e8:	74e3      	strb	r3, [r4, #19]
}
    53ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_spiDriver.receive();
    53ec:	1d27      	adds	r7, r4, #4
    53ee:	4638      	mov	r0, r7
    53f0:	f001 fe38 	bl	7064 <SdSpiArduinoDriver::receive()>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    53f4:	4606      	mov	r6, r0
    53f6:	2800      	cmp	r0, #0
    53f8:	d1e3      	bne.n	53c2 <SharedSpiCard::readSDS(sds_t*)+0x1a>
  if (!readData(dst, sizeof(sds_t))) {
    53fa:	2240      	movs	r2, #64	; 0x40
    53fc:	4629      	mov	r1, r5
    53fe:	4620      	mov	r0, r4
    5400:	f7ff fc6c 	bl	4cdc <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5404:	2800      	cmp	r0, #0
    5406:	d0de      	beq.n	53c6 <SharedSpiCard::readSDS(sds_t*)+0x1e>
  if (m_spiActive) {
    5408:	7ce5      	ldrb	r5, [r4, #19]
    540a:	2d00      	cmp	r5, #0
    540c:	d0dd      	beq.n	53ca <SharedSpiCard::readSDS(sds_t*)+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    540e:	7c60      	ldrb	r0, [r4, #17]
    5410:	2101      	movs	r1, #1
    5412:	f001 fd67 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5416:	21ff      	movs	r1, #255	; 0xff
    5418:	4638      	mov	r0, r7
    541a:	f001 fe41 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    541e:	4638      	mov	r0, r7
    5420:	f001 fdf4 	bl	700c <SdSpiArduinoDriver::deactivate()>
  return true;
    5424:	4628      	mov	r0, r5
    m_spiActive = false;
    5426:	74e6      	strb	r6, [r4, #19]
}
    5428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    542a:	bf00      	nop

0000542c <SharedSpiCard::readCID(cid_t*)>:
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    542c:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    542e:	2200      	movs	r2, #0
    5430:	b082      	sub	sp, #8
    5432:	460e      	mov	r6, r1
    5434:	210a      	movs	r1, #10
    5436:	4604      	mov	r4, r0
    5438:	f7ff fcda 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    543c:	b1b0      	cbz	r0, 546c <SharedSpiCard::readCID(cid_t*)+0x40>
    m_errorCode = code;
    543e:	231c      	movs	r3, #28
    5440:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5442:	7ce0      	ldrb	r0, [r4, #19]
    5444:	b908      	cbnz	r0, 544a <SharedSpiCard::readCID(cid_t*)+0x1e>
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    5446:	b002      	add	sp, #8
    5448:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    544a:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    544c:	7c60      	ldrb	r0, [r4, #17]
    544e:	2101      	movs	r1, #1
    5450:	f001 fd48 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5454:	21ff      	movs	r1, #255	; 0xff
    5456:	4628      	mov	r0, r5
    5458:	f001 fe22 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    545c:	4628      	mov	r0, r5
    545e:	f001 fdd5 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5462:	2300      	movs	r3, #0
  return false;
    5464:	4618      	mov	r0, r3
    m_spiActive = false;
    5466:	74e3      	strb	r3, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    5468:	b002      	add	sp, #8
    546a:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    546c:	4605      	mov	r5, r0
    546e:	2210      	movs	r2, #16
    5470:	4631      	mov	r1, r6
    5472:	4620      	mov	r0, r4
    5474:	f7ff fc32 	bl	4cdc <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5478:	2800      	cmp	r0, #0
    547a:	d0e2      	beq.n	5442 <SharedSpiCard::readCID(cid_t*)+0x16>
  if (m_spiActive) {
    547c:	7ce6      	ldrb	r6, [r4, #19]
    547e:	2e00      	cmp	r6, #0
    5480:	d0e1      	beq.n	5446 <SharedSpiCard::readCID(cid_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5482:	7c60      	ldrb	r0, [r4, #17]
    5484:	2101      	movs	r1, #1
    5486:	f001 fd2d 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    548a:	1d20      	adds	r0, r4, #4
    548c:	21ff      	movs	r1, #255	; 0xff
    548e:	9001      	str	r0, [sp, #4]
    5490:	f001 fe06 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5494:	9801      	ldr	r0, [sp, #4]
    5496:	f001 fdb9 	bl	700c <SdSpiArduinoDriver::deactivate()>
}
    549a:	4630      	mov	r0, r6
    m_spiActive = false;
    549c:	74e5      	strb	r5, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    549e:	b002      	add	sp, #8
    54a0:	bd70      	pop	{r4, r5, r6, pc}
    54a2:	bf00      	nop

000054a4 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    54a4:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    54a6:	2200      	movs	r2, #0
    54a8:	b082      	sub	sp, #8
    54aa:	460e      	mov	r6, r1
    54ac:	2109      	movs	r1, #9
    54ae:	4604      	mov	r4, r0
    54b0:	f7ff fc9e 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    54b4:	b1b0      	cbz	r0, 54e4 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    54b6:	231c      	movs	r3, #28
    54b8:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    54ba:	7ce0      	ldrb	r0, [r4, #19]
    54bc:	b908      	cbnz	r0, 54c2 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    54be:	b002      	add	sp, #8
    54c0:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    54c2:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    54c4:	7c60      	ldrb	r0, [r4, #17]
    54c6:	2101      	movs	r1, #1
    54c8:	f001 fd0c 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    54cc:	21ff      	movs	r1, #255	; 0xff
    54ce:	4628      	mov	r0, r5
    54d0:	f001 fde6 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    54d4:	4628      	mov	r0, r5
    54d6:	f001 fd99 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    54da:	2300      	movs	r3, #0
  return false;
    54dc:	4618      	mov	r0, r3
    m_spiActive = false;
    54de:	74e3      	strb	r3, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    54e0:	b002      	add	sp, #8
    54e2:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    54e4:	4605      	mov	r5, r0
    54e6:	2210      	movs	r2, #16
    54e8:	4631      	mov	r1, r6
    54ea:	4620      	mov	r0, r4
    54ec:	f7ff fbf6 	bl	4cdc <SharedSpiCard::readData(unsigned char*, unsigned int)>
    54f0:	2800      	cmp	r0, #0
    54f2:	d0e2      	beq.n	54ba <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    54f4:	7ce6      	ldrb	r6, [r4, #19]
    54f6:	2e00      	cmp	r6, #0
    54f8:	d0e1      	beq.n	54be <SharedSpiCard::readCSD(csd_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    54fa:	7c60      	ldrb	r0, [r4, #17]
    54fc:	2101      	movs	r1, #1
    54fe:	f001 fcf1 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5502:	1d20      	adds	r0, r4, #4
    5504:	21ff      	movs	r1, #255	; 0xff
    5506:	9001      	str	r0, [sp, #4]
    5508:	f001 fdca 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    550c:	9801      	ldr	r0, [sp, #4]
    550e:	f001 fd7d 	bl	700c <SdSpiArduinoDriver::deactivate()>
}
    5512:	4630      	mov	r0, r6
    m_spiActive = false;
    5514:	74e5      	strb	r5, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5516:	b002      	add	sp, #8
    5518:	bd70      	pop	{r4, r5, r6, pc}
    551a:	bf00      	nop

0000551c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    551c:	b5f0      	push	{r4, r5, r6, r7, lr}
    551e:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    5520:	7d02      	ldrb	r2, [r0, #20]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    5522:	b083      	sub	sp, #12
    5524:	4606      	mov	r6, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
    5526:	2a01      	cmp	r2, #1
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    5528:	460d      	mov	r5, r1
    552a:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    552c:	d102      	bne.n	5534 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
    552e:	6983      	ldr	r3, [r0, #24]
    5530:	428b      	cmp	r3, r1
    5532:	d005      	beq.n	5540 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    5534:	4629      	mov	r1, r5
    5536:	4630      	mov	r0, r6
    5538:	f7ff fdce 	bl	50d8 <SharedSpiCard::readStart(unsigned long)>
    553c:	b180      	cbz	r0, 5560 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_curSector = sector;
    553e:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5540:	b197      	cbz	r7, 5568 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    if (!readStart(sector)) {
    5542:	2500      	movs	r5, #0
    5544:	e001      	b.n	554a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5546:	42af      	cmp	r7, r5
    5548:	d00e      	beq.n	5568 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    554a:	4621      	mov	r1, r4
    554c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5550:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5552:	3501      	adds	r5, #1
    5554:	f504 7400 	add.w	r4, r4, #512	; 0x200
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    5558:	f7ff fbc0 	bl	4cdc <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    555c:	2800      	cmp	r0, #0
    555e:	d1f2      	bne.n	5546 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
  return false;
    5560:	2400      	movs	r4, #0
}
    5562:	4620      	mov	r0, r4
    5564:	b003      	add	sp, #12
    5566:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_curSector += ns;
    5568:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    556a:	7f34      	ldrb	r4, [r6, #28]
  m_curSector += ns;
    556c:	443b      	add	r3, r7
    556e:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    5570:	b11c      	cbz	r4, 557a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
    5572:	2401      	movs	r4, #1
}
    5574:	4620      	mov	r0, r4
    5576:	b003      	add	sp, #12
    5578:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cardCommand(CMD12, 0)) {
    557a:	4622      	mov	r2, r4
    557c:	210c      	movs	r1, #12
    557e:	4630      	mov	r0, r6
  m_state = IDLE_STATE;
    5580:	7534      	strb	r4, [r6, #20]
  if (cardCommand(CMD12, 0)) {
    5582:	f7ff fc35 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5586:	4605      	mov	r5, r0
    5588:	b980      	cbnz	r0, 55ac <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
  if (m_spiActive) {
    558a:	7cf4      	ldrb	r4, [r6, #19]
    558c:	2c00      	cmp	r4, #0
    558e:	d0f0      	beq.n	5572 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5590:	2101      	movs	r1, #1
    5592:	7c70      	ldrb	r0, [r6, #17]
    5594:	f001 fca6 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5598:	1d30      	adds	r0, r6, #4
    559a:	21ff      	movs	r1, #255	; 0xff
    559c:	9001      	str	r0, [sp, #4]
    559e:	f001 fd7f 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    55a2:	9801      	ldr	r0, [sp, #4]
    55a4:	f001 fd32 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    55a8:	74f5      	strb	r5, [r6, #19]
}
    55aa:	e7da      	b.n	5562 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    m_errorCode = code;
    55ac:	2209      	movs	r2, #9
  if (m_spiActive) {
    55ae:	7cf3      	ldrb	r3, [r6, #19]
    55b0:	74b2      	strb	r2, [r6, #18]
    55b2:	2b00      	cmp	r3, #0
    55b4:	d0d4      	beq.n	5560 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_spiDriver.send(data);
    55b6:	1d35      	adds	r5, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    55b8:	2101      	movs	r1, #1
    55ba:	7c70      	ldrb	r0, [r6, #17]
    55bc:	f001 fc92 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    55c0:	21ff      	movs	r1, #255	; 0xff
    55c2:	4628      	mov	r0, r5
    55c4:	f001 fd6c 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    55c8:	4628      	mov	r0, r5
    55ca:	f001 fd1f 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    55ce:	74f4      	strb	r4, [r6, #19]
}
    55d0:	e7c7      	b.n	5562 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    55d2:	bf00      	nop

000055d4 <DedicatedSpiCard::setDedicatedSpi(bool)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
  if (!syncDevice()) {
    55d4:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    55d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    55da:	69da      	ldr	r2, [r3, #28]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    55dc:	b082      	sub	sp, #8
    55de:	4d24      	ldr	r5, [pc, #144]	; (5670 <DedicatedSpiCard::setDedicatedSpi(bool)+0x9c>)
    55e0:	4604      	mov	r4, r0
    55e2:	460e      	mov	r6, r1
    55e4:	42aa      	cmp	r2, r5
    55e6:	d111      	bne.n	560c <DedicatedSpiCard::setDedicatedSpi(bool)+0x38>
  if (m_state == WRITE_STATE) {
    55e8:	7d05      	ldrb	r5, [r0, #20]
    55ea:	2d02      	cmp	r5, #2
    55ec:	d006      	beq.n	55fc <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
  if (m_state == READ_STATE) {
    55ee:	2d01      	cmp	r5, #1
    55f0:	d00e      	beq.n	5610 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>
    return false;
  }
  m_dedicatedSpi = value;
  return true;
    55f2:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    55f4:	7726      	strb	r6, [r4, #28]
}
    55f6:	b002      	add	sp, #8
    55f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    55fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    55fe:	4798      	blx	r3
  if (!syncDevice()) {
    5600:	2800      	cmp	r0, #0
    5602:	d1f6      	bne.n	55f2 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    return false;
    5604:	2000      	movs	r0, #0
}
    5606:	b002      	add	sp, #8
    5608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncDevice()) {
    560c:	4790      	blx	r2
    560e:	e7f7      	b.n	5600 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2c>
  m_state = IDLE_STATE;
    5610:	f04f 0800 	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    5614:	210c      	movs	r1, #12
    5616:	4642      	mov	r2, r8
  m_state = IDLE_STATE;
    5618:	f880 8014 	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    561c:	f7ff fbe8 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5620:	4607      	mov	r7, r0
    5622:	b980      	cbnz	r0, 5646 <DedicatedSpiCard::setDedicatedSpi(bool)+0x72>
  if (m_spiActive) {
    5624:	7ce3      	ldrb	r3, [r4, #19]
    5626:	2b00      	cmp	r3, #0
    5628:	d0e3      	beq.n	55f2 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    562a:	4629      	mov	r1, r5
    562c:	7c60      	ldrb	r0, [r4, #17]
    562e:	f001 fc59 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5632:	1d20      	adds	r0, r4, #4
    5634:	21ff      	movs	r1, #255	; 0xff
    5636:	9001      	str	r0, [sp, #4]
    5638:	f001 fd32 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    563c:	9801      	ldr	r0, [sp, #4]
    563e:	f001 fce5 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5642:	74e7      	strb	r7, [r4, #19]
    5644:	e7d5      	b.n	55f2 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    m_errorCode = code;
    5646:	2209      	movs	r2, #9
  if (m_spiActive) {
    5648:	7ce3      	ldrb	r3, [r4, #19]
    564a:	74a2      	strb	r2, [r4, #18]
    564c:	2b00      	cmp	r3, #0
    564e:	d0d9      	beq.n	5604 <DedicatedSpiCard::setDedicatedSpi(bool)+0x30>
    m_spiDriver.send(data);
    5650:	1d26      	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5652:	4629      	mov	r1, r5
    5654:	7c60      	ldrb	r0, [r4, #17]
    5656:	f001 fc45 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    565a:	21ff      	movs	r1, #255	; 0xff
    565c:	4630      	mov	r0, r6
    565e:	f001 fd1f 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5662:	4630      	mov	r0, r6
    5664:	f001 fcd2 	bl	700c <SdSpiArduinoDriver::deactivate()>
    return false;
    5668:	4640      	mov	r0, r8
    m_spiActive = false;
    566a:	f884 8013 	strb.w	r8, [r4, #19]
    566e:	e7c2      	b.n	55f6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x22>
    5670:	00004dd9 	.word	0x00004dd9

00005674 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    5674:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    5676:	1d05      	adds	r5, r0, #4
    5678:	4616      	mov	r6, r2
    567a:	4604      	mov	r4, r0
    567c:	4628      	mov	r0, r5
    567e:	f001 fd0f 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    5682:	f44f 7200 	mov.w	r2, #512	; 0x200
    5686:	4631      	mov	r1, r6
    5688:	4628      	mov	r0, r5
    568a:	f001 fd13 	bl	70b4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    568e:	21ff      	movs	r1, #255	; 0xff
    5690:	4628      	mov	r0, r5
    5692:	f001 fd05 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
    5696:	21ff      	movs	r1, #255	; 0xff
    5698:	4628      	mov	r0, r5
    569a:	f001 fd01 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    569e:	4628      	mov	r0, r5
    56a0:	f001 fce0 	bl	7064 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    56a4:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    56a8:	7560      	strb	r0, [r4, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    56aa:	2b05      	cmp	r3, #5
    56ac:	d004      	beq.n	56b8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    56ae:	2321      	movs	r3, #33	; 0x21
  if (m_spiActive) {
    56b0:	7ce0      	ldrb	r0, [r4, #19]
    56b2:	74a3      	strb	r3, [r4, #18]
    56b4:	b910      	cbnz	r0, 56bc <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    56b6:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    56b8:	2001      	movs	r0, #1
}
    56ba:	bd70      	pop	{r4, r5, r6, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    56bc:	7c60      	ldrb	r0, [r4, #17]
    56be:	2101      	movs	r1, #1
    56c0:	f001 fc10 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    56c4:	21ff      	movs	r1, #255	; 0xff
    56c6:	4628      	mov	r0, r5
    56c8:	f001 fcea 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    56cc:	4628      	mov	r0, r5
    56ce:	f001 fc9d 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    56d2:	2300      	movs	r3, #0
}
    56d4:	4618      	mov	r0, r3
    m_spiActive = false;
    56d6:	74e3      	strb	r3, [r4, #19]
}
    56d8:	bd70      	pop	{r4, r5, r6, pc}
    56da:	bf00      	nop

000056dc <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    56dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56e0:	4d17      	ldr	r5, [pc, #92]	; (5740 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    56e2:	4606      	mov	r6, r0
    56e4:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    56e6:	f100 0804 	add.w	r8, r0, #4
    56ea:	682c      	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    56ec:	f504 7416 	add.w	r4, r4, #600	; 0x258
    56f0:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    56f2:	e003      	b.n	56fc <SharedSpiCard::writeData(unsigned char const*)+0x20>
    56f4:	682b      	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    56f6:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    56f8:	041b      	lsls	r3, r3, #16
    56fa:	d40c      	bmi.n	5716 <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    56fc:	4640      	mov	r0, r8
    56fe:	f001 fcb1 	bl	7064 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    5702:	28ff      	cmp	r0, #255	; 0xff
    5704:	d1f6      	bne.n	56f4 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    5706:	463a      	mov	r2, r7
    5708:	21fc      	movs	r1, #252	; 0xfc
    570a:	4630      	mov	r0, r6
    570c:	f7ff ffb2 	bl	5674 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5710:	b118      	cbz	r0, 571a <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    5712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    5716:	2325      	movs	r3, #37	; 0x25
    5718:	74b3      	strb	r3, [r6, #18]
  if (m_spiActive) {
    571a:	7cf0      	ldrb	r0, [r6, #19]
    571c:	2800      	cmp	r0, #0
    571e:	d0f8      	beq.n	5712 <SharedSpiCard::writeData(unsigned char const*)+0x36>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5720:	7c70      	ldrb	r0, [r6, #17]
    5722:	2101      	movs	r1, #1
    5724:	f001 fbde 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5728:	21ff      	movs	r1, #255	; 0xff
    572a:	4640      	mov	r0, r8
    572c:	f001 fcb8 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5730:	4640      	mov	r0, r8
    5732:	f001 fc6b 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5736:	2300      	movs	r3, #0
}
    5738:	4618      	mov	r0, r3
    m_spiActive = false;
    573a:	74f3      	strb	r3, [r6, #19]
}
    573c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5740:	2002b458 	.word	0x2002b458

00005744 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    5744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    5748:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    574a:	4615      	mov	r5, r2
    574c:	4a35      	ldr	r2, [pc, #212]	; (5824 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    574e:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    5750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    5752:	460e      	mov	r6, r1
    5754:	4293      	cmp	r3, r2
    5756:	d15c      	bne.n	5812 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xce>
  uint8_t type() const { return m_type; }
    5758:	7d80      	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    575a:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    575c:	f04f 0118 	mov.w	r1, #24
    5760:	4620      	mov	r0, r4
    sector <<= 9;
    5762:	bf18      	it	ne
    5764:	0276      	lslne	r6, r6, #9
  if (cardCommand(CMD24, sector)) {
    5766:	4632      	mov	r2, r6
    5768:	f7ff fb42 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    576c:	b148      	cbz	r0, 5782 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    m_errorCode = code;
    576e:	230d      	movs	r3, #13
    5770:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5772:	f894 9013 	ldrb.w	r9, [r4, #19]
    5776:	f1b9 0f00 	cmp.w	r9, #0
    577a:	d138      	bne.n	57ee <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xaa>
}
    577c:	4648      	mov	r0, r9
    577e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    5782:	462a      	mov	r2, r5
    5784:	21fe      	movs	r1, #254	; 0xfe
    5786:	4620      	mov	r0, r4
    5788:	f7ff ff74 	bl	5674 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    578c:	4681      	mov	r9, r0
    578e:	2800      	cmp	r0, #0
    5790:	d0ef      	beq.n	5772 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    5792:	4f25      	ldr	r7, [pc, #148]	; (5828 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    return m_spiDriver.receive();
    5794:	f104 0804 	add.w	r8, r4, #4
    5798:	683e      	ldr	r6, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    579a:	f506 7616 	add.w	r6, r6, #600	; 0x258
    579e:	b2b6      	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    57a0:	e003      	b.n	57aa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x66>
    57a2:	683b      	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    57a4:	1af3      	subs	r3, r6, r3
    if (timeout.timedOut()) {
    57a6:	041b      	lsls	r3, r3, #16
    57a8:	d438      	bmi.n	581c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd8>
    57aa:	4640      	mov	r0, r8
    57ac:	f001 fc5a 	bl	7064 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    57b0:	28ff      	cmp	r0, #255	; 0xff
    57b2:	4605      	mov	r5, r0
    57b4:	d1f5      	bne.n	57a2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
    57b6:	2200      	movs	r2, #0
    57b8:	210d      	movs	r1, #13
    57ba:	4620      	mov	r0, r4
    57bc:	f7ff fb18 	bl	4df0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    57c0:	bb48      	cbnz	r0, 5816 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
    57c2:	4640      	mov	r0, r8
    57c4:	f001 fc4e 	bl	7064 <SdSpiArduinoDriver::receive()>
    57c8:	4606      	mov	r6, r0
    57ca:	bb20      	cbnz	r0, 5816 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
  if (m_spiActive) {
    57cc:	7ce3      	ldrb	r3, [r4, #19]
    57ce:	2b00      	cmp	r3, #0
    57d0:	d0d4      	beq.n	577c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    57d2:	2101      	movs	r1, #1
    57d4:	7c60      	ldrb	r0, [r4, #17]
  return true;
    57d6:	4699      	mov	r9, r3
    57d8:	f001 fb84 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    57dc:	4629      	mov	r1, r5
    57de:	4640      	mov	r0, r8
    57e0:	f001 fc5e 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    57e4:	4640      	mov	r0, r8
    57e6:	f001 fc11 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    57ea:	74e6      	strb	r6, [r4, #19]
}
    57ec:	e7c6      	b.n	577c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    m_spiDriver.send(data);
    57ee:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    57f0:	7c60      	ldrb	r0, [r4, #17]
    57f2:	2101      	movs	r1, #1
    57f4:	f001 fb76 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    57f8:	21ff      	movs	r1, #255	; 0xff
    57fa:	4628      	mov	r0, r5
    57fc:	f001 fc50 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5800:	4628      	mov	r0, r5
    5802:	f001 fc03 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5806:	2300      	movs	r3, #0
  return false;
    5808:	4699      	mov	r9, r3
    m_spiActive = false;
    580a:	74e3      	strb	r3, [r4, #19]
}
    580c:	4648      	mov	r0, r9
    580e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    5812:	4798      	blx	r3
    5814:	e7a1      	b.n	575a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    m_errorCode = code;
    5816:	230a      	movs	r3, #10
    5818:	74a3      	strb	r3, [r4, #18]
    goto fail;
    581a:	e7aa      	b.n	5772 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    581c:	2324      	movs	r3, #36	; 0x24
    581e:	74a3      	strb	r3, [r4, #18]
    goto fail;
    5820:	e7a7      	b.n	5772 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    5822:	bf00      	nop
    5824:	00004b91 	.word	0x00004b91
    5828:	2002b458 	.word	0x2002b458

0000582c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    582c:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    582e:	7f04      	ldrb	r4, [r0, #28]
    5830:	b134      	cbz	r4, 5840 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    5832:	6804      	ldr	r4, [r0, #0]
    5834:	2301      	movs	r3, #1
    5836:	6a64      	ldr	r4, [r4, #36]	; 0x24
    5838:	46a4      	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    583a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    583e:	4760      	bx	ip
}
    5840:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    5844:	f7ff bf7e 	b.w	5744 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00005848 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    5848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    584c:	469a      	mov	sl, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    584e:	7d03      	ldrb	r3, [r0, #20]
                                    size_t ns) {
    5850:	b081      	sub	sp, #4
    5852:	4607      	mov	r7, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    5854:	2b02      	cmp	r3, #2
                                    size_t ns) {
    5856:	460c      	mov	r4, r1
    5858:	4690      	mov	r8, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    585a:	d059      	beq.n	5910 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    if (!writeStart(sector)) {
    585c:	683b      	ldr	r3, [r7, #0]
    585e:	4621      	mov	r1, r4
    5860:	4638      	mov	r0, r7
    5862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    5864:	4798      	blx	r3
    5866:	2800      	cmp	r0, #0
    5868:	d037      	beq.n	58da <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
      goto fail;
    }
    m_curSector = sector;
    586a:	61bc      	str	r4, [r7, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    586c:	f1ba 0f00 	cmp.w	sl, #0
    5870:	d023      	beq.n	58ba <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x72>
    if (!writeStart(sector)) {
    5872:	f04f 0900 	mov.w	r9, #0
    5876:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 591c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd4>
    587a:	4d27      	ldr	r5, [pc, #156]	; (5918 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd0>)
    return m_spiDriver.receive();
    587c:	1d3e      	adds	r6, r7, #4
    if (!writeData(src)) {
    587e:	683b      	ldr	r3, [r7, #0]
    5880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    5882:	455b      	cmp	r3, fp
    5884:	d12d      	bne.n	58e2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x9a>
    5886:	682c      	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5888:	f504 7416 	add.w	r4, r4, #600	; 0x258
    588c:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    588e:	e003      	b.n	5898 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    5890:	682b      	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5892:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    5894:	041b      	lsls	r3, r3, #16
    5896:	d41c      	bmi.n	58d2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8a>
    5898:	4630      	mov	r0, r6
    589a:	f001 fbe3 	bl	7064 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    589e:	28ff      	cmp	r0, #255	; 0xff
    58a0:	d1f6      	bne.n	5890 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    58a2:	4642      	mov	r2, r8
    58a4:	21fc      	movs	r1, #252	; 0xfc
    58a6:	4638      	mov	r0, r7
    58a8:	f7ff fee4 	bl	5674 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    58ac:	b198      	cbz	r0, 58d6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8e>
  for (size_t i = 0; i < ns; i++, src += 512) {
    58ae:	f109 0901 	add.w	r9, r9, #1
    58b2:	f508 7800 	add.w	r8, r8, #512	; 0x200
    58b6:	45ca      	cmp	sl, r9
    58b8:	d1e1      	bne.n	587e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
      goto fail;
    }
  }
  m_curSector += ns;
    58ba:	69bb      	ldr	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    58bc:	7f38      	ldrb	r0, [r7, #28]
  m_curSector += ns;
    58be:	4453      	add	r3, sl
    58c0:	61bb      	str	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    58c2:	b958      	cbnz	r0, 58dc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x94>
    58c4:	683b      	ldr	r3, [r7, #0]
    58c6:	4638      	mov	r0, r7
    58c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68

fail:
  return false;
}
    58ca:	b001      	add	sp, #4
    58cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : writeStop();
    58d0:	4718      	bx	r3
    m_errorCode = code;
    58d2:	2325      	movs	r3, #37	; 0x25
    58d4:	74bb      	strb	r3, [r7, #18]
  if (m_spiActive) {
    58d6:	7cfb      	ldrb	r3, [r7, #19]
    58d8:	b94b      	cbnz	r3, 58ee <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xa6>
  return false;
    58da:	2000      	movs	r0, #0
}
    58dc:	b001      	add	sp, #4
    58de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!writeData(src)) {
    58e2:	4641      	mov	r1, r8
    58e4:	4638      	mov	r0, r7
    58e6:	4798      	blx	r3
    58e8:	2800      	cmp	r0, #0
    58ea:	d1e0      	bne.n	58ae <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x66>
    58ec:	e7f5      	b.n	58da <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    58ee:	7c78      	ldrb	r0, [r7, #17]
    58f0:	2101      	movs	r1, #1
    58f2:	f001 faf7 	bl	6ee4 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    58f6:	21ff      	movs	r1, #255	; 0xff
    58f8:	4630      	mov	r0, r6
    58fa:	f001 fbd1 	bl	70a0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    58fe:	4630      	mov	r0, r6
    5900:	f001 fb84 	bl	700c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5904:	2300      	movs	r3, #0
  return false;
    5906:	4618      	mov	r0, r3
    m_spiActive = false;
    5908:	74fb      	strb	r3, [r7, #19]
}
    590a:	b001      	add	sp, #4
    590c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    5910:	6983      	ldr	r3, [r0, #24]
    5912:	428b      	cmp	r3, r1
    5914:	d1a2      	bne.n	585c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
    5916:	e7a9      	b.n	586c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
    5918:	2002b458 	.word	0x2002b458
    591c:	000056dd 	.word	0x000056dd

00005920 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() { return false; }
    5920:	2000      	movs	r0, #0
    5922:	4770      	bx	lr

00005924 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() { return false; }
    5924:	2000      	movs	r0, #0
    5926:	4770      	bx	lr

00005928 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    5928:	2000      	movs	r0, #0
    592a:	4770      	bx	lr

0000592c <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    592c:	4770      	bx	lr
    592e:	bf00      	nop

00005930 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    5930:	4b08      	ldr	r3, [pc, #32]	; (5954 <sdIrs()+0x24>)
    5932:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    5934:	4a08      	ldr	r2, [pc, #32]	; (5958 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    5936:	4809      	ldr	r0, [pc, #36]	; (595c <sdIrs()+0x2c>)
static void sdIrs() {
    5938:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    593a:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    593c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    593e:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    5940:	6812      	ldr	r2, [r2, #0]
}
    5942:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    5946:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    5948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    594a:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    594e:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    5950:	7001      	strb	r1, [r0, #0]
}
    5952:	4770      	bx	lr
    5954:	402c0000 	.word	0x402c0000
    5958:	2002a868 	.word	0x2002a868
    595c:	2002b49a 	.word	0x2002b49a

00005960 <isBusyDat()>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    5960:	4b03      	ldr	r3, [pc, #12]	; (5970 <isBusyDat()+0x10>)
    5962:	6a58      	ldr	r0, [r3, #36]	; 0x24
    5964:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    5968:	f3c0 6000 	ubfx	r0, r0, #24, #1
    596c:	4770      	bx	lr
    596e:	bf00      	nop
    5970:	402c0000 	.word	0x402c0000

00005974 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    5974:	4b01      	ldr	r3, [pc, #4]	; (597c <isBusyDMA()+0x8>)
    5976:	7818      	ldrb	r0, [r3, #0]
    5978:	4770      	bx	lr
    597a:	bf00      	nop
    597c:	2002b49a 	.word	0x2002b49a

00005980 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5980:	4a2b      	ldr	r2, [pc, #172]	; (5a30 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5982:	4b2c      	ldr	r3, [pc, #176]	; (5a34 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5984:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5986:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    598a:	492b      	ldr	r1, [pc, #172]	; (5a38 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    598c:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5994:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    5996:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5998:	4c28      	ldr	r4, [pc, #160]	; (5a3c <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    599a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    599e:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000 * kHzMax;
    59a2:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    59a6:	089b      	lsrs	r3, r3, #2
    59a8:	fbb1 fef3 	udiv	lr, r1, r3
    59ac:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    59b0:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    59b4:	d235      	bcs.n	5a22 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    59b6:	2301      	movs	r3, #1
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    59b8:	461e      	mov	r6, r3
    59ba:	005b      	lsls	r3, r3, #1
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    59bc:	011a      	lsls	r2, r3, #4
    59be:	fbbe f2f2 	udiv	r2, lr, r2
    59c2:	4282      	cmp	r2, r0
    59c4:	d901      	bls.n	59ca <setSdclk(unsigned long)+0x4a>
    59c6:	2bff      	cmp	r3, #255	; 0xff
    59c8:	d9f6      	bls.n	59b8 <setSdclk(unsigned long)+0x38>
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    59ca:	fbbe f2f3 	udiv	r2, lr, r3
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    59ce:	0236      	lsls	r6, r6, #8
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    59d0:	4290      	cmp	r0, r2
    59d2:	d22a      	bcs.n	5a2a <setSdclk(unsigned long)+0xaa>
    59d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    59d8:	2201      	movs	r2, #1
    59da:	e000      	b.n	59de <setSdclk(unsigned long)+0x5e>
    59dc:	46a4      	mov	ip, r4
    dvs++;
    59de:	4615      	mov	r5, r2
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    59e0:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    59e4:	3201      	adds	r2, #1
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    59e6:	fbbe f1fc 	udiv	r1, lr, ip
    59ea:	4281      	cmp	r1, r0
    59ec:	d917      	bls.n	5a1e <setSdclk(unsigned long)+0x9e>
    59ee:	2a10      	cmp	r2, #16
    59f0:	d1f4      	bne.n	59dc <setSdclk(unsigned long)+0x5c>
    59f2:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    59f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    59f8:	4911      	ldr	r1, [pc, #68]	; (5a40 <setSdclk(unsigned long)+0xc0>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    59fa:	4a12      	ldr	r2, [pc, #72]	; (5a44 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    59fc:	fb03 fc0c 	mul.w	ip, r3, ip
    5a00:	fbbe f3fc 	udiv	r3, lr, ip
    5a04:	600b      	str	r3, [r1, #0]
                      SDHC_SYSCTL_SDCLKFS_MASK);
    5a06:	4b10      	ldr	r3, [pc, #64]	; (5a48 <setSdclk(unsigned long)+0xc8>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    5a08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);
    5a0a:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    5a0c:	432b      	orrs	r3, r5
    5a0e:	4333      	orrs	r3, r6
    5a10:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
    5a14:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    5a16:	6a53      	ldr	r3, [r2, #36]	; 0x24
    5a18:	071b      	lsls	r3, r3, #28
    5a1a:	d5fc      	bpl.n	5a16 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    5a1c:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    5a1e:	012d      	lsls	r5, r5, #4
    5a20:	e7e8      	b.n	59f4 <setSdclk(unsigned long)+0x74>
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5a22:	4672      	mov	r2, lr
    5a24:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    5a26:	2301      	movs	r3, #1
    5a28:	e7d2      	b.n	59d0 <setSdclk(unsigned long)+0x50>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5a2a:	469c      	mov	ip, r3
    5a2c:	2500      	movs	r5, #0
    5a2e:	e7e1      	b.n	59f4 <setSdclk(unsigned long)+0x74>
    5a30:	400fc000 	.word	0x400fc000
    5a34:	400d8000 	.word	0x400d8000
    5a38:	5e69ec00 	.word	0x5e69ec00
    5a3c:	aaaaaaab 	.word	0xaaaaaaab
    5a40:	2000df40 	.word	0x2000df40
    5a44:	402c0000 	.word	0x402c0000
    5a48:	fff0000f 	.word	0xfff0000f

00005a4c <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    5a4c:	4b01      	ldr	r3, [pc, #4]	; (5a54 <SdioCard::errorCode() const+0x8>)
    5a4e:	7818      	ldrb	r0, [r3, #0]
    5a50:	4770      	bx	lr
    5a52:	bf00      	nop
    5a54:	20008bea 	.word	0x20008bea

00005a58 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    5a58:	4b01      	ldr	r3, [pc, #4]	; (5a60 <SdioCard::errorData() const+0x8>)
    5a5a:	6818      	ldr	r0, [r3, #0]
    5a5c:	4770      	bx	lr
    5a5e:	bf00      	nop
    5a60:	2002a868 	.word	0x2002a868

00005a64 <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    5a64:	b410      	push	{r4}
  memcpy(cid, &m_cid, sizeof(cid_t));
    5a66:	4c07      	ldr	r4, [pc, #28]	; (5a84 <SdioCard::readCID(cid_t*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    5a68:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    5a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5a6c:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    5a70:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
    5a72:	f8cc 1004 	str.w	r1, [ip, #4]
    5a76:	f8cc 2008 	str.w	r2, [ip, #8]
    5a7a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    5a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    5a82:	4770      	bx	lr
    5a84:	2002a154 	.word	0x2002a154

00005a88 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    5a88:	b410      	push	{r4}
  memcpy(csd, &m_csd, sizeof(csd_t));
    5a8a:	4c07      	ldr	r4, [pc, #28]	; (5aa8 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    5a8c:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    5a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5a90:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    5a94:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, sizeof(csd_t));
    5a96:	f8cc 1004 	str.w	r1, [ip, #4]
    5a9a:	f8cc 2008 	str.w	r2, [ip, #8]
    5a9e:	f8cc 300c 	str.w	r3, [ip, #12]
}
    5aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
    5aa6:	4770      	bx	lr
    5aa8:	2002a164 	.word	0x2002a164

00005aac <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    5aac:	4b02      	ldr	r3, [pc, #8]	; (5ab8 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    5aae:	2001      	movs	r0, #1
  *ocr = m_ocr;
    5ab0:	681b      	ldr	r3, [r3, #0]
    5ab2:	600b      	str	r3, [r1, #0]
}
    5ab4:	4770      	bx	lr
    5ab6:	bf00      	nop
    5ab8:	2002a174 	.word	0x2002a174

00005abc <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    5abc:	4a03      	ldr	r2, [pc, #12]	; (5acc <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readSCR(scr_t* scr) {
    5abe:	460b      	mov	r3, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    5ac0:	ca03      	ldmia	r2!, {r0, r1}
    5ac2:	6018      	str	r0, [r3, #0]
  return true;
}
    5ac4:	2001      	movs	r0, #1
  memcpy(scr, &m_scr, sizeof(scr_t));
    5ac6:	6059      	str	r1, [r3, #4]
}
    5ac8:	4770      	bx	lr
    5aca:	bf00      	nop
    5acc:	2002a17c 	.word	0x2002a17c

00005ad0 <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    5ad0:	b530      	push	{r4, r5, lr}
  memcpy(sds, &m_sds, sizeof(sds_t));
    5ad2:	4c0b      	ldr	r4, [pc, #44]	; (5b00 <SdioCard::readSDS(sds_t*)+0x30>)
    5ad4:	468c      	mov	ip, r1
    5ad6:	f104 0540 	add.w	r5, r4, #64	; 0x40
    5ada:	46a6      	mov	lr, r4
    5adc:	f10c 0c10 	add.w	ip, ip, #16
    5ae0:	3410      	adds	r4, #16
    5ae2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5ae6:	45ae      	cmp	lr, r5
    5ae8:	f84c 0c10 	str.w	r0, [ip, #-16]
    5aec:	f84c 1c0c 	str.w	r1, [ip, #-12]
    5af0:	f84c 2c08 	str.w	r2, [ip, #-8]
    5af4:	f84c 3c04 	str.w	r3, [ip, #-4]
    5af8:	d1ef      	bne.n	5ada <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    5afa:	2001      	movs	r0, #1
    5afc:	bd30      	pop	{r4, r5, pc}
    5afe:	bf00      	nop
    5b00:	2002a184 	.word	0x2002a184

00005b04 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    5b04:	4770      	bx	lr
    5b06:	bf00      	nop

00005b08 <SdioCard::~SdioCard()>:
    5b08:	b510      	push	{r4, lr}
    5b0a:	4604      	mov	r4, r0
    5b0c:	210c      	movs	r1, #12
    5b0e:	f002 fb4b 	bl	81a8 <operator delete(void*, unsigned int)>
    5b12:	4620      	mov	r0, r4
    5b14:	bd10      	pop	{r4, pc}
    5b16:	bf00      	nop

00005b18 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
    5b18:	4b04      	ldr	r3, [pc, #16]	; (5b2c <SdioCard::type() const+0x14>)
    5b1a:	781b      	ldrb	r3, [r3, #0]
    5b1c:	b123      	cbz	r3, 5b28 <SdioCard::type() const+0x10>
    5b1e:	4b04      	ldr	r3, [pc, #16]	; (5b30 <SdioCard::type() const+0x18>)
    5b20:	7818      	ldrb	r0, [r3, #0]
    5b22:	3002      	adds	r0, #2
    5b24:	b2c0      	uxtb	r0, r0
    5b26:	4770      	bx	lr
    5b28:	2001      	movs	r0, #1
                    : SD_CARD_TYPE_SD1;
}
    5b2a:	4770      	bx	lr
    5b2c:	2002b497 	.word	0x2002b497
    5b30:	2002b498 	.word	0x2002b498

00005b34 <SdioCard::sectorCount()>:
    uint8_t ver = csd[0] >> 6;
    5b34:	4a16      	ldr	r2, [pc, #88]	; (5b90 <SdioCard::sectorCount()+0x5c>)
    5b36:	7813      	ldrb	r3, [r2, #0]
    if (ver == 0) {
    5b38:	099b      	lsrs	r3, r3, #6
    5b3a:	d00e      	beq.n	5b5a <SdioCard::sectorCount()+0x26>
    } else if (ver == 1) {
    5b3c:	2b01      	cmp	r3, #1
    5b3e:	d001      	beq.n	5b44 <SdioCard::sectorCount()+0x10>
      return 0;
    5b40:	2000      	movs	r0, #0
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    5b42:	4770      	bx	lr
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5b44:	79d3      	ldrb	r3, [r2, #7]
      c_size |= csd[9];
    5b46:	8910      	ldrh	r0, [r2, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5b48:	041b      	lsls	r3, r3, #16
      c_size |= csd[9];
    5b4a:	ba40      	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5b4c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    5b50:	b280      	uxth	r0, r0
    5b52:	4318      	orrs	r0, r3
      return (c_size + 1) << 10;
    5b54:	3001      	adds	r0, #1
    5b56:	0280      	lsls	r0, r0, #10
    5b58:	4770      	bx	lr
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5b5a:	7a53      	ldrb	r3, [r2, #9]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5b5c:	7a10      	ldrb	r0, [r2, #8]
    5b5e:	f892 c007 	ldrb.w	ip, [r2, #7]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5b62:	005b      	lsls	r3, r3, #1
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5b64:	7991      	ldrb	r1, [r2, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5b66:	0980      	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5b68:	f003 0306 	and.w	r3, r3, #6
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5b6c:	ea40 008c 	orr.w	r0, r0, ip, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5b70:	f892 c00a 	ldrb.w	ip, [r2, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5b74:	0289      	lsls	r1, r1, #10
      uint8_t read_bl_len = csd[5] & 15;
    5b76:	7952      	ldrb	r2, [r2, #5]
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5b78:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5b7c:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5b80:	f002 020f 	and.w	r2, r2, #15
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5b84:	4308      	orrs	r0, r1
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5b86:	4413      	add	r3, r2
    5b88:	3001      	adds	r0, #1
    5b8a:	3b07      	subs	r3, #7
    5b8c:	4098      	lsls	r0, r3
    5b8e:	4770      	bx	lr
    5b90:	2002a164 	.word	0x2002a164

00005b94 <waitDmaStatus()>:
static bool waitDmaStatus() {
    5b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  m_busyFcn = fcn;
    5b96:	4b13      	ldr	r3, [pc, #76]	; (5be4 <waitDmaStatus()+0x50>)
    5b98:	4f13      	ldr	r7, [pc, #76]	; (5be8 <waitDmaStatus()+0x54>)
static bool isBusyDMA() { return m_dmaBusy; }
    5b9a:	4d14      	ldr	r5, [pc, #80]	; (5bec <waitDmaStatus()+0x58>)
  m_busyFcn = fcn;
    5b9c:	603b      	str	r3, [r7, #0]
  uint32_t m = micros();
    5b9e:	f002 f9d5 	bl	7f4c <micros>
static bool isBusyDMA() { return m_dmaBusy; }
    5ba2:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5ba4:	b17b      	cbz	r3, 5bc6 <waitDmaStatus()+0x32>
    5ba6:	4604      	mov	r4, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ba8:	4e11      	ldr	r6, [pc, #68]	; (5bf0 <waitDmaStatus()+0x5c>)
    5baa:	e003      	b.n	5bb4 <waitDmaStatus()+0x20>
    yield();
    5bac:	f003 fcd8 	bl	9560 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    5bb0:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5bb2:	b143      	cbz	r3, 5bc6 <waitDmaStatus()+0x32>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5bb4:	f002 f9ca 	bl	7f4c <micros>
    5bb8:	1b00      	subs	r0, r0, r4
    5bba:	42b0      	cmp	r0, r6
    5bbc:	d9f6      	bls.n	5bac <waitDmaStatus()+0x18>
      m_busyFcn = 0;
    5bbe:	2300      	movs	r3, #0
    return false;  // Caller will set errorCode.
    5bc0:	4618      	mov	r0, r3
      m_busyFcn = 0;
    5bc2:	603b      	str	r3, [r7, #0]
}
    5bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5bc6:	4b0b      	ldr	r3, [pc, #44]	; (5bf4 <waitDmaStatus()+0x60>)
  m_busyFcn = 0;
    5bc8:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5bca:	6818      	ldr	r0, [r3, #0]
  m_busyFcn = 0;
    5bcc:	603a      	str	r2, [r7, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5bce:	f010 0002 	ands.w	r0, r0, #2
    5bd2:	d0f7      	beq.n	5bc4 <waitDmaStatus()+0x30>
    5bd4:	681a      	ldr	r2, [r3, #0]
    5bd6:	4b08      	ldr	r3, [pc, #32]	; (5bf8 <waitDmaStatus()+0x64>)
    5bd8:	421a      	tst	r2, r3
    5bda:	bf0c      	ite	eq
    5bdc:	2001      	moveq	r0, #1
    5bde:	2000      	movne	r0, #0
}
    5be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5be2:	bf00      	nop
    5be4:	00005975 	.word	0x00005975
    5be8:	2002a864 	.word	0x2002a864
    5bec:	2002b49a 	.word	0x2002b49a
    5bf0:	000f4240 	.word	0x000f4240
    5bf4:	2002a868 	.word	0x2002a868
    5bf8:	117f0000 	.word	0x117f0000

00005bfc <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    5bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    5c00:	f002 f9a4 	bl	7f4c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5c04:	4e17      	ldr	r6, [pc, #92]	; (5c64 <waitTransferComplete() [clone .part.0]+0x68>)
    5c06:	4d18      	ldr	r5, [pc, #96]	; (5c68 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    5c08:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c0a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5c80 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    5c0e:	e004      	b.n	5c1a <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c10:	f002 f99c 	bl	7f4c <micros>
    5c14:	1bc0      	subs	r0, r0, r7
    5c16:	4540      	cmp	r0, r8
    5c18:	d81b      	bhi.n	5c52 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5c1a:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    5c1c:	402c      	ands	r4, r5
    5c1e:	d0f7      	beq.n	5c10 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    5c20:	4a12      	ldr	r2, [pc, #72]	; (5c6c <waitTransferComplete() [clone .part.0]+0x70>)
    5c22:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    5c24:	4b12      	ldr	r3, [pc, #72]	; (5c70 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5c26:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5c28:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5c2a:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5c2c:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5c2e:	4a11      	ldr	r2, [pc, #68]	; (5c74 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    5c30:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5c32:	681b      	ldr	r3, [r3, #0]
    5c34:	4213      	tst	r3, r2
    5c36:	d009      	beq.n	5c4c <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    5c38:	490f      	ldr	r1, [pc, #60]	; (5c78 <waitTransferComplete() [clone .part.0]+0x7c>)
    5c3a:	2420      	movs	r4, #32
  m_errorLine = line;
    5c3c:	4b0f      	ldr	r3, [pc, #60]	; (5c7c <waitTransferComplete() [clone .part.0]+0x80>)
    5c3e:	f240 22aa 	movw	r2, #682	; 0x2aa
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    5c42:	2000      	movs	r0, #0
  m_errorCode = code;
    5c44:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5c46:	601a      	str	r2, [r3, #0]
}
    5c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    5c4c:	2001      	movs	r0, #1
}
    5c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    5c52:	4a06      	ldr	r2, [pc, #24]	; (5c6c <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    5c54:	4b06      	ldr	r3, [pc, #24]	; (5c70 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5c56:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5c58:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5c5a:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5c5c:	681b      	ldr	r3, [r3, #0]
    5c5e:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5c60:	e7ea      	b.n	5c38 <waitTransferComplete() [clone .part.0]+0x3c>
    5c62:	bf00      	nop
    5c64:	402c0000 	.word	0x402c0000
    5c68:	117f0002 	.word	0x117f0002
    5c6c:	2002b499 	.word	0x2002b499
    5c70:	2002a868 	.word	0x2002a868
    5c74:	117f0000 	.word	0x117f0000
    5c78:	20008bea 	.word	0x20008bea
    5c7c:	20025f48 	.word	0x20025f48
    5c80:	000f4240 	.word	0x000f4240

00005c84 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    5c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    5c88:	4c26      	ldr	r4, [pc, #152]	; (5d24 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    5c8a:	460f      	mov	r7, r1
  if (!m_transferActive) {
    5c8c:	7823      	ldrb	r3, [r4, #0]
    5c8e:	2b00      	cmp	r3, #0
    5c90:	d138      	bne.n	5d04 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    5c92:	4b25      	ldr	r3, [pc, #148]	; (5d28 <SdioCard::writeData(unsigned char const*)+0xa4>)
    5c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5c96:	05d2      	lsls	r2, r2, #23
    5c98:	d52b      	bpl.n	5cf2 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5c9a:	4d23      	ldr	r5, [pc, #140]	; (5d28 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c9c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5d34 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5ca0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5ca6:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    5ca8:	f002 f950 	bl	7f4c <micros>
    5cac:	4606      	mov	r6, r0
  while (fcn()) {
    5cae:	e004      	b.n	5cba <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5cb0:	f002 f94c 	bl	7f4c <micros>
    5cb4:	1b80      	subs	r0, r0, r6
    5cb6:	4540      	cmp	r0, r8
    5cb8:	d82a      	bhi.n	5d10 <SdioCard::writeData(unsigned char const*)+0x8c>
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    5cba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    5cbc:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    5cc0:	d0f6      	beq.n	5cb0 <SdioCard::writeData(unsigned char const*)+0x2c>
    5cc2:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    5cc6:	4818      	ldr	r0, [pc, #96]	; (5d28 <SdioCard::writeData(unsigned char const*)+0xa4>)
    5cc8:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    5ccc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5cce:	055b      	lsls	r3, r3, #21
    5cd0:	d5fc      	bpl.n	5ccc <SdioCard::writeData(unsigned char const*)+0x48>
    5cd2:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    5cd6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5cda:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    5cdc:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5cde:	d1fa      	bne.n	5cd6 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    5ce0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    5ce4:	45bc      	cmp	ip, r7
    5ce6:	d1f1      	bne.n	5ccc <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    5ce8:	2301      	movs	r3, #1
  return true;
    5cea:	4618      	mov	r0, r3
  m_transferActive = true;
    5cec:	7023      	strb	r3, [r4, #0]
}
    5cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5cf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5cf4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    5cf8:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    5cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5cfc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    5d00:	629a      	str	r2, [r3, #40]	; 0x28
    5d02:	e7ca      	b.n	5c9a <SdioCard::writeData(unsigned char const*)+0x16>
    5d04:	f7ff ff7a 	bl	5bfc <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    5d08:	2800      	cmp	r0, #0
    5d0a:	d1c2      	bne.n	5c92 <SdioCard::writeData(unsigned char const*)+0xe>
}
    5d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    5d10:	4906      	ldr	r1, [pc, #24]	; (5d2c <SdioCard::writeData(unsigned char const*)+0xa8>)
    5d12:	2422      	movs	r4, #34	; 0x22
  m_errorLine = line;
    5d14:	4b06      	ldr	r3, [pc, #24]	; (5d30 <SdioCard::writeData(unsigned char const*)+0xac>)
    5d16:	f240 421f 	movw	r2, #1055	; 0x41f
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    5d1a:	4648      	mov	r0, r9
  m_errorCode = code;
    5d1c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5d1e:	601a      	str	r2, [r3, #0]
}
    5d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d24:	2002b499 	.word	0x2002b499
    5d28:	402c0000 	.word	0x402c0000
    5d2c:	20008bea 	.word	0x20008bea
    5d30:	20025f48 	.word	0x20025f48
    5d34:	000f4240 	.word	0x000f4240

00005d38 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    5d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d3c:	4607      	mov	r7, r0
    5d3e:	4688      	mov	r8, r1
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    5d40:	4c1f      	ldr	r4, [pc, #124]	; (5dc0 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    5d42:	f002 f903 	bl	7f4c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d46:	4e1f      	ldr	r6, [pc, #124]	; (5dc4 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5d48:	4605      	mov	r5, r0
  while (fcn()) {
    5d4a:	e004      	b.n	5d56 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d4c:	f002 f8fe 	bl	7f4c <micros>
    5d50:	1b43      	subs	r3, r0, r5
    5d52:	42b3      	cmp	r3, r6
    5d54:	d824      	bhi.n	5da0 <cardCommand(unsigned long, unsigned long)+0x68>
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    5d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5d58:	07d9      	lsls	r1, r3, #31
    5d5a:	d4f7      	bmi.n	5d4c <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5d5c:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    5d5e:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5d62:	d420      	bmi.n	5da6 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    5d64:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    5d68:	4c15      	ldr	r4, [pc, #84]	; (5dc0 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5d6a:	4e17      	ldr	r6, [pc, #92]	; (5dc8 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    5d6c:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    5d6e:	f002 f8ed 	bl	7f4c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d72:	4f14      	ldr	r7, [pc, #80]	; (5dc4 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5d74:	4605      	mov	r5, r0
  while (fcn()) {
    5d76:	e004      	b.n	5d82 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d78:	f002 f8e8 	bl	7f4c <micros>
    5d7c:	1b40      	subs	r0, r0, r5
    5d7e:	42b8      	cmp	r0, r7
    5d80:	d80e      	bhi.n	5da0 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5d82:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    5d84:	4233      	tst	r3, r6
    5d86:	d0f7      	beq.n	5d78 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    5d88:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5d8a:	4b10      	ldr	r3, [pc, #64]	; (5dcc <cardCommand(unsigned long, unsigned long)+0x94>)
    5d8c:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5d8e:	681a      	ldr	r2, [r3, #0]
    5d90:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5d92:	681a      	ldr	r2, [r3, #0]
    5d94:	07d2      	lsls	r2, r2, #31
    5d96:	d503      	bpl.n	5da0 <cardCommand(unsigned long, unsigned long)+0x68>
    5d98:	681b      	ldr	r3, [r3, #0]
    5d9a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    5d9e:	d00b      	beq.n	5db8 <cardCommand(unsigned long, unsigned long)+0x80>
    5da0:	2000      	movs	r0, #0
}
    5da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5da6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5da8:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5daa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    5dae:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5db0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    5db2:	4313      	orrs	r3, r2
    5db4:	64a3      	str	r3, [r4, #72]	; 0x48
    5db6:	e7d5      	b.n	5d64 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5db8:	2001      	movs	r0, #1
}
    5dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dbe:	bf00      	nop
    5dc0:	402c0000 	.word	0x402c0000
    5dc4:	000f4240 	.word	0x000f4240
    5dc8:	000f0001 	.word	0x000f0001
    5dcc:	2002a868 	.word	0x2002a868

00005dd0 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    5dd0:	4b15      	ldr	r3, [pc, #84]	; (5e28 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    5dd2:	b530      	push	{r4, r5, lr}
    5dd4:	460d      	mov	r5, r1
    5dd6:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    5dd8:	6819      	ldr	r1, [r3, #0]
    5dda:	f7ff ffad 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    5dde:	b308      	cbz	r0, 5e24 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    5de0:	4b12      	ldr	r3, [pc, #72]	; (5e2c <readReg16(unsigned long, void*)+0x5c>)
    5de2:	f105 040f 	add.w	r4, r5, #15
    5de6:	691a      	ldr	r2, [r3, #16]
    5de8:	9200      	str	r2, [sp, #0]
    5dea:	6959      	ldr	r1, [r3, #20]
    5dec:	9101      	str	r1, [sp, #4]
    5dee:	6999      	ldr	r1, [r3, #24]
    5df0:	9102      	str	r1, [sp, #8]
    5df2:	69db      	ldr	r3, [r3, #28]
    5df4:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    5df6:	2300      	movs	r3, #0
    5df8:	e001      	b.n	5dfe <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5dfa:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    5dfe:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    5e02:	3301      	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5e04:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    5e08:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    5e0c:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5e0e:	fa22 f20c 	lsr.w	r2, r2, ip
    5e12:	f10e 0110 	add.w	r1, lr, #16
    5e16:	f804 2d01 	strb.w	r2, [r4, #-1]!
    5e1a:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    5e1e:	d1ec      	bne.n	5dfa <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    5e20:	2300      	movs	r3, #0
    5e22:	73eb      	strb	r3, [r5, #15]
}
    5e24:	b005      	add	sp, #20
    5e26:	bd30      	pop	{r4, r5, pc}
    5e28:	2002a178 	.word	0x2002a178
    5e2c:	402c0000 	.word	0x402c0000

00005e30 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    5e30:	b510      	push	{r4, lr}
  bool useDma() { return m_options & DMA_SDIO; }
    5e32:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    5e34:	07db      	lsls	r3, r3, #31
    5e36:	d505      	bpl.n	5e44 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5e38:	4b15      	ldr	r3, [pc, #84]	; (5e90 <SdioCard::isBusy()+0x60>)
    5e3a:	681b      	ldr	r3, [r3, #0]
    5e3c:	b1b3      	cbz	r3, 5e6c <SdioCard::isBusy()+0x3c>
}
    5e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5e42:	4718      	bx	r3
    if (m_transferActive) {
    5e44:	4b13      	ldr	r3, [pc, #76]	; (5e94 <SdioCard::isBusy()+0x64>)
    5e46:	781b      	ldrb	r3, [r3, #0]
    5e48:	b93b      	cbnz	r3, 5e5a <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5e4a:	4b13      	ldr	r3, [pc, #76]	; (5e98 <SdioCard::isBusy()+0x68>)
    5e4c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    5e4e:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    5e52:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    5e56:	4620      	mov	r0, r4
    5e58:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5e5a:	4b0f      	ldr	r3, [pc, #60]	; (5e98 <SdioCard::isBusy()+0x68>)
    5e5c:	4c0f      	ldr	r4, [pc, #60]	; (5e9c <SdioCard::isBusy()+0x6c>)
    5e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5e60:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    5e62:	fab4 f484 	clz	r4, r4
    5e66:	0964      	lsrs	r4, r4, #5
}
    5e68:	4620      	mov	r0, r4
    5e6a:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5e6c:	4b0c      	ldr	r3, [pc, #48]	; (5ea0 <SdioCard::isBusy()+0x70>)
    5e6e:	781c      	ldrb	r4, [r3, #0]
    5e70:	2c00      	cmp	r4, #0
    5e72:	d0f0      	beq.n	5e56 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5e74:	4b0b      	ldr	r3, [pc, #44]	; (5ea4 <SdioCard::isBusy()+0x74>)
    5e76:	480c      	ldr	r0, [pc, #48]	; (5ea8 <SdioCard::isBusy()+0x78>)
    5e78:	6819      	ldr	r1, [r3, #0]
    5e7a:	f7ff ff5d 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    5e7e:	2800      	cmp	r0, #0
    5e80:	d0e9      	beq.n	5e56 <SdioCard::isBusy()+0x26>
    5e82:	4b05      	ldr	r3, [pc, #20]	; (5e98 <SdioCard::isBusy()+0x68>)
    5e84:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5e86:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    5e8a:	f3c4 2400 	ubfx	r4, r4, #8, #1
    5e8e:	e7e2      	b.n	5e56 <SdioCard::isBusy()+0x26>
    5e90:	2002a864 	.word	0x2002a864
    5e94:	2002b499 	.word	0x2002b499
    5e98:	402c0000 	.word	0x402c0000
    5e9c:	117f0002 	.word	0x117f0002
    5ea0:	2002b496 	.word	0x2002b496
    5ea4:	2002a178 	.word	0x2002a178
    5ea8:	0d1a0000 	.word	0x0d1a0000

00005eac <SdioCard::status()>:
uint32_t SdioCard::status() { return statusCMD13(); }
    5eac:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5eae:	4b04      	ldr	r3, [pc, #16]	; (5ec0 <SdioCard::status()+0x14>)
    5eb0:	4804      	ldr	r0, [pc, #16]	; (5ec4 <SdioCard::status()+0x18>)
    5eb2:	6819      	ldr	r1, [r3, #0]
    5eb4:	f7ff ff40 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    5eb8:	b108      	cbz	r0, 5ebe <SdioCard::status()+0x12>
    5eba:	4b03      	ldr	r3, [pc, #12]	; (5ec8 <SdioCard::status()+0x1c>)
    5ebc:	6918      	ldr	r0, [r3, #16]
uint32_t SdioCard::status() { return statusCMD13(); }
    5ebe:	bd08      	pop	{r3, pc}
    5ec0:	2002a178 	.word	0x2002a178
    5ec4:	0d1a0000 	.word	0x0d1a0000
    5ec8:	402c0000 	.word	0x402c0000

00005ecc <isBusyCMD13()>:
static bool isBusyCMD13() {
    5ecc:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ece:	4b07      	ldr	r3, [pc, #28]	; (5eec <isBusyCMD13()+0x20>)
    5ed0:	4807      	ldr	r0, [pc, #28]	; (5ef0 <isBusyCMD13()+0x24>)
    5ed2:	6819      	ldr	r1, [r3, #0]
    5ed4:	f7ff ff30 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    5ed8:	b130      	cbz	r0, 5ee8 <isBusyCMD13()+0x1c>
    5eda:	4b06      	ldr	r3, [pc, #24]	; (5ef4 <isBusyCMD13()+0x28>)
    5edc:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    5ede:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    5ee2:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    5ee6:	bd08      	pop	{r3, pc}
    5ee8:	2001      	movs	r0, #1
    5eea:	bd08      	pop	{r3, pc}
    5eec:	2002a178 	.word	0x2002a178
    5ef0:	0d1a0000 	.word	0x0d1a0000
    5ef4:	402c0000 	.word	0x402c0000

00005ef8 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    5efc:	4b29      	ldr	r3, [pc, #164]	; (5fa4 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    5efe:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    5f00:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 5fc4 <SdioCard::writeStart(unsigned long)+0xcc>
    5f04:	4e28      	ldr	r6, [pc, #160]	; (5fa8 <SdioCard::writeStart(unsigned long)+0xb0>)
    5f06:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    5f0a:	f002 f81f 	bl	7f4c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f0e:	4d27      	ldr	r5, [pc, #156]	; (5fac <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    5f10:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f12:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 5fc8 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f16:	4f26      	ldr	r7, [pc, #152]	; (5fb0 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    5f18:	e006      	b.n	5f28 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f1a:	f002 f817 	bl	7f4c <micros>
    5f1e:	1b00      	subs	r0, r0, r4
    5f20:	42b8      	cmp	r0, r7
    5f22:	d829      	bhi.n	5f78 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    5f24:	f003 fb1c 	bl	9560 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f28:	6831      	ldr	r1, [r6, #0]
    5f2a:	4628      	mov	r0, r5
    5f2c:	f7ff ff04 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    5f30:	2800      	cmp	r0, #0
    5f32:	d0f2      	beq.n	5f1a <SdioCard::writeStart(unsigned long)+0x22>
    5f34:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5f38:	05db      	lsls	r3, r3, #23
    5f3a:	d5ee      	bpl.n	5f1a <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    5f3c:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    5f42:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5f46:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    5f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5f4e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5f52:	4b18      	ldr	r3, [pc, #96]	; (5fb4 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5f54:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5f58:	781b      	ldrb	r3, [r3, #0]
    5f5a:	b1cb      	cbz	r3, 5f90 <SdioCard::writeStart(unsigned long)+0x98>
    5f5c:	4649      	mov	r1, r9
    5f5e:	4816      	ldr	r0, [pc, #88]	; (5fb8 <SdioCard::writeStart(unsigned long)+0xc0>)
    5f60:	f7ff feea 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    5f64:	b930      	cbnz	r0, 5f74 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    5f66:	4915      	ldr	r1, [pc, #84]	; (5fbc <SdioCard::writeStart(unsigned long)+0xc4>)
    5f68:	240e      	movs	r4, #14
  m_errorLine = line;
    5f6a:	4b15      	ldr	r3, [pc, #84]	; (5fc0 <SdioCard::writeStart(unsigned long)+0xc8>)
    5f6c:	f240 427e 	movw	r2, #1150	; 0x47e
  m_errorCode = code;
    5f70:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5f72:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    5f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5f78:	4a10      	ldr	r2, [pc, #64]	; (5fbc <SdioCard::writeStart(unsigned long)+0xc4>)
    5f7a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5f7c:	2000      	movs	r0, #0
  m_errorLine = line;
    5f7e:	4b10      	ldr	r3, [pc, #64]	; (5fc0 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    5f80:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5f82:	f240 4272 	movw	r2, #1138	; 0x472
      m_busyFcn = 0;
    5f86:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    5f8a:	601a      	str	r2, [r3, #0]
}
    5f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5f90:	ea4f 2949 	mov.w	r9, r9, lsl #9
    5f94:	4808      	ldr	r0, [pc, #32]	; (5fb8 <SdioCard::writeStart(unsigned long)+0xc0>)
    5f96:	4649      	mov	r1, r9
    5f98:	f7ff fece 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    5f9c:	2800      	cmp	r0, #0
    5f9e:	d1e9      	bne.n	5f74 <SdioCard::writeStart(unsigned long)+0x7c>
    5fa0:	e7e1      	b.n	5f66 <SdioCard::writeStart(unsigned long)+0x6e>
    5fa2:	bf00      	nop
    5fa4:	00005ecd 	.word	0x00005ecd
    5fa8:	2002a178 	.word	0x2002a178
    5fac:	0d1a0000 	.word	0x0d1a0000
    5fb0:	000f4240 	.word	0x000f4240
    5fb4:	2002b498 	.word	0x2002b498
    5fb8:	193a0020 	.word	0x193a0020
    5fbc:	20008bea 	.word	0x20008bea
    5fc0:	20025f48 	.word	0x20025f48
    5fc4:	2002a864 	.word	0x2002a864
    5fc8:	402c0000 	.word	0x402c0000

00005fcc <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    5fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5fd0:	468a      	mov	sl, r1
    5fd2:	4691      	mov	r9, r2
    5fd4:	4e24      	ldr	r6, [pc, #144]	; (6068 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x9c>)
  uint32_t m = micros();
    5fd6:	f001 ffb9 	bl	7f4c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5fda:	4d24      	ldr	r5, [pc, #144]	; (606c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa0>)
  uint32_t m = micros();
    5fdc:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5fde:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 6090 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc4>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5fe2:	4f23      	ldr	r7, [pc, #140]	; (6070 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa4>)
  while (fcn()) {
    5fe4:	e004      	b.n	5ff0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5fe6:	f001 ffb1 	bl	7f4c <micros>
    5fea:	1b00      	subs	r0, r0, r4
    5fec:	42b8      	cmp	r0, r7
    5fee:	d825      	bhi.n	603c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ff0:	6831      	ldr	r1, [r6, #0]
    5ff2:	4628      	mov	r0, r5
    5ff4:	f7ff fea0 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    5ff8:	2800      	cmp	r0, #0
    5ffa:	d0f4      	beq.n	5fe6 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
    5ffc:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6000:	05db      	lsls	r3, r3, #23
    6002:	d5f0      	bpl.n	5fe6 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    6004:	4b1b      	ldr	r3, [pc, #108]	; (6074 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa8>)
    6006:	2201      	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    6008:	4651      	mov	r1, sl
    600a:	481b      	ldr	r0, [pc, #108]	; (6078 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xac>)
  m_dmaBusy = true;
    600c:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    600e:	2200      	movs	r2, #0
    6010:	4b1a      	ldr	r3, [pc, #104]	; (607c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb0>)
    6012:	601a      	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    6014:	4a1a      	ldr	r2, [pc, #104]	; (6080 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6016:	4b1b      	ldr	r3, [pc, #108]	; (6084 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb8>)
  SDHC_DSADDR = (uint32_t)status;
    6018:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    601c:	f8c8 2004 	str.w	r2, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6020:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    6024:	f7ff fe88 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6028:	b990      	cbnz	r0, 6050 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>
  m_errorCode = code;
    602a:	4917      	ldr	r1, [pc, #92]	; (6088 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    602c:	2404      	movs	r4, #4
  m_errorLine = line;
    602e:	4b17      	ldr	r3, [pc, #92]	; (608c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    6030:	f240 321b 	movw	r2, #795	; 0x31b
  m_errorCode = code;
    6034:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6036:	601a      	str	r2, [r3, #0]
}
    6038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    603c:	4912      	ldr	r1, [pc, #72]	; (6088 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    603e:	240a      	movs	r4, #10
  m_errorLine = line;
    6040:	4b12      	ldr	r3, [pc, #72]	; (608c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    6042:	f44f 7245 	mov.w	r2, #788	; 0x314
    return sdError(SD_CARD_ERROR_CMD13);
    6046:	2000      	movs	r0, #0
  m_errorCode = code;
    6048:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    604a:	601a      	str	r2, [r3, #0]
}
    604c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!waitDmaStatus()) {
    6050:	f7ff fda0 	bl	5b94 <waitDmaStatus()>
    6054:	2800      	cmp	r0, #0
    6056:	d1f9      	bne.n	604c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
  m_errorCode = code;
    6058:	490b      	ldr	r1, [pc, #44]	; (6088 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    605a:	2426      	movs	r4, #38	; 0x26
  m_errorLine = line;
    605c:	4b0b      	ldr	r3, [pc, #44]	; (608c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    605e:	f240 321e 	movw	r2, #798	; 0x31e
  m_errorCode = code;
    6062:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6064:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    6066:	e7f1      	b.n	604c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
    6068:	2002a178 	.word	0x2002a178
    606c:	0d1a0000 	.word	0x0d1a0000
    6070:	000f4240 	.word	0x000f4240
    6074:	2002b49a 	.word	0x2002b49a
    6078:	063a0011 	.word	0x063a0011
    607c:	2002a868 	.word	0x2002a868
    6080:	00010040 	.word	0x00010040
    6084:	117f0002 	.word	0x117f0002
    6088:	20008bea 	.word	0x20008bea
    608c:	20025f48 	.word	0x20025f48
    6090:	402c0000 	.word	0x402c0000

00006094 <SdioCard::readStop()>:
bool SdioCard::readStop() { return transferStop(); }
    6094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6098:	4c25      	ldr	r4, [pc, #148]	; (6130 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    609a:	2100      	movs	r1, #0
    609c:	4825      	ldr	r0, [pc, #148]	; (6134 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    609e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    60a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    60a4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    60a6:	f7ff fe47 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    60aa:	4605      	mov	r5, r0
    60ac:	b948      	cbnz	r0, 60c2 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    60ae:	4922      	ldr	r1, [pc, #136]	; (6138 <SdioCard::readStop()+0xa4>)
    60b0:	2009      	movs	r0, #9
  m_errorLine = line;
    60b2:	4b22      	ldr	r3, [pc, #136]	; (613c <SdioCard::readStop()+0xa8>)
    60b4:	f240 226d 	movw	r2, #621	; 0x26d
  m_errorCode = code;
    60b8:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    60ba:	601a      	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    60bc:	4628      	mov	r0, r5
    60be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    60c2:	4b1f      	ldr	r3, [pc, #124]	; (6140 <SdioCard::readStop()+0xac>)
    60c4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 6148 <SdioCard::readStop()+0xb4>
    60c8:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    60cc:	f001 ff3e 	bl	7f4c <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    60d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    60d2:	4606      	mov	r6, r0
  while (fcn()) {
    60d4:	01d8      	lsls	r0, r3, #7
    60d6:	d418      	bmi.n	610a <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    60d8:	4f1a      	ldr	r7, [pc, #104]	; (6144 <SdioCard::readStop()+0xb0>)
    60da:	e004      	b.n	60e6 <SdioCard::readStop()+0x52>
    yield();
    60dc:	f003 fa40 	bl	9560 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    60e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    60e2:	01d9      	lsls	r1, r3, #7
    60e4:	d411      	bmi.n	610a <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    60e6:	f001 ff31 	bl	7f4c <micros>
    60ea:	1b83      	subs	r3, r0, r6
    60ec:	42bb      	cmp	r3, r7
    60ee:	d9f5      	bls.n	60dc <SdioCard::readStop()+0x48>
  m_errorCode = code;
    60f0:	4a11      	ldr	r2, [pc, #68]	; (6138 <SdioCard::readStop()+0xa4>)
    60f2:	210a      	movs	r1, #10
      m_busyFcn = 0;
    60f4:	2500      	movs	r5, #0
  m_errorLine = line;
    60f6:	4b11      	ldr	r3, [pc, #68]	; (613c <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    60f8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    60fa:	f44f 721c 	mov.w	r2, #624	; 0x270
bool SdioCard::readStop() { return transferStop(); }
    60fe:	4628      	mov	r0, r5
      m_busyFcn = 0;
    6100:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    6104:	601a      	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    6106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    610a:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    610c:	4b08      	ldr	r3, [pc, #32]	; (6130 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    610e:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    6112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6114:	0792      	lsls	r2, r2, #30
    6116:	d5d1      	bpl.n	60bc <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    6118:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    611a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    611c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    611e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    6122:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    6126:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    6128:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    612a:	629a      	str	r2, [r3, #40]	; 0x28
    612c:	e7c6      	b.n	60bc <SdioCard::readStop()+0x28>
    612e:	bf00      	nop
    6130:	402c0000 	.word	0x402c0000
    6134:	0cdb0000 	.word	0x0cdb0000
    6138:	20008bea 	.word	0x20008bea
    613c:	20025f48 	.word	0x20025f48
    6140:	00005961 	.word	0x00005961
    6144:	000f4240 	.word	0x000f4240
    6148:	2002a864 	.word	0x2002a864

0000614c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                        size_t n) {
    614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6150:	4614      	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    6152:	f012 0203 	ands.w	r2, r2, #3
                        size_t n) {
    6156:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    6158:	bf18      	it	ne
    615a:	2201      	movne	r2, #1
    615c:	9301      	str	r3, [sp, #4]
    615e:	2b00      	cmp	r3, #0
    6160:	bf08      	it	eq
    6162:	f042 0201 	orreq.w	r2, r2, #1
    6166:	b152      	cbz	r2, 617e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x32>
  m_errorCode = code;
    6168:	492e      	ldr	r1, [pc, #184]	; (6224 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    616a:	2026      	movs	r0, #38	; 0x26
  m_errorLine = line;
    616c:	4b2e      	ldr	r3, [pc, #184]	; (6228 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
    616e:	f240 2223 	movw	r2, #547	; 0x223
  m_errorCode = code;
    6172:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6174:	601a      	str	r2, [r3, #0]
}
    6176:	2000      	movs	r0, #0
    6178:	b003      	add	sp, #12
    617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    617e:	4b2b      	ldr	r3, [pc, #172]	; (622c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe0>)
    6180:	4606      	mov	r6, r0
    6182:	4a2b      	ldr	r2, [pc, #172]	; (6230 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
    6184:	460d      	mov	r5, r1
    6186:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 6248 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xfc>
    618a:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    618c:	f001 fede 	bl	7f4c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6190:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 624c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
  uint32_t m = micros();
    6194:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6196:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 6250 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    619a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 6254 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>
  while (fcn()) {
    619e:	e006      	b.n	61ae <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x62>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    61a0:	f001 fed4 	bl	7f4c <micros>
    61a4:	1bc0      	subs	r0, r0, r7
    61a6:	4550      	cmp	r0, sl
    61a8:	d82f      	bhi.n	620a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xbe>
    yield();
    61aa:	f003 f9d9 	bl	9560 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    61ae:	f8d9 1000 	ldr.w	r1, [r9]
    61b2:	4640      	mov	r0, r8
    61b4:	f7ff fdc0 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    61b8:	2800      	cmp	r0, #0
    61ba:	d0f1      	beq.n	61a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
    61bc:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    61c0:	05db      	lsls	r3, r3, #23
    61c2:	d5ed      	bpl.n	61a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    61c4:	9a01      	ldr	r2, [sp, #4]
  m_dmaBusy = true;
    61c6:	2001      	movs	r0, #1
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    61c8:	4b1a      	ldr	r3, [pc, #104]	; (6234 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe8>)
  m_busyFcn = 0;
    61ca:	4919      	ldr	r1, [pc, #100]	; (6230 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    61cc:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    61d0:	2200      	movs	r2, #0
    61d2:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    61d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    61d8:	4917      	ldr	r1, [pc, #92]	; (6238 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xec>)
    61da:	7008      	strb	r0, [r1, #0]
  m_irqstat = 0;
    61dc:	4917      	ldr	r1, [pc, #92]	; (623c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf0>)
    61de:	600a      	str	r2, [r1, #0]
  SDHC_DSADDR = (uint32_t)buf;
    61e0:	f8cb 4000 	str.w	r4, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    61e4:	f8cb 3004 	str.w	r3, [fp, #4]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    61e8:	4b15      	ldr	r3, [pc, #84]	; (6240 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    61ea:	4a16      	ldr	r2, [pc, #88]	; (6244 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf8>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    61ec:	781b      	ldrb	r3, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    61ee:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    61f2:	b1ab      	cbz	r3, 6220 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd4>
    61f4:	4629      	mov	r1, r5
    61f6:	4630      	mov	r0, r6
    61f8:	f7ff fd9e 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    61fc:	2800      	cmp	r0, #0
    61fe:	d0ba      	beq.n	6176 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
}
    6200:	b003      	add	sp, #12
    6202:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return waitDmaStatus();
    6206:	f7ff bcc5 	b.w	5b94 <waitDmaStatus()>
  m_errorCode = code;
    620a:	4a06      	ldr	r2, [pc, #24]	; (6224 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    620c:	210a      	movs	r1, #10
      m_busyFcn = 0;
    620e:	2000      	movs	r0, #0
  m_errorLine = line;
    6210:	4b05      	ldr	r3, [pc, #20]	; (6228 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
      m_busyFcn = 0;
    6212:	4c07      	ldr	r4, [pc, #28]	; (6230 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  m_errorCode = code;
    6214:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6216:	f240 2226 	movw	r2, #550	; 0x226
      m_busyFcn = 0;
    621a:	6020      	str	r0, [r4, #0]
  m_errorLine = line;
    621c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    621e:	e7aa      	b.n	6176 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    6220:	026d      	lsls	r5, r5, #9
    6222:	e7e7      	b.n	61f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>
    6224:	20008bea 	.word	0x20008bea
    6228:	20025f48 	.word	0x20025f48
    622c:	00005ecd 	.word	0x00005ecd
    6230:	2002a864 	.word	0x2002a864
    6234:	1fff0000 	.word	0x1fff0000
    6238:	2002b49a 	.word	0x2002b49a
    623c:	2002a868 	.word	0x2002a868
    6240:	2002b498 	.word	0x2002b498
    6244:	117f0002 	.word	0x117f0002
    6248:	2002a178 	.word	0x2002a178
    624c:	0d1a0000 	.word	0x0d1a0000
    6250:	402c0000 	.word	0x402c0000
    6254:	000f4240 	.word	0x000f4240

00006258 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    6258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    625a:	4606      	mov	r6, r0
    625c:	7a00      	ldrb	r0, [r0, #8]
    625e:	460c      	mov	r4, r1
    6260:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    6262:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    6264:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    6266:	d413      	bmi.n	6290 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    6268:	b183      	cbz	r3, 628c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    626a:	440f      	add	r7, r1
    626c:	e001      	b.n	6272 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    626e:	42bc      	cmp	r4, r7
    6270:	d00c      	beq.n	628c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    6272:	6833      	ldr	r3, [r6, #0]
    6274:	462a      	mov	r2, r5
    6276:	4621      	mov	r1, r4
    6278:	4630      	mov	r0, r6
    627a:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    627c:	3401      	adds	r4, #1
    627e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i * 512UL)) {
    6282:	4798      	blx	r3
    6284:	2800      	cmp	r0, #0
    6286:	d1f2      	bne.n	626e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    6288:	2000      	movs	r0, #0
}
    628a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    628c:	2001      	movs	r0, #1
}
    628e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    6290:	0790      	lsls	r0, r2, #30
    6292:	d012      	beq.n	62ba <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    6294:	2b00      	cmp	r3, #0
    6296:	d0f9      	beq.n	628c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    6298:	440f      	add	r7, r1
    629a:	e001      	b.n	62a0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    629c:	42bc      	cmp	r4, r7
    629e:	d0f5      	beq.n	628c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    62a0:	6833      	ldr	r3, [r6, #0]
    62a2:	462a      	mov	r2, r5
    62a4:	4621      	mov	r1, r4
    62a6:	4630      	mov	r0, r6
    62a8:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    62aa:	3401      	adds	r4, #1
    62ac:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    62b0:	4798      	blx	r3
    62b2:	2800      	cmp	r0, #0
    62b4:	d1f2      	bne.n	629c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    62b6:	2000      	movs	r0, #0
    62b8:	e7e7      	b.n	628a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    62ba:	4806      	ldr	r0, [pc, #24]	; (62d4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    62bc:	f7ff ff46 	bl	614c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    62c0:	2800      	cmp	r0, #0
    62c2:	d1e3      	bne.n	628c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    62c4:	4904      	ldr	r1, [pc, #16]	; (62d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    62c6:	240c      	movs	r4, #12
  m_errorLine = line;
    62c8:	4b04      	ldr	r3, [pc, #16]	; (62dc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    62ca:	f240 32ce 	movw	r2, #974	; 0x3ce
  m_errorCode = code;
    62ce:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    62d0:	601a      	str	r2, [r3, #0]
}
    62d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62d4:	123a0037 	.word	0x123a0037
    62d8:	20008bea 	.word	0x20008bea
    62dc:	20025f48 	.word	0x20025f48

000062e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    62e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62e2:	4606      	mov	r6, r0
    62e4:	7a00      	ldrb	r0, [r0, #8]
    62e6:	460c      	mov	r4, r1
    62e8:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    62ea:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    62ec:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    62ee:	d413      	bmi.n	6318 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    62f0:	b183      	cbz	r3, 6314 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    62f2:	440f      	add	r7, r1
    62f4:	e001      	b.n	62fa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    62f6:	42bc      	cmp	r4, r7
    62f8:	d00c      	beq.n	6314 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    62fa:	6833      	ldr	r3, [r6, #0]
    62fc:	462a      	mov	r2, r5
    62fe:	4621      	mov	r1, r4
    6300:	4630      	mov	r0, r6
    6302:	6a1b      	ldr	r3, [r3, #32]
    for (size_t i = 0; i < n; i++) {
    6304:	3401      	adds	r4, #1
    6306:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i * 512UL)) {
    630a:	4798      	blx	r3
    630c:	2800      	cmp	r0, #0
    630e:	d1f2      	bne.n	62f6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    6310:	2000      	movs	r0, #0
}
    6312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    6314:	2001      	movs	r0, #1
}
    6316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    6318:	0790      	lsls	r0, r2, #30
    631a:	d012      	beq.n	6342 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    631c:	2b00      	cmp	r3, #0
    631e:	d0f9      	beq.n	6314 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    6320:	440f      	add	r7, r1
    6322:	e001      	b.n	6328 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    6324:	42bc      	cmp	r4, r7
    6326:	d0f5      	beq.n	6314 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    6328:	6833      	ldr	r3, [r6, #0]
    632a:	462a      	mov	r2, r5
    632c:	4621      	mov	r1, r4
    632e:	4630      	mov	r0, r6
    6330:	6a1b      	ldr	r3, [r3, #32]
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    6332:	3401      	adds	r4, #1
    6334:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    6338:	4798      	blx	r3
    633a:	2800      	cmp	r0, #0
    633c:	d1f2      	bne.n	6324 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    633e:	2000      	movs	r0, #0
    6340:	e7e7      	b.n	6312 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    6342:	4806      	ldr	r0, [pc, #24]	; (635c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    6344:	f7ff ff02 	bl	614c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6348:	2800      	cmp	r0, #0
    634a:	d1e3      	bne.n	6314 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    634c:	4904      	ldr	r1, [pc, #16]	; (6360 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    634e:	240e      	movs	r4, #14
  m_errorLine = line;
    6350:	4b04      	ldr	r3, [pc, #16]	; (6364 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    6352:	f240 4264 	movw	r2, #1124	; 0x464
  m_errorCode = code;
    6356:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6358:	601a      	str	r2, [r3, #0]
}
    635a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    635c:	193a0027 	.word	0x193a0027
    6360:	20008bea 	.word	0x20008bea
    6364:	20025f48 	.word	0x20025f48

00006368 <SdioCard::begin(SdioConfig)>:
  m_curState = IDLE_STATE;
    6368:	2200      	movs	r2, #0
  m_initDone = false;
    636a:	4bb1      	ldr	r3, [pc, #708]	; (6630 <SdioCard::begin(SdioConfig)+0x2c8>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_initDone = false;
    6370:	701a      	strb	r2, [r3, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
    6372:	4606      	mov	r6, r0
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6374:	4baf      	ldr	r3, [pc, #700]	; (6634 <SdioCard::begin(SdioConfig)+0x2cc>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    6376:	b093      	sub	sp, #76	; 0x4c
  m_errorCode = SD_CARD_ERROR_NONE;
    6378:	4caf      	ldr	r4, [pc, #700]	; (6638 <SdioCard::begin(SdioConfig)+0x2d0>)
  m_highCapacity = false;
    637a:	f8df a314 	ldr.w	sl, [pc, #788]	; 6690 <SdioCard::begin(SdioConfig)+0x328>
  m_version2 = false;
    637e:	4faf      	ldr	r7, [pc, #700]	; (663c <SdioCard::begin(SdioConfig)+0x2d4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    6380:	7022      	strb	r2, [r4, #0]
  m_curState = IDLE_STATE;
    6382:	7242      	strb	r2, [r0, #9]
  m_highCapacity = false;
    6384:	f88a 2000 	strb.w	r2, [sl]
  m_version2 = false;
    6388:	703a      	strb	r2, [r7, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    638a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    638e:	7201      	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6390:	2105      	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6392:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    6396:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 6658 <SdioCard::begin(SdioConfig)+0x2f0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    639a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    639e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    63a2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    63a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    63aa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    63ae:	f042 0218 	orr.w	r2, r2, #24
    63b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    63b6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    63ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    63be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    63c2:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    63c6:	4a9e      	ldr	r2, [pc, #632]	; (6640 <SdioCard::begin(SdioConfig)+0x2d8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    63c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    63cc:	f040 000c 	orr.w	r0, r0, #12
    63d0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    63d4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    63d6:	f420 5060 	bic.w	r0, r0, #14336	; 0x3800
    63da:	6258      	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    63dc:	69d8      	ldr	r0, [r3, #28]
    63de:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    63e2:	61d8      	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    63e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    63e6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    63ea:	6258      	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    63ec:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    63f0:	f8c2 11d0 	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    63f4:	f8c2 11bc 	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    63f8:	f8c2 11c0 	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    63fc:	f8c2 11c4 	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    6400:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    6404:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6408:	4b8e      	ldr	r3, [pc, #568]	; (6644 <SdioCard::begin(SdioConfig)+0x2dc>)
  SDHC_MIX_CTRL |= 0x80000000;
    640a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    640e:	f8c8 2048 	str.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6412:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    6416:	4313      	orrs	r3, r2
    6418:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    641c:	f8d8 502c 	ldr.w	r5, [r8, #44]	; 0x2c
    6420:	f015 7580 	ands.w	r5, r5, #16777216	; 0x1000000
    6424:	d1fa      	bne.n	641c <SdioCard::begin(SdioConfig)+0xb4>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    6426:	f44f 70c8 	mov.w	r0, #400	; 0x190
    642a:	f7ff faa9 	bl	5980 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    642e:	4b84      	ldr	r3, [pc, #528]	; (6640 <SdioCard::begin(SdioConfig)+0x2d8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6430:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6434:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6438:	f8c3 51cc 	str.w	r5, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    643c:	f8c3 51d0 	str.w	r5, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6440:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6444:	f8c3 51c0 	str.w	r5, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6448:	f8c3 51c4 	str.w	r5, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    644c:	f8c3 51c8 	str.w	r5, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6450:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    6454:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    6458:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    645c:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    6460:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    6464:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    6468:	4b77      	ldr	r3, [pc, #476]	; (6648 <SdioCard::begin(SdioConfig)+0x2e0>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    646a:	4a78      	ldr	r2, [pc, #480]	; (664c <SdioCard::begin(SdioConfig)+0x2e4>)
    646c:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
    6470:	4b77      	ldr	r3, [pc, #476]	; (6650 <SdioCard::begin(SdioConfig)+0x2e8>)
    6472:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    6476:	4b77      	ldr	r3, [pc, #476]	; (6654 <SdioCard::begin(SdioConfig)+0x2ec>)
    6478:	2260      	movs	r2, #96	; 0x60
    647a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    647e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6486:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    648a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    648e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    6492:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    6496:	4b70      	ldr	r3, [pc, #448]	; (6658 <SdioCard::begin(SdioConfig)+0x2f0>)
    6498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    649a:	f011 6100 	ands.w	r1, r1, #134217728	; 0x8000000
    649e:	d1fb      	bne.n	6498 <SdioCard::begin(SdioConfig)+0x130>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    64a0:	4608      	mov	r0, r1
    64a2:	f7ff fc49 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    64a6:	4683      	mov	fp, r0
    64a8:	b948      	cbnz	r0, 64be <SdioCard::begin(SdioConfig)+0x156>
  m_errorCode = code;
    64aa:	2101      	movs	r1, #1
  m_errorLine = line;
    64ac:	4b6b      	ldr	r3, [pc, #428]	; (665c <SdioCard::begin(SdioConfig)+0x2f4>)
    64ae:	f240 22be 	movw	r2, #702	; 0x2be
  m_errorCode = code;
    64b2:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    64b4:	601a      	str	r2, [r3, #0]
}
    64b6:	4658      	mov	r0, fp
    64b8:	b013      	add	sp, #76	; 0x4c
    64ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    64be:	f04f 0803 	mov.w	r8, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    64c2:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 6694 <SdioCard::begin(SdioConfig)+0x32c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    64c6:	4d64      	ldr	r5, [pc, #400]	; (6658 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    64c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    64cc:	4648      	mov	r0, r9
    64ce:	f7ff fc33 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    64d2:	2800      	cmp	r0, #0
    64d4:	d14e      	bne.n	6574 <SdioCard::begin(SdioConfig)+0x20c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    64d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    64d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    64dc:	62eb      	str	r3, [r5, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    64de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    64e0:	01db      	lsls	r3, r3, #7
    64e2:	d4fc      	bmi.n	64de <SdioCard::begin(SdioConfig)+0x176>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    64e4:	f1b8 0801 	subs.w	r8, r8, #1
    64e8:	d1ee      	bne.n	64c8 <SdioCard::begin(SdioConfig)+0x160>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    64ea:	783b      	ldrb	r3, [r7, #0]
    64ec:	2b00      	cmp	r3, #0
    64ee:	4b5c      	ldr	r3, [pc, #368]	; (6660 <SdioCard::begin(SdioConfig)+0x2f8>)
    64f0:	bf0c      	ite	eq
    64f2:	f44f 1940 	moveq.w	r9, #3145728	; 0x300000
    64f6:	4699      	movne	r9, r3
  int m = micros();
    64f8:	f001 fd28 	bl	7f4c <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    64fc:	4f59      	ldr	r7, [pc, #356]	; (6664 <SdioCard::begin(SdioConfig)+0x2fc>)
  int m = micros();
    64fe:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6500:	f8df b194 	ldr.w	fp, [pc, #404]	; 6698 <SdioCard::begin(SdioConfig)+0x330>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6504:	f8df 8194 	ldr.w	r8, [pc, #404]	; 669c <SdioCard::begin(SdioConfig)+0x334>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6508:	2100      	movs	r1, #0
    650a:	4638      	mov	r0, r7
    650c:	f7ff fc14 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6510:	b958      	cbnz	r0, 652a <SdioCard::begin(SdioConfig)+0x1c2>
      return sdError(SD_CARD_ERROR_ACMD41);
    6512:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    6516:	2117      	movs	r1, #23
  m_errorLine = line;
    6518:	4b50      	ldr	r3, [pc, #320]	; (665c <SdioCard::begin(SdioConfig)+0x2f4>)
    651a:	f240 22d3 	movw	r2, #723	; 0x2d3
}
    651e:	4658      	mov	r0, fp
  m_errorCode = code;
    6520:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6522:	601a      	str	r2, [r3, #0]
}
    6524:	b013      	add	sp, #76	; 0x4c
    6526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    652a:	4649      	mov	r1, r9
    652c:	4658      	mov	r0, fp
    652e:	f7ff fc03 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6532:	2800      	cmp	r0, #0
    6534:	d0ed      	beq.n	6512 <SdioCard::begin(SdioConfig)+0x1aa>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    6536:	f001 fd09 	bl	7f4c <micros>
    653a:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    653c:	4b46      	ldr	r3, [pc, #280]	; (6658 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    653e:	4540      	cmp	r0, r8
    6540:	d8e7      	bhi.n	6512 <SdioCard::begin(SdioConfig)+0x1aa>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    6542:	691a      	ldr	r2, [r3, #16]
    6544:	2a00      	cmp	r2, #0
    6546:	dadf      	bge.n	6508 <SdioCard::begin(SdioConfig)+0x1a0>
  m_ocr = SDHC_CMDRSP0;
    6548:	6919      	ldr	r1, [r3, #16]
    654a:	4a47      	ldr	r2, [pc, #284]	; (6668 <SdioCard::begin(SdioConfig)+0x300>)
    654c:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    654e:	691b      	ldr	r3, [r3, #16]
    6550:	005d      	lsls	r5, r3, #1
    6552:	d502      	bpl.n	655a <SdioCard::begin(SdioConfig)+0x1f2>
    m_highCapacity = true;
    6554:	2301      	movs	r3, #1
    6556:	f88a 3000 	strb.w	r3, [sl]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    655a:	2100      	movs	r1, #0
    655c:	4843      	ldr	r0, [pc, #268]	; (666c <SdioCard::begin(SdioConfig)+0x304>)
    655e:	f7ff fbeb 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6562:	4683      	mov	fp, r0
    6564:	b9c8      	cbnz	r0, 659a <SdioCard::begin(SdioConfig)+0x232>
  m_errorCode = code;
    6566:	2102      	movs	r1, #2
  m_errorLine = line;
    6568:	4b3c      	ldr	r3, [pc, #240]	; (665c <SdioCard::begin(SdioConfig)+0x2f4>)
    656a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  m_errorCode = code;
    656e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6570:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    6572:	e7a0      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
      if (SDHC_CMDRSP0 != 0X1AA) {
    6574:	4b38      	ldr	r3, [pc, #224]	; (6658 <SdioCard::begin(SdioConfig)+0x2f0>)
    6576:	691b      	ldr	r3, [r3, #16]
    6578:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    657c:	d008      	beq.n	6590 <SdioCard::begin(SdioConfig)+0x228>
  m_errorCode = code;
    657e:	2106      	movs	r1, #6
  m_errorLine = line;
    6580:	4b36      	ldr	r3, [pc, #216]	; (665c <SdioCard::begin(SdioConfig)+0x2f4>)
    6582:	f44f 7231 	mov.w	r2, #708	; 0x2c4
        return sdError(SD_CARD_ERROR_CMD8);
    6586:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    658a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    658c:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    658e:	e792      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
      m_version2 = true;
    6590:	2301      	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6592:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 6660 <SdioCard::begin(SdioConfig)+0x2f8>
      m_version2 = true;
    6596:	703b      	strb	r3, [r7, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6598:	e7ae      	b.n	64f8 <SdioCard::begin(SdioConfig)+0x190>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    659a:	2100      	movs	r1, #0
    659c:	4834      	ldr	r0, [pc, #208]	; (6670 <SdioCard::begin(SdioConfig)+0x308>)
    659e:	f7ff fbcb 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    65a2:	4683      	mov	fp, r0
    65a4:	b930      	cbnz	r0, 65b4 <SdioCard::begin(SdioConfig)+0x24c>
  m_errorCode = code;
    65a6:	2103      	movs	r1, #3
  m_errorLine = line;
    65a8:	4b2c      	ldr	r3, [pc, #176]	; (665c <SdioCard::begin(SdioConfig)+0x2f4>)
    65aa:	f240 22df 	movw	r2, #735	; 0x2df
  m_errorCode = code;
    65ae:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    65b0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    65b2:	e780      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    65b4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 6658 <SdioCard::begin(SdioConfig)+0x2f0>
    65b8:	4b2e      	ldr	r3, [pc, #184]	; (6674 <SdioCard::begin(SdioConfig)+0x30c>)
    65ba:	f8da 2010 	ldr.w	r2, [sl, #16]
    65be:	4d2e      	ldr	r5, [pc, #184]	; (6678 <SdioCard::begin(SdioConfig)+0x310>)
    65c0:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    65c2:	492e      	ldr	r1, [pc, #184]	; (667c <SdioCard::begin(SdioConfig)+0x314>)
    65c4:	482e      	ldr	r0, [pc, #184]	; (6680 <SdioCard::begin(SdioConfig)+0x318>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    65c6:	602b      	str	r3, [r5, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    65c8:	f7ff fc02 	bl	5dd0 <readReg16(unsigned long, void*)>
    65cc:	4683      	mov	fp, r0
    65ce:	b930      	cbnz	r0, 65de <SdioCard::begin(SdioConfig)+0x276>
  m_errorCode = code;
    65d0:	2107      	movs	r1, #7
  m_errorLine = line;
    65d2:	4b22      	ldr	r3, [pc, #136]	; (665c <SdioCard::begin(SdioConfig)+0x2f4>)
    65d4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
  m_errorCode = code;
    65d8:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    65da:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    65dc:	e76b      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    65de:	4929      	ldr	r1, [pc, #164]	; (6684 <SdioCard::begin(SdioConfig)+0x31c>)
    65e0:	4829      	ldr	r0, [pc, #164]	; (6688 <SdioCard::begin(SdioConfig)+0x320>)
    65e2:	f7ff fbf5 	bl	5dd0 <readReg16(unsigned long, void*)>
    65e6:	4683      	mov	fp, r0
    65e8:	b930      	cbnz	r0, 65f8 <SdioCard::begin(SdioConfig)+0x290>
  m_errorCode = code;
    65ea:	2108      	movs	r1, #8
  m_errorLine = line;
    65ec:	4b1b      	ldr	r3, [pc, #108]	; (665c <SdioCard::begin(SdioConfig)+0x2f4>)
    65ee:	f240 22e7 	movw	r2, #743	; 0x2e7
  m_errorCode = code;
    65f2:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    65f4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    65f6:	e75e      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    65f8:	6829      	ldr	r1, [r5, #0]
    65fa:	4824      	ldr	r0, [pc, #144]	; (668c <SdioCard::begin(SdioConfig)+0x324>)
    65fc:	f7ff fb9c 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6600:	4683      	mov	fp, r0
    6602:	b930      	cbnz	r0, 6612 <SdioCard::begin(SdioConfig)+0x2aa>
  m_errorCode = code;
    6604:	2105      	movs	r1, #5
  m_errorLine = line;
    6606:	4b15      	ldr	r3, [pc, #84]	; (665c <SdioCard::begin(SdioConfig)+0x2f4>)
    6608:	f240 22ea 	movw	r2, #746	; 0x2ea
  m_errorCode = code;
    660c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    660e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    6610:	e751      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6612:	6829      	ldr	r1, [r5, #0]
    6614:	4813      	ldr	r0, [pc, #76]	; (6664 <SdioCard::begin(SdioConfig)+0x2fc>)
    6616:	f7ff fb8f 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    661a:	2800      	cmp	r0, #0
    661c:	d140      	bne.n	66a0 <SdioCard::begin(SdioConfig)+0x338>
  m_errorCode = code;
    661e:	2114      	movs	r1, #20
  m_errorLine = line;
    6620:	4b0e      	ldr	r3, [pc, #56]	; (665c <SdioCard::begin(SdioConfig)+0x2f4>)
    6622:	f240 22ee 	movw	r2, #750	; 0x2ee
    return sdError(SD_CARD_ERROR_ACMD6);
    6626:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    662a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    662c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    662e:	e742      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
    6630:	2002b496 	.word	0x2002b496
    6634:	400d8000 	.word	0x400d8000
    6638:	20008bea 	.word	0x20008bea
    663c:	2002b497 	.word	0x2002b497
    6640:	401f8000 	.word	0x401f8000
    6644:	01008000 	.word	0x01008000
    6648:	117f000b 	.word	0x117f000b
    664c:	00005931 	.word	0x00005931
    6650:	20008c00 	.word	0x20008c00
    6654:	e000e400 	.word	0xe000e400
    6658:	402c0000 	.word	0x402c0000
    665c:	20025f48 	.word	0x20025f48
    6660:	40300000 	.word	0x40300000
    6664:	371a0000 	.word	0x371a0000
    6668:	2002a174 	.word	0x2002a174
    666c:	02090000 	.word	0x02090000
    6670:	031a0000 	.word	0x031a0000
    6674:	ffff0000 	.word	0xffff0000
    6678:	2002a178 	.word	0x2002a178
    667c:	2002a164 	.word	0x2002a164
    6680:	09090000 	.word	0x09090000
    6684:	2002a154 	.word	0x2002a154
    6688:	0a090000 	.word	0x0a090000
    668c:	071b0000 	.word	0x071b0000
    6690:	2002b498 	.word	0x2002b498
    6694:	081a0000 	.word	0x081a0000
    6698:	29020000 	.word	0x29020000
    669c:	000f4240 	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    66a0:	2102      	movs	r1, #2
    66a2:	4886      	ldr	r0, [pc, #536]	; (68bc <SdioCard::begin(SdioConfig)+0x554>)
    66a4:	f7ff fb48 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    66a8:	2800      	cmp	r0, #0
    66aa:	d0b8      	beq.n	661e <SdioCard::begin(SdioConfig)+0x2b6>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    66ac:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    66b0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 68f4 <SdioCard::begin(SdioConfig)+0x58c>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    66b4:	f023 0306 	bic.w	r3, r3, #6
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    66b8:	f8df 821c 	ldr.w	r8, [pc, #540]	; 68d8 <SdioCard::begin(SdioConfig)+0x570>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    66bc:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    66c0:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    66c4:	f043 0302 	orr.w	r3, r3, #2
    66c8:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    66cc:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    66d0:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
  uint32_t m = micros();
    66d4:	f001 fc3a 	bl	7f4c <micros>
    66d8:	4607      	mov	r7, r0
  while (fcn()) {
    66da:	e004      	b.n	66e6 <SdioCard::begin(SdioConfig)+0x37e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    66dc:	f001 fc36 	bl	7f4c <micros>
    66e0:	1bc0      	subs	r0, r0, r7
    66e2:	4540      	cmp	r0, r8
    66e4:	d82b      	bhi.n	673e <SdioCard::begin(SdioConfig)+0x3d6>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    66e6:	6829      	ldr	r1, [r5, #0]
    66e8:	4648      	mov	r0, r9
    66ea:	f7ff fb25 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    66ee:	2800      	cmp	r0, #0
    66f0:	d0f4      	beq.n	66dc <SdioCard::begin(SdioConfig)+0x374>
    66f2:	f8da 3010 	ldr.w	r3, [sl, #16]
  while (fcn()) {
    66f6:	05d8      	lsls	r0, r3, #23
    66f8:	d5f0      	bpl.n	66dc <SdioCard::begin(SdioConfig)+0x374>
  m_dmaBusy = true;
    66fa:	2301      	movs	r3, #1
    66fc:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 68f8 <SdioCard::begin(SdioConfig)+0x590>
  m_irqstat = 0;
    6700:	4f6f      	ldr	r7, [pc, #444]	; (68c0 <SdioCard::begin(SdioConfig)+0x558>)
    6702:	f04f 0b00 	mov.w	fp, #0
  m_dmaBusy = true;
    6706:	f888 3000 	strb.w	r3, [r8]
  SDHC_DSADDR = (uint32_t)scr;
    670a:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 68fc <SdioCard::begin(SdioConfig)+0x594>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    670e:	4b6d      	ldr	r3, [pc, #436]	; (68c4 <SdioCard::begin(SdioConfig)+0x55c>)
  m_irqstat = 0;
    6710:	f8c7 b000 	str.w	fp, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    6714:	f8ca 9000 	str.w	r9, [sl]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    6718:	f8ca 3004 	str.w	r3, [sl, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    671c:	4b6a      	ldr	r3, [pc, #424]	; (68c8 <SdioCard::begin(SdioConfig)+0x560>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    671e:	486b      	ldr	r0, [pc, #428]	; (68cc <SdioCard::begin(SdioConfig)+0x564>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6720:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6724:	6829      	ldr	r1, [r5, #0]
    6726:	f7ff fb07 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    672a:	b988      	cbnz	r0, 6750 <SdioCard::begin(SdioConfig)+0x3e8>
  m_errorCode = code;
    672c:	2118      	movs	r1, #24
  m_errorLine = line;
    672e:	4b68      	ldr	r3, [pc, #416]	; (68d0 <SdioCard::begin(SdioConfig)+0x568>)
    6730:	f240 12d7 	movw	r2, #471	; 0x1d7
    return false;
    6734:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    6738:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    673a:	601a      	str	r2, [r3, #0]
  return false;
    673c:	e6bb      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    673e:	210a      	movs	r1, #10
  m_errorLine = line;
    6740:	4b63      	ldr	r3, [pc, #396]	; (68d0 <SdioCard::begin(SdioConfig)+0x568>)
    6742:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    return false;
    6746:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    674a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    674c:	601a      	str	r2, [r3, #0]
  return false;
    674e:	e6b2      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6750:	4659      	mov	r1, fp
    6752:	4860      	ldr	r0, [pc, #384]	; (68d4 <SdioCard::begin(SdioConfig)+0x56c>)
    6754:	f7ff faf0 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6758:	2800      	cmp	r0, #0
    675a:	d0e7      	beq.n	672c <SdioCard::begin(SdioConfig)+0x3c4>
  if (!waitDmaStatus()) {
    675c:	f7ff fa1a 	bl	5b94 <waitDmaStatus()>
    6760:	4683      	mov	fp, r0
    6762:	b930      	cbnz	r0, 6772 <SdioCard::begin(SdioConfig)+0x40a>
  m_errorCode = code;
    6764:	2126      	movs	r1, #38	; 0x26
  m_errorLine = line;
    6766:	4b5a      	ldr	r3, [pc, #360]	; (68d0 <SdioCard::begin(SdioConfig)+0x568>)
    6768:	f44f 72ed 	mov.w	r2, #474	; 0x1da
  m_errorCode = code;
    676c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    676e:	601a      	str	r2, [r3, #0]
  return false;
    6770:	e6a1      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
  uint32_t m = micros();
    6772:	f001 fbeb 	bl	7f4c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6776:	f8df a17c 	ldr.w	sl, [pc, #380]	; 68f4 <SdioCard::begin(SdioConfig)+0x58c>
    677a:	f8df b184 	ldr.w	fp, [pc, #388]	; 6900 <SdioCard::begin(SdioConfig)+0x598>
  uint32_t m = micros();
    677e:	9001      	str	r0, [sp, #4]
  while (fcn()) {
    6780:	e006      	b.n	6790 <SdioCard::begin(SdioConfig)+0x428>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6782:	f001 fbe3 	bl	7f4c <micros>
    6786:	9b01      	ldr	r3, [sp, #4]
    6788:	1ac0      	subs	r0, r0, r3
    678a:	4b53      	ldr	r3, [pc, #332]	; (68d8 <SdioCard::begin(SdioConfig)+0x570>)
    678c:	4298      	cmp	r0, r3
    678e:	d827      	bhi.n	67e0 <SdioCard::begin(SdioConfig)+0x478>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6790:	6829      	ldr	r1, [r5, #0]
    6792:	4650      	mov	r0, sl
    6794:	f7ff fad0 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6798:	2800      	cmp	r0, #0
    679a:	d0f2      	beq.n	6782 <SdioCard::begin(SdioConfig)+0x41a>
    679c:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    67a0:	05d9      	lsls	r1, r3, #23
    67a2:	d5ee      	bpl.n	6782 <SdioCard::begin(SdioConfig)+0x41a>
  m_dmaBusy = true;
    67a4:	2201      	movs	r2, #1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    67a6:	4849      	ldr	r0, [pc, #292]	; (68cc <SdioCard::begin(SdioConfig)+0x564>)
  m_dmaBusy = true;
    67a8:	f888 2000 	strb.w	r2, [r8]
  m_irqstat = 0;
    67ac:	f04f 0800 	mov.w	r8, #0
  SDHC_DSADDR = (uint32_t)scr;
    67b0:	4a4a      	ldr	r2, [pc, #296]	; (68dc <SdioCard::begin(SdioConfig)+0x574>)
  m_irqstat = 0;
    67b2:	f8c7 8000 	str.w	r8, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    67b6:	f8cb 2000 	str.w	r2, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    67ba:	4a49      	ldr	r2, [pc, #292]	; (68e0 <SdioCard::begin(SdioConfig)+0x578>)
    67bc:	f8cb 2004 	str.w	r2, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    67c0:	4a41      	ldr	r2, [pc, #260]	; (68c8 <SdioCard::begin(SdioConfig)+0x560>)
    67c2:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    67c6:	6829      	ldr	r1, [r5, #0]
    67c8:	f7ff fab6 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    67cc:	b988      	cbnz	r0, 67f2 <SdioCard::begin(SdioConfig)+0x48a>
  m_errorCode = code;
    67ce:	2115      	movs	r1, #21
  m_errorLine = line;
    67d0:	4b3f      	ldr	r3, [pc, #252]	; (68d0 <SdioCard::begin(SdioConfig)+0x568>)
    67d2:	f240 12c5 	movw	r2, #453	; 0x1c5
    return false;
    67d6:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    67da:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    67dc:	601a      	str	r2, [r3, #0]
  return false;
    67de:	e66a      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    67e0:	210a      	movs	r1, #10
  m_errorLine = line;
    67e2:	4b3b      	ldr	r3, [pc, #236]	; (68d0 <SdioCard::begin(SdioConfig)+0x568>)
    67e4:	f44f 72df 	mov.w	r2, #446	; 0x1be
    return false;
    67e8:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    67ec:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    67ee:	601a      	str	r2, [r3, #0]
  return false;
    67f0:	e661      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    67f2:	4641      	mov	r1, r8
    67f4:	483b      	ldr	r0, [pc, #236]	; (68e4 <SdioCard::begin(SdioConfig)+0x57c>)
    67f6:	f7ff fa9f 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    67fa:	2800      	cmp	r0, #0
    67fc:	d0e7      	beq.n	67ce <SdioCard::begin(SdioConfig)+0x466>
  if (!waitDmaStatus()) {
    67fe:	f7ff f9c9 	bl	5b94 <waitDmaStatus()>
    6802:	4683      	mov	fp, r0
    6804:	b930      	cbnz	r0, 6814 <SdioCard::begin(SdioConfig)+0x4ac>
  m_errorCode = code;
    6806:	2126      	movs	r1, #38	; 0x26
  m_errorLine = line;
    6808:	4b31      	ldr	r3, [pc, #196]	; (68d0 <SdioCard::begin(SdioConfig)+0x568>)
    680a:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
  m_errorCode = code;
    680e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6810:	601a      	str	r2, [r3, #0]
  return false;
    6812:	e650      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
  /** Bytes 0-3 SD Association, bytes 4-7 reserved for manufacturer. */
  uint8_t scr[8];
  /** \return SCR_STRUCTURE field  - must be zero.*/
  uint8_t srcStructure() const { return scr[0] >> 4; }
  /** \return SD_SPEC field 0 - v1.0 or V1.01, 1 - 1.10, 2 - V2.00 or greater */
  uint8_t sdSpec() const { return scr[0] & 0XF; }
    6814:	f899 3000 	ldrb.w	r3, [r9]
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6818:	071a      	lsls	r2, r3, #28
    681a:	d018      	beq.n	684e <SdioCard::begin(SdioConfig)+0x4e6>
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    681c:	6833      	ldr	r3, [r6, #0]
    681e:	aa02      	add	r2, sp, #8
    6820:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
    6824:	4630      	mov	r0, r6
    6826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6828:	4798      	blx	r3
    682a:	b180      	cbz	r0, 684e <SdioCard::begin(SdioConfig)+0x4e6>
    682c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    6830:	079b      	lsls	r3, r3, #30
    6832:	d50c      	bpl.n	684e <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6834:	6833      	ldr	r3, [r6, #0]
    6836:	aa02      	add	r2, sp, #8
    6838:	4630      	mov	r0, r6
    683a:	492b      	ldr	r1, [pc, #172]	; (68e8 <SdioCard::begin(SdioConfig)+0x580>)
    683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    683e:	4798      	blx	r3
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    6840:	b128      	cbz	r0, 684e <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6842:	f89d 3018 	ldrb.w	r3, [sp, #24]
    6846:	f003 030f 	and.w	r3, r3, #15
    684a:	2b01      	cmp	r3, #1
    684c:	d032      	beq.n	68b4 <SdioCard::begin(SdioConfig)+0x54c>
    kHzSdClk = 25000;
    684e:	f246 10a8 	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6852:	4c26      	ldr	r4, [pc, #152]	; (68ec <SdioCard::begin(SdioConfig)+0x584>)
    6854:	2305      	movs	r3, #5
    6856:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    685a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    685e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6862:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6866:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    686a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    686e:	f7ff f887 	bl	5980 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6872:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6874:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6878:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    687c:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6880:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6884:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6888:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    688c:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6890:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6894:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    6898:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    689c:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    68a0:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    68a4:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    68a6:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    68aa:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    68ae:	4a10      	ldr	r2, [pc, #64]	; (68f0 <SdioCard::begin(SdioConfig)+0x588>)
    68b0:	7013      	strb	r3, [r2, #0]
  return true;
    68b2:	e600      	b.n	64b6 <SdioCard::begin(SdioConfig)+0x14e>
    kHzSdClk = 50000;
    68b4:	f24c 3050 	movw	r0, #50000	; 0xc350
    68b8:	e7cb      	b.n	6852 <SdioCard::begin(SdioConfig)+0x4ea>
    68ba:	bf00      	nop
    68bc:	061a0000 	.word	0x061a0000
    68c0:	2002a868 	.word	0x2002a868
    68c4:	00010008 	.word	0x00010008
    68c8:	117f0002 	.word	0x117f0002
    68cc:	371a0000 	.word	0x371a0000
    68d0:	20025f48 	.word	0x20025f48
    68d4:	333a0011 	.word	0x333a0011
    68d8:	000f4240 	.word	0x000f4240
    68dc:	2002a184 	.word	0x2002a184
    68e0:	00010040 	.word	0x00010040
    68e4:	0d3a0011 	.word	0x0d3a0011
    68e8:	80fffff1 	.word	0x80fffff1
    68ec:	401f8000 	.word	0x401f8000
    68f0:	2002b496 	.word	0x2002b496
    68f4:	0d1a0000 	.word	0x0d1a0000
    68f8:	2002b49a 	.word	0x2002b49a
    68fc:	2002a17c 	.word	0x2002a17c
    6900:	402c0000 	.word	0x402c0000

00006904 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    6904:	4b37      	ldr	r3, [pc, #220]	; (69e4 <SdioCard::readData(unsigned char*)+0xe0>)
    6906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6908:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    690a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    690e:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    6910:	d40d      	bmi.n	692e <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6914:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    6918:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    691a:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    691c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    691e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    6922:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6926:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    692a:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    692c:	b662      	cpsie	i
  uint32_t m = micros();
    692e:	f001 fb0d 	bl	7f4c <micros>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    6932:	4e2c      	ldr	r6, [pc, #176]	; (69e4 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6934:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 69fc <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    6938:	4605      	mov	r5, r0
  while (fcn()) {
    693a:	e004      	b.n	6946 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    693c:	f001 fb06 	bl	7f4c <micros>
    6940:	1b43      	subs	r3, r0, r5
    6942:	4543      	cmp	r3, r8
    6944:	d837      	bhi.n	69b6 <SdioCard::readData(unsigned char*)+0xb2>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    6946:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    6948:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    694c:	d0f6      	beq.n	693c <SdioCard::readData(unsigned char*)+0x38>
    694e:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    6952:	4824      	ldr	r0, [pc, #144]	; (69e4 <SdioCard::readData(unsigned char*)+0xe0>)
    6954:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    6958:	6a43      	ldr	r3, [r0, #36]	; 0x24
    695a:	051b      	lsls	r3, r3, #20
    695c:	d5fc      	bpl.n	6958 <SdioCard::readData(unsigned char*)+0x54>
    695e:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    6962:	6a02      	ldr	r2, [r0, #32]
    6964:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    6968:	459c      	cmp	ip, r3
    696a:	d1fa      	bne.n	6962 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    696c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    6970:	4567      	cmp	r7, ip
    6972:	d1f1      	bne.n	6958 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    6974:	f001 faea 	bl	7f4c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    6978:	4f1a      	ldr	r7, [pc, #104]	; (69e4 <SdioCard::readData(unsigned char*)+0xe0>)
    697a:	4d1b      	ldr	r5, [pc, #108]	; (69e8 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    697c:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    697e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 69fc <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    6982:	e004      	b.n	698e <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6984:	f001 fae2 	bl	7f4c <micros>
    6988:	1b83      	subs	r3, r0, r6
    698a:	4543      	cmp	r3, r8
    698c:	d81d      	bhi.n	69ca <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    698e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    6990:	402c      	ands	r4, r5
    6992:	d0f7      	beq.n	6984 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    6994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6996:	4a15      	ldr	r2, [pc, #84]	; (69ec <SdioCard::readData(unsigned char*)+0xe8>)
    6998:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    699a:	6813      	ldr	r3, [r2, #0]
    699c:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    699e:	6813      	ldr	r3, [r2, #0]
    69a0:	f013 0302 	ands.w	r3, r3, #2
    69a4:	d01b      	beq.n	69de <SdioCard::readData(unsigned char*)+0xda>
    69a6:	6812      	ldr	r2, [r2, #0]
    69a8:	4b11      	ldr	r3, [pc, #68]	; (69f0 <SdioCard::readData(unsigned char*)+0xec>)
    69aa:	421a      	tst	r2, r3
    69ac:	bf0c      	ite	eq
    69ae:	2001      	moveq	r0, #1
    69b0:	2000      	movne	r0, #0
}
    69b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    69b6:	490f      	ldr	r1, [pc, #60]	; (69f4 <SdioCard::readData(unsigned char*)+0xf0>)
    69b8:	251b      	movs	r5, #27
  m_errorLine = line;
    69ba:	4b0f      	ldr	r3, [pc, #60]	; (69f8 <SdioCard::readData(unsigned char*)+0xf4>)
    69bc:	f240 3279 	movw	r2, #889	; 0x379
    return sdError(SD_CARD_ERROR_READ_FIFO);
    69c0:	4620      	mov	r0, r4
  m_errorCode = code;
    69c2:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    69c4:	601a      	str	r2, [r3, #0]
}
    69c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    69ca:	490a      	ldr	r1, [pc, #40]	; (69f4 <SdioCard::readData(unsigned char*)+0xf0>)
    69cc:	251e      	movs	r5, #30
  m_errorLine = line;
    69ce:	4b0a      	ldr	r3, [pc, #40]	; (69f8 <SdioCard::readData(unsigned char*)+0xf4>)
    69d0:	f44f 7261 	mov.w	r2, #900	; 0x384
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    69d4:	4620      	mov	r0, r4
  m_errorCode = code;
    69d6:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    69d8:	601a      	str	r2, [r3, #0]
}
    69da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    69de:	4618      	mov	r0, r3
}
    69e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69e4:	402c0000 	.word	0x402c0000
    69e8:	117f0002 	.word	0x117f0002
    69ec:	2002a868 	.word	0x2002a868
    69f0:	117f0000 	.word	0x117f0000
    69f4:	20008bea 	.word	0x20008bea
    69f8:	20025f48 	.word	0x20025f48
    69fc:	000f4240 	.word	0x000f4240

00006a00 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    6a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    6a04:	4b29      	ldr	r3, [pc, #164]	; (6aac <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    6a06:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    6a08:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6acc <SdioCard::readStart(unsigned long)+0xcc>
    6a0c:	4e28      	ldr	r6, [pc, #160]	; (6ab0 <SdioCard::readStart(unsigned long)+0xb0>)
    6a0e:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    6a12:	f001 fa9b 	bl	7f4c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6a16:	4d27      	ldr	r5, [pc, #156]	; (6ab4 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    6a18:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6a1a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6ad0 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6a1e:	4f26      	ldr	r7, [pc, #152]	; (6ab8 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    6a20:	e006      	b.n	6a30 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6a22:	f001 fa93 	bl	7f4c <micros>
    6a26:	1b00      	subs	r0, r0, r4
    6a28:	42b8      	cmp	r0, r7
    6a2a:	d829      	bhi.n	6a80 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    6a2c:	f002 fd98 	bl	9560 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6a30:	6831      	ldr	r1, [r6, #0]
    6a32:	4628      	mov	r0, r5
    6a34:	f7ff f980 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6a38:	2800      	cmp	r0, #0
    6a3a:	d0f2      	beq.n	6a22 <SdioCard::readStart(unsigned long)+0x22>
    6a3c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6a40:	05db      	lsls	r3, r3, #23
    6a42:	d5ee      	bpl.n	6a22 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    6a44:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    6a46:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    6a4a:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6a4e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    6a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6a56:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6a5a:	4b18      	ldr	r3, [pc, #96]	; (6abc <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    6a5c:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6a60:	781b      	ldrb	r3, [r3, #0]
    6a62:	b1cb      	cbz	r3, 6a98 <SdioCard::readStart(unsigned long)+0x98>
    6a64:	4649      	mov	r1, r9
    6a66:	4816      	ldr	r0, [pc, #88]	; (6ac0 <SdioCard::readStart(unsigned long)+0xc0>)
    6a68:	f7ff f966 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6a6c:	b930      	cbnz	r0, 6a7c <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    6a6e:	4915      	ldr	r1, [pc, #84]	; (6ac4 <SdioCard::readStart(unsigned long)+0xc4>)
    6a70:	240c      	movs	r4, #12
  m_errorLine = line;
    6a72:	4b15      	ldr	r3, [pc, #84]	; (6ac8 <SdioCard::readStart(unsigned long)+0xc8>)
    6a74:	f240 32ea 	movw	r2, #1002	; 0x3ea
  m_errorCode = code;
    6a78:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6a7a:	601a      	str	r2, [r3, #0]
}
    6a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    6a80:	4a10      	ldr	r2, [pc, #64]	; (6ac4 <SdioCard::readStart(unsigned long)+0xc4>)
    6a82:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6a84:	2000      	movs	r0, #0
  m_errorLine = line;
    6a86:	4b10      	ldr	r3, [pc, #64]	; (6ac8 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    6a88:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6a8a:	f240 32de 	movw	r2, #990	; 0x3de
      m_busyFcn = 0;
    6a8e:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    6a92:	601a      	str	r2, [r3, #0]
}
    6a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6a98:	ea4f 2949 	mov.w	r9, r9, lsl #9
    6a9c:	4808      	ldr	r0, [pc, #32]	; (6ac0 <SdioCard::readStart(unsigned long)+0xc0>)
    6a9e:	4649      	mov	r1, r9
    6aa0:	f7ff f94a 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6aa4:	2800      	cmp	r0, #0
    6aa6:	d1e9      	bne.n	6a7c <SdioCard::readStart(unsigned long)+0x7c>
    6aa8:	e7e1      	b.n	6a6e <SdioCard::readStart(unsigned long)+0x6e>
    6aaa:	bf00      	nop
    6aac:	00005ecd 	.word	0x00005ecd
    6ab0:	2002a178 	.word	0x2002a178
    6ab4:	0d1a0000 	.word	0x0d1a0000
    6ab8:	000f4240 	.word	0x000f4240
    6abc:	2002b498 	.word	0x2002b498
    6ac0:	123a0030 	.word	0x123a0030
    6ac4:	20008bea 	.word	0x20008bea
    6ac8:	20025f48 	.word	0x20025f48
    6acc:	2002a864 	.word	0x2002a864
    6ad0:	402c0000 	.word	0x402c0000

00006ad4 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    6ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    6ad8:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6ada:	4c1d      	ldr	r4, [pc, #116]	; (6b50 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    6adc:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    6ade:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6ae0:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6ae2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6ae4:	481b      	ldr	r0, [pc, #108]	; (6b54 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6aea:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6aec:	f7ff f924 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6af0:	b940      	cbnz	r0, 6b04 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    6af2:	4919      	ldr	r1, [pc, #100]	; (6b58 <SdioCard::stopTransmission(bool)+0x84>)
    6af4:	2409      	movs	r4, #9
  m_errorLine = line;
    6af6:	4b19      	ldr	r3, [pc, #100]	; (6b5c <SdioCard::stopTransmission(bool)+0x88>)
    6af8:	f240 32fa 	movw	r2, #1018	; 0x3fa
  m_errorCode = code;
    6afc:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6afe:	601a      	str	r2, [r3, #0]
}
    6b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    6b04:	2d00      	cmp	r5, #0
    6b06:	d0fb      	beq.n	6b00 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    6b08:	4b15      	ldr	r3, [pc, #84]	; (6b60 <SdioCard::stopTransmission(bool)+0x8c>)
    6b0a:	4e16      	ldr	r6, [pc, #88]	; (6b64 <SdioCard::stopTransmission(bool)+0x90>)
    6b0c:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    6b0e:	f001 fa1d 	bl	7f4c <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    6b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    6b14:	4607      	mov	r7, r0
  while (fcn()) {
    6b16:	01da      	lsls	r2, r3, #7
    6b18:	d416      	bmi.n	6b48 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6b1a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6b68 <SdioCard::stopTransmission(bool)+0x94>
    6b1e:	e004      	b.n	6b2a <SdioCard::stopTransmission(bool)+0x56>
    yield();
    6b20:	f002 fd1e 	bl	9560 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    6b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    6b26:	01db      	lsls	r3, r3, #7
    6b28:	d40e      	bmi.n	6b48 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6b2a:	f001 fa0f 	bl	7f4c <micros>
    6b2e:	1bc0      	subs	r0, r0, r7
    6b30:	4540      	cmp	r0, r8
    6b32:	d9f5      	bls.n	6b20 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    6b34:	4a08      	ldr	r2, [pc, #32]	; (6b58 <SdioCard::stopTransmission(bool)+0x84>)
    6b36:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6b38:	2000      	movs	r0, #0
  m_errorLine = line;
    6b3a:	4b08      	ldr	r3, [pc, #32]	; (6b5c <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    6b3c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6b3e:	f240 32fe 	movw	r2, #1022	; 0x3fe
      m_busyFcn = 0;
    6b42:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    6b44:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    6b46:	e7db      	b.n	6b00 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    6b48:	2300      	movs	r3, #0
  return true;
    6b4a:	4628      	mov	r0, r5
  m_busyFcn = 0;
    6b4c:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    6b4e:	e7d7      	b.n	6b00 <SdioCard::stopTransmission(bool)+0x2c>
    6b50:	402c0000 	.word	0x402c0000
    6b54:	0cdb0000 	.word	0x0cdb0000
    6b58:	20008bea 	.word	0x20008bea
    6b5c:	20025f48 	.word	0x20025f48
    6b60:	00005961 	.word	0x00005961
    6b64:	2002a864 	.word	0x2002a864
    6b68:	000f4240 	.word	0x000f4240

00006b6c <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    6b6c:	4b0a      	ldr	r3, [pc, #40]	; (6b98 <SdioCard::syncDevice()+0x2c>)
    6b6e:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    6b70:	b510      	push	{r4, lr}
    6b72:	4604      	mov	r4, r0
  if (!m_transferActive) {
    6b74:	b91b      	cbnz	r3, 6b7e <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    6b76:	7a63      	ldrb	r3, [r4, #9]
    6b78:	b943      	cbnz	r3, 6b8c <SdioCard::syncDevice()+0x20>
  return true;
    6b7a:	2001      	movs	r0, #1
}
    6b7c:	bd10      	pop	{r4, pc}
    6b7e:	f7ff f83d 	bl	5bfc <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6b82:	2800      	cmp	r0, #0
    6b84:	d0fa      	beq.n	6b7c <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    6b86:	7a63      	ldrb	r3, [r4, #9]
    6b88:	2b00      	cmp	r3, #0
    6b8a:	d0f6      	beq.n	6b7a <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    6b8c:	4620      	mov	r0, r4
    6b8e:	2101      	movs	r1, #1
}
    6b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    6b94:	f7ff bf9e 	b.w	6ad4 <SdioCard::stopTransmission(bool)>
    6b98:	2002b499 	.word	0x2002b499

00006b9c <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6ba0:	7a43      	ldrb	r3, [r0, #9]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6ba2:	460d      	mov	r5, r1
    6ba4:	4616      	mov	r6, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6ba6:	b1bb      	cbz	r3, 6bd8 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    6ba8:	6803      	ldr	r3, [r0, #0]
    6baa:	4604      	mov	r4, r0
    6bac:	4a3f      	ldr	r2, [pc, #252]	; (6cac <SdioCard::erase(unsigned long, unsigned long)+0x110>)
    6bae:	69db      	ldr	r3, [r3, #28]
    6bb0:	4293      	cmp	r3, r2
    6bb2:	d14a      	bne.n	6c4a <SdioCard::erase(unsigned long, unsigned long)+0xae>
  if (!m_transferActive) {
    6bb4:	4b3e      	ldr	r3, [pc, #248]	; (6cb0 <SdioCard::erase(unsigned long, unsigned long)+0x114>)
    6bb6:	781b      	ldrb	r3, [r3, #0]
    6bb8:	b93b      	cbnz	r3, 6bca <SdioCard::erase(unsigned long, unsigned long)+0x2e>
    return stopTransmission(true);
    6bba:	2101      	movs	r1, #1
    6bbc:	4620      	mov	r0, r4
    6bbe:	f7ff ff89 	bl	6ad4 <SdioCard::stopTransmission(bool)>
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6bc2:	b948      	cbnz	r0, 6bd8 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return false;
    6bc4:	2000      	movs	r0, #0
}
    6bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bca:	f7ff f817 	bl	5bfc <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6bce:	2800      	cmp	r0, #0
    6bd0:	d0f8      	beq.n	6bc4 <SdioCard::erase(unsigned long, unsigned long)+0x28>
  if (m_curState != IDLE_STATE) {
    6bd2:	7a63      	ldrb	r3, [r4, #9]
    6bd4:	2b00      	cmp	r3, #0
    6bd6:	d1f0      	bne.n	6bba <SdioCard::erase(unsigned long, unsigned long)+0x1e>
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    6bd8:	4c36      	ldr	r4, [pc, #216]	; (6cb4 <SdioCard::erase(unsigned long, unsigned long)+0x118>)
    6bda:	7aa3      	ldrb	r3, [r4, #10]
  if (!m_csd.eraseSingleBlock()) {
    6bdc:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    6be0:	d112      	bne.n	6c08 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    6be2:	005b      	lsls	r3, r3, #1
    6be4:	7ae2      	ldrb	r2, [r4, #11]
    6be6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    6bea:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    6bee:	1c72      	adds	r2, r6, #1
    6bf0:	432a      	orrs	r2, r5
    6bf2:	4213      	tst	r3, r2
    6bf4:	d008      	beq.n	6c08 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  m_errorCode = code;
    6bf6:	4930      	ldr	r1, [pc, #192]	; (6cb8 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6bf8:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    6bfa:	4b30      	ldr	r3, [pc, #192]	; (6cbc <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6bfc:	f240 322d 	movw	r2, #813	; 0x32d
  m_errorCode = code;
    6c00:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6c02:	601a      	str	r2, [r3, #0]
}
    6c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    6c08:	4b2d      	ldr	r3, [pc, #180]	; (6cc0 <SdioCard::erase(unsigned long, unsigned long)+0x124>)
    6c0a:	781b      	ldrb	r3, [r3, #0]
    6c0c:	b90b      	cbnz	r3, 6c12 <SdioCard::erase(unsigned long, unsigned long)+0x76>
    firstSector <<= 9;
    6c0e:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    6c10:	0276      	lsls	r6, r6, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    6c12:	4629      	mov	r1, r5
    6c14:	482b      	ldr	r0, [pc, #172]	; (6cc4 <SdioCard::erase(unsigned long, unsigned long)+0x128>)
    6c16:	f7ff f88f 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6c1a:	b940      	cbnz	r0, 6c2e <SdioCard::erase(unsigned long, unsigned long)+0x92>
  m_errorCode = code;
    6c1c:	4926      	ldr	r1, [pc, #152]	; (6cb8 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6c1e:	240f      	movs	r4, #15
  m_errorLine = line;
    6c20:	4b26      	ldr	r3, [pc, #152]	; (6cbc <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6c22:	f240 3235 	movw	r2, #821	; 0x335
  m_errorCode = code;
    6c26:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6c28:	601a      	str	r2, [r3, #0]
}
    6c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    6c2e:	4631      	mov	r1, r6
    6c30:	4825      	ldr	r0, [pc, #148]	; (6cc8 <SdioCard::erase(unsigned long, unsigned long)+0x12c>)
    6c32:	f7ff f881 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6c36:	b960      	cbnz	r0, 6c52 <SdioCard::erase(unsigned long, unsigned long)+0xb6>
  m_errorCode = code;
    6c38:	491f      	ldr	r1, [pc, #124]	; (6cb8 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6c3a:	2410      	movs	r4, #16
  m_errorLine = line;
    6c3c:	4b1f      	ldr	r3, [pc, #124]	; (6cbc <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6c3e:	f44f 724e 	mov.w	r2, #824	; 0x338
  m_errorCode = code;
    6c42:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6c44:	601a      	str	r2, [r3, #0]
}
    6c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6c4a:	4798      	blx	r3
    6c4c:	2800      	cmp	r0, #0
    6c4e:	d0b9      	beq.n	6bc4 <SdioCard::erase(unsigned long, unsigned long)+0x28>
    6c50:	e7c2      	b.n	6bd8 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    6c52:	2100      	movs	r1, #0
    6c54:	481d      	ldr	r0, [pc, #116]	; (6ccc <SdioCard::erase(unsigned long, unsigned long)+0x130>)
    6c56:	f7ff f86f 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6c5a:	b938      	cbnz	r0, 6c6c <SdioCard::erase(unsigned long, unsigned long)+0xd0>
  m_errorCode = code;
    6c5c:	4916      	ldr	r1, [pc, #88]	; (6cb8 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6c5e:	2411      	movs	r4, #17
  m_errorLine = line;
    6c60:	4b16      	ldr	r3, [pc, #88]	; (6cbc <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6c62:	f240 323b 	movw	r2, #827	; 0x33b
  m_errorCode = code;
    6c66:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6c68:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    6c6a:	e7cb      	b.n	6c04 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  uint32_t m = micros();
    6c6c:	f001 f96e 	bl	7f4c <micros>
    6c70:	4e17      	ldr	r6, [pc, #92]	; (6cd0 <SdioCard::erase(unsigned long, unsigned long)+0x134>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6c72:	4d18      	ldr	r5, [pc, #96]	; (6cd4 <SdioCard::erase(unsigned long, unsigned long)+0x138>)
  uint32_t m = micros();
    6c74:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6c76:	f8df 8064 	ldr.w	r8, [pc, #100]	; 6cdc <SdioCard::erase(unsigned long, unsigned long)+0x140>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6c7a:	4f17      	ldr	r7, [pc, #92]	; (6cd8 <SdioCard::erase(unsigned long, unsigned long)+0x13c>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6c7c:	6831      	ldr	r1, [r6, #0]
    6c7e:	4628      	mov	r0, r5
    6c80:	f7ff f85a 	bl	5d38 <cardCommand(unsigned long, unsigned long)>
    6c84:	b118      	cbz	r0, 6c8e <SdioCard::erase(unsigned long, unsigned long)+0xf2>
    6c86:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6c8a:	05db      	lsls	r3, r3, #23
    6c8c:	d4ba      	bmi.n	6c04 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6c8e:	f001 f95d 	bl	7f4c <micros>
    6c92:	1b00      	subs	r0, r0, r4
    6c94:	42b8      	cmp	r0, r7
    6c96:	d9f1      	bls.n	6c7c <SdioCard::erase(unsigned long, unsigned long)+0xe0>
  m_errorCode = code;
    6c98:	4907      	ldr	r1, [pc, #28]	; (6cb8 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6c9a:	2429      	movs	r4, #41	; 0x29
  m_errorLine = line;
    6c9c:	4b07      	ldr	r3, [pc, #28]	; (6cbc <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6c9e:	f240 323e 	movw	r2, #830	; 0x33e
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    6ca2:	2000      	movs	r0, #0
  m_errorCode = code;
    6ca4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6ca6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    6ca8:	e7ac      	b.n	6c04 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    6caa:	bf00      	nop
    6cac:	00006b6d 	.word	0x00006b6d
    6cb0:	2002b499 	.word	0x2002b499
    6cb4:	2002a164 	.word	0x2002a164
    6cb8:	20008bea 	.word	0x20008bea
    6cbc:	20025f48 	.word	0x20025f48
    6cc0:	2002b498 	.word	0x2002b498
    6cc4:	201a0000 	.word	0x201a0000
    6cc8:	211a0000 	.word	0x211a0000
    6ccc:	261b0000 	.word	0x261b0000
    6cd0:	2002a178 	.word	0x2002a178
    6cd4:	0d1a0000 	.word	0x0d1a0000
    6cd8:	000f4240 	.word	0x000f4240
    6cdc:	402c0000 	.word	0x402c0000

00006ce0 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ce4:	4604      	mov	r4, r0
    6ce6:	7a00      	ldrb	r0, [r0, #8]
    6ce8:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6cec:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    6cee:	f010 0501 	ands.w	r5, r0, #1
    6cf2:	d013      	beq.n	6d1c <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    6cf4:	0793      	lsls	r3, r2, #30
    6cf6:	d03c      	beq.n	6d72 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6cf8:	2301      	movs	r3, #1
    6cfa:	4838      	ldr	r0, [pc, #224]	; (6ddc <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6cfc:	466a      	mov	r2, sp
    6cfe:	f7ff fa25 	bl	614c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6d02:	2800      	cmp	r0, #0
    6d04:	d03a      	beq.n	6d7c <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    6d06:	f44f 7200 	mov.w	r2, #512	; 0x200
    6d0a:	4669      	mov	r1, sp
    6d0c:	4630      	mov	r0, r6
    6d0e:	f001 f9b1 	bl	8074 <memcpy>
}
    6d12:	4628      	mov	r0, r5
    6d14:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6d1c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6dec <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    6d20:	460f      	mov	r7, r1
    6d22:	f898 3000 	ldrb.w	r3, [r8]
    6d26:	2b00      	cmp	r3, #0
    6d28:	d135      	bne.n	6d96 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6d2a:	7a63      	ldrb	r3, [r4, #9]
    6d2c:	2b01      	cmp	r3, #1
    6d2e:	d039      	beq.n	6da4 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    6d30:	6822      	ldr	r2, [r4, #0]
    6d32:	492b      	ldr	r1, [pc, #172]	; (6de0 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    6d34:	69d2      	ldr	r2, [r2, #28]
    6d36:	428a      	cmp	r2, r1
    6d38:	d14a      	bne.n	6dd0 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    6d3a:	f898 2000 	ldrb.w	r2, [r8]
    6d3e:	2a00      	cmp	r2, #0
    6d40:	d134      	bne.n	6dac <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    6d42:	2b00      	cmp	r3, #0
    6d44:	d139      	bne.n	6dba <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    6d46:	4639      	mov	r1, r7
    6d48:	4620      	mov	r0, r4
    6d4a:	f7ff fe59 	bl	6a00 <SdioCard::readStart(unsigned long)>
    6d4e:	b1e8      	cbz	r0, 6d8c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    6d50:	2301      	movs	r3, #1
      m_curSector = sector;
    6d52:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    6d54:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    6d56:	4631      	mov	r1, r6
    6d58:	4620      	mov	r0, r4
    6d5a:	f7ff fdd3 	bl	6904 <SdioCard::readData(unsigned char*)>
    6d5e:	b1a8      	cbz	r0, 6d8c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    6d60:	6863      	ldr	r3, [r4, #4]
  return true;
    6d62:	4605      	mov	r5, r0
    m_curSector++;
    6d64:	3301      	adds	r3, #1
}
    6d66:	4628      	mov	r0, r5
    m_curSector++;
    6d68:	6063      	str	r3, [r4, #4]
}
    6d6a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6d72:	2301      	movs	r3, #1
    6d74:	4819      	ldr	r0, [pc, #100]	; (6ddc <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6d76:	f7ff f9e9 	bl	614c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6d7a:	b938      	cbnz	r0, 6d8c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    6d7c:	4919      	ldr	r1, [pc, #100]	; (6de4 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    6d7e:	200b      	movs	r0, #11
  m_errorLine = line;
    6d80:	4b19      	ldr	r3, [pc, #100]	; (6de8 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    6d82:	f240 32a1 	movw	r2, #929	; 0x3a1
      return sdError(SD_CARD_ERROR_CMD17);
    6d86:	2500      	movs	r5, #0
  m_errorCode = code;
    6d88:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6d8a:	601a      	str	r2, [r3, #0]
}
    6d8c:	4628      	mov	r0, r5
    6d8e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d96:	f7fe ff31 	bl	5bfc <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6d9a:	2800      	cmp	r0, #0
    6d9c:	d0f6      	beq.n	6d8c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6d9e:	7a63      	ldrb	r3, [r4, #9]
    6da0:	2b01      	cmp	r3, #1
    6da2:	d1c5      	bne.n	6d30 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6da4:	6862      	ldr	r2, [r4, #4]
    6da6:	42ba      	cmp	r2, r7
    6da8:	d1c2      	bne.n	6d30 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6daa:	e7d4      	b.n	6d56 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    6dac:	f7fe ff26 	bl	5bfc <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6db0:	2800      	cmp	r0, #0
    6db2:	d0eb      	beq.n	6d8c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    6db4:	7a63      	ldrb	r3, [r4, #9]
    6db6:	2b00      	cmp	r3, #0
    6db8:	d0c5      	beq.n	6d46 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    6dba:	2101      	movs	r1, #1
    6dbc:	4620      	mov	r0, r4
    6dbe:	f7ff fe89 	bl	6ad4 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6dc2:	2800      	cmp	r0, #0
    6dc4:	d1bf      	bne.n	6d46 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    6dc6:	4628      	mov	r0, r5
    6dc8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    6dd0:	4620      	mov	r0, r4
    6dd2:	4790      	blx	r2
    6dd4:	2800      	cmp	r0, #0
    6dd6:	d0f6      	beq.n	6dc6 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    6dd8:	e7b5      	b.n	6d46 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    6dda:	bf00      	nop
    6ddc:	113a0011 	.word	0x113a0011
    6de0:	00006b6d 	.word	0x00006b6d
    6de4:	20008bea 	.word	0x20008bea
    6de8:	20025f48 	.word	0x20025f48
    6dec:	2002b499 	.word	0x2002b499

00006df0 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    6df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6df4:	7a04      	ldrb	r4, [r0, #8]
    6df6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6dfa:	460f      	mov	r7, r1
    6dfc:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    6dfe:	f014 0401 	ands.w	r4, r4, #1
    6e02:	d01d      	beq.n	6e40 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    6e04:	f012 0f03 	tst.w	r2, #3
    6e08:	d006      	beq.n	6e18 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    6e0a:	4668      	mov	r0, sp
    6e0c:	4611      	mov	r1, r2
    6e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    6e12:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    6e14:	f001 f92e 	bl	8074 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    6e18:	2301      	movs	r3, #1
    6e1a:	4642      	mov	r2, r8
    6e1c:	4639      	mov	r1, r7
    6e1e:	482c      	ldr	r0, [pc, #176]	; (6ed0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    6e20:	f7ff f994 	bl	614c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6e24:	4604      	mov	r4, r0
    6e26:	b930      	cbnz	r0, 6e36 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    6e28:	492a      	ldr	r1, [pc, #168]	; (6ed4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    6e2a:	200d      	movs	r0, #13
  m_errorLine = line;
    6e2c:	4b2a      	ldr	r3, [pc, #168]	; (6ed8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    6e2e:	f44f 6287 	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    6e32:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6e34:	601a      	str	r2, [r3, #0]
}
    6e36:	4620      	mov	r0, r4
    6e38:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6e40:	4d26      	ldr	r5, [pc, #152]	; (6edc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    6e42:	4606      	mov	r6, r0
    6e44:	782b      	ldrb	r3, [r5, #0]
    6e46:	bb2b      	cbnz	r3, 6e94 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6e48:	7a73      	ldrb	r3, [r6, #9]
    6e4a:	2b02      	cmp	r3, #2
    6e4c:	d029      	beq.n	6ea2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    6e4e:	6832      	ldr	r2, [r6, #0]
    6e50:	4923      	ldr	r1, [pc, #140]	; (6ee0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    6e52:	69d2      	ldr	r2, [r2, #28]
    6e54:	428a      	cmp	r2, r1
    6e56:	d136      	bne.n	6ec6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    6e58:	782a      	ldrb	r2, [r5, #0]
    6e5a:	bb32      	cbnz	r2, 6eaa <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    6e5c:	2b00      	cmp	r3, #0
    6e5e:	d12b      	bne.n	6eb8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector)) {
    6e60:	6833      	ldr	r3, [r6, #0]
    6e62:	4639      	mov	r1, r7
    6e64:	4630      	mov	r0, r6
    6e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    6e68:	4798      	blx	r3
    6e6a:	2800      	cmp	r0, #0
    6e6c:	d0e3      	beq.n	6e36 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    6e6e:	2302      	movs	r3, #2
      m_curSector = sector;
    6e70:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    6e72:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    6e74:	6833      	ldr	r3, [r6, #0]
    6e76:	4641      	mov	r1, r8
    6e78:	4630      	mov	r0, r6
    6e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6e7c:	4798      	blx	r3
    6e7e:	2800      	cmp	r0, #0
    6e80:	d0d9      	beq.n	6e36 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    6e82:	6873      	ldr	r3, [r6, #4]
  return true;
    6e84:	4604      	mov	r4, r0
    m_curSector++;
    6e86:	3301      	adds	r3, #1
}
    6e88:	4620      	mov	r0, r4
    m_curSector++;
    6e8a:	6073      	str	r3, [r6, #4]
}
    6e8c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e94:	f7fe feb2 	bl	5bfc <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6e98:	2800      	cmp	r0, #0
    6e9a:	d0cc      	beq.n	6e36 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6e9c:	7a73      	ldrb	r3, [r6, #9]
    6e9e:	2b02      	cmp	r3, #2
    6ea0:	d1d5      	bne.n	6e4e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6ea2:	6872      	ldr	r2, [r6, #4]
    6ea4:	42ba      	cmp	r2, r7
    6ea6:	d1d2      	bne.n	6e4e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6ea8:	e7e4      	b.n	6e74 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    6eaa:	f7fe fea7 	bl	5bfc <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6eae:	2800      	cmp	r0, #0
    6eb0:	d0c1      	beq.n	6e36 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    6eb2:	7a73      	ldrb	r3, [r6, #9]
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	d0d3      	beq.n	6e60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    6eb8:	2101      	movs	r1, #1
    6eba:	4630      	mov	r0, r6
    6ebc:	f7ff fe0a 	bl	6ad4 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6ec0:	2800      	cmp	r0, #0
    6ec2:	d0b8      	beq.n	6e36 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6ec4:	e7cc      	b.n	6e60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6ec6:	4630      	mov	r0, r6
    6ec8:	4790      	blx	r2
    6eca:	2800      	cmp	r0, #0
    6ecc:	d0b3      	beq.n	6e36 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6ece:	e7c7      	b.n	6e60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6ed0:	183a0001 	.word	0x183a0001
    6ed4:	20008bea 	.word	0x20008bea
    6ed8:	20025f48 	.word	0x20025f48
    6edc:	2002b499 	.word	0x2002b499
    6ee0:	00006b6d 	.word	0x00006b6d

00006ee4 <sdCsWrite(unsigned char, bool)>:
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    6ee4:	f001 b85c 	b.w	7fa0 <digitalWrite>

00006ee8 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    6ee8:	b430      	push	{r4, r5}
    6eea:	b082      	sub	sp, #8
    6eec:	460c      	mov	r4, r1
    6eee:	ab02      	add	r3, sp, #8
    6ef0:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    6ef4:	7cc3      	ldrb	r3, [r0, #19]
    6ef6:	2b00      	cmp	r3, #0
    6ef8:	d030      	beq.n	6f5c <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    6efa:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6efc:	7cc3      	ldrb	r3, [r0, #19]
    6efe:	07da      	lsls	r2, r3, #31
    6f00:	d508      	bpl.n	6f14 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    6f02:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6f06:	6945      	ldr	r5, [r0, #20]
    6f08:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    6f0c:	402a      	ands	r2, r5
    6f0e:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    6f10:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    6f14:	079d      	lsls	r5, r3, #30
    6f16:	d508      	bpl.n	6f2a <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6f18:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6f1c:	6985      	ldr	r5, [r0, #24]
    6f1e:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    6f22:	402a      	ands	r2, r5
    6f24:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    6f26:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    6f2a:	0759      	lsls	r1, r3, #29
    6f2c:	d508      	bpl.n	6f40 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    6f2e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6f32:	69c5      	ldr	r5, [r0, #28]
    6f34:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    6f38:	402a      	ands	r2, r5
    6f3a:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    6f3c:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    6f40:	071a      	lsls	r2, r3, #28
    6f42:	d508      	bpl.n	6f56 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    6f44:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6f48:	6a05      	ldr	r5, [r0, #32]
    6f4a:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    6f4e:	402a      	ands	r2, r5
    6f50:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    6f52:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    6f56:	06db      	lsls	r3, r3, #27
    6f58:	d42f      	bmi.n	6fba <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    6f5a:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    6f5c:	6883      	ldr	r3, [r0, #8]
    6f5e:	429c      	cmp	r4, r3
    6f60:	d035      	beq.n	6fce <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    6f62:	4b22      	ldr	r3, [pc, #136]	; (6fec <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    6f64:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    6f66:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    6f68:	4a21      	ldr	r2, [pc, #132]	; (6ff0 <SPIClass::beginTransaction(SPISettings)+0x108>)
    6f6a:	f3c3 1101 	ubfx	r1, r3, #4, #2
    6f6e:	f3c3 6382 	ubfx	r3, r3, #26, #3
    6f72:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    6f76:	3301      	adds	r3, #1
    6f78:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    6f7c:	b1cc      	cbz	r4, 6fb2 <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    6f7e:	4294      	cmp	r4, r2
    6f80:	d827      	bhi.n	6fd2 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    6f82:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    6f86:	fbb2 f2f3 	udiv	r2, r2, r3
    6f8a:	4294      	cmp	r4, r2
    6f8c:	d32c      	bcc.n	6fe8 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    6f8e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    6f92:	d320      	bcc.n	6fd6 <SPIClass::beginTransaction(SPISettings)+0xee>
    6f94:	4c17      	ldr	r4, [pc, #92]	; (6ff4 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6f96:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6f98:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6f9a:	2203      	movs	r2, #3
		port().CR = 0;
    6f9c:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    6f9e:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    6fa0:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6fa2:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    6fa4:	2201      	movs	r2, #1
		port().CCR = _ccr;
    6fa6:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    6fa8:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    6faa:	611a      	str	r2, [r3, #16]
	}
    6fac:	b002      	add	sp, #8
    6fae:	bc30      	pop	{r4, r5}
    6fb0:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    6fb2:	4299      	cmp	r1, r3
    6fb4:	d3ef      	bcc.n	6f96 <SPIClass::beginTransaction(SPISettings)+0xae>
    6fb6:	1c53      	adds	r3, r2, #1
    6fb8:	e7e9      	b.n	6f8e <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    6fba:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    6fbe:	6a41      	ldr	r1, [r0, #36]	; 0x24
    6fc0:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    6fc4:	400b      	ands	r3, r1
    6fc6:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    6fc8:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    6fcc:	e7c5      	b.n	6f5a <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    6fce:	68c4      	ldr	r4, [r0, #12]
    6fd0:	e7e2      	b.n	6f98 <SPIClass::beginTransaction(SPISettings)+0xb0>
    6fd2:	2400      	movs	r4, #0
    6fd4:	e7df      	b.n	6f96 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    6fd6:	2b02      	cmp	r3, #2
    6fd8:	d9fb      	bls.n	6fd2 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    6fda:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6fdc:	085a      	lsrs	r2, r3, #1
    6fde:	0214      	lsls	r4, r2, #8
    6fe0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    6fe4:	431c      	orrs	r4, r3
    6fe6:	e7d6      	b.n	6f96 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    6fe8:	461a      	mov	r2, r3
    6fea:	e7e4      	b.n	6fb6 <SPIClass::beginTransaction(SPISettings)+0xce>
    6fec:	400fc000 	.word	0x400fc000
    6ff0:	2000086c 	.word	0x2000086c
    6ff4:	007f7fff 	.word	0x007f7fff

00006ff8 <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    6ff8:	b508      	push	{r3, lr}
    6ffa:	4603      	mov	r3, r0
    6ffc:	f853 0b04 	ldr.w	r0, [r3], #4
    7000:	e893 0006 	ldmia.w	r3, {r1, r2}
    7004:	f7ff ff70 	bl	6ee8 <SPIClass::beginTransaction(SPISettings)>
    7008:	bd08      	pop	{r3, pc}
    700a:	bf00      	nop

0000700c <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    700c:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    700e:	7cd3      	ldrb	r3, [r2, #19]
    7010:	b313      	cbz	r3, 7058 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    7012:	07d8      	lsls	r0, r3, #31
    7014:	d504      	bpl.n	7020 <SdSpiArduinoDriver::deactivate()+0x14>
    7016:	6a90      	ldr	r0, [r2, #40]	; 0x28
    7018:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    701c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    7020:	0799      	lsls	r1, r3, #30
    7022:	d504      	bpl.n	702e <SdSpiArduinoDriver::deactivate()+0x22>
    7024:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    7026:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    702a:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    702e:	0758      	lsls	r0, r3, #29
    7030:	d504      	bpl.n	703c <SdSpiArduinoDriver::deactivate()+0x30>
    7032:	6b10      	ldr	r0, [r2, #48]	; 0x30
    7034:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7038:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    703c:	0719      	lsls	r1, r3, #28
    703e:	d504      	bpl.n	704a <SdSpiArduinoDriver::deactivate()+0x3e>
    7040:	6b50      	ldr	r0, [r2, #52]	; 0x34
    7042:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7046:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    704a:	06db      	lsls	r3, r3, #27
    704c:	d504      	bpl.n	7058 <SdSpiArduinoDriver::deactivate()+0x4c>
    704e:	6b92      	ldr	r2, [r2, #56]	; 0x38
    7050:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7054:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    7058:	4770      	bx	lr
    705a:	bf00      	nop

0000705c <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    705c:	6800      	ldr	r0, [r0, #0]
    705e:	f000 b9d7 	b.w	7410 <SPIClass::end()>
    7062:	bf00      	nop

00007064 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7064:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    7066:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7068:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    706a:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    706c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    706e:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    7072:	d0fb      	beq.n	706c <SdSpiArduinoDriver::receive()+0x8>
    7074:	6f50      	ldr	r0, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    7076:	b2c0      	uxtb	r0, r0
    7078:	4770      	bx	lr
    707a:	bf00      	nop

0000707c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    707c:	b530      	push	{r4, r5, lr}
    707e:	460c      	mov	r4, r1
    7080:	b083      	sub	sp, #12
    7082:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    7084:	21ff      	movs	r1, #255	; 0xff
    7086:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    7088:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    708a:	f004 fcbf 	bl	ba0c <memset>
		transfer(buf, buf, count);
    708e:	6828      	ldr	r0, [r5, #0]
    7090:	9b01      	ldr	r3, [sp, #4]
    7092:	4622      	mov	r2, r4
    7094:	4621      	mov	r1, r4
    7096:	f000 f9b7 	bl	7408 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    709a:	2000      	movs	r0, #0
    709c:	b003      	add	sp, #12
    709e:	bd30      	pop	{r4, r5, pc}

000070a0 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    70a0:	6803      	ldr	r3, [r0, #0]
    70a2:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    70a4:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    70a6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    70a8:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    70ac:	d0fb      	beq.n	70a6 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    70ae:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    70b0:	4770      	bx	lr
    70b2:	bf00      	nop

000070b4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    70b4:	1e53      	subs	r3, r2, #1
    70b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    70ba:	b530      	push	{r4, r5, lr}
    70bc:	4614      	mov	r4, r2
    70be:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    70c2:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    70c4:	d311      	bcc.n	70ea <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    70c6:	b16a      	cbz	r2, 70e4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    70c8:	6803      	ldr	r3, [r0, #0]
    70ca:	1e48      	subs	r0, r1, #1
    70cc:	6819      	ldr	r1, [r3, #0]
    70ce:	1882      	adds	r2, r0, r2
		port().TDR = data;
    70d0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    70d4:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    70d6:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    70d8:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    70dc:	d0fb      	beq.n	70d6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    70de:	4290      	cmp	r0, r2
    70e0:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    70e2:	d1f5      	bne.n	70d0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    70e4:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    70e8:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    70ea:	4668      	mov	r0, sp
    70ec:	f000 ffc2 	bl	8074 <memcpy>
		transfer(buf, buf, count);
    70f0:	466a      	mov	r2, sp
    70f2:	4623      	mov	r3, r4
    70f4:	6828      	ldr	r0, [r5, #0]
    70f6:	4611      	mov	r1, r2
    70f8:	f000 f986 	bl	7408 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    70fc:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    7100:	bd30      	pop	{r4, r5, pc}
    7102:	bf00      	nop

00007104 <FsCache::sync()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    7104:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    7106:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    7108:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    710a:	07dc      	lsls	r4, r3, #31
    710c:	d51d      	bpl.n	714a <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    710e:	4604      	mov	r4, r0
    7110:	6840      	ldr	r0, [r0, #4]
    7112:	f104 0210 	add.w	r2, r4, #16
    7116:	6803      	ldr	r3, [r0, #0]
    7118:	68a1      	ldr	r1, [r4, #8]
    711a:	9201      	str	r2, [sp, #4]
    711c:	6a1b      	ldr	r3, [r3, #32]
    711e:	4798      	blx	r3
    7120:	9a01      	ldr	r2, [sp, #4]
    7122:	4605      	mov	r5, r0
    7124:	b1a8      	cbz	r0, 7152 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    7126:	7823      	ldrb	r3, [r4, #0]
    7128:	0799      	lsls	r1, r3, #30
    712a:	d508      	bpl.n	713e <FsCache::sync()+0x3a>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    712c:	68e3      	ldr	r3, [r4, #12]
    712e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    7132:	4419      	add	r1, r3
    7134:	6803      	ldr	r3, [r0, #0]
    7136:	6a1b      	ldr	r3, [r3, #32]
    7138:	4798      	blx	r3
    713a:	b150      	cbz	r0, 7152 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    713c:	7823      	ldrb	r3, [r4, #0]
    713e:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    7142:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    7144:	7023      	strb	r3, [r4, #0]
}
    7146:	b003      	add	sp, #12
    7148:	bd30      	pop	{r4, r5, pc}
  return true;
    714a:	2501      	movs	r5, #1
}
    714c:	4628      	mov	r0, r5
    714e:	b003      	add	sp, #12
    7150:	bd30      	pop	{r4, r5, pc}
  return false;
    7152:	2500      	movs	r5, #0
}
    7154:	4628      	mov	r0, r5
    7156:	b003      	add	sp, #12
    7158:	bd30      	pop	{r4, r5, pc}
    715a:	bf00      	nop

0000715c <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    715e:	6843      	ldr	r3, [r0, #4]
    7160:	b30b      	cbz	r3, 71a6 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    7162:	6883      	ldr	r3, [r0, #8]
    7164:	4604      	mov	r4, r0
    7166:	460f      	mov	r7, r1
    7168:	4615      	mov	r5, r2
    716a:	428b      	cmp	r3, r1
    716c:	d106      	bne.n	717c <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    716e:	f810 3b10 	ldrb.w	r3, [r0], #16
    7172:	f005 0503 	and.w	r5, r5, #3
    7176:	432b      	orrs	r3, r5
    7178:	7023      	strb	r3, [r4, #0]
}
    717a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    717c:	f7ff ffc2 	bl	7104 <FsCache::sync()>
    7180:	b188      	cbz	r0, 71a6 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    7182:	076b      	lsls	r3, r5, #29
    7184:	d505      	bpl.n	7192 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    7186:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    718a:	4630      	mov	r0, r6
    m_sector = sector;
    718c:	2300      	movs	r3, #0
    718e:	60a7      	str	r7, [r4, #8]
    7190:	e7ef      	b.n	7172 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    7192:	6860      	ldr	r0, [r4, #4]
    7194:	f104 0610 	add.w	r6, r4, #16
    7198:	4639      	mov	r1, r7
    719a:	6803      	ldr	r3, [r0, #0]
    719c:	4632      	mov	r2, r6
    719e:	691b      	ldr	r3, [r3, #16]
    71a0:	4798      	blx	r3
    71a2:	2800      	cmp	r0, #0
    71a4:	d1f1      	bne.n	718a <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    71a6:	2000      	movs	r0, #0
}
    71a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71aa:	bf00      	nop

000071ac <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    71ac:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    71b0:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    71b2:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    71b6:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    71b8:	d101      	bne.n	71be <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    71ba:	6883      	ldr	r3, [r0, #8]
    71bc:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    71be:	f000 bafb 	b.w	77b8 <EventResponder::triggerEventNotImmediate()>
    71c2:	bf00      	nop

000071c4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    71c4:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    71c6:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    71c8:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    71cc:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    71ce:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    71d0:	b1a3      	cbz	r3, 71fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    71d2:	b321      	cbz	r1, 721e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    71d4:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    71d8:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    71da:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    71dc:	6f25      	ldr	r5, [r4, #112]	; 0x70
    71de:	07af      	lsls	r7, r5, #30
    71e0:	d407      	bmi.n	71f2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    71e2:	4615      	mov	r5, r2
				count_read--;
    71e4:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    71e6:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    71e8:	b11a      	cbz	r2, 71f2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    71ea:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    71ee:	462a      	mov	r2, r5
    71f0:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    71f2:	6965      	ldr	r5, [r4, #20]
    71f4:	07ed      	lsls	r5, r5, #31
    71f6:	d5f1      	bpl.n	71dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    71f8:	2b00      	cmp	r3, #0
    71fa:	d1ea      	bne.n	71d2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    71fc:	b16e      	cbz	r6, 721a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    71fe:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7200:	6f19      	ldr	r1, [r3, #112]	; 0x70
    7202:	0789      	lsls	r1, r1, #30
    7204:	d4fa      	bmi.n	71fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    7206:	4611      	mov	r1, r2
			count_read--;
    7208:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    720a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    720c:	2a00      	cmp	r2, #0
    720e:	d0f5      	beq.n	71fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    7210:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    7214:	460a      	mov	r2, r1
	while (count_read) {
    7216:	2e00      	cmp	r6, #0
    7218:	d1f1      	bne.n	71fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    721a:	bcf0      	pop	{r4, r5, r6, r7}
    721c:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    721e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    7222:	e7d9      	b.n	71d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00007224 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    7224:	4b32      	ldr	r3, [pc, #200]	; (72f0 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    7226:	4933      	ldr	r1, [pc, #204]	; (72f4 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7228:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    722a:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    722e:	7920      	ldrb	r0, [r4, #4]
    7230:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    7232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    7234:	f895 c004 	ldrb.w	ip, [r5, #4]
    7238:	f881 c01c 	strb.w	ip, [r1, #28]
    723c:	7708      	strb	r0, [r1, #28]
    723e:	b152      	cbz	r2, 7256 <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    7240:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    7244:	d323      	bcc.n	728e <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    7246:	492c      	ldr	r1, [pc, #176]	; (72f8 <_spi_dma_rxISR1()+0xd4>)
    7248:	4411      	add	r1, r2
		DMA_SERQ = channel;
    724a:	4a2a      	ldr	r2, [pc, #168]	; (72f4 <_spi_dma_rxISR1()+0xd0>)
    724c:	6419      	str	r1, [r3, #64]	; 0x40
    724e:	76d0      	strb	r0, [r2, #27]
    7250:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7254:	bd30      	pop	{r4, r5, pc}
    7256:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7258:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    725a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    725c:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    725e:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    7262:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7264:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    7266:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    726a:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    726c:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    726e:	6804      	ldr	r4, [r0, #0]
    7270:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7272:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    7276:	4b21      	ldr	r3, [pc, #132]	; (72fc <_spi_dma_rxISR1()+0xd8>)
    7278:	429c      	cmp	r4, r3
    727a:	d126      	bne.n	72ca <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    727c:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    727e:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    7280:	2b02      	cmp	r3, #2
		_data = data;
    7282:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7284:	d126      	bne.n	72d4 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    7286:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    728c:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    728e:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7290:	8be9      	ldrh	r1, [r5, #30]
    7292:	0409      	lsls	r1, r1, #16
    7294:	d422      	bmi.n	72dc <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    7296:	b292      	uxth	r2, r2
    7298:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    729a:	6821      	ldr	r1, [r4, #0]
    729c:	8bec      	ldrh	r4, [r5, #30]
    729e:	b2a4      	uxth	r4, r4
    72a0:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    72a2:	8bcc      	ldrh	r4, [r1, #30]
    72a4:	0424      	lsls	r4, r4, #16
    72a6:	d505      	bpl.n	72b4 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    72a8:	8bcc      	ldrh	r4, [r1, #30]
    72aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
    72ae:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    72b2:	4322      	orrs	r2, r4
    72b4:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    72b6:	8bca      	ldrh	r2, [r1, #30]
    72b8:	b292      	uxth	r2, r2
    72ba:	82ca      	strh	r2, [r1, #22]
    72bc:	2100      	movs	r1, #0
    72be:	4a0d      	ldr	r2, [pc, #52]	; (72f4 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    72c0:	6419      	str	r1, [r3, #64]	; 0x40
    72c2:	76d0      	strb	r0, [r2, #27]
    72c4:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    72c8:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    72ca:	4623      	mov	r3, r4
    72cc:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    72ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    72d2:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    72d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    72d8:	f000 ba6e 	b.w	77b8 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    72dc:	8be9      	ldrh	r1, [r5, #30]
    72de:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    72e2:	b292      	uxth	r2, r2
    72e4:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    72e8:	ea41 010e 	orr.w	r1, r1, lr
    72ec:	83e9      	strh	r1, [r5, #30]
    72ee:	e7d4      	b.n	729a <_spi_dma_rxISR1()+0x76>
    72f0:	2000c0d8 	.word	0x2000c0d8
    72f4:	400e8000 	.word	0x400e8000
    72f8:	ffff8001 	.word	0xffff8001
    72fc:	000071ad 	.word	0x000071ad

00007300 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    7300:	4b32      	ldr	r3, [pc, #200]	; (73cc <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    7302:	4933      	ldr	r1, [pc, #204]	; (73d0 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7304:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    7306:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    730a:	7920      	ldrb	r0, [r4, #4]
    730c:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    730e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    7310:	f895 c004 	ldrb.w	ip, [r5, #4]
    7314:	f881 c01c 	strb.w	ip, [r1, #28]
    7318:	7708      	strb	r0, [r1, #28]
    731a:	b152      	cbz	r2, 7332 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    731c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    7320:	d323      	bcc.n	736a <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    7322:	492c      	ldr	r1, [pc, #176]	; (73d4 <_spi_dma_rxISR0()+0xd4>)
    7324:	4411      	add	r1, r2
		DMA_SERQ = channel;
    7326:	4a2a      	ldr	r2, [pc, #168]	; (73d0 <_spi_dma_rxISR0()+0xd0>)
    7328:	6419      	str	r1, [r3, #64]	; 0x40
    732a:	76d0      	strb	r0, [r2, #27]
    732c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7330:	bd30      	pop	{r4, r5, pc}
    7332:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7334:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    7336:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7338:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    733a:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    733e:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7340:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    7342:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    7346:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7348:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    734a:	6804      	ldr	r4, [r0, #0]
    734c:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    734e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    7352:	4b21      	ldr	r3, [pc, #132]	; (73d8 <_spi_dma_rxISR0()+0xd8>)
    7354:	429c      	cmp	r4, r3
    7356:	d126      	bne.n	73a6 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    7358:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    735a:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    735c:	2b02      	cmp	r3, #2
		_data = data;
    735e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7360:	d126      	bne.n	73b0 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    7362:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    7368:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    736a:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    736c:	8be9      	ldrh	r1, [r5, #30]
    736e:	0409      	lsls	r1, r1, #16
    7370:	d422      	bmi.n	73b8 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    7372:	b292      	uxth	r2, r2
    7374:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    7376:	6821      	ldr	r1, [r4, #0]
    7378:	8bec      	ldrh	r4, [r5, #30]
    737a:	b2a4      	uxth	r4, r4
    737c:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    737e:	8bcc      	ldrh	r4, [r1, #30]
    7380:	0424      	lsls	r4, r4, #16
    7382:	d505      	bpl.n	7390 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7384:	8bcc      	ldrh	r4, [r1, #30]
    7386:	f3c2 0208 	ubfx	r2, r2, #0, #9
    738a:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    738e:	4322      	orrs	r2, r4
    7390:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    7392:	8bca      	ldrh	r2, [r1, #30]
    7394:	b292      	uxth	r2, r2
    7396:	82ca      	strh	r2, [r1, #22]
    7398:	2100      	movs	r1, #0
    739a:	4a0d      	ldr	r2, [pc, #52]	; (73d0 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    739c:	6419      	str	r1, [r3, #64]	; 0x40
    739e:	76d0      	strb	r0, [r2, #27]
    73a0:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    73a4:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    73a6:	4623      	mov	r3, r4
    73a8:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    73aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    73ae:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    73b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    73b4:	f000 ba00 	b.w	77b8 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    73b8:	8be9      	ldrh	r1, [r5, #30]
    73ba:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    73be:	b292      	uxth	r2, r2
    73c0:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    73c4:	ea41 010e 	orr.w	r1, r1, lr
    73c8:	83e9      	strh	r1, [r5, #30]
    73ca:	e7d4      	b.n	7376 <_spi_dma_rxISR0()+0x76>
    73cc:	2000c088 	.word	0x2000c088
    73d0:	400e8000 	.word	0x400e8000
    73d4:	ffff8001 	.word	0xffff8001
    73d8:	000071ad 	.word	0x000071ad

000073dc <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    73dc:	2300      	movs	r3, #0
    73de:	e9c0 1200 	strd	r1, r2, [r0]
    73e2:	e9c0 3302 	strd	r3, r3, [r0, #8]
    73e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
    73ea:	e9c0 3306 	strd	r3, r3, [r0, #24]
    73ee:	e9c0 3308 	strd	r3, r3, [r0, #32]
    73f2:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    73f6:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    73fa:	6383      	str	r3, [r0, #56]	; 0x38
    73fc:	8783      	strh	r3, [r0, #60]	; 0x3c
    73fe:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    7402:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    7406:	4770      	bx	lr

00007408 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    7408:	b10b      	cbz	r3, 740e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    740a:	f7ff bedb 	b.w	71c4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    740e:	4770      	bx	lr

00007410 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    7410:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7412:	e9d3 1200 	ldrd	r1, r2, [r3]
    7416:	6809      	ldr	r1, [r1, #0]
    7418:	4211      	tst	r1, r2
    741a:	d100      	bne.n	741e <SPIClass::end()+0xe>
    741c:	4770      	bx	lr
void SPIClass::end() {
    741e:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7420:	6802      	ldr	r2, [r0, #0]
    7422:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    7424:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    7426:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    7428:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    742a:	7c22      	ldrb	r2, [r4, #16]
    742c:	4413      	add	r3, r2
    742e:	7c18      	ldrb	r0, [r3, #16]
    7430:	f000 fde0 	bl	7ff4 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    7434:	7c62      	ldrb	r2, [r4, #17]
    7436:	6863      	ldr	r3, [r4, #4]
    7438:	2105      	movs	r1, #5
    743a:	4413      	add	r3, r2
    743c:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    7440:	f000 fdd8 	bl	7ff4 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    7444:	6863      	ldr	r3, [r4, #4]
    7446:	7ca2      	ldrb	r2, [r4, #18]
    7448:	2105      	movs	r1, #5
    744a:	4413      	add	r3, r2
}
    744c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    7450:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    7454:	f000 bdce 	b.w	7ff4 <pinMode>

00007458 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    7458:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    745a:	4a08      	ldr	r2, [pc, #32]	; (747c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    745c:	4908      	ldr	r1, [pc, #32]	; (7480 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    745e:	4809      	ldr	r0, [pc, #36]	; (7484 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    7460:	f7ff ffbc 	bl	73dc <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    7464:	4a08      	ldr	r2, [pc, #32]	; (7488 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    7466:	4909      	ldr	r1, [pc, #36]	; (748c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    7468:	4809      	ldr	r0, [pc, #36]	; (7490 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    746a:	f7ff ffb7 	bl	73dc <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    746e:	4a09      	ldr	r2, [pc, #36]	; (7494 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    7470:	4909      	ldr	r1, [pc, #36]	; (7498 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    7472:	480a      	ldr	r0, [pc, #40]	; (749c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    7474:	f7ff ffb2 	bl	73dc <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    7478:	bd08      	pop	{r3, pc}
    747a:	bf00      	nop
    747c:	20000674 	.word	0x20000674
    7480:	403a0000 	.word	0x403a0000
    7484:	2000c088 	.word	0x2000c088
    7488:	20000604 	.word	0x20000604
    748c:	4039c000 	.word	0x4039c000
    7490:	2000c0d8 	.word	0x2000c0d8
    7494:	20000594 	.word	0x20000594
    7498:	40394000 	.word	0x40394000
    749c:	2000c128 	.word	0x2000c128

000074a0 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    74a0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    74a4:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    74a8:	1a10      	subs	r0, r2, r0
    74aa:	4770      	bx	lr

000074ac <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    74ac:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    74b0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    74b4:	429a      	cmp	r2, r3
    74b6:	d905      	bls.n	74c4 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    74b8:	1c5a      	adds	r2, r3, #1
    74ba:	4403      	add	r3, r0
    74bc:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    74c0:	7e98      	ldrb	r0, [r3, #26]
    74c2:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    74c4:	f04f 30ff 	mov.w	r0, #4294967295
	}
    74c8:	4770      	bx	lr
    74ca:	bf00      	nop

000074cc <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    74cc:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    74d0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    74d4:	429a      	cmp	r2, r3
    74d6:	d902      	bls.n	74de <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    74d8:	4418      	add	r0, r3
    74da:	7e80      	ldrb	r0, [r0, #26]
    74dc:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    74de:	f04f 30ff 	mov.w	r0, #4294967295
	}
    74e2:	4770      	bx	lr

000074e4 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    74e4:	4770      	bx	lr
    74e6:	bf00      	nop

000074e8 <TwoWire::write(unsigned char)>:
{
    74e8:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    74ea:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    74ee:	b178      	cbz	r0, 7510 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    74f0:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    74f4:	2a88      	cmp	r2, #136	; 0x88
    74f6:	d903      	bls.n	7500 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    74f8:	2201      	movs	r2, #1
			return 0;
    74fa:	2000      	movs	r0, #0
    74fc:	605a      	str	r2, [r3, #4]
    74fe:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    7500:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    7504:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    7506:	441a      	add	r2, r3
    7508:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    750c:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    7510:	4770      	bx	lr
    7512:	bf00      	nop

00007514 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    7514:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    7516:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    751a:	b90c      	cbnz	r4, 7520 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    751c:	4620      	mov	r0, r4
    751e:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    7520:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    7524:	4605      	mov	r5, r0
    7526:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    752a:	42a2      	cmp	r2, r4
    752c:	d80d      	bhi.n	754a <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    752e:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    7530:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    7534:	4622      	mov	r2, r4
    7536:	4418      	add	r0, r3
    7538:	f000 fd9c 	bl	8074 <memcpy>
		txBufferLength += quantity;
    753c:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    7540:	4620      	mov	r0, r4
		txBufferLength += quantity;
    7542:	4423      	add	r3, r4
    7544:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    7548:	bd38      	pop	{r3, r4, r5, pc}
    754a:	2201      	movs	r2, #1
    754c:	6042      	str	r2, [r0, #4]
    754e:	e7ef      	b.n	7530 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00007550 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    7550:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    7552:	2500      	movs	r5, #0
    7554:	4613      	mov	r3, r2
    7556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    755a:	4604      	mov	r4, r0
    755c:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
    7560:	4815      	ldr	r0, [pc, #84]	; (75b8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    7562:	2288      	movs	r2, #136	; 0x88
    7564:	6121      	str	r1, [r4, #16]
    7566:	4629      	mov	r1, r5
    7568:	6020      	str	r0, [r4, #0]
    756a:	f104 001a 	add.w	r0, r4, #26
    756e:	6163      	str	r3, [r4, #20]
    7570:	7325      	strb	r5, [r4, #12]
    7572:	7625      	strb	r5, [r4, #24]
    7574:	7665      	strb	r5, [r4, #25]
    7576:	f004 fa49 	bl	ba0c <memset>
    757a:	2289      	movs	r2, #137	; 0x89
    757c:	4629      	mov	r1, r5
    757e:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    7582:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    7586:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    758a:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    758e:	f004 fa3d 	bl	ba0c <memset>
	}
    7592:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
    7594:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    7598:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    759c:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    75a0:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    75a4:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    75a8:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    75ac:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    75b0:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
    75b4:	bd38      	pop	{r3, r4, r5, pc}
    75b6:	bf00      	nop
    75b8:	200007dc 	.word	0x200007dc

000075bc <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    75bc:	6903      	ldr	r3, [r0, #16]
{
    75be:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    75c0:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
    75c4:	4604      	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    75c6:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    75ca:	d001      	beq.n	75d0 <TwoWire::isr()+0x14>
    75cc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    75d0:	07ae      	lsls	r6, r5, #30
    75d2:	d50b      	bpl.n	75ec <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    75d4:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    75d8:	0408      	lsls	r0, r1, #16
    75da:	d53e      	bpl.n	765a <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    75dc:	2200      	movs	r2, #0
    75de:	2001      	movs	r0, #1
    75e0:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    75e4:	4422      	add	r2, r4
    75e6:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    75ea:	7691      	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    75ec:	07ea      	lsls	r2, r5, #31
    75ee:	d510      	bpl.n	7612 <TwoWire::isr()+0x56>
		if (!transmitting) {
    75f0:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
    75f4:	b1f6      	cbz	r6, 7634 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    75f6:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
    75fa:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    75fe:	42b2      	cmp	r2, r6
    7600:	d927      	bls.n	7652 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    7602:	1c72      	adds	r2, r6, #1
    7604:	4426      	add	r6, r4
    7606:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    760a:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
    760e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    7612:	05ab      	lsls	r3, r5, #22
    7614:	d50d      	bpl.n	7632 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    7616:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    761a:	b118      	cbz	r0, 7624 <TwoWire::isr()+0x68>
    761c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7620:	b103      	cbz	r3, 7624 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    7622:	4798      	blx	r3
		}
		rxBufferIndex = 0;
    7624:	2300      	movs	r3, #0
    7626:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    762a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    762e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
	}
}
    7632:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    7634:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    7638:	b10a      	cbz	r2, 763e <TwoWire::isr()+0x82>
				(*user_onRequest)();
    763a:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    763c:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    763e:	2200      	movs	r2, #0
    7640:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    7644:	2201      	movs	r2, #1
    7646:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    764a:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    764e:	42b2      	cmp	r2, r6
    7650:	d8d7      	bhi.n	7602 <TwoWire::isr()+0x46>
			port->STDR = 0;
    7652:	2200      	movs	r2, #0
    7654:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    7658:	e7db      	b.n	7612 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    765a:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    765e:	2a87      	cmp	r2, #135	; 0x87
    7660:	d8c4      	bhi.n	75ec <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    7662:	1c50      	adds	r0, r2, #1
    7664:	b2c0      	uxtb	r0, r0
    7666:	e7bd      	b.n	75e4 <TwoWire::isr()+0x28>

00007668 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    7668:	4801      	ldr	r0, [pc, #4]	; (7670 <lpi2c1_isr()+0x8>)
    766a:	f7ff bfa7 	b.w	75bc <TwoWire::isr()>
    766e:	bf00      	nop
    7670:	2000c17c 	.word	0x2000c17c

00007674 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    7674:	4801      	ldr	r0, [pc, #4]	; (767c <lpi2c3_isr()+0x8>)
    7676:	f7ff bfa1 	b.w	75bc <TwoWire::isr()>
    767a:	bf00      	nop
    767c:	2000c2bc 	.word	0x2000c2bc

00007680 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    7680:	4801      	ldr	r0, [pc, #4]	; (7688 <lpi2c4_isr()+0x8>)
    7682:	f7ff bf9b 	b.w	75bc <TwoWire::isr()>
    7686:	bf00      	nop
    7688:	2000c3fc 	.word	0x2000c3fc

0000768c <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    768c:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    768e:	4c09      	ldr	r4, [pc, #36]	; (76b4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    7690:	4909      	ldr	r1, [pc, #36]	; (76b8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    7692:	4622      	mov	r2, r4
    7694:	4809      	ldr	r0, [pc, #36]	; (76bc <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    7696:	f7ff ff5b 	bl	7550 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    769a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    769e:	4908      	ldr	r1, [pc, #32]	; (76c0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    76a0:	4808      	ldr	r0, [pc, #32]	; (76c4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    76a2:	f7ff ff55 	bl	7550 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    76a6:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    76aa:	4907      	ldr	r1, [pc, #28]	; (76c8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    76ac:	4807      	ldr	r0, [pc, #28]	; (76cc <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    76ae:	f7ff ff4f 	bl	7550 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    76b2:	bd10      	pop	{r4, pc}
    76b4:	60002674 	.word	0x60002674
    76b8:	403f0000 	.word	0x403f0000
    76bc:	2000c17c 	.word	0x2000c17c
    76c0:	403f8000 	.word	0x403f8000
    76c4:	2000c2bc 	.word	0x2000c2bc
    76c8:	403fc000 	.word	0x403fc000
    76cc:	2000c3fc 	.word	0x2000c3fc

000076d0 <DMAChannel::begin(bool)>:
{
    76d0:	b430      	push	{r4, r5}
	__disable_irq();
    76d2:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    76d4:	b921      	cbnz	r1, 76e0 <DMAChannel::begin(bool)+0x10>
    76d6:	6803      	ldr	r3, [r0, #0]
    76d8:	b113      	cbz	r3, 76e0 <DMAChannel::begin(bool)+0x10>
    76da:	7902      	ldrb	r2, [r0, #4]
    76dc:	2a0f      	cmp	r2, #15
    76de:	d93b      	bls.n	7758 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    76e0:	4c24      	ldr	r4, [pc, #144]	; (7774 <DMAChannel::begin(bool)+0xa4>)
    76e2:	8821      	ldrh	r1, [r4, #0]
{
    76e4:	2300      	movs	r3, #0
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    76e6:	fa41 f203 	asr.w	r2, r1, r3
    76ea:	f012 0201 	ands.w	r2, r2, #1
    76ee:	d008      	beq.n	7702 <DMAChannel::begin(bool)+0x32>
		if (++ch >= DMA_MAX_CHANNELS) {
    76f0:	3301      	adds	r3, #1
    76f2:	2b10      	cmp	r3, #16
    76f4:	d1f7      	bne.n	76e6 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    76f6:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    76f8:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    76fa:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    76fc:	6002      	str	r2, [r0, #0]
}
    76fe:	bc30      	pop	{r4, r5}
    7700:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    7702:	f04f 0c01 	mov.w	ip, #1
    7706:	fa0c fc03 	lsl.w	ip, ip, r3
    770a:	ea41 010c 	orr.w	r1, r1, ip
    770e:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    7710:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7712:	4919      	ldr	r1, [pc, #100]	; (7778 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    7714:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    7718:	4c18      	ldr	r4, [pc, #96]	; (777c <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    771a:	4419      	add	r1, r3
	channel = ch;
    771c:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7720:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    7722:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    7724:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    7728:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    772a:	f240 4482 	movw	r4, #1154	; 0x482
    772e:	4914      	ldr	r1, [pc, #80]	; (7780 <DMAChannel::begin(bool)+0xb0>)
    7730:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    7732:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    7736:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    773a:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    773e:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7742:	6003      	str	r3, [r0, #0]
}
    7744:	bc30      	pop	{r4, r5}
	*p++ = 0;
    7746:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    774a:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    774e:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    7752:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    7756:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    7758:	4c06      	ldr	r4, [pc, #24]	; (7774 <DMAChannel::begin(bool)+0xa4>)
    775a:	8821      	ldrh	r1, [r4, #0]
    775c:	fa41 f502 	asr.w	r5, r1, r2
    7760:	07ed      	lsls	r5, r5, #31
    7762:	d5bf      	bpl.n	76e4 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    7764:	4d04      	ldr	r5, [pc, #16]	; (7778 <DMAChannel::begin(bool)+0xa8>)
    7766:	4415      	add	r5, r2
    7768:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    776c:	d1ba      	bne.n	76e4 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    776e:	b662      	cpsie	i
		return;
    7770:	e7c5      	b.n	76fe <DMAChannel::begin(bool)+0x2e>
    7772:	bf00      	nop
    7774:	2002b48a 	.word	0x2002b48a
    7778:	02007480 	.word	0x02007480
    777c:	400fc000 	.word	0x400fc000
    7780:	400e8000 	.word	0x400e8000

00007784 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
    7784:	7903      	ldrb	r3, [r0, #4]
    7786:	2b0f      	cmp	r3, #15
    7788:	d811      	bhi.n	77ae <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    778a:	4a09      	ldr	r2, [pc, #36]	; (77b0 <DMAChannel::release()+0x2c>)
    778c:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    778e:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    7790:	4908      	ldr	r1, [pc, #32]	; (77b4 <DMAChannel::release()+0x30>)
    7792:	2201      	movs	r2, #1
    7794:	f890 c004 	ldrb.w	ip, [r0, #4]
    7798:	880b      	ldrh	r3, [r1, #0]
    779a:	fa02 f20c 	lsl.w	r2, r2, ip
    779e:	ea23 0302 	bic.w	r3, r3, r2
    77a2:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    77a4:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    77a6:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    77a8:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    77aa:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    77ac:	6003      	str	r3, [r0, #0]
}
    77ae:	4770      	bx	lr
    77b0:	400e8000 	.word	0x400e8000
    77b4:	2002b48a 	.word	0x2002b48a

000077b8 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    77b8:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    77bc:	b672      	cpsid	i
	if (_triggered == false) {
    77be:	7f43      	ldrb	r3, [r0, #29]
    77c0:	b95b      	cbnz	r3, 77da <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    77c2:	7f01      	ldrb	r1, [r0, #28]
    77c4:	2901      	cmp	r1, #1
{
    77c6:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    77c8:	d00b      	beq.n	77e2 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    77ca:	2903      	cmp	r1, #3
    77cc:	d013      	beq.n	77f6 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    77ce:	2301      	movs	r3, #1
    77d0:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    77d2:	b902      	cbnz	r2, 77d6 <EventResponder::triggerEventNotImmediate()+0x1e>
    77d4:	b662      	cpsie	i
}
    77d6:	bc30      	pop	{r4, r5}
    77d8:	4770      	bx	lr
    77da:	b90a      	cbnz	r2, 77e0 <EventResponder::triggerEventNotImmediate()+0x28>
    77dc:	b662      	cpsie	i
    77de:	4770      	bx	lr
    77e0:	4770      	bx	lr
			if (firstYield == nullptr) {
    77e2:	4c12      	ldr	r4, [pc, #72]	; (782c <EventResponder::triggerEventNotImmediate()+0x74>)
    77e4:	6821      	ldr	r1, [r4, #0]
    77e6:	b1b1      	cbz	r1, 7816 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    77e8:	4911      	ldr	r1, [pc, #68]	; (7830 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    77ea:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    77ec:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    77ee:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    77f0:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    77f2:	6158      	str	r0, [r3, #20]
				lastYield = this;
    77f4:	e7eb      	b.n	77ce <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    77f6:	4d0f      	ldr	r5, [pc, #60]	; (7834 <EventResponder::triggerEventNotImmediate()+0x7c>)
    77f8:	490f      	ldr	r1, [pc, #60]	; (7838 <EventResponder::triggerEventNotImmediate()+0x80>)
    77fa:	682c      	ldr	r4, [r5, #0]
    77fc:	b18c      	cbz	r4, 7822 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    77fe:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    7800:	680b      	ldr	r3, [r1, #0]
    7802:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    7804:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    7806:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    780a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    780e:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    7810:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    7814:	e7db      	b.n	77ce <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    7816:	4b06      	ldr	r3, [pc, #24]	; (7830 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    7818:	6020      	str	r0, [r4, #0]
				lastYield = this;
    781a:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    781c:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    7820:	e7d5      	b.n	77ce <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    7822:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    7826:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    7828:	e7ed      	b.n	7806 <EventResponder::triggerEventNotImmediate()+0x4e>
    782a:	bf00      	nop
    782c:	2002a874 	.word	0x2002a874
    7830:	2002a880 	.word	0x2002a880
    7834:	2002a87c 	.word	0x2002a87c
    7838:	2002a878 	.word	0x2002a878

0000783c <EventResponder::runFromInterrupt()>:
{
    783c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    783e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7842:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    7844:	4c0c      	ldr	r4, [pc, #48]	; (7878 <EventResponder::runFromInterrupt()+0x3c>)
    7846:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7848:	b180      	cbz	r0, 786c <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    784a:	4e0c      	ldr	r6, [pc, #48]	; (787c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    784c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    784e:	6943      	ldr	r3, [r0, #20]
    7850:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    7852:	b173      	cbz	r3, 7872 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    7854:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    7856:	b902      	cbnz	r2, 785a <EventResponder::runFromInterrupt()+0x1e>
    7858:	b662      	cpsie	i
			(*(first->_function))(*first);
    785a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    785c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    785e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7860:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7864:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    7866:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7868:	2800      	cmp	r0, #0
    786a:	d1f0      	bne.n	784e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    786c:	b902      	cbnz	r2, 7870 <EventResponder::runFromInterrupt()+0x34>
    786e:	b662      	cpsie	i
}
    7870:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    7872:	6033      	str	r3, [r6, #0]
    7874:	e7ef      	b.n	7856 <EventResponder::runFromInterrupt()+0x1a>
    7876:	bf00      	nop
    7878:	2002a87c 	.word	0x2002a87c
    787c:	2002a878 	.word	0x2002a878

00007880 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    7880:	f7ff bfdc 	b.w	783c <EventResponder::runFromInterrupt()>

00007884 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    7884:	4904      	ldr	r1, [pc, #16]	; (7898 <systick_isr+0x14>)
	systick_millis_count++;
    7886:	4a05      	ldr	r2, [pc, #20]	; (789c <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    7888:	6849      	ldr	r1, [r1, #4]
    788a:	4b05      	ldr	r3, [pc, #20]	; (78a0 <systick_isr+0x1c>)
    788c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    788e:	6813      	ldr	r3, [r2, #0]
    7890:	3301      	adds	r3, #1
    7892:	6013      	str	r3, [r2, #0]
}
    7894:	4770      	bx	lr
    7896:	bf00      	nop
    7898:	e0001000 	.word	0xe0001000
    789c:	2002b458 	.word	0x2002b458
    78a0:	2002b454 	.word	0x2002b454

000078a4 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    78a4:	4608      	mov	r0, r1
    78a6:	f001 bdc7 	b.w	9438 <usb_serial_putchar>
    78aa:	bf00      	nop

000078ac <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
    78ac:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    78ae:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    78b0:	bf08      	it	eq
    78b2:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    78b4:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
    78b6:	b391      	cbz	r1, 791e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
    78b8:	f04f 0e21 	mov.w	lr, #33	; 0x21
    78bc:	e001      	b.n	78c2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
    78be:	fa5f fe86 	uxtb.w	lr, r6
    78c2:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    78c6:	fbb1 f5f2 	udiv	r5, r1, r2
    78ca:	fb02 1415 	mls	r4, r2, r5, r1
    78ce:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    78d2:	2c09      	cmp	r4, #9
    78d4:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    78d8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    78dc:	bf98      	it	ls
    78de:	fa5f f48c 	uxtbls.w	r4, ip
    78e2:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    78e6:	bf88      	it	hi
    78e8:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    78ea:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    78ec:	44ec      	add	ip, sp
			n /= base;
    78ee:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    78f0:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    78f4:	d2e3      	bcs.n	78be <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    78f6:	b14b      	cbz	r3, 790c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    78f8:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    78fc:	222d      	movs	r2, #45	; 0x2d
		i--;
    78fe:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    7902:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    7906:	446b      	add	r3, sp
    7908:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    790c:	6803      	ldr	r3, [r0, #0]
    790e:	a901      	add	r1, sp, #4
    7910:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    7914:	685b      	ldr	r3, [r3, #4]
    7916:	4471      	add	r1, lr
    7918:	4798      	blx	r3
}
    791a:	b00a      	add	sp, #40	; 0x28
    791c:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    791e:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    7920:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    7924:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    7928:	e7e5      	b.n	78f6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    792a:	bf00      	nop

0000792c <Print::print(long)>:
	if (n < 0) {
    792c:	2900      	cmp	r1, #0
    792e:	db03      	blt.n	7938 <Print::print(long)+0xc>
	uint8_t sign=0;
    7930:	2300      	movs	r3, #0
	if (base == 0) {
    7932:	220a      	movs	r2, #10
    7934:	f7ff bfba 	b.w	78ac <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    7938:	4249      	negs	r1, r1
		sign = '-';
    793a:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    793c:	220a      	movs	r2, #10
    793e:	f7ff bfb5 	b.w	78ac <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7942:	bf00      	nop

00007944 <Print::println()>:
{
    7944:	b500      	push	{lr}
	return write(buf, 2);
    7946:	6803      	ldr	r3, [r0, #0]
{
    7948:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    794a:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    794e:	2202      	movs	r2, #2
    7950:	a901      	add	r1, sp, #4
    7952:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    7954:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    7958:	4798      	blx	r3
}
    795a:	b003      	add	sp, #12
    795c:	f85d fb04 	ldr.w	pc, [sp], #4

00007960 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7960:	4b05      	ldr	r3, [pc, #20]	; (7978 <_write+0x18>)
    7962:	2802      	cmp	r0, #2
    7964:	bf88      	it	hi
    7966:	4603      	movhi	r3, r0
{
    7968:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    796a:	681c      	ldr	r4, [r3, #0]
    796c:	4618      	mov	r0, r3
    796e:	6863      	ldr	r3, [r4, #4]
}
    7970:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7974:	4718      	bx	r3
    7976:	bf00      	nop
    7978:	200085c4 	.word	0x200085c4

0000797c <Print::printf(char const*, ...)>:
{
    797c:	b40e      	push	{r1, r2, r3}
    797e:	b500      	push	{lr}
    7980:	b082      	sub	sp, #8
    7982:	aa03      	add	r2, sp, #12
    7984:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    7988:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    798a:	f003 ff53 	bl	b834 <vdprintf>
}
    798e:	b002      	add	sp, #8
    7990:	f85d eb04 	ldr.w	lr, [sp], #4
    7994:	b003      	add	sp, #12
    7996:	4770      	bx	lr

00007998 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    7998:	b95a      	cbnz	r2, 79b2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    799a:	6803      	ldr	r3, [r0, #0]
    799c:	b2c9      	uxtb	r1, r1
    799e:	4a07      	ldr	r2, [pc, #28]	; (79bc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    79a0:	681b      	ldr	r3, [r3, #0]
    79a2:	4293      	cmp	r3, r2
{
    79a4:	b500      	push	{lr}
    79a6:	d106      	bne.n	79b6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    79a8:	4608      	mov	r0, r1
}
    79aa:	f85d eb04 	ldr.w	lr, [sp], #4
    79ae:	f001 bd43 	b.w	9438 <usb_serial_putchar>
    79b2:	f7ff bf7b 	b.w	78ac <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    79b6:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    79ba:	4718      	bx	r3
    79bc:	000078a5 	.word	0x000078a5

000079c0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    79c0:	eeb4 0b40 	vcmp.f64	d0, d0
{
    79c4:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    79c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    79ca:	4605      	mov	r5, r0
    79cc:	ed2d 8b02 	vpush	{d8}
    79d0:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    79d2:	d67c      	bvs.n	7ace <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    79d4:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    79d8:	ed9f 6b47 	vldr	d6, [pc, #284]	; 7af8 <Print::printFloat(double, unsigned char)+0x138>
    79dc:	eeb4 7b46 	vcmp.f64	d7, d6
    79e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79e4:	dc6b      	bgt.n	7abe <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    79e6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 7b00 <Print::printFloat(double, unsigned char)+0x140>
    79ea:	eeb4 0bc7 	vcmpe.f64	d0, d7
    79ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79f2:	dc5a      	bgt.n	7aaa <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    79f4:	ed9f 7b44 	vldr	d7, [pc, #272]	; 7b08 <Print::printFloat(double, unsigned char)+0x148>
    79f8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    79fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a00:	d453      	bmi.n	7aaa <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    7a02:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    7a06:	460c      	mov	r4, r1
    7a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a0c:	d45b      	bmi.n	7ac6 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    7a0e:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    7a10:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    7a14:	2c00      	cmp	r4, #0
    7a16:	d05e      	beq.n	7ad6 <Print::printFloat(double, unsigned char)+0x116>
    7a18:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    7a1c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 7b10 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    7a20:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    7a24:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    7a28:	fa5f f28c 	uxtb.w	r2, ip
    7a2c:	42a2      	cmp	r2, r4
    7a2e:	d3f7      	bcc.n	7a20 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    7a30:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    7a34:	220a      	movs	r2, #10
    7a36:	4628      	mov	r0, r5
    7a38:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    7a3c:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    7a40:	ee17 1a90 	vmov	r1, s15
    7a44:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    7a48:	f7ff ff30 	bl	78ac <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7a4c:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    7a4e:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    7a52:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    7a56:	4606      	mov	r6, r0
		buf[0] = '.';
    7a58:	bf28      	it	cs
    7a5a:	240f      	movcs	r4, #15
    7a5c:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    7a60:	f10d 0309 	add.w	r3, sp, #9
    7a64:	aa02      	add	r2, sp, #8
    7a66:	1e61      	subs	r1, r4, #1
    7a68:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    7a6c:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    7a70:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    7a74:	edcd 7a01 	vstr	s15, [sp, #4]
    7a78:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    7a7c:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    7a80:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    7a82:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    7a86:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    7a8a:	4291      	cmp	r1, r2
			remainder -= n; 
    7a8c:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    7a90:	d1ec      	bne.n	7a6c <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    7a92:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    7a94:	3401      	adds	r4, #1
		count += write(buf, count);
    7a96:	a902      	add	r1, sp, #8
    7a98:	4628      	mov	r0, r5
    7a9a:	685b      	ldr	r3, [r3, #4]
    7a9c:	b2e2      	uxtb	r2, r4
    7a9e:	4798      	blx	r3
	}
	return count;
}
    7aa0:	4630      	mov	r0, r6
    7aa2:	b006      	add	sp, #24
    7aa4:	ecbd 8b02 	vpop	{d8}
    7aa8:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    7aaa:	682b      	ldr	r3, [r5, #0]
    7aac:	2203      	movs	r2, #3
    7aae:	491a      	ldr	r1, [pc, #104]	; (7b18 <Print::printFloat(double, unsigned char)+0x158>)
    7ab0:	685b      	ldr	r3, [r3, #4]
    7ab2:	b006      	add	sp, #24
    7ab4:	ecbd 8b02 	vpop	{d8}
    7ab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7abc:	4718      	bx	r3
    7abe:	6803      	ldr	r3, [r0, #0]
    7ac0:	2203      	movs	r2, #3
    7ac2:	4916      	ldr	r1, [pc, #88]	; (7b1c <Print::printFloat(double, unsigned char)+0x15c>)
    7ac4:	e7f4      	b.n	7ab0 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    7ac6:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    7aca:	2301      	movs	r3, #1
    7acc:	e7a0      	b.n	7a10 <Print::printFloat(double, unsigned char)+0x50>
    7ace:	6803      	ldr	r3, [r0, #0]
    7ad0:	2203      	movs	r2, #3
    7ad2:	4913      	ldr	r1, [pc, #76]	; (7b20 <Print::printFloat(double, unsigned char)+0x160>)
    7ad4:	e7ec      	b.n	7ab0 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    7ad6:	ee30 0b07 	vadd.f64	d0, d0, d7
    7ada:	220a      	movs	r2, #10
    7adc:	4628      	mov	r0, r5
    7ade:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    7ae2:	ee17 1a90 	vmov	r1, s15
}
    7ae6:	b006      	add	sp, #24
    7ae8:	ecbd 8b02 	vpop	{d8}
    7aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7af0:	f7ff bedc 	b.w	78ac <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7af4:	f3af 8000 	nop.w
    7af8:	ffffffff 	.word	0xffffffff
    7afc:	7fefffff 	.word	0x7fefffff
    7b00:	e0000000 	.word	0xe0000000
    7b04:	41efffff 	.word	0x41efffff
    7b08:	e0000000 	.word	0xe0000000
    7b0c:	c1efffff 	.word	0xc1efffff
    7b10:	9999999a 	.word	0x9999999a
    7b14:	3fb99999 	.word	0x3fb99999
    7b18:	20000590 	.word	0x20000590
    7b1c:	2000058c 	.word	0x2000058c
    7b20:	20000588 	.word	0x20000588

00007b24 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    7b24:	f001 bc78 	b.w	9418 <usb_serial_getchar>

00007b28 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    7b28:	f001 bc10 	b.w	934c <usb_serial_peekchar>

00007b2c <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    7b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    7b30:	b392      	cbz	r2, 7b98 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    7b32:	4617      	mov	r7, r2
    7b34:	fab3 f283 	clz	r2, r3
    7b38:	0952      	lsrs	r2, r2, #5
    7b3a:	b36b      	cbz	r3, 7b98 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    7b3c:	f1b3 0801 	subs.w	r8, r3, #1
    7b40:	d025      	beq.n	7b8e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7b42:	eb07 0a08 	add.w	sl, r7, r8
    7b46:	4683      	mov	fp, r0
    7b48:	4689      	mov	r9, r1
	size_t index = 0;
    7b4a:	4690      	mov	r8, r2
    7b4c:	4c17      	ldr	r4, [pc, #92]	; (7bac <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    7b4e:	4e18      	ldr	r6, [pc, #96]	; (7bb0 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    7b50:	6825      	ldr	r5, [r4, #0]
    7b52:	e00b      	b.n	7b6c <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    7b54:	f001 fc60 	bl	9418 <usb_serial_getchar>
    if (c >= 0) return c;
    7b58:	2800      	cmp	r0, #0
    7b5a:	da10      	bge.n	7b7e <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    7b5c:	f001 fd00 	bl	9560 <yield>
    7b60:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    7b62:	f8db 2008 	ldr.w	r2, [fp, #8]
    7b66:	1b5b      	subs	r3, r3, r5
    7b68:	4293      	cmp	r3, r2
    7b6a:	d21a      	bcs.n	7ba2 <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    7b6c:	f8db 3000 	ldr.w	r3, [fp]
    7b70:	695b      	ldr	r3, [r3, #20]
    7b72:	42b3      	cmp	r3, r6
    7b74:	d0ee      	beq.n	7b54 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    7b76:	4658      	mov	r0, fp
    7b78:	4798      	blx	r3
    if (c >= 0) return c;
    7b7a:	2800      	cmp	r0, #0
    7b7c:	dbee      	blt.n	7b5c <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    7b7e:	4548      	cmp	r0, r9
    7b80:	d005      	beq.n	7b8e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    7b82:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    7b86:	45ba      	cmp	sl, r7
		index++;
    7b88:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    7b8c:	d1e0      	bne.n	7b50 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    7b8e:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    7b90:	4640      	mov	r0, r8
	*buffer = 0;
    7b92:	703b      	strb	r3, [r7, #0]
}
    7b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    7b98:	f04f 0800 	mov.w	r8, #0
}
    7b9c:	4640      	mov	r0, r8
    7b9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    7ba2:	2301      	movs	r3, #1
    7ba4:	f88b 300c 	strb.w	r3, [fp, #12]
    7ba8:	e7f1      	b.n	7b8e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7baa:	bf00      	nop
    7bac:	2002b458 	.word	0x2002b458
    7bb0:	00007b25 	.word	0x00007b25

00007bb4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7bb4:	49a2      	ldr	r1, [pc, #648]	; (7e40 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7bb6:	4ba3      	ldr	r3, [pc, #652]	; (7e44 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    7bb8:	4288      	cmp	r0, r1
{
    7bba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    7bbe:	4ca2      	ldr	r4, [pc, #648]	; (7e48 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7bc0:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    7bc2:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    7bc4:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    7bc8:	d91b      	bls.n	7c02 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    7bca:	4ba0      	ldr	r3, [pc, #640]	; (7e4c <set_arm_clock+0x298>)
    7bcc:	4298      	cmp	r0, r3
    7bce:	f240 8102 	bls.w	7dd6 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7bd2:	1ac3      	subs	r3, r0, r3
    7bd4:	499e      	ldr	r1, [pc, #632]	; (7e50 <set_arm_clock+0x29c>)
    7bd6:	0a1b      	lsrs	r3, r3, #8
    7bd8:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7bdc:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7be0:	09db      	lsrs	r3, r3, #7
    7be2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7be6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7bea:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7bee:	428b      	cmp	r3, r1
    7bf0:	bf28      	it	cs
    7bf2:	460b      	movcs	r3, r1
    7bf4:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    7bf8:	4b96      	ldr	r3, [pc, #600]	; (7e54 <set_arm_clock+0x2a0>)
    7bfa:	fba3 3707 	umull	r3, r7, r3, r7
    7bfe:	08ff      	lsrs	r7, r7, #3
    7c00:	e004      	b.n	7c0c <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    7c02:	4f95      	ldr	r7, [pc, #596]	; (7e58 <set_arm_clock+0x2a4>)
    7c04:	42b8      	cmp	r0, r7
    7c06:	bf8c      	ite	hi
    7c08:	270e      	movhi	r7, #14
    7c0a:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7c0c:	498d      	ldr	r1, [pc, #564]	; (7e44 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c0e:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7c12:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c16:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7c18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    7c1c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c20:	d20c      	bcs.n	7c3c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7c22:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7c26:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7c2a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    7c2e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7c32:	680b      	ldr	r3, [r1, #0]
    7c34:	2b00      	cmp	r3, #0
    7c36:	dafc      	bge.n	7c32 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c38:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    7c3c:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    7c40:	d124      	bne.n	7c8c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    7c42:	4986      	ldr	r1, [pc, #536]	; (7e5c <set_arm_clock+0x2a8>)
    7c44:	690c      	ldr	r4, [r1, #16]
    7c46:	4986      	ldr	r1, [pc, #536]	; (7e60 <set_arm_clock+0x2ac>)
    7c48:	43a1      	bics	r1, r4
    7c4a:	f000 80ea 	beq.w	7e22 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7c4e:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    7c52:	4634      	mov	r4, r6
    7c54:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7c58:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    7c5c:	d004      	beq.n	7c68 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    7c5e:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    7c62:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    7c64:	4b77      	ldr	r3, [pc, #476]	; (7e44 <set_arm_clock+0x290>)
    7c66:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7c68:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    7c6c:	d007      	beq.n	7c7e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    7c6e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    7c72:	4974      	ldr	r1, [pc, #464]	; (7e44 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    7c74:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    7c76:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    7c78:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    7c7a:	071a      	lsls	r2, r3, #28
    7c7c:	d4fc      	bmi.n	7c78 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    7c7e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    7c82:	4a70      	ldr	r2, [pc, #448]	; (7e44 <set_arm_clock+0x290>)
    7c84:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7c86:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7c88:	069b      	lsls	r3, r3, #26
    7c8a:	d4fc      	bmi.n	7c86 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    7c8c:	4c75      	ldr	r4, [pc, #468]	; (7e64 <set_arm_clock+0x2b0>)
    7c8e:	42a0      	cmp	r0, r4
    7c90:	f200 80ce 	bhi.w	7e30 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    7c94:	f04f 0c01 	mov.w	ip, #1
    7c98:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    7c9a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    7c9c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    7ca0:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    7ca4:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7ca8:	42a2      	cmp	r2, r4
    7caa:	d818      	bhi.n	7cde <set_arm_clock+0x12a>
		if (div_arm < 8) {
    7cac:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    7cb0:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    7cb4:	f040 808d 	bne.w	7dd2 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    7cb8:	f1bc 0f04 	cmp.w	ip, #4
    7cbc:	f200 8091 	bhi.w	7de2 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    7cc0:	180a      	adds	r2, r1, r0
    7cc2:	42a2      	cmp	r2, r4
    7cc4:	f200 80a4 	bhi.w	7e10 <set_arm_clock+0x25c>
    7cc8:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    7ccc:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    7cce:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7cd2:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    7cd6:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7cda:	42a2      	cmp	r2, r4
    7cdc:	d9e6      	bls.n	7cac <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7cde:	f10c 31ff 	add.w	r1, ip, #4294967295
    7ce2:	028c      	lsls	r4, r1, #10
    7ce4:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7ce8:	485f      	ldr	r0, [pc, #380]	; (7e68 <set_arm_clock+0x2b4>)
    7cea:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    7cec:	4a5f      	ldr	r2, [pc, #380]	; (7e6c <set_arm_clock+0x2b8>)
    7cee:	4290      	cmp	r0, r2
    7cf0:	d97f      	bls.n	7df2 <set_arm_clock+0x23e>
    7cf2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 7e98 <set_arm_clock+0x2e4>
    7cf6:	226c      	movs	r2, #108	; 0x6c
    7cf8:	485d      	ldr	r0, [pc, #372]	; (7e70 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7cfa:	4d58      	ldr	r5, [pc, #352]	; (7e5c <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    7cfc:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7d00:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    7d04:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7d08:	f8df c190 	ldr.w	ip, [pc, #400]	; 7e9c <set_arm_clock+0x2e8>
    7d0c:	ea0e 0c0c 	and.w	ip, lr, ip
    7d10:	45d4      	cmp	ip, sl
    7d12:	d009      	beq.n	7d28 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    7d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    7d18:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    7d1c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    7d20:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    7d22:	682a      	ldr	r2, [r5, #0]
    7d24:	2a00      	cmp	r2, #0
    7d26:	dafc      	bge.n	7d22 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    7d28:	4a46      	ldr	r2, [pc, #280]	; (7e44 <set_arm_clock+0x290>)
    7d2a:	6915      	ldr	r5, [r2, #16]
    7d2c:	f005 0507 	and.w	r5, r5, #7
    7d30:	429d      	cmp	r5, r3
    7d32:	d003      	beq.n	7d3c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    7d34:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    7d36:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7d38:	03dd      	lsls	r5, r3, #15
    7d3a:	d4fc      	bmi.n	7d36 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7d3c:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    7d40:	d009      	beq.n	7d56 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    7d42:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7d46:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    7d4a:	4a3e      	ldr	r2, [pc, #248]	; (7e44 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7d4c:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    7d4e:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    7d50:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7d52:	0799      	lsls	r1, r3, #30
    7d54:	d4fc      	bmi.n	7d50 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7d56:	4947      	ldr	r1, [pc, #284]	; (7e74 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    7d58:	4a47      	ldr	r2, [pc, #284]	; (7e78 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7d5a:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    7d5c:	4291      	cmp	r1, r2
    7d5e:	d83c      	bhi.n	7dda <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7d60:	4b46      	ldr	r3, [pc, #280]	; (7e7c <set_arm_clock+0x2c8>)
    7d62:	09c9      	lsrs	r1, r1, #7
    7d64:	fba3 3101 	umull	r3, r1, r3, r1
    7d68:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    7d6a:	1e4b      	subs	r3, r1, #1
    7d6c:	021b      	lsls	r3, r3, #8
    7d6e:	ea86 0203 	eor.w	r2, r6, r3
    7d72:	f412 7f40 	tst.w	r2, #768	; 0x300
    7d76:	d006      	beq.n	7d86 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    7d78:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    7d80:	4a30      	ldr	r2, [pc, #192]	; (7e44 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7d82:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    7d84:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    7d86:	4a2f      	ldr	r2, [pc, #188]	; (7e44 <set_arm_clock+0x290>)
    7d88:	6953      	ldr	r3, [r2, #20]
    7d8a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    7d8e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7d90:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7d92:	069b      	lsls	r3, r3, #26
    7d94:	d4fc      	bmi.n	7d90 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7d96:	4b3a      	ldr	r3, [pc, #232]	; (7e80 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7d98:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7d9a:	fba3 2300 	umull	r2, r3, r3, r0
    7d9e:	f04f 32ff 	mov.w	r2, #4294967295
    7da2:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    7da6:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7daa:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    7dae:	4a35      	ldr	r2, [pc, #212]	; (7e84 <set_arm_clock+0x2d0>)
    7db0:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    7db2:	4a35      	ldr	r2, [pc, #212]	; (7e88 <set_arm_clock+0x2d4>)
    7db4:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7db6:	4a35      	ldr	r2, [pc, #212]	; (7e8c <set_arm_clock+0x2d8>)
    7db8:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7dba:	d208      	bcs.n	7dce <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7dbc:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7dc0:	4a21      	ldr	r2, [pc, #132]	; (7e48 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7dc2:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    7dc6:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7dc8:	6813      	ldr	r3, [r2, #0]
    7dca:	2b00      	cmp	r3, #0
    7dcc:	dafc      	bge.n	7dc8 <set_arm_clock+0x214>
	}

	return frequency;
}
    7dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7dd2:	4673      	mov	r3, lr
    7dd4:	e762      	b.n	7c9c <set_arm_clock+0xe8>
    7dd6:	2712      	movs	r7, #18
    7dd8:	e718      	b.n	7c0c <set_arm_clock+0x58>
    7dda:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    7dde:	2104      	movs	r1, #4
    7de0:	e7c5      	b.n	7d6e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7de2:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7de6:	4820      	ldr	r0, [pc, #128]	; (7e68 <set_arm_clock+0x2b4>)
    7de8:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7dea:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7dec:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7dee:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7df2:	4a27      	ldr	r2, [pc, #156]	; (7e90 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7df4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 7ea0 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7df8:	fba2 2000 	umull	r2, r0, r2, r0
    7dfc:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    7dfe:	4825      	ldr	r0, [pc, #148]	; (7e94 <set_arm_clock+0x2e0>)
    7e00:	2a36      	cmp	r2, #54	; 0x36
    7e02:	bf38      	it	cc
    7e04:	2236      	movcc	r2, #54	; 0x36
    7e06:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7e0a:	ea42 0a0a 	orr.w	sl, r2, sl
    7e0e:	e774      	b.n	7cfa <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7e10:	ea4f 248c 	mov.w	r4, ip, lsl #10
    7e14:	2300      	movs	r3, #0
    7e16:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    7e1a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    7e1e:	46ac      	mov	ip, r5
    7e20:	e762      	b.n	7ce8 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7e22:	461d      	mov	r5, r3
    7e24:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    7e28:	4611      	mov	r1, r2
    7e2a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    7e2e:	e713      	b.n	7c58 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    7e30:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    7e32:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7e36:	4602      	mov	r2, r0
    7e38:	4631      	mov	r1, r6
    7e3a:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    7e3c:	46e6      	mov	lr, ip
    7e3e:	e753      	b.n	7ce8 <set_arm_clock+0x134>
    7e40:	1f78a400 	.word	0x1f78a400
    7e44:	400fc000 	.word	0x400fc000
    7e48:	40080000 	.word	0x40080000
    7e4c:	23c34600 	.word	0x23c34600
    7e50:	004cb223 	.word	0x004cb223
    7e54:	51eb851f 	.word	0x51eb851f
    7e58:	016e3600 	.word	0x016e3600
    7e5c:	400d8000 	.word	0x400d8000
    7e60:	80003040 	.word	0x80003040
    7e64:	269fb1ff 	.word	0x269fb1ff
    7e68:	005b8d80 	.word	0x005b8d80
    7e6c:	4df67eff 	.word	0x4df67eff
    7e70:	4d3f6400 	.word	0x4d3f6400
    7e74:	08f0d17f 	.word	0x08f0d17f
    7e78:	2cb4177f 	.word	0x2cb4177f
    7e7c:	00e5109f 	.word	0x00e5109f
    7e80:	431bde83 	.word	0x431bde83
    7e84:	200085c0 	.word	0x200085c0
    7e88:	200085bc 	.word	0x200085bc
    7e8c:	2002af98 	.word	0x2002af98
    7e90:	165e9f81 	.word	0x165e9f81
    7e94:	00b71b00 	.word	0x00b71b00
    7e98:	8000206c 	.word	0x8000206c
    7e9c:	8001307f 	.word	0x8001307f
    7ea0:	80002000 	.word	0x80002000

00007ea4 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    7ea4:	b900      	cbnz	r0, 7ea8 <delay+0x4>
    7ea6:	4770      	bx	lr
{
    7ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7eac:	2101      	movs	r1, #1
    7eae:	4681      	mov	r9, r0
    7eb0:	4c21      	ldr	r4, [pc, #132]	; (7f38 <delay+0x94>)
    7eb2:	4d22      	ldr	r5, [pc, #136]	; (7f3c <delay+0x98>)
    7eb4:	4e22      	ldr	r6, [pc, #136]	; (7f40 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7eb6:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    7eba:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    7ebc:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7ebe:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	d1f7      	bne.n	7eb6 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7ec6:	491f      	ldr	r1, [pc, #124]	; (7f44 <delay+0xa0>)
    7ec8:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    7eca:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7ece:	f8df a078 	ldr.w	sl, [pc, #120]	; 7f48 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    7ed2:	1a1b      	subs	r3, r3, r0
    7ed4:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    7ed6:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7eda:	f8da 2000 	ldr.w	r2, [sl]
    7ede:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    7ee2:	455a      	cmp	r2, fp
    7ee4:	bf94      	ite	ls
    7ee6:	4490      	addls	r8, r2
    7ee8:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7eea:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    7eee:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    7ef0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7ef2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7ef6:	2b00      	cmp	r3, #0
    7ef8:	d1f7      	bne.n	7eea <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7efa:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7efc:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    7f00:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    7f02:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f06:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    7f0a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    7f0e:	bf94      	ite	ls
    7f10:	4462      	addls	r2, ip
    7f12:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    7f16:	eba2 0208 	sub.w	r2, r2, r8
    7f1a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    7f1e:	d306      	bcc.n	7f2e <delay+0x8a>
			if (--msec == 0) return;
    7f20:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    7f24:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    7f28:	d1df      	bne.n	7eea <delay+0x46>
}
    7f2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    7f2e:	f001 fb17 	bl	9560 <yield>
		while ((micros() - start) >= 1000) {
    7f32:	4904      	ldr	r1, [pc, #16]	; (7f44 <delay+0xa0>)
    7f34:	e7d9      	b.n	7eea <delay+0x46>
    7f36:	bf00      	nop
    7f38:	2002b45c 	.word	0x2002b45c
    7f3c:	2002b458 	.word	0x2002b458
    7f40:	2002b454 	.word	0x2002b454
    7f44:	e0001000 	.word	0xe0001000
    7f48:	2002af98 	.word	0x2002af98

00007f4c <micros>:
{
    7f4c:	b430      	push	{r4, r5}
    7f4e:	4b0f      	ldr	r3, [pc, #60]	; (7f8c <micros+0x40>)
    7f50:	f04f 0c01 	mov.w	ip, #1
    7f54:	4d0e      	ldr	r5, [pc, #56]	; (7f90 <micros+0x44>)
    7f56:	4c0f      	ldr	r4, [pc, #60]	; (7f94 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7f58:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    7f5c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    7f5e:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7f60:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    7f64:	2a00      	cmp	r2, #0
    7f66:	d1f7      	bne.n	7f58 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7f68:	4b0b      	ldr	r3, [pc, #44]	; (7f98 <micros+0x4c>)
    7f6a:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f6c:	4a0b      	ldr	r2, [pc, #44]	; (7f9c <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    7f6e:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    7f70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f74:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    7f76:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f7a:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    7f7e:	bc30      	pop	{r4, r5}
    7f80:	428a      	cmp	r2, r1
    7f82:	bf94      	ite	ls
    7f84:	1880      	addls	r0, r0, r2
    7f86:	1840      	addhi	r0, r0, r1
    7f88:	4770      	bx	lr
    7f8a:	bf00      	nop
    7f8c:	2002b45c 	.word	0x2002b45c
    7f90:	2002b458 	.word	0x2002b458
    7f94:	2002b454 	.word	0x2002b454
    7f98:	e0001000 	.word	0xe0001000
    7f9c:	2002af98 	.word	0x2002af98

00007fa0 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    7fa0:	2836      	cmp	r0, #54	; 0x36
    7fa2:	d816      	bhi.n	7fd2 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    7fa4:	0102      	lsls	r2, r0, #4
    7fa6:	4b10      	ldr	r3, [pc, #64]	; (7fe8 <digitalWrite+0x48>)
    7fa8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    7fac:	589b      	ldr	r3, [r3, r2]
{
    7fae:	b410      	push	{r4}
	mask = p->mask;
    7fb0:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    7fb2:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    7fb4:	4214      	tst	r4, r2
    7fb6:	d005      	beq.n	7fc4 <digitalWrite+0x24>
		if (val) {
    7fb8:	b961      	cbnz	r1, 7fd4 <digitalWrite+0x34>
		}
	}
}
    7fba:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    7fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    7fc2:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7fc4:	6883      	ldr	r3, [r0, #8]
		if (val) {
    7fc6:	b151      	cbz	r1, 7fde <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7fc8:	4a08      	ldr	r2, [pc, #32]	; (7fec <digitalWrite+0x4c>)
}
    7fca:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7fce:	601a      	str	r2, [r3, #0]
}
    7fd0:	4770      	bx	lr
    7fd2:	4770      	bx	lr
    7fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    7fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    7fdc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    7fde:	4a04      	ldr	r2, [pc, #16]	; (7ff0 <digitalWrite+0x50>)
}
    7fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    7fe4:	601a      	str	r2, [r3, #0]
}
    7fe6:	4770      	bx	lr
    7fe8:	200076a4 	.word	0x200076a4
    7fec:	0001f038 	.word	0x0001f038
    7ff0:	00013038 	.word	0x00013038

00007ff4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    7ff4:	2836      	cmp	r0, #54	; 0x36
    7ff6:	d829      	bhi.n	804c <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    7ff8:	4b16      	ldr	r3, [pc, #88]	; (8054 <pinMode+0x60>)
    7ffa:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    7ffc:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    7ffe:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8002:	589a      	ldr	r2, [r3, r2]
{
    8004:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8006:	6853      	ldr	r3, [r2, #4]
    8008:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    800a:	d00e      	beq.n	802a <pinMode+0x36>
    800c:	2904      	cmp	r1, #4
    800e:	d00c      	beq.n	802a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8010:	ea23 0304 	bic.w	r3, r3, r4
    8014:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8016:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    8018:	b1a9      	cbz	r1, 8046 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    801a:	2902      	cmp	r1, #2
    801c:	d017      	beq.n	804e <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    801e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8020:	bf0c      	ite	eq
    8022:	4a0d      	ldreq	r2, [pc, #52]	; (8058 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    8024:	4a0d      	ldrne	r2, [pc, #52]	; (805c <pinMode+0x68>)
    8026:	601a      	str	r2, [r3, #0]
    8028:	e007      	b.n	803a <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    802a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    802c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    802e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8030:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    8032:	d008      	beq.n	8046 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    8034:	f640 0238 	movw	r2, #2104	; 0x838
    8038:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    803a:	6843      	ldr	r3, [r0, #4]
    803c:	2215      	movs	r2, #21
}
    803e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    8042:	601a      	str	r2, [r3, #0]
}
    8044:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8046:	2238      	movs	r2, #56	; 0x38
    8048:	601a      	str	r2, [r3, #0]
    804a:	e7f6      	b.n	803a <pinMode+0x46>
    804c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    804e:	4a04      	ldr	r2, [pc, #16]	; (8060 <pinMode+0x6c>)
    8050:	601a      	str	r2, [r3, #0]
    8052:	e7f2      	b.n	803a <pinMode+0x46>
    8054:	200076a4 	.word	0x200076a4
    8058:	00013038 	.word	0x00013038
    805c:	00010038 	.word	0x00010038
    8060:	0001f038 	.word	0x0001f038

00008064 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    8064:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    8066:	f7f8 f951 	bl	30c <setup>
	while (1) {
		loop();
    806a:	f7f7 fffd 	bl	68 <loop>
		yield();
    806e:	f001 fa77 	bl	9560 <yield>
	while (1) {
    8072:	e7fa      	b.n	806a <main+0x6>

00008074 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    8074:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    8076:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    807a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    807e:	d16d      	bne.n	815c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8080:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8082:	d341      	bcc.n	8108 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8084:	f851 3b04 	ldr.w	r3, [r1], #4
    8088:	f840 3b04 	str.w	r3, [r0], #4
    808c:	f851 3b04 	ldr.w	r3, [r1], #4
    8090:	f840 3b04 	str.w	r3, [r0], #4
    8094:	f851 3b04 	ldr.w	r3, [r1], #4
    8098:	f840 3b04 	str.w	r3, [r0], #4
    809c:	f851 3b04 	ldr.w	r3, [r1], #4
    80a0:	f840 3b04 	str.w	r3, [r0], #4
    80a4:	f851 3b04 	ldr.w	r3, [r1], #4
    80a8:	f840 3b04 	str.w	r3, [r0], #4
    80ac:	f851 3b04 	ldr.w	r3, [r1], #4
    80b0:	f840 3b04 	str.w	r3, [r0], #4
    80b4:	f851 3b04 	ldr.w	r3, [r1], #4
    80b8:	f840 3b04 	str.w	r3, [r0], #4
    80bc:	f851 3b04 	ldr.w	r3, [r1], #4
    80c0:	f840 3b04 	str.w	r3, [r0], #4
    80c4:	f851 3b04 	ldr.w	r3, [r1], #4
    80c8:	f840 3b04 	str.w	r3, [r0], #4
    80cc:	f851 3b04 	ldr.w	r3, [r1], #4
    80d0:	f840 3b04 	str.w	r3, [r0], #4
    80d4:	f851 3b04 	ldr.w	r3, [r1], #4
    80d8:	f840 3b04 	str.w	r3, [r0], #4
    80dc:	f851 3b04 	ldr.w	r3, [r1], #4
    80e0:	f840 3b04 	str.w	r3, [r0], #4
    80e4:	f851 3b04 	ldr.w	r3, [r1], #4
    80e8:	f840 3b04 	str.w	r3, [r0], #4
    80ec:	f851 3b04 	ldr.w	r3, [r1], #4
    80f0:	f840 3b04 	str.w	r3, [r0], #4
    80f4:	f851 3b04 	ldr.w	r3, [r1], #4
    80f8:	f840 3b04 	str.w	r3, [r0], #4
    80fc:	f851 3b04 	ldr.w	r3, [r1], #4
    8100:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8104:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8106:	d2bd      	bcs.n	8084 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8108:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    810a:	d311      	bcc.n	8130 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    810c:	f851 3b04 	ldr.w	r3, [r1], #4
    8110:	f840 3b04 	str.w	r3, [r0], #4
    8114:	f851 3b04 	ldr.w	r3, [r1], #4
    8118:	f840 3b04 	str.w	r3, [r0], #4
    811c:	f851 3b04 	ldr.w	r3, [r1], #4
    8120:	f840 3b04 	str.w	r3, [r0], #4
    8124:	f851 3b04 	ldr.w	r3, [r1], #4
    8128:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    812c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    812e:	d2ed      	bcs.n	810c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8130:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    8132:	d305      	bcc.n	8140 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8134:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8138:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    813c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    813e:	d2f9      	bcs.n	8134 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8140:	3204      	adds	r2, #4
	beq	.Ldone
    8142:	d008      	beq.n	8156 <memcpy+0xe2>

	lsls	r2, r2, #31
    8144:	07d2      	lsls	r2, r2, #31
	itt ne
    8146:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8148:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    814c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8150:	d301      	bcc.n	8156 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8152:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8154:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8156:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8158:	4770      	bx	lr
    815a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    815c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    815e:	d313      	bcc.n	8188 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8160:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8162:	d08d      	beq.n	8080 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8164:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8168:	d08a      	beq.n	8080 <memcpy+0xc>

	rsb	r3, #4
    816a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    816e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    8170:	07db      	lsls	r3, r3, #31
	itt ne
    8172:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8174:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8178:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    817c:	d380      	bcc.n	8080 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    817e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    8182:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    8186:	e77b      	b.n	8080 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8188:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    818a:	d3d9      	bcc.n	8140 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    818c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    818e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8192:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8196:	d2f9      	bcs.n	818c <memcpy+0x118>

	ldrb	r3, [r1]
    8198:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    819a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    819c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    819e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    81a0:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    81a2:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    81a4:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    81a6:	4770      	bx	lr

000081a8 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    81a8:	f001 bd00 	b.w	9bac <free>

000081ac <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    81ac:	f101 3cff 	add.w	ip, r1, #4294967295
{
    81b0:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    81b2:	4666      	mov	r6, ip
	int i=0, j;
    81b4:	2400      	movs	r4, #0
    81b6:	e000      	b.n	81ba <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    81b8:	3401      	adds	r4, #1
		digit = val % radix;
    81ba:	fbb0 f5f2 	udiv	r5, r0, r2
    81be:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    81c2:	2b09      	cmp	r3, #9
    81c4:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    81c8:	f103 0330 	add.w	r3, r3, #48	; 0x30
    81cc:	fa5f fe8e 	uxtb.w	lr, lr
    81d0:	bf98      	it	ls
    81d2:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    81d6:	4290      	cmp	r0, r2
		val /= radix;
    81d8:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    81da:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    81de:	d2eb      	bcs.n	81b8 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    81e0:	1c63      	adds	r3, r4, #1
    81e2:	2200      	movs	r2, #0
    81e4:	18c8      	adds	r0, r1, r3
    81e6:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    81e8:	b17c      	cbz	r4, 820a <ultoa+0x5e>
		t = buf[j];
    81ea:	4662      	mov	r2, ip
    81ec:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    81f0:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    81f4:	eba1 030c 	sub.w	r3, r1, ip
    81f8:	3202      	adds	r2, #2
		buf[j] = buf[i];
    81fa:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    81fe:	3b01      	subs	r3, #1
    8200:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    8202:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    8204:	4423      	add	r3, r4
    8206:	429a      	cmp	r2, r3
    8208:	dbef      	blt.n	81ea <ultoa+0x3e>
	}
	return buf;
}
    820a:	4608      	mov	r0, r1
    820c:	bd70      	pop	{r4, r5, r6, pc}
    820e:	bf00      	nop

00008210 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    8210:	4a07      	ldr	r2, [pc, #28]	; (8230 <rtc_get+0x20>)
    8212:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    8214:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    8216:	4619      	mov	r1, r3
    8218:	4684      	mov	ip, r0
    821a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    821c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    821e:	4299      	cmp	r1, r3
    8220:	d1f9      	bne.n	8216 <rtc_get+0x6>
    8222:	4584      	cmp	ip, r0
    8224:	d1f7      	bne.n	8216 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    8226:	0bdb      	lsrs	r3, r3, #15
}
    8228:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    822c:	4770      	bx	lr
    822e:	bf00      	nop
    8230:	400d4000 	.word	0x400d4000

00008234 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    8234:	4910      	ldr	r1, [pc, #64]	; (8278 <rtc_set+0x44>)
    8236:	688b      	ldr	r3, [r1, #8]
    8238:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    823c:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    823e:	688b      	ldr	r3, [r1, #8]
    8240:	07db      	lsls	r3, r3, #31
    8242:	d4fc      	bmi.n	823e <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    8244:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    8246:	4a0c      	ldr	r2, [pc, #48]	; (8278 <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    8248:	f023 0301 	bic.w	r3, r3, #1
    824c:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    824e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8250:	07d9      	lsls	r1, r3, #31
    8252:	d4fc      	bmi.n	824e <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    8254:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    8256:	4908      	ldr	r1, [pc, #32]	; (8278 <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    8258:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    825a:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    825c:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    825e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8260:	f043 0301 	orr.w	r3, r3, #1
    8264:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    8266:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    8268:	07db      	lsls	r3, r3, #31
    826a:	d5fc      	bpl.n	8266 <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    826c:	688b      	ldr	r3, [r1, #8]
    826e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    8272:	608b      	str	r3, [r1, #8]
}
    8274:	4770      	bx	lr
    8276:	bf00      	nop
    8278:	400d4000 	.word	0x400d4000

0000827c <unused_interrupt_vector>:
	__disable_irq();
    827c:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    827e:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    8282:	4c4f      	ldr	r4, [pc, #316]	; (83c0 <unused_interrupt_vector+0x144>)
    8284:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    8288:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    828c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    8290:	4e4c      	ldr	r6, [pc, #304]	; (83c4 <unused_interrupt_vector+0x148>)
	while (p < end) {
    8292:	4d4d      	ldr	r5, [pc, #308]	; (83c8 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    8294:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    8298:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    829c:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    82a0:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    82a4:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    82a8:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    82ac:	6993      	ldr	r3, [r2, #24]
    82ae:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    82b2:	69d3      	ldr	r3, [r2, #28]
    82b4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    82b8:	f000 f8d0 	bl	845c <tempmonGetTemp>
    82bc:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    82c0:	f7ff ffa6 	bl	8210 <rtc_get>
	info->len = sizeof(*info) / 4;
    82c4:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    82c6:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    82ca:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    82ce:	460b      	mov	r3, r1
    82d0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    82d4:	493d      	ldr	r1, [pc, #244]	; (83cc <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    82d6:	1d30      	adds	r0, r6, #4
    82d8:	405a      	eors	r2, r3
    82da:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    82dc:	f002 0301 	and.w	r3, r2, #1
    82e0:	3c01      	subs	r4, #1
    82e2:	fb01 f303 	mul.w	r3, r1, r3
    82e6:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    82ea:	d1f7      	bne.n	82dc <unused_interrupt_vector+0x60>
	while (p < end) {
    82ec:	42a8      	cmp	r0, r5
    82ee:	d002      	beq.n	82f6 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    82f0:	6873      	ldr	r3, [r6, #4]
    82f2:	4606      	mov	r6, r0
    82f4:	e7ef      	b.n	82d6 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    82f6:	4b32      	ldr	r3, [pc, #200]	; (83c0 <unused_interrupt_vector+0x144>)
    82f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    82fc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8300:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8304:	492f      	ldr	r1, [pc, #188]	; (83c4 <unused_interrupt_vector+0x148>)
    8306:	4a32      	ldr	r2, [pc, #200]	; (83d0 <unused_interrupt_vector+0x154>)
    8308:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    830c:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    8310:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8314:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8318:	4a2e      	ldr	r2, [pc, #184]	; (83d4 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    831a:	2502      	movs	r5, #2
    831c:	482e      	ldr	r0, [pc, #184]	; (83d8 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    831e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8320:	492e      	ldr	r1, [pc, #184]	; (83dc <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8322:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    8326:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    8328:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    832a:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    832c:	482c      	ldr	r0, [pc, #176]	; (83e0 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    832e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    8332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8336:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8338:	680b      	ldr	r3, [r1, #0]
    833a:	4283      	cmp	r3, r0
    833c:	d83d      	bhi.n	83ba <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    833e:	4d26      	ldr	r5, [pc, #152]	; (83d8 <unused_interrupt_vector+0x15c>)
    8340:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    8342:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8346:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    834a:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    834c:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    834e:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    8352:	4924      	ldr	r1, [pc, #144]	; (83e4 <unused_interrupt_vector+0x168>)
    8354:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    8358:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    835c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    8360:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    8364:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    8368:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    836c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    8370:	e001      	b.n	8376 <unused_interrupt_vector+0xfa>
		usb_isr();
    8372:	f000 f965 	bl	8640 <usb_isr>
		if (PIT_TFLG0) {
    8376:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    837a:	2b00      	cmp	r3, #0
    837c:	d0f9      	beq.n	8372 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    837e:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    8380:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    8384:	2c4f      	cmp	r4, #79	; 0x4f
    8386:	d9f4      	bls.n	8372 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8388:	4b17      	ldr	r3, [pc, #92]	; (83e8 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    838a:	2002      	movs	r0, #2
    838c:	4917      	ldr	r1, [pc, #92]	; (83ec <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    838e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    8392:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8396:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8398:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    839c:	b93b      	cbnz	r3, 83ae <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    839e:	4814      	ldr	r0, [pc, #80]	; (83f0 <unused_interrupt_vector+0x174>)
    83a0:	4914      	ldr	r1, [pc, #80]	; (83f4 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    83a2:	4a0d      	ldr	r2, [pc, #52]	; (83d8 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    83a4:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    83a6:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    83aa:	2b00      	cmp	r3, #0
    83ac:	d0fa      	beq.n	83a4 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    83ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    83b2:	4a11      	ldr	r2, [pc, #68]	; (83f8 <unused_interrupt_vector+0x17c>)
    83b4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    83b8:	e7fe      	b.n	83b8 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    83ba:	f7ff fbfb 	bl	7bb4 <set_arm_clock>
    83be:	e7be      	b.n	833e <unused_interrupt_vector+0xc2>
    83c0:	2027ff00 	.word	0x2027ff00
    83c4:	2027ff80 	.word	0x2027ff80
    83c8:	2027ffa8 	.word	0x2027ffa8
    83cc:	edb88320 	.word	0xedb88320
    83d0:	2027ffa0 	.word	0x2027ffa0
    83d4:	400fc000 	.word	0x400fc000
    83d8:	40084000 	.word	0x40084000
    83dc:	200085c0 	.word	0x200085c0
    83e0:	0bcd3d80 	.word	0x0bcd3d80
    83e4:	00249f00 	.word	0x00249f00
    83e8:	400d9000 	.word	0x400d9000
    83ec:	402e0000 	.word	0x402e0000
    83f0:	400f8000 	.word	0x400f8000
    83f4:	0bad00f1 	.word	0x0bad00f1
    83f8:	05fa0004 	.word	0x05fa0004

000083fc <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    83fc:	490a      	ldr	r1, [pc, #40]	; (8428 <_sbrk+0x2c>)
    83fe:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    8400:	b138      	cbz	r0, 8412 <_sbrk+0x16>
{
    8402:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    8404:	1813      	adds	r3, r2, r0
    8406:	4809      	ldr	r0, [pc, #36]	; (842c <_sbrk+0x30>)
    8408:	4283      	cmp	r3, r0
    840a:	d804      	bhi.n	8416 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    840c:	4610      	mov	r0, r2
                __brkval = prev + incr;
    840e:	600b      	str	r3, [r1, #0]
}
    8410:	bd08      	pop	{r3, pc}
    8412:	4610      	mov	r0, r2
    8414:	4770      	bx	lr
                        errno = ENOMEM;
    8416:	f003 fc2f 	bl	bc78 <__errno>
    841a:	230c      	movs	r3, #12
                        return (void *)-1;
    841c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    8420:	6003      	str	r3, [r0, #0]
}
    8422:	4610      	mov	r0, r2
    8424:	bd08      	pop	{r3, pc}
    8426:	bf00      	nop
    8428:	200085e0 	.word	0x200085e0
    842c:	20280000 	.word	0x20280000

00008430 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    8430:	2000      	movs	r0, #0
    8432:	4770      	bx	lr

00008434 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    8434:	f04f 30ff 	mov.w	r0, #4294967295
    8438:	4770      	bx	lr
    843a:	bf00      	nop

0000843c <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    843c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    8440:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    8442:	604b      	str	r3, [r1, #4]
}
    8444:	4770      	bx	lr
    8446:	bf00      	nop

00008448 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    8448:	2001      	movs	r0, #1
    844a:	4770      	bx	lr

0000844c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    844c:	f04f 30ff 	mov.w	r0, #4294967295
    8450:	4770      	bx	lr
    8452:	bf00      	nop

00008454 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    8454:	bf30      	wfi
    8456:	e7fd      	b.n	8454 <abort>

00008458 <Panic_Temp_isr>:
  unused_interrupt_vector();
    8458:	f7ff bf10 	b.w	827c <unused_interrupt_vector>

0000845c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    845c:	4a12      	ldr	r2, [pc, #72]	; (84a8 <tempmonGetTemp+0x4c>)
    845e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    8462:	075b      	lsls	r3, r3, #29
    8464:	d5fb      	bpl.n	845e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8466:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    846a:	4810      	ldr	r0, [pc, #64]	; (84ac <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    846c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8470:	490f      	ldr	r1, [pc, #60]	; (84b0 <tempmonGetTemp+0x54>)
    8472:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8476:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    847a:	ed91 6a00 	vldr	s12, [r1]
    847e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    8482:	4a0c      	ldr	r2, [pc, #48]	; (84b4 <tempmonGetTemp+0x58>)
    8484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8488:	4b0b      	ldr	r3, [pc, #44]	; (84b8 <tempmonGetTemp+0x5c>)
    848a:	edd2 6a00 	vldr	s13, [r2]
    848e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8492:	ed93 7a00 	vldr	s14, [r3]
    8496:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    849a:	ee67 7a86 	vmul.f32	s15, s15, s12
    849e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    84a2:	ee37 0a40 	vsub.f32	s0, s14, s0
    84a6:	4770      	bx	lr
    84a8:	400d8100 	.word	0x400d8100
    84ac:	2002af88 	.word	0x2002af88
    84b0:	2002af90 	.word	0x2002af90
    84b4:	2002af94 	.word	0x2002af94
    84b8:	2002af8c 	.word	0x2002af8c

000084bc <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    84bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    84be:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    84c0:	b11b      	cbz	r3, 84ca <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    84c2:	6853      	ldr	r3, [r2, #4]
    84c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    84c8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    84ca:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    84cc:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    84ce:	b33c      	cbz	r4, 8520 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    84d0:	4b1a      	ldr	r3, [pc, #104]	; (853c <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    84d2:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    84d4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    84d8:	420c      	tst	r4, r1
    84da:	d11d      	bne.n	8518 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    84dc:	4e18      	ldr	r6, [pc, #96]	; (8540 <schedule_transfer+0x84>)
    84de:	6877      	ldr	r7, [r6, #4]
    84e0:	e004      	b.n	84ec <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    84e2:	6874      	ldr	r4, [r6, #4]
    84e4:	1be4      	subs	r4, r4, r7
    84e6:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    84ea:	d20b      	bcs.n	8504 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    84ec:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    84f0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    84f4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    84f8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    84fc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8500:	0464      	lsls	r4, r4, #17
    8502:	d5ee      	bpl.n	84e2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8504:	400d      	ands	r5, r1
    8506:	d107      	bne.n	8518 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    8508:	4c0c      	ldr	r4, [pc, #48]	; (853c <schedule_transfer+0x80>)
		endpoint->status = 0;
    850a:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    850e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8512:	430b      	orrs	r3, r1
    8514:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    8518:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    851a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    851c:	bcf0      	pop	{r4, r5, r6, r7}
    851e:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    8520:	4d06      	ldr	r5, [pc, #24]	; (853c <schedule_transfer+0x80>)
	endpoint->status = 0;
    8522:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    8526:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    852a:	430b      	orrs	r3, r1
    852c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    8530:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    8532:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8534:	b662      	cpsie	i
}
    8536:	bcf0      	pop	{r4, r5, r6, r7}
    8538:	4770      	bx	lr
    853a:	bf00      	nop
    853c:	402e0000 	.word	0x402e0000
    8540:	e0001000 	.word	0xe0001000

00008544 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    8544:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    8546:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    8548:	b19d      	cbz	r5, 8572 <run_callbacks+0x2e>
    854a:	4606      	mov	r6, r0
    854c:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    854e:	2400      	movs	r4, #0
    8550:	e003      	b.n	855a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    8552:	6812      	ldr	r2, [r2, #0]
		count++;
    8554:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    8556:	2a01      	cmp	r2, #1
    8558:	d00c      	beq.n	8574 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    855a:	6853      	ldr	r3, [r2, #4]
    855c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    8560:	d0f7      	beq.n	8552 <run_callbacks+0xe>
			ep->first_transfer = t;
    8562:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8564:	b12c      	cbz	r4, 8572 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    8566:	4628      	mov	r0, r5
		ep->callback_function(first);
    8568:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    856a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    856c:	4798      	blx	r3
	while (count) {
    856e:	3c01      	subs	r4, #1
    8570:	d1f9      	bne.n	8566 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    8572:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    8574:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    8578:	e7f4      	b.n	8564 <run_callbacks+0x20>
    857a:	bf00      	nop

0000857c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    857c:	b430      	push	{r4, r5}
	if (len > 0) {
    857e:	b9d9      	cbnz	r1, 85b8 <endpoint0_transmit.constprop.0+0x3c>
    8580:	4c1f      	ldr	r4, [pc, #124]	; (8600 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    8582:	4b20      	ldr	r3, [pc, #128]	; (8604 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    8584:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8586:	4a20      	ldr	r2, [pc, #128]	; (8608 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    8588:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    858a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    858e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8590:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    8592:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8596:	2480      	movs	r4, #128	; 0x80
    8598:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    859a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    859e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    85a2:	481a      	ldr	r0, [pc, #104]	; (860c <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    85a4:	432b      	orrs	r3, r5
    85a6:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    85aa:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    85ac:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    85b0:	2b00      	cmp	r3, #0
    85b2:	d1fb      	bne.n	85ac <endpoint0_transmit.constprop.0+0x30>
}
    85b4:	bc30      	pop	{r4, r5}
    85b6:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    85b8:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    85ba:	4b15      	ldr	r3, [pc, #84]	; (8610 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    85bc:	4c10      	ldr	r4, [pc, #64]	; (8600 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    85be:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    85c0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    85c4:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    85c6:	4a10      	ldr	r2, [pc, #64]	; (8608 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    85c8:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    85ca:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    85ce:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    85d0:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    85d2:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    85d6:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    85d8:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    85da:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    85de:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    85e2:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    85e4:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    85e6:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    85e8:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    85ea:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    85ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    85f2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    85f6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    85fa:	2b00      	cmp	r3, #0
    85fc:	d1fb      	bne.n	85f6 <endpoint0_transmit.constprop.0+0x7a>
    85fe:	e7c0      	b.n	8582 <endpoint0_transmit.constprop.0+0x6>
    8600:	20000000 	.word	0x20000000
    8604:	20008ec0 	.word	0x20008ec0
    8608:	402e0000 	.word	0x402e0000
    860c:	2002ae30 	.word	0x2002ae30
    8610:	20008ee0 	.word	0x20008ee0

00008614 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    8614:	4908      	ldr	r1, [pc, #32]	; (8638 <usb_stop_sof_interrupts+0x24>)
    8616:	2201      	movs	r2, #1
    8618:	780b      	ldrb	r3, [r1, #0]
    861a:	fa02 f000 	lsl.w	r0, r2, r0
    861e:	ea23 0000 	bic.w	r0, r3, r0
    8622:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    8624:	b930      	cbnz	r0, 8634 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    8626:	4a05      	ldr	r2, [pc, #20]	; (863c <usb_stop_sof_interrupts+0x28>)
    8628:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    862c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8630:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    8634:	4770      	bx	lr
    8636:	bf00      	nop
    8638:	2002b4a2 	.word	0x2002b4a2
    863c:	402e0000 	.word	0x402e0000

00008640 <usb_isr>:
{
    8640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    8644:	4c97      	ldr	r4, [pc, #604]	; (88a4 <usb_isr+0x264>)
{
    8646:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    8648:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    864c:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    864e:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    8652:	d553      	bpl.n	86fc <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    8654:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    8658:	2a00      	cmp	r2, #0
    865a:	d04a      	beq.n	86f2 <usb_isr+0xb2>
    865c:	4e92      	ldr	r6, [pc, #584]	; (88a8 <usb_isr+0x268>)
    865e:	f8df a260 	ldr.w	sl, [pc, #608]	; 88c0 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    8662:	f8df 9274 	ldr.w	r9, [pc, #628]	; 88d8 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    8666:	f8df b274 	ldr.w	fp, [pc, #628]	; 88dc <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    866a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 88e0 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    866e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    8672:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8676:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    867a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    867e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    8682:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8686:	049d      	lsls	r5, r3, #18
    8688:	d5f5      	bpl.n	8676 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    868a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    868e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    8692:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8696:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    869a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    869e:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    86a2:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    86a6:	d1fa      	bne.n	869e <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    86a8:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    86aa:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    86ac:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    86b0:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    86b4:	f000 81cf 	beq.w	8a56 <usb_isr+0x416>
    86b8:	f200 80db 	bhi.w	8872 <usb_isr+0x232>
    86bc:	f240 3102 	movw	r1, #770	; 0x302
    86c0:	428b      	cmp	r3, r1
    86c2:	f000 81e7 	beq.w	8a94 <usb_isr+0x454>
    86c6:	f200 809a 	bhi.w	87fe <usb_isr+0x1be>
    86ca:	2b82      	cmp	r3, #130	; 0x82
    86cc:	f000 81cb 	beq.w	8a66 <usb_isr+0x426>
    86d0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    86d4:	f040 808a 	bne.w	87ec <usb_isr+0x1ac>
		if (endpoint > 7) break;
    86d8:	f010 0f78 	tst.w	r0, #120	; 0x78
    86dc:	b283      	uxth	r3, r0
    86de:	f000 8203 	beq.w	8ae8 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    86e2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    86e6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    86ea:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    86ee:	2a00      	cmp	r2, #0
    86f0:	d1bd      	bne.n	866e <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    86f2:	4a6c      	ldr	r2, [pc, #432]	; (88a4 <usb_isr+0x264>)
    86f4:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    86f8:	2b00      	cmp	r3, #0
    86fa:	d142      	bne.n	8782 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    86fc:	067e      	lsls	r6, r7, #25
    86fe:	d516      	bpl.n	872e <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8700:	4b68      	ldr	r3, [pc, #416]	; (88a4 <usb_isr+0x264>)
    8702:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    8706:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    870a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    870e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8712:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8716:	2c00      	cmp	r4, #0
    8718:	d1fb      	bne.n	8712 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    871a:	f04f 32ff 	mov.w	r2, #4294967295
    871e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    8722:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    8726:	f000 fd29 	bl	917c <usb_serial_reset>
		endpointN_notify_mask = 0;
    872a:	4b60      	ldr	r3, [pc, #384]	; (88ac <usb_isr+0x26c>)
    872c:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    872e:	01fc      	lsls	r4, r7, #7
    8730:	d503      	bpl.n	873a <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    8732:	4b5f      	ldr	r3, [pc, #380]	; (88b0 <usb_isr+0x270>)
    8734:	681b      	ldr	r3, [r3, #0]
    8736:	b103      	cbz	r3, 873a <usb_isr+0xfa>
    8738:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    873a:	01b8      	lsls	r0, r7, #6
    873c:	d503      	bpl.n	8746 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    873e:	4b5d      	ldr	r3, [pc, #372]	; (88b4 <usb_isr+0x274>)
    8740:	681b      	ldr	r3, [r3, #0]
    8742:	b103      	cbz	r3, 8746 <usb_isr+0x106>
    8744:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    8746:	0779      	lsls	r1, r7, #29
    8748:	d508      	bpl.n	875c <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    874a:	4b56      	ldr	r3, [pc, #344]	; (88a4 <usb_isr+0x264>)
    874c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    8750:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    8754:	d047      	beq.n	87e6 <usb_isr+0x1a6>
			usb_high_speed = 1;
    8756:	4b58      	ldr	r3, [pc, #352]	; (88b8 <usb_isr+0x278>)
    8758:	2201      	movs	r2, #1
    875a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    875c:	4b51      	ldr	r3, [pc, #324]	; (88a4 <usb_isr+0x264>)
    875e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    8762:	061a      	lsls	r2, r3, #24
    8764:	d50a      	bpl.n	877c <usb_isr+0x13c>
    8766:	063b      	lsls	r3, r7, #24
    8768:	d508      	bpl.n	877c <usb_isr+0x13c>
		if (usb_reboot_timer) {
    876a:	4a54      	ldr	r2, [pc, #336]	; (88bc <usb_isr+0x27c>)
    876c:	7813      	ldrb	r3, [r2, #0]
    876e:	b12b      	cbz	r3, 877c <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    8770:	3b01      	subs	r3, #1
    8772:	b2db      	uxtb	r3, r3
    8774:	7013      	strb	r3, [r2, #0]
    8776:	2b00      	cmp	r3, #0
    8778:	f000 8272 	beq.w	8c60 <usb_isr+0x620>
}
    877c:	b003      	add	sp, #12
    877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    8782:	494f      	ldr	r1, [pc, #316]	; (88c0 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    8784:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    8788:	6808      	ldr	r0, [r1, #0]
    878a:	4203      	tst	r3, r0
    878c:	f040 81d1 	bne.w	8b32 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    8790:	4a46      	ldr	r2, [pc, #280]	; (88ac <usb_isr+0x26c>)
    8792:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    8794:	401c      	ands	r4, r3
    8796:	d0b1      	beq.n	86fc <usb_isr+0xbc>
				while (tx) {
    8798:	ea5f 4814 	movs.w	r8, r4, lsr #16
    879c:	d010      	beq.n	87c0 <usb_isr+0x180>
    879e:	4e42      	ldr	r6, [pc, #264]	; (88a8 <usb_isr+0x268>)
					tx &= ~(1<<p);
    87a0:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    87a4:	fa98 f5a8 	rbit	r5, r8
    87a8:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    87ac:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    87b0:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    87b4:	3040      	adds	r0, #64	; 0x40
    87b6:	f7ff fec5 	bl	8544 <run_callbacks>
				while (tx) {
    87ba:	ea38 0805 	bics.w	r8, r8, r5
    87be:	d1f1      	bne.n	87a4 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    87c0:	b2a4      	uxth	r4, r4
				while(rx) {
    87c2:	2c00      	cmp	r4, #0
    87c4:	d09a      	beq.n	86fc <usb_isr+0xbc>
    87c6:	4e38      	ldr	r6, [pc, #224]	; (88a8 <usb_isr+0x268>)
					rx &= ~(1<<p);
    87c8:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    87cc:	fa94 f5a4 	rbit	r5, r4
    87d0:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    87d4:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    87d8:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    87dc:	f7ff feb2 	bl	8544 <run_callbacks>
				while(rx) {
    87e0:	43ac      	bics	r4, r5
    87e2:	d1f3      	bne.n	87cc <usb_isr+0x18c>
    87e4:	e78a      	b.n	86fc <usb_isr+0xbc>
			usb_high_speed = 0;
    87e6:	4a34      	ldr	r2, [pc, #208]	; (88b8 <usb_isr+0x278>)
    87e8:	7013      	strb	r3, [r2, #0]
    87ea:	e7b7      	b.n	875c <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    87ec:	2b80      	cmp	r3, #128	; 0x80
    87ee:	f47f af78 	bne.w	86e2 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    87f2:	4834      	ldr	r0, [pc, #208]	; (88c4 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    87f4:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    87f6:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    87f8:	f7ff fec0 	bl	857c <endpoint0_transmit.constprop.0>
		return;
    87fc:	e775      	b.n	86ea <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    87fe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    8802:	f000 810b 	beq.w	8a1c <usb_isr+0x3dc>
    8806:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    880a:	2b01      	cmp	r3, #1
    880c:	f63f af69 	bhi.w	86e2 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8810:	4b2d      	ldr	r3, [pc, #180]	; (88c8 <usb_isr+0x288>)
    8812:	685d      	ldr	r5, [r3, #4]
    8814:	2d00      	cmp	r5, #0
    8816:	f43f af64 	beq.w	86e2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    881a:	fa1f fc8c 	uxth.w	ip, ip
    881e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8822:	e004      	b.n	882e <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8824:	691d      	ldr	r5, [r3, #16]
    8826:	330c      	adds	r3, #12
    8828:	2d00      	cmp	r5, #0
    882a:	f43f af5a 	beq.w	86e2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    882e:	881a      	ldrh	r2, [r3, #0]
    8830:	4572      	cmp	r2, lr
    8832:	d1f7      	bne.n	8824 <usb_isr+0x1e4>
    8834:	885a      	ldrh	r2, [r3, #2]
    8836:	4562      	cmp	r2, ip
    8838:	d1f4      	bne.n	8824 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    883a:	ea4f 221e 	mov.w	r2, lr, lsr #8
    883e:	2a03      	cmp	r2, #3
    8840:	f000 81a5 	beq.w	8b8e <usb_isr+0x54e>
					datalen = list->length;
    8844:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    8846:	0c00      	lsrs	r0, r0, #16
    8848:	4282      	cmp	r2, r0
    884a:	bf28      	it	cs
    884c:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    884e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    8852:	f040 81a1 	bne.w	8b98 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    8856:	4b18      	ldr	r3, [pc, #96]	; (88b8 <usb_isr+0x278>)
    8858:	491c      	ldr	r1, [pc, #112]	; (88cc <usb_isr+0x28c>)
    885a:	7818      	ldrb	r0, [r3, #0]
    885c:	4b1c      	ldr	r3, [pc, #112]	; (88d0 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    885e:	9201      	str	r2, [sp, #4]
    8860:	2800      	cmp	r0, #0
    8862:	bf18      	it	ne
    8864:	4619      	movne	r1, r3
    8866:	481b      	ldr	r0, [pc, #108]	; (88d4 <usb_isr+0x294>)
    8868:	f7ff fc04 	bl	8074 <memcpy>
    886c:	4d19      	ldr	r5, [pc, #100]	; (88d4 <usb_isr+0x294>)
    886e:	9a01      	ldr	r2, [sp, #4]
    8870:	e1e1      	b.n	8c36 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    8872:	f242 2121 	movw	r1, #8737	; 0x2221
    8876:	428b      	cmp	r3, r1
    8878:	d07c      	beq.n	8974 <usb_isr+0x334>
    887a:	d933      	bls.n	88e4 <usb_isr+0x2a4>
    887c:	f242 3121 	movw	r1, #8993	; 0x2321
    8880:	428b      	cmp	r3, r1
    8882:	f000 8081 	beq.w	8988 <usb_isr+0x348>
    8886:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    888a:	428b      	cmp	r3, r1
    888c:	f47f af29 	bne.w	86e2 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    8890:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    8894:	b283      	uxth	r3, r0
    8896:	f47f af24 	bne.w	86e2 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    889a:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    889e:	f363 0c0f 	bfi	ip, r3, #0, #16
    88a2:	e7b5      	b.n	8810 <usb_isr+0x1d0>
    88a4:	402e0000 	.word	0x402e0000
    88a8:	20000000 	.word	0x20000000
    88ac:	2002ae34 	.word	0x2002ae34
    88b0:	2002b47c 	.word	0x2002b47c
    88b4:	2002b480 	.word	0x2002b480
    88b8:	2002b4a8 	.word	0x2002b4a8
    88bc:	2002b4a9 	.word	0x2002b4a9
    88c0:	2002ae30 	.word	0x2002ae30
    88c4:	2002af50 	.word	0x2002af50
    88c8:	200083f0 	.word	0x200083f0
    88cc:	6000279c 	.word	0x6000279c
    88d0:	60002800 	.word	0x60002800
    88d4:	20200800 	.word	0x20200800
    88d8:	2002ae28 	.word	0x2002ae28
    88dc:	b8c6cf5d 	.word	0xb8c6cf5d
    88e0:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    88e4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    88e8:	d066      	beq.n	89b8 <usb_isr+0x378>
    88ea:	f242 0121 	movw	r1, #8225	; 0x2021
    88ee:	428b      	cmp	r3, r1
    88f0:	f47f aef7 	bne.w	86e2 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    88f4:	0c03      	lsrs	r3, r0, #16
    88f6:	2b07      	cmp	r3, #7
    88f8:	f47f aef3 	bne.w	86e2 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    88fc:	4bb2      	ldr	r3, [pc, #712]	; (8bc8 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    88fe:	49b3      	ldr	r1, [pc, #716]	; (8bcc <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    8900:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8902:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    8904:	49b2      	ldr	r1, [pc, #712]	; (8bd0 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    8906:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8908:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    890c:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    8910:	2201      	movs	r2, #1
    8912:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8914:	4aaf      	ldr	r2, [pc, #700]	; (8bd4 <usb_isr+0x594>)
    8916:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8918:	4aaf      	ldr	r2, [pc, #700]	; (8bd8 <usb_isr+0x598>)
    891a:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    891c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    8920:	f041 0101 	orr.w	r1, r1, #1
    8924:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8928:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    892c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8930:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8932:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    8934:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8938:	2b00      	cmp	r3, #0
    893a:	d1fb      	bne.n	8934 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    893c:	4aa7      	ldr	r2, [pc, #668]	; (8bdc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    893e:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8940:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    8942:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8944:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8946:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8948:	f248 0380 	movw	r3, #32896	; 0x8080
    894c:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    894e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8952:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8956:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    895a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    895e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8966:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    896a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    896e:	2b00      	cmp	r3, #0
    8970:	d1fb      	bne.n	896a <usb_isr+0x32a>
    8972:	e6ba      	b.n	86ea <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    8974:	b280      	uxth	r0, r0
    8976:	b938      	cbnz	r0, 8988 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8978:	4b99      	ldr	r3, [pc, #612]	; (8be0 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    897a:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    897e:	6819      	ldr	r1, [r3, #0]
    8980:	4b98      	ldr	r3, [pc, #608]	; (8be4 <usb_isr+0x5a4>)
    8982:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    8984:	4b98      	ldr	r3, [pc, #608]	; (8be8 <usb_isr+0x5a8>)
    8986:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    8988:	4b94      	ldr	r3, [pc, #592]	; (8bdc <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    898a:	2200      	movs	r2, #0
    898c:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    898e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    8990:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8992:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8994:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8996:	2280      	movs	r2, #128	; 0x80
    8998:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    899a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    899e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    89a2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    89a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    89aa:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    89ae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    89b2:	2b00      	cmp	r3, #0
    89b4:	d1fb      	bne.n	89ae <usb_isr+0x36e>
    89b6:	e698      	b.n	86ea <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    89b8:	f3c2 4207 	ubfx	r2, r2, #16, #8
    89bc:	4b8b      	ldr	r3, [pc, #556]	; (8bec <usb_isr+0x5ac>)
    89be:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    89c0:	4b8b      	ldr	r3, [pc, #556]	; (8bf0 <usb_isr+0x5b0>)
    89c2:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    89c6:	4b8b      	ldr	r3, [pc, #556]	; (8bf4 <usb_isr+0x5b4>)
    89c8:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    89cc:	4b8a      	ldr	r3, [pc, #552]	; (8bf8 <usb_isr+0x5b8>)
    89ce:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    89d2:	f000 fbd5 	bl	9180 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    89d6:	2280      	movs	r2, #128	; 0x80
    89d8:	4629      	mov	r1, r5
    89da:	4888      	ldr	r0, [pc, #544]	; (8bfc <usb_isr+0x5bc>)
    89dc:	f003 f816 	bl	ba0c <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    89e0:	4b87      	ldr	r3, [pc, #540]	; (8c00 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    89e2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    89e4:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    89e8:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    89ec:	4b7b      	ldr	r3, [pc, #492]	; (8bdc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    89ee:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    89f0:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    89f2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    89f4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    89f6:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    89f8:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    89fa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    89fe:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8a02:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8a0a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8a0e:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    8a12:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a16:	2b00      	cmp	r3, #0
    8a18:	d1fb      	bne.n	8a12 <usb_isr+0x3d2>
    8a1a:	e666      	b.n	86ea <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    8a1c:	4b6f      	ldr	r3, [pc, #444]	; (8bdc <usb_isr+0x59c>)
    8a1e:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    8a20:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    8a22:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a24:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    8a26:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8a28:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a2a:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a2c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8a30:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8a34:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8a3c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8a40:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a44:	2b00      	cmp	r3, #0
    8a46:	d1fb      	bne.n	8a40 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8a48:	0c13      	lsrs	r3, r2, #16
    8a4a:	065b      	lsls	r3, r3, #25
    8a4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8a50:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    8a54:	e649      	b.n	86ea <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    8a56:	4b65      	ldr	r3, [pc, #404]	; (8bec <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    8a58:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    8a5a:	486a      	ldr	r0, [pc, #424]	; (8c04 <usb_isr+0x5c4>)
    8a5c:	781b      	ldrb	r3, [r3, #0]
    8a5e:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    8a60:	f7ff fd8c 	bl	857c <endpoint0_transmit.constprop.0>
		return;
    8a64:	e641      	b.n	86ea <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    8a66:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    8a68:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    8a6c:	f47f ae39 	bne.w	86e2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    8a70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8a74:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    8a78:	4a62      	ldr	r2, [pc, #392]	; (8c04 <usb_isr+0x5c4>)
    8a7a:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8a7c:	0618      	lsls	r0, r3, #24
    8a7e:	f100 809e 	bmi.w	8bbe <usb_isr+0x57e>
    8a82:	07cb      	lsls	r3, r1, #31
    8a84:	d501      	bpl.n	8a8a <usb_isr+0x44a>
			reply_buffer[0] = 1;
    8a86:	2301      	movs	r3, #1
    8a88:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8a8a:	2102      	movs	r1, #2
    8a8c:	485d      	ldr	r0, [pc, #372]	; (8c04 <usb_isr+0x5c4>)
    8a8e:	f7ff fd75 	bl	857c <endpoint0_transmit.constprop.0>
		return;
    8a92:	e62a      	b.n	86ea <usb_isr+0xaa>
		if (endpoint > 7) break;
    8a94:	f010 0f78 	tst.w	r0, #120	; 0x78
    8a98:	b283      	uxth	r3, r0
    8a9a:	f47f ae22 	bne.w	86e2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    8a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8aa2:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8aa6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8aaa:	bf14      	ite	ne
    8aac:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8ab0:	f043 0301 	orreq.w	r3, r3, #1
    8ab4:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8ab8:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8aba:	4b48      	ldr	r3, [pc, #288]	; (8bdc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    8abc:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8abe:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8ac0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8ac2:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8ac4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8ac6:	2280      	movs	r2, #128	; 0x80
    8ac8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8aca:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8ace:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8ad2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8ada:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8ade:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d1fb      	bne.n	8ade <usb_isr+0x49e>
    8ae6:	e600      	b.n	86ea <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    8ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8aec:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8af0:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8af4:	bf14      	ite	ne
    8af6:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    8afa:	f023 0301 	biceq.w	r3, r3, #1
    8afe:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8b02:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8b04:	4b35      	ldr	r3, [pc, #212]	; (8bdc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    8b06:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8b08:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8b0a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8b0c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8b0e:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8b10:	2280      	movs	r2, #128	; 0x80
    8b12:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8b14:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8b18:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8b1c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8b24:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8b28:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8b2c:	2b00      	cmp	r3, #0
    8b2e:	d1fb      	bne.n	8b28 <usb_isr+0x4e8>
    8b30:	e5db      	b.n	86ea <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    8b32:	2000      	movs	r0, #0
    8b34:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    8b36:	4926      	ldr	r1, [pc, #152]	; (8bd0 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8b38:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    8b3a:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8b3c:	f242 0121 	movw	r1, #8225	; 0x2021
    8b40:	428c      	cmp	r4, r1
    8b42:	f47f ae25 	bne.w	8790 <usb_isr+0x150>
    8b46:	b280      	uxth	r0, r0
    8b48:	2800      	cmp	r0, #0
    8b4a:	f47f ae21 	bne.w	8790 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8b4e:	492e      	ldr	r1, [pc, #184]	; (8c08 <usb_isr+0x5c8>)
    8b50:	4c2e      	ldr	r4, [pc, #184]	; (8c0c <usb_isr+0x5cc>)
    8b52:	c903      	ldmia	r1, {r0, r1}
    8b54:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    8b56:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8b58:	ea4f 4111 	mov.w	r1, r1, lsr #16
    8b5c:	6020      	str	r0, [r4, #0]
    8b5e:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    8b60:	f47f ae16 	bne.w	8790 <usb_isr+0x150>
	__disable_irq();
    8b64:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    8b66:	482a      	ldr	r0, [pc, #168]	; (8c10 <usb_isr+0x5d0>)
    8b68:	7801      	ldrb	r1, [r0, #0]
    8b6a:	f041 0108 	orr.w	r1, r1, #8
    8b6e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    8b70:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    8b74:	060d      	lsls	r5, r1, #24
    8b76:	d405      	bmi.n	8b84 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8b78:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8b7a:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8b7c:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8b80:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    8b84:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    8b86:	4a23      	ldr	r2, [pc, #140]	; (8c14 <usb_isr+0x5d4>)
    8b88:	2150      	movs	r1, #80	; 0x50
    8b8a:	7011      	strb	r1, [r2, #0]
    8b8c:	e600      	b.n	8790 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    8b8e:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    8b90:	782a      	ldrb	r2, [r5, #0]
    8b92:	4282      	cmp	r2, r0
    8b94:	bf28      	it	cs
    8b96:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    8b98:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    8b9c:	d144      	bne.n	8c28 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    8b9e:	4b1e      	ldr	r3, [pc, #120]	; (8c18 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8ba0:	4d1e      	ldr	r5, [pc, #120]	; (8c1c <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    8ba2:	7818      	ldrb	r0, [r3, #0]
    8ba4:	491e      	ldr	r1, [pc, #120]	; (8c20 <usb_isr+0x5e0>)
    8ba6:	4b1f      	ldr	r3, [pc, #124]	; (8c24 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8ba8:	9201      	str	r2, [sp, #4]
    8baa:	2800      	cmp	r0, #0
    8bac:	bf18      	it	ne
    8bae:	4619      	movne	r1, r3
    8bb0:	4628      	mov	r0, r5
    8bb2:	f7ff fa5f 	bl	8074 <memcpy>
					usb_descriptor_buffer[1] = 7;
    8bb6:	2307      	movs	r3, #7
    8bb8:	706b      	strb	r3, [r5, #1]
    8bba:	9a01      	ldr	r2, [sp, #4]
    8bbc:	e03b      	b.n	8c36 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8bbe:	03c9      	lsls	r1, r1, #15
    8bc0:	f53f af61 	bmi.w	8a86 <usb_isr+0x446>
    8bc4:	e761      	b.n	8a8a <usb_isr+0x44a>
    8bc6:	bf00      	nop
    8bc8:	20008ee0 	.word	0x20008ee0
    8bcc:	2002be28 	.word	0x2002be28
    8bd0:	2000c080 	.word	0x2000c080
    8bd4:	00070080 	.word	0x00070080
    8bd8:	2002ce28 	.word	0x2002ce28
    8bdc:	20008ec0 	.word	0x20008ec0
    8be0:	2002b458 	.word	0x2002b458
    8be4:	2002b478 	.word	0x2002b478
    8be8:	2002b4a6 	.word	0x2002b4a6
    8bec:	2002b4a7 	.word	0x2002b4a7
    8bf0:	00cc0002 	.word	0x00cc0002
    8bf4:	000200c8 	.word	0x000200c8
    8bf8:	00c80002 	.word	0x00c80002
    8bfc:	20000080 	.word	0x20000080
    8c00:	74d59319 	.word	0x74d59319
    8c04:	2002af50 	.word	0x2002af50
    8c08:	2002ae28 	.word	0x2002ae28
    8c0c:	2002b470 	.word	0x2002b470
    8c10:	2002b4a2 	.word	0x2002b4a2
    8c14:	2002b4a9 	.word	0x2002b4a9
    8c18:	2002b4a8 	.word	0x2002b4a8
    8c1c:	20200800 	.word	0x20200800
    8c20:	60002800 	.word	0x60002800
    8c24:	6000279c 	.word	0x6000279c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    8c28:	4629      	mov	r1, r5
    8c2a:	4d10      	ldr	r5, [pc, #64]	; (8c6c <usb_isr+0x62c>)
    8c2c:	9201      	str	r2, [sp, #4]
    8c2e:	4628      	mov	r0, r5
    8c30:	f7ff fa20 	bl	8074 <memcpy>
    8c34:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8c36:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8c3a:	4415      	add	r5, r2
	asm("dsb");
    8c3c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8c40:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8c44:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    8c48:	3320      	adds	r3, #32
	} while (location < end_addr);
    8c4a:	429d      	cmp	r5, r3
    8c4c:	d8fa      	bhi.n	8c44 <usb_isr+0x604>
	asm("dsb");
    8c4e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8c52:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    8c56:	4805      	ldr	r0, [pc, #20]	; (8c6c <usb_isr+0x62c>)
    8c58:	4611      	mov	r1, r2
    8c5a:	f7ff fc8f 	bl	857c <endpoint0_transmit.constprop.0>
				return;
    8c5e:	e544      	b.n	86ea <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    8c60:	2003      	movs	r0, #3
    8c62:	f7ff fcd7 	bl	8614 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    8c66:	f00b fc53 	bl	14510 <___reboot_Teensyduino__veneer>
    8c6a:	bf00      	nop
    8c6c:	20200800 	.word	0x20200800

00008c70 <usb_config_rx>:
{
    8c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c74:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8c76:	1e83      	subs	r3, r0, #2
    8c78:	2b02      	cmp	r3, #2
    8c7a:	d901      	bls.n	8c80 <usb_config_rx+0x10>
}
    8c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8c80:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8cd0 <usb_config_rx+0x60>
    8c84:	4615      	mov	r5, r2
    8c86:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    8c88:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8c8a:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    8c8e:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8c90:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    8c94:	2100      	movs	r1, #0
    8c96:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8c9a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    8c9c:	f002 feb6 	bl	ba0c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8ca0:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    8ca4:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8ca6:	0952      	lsrs	r2, r2, #5
    8ca8:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    8cac:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    8cb0:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8cb4:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    8cb8:	2f00      	cmp	r7, #0
    8cba:	d0df      	beq.n	8c7c <usb_config_rx+0xc>
    8cbc:	4a03      	ldr	r2, [pc, #12]	; (8ccc <usb_config_rx+0x5c>)
    8cbe:	40b3      	lsls	r3, r6
    8cc0:	6811      	ldr	r1, [r2, #0]
    8cc2:	430b      	orrs	r3, r1
    8cc4:	6013      	str	r3, [r2, #0]
}
    8cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8cca:	bf00      	nop
    8ccc:	2002ae34 	.word	0x2002ae34
    8cd0:	20000000 	.word	0x20000000

00008cd4 <usb_config_tx>:
{
    8cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8cd8:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8cda:	1e81      	subs	r1, r0, #2
    8cdc:	2902      	cmp	r1, #2
    8cde:	d901      	bls.n	8ce4 <usb_config_tx+0x10>
}
    8ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8ce4:	01c7      	lsls	r7, r0, #7
    8ce6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8d34 <usb_config_tx+0x60>
    8cea:	4692      	mov	sl, r2
    8cec:	4604      	mov	r4, r0
    8cee:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    8cf0:	223c      	movs	r2, #60	; 0x3c
    8cf2:	2100      	movs	r1, #0
    8cf4:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8cf6:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8cfa:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    8cfc:	f108 0004 	add.w	r0, r8, #4
    8d00:	f002 fe84 	bl	ba0c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8d04:	faba f28a 	clz	r2, sl
    8d08:	0952      	lsrs	r2, r2, #5
    8d0a:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    8d0e:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    8d12:	2201      	movs	r2, #1
	qh->callback_function = callback;
    8d14:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8d18:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    8d1c:	2e00      	cmp	r6, #0
    8d1e:	d0df      	beq.n	8ce0 <usb_config_tx+0xc>
    8d20:	4b03      	ldr	r3, [pc, #12]	; (8d30 <usb_config_tx+0x5c>)
    8d22:	3410      	adds	r4, #16
    8d24:	6819      	ldr	r1, [r3, #0]
    8d26:	40a2      	lsls	r2, r4
    8d28:	430a      	orrs	r2, r1
    8d2a:	601a      	str	r2, [r3, #0]
}
    8d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d30:	2002ae34 	.word	0x2002ae34
    8d34:	20000000 	.word	0x20000000

00008d38 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    8d38:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    8d3a:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    8d3c:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    8d3e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    8d42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    8d46:	b410      	push	{r4}
	transfer->next = 1;
    8d48:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    8d4a:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    8d4c:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    8d50:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    8d52:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    8d56:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    8d5a:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    8d5c:	6181      	str	r1, [r0, #24]
}
    8d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    8d62:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    8d66:	4770      	bx	lr

00008d68 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8d68:	1e83      	subs	r3, r0, #2
{
    8d6a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8d6c:	2b02      	cmp	r3, #2
    8d6e:	d900      	bls.n	8d72 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    8d70:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8d72:	4b06      	ldr	r3, [pc, #24]	; (8d8c <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    8d74:	f100 0110 	add.w	r1, r0, #16
    8d78:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8d7c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    8d80:	fa0c f101 	lsl.w	r1, ip, r1
    8d84:	3040      	adds	r0, #64	; 0x40
    8d86:	f7ff bb99 	b.w	84bc <schedule_transfer>
    8d8a:	bf00      	nop
    8d8c:	20000000 	.word	0x20000000

00008d90 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8d90:	1e83      	subs	r3, r0, #2
{
    8d92:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8d94:	2b02      	cmp	r3, #2
    8d96:	d900      	bls.n	8d9a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    8d98:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    8d9a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    8d9c:	4b02      	ldr	r3, [pc, #8]	; (8da8 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    8d9e:	4081      	lsls	r1, r0
    8da0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    8da4:	f7ff bb8a 	b.w	84bc <schedule_transfer>
    8da8:	20000000 	.word	0x20000000

00008dac <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    8dac:	6840      	ldr	r0, [r0, #4]
#endif
}
    8dae:	4770      	bx	lr

00008db0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8db0:	4a12      	ldr	r2, [pc, #72]	; (8dfc <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    8db2:	4b13      	ldr	r3, [pc, #76]	; (8e00 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8db4:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    8db8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    8dbc:	4298      	cmp	r0, r3
{
    8dbe:	b510      	push	{r4, lr}
    8dc0:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    8dc2:	d202      	bcs.n	8dca <usb_init_serialnumber+0x1a>
    8dc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8dc8:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    8dca:	4c0e      	ldr	r4, [pc, #56]	; (8e04 <usb_init_serialnumber+0x54>)
    8dcc:	a901      	add	r1, sp, #4
    8dce:	220a      	movs	r2, #10
    8dd0:	f7ff f9ec 	bl	81ac <ultoa>
	for (i=0; i<10; i++) {
    8dd4:	a901      	add	r1, sp, #4
    8dd6:	2300      	movs	r3, #0
    8dd8:	4620      	mov	r0, r4
		char c = buf[i];
    8dda:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    8dde:	3301      	adds	r3, #1
		if (!c) break;
    8de0:	b13a      	cbz	r2, 8df2 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    8de2:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    8de4:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    8de8:	d1f7      	bne.n	8dda <usb_init_serialnumber+0x2a>
    8dea:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    8dec:	7023      	strb	r3, [r4, #0]
}
    8dee:	b004      	add	sp, #16
    8df0:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    8df2:	005b      	lsls	r3, r3, #1
    8df4:	b2db      	uxtb	r3, r3
    8df6:	7023      	strb	r3, [r4, #0]
}
    8df8:	b004      	add	sp, #16
    8dfa:	bd10      	pop	{r4, pc}
    8dfc:	401f4400 	.word	0x401f4400
    8e00:	00989680 	.word	0x00989680
    8e04:	20008bd4 	.word	0x20008bd4

00008e08 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    8e08:	f000 bace 	b.w	93a8 <usb_serial_flush_input>

00008e0c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    8e0c:	f000 bac0 	b.w	9390 <usb_serial_available>

00008e10 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    8e10:	f000 bb5c 	b.w	94cc <usb_serial_flush_output>

00008e14 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    8e14:	f000 bb32 	b.w	947c <usb_serial_write_buffer_free>

00008e18 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8e18:	4608      	mov	r0, r1
    8e1a:	4611      	mov	r1, r2
    8e1c:	f000 bb22 	b.w	9464 <usb_serial_write>

00008e20 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    8e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8e22:	4c14      	ldr	r4, [pc, #80]	; (8e74 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e24:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8e28:	4e13      	ldr	r6, [pc, #76]	; (8e78 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8e2e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8e32:	4f12      	ldr	r7, [pc, #72]	; (8e7c <rx_queue_transfer+0x5c>)
    8e34:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    8e38:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e3a:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8e3e:	4621      	mov	r1, r4
    8e40:	883a      	ldrh	r2, [r7, #0]
    8e42:	4630      	mov	r0, r6
    8e44:	f7ff ff78 	bl	8d38 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    8e48:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    8e4a:	4423      	add	r3, r4
	asm("dsb");
    8e4c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    8e50:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    8e54:	3420      	adds	r4, #32
	} while (location < end_addr);
    8e56:	42a3      	cmp	r3, r4
    8e58:	d8fa      	bhi.n	8e50 <rx_queue_transfer+0x30>
	asm("dsb");
    8e5a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8e5e:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    8e62:	2003      	movs	r0, #3
    8e64:	4631      	mov	r1, r6
    8e66:	f7ff ff93 	bl	8d90 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8e6e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    8e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e74:	20008f00 	.word	0x20008f00
    8e78:	20009f00 	.word	0x20009f00
    8e7c:	2002b48e 	.word	0x2002b48e

00008e80 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8e80:	4b24      	ldr	r3, [pc, #144]	; (8f14 <rx_event+0x94>)
{
    8e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8e86:	881c      	ldrh	r4, [r3, #0]
    8e88:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    8e8a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8e8c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    8e90:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    8e92:	2c00      	cmp	r4, #0
    8e94:	dd24      	ble.n	8ee0 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    8e96:	4920      	ldr	r1, [pc, #128]	; (8f18 <rx_event+0x98>)
		if (head != rx_tail) {
    8e98:	4820      	ldr	r0, [pc, #128]	; (8f1c <rx_event+0x9c>)
		uint32_t head = rx_head;
    8e9a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    8e9c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    8e9e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    8ea0:	4e1f      	ldr	r6, [pc, #124]	; (8f20 <rx_event+0xa0>)
		if (head != rx_tail) {
    8ea2:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    8ea4:	481f      	ldr	r0, [pc, #124]	; (8f24 <rx_event+0xa4>)
		if (head != rx_tail) {
    8ea6:	d007      	beq.n	8eb8 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    8ea8:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    8eac:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8eb0:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    8eb4:	4294      	cmp	r4, r2
    8eb6:	d918      	bls.n	8eea <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    8eb8:	3301      	adds	r3, #1
		rx_index[i] = 0;
    8eba:	2200      	movs	r2, #0
		rx_count[i] = len;
    8ebc:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    8ec0:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    8ec2:	4e19      	ldr	r6, [pc, #100]	; (8f28 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    8ec4:	bf88      	it	hi
    8ec6:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    8ec8:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    8ecc:	bf98      	it	ls
    8ece:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    8ed0:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    8ed2:	4b16      	ldr	r3, [pc, #88]	; (8f2c <rx_event+0xac>)
		rx_head = head;
    8ed4:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    8ed6:	681a      	ldr	r2, [r3, #0]
    8ed8:	4414      	add	r4, r2
    8eda:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    8edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    8ee0:	4628      	mov	r0, r5
}
    8ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    8ee6:	f7ff bf9b 	b.w	8e20 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8eea:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    8eee:	4910      	ldr	r1, [pc, #64]	; (8f30 <rx_event+0xb0>)
    8ef0:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    8ef2:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8ef4:	4408      	add	r0, r1
    8ef6:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    8efa:	f7ff f8bb 	bl	8074 <memcpy>
				rx_available += len;
    8efe:	4a0b      	ldr	r2, [pc, #44]	; (8f2c <rx_event+0xac>)
				rx_queue_transfer(i);
    8f00:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    8f02:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    8f06:	6813      	ldr	r3, [r2, #0]
    8f08:	4423      	add	r3, r4
}
    8f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    8f0e:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    8f10:	f7ff bf86 	b.w	8e20 <rx_queue_transfer>
    8f14:	2002b48e 	.word	0x2002b48e
    8f18:	2002b4a0 	.word	0x2002b4a0
    8f1c:	2002b4a1 	.word	0x2002b4a1
    8f20:	2002af5c 	.word	0x2002af5c
    8f24:	2002af7c 	.word	0x2002af7c
    8f28:	2002af6c 	.word	0x2002af6c
    8f2c:	2002af58 	.word	0x2002af58
    8f30:	20008f00 	.word	0x20008f00

00008f34 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    8f34:	4b1d      	ldr	r3, [pc, #116]	; (8fac <usb_serial_flush_callback+0x78>)
    8f36:	781a      	ldrb	r2, [r3, #0]
    8f38:	2a00      	cmp	r2, #0
    8f3a:	d136      	bne.n	8faa <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    8f3c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    8f40:	4a1b      	ldr	r2, [pc, #108]	; (8fb0 <usb_serial_flush_callback+0x7c>)
    8f42:	7812      	ldrb	r2, [r2, #0]
    8f44:	b38a      	cbz	r2, 8faa <usb_serial_flush_callback+0x76>
{
    8f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    8f4a:	4d1a      	ldr	r5, [pc, #104]	; (8fb4 <usb_serial_flush_callback+0x80>)
    8f4c:	882a      	ldrh	r2, [r5, #0]
    8f4e:	b352      	cbz	r2, 8fa6 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8f50:	4e19      	ldr	r6, [pc, #100]	; (8fb8 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8f52:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    8f56:	4f19      	ldr	r7, [pc, #100]	; (8fbc <usb_serial_flush_callback+0x88>)
    8f58:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8f5a:	4c19      	ldr	r4, [pc, #100]	; (8fc0 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    8f5c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8f60:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8f64:	4642      	mov	r2, r8
    8f66:	4638      	mov	r0, r7
    8f68:	4621      	mov	r1, r4
    8f6a:	f7ff fee5 	bl	8d38 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    8f6e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    8f72:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8f76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8f7a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    8f7e:	3420      	adds	r4, #32
	} while (location < end_addr);
    8f80:	42a2      	cmp	r2, r4
    8f82:	d8fa      	bhi.n	8f7a <usb_serial_flush_callback+0x46>
	asm("dsb");
    8f84:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8f88:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8f8c:	2004      	movs	r0, #4
    8f8e:	4639      	mov	r1, r7
    8f90:	f7ff feea 	bl	8d68 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8f94:	7833      	ldrb	r3, [r6, #0]
    8f96:	3301      	adds	r3, #1
    8f98:	b2db      	uxtb	r3, r3
    8f9a:	2b03      	cmp	r3, #3
    8f9c:	bf88      	it	hi
    8f9e:	2300      	movhi	r3, #0
    8fa0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    8fa2:	2300      	movs	r3, #0
    8fa4:	802b      	strh	r3, [r5, #0]
}
    8fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8faa:	4770      	bx	lr
    8fac:	2002b4a5 	.word	0x2002b4a5
    8fb0:	2002b4a7 	.word	0x2002b4a7
    8fb4:	2002b492 	.word	0x2002b492
    8fb8:	2002b4a4 	.word	0x2002b4a4
    8fbc:	2000a000 	.word	0x2000a000
    8fc0:	2000a080 	.word	0x2000a080

00008fc4 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    8fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fc8:	b085      	sub	sp, #20
	while (size > 0) {
    8fca:	e9cd 1001 	strd	r1, r0, [sp, #4]
    8fce:	2900      	cmp	r1, #0
    8fd0:	f000 80bf 	beq.w	9152 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    8fd4:	2300      	movs	r3, #0
    8fd6:	4c60      	ldr	r4, [pc, #384]	; (9158 <usb_serial_write.part.0+0x194>)
    8fd8:	f8df 8198 	ldr.w	r8, [pc, #408]	; 9174 <usb_serial_write.part.0+0x1b0>
    8fdc:	f8df a198 	ldr.w	sl, [pc, #408]	; 9178 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    8fe0:	4f5e      	ldr	r7, [pc, #376]	; (915c <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    8fe2:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    8fe4:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    8fe6:	4a5e      	ldr	r2, [pc, #376]	; (9160 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    8fe8:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    8fea:	4b5e      	ldr	r3, [pc, #376]	; (9164 <usb_serial_write.part.0+0x1a0>)
    8fec:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    8fee:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    8ff2:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	f040 80a7 	bne.w	914a <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    8ffc:	461e      	mov	r6, r3
		int waiting=0;
    8ffe:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    9000:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    9002:	4648      	mov	r0, r9
    9004:	f7ff fed2 	bl	8dac <usb_transfer_status>
			if (!(status & 0x80)) {
    9008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    900c:	f000 808c 	beq.w	9128 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    9010:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    9014:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    9018:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    901c:	b905      	cbnz	r5, 9020 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    901e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    9020:	2b00      	cmp	r3, #0
    9022:	d17d      	bne.n	9120 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9024:	683b      	ldr	r3, [r7, #0]
    9026:	1b9b      	subs	r3, r3, r6
    9028:	2b78      	cmp	r3, #120	; 0x78
    902a:	f200 8087 	bhi.w	913c <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    902e:	4b4e      	ldr	r3, [pc, #312]	; (9168 <usb_serial_write.part.0+0x1a4>)
    9030:	781b      	ldrb	r3, [r3, #0]
    9032:	2b00      	cmp	r3, #0
    9034:	d074      	beq.n	9120 <usb_serial_write.part.0+0x15c>
			yield();
    9036:	f000 fa93 	bl	9560 <yield>
			tx_noautoflush = 1;
    903a:	2201      	movs	r2, #1
		while (!tx_available) {
    903c:	f8b8 3000 	ldrh.w	r3, [r8]
    9040:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    9042:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    9044:	2b00      	cmp	r3, #0
    9046:	d0dc      	beq.n	9002 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9048:	4a46      	ldr	r2, [pc, #280]	; (9164 <usb_serial_write.part.0+0x1a0>)
    904a:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    904e:	7811      	ldrb	r1, [r2, #0]
    9050:	461a      	mov	r2, r3
    9052:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    9056:	4d45      	ldr	r5, [pc, #276]	; (916c <usb_serial_write.part.0+0x1a8>)
    9058:	02c9      	lsls	r1, r1, #11
    905a:	4428      	add	r0, r5
		if (size >= tx_available) {
    905c:	9d01      	ldr	r5, [sp, #4]
    905e:	4295      	cmp	r5, r2
    9060:	d217      	bcs.n	9092 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    9062:	9303      	str	r3, [sp, #12]
    9064:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    9068:	462a      	mov	r2, r5
    906a:	f7ff f803 	bl	8074 <memcpy>
			tx_available -= size;
    906e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9070:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    9074:	1b5b      	subs	r3, r3, r5
    9076:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    907a:	4b3d      	ldr	r3, [pc, #244]	; (9170 <usb_serial_write.part.0+0x1ac>)
    907c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    9080:	f3bf 8f4f 	dsb	sy
			sent += size;
    9084:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    9086:	2300      	movs	r3, #0
			sent += size;
    9088:	4428      	add	r0, r5
		tx_noautoflush = 0;
    908a:	7023      	strb	r3, [r4, #0]
}
    908c:	b005      	add	sp, #20
    908e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9092:	4b36      	ldr	r3, [pc, #216]	; (916c <usb_serial_write.part.0+0x1a8>)
    9094:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    9096:	9902      	ldr	r1, [sp, #8]
    9098:	f7fe ffec 	bl	8074 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    909c:	2300      	movs	r3, #0
    909e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    90a2:	4629      	mov	r1, r5
    90a4:	4648      	mov	r0, r9
    90a6:	f7ff fe47 	bl	8d38 <usb_prepare_transfer>
	asm("dsb");
    90aa:	f3bf 8f4f 	dsb	sy
    90ae:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    90b2:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    90b6:	4293      	cmp	r3, r2
    90b8:	bf34      	ite	cc
    90ba:	2301      	movcc	r3, #1
    90bc:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    90be:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    90c2:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    90c6:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    90ca:	3520      	adds	r5, #32
	} while (location < end_addr);
    90cc:	42ab      	cmp	r3, r5
    90ce:	d1fa      	bne.n	90c6 <usb_serial_write.part.0+0x102>
	asm("dsb");
    90d0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    90d4:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    90d8:	2004      	movs	r0, #4
    90da:	4649      	mov	r1, r9
    90dc:	f7ff fe44 	bl	8d68 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    90e0:	4a20      	ldr	r2, [pc, #128]	; (9164 <usb_serial_write.part.0+0x1a0>)
    90e2:	7813      	ldrb	r3, [r2, #0]
    90e4:	3301      	adds	r3, #1
    90e6:	b2db      	uxtb	r3, r3
    90e8:	2b03      	cmp	r3, #3
    90ea:	bf84      	itt	hi
    90ec:	2300      	movhi	r3, #0
    90ee:	4a1d      	ldrhi	r2, [pc, #116]	; (9164 <usb_serial_write.part.0+0x1a0>)
    90f0:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    90f2:	f8b8 3000 	ldrh.w	r3, [r8]
    90f6:	9a01      	ldr	r2, [sp, #4]
    90f8:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    90fa:	9a00      	ldr	r2, [sp, #0]
    90fc:	441a      	add	r2, r3
			size -= tx_available;
    90fe:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    9100:	9200      	str	r2, [sp, #0]
			data += tx_available;
    9102:	9a02      	ldr	r2, [sp, #8]
    9104:	441a      	add	r2, r3
			tx_available = 0;
    9106:	2300      	movs	r3, #0
			data += tx_available;
    9108:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    910a:	4a19      	ldr	r2, [pc, #100]	; (9170 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    910c:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    9110:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    9114:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    9118:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    911a:	2900      	cmp	r1, #0
    911c:	f47f af62 	bne.w	8fe4 <usb_serial_write.part.0+0x20>
	return sent;
    9120:	9800      	ldr	r0, [sp, #0]
}
    9122:	b005      	add	sp, #20
    9124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    9128:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    912c:	4b0d      	ldr	r3, [pc, #52]	; (9164 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    912e:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9132:	7819      	ldrb	r1, [r3, #0]
				break;
    9134:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    9136:	f8a8 2000 	strh.w	r2, [r8]
				break;
    913a:	e78a      	b.n	9052 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    913c:	2301      	movs	r3, #1
				return sent;
    913e:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    9140:	f88a 3000 	strb.w	r3, [sl]
}
    9144:	b005      	add	sp, #20
    9146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    914a:	461a      	mov	r2, r3
    914c:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    9150:	e77f      	b.n	9052 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    9152:	9801      	ldr	r0, [sp, #4]
	return sent;
    9154:	e7e5      	b.n	9122 <usb_serial_write.part.0+0x15e>
    9156:	bf00      	nop
    9158:	2002b4a5 	.word	0x2002b4a5
    915c:	2002b458 	.word	0x2002b458
    9160:	2000a000 	.word	0x2000a000
    9164:	2002b4a4 	.word	0x2002b4a4
    9168:	2002b4a7 	.word	0x2002b4a7
    916c:	2000a080 	.word	0x2000a080
    9170:	402e0000 	.word	0x402e0000
    9174:	2002b492 	.word	0x2002b492
    9178:	2002b4a3 	.word	0x2002b4a3

0000917c <usb_serial_reset>:
}
    917c:	4770      	bx	lr
    917e:	bf00      	nop

00009180 <usb_serial_configure>:
	if (usb_high_speed) {
    9180:	4b2a      	ldr	r3, [pc, #168]	; (922c <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9182:	2100      	movs	r1, #0
    9184:	2280      	movs	r2, #128	; 0x80
    9186:	482a      	ldr	r0, [pc, #168]	; (9230 <usb_serial_configure+0xb0>)
{
    9188:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    918a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    918c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    918e:	4d29      	ldr	r5, [pc, #164]	; (9234 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    9190:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    9192:	4e29      	ldr	r6, [pc, #164]	; (9238 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    9194:	bf0c      	ite	eq
    9196:	2340      	moveq	r3, #64	; 0x40
    9198:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    919c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    919e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    91a0:	f002 fc34 	bl	ba0c <memset>
	tx_head = 0;
    91a4:	4a25      	ldr	r2, [pc, #148]	; (923c <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    91a6:	4621      	mov	r1, r4
	tx_available = 0;
    91a8:	4b25      	ldr	r3, [pc, #148]	; (9240 <usb_serial_configure+0xc0>)
	tx_head = 0;
    91aa:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    91ac:	f44f 7280 	mov.w	r2, #256	; 0x100
    91b0:	4824      	ldr	r0, [pc, #144]	; (9244 <usb_serial_configure+0xc4>)
	tx_available = 0;
    91b2:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    91b4:	f002 fc2a 	bl	ba0c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    91b8:	4a23      	ldr	r2, [pc, #140]	; (9248 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    91ba:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    91bc:	4b23      	ldr	r3, [pc, #140]	; (924c <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    91be:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    91c0:	e9c2 4400 	strd	r4, r4, [r2]
    91c4:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    91c8:	4a21      	ldr	r2, [pc, #132]	; (9250 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    91ca:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    91ce:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    91d0:	4a20      	ldr	r2, [pc, #128]	; (9254 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    91d2:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    91d6:	4b20      	ldr	r3, [pc, #128]	; (9258 <usb_serial_configure+0xd8>)
    91d8:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    91da:	4623      	mov	r3, r4
	rx_available = 0;
    91dc:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    91de:	4622      	mov	r2, r4
    91e0:	f7ff fd78 	bl	8cd4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    91e4:	4622      	mov	r2, r4
    91e6:	8831      	ldrh	r1, [r6, #0]
    91e8:	2003      	movs	r0, #3
    91ea:	4b1c      	ldr	r3, [pc, #112]	; (925c <usb_serial_configure+0xdc>)
    91ec:	f7ff fd40 	bl	8c70 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    91f0:	4623      	mov	r3, r4
    91f2:	2201      	movs	r2, #1
    91f4:	8829      	ldrh	r1, [r5, #0]
    91f6:	2004      	movs	r0, #4
    91f8:	f7ff fd6c 	bl	8cd4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    91fc:	4620      	mov	r0, r4
    91fe:	3401      	adds	r4, #1
    9200:	f7ff fe0e 	bl	8e20 <rx_queue_transfer>
    9204:	2c08      	cmp	r4, #8
    9206:	d1f9      	bne.n	91fc <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    9208:	4b15      	ldr	r3, [pc, #84]	; (9260 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    920a:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    920c:	4815      	ldr	r0, [pc, #84]	; (9264 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    920e:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    9210:	4c15      	ldr	r4, [pc, #84]	; (9268 <usb_serial_configure+0xe8>)
    9212:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    9214:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    9218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    921c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    9220:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    9224:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    9228:	bd70      	pop	{r4, r5, r6, pc}
    922a:	bf00      	nop
    922c:	2002b4a8 	.word	0x2002b4a8
    9230:	2000a000 	.word	0x2000a000
    9234:	2002b494 	.word	0x2002b494
    9238:	2002b48e 	.word	0x2002b48e
    923c:	2002b4a4 	.word	0x2002b4a4
    9240:	2002b492 	.word	0x2002b492
    9244:	20009f00 	.word	0x20009f00
    9248:	2002af5c 	.word	0x2002af5c
    924c:	2002af6c 	.word	0x2002af6c
    9250:	2002b4a0 	.word	0x2002b4a0
    9254:	2002af58 	.word	0x2002af58
    9258:	2002b4a1 	.word	0x2002b4a1
    925c:	00008e81 	.word	0x00008e81
    9260:	402e0000 	.word	0x402e0000
    9264:	2002b47c 	.word	0x2002b47c
    9268:	00008f35 	.word	0x00008f35

0000926c <usb_serial_read>:
{
    926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9270:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9274:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    9278:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 9344 <usb_serial_read+0xd8>
{
    927c:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    927e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    9282:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    9284:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    9288:	2900      	cmp	r1, #0
    928a:	d04f      	beq.n	932c <usb_serial_read+0xc0>
    928c:	4680      	mov	r8, r0
    928e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    9290:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    9292:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 9348 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    9296:	4b26      	ldr	r3, [pc, #152]	; (9330 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    9298:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    929c:	4925      	ldr	r1, [pc, #148]	; (9334 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    929e:	781b      	ldrb	r3, [r3, #0]
    92a0:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    92a2:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    92a6:	d03f      	beq.n	9328 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    92a8:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    92aa:	4b23      	ldr	r3, [pc, #140]	; (9338 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    92ac:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    92ae:	bf28      	it	cs
    92b0:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    92b2:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    92b4:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    92b8:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    92bc:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    92be:	4b1f      	ldr	r3, [pc, #124]	; (933c <usb_serial_read+0xd0>)
    92c0:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    92c4:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    92c8:	42aa      	cmp	r2, r5
    92ca:	d21c      	bcs.n	9306 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    92cc:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    92d0:	4918      	ldr	r1, [pc, #96]	; (9334 <usb_serial_read+0xc8>)
			rx_available -= len;
    92d2:	4c1b      	ldr	r4, [pc, #108]	; (9340 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    92d4:	4461      	add	r1, ip
    92d6:	9201      	str	r2, [sp, #4]
    92d8:	f7fe fecc 	bl	8074 <memcpy>
			rx_available -= len;
    92dc:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    92de:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    92e2:	4658      	mov	r0, fp
			rx_index[i] += len;
    92e4:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    92e6:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    92ea:	442a      	add	r2, r5
			rx_available -= len;
    92ec:	4439      	add	r1, r7
			rx_index[i] += len;
    92ee:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    92f2:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    92f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    92f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    92fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    9300:	b003      	add	sp, #12
    9302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9306:	462a      	mov	r2, r5
			count += avail;
    9308:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    930a:	f7fe feb3 	bl	8074 <memcpy>
			rx_available -= avail;
    930e:	490c      	ldr	r1, [pc, #48]	; (9340 <usb_serial_read+0xd4>)
			rx_tail = tail;
    9310:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    9312:	4630      	mov	r0, r6
			rx_available -= avail;
    9314:	680a      	ldr	r2, [r1, #0]
			p += avail;
    9316:	44a8      	add	r8, r5
			rx_available -= avail;
    9318:	1b52      	subs	r2, r2, r5
    931a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    931c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    9320:	f7ff fd7e 	bl	8e20 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    9324:	45bb      	cmp	fp, r7
    9326:	d8b6      	bhi.n	9296 <usb_serial_read+0x2a>
	return count;
    9328:	4638      	mov	r0, r7
    932a:	e7e3      	b.n	92f4 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    932c:	4608      	mov	r0, r1
    932e:	e7e1      	b.n	92f4 <usb_serial_read+0x88>
    9330:	2002b4a0 	.word	0x2002b4a0
    9334:	20008f00 	.word	0x20008f00
    9338:	2002af7c 	.word	0x2002af7c
    933c:	2002af5c 	.word	0x2002af5c
    9340:	2002af58 	.word	0x2002af58
    9344:	2002b4a1 	.word	0x2002b4a1
    9348:	2002af6c 	.word	0x2002af6c

0000934c <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    934c:	4b0b      	ldr	r3, [pc, #44]	; (937c <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    934e:	4a0c      	ldr	r2, [pc, #48]	; (9380 <usb_serial_peekchar+0x34>)
    9350:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    9352:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    9354:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    9356:	428a      	cmp	r2, r1
    9358:	d00d      	beq.n	9376 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    935a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    935c:	4809      	ldr	r0, [pc, #36]	; (9384 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    935e:	4a0a      	ldr	r2, [pc, #40]	; (9388 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    9360:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    9362:	490a      	ldr	r1, [pc, #40]	; (938c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    9364:	bf28      	it	cs
    9366:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    9368:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    936a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    936e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    9372:	5c58      	ldrb	r0, [r3, r1]
    9374:	4770      	bx	lr
	if (tail == rx_head) return -1;
    9376:	f04f 30ff 	mov.w	r0, #4294967295
}
    937a:	4770      	bx	lr
    937c:	2002b4a0 	.word	0x2002b4a0
    9380:	2002b4a1 	.word	0x2002b4a1
    9384:	2002af7c 	.word	0x2002af7c
    9388:	20008f00 	.word	0x20008f00
    938c:	2002af6c 	.word	0x2002af6c

00009390 <usb_serial_available>:
	uint32_t n = rx_available;
    9390:	4b04      	ldr	r3, [pc, #16]	; (93a4 <usb_serial_available+0x14>)
{
    9392:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    9394:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    9396:	b10c      	cbz	r4, 939c <usb_serial_available+0xc>
}
    9398:	4620      	mov	r0, r4
    939a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    939c:	f000 f8e0 	bl	9560 <yield>
}
    93a0:	4620      	mov	r0, r4
    93a2:	bd10      	pop	{r4, pc}
    93a4:	2002af58 	.word	0x2002af58

000093a8 <usb_serial_flush_input>:
{
    93a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    93ac:	4e14      	ldr	r6, [pc, #80]	; (9400 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    93ae:	4d15      	ldr	r5, [pc, #84]	; (9404 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    93b0:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    93b2:	782a      	ldrb	r2, [r5, #0]
    93b4:	4293      	cmp	r3, r2
    93b6:	d021      	beq.n	93fc <usb_serial_flush_input+0x54>
    93b8:	b2dc      	uxtb	r4, r3
    93ba:	f8df 9050 	ldr.w	r9, [pc, #80]	; 940c <usb_serial_flush_input+0x64>
    93be:	f8df b050 	ldr.w	fp, [pc, #80]	; 9410 <usb_serial_flush_input+0x68>
    93c2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 9414 <usb_serial_flush_input+0x6c>
    93c6:	4f10      	ldr	r7, [pc, #64]	; (9408 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    93c8:	3401      	adds	r4, #1
    93ca:	2c08      	cmp	r4, #8
		rx_tail = tail;
    93cc:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    93d0:	d901      	bls.n	93d6 <usb_serial_flush_input+0x2e>
    93d2:	2400      	movs	r4, #0
    93d4:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    93d6:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    93da:	f8db 3000 	ldr.w	r3, [fp]
    93de:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    93e2:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    93e6:	1a52      	subs	r2, r2, r1
    93e8:	1a9b      	subs	r3, r3, r2
    93ea:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    93ee:	f7ff fd17 	bl	8e20 <rx_queue_transfer>
		rx_tail = tail;
    93f2:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    93f6:	782b      	ldrb	r3, [r5, #0]
    93f8:	42a3      	cmp	r3, r4
    93fa:	d1e5      	bne.n	93c8 <usb_serial_flush_input+0x20>
}
    93fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9400:	2002b4a1 	.word	0x2002b4a1
    9404:	2002b4a0 	.word	0x2002b4a0
    9408:	2002af6c 	.word	0x2002af6c
    940c:	2002af7c 	.word	0x2002af7c
    9410:	2002af58 	.word	0x2002af58
    9414:	2002af5c 	.word	0x2002af5c

00009418 <usb_serial_getchar>:
{
    9418:	b500      	push	{lr}
    941a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    941c:	2101      	movs	r1, #1
    941e:	f10d 0007 	add.w	r0, sp, #7
    9422:	f7ff ff23 	bl	926c <usb_serial_read>
    9426:	b120      	cbz	r0, 9432 <usb_serial_getchar+0x1a>
    9428:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    942c:	b003      	add	sp, #12
    942e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    9432:	f04f 30ff 	mov.w	r0, #4294967295
    9436:	e7f9      	b.n	942c <usb_serial_getchar+0x14>

00009438 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    9438:	4b09      	ldr	r3, [pc, #36]	; (9460 <usb_serial_putchar+0x28>)
{
    943a:	b500      	push	{lr}
    943c:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    943e:	781b      	ldrb	r3, [r3, #0]
{
    9440:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    9444:	b13b      	cbz	r3, 9456 <usb_serial_putchar+0x1e>
    9446:	2101      	movs	r1, #1
    9448:	f10d 0007 	add.w	r0, sp, #7
    944c:	f7ff fdba 	bl	8fc4 <usb_serial_write.part.0>
}
    9450:	b003      	add	sp, #12
    9452:	f85d fb04 	ldr.w	pc, [sp], #4
    9456:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    945a:	b003      	add	sp, #12
    945c:	f85d fb04 	ldr.w	pc, [sp], #4
    9460:	2002b4a7 	.word	0x2002b4a7

00009464 <usb_serial_write>:
	if (!usb_configuration) return 0;
    9464:	4b04      	ldr	r3, [pc, #16]	; (9478 <usb_serial_write+0x14>)
    9466:	781b      	ldrb	r3, [r3, #0]
    9468:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    946c:	b10b      	cbz	r3, 9472 <usb_serial_write+0xe>
    946e:	f7ff bda9 	b.w	8fc4 <usb_serial_write.part.0>
}
    9472:	4610      	mov	r0, r2
    9474:	4770      	bx	lr
    9476:	bf00      	nop
    9478:	2002b4a7 	.word	0x2002b4a7

0000947c <usb_serial_write_buffer_free>:
{
    947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    9480:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    9482:	f8df 8044 	ldr.w	r8, [pc, #68]	; 94c8 <usb_serial_write_buffer_free+0x4c>
    9486:	2301      	movs	r3, #1
    9488:	4d0d      	ldr	r5, [pc, #52]	; (94c0 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    948a:	4627      	mov	r7, r4
    948c:	4e0d      	ldr	r6, [pc, #52]	; (94c4 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    948e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    9492:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9494:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    9496:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    9498:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    949a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    949e:	d005      	beq.n	94ac <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    94a0:	f7ff fc84 	bl	8dac <usb_transfer_status>
    94a4:	0603      	lsls	r3, r0, #24
    94a6:	bf58      	it	pl
    94a8:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    94ac:	2c04      	cmp	r4, #4
    94ae:	d1f0      	bne.n	9492 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    94b0:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    94b4:	2300      	movs	r3, #0
}
    94b6:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    94b8:	f888 3000 	strb.w	r3, [r8]
}
    94bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    94c0:	2000a000 	.word	0x2000a000
    94c4:	2002b4a4 	.word	0x2002b4a4
    94c8:	2002b4a5 	.word	0x2002b4a5

000094cc <usb_serial_flush_output>:
{
    94cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    94d0:	4b1d      	ldr	r3, [pc, #116]	; (9548 <usb_serial_flush_output+0x7c>)
    94d2:	781b      	ldrb	r3, [r3, #0]
    94d4:	b113      	cbz	r3, 94dc <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    94d6:	4d1d      	ldr	r5, [pc, #116]	; (954c <usb_serial_flush_output+0x80>)
    94d8:	882a      	ldrh	r2, [r5, #0]
    94da:	b90a      	cbnz	r2, 94e0 <usb_serial_flush_output+0x14>
}
    94dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    94e0:	4e1b      	ldr	r6, [pc, #108]	; (9550 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    94e2:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    94e6:	491b      	ldr	r1, [pc, #108]	; (9554 <usb_serial_flush_output+0x88>)
    94e8:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    94ea:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    94ec:	4c1a      	ldr	r4, [pc, #104]	; (9558 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    94ee:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    94f2:	4f1a      	ldr	r7, [pc, #104]	; (955c <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    94f4:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    94f8:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    94fa:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    94fc:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    94fe:	4621      	mov	r1, r4
    9500:	2300      	movs	r3, #0
    9502:	f7ff fc19 	bl	8d38 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    9506:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    950a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    950e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9512:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9516:	3420      	adds	r4, #32
	} while (location < end_addr);
    9518:	42a2      	cmp	r2, r4
    951a:	d8fa      	bhi.n	9512 <usb_serial_flush_output+0x46>
	asm("dsb");
    951c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9520:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9524:	2004      	movs	r0, #4
    9526:	4641      	mov	r1, r8
    9528:	f7ff fc1e 	bl	8d68 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    952c:	7833      	ldrb	r3, [r6, #0]
    952e:	3301      	adds	r3, #1
    9530:	b2db      	uxtb	r3, r3
    9532:	2b03      	cmp	r3, #3
    9534:	bf88      	it	hi
    9536:	2300      	movhi	r3, #0
    9538:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    953a:	2300      	movs	r3, #0
    953c:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    953e:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    9542:	703b      	strb	r3, [r7, #0]
}
    9544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9548:	2002b4a7 	.word	0x2002b4a7
    954c:	2002b492 	.word	0x2002b492
    9550:	2002b4a4 	.word	0x2002b4a4
    9554:	2000a000 	.word	0x2000a000
    9558:	2000a080 	.word	0x2000a080
    955c:	2002b4a5 	.word	0x2002b4a5

00009560 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    9564:	4e32      	ldr	r6, [pc, #200]	; (9630 <yield+0xd0>)
    9566:	7833      	ldrb	r3, [r6, #0]
    9568:	b163      	cbz	r3, 9584 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    956a:	4f32      	ldr	r7, [pc, #200]	; (9634 <yield+0xd4>)
    956c:	783a      	ldrb	r2, [r7, #0]
    956e:	b94a      	cbnz	r2, 9584 <yield+0x24>
	running = 1;
    9570:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    9572:	07d9      	lsls	r1, r3, #31
	running = 1;
    9574:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    9576:	d444      	bmi.n	9602 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    9578:	079a      	lsls	r2, r3, #30
    957a:	d426      	bmi.n	95ca <yield+0x6a>

	running = 0;
    957c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    957e:	075b      	lsls	r3, r3, #29
	running = 0;
    9580:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    9582:	d401      	bmi.n	9588 <yield+0x28>
	
};
    9584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    9588:	4b2b      	ldr	r3, [pc, #172]	; (9638 <yield+0xd8>)
    958a:	681a      	ldr	r2, [r3, #0]
    958c:	2a00      	cmp	r2, #0
    958e:	d0f9      	beq.n	9584 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9590:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    9594:	2a00      	cmp	r2, #0
    9596:	d1f5      	bne.n	9584 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9598:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    959c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    959e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    95a0:	2800      	cmp	r0, #0
    95a2:	d03b      	beq.n	961c <yield+0xbc>
		if (runningFromYield) {
    95a4:	4c25      	ldr	r4, [pc, #148]	; (963c <yield+0xdc>)
    95a6:	7821      	ldrb	r1, [r4, #0]
    95a8:	2900      	cmp	r1, #0
    95aa:	d137      	bne.n	961c <yield+0xbc>
		runningFromYield = true;
    95ac:	2201      	movs	r2, #1
    95ae:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    95b0:	6942      	ldr	r2, [r0, #20]
    95b2:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    95b4:	2a00      	cmp	r2, #0
    95b6:	d038      	beq.n	962a <yield+0xca>
			firstYield->_prev = nullptr;
    95b8:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    95ba:	b905      	cbnz	r5, 95be <yield+0x5e>
    95bc:	b662      	cpsie	i
		first->_triggered = false;
    95be:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    95c0:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    95c2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    95c4:	4798      	blx	r3
		runningFromYield = false;
    95c6:	7025      	strb	r5, [r4, #0]
    95c8:	e7dc      	b.n	9584 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    95ca:	f8df 807c 	ldr.w	r8, [pc, #124]	; 9648 <yield+0xe8>
    95ce:	f898 2000 	ldrb.w	r2, [r8]
    95d2:	2a00      	cmp	r2, #0
    95d4:	d0d2      	beq.n	957c <yield+0x1c>
    95d6:	2500      	movs	r5, #0
    95d8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 964c <yield+0xec>
    95dc:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    95de:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    95e2:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    95e4:	6823      	ldr	r3, [r4, #0]
    95e6:	4620      	mov	r0, r4
    95e8:	691b      	ldr	r3, [r3, #16]
    95ea:	4798      	blx	r3
    95ec:	b110      	cbz	r0, 95f4 <yield+0x94>
    95ee:	6963      	ldr	r3, [r4, #20]
    95f0:	689b      	ldr	r3, [r3, #8]
    95f2:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    95f4:	f898 2000 	ldrb.w	r2, [r8]
    95f8:	b2eb      	uxtb	r3, r5
    95fa:	429a      	cmp	r2, r3
    95fc:	d8ef      	bhi.n	95de <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    95fe:	7833      	ldrb	r3, [r6, #0]
    9600:	e7bc      	b.n	957c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    9602:	f7ff fec5 	bl	9390 <usb_serial_available>
		if (Serial.available()) serialEvent();
    9606:	b968      	cbnz	r0, 9624 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    9608:	4b0d      	ldr	r3, [pc, #52]	; (9640 <yield+0xe0>)
    960a:	781b      	ldrb	r3, [r3, #0]
    960c:	b90b      	cbnz	r3, 9612 <yield+0xb2>
    960e:	7833      	ldrb	r3, [r6, #0]
    9610:	e7b2      	b.n	9578 <yield+0x18>
    9612:	7833      	ldrb	r3, [r6, #0]
    9614:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    9618:	7033      	strb	r3, [r6, #0]
    961a:	e7ad      	b.n	9578 <yield+0x18>
		if (doit) __enable_irq();
    961c:	2d00      	cmp	r5, #0
    961e:	d1b1      	bne.n	9584 <yield+0x24>
    9620:	b662      	cpsie	i
    9622:	e7af      	b.n	9584 <yield+0x24>
		if (Serial.available()) serialEvent();
    9624:	f000 f8cc 	bl	97c0 <serialEvent()>
    9628:	e7ee      	b.n	9608 <yield+0xa8>
			lastYield = nullptr;
    962a:	4b06      	ldr	r3, [pc, #24]	; (9644 <yield+0xe4>)
    962c:	601a      	str	r2, [r3, #0]
    962e:	e7c4      	b.n	95ba <yield+0x5a>
    9630:	20008beb 	.word	0x20008beb
    9634:	2002b49d 	.word	0x2002b49d
    9638:	2002a874 	.word	0x2002a874
    963c:	2002b49b 	.word	0x2002b49b
    9640:	60002766 	.word	0x60002766
    9644:	2002a880 	.word	0x2002a880
    9648:	2002b49c 	.word	0x2002b49c
    964c:	2002a884 	.word	0x2002a884

00009650 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    9650:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    9652:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9654:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    9658:	4619      	mov	r1, r3
{
    965a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    965c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9660:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9664:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9668:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    966c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    9670:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    9672:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9676:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    967a:	b29b      	uxth	r3, r3
    967c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    9680:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9684:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    9688:	3101      	adds	r1, #1
    968a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    968e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9690:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9692:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9696:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9698:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    969a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    969c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    969e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    96a2:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    96a4:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    96a6:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    96a8:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    96aa:	d1eb      	bne.n	9684 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    96ac:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    96b0:	b29b      	uxth	r3, r3
    96b2:	f043 030f 	orr.w	r3, r3, #15
    96b6:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    96ba:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    96be:	b29b      	uxth	r3, r3
    96c0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    96c4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    96c8:	bd10      	pop	{r4, pc}
    96ca:	bf00      	nop

000096cc <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    96cc:	4b37      	ldr	r3, [pc, #220]	; (97ac <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    96ce:	4a38      	ldr	r2, [pc, #224]	; (97b0 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    96d0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    96d2:	4838      	ldr	r0, [pc, #224]	; (97b4 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    96d4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    96d8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    96da:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    96dc:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    96e0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    96e4:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    96e8:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    96ec:	430a      	orrs	r2, r1
    96ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    96f2:	f7ff ffad 	bl	9650 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    96f6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    96fa:	f7ff ffa9 	bl	9650 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    96fe:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    9702:	f7ff ffa5 	bl	9650 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    9706:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    970a:	f7ff ffa1 	bl	9650 <flexpwm_init>
	for (i=0; i < 4; i++) {
    970e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    9710:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9714:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    9718:	4611      	mov	r1, r2
    971a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    971e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    9722:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9724:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    9726:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    9728:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    972a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    972e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9730:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9732:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    9736:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9738:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    973a:	d1ee      	bne.n	971a <pwm_init+0x4e>
    973c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    973e:	481e      	ldr	r0, [pc, #120]	; (97b8 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9740:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9744:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    9748:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    974a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    974e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    9752:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    9756:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    975a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    975c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    975e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    9760:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9762:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9766:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9768:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    976a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    976e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9770:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    9772:	d1ee      	bne.n	9752 <pwm_init+0x86>
    9774:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    9776:	4811      	ldr	r0, [pc, #68]	; (97bc <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9778:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    977a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    977e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9780:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9784:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    9788:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    978c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    9790:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9792:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    9794:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    9796:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9798:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    979a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    979c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    979e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    97a2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    97a4:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    97a8:	d1ee      	bne.n	9788 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    97aa:	bd70      	pop	{r4, r5, r6, pc}
    97ac:	400fc000 	.word	0x400fc000
    97b0:	fc030000 	.word	0xfc030000
    97b4:	403dc000 	.word	0x403dc000
    97b8:	401e0000 	.word	0x401e0000
    97bc:	401e4000 	.word	0x401e4000

000097c0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    97c0:	4770      	bx	lr
    97c2:	bf00      	nop

000097c4 <sm_align_pool>:
{
    97c4:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    97c6:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    97ca:	b15b      	cbz	r3, 97e4 <sm_align_pool+0x20>
    97cc:	b1ba      	cbz	r2, 97fe <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    97ce:	4b0f      	ldr	r3, [pc, #60]	; (980c <sm_align_pool+0x48>)
    97d0:	fba3 1302 	umull	r1, r3, r3, r2
    97d4:	08db      	lsrs	r3, r3, #3
    97d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    97da:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    97de:	d10a      	bne.n	97f6 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    97e0:	2001      	movs	r0, #1
}
    97e2:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    97e4:	4b09      	ldr	r3, [pc, #36]	; (980c <sm_align_pool+0x48>)
    97e6:	fba3 1302 	umull	r1, r3, r3, r2
    97ea:	08db      	lsrs	r3, r3, #3
    97ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    97f0:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    97f4:	d001      	beq.n	97fa <sm_align_pool+0x36>
    97f6:	1ad2      	subs	r2, r2, r3
    97f8:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    97fa:	2af0      	cmp	r2, #240	; 0xf0
    97fc:	d8f0      	bhi.n	97e0 <sm_align_pool+0x1c>
		errno = ENOSPC;
    97fe:	f002 fa3b 	bl	bc78 <__errno>
    9802:	221c      	movs	r2, #28
    9804:	4603      	mov	r3, r0
    9806:	2000      	movs	r0, #0
    9808:	601a      	str	r2, [r3, #0]
}
    980a:	bd08      	pop	{r3, pc}
    980c:	aaaaaaab 	.word	0xaaaaaaab

00009810 <sm_set_pool>:
{
    9810:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    9812:	4604      	mov	r4, r0
    9814:	b338      	cbz	r0, 9866 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    9816:	b119      	cbz	r1, 9820 <sm_set_pool+0x10>
    9818:	fab2 f682 	clz	r6, r2
    981c:	0976      	lsrs	r6, r6, #5
    981e:	b9a2      	cbnz	r2, 984a <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    9820:	6820      	ldr	r0, [r4, #0]
    9822:	b300      	cbz	r0, 9866 <sm_set_pool+0x56>
    9824:	6862      	ldr	r2, [r4, #4]
    9826:	b1f2      	cbz	r2, 9866 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    9828:	4b18      	ldr	r3, [pc, #96]	; (988c <sm_set_pool+0x7c>)
    982a:	4919      	ldr	r1, [pc, #100]	; (9890 <sm_set_pool+0x80>)
    982c:	fb02 f303 	mul.w	r3, r2, r3
    9830:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    9834:	d317      	bcc.n	9866 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    9836:	68a3      	ldr	r3, [r4, #8]
    9838:	b9e3      	cbnz	r3, 9874 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    983a:	2200      	movs	r2, #0
			return 1;
    983c:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    983e:	6022      	str	r2, [r4, #0]
    9840:	6062      	str	r2, [r4, #4]
    9842:	60a2      	str	r2, [r4, #8]
    9844:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    9846:	4618      	mov	r0, r3
    9848:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    984a:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    984c:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    984e:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    9852:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    9854:	f7ff ffb6 	bl	97c4 <sm_align_pool>
    9858:	4603      	mov	r3, r0
    985a:	2800      	cmp	r0, #0
    985c:	d0f3      	beq.n	9846 <sm_set_pool+0x36>
	if (do_zero) {
    985e:	b96d      	cbnz	r5, 987c <sm_set_pool+0x6c>
	return 1;
    9860:	2301      	movs	r3, #1
}
    9862:	4618      	mov	r0, r3
    9864:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    9866:	f002 fa07 	bl	bc78 <__errno>
    986a:	2216      	movs	r2, #22
		return 0;
    986c:	2300      	movs	r3, #0
		errno = EINVAL;
    986e:	6002      	str	r2, [r0, #0]
}
    9870:	4618      	mov	r0, r3
    9872:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    9874:	2100      	movs	r1, #0
    9876:	f002 f8c9 	bl	ba0c <memset>
    987a:	e7de      	b.n	983a <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    987c:	6862      	ldr	r2, [r4, #4]
    987e:	4631      	mov	r1, r6
    9880:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    9882:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    9884:	f002 f8c2 	bl	ba0c <memset>
	return 1;
    9888:	2301      	movs	r3, #1
    988a:	e7dc      	b.n	9846 <sm_set_pool+0x36>
    988c:	aaaaaaab 	.word	0xaaaaaaab
    9890:	15555555 	.word	0x15555555

00009894 <__aeabi_atexit>:
    9894:	4603      	mov	r3, r0
    9896:	4608      	mov	r0, r1
    9898:	4619      	mov	r1, r3
    989a:	f001 be27 	b.w	b4ec <__cxa_atexit>
    989e:	bf00      	nop

000098a0 <__aeabi_uldivmod>:
    98a0:	b953      	cbnz	r3, 98b8 <__aeabi_uldivmod+0x18>
    98a2:	b94a      	cbnz	r2, 98b8 <__aeabi_uldivmod+0x18>
    98a4:	2900      	cmp	r1, #0
    98a6:	bf08      	it	eq
    98a8:	2800      	cmpeq	r0, #0
    98aa:	bf1c      	itt	ne
    98ac:	f04f 31ff 	movne.w	r1, #4294967295
    98b0:	f04f 30ff 	movne.w	r0, #4294967295
    98b4:	f000 b970 	b.w	9b98 <__aeabi_idiv0>
    98b8:	f1ad 0c08 	sub.w	ip, sp, #8
    98bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    98c0:	f000 f806 	bl	98d0 <__udivmoddi4>
    98c4:	f8dd e004 	ldr.w	lr, [sp, #4]
    98c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    98cc:	b004      	add	sp, #16
    98ce:	4770      	bx	lr

000098d0 <__udivmoddi4>:
    98d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    98d4:	9e08      	ldr	r6, [sp, #32]
    98d6:	460d      	mov	r5, r1
    98d8:	4604      	mov	r4, r0
    98da:	460f      	mov	r7, r1
    98dc:	2b00      	cmp	r3, #0
    98de:	d14a      	bne.n	9976 <__udivmoddi4+0xa6>
    98e0:	428a      	cmp	r2, r1
    98e2:	4694      	mov	ip, r2
    98e4:	d965      	bls.n	99b2 <__udivmoddi4+0xe2>
    98e6:	fab2 f382 	clz	r3, r2
    98ea:	b143      	cbz	r3, 98fe <__udivmoddi4+0x2e>
    98ec:	fa02 fc03 	lsl.w	ip, r2, r3
    98f0:	f1c3 0220 	rsb	r2, r3, #32
    98f4:	409f      	lsls	r7, r3
    98f6:	fa20 f202 	lsr.w	r2, r0, r2
    98fa:	4317      	orrs	r7, r2
    98fc:	409c      	lsls	r4, r3
    98fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    9902:	fa1f f58c 	uxth.w	r5, ip
    9906:	fbb7 f1fe 	udiv	r1, r7, lr
    990a:	0c22      	lsrs	r2, r4, #16
    990c:	fb0e 7711 	mls	r7, lr, r1, r7
    9910:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    9914:	fb01 f005 	mul.w	r0, r1, r5
    9918:	4290      	cmp	r0, r2
    991a:	d90a      	bls.n	9932 <__udivmoddi4+0x62>
    991c:	eb1c 0202 	adds.w	r2, ip, r2
    9920:	f101 37ff 	add.w	r7, r1, #4294967295
    9924:	f080 811c 	bcs.w	9b60 <__udivmoddi4+0x290>
    9928:	4290      	cmp	r0, r2
    992a:	f240 8119 	bls.w	9b60 <__udivmoddi4+0x290>
    992e:	3902      	subs	r1, #2
    9930:	4462      	add	r2, ip
    9932:	1a12      	subs	r2, r2, r0
    9934:	b2a4      	uxth	r4, r4
    9936:	fbb2 f0fe 	udiv	r0, r2, lr
    993a:	fb0e 2210 	mls	r2, lr, r0, r2
    993e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    9942:	fb00 f505 	mul.w	r5, r0, r5
    9946:	42a5      	cmp	r5, r4
    9948:	d90a      	bls.n	9960 <__udivmoddi4+0x90>
    994a:	eb1c 0404 	adds.w	r4, ip, r4
    994e:	f100 32ff 	add.w	r2, r0, #4294967295
    9952:	f080 8107 	bcs.w	9b64 <__udivmoddi4+0x294>
    9956:	42a5      	cmp	r5, r4
    9958:	f240 8104 	bls.w	9b64 <__udivmoddi4+0x294>
    995c:	4464      	add	r4, ip
    995e:	3802      	subs	r0, #2
    9960:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    9964:	1b64      	subs	r4, r4, r5
    9966:	2100      	movs	r1, #0
    9968:	b11e      	cbz	r6, 9972 <__udivmoddi4+0xa2>
    996a:	40dc      	lsrs	r4, r3
    996c:	2300      	movs	r3, #0
    996e:	e9c6 4300 	strd	r4, r3, [r6]
    9972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9976:	428b      	cmp	r3, r1
    9978:	d908      	bls.n	998c <__udivmoddi4+0xbc>
    997a:	2e00      	cmp	r6, #0
    997c:	f000 80ed 	beq.w	9b5a <__udivmoddi4+0x28a>
    9980:	2100      	movs	r1, #0
    9982:	e9c6 0500 	strd	r0, r5, [r6]
    9986:	4608      	mov	r0, r1
    9988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    998c:	fab3 f183 	clz	r1, r3
    9990:	2900      	cmp	r1, #0
    9992:	d149      	bne.n	9a28 <__udivmoddi4+0x158>
    9994:	42ab      	cmp	r3, r5
    9996:	d302      	bcc.n	999e <__udivmoddi4+0xce>
    9998:	4282      	cmp	r2, r0
    999a:	f200 80f8 	bhi.w	9b8e <__udivmoddi4+0x2be>
    999e:	1a84      	subs	r4, r0, r2
    99a0:	eb65 0203 	sbc.w	r2, r5, r3
    99a4:	2001      	movs	r0, #1
    99a6:	4617      	mov	r7, r2
    99a8:	2e00      	cmp	r6, #0
    99aa:	d0e2      	beq.n	9972 <__udivmoddi4+0xa2>
    99ac:	e9c6 4700 	strd	r4, r7, [r6]
    99b0:	e7df      	b.n	9972 <__udivmoddi4+0xa2>
    99b2:	b902      	cbnz	r2, 99b6 <__udivmoddi4+0xe6>
    99b4:	deff      	udf	#255	; 0xff
    99b6:	fab2 f382 	clz	r3, r2
    99ba:	2b00      	cmp	r3, #0
    99bc:	f040 8090 	bne.w	9ae0 <__udivmoddi4+0x210>
    99c0:	1a8a      	subs	r2, r1, r2
    99c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
    99c6:	fa1f fe8c 	uxth.w	lr, ip
    99ca:	2101      	movs	r1, #1
    99cc:	fbb2 f5f7 	udiv	r5, r2, r7
    99d0:	fb07 2015 	mls	r0, r7, r5, r2
    99d4:	0c22      	lsrs	r2, r4, #16
    99d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    99da:	fb0e f005 	mul.w	r0, lr, r5
    99de:	4290      	cmp	r0, r2
    99e0:	d908      	bls.n	99f4 <__udivmoddi4+0x124>
    99e2:	eb1c 0202 	adds.w	r2, ip, r2
    99e6:	f105 38ff 	add.w	r8, r5, #4294967295
    99ea:	d202      	bcs.n	99f2 <__udivmoddi4+0x122>
    99ec:	4290      	cmp	r0, r2
    99ee:	f200 80cb 	bhi.w	9b88 <__udivmoddi4+0x2b8>
    99f2:	4645      	mov	r5, r8
    99f4:	1a12      	subs	r2, r2, r0
    99f6:	b2a4      	uxth	r4, r4
    99f8:	fbb2 f0f7 	udiv	r0, r2, r7
    99fc:	fb07 2210 	mls	r2, r7, r0, r2
    9a00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    9a04:	fb0e fe00 	mul.w	lr, lr, r0
    9a08:	45a6      	cmp	lr, r4
    9a0a:	d908      	bls.n	9a1e <__udivmoddi4+0x14e>
    9a0c:	eb1c 0404 	adds.w	r4, ip, r4
    9a10:	f100 32ff 	add.w	r2, r0, #4294967295
    9a14:	d202      	bcs.n	9a1c <__udivmoddi4+0x14c>
    9a16:	45a6      	cmp	lr, r4
    9a18:	f200 80bb 	bhi.w	9b92 <__udivmoddi4+0x2c2>
    9a1c:	4610      	mov	r0, r2
    9a1e:	eba4 040e 	sub.w	r4, r4, lr
    9a22:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    9a26:	e79f      	b.n	9968 <__udivmoddi4+0x98>
    9a28:	f1c1 0720 	rsb	r7, r1, #32
    9a2c:	408b      	lsls	r3, r1
    9a2e:	fa22 fc07 	lsr.w	ip, r2, r7
    9a32:	ea4c 0c03 	orr.w	ip, ip, r3
    9a36:	fa05 f401 	lsl.w	r4, r5, r1
    9a3a:	fa20 f307 	lsr.w	r3, r0, r7
    9a3e:	40fd      	lsrs	r5, r7
    9a40:	ea4f 491c 	mov.w	r9, ip, lsr #16
    9a44:	4323      	orrs	r3, r4
    9a46:	fbb5 f8f9 	udiv	r8, r5, r9
    9a4a:	fa1f fe8c 	uxth.w	lr, ip
    9a4e:	fb09 5518 	mls	r5, r9, r8, r5
    9a52:	0c1c      	lsrs	r4, r3, #16
    9a54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    9a58:	fb08 f50e 	mul.w	r5, r8, lr
    9a5c:	42a5      	cmp	r5, r4
    9a5e:	fa02 f201 	lsl.w	r2, r2, r1
    9a62:	fa00 f001 	lsl.w	r0, r0, r1
    9a66:	d90b      	bls.n	9a80 <__udivmoddi4+0x1b0>
    9a68:	eb1c 0404 	adds.w	r4, ip, r4
    9a6c:	f108 3aff 	add.w	sl, r8, #4294967295
    9a70:	f080 8088 	bcs.w	9b84 <__udivmoddi4+0x2b4>
    9a74:	42a5      	cmp	r5, r4
    9a76:	f240 8085 	bls.w	9b84 <__udivmoddi4+0x2b4>
    9a7a:	f1a8 0802 	sub.w	r8, r8, #2
    9a7e:	4464      	add	r4, ip
    9a80:	1b64      	subs	r4, r4, r5
    9a82:	b29d      	uxth	r5, r3
    9a84:	fbb4 f3f9 	udiv	r3, r4, r9
    9a88:	fb09 4413 	mls	r4, r9, r3, r4
    9a8c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    9a90:	fb03 fe0e 	mul.w	lr, r3, lr
    9a94:	45a6      	cmp	lr, r4
    9a96:	d908      	bls.n	9aaa <__udivmoddi4+0x1da>
    9a98:	eb1c 0404 	adds.w	r4, ip, r4
    9a9c:	f103 35ff 	add.w	r5, r3, #4294967295
    9aa0:	d26c      	bcs.n	9b7c <__udivmoddi4+0x2ac>
    9aa2:	45a6      	cmp	lr, r4
    9aa4:	d96a      	bls.n	9b7c <__udivmoddi4+0x2ac>
    9aa6:	3b02      	subs	r3, #2
    9aa8:	4464      	add	r4, ip
    9aaa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    9aae:	fba3 9502 	umull	r9, r5, r3, r2
    9ab2:	eba4 040e 	sub.w	r4, r4, lr
    9ab6:	42ac      	cmp	r4, r5
    9ab8:	46c8      	mov	r8, r9
    9aba:	46ae      	mov	lr, r5
    9abc:	d356      	bcc.n	9b6c <__udivmoddi4+0x29c>
    9abe:	d053      	beq.n	9b68 <__udivmoddi4+0x298>
    9ac0:	b156      	cbz	r6, 9ad8 <__udivmoddi4+0x208>
    9ac2:	ebb0 0208 	subs.w	r2, r0, r8
    9ac6:	eb64 040e 	sbc.w	r4, r4, lr
    9aca:	fa04 f707 	lsl.w	r7, r4, r7
    9ace:	40ca      	lsrs	r2, r1
    9ad0:	40cc      	lsrs	r4, r1
    9ad2:	4317      	orrs	r7, r2
    9ad4:	e9c6 7400 	strd	r7, r4, [r6]
    9ad8:	4618      	mov	r0, r3
    9ada:	2100      	movs	r1, #0
    9adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ae0:	f1c3 0120 	rsb	r1, r3, #32
    9ae4:	fa02 fc03 	lsl.w	ip, r2, r3
    9ae8:	fa20 f201 	lsr.w	r2, r0, r1
    9aec:	fa25 f101 	lsr.w	r1, r5, r1
    9af0:	409d      	lsls	r5, r3
    9af2:	432a      	orrs	r2, r5
    9af4:	ea4f 471c 	mov.w	r7, ip, lsr #16
    9af8:	fa1f fe8c 	uxth.w	lr, ip
    9afc:	fbb1 f0f7 	udiv	r0, r1, r7
    9b00:	fb07 1510 	mls	r5, r7, r0, r1
    9b04:	0c11      	lsrs	r1, r2, #16
    9b06:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    9b0a:	fb00 f50e 	mul.w	r5, r0, lr
    9b0e:	428d      	cmp	r5, r1
    9b10:	fa04 f403 	lsl.w	r4, r4, r3
    9b14:	d908      	bls.n	9b28 <__udivmoddi4+0x258>
    9b16:	eb1c 0101 	adds.w	r1, ip, r1
    9b1a:	f100 38ff 	add.w	r8, r0, #4294967295
    9b1e:	d22f      	bcs.n	9b80 <__udivmoddi4+0x2b0>
    9b20:	428d      	cmp	r5, r1
    9b22:	d92d      	bls.n	9b80 <__udivmoddi4+0x2b0>
    9b24:	3802      	subs	r0, #2
    9b26:	4461      	add	r1, ip
    9b28:	1b49      	subs	r1, r1, r5
    9b2a:	b292      	uxth	r2, r2
    9b2c:	fbb1 f5f7 	udiv	r5, r1, r7
    9b30:	fb07 1115 	mls	r1, r7, r5, r1
    9b34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    9b38:	fb05 f10e 	mul.w	r1, r5, lr
    9b3c:	4291      	cmp	r1, r2
    9b3e:	d908      	bls.n	9b52 <__udivmoddi4+0x282>
    9b40:	eb1c 0202 	adds.w	r2, ip, r2
    9b44:	f105 38ff 	add.w	r8, r5, #4294967295
    9b48:	d216      	bcs.n	9b78 <__udivmoddi4+0x2a8>
    9b4a:	4291      	cmp	r1, r2
    9b4c:	d914      	bls.n	9b78 <__udivmoddi4+0x2a8>
    9b4e:	3d02      	subs	r5, #2
    9b50:	4462      	add	r2, ip
    9b52:	1a52      	subs	r2, r2, r1
    9b54:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    9b58:	e738      	b.n	99cc <__udivmoddi4+0xfc>
    9b5a:	4631      	mov	r1, r6
    9b5c:	4630      	mov	r0, r6
    9b5e:	e708      	b.n	9972 <__udivmoddi4+0xa2>
    9b60:	4639      	mov	r1, r7
    9b62:	e6e6      	b.n	9932 <__udivmoddi4+0x62>
    9b64:	4610      	mov	r0, r2
    9b66:	e6fb      	b.n	9960 <__udivmoddi4+0x90>
    9b68:	4548      	cmp	r0, r9
    9b6a:	d2a9      	bcs.n	9ac0 <__udivmoddi4+0x1f0>
    9b6c:	ebb9 0802 	subs.w	r8, r9, r2
    9b70:	eb65 0e0c 	sbc.w	lr, r5, ip
    9b74:	3b01      	subs	r3, #1
    9b76:	e7a3      	b.n	9ac0 <__udivmoddi4+0x1f0>
    9b78:	4645      	mov	r5, r8
    9b7a:	e7ea      	b.n	9b52 <__udivmoddi4+0x282>
    9b7c:	462b      	mov	r3, r5
    9b7e:	e794      	b.n	9aaa <__udivmoddi4+0x1da>
    9b80:	4640      	mov	r0, r8
    9b82:	e7d1      	b.n	9b28 <__udivmoddi4+0x258>
    9b84:	46d0      	mov	r8, sl
    9b86:	e77b      	b.n	9a80 <__udivmoddi4+0x1b0>
    9b88:	3d02      	subs	r5, #2
    9b8a:	4462      	add	r2, ip
    9b8c:	e732      	b.n	99f4 <__udivmoddi4+0x124>
    9b8e:	4608      	mov	r0, r1
    9b90:	e70a      	b.n	99a8 <__udivmoddi4+0xd8>
    9b92:	4464      	add	r4, ip
    9b94:	3802      	subs	r0, #2
    9b96:	e742      	b.n	9a1e <__udivmoddi4+0x14e>

00009b98 <__aeabi_idiv0>:
    9b98:	4770      	bx	lr
    9b9a:	bf00      	nop

00009b9c <malloc>:
    9b9c:	4b02      	ldr	r3, [pc, #8]	; (9ba8 <malloc+0xc>)
    9b9e:	4601      	mov	r1, r0
    9ba0:	6818      	ldr	r0, [r3, #0]
    9ba2:	f000 b80b 	b.w	9bbc <_malloc_r>
    9ba6:	bf00      	nop
    9ba8:	20008b70 	.word	0x20008b70

00009bac <free>:
    9bac:	4b02      	ldr	r3, [pc, #8]	; (9bb8 <free+0xc>)
    9bae:	4601      	mov	r1, r0
    9bb0:	6818      	ldr	r0, [r3, #0]
    9bb2:	f002 bbd7 	b.w	c364 <_free_r>
    9bb6:	bf00      	nop
    9bb8:	20008b70 	.word	0x20008b70

00009bbc <_malloc_r>:
    9bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bc0:	f101 060b 	add.w	r6, r1, #11
    9bc4:	2e16      	cmp	r6, #22
    9bc6:	b083      	sub	sp, #12
    9bc8:	4604      	mov	r4, r0
    9bca:	d824      	bhi.n	9c16 <_malloc_r+0x5a>
    9bcc:	2910      	cmp	r1, #16
    9bce:	f200 80ba 	bhi.w	9d46 <_malloc_r+0x18a>
    9bd2:	f000 faa3 	bl	a11c <__malloc_lock>
    9bd6:	2610      	movs	r6, #16
    9bd8:	2218      	movs	r2, #24
    9bda:	2002      	movs	r0, #2
    9bdc:	4fb5      	ldr	r7, [pc, #724]	; (9eb4 <_malloc_r+0x2f8>)
    9bde:	443a      	add	r2, r7
    9be0:	f1a2 0108 	sub.w	r1, r2, #8
    9be4:	6853      	ldr	r3, [r2, #4]
    9be6:	428b      	cmp	r3, r1
    9be8:	f000 80ba 	beq.w	9d60 <_malloc_r+0x1a4>
    9bec:	685a      	ldr	r2, [r3, #4]
    9bee:	68d9      	ldr	r1, [r3, #12]
    9bf0:	f022 0203 	bic.w	r2, r2, #3
    9bf4:	441a      	add	r2, r3
    9bf6:	689d      	ldr	r5, [r3, #8]
    9bf8:	60e9      	str	r1, [r5, #12]
    9bfa:	608d      	str	r5, [r1, #8]
    9bfc:	6851      	ldr	r1, [r2, #4]
    9bfe:	f041 0101 	orr.w	r1, r1, #1
    9c02:	4620      	mov	r0, r4
    9c04:	6051      	str	r1, [r2, #4]
    9c06:	f103 0508 	add.w	r5, r3, #8
    9c0a:	f000 fa8d 	bl	a128 <__malloc_unlock>
    9c0e:	4628      	mov	r0, r5
    9c10:	b003      	add	sp, #12
    9c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c16:	f036 0607 	bics.w	r6, r6, #7
    9c1a:	f100 8094 	bmi.w	9d46 <_malloc_r+0x18a>
    9c1e:	42b1      	cmp	r1, r6
    9c20:	f200 8091 	bhi.w	9d46 <_malloc_r+0x18a>
    9c24:	f000 fa7a 	bl	a11c <__malloc_lock>
    9c28:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    9c2c:	f0c0 819a 	bcc.w	9f64 <_malloc_r+0x3a8>
    9c30:	0a73      	lsrs	r3, r6, #9
    9c32:	f000 808f 	beq.w	9d54 <_malloc_r+0x198>
    9c36:	2b04      	cmp	r3, #4
    9c38:	f200 816f 	bhi.w	9f1a <_malloc_r+0x35e>
    9c3c:	09b3      	lsrs	r3, r6, #6
    9c3e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    9c42:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    9c46:	00c3      	lsls	r3, r0, #3
    9c48:	4f9a      	ldr	r7, [pc, #616]	; (9eb4 <_malloc_r+0x2f8>)
    9c4a:	443b      	add	r3, r7
    9c4c:	f1a3 0508 	sub.w	r5, r3, #8
    9c50:	685b      	ldr	r3, [r3, #4]
    9c52:	429d      	cmp	r5, r3
    9c54:	d106      	bne.n	9c64 <_malloc_r+0xa8>
    9c56:	e00c      	b.n	9c72 <_malloc_r+0xb6>
    9c58:	2900      	cmp	r1, #0
    9c5a:	f280 8127 	bge.w	9eac <_malloc_r+0x2f0>
    9c5e:	68db      	ldr	r3, [r3, #12]
    9c60:	429d      	cmp	r5, r3
    9c62:	d006      	beq.n	9c72 <_malloc_r+0xb6>
    9c64:	685a      	ldr	r2, [r3, #4]
    9c66:	f022 0203 	bic.w	r2, r2, #3
    9c6a:	1b91      	subs	r1, r2, r6
    9c6c:	290f      	cmp	r1, #15
    9c6e:	ddf3      	ble.n	9c58 <_malloc_r+0x9c>
    9c70:	4660      	mov	r0, ip
    9c72:	693d      	ldr	r5, [r7, #16]
    9c74:	f8df c250 	ldr.w	ip, [pc, #592]	; 9ec8 <_malloc_r+0x30c>
    9c78:	4565      	cmp	r5, ip
    9c7a:	d07c      	beq.n	9d76 <_malloc_r+0x1ba>
    9c7c:	686a      	ldr	r2, [r5, #4]
    9c7e:	f022 0203 	bic.w	r2, r2, #3
    9c82:	1b93      	subs	r3, r2, r6
    9c84:	2b0f      	cmp	r3, #15
    9c86:	f300 817b 	bgt.w	9f80 <_malloc_r+0x3c4>
    9c8a:	2b00      	cmp	r3, #0
    9c8c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    9c90:	f280 816c 	bge.w	9f6c <_malloc_r+0x3b0>
    9c94:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    9c98:	f080 811a 	bcs.w	9ed0 <_malloc_r+0x314>
    9c9c:	08d3      	lsrs	r3, r2, #3
    9c9e:	6879      	ldr	r1, [r7, #4]
    9ca0:	3301      	adds	r3, #1
    9ca2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    9ca6:	2201      	movs	r2, #1
    9ca8:	fa02 f20e 	lsl.w	r2, r2, lr
    9cac:	430a      	orrs	r2, r1
    9cae:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    9cb2:	f8c5 e008 	str.w	lr, [r5, #8]
    9cb6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    9cba:	3908      	subs	r1, #8
    9cbc:	60e9      	str	r1, [r5, #12]
    9cbe:	607a      	str	r2, [r7, #4]
    9cc0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    9cc4:	f8ce 500c 	str.w	r5, [lr, #12]
    9cc8:	1083      	asrs	r3, r0, #2
    9cca:	2101      	movs	r1, #1
    9ccc:	4099      	lsls	r1, r3
    9cce:	4291      	cmp	r1, r2
    9cd0:	d857      	bhi.n	9d82 <_malloc_r+0x1c6>
    9cd2:	4211      	tst	r1, r2
    9cd4:	d106      	bne.n	9ce4 <_malloc_r+0x128>
    9cd6:	f020 0003 	bic.w	r0, r0, #3
    9cda:	0049      	lsls	r1, r1, #1
    9cdc:	4211      	tst	r1, r2
    9cde:	f100 0004 	add.w	r0, r0, #4
    9ce2:	d0fa      	beq.n	9cda <_malloc_r+0x11e>
    9ce4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    9ce8:	464d      	mov	r5, r9
    9cea:	4686      	mov	lr, r0
    9cec:	f8d5 800c 	ldr.w	r8, [r5, #12]
    9cf0:	4545      	cmp	r5, r8
    9cf2:	d108      	bne.n	9d06 <_malloc_r+0x14a>
    9cf4:	e11d      	b.n	9f32 <_malloc_r+0x376>
    9cf6:	2b00      	cmp	r3, #0
    9cf8:	f280 8124 	bge.w	9f44 <_malloc_r+0x388>
    9cfc:	f8d8 800c 	ldr.w	r8, [r8, #12]
    9d00:	4545      	cmp	r5, r8
    9d02:	f000 8116 	beq.w	9f32 <_malloc_r+0x376>
    9d06:	f8d8 2004 	ldr.w	r2, [r8, #4]
    9d0a:	f022 0203 	bic.w	r2, r2, #3
    9d0e:	1b93      	subs	r3, r2, r6
    9d10:	2b0f      	cmp	r3, #15
    9d12:	ddf0      	ble.n	9cf6 <_malloc_r+0x13a>
    9d14:	4620      	mov	r0, r4
    9d16:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    9d1a:	eb08 0106 	add.w	r1, r8, r6
    9d1e:	f046 0601 	orr.w	r6, r6, #1
    9d22:	f8c8 6004 	str.w	r6, [r8, #4]
    9d26:	60ec      	str	r4, [r5, #12]
    9d28:	60a5      	str	r5, [r4, #8]
    9d2a:	f043 0401 	orr.w	r4, r3, #1
    9d2e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    9d32:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    9d36:	604c      	str	r4, [r1, #4]
    9d38:	f848 3002 	str.w	r3, [r8, r2]
    9d3c:	f000 f9f4 	bl	a128 <__malloc_unlock>
    9d40:	f108 0508 	add.w	r5, r8, #8
    9d44:	e002      	b.n	9d4c <_malloc_r+0x190>
    9d46:	230c      	movs	r3, #12
    9d48:	6023      	str	r3, [r4, #0]
    9d4a:	2500      	movs	r5, #0
    9d4c:	4628      	mov	r0, r5
    9d4e:	b003      	add	sp, #12
    9d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d54:	f44f 7300 	mov.w	r3, #512	; 0x200
    9d58:	2040      	movs	r0, #64	; 0x40
    9d5a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    9d5e:	e773      	b.n	9c48 <_malloc_r+0x8c>
    9d60:	68d3      	ldr	r3, [r2, #12]
    9d62:	429a      	cmp	r2, r3
    9d64:	bf08      	it	eq
    9d66:	3002      	addeq	r0, #2
    9d68:	f47f af40 	bne.w	9bec <_malloc_r+0x30>
    9d6c:	693d      	ldr	r5, [r7, #16]
    9d6e:	f8df c158 	ldr.w	ip, [pc, #344]	; 9ec8 <_malloc_r+0x30c>
    9d72:	4565      	cmp	r5, ip
    9d74:	d182      	bne.n	9c7c <_malloc_r+0xc0>
    9d76:	687a      	ldr	r2, [r7, #4]
    9d78:	1083      	asrs	r3, r0, #2
    9d7a:	2101      	movs	r1, #1
    9d7c:	4099      	lsls	r1, r3
    9d7e:	4291      	cmp	r1, r2
    9d80:	d9a7      	bls.n	9cd2 <_malloc_r+0x116>
    9d82:	68bd      	ldr	r5, [r7, #8]
    9d84:	686b      	ldr	r3, [r5, #4]
    9d86:	f023 0903 	bic.w	r9, r3, #3
    9d8a:	454e      	cmp	r6, r9
    9d8c:	d803      	bhi.n	9d96 <_malloc_r+0x1da>
    9d8e:	eba9 0306 	sub.w	r3, r9, r6
    9d92:	2b0f      	cmp	r3, #15
    9d94:	dc7a      	bgt.n	9e8c <_malloc_r+0x2d0>
    9d96:	f8df b134 	ldr.w	fp, [pc, #308]	; 9ecc <_malloc_r+0x310>
    9d9a:	4b47      	ldr	r3, [pc, #284]	; (9eb8 <_malloc_r+0x2fc>)
    9d9c:	f8db 2000 	ldr.w	r2, [fp]
    9da0:	681b      	ldr	r3, [r3, #0]
    9da2:	3201      	adds	r2, #1
    9da4:	4433      	add	r3, r6
    9da6:	eb05 0a09 	add.w	sl, r5, r9
    9daa:	f000 8133 	beq.w	a014 <_malloc_r+0x458>
    9dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    9db2:	330f      	adds	r3, #15
    9db4:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    9db8:	f028 080f 	bic.w	r8, r8, #15
    9dbc:	4641      	mov	r1, r8
    9dbe:	4620      	mov	r0, r4
    9dc0:	f001 ff32 	bl	bc28 <_sbrk_r>
    9dc4:	1c41      	adds	r1, r0, #1
    9dc6:	4602      	mov	r2, r0
    9dc8:	f000 80f3 	beq.w	9fb2 <_malloc_r+0x3f6>
    9dcc:	4582      	cmp	sl, r0
    9dce:	f200 80ee 	bhi.w	9fae <_malloc_r+0x3f2>
    9dd2:	4b3a      	ldr	r3, [pc, #232]	; (9ebc <_malloc_r+0x300>)
    9dd4:	6819      	ldr	r1, [r3, #0]
    9dd6:	4441      	add	r1, r8
    9dd8:	6019      	str	r1, [r3, #0]
    9dda:	4608      	mov	r0, r1
    9ddc:	f000 814e 	beq.w	a07c <_malloc_r+0x4c0>
    9de0:	f8db 1000 	ldr.w	r1, [fp]
    9de4:	9301      	str	r3, [sp, #4]
    9de6:	3101      	adds	r1, #1
    9de8:	bf1b      	ittet	ne
    9dea:	eba2 010a 	subne.w	r1, r2, sl
    9dee:	1809      	addne	r1, r1, r0
    9df0:	f8cb 2000 	streq.w	r2, [fp]
    9df4:	6019      	strne	r1, [r3, #0]
    9df6:	f012 0b07 	ands.w	fp, r2, #7
    9dfa:	f000 8117 	beq.w	a02c <_malloc_r+0x470>
    9dfe:	f1cb 0108 	rsb	r1, fp, #8
    9e02:	440a      	add	r2, r1
    9e04:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    9e08:	4490      	add	r8, r2
    9e0a:	3108      	adds	r1, #8
    9e0c:	eba1 0108 	sub.w	r1, r1, r8
    9e10:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    9e14:	4651      	mov	r1, sl
    9e16:	4620      	mov	r0, r4
    9e18:	9200      	str	r2, [sp, #0]
    9e1a:	f001 ff05 	bl	bc28 <_sbrk_r>
    9e1e:	1c42      	adds	r2, r0, #1
    9e20:	e9dd 2300 	ldrd	r2, r3, [sp]
    9e24:	f000 814f 	beq.w	a0c6 <_malloc_r+0x50a>
    9e28:	1a80      	subs	r0, r0, r2
    9e2a:	eb00 080a 	add.w	r8, r0, sl
    9e2e:	6819      	ldr	r1, [r3, #0]
    9e30:	60ba      	str	r2, [r7, #8]
    9e32:	f048 0001 	orr.w	r0, r8, #1
    9e36:	4451      	add	r1, sl
    9e38:	42bd      	cmp	r5, r7
    9e3a:	6050      	str	r0, [r2, #4]
    9e3c:	6019      	str	r1, [r3, #0]
    9e3e:	f000 8129 	beq.w	a094 <_malloc_r+0x4d8>
    9e42:	f1b9 0f0f 	cmp.w	r9, #15
    9e46:	f240 8127 	bls.w	a098 <_malloc_r+0x4dc>
    9e4a:	6868      	ldr	r0, [r5, #4]
    9e4c:	f1a9 0c0c 	sub.w	ip, r9, #12
    9e50:	f02c 0c07 	bic.w	ip, ip, #7
    9e54:	f000 0001 	and.w	r0, r0, #1
    9e58:	ea40 000c 	orr.w	r0, r0, ip
    9e5c:	6068      	str	r0, [r5, #4]
    9e5e:	f04f 0e05 	mov.w	lr, #5
    9e62:	eb05 000c 	add.w	r0, r5, ip
    9e66:	f1bc 0f0f 	cmp.w	ip, #15
    9e6a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    9e6e:	f200 8132 	bhi.w	a0d6 <_malloc_r+0x51a>
    9e72:	6850      	ldr	r0, [r2, #4]
    9e74:	4615      	mov	r5, r2
    9e76:	4b12      	ldr	r3, [pc, #72]	; (9ec0 <_malloc_r+0x304>)
    9e78:	681a      	ldr	r2, [r3, #0]
    9e7a:	428a      	cmp	r2, r1
    9e7c:	bf38      	it	cc
    9e7e:	6019      	strcc	r1, [r3, #0]
    9e80:	4b10      	ldr	r3, [pc, #64]	; (9ec4 <_malloc_r+0x308>)
    9e82:	681a      	ldr	r2, [r3, #0]
    9e84:	428a      	cmp	r2, r1
    9e86:	bf38      	it	cc
    9e88:	6019      	strcc	r1, [r3, #0]
    9e8a:	e094      	b.n	9fb6 <_malloc_r+0x3fa>
    9e8c:	19aa      	adds	r2, r5, r6
    9e8e:	f043 0301 	orr.w	r3, r3, #1
    9e92:	f046 0601 	orr.w	r6, r6, #1
    9e96:	606e      	str	r6, [r5, #4]
    9e98:	4620      	mov	r0, r4
    9e9a:	60ba      	str	r2, [r7, #8]
    9e9c:	6053      	str	r3, [r2, #4]
    9e9e:	f000 f943 	bl	a128 <__malloc_unlock>
    9ea2:	3508      	adds	r5, #8
    9ea4:	4628      	mov	r0, r5
    9ea6:	b003      	add	sp, #12
    9ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9eac:	68d9      	ldr	r1, [r3, #12]
    9eae:	441a      	add	r2, r3
    9eb0:	e6a1      	b.n	9bf6 <_malloc_r+0x3a>
    9eb2:	bf00      	nop
    9eb4:	20008754 	.word	0x20008754
    9eb8:	2002aae4 	.word	0x2002aae4
    9ebc:	2002aab4 	.word	0x2002aab4
    9ec0:	2002aadc 	.word	0x2002aadc
    9ec4:	2002aae0 	.word	0x2002aae0
    9ec8:	2000875c 	.word	0x2000875c
    9ecc:	20008b5c 	.word	0x20008b5c
    9ed0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    9ed4:	ea4f 2352 	mov.w	r3, r2, lsr #9
    9ed8:	d363      	bcc.n	9fa2 <_malloc_r+0x3e6>
    9eda:	2b14      	cmp	r3, #20
    9edc:	f200 80b7 	bhi.w	a04e <_malloc_r+0x492>
    9ee0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    9ee4:	00c9      	lsls	r1, r1, #3
    9ee6:	335b      	adds	r3, #91	; 0x5b
    9ee8:	eb07 0e01 	add.w	lr, r7, r1
    9eec:	5879      	ldr	r1, [r7, r1]
    9eee:	f1ae 0e08 	sub.w	lr, lr, #8
    9ef2:	458e      	cmp	lr, r1
    9ef4:	f000 8091 	beq.w	a01a <_malloc_r+0x45e>
    9ef8:	684b      	ldr	r3, [r1, #4]
    9efa:	f023 0303 	bic.w	r3, r3, #3
    9efe:	4293      	cmp	r3, r2
    9f00:	d902      	bls.n	9f08 <_malloc_r+0x34c>
    9f02:	6889      	ldr	r1, [r1, #8]
    9f04:	458e      	cmp	lr, r1
    9f06:	d1f7      	bne.n	9ef8 <_malloc_r+0x33c>
    9f08:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    9f0c:	687a      	ldr	r2, [r7, #4]
    9f0e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    9f12:	f8ce 5008 	str.w	r5, [lr, #8]
    9f16:	60cd      	str	r5, [r1, #12]
    9f18:	e6d6      	b.n	9cc8 <_malloc_r+0x10c>
    9f1a:	2b14      	cmp	r3, #20
    9f1c:	d959      	bls.n	9fd2 <_malloc_r+0x416>
    9f1e:	2b54      	cmp	r3, #84	; 0x54
    9f20:	f200 809d 	bhi.w	a05e <_malloc_r+0x4a2>
    9f24:	0b33      	lsrs	r3, r6, #12
    9f26:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    9f2a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    9f2e:	00c3      	lsls	r3, r0, #3
    9f30:	e68a      	b.n	9c48 <_malloc_r+0x8c>
    9f32:	f10e 0e01 	add.w	lr, lr, #1
    9f36:	f01e 0f03 	tst.w	lr, #3
    9f3a:	f105 0508 	add.w	r5, r5, #8
    9f3e:	f47f aed5 	bne.w	9cec <_malloc_r+0x130>
    9f42:	e051      	b.n	9fe8 <_malloc_r+0x42c>
    9f44:	4442      	add	r2, r8
    9f46:	4645      	mov	r5, r8
    9f48:	6853      	ldr	r3, [r2, #4]
    9f4a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9f4e:	f043 0301 	orr.w	r3, r3, #1
    9f52:	6053      	str	r3, [r2, #4]
    9f54:	f855 3f08 	ldr.w	r3, [r5, #8]!
    9f58:	4620      	mov	r0, r4
    9f5a:	60d9      	str	r1, [r3, #12]
    9f5c:	608b      	str	r3, [r1, #8]
    9f5e:	f000 f8e3 	bl	a128 <__malloc_unlock>
    9f62:	e6f3      	b.n	9d4c <_malloc_r+0x190>
    9f64:	08f0      	lsrs	r0, r6, #3
    9f66:	f106 0208 	add.w	r2, r6, #8
    9f6a:	e637      	b.n	9bdc <_malloc_r+0x20>
    9f6c:	442a      	add	r2, r5
    9f6e:	4620      	mov	r0, r4
    9f70:	6853      	ldr	r3, [r2, #4]
    9f72:	f043 0301 	orr.w	r3, r3, #1
    9f76:	6053      	str	r3, [r2, #4]
    9f78:	3508      	adds	r5, #8
    9f7a:	f000 f8d5 	bl	a128 <__malloc_unlock>
    9f7e:	e6e5      	b.n	9d4c <_malloc_r+0x190>
    9f80:	19a9      	adds	r1, r5, r6
    9f82:	4620      	mov	r0, r4
    9f84:	f046 0601 	orr.w	r6, r6, #1
    9f88:	f043 0401 	orr.w	r4, r3, #1
    9f8c:	606e      	str	r6, [r5, #4]
    9f8e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    9f92:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    9f96:	604c      	str	r4, [r1, #4]
    9f98:	50ab      	str	r3, [r5, r2]
    9f9a:	f000 f8c5 	bl	a128 <__malloc_unlock>
    9f9e:	3508      	adds	r5, #8
    9fa0:	e6d4      	b.n	9d4c <_malloc_r+0x190>
    9fa2:	0993      	lsrs	r3, r2, #6
    9fa4:	f103 0139 	add.w	r1, r3, #57	; 0x39
    9fa8:	00c9      	lsls	r1, r1, #3
    9faa:	3338      	adds	r3, #56	; 0x38
    9fac:	e79c      	b.n	9ee8 <_malloc_r+0x32c>
    9fae:	42bd      	cmp	r5, r7
    9fb0:	d05f      	beq.n	a072 <_malloc_r+0x4b6>
    9fb2:	68bd      	ldr	r5, [r7, #8]
    9fb4:	6868      	ldr	r0, [r5, #4]
    9fb6:	f020 0803 	bic.w	r8, r0, #3
    9fba:	4546      	cmp	r6, r8
    9fbc:	eba8 0306 	sub.w	r3, r8, r6
    9fc0:	d802      	bhi.n	9fc8 <_malloc_r+0x40c>
    9fc2:	2b0f      	cmp	r3, #15
    9fc4:	f73f af62 	bgt.w	9e8c <_malloc_r+0x2d0>
    9fc8:	4620      	mov	r0, r4
    9fca:	f000 f8ad 	bl	a128 <__malloc_unlock>
    9fce:	2500      	movs	r5, #0
    9fd0:	e6bc      	b.n	9d4c <_malloc_r+0x190>
    9fd2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    9fd6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    9fda:	00c3      	lsls	r3, r0, #3
    9fdc:	e634      	b.n	9c48 <_malloc_r+0x8c>
    9fde:	f859 3908 	ldr.w	r3, [r9], #-8
    9fe2:	454b      	cmp	r3, r9
    9fe4:	f040 8096 	bne.w	a114 <_malloc_r+0x558>
    9fe8:	f010 0f03 	tst.w	r0, #3
    9fec:	f100 30ff 	add.w	r0, r0, #4294967295
    9ff0:	d1f5      	bne.n	9fde <_malloc_r+0x422>
    9ff2:	687b      	ldr	r3, [r7, #4]
    9ff4:	ea23 0301 	bic.w	r3, r3, r1
    9ff8:	607b      	str	r3, [r7, #4]
    9ffa:	0049      	lsls	r1, r1, #1
    9ffc:	4299      	cmp	r1, r3
    9ffe:	f63f aec0 	bhi.w	9d82 <_malloc_r+0x1c6>
    a002:	b919      	cbnz	r1, a00c <_malloc_r+0x450>
    a004:	e6bd      	b.n	9d82 <_malloc_r+0x1c6>
    a006:	0049      	lsls	r1, r1, #1
    a008:	f10e 0e04 	add.w	lr, lr, #4
    a00c:	4219      	tst	r1, r3
    a00e:	d0fa      	beq.n	a006 <_malloc_r+0x44a>
    a010:	4670      	mov	r0, lr
    a012:	e667      	b.n	9ce4 <_malloc_r+0x128>
    a014:	f103 0810 	add.w	r8, r3, #16
    a018:	e6d0      	b.n	9dbc <_malloc_r+0x200>
    a01a:	109a      	asrs	r2, r3, #2
    a01c:	f04f 0801 	mov.w	r8, #1
    a020:	687b      	ldr	r3, [r7, #4]
    a022:	fa08 f202 	lsl.w	r2, r8, r2
    a026:	431a      	orrs	r2, r3
    a028:	607a      	str	r2, [r7, #4]
    a02a:	e770      	b.n	9f0e <_malloc_r+0x352>
    a02c:	eb02 0108 	add.w	r1, r2, r8
    a030:	4249      	negs	r1, r1
    a032:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    a036:	4651      	mov	r1, sl
    a038:	4620      	mov	r0, r4
    a03a:	9200      	str	r2, [sp, #0]
    a03c:	f001 fdf4 	bl	bc28 <_sbrk_r>
    a040:	1c43      	adds	r3, r0, #1
    a042:	e9dd 2300 	ldrd	r2, r3, [sp]
    a046:	f47f aeef 	bne.w	9e28 <_malloc_r+0x26c>
    a04a:	46da      	mov	sl, fp
    a04c:	e6ef      	b.n	9e2e <_malloc_r+0x272>
    a04e:	2b54      	cmp	r3, #84	; 0x54
    a050:	d825      	bhi.n	a09e <_malloc_r+0x4e2>
    a052:	0b13      	lsrs	r3, r2, #12
    a054:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    a058:	00c9      	lsls	r1, r1, #3
    a05a:	336e      	adds	r3, #110	; 0x6e
    a05c:	e744      	b.n	9ee8 <_malloc_r+0x32c>
    a05e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    a062:	d825      	bhi.n	a0b0 <_malloc_r+0x4f4>
    a064:	0bf3      	lsrs	r3, r6, #15
    a066:	f103 0078 	add.w	r0, r3, #120	; 0x78
    a06a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    a06e:	00c3      	lsls	r3, r0, #3
    a070:	e5ea      	b.n	9c48 <_malloc_r+0x8c>
    a072:	4b29      	ldr	r3, [pc, #164]	; (a118 <_malloc_r+0x55c>)
    a074:	6818      	ldr	r0, [r3, #0]
    a076:	4440      	add	r0, r8
    a078:	6018      	str	r0, [r3, #0]
    a07a:	e6b1      	b.n	9de0 <_malloc_r+0x224>
    a07c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    a080:	f1bc 0f00 	cmp.w	ip, #0
    a084:	f47f aeac 	bne.w	9de0 <_malloc_r+0x224>
    a088:	68bd      	ldr	r5, [r7, #8]
    a08a:	44c8      	add	r8, r9
    a08c:	f048 0001 	orr.w	r0, r8, #1
    a090:	6068      	str	r0, [r5, #4]
    a092:	e6f0      	b.n	9e76 <_malloc_r+0x2ba>
    a094:	4615      	mov	r5, r2
    a096:	e6ee      	b.n	9e76 <_malloc_r+0x2ba>
    a098:	2301      	movs	r3, #1
    a09a:	6053      	str	r3, [r2, #4]
    a09c:	e794      	b.n	9fc8 <_malloc_r+0x40c>
    a09e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    a0a2:	d823      	bhi.n	a0ec <_malloc_r+0x530>
    a0a4:	0bd3      	lsrs	r3, r2, #15
    a0a6:	f103 0178 	add.w	r1, r3, #120	; 0x78
    a0aa:	00c9      	lsls	r1, r1, #3
    a0ac:	3377      	adds	r3, #119	; 0x77
    a0ae:	e71b      	b.n	9ee8 <_malloc_r+0x32c>
    a0b0:	f240 5254 	movw	r2, #1364	; 0x554
    a0b4:	4293      	cmp	r3, r2
    a0b6:	d823      	bhi.n	a100 <_malloc_r+0x544>
    a0b8:	0cb3      	lsrs	r3, r6, #18
    a0ba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    a0be:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    a0c2:	00c3      	lsls	r3, r0, #3
    a0c4:	e5c0      	b.n	9c48 <_malloc_r+0x8c>
    a0c6:	f1ab 0b08 	sub.w	fp, fp, #8
    a0ca:	44d8      	add	r8, fp
    a0cc:	eba8 0802 	sub.w	r8, r8, r2
    a0d0:	f04f 0a00 	mov.w	sl, #0
    a0d4:	e6ab      	b.n	9e2e <_malloc_r+0x272>
    a0d6:	f105 0108 	add.w	r1, r5, #8
    a0da:	4620      	mov	r0, r4
    a0dc:	9300      	str	r3, [sp, #0]
    a0de:	f002 f941 	bl	c364 <_free_r>
    a0e2:	68bd      	ldr	r5, [r7, #8]
    a0e4:	9b00      	ldr	r3, [sp, #0]
    a0e6:	6868      	ldr	r0, [r5, #4]
    a0e8:	6819      	ldr	r1, [r3, #0]
    a0ea:	e6c4      	b.n	9e76 <_malloc_r+0x2ba>
    a0ec:	f240 5154 	movw	r1, #1364	; 0x554
    a0f0:	428b      	cmp	r3, r1
    a0f2:	d80b      	bhi.n	a10c <_malloc_r+0x550>
    a0f4:	0c93      	lsrs	r3, r2, #18
    a0f6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    a0fa:	00c9      	lsls	r1, r1, #3
    a0fc:	337c      	adds	r3, #124	; 0x7c
    a0fe:	e6f3      	b.n	9ee8 <_malloc_r+0x32c>
    a100:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    a104:	207f      	movs	r0, #127	; 0x7f
    a106:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    a10a:	e59d      	b.n	9c48 <_malloc_r+0x8c>
    a10c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    a110:	237e      	movs	r3, #126	; 0x7e
    a112:	e6e9      	b.n	9ee8 <_malloc_r+0x32c>
    a114:	687b      	ldr	r3, [r7, #4]
    a116:	e770      	b.n	9ffa <_malloc_r+0x43e>
    a118:	2002aab4 	.word	0x2002aab4

0000a11c <__malloc_lock>:
    a11c:	4801      	ldr	r0, [pc, #4]	; (a124 <__malloc_lock+0x8>)
    a11e:	f001 bdd9 	b.w	bcd4 <__retarget_lock_acquire_recursive>
    a122:	bf00      	nop
    a124:	2002aaac 	.word	0x2002aaac

0000a128 <__malloc_unlock>:
    a128:	4801      	ldr	r0, [pc, #4]	; (a130 <__malloc_unlock+0x8>)
    a12a:	f001 bdd5 	b.w	bcd8 <__retarget_lock_release_recursive>
    a12e:	bf00      	nop
    a130:	2002aaac 	.word	0x2002aaac

0000a134 <realloc>:
    a134:	b410      	push	{r4}
    a136:	4c04      	ldr	r4, [pc, #16]	; (a148 <realloc+0x14>)
    a138:	4603      	mov	r3, r0
    a13a:	460a      	mov	r2, r1
    a13c:	6820      	ldr	r0, [r4, #0]
    a13e:	f85d 4b04 	ldr.w	r4, [sp], #4
    a142:	4619      	mov	r1, r3
    a144:	f000 b802 	b.w	a14c <_realloc_r>
    a148:	20008b70 	.word	0x20008b70

0000a14c <_realloc_r>:
    a14c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a150:	4617      	mov	r7, r2
    a152:	2900      	cmp	r1, #0
    a154:	f000 8098 	beq.w	a288 <_realloc_r+0x13c>
    a158:	460c      	mov	r4, r1
    a15a:	f107 050b 	add.w	r5, r7, #11
    a15e:	4680      	mov	r8, r0
    a160:	f7ff ffdc 	bl	a11c <__malloc_lock>
    a164:	2d16      	cmp	r5, #22
    a166:	f854 1c04 	ldr.w	r1, [r4, #-4]
    a16a:	d85b      	bhi.n	a224 <_realloc_r+0xd8>
    a16c:	2510      	movs	r5, #16
    a16e:	462a      	mov	r2, r5
    a170:	42af      	cmp	r7, r5
    a172:	d85c      	bhi.n	a22e <_realloc_r+0xe2>
    a174:	f021 0603 	bic.w	r6, r1, #3
    a178:	4296      	cmp	r6, r2
    a17a:	f1a4 0908 	sub.w	r9, r4, #8
    a17e:	da62      	bge.n	a246 <_realloc_r+0xfa>
    a180:	4bbc      	ldr	r3, [pc, #752]	; (a474 <_realloc_r+0x328>)
    a182:	f8d3 c008 	ldr.w	ip, [r3, #8]
    a186:	eb09 0006 	add.w	r0, r9, r6
    a18a:	4584      	cmp	ip, r0
    a18c:	f000 8097 	beq.w	a2be <_realloc_r+0x172>
    a190:	f8d0 c004 	ldr.w	ip, [r0, #4]
    a194:	f02c 0301 	bic.w	r3, ip, #1
    a198:	4403      	add	r3, r0
    a19a:	685b      	ldr	r3, [r3, #4]
    a19c:	07db      	lsls	r3, r3, #31
    a19e:	d468      	bmi.n	a272 <_realloc_r+0x126>
    a1a0:	f02c 0c03 	bic.w	ip, ip, #3
    a1a4:	eb06 030c 	add.w	r3, r6, ip
    a1a8:	4293      	cmp	r3, r2
    a1aa:	da47      	bge.n	a23c <_realloc_r+0xf0>
    a1ac:	07cb      	lsls	r3, r1, #31
    a1ae:	d410      	bmi.n	a1d2 <_realloc_r+0x86>
    a1b0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a1b4:	eba9 0a03 	sub.w	sl, r9, r3
    a1b8:	f8da 3004 	ldr.w	r3, [sl, #4]
    a1bc:	f023 0103 	bic.w	r1, r3, #3
    a1c0:	448c      	add	ip, r1
    a1c2:	44b4      	add	ip, r6
    a1c4:	4594      	cmp	ip, r2
    a1c6:	f280 8111 	bge.w	a3ec <_realloc_r+0x2a0>
    a1ca:	1873      	adds	r3, r6, r1
    a1cc:	4293      	cmp	r3, r2
    a1ce:	f280 80e8 	bge.w	a3a2 <_realloc_r+0x256>
    a1d2:	4639      	mov	r1, r7
    a1d4:	4640      	mov	r0, r8
    a1d6:	f7ff fcf1 	bl	9bbc <_malloc_r>
    a1da:	4607      	mov	r7, r0
    a1dc:	b1e0      	cbz	r0, a218 <_realloc_r+0xcc>
    a1de:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a1e2:	f023 0301 	bic.w	r3, r3, #1
    a1e6:	444b      	add	r3, r9
    a1e8:	f1a0 0208 	sub.w	r2, r0, #8
    a1ec:	4293      	cmp	r3, r2
    a1ee:	f000 80d2 	beq.w	a396 <_realloc_r+0x24a>
    a1f2:	1f32      	subs	r2, r6, #4
    a1f4:	2a24      	cmp	r2, #36	; 0x24
    a1f6:	f200 80f5 	bhi.w	a3e4 <_realloc_r+0x298>
    a1fa:	2a13      	cmp	r2, #19
    a1fc:	f200 80ac 	bhi.w	a358 <_realloc_r+0x20c>
    a200:	4603      	mov	r3, r0
    a202:	4622      	mov	r2, r4
    a204:	6811      	ldr	r1, [r2, #0]
    a206:	6019      	str	r1, [r3, #0]
    a208:	6851      	ldr	r1, [r2, #4]
    a20a:	6059      	str	r1, [r3, #4]
    a20c:	6892      	ldr	r2, [r2, #8]
    a20e:	609a      	str	r2, [r3, #8]
    a210:	4621      	mov	r1, r4
    a212:	4640      	mov	r0, r8
    a214:	f002 f8a6 	bl	c364 <_free_r>
    a218:	4640      	mov	r0, r8
    a21a:	f7ff ff85 	bl	a128 <__malloc_unlock>
    a21e:	4638      	mov	r0, r7
    a220:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a224:	f025 0507 	bic.w	r5, r5, #7
    a228:	2d00      	cmp	r5, #0
    a22a:	462a      	mov	r2, r5
    a22c:	daa0      	bge.n	a170 <_realloc_r+0x24>
    a22e:	230c      	movs	r3, #12
    a230:	f8c8 3000 	str.w	r3, [r8]
    a234:	2700      	movs	r7, #0
    a236:	4638      	mov	r0, r7
    a238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a23c:	461e      	mov	r6, r3
    a23e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    a242:	60d3      	str	r3, [r2, #12]
    a244:	609a      	str	r2, [r3, #8]
    a246:	1b73      	subs	r3, r6, r5
    a248:	2b0f      	cmp	r3, #15
    a24a:	d822      	bhi.n	a292 <_realloc_r+0x146>
    a24c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a250:	f003 0301 	and.w	r3, r3, #1
    a254:	4333      	orrs	r3, r6
    a256:	444e      	add	r6, r9
    a258:	f8c9 3004 	str.w	r3, [r9, #4]
    a25c:	6873      	ldr	r3, [r6, #4]
    a25e:	f043 0301 	orr.w	r3, r3, #1
    a262:	6073      	str	r3, [r6, #4]
    a264:	4640      	mov	r0, r8
    a266:	4627      	mov	r7, r4
    a268:	f7ff ff5e 	bl	a128 <__malloc_unlock>
    a26c:	4638      	mov	r0, r7
    a26e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a272:	07c9      	lsls	r1, r1, #31
    a274:	d4ad      	bmi.n	a1d2 <_realloc_r+0x86>
    a276:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a27a:	eba9 0a03 	sub.w	sl, r9, r3
    a27e:	f8da 1004 	ldr.w	r1, [sl, #4]
    a282:	f021 0103 	bic.w	r1, r1, #3
    a286:	e7a0      	b.n	a1ca <_realloc_r+0x7e>
    a288:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a28c:	4611      	mov	r1, r2
    a28e:	f7ff bc95 	b.w	9bbc <_malloc_r>
    a292:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a296:	eb09 0105 	add.w	r1, r9, r5
    a29a:	f002 0201 	and.w	r2, r2, #1
    a29e:	444e      	add	r6, r9
    a2a0:	f043 0301 	orr.w	r3, r3, #1
    a2a4:	432a      	orrs	r2, r5
    a2a6:	f8c9 2004 	str.w	r2, [r9, #4]
    a2aa:	604b      	str	r3, [r1, #4]
    a2ac:	6873      	ldr	r3, [r6, #4]
    a2ae:	f043 0301 	orr.w	r3, r3, #1
    a2b2:	3108      	adds	r1, #8
    a2b4:	6073      	str	r3, [r6, #4]
    a2b6:	4640      	mov	r0, r8
    a2b8:	f002 f854 	bl	c364 <_free_r>
    a2bc:	e7d2      	b.n	a264 <_realloc_r+0x118>
    a2be:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a2c2:	f020 0b03 	bic.w	fp, r0, #3
    a2c6:	eb06 0c0b 	add.w	ip, r6, fp
    a2ca:	f105 0010 	add.w	r0, r5, #16
    a2ce:	4584      	cmp	ip, r0
    a2d0:	da4d      	bge.n	a36e <_realloc_r+0x222>
    a2d2:	07c9      	lsls	r1, r1, #31
    a2d4:	f53f af7d 	bmi.w	a1d2 <_realloc_r+0x86>
    a2d8:	f854 1c08 	ldr.w	r1, [r4, #-8]
    a2dc:	eba9 0a01 	sub.w	sl, r9, r1
    a2e0:	f8da 1004 	ldr.w	r1, [sl, #4]
    a2e4:	f021 0103 	bic.w	r1, r1, #3
    a2e8:	448b      	add	fp, r1
    a2ea:	44b3      	add	fp, r6
    a2ec:	4558      	cmp	r0, fp
    a2ee:	f73f af6c 	bgt.w	a1ca <_realloc_r+0x7e>
    a2f2:	4657      	mov	r7, sl
    a2f4:	f8da 100c 	ldr.w	r1, [sl, #12]
    a2f8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    a2fc:	1f32      	subs	r2, r6, #4
    a2fe:	2a24      	cmp	r2, #36	; 0x24
    a300:	60c1      	str	r1, [r0, #12]
    a302:	6088      	str	r0, [r1, #8]
    a304:	f200 80db 	bhi.w	a4be <_realloc_r+0x372>
    a308:	2a13      	cmp	r2, #19
    a30a:	f240 80d6 	bls.w	a4ba <_realloc_r+0x36e>
    a30e:	6821      	ldr	r1, [r4, #0]
    a310:	f8ca 1008 	str.w	r1, [sl, #8]
    a314:	6861      	ldr	r1, [r4, #4]
    a316:	f8ca 100c 	str.w	r1, [sl, #12]
    a31a:	2a1b      	cmp	r2, #27
    a31c:	f200 80df 	bhi.w	a4de <_realloc_r+0x392>
    a320:	3408      	adds	r4, #8
    a322:	f10a 0210 	add.w	r2, sl, #16
    a326:	6821      	ldr	r1, [r4, #0]
    a328:	6011      	str	r1, [r2, #0]
    a32a:	6861      	ldr	r1, [r4, #4]
    a32c:	6051      	str	r1, [r2, #4]
    a32e:	68a1      	ldr	r1, [r4, #8]
    a330:	6091      	str	r1, [r2, #8]
    a332:	eb0a 0105 	add.w	r1, sl, r5
    a336:	ebab 0205 	sub.w	r2, fp, r5
    a33a:	f042 0201 	orr.w	r2, r2, #1
    a33e:	6099      	str	r1, [r3, #8]
    a340:	604a      	str	r2, [r1, #4]
    a342:	f8da 3004 	ldr.w	r3, [sl, #4]
    a346:	f003 0301 	and.w	r3, r3, #1
    a34a:	432b      	orrs	r3, r5
    a34c:	4640      	mov	r0, r8
    a34e:	f8ca 3004 	str.w	r3, [sl, #4]
    a352:	f7ff fee9 	bl	a128 <__malloc_unlock>
    a356:	e76e      	b.n	a236 <_realloc_r+0xea>
    a358:	6823      	ldr	r3, [r4, #0]
    a35a:	6003      	str	r3, [r0, #0]
    a35c:	6863      	ldr	r3, [r4, #4]
    a35e:	6043      	str	r3, [r0, #4]
    a360:	2a1b      	cmp	r2, #27
    a362:	d868      	bhi.n	a436 <_realloc_r+0x2ea>
    a364:	f104 0208 	add.w	r2, r4, #8
    a368:	f100 0308 	add.w	r3, r0, #8
    a36c:	e74a      	b.n	a204 <_realloc_r+0xb8>
    a36e:	eb09 0205 	add.w	r2, r9, r5
    a372:	609a      	str	r2, [r3, #8]
    a374:	ebac 0305 	sub.w	r3, ip, r5
    a378:	f043 0301 	orr.w	r3, r3, #1
    a37c:	6053      	str	r3, [r2, #4]
    a37e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a382:	f003 0301 	and.w	r3, r3, #1
    a386:	432b      	orrs	r3, r5
    a388:	4640      	mov	r0, r8
    a38a:	f844 3c04 	str.w	r3, [r4, #-4]
    a38e:	f7ff fecb 	bl	a128 <__malloc_unlock>
    a392:	4627      	mov	r7, r4
    a394:	e74f      	b.n	a236 <_realloc_r+0xea>
    a396:	f850 3c04 	ldr.w	r3, [r0, #-4]
    a39a:	f023 0303 	bic.w	r3, r3, #3
    a39e:	441e      	add	r6, r3
    a3a0:	e751      	b.n	a246 <_realloc_r+0xfa>
    a3a2:	4657      	mov	r7, sl
    a3a4:	f8da 100c 	ldr.w	r1, [sl, #12]
    a3a8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    a3ac:	1f32      	subs	r2, r6, #4
    a3ae:	2a24      	cmp	r2, #36	; 0x24
    a3b0:	60c1      	str	r1, [r0, #12]
    a3b2:	6088      	str	r0, [r1, #8]
    a3b4:	d84c      	bhi.n	a450 <_realloc_r+0x304>
    a3b6:	2a13      	cmp	r2, #19
    a3b8:	d948      	bls.n	a44c <_realloc_r+0x300>
    a3ba:	6821      	ldr	r1, [r4, #0]
    a3bc:	f8ca 1008 	str.w	r1, [sl, #8]
    a3c0:	6861      	ldr	r1, [r4, #4]
    a3c2:	f8ca 100c 	str.w	r1, [sl, #12]
    a3c6:	2a1b      	cmp	r2, #27
    a3c8:	d856      	bhi.n	a478 <_realloc_r+0x32c>
    a3ca:	3408      	adds	r4, #8
    a3cc:	f10a 0210 	add.w	r2, sl, #16
    a3d0:	461e      	mov	r6, r3
    a3d2:	6823      	ldr	r3, [r4, #0]
    a3d4:	6013      	str	r3, [r2, #0]
    a3d6:	6863      	ldr	r3, [r4, #4]
    a3d8:	6053      	str	r3, [r2, #4]
    a3da:	68a3      	ldr	r3, [r4, #8]
    a3dc:	6093      	str	r3, [r2, #8]
    a3de:	46d1      	mov	r9, sl
    a3e0:	463c      	mov	r4, r7
    a3e2:	e730      	b.n	a246 <_realloc_r+0xfa>
    a3e4:	4621      	mov	r1, r4
    a3e6:	f001 fa95 	bl	b914 <memmove>
    a3ea:	e711      	b.n	a210 <_realloc_r+0xc4>
    a3ec:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    a3f0:	4657      	mov	r7, sl
    a3f2:	60cb      	str	r3, [r1, #12]
    a3f4:	6099      	str	r1, [r3, #8]
    a3f6:	f857 1f08 	ldr.w	r1, [r7, #8]!
    a3fa:	f8da 300c 	ldr.w	r3, [sl, #12]
    a3fe:	60cb      	str	r3, [r1, #12]
    a400:	1f32      	subs	r2, r6, #4
    a402:	2a24      	cmp	r2, #36	; 0x24
    a404:	6099      	str	r1, [r3, #8]
    a406:	d82d      	bhi.n	a464 <_realloc_r+0x318>
    a408:	2a13      	cmp	r2, #19
    a40a:	d929      	bls.n	a460 <_realloc_r+0x314>
    a40c:	6823      	ldr	r3, [r4, #0]
    a40e:	f8ca 3008 	str.w	r3, [sl, #8]
    a412:	6863      	ldr	r3, [r4, #4]
    a414:	f8ca 300c 	str.w	r3, [sl, #12]
    a418:	2a1b      	cmp	r2, #27
    a41a:	d842      	bhi.n	a4a2 <_realloc_r+0x356>
    a41c:	3408      	adds	r4, #8
    a41e:	f10a 0310 	add.w	r3, sl, #16
    a422:	6822      	ldr	r2, [r4, #0]
    a424:	601a      	str	r2, [r3, #0]
    a426:	6862      	ldr	r2, [r4, #4]
    a428:	605a      	str	r2, [r3, #4]
    a42a:	68a2      	ldr	r2, [r4, #8]
    a42c:	609a      	str	r2, [r3, #8]
    a42e:	4666      	mov	r6, ip
    a430:	46d1      	mov	r9, sl
    a432:	463c      	mov	r4, r7
    a434:	e707      	b.n	a246 <_realloc_r+0xfa>
    a436:	68a3      	ldr	r3, [r4, #8]
    a438:	6083      	str	r3, [r0, #8]
    a43a:	68e3      	ldr	r3, [r4, #12]
    a43c:	60c3      	str	r3, [r0, #12]
    a43e:	2a24      	cmp	r2, #36	; 0x24
    a440:	d026      	beq.n	a490 <_realloc_r+0x344>
    a442:	f104 0210 	add.w	r2, r4, #16
    a446:	f100 0310 	add.w	r3, r0, #16
    a44a:	e6db      	b.n	a204 <_realloc_r+0xb8>
    a44c:	463a      	mov	r2, r7
    a44e:	e7bf      	b.n	a3d0 <_realloc_r+0x284>
    a450:	4621      	mov	r1, r4
    a452:	4638      	mov	r0, r7
    a454:	461e      	mov	r6, r3
    a456:	46d1      	mov	r9, sl
    a458:	f001 fa5c 	bl	b914 <memmove>
    a45c:	463c      	mov	r4, r7
    a45e:	e6f2      	b.n	a246 <_realloc_r+0xfa>
    a460:	463b      	mov	r3, r7
    a462:	e7de      	b.n	a422 <_realloc_r+0x2d6>
    a464:	4621      	mov	r1, r4
    a466:	4638      	mov	r0, r7
    a468:	4666      	mov	r6, ip
    a46a:	46d1      	mov	r9, sl
    a46c:	f001 fa52 	bl	b914 <memmove>
    a470:	463c      	mov	r4, r7
    a472:	e6e8      	b.n	a246 <_realloc_r+0xfa>
    a474:	20008754 	.word	0x20008754
    a478:	68a1      	ldr	r1, [r4, #8]
    a47a:	f8ca 1010 	str.w	r1, [sl, #16]
    a47e:	68e1      	ldr	r1, [r4, #12]
    a480:	f8ca 1014 	str.w	r1, [sl, #20]
    a484:	2a24      	cmp	r2, #36	; 0x24
    a486:	d020      	beq.n	a4ca <_realloc_r+0x37e>
    a488:	3410      	adds	r4, #16
    a48a:	f10a 0218 	add.w	r2, sl, #24
    a48e:	e79f      	b.n	a3d0 <_realloc_r+0x284>
    a490:	6923      	ldr	r3, [r4, #16]
    a492:	6103      	str	r3, [r0, #16]
    a494:	6961      	ldr	r1, [r4, #20]
    a496:	6141      	str	r1, [r0, #20]
    a498:	f104 0218 	add.w	r2, r4, #24
    a49c:	f100 0318 	add.w	r3, r0, #24
    a4a0:	e6b0      	b.n	a204 <_realloc_r+0xb8>
    a4a2:	68a3      	ldr	r3, [r4, #8]
    a4a4:	f8ca 3010 	str.w	r3, [sl, #16]
    a4a8:	68e3      	ldr	r3, [r4, #12]
    a4aa:	f8ca 3014 	str.w	r3, [sl, #20]
    a4ae:	2a24      	cmp	r2, #36	; 0x24
    a4b0:	d021      	beq.n	a4f6 <_realloc_r+0x3aa>
    a4b2:	3410      	adds	r4, #16
    a4b4:	f10a 0318 	add.w	r3, sl, #24
    a4b8:	e7b3      	b.n	a422 <_realloc_r+0x2d6>
    a4ba:	463a      	mov	r2, r7
    a4bc:	e733      	b.n	a326 <_realloc_r+0x1da>
    a4be:	4621      	mov	r1, r4
    a4c0:	4638      	mov	r0, r7
    a4c2:	f001 fa27 	bl	b914 <memmove>
    a4c6:	4b16      	ldr	r3, [pc, #88]	; (a520 <_realloc_r+0x3d4>)
    a4c8:	e733      	b.n	a332 <_realloc_r+0x1e6>
    a4ca:	6922      	ldr	r2, [r4, #16]
    a4cc:	f8ca 2018 	str.w	r2, [sl, #24]
    a4d0:	6962      	ldr	r2, [r4, #20]
    a4d2:	f8ca 201c 	str.w	r2, [sl, #28]
    a4d6:	3418      	adds	r4, #24
    a4d8:	f10a 0220 	add.w	r2, sl, #32
    a4dc:	e778      	b.n	a3d0 <_realloc_r+0x284>
    a4de:	68a1      	ldr	r1, [r4, #8]
    a4e0:	f8ca 1010 	str.w	r1, [sl, #16]
    a4e4:	68e1      	ldr	r1, [r4, #12]
    a4e6:	f8ca 1014 	str.w	r1, [sl, #20]
    a4ea:	2a24      	cmp	r2, #36	; 0x24
    a4ec:	d00d      	beq.n	a50a <_realloc_r+0x3be>
    a4ee:	3410      	adds	r4, #16
    a4f0:	f10a 0218 	add.w	r2, sl, #24
    a4f4:	e717      	b.n	a326 <_realloc_r+0x1da>
    a4f6:	6923      	ldr	r3, [r4, #16]
    a4f8:	f8ca 3018 	str.w	r3, [sl, #24]
    a4fc:	6963      	ldr	r3, [r4, #20]
    a4fe:	f8ca 301c 	str.w	r3, [sl, #28]
    a502:	3418      	adds	r4, #24
    a504:	f10a 0320 	add.w	r3, sl, #32
    a508:	e78b      	b.n	a422 <_realloc_r+0x2d6>
    a50a:	6922      	ldr	r2, [r4, #16]
    a50c:	f8ca 2018 	str.w	r2, [sl, #24]
    a510:	6962      	ldr	r2, [r4, #20]
    a512:	f8ca 201c 	str.w	r2, [sl, #28]
    a516:	3418      	adds	r4, #24
    a518:	f10a 0220 	add.w	r2, sl, #32
    a51c:	e703      	b.n	a326 <_realloc_r+0x1da>
    a51e:	bf00      	nop
    a520:	20008754 	.word	0x20008754
    a524:	00000000 	.word	0x00000000

0000a528 <_strtod_l>:
    a528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a52c:	ed2d 8b10 	vpush	{d8-d15}
    a530:	b097      	sub	sp, #92	; 0x5c
    a532:	468a      	mov	sl, r1
    a534:	2100      	movs	r1, #0
    a536:	9207      	str	r2, [sp, #28]
    a538:	9112      	str	r1, [sp, #72]	; 0x48
    a53a:	2200      	movs	r2, #0
    a53c:	2100      	movs	r1, #0
    a53e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    a542:	4680      	mov	r8, r0
    a544:	4651      	mov	r1, sl
    a546:	9111      	str	r1, [sp, #68]	; 0x44
    a548:	460f      	mov	r7, r1
    a54a:	f811 2b01 	ldrb.w	r2, [r1], #1
    a54e:	2a2d      	cmp	r2, #45	; 0x2d
    a550:	d85e      	bhi.n	a610 <_strtod_l+0xe8>
    a552:	a001      	add	r0, pc, #4	; (adr r0, a558 <_strtod_l+0x30>)
    a554:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    a558:	0000a6f9 	.word	0x0000a6f9
    a55c:	0000a611 	.word	0x0000a611
    a560:	0000a611 	.word	0x0000a611
    a564:	0000a611 	.word	0x0000a611
    a568:	0000a611 	.word	0x0000a611
    a56c:	0000a611 	.word	0x0000a611
    a570:	0000a611 	.word	0x0000a611
    a574:	0000a611 	.word	0x0000a611
    a578:	0000a611 	.word	0x0000a611
    a57c:	0000a547 	.word	0x0000a547
    a580:	0000a547 	.word	0x0000a547
    a584:	0000a547 	.word	0x0000a547
    a588:	0000a547 	.word	0x0000a547
    a58c:	0000a547 	.word	0x0000a547
    a590:	0000a611 	.word	0x0000a611
    a594:	0000a611 	.word	0x0000a611
    a598:	0000a611 	.word	0x0000a611
    a59c:	0000a611 	.word	0x0000a611
    a5a0:	0000a611 	.word	0x0000a611
    a5a4:	0000a611 	.word	0x0000a611
    a5a8:	0000a611 	.word	0x0000a611
    a5ac:	0000a611 	.word	0x0000a611
    a5b0:	0000a611 	.word	0x0000a611
    a5b4:	0000a611 	.word	0x0000a611
    a5b8:	0000a611 	.word	0x0000a611
    a5bc:	0000a611 	.word	0x0000a611
    a5c0:	0000a611 	.word	0x0000a611
    a5c4:	0000a611 	.word	0x0000a611
    a5c8:	0000a611 	.word	0x0000a611
    a5cc:	0000a611 	.word	0x0000a611
    a5d0:	0000a611 	.word	0x0000a611
    a5d4:	0000a611 	.word	0x0000a611
    a5d8:	0000a547 	.word	0x0000a547
    a5dc:	0000a611 	.word	0x0000a611
    a5e0:	0000a611 	.word	0x0000a611
    a5e4:	0000a611 	.word	0x0000a611
    a5e8:	0000a611 	.word	0x0000a611
    a5ec:	0000a611 	.word	0x0000a611
    a5f0:	0000a611 	.word	0x0000a611
    a5f4:	0000a611 	.word	0x0000a611
    a5f8:	0000a611 	.word	0x0000a611
    a5fc:	0000a611 	.word	0x0000a611
    a600:	0000a611 	.word	0x0000a611
    a604:	0000ad33 	.word	0x0000ad33
    a608:	0000a611 	.word	0x0000a611
    a60c:	0000ad1f 	.word	0x0000ad1f
    a610:	2100      	movs	r1, #0
    a612:	9109      	str	r1, [sp, #36]	; 0x24
    a614:	2a30      	cmp	r2, #48	; 0x30
    a616:	d07d      	beq.n	a714 <_strtod_l+0x1ec>
    a618:	2300      	movs	r3, #0
    a61a:	9308      	str	r3, [sp, #32]
    a61c:	2a2f      	cmp	r2, #47	; 0x2f
    a61e:	4614      	mov	r4, r2
    a620:	f240 84cd 	bls.w	afbe <_strtod_l+0xa96>
    a624:	f04f 0900 	mov.w	r9, #0
    a628:	4638      	mov	r0, r7
    a62a:	464e      	mov	r6, r9
    a62c:	464d      	mov	r5, r9
    a62e:	e012      	b.n	a656 <_strtod_l+0x12e>
    a630:	3001      	adds	r0, #1
    a632:	2d08      	cmp	r5, #8
    a634:	9011      	str	r0, [sp, #68]	; 0x44
    a636:	bfc8      	it	gt
    a638:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    a63c:	7804      	ldrb	r4, [r0, #0]
    a63e:	bfc6      	itte	gt
    a640:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    a644:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    a648:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    a64c:	2c2f      	cmp	r4, #47	; 0x2f
    a64e:	f105 0501 	add.w	r5, r5, #1
    a652:	4622      	mov	r2, r4
    a654:	dd6f      	ble.n	a736 <_strtod_l+0x20e>
    a656:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    a65a:	2c39      	cmp	r4, #57	; 0x39
    a65c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a660:	dde6      	ble.n	a630 <_strtod_l+0x108>
    a662:	499f      	ldr	r1, [pc, #636]	; (a8e0 <_strtod_l+0x3b8>)
    a664:	2201      	movs	r2, #1
    a666:	f001 fa23 	bl	bab0 <strncmp>
    a66a:	2800      	cmp	r0, #0
    a66c:	d137      	bne.n	a6de <_strtod_l+0x1b6>
    a66e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a670:	461a      	mov	r2, r3
    a672:	3301      	adds	r3, #1
    a674:	9311      	str	r3, [sp, #68]	; 0x44
    a676:	7854      	ldrb	r4, [r2, #1]
    a678:	2d00      	cmp	r5, #0
    a67a:	f040 8543 	bne.w	b104 <_strtod_l+0xbdc>
    a67e:	2c30      	cmp	r4, #48	; 0x30
    a680:	f040 8524 	bne.w	b0cc <_strtod_l+0xba4>
    a684:	f1c3 0201 	rsb	r2, r3, #1
    a688:	1898      	adds	r0, r3, r2
    a68a:	3301      	adds	r3, #1
    a68c:	9311      	str	r3, [sp, #68]	; 0x44
    a68e:	781c      	ldrb	r4, [r3, #0]
    a690:	2c30      	cmp	r4, #48	; 0x30
    a692:	d0f9      	beq.n	a688 <_strtod_l+0x160>
    a694:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a698:	2b08      	cmp	r3, #8
    a69a:	f200 8301 	bhi.w	aca0 <_strtod_l+0x778>
    a69e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    a6a0:	1c43      	adds	r3, r0, #1
    a6a2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a6a6:	930b      	str	r3, [sp, #44]	; 0x2c
    a6a8:	2501      	movs	r5, #1
    a6aa:	46bc      	mov	ip, r7
    a6ac:	f04f 0e00 	mov.w	lr, #0
    a6b0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    a6b4:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    a6b8:	2000      	movs	r0, #0
    a6ba:	f10c 0301 	add.w	r3, ip, #1
    a6be:	9311      	str	r3, [sp, #68]	; 0x44
    a6c0:	f89c 4001 	ldrb.w	r4, [ip, #1]
    a6c4:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    a6c8:	2909      	cmp	r1, #9
    a6ca:	f200 82bb 	bhi.w	ac44 <_strtod_l+0x71c>
    a6ce:	3001      	adds	r0, #1
    a6d0:	468b      	mov	fp, r1
    a6d2:	2900      	cmp	r1, #0
    a6d4:	f040 844f 	bne.w	af76 <_strtod_l+0xa4e>
    a6d8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    a6dc:	e7ed      	b.n	a6ba <_strtod_l+0x192>
    a6de:	2000      	movs	r0, #0
    a6e0:	2c65      	cmp	r4, #101	; 0x65
    a6e2:	46ae      	mov	lr, r5
    a6e4:	900b      	str	r0, [sp, #44]	; 0x2c
    a6e6:	4684      	mov	ip, r0
    a6e8:	d001      	beq.n	a6ee <_strtod_l+0x1c6>
    a6ea:	2c45      	cmp	r4, #69	; 0x45
    a6ec:	d130      	bne.n	a750 <_strtod_l+0x228>
    a6ee:	2d00      	cmp	r5, #0
    a6f0:	d16b      	bne.n	a7ca <_strtod_l+0x2a2>
    a6f2:	9b08      	ldr	r3, [sp, #32]
    a6f4:	4303      	orrs	r3, r0
    a6f6:	d167      	bne.n	a7c8 <_strtod_l+0x2a0>
    a6f8:	9b07      	ldr	r3, [sp, #28]
    a6fa:	ed9f 8b77 	vldr	d8, [pc, #476]	; a8d8 <_strtod_l+0x3b0>
    a6fe:	b113      	cbz	r3, a706 <_strtod_l+0x1de>
    a700:	9b07      	ldr	r3, [sp, #28]
    a702:	f8c3 a000 	str.w	sl, [r3]
    a706:	eeb0 0b48 	vmov.f64	d0, d8
    a70a:	b017      	add	sp, #92	; 0x5c
    a70c:	ecbd 8b10 	vpop	{d8-d15}
    a710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a714:	787a      	ldrb	r2, [r7, #1]
    a716:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    a71a:	2a58      	cmp	r2, #88	; 0x58
    a71c:	f000 840c 	beq.w	af38 <_strtod_l+0xa10>
    a720:	3701      	adds	r7, #1
    a722:	9711      	str	r7, [sp, #68]	; 0x44
    a724:	783a      	ldrb	r2, [r7, #0]
    a726:	2a30      	cmp	r2, #48	; 0x30
    a728:	d0fa      	beq.n	a720 <_strtod_l+0x1f8>
    a72a:	2a00      	cmp	r2, #0
    a72c:	f000 80b7 	beq.w	a89e <_strtod_l+0x376>
    a730:	2301      	movs	r3, #1
    a732:	9308      	str	r3, [sp, #32]
    a734:	e772      	b.n	a61c <_strtod_l+0xf4>
    a736:	496a      	ldr	r1, [pc, #424]	; (a8e0 <_strtod_l+0x3b8>)
    a738:	2201      	movs	r2, #1
    a73a:	f001 f9b9 	bl	bab0 <strncmp>
    a73e:	2800      	cmp	r0, #0
    a740:	f000 80c0 	beq.w	a8c4 <_strtod_l+0x39c>
    a744:	46ae      	mov	lr, r5
    a746:	f04f 0c00 	mov.w	ip, #0
    a74a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    a74e:	4660      	mov	r0, ip
    a750:	f04f 0b00 	mov.w	fp, #0
    a754:	2d00      	cmp	r5, #0
    a756:	d07e      	beq.n	a856 <_strtod_l+0x32e>
    a758:	ee07 6a90 	vmov	s15, r6
    a75c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a75e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    a762:	ebab 0303 	sub.w	r3, fp, r3
    a766:	f1be 0f00 	cmp.w	lr, #0
    a76a:	bf08      	it	eq
    a76c:	46ae      	moveq	lr, r5
    a76e:	2d10      	cmp	r5, #16
    a770:	930a      	str	r3, [sp, #40]	; 0x28
    a772:	462b      	mov	r3, r5
    a774:	bfa8      	it	ge
    a776:	2310      	movge	r3, #16
    a778:	2d09      	cmp	r5, #9
    a77a:	ed8d 7b04 	vstr	d7, [sp, #16]
    a77e:	dd0c      	ble.n	a79a <_strtod_l+0x272>
    a780:	4a58      	ldr	r2, [pc, #352]	; (a8e4 <_strtod_l+0x3bc>)
    a782:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    a786:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    a78a:	ee06 9a90 	vmov	s13, r9
    a78e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a792:	eea7 6b05 	vfma.f64	d6, d7, d5
    a796:	ed8d 6b04 	vstr	d6, [sp, #16]
    a79a:	2d0f      	cmp	r5, #15
    a79c:	f300 80a8 	bgt.w	a8f0 <_strtod_l+0x3c8>
    a7a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a7a2:	2a00      	cmp	r2, #0
    a7a4:	f000 83e4 	beq.w	af70 <_strtod_l+0xa48>
    a7a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a7aa:	f340 833c 	ble.w	ae26 <_strtod_l+0x8fe>
    a7ae:	2a16      	cmp	r2, #22
    a7b0:	f340 8498 	ble.w	b0e4 <_strtod_l+0xbbc>
    a7b4:	990a      	ldr	r1, [sp, #40]	; 0x28
    a7b6:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    a7ba:	428a      	cmp	r2, r1
    a7bc:	f280 84a6 	bge.w	b10c <_strtod_l+0xbe4>
    a7c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a7c2:	1aeb      	subs	r3, r5, r3
    a7c4:	4413      	add	r3, r2
    a7c6:	e099      	b.n	a8fc <_strtod_l+0x3d4>
    a7c8:	2500      	movs	r5, #0
    a7ca:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    a7ce:	f10a 0301 	add.w	r3, sl, #1
    a7d2:	9311      	str	r3, [sp, #68]	; 0x44
    a7d4:	f89a 4001 	ldrb.w	r4, [sl, #1]
    a7d8:	2c2b      	cmp	r4, #43	; 0x2b
    a7da:	f000 825e 	beq.w	ac9a <_strtod_l+0x772>
    a7de:	2c2d      	cmp	r4, #45	; 0x2d
    a7e0:	f000 81f7 	beq.w	abd2 <_strtod_l+0x6aa>
    a7e4:	2300      	movs	r3, #0
    a7e6:	930a      	str	r3, [sp, #40]	; 0x28
    a7e8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    a7ec:	2b09      	cmp	r3, #9
    a7ee:	f200 81eb 	bhi.w	abc8 <_strtod_l+0x6a0>
    a7f2:	2c30      	cmp	r4, #48	; 0x30
    a7f4:	d105      	bne.n	a802 <_strtod_l+0x2da>
    a7f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a7f8:	3301      	adds	r3, #1
    a7fa:	9311      	str	r3, [sp, #68]	; 0x44
    a7fc:	781c      	ldrb	r4, [r3, #0]
    a7fe:	2c30      	cmp	r4, #48	; 0x30
    a800:	d0fa      	beq.n	a7f8 <_strtod_l+0x2d0>
    a802:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a806:	2b08      	cmp	r3, #8
    a808:	d8a2      	bhi.n	a750 <_strtod_l+0x228>
    a80a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a80c:	920c      	str	r2, [sp, #48]	; 0x30
    a80e:	1c53      	adds	r3, r2, #1
    a810:	9311      	str	r3, [sp, #68]	; 0x44
    a812:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a816:	7854      	ldrb	r4, [r2, #1]
    a818:	2c2f      	cmp	r4, #47	; 0x2f
    a81a:	dc07      	bgt.n	a82c <_strtod_l+0x304>
    a81c:	e3de      	b.n	afdc <_strtod_l+0xab4>
    a81e:	3301      	adds	r3, #1
    a820:	9311      	str	r3, [sp, #68]	; 0x44
    a822:	784c      	ldrb	r4, [r1, #1]
    a824:	2c2f      	cmp	r4, #47	; 0x2f
    a826:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    a82a:	dd06      	ble.n	a83a <_strtod_l+0x312>
    a82c:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    a830:	2c39      	cmp	r4, #57	; 0x39
    a832:	4619      	mov	r1, r3
    a834:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    a838:	ddf1      	ble.n	a81e <_strtod_l+0x2f6>
    a83a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a83c:	1a9b      	subs	r3, r3, r2
    a83e:	2b08      	cmp	r3, #8
    a840:	f340 83cc 	ble.w	afdc <_strtod_l+0xab4>
    a844:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    a848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a84a:	2b00      	cmp	r3, #0
    a84c:	d082      	beq.n	a754 <_strtod_l+0x22c>
    a84e:	f1cb 0b00 	rsb	fp, fp, #0
    a852:	2d00      	cmp	r5, #0
    a854:	d180      	bne.n	a758 <_strtod_l+0x230>
    a856:	9b08      	ldr	r3, [sp, #32]
    a858:	4303      	orrs	r3, r0
    a85a:	d120      	bne.n	a89e <_strtod_l+0x376>
    a85c:	f1bc 0f00 	cmp.w	ip, #0
    a860:	f47f af4a 	bne.w	a6f8 <_strtod_l+0x1d0>
    a864:	2c69      	cmp	r4, #105	; 0x69
    a866:	f000 83cf 	beq.w	b008 <_strtod_l+0xae0>
    a86a:	f300 82f3 	bgt.w	ae54 <_strtod_l+0x92c>
    a86e:	2c49      	cmp	r4, #73	; 0x49
    a870:	f000 83ca 	beq.w	b008 <_strtod_l+0xae0>
    a874:	2c4e      	cmp	r4, #78	; 0x4e
    a876:	f47f af3f 	bne.w	a6f8 <_strtod_l+0x1d0>
    a87a:	491b      	ldr	r1, [pc, #108]	; (a8e8 <_strtod_l+0x3c0>)
    a87c:	a811      	add	r0, sp, #68	; 0x44
    a87e:	f002 f993 	bl	cba8 <__match>
    a882:	2800      	cmp	r0, #0
    a884:	f43f af38 	beq.w	a6f8 <_strtod_l+0x1d0>
    a888:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a88a:	781b      	ldrb	r3, [r3, #0]
    a88c:	2b28      	cmp	r3, #40	; 0x28
    a88e:	f000 84f2 	beq.w	b276 <_strtod_l+0xd4e>
    a892:	4816      	ldr	r0, [pc, #88]	; (a8ec <_strtod_l+0x3c4>)
    a894:	f001 fcc4 	bl	c220 <nan>
    a898:	eeb0 8b40 	vmov.f64	d8, d0
    a89c:	e001      	b.n	a8a2 <_strtod_l+0x37a>
    a89e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; a8d8 <_strtod_l+0x3b0>
    a8a2:	9a07      	ldr	r2, [sp, #28]
    a8a4:	b10a      	cbz	r2, a8aa <_strtod_l+0x382>
    a8a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a8a8:	6013      	str	r3, [r2, #0]
    a8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	f43f af2a 	beq.w	a706 <_strtod_l+0x1de>
    a8b2:	eeb1 8b48 	vneg.f64	d8, d8
    a8b6:	eeb0 0b48 	vmov.f64	d0, d8
    a8ba:	b017      	add	sp, #92	; 0x5c
    a8bc:	ecbd 8b10 	vpop	{d8-d15}
    a8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a8c6:	900b      	str	r0, [sp, #44]	; 0x2c
    a8c8:	1c5a      	adds	r2, r3, #1
    a8ca:	9211      	str	r2, [sp, #68]	; 0x44
    a8cc:	785c      	ldrb	r4, [r3, #1]
    a8ce:	46ae      	mov	lr, r5
    a8d0:	e6f8      	b.n	a6c4 <_strtod_l+0x19c>
    a8d2:	bf00      	nop
    a8d4:	f3af 8000 	nop.w
	...
    a8e0:	20007d24 	.word	0x20007d24
    a8e4:	200002a8 	.word	0x200002a8
    a8e8:	20000c28 	.word	0x20000c28
    a8ec:	20008014 	.word	0x20008014
    a8f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a8f2:	1aeb      	subs	r3, r5, r3
    a8f4:	4413      	add	r3, r2
    a8f6:	2b00      	cmp	r3, #0
    a8f8:	f340 82b0 	ble.w	ae5c <_strtod_l+0x934>
    a8fc:	f013 010f 	ands.w	r1, r3, #15
    a900:	d00a      	beq.n	a918 <_strtod_l+0x3f0>
    a902:	4ac3      	ldr	r2, [pc, #780]	; (ac10 <_strtod_l+0x6e8>)
    a904:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a908:	ed9d 6b04 	vldr	d6, [sp, #16]
    a90c:	ed92 7b00 	vldr	d7, [r2]
    a910:	ee27 7b06 	vmul.f64	d7, d7, d6
    a914:	ed8d 7b04 	vstr	d7, [sp, #16]
    a918:	f033 020f 	bics.w	r2, r3, #15
    a91c:	f040 8238 	bne.w	ad90 <_strtod_l+0x868>
    a920:	2300      	movs	r3, #0
    a922:	9308      	str	r3, [sp, #32]
    a924:	9600      	str	r6, [sp, #0]
    a926:	462b      	mov	r3, r5
    a928:	4672      	mov	r2, lr
    a92a:	4639      	mov	r1, r7
    a92c:	4640      	mov	r0, r8
    a92e:	f002 fac7 	bl	cec0 <__s2b>
    a932:	4681      	mov	r9, r0
    a934:	2800      	cmp	r0, #0
    a936:	f000 82e1 	beq.w	aefc <_strtod_l+0x9d4>
    a93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a93c:	eba3 0b0b 	sub.w	fp, r3, fp
    a940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a942:	ed9f eba9 	vldr	d14, [pc, #676]	; abe8 <_strtod_l+0x6c0>
    a946:	2b00      	cmp	r3, #0
    a948:	ed9f cba9 	vldr	d12, [pc, #676]	; abf0 <_strtod_l+0x6c8>
    a94c:	ed9f dbaa 	vldr	d13, [pc, #680]	; abf8 <_strtod_l+0x6d0>
    a950:	ed9f bbab 	vldr	d11, [pc, #684]	; ac00 <_strtod_l+0x6d8>
    a954:	bfb4      	ite	lt
    a956:	465a      	movlt	r2, fp
    a958:	2200      	movge	r2, #0
    a95a:	f04f 0a00 	mov.w	sl, #0
    a95e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a962:	920b      	str	r2, [sp, #44]	; 0x2c
    a964:	930c      	str	r3, [sp, #48]	; 0x30
    a966:	4654      	mov	r4, sl
    a968:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a96c:	4640      	mov	r0, r8
    a96e:	f002 fa25 	bl	cdbc <_Balloc>
    a972:	4606      	mov	r6, r0
    a974:	2800      	cmp	r0, #0
    a976:	f000 810e 	beq.w	ab96 <_strtod_l+0x66e>
    a97a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a97e:	ed9d 8b04 	vldr	d8, [sp, #16]
    a982:	3202      	adds	r2, #2
    a984:	0092      	lsls	r2, r2, #2
    a986:	f109 010c 	add.w	r1, r9, #12
    a98a:	300c      	adds	r0, #12
    a98c:	f7fd fb72 	bl	8074 <memcpy>
    a990:	eeb0 0b48 	vmov.f64	d0, d8
    a994:	aa14      	add	r2, sp, #80	; 0x50
    a996:	a913      	add	r1, sp, #76	; 0x4c
    a998:	4640      	mov	r0, r8
    a99a:	f002 fe4d 	bl	d638 <__d2b>
    a99e:	9012      	str	r0, [sp, #72]	; 0x48
    a9a0:	2800      	cmp	r0, #0
    a9a2:	f000 80e4 	beq.w	ab6e <_strtod_l+0x646>
    a9a6:	2101      	movs	r1, #1
    a9a8:	4640      	mov	r0, r8
    a9aa:	f002 fb31 	bl	d010 <__i2b>
    a9ae:	4604      	mov	r4, r0
    a9b0:	2800      	cmp	r0, #0
    a9b2:	f000 80f0 	beq.w	ab96 <_strtod_l+0x66e>
    a9b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a9b8:	2a00      	cmp	r2, #0
    a9ba:	f2c0 80de 	blt.w	ab7a <_strtod_l+0x652>
    a9be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a9c0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    a9c2:	eb02 0b03 	add.w	fp, r2, r3
    a9c6:	9b08      	ldr	r3, [sp, #32]
    a9c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
    a9ca:	1ad2      	subs	r2, r2, r3
    a9cc:	442a      	add	r2, r5
    a9ce:	4b91      	ldr	r3, [pc, #580]	; (ac14 <_strtod_l+0x6ec>)
    a9d0:	3a01      	subs	r2, #1
    a9d2:	429a      	cmp	r2, r3
    a9d4:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    a9d8:	f280 8098 	bge.w	ab0c <_strtod_l+0x5e4>
    a9dc:	1a99      	subs	r1, r3, r2
    a9de:	291f      	cmp	r1, #31
    a9e0:	eba5 0501 	sub.w	r5, r5, r1
    a9e4:	f300 80e3 	bgt.w	abae <_strtod_l+0x686>
    a9e8:	2201      	movs	r2, #1
    a9ea:	fa02 f301 	lsl.w	r3, r2, r1
    a9ee:	930d      	str	r3, [sp, #52]	; 0x34
    a9f0:	2300      	movs	r3, #0
    a9f2:	930e      	str	r3, [sp, #56]	; 0x38
    a9f4:	442f      	add	r7, r5
    a9f6:	9b08      	ldr	r3, [sp, #32]
    a9f8:	445d      	add	r5, fp
    a9fa:	45ab      	cmp	fp, r5
    a9fc:	465a      	mov	r2, fp
    a9fe:	441f      	add	r7, r3
    aa00:	bfa8      	it	ge
    aa02:	462a      	movge	r2, r5
    aa04:	42ba      	cmp	r2, r7
    aa06:	bfa8      	it	ge
    aa08:	463a      	movge	r2, r7
    aa0a:	2a00      	cmp	r2, #0
    aa0c:	dd03      	ble.n	aa16 <_strtod_l+0x4ee>
    aa0e:	1aad      	subs	r5, r5, r2
    aa10:	1abf      	subs	r7, r7, r2
    aa12:	ebab 0b02 	sub.w	fp, fp, r2
    aa16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa18:	2b00      	cmp	r3, #0
    aa1a:	f300 8088 	bgt.w	ab2e <_strtod_l+0x606>
    aa1e:	2d00      	cmp	r5, #0
    aa20:	f300 809c 	bgt.w	ab5c <_strtod_l+0x634>
    aa24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aa26:	2b00      	cmp	r3, #0
    aa28:	f300 80b7 	bgt.w	ab9a <_strtod_l+0x672>
    aa2c:	2f00      	cmp	r7, #0
    aa2e:	f300 80a9 	bgt.w	ab84 <_strtod_l+0x65c>
    aa32:	f1bb 0f00 	cmp.w	fp, #0
    aa36:	dd08      	ble.n	aa4a <_strtod_l+0x522>
    aa38:	4621      	mov	r1, r4
    aa3a:	465a      	mov	r2, fp
    aa3c:	4640      	mov	r0, r8
    aa3e:	f002 fc23 	bl	d288 <__lshift>
    aa42:	4604      	mov	r4, r0
    aa44:	2800      	cmp	r0, #0
    aa46:	f000 80a6 	beq.w	ab96 <_strtod_l+0x66e>
    aa4a:	9912      	ldr	r1, [sp, #72]	; 0x48
    aa4c:	4632      	mov	r2, r6
    aa4e:	4640      	mov	r0, r8
    aa50:	f002 fcb4 	bl	d3bc <__mdiff>
    aa54:	4682      	mov	sl, r0
    aa56:	2800      	cmp	r0, #0
    aa58:	f000 809d 	beq.w	ab96 <_strtod_l+0x66e>
    aa5c:	2300      	movs	r3, #0
    aa5e:	68c5      	ldr	r5, [r0, #12]
    aa60:	60c3      	str	r3, [r0, #12]
    aa62:	4621      	mov	r1, r4
    aa64:	f002 fc88 	bl	d378 <__mcmp>
    aa68:	2800      	cmp	r0, #0
    aa6a:	f2c0 83c7 	blt.w	b1fc <_strtod_l+0xcd4>
    aa6e:	f000 8361 	beq.w	b134 <_strtod_l+0xc0c>
    aa72:	4621      	mov	r1, r4
    aa74:	4650      	mov	r0, sl
    aa76:	f002 fe49 	bl	d70c <__ratio>
    aa7a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    aa7e:	eeb4 0bc7 	vcmpe.f64	d0, d7
    aa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aa86:	d846      	bhi.n	ab16 <_strtod_l+0x5ee>
    aa88:	2d00      	cmp	r5, #0
    aa8a:	f000 80cb 	beq.w	ac24 <_strtod_l+0x6fc>
    aa8e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    aa92:	9805      	ldr	r0, [sp, #20]
    aa94:	4b60      	ldr	r3, [pc, #384]	; (ac18 <_strtod_l+0x6f0>)
    aa96:	2200      	movs	r2, #0
    aa98:	4960      	ldr	r1, [pc, #384]	; (ac1c <_strtod_l+0x6f4>)
    aa9a:	f8df c184 	ldr.w	ip, [pc, #388]	; ac20 <_strtod_l+0x6f8>
    aa9e:	ea00 0701 	and.w	r7, r0, r1
    aaa2:	4567      	cmp	r7, ip
    aaa4:	f000 80d4 	beq.w	ac50 <_strtod_l+0x728>
    aaa8:	9908      	ldr	r1, [sp, #32]
    aaaa:	b159      	cbz	r1, aac4 <_strtod_l+0x59c>
    aaac:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    aab0:	d808      	bhi.n	aac4 <_strtod_l+0x59c>
    aab2:	eeb4 9bcb 	vcmpe.f64	d9, d11
    aab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aaba:	f240 8156 	bls.w	ad6a <_strtod_l+0x842>
    aabe:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    aac2:	1bcb      	subs	r3, r1, r7
    aac4:	eeb0 0b48 	vmov.f64	d0, d8
    aac8:	ec43 2b1a 	vmov	d10, r2, r3
    aacc:	f002 fd20 	bl	d510 <__ulp>
    aad0:	eeaa 8b00 	vfma.f64	d8, d10, d0
    aad4:	ed8d 8b04 	vstr	d8, [sp, #16]
    aad8:	ee18 3a90 	vmov	r3, s17
    aadc:	9a08      	ldr	r2, [sp, #32]
    aade:	b922      	cbnz	r2, aaea <_strtod_l+0x5c2>
    aae0:	4a4e      	ldr	r2, [pc, #312]	; (ac1c <_strtod_l+0x6f4>)
    aae2:	401a      	ands	r2, r3
    aae4:	4297      	cmp	r7, r2
    aae6:	f000 80e4 	beq.w	acb2 <_strtod_l+0x78a>
    aaea:	9912      	ldr	r1, [sp, #72]	; 0x48
    aaec:	4640      	mov	r0, r8
    aaee:	f002 f98b 	bl	ce08 <_Bfree>
    aaf2:	4631      	mov	r1, r6
    aaf4:	4640      	mov	r0, r8
    aaf6:	f002 f987 	bl	ce08 <_Bfree>
    aafa:	4621      	mov	r1, r4
    aafc:	4640      	mov	r0, r8
    aafe:	f002 f983 	bl	ce08 <_Bfree>
    ab02:	4651      	mov	r1, sl
    ab04:	4640      	mov	r0, r8
    ab06:	f002 f97f 	bl	ce08 <_Bfree>
    ab0a:	e72d      	b.n	a968 <_strtod_l+0x440>
    ab0c:	2301      	movs	r3, #1
    ab0e:	2100      	movs	r1, #0
    ab10:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    ab14:	e76e      	b.n	a9f4 <_strtod_l+0x4cc>
    ab16:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    ab1a:	ee20 9b09 	vmul.f64	d9, d0, d9
    ab1e:	2d00      	cmp	r5, #0
    ab20:	d15f      	bne.n	abe2 <_strtod_l+0x6ba>
    ab22:	eeb1 7b49 	vneg.f64	d7, d9
    ab26:	9805      	ldr	r0, [sp, #20]
    ab28:	ec53 2b17 	vmov	r2, r3, d7
    ab2c:	e7b4      	b.n	aa98 <_strtod_l+0x570>
    ab2e:	4621      	mov	r1, r4
    ab30:	461a      	mov	r2, r3
    ab32:	4640      	mov	r0, r8
    ab34:	f002 fb48 	bl	d1c8 <__pow5mult>
    ab38:	4604      	mov	r4, r0
    ab3a:	b360      	cbz	r0, ab96 <_strtod_l+0x66e>
    ab3c:	4601      	mov	r1, r0
    ab3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ab40:	4640      	mov	r0, r8
    ab42:	f002 fa93 	bl	d06c <__multiply>
    ab46:	b330      	cbz	r0, ab96 <_strtod_l+0x66e>
    ab48:	900f      	str	r0, [sp, #60]	; 0x3c
    ab4a:	9912      	ldr	r1, [sp, #72]	; 0x48
    ab4c:	4640      	mov	r0, r8
    ab4e:	f002 f95b 	bl	ce08 <_Bfree>
    ab52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ab54:	9212      	str	r2, [sp, #72]	; 0x48
    ab56:	2d00      	cmp	r5, #0
    ab58:	f77f af64 	ble.w	aa24 <_strtod_l+0x4fc>
    ab5c:	9912      	ldr	r1, [sp, #72]	; 0x48
    ab5e:	462a      	mov	r2, r5
    ab60:	4640      	mov	r0, r8
    ab62:	f002 fb91 	bl	d288 <__lshift>
    ab66:	9012      	str	r0, [sp, #72]	; 0x48
    ab68:	2800      	cmp	r0, #0
    ab6a:	f47f af5b 	bne.w	aa24 <_strtod_l+0x4fc>
    ab6e:	2322      	movs	r3, #34	; 0x22
    ab70:	ed9f 8b25 	vldr	d8, [pc, #148]	; ac08 <_strtod_l+0x6e0>
    ab74:	f8c8 3000 	str.w	r3, [r8]
    ab78:	e0bc      	b.n	acf4 <_strtod_l+0x7cc>
    ab7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ab7c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    ab80:	1a9f      	subs	r7, r3, r2
    ab82:	e720      	b.n	a9c6 <_strtod_l+0x49e>
    ab84:	4631      	mov	r1, r6
    ab86:	463a      	mov	r2, r7
    ab88:	4640      	mov	r0, r8
    ab8a:	f002 fb7d 	bl	d288 <__lshift>
    ab8e:	4606      	mov	r6, r0
    ab90:	2800      	cmp	r0, #0
    ab92:	f47f af4e 	bne.w	aa32 <_strtod_l+0x50a>
    ab96:	9812      	ldr	r0, [sp, #72]	; 0x48
    ab98:	e7e9      	b.n	ab6e <_strtod_l+0x646>
    ab9a:	4631      	mov	r1, r6
    ab9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ab9e:	4640      	mov	r0, r8
    aba0:	f002 fb12 	bl	d1c8 <__pow5mult>
    aba4:	4606      	mov	r6, r0
    aba6:	2800      	cmp	r0, #0
    aba8:	f47f af40 	bne.w	aa2c <_strtod_l+0x504>
    abac:	e7f3      	b.n	ab96 <_strtod_l+0x66e>
    abae:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    abb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    abb6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    abba:	2101      	movs	r1, #1
    abbc:	32e2      	adds	r2, #226	; 0xe2
    abbe:	fa01 f302 	lsl.w	r3, r1, r2
    abc2:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    abc6:	e715      	b.n	a9f4 <_strtod_l+0x4cc>
    abc8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    abcc:	f04f 0b00 	mov.w	fp, #0
    abd0:	e5c0      	b.n	a754 <_strtod_l+0x22c>
    abd2:	2301      	movs	r3, #1
    abd4:	930a      	str	r3, [sp, #40]	; 0x28
    abd6:	f10a 0302 	add.w	r3, sl, #2
    abda:	9311      	str	r3, [sp, #68]	; 0x44
    abdc:	f89a 4002 	ldrb.w	r4, [sl, #2]
    abe0:	e602      	b.n	a7e8 <_strtod_l+0x2c0>
    abe2:	eeb0 7b49 	vmov.f64	d7, d9
    abe6:	e79e      	b.n	ab26 <_strtod_l+0x5fe>
    abe8:	94a03595 	.word	0x94a03595
    abec:	3fcfffff 	.word	0x3fcfffff
    abf0:	94a03595 	.word	0x94a03595
    abf4:	3fdfffff 	.word	0x3fdfffff
    abf8:	35afe535 	.word	0x35afe535
    abfc:	3fe00000 	.word	0x3fe00000
    ac00:	ffc00000 	.word	0xffc00000
    ac04:	41dfffff 	.word	0x41dfffff
    ac08:	00000000 	.word	0x00000000
    ac0c:	7ff00000 	.word	0x7ff00000
    ac10:	200002a8 	.word	0x200002a8
    ac14:	fffffc02 	.word	0xfffffc02
    ac18:	3ff00000 	.word	0x3ff00000
    ac1c:	7ff00000 	.word	0x7ff00000
    ac20:	7fe00000 	.word	0x7fe00000
    ac24:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ac28:	2900      	cmp	r1, #0
    ac2a:	f000 8085 	beq.w	ad38 <_strtod_l+0x810>
    ac2e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ac32:	2901      	cmp	r1, #1
    ac34:	f000 81d8 	beq.w	afe8 <_strtod_l+0xac0>
    ac38:	4610      	mov	r0, r2
    ac3a:	4bb7      	ldr	r3, [pc, #732]	; (af18 <_strtod_l+0x9f0>)
    ac3c:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    ac40:	2200      	movs	r2, #0
    ac42:	e729      	b.n	aa98 <_strtod_l+0x570>
    ac44:	2c65      	cmp	r4, #101	; 0x65
    ac46:	f04f 0c01 	mov.w	ip, #1
    ac4a:	f43f adbe 	beq.w	a7ca <_strtod_l+0x2a2>
    ac4e:	e54c      	b.n	a6ea <_strtod_l+0x1c2>
    ac50:	ec43 2b1a 	vmov	d10, r2, r3
    ac54:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    ac58:	9305      	str	r3, [sp, #20]
    ac5a:	ed9d fb04 	vldr	d15, [sp, #16]
    ac5e:	eeb0 0b4f 	vmov.f64	d0, d15
    ac62:	f002 fc55 	bl	d510 <__ulp>
    ac66:	49ad      	ldr	r1, [pc, #692]	; (af1c <_strtod_l+0x9f4>)
    ac68:	eeaa fb00 	vfma.f64	d15, d10, d0
    ac6c:	ee1f 3a90 	vmov	r3, s31
    ac70:	4aab      	ldr	r2, [pc, #684]	; (af20 <_strtod_l+0x9f8>)
    ac72:	4019      	ands	r1, r3
    ac74:	4291      	cmp	r1, r2
    ac76:	ed8d fb04 	vstr	d15, [sp, #16]
    ac7a:	d972      	bls.n	ad62 <_strtod_l+0x83a>
    ac7c:	4ba9      	ldr	r3, [pc, #676]	; (af24 <_strtod_l+0x9fc>)
    ac7e:	ee18 2a90 	vmov	r2, s17
    ac82:	429a      	cmp	r2, r3
    ac84:	d103      	bne.n	ac8e <_strtod_l+0x766>
    ac86:	ee18 3a10 	vmov	r3, s16
    ac8a:	3301      	adds	r3, #1
    ac8c:	d083      	beq.n	ab96 <_strtod_l+0x66e>
    ac8e:	4aa5      	ldr	r2, [pc, #660]	; (af24 <_strtod_l+0x9fc>)
    ac90:	f04f 33ff 	mov.w	r3, #4294967295
    ac94:	e9cd 3204 	strd	r3, r2, [sp, #16]
    ac98:	e727      	b.n	aaea <_strtod_l+0x5c2>
    ac9a:	2300      	movs	r3, #0
    ac9c:	930a      	str	r3, [sp, #40]	; 0x28
    ac9e:	e79a      	b.n	abd6 <_strtod_l+0x6ae>
    aca0:	2c65      	cmp	r4, #101	; 0x65
    aca2:	f000 80d0 	beq.w	ae46 <_strtod_l+0x91e>
    aca6:	2c45      	cmp	r4, #69	; 0x45
    aca8:	f000 80cd 	beq.w	ae46 <_strtod_l+0x91e>
    acac:	f04f 0c01 	mov.w	ip, #1
    acb0:	e5d1      	b.n	a856 <_strtod_l+0x32e>
    acb2:	ec51 0b19 	vmov	r0, r1, d9
    acb6:	930d      	str	r3, [sp, #52]	; 0x34
    acb8:	f009 fbe4 	bl	14484 <__aeabi_d2lz>
    acbc:	f009 fbb4 	bl	14428 <__aeabi_l2d>
    acc0:	9b04      	ldr	r3, [sp, #16]
    acc2:	431d      	orrs	r5, r3
    acc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    acc6:	ec41 0b17 	vmov	d7, r0, r1
    acca:	f3c3 0313 	ubfx	r3, r3, #0, #20
    acce:	431d      	orrs	r5, r3
    acd0:	ee39 9b47 	vsub.f64	d9, d9, d7
    acd4:	f000 80a0 	beq.w	ae18 <_strtod_l+0x8f0>
    acd8:	eeb4 9bcc 	vcmpe.f64	d9, d12
    acdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ace0:	d405      	bmi.n	acee <_strtod_l+0x7c6>
    ace2:	eeb4 9bcd 	vcmpe.f64	d9, d13
    ace6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acea:	f77f aefe 	ble.w	aaea <_strtod_l+0x5c2>
    acee:	ed9d 8b04 	vldr	d8, [sp, #16]
    acf2:	9812      	ldr	r0, [sp, #72]	; 0x48
    acf4:	4601      	mov	r1, r0
    acf6:	4640      	mov	r0, r8
    acf8:	f002 f886 	bl	ce08 <_Bfree>
    acfc:	4631      	mov	r1, r6
    acfe:	4640      	mov	r0, r8
    ad00:	f002 f882 	bl	ce08 <_Bfree>
    ad04:	4621      	mov	r1, r4
    ad06:	4640      	mov	r0, r8
    ad08:	f002 f87e 	bl	ce08 <_Bfree>
    ad0c:	4649      	mov	r1, r9
    ad0e:	4640      	mov	r0, r8
    ad10:	f002 f87a 	bl	ce08 <_Bfree>
    ad14:	4651      	mov	r1, sl
    ad16:	4640      	mov	r0, r8
    ad18:	f002 f876 	bl	ce08 <_Bfree>
    ad1c:	e5c1      	b.n	a8a2 <_strtod_l+0x37a>
    ad1e:	2201      	movs	r2, #1
    ad20:	9209      	str	r2, [sp, #36]	; 0x24
    ad22:	1c79      	adds	r1, r7, #1
    ad24:	9111      	str	r1, [sp, #68]	; 0x44
    ad26:	787a      	ldrb	r2, [r7, #1]
    ad28:	2a00      	cmp	r2, #0
    ad2a:	f43f ace5 	beq.w	a6f8 <_strtod_l+0x1d0>
    ad2e:	460f      	mov	r7, r1
    ad30:	e470      	b.n	a614 <_strtod_l+0xec>
    ad32:	2200      	movs	r2, #0
    ad34:	9209      	str	r2, [sp, #36]	; 0x24
    ad36:	e7f4      	b.n	ad22 <_strtod_l+0x7fa>
    ad38:	f3c2 0313 	ubfx	r3, r2, #0, #20
    ad3c:	4610      	mov	r0, r2
    ad3e:	2b00      	cmp	r3, #0
    ad40:	f47f af7b 	bne.w	ac3a <_strtod_l+0x712>
    ad44:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    ad48:	eeb4 0bc7 	vcmpe.f64	d0, d7
    ad4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ad50:	f100 81d3 	bmi.w	b0fa <_strtod_l+0xbd2>
    ad54:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    ad58:	ee20 9b09 	vmul.f64	d9, d0, d9
    ad5c:	eeb1 7b49 	vneg.f64	d7, d9
    ad60:	e6e2      	b.n	ab28 <_strtod_l+0x600>
    ad62:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    ad66:	9305      	str	r3, [sp, #20]
    ad68:	e6b8      	b.n	aadc <_strtod_l+0x5b4>
    ad6a:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    ad6e:	ee19 3a10 	vmov	r3, s18
    ad72:	2b01      	cmp	r3, #1
    ad74:	bf38      	it	cc
    ad76:	2301      	movcc	r3, #1
    ad78:	ee09 3a10 	vmov	s18, r3
    ad7c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    ad80:	2d00      	cmp	r5, #0
    ad82:	f040 813e 	bne.w	b002 <_strtod_l+0xada>
    ad86:	eeb1 7b49 	vneg.f64	d7, d9
    ad8a:	ec53 2b17 	vmov	r2, r3, d7
    ad8e:	e696      	b.n	aabe <_strtod_l+0x596>
    ad90:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    ad94:	f300 80b2 	bgt.w	aefc <_strtod_l+0x9d4>
    ad98:	2a10      	cmp	r2, #16
    ad9a:	ea4f 1322 	mov.w	r3, r2, asr #4
    ad9e:	f340 8286 	ble.w	b2ae <_strtod_l+0xd86>
    ada2:	4c61      	ldr	r4, [pc, #388]	; (af28 <_strtod_l+0xa00>)
    ada4:	ed9d 7b04 	vldr	d7, [sp, #16]
    ada8:	2000      	movs	r0, #0
    adaa:	4622      	mov	r2, r4
    adac:	4601      	mov	r1, r0
    adae:	f013 0f01 	tst.w	r3, #1
    adb2:	f101 0101 	add.w	r1, r1, #1
    adb6:	ea4f 0363 	mov.w	r3, r3, asr #1
    adba:	d004      	beq.n	adc6 <_strtod_l+0x89e>
    adbc:	ed92 6b00 	vldr	d6, [r2]
    adc0:	2001      	movs	r0, #1
    adc2:	ee27 7b06 	vmul.f64	d7, d7, d6
    adc6:	2b01      	cmp	r3, #1
    adc8:	f102 0208 	add.w	r2, r2, #8
    adcc:	d1ef      	bne.n	adae <_strtod_l+0x886>
    adce:	b108      	cbz	r0, add4 <_strtod_l+0x8ac>
    add0:	ed8d 7b04 	vstr	d7, [sp, #16]
    add4:	9b05      	ldr	r3, [sp, #20]
    add6:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    adda:	9305      	str	r3, [sp, #20]
    addc:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    ade0:	ed9d 6b04 	vldr	d6, [sp, #16]
    ade4:	ed94 7b00 	vldr	d7, [r4]
    ade8:	4b4c      	ldr	r3, [pc, #304]	; (af1c <_strtod_l+0x9f4>)
    adea:	ee27 7b06 	vmul.f64	d7, d7, d6
    adee:	ee17 2a90 	vmov	r2, s15
    adf2:	494e      	ldr	r1, [pc, #312]	; (af2c <_strtod_l+0xa04>)
    adf4:	4013      	ands	r3, r2
    adf6:	428b      	cmp	r3, r1
    adf8:	ed8d 7b04 	vstr	d7, [sp, #16]
    adfc:	d87e      	bhi.n	aefc <_strtod_l+0x9d4>
    adfe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    ae02:	428b      	cmp	r3, r1
    ae04:	f240 81d6 	bls.w	b1b4 <_strtod_l+0xc8c>
    ae08:	4c46      	ldr	r4, [pc, #280]	; (af24 <_strtod_l+0x9fc>)
    ae0a:	f04f 33ff 	mov.w	r3, #4294967295
    ae0e:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ae12:	2300      	movs	r3, #0
    ae14:	9308      	str	r3, [sp, #32]
    ae16:	e585      	b.n	a924 <_strtod_l+0x3fc>
    ae18:	eeb4 9bce 	vcmpe.f64	d9, d14
    ae1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae20:	f57f ae63 	bpl.w	aaea <_strtod_l+0x5c2>
    ae24:	e763      	b.n	acee <_strtod_l+0x7c6>
    ae26:	3216      	adds	r2, #22
    ae28:	f6ff ad62 	blt.w	a8f0 <_strtod_l+0x3c8>
    ae2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae2e:	eba3 0b0b 	sub.w	fp, r3, fp
    ae32:	4b3f      	ldr	r3, [pc, #252]	; (af30 <_strtod_l+0xa08>)
    ae34:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    ae38:	ed93 7b00 	vldr	d7, [r3]
    ae3c:	ed9d 6b04 	vldr	d6, [sp, #16]
    ae40:	ee86 8b07 	vdiv.f64	d8, d6, d7
    ae44:	e52d      	b.n	a8a2 <_strtod_l+0x37a>
    ae46:	f04f 0e00 	mov.w	lr, #0
    ae4a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    ae4e:	f04f 0c01 	mov.w	ip, #1
    ae52:	e44e      	b.n	a6f2 <_strtod_l+0x1ca>
    ae54:	2c6e      	cmp	r4, #110	; 0x6e
    ae56:	f43f ad10 	beq.w	a87a <_strtod_l+0x352>
    ae5a:	e44d      	b.n	a6f8 <_strtod_l+0x1d0>
    ae5c:	f43f ad60 	beq.w	a920 <_strtod_l+0x3f8>
    ae60:	425b      	negs	r3, r3
    ae62:	f013 010f 	ands.w	r1, r3, #15
    ae66:	d00a      	beq.n	ae7e <_strtod_l+0x956>
    ae68:	4a31      	ldr	r2, [pc, #196]	; (af30 <_strtod_l+0xa08>)
    ae6a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    ae6e:	ed9d 6b04 	vldr	d6, [sp, #16]
    ae72:	ed92 7b00 	vldr	d7, [r2]
    ae76:	ee86 7b07 	vdiv.f64	d7, d6, d7
    ae7a:	ed8d 7b04 	vstr	d7, [sp, #16]
    ae7e:	111b      	asrs	r3, r3, #4
    ae80:	f43f ad4e 	beq.w	a920 <_strtod_l+0x3f8>
    ae84:	2b1f      	cmp	r3, #31
    ae86:	dc33      	bgt.n	aef0 <_strtod_l+0x9c8>
    ae88:	f013 0210 	ands.w	r2, r3, #16
    ae8c:	bf18      	it	ne
    ae8e:	226a      	movne	r2, #106	; 0x6a
    ae90:	ed9d 7b04 	vldr	d7, [sp, #16]
    ae94:	9208      	str	r2, [sp, #32]
    ae96:	4a27      	ldr	r2, [pc, #156]	; (af34 <_strtod_l+0xa0c>)
    ae98:	2100      	movs	r1, #0
    ae9a:	07d8      	lsls	r0, r3, #31
    ae9c:	d504      	bpl.n	aea8 <_strtod_l+0x980>
    ae9e:	ed92 6b00 	vldr	d6, [r2]
    aea2:	2101      	movs	r1, #1
    aea4:	ee27 7b06 	vmul.f64	d7, d7, d6
    aea8:	105b      	asrs	r3, r3, #1
    aeaa:	f102 0208 	add.w	r2, r2, #8
    aeae:	d1f4      	bne.n	ae9a <_strtod_l+0x972>
    aeb0:	b109      	cbz	r1, aeb6 <_strtod_l+0x98e>
    aeb2:	ed8d 7b04 	vstr	d7, [sp, #16]
    aeb6:	9b08      	ldr	r3, [sp, #32]
    aeb8:	b193      	cbz	r3, aee0 <_strtod_l+0x9b8>
    aeba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aebe:	f3c1 520a 	ubfx	r2, r1, #20, #11
    aec2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    aec6:	2b00      	cmp	r3, #0
    aec8:	dd0a      	ble.n	aee0 <_strtod_l+0x9b8>
    aeca:	2b1f      	cmp	r3, #31
    aecc:	f340 822f 	ble.w	b32e <_strtod_l+0xe06>
    aed0:	2000      	movs	r0, #0
    aed2:	2b34      	cmp	r3, #52	; 0x34
    aed4:	9004      	str	r0, [sp, #16]
    aed6:	f340 8240 	ble.w	b35a <_strtod_l+0xe32>
    aeda:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    aede:	9305      	str	r3, [sp, #20]
    aee0:	ed9d 7b04 	vldr	d7, [sp, #16]
    aee4:	eeb5 7b40 	vcmp.f64	d7, #0.0
    aee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aeec:	f47f ad1a 	bne.w	a924 <_strtod_l+0x3fc>
    aef0:	2322      	movs	r3, #34	; 0x22
    aef2:	ed9f 8b05 	vldr	d8, [pc, #20]	; af08 <_strtod_l+0x9e0>
    aef6:	f8c8 3000 	str.w	r3, [r8]
    aefa:	e4d2      	b.n	a8a2 <_strtod_l+0x37a>
    aefc:	2322      	movs	r3, #34	; 0x22
    aefe:	ed9f 8b04 	vldr	d8, [pc, #16]	; af10 <_strtod_l+0x9e8>
    af02:	f8c8 3000 	str.w	r3, [r8]
    af06:	e4cc      	b.n	a8a2 <_strtod_l+0x37a>
	...
    af14:	7ff00000 	.word	0x7ff00000
    af18:	bff00000 	.word	0xbff00000
    af1c:	7ff00000 	.word	0x7ff00000
    af20:	7c9fffff 	.word	0x7c9fffff
    af24:	7fefffff 	.word	0x7fefffff
    af28:	20000280 	.word	0x20000280
    af2c:	7ca00000 	.word	0x7ca00000
    af30:	200002a8 	.word	0x200002a8
    af34:	20000370 	.word	0x20000370
    af38:	9302      	str	r3, [sp, #8]
    af3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af3c:	9301      	str	r3, [sp, #4]
    af3e:	ab12      	add	r3, sp, #72	; 0x48
    af40:	9300      	str	r3, [sp, #0]
    af42:	4aa7      	ldr	r2, [pc, #668]	; (b1e0 <_strtod_l+0xcb8>)
    af44:	ab13      	add	r3, sp, #76	; 0x4c
    af46:	a911      	add	r1, sp, #68	; 0x44
    af48:	4640      	mov	r0, r8
    af4a:	f001 fb63 	bl	c614 <__gethex>
    af4e:	f010 050f 	ands.w	r5, r0, #15
    af52:	4604      	mov	r4, r0
    af54:	f43f aca3 	beq.w	a89e <_strtod_l+0x376>
    af58:	2d06      	cmp	r5, #6
    af5a:	d174      	bne.n	b046 <_strtod_l+0xb1e>
    af5c:	9b07      	ldr	r3, [sp, #28]
    af5e:	ed9f 8b9a 	vldr	d8, [pc, #616]	; b1c8 <_strtod_l+0xca0>
    af62:	3701      	adds	r7, #1
    af64:	2b00      	cmp	r3, #0
    af66:	f43f abce 	beq.w	a706 <_strtod_l+0x1de>
    af6a:	601f      	str	r7, [r3, #0]
    af6c:	f7ff bbcb 	b.w	a706 <_strtod_l+0x1de>
    af70:	ed9d 8b04 	vldr	d8, [sp, #16]
    af74:	e495      	b.n	a8a2 <_strtod_l+0x37a>
    af76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    af78:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    af7c:	4403      	add	r3, r0
    af7e:	930b      	str	r3, [sp, #44]	; 0x2c
    af80:	2801      	cmp	r0, #1
    af82:	f105 0301 	add.w	r3, r5, #1
    af86:	461a      	mov	r2, r3
    af88:	d014      	beq.n	afb4 <_strtod_l+0xa8c>
    af8a:	4428      	add	r0, r5
    af8c:	1e44      	subs	r4, r0, #1
    af8e:	e003      	b.n	af98 <_strtod_l+0xa70>
    af90:	0046      	lsls	r6, r0, #1
    af92:	429c      	cmp	r4, r3
    af94:	d00d      	beq.n	afb2 <_strtod_l+0xa8a>
    af96:	3301      	adds	r3, #1
    af98:	462a      	mov	r2, r5
    af9a:	2a08      	cmp	r2, #8
    af9c:	461d      	mov	r5, r3
    af9e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    afa2:	d9f5      	bls.n	af90 <_strtod_l+0xa68>
    afa4:	2b10      	cmp	r3, #16
    afa6:	bfdc      	itt	le
    afa8:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    afac:	ea4f 0949 	movle.w	r9, r9, lsl #1
    afb0:	e7ef      	b.n	af92 <_strtod_l+0xa6a>
    afb2:	3202      	adds	r2, #2
    afb4:	2d08      	cmp	r5, #8
    afb6:	dc3c      	bgt.n	b032 <_strtod_l+0xb0a>
    afb8:	4615      	mov	r5, r2
    afba:	f7ff bb79 	b.w	a6b0 <_strtod_l+0x188>
    afbe:	4989      	ldr	r1, [pc, #548]	; (b1e4 <_strtod_l+0xcbc>)
    afc0:	2201      	movs	r2, #1
    afc2:	4638      	mov	r0, r7
    afc4:	f000 fd74 	bl	bab0 <strncmp>
    afc8:	2800      	cmp	r0, #0
    afca:	f000 8082 	beq.w	b0d2 <_strtod_l+0xbaa>
    afce:	f04f 0e00 	mov.w	lr, #0
    afd2:	46f1      	mov	r9, lr
    afd4:	4676      	mov	r6, lr
    afd6:	4675      	mov	r5, lr
    afd8:	f7ff bbb5 	b.w	a746 <_strtod_l+0x21e>
    afdc:	f644 631f 	movw	r3, #19999	; 0x4e1f
    afe0:	459b      	cmp	fp, r3
    afe2:	bfa8      	it	ge
    afe4:	469b      	movge	fp, r3
    afe6:	e42f      	b.n	a848 <_strtod_l+0x320>
    afe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    afec:	4618      	mov	r0, r3
    afee:	2b00      	cmp	r3, #0
    aff0:	f47f ae23 	bne.w	ac3a <_strtod_l+0x712>
    aff4:	2322      	movs	r3, #34	; 0x22
    aff6:	ed9f 8b74 	vldr	d8, [pc, #464]	; b1c8 <_strtod_l+0xca0>
    affa:	9812      	ldr	r0, [sp, #72]	; 0x48
    affc:	f8c8 3000 	str.w	r3, [r8]
    b000:	e678      	b.n	acf4 <_strtod_l+0x7cc>
    b002:	eeb0 7b49 	vmov.f64	d7, d9
    b006:	e6c0      	b.n	ad8a <_strtod_l+0x862>
    b008:	4977      	ldr	r1, [pc, #476]	; (b1e8 <_strtod_l+0xcc0>)
    b00a:	a811      	add	r0, sp, #68	; 0x44
    b00c:	f001 fdcc 	bl	cba8 <__match>
    b010:	2800      	cmp	r0, #0
    b012:	f43f ab71 	beq.w	a6f8 <_strtod_l+0x1d0>
    b016:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b018:	4974      	ldr	r1, [pc, #464]	; (b1ec <_strtod_l+0xcc4>)
    b01a:	3b01      	subs	r3, #1
    b01c:	a811      	add	r0, sp, #68	; 0x44
    b01e:	9311      	str	r3, [sp, #68]	; 0x44
    b020:	f001 fdc2 	bl	cba8 <__match>
    b024:	b910      	cbnz	r0, b02c <_strtod_l+0xb04>
    b026:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b028:	3301      	adds	r3, #1
    b02a:	9311      	str	r3, [sp, #68]	; 0x44
    b02c:	ed9f 8b68 	vldr	d8, [pc, #416]	; b1d0 <_strtod_l+0xca8>
    b030:	e437      	b.n	a8a2 <_strtod_l+0x37a>
    b032:	2a10      	cmp	r2, #16
    b034:	bfdc      	itt	le
    b036:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    b03a:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    b03e:	4615      	mov	r5, r2
    b040:	2000      	movs	r0, #0
    b042:	f7ff bb3a 	b.w	a6ba <_strtod_l+0x192>
    b046:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b048:	b13a      	cbz	r2, b05a <_strtod_l+0xb32>
    b04a:	2135      	movs	r1, #53	; 0x35
    b04c:	a814      	add	r0, sp, #80	; 0x50
    b04e:	f002 fb8f 	bl	d770 <__copybits>
    b052:	9912      	ldr	r1, [sp, #72]	; 0x48
    b054:	4640      	mov	r0, r8
    b056:	f001 fed7 	bl	ce08 <_Bfree>
    b05a:	3d01      	subs	r5, #1
    b05c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b05e:	2d04      	cmp	r5, #4
    b060:	f200 818f 	bhi.w	b382 <_strtod_l+0xe5a>
    b064:	e8df f005 	tbb	[pc, r5]
    b068:	1f2a2d03 	.word	0x1f2a2d03
    b06c:	03          	.byte	0x03
    b06d:	00          	.byte	0x00
    b06e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b070:	9204      	str	r2, [sp, #16]
    b072:	f203 4233 	addw	r2, r3, #1075	; 0x433
    b076:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b078:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    b07c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    b080:	9305      	str	r3, [sp, #20]
    b082:	05e5      	lsls	r5, r4, #23
    b084:	d502      	bpl.n	b08c <_strtod_l+0xb64>
    b086:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b08a:	9305      	str	r3, [sp, #20]
    b08c:	4a58      	ldr	r2, [pc, #352]	; (b1f0 <_strtod_l+0xcc8>)
    b08e:	401a      	ands	r2, r3
    b090:	ed9d 8b04 	vldr	d8, [sp, #16]
    b094:	2a00      	cmp	r2, #0
    b096:	f47f ac04 	bne.w	a8a2 <_strtod_l+0x37a>
    b09a:	f000 fded 	bl	bc78 <__errno>
    b09e:	2322      	movs	r3, #34	; 0x22
    b0a0:	6003      	str	r3, [r0, #0]
    b0a2:	f7ff bbfe 	b.w	a8a2 <_strtod_l+0x37a>
    b0a6:	f04f 33ff 	mov.w	r3, #4294967295
    b0aa:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    b0ae:	e9cd 3604 	strd	r3, r6, [sp, #16]
    b0b2:	05e3      	lsls	r3, r4, #23
    b0b4:	f57f af5c 	bpl.w	af70 <_strtod_l+0xa48>
    b0b8:	9b05      	ldr	r3, [sp, #20]
    b0ba:	e7e4      	b.n	b086 <_strtod_l+0xb5e>
    b0bc:	4b4c      	ldr	r3, [pc, #304]	; (b1f0 <_strtod_l+0xcc8>)
    b0be:	9305      	str	r3, [sp, #20]
    b0c0:	e7f7      	b.n	b0b2 <_strtod_l+0xb8a>
    b0c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b0c4:	9304      	str	r3, [sp, #16]
    b0c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b0c8:	9305      	str	r3, [sp, #20]
    b0ca:	e7da      	b.n	b082 <_strtod_l+0xb5a>
    b0cc:	2000      	movs	r0, #0
    b0ce:	f7ff bae1 	b.w	a694 <_strtod_l+0x16c>
    b0d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b0d4:	461a      	mov	r2, r3
    b0d6:	3301      	adds	r3, #1
    b0d8:	9311      	str	r3, [sp, #68]	; 0x44
    b0da:	7854      	ldrb	r4, [r2, #1]
    b0dc:	4606      	mov	r6, r0
    b0de:	4681      	mov	r9, r0
    b0e0:	f7ff bacd 	b.w	a67e <_strtod_l+0x156>
    b0e4:	4b43      	ldr	r3, [pc, #268]	; (b1f4 <_strtod_l+0xccc>)
    b0e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b0ea:	ed93 8b00 	vldr	d8, [r3]
    b0ee:	ed9d 7b04 	vldr	d7, [sp, #16]
    b0f2:	ee28 8b07 	vmul.f64	d8, d8, d7
    b0f6:	f7ff bbd4 	b.w	a8a2 <_strtod_l+0x37a>
    b0fa:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    b0fe:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    b102:	e511      	b.n	ab28 <_strtod_l+0x600>
    b104:	46ae      	mov	lr, r5
    b106:	900b      	str	r0, [sp, #44]	; 0x2c
    b108:	f7ff badc 	b.w	a6c4 <_strtod_l+0x19c>
    b10c:	4b39      	ldr	r3, [pc, #228]	; (b1f4 <_strtod_l+0xccc>)
    b10e:	f1c5 050f 	rsb	r5, r5, #15
    b112:	1b4a      	subs	r2, r1, r5
    b114:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    b118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b11c:	ed95 8b00 	vldr	d8, [r5]
    b120:	ed93 7b00 	vldr	d7, [r3]
    b124:	ed9d 6b04 	vldr	d6, [sp, #16]
    b128:	ee28 8b06 	vmul.f64	d8, d8, d6
    b12c:	ee28 8b07 	vmul.f64	d8, d8, d7
    b130:	f7ff bbb7 	b.w	a8a2 <_strtod_l+0x37a>
    b134:	2d00      	cmp	r5, #0
    b136:	f000 8095 	beq.w	b264 <_strtod_l+0xd3c>
    b13a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    b13e:	4b2e      	ldr	r3, [pc, #184]	; (b1f8 <_strtod_l+0xcd0>)
    b140:	f3cc 0113 	ubfx	r1, ip, #0, #20
    b144:	4299      	cmp	r1, r3
    b146:	4662      	mov	r2, ip
    b148:	f000 80d2 	beq.w	b2f0 <_strtod_l+0xdc8>
    b14c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b14e:	2b00      	cmp	r3, #0
    b150:	f000 80a5 	beq.w	b29e <_strtod_l+0xd76>
    b154:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b158:	4213      	tst	r3, r2
    b15a:	4617      	mov	r7, r2
    b15c:	d01a      	beq.n	b194 <_strtod_l+0xc6c>
    b15e:	eeb0 0b48 	vmov.f64	d0, d8
    b162:	2d00      	cmp	r5, #0
    b164:	f000 80a6 	beq.w	b2b4 <_strtod_l+0xd8c>
    b168:	f002 f9d2 	bl	d510 <__ulp>
    b16c:	9b08      	ldr	r3, [sp, #32]
    b16e:	b17b      	cbz	r3, b190 <_strtod_l+0xc68>
    b170:	f3c7 530a 	ubfx	r3, r7, #20, #11
    b174:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b178:	2b00      	cmp	r3, #0
    b17a:	dd09      	ble.n	b190 <_strtod_l+0xc68>
    b17c:	051b      	lsls	r3, r3, #20
    b17e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    b182:	2000      	movs	r0, #0
    b184:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    b188:	ec41 0b17 	vmov	d7, r0, r1
    b18c:	ee20 0b07 	vmul.f64	d0, d0, d7
    b190:	ee38 8b00 	vadd.f64	d8, d8, d0
    b194:	9b08      	ldr	r3, [sp, #32]
    b196:	b15b      	cbz	r3, b1b0 <_strtod_l+0xc88>
    b198:	ed9f 7b0f 	vldr	d7, [pc, #60]	; b1d8 <_strtod_l+0xcb0>
    b19c:	4b14      	ldr	r3, [pc, #80]	; (b1f0 <_strtod_l+0xcc8>)
    b19e:	ee28 8b07 	vmul.f64	d8, d8, d7
    b1a2:	ee18 2a90 	vmov	r2, s17
    b1a6:	4013      	ands	r3, r2
    b1a8:	b913      	cbnz	r3, b1b0 <_strtod_l+0xc88>
    b1aa:	2322      	movs	r3, #34	; 0x22
    b1ac:	f8c8 3000 	str.w	r3, [r8]
    b1b0:	9812      	ldr	r0, [sp, #72]	; 0x48
    b1b2:	e59f      	b.n	acf4 <_strtod_l+0x7cc>
    b1b4:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    b1b8:	9305      	str	r3, [sp, #20]
    b1ba:	2300      	movs	r3, #0
    b1bc:	9308      	str	r3, [sp, #32]
    b1be:	f7ff bbb1 	b.w	a924 <_strtod_l+0x3fc>
    b1c2:	bf00      	nop
    b1c4:	f3af 8000 	nop.w
	...
    b1d4:	7ff00000 	.word	0x7ff00000
    b1d8:	00000000 	.word	0x00000000
    b1dc:	39500000 	.word	0x39500000
    b1e0:	20007a14 	.word	0x20007a14
    b1e4:	20007d24 	.word	0x20007d24
    b1e8:	20000c1c 	.word	0x20000c1c
    b1ec:	20000c20 	.word	0x20000c20
    b1f0:	7ff00000 	.word	0x7ff00000
    b1f4:	200002a8 	.word	0x200002a8
    b1f8:	000fffff 	.word	0x000fffff
    b1fc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b200:	430d      	orrs	r5, r1
    b202:	d1c7      	bne.n	b194 <_strtod_l+0xc6c>
    b204:	f3c2 0313 	ubfx	r3, r2, #0, #20
    b208:	4617      	mov	r7, r2
    b20a:	2b00      	cmp	r3, #0
    b20c:	d1c2      	bne.n	b194 <_strtod_l+0xc6c>
    b20e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b212:	0d1b      	lsrs	r3, r3, #20
    b214:	051b      	lsls	r3, r3, #20
    b216:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    b21a:	d9bb      	bls.n	b194 <_strtod_l+0xc6c>
    b21c:	f8da 3014 	ldr.w	r3, [sl, #20]
    b220:	b91b      	cbnz	r3, b22a <_strtod_l+0xd02>
    b222:	f8da 3010 	ldr.w	r3, [sl, #16]
    b226:	2b01      	cmp	r3, #1
    b228:	ddb4      	ble.n	b194 <_strtod_l+0xc6c>
    b22a:	4651      	mov	r1, sl
    b22c:	2201      	movs	r2, #1
    b22e:	4640      	mov	r0, r8
    b230:	f002 f82a 	bl	d288 <__lshift>
    b234:	4621      	mov	r1, r4
    b236:	4682      	mov	sl, r0
    b238:	f002 f89e 	bl	d378 <__mcmp>
    b23c:	2800      	cmp	r0, #0
    b23e:	dda9      	ble.n	b194 <_strtod_l+0xc6c>
    b240:	9b08      	ldr	r3, [sp, #32]
    b242:	2b00      	cmp	r3, #0
    b244:	d17e      	bne.n	b344 <_strtod_l+0xe1c>
    b246:	4b50      	ldr	r3, [pc, #320]	; (b388 <_strtod_l+0xe60>)
    b248:	403b      	ands	r3, r7
    b24a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    b24e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    b252:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    b256:	9305      	str	r3, [sp, #20]
    b258:	f04f 33ff 	mov.w	r3, #4294967295
    b25c:	9304      	str	r3, [sp, #16]
    b25e:	ed9d 8b04 	vldr	d8, [sp, #16]
    b262:	e797      	b.n	b194 <_strtod_l+0xc6c>
    b264:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b268:	f3c2 0313 	ubfx	r3, r2, #0, #20
    b26c:	430b      	orrs	r3, r1
    b26e:	4617      	mov	r7, r2
    b270:	f47f af6c 	bne.w	b14c <_strtod_l+0xc24>
    b274:	e7e4      	b.n	b240 <_strtod_l+0xd18>
    b276:	4945      	ldr	r1, [pc, #276]	; (b38c <_strtod_l+0xe64>)
    b278:	a811      	add	r0, sp, #68	; 0x44
    b27a:	aa14      	add	r2, sp, #80	; 0x50
    b27c:	f001 fcb0 	bl	cbe0 <__hexnan>
    b280:	2805      	cmp	r0, #5
    b282:	f47f ab06 	bne.w	a892 <_strtod_l+0x36a>
    b286:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b288:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    b28c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    b290:	9305      	str	r3, [sp, #20]
    b292:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b294:	9304      	str	r3, [sp, #16]
    b296:	ed9d 8b04 	vldr	d8, [sp, #16]
    b29a:	f7ff bb02 	b.w	a8a2 <_strtod_l+0x37a>
    b29e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b2a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b2a4:	4203      	tst	r3, r0
    b2a6:	f43f af75 	beq.w	b194 <_strtod_l+0xc6c>
    b2aa:	460f      	mov	r7, r1
    b2ac:	e757      	b.n	b15e <_strtod_l+0xc36>
    b2ae:	4c38      	ldr	r4, [pc, #224]	; (b390 <_strtod_l+0xe68>)
    b2b0:	2100      	movs	r1, #0
    b2b2:	e58f      	b.n	add4 <_strtod_l+0x8ac>
    b2b4:	f002 f92c 	bl	d510 <__ulp>
    b2b8:	9b08      	ldr	r3, [sp, #32]
    b2ba:	2b00      	cmp	r3, #0
    b2bc:	d055      	beq.n	b36a <_strtod_l+0xe42>
    b2be:	f3c7 530a 	ubfx	r3, r7, #20, #11
    b2c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b2c6:	2b00      	cmp	r3, #0
    b2c8:	dd09      	ble.n	b2de <_strtod_l+0xdb6>
    b2ca:	051b      	lsls	r3, r3, #20
    b2cc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    b2d0:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    b2d4:	4628      	mov	r0, r5
    b2d6:	ec41 0b17 	vmov	d7, r0, r1
    b2da:	ee20 0b07 	vmul.f64	d0, d0, d7
    b2de:	ee38 8b40 	vsub.f64	d8, d8, d0
    b2e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b2ea:	f47f af55 	bne.w	b198 <_strtod_l+0xc70>
    b2ee:	e681      	b.n	aff4 <_strtod_l+0xacc>
    b2f0:	9b08      	ldr	r3, [sp, #32]
    b2f2:	9904      	ldr	r1, [sp, #16]
    b2f4:	b31b      	cbz	r3, b33e <_strtod_l+0xe16>
    b2f6:	4b24      	ldr	r3, [pc, #144]	; (b388 <_strtod_l+0xe60>)
    b2f8:	4013      	ands	r3, r2
    b2fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    b2fe:	d81e      	bhi.n	b33e <_strtod_l+0xe16>
    b300:	0d1b      	lsrs	r3, r3, #20
    b302:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b306:	f04f 30ff 	mov.w	r0, #4294967295
    b30a:	fa00 f303 	lsl.w	r3, r0, r3
    b30e:	4299      	cmp	r1, r3
    b310:	f47f af1c 	bne.w	b14c <_strtod_l+0xc24>
    b314:	4b1f      	ldr	r3, [pc, #124]	; (b394 <_strtod_l+0xe6c>)
    b316:	429a      	cmp	r2, r3
    b318:	d030      	beq.n	b37c <_strtod_l+0xe54>
    b31a:	4b1b      	ldr	r3, [pc, #108]	; (b388 <_strtod_l+0xe60>)
    b31c:	4013      	ands	r3, r2
    b31e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    b322:	9305      	str	r3, [sp, #20]
    b324:	2300      	movs	r3, #0
    b326:	9304      	str	r3, [sp, #16]
    b328:	ed9d 8b04 	vldr	d8, [sp, #16]
    b32c:	e732      	b.n	b194 <_strtod_l+0xc6c>
    b32e:	f04f 32ff 	mov.w	r2, #4294967295
    b332:	fa02 f303 	lsl.w	r3, r2, r3
    b336:	9a04      	ldr	r2, [sp, #16]
    b338:	401a      	ands	r2, r3
    b33a:	9204      	str	r2, [sp, #16]
    b33c:	e5d0      	b.n	aee0 <_strtod_l+0x9b8>
    b33e:	f04f 33ff 	mov.w	r3, #4294967295
    b342:	e7e4      	b.n	b30e <_strtod_l+0xde6>
    b344:	4b10      	ldr	r3, [pc, #64]	; (b388 <_strtod_l+0xe60>)
    b346:	403b      	ands	r3, r7
    b348:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    b34c:	f73f af7d 	bgt.w	b24a <_strtod_l+0xd22>
    b350:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    b354:	f73f af20 	bgt.w	b198 <_strtod_l+0xc70>
    b358:	e64c      	b.n	aff4 <_strtod_l+0xacc>
    b35a:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    b35e:	f04f 33ff 	mov.w	r3, #4294967295
    b362:	4093      	lsls	r3, r2
    b364:	400b      	ands	r3, r1
    b366:	9305      	str	r3, [sp, #20]
    b368:	e5ba      	b.n	aee0 <_strtod_l+0x9b8>
    b36a:	ee38 8b40 	vsub.f64	d8, d8, d0
    b36e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b376:	f47f af1b 	bne.w	b1b0 <_strtod_l+0xc88>
    b37a:	e63b      	b.n	aff4 <_strtod_l+0xacc>
    b37c:	3101      	adds	r1, #1
    b37e:	d1cc      	bne.n	b31a <_strtod_l+0xdf2>
    b380:	e409      	b.n	ab96 <_strtod_l+0x66e>
    b382:	2300      	movs	r3, #0
    b384:	e67d      	b.n	b082 <_strtod_l+0xb5a>
    b386:	bf00      	nop
    b388:	7ff00000 	.word	0x7ff00000
    b38c:	20007a28 	.word	0x20007a28
    b390:	20000280 	.word	0x20000280
    b394:	7fefffff 	.word	0x7fefffff

0000b398 <_strtod_r>:
    b398:	4b01      	ldr	r3, [pc, #4]	; (b3a0 <_strtod_r+0x8>)
    b39a:	f7ff b8c5 	b.w	a528 <_strtod_l>
    b39e:	bf00      	nop
    b3a0:	200085e8 	.word	0x200085e8

0000b3a4 <_strtol_l.constprop.0>:
    b3a4:	2b01      	cmp	r3, #1
    b3a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3aa:	d040      	beq.n	b42e <_strtol_l.constprop.0+0x8a>
    b3ac:	2b24      	cmp	r3, #36	; 0x24
    b3ae:	4698      	mov	r8, r3
    b3b0:	d83d      	bhi.n	b42e <_strtol_l.constprop.0+0x8a>
    b3b2:	4d4c      	ldr	r5, [pc, #304]	; (b4e4 <_strtol_l.constprop.0+0x140>)
    b3b4:	468e      	mov	lr, r1
    b3b6:	4676      	mov	r6, lr
    b3b8:	f81e bb01 	ldrb.w	fp, [lr], #1
    b3bc:	f815 400b 	ldrb.w	r4, [r5, fp]
    b3c0:	f014 0408 	ands.w	r4, r4, #8
    b3c4:	d1f7      	bne.n	b3b6 <_strtol_l.constprop.0+0x12>
    b3c6:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    b3ca:	d072      	beq.n	b4b2 <_strtol_l.constprop.0+0x10e>
    b3cc:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    b3d0:	bf08      	it	eq
    b3d2:	f89e b000 	ldrbeq.w	fp, [lr]
    b3d6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    b3da:	bf08      	it	eq
    b3dc:	f106 0e02 	addeq.w	lr, r6, #2
    b3e0:	2b00      	cmp	r3, #0
    b3e2:	d042      	beq.n	b46a <_strtol_l.constprop.0+0xc6>
    b3e4:	2b10      	cmp	r3, #16
    b3e6:	d057      	beq.n	b498 <_strtol_l.constprop.0+0xf4>
    b3e8:	fbb9 f7f8 	udiv	r7, r9, r8
    b3ec:	2500      	movs	r5, #0
    b3ee:	462e      	mov	r6, r5
    b3f0:	fb08 9a17 	mls	sl, r8, r7, r9
    b3f4:	e005      	b.n	b402 <_strtol_l.constprop.0+0x5e>
    b3f6:	d033      	beq.n	b460 <_strtol_l.constprop.0+0xbc>
    b3f8:	fb08 c606 	mla	r6, r8, r6, ip
    b3fc:	2501      	movs	r5, #1
    b3fe:	f81e bb01 	ldrb.w	fp, [lr], #1
    b402:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    b406:	f1bc 0f09 	cmp.w	ip, #9
    b40a:	d906      	bls.n	b41a <_strtol_l.constprop.0+0x76>
    b40c:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    b410:	f1bc 0f19 	cmp.w	ip, #25
    b414:	d812      	bhi.n	b43c <_strtol_l.constprop.0+0x98>
    b416:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    b41a:	4563      	cmp	r3, ip
    b41c:	dd17      	ble.n	b44e <_strtol_l.constprop.0+0xaa>
    b41e:	f1b5 3fff 	cmp.w	r5, #4294967295
    b422:	d0ec      	beq.n	b3fe <_strtol_l.constprop.0+0x5a>
    b424:	42b7      	cmp	r7, r6
    b426:	d2e6      	bcs.n	b3f6 <_strtol_l.constprop.0+0x52>
    b428:	f04f 35ff 	mov.w	r5, #4294967295
    b42c:	e7e7      	b.n	b3fe <_strtol_l.constprop.0+0x5a>
    b42e:	f000 fc23 	bl	bc78 <__errno>
    b432:	2316      	movs	r3, #22
    b434:	6003      	str	r3, [r0, #0]
    b436:	2000      	movs	r0, #0
    b438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b43c:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    b440:	f1bc 0f19 	cmp.w	ip, #25
    b444:	d803      	bhi.n	b44e <_strtol_l.constprop.0+0xaa>
    b446:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    b44a:	4563      	cmp	r3, ip
    b44c:	dce7      	bgt.n	b41e <_strtol_l.constprop.0+0x7a>
    b44e:	1c6b      	adds	r3, r5, #1
    b450:	d027      	beq.n	b4a2 <_strtol_l.constprop.0+0xfe>
    b452:	b98c      	cbnz	r4, b478 <_strtol_l.constprop.0+0xd4>
    b454:	b10a      	cbz	r2, b45a <_strtol_l.constprop.0+0xb6>
    b456:	bba5      	cbnz	r5, b4c2 <_strtol_l.constprop.0+0x11e>
    b458:	6011      	str	r1, [r2, #0]
    b45a:	4630      	mov	r0, r6
    b45c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b460:	45e2      	cmp	sl, ip
    b462:	dac9      	bge.n	b3f8 <_strtol_l.constprop.0+0x54>
    b464:	f04f 35ff 	mov.w	r5, #4294967295
    b468:	e7c9      	b.n	b3fe <_strtol_l.constprop.0+0x5a>
    b46a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b46e:	d005      	beq.n	b47c <_strtol_l.constprop.0+0xd8>
    b470:	f04f 080a 	mov.w	r8, #10
    b474:	4643      	mov	r3, r8
    b476:	e7b7      	b.n	b3e8 <_strtol_l.constprop.0+0x44>
    b478:	4276      	negs	r6, r6
    b47a:	e7eb      	b.n	b454 <_strtol_l.constprop.0+0xb0>
    b47c:	f89e 3000 	ldrb.w	r3, [lr]
    b480:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b484:	2b58      	cmp	r3, #88	; 0x58
    b486:	d121      	bne.n	b4cc <_strtol_l.constprop.0+0x128>
    b488:	f04f 0810 	mov.w	r8, #16
    b48c:	f89e b001 	ldrb.w	fp, [lr, #1]
    b490:	4643      	mov	r3, r8
    b492:	f10e 0e02 	add.w	lr, lr, #2
    b496:	e7a7      	b.n	b3e8 <_strtol_l.constprop.0+0x44>
    b498:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b49c:	d01a      	beq.n	b4d4 <_strtol_l.constprop.0+0x130>
    b49e:	4698      	mov	r8, r3
    b4a0:	e7a2      	b.n	b3e8 <_strtol_l.constprop.0+0x44>
    b4a2:	2322      	movs	r3, #34	; 0x22
    b4a4:	6003      	str	r3, [r0, #0]
    b4a6:	b172      	cbz	r2, b4c6 <_strtol_l.constprop.0+0x122>
    b4a8:	f10e 31ff 	add.w	r1, lr, #4294967295
    b4ac:	464e      	mov	r6, r9
    b4ae:	6011      	str	r1, [r2, #0]
    b4b0:	e7d3      	b.n	b45a <_strtol_l.constprop.0+0xb6>
    b4b2:	f89e b000 	ldrb.w	fp, [lr]
    b4b6:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    b4ba:	f106 0e02 	add.w	lr, r6, #2
    b4be:	2401      	movs	r4, #1
    b4c0:	e78e      	b.n	b3e0 <_strtol_l.constprop.0+0x3c>
    b4c2:	46b1      	mov	r9, r6
    b4c4:	e7f0      	b.n	b4a8 <_strtol_l.constprop.0+0x104>
    b4c6:	464e      	mov	r6, r9
    b4c8:	4630      	mov	r0, r6
    b4ca:	e7c7      	b.n	b45c <_strtol_l.constprop.0+0xb8>
    b4cc:	f04f 0808 	mov.w	r8, #8
    b4d0:	4643      	mov	r3, r8
    b4d2:	e789      	b.n	b3e8 <_strtol_l.constprop.0+0x44>
    b4d4:	f89e 5000 	ldrb.w	r5, [lr]
    b4d8:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    b4dc:	2d58      	cmp	r5, #88	; 0x58
    b4de:	d0d3      	beq.n	b488 <_strtol_l.constprop.0+0xe4>
    b4e0:	4698      	mov	r8, r3
    b4e2:	e781      	b.n	b3e8 <_strtol_l.constprop.0+0x44>
    b4e4:	20000a99 	.word	0x20000a99

0000b4e8 <_strtol_r>:
    b4e8:	f7ff bf5c 	b.w	b3a4 <_strtol_l.constprop.0>

0000b4ec <__cxa_atexit>:
    b4ec:	4613      	mov	r3, r2
    b4ee:	460a      	mov	r2, r1
    b4f0:	4601      	mov	r1, r0
    b4f2:	2002      	movs	r0, #2
    b4f4:	f000 bea2 	b.w	c23c <__register_exitproc>

0000b4f8 <stdio_exit_handler>:
    b4f8:	4a02      	ldr	r2, [pc, #8]	; (b504 <stdio_exit_handler+0xc>)
    b4fa:	4903      	ldr	r1, [pc, #12]	; (b508 <stdio_exit_handler+0x10>)
    b4fc:	4803      	ldr	r0, [pc, #12]	; (b50c <stdio_exit_handler+0x14>)
    b4fe:	f000 b8bb 	b.w	b678 <_fwalk_sglue>
    b502:	bf00      	nop
    b504:	20008b64 	.word	0x20008b64
    b508:	00010be5 	.word	0x00010be5
    b50c:	20008498 	.word	0x20008498

0000b510 <cleanup_stdio>:
    b510:	4b0c      	ldr	r3, [pc, #48]	; (b544 <cleanup_stdio+0x34>)
    b512:	6841      	ldr	r1, [r0, #4]
    b514:	4299      	cmp	r1, r3
    b516:	b510      	push	{r4, lr}
    b518:	4604      	mov	r4, r0
    b51a:	d001      	beq.n	b520 <cleanup_stdio+0x10>
    b51c:	f005 fb62 	bl	10be4 <_fclose_r>
    b520:	68a1      	ldr	r1, [r4, #8]
    b522:	4b09      	ldr	r3, [pc, #36]	; (b548 <cleanup_stdio+0x38>)
    b524:	4299      	cmp	r1, r3
    b526:	d002      	beq.n	b52e <cleanup_stdio+0x1e>
    b528:	4620      	mov	r0, r4
    b52a:	f005 fb5b 	bl	10be4 <_fclose_r>
    b52e:	68e1      	ldr	r1, [r4, #12]
    b530:	4b06      	ldr	r3, [pc, #24]	; (b54c <cleanup_stdio+0x3c>)
    b532:	4299      	cmp	r1, r3
    b534:	d004      	beq.n	b540 <cleanup_stdio+0x30>
    b536:	4620      	mov	r0, r4
    b538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b53c:	f005 bb52 	b.w	10be4 <_fclose_r>
    b540:	bd10      	pop	{r4, pc}
    b542:	bf00      	nop
    b544:	2002aae8 	.word	0x2002aae8
    b548:	2002ab50 	.word	0x2002ab50
    b54c:	2002abb8 	.word	0x2002abb8

0000b550 <global_stdio_init.part.0>:
    b550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b554:	4c2a      	ldr	r4, [pc, #168]	; (b600 <global_stdio_init.part.0+0xb0>)
    b556:	4b2b      	ldr	r3, [pc, #172]	; (b604 <global_stdio_init.part.0+0xb4>)
    b558:	482b      	ldr	r0, [pc, #172]	; (b608 <global_stdio_init.part.0+0xb8>)
    b55a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b61c <global_stdio_init.part.0+0xcc>
    b55e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b620 <global_stdio_init.part.0+0xd0>
    b562:	4f2a      	ldr	r7, [pc, #168]	; (b60c <global_stdio_init.part.0+0xbc>)
    b564:	6018      	str	r0, [r3, #0]
    b566:	2500      	movs	r5, #0
    b568:	2304      	movs	r3, #4
    b56a:	2208      	movs	r2, #8
    b56c:	4629      	mov	r1, r5
    b56e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b572:	4e27      	ldr	r6, [pc, #156]	; (b610 <global_stdio_init.part.0+0xc0>)
    b574:	6665      	str	r5, [r4, #100]	; 0x64
    b576:	e9c4 5302 	strd	r5, r3, [r4, #8]
    b57a:	e9c4 5500 	strd	r5, r5, [r4]
    b57e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    b582:	61a5      	str	r5, [r4, #24]
    b584:	f000 fa42 	bl	ba0c <memset>
    b588:	4b22      	ldr	r3, [pc, #136]	; (b614 <global_stdio_init.part.0+0xc4>)
    b58a:	6763      	str	r3, [r4, #116]	; 0x74
    b58c:	2208      	movs	r2, #8
    b58e:	4629      	mov	r1, r5
    b590:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b594:	e9c4 4907 	strd	r4, r9, [r4, #28]
    b598:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    b59c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    b5a0:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    b5a4:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    b5a8:	6725      	str	r5, [r4, #112]	; 0x70
    b5aa:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    b5ae:	62e6      	str	r6, [r4, #44]	; 0x2c
    b5b0:	f000 fa2c 	bl	ba0c <memset>
    b5b4:	4b18      	ldr	r3, [pc, #96]	; (b618 <global_stdio_init.part.0+0xc8>)
    b5b6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    b5ba:	4629      	mov	r1, r5
    b5bc:	f104 0368 	add.w	r3, r4, #104	; 0x68
    b5c0:	2208      	movs	r2, #8
    b5c2:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b5c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    b5ca:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    b5ce:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    b5d2:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    b5d6:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    b5da:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    b5de:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    b5e2:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b5e6:	f000 fa11 	bl	ba0c <memset>
    b5ea:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    b5ee:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    b5f2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    b5f6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    b5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b5fe:	bf00      	nop
    b600:	2002aae8 	.word	0x2002aae8
    b604:	2002ac20 	.word	0x2002ac20
    b608:	0000b4f9 	.word	0x0000b4f9
    b60c:	0000b7c1 	.word	0x0000b7c1
    b610:	0000b7e1 	.word	0x0000b7e1
    b614:	00010009 	.word	0x00010009
    b618:	00020012 	.word	0x00020012
    b61c:	0000b759 	.word	0x0000b759
    b620:	0000b781 	.word	0x0000b781

0000b624 <__sinit>:
    b624:	b510      	push	{r4, lr}
    b626:	4604      	mov	r4, r0
    b628:	480a      	ldr	r0, [pc, #40]	; (b654 <__sinit+0x30>)
    b62a:	f000 fb53 	bl	bcd4 <__retarget_lock_acquire_recursive>
    b62e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b630:	b923      	cbnz	r3, b63c <__sinit+0x18>
    b632:	4b09      	ldr	r3, [pc, #36]	; (b658 <__sinit+0x34>)
    b634:	4a09      	ldr	r2, [pc, #36]	; (b65c <__sinit+0x38>)
    b636:	681b      	ldr	r3, [r3, #0]
    b638:	6362      	str	r2, [r4, #52]	; 0x34
    b63a:	b123      	cbz	r3, b646 <__sinit+0x22>
    b63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b640:	4804      	ldr	r0, [pc, #16]	; (b654 <__sinit+0x30>)
    b642:	f000 bb49 	b.w	bcd8 <__retarget_lock_release_recursive>
    b646:	f7ff ff83 	bl	b550 <global_stdio_init.part.0>
    b64a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b64e:	4801      	ldr	r0, [pc, #4]	; (b654 <__sinit+0x30>)
    b650:	f000 bb42 	b.w	bcd8 <__retarget_lock_release_recursive>
    b654:	2002aab0 	.word	0x2002aab0
    b658:	2002ac20 	.word	0x2002ac20
    b65c:	0000b511 	.word	0x0000b511

0000b660 <__sfp_lock_acquire>:
    b660:	4801      	ldr	r0, [pc, #4]	; (b668 <__sfp_lock_acquire+0x8>)
    b662:	f000 bb37 	b.w	bcd4 <__retarget_lock_acquire_recursive>
    b666:	bf00      	nop
    b668:	2002aab0 	.word	0x2002aab0

0000b66c <__sfp_lock_release>:
    b66c:	4801      	ldr	r0, [pc, #4]	; (b674 <__sfp_lock_release+0x8>)
    b66e:	f000 bb33 	b.w	bcd8 <__retarget_lock_release_recursive>
    b672:	bf00      	nop
    b674:	2002aab0 	.word	0x2002aab0

0000b678 <_fwalk_sglue>:
    b678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b67c:	4680      	mov	r8, r0
    b67e:	460f      	mov	r7, r1
    b680:	4616      	mov	r6, r2
    b682:	f04f 0900 	mov.w	r9, #0
    b686:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    b68a:	3d01      	subs	r5, #1
    b68c:	d411      	bmi.n	b6b2 <_fwalk_sglue+0x3a>
    b68e:	89a3      	ldrh	r3, [r4, #12]
    b690:	2b01      	cmp	r3, #1
    b692:	f105 35ff 	add.w	r5, r5, #4294967295
    b696:	d908      	bls.n	b6aa <_fwalk_sglue+0x32>
    b698:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    b69c:	3301      	adds	r3, #1
    b69e:	4621      	mov	r1, r4
    b6a0:	d003      	beq.n	b6aa <_fwalk_sglue+0x32>
    b6a2:	4640      	mov	r0, r8
    b6a4:	47b8      	blx	r7
    b6a6:	ea49 0900 	orr.w	r9, r9, r0
    b6aa:	1c6b      	adds	r3, r5, #1
    b6ac:	f104 0468 	add.w	r4, r4, #104	; 0x68
    b6b0:	d1ed      	bne.n	b68e <_fwalk_sglue+0x16>
    b6b2:	6836      	ldr	r6, [r6, #0]
    b6b4:	2e00      	cmp	r6, #0
    b6b6:	d1e6      	bne.n	b686 <_fwalk_sglue+0xe>
    b6b8:	4648      	mov	r0, r9
    b6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b6be:	bf00      	nop

0000b6c0 <sprintf>:
    b6c0:	b40e      	push	{r1, r2, r3}
    b6c2:	b510      	push	{r4, lr}
    b6c4:	b09d      	sub	sp, #116	; 0x74
    b6c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b6ca:	ab1f      	add	r3, sp, #124	; 0x7c
    b6cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b6d0:	9104      	str	r1, [sp, #16]
    b6d2:	4909      	ldr	r1, [pc, #36]	; (b6f8 <sprintf+0x38>)
    b6d4:	f853 2b04 	ldr.w	r2, [r3], #4
    b6d8:	9002      	str	r0, [sp, #8]
    b6da:	4c08      	ldr	r4, [pc, #32]	; (b6fc <sprintf+0x3c>)
    b6dc:	6808      	ldr	r0, [r1, #0]
    b6de:	9301      	str	r3, [sp, #4]
    b6e0:	a902      	add	r1, sp, #8
    b6e2:	9405      	str	r4, [sp, #20]
    b6e4:	f002 f8b4 	bl	d850 <_svfprintf_r>
    b6e8:	9b02      	ldr	r3, [sp, #8]
    b6ea:	2200      	movs	r2, #0
    b6ec:	701a      	strb	r2, [r3, #0]
    b6ee:	b01d      	add	sp, #116	; 0x74
    b6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6f4:	b003      	add	sp, #12
    b6f6:	4770      	bx	lr
    b6f8:	20008b70 	.word	0x20008b70
    b6fc:	ffff0208 	.word	0xffff0208

0000b700 <sscanf>:
    b700:	b40e      	push	{r1, r2, r3}
    b702:	b510      	push	{r4, lr}
    b704:	b09f      	sub	sp, #124	; 0x7c
    b706:	ac21      	add	r4, sp, #132	; 0x84
    b708:	f44f 7101 	mov.w	r1, #516	; 0x204
    b70c:	f854 2b04 	ldr.w	r2, [r4], #4
    b710:	9201      	str	r2, [sp, #4]
    b712:	f8ad 101c 	strh.w	r1, [sp, #28]
    b716:	9004      	str	r0, [sp, #16]
    b718:	9008      	str	r0, [sp, #32]
    b71a:	f000 fd11 	bl	c140 <strlen>
    b71e:	9005      	str	r0, [sp, #20]
    b720:	9009      	str	r0, [sp, #36]	; 0x24
    b722:	480b      	ldr	r0, [pc, #44]	; (b750 <sscanf+0x50>)
    b724:	490b      	ldr	r1, [pc, #44]	; (b754 <sscanf+0x54>)
    b726:	910c      	str	r1, [sp, #48]	; 0x30
    b728:	2300      	movs	r3, #0
    b72a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    b72e:	9310      	str	r3, [sp, #64]	; 0x40
    b730:	9315      	str	r3, [sp, #84]	; 0x54
    b732:	9a01      	ldr	r2, [sp, #4]
    b734:	6800      	ldr	r0, [r0, #0]
    b736:	f8ad c01e 	strh.w	ip, [sp, #30]
    b73a:	4623      	mov	r3, r4
    b73c:	a904      	add	r1, sp, #16
    b73e:	9403      	str	r4, [sp, #12]
    b740:	f003 fe28 	bl	f394 <__ssvfscanf_r>
    b744:	b01f      	add	sp, #124	; 0x7c
    b746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b74a:	b003      	add	sp, #12
    b74c:	4770      	bx	lr
    b74e:	bf00      	nop
    b750:	20008b70 	.word	0x20008b70
    b754:	0000b77d 	.word	0x0000b77d

0000b758 <__sread>:
    b758:	b510      	push	{r4, lr}
    b75a:	460c      	mov	r4, r1
    b75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b760:	f000 fa4c 	bl	bbfc <_read_r>
    b764:	2800      	cmp	r0, #0
    b766:	db03      	blt.n	b770 <__sread+0x18>
    b768:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b76a:	4403      	add	r3, r0
    b76c:	6523      	str	r3, [r4, #80]	; 0x50
    b76e:	bd10      	pop	{r4, pc}
    b770:	89a3      	ldrh	r3, [r4, #12]
    b772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b776:	81a3      	strh	r3, [r4, #12]
    b778:	bd10      	pop	{r4, pc}
    b77a:	bf00      	nop

0000b77c <__seofread>:
    b77c:	2000      	movs	r0, #0
    b77e:	4770      	bx	lr

0000b780 <__swrite>:
    b780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b784:	460c      	mov	r4, r1
    b786:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    b78a:	461f      	mov	r7, r3
    b78c:	05cb      	lsls	r3, r1, #23
    b78e:	4605      	mov	r5, r0
    b790:	4616      	mov	r6, r2
    b792:	d40b      	bmi.n	b7ac <__swrite+0x2c>
    b794:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    b798:	81a1      	strh	r1, [r4, #12]
    b79a:	463b      	mov	r3, r7
    b79c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b7a0:	4632      	mov	r2, r6
    b7a2:	4628      	mov	r0, r5
    b7a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b7a8:	f000 ba50 	b.w	bc4c <_write_r>
    b7ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b7b0:	2302      	movs	r3, #2
    b7b2:	2200      	movs	r2, #0
    b7b4:	f000 fa0c 	bl	bbd0 <_lseek_r>
    b7b8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    b7bc:	e7ea      	b.n	b794 <__swrite+0x14>
    b7be:	bf00      	nop

0000b7c0 <__sseek>:
    b7c0:	b510      	push	{r4, lr}
    b7c2:	460c      	mov	r4, r1
    b7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b7c8:	f000 fa02 	bl	bbd0 <_lseek_r>
    b7cc:	89a3      	ldrh	r3, [r4, #12]
    b7ce:	1c42      	adds	r2, r0, #1
    b7d0:	bf0e      	itee	eq
    b7d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b7d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b7da:	6520      	strne	r0, [r4, #80]	; 0x50
    b7dc:	81a3      	strh	r3, [r4, #12]
    b7de:	bd10      	pop	{r4, pc}

0000b7e0 <__sclose>:
    b7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b7e4:	f000 b9e2 	b.w	bbac <_close_r>

0000b7e8 <_vdprintf_r>:
    b7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7ea:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    b7ee:	af04      	add	r7, sp, #16
    b7f0:	9300      	str	r3, [sp, #0]
    b7f2:	4613      	mov	r3, r2
    b7f4:	f44f 7200 	mov.w	r2, #512	; 0x200
    b7f8:	460e      	mov	r6, r1
    b7fa:	9203      	str	r2, [sp, #12]
    b7fc:	4639      	mov	r1, r7
    b7fe:	aa03      	add	r2, sp, #12
    b800:	4605      	mov	r5, r0
    b802:	f000 f825 	bl	b850 <_vasnprintf_r>
    b806:	b188      	cbz	r0, b82c <_vdprintf_r+0x44>
    b808:	4604      	mov	r4, r0
    b80a:	4602      	mov	r2, r0
    b80c:	9b03      	ldr	r3, [sp, #12]
    b80e:	4631      	mov	r1, r6
    b810:	4628      	mov	r0, r5
    b812:	f000 fa1b 	bl	bc4c <_write_r>
    b816:	42bc      	cmp	r4, r7
    b818:	9003      	str	r0, [sp, #12]
    b81a:	d004      	beq.n	b826 <_vdprintf_r+0x3e>
    b81c:	4628      	mov	r0, r5
    b81e:	4621      	mov	r1, r4
    b820:	f000 fda0 	bl	c364 <_free_r>
    b824:	9803      	ldr	r0, [sp, #12]
    b826:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    b82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b82c:	f04f 30ff 	mov.w	r0, #4294967295
    b830:	e7f9      	b.n	b826 <_vdprintf_r+0x3e>
    b832:	bf00      	nop

0000b834 <vdprintf>:
    b834:	b410      	push	{r4}
    b836:	4c05      	ldr	r4, [pc, #20]	; (b84c <vdprintf+0x18>)
    b838:	4684      	mov	ip, r0
    b83a:	4613      	mov	r3, r2
    b83c:	6820      	ldr	r0, [r4, #0]
    b83e:	f85d 4b04 	ldr.w	r4, [sp], #4
    b842:	460a      	mov	r2, r1
    b844:	4661      	mov	r1, ip
    b846:	f7ff bfcf 	b.w	b7e8 <_vdprintf_r>
    b84a:	bf00      	nop
    b84c:	20008b70 	.word	0x20008b70

0000b850 <_vasnprintf_r>:
    b850:	b530      	push	{r4, r5, lr}
    b852:	6814      	ldr	r4, [r2, #0]
    b854:	4615      	mov	r5, r2
    b856:	b09b      	sub	sp, #108	; 0x6c
    b858:	461a      	mov	r2, r3
    b85a:	b109      	cbz	r1, b860 <_vasnprintf_r+0x10>
    b85c:	2c00      	cmp	r4, #0
    b85e:	d119      	bne.n	b894 <_vasnprintf_r+0x44>
    b860:	2100      	movs	r1, #0
    b862:	f44f 7322 	mov.w	r3, #648	; 0x288
    b866:	f8ad 300c 	strh.w	r3, [sp, #12]
    b86a:	9100      	str	r1, [sp, #0]
    b86c:	9104      	str	r1, [sp, #16]
    b86e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b872:	9102      	str	r1, [sp, #8]
    b874:	9105      	str	r1, [sp, #20]
    b876:	f8ad 300e 	strh.w	r3, [sp, #14]
    b87a:	4669      	mov	r1, sp
    b87c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    b87e:	f001 ffe7 	bl	d850 <_svfprintf_r>
    b882:	2800      	cmp	r0, #0
    b884:	db13      	blt.n	b8ae <_vasnprintf_r+0x5e>
    b886:	9b00      	ldr	r3, [sp, #0]
    b888:	6028      	str	r0, [r5, #0]
    b88a:	2200      	movs	r2, #0
    b88c:	701a      	strb	r2, [r3, #0]
    b88e:	9804      	ldr	r0, [sp, #16]
    b890:	b01b      	add	sp, #108	; 0x6c
    b892:	bd30      	pop	{r4, r5, pc}
    b894:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    b898:	9100      	str	r1, [sp, #0]
    b89a:	9104      	str	r1, [sp, #16]
    b89c:	f8ad 300c 	strh.w	r3, [sp, #12]
    b8a0:	4621      	mov	r1, r4
    b8a2:	dae4      	bge.n	b86e <_vasnprintf_r+0x1e>
    b8a4:	238b      	movs	r3, #139	; 0x8b
    b8a6:	6003      	str	r3, [r0, #0]
    b8a8:	2000      	movs	r0, #0
    b8aa:	b01b      	add	sp, #108	; 0x6c
    b8ac:	bd30      	pop	{r4, r5, pc}
    b8ae:	2000      	movs	r0, #0
    b8b0:	e7ee      	b.n	b890 <_vasnprintf_r+0x40>
    b8b2:	bf00      	nop

0000b8b4 <memcmp>:
    b8b4:	2a03      	cmp	r2, #3
    b8b6:	b570      	push	{r4, r5, r6, lr}
    b8b8:	d914      	bls.n	b8e4 <memcmp+0x30>
    b8ba:	ea40 0301 	orr.w	r3, r0, r1
    b8be:	079b      	lsls	r3, r3, #30
    b8c0:	d122      	bne.n	b908 <memcmp+0x54>
    b8c2:	4604      	mov	r4, r0
    b8c4:	460b      	mov	r3, r1
    b8c6:	4619      	mov	r1, r3
    b8c8:	4620      	mov	r0, r4
    b8ca:	680e      	ldr	r6, [r1, #0]
    b8cc:	6805      	ldr	r5, [r0, #0]
    b8ce:	42b5      	cmp	r5, r6
    b8d0:	f104 0404 	add.w	r4, r4, #4
    b8d4:	f103 0304 	add.w	r3, r3, #4
    b8d8:	d116      	bne.n	b908 <memcmp+0x54>
    b8da:	3a04      	subs	r2, #4
    b8dc:	2a03      	cmp	r2, #3
    b8de:	4620      	mov	r0, r4
    b8e0:	4619      	mov	r1, r3
    b8e2:	d8f0      	bhi.n	b8c6 <memcmp+0x12>
    b8e4:	1e54      	subs	r4, r2, #1
    b8e6:	b19a      	cbz	r2, b910 <memcmp+0x5c>
    b8e8:	1e42      	subs	r2, r0, #1
    b8ea:	3901      	subs	r1, #1
    b8ec:	e001      	b.n	b8f2 <memcmp+0x3e>
    b8ee:	18c3      	adds	r3, r0, r3
    b8f0:	d00c      	beq.n	b90c <memcmp+0x58>
    b8f2:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    b8f6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    b8fa:	45e6      	cmp	lr, ip
    b8fc:	eba4 0302 	sub.w	r3, r4, r2
    b900:	d0f5      	beq.n	b8ee <memcmp+0x3a>
    b902:	ebae 000c 	sub.w	r0, lr, ip
    b906:	bd70      	pop	{r4, r5, r6, pc}
    b908:	1e54      	subs	r4, r2, #1
    b90a:	e7ed      	b.n	b8e8 <memcmp+0x34>
    b90c:	4618      	mov	r0, r3
    b90e:	bd70      	pop	{r4, r5, r6, pc}
    b910:	4610      	mov	r0, r2
    b912:	bd70      	pop	{r4, r5, r6, pc}

0000b914 <memmove>:
    b914:	4288      	cmp	r0, r1
    b916:	d90d      	bls.n	b934 <memmove+0x20>
    b918:	188b      	adds	r3, r1, r2
    b91a:	4283      	cmp	r3, r0
    b91c:	d90a      	bls.n	b934 <memmove+0x20>
    b91e:	eb00 0c02 	add.w	ip, r0, r2
    b922:	b1ba      	cbz	r2, b954 <memmove+0x40>
    b924:	4662      	mov	r2, ip
    b926:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    b92a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    b92e:	4299      	cmp	r1, r3
    b930:	d1f9      	bne.n	b926 <memmove+0x12>
    b932:	4770      	bx	lr
    b934:	2a0f      	cmp	r2, #15
    b936:	d80e      	bhi.n	b956 <memmove+0x42>
    b938:	4603      	mov	r3, r0
    b93a:	f102 3cff 	add.w	ip, r2, #4294967295
    b93e:	b14a      	cbz	r2, b954 <memmove+0x40>
    b940:	f10c 0c01 	add.w	ip, ip, #1
    b944:	3b01      	subs	r3, #1
    b946:	448c      	add	ip, r1
    b948:	f811 2b01 	ldrb.w	r2, [r1], #1
    b94c:	f803 2f01 	strb.w	r2, [r3, #1]!
    b950:	4561      	cmp	r1, ip
    b952:	d1f9      	bne.n	b948 <memmove+0x34>
    b954:	4770      	bx	lr
    b956:	ea40 0301 	orr.w	r3, r0, r1
    b95a:	079b      	lsls	r3, r3, #30
    b95c:	d150      	bne.n	ba00 <memmove+0xec>
    b95e:	f1a2 0310 	sub.w	r3, r2, #16
    b962:	b570      	push	{r4, r5, r6, lr}
    b964:	f101 0c20 	add.w	ip, r1, #32
    b968:	f023 050f 	bic.w	r5, r3, #15
    b96c:	f101 0e10 	add.w	lr, r1, #16
    b970:	f100 0410 	add.w	r4, r0, #16
    b974:	44ac      	add	ip, r5
    b976:	091b      	lsrs	r3, r3, #4
    b978:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    b97c:	f844 5c10 	str.w	r5, [r4, #-16]
    b980:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    b984:	f844 5c0c 	str.w	r5, [r4, #-12]
    b988:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    b98c:	f844 5c08 	str.w	r5, [r4, #-8]
    b990:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    b994:	f844 5c04 	str.w	r5, [r4, #-4]
    b998:	f10e 0e10 	add.w	lr, lr, #16
    b99c:	45e6      	cmp	lr, ip
    b99e:	f104 0410 	add.w	r4, r4, #16
    b9a2:	d1e9      	bne.n	b978 <memmove+0x64>
    b9a4:	3301      	adds	r3, #1
    b9a6:	f012 0f0c 	tst.w	r2, #12
    b9aa:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    b9ae:	f002 040f 	and.w	r4, r2, #15
    b9b2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    b9b6:	d027      	beq.n	ba08 <memmove+0xf4>
    b9b8:	3c04      	subs	r4, #4
    b9ba:	f024 0603 	bic.w	r6, r4, #3
    b9be:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    b9c2:	441e      	add	r6, r3
    b9c4:	1f1c      	subs	r4, r3, #4
    b9c6:	468e      	mov	lr, r1
    b9c8:	f85e 5b04 	ldr.w	r5, [lr], #4
    b9cc:	f844 5f04 	str.w	r5, [r4, #4]!
    b9d0:	42b4      	cmp	r4, r6
    b9d2:	d1f9      	bne.n	b9c8 <memmove+0xb4>
    b9d4:	f10c 0401 	add.w	r4, ip, #1
    b9d8:	f002 0203 	and.w	r2, r2, #3
    b9dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    b9e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    b9e4:	f102 3cff 	add.w	ip, r2, #4294967295
    b9e8:	b14a      	cbz	r2, b9fe <memmove+0xea>
    b9ea:	f10c 0c01 	add.w	ip, ip, #1
    b9ee:	3b01      	subs	r3, #1
    b9f0:	448c      	add	ip, r1
    b9f2:	f811 2b01 	ldrb.w	r2, [r1], #1
    b9f6:	f803 2f01 	strb.w	r2, [r3, #1]!
    b9fa:	4561      	cmp	r1, ip
    b9fc:	d1f9      	bne.n	b9f2 <memmove+0xde>
    b9fe:	bd70      	pop	{r4, r5, r6, pc}
    ba00:	f102 3cff 	add.w	ip, r2, #4294967295
    ba04:	4603      	mov	r3, r0
    ba06:	e79b      	b.n	b940 <memmove+0x2c>
    ba08:	4622      	mov	r2, r4
    ba0a:	e7eb      	b.n	b9e4 <memmove+0xd0>

0000ba0c <memset>:
    ba0c:	0783      	lsls	r3, r0, #30
    ba0e:	b530      	push	{r4, r5, lr}
    ba10:	d048      	beq.n	baa4 <memset+0x98>
    ba12:	1e54      	subs	r4, r2, #1
    ba14:	2a00      	cmp	r2, #0
    ba16:	d03f      	beq.n	ba98 <memset+0x8c>
    ba18:	b2ca      	uxtb	r2, r1
    ba1a:	4603      	mov	r3, r0
    ba1c:	e001      	b.n	ba22 <memset+0x16>
    ba1e:	3c01      	subs	r4, #1
    ba20:	d33a      	bcc.n	ba98 <memset+0x8c>
    ba22:	f803 2b01 	strb.w	r2, [r3], #1
    ba26:	079d      	lsls	r5, r3, #30
    ba28:	d1f9      	bne.n	ba1e <memset+0x12>
    ba2a:	2c03      	cmp	r4, #3
    ba2c:	d92d      	bls.n	ba8a <memset+0x7e>
    ba2e:	b2cd      	uxtb	r5, r1
    ba30:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    ba34:	2c0f      	cmp	r4, #15
    ba36:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    ba3a:	d936      	bls.n	baaa <memset+0x9e>
    ba3c:	f1a4 0210 	sub.w	r2, r4, #16
    ba40:	f022 0c0f 	bic.w	ip, r2, #15
    ba44:	f103 0e20 	add.w	lr, r3, #32
    ba48:	44e6      	add	lr, ip
    ba4a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    ba4e:	f103 0210 	add.w	r2, r3, #16
    ba52:	e942 5504 	strd	r5, r5, [r2, #-16]
    ba56:	e942 5502 	strd	r5, r5, [r2, #-8]
    ba5a:	3210      	adds	r2, #16
    ba5c:	4572      	cmp	r2, lr
    ba5e:	d1f8      	bne.n	ba52 <memset+0x46>
    ba60:	f10c 0201 	add.w	r2, ip, #1
    ba64:	f014 0f0c 	tst.w	r4, #12
    ba68:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    ba6c:	f004 0c0f 	and.w	ip, r4, #15
    ba70:	d013      	beq.n	ba9a <memset+0x8e>
    ba72:	f1ac 0304 	sub.w	r3, ip, #4
    ba76:	f023 0303 	bic.w	r3, r3, #3
    ba7a:	3304      	adds	r3, #4
    ba7c:	4413      	add	r3, r2
    ba7e:	f842 5b04 	str.w	r5, [r2], #4
    ba82:	4293      	cmp	r3, r2
    ba84:	d1fb      	bne.n	ba7e <memset+0x72>
    ba86:	f00c 0403 	and.w	r4, ip, #3
    ba8a:	b12c      	cbz	r4, ba98 <memset+0x8c>
    ba8c:	b2c9      	uxtb	r1, r1
    ba8e:	441c      	add	r4, r3
    ba90:	f803 1b01 	strb.w	r1, [r3], #1
    ba94:	429c      	cmp	r4, r3
    ba96:	d1fb      	bne.n	ba90 <memset+0x84>
    ba98:	bd30      	pop	{r4, r5, pc}
    ba9a:	4664      	mov	r4, ip
    ba9c:	4613      	mov	r3, r2
    ba9e:	2c00      	cmp	r4, #0
    baa0:	d1f4      	bne.n	ba8c <memset+0x80>
    baa2:	e7f9      	b.n	ba98 <memset+0x8c>
    baa4:	4603      	mov	r3, r0
    baa6:	4614      	mov	r4, r2
    baa8:	e7bf      	b.n	ba2a <memset+0x1e>
    baaa:	461a      	mov	r2, r3
    baac:	46a4      	mov	ip, r4
    baae:	e7e0      	b.n	ba72 <memset+0x66>

0000bab0 <strncmp>:
    bab0:	2a00      	cmp	r2, #0
    bab2:	d03e      	beq.n	bb32 <strncmp+0x82>
    bab4:	ea40 0301 	orr.w	r3, r0, r1
    bab8:	079b      	lsls	r3, r3, #30
    baba:	b530      	push	{r4, r5, lr}
    babc:	4684      	mov	ip, r0
    babe:	d12f      	bne.n	bb20 <strncmp+0x70>
    bac0:	2a03      	cmp	r2, #3
    bac2:	d92d      	bls.n	bb20 <strncmp+0x70>
    bac4:	460b      	mov	r3, r1
    bac6:	e008      	b.n	bada <strncmp+0x2a>
    bac8:	3a04      	subs	r2, #4
    baca:	4684      	mov	ip, r0
    bacc:	4619      	mov	r1, r3
    bace:	d025      	beq.n	bb1c <strncmp+0x6c>
    bad0:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    bad4:	d122      	bne.n	bb1c <strncmp+0x6c>
    bad6:	2a03      	cmp	r2, #3
    bad8:	d922      	bls.n	bb20 <strncmp+0x70>
    bada:	6804      	ldr	r4, [r0, #0]
    badc:	4619      	mov	r1, r3
    bade:	f853 5b04 	ldr.w	r5, [r3], #4
    bae2:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    bae6:	42ac      	cmp	r4, r5
    bae8:	4684      	mov	ip, r0
    baea:	ea2e 0e04 	bic.w	lr, lr, r4
    baee:	f100 0004 	add.w	r0, r0, #4
    baf2:	d0e9      	beq.n	bac8 <strncmp+0x18>
    baf4:	f89c 0000 	ldrb.w	r0, [ip]
    baf8:	780c      	ldrb	r4, [r1, #0]
    bafa:	42a0      	cmp	r0, r4
    bafc:	d11b      	bne.n	bb36 <strncmp+0x86>
    bafe:	46e6      	mov	lr, ip
    bb00:	b168      	cbz	r0, bb1e <strncmp+0x6e>
    bb02:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    bb06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bb0a:	eba2 030e 	sub.w	r3, r2, lr
    bb0e:	42a0      	cmp	r0, r4
    bb10:	f103 33ff 	add.w	r3, r3, #4294967295
    bb14:	d10f      	bne.n	bb36 <strncmp+0x86>
    bb16:	eb1c 0303 	adds.w	r3, ip, r3
    bb1a:	d1f1      	bne.n	bb00 <strncmp+0x50>
    bb1c:	2000      	movs	r0, #0
    bb1e:	bd30      	pop	{r4, r5, pc}
    bb20:	f89c 0000 	ldrb.w	r0, [ip]
    bb24:	780c      	ldrb	r4, [r1, #0]
    bb26:	4284      	cmp	r4, r0
    bb28:	d105      	bne.n	bb36 <strncmp+0x86>
    bb2a:	2a01      	cmp	r2, #1
    bb2c:	d0f6      	beq.n	bb1c <strncmp+0x6c>
    bb2e:	46e6      	mov	lr, ip
    bb30:	e7e6      	b.n	bb00 <strncmp+0x50>
    bb32:	4610      	mov	r0, r2
    bb34:	4770      	bx	lr
    bb36:	1b00      	subs	r0, r0, r4
    bb38:	bd30      	pop	{r4, r5, pc}
    bb3a:	bf00      	nop

0000bb3c <strncpy>:
    bb3c:	ea40 0301 	orr.w	r3, r0, r1
    bb40:	079b      	lsls	r3, r3, #30
    bb42:	b530      	push	{r4, r5, lr}
    bb44:	d101      	bne.n	bb4a <strncpy+0xe>
    bb46:	2a03      	cmp	r2, #3
    bb48:	d80f      	bhi.n	bb6a <strncpy+0x2e>
    bb4a:	4684      	mov	ip, r0
    bb4c:	f101 3eff 	add.w	lr, r1, #4294967295
    bb50:	e007      	b.n	bb62 <strncpy+0x26>
    bb52:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    bb56:	f803 1b01 	strb.w	r1, [r3], #1
    bb5a:	1e54      	subs	r4, r2, #1
    bb5c:	b1c1      	cbz	r1, bb90 <strncpy+0x54>
    bb5e:	469c      	mov	ip, r3
    bb60:	4622      	mov	r2, r4
    bb62:	4663      	mov	r3, ip
    bb64:	2a00      	cmp	r2, #0
    bb66:	d1f4      	bne.n	bb52 <strncpy+0x16>
    bb68:	bd30      	pop	{r4, r5, pc}
    bb6a:	460b      	mov	r3, r1
    bb6c:	4684      	mov	ip, r0
    bb6e:	4619      	mov	r1, r3
    bb70:	f853 5b04 	ldr.w	r5, [r3], #4
    bb74:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    bb78:	ea24 0405 	bic.w	r4, r4, r5
    bb7c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    bb80:	d1e4      	bne.n	bb4c <strncpy+0x10>
    bb82:	3a04      	subs	r2, #4
    bb84:	2a03      	cmp	r2, #3
    bb86:	f84c 5b04 	str.w	r5, [ip], #4
    bb8a:	4619      	mov	r1, r3
    bb8c:	d8ef      	bhi.n	bb6e <strncpy+0x32>
    bb8e:	e7dd      	b.n	bb4c <strncpy+0x10>
    bb90:	4494      	add	ip, r2
    bb92:	2c00      	cmp	r4, #0
    bb94:	d0e8      	beq.n	bb68 <strncpy+0x2c>
    bb96:	f803 1b01 	strb.w	r1, [r3], #1
    bb9a:	4563      	cmp	r3, ip
    bb9c:	d1fb      	bne.n	bb96 <strncpy+0x5a>
    bb9e:	bd30      	pop	{r4, r5, pc}

0000bba0 <__locale_mb_cur_max>:
    bba0:	4b01      	ldr	r3, [pc, #4]	; (bba8 <__locale_mb_cur_max+0x8>)
    bba2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    bba6:	4770      	bx	lr
    bba8:	200085e8 	.word	0x200085e8

0000bbac <_close_r>:
    bbac:	b538      	push	{r3, r4, r5, lr}
    bbae:	4d07      	ldr	r5, [pc, #28]	; (bbcc <_close_r+0x20>)
    bbb0:	2200      	movs	r2, #0
    bbb2:	4604      	mov	r4, r0
    bbb4:	4608      	mov	r0, r1
    bbb6:	602a      	str	r2, [r5, #0]
    bbb8:	f7fc fc3c 	bl	8434 <_close>
    bbbc:	1c43      	adds	r3, r0, #1
    bbbe:	d000      	beq.n	bbc2 <_close_r+0x16>
    bbc0:	bd38      	pop	{r3, r4, r5, pc}
    bbc2:	682b      	ldr	r3, [r5, #0]
    bbc4:	2b00      	cmp	r3, #0
    bbc6:	d0fb      	beq.n	bbc0 <_close_r+0x14>
    bbc8:	6023      	str	r3, [r4, #0]
    bbca:	bd38      	pop	{r3, r4, r5, pc}
    bbcc:	2002ae38 	.word	0x2002ae38

0000bbd0 <_lseek_r>:
    bbd0:	b538      	push	{r3, r4, r5, lr}
    bbd2:	460c      	mov	r4, r1
    bbd4:	4d08      	ldr	r5, [pc, #32]	; (bbf8 <_lseek_r+0x28>)
    bbd6:	4684      	mov	ip, r0
    bbd8:	4611      	mov	r1, r2
    bbda:	4620      	mov	r0, r4
    bbdc:	461a      	mov	r2, r3
    bbde:	2300      	movs	r3, #0
    bbe0:	602b      	str	r3, [r5, #0]
    bbe2:	4664      	mov	r4, ip
    bbe4:	f7fc fc32 	bl	844c <_lseek>
    bbe8:	1c43      	adds	r3, r0, #1
    bbea:	d000      	beq.n	bbee <_lseek_r+0x1e>
    bbec:	bd38      	pop	{r3, r4, r5, pc}
    bbee:	682b      	ldr	r3, [r5, #0]
    bbf0:	2b00      	cmp	r3, #0
    bbf2:	d0fb      	beq.n	bbec <_lseek_r+0x1c>
    bbf4:	6023      	str	r3, [r4, #0]
    bbf6:	bd38      	pop	{r3, r4, r5, pc}
    bbf8:	2002ae38 	.word	0x2002ae38

0000bbfc <_read_r>:
    bbfc:	b538      	push	{r3, r4, r5, lr}
    bbfe:	460c      	mov	r4, r1
    bc00:	4d08      	ldr	r5, [pc, #32]	; (bc24 <_read_r+0x28>)
    bc02:	4684      	mov	ip, r0
    bc04:	4611      	mov	r1, r2
    bc06:	4620      	mov	r0, r4
    bc08:	461a      	mov	r2, r3
    bc0a:	2300      	movs	r3, #0
    bc0c:	602b      	str	r3, [r5, #0]
    bc0e:	4664      	mov	r4, ip
    bc10:	f7fc fc0e 	bl	8430 <_read>
    bc14:	1c43      	adds	r3, r0, #1
    bc16:	d000      	beq.n	bc1a <_read_r+0x1e>
    bc18:	bd38      	pop	{r3, r4, r5, pc}
    bc1a:	682b      	ldr	r3, [r5, #0]
    bc1c:	2b00      	cmp	r3, #0
    bc1e:	d0fb      	beq.n	bc18 <_read_r+0x1c>
    bc20:	6023      	str	r3, [r4, #0]
    bc22:	bd38      	pop	{r3, r4, r5, pc}
    bc24:	2002ae38 	.word	0x2002ae38

0000bc28 <_sbrk_r>:
    bc28:	b538      	push	{r3, r4, r5, lr}
    bc2a:	4d07      	ldr	r5, [pc, #28]	; (bc48 <_sbrk_r+0x20>)
    bc2c:	2200      	movs	r2, #0
    bc2e:	4604      	mov	r4, r0
    bc30:	4608      	mov	r0, r1
    bc32:	602a      	str	r2, [r5, #0]
    bc34:	f7fc fbe2 	bl	83fc <_sbrk>
    bc38:	1c43      	adds	r3, r0, #1
    bc3a:	d000      	beq.n	bc3e <_sbrk_r+0x16>
    bc3c:	bd38      	pop	{r3, r4, r5, pc}
    bc3e:	682b      	ldr	r3, [r5, #0]
    bc40:	2b00      	cmp	r3, #0
    bc42:	d0fb      	beq.n	bc3c <_sbrk_r+0x14>
    bc44:	6023      	str	r3, [r4, #0]
    bc46:	bd38      	pop	{r3, r4, r5, pc}
    bc48:	2002ae38 	.word	0x2002ae38

0000bc4c <_write_r>:
    bc4c:	b538      	push	{r3, r4, r5, lr}
    bc4e:	460c      	mov	r4, r1
    bc50:	4d08      	ldr	r5, [pc, #32]	; (bc74 <_write_r+0x28>)
    bc52:	4684      	mov	ip, r0
    bc54:	4611      	mov	r1, r2
    bc56:	4620      	mov	r0, r4
    bc58:	461a      	mov	r2, r3
    bc5a:	2300      	movs	r3, #0
    bc5c:	602b      	str	r3, [r5, #0]
    bc5e:	4664      	mov	r4, ip
    bc60:	f7fb fe7e 	bl	7960 <_write>
    bc64:	1c43      	adds	r3, r0, #1
    bc66:	d000      	beq.n	bc6a <_write_r+0x1e>
    bc68:	bd38      	pop	{r3, r4, r5, pc}
    bc6a:	682b      	ldr	r3, [r5, #0]
    bc6c:	2b00      	cmp	r3, #0
    bc6e:	d0fb      	beq.n	bc68 <_write_r+0x1c>
    bc70:	6023      	str	r3, [r4, #0]
    bc72:	bd38      	pop	{r3, r4, r5, pc}
    bc74:	2002ae38 	.word	0x2002ae38

0000bc78 <__errno>:
    bc78:	4b01      	ldr	r3, [pc, #4]	; (bc80 <__errno+0x8>)
    bc7a:	6818      	ldr	r0, [r3, #0]
    bc7c:	4770      	bx	lr
    bc7e:	bf00      	nop
    bc80:	20008b70 	.word	0x20008b70

0000bc84 <__libc_init_array>:
    bc84:	b570      	push	{r4, r5, r6, lr}
    bc86:	4e0d      	ldr	r6, [pc, #52]	; (bcbc <__libc_init_array+0x38>)
    bc88:	4d0d      	ldr	r5, [pc, #52]	; (bcc0 <__libc_init_array+0x3c>)
    bc8a:	1b76      	subs	r6, r6, r5
    bc8c:	10b6      	asrs	r6, r6, #2
    bc8e:	d006      	beq.n	bc9e <__libc_init_array+0x1a>
    bc90:	2400      	movs	r4, #0
    bc92:	f855 3b04 	ldr.w	r3, [r5], #4
    bc96:	3401      	adds	r4, #1
    bc98:	4798      	blx	r3
    bc9a:	42a6      	cmp	r6, r4
    bc9c:	d1f9      	bne.n	bc92 <__libc_init_array+0xe>
    bc9e:	4e09      	ldr	r6, [pc, #36]	; (bcc4 <__libc_init_array+0x40>)
    bca0:	4d09      	ldr	r5, [pc, #36]	; (bcc8 <__libc_init_array+0x44>)
    bca2:	1b76      	subs	r6, r6, r5
    bca4:	f008 fc30 	bl	14508 <___init_veneer>
    bca8:	10b6      	asrs	r6, r6, #2
    bcaa:	d006      	beq.n	bcba <__libc_init_array+0x36>
    bcac:	2400      	movs	r4, #0
    bcae:	f855 3b04 	ldr.w	r3, [r5], #4
    bcb2:	3401      	adds	r4, #1
    bcb4:	4798      	blx	r3
    bcb6:	42a6      	cmp	r6, r4
    bcb8:	d1f9      	bne.n	bcae <__libc_init_array+0x2a>
    bcba:	bd70      	pop	{r4, r5, r6, pc}
    bcbc:	60002660 	.word	0x60002660
    bcc0:	60002660 	.word	0x60002660
    bcc4:	60002674 	.word	0x60002674
    bcc8:	60002660 	.word	0x60002660

0000bccc <__retarget_lock_init_recursive>:
    bccc:	4770      	bx	lr
    bcce:	bf00      	nop

0000bcd0 <__retarget_lock_close_recursive>:
    bcd0:	4770      	bx	lr
    bcd2:	bf00      	nop

0000bcd4 <__retarget_lock_acquire_recursive>:
    bcd4:	4770      	bx	lr
    bcd6:	bf00      	nop

0000bcd8 <__retarget_lock_release_recursive>:
    bcd8:	4770      	bx	lr
    bcda:	bf00      	nop
    bcdc:	0000      	movs	r0, r0
    bcde:	0000      	movs	r0, r0
    bce0:	eba2 0003 	sub.w	r0, r2, r3
    bce4:	4770      	bx	lr
    bce6:	bf00      	nop

0000bce8 <strcmp>:
    bce8:	7802      	ldrb	r2, [r0, #0]
    bcea:	780b      	ldrb	r3, [r1, #0]
    bcec:	2a01      	cmp	r2, #1
    bcee:	bf28      	it	cs
    bcf0:	429a      	cmpcs	r2, r3
    bcf2:	d1f5      	bne.n	bce0 <__retarget_lock_release_recursive+0x8>
    bcf4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    bcf8:	ea40 0401 	orr.w	r4, r0, r1
    bcfc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    bd00:	f06f 0c00 	mvn.w	ip, #0
    bd04:	ea4f 7244 	mov.w	r2, r4, lsl #29
    bd08:	b312      	cbz	r2, bd50 <strcmp+0x68>
    bd0a:	ea80 0401 	eor.w	r4, r0, r1
    bd0e:	f014 0f07 	tst.w	r4, #7
    bd12:	d16a      	bne.n	bdea <strcmp+0x102>
    bd14:	f000 0407 	and.w	r4, r0, #7
    bd18:	f020 0007 	bic.w	r0, r0, #7
    bd1c:	f004 0503 	and.w	r5, r4, #3
    bd20:	f021 0107 	bic.w	r1, r1, #7
    bd24:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bd28:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bd2c:	f014 0f04 	tst.w	r4, #4
    bd30:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bd34:	fa0c f405 	lsl.w	r4, ip, r5
    bd38:	ea62 0204 	orn	r2, r2, r4
    bd3c:	ea66 0604 	orn	r6, r6, r4
    bd40:	d00a      	beq.n	bd58 <strcmp+0x70>
    bd42:	ea63 0304 	orn	r3, r3, r4
    bd46:	4662      	mov	r2, ip
    bd48:	ea67 0704 	orn	r7, r7, r4
    bd4c:	4666      	mov	r6, ip
    bd4e:	e003      	b.n	bd58 <strcmp+0x70>
    bd50:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bd54:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bd58:	fa82 f54c 	uadd8	r5, r2, ip
    bd5c:	ea82 0406 	eor.w	r4, r2, r6
    bd60:	faa4 f48c 	sel	r4, r4, ip
    bd64:	bb6c      	cbnz	r4, bdc2 <strcmp+0xda>
    bd66:	fa83 f54c 	uadd8	r5, r3, ip
    bd6a:	ea83 0507 	eor.w	r5, r3, r7
    bd6e:	faa5 f58c 	sel	r5, r5, ip
    bd72:	b995      	cbnz	r5, bd9a <strcmp+0xb2>
    bd74:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    bd78:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    bd7c:	fa82 f54c 	uadd8	r5, r2, ip
    bd80:	ea82 0406 	eor.w	r4, r2, r6
    bd84:	faa4 f48c 	sel	r4, r4, ip
    bd88:	fa83 f54c 	uadd8	r5, r3, ip
    bd8c:	ea83 0507 	eor.w	r5, r3, r7
    bd90:	faa5 f58c 	sel	r5, r5, ip
    bd94:	4325      	orrs	r5, r4
    bd96:	d0db      	beq.n	bd50 <strcmp+0x68>
    bd98:	b99c      	cbnz	r4, bdc2 <strcmp+0xda>
    bd9a:	ba2d      	rev	r5, r5
    bd9c:	fab5 f485 	clz	r4, r5
    bda0:	f024 0407 	bic.w	r4, r4, #7
    bda4:	fa27 f104 	lsr.w	r1, r7, r4
    bda8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    bdac:	fa23 f304 	lsr.w	r3, r3, r4
    bdb0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    bdb4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bdb8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bdbc:	eba0 0001 	sub.w	r0, r0, r1
    bdc0:	4770      	bx	lr
    bdc2:	ba24      	rev	r4, r4
    bdc4:	fab4 f484 	clz	r4, r4
    bdc8:	f024 0407 	bic.w	r4, r4, #7
    bdcc:	fa26 f104 	lsr.w	r1, r6, r4
    bdd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    bdd4:	fa22 f204 	lsr.w	r2, r2, r4
    bdd8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    bddc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bde0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bde4:	eba0 0001 	sub.w	r0, r0, r1
    bde8:	4770      	bx	lr
    bdea:	f014 0f03 	tst.w	r4, #3
    bdee:	d13c      	bne.n	be6a <strcmp+0x182>
    bdf0:	f010 0403 	ands.w	r4, r0, #3
    bdf4:	d128      	bne.n	be48 <strcmp+0x160>
    bdf6:	f850 2b08 	ldr.w	r2, [r0], #8
    bdfa:	f851 3b08 	ldr.w	r3, [r1], #8
    bdfe:	fa82 f54c 	uadd8	r5, r2, ip
    be02:	ea82 0503 	eor.w	r5, r2, r3
    be06:	faa5 f58c 	sel	r5, r5, ip
    be0a:	b95d      	cbnz	r5, be24 <strcmp+0x13c>
    be0c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    be10:	f851 3c04 	ldr.w	r3, [r1, #-4]
    be14:	fa82 f54c 	uadd8	r5, r2, ip
    be18:	ea82 0503 	eor.w	r5, r2, r3
    be1c:	faa5 f58c 	sel	r5, r5, ip
    be20:	2d00      	cmp	r5, #0
    be22:	d0e8      	beq.n	bdf6 <strcmp+0x10e>
    be24:	ba2d      	rev	r5, r5
    be26:	fab5 f485 	clz	r4, r5
    be2a:	f024 0407 	bic.w	r4, r4, #7
    be2e:	fa23 f104 	lsr.w	r1, r3, r4
    be32:	fa22 f204 	lsr.w	r2, r2, r4
    be36:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    be3a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    be3e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    be42:	eba0 0001 	sub.w	r0, r0, r1
    be46:	4770      	bx	lr
    be48:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    be4c:	f020 0003 	bic.w	r0, r0, #3
    be50:	f850 2b08 	ldr.w	r2, [r0], #8
    be54:	f021 0103 	bic.w	r1, r1, #3
    be58:	f851 3b08 	ldr.w	r3, [r1], #8
    be5c:	fa0c f404 	lsl.w	r4, ip, r4
    be60:	ea62 0204 	orn	r2, r2, r4
    be64:	ea63 0304 	orn	r3, r3, r4
    be68:	e7c9      	b.n	bdfe <strcmp+0x116>
    be6a:	f010 0403 	ands.w	r4, r0, #3
    be6e:	d01a      	beq.n	bea6 <strcmp+0x1be>
    be70:	eba1 0104 	sub.w	r1, r1, r4
    be74:	f020 0003 	bic.w	r0, r0, #3
    be78:	07e4      	lsls	r4, r4, #31
    be7a:	f850 2b04 	ldr.w	r2, [r0], #4
    be7e:	d006      	beq.n	be8e <strcmp+0x1a6>
    be80:	d20f      	bcs.n	bea2 <strcmp+0x1ba>
    be82:	788b      	ldrb	r3, [r1, #2]
    be84:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    be88:	1ae4      	subs	r4, r4, r3
    be8a:	d106      	bne.n	be9a <strcmp+0x1b2>
    be8c:	b12b      	cbz	r3, be9a <strcmp+0x1b2>
    be8e:	78cb      	ldrb	r3, [r1, #3]
    be90:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    be94:	1ae4      	subs	r4, r4, r3
    be96:	d100      	bne.n	be9a <strcmp+0x1b2>
    be98:	b91b      	cbnz	r3, bea2 <strcmp+0x1ba>
    be9a:	4620      	mov	r0, r4
    be9c:	f85d 4b10 	ldr.w	r4, [sp], #16
    bea0:	4770      	bx	lr
    bea2:	f101 0104 	add.w	r1, r1, #4
    bea6:	f850 2b04 	ldr.w	r2, [r0], #4
    beaa:	07cc      	lsls	r4, r1, #31
    beac:	f021 0103 	bic.w	r1, r1, #3
    beb0:	f851 3b04 	ldr.w	r3, [r1], #4
    beb4:	d848      	bhi.n	bf48 <strcmp+0x260>
    beb6:	d224      	bcs.n	bf02 <strcmp+0x21a>
    beb8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    bebc:	fa82 f54c 	uadd8	r5, r2, ip
    bec0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    bec4:	faa5 f58c 	sel	r5, r5, ip
    bec8:	d10a      	bne.n	bee0 <strcmp+0x1f8>
    beca:	b965      	cbnz	r5, bee6 <strcmp+0x1fe>
    becc:	f851 3b04 	ldr.w	r3, [r1], #4
    bed0:	ea84 0402 	eor.w	r4, r4, r2
    bed4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    bed8:	d10e      	bne.n	bef8 <strcmp+0x210>
    beda:	f850 2b04 	ldr.w	r2, [r0], #4
    bede:	e7eb      	b.n	beb8 <strcmp+0x1d0>
    bee0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    bee4:	e055      	b.n	bf92 <strcmp+0x2aa>
    bee6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    beea:	d14d      	bne.n	bf88 <strcmp+0x2a0>
    beec:	7808      	ldrb	r0, [r1, #0]
    beee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bef2:	f1c0 0000 	rsb	r0, r0, #0
    bef6:	4770      	bx	lr
    bef8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    befc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bf00:	e047      	b.n	bf92 <strcmp+0x2aa>
    bf02:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    bf06:	fa82 f54c 	uadd8	r5, r2, ip
    bf0a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    bf0e:	faa5 f58c 	sel	r5, r5, ip
    bf12:	d10a      	bne.n	bf2a <strcmp+0x242>
    bf14:	b965      	cbnz	r5, bf30 <strcmp+0x248>
    bf16:	f851 3b04 	ldr.w	r3, [r1], #4
    bf1a:	ea84 0402 	eor.w	r4, r4, r2
    bf1e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    bf22:	d10c      	bne.n	bf3e <strcmp+0x256>
    bf24:	f850 2b04 	ldr.w	r2, [r0], #4
    bf28:	e7eb      	b.n	bf02 <strcmp+0x21a>
    bf2a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    bf2e:	e030      	b.n	bf92 <strcmp+0x2aa>
    bf30:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    bf34:	d128      	bne.n	bf88 <strcmp+0x2a0>
    bf36:	880b      	ldrh	r3, [r1, #0]
    bf38:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bf3c:	e029      	b.n	bf92 <strcmp+0x2aa>
    bf3e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bf42:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    bf46:	e024      	b.n	bf92 <strcmp+0x2aa>
    bf48:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    bf4c:	fa82 f54c 	uadd8	r5, r2, ip
    bf50:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    bf54:	faa5 f58c 	sel	r5, r5, ip
    bf58:	d10a      	bne.n	bf70 <strcmp+0x288>
    bf5a:	b965      	cbnz	r5, bf76 <strcmp+0x28e>
    bf5c:	f851 3b04 	ldr.w	r3, [r1], #4
    bf60:	ea84 0402 	eor.w	r4, r4, r2
    bf64:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    bf68:	d109      	bne.n	bf7e <strcmp+0x296>
    bf6a:	f850 2b04 	ldr.w	r2, [r0], #4
    bf6e:	e7eb      	b.n	bf48 <strcmp+0x260>
    bf70:	ea4f 6313 	mov.w	r3, r3, lsr #24
    bf74:	e00d      	b.n	bf92 <strcmp+0x2aa>
    bf76:	f015 0fff 	tst.w	r5, #255	; 0xff
    bf7a:	d105      	bne.n	bf88 <strcmp+0x2a0>
    bf7c:	680b      	ldr	r3, [r1, #0]
    bf7e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    bf82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bf86:	e004      	b.n	bf92 <strcmp+0x2aa>
    bf88:	f04f 0000 	mov.w	r0, #0
    bf8c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bf90:	4770      	bx	lr
    bf92:	ba12      	rev	r2, r2
    bf94:	ba1b      	rev	r3, r3
    bf96:	fa82 f44c 	uadd8	r4, r2, ip
    bf9a:	ea82 0403 	eor.w	r4, r2, r3
    bf9e:	faa4 f58c 	sel	r5, r4, ip
    bfa2:	fab5 f485 	clz	r4, r5
    bfa6:	fa02 f204 	lsl.w	r2, r2, r4
    bfaa:	fa03 f304 	lsl.w	r3, r3, r4
    bfae:	ea4f 6012 	mov.w	r0, r2, lsr #24
    bfb2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bfb6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    bfba:	4770      	bx	lr

0000bfbc <strcpy>:
    bfbc:	ea80 0201 	eor.w	r2, r0, r1
    bfc0:	4684      	mov	ip, r0
    bfc2:	f012 0f03 	tst.w	r2, #3
    bfc6:	d14f      	bne.n	c068 <strcpy+0xac>
    bfc8:	f011 0f03 	tst.w	r1, #3
    bfcc:	d132      	bne.n	c034 <strcpy+0x78>
    bfce:	f84d 4d04 	str.w	r4, [sp, #-4]!
    bfd2:	f011 0f04 	tst.w	r1, #4
    bfd6:	f851 3b04 	ldr.w	r3, [r1], #4
    bfda:	d00b      	beq.n	bff4 <strcpy+0x38>
    bfdc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bfe0:	439a      	bics	r2, r3
    bfe2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bfe6:	bf04      	itt	eq
    bfe8:	f84c 3b04 	streq.w	r3, [ip], #4
    bfec:	f851 3b04 	ldreq.w	r3, [r1], #4
    bff0:	d116      	bne.n	c020 <strcpy+0x64>
    bff2:	bf00      	nop
    bff4:	f851 4b04 	ldr.w	r4, [r1], #4
    bff8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bffc:	439a      	bics	r2, r3
    bffe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c002:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    c006:	d10b      	bne.n	c020 <strcpy+0x64>
    c008:	f84c 3b04 	str.w	r3, [ip], #4
    c00c:	43a2      	bics	r2, r4
    c00e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c012:	bf04      	itt	eq
    c014:	f851 3b04 	ldreq.w	r3, [r1], #4
    c018:	f84c 4b04 	streq.w	r4, [ip], #4
    c01c:	d0ea      	beq.n	bff4 <strcpy+0x38>
    c01e:	4623      	mov	r3, r4
    c020:	f80c 3b01 	strb.w	r3, [ip], #1
    c024:	f013 0fff 	tst.w	r3, #255	; 0xff
    c028:	ea4f 2333 	mov.w	r3, r3, ror #8
    c02c:	d1f8      	bne.n	c020 <strcpy+0x64>
    c02e:	f85d 4b04 	ldr.w	r4, [sp], #4
    c032:	4770      	bx	lr
    c034:	f011 0f01 	tst.w	r1, #1
    c038:	d006      	beq.n	c048 <strcpy+0x8c>
    c03a:	f811 2b01 	ldrb.w	r2, [r1], #1
    c03e:	f80c 2b01 	strb.w	r2, [ip], #1
    c042:	2a00      	cmp	r2, #0
    c044:	bf08      	it	eq
    c046:	4770      	bxeq	lr
    c048:	f011 0f02 	tst.w	r1, #2
    c04c:	d0bf      	beq.n	bfce <strcpy+0x12>
    c04e:	f831 2b02 	ldrh.w	r2, [r1], #2
    c052:	f012 0fff 	tst.w	r2, #255	; 0xff
    c056:	bf16      	itet	ne
    c058:	f82c 2b02 	strhne.w	r2, [ip], #2
    c05c:	f88c 2000 	strbeq.w	r2, [ip]
    c060:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    c064:	d1b3      	bne.n	bfce <strcpy+0x12>
    c066:	4770      	bx	lr
    c068:	f811 2b01 	ldrb.w	r2, [r1], #1
    c06c:	f80c 2b01 	strb.w	r2, [ip], #1
    c070:	2a00      	cmp	r2, #0
    c072:	d1f9      	bne.n	c068 <strcpy+0xac>
    c074:	4770      	bx	lr
    c076:	bf00      	nop
	...

0000c080 <memchr>:
    c080:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c084:	2a10      	cmp	r2, #16
    c086:	db2b      	blt.n	c0e0 <memchr+0x60>
    c088:	f010 0f07 	tst.w	r0, #7
    c08c:	d008      	beq.n	c0a0 <memchr+0x20>
    c08e:	f810 3b01 	ldrb.w	r3, [r0], #1
    c092:	3a01      	subs	r2, #1
    c094:	428b      	cmp	r3, r1
    c096:	d02d      	beq.n	c0f4 <memchr+0x74>
    c098:	f010 0f07 	tst.w	r0, #7
    c09c:	b342      	cbz	r2, c0f0 <memchr+0x70>
    c09e:	d1f6      	bne.n	c08e <memchr+0xe>
    c0a0:	b4f0      	push	{r4, r5, r6, r7}
    c0a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c0a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    c0aa:	f022 0407 	bic.w	r4, r2, #7
    c0ae:	f07f 0700 	mvns.w	r7, #0
    c0b2:	2300      	movs	r3, #0
    c0b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    c0b8:	3c08      	subs	r4, #8
    c0ba:	ea85 0501 	eor.w	r5, r5, r1
    c0be:	ea86 0601 	eor.w	r6, r6, r1
    c0c2:	fa85 f547 	uadd8	r5, r5, r7
    c0c6:	faa3 f587 	sel	r5, r3, r7
    c0ca:	fa86 f647 	uadd8	r6, r6, r7
    c0ce:	faa5 f687 	sel	r6, r5, r7
    c0d2:	b98e      	cbnz	r6, c0f8 <memchr+0x78>
    c0d4:	d1ee      	bne.n	c0b4 <memchr+0x34>
    c0d6:	bcf0      	pop	{r4, r5, r6, r7}
    c0d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c0dc:	f002 0207 	and.w	r2, r2, #7
    c0e0:	b132      	cbz	r2, c0f0 <memchr+0x70>
    c0e2:	f810 3b01 	ldrb.w	r3, [r0], #1
    c0e6:	3a01      	subs	r2, #1
    c0e8:	ea83 0301 	eor.w	r3, r3, r1
    c0ec:	b113      	cbz	r3, c0f4 <memchr+0x74>
    c0ee:	d1f8      	bne.n	c0e2 <memchr+0x62>
    c0f0:	2000      	movs	r0, #0
    c0f2:	4770      	bx	lr
    c0f4:	3801      	subs	r0, #1
    c0f6:	4770      	bx	lr
    c0f8:	2d00      	cmp	r5, #0
    c0fa:	bf06      	itte	eq
    c0fc:	4635      	moveq	r5, r6
    c0fe:	3803      	subeq	r0, #3
    c100:	3807      	subne	r0, #7
    c102:	f015 0f01 	tst.w	r5, #1
    c106:	d107      	bne.n	c118 <memchr+0x98>
    c108:	3001      	adds	r0, #1
    c10a:	f415 7f80 	tst.w	r5, #256	; 0x100
    c10e:	bf02      	ittt	eq
    c110:	3001      	addeq	r0, #1
    c112:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    c116:	3001      	addeq	r0, #1
    c118:	bcf0      	pop	{r4, r5, r6, r7}
    c11a:	3801      	subs	r0, #1
    c11c:	4770      	bx	lr
    c11e:	bf00      	nop
	...

0000c140 <strlen>:
    c140:	f890 f000 	pld	[r0]
    c144:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    c148:	f020 0107 	bic.w	r1, r0, #7
    c14c:	f06f 0c00 	mvn.w	ip, #0
    c150:	f010 0407 	ands.w	r4, r0, #7
    c154:	f891 f020 	pld	[r1, #32]
    c158:	f040 8049 	bne.w	c1ee <strlen+0xae>
    c15c:	f04f 0400 	mov.w	r4, #0
    c160:	f06f 0007 	mvn.w	r0, #7
    c164:	e9d1 2300 	ldrd	r2, r3, [r1]
    c168:	f891 f040 	pld	[r1, #64]	; 0x40
    c16c:	f100 0008 	add.w	r0, r0, #8
    c170:	fa82 f24c 	uadd8	r2, r2, ip
    c174:	faa4 f28c 	sel	r2, r4, ip
    c178:	fa83 f34c 	uadd8	r3, r3, ip
    c17c:	faa2 f38c 	sel	r3, r2, ip
    c180:	bb4b      	cbnz	r3, c1d6 <strlen+0x96>
    c182:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    c186:	fa82 f24c 	uadd8	r2, r2, ip
    c18a:	f100 0008 	add.w	r0, r0, #8
    c18e:	faa4 f28c 	sel	r2, r4, ip
    c192:	fa83 f34c 	uadd8	r3, r3, ip
    c196:	faa2 f38c 	sel	r3, r2, ip
    c19a:	b9e3      	cbnz	r3, c1d6 <strlen+0x96>
    c19c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    c1a0:	fa82 f24c 	uadd8	r2, r2, ip
    c1a4:	f100 0008 	add.w	r0, r0, #8
    c1a8:	faa4 f28c 	sel	r2, r4, ip
    c1ac:	fa83 f34c 	uadd8	r3, r3, ip
    c1b0:	faa2 f38c 	sel	r3, r2, ip
    c1b4:	b97b      	cbnz	r3, c1d6 <strlen+0x96>
    c1b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    c1ba:	f101 0120 	add.w	r1, r1, #32
    c1be:	fa82 f24c 	uadd8	r2, r2, ip
    c1c2:	f100 0008 	add.w	r0, r0, #8
    c1c6:	faa4 f28c 	sel	r2, r4, ip
    c1ca:	fa83 f34c 	uadd8	r3, r3, ip
    c1ce:	faa2 f38c 	sel	r3, r2, ip
    c1d2:	2b00      	cmp	r3, #0
    c1d4:	d0c6      	beq.n	c164 <strlen+0x24>
    c1d6:	2a00      	cmp	r2, #0
    c1d8:	bf04      	itt	eq
    c1da:	3004      	addeq	r0, #4
    c1dc:	461a      	moveq	r2, r3
    c1de:	ba12      	rev	r2, r2
    c1e0:	fab2 f282 	clz	r2, r2
    c1e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    c1e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    c1ec:	4770      	bx	lr
    c1ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    c1f2:	f004 0503 	and.w	r5, r4, #3
    c1f6:	f1c4 0000 	rsb	r0, r4, #0
    c1fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    c1fe:	f014 0f04 	tst.w	r4, #4
    c202:	f891 f040 	pld	[r1, #64]	; 0x40
    c206:	fa0c f505 	lsl.w	r5, ip, r5
    c20a:	ea62 0205 	orn	r2, r2, r5
    c20e:	bf1c      	itt	ne
    c210:	ea63 0305 	ornne	r3, r3, r5
    c214:	4662      	movne	r2, ip
    c216:	f04f 0400 	mov.w	r4, #0
    c21a:	e7a9      	b.n	c170 <strlen+0x30>
    c21c:	0000      	movs	r0, r0
	...

0000c220 <nan>:
    c220:	ed9f 0b01 	vldr	d0, [pc, #4]	; c228 <nan+0x8>
    c224:	4770      	bx	lr
    c226:	bf00      	nop
    c228:	00000000 	.word	0x00000000
    c22c:	7ff80000 	.word	0x7ff80000

0000c230 <nanf>:
    c230:	ed9f 0a01 	vldr	s0, [pc, #4]	; c238 <nanf+0x8>
    c234:	4770      	bx	lr
    c236:	bf00      	nop
    c238:	7fc00000 	.word	0x7fc00000

0000c23c <__register_exitproc>:
    c23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c240:	f8df a07c 	ldr.w	sl, [pc, #124]	; c2c0 <__register_exitproc+0x84>
    c244:	4606      	mov	r6, r0
    c246:	f8da 0000 	ldr.w	r0, [sl]
    c24a:	4698      	mov	r8, r3
    c24c:	460f      	mov	r7, r1
    c24e:	4691      	mov	r9, r2
    c250:	f7ff fd40 	bl	bcd4 <__retarget_lock_acquire_recursive>
    c254:	4b18      	ldr	r3, [pc, #96]	; (c2b8 <__register_exitproc+0x7c>)
    c256:	681c      	ldr	r4, [r3, #0]
    c258:	b324      	cbz	r4, c2a4 <__register_exitproc+0x68>
    c25a:	6865      	ldr	r5, [r4, #4]
    c25c:	2d1f      	cmp	r5, #31
    c25e:	dc24      	bgt.n	c2aa <__register_exitproc+0x6e>
    c260:	b95e      	cbnz	r6, c27a <__register_exitproc+0x3e>
    c262:	1c6b      	adds	r3, r5, #1
    c264:	3502      	adds	r5, #2
    c266:	f8da 0000 	ldr.w	r0, [sl]
    c26a:	6063      	str	r3, [r4, #4]
    c26c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    c270:	f7ff fd32 	bl	bcd8 <__retarget_lock_release_recursive>
    c274:	2000      	movs	r0, #0
    c276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c27a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    c27e:	2301      	movs	r3, #1
    c280:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    c284:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    c288:	40ab      	lsls	r3, r5
    c28a:	431a      	orrs	r2, r3
    c28c:	2e02      	cmp	r6, #2
    c28e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    c292:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    c296:	d1e4      	bne.n	c262 <__register_exitproc+0x26>
    c298:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    c29c:	431a      	orrs	r2, r3
    c29e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    c2a2:	e7de      	b.n	c262 <__register_exitproc+0x26>
    c2a4:	4c05      	ldr	r4, [pc, #20]	; (c2bc <__register_exitproc+0x80>)
    c2a6:	601c      	str	r4, [r3, #0]
    c2a8:	e7d7      	b.n	c25a <__register_exitproc+0x1e>
    c2aa:	f8da 0000 	ldr.w	r0, [sl]
    c2ae:	f7ff fd13 	bl	bcd8 <__retarget_lock_release_recursive>
    c2b2:	f04f 30ff 	mov.w	r0, #4294967295
    c2b6:	e7de      	b.n	c276 <__register_exitproc+0x3a>
    c2b8:	2002a914 	.word	0x2002a914
    c2bc:	2002a918 	.word	0x2002a918
    c2c0:	200085dc 	.word	0x200085dc

0000c2c4 <_malloc_trim_r>:
    c2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2c6:	4f24      	ldr	r7, [pc, #144]	; (c358 <_malloc_trim_r+0x94>)
    c2c8:	460c      	mov	r4, r1
    c2ca:	4606      	mov	r6, r0
    c2cc:	f7fd ff26 	bl	a11c <__malloc_lock>
    c2d0:	68bb      	ldr	r3, [r7, #8]
    c2d2:	685d      	ldr	r5, [r3, #4]
    c2d4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    c2d8:	310f      	adds	r1, #15
    c2da:	f025 0503 	bic.w	r5, r5, #3
    c2de:	194b      	adds	r3, r1, r5
    c2e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    c2e4:	f023 030f 	bic.w	r3, r3, #15
    c2e8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    c2ec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    c2f0:	db07      	blt.n	c302 <_malloc_trim_r+0x3e>
    c2f2:	2100      	movs	r1, #0
    c2f4:	4630      	mov	r0, r6
    c2f6:	f7ff fc97 	bl	bc28 <_sbrk_r>
    c2fa:	68bb      	ldr	r3, [r7, #8]
    c2fc:	442b      	add	r3, r5
    c2fe:	4298      	cmp	r0, r3
    c300:	d004      	beq.n	c30c <_malloc_trim_r+0x48>
    c302:	4630      	mov	r0, r6
    c304:	f7fd ff10 	bl	a128 <__malloc_unlock>
    c308:	2000      	movs	r0, #0
    c30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c30c:	4261      	negs	r1, r4
    c30e:	4630      	mov	r0, r6
    c310:	f7ff fc8a 	bl	bc28 <_sbrk_r>
    c314:	3001      	adds	r0, #1
    c316:	d00d      	beq.n	c334 <_malloc_trim_r+0x70>
    c318:	4a10      	ldr	r2, [pc, #64]	; (c35c <_malloc_trim_r+0x98>)
    c31a:	68bb      	ldr	r3, [r7, #8]
    c31c:	1b2d      	subs	r5, r5, r4
    c31e:	f045 0501 	orr.w	r5, r5, #1
    c322:	605d      	str	r5, [r3, #4]
    c324:	6813      	ldr	r3, [r2, #0]
    c326:	4630      	mov	r0, r6
    c328:	1b1b      	subs	r3, r3, r4
    c32a:	6013      	str	r3, [r2, #0]
    c32c:	f7fd fefc 	bl	a128 <__malloc_unlock>
    c330:	2001      	movs	r0, #1
    c332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c334:	2100      	movs	r1, #0
    c336:	4630      	mov	r0, r6
    c338:	f7ff fc76 	bl	bc28 <_sbrk_r>
    c33c:	68ba      	ldr	r2, [r7, #8]
    c33e:	1a83      	subs	r3, r0, r2
    c340:	2b0f      	cmp	r3, #15
    c342:	ddde      	ble.n	c302 <_malloc_trim_r+0x3e>
    c344:	f043 0301 	orr.w	r3, r3, #1
    c348:	6053      	str	r3, [r2, #4]
    c34a:	4b05      	ldr	r3, [pc, #20]	; (c360 <_malloc_trim_r+0x9c>)
    c34c:	4903      	ldr	r1, [pc, #12]	; (c35c <_malloc_trim_r+0x98>)
    c34e:	681b      	ldr	r3, [r3, #0]
    c350:	1ac0      	subs	r0, r0, r3
    c352:	6008      	str	r0, [r1, #0]
    c354:	e7d5      	b.n	c302 <_malloc_trim_r+0x3e>
    c356:	bf00      	nop
    c358:	20008754 	.word	0x20008754
    c35c:	2002aab4 	.word	0x2002aab4
    c360:	20008b5c 	.word	0x20008b5c

0000c364 <_free_r>:
    c364:	2900      	cmp	r1, #0
    c366:	d061      	beq.n	c42c <_free_r+0xc8>
    c368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c36a:	460c      	mov	r4, r1
    c36c:	4606      	mov	r6, r0
    c36e:	f7fd fed5 	bl	a11c <__malloc_lock>
    c372:	f854 2c04 	ldr.w	r2, [r4, #-4]
    c376:	4f7b      	ldr	r7, [pc, #492]	; (c564 <_free_r+0x200>)
    c378:	f1a4 0508 	sub.w	r5, r4, #8
    c37c:	f022 0101 	bic.w	r1, r2, #1
    c380:	eb05 0c01 	add.w	ip, r5, r1
    c384:	68b8      	ldr	r0, [r7, #8]
    c386:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c38a:	4560      	cmp	r0, ip
    c38c:	f023 0303 	bic.w	r3, r3, #3
    c390:	f000 808b 	beq.w	c4aa <_free_r+0x146>
    c394:	07d2      	lsls	r2, r2, #31
    c396:	f8cc 3004 	str.w	r3, [ip, #4]
    c39a:	d432      	bmi.n	c402 <_free_r+0x9e>
    c39c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c3a0:	1aad      	subs	r5, r5, r2
    c3a2:	4411      	add	r1, r2
    c3a4:	68aa      	ldr	r2, [r5, #8]
    c3a6:	f107 0008 	add.w	r0, r7, #8
    c3aa:	4282      	cmp	r2, r0
    c3ac:	d06a      	beq.n	c484 <_free_r+0x120>
    c3ae:	eb0c 0403 	add.w	r4, ip, r3
    c3b2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    c3b6:	68ec      	ldr	r4, [r5, #12]
    c3b8:	60d4      	str	r4, [r2, #12]
    c3ba:	f01e 0f01 	tst.w	lr, #1
    c3be:	60a2      	str	r2, [r4, #8]
    c3c0:	f000 8097 	beq.w	c4f2 <_free_r+0x18e>
    c3c4:	f041 0301 	orr.w	r3, r1, #1
    c3c8:	606b      	str	r3, [r5, #4]
    c3ca:	f8cc 1000 	str.w	r1, [ip]
    c3ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c3d2:	d235      	bcs.n	c440 <_free_r+0xdc>
    c3d4:	6878      	ldr	r0, [r7, #4]
    c3d6:	08cb      	lsrs	r3, r1, #3
    c3d8:	2201      	movs	r2, #1
    c3da:	0949      	lsrs	r1, r1, #5
    c3dc:	3301      	adds	r3, #1
    c3de:	408a      	lsls	r2, r1
    c3e0:	4302      	orrs	r2, r0
    c3e2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    c3e6:	607a      	str	r2, [r7, #4]
    c3e8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    c3ec:	3a08      	subs	r2, #8
    c3ee:	e9c5 1202 	strd	r1, r2, [r5, #8]
    c3f2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    c3f6:	60cd      	str	r5, [r1, #12]
    c3f8:	4630      	mov	r0, r6
    c3fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c3fe:	f7fd be93 	b.w	a128 <__malloc_unlock>
    c402:	eb0c 0203 	add.w	r2, ip, r3
    c406:	6852      	ldr	r2, [r2, #4]
    c408:	07d0      	lsls	r0, r2, #31
    c40a:	d410      	bmi.n	c42e <_free_r+0xca>
    c40c:	4419      	add	r1, r3
    c40e:	f107 0008 	add.w	r0, r7, #8
    c412:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c416:	4283      	cmp	r3, r0
    c418:	d073      	beq.n	c502 <_free_r+0x19e>
    c41a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    c41e:	60da      	str	r2, [r3, #12]
    c420:	6093      	str	r3, [r2, #8]
    c422:	f041 0301 	orr.w	r3, r1, #1
    c426:	606b      	str	r3, [r5, #4]
    c428:	5069      	str	r1, [r5, r1]
    c42a:	e7d0      	b.n	c3ce <_free_r+0x6a>
    c42c:	4770      	bx	lr
    c42e:	f041 0301 	orr.w	r3, r1, #1
    c432:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c436:	f844 3c04 	str.w	r3, [r4, #-4]
    c43a:	f8cc 1000 	str.w	r1, [ip]
    c43e:	d3c9      	bcc.n	c3d4 <_free_r+0x70>
    c440:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    c444:	ea4f 2351 	mov.w	r3, r1, lsr #9
    c448:	d248      	bcs.n	c4dc <_free_r+0x178>
    c44a:	098b      	lsrs	r3, r1, #6
    c44c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c450:	f103 0238 	add.w	r2, r3, #56	; 0x38
    c454:	00c3      	lsls	r3, r0, #3
    c456:	18f8      	adds	r0, r7, r3
    c458:	58fb      	ldr	r3, [r7, r3]
    c45a:	3808      	subs	r0, #8
    c45c:	4298      	cmp	r0, r3
    c45e:	d059      	beq.n	c514 <_free_r+0x1b0>
    c460:	685a      	ldr	r2, [r3, #4]
    c462:	f022 0203 	bic.w	r2, r2, #3
    c466:	428a      	cmp	r2, r1
    c468:	d902      	bls.n	c470 <_free_r+0x10c>
    c46a:	689b      	ldr	r3, [r3, #8]
    c46c:	4298      	cmp	r0, r3
    c46e:	d1f7      	bne.n	c460 <_free_r+0xfc>
    c470:	68d8      	ldr	r0, [r3, #12]
    c472:	e9c5 3002 	strd	r3, r0, [r5, #8]
    c476:	6085      	str	r5, [r0, #8]
    c478:	60dd      	str	r5, [r3, #12]
    c47a:	4630      	mov	r0, r6
    c47c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c480:	f7fd be52 	b.w	a128 <__malloc_unlock>
    c484:	eb0c 0203 	add.w	r2, ip, r3
    c488:	6852      	ldr	r2, [r2, #4]
    c48a:	07d2      	lsls	r2, r2, #31
    c48c:	d463      	bmi.n	c556 <_free_r+0x1f2>
    c48e:	440b      	add	r3, r1
    c490:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    c494:	60ca      	str	r2, [r1, #12]
    c496:	6091      	str	r1, [r2, #8]
    c498:	f043 0201 	orr.w	r2, r3, #1
    c49c:	606a      	str	r2, [r5, #4]
    c49e:	4630      	mov	r0, r6
    c4a0:	50eb      	str	r3, [r5, r3]
    c4a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c4a6:	f7fd be3f 	b.w	a128 <__malloc_unlock>
    c4aa:	440b      	add	r3, r1
    c4ac:	07d1      	lsls	r1, r2, #31
    c4ae:	d407      	bmi.n	c4c0 <_free_r+0x15c>
    c4b0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c4b4:	1aad      	subs	r5, r5, r2
    c4b6:	4413      	add	r3, r2
    c4b8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    c4bc:	60ca      	str	r2, [r1, #12]
    c4be:	6091      	str	r1, [r2, #8]
    c4c0:	f043 0201 	orr.w	r2, r3, #1
    c4c4:	606a      	str	r2, [r5, #4]
    c4c6:	4a28      	ldr	r2, [pc, #160]	; (c568 <_free_r+0x204>)
    c4c8:	60bd      	str	r5, [r7, #8]
    c4ca:	6812      	ldr	r2, [r2, #0]
    c4cc:	429a      	cmp	r2, r3
    c4ce:	d893      	bhi.n	c3f8 <_free_r+0x94>
    c4d0:	4b26      	ldr	r3, [pc, #152]	; (c56c <_free_r+0x208>)
    c4d2:	4630      	mov	r0, r6
    c4d4:	6819      	ldr	r1, [r3, #0]
    c4d6:	f7ff fef5 	bl	c2c4 <_malloc_trim_r>
    c4da:	e78d      	b.n	c3f8 <_free_r+0x94>
    c4dc:	2b14      	cmp	r3, #20
    c4de:	d90a      	bls.n	c4f6 <_free_r+0x192>
    c4e0:	2b54      	cmp	r3, #84	; 0x54
    c4e2:	d81f      	bhi.n	c524 <_free_r+0x1c0>
    c4e4:	0b0b      	lsrs	r3, r1, #12
    c4e6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c4ea:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    c4ee:	00c3      	lsls	r3, r0, #3
    c4f0:	e7b1      	b.n	c456 <_free_r+0xf2>
    c4f2:	4419      	add	r1, r3
    c4f4:	e78d      	b.n	c412 <_free_r+0xae>
    c4f6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c4fa:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    c4fe:	00c3      	lsls	r3, r0, #3
    c500:	e7a9      	b.n	c456 <_free_r+0xf2>
    c502:	f041 0301 	orr.w	r3, r1, #1
    c506:	e9c7 5504 	strd	r5, r5, [r7, #16]
    c50a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    c50e:	606b      	str	r3, [r5, #4]
    c510:	5069      	str	r1, [r5, r1]
    c512:	e771      	b.n	c3f8 <_free_r+0x94>
    c514:	6879      	ldr	r1, [r7, #4]
    c516:	1092      	asrs	r2, r2, #2
    c518:	2401      	movs	r4, #1
    c51a:	fa04 f202 	lsl.w	r2, r4, r2
    c51e:	430a      	orrs	r2, r1
    c520:	607a      	str	r2, [r7, #4]
    c522:	e7a6      	b.n	c472 <_free_r+0x10e>
    c524:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c528:	d806      	bhi.n	c538 <_free_r+0x1d4>
    c52a:	0bcb      	lsrs	r3, r1, #15
    c52c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c530:	f103 0277 	add.w	r2, r3, #119	; 0x77
    c534:	00c3      	lsls	r3, r0, #3
    c536:	e78e      	b.n	c456 <_free_r+0xf2>
    c538:	f240 5254 	movw	r2, #1364	; 0x554
    c53c:	4293      	cmp	r3, r2
    c53e:	d806      	bhi.n	c54e <_free_r+0x1ea>
    c540:	0c8b      	lsrs	r3, r1, #18
    c542:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c546:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    c54a:	00c3      	lsls	r3, r0, #3
    c54c:	e783      	b.n	c456 <_free_r+0xf2>
    c54e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c552:	227e      	movs	r2, #126	; 0x7e
    c554:	e77f      	b.n	c456 <_free_r+0xf2>
    c556:	f041 0301 	orr.w	r3, r1, #1
    c55a:	606b      	str	r3, [r5, #4]
    c55c:	f8cc 1000 	str.w	r1, [ip]
    c560:	e74a      	b.n	c3f8 <_free_r+0x94>
    c562:	bf00      	nop
    c564:	20008754 	.word	0x20008754
    c568:	20008b60 	.word	0x20008b60
    c56c:	2002aae4 	.word	0x2002aae4

0000c570 <rshift>:
    c570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c574:	6904      	ldr	r4, [r0, #16]
    c576:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    c57a:	dd2f      	ble.n	c5dc <rshift+0x6c>
    c57c:	f100 0e14 	add.w	lr, r0, #20
    c580:	114e      	asrs	r6, r1, #5
    c582:	f011 0c1f 	ands.w	ip, r1, #31
    c586:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    c58a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    c58e:	d02b      	beq.n	c5e8 <rshift+0x78>
    c590:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    c594:	3304      	adds	r3, #4
    c596:	429d      	cmp	r5, r3
    c598:	fa21 f10c 	lsr.w	r1, r1, ip
    c59c:	f1cc 0820 	rsb	r8, ip, #32
    c5a0:	d918      	bls.n	c5d4 <rshift+0x64>
    c5a2:	4677      	mov	r7, lr
    c5a4:	681a      	ldr	r2, [r3, #0]
    c5a6:	fa02 f208 	lsl.w	r2, r2, r8
    c5aa:	430a      	orrs	r2, r1
    c5ac:	f847 2b04 	str.w	r2, [r7], #4
    c5b0:	f853 1b04 	ldr.w	r1, [r3], #4
    c5b4:	429d      	cmp	r5, r3
    c5b6:	fa21 f10c 	lsr.w	r1, r1, ip
    c5ba:	d8f3      	bhi.n	c5a4 <rshift+0x34>
    c5bc:	1ba3      	subs	r3, r4, r6
    c5be:	009b      	lsls	r3, r3, #2
    c5c0:	3b05      	subs	r3, #5
    c5c2:	089b      	lsrs	r3, r3, #2
    c5c4:	3301      	adds	r3, #1
    c5c6:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    c5ca:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    c5ce:	b1c9      	cbz	r1, c604 <rshift+0x94>
    c5d0:	3404      	adds	r4, #4
    c5d2:	e017      	b.n	c604 <rshift+0x94>
    c5d4:	6141      	str	r1, [r0, #20]
    c5d6:	4674      	mov	r4, lr
    c5d8:	2900      	cmp	r1, #0
    c5da:	d1f9      	bne.n	c5d0 <rshift+0x60>
    c5dc:	2300      	movs	r3, #0
    c5de:	6103      	str	r3, [r0, #16]
    c5e0:	2300      	movs	r3, #0
    c5e2:	6143      	str	r3, [r0, #20]
    c5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5e8:	429d      	cmp	r5, r3
    c5ea:	bf88      	it	hi
    c5ec:	f100 0210 	addhi.w	r2, r0, #16
    c5f0:	d9f4      	bls.n	c5dc <rshift+0x6c>
    c5f2:	f853 1b04 	ldr.w	r1, [r3], #4
    c5f6:	f842 1f04 	str.w	r1, [r2, #4]!
    c5fa:	429d      	cmp	r5, r3
    c5fc:	d8f9      	bhi.n	c5f2 <rshift+0x82>
    c5fe:	1ba4      	subs	r4, r4, r6
    c600:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    c604:	eba4 030e 	sub.w	r3, r4, lr
    c608:	109b      	asrs	r3, r3, #2
    c60a:	4574      	cmp	r4, lr
    c60c:	6103      	str	r3, [r0, #16]
    c60e:	d0e7      	beq.n	c5e0 <rshift+0x70>
    c610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c614 <__gethex>:
    c614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c618:	ed2d 8b02 	vpush	{d8}
    c61c:	680c      	ldr	r4, [r1, #0]
    c61e:	468b      	mov	fp, r1
    c620:	78a1      	ldrb	r1, [r4, #2]
    c622:	b085      	sub	sp, #20
    c624:	2930      	cmp	r1, #48	; 0x30
    c626:	ee08 0a10 	vmov	s16, r0
    c62a:	4692      	mov	sl, r2
    c62c:	9302      	str	r3, [sp, #8]
    c62e:	f040 81ce 	bne.w	c9ce <__gethex+0x3ba>
    c632:	f06f 0001 	mvn.w	r0, #1
    c636:	1b00      	subs	r0, r0, r4
    c638:	1ce2      	adds	r2, r4, #3
    c63a:	1883      	adds	r3, r0, r2
    c63c:	4614      	mov	r4, r2
    c63e:	f812 1b01 	ldrb.w	r1, [r2], #1
    c642:	2930      	cmp	r1, #48	; 0x30
    c644:	d0f9      	beq.n	c63a <__gethex+0x26>
    c646:	f8df 8300 	ldr.w	r8, [pc, #768]	; c948 <__gethex+0x334>
    c64a:	f818 2001 	ldrb.w	r2, [r8, r1]
    c64e:	2a00      	cmp	r2, #0
    c650:	f000 80e5 	beq.w	c81e <__gethex+0x20a>
    c654:	7822      	ldrb	r2, [r4, #0]
    c656:	2700      	movs	r7, #0
    c658:	f818 2002 	ldrb.w	r2, [r8, r2]
    c65c:	463d      	mov	r5, r7
    c65e:	4626      	mov	r6, r4
    c660:	b12a      	cbz	r2, c66e <__gethex+0x5a>
    c662:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c666:	f818 2002 	ldrb.w	r2, [r8, r2]
    c66a:	2a00      	cmp	r2, #0
    c66c:	d1f9      	bne.n	c662 <__gethex+0x4e>
    c66e:	49b5      	ldr	r1, [pc, #724]	; (c944 <__gethex+0x330>)
    c670:	9301      	str	r3, [sp, #4]
    c672:	2201      	movs	r2, #1
    c674:	4630      	mov	r0, r6
    c676:	f7ff fa1b 	bl	bab0 <strncmp>
    c67a:	9b01      	ldr	r3, [sp, #4]
    c67c:	4681      	mov	r9, r0
    c67e:	2800      	cmp	r0, #0
    c680:	d04d      	beq.n	c71e <__gethex+0x10a>
    c682:	2d00      	cmp	r5, #0
    c684:	d14e      	bne.n	c724 <__gethex+0x110>
    c686:	7832      	ldrb	r2, [r6, #0]
    c688:	46a9      	mov	r9, r5
    c68a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c68e:	2a50      	cmp	r2, #80	; 0x50
    c690:	4635      	mov	r5, r6
    c692:	d050      	beq.n	c736 <__gethex+0x122>
    c694:	f8cb 6000 	str.w	r6, [fp]
    c698:	2f00      	cmp	r7, #0
    c69a:	d169      	bne.n	c770 <__gethex+0x15c>
    c69c:	1b2b      	subs	r3, r5, r4
    c69e:	3b01      	subs	r3, #1
    c6a0:	2b07      	cmp	r3, #7
    c6a2:	4639      	mov	r1, r7
    c6a4:	dd04      	ble.n	c6b0 <__gethex+0x9c>
    c6a6:	105b      	asrs	r3, r3, #1
    c6a8:	2b07      	cmp	r3, #7
    c6aa:	f101 0101 	add.w	r1, r1, #1
    c6ae:	dcfa      	bgt.n	c6a6 <__gethex+0x92>
    c6b0:	ee18 0a10 	vmov	r0, s16
    c6b4:	f000 fb82 	bl	cdbc <_Balloc>
    c6b8:	4683      	mov	fp, r0
    c6ba:	2800      	cmp	r0, #0
    c6bc:	f000 8266 	beq.w	cb8c <__gethex+0x578>
    c6c0:	f100 0614 	add.w	r6, r0, #20
    c6c4:	42ac      	cmp	r4, r5
    c6c6:	9601      	str	r6, [sp, #4]
    c6c8:	f080 81d2 	bcs.w	ca70 <__gethex+0x45c>
    c6cc:	2700      	movs	r7, #0
    c6ce:	f8cd 900c 	str.w	r9, [sp, #12]
    c6d2:	499c      	ldr	r1, [pc, #624]	; (c944 <__gethex+0x330>)
    c6d4:	46a1      	mov	r9, r4
    c6d6:	463c      	mov	r4, r7
    c6d8:	e00c      	b.n	c6f4 <__gethex+0xe0>
    c6da:	2f20      	cmp	r7, #32
    c6dc:	d019      	beq.n	c712 <__gethex+0xfe>
    c6de:	4638      	mov	r0, r7
    c6e0:	3704      	adds	r7, #4
    c6e2:	782a      	ldrb	r2, [r5, #0]
    c6e4:	f818 2002 	ldrb.w	r2, [r8, r2]
    c6e8:	f002 020f 	and.w	r2, r2, #15
    c6ec:	4082      	lsls	r2, r0
    c6ee:	4314      	orrs	r4, r2
    c6f0:	454d      	cmp	r5, r9
    c6f2:	d047      	beq.n	c784 <__gethex+0x170>
    c6f4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    c6f8:	2a2e      	cmp	r2, #46	; 0x2e
    c6fa:	d1ee      	bne.n	c6da <__gethex+0xc6>
    c6fc:	454d      	cmp	r5, r9
    c6fe:	d3ec      	bcc.n	c6da <__gethex+0xc6>
    c700:	2201      	movs	r2, #1
    c702:	4628      	mov	r0, r5
    c704:	f7ff f9d4 	bl	bab0 <strncmp>
    c708:	498e      	ldr	r1, [pc, #568]	; (c944 <__gethex+0x330>)
    c70a:	2800      	cmp	r0, #0
    c70c:	d0f0      	beq.n	c6f0 <__gethex+0xdc>
    c70e:	2f20      	cmp	r7, #32
    c710:	d1e5      	bne.n	c6de <__gethex+0xca>
    c712:	2000      	movs	r0, #0
    c714:	f846 4b04 	str.w	r4, [r6], #4
    c718:	2704      	movs	r7, #4
    c71a:	4604      	mov	r4, r0
    c71c:	e7e1      	b.n	c6e2 <__gethex+0xce>
    c71e:	2d00      	cmp	r5, #0
    c720:	f000 8142 	beq.w	c9a8 <__gethex+0x394>
    c724:	7832      	ldrb	r2, [r6, #0]
    c726:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c72a:	1bad      	subs	r5, r5, r6
    c72c:	2a50      	cmp	r2, #80	; 0x50
    c72e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    c732:	4635      	mov	r5, r6
    c734:	d1ae      	bne.n	c694 <__gethex+0x80>
    c736:	786a      	ldrb	r2, [r5, #1]
    c738:	2a2b      	cmp	r2, #43	; 0x2b
    c73a:	f000 8125 	beq.w	c988 <__gethex+0x374>
    c73e:	2a2d      	cmp	r2, #45	; 0x2d
    c740:	f000 80a5 	beq.w	c88e <__gethex+0x27a>
    c744:	1c6e      	adds	r6, r5, #1
    c746:	2000      	movs	r0, #0
    c748:	f818 1002 	ldrb.w	r1, [r8, r2]
    c74c:	1e4a      	subs	r2, r1, #1
    c74e:	2a18      	cmp	r2, #24
    c750:	f200 809b 	bhi.w	c88a <__gethex+0x276>
    c754:	7872      	ldrb	r2, [r6, #1]
    c756:	f818 2002 	ldrb.w	r2, [r8, r2]
    c75a:	3910      	subs	r1, #16
    c75c:	3601      	adds	r6, #1
    c75e:	2a00      	cmp	r2, #0
    c760:	d15a      	bne.n	c818 <__gethex+0x204>
    c762:	b100      	cbz	r0, c766 <__gethex+0x152>
    c764:	4249      	negs	r1, r1
    c766:	4489      	add	r9, r1
    c768:	f8cb 6000 	str.w	r6, [fp]
    c76c:	2f00      	cmp	r7, #0
    c76e:	d095      	beq.n	c69c <__gethex+0x88>
    c770:	2b00      	cmp	r3, #0
    c772:	bf14      	ite	ne
    c774:	2500      	movne	r5, #0
    c776:	2506      	moveq	r5, #6
    c778:	4628      	mov	r0, r5
    c77a:	b005      	add	sp, #20
    c77c:	ecbd 8b02 	vpop	{d8}
    c780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c784:	f8dd 900c 	ldr.w	r9, [sp, #12]
    c788:	4623      	mov	r3, r4
    c78a:	f846 3b04 	str.w	r3, [r6], #4
    c78e:	4618      	mov	r0, r3
    c790:	9b01      	ldr	r3, [sp, #4]
    c792:	1af6      	subs	r6, r6, r3
    c794:	10b6      	asrs	r6, r6, #2
    c796:	f8cb 6010 	str.w	r6, [fp, #16]
    c79a:	f000 fbe9 	bl	cf70 <__hi0bits>
    c79e:	0176      	lsls	r6, r6, #5
    c7a0:	f8da 4000 	ldr.w	r4, [sl]
    c7a4:	1a30      	subs	r0, r6, r0
    c7a6:	42a0      	cmp	r0, r4
    c7a8:	dc75      	bgt.n	c896 <__gethex+0x282>
    c7aa:	f2c0 80ef 	blt.w	c98c <__gethex+0x378>
    c7ae:	2700      	movs	r7, #0
    c7b0:	f8da 3008 	ldr.w	r3, [sl, #8]
    c7b4:	454b      	cmp	r3, r9
    c7b6:	f2c0 8151 	blt.w	ca5c <__gethex+0x448>
    c7ba:	f8da 3004 	ldr.w	r3, [sl, #4]
    c7be:	454b      	cmp	r3, r9
    c7c0:	dd4a      	ble.n	c858 <__gethex+0x244>
    c7c2:	eba3 0909 	sub.w	r9, r3, r9
    c7c6:	454c      	cmp	r4, r9
    c7c8:	f300 8082 	bgt.w	c8d0 <__gethex+0x2bc>
    c7cc:	f8da 200c 	ldr.w	r2, [sl, #12]
    c7d0:	2a02      	cmp	r2, #2
    c7d2:	f000 8165 	beq.w	caa0 <__gethex+0x48c>
    c7d6:	2a03      	cmp	r2, #3
    c7d8:	f000 8181 	beq.w	cade <__gethex+0x4ca>
    c7dc:	2a01      	cmp	r2, #1
    c7de:	f000 816f 	beq.w	cac0 <__gethex+0x4ac>
    c7e2:	ee18 0a10 	vmov	r0, s16
    c7e6:	4659      	mov	r1, fp
    c7e8:	f000 fb0e 	bl	ce08 <_Bfree>
    c7ec:	2550      	movs	r5, #80	; 0x50
    c7ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c7f0:	2300      	movs	r3, #0
    c7f2:	4628      	mov	r0, r5
    c7f4:	6013      	str	r3, [r2, #0]
    c7f6:	b005      	add	sp, #20
    c7f8:	ecbd 8b02 	vpop	{d8}
    c7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c800:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c804:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    c808:	f1a2 0110 	sub.w	r1, r2, #16
    c80c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c810:	f818 2002 	ldrb.w	r2, [r8, r2]
    c814:	2a00      	cmp	r2, #0
    c816:	d0a4      	beq.n	c762 <__gethex+0x14e>
    c818:	2a19      	cmp	r2, #25
    c81a:	ddf1      	ble.n	c800 <__gethex+0x1ec>
    c81c:	e7a1      	b.n	c762 <__gethex+0x14e>
    c81e:	4949      	ldr	r1, [pc, #292]	; (c944 <__gethex+0x330>)
    c820:	9301      	str	r3, [sp, #4]
    c822:	2201      	movs	r2, #1
    c824:	4620      	mov	r0, r4
    c826:	f7ff f943 	bl	bab0 <strncmp>
    c82a:	9b01      	ldr	r3, [sp, #4]
    c82c:	2800      	cmp	r0, #0
    c82e:	d16d      	bne.n	c90c <__gethex+0x2f8>
    c830:	7861      	ldrb	r1, [r4, #1]
    c832:	f818 2001 	ldrb.w	r2, [r8, r1]
    c836:	1c65      	adds	r5, r4, #1
    c838:	2a00      	cmp	r2, #0
    c83a:	d069      	beq.n	c910 <__gethex+0x2fc>
    c83c:	2930      	cmp	r1, #48	; 0x30
    c83e:	462c      	mov	r4, r5
    c840:	d105      	bne.n	c84e <__gethex+0x23a>
    c842:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    c846:	2b30      	cmp	r3, #48	; 0x30
    c848:	d0fb      	beq.n	c842 <__gethex+0x22e>
    c84a:	f818 2003 	ldrb.w	r2, [r8, r3]
    c84e:	fab2 f782 	clz	r7, r2
    c852:	097f      	lsrs	r7, r7, #5
    c854:	2301      	movs	r3, #1
    c856:	e702      	b.n	c65e <__gethex+0x4a>
    c858:	2501      	movs	r5, #1
    c85a:	b157      	cbz	r7, c872 <__gethex+0x25e>
    c85c:	f8da 300c 	ldr.w	r3, [sl, #12]
    c860:	2b02      	cmp	r3, #2
    c862:	d05d      	beq.n	c920 <__gethex+0x30c>
    c864:	2b03      	cmp	r3, #3
    c866:	d05f      	beq.n	c928 <__gethex+0x314>
    c868:	2b01      	cmp	r3, #1
    c86a:	f000 8084 	beq.w	c976 <__gethex+0x362>
    c86e:	f045 0510 	orr.w	r5, r5, #16
    c872:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c874:	f8c3 b000 	str.w	fp, [r3]
    c878:	9b02      	ldr	r3, [sp, #8]
    c87a:	4628      	mov	r0, r5
    c87c:	f8c3 9000 	str.w	r9, [r3]
    c880:	b005      	add	sp, #20
    c882:	ecbd 8b02 	vpop	{d8}
    c886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c88a:	462e      	mov	r6, r5
    c88c:	e702      	b.n	c694 <__gethex+0x80>
    c88e:	2001      	movs	r0, #1
    c890:	78aa      	ldrb	r2, [r5, #2]
    c892:	1cae      	adds	r6, r5, #2
    c894:	e758      	b.n	c748 <__gethex+0x134>
    c896:	1b06      	subs	r6, r0, r4
    c898:	4631      	mov	r1, r6
    c89a:	4658      	mov	r0, fp
    c89c:	f000 ff96 	bl	d7cc <__any_on>
    c8a0:	4607      	mov	r7, r0
    c8a2:	b178      	cbz	r0, c8c4 <__gethex+0x2b0>
    c8a4:	1e72      	subs	r2, r6, #1
    c8a6:	1153      	asrs	r3, r2, #5
    c8a8:	9901      	ldr	r1, [sp, #4]
    c8aa:	2701      	movs	r7, #1
    c8ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    c8b0:	f002 031f 	and.w	r3, r2, #31
    c8b4:	fa07 f303 	lsl.w	r3, r7, r3
    c8b8:	420b      	tst	r3, r1
    c8ba:	d003      	beq.n	c8c4 <__gethex+0x2b0>
    c8bc:	42ba      	cmp	r2, r7
    c8be:	f300 80e2 	bgt.w	ca86 <__gethex+0x472>
    c8c2:	2702      	movs	r7, #2
    c8c4:	4631      	mov	r1, r6
    c8c6:	4658      	mov	r0, fp
    c8c8:	44b1      	add	r9, r6
    c8ca:	f7ff fe51 	bl	c570 <rshift>
    c8ce:	e76f      	b.n	c7b0 <__gethex+0x19c>
    c8d0:	f109 35ff 	add.w	r5, r9, #4294967295
    c8d4:	2f00      	cmp	r7, #0
    c8d6:	f040 80ce 	bne.w	ca76 <__gethex+0x462>
    c8da:	2d00      	cmp	r5, #0
    c8dc:	f040 80cd 	bne.w	ca7a <__gethex+0x466>
    c8e0:	116b      	asrs	r3, r5, #5
    c8e2:	9a01      	ldr	r2, [sp, #4]
    c8e4:	f005 051f 	and.w	r5, r5, #31
    c8e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c8ec:	2301      	movs	r3, #1
    c8ee:	40ab      	lsls	r3, r5
    c8f0:	4213      	tst	r3, r2
    c8f2:	4649      	mov	r1, r9
    c8f4:	4658      	mov	r0, fp
    c8f6:	bf18      	it	ne
    c8f8:	f047 0702 	orrne.w	r7, r7, #2
    c8fc:	eba4 0409 	sub.w	r4, r4, r9
    c900:	f7ff fe36 	bl	c570 <rshift>
    c904:	2502      	movs	r5, #2
    c906:	f8da 9004 	ldr.w	r9, [sl, #4]
    c90a:	e7a6      	b.n	c85a <__gethex+0x246>
    c90c:	7821      	ldrb	r1, [r4, #0]
    c90e:	4625      	mov	r5, r4
    c910:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    c914:	2950      	cmp	r1, #80	; 0x50
    c916:	f000 80bf 	beq.w	ca98 <__gethex+0x484>
    c91a:	f8cb 5000 	str.w	r5, [fp]
    c91e:	e727      	b.n	c770 <__gethex+0x15c>
    c920:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c922:	f1c3 0301 	rsb	r3, r3, #1
    c926:	9311      	str	r3, [sp, #68]	; 0x44
    c928:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c92a:	2b00      	cmp	r3, #0
    c92c:	d09f      	beq.n	c86e <__gethex+0x25a>
    c92e:	f8db 7010 	ldr.w	r7, [fp, #16]
    c932:	f8dd 8004 	ldr.w	r8, [sp, #4]
    c936:	00ba      	lsls	r2, r7, #2
    c938:	4643      	mov	r3, r8
    c93a:	9201      	str	r2, [sp, #4]
    c93c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    c940:	2100      	movs	r1, #0
    c942:	e007      	b.n	c954 <__gethex+0x340>
    c944:	20007d24 	.word	0x20007d24
    c948:	20000934 	.word	0x20000934
    c94c:	4298      	cmp	r0, r3
    c94e:	f843 1c04 	str.w	r1, [r3, #-4]
    c952:	d93f      	bls.n	c9d4 <__gethex+0x3c0>
    c954:	461e      	mov	r6, r3
    c956:	f853 2b04 	ldr.w	r2, [r3], #4
    c95a:	f1b2 3fff 	cmp.w	r2, #4294967295
    c95e:	d0f5      	beq.n	c94c <__gethex+0x338>
    c960:	3201      	adds	r2, #1
    c962:	2d02      	cmp	r5, #2
    c964:	6032      	str	r2, [r6, #0]
    c966:	f000 80bf 	beq.w	cae8 <__gethex+0x4d4>
    c96a:	f014 041f 	ands.w	r4, r4, #31
    c96e:	f040 80e7 	bne.w	cb40 <__gethex+0x52c>
    c972:	2521      	movs	r5, #33	; 0x21
    c974:	e77d      	b.n	c872 <__gethex+0x25e>
    c976:	07ba      	lsls	r2, r7, #30
    c978:	f57f af79 	bpl.w	c86e <__gethex+0x25a>
    c97c:	9b01      	ldr	r3, [sp, #4]
    c97e:	681b      	ldr	r3, [r3, #0]
    c980:	431f      	orrs	r7, r3
    c982:	07fb      	lsls	r3, r7, #31
    c984:	d4d3      	bmi.n	c92e <__gethex+0x31a>
    c986:	e772      	b.n	c86e <__gethex+0x25a>
    c988:	2000      	movs	r0, #0
    c98a:	e781      	b.n	c890 <__gethex+0x27c>
    c98c:	1a22      	subs	r2, r4, r0
    c98e:	4659      	mov	r1, fp
    c990:	ee18 0a10 	vmov	r0, s16
    c994:	eba9 0902 	sub.w	r9, r9, r2
    c998:	f000 fc76 	bl	d288 <__lshift>
    c99c:	f100 0314 	add.w	r3, r0, #20
    c9a0:	4683      	mov	fp, r0
    c9a2:	9301      	str	r3, [sp, #4]
    c9a4:	2700      	movs	r7, #0
    c9a6:	e703      	b.n	c7b0 <__gethex+0x19c>
    c9a8:	7872      	ldrb	r2, [r6, #1]
    c9aa:	f818 0002 	ldrb.w	r0, [r8, r2]
    c9ae:	1c71      	adds	r1, r6, #1
    c9b0:	2800      	cmp	r0, #0
    c9b2:	f000 80a0 	beq.w	caf6 <__gethex+0x4e2>
    c9b6:	460d      	mov	r5, r1
    c9b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    c9bc:	f818 0002 	ldrb.w	r0, [r8, r2]
    c9c0:	2800      	cmp	r0, #0
    c9c2:	d1f8      	bne.n	c9b6 <__gethex+0x3a2>
    c9c4:	1b75      	subs	r5, r6, r5
    c9c6:	ea4f 0985 	mov.w	r9, r5, lsl #2
    c9ca:	460e      	mov	r6, r1
    c9cc:	e65d      	b.n	c68a <__gethex+0x76>
    c9ce:	3402      	adds	r4, #2
    c9d0:	2300      	movs	r3, #0
    c9d2:	e638      	b.n	c646 <__gethex+0x32>
    c9d4:	f8db 3008 	ldr.w	r3, [fp, #8]
    c9d8:	429f      	cmp	r7, r3
    c9da:	f280 808e 	bge.w	cafa <__gethex+0x4e6>
    c9de:	463b      	mov	r3, r7
    c9e0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    c9e4:	2101      	movs	r1, #1
    c9e6:	3301      	adds	r3, #1
    c9e8:	2d02      	cmp	r5, #2
    c9ea:	f8cb 3010 	str.w	r3, [fp, #16]
    c9ee:	6151      	str	r1, [r2, #20]
    c9f0:	d07a      	beq.n	cae8 <__gethex+0x4d4>
    c9f2:	429f      	cmp	r7, r3
    c9f4:	dab9      	bge.n	c96a <__gethex+0x356>
    c9f6:	2b00      	cmp	r3, #0
    c9f8:	f340 809b 	ble.w	cb32 <__gethex+0x51e>
    c9fc:	f8db 2014 	ldr.w	r2, [fp, #20]
    ca00:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    ca04:	f10b 0018 	add.w	r0, fp, #24
    ca08:	4283      	cmp	r3, r0
    ca0a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    ca0e:	f240 80b1 	bls.w	cb74 <__gethex+0x560>
    ca12:	4644      	mov	r4, r8
    ca14:	6801      	ldr	r1, [r0, #0]
    ca16:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    ca1a:	f844 2b04 	str.w	r2, [r4], #4
    ca1e:	f850 2b04 	ldr.w	r2, [r0], #4
    ca22:	4283      	cmp	r3, r0
    ca24:	ea4f 0252 	mov.w	r2, r2, lsr #1
    ca28:	d8f4      	bhi.n	ca14 <__gethex+0x400>
    ca2a:	eba3 030b 	sub.w	r3, r3, fp
    ca2e:	3b19      	subs	r3, #25
    ca30:	089b      	lsrs	r3, r3, #2
    ca32:	3301      	adds	r3, #1
    ca34:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    ca38:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    ca3c:	2a00      	cmp	r2, #0
    ca3e:	f040 809d 	bne.w	cb7c <__gethex+0x568>
    ca42:	eba3 0208 	sub.w	r2, r3, r8
    ca46:	1092      	asrs	r2, r2, #2
    ca48:	4543      	cmp	r3, r8
    ca4a:	f8cb 2010 	str.w	r2, [fp, #16]
    ca4e:	d073      	beq.n	cb38 <__gethex+0x524>
    ca50:	f8da 3008 	ldr.w	r3, [sl, #8]
    ca54:	f109 0901 	add.w	r9, r9, #1
    ca58:	454b      	cmp	r3, r9
    ca5a:	da8a      	bge.n	c972 <__gethex+0x35e>
    ca5c:	ee18 0a10 	vmov	r0, s16
    ca60:	4659      	mov	r1, fp
    ca62:	f000 f9d1 	bl	ce08 <_Bfree>
    ca66:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ca68:	2300      	movs	r3, #0
    ca6a:	6013      	str	r3, [r2, #0]
    ca6c:	25a3      	movs	r5, #163	; 0xa3
    ca6e:	e683      	b.n	c778 <__gethex+0x164>
    ca70:	9e01      	ldr	r6, [sp, #4]
    ca72:	2300      	movs	r3, #0
    ca74:	e689      	b.n	c78a <__gethex+0x176>
    ca76:	2701      	movs	r7, #1
    ca78:	e732      	b.n	c8e0 <__gethex+0x2cc>
    ca7a:	4629      	mov	r1, r5
    ca7c:	4658      	mov	r0, fp
    ca7e:	f000 fea5 	bl	d7cc <__any_on>
    ca82:	4607      	mov	r7, r0
    ca84:	e72c      	b.n	c8e0 <__gethex+0x2cc>
    ca86:	1eb1      	subs	r1, r6, #2
    ca88:	4658      	mov	r0, fp
    ca8a:	f000 fe9f 	bl	d7cc <__any_on>
    ca8e:	2800      	cmp	r0, #0
    ca90:	f43f af17 	beq.w	c8c2 <__gethex+0x2ae>
    ca94:	2703      	movs	r7, #3
    ca96:	e715      	b.n	c8c4 <__gethex+0x2b0>
    ca98:	f04f 0900 	mov.w	r9, #0
    ca9c:	2701      	movs	r7, #1
    ca9e:	e64a      	b.n	c736 <__gethex+0x122>
    caa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    caa2:	2a00      	cmp	r2, #0
    caa4:	f47f ae9d 	bne.w	c7e2 <__gethex+0x1ce>
    caa8:	9902      	ldr	r1, [sp, #8]
    caaa:	600b      	str	r3, [r1, #0]
    caac:	9b01      	ldr	r3, [sp, #4]
    caae:	2201      	movs	r2, #1
    cab0:	f8cb 2010 	str.w	r2, [fp, #16]
    cab4:	601a      	str	r2, [r3, #0]
    cab6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cab8:	2562      	movs	r5, #98	; 0x62
    caba:	f8c3 b000 	str.w	fp, [r3]
    cabe:	e65b      	b.n	c778 <__gethex+0x164>
    cac0:	454c      	cmp	r4, r9
    cac2:	f47f ae8e 	bne.w	c7e2 <__gethex+0x1ce>
    cac6:	2c01      	cmp	r4, #1
    cac8:	d0ee      	beq.n	caa8 <__gethex+0x494>
    caca:	1e61      	subs	r1, r4, #1
    cacc:	4658      	mov	r0, fp
    cace:	f000 fe7d 	bl	d7cc <__any_on>
    cad2:	2800      	cmp	r0, #0
    cad4:	f43f ae85 	beq.w	c7e2 <__gethex+0x1ce>
    cad8:	f8da 3004 	ldr.w	r3, [sl, #4]
    cadc:	e7e4      	b.n	caa8 <__gethex+0x494>
    cade:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cae0:	2a00      	cmp	r2, #0
    cae2:	f43f ae7e 	beq.w	c7e2 <__gethex+0x1ce>
    cae6:	e7df      	b.n	caa8 <__gethex+0x494>
    cae8:	f8da 3000 	ldr.w	r3, [sl]
    caec:	3b01      	subs	r3, #1
    caee:	42a3      	cmp	r3, r4
    caf0:	d034      	beq.n	cb5c <__gethex+0x548>
    caf2:	2522      	movs	r5, #34	; 0x22
    caf4:	e6bd      	b.n	c872 <__gethex+0x25e>
    caf6:	460e      	mov	r6, r1
    caf8:	e5c7      	b.n	c68a <__gethex+0x76>
    cafa:	f8db 1004 	ldr.w	r1, [fp, #4]
    cafe:	ee18 0a10 	vmov	r0, s16
    cb02:	3101      	adds	r1, #1
    cb04:	f000 f95a 	bl	cdbc <_Balloc>
    cb08:	4606      	mov	r6, r0
    cb0a:	b3c8      	cbz	r0, cb80 <__gethex+0x56c>
    cb0c:	f8db 3010 	ldr.w	r3, [fp, #16]
    cb10:	3302      	adds	r3, #2
    cb12:	009a      	lsls	r2, r3, #2
    cb14:	f10b 010c 	add.w	r1, fp, #12
    cb18:	300c      	adds	r0, #12
    cb1a:	f7fb faab 	bl	8074 <memcpy>
    cb1e:	4659      	mov	r1, fp
    cb20:	ee18 0a10 	vmov	r0, s16
    cb24:	f000 f970 	bl	ce08 <_Bfree>
    cb28:	f106 0814 	add.w	r8, r6, #20
    cb2c:	6933      	ldr	r3, [r6, #16]
    cb2e:	46b3      	mov	fp, r6
    cb30:	e756      	b.n	c9e0 <__gethex+0x3cc>
    cb32:	2300      	movs	r3, #0
    cb34:	f8cb 3010 	str.w	r3, [fp, #16]
    cb38:	2300      	movs	r3, #0
    cb3a:	f8cb 3014 	str.w	r3, [fp, #20]
    cb3e:	e787      	b.n	ca50 <__gethex+0x43c>
    cb40:	9b01      	ldr	r3, [sp, #4]
    cb42:	4443      	add	r3, r8
    cb44:	f1c4 0420 	rsb	r4, r4, #32
    cb48:	f853 0c04 	ldr.w	r0, [r3, #-4]
    cb4c:	f000 fa10 	bl	cf70 <__hi0bits>
    cb50:	42a0      	cmp	r0, r4
    cb52:	f6bf af0e 	bge.w	c972 <__gethex+0x35e>
    cb56:	f8db 3010 	ldr.w	r3, [fp, #16]
    cb5a:	e74c      	b.n	c9f6 <__gethex+0x3e2>
    cb5c:	1163      	asrs	r3, r4, #5
    cb5e:	f004 041f 	and.w	r4, r4, #31
    cb62:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    cb66:	2301      	movs	r3, #1
    cb68:	40a3      	lsls	r3, r4
    cb6a:	4213      	tst	r3, r2
    cb6c:	bf0c      	ite	eq
    cb6e:	2522      	moveq	r5, #34	; 0x22
    cb70:	2521      	movne	r5, #33	; 0x21
    cb72:	e67e      	b.n	c872 <__gethex+0x25e>
    cb74:	f8c8 2000 	str.w	r2, [r8]
    cb78:	4643      	mov	r3, r8
    cb7a:	b16a      	cbz	r2, cb98 <__gethex+0x584>
    cb7c:	3304      	adds	r3, #4
    cb7e:	e760      	b.n	ca42 <__gethex+0x42e>
    cb80:	4b07      	ldr	r3, [pc, #28]	; (cba0 <__gethex+0x58c>)
    cb82:	4808      	ldr	r0, [pc, #32]	; (cba4 <__gethex+0x590>)
    cb84:	4632      	mov	r2, r6
    cb86:	2184      	movs	r1, #132	; 0x84
    cb88:	f004 fa0a 	bl	10fa0 <__assert_func>
    cb8c:	4b04      	ldr	r3, [pc, #16]	; (cba0 <__gethex+0x58c>)
    cb8e:	4805      	ldr	r0, [pc, #20]	; (cba4 <__gethex+0x590>)
    cb90:	465a      	mov	r2, fp
    cb92:	21e4      	movs	r1, #228	; 0xe4
    cb94:	f004 fa04 	bl	10fa0 <__assert_func>
    cb98:	f8cb 2010 	str.w	r2, [fp, #16]
    cb9c:	e7cc      	b.n	cb38 <__gethex+0x524>
    cb9e:	bf00      	nop
    cba0:	200008bc 	.word	0x200008bc
    cba4:	200008d0 	.word	0x200008d0

0000cba8 <__match>:
    cba8:	b410      	push	{r4}
    cbaa:	6804      	ldr	r4, [r0, #0]
    cbac:	e009      	b.n	cbc2 <__match+0x1a>
    cbae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    cbb2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    cbb6:	f1bc 0f19 	cmp.w	ip, #25
    cbba:	bf98      	it	ls
    cbbc:	3320      	addls	r3, #32
    cbbe:	4293      	cmp	r3, r2
    cbc0:	d109      	bne.n	cbd6 <__match+0x2e>
    cbc2:	f811 2b01 	ldrb.w	r2, [r1], #1
    cbc6:	2a00      	cmp	r2, #0
    cbc8:	d1f1      	bne.n	cbae <__match+0x6>
    cbca:	3401      	adds	r4, #1
    cbcc:	6004      	str	r4, [r0, #0]
    cbce:	2001      	movs	r0, #1
    cbd0:	f85d 4b04 	ldr.w	r4, [sp], #4
    cbd4:	4770      	bx	lr
    cbd6:	2000      	movs	r0, #0
    cbd8:	f85d 4b04 	ldr.w	r4, [sp], #4
    cbdc:	4770      	bx	lr
    cbde:	bf00      	nop

0000cbe0 <__hexnan>:
    cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbe4:	6809      	ldr	r1, [r1, #0]
    cbe6:	b085      	sub	sp, #20
    cbe8:	114b      	asrs	r3, r1, #5
    cbea:	f011 011f 	ands.w	r1, r1, #31
    cbee:	9002      	str	r0, [sp, #8]
    cbf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cbf4:	9103      	str	r1, [sp, #12]
    cbf6:	f040 808f 	bne.w	cd18 <__hexnan+0x138>
    cbfa:	1f1d      	subs	r5, r3, #4
    cbfc:	9301      	str	r3, [sp, #4]
    cbfe:	9b02      	ldr	r3, [sp, #8]
    cc00:	9901      	ldr	r1, [sp, #4]
    cc02:	681c      	ldr	r4, [r3, #0]
    cc04:	2300      	movs	r3, #0
    cc06:	f841 3c04 	str.w	r3, [r1, #-4]
    cc0a:	7861      	ldrb	r1, [r4, #1]
    cc0c:	3401      	adds	r4, #1
    cc0e:	2900      	cmp	r1, #0
    cc10:	f000 8098 	beq.w	cd44 <__hexnan+0x164>
    cc14:	f8df 9174 	ldr.w	r9, [pc, #372]	; cd8c <__hexnan+0x1ac>
    cc18:	46a8      	mov	r8, r5
    cc1a:	46ac      	mov	ip, r5
    cc1c:	469a      	mov	sl, r3
    cc1e:	461e      	mov	r6, r3
    cc20:	e00e      	b.n	cc40 <__hexnan+0x60>
    cc22:	2920      	cmp	r1, #32
    cc24:	f200 808c 	bhi.w	cd40 <__hexnan+0x160>
    cc28:	4556      	cmp	r6, sl
    cc2a:	dd06      	ble.n	cc3a <__hexnan+0x5a>
    cc2c:	45c4      	cmp	ip, r8
    cc2e:	d201      	bcs.n	cc34 <__hexnan+0x54>
    cc30:	2b07      	cmp	r3, #7
    cc32:	dd5b      	ble.n	ccec <__hexnan+0x10c>
    cc34:	4562      	cmp	r2, ip
    cc36:	d351      	bcc.n	ccdc <__hexnan+0xfc>
    cc38:	2308      	movs	r3, #8
    cc3a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    cc3e:	b1a1      	cbz	r1, cc6a <__hexnan+0x8a>
    cc40:	f819 0001 	ldrb.w	r0, [r9, r1]
    cc44:	2800      	cmp	r0, #0
    cc46:	d0ec      	beq.n	cc22 <__hexnan+0x42>
    cc48:	3301      	adds	r3, #1
    cc4a:	2b08      	cmp	r3, #8
    cc4c:	f106 0601 	add.w	r6, r6, #1
    cc50:	dc3a      	bgt.n	ccc8 <__hexnan+0xe8>
    cc52:	f8dc 1000 	ldr.w	r1, [ip]
    cc56:	0109      	lsls	r1, r1, #4
    cc58:	f000 000f 	and.w	r0, r0, #15
    cc5c:	4308      	orrs	r0, r1
    cc5e:	f8cc 0000 	str.w	r0, [ip]
    cc62:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    cc66:	2900      	cmp	r1, #0
    cc68:	d1ea      	bne.n	cc40 <__hexnan+0x60>
    cc6a:	2e00      	cmp	r6, #0
    cc6c:	d06a      	beq.n	cd44 <__hexnan+0x164>
    cc6e:	45c4      	cmp	ip, r8
    cc70:	d201      	bcs.n	cc76 <__hexnan+0x96>
    cc72:	2b07      	cmp	r3, #7
    cc74:	dd74      	ble.n	cd60 <__hexnan+0x180>
    cc76:	4562      	cmp	r2, ip
    cc78:	d252      	bcs.n	cd20 <__hexnan+0x140>
    cc7a:	1f11      	subs	r1, r2, #4
    cc7c:	4663      	mov	r3, ip
    cc7e:	f853 0b04 	ldr.w	r0, [r3], #4
    cc82:	f841 0f04 	str.w	r0, [r1, #4]!
    cc86:	42ab      	cmp	r3, r5
    cc88:	d9f9      	bls.n	cc7e <__hexnan+0x9e>
    cc8a:	eba5 030c 	sub.w	r3, r5, ip
    cc8e:	f023 0303 	bic.w	r3, r3, #3
    cc92:	1c69      	adds	r1, r5, #1
    cc94:	3304      	adds	r3, #4
    cc96:	f10c 0c01 	add.w	ip, ip, #1
    cc9a:	4561      	cmp	r1, ip
    cc9c:	bf38      	it	cc
    cc9e:	2304      	movcc	r3, #4
    cca0:	4413      	add	r3, r2
    cca2:	2100      	movs	r1, #0
    cca4:	f843 1b04 	str.w	r1, [r3], #4
    cca8:	42ab      	cmp	r3, r5
    ccaa:	d9fb      	bls.n	cca4 <__hexnan+0xc4>
    ccac:	9b01      	ldr	r3, [sp, #4]
    ccae:	f853 3c04 	ldr.w	r3, [r3, #-4]
    ccb2:	b92b      	cbnz	r3, ccc0 <__hexnan+0xe0>
    ccb4:	42aa      	cmp	r2, r5
    ccb6:	d049      	beq.n	cd4c <__hexnan+0x16c>
    ccb8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    ccbc:	2b00      	cmp	r3, #0
    ccbe:	d0f9      	beq.n	ccb4 <__hexnan+0xd4>
    ccc0:	2005      	movs	r0, #5
    ccc2:	b005      	add	sp, #20
    ccc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ccc8:	4562      	cmp	r2, ip
    ccca:	d2b6      	bcs.n	cc3a <__hexnan+0x5a>
    cccc:	2300      	movs	r3, #0
    ccce:	f84c 3c04 	str.w	r3, [ip, #-4]
    ccd2:	4619      	mov	r1, r3
    ccd4:	f1ac 0c04 	sub.w	ip, ip, #4
    ccd8:	2301      	movs	r3, #1
    ccda:	e7bd      	b.n	cc58 <__hexnan+0x78>
    ccdc:	2300      	movs	r3, #0
    ccde:	f1ac 0804 	sub.w	r8, ip, #4
    cce2:	f84c 3c04 	str.w	r3, [ip, #-4]
    cce6:	46b2      	mov	sl, r6
    cce8:	46c4      	mov	ip, r8
    ccea:	e7a6      	b.n	cc3a <__hexnan+0x5a>
    ccec:	f1c3 0108 	rsb	r1, r3, #8
    ccf0:	f8dc 3000 	ldr.w	r3, [ip]
    ccf4:	0089      	lsls	r1, r1, #2
    ccf6:	f1c1 0e20 	rsb	lr, r1, #32
    ccfa:	4660      	mov	r0, ip
    ccfc:	469b      	mov	fp, r3
    ccfe:	6847      	ldr	r7, [r0, #4]
    cd00:	fa07 f30e 	lsl.w	r3, r7, lr
    cd04:	ea43 030b 	orr.w	r3, r3, fp
    cd08:	fa27 fb01 	lsr.w	fp, r7, r1
    cd0c:	6003      	str	r3, [r0, #0]
    cd0e:	f840 bf04 	str.w	fp, [r0, #4]!
    cd12:	4540      	cmp	r0, r8
    cd14:	d3f3      	bcc.n	ccfe <__hexnan+0x11e>
    cd16:	e78d      	b.n	cc34 <__hexnan+0x54>
    cd18:	1d19      	adds	r1, r3, #4
    cd1a:	9101      	str	r1, [sp, #4]
    cd1c:	461d      	mov	r5, r3
    cd1e:	e76e      	b.n	cbfe <__hexnan+0x1e>
    cd20:	9b03      	ldr	r3, [sp, #12]
    cd22:	2b00      	cmp	r3, #0
    cd24:	d0c2      	beq.n	ccac <__hexnan+0xcc>
    cd26:	9b03      	ldr	r3, [sp, #12]
    cd28:	9801      	ldr	r0, [sp, #4]
    cd2a:	f1c3 0120 	rsb	r1, r3, #32
    cd2e:	f04f 33ff 	mov.w	r3, #4294967295
    cd32:	40cb      	lsrs	r3, r1
    cd34:	f850 1c04 	ldr.w	r1, [r0, #-4]
    cd38:	400b      	ands	r3, r1
    cd3a:	f840 3c04 	str.w	r3, [r0, #-4]
    cd3e:	e7b8      	b.n	ccb2 <__hexnan+0xd2>
    cd40:	2929      	cmp	r1, #41	; 0x29
    cd42:	d009      	beq.n	cd58 <__hexnan+0x178>
    cd44:	2004      	movs	r0, #4
    cd46:	b005      	add	sp, #20
    cd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd4c:	2301      	movs	r3, #1
    cd4e:	2005      	movs	r0, #5
    cd50:	602b      	str	r3, [r5, #0]
    cd52:	b005      	add	sp, #20
    cd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd58:	9902      	ldr	r1, [sp, #8]
    cd5a:	3401      	adds	r4, #1
    cd5c:	600c      	str	r4, [r1, #0]
    cd5e:	e784      	b.n	cc6a <__hexnan+0x8a>
    cd60:	f8dc 1000 	ldr.w	r1, [ip]
    cd64:	f1c3 0308 	rsb	r3, r3, #8
    cd68:	009b      	lsls	r3, r3, #2
    cd6a:	f1c3 0720 	rsb	r7, r3, #32
    cd6e:	4664      	mov	r4, ip
    cd70:	4608      	mov	r0, r1
    cd72:	6866      	ldr	r6, [r4, #4]
    cd74:	fa06 f107 	lsl.w	r1, r6, r7
    cd78:	4301      	orrs	r1, r0
    cd7a:	fa26 f003 	lsr.w	r0, r6, r3
    cd7e:	6021      	str	r1, [r4, #0]
    cd80:	f844 0f04 	str.w	r0, [r4, #4]!
    cd84:	4544      	cmp	r4, r8
    cd86:	d3f4      	bcc.n	cd72 <__hexnan+0x192>
    cd88:	e775      	b.n	cc76 <__hexnan+0x96>
    cd8a:	bf00      	nop
    cd8c:	20000934 	.word	0x20000934

0000cd90 <__ascii_mbtowc>:
    cd90:	b082      	sub	sp, #8
    cd92:	b149      	cbz	r1, cda8 <__ascii_mbtowc+0x18>
    cd94:	b15a      	cbz	r2, cdae <__ascii_mbtowc+0x1e>
    cd96:	b16b      	cbz	r3, cdb4 <__ascii_mbtowc+0x24>
    cd98:	7813      	ldrb	r3, [r2, #0]
    cd9a:	600b      	str	r3, [r1, #0]
    cd9c:	7812      	ldrb	r2, [r2, #0]
    cd9e:	1e10      	subs	r0, r2, #0
    cda0:	bf18      	it	ne
    cda2:	2001      	movne	r0, #1
    cda4:	b002      	add	sp, #8
    cda6:	4770      	bx	lr
    cda8:	a901      	add	r1, sp, #4
    cdaa:	2a00      	cmp	r2, #0
    cdac:	d1f3      	bne.n	cd96 <__ascii_mbtowc+0x6>
    cdae:	4610      	mov	r0, r2
    cdb0:	b002      	add	sp, #8
    cdb2:	4770      	bx	lr
    cdb4:	f06f 0001 	mvn.w	r0, #1
    cdb8:	e7f4      	b.n	cda4 <__ascii_mbtowc+0x14>
    cdba:	bf00      	nop

0000cdbc <_Balloc>:
    cdbc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cdbe:	b570      	push	{r4, r5, r6, lr}
    cdc0:	4605      	mov	r5, r0
    cdc2:	460c      	mov	r4, r1
    cdc4:	b14b      	cbz	r3, cdda <_Balloc+0x1e>
    cdc6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    cdca:	b180      	cbz	r0, cdee <_Balloc+0x32>
    cdcc:	6802      	ldr	r2, [r0, #0]
    cdce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    cdd2:	2300      	movs	r3, #0
    cdd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
    cdd8:	bd70      	pop	{r4, r5, r6, pc}
    cdda:	2221      	movs	r2, #33	; 0x21
    cddc:	2104      	movs	r1, #4
    cdde:	f004 f8ff 	bl	10fe0 <_calloc_r>
    cde2:	4603      	mov	r3, r0
    cde4:	6468      	str	r0, [r5, #68]	; 0x44
    cde6:	2800      	cmp	r0, #0
    cde8:	d1ed      	bne.n	cdc6 <_Balloc+0xa>
    cdea:	2000      	movs	r0, #0
    cdec:	bd70      	pop	{r4, r5, r6, pc}
    cdee:	2101      	movs	r1, #1
    cdf0:	fa01 f604 	lsl.w	r6, r1, r4
    cdf4:	1d72      	adds	r2, r6, #5
    cdf6:	0092      	lsls	r2, r2, #2
    cdf8:	4628      	mov	r0, r5
    cdfa:	f004 f8f1 	bl	10fe0 <_calloc_r>
    cdfe:	2800      	cmp	r0, #0
    ce00:	d0f3      	beq.n	cdea <_Balloc+0x2e>
    ce02:	e9c0 4601 	strd	r4, r6, [r0, #4]
    ce06:	e7e4      	b.n	cdd2 <_Balloc+0x16>

0000ce08 <_Bfree>:
    ce08:	b131      	cbz	r1, ce18 <_Bfree+0x10>
    ce0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ce0c:	684a      	ldr	r2, [r1, #4]
    ce0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ce12:	6008      	str	r0, [r1, #0]
    ce14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ce18:	4770      	bx	lr
    ce1a:	bf00      	nop

0000ce1c <__multadd>:
    ce1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce20:	690e      	ldr	r6, [r1, #16]
    ce22:	4680      	mov	r8, r0
    ce24:	460f      	mov	r7, r1
    ce26:	461d      	mov	r5, r3
    ce28:	f101 0e14 	add.w	lr, r1, #20
    ce2c:	2000      	movs	r0, #0
    ce2e:	f8de 1000 	ldr.w	r1, [lr]
    ce32:	b28c      	uxth	r4, r1
    ce34:	fb02 5304 	mla	r3, r2, r4, r5
    ce38:	0c09      	lsrs	r1, r1, #16
    ce3a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    ce3e:	fb02 cc01 	mla	ip, r2, r1, ip
    ce42:	3001      	adds	r0, #1
    ce44:	b29c      	uxth	r4, r3
    ce46:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    ce4a:	4286      	cmp	r6, r0
    ce4c:	f84e 4b04 	str.w	r4, [lr], #4
    ce50:	ea4f 451c 	mov.w	r5, ip, lsr #16
    ce54:	dceb      	bgt.n	ce2e <__multadd+0x12>
    ce56:	b13d      	cbz	r5, ce68 <__multadd+0x4c>
    ce58:	68bb      	ldr	r3, [r7, #8]
    ce5a:	42b3      	cmp	r3, r6
    ce5c:	dd07      	ble.n	ce6e <__multadd+0x52>
    ce5e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    ce62:	3601      	adds	r6, #1
    ce64:	615d      	str	r5, [r3, #20]
    ce66:	613e      	str	r6, [r7, #16]
    ce68:	4638      	mov	r0, r7
    ce6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce6e:	6879      	ldr	r1, [r7, #4]
    ce70:	4640      	mov	r0, r8
    ce72:	3101      	adds	r1, #1
    ce74:	f7ff ffa2 	bl	cdbc <_Balloc>
    ce78:	4604      	mov	r4, r0
    ce7a:	b1b0      	cbz	r0, ceaa <__multadd+0x8e>
    ce7c:	693a      	ldr	r2, [r7, #16]
    ce7e:	3202      	adds	r2, #2
    ce80:	f107 010c 	add.w	r1, r7, #12
    ce84:	0092      	lsls	r2, r2, #2
    ce86:	300c      	adds	r0, #12
    ce88:	f7fb f8f4 	bl	8074 <memcpy>
    ce8c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    ce90:	687a      	ldr	r2, [r7, #4]
    ce92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ce96:	6039      	str	r1, [r7, #0]
    ce98:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ce9c:	4627      	mov	r7, r4
    ce9e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    cea2:	3601      	adds	r6, #1
    cea4:	615d      	str	r5, [r3, #20]
    cea6:	613e      	str	r6, [r7, #16]
    cea8:	e7de      	b.n	ce68 <__multadd+0x4c>
    ceaa:	4b03      	ldr	r3, [pc, #12]	; (ceb8 <__multadd+0x9c>)
    ceac:	4803      	ldr	r0, [pc, #12]	; (cebc <__multadd+0xa0>)
    ceae:	4622      	mov	r2, r4
    ceb0:	21ba      	movs	r1, #186	; 0xba
    ceb2:	f004 f875 	bl	10fa0 <__assert_func>
    ceb6:	bf00      	nop
    ceb8:	200008bc 	.word	0x200008bc
    cebc:	20000a34 	.word	0x20000a34

0000cec0 <__s2b>:
    cec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cec4:	4617      	mov	r7, r2
    cec6:	4a27      	ldr	r2, [pc, #156]	; (cf64 <__s2b+0xa4>)
    cec8:	461e      	mov	r6, r3
    ceca:	3308      	adds	r3, #8
    cecc:	460c      	mov	r4, r1
    cece:	2e09      	cmp	r6, #9
    ced0:	fb82 1203 	smull	r1, r2, r2, r3
    ced4:	ea4f 73e3 	mov.w	r3, r3, asr #31
    ced8:	4605      	mov	r5, r0
    ceda:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    cede:	dd39      	ble.n	cf54 <__s2b+0x94>
    cee0:	f04f 0c01 	mov.w	ip, #1
    cee4:	2100      	movs	r1, #0
    cee6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    ceea:	4563      	cmp	r3, ip
    ceec:	f101 0101 	add.w	r1, r1, #1
    cef0:	dcf9      	bgt.n	cee6 <__s2b+0x26>
    cef2:	4628      	mov	r0, r5
    cef4:	f7ff ff62 	bl	cdbc <_Balloc>
    cef8:	4601      	mov	r1, r0
    cefa:	b368      	cbz	r0, cf58 <__s2b+0x98>
    cefc:	9b08      	ldr	r3, [sp, #32]
    cefe:	6143      	str	r3, [r0, #20]
    cf00:	2f09      	cmp	r7, #9
    cf02:	f04f 0301 	mov.w	r3, #1
    cf06:	6103      	str	r3, [r0, #16]
    cf08:	dc12      	bgt.n	cf30 <__s2b+0x70>
    cf0a:	340a      	adds	r4, #10
    cf0c:	2709      	movs	r7, #9
    cf0e:	42be      	cmp	r6, r7
    cf10:	dd0b      	ble.n	cf2a <__s2b+0x6a>
    cf12:	1bf2      	subs	r2, r6, r7
    cf14:	18a6      	adds	r6, r4, r2
    cf16:	f814 3b01 	ldrb.w	r3, [r4], #1
    cf1a:	220a      	movs	r2, #10
    cf1c:	3b30      	subs	r3, #48	; 0x30
    cf1e:	4628      	mov	r0, r5
    cf20:	f7ff ff7c 	bl	ce1c <__multadd>
    cf24:	42a6      	cmp	r6, r4
    cf26:	4601      	mov	r1, r0
    cf28:	d1f5      	bne.n	cf16 <__s2b+0x56>
    cf2a:	4608      	mov	r0, r1
    cf2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cf30:	f104 0909 	add.w	r9, r4, #9
    cf34:	46c8      	mov	r8, r9
    cf36:	443c      	add	r4, r7
    cf38:	f818 3b01 	ldrb.w	r3, [r8], #1
    cf3c:	220a      	movs	r2, #10
    cf3e:	3b30      	subs	r3, #48	; 0x30
    cf40:	4628      	mov	r0, r5
    cf42:	f7ff ff6b 	bl	ce1c <__multadd>
    cf46:	45a0      	cmp	r8, r4
    cf48:	4601      	mov	r1, r0
    cf4a:	d1f5      	bne.n	cf38 <__s2b+0x78>
    cf4c:	f1a7 0408 	sub.w	r4, r7, #8
    cf50:	444c      	add	r4, r9
    cf52:	e7dc      	b.n	cf0e <__s2b+0x4e>
    cf54:	2100      	movs	r1, #0
    cf56:	e7cc      	b.n	cef2 <__s2b+0x32>
    cf58:	460a      	mov	r2, r1
    cf5a:	4b03      	ldr	r3, [pc, #12]	; (cf68 <__s2b+0xa8>)
    cf5c:	4803      	ldr	r0, [pc, #12]	; (cf6c <__s2b+0xac>)
    cf5e:	21d3      	movs	r1, #211	; 0xd3
    cf60:	f004 f81e 	bl	10fa0 <__assert_func>
    cf64:	38e38e39 	.word	0x38e38e39
    cf68:	200008bc 	.word	0x200008bc
    cf6c:	20000a34 	.word	0x20000a34

0000cf70 <__hi0bits>:
    cf70:	0c03      	lsrs	r3, r0, #16
    cf72:	041b      	lsls	r3, r3, #16
    cf74:	b9d3      	cbnz	r3, cfac <__hi0bits+0x3c>
    cf76:	0400      	lsls	r0, r0, #16
    cf78:	2310      	movs	r3, #16
    cf7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    cf7e:	bf04      	itt	eq
    cf80:	0200      	lsleq	r0, r0, #8
    cf82:	3308      	addeq	r3, #8
    cf84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    cf88:	bf04      	itt	eq
    cf8a:	0100      	lsleq	r0, r0, #4
    cf8c:	3304      	addeq	r3, #4
    cf8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    cf92:	bf04      	itt	eq
    cf94:	0080      	lsleq	r0, r0, #2
    cf96:	3302      	addeq	r3, #2
    cf98:	2800      	cmp	r0, #0
    cf9a:	db05      	blt.n	cfa8 <__hi0bits+0x38>
    cf9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    cfa0:	f103 0301 	add.w	r3, r3, #1
    cfa4:	bf08      	it	eq
    cfa6:	2320      	moveq	r3, #32
    cfa8:	4618      	mov	r0, r3
    cfaa:	4770      	bx	lr
    cfac:	2300      	movs	r3, #0
    cfae:	e7e4      	b.n	cf7a <__hi0bits+0xa>

0000cfb0 <__lo0bits>:
    cfb0:	6803      	ldr	r3, [r0, #0]
    cfb2:	f013 0207 	ands.w	r2, r3, #7
    cfb6:	d008      	beq.n	cfca <__lo0bits+0x1a>
    cfb8:	07d9      	lsls	r1, r3, #31
    cfba:	d41f      	bmi.n	cffc <__lo0bits+0x4c>
    cfbc:	079a      	lsls	r2, r3, #30
    cfbe:	d522      	bpl.n	d006 <__lo0bits+0x56>
    cfc0:	085b      	lsrs	r3, r3, #1
    cfc2:	6003      	str	r3, [r0, #0]
    cfc4:	2201      	movs	r2, #1
    cfc6:	4610      	mov	r0, r2
    cfc8:	4770      	bx	lr
    cfca:	b299      	uxth	r1, r3
    cfcc:	b909      	cbnz	r1, cfd2 <__lo0bits+0x22>
    cfce:	0c1b      	lsrs	r3, r3, #16
    cfd0:	2210      	movs	r2, #16
    cfd2:	b2d9      	uxtb	r1, r3
    cfd4:	b909      	cbnz	r1, cfda <__lo0bits+0x2a>
    cfd6:	3208      	adds	r2, #8
    cfd8:	0a1b      	lsrs	r3, r3, #8
    cfda:	0719      	lsls	r1, r3, #28
    cfdc:	bf04      	itt	eq
    cfde:	091b      	lsreq	r3, r3, #4
    cfe0:	3204      	addeq	r2, #4
    cfe2:	0799      	lsls	r1, r3, #30
    cfe4:	bf04      	itt	eq
    cfe6:	089b      	lsreq	r3, r3, #2
    cfe8:	3202      	addeq	r2, #2
    cfea:	07d9      	lsls	r1, r3, #31
    cfec:	d403      	bmi.n	cff6 <__lo0bits+0x46>
    cfee:	085b      	lsrs	r3, r3, #1
    cff0:	f102 0201 	add.w	r2, r2, #1
    cff4:	d005      	beq.n	d002 <__lo0bits+0x52>
    cff6:	6003      	str	r3, [r0, #0]
    cff8:	4610      	mov	r0, r2
    cffa:	4770      	bx	lr
    cffc:	2200      	movs	r2, #0
    cffe:	4610      	mov	r0, r2
    d000:	4770      	bx	lr
    d002:	2220      	movs	r2, #32
    d004:	e7df      	b.n	cfc6 <__lo0bits+0x16>
    d006:	089b      	lsrs	r3, r3, #2
    d008:	2202      	movs	r2, #2
    d00a:	6003      	str	r3, [r0, #0]
    d00c:	4610      	mov	r0, r2
    d00e:	4770      	bx	lr

0000d010 <__i2b>:
    d010:	b538      	push	{r3, r4, r5, lr}
    d012:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d014:	4604      	mov	r4, r0
    d016:	460d      	mov	r5, r1
    d018:	b14b      	cbz	r3, d02e <__i2b+0x1e>
    d01a:	6858      	ldr	r0, [r3, #4]
    d01c:	b1b0      	cbz	r0, d04c <__i2b+0x3c>
    d01e:	6802      	ldr	r2, [r0, #0]
    d020:	605a      	str	r2, [r3, #4]
    d022:	2200      	movs	r2, #0
    d024:	2301      	movs	r3, #1
    d026:	e9c0 3504 	strd	r3, r5, [r0, #16]
    d02a:	60c2      	str	r2, [r0, #12]
    d02c:	bd38      	pop	{r3, r4, r5, pc}
    d02e:	2221      	movs	r2, #33	; 0x21
    d030:	2104      	movs	r1, #4
    d032:	f003 ffd5 	bl	10fe0 <_calloc_r>
    d036:	4603      	mov	r3, r0
    d038:	6460      	str	r0, [r4, #68]	; 0x44
    d03a:	2800      	cmp	r0, #0
    d03c:	d1ed      	bne.n	d01a <__i2b+0xa>
    d03e:	4b09      	ldr	r3, [pc, #36]	; (d064 <__i2b+0x54>)
    d040:	4809      	ldr	r0, [pc, #36]	; (d068 <__i2b+0x58>)
    d042:	2200      	movs	r2, #0
    d044:	f240 1145 	movw	r1, #325	; 0x145
    d048:	f003 ffaa 	bl	10fa0 <__assert_func>
    d04c:	221c      	movs	r2, #28
    d04e:	2101      	movs	r1, #1
    d050:	4620      	mov	r0, r4
    d052:	f003 ffc5 	bl	10fe0 <_calloc_r>
    d056:	2800      	cmp	r0, #0
    d058:	d0f1      	beq.n	d03e <__i2b+0x2e>
    d05a:	2201      	movs	r2, #1
    d05c:	2302      	movs	r3, #2
    d05e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    d062:	e7de      	b.n	d022 <__i2b+0x12>
    d064:	200008bc 	.word	0x200008bc
    d068:	20000a34 	.word	0x20000a34

0000d06c <__multiply>:
    d06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d070:	690e      	ldr	r6, [r1, #16]
    d072:	6915      	ldr	r5, [r2, #16]
    d074:	42ae      	cmp	r6, r5
    d076:	b085      	sub	sp, #20
    d078:	4688      	mov	r8, r1
    d07a:	4614      	mov	r4, r2
    d07c:	db05      	blt.n	d08a <__multiply+0x1e>
    d07e:	462a      	mov	r2, r5
    d080:	4623      	mov	r3, r4
    d082:	4635      	mov	r5, r6
    d084:	460c      	mov	r4, r1
    d086:	4616      	mov	r6, r2
    d088:	4698      	mov	r8, r3
    d08a:	68a3      	ldr	r3, [r4, #8]
    d08c:	6861      	ldr	r1, [r4, #4]
    d08e:	19af      	adds	r7, r5, r6
    d090:	42bb      	cmp	r3, r7
    d092:	bfb8      	it	lt
    d094:	3101      	addlt	r1, #1
    d096:	f7ff fe91 	bl	cdbc <_Balloc>
    d09a:	9001      	str	r0, [sp, #4]
    d09c:	2800      	cmp	r0, #0
    d09e:	f000 8087 	beq.w	d1b0 <__multiply+0x144>
    d0a2:	9b01      	ldr	r3, [sp, #4]
    d0a4:	f103 0914 	add.w	r9, r3, #20
    d0a8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    d0ac:	45d1      	cmp	r9, sl
    d0ae:	d205      	bcs.n	d0bc <__multiply+0x50>
    d0b0:	464b      	mov	r3, r9
    d0b2:	2200      	movs	r2, #0
    d0b4:	f843 2b04 	str.w	r2, [r3], #4
    d0b8:	459a      	cmp	sl, r3
    d0ba:	d8fb      	bhi.n	d0b4 <__multiply+0x48>
    d0bc:	f108 0814 	add.w	r8, r8, #20
    d0c0:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    d0c4:	f104 0314 	add.w	r3, r4, #20
    d0c8:	45d8      	cmp	r8, fp
    d0ca:	461a      	mov	r2, r3
    d0cc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    d0d0:	d25f      	bcs.n	d192 <__multiply+0x126>
    d0d2:	1b2b      	subs	r3, r5, r4
    d0d4:	3b15      	subs	r3, #21
    d0d6:	f023 0303 	bic.w	r3, r3, #3
    d0da:	3304      	adds	r3, #4
    d0dc:	3415      	adds	r4, #21
    d0de:	42a5      	cmp	r5, r4
    d0e0:	bf38      	it	cc
    d0e2:	2304      	movcc	r3, #4
    d0e4:	e9cd a702 	strd	sl, r7, [sp, #8]
    d0e8:	46ac      	mov	ip, r5
    d0ea:	461f      	mov	r7, r3
    d0ec:	4692      	mov	sl, r2
    d0ee:	e005      	b.n	d0fc <__multiply+0x90>
    d0f0:	0c09      	lsrs	r1, r1, #16
    d0f2:	d129      	bne.n	d148 <__multiply+0xdc>
    d0f4:	45c3      	cmp	fp, r8
    d0f6:	f109 0904 	add.w	r9, r9, #4
    d0fa:	d948      	bls.n	d18e <__multiply+0x122>
    d0fc:	f858 1b04 	ldr.w	r1, [r8], #4
    d100:	b28d      	uxth	r5, r1
    d102:	2d00      	cmp	r5, #0
    d104:	d0f4      	beq.n	d0f0 <__multiply+0x84>
    d106:	4656      	mov	r6, sl
    d108:	464c      	mov	r4, r9
    d10a:	2300      	movs	r3, #0
    d10c:	f856 1b04 	ldr.w	r1, [r6], #4
    d110:	6822      	ldr	r2, [r4, #0]
    d112:	fa1f fe81 	uxth.w	lr, r1
    d116:	b290      	uxth	r0, r2
    d118:	0c09      	lsrs	r1, r1, #16
    d11a:	fb05 000e 	mla	r0, r5, lr, r0
    d11e:	0c12      	lsrs	r2, r2, #16
    d120:	4403      	add	r3, r0
    d122:	fb05 2201 	mla	r2, r5, r1, r2
    d126:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d12a:	b29b      	uxth	r3, r3
    d12c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    d130:	45b4      	cmp	ip, r6
    d132:	f844 3b04 	str.w	r3, [r4], #4
    d136:	ea4f 4312 	mov.w	r3, r2, lsr #16
    d13a:	d8e7      	bhi.n	d10c <__multiply+0xa0>
    d13c:	f849 3007 	str.w	r3, [r9, r7]
    d140:	f858 1c04 	ldr.w	r1, [r8, #-4]
    d144:	0c09      	lsrs	r1, r1, #16
    d146:	d0d5      	beq.n	d0f4 <__multiply+0x88>
    d148:	f8d9 3000 	ldr.w	r3, [r9]
    d14c:	4650      	mov	r0, sl
    d14e:	461a      	mov	r2, r3
    d150:	464c      	mov	r4, r9
    d152:	2600      	movs	r6, #0
    d154:	8805      	ldrh	r5, [r0, #0]
    d156:	0c12      	lsrs	r2, r2, #16
    d158:	fb01 2205 	mla	r2, r1, r5, r2
    d15c:	4416      	add	r6, r2
    d15e:	b29b      	uxth	r3, r3
    d160:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    d164:	f844 3b04 	str.w	r3, [r4], #4
    d168:	f850 5b04 	ldr.w	r5, [r0], #4
    d16c:	6822      	ldr	r2, [r4, #0]
    d16e:	0c2d      	lsrs	r5, r5, #16
    d170:	b293      	uxth	r3, r2
    d172:	fb01 3305 	mla	r3, r1, r5, r3
    d176:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    d17a:	4584      	cmp	ip, r0
    d17c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    d180:	d8e8      	bhi.n	d154 <__multiply+0xe8>
    d182:	45c3      	cmp	fp, r8
    d184:	f849 3007 	str.w	r3, [r9, r7]
    d188:	f109 0904 	add.w	r9, r9, #4
    d18c:	d8b6      	bhi.n	d0fc <__multiply+0x90>
    d18e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    d192:	2f00      	cmp	r7, #0
    d194:	dc02      	bgt.n	d19c <__multiply+0x130>
    d196:	e005      	b.n	d1a4 <__multiply+0x138>
    d198:	3f01      	subs	r7, #1
    d19a:	d003      	beq.n	d1a4 <__multiply+0x138>
    d19c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    d1a0:	2b00      	cmp	r3, #0
    d1a2:	d0f9      	beq.n	d198 <__multiply+0x12c>
    d1a4:	9b01      	ldr	r3, [sp, #4]
    d1a6:	4618      	mov	r0, r3
    d1a8:	611f      	str	r7, [r3, #16]
    d1aa:	b005      	add	sp, #20
    d1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1b0:	4b03      	ldr	r3, [pc, #12]	; (d1c0 <__multiply+0x154>)
    d1b2:	4804      	ldr	r0, [pc, #16]	; (d1c4 <__multiply+0x158>)
    d1b4:	9a01      	ldr	r2, [sp, #4]
    d1b6:	f44f 71b1 	mov.w	r1, #354	; 0x162
    d1ba:	f003 fef1 	bl	10fa0 <__assert_func>
    d1be:	bf00      	nop
    d1c0:	200008bc 	.word	0x200008bc
    d1c4:	20000a34 	.word	0x20000a34

0000d1c8 <__pow5mult>:
    d1c8:	f012 0303 	ands.w	r3, r2, #3
    d1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1d0:	4614      	mov	r4, r2
    d1d2:	4606      	mov	r6, r0
    d1d4:	d132      	bne.n	d23c <__pow5mult+0x74>
    d1d6:	460d      	mov	r5, r1
    d1d8:	10a4      	asrs	r4, r4, #2
    d1da:	d020      	beq.n	d21e <__pow5mult+0x56>
    d1dc:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    d1e0:	f1b8 0f00 	cmp.w	r8, #0
    d1e4:	d033      	beq.n	d24e <__pow5mult+0x86>
    d1e6:	07e3      	lsls	r3, r4, #31
    d1e8:	f04f 0700 	mov.w	r7, #0
    d1ec:	d407      	bmi.n	d1fe <__pow5mult+0x36>
    d1ee:	1064      	asrs	r4, r4, #1
    d1f0:	d015      	beq.n	d21e <__pow5mult+0x56>
    d1f2:	f8d8 0000 	ldr.w	r0, [r8]
    d1f6:	b1a8      	cbz	r0, d224 <__pow5mult+0x5c>
    d1f8:	4680      	mov	r8, r0
    d1fa:	07e3      	lsls	r3, r4, #31
    d1fc:	d5f7      	bpl.n	d1ee <__pow5mult+0x26>
    d1fe:	4642      	mov	r2, r8
    d200:	4629      	mov	r1, r5
    d202:	4630      	mov	r0, r6
    d204:	f7ff ff32 	bl	d06c <__multiply>
    d208:	b1b5      	cbz	r5, d238 <__pow5mult+0x70>
    d20a:	6869      	ldr	r1, [r5, #4]
    d20c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    d20e:	1064      	asrs	r4, r4, #1
    d210:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    d214:	602a      	str	r2, [r5, #0]
    d216:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    d21a:	4605      	mov	r5, r0
    d21c:	d1e9      	bne.n	d1f2 <__pow5mult+0x2a>
    d21e:	4628      	mov	r0, r5
    d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d224:	4642      	mov	r2, r8
    d226:	4641      	mov	r1, r8
    d228:	4630      	mov	r0, r6
    d22a:	f7ff ff1f 	bl	d06c <__multiply>
    d22e:	f8c8 0000 	str.w	r0, [r8]
    d232:	6007      	str	r7, [r0, #0]
    d234:	4680      	mov	r8, r0
    d236:	e7e0      	b.n	d1fa <__pow5mult+0x32>
    d238:	4605      	mov	r5, r0
    d23a:	e7d8      	b.n	d1ee <__pow5mult+0x26>
    d23c:	3b01      	subs	r3, #1
    d23e:	4a0f      	ldr	r2, [pc, #60]	; (d27c <__pow5mult+0xb4>)
    d240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    d244:	2300      	movs	r3, #0
    d246:	f7ff fde9 	bl	ce1c <__multadd>
    d24a:	4605      	mov	r5, r0
    d24c:	e7c4      	b.n	d1d8 <__pow5mult+0x10>
    d24e:	2101      	movs	r1, #1
    d250:	4630      	mov	r0, r6
    d252:	f7ff fdb3 	bl	cdbc <_Balloc>
    d256:	4680      	mov	r8, r0
    d258:	b140      	cbz	r0, d26c <__pow5mult+0xa4>
    d25a:	2301      	movs	r3, #1
    d25c:	f240 2271 	movw	r2, #625	; 0x271
    d260:	e9c0 3204 	strd	r3, r2, [r0, #16]
    d264:	2300      	movs	r3, #0
    d266:	6430      	str	r0, [r6, #64]	; 0x40
    d268:	6003      	str	r3, [r0, #0]
    d26a:	e7bc      	b.n	d1e6 <__pow5mult+0x1e>
    d26c:	4b04      	ldr	r3, [pc, #16]	; (d280 <__pow5mult+0xb8>)
    d26e:	4805      	ldr	r0, [pc, #20]	; (d284 <__pow5mult+0xbc>)
    d270:	4642      	mov	r2, r8
    d272:	f240 1145 	movw	r1, #325	; 0x145
    d276:	f003 fe93 	bl	10fa0 <__assert_func>
    d27a:	bf00      	nop
    d27c:	20007a88 	.word	0x20007a88
    d280:	200008bc 	.word	0x200008bc
    d284:	20000a34 	.word	0x20000a34

0000d288 <__lshift>:
    d288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d28c:	460d      	mov	r5, r1
    d28e:	4614      	mov	r4, r2
    d290:	692f      	ldr	r7, [r5, #16]
    d292:	68ab      	ldr	r3, [r5, #8]
    d294:	6849      	ldr	r1, [r1, #4]
    d296:	eb07 1762 	add.w	r7, r7, r2, asr #5
    d29a:	1c7e      	adds	r6, r7, #1
    d29c:	429e      	cmp	r6, r3
    d29e:	4680      	mov	r8, r0
    d2a0:	ea4f 1962 	mov.w	r9, r2, asr #5
    d2a4:	dd04      	ble.n	d2b0 <__lshift+0x28>
    d2a6:	005b      	lsls	r3, r3, #1
    d2a8:	429e      	cmp	r6, r3
    d2aa:	f101 0101 	add.w	r1, r1, #1
    d2ae:	dcfa      	bgt.n	d2a6 <__lshift+0x1e>
    d2b0:	4640      	mov	r0, r8
    d2b2:	f7ff fd83 	bl	cdbc <_Balloc>
    d2b6:	4684      	mov	ip, r0
    d2b8:	2800      	cmp	r0, #0
    d2ba:	d052      	beq.n	d362 <__lshift+0xda>
    d2bc:	f1b9 0f00 	cmp.w	r9, #0
    d2c0:	f100 0214 	add.w	r2, r0, #20
    d2c4:	dd0e      	ble.n	d2e4 <__lshift+0x5c>
    d2c6:	f109 0105 	add.w	r1, r9, #5
    d2ca:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    d2ce:	4613      	mov	r3, r2
    d2d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    d2d4:	2000      	movs	r0, #0
    d2d6:	f843 0b04 	str.w	r0, [r3], #4
    d2da:	428b      	cmp	r3, r1
    d2dc:	d1fb      	bne.n	d2d6 <__lshift+0x4e>
    d2de:	f1ae 0314 	sub.w	r3, lr, #20
    d2e2:	441a      	add	r2, r3
    d2e4:	6929      	ldr	r1, [r5, #16]
    d2e6:	f105 0314 	add.w	r3, r5, #20
    d2ea:	f014 0e1f 	ands.w	lr, r4, #31
    d2ee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d2f2:	d02e      	beq.n	d352 <__lshift+0xca>
    d2f4:	f1ce 0920 	rsb	r9, lr, #32
    d2f8:	4610      	mov	r0, r2
    d2fa:	f04f 0a00 	mov.w	sl, #0
    d2fe:	681c      	ldr	r4, [r3, #0]
    d300:	fa04 f40e 	lsl.w	r4, r4, lr
    d304:	ea44 040a 	orr.w	r4, r4, sl
    d308:	f840 4b04 	str.w	r4, [r0], #4
    d30c:	f853 4b04 	ldr.w	r4, [r3], #4
    d310:	4299      	cmp	r1, r3
    d312:	fa24 fa09 	lsr.w	sl, r4, r9
    d316:	d8f2      	bhi.n	d2fe <__lshift+0x76>
    d318:	1b4b      	subs	r3, r1, r5
    d31a:	3b15      	subs	r3, #21
    d31c:	f023 0303 	bic.w	r3, r3, #3
    d320:	3304      	adds	r3, #4
    d322:	f105 0015 	add.w	r0, r5, #21
    d326:	4281      	cmp	r1, r0
    d328:	bf38      	it	cc
    d32a:	2304      	movcc	r3, #4
    d32c:	f1ba 0f00 	cmp.w	sl, #0
    d330:	bf18      	it	ne
    d332:	4637      	movne	r7, r6
    d334:	f842 a003 	str.w	sl, [r2, r3]
    d338:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    d33c:	686a      	ldr	r2, [r5, #4]
    d33e:	f8cc 7010 	str.w	r7, [ip, #16]
    d342:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d346:	6029      	str	r1, [r5, #0]
    d348:	4660      	mov	r0, ip
    d34a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    d34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d352:	3a04      	subs	r2, #4
    d354:	f853 0b04 	ldr.w	r0, [r3], #4
    d358:	f842 0f04 	str.w	r0, [r2, #4]!
    d35c:	4299      	cmp	r1, r3
    d35e:	d8f9      	bhi.n	d354 <__lshift+0xcc>
    d360:	e7ea      	b.n	d338 <__lshift+0xb0>
    d362:	4b03      	ldr	r3, [pc, #12]	; (d370 <__lshift+0xe8>)
    d364:	4803      	ldr	r0, [pc, #12]	; (d374 <__lshift+0xec>)
    d366:	4662      	mov	r2, ip
    d368:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    d36c:	f003 fe18 	bl	10fa0 <__assert_func>
    d370:	200008bc 	.word	0x200008bc
    d374:	20000a34 	.word	0x20000a34

0000d378 <__mcmp>:
    d378:	690b      	ldr	r3, [r1, #16]
    d37a:	4684      	mov	ip, r0
    d37c:	6900      	ldr	r0, [r0, #16]
    d37e:	1ac0      	subs	r0, r0, r3
    d380:	d116      	bne.n	d3b0 <__mcmp+0x38>
    d382:	f10c 0c14 	add.w	ip, ip, #20
    d386:	3114      	adds	r1, #20
    d388:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    d38c:	b410      	push	{r4}
    d38e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    d392:	e001      	b.n	d398 <__mcmp+0x20>
    d394:	4594      	cmp	ip, r2
    d396:	d208      	bcs.n	d3aa <__mcmp+0x32>
    d398:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d39c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d3a0:	428c      	cmp	r4, r1
    d3a2:	d0f7      	beq.n	d394 <__mcmp+0x1c>
    d3a4:	d205      	bcs.n	d3b2 <__mcmp+0x3a>
    d3a6:	f04f 30ff 	mov.w	r0, #4294967295
    d3aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    d3ae:	4770      	bx	lr
    d3b0:	4770      	bx	lr
    d3b2:	2001      	movs	r0, #1
    d3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    d3b8:	4770      	bx	lr
    d3ba:	bf00      	nop

0000d3bc <__mdiff>:
    d3bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3c0:	690f      	ldr	r7, [r1, #16]
    d3c2:	6913      	ldr	r3, [r2, #16]
    d3c4:	1aff      	subs	r7, r7, r3
    d3c6:	2f00      	cmp	r7, #0
    d3c8:	460e      	mov	r6, r1
    d3ca:	4690      	mov	r8, r2
    d3cc:	d17f      	bne.n	d4ce <__mdiff+0x112>
    d3ce:	f101 0514 	add.w	r5, r1, #20
    d3d2:	3214      	adds	r2, #20
    d3d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    d3d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    d3dc:	e001      	b.n	d3e2 <__mdiff+0x26>
    d3de:	429d      	cmp	r5, r3
    d3e0:	d278      	bcs.n	d4d4 <__mdiff+0x118>
    d3e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d3e6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d3ea:	42a1      	cmp	r1, r4
    d3ec:	d0f7      	beq.n	d3de <__mdiff+0x22>
    d3ee:	d369      	bcc.n	d4c4 <__mdiff+0x108>
    d3f0:	6871      	ldr	r1, [r6, #4]
    d3f2:	f7ff fce3 	bl	cdbc <_Balloc>
    d3f6:	4681      	mov	r9, r0
    d3f8:	2800      	cmp	r0, #0
    d3fa:	d077      	beq.n	d4ec <__mdiff+0x130>
    d3fc:	6935      	ldr	r5, [r6, #16]
    d3fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
    d402:	60c7      	str	r7, [r0, #12]
    d404:	f108 0e14 	add.w	lr, r8, #20
    d408:	f106 0014 	add.w	r0, r6, #20
    d40c:	f109 0a14 	add.w	sl, r9, #20
    d410:	f106 0110 	add.w	r1, r6, #16
    d414:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    d418:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    d41c:	4656      	mov	r6, sl
    d41e:	f04f 0c00 	mov.w	ip, #0
    d422:	f85e 4b04 	ldr.w	r4, [lr], #4
    d426:	f851 bf04 	ldr.w	fp, [r1, #4]!
    d42a:	b2a3      	uxth	r3, r4
    d42c:	fa1c fc8b 	uxtah	ip, ip, fp
    d430:	ebac 0303 	sub.w	r3, ip, r3
    d434:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    d438:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    d43c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    d440:	b29b      	uxth	r3, r3
    d442:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    d446:	4572      	cmp	r2, lr
    d448:	f846 3b04 	str.w	r3, [r6], #4
    d44c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    d450:	d8e7      	bhi.n	d422 <__mdiff+0x66>
    d452:	eba2 0108 	sub.w	r1, r2, r8
    d456:	3915      	subs	r1, #21
    d458:	f108 0815 	add.w	r8, r8, #21
    d45c:	4542      	cmp	r2, r8
    d45e:	f021 0403 	bic.w	r4, r1, #3
    d462:	f104 0404 	add.w	r4, r4, #4
    d466:	bf38      	it	cc
    d468:	2404      	movcc	r4, #4
    d46a:	4420      	add	r0, r4
    d46c:	f021 0203 	bic.w	r2, r1, #3
    d470:	bf38      	it	cc
    d472:	2200      	movcc	r2, #0
    d474:	4287      	cmp	r7, r0
    d476:	4452      	add	r2, sl
    d478:	4454      	add	r4, sl
    d47a:	d918      	bls.n	d4ae <__mdiff+0xf2>
    d47c:	4626      	mov	r6, r4
    d47e:	4601      	mov	r1, r0
    d480:	f851 3b04 	ldr.w	r3, [r1], #4
    d484:	fa1c fc83 	uxtah	ip, ip, r3
    d488:	ea4f 422c 	mov.w	r2, ip, asr #16
    d48c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d490:	fa1f fc8c 	uxth.w	ip, ip
    d494:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    d498:	428f      	cmp	r7, r1
    d49a:	f846 3b04 	str.w	r3, [r6], #4
    d49e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    d4a2:	d8ed      	bhi.n	d480 <__mdiff+0xc4>
    d4a4:	3f01      	subs	r7, #1
    d4a6:	1a3f      	subs	r7, r7, r0
    d4a8:	f027 0703 	bic.w	r7, r7, #3
    d4ac:	19e2      	adds	r2, r4, r7
    d4ae:	b923      	cbnz	r3, d4ba <__mdiff+0xfe>
    d4b0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    d4b4:	3d01      	subs	r5, #1
    d4b6:	2b00      	cmp	r3, #0
    d4b8:	d0fa      	beq.n	d4b0 <__mdiff+0xf4>
    d4ba:	f8c9 5010 	str.w	r5, [r9, #16]
    d4be:	4648      	mov	r0, r9
    d4c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4c4:	4633      	mov	r3, r6
    d4c6:	2701      	movs	r7, #1
    d4c8:	4646      	mov	r6, r8
    d4ca:	4698      	mov	r8, r3
    d4cc:	e790      	b.n	d3f0 <__mdiff+0x34>
    d4ce:	dbf9      	blt.n	d4c4 <__mdiff+0x108>
    d4d0:	2700      	movs	r7, #0
    d4d2:	e78d      	b.n	d3f0 <__mdiff+0x34>
    d4d4:	2100      	movs	r1, #0
    d4d6:	f7ff fc71 	bl	cdbc <_Balloc>
    d4da:	4681      	mov	r9, r0
    d4dc:	b168      	cbz	r0, d4fa <__mdiff+0x13e>
    d4de:	2201      	movs	r2, #1
    d4e0:	2300      	movs	r3, #0
    d4e2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    d4e6:	4648      	mov	r0, r9
    d4e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4ec:	4b06      	ldr	r3, [pc, #24]	; (d508 <__mdiff+0x14c>)
    d4ee:	4807      	ldr	r0, [pc, #28]	; (d50c <__mdiff+0x150>)
    d4f0:	464a      	mov	r2, r9
    d4f2:	f240 2145 	movw	r1, #581	; 0x245
    d4f6:	f003 fd53 	bl	10fa0 <__assert_func>
    d4fa:	4b03      	ldr	r3, [pc, #12]	; (d508 <__mdiff+0x14c>)
    d4fc:	4803      	ldr	r0, [pc, #12]	; (d50c <__mdiff+0x150>)
    d4fe:	464a      	mov	r2, r9
    d500:	f240 2137 	movw	r1, #567	; 0x237
    d504:	f003 fd4c 	bl	10fa0 <__assert_func>
    d508:	200008bc 	.word	0x200008bc
    d50c:	20000a34 	.word	0x20000a34

0000d510 <__ulp>:
    d510:	b082      	sub	sp, #8
    d512:	ed8d 0b00 	vstr	d0, [sp]
    d516:	4b16      	ldr	r3, [pc, #88]	; (d570 <__ulp+0x60>)
    d518:	9a01      	ldr	r2, [sp, #4]
    d51a:	4013      	ands	r3, r2
    d51c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    d520:	2b00      	cmp	r3, #0
    d522:	dd06      	ble.n	d532 <__ulp+0x22>
    d524:	2200      	movs	r2, #0
    d526:	4619      	mov	r1, r3
    d528:	4610      	mov	r0, r2
    d52a:	ec41 0b10 	vmov	d0, r0, r1
    d52e:	b002      	add	sp, #8
    d530:	4770      	bx	lr
    d532:	425b      	negs	r3, r3
    d534:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    d538:	ea4f 5223 	mov.w	r2, r3, asr #20
    d53c:	da09      	bge.n	d552 <__ulp+0x42>
    d53e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    d542:	4113      	asrs	r3, r2
    d544:	2200      	movs	r2, #0
    d546:	4619      	mov	r1, r3
    d548:	4610      	mov	r0, r2
    d54a:	ec41 0b10 	vmov	d0, r0, r1
    d54e:	b002      	add	sp, #8
    d550:	4770      	bx	lr
    d552:	f1a2 0314 	sub.w	r3, r2, #20
    d556:	2b1e      	cmp	r3, #30
    d558:	bfda      	itte	le
    d55a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    d55e:	40da      	lsrle	r2, r3
    d560:	2201      	movgt	r2, #1
    d562:	2300      	movs	r3, #0
    d564:	4619      	mov	r1, r3
    d566:	4610      	mov	r0, r2
    d568:	ec41 0b10 	vmov	d0, r0, r1
    d56c:	b002      	add	sp, #8
    d56e:	4770      	bx	lr
    d570:	7ff00000 	.word	0x7ff00000

0000d574 <__b2d>:
    d574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d576:	6904      	ldr	r4, [r0, #16]
    d578:	f100 0614 	add.w	r6, r0, #20
    d57c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    d580:	1f27      	subs	r7, r4, #4
    d582:	f854 5c04 	ldr.w	r5, [r4, #-4]
    d586:	4628      	mov	r0, r5
    d588:	f7ff fcf2 	bl	cf70 <__hi0bits>
    d58c:	f1c0 0320 	rsb	r3, r0, #32
    d590:	280a      	cmp	r0, #10
    d592:	600b      	str	r3, [r1, #0]
    d594:	dd1b      	ble.n	d5ce <__b2d+0x5a>
    d596:	42be      	cmp	r6, r7
    d598:	d20b      	bcs.n	d5b2 <__b2d+0x3e>
    d59a:	380b      	subs	r0, #11
    d59c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    d5a0:	d12e      	bne.n	d600 <__b2d+0x8c>
    d5a2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    d5a6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d5aa:	460a      	mov	r2, r1
    d5ac:	ec43 2b10 	vmov	d0, r2, r3
    d5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5b2:	f1b0 010b 	subs.w	r1, r0, #11
    d5b6:	d0f4      	beq.n	d5a2 <__b2d+0x2e>
    d5b8:	fa05 f101 	lsl.w	r1, r5, r1
    d5bc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d5c0:	2100      	movs	r1, #0
    d5c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d5c6:	460a      	mov	r2, r1
    d5c8:	ec43 2b10 	vmov	d0, r2, r3
    d5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5ce:	f1c0 0c0b 	rsb	ip, r0, #11
    d5d2:	fa25 f10c 	lsr.w	r1, r5, ip
    d5d6:	42be      	cmp	r6, r7
    d5d8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d5dc:	bf38      	it	cc
    d5de:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    d5e2:	f100 0015 	add.w	r0, r0, #21
    d5e6:	bf34      	ite	cc
    d5e8:	fa21 f10c 	lsrcc.w	r1, r1, ip
    d5ec:	2100      	movcs	r1, #0
    d5ee:	fa05 f000 	lsl.w	r0, r5, r0
    d5f2:	4301      	orrs	r1, r0
    d5f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d5f8:	460a      	mov	r2, r1
    d5fa:	ec43 2b10 	vmov	d0, r2, r3
    d5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d600:	f1c0 0c20 	rsb	ip, r0, #32
    d604:	4085      	lsls	r5, r0
    d606:	fa21 f30c 	lsr.w	r3, r1, ip
    d60a:	ea45 0703 	orr.w	r7, r5, r3
    d60e:	f1a4 0508 	sub.w	r5, r4, #8
    d612:	42ae      	cmp	r6, r5
    d614:	fa01 f100 	lsl.w	r1, r1, r0
    d618:	bf3c      	itt	cc
    d61a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    d61e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    d622:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    d626:	bf38      	it	cc
    d628:	4301      	orrcc	r1, r0
    d62a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d62e:	460a      	mov	r2, r1
    d630:	ec43 2b10 	vmov	d0, r2, r3
    d634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d636:	bf00      	nop

0000d638 <__d2b>:
    d638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d63c:	4688      	mov	r8, r1
    d63e:	b083      	sub	sp, #12
    d640:	2101      	movs	r1, #1
    d642:	ec57 6b10 	vmov	r6, r7, d0
    d646:	4615      	mov	r5, r2
    d648:	f7ff fbb8 	bl	cdbc <_Balloc>
    d64c:	4604      	mov	r4, r0
    d64e:	2800      	cmp	r0, #0
    d650:	d051      	beq.n	d6f6 <__d2b+0xbe>
    d652:	f3c7 590a 	ubfx	r9, r7, #20, #11
    d656:	f3c7 0313 	ubfx	r3, r7, #0, #20
    d65a:	f1b9 0f00 	cmp.w	r9, #0
    d65e:	d001      	beq.n	d664 <__d2b+0x2c>
    d660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d664:	2e00      	cmp	r6, #0
    d666:	9301      	str	r3, [sp, #4]
    d668:	d118      	bne.n	d69c <__d2b+0x64>
    d66a:	a801      	add	r0, sp, #4
    d66c:	f7ff fca0 	bl	cfb0 <__lo0bits>
    d670:	9a01      	ldr	r2, [sp, #4]
    d672:	6162      	str	r2, [r4, #20]
    d674:	2201      	movs	r2, #1
    d676:	f100 0320 	add.w	r3, r0, #32
    d67a:	6122      	str	r2, [r4, #16]
    d67c:	f1b9 0f00 	cmp.w	r9, #0
    d680:	d025      	beq.n	d6ce <__d2b+0x96>
    d682:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    d686:	eb09 0203 	add.w	r2, r9, r3
    d68a:	4620      	mov	r0, r4
    d68c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    d690:	f8c8 2000 	str.w	r2, [r8]
    d694:	602b      	str	r3, [r5, #0]
    d696:	b003      	add	sp, #12
    d698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d69c:	4668      	mov	r0, sp
    d69e:	9600      	str	r6, [sp, #0]
    d6a0:	f7ff fc86 	bl	cfb0 <__lo0bits>
    d6a4:	4603      	mov	r3, r0
    d6a6:	b310      	cbz	r0, d6ee <__d2b+0xb6>
    d6a8:	e9dd 0200 	ldrd	r0, r2, [sp]
    d6ac:	f1c3 0120 	rsb	r1, r3, #32
    d6b0:	fa02 f101 	lsl.w	r1, r2, r1
    d6b4:	4301      	orrs	r1, r0
    d6b6:	40da      	lsrs	r2, r3
    d6b8:	6161      	str	r1, [r4, #20]
    d6ba:	9201      	str	r2, [sp, #4]
    d6bc:	2a00      	cmp	r2, #0
    d6be:	61a2      	str	r2, [r4, #24]
    d6c0:	bf14      	ite	ne
    d6c2:	2202      	movne	r2, #2
    d6c4:	2201      	moveq	r2, #1
    d6c6:	6122      	str	r2, [r4, #16]
    d6c8:	f1b9 0f00 	cmp.w	r9, #0
    d6cc:	d1d9      	bne.n	d682 <__d2b+0x4a>
    d6ce:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    d6d2:	f8c8 3000 	str.w	r3, [r8]
    d6d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    d6da:	6918      	ldr	r0, [r3, #16]
    d6dc:	f7ff fc48 	bl	cf70 <__hi0bits>
    d6e0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    d6e4:	4620      	mov	r0, r4
    d6e6:	602b      	str	r3, [r5, #0]
    d6e8:	b003      	add	sp, #12
    d6ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d6ee:	9a00      	ldr	r2, [sp, #0]
    d6f0:	6162      	str	r2, [r4, #20]
    d6f2:	9a01      	ldr	r2, [sp, #4]
    d6f4:	e7e2      	b.n	d6bc <__d2b+0x84>
    d6f6:	4b03      	ldr	r3, [pc, #12]	; (d704 <__d2b+0xcc>)
    d6f8:	4803      	ldr	r0, [pc, #12]	; (d708 <__d2b+0xd0>)
    d6fa:	4622      	mov	r2, r4
    d6fc:	f240 310f 	movw	r1, #783	; 0x30f
    d700:	f003 fc4e 	bl	10fa0 <__assert_func>
    d704:	200008bc 	.word	0x200008bc
    d708:	20000a34 	.word	0x20000a34

0000d70c <__ratio>:
    d70c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d70e:	b083      	sub	sp, #12
    d710:	460e      	mov	r6, r1
    d712:	4669      	mov	r1, sp
    d714:	4607      	mov	r7, r0
    d716:	f7ff ff2d 	bl	d574 <__b2d>
    d71a:	a901      	add	r1, sp, #4
    d71c:	4630      	mov	r0, r6
    d71e:	ec55 4b10 	vmov	r4, r5, d0
    d722:	eeb0 7b40 	vmov.f64	d7, d0
    d726:	f7ff ff25 	bl	d574 <__b2d>
    d72a:	6933      	ldr	r3, [r6, #16]
    d72c:	693a      	ldr	r2, [r7, #16]
    d72e:	1ad2      	subs	r2, r2, r3
    d730:	e9dd 3100 	ldrd	r3, r1, [sp]
    d734:	1a5b      	subs	r3, r3, r1
    d736:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    d73a:	2b00      	cmp	r3, #0
    d73c:	dd09      	ble.n	d752 <__ratio+0x46>
    d73e:	ee17 2a90 	vmov	r2, s15
    d742:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    d746:	ec45 4b17 	vmov	d7, r4, r5
    d74a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d74e:	b003      	add	sp, #12
    d750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d752:	ee10 2a90 	vmov	r2, s1
    d756:	ec51 0b10 	vmov	r0, r1, d0
    d75a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    d75e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    d762:	ec41 0b10 	vmov	d0, r0, r1
    d766:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d76a:	b003      	add	sp, #12
    d76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d76e:	bf00      	nop

0000d770 <__copybits>:
    d770:	3901      	subs	r1, #1
    d772:	1149      	asrs	r1, r1, #5
    d774:	f101 0c01 	add.w	ip, r1, #1
    d778:	6911      	ldr	r1, [r2, #16]
    d77a:	f102 0314 	add.w	r3, r2, #20
    d77e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d782:	428b      	cmp	r3, r1
    d784:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    d788:	d217      	bcs.n	d7ba <__copybits+0x4a>
    d78a:	b510      	push	{r4, lr}
    d78c:	f1a0 0e04 	sub.w	lr, r0, #4
    d790:	f853 4b04 	ldr.w	r4, [r3], #4
    d794:	f84e 4f04 	str.w	r4, [lr, #4]!
    d798:	4299      	cmp	r1, r3
    d79a:	d8f9      	bhi.n	d790 <__copybits+0x20>
    d79c:	1a8a      	subs	r2, r1, r2
    d79e:	f1a2 0315 	sub.w	r3, r2, #21
    d7a2:	f023 0303 	bic.w	r3, r3, #3
    d7a6:	3304      	adds	r3, #4
    d7a8:	4418      	add	r0, r3
    d7aa:	4584      	cmp	ip, r0
    d7ac:	d904      	bls.n	d7b8 <__copybits+0x48>
    d7ae:	2300      	movs	r3, #0
    d7b0:	f840 3b04 	str.w	r3, [r0], #4
    d7b4:	4584      	cmp	ip, r0
    d7b6:	d8fb      	bhi.n	d7b0 <__copybits+0x40>
    d7b8:	bd10      	pop	{r4, pc}
    d7ba:	4584      	cmp	ip, r0
    d7bc:	d905      	bls.n	d7ca <__copybits+0x5a>
    d7be:	2300      	movs	r3, #0
    d7c0:	f840 3b04 	str.w	r3, [r0], #4
    d7c4:	4584      	cmp	ip, r0
    d7c6:	d8fb      	bhi.n	d7c0 <__copybits+0x50>
    d7c8:	4770      	bx	lr
    d7ca:	4770      	bx	lr

0000d7cc <__any_on>:
    d7cc:	6903      	ldr	r3, [r0, #16]
    d7ce:	114a      	asrs	r2, r1, #5
    d7d0:	4293      	cmp	r3, r2
    d7d2:	f100 0014 	add.w	r0, r0, #20
    d7d6:	da09      	bge.n	d7ec <__any_on+0x20>
    d7d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d7dc:	e002      	b.n	d7e4 <__any_on+0x18>
    d7de:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d7e2:	b9c2      	cbnz	r2, d816 <__any_on+0x4a>
    d7e4:	4283      	cmp	r3, r0
    d7e6:	d8fa      	bhi.n	d7de <__any_on+0x12>
    d7e8:	2000      	movs	r0, #0
    d7ea:	4770      	bx	lr
    d7ec:	dd10      	ble.n	d810 <__any_on+0x44>
    d7ee:	f011 011f 	ands.w	r1, r1, #31
    d7f2:	d00d      	beq.n	d810 <__any_on+0x44>
    d7f4:	b410      	push	{r4}
    d7f6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    d7fa:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d7fe:	fa24 f201 	lsr.w	r2, r4, r1
    d802:	408a      	lsls	r2, r1
    d804:	4294      	cmp	r4, r2
    d806:	d00c      	beq.n	d822 <__any_on+0x56>
    d808:	2001      	movs	r0, #1
    d80a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d80e:	4770      	bx	lr
    d810:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d814:	e7e6      	b.n	d7e4 <__any_on+0x18>
    d816:	2001      	movs	r0, #1
    d818:	4770      	bx	lr
    d81a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d81e:	2a00      	cmp	r2, #0
    d820:	d1f2      	bne.n	d808 <__any_on+0x3c>
    d822:	4283      	cmp	r3, r0
    d824:	d8f9      	bhi.n	d81a <__any_on+0x4e>
    d826:	2000      	movs	r0, #0
    d828:	f85d 4b04 	ldr.w	r4, [sp], #4
    d82c:	4770      	bx	lr
    d82e:	bf00      	nop

0000d830 <__ascii_wctomb>:
    d830:	b149      	cbz	r1, d846 <__ascii_wctomb+0x16>
    d832:	2aff      	cmp	r2, #255	; 0xff
    d834:	d802      	bhi.n	d83c <__ascii_wctomb+0xc>
    d836:	700a      	strb	r2, [r1, #0]
    d838:	2001      	movs	r0, #1
    d83a:	4770      	bx	lr
    d83c:	238a      	movs	r3, #138	; 0x8a
    d83e:	6003      	str	r3, [r0, #0]
    d840:	f04f 30ff 	mov.w	r0, #4294967295
    d844:	4770      	bx	lr
    d846:	4608      	mov	r0, r1
    d848:	4770      	bx	lr
    d84a:	bf00      	nop
    d84c:	0000      	movs	r0, r0
	...

0000d850 <_svfprintf_r>:
    d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d854:	ed2d 8b08 	vpush	{d8-d11}
    d858:	b0d1      	sub	sp, #324	; 0x144
    d85a:	460c      	mov	r4, r1
    d85c:	ee0b 1a10 	vmov	s22, r1
    d860:	4690      	mov	r8, r2
    d862:	9308      	str	r3, [sp, #32]
    d864:	4683      	mov	fp, r0
    d866:	f003 fb59 	bl	10f1c <_localeconv_r>
    d86a:	6803      	ldr	r3, [r0, #0]
    d86c:	9312      	str	r3, [sp, #72]	; 0x48
    d86e:	4618      	mov	r0, r3
    d870:	f7fe fc66 	bl	c140 <strlen>
    d874:	af20      	add	r7, sp, #128	; 0x80
    d876:	9010      	str	r0, [sp, #64]	; 0x40
    d878:	2208      	movs	r2, #8
    d87a:	2100      	movs	r1, #0
    d87c:	4638      	mov	r0, r7
    d87e:	f7fe f8c5 	bl	ba0c <memset>
    d882:	89a3      	ldrh	r3, [r4, #12]
    d884:	061b      	lsls	r3, r3, #24
    d886:	d503      	bpl.n	d890 <_svfprintf_r+0x40>
    d888:	6923      	ldr	r3, [r4, #16]
    d88a:	2b00      	cmp	r3, #0
    d88c:	f000 8755 	beq.w	e73a <_svfprintf_r+0xeea>
    d890:	2300      	movs	r3, #0
    d892:	ed9f 8b83 	vldr	d8, [pc, #524]	; daa0 <_svfprintf_r+0x250>
    d896:	ed9f 9b84 	vldr	d9, [pc, #528]	; daa8 <_svfprintf_r+0x258>
    d89a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    d89e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    d8a2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    d8a6:	aa27      	add	r2, sp, #156	; 0x9c
    d8a8:	930e      	str	r3, [sp, #56]	; 0x38
    d8aa:	9224      	str	r2, [sp, #144]	; 0x90
    d8ac:	4692      	mov	sl, r2
    d8ae:	9311      	str	r3, [sp, #68]	; 0x44
    d8b0:	9304      	str	r3, [sp, #16]
    d8b2:	4644      	mov	r4, r8
    d8b4:	46a1      	mov	r9, r4
    d8b6:	4b7e      	ldr	r3, [pc, #504]	; (dab0 <_svfprintf_r+0x260>)
    d8b8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    d8bc:	f7fe f970 	bl	bba0 <__locale_mb_cur_max>
    d8c0:	464a      	mov	r2, r9
    d8c2:	4603      	mov	r3, r0
    d8c4:	a91c      	add	r1, sp, #112	; 0x70
    d8c6:	9700      	str	r7, [sp, #0]
    d8c8:	4658      	mov	r0, fp
    d8ca:	47a8      	blx	r5
    d8cc:	2800      	cmp	r0, #0
    d8ce:	f000 80b0 	beq.w	da32 <_svfprintf_r+0x1e2>
    d8d2:	f2c0 80a6 	blt.w	da22 <_svfprintf_r+0x1d2>
    d8d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d8d8:	2a25      	cmp	r2, #37	; 0x25
    d8da:	4603      	mov	r3, r0
    d8dc:	d001      	beq.n	d8e2 <_svfprintf_r+0x92>
    d8de:	4499      	add	r9, r3
    d8e0:	e7e9      	b.n	d8b6 <_svfprintf_r+0x66>
    d8e2:	ebb9 0504 	subs.w	r5, r9, r4
    d8e6:	4606      	mov	r6, r0
    d8e8:	f040 80a7 	bne.w	da3a <_svfprintf_r+0x1ea>
    d8ec:	2300      	movs	r3, #0
    d8ee:	f04f 32ff 	mov.w	r2, #4294967295
    d8f2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d8f6:	4698      	mov	r8, r3
    d8f8:	9306      	str	r3, [sp, #24]
    d8fa:	f109 0901 	add.w	r9, r9, #1
    d8fe:	f899 3000 	ldrb.w	r3, [r9]
    d902:	9203      	str	r2, [sp, #12]
    d904:	252b      	movs	r5, #43	; 0x2b
    d906:	2620      	movs	r6, #32
    d908:	f109 0901 	add.w	r9, r9, #1
    d90c:	f1a3 0220 	sub.w	r2, r3, #32
    d910:	2a5a      	cmp	r2, #90	; 0x5a
    d912:	f200 80cf 	bhi.w	dab4 <_svfprintf_r+0x264>
    d916:	e8df f012 	tbh	[pc, r2, lsl #1]
    d91a:	02e8      	.short	0x02e8
    d91c:	00cd00cd 	.word	0x00cd00cd
    d920:	00cd02e3 	.word	0x00cd02e3
    d924:	00cd00cd 	.word	0x00cd00cd
    d928:	00cd006a 	.word	0x00cd006a
    d92c:	020500cd 	.word	0x020500cd
    d930:	00cd0284 	.word	0x00cd0284
    d934:	02c90210 	.word	0x02c90210
    d938:	02bd00cd 	.word	0x02bd00cd
    d93c:	005b005b 	.word	0x005b005b
    d940:	005b005b 	.word	0x005b005b
    d944:	005b005b 	.word	0x005b005b
    d948:	005b005b 	.word	0x005b005b
    d94c:	00cd005b 	.word	0x00cd005b
    d950:	00cd00cd 	.word	0x00cd00cd
    d954:	00cd00cd 	.word	0x00cd00cd
    d958:	00cd00cd 	.word	0x00cd00cd
    d95c:	00cd0153 	.word	0x00cd0153
    d960:	021a0183 	.word	0x021a0183
    d964:	01530153 	.word	0x01530153
    d968:	00cd0153 	.word	0x00cd0153
    d96c:	00cd00cd 	.word	0x00cd00cd
    d970:	021500cd 	.word	0x021500cd
    d974:	00cd00cd 	.word	0x00cd00cd
    d978:	00cd0296 	.word	0x00cd0296
    d97c:	00cd00cd 	.word	0x00cd00cd
    d980:	00cd01ab 	.word	0x00cd01ab
    d984:	00cd02aa 	.word	0x00cd02aa
    d988:	06e300cd 	.word	0x06e300cd
    d98c:	00cd00cd 	.word	0x00cd00cd
    d990:	00cd00cd 	.word	0x00cd00cd
    d994:	00cd00cd 	.word	0x00cd00cd
    d998:	00cd00cd 	.word	0x00cd00cd
    d99c:	00cd0153 	.word	0x00cd0153
    d9a0:	01de0183 	.word	0x01de0183
    d9a4:	01530153 	.word	0x01530153
    d9a8:	02770153 	.word	0x02770153
    d9ac:	007f01de 	.word	0x007f01de
    d9b0:	028900cd 	.word	0x028900cd
    d9b4:	025f00cd 	.word	0x025f00cd
    d9b8:	022f06e0 	.word	0x022f06e0
    d9bc:	00cd007f 	.word	0x00cd007f
    d9c0:	007c01ab 	.word	0x007c01ab
    d9c4:	00cd06b8 	.word	0x00cd06b8
    d9c8:	06bd00cd 	.word	0x06bd00cd
    d9cc:	007c00cd 	.word	0x007c00cd
    d9d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d9d4:	2100      	movs	r1, #0
    d9d6:	f819 3b01 	ldrb.w	r3, [r9], #1
    d9da:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d9de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d9e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d9e6:	2a09      	cmp	r2, #9
    d9e8:	d9f5      	bls.n	d9d6 <_svfprintf_r+0x186>
    d9ea:	9106      	str	r1, [sp, #24]
    d9ec:	e78e      	b.n	d90c <_svfprintf_r+0xbc>
    d9ee:	4658      	mov	r0, fp
    d9f0:	f003 fa94 	bl	10f1c <_localeconv_r>
    d9f4:	6843      	ldr	r3, [r0, #4]
    d9f6:	9315      	str	r3, [sp, #84]	; 0x54
    d9f8:	4618      	mov	r0, r3
    d9fa:	f7fe fba1 	bl	c140 <strlen>
    d9fe:	9016      	str	r0, [sp, #88]	; 0x58
    da00:	4658      	mov	r0, fp
    da02:	f003 fa8b 	bl	10f1c <_localeconv_r>
    da06:	6883      	ldr	r3, [r0, #8]
    da08:	9313      	str	r3, [sp, #76]	; 0x4c
    da0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da0c:	2b00      	cmp	r3, #0
    da0e:	f040 862d 	bne.w	e66c <_svfprintf_r+0xe1c>
    da12:	f899 3000 	ldrb.w	r3, [r9]
    da16:	e777      	b.n	d908 <_svfprintf_r+0xb8>
    da18:	f899 3000 	ldrb.w	r3, [r9]
    da1c:	f048 0820 	orr.w	r8, r8, #32
    da20:	e772      	b.n	d908 <_svfprintf_r+0xb8>
    da22:	2208      	movs	r2, #8
    da24:	2100      	movs	r1, #0
    da26:	4638      	mov	r0, r7
    da28:	f7fd fff0 	bl	ba0c <memset>
    da2c:	2301      	movs	r3, #1
    da2e:	4499      	add	r9, r3
    da30:	e741      	b.n	d8b6 <_svfprintf_r+0x66>
    da32:	ebb9 0504 	subs.w	r5, r9, r4
    da36:	4606      	mov	r6, r0
    da38:	d011      	beq.n	da5e <_svfprintf_r+0x20e>
    da3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    da3c:	442b      	add	r3, r5
    da3e:	9326      	str	r3, [sp, #152]	; 0x98
    da40:	9b25      	ldr	r3, [sp, #148]	; 0x94
    da42:	3301      	adds	r3, #1
    da44:	2b07      	cmp	r3, #7
    da46:	e9ca 4500 	strd	r4, r5, [sl]
    da4a:	9325      	str	r3, [sp, #148]	; 0x94
    da4c:	dc1c      	bgt.n	da88 <_svfprintf_r+0x238>
    da4e:	f10a 0a08 	add.w	sl, sl, #8
    da52:	9b04      	ldr	r3, [sp, #16]
    da54:	442b      	add	r3, r5
    da56:	9304      	str	r3, [sp, #16]
    da58:	2e00      	cmp	r6, #0
    da5a:	f47f af47 	bne.w	d8ec <_svfprintf_r+0x9c>
    da5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    da60:	2b00      	cmp	r3, #0
    da62:	f041 820b 	bne.w	ee7c <_svfprintf_r+0x162c>
    da66:	ee1b 3a10 	vmov	r3, s22
    da6a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    da6e:	f013 0f40 	tst.w	r3, #64	; 0x40
    da72:	9b04      	ldr	r3, [sp, #16]
    da74:	bf18      	it	ne
    da76:	f04f 33ff 	movne.w	r3, #4294967295
    da7a:	9304      	str	r3, [sp, #16]
    da7c:	9804      	ldr	r0, [sp, #16]
    da7e:	b051      	add	sp, #324	; 0x144
    da80:	ecbd 8b08 	vpop	{d8-d11}
    da84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da88:	ee1b 1a10 	vmov	r1, s22
    da8c:	aa24      	add	r2, sp, #144	; 0x90
    da8e:	4658      	mov	r0, fp
    da90:	f004 fd6a 	bl	12568 <__ssprint_r>
    da94:	2800      	cmp	r0, #0
    da96:	d1e6      	bne.n	da66 <_svfprintf_r+0x216>
    da98:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    da9c:	e7d9      	b.n	da52 <_svfprintf_r+0x202>
    da9e:	bf00      	nop
	...
    daa8:	ffffffff 	.word	0xffffffff
    daac:	7fefffff 	.word	0x7fefffff
    dab0:	200085e8 	.word	0x200085e8
    dab4:	930b      	str	r3, [sp, #44]	; 0x2c
    dab6:	2b00      	cmp	r3, #0
    dab8:	d0d1      	beq.n	da5e <_svfprintf_r+0x20e>
    daba:	2100      	movs	r1, #0
    dabc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    dac0:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    dac4:	2301      	movs	r3, #1
    dac6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    daca:	9302      	str	r3, [sp, #8]
    dacc:	9107      	str	r1, [sp, #28]
    dace:	9305      	str	r3, [sp, #20]
    dad0:	9103      	str	r1, [sp, #12]
    dad2:	910f      	str	r1, [sp, #60]	; 0x3c
    dad4:	ac37      	add	r4, sp, #220	; 0xdc
    dad6:	f018 0302 	ands.w	r3, r8, #2
    dada:	9309      	str	r3, [sp, #36]	; 0x24
    dadc:	d002      	beq.n	dae4 <_svfprintf_r+0x294>
    dade:	9b02      	ldr	r3, [sp, #8]
    dae0:	3302      	adds	r3, #2
    dae2:	9302      	str	r3, [sp, #8]
    dae4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    dae8:	930a      	str	r3, [sp, #40]	; 0x28
    daea:	d105      	bne.n	daf8 <_svfprintf_r+0x2a8>
    daec:	9b06      	ldr	r3, [sp, #24]
    daee:	9a02      	ldr	r2, [sp, #8]
    daf0:	1a9d      	subs	r5, r3, r2
    daf2:	2d00      	cmp	r5, #0
    daf4:	f300 8369 	bgt.w	e1ca <_svfprintf_r+0x97a>
    daf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dafa:	b189      	cbz	r1, db20 <_svfprintf_r+0x2d0>
    dafc:	9925      	ldr	r1, [sp, #148]	; 0x94
    dafe:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    db02:	3101      	adds	r1, #1
    db04:	3201      	adds	r2, #1
    db06:	f8ca 0000 	str.w	r0, [sl]
    db0a:	2907      	cmp	r1, #7
    db0c:	f04f 0001 	mov.w	r0, #1
    db10:	9226      	str	r2, [sp, #152]	; 0x98
    db12:	9125      	str	r1, [sp, #148]	; 0x94
    db14:	f8ca 0004 	str.w	r0, [sl, #4]
    db18:	f300 83a2 	bgt.w	e260 <_svfprintf_r+0xa10>
    db1c:	f10a 0a08 	add.w	sl, sl, #8
    db20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    db22:	b183      	cbz	r3, db46 <_svfprintf_r+0x2f6>
    db24:	9b25      	ldr	r3, [sp, #148]	; 0x94
    db26:	a91a      	add	r1, sp, #104	; 0x68
    db28:	3301      	adds	r3, #1
    db2a:	3202      	adds	r2, #2
    db2c:	f8ca 1000 	str.w	r1, [sl]
    db30:	2b07      	cmp	r3, #7
    db32:	f04f 0102 	mov.w	r1, #2
    db36:	9226      	str	r2, [sp, #152]	; 0x98
    db38:	9325      	str	r3, [sp, #148]	; 0x94
    db3a:	f8ca 1004 	str.w	r1, [sl, #4]
    db3e:	f300 83a3 	bgt.w	e288 <_svfprintf_r+0xa38>
    db42:	f10a 0a08 	add.w	sl, sl, #8
    db46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    db48:	2b80      	cmp	r3, #128	; 0x80
    db4a:	f000 826c 	beq.w	e026 <_svfprintf_r+0x7d6>
    db4e:	9b03      	ldr	r3, [sp, #12]
    db50:	9905      	ldr	r1, [sp, #20]
    db52:	1a5d      	subs	r5, r3, r1
    db54:	2d00      	cmp	r5, #0
    db56:	f300 82a5 	bgt.w	e0a4 <_svfprintf_r+0x854>
    db5a:	f418 7f80 	tst.w	r8, #256	; 0x100
    db5e:	f040 820d 	bne.w	df7c <_svfprintf_r+0x72c>
    db62:	9b05      	ldr	r3, [sp, #20]
    db64:	f8ca 3004 	str.w	r3, [sl, #4]
    db68:	441a      	add	r2, r3
    db6a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    db6c:	f8ca 4000 	str.w	r4, [sl]
    db70:	3301      	adds	r3, #1
    db72:	2b07      	cmp	r3, #7
    db74:	9226      	str	r2, [sp, #152]	; 0x98
    db76:	9325      	str	r3, [sp, #148]	; 0x94
    db78:	f300 831b 	bgt.w	e1b2 <_svfprintf_r+0x962>
    db7c:	f10a 0a08 	add.w	sl, sl, #8
    db80:	f018 0f04 	tst.w	r8, #4
    db84:	d005      	beq.n	db92 <_svfprintf_r+0x342>
    db86:	9b06      	ldr	r3, [sp, #24]
    db88:	9902      	ldr	r1, [sp, #8]
    db8a:	1a5c      	subs	r4, r3, r1
    db8c:	2c00      	cmp	r4, #0
    db8e:	f300 8388 	bgt.w	e2a2 <_svfprintf_r+0xa52>
    db92:	9b04      	ldr	r3, [sp, #16]
    db94:	9906      	ldr	r1, [sp, #24]
    db96:	9802      	ldr	r0, [sp, #8]
    db98:	4281      	cmp	r1, r0
    db9a:	bfac      	ite	ge
    db9c:	185b      	addge	r3, r3, r1
    db9e:	181b      	addlt	r3, r3, r0
    dba0:	9304      	str	r3, [sp, #16]
    dba2:	2a00      	cmp	r2, #0
    dba4:	f040 82b0 	bne.w	e108 <_svfprintf_r+0x8b8>
    dba8:	2300      	movs	r3, #0
    dbaa:	9325      	str	r3, [sp, #148]	; 0x94
    dbac:	9b07      	ldr	r3, [sp, #28]
    dbae:	b11b      	cbz	r3, dbb8 <_svfprintf_r+0x368>
    dbb0:	9907      	ldr	r1, [sp, #28]
    dbb2:	4658      	mov	r0, fp
    dbb4:	f7fe fbd6 	bl	c364 <_free_r>
    dbb8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dbbc:	464c      	mov	r4, r9
    dbbe:	e679      	b.n	d8b4 <_svfprintf_r+0x64>
    dbc0:	930b      	str	r3, [sp, #44]	; 0x2c
    dbc2:	9b08      	ldr	r3, [sp, #32]
    dbc4:	3307      	adds	r3, #7
    dbc6:	f023 0307 	bic.w	r3, r3, #7
    dbca:	ecb3 8b02 	vldmia	r3!, {d8}
    dbce:	eeb0 7bc8 	vabs.f64	d7, d8
    dbd2:	eeb4 7b49 	vcmp.f64	d7, d9
    dbd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dbda:	9308      	str	r3, [sp, #32]
    dbdc:	f340 84e9 	ble.w	e5b2 <_svfprintf_r+0xd62>
    dbe0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    dbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dbe8:	f101 8059 	bmi.w	ec9e <_svfprintf_r+0x144e>
    dbec:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dbf0:	4cab      	ldr	r4, [pc, #684]	; (dea0 <_svfprintf_r+0x650>)
    dbf2:	4bac      	ldr	r3, [pc, #688]	; (dea4 <_svfprintf_r+0x654>)
    dbf4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    dbf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dbfa:	2a47      	cmp	r2, #71	; 0x47
    dbfc:	bfc8      	it	gt
    dbfe:	461c      	movgt	r4, r3
    dc00:	2300      	movs	r3, #0
    dc02:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    dc06:	2203      	movs	r2, #3
    dc08:	9307      	str	r3, [sp, #28]
    dc0a:	9202      	str	r2, [sp, #8]
    dc0c:	9205      	str	r2, [sp, #20]
    dc0e:	9303      	str	r3, [sp, #12]
    dc10:	930f      	str	r3, [sp, #60]	; 0x3c
    dc12:	2900      	cmp	r1, #0
    dc14:	f43f af5f 	beq.w	dad6 <_svfprintf_r+0x286>
    dc18:	9b02      	ldr	r3, [sp, #8]
    dc1a:	3301      	adds	r3, #1
    dc1c:	9302      	str	r3, [sp, #8]
    dc1e:	e75a      	b.n	dad6 <_svfprintf_r+0x286>
    dc20:	2b43      	cmp	r3, #67	; 0x43
    dc22:	930b      	str	r3, [sp, #44]	; 0x2c
    dc24:	d003      	beq.n	dc2e <_svfprintf_r+0x3de>
    dc26:	f018 0f10 	tst.w	r8, #16
    dc2a:	f000 855d 	beq.w	e6e8 <_svfprintf_r+0xe98>
    dc2e:	9d08      	ldr	r5, [sp, #32]
    dc30:	2208      	movs	r2, #8
    dc32:	2100      	movs	r1, #0
    dc34:	a822      	add	r0, sp, #136	; 0x88
    dc36:	ac37      	add	r4, sp, #220	; 0xdc
    dc38:	f7fd fee8 	bl	ba0c <memset>
    dc3c:	ab22      	add	r3, sp, #136	; 0x88
    dc3e:	f855 2b04 	ldr.w	r2, [r5], #4
    dc42:	4621      	mov	r1, r4
    dc44:	4658      	mov	r0, fp
    dc46:	f004 fb65 	bl	12314 <_wcrtomb_r>
    dc4a:	4603      	mov	r3, r0
    dc4c:	3301      	adds	r3, #1
    dc4e:	9005      	str	r0, [sp, #20]
    dc50:	f001 82ee 	beq.w	f230 <_svfprintf_r+0x19e0>
    dc54:	9b05      	ldr	r3, [sp, #20]
    dc56:	9508      	str	r5, [sp, #32]
    dc58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    dc5c:	9302      	str	r3, [sp, #8]
    dc5e:	2100      	movs	r1, #0
    dc60:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    dc64:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    dc68:	9107      	str	r1, [sp, #28]
    dc6a:	9103      	str	r1, [sp, #12]
    dc6c:	910f      	str	r1, [sp, #60]	; 0x3c
    dc6e:	e732      	b.n	dad6 <_svfprintf_r+0x286>
    dc70:	930b      	str	r3, [sp, #44]	; 0x2c
    dc72:	9b08      	ldr	r3, [sp, #32]
    dc74:	461a      	mov	r2, r3
    dc76:	2300      	movs	r3, #0
    dc78:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    dc7c:	4613      	mov	r3, r2
    dc7e:	f853 4b04 	ldr.w	r4, [r3], #4
    dc82:	9308      	str	r3, [sp, #32]
    dc84:	2c00      	cmp	r4, #0
    dc86:	f000 8548 	beq.w	e71a <_svfprintf_r+0xeca>
    dc8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc8c:	2b53      	cmp	r3, #83	; 0x53
    dc8e:	f000 86ec 	beq.w	ea6a <_svfprintf_r+0x121a>
    dc92:	f018 0310 	ands.w	r3, r8, #16
    dc96:	930c      	str	r3, [sp, #48]	; 0x30
    dc98:	f040 86e7 	bne.w	ea6a <_svfprintf_r+0x121a>
    dc9c:	9b03      	ldr	r3, [sp, #12]
    dc9e:	1c5d      	adds	r5, r3, #1
    dca0:	f001 80e5 	beq.w	ee6e <_svfprintf_r+0x161e>
    dca4:	990c      	ldr	r1, [sp, #48]	; 0x30
    dca6:	461a      	mov	r2, r3
    dca8:	4620      	mov	r0, r4
    dcaa:	f7fe f9e9 	bl	c080 <memchr>
    dcae:	9007      	str	r0, [sp, #28]
    dcb0:	2800      	cmp	r0, #0
    dcb2:	f001 8328 	beq.w	f306 <_svfprintf_r+0x1ab6>
    dcb6:	9b07      	ldr	r3, [sp, #28]
    dcb8:	1b1a      	subs	r2, r3, r4
    dcba:	9205      	str	r2, [sp, #20]
    dcbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dcbe:	9303      	str	r3, [sp, #12]
    dcc0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    dcc4:	930f      	str	r3, [sp, #60]	; 0x3c
    dcc6:	930d      	str	r3, [sp, #52]	; 0x34
    dcc8:	9307      	str	r3, [sp, #28]
    dcca:	2373      	movs	r3, #115	; 0x73
    dccc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dcd0:	9202      	str	r2, [sp, #8]
    dcd2:	930b      	str	r3, [sp, #44]	; 0x2c
    dcd4:	e79d      	b.n	dc12 <_svfprintf_r+0x3c2>
    dcd6:	f018 0f20 	tst.w	r8, #32
    dcda:	930b      	str	r3, [sp, #44]	; 0x2c
    dcdc:	9b08      	ldr	r3, [sp, #32]
    dcde:	d03d      	beq.n	dd5c <_svfprintf_r+0x50c>
    dce0:	3307      	adds	r3, #7
    dce2:	f023 0307 	bic.w	r3, r3, #7
    dce6:	461a      	mov	r2, r3
    dce8:	4611      	mov	r1, r2
    dcea:	685b      	ldr	r3, [r3, #4]
    dcec:	f851 2b08 	ldr.w	r2, [r1], #8
    dcf0:	9108      	str	r1, [sp, #32]
    dcf2:	4619      	mov	r1, r3
    dcf4:	2b00      	cmp	r3, #0
    dcf6:	f2c0 840c 	blt.w	e512 <_svfprintf_r+0xcc2>
    dcfa:	9b03      	ldr	r3, [sp, #12]
    dcfc:	3301      	adds	r3, #1
    dcfe:	f000 829e 	beq.w	e23e <_svfprintf_r+0x9ee>
    dd02:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    dd06:	ea52 0301 	orrs.w	r3, r2, r1
    dd0a:	9002      	str	r0, [sp, #8]
    dd0c:	f040 8299 	bne.w	e242 <_svfprintf_r+0x9f2>
    dd10:	9b03      	ldr	r3, [sp, #12]
    dd12:	2b00      	cmp	r3, #0
    dd14:	f040 829a 	bne.w	e24c <_svfprintf_r+0x9fc>
    dd18:	4680      	mov	r8, r0
    dd1a:	2300      	movs	r3, #0
    dd1c:	9303      	str	r3, [sp, #12]
    dd1e:	9305      	str	r3, [sp, #20]
    dd20:	ac50      	add	r4, sp, #320	; 0x140
    dd22:	e106      	b.n	df32 <_svfprintf_r+0x6e2>
    dd24:	9b08      	ldr	r3, [sp, #32]
    dd26:	f853 2b04 	ldr.w	r2, [r3], #4
    dd2a:	9206      	str	r2, [sp, #24]
    dd2c:	2a00      	cmp	r2, #0
    dd2e:	f280 8419 	bge.w	e564 <_svfprintf_r+0xd14>
    dd32:	9a06      	ldr	r2, [sp, #24]
    dd34:	9308      	str	r3, [sp, #32]
    dd36:	4252      	negs	r2, r2
    dd38:	9206      	str	r2, [sp, #24]
    dd3a:	f899 3000 	ldrb.w	r3, [r9]
    dd3e:	f048 0804 	orr.w	r8, r8, #4
    dd42:	e5e1      	b.n	d908 <_svfprintf_r+0xb8>
    dd44:	f899 3000 	ldrb.w	r3, [r9]
    dd48:	f048 0808 	orr.w	r8, r8, #8
    dd4c:	e5dc      	b.n	d908 <_svfprintf_r+0xb8>
    dd4e:	f048 0810 	orr.w	r8, r8, #16
    dd52:	f018 0f20 	tst.w	r8, #32
    dd56:	930b      	str	r3, [sp, #44]	; 0x2c
    dd58:	9b08      	ldr	r3, [sp, #32]
    dd5a:	d1c1      	bne.n	dce0 <_svfprintf_r+0x490>
    dd5c:	f018 0f10 	tst.w	r8, #16
    dd60:	f040 840b 	bne.w	e57a <_svfprintf_r+0xd2a>
    dd64:	f018 0f40 	tst.w	r8, #64	; 0x40
    dd68:	f000 8403 	beq.w	e572 <_svfprintf_r+0xd22>
    dd6c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    dd70:	9308      	str	r3, [sp, #32]
    dd72:	17d1      	asrs	r1, r2, #31
    dd74:	460b      	mov	r3, r1
    dd76:	e7bd      	b.n	dcf4 <_svfprintf_r+0x4a4>
    dd78:	9b08      	ldr	r3, [sp, #32]
    dd7a:	f048 0202 	orr.w	r2, r8, #2
    dd7e:	9202      	str	r2, [sp, #8]
    dd80:	f853 2b04 	ldr.w	r2, [r3], #4
    dd84:	9308      	str	r3, [sp, #32]
    dd86:	f647 0330 	movw	r3, #30768	; 0x7830
    dd8a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    dd8e:	2078      	movs	r0, #120	; 0x78
    dd90:	4b45      	ldr	r3, [pc, #276]	; (dea8 <_svfprintf_r+0x658>)
    dd92:	9311      	str	r3, [sp, #68]	; 0x44
    dd94:	2100      	movs	r1, #0
    dd96:	2302      	movs	r3, #2
    dd98:	900b      	str	r0, [sp, #44]	; 0x2c
    dd9a:	2000      	movs	r0, #0
    dd9c:	9c03      	ldr	r4, [sp, #12]
    dd9e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    dda2:	1c60      	adds	r0, r4, #1
    dda4:	f000 80ad 	beq.w	df02 <_svfprintf_r+0x6b2>
    dda8:	9802      	ldr	r0, [sp, #8]
    ddaa:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    ddae:	ea52 0001 	orrs.w	r0, r2, r1
    ddb2:	f040 80a4 	bne.w	defe <_svfprintf_r+0x6ae>
    ddb6:	2c00      	cmp	r4, #0
    ddb8:	f040 86ae 	bne.w	eb18 <_svfprintf_r+0x12c8>
    ddbc:	2b00      	cmp	r3, #0
    ddbe:	d1ac      	bne.n	dd1a <_svfprintf_r+0x4ca>
    ddc0:	9b02      	ldr	r3, [sp, #8]
    ddc2:	f013 0301 	ands.w	r3, r3, #1
    ddc6:	9305      	str	r3, [sp, #20]
    ddc8:	f000 83d1 	beq.w	e56e <_svfprintf_r+0xd1e>
    ddcc:	2330      	movs	r3, #48	; 0x30
    ddce:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    ddd2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    ddd6:	e0ac      	b.n	df32 <_svfprintf_r+0x6e2>
    ddd8:	f018 0f20 	tst.w	r8, #32
    dddc:	f040 83d4 	bne.w	e588 <_svfprintf_r+0xd38>
    dde0:	f018 0f10 	tst.w	r8, #16
    dde4:	f040 869f 	bne.w	eb26 <_svfprintf_r+0x12d6>
    dde8:	f018 0f40 	tst.w	r8, #64	; 0x40
    ddec:	f040 8797 	bne.w	ed1e <_svfprintf_r+0x14ce>
    ddf0:	f418 7f00 	tst.w	r8, #512	; 0x200
    ddf4:	f000 8697 	beq.w	eb26 <_svfprintf_r+0x12d6>
    ddf8:	9b08      	ldr	r3, [sp, #32]
    ddfa:	9904      	ldr	r1, [sp, #16]
    ddfc:	f853 2b04 	ldr.w	r2, [r3], #4
    de00:	9308      	str	r3, [sp, #32]
    de02:	7011      	strb	r1, [r2, #0]
    de04:	464c      	mov	r4, r9
    de06:	e555      	b.n	d8b4 <_svfprintf_r+0x64>
    de08:	f899 3000 	ldrb.w	r3, [r9]
    de0c:	2b68      	cmp	r3, #104	; 0x68
    de0e:	bf03      	ittte	eq
    de10:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    de14:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    de18:	f109 0901 	addeq.w	r9, r9, #1
    de1c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    de20:	e572      	b.n	d908 <_svfprintf_r+0xb8>
    de22:	f899 3000 	ldrb.w	r3, [r9]
    de26:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    de2a:	e56d      	b.n	d908 <_svfprintf_r+0xb8>
    de2c:	f899 3000 	ldrb.w	r3, [r9]
    de30:	2b6c      	cmp	r3, #108	; 0x6c
    de32:	bf03      	ittte	eq
    de34:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    de38:	f048 0820 	orreq.w	r8, r8, #32
    de3c:	f109 0901 	addeq.w	r9, r9, #1
    de40:	f048 0810 	orrne.w	r8, r8, #16
    de44:	e560      	b.n	d908 <_svfprintf_r+0xb8>
    de46:	930b      	str	r3, [sp, #44]	; 0x2c
    de48:	f048 0810 	orr.w	r8, r8, #16
    de4c:	f018 0120 	ands.w	r1, r8, #32
    de50:	f000 8351 	beq.w	e4f6 <_svfprintf_r+0xca6>
    de54:	9b08      	ldr	r3, [sp, #32]
    de56:	3307      	adds	r3, #7
    de58:	f023 0307 	bic.w	r3, r3, #7
    de5c:	6859      	ldr	r1, [r3, #4]
    de5e:	f853 2b08 	ldr.w	r2, [r3], #8
    de62:	9308      	str	r3, [sp, #32]
    de64:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    de68:	9302      	str	r3, [sp, #8]
    de6a:	2300      	movs	r3, #0
    de6c:	e795      	b.n	dd9a <_svfprintf_r+0x54a>
    de6e:	930b      	str	r3, [sp, #44]	; 0x2c
    de70:	f048 0310 	orr.w	r3, r8, #16
    de74:	9302      	str	r3, [sp, #8]
    de76:	9b02      	ldr	r3, [sp, #8]
    de78:	f013 0120 	ands.w	r1, r3, #32
    de7c:	f000 8329 	beq.w	e4d2 <_svfprintf_r+0xc82>
    de80:	9b08      	ldr	r3, [sp, #32]
    de82:	3307      	adds	r3, #7
    de84:	f023 0307 	bic.w	r3, r3, #7
    de88:	6859      	ldr	r1, [r3, #4]
    de8a:	f853 2b08 	ldr.w	r2, [r3], #8
    de8e:	9308      	str	r3, [sp, #32]
    de90:	2301      	movs	r3, #1
    de92:	e782      	b.n	dd9a <_svfprintf_r+0x54a>
    de94:	f899 3000 	ldrb.w	r3, [r9]
    de98:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    de9c:	e534      	b.n	d908 <_svfprintf_r+0xb8>
    de9e:	bf00      	nop
    dea0:	20000c2c 	.word	0x20000c2c
    dea4:	2000058c 	.word	0x2000058c
    dea8:	20000c34 	.word	0x20000c34
    deac:	4649      	mov	r1, r9
    deae:	f811 3b01 	ldrb.w	r3, [r1], #1
    deb2:	2b2a      	cmp	r3, #42	; 0x2a
    deb4:	f001 8249 	beq.w	f34a <_svfprintf_r+0x1afa>
    deb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    debc:	2a09      	cmp	r2, #9
    debe:	4689      	mov	r9, r1
    dec0:	bf98      	it	ls
    dec2:	2100      	movls	r1, #0
    dec4:	f201 8144 	bhi.w	f150 <_svfprintf_r+0x1900>
    dec8:	f819 3b01 	ldrb.w	r3, [r9], #1
    decc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ded0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    ded4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ded8:	2a09      	cmp	r2, #9
    deda:	d9f5      	bls.n	dec8 <_svfprintf_r+0x678>
    dedc:	9103      	str	r1, [sp, #12]
    dede:	e515      	b.n	d90c <_svfprintf_r+0xbc>
    dee0:	f899 3000 	ldrb.w	r3, [r9]
    dee4:	f048 0801 	orr.w	r8, r8, #1
    dee8:	e50e      	b.n	d908 <_svfprintf_r+0xb8>
    deea:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    deee:	2b00      	cmp	r3, #0
    def0:	f47f ad8f 	bne.w	da12 <_svfprintf_r+0x1c2>
    def4:	f899 3000 	ldrb.w	r3, [r9]
    def8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    defc:	e504      	b.n	d908 <_svfprintf_r+0xb8>
    defe:	f8cd 8008 	str.w	r8, [sp, #8]
    df02:	2b01      	cmp	r3, #1
    df04:	f000 819d 	beq.w	e242 <_svfprintf_r+0x9f2>
    df08:	2b02      	cmp	r3, #2
    df0a:	ac50      	add	r4, sp, #320	; 0x140
    df0c:	d120      	bne.n	df50 <_svfprintf_r+0x700>
    df0e:	9811      	ldr	r0, [sp, #68]	; 0x44
    df10:	f002 030f 	and.w	r3, r2, #15
    df14:	0912      	lsrs	r2, r2, #4
    df16:	5cc3      	ldrb	r3, [r0, r3]
    df18:	f804 3d01 	strb.w	r3, [r4, #-1]!
    df1c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    df20:	0909      	lsrs	r1, r1, #4
    df22:	ea52 0301 	orrs.w	r3, r2, r1
    df26:	d1f3      	bne.n	df10 <_svfprintf_r+0x6c0>
    df28:	ab50      	add	r3, sp, #320	; 0x140
    df2a:	1b1b      	subs	r3, r3, r4
    df2c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    df30:	9305      	str	r3, [sp, #20]
    df32:	9a05      	ldr	r2, [sp, #20]
    df34:	9803      	ldr	r0, [sp, #12]
    df36:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    df3a:	4282      	cmp	r2, r0
    df3c:	f04f 0300 	mov.w	r3, #0
    df40:	bfb8      	it	lt
    df42:	4602      	movlt	r2, r0
    df44:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    df48:	9307      	str	r3, [sp, #28]
    df4a:	9202      	str	r2, [sp, #8]
    df4c:	930f      	str	r3, [sp, #60]	; 0x3c
    df4e:	e660      	b.n	dc12 <_svfprintf_r+0x3c2>
    df50:	f002 0307 	and.w	r3, r2, #7
    df54:	08d2      	lsrs	r2, r2, #3
    df56:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    df5a:	08c9      	lsrs	r1, r1, #3
    df5c:	3330      	adds	r3, #48	; 0x30
    df5e:	ea52 0501 	orrs.w	r5, r2, r1
    df62:	4620      	mov	r0, r4
    df64:	f804 3d01 	strb.w	r3, [r4, #-1]!
    df68:	d1f2      	bne.n	df50 <_svfprintf_r+0x700>
    df6a:	9a02      	ldr	r2, [sp, #8]
    df6c:	07d1      	lsls	r1, r2, #31
    df6e:	f100 824d 	bmi.w	e40c <_svfprintf_r+0xbbc>
    df72:	ab50      	add	r3, sp, #320	; 0x140
    df74:	1b1b      	subs	r3, r3, r4
    df76:	4690      	mov	r8, r2
    df78:	9305      	str	r3, [sp, #20]
    df7a:	e7da      	b.n	df32 <_svfprintf_r+0x6e2>
    df7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df7e:	2b65      	cmp	r3, #101	; 0x65
    df80:	f340 80d4 	ble.w	e12c <_svfprintf_r+0x8dc>
    df84:	eeb5 8b40 	vcmp.f64	d8, #0.0
    df88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    df8c:	f040 81c1 	bne.w	e312 <_svfprintf_r+0xac2>
    df90:	9b25      	ldr	r3, [sp, #148]	; 0x94
    df92:	49ba      	ldr	r1, [pc, #744]	; (e27c <_svfprintf_r+0xa2c>)
    df94:	f8ca 1000 	str.w	r1, [sl]
    df98:	3301      	adds	r3, #1
    df9a:	3201      	adds	r2, #1
    df9c:	2101      	movs	r1, #1
    df9e:	2b07      	cmp	r3, #7
    dfa0:	9226      	str	r2, [sp, #152]	; 0x98
    dfa2:	9325      	str	r3, [sp, #148]	; 0x94
    dfa4:	f8ca 1004 	str.w	r1, [sl, #4]
    dfa8:	f300 8551 	bgt.w	ea4e <_svfprintf_r+0x11fe>
    dfac:	f10a 0a08 	add.w	sl, sl, #8
    dfb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    dfb2:	990e      	ldr	r1, [sp, #56]	; 0x38
    dfb4:	428b      	cmp	r3, r1
    dfb6:	f280 82d0 	bge.w	e55a <_svfprintf_r+0xd0a>
    dfba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dfbc:	9912      	ldr	r1, [sp, #72]	; 0x48
    dfbe:	441a      	add	r2, r3
    dfc0:	e9ca 1300 	strd	r1, r3, [sl]
    dfc4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dfc6:	9226      	str	r2, [sp, #152]	; 0x98
    dfc8:	3301      	adds	r3, #1
    dfca:	2b07      	cmp	r3, #7
    dfcc:	9325      	str	r3, [sp, #148]	; 0x94
    dfce:	f300 8397 	bgt.w	e700 <_svfprintf_r+0xeb0>
    dfd2:	f10a 0a08 	add.w	sl, sl, #8
    dfd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dfd8:	1e5c      	subs	r4, r3, #1
    dfda:	2c00      	cmp	r4, #0
    dfdc:	f77f add0 	ble.w	db80 <_svfprintf_r+0x330>
    dfe0:	2c10      	cmp	r4, #16
    dfe2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dfe4:	f340 856e 	ble.w	eac4 <_svfprintf_r+0x1274>
    dfe8:	ee1b 6a10 	vmov	r6, s22
    dfec:	2510      	movs	r5, #16
    dfee:	e005      	b.n	dffc <_svfprintf_r+0x7ac>
    dff0:	f10a 0a08 	add.w	sl, sl, #8
    dff4:	3c10      	subs	r4, #16
    dff6:	2c10      	cmp	r4, #16
    dff8:	f340 8564 	ble.w	eac4 <_svfprintf_r+0x1274>
    dffc:	3301      	adds	r3, #1
    dffe:	49a0      	ldr	r1, [pc, #640]	; (e280 <_svfprintf_r+0xa30>)
    e000:	3210      	adds	r2, #16
    e002:	2b07      	cmp	r3, #7
    e004:	e9ca 1500 	strd	r1, r5, [sl]
    e008:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e00c:	ddf0      	ble.n	dff0 <_svfprintf_r+0x7a0>
    e00e:	aa24      	add	r2, sp, #144	; 0x90
    e010:	4631      	mov	r1, r6
    e012:	4658      	mov	r0, fp
    e014:	f004 faa8 	bl	12568 <__ssprint_r>
    e018:	2800      	cmp	r0, #0
    e01a:	d17e      	bne.n	e11a <_svfprintf_r+0x8ca>
    e01c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e020:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e024:	e7e6      	b.n	dff4 <_svfprintf_r+0x7a4>
    e026:	9b06      	ldr	r3, [sp, #24]
    e028:	9902      	ldr	r1, [sp, #8]
    e02a:	1a5d      	subs	r5, r3, r1
    e02c:	2d00      	cmp	r5, #0
    e02e:	f77f ad8e 	ble.w	db4e <_svfprintf_r+0x2fe>
    e032:	2d10      	cmp	r5, #16
    e034:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e036:	dd21      	ble.n	e07c <_svfprintf_r+0x82c>
    e038:	9409      	str	r4, [sp, #36]	; 0x24
    e03a:	2610      	movs	r6, #16
    e03c:	ee1b 4a10 	vmov	r4, s22
    e040:	e004      	b.n	e04c <_svfprintf_r+0x7fc>
    e042:	3d10      	subs	r5, #16
    e044:	2d10      	cmp	r5, #16
    e046:	f10a 0a08 	add.w	sl, sl, #8
    e04a:	dd16      	ble.n	e07a <_svfprintf_r+0x82a>
    e04c:	3301      	adds	r3, #1
    e04e:	498c      	ldr	r1, [pc, #560]	; (e280 <_svfprintf_r+0xa30>)
    e050:	3210      	adds	r2, #16
    e052:	2b07      	cmp	r3, #7
    e054:	e9ca 1600 	strd	r1, r6, [sl]
    e058:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e05c:	ddf1      	ble.n	e042 <_svfprintf_r+0x7f2>
    e05e:	aa24      	add	r2, sp, #144	; 0x90
    e060:	4621      	mov	r1, r4
    e062:	4658      	mov	r0, fp
    e064:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e068:	f004 fa7e 	bl	12568 <__ssprint_r>
    e06c:	2800      	cmp	r0, #0
    e06e:	d154      	bne.n	e11a <_svfprintf_r+0x8ca>
    e070:	3d10      	subs	r5, #16
    e072:	2d10      	cmp	r5, #16
    e074:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e078:	dce8      	bgt.n	e04c <_svfprintf_r+0x7fc>
    e07a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e07c:	4980      	ldr	r1, [pc, #512]	; (e280 <_svfprintf_r+0xa30>)
    e07e:	f8ca 5004 	str.w	r5, [sl, #4]
    e082:	3301      	adds	r3, #1
    e084:	442a      	add	r2, r5
    e086:	2b07      	cmp	r3, #7
    e088:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e08c:	f8ca 1000 	str.w	r1, [sl]
    e090:	f300 8526 	bgt.w	eae0 <_svfprintf_r+0x1290>
    e094:	9b03      	ldr	r3, [sp, #12]
    e096:	9905      	ldr	r1, [sp, #20]
    e098:	1a5d      	subs	r5, r3, r1
    e09a:	2d00      	cmp	r5, #0
    e09c:	f10a 0a08 	add.w	sl, sl, #8
    e0a0:	f77f ad5b 	ble.w	db5a <_svfprintf_r+0x30a>
    e0a4:	2d10      	cmp	r5, #16
    e0a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e0a8:	dd1f      	ble.n	e0ea <_svfprintf_r+0x89a>
    e0aa:	4651      	mov	r1, sl
    e0ac:	2610      	movs	r6, #16
    e0ae:	ee1b aa10 	vmov	sl, s22
    e0b2:	e004      	b.n	e0be <_svfprintf_r+0x86e>
    e0b4:	3d10      	subs	r5, #16
    e0b6:	2d10      	cmp	r5, #16
    e0b8:	f101 0108 	add.w	r1, r1, #8
    e0bc:	dd14      	ble.n	e0e8 <_svfprintf_r+0x898>
    e0be:	3301      	adds	r3, #1
    e0c0:	486f      	ldr	r0, [pc, #444]	; (e280 <_svfprintf_r+0xa30>)
    e0c2:	3210      	adds	r2, #16
    e0c4:	2b07      	cmp	r3, #7
    e0c6:	e9c1 0600 	strd	r0, r6, [r1]
    e0ca:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e0ce:	ddf1      	ble.n	e0b4 <_svfprintf_r+0x864>
    e0d0:	aa24      	add	r2, sp, #144	; 0x90
    e0d2:	4651      	mov	r1, sl
    e0d4:	4658      	mov	r0, fp
    e0d6:	f004 fa47 	bl	12568 <__ssprint_r>
    e0da:	b9f0      	cbnz	r0, e11a <_svfprintf_r+0x8ca>
    e0dc:	3d10      	subs	r5, #16
    e0de:	2d10      	cmp	r5, #16
    e0e0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e0e4:	a927      	add	r1, sp, #156	; 0x9c
    e0e6:	dcea      	bgt.n	e0be <_svfprintf_r+0x86e>
    e0e8:	468a      	mov	sl, r1
    e0ea:	3301      	adds	r3, #1
    e0ec:	4964      	ldr	r1, [pc, #400]	; (e280 <_svfprintf_r+0xa30>)
    e0ee:	f8ca 5004 	str.w	r5, [sl, #4]
    e0f2:	442a      	add	r2, r5
    e0f4:	2b07      	cmp	r3, #7
    e0f6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e0fa:	f8ca 1000 	str.w	r1, [sl]
    e0fe:	f300 81da 	bgt.w	e4b6 <_svfprintf_r+0xc66>
    e102:	f10a 0a08 	add.w	sl, sl, #8
    e106:	e528      	b.n	db5a <_svfprintf_r+0x30a>
    e108:	ee1b 1a10 	vmov	r1, s22
    e10c:	aa24      	add	r2, sp, #144	; 0x90
    e10e:	4658      	mov	r0, fp
    e110:	f004 fa2a 	bl	12568 <__ssprint_r>
    e114:	2800      	cmp	r0, #0
    e116:	f43f ad47 	beq.w	dba8 <_svfprintf_r+0x358>
    e11a:	9b07      	ldr	r3, [sp, #28]
    e11c:	2b00      	cmp	r3, #0
    e11e:	f43f aca2 	beq.w	da66 <_svfprintf_r+0x216>
    e122:	9907      	ldr	r1, [sp, #28]
    e124:	4658      	mov	r0, fp
    e126:	f7fe f91d 	bl	c364 <_free_r>
    e12a:	e49c      	b.n	da66 <_svfprintf_r+0x216>
    e12c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e12e:	2b01      	cmp	r3, #1
    e130:	f340 817a 	ble.w	e428 <_svfprintf_r+0xbd8>
    e134:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e136:	f8ca 4000 	str.w	r4, [sl]
    e13a:	3301      	adds	r3, #1
    e13c:	3201      	adds	r2, #1
    e13e:	2101      	movs	r1, #1
    e140:	2b07      	cmp	r3, #7
    e142:	9226      	str	r2, [sp, #152]	; 0x98
    e144:	9325      	str	r3, [sp, #148]	; 0x94
    e146:	f8ca 1004 	str.w	r1, [sl, #4]
    e14a:	f300 81f8 	bgt.w	e53e <_svfprintf_r+0xcee>
    e14e:	f10a 0a08 	add.w	sl, sl, #8
    e152:	9910      	ldr	r1, [sp, #64]	; 0x40
    e154:	9812      	ldr	r0, [sp, #72]	; 0x48
    e156:	3301      	adds	r3, #1
    e158:	440a      	add	r2, r1
    e15a:	2b07      	cmp	r3, #7
    e15c:	e9ca 0100 	strd	r0, r1, [sl]
    e160:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e164:	f300 81dd 	bgt.w	e522 <_svfprintf_r+0xcd2>
    e168:	f10a 0a08 	add.w	sl, sl, #8
    e16c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    e170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e174:	f000 8177 	beq.w	e466 <_svfprintf_r+0xc16>
    e178:	990e      	ldr	r1, [sp, #56]	; 0x38
    e17a:	3301      	adds	r3, #1
    e17c:	3901      	subs	r1, #1
    e17e:	3401      	adds	r4, #1
    e180:	440a      	add	r2, r1
    e182:	2b07      	cmp	r3, #7
    e184:	f8ca 4000 	str.w	r4, [sl]
    e188:	9325      	str	r3, [sp, #148]	; 0x94
    e18a:	f8ca 1004 	str.w	r1, [sl, #4]
    e18e:	9226      	str	r2, [sp, #152]	; 0x98
    e190:	f300 815b 	bgt.w	e44a <_svfprintf_r+0xbfa>
    e194:	f10a 0a08 	add.w	sl, sl, #8
    e198:	9914      	ldr	r1, [sp, #80]	; 0x50
    e19a:	f8ca 1004 	str.w	r1, [sl, #4]
    e19e:	3301      	adds	r3, #1
    e1a0:	440a      	add	r2, r1
    e1a2:	2b07      	cmp	r3, #7
    e1a4:	a91e      	add	r1, sp, #120	; 0x78
    e1a6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e1aa:	f8ca 1000 	str.w	r1, [sl]
    e1ae:	f77f ace5 	ble.w	db7c <_svfprintf_r+0x32c>
    e1b2:	ee1b 1a10 	vmov	r1, s22
    e1b6:	aa24      	add	r2, sp, #144	; 0x90
    e1b8:	4658      	mov	r0, fp
    e1ba:	f004 f9d5 	bl	12568 <__ssprint_r>
    e1be:	2800      	cmp	r0, #0
    e1c0:	d1ab      	bne.n	e11a <_svfprintf_r+0x8ca>
    e1c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e1c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e1c8:	e4da      	b.n	db80 <_svfprintf_r+0x330>
    e1ca:	2d10      	cmp	r5, #16
    e1cc:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    e1d0:	4e2c      	ldr	r6, [pc, #176]	; (e284 <_svfprintf_r+0xa34>)
    e1d2:	dd24      	ble.n	e21e <_svfprintf_r+0x9ce>
    e1d4:	9417      	str	r4, [sp, #92]	; 0x5c
    e1d6:	2310      	movs	r3, #16
    e1d8:	ee1b 4a10 	vmov	r4, s22
    e1dc:	4608      	mov	r0, r1
    e1de:	e004      	b.n	e1ea <_svfprintf_r+0x99a>
    e1e0:	3d10      	subs	r5, #16
    e1e2:	2d10      	cmp	r5, #16
    e1e4:	f10a 0a08 	add.w	sl, sl, #8
    e1e8:	dd17      	ble.n	e21a <_svfprintf_r+0x9ca>
    e1ea:	3001      	adds	r0, #1
    e1ec:	3210      	adds	r2, #16
    e1ee:	2807      	cmp	r0, #7
    e1f0:	e9ca 6300 	strd	r6, r3, [sl]
    e1f4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    e1f8:	ddf2      	ble.n	e1e0 <_svfprintf_r+0x990>
    e1fa:	aa24      	add	r2, sp, #144	; 0x90
    e1fc:	4621      	mov	r1, r4
    e1fe:	4658      	mov	r0, fp
    e200:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e204:	f004 f9b0 	bl	12568 <__ssprint_r>
    e208:	2800      	cmp	r0, #0
    e20a:	d186      	bne.n	e11a <_svfprintf_r+0x8ca>
    e20c:	3d10      	subs	r5, #16
    e20e:	2d10      	cmp	r5, #16
    e210:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    e214:	f04f 0310 	mov.w	r3, #16
    e218:	dce7      	bgt.n	e1ea <_svfprintf_r+0x99a>
    e21a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    e21c:	4601      	mov	r1, r0
    e21e:	3101      	adds	r1, #1
    e220:	442a      	add	r2, r5
    e222:	2907      	cmp	r1, #7
    e224:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    e228:	f8ca 6000 	str.w	r6, [sl]
    e22c:	f8ca 5004 	str.w	r5, [sl, #4]
    e230:	f300 83bd 	bgt.w	e9ae <_svfprintf_r+0x115e>
    e234:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e238:	f10a 0a08 	add.w	sl, sl, #8
    e23c:	e45d      	b.n	dafa <_svfprintf_r+0x2aa>
    e23e:	f8cd 8008 	str.w	r8, [sp, #8]
    e242:	2a0a      	cmp	r2, #10
    e244:	f171 0300 	sbcs.w	r3, r1, #0
    e248:	f080 8345 	bcs.w	e8d6 <_svfprintf_r+0x1086>
    e24c:	3230      	adds	r2, #48	; 0x30
    e24e:	2301      	movs	r3, #1
    e250:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e254:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    e258:	9305      	str	r3, [sp, #20]
    e25a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    e25e:	e668      	b.n	df32 <_svfprintf_r+0x6e2>
    e260:	ee1b 1a10 	vmov	r1, s22
    e264:	aa24      	add	r2, sp, #144	; 0x90
    e266:	4658      	mov	r0, fp
    e268:	f004 f97e 	bl	12568 <__ssprint_r>
    e26c:	2800      	cmp	r0, #0
    e26e:	f47f af54 	bne.w	e11a <_svfprintf_r+0x8ca>
    e272:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e274:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e278:	e452      	b.n	db20 <_svfprintf_r+0x2d0>
    e27a:	bf00      	nop
    e27c:	20000c64 	.word	0x20000c64
    e280:	20008474 	.word	0x20008474
    e284:	200026e0 	.word	0x200026e0
    e288:	ee1b 1a10 	vmov	r1, s22
    e28c:	aa24      	add	r2, sp, #144	; 0x90
    e28e:	4658      	mov	r0, fp
    e290:	f004 f96a 	bl	12568 <__ssprint_r>
    e294:	2800      	cmp	r0, #0
    e296:	f47f af40 	bne.w	e11a <_svfprintf_r+0x8ca>
    e29a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e29c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e2a0:	e451      	b.n	db46 <_svfprintf_r+0x2f6>
    e2a2:	2c10      	cmp	r4, #16
    e2a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e2a6:	4ebe      	ldr	r6, [pc, #760]	; (e5a0 <_svfprintf_r+0xd50>)
    e2a8:	dd1f      	ble.n	e2ea <_svfprintf_r+0xa9a>
    e2aa:	ee1b 8a10 	vmov	r8, s22
    e2ae:	2510      	movs	r5, #16
    e2b0:	e004      	b.n	e2bc <_svfprintf_r+0xa6c>
    e2b2:	3c10      	subs	r4, #16
    e2b4:	2c10      	cmp	r4, #16
    e2b6:	f10a 0a08 	add.w	sl, sl, #8
    e2ba:	dd16      	ble.n	e2ea <_svfprintf_r+0xa9a>
    e2bc:	3301      	adds	r3, #1
    e2be:	3210      	adds	r2, #16
    e2c0:	2b07      	cmp	r3, #7
    e2c2:	e9ca 6500 	strd	r6, r5, [sl]
    e2c6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e2ca:	ddf2      	ble.n	e2b2 <_svfprintf_r+0xa62>
    e2cc:	aa24      	add	r2, sp, #144	; 0x90
    e2ce:	4641      	mov	r1, r8
    e2d0:	4658      	mov	r0, fp
    e2d2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e2d6:	f004 f947 	bl	12568 <__ssprint_r>
    e2da:	2800      	cmp	r0, #0
    e2dc:	f47f af1d 	bne.w	e11a <_svfprintf_r+0x8ca>
    e2e0:	3c10      	subs	r4, #16
    e2e2:	2c10      	cmp	r4, #16
    e2e4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e2e8:	dce8      	bgt.n	e2bc <_svfprintf_r+0xa6c>
    e2ea:	3301      	adds	r3, #1
    e2ec:	4422      	add	r2, r4
    e2ee:	2b07      	cmp	r3, #7
    e2f0:	e9ca 6400 	strd	r6, r4, [sl]
    e2f4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e2f8:	f77f ac4b 	ble.w	db92 <_svfprintf_r+0x342>
    e2fc:	ee1b 1a10 	vmov	r1, s22
    e300:	aa24      	add	r2, sp, #144	; 0x90
    e302:	4658      	mov	r0, fp
    e304:	f004 f930 	bl	12568 <__ssprint_r>
    e308:	2800      	cmp	r0, #0
    e30a:	f47f af06 	bne.w	e11a <_svfprintf_r+0x8ca>
    e30e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e310:	e43f      	b.n	db92 <_svfprintf_r+0x342>
    e312:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e314:	2900      	cmp	r1, #0
    e316:	f340 835a 	ble.w	e9ce <_svfprintf_r+0x117e>
    e31a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e31c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e31e:	429e      	cmp	r6, r3
    e320:	bfa8      	it	ge
    e322:	461e      	movge	r6, r3
    e324:	2e00      	cmp	r6, #0
    e326:	dd0b      	ble.n	e340 <_svfprintf_r+0xaf0>
    e328:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e32a:	3301      	adds	r3, #1
    e32c:	4432      	add	r2, r6
    e32e:	2b07      	cmp	r3, #7
    e330:	e9ca 4600 	strd	r4, r6, [sl]
    e334:	9226      	str	r2, [sp, #152]	; 0x98
    e336:	9325      	str	r3, [sp, #148]	; 0x94
    e338:	f300 8689 	bgt.w	f04e <_svfprintf_r+0x17fe>
    e33c:	f10a 0a08 	add.w	sl, sl, #8
    e340:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e342:	2e00      	cmp	r6, #0
    e344:	bfa8      	it	ge
    e346:	1bad      	subge	r5, r5, r6
    e348:	2d00      	cmp	r5, #0
    e34a:	f300 8203 	bgt.w	e754 <_svfprintf_r+0xf04>
    e34e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e350:	f418 6f80 	tst.w	r8, #1024	; 0x400
    e354:	4423      	add	r3, r4
    e356:	9305      	str	r3, [sp, #20]
    e358:	f040 821f 	bne.w	e79a <_svfprintf_r+0xf4a>
    e35c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e35e:	990e      	ldr	r1, [sp, #56]	; 0x38
    e360:	428b      	cmp	r3, r1
    e362:	db03      	blt.n	e36c <_svfprintf_r+0xb1c>
    e364:	f018 0f01 	tst.w	r8, #1
    e368:	f000 84cf 	beq.w	ed0a <_svfprintf_r+0x14ba>
    e36c:	9910      	ldr	r1, [sp, #64]	; 0x40
    e36e:	9812      	ldr	r0, [sp, #72]	; 0x48
    e370:	440a      	add	r2, r1
    e372:	e9ca 0100 	strd	r0, r1, [sl]
    e376:	9925      	ldr	r1, [sp, #148]	; 0x94
    e378:	9226      	str	r2, [sp, #152]	; 0x98
    e37a:	3101      	adds	r1, #1
    e37c:	2907      	cmp	r1, #7
    e37e:	9125      	str	r1, [sp, #148]	; 0x94
    e380:	f300 86a5 	bgt.w	f0ce <_svfprintf_r+0x187e>
    e384:	f10a 0a08 	add.w	sl, sl, #8
    e388:	990e      	ldr	r1, [sp, #56]	; 0x38
    e38a:	1865      	adds	r5, r4, r1
    e38c:	1acc      	subs	r4, r1, r3
    e38e:	9b05      	ldr	r3, [sp, #20]
    e390:	1aed      	subs	r5, r5, r3
    e392:	42a5      	cmp	r5, r4
    e394:	bfa8      	it	ge
    e396:	4625      	movge	r5, r4
    e398:	2d00      	cmp	r5, #0
    e39a:	dd0d      	ble.n	e3b8 <_svfprintf_r+0xb68>
    e39c:	f8ca 3000 	str.w	r3, [sl]
    e3a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e3a2:	f8ca 5004 	str.w	r5, [sl, #4]
    e3a6:	3301      	adds	r3, #1
    e3a8:	442a      	add	r2, r5
    e3aa:	2b07      	cmp	r3, #7
    e3ac:	9226      	str	r2, [sp, #152]	; 0x98
    e3ae:	9325      	str	r3, [sp, #148]	; 0x94
    e3b0:	f300 86bb 	bgt.w	f12a <_svfprintf_r+0x18da>
    e3b4:	f10a 0a08 	add.w	sl, sl, #8
    e3b8:	2d00      	cmp	r5, #0
    e3ba:	bfa8      	it	ge
    e3bc:	1b64      	subge	r4, r4, r5
    e3be:	2c00      	cmp	r4, #0
    e3c0:	f77f abde 	ble.w	db80 <_svfprintf_r+0x330>
    e3c4:	2c10      	cmp	r4, #16
    e3c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e3c8:	f340 837c 	ble.w	eac4 <_svfprintf_r+0x1274>
    e3cc:	ee1b 6a10 	vmov	r6, s22
    e3d0:	2510      	movs	r5, #16
    e3d2:	e005      	b.n	e3e0 <_svfprintf_r+0xb90>
    e3d4:	f10a 0a08 	add.w	sl, sl, #8
    e3d8:	3c10      	subs	r4, #16
    e3da:	2c10      	cmp	r4, #16
    e3dc:	f340 8372 	ble.w	eac4 <_svfprintf_r+0x1274>
    e3e0:	3301      	adds	r3, #1
    e3e2:	4970      	ldr	r1, [pc, #448]	; (e5a4 <_svfprintf_r+0xd54>)
    e3e4:	3210      	adds	r2, #16
    e3e6:	2b07      	cmp	r3, #7
    e3e8:	e9ca 1500 	strd	r1, r5, [sl]
    e3ec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e3f0:	ddf0      	ble.n	e3d4 <_svfprintf_r+0xb84>
    e3f2:	aa24      	add	r2, sp, #144	; 0x90
    e3f4:	4631      	mov	r1, r6
    e3f6:	4658      	mov	r0, fp
    e3f8:	f004 f8b6 	bl	12568 <__ssprint_r>
    e3fc:	2800      	cmp	r0, #0
    e3fe:	f47f ae8c 	bne.w	e11a <_svfprintf_r+0x8ca>
    e402:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e406:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e40a:	e7e5      	b.n	e3d8 <_svfprintf_r+0xb88>
    e40c:	2b30      	cmp	r3, #48	; 0x30
    e40e:	f43f ad8b 	beq.w	df28 <_svfprintf_r+0x6d8>
    e412:	2330      	movs	r3, #48	; 0x30
    e414:	3802      	subs	r0, #2
    e416:	f804 3c01 	strb.w	r3, [r4, #-1]
    e41a:	ab50      	add	r3, sp, #320	; 0x140
    e41c:	1a1b      	subs	r3, r3, r0
    e41e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e422:	9305      	str	r3, [sp, #20]
    e424:	4604      	mov	r4, r0
    e426:	e584      	b.n	df32 <_svfprintf_r+0x6e2>
    e428:	f018 0f01 	tst.w	r8, #1
    e42c:	f47f ae82 	bne.w	e134 <_svfprintf_r+0x8e4>
    e430:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e432:	f8ca 4000 	str.w	r4, [sl]
    e436:	3301      	adds	r3, #1
    e438:	3201      	adds	r2, #1
    e43a:	2101      	movs	r1, #1
    e43c:	2b07      	cmp	r3, #7
    e43e:	9226      	str	r2, [sp, #152]	; 0x98
    e440:	9325      	str	r3, [sp, #148]	; 0x94
    e442:	f8ca 1004 	str.w	r1, [sl, #4]
    e446:	f77f aea5 	ble.w	e194 <_svfprintf_r+0x944>
    e44a:	ee1b 1a10 	vmov	r1, s22
    e44e:	aa24      	add	r2, sp, #144	; 0x90
    e450:	4658      	mov	r0, fp
    e452:	f004 f889 	bl	12568 <__ssprint_r>
    e456:	2800      	cmp	r0, #0
    e458:	f47f ae5f 	bne.w	e11a <_svfprintf_r+0x8ca>
    e45c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e460:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e464:	e698      	b.n	e198 <_svfprintf_r+0x948>
    e466:	990e      	ldr	r1, [sp, #56]	; 0x38
    e468:	1e4c      	subs	r4, r1, #1
    e46a:	2c00      	cmp	r4, #0
    e46c:	f77f ae94 	ble.w	e198 <_svfprintf_r+0x948>
    e470:	2c10      	cmp	r4, #16
    e472:	f340 8361 	ble.w	eb38 <_svfprintf_r+0x12e8>
    e476:	ee1b 6a10 	vmov	r6, s22
    e47a:	2510      	movs	r5, #16
    e47c:	e005      	b.n	e48a <_svfprintf_r+0xc3a>
    e47e:	f10a 0a08 	add.w	sl, sl, #8
    e482:	3c10      	subs	r4, #16
    e484:	2c10      	cmp	r4, #16
    e486:	f340 8357 	ble.w	eb38 <_svfprintf_r+0x12e8>
    e48a:	3301      	adds	r3, #1
    e48c:	4945      	ldr	r1, [pc, #276]	; (e5a4 <_svfprintf_r+0xd54>)
    e48e:	3210      	adds	r2, #16
    e490:	2b07      	cmp	r3, #7
    e492:	e9ca 1500 	strd	r1, r5, [sl]
    e496:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e49a:	ddf0      	ble.n	e47e <_svfprintf_r+0xc2e>
    e49c:	aa24      	add	r2, sp, #144	; 0x90
    e49e:	4631      	mov	r1, r6
    e4a0:	4658      	mov	r0, fp
    e4a2:	f004 f861 	bl	12568 <__ssprint_r>
    e4a6:	2800      	cmp	r0, #0
    e4a8:	f47f ae37 	bne.w	e11a <_svfprintf_r+0x8ca>
    e4ac:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e4b0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e4b4:	e7e5      	b.n	e482 <_svfprintf_r+0xc32>
    e4b6:	ee1b 1a10 	vmov	r1, s22
    e4ba:	aa24      	add	r2, sp, #144	; 0x90
    e4bc:	4658      	mov	r0, fp
    e4be:	f004 f853 	bl	12568 <__ssprint_r>
    e4c2:	2800      	cmp	r0, #0
    e4c4:	f47f ae29 	bne.w	e11a <_svfprintf_r+0x8ca>
    e4c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e4ca:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e4ce:	f7ff bb44 	b.w	db5a <_svfprintf_r+0x30a>
    e4d2:	9b02      	ldr	r3, [sp, #8]
    e4d4:	f013 0310 	ands.w	r3, r3, #16
    e4d8:	f040 80c1 	bne.w	e65e <_svfprintf_r+0xe0e>
    e4dc:	9a02      	ldr	r2, [sp, #8]
    e4de:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    e4e2:	f000 837a 	beq.w	ebda <_svfprintf_r+0x138a>
    e4e6:	9808      	ldr	r0, [sp, #32]
    e4e8:	f850 2b04 	ldr.w	r2, [r0], #4
    e4ec:	9008      	str	r0, [sp, #32]
    e4ee:	4619      	mov	r1, r3
    e4f0:	b292      	uxth	r2, r2
    e4f2:	2301      	movs	r3, #1
    e4f4:	e451      	b.n	dd9a <_svfprintf_r+0x54a>
    e4f6:	f018 0310 	ands.w	r3, r8, #16
    e4fa:	d155      	bne.n	e5a8 <_svfprintf_r+0xd58>
    e4fc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e500:	f000 835d 	beq.w	ebbe <_svfprintf_r+0x136e>
    e504:	9808      	ldr	r0, [sp, #32]
    e506:	f850 2b04 	ldr.w	r2, [r0], #4
    e50a:	9008      	str	r0, [sp, #32]
    e50c:	4619      	mov	r1, r3
    e50e:	b292      	uxth	r2, r2
    e510:	e4a8      	b.n	de64 <_svfprintf_r+0x614>
    e512:	4252      	negs	r2, r2
    e514:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e518:	f8cd 8008 	str.w	r8, [sp, #8]
    e51c:	202d      	movs	r0, #45	; 0x2d
    e51e:	2301      	movs	r3, #1
    e520:	e43c      	b.n	dd9c <_svfprintf_r+0x54c>
    e522:	ee1b 1a10 	vmov	r1, s22
    e526:	aa24      	add	r2, sp, #144	; 0x90
    e528:	4658      	mov	r0, fp
    e52a:	f004 f81d 	bl	12568 <__ssprint_r>
    e52e:	2800      	cmp	r0, #0
    e530:	f47f adf3 	bne.w	e11a <_svfprintf_r+0x8ca>
    e534:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e538:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e53c:	e616      	b.n	e16c <_svfprintf_r+0x91c>
    e53e:	ee1b 1a10 	vmov	r1, s22
    e542:	aa24      	add	r2, sp, #144	; 0x90
    e544:	4658      	mov	r0, fp
    e546:	f004 f80f 	bl	12568 <__ssprint_r>
    e54a:	2800      	cmp	r0, #0
    e54c:	f47f ade5 	bne.w	e11a <_svfprintf_r+0x8ca>
    e550:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e554:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e558:	e5fb      	b.n	e152 <_svfprintf_r+0x902>
    e55a:	f018 0f01 	tst.w	r8, #1
    e55e:	f43f ab0f 	beq.w	db80 <_svfprintf_r+0x330>
    e562:	e52a      	b.n	dfba <_svfprintf_r+0x76a>
    e564:	9308      	str	r3, [sp, #32]
    e566:	f899 3000 	ldrb.w	r3, [r9]
    e56a:	f7ff b9cd 	b.w	d908 <_svfprintf_r+0xb8>
    e56e:	ac50      	add	r4, sp, #320	; 0x140
    e570:	e4df      	b.n	df32 <_svfprintf_r+0x6e2>
    e572:	f418 7f00 	tst.w	r8, #512	; 0x200
    e576:	f040 83db 	bne.w	ed30 <_svfprintf_r+0x14e0>
    e57a:	f853 2b04 	ldr.w	r2, [r3], #4
    e57e:	9308      	str	r3, [sp, #32]
    e580:	17d1      	asrs	r1, r2, #31
    e582:	460b      	mov	r3, r1
    e584:	f7ff bbb6 	b.w	dcf4 <_svfprintf_r+0x4a4>
    e588:	9b08      	ldr	r3, [sp, #32]
    e58a:	9804      	ldr	r0, [sp, #16]
    e58c:	f853 1b04 	ldr.w	r1, [r3], #4
    e590:	9308      	str	r3, [sp, #32]
    e592:	17c2      	asrs	r2, r0, #31
    e594:	e9c1 0200 	strd	r0, r2, [r1]
    e598:	464c      	mov	r4, r9
    e59a:	f7ff b98b 	b.w	d8b4 <_svfprintf_r+0x64>
    e59e:	bf00      	nop
    e5a0:	200026e0 	.word	0x200026e0
    e5a4:	20008474 	.word	0x20008474
    e5a8:	9b08      	ldr	r3, [sp, #32]
    e5aa:	f853 2b04 	ldr.w	r2, [r3], #4
    e5ae:	9308      	str	r3, [sp, #32]
    e5b0:	e458      	b.n	de64 <_svfprintf_r+0x614>
    e5b2:	eeb4 8b48 	vcmp.f64	d8, d8
    e5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e5ba:	f180 8694 	bvs.w	f2e6 <_svfprintf_r+0x1a96>
    e5be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5c0:	2b61      	cmp	r3, #97	; 0x61
    e5c2:	f000 8552 	beq.w	f06a <_svfprintf_r+0x181a>
    e5c6:	2b41      	cmp	r3, #65	; 0x41
    e5c8:	f000 85c0 	beq.w	f14c <_svfprintf_r+0x18fc>
    e5cc:	9b03      	ldr	r3, [sp, #12]
    e5ce:	3301      	adds	r3, #1
    e5d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5d2:	f023 0520 	bic.w	r5, r3, #32
    e5d6:	f000 8480 	beq.w	eeda <_svfprintf_r+0x168a>
    e5da:	2d47      	cmp	r5, #71	; 0x47
    e5dc:	d104      	bne.n	e5e8 <_svfprintf_r+0xd98>
    e5de:	9b03      	ldr	r3, [sp, #12]
    e5e0:	2b00      	cmp	r3, #0
    e5e2:	bf08      	it	eq
    e5e4:	2301      	moveq	r3, #1
    e5e6:	9303      	str	r3, [sp, #12]
    e5e8:	ee18 3a90 	vmov	r3, s17
    e5ec:	2b00      	cmp	r3, #0
    e5ee:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    e5f2:	4646      	mov	r6, r8
    e5f4:	f2c0 8618 	blt.w	f228 <_svfprintf_r+0x19d8>
    e5f8:	eeb0 ab48 	vmov.f64	d10, d8
    e5fc:	2300      	movs	r3, #0
    e5fe:	4690      	mov	r8, r2
    e600:	9309      	str	r3, [sp, #36]	; 0x24
    e602:	9307      	str	r3, [sp, #28]
    e604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e606:	3b41      	subs	r3, #65	; 0x41
    e608:	2b25      	cmp	r3, #37	; 0x25
    e60a:	f200 8398 	bhi.w	ed3e <_svfprintf_r+0x14ee>
    e60e:	e8df f013 	tbh	[pc, r3, lsl #1]
    e612:	046f      	.short	0x046f
    e614:	03960396 	.word	0x03960396
    e618:	04680396 	.word	0x04680396
    e61c:	0396046c 	.word	0x0396046c
    e620:	03960396 	.word	0x03960396
    e624:	03960396 	.word	0x03960396
    e628:	03960396 	.word	0x03960396
    e62c:	03960396 	.word	0x03960396
    e630:	03960396 	.word	0x03960396
    e634:	03960396 	.word	0x03960396
    e638:	03960396 	.word	0x03960396
    e63c:	03960396 	.word	0x03960396
    e640:	03960396 	.word	0x03960396
    e644:	03960396 	.word	0x03960396
    e648:	03960396 	.word	0x03960396
    e64c:	03960396 	.word	0x03960396
    e650:	03960396 	.word	0x03960396
    e654:	03960396 	.word	0x03960396
    e658:	04680396 	.word	0x04680396
    e65c:	046c      	.short	0x046c
    e65e:	9b08      	ldr	r3, [sp, #32]
    e660:	f853 2b04 	ldr.w	r2, [r3], #4
    e664:	9308      	str	r3, [sp, #32]
    e666:	2301      	movs	r3, #1
    e668:	f7ff bb97 	b.w	dd9a <_svfprintf_r+0x54a>
    e66c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e66e:	2b00      	cmp	r3, #0
    e670:	f43f a9cf 	beq.w	da12 <_svfprintf_r+0x1c2>
    e674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e676:	781b      	ldrb	r3, [r3, #0]
    e678:	2b00      	cmp	r3, #0
    e67a:	f43f a9ca 	beq.w	da12 <_svfprintf_r+0x1c2>
    e67e:	f899 3000 	ldrb.w	r3, [r9]
    e682:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    e686:	f7ff b93f 	b.w	d908 <_svfprintf_r+0xb8>
    e68a:	930b      	str	r3, [sp, #44]	; 0x2c
    e68c:	f8cd 8008 	str.w	r8, [sp, #8]
    e690:	f7ff bbf1 	b.w	de76 <_svfprintf_r+0x626>
    e694:	930b      	str	r3, [sp, #44]	; 0x2c
    e696:	4b9a      	ldr	r3, [pc, #616]	; (e900 <_svfprintf_r+0x10b0>)
    e698:	9311      	str	r3, [sp, #68]	; 0x44
    e69a:	f018 0120 	ands.w	r1, r8, #32
    e69e:	f000 8105 	beq.w	e8ac <_svfprintf_r+0x105c>
    e6a2:	9b08      	ldr	r3, [sp, #32]
    e6a4:	3307      	adds	r3, #7
    e6a6:	f023 0307 	bic.w	r3, r3, #7
    e6aa:	6859      	ldr	r1, [r3, #4]
    e6ac:	f853 2b08 	ldr.w	r2, [r3], #8
    e6b0:	9308      	str	r3, [sp, #32]
    e6b2:	f018 0f01 	tst.w	r8, #1
    e6b6:	d00a      	beq.n	e6ce <_svfprintf_r+0xe7e>
    e6b8:	ea52 0301 	orrs.w	r3, r2, r1
    e6bc:	d007      	beq.n	e6ce <_svfprintf_r+0xe7e>
    e6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e6c0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    e6c4:	2330      	movs	r3, #48	; 0x30
    e6c6:	f048 0802 	orr.w	r8, r8, #2
    e6ca:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    e6ce:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    e6d2:	9302      	str	r3, [sp, #8]
    e6d4:	2302      	movs	r3, #2
    e6d6:	f7ff bb60 	b.w	dd9a <_svfprintf_r+0x54a>
    e6da:	930b      	str	r3, [sp, #44]	; 0x2c
    e6dc:	f7ff bbb6 	b.w	de4c <_svfprintf_r+0x5fc>
    e6e0:	930b      	str	r3, [sp, #44]	; 0x2c
    e6e2:	4b88      	ldr	r3, [pc, #544]	; (e904 <_svfprintf_r+0x10b4>)
    e6e4:	9311      	str	r3, [sp, #68]	; 0x44
    e6e6:	e7d8      	b.n	e69a <_svfprintf_r+0xe4a>
    e6e8:	9b08      	ldr	r3, [sp, #32]
    e6ea:	2101      	movs	r1, #1
    e6ec:	f853 2b04 	ldr.w	r2, [r3], #4
    e6f0:	9102      	str	r1, [sp, #8]
    e6f2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    e6f6:	9308      	str	r3, [sp, #32]
    e6f8:	9105      	str	r1, [sp, #20]
    e6fa:	ac37      	add	r4, sp, #220	; 0xdc
    e6fc:	f7ff baaf 	b.w	dc5e <_svfprintf_r+0x40e>
    e700:	ee1b 1a10 	vmov	r1, s22
    e704:	aa24      	add	r2, sp, #144	; 0x90
    e706:	4658      	mov	r0, fp
    e708:	f003 ff2e 	bl	12568 <__ssprint_r>
    e70c:	2800      	cmp	r0, #0
    e70e:	f47f ad04 	bne.w	e11a <_svfprintf_r+0x8ca>
    e712:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e714:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e718:	e45d      	b.n	dfd6 <_svfprintf_r+0x786>
    e71a:	9b03      	ldr	r3, [sp, #12]
    e71c:	9407      	str	r4, [sp, #28]
    e71e:	2b06      	cmp	r3, #6
    e720:	4622      	mov	r2, r4
    e722:	bf28      	it	cs
    e724:	2306      	movcs	r3, #6
    e726:	9403      	str	r4, [sp, #12]
    e728:	4621      	mov	r1, r4
    e72a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    e72e:	4c76      	ldr	r4, [pc, #472]	; (e908 <_svfprintf_r+0x10b8>)
    e730:	9302      	str	r3, [sp, #8]
    e732:	9305      	str	r3, [sp, #20]
    e734:	920f      	str	r2, [sp, #60]	; 0x3c
    e736:	f7ff ba6c 	b.w	dc12 <_svfprintf_r+0x3c2>
    e73a:	2140      	movs	r1, #64	; 0x40
    e73c:	4658      	mov	r0, fp
    e73e:	f7fb fa3d 	bl	9bbc <_malloc_r>
    e742:	6020      	str	r0, [r4, #0]
    e744:	6120      	str	r0, [r4, #16]
    e746:	2800      	cmp	r0, #0
    e748:	f000 860f 	beq.w	f36a <_svfprintf_r+0x1b1a>
    e74c:	2340      	movs	r3, #64	; 0x40
    e74e:	6163      	str	r3, [r4, #20]
    e750:	f7ff b89e 	b.w	d890 <_svfprintf_r+0x40>
    e754:	2d10      	cmp	r5, #16
    e756:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e758:	f340 825d 	ble.w	ec16 <_svfprintf_r+0x13c6>
    e75c:	4651      	mov	r1, sl
    e75e:	2610      	movs	r6, #16
    e760:	ee1b aa10 	vmov	sl, s22
    e764:	e004      	b.n	e770 <_svfprintf_r+0xf20>
    e766:	3108      	adds	r1, #8
    e768:	3d10      	subs	r5, #16
    e76a:	2d10      	cmp	r5, #16
    e76c:	f340 8252 	ble.w	ec14 <_svfprintf_r+0x13c4>
    e770:	3301      	adds	r3, #1
    e772:	4866      	ldr	r0, [pc, #408]	; (e90c <_svfprintf_r+0x10bc>)
    e774:	3210      	adds	r2, #16
    e776:	2b07      	cmp	r3, #7
    e778:	e9c1 0600 	strd	r0, r6, [r1]
    e77c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e780:	ddf1      	ble.n	e766 <_svfprintf_r+0xf16>
    e782:	aa24      	add	r2, sp, #144	; 0x90
    e784:	4651      	mov	r1, sl
    e786:	4658      	mov	r0, fp
    e788:	f003 feee 	bl	12568 <__ssprint_r>
    e78c:	2800      	cmp	r0, #0
    e78e:	f47f acc4 	bne.w	e11a <_svfprintf_r+0x8ca>
    e792:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e796:	a927      	add	r1, sp, #156	; 0x9c
    e798:	e7e6      	b.n	e768 <_svfprintf_r+0xf18>
    e79a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e79c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    e7a0:	18e3      	adds	r3, r4, r3
    e7a2:	9303      	str	r3, [sp, #12]
    e7a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e7a6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    e7aa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    e7ac:	9d05      	ldr	r5, [sp, #20]
    e7ae:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    e7b2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    e7b6:	940b      	str	r4, [sp, #44]	; 0x2c
    e7b8:	ee1b 1a10 	vmov	r1, s22
    e7bc:	4650      	mov	r0, sl
    e7be:	2b00      	cmp	r3, #0
    e7c0:	d034      	beq.n	e82c <_svfprintf_r+0xfdc>
    e7c2:	f1b8 0f00 	cmp.w	r8, #0
    e7c6:	d135      	bne.n	e834 <_svfprintf_r+0xfe4>
    e7c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e7ca:	3b01      	subs	r3, #1
    e7cc:	3e01      	subs	r6, #1
    e7ce:	930d      	str	r3, [sp, #52]	; 0x34
    e7d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e7d2:	e9c0 3900 	strd	r3, r9, [r0]
    e7d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e7d8:	3301      	adds	r3, #1
    e7da:	444a      	add	r2, r9
    e7dc:	2b07      	cmp	r3, #7
    e7de:	9226      	str	r2, [sp, #152]	; 0x98
    e7e0:	9325      	str	r3, [sp, #148]	; 0x94
    e7e2:	dc6c      	bgt.n	e8be <_svfprintf_r+0x106e>
    e7e4:	3008      	adds	r0, #8
    e7e6:	9b03      	ldr	r3, [sp, #12]
    e7e8:	f896 c000 	ldrb.w	ip, [r6]
    e7ec:	1b5b      	subs	r3, r3, r5
    e7ee:	4563      	cmp	r3, ip
    e7f0:	bfa8      	it	ge
    e7f2:	4663      	movge	r3, ip
    e7f4:	2b00      	cmp	r3, #0
    e7f6:	469a      	mov	sl, r3
    e7f8:	dd0c      	ble.n	e814 <_svfprintf_r+0xfc4>
    e7fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e7fc:	3401      	adds	r4, #1
    e7fe:	441a      	add	r2, r3
    e800:	2c07      	cmp	r4, #7
    e802:	e9c0 5300 	strd	r5, r3, [r0]
    e806:	9226      	str	r2, [sp, #152]	; 0x98
    e808:	9425      	str	r4, [sp, #148]	; 0x94
    e80a:	f300 8177 	bgt.w	eafc <_svfprintf_r+0x12ac>
    e80e:	f896 c000 	ldrb.w	ip, [r6]
    e812:	3008      	adds	r0, #8
    e814:	f1ba 0f00 	cmp.w	sl, #0
    e818:	bfac      	ite	ge
    e81a:	ebac 040a 	subge.w	r4, ip, sl
    e81e:	4664      	movlt	r4, ip
    e820:	2c00      	cmp	r4, #0
    e822:	dc0a      	bgt.n	e83a <_svfprintf_r+0xfea>
    e824:	4465      	add	r5, ip
    e826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e828:	2b00      	cmp	r3, #0
    e82a:	d1ca      	bne.n	e7c2 <_svfprintf_r+0xf72>
    e82c:	f1b8 0f00 	cmp.w	r8, #0
    e830:	f000 83ac 	beq.w	ef8c <_svfprintf_r+0x173c>
    e834:	f108 38ff 	add.w	r8, r8, #4294967295
    e838:	e7ca      	b.n	e7d0 <_svfprintf_r+0xf80>
    e83a:	2c10      	cmp	r4, #16
    e83c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    e840:	dd24      	ble.n	e88c <_svfprintf_r+0x103c>
    e842:	9505      	str	r5, [sp, #20]
    e844:	f04f 0a10 	mov.w	sl, #16
    e848:	4663      	mov	r3, ip
    e84a:	460d      	mov	r5, r1
    e84c:	e004      	b.n	e858 <_svfprintf_r+0x1008>
    e84e:	3c10      	subs	r4, #16
    e850:	2c10      	cmp	r4, #16
    e852:	f100 0008 	add.w	r0, r0, #8
    e856:	dd16      	ble.n	e886 <_svfprintf_r+0x1036>
    e858:	3301      	adds	r3, #1
    e85a:	492c      	ldr	r1, [pc, #176]	; (e90c <_svfprintf_r+0x10bc>)
    e85c:	3210      	adds	r2, #16
    e85e:	2b07      	cmp	r3, #7
    e860:	e9c0 1a00 	strd	r1, sl, [r0]
    e864:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e868:	ddf1      	ble.n	e84e <_svfprintf_r+0xffe>
    e86a:	aa24      	add	r2, sp, #144	; 0x90
    e86c:	4629      	mov	r1, r5
    e86e:	4658      	mov	r0, fp
    e870:	f003 fe7a 	bl	12568 <__ssprint_r>
    e874:	2800      	cmp	r0, #0
    e876:	f47f ac50 	bne.w	e11a <_svfprintf_r+0x8ca>
    e87a:	3c10      	subs	r4, #16
    e87c:	2c10      	cmp	r4, #16
    e87e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e882:	a827      	add	r0, sp, #156	; 0x9c
    e884:	dce8      	bgt.n	e858 <_svfprintf_r+0x1008>
    e886:	4629      	mov	r1, r5
    e888:	9d05      	ldr	r5, [sp, #20]
    e88a:	469c      	mov	ip, r3
    e88c:	f10c 0301 	add.w	r3, ip, #1
    e890:	4422      	add	r2, r4
    e892:	6044      	str	r4, [r0, #4]
    e894:	2b07      	cmp	r3, #7
    e896:	4c1d      	ldr	r4, [pc, #116]	; (e90c <_svfprintf_r+0x10bc>)
    e898:	6004      	str	r4, [r0, #0]
    e89a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e89e:	f300 83c6 	bgt.w	f02e <_svfprintf_r+0x17de>
    e8a2:	f896 c000 	ldrb.w	ip, [r6]
    e8a6:	3008      	adds	r0, #8
    e8a8:	4465      	add	r5, ip
    e8aa:	e7bc      	b.n	e826 <_svfprintf_r+0xfd6>
    e8ac:	f018 0310 	ands.w	r3, r8, #16
    e8b0:	f000 80c2 	beq.w	ea38 <_svfprintf_r+0x11e8>
    e8b4:	9b08      	ldr	r3, [sp, #32]
    e8b6:	f853 2b04 	ldr.w	r2, [r3], #4
    e8ba:	9308      	str	r3, [sp, #32]
    e8bc:	e6f9      	b.n	e6b2 <_svfprintf_r+0xe62>
    e8be:	aa24      	add	r2, sp, #144	; 0x90
    e8c0:	4658      	mov	r0, fp
    e8c2:	9105      	str	r1, [sp, #20]
    e8c4:	f003 fe50 	bl	12568 <__ssprint_r>
    e8c8:	2800      	cmp	r0, #0
    e8ca:	f47f ac26 	bne.w	e11a <_svfprintf_r+0x8ca>
    e8ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e8d0:	9905      	ldr	r1, [sp, #20]
    e8d2:	a827      	add	r0, sp, #156	; 0x9c
    e8d4:	e787      	b.n	e7e6 <_svfprintf_r+0xf96>
    e8d6:	9802      	ldr	r0, [sp, #8]
    e8d8:	f8cd a01c 	str.w	sl, [sp, #28]
    e8dc:	ac50      	add	r4, sp, #320	; 0x140
    e8de:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    e8e2:	2500      	movs	r5, #0
    e8e4:	ee0a ba10 	vmov	s20, fp
    e8e8:	4b09      	ldr	r3, [pc, #36]	; (e910 <_svfprintf_r+0x10c0>)
    e8ea:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    e8ee:	f8cd 9014 	str.w	r9, [sp, #20]
    e8f2:	46a3      	mov	fp, r4
    e8f4:	f04f 0805 	mov.w	r8, #5
    e8f8:	46ac      	mov	ip, r5
    e8fa:	4604      	mov	r4, r0
    e8fc:	e010      	b.n	e920 <_svfprintf_r+0x10d0>
    e8fe:	bf00      	nop
    e900:	20000c34 	.word	0x20000c34
    e904:	20000c48 	.word	0x20000c48
    e908:	20000c5c 	.word	0x20000c5c
    e90c:	20008474 	.word	0x20008474
    e910:	cccccccd 	.word	0xcccccccd
    e914:	2a0a      	cmp	r2, #10
    e916:	f171 0100 	sbcs.w	r1, r1, #0
    e91a:	d336      	bcc.n	e98a <_svfprintf_r+0x113a>
    e91c:	464a      	mov	r2, r9
    e91e:	4631      	mov	r1, r6
    e920:	1850      	adds	r0, r2, r1
    e922:	f140 0000 	adc.w	r0, r0, #0
    e926:	fba3 5600 	umull	r5, r6, r3, r0
    e92a:	f026 0503 	bic.w	r5, r6, #3
    e92e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    e932:	1b40      	subs	r0, r0, r5
    e934:	1a15      	subs	r5, r2, r0
    e936:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    e93a:	f161 0e00 	sbc.w	lr, r1, #0
    e93e:	fb06 f605 	mul.w	r6, r6, r5
    e942:	fba5 9503 	umull	r9, r5, r5, r3
    e946:	fb03 660e 	mla	r6, r3, lr, r6
    e94a:	f009 0e01 	and.w	lr, r9, #1
    e94e:	442e      	add	r6, r5
    e950:	fbae 5e08 	umull	r5, lr, lr, r8
    e954:	182d      	adds	r5, r5, r0
    e956:	ea4f 0959 	mov.w	r9, r9, lsr #1
    e95a:	3530      	adds	r5, #48	; 0x30
    e95c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    e960:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    e964:	f10c 0c01 	add.w	ip, ip, #1
    e968:	f10b 3bff 	add.w	fp, fp, #4294967295
    e96c:	0876      	lsrs	r6, r6, #1
    e96e:	2c00      	cmp	r4, #0
    e970:	d0d0      	beq.n	e914 <_svfprintf_r+0x10c4>
    e972:	f89a 0000 	ldrb.w	r0, [sl]
    e976:	4584      	cmp	ip, r0
    e978:	d1cc      	bne.n	e914 <_svfprintf_r+0x10c4>
    e97a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    e97e:	d0c9      	beq.n	e914 <_svfprintf_r+0x10c4>
    e980:	2a0a      	cmp	r2, #10
    e982:	f171 0100 	sbcs.w	r1, r1, #0
    e986:	f080 818f 	bcs.w	eca8 <_svfprintf_r+0x1458>
    e98a:	465c      	mov	r4, fp
    e98c:	ab50      	add	r3, sp, #320	; 0x140
    e98e:	1b1b      	subs	r3, r3, r4
    e990:	f8dd 9014 	ldr.w	r9, [sp, #20]
    e994:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    e998:	ee1a ba10 	vmov	fp, s20
    e99c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    e9a0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e9a4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    e9a8:	9305      	str	r3, [sp, #20]
    e9aa:	f7ff bac2 	b.w	df32 <_svfprintf_r+0x6e2>
    e9ae:	ee1b 1a10 	vmov	r1, s22
    e9b2:	aa24      	add	r2, sp, #144	; 0x90
    e9b4:	4658      	mov	r0, fp
    e9b6:	f003 fdd7 	bl	12568 <__ssprint_r>
    e9ba:	2800      	cmp	r0, #0
    e9bc:	f47f abad 	bne.w	e11a <_svfprintf_r+0x8ca>
    e9c0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e9c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e9c6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e9ca:	f7ff b896 	b.w	dafa <_svfprintf_r+0x2aa>
    e9ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e9d0:	48be      	ldr	r0, [pc, #760]	; (eccc <_svfprintf_r+0x147c>)
    e9d2:	f8ca 0000 	str.w	r0, [sl]
    e9d6:	3301      	adds	r3, #1
    e9d8:	3201      	adds	r2, #1
    e9da:	2001      	movs	r0, #1
    e9dc:	2b07      	cmp	r3, #7
    e9de:	9226      	str	r2, [sp, #152]	; 0x98
    e9e0:	9325      	str	r3, [sp, #148]	; 0x94
    e9e2:	f8ca 0004 	str.w	r0, [sl, #4]
    e9e6:	f300 8177 	bgt.w	ecd8 <_svfprintf_r+0x1488>
    e9ea:	f10a 0a08 	add.w	sl, sl, #8
    e9ee:	2900      	cmp	r1, #0
    e9f0:	f040 80af 	bne.w	eb52 <_svfprintf_r+0x1302>
    e9f4:	990e      	ldr	r1, [sp, #56]	; 0x38
    e9f6:	f008 0301 	and.w	r3, r8, #1
    e9fa:	430b      	orrs	r3, r1
    e9fc:	f43f a8c0 	beq.w	db80 <_svfprintf_r+0x330>
    ea00:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ea02:	9912      	ldr	r1, [sp, #72]	; 0x48
    ea04:	441a      	add	r2, r3
    ea06:	e9ca 1300 	strd	r1, r3, [sl]
    ea0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ea0c:	9226      	str	r2, [sp, #152]	; 0x98
    ea0e:	3301      	adds	r3, #1
    ea10:	2b07      	cmp	r3, #7
    ea12:	9325      	str	r3, [sp, #148]	; 0x94
    ea14:	f300 8252 	bgt.w	eebc <_svfprintf_r+0x166c>
    ea18:	f10a 0a08 	add.w	sl, sl, #8
    ea1c:	990e      	ldr	r1, [sp, #56]	; 0x38
    ea1e:	f8ca 4000 	str.w	r4, [sl]
    ea22:	3301      	adds	r3, #1
    ea24:	440a      	add	r2, r1
    ea26:	2b07      	cmp	r3, #7
    ea28:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ea2c:	f8ca 1004 	str.w	r1, [sl, #4]
    ea30:	f77f a8a4 	ble.w	db7c <_svfprintf_r+0x32c>
    ea34:	f7ff bbbd 	b.w	e1b2 <_svfprintf_r+0x962>
    ea38:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    ea3c:	f000 80dd 	beq.w	ebfa <_svfprintf_r+0x13aa>
    ea40:	9808      	ldr	r0, [sp, #32]
    ea42:	f850 2b04 	ldr.w	r2, [r0], #4
    ea46:	9008      	str	r0, [sp, #32]
    ea48:	4619      	mov	r1, r3
    ea4a:	b292      	uxth	r2, r2
    ea4c:	e631      	b.n	e6b2 <_svfprintf_r+0xe62>
    ea4e:	ee1b 1a10 	vmov	r1, s22
    ea52:	aa24      	add	r2, sp, #144	; 0x90
    ea54:	4658      	mov	r0, fp
    ea56:	f003 fd87 	bl	12568 <__ssprint_r>
    ea5a:	2800      	cmp	r0, #0
    ea5c:	f47f ab5d 	bne.w	e11a <_svfprintf_r+0x8ca>
    ea60:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ea62:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea66:	f7ff baa3 	b.w	dfb0 <_svfprintf_r+0x760>
    ea6a:	ae22      	add	r6, sp, #136	; 0x88
    ea6c:	2208      	movs	r2, #8
    ea6e:	2100      	movs	r1, #0
    ea70:	4630      	mov	r0, r6
    ea72:	941d      	str	r4, [sp, #116]	; 0x74
    ea74:	f7fc ffca 	bl	ba0c <memset>
    ea78:	9b03      	ldr	r3, [sp, #12]
    ea7a:	1c5a      	adds	r2, r3, #1
    ea7c:	f000 80db 	beq.w	ec36 <_svfprintf_r+0x13e6>
    ea80:	2500      	movs	r5, #0
    ea82:	f8cd 9008 	str.w	r9, [sp, #8]
    ea86:	f8cd 801c 	str.w	r8, [sp, #28]
    ea8a:	4699      	mov	r9, r3
    ea8c:	46a8      	mov	r8, r5
    ea8e:	e00c      	b.n	eaaa <_svfprintf_r+0x125a>
    ea90:	a937      	add	r1, sp, #220	; 0xdc
    ea92:	4658      	mov	r0, fp
    ea94:	f003 fc3e 	bl	12314 <_wcrtomb_r>
    ea98:	1c43      	adds	r3, r0, #1
    ea9a:	4440      	add	r0, r8
    ea9c:	f000 83c8 	beq.w	f230 <_svfprintf_r+0x19e0>
    eaa0:	4548      	cmp	r0, r9
    eaa2:	dc08      	bgt.n	eab6 <_svfprintf_r+0x1266>
    eaa4:	f000 8418 	beq.w	f2d8 <_svfprintf_r+0x1a88>
    eaa8:	4680      	mov	r8, r0
    eaaa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    eaac:	5952      	ldr	r2, [r2, r5]
    eaae:	4633      	mov	r3, r6
    eab0:	3504      	adds	r5, #4
    eab2:	2a00      	cmp	r2, #0
    eab4:	d1ec      	bne.n	ea90 <_svfprintf_r+0x1240>
    eab6:	f8cd 8014 	str.w	r8, [sp, #20]
    eaba:	f8dd 9008 	ldr.w	r9, [sp, #8]
    eabe:	f8dd 801c 	ldr.w	r8, [sp, #28]
    eac2:	e0c5      	b.n	ec50 <_svfprintf_r+0x1400>
    eac4:	3301      	adds	r3, #1
    eac6:	4982      	ldr	r1, [pc, #520]	; (ecd0 <_svfprintf_r+0x1480>)
    eac8:	f8ca 4004 	str.w	r4, [sl, #4]
    eacc:	4422      	add	r2, r4
    eace:	2b07      	cmp	r3, #7
    ead0:	f8ca 1000 	str.w	r1, [sl]
    ead4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ead8:	f77f a850 	ble.w	db7c <_svfprintf_r+0x32c>
    eadc:	f7ff bb69 	b.w	e1b2 <_svfprintf_r+0x962>
    eae0:	ee1b 1a10 	vmov	r1, s22
    eae4:	aa24      	add	r2, sp, #144	; 0x90
    eae6:	4658      	mov	r0, fp
    eae8:	f003 fd3e 	bl	12568 <__ssprint_r>
    eaec:	2800      	cmp	r0, #0
    eaee:	f47f ab14 	bne.w	e11a <_svfprintf_r+0x8ca>
    eaf2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eaf4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eaf8:	f7ff b829 	b.w	db4e <_svfprintf_r+0x2fe>
    eafc:	aa24      	add	r2, sp, #144	; 0x90
    eafe:	4658      	mov	r0, fp
    eb00:	9105      	str	r1, [sp, #20]
    eb02:	f003 fd31 	bl	12568 <__ssprint_r>
    eb06:	2800      	cmp	r0, #0
    eb08:	f47f ab07 	bne.w	e11a <_svfprintf_r+0x8ca>
    eb0c:	f896 c000 	ldrb.w	ip, [r6]
    eb10:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eb12:	9905      	ldr	r1, [sp, #20]
    eb14:	a827      	add	r0, sp, #156	; 0x9c
    eb16:	e67d      	b.n	e814 <_svfprintf_r+0xfc4>
    eb18:	2b01      	cmp	r3, #1
    eb1a:	f8cd 8008 	str.w	r8, [sp, #8]
    eb1e:	f47f a9f3 	bne.w	df08 <_svfprintf_r+0x6b8>
    eb22:	f7ff bb93 	b.w	e24c <_svfprintf_r+0x9fc>
    eb26:	9b08      	ldr	r3, [sp, #32]
    eb28:	9904      	ldr	r1, [sp, #16]
    eb2a:	f853 2b04 	ldr.w	r2, [r3], #4
    eb2e:	464c      	mov	r4, r9
    eb30:	6011      	str	r1, [r2, #0]
    eb32:	9308      	str	r3, [sp, #32]
    eb34:	f7fe bebe 	b.w	d8b4 <_svfprintf_r+0x64>
    eb38:	3301      	adds	r3, #1
    eb3a:	4965      	ldr	r1, [pc, #404]	; (ecd0 <_svfprintf_r+0x1480>)
    eb3c:	f8ca 4004 	str.w	r4, [sl, #4]
    eb40:	4422      	add	r2, r4
    eb42:	2b07      	cmp	r3, #7
    eb44:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eb48:	f8ca 1000 	str.w	r1, [sl]
    eb4c:	f77f ab22 	ble.w	e194 <_svfprintf_r+0x944>
    eb50:	e47b      	b.n	e44a <_svfprintf_r+0xbfa>
    eb52:	9b10      	ldr	r3, [sp, #64]	; 0x40
    eb54:	9812      	ldr	r0, [sp, #72]	; 0x48
    eb56:	441a      	add	r2, r3
    eb58:	e9ca 0300 	strd	r0, r3, [sl]
    eb5c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    eb5e:	9226      	str	r2, [sp, #152]	; 0x98
    eb60:	3301      	adds	r3, #1
    eb62:	2b07      	cmp	r3, #7
    eb64:	9325      	str	r3, [sp, #148]	; 0x94
    eb66:	f300 81a9 	bgt.w	eebc <_svfprintf_r+0x166c>
    eb6a:	f10a 0a08 	add.w	sl, sl, #8
    eb6e:	2900      	cmp	r1, #0
    eb70:	f6bf af54 	bge.w	ea1c <_svfprintf_r+0x11cc>
    eb74:	424d      	negs	r5, r1
    eb76:	3110      	adds	r1, #16
    eb78:	f280 830f 	bge.w	f19a <_svfprintf_r+0x194a>
    eb7c:	ee1b 1a10 	vmov	r1, s22
    eb80:	2610      	movs	r6, #16
    eb82:	e005      	b.n	eb90 <_svfprintf_r+0x1340>
    eb84:	f10a 0a08 	add.w	sl, sl, #8
    eb88:	3d10      	subs	r5, #16
    eb8a:	2d10      	cmp	r5, #16
    eb8c:	f340 8305 	ble.w	f19a <_svfprintf_r+0x194a>
    eb90:	3301      	adds	r3, #1
    eb92:	484f      	ldr	r0, [pc, #316]	; (ecd0 <_svfprintf_r+0x1480>)
    eb94:	3210      	adds	r2, #16
    eb96:	2b07      	cmp	r3, #7
    eb98:	e9ca 0600 	strd	r0, r6, [sl]
    eb9c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eba0:	ddf0      	ble.n	eb84 <_svfprintf_r+0x1334>
    eba2:	aa24      	add	r2, sp, #144	; 0x90
    eba4:	4658      	mov	r0, fp
    eba6:	9103      	str	r1, [sp, #12]
    eba8:	f003 fcde 	bl	12568 <__ssprint_r>
    ebac:	2800      	cmp	r0, #0
    ebae:	f47f aab4 	bne.w	e11a <_svfprintf_r+0x8ca>
    ebb2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ebb6:	9903      	ldr	r1, [sp, #12]
    ebb8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ebbc:	e7e4      	b.n	eb88 <_svfprintf_r+0x1338>
    ebbe:	9b08      	ldr	r3, [sp, #32]
    ebc0:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    ebc4:	bf1a      	itte	ne
    ebc6:	4611      	movne	r1, r2
    ebc8:	f853 2b04 	ldrne.w	r2, [r3], #4
    ebcc:	f853 2b04 	ldreq.w	r2, [r3], #4
    ebd0:	9308      	str	r3, [sp, #32]
    ebd2:	bf18      	it	ne
    ebd4:	b2d2      	uxtbne	r2, r2
    ebd6:	f7ff b945 	b.w	de64 <_svfprintf_r+0x614>
    ebda:	9b02      	ldr	r3, [sp, #8]
    ebdc:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    ebe0:	9b08      	ldr	r3, [sp, #32]
    ebe2:	bf1a      	itte	ne
    ebe4:	4611      	movne	r1, r2
    ebe6:	f853 2b04 	ldrne.w	r2, [r3], #4
    ebea:	f853 2b04 	ldreq.w	r2, [r3], #4
    ebee:	9308      	str	r3, [sp, #32]
    ebf0:	bf18      	it	ne
    ebf2:	b2d2      	uxtbne	r2, r2
    ebf4:	2301      	movs	r3, #1
    ebf6:	f7ff b8d0 	b.w	dd9a <_svfprintf_r+0x54a>
    ebfa:	9b08      	ldr	r3, [sp, #32]
    ebfc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    ec00:	bf1a      	itte	ne
    ec02:	4611      	movne	r1, r2
    ec04:	f853 2b04 	ldrne.w	r2, [r3], #4
    ec08:	f853 2b04 	ldreq.w	r2, [r3], #4
    ec0c:	9308      	str	r3, [sp, #32]
    ec0e:	bf18      	it	ne
    ec10:	b2d2      	uxtbne	r2, r2
    ec12:	e54e      	b.n	e6b2 <_svfprintf_r+0xe62>
    ec14:	468a      	mov	sl, r1
    ec16:	3301      	adds	r3, #1
    ec18:	492d      	ldr	r1, [pc, #180]	; (ecd0 <_svfprintf_r+0x1480>)
    ec1a:	f8ca 5004 	str.w	r5, [sl, #4]
    ec1e:	442a      	add	r2, r5
    ec20:	2b07      	cmp	r3, #7
    ec22:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ec26:	f8ca 1000 	str.w	r1, [sl]
    ec2a:	f300 8139 	bgt.w	eea0 <_svfprintf_r+0x1650>
    ec2e:	f10a 0a08 	add.w	sl, sl, #8
    ec32:	f7ff bb8c 	b.w	e34e <_svfprintf_r+0xafe>
    ec36:	2300      	movs	r3, #0
    ec38:	4619      	mov	r1, r3
    ec3a:	9600      	str	r6, [sp, #0]
    ec3c:	aa1d      	add	r2, sp, #116	; 0x74
    ec3e:	4658      	mov	r0, fp
    ec40:	f003 fb8e 	bl	12360 <_wcsrtombs_r>
    ec44:	4603      	mov	r3, r0
    ec46:	3301      	adds	r3, #1
    ec48:	9005      	str	r0, [sp, #20]
    ec4a:	f000 82f1 	beq.w	f230 <_svfprintf_r+0x19e0>
    ec4e:	941d      	str	r4, [sp, #116]	; 0x74
    ec50:	9b05      	ldr	r3, [sp, #20]
    ec52:	2b00      	cmp	r3, #0
    ec54:	d04e      	beq.n	ecf4 <_svfprintf_r+0x14a4>
    ec56:	2b63      	cmp	r3, #99	; 0x63
    ec58:	f300 8118 	bgt.w	ee8c <_svfprintf_r+0x163c>
    ec5c:	2300      	movs	r3, #0
    ec5e:	9307      	str	r3, [sp, #28]
    ec60:	ac37      	add	r4, sp, #220	; 0xdc
    ec62:	2208      	movs	r2, #8
    ec64:	2100      	movs	r1, #0
    ec66:	4630      	mov	r0, r6
    ec68:	f7fc fed0 	bl	ba0c <memset>
    ec6c:	9d05      	ldr	r5, [sp, #20]
    ec6e:	9600      	str	r6, [sp, #0]
    ec70:	462b      	mov	r3, r5
    ec72:	aa1d      	add	r2, sp, #116	; 0x74
    ec74:	4621      	mov	r1, r4
    ec76:	4658      	mov	r0, fp
    ec78:	f003 fb72 	bl	12360 <_wcsrtombs_r>
    ec7c:	4285      	cmp	r5, r0
    ec7e:	f040 837c 	bne.w	f37a <_svfprintf_r+0x1b2a>
    ec82:	9a05      	ldr	r2, [sp, #20]
    ec84:	2300      	movs	r3, #0
    ec86:	54a3      	strb	r3, [r4, r2]
    ec88:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ec8c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ec90:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ec94:	9303      	str	r3, [sp, #12]
    ec96:	9202      	str	r2, [sp, #8]
    ec98:	930f      	str	r3, [sp, #60]	; 0x3c
    ec9a:	f7fe bfba 	b.w	dc12 <_svfprintf_r+0x3c2>
    ec9e:	212d      	movs	r1, #45	; 0x2d
    eca0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    eca4:	f7fe bfa4 	b.w	dbf0 <_svfprintf_r+0x3a0>
    eca8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ecaa:	9915      	ldr	r1, [sp, #84]	; 0x54
    ecac:	ebab 0b03 	sub.w	fp, fp, r3
    ecb0:	461a      	mov	r2, r3
    ecb2:	4658      	mov	r0, fp
    ecb4:	f7fc ff42 	bl	bb3c <strncpy>
    ecb8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    ecbc:	4b05      	ldr	r3, [pc, #20]	; (ecd4 <_svfprintf_r+0x1484>)
    ecbe:	b10a      	cbz	r2, ecc4 <_svfprintf_r+0x1474>
    ecc0:	f10a 0a01 	add.w	sl, sl, #1
    ecc4:	f04f 0c00 	mov.w	ip, #0
    ecc8:	e628      	b.n	e91c <_svfprintf_r+0x10cc>
    ecca:	bf00      	nop
    eccc:	20000c64 	.word	0x20000c64
    ecd0:	20008474 	.word	0x20008474
    ecd4:	cccccccd 	.word	0xcccccccd
    ecd8:	ee1b 1a10 	vmov	r1, s22
    ecdc:	aa24      	add	r2, sp, #144	; 0x90
    ecde:	4658      	mov	r0, fp
    ece0:	f003 fc42 	bl	12568 <__ssprint_r>
    ece4:	2800      	cmp	r0, #0
    ece6:	f47f aa18 	bne.w	e11a <_svfprintf_r+0x8ca>
    ecea:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ecec:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ecee:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ecf2:	e67c      	b.n	e9ee <_svfprintf_r+0x119e>
    ecf4:	9b05      	ldr	r3, [sp, #20]
    ecf6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ecfa:	930f      	str	r3, [sp, #60]	; 0x3c
    ecfc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    ed00:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ed04:	9307      	str	r3, [sp, #28]
    ed06:	f7fe bf84 	b.w	dc12 <_svfprintf_r+0x3c2>
    ed0a:	990e      	ldr	r1, [sp, #56]	; 0x38
    ed0c:	9805      	ldr	r0, [sp, #20]
    ed0e:	1865      	adds	r5, r4, r1
    ed10:	1a2d      	subs	r5, r5, r0
    ed12:	1acc      	subs	r4, r1, r3
    ed14:	42a5      	cmp	r5, r4
    ed16:	bfa8      	it	ge
    ed18:	4625      	movge	r5, r4
    ed1a:	f7ff bb4d 	b.w	e3b8 <_svfprintf_r+0xb68>
    ed1e:	9b08      	ldr	r3, [sp, #32]
    ed20:	9904      	ldr	r1, [sp, #16]
    ed22:	f853 2b04 	ldr.w	r2, [r3], #4
    ed26:	9308      	str	r3, [sp, #32]
    ed28:	8011      	strh	r1, [r2, #0]
    ed2a:	464c      	mov	r4, r9
    ed2c:	f7fe bdc2 	b.w	d8b4 <_svfprintf_r+0x64>
    ed30:	f913 2b04 	ldrsb.w	r2, [r3], #4
    ed34:	9308      	str	r3, [sp, #32]
    ed36:	17d1      	asrs	r1, r2, #31
    ed38:	460b      	mov	r3, r1
    ed3a:	f7fe bfdb 	b.w	dcf4 <_svfprintf_r+0x4a4>
    ed3e:	9a03      	ldr	r2, [sp, #12]
    ed40:	2102      	movs	r1, #2
    ed42:	ab22      	add	r3, sp, #136	; 0x88
    ed44:	9301      	str	r3, [sp, #4]
    ed46:	ab1d      	add	r3, sp, #116	; 0x74
    ed48:	9300      	str	r3, [sp, #0]
    ed4a:	4658      	mov	r0, fp
    ed4c:	ab1b      	add	r3, sp, #108	; 0x6c
    ed4e:	eeb0 0b4a 	vmov.f64	d0, d10
    ed52:	9202      	str	r2, [sp, #8]
    ed54:	f002 fa14 	bl	11180 <_dtoa_r>
    ed58:	2d47      	cmp	r5, #71	; 0x47
    ed5a:	9a02      	ldr	r2, [sp, #8]
    ed5c:	4604      	mov	r4, r0
    ed5e:	f000 8161 	beq.w	f024 <_svfprintf_r+0x17d4>
    ed62:	2d46      	cmp	r5, #70	; 0x46
    ed64:	4410      	add	r0, r2
    ed66:	d105      	bne.n	ed74 <_svfprintf_r+0x1524>
    ed68:	7823      	ldrb	r3, [r4, #0]
    ed6a:	2b30      	cmp	r3, #48	; 0x30
    ed6c:	f000 826f 	beq.w	f24e <_svfprintf_r+0x19fe>
    ed70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ed72:	4410      	add	r0, r2
    ed74:	eeb5 ab40 	vcmp.f64	d10, #0.0
    ed78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ed7c:	f040 8146 	bne.w	f00c <_svfprintf_r+0x17bc>
    ed80:	4603      	mov	r3, r0
    ed82:	1b1b      	subs	r3, r3, r4
    ed84:	930e      	str	r3, [sp, #56]	; 0x38
    ed86:	2d47      	cmp	r5, #71	; 0x47
    ed88:	f000 8110 	beq.w	efac <_svfprintf_r+0x175c>
    ed8c:	2d46      	cmp	r5, #70	; 0x46
    ed8e:	f000 81b5 	beq.w	f0fc <_svfprintf_r+0x18ac>
    ed92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ed94:	930c      	str	r3, [sp, #48]	; 0x30
    ed96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ed98:	2d41      	cmp	r5, #65	; 0x41
    ed9a:	f103 33ff 	add.w	r3, r3, #4294967295
    ed9e:	931b      	str	r3, [sp, #108]	; 0x6c
    eda0:	f000 81e5 	beq.w	f16e <_svfprintf_r+0x191e>
    eda4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    eda8:	2100      	movs	r1, #0
    edaa:	2b00      	cmp	r3, #0
    edac:	bfb8      	it	lt
    edae:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    edb0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    edb4:	bfba      	itte	lt
    edb6:	f1c3 0301 	rsblt	r3, r3, #1
    edba:	222d      	movlt	r2, #45	; 0x2d
    edbc:	222b      	movge	r2, #43	; 0x2b
    edbe:	2b09      	cmp	r3, #9
    edc0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    edc4:	f340 81da 	ble.w	f17c <_svfprintf_r+0x192c>
    edc8:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    edcc:	f8df c41c 	ldr.w	ip, [pc, #1052]	; f1ec <_svfprintf_r+0x199c>
    edd0:	462a      	mov	r2, r5
    edd2:	4610      	mov	r0, r2
    edd4:	fb8c 2103 	smull	r2, r1, ip, r3
    edd8:	17da      	asrs	r2, r3, #31
    edda:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    edde:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    ede2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    ede6:	3130      	adds	r1, #48	; 0x30
    ede8:	f800 1c01 	strb.w	r1, [r0, #-1]
    edec:	4619      	mov	r1, r3
    edee:	2963      	cmp	r1, #99	; 0x63
    edf0:	4613      	mov	r3, r2
    edf2:	f100 32ff 	add.w	r2, r0, #4294967295
    edf6:	dcec      	bgt.n	edd2 <_svfprintf_r+0x1582>
    edf8:	3330      	adds	r3, #48	; 0x30
    edfa:	b2d9      	uxtb	r1, r3
    edfc:	1e83      	subs	r3, r0, #2
    edfe:	429d      	cmp	r5, r3
    ee00:	f802 1c01 	strb.w	r1, [r2, #-1]
    ee04:	f240 828b 	bls.w	f31e <_svfprintf_r+0x1ace>
    ee08:	4613      	mov	r3, r2
    ee0a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ee0e:	e001      	b.n	ee14 <_svfprintf_r+0x15c4>
    ee10:	f813 1b01 	ldrb.w	r1, [r3], #1
    ee14:	f802 1b01 	strb.w	r1, [r2], #1
    ee18:	429d      	cmp	r5, r3
    ee1a:	d1f9      	bne.n	ee10 <_svfprintf_r+0x15c0>
    ee1c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    ee20:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ee24:	1a1b      	subs	r3, r3, r0
    ee26:	4413      	add	r3, r2
    ee28:	aa1e      	add	r2, sp, #120	; 0x78
    ee2a:	1a9b      	subs	r3, r3, r2
    ee2c:	9314      	str	r3, [sp, #80]	; 0x50
    ee2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee30:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ee32:	2b01      	cmp	r3, #1
    ee34:	441a      	add	r2, r3
    ee36:	9205      	str	r2, [sp, #20]
    ee38:	f340 8203 	ble.w	f242 <_svfprintf_r+0x19f2>
    ee3c:	9b05      	ldr	r3, [sp, #20]
    ee3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ee40:	4413      	add	r3, r2
    ee42:	9305      	str	r3, [sp, #20]
    ee44:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    ee48:	9a05      	ldr	r2, [sp, #20]
    ee4a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    ee4e:	2300      	movs	r3, #0
    ee50:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ee54:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ee58:	930f      	str	r3, [sp, #60]	; 0x3c
    ee5a:	9202      	str	r2, [sp, #8]
    ee5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee5e:	2b00      	cmp	r3, #0
    ee60:	f040 80b1 	bne.w	efc6 <_svfprintf_r+0x1776>
    ee64:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ee68:	9303      	str	r3, [sp, #12]
    ee6a:	f7fe bed2 	b.w	dc12 <_svfprintf_r+0x3c2>
    ee6e:	4620      	mov	r0, r4
    ee70:	f7fd f966 	bl	c140 <strlen>
    ee74:	4602      	mov	r2, r0
    ee76:	9005      	str	r0, [sp, #20]
    ee78:	f7fe bf20 	b.w	dcbc <_svfprintf_r+0x46c>
    ee7c:	ee1b 1a10 	vmov	r1, s22
    ee80:	aa24      	add	r2, sp, #144	; 0x90
    ee82:	4658      	mov	r0, fp
    ee84:	f003 fb70 	bl	12568 <__ssprint_r>
    ee88:	f7fe bded 	b.w	da66 <_svfprintf_r+0x216>
    ee8c:	1c59      	adds	r1, r3, #1
    ee8e:	4658      	mov	r0, fp
    ee90:	f7fa fe94 	bl	9bbc <_malloc_r>
    ee94:	4604      	mov	r4, r0
    ee96:	2800      	cmp	r0, #0
    ee98:	f000 81ca 	beq.w	f230 <_svfprintf_r+0x19e0>
    ee9c:	9007      	str	r0, [sp, #28]
    ee9e:	e6e0      	b.n	ec62 <_svfprintf_r+0x1412>
    eea0:	ee1b 1a10 	vmov	r1, s22
    eea4:	aa24      	add	r2, sp, #144	; 0x90
    eea6:	4658      	mov	r0, fp
    eea8:	f003 fb5e 	bl	12568 <__ssprint_r>
    eeac:	2800      	cmp	r0, #0
    eeae:	f47f a934 	bne.w	e11a <_svfprintf_r+0x8ca>
    eeb2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eeb4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eeb8:	f7ff ba49 	b.w	e34e <_svfprintf_r+0xafe>
    eebc:	ee1b 1a10 	vmov	r1, s22
    eec0:	aa24      	add	r2, sp, #144	; 0x90
    eec2:	4658      	mov	r0, fp
    eec4:	f003 fb50 	bl	12568 <__ssprint_r>
    eec8:	2800      	cmp	r0, #0
    eeca:	f47f a926 	bne.w	e11a <_svfprintf_r+0x8ca>
    eece:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    eed2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    eed4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eed8:	e649      	b.n	eb6e <_svfprintf_r+0x131e>
    eeda:	2306      	movs	r3, #6
    eedc:	9303      	str	r3, [sp, #12]
    eede:	f7ff bb83 	b.w	e5e8 <_svfprintf_r+0xd98>
    eee2:	9b03      	ldr	r3, [sp, #12]
    eee4:	2102      	movs	r1, #2
    eee6:	1c5a      	adds	r2, r3, #1
    eee8:	e72b      	b.n	ed42 <_svfprintf_r+0x14f2>
    eeea:	9a03      	ldr	r2, [sp, #12]
    eeec:	2103      	movs	r1, #3
    eeee:	e728      	b.n	ed42 <_svfprintf_r+0x14f2>
    eef0:	a81b      	add	r0, sp, #108	; 0x6c
    eef2:	eeb0 0b4a 	vmov.f64	d0, d10
    eef6:	f002 f817 	bl	10f28 <frexp>
    eefa:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    eefe:	ee20 0b07 	vmul.f64	d0, d0, d7
    ef02:	eeb5 0b40 	vcmp.f64	d0, #0.0
    ef06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef0a:	d101      	bne.n	ef10 <_svfprintf_r+0x16c0>
    ef0c:	2301      	movs	r3, #1
    ef0e:	931b      	str	r3, [sp, #108]	; 0x6c
    ef10:	48b3      	ldr	r0, [pc, #716]	; (f1e0 <_svfprintf_r+0x1990>)
    ef12:	9b03      	ldr	r3, [sp, #12]
    ef14:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    ef18:	3b01      	subs	r3, #1
    ef1a:	4622      	mov	r2, r4
    ef1c:	e004      	b.n	ef28 <_svfprintf_r+0x16d8>
    ef1e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    ef22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef26:	d013      	beq.n	ef50 <_svfprintf_r+0x1700>
    ef28:	ee20 0b05 	vmul.f64	d0, d0, d5
    ef2c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    ef30:	f1b3 3fff 	cmp.w	r3, #4294967295
    ef34:	ee17 1a90 	vmov	r1, s15
    ef38:	5c41      	ldrb	r1, [r0, r1]
    ef3a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    ef3e:	4694      	mov	ip, r2
    ef40:	ee30 0b46 	vsub.f64	d0, d0, d6
    ef44:	f802 1b01 	strb.w	r1, [r2], #1
    ef48:	4619      	mov	r1, r3
    ef4a:	f103 33ff 	add.w	r3, r3, #4294967295
    ef4e:	d1e6      	bne.n	ef1e <_svfprintf_r+0x16ce>
    ef50:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    ef54:	eeb4 0bc6 	vcmpe.f64	d0, d6
    ef58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef5c:	f300 8148 	bgt.w	f1f0 <_svfprintf_r+0x19a0>
    ef60:	eeb4 0b46 	vcmp.f64	d0, d6
    ef64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef68:	d104      	bne.n	ef74 <_svfprintf_r+0x1724>
    ef6a:	ee17 3a90 	vmov	r3, s15
    ef6e:	07db      	lsls	r3, r3, #31
    ef70:	f100 813e 	bmi.w	f1f0 <_svfprintf_r+0x19a0>
    ef74:	2900      	cmp	r1, #0
    ef76:	db06      	blt.n	ef86 <_svfprintf_r+0x1736>
    ef78:	1c4b      	adds	r3, r1, #1
    ef7a:	4413      	add	r3, r2
    ef7c:	2130      	movs	r1, #48	; 0x30
    ef7e:	f802 1b01 	strb.w	r1, [r2], #1
    ef82:	4293      	cmp	r3, r2
    ef84:	d1fb      	bne.n	ef7e <_svfprintf_r+0x172e>
    ef86:	1b13      	subs	r3, r2, r4
    ef88:	930e      	str	r3, [sp, #56]	; 0x38
    ef8a:	e6fc      	b.n	ed86 <_svfprintf_r+0x1536>
    ef8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ef8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ef90:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    ef94:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ef98:	9613      	str	r6, [sp, #76]	; 0x4c
    ef9a:	18e3      	adds	r3, r4, r3
    ef9c:	429d      	cmp	r5, r3
    ef9e:	4629      	mov	r1, r5
    efa0:	bf28      	it	cs
    efa2:	4619      	movcs	r1, r3
    efa4:	4682      	mov	sl, r0
    efa6:	9105      	str	r1, [sp, #20]
    efa8:	f7ff b9d8 	b.w	e35c <_svfprintf_r+0xb0c>
    efac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    efae:	930c      	str	r3, [sp, #48]	; 0x30
    efb0:	1cda      	adds	r2, r3, #3
    efb2:	db02      	blt.n	efba <_svfprintf_r+0x176a>
    efb4:	9a03      	ldr	r2, [sp, #12]
    efb6:	4293      	cmp	r3, r2
    efb8:	dd0c      	ble.n	efd4 <_svfprintf_r+0x1784>
    efba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    efbc:	3b02      	subs	r3, #2
    efbe:	930b      	str	r3, [sp, #44]	; 0x2c
    efc0:	f023 0520 	bic.w	r5, r3, #32
    efc4:	e6e7      	b.n	ed96 <_svfprintf_r+0x1546>
    efc6:	212d      	movs	r1, #45	; 0x2d
    efc8:	2300      	movs	r3, #0
    efca:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    efce:	9303      	str	r3, [sp, #12]
    efd0:	f7fe be22 	b.w	dc18 <_svfprintf_r+0x3c8>
    efd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    efd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    efd8:	4293      	cmp	r3, r2
    efda:	f2c0 80bd 	blt.w	f158 <_svfprintf_r+0x1908>
    efde:	07f0      	lsls	r0, r6, #31
    efe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    efe2:	f140 8132 	bpl.w	f24a <_svfprintf_r+0x19fa>
    efe6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    efe8:	4413      	add	r3, r2
    efea:	9305      	str	r3, [sp, #20]
    efec:	0571      	lsls	r1, r6, #21
    efee:	d503      	bpl.n	eff8 <_svfprintf_r+0x17a8>
    eff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eff2:	2b00      	cmp	r3, #0
    eff4:	f300 8135 	bgt.w	f262 <_svfprintf_r+0x1a12>
    eff8:	9b05      	ldr	r3, [sp, #20]
    effa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    effe:	9302      	str	r3, [sp, #8]
    f000:	2367      	movs	r3, #103	; 0x67
    f002:	930b      	str	r3, [sp, #44]	; 0x2c
    f004:	2300      	movs	r3, #0
    f006:	930f      	str	r3, [sp, #60]	; 0x3c
    f008:	930d      	str	r3, [sp, #52]	; 0x34
    f00a:	e727      	b.n	ee5c <_svfprintf_r+0x160c>
    f00c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f00e:	4283      	cmp	r3, r0
    f010:	f4bf aeb7 	bcs.w	ed82 <_svfprintf_r+0x1532>
    f014:	2130      	movs	r1, #48	; 0x30
    f016:	1c5a      	adds	r2, r3, #1
    f018:	9222      	str	r2, [sp, #136]	; 0x88
    f01a:	7019      	strb	r1, [r3, #0]
    f01c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f01e:	4298      	cmp	r0, r3
    f020:	d8f9      	bhi.n	f016 <_svfprintf_r+0x17c6>
    f022:	e6ae      	b.n	ed82 <_svfprintf_r+0x1532>
    f024:	07f3      	lsls	r3, r6, #31
    f026:	f100 80a7 	bmi.w	f178 <_svfprintf_r+0x1928>
    f02a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f02c:	e6a9      	b.n	ed82 <_svfprintf_r+0x1532>
    f02e:	aa24      	add	r2, sp, #144	; 0x90
    f030:	4658      	mov	r0, fp
    f032:	9105      	str	r1, [sp, #20]
    f034:	f003 fa98 	bl	12568 <__ssprint_r>
    f038:	2800      	cmp	r0, #0
    f03a:	f47f a86e 	bne.w	e11a <_svfprintf_r+0x8ca>
    f03e:	f896 c000 	ldrb.w	ip, [r6]
    f042:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f044:	9905      	ldr	r1, [sp, #20]
    f046:	a827      	add	r0, sp, #156	; 0x9c
    f048:	4465      	add	r5, ip
    f04a:	f7ff bbec 	b.w	e826 <_svfprintf_r+0xfd6>
    f04e:	ee1b 1a10 	vmov	r1, s22
    f052:	aa24      	add	r2, sp, #144	; 0x90
    f054:	4658      	mov	r0, fp
    f056:	f003 fa87 	bl	12568 <__ssprint_r>
    f05a:	2800      	cmp	r0, #0
    f05c:	f47f a85d 	bne.w	e11a <_svfprintf_r+0x8ca>
    f060:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f062:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f066:	f7ff b96b 	b.w	e340 <_svfprintf_r+0xaf0>
    f06a:	2378      	movs	r3, #120	; 0x78
    f06c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    f070:	2330      	movs	r3, #48	; 0x30
    f072:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    f076:	9b03      	ldr	r3, [sp, #12]
    f078:	2b63      	cmp	r3, #99	; 0x63
    f07a:	f048 0602 	orr.w	r6, r8, #2
    f07e:	f300 80a6 	bgt.w	f1ce <_svfprintf_r+0x197e>
    f082:	2300      	movs	r3, #0
    f084:	9307      	str	r3, [sp, #28]
    f086:	ac37      	add	r4, sp, #220	; 0xdc
    f088:	ee18 3a90 	vmov	r3, s17
    f08c:	2b00      	cmp	r3, #0
    f08e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    f092:	db2b      	blt.n	f0ec <_svfprintf_r+0x189c>
    f094:	eeb0 ab48 	vmov.f64	d10, d8
    f098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f09a:	f023 0520 	bic.w	r5, r3, #32
    f09e:	2300      	movs	r3, #0
    f0a0:	9309      	str	r3, [sp, #36]	; 0x24
    f0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f0a4:	2b61      	cmp	r3, #97	; 0x61
    f0a6:	f47f aaad 	bne.w	e604 <_svfprintf_r+0xdb4>
    f0aa:	eeb0 0b4a 	vmov.f64	d0, d10
    f0ae:	a81b      	add	r0, sp, #108	; 0x6c
    f0b0:	f001 ff3a 	bl	10f28 <frexp>
    f0b4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    f0b8:	ee20 0b07 	vmul.f64	d0, d0, d7
    f0bc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f0c4:	d101      	bne.n	f0ca <_svfprintf_r+0x187a>
    f0c6:	2301      	movs	r3, #1
    f0c8:	931b      	str	r3, [sp, #108]	; 0x6c
    f0ca:	4846      	ldr	r0, [pc, #280]	; (f1e4 <_svfprintf_r+0x1994>)
    f0cc:	e721      	b.n	ef12 <_svfprintf_r+0x16c2>
    f0ce:	ee1b 1a10 	vmov	r1, s22
    f0d2:	aa24      	add	r2, sp, #144	; 0x90
    f0d4:	4658      	mov	r0, fp
    f0d6:	f003 fa47 	bl	12568 <__ssprint_r>
    f0da:	2800      	cmp	r0, #0
    f0dc:	f47f a81d 	bne.w	e11a <_svfprintf_r+0x8ca>
    f0e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f0e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f0e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f0e8:	f7ff b94e 	b.w	e388 <_svfprintf_r+0xb38>
    f0ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f0ee:	f023 0520 	bic.w	r5, r3, #32
    f0f2:	232d      	movs	r3, #45	; 0x2d
    f0f4:	9309      	str	r3, [sp, #36]	; 0x24
    f0f6:	eeb1 ab48 	vneg.f64	d10, d8
    f0fa:	e7d2      	b.n	f0a2 <_svfprintf_r+0x1852>
    f0fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f0fe:	920c      	str	r2, [sp, #48]	; 0x30
    f100:	2a00      	cmp	r2, #0
    f102:	f006 0301 	and.w	r3, r6, #1
    f106:	f340 810d 	ble.w	f324 <_svfprintf_r+0x1ad4>
    f10a:	9903      	ldr	r1, [sp, #12]
    f10c:	430b      	orrs	r3, r1
    f10e:	f040 80cf 	bne.w	f2b0 <_svfprintf_r+0x1a60>
    f112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f114:	9305      	str	r3, [sp, #20]
    f116:	2366      	movs	r3, #102	; 0x66
    f118:	930b      	str	r3, [sp, #44]	; 0x2c
    f11a:	0572      	lsls	r2, r6, #21
    f11c:	f100 80a3 	bmi.w	f266 <_svfprintf_r+0x1a16>
    f120:	9b05      	ldr	r3, [sp, #20]
    f122:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f126:	9302      	str	r3, [sp, #8]
    f128:	e76c      	b.n	f004 <_svfprintf_r+0x17b4>
    f12a:	ee1b 1a10 	vmov	r1, s22
    f12e:	aa24      	add	r2, sp, #144	; 0x90
    f130:	4658      	mov	r0, fp
    f132:	f003 fa19 	bl	12568 <__ssprint_r>
    f136:	2800      	cmp	r0, #0
    f138:	f47e afef 	bne.w	e11a <_svfprintf_r+0x8ca>
    f13c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    f13e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f140:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f142:	1b1c      	subs	r4, r3, r4
    f144:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f148:	f7ff b936 	b.w	e3b8 <_svfprintf_r+0xb68>
    f14c:	2358      	movs	r3, #88	; 0x58
    f14e:	e78d      	b.n	f06c <_svfprintf_r+0x181c>
    f150:	2200      	movs	r2, #0
    f152:	9203      	str	r2, [sp, #12]
    f154:	f7fe bbda 	b.w	d90c <_svfprintf_r+0xbc>
    f158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f15a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f15c:	189a      	adds	r2, r3, r2
    f15e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f160:	9205      	str	r2, [sp, #20]
    f162:	2b00      	cmp	r3, #0
    f164:	f340 80ab 	ble.w	f2be <_svfprintf_r+0x1a6e>
    f168:	2367      	movs	r3, #103	; 0x67
    f16a:	930b      	str	r3, [sp, #44]	; 0x2c
    f16c:	e7d5      	b.n	f11a <_svfprintf_r+0x18ca>
    f16e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f170:	320f      	adds	r2, #15
    f172:	b2d2      	uxtb	r2, r2
    f174:	2101      	movs	r1, #1
    f176:	e618      	b.n	edaa <_svfprintf_r+0x155a>
    f178:	18a0      	adds	r0, r4, r2
    f17a:	e5fb      	b.n	ed74 <_svfprintf_r+0x1524>
    f17c:	2900      	cmp	r1, #0
    f17e:	f040 80a8 	bne.w	f2d2 <_svfprintf_r+0x1a82>
    f182:	2230      	movs	r2, #48	; 0x30
    f184:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    f188:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    f18c:	3330      	adds	r3, #48	; 0x30
    f18e:	f802 3b01 	strb.w	r3, [r2], #1
    f192:	ab1e      	add	r3, sp, #120	; 0x78
    f194:	1ad3      	subs	r3, r2, r3
    f196:	9314      	str	r3, [sp, #80]	; 0x50
    f198:	e649      	b.n	ee2e <_svfprintf_r+0x15de>
    f19a:	3301      	adds	r3, #1
    f19c:	4912      	ldr	r1, [pc, #72]	; (f1e8 <_svfprintf_r+0x1998>)
    f19e:	f8ca 5004 	str.w	r5, [sl, #4]
    f1a2:	442a      	add	r2, r5
    f1a4:	2b07      	cmp	r3, #7
    f1a6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f1aa:	f8ca 1000 	str.w	r1, [sl]
    f1ae:	f77f ac33 	ble.w	ea18 <_svfprintf_r+0x11c8>
    f1b2:	ee1b 1a10 	vmov	r1, s22
    f1b6:	aa24      	add	r2, sp, #144	; 0x90
    f1b8:	4658      	mov	r0, fp
    f1ba:	f003 f9d5 	bl	12568 <__ssprint_r>
    f1be:	2800      	cmp	r0, #0
    f1c0:	f47e afab 	bne.w	e11a <_svfprintf_r+0x8ca>
    f1c4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f1c8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f1cc:	e426      	b.n	ea1c <_svfprintf_r+0x11cc>
    f1ce:	1c59      	adds	r1, r3, #1
    f1d0:	4658      	mov	r0, fp
    f1d2:	f7fa fcf3 	bl	9bbc <_malloc_r>
    f1d6:	4604      	mov	r4, r0
    f1d8:	b350      	cbz	r0, f230 <_svfprintf_r+0x19e0>
    f1da:	9007      	str	r0, [sp, #28]
    f1dc:	e754      	b.n	f088 <_svfprintf_r+0x1838>
    f1de:	bf00      	nop
    f1e0:	20000c48 	.word	0x20000c48
    f1e4:	20000c34 	.word	0x20000c34
    f1e8:	20008474 	.word	0x20008474
    f1ec:	66666667 	.word	0x66666667
    f1f0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    f1f4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    f1f8:	f890 c00f 	ldrb.w	ip, [r0, #15]
    f1fc:	4561      	cmp	r1, ip
    f1fe:	4613      	mov	r3, r2
    f200:	d10a      	bne.n	f218 <_svfprintf_r+0x19c8>
    f202:	f04f 0e30 	mov.w	lr, #48	; 0x30
    f206:	f803 ec01 	strb.w	lr, [r3, #-1]
    f20a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f20c:	1e59      	subs	r1, r3, #1
    f20e:	9122      	str	r1, [sp, #136]	; 0x88
    f210:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    f214:	458c      	cmp	ip, r1
    f216:	d0f6      	beq.n	f206 <_svfprintf_r+0x19b6>
    f218:	2939      	cmp	r1, #57	; 0x39
    f21a:	bf16      	itet	ne
    f21c:	3101      	addne	r1, #1
    f21e:	7a81      	ldrbeq	r1, [r0, #10]
    f220:	b2c9      	uxtbne	r1, r1
    f222:	f803 1c01 	strb.w	r1, [r3, #-1]
    f226:	e6ae      	b.n	ef86 <_svfprintf_r+0x1736>
    f228:	2300      	movs	r3, #0
    f22a:	4690      	mov	r8, r2
    f22c:	9307      	str	r3, [sp, #28]
    f22e:	e760      	b.n	f0f2 <_svfprintf_r+0x18a2>
    f230:	ee1b 2a10 	vmov	r2, s22
    f234:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    f238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f23c:	8193      	strh	r3, [r2, #12]
    f23e:	f7fe bc16 	b.w	da6e <_svfprintf_r+0x21e>
    f242:	07f5      	lsls	r5, r6, #31
    f244:	f57f adfe 	bpl.w	ee44 <_svfprintf_r+0x15f4>
    f248:	e5f8      	b.n	ee3c <_svfprintf_r+0x15ec>
    f24a:	9305      	str	r3, [sp, #20]
    f24c:	e6ce      	b.n	efec <_svfprintf_r+0x179c>
    f24e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    f252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f256:	f43f ad8b 	beq.w	ed70 <_svfprintf_r+0x1520>
    f25a:	f1c2 0201 	rsb	r2, r2, #1
    f25e:	921b      	str	r2, [sp, #108]	; 0x6c
    f260:	e587      	b.n	ed72 <_svfprintf_r+0x1522>
    f262:	2367      	movs	r3, #103	; 0x67
    f264:	930b      	str	r3, [sp, #44]	; 0x2c
    f266:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f268:	780b      	ldrb	r3, [r1, #0]
    f26a:	2bff      	cmp	r3, #255	; 0xff
    f26c:	d079      	beq.n	f362 <_svfprintf_r+0x1b12>
    f26e:	2500      	movs	r5, #0
    f270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f272:	4628      	mov	r0, r5
    f274:	e003      	b.n	f27e <_svfprintf_r+0x1a2e>
    f276:	3001      	adds	r0, #1
    f278:	3101      	adds	r1, #1
    f27a:	2bff      	cmp	r3, #255	; 0xff
    f27c:	d008      	beq.n	f290 <_svfprintf_r+0x1a40>
    f27e:	4293      	cmp	r3, r2
    f280:	da06      	bge.n	f290 <_svfprintf_r+0x1a40>
    f282:	1ad2      	subs	r2, r2, r3
    f284:	784b      	ldrb	r3, [r1, #1]
    f286:	2b00      	cmp	r3, #0
    f288:	d1f5      	bne.n	f276 <_svfprintf_r+0x1a26>
    f28a:	780b      	ldrb	r3, [r1, #0]
    f28c:	3501      	adds	r5, #1
    f28e:	e7f4      	b.n	f27a <_svfprintf_r+0x1a2a>
    f290:	920c      	str	r2, [sp, #48]	; 0x30
    f292:	9113      	str	r1, [sp, #76]	; 0x4c
    f294:	900d      	str	r0, [sp, #52]	; 0x34
    f296:	950f      	str	r5, [sp, #60]	; 0x3c
    f298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f29a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f29c:	9916      	ldr	r1, [sp, #88]	; 0x58
    f29e:	4413      	add	r3, r2
    f2a0:	9a05      	ldr	r2, [sp, #20]
    f2a2:	fb01 2303 	mla	r3, r1, r3, r2
    f2a6:	9305      	str	r3, [sp, #20]
    f2a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f2ac:	9302      	str	r3, [sp, #8]
    f2ae:	e5d5      	b.n	ee5c <_svfprintf_r+0x160c>
    f2b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f2b2:	18d3      	adds	r3, r2, r3
    f2b4:	4419      	add	r1, r3
    f2b6:	2366      	movs	r3, #102	; 0x66
    f2b8:	9105      	str	r1, [sp, #20]
    f2ba:	930b      	str	r3, [sp, #44]	; 0x2c
    f2bc:	e72d      	b.n	f11a <_svfprintf_r+0x18ca>
    f2be:	f1c3 0301 	rsb	r3, r3, #1
    f2c2:	441a      	add	r2, r3
    f2c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f2c8:	9302      	str	r3, [sp, #8]
    f2ca:	2367      	movs	r3, #103	; 0x67
    f2cc:	9205      	str	r2, [sp, #20]
    f2ce:	930b      	str	r3, [sp, #44]	; 0x2c
    f2d0:	e698      	b.n	f004 <_svfprintf_r+0x17b4>
    f2d2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    f2d6:	e759      	b.n	f18c <_svfprintf_r+0x193c>
    f2d8:	9b03      	ldr	r3, [sp, #12]
    f2da:	f8dd 9008 	ldr.w	r9, [sp, #8]
    f2de:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f2e2:	9305      	str	r3, [sp, #20]
    f2e4:	e4b4      	b.n	ec50 <_svfprintf_r+0x1400>
    f2e6:	ee18 3a90 	vmov	r3, s17
    f2ea:	2b00      	cmp	r3, #0
    f2ec:	bfb4      	ite	lt
    f2ee:	212d      	movlt	r1, #45	; 0x2d
    f2f0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    f2f4:	4c25      	ldr	r4, [pc, #148]	; (f38c <_svfprintf_r+0x1b3c>)
    f2f6:	4b26      	ldr	r3, [pc, #152]	; (f390 <_svfprintf_r+0x1b40>)
    f2f8:	bfb8      	it	lt
    f2fa:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    f2fe:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    f302:	f7fe bc79 	b.w	dbf8 <_svfprintf_r+0x3a8>
    f306:	9b03      	ldr	r3, [sp, #12]
    f308:	9302      	str	r3, [sp, #8]
    f30a:	9305      	str	r3, [sp, #20]
    f30c:	2373      	movs	r3, #115	; 0x73
    f30e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f312:	9003      	str	r0, [sp, #12]
    f314:	900f      	str	r0, [sp, #60]	; 0x3c
    f316:	900d      	str	r0, [sp, #52]	; 0x34
    f318:	930b      	str	r3, [sp, #44]	; 0x2c
    f31a:	f7fe bc7a 	b.w	dc12 <_svfprintf_r+0x3c2>
    f31e:	2302      	movs	r3, #2
    f320:	9314      	str	r3, [sp, #80]	; 0x50
    f322:	e584      	b.n	ee2e <_svfprintf_r+0x15de>
    f324:	9a03      	ldr	r2, [sp, #12]
    f326:	4313      	orrs	r3, r2
    f328:	d105      	bne.n	f336 <_svfprintf_r+0x1ae6>
    f32a:	2301      	movs	r3, #1
    f32c:	2266      	movs	r2, #102	; 0x66
    f32e:	9302      	str	r3, [sp, #8]
    f330:	920b      	str	r2, [sp, #44]	; 0x2c
    f332:	9305      	str	r3, [sp, #20]
    f334:	e666      	b.n	f004 <_svfprintf_r+0x17b4>
    f336:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f338:	3301      	adds	r3, #1
    f33a:	441a      	add	r2, r3
    f33c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f340:	9302      	str	r3, [sp, #8]
    f342:	2366      	movs	r3, #102	; 0x66
    f344:	9205      	str	r2, [sp, #20]
    f346:	930b      	str	r3, [sp, #44]	; 0x2c
    f348:	e65c      	b.n	f004 <_svfprintf_r+0x17b4>
    f34a:	9a08      	ldr	r2, [sp, #32]
    f34c:	f899 3001 	ldrb.w	r3, [r9, #1]
    f350:	4689      	mov	r9, r1
    f352:	f852 1b04 	ldr.w	r1, [r2], #4
    f356:	9208      	str	r2, [sp, #32]
    f358:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    f35c:	9103      	str	r1, [sp, #12]
    f35e:	f7fe bad3 	b.w	d908 <_svfprintf_r+0xb8>
    f362:	2300      	movs	r3, #0
    f364:	930f      	str	r3, [sp, #60]	; 0x3c
    f366:	930d      	str	r3, [sp, #52]	; 0x34
    f368:	e796      	b.n	f298 <_svfprintf_r+0x1a48>
    f36a:	230c      	movs	r3, #12
    f36c:	f8cb 3000 	str.w	r3, [fp]
    f370:	f04f 33ff 	mov.w	r3, #4294967295
    f374:	9304      	str	r3, [sp, #16]
    f376:	f7fe bb81 	b.w	da7c <_svfprintf_r+0x22c>
    f37a:	ee1b 2a10 	vmov	r2, s22
    f37e:	8993      	ldrh	r3, [r2, #12]
    f380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f384:	8193      	strh	r3, [r2, #12]
    f386:	f7fe bec8 	b.w	e11a <_svfprintf_r+0x8ca>
    f38a:	bf00      	nop
    f38c:	20000c30 	.word	0x20000c30
    f390:	20000588 	.word	0x20000588

0000f394 <__ssvfscanf_r>:
    f394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f398:	ed2d 8b02 	vpush	{d8}
    f39c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    f3a0:	468b      	mov	fp, r1
    f3a2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    f3a6:	af02      	add	r7, sp, #8
    f3a8:	048c      	lsls	r4, r1, #18
    f3aa:	4681      	mov	r9, r0
    f3ac:	64fa      	str	r2, [r7, #76]	; 0x4c
    f3ae:	633b      	str	r3, [r7, #48]	; 0x30
    f3b0:	d409      	bmi.n	f3c6 <__ssvfscanf_r+0x32>
    f3b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    f3b6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    f3ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f3be:	f8ab 100c 	strh.w	r1, [fp, #12]
    f3c2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    f3c6:	2300      	movs	r3, #0
    f3c8:	461c      	mov	r4, r3
    f3ca:	2208      	movs	r2, #8
    f3cc:	4619      	mov	r1, r3
    f3ce:	f107 0058 	add.w	r0, r7, #88	; 0x58
    f3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    f3d4:	46a2      	mov	sl, r4
    f3d6:	f7fc fb19 	bl	ba0c <memset>
    f3da:	643c      	str	r4, [r7, #64]	; 0x40
    f3dc:	627c      	str	r4, [r7, #36]	; 0x24
    f3de:	63bc      	str	r4, [r7, #56]	; 0x38
    f3e0:	647c      	str	r4, [r7, #68]	; 0x44
    f3e2:	4b83      	ldr	r3, [pc, #524]	; (f5f0 <__ssvfscanf_r+0x25c>)
    f3e4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f3e8:	f7fc fbda 	bl	bba0 <__locale_mb_cur_max>
    f3ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
    f3f0:	4603      	mov	r3, r0
    f3f2:	9200      	str	r2, [sp, #0]
    f3f4:	f107 0154 	add.w	r1, r7, #84	; 0x54
    f3f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    f3fa:	4648      	mov	r0, r9
    f3fc:	47a0      	blx	r4
    f3fe:	1e05      	subs	r5, r0, #0
    f400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f402:	db33      	blt.n	f46c <__ssvfscanf_r+0xd8>
    f404:	442b      	add	r3, r5
    f406:	64fb      	str	r3, [r7, #76]	; 0x4c
    f408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f40a:	462e      	mov	r6, r5
    f40c:	2b00      	cmp	r3, #0
    f40e:	f000 80b6 	beq.w	f57e <__ssvfscanf_r+0x1ea>
    f412:	2d01      	cmp	r5, #1
    f414:	d038      	beq.n	f488 <__ssvfscanf_r+0xf4>
    f416:	2b25      	cmp	r3, #37	; 0x25
    f418:	d040      	beq.n	f49c <__ssvfscanf_r+0x108>
    f41a:	2d00      	cmp	r5, #0
    f41c:	d0e1      	beq.n	f3e2 <__ssvfscanf_r+0x4e>
    f41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f420:	1b9e      	subs	r6, r3, r6
    f422:	f8db 3004 	ldr.w	r3, [fp, #4]
    f426:	1e74      	subs	r4, r6, #1
    f428:	2b00      	cmp	r3, #0
    f42a:	f340 8098 	ble.w	f55e <__ssvfscanf_r+0x1ca>
    f42e:	f8db 1000 	ldr.w	r1, [fp]
    f432:	f894 c001 	ldrb.w	ip, [r4, #1]
    f436:	f891 e000 	ldrb.w	lr, [r1]
    f43a:	1ca3      	adds	r3, r4, #2
    f43c:	eb0a 0003 	add.w	r0, sl, r3
    f440:	45e6      	cmp	lr, ip
    f442:	f101 0101 	add.w	r1, r1, #1
    f446:	eba3 0206 	sub.w	r2, r3, r6
    f44a:	f104 0401 	add.w	r4, r4, #1
    f44e:	eba0 0006 	sub.w	r0, r0, r6
    f452:	f040 8094 	bne.w	f57e <__ssvfscanf_r+0x1ea>
    f456:	f8db 3004 	ldr.w	r3, [fp, #4]
    f45a:	f8cb 1000 	str.w	r1, [fp]
    f45e:	3b01      	subs	r3, #1
    f460:	42aa      	cmp	r2, r5
    f462:	f8cb 3004 	str.w	r3, [fp, #4]
    f466:	dbdf      	blt.n	f428 <__ssvfscanf_r+0x94>
    f468:	4682      	mov	sl, r0
    f46a:	e7ba      	b.n	f3e2 <__ssvfscanf_r+0x4e>
    f46c:	3301      	adds	r3, #1
    f46e:	64fb      	str	r3, [r7, #76]	; 0x4c
    f470:	2208      	movs	r2, #8
    f472:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    f476:	2100      	movs	r1, #0
    f478:	f107 0058 	add.w	r0, r7, #88	; 0x58
    f47c:	657b      	str	r3, [r7, #84]	; 0x54
    f47e:	f7fc fac5 	bl	ba0c <memset>
    f482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f484:	2b00      	cmp	r3, #0
    f486:	d07a      	beq.n	f57e <__ssvfscanf_r+0x1ea>
    f488:	4e5a      	ldr	r6, [pc, #360]	; (f5f4 <__ssvfscanf_r+0x260>)
    f48a:	5cf2      	ldrb	r2, [r6, r3]
    f48c:	0710      	lsls	r0, r2, #28
    f48e:	f100 851c 	bmi.w	feca <__ssvfscanf_r+0xb36>
    f492:	2b25      	cmp	r3, #37	; 0x25
    f494:	f040 8086 	bne.w	f5a4 <__ssvfscanf_r+0x210>
    f498:	2501      	movs	r5, #1
    f49a:	462e      	mov	r6, r5
    f49c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    f49e:	2400      	movs	r4, #0
    f4a0:	7802      	ldrb	r2, [r0, #0]
    f4a2:	46a0      	mov	r8, r4
    f4a4:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    f4a8:	1c41      	adds	r1, r0, #1
    f4aa:	2b55      	cmp	r3, #85	; 0x55
    f4ac:	d867      	bhi.n	f57e <__ssvfscanf_r+0x1ea>
    f4ae:	e8df f013 	tbh	[pc, r3, lsl #1]
    f4b2:	070a      	.short	0x070a
    f4b4:	00660066 	.word	0x00660066
    f4b8:	00660066 	.word	0x00660066
    f4bc:	00660701 	.word	0x00660701
    f4c0:	00660066 	.word	0x00660066
    f4c4:	00660066 	.word	0x00660066
    f4c8:	060c060c 	.word	0x060c060c
    f4cc:	060c060c 	.word	0x060c060c
    f4d0:	060c060c 	.word	0x060c060c
    f4d4:	060c060c 	.word	0x060c060c
    f4d8:	060c060c 	.word	0x060c060c
    f4dc:	00660066 	.word	0x00660066
    f4e0:	00660066 	.word	0x00660066
    f4e4:	00660066 	.word	0x00660066
    f4e8:	06180066 	.word	0x06180066
    f4ec:	048e0066 	.word	0x048e0066
    f4f0:	061804c9 	.word	0x061804c9
    f4f4:	06180618 	.word	0x06180618
    f4f8:	00660066 	.word	0x00660066
    f4fc:	00660066 	.word	0x00660066
    f500:	00660082 	.word	0x00660082
    f504:	04bf0066 	.word	0x04bf0066
    f508:	00660066 	.word	0x00660066
    f50c:	00890066 	.word	0x00890066
    f510:	00660066 	.word	0x00660066
    f514:	00660066 	.word	0x00660066
    f518:	0066066b 	.word	0x0066066b
    f51c:	06dd0066 	.word	0x06dd0066
    f520:	00660066 	.word	0x00660066
    f524:	00660066 	.word	0x00660066
    f528:	06180066 	.word	0x06180066
    f52c:	04900066 	.word	0x04900066
    f530:	061804cb 	.word	0x061804cb
    f534:	06180618 	.word	0x06180618
    f538:	06d206be 	.word	0x06d206be
    f53c:	00660082 	.word	0x00660082
    f540:	06f306e7 	.word	0x06f306e7
    f544:	04c106ac 	.word	0x04c106ac
    f548:	006606da 	.word	0x006606da
    f54c:	008b0066 	.word	0x008b0066
    f550:	06ca007d 	.word	0x06ca007d
    f554:	00660066 	.word	0x00660066
    f558:	0066066b 	.word	0x0066066b
    f55c:	007d      	.short	0x007d
    f55e:	4659      	mov	r1, fp
    f560:	4648      	mov	r0, r9
    f562:	f003 f8c1 	bl	126e8 <__ssrefill_r>
    f566:	2800      	cmp	r0, #0
    f568:	f43f af61 	beq.w	f42e <__ssvfscanf_r+0x9a>
    f56c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f56e:	2b00      	cmp	r3, #0
    f570:	f001 8052 	beq.w	10618 <__ssvfscanf_r+0x1284>
    f574:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    f578:	065a      	lsls	r2, r3, #25
    f57a:	f101 804d 	bmi.w	10618 <__ssvfscanf_r+0x1284>
    f57e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f580:	b143      	cbz	r3, f594 <__ssvfscanf_r+0x200>
    f582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f584:	f8d3 8000 	ldr.w	r8, [r3]
    f588:	f1b8 0f00 	cmp.w	r8, #0
    f58c:	d002      	beq.n	f594 <__ssvfscanf_r+0x200>
    f58e:	4640      	mov	r0, r8
    f590:	f7fa fb0c 	bl	9bac <free>
    f594:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f596:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    f59a:	46bd      	mov	sp, r7
    f59c:	ecbd 8b02 	vpop	{d8}
    f5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f5a6:	2501      	movs	r5, #1
    f5a8:	1e5e      	subs	r6, r3, #1
    f5aa:	e73a      	b.n	f422 <__ssvfscanf_r+0x8e>
    f5ac:	0723      	lsls	r3, r4, #28
    f5ae:	d1e6      	bne.n	f57e <__ssvfscanf_r+0x1ea>
    f5b0:	7842      	ldrb	r2, [r0, #1]
    f5b2:	4608      	mov	r0, r1
    f5b4:	e776      	b.n	f4a4 <__ssvfscanf_r+0x110>
    f5b6:	0722      	lsls	r2, r4, #28
    f5b8:	d1e1      	bne.n	f57e <__ssvfscanf_r+0x1ea>
    f5ba:	7842      	ldrb	r2, [r0, #1]
    f5bc:	f044 0402 	orr.w	r4, r4, #2
    f5c0:	4608      	mov	r0, r1
    f5c2:	e76f      	b.n	f4a4 <__ssvfscanf_r+0x110>
    f5c4:	f044 0401 	orr.w	r4, r4, #1
    f5c8:	64f9      	str	r1, [r7, #76]	; 0x4c
    f5ca:	2502      	movs	r5, #2
    f5cc:	f8db 3004 	ldr.w	r3, [fp, #4]
    f5d0:	2b00      	cmp	r3, #0
    f5d2:	f340 8408 	ble.w	fde6 <__ssvfscanf_r+0xa52>
    f5d6:	0660      	lsls	r0, r4, #25
    f5d8:	f140 840f 	bpl.w	fdfa <__ssvfscanf_r+0xa66>
    f5dc:	1e6b      	subs	r3, r5, #1
    f5de:	2b03      	cmp	r3, #3
    f5e0:	f201 80eb 	bhi.w	107ba <__ssvfscanf_r+0x1426>
    f5e4:	e8df f013 	tbh	[pc, r3, lsl #1]
    f5e8:	01f1027b 	.word	0x01f1027b
    f5ec:	0008014b 	.word	0x0008014b
    f5f0:	200085e8 	.word	0x200085e8
    f5f4:	20000a99 	.word	0x20000a99
    f5f8:	4648      	mov	r0, r9
    f5fa:	f001 fc8f 	bl	10f1c <_localeconv_r>
    f5fe:	6803      	ldr	r3, [r0, #0]
    f600:	623b      	str	r3, [r7, #32]
    f602:	f108 33ff 	add.w	r3, r8, #4294967295
    f606:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f60a:	f240 855a 	bls.w	100c2 <__ssvfscanf_r+0xd2e>
    f60e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    f612:	eb08 0305 	add.w	r3, r8, r5
    f616:	613b      	str	r3, [r7, #16]
    f618:	f240 185d 	movw	r8, #349	; 0x15d
    f61c:	2600      	movs	r6, #0
    f61e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f622:	ee08 9a10 	vmov	s16, r9
    f626:	e9c7 6605 	strd	r6, r6, [r7, #20]
    f62a:	63fe      	str	r6, [r7, #60]	; 0x3c
    f62c:	637e      	str	r6, [r7, #52]	; 0x34
    f62e:	61fe      	str	r6, [r7, #28]
    f630:	64be      	str	r6, [r7, #72]	; 0x48
    f632:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    f636:	62bb      	str	r3, [r7, #40]	; 0x28
    f638:	461d      	mov	r5, r3
    f63a:	4646      	mov	r6, r8
    f63c:	f8db 1000 	ldr.w	r1, [fp]
    f640:	780a      	ldrb	r2, [r1, #0]
    f642:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    f646:	2b4e      	cmp	r3, #78	; 0x4e
    f648:	d850      	bhi.n	f6ec <__ssvfscanf_r+0x358>
    f64a:	e8df f013 	tbh	[pc, r3, lsl #1]
    f64e:	037e      	.short	0x037e
    f650:	037e004f 	.word	0x037e004f
    f654:	004f004f 	.word	0x004f004f
    f658:	00a600a3 	.word	0x00a600a3
    f65c:	00a600a6 	.word	0x00a600a6
    f660:	00a600a6 	.word	0x00a600a6
    f664:	00a600a6 	.word	0x00a600a6
    f668:	00a600a6 	.word	0x00a600a6
    f66c:	004f004f 	.word	0x004f004f
    f670:	004f004f 	.word	0x004f004f
    f674:	004f004f 	.word	0x004f004f
    f678:	0374004f 	.word	0x0374004f
    f67c:	030b030b 	.word	0x030b030b
    f680:	039e030b 	.word	0x039e030b
    f684:	004f0394 	.word	0x004f0394
    f688:	0384004f 	.word	0x0384004f
    f68c:	004f004f 	.word	0x004f004f
    f690:	004f004f 	.word	0x004f004f
    f694:	004f035d 	.word	0x004f035d
    f698:	004f033a 	.word	0x004f033a
    f69c:	004f004f 	.word	0x004f004f
    f6a0:	004f0333 	.word	0x004f0333
    f6a4:	004f004f 	.word	0x004f004f
    f6a8:	036d031e 	.word	0x036d031e
    f6ac:	004f004f 	.word	0x004f004f
    f6b0:	004f004f 	.word	0x004f004f
    f6b4:	004f004f 	.word	0x004f004f
    f6b8:	0374004f 	.word	0x0374004f
    f6bc:	030b030b 	.word	0x030b030b
    f6c0:	039e030b 	.word	0x039e030b
    f6c4:	004f0394 	.word	0x004f0394
    f6c8:	0384004f 	.word	0x0384004f
    f6cc:	004f004f 	.word	0x004f004f
    f6d0:	004f004f 	.word	0x004f004f
    f6d4:	004f035d 	.word	0x004f035d
    f6d8:	004f033a 	.word	0x004f033a
    f6dc:	004f004f 	.word	0x004f004f
    f6e0:	004f0333 	.word	0x004f0333
    f6e4:	004f004f 	.word	0x004f004f
    f6e8:	036d031e 	.word	0x036d031e
    f6ec:	05a0      	lsls	r0, r4, #22
    f6ee:	d56f      	bpl.n	f7d0 <__ssvfscanf_r+0x43c>
    f6f0:	6a38      	ldr	r0, [r7, #32]
    f6f2:	7803      	ldrb	r3, [r0, #0]
    f6f4:	4293      	cmp	r3, r2
    f6f6:	d16b      	bne.n	f7d0 <__ssvfscanf_r+0x43c>
    f6f8:	e9c7 4502 	strd	r4, r5, [r7, #8]
    f6fc:	607e      	str	r6, [r7, #4]
    f6fe:	4681      	mov	r9, r0
    f700:	ee18 6a10 	vmov	r6, s16
    f704:	f04f 0800 	mov.w	r8, #0
    f708:	465c      	mov	r4, fp
    f70a:	e007      	b.n	f71c <__ssvfscanf_r+0x388>
    f70c:	6021      	str	r1, [r4, #0]
    f70e:	f891 e000 	ldrb.w	lr, [r1]
    f712:	f899 0000 	ldrb.w	r0, [r9]
    f716:	4586      	cmp	lr, r0
    f718:	d11c      	bne.n	f754 <__ssvfscanf_r+0x3c0>
    f71a:	46da      	mov	sl, fp
    f71c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    f720:	4645      	mov	r5, r8
    f722:	f10a 0b01 	add.w	fp, sl, #1
    f726:	3101      	adds	r1, #1
    f728:	f108 0801 	add.w	r8, r8, #1
    f72c:	2800      	cmp	r0, #0
    f72e:	f000 8664 	beq.w	103fa <__ssvfscanf_r+0x1066>
    f732:	6860      	ldr	r0, [r4, #4]
    f734:	3801      	subs	r0, #1
    f736:	2800      	cmp	r0, #0
    f738:	6060      	str	r0, [r4, #4]
    f73a:	dce7      	bgt.n	f70c <__ssvfscanf_r+0x378>
    f73c:	4621      	mov	r1, r4
    f73e:	4630      	mov	r0, r6
    f740:	f002 ffd2 	bl	126e8 <__ssrefill_r>
    f744:	b930      	cbnz	r0, f754 <__ssvfscanf_r+0x3c0>
    f746:	6821      	ldr	r1, [r4, #0]
    f748:	f899 0000 	ldrb.w	r0, [r9]
    f74c:	f891 e000 	ldrb.w	lr, [r1]
    f750:	4586      	cmp	lr, r0
    f752:	d0e2      	beq.n	f71a <__ssvfscanf_r+0x386>
    f754:	46a3      	mov	fp, r4
    f756:	6a3a      	ldr	r2, [r7, #32]
    f758:	68bc      	ldr	r4, [r7, #8]
    f75a:	613d      	str	r5, [r7, #16]
    f75c:	462b      	mov	r3, r5
    f75e:	46b1      	mov	r9, r6
    f760:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f762:	68fd      	ldr	r5, [r7, #12]
    f764:	64bd      	str	r5, [r7, #72]	; 0x48
    f766:	3301      	adds	r3, #1
    f768:	465d      	mov	r5, fp
    f76a:	eb02 0803 	add.w	r8, r2, r3
    f76e:	46b3      	mov	fp, r6
    f770:	4626      	mov	r6, r4
    f772:	4614      	mov	r4, r2
    f774:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    f778:	462a      	mov	r2, r5
    f77a:	4648      	mov	r0, r9
    f77c:	f002 ff74 	bl	12668 <_sungetc_r>
    f780:	4544      	cmp	r4, r8
    f782:	d1f7      	bne.n	f774 <__ssvfscanf_r+0x3e0>
    f784:	693b      	ldr	r3, [r7, #16]
    f786:	4634      	mov	r4, r6
    f788:	ebaa 0a03 	sub.w	sl, sl, r3
    f78c:	465e      	mov	r6, fp
    f78e:	46ab      	mov	fp, r5
    f790:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    f792:	e020      	b.n	f7d6 <__ssvfscanf_r+0x442>
    f794:	05e0      	lsls	r0, r4, #23
    f796:	f100 8501 	bmi.w	1019c <__ssvfscanf_r+0xe08>
    f79a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f79c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    f79e:	42d9      	cmn	r1, r3
    f7a0:	d116      	bne.n	f7d0 <__ssvfscanf_r+0x43c>
    f7a2:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    f7a6:	f805 2b01 	strb.w	r2, [r5], #1
    f7aa:	3e01      	subs	r6, #1
    f7ac:	f8db 3004 	ldr.w	r3, [fp, #4]
    f7b0:	3b01      	subs	r3, #1
    f7b2:	2b00      	cmp	r3, #0
    f7b4:	f10a 0a01 	add.w	sl, sl, #1
    f7b8:	f8cb 3004 	str.w	r3, [fp, #4]
    f7bc:	f340 836f 	ble.w	fe9e <__ssvfscanf_r+0xb0a>
    f7c0:	f8db 3000 	ldr.w	r3, [fp]
    f7c4:	3301      	adds	r3, #1
    f7c6:	f8cb 3000 	str.w	r3, [fp]
    f7ca:	2e00      	cmp	r6, #0
    f7cc:	f47f af36 	bne.w	f63c <__ssvfscanf_r+0x2a8>
    f7d0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f7d2:	ee18 9a10 	vmov	r9, s16
    f7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f7d8:	2b00      	cmp	r3, #0
    f7da:	f040 82dc 	bne.w	fd96 <__ssvfscanf_r+0xa02>
    f7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f7e0:	3b01      	subs	r3, #1
    f7e2:	2b01      	cmp	r3, #1
    f7e4:	f241 8016 	bls.w	10814 <__ssvfscanf_r+0x1480>
    f7e8:	1e73      	subs	r3, r6, #1
    f7ea:	2b06      	cmp	r3, #6
    f7ec:	f240 8627 	bls.w	1043e <__ssvfscanf_r+0x10aa>
    f7f0:	05e3      	lsls	r3, r4, #23
    f7f2:	d51b      	bpl.n	f82c <__ssvfscanf_r+0x498>
    f7f4:	0566      	lsls	r6, r4, #21
    f7f6:	f101 80b5 	bmi.w	10964 <__ssvfscanf_r+0x15d0>
    f7fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    f7fe:	2965      	cmp	r1, #101	; 0x65
    f800:	f105 33ff 	add.w	r3, r5, #4294967295
    f804:	f10a 36ff 	add.w	r6, sl, #4294967295
    f808:	d00a      	beq.n	f820 <__ssvfscanf_r+0x48c>
    f80a:	2945      	cmp	r1, #69	; 0x45
    f80c:	d008      	beq.n	f820 <__ssvfscanf_r+0x48c>
    f80e:	465a      	mov	r2, fp
    f810:	4648      	mov	r0, r9
    f812:	f002 ff29 	bl	12668 <_sungetc_r>
    f816:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    f81a:	f1aa 0602 	sub.w	r6, sl, #2
    f81e:	1eab      	subs	r3, r5, #2
    f820:	465a      	mov	r2, fp
    f822:	4648      	mov	r0, r9
    f824:	46b2      	mov	sl, r6
    f826:	461d      	mov	r5, r3
    f828:	f002 ff1e 	bl	12668 <_sungetc_r>
    f82c:	f014 0210 	ands.w	r2, r4, #16
    f830:	f47f add7 	bne.w	f3e2 <__ssvfscanf_r+0x4e>
    f834:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    f838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f83c:	702a      	strb	r2, [r5, #0]
    f83e:	f000 84d2 	beq.w	101e6 <__ssvfscanf_r+0xe52>
    f842:	69bb      	ldr	r3, [r7, #24]
    f844:	2b00      	cmp	r3, #0
    f846:	f040 872c 	bne.w	106a2 <__ssvfscanf_r+0x130e>
    f84a:	4648      	mov	r0, r9
    f84c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f84e:	2200      	movs	r2, #0
    f850:	f7fb fda2 	bl	b398 <_strtod_r>
    f854:	07e0      	lsls	r0, r4, #31
    f856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f858:	f100 85c9 	bmi.w	103ee <__ssvfscanf_r+0x105a>
    f85c:	07a1      	lsls	r1, r4, #30
    f85e:	f100 85c6 	bmi.w	103ee <__ssvfscanf_r+0x105a>
    f862:	eeb4 0b40 	vcmp.f64	d0, d0
    f866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f86a:	f853 4b04 	ldr.w	r4, [r3], #4
    f86e:	f180 86f4 	bvs.w	1065a <__ssvfscanf_r+0x12c6>
    f872:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f876:	633b      	str	r3, [r7, #48]	; 0x30
    f878:	ed84 0a00 	vstr	s0, [r4]
    f87c:	e3a2      	b.n	ffc4 <__ssvfscanf_r+0xc30>
    f87e:	f108 33ff 	add.w	r3, r8, #4294967295
    f882:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f886:	f240 83a2 	bls.w	ffce <__ssvfscanf_r+0xc3a>
    f88a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    f88e:	eb08 0302 	add.w	r3, r8, r2
    f892:	63fb      	str	r3, [r7, #60]	; 0x3c
    f894:	f240 185d 	movw	r8, #349	; 0x15d
    f898:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f89c:	2200      	movs	r2, #0
    f89e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    f8a0:	62bb      	str	r3, [r7, #40]	; 0x28
    f8a2:	4659      	mov	r1, fp
    f8a4:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    f8a8:	46d3      	mov	fp, sl
    f8aa:	461d      	mov	r5, r3
    f8ac:	4692      	mov	sl, r2
    f8ae:	680a      	ldr	r2, [r1, #0]
    f8b0:	7810      	ldrb	r0, [r2, #0]
    f8b2:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    f8b6:	2b4d      	cmp	r3, #77	; 0x4d
    f8b8:	d860      	bhi.n	f97c <__ssvfscanf_r+0x5e8>
    f8ba:	e8df f013 	tbh	[pc, r3, lsl #1]
    f8be:	0282      	.short	0x0282
    f8c0:	0282005f 	.word	0x0282005f
    f8c4:	005f005f 	.word	0x005f005f
    f8c8:	01e002cd 	.word	0x01e002cd
    f8cc:	01e001e0 	.word	0x01e001e0
    f8d0:	01e001e0 	.word	0x01e001e0
    f8d4:	01e001e0 	.word	0x01e001e0
    f8d8:	026f026f 	.word	0x026f026f
    f8dc:	005f005f 	.word	0x005f005f
    f8e0:	005f005f 	.word	0x005f005f
    f8e4:	005f005f 	.word	0x005f005f
    f8e8:	004e005f 	.word	0x004e005f
    f8ec:	004e004e 	.word	0x004e004e
    f8f0:	004e004e 	.word	0x004e004e
    f8f4:	005f004e 	.word	0x005f004e
    f8f8:	005f005f 	.word	0x005f005f
    f8fc:	005f005f 	.word	0x005f005f
    f900:	005f005f 	.word	0x005f005f
    f904:	005f005f 	.word	0x005f005f
    f908:	005f005f 	.word	0x005f005f
    f90c:	005f005f 	.word	0x005f005f
    f910:	005f005f 	.word	0x005f005f
    f914:	005f005f 	.word	0x005f005f
    f918:	005f0276 	.word	0x005f0276
    f91c:	005f005f 	.word	0x005f005f
    f920:	005f005f 	.word	0x005f005f
    f924:	005f005f 	.word	0x005f005f
    f928:	004e005f 	.word	0x004e005f
    f92c:	004e004e 	.word	0x004e004e
    f930:	004e004e 	.word	0x004e004e
    f934:	005f004e 	.word	0x005f004e
    f938:	005f005f 	.word	0x005f005f
    f93c:	005f005f 	.word	0x005f005f
    f940:	005f005f 	.word	0x005f005f
    f944:	005f005f 	.word	0x005f005f
    f948:	005f005f 	.word	0x005f005f
    f94c:	005f005f 	.word	0x005f005f
    f950:	005f005f 	.word	0x005f005f
    f954:	005f005f 	.word	0x005f005f
    f958:	0276      	.short	0x0276
    f95a:	2e0a      	cmp	r6, #10
    f95c:	dd0e      	ble.n	f97c <__ssvfscanf_r+0x5e8>
    f95e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    f962:	684b      	ldr	r3, [r1, #4]
    f964:	f805 0b01 	strb.w	r0, [r5], #1
    f968:	3b01      	subs	r3, #1
    f96a:	2b00      	cmp	r3, #0
    f96c:	604b      	str	r3, [r1, #4]
    f96e:	f340 828d 	ble.w	fe8c <__ssvfscanf_r+0xaf8>
    f972:	3201      	adds	r2, #1
    f974:	600a      	str	r2, [r1, #0]
    f976:	f1b8 0801 	subs.w	r8, r8, #1
    f97a:	d198      	bne.n	f8ae <__ssvfscanf_r+0x51a>
    f97c:	05e0      	lsls	r0, r4, #23
    f97e:	46d0      	mov	r8, sl
    f980:	63be      	str	r6, [r7, #56]	; 0x38
    f982:	46da      	mov	sl, fp
    f984:	468b      	mov	fp, r1
    f986:	d507      	bpl.n	f998 <__ssvfscanf_r+0x604>
    f988:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f98a:	429d      	cmp	r5, r3
    f98c:	f200 8422 	bhi.w	101d4 <__ssvfscanf_r+0xe40>
    f990:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f992:	429d      	cmp	r5, r3
    f994:	f43f adf3 	beq.w	f57e <__ssvfscanf_r+0x1ea>
    f998:	f014 0210 	ands.w	r2, r4, #16
    f99c:	d110      	bne.n	f9c0 <__ssvfscanf_r+0x62c>
    f99e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f9a2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    f9a4:	702a      	strb	r2, [r5, #0]
    f9a6:	4648      	mov	r0, r9
    f9a8:	47b0      	blx	r6
    f9aa:	06a1      	lsls	r1, r4, #26
    f9ac:	f140 8408 	bpl.w	101c0 <__ssvfscanf_r+0xe2c>
    f9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f9b2:	f853 2b04 	ldr.w	r2, [r3], #4
    f9b6:	6010      	str	r0, [r2, #0]
    f9b8:	633b      	str	r3, [r7, #48]	; 0x30
    f9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f9bc:	3301      	adds	r3, #1
    f9be:	647b      	str	r3, [r7, #68]	; 0x44
    f9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f9c2:	1aed      	subs	r5, r5, r3
    f9c4:	4445      	add	r5, r8
    f9c6:	44aa      	add	sl, r5
    f9c8:	e50b      	b.n	f3e2 <__ssvfscanf_r+0x4e>
    f9ca:	f1b8 0f00 	cmp.w	r8, #0
    f9ce:	bf08      	it	eq
    f9d0:	f04f 38ff 	moveq.w	r8, #4294967295
    f9d4:	07e0      	lsls	r0, r4, #31
    f9d6:	f140 8295 	bpl.w	ff04 <__ssvfscanf_r+0xb70>
    f9da:	f014 0310 	ands.w	r3, r4, #16
    f9de:	637b      	str	r3, [r7, #52]	; 0x34
    f9e0:	f040 8474 	bne.w	102cc <__ssvfscanf_r+0xf38>
    f9e4:	0621      	lsls	r1, r4, #24
    f9e6:	f140 8666 	bpl.w	106b6 <__ssvfscanf_r+0x1322>
    f9ea:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    f9ec:	f854 3b04 	ldr.w	r3, [r4], #4
    f9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    f9f2:	2b00      	cmp	r3, #0
    f9f4:	f43f adc3 	beq.w	f57e <__ssvfscanf_r+0x1ea>
    f9f8:	2080      	movs	r0, #128	; 0x80
    f9fa:	f7fa f8cf 	bl	9b9c <malloc>
    f9fe:	64b8      	str	r0, [r7, #72]	; 0x48
    fa00:	2800      	cmp	r0, #0
    fa02:	f000 8778 	beq.w	108f6 <__ssvfscanf_r+0x1562>
    fa06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fa08:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fa0a:	601a      	str	r2, [r3, #0]
    fa0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fa0e:	88d5      	ldrh	r5, [r2, #6]
    fa10:	8893      	ldrh	r3, [r2, #4]
    fa12:	429d      	cmp	r5, r3
    fa14:	f080 8552 	bcs.w	104bc <__ssvfscanf_r+0x1128>
    fa18:	6810      	ldr	r0, [r2, #0]
    fa1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fa1c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    fa20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fa22:	633c      	str	r4, [r7, #48]	; 0x30
    fa24:	3501      	adds	r5, #1
    fa26:	80dd      	strh	r5, [r3, #6]
    fa28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fa2a:	62bb      	str	r3, [r7, #40]	; 0x28
    fa2c:	2320      	movs	r3, #32
    fa2e:	623b      	str	r3, [r7, #32]
    fa30:	f8db 3000 	ldr.w	r3, [fp]
    fa34:	4eb1      	ldr	r6, [pc, #708]	; (fcfc <__ssvfscanf_r+0x968>)
    fa36:	781b      	ldrb	r3, [r3, #0]
    fa38:	5cf3      	ldrb	r3, [r6, r3]
    fa3a:	f013 0308 	ands.w	r3, r3, #8
    fa3e:	f040 84bb 	bne.w	103b8 <__ssvfscanf_r+0x1024>
    fa42:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    fa44:	627e      	str	r6, [r7, #36]	; 0x24
    fa46:	461d      	mov	r5, r3
    fa48:	f7fc f8aa 	bl	bba0 <__locale_mb_cur_max>
    fa4c:	42a8      	cmp	r0, r5
    fa4e:	f43f ad8d 	beq.w	f56c <__ssvfscanf_r+0x1d8>
    fa52:	e9db 3200 	ldrd	r3, r2, [fp]
    fa56:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    fa5a:	f813 1b01 	ldrb.w	r1, [r3], #1
    fa5e:	5541      	strb	r1, [r0, r5]
    fa60:	3a01      	subs	r2, #1
    fa62:	2c03      	cmp	r4, #3
    fa64:	e9cb 3200 	strd	r3, r2, [fp]
    fa68:	f105 0501 	add.w	r5, r5, #1
    fa6c:	f107 0668 	add.w	r6, r7, #104	; 0x68
    fa70:	d102      	bne.n	fa78 <__ssvfscanf_r+0x6e4>
    fa72:	6833      	ldr	r3, [r6, #0]
    fa74:	2b04      	cmp	r3, #4
    fa76:	d004      	beq.n	fa82 <__ssvfscanf_r+0x6ee>
    fa78:	2208      	movs	r2, #8
    fa7a:	2100      	movs	r1, #0
    fa7c:	4630      	mov	r0, r6
    fa7e:	f7fb ffc5 	bl	ba0c <memset>
    fa82:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    fa86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fa88:	9600      	str	r6, [sp, #0]
    fa8a:	462b      	mov	r3, r5
    fa8c:	4648      	mov	r0, r9
    fa8e:	f002 fc17 	bl	122c0 <_mbrtowc_r>
    fa92:	1c42      	adds	r2, r0, #1
    fa94:	4604      	mov	r4, r0
    fa96:	f43f ad69 	beq.w	f56c <__ssvfscanf_r+0x1d8>
    fa9a:	2800      	cmp	r0, #0
    fa9c:	f040 8478 	bne.w	10390 <__ssvfscanf_r+0xffc>
    faa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    faa2:	6018      	str	r0, [r3, #0]
    faa4:	f002 fc68 	bl	12378 <iswspace>
    faa8:	2800      	cmp	r0, #0
    faaa:	f040 865c 	bne.w	10766 <__ssvfscanf_r+0x13d2>
    faae:	44aa      	add	sl, r5
    fab0:	f108 38ff 	add.w	r8, r8, #4294967295
    fab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fab6:	2b00      	cmp	r3, #0
    fab8:	f040 8633 	bne.w	10722 <__ssvfscanf_r+0x138e>
    fabc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fabe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fac0:	3304      	adds	r3, #4
    fac2:	64bb      	str	r3, [r7, #72]	; 0x48
    fac4:	2a00      	cmp	r2, #0
    fac6:	f000 862c 	beq.w	10722 <__ssvfscanf_r+0x138e>
    faca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    facc:	1a9d      	subs	r5, r3, r2
    face:	6a3b      	ldr	r3, [r7, #32]
    fad0:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    fad4:	f240 8756 	bls.w	10984 <__ssvfscanf_r+0x15f0>
    fad8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    fada:	f000 bc5c 	b.w	10396 <__ssvfscanf_r+0x1002>
    fade:	f1b8 0f00 	cmp.w	r8, #0
    fae2:	bf08      	it	eq
    fae4:	f04f 38ff 	moveq.w	r8, #4294967295
    fae8:	07e0      	lsls	r0, r4, #31
    faea:	f140 827b 	bpl.w	ffe4 <__ssvfscanf_r+0xc50>
    faee:	f014 0310 	ands.w	r3, r4, #16
    faf2:	62bb      	str	r3, [r7, #40]	; 0x28
    faf4:	f040 83f3 	bne.w	102de <__ssvfscanf_r+0xf4a>
    faf8:	0621      	lsls	r1, r4, #24
    fafa:	f140 85ed 	bpl.w	106d8 <__ssvfscanf_r+0x1344>
    fafe:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    fb00:	f856 3b04 	ldr.w	r3, [r6], #4
    fb04:	623b      	str	r3, [r7, #32]
    fb06:	2b00      	cmp	r3, #0
    fb08:	f43f ad39 	beq.w	f57e <__ssvfscanf_r+0x1ea>
    fb0c:	2080      	movs	r0, #128	; 0x80
    fb0e:	f7fa f845 	bl	9b9c <malloc>
    fb12:	4604      	mov	r4, r0
    fb14:	2800      	cmp	r0, #0
    fb16:	f000 86ee 	beq.w	108f6 <__ssvfscanf_r+0x1562>
    fb1a:	6a3b      	ldr	r3, [r7, #32]
    fb1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fb1e:	6018      	str	r0, [r3, #0]
    fb20:	88d5      	ldrh	r5, [r2, #6]
    fb22:	8893      	ldrh	r3, [r2, #4]
    fb24:	429d      	cmp	r5, r3
    fb26:	f080 84dd 	bcs.w	104e4 <__ssvfscanf_r+0x1150>
    fb2a:	6810      	ldr	r0, [r2, #0]
    fb2c:	6a3b      	ldr	r3, [r7, #32]
    fb2e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    fb32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fb34:	633e      	str	r6, [r7, #48]	; 0x30
    fb36:	3501      	adds	r5, #1
    fb38:	80dd      	strh	r5, [r3, #6]
    fb3a:	2320      	movs	r3, #32
    fb3c:	61fc      	str	r4, [r7, #28]
    fb3e:	61bb      	str	r3, [r7, #24]
    fb40:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    fb42:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    fb46:	2500      	movs	r5, #0
    fb48:	46c2      	mov	sl, r8
    fb4a:	46a0      	mov	r8, r4
    fb4c:	f7fc f828 	bl	bba0 <__locale_mb_cur_max>
    fb50:	42a8      	cmp	r0, r5
    fb52:	f43f ad0b 	beq.w	f56c <__ssvfscanf_r+0x1d8>
    fb56:	e9db 3200 	ldrd	r3, r2, [fp]
    fb5a:	f813 1b01 	ldrb.w	r1, [r3], #1
    fb5e:	3a01      	subs	r2, #1
    fb60:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    fb64:	e9cb 3200 	strd	r3, r2, [fp]
    fb68:	2e03      	cmp	r6, #3
    fb6a:	f105 0301 	add.w	r3, r5, #1
    fb6e:	5541      	strb	r1, [r0, r5]
    fb70:	64bb      	str	r3, [r7, #72]	; 0x48
    fb72:	f107 0460 	add.w	r4, r7, #96	; 0x60
    fb76:	d102      	bne.n	fb7e <__ssvfscanf_r+0x7ea>
    fb78:	6823      	ldr	r3, [r4, #0]
    fb7a:	2b04      	cmp	r3, #4
    fb7c:	d004      	beq.n	fb88 <__ssvfscanf_r+0x7f4>
    fb7e:	2208      	movs	r2, #8
    fb80:	2100      	movs	r1, #0
    fb82:	4620      	mov	r0, r4
    fb84:	f7fb ff42 	bl	ba0c <memset>
    fb88:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    fb8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fb8e:	9400      	str	r4, [sp, #0]
    fb90:	4641      	mov	r1, r8
    fb92:	4648      	mov	r0, r9
    fb94:	f002 fb94 	bl	122c0 <_mbrtowc_r>
    fb98:	1c42      	adds	r2, r0, #1
    fb9a:	4606      	mov	r6, r0
    fb9c:	f43f ace6 	beq.w	f56c <__ssvfscanf_r+0x1d8>
    fba0:	2800      	cmp	r0, #0
    fba2:	f040 82ca 	bne.w	1013a <__ssvfscanf_r+0xda6>
    fba6:	f8c8 0000 	str.w	r0, [r8]
    fbaa:	4605      	mov	r5, r0
    fbac:	f107 0368 	add.w	r3, r7, #104	; 0x68
    fbb0:	2208      	movs	r2, #8
    fbb2:	2100      	movs	r1, #0
    fbb4:	4618      	mov	r0, r3
    fbb6:	637b      	str	r3, [r7, #52]	; 0x34
    fbb8:	f7fb ff28 	bl	ba0c <memset>
    fbbc:	4950      	ldr	r1, [pc, #320]	; (fd00 <__ssvfscanf_r+0x96c>)
    fbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fbc0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    fbc4:	462a      	mov	r2, r5
    fbc6:	4648      	mov	r0, r9
    fbc8:	460d      	mov	r5, r1
    fbca:	f107 0150 	add.w	r1, r7, #80	; 0x50
    fbce:	47a8      	blx	r5
    fbd0:	2801      	cmp	r0, #1
    fbd2:	f000 83d5 	beq.w	10380 <__ssvfscanf_r+0xfec>
    fbd6:	2200      	movs	r2, #0
    fbd8:	f107 0370 	add.w	r3, r7, #112	; 0x70
    fbdc:	5c9b      	ldrb	r3, [r3, r2]
    fbde:	2b00      	cmp	r3, #0
    fbe0:	f000 85a1 	beq.w	10726 <__ssvfscanf_r+0x1392>
    fbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fbe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fbe8:	2e03      	cmp	r6, #3
    fbea:	4413      	add	r3, r2
    fbec:	63fb      	str	r3, [r7, #60]	; 0x3c
    fbee:	f000 83ca 	beq.w	10386 <__ssvfscanf_r+0xff2>
    fbf2:	f10a 3aff 	add.w	sl, sl, #4294967295
    fbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbf8:	b95b      	cbnz	r3, fc12 <__ssvfscanf_r+0x87e>
    fbfa:	6a3b      	ldr	r3, [r7, #32]
    fbfc:	f108 0804 	add.w	r8, r8, #4
    fc00:	b13b      	cbz	r3, fc12 <__ssvfscanf_r+0x87e>
    fc02:	69fb      	ldr	r3, [r7, #28]
    fc04:	eba8 0403 	sub.w	r4, r8, r3
    fc08:	69bb      	ldr	r3, [r7, #24]
    fc0a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    fc0e:	f240 8405 	bls.w	1041c <__ssvfscanf_r+0x1088>
    fc12:	f8db 3004 	ldr.w	r3, [fp, #4]
    fc16:	2b00      	cmp	r3, #0
    fc18:	f04f 0500 	mov.w	r5, #0
    fc1c:	f340 8296 	ble.w	1014c <__ssvfscanf_r+0xdb8>
    fc20:	f1ba 0f00 	cmp.w	sl, #0
    fc24:	d192      	bne.n	fb4c <__ssvfscanf_r+0x7b8>
    fc26:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    fc2a:	627e      	str	r6, [r7, #36]	; 0x24
    fc2c:	4644      	mov	r4, r8
    fc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc30:	2b00      	cmp	r3, #0
    fc32:	f47f abd6 	bne.w	f3e2 <__ssvfscanf_r+0x4e>
    fc36:	6023      	str	r3, [r4, #0]
    fc38:	6a3b      	ldr	r3, [r7, #32]
    fc3a:	2b00      	cmp	r3, #0
    fc3c:	f000 81c2 	beq.w	ffc4 <__ssvfscanf_r+0xc30>
    fc40:	69fb      	ldr	r3, [r7, #28]
    fc42:	69ba      	ldr	r2, [r7, #24]
    fc44:	1ae1      	subs	r1, r4, r3
    fc46:	108b      	asrs	r3, r1, #2
    fc48:	3301      	adds	r3, #1
    fc4a:	429a      	cmp	r2, r3
    fc4c:	f240 81ba 	bls.w	ffc4 <__ssvfscanf_r+0xc30>
    fc50:	6a3c      	ldr	r4, [r7, #32]
    fc52:	3104      	adds	r1, #4
    fc54:	6820      	ldr	r0, [r4, #0]
    fc56:	f7fa fa6d 	bl	a134 <realloc>
    fc5a:	2800      	cmp	r0, #0
    fc5c:	f000 81b2 	beq.w	ffc4 <__ssvfscanf_r+0xc30>
    fc60:	6020      	str	r0, [r4, #0]
    fc62:	e1af      	b.n	ffc4 <__ssvfscanf_r+0xc30>
    fc64:	0521      	lsls	r1, r4, #20
    fc66:	f57f adb3 	bpl.w	f7d0 <__ssvfscanf_r+0x43c>
    fc6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fc6c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fc6e:	185b      	adds	r3, r3, r1
    fc70:	f47f adae 	bne.w	f7d0 <__ssvfscanf_r+0x43c>
    fc74:	64bb      	str	r3, [r7, #72]	; 0x48
    fc76:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    fc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    fc7c:	e593      	b.n	f7a6 <__ssvfscanf_r+0x412>
    fc7e:	4b21      	ldr	r3, [pc, #132]	; (fd04 <__ssvfscanf_r+0x970>)
    fc80:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    fc84:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    fc88:	e66b      	b.n	f962 <__ssvfscanf_r+0x5ce>
    fc8a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    fc8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    fc92:	f47f ad9d 	bne.w	f7d0 <__ssvfscanf_r+0x43c>
    fc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fc98:	2b01      	cmp	r3, #1
    fc9a:	f47f ad99 	bne.w	f7d0 <__ssvfscanf_r+0x43c>
    fc9e:	2330      	movs	r3, #48	; 0x30
    fca0:	f805 3b01 	strb.w	r3, [r5], #1
    fca4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    fca8:	2300      	movs	r3, #0
    fcaa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    fcae:	3e01      	subs	r6, #1
    fcb0:	637b      	str	r3, [r7, #52]	; 0x34
    fcb2:	e578      	b.n	f7a6 <__ssvfscanf_r+0x412>
    fcb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fcb6:	2b06      	cmp	r3, #6
    fcb8:	f040 8574 	bne.w	107a4 <__ssvfscanf_r+0x1410>
    fcbc:	2307      	movs	r3, #7
    fcbe:	64bb      	str	r3, [r7, #72]	; 0x48
    fcc0:	e571      	b.n	f7a6 <__ssvfscanf_r+0x412>
    fcc2:	0523      	lsls	r3, r4, #20
    fcc4:	f57f ad84 	bpl.w	f7d0 <__ssvfscanf_r+0x43c>
    fcc8:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    fccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    fcd0:	d005      	beq.n	fcde <__ssvfscanf_r+0x94a>
    fcd2:	0561      	lsls	r1, r4, #21
    fcd4:	f57f ad7c 	bpl.w	f7d0 <__ssvfscanf_r+0x43c>
    fcd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fcda:	2b00      	cmp	r3, #0
    fcdc:	d047      	beq.n	fd6e <__ssvfscanf_r+0x9da>
    fcde:	05a3      	lsls	r3, r4, #22
    fce0:	d404      	bmi.n	fcec <__ssvfscanf_r+0x958>
    fce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fce4:	69f9      	ldr	r1, [r7, #28]
    fce6:	1a5b      	subs	r3, r3, r1
    fce8:	e9c7 5305 	strd	r5, r3, [r7, #20]
    fcec:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    fcf0:	2300      	movs	r3, #0
    fcf2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    fcf6:	637b      	str	r3, [r7, #52]	; 0x34
    fcf8:	e555      	b.n	f7a6 <__ssvfscanf_r+0x412>
    fcfa:	bf00      	nop
    fcfc:	20000a99 	.word	0x20000a99
    fd00:	200085e8 	.word	0x200085e8
    fd04:	200026bc 	.word	0x200026bc
    fd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fd0a:	2b00      	cmp	r3, #0
    fd0c:	f000 81ff 	beq.w	1010e <__ssvfscanf_r+0xd7a>
    fd10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fd12:	2b02      	cmp	r3, #2
    fd14:	f000 83b0 	beq.w	10478 <__ssvfscanf_r+0x10e4>
    fd18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fd1a:	2b01      	cmp	r3, #1
    fd1c:	f000 81f1 	beq.w	10102 <__ssvfscanf_r+0xd6e>
    fd20:	2b04      	cmp	r3, #4
    fd22:	f000 81ee 	beq.w	10102 <__ssvfscanf_r+0xd6e>
    fd26:	e553      	b.n	f7d0 <__ssvfscanf_r+0x43c>
    fd28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fd2a:	2b07      	cmp	r3, #7
    fd2c:	f040 853a 	bne.w	107a4 <__ssvfscanf_r+0x1410>
    fd30:	2308      	movs	r3, #8
    fd32:	64bb      	str	r3, [r7, #72]	; 0x48
    fd34:	e537      	b.n	f7a6 <__ssvfscanf_r+0x412>
    fd36:	0520      	lsls	r0, r4, #20
    fd38:	f100 81f9 	bmi.w	1012e <__ssvfscanf_r+0xd9a>
    fd3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fd3e:	2b01      	cmp	r3, #1
    fd40:	f47f ad46 	bne.w	f7d0 <__ssvfscanf_r+0x43c>
    fd44:	2302      	movs	r3, #2
    fd46:	63fb      	str	r3, [r7, #60]	; 0x3c
    fd48:	e52d      	b.n	f7a6 <__ssvfscanf_r+0x412>
    fd4a:	0623      	lsls	r3, r4, #24
    fd4c:	f57f ad40 	bpl.w	f7d0 <__ssvfscanf_r+0x43c>
    fd50:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fd54:	e527      	b.n	f7a6 <__ssvfscanf_r+0x412>
    fd56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fd58:	2b00      	cmp	r3, #0
    fd5a:	f040 81cc 	bne.w	100f6 <__ssvfscanf_r+0xd62>
    fd5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fd60:	b9b3      	cbnz	r3, fd90 <__ssvfscanf_r+0x9fc>
    fd62:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    fd66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    fd6a:	f000 8520 	beq.w	107ae <__ssvfscanf_r+0x141a>
    fd6e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    fd70:	ee18 9a10 	vmov	r9, s16
    fd74:	e533      	b.n	f7de <__ssvfscanf_r+0x44a>
    fd76:	0521      	lsls	r1, r4, #20
    fd78:	f100 81b7 	bmi.w	100ea <__ssvfscanf_r+0xd56>
    fd7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fd7e:	2b02      	cmp	r3, #2
    fd80:	f040 8510 	bne.w	107a4 <__ssvfscanf_r+0x1410>
    fd84:	2303      	movs	r3, #3
    fd86:	64bb      	str	r3, [r7, #72]	; 0x48
    fd88:	e50d      	b.n	f7a6 <__ssvfscanf_r+0x412>
    fd8a:	0520      	lsls	r0, r4, #20
    fd8c:	d59c      	bpl.n	fcc8 <__ssvfscanf_r+0x934>
    fd8e:	e76c      	b.n	fc6a <__ssvfscanf_r+0x8d6>
    fd90:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    fd92:	ee18 9a10 	vmov	r9, s16
    fd96:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    fd9a:	e520      	b.n	f7de <__ssvfscanf_r+0x44a>
    fd9c:	4b8d      	ldr	r3, [pc, #564]	; (ffd4 <__ssvfscanf_r+0xc40>)
    fd9e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    fda2:	2e08      	cmp	r6, #8
    fda4:	f73f addb 	bgt.w	f95e <__ssvfscanf_r+0x5ca>
    fda8:	e5e8      	b.n	f97c <__ssvfscanf_r+0x5e8>
    fdaa:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    fdae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    fdb2:	f47f ade3 	bne.w	f97c <__ssvfscanf_r+0x5e8>
    fdb6:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    fdba:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    fdbe:	2610      	movs	r6, #16
    fdc0:	e5cf      	b.n	f962 <__ssvfscanf_r+0x5ce>
    fdc2:	0623      	lsls	r3, r4, #24
    fdc4:	f57f adda 	bpl.w	f97c <__ssvfscanf_r+0x5e8>
    fdc8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fdcc:	e5c9      	b.n	f962 <__ssvfscanf_r+0x5ce>
    fdce:	f044 0401 	orr.w	r4, r4, #1
    fdd2:	f8db 3004 	ldr.w	r3, [fp, #4]
    fdd6:	64f9      	str	r1, [r7, #76]	; 0x4c
    fdd8:	2b00      	cmp	r3, #0
    fdda:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    fdde:	f04f 0500 	mov.w	r5, #0
    fde2:	f73f abf8 	bgt.w	f5d6 <__ssvfscanf_r+0x242>
    fde6:	4659      	mov	r1, fp
    fde8:	4648      	mov	r0, r9
    fdea:	f002 fc7d 	bl	126e8 <__ssrefill_r>
    fdee:	2800      	cmp	r0, #0
    fdf0:	f47f abbc 	bne.w	f56c <__ssvfscanf_r+0x1d8>
    fdf4:	0660      	lsls	r0, r4, #25
    fdf6:	f53f abf1 	bmi.w	f5dc <__ssvfscanf_r+0x248>
    fdfa:	f8db 2000 	ldr.w	r2, [fp]
    fdfe:	4e76      	ldr	r6, [pc, #472]	; (ffd8 <__ssvfscanf_r+0xc44>)
    fe00:	7813      	ldrb	r3, [r2, #0]
    fe02:	5cf3      	ldrb	r3, [r6, r3]
    fe04:	0719      	lsls	r1, r3, #28
    fe06:	f57f abe9 	bpl.w	f5dc <__ssvfscanf_r+0x248>
    fe0a:	f8db 3004 	ldr.w	r3, [fp, #4]
    fe0e:	3b01      	subs	r3, #1
    fe10:	2b00      	cmp	r3, #0
    fe12:	f10a 0a01 	add.w	sl, sl, #1
    fe16:	f8cb 3004 	str.w	r3, [fp, #4]
    fe1a:	f102 0201 	add.w	r2, r2, #1
    fe1e:	dd4a      	ble.n	feb6 <__ssvfscanf_r+0xb22>
    fe20:	f8cb 2000 	str.w	r2, [fp]
    fe24:	7813      	ldrb	r3, [r2, #0]
    fe26:	5cf3      	ldrb	r3, [r6, r3]
    fe28:	0719      	lsls	r1, r3, #28
    fe2a:	f57f abd7 	bpl.w	f5dc <__ssvfscanf_r+0x248>
    fe2e:	e7ec      	b.n	fe0a <__ssvfscanf_r+0xa76>
    fe30:	f044 0401 	orr.w	r4, r4, #1
    fe34:	4b69      	ldr	r3, [pc, #420]	; (ffdc <__ssvfscanf_r+0xc48>)
    fe36:	62fb      	str	r3, [r7, #44]	; 0x2c
    fe38:	2308      	movs	r3, #8
    fe3a:	64f9      	str	r1, [r7, #76]	; 0x4c
    fe3c:	63bb      	str	r3, [r7, #56]	; 0x38
    fe3e:	2503      	movs	r5, #3
    fe40:	f7ff bbc4 	b.w	f5cc <__ssvfscanf_r+0x238>
    fe44:	f044 0401 	orr.w	r4, r4, #1
    fe48:	4b65      	ldr	r3, [pc, #404]	; (ffe0 <__ssvfscanf_r+0xc4c>)
    fe4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    fe4c:	230a      	movs	r3, #10
    fe4e:	64f9      	str	r1, [r7, #76]	; 0x4c
    fe50:	63bb      	str	r3, [r7, #56]	; 0x38
    fe52:	2503      	movs	r5, #3
    fe54:	f7ff bbba 	b.w	f5cc <__ssvfscanf_r+0x238>
    fe58:	0523      	lsls	r3, r4, #20
    fe5a:	f57f ad82 	bpl.w	f962 <__ssvfscanf_r+0x5ce>
    fe5e:	b916      	cbnz	r6, fe66 <__ssvfscanf_r+0xad2>
    fe60:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    fe64:	2608      	movs	r6, #8
    fe66:	0563      	lsls	r3, r4, #21
    fe68:	f100 81a6 	bmi.w	101b8 <__ssvfscanf_r+0xe24>
    fe6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fe6e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    fe72:	b11b      	cbz	r3, fe7c <__ssvfscanf_r+0xae8>
    fe74:	3b01      	subs	r3, #1
    fe76:	63fb      	str	r3, [r7, #60]	; 0x3c
    fe78:	f108 0801 	add.w	r8, r8, #1
    fe7c:	684b      	ldr	r3, [r1, #4]
    fe7e:	3b01      	subs	r3, #1
    fe80:	2b00      	cmp	r3, #0
    fe82:	f10a 0a01 	add.w	sl, sl, #1
    fe86:	604b      	str	r3, [r1, #4]
    fe88:	f73f ad73 	bgt.w	f972 <__ssvfscanf_r+0x5de>
    fe8c:	4648      	mov	r0, r9
    fe8e:	64b9      	str	r1, [r7, #72]	; 0x48
    fe90:	f002 fc2a 	bl	126e8 <__ssrefill_r>
    fe94:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fe96:	2800      	cmp	r0, #0
    fe98:	f43f ad6d 	beq.w	f976 <__ssvfscanf_r+0x5e2>
    fe9c:	e56e      	b.n	f97c <__ssvfscanf_r+0x5e8>
    fe9e:	ee18 0a10 	vmov	r0, s16
    fea2:	4659      	mov	r1, fp
    fea4:	f002 fc20 	bl	126e8 <__ssrefill_r>
    fea8:	2800      	cmp	r0, #0
    feaa:	f47f ac91 	bne.w	f7d0 <__ssvfscanf_r+0x43c>
    feae:	2e00      	cmp	r6, #0
    feb0:	f47f abc4 	bne.w	f63c <__ssvfscanf_r+0x2a8>
    feb4:	e48c      	b.n	f7d0 <__ssvfscanf_r+0x43c>
    feb6:	4659      	mov	r1, fp
    feb8:	4648      	mov	r0, r9
    feba:	f002 fc15 	bl	126e8 <__ssrefill_r>
    febe:	2800      	cmp	r0, #0
    fec0:	f47f ab54 	bne.w	f56c <__ssvfscanf_r+0x1d8>
    fec4:	f8db 2000 	ldr.w	r2, [fp]
    fec8:	e79a      	b.n	fe00 <__ssvfscanf_r+0xa6c>
    feca:	f8db 2004 	ldr.w	r2, [fp, #4]
    fece:	e00f      	b.n	fef0 <__ssvfscanf_r+0xb5c>
    fed0:	f8db 3000 	ldr.w	r3, [fp]
    fed4:	781a      	ldrb	r2, [r3, #0]
    fed6:	5cb2      	ldrb	r2, [r6, r2]
    fed8:	0711      	lsls	r1, r2, #28
    feda:	f103 0301 	add.w	r3, r3, #1
    fede:	f57f aa80 	bpl.w	f3e2 <__ssvfscanf_r+0x4e>
    fee2:	f8db 2004 	ldr.w	r2, [fp, #4]
    fee6:	3a01      	subs	r2, #1
    fee8:	e9cb 3200 	strd	r3, r2, [fp]
    feec:	f10a 0a01 	add.w	sl, sl, #1
    fef0:	2a00      	cmp	r2, #0
    fef2:	dced      	bgt.n	fed0 <__ssvfscanf_r+0xb3c>
    fef4:	4659      	mov	r1, fp
    fef6:	4648      	mov	r0, r9
    fef8:	f002 fbf6 	bl	126e8 <__ssrefill_r>
    fefc:	2800      	cmp	r0, #0
    fefe:	d0e7      	beq.n	fed0 <__ssvfscanf_r+0xb3c>
    ff00:	f7ff ba6f 	b.w	f3e2 <__ssvfscanf_r+0x4e>
    ff04:	06e1      	lsls	r1, r4, #27
    ff06:	f100 8349 	bmi.w	1059c <__ssvfscanf_r+0x1208>
    ff0a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    ff0e:	f000 83ab 	beq.w	10668 <__ssvfscanf_r+0x12d4>
    ff12:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    ff14:	f854 6b04 	ldr.w	r6, [r4], #4
    ff18:	64be      	str	r6, [r7, #72]	; 0x48
    ff1a:	2e00      	cmp	r6, #0
    ff1c:	f43f ab2f 	beq.w	f57e <__ssvfscanf_r+0x1ea>
    ff20:	2020      	movs	r0, #32
    ff22:	f7f9 fe3b 	bl	9b9c <malloc>
    ff26:	4605      	mov	r5, r0
    ff28:	2800      	cmp	r0, #0
    ff2a:	f000 8462 	beq.w	107f2 <__ssvfscanf_r+0x145e>
    ff2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ff30:	6030      	str	r0, [r6, #0]
    ff32:	8893      	ldrh	r3, [r2, #4]
    ff34:	88d6      	ldrh	r6, [r2, #6]
    ff36:	429e      	cmp	r6, r3
    ff38:	f080 82a8 	bcs.w	1048c <__ssvfscanf_r+0x10f8>
    ff3c:	6810      	ldr	r0, [r2, #0]
    ff3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ff40:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    ff44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff46:	633c      	str	r4, [r7, #48]	; 0x30
    ff48:	3601      	adds	r6, #1
    ff4a:	80de      	strh	r6, [r3, #6]
    ff4c:	2320      	movs	r3, #32
    ff4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    ff50:	f8db 2000 	ldr.w	r2, [fp]
    ff54:	4e20      	ldr	r6, [pc, #128]	; (ffd8 <__ssvfscanf_r+0xc44>)
    ff56:	7811      	ldrb	r1, [r2, #0]
    ff58:	5c71      	ldrb	r1, [r6, r1]
    ff5a:	0708      	lsls	r0, r1, #28
    ff5c:	f100 82ac 	bmi.w	104b8 <__ssvfscanf_r+0x1124>
    ff60:	4633      	mov	r3, r6
    ff62:	462c      	mov	r4, r5
    ff64:	4610      	mov	r0, r2
    ff66:	462e      	mov	r6, r5
    ff68:	f8db 1004 	ldr.w	r1, [fp, #4]
    ff6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ff6e:	3901      	subs	r1, #1
    ff70:	f8cb 1004 	str.w	r1, [fp, #4]
    ff74:	1c41      	adds	r1, r0, #1
    ff76:	f8cb 1000 	str.w	r1, [fp]
    ff7a:	4635      	mov	r5, r6
    ff7c:	7801      	ldrb	r1, [r0, #0]
    ff7e:	f805 1b01 	strb.w	r1, [r5], #1
    ff82:	b122      	cbz	r2, ff8e <__ssvfscanf_r+0xbfa>
    ff84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ff86:	1b2e      	subs	r6, r5, r4
    ff88:	4296      	cmp	r6, r2
    ff8a:	f080 837a 	bcs.w	10682 <__ssvfscanf_r+0x12ee>
    ff8e:	f1b8 0801 	subs.w	r8, r8, #1
    ff92:	d00b      	beq.n	ffac <__ssvfscanf_r+0xc18>
    ff94:	f8db 1004 	ldr.w	r1, [fp, #4]
    ff98:	2900      	cmp	r1, #0
    ff9a:	462e      	mov	r6, r5
    ff9c:	f340 83ae 	ble.w	106fc <__ssvfscanf_r+0x1368>
    ffa0:	f8db 0000 	ldr.w	r0, [fp]
    ffa4:	7801      	ldrb	r1, [r0, #0]
    ffa6:	5c59      	ldrb	r1, [r3, r1]
    ffa8:	0709      	lsls	r1, r1, #28
    ffaa:	d5dd      	bpl.n	ff68 <__ssvfscanf_r+0xbd4>
    ffac:	1b29      	subs	r1, r5, r4
    ffae:	448a      	add	sl, r1
    ffb0:	3101      	adds	r1, #1
    ffb2:	f04f 0300 	mov.w	r3, #0
    ffb6:	702b      	strb	r3, [r5, #0]
    ffb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ffba:	b11b      	cbz	r3, ffc4 <__ssvfscanf_r+0xc30>
    ffbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ffbe:	428b      	cmp	r3, r1
    ffc0:	f200 8394 	bhi.w	106ec <__ssvfscanf_r+0x1358>
    ffc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ffc6:	3301      	adds	r3, #1
    ffc8:	647b      	str	r3, [r7, #68]	; 0x44
    ffca:	f7ff ba0a 	b.w	f3e2 <__ssvfscanf_r+0x4e>
    ffce:	2300      	movs	r3, #0
    ffd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    ffd2:	e461      	b.n	f898 <__ssvfscanf_r+0x504>
    ffd4:	200026bc 	.word	0x200026bc
    ffd8:	20000a99 	.word	0x20000a99
    ffdc:	00011fad 	.word	0x00011fad
    ffe0:	0000b4e9 	.word	0x0000b4e9
    ffe4:	06e6      	lsls	r6, r4, #27
    ffe6:	f100 8181 	bmi.w	102ec <__ssvfscanf_r+0xf58>
    ffea:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    ffee:	f000 836d 	beq.w	106cc <__ssvfscanf_r+0x1338>
    fff2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    fff4:	f854 6b04 	ldr.w	r6, [r4], #4
    fff8:	64be      	str	r6, [r7, #72]	; 0x48
    fffa:	2e00      	cmp	r6, #0
    fffc:	f43f aabf 	beq.w	f57e <__ssvfscanf_r+0x1ea>
   10000:	2020      	movs	r0, #32
   10002:	f7f9 fdcb 	bl	9b9c <malloc>
   10006:	4605      	mov	r5, r0
   10008:	2800      	cmp	r0, #0
   1000a:	f000 83f2 	beq.w	107f2 <__ssvfscanf_r+0x145e>
   1000e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10010:	6030      	str	r0, [r6, #0]
   10012:	8893      	ldrh	r3, [r2, #4]
   10014:	88d6      	ldrh	r6, [r2, #6]
   10016:	429e      	cmp	r6, r3
   10018:	f080 827a 	bcs.w	10510 <__ssvfscanf_r+0x117c>
   1001c:	6810      	ldr	r0, [r2, #0]
   1001e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10020:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   10024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10026:	633c      	str	r4, [r7, #48]	; 0x30
   10028:	3601      	adds	r6, #1
   1002a:	80de      	strh	r6, [r3, #6]
   1002c:	2420      	movs	r4, #32
   1002e:	f8db 2000 	ldr.w	r2, [fp]
   10032:	f107 0370 	add.w	r3, r7, #112	; 0x70
   10036:	4619      	mov	r1, r3
   10038:	7813      	ldrb	r3, [r2, #0]
   1003a:	5ccb      	ldrb	r3, [r1, r3]
   1003c:	2b00      	cmp	r3, #0
   1003e:	f43f aa9e 	beq.w	f57e <__ssvfscanf_r+0x1ea>
   10042:	ee08 9a10 	vmov	s16, r9
   10046:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   1004a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   1004e:	462e      	mov	r6, r5
   10050:	46a2      	mov	sl, r4
   10052:	4610      	mov	r0, r2
   10054:	460c      	mov	r4, r1
   10056:	f8db 1004 	ldr.w	r1, [fp, #4]
   1005a:	1c43      	adds	r3, r0, #1
   1005c:	3901      	subs	r1, #1
   1005e:	e9cb 3100 	strd	r3, r1, [fp]
   10062:	4629      	mov	r1, r5
   10064:	7800      	ldrb	r0, [r0, #0]
   10066:	f801 0b01 	strb.w	r0, [r1], #1
   1006a:	f1b9 0f00 	cmp.w	r9, #0
   1006e:	d002      	beq.n	10076 <__ssvfscanf_r+0xce2>
   10070:	1b8d      	subs	r5, r1, r6
   10072:	4555      	cmp	r5, sl
   10074:	d27a      	bcs.n	1016c <__ssvfscanf_r+0xdd8>
   10076:	460d      	mov	r5, r1
   10078:	f1b8 0801 	subs.w	r8, r8, #1
   1007c:	d00a      	beq.n	10094 <__ssvfscanf_r+0xd00>
   1007e:	f8db 1004 	ldr.w	r1, [fp, #4]
   10082:	2900      	cmp	r1, #0
   10084:	f340 816a 	ble.w	1035c <__ssvfscanf_r+0xfc8>
   10088:	f8db 0000 	ldr.w	r0, [fp]
   1008c:	7801      	ldrb	r1, [r0, #0]
   1008e:	5c61      	ldrb	r1, [r4, r1]
   10090:	2900      	cmp	r1, #0
   10092:	d1e0      	bne.n	10056 <__ssvfscanf_r+0xcc2>
   10094:	4654      	mov	r4, sl
   10096:	ee18 9a10 	vmov	r9, s16
   1009a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1009e:	1bae      	subs	r6, r5, r6
   100a0:	f43f aa6d 	beq.w	f57e <__ssvfscanf_r+0x1ea>
   100a4:	f04f 0300 	mov.w	r3, #0
   100a8:	702b      	strb	r3, [r5, #0]
   100aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   100ac:	b11b      	cbz	r3, 100b6 <__ssvfscanf_r+0xd22>
   100ae:	1c71      	adds	r1, r6, #1
   100b0:	428c      	cmp	r4, r1
   100b2:	f200 832d 	bhi.w	10710 <__ssvfscanf_r+0x137c>
   100b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   100b8:	3301      	adds	r3, #1
   100ba:	44b2      	add	sl, r6
   100bc:	647b      	str	r3, [r7, #68]	; 0x44
   100be:	f7ff b990 	b.w	f3e2 <__ssvfscanf_r+0x4e>
   100c2:	2300      	movs	r3, #0
   100c4:	613b      	str	r3, [r7, #16]
   100c6:	f7ff baa9 	b.w	f61c <__ssvfscanf_r+0x288>
   100ca:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   100ce:	f47f aa56 	bne.w	f57e <__ssvfscanf_r+0x1ea>
   100d2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   100d6:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   100da:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   100de:	f7ff ba67 	b.w	f5b0 <__ssvfscanf_r+0x21c>
   100e2:	64f9      	str	r1, [r7, #76]	; 0x4c
   100e4:	2504      	movs	r5, #4
   100e6:	f7ff ba71 	b.w	f5cc <__ssvfscanf_r+0x238>
   100ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   100ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   100ee:	185b      	adds	r3, r3, r1
   100f0:	f47f ae44 	bne.w	fd7c <__ssvfscanf_r+0x9e8>
   100f4:	e5be      	b.n	fc74 <__ssvfscanf_r+0x8e0>
   100f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   100f8:	2b03      	cmp	r3, #3
   100fa:	d002      	beq.n	10102 <__ssvfscanf_r+0xd6e>
   100fc:	2b05      	cmp	r3, #5
   100fe:	f47f ab67 	bne.w	f7d0 <__ssvfscanf_r+0x43c>
   10102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10104:	3301      	adds	r3, #1
   10106:	b2db      	uxtb	r3, r3
   10108:	64bb      	str	r3, [r7, #72]	; 0x48
   1010a:	f7ff bb4c 	b.w	f7a6 <__ssvfscanf_r+0x412>
   1010e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10110:	2b00      	cmp	r3, #0
   10112:	f47f ae01 	bne.w	fd18 <__ssvfscanf_r+0x984>
   10116:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   1011a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1011e:	f47f adfb 	bne.w	fd18 <__ssvfscanf_r+0x984>
   10122:	2301      	movs	r3, #1
   10124:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   10128:	63fb      	str	r3, [r7, #60]	; 0x3c
   1012a:	f7ff bb3c 	b.w	f7a6 <__ssvfscanf_r+0x412>
   1012e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10130:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10132:	185b      	adds	r3, r3, r1
   10134:	f47f ae02 	bne.w	fd3c <__ssvfscanf_r+0x9a8>
   10138:	e59c      	b.n	fc74 <__ssvfscanf_r+0x8e0>
   1013a:	1c83      	adds	r3, r0, #2
   1013c:	f040 845b 	bne.w	109f6 <__ssvfscanf_r+0x1662>
   10140:	f8db 3004 	ldr.w	r3, [fp, #4]
   10144:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   10146:	2b00      	cmp	r3, #0
   10148:	f73f ad00 	bgt.w	fb4c <__ssvfscanf_r+0x7b8>
   1014c:	4659      	mov	r1, fp
   1014e:	4648      	mov	r0, r9
   10150:	f002 faca 	bl	126e8 <__ssrefill_r>
   10154:	2800      	cmp	r0, #0
   10156:	f43f ad63 	beq.w	fc20 <__ssvfscanf_r+0x88c>
   1015a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1015e:	627e      	str	r6, [r7, #36]	; 0x24
   10160:	4644      	mov	r4, r8
   10162:	2d00      	cmp	r5, #0
   10164:	f43f ad63 	beq.w	fc2e <__ssvfscanf_r+0x89a>
   10168:	f7ff ba00 	b.w	f56c <__ssvfscanf_r+0x1d8>
   1016c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   10170:	4630      	mov	r0, r6
   10172:	4651      	mov	r1, sl
   10174:	f7f9 ffde 	bl	a134 <realloc>
   10178:	4606      	mov	r6, r0
   1017a:	2800      	cmp	r0, #0
   1017c:	f000 8339 	beq.w	107f2 <__ssvfscanf_r+0x145e>
   10180:	4405      	add	r5, r0
   10182:	f8c9 0000 	str.w	r0, [r9]
   10186:	e777      	b.n	10078 <__ssvfscanf_r+0xce4>
   10188:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   1018c:	4bbc      	ldr	r3, [pc, #752]	; (10480 <__ssvfscanf_r+0x10ec>)
   1018e:	62fb      	str	r3, [r7, #44]	; 0x2c
   10190:	2310      	movs	r3, #16
   10192:	64f9      	str	r1, [r7, #76]	; 0x4c
   10194:	63bb      	str	r3, [r7, #56]	; 0x38
   10196:	2503      	movs	r5, #3
   10198:	f7ff ba18 	b.w	f5cc <__ssvfscanf_r+0x238>
   1019c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1019e:	3301      	adds	r3, #1
   101a0:	637b      	str	r3, [r7, #52]	; 0x34
   101a2:	693b      	ldr	r3, [r7, #16]
   101a4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   101a8:	2b00      	cmp	r3, #0
   101aa:	f43f aafe 	beq.w	f7aa <__ssvfscanf_r+0x416>
   101ae:	693b      	ldr	r3, [r7, #16]
   101b0:	3b01      	subs	r3, #1
   101b2:	613b      	str	r3, [r7, #16]
   101b4:	f7ff bafa 	b.w	f7ac <__ssvfscanf_r+0x418>
   101b8:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   101bc:	f7ff bbd1 	b.w	f962 <__ssvfscanf_r+0x5ce>
   101c0:	0722      	lsls	r2, r4, #28
   101c2:	f140 81c7 	bpl.w	10554 <__ssvfscanf_r+0x11c0>
   101c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   101c8:	f853 2b04 	ldr.w	r2, [r3], #4
   101cc:	633b      	str	r3, [r7, #48]	; 0x30
   101ce:	7010      	strb	r0, [r2, #0]
   101d0:	f7ff bbf3 	b.w	f9ba <__ssvfscanf_r+0x626>
   101d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   101d8:	465a      	mov	r2, fp
   101da:	4648      	mov	r0, r9
   101dc:	3d01      	subs	r5, #1
   101de:	f002 fa43 	bl	12668 <_sungetc_r>
   101e2:	f7ff bbd5 	b.w	f990 <__ssvfscanf_r+0x5fc>
   101e6:	69fb      	ldr	r3, [r7, #28]
   101e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   101ea:	4293      	cmp	r3, r2
   101ec:	f43f ab2d 	beq.w	f84a <__ssvfscanf_r+0x4b6>
   101f0:	1a9a      	subs	r2, r3, r2
   101f2:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   101f6:	429d      	cmp	r5, r3
   101f8:	bf28      	it	cs
   101fa:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   101fe:	49a1      	ldr	r1, [pc, #644]	; (10484 <__ssvfscanf_r+0x10f0>)
   10200:	4628      	mov	r0, r5
   10202:	f7fb fa5d 	bl	b6c0 <sprintf>
   10206:	f7ff bb20 	b.w	f84a <__ssvfscanf_r+0x4b6>
   1020a:	06e2      	lsls	r2, r4, #27
   1020c:	f100 8131 	bmi.w	10472 <__ssvfscanf_r+0x10de>
   10210:	0723      	lsls	r3, r4, #28
   10212:	f100 81ba 	bmi.w	1058a <__ssvfscanf_r+0x11f6>
   10216:	0766      	lsls	r6, r4, #29
   10218:	f140 82b4 	bpl.w	10784 <__ssvfscanf_r+0x13f0>
   1021c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1021e:	64f9      	str	r1, [r7, #76]	; 0x4c
   10220:	f853 2b04 	ldr.w	r2, [r3], #4
   10224:	633b      	str	r3, [r7, #48]	; 0x30
   10226:	f8a2 a000 	strh.w	sl, [r2]
   1022a:	f7ff b8da 	b.w	f3e2 <__ssvfscanf_r+0x4e>
   1022e:	0723      	lsls	r3, r4, #28
   10230:	f47f a9a5 	bne.w	f57e <__ssvfscanf_r+0x1ea>
   10234:	7842      	ldrb	r2, [r0, #1]
   10236:	2a68      	cmp	r2, #104	; 0x68
   10238:	f000 8186 	beq.w	10548 <__ssvfscanf_r+0x11b4>
   1023c:	f044 0404 	orr.w	r4, r4, #4
   10240:	4608      	mov	r0, r1
   10242:	f7ff b92f 	b.w	f4a4 <__ssvfscanf_r+0x110>
   10246:	4b8e      	ldr	r3, [pc, #568]	; (10480 <__ssvfscanf_r+0x10ec>)
   10248:	62fb      	str	r3, [r7, #44]	; 0x2c
   1024a:	230a      	movs	r3, #10
   1024c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1024e:	63bb      	str	r3, [r7, #56]	; 0x38
   10250:	2503      	movs	r5, #3
   10252:	f7ff b9bb 	b.w	f5cc <__ssvfscanf_r+0x238>
   10256:	4b8c      	ldr	r3, [pc, #560]	; (10488 <__ssvfscanf_r+0x10f4>)
   10258:	62fb      	str	r3, [r7, #44]	; 0x2c
   1025a:	2300      	movs	r3, #0
   1025c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1025e:	63bb      	str	r3, [r7, #56]	; 0x38
   10260:	2503      	movs	r5, #3
   10262:	f7ff b9b3 	b.w	f5cc <__ssvfscanf_r+0x238>
   10266:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   1026a:	e78f      	b.n	1018c <__ssvfscanf_r+0xdf8>
   1026c:	f107 0070 	add.w	r0, r7, #112	; 0x70
   10270:	f000 fdde 	bl	10e30 <__sccl>
   10274:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   10278:	64f8      	str	r0, [r7, #76]	; 0x4c
   1027a:	2501      	movs	r5, #1
   1027c:	f7ff b9a6 	b.w	f5cc <__ssvfscanf_r+0x238>
   10280:	0722      	lsls	r2, r4, #28
   10282:	f47f a97c 	bne.w	f57e <__ssvfscanf_r+0x1ea>
   10286:	7842      	ldrb	r2, [r0, #1]
   10288:	2a6c      	cmp	r2, #108	; 0x6c
   1028a:	f000 8157 	beq.w	1053c <__ssvfscanf_r+0x11a8>
   1028e:	f044 0401 	orr.w	r4, r4, #1
   10292:	4608      	mov	r0, r1
   10294:	f7ff b906 	b.w	f4a4 <__ssvfscanf_r+0x110>
   10298:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   1029c:	f47f a96f 	bne.w	f57e <__ssvfscanf_r+0x1ea>
   102a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   102a2:	2a00      	cmp	r2, #0
   102a4:	f000 81e7 	beq.w	10676 <__ssvfscanf_r+0x12e2>
   102a8:	7842      	ldrb	r2, [r0, #1]
   102aa:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   102ae:	4608      	mov	r0, r1
   102b0:	f7ff b8f8 	b.w	f4a4 <__ssvfscanf_r+0x110>
   102b4:	ea58 0804 	orrs.w	r8, r8, r4
   102b8:	f47f a961 	bne.w	f57e <__ssvfscanf_r+0x1ea>
   102bc:	7842      	ldrb	r2, [r0, #1]
   102be:	2410      	movs	r4, #16
   102c0:	4608      	mov	r0, r1
   102c2:	f7ff b8ef 	b.w	f4a4 <__ssvfscanf_r+0x110>
   102c6:	64f9      	str	r1, [r7, #76]	; 0x4c
   102c8:	f7ff b8a7 	b.w	f41a <__ssvfscanf_r+0x86>
   102cc:	2300      	movs	r3, #0
   102ce:	623b      	str	r3, [r7, #32]
   102d0:	62bb      	str	r3, [r7, #40]	; 0x28
   102d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   102d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
   102d8:	64bb      	str	r3, [r7, #72]	; 0x48
   102da:	f7ff bba9 	b.w	fa30 <__ssvfscanf_r+0x69c>
   102de:	2300      	movs	r3, #0
   102e0:	e9c7 3306 	strd	r3, r3, [r7, #24]
   102e4:	623b      	str	r3, [r7, #32]
   102e6:	f107 0454 	add.w	r4, r7, #84	; 0x54
   102ea:	e429      	b.n	fb40 <__ssvfscanf_r+0x7ac>
   102ec:	f8db 3000 	ldr.w	r3, [fp]
   102f0:	f107 0270 	add.w	r2, r7, #112	; 0x70
   102f4:	4611      	mov	r1, r2
   102f6:	781a      	ldrb	r2, [r3, #0]
   102f8:	5c8a      	ldrb	r2, [r1, r2]
   102fa:	2a00      	cmp	r2, #0
   102fc:	f43f a93f 	beq.w	f57e <__ssvfscanf_r+0x1ea>
   10300:	3301      	adds	r3, #1
   10302:	f8cb 3000 	str.w	r3, [fp]
   10306:	f8db 3004 	ldr.w	r3, [fp, #4]
   1030a:	f1b8 0f01 	cmp.w	r8, #1
   1030e:	f103 33ff 	add.w	r3, r3, #4294967295
   10312:	f8cb 3004 	str.w	r3, [fp, #4]
   10316:	bf18      	it	ne
   10318:	460c      	movne	r4, r1
   1031a:	d114      	bne.n	10346 <__ssvfscanf_r+0xfb2>
   1031c:	f7ff bb53 	b.w	f9c6 <__ssvfscanf_r+0x632>
   10320:	f8db 3000 	ldr.w	r3, [fp]
   10324:	781a      	ldrb	r2, [r3, #0]
   10326:	5ca2      	ldrb	r2, [r4, r2]
   10328:	3301      	adds	r3, #1
   1032a:	2a00      	cmp	r2, #0
   1032c:	f43f ab4b 	beq.w	f9c6 <__ssvfscanf_r+0x632>
   10330:	f8cb 3000 	str.w	r3, [fp]
   10334:	f8db 3004 	ldr.w	r3, [fp, #4]
   10338:	3501      	adds	r5, #1
   1033a:	3b01      	subs	r3, #1
   1033c:	4545      	cmp	r5, r8
   1033e:	f8cb 3004 	str.w	r3, [fp, #4]
   10342:	f43f ab40 	beq.w	f9c6 <__ssvfscanf_r+0x632>
   10346:	2b00      	cmp	r3, #0
   10348:	dcea      	bgt.n	10320 <__ssvfscanf_r+0xf8c>
   1034a:	4659      	mov	r1, fp
   1034c:	4648      	mov	r0, r9
   1034e:	f002 f9cb 	bl	126e8 <__ssrefill_r>
   10352:	2800      	cmp	r0, #0
   10354:	d0e4      	beq.n	10320 <__ssvfscanf_r+0xf8c>
   10356:	44aa      	add	sl, r5
   10358:	f7ff b843 	b.w	f3e2 <__ssvfscanf_r+0x4e>
   1035c:	ee18 0a10 	vmov	r0, s16
   10360:	4659      	mov	r1, fp
   10362:	f002 f9c1 	bl	126e8 <__ssrefill_r>
   10366:	2800      	cmp	r0, #0
   10368:	f43f ae8e 	beq.w	10088 <__ssvfscanf_r+0xcf4>
   1036c:	42b5      	cmp	r5, r6
   1036e:	4654      	mov	r4, sl
   10370:	ee18 9a10 	vmov	r9, s16
   10374:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   10378:	f47f ae91 	bne.w	1009e <__ssvfscanf_r+0xd0a>
   1037c:	f7ff b8f6 	b.w	f56c <__ssvfscanf_r+0x1d8>
   10380:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   10384:	e428      	b.n	fbd8 <__ssvfscanf_r+0x844>
   10386:	6823      	ldr	r3, [r4, #0]
   10388:	2b04      	cmp	r3, #4
   1038a:	f47f ac32 	bne.w	fbf2 <__ssvfscanf_r+0x85e>
   1038e:	e432      	b.n	fbf6 <__ssvfscanf_r+0x862>
   10390:	1c83      	adds	r3, r0, #2
   10392:	f040 8339 	bne.w	10a08 <__ssvfscanf_r+0x1674>
   10396:	f8db 3004 	ldr.w	r3, [fp, #4]
   1039a:	2b00      	cmp	r3, #0
   1039c:	f340 81d7 	ble.w	1074e <__ssvfscanf_r+0x13ba>
   103a0:	f8db 3000 	ldr.w	r3, [fp]
   103a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   103a6:	781b      	ldrb	r3, [r3, #0]
   103a8:	5cd3      	ldrb	r3, [r2, r3]
   103aa:	0718      	lsls	r0, r3, #28
   103ac:	d403      	bmi.n	103b6 <__ssvfscanf_r+0x1022>
   103ae:	f1b8 0f00 	cmp.w	r8, #0
   103b2:	f47f ab49 	bne.w	fa48 <__ssvfscanf_r+0x6b4>
   103b6:	627c      	str	r4, [r7, #36]	; 0x24
   103b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   103ba:	2b00      	cmp	r3, #0
   103bc:	f47f a811 	bne.w	f3e2 <__ssvfscanf_r+0x4e>
   103c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
   103c2:	6013      	str	r3, [r2, #0]
   103c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   103c6:	2b00      	cmp	r3, #0
   103c8:	f43f adfc 	beq.w	ffc4 <__ssvfscanf_r+0xc30>
   103cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   103ce:	1ad1      	subs	r1, r2, r3
   103d0:	108b      	asrs	r3, r1, #2
   103d2:	6a3a      	ldr	r2, [r7, #32]
   103d4:	3301      	adds	r3, #1
   103d6:	429a      	cmp	r2, r3
   103d8:	f67f adf4 	bls.w	ffc4 <__ssvfscanf_r+0xc30>
   103dc:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   103de:	3104      	adds	r1, #4
   103e0:	6820      	ldr	r0, [r4, #0]
   103e2:	f7f9 fea7 	bl	a134 <realloc>
   103e6:	2800      	cmp	r0, #0
   103e8:	f47f ac3a 	bne.w	fc60 <__ssvfscanf_r+0x8cc>
   103ec:	e5ea      	b.n	ffc4 <__ssvfscanf_r+0xc30>
   103ee:	f853 2b04 	ldr.w	r2, [r3], #4
   103f2:	ed82 0b00 	vstr	d0, [r2]
   103f6:	633b      	str	r3, [r7, #48]	; 0x30
   103f8:	e5e4      	b.n	ffc4 <__ssvfscanf_r+0xc30>
   103fa:	68fd      	ldr	r5, [r7, #12]
   103fc:	6a39      	ldr	r1, [r7, #32]
   103fe:	687e      	ldr	r6, [r7, #4]
   10400:	4628      	mov	r0, r5
   10402:	4642      	mov	r2, r8
   10404:	46a3      	mov	fp, r4
   10406:	68bc      	ldr	r4, [r7, #8]
   10408:	f000 fd56 	bl	10eb8 <stpncpy>
   1040c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1040e:	61fb      	str	r3, [r7, #28]
   10410:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   10414:	3e01      	subs	r6, #1
   10416:	4605      	mov	r5, r0
   10418:	f7ff b9c8 	b.w	f7ac <__ssvfscanf_r+0x418>
   1041c:	69f8      	ldr	r0, [r7, #28]
   1041e:	00d9      	lsls	r1, r3, #3
   10420:	461d      	mov	r5, r3
   10422:	f7f9 fe87 	bl	a134 <realloc>
   10426:	61f8      	str	r0, [r7, #28]
   10428:	2800      	cmp	r0, #0
   1042a:	f000 8264 	beq.w	108f6 <__ssvfscanf_r+0x1562>
   1042e:	6a3a      	ldr	r2, [r7, #32]
   10430:	006b      	lsls	r3, r5, #1
   10432:	eb00 0804 	add.w	r8, r0, r4
   10436:	6010      	str	r0, [r2, #0]
   10438:	61bb      	str	r3, [r7, #24]
   1043a:	f7ff bbea 	b.w	fc12 <__ssvfscanf_r+0x87e>
   1043e:	2e02      	cmp	r6, #2
   10440:	f240 82c4 	bls.w	109cc <__ssvfscanf_r+0x1638>
   10444:	2e03      	cmp	r6, #3
   10446:	f43f a9d3 	beq.w	f7f0 <__ssvfscanf_r+0x45c>
   1044a:	3e04      	subs	r6, #4
   1044c:	fa5f f886 	uxtb.w	r8, r6
   10450:	ea6f 0308 	mvn.w	r3, r8
   10454:	18ee      	adds	r6, r5, r3
   10456:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1045a:	465a      	mov	r2, fp
   1045c:	4648      	mov	r0, r9
   1045e:	f002 f903 	bl	12668 <_sungetc_r>
   10462:	42ae      	cmp	r6, r5
   10464:	d1f7      	bne.n	10456 <__ssvfscanf_r+0x10c2>
   10466:	f10a 3aff 	add.w	sl, sl, #4294967295
   1046a:	ebaa 0a08 	sub.w	sl, sl, r8
   1046e:	f7ff b9bf 	b.w	f7f0 <__ssvfscanf_r+0x45c>
   10472:	64f9      	str	r1, [r7, #76]	; 0x4c
   10474:	f7fe bfb5 	b.w	f3e2 <__ssvfscanf_r+0x4e>
   10478:	2303      	movs	r3, #3
   1047a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1047c:	f7ff b993 	b.w	f7a6 <__ssvfscanf_r+0x412>
   10480:	00011fad 	.word	0x00011fad
   10484:	20000a90 	.word	0x20000a90
   10488:	0000b4e9 	.word	0x0000b4e9
   1048c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10490:	4293      	cmp	r3, r2
   10492:	f200 8297 	bhi.w	109c4 <__ssvfscanf_r+0x1630>
   10496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10498:	3308      	adds	r3, #8
   1049a:	b29b      	uxth	r3, r3
   1049c:	6810      	ldr	r0, [r2, #0]
   1049e:	63f8      	str	r0, [r7, #60]	; 0x3c
   104a0:	0099      	lsls	r1, r3, #2
   104a2:	637b      	str	r3, [r7, #52]	; 0x34
   104a4:	f7f9 fe46 	bl	a134 <realloc>
   104a8:	2800      	cmp	r0, #0
   104aa:	f000 827b 	beq.w	109a4 <__ssvfscanf_r+0x1610>
   104ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   104b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   104b2:	8093      	strh	r3, [r2, #4]
   104b4:	6010      	str	r0, [r2, #0]
   104b6:	e542      	b.n	ff3e <__ssvfscanf_r+0xbaa>
   104b8:	2101      	movs	r1, #1
   104ba:	e57a      	b.n	ffb2 <__ssvfscanf_r+0xc1e>
   104bc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   104c0:	4293      	cmp	r3, r2
   104c2:	f200 8293 	bhi.w	109ec <__ssvfscanf_r+0x1658>
   104c6:	3308      	adds	r3, #8
   104c8:	b29e      	uxth	r6, r3
   104ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   104cc:	00b1      	lsls	r1, r6, #2
   104ce:	6818      	ldr	r0, [r3, #0]
   104d0:	f7f9 fe30 	bl	a134 <realloc>
   104d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   104d6:	2800      	cmp	r0, #0
   104d8:	f000 823e 	beq.w	10958 <__ssvfscanf_r+0x15c4>
   104dc:	809e      	strh	r6, [r3, #4]
   104de:	6018      	str	r0, [r3, #0]
   104e0:	f7ff ba9b 	b.w	fa1a <__ssvfscanf_r+0x686>
   104e4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   104e8:	4293      	cmp	r3, r2
   104ea:	f200 827f 	bhi.w	109ec <__ssvfscanf_r+0x1658>
   104ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   104f0:	3308      	adds	r3, #8
   104f2:	b29b      	uxth	r3, r3
   104f4:	0099      	lsls	r1, r3, #2
   104f6:	6810      	ldr	r0, [r2, #0]
   104f8:	64bb      	str	r3, [r7, #72]	; 0x48
   104fa:	f7f9 fe1b 	bl	a134 <realloc>
   104fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10500:	2800      	cmp	r0, #0
   10502:	f000 8228 	beq.w	10956 <__ssvfscanf_r+0x15c2>
   10506:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10508:	8093      	strh	r3, [r2, #4]
   1050a:	6010      	str	r0, [r2, #0]
   1050c:	f7ff bb0e 	b.w	fb2c <__ssvfscanf_r+0x798>
   10510:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10514:	4293      	cmp	r3, r2
   10516:	f200 8255 	bhi.w	109c4 <__ssvfscanf_r+0x1630>
   1051a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1051c:	3308      	adds	r3, #8
   1051e:	b29b      	uxth	r3, r3
   10520:	6810      	ldr	r0, [r2, #0]
   10522:	63f8      	str	r0, [r7, #60]	; 0x3c
   10524:	0099      	lsls	r1, r3, #2
   10526:	637b      	str	r3, [r7, #52]	; 0x34
   10528:	f7f9 fe04 	bl	a134 <realloc>
   1052c:	2800      	cmp	r0, #0
   1052e:	f000 8239 	beq.w	109a4 <__ssvfscanf_r+0x1610>
   10532:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10536:	8093      	strh	r3, [r2, #4]
   10538:	6010      	str	r0, [r2, #0]
   1053a:	e570      	b.n	1001e <__ssvfscanf_r+0xc8a>
   1053c:	7882      	ldrb	r2, [r0, #2]
   1053e:	f044 0402 	orr.w	r4, r4, #2
   10542:	3002      	adds	r0, #2
   10544:	f7fe bfae 	b.w	f4a4 <__ssvfscanf_r+0x110>
   10548:	7882      	ldrb	r2, [r0, #2]
   1054a:	f044 0408 	orr.w	r4, r4, #8
   1054e:	3002      	adds	r0, #2
   10550:	f7fe bfa8 	b.w	f4a4 <__ssvfscanf_r+0x110>
   10554:	0763      	lsls	r3, r4, #29
   10556:	d458      	bmi.n	1060a <__ssvfscanf_r+0x1276>
   10558:	f014 0201 	ands.w	r2, r4, #1
   1055c:	f47f aa28 	bne.w	f9b0 <__ssvfscanf_r+0x61c>
   10560:	07a6      	lsls	r6, r4, #30
   10562:	f57f aa25 	bpl.w	f9b0 <__ssvfscanf_r+0x61c>
   10566:	4bb3      	ldr	r3, [pc, #716]	; (10834 <__ssvfscanf_r+0x14a0>)
   10568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1056a:	4299      	cmp	r1, r3
   1056c:	4648      	mov	r0, r9
   1056e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10572:	f000 823d 	beq.w	109f0 <__ssvfscanf_r+0x165c>
   10576:	f001 fdd1 	bl	1211c <_strtoll_r>
   1057a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1057c:	f853 2b04 	ldr.w	r2, [r3], #4
   10580:	633b      	str	r3, [r7, #48]	; 0x30
   10582:	e9c2 0100 	strd	r0, r1, [r2]
   10586:	f7ff ba18 	b.w	f9ba <__ssvfscanf_r+0x626>
   1058a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1058c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1058e:	f853 2b04 	ldr.w	r2, [r3], #4
   10592:	633b      	str	r3, [r7, #48]	; 0x30
   10594:	f882 a000 	strb.w	sl, [r2]
   10598:	f7fe bf23 	b.w	f3e2 <__ssvfscanf_r+0x4e>
   1059c:	f8db 3000 	ldr.w	r3, [fp]
   105a0:	4ea5      	ldr	r6, [pc, #660]	; (10838 <__ssvfscanf_r+0x14a4>)
   105a2:	781a      	ldrb	r2, [r3, #0]
   105a4:	5cb2      	ldrb	r2, [r6, r2]
   105a6:	0712      	lsls	r2, r2, #28
   105a8:	f53e af1b 	bmi.w	f3e2 <__ssvfscanf_r+0x4e>
   105ac:	3301      	adds	r3, #1
   105ae:	f8cb 3000 	str.w	r3, [fp]
   105b2:	f8db 3004 	ldr.w	r3, [fp, #4]
   105b6:	f1b8 0f01 	cmp.w	r8, #1
   105ba:	f103 33ff 	add.w	r3, r3, #4294967295
   105be:	f8cb 3004 	str.w	r3, [fp, #4]
   105c2:	bf08      	it	eq
   105c4:	f10a 0a01 	addeq.w	sl, sl, #1
   105c8:	f43e af0b 	beq.w	f3e2 <__ssvfscanf_r+0x4e>
   105cc:	2401      	movs	r4, #1
   105ce:	e011      	b.n	105f4 <__ssvfscanf_r+0x1260>
   105d0:	f8db 3000 	ldr.w	r3, [fp]
   105d4:	781a      	ldrb	r2, [r3, #0]
   105d6:	5cb2      	ldrb	r2, [r6, r2]
   105d8:	0715      	lsls	r5, r2, #28
   105da:	f103 0301 	add.w	r3, r3, #1
   105de:	d411      	bmi.n	10604 <__ssvfscanf_r+0x1270>
   105e0:	f8cb 3000 	str.w	r3, [fp]
   105e4:	f8db 3004 	ldr.w	r3, [fp, #4]
   105e8:	3401      	adds	r4, #1
   105ea:	3b01      	subs	r3, #1
   105ec:	4544      	cmp	r4, r8
   105ee:	f8cb 3004 	str.w	r3, [fp, #4]
   105f2:	d007      	beq.n	10604 <__ssvfscanf_r+0x1270>
   105f4:	2b00      	cmp	r3, #0
   105f6:	dceb      	bgt.n	105d0 <__ssvfscanf_r+0x123c>
   105f8:	4659      	mov	r1, fp
   105fa:	4648      	mov	r0, r9
   105fc:	f002 f874 	bl	126e8 <__ssrefill_r>
   10600:	2800      	cmp	r0, #0
   10602:	d0e5      	beq.n	105d0 <__ssvfscanf_r+0x123c>
   10604:	44a2      	add	sl, r4
   10606:	f7fe beec 	b.w	f3e2 <__ssvfscanf_r+0x4e>
   1060a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1060c:	f853 2b04 	ldr.w	r2, [r3], #4
   10610:	633b      	str	r3, [r7, #48]	; 0x30
   10612:	8010      	strh	r0, [r2, #0]
   10614:	f7ff b9d1 	b.w	f9ba <__ssvfscanf_r+0x626>
   10618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1061a:	2b00      	cmp	r3, #0
   1061c:	f000 816e 	beq.w	108fc <__ssvfscanf_r+0x1568>
   10620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10622:	f8d3 8000 	ldr.w	r8, [r3]
   10626:	88de      	ldrh	r6, [r3, #6]
   10628:	b176      	cbz	r6, 10648 <__ssvfscanf_r+0x12b4>
   1062a:	2400      	movs	r4, #0
   1062c:	f1a8 0504 	sub.w	r5, r8, #4
   10630:	46a1      	mov	r9, r4
   10632:	f855 3f04 	ldr.w	r3, [r5, #4]!
   10636:	6818      	ldr	r0, [r3, #0]
   10638:	f7f9 fab8 	bl	9bac <free>
   1063c:	3401      	adds	r4, #1
   1063e:	682b      	ldr	r3, [r5, #0]
   10640:	42a6      	cmp	r6, r4
   10642:	f8c3 9000 	str.w	r9, [r3]
   10646:	d1f4      	bne.n	10632 <__ssvfscanf_r+0x129e>
   10648:	f04f 33ff 	mov.w	r3, #4294967295
   1064c:	647b      	str	r3, [r7, #68]	; 0x44
   1064e:	f1b8 0f00 	cmp.w	r8, #0
   10652:	f47e af9c 	bne.w	f58e <__ssvfscanf_r+0x1fa>
   10656:	f7fe bf9d 	b.w	f594 <__ssvfscanf_r+0x200>
   1065a:	4878      	ldr	r0, [pc, #480]	; (1083c <__ssvfscanf_r+0x14a8>)
   1065c:	633b      	str	r3, [r7, #48]	; 0x30
   1065e:	f7fb fde7 	bl	c230 <nanf>
   10662:	ed84 0a00 	vstr	s0, [r4]
   10666:	e4ad      	b.n	ffc4 <__ssvfscanf_r+0xc30>
   10668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1066a:	63fc      	str	r4, [r7, #60]	; 0x3c
   1066c:	f852 5b04 	ldr.w	r5, [r2], #4
   10670:	633a      	str	r2, [r7, #48]	; 0x30
   10672:	64bc      	str	r4, [r7, #72]	; 0x48
   10674:	e46c      	b.n	ff50 <__ssvfscanf_r+0xbbc>
   10676:	b082      	sub	sp, #8
   10678:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1067c:	ab02      	add	r3, sp, #8
   1067e:	643b      	str	r3, [r7, #64]	; 0x40
   10680:	e612      	b.n	102a8 <__ssvfscanf_r+0xf14>
   10682:	637b      	str	r3, [r7, #52]	; 0x34
   10684:	0053      	lsls	r3, r2, #1
   10686:	4620      	mov	r0, r4
   10688:	4619      	mov	r1, r3
   1068a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1068c:	f7f9 fd52 	bl	a134 <realloc>
   10690:	4604      	mov	r4, r0
   10692:	2800      	cmp	r0, #0
   10694:	f000 80ad 	beq.w	107f2 <__ssvfscanf_r+0x145e>
   10698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1069a:	1985      	adds	r5, r0, r6
   1069c:	6018      	str	r0, [r3, #0]
   1069e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   106a0:	e475      	b.n	ff8e <__ssvfscanf_r+0xbfa>
   106a2:	697d      	ldr	r5, [r7, #20]
   106a4:	4629      	mov	r1, r5
   106a6:	230a      	movs	r3, #10
   106a8:	3101      	adds	r1, #1
   106aa:	4648      	mov	r0, r9
   106ac:	f7fa ff1c 	bl	b4e8 <_strtol_r>
   106b0:	69bb      	ldr	r3, [r7, #24]
   106b2:	1ac2      	subs	r2, r0, r3
   106b4:	e59d      	b.n	101f2 <__ssvfscanf_r+0xe5e>
   106b6:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   106ba:	f853 1b04 	ldr.w	r1, [r3], #4
   106be:	623a      	str	r2, [r7, #32]
   106c0:	64b9      	str	r1, [r7, #72]	; 0x48
   106c2:	633b      	str	r3, [r7, #48]	; 0x30
   106c4:	62ba      	str	r2, [r7, #40]	; 0x28
   106c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   106c8:	f7ff b9b2 	b.w	fa30 <__ssvfscanf_r+0x69c>
   106cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   106ce:	64bc      	str	r4, [r7, #72]	; 0x48
   106d0:	f853 5b04 	ldr.w	r5, [r3], #4
   106d4:	633b      	str	r3, [r7, #48]	; 0x30
   106d6:	e4aa      	b.n	1002e <__ssvfscanf_r+0xc9a>
   106d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   106da:	6aba      	ldr	r2, [r7, #40]	; 0x28
   106dc:	f853 4b04 	ldr.w	r4, [r3], #4
   106e0:	61ba      	str	r2, [r7, #24]
   106e2:	e9c7 2207 	strd	r2, r2, [r7, #28]
   106e6:	633b      	str	r3, [r7, #48]	; 0x30
   106e8:	f7ff ba2a 	b.w	fb40 <__ssvfscanf_r+0x7ac>
   106ec:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   106ee:	6820      	ldr	r0, [r4, #0]
   106f0:	f7f9 fd20 	bl	a134 <realloc>
   106f4:	2800      	cmp	r0, #0
   106f6:	f47f aab3 	bne.w	fc60 <__ssvfscanf_r+0x8cc>
   106fa:	e463      	b.n	ffc4 <__ssvfscanf_r+0xc30>
   106fc:	4659      	mov	r1, fp
   106fe:	4648      	mov	r0, r9
   10700:	637b      	str	r3, [r7, #52]	; 0x34
   10702:	f001 fff1 	bl	126e8 <__ssrefill_r>
   10706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10708:	2800      	cmp	r0, #0
   1070a:	f43f ac49 	beq.w	ffa0 <__ssvfscanf_r+0xc0c>
   1070e:	e44d      	b.n	ffac <__ssvfscanf_r+0xc18>
   10710:	6818      	ldr	r0, [r3, #0]
   10712:	461c      	mov	r4, r3
   10714:	f7f9 fd0e 	bl	a134 <realloc>
   10718:	2800      	cmp	r0, #0
   1071a:	f43f accc 	beq.w	100b6 <__ssvfscanf_r+0xd22>
   1071e:	6020      	str	r0, [r4, #0]
   10720:	e4c9      	b.n	100b6 <__ssvfscanf_r+0xd22>
   10722:	2500      	movs	r5, #0
   10724:	e637      	b.n	10396 <__ssvfscanf_r+0x1002>
   10726:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   10728:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1072c:	627e      	str	r6, [r7, #36]	; 0x24
   1072e:	4644      	mov	r4, r8
   10730:	2d00      	cmp	r5, #0
   10732:	f43f aa7c 	beq.w	fc2e <__ssvfscanf_r+0x89a>
   10736:	3d01      	subs	r5, #1
   10738:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1073c:	465a      	mov	r2, fp
   1073e:	5d59      	ldrb	r1, [r3, r5]
   10740:	4648      	mov	r0, r9
   10742:	f001 ff91 	bl	12668 <_sungetc_r>
   10746:	2d00      	cmp	r5, #0
   10748:	d1f5      	bne.n	10736 <__ssvfscanf_r+0x13a2>
   1074a:	f7ff ba70 	b.w	fc2e <__ssvfscanf_r+0x89a>
   1074e:	4659      	mov	r1, fp
   10750:	4648      	mov	r0, r9
   10752:	f001 ffc9 	bl	126e8 <__ssrefill_r>
   10756:	2800      	cmp	r0, #0
   10758:	f43f ae22 	beq.w	103a0 <__ssvfscanf_r+0x100c>
   1075c:	627c      	str	r4, [r7, #36]	; 0x24
   1075e:	2d00      	cmp	r5, #0
   10760:	f47e af04 	bne.w	f56c <__ssvfscanf_r+0x1d8>
   10764:	e628      	b.n	103b8 <__ssvfscanf_r+0x1024>
   10766:	627c      	str	r4, [r7, #36]	; 0x24
   10768:	2d00      	cmp	r5, #0
   1076a:	f43f ae25 	beq.w	103b8 <__ssvfscanf_r+0x1024>
   1076e:	3d01      	subs	r5, #1
   10770:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   10774:	465a      	mov	r2, fp
   10776:	5d59      	ldrb	r1, [r3, r5]
   10778:	4648      	mov	r0, r9
   1077a:	f001 ff75 	bl	12668 <_sungetc_r>
   1077e:	2d00      	cmp	r5, #0
   10780:	d1f5      	bne.n	1076e <__ssvfscanf_r+0x13da>
   10782:	e619      	b.n	103b8 <__ssvfscanf_r+0x1024>
   10784:	07e5      	lsls	r5, r4, #31
   10786:	d43c      	bmi.n	10802 <__ssvfscanf_r+0x146e>
   10788:	07a4      	lsls	r4, r4, #30
   1078a:	d53a      	bpl.n	10802 <__ssvfscanf_r+0x146e>
   1078c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1078e:	64f9      	str	r1, [r7, #76]	; 0x4c
   10790:	f853 2b04 	ldr.w	r2, [r3], #4
   10794:	633b      	str	r3, [r7, #48]	; 0x30
   10796:	ea4f 73ea 	mov.w	r3, sl, asr #31
   1079a:	f8c2 a000 	str.w	sl, [r2]
   1079e:	6053      	str	r3, [r2, #4]
   107a0:	f7fe be1f 	b.w	f3e2 <__ssvfscanf_r+0x4e>
   107a4:	ee18 9a10 	vmov	r9, s16
   107a8:	461e      	mov	r6, r3
   107aa:	f7ff b814 	b.w	f7d6 <__ssvfscanf_r+0x442>
   107ae:	2301      	movs	r3, #1
   107b0:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   107b4:	64bb      	str	r3, [r7, #72]	; 0x48
   107b6:	f7fe bff6 	b.w	f7a6 <__ssvfscanf_r+0x412>
   107ba:	f1b8 0f01 	cmp.w	r8, #1
   107be:	bf38      	it	cc
   107c0:	f04f 0801 	movcc.w	r8, #1
   107c4:	f014 0301 	ands.w	r3, r4, #1
   107c8:	d13a      	bne.n	10840 <__ssvfscanf_r+0x14ac>
   107ca:	06e5      	lsls	r5, r4, #27
   107cc:	f100 8136 	bmi.w	10a3c <__ssvfscanf_r+0x16a8>
   107d0:	0624      	lsls	r4, r4, #24
   107d2:	f140 814c 	bpl.w	10a6e <__ssvfscanf_r+0x16da>
   107d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   107d8:	f853 5b04 	ldr.w	r5, [r3], #4
   107dc:	64bb      	str	r3, [r7, #72]	; 0x48
   107de:	2d00      	cmp	r5, #0
   107e0:	f43e aecd 	beq.w	f57e <__ssvfscanf_r+0x1ea>
   107e4:	4640      	mov	r0, r8
   107e6:	f7f9 f9d9 	bl	9b9c <malloc>
   107ea:	4603      	mov	r3, r0
   107ec:	2800      	cmp	r0, #0
   107ee:	f040 80dc 	bne.w	109aa <__ssvfscanf_r+0x1616>
   107f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   107f4:	2b00      	cmp	r3, #0
   107f6:	f000 8081 	beq.w	108fc <__ssvfscanf_r+0x1568>
   107fa:	f8d3 8000 	ldr.w	r8, [r3]
   107fe:	88de      	ldrh	r6, [r3, #6]
   10800:	e712      	b.n	10628 <__ssvfscanf_r+0x1294>
   10802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10804:	64f9      	str	r1, [r7, #76]	; 0x4c
   10806:	f853 2b04 	ldr.w	r2, [r3], #4
   1080a:	f8c2 a000 	str.w	sl, [r2]
   1080e:	633b      	str	r3, [r7, #48]	; 0x30
   10810:	f7fe bde7 	b.w	f3e2 <__ssvfscanf_r+0x4e>
   10814:	462b      	mov	r3, r5
   10816:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10818:	42ab      	cmp	r3, r5
   1081a:	f67e aeb0 	bls.w	f57e <__ssvfscanf_r+0x1ea>
   1081e:	461c      	mov	r4, r3
   10820:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   10824:	465a      	mov	r2, fp
   10826:	4648      	mov	r0, r9
   10828:	f001 ff1e 	bl	12668 <_sungetc_r>
   1082c:	42ac      	cmp	r4, r5
   1082e:	d1f7      	bne.n	10820 <__ssvfscanf_r+0x148c>
   10830:	f7fe bea5 	b.w	f57e <__ssvfscanf_r+0x1ea>
   10834:	00011fad 	.word	0x00011fad
   10838:	20000a99 	.word	0x20000a99
   1083c:	20008014 	.word	0x20008014
   10840:	f014 0310 	ands.w	r3, r4, #16
   10844:	637b      	str	r3, [r7, #52]	; 0x34
   10846:	d05e      	beq.n	10906 <__ssvfscanf_r+0x1572>
   10848:	2500      	movs	r5, #0
   1084a:	63fd      	str	r5, [r7, #60]	; 0x3c
   1084c:	64bd      	str	r5, [r7, #72]	; 0x48
   1084e:	462e      	mov	r6, r5
   10850:	2400      	movs	r4, #0
   10852:	464b      	mov	r3, r9
   10854:	46c1      	mov	r9, r8
   10856:	46a8      	mov	r8, r5
   10858:	4625      	mov	r5, r4
   1085a:	461c      	mov	r4, r3
   1085c:	f7fb f9a0 	bl	bba0 <__locale_mb_cur_max>
   10860:	42a8      	cmp	r0, r5
   10862:	f43e ae83 	beq.w	f56c <__ssvfscanf_r+0x1d8>
   10866:	e9db 3200 	ldrd	r3, r2, [fp]
   1086a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1086e:	3a01      	subs	r2, #1
   10870:	e9cb 3200 	strd	r3, r2, [fp]
   10874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10876:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   1087a:	2a03      	cmp	r2, #3
   1087c:	5541      	strb	r1, [r0, r5]
   1087e:	f105 0301 	add.w	r3, r5, #1
   10882:	f107 0568 	add.w	r5, r7, #104	; 0x68
   10886:	d102      	bne.n	1088e <__ssvfscanf_r+0x14fa>
   10888:	682a      	ldr	r2, [r5, #0]
   1088a:	2a04      	cmp	r2, #4
   1088c:	d006      	beq.n	1089c <__ssvfscanf_r+0x1508>
   1088e:	2208      	movs	r2, #8
   10890:	2100      	movs	r1, #0
   10892:	4628      	mov	r0, r5
   10894:	62bb      	str	r3, [r7, #40]	; 0x28
   10896:	f7fb f8b9 	bl	ba0c <memset>
   1089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1089c:	9500      	str	r5, [sp, #0]
   1089e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   108a2:	4631      	mov	r1, r6
   108a4:	4620      	mov	r0, r4
   108a6:	62bb      	str	r3, [r7, #40]	; 0x28
   108a8:	f001 fd0a 	bl	122c0 <_mbrtowc_r>
   108ac:	1c43      	adds	r3, r0, #1
   108ae:	6278      	str	r0, [r7, #36]	; 0x24
   108b0:	f43e ae5c 	beq.w	f56c <__ssvfscanf_r+0x1d8>
   108b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   108b6:	2800      	cmp	r0, #0
   108b8:	f040 8147 	bne.w	10b4a <__ssvfscanf_r+0x17b6>
   108bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   108be:	b902      	cbnz	r2, 108c2 <__ssvfscanf_r+0x152e>
   108c0:	6032      	str	r2, [r6, #0]
   108c2:	449a      	add	sl, r3
   108c4:	f109 39ff 	add.w	r9, r9, #4294967295
   108c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   108ca:	2b00      	cmp	r3, #0
   108cc:	f040 8175 	bne.w	10bba <__ssvfscanf_r+0x1826>
   108d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   108d2:	2b00      	cmp	r3, #0
   108d4:	f000 8170 	beq.w	10bb8 <__ssvfscanf_r+0x1824>
   108d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   108da:	1af5      	subs	r5, r6, r3
   108dc:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   108e0:	f200 816a 	bhi.w	10bb8 <__ssvfscanf_r+0x1824>
   108e4:	4618      	mov	r0, r3
   108e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   108ea:	f7f9 fc23 	bl	a134 <realloc>
   108ee:	63f8      	str	r0, [r7, #60]	; 0x3c
   108f0:	2800      	cmp	r0, #0
   108f2:	f040 815c 	bne.w	10bae <__ssvfscanf_r+0x181a>
   108f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   108f8:	2b00      	cmp	r3, #0
   108fa:	d12d      	bne.n	10958 <__ssvfscanf_r+0x15c4>
   108fc:	f04f 33ff 	mov.w	r3, #4294967295
   10900:	647b      	str	r3, [r7, #68]	; 0x44
   10902:	f7fe be47 	b.w	f594 <__ssvfscanf_r+0x200>
   10906:	0622      	lsls	r2, r4, #24
   10908:	f140 808f 	bpl.w	10a2a <__ssvfscanf_r+0x1696>
   1090c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1090e:	f854 3b04 	ldr.w	r3, [r4], #4
   10912:	64bb      	str	r3, [r7, #72]	; 0x48
   10914:	2b00      	cmp	r3, #0
   10916:	f43e ae32 	beq.w	f57e <__ssvfscanf_r+0x1ea>
   1091a:	2080      	movs	r0, #128	; 0x80
   1091c:	f7f9 f93e 	bl	9b9c <malloc>
   10920:	4606      	mov	r6, r0
   10922:	2800      	cmp	r0, #0
   10924:	d0e7      	beq.n	108f6 <__ssvfscanf_r+0x1562>
   10926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10928:	6018      	str	r0, [r3, #0]
   1092a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1092c:	88dd      	ldrh	r5, [r3, #6]
   1092e:	889a      	ldrh	r2, [r3, #4]
   10930:	4295      	cmp	r5, r2
   10932:	f0c0 80b3 	bcc.w	10a9c <__ssvfscanf_r+0x1708>
   10936:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1093a:	428a      	cmp	r2, r1
   1093c:	d856      	bhi.n	109ec <__ssvfscanf_r+0x1658>
   1093e:	3208      	adds	r2, #8
   10940:	b293      	uxth	r3, r2
   10942:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10944:	63fb      	str	r3, [r7, #60]	; 0x3c
   10946:	0099      	lsls	r1, r3, #2
   10948:	6810      	ldr	r0, [r2, #0]
   1094a:	f7f9 fbf3 	bl	a134 <realloc>
   1094e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10950:	2800      	cmp	r0, #0
   10952:	f040 80ae 	bne.w	10ab2 <__ssvfscanf_r+0x171e>
   10956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10958:	88db      	ldrh	r3, [r3, #6]
   1095a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1095c:	461e      	mov	r6, r3
   1095e:	f8d2 8000 	ldr.w	r8, [r2]
   10962:	e661      	b.n	10628 <__ssvfscanf_r+0x1294>
   10964:	462b      	mov	r3, r5
   10966:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10968:	42ab      	cmp	r3, r5
   1096a:	f67e ae08 	bls.w	f57e <__ssvfscanf_r+0x1ea>
   1096e:	461c      	mov	r4, r3
   10970:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   10974:	465a      	mov	r2, fp
   10976:	4648      	mov	r0, r9
   10978:	f001 fe76 	bl	12668 <_sungetc_r>
   1097c:	42ac      	cmp	r4, r5
   1097e:	d1f7      	bne.n	10970 <__ssvfscanf_r+0x15dc>
   10980:	f7fe bdfd 	b.w	f57e <__ssvfscanf_r+0x1ea>
   10984:	4610      	mov	r0, r2
   10986:	00d9      	lsls	r1, r3, #3
   10988:	461e      	mov	r6, r3
   1098a:	f7f9 fbd3 	bl	a134 <realloc>
   1098e:	62b8      	str	r0, [r7, #40]	; 0x28
   10990:	2800      	cmp	r0, #0
   10992:	d0b0      	beq.n	108f6 <__ssvfscanf_r+0x1562>
   10994:	1942      	adds	r2, r0, r5
   10996:	64ba      	str	r2, [r7, #72]	; 0x48
   10998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1099a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1099c:	6010      	str	r0, [r2, #0]
   1099e:	0073      	lsls	r3, r6, #1
   109a0:	623b      	str	r3, [r7, #32]
   109a2:	e4f8      	b.n	10396 <__ssvfscanf_r+0x1002>
   109a4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   109a8:	e63e      	b.n	10628 <__ssvfscanf_r+0x1294>
   109aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
   109ac:	6028      	str	r0, [r5, #0]
   109ae:	88ce      	ldrh	r6, [r1, #6]
   109b0:	888a      	ldrh	r2, [r1, #4]
   109b2:	4296      	cmp	r6, r2
   109b4:	f0c0 808e 	bcc.w	10ad4 <__ssvfscanf_r+0x1740>
   109b8:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   109bc:	428a      	cmp	r2, r1
   109be:	6338      	str	r0, [r7, #48]	; 0x30
   109c0:	f240 80a5 	bls.w	10b0e <__ssvfscanf_r+0x177a>
   109c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   109c6:	f8d3 8000 	ldr.w	r8, [r3]
   109ca:	e62d      	b.n	10628 <__ssvfscanf_r+0x1294>
   109cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   109ce:	4295      	cmp	r5, r2
   109d0:	f67e add5 	bls.w	f57e <__ssvfscanf_r+0x1ea>
   109d4:	462c      	mov	r4, r5
   109d6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   109d8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   109dc:	465a      	mov	r2, fp
   109de:	4648      	mov	r0, r9
   109e0:	f001 fe42 	bl	12668 <_sungetc_r>
   109e4:	42ac      	cmp	r4, r5
   109e6:	d1f7      	bne.n	109d8 <__ssvfscanf_r+0x1644>
   109e8:	f7fe bdc9 	b.w	f57e <__ssvfscanf_r+0x1ea>
   109ec:	462b      	mov	r3, r5
   109ee:	e7b4      	b.n	1095a <__ssvfscanf_r+0x15c6>
   109f0:	f001 fc64 	bl	122bc <_strtoull_r>
   109f4:	e5c1      	b.n	1057a <__ssvfscanf_r+0x11e6>
   109f6:	f8d8 3000 	ldr.w	r3, [r8]
   109fa:	461d      	mov	r5, r3
   109fc:	3301      	adds	r3, #1
   109fe:	f47f a8d5 	bne.w	fbac <__ssvfscanf_r+0x818>
   10a02:	462a      	mov	r2, r5
   10a04:	f7ff b8e8 	b.w	fbd8 <__ssvfscanf_r+0x844>
   10a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a0a:	6818      	ldr	r0, [r3, #0]
   10a0c:	f001 fcb4 	bl	12378 <iswspace>
   10a10:	2800      	cmp	r0, #0
   10a12:	f47f aea8 	bne.w	10766 <__ssvfscanf_r+0x13d2>
   10a16:	2c03      	cmp	r4, #3
   10a18:	44aa      	add	sl, r5
   10a1a:	f47f a849 	bne.w	fab0 <__ssvfscanf_r+0x71c>
   10a1e:	6833      	ldr	r3, [r6, #0]
   10a20:	2b04      	cmp	r3, #4
   10a22:	f47f a845 	bne.w	fab0 <__ssvfscanf_r+0x71c>
   10a26:	f7ff b845 	b.w	fab4 <__ssvfscanf_r+0x720>
   10a2a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   10a2e:	f853 6b04 	ldr.w	r6, [r3], #4
   10a32:	633b      	str	r3, [r7, #48]	; 0x30
   10a34:	4615      	mov	r5, r2
   10a36:	63fa      	str	r2, [r7, #60]	; 0x3c
   10a38:	64ba      	str	r2, [r7, #72]	; 0x48
   10a3a:	e709      	b.n	10850 <__ssvfscanf_r+0x14bc>
   10a3c:	461c      	mov	r4, r3
   10a3e:	f8db 3004 	ldr.w	r3, [fp, #4]
   10a42:	4598      	cmp	r8, r3
   10a44:	dd39      	ble.n	10aba <__ssvfscanf_r+0x1726>
   10a46:	f8db 2000 	ldr.w	r2, [fp]
   10a4a:	441a      	add	r2, r3
   10a4c:	f8cb 2000 	str.w	r2, [fp]
   10a50:	4659      	mov	r1, fp
   10a52:	4648      	mov	r0, r9
   10a54:	441c      	add	r4, r3
   10a56:	eba8 0803 	sub.w	r8, r8, r3
   10a5a:	f001 fe45 	bl	126e8 <__ssrefill_r>
   10a5e:	2800      	cmp	r0, #0
   10a60:	d0ed      	beq.n	10a3e <__ssvfscanf_r+0x16aa>
   10a62:	2c00      	cmp	r4, #0
   10a64:	f43e ad82 	beq.w	f56c <__ssvfscanf_r+0x1d8>
   10a68:	44a2      	add	sl, r4
   10a6a:	f7fe bcba 	b.w	f3e2 <__ssvfscanf_r+0x4e>
   10a6e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   10a70:	4643      	mov	r3, r8
   10a72:	6829      	ldr	r1, [r5, #0]
   10a74:	f8cd b000 	str.w	fp, [sp]
   10a78:	2201      	movs	r2, #1
   10a7a:	4648      	mov	r0, r9
   10a7c:	f001 fe52 	bl	12724 <_sfread_r>
   10a80:	4604      	mov	r4, r0
   10a82:	2800      	cmp	r0, #0
   10a84:	f43e ad72 	beq.w	f56c <__ssvfscanf_r+0x1d8>
   10a88:	3504      	adds	r5, #4
   10a8a:	64bd      	str	r5, [r7, #72]	; 0x48
   10a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10a8e:	3301      	adds	r3, #1
   10a90:	647b      	str	r3, [r7, #68]	; 0x44
   10a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a94:	633b      	str	r3, [r7, #48]	; 0x30
   10a96:	44a2      	add	sl, r4
   10a98:	f7fe bca3 	b.w	f3e2 <__ssvfscanf_r+0x4e>
   10a9c:	6818      	ldr	r0, [r3, #0]
   10a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10aa0:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   10aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10aa6:	633c      	str	r4, [r7, #48]	; 0x30
   10aa8:	3501      	adds	r5, #1
   10aaa:	80dd      	strh	r5, [r3, #6]
   10aac:	63fe      	str	r6, [r7, #60]	; 0x3c
   10aae:	2520      	movs	r5, #32
   10ab0:	e6ce      	b.n	10850 <__ssvfscanf_r+0x14bc>
   10ab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10ab4:	8093      	strh	r3, [r2, #4]
   10ab6:	6010      	str	r0, [r2, #0]
   10ab8:	e7f1      	b.n	10a9e <__ssvfscanf_r+0x170a>
   10aba:	eba3 0308 	sub.w	r3, r3, r8
   10abe:	f8cb 3004 	str.w	r3, [fp, #4]
   10ac2:	f8db 3000 	ldr.w	r3, [fp]
   10ac6:	4444      	add	r4, r8
   10ac8:	4443      	add	r3, r8
   10aca:	f8cb 3000 	str.w	r3, [fp]
   10ace:	44a2      	add	sl, r4
   10ad0:	f7fe bc87 	b.w	f3e2 <__ssvfscanf_r+0x4e>
   10ad4:	680a      	ldr	r2, [r1, #0]
   10ad6:	63fa      	str	r2, [r7, #60]	; 0x3c
   10ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10ada:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   10ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10ae0:	3601      	adds	r6, #1
   10ae2:	b2b6      	uxth	r6, r6
   10ae4:	80d6      	strh	r6, [r2, #6]
   10ae6:	4619      	mov	r1, r3
   10ae8:	f8cd b000 	str.w	fp, [sp]
   10aec:	4643      	mov	r3, r8
   10aee:	2201      	movs	r2, #1
   10af0:	4648      	mov	r0, r9
   10af2:	f001 fe17 	bl	12724 <_sfread_r>
   10af6:	4604      	mov	r4, r0
   10af8:	b1d8      	cbz	r0, 10b32 <__ssvfscanf_r+0x179e>
   10afa:	4580      	cmp	r8, r0
   10afc:	d9c6      	bls.n	10a8c <__ssvfscanf_r+0x16f8>
   10afe:	6828      	ldr	r0, [r5, #0]
   10b00:	4621      	mov	r1, r4
   10b02:	f7f9 fb17 	bl	a134 <realloc>
   10b06:	2800      	cmp	r0, #0
   10b08:	d0c0      	beq.n	10a8c <__ssvfscanf_r+0x16f8>
   10b0a:	6028      	str	r0, [r5, #0]
   10b0c:	e7be      	b.n	10a8c <__ssvfscanf_r+0x16f8>
   10b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10b10:	3208      	adds	r2, #8
   10b12:	b294      	uxth	r4, r2
   10b14:	681a      	ldr	r2, [r3, #0]
   10b16:	637a      	str	r2, [r7, #52]	; 0x34
   10b18:	4610      	mov	r0, r2
   10b1a:	00a1      	lsls	r1, r4, #2
   10b1c:	f7f9 fb0a 	bl	a134 <realloc>
   10b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10b22:	63f8      	str	r0, [r7, #60]	; 0x3c
   10b24:	2800      	cmp	r0, #0
   10b26:	d05b      	beq.n	10be0 <__ssvfscanf_r+0x184c>
   10b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10b2a:	809c      	strh	r4, [r3, #4]
   10b2c:	6018      	str	r0, [r3, #0]
   10b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10b30:	e7d2      	b.n	10ad8 <__ssvfscanf_r+0x1744>
   10b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10b34:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   10b38:	2b00      	cmp	r3, #0
   10b3a:	f43f ad75 	beq.w	10628 <__ssvfscanf_r+0x1294>
   10b3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10b42:	065b      	lsls	r3, r3, #25
   10b44:	f57e ad1d 	bpl.w	f582 <__ssvfscanf_r+0x1ee>
   10b48:	e56a      	b.n	10620 <__ssvfscanf_r+0x128c>
   10b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10b4c:	3202      	adds	r2, #2
   10b4e:	d11d      	bne.n	10b8c <__ssvfscanf_r+0x17f8>
   10b50:	f8db 2004 	ldr.w	r2, [fp, #4]
   10b54:	2a00      	cmp	r2, #0
   10b56:	461d      	mov	r5, r3
   10b58:	f73f ae80 	bgt.w	1085c <__ssvfscanf_r+0x14c8>
   10b5c:	4659      	mov	r1, fp
   10b5e:	4620      	mov	r0, r4
   10b60:	f001 fdc2 	bl	126e8 <__ssrefill_r>
   10b64:	b9e0      	cbnz	r0, 10ba0 <__ssvfscanf_r+0x180c>
   10b66:	f1b9 0f00 	cmp.w	r9, #0
   10b6a:	f47f ae77 	bne.w	1085c <__ssvfscanf_r+0x14c8>
   10b6e:	4645      	mov	r5, r8
   10b70:	46a1      	mov	r9, r4
   10b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10b74:	b123      	cbz	r3, 10b80 <__ssvfscanf_r+0x17ec>
   10b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b78:	1af1      	subs	r1, r6, r3
   10b7a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   10b7e:	d827      	bhi.n	10bd0 <__ssvfscanf_r+0x183c>
   10b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10b82:	2b00      	cmp	r3, #0
   10b84:	f47e ac2d 	bne.w	f3e2 <__ssvfscanf_r+0x4e>
   10b88:	f7ff ba1c 	b.w	ffc4 <__ssvfscanf_r+0xc30>
   10b8c:	449a      	add	sl, r3
   10b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10b90:	2b03      	cmp	r3, #3
   10b92:	f47f ae97 	bne.w	108c4 <__ssvfscanf_r+0x1530>
   10b96:	682b      	ldr	r3, [r5, #0]
   10b98:	2b04      	cmp	r3, #4
   10b9a:	f47f ae93 	bne.w	108c4 <__ssvfscanf_r+0x1530>
   10b9e:	e693      	b.n	108c8 <__ssvfscanf_r+0x1534>
   10ba0:	46a1      	mov	r9, r4
   10ba2:	462c      	mov	r4, r5
   10ba4:	4645      	mov	r5, r8
   10ba6:	2c00      	cmp	r4, #0
   10ba8:	d0e3      	beq.n	10b72 <__ssvfscanf_r+0x17de>
   10baa:	f7fe bcdf 	b.w	f56c <__ssvfscanf_r+0x1d8>
   10bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10bb0:	1946      	adds	r6, r0, r5
   10bb2:	6010      	str	r0, [r2, #0]
   10bb4:	ea4f 0848 	mov.w	r8, r8, lsl #1
   10bb8:	3604      	adds	r6, #4
   10bba:	f8db 3004 	ldr.w	r3, [fp, #4]
   10bbe:	2b00      	cmp	r3, #0
   10bc0:	f04f 0500 	mov.w	r5, #0
   10bc4:	ddca      	ble.n	10b5c <__ssvfscanf_r+0x17c8>
   10bc6:	f1b9 0f00 	cmp.w	r9, #0
   10bca:	f47f ae47 	bne.w	1085c <__ssvfscanf_r+0x14c8>
   10bce:	e7ce      	b.n	10b6e <__ssvfscanf_r+0x17da>
   10bd0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   10bd2:	6820      	ldr	r0, [r4, #0]
   10bd4:	f7f9 faae 	bl	a134 <realloc>
   10bd8:	2800      	cmp	r0, #0
   10bda:	d0d1      	beq.n	10b80 <__ssvfscanf_r+0x17ec>
   10bdc:	6020      	str	r0, [r4, #0]
   10bde:	e7cf      	b.n	10b80 <__ssvfscanf_r+0x17ec>
   10be0:	4690      	mov	r8, r2
   10be2:	e521      	b.n	10628 <__ssvfscanf_r+0x1294>

00010be4 <_fclose_r>:
   10be4:	b570      	push	{r4, r5, r6, lr}
   10be6:	2900      	cmp	r1, #0
   10be8:	d04b      	beq.n	10c82 <_fclose_r+0x9e>
   10bea:	4606      	mov	r6, r0
   10bec:	460c      	mov	r4, r1
   10bee:	b110      	cbz	r0, 10bf6 <_fclose_r+0x12>
   10bf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10bf2:	2b00      	cmp	r3, #0
   10bf4:	d048      	beq.n	10c88 <_fclose_r+0xa4>
   10bf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10bf8:	07d8      	lsls	r0, r3, #31
   10bfa:	d534      	bpl.n	10c66 <_fclose_r+0x82>
   10bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10c00:	2b00      	cmp	r3, #0
   10c02:	d03e      	beq.n	10c82 <_fclose_r+0x9e>
   10c04:	4621      	mov	r1, r4
   10c06:	4630      	mov	r0, r6
   10c08:	f000 f850 	bl	10cac <__sflush_r>
   10c0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10c0e:	4605      	mov	r5, r0
   10c10:	b133      	cbz	r3, 10c20 <_fclose_r+0x3c>
   10c12:	69e1      	ldr	r1, [r4, #28]
   10c14:	4630      	mov	r0, r6
   10c16:	4798      	blx	r3
   10c18:	2800      	cmp	r0, #0
   10c1a:	bfb8      	it	lt
   10c1c:	f04f 35ff 	movlt.w	r5, #4294967295
   10c20:	89a3      	ldrh	r3, [r4, #12]
   10c22:	061a      	lsls	r2, r3, #24
   10c24:	d43c      	bmi.n	10ca0 <_fclose_r+0xbc>
   10c26:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10c28:	b141      	cbz	r1, 10c3c <_fclose_r+0x58>
   10c2a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10c2e:	4299      	cmp	r1, r3
   10c30:	d002      	beq.n	10c38 <_fclose_r+0x54>
   10c32:	4630      	mov	r0, r6
   10c34:	f7fb fb96 	bl	c364 <_free_r>
   10c38:	2300      	movs	r3, #0
   10c3a:	6323      	str	r3, [r4, #48]	; 0x30
   10c3c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   10c3e:	b121      	cbz	r1, 10c4a <_fclose_r+0x66>
   10c40:	4630      	mov	r0, r6
   10c42:	f7fb fb8f 	bl	c364 <_free_r>
   10c46:	2300      	movs	r3, #0
   10c48:	6463      	str	r3, [r4, #68]	; 0x44
   10c4a:	f7fa fd09 	bl	b660 <__sfp_lock_acquire>
   10c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10c50:	2200      	movs	r2, #0
   10c52:	07db      	lsls	r3, r3, #31
   10c54:	81a2      	strh	r2, [r4, #12]
   10c56:	d51f      	bpl.n	10c98 <_fclose_r+0xb4>
   10c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10c5a:	f7fb f839 	bl	bcd0 <__retarget_lock_close_recursive>
   10c5e:	f7fa fd05 	bl	b66c <__sfp_lock_release>
   10c62:	4628      	mov	r0, r5
   10c64:	bd70      	pop	{r4, r5, r6, pc}
   10c66:	89a3      	ldrh	r3, [r4, #12]
   10c68:	0599      	lsls	r1, r3, #22
   10c6a:	d4cb      	bmi.n	10c04 <_fclose_r+0x20>
   10c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10c6e:	f7fb f831 	bl	bcd4 <__retarget_lock_acquire_recursive>
   10c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10c76:	2b00      	cmp	r3, #0
   10c78:	d1c4      	bne.n	10c04 <_fclose_r+0x20>
   10c7a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10c7c:	f015 0501 	ands.w	r5, r5, #1
   10c80:	d005      	beq.n	10c8e <_fclose_r+0xaa>
   10c82:	2500      	movs	r5, #0
   10c84:	4628      	mov	r0, r5
   10c86:	bd70      	pop	{r4, r5, r6, pc}
   10c88:	f7fa fccc 	bl	b624 <__sinit>
   10c8c:	e7b3      	b.n	10bf6 <_fclose_r+0x12>
   10c8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10c90:	f7fb f822 	bl	bcd8 <__retarget_lock_release_recursive>
   10c94:	4628      	mov	r0, r5
   10c96:	bd70      	pop	{r4, r5, r6, pc}
   10c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10c9a:	f7fb f81d 	bl	bcd8 <__retarget_lock_release_recursive>
   10c9e:	e7db      	b.n	10c58 <_fclose_r+0x74>
   10ca0:	6921      	ldr	r1, [r4, #16]
   10ca2:	4630      	mov	r0, r6
   10ca4:	f7fb fb5e 	bl	c364 <_free_r>
   10ca8:	e7bd      	b.n	10c26 <_fclose_r+0x42>
   10caa:	bf00      	nop

00010cac <__sflush_r>:
   10cac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   10cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cb4:	460c      	mov	r4, r1
   10cb6:	0711      	lsls	r1, r2, #28
   10cb8:	4680      	mov	r8, r0
   10cba:	d447      	bmi.n	10d4c <__sflush_r+0xa0>
   10cbc:	6863      	ldr	r3, [r4, #4]
   10cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   10cc2:	2b00      	cmp	r3, #0
   10cc4:	81a2      	strh	r2, [r4, #12]
   10cc6:	dd5e      	ble.n	10d86 <__sflush_r+0xda>
   10cc8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10cca:	2d00      	cmp	r5, #0
   10ccc:	d058      	beq.n	10d80 <__sflush_r+0xd4>
   10cce:	2300      	movs	r3, #0
   10cd0:	f8d8 6000 	ldr.w	r6, [r8]
   10cd4:	f8c8 3000 	str.w	r3, [r8]
   10cd8:	b293      	uxth	r3, r2
   10cda:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   10cde:	d156      	bne.n	10d8e <__sflush_r+0xe2>
   10ce0:	2301      	movs	r3, #1
   10ce2:	69e1      	ldr	r1, [r4, #28]
   10ce4:	4640      	mov	r0, r8
   10ce6:	47a8      	blx	r5
   10ce8:	1c43      	adds	r3, r0, #1
   10cea:	d067      	beq.n	10dbc <__sflush_r+0x110>
   10cec:	89a3      	ldrh	r3, [r4, #12]
   10cee:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10cf0:	075f      	lsls	r7, r3, #29
   10cf2:	d505      	bpl.n	10d00 <__sflush_r+0x54>
   10cf4:	6863      	ldr	r3, [r4, #4]
   10cf6:	1ac0      	subs	r0, r0, r3
   10cf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10cfa:	b10b      	cbz	r3, 10d00 <__sflush_r+0x54>
   10cfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10cfe:	1ac0      	subs	r0, r0, r3
   10d00:	69e1      	ldr	r1, [r4, #28]
   10d02:	4602      	mov	r2, r0
   10d04:	2300      	movs	r3, #0
   10d06:	4640      	mov	r0, r8
   10d08:	47a8      	blx	r5
   10d0a:	1c41      	adds	r1, r0, #1
   10d0c:	d141      	bne.n	10d92 <__sflush_r+0xe6>
   10d0e:	f8d8 3000 	ldr.w	r3, [r8]
   10d12:	2b00      	cmp	r3, #0
   10d14:	d03d      	beq.n	10d92 <__sflush_r+0xe6>
   10d16:	2b1d      	cmp	r3, #29
   10d18:	d001      	beq.n	10d1e <__sflush_r+0x72>
   10d1a:	2b16      	cmp	r3, #22
   10d1c:	d156      	bne.n	10dcc <__sflush_r+0x120>
   10d1e:	89a3      	ldrh	r3, [r4, #12]
   10d20:	6922      	ldr	r2, [r4, #16]
   10d22:	6022      	str	r2, [r4, #0]
   10d24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10d28:	2100      	movs	r1, #0
   10d2a:	6061      	str	r1, [r4, #4]
   10d2c:	81a3      	strh	r3, [r4, #12]
   10d2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10d30:	f8c8 6000 	str.w	r6, [r8]
   10d34:	b321      	cbz	r1, 10d80 <__sflush_r+0xd4>
   10d36:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10d3a:	4299      	cmp	r1, r3
   10d3c:	d002      	beq.n	10d44 <__sflush_r+0x98>
   10d3e:	4640      	mov	r0, r8
   10d40:	f7fb fb10 	bl	c364 <_free_r>
   10d44:	2000      	movs	r0, #0
   10d46:	6320      	str	r0, [r4, #48]	; 0x30
   10d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d4c:	6926      	ldr	r6, [r4, #16]
   10d4e:	b1be      	cbz	r6, 10d80 <__sflush_r+0xd4>
   10d50:	b293      	uxth	r3, r2
   10d52:	6825      	ldr	r5, [r4, #0]
   10d54:	6026      	str	r6, [r4, #0]
   10d56:	079a      	lsls	r2, r3, #30
   10d58:	bf0c      	ite	eq
   10d5a:	6963      	ldreq	r3, [r4, #20]
   10d5c:	2300      	movne	r3, #0
   10d5e:	1bad      	subs	r5, r5, r6
   10d60:	60a3      	str	r3, [r4, #8]
   10d62:	e00b      	b.n	10d7c <__sflush_r+0xd0>
   10d64:	462b      	mov	r3, r5
   10d66:	4632      	mov	r2, r6
   10d68:	69e1      	ldr	r1, [r4, #28]
   10d6a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10d6c:	4640      	mov	r0, r8
   10d6e:	47b8      	blx	r7
   10d70:	f1b0 0c00 	subs.w	ip, r0, #0
   10d74:	eba5 050c 	sub.w	r5, r5, ip
   10d78:	4466      	add	r6, ip
   10d7a:	dd17      	ble.n	10dac <__sflush_r+0x100>
   10d7c:	2d00      	cmp	r5, #0
   10d7e:	dcf1      	bgt.n	10d64 <__sflush_r+0xb8>
   10d80:	2000      	movs	r0, #0
   10d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10d88:	2b00      	cmp	r3, #0
   10d8a:	dc9d      	bgt.n	10cc8 <__sflush_r+0x1c>
   10d8c:	e7f8      	b.n	10d80 <__sflush_r+0xd4>
   10d8e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10d90:	e7ae      	b.n	10cf0 <__sflush_r+0x44>
   10d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10d96:	6922      	ldr	r2, [r4, #16]
   10d98:	6022      	str	r2, [r4, #0]
   10d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10d9e:	81a3      	strh	r3, [r4, #12]
   10da0:	2200      	movs	r2, #0
   10da2:	04db      	lsls	r3, r3, #19
   10da4:	6062      	str	r2, [r4, #4]
   10da6:	d5c2      	bpl.n	10d2e <__sflush_r+0x82>
   10da8:	6520      	str	r0, [r4, #80]	; 0x50
   10daa:	e7c0      	b.n	10d2e <__sflush_r+0x82>
   10dac:	89a3      	ldrh	r3, [r4, #12]
   10dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10db2:	f04f 30ff 	mov.w	r0, #4294967295
   10db6:	81a3      	strh	r3, [r4, #12]
   10db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dbc:	f8d8 3000 	ldr.w	r3, [r8]
   10dc0:	2b00      	cmp	r3, #0
   10dc2:	d093      	beq.n	10cec <__sflush_r+0x40>
   10dc4:	2b1d      	cmp	r3, #29
   10dc6:	d006      	beq.n	10dd6 <__sflush_r+0x12a>
   10dc8:	2b16      	cmp	r3, #22
   10dca:	d004      	beq.n	10dd6 <__sflush_r+0x12a>
   10dcc:	89a3      	ldrh	r3, [r4, #12]
   10dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10dd2:	81a3      	strh	r3, [r4, #12]
   10dd4:	e7d5      	b.n	10d82 <__sflush_r+0xd6>
   10dd6:	f8c8 6000 	str.w	r6, [r8]
   10dda:	e7d1      	b.n	10d80 <__sflush_r+0xd4>

00010ddc <_fflush_r>:
   10ddc:	b538      	push	{r3, r4, r5, lr}
   10dde:	460c      	mov	r4, r1
   10de0:	4605      	mov	r5, r0
   10de2:	b108      	cbz	r0, 10de8 <_fflush_r+0xc>
   10de4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10de6:	b303      	cbz	r3, 10e2a <_fflush_r+0x4e>
   10de8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10dec:	b188      	cbz	r0, 10e12 <_fflush_r+0x36>
   10dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10df0:	07db      	lsls	r3, r3, #31
   10df2:	d401      	bmi.n	10df8 <_fflush_r+0x1c>
   10df4:	0581      	lsls	r1, r0, #22
   10df6:	d50f      	bpl.n	10e18 <_fflush_r+0x3c>
   10df8:	4628      	mov	r0, r5
   10dfa:	4621      	mov	r1, r4
   10dfc:	f7ff ff56 	bl	10cac <__sflush_r>
   10e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10e02:	07da      	lsls	r2, r3, #31
   10e04:	4605      	mov	r5, r0
   10e06:	d402      	bmi.n	10e0e <_fflush_r+0x32>
   10e08:	89a3      	ldrh	r3, [r4, #12]
   10e0a:	059b      	lsls	r3, r3, #22
   10e0c:	d508      	bpl.n	10e20 <_fflush_r+0x44>
   10e0e:	4628      	mov	r0, r5
   10e10:	bd38      	pop	{r3, r4, r5, pc}
   10e12:	4605      	mov	r5, r0
   10e14:	4628      	mov	r0, r5
   10e16:	bd38      	pop	{r3, r4, r5, pc}
   10e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10e1a:	f7fa ff5b 	bl	bcd4 <__retarget_lock_acquire_recursive>
   10e1e:	e7eb      	b.n	10df8 <_fflush_r+0x1c>
   10e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10e22:	f7fa ff59 	bl	bcd8 <__retarget_lock_release_recursive>
   10e26:	4628      	mov	r0, r5
   10e28:	bd38      	pop	{r3, r4, r5, pc}
   10e2a:	f7fa fbfb 	bl	b624 <__sinit>
   10e2e:	e7db      	b.n	10de8 <_fflush_r+0xc>

00010e30 <__sccl>:
   10e30:	b570      	push	{r4, r5, r6, lr}
   10e32:	780c      	ldrb	r4, [r1, #0]
   10e34:	2c5e      	cmp	r4, #94	; 0x5e
   10e36:	4686      	mov	lr, r0
   10e38:	d01e      	beq.n	10e78 <__sccl+0x48>
   10e3a:	2200      	movs	r2, #0
   10e3c:	1c48      	adds	r0, r1, #1
   10e3e:	4694      	mov	ip, r2
   10e40:	f10e 33ff 	add.w	r3, lr, #4294967295
   10e44:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   10e48:	f803 2f01 	strb.w	r2, [r3, #1]!
   10e4c:	428b      	cmp	r3, r1
   10e4e:	d1fb      	bne.n	10e48 <__sccl+0x18>
   10e50:	b184      	cbz	r4, 10e74 <__sccl+0x44>
   10e52:	f08c 0101 	eor.w	r1, ip, #1
   10e56:	f80e 1004 	strb.w	r1, [lr, r4]
   10e5a:	1c45      	adds	r5, r0, #1
   10e5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   10e60:	2b2d      	cmp	r3, #45	; 0x2d
   10e62:	d00e      	beq.n	10e82 <__sccl+0x52>
   10e64:	2b5d      	cmp	r3, #93	; 0x5d
   10e66:	d003      	beq.n	10e70 <__sccl+0x40>
   10e68:	b11b      	cbz	r3, 10e72 <__sccl+0x42>
   10e6a:	461c      	mov	r4, r3
   10e6c:	4628      	mov	r0, r5
   10e6e:	e7f2      	b.n	10e56 <__sccl+0x26>
   10e70:	4628      	mov	r0, r5
   10e72:	bd70      	pop	{r4, r5, r6, pc}
   10e74:	3801      	subs	r0, #1
   10e76:	bd70      	pop	{r4, r5, r6, pc}
   10e78:	2201      	movs	r2, #1
   10e7a:	784c      	ldrb	r4, [r1, #1]
   10e7c:	1c88      	adds	r0, r1, #2
   10e7e:	4694      	mov	ip, r2
   10e80:	e7de      	b.n	10e40 <__sccl+0x10>
   10e82:	f890 c001 	ldrb.w	ip, [r0, #1]
   10e86:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   10e8a:	d0ee      	beq.n	10e6a <__sccl+0x3a>
   10e8c:	4564      	cmp	r4, ip
   10e8e:	dcec      	bgt.n	10e6a <__sccl+0x3a>
   10e90:	1c66      	adds	r6, r4, #1
   10e92:	3002      	adds	r0, #2
   10e94:	eb0e 0206 	add.w	r2, lr, r6
   10e98:	f802 1b01 	strb.w	r1, [r2], #1
   10e9c:	eba2 030e 	sub.w	r3, r2, lr
   10ea0:	3b01      	subs	r3, #1
   10ea2:	459c      	cmp	ip, r3
   10ea4:	dcf8      	bgt.n	10e98 <__sccl+0x68>
   10ea6:	ebac 0304 	sub.w	r3, ip, r4
   10eaa:	3b01      	subs	r3, #1
   10eac:	4564      	cmp	r4, ip
   10eae:	bfa8      	it	ge
   10eb0:	2300      	movge	r3, #0
   10eb2:	3502      	adds	r5, #2
   10eb4:	199c      	adds	r4, r3, r6
   10eb6:	e7d1      	b.n	10e5c <__sccl+0x2c>

00010eb8 <stpncpy>:
   10eb8:	ea41 0300 	orr.w	r3, r1, r0
   10ebc:	079b      	lsls	r3, r3, #30
   10ebe:	b430      	push	{r4, r5}
   10ec0:	d101      	bne.n	10ec6 <stpncpy+0xe>
   10ec2:	2a03      	cmp	r2, #3
   10ec4:	d80f      	bhi.n	10ee6 <stpncpy+0x2e>
   10ec6:	f101 3cff 	add.w	ip, r1, #4294967295
   10eca:	e007      	b.n	10edc <stpncpy+0x24>
   10ecc:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   10ed0:	f803 1b01 	strb.w	r1, [r3], #1
   10ed4:	1e54      	subs	r4, r2, #1
   10ed6:	b1c1      	cbz	r1, 10f0a <stpncpy+0x52>
   10ed8:	4622      	mov	r2, r4
   10eda:	4618      	mov	r0, r3
   10edc:	4603      	mov	r3, r0
   10ede:	2a00      	cmp	r2, #0
   10ee0:	d1f4      	bne.n	10ecc <stpncpy+0x14>
   10ee2:	bc30      	pop	{r4, r5}
   10ee4:	4770      	bx	lr
   10ee6:	460b      	mov	r3, r1
   10ee8:	4619      	mov	r1, r3
   10eea:	f853 5b04 	ldr.w	r5, [r3], #4
   10eee:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   10ef2:	ea24 0405 	bic.w	r4, r4, r5
   10ef6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   10efa:	d1e4      	bne.n	10ec6 <stpncpy+0xe>
   10efc:	3a04      	subs	r2, #4
   10efe:	2a03      	cmp	r2, #3
   10f00:	f840 5b04 	str.w	r5, [r0], #4
   10f04:	4619      	mov	r1, r3
   10f06:	d8ef      	bhi.n	10ee8 <stpncpy+0x30>
   10f08:	e7dd      	b.n	10ec6 <stpncpy+0xe>
   10f0a:	4402      	add	r2, r0
   10f0c:	2c00      	cmp	r4, #0
   10f0e:	d0e8      	beq.n	10ee2 <stpncpy+0x2a>
   10f10:	f803 1b01 	strb.w	r1, [r3], #1
   10f14:	4293      	cmp	r3, r2
   10f16:	d1fb      	bne.n	10f10 <stpncpy+0x58>
   10f18:	bc30      	pop	{r4, r5}
   10f1a:	4770      	bx	lr

00010f1c <_localeconv_r>:
   10f1c:	4800      	ldr	r0, [pc, #0]	; (10f20 <_localeconv_r+0x4>)
   10f1e:	4770      	bx	lr
   10f20:	200086d8 	.word	0x200086d8
   10f24:	00000000 	.word	0x00000000

00010f28 <frexp>:
   10f28:	b430      	push	{r4, r5}
   10f2a:	b082      	sub	sp, #8
   10f2c:	ed8d 0b00 	vstr	d0, [sp]
   10f30:	9a01      	ldr	r2, [sp, #4]
   10f32:	4c19      	ldr	r4, [pc, #100]	; (10f98 <frexp+0x70>)
   10f34:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10f38:	2100      	movs	r1, #0
   10f3a:	42a3      	cmp	r3, r4
   10f3c:	6001      	str	r1, [r0, #0]
   10f3e:	dc21      	bgt.n	10f84 <frexp+0x5c>
   10f40:	9c00      	ldr	r4, [sp, #0]
   10f42:	431c      	orrs	r4, r3
   10f44:	d01e      	beq.n	10f84 <frexp+0x5c>
   10f46:	4c15      	ldr	r4, [pc, #84]	; (10f9c <frexp+0x74>)
   10f48:	4014      	ands	r4, r2
   10f4a:	b954      	cbnz	r4, 10f62 <frexp+0x3a>
   10f4c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 10f90 <frexp+0x68>
   10f50:	ee20 7b07 	vmul.f64	d7, d0, d7
   10f54:	ed8d 7b00 	vstr	d7, [sp]
   10f58:	9a01      	ldr	r2, [sp, #4]
   10f5a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   10f5e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10f62:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   10f66:	e9dd 4500 	ldrd	r4, r5, [sp]
   10f6a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   10f6e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10f72:	151b      	asrs	r3, r3, #20
   10f74:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   10f78:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   10f7c:	e9cd 4500 	strd	r4, r5, [sp]
   10f80:	440b      	add	r3, r1
   10f82:	6003      	str	r3, [r0, #0]
   10f84:	ed9d 0b00 	vldr	d0, [sp]
   10f88:	b002      	add	sp, #8
   10f8a:	bc30      	pop	{r4, r5}
   10f8c:	4770      	bx	lr
   10f8e:	bf00      	nop
   10f90:	00000000 	.word	0x00000000
   10f94:	43500000 	.word	0x43500000
   10f98:	7fefffff 	.word	0x7fefffff
   10f9c:	7ff00000 	.word	0x7ff00000

00010fa0 <__assert_func>:
   10fa0:	b500      	push	{lr}
   10fa2:	4c0b      	ldr	r4, [pc, #44]	; (10fd0 <__assert_func+0x30>)
   10fa4:	6825      	ldr	r5, [r4, #0]
   10fa6:	4614      	mov	r4, r2
   10fa8:	68ee      	ldr	r6, [r5, #12]
   10faa:	461a      	mov	r2, r3
   10fac:	b085      	sub	sp, #20
   10fae:	4603      	mov	r3, r0
   10fb0:	460d      	mov	r5, r1
   10fb2:	b14c      	cbz	r4, 10fc8 <__assert_func+0x28>
   10fb4:	4907      	ldr	r1, [pc, #28]	; (10fd4 <__assert_func+0x34>)
   10fb6:	9500      	str	r5, [sp, #0]
   10fb8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   10fbc:	4630      	mov	r0, r6
   10fbe:	4906      	ldr	r1, [pc, #24]	; (10fd8 <__assert_func+0x38>)
   10fc0:	f001 fabe 	bl	12540 <fiprintf>
   10fc4:	f7f7 fa46 	bl	8454 <abort>
   10fc8:	4904      	ldr	r1, [pc, #16]	; (10fdc <__assert_func+0x3c>)
   10fca:	460c      	mov	r4, r1
   10fcc:	e7f3      	b.n	10fb6 <__assert_func+0x16>
   10fce:	bf00      	nop
   10fd0:	20008b70 	.word	0x20008b70
   10fd4:	2000087c 	.word	0x2000087c
   10fd8:	2000088c 	.word	0x2000088c
   10fdc:	20008014 	.word	0x20008014

00010fe0 <_calloc_r>:
   10fe0:	b538      	push	{r3, r4, r5, lr}
   10fe2:	fba1 1402 	umull	r1, r4, r1, r2
   10fe6:	bb8c      	cbnz	r4, 1104c <_calloc_r+0x6c>
   10fe8:	f7f8 fde8 	bl	9bbc <_malloc_r>
   10fec:	4605      	mov	r5, r0
   10fee:	b1e0      	cbz	r0, 1102a <_calloc_r+0x4a>
   10ff0:	f850 2c04 	ldr.w	r2, [r0, #-4]
   10ff4:	f022 0203 	bic.w	r2, r2, #3
   10ff8:	3a04      	subs	r2, #4
   10ffa:	2a24      	cmp	r2, #36	; 0x24
   10ffc:	d817      	bhi.n	1102e <_calloc_r+0x4e>
   10ffe:	2a13      	cmp	r2, #19
   11000:	d91a      	bls.n	11038 <_calloc_r+0x58>
   11002:	2a1b      	cmp	r2, #27
   11004:	e9c0 4400 	strd	r4, r4, [r0]
   11008:	d91d      	bls.n	11046 <_calloc_r+0x66>
   1100a:	2a24      	cmp	r2, #36	; 0x24
   1100c:	bf14      	ite	ne
   1100e:	f100 0210 	addne.w	r2, r0, #16
   11012:	f100 0218 	addeq.w	r2, r0, #24
   11016:	f04f 0300 	mov.w	r3, #0
   1101a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   1101e:	bf04      	itt	eq
   11020:	6104      	streq	r4, [r0, #16]
   11022:	6144      	streq	r4, [r0, #20]
   11024:	e9c2 3300 	strd	r3, r3, [r2]
   11028:	6093      	str	r3, [r2, #8]
   1102a:	4628      	mov	r0, r5
   1102c:	bd38      	pop	{r3, r4, r5, pc}
   1102e:	4621      	mov	r1, r4
   11030:	f7fa fcec 	bl	ba0c <memset>
   11034:	4628      	mov	r0, r5
   11036:	bd38      	pop	{r3, r4, r5, pc}
   11038:	4602      	mov	r2, r0
   1103a:	2300      	movs	r3, #0
   1103c:	e9c2 3300 	strd	r3, r3, [r2]
   11040:	6093      	str	r3, [r2, #8]
   11042:	4628      	mov	r0, r5
   11044:	bd38      	pop	{r3, r4, r5, pc}
   11046:	f100 0208 	add.w	r2, r0, #8
   1104a:	e7f6      	b.n	1103a <_calloc_r+0x5a>
   1104c:	f7fa fe14 	bl	bc78 <__errno>
   11050:	230c      	movs	r3, #12
   11052:	2500      	movs	r5, #0
   11054:	6003      	str	r3, [r0, #0]
   11056:	e7e8      	b.n	1102a <_calloc_r+0x4a>

00011058 <quorem>:
   11058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1105c:	6903      	ldr	r3, [r0, #16]
   1105e:	690c      	ldr	r4, [r1, #16]
   11060:	42a3      	cmp	r3, r4
   11062:	b083      	sub	sp, #12
   11064:	f2c0 8087 	blt.w	11176 <quorem+0x11e>
   11068:	3c01      	subs	r4, #1
   1106a:	f101 0514 	add.w	r5, r1, #20
   1106e:	00a3      	lsls	r3, r4, #2
   11070:	f100 0814 	add.w	r8, r0, #20
   11074:	9300      	str	r3, [sp, #0]
   11076:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1107a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1107e:	3301      	adds	r3, #1
   11080:	4681      	mov	r9, r0
   11082:	429a      	cmp	r2, r3
   11084:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   11088:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   1108c:	9001      	str	r0, [sp, #4]
   1108e:	fbb2 f6f3 	udiv	r6, r2, r3
   11092:	d33b      	bcc.n	1110c <quorem+0xb4>
   11094:	f04f 0c00 	mov.w	ip, #0
   11098:	46ae      	mov	lr, r5
   1109a:	4640      	mov	r0, r8
   1109c:	46e2      	mov	sl, ip
   1109e:	4663      	mov	r3, ip
   110a0:	f85e bb04 	ldr.w	fp, [lr], #4
   110a4:	6802      	ldr	r2, [r0, #0]
   110a6:	fa1f fc8b 	uxth.w	ip, fp
   110aa:	fb06 330c 	mla	r3, r6, ip, r3
   110ae:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   110b2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   110b6:	fb06 cc0b 	mla	ip, r6, fp, ip
   110ba:	b29b      	uxth	r3, r3
   110bc:	ebaa 0303 	sub.w	r3, sl, r3
   110c0:	fa1f fa8c 	uxth.w	sl, ip
   110c4:	fa13 f382 	uxtah	r3, r3, r2
   110c8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   110cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
   110d0:	b29b      	uxth	r3, r3
   110d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   110d6:	4577      	cmp	r7, lr
   110d8:	f840 3b04 	str.w	r3, [r0], #4
   110dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
   110e0:	ea4f 431c 	mov.w	r3, ip, lsr #16
   110e4:	d2dc      	bcs.n	110a0 <quorem+0x48>
   110e6:	9b00      	ldr	r3, [sp, #0]
   110e8:	f858 3003 	ldr.w	r3, [r8, r3]
   110ec:	b973      	cbnz	r3, 1110c <quorem+0xb4>
   110ee:	9b01      	ldr	r3, [sp, #4]
   110f0:	3b04      	subs	r3, #4
   110f2:	4598      	cmp	r8, r3
   110f4:	d304      	bcc.n	11100 <quorem+0xa8>
   110f6:	e007      	b.n	11108 <quorem+0xb0>
   110f8:	4598      	cmp	r8, r3
   110fa:	f104 34ff 	add.w	r4, r4, #4294967295
   110fe:	d203      	bcs.n	11108 <quorem+0xb0>
   11100:	f853 2904 	ldr.w	r2, [r3], #-4
   11104:	2a00      	cmp	r2, #0
   11106:	d0f7      	beq.n	110f8 <quorem+0xa0>
   11108:	f8c9 4010 	str.w	r4, [r9, #16]
   1110c:	4648      	mov	r0, r9
   1110e:	f7fc f933 	bl	d378 <__mcmp>
   11112:	2800      	cmp	r0, #0
   11114:	db2b      	blt.n	1116e <quorem+0x116>
   11116:	3601      	adds	r6, #1
   11118:	4641      	mov	r1, r8
   1111a:	2300      	movs	r3, #0
   1111c:	f855 0b04 	ldr.w	r0, [r5], #4
   11120:	f8d1 c000 	ldr.w	ip, [r1]
   11124:	b282      	uxth	r2, r0
   11126:	1a9a      	subs	r2, r3, r2
   11128:	0c03      	lsrs	r3, r0, #16
   1112a:	fa12 f28c 	uxtah	r2, r2, ip
   1112e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   11132:	eb03 4322 	add.w	r3, r3, r2, asr #16
   11136:	b292      	uxth	r2, r2
   11138:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1113c:	42af      	cmp	r7, r5
   1113e:	f841 2b04 	str.w	r2, [r1], #4
   11142:	ea4f 4323 	mov.w	r3, r3, asr #16
   11146:	d2e9      	bcs.n	1111c <quorem+0xc4>
   11148:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1114c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   11150:	b96a      	cbnz	r2, 1116e <quorem+0x116>
   11152:	3b04      	subs	r3, #4
   11154:	4598      	cmp	r8, r3
   11156:	d304      	bcc.n	11162 <quorem+0x10a>
   11158:	e007      	b.n	1116a <quorem+0x112>
   1115a:	4598      	cmp	r8, r3
   1115c:	f104 34ff 	add.w	r4, r4, #4294967295
   11160:	d203      	bcs.n	1116a <quorem+0x112>
   11162:	f853 2904 	ldr.w	r2, [r3], #-4
   11166:	2a00      	cmp	r2, #0
   11168:	d0f7      	beq.n	1115a <quorem+0x102>
   1116a:	f8c9 4010 	str.w	r4, [r9, #16]
   1116e:	4630      	mov	r0, r6
   11170:	b003      	add	sp, #12
   11172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11176:	2000      	movs	r0, #0
   11178:	b003      	add	sp, #12
   1117a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1117e:	bf00      	nop

00011180 <_dtoa_r>:
   11180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11184:	ed2d 8b02 	vpush	{d8}
   11188:	b08f      	sub	sp, #60	; 0x3c
   1118a:	ed8d 0b02 	vstr	d0, [sp, #8]
   1118e:	9101      	str	r1, [sp, #4]
   11190:	6b81      	ldr	r1, [r0, #56]	; 0x38
   11192:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   11194:	9305      	str	r3, [sp, #20]
   11196:	ec57 6b10 	vmov	r6, r7, d0
   1119a:	4604      	mov	r4, r0
   1119c:	4693      	mov	fp, r2
   1119e:	b141      	cbz	r1, 111b2 <_dtoa_r+0x32>
   111a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   111a2:	604a      	str	r2, [r1, #4]
   111a4:	2301      	movs	r3, #1
   111a6:	4093      	lsls	r3, r2
   111a8:	608b      	str	r3, [r1, #8]
   111aa:	f7fb fe2d 	bl	ce08 <_Bfree>
   111ae:	2300      	movs	r3, #0
   111b0:	63a3      	str	r3, [r4, #56]	; 0x38
   111b2:	f1b7 0800 	subs.w	r8, r7, #0
   111b6:	bfb4      	ite	lt
   111b8:	2301      	movlt	r3, #1
   111ba:	2300      	movge	r3, #0
   111bc:	602b      	str	r3, [r5, #0]
   111be:	4bbe      	ldr	r3, [pc, #760]	; (114b8 <_dtoa_r+0x338>)
   111c0:	bfbc      	itt	lt
   111c2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   111c6:	f8cd 800c 	strlt.w	r8, [sp, #12]
   111ca:	ea33 0308 	bics.w	r3, r3, r8
   111ce:	f000 809f 	beq.w	11310 <_dtoa_r+0x190>
   111d2:	ed9d 8b02 	vldr	d8, [sp, #8]
   111d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
   111da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   111de:	d111      	bne.n	11204 <_dtoa_r+0x84>
   111e0:	9a05      	ldr	r2, [sp, #20]
   111e2:	2301      	movs	r3, #1
   111e4:	6013      	str	r3, [r2, #0]
   111e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   111e8:	2b00      	cmp	r3, #0
   111ea:	f000 823f 	beq.w	1166c <_dtoa_r+0x4ec>
   111ee:	4bb3      	ldr	r3, [pc, #716]	; (114bc <_dtoa_r+0x33c>)
   111f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   111f2:	6013      	str	r3, [r2, #0]
   111f4:	3b01      	subs	r3, #1
   111f6:	9300      	str	r3, [sp, #0]
   111f8:	9800      	ldr	r0, [sp, #0]
   111fa:	b00f      	add	sp, #60	; 0x3c
   111fc:	ecbd 8b02 	vpop	{d8}
   11200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11204:	aa0c      	add	r2, sp, #48	; 0x30
   11206:	a90d      	add	r1, sp, #52	; 0x34
   11208:	4620      	mov	r0, r4
   1120a:	eeb0 0b48 	vmov.f64	d0, d8
   1120e:	f7fc fa13 	bl	d638 <__d2b>
   11212:	ea5f 5318 	movs.w	r3, r8, lsr #20
   11216:	4605      	mov	r5, r0
   11218:	f040 8092 	bne.w	11340 <_dtoa_r+0x1c0>
   1121c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   11220:	440b      	add	r3, r1
   11222:	f203 4232 	addw	r2, r3, #1074	; 0x432
   11226:	2a20      	cmp	r2, #32
   11228:	f340 82fa 	ble.w	11820 <_dtoa_r+0x6a0>
   1122c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   11230:	fa08 f802 	lsl.w	r8, r8, r2
   11234:	f203 4212 	addw	r2, r3, #1042	; 0x412
   11238:	40d6      	lsrs	r6, r2
   1123a:	ea48 0206 	orr.w	r2, r8, r6
   1123e:	ee07 2a10 	vmov	s14, r2
   11242:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   11246:	1e58      	subs	r0, r3, #1
   11248:	ee17 6a90 	vmov	r6, s15
   1124c:	ec53 2b17 	vmov	r2, r3, d7
   11250:	f04f 0a01 	mov.w	sl, #1
   11254:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   11258:	ed9f 3b91 	vldr	d3, [pc, #580]	; 114a0 <_dtoa_r+0x320>
   1125c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 114a8 <_dtoa_r+0x328>
   11260:	ed9f 5b93 	vldr	d5, [pc, #588]	; 114b0 <_dtoa_r+0x330>
   11264:	ee06 0a90 	vmov	s13, r0
   11268:	ec43 2b12 	vmov	d2, r2, r3
   1126c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   11270:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   11274:	ee32 6b46 	vsub.f64	d6, d2, d6
   11278:	eea6 7b03 	vfma.f64	d7, d6, d3
   1127c:	eea4 7b05 	vfma.f64	d7, d4, d5
   11280:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11284:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   11288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1128c:	ee16 7a90 	vmov	r7, s13
   11290:	d508      	bpl.n	112a4 <_dtoa_r+0x124>
   11292:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   11296:	eeb4 6b47 	vcmp.f64	d6, d7
   1129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1129e:	bf18      	it	ne
   112a0:	f107 37ff 	addne.w	r7, r7, #4294967295
   112a4:	2f16      	cmp	r7, #22
   112a6:	f200 8145 	bhi.w	11534 <_dtoa_r+0x3b4>
   112aa:	4b85      	ldr	r3, [pc, #532]	; (114c0 <_dtoa_r+0x340>)
   112ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   112b0:	ed93 7b00 	vldr	d7, [r3]
   112b4:	eeb4 8bc7 	vcmpe.f64	d8, d7
   112b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   112bc:	d557      	bpl.n	1136e <_dtoa_r+0x1ee>
   112be:	1a09      	subs	r1, r1, r0
   112c0:	2300      	movs	r3, #0
   112c2:	f1b1 0801 	subs.w	r8, r1, #1
   112c6:	f107 37ff 	add.w	r7, r7, #4294967295
   112ca:	930a      	str	r3, [sp, #40]	; 0x28
   112cc:	f100 8139 	bmi.w	11542 <_dtoa_r+0x3c2>
   112d0:	2300      	movs	r3, #0
   112d2:	9306      	str	r3, [sp, #24]
   112d4:	2f00      	cmp	r7, #0
   112d6:	da52      	bge.n	1137e <_dtoa_r+0x1fe>
   112d8:	9b06      	ldr	r3, [sp, #24]
   112da:	9704      	str	r7, [sp, #16]
   112dc:	1bdb      	subs	r3, r3, r7
   112de:	9306      	str	r3, [sp, #24]
   112e0:	427b      	negs	r3, r7
   112e2:	9308      	str	r3, [sp, #32]
   112e4:	9b01      	ldr	r3, [sp, #4]
   112e6:	2b09      	cmp	r3, #9
   112e8:	f04f 0700 	mov.w	r7, #0
   112ec:	d84e      	bhi.n	1138c <_dtoa_r+0x20c>
   112ee:	2b05      	cmp	r3, #5
   112f0:	f340 829d 	ble.w	1182e <_dtoa_r+0x6ae>
   112f4:	3b04      	subs	r3, #4
   112f6:	9301      	str	r3, [sp, #4]
   112f8:	2600      	movs	r6, #0
   112fa:	9b01      	ldr	r3, [sp, #4]
   112fc:	1e9a      	subs	r2, r3, #2
   112fe:	2a03      	cmp	r2, #3
   11300:	f200 8125 	bhi.w	1154e <_dtoa_r+0x3ce>
   11304:	e8df f012 	tbh	[pc, r2, lsl #1]
   11308:	03a703aa 	.word	0x03a703aa
   1130c:	037e039d 	.word	0x037e039d
   11310:	9a05      	ldr	r2, [sp, #20]
   11312:	f3c8 0813 	ubfx	r8, r8, #0, #20
   11316:	f242 730f 	movw	r3, #9999	; 0x270f
   1131a:	ea58 0806 	orrs.w	r8, r8, r6
   1131e:	6013      	str	r3, [r2, #0]
   11320:	d11e      	bne.n	11360 <_dtoa_r+0x1e0>
   11322:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11324:	2b00      	cmp	r3, #0
   11326:	f000 8591 	beq.w	11e4c <_dtoa_r+0xccc>
   1132a:	4b66      	ldr	r3, [pc, #408]	; (114c4 <_dtoa_r+0x344>)
   1132c:	9300      	str	r3, [sp, #0]
   1132e:	3308      	adds	r3, #8
   11330:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11332:	9800      	ldr	r0, [sp, #0]
   11334:	6013      	str	r3, [r2, #0]
   11336:	b00f      	add	sp, #60	; 0x3c
   11338:	ecbd 8b02 	vpop	{d8}
   1133c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11340:	ee18 6a90 	vmov	r6, s17
   11344:	f3c6 0613 	ubfx	r6, r6, #0, #20
   11348:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   1134c:	ec53 2b18 	vmov	r2, r3, d8
   11350:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   11354:	990c      	ldr	r1, [sp, #48]	; 0x30
   11356:	f04f 0a00 	mov.w	sl, #0
   1135a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1135e:	e77b      	b.n	11258 <_dtoa_r+0xd8>
   11360:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11362:	2b00      	cmp	r3, #0
   11364:	f040 833b 	bne.w	119de <_dtoa_r+0x85e>
   11368:	4b57      	ldr	r3, [pc, #348]	; (114c8 <_dtoa_r+0x348>)
   1136a:	9300      	str	r3, [sp, #0]
   1136c:	e744      	b.n	111f8 <_dtoa_r+0x78>
   1136e:	1a09      	subs	r1, r1, r0
   11370:	2300      	movs	r3, #0
   11372:	f1b1 0801 	subs.w	r8, r1, #1
   11376:	930a      	str	r3, [sp, #40]	; 0x28
   11378:	f100 80e3 	bmi.w	11542 <_dtoa_r+0x3c2>
   1137c:	9306      	str	r3, [sp, #24]
   1137e:	2300      	movs	r3, #0
   11380:	9308      	str	r3, [sp, #32]
   11382:	9b01      	ldr	r3, [sp, #4]
   11384:	9704      	str	r7, [sp, #16]
   11386:	2b09      	cmp	r3, #9
   11388:	44b8      	add	r8, r7
   1138a:	d9b0      	bls.n	112ee <_dtoa_r+0x16e>
   1138c:	2300      	movs	r3, #0
   1138e:	2601      	movs	r6, #1
   11390:	9301      	str	r3, [sp, #4]
   11392:	9607      	str	r6, [sp, #28]
   11394:	f04f 39ff 	mov.w	r9, #4294967295
   11398:	469b      	mov	fp, r3
   1139a:	2100      	movs	r1, #0
   1139c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1139e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   113a2:	4620      	mov	r0, r4
   113a4:	f7fb fd0a 	bl	cdbc <_Balloc>
   113a8:	9000      	str	r0, [sp, #0]
   113aa:	2800      	cmp	r0, #0
   113ac:	f000 8540 	beq.w	11e30 <_dtoa_r+0xcb0>
   113b0:	9b00      	ldr	r3, [sp, #0]
   113b2:	63a3      	str	r3, [r4, #56]	; 0x38
   113b4:	f1b9 0f0e 	cmp.w	r9, #14
   113b8:	f200 80dc 	bhi.w	11574 <_dtoa_r+0x3f4>
   113bc:	2e00      	cmp	r6, #0
   113be:	f000 80d9 	beq.w	11574 <_dtoa_r+0x3f4>
   113c2:	9b04      	ldr	r3, [sp, #16]
   113c4:	2b00      	cmp	r3, #0
   113c6:	f340 83de 	ble.w	11b86 <_dtoa_r+0xa06>
   113ca:	4a3d      	ldr	r2, [pc, #244]	; (114c0 <_dtoa_r+0x340>)
   113cc:	f003 010f 	and.w	r1, r3, #15
   113d0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   113d4:	ed92 7b00 	vldr	d7, [r2]
   113d8:	111a      	asrs	r2, r3, #4
   113da:	05db      	lsls	r3, r3, #23
   113dc:	f140 8382 	bpl.w	11ae4 <_dtoa_r+0x964>
   113e0:	493a      	ldr	r1, [pc, #232]	; (114cc <_dtoa_r+0x34c>)
   113e2:	ed91 6b08 	vldr	d6, [r1, #32]
   113e6:	f002 020f 	and.w	r2, r2, #15
   113ea:	2003      	movs	r0, #3
   113ec:	ee88 5b06 	vdiv.f64	d5, d8, d6
   113f0:	b15a      	cbz	r2, 1140a <_dtoa_r+0x28a>
   113f2:	4936      	ldr	r1, [pc, #216]	; (114cc <_dtoa_r+0x34c>)
   113f4:	07d6      	lsls	r6, r2, #31
   113f6:	d504      	bpl.n	11402 <_dtoa_r+0x282>
   113f8:	ed91 6b00 	vldr	d6, [r1]
   113fc:	3001      	adds	r0, #1
   113fe:	ee27 7b06 	vmul.f64	d7, d7, d6
   11402:	1052      	asrs	r2, r2, #1
   11404:	f101 0108 	add.w	r1, r1, #8
   11408:	d1f4      	bne.n	113f4 <_dtoa_r+0x274>
   1140a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1140e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11410:	b13b      	cbz	r3, 11422 <_dtoa_r+0x2a2>
   11412:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   11416:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1141e:	f100 84ae 	bmi.w	11d7e <_dtoa_r+0xbfe>
   11422:	ee07 0a90 	vmov	s15, r0
   11426:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1142a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1142e:	eea5 7b06 	vfma.f64	d7, d5, d6
   11432:	ee17 2a90 	vmov	r2, s15
   11436:	ec51 0b17 	vmov	r0, r1, d7
   1143a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1143e:	f1b9 0f00 	cmp.w	r9, #0
   11442:	f000 8388 	beq.w	11b56 <_dtoa_r+0x9d6>
   11446:	9e04      	ldr	r6, [sp, #16]
   11448:	464a      	mov	r2, r9
   1144a:	9b07      	ldr	r3, [sp, #28]
   1144c:	2b00      	cmp	r3, #0
   1144e:	f000 8447 	beq.w	11ce0 <_dtoa_r+0xb60>
   11452:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   11456:	4b1a      	ldr	r3, [pc, #104]	; (114c0 <_dtoa_r+0x340>)
   11458:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   1145c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   11460:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   11464:	ee36 7b47 	vsub.f64	d7, d6, d7
   11468:	ed1c 6b02 	vldr	d6, [ip, #-8]
   1146c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   11470:	ec41 0b16 	vmov	d6, r0, r1
   11474:	ee14 0a90 	vmov	r0, s9
   11478:	ee35 5b46 	vsub.f64	d5, d5, d6
   1147c:	9900      	ldr	r1, [sp, #0]
   1147e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11482:	3030      	adds	r0, #48	; 0x30
   11484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11488:	f801 0b01 	strb.w	r0, [r1], #1
   1148c:	f300 84ac 	bgt.w	11de8 <_dtoa_r+0xc68>
   11490:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   11494:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11498:	f04f 0c00 	mov.w	ip, #0
   1149c:	e031      	b.n	11502 <_dtoa_r+0x382>
   1149e:	bf00      	nop
   114a0:	636f4361 	.word	0x636f4361
   114a4:	3fd287a7 	.word	0x3fd287a7
   114a8:	8b60c8b3 	.word	0x8b60c8b3
   114ac:	3fc68a28 	.word	0x3fc68a28
   114b0:	509f79fb 	.word	0x509f79fb
   114b4:	3fd34413 	.word	0x3fd34413
   114b8:	7ff00000 	.word	0x7ff00000
   114bc:	20000c65 	.word	0x20000c65
   114c0:	200002a8 	.word	0x200002a8
   114c4:	20000b9c 	.word	0x20000b9c
   114c8:	20000ba8 	.word	0x20000ba8
   114cc:	20000280 	.word	0x20000280
   114d0:	f10c 0c01 	add.w	ip, ip, #1
   114d4:	4594      	cmp	ip, r2
   114d6:	da4d      	bge.n	11574 <_dtoa_r+0x3f4>
   114d8:	ee27 7b04 	vmul.f64	d7, d7, d4
   114dc:	ee25 5b04 	vmul.f64	d5, d5, d4
   114e0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   114e4:	ee16 3a90 	vmov	r3, s13
   114e8:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   114ec:	3330      	adds	r3, #48	; 0x30
   114ee:	ee37 7b43 	vsub.f64	d7, d7, d3
   114f2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   114f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   114fa:	f801 3b01 	strb.w	r3, [r1], #1
   114fe:	f100 8473 	bmi.w	11de8 <_dtoa_r+0xc68>
   11502:	ee32 6b47 	vsub.f64	d6, d2, d7
   11506:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1150e:	d5df      	bpl.n	114d0 <_dtoa_r+0x350>
   11510:	9a00      	ldr	r2, [sp, #0]
   11512:	9604      	str	r6, [sp, #16]
   11514:	e002      	b.n	1151c <_dtoa_r+0x39c>
   11516:	428a      	cmp	r2, r1
   11518:	f000 8450 	beq.w	11dbc <_dtoa_r+0xc3c>
   1151c:	4689      	mov	r9, r1
   1151e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   11522:	2b39      	cmp	r3, #57	; 0x39
   11524:	d0f7      	beq.n	11516 <_dtoa_r+0x396>
   11526:	3301      	adds	r3, #1
   11528:	b2db      	uxtb	r3, r3
   1152a:	700b      	strb	r3, [r1, #0]
   1152c:	9b04      	ldr	r3, [sp, #16]
   1152e:	3301      	adds	r3, #1
   11530:	9304      	str	r3, [sp, #16]
   11532:	e155      	b.n	117e0 <_dtoa_r+0x660>
   11534:	1a09      	subs	r1, r1, r0
   11536:	2301      	movs	r3, #1
   11538:	f1b1 0801 	subs.w	r8, r1, #1
   1153c:	930a      	str	r3, [sp, #40]	; 0x28
   1153e:	f57f aec7 	bpl.w	112d0 <_dtoa_r+0x150>
   11542:	f1c1 0301 	rsb	r3, r1, #1
   11546:	9306      	str	r3, [sp, #24]
   11548:	f04f 0800 	mov.w	r8, #0
   1154c:	e6c2      	b.n	112d4 <_dtoa_r+0x154>
   1154e:	2600      	movs	r6, #0
   11550:	63e6      	str	r6, [r4, #60]	; 0x3c
   11552:	4631      	mov	r1, r6
   11554:	4620      	mov	r0, r4
   11556:	f7fb fc31 	bl	cdbc <_Balloc>
   1155a:	9000      	str	r0, [sp, #0]
   1155c:	2800      	cmp	r0, #0
   1155e:	f000 8467 	beq.w	11e30 <_dtoa_r+0xcb0>
   11562:	9b00      	ldr	r3, [sp, #0]
   11564:	63a3      	str	r3, [r4, #56]	; 0x38
   11566:	f04f 33ff 	mov.w	r3, #4294967295
   1156a:	930b      	str	r3, [sp, #44]	; 0x2c
   1156c:	4699      	mov	r9, r3
   1156e:	2301      	movs	r3, #1
   11570:	46b3      	mov	fp, r6
   11572:	9307      	str	r3, [sp, #28]
   11574:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11576:	2a00      	cmp	r2, #0
   11578:	db55      	blt.n	11626 <_dtoa_r+0x4a6>
   1157a:	9904      	ldr	r1, [sp, #16]
   1157c:	290e      	cmp	r1, #14
   1157e:	dc52      	bgt.n	11626 <_dtoa_r+0x4a6>
   11580:	4bb7      	ldr	r3, [pc, #732]	; (11860 <_dtoa_r+0x6e0>)
   11582:	f1bb 0f00 	cmp.w	fp, #0
   11586:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1158a:	ed93 6b00 	vldr	d6, [r3]
   1158e:	da15      	bge.n	115bc <_dtoa_r+0x43c>
   11590:	f1b9 0f00 	cmp.w	r9, #0
   11594:	dc12      	bgt.n	115bc <_dtoa_r+0x43c>
   11596:	f040 82f2 	bne.w	11b7e <_dtoa_r+0x9fe>
   1159a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1159e:	ee26 7b07 	vmul.f64	d7, d6, d7
   115a2:	eeb4 8bc7 	vcmpe.f64	d8, d7
   115a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   115aa:	46ca      	mov	sl, r9
   115ac:	464e      	mov	r6, r9
   115ae:	f200 826d 	bhi.w	11a8c <_dtoa_r+0x90c>
   115b2:	f8dd 8000 	ldr.w	r8, [sp]
   115b6:	ea6f 0b0b 	mvn.w	fp, fp
   115ba:	e270      	b.n	11a9e <_dtoa_r+0x91e>
   115bc:	ee88 7b06 	vdiv.f64	d7, d8, d6
   115c0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   115c4:	9900      	ldr	r1, [sp, #0]
   115c6:	ee17 3a10 	vmov	r3, s14
   115ca:	f1b9 0f01 	cmp.w	r9, #1
   115ce:	f103 0330 	add.w	r3, r3, #48	; 0x30
   115d2:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   115d6:	f801 3b01 	strb.w	r3, [r1], #1
   115da:	eea5 8b46 	vfms.f64	d8, d5, d6
   115de:	f000 8334 	beq.w	11c4a <_dtoa_r+0xaca>
   115e2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   115e6:	2301      	movs	r3, #1
   115e8:	e011      	b.n	1160e <_dtoa_r+0x48e>
   115ea:	ee88 7b06 	vdiv.f64	d7, d8, d6
   115ee:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   115f2:	3301      	adds	r3, #1
   115f4:	ee17 2a10 	vmov	r2, s14
   115f8:	454b      	cmp	r3, r9
   115fa:	f102 0230 	add.w	r2, r2, #48	; 0x30
   115fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11602:	f801 2b01 	strb.w	r2, [r1], #1
   11606:	eea5 8b46 	vfms.f64	d8, d5, d6
   1160a:	f000 831e 	beq.w	11c4a <_dtoa_r+0xaca>
   1160e:	ee28 8b04 	vmul.f64	d8, d8, d4
   11612:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1161a:	d1e6      	bne.n	115ea <_dtoa_r+0x46a>
   1161c:	9b04      	ldr	r3, [sp, #16]
   1161e:	3301      	adds	r3, #1
   11620:	9304      	str	r3, [sp, #16]
   11622:	4689      	mov	r9, r1
   11624:	e0dc      	b.n	117e0 <_dtoa_r+0x660>
   11626:	9b07      	ldr	r3, [sp, #28]
   11628:	b343      	cbz	r3, 1167c <_dtoa_r+0x4fc>
   1162a:	9b01      	ldr	r3, [sp, #4]
   1162c:	2b01      	cmp	r3, #1
   1162e:	f340 8276 	ble.w	11b1e <_dtoa_r+0x99e>
   11632:	9b08      	ldr	r3, [sp, #32]
   11634:	f109 3aff 	add.w	sl, r9, #4294967295
   11638:	4553      	cmp	r3, sl
   1163a:	f280 823f 	bge.w	11abc <_dtoa_r+0x93c>
   1163e:	9b08      	ldr	r3, [sp, #32]
   11640:	f8cd a020 	str.w	sl, [sp, #32]
   11644:	ebaa 0203 	sub.w	r2, sl, r3
   11648:	4417      	add	r7, r2
   1164a:	f04f 0a00 	mov.w	sl, #0
   1164e:	f1b9 0f00 	cmp.w	r9, #0
   11652:	f2c0 8325 	blt.w	11ca0 <_dtoa_r+0xb20>
   11656:	9b06      	ldr	r3, [sp, #24]
   11658:	9309      	str	r3, [sp, #36]	; 0x24
   1165a:	444b      	add	r3, r9
   1165c:	44c8      	add	r8, r9
   1165e:	9306      	str	r3, [sp, #24]
   11660:	2101      	movs	r1, #1
   11662:	4620      	mov	r0, r4
   11664:	f7fb fcd4 	bl	d010 <__i2b>
   11668:	4606      	mov	r6, r0
   1166a:	e00c      	b.n	11686 <_dtoa_r+0x506>
   1166c:	4b7d      	ldr	r3, [pc, #500]	; (11864 <_dtoa_r+0x6e4>)
   1166e:	9300      	str	r3, [sp, #0]
   11670:	9800      	ldr	r0, [sp, #0]
   11672:	b00f      	add	sp, #60	; 0x3c
   11674:	ecbd 8b02 	vpop	{d8}
   11678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1167c:	9b06      	ldr	r3, [sp, #24]
   1167e:	f8dd a020 	ldr.w	sl, [sp, #32]
   11682:	9e07      	ldr	r6, [sp, #28]
   11684:	9309      	str	r3, [sp, #36]	; 0x24
   11686:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11688:	b16b      	cbz	r3, 116a6 <_dtoa_r+0x526>
   1168a:	f1b8 0f00 	cmp.w	r8, #0
   1168e:	dd0a      	ble.n	116a6 <_dtoa_r+0x526>
   11690:	4543      	cmp	r3, r8
   11692:	9906      	ldr	r1, [sp, #24]
   11694:	461a      	mov	r2, r3
   11696:	bfa8      	it	ge
   11698:	4642      	movge	r2, r8
   1169a:	1a89      	subs	r1, r1, r2
   1169c:	1a9b      	subs	r3, r3, r2
   1169e:	9106      	str	r1, [sp, #24]
   116a0:	9309      	str	r3, [sp, #36]	; 0x24
   116a2:	eba8 0802 	sub.w	r8, r8, r2
   116a6:	9b08      	ldr	r3, [sp, #32]
   116a8:	b163      	cbz	r3, 116c4 <_dtoa_r+0x544>
   116aa:	9b07      	ldr	r3, [sp, #28]
   116ac:	2b00      	cmp	r3, #0
   116ae:	f000 82a7 	beq.w	11c00 <_dtoa_r+0xa80>
   116b2:	f1ba 0f00 	cmp.w	sl, #0
   116b6:	f300 8204 	bgt.w	11ac2 <_dtoa_r+0x942>
   116ba:	9b08      	ldr	r3, [sp, #32]
   116bc:	ebb3 020a 	subs.w	r2, r3, sl
   116c0:	f040 82ff 	bne.w	11cc2 <_dtoa_r+0xb42>
   116c4:	2101      	movs	r1, #1
   116c6:	4620      	mov	r0, r4
   116c8:	f7fb fca2 	bl	d010 <__i2b>
   116cc:	2f00      	cmp	r7, #0
   116ce:	4682      	mov	sl, r0
   116d0:	f300 80af 	bgt.w	11832 <_dtoa_r+0x6b2>
   116d4:	9b01      	ldr	r3, [sp, #4]
   116d6:	2b01      	cmp	r3, #1
   116d8:	f340 8187 	ble.w	119ea <_dtoa_r+0x86a>
   116dc:	2300      	movs	r3, #0
   116de:	9308      	str	r3, [sp, #32]
   116e0:	2001      	movs	r0, #1
   116e2:	2f00      	cmp	r7, #0
   116e4:	f040 80b1 	bne.w	1184a <_dtoa_r+0x6ca>
   116e8:	4440      	add	r0, r8
   116ea:	f010 001f 	ands.w	r0, r0, #31
   116ee:	f000 817a 	beq.w	119e6 <_dtoa_r+0x866>
   116f2:	f1c0 0220 	rsb	r2, r0, #32
   116f6:	2a04      	cmp	r2, #4
   116f8:	f300 8088 	bgt.w	1180c <_dtoa_r+0x68c>
   116fc:	f040 81f6 	bne.w	11aec <_dtoa_r+0x96c>
   11700:	9b06      	ldr	r3, [sp, #24]
   11702:	2b00      	cmp	r3, #0
   11704:	dd05      	ble.n	11712 <_dtoa_r+0x592>
   11706:	4629      	mov	r1, r5
   11708:	461a      	mov	r2, r3
   1170a:	4620      	mov	r0, r4
   1170c:	f7fb fdbc 	bl	d288 <__lshift>
   11710:	4605      	mov	r5, r0
   11712:	f1b8 0f00 	cmp.w	r8, #0
   11716:	dd05      	ble.n	11724 <_dtoa_r+0x5a4>
   11718:	4651      	mov	r1, sl
   1171a:	4642      	mov	r2, r8
   1171c:	4620      	mov	r0, r4
   1171e:	f7fb fdb3 	bl	d288 <__lshift>
   11722:	4682      	mov	sl, r0
   11724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11726:	2b00      	cmp	r3, #0
   11728:	f040 813f 	bne.w	119aa <_dtoa_r+0x82a>
   1172c:	f1b9 0f00 	cmp.w	r9, #0
   11730:	f340 8125 	ble.w	1197e <_dtoa_r+0x7fe>
   11734:	9b07      	ldr	r3, [sp, #28]
   11736:	2b00      	cmp	r3, #0
   11738:	f040 80a3 	bne.w	11882 <_dtoa_r+0x702>
   1173c:	9b04      	ldr	r3, [sp, #16]
   1173e:	3301      	adds	r3, #1
   11740:	9304      	str	r3, [sp, #16]
   11742:	f8dd 8000 	ldr.w	r8, [sp]
   11746:	2701      	movs	r7, #1
   11748:	e007      	b.n	1175a <_dtoa_r+0x5da>
   1174a:	4629      	mov	r1, r5
   1174c:	2300      	movs	r3, #0
   1174e:	220a      	movs	r2, #10
   11750:	4620      	mov	r0, r4
   11752:	f7fb fb63 	bl	ce1c <__multadd>
   11756:	3701      	adds	r7, #1
   11758:	4605      	mov	r5, r0
   1175a:	4651      	mov	r1, sl
   1175c:	4628      	mov	r0, r5
   1175e:	f7ff fc7b 	bl	11058 <quorem>
   11762:	45b9      	cmp	r9, r7
   11764:	f100 0030 	add.w	r0, r0, #48	; 0x30
   11768:	f808 0b01 	strb.w	r0, [r8], #1
   1176c:	dced      	bgt.n	1174a <_dtoa_r+0x5ca>
   1176e:	f1b9 0f00 	cmp.w	r9, #0
   11772:	9a00      	ldr	r2, [sp, #0]
   11774:	bfcc      	ite	gt
   11776:	46cb      	movgt	fp, r9
   11778:	f04f 0b01 	movle.w	fp, #1
   1177c:	4603      	mov	r3, r0
   1177e:	4493      	add	fp, r2
   11780:	2700      	movs	r7, #0
   11782:	4629      	mov	r1, r5
   11784:	2201      	movs	r2, #1
   11786:	4620      	mov	r0, r4
   11788:	9301      	str	r3, [sp, #4]
   1178a:	f7fb fd7d 	bl	d288 <__lshift>
   1178e:	4651      	mov	r1, sl
   11790:	4605      	mov	r5, r0
   11792:	f7fb fdf1 	bl	d378 <__mcmp>
   11796:	2800      	cmp	r0, #0
   11798:	f340 81af 	ble.w	11afa <_dtoa_r+0x97a>
   1179c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   117a0:	9a00      	ldr	r2, [sp, #0]
   117a2:	f10b 3bff 	add.w	fp, fp, #4294967295
   117a6:	e004      	b.n	117b2 <_dtoa_r+0x632>
   117a8:	455a      	cmp	r2, fp
   117aa:	f000 81b1 	beq.w	11b10 <_dtoa_r+0x990>
   117ae:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   117b2:	2b39      	cmp	r3, #57	; 0x39
   117b4:	f10b 0901 	add.w	r9, fp, #1
   117b8:	d0f6      	beq.n	117a8 <_dtoa_r+0x628>
   117ba:	3301      	adds	r3, #1
   117bc:	f88b 3000 	strb.w	r3, [fp]
   117c0:	4651      	mov	r1, sl
   117c2:	4620      	mov	r0, r4
   117c4:	f7fb fb20 	bl	ce08 <_Bfree>
   117c8:	b156      	cbz	r6, 117e0 <_dtoa_r+0x660>
   117ca:	b12f      	cbz	r7, 117d8 <_dtoa_r+0x658>
   117cc:	42b7      	cmp	r7, r6
   117ce:	d003      	beq.n	117d8 <_dtoa_r+0x658>
   117d0:	4639      	mov	r1, r7
   117d2:	4620      	mov	r0, r4
   117d4:	f7fb fb18 	bl	ce08 <_Bfree>
   117d8:	4631      	mov	r1, r6
   117da:	4620      	mov	r0, r4
   117dc:	f7fb fb14 	bl	ce08 <_Bfree>
   117e0:	4629      	mov	r1, r5
   117e2:	4620      	mov	r0, r4
   117e4:	f7fb fb10 	bl	ce08 <_Bfree>
   117e8:	2300      	movs	r3, #0
   117ea:	f889 3000 	strb.w	r3, [r9]
   117ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   117f2:	601a      	str	r2, [r3, #0]
   117f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   117f6:	2b00      	cmp	r3, #0
   117f8:	f43f acfe 	beq.w	111f8 <_dtoa_r+0x78>
   117fc:	9800      	ldr	r0, [sp, #0]
   117fe:	f8c3 9000 	str.w	r9, [r3]
   11802:	b00f      	add	sp, #60	; 0x3c
   11804:	ecbd 8b02 	vpop	{d8}
   11808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1180c:	f1c0 001c 	rsb	r0, r0, #28
   11810:	9b06      	ldr	r3, [sp, #24]
   11812:	4403      	add	r3, r0
   11814:	9306      	str	r3, [sp, #24]
   11816:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11818:	4403      	add	r3, r0
   1181a:	9309      	str	r3, [sp, #36]	; 0x24
   1181c:	4480      	add	r8, r0
   1181e:	e76f      	b.n	11700 <_dtoa_r+0x580>
   11820:	f1c2 0220 	rsb	r2, r2, #32
   11824:	fa06 f202 	lsl.w	r2, r6, r2
   11828:	ee07 2a10 	vmov	s14, r2
   1182c:	e509      	b.n	11242 <_dtoa_r+0xc2>
   1182e:	2601      	movs	r6, #1
   11830:	e563      	b.n	112fa <_dtoa_r+0x17a>
   11832:	4601      	mov	r1, r0
   11834:	463a      	mov	r2, r7
   11836:	4620      	mov	r0, r4
   11838:	f7fb fcc6 	bl	d1c8 <__pow5mult>
   1183c:	9b01      	ldr	r3, [sp, #4]
   1183e:	2b01      	cmp	r3, #1
   11840:	4682      	mov	sl, r0
   11842:	f340 81c5 	ble.w	11bd0 <_dtoa_r+0xa50>
   11846:	2300      	movs	r3, #0
   11848:	9308      	str	r3, [sp, #32]
   1184a:	f8da 2010 	ldr.w	r2, [sl, #16]
   1184e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   11852:	6910      	ldr	r0, [r2, #16]
   11854:	f7fb fb8c 	bl	cf70 <__hi0bits>
   11858:	f1c0 0020 	rsb	r0, r0, #32
   1185c:	e744      	b.n	116e8 <_dtoa_r+0x568>
   1185e:	bf00      	nop
   11860:	200002a8 	.word	0x200002a8
   11864:	20000c64 	.word	0x20000c64
   11868:	4631      	mov	r1, r6
   1186a:	2300      	movs	r3, #0
   1186c:	220a      	movs	r2, #10
   1186e:	4620      	mov	r0, r4
   11870:	f7fb fad4 	bl	ce1c <__multadd>
   11874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11876:	2b00      	cmp	r3, #0
   11878:	4606      	mov	r6, r0
   1187a:	f340 82ce 	ble.w	11e1a <_dtoa_r+0xc9a>
   1187e:	9704      	str	r7, [sp, #16]
   11880:	4699      	mov	r9, r3
   11882:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11884:	2b00      	cmp	r3, #0
   11886:	dd05      	ble.n	11894 <_dtoa_r+0x714>
   11888:	4631      	mov	r1, r6
   1188a:	461a      	mov	r2, r3
   1188c:	4620      	mov	r0, r4
   1188e:	f7fb fcfb 	bl	d288 <__lshift>
   11892:	4606      	mov	r6, r0
   11894:	9b08      	ldr	r3, [sp, #32]
   11896:	2b00      	cmp	r3, #0
   11898:	f040 81eb 	bne.w	11c72 <_dtoa_r+0xaf2>
   1189c:	46b0      	mov	r8, r6
   1189e:	9b02      	ldr	r3, [sp, #8]
   118a0:	9f00      	ldr	r7, [sp, #0]
   118a2:	f003 0201 	and.w	r2, r3, #1
   118a6:	1e7b      	subs	r3, r7, #1
   118a8:	444b      	add	r3, r9
   118aa:	9308      	str	r3, [sp, #32]
   118ac:	9b01      	ldr	r3, [sp, #4]
   118ae:	920a      	str	r2, [sp, #40]	; 0x28
   118b0:	4313      	orrs	r3, r2
   118b2:	9309      	str	r3, [sp, #36]	; 0x24
   118b4:	4651      	mov	r1, sl
   118b6:	4628      	mov	r0, r5
   118b8:	f7ff fbce 	bl	11058 <quorem>
   118bc:	4631      	mov	r1, r6
   118be:	4683      	mov	fp, r0
   118c0:	4628      	mov	r0, r5
   118c2:	f7fb fd59 	bl	d378 <__mcmp>
   118c6:	4642      	mov	r2, r8
   118c8:	4651      	mov	r1, sl
   118ca:	4681      	mov	r9, r0
   118cc:	4620      	mov	r0, r4
   118ce:	f7fb fd75 	bl	d3bc <__mdiff>
   118d2:	68c2      	ldr	r2, [r0, #12]
   118d4:	4601      	mov	r1, r0
   118d6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   118da:	2a00      	cmp	r2, #0
   118dc:	d142      	bne.n	11964 <_dtoa_r+0x7e4>
   118de:	e9cd 0306 	strd	r0, r3, [sp, #24]
   118e2:	4628      	mov	r0, r5
   118e4:	f7fb fd48 	bl	d378 <__mcmp>
   118e8:	9906      	ldr	r1, [sp, #24]
   118ea:	9002      	str	r0, [sp, #8]
   118ec:	4620      	mov	r0, r4
   118ee:	f7fb fa8b 	bl	ce08 <_Bfree>
   118f2:	9a02      	ldr	r2, [sp, #8]
   118f4:	9b07      	ldr	r3, [sp, #28]
   118f6:	b91a      	cbnz	r2, 11900 <_dtoa_r+0x780>
   118f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   118fa:	2900      	cmp	r1, #0
   118fc:	f000 827e 	beq.w	11dfc <_dtoa_r+0xc7c>
   11900:	f1b9 0f00 	cmp.w	r9, #0
   11904:	f2c0 8183 	blt.w	11c0e <_dtoa_r+0xa8e>
   11908:	9901      	ldr	r1, [sp, #4]
   1190a:	ea49 0901 	orr.w	r9, r9, r1
   1190e:	990a      	ldr	r1, [sp, #40]	; 0x28
   11910:	ea51 0909 	orrs.w	r9, r1, r9
   11914:	f000 817b 	beq.w	11c0e <_dtoa_r+0xa8e>
   11918:	2a00      	cmp	r2, #0
   1191a:	f300 81c6 	bgt.w	11caa <_dtoa_r+0xb2a>
   1191e:	9a08      	ldr	r2, [sp, #32]
   11920:	703b      	strb	r3, [r7, #0]
   11922:	f107 0901 	add.w	r9, r7, #1
   11926:	4297      	cmp	r7, r2
   11928:	46cb      	mov	fp, r9
   1192a:	f000 81c4 	beq.w	11cb6 <_dtoa_r+0xb36>
   1192e:	4629      	mov	r1, r5
   11930:	2300      	movs	r3, #0
   11932:	220a      	movs	r2, #10
   11934:	4620      	mov	r0, r4
   11936:	f7fb fa71 	bl	ce1c <__multadd>
   1193a:	4546      	cmp	r6, r8
   1193c:	4605      	mov	r5, r0
   1193e:	4631      	mov	r1, r6
   11940:	f04f 0300 	mov.w	r3, #0
   11944:	f04f 020a 	mov.w	r2, #10
   11948:	4620      	mov	r0, r4
   1194a:	d012      	beq.n	11972 <_dtoa_r+0x7f2>
   1194c:	f7fb fa66 	bl	ce1c <__multadd>
   11950:	4641      	mov	r1, r8
   11952:	4606      	mov	r6, r0
   11954:	2300      	movs	r3, #0
   11956:	220a      	movs	r2, #10
   11958:	4620      	mov	r0, r4
   1195a:	f7fb fa5f 	bl	ce1c <__multadd>
   1195e:	464f      	mov	r7, r9
   11960:	4680      	mov	r8, r0
   11962:	e7a7      	b.n	118b4 <_dtoa_r+0x734>
   11964:	4620      	mov	r0, r4
   11966:	9302      	str	r3, [sp, #8]
   11968:	f7fb fa4e 	bl	ce08 <_Bfree>
   1196c:	9b02      	ldr	r3, [sp, #8]
   1196e:	2201      	movs	r2, #1
   11970:	e7c6      	b.n	11900 <_dtoa_r+0x780>
   11972:	f7fb fa53 	bl	ce1c <__multadd>
   11976:	464f      	mov	r7, r9
   11978:	4606      	mov	r6, r0
   1197a:	4680      	mov	r8, r0
   1197c:	e79a      	b.n	118b4 <_dtoa_r+0x734>
   1197e:	9b01      	ldr	r3, [sp, #4]
   11980:	2b02      	cmp	r3, #2
   11982:	dc71      	bgt.n	11a68 <_dtoa_r+0x8e8>
   11984:	9b07      	ldr	r3, [sp, #28]
   11986:	2b00      	cmp	r3, #0
   11988:	f47f af7b 	bne.w	11882 <_dtoa_r+0x702>
   1198c:	9b04      	ldr	r3, [sp, #16]
   1198e:	4651      	mov	r1, sl
   11990:	3301      	adds	r3, #1
   11992:	4628      	mov	r0, r5
   11994:	9304      	str	r3, [sp, #16]
   11996:	f7ff fb5f 	bl	11058 <quorem>
   1199a:	f8dd b000 	ldr.w	fp, [sp]
   1199e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   119a2:	f80b 3b01 	strb.w	r3, [fp], #1
   119a6:	2700      	movs	r7, #0
   119a8:	e6eb      	b.n	11782 <_dtoa_r+0x602>
   119aa:	4651      	mov	r1, sl
   119ac:	4628      	mov	r0, r5
   119ae:	f7fb fce3 	bl	d378 <__mcmp>
   119b2:	2800      	cmp	r0, #0
   119b4:	f6bf aeba 	bge.w	1172c <_dtoa_r+0x5ac>
   119b8:	4629      	mov	r1, r5
   119ba:	2300      	movs	r3, #0
   119bc:	220a      	movs	r2, #10
   119be:	4620      	mov	r0, r4
   119c0:	f7fb fa2c 	bl	ce1c <__multadd>
   119c4:	9b04      	ldr	r3, [sp, #16]
   119c6:	1e5f      	subs	r7, r3, #1
   119c8:	9b07      	ldr	r3, [sp, #28]
   119ca:	4605      	mov	r5, r0
   119cc:	2b00      	cmp	r3, #0
   119ce:	f47f af4b 	bne.w	11868 <_dtoa_r+0x6e8>
   119d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   119d4:	2b00      	cmp	r3, #0
   119d6:	f340 8218 	ble.w	11e0a <_dtoa_r+0xc8a>
   119da:	4699      	mov	r9, r3
   119dc:	e6b1      	b.n	11742 <_dtoa_r+0x5c2>
   119de:	4bbc      	ldr	r3, [pc, #752]	; (11cd0 <_dtoa_r+0xb50>)
   119e0:	9300      	str	r3, [sp, #0]
   119e2:	3303      	adds	r3, #3
   119e4:	e4a4      	b.n	11330 <_dtoa_r+0x1b0>
   119e6:	201c      	movs	r0, #28
   119e8:	e712      	b.n	11810 <_dtoa_r+0x690>
   119ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   119ee:	2800      	cmp	r0, #0
   119f0:	f47f ae74 	bne.w	116dc <_dtoa_r+0x55c>
   119f4:	f3c1 0213 	ubfx	r2, r1, #0, #20
   119f8:	2a00      	cmp	r2, #0
   119fa:	f000 80f4 	beq.w	11be6 <_dtoa_r+0xa66>
   119fe:	9b02      	ldr	r3, [sp, #8]
   11a00:	9308      	str	r3, [sp, #32]
   11a02:	e66d      	b.n	116e0 <_dtoa_r+0x560>
   11a04:	2301      	movs	r3, #1
   11a06:	9307      	str	r3, [sp, #28]
   11a08:	9b04      	ldr	r3, [sp, #16]
   11a0a:	445b      	add	r3, fp
   11a0c:	f103 0901 	add.w	r9, r3, #1
   11a10:	f1b9 0f01 	cmp.w	r9, #1
   11a14:	46cc      	mov	ip, r9
   11a16:	930b      	str	r3, [sp, #44]	; 0x2c
   11a18:	bfb8      	it	lt
   11a1a:	f04f 0c01 	movlt.w	ip, #1
   11a1e:	2100      	movs	r1, #0
   11a20:	f1bc 0f17 	cmp.w	ip, #23
   11a24:	63e1      	str	r1, [r4, #60]	; 0x3c
   11a26:	f77f acbc 	ble.w	113a2 <_dtoa_r+0x222>
   11a2a:	2001      	movs	r0, #1
   11a2c:	2204      	movs	r2, #4
   11a2e:	0052      	lsls	r2, r2, #1
   11a30:	f102 0314 	add.w	r3, r2, #20
   11a34:	4563      	cmp	r3, ip
   11a36:	4601      	mov	r1, r0
   11a38:	f100 0001 	add.w	r0, r0, #1
   11a3c:	d9f7      	bls.n	11a2e <_dtoa_r+0x8ae>
   11a3e:	63e1      	str	r1, [r4, #60]	; 0x3c
   11a40:	e4af      	b.n	113a2 <_dtoa_r+0x222>
   11a42:	2301      	movs	r3, #1
   11a44:	9307      	str	r3, [sp, #28]
   11a46:	f1bb 0f00 	cmp.w	fp, #0
   11a4a:	dd52      	ble.n	11af2 <_dtoa_r+0x972>
   11a4c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   11a50:	46d9      	mov	r9, fp
   11a52:	46dc      	mov	ip, fp
   11a54:	e7e3      	b.n	11a1e <_dtoa_r+0x89e>
   11a56:	2300      	movs	r3, #0
   11a58:	9307      	str	r3, [sp, #28]
   11a5a:	e7d5      	b.n	11a08 <_dtoa_r+0x888>
   11a5c:	2300      	movs	r3, #0
   11a5e:	9307      	str	r3, [sp, #28]
   11a60:	e7f1      	b.n	11a46 <_dtoa_r+0x8c6>
   11a62:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11a66:	9704      	str	r7, [sp, #16]
   11a68:	f1b9 0f00 	cmp.w	r9, #0
   11a6c:	f47f ada1 	bne.w	115b2 <_dtoa_r+0x432>
   11a70:	4651      	mov	r1, sl
   11a72:	464b      	mov	r3, r9
   11a74:	2205      	movs	r2, #5
   11a76:	4620      	mov	r0, r4
   11a78:	f7fb f9d0 	bl	ce1c <__multadd>
   11a7c:	4601      	mov	r1, r0
   11a7e:	4682      	mov	sl, r0
   11a80:	4628      	mov	r0, r5
   11a82:	f7fb fc79 	bl	d378 <__mcmp>
   11a86:	2800      	cmp	r0, #0
   11a88:	f77f ad93 	ble.w	115b2 <_dtoa_r+0x432>
   11a8c:	9b04      	ldr	r3, [sp, #16]
   11a8e:	f103 0b01 	add.w	fp, r3, #1
   11a92:	9b00      	ldr	r3, [sp, #0]
   11a94:	2231      	movs	r2, #49	; 0x31
   11a96:	4698      	mov	r8, r3
   11a98:	f803 2b01 	strb.w	r2, [r3], #1
   11a9c:	9300      	str	r3, [sp, #0]
   11a9e:	4651      	mov	r1, sl
   11aa0:	4620      	mov	r0, r4
   11aa2:	f7fb f9b1 	bl	ce08 <_Bfree>
   11aa6:	f10b 0301 	add.w	r3, fp, #1
   11aaa:	f8dd 9000 	ldr.w	r9, [sp]
   11aae:	9304      	str	r3, [sp, #16]
   11ab0:	f8cd 8000 	str.w	r8, [sp]
   11ab4:	2e00      	cmp	r6, #0
   11ab6:	f47f ae8f 	bne.w	117d8 <_dtoa_r+0x658>
   11aba:	e691      	b.n	117e0 <_dtoa_r+0x660>
   11abc:	eba3 0a0a 	sub.w	sl, r3, sl
   11ac0:	e5c5      	b.n	1164e <_dtoa_r+0x4ce>
   11ac2:	4631      	mov	r1, r6
   11ac4:	4652      	mov	r2, sl
   11ac6:	4620      	mov	r0, r4
   11ac8:	f7fb fb7e 	bl	d1c8 <__pow5mult>
   11acc:	462a      	mov	r2, r5
   11ace:	4601      	mov	r1, r0
   11ad0:	4606      	mov	r6, r0
   11ad2:	4620      	mov	r0, r4
   11ad4:	f7fb faca 	bl	d06c <__multiply>
   11ad8:	4629      	mov	r1, r5
   11ada:	4605      	mov	r5, r0
   11adc:	4620      	mov	r0, r4
   11ade:	f7fb f993 	bl	ce08 <_Bfree>
   11ae2:	e5ea      	b.n	116ba <_dtoa_r+0x53a>
   11ae4:	2002      	movs	r0, #2
   11ae6:	eeb0 5b48 	vmov.f64	d5, d8
   11aea:	e481      	b.n	113f0 <_dtoa_r+0x270>
   11aec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   11af0:	e68e      	b.n	11810 <_dtoa_r+0x690>
   11af2:	f04f 0b01 	mov.w	fp, #1
   11af6:	46d9      	mov	r9, fp
   11af8:	e44f      	b.n	1139a <_dtoa_r+0x21a>
   11afa:	d103      	bne.n	11b04 <_dtoa_r+0x984>
   11afc:	9b01      	ldr	r3, [sp, #4]
   11afe:	07db      	lsls	r3, r3, #31
   11b00:	f53f ae4c 	bmi.w	1179c <_dtoa_r+0x61c>
   11b04:	46d9      	mov	r9, fp
   11b06:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11b0a:	2b30      	cmp	r3, #48	; 0x30
   11b0c:	d0fa      	beq.n	11b04 <_dtoa_r+0x984>
   11b0e:	e657      	b.n	117c0 <_dtoa_r+0x640>
   11b10:	9b04      	ldr	r3, [sp, #16]
   11b12:	9a00      	ldr	r2, [sp, #0]
   11b14:	3301      	adds	r3, #1
   11b16:	9304      	str	r3, [sp, #16]
   11b18:	2331      	movs	r3, #49	; 0x31
   11b1a:	7013      	strb	r3, [r2, #0]
   11b1c:	e650      	b.n	117c0 <_dtoa_r+0x640>
   11b1e:	f1ba 0f00 	cmp.w	sl, #0
   11b22:	f000 8123 	beq.w	11d6c <_dtoa_r+0xbec>
   11b26:	f202 4233 	addw	r2, r2, #1075	; 0x433
   11b2a:	9b06      	ldr	r3, [sp, #24]
   11b2c:	9309      	str	r3, [sp, #36]	; 0x24
   11b2e:	4413      	add	r3, r2
   11b30:	f8dd a020 	ldr.w	sl, [sp, #32]
   11b34:	9306      	str	r3, [sp, #24]
   11b36:	4490      	add	r8, r2
   11b38:	e592      	b.n	11660 <_dtoa_r+0x4e0>
   11b3a:	ee07 0a90 	vmov	s15, r0
   11b3e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   11b42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   11b46:	eea6 5b07 	vfma.f64	d5, d6, d7
   11b4a:	ee15 2a90 	vmov	r2, s11
   11b4e:	ec51 0b15 	vmov	r0, r1, d5
   11b52:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   11b56:	ec41 0b15 	vmov	d5, r0, r1
   11b5a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   11b5e:	ee36 7b47 	vsub.f64	d7, d6, d7
   11b62:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11b6a:	f300 8137 	bgt.w	11ddc <_dtoa_r+0xc5c>
   11b6e:	eeb1 5b45 	vneg.f64	d5, d5
   11b72:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11b7a:	f57f acfb 	bpl.w	11574 <_dtoa_r+0x3f4>
   11b7e:	f04f 0a00 	mov.w	sl, #0
   11b82:	4656      	mov	r6, sl
   11b84:	e515      	b.n	115b2 <_dtoa_r+0x432>
   11b86:	f000 80f5 	beq.w	11d74 <_dtoa_r+0xbf4>
   11b8a:	9b04      	ldr	r3, [sp, #16]
   11b8c:	4951      	ldr	r1, [pc, #324]	; (11cd4 <_dtoa_r+0xb54>)
   11b8e:	425a      	negs	r2, r3
   11b90:	f002 000f 	and.w	r0, r2, #15
   11b94:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   11b98:	ed91 6b00 	vldr	d6, [r1]
   11b9c:	1112      	asrs	r2, r2, #4
   11b9e:	ee28 6b06 	vmul.f64	d6, d8, d6
   11ba2:	f000 8142 	beq.w	11e2a <_dtoa_r+0xcaa>
   11ba6:	eeb0 7b46 	vmov.f64	d7, d6
   11baa:	494b      	ldr	r1, [pc, #300]	; (11cd8 <_dtoa_r+0xb58>)
   11bac:	2600      	movs	r6, #0
   11bae:	2002      	movs	r0, #2
   11bb0:	07d3      	lsls	r3, r2, #31
   11bb2:	d505      	bpl.n	11bc0 <_dtoa_r+0xa40>
   11bb4:	ed91 5b00 	vldr	d5, [r1]
   11bb8:	3001      	adds	r0, #1
   11bba:	2601      	movs	r6, #1
   11bbc:	ee27 7b05 	vmul.f64	d7, d7, d5
   11bc0:	1052      	asrs	r2, r2, #1
   11bc2:	f101 0108 	add.w	r1, r1, #8
   11bc6:	d1f3      	bne.n	11bb0 <_dtoa_r+0xa30>
   11bc8:	2e00      	cmp	r6, #0
   11bca:	fe06 6b07 	vseleq.f64	d6, d6, d7
   11bce:	e41e      	b.n	1140e <_dtoa_r+0x28e>
   11bd0:	9b02      	ldr	r3, [sp, #8]
   11bd2:	2b00      	cmp	r3, #0
   11bd4:	f47f ae37 	bne.w	11846 <_dtoa_r+0x6c6>
   11bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11bdc:	f3c1 0213 	ubfx	r2, r1, #0, #20
   11be0:	2a00      	cmp	r2, #0
   11be2:	f040 8137 	bne.w	11e54 <_dtoa_r+0xcd4>
   11be6:	4a3d      	ldr	r2, [pc, #244]	; (11cdc <_dtoa_r+0xb5c>)
   11be8:	400a      	ands	r2, r1
   11bea:	2a00      	cmp	r2, #0
   11bec:	f000 80fa 	beq.w	11de4 <_dtoa_r+0xc64>
   11bf0:	9b06      	ldr	r3, [sp, #24]
   11bf2:	3301      	adds	r3, #1
   11bf4:	9306      	str	r3, [sp, #24]
   11bf6:	2301      	movs	r3, #1
   11bf8:	f108 0801 	add.w	r8, r8, #1
   11bfc:	9308      	str	r3, [sp, #32]
   11bfe:	e56f      	b.n	116e0 <_dtoa_r+0x560>
   11c00:	4629      	mov	r1, r5
   11c02:	9a08      	ldr	r2, [sp, #32]
   11c04:	4620      	mov	r0, r4
   11c06:	f7fb fadf 	bl	d1c8 <__pow5mult>
   11c0a:	4605      	mov	r5, r0
   11c0c:	e55a      	b.n	116c4 <_dtoa_r+0x544>
   11c0e:	2a00      	cmp	r2, #0
   11c10:	dd12      	ble.n	11c38 <_dtoa_r+0xab8>
   11c12:	4629      	mov	r1, r5
   11c14:	2201      	movs	r2, #1
   11c16:	4620      	mov	r0, r4
   11c18:	9301      	str	r3, [sp, #4]
   11c1a:	f7fb fb35 	bl	d288 <__lshift>
   11c1e:	4651      	mov	r1, sl
   11c20:	4605      	mov	r5, r0
   11c22:	f7fb fba9 	bl	d378 <__mcmp>
   11c26:	2800      	cmp	r0, #0
   11c28:	9b01      	ldr	r3, [sp, #4]
   11c2a:	f340 80e1 	ble.w	11df0 <_dtoa_r+0xc70>
   11c2e:	2b39      	cmp	r3, #57	; 0x39
   11c30:	f000 80ca 	beq.w	11dc8 <_dtoa_r+0xc48>
   11c34:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11c38:	46b9      	mov	r9, r7
   11c3a:	f809 3b01 	strb.w	r3, [r9], #1
   11c3e:	9b04      	ldr	r3, [sp, #16]
   11c40:	3301      	adds	r3, #1
   11c42:	4637      	mov	r7, r6
   11c44:	9304      	str	r3, [sp, #16]
   11c46:	4646      	mov	r6, r8
   11c48:	e5ba      	b.n	117c0 <_dtoa_r+0x640>
   11c4a:	ee38 8b08 	vadd.f64	d8, d8, d8
   11c4e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   11c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11c56:	dc0a      	bgt.n	11c6e <_dtoa_r+0xaee>
   11c58:	eeb4 8b46 	vcmp.f64	d8, d6
   11c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11c60:	f47f acdc 	bne.w	1161c <_dtoa_r+0x49c>
   11c64:	ee17 3a10 	vmov	r3, s14
   11c68:	07d8      	lsls	r0, r3, #31
   11c6a:	f57f acd7 	bpl.w	1161c <_dtoa_r+0x49c>
   11c6e:	9a00      	ldr	r2, [sp, #0]
   11c70:	e454      	b.n	1151c <_dtoa_r+0x39c>
   11c72:	6871      	ldr	r1, [r6, #4]
   11c74:	4620      	mov	r0, r4
   11c76:	f7fb f8a1 	bl	cdbc <_Balloc>
   11c7a:	4607      	mov	r7, r0
   11c7c:	2800      	cmp	r0, #0
   11c7e:	f000 80de 	beq.w	11e3e <_dtoa_r+0xcbe>
   11c82:	6933      	ldr	r3, [r6, #16]
   11c84:	3302      	adds	r3, #2
   11c86:	009a      	lsls	r2, r3, #2
   11c88:	f106 010c 	add.w	r1, r6, #12
   11c8c:	300c      	adds	r0, #12
   11c8e:	f7f6 f9f1 	bl	8074 <memcpy>
   11c92:	4639      	mov	r1, r7
   11c94:	2201      	movs	r2, #1
   11c96:	4620      	mov	r0, r4
   11c98:	f7fb faf6 	bl	d288 <__lshift>
   11c9c:	4680      	mov	r8, r0
   11c9e:	e5fe      	b.n	1189e <_dtoa_r+0x71e>
   11ca0:	9b06      	ldr	r3, [sp, #24]
   11ca2:	eba3 0309 	sub.w	r3, r3, r9
   11ca6:	9309      	str	r3, [sp, #36]	; 0x24
   11ca8:	e4da      	b.n	11660 <_dtoa_r+0x4e0>
   11caa:	2b39      	cmp	r3, #57	; 0x39
   11cac:	f000 808c 	beq.w	11dc8 <_dtoa_r+0xc48>
   11cb0:	46b9      	mov	r9, r7
   11cb2:	3301      	adds	r3, #1
   11cb4:	e7c1      	b.n	11c3a <_dtoa_r+0xaba>
   11cb6:	9a04      	ldr	r2, [sp, #16]
   11cb8:	3201      	adds	r2, #1
   11cba:	4637      	mov	r7, r6
   11cbc:	9204      	str	r2, [sp, #16]
   11cbe:	4646      	mov	r6, r8
   11cc0:	e55f      	b.n	11782 <_dtoa_r+0x602>
   11cc2:	4629      	mov	r1, r5
   11cc4:	4620      	mov	r0, r4
   11cc6:	f7fb fa7f 	bl	d1c8 <__pow5mult>
   11cca:	4605      	mov	r5, r0
   11ccc:	e4fa      	b.n	116c4 <_dtoa_r+0x544>
   11cce:	bf00      	nop
   11cd0:	20000ba8 	.word	0x20000ba8
   11cd4:	200002a8 	.word	0x200002a8
   11cd8:	20000280 	.word	0x20000280
   11cdc:	7ff00000 	.word	0x7ff00000
   11ce0:	4b5e      	ldr	r3, [pc, #376]	; (11e5c <_dtoa_r+0xcdc>)
   11ce2:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   11ce6:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   11cea:	ed1c 3b02 	vldr	d3, [ip, #-8]
   11cee:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   11cf2:	ee36 7b47 	vsub.f64	d7, d6, d7
   11cf6:	ec41 0b16 	vmov	d6, r0, r1
   11cfa:	ee15 1a90 	vmov	r1, s11
   11cfe:	ee23 3b06 	vmul.f64	d3, d3, d6
   11d02:	9800      	ldr	r0, [sp, #0]
   11d04:	3130      	adds	r1, #48	; 0x30
   11d06:	2a01      	cmp	r2, #1
   11d08:	f800 1b01 	strb.w	r1, [r0], #1
   11d0c:	f000 8083 	beq.w	11e16 <_dtoa_r+0xc96>
   11d10:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11d14:	9b00      	ldr	r3, [sp, #0]
   11d16:	1899      	adds	r1, r3, r2
   11d18:	ee27 7b04 	vmul.f64	d7, d7, d4
   11d1c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11d20:	ee16 3a90 	vmov	r3, s13
   11d24:	3330      	adds	r3, #48	; 0x30
   11d26:	f800 3b01 	strb.w	r3, [r0], #1
   11d2a:	4281      	cmp	r1, r0
   11d2c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   11d30:	ee37 7b45 	vsub.f64	d7, d7, d5
   11d34:	d1f0      	bne.n	11d18 <_dtoa_r+0xb98>
   11d36:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   11d3a:	ee33 5b06 	vadd.f64	d5, d3, d6
   11d3e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11d46:	f53f abe3 	bmi.w	11510 <_dtoa_r+0x390>
   11d4a:	ee36 6b43 	vsub.f64	d6, d6, d3
   11d4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   11d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11d56:	f77f ac0d 	ble.w	11574 <_dtoa_r+0x3f4>
   11d5a:	4689      	mov	r9, r1
   11d5c:	3901      	subs	r1, #1
   11d5e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   11d62:	2b30      	cmp	r3, #48	; 0x30
   11d64:	d0f9      	beq.n	11d5a <_dtoa_r+0xbda>
   11d66:	1c73      	adds	r3, r6, #1
   11d68:	9304      	str	r3, [sp, #16]
   11d6a:	e539      	b.n	117e0 <_dtoa_r+0x660>
   11d6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11d6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   11d72:	e6da      	b.n	11b2a <_dtoa_r+0x9aa>
   11d74:	2002      	movs	r0, #2
   11d76:	eeb0 6b48 	vmov.f64	d6, d8
   11d7a:	f7ff bb48 	b.w	1140e <_dtoa_r+0x28e>
   11d7e:	f1b9 0f00 	cmp.w	r9, #0
   11d82:	f43f aeda 	beq.w	11b3a <_dtoa_r+0x9ba>
   11d86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d88:	2a00      	cmp	r2, #0
   11d8a:	f77f abf3 	ble.w	11574 <_dtoa_r+0x3f4>
   11d8e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11d92:	ee26 6b04 	vmul.f64	d6, d6, d4
   11d96:	3001      	adds	r0, #1
   11d98:	ee07 0a90 	vmov	s15, r0
   11d9c:	9b04      	ldr	r3, [sp, #16]
   11d9e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   11da2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   11da6:	eea6 7b05 	vfma.f64	d7, d6, d5
   11daa:	ee17 ca90 	vmov	ip, s15
   11dae:	ec51 0b17 	vmov	r0, r1, d7
   11db2:	1e5e      	subs	r6, r3, #1
   11db4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   11db8:	f7ff bb47 	b.w	1144a <_dtoa_r+0x2ca>
   11dbc:	9b04      	ldr	r3, [sp, #16]
   11dbe:	3301      	adds	r3, #1
   11dc0:	9304      	str	r3, [sp, #16]
   11dc2:	2331      	movs	r3, #49	; 0x31
   11dc4:	f7ff bbb1 	b.w	1152a <_dtoa_r+0x3aa>
   11dc8:	9b04      	ldr	r3, [sp, #16]
   11dca:	46bb      	mov	fp, r7
   11dcc:	3301      	adds	r3, #1
   11dce:	9304      	str	r3, [sp, #16]
   11dd0:	2339      	movs	r3, #57	; 0x39
   11dd2:	4637      	mov	r7, r6
   11dd4:	f80b 3b01 	strb.w	r3, [fp], #1
   11dd8:	4646      	mov	r6, r8
   11dda:	e4e1      	b.n	117a0 <_dtoa_r+0x620>
   11ddc:	f04f 0a00 	mov.w	sl, #0
   11de0:	4656      	mov	r6, sl
   11de2:	e653      	b.n	11a8c <_dtoa_r+0x90c>
   11de4:	9208      	str	r2, [sp, #32]
   11de6:	e47b      	b.n	116e0 <_dtoa_r+0x560>
   11de8:	1c73      	adds	r3, r6, #1
   11dea:	9304      	str	r3, [sp, #16]
   11dec:	4689      	mov	r9, r1
   11dee:	e4f7      	b.n	117e0 <_dtoa_r+0x660>
   11df0:	f47f af22 	bne.w	11c38 <_dtoa_r+0xab8>
   11df4:	07da      	lsls	r2, r3, #31
   11df6:	f57f af1f 	bpl.w	11c38 <_dtoa_r+0xab8>
   11dfa:	e718      	b.n	11c2e <_dtoa_r+0xaae>
   11dfc:	2b39      	cmp	r3, #57	; 0x39
   11dfe:	d0e3      	beq.n	11dc8 <_dtoa_r+0xc48>
   11e00:	f1b9 0f00 	cmp.w	r9, #0
   11e04:	f73f af16 	bgt.w	11c34 <_dtoa_r+0xab4>
   11e08:	e716      	b.n	11c38 <_dtoa_r+0xab8>
   11e0a:	9b01      	ldr	r3, [sp, #4]
   11e0c:	2b02      	cmp	r3, #2
   11e0e:	f73f ae28 	bgt.w	11a62 <_dtoa_r+0x8e2>
   11e12:	9704      	str	r7, [sp, #16]
   11e14:	e5ba      	b.n	1198c <_dtoa_r+0x80c>
   11e16:	4601      	mov	r1, r0
   11e18:	e78d      	b.n	11d36 <_dtoa_r+0xbb6>
   11e1a:	9b01      	ldr	r3, [sp, #4]
   11e1c:	2b02      	cmp	r3, #2
   11e1e:	f73f ae20 	bgt.w	11a62 <_dtoa_r+0x8e2>
   11e22:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11e26:	9704      	str	r7, [sp, #16]
   11e28:	e52b      	b.n	11882 <_dtoa_r+0x702>
   11e2a:	2002      	movs	r0, #2
   11e2c:	f7ff baef 	b.w	1140e <_dtoa_r+0x28e>
   11e30:	4b0b      	ldr	r3, [pc, #44]	; (11e60 <_dtoa_r+0xce0>)
   11e32:	480c      	ldr	r0, [pc, #48]	; (11e64 <_dtoa_r+0xce4>)
   11e34:	2200      	movs	r2, #0
   11e36:	f240 11af 	movw	r1, #431	; 0x1af
   11e3a:	f7ff f8b1 	bl	10fa0 <__assert_func>
   11e3e:	4b08      	ldr	r3, [pc, #32]	; (11e60 <_dtoa_r+0xce0>)
   11e40:	4808      	ldr	r0, [pc, #32]	; (11e64 <_dtoa_r+0xce4>)
   11e42:	463a      	mov	r2, r7
   11e44:	f240 21ef 	movw	r1, #751	; 0x2ef
   11e48:	f7ff f8aa 	bl	10fa0 <__assert_func>
   11e4c:	4b06      	ldr	r3, [pc, #24]	; (11e68 <_dtoa_r+0xce8>)
   11e4e:	9300      	str	r3, [sp, #0]
   11e50:	f7ff b9d2 	b.w	111f8 <_dtoa_r+0x78>
   11e54:	9b02      	ldr	r3, [sp, #8]
   11e56:	9308      	str	r3, [sp, #32]
   11e58:	e4f7      	b.n	1184a <_dtoa_r+0x6ca>
   11e5a:	bf00      	nop
   11e5c:	200002a8 	.word	0x200002a8
   11e60:	200008bc 	.word	0x200008bc
   11e64:	20000bac 	.word	0x20000bac
   11e68:	20000b9c 	.word	0x20000b9c

00011e6c <_strtoul_l.constprop.0>:
   11e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11e70:	4607      	mov	r7, r0
   11e72:	484c      	ldr	r0, [pc, #304]	; (11fa4 <_strtoul_l.constprop.0+0x138>)
   11e74:	460e      	mov	r6, r1
   11e76:	4635      	mov	r5, r6
   11e78:	f816 eb01 	ldrb.w	lr, [r6], #1
   11e7c:	f810 c00e 	ldrb.w	ip, [r0, lr]
   11e80:	f01c 0c08 	ands.w	ip, ip, #8
   11e84:	d1f7      	bne.n	11e76 <_strtoul_l.constprop.0+0xa>
   11e86:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   11e8a:	d05a      	beq.n	11f42 <_strtoul_l.constprop.0+0xd6>
   11e8c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   11e90:	bf03      	ittte	eq
   11e92:	f896 e000 	ldrbeq.w	lr, [r6]
   11e96:	4664      	moveq	r4, ip
   11e98:	1cae      	addeq	r6, r5, #2
   11e9a:	4664      	movne	r4, ip
   11e9c:	b15b      	cbz	r3, 11eb6 <_strtoul_l.constprop.0+0x4a>
   11e9e:	2b10      	cmp	r3, #16
   11ea0:	d054      	beq.n	11f4c <_strtoul_l.constprop.0+0xe0>
   11ea2:	f04f 38ff 	mov.w	r8, #4294967295
   11ea6:	fbb8 f8f3 	udiv	r8, r8, r3
   11eaa:	fb03 fa08 	mul.w	sl, r3, r8
   11eae:	ea6f 0a0a 	mvn.w	sl, sl
   11eb2:	4699      	mov	r9, r3
   11eb4:	e008      	b.n	11ec8 <_strtoul_l.constprop.0+0x5c>
   11eb6:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11eba:	d05a      	beq.n	11f72 <_strtoul_l.constprop.0+0x106>
   11ebc:	230a      	movs	r3, #10
   11ebe:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 11fa8 <_strtoul_l.constprop.0+0x13c>
   11ec2:	f04f 0a05 	mov.w	sl, #5
   11ec6:	4699      	mov	r9, r3
   11ec8:	2500      	movs	r5, #0
   11eca:	4628      	mov	r0, r5
   11ecc:	e005      	b.n	11eda <_strtoul_l.constprop.0+0x6e>
   11ece:	d02c      	beq.n	11f2a <_strtoul_l.constprop.0+0xbe>
   11ed0:	fb09 c000 	mla	r0, r9, r0, ip
   11ed4:	2501      	movs	r5, #1
   11ed6:	f816 eb01 	ldrb.w	lr, [r6], #1
   11eda:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   11ede:	f1bc 0f09 	cmp.w	ip, #9
   11ee2:	d906      	bls.n	11ef2 <_strtoul_l.constprop.0+0x86>
   11ee4:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   11ee8:	f1bc 0f19 	cmp.w	ip, #25
   11eec:	d80b      	bhi.n	11f06 <_strtoul_l.constprop.0+0x9a>
   11eee:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   11ef2:	4563      	cmp	r3, ip
   11ef4:	dd10      	ble.n	11f18 <_strtoul_l.constprop.0+0xac>
   11ef6:	f1b5 3fff 	cmp.w	r5, #4294967295
   11efa:	d0ec      	beq.n	11ed6 <_strtoul_l.constprop.0+0x6a>
   11efc:	4540      	cmp	r0, r8
   11efe:	d9e6      	bls.n	11ece <_strtoul_l.constprop.0+0x62>
   11f00:	f04f 35ff 	mov.w	r5, #4294967295
   11f04:	e7e7      	b.n	11ed6 <_strtoul_l.constprop.0+0x6a>
   11f06:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   11f0a:	f1bc 0f19 	cmp.w	ip, #25
   11f0e:	d803      	bhi.n	11f18 <_strtoul_l.constprop.0+0xac>
   11f10:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   11f14:	4563      	cmp	r3, ip
   11f16:	dcee      	bgt.n	11ef6 <_strtoul_l.constprop.0+0x8a>
   11f18:	1c6b      	adds	r3, r5, #1
   11f1a:	d00b      	beq.n	11f34 <_strtoul_l.constprop.0+0xc8>
   11f1c:	b104      	cbz	r4, 11f20 <_strtoul_l.constprop.0+0xb4>
   11f1e:	4240      	negs	r0, r0
   11f20:	b10a      	cbz	r2, 11f26 <_strtoul_l.constprop.0+0xba>
   11f22:	b965      	cbnz	r5, 11f3e <_strtoul_l.constprop.0+0xd2>
   11f24:	6011      	str	r1, [r2, #0]
   11f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11f2a:	45d4      	cmp	ip, sl
   11f2c:	ddd0      	ble.n	11ed0 <_strtoul_l.constprop.0+0x64>
   11f2e:	f04f 35ff 	mov.w	r5, #4294967295
   11f32:	e7d0      	b.n	11ed6 <_strtoul_l.constprop.0+0x6a>
   11f34:	2322      	movs	r3, #34	; 0x22
   11f36:	603b      	str	r3, [r7, #0]
   11f38:	4628      	mov	r0, r5
   11f3a:	2a00      	cmp	r2, #0
   11f3c:	d0f3      	beq.n	11f26 <_strtoul_l.constprop.0+0xba>
   11f3e:	1e71      	subs	r1, r6, #1
   11f40:	e7f0      	b.n	11f24 <_strtoul_l.constprop.0+0xb8>
   11f42:	f896 e000 	ldrb.w	lr, [r6]
   11f46:	2401      	movs	r4, #1
   11f48:	1cae      	adds	r6, r5, #2
   11f4a:	e7a7      	b.n	11e9c <_strtoul_l.constprop.0+0x30>
   11f4c:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11f50:	d121      	bne.n	11f96 <_strtoul_l.constprop.0+0x12a>
   11f52:	7830      	ldrb	r0, [r6, #0]
   11f54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   11f58:	2858      	cmp	r0, #88	; 0x58
   11f5a:	d116      	bne.n	11f8a <_strtoul_l.constprop.0+0x11e>
   11f5c:	f04f 0910 	mov.w	r9, #16
   11f60:	f896 e001 	ldrb.w	lr, [r6, #1]
   11f64:	f04f 0a0f 	mov.w	sl, #15
   11f68:	3602      	adds	r6, #2
   11f6a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11f6e:	464b      	mov	r3, r9
   11f70:	e7aa      	b.n	11ec8 <_strtoul_l.constprop.0+0x5c>
   11f72:	7833      	ldrb	r3, [r6, #0]
   11f74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11f78:	2b58      	cmp	r3, #88	; 0x58
   11f7a:	d0ef      	beq.n	11f5c <_strtoul_l.constprop.0+0xf0>
   11f7c:	2308      	movs	r3, #8
   11f7e:	f04f 0a07 	mov.w	sl, #7
   11f82:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   11f86:	4699      	mov	r9, r3
   11f88:	e79e      	b.n	11ec8 <_strtoul_l.constprop.0+0x5c>
   11f8a:	4699      	mov	r9, r3
   11f8c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11f90:	f04f 0a0f 	mov.w	sl, #15
   11f94:	e798      	b.n	11ec8 <_strtoul_l.constprop.0+0x5c>
   11f96:	f04f 0a0f 	mov.w	sl, #15
   11f9a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11f9e:	4699      	mov	r9, r3
   11fa0:	e792      	b.n	11ec8 <_strtoul_l.constprop.0+0x5c>
   11fa2:	bf00      	nop
   11fa4:	20000a99 	.word	0x20000a99
   11fa8:	19999999 	.word	0x19999999

00011fac <_strtoul_r>:
   11fac:	f7ff bf5e 	b.w	11e6c <_strtoul_l.constprop.0>

00011fb0 <_strtoll_l.constprop.0>:
   11fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb4:	b085      	sub	sp, #20
   11fb6:	461f      	mov	r7, r3
   11fb8:	4b57      	ldr	r3, [pc, #348]	; (12118 <_strtoll_l.constprop.0+0x168>)
   11fba:	9003      	str	r0, [sp, #12]
   11fbc:	468a      	mov	sl, r1
   11fbe:	9200      	str	r2, [sp, #0]
   11fc0:	460d      	mov	r5, r1
   11fc2:	462a      	mov	r2, r5
   11fc4:	f815 4b01 	ldrb.w	r4, [r5], #1
   11fc8:	5d1e      	ldrb	r6, [r3, r4]
   11fca:	f016 0608 	ands.w	r6, r6, #8
   11fce:	d1f8      	bne.n	11fc2 <_strtoll_l.constprop.0+0x12>
   11fd0:	2c2d      	cmp	r4, #45	; 0x2d
   11fd2:	d075      	beq.n	120c0 <_strtoll_l.constprop.0+0x110>
   11fd4:	2c2b      	cmp	r4, #43	; 0x2b
   11fd6:	bf05      	ittet	eq
   11fd8:	782c      	ldrbeq	r4, [r5, #0]
   11fda:	9602      	streq	r6, [sp, #8]
   11fdc:	9602      	strne	r6, [sp, #8]
   11fde:	1c95      	addeq	r5, r2, #2
   11fe0:	f04f 36ff 	mov.w	r6, #4294967295
   11fe4:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   11fe8:	b12f      	cbz	r7, 11ff6 <_strtoll_l.constprop.0+0x46>
   11fea:	2f10      	cmp	r7, #16
   11fec:	d06f      	beq.n	120ce <_strtoll_l.constprop.0+0x11e>
   11fee:	46b8      	mov	r8, r7
   11ff0:	ea4f 79e7 	mov.w	r9, r7, asr #31
   11ff4:	e005      	b.n	12002 <_strtoll_l.constprop.0+0x52>
   11ff6:	2c30      	cmp	r4, #48	; 0x30
   11ff8:	d074      	beq.n	120e4 <_strtoll_l.constprop.0+0x134>
   11ffa:	f04f 080a 	mov.w	r8, #10
   11ffe:	46b9      	mov	r9, r7
   12000:	4647      	mov	r7, r8
   12002:	4642      	mov	r2, r8
   12004:	464b      	mov	r3, r9
   12006:	4630      	mov	r0, r6
   12008:	4659      	mov	r1, fp
   1200a:	f7f7 fc49 	bl	98a0 <__aeabi_uldivmod>
   1200e:	2300      	movs	r3, #0
   12010:	9201      	str	r2, [sp, #4]
   12012:	4684      	mov	ip, r0
   12014:	460a      	mov	r2, r1
   12016:	4618      	mov	r0, r3
   12018:	4619      	mov	r1, r3
   1201a:	e011      	b.n	12040 <_strtoll_l.constprop.0+0x90>
   1201c:	428a      	cmp	r2, r1
   1201e:	bf08      	it	eq
   12020:	4584      	cmpeq	ip, r0
   12022:	d03d      	beq.n	120a0 <_strtoll_l.constprop.0+0xf0>
   12024:	fb00 f309 	mul.w	r3, r0, r9
   12028:	fb08 3301 	mla	r3, r8, r1, r3
   1202c:	fba0 0108 	umull	r0, r1, r0, r8
   12030:	440b      	add	r3, r1
   12032:	eb1e 0000 	adds.w	r0, lr, r0
   12036:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   1203a:	2301      	movs	r3, #1
   1203c:	f815 4b01 	ldrb.w	r4, [r5], #1
   12040:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   12044:	f1be 0f09 	cmp.w	lr, #9
   12048:	d906      	bls.n	12058 <_strtoll_l.constprop.0+0xa8>
   1204a:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   1204e:	f1be 0f19 	cmp.w	lr, #25
   12052:	d80c      	bhi.n	1206e <_strtoll_l.constprop.0+0xbe>
   12054:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   12058:	4577      	cmp	r7, lr
   1205a:	dd11      	ble.n	12080 <_strtoll_l.constprop.0+0xd0>
   1205c:	1c5c      	adds	r4, r3, #1
   1205e:	d0ed      	beq.n	1203c <_strtoll_l.constprop.0+0x8c>
   12060:	4584      	cmp	ip, r0
   12062:	eb72 0301 	sbcs.w	r3, r2, r1
   12066:	d2d9      	bcs.n	1201c <_strtoll_l.constprop.0+0x6c>
   12068:	f04f 33ff 	mov.w	r3, #4294967295
   1206c:	e7e6      	b.n	1203c <_strtoll_l.constprop.0+0x8c>
   1206e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   12072:	f1be 0f19 	cmp.w	lr, #25
   12076:	d803      	bhi.n	12080 <_strtoll_l.constprop.0+0xd0>
   12078:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   1207c:	4577      	cmp	r7, lr
   1207e:	dced      	bgt.n	1205c <_strtoll_l.constprop.0+0xac>
   12080:	1c5a      	adds	r2, r3, #1
   12082:	d013      	beq.n	120ac <_strtoll_l.constprop.0+0xfc>
   12084:	9a02      	ldr	r2, [sp, #8]
   12086:	b112      	cbz	r2, 1208e <_strtoll_l.constprop.0+0xde>
   12088:	4240      	negs	r0, r0
   1208a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1208e:	9a00      	ldr	r2, [sp, #0]
   12090:	b11a      	cbz	r2, 1209a <_strtoll_l.constprop.0+0xea>
   12092:	bba3      	cbnz	r3, 120fe <_strtoll_l.constprop.0+0x14e>
   12094:	9b00      	ldr	r3, [sp, #0]
   12096:	f8c3 a000 	str.w	sl, [r3]
   1209a:	b005      	add	sp, #20
   1209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120a0:	9b01      	ldr	r3, [sp, #4]
   120a2:	4573      	cmp	r3, lr
   120a4:	dabe      	bge.n	12024 <_strtoll_l.constprop.0+0x74>
   120a6:	f04f 33ff 	mov.w	r3, #4294967295
   120aa:	e7c7      	b.n	1203c <_strtoll_l.constprop.0+0x8c>
   120ac:	9a03      	ldr	r2, [sp, #12]
   120ae:	2322      	movs	r3, #34	; 0x22
   120b0:	6013      	str	r3, [r2, #0]
   120b2:	9b00      	ldr	r3, [sp, #0]
   120b4:	b333      	cbz	r3, 12104 <_strtoll_l.constprop.0+0x154>
   120b6:	f105 3aff 	add.w	sl, r5, #4294967295
   120ba:	4630      	mov	r0, r6
   120bc:	4659      	mov	r1, fp
   120be:	e7e9      	b.n	12094 <_strtoll_l.constprop.0+0xe4>
   120c0:	2301      	movs	r3, #1
   120c2:	782c      	ldrb	r4, [r5, #0]
   120c4:	9302      	str	r3, [sp, #8]
   120c6:	1c95      	adds	r5, r2, #2
   120c8:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   120cc:	e78c      	b.n	11fe8 <_strtoll_l.constprop.0+0x38>
   120ce:	2c30      	cmp	r4, #48	; 0x30
   120d0:	d104      	bne.n	120dc <_strtoll_l.constprop.0+0x12c>
   120d2:	782b      	ldrb	r3, [r5, #0]
   120d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   120d8:	2b58      	cmp	r3, #88	; 0x58
   120da:	d008      	beq.n	120ee <_strtoll_l.constprop.0+0x13e>
   120dc:	46b8      	mov	r8, r7
   120de:	f04f 0900 	mov.w	r9, #0
   120e2:	e78e      	b.n	12002 <_strtoll_l.constprop.0+0x52>
   120e4:	782b      	ldrb	r3, [r5, #0]
   120e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   120ea:	2b58      	cmp	r3, #88	; 0x58
   120ec:	d10f      	bne.n	1210e <_strtoll_l.constprop.0+0x15e>
   120ee:	f04f 0810 	mov.w	r8, #16
   120f2:	786c      	ldrb	r4, [r5, #1]
   120f4:	f04f 0900 	mov.w	r9, #0
   120f8:	3502      	adds	r5, #2
   120fa:	4647      	mov	r7, r8
   120fc:	e781      	b.n	12002 <_strtoll_l.constprop.0+0x52>
   120fe:	4606      	mov	r6, r0
   12100:	468b      	mov	fp, r1
   12102:	e7d8      	b.n	120b6 <_strtoll_l.constprop.0+0x106>
   12104:	4630      	mov	r0, r6
   12106:	4659      	mov	r1, fp
   12108:	b005      	add	sp, #20
   1210a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1210e:	f04f 0808 	mov.w	r8, #8
   12112:	46b9      	mov	r9, r7
   12114:	4647      	mov	r7, r8
   12116:	e774      	b.n	12002 <_strtoll_l.constprop.0+0x52>
   12118:	20000a99 	.word	0x20000a99

0001211c <_strtoll_r>:
   1211c:	f7ff bf48 	b.w	11fb0 <_strtoll_l.constprop.0>

00012120 <_strtoull_l.constprop.0>:
   12120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12124:	b085      	sub	sp, #20
   12126:	468b      	mov	fp, r1
   12128:	9201      	str	r2, [sp, #4]
   1212a:	4a62      	ldr	r2, [pc, #392]	; (122b4 <_strtoull_l.constprop.0+0x194>)
   1212c:	9003      	str	r0, [sp, #12]
   1212e:	461e      	mov	r6, r3
   12130:	460d      	mov	r5, r1
   12132:	4629      	mov	r1, r5
   12134:	f815 4b01 	ldrb.w	r4, [r5], #1
   12138:	5d13      	ldrb	r3, [r2, r4]
   1213a:	f013 0308 	ands.w	r3, r3, #8
   1213e:	d1f8      	bne.n	12132 <_strtoull_l.constprop.0+0x12>
   12140:	2c2d      	cmp	r4, #45	; 0x2d
   12142:	f000 8082 	beq.w	1224a <_strtoull_l.constprop.0+0x12a>
   12146:	2c2b      	cmp	r4, #43	; 0x2b
   12148:	bf03      	ittte	eq
   1214a:	782c      	ldrbeq	r4, [r5, #0]
   1214c:	9302      	streq	r3, [sp, #8]
   1214e:	1c8d      	addeq	r5, r1, #2
   12150:	9302      	strne	r3, [sp, #8]
   12152:	b1be      	cbz	r6, 12184 <_strtoull_l.constprop.0+0x64>
   12154:	2e10      	cmp	r6, #16
   12156:	d07d      	beq.n	12254 <_strtoull_l.constprop.0+0x134>
   12158:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   1215c:	4632      	mov	r2, r6
   1215e:	4653      	mov	r3, sl
   12160:	f04f 30ff 	mov.w	r0, #4294967295
   12164:	f04f 31ff 	mov.w	r1, #4294967295
   12168:	f7f7 fb9a 	bl	98a0 <__aeabi_uldivmod>
   1216c:	4632      	mov	r2, r6
   1216e:	4607      	mov	r7, r0
   12170:	4688      	mov	r8, r1
   12172:	4653      	mov	r3, sl
   12174:	f04f 30ff 	mov.w	r0, #4294967295
   12178:	f04f 31ff 	mov.w	r1, #4294967295
   1217c:	46b1      	mov	r9, r6
   1217e:	f7f7 fb8f 	bl	98a0 <__aeabi_uldivmod>
   12182:	e00a      	b.n	1219a <_strtoull_l.constprop.0+0x7a>
   12184:	2c30      	cmp	r4, #48	; 0x30
   12186:	d079      	beq.n	1227c <_strtoull_l.constprop.0+0x15c>
   12188:	f04f 090a 	mov.w	r9, #10
   1218c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 122b8 <_strtoull_l.constprop.0+0x198>
   12190:	46b2      	mov	sl, r6
   12192:	2205      	movs	r2, #5
   12194:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   12198:	464e      	mov	r6, r9
   1219a:	f04f 0c00 	mov.w	ip, #0
   1219e:	4660      	mov	r0, ip
   121a0:	4661      	mov	r1, ip
   121a2:	e011      	b.n	121c8 <_strtoull_l.constprop.0+0xa8>
   121a4:	4541      	cmp	r1, r8
   121a6:	bf08      	it	eq
   121a8:	42b8      	cmpeq	r0, r7
   121aa:	d03e      	beq.n	1222a <_strtoull_l.constprop.0+0x10a>
   121ac:	fb00 f40a 	mul.w	r4, r0, sl
   121b0:	fb09 4101 	mla	r1, r9, r1, r4
   121b4:	fba0 0409 	umull	r0, r4, r0, r9
   121b8:	4421      	add	r1, r4
   121ba:	1818      	adds	r0, r3, r0
   121bc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   121c0:	f04f 0c01 	mov.w	ip, #1
   121c4:	f815 4b01 	ldrb.w	r4, [r5], #1
   121c8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   121cc:	2b09      	cmp	r3, #9
   121ce:	d905      	bls.n	121dc <_strtoull_l.constprop.0+0xbc>
   121d0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   121d4:	2b19      	cmp	r3, #25
   121d6:	d80d      	bhi.n	121f4 <_strtoull_l.constprop.0+0xd4>
   121d8:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   121dc:	429e      	cmp	r6, r3
   121de:	dd11      	ble.n	12204 <_strtoull_l.constprop.0+0xe4>
   121e0:	f1bc 3fff 	cmp.w	ip, #4294967295
   121e4:	d0ee      	beq.n	121c4 <_strtoull_l.constprop.0+0xa4>
   121e6:	4287      	cmp	r7, r0
   121e8:	eb78 0401 	sbcs.w	r4, r8, r1
   121ec:	d2da      	bcs.n	121a4 <_strtoull_l.constprop.0+0x84>
   121ee:	f04f 3cff 	mov.w	ip, #4294967295
   121f2:	e7e7      	b.n	121c4 <_strtoull_l.constprop.0+0xa4>
   121f4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   121f8:	2b19      	cmp	r3, #25
   121fa:	d803      	bhi.n	12204 <_strtoull_l.constprop.0+0xe4>
   121fc:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   12200:	429e      	cmp	r6, r3
   12202:	dced      	bgt.n	121e0 <_strtoull_l.constprop.0+0xc0>
   12204:	f1bc 3fff 	cmp.w	ip, #4294967295
   12208:	d014      	beq.n	12234 <_strtoull_l.constprop.0+0x114>
   1220a:	9b02      	ldr	r3, [sp, #8]
   1220c:	b113      	cbz	r3, 12214 <_strtoull_l.constprop.0+0xf4>
   1220e:	4240      	negs	r0, r0
   12210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12214:	9b01      	ldr	r3, [sp, #4]
   12216:	b12b      	cbz	r3, 12224 <_strtoull_l.constprop.0+0x104>
   12218:	f1bc 0f00 	cmp.w	ip, #0
   1221c:	d112      	bne.n	12244 <_strtoull_l.constprop.0+0x124>
   1221e:	9b01      	ldr	r3, [sp, #4]
   12220:	f8c3 b000 	str.w	fp, [r3]
   12224:	b005      	add	sp, #20
   12226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1222a:	4293      	cmp	r3, r2
   1222c:	ddbe      	ble.n	121ac <_strtoull_l.constprop.0+0x8c>
   1222e:	f04f 3cff 	mov.w	ip, #4294967295
   12232:	e7c7      	b.n	121c4 <_strtoull_l.constprop.0+0xa4>
   12234:	9a03      	ldr	r2, [sp, #12]
   12236:	2322      	movs	r3, #34	; 0x22
   12238:	6013      	str	r3, [r2, #0]
   1223a:	9b01      	ldr	r3, [sp, #4]
   1223c:	4660      	mov	r0, ip
   1223e:	4661      	mov	r1, ip
   12240:	2b00      	cmp	r3, #0
   12242:	d0ef      	beq.n	12224 <_strtoull_l.constprop.0+0x104>
   12244:	f105 3bff 	add.w	fp, r5, #4294967295
   12248:	e7e9      	b.n	1221e <_strtoull_l.constprop.0+0xfe>
   1224a:	2301      	movs	r3, #1
   1224c:	782c      	ldrb	r4, [r5, #0]
   1224e:	9302      	str	r3, [sp, #8]
   12250:	1c8d      	adds	r5, r1, #2
   12252:	e77e      	b.n	12152 <_strtoull_l.constprop.0+0x32>
   12254:	2c30      	cmp	r4, #48	; 0x30
   12256:	d123      	bne.n	122a0 <_strtoull_l.constprop.0+0x180>
   12258:	782b      	ldrb	r3, [r5, #0]
   1225a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1225e:	2b58      	cmp	r3, #88	; 0x58
   12260:	d11b      	bne.n	1229a <_strtoull_l.constprop.0+0x17a>
   12262:	f04f 0910 	mov.w	r9, #16
   12266:	786c      	ldrb	r4, [r5, #1]
   12268:	220f      	movs	r2, #15
   1226a:	3502      	adds	r5, #2
   1226c:	f04f 37ff 	mov.w	r7, #4294967295
   12270:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12274:	f04f 0a00 	mov.w	sl, #0
   12278:	464e      	mov	r6, r9
   1227a:	e78e      	b.n	1219a <_strtoull_l.constprop.0+0x7a>
   1227c:	782b      	ldrb	r3, [r5, #0]
   1227e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12282:	2b58      	cmp	r3, #88	; 0x58
   12284:	d0ed      	beq.n	12262 <_strtoull_l.constprop.0+0x142>
   12286:	f04f 0908 	mov.w	r9, #8
   1228a:	46b2      	mov	sl, r6
   1228c:	2207      	movs	r2, #7
   1228e:	f04f 37ff 	mov.w	r7, #4294967295
   12292:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   12296:	464e      	mov	r6, r9
   12298:	e77f      	b.n	1219a <_strtoull_l.constprop.0+0x7a>
   1229a:	f04f 0a00 	mov.w	sl, #0
   1229e:	e75d      	b.n	1215c <_strtoull_l.constprop.0+0x3c>
   122a0:	220f      	movs	r2, #15
   122a2:	f04f 37ff 	mov.w	r7, #4294967295
   122a6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   122aa:	46b1      	mov	r9, r6
   122ac:	f04f 0a00 	mov.w	sl, #0
   122b0:	e773      	b.n	1219a <_strtoull_l.constprop.0+0x7a>
   122b2:	bf00      	nop
   122b4:	20000a99 	.word	0x20000a99
   122b8:	19999999 	.word	0x19999999

000122bc <_strtoull_r>:
   122bc:	f7ff bf30 	b.w	12120 <_strtoull_l.constprop.0>

000122c0 <_mbrtowc_r>:
   122c0:	b570      	push	{r4, r5, r6, lr}
   122c2:	b082      	sub	sp, #8
   122c4:	4604      	mov	r4, r0
   122c6:	9d06      	ldr	r5, [sp, #24]
   122c8:	b155      	cbz	r5, 122e0 <_mbrtowc_r+0x20>
   122ca:	b16a      	cbz	r2, 122e8 <_mbrtowc_r+0x28>
   122cc:	480f      	ldr	r0, [pc, #60]	; (1230c <_mbrtowc_r+0x4c>)
   122ce:	9500      	str	r5, [sp, #0]
   122d0:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   122d4:	4620      	mov	r0, r4
   122d6:	47b0      	blx	r6
   122d8:	1c43      	adds	r3, r0, #1
   122da:	d010      	beq.n	122fe <_mbrtowc_r+0x3e>
   122dc:	b002      	add	sp, #8
   122de:	bd70      	pop	{r4, r5, r6, pc}
   122e0:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   122e4:	2a00      	cmp	r2, #0
   122e6:	d1f1      	bne.n	122cc <_mbrtowc_r+0xc>
   122e8:	4b08      	ldr	r3, [pc, #32]	; (1230c <_mbrtowc_r+0x4c>)
   122ea:	9500      	str	r5, [sp, #0]
   122ec:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   122f0:	4611      	mov	r1, r2
   122f2:	2301      	movs	r3, #1
   122f4:	4a06      	ldr	r2, [pc, #24]	; (12310 <_mbrtowc_r+0x50>)
   122f6:	4620      	mov	r0, r4
   122f8:	47b0      	blx	r6
   122fa:	1c43      	adds	r3, r0, #1
   122fc:	d1ee      	bne.n	122dc <_mbrtowc_r+0x1c>
   122fe:	2200      	movs	r2, #0
   12300:	238a      	movs	r3, #138	; 0x8a
   12302:	602a      	str	r2, [r5, #0]
   12304:	6023      	str	r3, [r4, #0]
   12306:	b002      	add	sp, #8
   12308:	bd70      	pop	{r4, r5, r6, pc}
   1230a:	bf00      	nop
   1230c:	200085e8 	.word	0x200085e8
   12310:	20008014 	.word	0x20008014

00012314 <_wcrtomb_r>:
   12314:	b570      	push	{r4, r5, r6, lr}
   12316:	4605      	mov	r5, r0
   12318:	b084      	sub	sp, #16
   1231a:	b15b      	cbz	r3, 12334 <_wcrtomb_r+0x20>
   1231c:	461c      	mov	r4, r3
   1231e:	b169      	cbz	r1, 1233c <_wcrtomb_r+0x28>
   12320:	4b0e      	ldr	r3, [pc, #56]	; (1235c <_wcrtomb_r+0x48>)
   12322:	4628      	mov	r0, r5
   12324:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   12328:	4623      	mov	r3, r4
   1232a:	47b0      	blx	r6
   1232c:	1c43      	adds	r3, r0, #1
   1232e:	d00f      	beq.n	12350 <_wcrtomb_r+0x3c>
   12330:	b004      	add	sp, #16
   12332:	bd70      	pop	{r4, r5, r6, pc}
   12334:	f500 7482 	add.w	r4, r0, #260	; 0x104
   12338:	2900      	cmp	r1, #0
   1233a:	d1f1      	bne.n	12320 <_wcrtomb_r+0xc>
   1233c:	4a07      	ldr	r2, [pc, #28]	; (1235c <_wcrtomb_r+0x48>)
   1233e:	4623      	mov	r3, r4
   12340:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   12344:	4628      	mov	r0, r5
   12346:	460a      	mov	r2, r1
   12348:	a901      	add	r1, sp, #4
   1234a:	47b0      	blx	r6
   1234c:	1c43      	adds	r3, r0, #1
   1234e:	d1ef      	bne.n	12330 <_wcrtomb_r+0x1c>
   12350:	2200      	movs	r2, #0
   12352:	238a      	movs	r3, #138	; 0x8a
   12354:	6022      	str	r2, [r4, #0]
   12356:	602b      	str	r3, [r5, #0]
   12358:	b004      	add	sp, #16
   1235a:	bd70      	pop	{r4, r5, r6, pc}
   1235c:	200085e8 	.word	0x200085e8

00012360 <_wcsrtombs_r>:
   12360:	b510      	push	{r4, lr}
   12362:	b082      	sub	sp, #8
   12364:	9c04      	ldr	r4, [sp, #16]
   12366:	e9cd 3400 	strd	r3, r4, [sp]
   1236a:	f04f 33ff 	mov.w	r3, #4294967295
   1236e:	f001 fd9f 	bl	13eb0 <_wcsnrtombs_r>
   12372:	b002      	add	sp, #8
   12374:	bd10      	pop	{r4, pc}
   12376:	bf00      	nop

00012378 <iswspace>:
   12378:	2100      	movs	r1, #0
   1237a:	f000 b801 	b.w	12380 <iswspace_l>
   1237e:	bf00      	nop

00012380 <iswspace_l>:
   12380:	b510      	push	{r4, lr}
   12382:	f000 f8ab 	bl	124dc <_jp2uc_l>
   12386:	4604      	mov	r4, r0
   12388:	f001 fda4 	bl	13ed4 <category>
   1238c:	f1a0 031a 	sub.w	r3, r0, #26
   12390:	b2db      	uxtb	r3, r3
   12392:	2b02      	cmp	r3, #2
   12394:	d906      	bls.n	123a4 <iswspace_l+0x24>
   12396:	f1a4 0009 	sub.w	r0, r4, #9
   1239a:	2804      	cmp	r0, #4
   1239c:	bf8c      	ite	hi
   1239e:	2000      	movhi	r0, #0
   123a0:	2001      	movls	r0, #1
   123a2:	bd10      	pop	{r4, pc}
   123a4:	2001      	movs	r0, #1
   123a6:	bd10      	pop	{r4, pc}

000123a8 <__jp2uc>:
   123a8:	2902      	cmp	r1, #2
   123aa:	d032      	beq.n	12412 <__jp2uc+0x6a>
   123ac:	2903      	cmp	r1, #3
   123ae:	f3c0 2307 	ubfx	r3, r0, #8, #8
   123b2:	bf1d      	ittte	ne
   123b4:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   123b8:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   123bc:	b2d2      	uxtbne	r2, r2
   123be:	b2c2      	uxtbeq	r2, r0
   123c0:	f103 0150 	add.w	r1, r3, #80	; 0x50
   123c4:	b2c9      	uxtb	r1, r1
   123c6:	291f      	cmp	r1, #31
   123c8:	d806      	bhi.n	123d8 <__jp2uc+0x30>
   123ca:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   123ce:	4288      	cmp	r0, r1
   123d0:	d969      	bls.n	124a6 <__jp2uc+0xfe>
   123d2:	f04f 30ff 	mov.w	r0, #4294967295
   123d6:	4770      	bx	lr
   123d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   123dc:	b2c9      	uxtb	r1, r1
   123de:	2924      	cmp	r1, #36	; 0x24
   123e0:	d80e      	bhi.n	12400 <__jp2uc+0x58>
   123e2:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   123e6:	4288      	cmp	r0, r1
   123e8:	d8f3      	bhi.n	123d2 <__jp2uc+0x2a>
   123ea:	3bd0      	subs	r3, #208	; 0xd0
   123ec:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   123f0:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   123f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   123f8:	4a30      	ldr	r2, [pc, #192]	; (124bc <__jp2uc+0x114>)
   123fa:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   123fe:	4770      	bx	lr
   12400:	3ba1      	subs	r3, #161	; 0xa1
   12402:	2b07      	cmp	r3, #7
   12404:	d8e5      	bhi.n	123d2 <__jp2uc+0x2a>
   12406:	e8df f003 	tbb	[pc, r3]
   1240a:	3e48      	.short	0x3e48
   1240c:	25292e34 	.word	0x25292e34
   12410:	1921      	.short	0x1921
   12412:	b2c2      	uxtb	r2, r0
   12414:	2a9e      	cmp	r2, #158	; 0x9e
   12416:	f3c0 2107 	ubfx	r1, r0, #8, #8
   1241a:	d90b      	bls.n	12434 <__jp2uc+0x8c>
   1241c:	3223      	adds	r2, #35	; 0x23
   1241e:	b2d2      	uxtb	r2, r2
   12420:	2380      	movs	r3, #128	; 0x80
   12422:	299f      	cmp	r1, #159	; 0x9f
   12424:	bf94      	ite	ls
   12426:	3970      	subls	r1, #112	; 0x70
   12428:	3150      	addhi	r1, #80	; 0x50
   1242a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1242e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   12432:	e7c5      	b.n	123c0 <__jp2uc+0x18>
   12434:	3a7e      	subs	r2, #126	; 0x7e
   12436:	b2d2      	uxtb	r2, r2
   12438:	237f      	movs	r3, #127	; 0x7f
   1243a:	e7f2      	b.n	12422 <__jp2uc+0x7a>
   1243c:	2ac0      	cmp	r2, #192	; 0xc0
   1243e:	d8c8      	bhi.n	123d2 <__jp2uc+0x2a>
   12440:	4b1f      	ldr	r3, [pc, #124]	; (124c0 <__jp2uc+0x118>)
   12442:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12446:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1244a:	4770      	bx	lr
   1244c:	2af1      	cmp	r2, #241	; 0xf1
   1244e:	d8c0      	bhi.n	123d2 <__jp2uc+0x2a>
   12450:	4b1c      	ldr	r3, [pc, #112]	; (124c4 <__jp2uc+0x11c>)
   12452:	e019      	b.n	12488 <__jp2uc+0xe0>
   12454:	2ad8      	cmp	r2, #216	; 0xd8
   12456:	d8bc      	bhi.n	123d2 <__jp2uc+0x2a>
   12458:	4b1b      	ldr	r3, [pc, #108]	; (124c8 <__jp2uc+0x120>)
   1245a:	e015      	b.n	12488 <__jp2uc+0xe0>
   1245c:	2af6      	cmp	r2, #246	; 0xf6
   1245e:	d8b8      	bhi.n	123d2 <__jp2uc+0x2a>
   12460:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   12464:	4770      	bx	lr
   12466:	2af3      	cmp	r2, #243	; 0xf3
   12468:	d8b3      	bhi.n	123d2 <__jp2uc+0x2a>
   1246a:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   1246e:	3020      	adds	r0, #32
   12470:	4770      	bx	lr
   12472:	4b16      	ldr	r3, [pc, #88]	; (124cc <__jp2uc+0x124>)
   12474:	4413      	add	r3, r2
   12476:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   1247a:	2b00      	cmp	r3, #0
   1247c:	d0a9      	beq.n	123d2 <__jp2uc+0x2a>
   1247e:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   12482:	3060      	adds	r0, #96	; 0x60
   12484:	4770      	bx	lr
   12486:	4b12      	ldr	r3, [pc, #72]	; (124d0 <__jp2uc+0x128>)
   12488:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   1248c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12490:	2800      	cmp	r0, #0
   12492:	bf08      	it	eq
   12494:	f04f 30ff 	moveq.w	r0, #4294967295
   12498:	4770      	bx	lr
   1249a:	4b0e      	ldr	r3, [pc, #56]	; (124d4 <__jp2uc+0x12c>)
   1249c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   124a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   124a4:	4770      	bx	lr
   124a6:	3bb0      	subs	r3, #176	; 0xb0
   124a8:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   124ac:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   124b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   124b4:	4a08      	ldr	r2, [pc, #32]	; (124d8 <__jp2uc+0x130>)
   124b6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   124ba:	4770      	bx	lr
   124bc:	20005c28 	.word	0x20005c28
   124c0:	20000f50 	.word	0x20000f50
   124c4:	20000eac 	.word	0x20000eac
   124c8:	20000e3c 	.word	0x20000e3c
   124cc:	20000de0 	.word	0x20000de0
   124d0:	20000d24 	.word	0x20000d24
   124d4:	20000c68 	.word	0x20000c68
   124d8:	20000f90 	.word	0x20000f90

000124dc <_jp2uc_l>:
   124dc:	b538      	push	{r3, r4, r5, lr}
   124de:	4605      	mov	r5, r0
   124e0:	b1b9      	cbz	r1, 12512 <_jp2uc_l+0x36>
   124e2:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   124e6:	4912      	ldr	r1, [pc, #72]	; (12530 <_jp2uc_l+0x54>)
   124e8:	4620      	mov	r0, r4
   124ea:	f7f9 fbfd 	bl	bce8 <strcmp>
   124ee:	b928      	cbnz	r0, 124fc <_jp2uc_l+0x20>
   124f0:	4628      	mov	r0, r5
   124f2:	2101      	movs	r1, #1
   124f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   124f8:	f7ff bf56 	b.w	123a8 <__jp2uc>
   124fc:	490d      	ldr	r1, [pc, #52]	; (12534 <_jp2uc_l+0x58>)
   124fe:	4620      	mov	r0, r4
   12500:	f7f9 fbf2 	bl	bce8 <strcmp>
   12504:	b938      	cbnz	r0, 12516 <_jp2uc_l+0x3a>
   12506:	4628      	mov	r0, r5
   12508:	2102      	movs	r1, #2
   1250a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1250e:	f7ff bf4b 	b.w	123a8 <__jp2uc>
   12512:	4c09      	ldr	r4, [pc, #36]	; (12538 <_jp2uc_l+0x5c>)
   12514:	e7e7      	b.n	124e6 <_jp2uc_l+0xa>
   12516:	4909      	ldr	r1, [pc, #36]	; (1253c <_jp2uc_l+0x60>)
   12518:	4620      	mov	r0, r4
   1251a:	f7f9 fbe5 	bl	bce8 <strcmp>
   1251e:	b928      	cbnz	r0, 1252c <_jp2uc_l+0x50>
   12520:	4628      	mov	r0, r5
   12522:	2103      	movs	r1, #3
   12524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12528:	f7ff bf3e 	b.w	123a8 <__jp2uc>
   1252c:	4628      	mov	r0, r5
   1252e:	bd38      	pop	{r3, r4, r5, pc}
   12530:	20000c08 	.word	0x20000c08
   12534:	20000c0c 	.word	0x20000c0c
   12538:	20008712 	.word	0x20008712
   1253c:	20000c14 	.word	0x20000c14

00012540 <fiprintf>:
   12540:	b40e      	push	{r1, r2, r3}
   12542:	b510      	push	{r4, lr}
   12544:	b083      	sub	sp, #12
   12546:	ab05      	add	r3, sp, #20
   12548:	4c06      	ldr	r4, [pc, #24]	; (12564 <fiprintf+0x24>)
   1254a:	f853 2b04 	ldr.w	r2, [r3], #4
   1254e:	9301      	str	r3, [sp, #4]
   12550:	4601      	mov	r1, r0
   12552:	6820      	ldr	r0, [r4, #0]
   12554:	f000 f97c 	bl	12850 <_vfiprintf_r>
   12558:	b003      	add	sp, #12
   1255a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1255e:	b003      	add	sp, #12
   12560:	4770      	bx	lr
   12562:	bf00      	nop
   12564:	20008b70 	.word	0x20008b70

00012568 <__ssprint_r>:
   12568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1256c:	6893      	ldr	r3, [r2, #8]
   1256e:	6817      	ldr	r7, [r2, #0]
   12570:	b083      	sub	sp, #12
   12572:	4692      	mov	sl, r2
   12574:	2b00      	cmp	r3, #0
   12576:	d070      	beq.n	1265a <__ssprint_r+0xf2>
   12578:	4681      	mov	r9, r0
   1257a:	688a      	ldr	r2, [r1, #8]
   1257c:	6808      	ldr	r0, [r1, #0]
   1257e:	460c      	mov	r4, r1
   12580:	3708      	adds	r7, #8
   12582:	e043      	b.n	1260c <__ssprint_r+0xa4>
   12584:	89a3      	ldrh	r3, [r4, #12]
   12586:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1258a:	d02e      	beq.n	125ea <__ssprint_r+0x82>
   1258c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   12590:	eba0 0801 	sub.w	r8, r0, r1
   12594:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   12598:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   1259c:	f108 0001 	add.w	r0, r8, #1
   125a0:	1076      	asrs	r6, r6, #1
   125a2:	4428      	add	r0, r5
   125a4:	42b0      	cmp	r0, r6
   125a6:	4632      	mov	r2, r6
   125a8:	bf84      	itt	hi
   125aa:	4606      	movhi	r6, r0
   125ac:	4632      	movhi	r2, r6
   125ae:	055b      	lsls	r3, r3, #21
   125b0:	d537      	bpl.n	12622 <__ssprint_r+0xba>
   125b2:	4611      	mov	r1, r2
   125b4:	4648      	mov	r0, r9
   125b6:	f7f7 fb01 	bl	9bbc <_malloc_r>
   125ba:	9001      	str	r0, [sp, #4]
   125bc:	2800      	cmp	r0, #0
   125be:	d03a      	beq.n	12636 <__ssprint_r+0xce>
   125c0:	4642      	mov	r2, r8
   125c2:	6921      	ldr	r1, [r4, #16]
   125c4:	f7f5 fd56 	bl	8074 <memcpy>
   125c8:	89a2      	ldrh	r2, [r4, #12]
   125ca:	9b01      	ldr	r3, [sp, #4]
   125cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   125d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   125d4:	81a2      	strh	r2, [r4, #12]
   125d6:	eba6 0208 	sub.w	r2, r6, r8
   125da:	eb03 0008 	add.w	r0, r3, r8
   125de:	6166      	str	r6, [r4, #20]
   125e0:	60a2      	str	r2, [r4, #8]
   125e2:	6123      	str	r3, [r4, #16]
   125e4:	6020      	str	r0, [r4, #0]
   125e6:	462e      	mov	r6, r5
   125e8:	46a8      	mov	r8, r5
   125ea:	4642      	mov	r2, r8
   125ec:	4659      	mov	r1, fp
   125ee:	f7f9 f991 	bl	b914 <memmove>
   125f2:	f8da 3008 	ldr.w	r3, [sl, #8]
   125f6:	68a2      	ldr	r2, [r4, #8]
   125f8:	6820      	ldr	r0, [r4, #0]
   125fa:	1b92      	subs	r2, r2, r6
   125fc:	4440      	add	r0, r8
   125fe:	1b5b      	subs	r3, r3, r5
   12600:	60a2      	str	r2, [r4, #8]
   12602:	6020      	str	r0, [r4, #0]
   12604:	f8ca 3008 	str.w	r3, [sl, #8]
   12608:	b33b      	cbz	r3, 1265a <__ssprint_r+0xf2>
   1260a:	3708      	adds	r7, #8
   1260c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   12610:	2d00      	cmp	r5, #0
   12612:	d0fa      	beq.n	1260a <__ssprint_r+0xa2>
   12614:	42aa      	cmp	r2, r5
   12616:	4616      	mov	r6, r2
   12618:	4690      	mov	r8, r2
   1261a:	d9b3      	bls.n	12584 <__ssprint_r+0x1c>
   1261c:	462e      	mov	r6, r5
   1261e:	46a8      	mov	r8, r5
   12620:	e7e3      	b.n	125ea <__ssprint_r+0x82>
   12622:	4648      	mov	r0, r9
   12624:	f7f7 fd92 	bl	a14c <_realloc_r>
   12628:	4603      	mov	r3, r0
   1262a:	2800      	cmp	r0, #0
   1262c:	d1d3      	bne.n	125d6 <__ssprint_r+0x6e>
   1262e:	6921      	ldr	r1, [r4, #16]
   12630:	4648      	mov	r0, r9
   12632:	f7f9 fe97 	bl	c364 <_free_r>
   12636:	89a3      	ldrh	r3, [r4, #12]
   12638:	220c      	movs	r2, #12
   1263a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1263e:	f8c9 2000 	str.w	r2, [r9]
   12642:	f04f 30ff 	mov.w	r0, #4294967295
   12646:	81a3      	strh	r3, [r4, #12]
   12648:	2200      	movs	r2, #0
   1264a:	2300      	movs	r3, #0
   1264c:	f8ca 2008 	str.w	r2, [sl, #8]
   12650:	f8ca 3004 	str.w	r3, [sl, #4]
   12654:	b003      	add	sp, #12
   12656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1265a:	2000      	movs	r0, #0
   1265c:	2300      	movs	r3, #0
   1265e:	f8ca 3004 	str.w	r3, [sl, #4]
   12662:	b003      	add	sp, #12
   12664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012668 <_sungetc_r>:
   12668:	b538      	push	{r3, r4, r5, lr}
   1266a:	1c4b      	adds	r3, r1, #1
   1266c:	d01a      	beq.n	126a4 <_sungetc_r+0x3c>
   1266e:	8993      	ldrh	r3, [r2, #12]
   12670:	4614      	mov	r4, r2
   12672:	6b12      	ldr	r2, [r2, #48]	; 0x30
   12674:	f023 0320 	bic.w	r3, r3, #32
   12678:	81a3      	strh	r3, [r4, #12]
   1267a:	b2cd      	uxtb	r5, r1
   1267c:	b1aa      	cbz	r2, 126aa <_sungetc_r+0x42>
   1267e:	6862      	ldr	r2, [r4, #4]
   12680:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12682:	429a      	cmp	r2, r3
   12684:	da09      	bge.n	1269a <_sungetc_r+0x32>
   12686:	6823      	ldr	r3, [r4, #0]
   12688:	1e5a      	subs	r2, r3, #1
   1268a:	6022      	str	r2, [r4, #0]
   1268c:	f803 5c01 	strb.w	r5, [r3, #-1]
   12690:	6863      	ldr	r3, [r4, #4]
   12692:	3301      	adds	r3, #1
   12694:	6063      	str	r3, [r4, #4]
   12696:	4628      	mov	r0, r5
   12698:	bd38      	pop	{r3, r4, r5, pc}
   1269a:	4621      	mov	r1, r4
   1269c:	f001 fa58 	bl	13b50 <__submore>
   126a0:	2800      	cmp	r0, #0
   126a2:	d0f0      	beq.n	12686 <_sungetc_r+0x1e>
   126a4:	f04f 35ff 	mov.w	r5, #4294967295
   126a8:	e7f5      	b.n	12696 <_sungetc_r+0x2e>
   126aa:	6923      	ldr	r3, [r4, #16]
   126ac:	6822      	ldr	r2, [r4, #0]
   126ae:	b12b      	cbz	r3, 126bc <_sungetc_r+0x54>
   126b0:	4293      	cmp	r3, r2
   126b2:	d203      	bcs.n	126bc <_sungetc_r+0x54>
   126b4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   126b8:	42ab      	cmp	r3, r5
   126ba:	d00f      	beq.n	126dc <_sungetc_r+0x74>
   126bc:	6861      	ldr	r1, [r4, #4]
   126be:	63e1      	str	r1, [r4, #60]	; 0x3c
   126c0:	4623      	mov	r3, r4
   126c2:	63a2      	str	r2, [r4, #56]	; 0x38
   126c4:	f104 0140 	add.w	r1, r4, #64	; 0x40
   126c8:	2203      	movs	r2, #3
   126ca:	6362      	str	r2, [r4, #52]	; 0x34
   126cc:	6321      	str	r1, [r4, #48]	; 0x30
   126ce:	f803 5f42 	strb.w	r5, [r3, #66]!
   126d2:	2201      	movs	r2, #1
   126d4:	e9c4 3200 	strd	r3, r2, [r4]
   126d8:	4628      	mov	r0, r5
   126da:	bd38      	pop	{r3, r4, r5, pc}
   126dc:	6863      	ldr	r3, [r4, #4]
   126de:	3a01      	subs	r2, #1
   126e0:	3301      	adds	r3, #1
   126e2:	e9c4 2300 	strd	r2, r3, [r4]
   126e6:	e7d6      	b.n	12696 <_sungetc_r+0x2e>

000126e8 <__ssrefill_r>:
   126e8:	b510      	push	{r4, lr}
   126ea:	460c      	mov	r4, r1
   126ec:	6b09      	ldr	r1, [r1, #48]	; 0x30
   126ee:	b169      	cbz	r1, 1270c <__ssrefill_r+0x24>
   126f0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   126f4:	4299      	cmp	r1, r3
   126f6:	d001      	beq.n	126fc <__ssrefill_r+0x14>
   126f8:	f7f9 fe34 	bl	c364 <_free_r>
   126fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   126fe:	6063      	str	r3, [r4, #4]
   12700:	2000      	movs	r0, #0
   12702:	6320      	str	r0, [r4, #48]	; 0x30
   12704:	b113      	cbz	r3, 1270c <__ssrefill_r+0x24>
   12706:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12708:	6023      	str	r3, [r4, #0]
   1270a:	bd10      	pop	{r4, pc}
   1270c:	89a3      	ldrh	r3, [r4, #12]
   1270e:	6921      	ldr	r1, [r4, #16]
   12710:	2200      	movs	r2, #0
   12712:	f043 0320 	orr.w	r3, r3, #32
   12716:	e9c4 1200 	strd	r1, r2, [r4]
   1271a:	81a3      	strh	r3, [r4, #12]
   1271c:	f04f 30ff 	mov.w	r0, #4294967295
   12720:	bd10      	pop	{r4, pc}
   12722:	bf00      	nop

00012724 <_sfread_r>:
   12724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12728:	b085      	sub	sp, #20
   1272a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1272e:	fb02 f303 	mul.w	r3, r2, r3
   12732:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   12734:	9301      	str	r3, [sp, #4]
   12736:	b3a3      	cbz	r3, 127a2 <_sfread_r+0x7e>
   12738:	f8d4 a004 	ldr.w	sl, [r4, #4]
   1273c:	9b01      	ldr	r3, [sp, #4]
   1273e:	4553      	cmp	r3, sl
   12740:	468b      	mov	fp, r1
   12742:	d946      	bls.n	127d2 <_sfread_r+0xae>
   12744:	46a0      	mov	r8, r4
   12746:	9d01      	ldr	r5, [sp, #4]
   12748:	f858 1b40 	ldr.w	r1, [r8], #64
   1274c:	4607      	mov	r7, r0
   1274e:	2600      	movs	r6, #0
   12750:	4652      	mov	r2, sl
   12752:	4658      	mov	r0, fp
   12754:	f7f5 fc8e 	bl	8074 <memcpy>
   12758:	6823      	ldr	r3, [r4, #0]
   1275a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1275c:	4453      	add	r3, sl
   1275e:	46a9      	mov	r9, r5
   12760:	e9c4 3600 	strd	r3, r6, [r4]
   12764:	4611      	mov	r1, r2
   12766:	4638      	mov	r0, r7
   12768:	44d3      	add	fp, sl
   1276a:	eba5 050a 	sub.w	r5, r5, sl
   1276e:	b1e2      	cbz	r2, 127aa <_sfread_r+0x86>
   12770:	4542      	cmp	r2, r8
   12772:	d001      	beq.n	12778 <_sfread_r+0x54>
   12774:	f7f9 fdf6 	bl	c364 <_free_r>
   12778:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1277a:	6326      	str	r6, [r4, #48]	; 0x30
   1277c:	6063      	str	r3, [r4, #4]
   1277e:	b1a3      	cbz	r3, 127aa <_sfread_r+0x86>
   12780:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   12782:	6021      	str	r1, [r4, #0]
   12784:	42ab      	cmp	r3, r5
   12786:	469a      	mov	sl, r3
   12788:	d3e2      	bcc.n	12750 <_sfread_r+0x2c>
   1278a:	9b02      	ldr	r3, [sp, #8]
   1278c:	9301      	str	r3, [sp, #4]
   1278e:	462a      	mov	r2, r5
   12790:	4658      	mov	r0, fp
   12792:	f7f5 fc6f 	bl	8074 <memcpy>
   12796:	e9d4 3200 	ldrd	r3, r2, [r4]
   1279a:	1b52      	subs	r2, r2, r5
   1279c:	442b      	add	r3, r5
   1279e:	e9c4 3200 	strd	r3, r2, [r4]
   127a2:	9801      	ldr	r0, [sp, #4]
   127a4:	b005      	add	sp, #20
   127a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127aa:	9a01      	ldr	r2, [sp, #4]
   127ac:	9b03      	ldr	r3, [sp, #12]
   127ae:	4452      	add	r2, sl
   127b0:	eba2 0209 	sub.w	r2, r2, r9
   127b4:	fbb2 f3f3 	udiv	r3, r2, r3
   127b8:	9301      	str	r3, [sp, #4]
   127ba:	89a3      	ldrh	r3, [r4, #12]
   127bc:	6922      	ldr	r2, [r4, #16]
   127be:	9801      	ldr	r0, [sp, #4]
   127c0:	f043 0320 	orr.w	r3, r3, #32
   127c4:	81a3      	strh	r3, [r4, #12]
   127c6:	2300      	movs	r3, #0
   127c8:	e9c4 2300 	strd	r2, r3, [r4]
   127cc:	b005      	add	sp, #20
   127ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127d2:	6821      	ldr	r1, [r4, #0]
   127d4:	461d      	mov	r5, r3
   127d6:	e7d8      	b.n	1278a <_sfread_r+0x66>

000127d8 <__sprint_r.part.0>:
   127d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127dc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   127de:	049c      	lsls	r4, r3, #18
   127e0:	4690      	mov	r8, r2
   127e2:	d52d      	bpl.n	12840 <__sprint_r.part.0+0x68>
   127e4:	6893      	ldr	r3, [r2, #8]
   127e6:	6812      	ldr	r2, [r2, #0]
   127e8:	b343      	cbz	r3, 1283c <__sprint_r.part.0+0x64>
   127ea:	468b      	mov	fp, r1
   127ec:	4606      	mov	r6, r0
   127ee:	f102 0908 	add.w	r9, r2, #8
   127f2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   127f6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   127fa:	d015      	beq.n	12828 <__sprint_r.part.0+0x50>
   127fc:	3d04      	subs	r5, #4
   127fe:	2400      	movs	r4, #0
   12800:	e001      	b.n	12806 <__sprint_r.part.0+0x2e>
   12802:	42a7      	cmp	r7, r4
   12804:	d00e      	beq.n	12824 <__sprint_r.part.0+0x4c>
   12806:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1280a:	465a      	mov	r2, fp
   1280c:	4630      	mov	r0, r6
   1280e:	f001 fa97 	bl	13d40 <_fputwc_r>
   12812:	1c43      	adds	r3, r0, #1
   12814:	f104 0401 	add.w	r4, r4, #1
   12818:	d1f3      	bne.n	12802 <__sprint_r.part.0+0x2a>
   1281a:	2300      	movs	r3, #0
   1281c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12824:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12828:	f02a 0a03 	bic.w	sl, sl, #3
   1282c:	eba3 030a 	sub.w	r3, r3, sl
   12830:	f8c8 3008 	str.w	r3, [r8, #8]
   12834:	f109 0908 	add.w	r9, r9, #8
   12838:	2b00      	cmp	r3, #0
   1283a:	d1da      	bne.n	127f2 <__sprint_r.part.0+0x1a>
   1283c:	2000      	movs	r0, #0
   1283e:	e7ec      	b.n	1281a <__sprint_r.part.0+0x42>
   12840:	f001 f80c 	bl	1385c <__sfvwrite_r>
   12844:	2300      	movs	r3, #0
   12846:	e9c8 3301 	strd	r3, r3, [r8, #4]
   1284a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1284e:	bf00      	nop

00012850 <_vfiprintf_r>:
   12850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12854:	ed2d 8b02 	vpush	{d8}
   12858:	b0c5      	sub	sp, #276	; 0x114
   1285a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   1285e:	4683      	mov	fp, r0
   12860:	ee08 1a10 	vmov	s16, r1
   12864:	4616      	mov	r6, r2
   12866:	2100      	movs	r1, #0
   12868:	2208      	movs	r2, #8
   1286a:	4650      	mov	r0, sl
   1286c:	461c      	mov	r4, r3
   1286e:	9307      	str	r3, [sp, #28]
   12870:	f7f9 f8cc 	bl	ba0c <memset>
   12874:	f1bb 0f00 	cmp.w	fp, #0
   12878:	d004      	beq.n	12884 <_vfiprintf_r+0x34>
   1287a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   1287e:	2b00      	cmp	r3, #0
   12880:	f000 86a0 	beq.w	135c4 <_vfiprintf_r+0xd74>
   12884:	ee18 2a10 	vmov	r2, s16
   12888:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1288a:	07db      	lsls	r3, r3, #31
   1288c:	f140 8513 	bpl.w	132b6 <_vfiprintf_r+0xa66>
   12890:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12894:	b28a      	uxth	r2, r1
   12896:	0495      	lsls	r5, r2, #18
   12898:	d40b      	bmi.n	128b2 <_vfiprintf_r+0x62>
   1289a:	ee18 3a10 	vmov	r3, s16
   1289e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   128a2:	8199      	strh	r1, [r3, #12]
   128a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   128a6:	b28a      	uxth	r2, r1
   128a8:	ee18 1a10 	vmov	r1, s16
   128ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   128b0:	664b      	str	r3, [r1, #100]	; 0x64
   128b2:	0710      	lsls	r0, r2, #28
   128b4:	f140 8105 	bpl.w	12ac2 <_vfiprintf_r+0x272>
   128b8:	ee18 3a10 	vmov	r3, s16
   128bc:	691b      	ldr	r3, [r3, #16]
   128be:	2b00      	cmp	r3, #0
   128c0:	f000 80ff 	beq.w	12ac2 <_vfiprintf_r+0x272>
   128c4:	f002 031a 	and.w	r3, r2, #26
   128c8:	2b0a      	cmp	r3, #10
   128ca:	f000 810a 	beq.w	12ae2 <_vfiprintf_r+0x292>
   128ce:	2300      	movs	r3, #0
   128d0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   128d4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   128d8:	aa1b      	add	r2, sp, #108	; 0x6c
   128da:	930c      	str	r3, [sp, #48]	; 0x30
   128dc:	9218      	str	r2, [sp, #96]	; 0x60
   128de:	4691      	mov	r9, r2
   128e0:	930b      	str	r3, [sp, #44]	; 0x2c
   128e2:	9305      	str	r3, [sp, #20]
   128e4:	46b0      	mov	r8, r6
   128e6:	4644      	mov	r4, r8
   128e8:	4ba8      	ldr	r3, [pc, #672]	; (12b8c <_vfiprintf_r+0x33c>)
   128ea:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   128ee:	f7f9 f957 	bl	bba0 <__locale_mb_cur_max>
   128f2:	4622      	mov	r2, r4
   128f4:	4603      	mov	r3, r0
   128f6:	a912      	add	r1, sp, #72	; 0x48
   128f8:	f8cd a000 	str.w	sl, [sp]
   128fc:	4658      	mov	r0, fp
   128fe:	47a8      	blx	r5
   12900:	2800      	cmp	r0, #0
   12902:	f000 8145 	beq.w	12b90 <_vfiprintf_r+0x340>
   12906:	f2c0 8139 	blt.w	12b7c <_vfiprintf_r+0x32c>
   1290a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1290c:	2a25      	cmp	r2, #37	; 0x25
   1290e:	4603      	mov	r3, r0
   12910:	d001      	beq.n	12916 <_vfiprintf_r+0xc6>
   12912:	441c      	add	r4, r3
   12914:	e7e8      	b.n	128e8 <_vfiprintf_r+0x98>
   12916:	ebb4 0608 	subs.w	r6, r4, r8
   1291a:	4605      	mov	r5, r0
   1291c:	f040 813c 	bne.w	12b98 <_vfiprintf_r+0x348>
   12920:	2300      	movs	r3, #0
   12922:	7861      	ldrb	r1, [r4, #1]
   12924:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12928:	f104 0801 	add.w	r8, r4, #1
   1292c:	9306      	str	r3, [sp, #24]
   1292e:	f04f 37ff 	mov.w	r7, #4294967295
   12932:	461e      	mov	r6, r3
   12934:	242b      	movs	r4, #43	; 0x2b
   12936:	f108 0801 	add.w	r8, r8, #1
   1293a:	f1a1 0320 	sub.w	r3, r1, #32
   1293e:	2b5a      	cmp	r3, #90	; 0x5a
   12940:	f200 8178 	bhi.w	12c34 <_vfiprintf_r+0x3e4>
   12944:	e8df f013 	tbh	[pc, r3, lsl #1]
   12948:	017602b5 	.word	0x017602b5
   1294c:	02b00176 	.word	0x02b00176
   12950:	01760176 	.word	0x01760176
   12954:	006a0176 	.word	0x006a0176
   12958:	01760176 	.word	0x01760176
   1295c:	028d027d 	.word	0x028d027d
   12960:	02880176 	.word	0x02880176
   12964:	01760297 	.word	0x01760297
   12968:	005b0292 	.word	0x005b0292
   1296c:	005b005b 	.word	0x005b005b
   12970:	005b005b 	.word	0x005b005b
   12974:	005b005b 	.word	0x005b005b
   12978:	005b005b 	.word	0x005b005b
   1297c:	01760176 	.word	0x01760176
   12980:	01760176 	.word	0x01760176
   12984:	01760176 	.word	0x01760176
   12988:	01760176 	.word	0x01760176
   1298c:	025c0176 	.word	0x025c0176
   12990:	01760084 	.word	0x01760084
   12994:	01760176 	.word	0x01760176
   12998:	01760176 	.word	0x01760176
   1299c:	01760176 	.word	0x01760176
   129a0:	01760176 	.word	0x01760176
   129a4:	00e80176 	.word	0x00e80176
   129a8:	01760176 	.word	0x01760176
   129ac:	02330176 	.word	0x02330176
   129b0:	02da0176 	.word	0x02da0176
   129b4:	01760176 	.word	0x01760176
   129b8:	0176058b 	.word	0x0176058b
   129bc:	01760176 	.word	0x01760176
   129c0:	01760176 	.word	0x01760176
   129c4:	01760176 	.word	0x01760176
   129c8:	01760176 	.word	0x01760176
   129cc:	025c0176 	.word	0x025c0176
   129d0:	01760086 	.word	0x01760086
   129d4:	01760176 	.word	0x01760176
   129d8:	008602cd 	.word	0x008602cd
   129dc:	0176007f 	.word	0x0176007f
   129e0:	017602c0 	.word	0x017602c0
   129e4:	00ea02fd 	.word	0x00ea02fd
   129e8:	007f02ed 	.word	0x007f02ed
   129ec:	02330176 	.word	0x02330176
   129f0:	0569007c 	.word	0x0569007c
   129f4:	01760176 	.word	0x01760176
   129f8:	0176056b 	.word	0x0176056b
   129fc:	007c      	.short	0x007c
   129fe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12a02:	2200      	movs	r2, #0
   12a04:	f818 1b01 	ldrb.w	r1, [r8], #1
   12a08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   12a0c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   12a10:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12a14:	2b09      	cmp	r3, #9
   12a16:	d9f5      	bls.n	12a04 <_vfiprintf_r+0x1b4>
   12a18:	9206      	str	r2, [sp, #24]
   12a1a:	e78e      	b.n	1293a <_vfiprintf_r+0xea>
   12a1c:	4658      	mov	r0, fp
   12a1e:	f7fe fa7d 	bl	10f1c <_localeconv_r>
   12a22:	6843      	ldr	r3, [r0, #4]
   12a24:	930d      	str	r3, [sp, #52]	; 0x34
   12a26:	4618      	mov	r0, r3
   12a28:	f7f9 fb8a 	bl	c140 <strlen>
   12a2c:	900e      	str	r0, [sp, #56]	; 0x38
   12a2e:	4605      	mov	r5, r0
   12a30:	4658      	mov	r0, fp
   12a32:	f7fe fa73 	bl	10f1c <_localeconv_r>
   12a36:	6883      	ldr	r3, [r0, #8]
   12a38:	930b      	str	r3, [sp, #44]	; 0x2c
   12a3a:	2d00      	cmp	r5, #0
   12a3c:	f040 84d6 	bne.w	133ec <_vfiprintf_r+0xb9c>
   12a40:	f898 1000 	ldrb.w	r1, [r8]
   12a44:	e777      	b.n	12936 <_vfiprintf_r+0xe6>
   12a46:	f898 1000 	ldrb.w	r1, [r8]
   12a4a:	f046 0620 	orr.w	r6, r6, #32
   12a4e:	e772      	b.n	12936 <_vfiprintf_r+0xe6>
   12a50:	f046 0610 	orr.w	r6, r6, #16
   12a54:	06b4      	lsls	r4, r6, #26
   12a56:	f140 818e 	bpl.w	12d76 <_vfiprintf_r+0x526>
   12a5a:	9b07      	ldr	r3, [sp, #28]
   12a5c:	3307      	adds	r3, #7
   12a5e:	f023 0307 	bic.w	r3, r3, #7
   12a62:	461a      	mov	r2, r3
   12a64:	6859      	ldr	r1, [r3, #4]
   12a66:	f852 3b08 	ldr.w	r3, [r2], #8
   12a6a:	9207      	str	r2, [sp, #28]
   12a6c:	460a      	mov	r2, r1
   12a6e:	2900      	cmp	r1, #0
   12a70:	f2c0 8470 	blt.w	13354 <_vfiprintf_r+0xb04>
   12a74:	1c79      	adds	r1, r7, #1
   12a76:	f000 85a2 	beq.w	135be <_vfiprintf_r+0xd6e>
   12a7a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   12a7e:	9103      	str	r1, [sp, #12]
   12a80:	ea53 0102 	orrs.w	r1, r3, r2
   12a84:	f000 843f 	beq.w	13306 <_vfiprintf_r+0xab6>
   12a88:	2b0a      	cmp	r3, #10
   12a8a:	f172 0100 	sbcs.w	r1, r2, #0
   12a8e:	f080 8541 	bcs.w	13514 <_vfiprintf_r+0xcc4>
   12a92:	3330      	adds	r3, #48	; 0x30
   12a94:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12a98:	9e03      	ldr	r6, [sp, #12]
   12a9a:	2301      	movs	r3, #1
   12a9c:	9304      	str	r3, [sp, #16]
   12a9e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12aa2:	9b04      	ldr	r3, [sp, #16]
   12aa4:	42bb      	cmp	r3, r7
   12aa6:	bfb8      	it	lt
   12aa8:	463b      	movlt	r3, r7
   12aaa:	9303      	str	r3, [sp, #12]
   12aac:	2300      	movs	r3, #0
   12aae:	9308      	str	r3, [sp, #32]
   12ab0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12ab4:	2b00      	cmp	r3, #0
   12ab6:	f000 80cb 	beq.w	12c50 <_vfiprintf_r+0x400>
   12aba:	9b03      	ldr	r3, [sp, #12]
   12abc:	3301      	adds	r3, #1
   12abe:	9303      	str	r3, [sp, #12]
   12ac0:	e0c6      	b.n	12c50 <_vfiprintf_r+0x400>
   12ac2:	ee18 1a10 	vmov	r1, s16
   12ac6:	4658      	mov	r0, fp
   12ac8:	ee18 5a10 	vmov	r5, s16
   12acc:	f001 f87c 	bl	13bc8 <__swsetup_r>
   12ad0:	2800      	cmp	r0, #0
   12ad2:	f040 8652 	bne.w	1377a <_vfiprintf_r+0xf2a>
   12ad6:	89aa      	ldrh	r2, [r5, #12]
   12ad8:	f002 031a 	and.w	r3, r2, #26
   12adc:	2b0a      	cmp	r3, #10
   12ade:	f47f aef6 	bne.w	128ce <_vfiprintf_r+0x7e>
   12ae2:	ee18 1a10 	vmov	r1, s16
   12ae6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   12aea:	2b00      	cmp	r3, #0
   12aec:	f6ff aeef 	blt.w	128ce <_vfiprintf_r+0x7e>
   12af0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12af2:	07db      	lsls	r3, r3, #31
   12af4:	d402      	bmi.n	12afc <_vfiprintf_r+0x2ac>
   12af6:	0597      	lsls	r7, r2, #22
   12af8:	f140 8612 	bpl.w	13720 <_vfiprintf_r+0xed0>
   12afc:	ee18 1a10 	vmov	r1, s16
   12b00:	4623      	mov	r3, r4
   12b02:	4632      	mov	r2, r6
   12b04:	4658      	mov	r0, fp
   12b06:	f000 fe69 	bl	137dc <__sbprintf>
   12b0a:	9005      	str	r0, [sp, #20]
   12b0c:	9805      	ldr	r0, [sp, #20]
   12b0e:	b045      	add	sp, #276	; 0x114
   12b10:	ecbd 8b02 	vpop	{d8}
   12b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b18:	f046 0610 	orr.w	r6, r6, #16
   12b1c:	f016 0220 	ands.w	r2, r6, #32
   12b20:	f000 8136 	beq.w	12d90 <_vfiprintf_r+0x540>
   12b24:	9b07      	ldr	r3, [sp, #28]
   12b26:	3307      	adds	r3, #7
   12b28:	f023 0307 	bic.w	r3, r3, #7
   12b2c:	4619      	mov	r1, r3
   12b2e:	685a      	ldr	r2, [r3, #4]
   12b30:	f851 3b08 	ldr.w	r3, [r1], #8
   12b34:	9107      	str	r1, [sp, #28]
   12b36:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12b3a:	9103      	str	r1, [sp, #12]
   12b3c:	2100      	movs	r1, #0
   12b3e:	2000      	movs	r0, #0
   12b40:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12b44:	1c78      	adds	r0, r7, #1
   12b46:	f000 8210 	beq.w	12f6a <_vfiprintf_r+0x71a>
   12b4a:	9803      	ldr	r0, [sp, #12]
   12b4c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   12b50:	ea53 0002 	orrs.w	r0, r3, r2
   12b54:	f040 8208 	bne.w	12f68 <_vfiprintf_r+0x718>
   12b58:	2f00      	cmp	r7, #0
   12b5a:	f040 8538 	bne.w	135ce <_vfiprintf_r+0xd7e>
   12b5e:	2900      	cmp	r1, #0
   12b60:	f040 83d5 	bne.w	1330e <_vfiprintf_r+0xabe>
   12b64:	9b03      	ldr	r3, [sp, #12]
   12b66:	f013 0301 	ands.w	r3, r3, #1
   12b6a:	9304      	str	r3, [sp, #16]
   12b6c:	f000 8411 	beq.w	13392 <_vfiprintf_r+0xb42>
   12b70:	2330      	movs	r3, #48	; 0x30
   12b72:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12b76:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12b7a:	e792      	b.n	12aa2 <_vfiprintf_r+0x252>
   12b7c:	2208      	movs	r2, #8
   12b7e:	2100      	movs	r1, #0
   12b80:	4650      	mov	r0, sl
   12b82:	f7f8 ff43 	bl	ba0c <memset>
   12b86:	2301      	movs	r3, #1
   12b88:	441c      	add	r4, r3
   12b8a:	e6ad      	b.n	128e8 <_vfiprintf_r+0x98>
   12b8c:	200085e8 	.word	0x200085e8
   12b90:	ebb4 0608 	subs.w	r6, r4, r8
   12b94:	4605      	mov	r5, r0
   12b96:	d01b      	beq.n	12bd0 <_vfiprintf_r+0x380>
   12b98:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12b9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12b9c:	3301      	adds	r3, #1
   12b9e:	4432      	add	r2, r6
   12ba0:	2b07      	cmp	r3, #7
   12ba2:	e9c9 8600 	strd	r8, r6, [r9]
   12ba6:	921a      	str	r2, [sp, #104]	; 0x68
   12ba8:	9319      	str	r3, [sp, #100]	; 0x64
   12baa:	dd1c      	ble.n	12be6 <_vfiprintf_r+0x396>
   12bac:	2a00      	cmp	r2, #0
   12bae:	f000 83a6 	beq.w	132fe <_vfiprintf_r+0xaae>
   12bb2:	ee18 1a10 	vmov	r1, s16
   12bb6:	aa18      	add	r2, sp, #96	; 0x60
   12bb8:	4658      	mov	r0, fp
   12bba:	f7ff fe0d 	bl	127d8 <__sprint_r.part.0>
   12bbe:	bb20      	cbnz	r0, 12c0a <_vfiprintf_r+0x3ba>
   12bc0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12bc4:	9b05      	ldr	r3, [sp, #20]
   12bc6:	4433      	add	r3, r6
   12bc8:	9305      	str	r3, [sp, #20]
   12bca:	2d00      	cmp	r5, #0
   12bcc:	f47f aea8 	bne.w	12920 <_vfiprintf_r+0xd0>
   12bd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12bd2:	2b00      	cmp	r3, #0
   12bd4:	f040 85c1 	bne.w	1375a <_vfiprintf_r+0xf0a>
   12bd8:	ee18 3a10 	vmov	r3, s16
   12bdc:	2200      	movs	r2, #0
   12bde:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12be2:	9219      	str	r2, [sp, #100]	; 0x64
   12be4:	e015      	b.n	12c12 <_vfiprintf_r+0x3c2>
   12be6:	f109 0908 	add.w	r9, r9, #8
   12bea:	e7eb      	b.n	12bc4 <_vfiprintf_r+0x374>
   12bec:	ee18 1a10 	vmov	r1, s16
   12bf0:	aa18      	add	r2, sp, #96	; 0x60
   12bf2:	4658      	mov	r0, fp
   12bf4:	f7ff fdf0 	bl	127d8 <__sprint_r.part.0>
   12bf8:	2800      	cmp	r0, #0
   12bfa:	f000 80a6 	beq.w	12d4a <_vfiprintf_r+0x4fa>
   12bfe:	9b08      	ldr	r3, [sp, #32]
   12c00:	b11b      	cbz	r3, 12c0a <_vfiprintf_r+0x3ba>
   12c02:	9908      	ldr	r1, [sp, #32]
   12c04:	4658      	mov	r0, fp
   12c06:	f7f9 fbad 	bl	c364 <_free_r>
   12c0a:	ee18 3a10 	vmov	r3, s16
   12c0e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12c12:	ee18 2a10 	vmov	r2, s16
   12c16:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12c18:	f012 0f01 	tst.w	r2, #1
   12c1c:	b29a      	uxth	r2, r3
   12c1e:	f000 80a0 	beq.w	12d62 <_vfiprintf_r+0x512>
   12c22:	0650      	lsls	r0, r2, #25
   12c24:	f100 85b2 	bmi.w	1378c <_vfiprintf_r+0xf3c>
   12c28:	9805      	ldr	r0, [sp, #20]
   12c2a:	b045      	add	sp, #276	; 0x114
   12c2c:	ecbd 8b02 	vpop	{d8}
   12c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c34:	2900      	cmp	r1, #0
   12c36:	d0cb      	beq.n	12bd0 <_vfiprintf_r+0x380>
   12c38:	2300      	movs	r3, #0
   12c3a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12c3e:	2301      	movs	r3, #1
   12c40:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12c44:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12c48:	ac2b      	add	r4, sp, #172	; 0xac
   12c4a:	2300      	movs	r3, #0
   12c4c:	9308      	str	r3, [sp, #32]
   12c4e:	461f      	mov	r7, r3
   12c50:	f016 0302 	ands.w	r3, r6, #2
   12c54:	9309      	str	r3, [sp, #36]	; 0x24
   12c56:	d002      	beq.n	12c5e <_vfiprintf_r+0x40e>
   12c58:	9b03      	ldr	r3, [sp, #12]
   12c5a:	3302      	adds	r3, #2
   12c5c:	9303      	str	r3, [sp, #12]
   12c5e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12c62:	930a      	str	r3, [sp, #40]	; 0x28
   12c64:	d105      	bne.n	12c72 <_vfiprintf_r+0x422>
   12c66:	9b06      	ldr	r3, [sp, #24]
   12c68:	9a03      	ldr	r2, [sp, #12]
   12c6a:	1a9d      	subs	r5, r3, r2
   12c6c:	2d00      	cmp	r5, #0
   12c6e:	f300 827b 	bgt.w	13168 <_vfiprintf_r+0x918>
   12c72:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12c76:	1c41      	adds	r1, r0, #1
   12c78:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12c7c:	b182      	cbz	r2, 12ca0 <_vfiprintf_r+0x450>
   12c7e:	2201      	movs	r2, #1
   12c80:	3301      	adds	r3, #1
   12c82:	f8c9 2004 	str.w	r2, [r9, #4]
   12c86:	2907      	cmp	r1, #7
   12c88:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12c8c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12c90:	f8c9 2000 	str.w	r2, [r9]
   12c94:	f300 824a 	bgt.w	1312c <_vfiprintf_r+0x8dc>
   12c98:	4608      	mov	r0, r1
   12c9a:	f109 0908 	add.w	r9, r9, #8
   12c9e:	3101      	adds	r1, #1
   12ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12ca2:	b1e2      	cbz	r2, 12cde <_vfiprintf_r+0x48e>
   12ca4:	aa11      	add	r2, sp, #68	; 0x44
   12ca6:	3302      	adds	r3, #2
   12ca8:	f8c9 2000 	str.w	r2, [r9]
   12cac:	2907      	cmp	r1, #7
   12cae:	f04f 0202 	mov.w	r2, #2
   12cb2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12cb6:	f8c9 2004 	str.w	r2, [r9, #4]
   12cba:	f340 8250 	ble.w	1315e <_vfiprintf_r+0x90e>
   12cbe:	2b00      	cmp	r3, #0
   12cc0:	f000 8343 	beq.w	1334a <_vfiprintf_r+0xafa>
   12cc4:	ee18 1a10 	vmov	r1, s16
   12cc8:	aa18      	add	r2, sp, #96	; 0x60
   12cca:	4658      	mov	r0, fp
   12ccc:	f7ff fd84 	bl	127d8 <__sprint_r.part.0>
   12cd0:	2800      	cmp	r0, #0
   12cd2:	d194      	bne.n	12bfe <_vfiprintf_r+0x3ae>
   12cd4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12cd8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12cdc:	1c41      	adds	r1, r0, #1
   12cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12ce0:	2a80      	cmp	r2, #128	; 0x80
   12ce2:	f000 8184 	beq.w	12fee <_vfiprintf_r+0x79e>
   12ce6:	9a04      	ldr	r2, [sp, #16]
   12ce8:	1abd      	subs	r5, r7, r2
   12cea:	2d00      	cmp	r5, #0
   12cec:	f300 81d7 	bgt.w	1309e <_vfiprintf_r+0x84e>
   12cf0:	9a04      	ldr	r2, [sp, #16]
   12cf2:	f8c9 4000 	str.w	r4, [r9]
   12cf6:	4413      	add	r3, r2
   12cf8:	2907      	cmp	r1, #7
   12cfa:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12cfe:	f8c9 2004 	str.w	r2, [r9, #4]
   12d02:	f340 816e 	ble.w	12fe2 <_vfiprintf_r+0x792>
   12d06:	2b00      	cmp	r3, #0
   12d08:	f000 8275 	beq.w	131f6 <_vfiprintf_r+0x9a6>
   12d0c:	ee18 1a10 	vmov	r1, s16
   12d10:	aa18      	add	r2, sp, #96	; 0x60
   12d12:	4658      	mov	r0, fp
   12d14:	f7ff fd60 	bl	127d8 <__sprint_r.part.0>
   12d18:	2800      	cmp	r0, #0
   12d1a:	f47f af70 	bne.w	12bfe <_vfiprintf_r+0x3ae>
   12d1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12d20:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d24:	0775      	lsls	r5, r6, #29
   12d26:	d505      	bpl.n	12d34 <_vfiprintf_r+0x4e4>
   12d28:	9a06      	ldr	r2, [sp, #24]
   12d2a:	9903      	ldr	r1, [sp, #12]
   12d2c:	1a54      	subs	r4, r2, r1
   12d2e:	2c00      	cmp	r4, #0
   12d30:	f300 826b 	bgt.w	1320a <_vfiprintf_r+0x9ba>
   12d34:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12d38:	9803      	ldr	r0, [sp, #12]
   12d3a:	4281      	cmp	r1, r0
   12d3c:	bfac      	ite	ge
   12d3e:	1852      	addge	r2, r2, r1
   12d40:	1812      	addlt	r2, r2, r0
   12d42:	9205      	str	r2, [sp, #20]
   12d44:	2b00      	cmp	r3, #0
   12d46:	f47f af51 	bne.w	12bec <_vfiprintf_r+0x39c>
   12d4a:	9908      	ldr	r1, [sp, #32]
   12d4c:	2300      	movs	r3, #0
   12d4e:	9319      	str	r3, [sp, #100]	; 0x64
   12d50:	2900      	cmp	r1, #0
   12d52:	f000 8149 	beq.w	12fe8 <_vfiprintf_r+0x798>
   12d56:	4658      	mov	r0, fp
   12d58:	f7f9 fb04 	bl	c364 <_free_r>
   12d5c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d60:	e5c1      	b.n	128e6 <_vfiprintf_r+0x96>
   12d62:	059c      	lsls	r4, r3, #22
   12d64:	f53f af5d 	bmi.w	12c22 <_vfiprintf_r+0x3d2>
   12d68:	ee18 4a10 	vmov	r4, s16
   12d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12d6e:	f7f8 ffb3 	bl	bcd8 <__retarget_lock_release_recursive>
   12d72:	89a2      	ldrh	r2, [r4, #12]
   12d74:	e755      	b.n	12c22 <_vfiprintf_r+0x3d2>
   12d76:	06f0      	lsls	r0, r6, #27
   12d78:	9a07      	ldr	r2, [sp, #28]
   12d7a:	f100 831f 	bmi.w	133bc <_vfiprintf_r+0xb6c>
   12d7e:	0671      	lsls	r1, r6, #25
   12d80:	f140 8319 	bpl.w	133b6 <_vfiprintf_r+0xb66>
   12d84:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12d88:	9207      	str	r2, [sp, #28]
   12d8a:	17da      	asrs	r2, r3, #31
   12d8c:	4611      	mov	r1, r2
   12d8e:	e66e      	b.n	12a6e <_vfiprintf_r+0x21e>
   12d90:	f016 0310 	ands.w	r3, r6, #16
   12d94:	9907      	ldr	r1, [sp, #28]
   12d96:	f040 8309 	bne.w	133ac <_vfiprintf_r+0xb5c>
   12d9a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   12d9e:	f000 8301 	beq.w	133a4 <_vfiprintf_r+0xb54>
   12da2:	461a      	mov	r2, r3
   12da4:	f851 3b04 	ldr.w	r3, [r1], #4
   12da8:	9107      	str	r1, [sp, #28]
   12daa:	b29b      	uxth	r3, r3
   12dac:	e6c3      	b.n	12b36 <_vfiprintf_r+0x2e6>
   12dae:	9b07      	ldr	r3, [sp, #28]
   12db0:	461a      	mov	r2, r3
   12db2:	2300      	movs	r3, #0
   12db4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12db8:	4613      	mov	r3, r2
   12dba:	f853 4b04 	ldr.w	r4, [r3], #4
   12dbe:	9303      	str	r3, [sp, #12]
   12dc0:	2c00      	cmp	r4, #0
   12dc2:	f000 8412 	beq.w	135ea <_vfiprintf_r+0xd9a>
   12dc6:	2953      	cmp	r1, #83	; 0x53
   12dc8:	f000 8365 	beq.w	13496 <_vfiprintf_r+0xc46>
   12dcc:	f016 0510 	ands.w	r5, r6, #16
   12dd0:	f040 8361 	bne.w	13496 <_vfiprintf_r+0xc46>
   12dd4:	1c7b      	adds	r3, r7, #1
   12dd6:	f000 84b3 	beq.w	13740 <_vfiprintf_r+0xef0>
   12dda:	463a      	mov	r2, r7
   12ddc:	4629      	mov	r1, r5
   12dde:	4620      	mov	r0, r4
   12de0:	f7f9 f94e 	bl	c080 <memchr>
   12de4:	9008      	str	r0, [sp, #32]
   12de6:	2800      	cmp	r0, #0
   12de8:	f000 849f 	beq.w	1372a <_vfiprintf_r+0xeda>
   12dec:	1b03      	subs	r3, r0, r4
   12dee:	9a03      	ldr	r2, [sp, #12]
   12df0:	9304      	str	r3, [sp, #16]
   12df2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12df6:	462f      	mov	r7, r5
   12df8:	9207      	str	r2, [sp, #28]
   12dfa:	9303      	str	r3, [sp, #12]
   12dfc:	9508      	str	r5, [sp, #32]
   12dfe:	e657      	b.n	12ab0 <_vfiprintf_r+0x260>
   12e00:	2943      	cmp	r1, #67	; 0x43
   12e02:	d002      	beq.n	12e0a <_vfiprintf_r+0x5ba>
   12e04:	06f5      	lsls	r5, r6, #27
   12e06:	f140 832d 	bpl.w	13464 <_vfiprintf_r+0xc14>
   12e0a:	9d07      	ldr	r5, [sp, #28]
   12e0c:	2208      	movs	r2, #8
   12e0e:	2100      	movs	r1, #0
   12e10:	a816      	add	r0, sp, #88	; 0x58
   12e12:	ac2b      	add	r4, sp, #172	; 0xac
   12e14:	f7f8 fdfa 	bl	ba0c <memset>
   12e18:	ab16      	add	r3, sp, #88	; 0x58
   12e1a:	f855 2b04 	ldr.w	r2, [r5], #4
   12e1e:	4621      	mov	r1, r4
   12e20:	4658      	mov	r0, fp
   12e22:	f7ff fa77 	bl	12314 <_wcrtomb_r>
   12e26:	4603      	mov	r3, r0
   12e28:	3301      	adds	r3, #1
   12e2a:	9004      	str	r0, [sp, #16]
   12e2c:	f000 84b3 	beq.w	13796 <_vfiprintf_r+0xf46>
   12e30:	9b04      	ldr	r3, [sp, #16]
   12e32:	9507      	str	r5, [sp, #28]
   12e34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12e38:	9303      	str	r3, [sp, #12]
   12e3a:	2300      	movs	r3, #0
   12e3c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12e40:	e703      	b.n	12c4a <_vfiprintf_r+0x3fa>
   12e42:	9b07      	ldr	r3, [sp, #28]
   12e44:	f853 2b04 	ldr.w	r2, [r3], #4
   12e48:	9206      	str	r2, [sp, #24]
   12e4a:	2a00      	cmp	r2, #0
   12e4c:	f280 829c 	bge.w	13388 <_vfiprintf_r+0xb38>
   12e50:	9a06      	ldr	r2, [sp, #24]
   12e52:	4252      	negs	r2, r2
   12e54:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12e58:	f898 1000 	ldrb.w	r1, [r8]
   12e5c:	f046 0604 	orr.w	r6, r6, #4
   12e60:	e569      	b.n	12936 <_vfiprintf_r+0xe6>
   12e62:	f898 1000 	ldrb.w	r1, [r8]
   12e66:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12e6a:	e564      	b.n	12936 <_vfiprintf_r+0xe6>
   12e6c:	f898 1000 	ldrb.w	r1, [r8]
   12e70:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12e74:	e55f      	b.n	12936 <_vfiprintf_r+0xe6>
   12e76:	4642      	mov	r2, r8
   12e78:	f812 1b01 	ldrb.w	r1, [r2], #1
   12e7c:	292a      	cmp	r1, #42	; 0x2a
   12e7e:	f000 8496 	beq.w	137ae <_vfiprintf_r+0xf5e>
   12e82:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12e86:	2b09      	cmp	r3, #9
   12e88:	4690      	mov	r8, r2
   12e8a:	f04f 0700 	mov.w	r7, #0
   12e8e:	f63f ad54 	bhi.w	1293a <_vfiprintf_r+0xea>
   12e92:	f818 1b01 	ldrb.w	r1, [r8], #1
   12e96:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12e9a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   12e9e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12ea2:	2b09      	cmp	r3, #9
   12ea4:	d9f5      	bls.n	12e92 <_vfiprintf_r+0x642>
   12ea6:	e548      	b.n	1293a <_vfiprintf_r+0xea>
   12ea8:	f898 1000 	ldrb.w	r1, [r8]
   12eac:	f046 0601 	orr.w	r6, r6, #1
   12eb0:	e541      	b.n	12936 <_vfiprintf_r+0xe6>
   12eb2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12eb6:	2b00      	cmp	r3, #0
   12eb8:	f47f adc2 	bne.w	12a40 <_vfiprintf_r+0x1f0>
   12ebc:	2320      	movs	r3, #32
   12ebe:	f898 1000 	ldrb.w	r1, [r8]
   12ec2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12ec6:	e536      	b.n	12936 <_vfiprintf_r+0xe6>
   12ec8:	f898 1000 	ldrb.w	r1, [r8]
   12ecc:	296c      	cmp	r1, #108	; 0x6c
   12ece:	bf03      	ittte	eq
   12ed0:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12ed4:	f046 0620 	orreq.w	r6, r6, #32
   12ed8:	f108 0801 	addeq.w	r8, r8, #1
   12edc:	f046 0610 	orrne.w	r6, r6, #16
   12ee0:	e529      	b.n	12936 <_vfiprintf_r+0xe6>
   12ee2:	f898 1000 	ldrb.w	r1, [r8]
   12ee6:	2968      	cmp	r1, #104	; 0x68
   12ee8:	bf03      	ittte	eq
   12eea:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12eee:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12ef2:	f108 0801 	addeq.w	r8, r8, #1
   12ef6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12efa:	e51c      	b.n	12936 <_vfiprintf_r+0xe6>
   12efc:	f046 0310 	orr.w	r3, r6, #16
   12f00:	9303      	str	r3, [sp, #12]
   12f02:	9b03      	ldr	r3, [sp, #12]
   12f04:	f013 0220 	ands.w	r2, r3, #32
   12f08:	f000 8206 	beq.w	13318 <_vfiprintf_r+0xac8>
   12f0c:	9b07      	ldr	r3, [sp, #28]
   12f0e:	3307      	adds	r3, #7
   12f10:	f023 0307 	bic.w	r3, r3, #7
   12f14:	4619      	mov	r1, r3
   12f16:	685a      	ldr	r2, [r3, #4]
   12f18:	f851 3b08 	ldr.w	r3, [r1], #8
   12f1c:	9107      	str	r1, [sp, #28]
   12f1e:	2101      	movs	r1, #1
   12f20:	e60d      	b.n	12b3e <_vfiprintf_r+0x2ee>
   12f22:	9a07      	ldr	r2, [sp, #28]
   12f24:	f046 0302 	orr.w	r3, r6, #2
   12f28:	9303      	str	r3, [sp, #12]
   12f2a:	f852 3b04 	ldr.w	r3, [r2], #4
   12f2e:	9207      	str	r2, [sp, #28]
   12f30:	f647 0230 	movw	r2, #30768	; 0x7830
   12f34:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12f38:	4ab8      	ldr	r2, [pc, #736]	; (1321c <_vfiprintf_r+0x9cc>)
   12f3a:	920c      	str	r2, [sp, #48]	; 0x30
   12f3c:	2102      	movs	r1, #2
   12f3e:	2200      	movs	r2, #0
   12f40:	e5fd      	b.n	12b3e <_vfiprintf_r+0x2ee>
   12f42:	06b7      	lsls	r7, r6, #26
   12f44:	f100 8248 	bmi.w	133d8 <_vfiprintf_r+0xb88>
   12f48:	06f5      	lsls	r5, r6, #27
   12f4a:	f100 8346 	bmi.w	135da <_vfiprintf_r+0xd8a>
   12f4e:	0674      	lsls	r4, r6, #25
   12f50:	f100 83d5 	bmi.w	136fe <_vfiprintf_r+0xeae>
   12f54:	05b0      	lsls	r0, r6, #22
   12f56:	f140 8340 	bpl.w	135da <_vfiprintf_r+0xd8a>
   12f5a:	9b07      	ldr	r3, [sp, #28]
   12f5c:	9905      	ldr	r1, [sp, #20]
   12f5e:	f853 2b04 	ldr.w	r2, [r3], #4
   12f62:	9307      	str	r3, [sp, #28]
   12f64:	7011      	strb	r1, [r2, #0]
   12f66:	e4be      	b.n	128e6 <_vfiprintf_r+0x96>
   12f68:	9603      	str	r6, [sp, #12]
   12f6a:	2901      	cmp	r1, #1
   12f6c:	f43f ad8c 	beq.w	12a88 <_vfiprintf_r+0x238>
   12f70:	2902      	cmp	r1, #2
   12f72:	ac44      	add	r4, sp, #272	; 0x110
   12f74:	d111      	bne.n	12f9a <_vfiprintf_r+0x74a>
   12f76:	980c      	ldr	r0, [sp, #48]	; 0x30
   12f78:	f003 010f 	and.w	r1, r3, #15
   12f7c:	091b      	lsrs	r3, r3, #4
   12f7e:	5c41      	ldrb	r1, [r0, r1]
   12f80:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12f84:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12f88:	0912      	lsrs	r2, r2, #4
   12f8a:	ea53 0102 	orrs.w	r1, r3, r2
   12f8e:	d1f3      	bne.n	12f78 <_vfiprintf_r+0x728>
   12f90:	9e03      	ldr	r6, [sp, #12]
   12f92:	ab44      	add	r3, sp, #272	; 0x110
   12f94:	1b1b      	subs	r3, r3, r4
   12f96:	9304      	str	r3, [sp, #16]
   12f98:	e583      	b.n	12aa2 <_vfiprintf_r+0x252>
   12f9a:	f003 0107 	and.w	r1, r3, #7
   12f9e:	08db      	lsrs	r3, r3, #3
   12fa0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12fa4:	08d2      	lsrs	r2, r2, #3
   12fa6:	3130      	adds	r1, #48	; 0x30
   12fa8:	ea53 0502 	orrs.w	r5, r3, r2
   12fac:	4620      	mov	r0, r4
   12fae:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12fb2:	d1f2      	bne.n	12f9a <_vfiprintf_r+0x74a>
   12fb4:	9e03      	ldr	r6, [sp, #12]
   12fb6:	07f3      	lsls	r3, r6, #31
   12fb8:	d5eb      	bpl.n	12f92 <_vfiprintf_r+0x742>
   12fba:	2930      	cmp	r1, #48	; 0x30
   12fbc:	d0e8      	beq.n	12f90 <_vfiprintf_r+0x740>
   12fbe:	2330      	movs	r3, #48	; 0x30
   12fc0:	3802      	subs	r0, #2
   12fc2:	f804 3c01 	strb.w	r3, [r4, #-1]
   12fc6:	ab44      	add	r3, sp, #272	; 0x110
   12fc8:	1a1b      	subs	r3, r3, r0
   12fca:	9e03      	ldr	r6, [sp, #12]
   12fcc:	9304      	str	r3, [sp, #16]
   12fce:	4604      	mov	r4, r0
   12fd0:	e567      	b.n	12aa2 <_vfiprintf_r+0x252>
   12fd2:	9b04      	ldr	r3, [sp, #16]
   12fd4:	941b      	str	r4, [sp, #108]	; 0x6c
   12fd6:	2201      	movs	r2, #1
   12fd8:	931c      	str	r3, [sp, #112]	; 0x70
   12fda:	931a      	str	r3, [sp, #104]	; 0x68
   12fdc:	9219      	str	r2, [sp, #100]	; 0x64
   12fde:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12fe2:	f109 0908 	add.w	r9, r9, #8
   12fe6:	e69d      	b.n	12d24 <_vfiprintf_r+0x4d4>
   12fe8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12fec:	e47b      	b.n	128e6 <_vfiprintf_r+0x96>
   12fee:	9a06      	ldr	r2, [sp, #24]
   12ff0:	9d03      	ldr	r5, [sp, #12]
   12ff2:	1b55      	subs	r5, r2, r5
   12ff4:	2d00      	cmp	r5, #0
   12ff6:	f77f ae76 	ble.w	12ce6 <_vfiprintf_r+0x496>
   12ffa:	2d10      	cmp	r5, #16
   12ffc:	f340 83bb 	ble.w	13776 <_vfiprintf_r+0xf26>
   13000:	9409      	str	r4, [sp, #36]	; 0x24
   13002:	ee18 4a10 	vmov	r4, s16
   13006:	e007      	b.n	13018 <_vfiprintf_r+0x7c8>
   13008:	f100 0c02 	add.w	ip, r0, #2
   1300c:	f109 0908 	add.w	r9, r9, #8
   13010:	4610      	mov	r0, r2
   13012:	3d10      	subs	r5, #16
   13014:	2d10      	cmp	r5, #16
   13016:	dd1e      	ble.n	13056 <_vfiprintf_r+0x806>
   13018:	4981      	ldr	r1, [pc, #516]	; (13220 <_vfiprintf_r+0x9d0>)
   1301a:	f8c9 1000 	str.w	r1, [r9]
   1301e:	1c42      	adds	r2, r0, #1
   13020:	3310      	adds	r3, #16
   13022:	2110      	movs	r1, #16
   13024:	2a07      	cmp	r2, #7
   13026:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1302a:	f8c9 1004 	str.w	r1, [r9, #4]
   1302e:	ddeb      	ble.n	13008 <_vfiprintf_r+0x7b8>
   13030:	aa18      	add	r2, sp, #96	; 0x60
   13032:	2b00      	cmp	r3, #0
   13034:	d074      	beq.n	13120 <_vfiprintf_r+0x8d0>
   13036:	4621      	mov	r1, r4
   13038:	4658      	mov	r0, fp
   1303a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1303e:	f7ff fbcb 	bl	127d8 <__sprint_r.part.0>
   13042:	2800      	cmp	r0, #0
   13044:	f47f addb 	bne.w	12bfe <_vfiprintf_r+0x3ae>
   13048:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1304c:	3d10      	subs	r5, #16
   1304e:	2d10      	cmp	r5, #16
   13050:	f100 0c01 	add.w	ip, r0, #1
   13054:	dce0      	bgt.n	13018 <_vfiprintf_r+0x7c8>
   13056:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13058:	4a71      	ldr	r2, [pc, #452]	; (13220 <_vfiprintf_r+0x9d0>)
   1305a:	f8c9 5004 	str.w	r5, [r9, #4]
   1305e:	442b      	add	r3, r5
   13060:	f1bc 0f07 	cmp.w	ip, #7
   13064:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   13068:	f8c9 2000 	str.w	r2, [r9]
   1306c:	f340 8194 	ble.w	13398 <_vfiprintf_r+0xb48>
   13070:	2b00      	cmp	r3, #0
   13072:	f000 831f 	beq.w	136b4 <_vfiprintf_r+0xe64>
   13076:	ee18 1a10 	vmov	r1, s16
   1307a:	aa18      	add	r2, sp, #96	; 0x60
   1307c:	4658      	mov	r0, fp
   1307e:	f7ff fbab 	bl	127d8 <__sprint_r.part.0>
   13082:	2800      	cmp	r0, #0
   13084:	f47f adbb 	bne.w	12bfe <_vfiprintf_r+0x3ae>
   13088:	9a04      	ldr	r2, [sp, #16]
   1308a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1308e:	1abd      	subs	r5, r7, r2
   13090:	2d00      	cmp	r5, #0
   13092:	f100 0101 	add.w	r1, r0, #1
   13096:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1309a:	f77f ae29 	ble.w	12cf0 <_vfiprintf_r+0x4a0>
   1309e:	2d10      	cmp	r5, #16
   130a0:	dd29      	ble.n	130f6 <_vfiprintf_r+0x8a6>
   130a2:	9409      	str	r4, [sp, #36]	; 0x24
   130a4:	2710      	movs	r7, #16
   130a6:	ee18 4a10 	vmov	r4, s16
   130aa:	e007      	b.n	130bc <_vfiprintf_r+0x86c>
   130ac:	f100 0c02 	add.w	ip, r0, #2
   130b0:	f109 0908 	add.w	r9, r9, #8
   130b4:	4610      	mov	r0, r2
   130b6:	3d10      	subs	r5, #16
   130b8:	2d10      	cmp	r5, #16
   130ba:	dd1a      	ble.n	130f2 <_vfiprintf_r+0x8a2>
   130bc:	1c42      	adds	r2, r0, #1
   130be:	4958      	ldr	r1, [pc, #352]	; (13220 <_vfiprintf_r+0x9d0>)
   130c0:	3310      	adds	r3, #16
   130c2:	2a07      	cmp	r2, #7
   130c4:	e9c9 1700 	strd	r1, r7, [r9]
   130c8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   130cc:	ddee      	ble.n	130ac <_vfiprintf_r+0x85c>
   130ce:	aa18      	add	r2, sp, #96	; 0x60
   130d0:	b303      	cbz	r3, 13114 <_vfiprintf_r+0x8c4>
   130d2:	4621      	mov	r1, r4
   130d4:	4658      	mov	r0, fp
   130d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130da:	f7ff fb7d 	bl	127d8 <__sprint_r.part.0>
   130de:	2800      	cmp	r0, #0
   130e0:	f47f ad8d 	bne.w	12bfe <_vfiprintf_r+0x3ae>
   130e4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   130e8:	3d10      	subs	r5, #16
   130ea:	2d10      	cmp	r5, #16
   130ec:	f100 0c01 	add.w	ip, r0, #1
   130f0:	dce4      	bgt.n	130bc <_vfiprintf_r+0x86c>
   130f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   130f4:	4661      	mov	r1, ip
   130f6:	4a4a      	ldr	r2, [pc, #296]	; (13220 <_vfiprintf_r+0x9d0>)
   130f8:	f8c9 5004 	str.w	r5, [r9, #4]
   130fc:	442b      	add	r3, r5
   130fe:	2907      	cmp	r1, #7
   13100:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13104:	f8c9 2000 	str.w	r2, [r9]
   13108:	f300 80e7 	bgt.w	132da <_vfiprintf_r+0xa8a>
   1310c:	f109 0908 	add.w	r9, r9, #8
   13110:	3101      	adds	r1, #1
   13112:	e5ed      	b.n	12cf0 <_vfiprintf_r+0x4a0>
   13114:	f04f 0c01 	mov.w	ip, #1
   13118:	4618      	mov	r0, r3
   1311a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1311e:	e7ca      	b.n	130b6 <_vfiprintf_r+0x866>
   13120:	f04f 0c01 	mov.w	ip, #1
   13124:	4618      	mov	r0, r3
   13126:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1312a:	e772      	b.n	13012 <_vfiprintf_r+0x7c2>
   1312c:	2b00      	cmp	r3, #0
   1312e:	f000 8104 	beq.w	1333a <_vfiprintf_r+0xaea>
   13132:	ee18 1a10 	vmov	r1, s16
   13136:	aa18      	add	r2, sp, #96	; 0x60
   13138:	4658      	mov	r0, fp
   1313a:	f7ff fb4d 	bl	127d8 <__sprint_r.part.0>
   1313e:	2800      	cmp	r0, #0
   13140:	f47f ad5d 	bne.w	12bfe <_vfiprintf_r+0x3ae>
   13144:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13148:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1314c:	1c41      	adds	r1, r0, #1
   1314e:	e5a7      	b.n	12ca0 <_vfiprintf_r+0x450>
   13150:	2302      	movs	r3, #2
   13152:	aa11      	add	r2, sp, #68	; 0x44
   13154:	931c      	str	r3, [sp, #112]	; 0x70
   13156:	921b      	str	r2, [sp, #108]	; 0x6c
   13158:	2101      	movs	r1, #1
   1315a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1315e:	4608      	mov	r0, r1
   13160:	f109 0908 	add.w	r9, r9, #8
   13164:	1c41      	adds	r1, r0, #1
   13166:	e5ba      	b.n	12cde <_vfiprintf_r+0x48e>
   13168:	2d10      	cmp	r5, #16
   1316a:	f340 82e5 	ble.w	13738 <_vfiprintf_r+0xee8>
   1316e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   13172:	940f      	str	r4, [sp, #60]	; 0x3c
   13174:	4608      	mov	r0, r1
   13176:	ee18 4a10 	vmov	r4, s16
   1317a:	e007      	b.n	1318c <_vfiprintf_r+0x93c>
   1317c:	f100 0c02 	add.w	ip, r0, #2
   13180:	f109 0908 	add.w	r9, r9, #8
   13184:	4610      	mov	r0, r2
   13186:	3d10      	subs	r5, #16
   13188:	2d10      	cmp	r5, #16
   1318a:	dd1d      	ble.n	131c8 <_vfiprintf_r+0x978>
   1318c:	4925      	ldr	r1, [pc, #148]	; (13224 <_vfiprintf_r+0x9d4>)
   1318e:	f8c9 1000 	str.w	r1, [r9]
   13192:	1c42      	adds	r2, r0, #1
   13194:	3310      	adds	r3, #16
   13196:	2110      	movs	r1, #16
   13198:	2a07      	cmp	r2, #7
   1319a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1319e:	f8c9 1004 	str.w	r1, [r9, #4]
   131a2:	ddeb      	ble.n	1317c <_vfiprintf_r+0x92c>
   131a4:	aa18      	add	r2, sp, #96	; 0x60
   131a6:	b303      	cbz	r3, 131ea <_vfiprintf_r+0x99a>
   131a8:	4621      	mov	r1, r4
   131aa:	4658      	mov	r0, fp
   131ac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131b0:	f7ff fb12 	bl	127d8 <__sprint_r.part.0>
   131b4:	2800      	cmp	r0, #0
   131b6:	f47f ad22 	bne.w	12bfe <_vfiprintf_r+0x3ae>
   131ba:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   131be:	3d10      	subs	r5, #16
   131c0:	2d10      	cmp	r5, #16
   131c2:	f100 0c01 	add.w	ip, r0, #1
   131c6:	dce1      	bgt.n	1318c <_vfiprintf_r+0x93c>
   131c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   131ca:	4660      	mov	r0, ip
   131cc:	4a15      	ldr	r2, [pc, #84]	; (13224 <_vfiprintf_r+0x9d4>)
   131ce:	f8c9 5004 	str.w	r5, [r9, #4]
   131d2:	442b      	add	r3, r5
   131d4:	2807      	cmp	r0, #7
   131d6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   131da:	f8c9 2000 	str.w	r2, [r9]
   131de:	f300 80c1 	bgt.w	13364 <_vfiprintf_r+0xb14>
   131e2:	f109 0908 	add.w	r9, r9, #8
   131e6:	1c41      	adds	r1, r0, #1
   131e8:	e546      	b.n	12c78 <_vfiprintf_r+0x428>
   131ea:	4618      	mov	r0, r3
   131ec:	f04f 0c01 	mov.w	ip, #1
   131f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131f4:	e7c7      	b.n	13186 <_vfiprintf_r+0x936>
   131f6:	0776      	lsls	r6, r6, #29
   131f8:	9319      	str	r3, [sp, #100]	; 0x64
   131fa:	d553      	bpl.n	132a4 <_vfiprintf_r+0xa54>
   131fc:	9a06      	ldr	r2, [sp, #24]
   131fe:	9903      	ldr	r1, [sp, #12]
   13200:	1a54      	subs	r4, r2, r1
   13202:	2c00      	cmp	r4, #0
   13204:	dd4e      	ble.n	132a4 <_vfiprintf_r+0xa54>
   13206:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1320a:	2c10      	cmp	r4, #16
   1320c:	f340 82b0 	ble.w	13770 <_vfiprintf_r+0xf20>
   13210:	9919      	ldr	r1, [sp, #100]	; 0x64
   13212:	ee18 6a10 	vmov	r6, s16
   13216:	2510      	movs	r5, #16
   13218:	e00d      	b.n	13236 <_vfiprintf_r+0x9e6>
   1321a:	bf00      	nop
   1321c:	20000c34 	.word	0x20000c34
   13220:	20008484 	.word	0x20008484
   13224:	200026f0 	.word	0x200026f0
   13228:	1c88      	adds	r0, r1, #2
   1322a:	f109 0908 	add.w	r9, r9, #8
   1322e:	4611      	mov	r1, r2
   13230:	3c10      	subs	r4, #16
   13232:	2c10      	cmp	r4, #16
   13234:	dd1a      	ble.n	1326c <_vfiprintf_r+0xa1c>
   13236:	1c4a      	adds	r2, r1, #1
   13238:	48b3      	ldr	r0, [pc, #716]	; (13508 <_vfiprintf_r+0xcb8>)
   1323a:	3310      	adds	r3, #16
   1323c:	2a07      	cmp	r2, #7
   1323e:	e9c9 0500 	strd	r0, r5, [r9]
   13242:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13246:	ddef      	ble.n	13228 <_vfiprintf_r+0x9d8>
   13248:	aa18      	add	r2, sp, #96	; 0x60
   1324a:	b333      	cbz	r3, 1329a <_vfiprintf_r+0xa4a>
   1324c:	4631      	mov	r1, r6
   1324e:	4658      	mov	r0, fp
   13250:	f7ff fac2 	bl	127d8 <__sprint_r.part.0>
   13254:	2800      	cmp	r0, #0
   13256:	f47f acd2 	bne.w	12bfe <_vfiprintf_r+0x3ae>
   1325a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1325e:	3c10      	subs	r4, #16
   13260:	2c10      	cmp	r4, #16
   13262:	f101 0001 	add.w	r0, r1, #1
   13266:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1326a:	dce4      	bgt.n	13236 <_vfiprintf_r+0x9e6>
   1326c:	4aa6      	ldr	r2, [pc, #664]	; (13508 <_vfiprintf_r+0xcb8>)
   1326e:	f8c9 4004 	str.w	r4, [r9, #4]
   13272:	4423      	add	r3, r4
   13274:	2807      	cmp	r0, #7
   13276:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1327a:	f8c9 2000 	str.w	r2, [r9]
   1327e:	f77f ad59 	ble.w	12d34 <_vfiprintf_r+0x4e4>
   13282:	b17b      	cbz	r3, 132a4 <_vfiprintf_r+0xa54>
   13284:	ee18 1a10 	vmov	r1, s16
   13288:	aa18      	add	r2, sp, #96	; 0x60
   1328a:	4658      	mov	r0, fp
   1328c:	f7ff faa4 	bl	127d8 <__sprint_r.part.0>
   13290:	2800      	cmp	r0, #0
   13292:	f47f acb4 	bne.w	12bfe <_vfiprintf_r+0x3ae>
   13296:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13298:	e54c      	b.n	12d34 <_vfiprintf_r+0x4e4>
   1329a:	2001      	movs	r0, #1
   1329c:	4619      	mov	r1, r3
   1329e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132a2:	e7c5      	b.n	13230 <_vfiprintf_r+0x9e0>
   132a4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   132a8:	9903      	ldr	r1, [sp, #12]
   132aa:	428a      	cmp	r2, r1
   132ac:	bfac      	ite	ge
   132ae:	189b      	addge	r3, r3, r2
   132b0:	185b      	addlt	r3, r3, r1
   132b2:	9305      	str	r3, [sp, #20]
   132b4:	e549      	b.n	12d4a <_vfiprintf_r+0x4fa>
   132b6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   132ba:	058f      	lsls	r7, r1, #22
   132bc:	ee18 3a10 	vmov	r3, s16
   132c0:	b28a      	uxth	r2, r1
   132c2:	f53f aae8 	bmi.w	12896 <_vfiprintf_r+0x46>
   132c6:	ee18 5a10 	vmov	r5, s16
   132ca:	6d98      	ldr	r0, [r3, #88]	; 0x58
   132cc:	f7f8 fd02 	bl	bcd4 <__retarget_lock_acquire_recursive>
   132d0:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   132d4:	b28a      	uxth	r2, r1
   132d6:	f7ff bade 	b.w	12896 <_vfiprintf_r+0x46>
   132da:	2b00      	cmp	r3, #0
   132dc:	f43f ae79 	beq.w	12fd2 <_vfiprintf_r+0x782>
   132e0:	ee18 1a10 	vmov	r1, s16
   132e4:	aa18      	add	r2, sp, #96	; 0x60
   132e6:	4658      	mov	r0, fp
   132e8:	f7ff fa76 	bl	127d8 <__sprint_r.part.0>
   132ec:	2800      	cmp	r0, #0
   132ee:	f47f ac86 	bne.w	12bfe <_vfiprintf_r+0x3ae>
   132f2:	9919      	ldr	r1, [sp, #100]	; 0x64
   132f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   132f6:	3101      	adds	r1, #1
   132f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132fc:	e4f8      	b.n	12cf0 <_vfiprintf_r+0x4a0>
   132fe:	9219      	str	r2, [sp, #100]	; 0x64
   13300:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13304:	e45e      	b.n	12bc4 <_vfiprintf_r+0x374>
   13306:	2f00      	cmp	r7, #0
   13308:	f47f abc3 	bne.w	12a92 <_vfiprintf_r+0x242>
   1330c:	9e03      	ldr	r6, [sp, #12]
   1330e:	2700      	movs	r7, #0
   13310:	9704      	str	r7, [sp, #16]
   13312:	ac44      	add	r4, sp, #272	; 0x110
   13314:	f7ff bbc5 	b.w	12aa2 <_vfiprintf_r+0x252>
   13318:	9b03      	ldr	r3, [sp, #12]
   1331a:	f013 0310 	ands.w	r3, r3, #16
   1331e:	d154      	bne.n	133ca <_vfiprintf_r+0xb7a>
   13320:	9a03      	ldr	r2, [sp, #12]
   13322:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   13326:	f000 816b 	beq.w	13600 <_vfiprintf_r+0xdb0>
   1332a:	9907      	ldr	r1, [sp, #28]
   1332c:	461a      	mov	r2, r3
   1332e:	f851 3b04 	ldr.w	r3, [r1], #4
   13332:	9107      	str	r1, [sp, #28]
   13334:	b29b      	uxth	r3, r3
   13336:	2101      	movs	r1, #1
   13338:	e401      	b.n	12b3e <_vfiprintf_r+0x2ee>
   1333a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1333c:	2a00      	cmp	r2, #0
   1333e:	d164      	bne.n	1340a <_vfiprintf_r+0xbba>
   13340:	4618      	mov	r0, r3
   13342:	2101      	movs	r1, #1
   13344:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13348:	e4c9      	b.n	12cde <_vfiprintf_r+0x48e>
   1334a:	2101      	movs	r1, #1
   1334c:	4618      	mov	r0, r3
   1334e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13352:	e4c4      	b.n	12cde <_vfiprintf_r+0x48e>
   13354:	425b      	negs	r3, r3
   13356:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1335a:	9603      	str	r6, [sp, #12]
   1335c:	202d      	movs	r0, #45	; 0x2d
   1335e:	2101      	movs	r1, #1
   13360:	f7ff bbee 	b.w	12b40 <_vfiprintf_r+0x2f0>
   13364:	2b00      	cmp	r3, #0
   13366:	f000 8088 	beq.w	1347a <_vfiprintf_r+0xc2a>
   1336a:	ee18 1a10 	vmov	r1, s16
   1336e:	aa18      	add	r2, sp, #96	; 0x60
   13370:	4658      	mov	r0, fp
   13372:	f7ff fa31 	bl	127d8 <__sprint_r.part.0>
   13376:	2800      	cmp	r0, #0
   13378:	f47f ac41 	bne.w	12bfe <_vfiprintf_r+0x3ae>
   1337c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13380:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13384:	1c41      	adds	r1, r0, #1
   13386:	e477      	b.n	12c78 <_vfiprintf_r+0x428>
   13388:	f898 1000 	ldrb.w	r1, [r8]
   1338c:	9307      	str	r3, [sp, #28]
   1338e:	f7ff bad2 	b.w	12936 <_vfiprintf_r+0xe6>
   13392:	ac44      	add	r4, sp, #272	; 0x110
   13394:	f7ff bb85 	b.w	12aa2 <_vfiprintf_r+0x252>
   13398:	f109 0908 	add.w	r9, r9, #8
   1339c:	f10c 0101 	add.w	r1, ip, #1
   133a0:	4660      	mov	r0, ip
   133a2:	e4a0      	b.n	12ce6 <_vfiprintf_r+0x496>
   133a4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   133a8:	f040 8197 	bne.w	136da <_vfiprintf_r+0xe8a>
   133ac:	f851 3b04 	ldr.w	r3, [r1], #4
   133b0:	9107      	str	r1, [sp, #28]
   133b2:	f7ff bbc0 	b.w	12b36 <_vfiprintf_r+0x2e6>
   133b6:	05b3      	lsls	r3, r6, #22
   133b8:	f100 8188 	bmi.w	136cc <_vfiprintf_r+0xe7c>
   133bc:	f852 3b04 	ldr.w	r3, [r2], #4
   133c0:	9207      	str	r2, [sp, #28]
   133c2:	17da      	asrs	r2, r3, #31
   133c4:	4611      	mov	r1, r2
   133c6:	f7ff bb52 	b.w	12a6e <_vfiprintf_r+0x21e>
   133ca:	9907      	ldr	r1, [sp, #28]
   133cc:	f851 3b04 	ldr.w	r3, [r1], #4
   133d0:	9107      	str	r1, [sp, #28]
   133d2:	2101      	movs	r1, #1
   133d4:	f7ff bbb3 	b.w	12b3e <_vfiprintf_r+0x2ee>
   133d8:	9b07      	ldr	r3, [sp, #28]
   133da:	9805      	ldr	r0, [sp, #20]
   133dc:	f853 1b04 	ldr.w	r1, [r3], #4
   133e0:	9307      	str	r3, [sp, #28]
   133e2:	17c2      	asrs	r2, r0, #31
   133e4:	e9c1 0200 	strd	r0, r2, [r1]
   133e8:	f7ff ba7d 	b.w	128e6 <_vfiprintf_r+0x96>
   133ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   133ee:	2b00      	cmp	r3, #0
   133f0:	f43f ab26 	beq.w	12a40 <_vfiprintf_r+0x1f0>
   133f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   133f6:	781b      	ldrb	r3, [r3, #0]
   133f8:	2b00      	cmp	r3, #0
   133fa:	f43f ab21 	beq.w	12a40 <_vfiprintf_r+0x1f0>
   133fe:	f898 1000 	ldrb.w	r1, [r8]
   13402:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   13406:	f7ff ba96 	b.w	12936 <_vfiprintf_r+0xe6>
   1340a:	2302      	movs	r3, #2
   1340c:	aa11      	add	r2, sp, #68	; 0x44
   1340e:	931c      	str	r3, [sp, #112]	; 0x70
   13410:	921b      	str	r2, [sp, #108]	; 0x6c
   13412:	2001      	movs	r0, #1
   13414:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13418:	e6a2      	b.n	13160 <_vfiprintf_r+0x910>
   1341a:	9603      	str	r6, [sp, #12]
   1341c:	e571      	b.n	12f02 <_vfiprintf_r+0x6b2>
   1341e:	4b3b      	ldr	r3, [pc, #236]	; (1350c <_vfiprintf_r+0xcbc>)
   13420:	930c      	str	r3, [sp, #48]	; 0x30
   13422:	f016 0220 	ands.w	r2, r6, #32
   13426:	d059      	beq.n	134dc <_vfiprintf_r+0xc8c>
   13428:	9b07      	ldr	r3, [sp, #28]
   1342a:	3307      	adds	r3, #7
   1342c:	f023 0307 	bic.w	r3, r3, #7
   13430:	4618      	mov	r0, r3
   13432:	685a      	ldr	r2, [r3, #4]
   13434:	f850 3b08 	ldr.w	r3, [r0], #8
   13438:	9007      	str	r0, [sp, #28]
   1343a:	07f4      	lsls	r4, r6, #31
   1343c:	d509      	bpl.n	13452 <_vfiprintf_r+0xc02>
   1343e:	ea53 0002 	orrs.w	r0, r3, r2
   13442:	d006      	beq.n	13452 <_vfiprintf_r+0xc02>
   13444:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   13448:	2130      	movs	r1, #48	; 0x30
   1344a:	f046 0602 	orr.w	r6, r6, #2
   1344e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   13452:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   13456:	9103      	str	r1, [sp, #12]
   13458:	2102      	movs	r1, #2
   1345a:	f7ff bb70 	b.w	12b3e <_vfiprintf_r+0x2ee>
   1345e:	4b2c      	ldr	r3, [pc, #176]	; (13510 <_vfiprintf_r+0xcc0>)
   13460:	930c      	str	r3, [sp, #48]	; 0x30
   13462:	e7de      	b.n	13422 <_vfiprintf_r+0xbd2>
   13464:	9b07      	ldr	r3, [sp, #28]
   13466:	2101      	movs	r1, #1
   13468:	f853 2b04 	ldr.w	r2, [r3], #4
   1346c:	9103      	str	r1, [sp, #12]
   1346e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   13472:	9307      	str	r3, [sp, #28]
   13474:	9104      	str	r1, [sp, #16]
   13476:	ac2b      	add	r4, sp, #172	; 0xac
   13478:	e4df      	b.n	12e3a <_vfiprintf_r+0x5ea>
   1347a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1347e:	2a00      	cmp	r2, #0
   13480:	f040 8132 	bne.w	136e8 <_vfiprintf_r+0xe98>
   13484:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13486:	2a00      	cmp	r2, #0
   13488:	f47f ae62 	bne.w	13150 <_vfiprintf_r+0x900>
   1348c:	4618      	mov	r0, r3
   1348e:	2101      	movs	r1, #1
   13490:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13494:	e427      	b.n	12ce6 <_vfiprintf_r+0x496>
   13496:	2100      	movs	r1, #0
   13498:	2208      	movs	r2, #8
   1349a:	a816      	add	r0, sp, #88	; 0x58
   1349c:	9413      	str	r4, [sp, #76]	; 0x4c
   1349e:	f7f8 fab5 	bl	ba0c <memset>
   134a2:	1c79      	adds	r1, r7, #1
   134a4:	f000 80bc 	beq.w	13620 <_vfiprintf_r+0xdd0>
   134a8:	2500      	movs	r5, #0
   134aa:	9407      	str	r4, [sp, #28]
   134ac:	462c      	mov	r4, r5
   134ae:	e00c      	b.n	134ca <_vfiprintf_r+0xc7a>
   134b0:	a92b      	add	r1, sp, #172	; 0xac
   134b2:	4658      	mov	r0, fp
   134b4:	f7fe ff2e 	bl	12314 <_wcrtomb_r>
   134b8:	1c42      	adds	r2, r0, #1
   134ba:	4420      	add	r0, r4
   134bc:	f000 816b 	beq.w	13796 <_vfiprintf_r+0xf46>
   134c0:	42b8      	cmp	r0, r7
   134c2:	dc08      	bgt.n	134d6 <_vfiprintf_r+0xc86>
   134c4:	f000 8170 	beq.w	137a8 <_vfiprintf_r+0xf58>
   134c8:	4604      	mov	r4, r0
   134ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   134cc:	5952      	ldr	r2, [r2, r5]
   134ce:	ab16      	add	r3, sp, #88	; 0x58
   134d0:	3504      	adds	r5, #4
   134d2:	2a00      	cmp	r2, #0
   134d4:	d1ec      	bne.n	134b0 <_vfiprintf_r+0xc60>
   134d6:	9404      	str	r4, [sp, #16]
   134d8:	9c07      	ldr	r4, [sp, #28]
   134da:	e0af      	b.n	1363c <_vfiprintf_r+0xdec>
   134dc:	f016 0310 	ands.w	r3, r6, #16
   134e0:	9807      	ldr	r0, [sp, #28]
   134e2:	d10c      	bne.n	134fe <_vfiprintf_r+0xcae>
   134e4:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   134e8:	d005      	beq.n	134f6 <_vfiprintf_r+0xca6>
   134ea:	461a      	mov	r2, r3
   134ec:	f850 3b04 	ldr.w	r3, [r0], #4
   134f0:	9007      	str	r0, [sp, #28]
   134f2:	b29b      	uxth	r3, r3
   134f4:	e7a1      	b.n	1343a <_vfiprintf_r+0xbea>
   134f6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   134fa:	f040 80e1 	bne.w	136c0 <_vfiprintf_r+0xe70>
   134fe:	f850 3b04 	ldr.w	r3, [r0], #4
   13502:	9007      	str	r0, [sp, #28]
   13504:	e799      	b.n	1343a <_vfiprintf_r+0xbea>
   13506:	bf00      	nop
   13508:	200026f0 	.word	0x200026f0
   1350c:	20000c34 	.word	0x20000c34
   13510:	20000c48 	.word	0x20000c48
   13514:	9903      	ldr	r1, [sp, #12]
   13516:	9704      	str	r7, [sp, #16]
   13518:	ac44      	add	r4, sp, #272	; 0x110
   1351a:	469e      	mov	lr, r3
   1351c:	ee08 ba90 	vmov	s17, fp
   13520:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   13524:	f04f 0c00 	mov.w	ip, #0
   13528:	4623      	mov	r3, r4
   1352a:	e006      	b.n	1353a <_vfiprintf_r+0xcea>
   1352c:	f1be 0f0a 	cmp.w	lr, #10
   13530:	f172 0200 	sbcs.w	r2, r2, #0
   13534:	d339      	bcc.n	135aa <_vfiprintf_r+0xd5a>
   13536:	46a6      	mov	lr, r4
   13538:	462a      	mov	r2, r5
   1353a:	49a6      	ldr	r1, [pc, #664]	; (137d4 <_vfiprintf_r+0xf84>)
   1353c:	eb1e 0002 	adds.w	r0, lr, r2
   13540:	f140 0000 	adc.w	r0, r0, #0
   13544:	460f      	mov	r7, r1
   13546:	fba1 1400 	umull	r1, r4, r1, r0
   1354a:	f024 0103 	bic.w	r1, r4, #3
   1354e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   13552:	1a40      	subs	r0, r0, r1
   13554:	ebbe 0100 	subs.w	r1, lr, r0
   13558:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1355c:	f162 0400 	sbc.w	r4, r2, #0
   13560:	fb05 f501 	mul.w	r5, r5, r1
   13564:	fb07 5504 	mla	r5, r7, r4, r5
   13568:	fba1 4107 	umull	r4, r1, r1, r7
   1356c:	440d      	add	r5, r1
   1356e:	2705      	movs	r7, #5
   13570:	f004 0101 	and.w	r1, r4, #1
   13574:	fba1 1b07 	umull	r1, fp, r1, r7
   13578:	1809      	adds	r1, r1, r0
   1357a:	0864      	lsrs	r4, r4, #1
   1357c:	3130      	adds	r1, #48	; 0x30
   1357e:	f803 1c01 	strb.w	r1, [r3, #-1]
   13582:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   13586:	f10c 0c01 	add.w	ip, ip, #1
   1358a:	3b01      	subs	r3, #1
   1358c:	086d      	lsrs	r5, r5, #1
   1358e:	2e00      	cmp	r6, #0
   13590:	d0cc      	beq.n	1352c <_vfiprintf_r+0xcdc>
   13592:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13594:	7809      	ldrb	r1, [r1, #0]
   13596:	4561      	cmp	r1, ip
   13598:	d1c8      	bne.n	1352c <_vfiprintf_r+0xcdc>
   1359a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1359e:	d0c5      	beq.n	1352c <_vfiprintf_r+0xcdc>
   135a0:	f1be 0f0a 	cmp.w	lr, #10
   135a4:	f172 0200 	sbcs.w	r2, r2, #0
   135a8:	d26c      	bcs.n	13684 <_vfiprintf_r+0xe34>
   135aa:	461c      	mov	r4, r3
   135ac:	ab44      	add	r3, sp, #272	; 0x110
   135ae:	1b1b      	subs	r3, r3, r4
   135b0:	9f04      	ldr	r7, [sp, #16]
   135b2:	9e03      	ldr	r6, [sp, #12]
   135b4:	9304      	str	r3, [sp, #16]
   135b6:	ee18 ba90 	vmov	fp, s17
   135ba:	f7ff ba72 	b.w	12aa2 <_vfiprintf_r+0x252>
   135be:	9603      	str	r6, [sp, #12]
   135c0:	f7ff ba62 	b.w	12a88 <_vfiprintf_r+0x238>
   135c4:	4658      	mov	r0, fp
   135c6:	f7f8 f82d 	bl	b624 <__sinit>
   135ca:	f7ff b95b 	b.w	12884 <_vfiprintf_r+0x34>
   135ce:	2901      	cmp	r1, #1
   135d0:	9603      	str	r6, [sp, #12]
   135d2:	f47f accd 	bne.w	12f70 <_vfiprintf_r+0x720>
   135d6:	f7ff ba5c 	b.w	12a92 <_vfiprintf_r+0x242>
   135da:	9b07      	ldr	r3, [sp, #28]
   135dc:	9905      	ldr	r1, [sp, #20]
   135de:	f853 2b04 	ldr.w	r2, [r3], #4
   135e2:	6011      	str	r1, [r2, #0]
   135e4:	9307      	str	r3, [sp, #28]
   135e6:	f7ff b97e 	b.w	128e6 <_vfiprintf_r+0x96>
   135ea:	2f06      	cmp	r7, #6
   135ec:	463b      	mov	r3, r7
   135ee:	9a03      	ldr	r2, [sp, #12]
   135f0:	4c79      	ldr	r4, [pc, #484]	; (137d8 <_vfiprintf_r+0xf88>)
   135f2:	9207      	str	r2, [sp, #28]
   135f4:	bf28      	it	cs
   135f6:	2306      	movcs	r3, #6
   135f8:	9304      	str	r3, [sp, #16]
   135fa:	9303      	str	r3, [sp, #12]
   135fc:	f7ff bb25 	b.w	12c4a <_vfiprintf_r+0x3fa>
   13600:	9b03      	ldr	r3, [sp, #12]
   13602:	9907      	ldr	r1, [sp, #28]
   13604:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   13608:	bf14      	ite	ne
   1360a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1360e:	f851 3b04 	ldreq.w	r3, [r1], #4
   13612:	9107      	str	r1, [sp, #28]
   13614:	bf1c      	itt	ne
   13616:	4602      	movne	r2, r0
   13618:	b2db      	uxtbne	r3, r3
   1361a:	2101      	movs	r1, #1
   1361c:	f7ff ba8f 	b.w	12b3e <_vfiprintf_r+0x2ee>
   13620:	ab16      	add	r3, sp, #88	; 0x58
   13622:	9300      	str	r3, [sp, #0]
   13624:	2300      	movs	r3, #0
   13626:	4619      	mov	r1, r3
   13628:	aa13      	add	r2, sp, #76	; 0x4c
   1362a:	4658      	mov	r0, fp
   1362c:	f7fe fe98 	bl	12360 <_wcsrtombs_r>
   13630:	4603      	mov	r3, r0
   13632:	3301      	adds	r3, #1
   13634:	9004      	str	r0, [sp, #16]
   13636:	f000 80ae 	beq.w	13796 <_vfiprintf_r+0xf46>
   1363a:	9413      	str	r4, [sp, #76]	; 0x4c
   1363c:	9b04      	ldr	r3, [sp, #16]
   1363e:	2b00      	cmp	r3, #0
   13640:	d030      	beq.n	136a4 <_vfiprintf_r+0xe54>
   13642:	2b63      	cmp	r3, #99	; 0x63
   13644:	dc63      	bgt.n	1370e <_vfiprintf_r+0xebe>
   13646:	2300      	movs	r3, #0
   13648:	9308      	str	r3, [sp, #32]
   1364a:	ac2b      	add	r4, sp, #172	; 0xac
   1364c:	2208      	movs	r2, #8
   1364e:	2100      	movs	r1, #0
   13650:	a816      	add	r0, sp, #88	; 0x58
   13652:	f7f8 f9db 	bl	ba0c <memset>
   13656:	9d04      	ldr	r5, [sp, #16]
   13658:	ab16      	add	r3, sp, #88	; 0x58
   1365a:	9300      	str	r3, [sp, #0]
   1365c:	aa13      	add	r2, sp, #76	; 0x4c
   1365e:	462b      	mov	r3, r5
   13660:	4621      	mov	r1, r4
   13662:	4658      	mov	r0, fp
   13664:	f7fe fe7c 	bl	12360 <_wcsrtombs_r>
   13668:	4285      	cmp	r5, r0
   1366a:	f040 80ab 	bne.w	137c4 <_vfiprintf_r+0xf74>
   1366e:	9b03      	ldr	r3, [sp, #12]
   13670:	9a04      	ldr	r2, [sp, #16]
   13672:	9307      	str	r3, [sp, #28]
   13674:	2300      	movs	r3, #0
   13676:	54a3      	strb	r3, [r4, r2]
   13678:	461f      	mov	r7, r3
   1367a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1367e:	9303      	str	r3, [sp, #12]
   13680:	f7ff ba16 	b.w	12ab0 <_vfiprintf_r+0x260>
   13684:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13686:	990d      	ldr	r1, [sp, #52]	; 0x34
   13688:	1a9b      	subs	r3, r3, r2
   1368a:	4618      	mov	r0, r3
   1368c:	9308      	str	r3, [sp, #32]
   1368e:	f7f8 fa55 	bl	bb3c <strncpy>
   13692:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13694:	9b08      	ldr	r3, [sp, #32]
   13696:	784a      	ldrb	r2, [r1, #1]
   13698:	b10a      	cbz	r2, 1369e <_vfiprintf_r+0xe4e>
   1369a:	3101      	adds	r1, #1
   1369c:	910b      	str	r1, [sp, #44]	; 0x2c
   1369e:	f04f 0c00 	mov.w	ip, #0
   136a2:	e748      	b.n	13536 <_vfiprintf_r+0xce6>
   136a4:	9b03      	ldr	r3, [sp, #12]
   136a6:	9307      	str	r3, [sp, #28]
   136a8:	9b04      	ldr	r3, [sp, #16]
   136aa:	9303      	str	r3, [sp, #12]
   136ac:	461f      	mov	r7, r3
   136ae:	9308      	str	r3, [sp, #32]
   136b0:	f7ff b9fe 	b.w	12ab0 <_vfiprintf_r+0x260>
   136b4:	2101      	movs	r1, #1
   136b6:	4618      	mov	r0, r3
   136b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   136bc:	f7ff bb13 	b.w	12ce6 <_vfiprintf_r+0x496>
   136c0:	f850 3b04 	ldr.w	r3, [r0], #4
   136c4:	9007      	str	r0, [sp, #28]
   136c6:	4622      	mov	r2, r4
   136c8:	b2db      	uxtb	r3, r3
   136ca:	e6b6      	b.n	1343a <_vfiprintf_r+0xbea>
   136cc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   136d0:	9207      	str	r2, [sp, #28]
   136d2:	17da      	asrs	r2, r3, #31
   136d4:	4611      	mov	r1, r2
   136d6:	f7ff b9ca 	b.w	12a6e <_vfiprintf_r+0x21e>
   136da:	f851 3b04 	ldr.w	r3, [r1], #4
   136de:	9107      	str	r1, [sp, #28]
   136e0:	4602      	mov	r2, r0
   136e2:	b2db      	uxtb	r3, r3
   136e4:	f7ff ba27 	b.w	12b36 <_vfiprintf_r+0x2e6>
   136e8:	2301      	movs	r3, #1
   136ea:	931c      	str	r3, [sp, #112]	; 0x70
   136ec:	2101      	movs	r1, #1
   136ee:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   136f2:	931b      	str	r3, [sp, #108]	; 0x6c
   136f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   136f8:	460b      	mov	r3, r1
   136fa:	f7ff bacd 	b.w	12c98 <_vfiprintf_r+0x448>
   136fe:	9b07      	ldr	r3, [sp, #28]
   13700:	9905      	ldr	r1, [sp, #20]
   13702:	f853 2b04 	ldr.w	r2, [r3], #4
   13706:	9307      	str	r3, [sp, #28]
   13708:	8011      	strh	r1, [r2, #0]
   1370a:	f7ff b8ec 	b.w	128e6 <_vfiprintf_r+0x96>
   1370e:	1c59      	adds	r1, r3, #1
   13710:	4658      	mov	r0, fp
   13712:	f7f6 fa53 	bl	9bbc <_malloc_r>
   13716:	4604      	mov	r4, r0
   13718:	2800      	cmp	r0, #0
   1371a:	d03c      	beq.n	13796 <_vfiprintf_r+0xf46>
   1371c:	9008      	str	r0, [sp, #32]
   1371e:	e795      	b.n	1364c <_vfiprintf_r+0xdfc>
   13720:	6d88      	ldr	r0, [r1, #88]	; 0x58
   13722:	f7f8 fad9 	bl	bcd8 <__retarget_lock_release_recursive>
   13726:	f7ff b9e9 	b.w	12afc <_vfiprintf_r+0x2ac>
   1372a:	9b03      	ldr	r3, [sp, #12]
   1372c:	9307      	str	r3, [sp, #28]
   1372e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   13732:	9f08      	ldr	r7, [sp, #32]
   13734:	f7ff b9bc 	b.w	12ab0 <_vfiprintf_r+0x260>
   13738:	9819      	ldr	r0, [sp, #100]	; 0x64
   1373a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1373c:	3001      	adds	r0, #1
   1373e:	e545      	b.n	131cc <_vfiprintf_r+0x97c>
   13740:	9b03      	ldr	r3, [sp, #12]
   13742:	9307      	str	r3, [sp, #28]
   13744:	4620      	mov	r0, r4
   13746:	f7f8 fcfb 	bl	c140 <strlen>
   1374a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1374e:	462f      	mov	r7, r5
   13750:	9004      	str	r0, [sp, #16]
   13752:	9303      	str	r3, [sp, #12]
   13754:	9508      	str	r5, [sp, #32]
   13756:	f7ff b9ab 	b.w	12ab0 <_vfiprintf_r+0x260>
   1375a:	ee18 1a10 	vmov	r1, s16
   1375e:	aa18      	add	r2, sp, #96	; 0x60
   13760:	4658      	mov	r0, fp
   13762:	f7ff f839 	bl	127d8 <__sprint_r.part.0>
   13766:	2800      	cmp	r0, #0
   13768:	f43f aa36 	beq.w	12bd8 <_vfiprintf_r+0x388>
   1376c:	f7ff ba4d 	b.w	12c0a <_vfiprintf_r+0x3ba>
   13770:	9819      	ldr	r0, [sp, #100]	; 0x64
   13772:	3001      	adds	r0, #1
   13774:	e57a      	b.n	1326c <_vfiprintf_r+0xa1c>
   13776:	468c      	mov	ip, r1
   13778:	e46e      	b.n	13058 <_vfiprintf_r+0x808>
   1377a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1377c:	07d9      	lsls	r1, r3, #31
   1377e:	d405      	bmi.n	1378c <_vfiprintf_r+0xf3c>
   13780:	89ab      	ldrh	r3, [r5, #12]
   13782:	059a      	lsls	r2, r3, #22
   13784:	d402      	bmi.n	1378c <_vfiprintf_r+0xf3c>
   13786:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13788:	f7f8 faa6 	bl	bcd8 <__retarget_lock_release_recursive>
   1378c:	f04f 33ff 	mov.w	r3, #4294967295
   13790:	9305      	str	r3, [sp, #20]
   13792:	f7ff ba49 	b.w	12c28 <_vfiprintf_r+0x3d8>
   13796:	ee18 2a10 	vmov	r2, s16
   1379a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1379e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   137a2:	8193      	strh	r3, [r2, #12]
   137a4:	f7ff ba35 	b.w	12c12 <_vfiprintf_r+0x3c2>
   137a8:	9c07      	ldr	r4, [sp, #28]
   137aa:	9704      	str	r7, [sp, #16]
   137ac:	e746      	b.n	1363c <_vfiprintf_r+0xdec>
   137ae:	9b07      	ldr	r3, [sp, #28]
   137b0:	f898 1001 	ldrb.w	r1, [r8, #1]
   137b4:	f853 7b04 	ldr.w	r7, [r3], #4
   137b8:	9307      	str	r3, [sp, #28]
   137ba:	4690      	mov	r8, r2
   137bc:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   137c0:	f7ff b8b9 	b.w	12936 <_vfiprintf_r+0xe6>
   137c4:	ee18 2a10 	vmov	r2, s16
   137c8:	8993      	ldrh	r3, [r2, #12]
   137ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   137ce:	8193      	strh	r3, [r2, #12]
   137d0:	f7ff ba15 	b.w	12bfe <_vfiprintf_r+0x3ae>
   137d4:	cccccccd 	.word	0xcccccccd
   137d8:	20000c5c 	.word	0x20000c5c

000137dc <__sbprintf>:
   137dc:	b570      	push	{r4, r5, r6, lr}
   137de:	460c      	mov	r4, r1
   137e0:	8989      	ldrh	r1, [r1, #12]
   137e2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   137e6:	f021 0102 	bic.w	r1, r1, #2
   137ea:	f8ad 1014 	strh.w	r1, [sp, #20]
   137ee:	6e61      	ldr	r1, [r4, #100]	; 0x64
   137f0:	911b      	str	r1, [sp, #108]	; 0x6c
   137f2:	89e1      	ldrh	r1, [r4, #14]
   137f4:	f8ad 1016 	strh.w	r1, [sp, #22]
   137f8:	69e1      	ldr	r1, [r4, #28]
   137fa:	9109      	str	r1, [sp, #36]	; 0x24
   137fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   137fe:	910b      	str	r1, [sp, #44]	; 0x2c
   13800:	a91c      	add	r1, sp, #112	; 0x70
   13802:	9102      	str	r1, [sp, #8]
   13804:	9106      	str	r1, [sp, #24]
   13806:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1380a:	4606      	mov	r6, r0
   1380c:	9104      	str	r1, [sp, #16]
   1380e:	9107      	str	r1, [sp, #28]
   13810:	a818      	add	r0, sp, #96	; 0x60
   13812:	2100      	movs	r1, #0
   13814:	e9cd 3200 	strd	r3, r2, [sp]
   13818:	9108      	str	r1, [sp, #32]
   1381a:	f7f8 fa57 	bl	bccc <__retarget_lock_init_recursive>
   1381e:	e9dd 3200 	ldrd	r3, r2, [sp]
   13822:	a902      	add	r1, sp, #8
   13824:	4630      	mov	r0, r6
   13826:	f7ff f813 	bl	12850 <_vfiprintf_r>
   1382a:	1e05      	subs	r5, r0, #0
   1382c:	db07      	blt.n	1383e <__sbprintf+0x62>
   1382e:	a902      	add	r1, sp, #8
   13830:	4630      	mov	r0, r6
   13832:	f7fd fad3 	bl	10ddc <_fflush_r>
   13836:	2800      	cmp	r0, #0
   13838:	bf18      	it	ne
   1383a:	f04f 35ff 	movne.w	r5, #4294967295
   1383e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   13842:	065b      	lsls	r3, r3, #25
   13844:	d503      	bpl.n	1384e <__sbprintf+0x72>
   13846:	89a3      	ldrh	r3, [r4, #12]
   13848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1384c:	81a3      	strh	r3, [r4, #12]
   1384e:	9818      	ldr	r0, [sp, #96]	; 0x60
   13850:	f7f8 fa3e 	bl	bcd0 <__retarget_lock_close_recursive>
   13854:	4628      	mov	r0, r5
   13856:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   1385a:	bd70      	pop	{r4, r5, r6, pc}

0001385c <__sfvwrite_r>:
   1385c:	6893      	ldr	r3, [r2, #8]
   1385e:	2b00      	cmp	r3, #0
   13860:	f000 8085 	beq.w	1396e <__sfvwrite_r+0x112>
   13864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13868:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1386c:	460c      	mov	r4, r1
   1386e:	0719      	lsls	r1, r3, #28
   13870:	4680      	mov	r8, r0
   13872:	b083      	sub	sp, #12
   13874:	4617      	mov	r7, r2
   13876:	b298      	uxth	r0, r3
   13878:	d525      	bpl.n	138c6 <__sfvwrite_r+0x6a>
   1387a:	6923      	ldr	r3, [r4, #16]
   1387c:	b31b      	cbz	r3, 138c6 <__sfvwrite_r+0x6a>
   1387e:	f010 0302 	ands.w	r3, r0, #2
   13882:	683d      	ldr	r5, [r7, #0]
   13884:	d02d      	beq.n	138e2 <__sfvwrite_r+0x86>
   13886:	f04f 0a00 	mov.w	sl, #0
   1388a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 13b4c <__sfvwrite_r+0x2f0>
   1388e:	4656      	mov	r6, sl
   13890:	46b9      	mov	r9, r7
   13892:	455e      	cmp	r6, fp
   13894:	4633      	mov	r3, r6
   13896:	4652      	mov	r2, sl
   13898:	bf28      	it	cs
   1389a:	465b      	movcs	r3, fp
   1389c:	4640      	mov	r0, r8
   1389e:	2e00      	cmp	r6, #0
   138a0:	d052      	beq.n	13948 <__sfvwrite_r+0xec>
   138a2:	69e1      	ldr	r1, [r4, #28]
   138a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   138a6:	47b8      	blx	r7
   138a8:	2800      	cmp	r0, #0
   138aa:	dd56      	ble.n	1395a <__sfvwrite_r+0xfe>
   138ac:	f8d9 3008 	ldr.w	r3, [r9, #8]
   138b0:	1a1b      	subs	r3, r3, r0
   138b2:	4482      	add	sl, r0
   138b4:	1a36      	subs	r6, r6, r0
   138b6:	f8c9 3008 	str.w	r3, [r9, #8]
   138ba:	2b00      	cmp	r3, #0
   138bc:	d1e9      	bne.n	13892 <__sfvwrite_r+0x36>
   138be:	2000      	movs	r0, #0
   138c0:	b003      	add	sp, #12
   138c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138c6:	4621      	mov	r1, r4
   138c8:	4640      	mov	r0, r8
   138ca:	f000 f97d 	bl	13bc8 <__swsetup_r>
   138ce:	2800      	cmp	r0, #0
   138d0:	f040 8138 	bne.w	13b44 <__sfvwrite_r+0x2e8>
   138d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   138d8:	683d      	ldr	r5, [r7, #0]
   138da:	b298      	uxth	r0, r3
   138dc:	f010 0302 	ands.w	r3, r0, #2
   138e0:	d1d1      	bne.n	13886 <__sfvwrite_r+0x2a>
   138e2:	f010 0901 	ands.w	r9, r0, #1
   138e6:	d144      	bne.n	13972 <__sfvwrite_r+0x116>
   138e8:	464e      	mov	r6, r9
   138ea:	9700      	str	r7, [sp, #0]
   138ec:	b346      	cbz	r6, 13940 <__sfvwrite_r+0xe4>
   138ee:	0582      	lsls	r2, r0, #22
   138f0:	f8d4 b008 	ldr.w	fp, [r4, #8]
   138f4:	f140 8085 	bpl.w	13a02 <__sfvwrite_r+0x1a6>
   138f8:	45b3      	cmp	fp, r6
   138fa:	465a      	mov	r2, fp
   138fc:	f200 80b4 	bhi.w	13a68 <__sfvwrite_r+0x20c>
   13900:	f410 6f90 	tst.w	r0, #1152	; 0x480
   13904:	f040 80c1 	bne.w	13a8a <__sfvwrite_r+0x22e>
   13908:	6820      	ldr	r0, [r4, #0]
   1390a:	9201      	str	r2, [sp, #4]
   1390c:	4649      	mov	r1, r9
   1390e:	f7f8 f801 	bl	b914 <memmove>
   13912:	68a3      	ldr	r3, [r4, #8]
   13914:	9a01      	ldr	r2, [sp, #4]
   13916:	eba3 010b 	sub.w	r1, r3, fp
   1391a:	6823      	ldr	r3, [r4, #0]
   1391c:	60a1      	str	r1, [r4, #8]
   1391e:	4413      	add	r3, r2
   13920:	46b2      	mov	sl, r6
   13922:	6023      	str	r3, [r4, #0]
   13924:	2600      	movs	r6, #0
   13926:	9a00      	ldr	r2, [sp, #0]
   13928:	6893      	ldr	r3, [r2, #8]
   1392a:	eba3 030a 	sub.w	r3, r3, sl
   1392e:	44d1      	add	r9, sl
   13930:	6093      	str	r3, [r2, #8]
   13932:	2b00      	cmp	r3, #0
   13934:	d0c3      	beq.n	138be <__sfvwrite_r+0x62>
   13936:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1393a:	b280      	uxth	r0, r0
   1393c:	2e00      	cmp	r6, #0
   1393e:	d1d6      	bne.n	138ee <__sfvwrite_r+0x92>
   13940:	e9d5 9600 	ldrd	r9, r6, [r5]
   13944:	3508      	adds	r5, #8
   13946:	e7d1      	b.n	138ec <__sfvwrite_r+0x90>
   13948:	e9d5 a600 	ldrd	sl, r6, [r5]
   1394c:	3508      	adds	r5, #8
   1394e:	e7a0      	b.n	13892 <__sfvwrite_r+0x36>
   13950:	4621      	mov	r1, r4
   13952:	4640      	mov	r0, r8
   13954:	f7fd fa42 	bl	10ddc <_fflush_r>
   13958:	b388      	cbz	r0, 139be <__sfvwrite_r+0x162>
   1395a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1395e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13962:	f04f 30ff 	mov.w	r0, #4294967295
   13966:	81a3      	strh	r3, [r4, #12]
   13968:	b003      	add	sp, #12
   1396a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1396e:	2000      	movs	r0, #0
   13970:	4770      	bx	lr
   13972:	461e      	mov	r6, r3
   13974:	46ba      	mov	sl, r7
   13976:	4699      	mov	r9, r3
   13978:	4618      	mov	r0, r3
   1397a:	9500      	str	r5, [sp, #0]
   1397c:	461f      	mov	r7, r3
   1397e:	b366      	cbz	r6, 139da <__sfvwrite_r+0x17e>
   13980:	2800      	cmp	r0, #0
   13982:	d032      	beq.n	139ea <__sfvwrite_r+0x18e>
   13984:	464a      	mov	r2, r9
   13986:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   1398a:	6820      	ldr	r0, [r4, #0]
   1398c:	68a5      	ldr	r5, [r4, #8]
   1398e:	42b2      	cmp	r2, r6
   13990:	bf28      	it	cs
   13992:	4632      	movcs	r2, r6
   13994:	4288      	cmp	r0, r1
   13996:	d904      	bls.n	139a2 <__sfvwrite_r+0x146>
   13998:	eb05 0b03 	add.w	fp, r5, r3
   1399c:	455a      	cmp	r2, fp
   1399e:	f300 80a7 	bgt.w	13af0 <__sfvwrite_r+0x294>
   139a2:	4293      	cmp	r3, r2
   139a4:	dc64      	bgt.n	13a70 <__sfvwrite_r+0x214>
   139a6:	69e1      	ldr	r1, [r4, #28]
   139a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   139aa:	463a      	mov	r2, r7
   139ac:	4640      	mov	r0, r8
   139ae:	47a8      	blx	r5
   139b0:	f1b0 0b00 	subs.w	fp, r0, #0
   139b4:	ddd1      	ble.n	1395a <__sfvwrite_r+0xfe>
   139b6:	ebb9 090b 	subs.w	r9, r9, fp
   139ba:	d0c9      	beq.n	13950 <__sfvwrite_r+0xf4>
   139bc:	2001      	movs	r0, #1
   139be:	f8da 3008 	ldr.w	r3, [sl, #8]
   139c2:	eba3 030b 	sub.w	r3, r3, fp
   139c6:	445f      	add	r7, fp
   139c8:	eba6 060b 	sub.w	r6, r6, fp
   139cc:	f8ca 3008 	str.w	r3, [sl, #8]
   139d0:	2b00      	cmp	r3, #0
   139d2:	f43f af74 	beq.w	138be <__sfvwrite_r+0x62>
   139d6:	2e00      	cmp	r6, #0
   139d8:	d1d2      	bne.n	13980 <__sfvwrite_r+0x124>
   139da:	9a00      	ldr	r2, [sp, #0]
   139dc:	6856      	ldr	r6, [r2, #4]
   139de:	4613      	mov	r3, r2
   139e0:	3208      	adds	r2, #8
   139e2:	9200      	str	r2, [sp, #0]
   139e4:	2e00      	cmp	r6, #0
   139e6:	d0f8      	beq.n	139da <__sfvwrite_r+0x17e>
   139e8:	681f      	ldr	r7, [r3, #0]
   139ea:	4632      	mov	r2, r6
   139ec:	210a      	movs	r1, #10
   139ee:	4638      	mov	r0, r7
   139f0:	f7f8 fb46 	bl	c080 <memchr>
   139f4:	2800      	cmp	r0, #0
   139f6:	f000 809c 	beq.w	13b32 <__sfvwrite_r+0x2d6>
   139fa:	3001      	adds	r0, #1
   139fc:	eba0 0907 	sub.w	r9, r0, r7
   13a00:	e7c0      	b.n	13984 <__sfvwrite_r+0x128>
   13a02:	6820      	ldr	r0, [r4, #0]
   13a04:	6923      	ldr	r3, [r4, #16]
   13a06:	4298      	cmp	r0, r3
   13a08:	d816      	bhi.n	13a38 <__sfvwrite_r+0x1dc>
   13a0a:	6962      	ldr	r2, [r4, #20]
   13a0c:	42b2      	cmp	r2, r6
   13a0e:	d813      	bhi.n	13a38 <__sfvwrite_r+0x1dc>
   13a10:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13a14:	42b3      	cmp	r3, r6
   13a16:	bf28      	it	cs
   13a18:	4633      	movcs	r3, r6
   13a1a:	69e1      	ldr	r1, [r4, #28]
   13a1c:	fb93 f3f2 	sdiv	r3, r3, r2
   13a20:	6a67      	ldr	r7, [r4, #36]	; 0x24
   13a22:	fb02 f303 	mul.w	r3, r2, r3
   13a26:	4640      	mov	r0, r8
   13a28:	464a      	mov	r2, r9
   13a2a:	47b8      	blx	r7
   13a2c:	f1b0 0a00 	subs.w	sl, r0, #0
   13a30:	dd93      	ble.n	1395a <__sfvwrite_r+0xfe>
   13a32:	eba6 060a 	sub.w	r6, r6, sl
   13a36:	e776      	b.n	13926 <__sfvwrite_r+0xca>
   13a38:	45b3      	cmp	fp, r6
   13a3a:	46da      	mov	sl, fp
   13a3c:	bf28      	it	cs
   13a3e:	46b2      	movcs	sl, r6
   13a40:	4652      	mov	r2, sl
   13a42:	4649      	mov	r1, r9
   13a44:	f7f7 ff66 	bl	b914 <memmove>
   13a48:	68a3      	ldr	r3, [r4, #8]
   13a4a:	6822      	ldr	r2, [r4, #0]
   13a4c:	eba3 030a 	sub.w	r3, r3, sl
   13a50:	4452      	add	r2, sl
   13a52:	60a3      	str	r3, [r4, #8]
   13a54:	6022      	str	r2, [r4, #0]
   13a56:	2b00      	cmp	r3, #0
   13a58:	d1eb      	bne.n	13a32 <__sfvwrite_r+0x1d6>
   13a5a:	4621      	mov	r1, r4
   13a5c:	4640      	mov	r0, r8
   13a5e:	f7fd f9bd 	bl	10ddc <_fflush_r>
   13a62:	2800      	cmp	r0, #0
   13a64:	d0e5      	beq.n	13a32 <__sfvwrite_r+0x1d6>
   13a66:	e778      	b.n	1395a <__sfvwrite_r+0xfe>
   13a68:	6820      	ldr	r0, [r4, #0]
   13a6a:	46b3      	mov	fp, r6
   13a6c:	4632      	mov	r2, r6
   13a6e:	e74c      	b.n	1390a <__sfvwrite_r+0xae>
   13a70:	4639      	mov	r1, r7
   13a72:	9201      	str	r2, [sp, #4]
   13a74:	f7f7 ff4e 	bl	b914 <memmove>
   13a78:	9a01      	ldr	r2, [sp, #4]
   13a7a:	68a3      	ldr	r3, [r4, #8]
   13a7c:	1a9b      	subs	r3, r3, r2
   13a7e:	60a3      	str	r3, [r4, #8]
   13a80:	6823      	ldr	r3, [r4, #0]
   13a82:	4413      	add	r3, r2
   13a84:	6023      	str	r3, [r4, #0]
   13a86:	4693      	mov	fp, r2
   13a88:	e795      	b.n	139b6 <__sfvwrite_r+0x15a>
   13a8a:	6823      	ldr	r3, [r4, #0]
   13a8c:	6921      	ldr	r1, [r4, #16]
   13a8e:	eba3 0b01 	sub.w	fp, r3, r1
   13a92:	6963      	ldr	r3, [r4, #20]
   13a94:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   13a98:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   13a9c:	f10b 0301 	add.w	r3, fp, #1
   13aa0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   13aa4:	4433      	add	r3, r6
   13aa6:	4553      	cmp	r3, sl
   13aa8:	4652      	mov	r2, sl
   13aaa:	bf84      	itt	hi
   13aac:	469a      	movhi	sl, r3
   13aae:	4652      	movhi	r2, sl
   13ab0:	0543      	lsls	r3, r0, #21
   13ab2:	d52c      	bpl.n	13b0e <__sfvwrite_r+0x2b2>
   13ab4:	4611      	mov	r1, r2
   13ab6:	4640      	mov	r0, r8
   13ab8:	f7f6 f880 	bl	9bbc <_malloc_r>
   13abc:	2800      	cmp	r0, #0
   13abe:	d03b      	beq.n	13b38 <__sfvwrite_r+0x2dc>
   13ac0:	465a      	mov	r2, fp
   13ac2:	6921      	ldr	r1, [r4, #16]
   13ac4:	9001      	str	r0, [sp, #4]
   13ac6:	f7f4 fad5 	bl	8074 <memcpy>
   13aca:	89a2      	ldrh	r2, [r4, #12]
   13acc:	9b01      	ldr	r3, [sp, #4]
   13ace:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   13ad2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13ad6:	81a2      	strh	r2, [r4, #12]
   13ad8:	eb03 000b 	add.w	r0, r3, fp
   13adc:	6123      	str	r3, [r4, #16]
   13ade:	ebaa 030b 	sub.w	r3, sl, fp
   13ae2:	f8c4 a014 	str.w	sl, [r4, #20]
   13ae6:	60a3      	str	r3, [r4, #8]
   13ae8:	6020      	str	r0, [r4, #0]
   13aea:	46b3      	mov	fp, r6
   13aec:	4632      	mov	r2, r6
   13aee:	e70c      	b.n	1390a <__sfvwrite_r+0xae>
   13af0:	4639      	mov	r1, r7
   13af2:	465a      	mov	r2, fp
   13af4:	f7f7 ff0e 	bl	b914 <memmove>
   13af8:	6823      	ldr	r3, [r4, #0]
   13afa:	445b      	add	r3, fp
   13afc:	6023      	str	r3, [r4, #0]
   13afe:	4621      	mov	r1, r4
   13b00:	4640      	mov	r0, r8
   13b02:	f7fd f96b 	bl	10ddc <_fflush_r>
   13b06:	2800      	cmp	r0, #0
   13b08:	f43f af55 	beq.w	139b6 <__sfvwrite_r+0x15a>
   13b0c:	e725      	b.n	1395a <__sfvwrite_r+0xfe>
   13b0e:	4640      	mov	r0, r8
   13b10:	f7f6 fb1c 	bl	a14c <_realloc_r>
   13b14:	4603      	mov	r3, r0
   13b16:	2800      	cmp	r0, #0
   13b18:	d1de      	bne.n	13ad8 <__sfvwrite_r+0x27c>
   13b1a:	6921      	ldr	r1, [r4, #16]
   13b1c:	4640      	mov	r0, r8
   13b1e:	f7f8 fc21 	bl	c364 <_free_r>
   13b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b26:	220c      	movs	r2, #12
   13b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13b2c:	f8c8 2000 	str.w	r2, [r8]
   13b30:	e715      	b.n	1395e <__sfvwrite_r+0x102>
   13b32:	1c72      	adds	r2, r6, #1
   13b34:	4691      	mov	r9, r2
   13b36:	e726      	b.n	13986 <__sfvwrite_r+0x12a>
   13b38:	220c      	movs	r2, #12
   13b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b3e:	f8c8 2000 	str.w	r2, [r8]
   13b42:	e70c      	b.n	1395e <__sfvwrite_r+0x102>
   13b44:	f04f 30ff 	mov.w	r0, #4294967295
   13b48:	e6ba      	b.n	138c0 <__sfvwrite_r+0x64>
   13b4a:	bf00      	nop
   13b4c:	7ffffc00 	.word	0x7ffffc00

00013b50 <__submore>:
   13b50:	f101 0340 	add.w	r3, r1, #64	; 0x40
   13b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b58:	460c      	mov	r4, r1
   13b5a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   13b5c:	4299      	cmp	r1, r3
   13b5e:	d014      	beq.n	13b8a <__submore+0x3a>
   13b60:	6b66      	ldr	r6, [r4, #52]	; 0x34
   13b62:	0077      	lsls	r7, r6, #1
   13b64:	463a      	mov	r2, r7
   13b66:	f7f6 faf1 	bl	a14c <_realloc_r>
   13b6a:	4605      	mov	r5, r0
   13b6c:	b340      	cbz	r0, 13bc0 <__submore+0x70>
   13b6e:	eb00 0806 	add.w	r8, r0, r6
   13b72:	4601      	mov	r1, r0
   13b74:	4632      	mov	r2, r6
   13b76:	4640      	mov	r0, r8
   13b78:	f7f4 fa7c 	bl	8074 <memcpy>
   13b7c:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   13b80:	f8c4 8000 	str.w	r8, [r4]
   13b84:	2000      	movs	r0, #0
   13b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13b8e:	f7f6 f815 	bl	9bbc <_malloc_r>
   13b92:	b1a8      	cbz	r0, 13bc0 <__submore+0x70>
   13b94:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   13b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13b9c:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   13ba0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   13ba4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   13ba8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   13bac:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   13bb0:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   13bb4:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   13bb8:	6023      	str	r3, [r4, #0]
   13bba:	2000      	movs	r0, #0
   13bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13bc0:	f04f 30ff 	mov.w	r0, #4294967295
   13bc4:	e7df      	b.n	13b86 <__submore+0x36>
   13bc6:	bf00      	nop

00013bc8 <__swsetup_r>:
   13bc8:	b538      	push	{r3, r4, r5, lr}
   13bca:	4b31      	ldr	r3, [pc, #196]	; (13c90 <__swsetup_r+0xc8>)
   13bcc:	681b      	ldr	r3, [r3, #0]
   13bce:	4605      	mov	r5, r0
   13bd0:	460c      	mov	r4, r1
   13bd2:	b113      	cbz	r3, 13bda <__swsetup_r+0x12>
   13bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13bd6:	2a00      	cmp	r2, #0
   13bd8:	d04e      	beq.n	13c78 <__swsetup_r+0xb0>
   13bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13bde:	0718      	lsls	r0, r3, #28
   13be0:	b29a      	uxth	r2, r3
   13be2:	d51c      	bpl.n	13c1e <__swsetup_r+0x56>
   13be4:	6921      	ldr	r1, [r4, #16]
   13be6:	b329      	cbz	r1, 13c34 <__swsetup_r+0x6c>
   13be8:	f012 0001 	ands.w	r0, r2, #1
   13bec:	d007      	beq.n	13bfe <__swsetup_r+0x36>
   13bee:	2000      	movs	r0, #0
   13bf0:	60a0      	str	r0, [r4, #8]
   13bf2:	6960      	ldr	r0, [r4, #20]
   13bf4:	4240      	negs	r0, r0
   13bf6:	61a0      	str	r0, [r4, #24]
   13bf8:	b139      	cbz	r1, 13c0a <__swsetup_r+0x42>
   13bfa:	2000      	movs	r0, #0
   13bfc:	bd38      	pop	{r3, r4, r5, pc}
   13bfe:	0795      	lsls	r5, r2, #30
   13c00:	bf58      	it	pl
   13c02:	6960      	ldrpl	r0, [r4, #20]
   13c04:	60a0      	str	r0, [r4, #8]
   13c06:	2900      	cmp	r1, #0
   13c08:	d1f7      	bne.n	13bfa <__swsetup_r+0x32>
   13c0a:	0612      	lsls	r2, r2, #24
   13c0c:	bf58      	it	pl
   13c0e:	4608      	movpl	r0, r1
   13c10:	d5f4      	bpl.n	13bfc <__swsetup_r+0x34>
   13c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13c16:	81a3      	strh	r3, [r4, #12]
   13c18:	f04f 30ff 	mov.w	r0, #4294967295
   13c1c:	bd38      	pop	{r3, r4, r5, pc}
   13c1e:	06d1      	lsls	r1, r2, #27
   13c20:	d52e      	bpl.n	13c80 <__swsetup_r+0xb8>
   13c22:	0752      	lsls	r2, r2, #29
   13c24:	d414      	bmi.n	13c50 <__swsetup_r+0x88>
   13c26:	6921      	ldr	r1, [r4, #16]
   13c28:	f043 0308 	orr.w	r3, r3, #8
   13c2c:	81a3      	strh	r3, [r4, #12]
   13c2e:	b29a      	uxth	r2, r3
   13c30:	2900      	cmp	r1, #0
   13c32:	d1d9      	bne.n	13be8 <__swsetup_r+0x20>
   13c34:	f402 7020 	and.w	r0, r2, #640	; 0x280
   13c38:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13c3c:	d0d4      	beq.n	13be8 <__swsetup_r+0x20>
   13c3e:	4621      	mov	r1, r4
   13c40:	4628      	mov	r0, r5
   13c42:	f000 f977 	bl	13f34 <__smakebuf_r>
   13c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c4a:	6921      	ldr	r1, [r4, #16]
   13c4c:	b29a      	uxth	r2, r3
   13c4e:	e7cb      	b.n	13be8 <__swsetup_r+0x20>
   13c50:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13c52:	b151      	cbz	r1, 13c6a <__swsetup_r+0xa2>
   13c54:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13c58:	4291      	cmp	r1, r2
   13c5a:	d004      	beq.n	13c66 <__swsetup_r+0x9e>
   13c5c:	4628      	mov	r0, r5
   13c5e:	f7f8 fb81 	bl	c364 <_free_r>
   13c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c66:	2200      	movs	r2, #0
   13c68:	6322      	str	r2, [r4, #48]	; 0x30
   13c6a:	6921      	ldr	r1, [r4, #16]
   13c6c:	2200      	movs	r2, #0
   13c6e:	e9c4 1200 	strd	r1, r2, [r4]
   13c72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13c76:	e7d7      	b.n	13c28 <__swsetup_r+0x60>
   13c78:	4618      	mov	r0, r3
   13c7a:	f7f7 fcd3 	bl	b624 <__sinit>
   13c7e:	e7ac      	b.n	13bda <__swsetup_r+0x12>
   13c80:	2209      	movs	r2, #9
   13c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13c86:	602a      	str	r2, [r5, #0]
   13c88:	f04f 30ff 	mov.w	r0, #4294967295
   13c8c:	81a3      	strh	r3, [r4, #12]
   13c8e:	bd38      	pop	{r3, r4, r5, pc}
   13c90:	20008b70 	.word	0x20008b70

00013c94 <__fputwc>:
   13c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13c98:	b082      	sub	sp, #8
   13c9a:	4682      	mov	sl, r0
   13c9c:	4688      	mov	r8, r1
   13c9e:	4614      	mov	r4, r2
   13ca0:	f7f7 ff7e 	bl	bba0 <__locale_mb_cur_max>
   13ca4:	2801      	cmp	r0, #1
   13ca6:	d103      	bne.n	13cb0 <__fputwc+0x1c>
   13ca8:	f108 33ff 	add.w	r3, r8, #4294967295
   13cac:	2bfe      	cmp	r3, #254	; 0xfe
   13cae:	d936      	bls.n	13d1e <__fputwc+0x8a>
   13cb0:	f10d 0904 	add.w	r9, sp, #4
   13cb4:	4642      	mov	r2, r8
   13cb6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   13cba:	4649      	mov	r1, r9
   13cbc:	4650      	mov	r0, sl
   13cbe:	f7fe fb29 	bl	12314 <_wcrtomb_r>
   13cc2:	1c42      	adds	r2, r0, #1
   13cc4:	4606      	mov	r6, r0
   13cc6:	d032      	beq.n	13d2e <__fputwc+0x9a>
   13cc8:	b320      	cbz	r0, 13d14 <__fputwc+0x80>
   13cca:	f89d c004 	ldrb.w	ip, [sp, #4]
   13cce:	2500      	movs	r5, #0
   13cd0:	e009      	b.n	13ce6 <__fputwc+0x52>
   13cd2:	6823      	ldr	r3, [r4, #0]
   13cd4:	1c5a      	adds	r2, r3, #1
   13cd6:	6022      	str	r2, [r4, #0]
   13cd8:	f883 c000 	strb.w	ip, [r3]
   13cdc:	3501      	adds	r5, #1
   13cde:	42b5      	cmp	r5, r6
   13ce0:	d218      	bcs.n	13d14 <__fputwc+0x80>
   13ce2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   13ce6:	68a3      	ldr	r3, [r4, #8]
   13ce8:	3b01      	subs	r3, #1
   13cea:	2b00      	cmp	r3, #0
   13cec:	60a3      	str	r3, [r4, #8]
   13cee:	daf0      	bge.n	13cd2 <__fputwc+0x3e>
   13cf0:	69a7      	ldr	r7, [r4, #24]
   13cf2:	42bb      	cmp	r3, r7
   13cf4:	4661      	mov	r1, ip
   13cf6:	4622      	mov	r2, r4
   13cf8:	4650      	mov	r0, sl
   13cfa:	db02      	blt.n	13d02 <__fputwc+0x6e>
   13cfc:	f1bc 0f0a 	cmp.w	ip, #10
   13d00:	d1e7      	bne.n	13cd2 <__fputwc+0x3e>
   13d02:	f000 f983 	bl	1400c <__swbuf_r>
   13d06:	1c43      	adds	r3, r0, #1
   13d08:	d1e8      	bne.n	13cdc <__fputwc+0x48>
   13d0a:	4606      	mov	r6, r0
   13d0c:	4630      	mov	r0, r6
   13d0e:	b002      	add	sp, #8
   13d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d14:	4646      	mov	r6, r8
   13d16:	4630      	mov	r0, r6
   13d18:	b002      	add	sp, #8
   13d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d1e:	fa5f fc88 	uxtb.w	ip, r8
   13d22:	f88d c004 	strb.w	ip, [sp, #4]
   13d26:	4606      	mov	r6, r0
   13d28:	f10d 0904 	add.w	r9, sp, #4
   13d2c:	e7cf      	b.n	13cce <__fputwc+0x3a>
   13d2e:	89a3      	ldrh	r3, [r4, #12]
   13d30:	4630      	mov	r0, r6
   13d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13d36:	81a3      	strh	r3, [r4, #12]
   13d38:	b002      	add	sp, #8
   13d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d3e:	bf00      	nop

00013d40 <_fputwc_r>:
   13d40:	b530      	push	{r4, r5, lr}
   13d42:	6e53      	ldr	r3, [r2, #100]	; 0x64
   13d44:	f013 0f01 	tst.w	r3, #1
   13d48:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13d4c:	4614      	mov	r4, r2
   13d4e:	b083      	sub	sp, #12
   13d50:	4605      	mov	r5, r0
   13d52:	b29a      	uxth	r2, r3
   13d54:	d101      	bne.n	13d5a <_fputwc_r+0x1a>
   13d56:	0598      	lsls	r0, r3, #22
   13d58:	d51c      	bpl.n	13d94 <_fputwc_r+0x54>
   13d5a:	0490      	lsls	r0, r2, #18
   13d5c:	d406      	bmi.n	13d6c <_fputwc_r+0x2c>
   13d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13d60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13d68:	81a3      	strh	r3, [r4, #12]
   13d6a:	6662      	str	r2, [r4, #100]	; 0x64
   13d6c:	4622      	mov	r2, r4
   13d6e:	4628      	mov	r0, r5
   13d70:	f7ff ff90 	bl	13c94 <__fputwc>
   13d74:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13d76:	07da      	lsls	r2, r3, #31
   13d78:	4605      	mov	r5, r0
   13d7a:	d402      	bmi.n	13d82 <_fputwc_r+0x42>
   13d7c:	89a3      	ldrh	r3, [r4, #12]
   13d7e:	059b      	lsls	r3, r3, #22
   13d80:	d502      	bpl.n	13d88 <_fputwc_r+0x48>
   13d82:	4628      	mov	r0, r5
   13d84:	b003      	add	sp, #12
   13d86:	bd30      	pop	{r4, r5, pc}
   13d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13d8a:	f7f7 ffa5 	bl	bcd8 <__retarget_lock_release_recursive>
   13d8e:	4628      	mov	r0, r5
   13d90:	b003      	add	sp, #12
   13d92:	bd30      	pop	{r4, r5, pc}
   13d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13d96:	9101      	str	r1, [sp, #4]
   13d98:	f7f7 ff9c 	bl	bcd4 <__retarget_lock_acquire_recursive>
   13d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13da0:	9901      	ldr	r1, [sp, #4]
   13da2:	b29a      	uxth	r2, r3
   13da4:	e7d9      	b.n	13d5a <_fputwc_r+0x1a>
   13da6:	bf00      	nop

00013da8 <_wcsnrtombs_l>:
   13da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dac:	b08b      	sub	sp, #44	; 0x2c
   13dae:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   13db2:	9f14      	ldr	r7, [sp, #80]	; 0x50
   13db4:	9103      	str	r1, [sp, #12]
   13db6:	4681      	mov	r9, r0
   13db8:	9205      	str	r2, [sp, #20]
   13dba:	461e      	mov	r6, r3
   13dbc:	f1b8 0f00 	cmp.w	r8, #0
   13dc0:	d05c      	beq.n	13e7c <_wcsnrtombs_l+0xd4>
   13dc2:	9b03      	ldr	r3, [sp, #12]
   13dc4:	2b00      	cmp	r3, #0
   13dc6:	d05e      	beq.n	13e86 <_wcsnrtombs_l+0xde>
   13dc8:	9b05      	ldr	r3, [sp, #20]
   13dca:	681d      	ldr	r5, [r3, #0]
   13dcc:	2f00      	cmp	r7, #0
   13dce:	d06a      	beq.n	13ea6 <_wcsnrtombs_l+0xfe>
   13dd0:	1e74      	subs	r4, r6, #1
   13dd2:	b34e      	cbz	r6, 13e28 <_wcsnrtombs_l+0x80>
   13dd4:	9b03      	ldr	r3, [sp, #12]
   13dd6:	9304      	str	r3, [sp, #16]
   13dd8:	3d04      	subs	r5, #4
   13dda:	2600      	movs	r6, #0
   13ddc:	9501      	str	r5, [sp, #4]
   13dde:	e00b      	b.n	13df8 <_wcsnrtombs_l+0x50>
   13de0:	9b03      	ldr	r3, [sp, #12]
   13de2:	bb2b      	cbnz	r3, 13e30 <_wcsnrtombs_l+0x88>
   13de4:	9b01      	ldr	r3, [sp, #4]
   13de6:	681a      	ldr	r2, [r3, #0]
   13de8:	2a00      	cmp	r2, #0
   13dea:	d03a      	beq.n	13e62 <_wcsnrtombs_l+0xba>
   13dec:	45bc      	cmp	ip, r7
   13dee:	d25c      	bcs.n	13eaa <_wcsnrtombs_l+0x102>
   13df0:	3c01      	subs	r4, #1
   13df2:	1c63      	adds	r3, r4, #1
   13df4:	4666      	mov	r6, ip
   13df6:	d017      	beq.n	13e28 <_wcsnrtombs_l+0x80>
   13df8:	f8d8 3000 	ldr.w	r3, [r8]
   13dfc:	9302      	str	r3, [sp, #8]
   13dfe:	9b01      	ldr	r3, [sp, #4]
   13e00:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   13e04:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13e08:	9301      	str	r3, [sp, #4]
   13e0a:	a907      	add	r1, sp, #28
   13e0c:	4643      	mov	r3, r8
   13e0e:	4648      	mov	r0, r9
   13e10:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13e14:	47a8      	blx	r5
   13e16:	1c42      	adds	r2, r0, #1
   13e18:	d03a      	beq.n	13e90 <_wcsnrtombs_l+0xe8>
   13e1a:	eb00 0c06 	add.w	ip, r0, r6
   13e1e:	45bc      	cmp	ip, r7
   13e20:	d9de      	bls.n	13de0 <_wcsnrtombs_l+0x38>
   13e22:	9b02      	ldr	r3, [sp, #8]
   13e24:	e9c8 3b00 	strd	r3, fp, [r8]
   13e28:	4630      	mov	r0, r6
   13e2a:	b00b      	add	sp, #44	; 0x2c
   13e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e30:	2800      	cmp	r0, #0
   13e32:	dd0e      	ble.n	13e52 <_wcsnrtombs_l+0xaa>
   13e34:	9b04      	ldr	r3, [sp, #16]
   13e36:	9d01      	ldr	r5, [sp, #4]
   13e38:	4418      	add	r0, r3
   13e3a:	1e5a      	subs	r2, r3, #1
   13e3c:	a907      	add	r1, sp, #28
   13e3e:	f100 3eff 	add.w	lr, r0, #4294967295
   13e42:	f811 3b01 	ldrb.w	r3, [r1], #1
   13e46:	f802 3f01 	strb.w	r3, [r2, #1]!
   13e4a:	4572      	cmp	r2, lr
   13e4c:	d1f9      	bne.n	13e42 <_wcsnrtombs_l+0x9a>
   13e4e:	9501      	str	r5, [sp, #4]
   13e50:	9004      	str	r0, [sp, #16]
   13e52:	9b05      	ldr	r3, [sp, #20]
   13e54:	681a      	ldr	r2, [r3, #0]
   13e56:	3204      	adds	r2, #4
   13e58:	601a      	str	r2, [r3, #0]
   13e5a:	9b01      	ldr	r3, [sp, #4]
   13e5c:	681a      	ldr	r2, [r3, #0]
   13e5e:	2a00      	cmp	r2, #0
   13e60:	d1c4      	bne.n	13dec <_wcsnrtombs_l+0x44>
   13e62:	9b03      	ldr	r3, [sp, #12]
   13e64:	b10b      	cbz	r3, 13e6a <_wcsnrtombs_l+0xc2>
   13e66:	9b05      	ldr	r3, [sp, #20]
   13e68:	601a      	str	r2, [r3, #0]
   13e6a:	f10c 36ff 	add.w	r6, ip, #4294967295
   13e6e:	2200      	movs	r2, #0
   13e70:	4630      	mov	r0, r6
   13e72:	f8c8 2000 	str.w	r2, [r8]
   13e76:	b00b      	add	sp, #44	; 0x2c
   13e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e7c:	9b03      	ldr	r3, [sp, #12]
   13e7e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   13e82:	2b00      	cmp	r3, #0
   13e84:	d1a0      	bne.n	13dc8 <_wcsnrtombs_l+0x20>
   13e86:	9b05      	ldr	r3, [sp, #20]
   13e88:	f04f 37ff 	mov.w	r7, #4294967295
   13e8c:	681d      	ldr	r5, [r3, #0]
   13e8e:	e79f      	b.n	13dd0 <_wcsnrtombs_l+0x28>
   13e90:	4606      	mov	r6, r0
   13e92:	218a      	movs	r1, #138	; 0x8a
   13e94:	2200      	movs	r2, #0
   13e96:	4630      	mov	r0, r6
   13e98:	f8c9 1000 	str.w	r1, [r9]
   13e9c:	f8c8 2000 	str.w	r2, [r8]
   13ea0:	b00b      	add	sp, #44	; 0x2c
   13ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea6:	463e      	mov	r6, r7
   13ea8:	e7be      	b.n	13e28 <_wcsnrtombs_l+0x80>
   13eaa:	4666      	mov	r6, ip
   13eac:	e7bc      	b.n	13e28 <_wcsnrtombs_l+0x80>
   13eae:	bf00      	nop

00013eb0 <_wcsnrtombs_r>:
   13eb0:	b510      	push	{r4, lr}
   13eb2:	b084      	sub	sp, #16
   13eb4:	4c05      	ldr	r4, [pc, #20]	; (13ecc <_wcsnrtombs_r+0x1c>)
   13eb6:	9806      	ldr	r0, [sp, #24]
   13eb8:	9000      	str	r0, [sp, #0]
   13eba:	9807      	ldr	r0, [sp, #28]
   13ebc:	9001      	str	r0, [sp, #4]
   13ebe:	4804      	ldr	r0, [pc, #16]	; (13ed0 <_wcsnrtombs_r+0x20>)
   13ec0:	6800      	ldr	r0, [r0, #0]
   13ec2:	9402      	str	r4, [sp, #8]
   13ec4:	f7ff ff70 	bl	13da8 <_wcsnrtombs_l>
   13ec8:	b004      	add	sp, #16
   13eca:	bd10      	pop	{r4, pc}
   13ecc:	200085e8 	.word	0x200085e8
   13ed0:	20008b70 	.word	0x20008b70

00013ed4 <category>:
   13ed4:	4b15      	ldr	r3, [pc, #84]	; (13f2c <category+0x58>)
   13ed6:	4298      	cmp	r0, r3
   13ed8:	d823      	bhi.n	13f22 <category+0x4e>
   13eda:	b570      	push	{r4, r5, r6, lr}
   13edc:	4e14      	ldr	r6, [pc, #80]	; (13f30 <category+0x5c>)
   13ede:	f04f 0e00 	mov.w	lr, #0
   13ee2:	f640 04db 	movw	r4, #2267	; 0x8db
   13ee6:	e003      	b.n	13ef0 <category+0x1c>
   13ee8:	f102 0e01 	add.w	lr, r2, #1
   13eec:	45a6      	cmp	lr, r4
   13eee:	dc16      	bgt.n	13f1e <category+0x4a>
   13ef0:	eb04 020e 	add.w	r2, r4, lr
   13ef4:	f022 0301 	bic.w	r3, r2, #1
   13ef8:	eb03 0362 	add.w	r3, r3, r2, asr #1
   13efc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   13f00:	1052      	asrs	r2, r2, #1
   13f02:	7859      	ldrb	r1, [r3, #1]
   13f04:	885d      	ldrh	r5, [r3, #2]
   13f06:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   13f0a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   13f0e:	448c      	add	ip, r1
   13f10:	4560      	cmp	r0, ip
   13f12:	d8e9      	bhi.n	13ee8 <category+0x14>
   13f14:	4288      	cmp	r0, r1
   13f16:	d206      	bcs.n	13f26 <category+0x52>
   13f18:	1e54      	subs	r4, r2, #1
   13f1a:	45a6      	cmp	lr, r4
   13f1c:	dde8      	ble.n	13ef0 <category+0x1c>
   13f1e:	20ff      	movs	r0, #255	; 0xff
   13f20:	bd70      	pop	{r4, r5, r6, pc}
   13f22:	20ff      	movs	r0, #255	; 0xff
   13f24:	4770      	bx	lr
   13f26:	7818      	ldrb	r0, [r3, #0]
   13f28:	bd70      	pop	{r4, r5, r6, pc}
   13f2a:	bf00      	nop
   13f2c:	000e01ef 	.word	0x000e01ef
   13f30:	20002700 	.word	0x20002700

00013f34 <__smakebuf_r>:
   13f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f38:	898b      	ldrh	r3, [r1, #12]
   13f3a:	460c      	mov	r4, r1
   13f3c:	0799      	lsls	r1, r3, #30
   13f3e:	b096      	sub	sp, #88	; 0x58
   13f40:	d508      	bpl.n	13f54 <__smakebuf_r+0x20>
   13f42:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13f46:	2201      	movs	r2, #1
   13f48:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13f4c:	6023      	str	r3, [r4, #0]
   13f4e:	b016      	add	sp, #88	; 0x58
   13f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13f58:	2900      	cmp	r1, #0
   13f5a:	4606      	mov	r6, r0
   13f5c:	db25      	blt.n	13faa <__smakebuf_r+0x76>
   13f5e:	466a      	mov	r2, sp
   13f60:	f000 f8ac 	bl	140bc <_fstat_r>
   13f64:	2800      	cmp	r0, #0
   13f66:	db1f      	blt.n	13fa8 <__smakebuf_r+0x74>
   13f68:	9d01      	ldr	r5, [sp, #4]
   13f6a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   13f6e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   13f72:	fab5 f585 	clz	r5, r5
   13f76:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13f7a:	096d      	lsrs	r5, r5, #5
   13f7c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   13f80:	4641      	mov	r1, r8
   13f82:	4630      	mov	r0, r6
   13f84:	f7f5 fe1a 	bl	9bbc <_malloc_r>
   13f88:	b1e0      	cbz	r0, 13fc4 <__smakebuf_r+0x90>
   13f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13f8e:	f8c4 8014 	str.w	r8, [r4, #20]
   13f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13f96:	6020      	str	r0, [r4, #0]
   13f98:	6120      	str	r0, [r4, #16]
   13f9a:	81a3      	strh	r3, [r4, #12]
   13f9c:	bb35      	cbnz	r5, 13fec <__smakebuf_r+0xb8>
   13f9e:	433b      	orrs	r3, r7
   13fa0:	81a3      	strh	r3, [r4, #12]
   13fa2:	b016      	add	sp, #88	; 0x58
   13fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13fa8:	89a3      	ldrh	r3, [r4, #12]
   13faa:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   13fae:	d019      	beq.n	13fe4 <__smakebuf_r+0xb0>
   13fb0:	f04f 0840 	mov.w	r8, #64	; 0x40
   13fb4:	2500      	movs	r5, #0
   13fb6:	4641      	mov	r1, r8
   13fb8:	4630      	mov	r0, r6
   13fba:	462f      	mov	r7, r5
   13fbc:	f7f5 fdfe 	bl	9bbc <_malloc_r>
   13fc0:	2800      	cmp	r0, #0
   13fc2:	d1e2      	bne.n	13f8a <__smakebuf_r+0x56>
   13fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13fc8:	059a      	lsls	r2, r3, #22
   13fca:	d4c0      	bmi.n	13f4e <__smakebuf_r+0x1a>
   13fcc:	f023 0303 	bic.w	r3, r3, #3
   13fd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13fd4:	f043 0302 	orr.w	r3, r3, #2
   13fd8:	2101      	movs	r1, #1
   13fda:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13fde:	81a3      	strh	r3, [r4, #12]
   13fe0:	6022      	str	r2, [r4, #0]
   13fe2:	e7b4      	b.n	13f4e <__smakebuf_r+0x1a>
   13fe4:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13fe8:	462f      	mov	r7, r5
   13fea:	e7c9      	b.n	13f80 <__smakebuf_r+0x4c>
   13fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13ff0:	4630      	mov	r0, r6
   13ff2:	f000 f879 	bl	140e8 <_isatty_r>
   13ff6:	b910      	cbnz	r0, 13ffe <__smakebuf_r+0xca>
   13ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13ffc:	e7cf      	b.n	13f9e <__smakebuf_r+0x6a>
   13ffe:	89a3      	ldrh	r3, [r4, #12]
   14000:	f023 0303 	bic.w	r3, r3, #3
   14004:	f043 0301 	orr.w	r3, r3, #1
   14008:	b21b      	sxth	r3, r3
   1400a:	e7c8      	b.n	13f9e <__smakebuf_r+0x6a>

0001400c <__swbuf_r>:
   1400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1400e:	460d      	mov	r5, r1
   14010:	4614      	mov	r4, r2
   14012:	4606      	mov	r6, r0
   14014:	b110      	cbz	r0, 1401c <__swbuf_r+0x10>
   14016:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14018:	2b00      	cmp	r3, #0
   1401a:	d04c      	beq.n	140b6 <__swbuf_r+0xaa>
   1401c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   14020:	69a3      	ldr	r3, [r4, #24]
   14022:	60a3      	str	r3, [r4, #8]
   14024:	0717      	lsls	r7, r2, #28
   14026:	b290      	uxth	r0, r2
   14028:	d51b      	bpl.n	14062 <__swbuf_r+0x56>
   1402a:	6923      	ldr	r3, [r4, #16]
   1402c:	b1cb      	cbz	r3, 14062 <__swbuf_r+0x56>
   1402e:	b2ed      	uxtb	r5, r5
   14030:	0481      	lsls	r1, r0, #18
   14032:	462f      	mov	r7, r5
   14034:	d522      	bpl.n	1407c <__swbuf_r+0x70>
   14036:	6822      	ldr	r2, [r4, #0]
   14038:	6961      	ldr	r1, [r4, #20]
   1403a:	1ad3      	subs	r3, r2, r3
   1403c:	4299      	cmp	r1, r3
   1403e:	dd29      	ble.n	14094 <__swbuf_r+0x88>
   14040:	3301      	adds	r3, #1
   14042:	68a1      	ldr	r1, [r4, #8]
   14044:	3901      	subs	r1, #1
   14046:	60a1      	str	r1, [r4, #8]
   14048:	1c51      	adds	r1, r2, #1
   1404a:	6021      	str	r1, [r4, #0]
   1404c:	7015      	strb	r5, [r2, #0]
   1404e:	6962      	ldr	r2, [r4, #20]
   14050:	429a      	cmp	r2, r3
   14052:	d027      	beq.n	140a4 <__swbuf_r+0x98>
   14054:	89a3      	ldrh	r3, [r4, #12]
   14056:	07db      	lsls	r3, r3, #31
   14058:	d501      	bpl.n	1405e <__swbuf_r+0x52>
   1405a:	2d0a      	cmp	r5, #10
   1405c:	d022      	beq.n	140a4 <__swbuf_r+0x98>
   1405e:	4638      	mov	r0, r7
   14060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14062:	4621      	mov	r1, r4
   14064:	4630      	mov	r0, r6
   14066:	f7ff fdaf 	bl	13bc8 <__swsetup_r>
   1406a:	bb08      	cbnz	r0, 140b0 <__swbuf_r+0xa4>
   1406c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   14070:	6923      	ldr	r3, [r4, #16]
   14072:	b290      	uxth	r0, r2
   14074:	b2ed      	uxtb	r5, r5
   14076:	0481      	lsls	r1, r0, #18
   14078:	462f      	mov	r7, r5
   1407a:	d4dc      	bmi.n	14036 <__swbuf_r+0x2a>
   1407c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14080:	81a2      	strh	r2, [r4, #12]
   14082:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14084:	6961      	ldr	r1, [r4, #20]
   14086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1408a:	6662      	str	r2, [r4, #100]	; 0x64
   1408c:	6822      	ldr	r2, [r4, #0]
   1408e:	1ad3      	subs	r3, r2, r3
   14090:	4299      	cmp	r1, r3
   14092:	dcd5      	bgt.n	14040 <__swbuf_r+0x34>
   14094:	4621      	mov	r1, r4
   14096:	4630      	mov	r0, r6
   14098:	f7fc fea0 	bl	10ddc <_fflush_r>
   1409c:	b940      	cbnz	r0, 140b0 <__swbuf_r+0xa4>
   1409e:	6822      	ldr	r2, [r4, #0]
   140a0:	2301      	movs	r3, #1
   140a2:	e7ce      	b.n	14042 <__swbuf_r+0x36>
   140a4:	4621      	mov	r1, r4
   140a6:	4630      	mov	r0, r6
   140a8:	f7fc fe98 	bl	10ddc <_fflush_r>
   140ac:	2800      	cmp	r0, #0
   140ae:	d0d6      	beq.n	1405e <__swbuf_r+0x52>
   140b0:	f04f 37ff 	mov.w	r7, #4294967295
   140b4:	e7d3      	b.n	1405e <__swbuf_r+0x52>
   140b6:	f7f7 fab5 	bl	b624 <__sinit>
   140ba:	e7af      	b.n	1401c <__swbuf_r+0x10>

000140bc <_fstat_r>:
   140bc:	b570      	push	{r4, r5, r6, lr}
   140be:	460c      	mov	r4, r1
   140c0:	4d08      	ldr	r5, [pc, #32]	; (140e4 <_fstat_r+0x28>)
   140c2:	4603      	mov	r3, r0
   140c4:	2600      	movs	r6, #0
   140c6:	4620      	mov	r0, r4
   140c8:	4611      	mov	r1, r2
   140ca:	461c      	mov	r4, r3
   140cc:	602e      	str	r6, [r5, #0]
   140ce:	f7f4 f9b5 	bl	843c <_fstat>
   140d2:	1c43      	adds	r3, r0, #1
   140d4:	d000      	beq.n	140d8 <_fstat_r+0x1c>
   140d6:	bd70      	pop	{r4, r5, r6, pc}
   140d8:	682b      	ldr	r3, [r5, #0]
   140da:	2b00      	cmp	r3, #0
   140dc:	d0fb      	beq.n	140d6 <_fstat_r+0x1a>
   140de:	6023      	str	r3, [r4, #0]
   140e0:	bd70      	pop	{r4, r5, r6, pc}
   140e2:	bf00      	nop
   140e4:	2002ae38 	.word	0x2002ae38

000140e8 <_isatty_r>:
   140e8:	b538      	push	{r3, r4, r5, lr}
   140ea:	4d07      	ldr	r5, [pc, #28]	; (14108 <_isatty_r+0x20>)
   140ec:	2200      	movs	r2, #0
   140ee:	4604      	mov	r4, r0
   140f0:	4608      	mov	r0, r1
   140f2:	602a      	str	r2, [r5, #0]
   140f4:	f7f4 f9a8 	bl	8448 <_isatty>
   140f8:	1c43      	adds	r3, r0, #1
   140fa:	d000      	beq.n	140fe <_isatty_r+0x16>
   140fc:	bd38      	pop	{r3, r4, r5, pc}
   140fe:	682b      	ldr	r3, [r5, #0]
   14100:	2b00      	cmp	r3, #0
   14102:	d0fb      	beq.n	140fc <_isatty_r+0x14>
   14104:	6023      	str	r3, [r4, #0]
   14106:	bd38      	pop	{r3, r4, r5, pc}
   14108:	2002ae38 	.word	0x2002ae38

0001410c <__aeabi_drsub>:
   1410c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   14110:	e002      	b.n	14118 <__adddf3>
   14112:	bf00      	nop

00014114 <__aeabi_dsub>:
   14114:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00014118 <__adddf3>:
   14118:	b530      	push	{r4, r5, lr}
   1411a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1411e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   14122:	ea94 0f05 	teq	r4, r5
   14126:	bf08      	it	eq
   14128:	ea90 0f02 	teqeq	r0, r2
   1412c:	bf1f      	itttt	ne
   1412e:	ea54 0c00 	orrsne.w	ip, r4, r0
   14132:	ea55 0c02 	orrsne.w	ip, r5, r2
   14136:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1413a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1413e:	f000 80e2 	beq.w	14306 <__adddf3+0x1ee>
   14142:	ea4f 5454 	mov.w	r4, r4, lsr #21
   14146:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1414a:	bfb8      	it	lt
   1414c:	426d      	neglt	r5, r5
   1414e:	dd0c      	ble.n	1416a <__adddf3+0x52>
   14150:	442c      	add	r4, r5
   14152:	ea80 0202 	eor.w	r2, r0, r2
   14156:	ea81 0303 	eor.w	r3, r1, r3
   1415a:	ea82 0000 	eor.w	r0, r2, r0
   1415e:	ea83 0101 	eor.w	r1, r3, r1
   14162:	ea80 0202 	eor.w	r2, r0, r2
   14166:	ea81 0303 	eor.w	r3, r1, r3
   1416a:	2d36      	cmp	r5, #54	; 0x36
   1416c:	bf88      	it	hi
   1416e:	bd30      	pophi	{r4, r5, pc}
   14170:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   14174:	ea4f 3101 	mov.w	r1, r1, lsl #12
   14178:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1417c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   14180:	d002      	beq.n	14188 <__adddf3+0x70>
   14182:	4240      	negs	r0, r0
   14184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14188:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1418c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   14190:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   14194:	d002      	beq.n	1419c <__adddf3+0x84>
   14196:	4252      	negs	r2, r2
   14198:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1419c:	ea94 0f05 	teq	r4, r5
   141a0:	f000 80a7 	beq.w	142f2 <__adddf3+0x1da>
   141a4:	f1a4 0401 	sub.w	r4, r4, #1
   141a8:	f1d5 0e20 	rsbs	lr, r5, #32
   141ac:	db0d      	blt.n	141ca <__adddf3+0xb2>
   141ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   141b2:	fa22 f205 	lsr.w	r2, r2, r5
   141b6:	1880      	adds	r0, r0, r2
   141b8:	f141 0100 	adc.w	r1, r1, #0
   141bc:	fa03 f20e 	lsl.w	r2, r3, lr
   141c0:	1880      	adds	r0, r0, r2
   141c2:	fa43 f305 	asr.w	r3, r3, r5
   141c6:	4159      	adcs	r1, r3
   141c8:	e00e      	b.n	141e8 <__adddf3+0xd0>
   141ca:	f1a5 0520 	sub.w	r5, r5, #32
   141ce:	f10e 0e20 	add.w	lr, lr, #32
   141d2:	2a01      	cmp	r2, #1
   141d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   141d8:	bf28      	it	cs
   141da:	f04c 0c02 	orrcs.w	ip, ip, #2
   141de:	fa43 f305 	asr.w	r3, r3, r5
   141e2:	18c0      	adds	r0, r0, r3
   141e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   141e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   141ec:	d507      	bpl.n	141fe <__adddf3+0xe6>
   141ee:	f04f 0e00 	mov.w	lr, #0
   141f2:	f1dc 0c00 	rsbs	ip, ip, #0
   141f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   141fa:	eb6e 0101 	sbc.w	r1, lr, r1
   141fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   14202:	d31b      	bcc.n	1423c <__adddf3+0x124>
   14204:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   14208:	d30c      	bcc.n	14224 <__adddf3+0x10c>
   1420a:	0849      	lsrs	r1, r1, #1
   1420c:	ea5f 0030 	movs.w	r0, r0, rrx
   14210:	ea4f 0c3c 	mov.w	ip, ip, rrx
   14214:	f104 0401 	add.w	r4, r4, #1
   14218:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1421c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   14220:	f080 809a 	bcs.w	14358 <__adddf3+0x240>
   14224:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   14228:	bf08      	it	eq
   1422a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1422e:	f150 0000 	adcs.w	r0, r0, #0
   14232:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   14236:	ea41 0105 	orr.w	r1, r1, r5
   1423a:	bd30      	pop	{r4, r5, pc}
   1423c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   14240:	4140      	adcs	r0, r0
   14242:	eb41 0101 	adc.w	r1, r1, r1
   14246:	3c01      	subs	r4, #1
   14248:	bf28      	it	cs
   1424a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1424e:	d2e9      	bcs.n	14224 <__adddf3+0x10c>
   14250:	f091 0f00 	teq	r1, #0
   14254:	bf04      	itt	eq
   14256:	4601      	moveq	r1, r0
   14258:	2000      	moveq	r0, #0
   1425a:	fab1 f381 	clz	r3, r1
   1425e:	bf08      	it	eq
   14260:	3320      	addeq	r3, #32
   14262:	f1a3 030b 	sub.w	r3, r3, #11
   14266:	f1b3 0220 	subs.w	r2, r3, #32
   1426a:	da0c      	bge.n	14286 <__adddf3+0x16e>
   1426c:	320c      	adds	r2, #12
   1426e:	dd08      	ble.n	14282 <__adddf3+0x16a>
   14270:	f102 0c14 	add.w	ip, r2, #20
   14274:	f1c2 020c 	rsb	r2, r2, #12
   14278:	fa01 f00c 	lsl.w	r0, r1, ip
   1427c:	fa21 f102 	lsr.w	r1, r1, r2
   14280:	e00c      	b.n	1429c <__adddf3+0x184>
   14282:	f102 0214 	add.w	r2, r2, #20
   14286:	bfd8      	it	le
   14288:	f1c2 0c20 	rsble	ip, r2, #32
   1428c:	fa01 f102 	lsl.w	r1, r1, r2
   14290:	fa20 fc0c 	lsr.w	ip, r0, ip
   14294:	bfdc      	itt	le
   14296:	ea41 010c 	orrle.w	r1, r1, ip
   1429a:	4090      	lslle	r0, r2
   1429c:	1ae4      	subs	r4, r4, r3
   1429e:	bfa2      	ittt	ge
   142a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   142a4:	4329      	orrge	r1, r5
   142a6:	bd30      	popge	{r4, r5, pc}
   142a8:	ea6f 0404 	mvn.w	r4, r4
   142ac:	3c1f      	subs	r4, #31
   142ae:	da1c      	bge.n	142ea <__adddf3+0x1d2>
   142b0:	340c      	adds	r4, #12
   142b2:	dc0e      	bgt.n	142d2 <__adddf3+0x1ba>
   142b4:	f104 0414 	add.w	r4, r4, #20
   142b8:	f1c4 0220 	rsb	r2, r4, #32
   142bc:	fa20 f004 	lsr.w	r0, r0, r4
   142c0:	fa01 f302 	lsl.w	r3, r1, r2
   142c4:	ea40 0003 	orr.w	r0, r0, r3
   142c8:	fa21 f304 	lsr.w	r3, r1, r4
   142cc:	ea45 0103 	orr.w	r1, r5, r3
   142d0:	bd30      	pop	{r4, r5, pc}
   142d2:	f1c4 040c 	rsb	r4, r4, #12
   142d6:	f1c4 0220 	rsb	r2, r4, #32
   142da:	fa20 f002 	lsr.w	r0, r0, r2
   142de:	fa01 f304 	lsl.w	r3, r1, r4
   142e2:	ea40 0003 	orr.w	r0, r0, r3
   142e6:	4629      	mov	r1, r5
   142e8:	bd30      	pop	{r4, r5, pc}
   142ea:	fa21 f004 	lsr.w	r0, r1, r4
   142ee:	4629      	mov	r1, r5
   142f0:	bd30      	pop	{r4, r5, pc}
   142f2:	f094 0f00 	teq	r4, #0
   142f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   142fa:	bf06      	itte	eq
   142fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   14300:	3401      	addeq	r4, #1
   14302:	3d01      	subne	r5, #1
   14304:	e74e      	b.n	141a4 <__adddf3+0x8c>
   14306:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1430a:	bf18      	it	ne
   1430c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   14310:	d029      	beq.n	14366 <__adddf3+0x24e>
   14312:	ea94 0f05 	teq	r4, r5
   14316:	bf08      	it	eq
   14318:	ea90 0f02 	teqeq	r0, r2
   1431c:	d005      	beq.n	1432a <__adddf3+0x212>
   1431e:	ea54 0c00 	orrs.w	ip, r4, r0
   14322:	bf04      	itt	eq
   14324:	4619      	moveq	r1, r3
   14326:	4610      	moveq	r0, r2
   14328:	bd30      	pop	{r4, r5, pc}
   1432a:	ea91 0f03 	teq	r1, r3
   1432e:	bf1e      	ittt	ne
   14330:	2100      	movne	r1, #0
   14332:	2000      	movne	r0, #0
   14334:	bd30      	popne	{r4, r5, pc}
   14336:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1433a:	d105      	bne.n	14348 <__adddf3+0x230>
   1433c:	0040      	lsls	r0, r0, #1
   1433e:	4149      	adcs	r1, r1
   14340:	bf28      	it	cs
   14342:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   14346:	bd30      	pop	{r4, r5, pc}
   14348:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1434c:	bf3c      	itt	cc
   1434e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   14352:	bd30      	popcc	{r4, r5, pc}
   14354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   14358:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1435c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   14360:	f04f 0000 	mov.w	r0, #0
   14364:	bd30      	pop	{r4, r5, pc}
   14366:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1436a:	bf1a      	itte	ne
   1436c:	4619      	movne	r1, r3
   1436e:	4610      	movne	r0, r2
   14370:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   14374:	bf1c      	itt	ne
   14376:	460b      	movne	r3, r1
   14378:	4602      	movne	r2, r0
   1437a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1437e:	bf06      	itte	eq
   14380:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   14384:	ea91 0f03 	teqeq	r1, r3
   14388:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1438c:	bd30      	pop	{r4, r5, pc}
   1438e:	bf00      	nop

00014390 <__aeabi_ui2d>:
   14390:	f090 0f00 	teq	r0, #0
   14394:	bf04      	itt	eq
   14396:	2100      	moveq	r1, #0
   14398:	4770      	bxeq	lr
   1439a:	b530      	push	{r4, r5, lr}
   1439c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   143a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   143a4:	f04f 0500 	mov.w	r5, #0
   143a8:	f04f 0100 	mov.w	r1, #0
   143ac:	e750      	b.n	14250 <__adddf3+0x138>
   143ae:	bf00      	nop

000143b0 <__aeabi_i2d>:
   143b0:	f090 0f00 	teq	r0, #0
   143b4:	bf04      	itt	eq
   143b6:	2100      	moveq	r1, #0
   143b8:	4770      	bxeq	lr
   143ba:	b530      	push	{r4, r5, lr}
   143bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   143c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   143c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   143c8:	bf48      	it	mi
   143ca:	4240      	negmi	r0, r0
   143cc:	f04f 0100 	mov.w	r1, #0
   143d0:	e73e      	b.n	14250 <__adddf3+0x138>
   143d2:	bf00      	nop

000143d4 <__aeabi_f2d>:
   143d4:	0042      	lsls	r2, r0, #1
   143d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   143da:	ea4f 0131 	mov.w	r1, r1, rrx
   143de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   143e2:	bf1f      	itttt	ne
   143e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   143e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   143ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   143f0:	4770      	bxne	lr
   143f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   143f6:	bf08      	it	eq
   143f8:	4770      	bxeq	lr
   143fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   143fe:	bf04      	itt	eq
   14400:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   14404:	4770      	bxeq	lr
   14406:	b530      	push	{r4, r5, lr}
   14408:	f44f 7460 	mov.w	r4, #896	; 0x380
   1440c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   14410:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   14414:	e71c      	b.n	14250 <__adddf3+0x138>
   14416:	bf00      	nop

00014418 <__aeabi_ul2d>:
   14418:	ea50 0201 	orrs.w	r2, r0, r1
   1441c:	bf08      	it	eq
   1441e:	4770      	bxeq	lr
   14420:	b530      	push	{r4, r5, lr}
   14422:	f04f 0500 	mov.w	r5, #0
   14426:	e00a      	b.n	1443e <__aeabi_l2d+0x16>

00014428 <__aeabi_l2d>:
   14428:	ea50 0201 	orrs.w	r2, r0, r1
   1442c:	bf08      	it	eq
   1442e:	4770      	bxeq	lr
   14430:	b530      	push	{r4, r5, lr}
   14432:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   14436:	d502      	bpl.n	1443e <__aeabi_l2d+0x16>
   14438:	4240      	negs	r0, r0
   1443a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1443e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14442:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14446:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1444a:	f43f aed8 	beq.w	141fe <__adddf3+0xe6>
   1444e:	f04f 0203 	mov.w	r2, #3
   14452:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   14456:	bf18      	it	ne
   14458:	3203      	addne	r2, #3
   1445a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1445e:	bf18      	it	ne
   14460:	3203      	addne	r2, #3
   14462:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   14466:	f1c2 0320 	rsb	r3, r2, #32
   1446a:	fa00 fc03 	lsl.w	ip, r0, r3
   1446e:	fa20 f002 	lsr.w	r0, r0, r2
   14472:	fa01 fe03 	lsl.w	lr, r1, r3
   14476:	ea40 000e 	orr.w	r0, r0, lr
   1447a:	fa21 f102 	lsr.w	r1, r1, r2
   1447e:	4414      	add	r4, r2
   14480:	e6bd      	b.n	141fe <__adddf3+0xe6>
   14482:	bf00      	nop

00014484 <__aeabi_d2lz>:
   14484:	b508      	push	{r3, lr}
   14486:	4602      	mov	r2, r0
   14488:	460b      	mov	r3, r1
   1448a:	ec43 2b17 	vmov	d7, r2, r3
   1448e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   14492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14496:	d403      	bmi.n	144a0 <__aeabi_d2lz+0x1c>
   14498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1449c:	f000 b80c 	b.w	144b8 <__aeabi_d2ulz>
   144a0:	eeb1 7b47 	vneg.f64	d7, d7
   144a4:	ec51 0b17 	vmov	r0, r1, d7
   144a8:	f000 f806 	bl	144b8 <__aeabi_d2ulz>
   144ac:	4240      	negs	r0, r0
   144ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   144b2:	bd08      	pop	{r3, pc}
   144b4:	0000      	movs	r0, r0
	...

000144b8 <__aeabi_d2ulz>:
   144b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 144e8 <__aeabi_d2ulz+0x30>
   144bc:	ec41 0b17 	vmov	d7, r0, r1
   144c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 144f0 <__aeabi_d2ulz+0x38>
   144c4:	ee27 6b06 	vmul.f64	d6, d7, d6
   144c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   144cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   144d0:	eea4 7b45 	vfms.f64	d7, d4, d5
   144d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   144d8:	ee16 1a10 	vmov	r1, s12
   144dc:	ee17 0a90 	vmov	r0, s15
   144e0:	4770      	bx	lr
   144e2:	bf00      	nop
   144e4:	f3af 8000 	nop.w
   144e8:	00000000 	.word	0x00000000
   144ec:	3df00000 	.word	0x3df00000
   144f0:	00000000 	.word	0x00000000
   144f4:	41f00000 	.word	0x41f00000

000144f8 <___ZN16CrashReportClasscvbEv_veneer>:
   144f8:	f85f f000 	ldr.w	pc, [pc]	; 144fc <___ZN16CrashReportClasscvbEv_veneer+0x4>
   144fc:	60001ded 	.word	0x60001ded

00014500 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   14500:	f85f f000 	ldr.w	pc, [pc]	; 14504 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   14504:	60001655 	.word	0x60001655

00014508 <___init_veneer>:
   14508:	f85f f000 	ldr.w	pc, [pc]	; 1450c <___init_veneer+0x4>
   1450c:	600025f1 	.word	0x600025f1

00014510 <___reboot_Teensyduino__veneer>:
   14510:	f85f f000 	ldr.w	pc, [pc]	; 14514 <___reboot_Teensyduino__veneer+0x4>
   14514:	60002549 	.word	0x60002549
	...

Disassembly of section .fini:

00014520 <_fini>:
   14520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14522:	bf00      	nop


C:\Users\zimme\AppData\Local\Temp\arduino\sketches\B6A2B96C86D1458F5F30CD00E995713A/microPAM_V2.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 fd70 	bl	60001f10 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 fd1c 	bl	60001f20 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 ff3e 	bl	6000239c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f001 f8f5 	bl	60002720 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 fd4c 	bl	60002018 <configure_external_ram>
	analog_init();
60001580:	f001 f870 	bl	60002664 <analog_init>
	pwm_init();
60001584:	f001 f8bc 	bl	60002700 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 ff36 	bl	600023f8 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 fcc2 	bl	60001f14 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 ffc7 	bl	60002528 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 fcbb 	bl	60001f1c <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 fcb7 	bl	60001f18 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f001 f899 	bl	600026e0 <____libc_init_array_veneer>
	main();
600015ae:	f001 f88b 	bl	600026c8 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	00015628 	.word	0x00015628
600015c0:	60002b44 	.word	0x60002b44
600015c4:	00000000 	.word	0x00000000
600015c8:	200092c0 	.word	0x200092c0
600015cc:	60018170 	.word	0x60018170
600015d0:	20000000 	.word	0x20000000
600015d4:	20022640 	.word	0x20022640
600015d8:	200092c0 	.word	0x200092c0
600015dc:	20009000 	.word	0x20009000
600015e0:	00008899 	.word	0x00008899
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	00007d61 	.word	0x00007d61
600015f4:	20022560 	.word	0x20022560
600015f8:	00007d65 	.word	0x00007d65
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	016e3600 	.word	0x016e3600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	20022564 	.word	0x20022564
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
60001654:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
{
60001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000165a:	460e      	mov	r6, r1
6000165c:	460f      	mov	r7, r1
6000165e:	bf28      	it	cs
60001660:	f44f 7660 	movcs.w	r6, #896	; 0x380
60001664:	4605      	mov	r5, r0
	__disable_irq();
60001666:	b672      	cpsid	i
	memory_pool = data;
60001668:	4b23      	ldr	r3, [pc, #140]	; (600016f8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa4>)
	memory_pool_first_mask = 0;
6000166a:	2400      	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
6000166c:	2270      	movs	r2, #112	; 0x70
	memory_pool = data;
6000166e:	6018      	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001670:	4621      	mov	r1, r4
	memory_pool_first_mask = 0;
60001672:	4b22      	ldr	r3, [pc, #136]	; (600016fc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa8>)
		memory_pool_available_mask[i] = 0;
60001674:	4822      	ldr	r0, [pc, #136]	; (60001700 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
	memory_pool_first_mask = 0;
60001676:	801c      	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001678:	f001 f84e 	bl	60002718 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
6000167c:	b1cf      	cbz	r7, 600016b2 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5e>
6000167e:	4621      	mov	r1, r4
60001680:	481f      	ldr	r0, [pc, #124]	; (60001700 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001682:	f04f 0c01 	mov.w	ip, #1
60001686:	094a      	lsrs	r2, r1, #5
60001688:	f001 031f 	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
6000168c:	3101      	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
6000168e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
60001692:	fa0c f303 	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
60001696:	428e      	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001698:	ea43 0304 	orr.w	r3, r3, r4
6000169c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
600016a0:	d8f1      	bhi.n	60001686 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x32>
600016a2:	4628      	mov	r0, r5
600016a4:	2300      	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
600016a6:	8043      	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
600016a8:	3301      	adds	r3, #1
600016aa:	f500 7082 	add.w	r0, r0, #260	; 0x104
600016ae:	429e      	cmp	r6, r3
600016b0:	d8f9      	bhi.n	600016a6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x52>
	}
	if (update_scheduled == false) {
600016b2:	4c14      	ldr	r4, [pc, #80]	; (60001704 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb0>)
600016b4:	7825      	ldrb	r5, [r4, #0]
600016b6:	b10d      	cbz	r5, 600016bc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
600016b8:	b662      	cpsie	i
}
600016ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
600016bc:	2008      	movs	r0, #8
600016be:	f001 f837 	bl	60002730 <___Znwj_veneer>
// some of these 4 possible instances may be in use by libraries.
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
600016c2:	2280      	movs	r2, #128	; 0x80
	// or false if all hardware timers are already in use.
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
600016c4:	4910      	ldr	r1, [pc, #64]	; (60001708 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb4>)
	constexpr IntervalTimer() {
600016c6:	7102      	strb	r2, [r0, #4]
600016c8:	6005      	str	r5, [r0, #0]
		return beginCycles(funct, cycles);
600016ca:	4a10      	ldr	r2, [pc, #64]	; (6000170c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb8>)
600016cc:	f001 f81c 	bl	60002708 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
600016d0:	7823      	ldrb	r3, [r4, #0]
600016d2:	2b00      	cmp	r3, #0
600016d4:	d1f0      	bne.n	600016b8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016d6:	4b0e      	ldr	r3, [pc, #56]	; (60001710 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xbc>)
600016d8:	4a0e      	ldr	r2, [pc, #56]	; (60001714 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc0>)
600016da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600016de:	490e      	ldr	r1, [pc, #56]	; (60001718 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc4>)
600016e0:	20d0      	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
600016e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016e6:	2240      	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600016e8:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
600016ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
600016f0:	2301      	movs	r3, #1
600016f2:	7023      	strb	r3, [r4, #0]
	__enable_irq();
600016f4:	b662      	cpsie	i
}
600016f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
600016f8:	200200a8 	.word	0x200200a8
600016fc:	200225dc 	.word	0x200225dc
60001700:	200200b0 	.word	0x200200b0
60001704:	200225f9 	.word	0x200225f9
60001708:	000077a1 	.word	0x000077a1
6000170c:	0001101b 	.word	0x0001101b
60001710:	20009000 	.word	0x20009000
60001714:	000077ad 	.word	0x000077ad
60001718:	e000e400 	.word	0xe000e400

6000171c <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
6000171c:	4b7c      	ldr	r3, [pc, #496]	; (60001910 <CrashReportClass::printTo(Print&) const+0x1f4>)
6000171e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001722:	2a0b      	cmp	r2, #11
{
60001724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001728:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
6000172a:	d11c      	bne.n	60001766 <CrashReportClass::printTo(Print&) const+0x4a>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
6000172c:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001730:	4978      	ldr	r1, [pc, #480]	; (60001914 <CrashReportClass::printTo(Print&) const+0x1f8>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001732:	4b79      	ldr	r3, [pc, #484]	; (60001918 <CrashReportClass::printTo(Print&) const+0x1fc>)
	while (data < end) {
60001734:	4e79      	ldr	r6, [pc, #484]	; (6000191c <CrashReportClass::printTo(Print&) const+0x200>)
		crc ^= *data++;
60001736:	f101 0c04 	add.w	ip, r1, #4
6000173a:	4050      	eors	r0, r2
6000173c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
6000173e:	f000 0201 	and.w	r2, r0, #1
60001742:	3c01      	subs	r4, #1
60001744:	fb03 f202 	mul.w	r2, r3, r2
60001748:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
6000174c:	d1f7      	bne.n	6000173e <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
6000174e:	45b4      	cmp	ip, r6
60001750:	d002      	beq.n	60001758 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
60001752:	684a      	ldr	r2, [r1, #4]
60001754:	4661      	mov	r1, ip
60001756:	e7ee      	b.n	60001736 <CrashReportClass::printTo(Print&) const+0x1a>
	}
	if (crc != info->crc) return 0;
60001758:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 60001910 <CrashReportClass::printTo(Print&) const+0x1f4>
6000175c:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001760:	4298      	cmp	r0, r3
60001762:	f000 80fd 	beq.w	60001960 <CrashReportClass::printTo(Print&) const+0x244>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001766:	682b      	ldr	r3, [r5, #0]
60001768:	2217      	movs	r2, #23
6000176a:	496d      	ldr	r1, [pc, #436]	; (60001920 <CrashReportClass::printTo(Print&) const+0x204>)
6000176c:	4628      	mov	r0, r5
6000176e:	685b      	ldr	r3, [r3, #4]
60001770:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001772:	4628      	mov	r0, r5
60001774:	f000 ffcc 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001778:	682b      	ldr	r3, [r5, #0]
6000177a:	2248      	movs	r2, #72	; 0x48
6000177c:	4969      	ldr	r1, [pc, #420]	; (60001924 <CrashReportClass::printTo(Print&) const+0x208>)
6000177e:	685b      	ldr	r3, [r3, #4]
60001780:	4628      	mov	r0, r5
60001782:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001784:	4628      	mov	r0, r5
60001786:	f000 ffc3 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000178a:	682b      	ldr	r3, [r5, #0]
6000178c:	2249      	movs	r2, #73	; 0x49
6000178e:	4966      	ldr	r1, [pc, #408]	; (60001928 <CrashReportClass::printTo(Print&) const+0x20c>)
60001790:	685b      	ldr	r3, [r3, #4]
60001792:	4628      	mov	r0, r5
60001794:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001796:	4628      	mov	r0, r5
60001798:	f000 ffba 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000179c:	682b      	ldr	r3, [r5, #0]
6000179e:	2224      	movs	r2, #36	; 0x24
600017a0:	4962      	ldr	r1, [pc, #392]	; (6000192c <CrashReportClass::printTo(Print&) const+0x210>)
600017a2:	685b      	ldr	r3, [r3, #4]
600017a4:	4628      	mov	r0, r5
600017a6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017a8:	4628      	mov	r0, r5
600017aa:	f000 ffb1 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017ae:	682b      	ldr	r3, [r5, #0]
600017b0:	2247      	movs	r2, #71	; 0x47
600017b2:	495f      	ldr	r1, [pc, #380]	; (60001930 <CrashReportClass::printTo(Print&) const+0x214>)
600017b4:	685b      	ldr	r3, [r3, #4]
600017b6:	4628      	mov	r0, r5
600017b8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017ba:	4628      	mov	r0, r5
600017bc:	f000 ffa8 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017c0:	682b      	ldr	r3, [r5, #0]
600017c2:	223f      	movs	r2, #63	; 0x3f
600017c4:	495b      	ldr	r1, [pc, #364]	; (60001934 <CrashReportClass::printTo(Print&) const+0x218>)
600017c6:	685b      	ldr	r3, [r3, #4]
600017c8:	4628      	mov	r0, r5
600017ca:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017cc:	4628      	mov	r0, r5
600017ce:	f000 ff9f 	bl	60002710 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
600017d2:	4b59      	ldr	r3, [pc, #356]	; (60001938 <CrashReportClass::printTo(Print&) const+0x21c>)
600017d4:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600017d6:	07a2      	lsls	r2, r4, #30
600017d8:	d50d      	bpl.n	600017f6 <CrashReportClass::printTo(Print&) const+0xda>
    uint32_t gpr5 = SRC_GPR5;
600017da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
600017dc:	4b57      	ldr	r3, [pc, #348]	; (6000193c <CrashReportClass::printTo(Print&) const+0x220>)
600017de:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
600017e0:	682b      	ldr	r3, [r5, #0]
600017e2:	f000 81b8 	beq.w	60001b56 <CrashReportClass::printTo(Print&) const+0x43a>
600017e6:	2240      	movs	r2, #64	; 0x40
600017e8:	4955      	ldr	r1, [pc, #340]	; (60001940 <CrashReportClass::printTo(Print&) const+0x224>)
600017ea:	685b      	ldr	r3, [r3, #4]
600017ec:	4628      	mov	r0, r5
600017ee:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017f0:	4628      	mov	r0, r5
600017f2:	f000 ff8d 	bl	60002710 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600017f6:	0763      	lsls	r3, r4, #29
600017f8:	f100 81a3 	bmi.w	60001b42 <CrashReportClass::printTo(Print&) const+0x426>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600017fc:	0727      	lsls	r7, r4, #28
600017fe:	f100 8196 	bmi.w	60001b2e <CrashReportClass::printTo(Print&) const+0x412>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001802:	06e6      	lsls	r6, r4, #27
60001804:	f100 8189 	bmi.w	60001b1a <CrashReportClass::printTo(Print&) const+0x3fe>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001808:	06a0      	lsls	r0, r4, #26
6000180a:	f100 817c 	bmi.w	60001b06 <CrashReportClass::printTo(Print&) const+0x3ea>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
6000180e:	0661      	lsls	r1, r4, #25
60001810:	f100 816f 	bmi.w	60001af2 <CrashReportClass::printTo(Print&) const+0x3d6>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001814:	0622      	lsls	r2, r4, #24
60001816:	f100 8134 	bmi.w	60001a82 <CrashReportClass::printTo(Print&) const+0x366>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000181a:	05e3      	lsls	r3, r4, #23
6000181c:	f100 813d 	bmi.w	60001a9a <CrashReportClass::printTo(Print&) const+0x37e>
  if (bc->bitmask) {
60001820:	4f3b      	ldr	r7, [pc, #236]	; (60001910 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
60001826:	2b00      	cmp	r3, #0
60001828:	d051      	beq.n	600018ce <CrashReportClass::printTo(Print&) const+0x1b2>
6000182a:	2401      	movs	r4, #1
							  return write((const uint8_t *)str, strlen(str)); }
6000182c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 6000195c <CrashReportClass::printTo(Print&) const+0x240>
60001830:	f8df 8120 	ldr.w	r8, [pc, #288]	; 60001954 <CrashReportClass::printTo(Print&) const+0x238>
60001834:	e004      	b.n	60001840 <CrashReportClass::printTo(Print&) const+0x124>
    for (int i=0; i < 6; i++) {
60001836:	3401      	adds	r4, #1
60001838:	2c07      	cmp	r4, #7
6000183a:	d039      	beq.n	600018b0 <CrashReportClass::printTo(Print&) const+0x194>
      if (bc->bitmask & (1 << i)) {
6000183c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
60001840:	1e62      	subs	r2, r4, #1
60001842:	2601      	movs	r6, #1
60001844:	fa06 f102 	lsl.w	r1, r6, r2
60001848:	4219      	tst	r1, r3
6000184a:	d0f4      	beq.n	60001836 <CrashReportClass::printTo(Print&) const+0x11a>
6000184c:	682b      	ldr	r3, [r5, #0]
6000184e:	eb08 0a82 	add.w	sl, r8, r2, lsl #2
60001852:	4649      	mov	r1, r9
60001854:	220e      	movs	r2, #14
60001856:	685b      	ldr	r3, [r3, #4]
60001858:	4628      	mov	r0, r5
6000185a:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
6000185c:	4621      	mov	r1, r4
6000185e:	4628      	mov	r0, r5
    for (int i=0; i < 6; i++) {
60001860:	3401      	adds	r4, #1
60001862:	f000 ff35 	bl	600026d0 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001866:	682b      	ldr	r3, [r5, #0]
60001868:	2205      	movs	r2, #5
6000186a:	4936      	ldr	r1, [pc, #216]	; (60001944 <CrashReportClass::printTo(Print&) const+0x228>)
6000186c:	685b      	ldr	r3, [r3, #4]
6000186e:	4628      	mov	r0, r5
60001870:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001872:	2300      	movs	r3, #0
60001874:	f8da 1004 	ldr.w	r1, [sl, #4]
60001878:	220a      	movs	r2, #10
6000187a:	4628      	mov	r0, r5
6000187c:	f000 ff54 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001880:	682b      	ldr	r3, [r5, #0]
60001882:	2204      	movs	r2, #4
60001884:	4930      	ldr	r1, [pc, #192]	; (60001948 <CrashReportClass::printTo(Print&) const+0x22c>)
60001886:	685b      	ldr	r3, [r3, #4]
60001888:	4628      	mov	r0, r5
6000188a:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000188c:	f8da 1004 	ldr.w	r1, [sl, #4]
60001890:	2300      	movs	r3, #0
60001892:	2210      	movs	r2, #16
60001894:	4628      	mov	r0, r5
60001896:	f000 ff47 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000189a:	682b      	ldr	r3, [r5, #0]
6000189c:	4632      	mov	r2, r6
6000189e:	492b      	ldr	r1, [pc, #172]	; (6000194c <CrashReportClass::printTo(Print&) const+0x230>)
600018a0:	685b      	ldr	r3, [r3, #4]
600018a2:	4628      	mov	r0, r5
600018a4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018a6:	4628      	mov	r0, r5
600018a8:	f000 ff32 	bl	60002710 <___ZN5Print7printlnEv_veneer>
600018ac:	2c07      	cmp	r4, #7
600018ae:	d1c5      	bne.n	6000183c <CrashReportClass::printTo(Print&) const+0x120>
    *(volatile uint32_t *)(&bc->bitmask) = 0;
600018b0:	4b27      	ldr	r3, [pc, #156]	; (60001950 <CrashReportClass::printTo(Print&) const+0x234>)
600018b2:	2200      	movs	r2, #0
600018b4:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600018b8:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
600018bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018c0:	4a24      	ldr	r2, [pc, #144]	; (60001954 <CrashReportClass::printTo(Print&) const+0x238>)
600018c2:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600018c6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ca:	f3bf 8f6f 	isb	sy
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
600018ce:	4a10      	ldr	r2, [pc, #64]	; (60001910 <CrashReportClass::printTo(Print&) const+0x1f4>)
600018d0:	2300      	movs	r3, #0
	info->ipsr  = 0;
600018d2:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
600018d6:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
600018da:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
600018de:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
600018e2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600018e6:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
600018ea:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600018ee:	4809      	ldr	r0, [pc, #36]	; (60001914 <CrashReportClass::printTo(Print&) const+0x1f8>)
600018f0:	4919      	ldr	r1, [pc, #100]	; (60001958 <CrashReportClass::printTo(Print&) const+0x23c>)
600018f2:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
600018f6:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600018fa:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018fe:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001902:	4a0d      	ldr	r2, [pc, #52]	; (60001938 <CrashReportClass::printTo(Print&) const+0x21c>)
}
60001904:	2001      	movs	r0, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001906:	6891      	ldr	r1, [r2, #8]
60001908:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
6000190a:	6313      	str	r3, [r2, #48]	; 0x30
}
6000190c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60001910:	2027ff00 	.word	0x2027ff00
60001914:	2027ff80 	.word	0x2027ff80
60001918:	edb88320 	.word	0xedb88320
6000191c:	2027ffa8 	.word	0x2027ffa8
60001920:	2000832c 	.word	0x2000832c
60001924:	20008344 	.word	0x20008344
60001928:	20008390 	.word	0x20008390
6000192c:	200083dc 	.word	0x200083dc
60001930:	20008404 	.word	0x20008404
60001934:	2000844c 	.word	0x2000844c
60001938:	400f8000 	.word	0x400f8000
6000193c:	0bad00f1 	.word	0x0bad00f1
60001940:	200084d8 	.word	0x200084d8
60001944:	200086b0 	.word	0x200086b0
60001948:	200086b8 	.word	0x200086b8
6000194c:	20007df8 	.word	0x20007df8
60001950:	2027f000 	.word	0x2027f000
60001954:	2027ffc0 	.word	0x2027ffc0
60001958:	2027ffa0 	.word	0x2027ffa0
6000195c:	200086a0 	.word	0x200086a0
							  return write((const uint8_t *)str, strlen(str)); }
60001960:	682b      	ldr	r3, [r5, #0]
60001962:	220c      	movs	r2, #12
60001964:	49aa      	ldr	r1, [pc, #680]	; (60001c10 <CrashReportClass::printTo(Print&) const+0x4f4>)
60001966:	4628      	mov	r0, r5
60001968:	685b      	ldr	r3, [r3, #4]
6000196a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000196c:	4628      	mov	r0, r5
6000196e:	f000 fecf 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001972:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
60001974:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
60001978:	4628      	mov	r0, r5
    info->time /= 60;
6000197a:	4ba6      	ldr	r3, [pc, #664]	; (60001c14 <CrashReportClass::printTo(Print&) const+0x4f8>)
6000197c:	f8d2 a004 	ldr.w	sl, [r2, #4]
60001980:	fba3 2709 	umull	r2, r7, r3, r9
60001984:	49a4      	ldr	r1, [pc, #656]	; (60001c18 <CrashReportClass::printTo(Print&) const+0x4fc>)
60001986:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
60001988:	fba3 2307 	umull	r2, r3, r3, r7
6000198c:	2226      	movs	r2, #38	; 0x26
6000198e:	095e      	lsrs	r6, r3, #5
60001990:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
60001994:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
60001996:	49a1      	ldr	r1, [pc, #644]	; (60001c1c <CrashReportClass::printTo(Print&) const+0x500>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001998:	220a      	movs	r2, #10
6000199a:	4628      	mov	r0, r5
6000199c:	fba1 3106 	umull	r3, r1, r1, r6
600019a0:	4623      	mov	r3, r4
600019a2:	0909      	lsrs	r1, r1, #4
600019a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
600019a8:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
600019ac:	f000 febc 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019b0:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
600019b2:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
600019b6:	2201      	movs	r2, #1
600019b8:	685b      	ldr	r3, [r3, #4]
600019ba:	4628      	mov	r0, r5
600019bc:	4998      	ldr	r1, [pc, #608]	; (60001c20 <CrashReportClass::printTo(Print&) const+0x504>)
600019be:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600019c0:	4623      	mov	r3, r4
600019c2:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
600019c6:	220a      	movs	r2, #10
600019c8:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
600019ca:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
600019ce:	f000 feab 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019d2:	682b      	ldr	r3, [r5, #0]
600019d4:	2201      	movs	r2, #1
600019d6:	4992      	ldr	r1, [pc, #584]	; (60001c20 <CrashReportClass::printTo(Print&) const+0x504>)
600019d8:	685b      	ldr	r3, [r3, #4]
600019da:	4628      	mov	r0, r5
600019dc:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600019de:	4623      	mov	r3, r4
600019e0:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
600019e4:	220a      	movs	r2, #10
600019e6:	4628      	mov	r0, r5
600019e8:	f000 fe9e 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
600019ec:	4628      	mov	r0, r5
600019ee:	f000 fe8f 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019f2:	682b      	ldr	r3, [r5, #0]
600019f4:	2224      	movs	r2, #36	; 0x24
600019f6:	498b      	ldr	r1, [pc, #556]	; (60001c24 <CrashReportClass::printTo(Print&) const+0x508>)
600019f8:	685b      	ldr	r3, [r3, #4]
600019fa:	4628      	mov	r0, r5
600019fc:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600019fe:	4623      	mov	r3, r4
60001a00:	2210      	movs	r2, #16
60001a02:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
60001a06:	4628      	mov	r0, r5
60001a08:	f000 fe8e 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001a0c:	4628      	mov	r0, r5
60001a0e:	f000 fe7f 	bl	60002710 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
60001a12:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
60001a16:	2e00      	cmp	r6, #0
60001a18:	f040 80a0 	bne.w	60001b5c <CrashReportClass::printTo(Print&) const+0x440>
    uint32_t _HFSR = info->hfsr;
60001a1c:	4e82      	ldr	r6, [pc, #520]	; (60001c28 <CrashReportClass::printTo(Print&) const+0x50c>)
60001a1e:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001a22:	2c00      	cmp	r4, #0
60001a24:	f040 80bb 	bne.w	60001b9e <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001a28:	682b      	ldr	r3, [r5, #0]
60001a2a:	2222      	movs	r2, #34	; 0x22
60001a2c:	497f      	ldr	r1, [pc, #508]	; (60001c2c <CrashReportClass::printTo(Print&) const+0x510>)
60001a2e:	4628      	mov	r0, r5
60001a30:	685b      	ldr	r3, [r3, #4]
60001a32:	4798      	blx	r3
    p.print(info->temp);
60001a34:	4b7c      	ldr	r3, [pc, #496]	; (60001c28 <CrashReportClass::printTo(Print&) const+0x50c>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001a36:	2102      	movs	r1, #2
60001a38:	4628      	mov	r0, r5
60001a3a:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001a3e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
60001a42:	f000 fe51 	bl	600026e8 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a46:	682b      	ldr	r3, [r5, #0]
60001a48:	2205      	movs	r2, #5
60001a4a:	4979      	ldr	r1, [pc, #484]	; (60001c30 <CrashReportClass::printTo(Print&) const+0x514>)
60001a4c:	685b      	ldr	r3, [r3, #4]
60001a4e:	4628      	mov	r0, r5
60001a50:	4798      	blx	r3
60001a52:	682b      	ldr	r3, [r5, #0]
60001a54:	221d      	movs	r2, #29
60001a56:	4977      	ldr	r1, [pc, #476]	; (60001c34 <CrashReportClass::printTo(Print&) const+0x518>)
60001a58:	685b      	ldr	r3, [r3, #4]
60001a5a:	4628      	mov	r0, r5
60001a5c:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001a5e:	4a76      	ldr	r2, [pc, #472]	; (60001c38 <CrashReportClass::printTo(Print&) const+0x51c>)
60001a60:	4876      	ldr	r0, [pc, #472]	; (60001c3c <CrashReportClass::printTo(Print&) const+0x520>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001a62:	2300      	movs	r3, #0
60001a64:	6811      	ldr	r1, [r2, #0]
60001a66:	220a      	movs	r2, #10
60001a68:	fba0 0101 	umull	r0, r1, r0, r1
60001a6c:	4628      	mov	r0, r5
60001a6e:	0c89      	lsrs	r1, r1, #18
60001a70:	f000 fe5a 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a74:	682b      	ldr	r3, [r5, #0]
60001a76:	2204      	movs	r2, #4
60001a78:	4971      	ldr	r1, [pc, #452]	; (60001c40 <CrashReportClass::printTo(Print&) const+0x524>)
60001a7a:	685b      	ldr	r3, [r3, #4]
60001a7c:	4628      	mov	r0, r5
60001a7e:	4798      	blx	r3
60001a80:	e6a7      	b.n	600017d2 <CrashReportClass::printTo(Print&) const+0xb6>
60001a82:	682b      	ldr	r3, [r5, #0]
60001a84:	2221      	movs	r2, #33	; 0x21
60001a86:	496f      	ldr	r1, [pc, #444]	; (60001c44 <CrashReportClass::printTo(Print&) const+0x528>)
60001a88:	4628      	mov	r0, r5
60001a8a:	685b      	ldr	r3, [r3, #4]
60001a8c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a8e:	4628      	mov	r0, r5
60001a90:	f000 fe3e 	bl	60002710 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001a94:	05e3      	lsls	r3, r4, #23
60001a96:	f57f aec3 	bpl.w	60001820 <CrashReportClass::printTo(Print&) const+0x104>
							  return write((const uint8_t *)str, strlen(str)); }
60001a9a:	682b      	ldr	r3, [r5, #0]
60001a9c:	2229      	movs	r2, #41	; 0x29
60001a9e:	496a      	ldr	r1, [pc, #424]	; (60001c48 <CrashReportClass::printTo(Print&) const+0x52c>)
60001aa0:	4628      	mov	r0, r5
60001aa2:	685b      	ldr	r3, [r3, #4]
60001aa4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001aa6:	4628      	mov	r0, r5
60001aa8:	f000 fe32 	bl	60002710 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001aac:	4967      	ldr	r1, [pc, #412]	; (60001c4c <CrashReportClass::printTo(Print&) const+0x530>)
							  return write((const uint8_t *)str, strlen(str)); }
60001aae:	6828      	ldr	r0, [r5, #0]
60001ab0:	2221      	movs	r2, #33	; 0x21
60001ab2:	688b      	ldr	r3, [r1, #8]
60001ab4:	6844      	ldr	r4, [r0, #4]
60001ab6:	4628      	mov	r0, r5
60001ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
60001abc:	608b      	str	r3, [r1, #8]
60001abe:	4964      	ldr	r1, [pc, #400]	; (60001c50 <CrashReportClass::printTo(Print&) const+0x534>)
60001ac0:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
60001ac2:	4628      	mov	r0, r5
60001ac4:	f000 fe24 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001ac8:	682b      	ldr	r3, [r5, #0]
60001aca:	2242      	movs	r2, #66	; 0x42
60001acc:	4961      	ldr	r1, [pc, #388]	; (60001c54 <CrashReportClass::printTo(Print&) const+0x538>)
60001ace:	685b      	ldr	r3, [r3, #4]
60001ad0:	4628      	mov	r0, r5
60001ad2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001ad4:	4628      	mov	r0, r5
60001ad6:	f000 fe1b 	bl	60002710 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001ada:	4a5f      	ldr	r2, [pc, #380]	; (60001c58 <CrashReportClass::printTo(Print&) const+0x53c>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001adc:	4b5f      	ldr	r3, [pc, #380]	; (60001c5c <CrashReportClass::printTo(Print&) const+0x540>)
60001ade:	2107      	movs	r1, #7
60001ae0:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001ae2:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001ae8:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001aea:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001aee:	bf30      	wfi
60001af0:	e7fd      	b.n	60001aee <CrashReportClass::printTo(Print&) const+0x3d2>
							  return write((const uint8_t *)str, strlen(str)); }
60001af2:	682b      	ldr	r3, [r5, #0]
60001af4:	2221      	movs	r2, #33	; 0x21
60001af6:	495a      	ldr	r1, [pc, #360]	; (60001c60 <CrashReportClass::printTo(Print&) const+0x544>)
60001af8:	4628      	mov	r0, r5
60001afa:	685b      	ldr	r3, [r3, #4]
60001afc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001afe:	4628      	mov	r0, r5
60001b00:	f000 fe06 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001b04:	e686      	b.n	60001814 <CrashReportClass::printTo(Print&) const+0xf8>
							  return write((const uint8_t *)str, strlen(str)); }
60001b06:	682b      	ldr	r3, [r5, #0]
60001b08:	2229      	movs	r2, #41	; 0x29
60001b0a:	4956      	ldr	r1, [pc, #344]	; (60001c64 <CrashReportClass::printTo(Print&) const+0x548>)
60001b0c:	4628      	mov	r0, r5
60001b0e:	685b      	ldr	r3, [r3, #4]
60001b10:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b12:	4628      	mov	r0, r5
60001b14:	f000 fdfc 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001b18:	e679      	b.n	6000180e <CrashReportClass::printTo(Print&) const+0xf2>
							  return write((const uint8_t *)str, strlen(str)); }
60001b1a:	682b      	ldr	r3, [r5, #0]
60001b1c:	2226      	movs	r2, #38	; 0x26
60001b1e:	4952      	ldr	r1, [pc, #328]	; (60001c68 <CrashReportClass::printTo(Print&) const+0x54c>)
60001b20:	4628      	mov	r0, r5
60001b22:	685b      	ldr	r3, [r3, #4]
60001b24:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b26:	4628      	mov	r0, r5
60001b28:	f000 fdf2 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001b2c:	e66c      	b.n	60001808 <CrashReportClass::printTo(Print&) const+0xec>
							  return write((const uint8_t *)str, strlen(str)); }
60001b2e:	682b      	ldr	r3, [r5, #0]
60001b30:	222a      	movs	r2, #42	; 0x2a
60001b32:	494e      	ldr	r1, [pc, #312]	; (60001c6c <CrashReportClass::printTo(Print&) const+0x550>)
60001b34:	4628      	mov	r0, r5
60001b36:	685b      	ldr	r3, [r3, #4]
60001b38:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b3a:	4628      	mov	r0, r5
60001b3c:	f000 fde8 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001b40:	e65f      	b.n	60001802 <CrashReportClass::printTo(Print&) const+0xe6>
							  return write((const uint8_t *)str, strlen(str)); }
60001b42:	682b      	ldr	r3, [r5, #0]
60001b44:	2227      	movs	r2, #39	; 0x27
60001b46:	494a      	ldr	r1, [pc, #296]	; (60001c70 <CrashReportClass::printTo(Print&) const+0x554>)
60001b48:	4628      	mov	r0, r5
60001b4a:	685b      	ldr	r3, [r3, #4]
60001b4c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b4e:	4628      	mov	r0, r5
60001b50:	f000 fdde 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001b54:	e652      	b.n	600017fc <CrashReportClass::printTo(Print&) const+0xe0>
							  return write((const uint8_t *)str, strlen(str)); }
60001b56:	2248      	movs	r2, #72	; 0x48
60001b58:	4946      	ldr	r1, [pc, #280]	; (60001c74 <CrashReportClass::printTo(Print&) const+0x558>)
60001b5a:	e646      	b.n	600017ea <CrashReportClass::printTo(Print&) const+0xce>
60001b5c:	682b      	ldr	r3, [r5, #0]
60001b5e:	2208      	movs	r2, #8
60001b60:	4945      	ldr	r1, [pc, #276]	; (60001c78 <CrashReportClass::printTo(Print&) const+0x55c>)
60001b62:	4628      	mov	r0, r5
60001b64:	685b      	ldr	r3, [r3, #4]
60001b66:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001b68:	4623      	mov	r3, r4
60001b6a:	2210      	movs	r2, #16
60001b6c:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001b70:	4628      	mov	r0, r5
60001b72:	f000 fdd9 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001b76:	4628      	mov	r0, r5
60001b78:	f000 fdca 	bl	60002710 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001b7c:	07f4      	lsls	r4, r6, #31
60001b7e:	d427      	bmi.n	60001bd0 <CrashReportClass::printTo(Print&) const+0x4b4>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001b80:	07b0      	lsls	r0, r6, #30
60001b82:	f100 811d 	bmi.w	60001dc0 <CrashReportClass::printTo(Print&) const+0x6a4>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001b86:	0731      	lsls	r1, r6, #28
60001b88:	f100 810e 	bmi.w	60001da8 <CrashReportClass::printTo(Print&) const+0x68c>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001b8c:	06f2      	lsls	r2, r6, #27
60001b8e:	f100 8127 	bmi.w	60001de0 <CrashReportClass::printTo(Print&) const+0x6c4>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001b92:	06b3      	lsls	r3, r6, #26
60001b94:	d525      	bpl.n	60001be2 <CrashReportClass::printTo(Print&) const+0x4c6>
							  return write((const uint8_t *)str, strlen(str)); }
60001b96:	682b      	ldr	r3, [r5, #0]
60001b98:	222a      	movs	r2, #42	; 0x2a
60001b9a:	4938      	ldr	r1, [pc, #224]	; (60001c7c <CrashReportClass::printTo(Print&) const+0x560>)
60001b9c:	e01b      	b.n	60001bd6 <CrashReportClass::printTo(Print&) const+0x4ba>
60001b9e:	682b      	ldr	r3, [r5, #0]
60001ba0:	2208      	movs	r2, #8
60001ba2:	4937      	ldr	r1, [pc, #220]	; (60001c80 <CrashReportClass::printTo(Print&) const+0x564>)
60001ba4:	4628      	mov	r0, r5
60001ba6:	685b      	ldr	r3, [r3, #4]
60001ba8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001baa:	2300      	movs	r3, #0
60001bac:	2210      	movs	r2, #16
60001bae:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001bb2:	4628      	mov	r0, r5
60001bb4:	f000 fdb8 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001bb8:	4628      	mov	r0, r5
60001bba:	f000 fda9 	bl	60002710 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001bbe:	07a0      	lsls	r0, r4, #30
60001bc0:	d466      	bmi.n	60001c90 <CrashReportClass::printTo(Print&) const+0x574>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001bc2:	0061      	lsls	r1, r4, #1
60001bc4:	f57f af30 	bpl.w	60001a28 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001bc8:	682b      	ldr	r3, [r5, #0]
60001bca:	221b      	movs	r2, #27
60001bcc:	492d      	ldr	r1, [pc, #180]	; (60001c84 <CrashReportClass::printTo(Print&) const+0x568>)
60001bce:	e062      	b.n	60001c96 <CrashReportClass::printTo(Print&) const+0x57a>
60001bd0:	682b      	ldr	r3, [r5, #0]
60001bd2:	2228      	movs	r2, #40	; 0x28
60001bd4:	492c      	ldr	r1, [pc, #176]	; (60001c88 <CrashReportClass::printTo(Print&) const+0x56c>)
60001bd6:	685b      	ldr	r3, [r3, #4]
60001bd8:	4628      	mov	r0, r5
60001bda:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bdc:	4628      	mov	r0, r5
60001bde:	f000 fd97 	bl	60002710 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001be2:	0637      	lsls	r7, r6, #24
60001be4:	d47d      	bmi.n	60001ce2 <CrashReportClass::printTo(Print&) const+0x5c6>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001be6:	05f4      	lsls	r4, r6, #23
60001be8:	d45c      	bmi.n	60001ca4 <CrashReportClass::printTo(Print&) const+0x588>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001bea:	05b0      	lsls	r0, r6, #22
60001bec:	f100 80e4 	bmi.w	60001db8 <CrashReportClass::printTo(Print&) const+0x69c>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001bf0:	0571      	lsls	r1, r6, #21
60001bf2:	f100 80dd 	bmi.w	60001db0 <CrashReportClass::printTo(Print&) const+0x694>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001bf6:	0532      	lsls	r2, r6, #20
60001bf8:	f100 80ee 	bmi.w	60001dd8 <CrashReportClass::printTo(Print&) const+0x6bc>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001bfc:	04f3      	lsls	r3, r6, #19
60001bfe:	f100 80e7 	bmi.w	60001dd0 <CrashReportClass::printTo(Print&) const+0x6b4>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001c02:	04b7      	lsls	r7, r6, #18
60001c04:	d557      	bpl.n	60001cb6 <CrashReportClass::printTo(Print&) const+0x59a>
							  return write((const uint8_t *)str, strlen(str)); }
60001c06:	682b      	ldr	r3, [r5, #0]
60001c08:	2231      	movs	r2, #49	; 0x31
60001c0a:	4920      	ldr	r1, [pc, #128]	; (60001c8c <CrashReportClass::printTo(Print&) const+0x570>)
60001c0c:	e04d      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001c0e:	bf00      	nop
60001c10:	20007e14 	.word	0x20007e14
60001c14:	88888889 	.word	0x88888889
60001c18:	20007e24 	.word	0x20007e24
60001c1c:	aaaaaaab 	.word	0xaaaaaaab
60001c20:	20007e4c 	.word	0x20007e4c
60001c24:	20007e50 	.word	0x20007e50
60001c28:	2027ff00 	.word	0x2027ff00
60001c2c:	200082d8 	.word	0x200082d8
60001c30:	200082fc 	.word	0x200082fc
60001c34:	20008304 	.word	0x20008304
60001c38:	200088b8 	.word	0x200088b8
60001c3c:	431bde83 	.word	0x431bde83
60001c40:	20008324 	.word	0x20008324
60001c44:	200085e8 	.word	0x200085e8
60001c48:	2000860c 	.word	0x2000860c
60001c4c:	400f8000 	.word	0x400f8000
60001c50:	20008638 	.word	0x20008638
60001c54:	2000865c 	.word	0x2000865c
60001c58:	400d4000 	.word	0x400d4000
60001c5c:	400ac000 	.word	0x400ac000
60001c60:	200085c4 	.word	0x200085c4
60001c64:	20008598 	.word	0x20008598
60001c68:	20008570 	.word	0x20008570
60001c6c:	20008544 	.word	0x20008544
60001c70:	2000851c 	.word	0x2000851c
60001c74:	2000848c 	.word	0x2000848c
60001c78:	20007e78 	.word	0x20007e78
60001c7c:	20007f28 	.word	0x20007f28
60001c80:	20008288 	.word	0x20008288
60001c84:	200082bc 	.word	0x200082bc
60001c88:	20007e84 	.word	0x20007e84
60001c8c:	2000814c 	.word	0x2000814c
60001c90:	682b      	ldr	r3, [r5, #0]
60001c92:	2226      	movs	r2, #38	; 0x26
60001c94:	495c      	ldr	r1, [pc, #368]	; (60001e08 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001c96:	4628      	mov	r0, r5
60001c98:	685b      	ldr	r3, [r3, #4]
60001c9a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c9c:	4628      	mov	r0, r5
60001c9e:	f000 fd37 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001ca2:	e6c1      	b.n	60001a28 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001ca4:	682b      	ldr	r3, [r5, #0]
60001ca6:	2220      	movs	r2, #32
60001ca8:	4958      	ldr	r1, [pc, #352]	; (60001e0c <CrashReportClass::printTo(Print&) const+0x6f0>)
60001caa:	685b      	ldr	r3, [r3, #4]
60001cac:	4628      	mov	r0, r5
60001cae:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001cb0:	4628      	mov	r0, r5
60001cb2:	f000 fd2d 	bl	60002710 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001cb6:	0434      	lsls	r4, r6, #16
60001cb8:	d43f      	bmi.n	60001d3a <CrashReportClass::printTo(Print&) const+0x61e>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001cba:	03f0      	lsls	r0, r6, #15
60001cbc:	d42d      	bmi.n	60001d1a <CrashReportClass::printTo(Print&) const+0x5fe>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001cbe:	03b1      	lsls	r1, r6, #14
60001cc0:	f100 8082 	bmi.w	60001dc8 <CrashReportClass::printTo(Print&) const+0x6ac>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001cc4:	0372      	lsls	r2, r6, #13
60001cc6:	d44a      	bmi.n	60001d5e <CrashReportClass::printTo(Print&) const+0x642>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001cc8:	0333      	lsls	r3, r6, #12
60001cca:	f100 8091 	bmi.w	60001df0 <CrashReportClass::printTo(Print&) const+0x6d4>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001cce:	01f7      	lsls	r7, r6, #7
60001cd0:	f100 808a 	bmi.w	60001de8 <CrashReportClass::printTo(Print&) const+0x6cc>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001cd4:	01b4      	lsls	r4, r6, #6
60001cd6:	f57f aea1 	bpl.w	60001a1c <CrashReportClass::printTo(Print&) const+0x300>
							  return write((const uint8_t *)str, strlen(str)); }
60001cda:	682b      	ldr	r3, [r5, #0]
60001cdc:	221b      	movs	r2, #27
60001cde:	494c      	ldr	r1, [pc, #304]	; (60001e10 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001ce0:	e01e      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001ce2:	682b      	ldr	r3, [r5, #0]
60001ce4:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001ce6:	4c4b      	ldr	r4, [pc, #300]	; (60001e14 <CrashReportClass::printTo(Print&) const+0x6f8>)
60001ce8:	4628      	mov	r0, r5
60001cea:	494b      	ldr	r1, [pc, #300]	; (60001e18 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001cec:	685b      	ldr	r3, [r3, #4]
60001cee:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cf0:	2210      	movs	r2, #16
60001cf2:	2300      	movs	r3, #0
60001cf4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001cf8:	4628      	mov	r0, r5
60001cfa:	f000 fd15 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001cfe:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001d02:	2a1f      	cmp	r2, #31
60001d04:	d92f      	bls.n	60001d66 <CrashReportClass::printTo(Print&) const+0x64a>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001d06:	4b45      	ldr	r3, [pc, #276]	; (60001e1c <CrashReportClass::printTo(Print&) const+0x700>)
60001d08:	429a      	cmp	r2, r3
60001d0a:	d302      	bcc.n	60001d12 <CrashReportClass::printTo(Print&) const+0x5f6>
60001d0c:	3320      	adds	r3, #32
60001d0e:	429a      	cmp	r2, r3
60001d10:	d372      	bcc.n	60001df8 <CrashReportClass::printTo(Print&) const+0x6dc>
        p.println();
60001d12:	4628      	mov	r0, r5
60001d14:	f000 fcfc 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001d18:	e765      	b.n	60001be6 <CrashReportClass::printTo(Print&) const+0x4ca>
							  return write((const uint8_t *)str, strlen(str)); }
60001d1a:	682b      	ldr	r3, [r5, #0]
60001d1c:	2223      	movs	r2, #35	; 0x23
60001d1e:	4940      	ldr	r1, [pc, #256]	; (60001e20 <CrashReportClass::printTo(Print&) const+0x704>)
60001d20:	685b      	ldr	r3, [r3, #4]
60001d22:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001d24:	4e3b      	ldr	r6, [pc, #236]	; (60001e14 <CrashReportClass::printTo(Print&) const+0x6f8>)
60001d26:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d28:	4628      	mov	r0, r5
60001d2a:	f000 fcf1 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001d2e:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001d32:	2c00      	cmp	r4, #0
60001d34:	f43f ae78 	beq.w	60001a28 <CrashReportClass::printTo(Print&) const+0x30c>
60001d38:	e731      	b.n	60001b9e <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001d3a:	682b      	ldr	r3, [r5, #0]
60001d3c:	2221      	movs	r2, #33	; 0x21
60001d3e:	4939      	ldr	r1, [pc, #228]	; (60001e24 <CrashReportClass::printTo(Print&) const+0x708>)
60001d40:	4628      	mov	r0, r5
60001d42:	685b      	ldr	r3, [r3, #4]
60001d44:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001d46:	4933      	ldr	r1, [pc, #204]	; (60001e14 <CrashReportClass::printTo(Print&) const+0x6f8>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d48:	2300      	movs	r3, #0
60001d4a:	2210      	movs	r2, #16
60001d4c:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001d50:	4628      	mov	r0, r5
60001d52:	f000 fce9 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001d56:	4628      	mov	r0, r5
60001d58:	f000 fcda 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001d5c:	e7ad      	b.n	60001cba <CrashReportClass::printTo(Print&) const+0x59e>
							  return write((const uint8_t *)str, strlen(str)); }
60001d5e:	682b      	ldr	r3, [r5, #0]
60001d60:	2228      	movs	r2, #40	; 0x28
60001d62:	4931      	ldr	r1, [pc, #196]	; (60001e28 <CrashReportClass::printTo(Print&) const+0x70c>)
60001d64:	e7dc      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001d66:	682b      	ldr	r3, [r5, #0]
60001d68:	221e      	movs	r2, #30
60001d6a:	4930      	ldr	r1, [pc, #192]	; (60001e2c <CrashReportClass::printTo(Print&) const+0x710>)
60001d6c:	4628      	mov	r0, r5
60001d6e:	685b      	ldr	r3, [r3, #4]
60001d70:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d72:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001d76:	2300      	movs	r3, #0
60001d78:	2210      	movs	r2, #16
60001d7a:	4628      	mov	r0, r5
60001d7c:	f000 fcd4 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d80:	682b      	ldr	r3, [r5, #0]
60001d82:	223e      	movs	r2, #62	; 0x3e
60001d84:	492a      	ldr	r1, [pc, #168]	; (60001e30 <CrashReportClass::printTo(Print&) const+0x714>)
60001d86:	685b      	ldr	r3, [r3, #4]
60001d88:	4628      	mov	r0, r5
60001d8a:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d8c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001d90:	2300      	movs	r3, #0
60001d92:	2210      	movs	r2, #16
60001d94:	4628      	mov	r0, r5
60001d96:	f000 fcc7 	bl	60002728 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d9a:	682b      	ldr	r3, [r5, #0]
60001d9c:	221d      	movs	r2, #29
60001d9e:	4925      	ldr	r1, [pc, #148]	; (60001e34 <CrashReportClass::printTo(Print&) const+0x718>)
60001da0:	685b      	ldr	r3, [r3, #4]
60001da2:	4628      	mov	r0, r5
60001da4:	4798      	blx	r3
60001da6:	e7b4      	b.n	60001d12 <CrashReportClass::printTo(Print&) const+0x5f6>
60001da8:	682b      	ldr	r3, [r5, #0]
60001daa:	2229      	movs	r2, #41	; 0x29
60001dac:	4922      	ldr	r1, [pc, #136]	; (60001e38 <CrashReportClass::printTo(Print&) const+0x71c>)
60001dae:	e712      	b.n	60001bd6 <CrashReportClass::printTo(Print&) const+0x4ba>
60001db0:	682b      	ldr	r3, [r5, #0]
60001db2:	2244      	movs	r2, #68	; 0x44
60001db4:	4921      	ldr	r1, [pc, #132]	; (60001e3c <CrashReportClass::printTo(Print&) const+0x720>)
60001db6:	e778      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001db8:	682b      	ldr	r3, [r5, #0]
60001dba:	222c      	movs	r2, #44	; 0x2c
60001dbc:	4920      	ldr	r1, [pc, #128]	; (60001e40 <CrashReportClass::printTo(Print&) const+0x724>)
60001dbe:	e774      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001dc0:	682b      	ldr	r3, [r5, #0]
60001dc2:	2221      	movs	r2, #33	; 0x21
60001dc4:	491f      	ldr	r1, [pc, #124]	; (60001e44 <CrashReportClass::printTo(Print&) const+0x728>)
60001dc6:	e706      	b.n	60001bd6 <CrashReportClass::printTo(Print&) const+0x4ba>
60001dc8:	682b      	ldr	r3, [r5, #0]
60001dca:	2232      	movs	r2, #50	; 0x32
60001dcc:	491e      	ldr	r1, [pc, #120]	; (60001e48 <CrashReportClass::printTo(Print&) const+0x72c>)
60001dce:	e7a7      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001dd0:	682b      	ldr	r3, [r5, #0]
60001dd2:	2233      	movs	r2, #51	; 0x33
60001dd4:	491d      	ldr	r1, [pc, #116]	; (60001e4c <CrashReportClass::printTo(Print&) const+0x730>)
60001dd6:	e768      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001dd8:	682b      	ldr	r3, [r5, #0]
60001dda:	223f      	movs	r2, #63	; 0x3f
60001ddc:	491c      	ldr	r1, [pc, #112]	; (60001e50 <CrashReportClass::printTo(Print&) const+0x734>)
60001dde:	e764      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001de0:	682b      	ldr	r3, [r5, #0]
60001de2:	2225      	movs	r2, #37	; 0x25
60001de4:	491b      	ldr	r1, [pc, #108]	; (60001e54 <CrashReportClass::printTo(Print&) const+0x738>)
60001de6:	e6f6      	b.n	60001bd6 <CrashReportClass::printTo(Print&) const+0x4ba>
60001de8:	682b      	ldr	r3, [r5, #0]
60001dea:	2228      	movs	r2, #40	; 0x28
60001dec:	491a      	ldr	r1, [pc, #104]	; (60001e58 <CrashReportClass::printTo(Print&) const+0x73c>)
60001dee:	e797      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001df0:	682b      	ldr	r3, [r5, #0]
60001df2:	2216      	movs	r2, #22
60001df4:	4919      	ldr	r1, [pc, #100]	; (60001e5c <CrashReportClass::printTo(Print&) const+0x740>)
60001df6:	e793      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001df8:	682b      	ldr	r3, [r5, #0]
60001dfa:	2241      	movs	r2, #65	; 0x41
60001dfc:	4918      	ldr	r1, [pc, #96]	; (60001e60 <CrashReportClass::printTo(Print&) const+0x744>)
60001dfe:	4628      	mov	r0, r5
60001e00:	685b      	ldr	r3, [r3, #4]
60001e02:	4798      	blx	r3
60001e04:	e785      	b.n	60001d12 <CrashReportClass::printTo(Print&) const+0x5f6>
60001e06:	bf00      	nop
60001e08:	20008294 	.word	0x20008294
60001e0c:	2000803c 	.word	0x2000803c
60001e10:	2000826c 	.word	0x2000826c
60001e14:	2027ff00 	.word	0x2027ff00
60001e18:	20007f54 	.word	0x20007f54
60001e1c:	20022640 	.word	0x20022640
60001e20:	200081a4 	.word	0x200081a4
60001e24:	20008180 	.word	0x20008180
60001e28:	200081fc 	.word	0x200081fc
60001e2c:	20007f78 	.word	0x20007f78
60001e30:	20007f98 	.word	0x20007f98
60001e34:	20007fd8 	.word	0x20007fd8
60001e38:	20007ed4 	.word	0x20007ed4
60001e3c:	20008090 	.word	0x20008090
60001e40:	20008060 	.word	0x20008060
60001e44:	20007eb0 	.word	0x20007eb0
60001e48:	200081c8 	.word	0x200081c8
60001e4c:	20008118 	.word	0x20008118
60001e50:	200080d8 	.word	0x200080d8
60001e54:	20007f00 	.word	0x20007f00
60001e58:	20008240 	.word	0x20008240
60001e5c:	20008228 	.word	0x20008228
60001e60:	20007ff8 	.word	0x20007ff8

60001e64 <CrashReportClass::clear()>:
	info->len = 0;
60001e64:	4a0f      	ldr	r2, [pc, #60]	; (60001ea4 <CrashReportClass::clear()+0x40>)
60001e66:	2300      	movs	r3, #0
	info->ipsr  = 0;
60001e68:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->hfsr  = 0;
60001e6c:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->bfar  = 0;
60001e70:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->xpsr  = 0;
60001e74:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001e78:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	asm("dsb");
60001e7c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
60001e80:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001e84:	4808      	ldr	r0, [pc, #32]	; (60001ea8 <CrashReportClass::clear()+0x44>)
60001e86:	4909      	ldr	r1, [pc, #36]	; (60001eac <CrashReportClass::clear()+0x48>)
60001e88:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
60001e8c:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
	asm("dsb");
60001e90:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001e94:	f3bf 8f6f 	isb	sy
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001e98:	4a05      	ldr	r2, [pc, #20]	; (60001eb0 <CrashReportClass::clear()+0x4c>)
60001e9a:	6891      	ldr	r1, [r2, #8]
60001e9c:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001e9e:	6313      	str	r3, [r2, #48]	; 0x30
}
60001ea0:	4770      	bx	lr
60001ea2:	bf00      	nop
60001ea4:	2027ff00 	.word	0x2027ff00
60001ea8:	2027ff80 	.word	0x2027ff80
60001eac:	2027ffa0 	.word	0x2027ffa0
60001eb0:	400f8000 	.word	0x400f8000

60001eb4 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001eb4:	4b12      	ldr	r3, [pc, #72]	; (60001f00 <CrashReportClass::operator bool()+0x4c>)
60001eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001eba:	2b0b      	cmp	r3, #11
60001ebc:	d11e      	bne.n	60001efc <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001ebe:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001ec2:	4810      	ldr	r0, [pc, #64]	; (60001f04 <CrashReportClass::operator bool()+0x50>)
{
60001ec4:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001ec6:	4d10      	ldr	r5, [pc, #64]	; (60001f08 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001ec8:	4c10      	ldr	r4, [pc, #64]	; (60001f0c <CrashReportClass::operator bool()+0x58>)
60001eca:	e001      	b.n	60001ed0 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001ecc:	686b      	ldr	r3, [r5, #4]
60001ece:	4675      	mov	r5, lr
60001ed0:	f105 0e04 	add.w	lr, r5, #4
60001ed4:	405a      	eors	r2, r3
60001ed6:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001ed8:	f002 0301 	and.w	r3, r2, #1
60001edc:	3901      	subs	r1, #1
60001ede:	fb00 f303 	mul.w	r3, r0, r3
60001ee2:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001ee6:	d1f7      	bne.n	60001ed8 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001ee8:	45a6      	cmp	lr, r4
60001eea:	d1ef      	bne.n	60001ecc <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001eec:	4b04      	ldr	r3, [pc, #16]	; (60001f00 <CrashReportClass::operator bool()+0x4c>)
60001eee:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001ef2:	1a80      	subs	r0, r0, r2
60001ef4:	fab0 f080 	clz	r0, r0
60001ef8:	0940      	lsrs	r0, r0, #5
}
60001efa:	bd30      	pop	{r4, r5, pc}
	return false;
60001efc:	2000      	movs	r0, #0
}
60001efe:	4770      	bx	lr
60001f00:	2027ff00 	.word	0x2027ff00
60001f04:	edb88320 	.word	0xedb88320
60001f08:	2027ff80 	.word	0x2027ff80
60001f0c:	2027ffa8 	.word	0x2027ffa8

60001f10 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001f10:	4770      	bx	lr
60001f12:	bf00      	nop

60001f14 <startup_default_middle_hook>:
60001f14:	4770      	bx	lr
60001f16:	bf00      	nop

60001f18 <startup_default_late_hook>:
60001f18:	4770      	bx	lr
60001f1a:	bf00      	nop

60001f1c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001f1c:	bf00      	nop
60001f1e:	4770      	bx	lr

60001f20 <configure_cache>:
{
60001f20:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001f22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001f26:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001f28:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001f2a:	482b      	ldr	r0, [pc, #172]	; (60001fd8 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001f2c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001f30:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001f34:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001f36:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001f3a:	4828      	ldr	r0, [pc, #160]	; (60001fdc <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001f3c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001f40:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001f42:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001f46:	4826      	ldr	r0, [pc, #152]	; (60001fe0 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001f48:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001f4c:	4a25      	ldr	r2, [pc, #148]	; (60001fe4 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001f4e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001f52:	4c25      	ldr	r4, [pc, #148]	; (60001fe8 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001f54:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001f58:	4824      	ldr	r0, [pc, #144]	; (60001fec <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001f5a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001f5e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001f62:	4c23      	ldr	r4, [pc, #140]	; (60001ff0 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001f64:	4823      	ldr	r0, [pc, #140]	; (60001ff4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001f66:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001f6a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001f6e:	4c22      	ldr	r4, [pc, #136]	; (60001ff8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001f70:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001f74:	4821      	ldr	r0, [pc, #132]	; (60001ffc <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001f76:	4a22      	ldr	r2, [pc, #136]	; (60002000 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001f78:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001f7c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001f80:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001f84:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001f88:	4c1e      	ldr	r4, [pc, #120]	; (60002004 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001f8a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001f8c:	481e      	ldr	r0, [pc, #120]	; (60002008 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001f8e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001f92:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001f96:	4a1d      	ldr	r2, [pc, #116]	; (6000200c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001f98:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001f9c:	4c1c      	ldr	r4, [pc, #112]	; (60002010 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001f9e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001fa2:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001fa4:	481b      	ldr	r0, [pc, #108]	; (60002014 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001fa6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001faa:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001fae:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001fb2:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001fb6:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001fba:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001fbe:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001fc2:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001fc6:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001fca:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001fce:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001fd2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001fd6:	4770      	bx	lr
60001fd8:	1000003f 	.word	0x1000003f
60001fdc:	03080025 	.word	0x03080025
60001fe0:	00100009 	.word	0x00100009
60001fe4:	20022640 	.word	0x20022640
60001fe8:	00200013 	.word	0x00200013
60001fec:	07020021 	.word	0x07020021
60001ff0:	20000014 	.word	0x20000014
60001ff4:	13080025 	.word	0x13080025
60001ff8:	10000009 	.word	0x10000009
60001ffc:	20200016 	.word	0x20200016
60002000:	130b0027 	.word	0x130b0027
60002004:	40000017 	.word	0x40000017
60002008:	60000018 	.word	0x60000018
6000200c:	070b002f 	.word	0x070b002f
60002010:	70000019 	.word	0x70000019
60002014:	130b002f 	.word	0x130b002f

60002018 <configure_external_ram>:
{
60002018:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000201a:	4bb8      	ldr	r3, [pc, #736]	; (600022fc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000201c:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000201e:	4eb8      	ldr	r6, [pc, #736]	; (60002300 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60002020:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60002022:	4fb8      	ldr	r7, [pc, #736]	; (60002304 <configure_external_ram+0x2ec>)
{
60002024:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002026:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000202a:	49b7      	ldr	r1, [pc, #732]	; (60002308 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000202c:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002030:	4db6      	ldr	r5, [pc, #728]	; (6000230c <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002032:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60002036:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000203a:	4cb5      	ldr	r4, [pc, #724]	; (60002310 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000203c:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002040:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002044:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002048:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000204c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002050:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60002054:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60002056:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60002058:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000205a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000205c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000205e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60002062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60002066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000206a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000206e:	4aa9      	ldr	r2, [pc, #676]	; (60002314 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60002070:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60002074:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60002078:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000207c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60002080:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002084:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60002086:	4ba4      	ldr	r3, [pc, #656]	; (60002318 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002088:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000208a:	48a4      	ldr	r0, [pc, #656]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000208c:	49a4      	ldr	r1, [pc, #656]	; (60002320 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000208e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002090:	4aa4      	ldr	r2, [pc, #656]	; (60002324 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002092:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60002094:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60002098:	f043 030c 	orr.w	r3, r3, #12
6000209c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600020a0:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600020a4:	6803      	ldr	r3, [r0, #0]
600020a6:	f043 0302 	orr.w	r3, r3, #2
600020aa:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600020ac:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600020ae:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600020b0:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600020b4:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020b6:	4b9c      	ldr	r3, [pc, #624]	; (60002328 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600020b8:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600020ba:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020bc:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600020be:	4c9b      	ldr	r4, [pc, #620]	; (6000232c <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020c0:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020c2:	4a9b      	ldr	r2, [pc, #620]	; (60002330 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600020c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020c8:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600020ca:	68c3      	ldr	r3, [r0, #12]
600020cc:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600020d0:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020d2:	6a03      	ldr	r3, [r0, #32]
600020d4:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600020d6:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020d8:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020da:	6a03      	ldr	r3, [r0, #32]
600020dc:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600020de:	4a95      	ldr	r2, [pc, #596]	; (60002334 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600020e0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600020e2:	4c95      	ldr	r4, [pc, #596]	; (60002338 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020e4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600020e6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600020e8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600020ea:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600020ec:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600020f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600020f4:	f043 0301 	orr.w	r3, r3, #1
600020f8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600020fc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002100:	498e      	ldr	r1, [pc, #568]	; (6000233c <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002102:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60002106:	f043 0301 	orr.w	r3, r3, #1
6000210a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000210e:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60002112:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60002114:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002116:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002118:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
6000211c:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000211e:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002120:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002122:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60002126:	6803      	ldr	r3, [r0, #0]
60002128:	f023 0302 	bic.w	r3, r3, #2
6000212c:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000212e:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002130:	4b83      	ldr	r3, [pc, #524]	; (60002340 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60002132:	4984      	ldr	r1, [pc, #528]	; (60002344 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002134:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60002136:	f843 2b04 	str.w	r2, [r3], #4
6000213a:	428b      	cmp	r3, r1
6000213c:	d1fb      	bne.n	60002136 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
6000213e:	4a77      	ldr	r2, [pc, #476]	; (6000231c <configure_external_ram+0x304>)
60002140:	6813      	ldr	r3, [r2, #0]
60002142:	f043 0301 	orr.w	r3, r3, #1
60002146:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60002148:	6813      	ldr	r3, [r2, #0]
6000214a:	f013 0301 	ands.w	r3, r3, #1
6000214e:	d1fb      	bne.n	60002148 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002150:	487a      	ldr	r0, [pc, #488]	; (6000233c <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002152:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002154:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002158:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000215a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000215e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002160:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002164:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60002168:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000216c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60002170:	4975      	ldr	r1, [pc, #468]	; (60002348 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002172:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60002176:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000217a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000217e:	4873      	ldr	r0, [pc, #460]	; (6000234c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60002180:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60002184:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60002188:	4c71      	ldr	r4, [pc, #452]	; (60002350 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000218a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000218e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60002192:	4970      	ldr	r1, [pc, #448]	; (60002354 <configure_external_ram+0x33c>)
60002194:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002198:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000219a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000219e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021a2:	485e      	ldr	r0, [pc, #376]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600021a4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021a8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021ac:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021b0:	6943      	ldr	r3, [r0, #20]
600021b2:	07da      	lsls	r2, r3, #31
600021b4:	d5fc      	bpl.n	600021b0 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021b6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021b8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021be:	4957      	ldr	r1, [pc, #348]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021c0:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600021c2:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021c6:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021ca:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ce:	694b      	ldr	r3, [r1, #20]
600021d0:	07db      	lsls	r3, r3, #31
600021d2:	d5fc      	bpl.n	600021ce <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021d4:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021d6:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021dc:	4a4f      	ldr	r2, [pc, #316]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021de:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600021e0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021e4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ec:	6953      	ldr	r3, [r2, #20]
600021ee:	07df      	lsls	r7, r3, #31
600021f0:	d5fc      	bpl.n	600021ec <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021f2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021f4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021f6:	4858      	ldr	r0, [pc, #352]	; (60002358 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021f8:	4948      	ldr	r1, [pc, #288]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021fa:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021fc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002200:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002204:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002208:	694b      	ldr	r3, [r1, #20]
6000220a:	07de      	lsls	r6, r3, #31
6000220c:	d5fc      	bpl.n	60002208 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
6000220e:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002212:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002216:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60002218:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000221a:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000221c:	4293      	cmp	r3, r2
6000221e:	d165      	bne.n	600022ec <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002220:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002222:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002226:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002228:	483c      	ldr	r0, [pc, #240]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000222a:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000222e:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002232:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002236:	6943      	ldr	r3, [r0, #20]
60002238:	07dd      	lsls	r5, r3, #31
6000223a:	d5fc      	bpl.n	60002236 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000223c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000223e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002242:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002244:	4a35      	ldr	r2, [pc, #212]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002246:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60002248:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000224c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002250:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002254:	6953      	ldr	r3, [r2, #20]
60002256:	07dc      	lsls	r4, r3, #31
60002258:	d5fc      	bpl.n	60002254 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000225a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000225c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002260:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002264:	492d      	ldr	r1, [pc, #180]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002266:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002268:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000226c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002270:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002274:	694b      	ldr	r3, [r1, #20]
60002276:	07d8      	lsls	r0, r3, #31
60002278:	d5fc      	bpl.n	60002274 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000227a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000227c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002280:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002284:	4a25      	ldr	r2, [pc, #148]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002286:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002288:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000228c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002290:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002294:	6953      	ldr	r3, [r2, #20]
60002296:	07d9      	lsls	r1, r3, #31
60002298:	d5fc      	bpl.n	60002294 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000229a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000229c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600022a0:	482d      	ldr	r0, [pc, #180]	; (60002358 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022a2:	491e      	ldr	r1, [pc, #120]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022a4:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600022a6:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600022aa:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022ae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022b2:	694b      	ldr	r3, [r1, #20]
600022b4:	07da      	lsls	r2, r3, #31
600022b6:	d5fc      	bpl.n	600022b2 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600022b8:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600022bc:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600022c0:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600022c2:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600022c4:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600022c6:	4293      	cmp	r3, r2
600022c8:	d050      	beq.n	6000236c <configure_external_ram+0x354>
600022ca:	2508      	movs	r5, #8
600022cc:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
600022d0:	4922      	ldr	r1, [pc, #136]	; (6000235c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600022d2:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
600022d4:	4b22      	ldr	r3, [pc, #136]	; (60002360 <configure_external_ram+0x348>)
			external_psram_size = 16;
600022d6:	4a23      	ldr	r2, [pc, #140]	; (60002364 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600022d8:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
600022da:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
600022dc:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600022de:	2301      	movs	r3, #1
600022e0:	4821      	ldr	r0, [pc, #132]	; (60002368 <configure_external_ram+0x350>)
600022e2:	4422      	add	r2, r4
600022e4:	f000 fa08 	bl	600026f8 <__sm_set_pool_veneer>
}
600022e8:	b003      	add	sp, #12
600022ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600022ec:	4b1e      	ldr	r3, [pc, #120]	; (60002368 <configure_external_ram+0x350>)
600022ee:	2200      	movs	r2, #0
600022f0:	e9c3 2200 	strd	r2, r2, [r3]
600022f4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
600022f8:	b003      	add	sp, #12
600022fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
600022fc:	401f8000 	.word	0x401f8000
60002300:	0001b0f9 	.word	0x0001b0f9
60002304:	000110f9 	.word	0x000110f9
60002308:	401f8400 	.word	0x401f8400
6000230c:	000170f9 	.word	0x000170f9
60002310:	400fc000 	.word	0x400fc000
60002314:	1ffffcff 	.word	0x1ffffcff
60002318:	a0000300 	.word	0xa0000300
6000231c:	402a4000 	.word	0x402a4000
60002320:	402a8000 	.word	0x402a8000
60002324:	ffff0012 	.word	0xffff0012
60002328:	00f737ff 	.word	0x00f737ff
6000232c:	80000040 	.word	0x80000040
60002330:	7cf0ff00 	.word	0x7cf0ff00
60002334:	830f00ff 	.word	0x830f00ff
60002338:	00020063 	.word	0x00020063
6000233c:	5af05af0 	.word	0x5af05af0
60002340:	402a4200 	.word	0x402a4200
60002344:	402a4300 	.word	0x402a4300
60002348:	3018049f 	.word	0x3018049f
6000234c:	0a1806eb 	.word	0x0a1806eb
60002350:	0a180638 	.word	0x0a180638
60002354:	26013206 	.word	0x26013206
60002358:	00030004 	.word	0x00030004
6000235c:	70000000 	.word	0x70000000
60002360:	70000000 	.word	0x70000000
60002364:	20022601 	.word	0x20022601
60002368:	200216e8 	.word	0x200216e8
	FLEXSPI2_IPCR0 = addr;
6000236c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002370:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002374:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002376:	4808      	ldr	r0, [pc, #32]	; (60002398 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60002378:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000237c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002380:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002384:	6943      	ldr	r3, [r0, #20]
60002386:	07db      	lsls	r3, r3, #31
60002388:	d5fc      	bpl.n	60002384 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000238a:	2301      	movs	r3, #1
6000238c:	2510      	movs	r5, #16
6000238e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60002392:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60002394:	e79c      	b.n	600022d0 <configure_external_ram+0x2b8>
60002396:	bf00      	nop
60002398:	402a4000 	.word	0x402a4000

6000239c <usb_pll_start>:
{
6000239c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000239e:	4a15      	ldr	r2, [pc, #84]	; (600023f4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600023a0:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600023a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600023a6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600023aa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600023ae:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600023b2:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600023b6:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600023b8:	f013 0f02 	tst.w	r3, #2
600023bc:	d10e      	bne.n	600023dc <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600023be:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600023c2:	d00f      	beq.n	600023e4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600023c4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600023c8:	d00e      	beq.n	600023e8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600023ca:	2b00      	cmp	r3, #0
600023cc:	daf3      	bge.n	600023b6 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600023ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600023d2:	d10b      	bne.n	600023ec <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600023d4:	065b      	lsls	r3, r3, #25
600023d6:	d50b      	bpl.n	600023f0 <usb_pll_start+0x54>
}
600023d8:	bcf0      	pop	{r4, r5, r6, r7}
600023da:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600023dc:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600023de:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600023e0:	6190      	str	r0, [r2, #24]
			continue;
600023e2:	e7e8      	b.n	600023b6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600023e4:	6155      	str	r5, [r2, #20]
			continue;
600023e6:	e7e6      	b.n	600023b6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600023e8:	6156      	str	r6, [r2, #20]
			continue;
600023ea:	e7e4      	b.n	600023b6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600023ec:	6191      	str	r1, [r2, #24]
			continue;
600023ee:	e7e2      	b.n	600023b6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600023f0:	6157      	str	r7, [r2, #20]
			continue;
600023f2:	e7e0      	b.n	600023b6 <usb_pll_start+0x1a>
600023f4:	400d8000 	.word	0x400d8000

600023f8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600023f8:	4a3f      	ldr	r2, [pc, #252]	; (600024f8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600023fa:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600023fc:	493f      	ldr	r1, [pc, #252]	; (600024fc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023fe:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002402:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002406:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000240a:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60002500 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000240e:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002412:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60002504 <tempmon_init+0x10c>
{
60002416:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002418:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000241c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002420:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002424:	4d38      	ldr	r5, [pc, #224]	; (60002508 <tempmon_init+0x110>)
60002426:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002428:	4c38      	ldr	r4, [pc, #224]	; (6000250c <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000242a:	4839      	ldr	r0, [pc, #228]	; (60002510 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000242c:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000242e:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002432:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002434:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000243c:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002440:	ee07 1a10 	vmov	s14, r1
60002444:	4b33      	ldr	r3, [pc, #204]	; (60002514 <tempmon_init+0x11c>)
60002446:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000244a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000244c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002450:	4931      	ldr	r1, [pc, #196]	; (60002518 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002452:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002456:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000245a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000245e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002462:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002466:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000246a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000246e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002472:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002476:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000247a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000247e:	4827      	ldr	r0, [pc, #156]	; (6000251c <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002480:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002484:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002488:	ee75 5a87 	vadd.f32	s11, s11, s14
6000248c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002490:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002494:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002498:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000249c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600024a0:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600024a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600024a8:	ee16 3a10 	vmov	r3, s12
600024ac:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600024b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600024b4:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600024b8:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600024ba:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600024be:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600024c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
600024c6:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600024ca:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600024cc:	4914      	ldr	r1, [pc, #80]	; (60002520 <tempmon_init+0x128>)
600024ce:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600024d2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600024d6:	f043 0302 	orr.w	r3, r3, #2
600024da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600024de:	4b11      	ldr	r3, [pc, #68]	; (60002524 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600024e0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600024e4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600024e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600024ec:	2201      	movs	r2, #1
}
600024ee:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600024f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600024f4:	4770      	bx	lr
600024f6:	bf00      	nop
600024f8:	400d8100 	.word	0x400d8100
600024fc:	401f4400 	.word	0x401f4400
60002500:	42aa0000 	.word	0x42aa0000
60002504:	42b40000 	.word	0x42b40000
60002508:	20022084 	.word	0x20022084
6000250c:	20022080 	.word	0x20022080
60002510:	20022088 	.word	0x20022088
60002514:	2002208c 	.word	0x2002208c
60002518:	0fff0000 	.word	0x0fff0000
6000251c:	e000e400 	.word	0xe000e400
60002520:	20009000 	.word	0x20009000
60002524:	00008a79 	.word	0x00008a79

60002528 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002528:	4b31      	ldr	r3, [pc, #196]	; (600025f0 <usb_init+0xc8>)
6000252a:	f640 7261 	movw	r2, #3937	; 0xf61
{
6000252e:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002530:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60002534:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60002538:	f000 f8da 	bl	600026f0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000253c:	4a2d      	ldr	r2, [pc, #180]	; (600025f4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
6000253e:	492e      	ldr	r1, [pc, #184]	; (600025f8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002540:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002544:	482d      	ldr	r0, [pc, #180]	; (600025fc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002546:	f043 0303 	orr.w	r3, r3, #3
6000254a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000254e:	4b2c      	ldr	r3, [pc, #176]	; (60002600 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002550:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002554:	6802      	ldr	r2, [r0, #0]
60002556:	421a      	tst	r2, r3
60002558:	d103      	bne.n	60002562 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000255a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
6000255e:	079a      	lsls	r2, r3, #30
60002560:	d01b      	beq.n	6000259a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60002562:	4a25      	ldr	r2, [pc, #148]	; (600025f8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60002564:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60002568:	4b24      	ldr	r3, [pc, #144]	; (600025fc <usb_init+0xd4>)
6000256a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000256c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60002570:	f043 0302 	orr.w	r3, r3, #2
60002574:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60002578:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
6000257c:	079b      	lsls	r3, r3, #30
6000257e:	d4fb      	bmi.n	60002578 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002580:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60002584:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002588:	4b1c      	ldr	r3, [pc, #112]	; (600025fc <usb_init+0xd4>)
6000258a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000258e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60002592:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002594:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60002596:	f000 f89f 	bl	600026d8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000259a:	4a18      	ldr	r2, [pc, #96]	; (600025fc <usb_init+0xd4>)
6000259c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600025a0:	4c15      	ldr	r4, [pc, #84]	; (600025f8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600025a2:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600025a4:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600025a6:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600025a8:	4b16      	ldr	r3, [pc, #88]	; (60002604 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600025aa:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600025ac:	f44f 7260 	mov.w	r2, #896	; 0x380
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600025b0:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600025b4:	4618      	mov	r0, r3
600025b6:	f000 f8af 	bl	60002718 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600025ba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600025be:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600025c0:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600025c4:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600025c8:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600025ca:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600025ce:	641a      	str	r2, [r3, #64]	; 0x40
600025d0:	4b0d      	ldr	r3, [pc, #52]	; (60002608 <usb_init+0xe0>)
600025d2:	4a0e      	ldr	r2, [pc, #56]	; (6000260c <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600025d4:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600025d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600025dc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600025e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600025e4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600025e6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600025ea:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600025ee:	bd10      	pop	{r4, pc}
600025f0:	400d8000 	.word	0x400d8000
600025f4:	400fc000 	.word	0x400fc000
600025f8:	402e0000 	.word	0x402e0000
600025fc:	400d9000 	.word	0x400d9000
60002600:	001e1c00 	.word	0x001e1c00
60002604:	20000000 	.word	0x20000000
60002608:	20009000 	.word	0x20009000
6000260c:	00008d29 	.word	0x00008d29

60002610 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60002610:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60002612:	4b0e      	ldr	r3, [pc, #56]	; (6000264c <_reboot_Teensyduino_+0x3c>)
60002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60002616:	079b      	lsls	r3, r3, #30
60002618:	d400      	bmi.n	6000261c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000261a:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000261c:	b672      	cpsid	i
		USB1_USBCMD = 0;
6000261e:	4b0c      	ldr	r3, [pc, #48]	; (60002650 <_reboot_Teensyduino_+0x40>)
60002620:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60002622:	4a0c      	ldr	r2, [pc, #48]	; (60002654 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60002624:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002628:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000262c:	490a      	ldr	r1, [pc, #40]	; (60002658 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000262e:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002632:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002634:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60002636:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000263a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
6000263e:	4807      	ldr	r0, [pc, #28]	; (6000265c <_reboot_Teensyduino_+0x4c>)
60002640:	4a07      	ldr	r2, [pc, #28]	; (60002660 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002642:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60002644:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002646:	689b      	ldr	r3, [r3, #8]
60002648:	4798      	blx	r3
	}
	__builtin_unreachable();
6000264a:	bf00      	nop
6000264c:	401f4400 	.word	0x401f4400
60002650:	402e0000 	.word	0x402e0000
60002654:	400ac000 	.word	0x400ac000
60002658:	00200003 	.word	0x00200003
6000265c:	20208000 	.word	0x20208000
60002660:	eb120000 	.word	0xeb120000

60002664 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002664:	4b10      	ldr	r3, [pc, #64]	; (600026a8 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002666:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002668:	4a10      	ldr	r2, [pc, #64]	; (600026ac <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000266a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000266c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60002670:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002672:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002674:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60002678:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000267a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000267e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002680:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002682:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002684:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002686:	061b      	lsls	r3, r3, #24
60002688:	d4fc      	bmi.n	60002684 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000268a:	4a09      	ldr	r2, [pc, #36]	; (600026b0 <analog_init+0x4c>)
6000268c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002690:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002692:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002694:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002696:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002698:	f013 0380 	ands.w	r3, r3, #128	; 0x80
6000269c:	d1fb      	bne.n	60002696 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000269e:	4a05      	ldr	r2, [pc, #20]	; (600026b4 <analog_init+0x50>)
600026a0:	7013      	strb	r3, [r2, #0]
}
600026a2:	f85d 4b04 	ldr.w	r4, [sp], #4
600026a6:	4770      	bx	lr
600026a8:	400fc000 	.word	0x400fc000
600026ac:	400c4000 	.word	0x400c4000
600026b0:	400c8000 	.word	0x400c8000
600026b4:	20022600 	.word	0x20022600

600026b8 <_init>:
600026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600026ba:	bf00      	nop
600026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
600026be:	bc08      	pop	{r3}
600026c0:	469e      	mov	lr, r3
600026c2:	4770      	bx	lr
600026c4:	0000      	movs	r0, r0
	...

600026c8 <__main_veneer>:
600026c8:	f85f f000 	ldr.w	pc, [pc]	; 600026cc <__main_veneer+0x4>
600026cc:	000086c5 	.word	0x000086c5

600026d0 <___ZN5Print5printEl_veneer>:
600026d0:	f85f f000 	ldr.w	pc, [pc]	; 600026d4 <___ZN5Print5printEl_veneer+0x4>
600026d4:	00007f8d 	.word	0x00007f8d

600026d8 <__delay_veneer>:
600026d8:	f85f f000 	ldr.w	pc, [pc]	; 600026dc <__delay_veneer+0x4>
600026dc:	00008505 	.word	0x00008505

600026e0 <____libc_init_array_veneer>:
600026e0:	f85f f000 	ldr.w	pc, [pc]	; 600026e4 <____libc_init_array_veneer+0x4>
600026e4:	0000ce35 	.word	0x0000ce35

600026e8 <___ZN5Print10printFloatEdh_veneer>:
600026e8:	f85f f000 	ldr.w	pc, [pc]	; 600026ec <___ZN5Print10printFloatEdh_veneer+0x4>
600026ec:	00008021 	.word	0x00008021

600026f0 <__usb_init_serialnumber_veneer>:
600026f0:	f85f f000 	ldr.w	pc, [pc]	; 600026f4 <__usb_init_serialnumber_veneer+0x4>
600026f4:	00009d35 	.word	0x00009d35

600026f8 <__sm_set_pool_veneer>:
600026f8:	f85f f000 	ldr.w	pc, [pc]	; 600026fc <__sm_set_pool_veneer+0x4>
600026fc:	0000a9c1 	.word	0x0000a9c1

60002700 <__pwm_init_veneer>:
60002700:	f85f f000 	ldr.w	pc, [pc]	; 60002704 <__pwm_init_veneer+0x4>
60002704:	0000a87d 	.word	0x0000a87d

60002708 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>:
60002708:	f85f f000 	ldr.w	pc, [pc]	; 6000270c <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer+0x4>
6000270c:	00007ddd 	.word	0x00007ddd

60002710 <___ZN5Print7printlnEv_veneer>:
60002710:	f85f f000 	ldr.w	pc, [pc]	; 60002714 <___ZN5Print7printlnEv_veneer+0x4>
60002714:	00007fa5 	.word	0x00007fa5

60002718 <__memset_veneer>:
60002718:	f85f f000 	ldr.w	pc, [pc]	; 6000271c <__memset_veneer+0x4>
6000271c:	0000cbbd 	.word	0x0000cbbd

60002720 <__set_arm_clock_veneer>:
60002720:	f85f f000 	ldr.w	pc, [pc]	; 60002724 <__set_arm_clock_veneer+0x4>
60002724:	00008215 	.word	0x00008215

60002728 <___ZN5Print11printNumberEmhh_veneer>:
60002728:	f85f f000 	ldr.w	pc, [pc]	; 6000272c <___ZN5Print11printNumberEmhh_veneer+0x4>
6000272c:	00007ff9 	.word	0x00007ff9

60002730 <___Znwj_veneer>:
60002730:	f85f f000 	ldr.w	pc, [pc]	; 60002734 <___Znwj_veneer+0x4>
60002734:	00008809 	.word	0x00008809

60002738 <__frame_dummy_init_array_entry>:
60002738:	00000045 0000027d 000008a5 00000a75     E...}.......u...
60002748:	00001405 000071a5 0000775d              .....q..]w..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
    t->year=rtcBuffer[6]+2000;
    t->month=rtcBuffer[5]&0x7f;
    t->day=rtcBuffer[4];

    t->hour=rtcBuffer[2];
    t->min=rtcBuffer[1];
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
    t->sec=rtcBuffer[0] &0xff;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>

    rtc_set_datetime(t);
}
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
    rtc_set_datetime(t);
      34:	4718      	bx	r3
      36:	4770      	bx	lr
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
      38:	200092c0 	.word	0x200092c0
      3c:	200092c0 	.word	0x200092c0
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
    {
      if ( head==tail ) return 0;
      for(int ii=0;ii<NBUF_I2S;ii++) data[ii]=audio_buffer[head][ii];
      head = (head+1)%MAUDIO;
      return 1;
    }
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
    // read error
    return -1;
  }
  str[n] = '\0';
  return n;
}
      60:	20021f78 	.word	0x20021f78
      64:	60022400 	.word	0x60022400

00000068 <AudioTrigger::update()>:
      class AudioTrigger : public AudioStream
      {
      public:
          AudioTrigger() : AudioStream(0, NULL) {init(); prio = 8;}
          void init(void);
          virtual void update(void) {;}
      68:	4770      	bx	lr
    return -1;
      6a:	bf00      	nop

0000006c <loop>:
      6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
      70:	4c60      	ldr	r4, [pc, #384]	; (1f4 <loop+0x188>)
    *--str = 'T';
      72:	b088      	sub	sp, #32
    *--str = 'U';
      74:	4d60      	ldr	r5, [pc, #384]	; (1f8 <loop+0x18c>)
    *--str = 'C';
      76:	6823      	ldr	r3, [r4, #0]
    *--str = 'T';
      78:	3301      	adds	r3, #1
    *--str = 'U';
      7a:	6023      	str	r3, [r4, #0]
  }
  return str;
}
      7c:	f001 fa08 	bl	1490 <getDataCount()>
    *--str = '0';
      80:	882b      	ldrh	r3, [r5, #0]
      82:	4283      	cmp	r3, r0
      84:	bf38      	it	cc
      sign = '+';
      86:	8028      	strhcc	r0, [r5, #0]
      88:	f00a fa5a 	bl	a540 <usb_serial_available>
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
      8c:	b980      	cbnz	r0, b0 <loop+0x44>
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8e:	4f5b      	ldr	r7, [pc, #364]	; (1fc <loop+0x190>)
      90:	8838      	ldrh	r0, [r7, #0]
      92:	4e5b      	ldr	r6, [pc, #364]	; (200 <loop+0x194>)
    } else {
       if (n < 4) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
      94:	b200      	sxth	r0, r0
      96:	f001 f95d 	bl	1354 <saveData(short)>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
      9a:	4b5a      	ldr	r3, [pc, #360]	; (204 <loop+0x198>)
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      9c:	8038      	strh	r0, [r7, #0]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
      9e:	681f      	ldr	r7, [r3, #0]
    }
    return str;

   fail:
    return nullptr;
      a0:	6833      	ldr	r3, [r6, #0]
      a2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
      a6:	42bb      	cmp	r3, r7
	NVIC_ENABLE_IRQ(hardware.irq_number);
	port->SIER = LPI2C_SIER_TDIE |  LPI2C_SIER_RDIE | LPI2C_SIER_SDIE;
	transmitting = 0;
	slave_mode = 1;
	port->SCR = LPI2C_SCR_SEN;
}
      a8:	d30f      	bcc.n	ca <loop+0x5e>
      aa:	b008      	add	sp, #32
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          goto done;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
      ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 done:
  *str = '\0';
  return str - name;

 fail:
  *name = 0;
      b0:	f00a fa8a 	bl	a5c8 <usb_serial_getchar>
      b4:	b2c0      	uxtb	r0, r0
      b6:	2873      	cmp	r0, #115	; 0x73
  return 0;
}
      b8:	f000 808b 	beq.w	1d2 <loop+0x166>
      bc:	2865      	cmp	r0, #101	; 0x65
      be:	f040 8082 	bne.w	1c6 <loop+0x15a>
  for (uint8_t is = 2; is <= m_setCount; is++) {
      c2:	4f4e      	ldr	r7, [pc, #312]	; (1fc <loop+0x190>)
      c4:	2304      	movs	r3, #4
      c6:	803b      	strh	r3, [r7, #0]
      c8:	e7e2      	b.n	90 <loop+0x24>
      ca:	a806      	add	r0, sp, #24
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      cc:	f8df a15c 	ldr.w	sl, [pc, #348]	; 22c <loop+0x1c0>
}
      d0:	f001 fb18 	bl	1704 <rtc_get_datetime(datetime_t*)>
	while (newdiv > 65535 && prescale < 7) {
      d4:	f99d 301c 	ldrsb.w	r3, [sp, #28]
      d8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    else if (c == '.')
      isFraction = true;
      dc:	9304      	str	r3, [sp, #16]
      de:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    return 0; // zero returned if timeout
      e2:	4949      	ldr	r1, [pc, #292]	; (208 <loop+0x19c>)
      e4:	9303      	str	r3, [sp, #12]
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      e6:	f99d 301e 	ldrsb.w	r3, [sp, #30]
      ea:	4848      	ldr	r0, [pc, #288]	; (20c <loop+0x1a0>)
      ec:	9302      	str	r3, [sp, #8]
      ee:	f99d 301d 	ldrsb.w	r3, [sp, #29]
      f2:	f8df 913c 	ldr.w	r9, [pc, #316]	; 230 <loop+0x1c4>
      f6:	9301      	str	r3, [sp, #4]
      f8:	f99d 301b 	ldrsb.w	r3, [sp, #27]
      fc:	f8df 8134 	ldr.w	r8, [pc, #308]	; 234 <loop+0x1c8>
     100:	9300      	str	r3, [sp, #0]
     102:	f99d 301a 	ldrsb.w	r3, [sp, #26]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     106:	f007 ff69 	bl	7fdc <Print::printf(char const*, ...)>
    return m_blockDev->syncDevice();
     10a:	2103      	movs	r1, #3
     10c:	4840      	ldr	r0, [pc, #256]	; (210 <loop+0x1a4>)
     10e:	f00a fa81 	bl	a614 <usb_serial_write>
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          break;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
     112:	2300      	movs	r3, #0
     114:	220a      	movs	r2, #10
     116:	6821      	ldr	r1, [r4, #0]
     118:	483c      	ldr	r0, [pc, #240]	; (20c <loop+0x1a0>)
     11a:	f007 ff6d 	bl	7ff8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11e:	2101      	movs	r1, #1
     120:	483c      	ldr	r0, [pc, #240]	; (214 <loop+0x1a8>)
     122:	f00a fa77 	bl	a614 <usb_serial_write>
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
     126:	2300      	movs	r3, #0
	pinmode = *(p->reg + 1);
     128:	220a      	movs	r2, #10
	if (pinmode & mask) {
     12a:	f8da 1000 	ldr.w	r1, [sl]
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	4837      	ldr	r0, [pc, #220]	; (20c <loop+0x1a0>)
     130:	f007 ff62 	bl	7ff8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	mask = p->mask;
     134:	2101      	movs	r1, #1
	if (pinmode & mask) {
     136:	4837      	ldr	r0, [pc, #220]	; (214 <loop+0x1a8>)
     138:	f00a fa6c 	bl	a614 <usb_serial_write>
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13c:	2300      	movs	r3, #0
     13e:	220a      	movs	r2, #10
     140:	f8d9 1000 	ldr.w	r1, [r9]
     144:	4831      	ldr	r0, [pc, #196]	; (20c <loop+0x1a0>)
     146:	f007 ff57 	bl	7ff8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     14a:	2101      	movs	r1, #1
     14c:	4831      	ldr	r0, [pc, #196]	; (214 <loop+0x1a8>)
     14e:	f00a fa61 	bl	a614 <usb_serial_write>
     152:	882a      	ldrh	r2, [r5, #0]
     154:	4930      	ldr	r1, [pc, #192]	; (218 <loop+0x1ac>)
     156:	482d      	ldr	r0, [pc, #180]	; (20c <loop+0x1a0>)
     158:	f007 ff40 	bl	7fdc <Print::printf(char const*, ...)>
        if (flags & T_ACCESS) {
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        if (flags & T_CREATE) {
          df->createTimeMs = ms10;
     15c:	2102      	movs	r1, #2
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     15e:	482f      	ldr	r0, [pc, #188]	; (21c <loop+0x1b0>)
     160:	f00a fa58 	bl	a614 <usb_serial_write>
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
     164:	4b2e      	ldr	r3, [pc, #184]	; (220 <loop+0x1b4>)
     166:	492f      	ldr	r1, [pc, #188]	; (224 <loop+0x1b8>)
          df->modifyTimeMs = ms10;
     168:	681a      	ldr	r2, [r3, #0]
     16a:	4828      	ldr	r0, [pc, #160]	; (20c <loop+0x1a0>)
     16c:	f007 ff36 	bl	7fdc <Print::printf(char const*, ...)>
  bool skip = data[0] == EXFAT_TYPE_FILE;
     170:	2101      	movs	r1, #1
     172:	4828      	ldr	r0, [pc, #160]	; (214 <loop+0x1a8>)
}
     174:	f00a fa4e 	bl	a614 <usb_serial_write>
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
     178:	2300      	movs	r3, #0
     17a:	f8d8 1000 	ldr.w	r1, [r8]
     17e:	220a      	movs	r2, #10
     180:	4822      	ldr	r0, [pc, #136]	; (20c <loop+0x1a0>)
     182:	f007 ff39 	bl	7ff8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
}
     186:	2104      	movs	r1, #4
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
     188:	4827      	ldr	r0, [pc, #156]	; (228 <loop+0x1bc>)
     18a:	f00a fa43 	bl	a614 <usb_serial_write>
    writeMsg("Bad cluster count\r\n");
     18e:	2300      	movs	r3, #0
     190:	6023      	str	r3, [r4, #0]
     192:	461c      	mov	r4, r3
     194:	f8c9 3000 	str.w	r3, [r9]
     198:	802b      	strh	r3, [r5, #0]
     19a:	f8c8 3000 	str.w	r3, [r8]
}
     19e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 238 <loop+0x1cc>
     1a2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 23c <loop+0x1d0>
     1a6:	4d19      	ldr	r5, [pc, #100]	; (20c <loop+0x1a0>)
     1a8:	f8ca 3000 	str.w	r3, [sl]
     1ac:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
     1b0:	3401      	adds	r4, #1
     1b2:	4641      	mov	r1, r8
     1b4:	4628      	mov	r0, r5
     1b6:	f007 ff11 	bl	7fdc <Print::printf(char const*, ...)>
     1ba:	2c08      	cmp	r4, #8
     1bc:	d1f6      	bne.n	1ac <loop+0x140>
     1be:	6037      	str	r7, [r6, #0]
     1c0:	b008      	add	sp, #32
     1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    for (unsigned i = 2; i < todo; i++) {
     1c6:	283a      	cmp	r0, #58	; 0x3a
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
}
     1c8:	d107      	bne.n	1da <loop+0x16e>
     1ca:	4f0c      	ldr	r7, [pc, #48]	; (1fc <loop+0x190>)
  if(Serial.available())
  {
    char ch=Serial.read();
    if(ch=='s') status=CLOSED;
    if(ch=='e') status=MUSTSTOP;
    if(ch==':') menu1(); // returns only when menu1 gets not handled character
     1cc:	f001 fbb6 	bl	193c <menu1()>
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
     1d0:	e75e      	b.n	90 <loop+0x24>
    if(ch=='s') status=CLOSED;
     1d2:	4f0a      	ldr	r7, [pc, #40]	; (1fc <loop+0x190>)
     1d4:	2300      	movs	r3, #0
     1d6:	803b      	strh	r3, [r7, #0]
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
     1d8:	e75a      	b.n	90 <loop+0x24>
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
     1da:	283f      	cmp	r0, #63	; 0x3f
     1dc:	d103      	bne.n	1e6 <loop+0x17a>
     1de:	4f07      	ldr	r7, [pc, #28]	; (1fc <loop+0x190>)
     1e0:	f001 fbb6 	bl	1950 <menu2()>
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
     1e4:	e754      	b.n	90 <loop+0x24>
     1e6:	2821      	cmp	r0, #33	; 0x21
     1e8:	4f04      	ldr	r7, [pc, #16]	; (1fc <loop+0x190>)
     1ea:	f47f af51 	bne.w	90 <loop+0x24>
     1ee:	f001 fc59 	bl	1aa4 <menu3()>
     1f2:	e74d      	b.n	90 <loop+0x24>
     1f4:	20020188 	.word	0x20020188
     1f8:	200225e2 	.word	0x200225e2
     1fc:	20008eba 	.word	0x20008eba
     200:	20020184 	.word	0x20020184
     204:	20022564 	.word	0x20022564
     208:	20007cfc 	.word	0x20007cfc
     20c:	200088bc 	.word	0x200088bc
     210:	20007d20 	.word	0x20007d20
     214:	200086b4 	.word	0x200086b4
     218:	20007d24 	.word	0x20007d24
     21c:	20007d28 	.word	0x20007d28
     220:	200206c8 	.word	0x200206c8
     224:	20007d2c 	.word	0x20007d2c
     228:	20007d30 	.word	0x20007d30
     22c:	20021fb8 	.word	0x20021fb8
     230:	20021fbc 	.word	0x20021fbc
     234:	200216d0 	.word	0x200216d0
     238:	20021f54 	.word	0x20021f54
     23c:	20007d38 	.word	0x20007d38

00000240 <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(1);} // wait for setup() to finish
     240:	b510      	push	{r4, lr}
     242:	4c0b      	ldr	r4, [pc, #44]	; (270 <setup1()+0x30>)
     244:	6823      	ldr	r3, [r4, #0]
     246:	b92b      	cbnz	r3, 254 <setup1()+0x14>
     248:	2001      	movs	r0, #1
     24a:	f008 f95b 	bl	8504 <delay>
     24e:	6823      	ldr	r3, [r4, #0]
     250:	2b00      	cmp	r3, #0
     252:	d0f9      	beq.n	248 <setup1()+0x8>
  i2s_setup();
     254:	f000 fa8e 	bl	774 <i2s_setup()>
  dma_setup();
     258:	f000 fad2 	bl	800 <dma_setup()>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     25c:	210b      	movs	r1, #11
     25e:	4805      	ldr	r0, [pc, #20]	; (274 <setup1()+0x34>)
     260:	f00a f9d8 	bl	a614 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     264:	4804      	ldr	r0, [pc, #16]	; (278 <setup1()+0x38>)

  Serial.println("Setup1 done");
}
     266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     26a:	f007 be9b 	b.w	7fa4 <Print::println()>
     26e:	bf00      	nop
     270:	20022020 	.word	0x20022020
     274:	200005c4 	.word	0x200005c4
     278:	200088bc 	.word	0x200088bc

0000027c <_GLOBAL__sub_I_trigger>:

void loop1(){}  // nothing to be done here
     27c:	b5f0      	push	{r4, r5, r6, r7, lr}
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     27e:	4e38      	ldr	r6, [pc, #224]	; (360 <_GLOBAL__sub_I_trigger+0xe4>)
		num_inputs(ninput), inputQueue(iqueue) {
     280:	2200      	movs	r2, #0
     282:	4c38      	ldr	r4, [pc, #224]	; (364 <_GLOBAL__sub_I_trigger+0xe8>)
     284:	b083      	sub	sp, #12
     286:	4f38      	ldr	r7, [pc, #224]	; (368 <_GLOBAL__sub_I_trigger+0xec>)
			if (first_update == NULL) {
     288:	6833      	ldr	r3, [r6, #0]
		num_inputs(ninput), inputQueue(iqueue) {
     28a:	6027      	str	r7, [r4, #0]
     28c:	6122      	str	r2, [r4, #16]
			active = false;
     28e:	8122      	strh	r2, [r4, #8]
			destination_list = NULL;
     290:	60e2      	str	r2, [r4, #12]
			if (first_update == NULL) {
     292:	2b00      	cmp	r3, #0
     294:	d05e      	beq.n	354 <_GLOBAL__sub_I_trigger+0xd8>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     296:	461a      	mov	r2, r3
     298:	695b      	ldr	r3, [r3, #20]
     29a:	2b00      	cmp	r3, #0
     29c:	d1fb      	bne.n	296 <_GLOBAL__sub_I_trigger+0x1a>
				p->next_update = this;
     29e:	6154      	str	r4, [r2, #20]
			}
			next_update = NULL;
     2a0:	2500      	movs	r5, #0
          AudioTrigger() : AudioStream(0, NULL) {init(); prio = 8;}
     2a2:	4b32      	ldr	r3, [pc, #200]	; (36c <_GLOBAL__sub_I_trigger+0xf0>)
     2a4:	482f      	ldr	r0, [pc, #188]	; (364 <_GLOBAL__sub_I_trigger+0xe8>)
     2a6:	6023      	str	r3, [r4, #0]
     2a8:	6165      	str	r5, [r4, #20]
			cpu_cycles = 0;
     2aa:	6065      	str	r5, [r4, #4]
			cpu_cycles_max = 0;
			numConnections = 0;
     2ac:	72a5      	strb	r5, [r4, #10]
     2ae:	f000 fbab 	bl	a08 <AudioTrigger::init()>
     2b2:	2308      	movs	r3, #8
		num_inputs(ninput), inputQueue(iqueue) {
     2b4:	4a2e      	ldr	r2, [pc, #184]	; (370 <_GLOBAL__sub_I_trigger+0xf4>)
     2b6:	61a3      	str	r3, [r4, #24]
			if (first_update == NULL) {
     2b8:	6834      	ldr	r4, [r6, #0]
		num_inputs(ninput), inputQueue(iqueue) {
     2ba:	6017      	str	r7, [r2, #0]
     2bc:	6115      	str	r5, [r2, #16]
			active = false;
     2be:	8115      	strh	r5, [r2, #8]
			destination_list = NULL;
     2c0:	60d5      	str	r5, [r2, #12]
			if (first_update == NULL) {
     2c2:	2c00      	cmp	r4, #0
     2c4:	d048      	beq.n	358 <_GLOBAL__sub_I_trigger+0xdc>
     2c6:	4623      	mov	r3, r4
				for (p=first_update; p->next_update; p = p->next_update) ;
     2c8:	4619      	mov	r1, r3
     2ca:	695b      	ldr	r3, [r3, #20]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d1fb      	bne.n	2c8 <_GLOBAL__sub_I_trigger+0x4c>
				p->next_update = this;
     2d0:	614a      	str	r2, [r1, #20]
      int16_t __not_in_flash_func(getAudio)(int32_t *data);

      class AudioIF : public AudioStream
      {
      public:
        AudioIF(int fsamp) : AudioStream(0, NULL) { this->fsamp=fsamp;}
     2d2:	4828      	ldr	r0, [pc, #160]	; (374 <_GLOBAL__sub_I_trigger+0xf8>)
			next_update = NULL;
     2d4:	2100      	movs	r1, #0
		num_inputs(ninput), inputQueue(iqueue) {
     2d6:	4b28      	ldr	r3, [pc, #160]	; (378 <_GLOBAL__sub_I_trigger+0xfc>)
     2d8:	6010      	str	r0, [r2, #0]
     2da:	f64a 4044 	movw	r0, #44100	; 0xac44
			next_update = NULL;
     2de:	6151      	str	r1, [r2, #20]
     2e0:	6190      	str	r0, [r2, #24]
		num_inputs(ninput), inputQueue(iqueue) {
     2e2:	2002      	movs	r0, #2
			cpu_cycles = 0;
     2e4:	6051      	str	r1, [r2, #4]
			numConnections = 0;
     2e6:	7291      	strb	r1, [r2, #10]
		num_inputs(ninput), inputQueue(iqueue) {
     2e8:	f103 0218 	add.w	r2, r3, #24
			active = false;
     2ec:	7219      	strb	r1, [r3, #8]
			destination_list = NULL;
     2ee:	60d9      	str	r1, [r3, #12]
				inputQueue[i] = NULL;
     2f0:	6199      	str	r1, [r3, #24]
     2f2:	61d9      	str	r1, [r3, #28]
		num_inputs(ninput), inputQueue(iqueue) {
     2f4:	7258      	strb	r0, [r3, #9]
     2f6:	611a      	str	r2, [r3, #16]
				for (p=first_update; p->next_update; p = p->next_update) ;
     2f8:	4622      	mov	r2, r4
     2fa:	6964      	ldr	r4, [r4, #20]
     2fc:	2c00      	cmp	r4, #0
     2fe:	d1fb      	bne.n	2f8 <_GLOBAL__sub_I_trigger+0x7c>
};

class AudioOutputUSB : public AudioStream
{
public:
	AudioOutputUSB(void) : AudioStream(2, inputQueueArray) { begin(); }
     300:	491e      	ldr	r1, [pc, #120]	; (37c <_GLOBAL__sub_I_trigger+0x100>)
				p->next_update = this;
     302:	6153      	str	r3, [r2, #20]
			cpu_cycles = 0;
     304:	605c      	str	r4, [r3, #4]
			next_update = NULL;
     306:	615c      	str	r4, [r3, #20]
			numConnections = 0;
     308:	729c      	strb	r4, [r3, #10]
     30a:	6019      	str	r1, [r3, #0]
     30c:	481a      	ldr	r0, [pc, #104]	; (378 <_GLOBAL__sub_I_trigger+0xfc>)
     30e:	f009 fb8d 	bl	9a2c <AudioOutputUSB::begin()>
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
     312:	481b      	ldr	r0, [pc, #108]	; (380 <_GLOBAL__sub_I_trigger+0x104>)
     314:	f007 fb42 	bl	799c <AudioConnection::AudioConnection()>
     318:	4b17      	ldr	r3, [pc, #92]	; (378 <_GLOBAL__sub_I_trigger+0xfc>)
     31a:	4622      	mov	r2, r4
     31c:	4914      	ldr	r1, [pc, #80]	; (370 <_GLOBAL__sub_I_trigger+0xf4>)
     31e:	9400      	str	r4, [sp, #0]
     320:	4817      	ldr	r0, [pc, #92]	; (380 <_GLOBAL__sub_I_trigger+0x104>)
     322:	f007 fbaf 	bl	7a84 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
  AudioConnection patchCord1(acqIF, 0, usb, 0);
     326:	4a17      	ldr	r2, [pc, #92]	; (384 <_GLOBAL__sub_I_trigger+0x108>)
     328:	4917      	ldr	r1, [pc, #92]	; (388 <_GLOBAL__sub_I_trigger+0x10c>)
     32a:	4815      	ldr	r0, [pc, #84]	; (380 <_GLOBAL__sub_I_trigger+0x104>)
     32c:	f00a fb8a 	bl	aa44 <__aeabi_atexit>
     330:	4816      	ldr	r0, [pc, #88]	; (38c <_GLOBAL__sub_I_trigger+0x110>)
     332:	f007 fb33 	bl	799c <AudioConnection::AudioConnection()>
     336:	2201      	movs	r2, #1
     338:	490d      	ldr	r1, [pc, #52]	; (370 <_GLOBAL__sub_I_trigger+0xf4>)
     33a:	9200      	str	r2, [sp, #0]
     33c:	4b0e      	ldr	r3, [pc, #56]	; (378 <_GLOBAL__sub_I_trigger+0xfc>)
     33e:	4813      	ldr	r0, [pc, #76]	; (38c <_GLOBAL__sub_I_trigger+0x110>)
     340:	f007 fba0 	bl	7a84 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
  AudioConnection patchCord2(acqIF, 1, usb, 1);
     344:	4a0f      	ldr	r2, [pc, #60]	; (384 <_GLOBAL__sub_I_trigger+0x108>)
     346:	4910      	ldr	r1, [pc, #64]	; (388 <_GLOBAL__sub_I_trigger+0x10c>)
     348:	4810      	ldr	r0, [pc, #64]	; (38c <_GLOBAL__sub_I_trigger+0x110>)
void loop1(){}  // nothing to be done here
     34a:	b003      	add	sp, #12
     34c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  AudioConnection patchCord2(acqIF, 1, usb, 1);
     350:	f00a bb78 	b.w	aa44 <__aeabi_atexit>
				first_update = this;
     354:	6034      	str	r4, [r6, #0]
     356:	e7a3      	b.n	2a0 <_GLOBAL__sub_I_trigger+0x24>
     358:	4614      	mov	r4, r2
     35a:	6032      	str	r2, [r6, #0]
     35c:	e7b9      	b.n	2d2 <_GLOBAL__sub_I_trigger+0x56>
     35e:	bf00      	nop
     360:	200200ac 	.word	0x200200ac
     364:	20022578 	.word	0x20022578
     368:	200009a8 	.word	0x200009a8
     36c:	200009b4 	.word	0x200009b4
     370:	200206ac 	.word	0x200206ac
     374:	20000a94 	.word	0x20000a94
     378:	20022594 	.word	0x20022594
     37c:	200009c0 	.word	0x200009c0
     380:	20021f90 	.word	0x20021f90
     384:	200088e8 	.word	0x200088e8
     388:	00007b39 	.word	0x00007b39
     38c:	20021fa4 	.word	0x20021fa4

00000390 <setup>:
{
     390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     394:	4d67      	ldr	r5, [pc, #412]	; (534 <setup+0x1a4>)
     396:	b087      	sub	sp, #28
     398:	4c67      	ldr	r4, [pc, #412]	; (538 <setup+0x1a8>)
				if (elapsed > 750) break;
     39a:	f240 28ee 	movw	r8, #750	; 0x2ee
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     39e:	4f67      	ldr	r7, [pc, #412]	; (53c <setup+0x1ac>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     3a0:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 570 <setup+0x1e0>
		uint32_t millis_begin = systick_millis_count;
     3a4:	682e      	ldr	r6, [r5, #0]
		yield();
     3a6:	f00a f9b3 	bl	a710 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     3aa:	7823      	ldrb	r3, [r4, #0]
     3ac:	2b00      	cmp	r3, #0
     3ae:	f000 809c 	beq.w	4ea <setup+0x15a>
     3b2:	783b      	ldrb	r3, [r7, #0]
     3b4:	07da      	lsls	r2, r3, #31
     3b6:	f140 8098 	bpl.w	4ea <setup+0x15a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     3ba:	682b      	ldr	r3, [r5, #0]
     3bc:	f8d9 2000 	ldr.w	r2, [r9]
     3c0:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     3c2:	2b0e      	cmp	r3, #14
     3c4:	f240 8091 	bls.w	4ea <setup+0x15a>
     3c8:	682b      	ldr	r3, [r5, #0]
  while(millis()<60000) if(Serial) break;
     3ca:	f64e 265f 	movw	r6, #59999	; 0xea5f
     3ce:	42b3      	cmp	r3, r6
     3d0:	d813      	bhi.n	3fa <setup+0x6a>
     3d2:	4f5a      	ldr	r7, [pc, #360]	; (53c <setup+0x1ac>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     3d4:	f8df 8198 	ldr.w	r8, [pc, #408]	; 570 <setup+0x1e0>
		yield();
     3d8:	f00a f99a 	bl	a710 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     3dc:	7823      	ldrb	r3, [r4, #0]
     3de:	2b00      	cmp	r3, #0
     3e0:	f000 808e 	beq.w	500 <setup+0x170>
     3e4:	783b      	ldrb	r3, [r7, #0]
     3e6:	07db      	lsls	r3, r3, #31
     3e8:	f140 808a 	bpl.w	500 <setup+0x170>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     3ec:	682b      	ldr	r3, [r5, #0]
     3ee:	f8d8 2000 	ldr.w	r2, [r8]
     3f2:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     3f4:	2b0e      	cmp	r3, #14
     3f6:	f240 8083 	bls.w	500 <setup+0x170>
    if(CrashReport) Serial.print(CrashReport);
     3fa:	4851      	ldr	r0, [pc, #324]	; (540 <setup+0x1b0>)
     3fc:	f015 f8fc 	bl	155f8 <___ZN16CrashReportClasscvbEv_veneer>
     400:	2800      	cmp	r0, #0
     402:	f040 8087 	bne.w	514 <setup+0x184>
      AudioMemory(8);
     406:	2108      	movs	r1, #8
     408:	484e      	ldr	r0, [pc, #312]	; (544 <setup+0x1b4>)
     40a:	f015 f8fd 	bl	15608 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
  rtc_setup();
     40e:	2113      	movs	r1, #19
     410:	2012      	movs	r0, #18
     412:	f001 f975 	bl	1700 <rtc_setup(unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     416:	2110      	movs	r1, #16
     418:	484b      	ldr	r0, [pc, #300]	; (548 <setup+0x1b8>)
     41a:	f00a f8fb 	bl	a614 <usb_serial_write>
     41e:	484b      	ldr	r0, [pc, #300]	; (54c <setup+0x1bc>)
     420:	f007 fdc0 	bl	7fa4 <Print::println()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     424:	a804      	add	r0, sp, #16
     426:	f001 f96d 	bl	1704 <rtc_get_datetime(datetime_t*)>
     42a:	2800      	cmp	r0, #0
     42c:	d07a      	beq.n	524 <setup+0x194>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     42e:	f99d 2017 	ldrsb.w	r2, [sp, #23]
     432:	f99d 3016 	ldrsb.w	r3, [sp, #22]
     436:	f99d 0015 	ldrsb.w	r0, [sp, #21]
     43a:	f99d 1013 	ldrsb.w	r1, [sp, #19]
     43e:	e9cd 3202 	strd	r3, r2, [sp, #8]
     442:	e9cd 1000 	strd	r1, r0, [sp]
     446:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     44a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     44e:	4940      	ldr	r1, [pc, #256]	; (550 <setup+0x1c0>)
     450:	483e      	ldr	r0, [pc, #248]	; (54c <setup+0x1bc>)
     452:	f007 fdc3 	bl	7fdc <Print::printf(char const*, ...)>
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     456:	483d      	ldr	r0, [pc, #244]	; (54c <setup+0x1bc>)
     458:	f007 fda4 	bl	7fa4 <Print::println()>
     45c:	2112      	movs	r1, #18
     45e:	483d      	ldr	r0, [pc, #244]	; (554 <setup+0x1c4>)
     460:	f00a f8d8 	bl	a614 <usb_serial_write>
     464:	4839      	ldr	r0, [pc, #228]	; (54c <setup+0x1bc>)
     466:	f007 fd9d 	bl	7fa4 <Print::println()>
  time2date(rtc_get(), &t);
     46a:	f008 fa03 	bl	8874 <rtc_get>
     46e:	a904      	add	r1, sp, #16
     470:	f001 f88c 	bl	158c <time2date(unsigned long, datetime_t*)>
  Serial.printf("Now-sec: %4d-%02d-%02d %02d:%02d:%02d",
     474:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     478:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     47c:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     480:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     484:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     488:	e9cd 2102 	strd	r2, r1, [sp, #8]
     48c:	e9cd 0400 	strd	r0, r4, [sp]
     490:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     494:	4930      	ldr	r1, [pc, #192]	; (558 <setup+0x1c8>)
     496:	482d      	ldr	r0, [pc, #180]	; (54c <setup+0x1bc>)
     498:	f007 fda0 	bl	7fdc <Print::printf(char const*, ...)>
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     49c:	482b      	ldr	r0, [pc, #172]	; (54c <setup+0x1bc>)
     49e:	f007 fd81 	bl	7fa4 <Print::println()>
     4a2:	211d      	movs	r1, #29
     4a4:	482d      	ldr	r0, [pc, #180]	; (55c <setup+0x1cc>)
     4a6:	f00a f8b5 	bl	a614 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     4aa:	f99d 1014 	ldrsb.w	r1, [sp, #20]
     4ae:	4827      	ldr	r0, [pc, #156]	; (54c <setup+0x1bc>)
     4b0:	f007 fd6c 	bl	7f8c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     4b4:	4825      	ldr	r0, [pc, #148]	; (54c <setup+0x1bc>)
     4b6:	f007 fd75 	bl	7fa4 <Print::println()>
     4ba:	210b      	movs	r1, #11
     4bc:	4828      	ldr	r0, [pc, #160]	; (560 <setup+0x1d0>)
     4be:	f00a f8a9 	bl	a614 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     4c2:	4822      	ldr	r0, [pc, #136]	; (54c <setup+0x1bc>)
     4c4:	f007 fd6e 	bl	7fa4 <Print::println()>
  filing_init();
     4c8:	f000 fd04 	bl	ed4 <filing_init()>
     4cc:	210a      	movs	r1, #10
     4ce:	4825      	ldr	r0, [pc, #148]	; (564 <setup+0x1d4>)
     4d0:	f00a f8a0 	bl	a614 <usb_serial_write>
     4d4:	481d      	ldr	r0, [pc, #116]	; (54c <setup+0x1bc>)
     4d6:	f007 fd65 	bl	7fa4 <Print::println()>
  ready=1;
     4da:	4b23      	ldr	r3, [pc, #140]	; (568 <setup+0x1d8>)
     4dc:	2201      	movs	r2, #1
     4de:	601a      	str	r2, [r3, #0]
    setup1();
     4e0:	f7ff feae 	bl	240 <setup1()>
}
     4e4:	b007      	add	sp, #28
     4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     4ea:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     4ec:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     4ee:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     4f0:	b1aa      	cbz	r2, 51e <setup+0x18e>
				if (elapsed > 2000) break;
     4f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     4f6:	f63f af67 	bhi.w	3c8 <setup+0x38>
			yield();
     4fa:	f00a f909 	bl	a710 <yield>
     4fe:	e752      	b.n	3a6 <setup+0x16>
     500:	682b      	ldr	r3, [r5, #0]
  while(millis()<60000) if(Serial) break;
     502:	42b3      	cmp	r3, r6
     504:	f67f af68 	bls.w	3d8 <setup+0x48>
    if(CrashReport) Serial.print(CrashReport);
     508:	480d      	ldr	r0, [pc, #52]	; (540 <setup+0x1b0>)
     50a:	f015 f875 	bl	155f8 <___ZN16CrashReportClasscvbEv_veneer>
     50e:	2800      	cmp	r0, #0
     510:	f43f af79 	beq.w	406 <setup+0x76>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     514:	490d      	ldr	r1, [pc, #52]	; (54c <setup+0x1bc>)
     516:	480a      	ldr	r0, [pc, #40]	; (540 <setup+0x1b0>)
     518:	f015 f87e 	bl	15618 <___ZNK16CrashReportClass7printToER5Print_veneer>
     51c:	e773      	b.n	406 <setup+0x76>
				if (elapsed > 750) break;
     51e:	4543      	cmp	r3, r8
     520:	d9eb      	bls.n	4fa <setup+0x16a>
     522:	e751      	b.n	3c8 <setup+0x38>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     524:	2114      	movs	r1, #20
     526:	4811      	ldr	r0, [pc, #68]	; (56c <setup+0x1dc>)
     528:	f00a f874 	bl	a614 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     52c:	4807      	ldr	r0, [pc, #28]	; (54c <setup+0x1bc>)
     52e:	f007 fd39 	bl	7fa4 <Print::println()>
     532:	e77c      	b.n	42e <setup+0x9e>
     534:	20022564 	.word	0x20022564
     538:	20022612 	.word	0x20022612
     53c:	20022611 	.word	0x20022611
     540:	200088b0 	.word	0x200088b0
     544:	20200000 	.word	0x20200000
     548:	20007d4c 	.word	0x20007d4c
     54c:	200088bc 	.word	0x200088bc
     550:	20007d78 	.word	0x20007d78
     554:	20007da0 	.word	0x20007da0
     558:	20007db4 	.word	0x20007db4
     55c:	20007ddc 	.word	0x20007ddc
     560:	20007dfc 	.word	0x20007dfc
     564:	20007e08 	.word	0x20007e08
     568:	20022020 	.word	0x20022020
     56c:	20007d60 	.word	0x20007d60
     570:	200225c8 	.word	0x200225c8

00000574 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     574:	4a2d      	ldr	r2, [pc, #180]	; (62c <acq_isr()+0xb8>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     576:	4b2e      	ldr	r3, [pc, #184]	; (630 <acq_isr()+0xbc>)
    daddr = (uint32_t)(dma.TCD->DADDR);
     578:	6811      	ldr	r1, [r2, #0]
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
    }

    #if NCH==1
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     57a:	482e      	ldr	r0, [pc, #184]	; (634 <acq_isr()+0xc0>)
    daddr = (uint32_t)(dma.TCD->DADDR);
     57c:	6909      	ldr	r1, [r1, #16]
  {
     57e:	b510      	push	{r4, lr}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     580:	4c2d      	ldr	r4, [pc, #180]	; (638 <acq_isr()+0xc4>)
     582:	7912      	ldrb	r2, [r2, #4]
     584:	77e2      	strb	r2, [r4, #31]
      src = (int32_t *)&i2s_buffer[0];
     586:	f5a3 6480 	sub.w	r4, r3, #1024	; 0x400
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     58a:	f9b0 0000 	ldrsh.w	r0, [r0]
     58e:	2200      	movs	r2, #0
      src = (int32_t *)&i2s_buffer[0];
     590:	4299      	cmp	r1, r3
     592:	bf38      	it	cc
     594:	461c      	movcc	r4, r3
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     596:	4929      	ldr	r1, [pc, #164]	; (63c <acq_isr()+0xc8>)
     598:	f854 3032 	ldr.w	r3, [r4, r2, lsl #3]
     59c:	440b      	add	r3, r1
     59e:	4103      	asrs	r3, r0
     5a0:	f844 3032 	str.w	r3, [r4, r2, lsl #3]
     5a4:	3201      	adds	r2, #1
     5a6:	2a80      	cmp	r2, #128	; 0x80
     5a8:	d1f6      	bne.n	598 <acq_isr()+0x24>
#endif

int32_t acqbias=0;
/***************************************************************************/
static void process(int32_t * buffer)
{ procCount++;
     5aa:	4825      	ldr	r0, [pc, #148]	; (640 <acq_isr()+0xcc>)

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     5ac:	2300      	movs	r3, #0
     5ae:	4a25      	ldr	r2, [pc, #148]	; (644 <acq_isr()+0xd0>)
{ procCount++;
     5b0:	6801      	ldr	r1, [r0, #0]
     5b2:	3101      	adds	r1, #1
     5b4:	6001      	str	r1, [r0, #0]
     5b6:	4611      	mov	r1, r2
  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     5b8:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
     5bc:	3301      	adds	r3, #1
     5be:	2b80      	cmp	r3, #128	; 0x80
     5c0:	f841 0f04 	str.w	r0, [r1, #4]!
     5c4:	d1f8      	bne.n	5b8 <acq_isr()+0x44>
     5c6:	4b20      	ldr	r3, [pc, #128]	; (648 <acq_isr()+0xd4>)
  
  float tmp=0.0f;
     5c8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 64c <acq_isr()+0xd8>
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii]/(float)NBUF_ACQ;
     5cc:	eddf 6a20 	vldr	s13, [pc, #128]	; 650 <acq_isr()+0xdc>
     5d0:	edd2 7a01 	vldr	s15, [r2, #4]
     5d4:	3204      	adds	r2, #4
     5d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     5da:	4293      	cmp	r3, r2
     5dc:	eea7 7aa6 	vfma.f32	s14, s15, s13
     5e0:	d1f6      	bne.n	5d0 <acq_isr()+0x5c>
  acqbias=(int32_t) tmp;

  if(proc==0)
     5e2:	4b1c      	ldr	r3, [pc, #112]	; (654 <acq_isr()+0xe0>)
  acqbias=(int32_t) tmp;
     5e4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
     5e8:	4a1b      	ldr	r2, [pc, #108]	; (658 <acq_isr()+0xe4>)
  if(proc==0)
     5ea:	f9b3 3000 	ldrsh.w	r3, [r3]
  acqbias=(int32_t) tmp;
     5ee:	ed82 7a00 	vstr	s14, [r2]
  if(proc==0)
     5f2:	b133      	cbz	r3, 602 <acq_isr()+0x8e>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     5f4:	2b01      	cmp	r3, #1
     5f6:	d012      	beq.n	61e <acq_isr()+0xaa>
      putAudio(src);
     5f8:	4620      	mov	r0, r4
  }
     5fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      putAudio(src);
     5fe:	f000 b9c3 	b.w	988 <putAudio(long*)>
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     602:	4816      	ldr	r0, [pc, #88]	; (65c <acq_isr()+0xe8>)
     604:	f000 ff52 	bl	14ac <pushData(unsigned long*)>
     608:	2800      	cmp	r0, #0
     60a:	d1f5      	bne.n	5f8 <acq_isr()+0x84>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     60c:	4a14      	ldr	r2, [pc, #80]	; (660 <acq_isr()+0xec>)
      putAudio(src);
     60e:	4620      	mov	r0, r4
   if(!compress((void *)acqBuffer)) procMiss++;
     610:	6813      	ldr	r3, [r2, #0]
     612:	3301      	adds	r3, #1
  }
     614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   if(!compress((void *)acqBuffer)) procMiss++;
     618:	6013      	str	r3, [r2, #0]
      putAudio(src);
     61a:	f000 b9b5 	b.w	988 <putAudio(long*)>
   if(!compress((void *)acqBuffer)) procMiss++;
     61e:	480f      	ldr	r0, [pc, #60]	; (65c <acq_isr()+0xe8>)
     620:	f000 fa34 	bl	a8c <compress(void*)>
     624:	2800      	cmp	r0, #0
     626:	d1e7      	bne.n	5f8 <acq_isr()+0x84>
     628:	e7f0      	b.n	60c <acq_isr()+0x98>
     62a:	bf00      	nop
     62c:	2001f9c4 	.word	0x2001f9c4
     630:	20021b54 	.word	0x20021b54
     634:	20008ebc 	.word	0x20008ebc
     638:	400e8000 	.word	0x400e8000
     63c:	06978000 	.word	0x06978000
     640:	20021fb8 	.word	0x20021fb8
     644:	200204a8 	.word	0x200204a8
     648:	200206a8 	.word	0x200206a8
     64c:	00000000 	.word	0x00000000
     650:	3c000000 	.word	0x3c000000
     654:	200225e6 	.word	0x200225e6
     658:	200206c8 	.word	0x200206c8
     65c:	200204ac 	.word	0x200204ac
     660:	20021fbc 	.word	0x20021fbc

00000664 <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
     664:	b510      	push	{r4, lr}
     666:	4604      	mov	r4, r0
		release();
     668:	f007 fafc 	bl	7c64 <DMAChannel::release()>
	}
     66c:	4620      	mov	r0, r4
     66e:	bd10      	pop	{r4, pc}

00000670 <setAudioFrequency(int)>:
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     670:	ee07 0a90 	vmov	s15, r0
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     674:	4938      	ldr	r1, [pc, #224]	; (758 <setAudioFrequency(int)+0xe8>)
     676:	0280      	lsls	r0, r0, #10
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     678:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
     67c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     680:	4b36      	ldr	r3, [pc, #216]	; (75c <setAudioFrequency(int)+0xec>)
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     682:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 740 <setAudioFrequency(int)+0xd0>
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     686:	fb91 f1f0 	sdiv	r1, r1, r0
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     68a:	ee27 7b06 	vmul.f64	d7, d7, d6
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     68e:	1c4a      	adds	r2, r1, #1
     690:	ee06 2a10 	vmov	s12, r2
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     694:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     698:	ee27 7b03 	vmul.f64	d7, d7, d3
     69c:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 748 <setAudioFrequency(int)+0xd8>
  {
     6a0:	b410      	push	{r4}
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     6a2:	ee27 7b06 	vmul.f64	d7, d7, d6
    int c1 = C * c2 - (c0 * c2);
     6a6:	f242 7410 	movw	r4, #10000	; 0x2710
     6aa:	ed9f 5b29 	vldr	d5, [pc, #164]	; 750 <setAudioFrequency(int)+0xe0>
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     6ae:	ee87 6b04 	vdiv.f64	d6, d7, d4
    int c0 = C;
     6b2:	eefd 7bc6 	vcvt.s32.f64	s15, d6
     6b6:	ee17 2a90 	vmov	r2, s15
    int c1 = C * c2 - (c0 * c2);
     6ba:	fb04 f002 	mul.w	r0, r4, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     6be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     6c2:	ee07 0a10 	vmov	s14, r0
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     6c6:	f442 1289 	orr.w	r2, r2, #1122304	; 0x112000
    int c1 = C * c2 - (c0 * c2);
     6ca:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     6ce:	671a      	str	r2, [r3, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     6d0:	ee96 7b05 	vfnms.f64	d7, d6, d5
     6d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     6d8:	ee17 2a90 	vmov	r2, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     6dc:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
     6e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     6e4:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     6e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     6ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     6ee:	671a      	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     6f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     6f2:	2a00      	cmp	r2, #0
     6f4:	dafc      	bge.n	6f0 <setAudioFrequency(int)+0x80>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     6f6:	f8d3 4170 	ldr.w	r4, [r3, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     6fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     6fe:	4a18      	ldr	r2, [pc, #96]	; (760 <setAudioFrequency(int)+0xf0>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     700:	4818      	ldr	r0, [pc, #96]	; (764 <setAudioFrequency(int)+0xf4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     702:	4022      	ands	r2, r4
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     704:	4c18      	ldr	r4, [pc, #96]	; (768 <setAudioFrequency(int)+0xf8>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     706:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     70a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     70c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     710:	671a      	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     712:	69c2      	ldr	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     714:	4b15      	ldr	r3, [pc, #84]	; (76c <setAudioFrequency(int)+0xfc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     716:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     71a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     71e:	61c2      	str	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     720:	6a82      	ldr	r2, [r0, #40]	; 0x28
     722:	4013      	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     724:	4a12      	ldr	r2, [pc, #72]	; (770 <setAudioFrequency(int)+0x100>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     726:	430b      	orrs	r3, r1
     728:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     72c:	6283      	str	r3, [r0, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     72e:	6863      	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     730:	401a      	ands	r2, r3
     732:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     736:	6062      	str	r2, [r4, #4]
  }
     738:	f85d 4b04 	ldr.w	r4, [sp], #4
     73c:	4770      	bx	lr
     73e:	bf00      	nop
     740:	00000000 	.word	0x00000000
     744:	40700000 	.word	0x40700000
     748:	00000000 	.word	0x00000000
     74c:	4176e360 	.word	0x4176e360
     750:	00000000 	.word	0x00000000
     754:	40c38800 	.word	0x40c38800
     758:	269fb200 	.word	0x269fb200
     75c:	400d8000 	.word	0x400d8000
     760:	ff7f7fff 	.word	0xff7f7fff
     764:	400fc000 	.word	0x400fc000
     768:	400ac000 	.word	0x400ac000
     76c:	fffffe00 	.word	0xfffffe00
     770:	fff7fff8 	.word	0xfff7fff8

00000774 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     774:	4a19      	ldr	r2, [pc, #100]	; (7dc <i2s_setup()+0x68>)
     776:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     778:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     77a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     77e:	4c18      	ldr	r4, [pc, #96]	; (7e0 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     780:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     782:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     786:	2b00      	cmp	r3, #0
     788:	db27      	blt.n	7da <i2s_setup()+0x66>
    int fs = fsamp;
     78a:	4b16      	ldr	r3, [pc, #88]	; (7e4 <i2s_setup()+0x70>)
    setAudioFrequency(fs);
     78c:	6818      	ldr	r0, [r3, #0]
     78e:	f7ff ff6f 	bl	670 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     792:	4b15      	ldr	r3, [pc, #84]	; (7e8 <i2s_setup()+0x74>)
     794:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     796:	4915      	ldr	r1, [pc, #84]	; (7ec <i2s_setup()+0x78>)
     798:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     79a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     79e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     7a2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     7a6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     7aa:	2201      	movs	r2, #1
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     7ac:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     7b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     7b4:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     7b6:	480e      	ldr	r0, [pc, #56]	; (7f0 <i2s_setup()+0x7c>)
    I2S1_RMR = 0;
     7b8:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     7bc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     7c0:	490c      	ldr	r1, [pc, #48]	; (7f4 <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     7c2:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     7c6:	4a0c      	ldr	r2, [pc, #48]	; (7f8 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     7c8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     7cc:	4b0b      	ldr	r3, [pc, #44]	; (7fc <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     7ce:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     7d2:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     7d6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     7da:	bd10      	pop	{r4, pc}
     7dc:	400fc000 	.word	0x400fc000
     7e0:	40384000 	.word	0x40384000
     7e4:	20008e8c 	.word	0x20008e8c
     7e8:	401f8000 	.word	0x401f8000
     7ec:	401f8400 	.word	0x401f8400
     7f0:	07000001 	.word	0x07000001
     7f4:	00011f1b 	.word	0x00011f1b
     7f8:	1f1f1f00 	.word	0x1f1f1f00
     7fc:	92000001 	.word	0x92000001

00000800 <dma_setup()>:
  {
     800:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     802:	4c1c      	ldr	r4, [pc, #112]	; (874 <dma_setup()+0x74>)
     804:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     806:	4d1c      	ldr	r5, [pc, #112]	; (878 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     808:	4620      	mov	r0, r4
     80a:	f007 f9d1 	bl	7bb0 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     80e:	6823      	ldr	r3, [r4, #0]
     810:	481a      	ldr	r0, [pc, #104]	; (87c <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     812:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     816:	491a      	ldr	r1, [pc, #104]	; (880 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     818:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     81a:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     81c:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     81e:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     820:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     822:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     824:	4d17      	ldr	r5, [pc, #92]	; (884 <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     826:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     828:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     82a:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     82c:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     82e:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     830:	2204      	movs	r2, #4
     832:	4915      	ldr	r1, [pc, #84]	; (888 <dma_setup()+0x88>)
     834:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     836:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     838:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     83a:	4d14      	ldr	r5, [pc, #80]	; (88c <dma_setup()+0x8c>)
     83c:	60da      	str	r2, [r3, #12]
		*mux = 0;
     83e:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     842:	4b13      	ldr	r3, [pc, #76]	; (890 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     844:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     848:	2101      	movs	r1, #1
     84a:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     84c:	4811      	ldr	r0, [pc, #68]	; (894 <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     84e:	f002 051f 	and.w	r5, r2, #31
     852:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     856:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     85a:	40a9      	lsls	r1, r5
     85c:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     85e:	4d0e      	ldr	r5, [pc, #56]	; (898 <dma_setup()+0x98>)
     860:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     864:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     866:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     868:	490c      	ldr	r1, [pc, #48]	; (89c <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     86a:	4b0d      	ldr	r3, [pc, #52]	; (8a0 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     86c:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     86e:	7922      	ldrb	r2, [r4, #4]
     870:	76da      	strb	r2, [r3, #27]
  }
     872:	bd38      	pop	{r3, r4, r5, pc}
     874:	2001f9c4 	.word	0x2001f9c4
     878:	02020000 	.word	0x02020000
     87c:	403840a0 	.word	0x403840a0
     880:	20021754 	.word	0x20021754
     884:	fffff800 	.word	0xfffff800
     888:	400ec000 	.word	0x400ec000
     88c:	80000013 	.word	0x80000013
     890:	38003840 	.word	0x38003840
     894:	20009000 	.word	0x20009000
     898:	00000575 	.word	0x00000575
     89c:	e000e400 	.word	0xe000e400
     8a0:	400e8000 	.word	0x400e8000

000008a4 <_GLOBAL__sub_I_procCount>:
		begin();
     8a4:	4805      	ldr	r0, [pc, #20]	; (8bc <_GLOBAL__sub_I_procCount+0x18>)
     8a6:	2100      	movs	r1, #0
  }
}
     8a8:	b508      	push	{r3, lr}
     8aa:	f007 f981 	bl	7bb0 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     8ae:	4a04      	ldr	r2, [pc, #16]	; (8c0 <_GLOBAL__sub_I_procCount+0x1c>)
     8b0:	4904      	ldr	r1, [pc, #16]	; (8c4 <_GLOBAL__sub_I_procCount+0x20>)
     8b2:	4802      	ldr	r0, [pc, #8]	; (8bc <_GLOBAL__sub_I_procCount+0x18>)
}
     8b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     8b8:	f00a b8c4 	b.w	aa44 <__aeabi_atexit>
     8bc:	2001f9c4 	.word	0x2001f9c4
     8c0:	200088e8 	.word	0x200088e8
     8c4:	00000665 	.word	0x00000665

000008c8 <AudioIF::update()>:

    uint32_t usbCount=0;
    static int32_t src_buffer[NBUF_I2S];
    void AudioIF::update(void)
    {	const int32_t *src;
     8c8:	b570      	push	{r4, r5, r6, lr}
      if ( head==tail ) return 0;
     8ca:	4b29      	ldr	r3, [pc, #164]	; (970 <AudioIF::update()+0xa8>)
     8cc:	4e29      	ldr	r6, [pc, #164]	; (974 <AudioIF::update()+0xac>)
     8ce:	681b      	ldr	r3, [r3, #0]
     8d0:	6834      	ldr	r4, [r6, #0]
     8d2:	429c      	cmp	r4, r3
     8d4:	d046      	beq.n	964 <AudioIF::update()+0x9c>
      for(int ii=0;ii<NBUF_I2S;ii++) data[ii]=audio_buffer[head][ii];
     8d6:	4928      	ldr	r1, [pc, #160]	; (978 <AudioIF::update()+0xb0>)
     8d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
     8dc:	4605      	mov	r5, r0
     8de:	4827      	ldr	r0, [pc, #156]	; (97c <AudioIF::update()+0xb4>)
     8e0:	eb01 2184 	add.w	r1, r1, r4, lsl #10
      head = (head+1)%MAUDIO;
     8e4:	3401      	adds	r4, #1
      for(int ii=0;ii<NBUF_I2S;ii++) data[ii]=audio_buffer[head][ii];
     8e6:	f007 fef5 	bl	86d4 <memcpy>
      head = (head+1)%MAUDIO;
     8ea:	4a25      	ldr	r2, [pc, #148]	; (980 <AudioIF::update()+0xb8>)
     8ec:	17e3      	asrs	r3, r4, #31
     8ee:	fb82 1204 	smull	r1, r2, r2, r4
     8f2:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
     8f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     8fa:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
     8fe:	6034      	str	r4, [r6, #0]
      int16_t *dst;
      audio_block_t *left, *right;
      //
      if(!getAudio(src_buffer)) return;
      
      left  = allocate(); if (!left) return;
     900:	f006 ff86 	bl	7810 <AudioStream::allocate()>
     904:	4604      	mov	r4, r0
     906:	b368      	cbz	r0, 964 <AudioIF::update()+0x9c>
      right = allocate(); if (!right) {release(left); return;}
     908:	f006 ff82 	bl	7810 <AudioStream::allocate()>
     90c:	4606      	mov	r6, r0
     90e:	b350      	cbz	r0, 966 <AudioIF::update()+0x9e>
      usbCount++;
     910:	4a1c      	ldr	r2, [pc, #112]	; (984 <AudioIF::update()+0xbc>)
     912:	481a      	ldr	r0, [pc, #104]	; (97c <AudioIF::update()+0xb4>)
     914:	6813      	ldr	r3, [r2, #0]
     916:	3301      	adds	r3, #1
     918:	6013      	str	r3, [r2, #0]
      src = &src_buffer[0];
      dst = left->data;
      //
      for(int ii=0; ii<NBUF_ACQ; ii++) dst[ii]=(int16_t)src[2*ii];
     91a:	1ca2      	adds	r2, r4, #2
     91c:	2300      	movs	r3, #0
     91e:	f850 1033 	ldr.w	r1, [r0, r3, lsl #3]
     922:	3301      	adds	r3, #1
     924:	2b80      	cmp	r3, #128	; 0x80
     926:	f822 1f02 	strh.w	r1, [r2, #2]!
     92a:	d1f8      	bne.n	91e <AudioIF::update()+0x56>
      
      src = &src_buffer[1];
      dst = right->data;
      //
      for(int ii=0; ii<NBUF_ACQ; ii++) dst[ii]=(int16_t)src[2*ii];
     92c:	4b13      	ldr	r3, [pc, #76]	; (97c <AudioIF::update()+0xb4>)
     92e:	1cb2      	adds	r2, r6, #2
     930:	f503 6080 	add.w	r0, r3, #1024	; 0x400
     934:	6859      	ldr	r1, [r3, #4]
     936:	3308      	adds	r3, #8
     938:	4298      	cmp	r0, r3
     93a:	f822 1f02 	strh.w	r1, [r2, #2]!
     93e:	d1f9      	bne.n	934 <AudioIF::update()+0x6c>
      
      transmit(left,0);
     940:	4621      	mov	r1, r4
     942:	4628      	mov	r0, r5
     944:	2200      	movs	r2, #0
     946:	f006 ffe1 	bl	790c <AudioStream::transmit(audio_block_struct*, unsigned char)>
      transmit(right,1);
     94a:	4631      	mov	r1, r6
     94c:	4628      	mov	r0, r5
     94e:	2201      	movs	r2, #1
     950:	f006 ffdc 	bl	790c <AudioStream::transmit(audio_block_struct*, unsigned char)>
      release(left);
     954:	4620      	mov	r0, r4
     956:	f006 ffb1 	bl	78bc <AudioStream::release(audio_block_struct*)>
      release(right);
     95a:	4630      	mov	r0, r6
    }
     95c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      release(right);
     960:	f006 bfac 	b.w	78bc <AudioStream::release(audio_block_struct*)>
    }
     964:	bd70      	pop	{r4, r5, r6, pc}
      right = allocate(); if (!right) {release(left); return;}
     966:	4620      	mov	r0, r4
    }
     968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      right = allocate(); if (!right) {release(left); return;}
     96c:	f006 bfa6 	b.w	78bc <AudioStream::release(audio_block_struct*)>
     970:	2001fbd0 	.word	0x2001fbd0
     974:	2001fbcc 	.word	0x2001fbcc
     978:	2001d1c4 	.word	0x2001d1c4
     97c:	2000cdc0 	.word	0x2000cdc0
     980:	66666667 	.word	0x66666667
     984:	200225b4 	.word	0x200225b4

00000988 <putAudio(long*)>:
    {
     988:	b470      	push	{r4, r5, r6}
      if ( (tail+1)%MAUDIO == head ) return 0;
     98a:	4d12      	ldr	r5, [pc, #72]	; (9d4 <putAudio(long*)+0x4c>)
     98c:	4b12      	ldr	r3, [pc, #72]	; (9d8 <putAudio(long*)+0x50>)
     98e:	6829      	ldr	r1, [r5, #0]
     990:	681e      	ldr	r6, [r3, #0]
     992:	4a12      	ldr	r2, [pc, #72]	; (9dc <putAudio(long*)+0x54>)
     994:	1c4b      	adds	r3, r1, #1
     996:	fb82 4203 	smull	r4, r2, r2, r3
     99a:	17dc      	asrs	r4, r3, #31
     99c:	ebc4 04a2 	rsb	r4, r4, r2, asr #2
     9a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     9a4:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
     9a8:	42b4      	cmp	r4, r6
     9aa:	d00f      	beq.n	9cc <putAudio(long*)+0x44>
     9ac:	4a0c      	ldr	r2, [pc, #48]	; (9e0 <putAudio(long*)+0x58>)
     9ae:	1f03      	subs	r3, r0, #4
     9b0:	f500 707f 	add.w	r0, r0, #1020	; 0x3fc
     9b4:	eb02 2281 	add.w	r2, r2, r1, lsl #10
      for(int ii=0;ii<NBUF_I2S;ii++) audio_buffer[tail][ii]=data[ii];
     9b8:	f853 1f04 	ldr.w	r1, [r3, #4]!
     9bc:	4283      	cmp	r3, r0
     9be:	f842 1f04 	str.w	r1, [r2, #4]!
     9c2:	d1f9      	bne.n	9b8 <putAudio(long*)+0x30>
      return 1; // signal success.
     9c4:	2001      	movs	r0, #1
      tail = (tail+1)%MAUDIO;
     9c6:	602c      	str	r4, [r5, #0]
    }
     9c8:	bc70      	pop	{r4, r5, r6}
     9ca:	4770      	bx	lr
      if ( (tail+1)%MAUDIO == head ) return 0;
     9cc:	2000      	movs	r0, #0
    }
     9ce:	bc70      	pop	{r4, r5, r6}
     9d0:	4770      	bx	lr
     9d2:	bf00      	nop
     9d4:	2001fbd0 	.word	0x2001fbd0
     9d8:	2001fbcc 	.word	0x2001fbcc
     9dc:	66666667 	.word	0x66666667
     9e0:	2001d1c0 	.word	0x2001d1c0

000009e4 <AudioTrigger::m_isr()>:
      t1.priority(prio*16);
    }

    void AudioTrigger::m_isr(void)
    {
      if (update_responsibility) AudioStream::update_all();
     9e4:	4b04      	ldr	r3, [pc, #16]	; (9f8 <AudioTrigger::m_isr()+0x14>)
     9e6:	781b      	ldrb	r3, [r3, #0]
     9e8:	b123      	cbz	r3, 9f4 <AudioTrigger::m_isr()+0x10>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
     9ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     9ee:	2240      	movs	r2, #64	; 0x40
     9f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    }
     9f4:	4770      	bx	lr
     9f6:	bf00      	nop
     9f8:	200225fa 	.word	0x200225fa

000009fc <IntervalTimer::~IntervalTimer()>:
	~IntervalTimer() {
     9fc:	b510      	push	{r4, lr}
     9fe:	4604      	mov	r4, r0
		end();
     a00:	f007 fa50 	bl	7ea4 <IntervalTimer::end()>
	}
     a04:	4620      	mov	r0, r4
     a06:	bd10      	pop	{r4, pc}

00000a08 <AudioTrigger::init()>:
    {	// check with AudioStream if we are responsable for updates
     a08:	b538      	push	{r3, r4, r5, lr}
		return beginCycles(funct, cycles);
     a0a:	4c13      	ldr	r4, [pc, #76]	; (a58 <AudioTrigger::init()+0x50>)
     a0c:	4605      	mov	r5, r0
      update_responsibility = update_setup();  
     a0e:	f007 f8ad 	bl	7b6c <AudioStream::update_setup()>
     a12:	4b12      	ldr	r3, [pc, #72]	; (a5c <AudioTrigger::init()+0x54>)
     a14:	4a12      	ldr	r2, [pc, #72]	; (a60 <AudioTrigger::init()+0x58>)
     a16:	7018      	strb	r0, [r3, #0]
     a18:	4620      	mov	r0, r4
     a1a:	4912      	ldr	r1, [pc, #72]	; (a64 <AudioTrigger::init()+0x5c>)
     a1c:	f007 f9de 	bl	7ddc <IntervalTimer::beginCycles(void (*)(), unsigned long)>
      t1.priority(prio*16);
     a20:	69ab      	ldr	r3, [r5, #24]
	// the highest and 255 the lowest. Most other interrupts default to 128. As
	// a general guideline, interrupt routines that run longer should be given
	// lower priority (higher numerical values).
	void priority(uint8_t n) {
		nvic_priority = n;
		if (channel) {
     a22:	6820      	ldr	r0, [r4, #0]
     a24:	011b      	lsls	r3, r3, #4
     a26:	b2db      	uxtb	r3, r3
		nvic_priority = n;
     a28:	7123      	strb	r3, [r4, #4]
		if (channel) {
     a2a:	b1a0      	cbz	r0, a56 <AudioTrigger::init()+0x4e>
			int index = channel - IMXRT_PIT_CHANNELS;
     a2c:	490e      	ldr	r1, [pc, #56]	; (a68 <AudioTrigger::init()+0x60>)
			nvic_priorites[index] = nvic_priority;
     a2e:	4a0f      	ldr	r2, [pc, #60]	; (a6c <AudioTrigger::init()+0x64>)
			int index = channel - IMXRT_PIT_CHANNELS;
     a30:	4401      	add	r1, r0
			uint8_t top_priority = nvic_priorites[0];
			for (uint8_t i=1; i < (sizeof(nvic_priorites)/sizeof(nvic_priorites[0])); i++) {
				if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
			}
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
     a32:	4c0f      	ldr	r4, [pc, #60]	; (a70 <AudioTrigger::init()+0x68>)
			int index = channel - IMXRT_PIT_CHANNELS;
     a34:	1109      	asrs	r1, r1, #4
			nvic_priorites[index] = nvic_priority;
     a36:	5453      	strb	r3, [r2, r1]
				if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
     a38:	7813      	ldrb	r3, [r2, #0]
     a3a:	7850      	ldrb	r0, [r2, #1]
     a3c:	7891      	ldrb	r1, [r2, #2]
     a3e:	4283      	cmp	r3, r0
     a40:	78d2      	ldrb	r2, [r2, #3]
     a42:	bf28      	it	cs
     a44:	4603      	movcs	r3, r0
     a46:	428b      	cmp	r3, r1
     a48:	bf28      	it	cs
     a4a:	460b      	movcs	r3, r1
     a4c:	4293      	cmp	r3, r2
     a4e:	bf28      	it	cs
     a50:	4613      	movcs	r3, r2
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
     a52:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    }
     a56:	bd38      	pop	{r3, r4, r5, pc}
     a58:	20008e90 	.word	0x20008e90
     a5c:	200225fa 	.word	0x200225fa
     a60:	0001100f 	.word	0x0001100f
     a64:	000009e5 	.word	0x000009e5
     a68:	bff7bf00 	.word	0xbff7bf00
     a6c:	200088d8 	.word	0x200088d8
     a70:	e000e400 	.word	0xe000e400

00000a74 <_GLOBAL__sub_I__ZN12AudioTrigger21update_responsibilityE>:
    IntervalTimer t1;
     a74:	4a02      	ldr	r2, [pc, #8]	; (a80 <_GLOBAL__sub_I__ZN12AudioTrigger21update_responsibilityE+0xc>)
     a76:	4903      	ldr	r1, [pc, #12]	; (a84 <_GLOBAL__sub_I__ZN12AudioTrigger21update_responsibilityE+0x10>)
     a78:	4803      	ldr	r0, [pc, #12]	; (a88 <_GLOBAL__sub_I__ZN12AudioTrigger21update_responsibilityE+0x14>)
     a7a:	f009 bfe3 	b.w	aa44 <__aeabi_atexit>
     a7e:	bf00      	nop
     a80:	200088e8 	.word	0x200088e8
     a84:	000009fd 	.word	0x000009fd
     a88:	20008e90 	.word	0x20008e90

00000a8c <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int ret=1;
  static uint32_t to = rtc_get();
     a90:	4db3      	ldr	r5, [pc, #716]	; (d60 <compress(void*)+0x2d4>)
{   
     a92:	b083      	sub	sp, #12
     a94:	4604      	mov	r4, r0
  static uint32_t to = rtc_get();
     a96:	682b      	ldr	r3, [r5, #0]
     a98:	07df      	lsls	r7, r3, #31
     a9a:	f140 8157 	bpl.w	d4c <compress(void*)+0x2c0>
     a9e:	f8df b2f4 	ldr.w	fp, [pc, #756]	; d94 <compress(void*)+0x308>
  static uint32_t t1 = micros();
     aa2:	4db0      	ldr	r5, [pc, #704]	; (d64 <compress(void*)+0x2d8>)
     aa4:	682b      	ldr	r3, [r5, #0]
     aa6:	07de      	lsls	r6, r3, #31
     aa8:	f140 8148 	bpl.w	d3c <compress(void*)+0x2b0>
  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
     aac:	4bae      	ldr	r3, [pc, #696]	; (d68 <compress(void*)+0x2dc>)
     aae:	f8d3 a000 	ldr.w	sl, [r3]
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii]=tempDatai[ii] = din[ii];
     ab2:	4aae      	ldr	r2, [pc, #696]	; (d6c <compress(void*)+0x2e0>)
     ab4:	4620      	mov	r0, r4
     ab6:	6823      	ldr	r3, [r4, #0]
     ab8:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     abc:	6815      	ldr	r5, [r2, #0]
     abe:	4aac      	ldr	r2, [pc, #688]	; (d70 <compress(void*)+0x2e4>)
     ac0:	602b      	str	r3, [r5, #0]
     ac2:	462c      	mov	r4, r5
     ac4:	6013      	str	r3, [r2, #0]
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     ac6:	462a      	mov	r2, r5
     ac8:	4601      	mov	r1, r0
     aca:	3004      	adds	r0, #4
     acc:	e9d1 1300 	ldrd	r1, r3, [r1]
     ad0:	42b0      	cmp	r0, r6
     ad2:	eba3 0301 	sub.w	r3, r3, r1
     ad6:	f844 3f04 	str.w	r3, [r4, #4]!
     ada:	d1f5      	bne.n	ac8 <compress(void*)+0x3c>
     adc:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
  int32_t mx = 0;
     ae0:	2100      	movs	r1, #0
    int32_t dd =  tempDatai[ii];
     ae2:	f852 3f04 	ldr.w	r3, [r2, #4]!
    if(dd>mx) mx = dd;
     ae6:	2b00      	cmp	r3, #0
     ae8:	bfb8      	it	lt
     aea:	425b      	neglt	r3, r3
     aec:	4299      	cmp	r1, r3
     aee:	bfb8      	it	lt
     af0:	4619      	movlt	r1, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     af2:	4290      	cmp	r0, r2
     af4:	d1f5      	bne.n	ae2 <compress(void*)+0x56>
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     af6:	2702      	movs	r7, #2
     af8:	2001      	movs	r0, #1
     afa:	e003      	b.n	b04 <compress(void*)+0x78>
     afc:	3701      	adds	r7, #1
     afe:	2f18      	cmp	r7, #24
     b00:	f000 8113 	beq.w	d2a <compress(void*)+0x29e>
     b04:	1e7a      	subs	r2, r7, #1
     b06:	fa00 f302 	lsl.w	r3, r0, r2
     b0a:	428b      	cmp	r3, r1
     b0c:	ddf6      	ble.n	afc <compress(void*)+0x70>
  int ncmp = (NSAMP*nb) / MBIT;
     b0e:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
     b12:	40b8      	lsls	r0, r7
  int ndat = NH+NCH + ncmp;
     b14:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
     b18:	3801      	subs	r0, #1
  int ndat = NH+NCH + ncmp;
     b1a:	9301      	str	r3, [sp, #4]
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     b1c:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
     b20:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
     b24:	4c93      	ldr	r4, [pc, #588]	; (d74 <compress(void*)+0x2e8>)
  if(nb>max_stat) max_stat=nb;
     b26:	4d94      	ldr	r5, [pc, #592]	; (d78 <compress(void*)+0x2ec>)
  proc_stat[nb-1]++;
     b28:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
     b2c:	3101      	adds	r1, #1
     b2e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
  if(nb>max_stat) max_stat=nb;
     b32:	682a      	ldr	r2, [r5, #0]
     b34:	4c91      	ldr	r4, [pc, #580]	; (d7c <compress(void*)+0x2f0>)
     b36:	42ba      	cmp	r2, r7
     b38:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     b3c:	46a1      	mov	r9, r4
     b3e:	4622      	mov	r2, r4
     b40:	bf38      	it	cc
     b42:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     b44:	f852 1f04 	ldr.w	r1, [r2, #4]!
     b48:	4001      	ands	r1, r0
     b4a:	4296      	cmp	r6, r2
     b4c:	6011      	str	r1, [r2, #0]
     b4e:	d1f9      	bne.n	b44 <compress(void*)+0xb8>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     b50:	4d8b      	ldr	r5, [pc, #556]	; (d80 <compress(void*)+0x2f4>)
     b52:	f44f 7200 	mov.w	r2, #512	; 0x200
     b56:	2100      	movs	r1, #0
     b58:	9300      	str	r3, [sp, #0]
     b5a:	4628      	mov	r0, r5
     b5c:	f00c f82e 	bl	cbbc <memset>
  *iptr++ = to;
     b60:	f8db 2000 	ldr.w	r2, [fp]
  *iptr++ = NCH+ncmp; // number of data after header
     b64:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     b66:	2100      	movs	r1, #0
  *iptr++ = to;
     b68:	60aa      	str	r2, [r5, #8]

  // pack data
  // 
  int nx = MBIT;
     b6a:	f04f 0c20 	mov.w	ip, #32
  *iptr++ = nb | shift<<16;
     b6e:	4a85      	ldr	r2, [pc, #532]	; (d84 <compress(void*)+0x2f8>)
  outData[kk++] = tempData[0]; tempData[0] = 0;
     b70:	2007      	movs	r0, #7
  *iptr++ = t1;
     b72:	f8c5 a00c 	str.w	sl, [r5, #12]
  *iptr++ = nb | shift<<16;
     b76:	f9b2 2000 	ldrsh.w	r2, [r2]
  *iptr++ = NCH+ncmp; // number of data after header
     b7a:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
     b7c:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
     b80:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     b82:	f8d9 2000 	ldr.w	r2, [r9]
     b86:	f8c9 1000 	str.w	r1, [r9]
     b8a:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     b8c:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     b90:	602a      	str	r2, [r5, #0]
  *iptr++ = NCH;
     b92:	2201      	movs	r2, #1
     b94:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NSAMP; ii ++)
     b96:	e00a      	b.n	bae <compress(void*)+0x122>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     b98:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
     b9c:	4694      	mov	ip, r2
     b9e:	ea41 010e 	orr.w	r1, r1, lr
     ba2:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NSAMP; ii ++)
     ba6:	42a6      	cmp	r6, r4
     ba8:	d018      	beq.n	bdc <compress(void*)+0x150>
      {   outData[kk] |= (tempData[ii] << nx);
     baa:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     bae:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
     bb2:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
     bb4:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
     bb8:	dcee      	bgt.n	b98 <compress(void*)+0x10c>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     bba:	eba7 0e0c 	sub.w	lr, r7, ip
     bbe:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
     bc2:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
     bc6:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
     bca:	d12f      	bne.n	c2c <compress(void*)+0x1a0>
      {   outData[kk++] |= tempData[ii];
     bcc:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NSAMP; ii ++)
     bce:	42a6      	cmp	r6, r4
          nx=MBIT;
     bd0:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
     bd4:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     bd8:	4648      	mov	r0, r9
  for (int ii = 0; ii < NSAMP; ii ++)
     bda:	d1e6      	bne.n	baa <compress(void*)+0x11e>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     bdc:	4e6a      	ldr	r6, [pc, #424]	; (d88 <compress(void*)+0x2fc>)
     bde:	6834      	ldr	r4, [r6, #0]
     be0:	eb04 0208 	add.w	r2, r4, r8
     be4:	2a80      	cmp	r2, #128	; 0x80
     be6:	dc2d      	bgt.n	c44 <compress(void*)+0x1b8>
     be8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     bec:	4a67      	ldr	r2, [pc, #412]	; (d8c <compress(void*)+0x300>)
     bee:	4864      	ldr	r0, [pc, #400]	; (d80 <compress(void*)+0x2f4>)
     bf0:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
     bf4:	4423      	add	r3, r4
     bf6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     bfa:	2300      	movs	r3, #0
     bfc:	e001      	b.n	c02 <compress(void*)+0x176>
     bfe:	f850 1f04 	ldr.w	r1, [r0, #4]!
     c02:	3301      	adds	r3, #1
     c04:	f842 1f04 	str.w	r1, [r2, #4]!
     c08:	4543      	cmp	r3, r8
     c0a:	dbf8      	blt.n	bfe <compress(void*)+0x172>
     c0c:	f1b8 0f00 	cmp.w	r8, #0
     c10:	f108 33ff 	add.w	r3, r8, #4294967295
     c14:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
     c18:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     c1c:	bfd8      	it	le
     c1e:	2300      	movle	r3, #0
     c20:	4423      	add	r3, r4
     c22:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     c24:	4638      	mov	r0, r7
     c26:	b003      	add	sp, #12
     c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     c2c:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
     c30:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     c34:	ea4e 0202 	orr.w	r2, lr, r2
     c38:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     c3c:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
     c3e:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
     c42:	e7b0      	b.n	ba6 <compress(void*)+0x11a>
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     c44:	2c7a      	cmp	r4, #122	; 0x7a
     c46:	dd22      	ble.n	c8e <compress(void*)+0x202>
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     c48:	2c7f      	cmp	r4, #127	; 0x7f
     c4a:	dc0a      	bgt.n	c62 <compress(void*)+0x1d6>
     c4c:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
     c50:	484e      	ldr	r0, [pc, #312]	; (d8c <compress(void*)+0x300>)
     c52:	2100      	movs	r1, #0
     c54:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     c58:	0092      	lsls	r2, r2, #2
     c5a:	f00b ffaf 	bl	cbbc <memset>
     c5e:	2380      	movs	r3, #128	; 0x80
     c60:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
     c62:	484a      	ldr	r0, [pc, #296]	; (d8c <compress(void*)+0x300>)
     c64:	f000 fc22 	bl	14ac <pushData(unsigned long*)>
     c68:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     c6a:	ea4f 0288 	mov.w	r2, r8, lsl #2
     c6e:	4944      	ldr	r1, [pc, #272]	; (d80 <compress(void*)+0x2f4>)
      if(!pushData(dout)) ret = 0;
     c70:	bf18      	it	ne
     c72:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     c74:	f1b8 0f00 	cmp.w	r8, #0
     c78:	4844      	ldr	r0, [pc, #272]	; (d8c <compress(void*)+0x300>)
     c7a:	bfd8      	it	le
     c7c:	2204      	movle	r2, #4
     c7e:	f007 fd29 	bl	86d4 <memcpy>
}
     c82:	4638      	mov	r0, r7
     c84:	f8c6 8000 	str.w	r8, [r6]
     c88:	b003      	add	sp, #12
     c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     c8e:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
     c92:	483e      	ldr	r0, [pc, #248]	; (d8c <compress(void*)+0x300>)
     c94:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     c98:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     c9c:	616b      	str	r3, [r5, #20]
      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     c9e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     ca2:	4d37      	ldr	r5, [pc, #220]	; (d80 <compress(void*)+0x2f4>)
     ca4:	4423      	add	r3, r4
     ca6:	4629      	mov	r1, r5
     ca8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     cac:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
     cb0:	e001      	b.n	cb6 <compress(void*)+0x22a>
     cb2:	f851 2f04 	ldr.w	r2, [r1, #4]!
     cb6:	f843 2f04 	str.w	r2, [r3, #4]!
     cba:	4298      	cmp	r0, r3
     cbc:	d1f9      	bne.n	cb2 <compress(void*)+0x226>
     cbe:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
     cc0:	4832      	ldr	r0, [pc, #200]	; (d8c <compress(void*)+0x300>)
     cc2:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
     cc6:	6033      	str	r3, [r6, #0]
     cc8:	f000 fbf0 	bl	14ac <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     ccc:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
     cce:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
     cd0:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     cd2:	4a2f      	ldr	r2, [pc, #188]	; (d90 <compress(void*)+0x304>)
      if(!pushData(dout)) ret = 0;
     cd4:	bf18      	it	ne
     cd6:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
     cd8:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     cdc:	f8df e0a0 	ldr.w	lr, [pc, #160]	; d80 <compress(void*)+0x2f4>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     ce0:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     ce2:	f8df c0a8 	ldr.w	ip, [pc, #168]	; d8c <compress(void*)+0x300>
      while (ii < ndat) dout[nout++] = outData[ii++];
     ce6:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     ce8:	ea42 0203 	orr.w	r2, r2, r3
     cec:	f04f 0306 	mov.w	r3, #6
     cf0:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     cf2:	6033      	str	r3, [r6, #0]
     cf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     cf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     cfc:	e89e 0003 	ldmia.w	lr, {r0, r1}
     d00:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
     d04:	da8e      	bge.n	c24 <compress(void*)+0x198>
     d06:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
     d0a:	eb05 0189 	add.w	r1, r5, r9, lsl #2
     d0e:	f10c 0008 	add.w	r0, ip, #8
     d12:	4442      	add	r2, r8
     d14:	0092      	lsls	r2, r2, #2
     d16:	f007 fcdd 	bl	86d4 <memcpy>
     d1a:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
     d1e:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
     d20:	4443      	add	r3, r8
     d22:	6033      	str	r3, [r6, #0]
}
     d24:	b003      	add	sp, #12
     d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d2a:	2267      	movs	r2, #103	; 0x67
     d2c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
     d30:	f04f 0868 	mov.w	r8, #104	; 0x68
     d34:	2361      	movs	r3, #97	; 0x61
     d36:	9201      	str	r2, [sp, #4]
     d38:	2217      	movs	r2, #23
     d3a:	e6f3      	b.n	b24 <compress(void*)+0x98>
  static uint32_t t1 = micros();
     d3c:	f007 fc36 	bl	85ac <micros>
     d40:	4b09      	ldr	r3, [pc, #36]	; (d68 <compress(void*)+0x2dc>)
     d42:	4682      	mov	sl, r0
     d44:	6018      	str	r0, [r3, #0]
     d46:	2301      	movs	r3, #1
     d48:	602b      	str	r3, [r5, #0]
     d4a:	e6b2      	b.n	ab2 <compress(void*)+0x26>
  static uint32_t to = rtc_get();
     d4c:	f007 fd92 	bl	8874 <rtc_get>
     d50:	f8df b040 	ldr.w	fp, [pc, #64]	; d94 <compress(void*)+0x308>
     d54:	2301      	movs	r3, #1
     d56:	f8cb 0000 	str.w	r0, [fp]
     d5a:	602b      	str	r3, [r5, #0]
     d5c:	e6a1      	b.n	aa2 <compress(void*)+0x16>
     d5e:	bf00      	nop
     d60:	2000cbb8 	.word	0x2000cbb8
     d64:	2000cbb4 	.word	0x2000cbb4
     d68:	20020190 	.word	0x20020190
     d6c:	20008ea0 	.word	0x20008ea0
     d70:	20022574 	.word	0x20022574
     d74:	20021fc0 	.word	0x20021fc0
     d78:	20021f74 	.word	0x20021f74
     d7c:	2001fe9c 	.word	0x2001fe9c
     d80:	2001fc4c 	.word	0x2001fc4c
     d84:	20008ebc 	.word	0x20008ebc
     d88:	20020198 	.word	0x20020198
     d8c:	2001f9cc 	.word	0x2001f9cc
     d90:	ffff0000 	.word	0xffff0000
     d94:	20020194 	.word	0x20020194

00000d98 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     d98:	2000      	movs	r0, #0
     d9a:	4770      	bx	lr

00000d9c <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     d9c:	4770      	bx	lr
     d9e:	bf00      	nop

00000da0 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     da0:	4b04      	ldr	r3, [pc, #16]	; (db4 <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     da2:	b510      	push	{r4, lr}
     da4:	4604      	mov	r4, r0
     da6:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     daa:	f003 fde9 	bl	4980 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     dae:	4620      	mov	r0, r4
     db0:	bd10      	pop	{r4, pc}
     db2:	bf00      	nop
     db4:	20000984 	.word	0x20000984

00000db8 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
     db8:	6c83      	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     dba:	b500      	push	{lr}
     dbc:	b083      	sub	sp, #12
     dbe:	b163      	cbz	r3, dda <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     dc0:	2201      	movs	r2, #1
     dc2:	f10d 0107 	add.w	r1, sp, #7
     dc6:	4618      	mov	r0, r3
     dc8:	f002 fc78 	bl	36bc <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     dcc:	2801      	cmp	r0, #1
     dce:	d10c      	bne.n	dea <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     dd0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     dd4:	b003      	add	sp, #12
     dd6:	f85d fb04 	ldr.w	pc, [sp], #4
     dda:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     ddc:	b128      	cbz	r0, dea <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     dde:	2201      	movs	r2, #1
     de0:	f10d 0107 	add.w	r1, sp, #7
     de4:	f000 ff8a 	bl	1cfc <ExFatFile::read(void*, unsigned int)>
     de8:	e7f0      	b.n	dcc <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     dea:	f04f 30ff 	mov.w	r0, #4294967295
     dee:	e7f1      	b.n	dd4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000df0 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     df0:	6c83      	ldr	r3, [r0, #72]	; 0x48
     df2:	b113      	cbz	r3, dfa <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     df4:	4618      	mov	r0, r3
     df6:	f002 bd35 	b.w	3864 <FatFile::peek()>
     dfa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     dfc:	b108      	cbz	r0, e02 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     dfe:	f001 b84d 	b.w	1e9c <ExFatFile::peek()>
  }
     e02:	f04f 30ff 	mov.w	r0, #4294967295
     e06:	4770      	bx	lr

00000e08 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     e08:	6c83      	ldr	r3, [r0, #72]	; 0x48
     e0a:	b153      	cbz	r3, e22 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     e0c:	7818      	ldrb	r0, [r3, #0]
     e0e:	f010 0008 	ands.w	r0, r0, #8
     e12:	d00d      	beq.n	e30 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     e14:	69d8      	ldr	r0, [r3, #28]
     e16:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     e18:	1ac0      	subs	r0, r0, r3
     e1a:	bf48      	it	mi
     e1c:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     e20:	4770      	bx	lr
     e22:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     e24:	b1a3      	cbz	r3, e50 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     e26:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     e2a:	f010 0008 	ands.w	r0, r0, #8
     e2e:	d100      	bne.n	e32 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     e30:	4770      	bx	lr
     e32:	6918      	ldr	r0, [r3, #16]
     e34:	6819      	ldr	r1, [r3, #0]
     e36:	695a      	ldr	r2, [r3, #20]
     e38:	1a40      	subs	r0, r0, r1
     e3a:	685b      	ldr	r3, [r3, #4]
     e3c:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     e40:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     e44:	f173 0300 	sbcs.w	r3, r3, #0
     e48:	d3f2      	bcc.n	e30 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     e4a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     e4e:	4770      	bx	lr
     e50:	4618      	mov	r0, r3
    return BaseFile::available();
     e52:	e7ed      	b.n	e30 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000e54 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
     e54:	6c83      	ldr	r3, [r0, #72]	; 0x48
     e56:	b113      	cbz	r3, e5e <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     e58:	4618      	mov	r0, r3
     e5a:	f002 be03 	b.w	3a64 <FatFile::sync()>
     e5e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
     e60:	b108      	cbz	r0, e66 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     e62:	f001 bbdd 	b.w	2620 <ExFatFile::sync()>
  }
     e66:	4770      	bx	lr

00000e68 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     e68:	6c83      	ldr	r3, [r0, #72]	; 0x48
     e6a:	b113      	cbz	r3, e72 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     e6c:	4618      	mov	r0, r3
     e6e:	f002 bdff 	b.w	3a70 <FatFile::write(void const*, unsigned int)>
     e72:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     e74:	b108      	cbz	r0, e7a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     e76:	f001 bd69 	b.w	294c <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     e7a:	4770      	bx	lr

00000e7c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     e7c:	b500      	push	{lr}
    return m_fFile ? m_fFile->write(buf, count) :
     e7e:	6c83      	ldr	r3, [r0, #72]	; 0x48
     e80:	b083      	sub	sp, #12
     e82:	f88d 1007 	strb.w	r1, [sp, #7]
     e86:	b143      	cbz	r3, e9a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     e88:	2201      	movs	r2, #1
     e8a:	f10d 0107 	add.w	r1, sp, #7
     e8e:	4618      	mov	r0, r3
     e90:	f002 fdee 	bl	3a70 <FatFile::write(void const*, unsigned int)>
  }
     e94:	b003      	add	sp, #12
     e96:	f85d fb04 	ldr.w	pc, [sp], #4
     e9a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     e9c:	2800      	cmp	r0, #0
     e9e:	d0f9      	beq.n	e94 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     ea0:	2201      	movs	r2, #1
     ea2:	f10d 0107 	add.w	r1, sp, #7
     ea6:	f001 fd51 	bl	294c <ExFatFile::write(void const*, unsigned int)>
     eaa:	b003      	add	sp, #12
     eac:	f85d fb04 	ldr.w	pc, [sp], #4

00000eb0 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     eb0:	b538      	push	{r3, r4, r5, lr}
     eb2:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     eb4:	b149      	cbz	r1, eca <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
     eb6:	4608      	mov	r0, r1
     eb8:	460d      	mov	r5, r1
     eba:	f00c f9c1 	bl	d240 <strlen>
     ebe:	6823      	ldr	r3, [r4, #0]
     ec0:	4602      	mov	r2, r0
     ec2:	4629      	mov	r1, r5
     ec4:	685b      	ldr	r3, [r3, #4]
     ec6:	4620      	mov	r0, r4
     ec8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     eca:	4620      	mov	r0, r4
     ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     ed0:	f007 b868 	b.w	7fa4 <Print::println()>

00000ed4 <filing_init()>:
    *time = FS_TIME(t.hour,t.min,t.sec);
    *ms10 = 0;
}

int16_t filing_init(void)
{
     ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     ed6:	4b23      	ldr	r3, [pc, #140]	; (f64 <filing_init()+0x90>)
     ed8:	2505      	movs	r5, #5
     eda:	4c23      	ldr	r4, [pc, #140]	; (f68 <filing_init()+0x94>)
     edc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
     ee0:	4a22      	ldr	r2, [pc, #136]	; (f6c <filing_init()+0x98>)
     ee2:	f504 6692 	add.w	r6, r4, #1168	; 0x490
     ee6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     eea:	4f21      	ldr	r7, [pc, #132]	; (f70 <filing_init()+0x9c>)
     eec:	6013      	str	r3, [r2, #0]
    sdioConfigBackup = sdioConfig;
     eee:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
     ef0:	22ff      	movs	r2, #255	; 0xff
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     ef2:	4630      	mov	r0, r6
     ef4:	4619      	mov	r1, r3
     ef6:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     efa:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
     efe:	f005 f98b 	bl	6218 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     f02:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     f04:	f8c4 648c 	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     f08:	f004 fc7c 	bl	5804 <SdioCard::errorCode() const>
     f0c:	4602      	mov	r2, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     f0e:	2301      	movs	r3, #1
     f10:	4620      	mov	r0, r4
    return m_card && !m_card->errorCode();
     f12:	b98a      	cbnz	r2, f38 <filing_init()+0x64>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     f14:	461a      	mov	r2, r3
     f16:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
     f1a:	f003 fd9f 	bl	4a5c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     f1e:	b158      	cbz	r0, f38 <filing_init()+0x64>
     f20:	2111      	movs	r1, #17
     f22:	4814      	ldr	r0, [pc, #80]	; (f74 <filing_init()+0xa0>)
     f24:	f009 fb76 	bl	a614 <usb_serial_write>
     f28:	4813      	ldr	r0, [pc, #76]	; (f78 <filing_init()+0xa4>)
     f2a:	f007 f83b 	bl	7fa4 <Print::println()>

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
     f2e:	2301      	movs	r3, #1
     f30:	4a12      	ldr	r2, [pc, #72]	; (f7c <filing_init()+0xa8>)
      return 1;
     f32:	4618      	mov	r0, r3
      haveStore=1;
     f34:	6013      	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
     f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f38:	210f      	movs	r1, #15
     f3a:	4638      	mov	r0, r7
     f3c:	f009 fb6a 	bl	a614 <usb_serial_write>
     f40:	480d      	ldr	r0, [pc, #52]	; (f78 <filing_init()+0xa4>)
     f42:	f007 f82f 	bl	7fa4 <Print::println()>
      delay(100);
     f46:	2064      	movs	r0, #100	; 0x64
     f48:	f007 fadc 	bl	8504 <delay>
  for(int ii=0; ii<5;ii++)
     f4c:	3d01      	subs	r5, #1
     f4e:	d1ce      	bne.n	eee <filing_init()+0x1a>
     f50:	211b      	movs	r1, #27
     f52:	480b      	ldr	r0, [pc, #44]	; (f80 <filing_init()+0xac>)
     f54:	f009 fb5e 	bl	a614 <usb_serial_write>
     f58:	4807      	ldr	r0, [pc, #28]	; (f78 <filing_init()+0xa4>)
     f5a:	f007 f823 	bl	7fa4 <Print::println()>
  return 0;
     f5e:	4628      	mov	r0, r5
}
     f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f62:	bf00      	nop
     f64:	401f4400 	.word	0x401f4400
     f68:	20022094 	.word	0x20022094
     f6c:	2000c7f0 	.word	0x2000c7f0
     f70:	200004d0 	.word	0x200004d0
     f74:	200004bc 	.word	0x200004bc
     f78:	200088bc 	.word	0x200088bc
     f7c:	2002174c 	.word	0x2002174c
     f80:	200004e0 	.word	0x200004e0

00000f84 <makeHeader(long*)>:


int16_t makeHeader(int32_t *header)
{
     f84:	b530      	push	{r4, r5, lr}
     f86:	b089      	sub	sp, #36	; 0x24
     f88:	4604      	mov	r4, r0

    header[5] = 12;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = FSAMP;
    header[8] = NCH;
    header[9] = t_acq;
     f8a:	4d1c      	ldr	r5, [pc, #112]	; (ffc <makeHeader(long*)+0x78>)
    rtc_get_datetime(&t);
     f8c:	a806      	add	r0, sp, #24
     f8e:	f000 fbb9 	bl	1704 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
     f92:	f99d 001f 	ldrsb.w	r0, [sp, #31]
     f96:	f99d 301e 	ldrsb.w	r3, [sp, #30]
     f9a:	f99d 101d 	ldrsb.w	r1, [sp, #29]
     f9e:	f99d 201b 	ldrsb.w	r2, [sp, #27]
     fa2:	e9cd 3003 	strd	r3, r0, [sp, #12]
     fa6:	f99d 001a 	ldrsb.w	r0, [sp, #26]
     faa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     fae:	9000      	str	r0, [sp, #0]
     fb0:	4620      	mov	r0, r4
     fb2:	e9cd 2101 	strd	r2, r1, [sp, #4]
     fb6:	4a12      	ldr	r2, [pc, #72]	; (1000 <makeHeader(long*)+0x7c>)
     fb8:	4912      	ldr	r1, [pc, #72]	; (1004 <makeHeader(long*)+0x80>)
     fba:	f00b fc59 	bl	c870 <sprintf>
    header[10] = t_on;
     fbe:	4a12      	ldr	r2, [pc, #72]	; (1008 <makeHeader(long*)+0x84>)
    header[11] = t_off;
     fc0:	4b12      	ldr	r3, [pc, #72]	; (100c <makeHeader(long*)+0x88>)
    header[8] = NCH;
     fc2:	2001      	movs	r0, #1
    header[9] = t_acq;
     fc4:	682d      	ldr	r5, [r5, #0]
    header[10] = t_on;
     fc6:	6812      	ldr	r2, [r2, #0]
    header[6] = SerNum;      // serial number
     fc8:	4911      	ldr	r1, [pc, #68]	; (1010 <makeHeader(long*)+0x8c>)
    header[11] = t_off;
     fca:	681b      	ldr	r3, [r3, #0]
    header[6] = SerNum;      // serial number
     fcc:	6809      	ldr	r1, [r1, #0]
    header[9] = t_acq;
     fce:	6265      	str	r5, [r4, #36]	; 0x24
    header[5] = 12;          // SW version
     fd0:	250c      	movs	r5, #12
    header[6] = SerNum;      // serial number
     fd2:	61a1      	str	r1, [r4, #24]
    header[7] = FSAMP;
     fd4:	f64a 4144 	movw	r1, #44100	; 0xac44
    header[5] = 12;          // SW version
     fd8:	6165      	str	r5, [r4, #20]
    header[8] = NCH;
     fda:	6220      	str	r0, [r4, #32]
    header[7] = FSAMP;
     fdc:	61e1      	str	r1, [r4, #28]
    header[11] = t_off;
     fde:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    header[12] = PROC_MODE;
     fe2:	2300      	movs	r3, #0
    header[13] = shift;
     fe4:	4a0b      	ldr	r2, [pc, #44]	; (1014 <makeHeader(long*)+0x90>)
    header[12] = PROC_MODE;
     fe6:	6323      	str	r3, [r4, #48]	; 0x30

    header[127]=0x55555555;
     fe8:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
    header[13] = shift;
     fec:	f9b2 2000 	ldrsh.w	r2, [r2]
    header[127]=0x55555555;
     ff0:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
    header[13] = shift;
     ff4:	6362      	str	r2, [r4, #52]	; 0x34
    return 1;
}
     ff6:	b009      	add	sp, #36	; 0x24
     ff8:	bd30      	pop	{r4, r5, pc}
     ffa:	bf00      	nop
     ffc:	20008e98 	.word	0x20008e98
    1000:	20000498 	.word	0x20000498
    1004:	200004a0 	.word	0x200004a0
    1008:	20008e9c 	.word	0x20008e9c
    100c:	2002256c 	.word	0x2002256c
    1010:	2000c7f0 	.word	0x2000c7f0
    1014:	20008ebc 	.word	0x20008ebc

00001018 <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
    1018:	b530      	push	{r4, r5, lr}
    101a:	b087      	sub	sp, #28
    101c:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    101e:	a804      	add	r0, sp, #16
    1020:	f000 fb70 	bl	1704 <rtc_get_datetime(datetime_t*)>
  if(h==ho) return 0;
    1024:	4913      	ldr	r1, [pc, #76]	; (1074 <newDirectory(char*)+0x5c>)

    if(newHour(t.hour))
    1026:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(h==ho) return 0;
    102a:	680b      	ldr	r3, [r1, #0]
    102c:	429a      	cmp	r2, r3
    102e:	d01e      	beq.n	106e <newDirectory(char*)+0x56>
    {   
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    1030:	f99d 0012 	ldrsb.w	r0, [sp, #18]
    1034:	f99d 5013 	ldrsb.w	r5, [sp, #19]
    1038:	4b0f      	ldr	r3, [pc, #60]	; (1078 <newDirectory(char*)+0x60>)
    103a:	e9cd 5202 	strd	r5, r2, [sp, #8]
    103e:	681b      	ldr	r3, [r3, #0]
    1040:	9001      	str	r0, [sp, #4]
    1042:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  ho=h;
    1046:	600a      	str	r2, [r1, #0]
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    1048:	4a0c      	ldr	r2, [pc, #48]	; (107c <newDirectory(char*)+0x64>)
    104a:	490d      	ldr	r1, [pc, #52]	; (1080 <newDirectory(char*)+0x68>)
    104c:	9000      	str	r0, [sp, #0]
    104e:	4620      	mov	r0, r4
    1050:	f00b fc0e 	bl	c870 <sprintf>
            DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
        //
        Serial.println(); Serial.print(dirName);
    1054:	480b      	ldr	r0, [pc, #44]	; (1084 <newDirectory(char*)+0x6c>)
    1056:	f006 ffa5 	bl	7fa4 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    105a:	4620      	mov	r0, r4
    105c:	f00c f8f0 	bl	d240 <strlen>
    1060:	4601      	mov	r1, r0
    1062:	4620      	mov	r0, r4
    1064:	f009 fad6 	bl	a614 <usb_serial_write>
        return 1;   // have new directory
    1068:	2001      	movs	r0, #1
    }
    return 0;       // keep old directory

}
    106a:	b007      	add	sp, #28
    106c:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
    106e:	2000      	movs	r0, #0
}
    1070:	b007      	add	sp, #28
    1072:	bd30      	pop	{r4, r5, pc}
    1074:	2002018c 	.word	0x2002018c
    1078:	2000c7f0 	.word	0x2000c7f0
    107c:	20000518 	.word	0x20000518
    1080:	2000051c 	.word	0x2000051c
    1084:	200088bc 	.word	0x200088bc

00001088 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    1088:	b510      	push	{r4, lr}
    108a:	b084      	sub	sp, #16
    108c:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    108e:	a802      	add	r0, sp, #8
    1090:	f000 fb38 	bl	1704 <rtc_get_datetime(datetime_t*)>
    sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    1094:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    1098:	f99d 100e 	ldrsb.w	r1, [sp, #14]
    109c:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    10a0:	4a0b      	ldr	r2, [pc, #44]	; (10d0 <newFileName(char*)+0x48>)
    10a2:	e9cd 1000 	strd	r1, r0, [sp]
    10a6:	490b      	ldr	r1, [pc, #44]	; (10d4 <newFileName(char*)+0x4c>)
    10a8:	4620      	mov	r0, r4
    10aa:	f00b fbe1 	bl	c870 <sprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    10ae:	480a      	ldr	r0, [pc, #40]	; (10d8 <newFileName(char*)+0x50>)
    10b0:	f006 ff78 	bl	7fa4 <Print::println()>
    10b4:	2102      	movs	r1, #2
    10b6:	4809      	ldr	r0, [pc, #36]	; (10dc <newFileName(char*)+0x54>)
    10b8:	f009 faac 	bl	a614 <usb_serial_write>
    10bc:	4620      	mov	r0, r4
    10be:	f00c f8bf 	bl	d240 <strlen>
    10c2:	4601      	mov	r1, r0
    10c4:	4620      	mov	r0, r4
    10c6:	f009 faa5 	bl	a614 <usb_serial_write>
    return 1;
}
    10ca:	2001      	movs	r0, #1
    10cc:	b004      	add	sp, #16
    10ce:	bd10      	pop	{r4, pc}
    10d0:	200004fc 	.word	0x200004fc
    10d4:	20000500 	.word	0x20000500
    10d8:	200088bc 	.word	0x200088bc
    10dc:	20000514 	.word	0x20000514

000010e0 <storeData(short)>:
static char fileName[80];
static int32_t fileHeader[128];

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    10e0:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    10e2:	4604      	mov	r4, r0
{
    10e4:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    10e6:	2800      	cmp	r0, #0
    10e8:	d03a      	beq.n	1160 <storeData(short)+0x80>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    10ea:	2801      	cmp	r0, #1
    10ec:	d015      	beq.n	111a <storeData(short)+0x3a>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    10ee:	2802      	cmp	r0, #2
    10f0:	f000 80c0 	beq.w	1274 <storeData(short)+0x194>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        disk_count++;
    }    

    // following is done independent of data availability
    if(status==DOCLOSE) // should close file
    10f4:	2803      	cmp	r0, #3
    10f6:	f000 80b1 	beq.w	125c <storeData(short)+0x17c>
            file.close();
        }
        status = CLOSED;
    }
    //
    if(status==MUSTSTOP) // should close file and stop
    10fa:	2804      	cmp	r0, #4
    10fc:	d10b      	bne.n	1116 <storeData(short)+0x36>
  bool isOpen() const {return m_fFile || m_xFile;}
    10fe:	4b86      	ldr	r3, [pc, #536]	; (1318 <storeData(short)+0x238>)
    1100:	6c98      	ldr	r0, [r3, #72]	; 0x48
    1102:	2800      	cmp	r0, #0
    1104:	f000 80f2 	beq.w	12ec <storeData(short)+0x20c>
    return m_fFile ? m_fFile->sync() :
    1108:	f002 fcac 	bl	3a64 <FatFile::sync()>
    {   if(file)
        {
            file.flush();
            file.close();
    110c:	4883      	ldr	r0, [pc, #524]	; (131c <storeData(short)+0x23c>)
    110e:	f003 fc37 	bl	4980 <FsBaseFile::close()>
        }
        status = STOPPED;
    1112:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return status;
}
    1116:	b014      	add	sp, #80	; 0x50
    1118:	bd70      	pop	{r4, r5, r6, pc}
    111a:	4c7f      	ldr	r4, [pc, #508]	; (1318 <storeData(short)+0x238>)
    {   makeHeader(fileHeader);
    111c:	4880      	ldr	r0, [pc, #512]	; (1320 <storeData(short)+0x240>)
    111e:	f7ff ff31 	bl	f84 <makeHeader(long*)>
    return m_fFile ? m_fFile->write(buf, count) :
    1122:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1124:	2800      	cmp	r0, #0
    1126:	d068      	beq.n	11fa <storeData(short)+0x11a>
    1128:	f44f 7200 	mov.w	r2, #512	; 0x200
    112c:	497c      	ldr	r1, [pc, #496]	; (1320 <storeData(short)+0x240>)
    112e:	f002 fc9f 	bl	3a70 <FatFile::write(void const*, unsigned int)>
        if(file.write((const void *)fileHeader,512) < 512) 
    1132:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1136:	d36b      	bcc.n	1210 <storeData(short)+0x130>
    1138:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    113a:	2800      	cmp	r0, #0
    113c:	f000 8090 	beq.w	1260 <storeData(short)+0x180>
    1140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1144:	4977      	ldr	r1, [pc, #476]	; (1324 <storeData(short)+0x244>)
    1146:	f002 fc93 	bl	3a70 <FatFile::write(void const*, unsigned int)>
    114a:	4605      	mov	r5, r0
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    114c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    1150:	d36a      	bcc.n	1228 <storeData(short)+0x148>
        disk_count++;
    1152:	4a75      	ldr	r2, [pc, #468]	; (1328 <storeData(short)+0x248>)
    1154:	2002      	movs	r0, #2
    1156:	6813      	ldr	r3, [r2, #0]
    1158:	3301      	adds	r3, #1
    115a:	6013      	str	r3, [r2, #0]
}
    115c:	b014      	add	sp, #80	; 0x50
    115e:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    1160:	4872      	ldr	r0, [pc, #456]	; (132c <storeData(short)+0x24c>)
    1162:	f7ff ff59 	bl	1018 <newDirectory(char*)>
    1166:	b1d8      	cbz	r0, 11a0 <storeData(short)+0xc0>
    return m_fVol ? m_fVol->exists(path) :
    1168:	4d71      	ldr	r5, [pc, #452]	; (1330 <storeData(short)+0x250>)
    116a:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    116e:	2a00      	cmp	r2, #0
    1170:	f000 8082 	beq.w	1278 <storeData(short)+0x198>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1174:	466e      	mov	r6, sp
    1176:	4611      	mov	r1, r2
    1178:	4623      	mov	r3, r4
    117a:	4a6c      	ldr	r2, [pc, #432]	; (132c <storeData(short)+0x24c>)
    117c:	4630      	mov	r0, r6
  FatFile() {}
    117e:	9400      	str	r4, [sp, #0]
    1180:	f002 fa76 	bl	3670 <FatFile::open(FatVolume*, char const*, int)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1184:	2800      	cmp	r0, #0
    1186:	f000 8084 	beq.w	1292 <storeData(short)+0x1b2>
    return m_fVol ? m_fVol->chdir(path) :
    118a:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    118e:	2800      	cmp	r0, #0
    1190:	f000 8095 	beq.w	12be <storeData(short)+0x1de>
    1194:	4965      	ldr	r1, [pc, #404]	; (132c <storeData(short)+0x24c>)
    1196:	f003 fb71 	bl	487c <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    119a:	2800      	cmp	r0, #0
    119c:	f000 8098 	beq.w	12d0 <storeData(short)+0x1f0>
        if(newFileName(fileName))
    11a0:	4864      	ldr	r0, [pc, #400]	; (1334 <storeData(short)+0x254>)
    11a2:	f7ff ff71 	bl	1088 <newFileName(char*)>
    11a6:	b328      	cbz	r0, 11f4 <storeData(short)+0x114>
            file = sd.open(fileName, FILE_WRITE); 
    11a8:	f244 2302 	movw	r3, #16898	; 0x4202
    11ac:	4a61      	ldr	r2, [pc, #388]	; (1334 <storeData(short)+0x254>)
    11ae:	4960      	ldr	r1, [pc, #384]	; (1330 <storeData(short)+0x250>)
    11b0:	4668      	mov	r0, sp
    11b2:	f003 fcc5 	bl	4b40 <FsVolume::open(char const*, int)>
class Print
    11b6:	4c58      	ldr	r4, [pc, #352]	; (1318 <storeData(short)+0x238>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    11b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
class StreamFile : public stream_t, public BaseFile {
    11bc:	f104 0010 	add.w	r0, r4, #16
    11c0:	7323      	strb	r3, [r4, #12]
    11c2:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    11c6:	e9c4 1201 	strd	r1, r2, [r4, #4]
    11ca:	a904      	add	r1, sp, #16
    11cc:	f003 fb7e 	bl	48cc <FsBaseFile::operator=(FsBaseFile const&)>
    11d0:	4b59      	ldr	r3, [pc, #356]	; (1338 <storeData(short)+0x258>)
  ~FsBaseFile() {close();}
    11d2:	a804      	add	r0, sp, #16
    11d4:	9300      	str	r3, [sp, #0]
    11d6:	f003 fbd3 	bl	4980 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    11da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    11dc:	2b00      	cmp	r3, #0
    11de:	d19d      	bne.n	111c <storeData(short)+0x3c>
    11e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    11e2:	2b00      	cmp	r3, #0
    11e4:	d19a      	bne.n	111c <storeData(short)+0x3c>
    11e6:	2111      	movs	r1, #17
    11e8:	4854      	ldr	r0, [pc, #336]	; (133c <storeData(short)+0x25c>)
    11ea:	f009 fa13 	bl	a614 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    11ee:	4854      	ldr	r0, [pc, #336]	; (1340 <storeData(short)+0x260>)
    11f0:	f006 fed8 	bl	7fa4 <Print::println()>
                return STOPPED; 
    11f4:	f04f 30ff 	mov.w	r0, #4294967295
    11f8:	e78d      	b.n	1116 <storeData(short)+0x36>
    11fa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    11fc:	2800      	cmp	r0, #0
    11fe:	d08a      	beq.n	1116 <storeData(short)+0x36>
    1200:	f44f 7200 	mov.w	r2, #512	; 0x200
    1204:	4946      	ldr	r1, [pc, #280]	; (1320 <storeData(short)+0x240>)
    1206:	f001 fba1 	bl	294c <ExFatFile::write(void const*, unsigned int)>
        if(file.write((const void *)fileHeader,512) < 512) 
    120a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    120e:	d293      	bcs.n	1138 <storeData(short)+0x58>
  bool isOpen() const {return m_fFile || m_xFile;}
    1210:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1212:	2800      	cmp	r0, #0
    1214:	d063      	beq.n	12de <storeData(short)+0x1fe>
    return m_fFile ? m_fFile->sync() :
    1216:	f002 fc25 	bl	3a64 <FatFile::sync()>
            file.close();
    121a:	4840      	ldr	r0, [pc, #256]	; (131c <storeData(short)+0x23c>)
    121c:	f003 fbb0 	bl	4980 <FsBaseFile::close()>
        status = CLOSED;
    1220:	2000      	movs	r0, #0
}
    1222:	b014      	add	sp, #80	; 0x50
    1224:	bd70      	pop	{r4, r5, r6, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
    1226:	4605      	mov	r5, r0
    1228:	2101      	movs	r1, #1
    122a:	4846      	ldr	r0, [pc, #280]	; (1344 <storeData(short)+0x264>)
    122c:	f009 f9f2 	bl	a614 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1230:	2300      	movs	r3, #0
    1232:	220a      	movs	r2, #10
    1234:	4629      	mov	r1, r5
    1236:	4842      	ldr	r0, [pc, #264]	; (1340 <storeData(short)+0x260>)
    1238:	f006 fede 	bl	7ff8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    123c:	2101      	movs	r1, #1
    123e:	4842      	ldr	r0, [pc, #264]	; (1348 <storeData(short)+0x268>)
    1240:	f009 f9e8 	bl	a614 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1244:	2102      	movs	r1, #2
    1246:	483e      	ldr	r0, [pc, #248]	; (1340 <storeData(short)+0x260>)
    1248:	f006 fea0 	bl	7f8c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    124c:	483c      	ldr	r0, [pc, #240]	; (1340 <storeData(short)+0x260>)
    124e:	f006 fea9 	bl	7fa4 <Print::println()>
        disk_count++;
    1252:	4a35      	ldr	r2, [pc, #212]	; (1328 <storeData(short)+0x248>)
    1254:	6813      	ldr	r3, [r2, #0]
    1256:	3301      	adds	r3, #1
    1258:	6013      	str	r3, [r2, #0]
    if(status==DOCLOSE) // should close file
    125a:	e7d9      	b.n	1210 <storeData(short)+0x130>
    125c:	4c2e      	ldr	r4, [pc, #184]	; (1318 <storeData(short)+0x238>)
    125e:	e7d7      	b.n	1210 <storeData(short)+0x130>
    1260:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    1262:	2800      	cmp	r0, #0
    1264:	d0df      	beq.n	1226 <storeData(short)+0x146>
    1266:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    126a:	492e      	ldr	r1, [pc, #184]	; (1324 <storeData(short)+0x244>)
    126c:	f001 fb6e 	bl	294c <ExFatFile::write(void const*, unsigned int)>
    1270:	4605      	mov	r5, r0
    1272:	e76b      	b.n	114c <storeData(short)+0x6c>
    1274:	4c28      	ldr	r4, [pc, #160]	; (1318 <storeData(short)+0x238>)
    1276:	e75f      	b.n	1138 <storeData(short)+0x58>
    1278:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    127c:	b1c1      	cbz	r1, 12b0 <storeData(short)+0x1d0>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    127e:	466e      	mov	r6, sp
    1280:	4613      	mov	r3, r2
  ExFatFile() {}
    1282:	920c      	str	r2, [sp, #48]	; 0x30
    1284:	4630      	mov	r0, r6
    1286:	4a29      	ldr	r2, [pc, #164]	; (132c <storeData(short)+0x24c>)
    1288:	f001 f8dc 	bl	2444 <ExFatFile::open(ExFatVolume*, char const*, int)>
    128c:	2800      	cmp	r0, #0
    128e:	f47f af7c 	bne.w	118a <storeData(short)+0xaa>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    1292:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    1296:	b37a      	cbz	r2, 12f8 <storeData(short)+0x218>
    1298:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    129a:	f502 6189 	add.w	r1, r2, #1096	; 0x448
    129e:	2301      	movs	r3, #1
    12a0:	4630      	mov	r0, r6
    12a2:	4a22      	ldr	r2, [pc, #136]	; (132c <storeData(short)+0x24c>)
    12a4:	9400      	str	r4, [sp, #0]
    12a6:	f002 f8eb 	bl	3480 <FatFile::mkdir(FatFile*, char const*, bool)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    12aa:	2800      	cmp	r0, #0
    12ac:	f47f af6d 	bne.w	118a <storeData(short)+0xaa>
    12b0:	4823      	ldr	r0, [pc, #140]	; (1340 <storeData(short)+0x260>)
    12b2:	4926      	ldr	r1, [pc, #152]	; (134c <storeData(short)+0x26c>)
    12b4:	f7ff fdfc 	bl	eb0 <Print::println(char const*) [clone .isra.0]>
    12b8:	f04f 30ff 	mov.w	r0, #4294967295
    12bc:	e72b      	b.n	1116 <storeData(short)+0x36>
    12be:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    12c2:	b128      	cbz	r0, 12d0 <storeData(short)+0x1f0>
    12c4:	4919      	ldr	r1, [pc, #100]	; (132c <storeData(short)+0x24c>)
    12c6:	f001 ff35 	bl	3134 <ExFatVolume::chdir(char const*)>
    12ca:	2800      	cmp	r0, #0
    12cc:	f47f af68 	bne.w	11a0 <storeData(short)+0xc0>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    12d0:	481b      	ldr	r0, [pc, #108]	; (1340 <storeData(short)+0x260>)
    12d2:	491f      	ldr	r1, [pc, #124]	; (1350 <storeData(short)+0x270>)
    12d4:	f7ff fdec 	bl	eb0 <Print::println(char const*) [clone .isra.0]>
    12d8:	f04f 30ff 	mov.w	r0, #4294967295
    12dc:	e71b      	b.n	1116 <storeData(short)+0x36>
  bool isOpen() const {return m_fFile || m_xFile;}
    12de:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    12e0:	2800      	cmp	r0, #0
    12e2:	f43f af18 	beq.w	1116 <storeData(short)+0x36>
           m_xFile ? m_xFile->sync() : false;
    12e6:	f001 f99b 	bl	2620 <ExFatFile::sync()>
    12ea:	e796      	b.n	121a <storeData(short)+0x13a>
  bool isOpen() const {return m_fFile || m_xFile;}
    12ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    12ee:	2800      	cmp	r0, #0
    12f0:	d080      	beq.n	11f4 <storeData(short)+0x114>
           m_xFile ? m_xFile->sync() : false;
    12f2:	f001 f995 	bl	2620 <ExFatFile::sync()>
    12f6:	e709      	b.n	110c <storeData(short)+0x2c>
    12f8:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    12fc:	2900      	cmp	r1, #0
    12fe:	d0d7      	beq.n	12b0 <storeData(short)+0x1d0>
    1300:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1302:	2301      	movs	r3, #1
    1304:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    1308:	4630      	mov	r0, r6
    130a:	4a08      	ldr	r2, [pc, #32]	; (132c <storeData(short)+0x24c>)
    130c:	f001 fa40 	bl	2790 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1310:	2800      	cmp	r0, #0
    1312:	d0cd      	beq.n	12b0 <storeData(short)+0x1d0>
    1314:	e739      	b.n	118a <storeData(short)+0xaa>
    1316:	bf00      	nop
    1318:	200216fc 	.word	0x200216fc
    131c:	2002170c 	.word	0x2002170c
    1320:	2000cbbc 	.word	0x2000cbbc
    1324:	200206d0 	.word	0x200206d0
    1328:	200216d0 	.word	0x200216d0
    132c:	2001fbfc 	.word	0x2001fbfc
    1330:	20022094 	.word	0x20022094
    1334:	2001fe4c 	.word	0x2001fe4c
    1338:	20000984 	.word	0x20000984
    133c:	200005e8 	.word	0x200005e8
    1340:	200088bc 	.word	0x200088bc
    1344:	200005fc 	.word	0x200005fc
    1348:	200086b4 	.word	0x200086b4
    134c:	200005d0 	.word	0x200005d0
    1350:	200005dc 	.word	0x200005dc

00001354 <saveData(short)>:
//
volatile uint32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    if(status==STOPPED) 
    1354:	1c43      	adds	r3, r0, #1
{
    1356:	b570      	push	{r4, r5, r6, lr}
    if(status==STOPPED) 
    1358:	d031      	beq.n	13be <saveData(short)+0x6a>
    { pullData(diskBuffer);
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    }
    if(status<CLOSED) return status; // we are stopped: don't do anything
    135a:	2800      	cmp	r0, #0
    135c:	4605      	mov	r5, r0
    135e:	db2c      	blt.n	13ba <saveData(short)+0x66>
  uint32_t tx=rtc_get();
    1360:	f007 fa88 	bl	8874 <rtc_get>
  tx = tx % t_acq;
    1364:	4b21      	ldr	r3, [pc, #132]	; (13ec <saveData(short)+0x98>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    1366:	2d01      	cmp	r5, #1
  tx = tx % t_acq;
    1368:	681b      	ldr	r3, [r3, #0]
    136a:	fbb0 f2f3 	udiv	r2, r0, r3
    136e:	fb02 0013 	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    1372:	4b1f      	ldr	r3, [pc, #124]	; (13f0 <saveData(short)+0x9c>)
    1374:	dd05      	ble.n	1382 <saveData(short)+0x2e>
    1376:	681a      	ldr	r2, [r3, #0]
    1378:	b11a      	cbz	r2, 1382 <saveData(short)+0x2e>
    137a:	681a      	ldr	r2, [r3, #0]
    137c:	4290      	cmp	r0, r2
    137e:	bf38      	it	cc
    1380:	2503      	movcc	r5, #3
  tx_=tx;
    1382:	6018      	str	r0, [r3, #0]

    int16_t oldStat=status;
    status=checkEndOfFile(status);
//    if(status != oldStat) {Serial.print(oldStat); Serial.print(" "); Serial.println(status);}

    if(getDataCount()>=NDBL)
    1384:	f000 f884 	bl	1490 <getDataCount()>
    1388:	2807      	cmp	r0, #7
    138a:	d916      	bls.n	13ba <saveData(short)+0x66>
    138c:	4c19      	ldr	r4, [pc, #100]	; (13f4 <saveData(short)+0xa0>)
    138e:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    {
      for(int ii=0; ii<NDBL; ii++) pullData(&diskBuffer[ii*NBUF_ACQ]);
    1392:	4620      	mov	r0, r4
    1394:	f504 7400 	add.w	r4, r4, #512	; 0x200
    1398:	f000 f8c4 	bl	1524 <pullData(unsigned long*)>
    139c:	42b4      	cmp	r4, r6
    139e:	d1f8      	bne.n	1392 <saveData(short)+0x3e>
    13a0:	4a15      	ldr	r2, [pc, #84]	; (13f8 <saveData(short)+0xa4>)
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    13a2:	2300      	movs	r3, #0
    13a4:	4815      	ldr	r0, [pc, #84]	; (13fc <saveData(short)+0xa8>)
    13a6:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13aa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    13ae:	3301      	adds	r3, #1
    13b0:	2b08      	cmp	r3, #8
    13b2:	d1f8      	bne.n	13a6 <saveData(short)+0x52>
      if(haveStore)
    13b4:	4b12      	ldr	r3, [pc, #72]	; (1400 <saveData(short)+0xac>)
    13b6:	681b      	ldr	r3, [r3, #0]
    13b8:	b993      	cbnz	r3, 13e0 <saveData(short)+0x8c>
        status=storeData(status);
    }
    return status;
}
    13ba:	4628      	mov	r0, r5
    13bc:	bd70      	pop	{r4, r5, r6, pc}
    { pullData(diskBuffer);
    13be:	480d      	ldr	r0, [pc, #52]	; (13f4 <saveData(short)+0xa0>)
    13c0:	f000 f8b0 	bl	1524 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    13c4:	4a0c      	ldr	r2, [pc, #48]	; (13f8 <saveData(short)+0xa4>)
    13c6:	2300      	movs	r3, #0
    13c8:	480c      	ldr	r0, [pc, #48]	; (13fc <saveData(short)+0xa8>)
    13ca:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13ce:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    13d2:	3301      	adds	r3, #1
    13d4:	2b08      	cmp	r3, #8
    13d6:	d1f8      	bne.n	13ca <saveData(short)+0x76>
    13d8:	f04f 35ff 	mov.w	r5, #4294967295
}
    13dc:	4628      	mov	r0, r5
    13de:	bd70      	pop	{r4, r5, r6, pc}
        status=storeData(status);
    13e0:	4628      	mov	r0, r5
}
    13e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        status=storeData(status);
    13e6:	f7ff be7b 	b.w	10e0 <storeData(short)>
    13ea:	bf00      	nop
    13ec:	20008e98 	.word	0x20008e98
    13f0:	20020180 	.word	0x20020180
    13f4:	200206d0 	.word	0x200206d0
    13f8:	200206cc 	.word	0x200206cc
    13fc:	20021f54 	.word	0x20021f54
    1400:	2002174c 	.word	0x2002174c

00001404 <_GLOBAL__sub_I_t_acq>:
  FsVolume() {}
    1404:	4819      	ldr	r0, [pc, #100]	; (146c <_GLOBAL__sub_I_t_acq+0x68>)
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    1406:	4b1a      	ldr	r3, [pc, #104]	; (1470 <_GLOBAL__sub_I_t_acq+0x6c>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1408:	491a      	ldr	r1, [pc, #104]	; (1474 <_GLOBAL__sub_I_t_acq+0x70>)
SdFs sd;
    140a:	4a1b      	ldr	r2, [pc, #108]	; (1478 <_GLOBAL__sub_I_t_acq+0x74>)
}
    140c:	b510      	push	{r4, lr}
    140e:	f8c0 34a4 	str.w	r3, [r0, #1188]	; 0x4a4
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    1412:	2329      	movs	r3, #41	; 0x29
    1414:	2400      	movs	r4, #0
    1416:	f8c0 1490 	str.w	r1, [r0, #1168]	; 0x490
    141a:	f880 34ad 	strb.w	r3, [r0, #1197]	; 0x4ad
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    141e:	2107      	movs	r1, #7
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    1420:	4b16      	ldr	r3, [pc, #88]	; (147c <_GLOBAL__sub_I_t_acq+0x78>)
    1422:	f8c0 4480 	str.w	r4, [r0, #1152]	; 0x480
    1426:	f8c0 4484 	str.w	r4, [r0, #1156]	; 0x484
class SdBase : public Vol {
    142a:	f8c0 448c 	str.w	r4, [r0, #1164]	; 0x48c
  SdioConfig() {}
    142e:	f8a0 4498 	strh.w	r4, [r0, #1176]	; 0x498
  SharedSpiCard() {}
    1432:	f880 44b1 	strb.w	r4, [r0, #1201]	; 0x4b1
  DedicatedSpiCard() {}
    1436:	f880 44b8 	strb.w	r4, [r0, #1208]	; 0x4b8
    143a:	f8c0 14a8 	str.w	r1, [r0, #1192]	; 0x4a8
    143e:	f880 44c8 	strb.w	r4, [r0, #1224]	; 0x4c8
SdFs sd;
    1442:	490f      	ldr	r1, [pc, #60]	; (1480 <_GLOBAL__sub_I_t_acq+0x7c>)
    1444:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    1448:	f009 fafc 	bl	aa44 <__aeabi_atexit>
	constexpr Print() : write_error(0) {}
    144c:	480d      	ldr	r0, [pc, #52]	; (1484 <_GLOBAL__sub_I_t_acq+0x80>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    144e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1452:	4b0d      	ldr	r3, [pc, #52]	; (1488 <_GLOBAL__sub_I_t_acq+0x84>)
    1454:	7304      	strb	r4, [r0, #12]
FsFile file;
    1456:	4a08      	ldr	r2, [pc, #32]	; (1478 <_GLOBAL__sub_I_t_acq+0x74>)
    1458:	6003      	str	r3, [r0, #0]
    145a:	e9c0 4101 	strd	r4, r1, [r0, #4]
  FsBaseFile() {}
    145e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    1462:	490a      	ldr	r1, [pc, #40]	; (148c <_GLOBAL__sub_I_t_acq+0x88>)
}
    1464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
FsFile file;
    1468:	f009 baec 	b.w	aa44 <__aeabi_atexit>
    146c:	20022094 	.word	0x20022094
    1470:	003d0900 	.word	0x003d0900
    1474:	20000ac4 	.word	0x20000ac4
    1478:	200088e8 	.word	0x200088e8
    147c:	200009d8 	.word	0x200009d8
    1480:	00000d9d 	.word	0x00000d9d
    1484:	200216fc 	.word	0x200216fc
    1488:	20000a70 	.word	0x20000a70
    148c:	00000da1 	.word	0x00000da1

00001490 <getDataCount()>:
  volatile int busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    1490:	4a04      	ldr	r2, [pc, #16]	; (14a4 <getDataCount()+0x14>)
    1492:	4b05      	ldr	r3, [pc, #20]	; (14a8 <getDataCount()+0x18>)
    1494:	6810      	ldr	r0, [r2, #0]
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	1ac0      	subs	r0, r0, r3
    149a:	bf48      	it	mi
    149c:	3080      	addmi	r0, #128	; 0x80
    149e:	b280      	uxth	r0, r0
    14a0:	4770      	bx	lr
    14a2:	bf00      	nop
    14a4:	20022570 	.word	0x20022570
    14a8:	20021750 	.word	0x20021750

000014ac <pushData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    14ac:	b470      	push	{r4, r5, r6}
    if ( (tail+1)%MAXBUF == head ) return 0;
    14ae:	4c19      	ldr	r4, [pc, #100]	; (1514 <pushData(unsigned long*)+0x68>)
    14b0:	4a19      	ldr	r2, [pc, #100]	; (1518 <pushData(unsigned long*)+0x6c>)
    14b2:	6823      	ldr	r3, [r4, #0]
    14b4:	6811      	ldr	r1, [r2, #0]
    14b6:	3301      	adds	r3, #1
    14b8:	425a      	negs	r2, r3
    14ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    14be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    14c2:	bf58      	it	pl
    14c4:	4253      	negpl	r3, r2
    14c6:	428b      	cmp	r3, r1
    14c8:	d020      	beq.n	150c <pushData(unsigned long*)+0x60>
    14ca:	4e14      	ldr	r6, [pc, #80]	; (151c <pushData(unsigned long*)+0x70>)
    while(busy); busy=1;
    14cc:	6833      	ldr	r3, [r6, #0]
    14ce:	2b00      	cmp	r3, #0
    14d0:	d1fc      	bne.n	14cc <pushData(unsigned long*)+0x20>
    14d2:	2201      	movs	r2, #1
    14d4:	1f01      	subs	r1, r0, #4
    14d6:	4d12      	ldr	r5, [pc, #72]	; (1520 <pushData(unsigned long*)+0x74>)
    14d8:	6032      	str	r2, [r6, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    14da:	6822      	ldr	r2, [r4, #0]
    14dc:	f851 0f04 	ldr.w	r0, [r1, #4]!
    14e0:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    14e4:	3301      	adds	r3, #1
    14e6:	2b80      	cmp	r3, #128	; 0x80
    14e8:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    14ec:	d1f5      	bne.n	14da <pushData(unsigned long*)+0x2e>
    tail = (tail+1)%MAXBUF;
    14ee:	6823      	ldr	r3, [r4, #0]
    busy=0;
    return 1; // signal success.
    14f0:	2001      	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    14f2:	3301      	adds	r3, #1
    14f4:	425a      	negs	r2, r3
    14f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    14fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    14fe:	bf58      	it	pl
    1500:	4253      	negpl	r3, r2
    busy=0;
    1502:	2200      	movs	r2, #0
    tail = (tail+1)%MAXBUF;
    1504:	6023      	str	r3, [r4, #0]
    busy=0;
    1506:	6032      	str	r2, [r6, #0]
  }
    1508:	bc70      	pop	{r4, r5, r6}
    150a:	4770      	bx	lr
    if ( (tail+1)%MAXBUF == head ) return 0;
    150c:	2000      	movs	r0, #0
  }
    150e:	bc70      	pop	{r4, r5, r6}
    1510:	4770      	bx	lr
    1512:	bf00      	nop
    1514:	20022570 	.word	0x20022570
    1518:	20021750 	.word	0x20021750
    151c:	200206cc 	.word	0x200206cc
    1520:	2000d1c0 	.word	0x2000d1c0

00001524 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    1524:	4b15      	ldr	r3, [pc, #84]	; (157c <pullData(unsigned long*)+0x58>)
  {
    1526:	b430      	push	{r4, r5}
    if ( head==tail ) return 0;
    1528:	4c15      	ldr	r4, [pc, #84]	; (1580 <pullData(unsigned long*)+0x5c>)
    152a:	6822      	ldr	r2, [r4, #0]
    152c:	681b      	ldr	r3, [r3, #0]
    152e:	429a      	cmp	r2, r3
    1530:	d020      	beq.n	1574 <pullData(unsigned long*)+0x50>
    1532:	4d14      	ldr	r5, [pc, #80]	; (1584 <pullData(unsigned long*)+0x60>)
    while(busy); busy=1;
    1534:	682b      	ldr	r3, [r5, #0]
    1536:	2b00      	cmp	r3, #0
    1538:	d1fc      	bne.n	1534 <pullData(unsigned long*)+0x10>
    153a:	2201      	movs	r2, #1
    153c:	1f01      	subs	r1, r0, #4
    153e:	4812      	ldr	r0, [pc, #72]	; (1588 <pullData(unsigned long*)+0x64>)
    1540:	602a      	str	r2, [r5, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    1542:	6822      	ldr	r2, [r4, #0]
    1544:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    1548:	3301      	adds	r3, #1
    154a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    154e:	2b80      	cmp	r3, #128	; 0x80
    1550:	f841 2f04 	str.w	r2, [r1, #4]!
    1554:	d1f5      	bne.n	1542 <pullData(unsigned long*)+0x1e>
    head = (head+1)%MAXBUF;
    1556:	6823      	ldr	r3, [r4, #0]
    busy=0;
    return 1;
    1558:	2001      	movs	r0, #1
    head = (head+1)%MAXBUF;
    155a:	3301      	adds	r3, #1
    155c:	425a      	negs	r2, r3
    155e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1562:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1566:	bf58      	it	pl
    1568:	4253      	negpl	r3, r2
    busy=0;
    156a:	2200      	movs	r2, #0
    head = (head+1)%MAXBUF;
    156c:	6023      	str	r3, [r4, #0]
    busy=0;
    156e:	602a      	str	r2, [r5, #0]
  }
    1570:	bc30      	pop	{r4, r5}
    1572:	4770      	bx	lr
    if ( head==tail ) return 0;
    1574:	2000      	movs	r0, #0
  }
    1576:	bc30      	pop	{r4, r5}
    1578:	4770      	bx	lr
    157a:	bf00      	nop
    157c:	20022570 	.word	0x20022570
    1580:	20021750 	.word	0x20021750
    1584:	200206cc 	.word	0x200206cc
    1588:	2000d1c0 	.word	0x2000d1c0

0000158c <time2date(unsigned long, datetime_t*)>:

  uint8_t year;
  uint8_t month, monthLength;
  unsigned long days;

  tm->sec = time % 60;
    158c:	4a54      	ldr	r2, [pc, #336]	; (16e0 <time2date(unsigned long, datetime_t*)+0x154>)
{
    158e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tm->sec = time % 60;
    1592:	fba2 4300 	umull	r4, r3, r2, r0

  tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1596:	f240 196d 	movw	r9, #365	; 0x16d
    159a:	4e52      	ldr	r6, [pc, #328]	; (16e4 <time2date(unsigned long, datetime_t*)+0x158>)
  tm->sec = time % 60;
    159c:	095b      	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    159e:	4f52      	ldr	r7, [pc, #328]	; (16e8 <time2date(unsigned long, datetime_t*)+0x15c>)
    15a0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 16fc <time2date(unsigned long, datetime_t*)+0x170>
  tm->min = time % 60;
    15a4:	fba2 4203 	umull	r4, r2, r2, r3
  tm->sec = time % 60;
    15a8:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
  tm->min = time % 60;
    15ac:	0952      	lsrs	r2, r2, #5
  tm->sec = time % 60;
    15ae:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
  tm->hour = time % 24;
    15b2:	4c4e      	ldr	r4, [pc, #312]	; (16ec <time2date(unsigned long, datetime_t*)+0x160>)
  tm->min = time % 60;
    15b4:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
  tm->hour = time % 24;
    15b8:	fba4 4e02 	umull	r4, lr, r4, r2
  tm->min = time % 60;
    15bc:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
  tm->sec = time % 60;
    15c0:	71c8      	strb	r0, [r1, #7]
  tm->hour = time % 24;
    15c2:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  tm->min = time % 60;
    15c6:	718b      	strb	r3, [r1, #6]
  tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    15c8:	f10e 0404 	add.w	r4, lr, #4
  tm->hour = time % 24;
    15cc:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
  tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    15d0:	4b47      	ldr	r3, [pc, #284]	; (16f0 <time2date(unsigned long, datetime_t*)+0x164>)
  tm->hour = time % 24;
    15d2:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
  tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    15d6:	fba3 0304 	umull	r0, r3, r3, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    15da:	2000      	movs	r0, #0
  tm->hour = time % 24;
    15dc:	714a      	strb	r2, [r1, #5]
  tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    15de:	1ae2      	subs	r2, r4, r3
    15e0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  days = 0;
    15e4:	4602      	mov	r2, r0
  tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    15e6:	089b      	lsrs	r3, r3, #2
    15e8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    15ec:	1ae4      	subs	r4, r4, r3
    15ee:	710c      	strb	r4, [r1, #4]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    15f0:	b2c3      	uxtb	r3, r0
    15f2:	f240 1c6d 	movw	ip, #365	; 0x16d
    15f6:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    15fa:	f013 0403 	ands.w	r4, r3, #3
    15fe:	fb06 f503 	mul.w	r5, r6, r3
    1602:	d108      	bne.n	1616 <time2date(unsigned long, datetime_t*)+0x8a>
    1604:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    1608:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    160c:	d303      	bcc.n	1616 <time2date(unsigned long, datetime_t*)+0x8a>
    160e:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    1612:	bf38      	it	cc
    1614:	46cc      	movcc	ip, r9
    1616:	4462      	add	r2, ip
    1618:	3001      	adds	r0, #1
    161a:	4596      	cmp	lr, r2
    161c:	d2e8      	bcs.n	15f0 <time2date(unsigned long, datetime_t*)+0x64>
    year++;
  }
  tm->year = year+YEAR0;
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    161e:	4d35      	ldr	r5, [pc, #212]	; (16f4 <time2date(unsigned long, datetime_t*)+0x168>)
  tm->year = year+YEAR0;
    1620:	800b      	strh	r3, [r1, #0]
  days -= LEAP_YEAR(year) ? 366 : 365;
    1622:	fba5 0503 	umull	r0, r5, r5, r3
    1626:	b3a4      	cbz	r4, 1692 <time2date(unsigned long, datetime_t*)+0x106>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1628:	096e      	lsrs	r6, r5, #5
    162a:	2764      	movs	r7, #100	; 0x64
    162c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1630:	09ed      	lsrs	r5, r5, #7
    1632:	fb07 3616 	mls	r6, r7, r6, r3
    1636:	fb00 3515 	mls	r5, r0, r5, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    163a:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    163e:	ebae 0e02 	sub.w	lr, lr, r2
    1642:	2300      	movs	r3, #0
    1644:	2201      	movs	r2, #1
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    1646:	4f2c      	ldr	r7, [pc, #176]	; (16f8 <time2date(unsigned long, datetime_t*)+0x16c>)
  time  -= days; // now it is days in this year, starting at 0
    1648:	4470      	add	r0, lr
  for (month=0; month<12; month++) {
    164a:	e00a      	b.n	1662 <time2date(unsigned long, datetime_t*)+0xd6>
    }
    
    if (time >= monthLength) {
    164c:	f813 c007 	ldrb.w	ip, [r3, r7]
    1650:	4584      	cmp	ip, r0
    1652:	d837      	bhi.n	16c4 <time2date(unsigned long, datetime_t*)+0x138>
  for (month=0; month<12; month++) {
    1654:	2a0c      	cmp	r2, #12
      time -= monthLength;
    1656:	eba0 000c 	sub.w	r0, r0, ip
  for (month=0; month<12; month++) {
    165a:	d012      	beq.n	1682 <time2date(unsigned long, datetime_t*)+0xf6>
    165c:	3201      	adds	r2, #1
    165e:	3301      	adds	r3, #1
    1660:	b2d2      	uxtb	r2, r2
    if (month==1) { // february
    1662:	2b01      	cmp	r3, #1
    1664:	fa5f fe83 	uxtb.w	lr, r3
    1668:	d1f0      	bne.n	164c <time2date(unsigned long, datetime_t*)+0xc0>
      if (LEAP_YEAR(year)) {
    166a:	b91c      	cbnz	r4, 1674 <time2date(unsigned long, datetime_t*)+0xe8>
    166c:	b1f6      	cbz	r6, 16ac <time2date(unsigned long, datetime_t*)+0x120>
    166e:	f04f 0c1d 	mov.w	ip, #29
    1672:	e001      	b.n	1678 <time2date(unsigned long, datetime_t*)+0xec>
    1674:	f04f 0c1c 	mov.w	ip, #28
    if (time >= monthLength) {
    1678:	4560      	cmp	r0, ip
    167a:	d32d      	bcc.n	16d8 <time2date(unsigned long, datetime_t*)+0x14c>
      time -= monthLength;
    167c:	eba0 000c 	sub.w	r0, r0, ip
  for (month=0; month<12; month++) {
    1680:	e7ec      	b.n	165c <time2date(unsigned long, datetime_t*)+0xd0>
    1682:	f04f 0e0d 	mov.w	lr, #13
    } else {
        break;
    }
  }
  tm->month = month + 1;  // jan is month 1  
  tm->day = time + 1;     // day of month
    1686:	3001      	adds	r0, #1
  tm->month = month + 1;  // jan is month 1  
    1688:	f881 e002 	strb.w	lr, [r1, #2]
  tm->day = time + 1;     // day of month
    168c:	70c8      	strb	r0, [r1, #3]
}
    168e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  days -= LEAP_YEAR(year) ? 366 : 365;
    1692:	2064      	movs	r0, #100	; 0x64
    1694:	096e      	lsrs	r6, r5, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1696:	09ed      	lsrs	r5, r5, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    1698:	fb00 3616 	mls	r6, r0, r6, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    169c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    16a0:	fb00 3515 	mls	r5, r0, r5, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    16a4:	b14e      	cbz	r6, 16ba <time2date(unsigned long, datetime_t*)+0x12e>
    16a6:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    16aa:	e7c8      	b.n	163e <time2date(unsigned long, datetime_t*)+0xb2>
      if (LEAP_YEAR(year)) {
    16ac:	2d00      	cmp	r5, #0
    16ae:	bf14      	ite	ne
    16b0:	f04f 0c1c 	movne.w	ip, #28
    16b4:	f04f 0c1d 	moveq.w	ip, #29
    16b8:	e7de      	b.n	1678 <time2date(unsigned long, datetime_t*)+0xec>
  days -= LEAP_YEAR(year) ? 366 : 365;
    16ba:	2d00      	cmp	r5, #0
    16bc:	d1bd      	bne.n	163a <time2date(unsigned long, datetime_t*)+0xae>
    16be:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    16c2:	e7bc      	b.n	163e <time2date(unsigned long, datetime_t*)+0xb2>
  for (month=0; month<12; month++) {
    16c4:	f10e 0e01 	add.w	lr, lr, #1
  tm->day = time + 1;     // day of month
    16c8:	3001      	adds	r0, #1
  tm->month = month + 1;  // jan is month 1  
    16ca:	fa4f fe8e 	sxtb.w	lr, lr
  tm->day = time + 1;     // day of month
    16ce:	70c8      	strb	r0, [r1, #3]
  tm->month = month + 1;  // jan is month 1  
    16d0:	f881 e002 	strb.w	lr, [r1, #2]
}
    16d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (time >= monthLength) {
    16d8:	f04f 0e02 	mov.w	lr, #2
    16dc:	e7d3      	b.n	1686 <time2date(unsigned long, datetime_t*)+0xfa>
    16de:	bf00      	nop
    16e0:	88888889 	.word	0x88888889
    16e4:	c28f5c29 	.word	0xc28f5c29
    16e8:	028f5c28 	.word	0x028f5c28
    16ec:	aaaaaaab 	.word	0xaaaaaaab
    16f0:	24924925 	.word	0x24924925
    16f4:	51eb851f 	.word	0x51eb851f
    16f8:	2000080c 	.word	0x2000080c
    16fc:	00a3d70a 	.word	0x00a3d70a

00001700 <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;

  }
    1700:	2001      	movs	r0, #1
    1702:	4770      	bx	lr

00001704 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    1704:	b500      	push	{lr}
    1706:	b083      	sub	sp, #12
    1708:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    170a:	f007 f8b3 	bl	8874 <rtc_get>
    170e:	9901      	ldr	r1, [sp, #4]
    1710:	f7ff ff3c 	bl	158c <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    1714:	2001      	movs	r0, #1
    1716:	b003      	add	sp, #12
    1718:	f85d fb04 	ldr.w	pc, [sp], #4

0000171c <rtc_set_datetime(datetime_t*)>:
  bool rtc_set_datetime(datetime_t *t)
  {
    return 1;
  }
    171c:	2001      	movs	r0, #1
    171e:	4770      	bx	lr

00001720 <mgetRTC(unsigned char*, unsigned short)>:
{
    1720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1722:	4c1d      	ldr	r4, [pc, #116]	; (1798 <mgetRTC(unsigned char*, unsigned short)+0x78>)
		transmitting = 1;
    1724:	2701      	movs	r7, #1
		txBuffer[0] = (address << 1);
    1726:	23d0      	movs	r3, #208	; 0xd0
    1728:	460e      	mov	r6, r1
    172a:	4605      	mov	r5, r0
  Wire.write(reg);
    172c:	2100      	movs	r1, #0
    172e:	4620      	mov	r0, r4
    1730:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		transmitting = 1;
    1734:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		txBufferLength = 1;
    1738:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
    173c:	f005 fd7a 	bl	7234 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    1740:	4639      	mov	r1, r7
    1742:	4620      	mov	r0, r4
    1744:	f005 fe84 	bl	7450 <TwoWire::endTransmission(unsigned char)>
	uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop);
	uint8_t requestFrom(uint8_t address, uint8_t quantity, bool sendStop) {
		return requestFrom(address, quantity, (uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
    1748:	463b      	mov	r3, r7
    174a:	b2f2      	uxtb	r2, r6
    174c:	2168      	movs	r1, #104	; 0x68
    174e:	4620      	mov	r0, r4
    1750:	f005 fefc 	bl	754c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
  for(int ii=0;ii<nbuf;ii++) buffer[ii]=Wire.read();
    1754:	b1e6      	cbz	r6, 1790 <mgetRTC(unsigned char*, unsigned short)+0x70>
    1756:	4628      	mov	r0, r5
    1758:	1971      	adds	r1, r6, r5
    175a:	462a      	mov	r2, r5
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    175c:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
    1760:	f894 60a3 	ldrb.w	r6, [r4, #163]	; 0xa3
    1764:	429e      	cmp	r6, r3
		return rxBuffer[rxBufferIndex++];
    1766:	f103 0601 	add.w	r6, r3, #1
    176a:	4423      	add	r3, r4
		if (rxBufferIndex >= rxBufferLength) return -1;
    176c:	d912      	bls.n	1794 <mgetRTC(unsigned char*, unsigned short)+0x74>
		return rxBuffer[rxBufferIndex++];
    176e:	7e9b      	ldrb	r3, [r3, #26]
    1770:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
    1774:	f802 3b01 	strb.w	r3, [r2], #1
    1778:	428a      	cmp	r2, r1
    177a:	d1ef      	bne.n	175c <mgetRTC(unsigned char*, unsigned short)+0x3c>
  for(int ii=0;ii<nbuf;ii++) buffer[ii]=bcd2bin(buffer[ii]);
    177c:	7803      	ldrb	r3, [r0, #0]
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    177e:	091a      	lsrs	r2, r3, #4
    1780:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
    1784:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  for(int ii=0;ii<nbuf;ii++) buffer[ii]=bcd2bin(buffer[ii]);
    1788:	f800 3b01 	strb.w	r3, [r0], #1
    178c:	4288      	cmp	r0, r1
    178e:	d1f5      	bne.n	177c <mgetRTC(unsigned char*, unsigned short)+0x5c>
}
    1790:	4628      	mov	r0, r5
    1792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1794:	23ff      	movs	r3, #255	; 0xff
    1796:	e7ed      	b.n	1774 <mgetRTC(unsigned char*, unsigned short)+0x54>
    1798:	2000c7f4 	.word	0x2000c7f4

0000179c <i2c_read_register(unsigned char, unsigned char) [clone .constprop.0]>:
static uint8_t i2c_read_register(uint8_t address, uint8_t reg) 
    179c:	b570      	push	{r4, r5, r6, lr}
		transmitting = 1;
    179e:	2601      	movs	r6, #1
    17a0:	4605      	mov	r5, r0
		txBuffer[0] = (address << 1);
    17a2:	4c12      	ldr	r4, [pc, #72]	; (17ec <i2c_read_register(unsigned char, unsigned char) [clone .constprop.0]+0x50>)
  Wire.write(reg);
    17a4:	210f      	movs	r1, #15
    17a6:	fa05 f306 	lsl.w	r3, r5, r6
    17aa:	4620      	mov	r0, r4
		transmitting = 1;
    17ac:	f884 6130 	strb.w	r6, [r4, #304]	; 0x130
		txBuffer[0] = (address << 1);
    17b0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		txBufferLength = 1;
    17b4:	f884 612f 	strb.w	r6, [r4, #303]	; 0x12f
    17b8:	f005 fd3c 	bl	7234 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    17bc:	4631      	mov	r1, r6
    17be:	4620      	mov	r0, r4
    17c0:	f005 fe46 	bl	7450 <TwoWire::endTransmission(unsigned char)>
		return requestFrom(address, quantity, (uint8_t)1);
    17c4:	4633      	mov	r3, r6
    17c6:	4632      	mov	r2, r6
    17c8:	4629      	mov	r1, r5
    17ca:	4620      	mov	r0, r4
    17cc:	f005 febe 	bl	754c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		if (rxBufferIndex >= rxBufferLength) return -1;
    17d0:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
    17d4:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    17d8:	429a      	cmp	r2, r3
    17da:	d905      	bls.n	17e8 <i2c_read_register(unsigned char, unsigned char) [clone .constprop.0]+0x4c>
		return rxBuffer[rxBufferIndex++];
    17dc:	199a      	adds	r2, r3, r6
    17de:	4423      	add	r3, r4
    17e0:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
    17e4:	7e98      	ldrb	r0, [r3, #26]
}
    17e6:	bd70      	pop	{r4, r5, r6, pc}
    17e8:	20ff      	movs	r0, #255	; 0xff
    17ea:	bd70      	pop	{r4, r5, r6, pc}
    17ec:	2000c7f4 	.word	0x2000c7f4

000017f0 <msetRTC(unsigned char*, unsigned short)>:
{
    17f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17f4:	4605      	mov	r5, r0
  for(int ii=0;ii<nbuf;ii++) buffer[ii]=bin2bcd(buffer[ii]);
    17f6:	2900      	cmp	r1, #0
    17f8:	d046      	beq.n	1888 <msetRTC(unsigned char*, unsigned short)+0x98>
    17fa:	460c      	mov	r4, r1
    17fc:	4606      	mov	r6, r0
    17fe:	4601      	mov	r1, r0
    1800:	4404      	add	r4, r0
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    1802:	4828      	ldr	r0, [pc, #160]	; (18a4 <msetRTC(unsigned char*, unsigned short)+0xb4>)
  for(int ii=0;ii<nbuf;ii++) buffer[ii]=bin2bcd(buffer[ii]);
    1804:	780a      	ldrb	r2, [r1, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
    1806:	fba0 7302 	umull	r7, r3, r0, r2
    180a:	08db      	lsrs	r3, r3, #3
    180c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1810:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  for(int ii=0;ii<nbuf;ii++) buffer[ii]=bin2bcd(buffer[ii]);
    1814:	f801 2b01 	strb.w	r2, [r1], #1
    1818:	42a1      	cmp	r1, r4
    181a:	d1f3      	bne.n	1804 <msetRTC(unsigned char*, unsigned short)+0x14>
		txBuffer[0] = (address << 1);
    181c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 18a8 <msetRTC(unsigned char*, unsigned short)+0xb8>
    1820:	23d0      	movs	r3, #208	; 0xd0
  Wire.write(reg);
    1822:	2100      	movs	r1, #0
    1824:	f888 30a5 	strb.w	r3, [r8, #165]	; 0xa5
  for(int ii=0; ii<nbuf; ii++) Wire.write(buffer[ii]);
    1828:	4647      	mov	r7, r8
		transmitting = 1;
    182a:	2301      	movs	r3, #1
  Wire.write(reg);
    182c:	4640      	mov	r0, r8
    182e:	f888 3130 	strb.w	r3, [r8, #304]	; 0x130
		txBufferLength = 1;
    1832:	f888 312f 	strb.w	r3, [r8, #303]	; 0x12f
    1836:	f005 fcfd 	bl	7234 <TwoWire::write(unsigned char)>
  for(int ii=0; ii<nbuf; ii++) Wire.write(buffer[ii]);
    183a:	f816 1b01 	ldrb.w	r1, [r6], #1
    183e:	4638      	mov	r0, r7
    1840:	f005 fcf8 	bl	7234 <TwoWire::write(unsigned char)>
    1844:	42a6      	cmp	r6, r4
    1846:	d1f8      	bne.n	183a <msetRTC(unsigned char*, unsigned short)+0x4a>
		return endTransmission(1);
    1848:	2101      	movs	r1, #1
    184a:	4817      	ldr	r0, [pc, #92]	; (18a8 <msetRTC(unsigned char*, unsigned short)+0xb8>)
    184c:	f005 fe00 	bl	7450 <TwoWire::endTransmission(unsigned char)>
  uint8_t statreg = i2c_read_register(address,DS3231_STATUSREG);
    1850:	2068      	movs	r0, #104	; 0x68
    1852:	f7ff ffa3 	bl	179c <i2c_read_register(unsigned char, unsigned char) [clone .constprop.0]>
		transmitting = 1;
    1856:	2401      	movs	r4, #1
		txBuffer[0] = (address << 1);
    1858:	23d0      	movs	r3, #208	; 0xd0
    185a:	4606      	mov	r6, r0
  Wire.write(reg);
    185c:	210f      	movs	r1, #15
    185e:	4812      	ldr	r0, [pc, #72]	; (18a8 <msetRTC(unsigned char*, unsigned short)+0xb8>)
    1860:	f888 30a5 	strb.w	r3, [r8, #165]	; 0xa5
		transmitting = 1;
    1864:	f888 4130 	strb.w	r4, [r8, #304]	; 0x130
		txBufferLength = 1;
    1868:	f888 412f 	strb.w	r4, [r8, #303]	; 0x12f
    186c:	f005 fce2 	bl	7234 <TwoWire::write(unsigned char)>
  Wire.write(val);
    1870:	f006 017f 	and.w	r1, r6, #127	; 0x7f
    1874:	480c      	ldr	r0, [pc, #48]	; (18a8 <msetRTC(unsigned char*, unsigned short)+0xb8>)
    1876:	f005 fcdd 	bl	7234 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    187a:	4621      	mov	r1, r4
    187c:	480a      	ldr	r0, [pc, #40]	; (18a8 <msetRTC(unsigned char*, unsigned short)+0xb8>)
    187e:	f005 fde7 	bl	7450 <TwoWire::endTransmission(unsigned char)>
}
    1882:	4628      	mov	r0, r5
    1884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		txBuffer[0] = (address << 1);
    1888:	f8df 801c 	ldr.w	r8, [pc, #28]	; 18a8 <msetRTC(unsigned char*, unsigned short)+0xb8>
		transmitting = 1;
    188c:	2301      	movs	r3, #1
		txBuffer[0] = (address << 1);
    188e:	22d0      	movs	r2, #208	; 0xd0
  Wire.write(reg);
    1890:	4640      	mov	r0, r8
		transmitting = 1;
    1892:	f888 3130 	strb.w	r3, [r8, #304]	; 0x130
		txBufferLength = 1;
    1896:	f888 312f 	strb.w	r3, [r8, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    189a:	f888 20a5 	strb.w	r2, [r8, #165]	; 0xa5
    189e:	f005 fcc9 	bl	7234 <TwoWire::write(unsigned char)>
  for(int ii=0; ii<nbuf; ii++) Wire.write(buffer[ii]);
    18a2:	e7d1      	b.n	1848 <msetRTC(unsigned char*, unsigned short)+0x58>
    18a4:	cccccccd 	.word	0xcccccccd
    18a8:	2000c7f4 	.word	0x2000c7f4

000018ac <menuGet3Int(int*, int*, int*) [clone .isra.0]>:
static int menuGet3Int(int *val1, int *val2, int *val3)
    18ac:	b570      	push	{r4, r5, r6, lr}
    18ae:	4605      	mov	r5, r0
    18b0:	b090      	sub	sp, #64	; 0x40
    18b2:	460c      	mov	r4, r1
    18b4:	4616      	mov	r6, r2
        virtual int available() { return usb_serial_available(); }
    18b6:	f008 fe43 	bl	a540 <usb_serial_available>
  while(!Serial.available()) continue;
    18ba:	2800      	cmp	r0, #0
    18bc:	d0fb      	beq.n	18b6 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0xa>
  int count = Serial.readBytesUntil('\r',buffer,40);
    18be:	aa06      	add	r2, sp, #24
    18c0:	2328      	movs	r3, #40	; 0x28
    18c2:	210d      	movs	r1, #13
    18c4:	480b      	ldr	r0, [pc, #44]	; (18f4 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x48>)
    18c6:	f006 fc61 	bl	818c <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    18ca:	f100 0240 	add.w	r2, r0, #64	; 0x40
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    18ce:	f10d 0317 	add.w	r3, sp, #23
  buffer[count]=0;
    18d2:	2100      	movs	r1, #0
    18d4:	eb0d 0c02 	add.w	ip, sp, r2
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    18d8:	9602      	str	r6, [sp, #8]
    18da:	9301      	str	r3, [sp, #4]
    18dc:	462a      	mov	r2, r5
    18de:	9400      	str	r4, [sp, #0]
    18e0:	f10d 0316 	add.w	r3, sp, #22
  buffer[count]=0;
    18e4:	f80c 1c28 	strb.w	r1, [ip, #-40]
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    18e8:	a806      	add	r0, sp, #24
    18ea:	4903      	ldr	r1, [pc, #12]	; (18f8 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x4c>)
    18ec:	f00a ffe0 	bl	c8b0 <sscanf>
}
    18f0:	b010      	add	sp, #64	; 0x40
    18f2:	bd70      	pop	{r4, r5, r6, pc}
    18f4:	200088bc 	.word	0x200088bc
    18f8:	2000072c 	.word	0x2000072c

000018fc <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    18fc:	b510      	push	{r4, lr}
    18fe:	4604      	mov	r4, r0
    1900:	b08c      	sub	sp, #48	; 0x30
    1902:	f008 fe1d 	bl	a540 <usb_serial_available>
  while(!Serial.available()) continue;
    1906:	2800      	cmp	r0, #0
    1908:	d0fb      	beq.n	1902 <menuGetInt16(short*) [clone .isra.0]+0x6>
  int count = Serial.readBytesUntil('\r',buffer,40);
    190a:	aa02      	add	r2, sp, #8
    190c:	2328      	movs	r3, #40	; 0x28
    190e:	210d      	movs	r1, #13
    1910:	4808      	ldr	r0, [pc, #32]	; (1934 <menuGetInt16(short*) [clone .isra.0]+0x38>)
    1912:	f006 fc3b 	bl	818c <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1916:	f100 0330 	add.w	r3, r0, #48	; 0x30
    191a:	2100      	movs	r1, #0
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    191c:	aa01      	add	r2, sp, #4
  buffer[count]=0;
    191e:	446b      	add	r3, sp
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1920:	a802      	add	r0, sp, #8
  buffer[count]=0;
    1922:	f803 1c28 	strb.w	r1, [r3, #-40]
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1926:	4904      	ldr	r1, [pc, #16]	; (1938 <menuGetInt16(short*) [clone .isra.0]+0x3c>)
    1928:	f00a ffc2 	bl	c8b0 <sscanf>
    192c:	9b01      	ldr	r3, [sp, #4]
    192e:	8023      	strh	r3, [r4, #0]
}
    1930:	b00c      	add	sp, #48	; 0x30
    1932:	bd10      	pop	{r4, pc}
    1934:	200088bc 	.word	0x200088bc
    1938:	20000734 	.word	0x20000734

0000193c <menu1()>:

void menu1(void)
{   // have ':'
    193c:	b508      	push	{r3, lr}
    193e:	f008 fdff 	bl	a540 <usb_serial_available>
    while(!Serial.available()) ;
    1942:	2800      	cmp	r0, #0
    1944:	d0fb      	beq.n	193e <menu1()+0x2>
    char ch=Serial.read();
    if(ch=='x') return;
}
    1946:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        virtual int read() { return usb_serial_getchar(); }
    194a:	f008 be3d 	b.w	a5c8 <usb_serial_getchar>
    194e:	bf00      	nop

00001950 <menu2()>:

void menu2(void)
{   // have '?'
    1950:	b510      	push	{r4, lr}
    1952:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    1954:	f008 fdf4 	bl	a540 <usb_serial_available>
    datetime_t t;

    while(!Serial.available()) ;
    1958:	2800      	cmp	r0, #0
    195a:	d0fb      	beq.n	1954 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    195c:	f008 fe34 	bl	a5c8 <usb_serial_getchar>
    char ch=Serial.read();
    1960:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    1962:	2870      	cmp	r0, #112	; 0x70
    1964:	d017      	beq.n	1996 <menu2()+0x46>
                   t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    1966:	2864      	cmp	r0, #100	; 0x64
    1968:	d056      	beq.n	1a18 <menu2()+0xc8>
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
    196a:	3863      	subs	r0, #99	; 0x63
    196c:	2811      	cmp	r0, #17
    196e:	d80c      	bhi.n	198a <menu2()+0x3a>
    1970:	e8df f000 	tbb	[pc, r0]
    1974:	700b0b44 	.word	0x700b0b44
    1978:	0b0b0b0b 	.word	0x0b0b0b0b
    197c:	0b0b0b0b 	.word	0x0b0b0b0b
    1980:	0b0b0b0b 	.word	0x0b0b0b0b
    1984:	617d      	.short	0x617d
    1986:	f008 fe1f 	bl	a5c8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    198a:	f008 fdd9 	bl	a540 <usb_serial_available>
    }
    else if(ch=='c')
    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
    198e:	2800      	cmp	r0, #0
    1990:	d1f9      	bne.n	1986 <menu2()+0x36>

}
    1992:	b008      	add	sp, #32
    1994:	bd10      	pop	{r4, pc}
      rtc_get_datetime(&t);
    1996:	a806      	add	r0, sp, #24
    1998:	f7ff feb4 	bl	1704 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    199c:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    19a0:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    19a4:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    19a8:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    19ac:	f99d 401e 	ldrsb.w	r4, [sp, #30]
    19b0:	9000      	str	r0, [sp, #0]
    19b2:	4832      	ldr	r0, [pc, #200]	; (1a7c <menu2()+0x12c>)
    19b4:	e9cd 3203 	strd	r3, r2, [sp, #12]
    19b8:	e9cd 1401 	strd	r1, r4, [sp, #4]
    19bc:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    19c0:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    19c4:	492e      	ldr	r1, [pc, #184]	; (1a80 <menu2()+0x130>)
    19c6:	f006 fb09 	bl	7fdc <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    19ca:	210c      	movs	r1, #12
    19cc:	482d      	ldr	r0, [pc, #180]	; (1a84 <menu2()+0x134>)
    19ce:	f008 fe21 	bl	a614 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    19d2:	4b2d      	ldr	r3, [pc, #180]	; (1a88 <menu2()+0x138>)
	size_t println(long n)				{ return print(n) + println(); }
    19d4:	4829      	ldr	r0, [pc, #164]	; (1a7c <menu2()+0x12c>)
    19d6:	6819      	ldr	r1, [r3, #0]
    19d8:	f006 fad8 	bl	7f8c <Print::print(long)>
    19dc:	4827      	ldr	r0, [pc, #156]	; (1a7c <menu2()+0x12c>)
    19de:	f006 fae1 	bl	7fa4 <Print::println()>
    19e2:	210c      	movs	r1, #12
    19e4:	4829      	ldr	r0, [pc, #164]	; (1a8c <menu2()+0x13c>)
    19e6:	f008 fe15 	bl	a614 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    19ea:	4b29      	ldr	r3, [pc, #164]	; (1a90 <menu2()+0x140>)
	size_t print(int n)				{ return print((long)n); }
    19ec:	4823      	ldr	r0, [pc, #140]	; (1a7c <menu2()+0x12c>)
    19ee:	f9b3 1000 	ldrsh.w	r1, [r3]
    19f2:	f006 facb 	bl	7f8c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    19f6:	4821      	ldr	r0, [pc, #132]	; (1a7c <menu2()+0x12c>)
    19f8:	f006 fad4 	bl	7fa4 <Print::println()>
    19fc:	210c      	movs	r1, #12
    19fe:	4825      	ldr	r0, [pc, #148]	; (1a94 <menu2()+0x144>)
    1a00:	f008 fe08 	bl	a614 <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    1a04:	4b24      	ldr	r3, [pc, #144]	; (1a98 <menu2()+0x148>)
	size_t print(int n)				{ return print((long)n); }
    1a06:	f9b3 1000 	ldrsh.w	r1, [r3]
    1a0a:	481c      	ldr	r0, [pc, #112]	; (1a7c <menu2()+0x12c>)
    1a0c:	f006 fabe 	bl	7f8c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1a10:	481a      	ldr	r0, [pc, #104]	; (1a7c <menu2()+0x12c>)
    1a12:	f006 fac7 	bl	7fa4 <Print::println()>
    1a16:	e7b8      	b.n	198a <menu2()+0x3a>
      rtc_get_datetime(&t);
    1a18:	a806      	add	r0, sp, #24
    1a1a:	f7ff fe73 	bl	1704 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    1a1e:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1a22:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1a26:	9000      	str	r0, [sp, #0]
    1a28:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1a2c:	491b      	ldr	r1, [pc, #108]	; (1a9c <menu2()+0x14c>)
    1a2e:	4813      	ldr	r0, [pc, #76]	; (1a7c <menu2()+0x12c>)
    1a30:	f006 fad4 	bl	7fdc <Print::printf(char const*, ...)>
    1a34:	e7a9      	b.n	198a <menu2()+0x3a>
      rtc_get_datetime(&t);
    1a36:	a806      	add	r0, sp, #24
    1a38:	f7ff fe64 	bl	1704 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    1a3c:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    1a40:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1a44:	9000      	str	r0, [sp, #0]
    1a46:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    1a4a:	4915      	ldr	r1, [pc, #84]	; (1aa0 <menu2()+0x150>)
    1a4c:	480b      	ldr	r0, [pc, #44]	; (1a7c <menu2()+0x12c>)
    1a4e:	f006 fac5 	bl	7fdc <Print::printf(char const*, ...)>
    1a52:	e79a      	b.n	198a <menu2()+0x3a>
    1a54:	210c      	movs	r1, #12
    1a56:	480b      	ldr	r0, [pc, #44]	; (1a84 <menu2()+0x134>)
    1a58:	f008 fddc 	bl	a614 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1a5c:	4b0a      	ldr	r3, [pc, #40]	; (1a88 <menu2()+0x138>)
	size_t println(long n)				{ return print(n) + println(); }
    1a5e:	4807      	ldr	r0, [pc, #28]	; (1a7c <menu2()+0x12c>)
    1a60:	6819      	ldr	r1, [r3, #0]
    1a62:	f006 fa93 	bl	7f8c <Print::print(long)>
    1a66:	4805      	ldr	r0, [pc, #20]	; (1a7c <menu2()+0x12c>)
    1a68:	f006 fa9c 	bl	7fa4 <Print::println()>
    1a6c:	e78d      	b.n	198a <menu2()+0x3a>
    1a6e:	210c      	movs	r1, #12
    1a70:	4806      	ldr	r0, [pc, #24]	; (1a8c <menu2()+0x13c>)
    1a72:	f008 fdcf 	bl	a614 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1a76:	4b06      	ldr	r3, [pc, #24]	; (1a90 <menu2()+0x140>)
    1a78:	e7c5      	b.n	1a06 <menu2()+0xb6>
    1a7a:	bf00      	nop
    1a7c:	200088bc 	.word	0x200088bc
    1a80:	20000538 	.word	0x20000538
    1a84:	2000055c 	.word	0x2000055c
    1a88:	20008e8c 	.word	0x20008e8c
    1a8c:	2000056c 	.word	0x2000056c
    1a90:	20008ebc 	.word	0x20008ebc
    1a94:	2000057c 	.word	0x2000057c
    1a98:	200225e6 	.word	0x200225e6
    1a9c:	2000058c 	.word	0x2000058c
    1aa0:	200005a8 	.word	0x200005a8

00001aa4 <menu3()>:

void menu3(void)
{   // have '!'
    1aa4:	b510      	push	{r4, lr}
    uint8_t rtcBuffer[7] = {0};//{0,27,15,1,3,4,23}; // adapt to better time (secs,min, ...., year)
    1aa6:	2300      	movs	r3, #0
{   // have '!'
    1aa8:	b090      	sub	sp, #64	; 0x40
    uint8_t rtcBuffer[7] = {0};//{0,27,15,1,3,4,23}; // adapt to better time (secs,min, ...., year)
    1aaa:	9304      	str	r3, [sp, #16]
    1aac:	f8ad 3014 	strh.w	r3, [sp, #20]
    1ab0:	f88d 3016 	strb.w	r3, [sp, #22]
        virtual int available() { return usb_serial_available(); }
    1ab4:	f008 fd44 	bl	a540 <usb_serial_available>
    datetime_t t;

    while(!Serial.available()) ;
    1ab8:	2800      	cmp	r0, #0
    1aba:	d0fb      	beq.n	1ab4 <menu3()+0x10>
        virtual int read() { return usb_serial_getchar(); }
    1abc:	f008 fd84 	bl	a5c8 <usb_serial_getchar>
    char ch=Serial.read();
    1ac0:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    1ac2:	2864      	cmp	r0, #100	; 0x64
    1ac4:	d00d      	beq.n	1ae2 <menu3()+0x3e>
      rtcBuffer[5]=month;
      rtcBuffer[4]=day;
      msetRTC(rtcBuffer,7);
      syncRTC(&t, rtcBuffer);
    } 
    else if(ch=='t') // set time
    1ac6:	3863      	subs	r0, #99	; 0x63
    1ac8:	2811      	cmp	r0, #17
    1aca:	d841      	bhi.n	1b50 <menu3()+0xac>
    1acc:	e8df f000 	tbb	[pc, r0]
    1ad0:	4240407c 	.word	0x4240407c
    1ad4:	40404040 	.word	0x40404040
    1ad8:	40404040 	.word	0x40404040
    1adc:	40404040 	.word	0x40404040
    1ae0:	675c      	.short	0x675c
      menuGet3Int(&year,&month,&day);
    1ae2:	aa03      	add	r2, sp, #12
    1ae4:	a902      	add	r1, sp, #8
    1ae6:	a801      	add	r0, sp, #4
    1ae8:	f7ff fee0 	bl	18ac <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      mgetRTC(rtcBuffer,7);
    1aec:	2107      	movs	r1, #7
    1aee:	a804      	add	r0, sp, #16
    1af0:	f7ff fe16 	bl	1720 <mgetRTC(unsigned char*, unsigned short)>
      rtcBuffer[4]=day;
    1af4:	9a03      	ldr	r2, [sp, #12]
      msetRTC(rtcBuffer,7);
    1af6:	2107      	movs	r1, #7
      rtcBuffer[4]=day;
    1af8:	f88d 2014 	strb.w	r2, [sp, #20]
      rtcBuffer[5]=month;
    1afc:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
      rtcBuffer[6]=year-2000;
    1b00:	3330      	adds	r3, #48	; 0x30
      rtcBuffer[5]=month;
    1b02:	f88d 0015 	strb.w	r0, [sp, #21]
      msetRTC(rtcBuffer,7);
    1b06:	a804      	add	r0, sp, #16
      rtcBuffer[6]=year-2000;
    1b08:	f88d 3016 	strb.w	r3, [sp, #22]
      //
      mgetRTC(rtcBuffer,7);
      rtcBuffer[2]=hour;
      rtcBuffer[1]=minutes;
      rtcBuffer[0]=seconds;
      msetRTC(rtcBuffer,7);
    1b0c:	f7ff fe70 	bl	17f0 <msetRTC(unsigned char*, unsigned short)>
    mgetRTC(rtcBuffer,7);
    1b10:	2107      	movs	r1, #7
    1b12:	a804      	add	r0, sp, #16
    1b14:	f7ff fe04 	bl	1720 <mgetRTC(unsigned char*, unsigned short)>
    t->year=rtcBuffer[6]+2000;
    1b18:	f89d 1016 	ldrb.w	r1, [sp, #22]
    t->month=rtcBuffer[5]&0x7f;
    1b1c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    rtc_set_datetime(t);
    1b20:	a806      	add	r0, sp, #24
    t->min=rtcBuffer[1];
    1b22:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    t->year=rtcBuffer[6]+2000;
    1b26:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    t->day=rtcBuffer[4];
    1b2a:	f89d c014 	ldrb.w	ip, [sp, #20]
    t->month=rtcBuffer[5]&0x7f;
    1b2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    t->hour=rtcBuffer[2];
    1b32:	f89d 4012 	ldrb.w	r4, [sp, #18]
    t->min=rtcBuffer[1];
    1b36:	ba5b      	rev16	r3, r3
    t->year=rtcBuffer[6]+2000;
    1b38:	f8ad 1018 	strh.w	r1, [sp, #24]
    t->month=rtcBuffer[5]&0x7f;
    1b3c:	f88d 201a 	strb.w	r2, [sp, #26]
    t->day=rtcBuffer[4];
    1b40:	f88d c01b 	strb.w	ip, [sp, #27]
    t->hour=rtcBuffer[2];
    1b44:	f88d 401d 	strb.w	r4, [sp, #29]
    t->min=rtcBuffer[1];
    1b48:	f8ad 301e 	strh.w	r3, [sp, #30]
    rtc_set_datetime(t);
    1b4c:	f7ff fde6 	bl	171c <rtc_set_datetime(datetime_t*)>
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
    }
}
    1b50:	b010      	add	sp, #64	; 0x40
    1b52:	bd10      	pop	{r4, pc}
        virtual int available() { return usb_serial_available(); }
    1b54:	f008 fcf4 	bl	a540 <usb_serial_available>
  while(!Serial.available()) continue;
    1b58:	2800      	cmp	r0, #0
    1b5a:	d0fb      	beq.n	1b54 <menu3()+0xb0>
  int count = Serial.readBytesUntil('\r',buffer,40);
    1b5c:	aa06      	add	r2, sp, #24
    1b5e:	2328      	movs	r3, #40	; 0x28
    1b60:	210d      	movs	r1, #13
    1b62:	481c      	ldr	r0, [pc, #112]	; (1bd4 <menu3()+0x130>)
    1b64:	f006 fb12 	bl	818c <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1b68:	f100 0340 	add.w	r3, r0, #64	; 0x40
    1b6c:	2400      	movs	r4, #0
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1b6e:	aa03      	add	r2, sp, #12
  buffer[count]=0;
    1b70:	446b      	add	r3, sp
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1b72:	4919      	ldr	r1, [pc, #100]	; (1bd8 <menu3()+0x134>)
    1b74:	a806      	add	r0, sp, #24
  buffer[count]=0;
    1b76:	f803 4c28 	strb.w	r4, [r3, #-40]
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1b7a:	f00a fe99 	bl	c8b0 <sscanf>
    1b7e:	4b17      	ldr	r3, [pc, #92]	; (1bdc <menu3()+0x138>)
    1b80:	9a03      	ldr	r2, [sp, #12]
    1b82:	601a      	str	r2, [r3, #0]
}
    1b84:	b010      	add	sp, #64	; 0x40
    1b86:	bd10      	pop	{r4, pc}
      menuGetInt16(&shift); if(shift<0) shift=0;
    1b88:	4c15      	ldr	r4, [pc, #84]	; (1be0 <menu3()+0x13c>)
    1b8a:	4620      	mov	r0, r4
    1b8c:	f7ff feb6 	bl	18fc <menuGetInt16(short*) [clone .isra.0]>
    1b90:	f9b4 3000 	ldrsh.w	r3, [r4]
    1b94:	2b00      	cmp	r3, #0
    1b96:	dadb      	bge.n	1b50 <menu3()+0xac>
    1b98:	2300      	movs	r3, #0
    1b9a:	8023      	strh	r3, [r4, #0]
    1b9c:	e7d8      	b.n	1b50 <menu3()+0xac>
      menuGet3Int(&hour,&minutes,&seconds);
    1b9e:	aa03      	add	r2, sp, #12
    1ba0:	a902      	add	r1, sp, #8
    1ba2:	a801      	add	r0, sp, #4
    1ba4:	f7ff fe82 	bl	18ac <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      mgetRTC(rtcBuffer,7);
    1ba8:	2107      	movs	r1, #7
    1baa:	a804      	add	r0, sp, #16
    1bac:	f7ff fdb8 	bl	1720 <mgetRTC(unsigned char*, unsigned short)>
      rtcBuffer[0]=seconds;
    1bb0:	9b03      	ldr	r3, [sp, #12]
      msetRTC(rtcBuffer,7);
    1bb2:	2107      	movs	r1, #7
      rtcBuffer[0]=seconds;
    1bb4:	f88d 3010 	strb.w	r3, [sp, #16]
      rtcBuffer[1]=minutes;
    1bb8:	e9dd 0201 	ldrd	r0, r2, [sp, #4]
      rtcBuffer[2]=hour;
    1bbc:	f88d 0012 	strb.w	r0, [sp, #18]
      msetRTC(rtcBuffer,7);
    1bc0:	a804      	add	r0, sp, #16
      rtcBuffer[1]=minutes;
    1bc2:	f88d 2011 	strb.w	r2, [sp, #17]
      rtcBuffer[0]=seconds;
    1bc6:	e7a1      	b.n	1b0c <menu3()+0x68>
      menuGetInt16(&proc);
    1bc8:	4806      	ldr	r0, [pc, #24]	; (1be4 <menu3()+0x140>)
    1bca:	f7ff fe97 	bl	18fc <menuGetInt16(short*) [clone .isra.0]>
}
    1bce:	b010      	add	sp, #64	; 0x40
    1bd0:	bd10      	pop	{r4, pc}
    1bd2:	bf00      	nop
    1bd4:	200088bc 	.word	0x200088bc
    1bd8:	20000734 	.word	0x20000734
    1bdc:	20008e8c 	.word	0x20008e8c
    1be0:	20008ebc 	.word	0x20008ebc
    1be4:	200225e6 	.word	0x200225e6

00001be8 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1be8:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    1bea:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1bee:	b084      	sub	sp, #16
    1bf0:	468c      	mov	ip, r1
    1bf2:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    1bf4:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1bf6:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    1bf8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1bfc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    1c00:	ea4f 124c 	mov.w	r2, ip, lsl #5
    1c04:	4629      	mov	r1, r5
    1c06:	6a20      	ldr	r0, [r4, #32]
    1c08:	f001 f934 	bl	2e74 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1c0c:	2801      	cmp	r0, #1
    1c0e:	d106      	bne.n	1c1e <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    1c10:	4632      	mov	r2, r6
    1c12:	4629      	mov	r1, r5
    1c14:	6a20      	ldr	r0, [r4, #32]
    1c16:	f001 f911 	bl	2e3c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    1c1a:	b004      	add	sp, #16
    1c1c:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    1c1e:	2000      	movs	r0, #0
}
    1c20:	b004      	add	sp, #16
    1c22:	bd70      	pop	{r4, r5, r6, pc}

00001c24 <ExFatFile::close()>:
bool ExFatFile::close() {
    1c24:	b510      	push	{r4, lr}
    1c26:	4604      	mov	r4, r0
  bool rtn = sync();
    1c28:	f000 fcfa 	bl	2620 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    1c2c:	2300      	movs	r3, #0
    1c2e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    1c32:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    1c36:	bd10      	pop	{r4, pc}

00001c38 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    1c38:	b538      	push	{r3, r4, r5, lr}
    1c3a:	460d      	mov	r5, r1
  if (isOpen()) {
    1c3c:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    1c40:	b109      	cbz	r1, 1c46 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    1c42:	2000      	movs	r0, #0
}
    1c44:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    1c46:	2238      	movs	r2, #56	; 0x38
    1c48:	4604      	mov	r4, r0
    1c4a:	f00a ffb7 	bl	cbbc <memset>
  m_flags = FILE_FLAG_READ;
    1c4e:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    1c50:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    1c52:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    1c54:	4618      	mov	r0, r3
    1c56:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    1c5a:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    1c5e:	bd38      	pop	{r3, r4, r5, pc}

00001c60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    1c60:	b4f0      	push	{r4, r5, r6, r7}
    1c62:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    1c64:	7809      	ldrb	r1, [r1, #0]
    1c66:	2920      	cmp	r1, #32
    1c68:	d103      	bne.n	1c72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    1c6a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1c6e:	2c20      	cmp	r4, #32
    1c70:	d0fb      	beq.n	1c6a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    1c72:	6015      	str	r5, [r2, #0]
  fname->end = path;
    1c74:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    1c76:	782c      	ldrb	r4, [r5, #0]
    1c78:	2c2f      	cmp	r4, #47	; 0x2f
    1c7a:	d011      	beq.n	1ca0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1c7c:	b184      	cbz	r4, 1ca0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1c7e:	1c6e      	adds	r6, r5, #1
    1c80:	2c3c      	cmp	r4, #60	; 0x3c
    1c82:	4f1d      	ldr	r7, [pc, #116]	; (1cf8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    1c84:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    1c86:	d82a      	bhi.n	1cde <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    1c88:	2c21      	cmp	r4, #33	; 0x21
    1c8a:	d812      	bhi.n	1cb2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    1c8c:	f104 3cff 	add.w	ip, r4, #4294967295
    1c90:	f1bc 0f1e 	cmp.w	ip, #30
    1c94:	d816      	bhi.n	1cc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    1c96:	2000      	movs	r0, #0
    1c98:	bcf0      	pop	{r4, r5, r6, r7}
    1c9a:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    1c9c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1ca0:	2c20      	cmp	r4, #32
    1ca2:	d0fb      	beq.n	1c9c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    1ca4:	2c2f      	cmp	r4, #47	; 0x2f
    1ca6:	d0f9      	beq.n	1c9c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    1ca8:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    1caa:	4611      	mov	r1, r2
}
    1cac:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    1cae:	f000 bfb3 	b.w	2c18 <ExFatFile::hashName(ExName_t*)>
    1cb2:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    1cb6:	fa5f fc8c 	uxtb.w	ip, ip
    1cba:	fa27 fc0c 	lsr.w	ip, r7, ip
    1cbe:	f01c 0f01 	tst.w	ip, #1
    1cc2:	d1e8      	bne.n	1c96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    1cc4:	2c2e      	cmp	r4, #46	; 0x2e
    1cc6:	d001      	beq.n	1ccc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1cc8:	2c20      	cmp	r4, #32
    1cca:	d10d      	bne.n	1ce8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    1ccc:	f816 4b01 	ldrb.w	r4, [r6], #1
    1cd0:	2c00      	cmp	r4, #0
    1cd2:	d0e5      	beq.n	1ca0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1cd4:	2c2f      	cmp	r4, #47	; 0x2f
    1cd6:	d0e3      	beq.n	1ca0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    1cd8:	2c3c      	cmp	r4, #60	; 0x3c
    1cda:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    1cdc:	d9d4      	bls.n	1c88 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    1cde:	2c5c      	cmp	r4, #92	; 0x5c
    1ce0:	d0d9      	beq.n	1c96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1ce2:	d903      	bls.n	1cec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    1ce4:	2c7c      	cmp	r4, #124	; 0x7c
    1ce6:	d0d6      	beq.n	1c96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    1ce8:	6096      	str	r6, [r2, #8]
    1cea:	e7ef      	b.n	1ccc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1cec:	3c3e      	subs	r4, #62	; 0x3e
    1cee:	2c01      	cmp	r4, #1
    1cf0:	d8fa      	bhi.n	1ce8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    1cf2:	2000      	movs	r0, #0
    1cf4:	bcf0      	pop	{r4, r5, r6, r7}
    1cf6:	4770      	bx	lr
    1cf8:	05002101 	.word	0x05002101

00001cfc <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    1cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    1d00:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    1d04:	b083      	sub	sp, #12
    1d06:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    1d08:	07dc      	lsls	r4, r3, #31
    1d0a:	d574      	bpl.n	1df6 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    1d0c:	0658      	lsls	r0, r3, #25
    1d0e:	460f      	mov	r7, r1
    1d10:	4690      	mov	r8, r2
    1d12:	f140 80b0 	bpl.w	1e76 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    1d16:	e9d5 2300 	ldrd	r2, r3, [r5]
    1d1a:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    1d1e:	eb18 0402 	adds.w	r4, r8, r2
    1d22:	f143 0300 	adc.w	r3, r3, #0
    1d26:	42a1      	cmp	r1, r4
    1d28:	eb70 0303 	sbcs.w	r3, r0, r3
    1d2c:	f0c0 80a9 	bcc.w	1e82 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    1d30:	f1b8 0f00 	cmp.w	r8, #0
    1d34:	d05b      	beq.n	1dee <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    1d36:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1d38:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    1d3c:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1d40:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1d44:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    1d48:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    1d4a:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    1d4e:	2c00      	cmp	r4, #0
    1d50:	d170      	bne.n	1e34 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    1d52:	4313      	orrs	r3, r2
    1d54:	d170      	bne.n	1e38 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1d56:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1d5a:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    1d5c:	bf4c      	ite	mi
    1d5e:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    1d62:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    1d64:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1d66:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    1d6a:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    1d6c:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1d70:	0a63      	lsrs	r3, r4, #9
    1d72:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    1d74:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    1d78:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    1d7a:	f1bb 0f00 	cmp.w	fp, #0
    1d7e:	d145      	bne.n	1e0c <ExFatFile::read(void*, unsigned int)+0x110>
    1d80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1d84:	d342      	bcc.n	1e0c <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    1d86:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    1d8a:	4291      	cmp	r1, r2
    1d8c:	d03e      	beq.n	1e0c <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    1d8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    1d92:	d358      	bcc.n	1e46 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    1d94:	f04f 0b01 	mov.w	fp, #1
    1d98:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    1d9c:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    1da0:	0a73      	lsrs	r3, r6, #9
    1da2:	459b      	cmp	fp, r3
    1da4:	bf28      	it	cs
    1da6:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    1da8:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1daa:	ea4f 244b 	mov.w	r4, fp, lsl #9
    1dae:	d80a      	bhi.n	1dc6 <ExFatFile::read(void*, unsigned int)+0xca>
    1db0:	eb01 030b 	add.w	r3, r1, fp
    1db4:	429a      	cmp	r2, r3
    1db6:	d206      	bcs.n	1dc6 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    1db8:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1dbc:	9101      	str	r1, [sp, #4]
    1dbe:	f004 ff79 	bl	6cb4 <FsCache::sync()>
    1dc2:	9901      	ldr	r1, [sp, #4]
    1dc4:	b1b8      	cbz	r0, 1df6 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    1dc6:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1dca:	465b      	mov	r3, fp
    1dcc:	6802      	ldr	r2, [r0, #0]
    1dce:	f8d2 a014 	ldr.w	sl, [r2, #20]
    1dd2:	463a      	mov	r2, r7
    1dd4:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    1dd6:	b170      	cbz	r0, 1df6 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    1dd8:	4623      	mov	r3, r4
    dst += n;
    1dda:	4427      	add	r7, r4
    m_curPosition += n;
    1ddc:	e9d5 1200 	ldrd	r1, r2, [r5]
    1de0:	185b      	adds	r3, r3, r1
    1de2:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    1de6:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    1de8:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    1dec:	d1a8      	bne.n	1d40 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    1dee:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    1df0:	b003      	add	sp, #12
    1df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    1df6:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    1dfa:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    1dfe:	f043 0302 	orr.w	r3, r3, #2
    1e02:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    1e06:	b003      	add	sp, #12
    1e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    1e0c:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    1e10:	2200      	movs	r2, #0
    1e12:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1e16:	42b4      	cmp	r4, r6
    1e18:	bf28      	it	cs
    1e1a:	4634      	movcs	r4, r6
    1e1c:	f004 ff76 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    1e20:	2800      	cmp	r0, #0
    1e22:	d0e8      	beq.n	1df6 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    1e24:	eb00 010b 	add.w	r1, r0, fp
    1e28:	4622      	mov	r2, r4
    1e2a:	4638      	mov	r0, r7
    1e2c:	f006 fc52 	bl	86d4 <memcpy>
    m_curPosition += n;
    1e30:	4623      	mov	r3, r4
    1e32:	e7d2      	b.n	1dda <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    1e34:	69aa      	ldr	r2, [r5, #24]
    1e36:	e796      	b.n	1d66 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    1e38:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    1e3c:	065b      	lsls	r3, r3, #25
    1e3e:	d50e      	bpl.n	1e5e <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    1e40:	69aa      	ldr	r2, [r5, #24]
    1e42:	3201      	adds	r2, #1
    1e44:	e78e      	b.n	1d64 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    1e46:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1e4a:	463a      	mov	r2, r7
    1e4c:	6803      	ldr	r3, [r0, #0]
    1e4e:	691b      	ldr	r3, [r3, #16]
    1e50:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    1e52:	2800      	cmp	r0, #0
    1e54:	d0cf      	beq.n	1df6 <ExFatFile::read(void*, unsigned int)+0xfa>
    1e56:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    1e5a:	461c      	mov	r4, r3
    1e5c:	e7bd      	b.n	1dda <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1e5e:	464a      	mov	r2, r9
    1e60:	4650      	mov	r0, sl
    1e62:	69a9      	ldr	r1, [r5, #24]
    1e64:	f001 f848 	bl	2ef8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    1e68:	2800      	cmp	r0, #0
    1e6a:	dbc4      	blt.n	1df6 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    1e6c:	d00c      	beq.n	1e88 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    1e6e:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1e72:	69aa      	ldr	r2, [r5, #24]
    1e74:	e777      	b.n	1d66 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    1e76:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1e7a:	0719      	lsls	r1, r3, #28
    1e7c:	f57f af58 	bpl.w	1d30 <ExFatFile::read(void*, unsigned int)+0x34>
    1e80:	e749      	b.n	1d16 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    1e82:	eba1 0802 	sub.w	r8, r1, r2
    1e86:	e753      	b.n	1d30 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    1e88:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1e8c:	f013 0f50 	tst.w	r3, #80	; 0x50
    1e90:	d0b1      	beq.n	1df6 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    1e92:	eba8 0806 	sub.w	r8, r8, r6
    1e96:	4640      	mov	r0, r8
    1e98:	e7aa      	b.n	1df0 <ExFatFile::read(void*, unsigned int)+0xf4>
    1e9a:	bf00      	nop

00001e9c <ExFatFile::peek()>:
int ExFatFile::peek() {
    1e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e9e:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    1ea0:	2201      	movs	r2, #1
    1ea2:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    1ea4:	6985      	ldr	r5, [r0, #24]
    1ea6:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    1eaa:	e9d0 6700 	ldrd	r6, r7, [r0]
    1eae:	f7ff ff25 	bl	1cfc <ExFatFile::read(void*, unsigned int)>
    1eb2:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    1eb4:	61a5      	str	r5, [r4, #24]
    1eb6:	bf0c      	ite	eq
    1eb8:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    1ebc:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    1ec0:	e9c4 6700 	strd	r6, r7, [r4]
}
    1ec4:	b003      	add	sp, #12
    1ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001ec8 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    1ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ecc:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    1ece:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    1ed2:	b083      	sub	sp, #12
    1ed4:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    1ed6:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    1eda:	2b00      	cmp	r3, #0
    1edc:	d051      	beq.n	1f82 <ExFatFile::seekSet(unsigned long long)+0xba>
    1ede:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    1ee0:	e9d0 1c00 	ldrd	r1, ip, [r0]
    1ee4:	45bc      	cmp	ip, r7
    1ee6:	bf08      	it	eq
    1ee8:	4291      	cmpeq	r1, r2
    1eea:	d05c      	beq.n	1fa6 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    1eec:	ea56 0207 	orrs.w	r2, r6, r7
    1ef0:	d04d      	beq.n	1f8e <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    1ef2:	071d      	lsls	r5, r3, #28
    1ef4:	d504      	bpl.n	1f00 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    1ef6:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    1efa:	42b0      	cmp	r0, r6
    1efc:	41ba      	sbcs	r2, r7
    1efe:	d340      	bcc.n	1f82 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    1f00:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1f04:	1e75      	subs	r5, r6, #1
    1f06:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    1f0a:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1f0c:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    1f10:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    1f14:	3209      	adds	r2, #9
    1f16:	b2d2      	uxtb	r2, r2
    1f18:	f1c2 0e20 	rsb	lr, r2, #32
    1f1c:	40d5      	lsrs	r5, r2
    1f1e:	f1a2 0920 	sub.w	r9, r2, #32
    1f22:	fa00 fb0e 	lsl.w	fp, r0, lr
    1f26:	fa20 f009 	lsr.w	r0, r0, r9
    1f2a:	ea45 050b 	orr.w	r5, r5, fp
    1f2e:	4305      	orrs	r5, r0
  if (isContiguous()) {
    1f30:	9801      	ldr	r0, [sp, #4]
    1f32:	0640      	lsls	r0, r0, #25
    1f34:	d433      	bmi.n	1f9e <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    1f36:	1e48      	subs	r0, r1, #1
    1f38:	fa20 f202 	lsr.w	r2, r0, r2
    1f3c:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    1f40:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    1f44:	fa00 fe0e 	lsl.w	lr, r0, lr
    1f48:	fa20 f009 	lsr.w	r0, r0, r9
    1f4c:	ea42 020e 	orr.w	r2, r2, lr
    1f50:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    1f54:	d001      	beq.n	1f5a <ExFatFile::seekSet(unsigned long long)+0x92>
    1f56:	4295      	cmp	r5, r2
    1f58:	d229      	bcs.n	1fae <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1f5a:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    1f5c:	bf4c      	ite	mi
    1f5e:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    1f62:	69e3      	ldrpl	r3, [r4, #28]
    1f64:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    1f66:	f104 0918 	add.w	r9, r4, #24
    1f6a:	e006      	b.n	1f7a <ExFatFile::seekSet(unsigned long long)+0xb2>
    1f6c:	69a1      	ldr	r1, [r4, #24]
    1f6e:	3d01      	subs	r5, #1
    1f70:	6a20      	ldr	r0, [r4, #32]
    1f72:	f000 ffc1 	bl	2ef8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    1f76:	2800      	cmp	r0, #0
    1f78:	dd03      	ble.n	1f82 <ExFatFile::seekSet(unsigned long long)+0xba>
    1f7a:	464a      	mov	r2, r9
  while (nNew--) {
    1f7c:	2d00      	cmp	r5, #0
    1f7e:	d1f5      	bne.n	1f6c <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    1f80:	e007      	b.n	1f92 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    1f82:	2000      	movs	r0, #0
  m_curCluster = tmp;
    1f84:	f8c4 8018 	str.w	r8, [r4, #24]
}
    1f88:	b003      	add	sp, #12
    1f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    1f8e:	2300      	movs	r3, #0
    1f90:	6183      	str	r3, [r0, #24]
  return true;
    1f92:	2001      	movs	r0, #1
  m_curPosition = pos;
    1f94:	e9c4 6700 	strd	r6, r7, [r4]
}
    1f98:	b003      	add	sp, #12
    1f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    1f9e:	69e3      	ldr	r3, [r4, #28]
    1fa0:	442b      	add	r3, r5
    1fa2:	61a3      	str	r3, [r4, #24]
    goto done;
    1fa4:	e7f5      	b.n	1f92 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    1fa6:	2001      	movs	r0, #1
}
    1fa8:	b003      	add	sp, #12
    1faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    1fae:	1aad      	subs	r5, r5, r2
    1fb0:	e7d9      	b.n	1f66 <ExFatFile::seekSet(unsigned long long)+0x9e>
    1fb2:	bf00      	nop

00001fb4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    1fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fb8:	4617      	mov	r7, r2
    1fba:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    1fbe:	b08f      	sub	sp, #60	; 0x3c
    1fc0:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    1fc2:	2a00      	cmp	r2, #0
    1fc4:	f040 80d7 	bne.w	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    1fc8:	468b      	mov	fp, r1
    1fca:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    1fce:	f011 0f50 	tst.w	r1, #80	; 0x50
    1fd2:	f000 80d0 	beq.w	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    1fd6:	f003 0103 	and.w	r1, r3, #3
    1fda:	469a      	mov	sl, r3
    1fdc:	2903      	cmp	r1, #3
    1fde:	f000 80ca 	beq.w	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    1fe2:	3101      	adds	r1, #1
    1fe4:	f003 0008 	and.w	r0, r3, #8
    1fe8:	ea41 0300 	orr.w	r3, r1, r0
    1fec:	9302      	str	r3, [sp, #8]
  if (fname) {
    1fee:	2f00      	cmp	r7, #0
    1ff0:	f000 80cb 	beq.w	218a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    1ff4:	6939      	ldr	r1, [r7, #16]
    1ff6:	f101 080e 	add.w	r8, r1, #14
    1ffa:	49b6      	ldr	r1, [pc, #728]	; (22d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    1ffc:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    2000:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    2004:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    2008:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    200a:	f108 0802 	add.w	r8, r8, #2
    200e:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    2012:	d005      	beq.n	2020 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    2014:	2000      	movs	r0, #0
    2016:	2100      	movs	r1, #0
    m_curCluster = 0;
    2018:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    201c:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    2020:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2022:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    2024:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    202a:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    202c:	2220      	movs	r2, #32
    202e:	a906      	add	r1, sp, #24
    2030:	4658      	mov	r0, fp
    2032:	f7ff fe63 	bl	1cfc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    2036:	b300      	cbz	r0, 207a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    2038:	2820      	cmp	r0, #32
    203a:	f040 809c 	bne.w	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    203e:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    2042:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2046:	2a00      	cmp	r2, #0
    2048:	f2c0 80a2 	blt.w	2190 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    204c:	b934      	cbnz	r4, 205c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    204e:	f8db 2000 	ldr.w	r2, [fp]
    2052:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    2056:	f8db 2018 	ldr.w	r2, [fp, #24]
    205a:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    205c:	4544      	cmp	r4, r8
    205e:	d201      	bcs.n	2064 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    2060:	3401      	adds	r4, #1
    2062:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    2064:	2b00      	cmp	r3, #0
    2066:	f000 8113 	beq.w	2290 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    206a:	2220      	movs	r2, #32
    206c:	a906      	add	r1, sp, #24
    206e:	4658      	mov	r0, fp
      inSet = false;
    2070:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    2072:	f7ff fe43 	bl	1cfc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    2076:	2800      	cmp	r0, #0
    2078:	d1de      	bne.n	2038 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    207a:	f41a 7f00 	tst.w	sl, #512	; 0x200
    207e:	d07a      	beq.n	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    2080:	9b02      	ldr	r3, [sp, #8]
    2082:	079b      	lsls	r3, r3, #30
    2084:	d577      	bpl.n	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    2086:	2f00      	cmp	r7, #0
    2088:	d075      	beq.n	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    208a:	4544      	cmp	r4, r8
    208c:	d217      	bcs.n	20be <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    208e:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    2092:	2220      	movs	r2, #32
    2094:	a906      	add	r1, sp, #24
    2096:	4658      	mov	r0, fp
    2098:	f7ff fe30 	bl	1cfc <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    209c:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    209e:	2800      	cmp	r0, #0
    20a0:	d061      	beq.n	2166 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    20a2:	2820      	cmp	r0, #32
    20a4:	d167      	bne.n	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    20a6:	b92c      	cbnz	r4, 20b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    20a8:	f8db 2000 	ldr.w	r2, [fp]
    20ac:	f8db a018 	ldr.w	sl, [fp, #24]
    20b0:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    20b4:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    20b6:	45a0      	cmp	r8, r4
    20b8:	d8eb      	bhi.n	2092 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    20ba:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    20be:	2238      	movs	r2, #56	; 0x38
    20c0:	2100      	movs	r1, #0
    20c2:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    20c4:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    20c8:	f00a fd78 	bl	cbbc <memset>
  ExFatVolume* volume() const {return m_vol;}
    20cc:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    20d0:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    20d4:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    20d6:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    20d8:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    20da:	2600      	movs	r6, #0
  m_dirPos = freePos;
    20dc:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    20e0:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    20e4:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    20e6:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    20ea:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    20ec:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    20ee:	f1b8 0f00 	cmp.w	r8, #0
    20f2:	d033      	beq.n	215c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    20f4:	f108 39ff 	add.w	r9, r8, #4294967295
    20f8:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    20fa:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 22d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    20fe:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    2102:	2201      	movs	r2, #1
    2104:	4659      	mov	r1, fp
    2106:	4628      	mov	r0, r5
    2108:	f7ff fd6e 	bl	1be8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    210c:	4604      	mov	r4, r0
    210e:	b390      	cbz	r0, 2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    2110:	f990 2000 	ldrsb.w	r2, [r0]
    2114:	2a00      	cmp	r2, #0
    2116:	db2e      	blt.n	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    2118:	2220      	movs	r2, #32
    211a:	2100      	movs	r1, #0
    211c:	f00a fd4e 	bl	cbbc <memset>
    if (i == 0) {
    2120:	2e00      	cmp	r6, #0
    2122:	f000 80bc 	beq.w	229e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    2126:	f1bb 0f01 	cmp.w	fp, #1
    212a:	f000 80d7 	beq.w	22dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    212e:	23c1      	movs	r3, #193	; 0xc1
    2130:	46a3      	mov	fp, r4
    2132:	341e      	adds	r4, #30
    2134:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    2138:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    213a:	4638      	mov	r0, r7
    213c:	b91b      	cbnz	r3, 2146 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    213e:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    2142:	429a      	cmp	r2, r3
    2144:	d005      	beq.n	2152 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    2146:	f004 fe09 	bl	6d5c <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    214a:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    214e:	45a3      	cmp	fp, r4
    2150:	d1f2      	bne.n	2138 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    2152:	3601      	adds	r6, #1
    2154:	fa5f fb86 	uxtb.w	fp, r6
    2158:	45d8      	cmp	r8, fp
    215a:	d8d2      	bhi.n	2102 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    215c:	4628      	mov	r0, r5
    215e:	f000 fa5f 	bl	2620 <ExFatFile::sync()>
    2162:	4606      	mov	r6, r0
    2164:	e00d      	b.n	2182 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    2166:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    2168:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    216c:	f000 fa88 	bl	2680 <ExFatFile::addDirCluster()>
    2170:	2800      	cmp	r0, #0
    2172:	f040 8091 	bne.w	2298 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    2176:	2300      	movs	r3, #0
  return false;
    2178:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    217a:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    217e:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    2182:	4630      	mov	r0, r6
    2184:	b00f      	add	sp, #60	; 0x3c
    2186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    218a:	f04f 0803 	mov.w	r8, #3
    218e:	e747      	b.n	2020 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    2190:	bb56      	cbnz	r6, 21e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    2192:	4544      	cmp	r4, r8
    2194:	bf38      	it	cc
    2196:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    2198:	2b85      	cmp	r3, #133	; 0x85
    219a:	f47f af47 	bne.w	202c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    219e:	4631      	mov	r1, r6
    21a0:	2238      	movs	r2, #56	; 0x38
    21a2:	4628      	mov	r0, r5
      inSet = true;
    21a4:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    21a6:	f00a fd09 	bl	cbbc <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    21aa:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    21ae:	f89d 3019 	ldrb.w	r3, [sp, #25]
    21b2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    21b6:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    21ba:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    21bc:	bf58      	it	pl
    21be:	f043 0308 	orrpl.w	r3, r3, #8
    21c2:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    21c6:	f8db 3000 	ldr.w	r3, [fp]
    21ca:	f8db 2020 	ldr.w	r2, [fp, #32]
    21ce:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    21d0:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    21d2:	f8db 2018 	ldr.w	r2, [fp, #24]
    21d6:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    21da:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    21de:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    21e2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    21e6:	e721      	b.n	202c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    21e8:	2bc0      	cmp	r3, #192	; 0xc0
    21ea:	d028      	beq.n	223e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    21ec:	2bc1      	cmp	r3, #193	; 0xc1
    21ee:	f47f af3c 	bne.w	206a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    21f2:	463a      	mov	r2, r7
    21f4:	a906      	add	r1, sp, #24
    21f6:	4628      	mov	r0, r5
    21f8:	f000 fce8 	bl	2bcc <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    21fc:	b1e8      	cbz	r0, 223a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    21fe:	89bb      	ldrh	r3, [r7, #12]
    2200:	b9db      	cbnz	r3, 223a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    2202:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    2206:	429a      	cmp	r2, r3
    2208:	d117      	bne.n	223a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    220a:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    220e:	d1b2      	bne.n	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    2210:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    2214:	d170      	bne.n	22f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    2216:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    221a:	0798      	lsls	r0, r3, #30
    221c:	d46c      	bmi.n	22f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    221e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    2222:	d1a8      	bne.n	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    2224:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    2228:	d0ab      	beq.n	2182 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    222a:	4628      	mov	r0, r5
    222c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    2230:	f7ff fe4a 	bl	1ec8 <ExFatFile::seekSet(unsigned long long)>
    2234:	2800      	cmp	r0, #0
    2236:	d1a4      	bne.n	2182 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    2238:	e79d      	b.n	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    223a:	4606      	mov	r6, r0
    223c:	e6f6      	b.n	202c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    223e:	9b02      	ldr	r3, [sp, #8]
    2240:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    2244:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2248:	079b      	lsls	r3, r3, #30
    224a:	d502      	bpl.n	2252 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    224c:	9b03      	ldr	r3, [sp, #12]
    224e:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    2252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2254:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    2256:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    225a:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    225e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    2262:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    2266:	2f00      	cmp	r7, #0
    2268:	d0cf      	beq.n	220a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    226a:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    226e:	693a      	ldr	r2, [r7, #16]
    2270:	81bb      	strh	r3, [r7, #12]
    next = begin;
    2272:	683b      	ldr	r3, [r7, #0]
    2274:	607b      	str	r3, [r7, #4]
    2276:	f89d 301b 	ldrb.w	r3, [sp, #27]
    227a:	429a      	cmp	r2, r3
    227c:	f47f aef5 	bne.w	206a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    2280:	8abe      	ldrh	r6, [r7, #20]
    2282:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    2286:	1af6      	subs	r6, r6, r3
    2288:	fab6 f686 	clz	r6, r6
    228c:	0976      	lsrs	r6, r6, #5
    228e:	e6cd      	b.n	202c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    2290:	2f00      	cmp	r7, #0
    2292:	f47f aef2 	bne.w	207a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    2296:	e76e      	b.n	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    2298:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    229c:	e70b      	b.n	20b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    229e:	2385      	movs	r3, #133	; 0x85
    22a0:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    22a2:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    22a6:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    22aa:	f8da 3000 	ldr.w	r3, [sl]
    22ae:	2b00      	cmp	r3, #0
    22b0:	d046      	beq.n	2340 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    22b2:	f10d 0213 	add.w	r2, sp, #19
    22b6:	f10d 0116 	add.w	r1, sp, #22
    22ba:	a805      	add	r0, sp, #20
    22bc:	4798      	blx	r3
    22be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    22c2:	8163      	strh	r3, [r4, #10]
    22c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    22c8:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    22ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    22ce:	7523      	strb	r3, [r4, #20]
    22d0:	e73f      	b.n	2152 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    22d2:	bf00      	nop
    22d4:	88888889 	.word	0x88888889
    22d8:	200200a4 	.word	0x200200a4
      dirStream->type = EXFAT_TYPE_STREAM;
    22dc:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    22de:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    22e2:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    22e4:	9b02      	ldr	r3, [sp, #8]
    22e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    22ea:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    22ee:	693b      	ldr	r3, [r7, #16]
    22f0:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    22f2:	8abb      	ldrh	r3, [r7, #20]
    22f4:	80a3      	strh	r3, [r4, #4]
}
    22f6:	e72c      	b.n	2152 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    22f8:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    22fc:	06d9      	lsls	r1, r3, #27
    22fe:	f53f af3a 	bmi.w	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    2302:	f013 0101 	ands.w	r1, r3, #1
    2306:	f47f af36 	bne.w	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    230a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    230e:	d089      	beq.n	2224 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    2310:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    2314:	0792      	lsls	r2, r2, #30
    2316:	f57f af2e 	bpl.w	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    231a:	2b00      	cmp	r3, #0
    231c:	f43f af2b 	beq.w	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    2320:	e9d5 3200 	ldrd	r3, r2, [r5]
    2324:	4313      	orrs	r3, r2
    2326:	d004      	beq.n	2332 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    2328:	2200      	movs	r2, #0
    232a:	2300      	movs	r3, #0
    m_curCluster = 0;
    232c:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    232e:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    2332:	4628      	mov	r0, r5
    2334:	f000 fa98 	bl	2868 <ExFatFile::truncate()>
    2338:	2800      	cmp	r0, #0
    233a:	f43f af1c 	beq.w	2176 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    233e:	e720      	b.n	2182 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    2340:	f245 6321 	movw	r3, #22049	; 0x5621
    2344:	8163      	strh	r3, [r4, #10]
    2346:	81e3      	strh	r3, [r4, #14]
    2348:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    234a:	e702      	b.n	2152 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

0000234c <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    234c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    2350:	2500      	movs	r5, #0
    2352:	b097      	sub	sp, #92	; 0x5c
    2354:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    2356:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    235a:	9201      	str	r2, [sp, #4]
    235c:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    235e:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    2362:	2b00      	cmp	r3, #0
    2364:	d13e      	bne.n	23e4 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    2366:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    236a:	460f      	mov	r7, r1
    236c:	f013 0f50 	tst.w	r3, #80	; 0x50
    2370:	d038      	beq.n	23e4 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    2372:	7813      	ldrb	r3, [r2, #0]
    2374:	4604      	mov	r4, r0
    2376:	4616      	mov	r6, r2
    2378:	2b2f      	cmp	r3, #47	; 0x2f
    237a:	d037      	beq.n	23ec <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    237c:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    2380:	ab01      	add	r3, sp, #4
    2382:	aa02      	add	r2, sp, #8
    2384:	4631      	mov	r1, r6
    2386:	4620      	mov	r0, r4
    2388:	f7ff fc6a 	bl	1c60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    238c:	b350      	cbz	r0, 23e4 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    238e:	9e01      	ldr	r6, [sp, #4]
    2390:	7833      	ldrb	r3, [r6, #0]
    2392:	2b00      	cmp	r3, #0
    2394:	d03e      	beq.n	2414 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2396:	2300      	movs	r3, #0
    2398:	aa02      	add	r2, sp, #8
    239a:	4639      	mov	r1, r7
    239c:	4620      	mov	r0, r4
    239e:	f7ff fe09 	bl	1fb4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    23a2:	b1f8      	cbz	r0, 23e4 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    23a4:	46a4      	mov	ip, r4
    23a6:	ad08      	add	r5, sp, #32
    23a8:	f104 0730 	add.w	r7, r4, #48	; 0x30
    23ac:	f8dc 0000 	ldr.w	r0, [ip]
    23b0:	f10c 0c10 	add.w	ip, ip, #16
    23b4:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    23b8:	46ae      	mov	lr, r5
    23ba:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    23be:	3510      	adds	r5, #16
    23c0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    23c4:	45bc      	cmp	ip, r7
    23c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    23ca:	d1ef      	bne.n	23ac <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    23cc:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    23d0:	af08      	add	r7, sp, #32
    tmpDir = *this;
    23d2:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    23d4:	4620      	mov	r0, r4
    23d6:	f000 f923 	bl	2620 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    23da:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    23de:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    23e2:	e7cd      	b.n	2380 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    23e4:	2000      	movs	r0, #0
}
    23e6:	b017      	add	sp, #92	; 0x5c
    23e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    23ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    23f0:	292f      	cmp	r1, #47	; 0x2f
    23f2:	d0fb      	beq.n	23ec <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    23f4:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    23f6:	b9b1      	cbnz	r1, 2426 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    23f8:	2238      	movs	r2, #56	; 0x38
    23fa:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    23fc:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    23fe:	f00a fbdd 	bl	cbbc <memset>
  m_flags = FILE_FLAG_READ;
    2402:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    2404:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    2406:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    2408:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    240a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    240e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    2412:	e7e8      	b.n	23e6 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    2414:	464b      	mov	r3, r9
    2416:	aa02      	add	r2, sp, #8
    2418:	4639      	mov	r1, r7
    241a:	4620      	mov	r0, r4
    241c:	f7ff fdca 	bl	1fb4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    2420:	b017      	add	sp, #92	; 0x5c
    2422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    2426:	2238      	movs	r2, #56	; 0x38
    2428:	2100      	movs	r1, #0
    242a:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    242c:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    242e:	f00a fbc5 	bl	cbbc <memset>
  m_flags = FILE_FLAG_READ;
    2432:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    2434:	af08      	add	r7, sp, #32
  m_vol = vol;
    2436:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    2438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    243c:	2340      	movs	r3, #64	; 0x40
    243e:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    2442:	e79b      	b.n	237c <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

00002444 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    2444:	b119      	cbz	r1, 244e <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    2446:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    244a:	f7ff bf7f 	b.w	234c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    244e:	4608      	mov	r0, r1
    2450:	4770      	bx	lr
    2452:	bf00      	nop

00002454 <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    2454:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    2456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2458:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    245a:	6a00      	ldr	r0, [r0, #32]
    245c:	b101      	cbz	r1, 2460 <ExFatFile::addCluster()+0xc>
    245e:	3101      	adds	r1, #1
    2460:	2201      	movs	r2, #1
    2462:	f000 fc0f 	bl	2c84 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    2466:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    2468:	4605      	mov	r5, r0
  if (find < 2) {
    246a:	d932      	bls.n	24d2 <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    246c:	2301      	movs	r3, #1
    246e:	4601      	mov	r1, r0
    2470:	6a20      	ldr	r0, [r4, #32]
    2472:	461a      	mov	r2, r3
    2474:	f000 fc66 	bl	2d44 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2478:	4606      	mov	r6, r0
    247a:	b350      	cbz	r0, 24d2 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    247c:	69a3      	ldr	r3, [r4, #24]
    247e:	b35b      	cbz	r3, 24d8 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    2480:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    2484:	0651      	lsls	r1, r2, #25
    2486:	d512      	bpl.n	24ae <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    2488:	1c59      	adds	r1, r3, #1
    248a:	42a9      	cmp	r1, r5
    248c:	d018      	beq.n	24c0 <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    248e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2492:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2494:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2498:	e005      	b.n	24a6 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    249a:	6a20      	ldr	r0, [r4, #32]
    249c:	f000 fd4e 	bl	2f3c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    24a0:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    24a2:	b1b0      	cbz	r0, 24d2 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    24a4:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    24a6:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    24a8:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    24aa:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    24ac:	d3f5      	bcc.n	249a <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    24ae:	f04f 32ff 	mov.w	r2, #4294967295
    24b2:	4629      	mov	r1, r5
    24b4:	6a20      	ldr	r0, [r4, #32]
    24b6:	f000 fd41 	bl	2f3c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    24ba:	b150      	cbz	r0, 24d2 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    24bc:	69a1      	ldr	r1, [r4, #24]
    24be:	b911      	cbnz	r1, 24c6 <ExFatFile::addCluster()+0x72>
}
    24c0:	4630      	mov	r0, r6
  m_curCluster = find;
    24c2:	61a5      	str	r5, [r4, #24]
}
    24c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    24c6:	462a      	mov	r2, r5
    24c8:	6a20      	ldr	r0, [r4, #32]
    24ca:	f000 fd37 	bl	2f3c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    24ce:	2800      	cmp	r0, #0
    24d0:	d1f6      	bne.n	24c0 <ExFatFile::addCluster()+0x6c>
  return false;
    24d2:	2600      	movs	r6, #0
}
    24d4:	4630      	mov	r0, r6
    24d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    24d8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    24dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    24e0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    24e4:	e7ec      	b.n	24c0 <ExFatFile::addCluster()+0x6c>
    24e6:	bf00      	nop

000024e8 <ExFatFile::syncDir()>:
bool ExFatFile::syncDir() {
    24e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24ec:	f04f 0800 	mov.w	r8, #0
    24f0:	b082      	sub	sp, #8
        if (FsDateTime::callback) {
    24f2:	4f4a      	ldr	r7, [pc, #296]	; (261c <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    24f4:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    24f6:	4644      	mov	r4, r8
    24f8:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    24fa:	2200      	movs	r2, #0
    24fc:	4630      	mov	r0, r6
    24fe:	f7ff fb73 	bl	1be8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    2502:	4605      	mov	r5, r0
    2504:	b130      	cbz	r0, 2514 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    2506:	7801      	ldrb	r1, [r0, #0]
    2508:	29c0      	cmp	r1, #192	; 0xc0
    250a:	d069      	beq.n	25e0 <ExFatFile::syncDir()+0xf8>
    250c:	29c1      	cmp	r1, #193	; 0xc1
    250e:	d02b      	beq.n	2568 <ExFatFile::syncDir()+0x80>
    2510:	2985      	cmp	r1, #133	; 0x85
    2512:	d009      	beq.n	2528 <ExFatFile::syncDir()+0x40>
  m_error |= WRITE_ERROR;
    2514:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    2518:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    251a:	f043 0301 	orr.w	r3, r3, #1
    251e:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    2522:	b002      	add	sp, #8
    2524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    2528:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    252c:	f003 0337 	and.w	r3, r3, #55	; 0x37
    2530:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    2532:	683b      	ldr	r3, [r7, #0]
    2534:	b183      	cbz	r3, 2558 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    2536:	f10d 0203 	add.w	r2, sp, #3
    253a:	f10d 0106 	add.w	r1, sp, #6
    253e:	a801      	add	r0, sp, #4
    2540:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    2542:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    2546:	81ab      	strh	r3, [r5, #12]
    2548:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    254a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    254e:	81eb      	strh	r3, [r5, #14]
    2550:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    2552:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2556:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    2558:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    255a:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    255e:	f043 0301 	orr.w	r3, r3, #1
    2562:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2566:	7829      	ldrb	r1, [r5, #0]
    2568:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    256c:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    256e:	fab0 f080 	clz	r0, r0
    2572:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2574:	e001      	b.n	257a <ExFatFile::syncDir()+0x92>
    2576:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2578:	5ca9      	ldrb	r1, [r5, r2]
    257a:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    257c:	2a01      	cmp	r2, #1
    257e:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2582:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    2586:	fa11 f383 	uxtah	r3, r1, r3
    258a:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    258c:	d101      	bne.n	2592 <ExFatFile::syncDir()+0xaa>
    258e:	2800      	cmp	r0, #0
    2590:	d1f1      	bne.n	2576 <ExFatFile::syncDir()+0x8e>
    2592:	2a1f      	cmp	r2, #31
    2594:	d9f0      	bls.n	2578 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    2596:	f108 0801 	add.w	r8, r8, #1
    259a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    259e:	fa5f f188 	uxtb.w	r1, r8
    25a2:	428b      	cmp	r3, r1
    25a4:	d2a9      	bcs.n	24fa <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    25a6:	2201      	movs	r2, #1
    25a8:	f106 0124 	add.w	r1, r6, #36	; 0x24
    25ac:	6a30      	ldr	r0, [r6, #32]
    25ae:	f000 fc45 	bl	2e3c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    25b2:	2800      	cmp	r0, #0
    25b4:	d0ae      	beq.n	2514 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    25b6:	6a35      	ldr	r5, [r6, #32]
    25b8:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    25ba:	4628      	mov	r0, r5
    25bc:	f004 fb7a 	bl	6cb4 <FsCache::sync()>
    25c0:	2800      	cmp	r0, #0
    25c2:	d0a7      	beq.n	2514 <ExFatFile::syncDir()+0x2c>
    25c4:	f505 7004 	add.w	r0, r5, #528	; 0x210
    25c8:	f004 fb74 	bl	6cb4 <FsCache::sync()>
    25cc:	2800      	cmp	r0, #0
    25ce:	d0a1      	beq.n	2514 <ExFatFile::syncDir()+0x2c>
    25d0:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    25d4:	6803      	ldr	r3, [r0, #0]
    25d6:	6a1b      	ldr	r3, [r3, #32]
    25d8:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    25da:	2800      	cmp	r0, #0
    25dc:	d1a1      	bne.n	2522 <ExFatFile::syncDir()+0x3a>
    25de:	e799      	b.n	2514 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    25e0:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    25e4:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    25e8:	7843      	ldrb	r3, [r0, #1]
    25ea:	bf14      	ite	ne
    25ec:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    25f0:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    25f4:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    25f6:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    25fa:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    25fe:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    2602:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    2606:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    2608:	e9c5 0106 	strd	r0, r1, [r5, #24]
    260c:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    2610:	f043 0301 	orr.w	r3, r3, #1
    2614:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2618:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    261a:	e7a5      	b.n	2568 <ExFatFile::syncDir()+0x80>
    261c:	200200a4 	.word	0x200200a4

00002620 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    2620:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    2622:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2626:	b343      	cbz	r3, 267a <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    2628:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    262c:	4604      	mov	r4, r0
    262e:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    2632:	2a00      	cmp	r2, #0
    2634:	db0c      	blt.n	2650 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    2636:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2638:	4628      	mov	r0, r5
    263a:	f004 fb3b 	bl	6cb4 <FsCache::sync()>
    263e:	b978      	cbnz	r0, 2660 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    2640:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    2644:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2646:	f043 0301 	orr.w	r3, r3, #1
    264a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    264e:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2654:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    2658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    265c:	f7ff bf44 	b.w	24e8 <ExFatFile::syncDir()>
    2660:	f505 7004 	add.w	r0, r5, #528	; 0x210
    2664:	f004 fb26 	bl	6cb4 <FsCache::sync()>
    2668:	2800      	cmp	r0, #0
    266a:	d0e9      	beq.n	2640 <ExFatFile::sync()+0x20>
    266c:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    2670:	6803      	ldr	r3, [r0, #0]
    2672:	6a1b      	ldr	r3, [r3, #32]
    2674:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2676:	2800      	cmp	r0, #0
    2678:	d0e2      	beq.n	2640 <ExFatFile::sync()+0x20>
    return true;
    267a:	2001      	movs	r0, #1
}
    267c:	bd38      	pop	{r3, r4, r5, pc}
    267e:	bf00      	nop

00002680 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    2680:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2682:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    2686:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2688:	065a      	lsls	r2, r3, #25
    268a:	d44c      	bmi.n	2726 <ExFatFile::addDirCluster()+0xa6>
    268c:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    268e:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    2690:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    2694:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    2696:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    269a:	d301      	bcc.n	26a0 <ExFatFile::addDirCluster()+0x20>
}
    269c:	2000      	movs	r0, #0
    269e:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    26a0:	4628      	mov	r0, r5
    26a2:	f7ff fed7 	bl	2454 <ExFatFile::addCluster()>
    26a6:	2800      	cmp	r0, #0
    26a8:	d0f8      	beq.n	269c <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    26aa:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    26ac:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    26ae:	69ae      	ldr	r6, [r5, #24]
    26b0:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    26b4:	3e02      	subs	r6, #2
    26b6:	409e      	lsls	r6, r3
    26b8:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    26bc:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    26be:	1931      	adds	r1, r6, r4
    26c0:	2205      	movs	r2, #5
    26c2:	f500 7004 	add.w	r0, r0, #528	; 0x210
    26c6:	3401      	adds	r4, #1
    26c8:	f004 fb20 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    26cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    26d0:	2100      	movs	r1, #0
    if (!cache) {
    26d2:	2800      	cmp	r0, #0
    26d4:	d0e2      	beq.n	269c <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    26d6:	f00a fa71 	bl	cbbc <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    26da:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    26dc:	2301      	movs	r3, #1
    26de:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    26e2:	4093      	lsls	r3, r2
    26e4:	429c      	cmp	r4, r3
    26e6:	d3ea      	bcc.n	26be <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    26e8:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    26ec:	065b      	lsls	r3, r3, #25
    26ee:	d415      	bmi.n	271c <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    26f0:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    26f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    26f8:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    26fc:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    2700:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    2704:	189b      	adds	r3, r3, r2
    2706:	f141 0000 	adc.w	r0, r1, #0
    270a:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    270c:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    2710:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    2712:	189b      	adds	r3, r3, r2
    2714:	f141 0100 	adc.w	r1, r1, #0
    2718:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    271c:	4628      	mov	r0, r5
}
    271e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    2722:	f7ff bf7d 	b.w	2620 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2726:	6a00      	ldr	r0, [r0, #32]
    2728:	f000 fcf8 	bl	311c <ExFatPartition::rootLength()>
    272c:	e7af      	b.n	268e <ExFatFile::addDirCluster()+0xe>
    272e:	bf00      	nop

00002730 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    2730:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    2732:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2736:	f013 0f50 	tst.w	r3, #80	; 0x50
    273a:	d102      	bne.n	2742 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    273c:	2500      	movs	r5, #0
}
    273e:	4628      	mov	r0, r5
    2740:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    2742:	f640 2302 	movw	r3, #2562	; 0xa02
    2746:	4604      	mov	r4, r0
    2748:	f7ff fc34 	bl	1fb4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    274c:	2800      	cmp	r0, #0
    274e:	d0f5      	beq.n	273c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    2750:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    2752:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    2754:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    2758:	f7ff ff92 	bl	2680 <ExFatFile::addDirCluster()>
    275c:	4605      	mov	r5, r0
    275e:	2800      	cmp	r0, #0
    2760:	d0ec      	beq.n	273c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    2762:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    2764:	2200      	movs	r2, #0
    2766:	2300      	movs	r3, #0
    2768:	4620      	mov	r0, r4
    276a:	61e1      	str	r1, [r4, #28]
    276c:	f7ff fbac 	bl	1ec8 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    2770:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    2772:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    2776:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    277a:	2b00      	cmp	r3, #0
    277c:	d0df      	beq.n	273e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    277e:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    2780:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2782:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    278a:	f7ff bead 	b.w	24e8 <ExFatFile::syncDir()>
    278e:	bf00      	nop

00002790 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2790:	b5f0      	push	{r4, r5, r6, r7, lr}
    2792:	2500      	movs	r5, #0
    2794:	b097      	sub	sp, #92	; 0x5c
    2796:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    2798:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    279c:	9201      	str	r2, [sp, #4]
    279e:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    27a2:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    27a4:	2b00      	cmp	r3, #0
    27a6:	d146      	bne.n	2836 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    27a8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    27ac:	460e      	mov	r6, r1
    27ae:	f013 0f50 	tst.w	r3, #80	; 0x50
    27b2:	d040      	beq.n	2836 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    27b4:	7813      	ldrb	r3, [r2, #0]
    27b6:	4604      	mov	r4, r0
    27b8:	4611      	mov	r1, r2
    27ba:	2b2f      	cmp	r3, #47	; 0x2f
    27bc:	d03e      	beq.n	283c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    27be:	ab01      	add	r3, sp, #4
    27c0:	aa02      	add	r2, sp, #8
    27c2:	4620      	mov	r0, r4
    27c4:	f7ff fa4c 	bl	1c60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    27c8:	2800      	cmp	r0, #0
    27ca:	d034      	beq.n	2836 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    27cc:	9b01      	ldr	r3, [sp, #4]
    27ce:	781b      	ldrb	r3, [r3, #0]
    27d0:	2b00      	cmp	r3, #0
    27d2:	d041      	beq.n	2858 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    27d4:	2300      	movs	r3, #0
    27d6:	aa02      	add	r2, sp, #8
    27d8:	4631      	mov	r1, r6
    27da:	4620      	mov	r0, r4
    27dc:	f7ff fbea 	bl	1fb4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    27e0:	b930      	cbnz	r0, 27f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    27e2:	b347      	cbz	r7, 2836 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    27e4:	aa02      	add	r2, sp, #8
    27e6:	4631      	mov	r1, r6
    27e8:	4620      	mov	r0, r4
    27ea:	f7ff ffa1 	bl	2730 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    27ee:	b310      	cbz	r0, 2836 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    27f0:	46a4      	mov	ip, r4
    27f2:	ad08      	add	r5, sp, #32
    27f4:	f104 0630 	add.w	r6, r4, #48	; 0x30
    27f8:	f8dc 0000 	ldr.w	r0, [ip]
    27fc:	f10c 0c10 	add.w	ip, ip, #16
    2800:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    2804:	46ae      	mov	lr, r5
    2806:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    280a:	3510      	adds	r5, #16
    280c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    2810:	45b4      	cmp	ip, r6
    2812:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2816:	d1ef      	bne.n	27f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    2818:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    281c:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    281e:	6028      	str	r0, [r5, #0]
    close();
    2820:	4620      	mov	r0, r4
    2822:	f7ff f9ff 	bl	1c24 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    2826:	9901      	ldr	r1, [sp, #4]
    2828:	ab01      	add	r3, sp, #4
    282a:	aa02      	add	r2, sp, #8
    282c:	4620      	mov	r0, r4
    282e:	f7ff fa17 	bl	1c60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2832:	2800      	cmp	r0, #0
    2834:	d1ca      	bne.n	27cc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    2836:	2000      	movs	r0, #0
}
    2838:	b017      	add	sp, #92	; 0x5c
    283a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    283c:	3101      	adds	r1, #1
    283e:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    2840:	780b      	ldrb	r3, [r1, #0]
    2842:	2b2f      	cmp	r3, #47	; 0x2f
    2844:	d0fa      	beq.n	283c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    2846:	6a31      	ldr	r1, [r6, #32]
    2848:	a808      	add	r0, sp, #32
    284a:	f7ff f9f5 	bl	1c38 <ExFatFile::openRoot(ExFatVolume*)>
    284e:	2800      	cmp	r0, #0
    2850:	d0f1      	beq.n	2836 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    2852:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    2854:	ae08      	add	r6, sp, #32
    2856:	e7b2      	b.n	27be <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    2858:	aa02      	add	r2, sp, #8
    285a:	4631      	mov	r1, r6
    285c:	4620      	mov	r0, r4
    285e:	f7ff ff67 	bl	2730 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    2862:	b017      	add	sp, #92	; 0x5c
    2864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2866:	bf00      	nop

00002868 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    2868:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    286c:	079a      	lsls	r2, r3, #30
    286e:	d562      	bpl.n	2936 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    2870:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    2872:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    2874:	b082      	sub	sp, #8
    2876:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    2878:	b3a5      	cbz	r5, 28e4 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    287a:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    287e:	d034      	beq.n	28ea <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2880:	6a00      	ldr	r0, [r0, #32]
    2882:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2884:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    2888:	3a01      	subs	r2, #1
    288a:	68e1      	ldr	r1, [r4, #12]
    288c:	f10c 0c09 	add.w	ip, ip, #9
    2890:	f141 31ff 	adc.w	r1, r1, #4294967295
    2894:	fa5f fc8c 	uxtb.w	ip, ip
    2898:	f1cc 0e20 	rsb	lr, ip, #32
    289c:	fa22 f20c 	lsr.w	r2, r2, ip
    28a0:	f1ac 0c20 	sub.w	ip, ip, #32
    28a4:	fa01 fe0e 	lsl.w	lr, r1, lr
    28a8:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    28ac:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    28ae:	ea42 020e 	orr.w	r2, r2, lr
    28b2:	ea42 020c 	orr.w	r2, r2, ip
    28b6:	3201      	adds	r2, #1
    if (m_curCluster) {
    28b8:	b319      	cbz	r1, 2902 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    28ba:	3d01      	subs	r5, #1
    28bc:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    28be:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    28c0:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    28c2:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    28c4:	bb72      	cbnz	r2, 2924 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    28c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    28ca:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    28cc:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    28d0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    28d4:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    28d8:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    28dc:	f7ff fea0 	bl	2620 <ExFatFile::sync()>

 fail:
  return false;
}
    28e0:	b002      	add	sp, #8
    28e2:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    28e4:	2001      	movs	r0, #1
}
    28e6:	b002      	add	sp, #8
    28e8:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    28ea:	6981      	ldr	r1, [r0, #24]
    28ec:	b961      	cbnz	r1, 2908 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    28ee:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    28f0:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    28f2:	4629      	mov	r1, r5
    28f4:	6a20      	ldr	r0, [r4, #32]
    28f6:	f000 fb41 	bl	2f7c <ExFatPartition::freeChain(unsigned long)>
    28fa:	b1c8      	cbz	r0, 2930 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    28fc:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2900:	e7e1      	b.n	28c6 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    2902:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2904:	61e1      	str	r1, [r4, #28]
    2906:	e7dd      	b.n	28c4 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2908:	aa01      	add	r2, sp, #4
    290a:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    290c:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    290e:	f000 faf3 	bl	2ef8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    2912:	2800      	cmp	r0, #0
    2914:	db0c      	blt.n	2930 <ExFatFile::truncate()+0xc8>
      if (fg) {
    2916:	d110      	bne.n	293a <ExFatFile::truncate()+0xd2>
    if (toFree) {
    2918:	9d01      	ldr	r5, [sp, #4]
    291a:	2d00      	cmp	r5, #0
    291c:	d1e9      	bne.n	28f2 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    291e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2922:	e7d0      	b.n	28c6 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2924:	2300      	movs	r3, #0
    2926:	9901      	ldr	r1, [sp, #4]
    2928:	f000 fa0c 	bl	2d44 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    292c:	2800      	cmp	r0, #0
    292e:	d1e5      	bne.n	28fc <ExFatFile::truncate()+0x94>
  return false;
    2930:	2000      	movs	r0, #0
}
    2932:	b002      	add	sp, #8
    2934:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2936:	2000      	movs	r0, #0
}
    2938:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    293a:	f04f 32ff 	mov.w	r2, #4294967295
    293e:	69a1      	ldr	r1, [r4, #24]
    2940:	6a20      	ldr	r0, [r4, #32]
    2942:	f000 fafb 	bl	2f3c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2946:	2800      	cmp	r0, #0
    2948:	d1e6      	bne.n	2918 <ExFatFile::truncate()+0xb0>
    294a:	e7f1      	b.n	2930 <ExFatFile::truncate()+0xc8>

0000294c <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    294c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2950:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    2954:	b083      	sub	sp, #12
    2956:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    2958:	079d      	lsls	r5, r3, #30
    295a:	f140 80a1 	bpl.w	2aa0 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    295e:	4691      	mov	r9, r2
    2960:	071a      	lsls	r2, r3, #28
    2962:	460e      	mov	r6, r1
    2964:	f100 8095 	bmi.w	2a92 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    2968:	f1b9 0f00 	cmp.w	r9, #0
    296c:	f000 8128 	beq.w	2bc0 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    2970:	6823      	ldr	r3, [r4, #0]
    2972:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2974:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    2976:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2978:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    297c:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    2980:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    2984:	f1b8 0f00 	cmp.w	r8, #0
    2988:	f040 8094 	bne.w	2ab4 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    298c:	2900      	cmp	r1, #0
    298e:	f000 80d4 	beq.w	2b3a <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    2992:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2996:	065b      	lsls	r3, r3, #25
    2998:	f140 80ec 	bpl.w	2b74 <ExFatFile::write(void const*, unsigned int)+0x228>
    299c:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    29a0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    29a4:	f10c 0c09 	add.w	ip, ip, #9
    29a8:	3b01      	subs	r3, #1
    29aa:	fa5f fc8c 	uxtb.w	ip, ip
    29ae:	f142 32ff 	adc.w	r2, r2, #4294967295
    29b2:	f1cc 0e20 	rsb	lr, ip, #32
    29b6:	fa23 f30c 	lsr.w	r3, r3, ip
    29ba:	f1ac 0c20 	sub.w	ip, ip, #32
    29be:	fa02 fe0e 	lsl.w	lr, r2, lr
    29c2:	fa22 fc0c 	lsr.w	ip, r2, ip
    29c6:	69e2      	ldr	r2, [r4, #28]
    29c8:	ea43 030e 	orr.w	r3, r3, lr
    29cc:	ea43 030c 	orr.w	r3, r3, ip
    29d0:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    29d2:	4299      	cmp	r1, r3
    29d4:	f080 80d5 	bcs.w	2b82 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    29d8:	3101      	adds	r1, #1
    29da:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    29dc:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    29e0:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    29e2:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    29e6:	4091      	lsls	r1, r2
    29e8:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    29ea:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    29ee:	f0c0 808a 	bcc.w	2b06 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    29f2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    29f6:	f0c0 80a6 	bcc.w	2b46 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    29fa:	2301      	movs	r3, #1
    29fc:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    29fe:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    2a00:	eba3 0308 	sub.w	r3, r3, r8
    2a04:	4293      	cmp	r3, r2
    2a06:	bf28      	it	cs
    2a08:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    2a0a:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    2a0e:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    2a10:	ea4f 2843 	mov.w	r8, r3, lsl #9
    2a14:	d309      	bcc.n	2a2a <ExFatFile::write(void const*, unsigned int)+0xde>
    2a16:	185f      	adds	r7, r3, r1
    2a18:	42ba      	cmp	r2, r7
    2a1a:	d206      	bcs.n	2a2a <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    2a1c:	2200      	movs	r2, #0
    2a1e:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2a22:	f04f 32ff 	mov.w	r2, #4294967295
    2a26:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    2a2a:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2a2e:	4632      	mov	r2, r6
    2a30:	6807      	ldr	r7, [r0, #0]
    2a32:	6abf      	ldr	r7, [r7, #40]	; 0x28
    2a34:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    2a36:	b398      	cbz	r0, 2aa0 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    2a38:	4643      	mov	r3, r8
    src += n;
    2a3a:	4446      	add	r6, r8
    toWrite -= n;
    2a3c:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    2a40:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    2a44:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    2a48:	19db      	adds	r3, r3, r7
    2a4a:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    2a4e:	4298      	cmp	r0, r3
    2a50:	4191      	sbcs	r1, r2
    m_curPosition += n;
    2a52:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    2a56:	d207      	bcs.n	2a68 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2a58:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2a5c:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    2a60:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2a64:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    2a68:	2d00      	cmp	r5, #0
    2a6a:	d183      	bne.n	2974 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    2a6c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    2a70:	4298      	cmp	r0, r3
    2a72:	4191      	sbcs	r1, r2
    2a74:	f0c0 8096 	bcc.w	2ba4 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    2a78:	4b53      	ldr	r3, [pc, #332]	; (2bc8 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    2a7a:	681b      	ldr	r3, [r3, #0]
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	f000 809d 	beq.w	2bbc <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2a82:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2a86:	4648      	mov	r0, r9
    2a88:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2a8c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    2a90:	e00d      	b.n	2aae <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    2a92:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    2a96:	f7ff fa17 	bl	1ec8 <ExFatFile::seekSet(unsigned long long)>
    2a9a:	2800      	cmp	r0, #0
    2a9c:	f47f af64 	bne.w	2968 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    2aa0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    2aa4:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2aa6:	f043 0301 	orr.w	r3, r3, #1
    2aaa:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2aae:	b003      	add	sp, #12
    2ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    2ab4:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2ab8:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2aba:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    2abe:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2ac2:	4091      	lsls	r1, r2
    2ac4:	4441      	add	r1, r8
    2ac6:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2ac8:	2f00      	cmp	r7, #0
    2aca:	d08e      	beq.n	29ea <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    2acc:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    2ad0:	2201      	movs	r2, #1
    2ad2:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2ad6:	45a8      	cmp	r8, r5
    2ad8:	bf28      	it	cs
    2ada:	46a8      	movcs	r8, r5
    2adc:	f004 f916 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2ae0:	2800      	cmp	r0, #0
    2ae2:	d0dd      	beq.n	2aa0 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2ae4:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2ae6:	4447      	add	r7, r8
      memcpy(dst, src, n);
    2ae8:	4642      	mov	r2, r8
    2aea:	4631      	mov	r1, r6
    2aec:	f005 fdf2 	bl	86d4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2af0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    2af4:	6a20      	ldr	r0, [r4, #32]
    2af6:	d19f      	bne.n	2a38 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    2af8:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2afc:	f004 f8da 	bl	6cb4 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    2b00:	2800      	cmp	r0, #0
    2b02:	d199      	bne.n	2a38 <ExFatFile::write(void const*, unsigned int)+0xec>
    2b04:	e7cc      	b.n	2aa0 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    2b06:	6862      	ldr	r2, [r4, #4]
    2b08:	6963      	ldr	r3, [r4, #20]
    2b0a:	9200      	str	r2, [sp, #0]
    2b0c:	9301      	str	r3, [sp, #4]
    2b0e:	6922      	ldr	r2, [r4, #16]
    2b10:	6823      	ldr	r3, [r4, #0]
    2b12:	4293      	cmp	r3, r2
    2b14:	e9dd 2300 	ldrd	r2, r3, [sp]
    2b18:	419a      	sbcs	r2, r3
    2b1a:	d212      	bcs.n	2b42 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    2b1c:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    2b1e:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2b22:	f004 f8f3 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2b26:	2800      	cmp	r0, #0
    2b28:	d0ba      	beq.n	2aa0 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2b2a:	462a      	mov	r2, r5
    2b2c:	4631      	mov	r1, r6
    2b2e:	4438      	add	r0, r7
    m_curPosition += n;
    2b30:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    2b32:	f005 fdcf 	bl	86d4 <memcpy>
    m_curPosition += n;
    2b36:	462b      	mov	r3, r5
    2b38:	e77f      	b.n	2a3a <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    2b3a:	69e1      	ldr	r1, [r4, #28]
    2b3c:	b349      	cbz	r1, 2b92 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    2b3e:	61a1      	str	r1, [r4, #24]
    2b40:	e74c      	b.n	29dc <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    2b42:	2205      	movs	r2, #5
    2b44:	e7eb      	b.n	2b1e <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    2b46:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    2b4a:	428b      	cmp	r3, r1
    2b4c:	d106      	bne.n	2b5c <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    2b4e:	2300      	movs	r3, #0
    2b50:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2b54:	f04f 33ff 	mov.w	r3, #4294967295
    2b58:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    2b5c:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2b60:	4632      	mov	r2, r6
    2b62:	6803      	ldr	r3, [r0, #0]
    2b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b66:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    2b68:	2800      	cmp	r0, #0
    2b6a:	d099      	beq.n	2aa0 <ExFatFile::write(void const*, unsigned int)+0x154>
    2b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2b70:	4698      	mov	r8, r3
    2b72:	e762      	b.n	2a3a <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2b74:	f104 0218 	add.w	r2, r4, #24
    2b78:	f000 f9be 	bl	2ef8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    2b7c:	2800      	cmp	r0, #0
    2b7e:	db8f      	blt.n	2aa0 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    2b80:	d104      	bne.n	2b8c <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    2b82:	4620      	mov	r0, r4
    2b84:	f7ff fc66 	bl	2454 <ExFatFile::addCluster()>
    2b88:	2800      	cmp	r0, #0
    2b8a:	d089      	beq.n	2aa0 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    2b8c:	69a1      	ldr	r1, [r4, #24]
    2b8e:	6a20      	ldr	r0, [r4, #32]
    2b90:	e724      	b.n	29dc <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    2b92:	4620      	mov	r0, r4
    2b94:	f7ff fc5e 	bl	2454 <ExFatFile::addCluster()>
    2b98:	2800      	cmp	r0, #0
    2b9a:	d081      	beq.n	2aa0 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    2b9c:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    2b9e:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    2ba0:	61e1      	str	r1, [r4, #28]
    2ba2:	e71b      	b.n	29dc <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2ba4:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2ba8:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    2baa:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2bae:	f061 037f 	orn	r3, r1, #127	; 0x7f
    2bb2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2bb6:	b003      	add	sp, #12
    2bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2bbc:	4648      	mov	r0, r9
    2bbe:	e776      	b.n	2aae <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    2bc0:	e9d4 3200 	ldrd	r3, r2, [r4]
    2bc4:	e752      	b.n	2a6c <ExFatFile::write(void const*, unsigned int)+0x120>
    2bc6:	bf00      	nop
    2bc8:	200200a4 	.word	0x200200a4

00002bcc <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    2bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bd0:	460c      	mov	r4, r1
    2bd2:	4615      	mov	r5, r2
    2bd4:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    2bd8:	89ab      	ldrh	r3, [r5, #12]
    uint16_t cp = fname->get16();
    2bda:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    2bdc:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    2be0:	b91b      	cbnz	r3, 2bea <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    2be2:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    2be6:	429a      	cmp	r2, r3
    2be8:	d00e      	beq.n	2c08 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    2bea:	f004 f8b7 	bl	6d5c <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    2bee:	f004 f927 	bl	6e40 <toUpcase(unsigned short)>
    2bf2:	4606      	mov	r6, r0
    2bf4:	4638      	mov	r0, r7
    2bf6:	f004 f923 	bl	6e40 <toUpcase(unsigned short)>
    2bfa:	4286      	cmp	r6, r0
    2bfc:	d109      	bne.n	2c12 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    2bfe:	4544      	cmp	r4, r8
    2c00:	d1ea      	bne.n	2bd8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    2c02:	2001      	movs	r0, #1
}
    2c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    2c08:	fab7 f087 	clz	r0, r7
    2c0c:	0940      	lsrs	r0, r0, #5
}
    2c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    2c12:	2000      	movs	r0, #0
}
    2c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002c18 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    2c18:	b570      	push	{r4, r5, r6, lr}
    2c1a:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    2c1c:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    2c1e:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    2c22:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    2c24:	4619      	mov	r1, r3
  uint16_t hash = 0;
    2c26:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    2c28:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    2c2a:	6123      	str	r3, [r4, #16]
    next = begin;
    2c2c:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    2c2e:	e017      	b.n	2c60 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    2c30:	f004 f894 	bl	6d5c <FsName::get16()>
    if (u == 0XFFFF) {
    2c34:	42a8      	cmp	r0, r5
    2c36:	d022      	beq.n	2c7e <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    2c38:	f004 f902 	bl	6e40 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    2c3c:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    2c3e:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    2c40:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    2c42:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    2c44:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    2c48:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    2c4a:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    2c4c:	fa52 f080 	uxtab	r0, r2, r0
    2c50:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    2c52:	f3c0 004e 	ubfx	r0, r0, #1, #15
    2c56:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    2c5a:	fa16 f080 	uxtah	r0, r6, r0
    2c5e:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    2c60:	4620      	mov	r0, r4
    2c62:	2900      	cmp	r1, #0
    2c64:	d1e4      	bne.n	2c30 <ExFatFile::hashName(ExName_t*)+0x18>
    2c66:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    2c6a:	429a      	cmp	r2, r3
    2c6c:	d1e0      	bne.n	2c30 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2c6e:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    2c70:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2c72:	3801      	subs	r0, #1
    2c74:	28fe      	cmp	r0, #254	; 0xfe
    2c76:	bf8c      	ite	hi
    2c78:	2000      	movhi	r0, #0
    2c7a:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    2c7c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2c7e:	2000      	movs	r0, #0
}
    2c80:	bd70      	pop	{r4, r5, r6, pc}
    2c82:	bf00      	nop

00002c84 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c88:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2c8a:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2c8c:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2c8e:	2900      	cmp	r1, #0
    2c90:	d042      	beq.n	2d18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    2c92:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    2c96:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2c9a:	4543      	cmp	r3, r8
    2c9c:	d942      	bls.n	2d24 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    2c9e:	f008 0307 	and.w	r3, r8, #7
    2ca2:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    2ca4:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    2ca8:	409d      	lsls	r5, r3
    2caa:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    2cac:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    2cae:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    2cb0:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    2cb4:	2200      	movs	r2, #0
    2cb6:	4638      	mov	r0, r7
    2cb8:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    2cbc:	f004 f826 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2cc0:	b1e8      	cbz	r0, 2cfe <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    2cc2:	f10b 3bff 	add.w	fp, fp, #4294967295
    2cc6:	4483      	add	fp, r0
    2cc8:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    2ccc:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    2cd0:	e00a      	b.n	2ce8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    2cd2:	454a      	cmp	r2, r9
    2cd4:	d02b      	beq.n	2d2e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2cd6:	45a0      	cmp	r8, r4
    2cd8:	d010      	beq.n	2cfc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    2cda:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    2cde:	42a5      	cmp	r5, r4
    2ce0:	d914      	bls.n	2d0c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    2ce2:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    2ce6:	d00c      	beq.n	2d02 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    2ce8:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    2cea:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    2cec:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    2cf0:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    2cf4:	d0ed      	beq.n	2cd2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    2cf6:	45a0      	cmp	r8, r4
        endAlloc++;
    2cf8:	4626      	mov	r6, r4
        if (endAlloc == start) {
    2cfa:	d1ee      	bne.n	2cda <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    2cfc:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    2cfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    2d02:	4558      	cmp	r0, fp
      mask = 1;
    2d04:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    2d08:	d1e0      	bne.n	2ccc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    2d0a:	e001      	b.n	2d10 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    2d0c:	2600      	movs	r6, #0
    2d0e:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    2d10:	2501      	movs	r5, #1
    i = 0;
    2d12:	f04f 0b00 	mov.w	fp, #0
    2d16:	e7cb      	b.n	2cb0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2d18:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    2d1c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2d20:	4543      	cmp	r3, r8
    2d22:	d8bc      	bhi.n	2c9e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    2d24:	f04f 0800 	mov.w	r8, #0
    2d28:	2501      	movs	r5, #1
    start = 0;
    2d2a:	46c3      	mov	fp, r8
    2d2c:	e7be      	b.n	2cac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    2d2e:	f1ba 0f00 	cmp.w	sl, #0
    2d32:	d104      	bne.n	2d3e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    2d34:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    2d38:	bf08      	it	eq
    2d3a:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    2d3e:	1cb0      	adds	r0, r6, #2
}
    2d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002d44 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    2d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2d48:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    2d4a:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    2d4c:	4615      	mov	r5, r2
    2d4e:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    2d50:	1883      	adds	r3, r0, r2
    2d52:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    2d56:	4293      	cmp	r3, r2
    2d58:	d837      	bhi.n	2dca <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    2d5a:	bbce      	cbnz	r6, 2dd0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    2d5c:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    2d60:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    2d62:	bf88      	it	hi
    2d64:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    2d68:	f000 0307 	and.w	r3, r0, #7
    2d6c:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    2d6e:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    2d72:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    2d76:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    2d78:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    2d7c:	b2e4      	uxtb	r4, r4
    2d7e:	2201      	movs	r2, #1
    2d80:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2d82:	188f      	adds	r7, r1, r2
    2d84:	f003 ffc2 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2d88:	b1f8      	cbz	r0, 2dca <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2d8a:	f109 3eff 	add.w	lr, r9, #4294967295
    2d8e:	4486      	add	lr, r0
    2d90:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2d94:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    2d98:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2d9c:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    2da0:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    2da4:	bf14      	ite	ne
    2da6:	2201      	movne	r2, #1
    2da8:	2200      	moveq	r2, #0
    2daa:	42b2      	cmp	r2, r6
    2dac:	d00d      	beq.n	2dca <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    2dae:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    2db0:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    2db4:	d018      	beq.n	2de8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    2db6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2dba:	d1ed      	bne.n	2d98 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    2dbc:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2dbe:	46a1      	mov	r9, r4
    2dc0:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    2dc4:	d1e6      	bne.n	2d94 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2dc6:	4639      	mov	r1, r7
    2dc8:	e7d9      	b.n	2d7e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    2dca:	2000      	movs	r0, #0
}
    2dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2dd0:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    2dd4:	428b      	cmp	r3, r1
    2dd6:	d9c7      	bls.n	2d68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    2dd8:	4281      	cmp	r1, r0
    2dda:	d3c5      	bcc.n	2d68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2ddc:	4293      	cmp	r3, r2
    2dde:	bf28      	it	cs
    2de0:	2300      	movcs	r3, #0
    2de2:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    2de6:	e7bf      	b.n	2d68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    2de8:	2001      	movs	r0, #1
}
    2dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2dee:	bf00      	nop

00002df0 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    2df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    2df2:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2df6:	3301      	adds	r3, #1
    2df8:	428b      	cmp	r3, r1
    2dfa:	d201      	bcs.n	2e00 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    2dfc:	2000      	movs	r0, #0
}
    2dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e00:	4607      	mov	r7, r0
    2e02:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    2e04:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    2e08:	2500      	movs	r5, #0
    2e0a:	e005      	b.n	2e18 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    2e0c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    2e10:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    2e12:	3301      	adds	r3, #1
    2e14:	42a3      	cmp	r3, r4
    2e16:	d3f1      	bcc.n	2dfc <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2e18:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    2e1c:	2200      	movs	r2, #0
    2e1e:	4630      	mov	r0, r6
    2e20:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2e24:	f003 ff72 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2e28:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    2e2a:	2800      	cmp	r0, #0
    2e2c:	d0e6      	beq.n	2dfc <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2e2e:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2e32:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    2e34:	1c63      	adds	r3, r4, #1
    2e36:	d1e9      	bne.n	2e0c <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    2e38:	1c68      	adds	r0, r5, #1
}
    2e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002e3c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    2e3c:	b538      	push	{r3, r4, r5, lr}
    2e3e:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    2e40:	680b      	ldr	r3, [r1, #0]
    2e42:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    2e46:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    2e4a:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    2e4e:	3b02      	subs	r3, #2
    2e50:	6865      	ldr	r5, [r4, #4]
    2e52:	fa03 f30c 	lsl.w	r3, r3, ip
    2e56:	4029      	ands	r1, r5
    2e58:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    2e5c:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    2e60:	4419      	add	r1, r3
    2e62:	f003 ff53 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    2e66:	b118      	cbz	r0, 2e70 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    2e68:	6863      	ldr	r3, [r4, #4]
    2e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2e6e:	4418      	add	r0, r3
}
    2e70:	bd38      	pop	{r3, r4, r5, pc}
    2e72:	bf00      	nop

00002e74 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e78:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2e7a:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    2e7e:	6849      	ldr	r1, [r1, #4]
    2e80:	400b      	ands	r3, r1
  pos->position += offset;
    2e82:	4411      	add	r1, r2
    2e84:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2e86:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2e88:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    2e8c:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    2e90:	b2d2      	uxtb	r2, r2
    2e92:	40d3      	lsrs	r3, r2
  while (tmp--) {
    2e94:	b32b      	cbz	r3, 2ee2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    2e96:	4680      	mov	r8, r0
    2e98:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    2e9a:	f500 7904 	add.w	r9, r0, #528	; 0x210
    2e9e:	e005      	b.n	2eac <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    2ea0:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    2ea2:	3d01      	subs	r5, #1
      pos->cluster++;
    2ea4:	f103 0301 	add.w	r3, r3, #1
    2ea8:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    2eaa:	d31a      	bcc.n	2ee2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    2eac:	7a26      	ldrb	r6, [r4, #8]
    2eae:	2e00      	cmp	r6, #0
    2eb0:	d1f6      	bne.n	2ea0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    2eb2:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    2eb6:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    2eb8:	6827      	ldr	r7, [r4, #0]
    2eba:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    2ebc:	3301      	adds	r3, #1
    2ebe:	429f      	cmp	r7, r3
    2ec0:	d812      	bhi.n	2ee8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2ec2:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    2ec6:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    2eca:	f003 ff1f 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2ece:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    2ed0:	b150      	cbz	r0, 2ee8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2ed2:	f3c7 0708 	ubfx	r7, r7, #0, #9
    2ed6:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    2ed8:	1c5a      	adds	r2, r3, #1
    2eda:	d009      	beq.n	2ef0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    2edc:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    2ede:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    2ee0:	d2e4      	bcs.n	2eac <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    2ee2:	2001      	movs	r0, #1
}
    2ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    2ee8:	f04f 30ff 	mov.w	r0, #4294967295
}
    2eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    2ef0:	4630      	mov	r0, r6
}
    2ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ef6:	bf00      	nop

00002ef8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    2ef8:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    2efa:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2efe:	3301      	adds	r3, #1
    2f00:	428b      	cmp	r3, r1
    2f02:	d202      	bcs.n	2f0a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    2f04:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    2f08:	bd38      	pop	{r3, r4, r5, pc}
    2f0a:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2f0c:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    2f10:	4615      	mov	r5, r2
    2f12:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2f16:	2200      	movs	r2, #0
    2f18:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2f1c:	f003 fef6 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2f20:	2800      	cmp	r0, #0
    2f22:	d0ef      	beq.n	2f04 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2f24:	00a4      	lsls	r4, r4, #2
    2f26:	f3c4 0408 	ubfx	r4, r4, #0, #9
    2f2a:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    2f2c:	1c5a      	adds	r2, r3, #1
    2f2e:	d002      	beq.n	2f36 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    2f30:	2001      	movs	r0, #1
  *value = next;
    2f32:	602b      	str	r3, [r5, #0]
}
    2f34:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    2f36:	2000      	movs	r0, #0
}
    2f38:	bd38      	pop	{r3, r4, r5, pc}
    2f3a:	bf00      	nop

00002f3c <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2f3c:	2901      	cmp	r1, #1
    2f3e:	d91b      	bls.n	2f78 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    2f40:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2f42:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2f46:	460c      	mov	r4, r1
    2f48:	3301      	adds	r3, #1
    2f4a:	428b      	cmp	r3, r1
    2f4c:	d201      	bcs.n	2f52 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    2f4e:	2000      	movs	r0, #0
}
    2f50:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2f52:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    2f56:	4615      	mov	r5, r2
    2f58:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2f5c:	2201      	movs	r2, #1
    2f5e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2f62:	f003 fed3 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2f66:	4603      	mov	r3, r0
    2f68:	2800      	cmp	r0, #0
    2f6a:	d0f0      	beq.n	2f4e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    2f6c:	00a4      	lsls	r4, r4, #2
  return true;
    2f6e:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    2f70:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    2f74:	511d      	str	r5, [r3, r4]
}
    2f76:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    2f78:	2000      	movs	r0, #0
}
    2f7a:	4770      	bx	lr

00002f7c <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    2f7c:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2f80:	3301      	adds	r3, #1
    2f82:	4299      	cmp	r1, r3
    2f84:	d901      	bls.n	2f8a <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    2f86:	2000      	movs	r0, #0
    2f88:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    2f8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f8e:	4605      	mov	r5, r0
    2f90:	b083      	sub	sp, #12
    2f92:	460c      	mov	r4, r1
    2f94:	f500 7904 	add.w	r9, r0, #528	; 0x210
    2f98:	460f      	mov	r7, r1
    2f9a:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2f9e:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    2fa2:	2200      	movs	r2, #0
    2fa4:	4648      	mov	r0, r9
    2fa6:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    2faa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2fae:	f003 fead 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2fb2:	b190      	cbz	r0, 2fda <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2fb4:	00a3      	lsls	r3, r4, #2
    2fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2fba:	58c2      	ldr	r2, [r0, r3]
    2fbc:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    2fbe:	1c53      	adds	r3, r2, #1
    2fc0:	bf16      	itet	ne
    2fc2:	4616      	movne	r6, r2
    2fc4:	f04f 0a00 	moveq.w	sl, #0
    2fc8:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2fcc:	2c01      	cmp	r4, #1
    2fce:	d904      	bls.n	2fda <ExFatPartition::freeChain(unsigned long)+0x5e>
    2fd0:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    2fd4:	3201      	adds	r2, #1
    2fd6:	4294      	cmp	r4, r2
    2fd8:	d903      	bls.n	2fe2 <ExFatPartition::freeChain(unsigned long)+0x66>
}
    2fda:	2000      	movs	r0, #0
    2fdc:	b003      	add	sp, #12
    2fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2fe2:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    2fe6:	2201      	movs	r2, #1
    2fe8:	4648      	mov	r0, r9
    2fea:	4459      	add	r1, fp
    2fec:	f003 fe8e 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2ff0:	2800      	cmp	r0, #0
    2ff2:	d0f2      	beq.n	2fda <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    2ff4:	9b01      	ldr	r3, [sp, #4]
    2ff6:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    2ffa:	f1ba 0f00 	cmp.w	sl, #0
    2ffe:	d012      	beq.n	3026 <ExFatPartition::freeChain(unsigned long)+0xaa>
    3000:	3401      	adds	r4, #1
    3002:	42b4      	cmp	r4, r6
    3004:	d008      	beq.n	3018 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    3006:	2300      	movs	r3, #0
    3008:	1be2      	subs	r2, r4, r7
    300a:	4639      	mov	r1, r7
    300c:	4628      	mov	r0, r5
    300e:	f7ff fe99 	bl	2d44 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3012:	2800      	cmp	r0, #0
    3014:	d0e1      	beq.n	2fda <ExFatPartition::freeChain(unsigned long)+0x5e>
    3016:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    3018:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    301c:	3301      	adds	r3, #1
    301e:	42b3      	cmp	r3, r6
    3020:	d3db      	bcc.n	2fda <ExFatPartition::freeChain(unsigned long)+0x5e>
    3022:	4634      	mov	r4, r6
    3024:	e7bb      	b.n	2f9e <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    3026:	1c62      	adds	r2, r4, #1
    3028:	4653      	mov	r3, sl
    302a:	4639      	mov	r1, r7
    302c:	4628      	mov	r0, r5
    302e:	1bd2      	subs	r2, r2, r7
}
    3030:	b003      	add	sp, #12
    3032:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    3036:	f7ff be85 	b.w	2d44 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    303a:	bf00      	nop

0000303c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    303e:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    3040:	f04f 36ff 	mov.w	r6, #4294967295
    3044:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    3048:	4615      	mov	r5, r2
  m_blockDev = dev;
    304a:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    304e:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    3050:	6041      	str	r1, [r0, #4]
    3052:	461a      	mov	r2, r3
    3054:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    3058:	4619      	mov	r1, r3
  m_fatType = 0;
    305a:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    305e:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    3060:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    3062:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    3066:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    306a:	4638      	mov	r0, r7
    306c:	f003 fe4e 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    3070:	2d04      	cmp	r5, #4
    3072:	d80d      	bhi.n	3090 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    3074:	4606      	mov	r6, r0
    3076:	b158      	cbz	r0, 3090 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    3078:	b1bd      	cbz	r5, 30aa <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    307a:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    307c:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    3080:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    3084:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    3088:	d102      	bne.n	3090 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    308a:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    308e:	b90b      	cbnz	r3, 3094 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    3090:	2000      	movs	r0, #0
}
    3092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    3094:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    3098:	4638      	mov	r0, r7
    309a:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    309e:	4629      	mov	r1, r5
    30a0:	f003 fe34 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    30a4:	4606      	mov	r6, r0
    30a6:	2800      	cmp	r0, #0
    30a8:	d0f2      	beq.n	3090 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    30aa:	2205      	movs	r2, #5
    30ac:	491a      	ldr	r1, [pc, #104]	; (3118 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    30ae:	1cf0      	adds	r0, r6, #3
    30b0:	f009 fdd6 	bl	cc60 <strncmp>
    30b4:	2800      	cmp	r0, #0
    30b6:	d1eb      	bne.n	3090 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    30b8:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    30bc:	2b09      	cmp	r3, #9
    30be:	d1e7      	bne.n	3090 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    30c0:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    30c2:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    30c4:	442b      	add	r3, r5
    30c6:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    30ca:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    30cc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    30d0:	6db3      	ldr	r3, [r6, #88]	; 0x58
    30d2:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    30d4:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    30d6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    30da:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    30dc:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    30e0:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    30e2:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    30e6:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    30ea:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    30ee:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    30f0:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    30f4:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    30f8:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    30fc:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    30fe:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    3102:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    3106:	462a      	mov	r2, r5
    3108:	f7ff fdbc 	bl	2c84 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    310c:	2340      	movs	r3, #64	; 0x40
  return true;
    310e:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    3110:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    3114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3116:	bf00      	nop
    3118:	20000818 	.word	0x20000818

0000311c <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    311c:	b510      	push	{r4, lr}
    311e:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    3120:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    3124:	f7ff fe64 	bl	2df0 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3128:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    312c:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    312e:	b2db      	uxtb	r3, r3
}
    3130:	4098      	lsls	r0, r3
    3132:	bd10      	pop	{r4, pc}

00003134 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    3134:	b570      	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    3136:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    313a:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    313c:	2300      	movs	r3, #0
    313e:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    3140:	4668      	mov	r0, sp
    3142:	4621      	mov	r1, r4
    3144:	930c      	str	r3, [sp, #48]	; 0x30
    3146:	f7ff f901 	bl	234c <ExFatFile::open(ExFatFile*, char const*, int)>
    314a:	4605      	mov	r5, r0
    314c:	b1d8      	cbz	r0, 3186 <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    314e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3152:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    3156:	d019      	beq.n	318c <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    3158:	46ee      	mov	lr, sp
    315a:	46a4      	mov	ip, r4
    315c:	ae0c      	add	r6, sp, #48	; 0x30
    315e:	4674      	mov	r4, lr
    3160:	f10c 0c10 	add.w	ip, ip, #16
    3164:	f10e 0e10 	add.w	lr, lr, #16
    3168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    316a:	42b4      	cmp	r4, r6
    316c:	f84c 0c10 	str.w	r0, [ip, #-16]
    3170:	f84c 1c0c 	str.w	r1, [ip, #-12]
    3174:	f84c 2c08 	str.w	r2, [ip, #-8]
    3178:	f84c 3c04 	str.w	r3, [ip, #-4]
    317c:	d1ef      	bne.n	315e <ExFatVolume::chdir(char const*)+0x2a>
    317e:	f8de 0000 	ldr.w	r0, [lr]
    3182:	f8cc 0000 	str.w	r0, [ip]
  return true;

 fail:
  return false;
}
    3186:	4628      	mov	r0, r5
    3188:	b00e      	add	sp, #56	; 0x38
    318a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    318c:	461d      	mov	r5, r3
}
    318e:	4628      	mov	r0, r5
    3190:	b00e      	add	sp, #56	; 0x38
    3192:	bd70      	pop	{r4, r5, r6, pc}

00003194 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    3194:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    3196:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    319a:	b082      	sub	sp, #8
    319c:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    319e:	2b00      	cmp	r3, #0
    31a0:	db0d      	blt.n	31be <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    31a2:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    31a4:	f105 0028 	add.w	r0, r5, #40	; 0x28
    31a8:	f003 fd84 	bl	6cb4 <FsCache::sync()>
    31ac:	2800      	cmp	r0, #0
    31ae:	d13b      	bne.n	3228 <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    31b0:	7863      	ldrb	r3, [r4, #1]
  return false;
    31b2:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    31b4:	f043 0301 	orr.w	r3, r3, #1
    31b8:	7063      	strb	r3, [r4, #1]
}
    31ba:	b002      	add	sp, #8
    31bc:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    31be:	6880      	ldr	r0, [r0, #8]
    31c0:	2201      	movs	r2, #1
    31c2:	69a1      	ldr	r1, [r4, #24]
    31c4:	3028      	adds	r0, #40	; 0x28
    31c6:	f003 fda1 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    31ca:	2800      	cmp	r0, #0
    31cc:	d0f0      	beq.n	31b0 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    31ce:	88a5      	ldrh	r5, [r4, #4]
    31d0:	f005 050f 	and.w	r5, r5, #15
    31d4:	016b      	lsls	r3, r5, #5
    31d6:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    31da:	5cc3      	ldrb	r3, [r0, r3]
    31dc:	2be5      	cmp	r3, #229	; 0xe5
    31de:	d0e7      	beq.n	31b0 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    31e0:	7823      	ldrb	r3, [r4, #0]
    31e2:	071b      	lsls	r3, r3, #28
    31e4:	d501      	bpl.n	31ea <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    31e6:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    31e8:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    31ea:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    31ec:	4915      	ldr	r1, [pc, #84]	; (3244 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    31ee:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    31f0:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    31f2:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    31f4:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    31f6:	b166      	cbz	r6, 3212 <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    31f8:	f10d 0203 	add.w	r2, sp, #3
    31fc:	f10d 0106 	add.w	r1, sp, #6
    3200:	a801      	add	r0, sp, #4
    3202:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    3204:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3208:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    320c:	832b      	strh	r3, [r5, #24]
    320e:	826b      	strh	r3, [r5, #18]
    3210:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    3212:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    3214:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    3216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    321a:	f105 0028 	add.w	r0, r5, #40	; 0x28
    321e:	70a3      	strb	r3, [r4, #2]
    3220:	f003 fd48 	bl	6cb4 <FsCache::sync()>
    3224:	2800      	cmp	r0, #0
    3226:	d0c3      	beq.n	31b0 <FatFile::sync() [clone .part.0]+0x1c>
    3228:	f505 700e 	add.w	r0, r5, #568	; 0x238
    322c:	f003 fd42 	bl	6cb4 <FsCache::sync()>
    3230:	2800      	cmp	r0, #0
    3232:	d0bd      	beq.n	31b0 <FatFile::sync() [clone .part.0]+0x1c>
    3234:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    3236:	6803      	ldr	r3, [r0, #0]
    3238:	6a1b      	ldr	r3, [r3, #32]
    323a:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    323c:	2800      	cmp	r0, #0
    323e:	d0b7      	beq.n	31b0 <FatFile::sync() [clone .part.0]+0x1c>
    3240:	e7bb      	b.n	31ba <FatFile::sync() [clone .part.0]+0x26>
    3242:	bf00      	nop
    3244:	200200a4 	.word	0x200200a4

00003248 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    3248:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    324a:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    324c:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    3250:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    3252:	6880      	ldr	r0, [r0, #8]
    3254:	4629      	mov	r1, r5
    3256:	f001 f9f3 	bl	4640 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    325a:	b150      	cbz	r0, 3272 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    325c:	b155      	cbz	r5, 3274 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    325e:	6923      	ldr	r3, [r4, #16]
    3260:	3501      	adds	r5, #1
    3262:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    3264:	78a3      	ldrb	r3, [r4, #2]
    3266:	bf18      	it	ne
    3268:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    326c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3270:	70a3      	strb	r3, [r4, #2]
}
    3272:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    3274:	78a3      	ldrb	r3, [r4, #2]
    3276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    327a:	e7f7      	b.n	326c <FatFile::addCluster()+0x24>

0000327c <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    327e:	7804      	ldrb	r4, [r0, #0]
    3280:	f014 0420 	ands.w	r4, r4, #32
    3284:	d104      	bne.n	3290 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    3286:	4b1a      	ldr	r3, [pc, #104]	; (32f0 <FatFile::addDirCluster()+0x74>)
    3288:	4605      	mov	r5, r0
    328a:	6942      	ldr	r2, [r0, #20]
    328c:	429a      	cmp	r2, r3
    328e:	d302      	bcc.n	3296 <FatFile::addDirCluster()+0x1a>
  return false;
    3290:	2700      	movs	r7, #0
}
    3292:	4638      	mov	r0, r7
    3294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    3296:	f7ff ffd7 	bl	3248 <FatFile::addCluster()>
    329a:	4607      	mov	r7, r0
    329c:	2800      	cmp	r0, #0
    329e:	d0f7      	beq.n	3290 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    32a0:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    32a2:	692e      	ldr	r6, [r5, #16]
    32a4:	7982      	ldrb	r2, [r0, #6]
    32a6:	3e02      	subs	r6, #2
    32a8:	6941      	ldr	r1, [r0, #20]
    32aa:	4096      	lsls	r6, r2
    32ac:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    32ae:	7901      	ldrb	r1, [r0, #4]
    32b0:	b1a9      	cbz	r1, 32de <FatFile::addDirCluster()+0x62>
    32b2:	4621      	mov	r1, r4
    32b4:	e006      	b.n	32c4 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    32b6:	f009 fc81 	bl	cbbc <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    32ba:	68a8      	ldr	r0, [r5, #8]
    32bc:	b2e1      	uxtb	r1, r4
    32be:	7902      	ldrb	r2, [r0, #4]
    32c0:	428a      	cmp	r2, r1
    32c2:	d90b      	bls.n	32dc <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    32c4:	4431      	add	r1, r6
    32c6:	2205      	movs	r2, #5
    32c8:	3028      	adds	r0, #40	; 0x28
    32ca:	3401      	adds	r4, #1
    32cc:	f003 fd1e 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    32d0:	f44f 7200 	mov.w	r2, #512	; 0x200
    32d4:	2100      	movs	r1, #0
    if (!pc) {
    32d6:	2800      	cmp	r0, #0
    32d8:	d1ed      	bne.n	32b6 <FatFile::addDirCluster()+0x3a>
    32da:	e7d9      	b.n	3290 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    32dc:	7982      	ldrb	r2, [r0, #6]
    32de:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    32e2:	6969      	ldr	r1, [r5, #20]
}
    32e4:	4638      	mov	r0, r7
    32e6:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    32e8:	fa11 f383 	uxtah	r3, r1, r3
    32ec:	616b      	str	r3, [r5, #20]
}
    32ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32f0:	001ffe00 	.word	0x001ffe00

000032f4 <FatFile::close()>:
bool FatFile::close() {
    32f4:	b510      	push	{r4, lr}
  if (!isOpen()) {
    32f6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    32f8:	4604      	mov	r4, r0
  if (!isOpen()) {
    32fa:	b12b      	cbz	r3, 3308 <FatFile::close()+0x14>
    32fc:	f7ff ff4a 	bl	3194 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    3300:	2300      	movs	r3, #0
    3302:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3304:	70a3      	strb	r3, [r4, #2]
}
    3306:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    3308:	2300      	movs	r3, #0
    return true;
    330a:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    330c:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    330e:	70a3      	strb	r3, [r4, #2]
}
    3310:	bd10      	pop	{r4, pc}
    3312:	bf00      	nop

00003314 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    3314:	780b      	ldrb	r3, [r1, #0]
    3316:	f013 0f70 	tst.w	r3, #112	; 0x70
    331a:	d101      	bne.n	3320 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    331c:	2000      	movs	r0, #0
    331e:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    3320:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    3322:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    3326:	b089      	sub	sp, #36	; 0x24
    3328:	460d      	mov	r5, r1
    332a:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    332c:	f000 fe78 	bl	4020 <FatFile::open(FatFile*, FatLfn_t*, int)>
    3330:	b138      	cbz	r0, 3342 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    3332:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    3334:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    3336:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    3338:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    333a:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    333c:	f7ff ff9e 	bl	327c <FatFile::addDirCluster()>
    3340:	b910      	cbnz	r0, 3348 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    3342:	2000      	movs	r0, #0
    3344:	b009      	add	sp, #36	; 0x24
    3346:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    3348:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    334a:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    334c:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    334e:	b16b      	cbz	r3, 336c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    3350:	6963      	ldr	r3, [r4, #20]
    3352:	b133      	cbz	r3, 3362 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3354:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    3356:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3358:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    335c:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3360:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    3362:	4620      	mov	r0, r4
    3364:	f7ff ff16 	bl	3194 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    3368:	2800      	cmp	r0, #0
    336a:	d0ea      	beq.n	3342 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    return m_cache.prepare(sector, options);
    336c:	68a0      	ldr	r0, [r4, #8]
    336e:	2201      	movs	r2, #1
    3370:	69a1      	ldr	r1, [r4, #24]
    3372:	3028      	adds	r0, #40	; 0x28
    3374:	f003 fcca 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3378:	2800      	cmp	r0, #0
    337a:	d0e2      	beq.n	3342 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    337c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    3380:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    3382:	f00c 0c0f 	and.w	ip, ip, #15
    3386:	ea4f 134c 	mov.w	r3, ip, lsl #5
    338a:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    338e:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    3392:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    3394:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3396:	6a23      	ldr	r3, [r4, #32]
    3398:	f897 e006 	ldrb.w	lr, [r7, #6]
    339c:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    339e:	f8dc 1004 	ldr.w	r1, [ip, #4]
    33a2:	f8dc 2008 	ldr.w	r2, [ip, #8]
    33a6:	f8dc 300c 	ldr.w	r3, [ip, #12]
    33aa:	fa06 f60e 	lsl.w	r6, r6, lr
    33ae:	46ee      	mov	lr, sp
    33b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    33b4:	f8dc 0010 	ldr.w	r0, [ip, #16]
    33b8:	f8dc 1014 	ldr.w	r1, [ip, #20]
    33bc:	f8dc 2018 	ldr.w	r2, [ip, #24]
    33c0:	f8dc 301c 	ldr.w	r3, [ip, #28]
    33c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    33c8:	697b      	ldr	r3, [r7, #20]
    33ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
    33ce:	2201      	movs	r2, #1
    33d0:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    33d2:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    33d6:	f8cd 3001 	str.w	r3, [sp, #1]
    33da:	f8cd 3005 	str.w	r3, [sp, #5]
    33de:	f8ad 3009 	strh.w	r3, [sp, #9]
    33e2:	f003 fc93 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    33e6:	4684      	mov	ip, r0
    33e8:	2800      	cmp	r0, #0
    33ea:	d0aa      	beq.n	3342 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    33ec:	272e      	movs	r7, #46	; 0x2e
    33ee:	46ee      	mov	lr, sp
    33f0:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    33f4:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    33f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    33fa:	f8cc 0000 	str.w	r0, [ip]
    33fe:	f8cc 1004 	str.w	r1, [ip, #4]
    3402:	f8cc 2008 	str.w	r2, [ip, #8]
    3406:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    340a:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    340e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3412:	f8cc 0010 	str.w	r0, [ip, #16]
    3416:	f8cc 1014 	str.w	r1, [ip, #20]
    341a:	f8cc 2018 	str.w	r2, [ip, #24]
    341e:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    3422:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    3424:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    3426:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    342a:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    342e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3430:	f8cc 0020 	str.w	r0, [ip, #32]
    3434:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    3438:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    343c:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    3440:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3442:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    3446:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    344a:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    344e:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    3452:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3454:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3458:	f003 fc2c 	bl	6cb4 <FsCache::sync()>
    345c:	2800      	cmp	r0, #0
    345e:	f43f af70 	beq.w	3342 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    3462:	f504 700e 	add.w	r0, r4, #568	; 0x238
    3466:	f003 fc25 	bl	6cb4 <FsCache::sync()>
    346a:	2800      	cmp	r0, #0
    346c:	f43f af69 	beq.w	3342 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    3470:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    3472:	6803      	ldr	r3, [r0, #0]
    3474:	6a1b      	ldr	r3, [r3, #32]
}
    3476:	b009      	add	sp, #36	; 0x24
    3478:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    347c:	4718      	bx	r3
    347e:	bf00      	nop

00003480 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    3480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class FsName {
    3484:	2600      	movs	r6, #0
    3486:	b094      	sub	sp, #80	; 0x50
    3488:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    348a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    348c:	9201      	str	r2, [sp, #4]
    348e:	f8ad 6014 	strh.w	r6, [sp, #20]
    3492:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    3494:	2b00      	cmp	r3, #0
    3496:	d141      	bne.n	351c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    3498:	780b      	ldrb	r3, [r1, #0]
    349a:	460d      	mov	r5, r1
    349c:	f013 0f70 	tst.w	r3, #112	; 0x70
    34a0:	d03c      	beq.n	351c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    34a2:	7813      	ldrb	r3, [r2, #0]
    34a4:	4604      	mov	r4, r0
    34a6:	4616      	mov	r6, r2
    34a8:	2b2f      	cmp	r3, #47	; 0x2f
    34aa:	d03b      	beq.n	3524 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    34ac:	2700      	movs	r7, #0
    34ae:	e028      	b.n	3502 <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    34b0:	9e01      	ldr	r6, [sp, #4]
    34b2:	7836      	ldrb	r6, [r6, #0]
    34b4:	2e00      	cmp	r6, #0
    34b6:	d050      	beq.n	355a <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    34b8:	f000 fdb2 	bl	4020 <FatFile::open(FatFile*, FatLfn_t*, int)>
    34bc:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    34be:	aa02      	add	r2, sp, #8
    34c0:	4629      	mov	r1, r5
    34c2:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    34c4:	b92b      	cbnz	r3, 34d2 <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    34c6:	f1b8 0f00 	cmp.w	r8, #0
    34ca:	d027      	beq.n	351c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    34cc:	f7ff ff22 	bl	3314 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    34d0:	b320      	cbz	r0, 351c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    34d2:	46a6      	mov	lr, r4
    34d4:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    34d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    34dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    34e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    34e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    34e8:	f8de 5000 	ldr.w	r5, [lr]
    34ec:	4620      	mov	r0, r4
  if (!isOpen()) {
    34ee:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    34f0:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    34f4:	b10b      	cbz	r3, 34fa <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    34f6:	f7ff fe4d 	bl	3194 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    34fa:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    34fc:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    34fe:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    3500:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    3502:	4631      	mov	r1, r6
    3504:	ab01      	add	r3, sp, #4
    3506:	aa02      	add	r2, sp, #8
    3508:	4620      	mov	r0, r4
    350a:	f000 fed5 	bl	42b8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    350e:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    3510:	aa02      	add	r2, sp, #8
    3512:	4629      	mov	r1, r5
    3514:	2300      	movs	r3, #0
    3516:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    3518:	2e00      	cmp	r6, #0
    351a:	d1c9      	bne.n	34b0 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    351c:	2000      	movs	r0, #0
}
    351e:	b014      	add	sp, #80	; 0x50
    3520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    3524:	3601      	adds	r6, #1
    3526:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    3528:	7833      	ldrb	r3, [r6, #0]
    352a:	2b2f      	cmp	r3, #47	; 0x2f
    352c:	d0fa      	beq.n	3524 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    352e:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    3530:	2224      	movs	r2, #36	; 0x24
    3532:	2100      	movs	r1, #0
    3534:	a80b      	add	r0, sp, #44	; 0x2c
    3536:	f009 fb41 	bl	cbbc <memset>
  m_vol = vol;
    353a:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    353c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    353e:	2b10      	cmp	r3, #16
    3540:	d003      	beq.n	354a <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    3542:	2b20      	cmp	r3, #32
    3544:	d00f      	beq.n	3566 <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    3546:	2b0c      	cmp	r3, #12
    3548:	d1e8      	bne.n	351c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    354a:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    354c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    3550:	2301      	movs	r3, #1
    parent = &tmpDir;
    3552:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    3554:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    3558:	e7a8      	b.n	34ac <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    355a:	aa02      	add	r2, sp, #8
    355c:	f7ff feda 	bl	3314 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    3560:	b014      	add	sp, #80	; 0x50
    3562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    3566:	2340      	movs	r3, #64	; 0x40
    3568:	e7f0      	b.n	354c <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    356a:	bf00      	nop

0000356c <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    356c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3570:	2500      	movs	r5, #0
    3572:	b094      	sub	sp, #80	; 0x50
    3574:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    3576:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    3578:	9201      	str	r2, [sp, #4]
    357a:	9502      	str	r5, [sp, #8]
    357c:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    3580:	2b00      	cmp	r3, #0
    3582:	d137      	bne.n	35f4 <FatFile::open(FatFile*, char const*, int)+0x88>
    3584:	780b      	ldrb	r3, [r1, #0]
    3586:	460e      	mov	r6, r1
    3588:	f013 0f70 	tst.w	r3, #112	; 0x70
    358c:	d032      	beq.n	35f4 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    358e:	7813      	ldrb	r3, [r2, #0]
    3590:	4604      	mov	r4, r0
    3592:	4615      	mov	r5, r2
    3594:	2b2f      	cmp	r3, #47	; 0x2f
    3596:	d031      	beq.n	35fc <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    3598:	2700      	movs	r7, #0
    359a:	e01e      	b.n	35da <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    359c:	9d01      	ldr	r5, [sp, #4]
    359e:	782d      	ldrb	r5, [r5, #0]
    35a0:	2d00      	cmp	r5, #0
    35a2:	d040      	beq.n	3626 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    35a4:	f000 fd3c 	bl	4020 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    35a8:	46a6      	mov	lr, r4
    35aa:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    35ae:	b308      	cbz	r0, 35f4 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    35b0:	4666      	mov	r6, ip
  if (!isOpen()) {
    35b2:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    35b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    35b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    35bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    35c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    35c4:	f8de 3000 	ldr.w	r3, [lr]
    35c8:	4620      	mov	r0, r4
    35ca:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    35ce:	b10d      	cbz	r5, 35d4 <FatFile::open(FatFile*, char const*, int)+0x68>
    35d0:	f7ff fde0 	bl	3194 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    35d4:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    35d6:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    35d8:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    35da:	4629      	mov	r1, r5
    35dc:	ab01      	add	r3, sp, #4
    35de:	aa0b      	add	r2, sp, #44	; 0x2c
    35e0:	4620      	mov	r0, r4
    35e2:	f000 fe69 	bl	42b8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    35e6:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    35e8:	aa0b      	add	r2, sp, #44	; 0x2c
    35ea:	4631      	mov	r1, r6
    35ec:	2300      	movs	r3, #0
    35ee:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    35f0:	2d00      	cmp	r5, #0
    35f2:	d1d3      	bne.n	359c <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    35f4:	2000      	movs	r0, #0
}
    35f6:	b014      	add	sp, #80	; 0x50
    35f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    35fc:	3501      	adds	r5, #1
    35fe:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    3600:	7829      	ldrb	r1, [r5, #0]
    3602:	292f      	cmp	r1, #47	; 0x2f
    3604:	d0fa      	beq.n	35fc <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    3606:	b9a9      	cbnz	r1, 3634 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    3608:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    360a:	2224      	movs	r2, #36	; 0x24
    360c:	4620      	mov	r0, r4
    360e:	f009 fad5 	bl	cbbc <memset>
  m_vol = vol;
    3612:	60a5      	str	r5, [r4, #8]
    3614:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    3616:	2b10      	cmp	r3, #16
    3618:	d003      	beq.n	3622 <FatFile::open(FatFile*, char const*, int)+0xb6>
    361a:	2b20      	cmp	r3, #32
    361c:	d022      	beq.n	3664 <FatFile::open(FatFile*, char const*, int)+0xf8>
    361e:	2b0c      	cmp	r3, #12
    3620:	d1e8      	bne.n	35f4 <FatFile::open(FatFile*, char const*, int)+0x88>
    3622:	2220      	movs	r2, #32
    3624:	e01f      	b.n	3666 <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    3626:	4643      	mov	r3, r8
    3628:	aa0b      	add	r2, sp, #44	; 0x2c
    362a:	f000 fcf9 	bl	4020 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    362e:	b014      	add	sp, #80	; 0x50
    3630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    3634:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    3636:	2224      	movs	r2, #36	; 0x24
    3638:	2100      	movs	r1, #0
    363a:	a802      	add	r0, sp, #8
    363c:	f009 fabe 	bl	cbbc <memset>
  m_vol = vol;
    3640:	9604      	str	r6, [sp, #16]
    3642:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    3644:	2b10      	cmp	r3, #16
    3646:	d003      	beq.n	3650 <FatFile::open(FatFile*, char const*, int)+0xe4>
    3648:	2b20      	cmp	r3, #32
    364a:	d003      	beq.n	3654 <FatFile::open(FatFile*, char const*, int)+0xe8>
    364c:	2b0c      	cmp	r3, #12
    364e:	d1d1      	bne.n	35f4 <FatFile::open(FatFile*, char const*, int)+0x88>
    3650:	2320      	movs	r3, #32
    3652:	e000      	b.n	3656 <FatFile::open(FatFile*, char const*, int)+0xea>
    3654:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    3656:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    365a:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    365c:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    365e:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    3662:	e799      	b.n	3598 <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    3664:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    3666:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    3668:	7022      	strb	r2, [r4, #0]
  return true;
    366a:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    366c:	70a3      	strb	r3, [r4, #2]
  return true;
    366e:	e7c2      	b.n	35f6 <FatFile::open(FatFile*, char const*, int)+0x8a>

00003670 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    3670:	b119      	cbz	r1, 367a <FatFile::open(FatVolume*, char const*, int)+0xa>
    3672:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    3676:	f7ff bf79 	b.w	356c <FatFile::open(FatFile*, char const*, int)>
}
    367a:	4608      	mov	r0, r1
    367c:	4770      	bx	lr
    367e:	bf00      	nop

00003680 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    3680:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    3682:	7805      	ldrb	r5, [r0, #0]
    3684:	b10d      	cbz	r5, 368a <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    3686:	2000      	movs	r0, #0
}
    3688:	bd70      	pop	{r4, r5, r6, pc}
    368a:	460e      	mov	r6, r1
    368c:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    368e:	2224      	movs	r2, #36	; 0x24
    3690:	4629      	mov	r1, r5
    3692:	f009 fa93 	bl	cbbc <memset>
  m_vol = vol;
    3696:	60a6      	str	r6, [r4, #8]
    3698:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    369a:	2b10      	cmp	r3, #16
    369c:	d00b      	beq.n	36b6 <FatFile::openRoot(FatVolume*)+0x36>
    369e:	2b20      	cmp	r3, #32
    36a0:	d003      	beq.n	36aa <FatFile::openRoot(FatVolume*)+0x2a>
    36a2:	2b0c      	cmp	r3, #12
    36a4:	d007      	beq.n	36b6 <FatFile::openRoot(FatVolume*)+0x36>
    36a6:	4628      	mov	r0, r5
}
    36a8:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    36aa:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    36ac:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    36ae:	7022      	strb	r2, [r4, #0]
  return true;
    36b0:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    36b2:	70a3      	strb	r3, [r4, #2]
}
    36b4:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    36b6:	2220      	movs	r2, #32
    36b8:	e7f8      	b.n	36ac <FatFile::openRoot(FatVolume*)+0x2c>
    36ba:	bf00      	nop

000036bc <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    36bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36c0:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const {return m_lfnOrd;}
  /** \return True if this is an open file/directory. */
  bool isOpen() const {return m_attributes;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    36c4:	7883      	ldrb	r3, [r0, #2]
    36c6:	b083      	sub	sp, #12
    36c8:	4605      	mov	r5, r0
  if (!isReadable()) {
    36ca:	07df      	lsls	r7, r3, #31
    36cc:	f140 808c 	bpl.w	37e8 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    36d0:	4688      	mov	r8, r1
    36d2:	7801      	ldrb	r1, [r0, #0]
    36d4:	4692      	mov	sl, r2
  if (isFile()) {
    36d6:	070e      	lsls	r6, r1, #28
    36d8:	f100 8091 	bmi.w	37fe <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    36dc:	068c      	lsls	r4, r1, #26
    36de:	d508      	bpl.n	36f2 <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    36e0:	6883      	ldr	r3, [r0, #8]
    36e2:	895a      	ldrh	r2, [r3, #10]
    36e4:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    36e6:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    36ea:	b29b      	uxth	r3, r3
    36ec:	459a      	cmp	sl, r3
    36ee:	bf28      	it	cs
    36f0:	469a      	movcs	sl, r3
  while (toRead) {
    36f2:	f1ba 0f00 	cmp.w	sl, #0
    36f6:	f000 80af 	beq.w	3858 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    36fa:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    36fc:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    3700:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3702:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    3704:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3708:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    370c:	68af      	ldr	r7, [r5, #8]
    370e:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    3712:	d53d      	bpl.n	3790 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    3714:	6a39      	ldr	r1, [r7, #32]
    3716:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    371a:	f1bb 0f00 	cmp.w	fp, #0
    371e:	d151      	bne.n	37c4 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    3720:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3724:	d34e      	bcc.n	37c4 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    3726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    3728:	4291      	cmp	r1, r2
    372a:	d04b      	beq.n	37c4 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    372c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    3730:	f0c0 8082 	bcc.w	3838 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    3734:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3736:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    3738:	0680      	lsls	r0, r0, #26
    373a:	d405      	bmi.n	3748 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    373c:	7938      	ldrb	r0, [r7, #4]
    373e:	eba0 0009 	sub.w	r0, r0, r9
    3742:	4283      	cmp	r3, r0
    3744:	bf28      	it	cs
    3746:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    3748:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    374a:	ea4f 2443 	mov.w	r4, r3, lsl #9
    374e:	d80c      	bhi.n	376a <FatFile::read(void*, unsigned int)+0xae>
    3750:	18c8      	adds	r0, r1, r3
    3752:	4282      	cmp	r2, r0
    3754:	d209      	bcs.n	376a <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    3756:	f107 0028 	add.w	r0, r7, #40	; 0x28
    375a:	e9cd 1300 	strd	r1, r3, [sp]
    375e:	f003 faa9 	bl	6cb4 <FsCache::sync()>
    3762:	e9dd 1300 	ldrd	r1, r3, [sp]
    3766:	2800      	cmp	r0, #0
    3768:	d03e      	beq.n	37e8 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    376a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    376c:	6802      	ldr	r2, [r0, #0]
    376e:	6957      	ldr	r7, [r2, #20]
    3770:	4642      	mov	r2, r8
    3772:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3774:	2800      	cmp	r0, #0
    3776:	d037      	beq.n	37e8 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    3778:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    377a:	1b36      	subs	r6, r6, r4
    dst += n;
    377c:	44a0      	add	r8, r4
    m_curPosition += n;
    377e:	4422      	add	r2, r4
    3780:	616a      	str	r2, [r5, #20]
  while (toRead) {
    3782:	d069      	beq.n	3858 <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const {return m_attributes & FILE_ATTR_ROOT32;}
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    3784:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    3786:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    378a:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    378c:	0688      	lsls	r0, r1, #26
    378e:	d4c1      	bmi.n	3714 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    3790:	f897 9005 	ldrb.w	r9, [r7, #5]
    3794:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    3798:	f1bb 0f00 	cmp.w	fp, #0
    379c:	d136      	bne.n	380c <FatFile::read(void*, unsigned int)+0x150>
    379e:	f1b9 0f00 	cmp.w	r9, #0
    37a2:	d133      	bne.n	380c <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    37a4:	2a00      	cmp	r2, #0
    37a6:	d133      	bne.n	3810 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    37a8:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    37aa:	bf4c      	ite	mi
    37ac:	6a3a      	ldrmi	r2, [r7, #32]
    37ae:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    37b0:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    37b2:	3a02      	subs	r2, #2
    37b4:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    37b6:	6979      	ldr	r1, [r7, #20]
    37b8:	4082      	lsls	r2, r0
    37ba:	4449      	add	r1, r9
    37bc:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    37be:	f1bb 0f00 	cmp.w	fp, #0
    37c2:	d0ad      	beq.n	3720 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    37c4:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    37c8:	2200      	movs	r2, #0
    37ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
    37ce:	42b4      	cmp	r4, r6
    37d0:	bf28      	it	cs
    37d2:	4634      	movcs	r4, r6
    37d4:	f003 fa9a 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    37d8:	b130      	cbz	r0, 37e8 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    37da:	eb00 010b 	add.w	r1, r0, fp
    37de:	4622      	mov	r2, r4
    37e0:	4640      	mov	r0, r8
    37e2:	f004 ff77 	bl	86d4 <memcpy>
    37e6:	e7c7      	b.n	3778 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    37e8:	786b      	ldrb	r3, [r5, #1]
  return -1;
    37ea:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    37ee:	f043 0302 	orr.w	r3, r3, #2
    37f2:	706b      	strb	r3, [r5, #1]
}
    37f4:	b003      	add	sp, #12
    37f6:	ecbd 8b02 	vpop	{d8}
    37fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    37fe:	69c3      	ldr	r3, [r0, #28]
    3800:	6942      	ldr	r2, [r0, #20]
    3802:	1a9b      	subs	r3, r3, r2
    3804:	459a      	cmp	sl, r3
    3806:	bf28      	it	cs
    3808:	469a      	movcs	sl, r3
    380a:	e772      	b.n	36f2 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    380c:	692a      	ldr	r2, [r5, #16]
    380e:	e7d0      	b.n	37b2 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    3810:	070b      	lsls	r3, r1, #28
    3812:	d505      	bpl.n	3820 <FatFile::read(void*, unsigned int)+0x164>
    3814:	78aa      	ldrb	r2, [r5, #2]
    3816:	0654      	lsls	r4, r2, #25
    3818:	d502      	bpl.n	3820 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    381a:	692a      	ldr	r2, [r5, #16]
    381c:	3201      	adds	r2, #1
    381e:	e7c7      	b.n	37b0 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3820:	ee18 2a10 	vmov	r2, s16
    3824:	4638      	mov	r0, r7
    3826:	6929      	ldr	r1, [r5, #16]
    3828:	f000 ff58 	bl	46dc <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    382c:	2800      	cmp	r0, #0
    382e:	dbdb      	blt.n	37e8 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    3830:	d00c      	beq.n	384c <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3832:	68af      	ldr	r7, [r5, #8]
    3834:	692a      	ldr	r2, [r5, #16]
    3836:	e7bc      	b.n	37b2 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    3838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    383a:	4642      	mov	r2, r8
    383c:	6803      	ldr	r3, [r0, #0]
    383e:	691b      	ldr	r3, [r3, #16]
    3840:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3842:	2800      	cmp	r0, #0
    3844:	d0d0      	beq.n	37e8 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    3846:	f44f 7400 	mov.w	r4, #512	; 0x200
    384a:	e795      	b.n	3778 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    384c:	782b      	ldrb	r3, [r5, #0]
    384e:	f013 0f70 	tst.w	r3, #112	; 0x70
    3852:	d0c9      	beq.n	37e8 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    3854:	ebaa 0a06 	sub.w	sl, sl, r6
    3858:	4650      	mov	r0, sl
}
    385a:	b003      	add	sp, #12
    385c:	ecbd 8b02 	vpop	{d8}
    3860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003864 <FatFile::peek()>:
int FatFile::peek() {
    3864:	b570      	push	{r4, r5, r6, lr}
    3866:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3868:	2201      	movs	r2, #1
    386a:	4604      	mov	r4, r0
    386c:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    3870:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    3874:	f7ff ff22 	bl	36bc <FatFile::read(void*, unsigned int)>
    3878:	2801      	cmp	r0, #1
    387a:	bf0c      	ite	eq
    387c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    3880:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    3884:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    3888:	b002      	add	sp, #8
    388a:	bd70      	pop	{r4, r5, r6, pc}

0000388c <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    388c:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    388e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    3892:	b530      	push	{r4, r5, lr}
    3894:	4604      	mov	r4, r0
    3896:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3898:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    389c:	d009      	beq.n	38b2 <FatFile::readDirCache(bool)+0x26>
    389e:	2901      	cmp	r1, #1
    38a0:	d107      	bne.n	38b2 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    38a2:	3320      	adds	r3, #32
    38a4:	6143      	str	r3, [r0, #20]
    return m_buffer;
    38a6:	68a0      	ldr	r0, [r4, #8]
    38a8:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    38aa:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    38ae:	b003      	add	sp, #12
    38b0:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    38b2:	2201      	movs	r2, #1
    38b4:	f10d 0107 	add.w	r1, sp, #7
    38b8:	4620      	mov	r0, r4
    38ba:	f7ff feff 	bl	36bc <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    38be:	b240      	sxtb	r0, r0
    38c0:	2801      	cmp	r0, #1
    38c2:	d103      	bne.n	38cc <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    38c4:	6963      	ldr	r3, [r4, #20]
    38c6:	331f      	adds	r3, #31
    38c8:	6163      	str	r3, [r4, #20]
    38ca:	e7ec      	b.n	38a6 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    38cc:	2000      	movs	r0, #0
    38ce:	e7ee      	b.n	38ae <FatFile::readDirCache(bool)+0x22>

000038d0 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    38d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    38d4:	7803      	ldrb	r3, [r0, #0]
    38d6:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    38d8:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    38da:	2b00      	cmp	r3, #0
    38dc:	d039      	beq.n	3952 <FatFile::seekSet(unsigned long)+0x82>
    38de:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    38e0:	6941      	ldr	r1, [r0, #20]
    38e2:	42a9      	cmp	r1, r5
    38e4:	d042      	beq.n	396c <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    38e6:	2d00      	cmp	r5, #0
    38e8:	d037      	beq.n	395a <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    38ea:	0718      	lsls	r0, r3, #28
    38ec:	d52a      	bpl.n	3944 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    38ee:	69e2      	ldr	r2, [r4, #28]
    38f0:	42aa      	cmp	r2, r5
    38f2:	d32e      	bcc.n	3952 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    38f4:	f8d4 c008 	ldr.w	ip, [r4, #8]
    38f8:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    38fa:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    38fc:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    3900:	f012 0f40 	tst.w	r2, #64	; 0x40
    3904:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3908:	b2c0      	uxtb	r0, r0
    390a:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    390e:	d130      	bne.n	3972 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    3910:	1e4a      	subs	r2, r1, #1
    3912:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3914:	b109      	cbz	r1, 391a <FatFile::seekSet(unsigned long)+0x4a>
    3916:	4296      	cmp	r6, r2
    3918:	d22f      	bcs.n	397a <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    391a:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    391c:	bf4c      	ite	mi
    391e:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    3922:	6a23      	ldrpl	r3, [r4, #32]
    3924:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3926:	f104 0810 	add.w	r8, r4, #16
    392a:	e006      	b.n	393a <FatFile::seekSet(unsigned long)+0x6a>
    392c:	6921      	ldr	r1, [r4, #16]
    392e:	3e01      	subs	r6, #1
    3930:	68a0      	ldr	r0, [r4, #8]
    3932:	f000 fed3 	bl	46dc <FatPartition::fatGet(unsigned long, unsigned long*)>
    3936:	2800      	cmp	r0, #0
    3938:	dd0b      	ble.n	3952 <FatFile::seekSet(unsigned long)+0x82>
    393a:	4642      	mov	r2, r8
  while (nNew--) {
    393c:	2e00      	cmp	r6, #0
    393e:	d1f5      	bne.n	392c <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3940:	78a2      	ldrb	r2, [r4, #2]
    3942:	e00c      	b.n	395e <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    3944:	069a      	lsls	r2, r3, #26
    3946:	d5d5      	bpl.n	38f4 <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    3948:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    394a:	895b      	ldrh	r3, [r3, #10]
    394c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    3950:	d9f6      	bls.n	3940 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    3952:	2000      	movs	r0, #0
  m_curCluster = tmp;
    3954:	6127      	str	r7, [r4, #16]
}
    3956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    395a:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    395c:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    395e:	f022 0220 	bic.w	r2, r2, #32
  return true;
    3962:	2001      	movs	r0, #1
  m_curPosition = pos;
    3964:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3966:	70a2      	strb	r2, [r4, #2]
}
    3968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    396c:	2001      	movs	r0, #1
}
    396e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    3972:	6a23      	ldr	r3, [r4, #32]
    3974:	4433      	add	r3, r6
    3976:	6123      	str	r3, [r4, #16]
    goto done;
    3978:	e7f1      	b.n	395e <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    397a:	1ab6      	subs	r6, r6, r2
    397c:	e7d3      	b.n	3926 <FatFile::seekSet(unsigned long)+0x56>
    397e:	bf00      	nop

00003980 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    3980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3984:	460e      	mov	r6, r1
    3986:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    3988:	2100      	movs	r1, #0
    398a:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    398c:	4604      	mov	r4, r0
    398e:	4698      	mov	r8, r3
    3990:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    3994:	f009 f912 	bl	cbbc <memset>
  m_vol = dirFile->m_vol;
    3998:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    399a:	6a33      	ldr	r3, [r6, #32]
    399c:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    39a0:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    39a2:	f005 050f 	and.w	r5, r5, #15
    39a6:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    39aa:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    39ae:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    39b0:	070b      	lsls	r3, r1, #28
    39b2:	d411      	bmi.n	39d8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    39b4:	f001 0117 	and.w	r1, r1, #23
    39b8:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    39ba:	7ad3      	ldrb	r3, [r2, #11]
    39bc:	f013 0f18 	tst.w	r3, #24
    39c0:	d102      	bne.n	39c8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    39c2:	f041 0108 	orr.w	r1, r1, #8
    39c6:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    39c8:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    39cc:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    39ce:	2b01      	cmp	r3, #1
    39d0:	d038      	beq.n	3a44 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    39d2:	2b02      	cmp	r3, #2
    39d4:	d006      	beq.n	39e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    39d6:	b1f3      	cbz	r3, 3a16 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    39d8:	2300      	movs	r3, #0
  return false;
    39da:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    39dc:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    39de:	70a3      	strb	r3, [r4, #2]
}
    39e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    39e4:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    39e6:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    39e8:	06cd      	lsls	r5, r1, #27
    39ea:	d4f5      	bmi.n	39d8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    39ec:	07ce      	lsls	r6, r1, #31
    39ee:	d4f3      	bmi.n	39d8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    39f0:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    39f4:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    39f8:	ea43 0301 	orr.w	r3, r3, r1
    39fc:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    39fe:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    3a00:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3a02:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    3a04:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    3a06:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    3a0a:	d012      	beq.n	3a32 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3a0c:	bb19      	cbnz	r1, 3a56 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3a0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3a12:	70a3      	strb	r3, [r4, #2]
    3a14:	e010      	b.n	3a38 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    3a16:	f418 6f80 	tst.w	r8, #1024	; 0x400
    3a1a:	d1dd      	bne.n	39d8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3a1c:	f008 0308 	and.w	r3, r8, #8
    3a20:	f043 0301 	orr.w	r3, r3, #1
    3a24:	70a3      	strb	r3, [r4, #2]
    3a26:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    3a28:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3a2a:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    3a2c:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    3a2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    3a32:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    3a34:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    3a36:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3a38:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    3a3c:	d104      	bne.n	3a48 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    3a3e:	2001      	movs	r0, #1
}
    3a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3a44:	2302      	movs	r3, #2
    3a46:	e7ce      	b.n	39e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3a48:	69e1      	ldr	r1, [r4, #28]
    3a4a:	4620      	mov	r0, r4
    3a4c:	f7ff ff40 	bl	38d0 <FatFile::seekSet(unsigned long)>
    3a50:	2800      	cmp	r0, #0
    3a52:	d1f4      	bne.n	3a3e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    3a54:	e7c0      	b.n	39d8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3a56:	f000 fe53 	bl	4700 <FatPartition::freeChain(unsigned long)>
    3a5a:	2800      	cmp	r0, #0
    3a5c:	d0bc      	beq.n	39d8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3a5e:	78a3      	ldrb	r3, [r4, #2]
    3a60:	e7d5      	b.n	3a0e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    3a62:	bf00      	nop

00003a64 <FatFile::sync()>:
  if (!isOpen()) {
    3a64:	7803      	ldrb	r3, [r0, #0]
    3a66:	b10b      	cbz	r3, 3a6c <FatFile::sync()+0x8>
    3a68:	f7ff bb94 	b.w	3194 <FatFile::sync() [clone .part.0]>
}
    3a6c:	2001      	movs	r0, #1
    3a6e:	4770      	bx	lr

00003a70 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    3a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    3a74:	7883      	ldrb	r3, [r0, #2]
    3a76:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    3a78:	079c      	lsls	r4, r3, #30
    3a7a:	d577      	bpl.n	3b6c <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3a7c:	4688      	mov	r8, r1
    3a7e:	0719      	lsls	r1, r3, #28
    3a80:	4691      	mov	r9, r2
    3a82:	f100 80b5 	bmi.w	3bf0 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    3a86:	696b      	ldr	r3, [r5, #20]
    3a88:	eb13 0209 	adds.w	r2, r3, r9
    3a8c:	d26e      	bcs.n	3b6c <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3a8e:	f1b9 0f00 	cmp.w	r9, #0
    3a92:	d040      	beq.n	3b16 <FatFile::write(void const*, unsigned int)+0xa6>
    3a94:	464f      	mov	r7, r9
    m_status = 0;
    3a96:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    3a9a:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    3a9c:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3aa0:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    3aa2:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3aa4:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    3aa8:	d13f      	bne.n	3b2a <FatFile::write(void const*, unsigned int)+0xba>
    3aaa:	2e00      	cmp	r6, #0
    3aac:	d13d      	bne.n	3b2a <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    3aae:	2900      	cmp	r1, #0
    3ab0:	d06e      	beq.n	3b90 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    3ab2:	78aa      	ldrb	r2, [r5, #2]
    3ab4:	0652      	lsls	r2, r2, #25
    3ab6:	d576      	bpl.n	3ba6 <FatFile::write(void const*, unsigned int)+0x136>
    3ab8:	69ea      	ldr	r2, [r5, #28]
    3aba:	429a      	cmp	r2, r3
    3abc:	d973      	bls.n	3ba6 <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    3abe:	3101      	adds	r1, #1
    3ac0:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3ac2:	3902      	subs	r1, #2
    3ac4:	7982      	ldrb	r2, [r0, #6]
    3ac6:	6943      	ldr	r3, [r0, #20]
    3ac8:	4091      	lsls	r1, r2
    3aca:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3acc:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    3ad0:	d353      	bcc.n	3b7a <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    3ad2:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    3ad6:	d370      	bcc.n	3bba <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3ad8:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    3ada:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3adc:	1b1b      	subs	r3, r3, r4
    3ade:	4293      	cmp	r3, r2
    3ae0:	bf28      	it	cs
    3ae2:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    3ae4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    3ae6:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3ae8:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3aec:	d307      	bcc.n	3afe <FatFile::write(void const*, unsigned int)+0x8e>
    3aee:	185e      	adds	r6, r3, r1
    3af0:	42b2      	cmp	r2, r6
    3af2:	d204      	bcs.n	3afe <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    3af4:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    3af8:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    3afc:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    3afe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3b00:	4642      	mov	r2, r8
    3b02:	6806      	ldr	r6, [r0, #0]
    3b04:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    3b06:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    3b08:	b380      	cbz	r0, 3b6c <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3b0a:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    3b0c:	1b3f      	subs	r7, r7, r4
    src += n;
    3b0e:	44a0      	add	r8, r4
    m_curPosition += n;
    3b10:	4423      	add	r3, r4
    3b12:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    3b14:	d1c1      	bne.n	3a9a <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    3b16:	69ea      	ldr	r2, [r5, #28]
    3b18:	429a      	cmp	r2, r3
    3b1a:	d276      	bcs.n	3c0a <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3b1c:	78aa      	ldrb	r2, [r5, #2]
    3b1e:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    3b20:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3b22:	f062 037f 	orn	r3, r2, #127	; 0x7f
    3b26:	70ab      	strb	r3, [r5, #2]
    3b28:	e025      	b.n	3b76 <FatFile::write(void const*, unsigned int)+0x106>
    3b2a:	7982      	ldrb	r2, [r0, #6]
    3b2c:	3902      	subs	r1, #2
    3b2e:	6943      	ldr	r3, [r0, #20]
    3b30:	4091      	lsls	r1, r2
    3b32:	4419      	add	r1, r3
                      + sectorOfCluster;
    3b34:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3b36:	2e00      	cmp	r6, #0
    3b38:	d0c8      	beq.n	3acc <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    3b3a:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3b3e:	2201      	movs	r2, #1
    3b40:	42bc      	cmp	r4, r7
    3b42:	bf28      	it	cs
    3b44:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    3b46:	3028      	adds	r0, #40	; 0x28
    3b48:	f003 f8e0 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    3b4c:	b170      	cbz	r0, 3b6c <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    3b4e:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3b50:	4426      	add	r6, r4
      memcpy(dst, src, n);
    3b52:	4622      	mov	r2, r4
    3b54:	4641      	mov	r1, r8
    3b56:	f004 fdbd 	bl	86d4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3b5a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3b5e:	68a8      	ldr	r0, [r5, #8]
    3b60:	d1d3      	bne.n	3b0a <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    3b62:	3028      	adds	r0, #40	; 0x28
    3b64:	f003 f8a6 	bl	6cb4 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    3b68:	2800      	cmp	r0, #0
    3b6a:	d1ce      	bne.n	3b0a <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3b6c:	786b      	ldrb	r3, [r5, #1]
  return 0;
    3b6e:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3b70:	f043 0301 	orr.w	r3, r3, #1
    3b74:	706b      	strb	r3, [r5, #1]
}
    3b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3b7a:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    3b7e:	696a      	ldr	r2, [r5, #20]
    3b80:	69eb      	ldr	r3, [r5, #28]
    3b82:	42bc      	cmp	r4, r7
    3b84:	bf28      	it	cs
    3b86:	463c      	movcs	r4, r7
    3b88:	429a      	cmp	r2, r3
    3b8a:	d305      	bcc.n	3b98 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3b8c:	2205      	movs	r2, #5
    3b8e:	e7da      	b.n	3b46 <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    3b90:	6a29      	ldr	r1, [r5, #32]
    3b92:	b321      	cbz	r1, 3bde <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    3b94:	6129      	str	r1, [r5, #16]
    3b96:	e794      	b.n	3ac2 <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    3b98:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3b9a:	f013 0f20 	tst.w	r3, #32
    3b9e:	bf14      	ite	ne
    3ba0:	2205      	movne	r2, #5
    3ba2:	2201      	moveq	r2, #1
    3ba4:	e7cf      	b.n	3b46 <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3ba6:	f105 0210 	add.w	r2, r5, #16
    3baa:	f000 fd97 	bl	46dc <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3bae:	2800      	cmp	r0, #0
    3bb0:	dbdc      	blt.n	3b6c <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    3bb2:	d024      	beq.n	3bfe <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    3bb4:	68a8      	ldr	r0, [r5, #8]
    3bb6:	6929      	ldr	r1, [r5, #16]
    3bb8:	e783      	b.n	3ac2 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    3bba:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3bbc:	428b      	cmp	r3, r1
    3bbe:	d104      	bne.n	3bca <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    3bc0:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    3bc4:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    3bc8:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    3bca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3bcc:	4642      	mov	r2, r8
    3bce:	6803      	ldr	r3, [r0, #0]
    3bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3bd2:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3bd4:	2800      	cmp	r0, #0
    3bd6:	d0c9      	beq.n	3b6c <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    3bd8:	f44f 7400 	mov.w	r4, #512	; 0x200
    3bdc:	e795      	b.n	3b0a <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    3bde:	4628      	mov	r0, r5
    3be0:	f7ff fb32 	bl	3248 <FatFile::addCluster()>
    3be4:	2800      	cmp	r0, #0
    3be6:	d0c1      	beq.n	3b6c <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    3be8:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    3bea:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    3bec:	6229      	str	r1, [r5, #32]
    3bee:	e768      	b.n	3ac2 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    3bf0:	69c1      	ldr	r1, [r0, #28]
    3bf2:	f7ff fe6d 	bl	38d0 <FatFile::seekSet(unsigned long)>
    3bf6:	2800      	cmp	r0, #0
    3bf8:	f47f af45 	bne.w	3a86 <FatFile::write(void const*, unsigned int)+0x16>
    3bfc:	e7b6      	b.n	3b6c <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    3bfe:	4628      	mov	r0, r5
    3c00:	f7ff fb22 	bl	3248 <FatFile::addCluster()>
    3c04:	2800      	cmp	r0, #0
    3c06:	d1d5      	bne.n	3bb4 <FatFile::write(void const*, unsigned int)+0x144>
    3c08:	e7b0      	b.n	3b6c <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    3c0a:	4b05      	ldr	r3, [pc, #20]	; (3c20 <FatFile::write(void const*, unsigned int)+0x1b0>)
    3c0c:	681b      	ldr	r3, [r3, #0]
    3c0e:	b12b      	cbz	r3, 3c1c <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3c10:	78ab      	ldrb	r3, [r5, #2]
    3c12:	4648      	mov	r0, r9
    3c14:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3c18:	70ab      	strb	r3, [r5, #2]
    3c1a:	e7ac      	b.n	3b76 <FatFile::write(void const*, unsigned int)+0x106>
    3c1c:	4648      	mov	r0, r9
    3c1e:	e7aa      	b.n	3b76 <FatFile::write(void const*, unsigned int)+0x106>
    3c20:	200200a4 	.word	0x200200a4

00003c24 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    3c28:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3c2a:	b08d      	sub	sp, #52	; 0x34
    3c2c:	4614      	mov	r4, r2
    next = begin;
    3c2e:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3c30:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3c32:	4606      	mov	r6, r0
    3c34:	4689      	mov	r9, r1
  FatFile dir = *this;
    3c36:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3c38:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    3c3a:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    3c3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3c42:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3c44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3c48:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3c4a:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    3c4e:	6065      	str	r5, [r4, #4]
    3c50:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3c52:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    3c54:	f8a4 e00c 	strh.w	lr, [r4, #12]
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d03f      	beq.n	3cdc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    3c5c:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3c60:	eba9 010a 	sub.w	r1, r9, sl
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    3c64:	a803      	add	r0, sp, #12
    3c66:	b289      	uxth	r1, r1
    3c68:	0149      	lsls	r1, r1, #5
    3c6a:	f7ff fe31 	bl	38d0 <FatFile::seekSet(unsigned long)>
    3c6e:	b350      	cbz	r0, 3cc6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    3c70:	2100      	movs	r1, #0
    3c72:	a803      	add	r0, sp, #12
    3c74:	f7ff fe0a 	bl	388c <FatFile::readDirCache(bool)>
    if (!ldir) {
    3c78:	4607      	mov	r7, r0
    3c7a:	b320      	cbz	r0, 3cc6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    3c7c:	2500      	movs	r5, #0
    3c7e:	e00d      	b.n	3c9c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    3c80:	f003 f86c 	bl	6d5c <FsName::get16()>
    3c84:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    3c86:	4658      	mov	r0, fp
    3c88:	f003 f8da 	bl	6e40 <toUpcase(unsigned short)>
    3c8c:	4683      	mov	fp, r0
    3c8e:	4640      	mov	r0, r8
    3c90:	f003 f8d6 	bl	6e40 <toUpcase(unsigned short)>
    3c94:	4583      	cmp	fp, r0
    3c96:	d116      	bne.n	3cc6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    3c98:	2d0d      	cmp	r5, #13
    3c9a:	d018      	beq.n	3cce <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    3c9c:	b2ea      	uxtb	r2, r5
    3c9e:	4639      	mov	r1, r7
    3ca0:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    3ca2:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    3ca4:	f000 fb90 	bl	43c8 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    3ca8:	89a3      	ldrh	r3, [r4, #12]
    3caa:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    3cac:	4620      	mov	r0, r4
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d1e6      	bne.n	3c80 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    3cb2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3cb6:	4293      	cmp	r3, r2
    3cb8:	d1e2      	bne.n	3c80 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    3cba:	fabb f08b 	clz	r0, fp
    3cbe:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    3cc0:	b00d      	add	sp, #52	; 0x34
    3cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    3cc6:	2000      	movs	r0, #0
}
    3cc8:	b00d      	add	sp, #52	; 0x34
    3cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3cce:	f10a 0a01 	add.w	sl, sl, #1
    3cd2:	9b01      	ldr	r3, [sp, #4]
    3cd4:	fa5f fa8a 	uxtb.w	sl, sl
    3cd8:	4553      	cmp	r3, sl
    3cda:	d2c1      	bcs.n	3c60 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    3cdc:	2001      	movs	r0, #1
    3cde:	e7ef      	b.n	3cc0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00003ce0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    3ce4:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3ce6:	b08d      	sub	sp, #52	; 0x34
    3ce8:	4616      	mov	r6, r2
    3cea:	469a      	mov	sl, r3
  FatFile dir = *this;
    3cec:	f10d 0c0c 	add.w	ip, sp, #12
    3cf0:	f102 0415 	add.w	r4, r2, #21
    3cf4:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3cf8:	9101      	str	r1, [sp, #4]
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    3cfa:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    3cfe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3d00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3d04:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3d06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3d0a:	683b      	ldr	r3, [r7, #0]
    3d0c:	f8cc 3000 	str.w	r3, [ip]
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3d10:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    3d14:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    3d18:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    3d1c:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3d1e:	fa52 f383 	uxtab	r3, r2, r3
    3d22:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    3d26:	d1f3      	bne.n	3d10 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    3d28:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    3d2a:	f04f 0800 	mov.w	r8, #0
    next = begin;
    3d2e:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    3d30:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3d34:	f1ba 0f00 	cmp.w	sl, #0
    3d38:	d04e      	beq.n	3dd8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    3d3a:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3d3c:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    3d3e:	a803      	add	r0, sp, #12
    3d40:	1bd9      	subs	r1, r3, r7
    3d42:	b289      	uxth	r1, r1
    3d44:	0149      	lsls	r1, r1, #5
    3d46:	f7ff fdc3 	bl	38d0 <FatFile::seekSet(unsigned long)>
    3d4a:	2800      	cmp	r0, #0
    3d4c:	d055      	beq.n	3dfa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    3d4e:	2100      	movs	r1, #0
    3d50:	a803      	add	r0, sp, #12
    3d52:	f7ff fd9b 	bl	388c <FatFile::readDirCache(bool)>
    if (!ldir) {
    3d56:	2800      	cmp	r0, #0
    3d58:	d04f      	beq.n	3dfa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    3d5a:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3d5c:	4557      	cmp	r7, sl
    3d5e:	f100 0b01 	add.w	fp, r0, #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    3d62:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    3d66:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    3d6a:	f04f 0500 	mov.w	r5, #0
    3d6e:	f043 0301 	orr.w	r3, r3, #1
    3d72:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3d76:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3d7a:	bf0c      	ite	eq
    3d7c:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    3d80:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3d82:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    3d84:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3d88:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    3d8a:	7303      	strb	r3, [r0, #12]
    3d8c:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    3d90:	f880 900d 	strb.w	r9, [r0, #13]
    3d94:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    3d96:	e006      	b.n	3da6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    3d98:	f8ab 0000 	strh.w	r0, [fp]
    3d9c:	3401      	adds	r4, #1
    3d9e:	3501      	adds	r5, #1
    3da0:	f10b 0b02 	add.w	fp, fp, #2
    3da4:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    3da6:	89b0      	ldrh	r0, [r6, #12]
    3da8:	b918      	cbnz	r0, 3db2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    3daa:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    3dae:	429a      	cmp	r2, r3
    3db0:	d016      	beq.n	3de0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    3db2:	4630      	mov	r0, r6
    3db4:	f002 ffd2 	bl	6d5c <FsName::get16()>
  if (i < 5) {
    3db8:	2d04      	cmp	r5, #4
    3dba:	b2eb      	uxtb	r3, r5
    3dbc:	d9ec      	bls.n	3d98 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    3dbe:	2b0a      	cmp	r3, #10
    3dc0:	d802      	bhi.n	3dc8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    3dc2:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    3dc6:	e7e9      	b.n	3d9c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    3dc8:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    3dca:	f8ab 0005 	strh.w	r0, [fp, #5]
    3dce:	d1e5      	bne.n	3d9c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3dd0:	3701      	adds	r7, #1
    3dd2:	b2ff      	uxtb	r7, r7
    3dd4:	45ba      	cmp	sl, r7
    3dd6:	d2b1      	bcs.n	3d3c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    3dd8:	2001      	movs	r0, #1

 fail:
  return false;
}
    3dda:	b00d      	add	sp, #52	; 0x34
    3ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    3de0:	f1b8 0f00 	cmp.w	r8, #0
    3de4:	d006      	beq.n	3df4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    3de6:	f108 0801 	add.w	r8, r8, #1
    3dea:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3dee:	fa5f f888 	uxtb.w	r8, r8
    3df2:	e7e1      	b.n	3db8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    3df4:	f04f 0801 	mov.w	r8, #1
    3df8:	e7de      	b.n	3db8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    3dfa:	2000      	movs	r0, #0
}
    3dfc:	b00d      	add	sp, #52	; 0x34
    3dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e02:	bf00      	nop

00003e04 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    3e04:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    3e06:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    3e0a:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    3e0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    3e12:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    3e16:	4686      	mov	lr, r0
  const char* end = fname->end;
    3e18:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    3e1a:	6051      	str	r1, [r2, #4]
    3e1c:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    3e20:	781a      	ldrb	r2, [r3, #0]
    3e22:	2a2e      	cmp	r2, #46	; 0x2e
    3e24:	bf14      	ite	ne
    3e26:	2001      	movne	r0, #1
    3e28:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    3e2a:	d103      	bne.n	3e34 <FatFile::makeSFN(FatLfn_t*)+0x30>
    3e2c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3e30:	2a2e      	cmp	r2, #46	; 0x2e
    3e32:	d0fb      	beq.n	3e2c <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    3e34:	1e61      	subs	r1, r4, #1
    3e36:	4299      	cmp	r1, r3
    3e38:	d90b      	bls.n	3e52 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3e3a:	460a      	mov	r2, r1
    3e3c:	e002      	b.n	3e44 <FatFile::makeSFN(FatLfn_t*)+0x40>
    3e3e:	4293      	cmp	r3, r2
    3e40:	4611      	mov	r1, r2
    3e42:	d006      	beq.n	3e52 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3e44:	4611      	mov	r1, r2
    3e46:	3a01      	subs	r2, #1
    3e48:	f891 c000 	ldrb.w	ip, [r1]
    3e4c:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    3e50:	d1f5      	bne.n	3e3e <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    3e52:	429c      	cmp	r4, r3
    3e54:	f04f 0500 	mov.w	r5, #0
    3e58:	f240 8086 	bls.w	3f68 <FatFile::makeSFN(FatLfn_t*)+0x164>
    3e5c:	2607      	movs	r6, #7
    3e5e:	2708      	movs	r7, #8
    3e60:	46a9      	mov	r9, r5
    3e62:	46a8      	mov	r8, r5
    3e64:	e006      	b.n	3e74 <FatFile::makeSFN(FatLfn_t*)+0x70>
    3e66:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    3e68:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    3e6a:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    3e6e:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    3e70:	429c      	cmp	r4, r3
    3e72:	d95b      	bls.n	3f2c <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    3e74:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    3e76:	2a2e      	cmp	r2, #46	; 0x2e
    3e78:	bf08      	it	eq
    3e7a:	4299      	cmpeq	r1, r3
    3e7c:	d0f3      	beq.n	3e66 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    3e7e:	2a22      	cmp	r2, #34	; 0x22
    3e80:	d00d      	beq.n	3e9e <FatFile::makeSFN(FatLfn_t*)+0x9a>
    3e82:	2a7c      	cmp	r2, #124	; 0x7c
    3e84:	d00b      	beq.n	3e9e <FatFile::makeSFN(FatLfn_t*)+0x9a>
    3e86:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    3e8a:	f1bc 0f02 	cmp.w	ip, #2
    3e8e:	d906      	bls.n	3e9e <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    3e90:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    3e94:	f1bc 0f05 	cmp.w	ip, #5
    3e98:	d821      	bhi.n	3ede <FatFile::makeSFN(FatLfn_t*)+0xda>
    3e9a:	2a2d      	cmp	r2, #45	; 0x2d
    3e9c:	d01f      	beq.n	3ede <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    3e9e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    3ea2:	2a80      	cmp	r2, #128	; 0x80
    3ea4:	d05d      	beq.n	3f62 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    3ea6:	454e      	cmp	r6, r9
    3ea8:	d22f      	bcs.n	3f0a <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    3eaa:	4299      	cmp	r1, r3
    3eac:	bf2c      	ite	cs
    3eae:	2000      	movcs	r0, #0
    3eb0:	2001      	movcc	r0, #1
    3eb2:	2e0a      	cmp	r6, #10
    3eb4:	bf08      	it	eq
    3eb6:	f040 0001 	orreq.w	r0, r0, #1
    3eba:	2800      	cmp	r0, #0
    3ebc:	d047      	beq.n	3f4e <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    3ebe:	f89e 3016 	ldrb.w	r3, [lr, #22]
    3ec2:	2b20      	cmp	r3, #32
    3ec4:	d040      	beq.n	3f48 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    3ec6:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3eca:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    3ecc:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    3ece:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    3ed0:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3ed2:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    3ed6:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    3ed8:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    3eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3ede:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    3ee2:	f1bc 0f05 	cmp.w	ip, #5
    3ee6:	d9da      	bls.n	3e9e <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    3ee8:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    3eec:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    3ef0:	d8d5      	bhi.n	3e9e <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    3ef2:	454e      	cmp	r6, r9
    3ef4:	d3d9      	bcc.n	3eaa <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    3ef6:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    3efa:	f1bc 0f19 	cmp.w	ip, #25
    3efe:	d828      	bhi.n	3f52 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    3f00:	3a20      	subs	r2, #32
        lc |= bit;
    3f02:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    3f04:	b2d2      	uxtb	r2, r2
        lc |= bit;
    3f06:	b2ed      	uxtb	r5, r5
    3f08:	e001      	b.n	3f0e <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    3f0a:	2000      	movs	r0, #0
        c = '_';
    3f0c:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    3f0e:	f109 0c01 	add.w	ip, r9, #1
    3f12:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    3f14:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    3f16:	f889 2016 	strb.w	r2, [r9, #22]
    3f1a:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    3f1e:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    3f20:	4691      	mov	r9, r2
    3f22:	bf98      	it	ls
    3f24:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    3f28:	429c      	cmp	r4, r3
    3f2a:	d8a3      	bhi.n	3e74 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    3f2c:	f89e 3016 	ldrb.w	r3, [lr, #22]
    3f30:	2b20      	cmp	r3, #32
    3f32:	d009      	beq.n	3f48 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    3f34:	2800      	cmp	r0, #0
    3f36:	d0c6      	beq.n	3ec6 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    3f38:	ea18 0f05 	tst.w	r8, r5
    3f3c:	bf18      	it	ne
    3f3e:	2502      	movne	r5, #2
    3f40:	f88e 5015 	strb.w	r5, [lr, #21]
}
    3f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    3f48:	2000      	movs	r0, #0
}
    3f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3f4e:	460b      	mov	r3, r1
    3f50:	e78e      	b.n	3e70 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    3f52:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    3f56:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    3f5a:	bf98      	it	ls
    3f5c:	ea47 0808 	orrls.w	r8, r7, r8
    3f60:	e7d5      	b.n	3f0e <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    3f62:	3301      	adds	r3, #1
        is83 = false;
    3f64:	2000      	movs	r0, #0
    3f66:	e783      	b.n	3e70 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    3f68:	46a8      	mov	r8, r5
    3f6a:	e7df      	b.n	3f2c <FatFile::makeSFN(FatLfn_t*)+0x128>

00003f6c <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    3f6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    3f70:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    3f74:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    3f76:	460f      	mov	r7, r1
    3f78:	4604      	mov	r4, r0
    3f7a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 401c <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    3f7e:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    3f82:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3f86:	f101 0616 	add.w	r6, r1, #22
    3f8a:	f1b8 0f03 	cmp.w	r8, #3
    3f8e:	f8db 3000 	ldr.w	r3, [fp]
    3f92:	bf28      	it	cs
    3f94:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    3f98:	442b      	add	r3, r5
    3f9a:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3f9c:	f108 0304 	add.w	r3, r8, #4
    3fa0:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    3fa2:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3fa6:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    3fa8:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    3faa:	2a09      	cmp	r2, #9
    3fac:	f102 0137 	add.w	r1, r2, #55	; 0x37
    3fb0:	bf98      	it	ls
    3fb2:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    3fb6:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3fb8:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    3fba:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3fbc:	4598      	cmp	r8, r3
    3fbe:	d1f0      	bne.n	3fa2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    3fc0:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    3fc4:	2100      	movs	r1, #0
    3fc6:	4620      	mov	r0, r4
    3fc8:	f883 a016 	strb.w	sl, [r3, #22]
    3fcc:	f7ff fc80 	bl	38d0 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    3fd0:	2101      	movs	r1, #1
    3fd2:	4620      	mov	r0, r4
    3fd4:	f7ff fc5a 	bl	388c <FatFile::readDirCache(bool)>
    3fd8:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3fda:	220b      	movs	r2, #11
    3fdc:	4630      	mov	r0, r6
      if (!dir) {
    3fde:	b19b      	cbz	r3, 4008 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    3fe0:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3fe4:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    3fe6:	f1bc 0f00 	cmp.w	ip, #0
    3fea:	d013      	beq.n	4014 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3fec:	7adb      	ldrb	r3, [r3, #11]
    3fee:	071b      	lsls	r3, r3, #28
    3ff0:	d4ee      	bmi.n	3fd0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    3ff2:	f008 fd37 	bl	ca64 <memcmp>
    3ff6:	2800      	cmp	r0, #0
    3ff8:	d1ea      	bne.n	3fd0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    3ffa:	f109 39ff 	add.w	r9, r9, #4294967295
    3ffe:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    4002:	d1c2      	bne.n	3f8a <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    4004:	4648      	mov	r0, r9
 fail:
    4006:	e003      	b.n	4010 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    4008:	7860      	ldrb	r0, [r4, #1]
    400a:	fab0 f080 	clz	r0, r0
    400e:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    4010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    4014:	2001      	movs	r0, #1
}
    4016:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    401a:	bf00      	nop
    401c:	20022564 	.word	0x20022564

00004020 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    4020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4024:	ed2d 8b02 	vpush	{d8}
    4028:	b08b      	sub	sp, #44	; 0x2c
    402a:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    402e:	688b      	ldr	r3, [r1, #8]
    4030:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    4032:	780b      	ldrb	r3, [r1, #0]
    4034:	f013 0f70 	tst.w	r3, #112	; 0x70
    4038:	d053      	beq.n	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    403a:	9b02      	ldr	r3, [sp, #8]
    403c:	781b      	ldrb	r3, [r3, #0]
    403e:	2b00      	cmp	r3, #0
    4040:	d14f      	bne.n	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    4042:	6913      	ldr	r3, [r2, #16]
    4044:	4690      	mov	r8, r2
    4046:	4a9a      	ldr	r2, [pc, #616]	; (42b0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    4048:	460e      	mov	r6, r1
    404a:	330c      	adds	r3, #12
    404c:	fba2 2303 	umull	r2, r3, r2, r3
    4050:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    4054:	f898 3015 	ldrb.w	r3, [r8, #21]
    4058:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    405a:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    405c:	f000 80a7 	beq.w	41ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    4060:	1c57      	adds	r7, r2, #1
    4062:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    4064:	2300      	movs	r3, #0
    seekSet(0);
    4066:	4630      	mov	r0, r6
    4068:	4619      	mov	r1, r3
    406a:	461c      	mov	r4, r3
    406c:	9306      	str	r3, [sp, #24]
    406e:	f7ff fc2f 	bl	38d0 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4072:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    4076:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    4078:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    407a:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    407c:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    4080:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    4082:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    4084:	2100      	movs	r1, #0
    4086:	4630      	mov	r0, r6
    4088:	f7ff fc00 	bl	388c <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    408c:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    4090:	4603      	mov	r3, r0
    4092:	b320      	cbz	r0, 40de <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    4094:	7802      	ldrb	r2, [r0, #0]
    4096:	2ae5      	cmp	r2, #229	; 0xe5
    4098:	d029      	beq.n	40ee <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    409a:	b342      	cbz	r2, 40ee <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    409c:	42bc      	cmp	r4, r7
    409e:	bf38      	it	cc
    40a0:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    40a2:	2a2e      	cmp	r2, #46	; 0x2e
    40a4:	d02b      	beq.n	40fe <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    40a6:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    40aa:	f1bc 0f0f 	cmp.w	ip, #15
    40ae:	d054      	beq.n	415a <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    40b0:	f01c 0c08 	ands.w	ip, ip, #8
    40b4:	d123      	bne.n	40fe <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    40b6:	f1b9 0f00 	cmp.w	r9, #0
    40ba:	f040 80d5 	bne.w	4268 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    40be:	220b      	movs	r2, #11
    40c0:	ee18 1a10 	vmov	r1, s16
    40c4:	f008 fcce 	bl	ca64 <memcmp>
    40c8:	2800      	cmp	r0, #0
    40ca:	d1da      	bne.n	4082 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    40cc:	f898 3015 	ldrb.w	r3, [r8, #21]
    40d0:	f013 0301 	ands.w	r3, r3, #1
    40d4:	f000 80e4 	beq.w	42a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    40d8:	2301      	movs	r3, #1
    40da:	9305      	str	r3, [sp, #20]
    40dc:	e7d1      	b.n	4082 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    40de:	7873      	ldrb	r3, [r6, #1]
    40e0:	b183      	cbz	r3, 4104 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    40e2:	2000      	movs	r0, #0
}
    40e4:	b00b      	add	sp, #44	; 0x2c
    40e6:	ecbd 8b02 	vpop	{d8}
    40ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    40ee:	2c00      	cmp	r4, #0
    40f0:	bf08      	it	eq
    40f2:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    40f4:	42bc      	cmp	r4, r7
    40f6:	d201      	bcs.n	40fc <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    40f8:	3401      	adds	r4, #1
    40fa:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    40fc:	b112      	cbz	r2, 4104 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    40fe:	f04f 0900 	mov.w	r9, #0
    4102:	e7be      	b.n	4082 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    4104:	9b03      	ldr	r3, [sp, #12]
    4106:	059a      	lsls	r2, r3, #22
    4108:	d5eb      	bpl.n	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    410a:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    410e:	3b01      	subs	r3, #1
    4110:	2b01      	cmp	r3, #1
    4112:	d8e6      	bhi.n	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    4114:	2c00      	cmp	r4, #0
    4116:	bf08      	it	eq
    4118:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    411a:	42bc      	cmp	r4, r7
    411c:	d303      	bcc.n	4126 <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    411e:	e048      	b.n	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    4120:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    4122:	42a7      	cmp	r7, r4
    4124:	d045      	beq.n	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    4126:	2100      	movs	r1, #0
    4128:	4630      	mov	r0, r6
    412a:	f7ff fbaf 	bl	388c <FatFile::readDirCache(bool)>
    freeFound++;
    412e:	1c63      	adds	r3, r4, #1
    if (!dir) {
    4130:	2800      	cmp	r0, #0
    4132:	d1f5      	bne.n	4120 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    4134:	7873      	ldrb	r3, [r6, #1]
    4136:	2b00      	cmp	r3, #0
    4138:	d1d3      	bne.n	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    413a:	42a7      	cmp	r7, r4
    413c:	d939      	bls.n	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    413e:	9d07      	ldr	r5, [sp, #28]
    4140:	e005      	b.n	414e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    4142:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    4144:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    4148:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    414a:	42a7      	cmp	r7, r4
    414c:	d931      	bls.n	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    414e:	4630      	mov	r0, r6
    4150:	f7ff f894 	bl	327c <FatFile::addDirCluster()>
    4154:	2800      	cmp	r0, #0
    4156:	d1f4      	bne.n	4142 <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    4158:	e7c3      	b.n	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    415a:	f1b9 0f00 	cmp.w	r9, #0
    415e:	d119      	bne.n	4194 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    4160:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    4164:	9904      	ldr	r1, [sp, #16]
    4166:	4559      	cmp	r1, fp
    4168:	d18b      	bne.n	4082 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    416a:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    416e:	d088      	beq.n	4082 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    4170:	7b43      	ldrb	r3, [r0, #13]
    4172:	4689      	mov	r9, r1
    4174:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    4176:	f1bb 0f01 	cmp.w	fp, #1
    417a:	d182      	bne.n	4082 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    417c:	1c69      	adds	r1, r5, #1
    417e:	464b      	mov	r3, r9
    4180:	4642      	mov	r2, r8
    4182:	4630      	mov	r0, r6
    4184:	b289      	uxth	r1, r1
    4186:	f7ff fd4d 	bl	3c24 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    418a:	2800      	cmp	r0, #0
    418c:	bf08      	it	eq
    418e:	f04f 0900 	moveq.w	r9, #0
    4192:	e776      	b.n	4082 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    4194:	f10b 3bff 	add.w	fp, fp, #4294967295
    4198:	fa5f fb8b 	uxtb.w	fp, fp
    419c:	455a      	cmp	r2, fp
    419e:	d1ae      	bne.n	40fe <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    41a0:	7b43      	ldrb	r3, [r0, #13]
    41a2:	9a06      	ldr	r2, [sp, #24]
    41a4:	4293      	cmp	r3, r2
    41a6:	d0e6      	beq.n	4176 <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    41a8:	f04f 0900 	mov.w	r9, #0
    41ac:	e769      	b.n	4082 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    41ae:	2701      	movs	r7, #1
    41b0:	e758      	b.n	4064 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    41b2:	9b05      	ldr	r3, [sp, #20]
    41b4:	b12b      	cbz	r3, 41c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    41b6:	4641      	mov	r1, r8
    41b8:	4630      	mov	r0, r6
    41ba:	f7ff fed7 	bl	3f6c <FatFile::makeUniqueSfn(FatLfn_t*)>
    41be:	2800      	cmp	r0, #0
    41c0:	d08f      	beq.n	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    41c2:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    41c4:	4642      	mov	r2, r8
    41c6:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    41c8:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    41ca:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    41ce:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    41d0:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    41d2:	4629      	mov	r1, r5
    41d4:	f7ff fd84 	bl	3ce0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    41d8:	2800      	cmp	r0, #0
    41da:	d082      	beq.n	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    41dc:	0169      	lsls	r1, r5, #5
    41de:	4630      	mov	r0, r6
    41e0:	f7ff fb76 	bl	38d0 <FatFile::seekSet(unsigned long)>
    41e4:	2800      	cmp	r0, #0
    41e6:	f43f af7c 	beq.w	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    41ea:	2100      	movs	r1, #0
    41ec:	4630      	mov	r0, r6
    41ee:	f7ff fb4d 	bl	388c <FatFile::readDirCache(bool)>
  if (!dir) {
    41f2:	4604      	mov	r4, r0
    41f4:	2800      	cmp	r0, #0
    41f6:	f43f af74 	beq.w	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    41fa:	2220      	movs	r2, #32
    41fc:	2100      	movs	r1, #0
    41fe:	f008 fcdd 	bl	cbbc <memset>
  memcpy(dir->name, fname->sfn, 11);
    4202:	f8d8 2016 	ldr.w	r2, [r8, #22]
    4206:	f8d8 301a 	ldr.w	r3, [r8, #26]
    420a:	6022      	str	r2, [r4, #0]
    420c:	6063      	str	r3, [r4, #4]
    420e:	f898 3020 	ldrb.w	r3, [r8, #32]
    4212:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    4216:	72a3      	strb	r3, [r4, #10]
    4218:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    421a:	f898 3015 	ldrb.w	r3, [r8, #21]
    421e:	f003 0318 	and.w	r3, r3, #24
    4222:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    4224:	4b23      	ldr	r3, [pc, #140]	; (42b4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    4226:	681b      	ldr	r3, [r3, #0]
    4228:	2b00      	cmp	r3, #0
    422a:	d03b      	beq.n	42a4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    422c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    4230:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    4234:	a809      	add	r0, sp, #36	; 0x24
    4236:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    4238:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    423c:	8223      	strh	r3, [r4, #16]
    423e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    4242:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    4244:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    4248:	7363      	strb	r3, [r4, #13]
    424a:	9a07      	ldr	r2, [sp, #28]
    424c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    4250:	f043 0301 	orr.w	r3, r3, #1
    4254:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    4258:	9b03      	ldr	r3, [sp, #12]
    425a:	462a      	mov	r2, r5
    425c:	4631      	mov	r1, r6
    425e:	9802      	ldr	r0, [sp, #8]
    4260:	9700      	str	r7, [sp, #0]
    4262:	f7ff fb8d 	bl	3980 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    4266:	e73d      	b.n	40e4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    4268:	f1bb 0f01 	cmp.w	fp, #1
    426c:	f47f af39 	bne.w	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    4270:	300a      	adds	r0, #10
    4272:	e001      	b.n	4278 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4274:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4278:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    427c:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    427e:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    4282:	fa52 f281 	uxtab	r2, r2, r1
    4286:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    428a:	d1f3      	bne.n	4274 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    428c:	9b06      	ldr	r3, [sp, #24]
    428e:	4563      	cmp	r3, ip
    4290:	f47f af27 	bne.w	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    4294:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    4296:	9b03      	ldr	r3, [sp, #12]
    4298:	0519      	lsls	r1, r3, #20
    429a:	f53f af22 	bmi.w	40e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    429e:	e7db      	b.n	4258 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    42a0:	461f      	mov	r7, r3
    42a2:	e7f8      	b.n	4296 <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    42a4:	f245 6321 	movw	r3, #22049	; 0x5621
    42a8:	8223      	strh	r3, [r4, #16]
    42aa:	8323      	strh	r3, [r4, #24]
    42ac:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    42ae:	e7cc      	b.n	424a <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    42b0:	4ec4ec4f 	.word	0x4ec4ec4f
    42b4:	200200a4 	.word	0x200200a4

000042b8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    42b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42bc:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    42be:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    42c0:	b082      	sub	sp, #8
    42c2:	460c      	mov	r4, r1
  while (*path == ' ') {
    42c4:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    42c6:	4615      	mov	r5, r2
  while (*path == ' ') {
    42c8:	d103      	bne.n	42d2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    42ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    42ce:	2b20      	cmp	r3, #32
    42d0:	d0fb      	beq.n	42ca <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    42d2:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    42d4:	7823      	ldrb	r3, [r4, #0]
    42d6:	b363      	cbz	r3, 4332 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    42d8:	2b2f      	cmp	r3, #47	; 0x2f
    42da:	d02a      	beq.n	4332 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    42dc:	f04f 0800 	mov.w	r8, #0
    42e0:	4e29      	ldr	r6, [pc, #164]	; (4388 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    42e2:	1d21      	adds	r1, r4, #4
    42e4:	4620      	mov	r0, r4
    42e6:	aa01      	add	r2, sp, #4
    42e8:	f002 fd5e 	bl	6da8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    42ec:	4604      	mov	r4, r0
    42ee:	b170      	cbz	r0, 430e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    42f0:	9b01      	ldr	r3, [sp, #4]
    42f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    42f6:	d240      	bcs.n	437a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    42f8:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    42fa:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    42fe:	d831      	bhi.n	4364 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    4300:	2b3c      	cmp	r3, #60	; 0x3c
    4302:	b2d9      	uxtb	r1, r3
    4304:	d829      	bhi.n	435a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    4306:	2921      	cmp	r1, #33	; 0x21
    4308:	d805      	bhi.n	4316 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    430a:	291f      	cmp	r1, #31
    430c:	d809      	bhi.n	4322 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    430e:	2000      	movs	r0, #0
    4310:	b002      	add	sp, #8
    4312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4316:	3922      	subs	r1, #34	; 0x22
    4318:	b2c9      	uxtb	r1, r1
    431a:	fa26 f101 	lsr.w	r1, r6, r1
    431e:	07ca      	lsls	r2, r1, #31
    4320:	d4f5      	bmi.n	430e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    4322:	2b2e      	cmp	r3, #46	; 0x2e
    4324:	d001      	beq.n	432a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    4326:	2b20      	cmp	r3, #32
    4328:	d11c      	bne.n	4364 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    432a:	7823      	ldrb	r3, [r4, #0]
    432c:	b10b      	cbz	r3, 4332 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    432e:	2b2f      	cmp	r3, #47	; 0x2f
    4330:	d1d7      	bne.n	42e2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    4332:	692b      	ldr	r3, [r5, #16]
    4334:	3b01      	subs	r3, #1
    4336:	2bfe      	cmp	r3, #254	; 0xfe
    4338:	d8e9      	bhi.n	430e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    433a:	7823      	ldrb	r3, [r4, #0]
    433c:	2b20      	cmp	r3, #32
    433e:	d103      	bne.n	4348 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    4340:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    4344:	2b20      	cmp	r3, #32
    4346:	d0fb      	beq.n	4340 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    4348:	2b2f      	cmp	r3, #47	; 0x2f
    434a:	d0f9      	beq.n	4340 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    434c:	4628      	mov	r0, r5
  *ptr = path;
    434e:	603c      	str	r4, [r7, #0]
}
    4350:	b002      	add	sp, #8
    4352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    4356:	f7ff bd55 	b.w	3e04 <FatFile::makeSFN(FatLfn_t*)>
    435a:	295c      	cmp	r1, #92	; 0x5c
    435c:	d0d7      	beq.n	430e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    435e:	d905      	bls.n	436c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    4360:	297c      	cmp	r1, #124	; 0x7c
    4362:	d0d4      	beq.n	430e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    4364:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    4368:	60ac      	str	r4, [r5, #8]
    436a:	e7de      	b.n	432a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    436c:	393e      	subs	r1, #62	; 0x3e
    436e:	2901      	cmp	r1, #1
    4370:	d8f8      	bhi.n	4364 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    4372:	2000      	movs	r0, #0
    4374:	b002      	add	sp, #8
    4376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    437a:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    437e:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    4380:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    4384:	e7d1      	b.n	432a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    4386:	bf00      	nop
    4388:	05002101 	.word	0x05002101

0000438c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    438c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4390:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    4394:	b1a2      	cbz	r2, 43c0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    4396:	4605      	mov	r5, r0
    4398:	460c      	mov	r4, r1
    439a:	4698      	mov	r8, r3
    439c:	1857      	adds	r7, r2, r1
    439e:	e001      	b.n	43a4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    43a0:	42bc      	cmp	r4, r7
    43a2:	d00d      	beq.n	43c0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    43a4:	682b      	ldr	r3, [r5, #0]
    43a6:	4620      	mov	r0, r4
    43a8:	4649      	mov	r1, r9
    43aa:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    43ac:	47c0      	blx	r8
    43ae:	4621      	mov	r1, r4
    43b0:	4602      	mov	r2, r0
    43b2:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    43b4:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    43b6:	47b0      	blx	r6
    43b8:	2800      	cmp	r0, #0
    43ba:	d1f1      	bne.n	43a0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    43bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    43c0:	2001      	movs	r0, #1
  }
    43c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    43c6:	bf00      	nop

000043c8 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
  if (i < 5) {
    43c8:	2a04      	cmp	r2, #4
    43ca:	d804      	bhi.n	43d6 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    43cc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    43d0:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    43d4:	4770      	bx	lr
  } else if (i < 11) {
    43d6:	2a0a      	cmp	r2, #10
    43d8:	d803      	bhi.n	43e2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    43da:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    43de:	8890      	ldrh	r0, [r2, #4]
    43e0:	4770      	bx	lr
  } else if (i < 13) {
    43e2:	2a0c      	cmp	r2, #12
    43e4:	d803      	bhi.n	43ee <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    43e6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    43ea:	88c8      	ldrh	r0, [r1, #6]
    43ec:	4770      	bx	lr
  return 0;
    43ee:	2000      	movs	r0, #0
}
    43f0:	4770      	bx	lr
    43f2:	bf00      	nop

000043f4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    43f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    43f8:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    43fc:	b1c3      	cbz	r3, 4430 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    43fe:	4681      	mov	r9, r0
    4400:	460c      	mov	r4, r1
    4402:	4615      	mov	r5, r2
    4404:	185e      	adds	r6, r3, r1
    4406:	e002      	b.n	440e <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    4408:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    440a:	42b4      	cmp	r4, r6
    440c:	d010      	beq.n	4430 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    440e:	f8d9 3000 	ldr.w	r3, [r9]
    4412:	4621      	mov	r1, r4
    4414:	462a      	mov	r2, r5
    4416:	4648      	mov	r0, r9
    4418:	691b      	ldr	r3, [r3, #16]
    441a:	4798      	blx	r3
    441c:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    441e:	463a      	mov	r2, r7
    4420:	4620      	mov	r0, r4
    4422:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    4424:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    4426:	2b00      	cmp	r3, #0
    4428:	d1ee      	bne.n	4408 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    442a:	4618      	mov	r0, r3
    442c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    4430:	2301      	movs	r3, #1
  }
    4432:	4618      	mov	r0, r3
    4434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004438 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    443c:	79c3      	ldrb	r3, [r0, #7]
    443e:	4604      	mov	r4, r0
    4440:	460d      	mov	r5, r1
    4442:	4617      	mov	r7, r2
  if (fatType() == 32) {
    4444:	2b20      	cmp	r3, #32
    4446:	d059      	beq.n	44fc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    4448:	2b10      	cmp	r3, #16
    444a:	d030      	beq.n	44ae <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    444c:	2b0c      	cmp	r3, #12
    444e:	d151      	bne.n	44f4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4450:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    4452:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    4456:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4458:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    445c:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4460:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    4464:	4648      	mov	r0, r9
    4466:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4468:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    446c:	f3c1 2146 	ubfx	r1, r1, #9, #7
    4470:	0952      	lsrs	r2, r2, #5
    4472:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    4476:	0052      	lsls	r2, r2, #1
    4478:	4641      	mov	r1, r8
    447a:	f002 fc47 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    447e:	2800      	cmp	r0, #0
    4480:	d038      	beq.n	44f4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    4482:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    4486:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    4488:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    448a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    448e:	d023      	beq.n	44d8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    4490:	4418      	add	r0, r3
    4492:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    4494:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    4496:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    4498:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    449c:	bf4c      	ite	mi
    449e:	091b      	lsrmi	r3, r3, #4
    44a0:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    44a4:	429a      	cmp	r2, r3
    44a6:	d240      	bcs.n	452a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    44a8:	2000      	movs	r0, #0
}
    44aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    44ae:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    44b0:	f3c1 2107 	ubfx	r1, r1, #8, #8
    44b4:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    44b6:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    44ba:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    44be:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    44c0:	fab2 f282 	clz	r2, r2
    44c4:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    44c6:	0052      	lsls	r2, r2, #1
    44c8:	f002 fc20 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    44cc:	b190      	cbz	r0, 44f4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    44ce:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    44d0:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    44d4:	5b43      	ldrh	r3, [r0, r5]
    44d6:	e025      	b.n	4524 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    44d8:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    44da:	f108 0101 	add.w	r1, r8, #1
    44de:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    44e0:	f1a2 0202 	sub.w	r2, r2, #2
    44e4:	fab2 f282 	clz	r2, r2
    44e8:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    44ea:	0052      	lsls	r2, r2, #1
    44ec:	f002 fc0e 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    44f0:	2800      	cmp	r0, #0
    44f2:	d1ce      	bne.n	4492 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    44f4:	f04f 30ff 	mov.w	r0, #4294967295
}
    44f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    44fc:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    44fe:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4500:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4504:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    4508:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    450c:	fab2 f282 	clz	r2, r2
    4510:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    4512:	0052      	lsls	r2, r2, #1
    4514:	f002 fbfa 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4518:	2800      	cmp	r0, #0
    451a:	d0eb      	beq.n	44f4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    451c:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    451e:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    4522:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    4524:	69e2      	ldr	r2, [r4, #28]
    4526:	429a      	cmp	r2, r3
    4528:	d3be      	bcc.n	44a8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    452a:	2001      	movs	r0, #1
  *value = next;
    452c:	603b      	str	r3, [r7, #0]
}
    452e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4532:	bf00      	nop

00004534 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    4538:	79c3      	ldrb	r3, [r0, #7]
    453a:	4605      	mov	r5, r0
    453c:	460c      	mov	r4, r1
    453e:	4616      	mov	r6, r2
  if (fatType() == 32) {
    4540:	2b20      	cmp	r3, #32
    4542:	d048      	beq.n	45d6 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    4544:	2b10      	cmp	r3, #16
    4546:	d02d      	beq.n	45a4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    4548:	2b0c      	cmp	r3, #12
    454a:	d141      	bne.n	45d0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    454c:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    4550:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4552:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    4556:	fa11 f184 	uxtah	r1, r1, r4
    455a:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    455e:	f3c1 2146 	ubfx	r1, r1, #9, #7
    4562:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4564:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    4566:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4568:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    456a:	4639      	mov	r1, r7
    456c:	bf14      	ite	ne
    456e:	2201      	movne	r2, #1
    4570:	2203      	moveq	r2, #3
    4572:	f002 fbcb 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4576:	b358      	cbz	r0, 45d0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    4578:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    457c:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    4580:	d03f      	beq.n	4602 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    4582:	5cc2      	ldrb	r2, [r0, r3]
    4584:	f002 020f 	and.w	r2, r2, #15
    4588:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    458c:	54c2      	strb	r2, [r0, r3]
    index++;
    458e:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    4590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4594:	d03a      	beq.n	460c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    4596:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    459a:	4403      	add	r3, r0
    return true;
    459c:	2001      	movs	r0, #1
    pc[index] = tmp;
    459e:	701a      	strb	r2, [r3, #0]
}
    45a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    45a4:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    45a6:	f3c1 2107 	ubfx	r1, r1, #8, #8
    45aa:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    45ac:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    45b0:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    45b2:	4419      	add	r1, r3
    45b4:	bf14      	ite	ne
    45b6:	2201      	movne	r2, #1
    45b8:	2203      	moveq	r2, #3
    45ba:	f002 fba7 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    45be:	4603      	mov	r3, r0
    45c0:	b130      	cbz	r0, 45d0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    45c2:	0064      	lsls	r4, r4, #1
    return true;
    45c4:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    45c6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    45ca:	531e      	strh	r6, [r3, r4]
}
    45cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    45d0:	2000      	movs	r0, #0
}
    45d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    45d6:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    45d8:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    45da:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    45de:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    45e0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    45e4:	bf14      	ite	ne
    45e6:	2201      	movne	r2, #1
    45e8:	2203      	moveq	r2, #3
    45ea:	f002 fb8f 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    45ee:	4603      	mov	r3, r0
    45f0:	2800      	cmp	r0, #0
    45f2:	d0ed      	beq.n	45d0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    45f4:	00a4      	lsls	r4, r4, #2
    return true;
    45f6:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    45f8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    45fc:	511e      	str	r6, [r3, r4]
}
    45fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    4602:	54c6      	strb	r6, [r0, r3]
    index++;
    4604:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    4606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    460a:	d115      	bne.n	4638 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    460c:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    460e:	1c79      	adds	r1, r7, #1
    4610:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4612:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    4614:	bf14      	ite	ne
    4616:	2201      	movne	r2, #1
    4618:	2203      	moveq	r2, #3
    461a:	f002 fb77 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    461e:	4603      	mov	r3, r0
    4620:	2800      	cmp	r0, #0
    4622:	d0d5      	beq.n	45d0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    4624:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    4628:	2c00      	cmp	r4, #0
    462a:	d1b7      	bne.n	459c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    462c:	7819      	ldrb	r1, [r3, #0]
    462e:	f021 010f 	bic.w	r1, r1, #15
    4632:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    4636:	e7b1      	b.n	459c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    4638:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    463c:	4403      	add	r3, r0
    463e:	e7f5      	b.n	462c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

00004640 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    4644:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4646:	b082      	sub	sp, #8
    4648:	4605      	mov	r5, r0
    464a:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    464c:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    464e:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    4650:	d340      	bcc.n	46d4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    4652:	2701      	movs	r7, #1
    find++;
    4654:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    4656:	69eb      	ldr	r3, [r5, #28]
    4658:	aa01      	add	r2, sp, #4
    465a:	4628      	mov	r0, r5
    465c:	42a3      	cmp	r3, r4
    465e:	d205      	bcs.n	466c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    4660:	bb9f      	cbnz	r7, 46ca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    4662:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    4664:	2701      	movs	r7, #1
    find++;
    4666:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    4668:	42a3      	cmp	r3, r4
    466a:	d32e      	bcc.n	46ca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    466c:	42a6      	cmp	r6, r4
    466e:	bf18      	it	ne
    4670:	2c01      	cmpne	r4, #1
    4672:	4621      	mov	r1, r4
    4674:	d929      	bls.n	46ca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    4676:	f7ff fedf 	bl	4438 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    467a:	2800      	cmp	r0, #0
    467c:	db25      	blt.n	46ca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    467e:	d0e9      	beq.n	4654 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    4680:	9b01      	ldr	r3, [sp, #4]
    4682:	2b00      	cmp	r3, #0
    4684:	d1e6      	bne.n	4654 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    4686:	b107      	cbz	r7, 468a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    4688:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    468a:	69eb      	ldr	r3, [r5, #28]
    468c:	42a3      	cmp	r3, r4
    468e:	d31c      	bcc.n	46ca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    4690:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    4694:	4621      	mov	r1, r4
    4696:	4628      	mov	r0, r5
    4698:	f7ff ff4c 	bl	4534 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    469c:	4607      	mov	r7, r0
    469e:	b1a0      	cbz	r0, 46ca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    46a0:	b93e      	cbnz	r6, 46b2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    46a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    46a4:	2b00      	cmp	r3, #0
    46a6:	db01      	blt.n	46ac <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    46a8:	3b01      	subs	r3, #1
    46aa:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    46ac:	f8c8 4000 	str.w	r4, [r8]
  return true;
    46b0:	e00c      	b.n	46cc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    46b2:	2e01      	cmp	r6, #1
    46b4:	d009      	beq.n	46ca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    46b6:	69eb      	ldr	r3, [r5, #28]
    46b8:	429e      	cmp	r6, r3
    46ba:	d806      	bhi.n	46ca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    46bc:	4631      	mov	r1, r6
    46be:	4622      	mov	r2, r4
    46c0:	4628      	mov	r0, r5
    46c2:	f7ff ff37 	bl	4534 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    46c6:	2800      	cmp	r0, #0
    46c8:	d1eb      	bne.n	46a2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    46ca:	2700      	movs	r7, #0
}
    46cc:	4638      	mov	r0, r7
    46ce:	b002      	add	sp, #8
    46d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46d4:	460c      	mov	r4, r1
    setStart = false;
    46d6:	2700      	movs	r7, #0
    46d8:	e7bc      	b.n	4654 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    46da:	bf00      	nop

000046dc <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    46dc:	2901      	cmp	r1, #1
    46de:	d90c      	bls.n	46fa <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    46e0:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    46e2:	69c4      	ldr	r4, [r0, #28]
    46e4:	428c      	cmp	r4, r1
    46e6:	d303      	bcc.n	46f0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    46e8:	f85d 4b04 	ldr.w	r4, [sp], #4
    46ec:	f7ff bea4 	b.w	4438 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    46f0:	f04f 30ff 	mov.w	r0, #4294967295
    46f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    46f8:	4770      	bx	lr
    46fa:	f04f 30ff 	mov.w	r0, #4294967295
    46fe:	4770      	bx	lr

00004700 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    4700:	b570      	push	{r4, r5, r6, lr}
    4702:	4605      	mov	r5, r0
    4704:	b082      	sub	sp, #8
    4706:	460c      	mov	r4, r1
    4708:	e01d      	b.n	4746 <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    470a:	69eb      	ldr	r3, [r5, #28]
    470c:	429c      	cmp	r4, r3
    470e:	d81f      	bhi.n	4750 <FatPartition::freeChain(unsigned long)+0x50>
    4710:	f7ff fe92 	bl	4438 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    4714:	4606      	mov	r6, r0
    if (fg < 0) {
    4716:	4621      	mov	r1, r4
    4718:	2200      	movs	r2, #0
    471a:	2e00      	cmp	r6, #0
    471c:	4628      	mov	r0, r5
    471e:	db17      	blt.n	4750 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    4720:	69eb      	ldr	r3, [r5, #28]
    4722:	429c      	cmp	r4, r3
    4724:	d814      	bhi.n	4750 <FatPartition::freeChain(unsigned long)+0x50>
    4726:	f7ff ff05 	bl	4534 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    472a:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    472c:	b180      	cbz	r0, 4750 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    472e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4730:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    4732:	f103 0301 	add.w	r3, r3, #1
    4736:	bfa8      	it	ge
    4738:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    473a:	68eb      	ldr	r3, [r5, #12]
    473c:	42a3      	cmp	r3, r4
    cluster = next;
    473e:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    4740:	bf88      	it	hi
    4742:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    4744:	b12e      	cbz	r6, 4752 <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    4746:	2c01      	cmp	r4, #1
    4748:	4621      	mov	r1, r4
    474a:	aa01      	add	r2, sp, #4
    474c:	4628      	mov	r0, r5
    474e:	d8dc      	bhi.n	470a <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    4750:	2000      	movs	r0, #0
}
    4752:	b002      	add	sp, #8
    4754:	bd70      	pop	{r4, r5, r6, pc}
    4756:	bf00      	nop

00004758 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
  return state.free_count;
}


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    4758:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    475a:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    475c:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    475e:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    4760:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    4762:	f04f 32ff 	mov.w	r2, #4294967295
  m_cache.init(dev);
    4766:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    476a:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    476c:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    476e:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    4770:	62e1      	str	r1, [r4, #44]	; 0x2c
    4772:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    4776:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    477a:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    477e:	6362      	str	r2, [r4, #52]	; 0x34
    4780:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    4784:	b1cd      	cbz	r5, 47ba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    4786:	2d04      	cmp	r5, #4
    4788:	d901      	bls.n	478e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    478a:	2000      	movs	r0, #0
}
    478c:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    478e:	461a      	mov	r2, r3
    4790:	4619      	mov	r1, r3
    4792:	4630      	mov	r0, r6
    4794:	f002 faba 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    4798:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    479c:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    47a0:	442b      	add	r3, r5
    47a2:	011d      	lsls	r5, r3, #4
    47a4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    47a8:	2800      	cmp	r0, #0
    47aa:	d0ee      	beq.n	478a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    47ac:	7919      	ldrb	r1, [r3, #4]
    47ae:	2900      	cmp	r1, #0
    47b0:	d0eb      	beq.n	478a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    47b2:	5d52      	ldrb	r2, [r2, r5]
    47b4:	0652      	lsls	r2, r2, #25
    47b6:	d1e8      	bne.n	478a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    47b8:	689d      	ldr	r5, [r3, #8]
    47ba:	2200      	movs	r2, #0
    47bc:	4629      	mov	r1, r5
    47be:	4630      	mov	r0, r6
    47c0:	f002 faa4 	bl	6d0c <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    47c4:	2800      	cmp	r0, #0
    47c6:	d0e0      	beq.n	478a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    47c8:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    47cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    47d0:	d1db      	bne.n	478a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    47d2:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    47d4:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    47d6:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    47d8:	2a01      	cmp	r2, #1
    47da:	d8d6      	bhi.n	478a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    47dc:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    47de:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    47e0:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    47e2:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    47e4:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    47e6:	f04f 0300 	mov.w	r3, #0
    47ea:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    47ec:	d044      	beq.n	4878 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    47ee:	2201      	movs	r2, #1
    47f0:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    47f2:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    47f4:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    47f6:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    47f8:	4291      	cmp	r1, r2
    47fa:	d004      	beq.n	4806 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    47fc:	2b08      	cmp	r3, #8
    47fe:	d1f7      	bne.n	47f0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    4800:	2000      	movs	r0, #0
    4802:	71a3      	strb	r3, [r4, #6]
}
    4804:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    4806:	461e      	mov	r6, r3
    4808:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    480a:	8ac1      	ldrh	r1, [r0, #22]
    480c:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    480e:	b909      	cbnz	r1, 4814 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    4810:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    4812:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    4814:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    4816:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    481a:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    481c:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    481e:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    4820:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    4822:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    4826:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    482a:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    482e:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    4832:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    4834:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    4838:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    483a:	b902      	cbnz	r2, 483e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    483c:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    483e:	1aed      	subs	r5, r5, r3
    4840:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    4842:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    4844:	1c5a      	adds	r2, r3, #1
    4846:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    4848:	f04f 32ff 	mov.w	r2, #4294967295
    484c:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    484e:	f640 72f4 	movw	r2, #4084	; 0xff4
    4852:	4293      	cmp	r3, r2
    4854:	d90c      	bls.n	4870 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    4856:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    485a:	4293      	cmp	r3, r2
    485c:	d90a      	bls.n	4874 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    485e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    4860:	2320      	movs	r3, #32
    4862:	6222      	str	r2, [r4, #32]
  return true;
    4864:	2001      	movs	r0, #1
    m_fatType = 12;
    4866:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    4868:	6321      	str	r1, [r4, #48]	; 0x30
    486a:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    486e:	bd70      	pop	{r4, r5, r6, pc}
    4870:	230c      	movs	r3, #12
    4872:	e7f7      	b.n	4864 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    4874:	2310      	movs	r3, #16
    4876:	e7f5      	b.n	4864 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4878:	461e      	mov	r6, r3
    487a:	e7c6      	b.n	480a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

0000487c <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    487c:	b530      	push	{r4, r5, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    487e:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    4882:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    4884:	2300      	movs	r3, #0
    4886:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    4888:	a801      	add	r0, sp, #4
    488a:	4621      	mov	r1, r4
    488c:	9301      	str	r3, [sp, #4]
    488e:	f7fe fe6d 	bl	356c <FatFile::open(FatFile*, char const*, int)>
    4892:	4605      	mov	r5, r0
    4894:	b198      	cbz	r0, 48be <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    4896:	f89d 3004 	ldrb.w	r3, [sp, #4]
    489a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    489e:	d011      	beq.n	48c4 <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    48a0:	f10d 0e04 	add.w	lr, sp, #4
    48a4:	46a4      	mov	ip, r4
    48a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    48aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    48ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    48b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    48b6:	f8de 3000 	ldr.w	r3, [lr]
    48ba:	f8cc 3000 	str.w	r3, [ip]
  return true;

 fail:
  return false;
}
    48be:	4628      	mov	r0, r5
    48c0:	b00b      	add	sp, #44	; 0x2c
    48c2:	bd30      	pop	{r4, r5, pc}
  return false;
    48c4:	461d      	mov	r5, r3
}
    48c6:	4628      	mov	r0, r5
    48c8:	b00b      	add	sp, #44	; 0x2c
    48ca:	bd30      	pop	{r4, r5, pc}

000048cc <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    48cc:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    48ce:	b570      	push	{r4, r5, r6, lr}
    48d0:	4604      	mov	r4, r0
  if (this == &from) return *this;
    48d2:	d021      	beq.n	4918 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
  if (m_fFile && m_fFile->close()) {
    48d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
    48d6:	460d      	mov	r5, r1
    48d8:	b118      	cbz	r0, 48e2 <FsBaseFile::operator=(FsBaseFile const&)+0x16>
    48da:	f7fe fd0b 	bl	32f4 <FatFile::close()>
    48de:	2800      	cmp	r0, #0
    48e0:	d141      	bne.n	4966 <FsBaseFile::operator=(FsBaseFile const&)+0x9a>
  if (m_xFile && m_xFile->close()) {
    48e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    48e4:	b118      	cbz	r0, 48ee <FsBaseFile::operator=(FsBaseFile const&)+0x22>
    48e6:	f7fd f99d 	bl	1c24 <ExFatFile::close()>
    48ea:	2800      	cmp	r0, #0
    48ec:	d141      	bne.n	4972 <FsBaseFile::operator=(FsBaseFile const&)+0xa6>
  if (from.m_fFile) {
    48ee:	6bae      	ldr	r6, [r5, #56]	; 0x38
    48f0:	b1a6      	cbz	r6, 491c <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    48f2:	4621      	mov	r1, r4
    48f4:	2024      	movs	r0, #36	; 0x24
    48f6:	f000 f8af 	bl	4a58 <operator new(unsigned int, unsigned long*)>
    48fa:	2300      	movs	r3, #0
    48fc:	4684      	mov	ip, r0
    48fe:	8003      	strh	r3, [r0, #0]
    4900:	7083      	strb	r3, [r0, #2]
    4902:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    4904:	6bad      	ldr	r5, [r5, #56]	; 0x38
    4906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4908:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    490c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    490e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4912:	682b      	ldr	r3, [r5, #0]
    4914:	f8cc 3000 	str.w	r3, [ip]
}
    4918:	4620      	mov	r0, r4
    491a:	bd70      	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    491c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    491e:	2b00      	cmp	r3, #0
    4920:	d0fa      	beq.n	4918 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
    m_xFile = new (m_fileMem) ExFatFile;
    4922:	4621      	mov	r1, r4
    4924:	2038      	movs	r0, #56	; 0x38
    4926:	f000 f897 	bl	4a58 <operator new(unsigned int, unsigned long*)>
    492a:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    492e:	8646      	strh	r6, [r0, #50]	; 0x32
    4930:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    4932:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    4934:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    4938:	681e      	ldr	r6, [r3, #0]
    493a:	3310      	adds	r3, #16
    493c:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    4940:	3010      	adds	r0, #16
    4942:	f853 1c08 	ldr.w	r1, [r3, #-8]
    4946:	f853 2c04 	ldr.w	r2, [r3, #-4]
    494a:	4563      	cmp	r3, ip
    494c:	f840 6c10 	str.w	r6, [r0, #-16]
    4950:	f840 5c0c 	str.w	r5, [r0, #-12]
    4954:	f840 1c08 	str.w	r1, [r0, #-8]
    4958:	f840 2c04 	str.w	r2, [r0, #-4]
    495c:	d1ec      	bne.n	4938 <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    495e:	681b      	ldr	r3, [r3, #0]
    4960:	6003      	str	r3, [r0, #0]
}
    4962:	4620      	mov	r0, r4
    4964:	bd70      	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    4966:	2300      	movs	r3, #0
    4968:	63a3      	str	r3, [r4, #56]	; 0x38
  if (from.m_fFile) {
    496a:	6bae      	ldr	r6, [r5, #56]	; 0x38
    496c:	2e00      	cmp	r6, #0
    496e:	d1c0      	bne.n	48f2 <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    4970:	e7d4      	b.n	491c <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_xFile = nullptr;
    4972:	2300      	movs	r3, #0
  if (from.m_fFile) {
    4974:	6bae      	ldr	r6, [r5, #56]	; 0x38
    m_xFile = nullptr;
    4976:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    4978:	2e00      	cmp	r6, #0
    497a:	d1ba      	bne.n	48f2 <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    497c:	e7ce      	b.n	491c <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    497e:	bf00      	nop

00004980 <FsBaseFile::close()>:
bool FsBaseFile::close() {
    4980:	b510      	push	{r4, lr}
    4982:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    4984:	6b80      	ldr	r0, [r0, #56]	; 0x38
    4986:	b110      	cbz	r0, 498e <FsBaseFile::close()+0xe>
    4988:	f7fe fcb4 	bl	32f4 <FatFile::close()>
    498c:	b930      	cbnz	r0, 499c <FsBaseFile::close()+0x1c>
  if (m_xFile && m_xFile->close()) {
    498e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4990:	b110      	cbz	r0, 4998 <FsBaseFile::close()+0x18>
    4992:	f7fd f947 	bl	1c24 <ExFatFile::close()>
    4996:	b920      	cbnz	r0, 49a2 <FsBaseFile::close()+0x22>
  return false;
    4998:	2000      	movs	r0, #0
}
    499a:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    499c:	2300      	movs	r3, #0
    499e:	63a3      	str	r3, [r4, #56]	; 0x38
}
    49a0:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    49a2:	2300      	movs	r3, #0
    49a4:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    49a6:	bd10      	pop	{r4, pc}

000049a8 <FsBaseFile::open(FsVolume*, char const*, int)>:
  if (!vol) {
    49a8:	2900      	cmp	r1, #0
    49aa:	d052      	beq.n	4a52 <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    49ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49b0:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    49b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
    49b4:	460d      	mov	r5, r1
    49b6:	4617      	mov	r7, r2
    49b8:	461e      	mov	r6, r3
    49ba:	b110      	cbz	r0, 49c2 <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    49bc:	f7fe fc9a 	bl	32f4 <FatFile::close()>
    49c0:	bba0      	cbnz	r0, 4a2c <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    49c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    49c4:	b110      	cbz	r0, 49cc <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    49c6:	f7fd f92d 	bl	1c24 <ExFatFile::close()>
    49ca:	bbb8      	cbnz	r0, 4a3c <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
  if (vol->m_fVol) {
    49cc:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    49d0:	f1b8 0f00 	cmp.w	r8, #0
    49d4:	d011      	beq.n	49fa <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    49d6:	4621      	mov	r1, r4
    49d8:	2024      	movs	r0, #36	; 0x24
    49da:	f000 f83d 	bl	4a58 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    49de:	4633      	mov	r3, r6
    49e0:	2600      	movs	r6, #0
    49e2:	463a      	mov	r2, r7
    49e4:	8006      	strh	r6, [r0, #0]
    49e6:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    49e8:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    49ea:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    49ee:	f7fe fe3f 	bl	3670 <FatFile::open(FatVolume*, char const*, int)>
    49f2:	bb58      	cbnz	r0, 4a4c <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_fFile = nullptr;
    49f4:	63a0      	str	r0, [r4, #56]	; 0x38
}
    49f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    49fa:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    49fe:	b193      	cbz	r3, 4a26 <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    4a00:	4621      	mov	r1, r4
    4a02:	2038      	movs	r0, #56	; 0x38
    4a04:	f000 f828 	bl	4a58 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4a08:	4633      	mov	r3, r6
    4a0a:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    4a0e:	463a      	mov	r2, r7
    4a10:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    4a14:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4a16:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    4a1a:	f7fd fd13 	bl	2444 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4a1e:	b9a8      	cbnz	r0, 4a4c <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    4a20:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    4a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4a26:	2000      	movs	r0, #0
}
    4a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    4a2c:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    4a2e:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    4a32:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    4a34:	f1b8 0f00 	cmp.w	r8, #0
    4a38:	d1cd      	bne.n	49d6 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    4a3a:	e7de      	b.n	49fa <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    4a3c:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    4a3e:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    4a42:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    4a44:	f1b8 0f00 	cmp.w	r8, #0
    4a48:	d1c5      	bne.n	49d6 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    4a4a:	e7d6      	b.n	49fa <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    4a4c:	2001      	movs	r0, #1
}
    4a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4a52:	2000      	movs	r0, #0
}
    4a54:	4770      	bx	lr
    4a56:	bf00      	nop

00004a58 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    4a58:	4608      	mov	r0, r1
    4a5a:	4770      	bx	lr

00004a5c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    4a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    4a60:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    4a62:	4604      	mov	r4, r0
    4a64:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    4a66:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    4a6a:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    4a6e:	4601      	mov	r1, r0
    4a70:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    4a74:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    4a76:	f7ff ffef 	bl	4a58 <operator new(unsigned int, unsigned long*)>
    if (!init(dev, part)) {
    4a7a:	4642      	mov	r2, r8
  ExFatPartition() {}
    4a7c:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    4a80:	4605      	mov	r5, r0
    4a82:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    4a86:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    4a8a:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    4a8e:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    4a92:	f7fe fad3 	bl	303c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    4a96:	bba0      	cbnz	r0, 4b02 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    4a98:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    4a9a:	4621      	mov	r1, r4
    4a9c:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    4aa0:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    4aa4:	f7ff ffd8 	bl	4a58 <operator new(unsigned int, unsigned long*)>
  FatPartition() {}
    4aa8:	2302      	movs	r3, #2
    4aaa:	71c6      	strb	r6, [r0, #7]
    if (!init(dev, part)) {
    4aac:	4642      	mov	r2, r8
    4aae:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    4ab2:	4605      	mov	r5, r0
    4ab4:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    4ab8:	7203      	strb	r3, [r0, #8]
    4aba:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    4abe:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    4ac2:	f7ff fe49 	bl	4758 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    4ac6:	b938      	cbnz	r0, 4ad8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    4ac8:	2300      	movs	r3, #0
    4aca:	4a1a      	ldr	r2, [pc, #104]	; (4b34 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    4acc:	4618      	mov	r0, r3
  m_cwv = nullptr;
    4ace:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    4ad0:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    4ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    4ad8:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    4adc:	4630      	mov	r0, r6
    4ade:	f7fe fc09 	bl	32f4 <FatFile::close()>
    return m_vwd.openRoot(this);
    4ae2:	4629      	mov	r1, r5
    4ae4:	4630      	mov	r0, r6
    4ae6:	f7fe fdcb 	bl	3680 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    4aea:	2800      	cmp	r0, #0
    4aec:	d0ec      	beq.n	4ac8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    4aee:	4b12      	ldr	r3, [pc, #72]	; (4b38 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    4af0:	681a      	ldr	r2, [r3, #0]
    4af2:	b9aa      	cbnz	r2, 4b20 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    4af4:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    4af6:	4b0f      	ldr	r3, [pc, #60]	; (4b34 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    4af8:	b1af      	cbz	r7, 4b26 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    4afa:	2001      	movs	r0, #1
    m_cwv = this;
    4afc:	601c      	str	r4, [r3, #0]
}
    4afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    4b02:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    4b06:	4630      	mov	r0, r6
    4b08:	f7fd f88c 	bl	1c24 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    4b0c:	4629      	mov	r1, r5
    4b0e:	4630      	mov	r0, r6
    4b10:	f7fd f892 	bl	1c38 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    4b14:	2800      	cmp	r0, #0
    4b16:	d0bf      	beq.n	4a98 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    4b18:	4b08      	ldr	r3, [pc, #32]	; (4b3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    4b1a:	681a      	ldr	r2, [r3, #0]
    4b1c:	2a00      	cmp	r2, #0
    4b1e:	d0e9      	beq.n	4af4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    4b20:	4b04      	ldr	r3, [pc, #16]	; (4b34 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    4b22:	2f00      	cmp	r7, #0
    4b24:	d1e9      	bne.n	4afa <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    4b26:	681a      	ldr	r2, [r3, #0]
    4b28:	2a00      	cmp	r2, #0
    4b2a:	d0e6      	beq.n	4afa <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    4b2c:	2001      	movs	r0, #1
}
    4b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b32:	bf00      	nop
    4b34:	20020178 	.word	0x20020178
    4b38:	2002017c 	.word	0x2002017c
    4b3c:	20020124 	.word	0x20020124

00004b40 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    4b40:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    4b42:	2500      	movs	r5, #0
    4b44:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    4b48:	4604      	mov	r4, r0
    4b4a:	6045      	str	r5, [r0, #4]
    4b4c:	7305      	strb	r5, [r0, #12]
    4b4e:	6086      	str	r6, [r0, #8]
    4b50:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4b54:	4d03      	ldr	r5, [pc, #12]	; (4b64 <FsVolume::open(char const*, int)+0x24>)
    4b56:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    4b5a:	f7ff ff25 	bl	49a8 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    4b5e:	4620      	mov	r0, r4
    4b60:	bd70      	pop	{r4, r5, r6, pc}
    4b62:	bf00      	nop
    4b64:	20000a70 	.word	0x20000a70

00004b68 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    4b68:	f04f 30ff 	mov.w	r0, #4294967295
    4b6c:	4770      	bx	lr
    4b6e:	bf00      	nop

00004b70 <SharedSpiCard::errorCode() const>:
  }
    4b70:	7c40      	ldrb	r0, [r0, #17]
    4b72:	4770      	bx	lr

00004b74 <SharedSpiCard::errorData() const>:
  }
    4b74:	7d00      	ldrb	r0, [r0, #20]
    4b76:	4770      	bx	lr

00004b78 <SharedSpiCard::type() const>:
  }
    4b78:	7d40      	ldrb	r0, [r0, #21]
    4b7a:	4770      	bx	lr

00004b7c <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    4b7c:	2001      	movs	r0, #1
    4b7e:	4770      	bx	lr

00004b80 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    4b80:	7f00      	ldrb	r0, [r0, #28]
    4b82:	4770      	bx	lr

00004b84 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b88:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b8a:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4b8c:	4605      	mov	r5, r0
    4b8e:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b90:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4b92:	4691      	mov	r9, r2
    4b94:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b96:	d028      	beq.n	4bea <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    4b98:	682b      	ldr	r3, [r5, #0]
    4b9a:	4621      	mov	r1, r4
    4b9c:	4628      	mov	r0, r5
    4b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4ba0:	4798      	blx	r3
    4ba2:	b198      	cbz	r0, 4bcc <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    4ba4:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    4ba6:	f1b9 0f00 	cmp.w	r9, #0
    4baa:	d012      	beq.n	4bd2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    4bac:	eb04 0809 	add.w	r8, r4, r9
    4bb0:	e001      	b.n	4bb6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    4bb2:	45a0      	cmp	r8, r4
    4bb4:	d00d      	beq.n	4bd2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    4bb6:	4639      	mov	r1, r7
    4bb8:	4620      	mov	r0, r4
    4bba:	47b0      	blx	r6
    if (!writeData(src)) {
    4bbc:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    4bbe:	4601      	mov	r1, r0
    if (!writeData(src)) {
    4bc0:	4628      	mov	r0, r5
    4bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    4bc4:	3401      	adds	r4, #1
    if (!writeData(src)) {
    4bc6:	4798      	blx	r3
    4bc8:	2800      	cmp	r0, #0
    4bca:	d1f2      	bne.n	4bb2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    4bcc:	2000      	movs	r0, #0
}
    4bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    4bd2:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4bd4:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    4bd6:	444b      	add	r3, r9
    4bd8:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4bda:	2800      	cmp	r0, #0
    4bdc:	d1f7      	bne.n	4bce <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    4bde:	682b      	ldr	r3, [r5, #0]
    4be0:	4628      	mov	r0, r5
    4be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    4be4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    4be8:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4bea:	6983      	ldr	r3, [r0, #24]
    4bec:	428b      	cmp	r3, r1
    4bee:	d1d3      	bne.n	4b98 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    4bf0:	e7d9      	b.n	4ba6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    4bf2:	bf00      	nop

00004bf4 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4bf4:	4770      	bx	lr
    4bf6:	bf00      	nop

00004bf8 <SharedSpiCard::end()>:
    m_spiDriver.end();
    4bf8:	3004      	adds	r0, #4
    4bfa:	f002 b807 	b.w	6c0c <SdSpiArduinoDriver::end()>
    4bfe:	bf00      	nop

00004c00 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4c00:	b510      	push	{r4, lr}
    4c02:	4604      	mov	r4, r0
    4c04:	2120      	movs	r1, #32
    4c06:	f003 fe01 	bl	880c <operator delete(void*, unsigned int)>
    4c0a:	4620      	mov	r0, r4
    4c0c:	bd10      	pop	{r4, pc}
    4c0e:	bf00      	nop

00004c10 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    4c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c14:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4c16:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    4c18:	4605      	mov	r5, r0
    4c1a:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4c1c:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    4c1e:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4c20:	d024      	beq.n	4c6c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    4c22:	682b      	ldr	r3, [r5, #0]
    4c24:	4631      	mov	r1, r6
    4c26:	4628      	mov	r0, r5
    4c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4c2a:	4798      	blx	r3
    4c2c:	b178      	cbz	r0, 4c4e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    4c2e:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    4c30:	b187      	cbz	r7, 4c54 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    4c32:	2600      	movs	r6, #0
    4c34:	e001      	b.n	4c3a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    4c36:	42b7      	cmp	r7, r6
    4c38:	d00c      	beq.n	4c54 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    4c3a:	682a      	ldr	r2, [r5, #0]
    4c3c:	4621      	mov	r1, r4
    4c3e:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    4c40:	3601      	adds	r6, #1
    if (!writeData(src)) {
    4c42:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    4c44:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    4c48:	4790      	blx	r2
    4c4a:	2800      	cmp	r0, #0
    4c4c:	d1f3      	bne.n	4c36 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    4c4e:	2000      	movs	r0, #0
}
    4c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    4c54:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4c56:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    4c58:	443b      	add	r3, r7
    4c5a:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4c5c:	2800      	cmp	r0, #0
    4c5e:	d1f7      	bne.n	4c50 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    4c60:	682b      	ldr	r3, [r5, #0]
    4c62:	4628      	mov	r0, r5
    4c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    4c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    4c6a:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4c6c:	6983      	ldr	r3, [r0, #24]
    4c6e:	428b      	cmp	r3, r1
    4c70:	d1d7      	bne.n	4c22 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    4c72:	e7dd      	b.n	4c30 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00004c74 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    4c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c78:	4e20      	ldr	r6, [pc, #128]	; (4cfc <SharedSpiCard::writeStop()+0x88>)
    4c7a:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    4c7c:	f100 0804 	add.w	r8, r0, #4
    4c80:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    4c82:	f505 7516 	add.w	r5, r5, #600	; 0x258
    4c86:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    4c88:	e003      	b.n	4c92 <SharedSpiCard::writeStop()+0x1e>
    4c8a:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    4c8c:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4c8e:	041b      	lsls	r3, r3, #16
    4c90:	d410      	bmi.n	4cb4 <SharedSpiCard::writeStop()+0x40>
    4c92:	4640      	mov	r0, r8
    4c94:	f001 ffbe 	bl	6c14 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4c98:	28ff      	cmp	r0, #255	; 0xff
    4c9a:	4604      	mov	r4, r0
    4c9c:	d1f5      	bne.n	4c8a <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    4c9e:	21fd      	movs	r1, #253	; 0xfd
    4ca0:	4640      	mov	r0, r8
    4ca2:	f001 ffd5 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    4ca6:	7cbb      	ldrb	r3, [r7, #18]
    4ca8:	b9cb      	cbnz	r3, 4cde <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    4caa:	2300      	movs	r3, #0
    4cac:	2001      	movs	r0, #1
    4cae:	74fb      	strb	r3, [r7, #19]
}
    4cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    4cb4:	231e      	movs	r3, #30
  if (m_spiActive) {
    4cb6:	7cb8      	ldrb	r0, [r7, #18]
    4cb8:	747b      	strb	r3, [r7, #17]
    4cba:	2800      	cmp	r0, #0
    4cbc:	d0f8      	beq.n	4cb0 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    4cbe:	7c38      	ldrb	r0, [r7, #16]
    4cc0:	2101      	movs	r1, #1
    4cc2:	f001 fee7 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4cc6:	21ff      	movs	r1, #255	; 0xff
    4cc8:	4640      	mov	r0, r8
    4cca:	f001 ffc1 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4cce:	4640      	mov	r0, r8
    4cd0:	f001 ff74 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4cd4:	2300      	movs	r3, #0
  return false;
    4cd6:	4618      	mov	r0, r3
    m_spiActive = false;
    4cd8:	74bb      	strb	r3, [r7, #18]
}
    4cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    4cde:	2101      	movs	r1, #1
    4ce0:	7c38      	ldrb	r0, [r7, #16]
    4ce2:	f001 fed7 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ce6:	4621      	mov	r1, r4
    4ce8:	4640      	mov	r0, r8
    4cea:	f001 ffb1 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4cee:	4640      	mov	r0, r8
    4cf0:	f001 ff64 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4cf4:	2300      	movs	r3, #0
    4cf6:	74bb      	strb	r3, [r7, #18]
}
    4cf8:	e7d7      	b.n	4caa <SharedSpiCard::writeStop()+0x36>
    4cfa:	bf00      	nop
    4cfc:	20022564 	.word	0x20022564

00004d00 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    4d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    4d04:	7cc3      	ldrb	r3, [r0, #19]
    4d06:	2b01      	cmp	r3, #1
    4d08:	d035      	beq.n	4d76 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    4d0a:	7c86      	ldrb	r6, [r0, #18]
    4d0c:	4604      	mov	r4, r0
    4d0e:	b14e      	cbz	r6, 4d24 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    4d10:	3004      	adds	r0, #4
    4d12:	f001 ff7f 	bl	6c14 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    4d16:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4d1a:	bf18      	it	ne
    4d1c:	2501      	movne	r5, #1
}
    4d1e:	4628      	mov	r0, r5
    4d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    4d24:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    4d26:	f04f 0801 	mov.w	r8, #1
    4d2a:	4638      	mov	r0, r7
    4d2c:	f001 ff3c 	bl	6ba8 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    4d30:	4631      	mov	r1, r6
    4d32:	7c20      	ldrb	r0, [r4, #16]
    4d34:	f001 feae 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d38:	21ff      	movs	r1, #255	; 0xff
    4d3a:	4638      	mov	r0, r7
    4d3c:	f001 ff88 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4d40:	4638      	mov	r0, r7
    4d42:	f884 8012 	strb.w	r8, [r4, #18]
    4d46:	f001 ff65 	bl	6c14 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    4d4a:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    4d4c:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4d50:	bf18      	it	ne
    4d52:	2501      	movne	r5, #1
  if (m_spiActive) {
    4d54:	2b00      	cmp	r3, #0
    4d56:	d0e2      	beq.n	4d1e <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    4d58:	4641      	mov	r1, r8
    4d5a:	7c20      	ldrb	r0, [r4, #16]
    4d5c:	f001 fe9a 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d60:	21ff      	movs	r1, #255	; 0xff
    4d62:	4638      	mov	r0, r7
    4d64:	f001 ff74 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4d68:	4638      	mov	r0, r7
    4d6a:	f001 ff27 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
}
    4d6e:	4628      	mov	r0, r5
    m_spiActive = false;
    4d70:	74a6      	strb	r6, [r4, #18]
}
    4d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4d76:	2500      	movs	r5, #0
}
    4d78:	4628      	mov	r0, r5
    4d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d7e:	bf00      	nop

00004d80 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    4d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d84:	4f20      	ldr	r7, [pc, #128]	; (4e08 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    4d86:	4604      	mov	r4, r0
    4d88:	4688      	mov	r8, r1
    4d8a:	4691      	mov	r9, r2
    4d8c:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    4d8e:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    4d90:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    4d94:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    4d96:	e003      	b.n	4da0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    4d98:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    4d9a:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4d9c:	041b      	lsls	r3, r3, #16
    4d9e:	d40d      	bmi.n	4dbc <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    4da0:	4630      	mov	r0, r6
    4da2:	f001 ff37 	bl	6c14 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    4da6:	28ff      	cmp	r0, #255	; 0xff
    4da8:	7520      	strb	r0, [r4, #20]
    4daa:	d0f5      	beq.n	4d98 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    4dac:	28fe      	cmp	r0, #254	; 0xfe
    4dae:	d01a      	beq.n	4de6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    4db0:	2318      	movs	r3, #24
  if (m_spiActive) {
    4db2:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    4db4:	7463      	strb	r3, [r4, #17]
    4db6:	b930      	cbnz	r0, 4dc6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    4db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4dbc:	231d      	movs	r3, #29
  if (m_spiActive) {
    4dbe:	7ca0      	ldrb	r0, [r4, #18]
    4dc0:	7463      	strb	r3, [r4, #17]
    4dc2:	2800      	cmp	r0, #0
    4dc4:	d0f8      	beq.n	4db8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    4dc6:	7c20      	ldrb	r0, [r4, #16]
    4dc8:	2101      	movs	r1, #1
    4dca:	f001 fe63 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4dce:	21ff      	movs	r1, #255	; 0xff
    4dd0:	4630      	mov	r0, r6
    4dd2:	f001 ff3d 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4dd6:	4630      	mov	r0, r6
    4dd8:	f001 fef0 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4ddc:	2300      	movs	r3, #0
  return false;
    4dde:	4618      	mov	r0, r3
    m_spiActive = false;
    4de0:	74a3      	strb	r3, [r4, #18]
}
    4de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    4de6:	464a      	mov	r2, r9
    4de8:	4641      	mov	r1, r8
    4dea:	4630      	mov	r0, r6
    4dec:	f001 ff1e 	bl	6c2c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    4df0:	7520      	strb	r0, [r4, #20]
    4df2:	b938      	cbnz	r0, 4e04 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    4df4:	4630      	mov	r0, r6
    4df6:	f001 ff0d 	bl	6c14 <SdSpiArduinoDriver::receive()>
    4dfa:	4630      	mov	r0, r6
    4dfc:	f001 ff0a 	bl	6c14 <SdSpiArduinoDriver::receive()>
  return true;
    4e00:	2001      	movs	r0, #1
    4e02:	e7d9      	b.n	4db8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    4e04:	2325      	movs	r3, #37	; 0x25
    4e06:	e7d4      	b.n	4db2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    4e08:	20022564 	.word	0x20022564

00004e0c <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    4e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    4e0e:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    4e10:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    4e12:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    4e14:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    4e16:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    4e18:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    4e1a:	f000 f85b 	bl	4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4e1e:	b9b0      	cbnz	r0, 4e4e <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    4e20:	7ca6      	ldrb	r6, [r4, #18]
    4e22:	b91e      	cbnz	r6, 4e2c <SharedSpiCard::readStop()+0x20>
  return true;
    4e24:	2601      	movs	r6, #1
}
    4e26:	4630      	mov	r0, r6
    4e28:	b003      	add	sp, #12
    4e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    4e2c:	4605      	mov	r5, r0
    4e2e:	2101      	movs	r1, #1
    4e30:	7c20      	ldrb	r0, [r4, #16]
    4e32:	f001 fe2f 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4e36:	1d20      	adds	r0, r4, #4
    4e38:	21ff      	movs	r1, #255	; 0xff
    4e3a:	9001      	str	r0, [sp, #4]
    4e3c:	f001 ff08 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4e40:	9801      	ldr	r0, [sp, #4]
    4e42:	f001 febb 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    4e46:	4630      	mov	r0, r6
    m_spiActive = false;
    4e48:	74a5      	strb	r5, [r4, #18]
}
    4e4a:	b003      	add	sp, #12
    4e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    4e4e:	2309      	movs	r3, #9
  if (m_spiActive) {
    4e50:	7ca6      	ldrb	r6, [r4, #18]
    4e52:	7463      	strb	r3, [r4, #17]
    4e54:	2e00      	cmp	r6, #0
    4e56:	d0e6      	beq.n	4e26 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    4e58:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    4e5a:	7c20      	ldrb	r0, [r4, #16]
    4e5c:	2101      	movs	r1, #1
}
    4e5e:	463e      	mov	r6, r7
    4e60:	f001 fe18 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4e64:	21ff      	movs	r1, #255	; 0xff
    4e66:	4628      	mov	r0, r5
    4e68:	f001 fef2 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4e6c:	4628      	mov	r0, r5
    4e6e:	f001 fea5 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
}
    4e72:	4630      	mov	r0, r6
    m_spiActive = false;
    4e74:	74a7      	strb	r7, [r4, #18]
}
    4e76:	b003      	add	sp, #12
    4e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e7a:	bf00      	nop

00004e7c <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    4e7c:	7cc2      	ldrb	r2, [r0, #19]
    4e7e:	2a02      	cmp	r2, #2
    4e80:	d003      	beq.n	4e8a <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    4e82:	2a01      	cmp	r2, #1
    4e84:	d004      	beq.n	4e90 <SharedSpiCard::syncDevice()+0x14>
}
    4e86:	2001      	movs	r0, #1
    4e88:	4770      	bx	lr
    return writeStop();
    4e8a:	6803      	ldr	r3, [r0, #0]
    4e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4e8e:	4718      	bx	r3
    return readStop();
    4e90:	f7ff bfbc 	b.w	4e0c <SharedSpiCard::readStop()>

00004e94 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    4e94:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    4e96:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    4e98:	460d      	mov	r5, r1
    4e9a:	490d      	ldr	r1, [pc, #52]	; (4ed0 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    4e9c:	4604      	mov	r4, r0
  if (!syncDevice()) {
    4e9e:	6a1a      	ldr	r2, [r3, #32]
    4ea0:	428a      	cmp	r2, r1
    4ea2:	d10c      	bne.n	4ebe <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    4ea4:	7cc2      	ldrb	r2, [r0, #19]
    4ea6:	2a02      	cmp	r2, #2
    4ea8:	d004      	beq.n	4eb4 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    4eaa:	2a01      	cmp	r2, #1
    4eac:	d00b      	beq.n	4ec6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    4eae:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    4eb0:	7725      	strb	r5, [r4, #28]
}
    4eb2:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    4eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4eb6:	4798      	blx	r3
  if (!syncDevice()) {
    4eb8:	2800      	cmp	r0, #0
    4eba:	d1f8      	bne.n	4eae <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    4ebc:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    4ebe:	4790      	blx	r2
    4ec0:	2800      	cmp	r0, #0
    4ec2:	d0fb      	beq.n	4ebc <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    4ec4:	e7f3      	b.n	4eae <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    4ec6:	f7ff ffa1 	bl	4e0c <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    4eca:	2800      	cmp	r0, #0
    4ecc:	d0f6      	beq.n	4ebc <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    4ece:	e7ee      	b.n	4eae <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    4ed0:	00004e7d 	.word	0x00004e7d

00004ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    4ed8:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4eda:	b082      	sub	sp, #8
    4edc:	460f      	mov	r7, r1
    4ede:	4935      	ldr	r1, [pc, #212]	; (4fb4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    4ee0:	9201      	str	r2, [sp, #4]
    4ee2:	4606      	mov	r6, r0
  if (!syncDevice()) {
    4ee4:	6a1a      	ldr	r2, [r3, #32]
    4ee6:	428a      	cmp	r2, r1
    4ee8:	d15e      	bne.n	4fa8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    4eea:	7cc2      	ldrb	r2, [r0, #19]
    4eec:	2a02      	cmp	r2, #2
    4eee:	d041      	beq.n	4f74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    4ef0:	2a01      	cmp	r2, #1
    4ef2:	d05b      	beq.n	4fac <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    4ef4:	7cb4      	ldrb	r4, [r6, #18]
    4ef6:	2c00      	cmp	r4, #0
    4ef8:	d047      	beq.n	4f8a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    4efa:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    4efc:	2f0c      	cmp	r7, #12
    4efe:	d011      	beq.n	4f24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    4f00:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4fb8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    4f04:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    4f08:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    4f0c:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    4f0e:	e004      	b.n	4f1a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    4f10:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    4f14:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    4f16:	041a      	lsls	r2, r3, #16
    4f18:	d434      	bmi.n	4f84 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    4f1a:	4628      	mov	r0, r5
    4f1c:	f001 fe7a 	bl	6c14 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4f20:	28ff      	cmp	r0, #255	; 0xff
    4f22:	d1f5      	bne.n	4f10 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    4f24:	f10d 0804 	add.w	r8, sp, #4
    4f28:	ac02      	add	r4, sp, #8
    4f2a:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    4f2e:	4628      	mov	r0, r5
    4f30:	f001 fe8e 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    4f34:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    4f38:	4628      	mov	r0, r5
    4f3a:	f001 fe89 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    4f3e:	45a0      	cmp	r8, r4
    4f40:	d1f8      	bne.n	4f34 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    4f42:	2f00      	cmp	r7, #0
    4f44:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    4f46:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    4f4a:	bf0c      	ite	eq
    4f4c:	2195      	moveq	r1, #149	; 0x95
    4f4e:	2187      	movne	r1, #135	; 0x87
    4f50:	f001 fe7e 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4f54:	4628      	mov	r0, r5
    4f56:	f001 fe5d 	bl	6c14 <SdSpiArduinoDriver::receive()>
    4f5a:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    4f5c:	3c01      	subs	r4, #1
    4f5e:	f001 fe59 	bl	6c14 <SdSpiArduinoDriver::receive()>
    4f62:	0603      	lsls	r3, r0, #24
    4f64:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    4f66:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    4f68:	d501      	bpl.n	4f6e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    4f6a:	2c00      	cmp	r4, #0
    4f6c:	d1f5      	bne.n	4f5a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    4f6e:	b002      	add	sp, #8
    4f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    4f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4f76:	4798      	blx	r3
  if (!syncDevice()) {
    4f78:	2800      	cmp	r0, #0
    4f7a:	d1bb      	bne.n	4ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    4f7c:	20ff      	movs	r0, #255	; 0xff
}
    4f7e:	b002      	add	sp, #8
    4f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    4f84:	2f00      	cmp	r7, #0
    4f86:	d0cd      	beq.n	4f24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    4f88:	e7f8      	b.n	4f7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    4f8a:	1d35      	adds	r5, r6, #4
    4f8c:	4628      	mov	r0, r5
    4f8e:	f001 fe0b 	bl	6ba8 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    4f92:	4621      	mov	r1, r4
    4f94:	7c30      	ldrb	r0, [r6, #16]
    4f96:	f001 fd7d 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f9a:	21ff      	movs	r1, #255	; 0xff
    4f9c:	4628      	mov	r0, r5
    4f9e:	f001 fe57 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    4fa2:	2301      	movs	r3, #1
    4fa4:	74b3      	strb	r3, [r6, #18]
}
    4fa6:	e7a9      	b.n	4efc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    4fa8:	4790      	blx	r2
    4faa:	e7e5      	b.n	4f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    4fac:	f7ff ff2e 	bl	4e0c <SharedSpiCard::readStop()>
    4fb0:	e7e2      	b.n	4f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    4fb2:	bf00      	nop
    4fb4:	00004e7d 	.word	0x00004e7d
    4fb8:	20022564 	.word	0x20022564

00004fbc <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    4fbe:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4fc0:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    4fc2:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4fc4:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    4fc6:	f7ff ff85 	bl	4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4fca:	b9e0      	cbnz	r0, 5006 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    4fcc:	1d37      	adds	r7, r6, #4
    4fce:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    4fd0:	4638      	mov	r0, r7
    4fd2:	f001 fe1f 	bl	6c14 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    4fd6:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    4fda:	42a5      	cmp	r5, r4
    4fdc:	d1f8      	bne.n	4fd0 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    4fde:	7cb4      	ldrb	r4, [r6, #18]
    4fe0:	b914      	cbnz	r4, 4fe8 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    4fe2:	2401      	movs	r4, #1
}
    4fe4:	4620      	mov	r0, r4
    4fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    4fe8:	7c30      	ldrb	r0, [r6, #16]
    4fea:	2101      	movs	r1, #1
    4fec:	f001 fd52 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ff0:	21ff      	movs	r1, #255	; 0xff
    4ff2:	4638      	mov	r0, r7
    4ff4:	f001 fe2c 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4ff8:	4638      	mov	r0, r7
    4ffa:	f001 fddf 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4ffe:	2300      	movs	r3, #0
}
    5000:	4620      	mov	r0, r4
    m_spiActive = false;
    5002:	74b3      	strb	r3, [r6, #18]
}
    5004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    5006:	2312      	movs	r3, #18
  if (m_spiActive) {
    5008:	7cb4      	ldrb	r4, [r6, #18]
    500a:	7473      	strb	r3, [r6, #17]
    500c:	2c00      	cmp	r4, #0
    500e:	d0e9      	beq.n	4fe4 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    5010:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    5012:	7c30      	ldrb	r0, [r6, #16]
    5014:	2101      	movs	r1, #1
    5016:	f001 fd3d 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    501a:	21ff      	movs	r1, #255	; 0xff
    501c:	4620      	mov	r0, r4
    501e:	f001 fe17 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5022:	4620      	mov	r0, r4
    5024:	f001 fdca 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5028:	2300      	movs	r3, #0
  return false;
    502a:	461c      	mov	r4, r3
    m_spiActive = false;
    502c:	74b3      	strb	r3, [r6, #18]
}
    502e:	4620      	mov	r0, r4
    5030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5032:	bf00      	nop

00005034 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    5034:	b570      	push	{r4, r5, r6, lr}
    5036:	4616      	mov	r6, r2
    5038:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    503a:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    503c:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    503e:	f7ff ff49 	bl	4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5042:	b1b0      	cbz	r0, 5072 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    5044:	231b      	movs	r3, #27
    5046:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    5048:	7ca0      	ldrb	r0, [r4, #18]
    504a:	b908      	cbnz	r0, 5050 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    504c:	b002      	add	sp, #8
    504e:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5050:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5052:	7c20      	ldrb	r0, [r4, #16]
    5054:	2101      	movs	r1, #1
    5056:	f001 fd1d 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    505a:	21ff      	movs	r1, #255	; 0xff
    505c:	4628      	mov	r0, r5
    505e:	f001 fdf7 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5062:	4628      	mov	r0, r5
    5064:	f001 fdaa 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5068:	2300      	movs	r3, #0
  return false;
    506a:	4618      	mov	r0, r3
    m_spiActive = false;
    506c:	74a3      	strb	r3, [r4, #18]
}
    506e:	b002      	add	sp, #8
    5070:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    5072:	4605      	mov	r5, r0
    5074:	2210      	movs	r2, #16
    5076:	4631      	mov	r1, r6
    5078:	4620      	mov	r0, r4
    507a:	f7ff fe81 	bl	4d80 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    507e:	2800      	cmp	r0, #0
    5080:	d0e2      	beq.n	5048 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    5082:	7ca6      	ldrb	r6, [r4, #18]
    5084:	2e00      	cmp	r6, #0
    5086:	d0e1      	beq.n	504c <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    5088:	7c20      	ldrb	r0, [r4, #16]
    508a:	2101      	movs	r1, #1
    508c:	f001 fd02 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5090:	1d20      	adds	r0, r4, #4
    5092:	21ff      	movs	r1, #255	; 0xff
    5094:	9001      	str	r0, [sp, #4]
    5096:	f001 fddb 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    509a:	9801      	ldr	r0, [sp, #4]
    509c:	f001 fd8e 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
}
    50a0:	4630      	mov	r0, r6
    m_spiActive = false;
    50a2:	74a5      	strb	r5, [r4, #18]
}
    50a4:	b002      	add	sp, #8
    50a6:	bd70      	pop	{r4, r5, r6, pc}

000050a8 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    50a8:	6803      	ldr	r3, [r0, #0]
    50aa:	4a25      	ldr	r2, [pc, #148]	; (5140 <SharedSpiCard::sectorCount()+0x98>)
    50ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    50ae:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    50b0:	b500      	push	{lr}
    50b2:	b085      	sub	sp, #20
    50b4:	d10f      	bne.n	50d6 <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    50b6:	466a      	mov	r2, sp
    50b8:	2109      	movs	r1, #9
    50ba:	f7ff ffbb 	bl	5034 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    50be:	b138      	cbz	r0, 50d0 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    50c0:	f89d 3000 	ldrb.w	r3, [sp]
    50c4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    50c8:	d008      	beq.n	50dc <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    50ca:	2b40      	cmp	r3, #64	; 0x40
    50cc:	d027      	beq.n	511e <SharedSpiCard::sectorCount()+0x76>
    50ce:	2000      	movs	r0, #0
}
    50d0:	b005      	add	sp, #20
    50d2:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    50d6:	4669      	mov	r1, sp
    50d8:	4798      	blx	r3
    50da:	e7f0      	b.n	50be <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    50dc:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    50e0:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    50e4:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    50e8:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    50ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    50f0:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    50f2:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    50f6:	0080      	lsls	r0, r0, #2
    50f8:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    50fc:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    5100:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5104:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    5108:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    510c:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    5110:	4413      	add	r3, r2
    5112:	3001      	adds	r0, #1
    5114:	3b07      	subs	r3, #7
    5116:	4098      	lsls	r0, r3
}
    5118:	b005      	add	sp, #20
    511a:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    511e:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    5122:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    5126:	3001      	adds	r0, #1
    5128:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    512c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    5130:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    5134:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    5138:	0280      	lsls	r0, r0, #10
    513a:	b005      	add	sp, #20
    513c:	f85d fb04 	ldr.w	pc, [sp], #4
    5140:	00005465 	.word	0x00005465

00005144 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    5144:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    5146:	460a      	mov	r2, r1
    5148:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    514c:	b083      	sub	sp, #12
    514e:	4d16      	ldr	r5, [pc, #88]	; (51a8 <SharedSpiCard::readStart(unsigned long)+0x64>)
    5150:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    5152:	42ab      	cmp	r3, r5
    5154:	d124      	bne.n	51a0 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    5156:	7d40      	ldrb	r0, [r0, #21]
    5158:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    515a:	f04f 0112 	mov.w	r1, #18
    515e:	4620      	mov	r0, r4
    sector <<= 9;
    5160:	bf18      	it	ne
    5162:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    5164:	f7ff feb6 	bl	4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5168:	b920      	cbnz	r0, 5174 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    516a:	2301      	movs	r3, #1
  return true;
    516c:	4618      	mov	r0, r3
  m_state = READ_STATE;
    516e:	74e3      	strb	r3, [r4, #19]
}
    5170:	b003      	add	sp, #12
    5172:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    5174:	230c      	movs	r3, #12
  if (m_spiActive) {
    5176:	7ca0      	ldrb	r0, [r4, #18]
    5178:	7463      	strb	r3, [r4, #17]
    517a:	2800      	cmp	r0, #0
    517c:	d0f8      	beq.n	5170 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    517e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5180:	7c20      	ldrb	r0, [r4, #16]
    5182:	2101      	movs	r1, #1
    5184:	f001 fc86 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5188:	21ff      	movs	r1, #255	; 0xff
    518a:	4628      	mov	r0, r5
    518c:	f001 fd60 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5190:	4628      	mov	r0, r5
    5192:	f001 fd13 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5196:	2300      	movs	r3, #0
}
    5198:	4618      	mov	r0, r3
    m_spiActive = false;
    519a:	74a3      	strb	r3, [r4, #18]
}
    519c:	b003      	add	sp, #12
    519e:	bd30      	pop	{r4, r5, pc}
    51a0:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    51a2:	4798      	blx	r3
    51a4:	9a01      	ldr	r2, [sp, #4]
    51a6:	e7d7      	b.n	5158 <SharedSpiCard::readStart(unsigned long)+0x14>
    51a8:	00004b79 	.word	0x00004b79

000051ac <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    51ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51ae:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    51b0:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    51b2:	4606      	mov	r6, r0
    51b4:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    51b6:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    51b8:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    51ba:	d102      	bne.n	51c2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    51bc:	6983      	ldr	r3, [r0, #24]
    51be:	428b      	cmp	r3, r1
    51c0:	d005      	beq.n	51ce <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    51c2:	4629      	mov	r1, r5
    51c4:	4630      	mov	r0, r6
    51c6:	f7ff ffbd 	bl	5144 <SharedSpiCard::readStart(unsigned long)>
    51ca:	b180      	cbz	r0, 51ee <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    51cc:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    51ce:	b187      	cbz	r7, 51f2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    51d0:	2500      	movs	r5, #0
    51d2:	e001      	b.n	51d8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    51d4:	42af      	cmp	r7, r5
    51d6:	d00c      	beq.n	51f2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    51d8:	4621      	mov	r1, r4
    51da:	f44f 7200 	mov.w	r2, #512	; 0x200
    51de:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    51e0:	3501      	adds	r5, #1
    51e2:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    51e6:	f7ff fdcb 	bl	4d80 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    51ea:	2800      	cmp	r0, #0
    51ec:	d1f2      	bne.n	51d4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    51ee:	2000      	movs	r0, #0
}
    51f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    51f2:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    51f4:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    51f6:	443b      	add	r3, r7
    51f8:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    51fa:	2800      	cmp	r0, #0
    51fc:	d1f8      	bne.n	51f0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    51fe:	4630      	mov	r0, r6
}
    5200:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    5204:	f7ff be02 	b.w	4e0c <SharedSpiCard::readStop()>

00005208 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    5208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    520c:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    520e:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    5210:	4606      	mov	r6, r0
    5212:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    5214:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    5216:	4615      	mov	r5, r2
    5218:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    521c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    5220:	d102      	bne.n	5228 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    5222:	6983      	ldr	r3, [r0, #24]
    5224:	428b      	cmp	r3, r1
    5226:	d005      	beq.n	5234 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    5228:	4621      	mov	r1, r4
    522a:	4630      	mov	r0, r6
    522c:	f7ff ff8a 	bl	5144 <SharedSpiCard::readStart(unsigned long)>
    5230:	b1b0      	cbz	r0, 5260 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    5232:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    5234:	f1bb 0f00 	cmp.w	fp, #0
    5238:	d015      	beq.n	5266 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    523a:	eb04 0a0b 	add.w	sl, r4, fp
    523e:	e002      	b.n	5246 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    5240:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    5242:	45a2      	cmp	sl, r4
    5244:	d00f      	beq.n	5266 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    5246:	f44f 7200 	mov.w	r2, #512	; 0x200
    524a:	4629      	mov	r1, r5
    524c:	4630      	mov	r0, r6
    524e:	f7ff fd97 	bl	4d80 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5252:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    5254:	4642      	mov	r2, r8
    5256:	4620      	mov	r0, r4
    5258:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    525a:	3401      	adds	r4, #1
    if (readData(dst)) {
    525c:	2f00      	cmp	r7, #0
    525e:	d1ef      	bne.n	5240 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    5260:	2000      	movs	r0, #0
}
    5262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    5266:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    5268:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    526a:	445b      	add	r3, fp
    526c:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    526e:	2800      	cmp	r0, #0
    5270:	d1f7      	bne.n	5262 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    5272:	4630      	mov	r0, r6
}
    5274:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    5278:	f7ff bdc8 	b.w	4e0c <SharedSpiCard::readStop()>

0000527c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    527c:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    527e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    5282:	695f      	ldr	r7, [r3, #20]
    5284:	4b16      	ldr	r3, [pc, #88]	; (52e0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    5286:	429f      	cmp	r7, r3
    5288:	d11f      	bne.n	52ca <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    528a:	7cc3      	ldrb	r3, [r0, #19]
    528c:	4604      	mov	r4, r0
    528e:	460d      	mov	r5, r1
    5290:	4616      	mov	r6, r2
    5292:	2b01      	cmp	r3, #1
    5294:	d102      	bne.n	529c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    5296:	6983      	ldr	r3, [r0, #24]
    5298:	4299      	cmp	r1, r3
    529a:	d005      	beq.n	52a8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    529c:	4629      	mov	r1, r5
    529e:	4620      	mov	r0, r4
    52a0:	f7ff ff50 	bl	5144 <SharedSpiCard::readStart(unsigned long)>
    52a4:	b170      	cbz	r0, 52c4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    52a6:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    52a8:	f44f 7200 	mov.w	r2, #512	; 0x200
    52ac:	4631      	mov	r1, r6
    52ae:	4620      	mov	r0, r4
    52b0:	f7ff fd66 	bl	4d80 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    52b4:	b130      	cbz	r0, 52c4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    52b6:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    52b8:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    52ba:	3301      	adds	r3, #1
    52bc:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    52be:	b148      	cbz	r0, 52d4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    52c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    52c4:	2000      	movs	r0, #0
}
    52c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    52ca:	46bc      	mov	ip, r7
    52cc:	2301      	movs	r3, #1
}
    52ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    52d2:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    52d4:	4620      	mov	r0, r4
}
    52d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    52da:	f7ff bd97 	b.w	4e0c <SharedSpiCard::readStop()>
    52de:	bf00      	nop
    52e0:	000051ad 	.word	0x000051ad

000052e4 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    52e4:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    52e6:	460a      	mov	r2, r1
    52e8:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    52ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    52ec:	b083      	sub	sp, #12
    52ee:	4d16      	ldr	r5, [pc, #88]	; (5348 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    52f0:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    52f2:	42ab      	cmp	r3, r5
    52f4:	d124      	bne.n	5340 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    52f6:	7d40      	ldrb	r0, [r0, #21]
    52f8:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    52fa:	f04f 0119 	mov.w	r1, #25
    52fe:	4620      	mov	r0, r4
    sector <<= 9;
    5300:	bf18      	it	ne
    5302:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    5304:	f7ff fde6 	bl	4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5308:	b920      	cbnz	r0, 5314 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    530a:	2302      	movs	r3, #2
  return true;
    530c:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    530e:	74e3      	strb	r3, [r4, #19]
}
    5310:	b003      	add	sp, #12
    5312:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    5314:	230e      	movs	r3, #14
  if (m_spiActive) {
    5316:	7ca0      	ldrb	r0, [r4, #18]
    5318:	7463      	strb	r3, [r4, #17]
    531a:	2800      	cmp	r0, #0
    531c:	d0f8      	beq.n	5310 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    531e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5320:	7c20      	ldrb	r0, [r4, #16]
    5322:	2101      	movs	r1, #1
    5324:	f001 fbb6 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5328:	21ff      	movs	r1, #255	; 0xff
    532a:	4628      	mov	r0, r5
    532c:	f001 fc90 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5330:	4628      	mov	r0, r5
    5332:	f001 fc43 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5336:	2300      	movs	r3, #0
}
    5338:	4618      	mov	r0, r3
    m_spiActive = false;
    533a:	74a3      	strb	r3, [r4, #18]
}
    533c:	b003      	add	sp, #12
    533e:	bd30      	pop	{r4, r5, pc}
    5340:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    5342:	4798      	blx	r3
    5344:	9a01      	ldr	r2, [sp, #4]
    5346:	e7d7      	b.n	52f8 <SharedSpiCard::writeStart(unsigned long)+0x14>
    5348:	00004b79 	.word	0x00004b79

0000534c <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    534c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    534e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    5352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5354:	4617      	mov	r7, r2
    5356:	4a41      	ldr	r2, [pc, #260]	; (545c <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    5358:	b085      	sub	sp, #20
    535a:	4604      	mov	r4, r0
    535c:	460e      	mov	r6, r1
    535e:	4293      	cmp	r3, r2
    5360:	d145      	bne.n	53ee <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    5362:	466a      	mov	r2, sp
    5364:	2109      	movs	r1, #9
    5366:	f7ff fe65 	bl	5034 <SharedSpiCard::readRegister(unsigned char, void*)>
    536a:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    536c:	b1b5      	cbz	r5, 539c <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    536e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    5372:	065a      	lsls	r2, r3, #25
    5374:	d518      	bpl.n	53a8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    5376:	7d63      	ldrb	r3, [r4, #21]
    5378:	2b03      	cmp	r3, #3
    537a:	d001      	beq.n	5380 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    537c:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    537e:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    5380:	4632      	mov	r2, r6
    5382:	2120      	movs	r1, #32
    5384:	4620      	mov	r0, r4
    5386:	f7ff fda5 	bl	4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    538a:	b928      	cbnz	r0, 5398 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    538c:	463a      	mov	r2, r7
    538e:	2121      	movs	r1, #33	; 0x21
    5390:	4620      	mov	r0, r4
    5392:	f7ff fd9f 	bl	4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5396:	b370      	cbz	r0, 53f6 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    5398:	2326      	movs	r3, #38	; 0x26
    539a:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    539c:	7ca5      	ldrb	r5, [r4, #18]
    539e:	b99d      	cbnz	r5, 53c8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    53a0:	4628      	mov	r0, r5
    53a2:	b005      	add	sp, #20
    53a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    53a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53ac:	f89d 200b 	ldrb.w	r2, [sp, #11]
    53b0:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    53b2:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    53b6:	1c7a      	adds	r2, r7, #1
    53b8:	4332      	orrs	r2, r6
    53ba:	4213      	tst	r3, r2
    53bc:	d0db      	beq.n	5376 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    53be:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    53c0:	7ca5      	ldrb	r5, [r4, #18]
    53c2:	7463      	strb	r3, [r4, #17]
    53c4:	2d00      	cmp	r5, #0
    53c6:	d0eb      	beq.n	53a0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    53c8:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    53ca:	7c20      	ldrb	r0, [r4, #16]
    53cc:	2101      	movs	r1, #1
    53ce:	f001 fb61 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    53d2:	21ff      	movs	r1, #255	; 0xff
    53d4:	4628      	mov	r0, r5
    53d6:	f001 fc3b 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    53da:	4628      	mov	r0, r5
    53dc:	f001 fbee 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    53e0:	2300      	movs	r3, #0
  return false;
    53e2:	461d      	mov	r5, r3
    m_spiActive = false;
    53e4:	74a3      	strb	r3, [r4, #18]
}
    53e6:	4628      	mov	r0, r5
    53e8:	b005      	add	sp, #20
    53ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    53ee:	4669      	mov	r1, sp
    53f0:	4798      	blx	r3
    53f2:	4605      	mov	r5, r0
    53f4:	e7ba      	b.n	536c <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    53f6:	4602      	mov	r2, r0
    53f8:	2126      	movs	r1, #38	; 0x26
    53fa:	4620      	mov	r0, r4
    53fc:	f7ff fd6a 	bl	4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5400:	2800      	cmp	r0, #0
    5402:	d1c9      	bne.n	5398 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    5404:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5460 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    5408:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    540c:	f104 0904 	add.w	r9, r4, #4
    5410:	f8d8 3000 	ldr.w	r3, [r8]
    5414:	441f      	add	r7, r3
    5416:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    5418:	e004      	b.n	5424 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    541a:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    541e:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    5420:	041b      	lsls	r3, r3, #16
    5422:	d417      	bmi.n	5454 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    5424:	4648      	mov	r0, r9
    5426:	f001 fbf5 	bl	6c14 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    542a:	28ff      	cmp	r0, #255	; 0xff
    542c:	4606      	mov	r6, r0
    542e:	d1f4      	bne.n	541a <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    5430:	7ca3      	ldrb	r3, [r4, #18]
    5432:	2b00      	cmp	r3, #0
    5434:	d0b4      	beq.n	53a0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    5436:	2101      	movs	r1, #1
    5438:	7c20      	ldrb	r0, [r4, #16]
  return true;
    543a:	461d      	mov	r5, r3
    543c:	f001 fb2a 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5440:	4631      	mov	r1, r6
    5442:	4648      	mov	r0, r9
    5444:	f001 fc04 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5448:	4648      	mov	r0, r9
    544a:	f001 fbb7 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    544e:	2300      	movs	r3, #0
    5450:	74a3      	strb	r3, [r4, #18]
}
    5452:	e7a5      	b.n	53a0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    5454:	2328      	movs	r3, #40	; 0x28
    5456:	7463      	strb	r3, [r4, #17]
    goto fail;
    5458:	e7a0      	b.n	539c <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    545a:	bf00      	nop
    545c:	00005465 	.word	0x00005465
    5460:	20022564 	.word	0x20022564

00005464 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    5464:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    5466:	2200      	movs	r2, #0
    5468:	b082      	sub	sp, #8
    546a:	460e      	mov	r6, r1
    546c:	2109      	movs	r1, #9
    546e:	4604      	mov	r4, r0
    5470:	f7ff fd30 	bl	4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5474:	b1b0      	cbz	r0, 54a4 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    5476:	231b      	movs	r3, #27
    5478:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    547a:	7ca0      	ldrb	r0, [r4, #18]
    547c:	b908      	cbnz	r0, 5482 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    547e:	b002      	add	sp, #8
    5480:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5482:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5484:	7c20      	ldrb	r0, [r4, #16]
    5486:	2101      	movs	r1, #1
    5488:	f001 fb04 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    548c:	21ff      	movs	r1, #255	; 0xff
    548e:	4628      	mov	r0, r5
    5490:	f001 fbde 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5494:	4628      	mov	r0, r5
    5496:	f001 fb91 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    549a:	2300      	movs	r3, #0
  return false;
    549c:	4618      	mov	r0, r3
    m_spiActive = false;
    549e:	74a3      	strb	r3, [r4, #18]
  }
    54a0:	b002      	add	sp, #8
    54a2:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    54a4:	4605      	mov	r5, r0
    54a6:	2210      	movs	r2, #16
    54a8:	4631      	mov	r1, r6
    54aa:	4620      	mov	r0, r4
    54ac:	f7ff fc68 	bl	4d80 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    54b0:	2800      	cmp	r0, #0
    54b2:	d0e2      	beq.n	547a <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    54b4:	7ca6      	ldrb	r6, [r4, #18]
    54b6:	2e00      	cmp	r6, #0
    54b8:	d0e1      	beq.n	547e <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    54ba:	7c20      	ldrb	r0, [r4, #16]
    54bc:	2101      	movs	r1, #1
    54be:	f001 fae9 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    54c2:	1d20      	adds	r0, r4, #4
    54c4:	21ff      	movs	r1, #255	; 0xff
    54c6:	9001      	str	r0, [sp, #4]
    54c8:	f001 fbc2 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    54cc:	9801      	ldr	r0, [sp, #4]
    54ce:	f001 fb75 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
}
    54d2:	4630      	mov	r0, r6
    m_spiActive = false;
    54d4:	74a5      	strb	r5, [r4, #18]
  }
    54d6:	b002      	add	sp, #8
    54d8:	bd70      	pop	{r4, r5, r6, pc}
    54da:	bf00      	nop

000054dc <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    54dc:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    54de:	2200      	movs	r2, #0
    54e0:	b082      	sub	sp, #8
    54e2:	460e      	mov	r6, r1
    54e4:	210a      	movs	r1, #10
    54e6:	4604      	mov	r4, r0
    54e8:	f7ff fcf4 	bl	4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    54ec:	b1b0      	cbz	r0, 551c <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    54ee:	231b      	movs	r3, #27
    54f0:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    54f2:	7ca0      	ldrb	r0, [r4, #18]
    54f4:	b908      	cbnz	r0, 54fa <SharedSpiCard::readCID(CID*)+0x1e>
  }
    54f6:	b002      	add	sp, #8
    54f8:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    54fa:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    54fc:	7c20      	ldrb	r0, [r4, #16]
    54fe:	2101      	movs	r1, #1
    5500:	f001 fac8 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5504:	21ff      	movs	r1, #255	; 0xff
    5506:	4628      	mov	r0, r5
    5508:	f001 fba2 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    550c:	4628      	mov	r0, r5
    550e:	f001 fb55 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5512:	2300      	movs	r3, #0
  return false;
    5514:	4618      	mov	r0, r3
    m_spiActive = false;
    5516:	74a3      	strb	r3, [r4, #18]
  }
    5518:	b002      	add	sp, #8
    551a:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    551c:	4605      	mov	r5, r0
    551e:	2210      	movs	r2, #16
    5520:	4631      	mov	r1, r6
    5522:	4620      	mov	r0, r4
    5524:	f7ff fc2c 	bl	4d80 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5528:	2800      	cmp	r0, #0
    552a:	d0e2      	beq.n	54f2 <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    552c:	7ca6      	ldrb	r6, [r4, #18]
    552e:	2e00      	cmp	r6, #0
    5530:	d0e1      	beq.n	54f6 <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    5532:	7c20      	ldrb	r0, [r4, #16]
    5534:	2101      	movs	r1, #1
    5536:	f001 faad 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    553a:	1d20      	adds	r0, r4, #4
    553c:	21ff      	movs	r1, #255	; 0xff
    553e:	9001      	str	r0, [sp, #4]
    5540:	f001 fb86 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5544:	9801      	ldr	r0, [sp, #4]
    5546:	f001 fb39 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
}
    554a:	4630      	mov	r0, r6
    m_spiActive = false;
    554c:	74a5      	strb	r5, [r4, #18]
  }
    554e:	b002      	add	sp, #8
    5550:	bd70      	pop	{r4, r5, r6, pc}
    5552:	bf00      	nop

00005554 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    5554:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    5556:	1d05      	adds	r5, r0, #4
    5558:	4616      	mov	r6, r2
    555a:	4604      	mov	r4, r0
    555c:	4628      	mov	r0, r5
    555e:	f001 fb77 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    5562:	f44f 7200 	mov.w	r2, #512	; 0x200
    5566:	4631      	mov	r1, r6
    5568:	4628      	mov	r0, r5
    556a:	f001 fb7b 	bl	6c64 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    556e:	21ff      	movs	r1, #255	; 0xff
    5570:	4628      	mov	r0, r5
    5572:	f001 fb6d 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    5576:	21ff      	movs	r1, #255	; 0xff
    5578:	4628      	mov	r0, r5
    557a:	f001 fb69 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    557e:	4628      	mov	r0, r5
    5580:	f001 fb48 	bl	6c14 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5584:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    5588:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    558a:	2b05      	cmp	r3, #5
    558c:	d004      	beq.n	5598 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    558e:	2320      	movs	r3, #32
  if (m_spiActive) {
    5590:	7ca0      	ldrb	r0, [r4, #18]
    5592:	7463      	strb	r3, [r4, #17]
    5594:	b910      	cbnz	r0, 559c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    5596:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    5598:	2001      	movs	r0, #1
}
    559a:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    559c:	7c20      	ldrb	r0, [r4, #16]
    559e:	2101      	movs	r1, #1
    55a0:	f001 fa78 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    55a4:	21ff      	movs	r1, #255	; 0xff
    55a6:	4628      	mov	r0, r5
    55a8:	f001 fb52 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    55ac:	4628      	mov	r0, r5
    55ae:	f001 fb05 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    55b2:	2300      	movs	r3, #0
}
    55b4:	4618      	mov	r0, r3
    m_spiActive = false;
    55b6:	74a3      	strb	r3, [r4, #18]
}
    55b8:	bd70      	pop	{r4, r5, r6, pc}
    55ba:	bf00      	nop

000055bc <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    55bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55c0:	4d17      	ldr	r5, [pc, #92]	; (5620 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    55c2:	4606      	mov	r6, r0
    55c4:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    55c6:	f100 0804 	add.w	r8, r0, #4
    55ca:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    55cc:	f504 7416 	add.w	r4, r4, #600	; 0x258
    55d0:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    55d2:	e003      	b.n	55dc <SharedSpiCard::writeData(unsigned char const*)+0x20>
    55d4:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    55d6:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    55d8:	041b      	lsls	r3, r3, #16
    55da:	d40c      	bmi.n	55f6 <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    55dc:	4640      	mov	r0, r8
    55de:	f001 fb19 	bl	6c14 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    55e2:	28ff      	cmp	r0, #255	; 0xff
    55e4:	d1f6      	bne.n	55d4 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    55e6:	463a      	mov	r2, r7
    55e8:	21fc      	movs	r1, #252	; 0xfc
    55ea:	4630      	mov	r0, r6
    55ec:	f7ff ffb2 	bl	5554 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    55f0:	b118      	cbz	r0, 55fa <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    55f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    55f6:	2324      	movs	r3, #36	; 0x24
    55f8:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    55fa:	7cb0      	ldrb	r0, [r6, #18]
    55fc:	2800      	cmp	r0, #0
    55fe:	d0f8      	beq.n	55f2 <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    5600:	7c30      	ldrb	r0, [r6, #16]
    5602:	2101      	movs	r1, #1
    5604:	f001 fa46 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5608:	21ff      	movs	r1, #255	; 0xff
    560a:	4640      	mov	r0, r8
    560c:	f001 fb20 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5610:	4640      	mov	r0, r8
    5612:	f001 fad3 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5616:	2300      	movs	r3, #0
}
    5618:	4618      	mov	r0, r3
    m_spiActive = false;
    561a:	74b3      	strb	r3, [r6, #18]
}
    561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5620:	20022564 	.word	0x20022564

00005624 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    5624:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    5626:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    5628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    562a:	4616      	mov	r6, r2
    562c:	4a22      	ldr	r2, [pc, #136]	; (56b8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    562e:	b082      	sub	sp, #8
    5630:	4604      	mov	r4, r0
    5632:	460d      	mov	r5, r1
    5634:	4293      	cmp	r3, r2
    5636:	d13c      	bne.n	56b2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    5638:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    563a:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    563c:	f04f 0118 	mov.w	r1, #24
    5640:	4620      	mov	r0, r4
    sector <<= 9;
    5642:	bf18      	it	ne
    5644:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    5646:	462a      	mov	r2, r5
    5648:	f7ff fc44 	bl	4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    564c:	4605      	mov	r5, r0
    564e:	b1b0      	cbz	r0, 567e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    5650:	230d      	movs	r3, #13
    5652:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    5654:	7ca0      	ldrb	r0, [r4, #18]
    5656:	b908      	cbnz	r0, 565c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    5658:	b002      	add	sp, #8
    565a:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    565c:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    565e:	7c20      	ldrb	r0, [r4, #16]
    5660:	2101      	movs	r1, #1
    5662:	f001 fa17 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5666:	21ff      	movs	r1, #255	; 0xff
    5668:	4628      	mov	r0, r5
    566a:	f001 faf1 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    566e:	4628      	mov	r0, r5
    5670:	f001 faa4 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5674:	2300      	movs	r3, #0
  return false;
    5676:	4618      	mov	r0, r3
    m_spiActive = false;
    5678:	74a3      	strb	r3, [r4, #18]
}
    567a:	b002      	add	sp, #8
    567c:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    567e:	4632      	mov	r2, r6
    5680:	21fe      	movs	r1, #254	; 0xfe
    5682:	4620      	mov	r0, r4
    5684:	f7ff ff66 	bl	5554 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5688:	2800      	cmp	r0, #0
    568a:	d0e3      	beq.n	5654 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    568c:	7ca6      	ldrb	r6, [r4, #18]
    568e:	2e00      	cmp	r6, #0
    5690:	d0e2      	beq.n	5658 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    5692:	7c20      	ldrb	r0, [r4, #16]
    5694:	2101      	movs	r1, #1
    5696:	f001 f9fd 	bl	6a94 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    569a:	1d20      	adds	r0, r4, #4
    569c:	21ff      	movs	r1, #255	; 0xff
    569e:	9001      	str	r0, [sp, #4]
    56a0:	f001 fad6 	bl	6c50 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    56a4:	9801      	ldr	r0, [sp, #4]
    56a6:	f001 fa89 	bl	6bbc <SdSpiArduinoDriver::deactivate()>
  return true;
    56aa:	4630      	mov	r0, r6
    m_spiActive = false;
    56ac:	74a5      	strb	r5, [r4, #18]
}
    56ae:	b002      	add	sp, #8
    56b0:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    56b2:	4798      	blx	r3
    56b4:	e7c1      	b.n	563a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    56b6:	bf00      	nop
    56b8:	00004b79 	.word	0x00004b79

000056bc <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    56bc:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    56be:	7f04      	ldrb	r4, [r0, #28]
    56c0:	b134      	cbz	r4, 56d0 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    56c2:	6804      	ldr	r4, [r0, #0]
    56c4:	2301      	movs	r3, #1
    56c6:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    56c8:	46a4      	mov	ip, r4
}
    56ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    56ce:	4760      	bx	ip
}
    56d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    56d4:	f7ff bfa6 	b.w	5624 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

000056d8 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    56d8:	2000      	movs	r0, #0
    56da:	4770      	bx	lr

000056dc <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    56dc:	2000      	movs	r0, #0
    56de:	4770      	bx	lr

000056e0 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    56e0:	2000      	movs	r0, #0
    56e2:	4770      	bx	lr

000056e4 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    56e4:	4770      	bx	lr
    56e6:	bf00      	nop

000056e8 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    56e8:	4b08      	ldr	r3, [pc, #32]	; (570c <sdIrs()+0x24>)
    56ea:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    56ec:	4a08      	ldr	r2, [pc, #32]	; (5710 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    56ee:	4809      	ldr	r0, [pc, #36]	; (5714 <sdIrs()+0x2c>)
static void sdIrs() {
    56f0:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    56f2:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    56f4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    56f6:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    56f8:	6812      	ldr	r2, [r2, #0]
}
    56fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    56fe:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    5700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    5702:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    5706:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    5708:	7001      	strb	r1, [r0, #0]
}
    570a:	4770      	bx	lr
    570c:	402c0000 	.word	0x402c0000
    5710:	200200a0 	.word	0x200200a0
    5714:	200225f8 	.word	0x200225f8

00005718 <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5718:	4b03      	ldr	r3, [pc, #12]	; (5728 <isBusyDat()+0x10>)
    571a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    571c:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    5720:	f3c0 6000 	ubfx	r0, r0, #24, #1
    5724:	4770      	bx	lr
    5726:	bf00      	nop
    5728:	402c0000 	.word	0x402c0000

0000572c <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    572c:	4b01      	ldr	r3, [pc, #4]	; (5734 <isBusyDMA()+0x8>)
    572e:	7818      	ldrb	r0, [r3, #0]
}
    5730:	4770      	bx	lr
    5732:	bf00      	nop
    5734:	200225f8 	.word	0x200225f8

00005738 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5738:	4a2b      	ldr	r2, [pc, #172]	; (57e8 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    573a:	4b2c      	ldr	r3, [pc, #176]	; (57ec <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    573c:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    573e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    5742:	492b      	ldr	r1, [pc, #172]	; (57f0 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5744:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    5748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    574c:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    574e:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    5750:	4c28      	ldr	r4, [pc, #160]	; (57f4 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    5752:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    5756:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    575a:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    575e:	089b      	lsrs	r3, r3, #2
    5760:	fbb1 fef3 	udiv	lr, r1, r3
    5764:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    5768:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    576c:	d235      	bcs.n	57da <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    576e:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    5770:	461e      	mov	r6, r3
    5772:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    5774:	011a      	lsls	r2, r3, #4
    5776:	fbbe f2f2 	udiv	r2, lr, r2
    577a:	4282      	cmp	r2, r0
    577c:	d901      	bls.n	5782 <setSdclk(unsigned long)+0x4a>
    577e:	2bff      	cmp	r3, #255	; 0xff
    5780:	d9f6      	bls.n	5770 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5782:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    5786:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5788:	4290      	cmp	r0, r2
    578a:	d22a      	bcs.n	57e2 <setSdclk(unsigned long)+0xaa>
    578c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5790:	2201      	movs	r2, #1
    5792:	e000      	b.n	5796 <setSdclk(unsigned long)+0x5e>
    5794:	46a4      	mov	ip, r4
    dvs++;
    5796:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5798:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    579c:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    579e:	fbbe f1fc 	udiv	r1, lr, ip
    57a2:	4281      	cmp	r1, r0
    57a4:	d917      	bls.n	57d6 <setSdclk(unsigned long)+0x9e>
    57a6:	2a10      	cmp	r2, #16
    57a8:	d1f4      	bne.n	5794 <setSdclk(unsigned long)+0x5c>
    57aa:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    57ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    57b0:	4911      	ldr	r1, [pc, #68]	; (57f8 <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    57b2:	4a12      	ldr	r2, [pc, #72]	; (57fc <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    57b4:	fb03 fc0c 	mul.w	ip, r3, ip
    57b8:	fbbe f3fc 	udiv	r3, lr, ip
    57bc:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    57be:	4b10      	ldr	r3, [pc, #64]	; (5800 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    57c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    57c2:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    57c4:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    57c6:	4333      	orrs	r3, r6
    57c8:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    57cc:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    57ce:	6a53      	ldr	r3, [r2, #36]	; 0x24
    57d0:	071b      	lsls	r3, r3, #28
    57d2:	d5fc      	bpl.n	57ce <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    57d4:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    57d6:	012d      	lsls	r5, r5, #4
    57d8:	e7e8      	b.n	57ac <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    57da:	4672      	mov	r2, lr
    57dc:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    57de:	2301      	movs	r3, #1
    57e0:	e7d2      	b.n	5788 <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    57e2:	469c      	mov	ip, r3
    57e4:	2500      	movs	r5, #0
    57e6:	e7e1      	b.n	57ac <setSdclk(unsigned long)+0x74>
    57e8:	400fc000 	.word	0x400fc000
    57ec:	400d8000 	.word	0x400d8000
    57f0:	5e69ec00 	.word	0x5e69ec00
    57f4:	aaaaaaab 	.word	0xaaaaaaab
    57f8:	2000cdbc 	.word	0x2000cdbc
    57fc:	402c0000 	.word	0x402c0000
    5800:	fff0000f 	.word	0xfff0000f

00005804 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    5804:	4b01      	ldr	r3, [pc, #4]	; (580c <SdioCard::errorCode() const+0x8>)
}
    5806:	7818      	ldrb	r0, [r3, #0]
    5808:	4770      	bx	lr
    580a:	bf00      	nop
    580c:	20008ebe 	.word	0x20008ebe

00005810 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    5810:	4b01      	ldr	r3, [pc, #4]	; (5818 <SdioCard::errorData() const+0x8>)
    5812:	6818      	ldr	r0, [r3, #0]
}
    5814:	4770      	bx	lr
    5816:	bf00      	nop
    5818:	200200a0 	.word	0x200200a0

0000581c <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    581c:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    581e:	4c07      	ldr	r4, [pc, #28]	; (583c <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    5820:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    5822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5824:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    5828:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    582a:	f8cc 1004 	str.w	r1, [ip, #4]
    582e:	f8cc 2008 	str.w	r2, [ip, #8]
    5832:	f8cc 300c 	str.w	r3, [ip, #12]
}
    5836:	f85d 4b04 	ldr.w	r4, [sp], #4
    583a:	4770      	bx	lr
    583c:	2001fbd4 	.word	0x2001fbd4

00005840 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    5840:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    5842:	4c07      	ldr	r4, [pc, #28]	; (5860 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    5844:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    5846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5848:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    584c:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    584e:	f8cc 1004 	str.w	r1, [ip, #4]
    5852:	f8cc 2008 	str.w	r2, [ip, #8]
    5856:	f8cc 300c 	str.w	r3, [ip, #12]
}
    585a:	f85d 4b04 	ldr.w	r4, [sp], #4
    585e:	4770      	bx	lr
    5860:	2001fbe4 	.word	0x2001fbe4

00005864 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    5864:	4b02      	ldr	r3, [pc, #8]	; (5870 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    5866:	2001      	movs	r0, #1
  *ocr = m_ocr;
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	600b      	str	r3, [r1, #0]
}
    586c:	4770      	bx	lr
    586e:	bf00      	nop
    5870:	2001fbf4 	.word	0x2001fbf4

00005874 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    5874:	4770      	bx	lr
    5876:	bf00      	nop

00005878 <SdioCard::~SdioCard()>:
    5878:	b510      	push	{r4, lr}
    587a:	4604      	mov	r4, r0
    587c:	210c      	movs	r1, #12
    587e:	f002 ffc5 	bl	880c <operator delete(void*, unsigned int)>
    5882:	4620      	mov	r0, r4
    5884:	bd10      	pop	{r4, pc}
    5886:	bf00      	nop

00005888 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    5888:	4b04      	ldr	r3, [pc, #16]	; (589c <SdioCard::type() const+0x14>)
    588a:	781b      	ldrb	r3, [r3, #0]
    588c:	b123      	cbz	r3, 5898 <SdioCard::type() const+0x10>
    588e:	4b04      	ldr	r3, [pc, #16]	; (58a0 <SdioCard::type() const+0x18>)
    5890:	7818      	ldrb	r0, [r3, #0]
    5892:	3002      	adds	r0, #2
    5894:	b2c0      	uxtb	r0, r0
    5896:	4770      	bx	lr
    5898:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    589a:	4770      	bx	lr
    589c:	200225f5 	.word	0x200225f5
    58a0:	200225f6 	.word	0x200225f6

000058a4 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    58a4:	4b18      	ldr	r3, [pc, #96]	; (5908 <SdioCard::sectorCount()+0x64>)
    58a6:	781a      	ldrb	r2, [r3, #0]
    58a8:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    58ac:	d00f      	beq.n	58ce <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    58ae:	2a40      	cmp	r2, #64	; 0x40
    58b0:	d001      	beq.n	58b6 <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    58b2:	2000      	movs	r0, #0
}
    58b4:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    58b6:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    58b8:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    58ba:	7a19      	ldrb	r1, [r3, #8]
    58bc:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    58be:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    58c2:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    58c6:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    58ca:	0280      	lsls	r0, r0, #10
    58cc:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    58ce:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    58d0:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    58d2:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    58d4:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    58d8:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    58dc:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    58e0:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    58e2:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    58e4:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    58e8:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    58ea:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    58ee:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    58f2:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    58f4:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    58f8:	3001      	adds	r0, #1
    58fa:	f003 030f 	and.w	r3, r3, #15
    58fe:	4413      	add	r3, r2
    5900:	3b07      	subs	r3, #7
    5902:	4098      	lsls	r0, r3
}
    5904:	f85d fb04 	ldr.w	pc, [sp], #4
    5908:	2001fbe4 	.word	0x2001fbe4

0000590c <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    590c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    5910:	f002 fe4c 	bl	85ac <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5914:	4e17      	ldr	r6, [pc, #92]	; (5974 <waitTransferComplete() [clone .part.0]+0x68>)
    5916:	4d18      	ldr	r5, [pc, #96]	; (5978 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    5918:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    591a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5990 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    591e:	e004      	b.n	592a <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5920:	f002 fe44 	bl	85ac <micros>
    5924:	1bc0      	subs	r0, r0, r7
    5926:	4540      	cmp	r0, r8
    5928:	d81b      	bhi.n	5962 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    592a:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    592c:	402c      	ands	r4, r5
    592e:	d0f7      	beq.n	5920 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    5930:	4a12      	ldr	r2, [pc, #72]	; (597c <waitTransferComplete() [clone .part.0]+0x70>)
    5932:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    5934:	4b12      	ldr	r3, [pc, #72]	; (5980 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5936:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5938:	6b32      	ldr	r2, [r6, #48]	; 0x30
    593a:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    593c:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    593e:	4a11      	ldr	r2, [pc, #68]	; (5984 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    5940:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	4213      	tst	r3, r2
    5946:	d009      	beq.n	595c <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    5948:	490f      	ldr	r1, [pc, #60]	; (5988 <waitTransferComplete() [clone .part.0]+0x7c>)
    594a:	241f      	movs	r4, #31
  m_errorLine = line;
    594c:	4b0f      	ldr	r3, [pc, #60]	; (598c <waitTransferComplete() [clone .part.0]+0x80>)
    594e:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    5952:	2000      	movs	r0, #0
  m_errorCode = code;
    5954:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5956:	601a      	str	r2, [r3, #0]
}
    5958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    595c:	2001      	movs	r0, #1
}
    595e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    5962:	4a06      	ldr	r2, [pc, #24]	; (597c <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    5964:	4b06      	ldr	r3, [pc, #24]	; (5980 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5966:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5968:	6b32      	ldr	r2, [r6, #48]	; 0x30
    596a:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    596c:	681b      	ldr	r3, [r3, #0]
    596e:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5970:	e7ea      	b.n	5948 <waitTransferComplete() [clone .part.0]+0x3c>
    5972:	bf00      	nop
    5974:	402c0000 	.word	0x402c0000
    5978:	117f0002 	.word	0x117f0002
    597c:	200225f7 	.word	0x200225f7
    5980:	200200a0 	.word	0x200200a0
    5984:	117f0000 	.word	0x117f0000
    5988:	20008ebe 	.word	0x20008ebe
    598c:	2001d1c0 	.word	0x2001d1c0
    5990:	000f4240 	.word	0x000f4240

00005994 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    5994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    5998:	4c26      	ldr	r4, [pc, #152]	; (5a34 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    599a:	460f      	mov	r7, r1
  if (!m_transferActive) {
    599c:	7823      	ldrb	r3, [r4, #0]
    599e:	2b00      	cmp	r3, #0
    59a0:	d138      	bne.n	5a14 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    59a2:	4b25      	ldr	r3, [pc, #148]	; (5a38 <SdioCard::writeData(unsigned char const*)+0xa4>)
    59a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    59a6:	05d2      	lsls	r2, r2, #23
    59a8:	d52b      	bpl.n	5a02 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    59aa:	4d23      	ldr	r5, [pc, #140]	; (5a38 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    59ac:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5a44 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    59b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    59b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    59b6:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    59b8:	f002 fdf8 	bl	85ac <micros>
    59bc:	4606      	mov	r6, r0
  while (fcn()) {
    59be:	e004      	b.n	59ca <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    59c0:	f002 fdf4 	bl	85ac <micros>
    59c4:	1b80      	subs	r0, r0, r6
    59c6:	4540      	cmp	r0, r8
    59c8:	d82a      	bhi.n	5a20 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    59ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    59cc:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    59d0:	d0f6      	beq.n	59c0 <SdioCard::writeData(unsigned char const*)+0x2c>
    59d2:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    59d6:	4818      	ldr	r0, [pc, #96]	; (5a38 <SdioCard::writeData(unsigned char const*)+0xa4>)
    59d8:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    59dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    59de:	055b      	lsls	r3, r3, #21
    59e0:	d5fc      	bpl.n	59dc <SdioCard::writeData(unsigned char const*)+0x48>
    59e2:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    59e6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    59ea:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    59ec:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    59ee:	d1fa      	bne.n	59e6 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    59f0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    59f4:	45bc      	cmp	ip, r7
    59f6:	d1f1      	bne.n	59dc <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    59f8:	2301      	movs	r3, #1
  return true;
    59fa:	4618      	mov	r0, r3
  m_transferActive = true;
    59fc:	7023      	strb	r3, [r4, #0]
}
    59fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5a04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    5a08:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    5a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5a0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    5a10:	629a      	str	r2, [r3, #40]	; 0x28
    5a12:	e7ca      	b.n	59aa <SdioCard::writeData(unsigned char const*)+0x16>
    5a14:	f7ff ff7a 	bl	590c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    5a18:	2800      	cmp	r0, #0
    5a1a:	d1c2      	bne.n	59a2 <SdioCard::writeData(unsigned char const*)+0xe>
}
    5a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    5a20:	4906      	ldr	r1, [pc, #24]	; (5a3c <SdioCard::writeData(unsigned char const*)+0xa8>)
    5a22:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    5a24:	4b06      	ldr	r3, [pc, #24]	; (5a40 <SdioCard::writeData(unsigned char const*)+0xac>)
    5a26:	f240 32d9 	movw	r2, #985	; 0x3d9
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    5a2a:	4648      	mov	r0, r9
  m_errorCode = code;
    5a2c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5a2e:	601a      	str	r2, [r3, #0]
}
    5a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5a34:	200225f7 	.word	0x200225f7
    5a38:	402c0000 	.word	0x402c0000
    5a3c:	20008ebe 	.word	0x20008ebe
    5a40:	2001d1c0 	.word	0x2001d1c0
    5a44:	000f4240 	.word	0x000f4240

00005a48 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    5a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a4c:	4607      	mov	r7, r0
    5a4e:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    5a50:	4c1f      	ldr	r4, [pc, #124]	; (5ad0 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    5a52:	f002 fdab 	bl	85ac <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a56:	4e1f      	ldr	r6, [pc, #124]	; (5ad4 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5a58:	4605      	mov	r5, r0
  while (fcn()) {
    5a5a:	e004      	b.n	5a66 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a5c:	f002 fda6 	bl	85ac <micros>
    5a60:	1b43      	subs	r3, r0, r5
    5a62:	42b3      	cmp	r3, r6
    5a64:	d824      	bhi.n	5ab0 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    5a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5a68:	07d9      	lsls	r1, r3, #31
    5a6a:	d4f7      	bmi.n	5a5c <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5a6c:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    5a6e:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5a72:	d420      	bmi.n	5ab6 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    5a74:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    5a78:	4c15      	ldr	r4, [pc, #84]	; (5ad0 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5a7a:	4e17      	ldr	r6, [pc, #92]	; (5ad8 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    5a7c:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    5a7e:	f002 fd95 	bl	85ac <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a82:	4f14      	ldr	r7, [pc, #80]	; (5ad4 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5a84:	4605      	mov	r5, r0
  while (fcn()) {
    5a86:	e004      	b.n	5a92 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a88:	f002 fd90 	bl	85ac <micros>
    5a8c:	1b40      	subs	r0, r0, r5
    5a8e:	42b8      	cmp	r0, r7
    5a90:	d80e      	bhi.n	5ab0 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5a92:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    5a94:	4233      	tst	r3, r6
    5a96:	d0f7      	beq.n	5a88 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    5a98:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5a9a:	4b10      	ldr	r3, [pc, #64]	; (5adc <cardCommand(unsigned long, unsigned long)+0x94>)
    5a9c:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5a9e:	681a      	ldr	r2, [r3, #0]
    5aa0:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5aa2:	681a      	ldr	r2, [r3, #0]
    5aa4:	07d2      	lsls	r2, r2, #31
    5aa6:	d503      	bpl.n	5ab0 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5aa8:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5aaa:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    5aae:	d00b      	beq.n	5ac8 <cardCommand(unsigned long, unsigned long)+0x80>
    5ab0:	2000      	movs	r0, #0
}
    5ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5ab6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5ab8:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5aba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    5abe:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5ac0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    5ac2:	4313      	orrs	r3, r2
    5ac4:	64a3      	str	r3, [r4, #72]	; 0x48
    5ac6:	e7d5      	b.n	5a74 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5ac8:	2001      	movs	r0, #1
}
    5aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ace:	bf00      	nop
    5ad0:	402c0000 	.word	0x402c0000
    5ad4:	000f4240 	.word	0x000f4240
    5ad8:	000f0001 	.word	0x000f0001
    5adc:	200200a0 	.word	0x200200a0

00005ae0 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    5ae0:	4b15      	ldr	r3, [pc, #84]	; (5b38 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    5ae2:	b530      	push	{r4, r5, lr}
    5ae4:	460d      	mov	r5, r1
    5ae6:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    5ae8:	6819      	ldr	r1, [r3, #0]
    5aea:	f7ff ffad 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5aee:	b308      	cbz	r0, 5b34 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    5af0:	4b12      	ldr	r3, [pc, #72]	; (5b3c <readReg16(unsigned long, void*)+0x5c>)
    5af2:	f105 040f 	add.w	r4, r5, #15
    5af6:	691a      	ldr	r2, [r3, #16]
    5af8:	9200      	str	r2, [sp, #0]
    5afa:	6959      	ldr	r1, [r3, #20]
    5afc:	9101      	str	r1, [sp, #4]
    5afe:	6999      	ldr	r1, [r3, #24]
    5b00:	9102      	str	r1, [sp, #8]
    5b02:	69db      	ldr	r3, [r3, #28]
    5b04:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    5b06:	2300      	movs	r3, #0
    5b08:	e001      	b.n	5b0e <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    5b0a:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    5b0e:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    5b12:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    5b14:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    5b18:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    5b1c:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    5b1e:	fa22 f20c 	lsr.w	r2, r2, ip
    5b22:	f10e 0110 	add.w	r1, lr, #16
    5b26:	f804 2d01 	strb.w	r2, [r4, #-1]!
    5b2a:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    5b2e:	d1ec      	bne.n	5b0a <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    5b30:	2300      	movs	r3, #0
    5b32:	73eb      	strb	r3, [r5, #15]
}
    5b34:	b005      	add	sp, #20
    5b36:	bd30      	pop	{r4, r5, pc}
    5b38:	2001fbf8 	.word	0x2001fbf8
    5b3c:	402c0000 	.word	0x402c0000

00005b40 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    5b40:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    5b42:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    5b44:	07db      	lsls	r3, r3, #31
    5b46:	d505      	bpl.n	5b54 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5b48:	4b15      	ldr	r3, [pc, #84]	; (5ba0 <SdioCard::isBusy()+0x60>)
    5b4a:	681b      	ldr	r3, [r3, #0]
    5b4c:	b1b3      	cbz	r3, 5b7c <SdioCard::isBusy()+0x3c>
}
    5b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5b52:	4718      	bx	r3
    if (m_transferActive) {
    5b54:	4b13      	ldr	r3, [pc, #76]	; (5ba4 <SdioCard::isBusy()+0x64>)
    5b56:	781b      	ldrb	r3, [r3, #0]
    5b58:	b93b      	cbnz	r3, 5b6a <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5b5a:	4b13      	ldr	r3, [pc, #76]	; (5ba8 <SdioCard::isBusy()+0x68>)
    5b5c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    5b5e:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    5b62:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    5b66:	4620      	mov	r0, r4
    5b68:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5b6a:	4b0f      	ldr	r3, [pc, #60]	; (5ba8 <SdioCard::isBusy()+0x68>)
    5b6c:	4c0f      	ldr	r4, [pc, #60]	; (5bac <SdioCard::isBusy()+0x6c>)
    5b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5b70:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    5b72:	fab4 f484 	clz	r4, r4
    5b76:	0964      	lsrs	r4, r4, #5
}
    5b78:	4620      	mov	r0, r4
    5b7a:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5b7c:	4b0c      	ldr	r3, [pc, #48]	; (5bb0 <SdioCard::isBusy()+0x70>)
    5b7e:	781c      	ldrb	r4, [r3, #0]
    5b80:	2c00      	cmp	r4, #0
    5b82:	d0f0      	beq.n	5b66 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5b84:	4b0b      	ldr	r3, [pc, #44]	; (5bb4 <SdioCard::isBusy()+0x74>)
    5b86:	480c      	ldr	r0, [pc, #48]	; (5bb8 <SdioCard::isBusy()+0x78>)
    5b88:	6819      	ldr	r1, [r3, #0]
    5b8a:	f7ff ff5d 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5b8e:	2800      	cmp	r0, #0
    5b90:	d0e9      	beq.n	5b66 <SdioCard::isBusy()+0x26>
    5b92:	4b05      	ldr	r3, [pc, #20]	; (5ba8 <SdioCard::isBusy()+0x68>)
    5b94:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5b96:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    5b9a:	f3c4 2400 	ubfx	r4, r4, #8, #1
    5b9e:	e7e2      	b.n	5b66 <SdioCard::isBusy()+0x26>
    5ba0:	2002009c 	.word	0x2002009c
    5ba4:	200225f7 	.word	0x200225f7
    5ba8:	402c0000 	.word	0x402c0000
    5bac:	117f0002 	.word	0x117f0002
    5bb0:	200225f4 	.word	0x200225f4
    5bb4:	2001fbf8 	.word	0x2001fbf8
    5bb8:	0d1a0000 	.word	0x0d1a0000

00005bbc <SdioCard::status()>:
uint32_t SdioCard::status() {
    5bbc:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5bbe:	4b04      	ldr	r3, [pc, #16]	; (5bd0 <SdioCard::status()+0x14>)
    5bc0:	4804      	ldr	r0, [pc, #16]	; (5bd4 <SdioCard::status()+0x18>)
    5bc2:	6819      	ldr	r1, [r3, #0]
    5bc4:	f7ff ff40 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5bc8:	b108      	cbz	r0, 5bce <SdioCard::status()+0x12>
    5bca:	4b03      	ldr	r3, [pc, #12]	; (5bd8 <SdioCard::status()+0x1c>)
    5bcc:	6918      	ldr	r0, [r3, #16]
}
    5bce:	bd08      	pop	{r3, pc}
    5bd0:	2001fbf8 	.word	0x2001fbf8
    5bd4:	0d1a0000 	.word	0x0d1a0000
    5bd8:	402c0000 	.word	0x402c0000

00005bdc <isBusyCMD13()>:
static bool isBusyCMD13() {
    5bdc:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5bde:	4b07      	ldr	r3, [pc, #28]	; (5bfc <isBusyCMD13()+0x20>)
    5be0:	4807      	ldr	r0, [pc, #28]	; (5c00 <isBusyCMD13()+0x24>)
    5be2:	6819      	ldr	r1, [r3, #0]
    5be4:	f7ff ff30 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5be8:	b130      	cbz	r0, 5bf8 <isBusyCMD13()+0x1c>
    5bea:	4b06      	ldr	r3, [pc, #24]	; (5c04 <isBusyCMD13()+0x28>)
    5bec:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    5bee:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    5bf2:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    5bf6:	bd08      	pop	{r3, pc}
    5bf8:	2001      	movs	r0, #1
    5bfa:	bd08      	pop	{r3, pc}
    5bfc:	2001fbf8 	.word	0x2001fbf8
    5c00:	0d1a0000 	.word	0x0d1a0000
    5c04:	402c0000 	.word	0x402c0000

00005c08 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    5c0c:	4b29      	ldr	r3, [pc, #164]	; (5cb4 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    5c0e:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    5c10:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 5cd4 <SdioCard::writeStart(unsigned long)+0xcc>
    5c14:	4e28      	ldr	r6, [pc, #160]	; (5cb8 <SdioCard::writeStart(unsigned long)+0xb0>)
    5c16:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    5c1a:	f002 fcc7 	bl	85ac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5c1e:	4d27      	ldr	r5, [pc, #156]	; (5cbc <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    5c20:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5c22:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 5cd8 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c26:	4f26      	ldr	r7, [pc, #152]	; (5cc0 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    5c28:	e006      	b.n	5c38 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c2a:	f002 fcbf 	bl	85ac <micros>
    5c2e:	1b00      	subs	r0, r0, r4
    5c30:	42b8      	cmp	r0, r7
    5c32:	d829      	bhi.n	5c88 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    5c34:	f004 fd6c 	bl	a710 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5c38:	6831      	ldr	r1, [r6, #0]
    5c3a:	4628      	mov	r0, r5
    5c3c:	f7ff ff04 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5c40:	2800      	cmp	r0, #0
    5c42:	d0f2      	beq.n	5c2a <SdioCard::writeStart(unsigned long)+0x22>
    5c44:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5c48:	05db      	lsls	r3, r3, #23
    5c4a:	d5ee      	bpl.n	5c2a <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    5c4c:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    5c52:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5c56:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    5c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5c5e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5c62:	4b18      	ldr	r3, [pc, #96]	; (5cc4 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5c64:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5c68:	781b      	ldrb	r3, [r3, #0]
    5c6a:	b1cb      	cbz	r3, 5ca0 <SdioCard::writeStart(unsigned long)+0x98>
    5c6c:	4649      	mov	r1, r9
    5c6e:	4816      	ldr	r0, [pc, #88]	; (5cc8 <SdioCard::writeStart(unsigned long)+0xc0>)
    5c70:	f7ff feea 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5c74:	b930      	cbnz	r0, 5c84 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    5c76:	4915      	ldr	r1, [pc, #84]	; (5ccc <SdioCard::writeStart(unsigned long)+0xc4>)
    5c78:	240e      	movs	r4, #14
  m_errorLine = line;
    5c7a:	4b15      	ldr	r3, [pc, #84]	; (5cd0 <SdioCard::writeStart(unsigned long)+0xc8>)
    5c7c:	f44f 6287 	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    5c80:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5c82:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    5c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5c88:	4a10      	ldr	r2, [pc, #64]	; (5ccc <SdioCard::writeStart(unsigned long)+0xc4>)
    5c8a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5c8c:	2000      	movs	r0, #0
  m_errorLine = line;
    5c8e:	4b10      	ldr	r3, [pc, #64]	; (5cd0 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    5c90:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5c92:	f240 422c 	movw	r2, #1068	; 0x42c
      m_busyFcn = 0;
    5c96:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    5c9a:	601a      	str	r2, [r3, #0]
}
    5c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5ca0:	ea4f 2949 	mov.w	r9, r9, lsl #9
    5ca4:	4808      	ldr	r0, [pc, #32]	; (5cc8 <SdioCard::writeStart(unsigned long)+0xc0>)
    5ca6:	4649      	mov	r1, r9
    5ca8:	f7ff fece 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5cac:	2800      	cmp	r0, #0
    5cae:	d1e9      	bne.n	5c84 <SdioCard::writeStart(unsigned long)+0x7c>
    5cb0:	e7e1      	b.n	5c76 <SdioCard::writeStart(unsigned long)+0x6e>
    5cb2:	bf00      	nop
    5cb4:	00005bdd 	.word	0x00005bdd
    5cb8:	2001fbf8 	.word	0x2001fbf8
    5cbc:	0d1a0000 	.word	0x0d1a0000
    5cc0:	000f4240 	.word	0x000f4240
    5cc4:	200225f6 	.word	0x200225f6
    5cc8:	193a0020 	.word	0x193a0020
    5ccc:	20008ebe 	.word	0x20008ebe
    5cd0:	2001d1c0 	.word	0x2001d1c0
    5cd4:	2002009c 	.word	0x2002009c
    5cd8:	402c0000 	.word	0x402c0000

00005cdc <SdioCard::readStop()>:
bool SdioCard::readStop() {
    5cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5ce0:	4c25      	ldr	r4, [pc, #148]	; (5d78 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5ce2:	2100      	movs	r1, #0
    5ce4:	4825      	ldr	r0, [pc, #148]	; (5d7c <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5ce6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5cec:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5cee:	f7ff feab 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5cf2:	4605      	mov	r5, r0
    5cf4:	b948      	cbnz	r0, 5d0a <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    5cf6:	4922      	ldr	r1, [pc, #136]	; (5d80 <SdioCard::readStop()+0xa4>)
    5cf8:	2009      	movs	r0, #9
  m_errorLine = line;
    5cfa:	4b22      	ldr	r3, [pc, #136]	; (5d84 <SdioCard::readStop()+0xa8>)
    5cfc:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    5d00:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5d02:	601a      	str	r2, [r3, #0]
}
    5d04:	4628      	mov	r0, r5
    5d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    5d0a:	4b1f      	ldr	r3, [pc, #124]	; (5d88 <SdioCard::readStop()+0xac>)
    5d0c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5d90 <SdioCard::readStop()+0xb4>
    5d10:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    5d14:	f002 fc4a 	bl	85ac <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    5d1a:	4606      	mov	r6, r0
  while (fcn()) {
    5d1c:	01d8      	lsls	r0, r3, #7
    5d1e:	d418      	bmi.n	5d52 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d20:	4f1a      	ldr	r7, [pc, #104]	; (5d8c <SdioCard::readStop()+0xb0>)
    5d22:	e004      	b.n	5d2e <SdioCard::readStop()+0x52>
    yield();
    5d24:	f004 fcf4 	bl	a710 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5d2a:	01d9      	lsls	r1, r3, #7
    5d2c:	d411      	bmi.n	5d52 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d2e:	f002 fc3d 	bl	85ac <micros>
    5d32:	1b83      	subs	r3, r0, r6
    5d34:	42bb      	cmp	r3, r7
    5d36:	d9f5      	bls.n	5d24 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    5d38:	4a11      	ldr	r2, [pc, #68]	; (5d80 <SdioCard::readStop()+0xa4>)
    5d3a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5d3c:	2500      	movs	r5, #0
  m_errorLine = line;
    5d3e:	4b11      	ldr	r3, [pc, #68]	; (5d84 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    5d40:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5d42:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    5d46:	4628      	mov	r0, r5
      m_busyFcn = 0;
    5d48:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    5d4c:	601a      	str	r2, [r3, #0]
}
    5d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    5d52:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    5d54:	4b08      	ldr	r3, [pc, #32]	; (5d78 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    5d56:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    5d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5d5c:	0792      	lsls	r2, r2, #30
    5d5e:	d5d1      	bpl.n	5d04 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    5d60:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5d62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5d66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5d6a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    5d6e:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    5d70:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    5d72:	629a      	str	r2, [r3, #40]	; 0x28
    5d74:	e7c6      	b.n	5d04 <SdioCard::readStop()+0x28>
    5d76:	bf00      	nop
    5d78:	402c0000 	.word	0x402c0000
    5d7c:	0cdb0000 	.word	0x0cdb0000
    5d80:	20008ebe 	.word	0x20008ebe
    5d84:	2001d1c0 	.word	0x2001d1c0
    5d88:	00005719 	.word	0x00005719
    5d8c:	000f4240 	.word	0x000f4240
    5d90:	2002009c 	.word	0x2002009c

00005d94 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    5d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d98:	4682      	mov	sl, r0
    5d9a:	4689      	mov	r9, r1
    5d9c:	4e36      	ldr	r6, [pc, #216]	; (5e78 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    5d9e:	f002 fc05 	bl	85ac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5da2:	4d36      	ldr	r5, [pc, #216]	; (5e7c <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    5da4:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5da6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 5ea8 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5daa:	4f35      	ldr	r7, [pc, #212]	; (5e80 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    5dac:	e004      	b.n	5db8 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5dae:	f002 fbfd 	bl	85ac <micros>
    5db2:	1b03      	subs	r3, r0, r4
    5db4:	42bb      	cmp	r3, r7
    5db6:	d827      	bhi.n	5e08 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5db8:	6831      	ldr	r1, [r6, #0]
    5dba:	4628      	mov	r0, r5
    5dbc:	f7ff fe44 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5dc0:	2800      	cmp	r0, #0
    5dc2:	d0f4      	beq.n	5dae <cardCMD6(unsigned long, unsigned char*)+0x1a>
    5dc4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5dc8:	05da      	lsls	r2, r3, #23
    5dca:	d5f0      	bpl.n	5dae <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    5dcc:	2301      	movs	r3, #1
    5dce:	4d2d      	ldr	r5, [pc, #180]	; (5e84 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    5dd0:	4f2d      	ldr	r7, [pc, #180]	; (5e88 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5dd2:	4651      	mov	r1, sl
  m_dmaBusy = true;
    5dd4:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    5dd6:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5dd8:	482c      	ldr	r0, [pc, #176]	; (5e8c <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    5dda:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5ddc:	4b2c      	ldr	r3, [pc, #176]	; (5e90 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    5dde:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5de2:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5de6:	4b2b      	ldr	r3, [pc, #172]	; (5e94 <cardCMD6(unsigned long, unsigned char*)+0x100>)
    5de8:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5dec:	f7ff fe2c 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5df0:	4604      	mov	r4, r0
    5df2:	b9a0      	cbnz	r0, 5e1e <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    5df4:	4928      	ldr	r1, [pc, #160]	; (5e98 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    5df6:	2004      	movs	r0, #4
  m_errorLine = line;
    5df8:	4b28      	ldr	r3, [pc, #160]	; (5e9c <cardCMD6(unsigned long, unsigned char*)+0x108>)
    5dfa:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    5dfe:	7008      	strb	r0, [r1, #0]
}
    5e00:	4620      	mov	r0, r4
  m_errorLine = line;
    5e02:	601a      	str	r2, [r3, #0]
}
    5e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5e08:	4923      	ldr	r1, [pc, #140]	; (5e98 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    5e0a:	200a      	movs	r0, #10
  m_errorLine = line;
    5e0c:	4b23      	ldr	r3, [pc, #140]	; (5e9c <cardCMD6(unsigned long, unsigned char*)+0x108>)
    5e0e:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    5e12:	2400      	movs	r4, #0
  m_errorCode = code;
    5e14:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5e16:	601a      	str	r2, [r3, #0]
}
    5e18:	4620      	mov	r0, r4
    5e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    5e1e:	4b20      	ldr	r3, [pc, #128]	; (5ea0 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    5e20:	f8df 9088 	ldr.w	r9, [pc, #136]	; 5eac <cardCMD6(unsigned long, unsigned char*)+0x118>
    5e24:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    5e28:	f002 fbc0 	bl	85ac <micros>
  return m_dmaBusy;
    5e2c:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    5e2e:	4606      	mov	r6, r0
  while (fcn()) {
    5e30:	b1bb      	cbz	r3, 5e62 <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5e32:	f8df 804c 	ldr.w	r8, [pc, #76]	; 5e80 <cardCMD6(unsigned long, unsigned char*)+0xec>
    5e36:	e003      	b.n	5e40 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    5e38:	f004 fc6a 	bl	a710 <yield>
  return m_dmaBusy;
    5e3c:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5e3e:	b183      	cbz	r3, 5e62 <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5e40:	f002 fbb4 	bl	85ac <micros>
    5e44:	1b83      	subs	r3, r0, r6
    5e46:	4543      	cmp	r3, r8
    5e48:	d9f6      	bls.n	5e38 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    5e4a:	2300      	movs	r3, #0
    5e4c:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    5e50:	4911      	ldr	r1, [pc, #68]	; (5e98 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    5e52:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    5e54:	4b11      	ldr	r3, [pc, #68]	; (5e9c <cardCMD6(unsigned long, unsigned char*)+0x108>)
    5e56:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    5e5a:	2400      	movs	r4, #0
  m_errorCode = code;
    5e5c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5e5e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    5e60:	e7da      	b.n	5e18 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5e62:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    5e64:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5e66:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    5e68:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5e6c:	d5f0      	bpl.n	5e50 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    5e6e:	683a      	ldr	r2, [r7, #0]
    5e70:	4b0c      	ldr	r3, [pc, #48]	; (5ea4 <cardCMD6(unsigned long, unsigned char*)+0x110>)
    5e72:	421a      	tst	r2, r3
    5e74:	d0d0      	beq.n	5e18 <cardCMD6(unsigned long, unsigned char*)+0x84>
    5e76:	e7eb      	b.n	5e50 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    5e78:	2001fbf8 	.word	0x2001fbf8
    5e7c:	0d1a0000 	.word	0x0d1a0000
    5e80:	000f4240 	.word	0x000f4240
    5e84:	200225f8 	.word	0x200225f8
    5e88:	200200a0 	.word	0x200200a0
    5e8c:	063a0011 	.word	0x063a0011
    5e90:	00010040 	.word	0x00010040
    5e94:	117f0002 	.word	0x117f0002
    5e98:	20008ebe 	.word	0x20008ebe
    5e9c:	2001d1c0 	.word	0x2001d1c0
    5ea0:	0000572d 	.word	0x0000572d
    5ea4:	117f0000 	.word	0x117f0000
    5ea8:	402c0000 	.word	0x402c0000
    5eac:	2002009c 	.word	0x2002009c

00005eb0 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    5eb4:	4d32      	ldr	r5, [pc, #200]	; (5f80 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5eb6:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    5eb8:	7aab      	ldrb	r3, [r5, #10]
    5eba:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    5ebe:	d112      	bne.n	5ee6 <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    5ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5ec4:	7aea      	ldrb	r2, [r5, #11]
    5ec6:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    5ec8:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    5ecc:	1c62      	adds	r2, r4, #1
    5ece:	430a      	orrs	r2, r1
    5ed0:	4213      	tst	r3, r2
    5ed2:	d008      	beq.n	5ee6 <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    5ed4:	492b      	ldr	r1, [pc, #172]	; (5f84 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5ed6:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    5ed8:	4b2b      	ldr	r3, [pc, #172]	; (5f88 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5eda:	f240 22e3 	movw	r2, #739	; 0x2e3
  m_errorCode = code;
    5ede:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5ee0:	601a      	str	r2, [r3, #0]
}
    5ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    5ee6:	4b29      	ldr	r3, [pc, #164]	; (5f8c <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5ee8:	781b      	ldrb	r3, [r3, #0]
    5eea:	b90b      	cbnz	r3, 5ef0 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    5eec:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    5eee:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    5ef0:	4827      	ldr	r0, [pc, #156]	; (5f90 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    5ef2:	f7ff fda9 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5ef6:	b940      	cbnz	r0, 5f0a <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    5ef8:	4922      	ldr	r1, [pc, #136]	; (5f84 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5efa:	240f      	movs	r4, #15
  m_errorLine = line;
    5efc:	4b22      	ldr	r3, [pc, #136]	; (5f88 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5efe:	f240 22eb 	movw	r2, #747	; 0x2eb
  m_errorCode = code;
    5f02:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5f04:	601a      	str	r2, [r3, #0]
}
    5f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    5f0a:	4621      	mov	r1, r4
    5f0c:	4821      	ldr	r0, [pc, #132]	; (5f94 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    5f0e:	f7ff fd9b 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5f12:	b940      	cbnz	r0, 5f26 <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    5f14:	491b      	ldr	r1, [pc, #108]	; (5f84 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5f16:	2410      	movs	r4, #16
  m_errorLine = line;
    5f18:	4b1b      	ldr	r3, [pc, #108]	; (5f88 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5f1a:	f240 22ee 	movw	r2, #750	; 0x2ee
  m_errorCode = code;
    5f1e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5f20:	601a      	str	r2, [r3, #0]
}
    5f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    5f26:	2100      	movs	r1, #0
    5f28:	481b      	ldr	r0, [pc, #108]	; (5f98 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    5f2a:	f7ff fd8d 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5f2e:	b938      	cbnz	r0, 5f40 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    5f30:	4914      	ldr	r1, [pc, #80]	; (5f84 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5f32:	2411      	movs	r4, #17
  m_errorLine = line;
    5f34:	4b14      	ldr	r3, [pc, #80]	; (5f88 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5f36:	f240 22f1 	movw	r2, #753	; 0x2f1
  m_errorCode = code;
    5f3a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5f3c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    5f3e:	e7e2      	b.n	5f06 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    5f40:	f002 fb34 	bl	85ac <micros>
    5f44:	4e15      	ldr	r6, [pc, #84]	; (5f9c <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f46:	4d16      	ldr	r5, [pc, #88]	; (5fa0 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    5f48:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f4a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5fa8 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f4e:	4f15      	ldr	r7, [pc, #84]	; (5fa4 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f50:	6831      	ldr	r1, [r6, #0]
    5f52:	4628      	mov	r0, r5
    5f54:	f7ff fd78 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    5f58:	b118      	cbz	r0, 5f62 <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    5f5a:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5f5e:	05db      	lsls	r3, r3, #23
    5f60:	d4d1      	bmi.n	5f06 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f62:	f002 fb23 	bl	85ac <micros>
    5f66:	1b00      	subs	r0, r0, r4
    5f68:	42b8      	cmp	r0, r7
    5f6a:	d9f1      	bls.n	5f50 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    5f6c:	4905      	ldr	r1, [pc, #20]	; (5f84 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5f6e:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    5f70:	4b05      	ldr	r3, [pc, #20]	; (5f88 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5f72:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    5f76:	2000      	movs	r0, #0
  m_errorCode = code;
    5f78:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5f7a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    5f7c:	e7c3      	b.n	5f06 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    5f7e:	bf00      	nop
    5f80:	2001fbe4 	.word	0x2001fbe4
    5f84:	20008ebe 	.word	0x20008ebe
    5f88:	2001d1c0 	.word	0x2001d1c0
    5f8c:	200225f6 	.word	0x200225f6
    5f90:	201a0000 	.word	0x201a0000
    5f94:	211a0000 	.word	0x211a0000
    5f98:	261b0000 	.word	0x261b0000
    5f9c:	2001fbf8 	.word	0x2001fbf8
    5fa0:	0d1a0000 	.word	0x0d1a0000
    5fa4:	000f4240 	.word	0x000f4240
    5fa8:	402c0000 	.word	0x402c0000

00005fac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    5fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    5fb0:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    5fb4:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    5fb6:	bf18      	it	ne
    5fb8:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    5fba:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    5fbc:	9300      	str	r3, [sp, #0]
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	bf08      	it	eq
    5fc2:	f044 0401 	orreq.w	r4, r4, #1
    5fc6:	b15c      	cbz	r4, 5fe0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    5fc8:	4940      	ldr	r1, [pc, #256]	; (60cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    5fca:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    5fcc:	4b40      	ldr	r3, [pc, #256]	; (60d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    5fce:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    5fd2:	2400      	movs	r4, #0
  m_errorCode = code;
    5fd4:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5fd6:	601a      	str	r2, [r3, #0]
}
    5fd8:	4620      	mov	r0, r4
    5fda:	b003      	add	sp, #12
    5fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    5fe0:	4b3c      	ldr	r3, [pc, #240]	; (60d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    5fe2:	4615      	mov	r5, r2
    5fe4:	4a3c      	ldr	r2, [pc, #240]	; (60d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    5fe6:	460e      	mov	r6, r1
    5fe8:	f8df 910c 	ldr.w	r9, [pc, #268]	; 60f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    5fec:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    5fee:	f002 fadd 	bl	85ac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ff2:	f8df 8108 	ldr.w	r8, [pc, #264]	; 60fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    5ff6:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ff8:	f8df b104 	ldr.w	fp, [pc, #260]	; 6100 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ffc:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 60f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    6000:	e006      	b.n	6010 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6002:	f002 fad3 	bl	85ac <micros>
    6006:	1bc0      	subs	r0, r0, r7
    6008:	4550      	cmp	r0, sl
    600a:	d844      	bhi.n	6096 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    600c:	f004 fb80 	bl	a710 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6010:	f8d9 1000 	ldr.w	r1, [r9]
    6014:	4640      	mov	r0, r8
    6016:	f7ff fd17 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    601a:	2800      	cmp	r0, #0
    601c:	d0f1      	beq.n	6002 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    601e:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    6022:	05da      	lsls	r2, r3, #23
    6024:	d5ed      	bpl.n	6002 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6026:	9a00      	ldr	r2, [sp, #0]
    6028:	4b2c      	ldr	r3, [pc, #176]	; (60dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    602a:	492b      	ldr	r1, [pc, #172]	; (60d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    602c:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    6030:	2200      	movs	r2, #0
  m_dmaBusy = true;
    6032:	4f2b      	ldr	r7, [pc, #172]	; (60e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    6034:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    603a:	2101      	movs	r1, #1
  m_irqstat = 0;
    603c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 6104 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    6040:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    6042:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    6046:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    604a:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    604e:	4b25      	ldr	r3, [pc, #148]	; (60e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    6050:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    6054:	4b24      	ldr	r3, [pc, #144]	; (60e8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    6056:	781b      	ldrb	r3, [r3, #0]
    6058:	b343      	cbz	r3, 60ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    605a:	4631      	mov	r1, r6
    605c:	9801      	ldr	r0, [sp, #4]
    605e:	f7ff fcf3 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    6062:	4681      	mov	r9, r0
    6064:	2800      	cmp	r0, #0
    6066:	d0b7      	beq.n	5fd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    6068:	4b20      	ldr	r3, [pc, #128]	; (60ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    606a:	4a1b      	ldr	r2, [pc, #108]	; (60d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    606c:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    606e:	f002 fa9d 	bl	85ac <micros>
  return m_dmaBusy;
    6072:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    6074:	4605      	mov	r5, r0
  while (fcn()) {
    6076:	b1db      	cbz	r3, 60b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6078:	4e1d      	ldr	r6, [pc, #116]	; (60f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    607a:	e003      	b.n	6084 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    607c:	f004 fb48 	bl	a710 <yield>
  return m_dmaBusy;
    6080:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    6082:	b1ab      	cbz	r3, 60b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6084:	f002 fa92 	bl	85ac <micros>
    6088:	1b40      	subs	r0, r0, r5
    608a:	42b0      	cmp	r0, r6
    608c:	d9f6      	bls.n	607c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    608e:	2300      	movs	r3, #0
    6090:	4a11      	ldr	r2, [pc, #68]	; (60d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    6092:	6013      	str	r3, [r2, #0]
      return true;
    6094:	e7a0      	b.n	5fd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    6096:	4b0d      	ldr	r3, [pc, #52]	; (60cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    6098:	220a      	movs	r2, #10
      m_busyFcn = 0;
    609a:	2100      	movs	r1, #0
    609c:	480e      	ldr	r0, [pc, #56]	; (60d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    609e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    60a0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    60a4:	4b0a      	ldr	r3, [pc, #40]	; (60d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    60a6:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    60a8:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    60aa:	e795      	b.n	5fd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    60ac:	0276      	lsls	r6, r6, #9
    60ae:	e7d4      	b.n	605a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    60b0:	2300      	movs	r3, #0
    60b2:	4a09      	ldr	r2, [pc, #36]	; (60d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    60b4:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    60b6:	f8d8 3000 	ldr.w	r3, [r8]
    60ba:	079b      	lsls	r3, r3, #30
    60bc:	d58c      	bpl.n	5fd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    60be:	f8d8 2000 	ldr.w	r2, [r8]
    60c2:	4b0c      	ldr	r3, [pc, #48]	; (60f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    60c4:	421a      	tst	r2, r3
    60c6:	bf08      	it	eq
    60c8:	464c      	moveq	r4, r9
    60ca:	e785      	b.n	5fd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    60cc:	20008ebe 	.word	0x20008ebe
    60d0:	2001d1c0 	.word	0x2001d1c0
    60d4:	00005bdd 	.word	0x00005bdd
    60d8:	2002009c 	.word	0x2002009c
    60dc:	1fff0000 	.word	0x1fff0000
    60e0:	200225f8 	.word	0x200225f8
    60e4:	117f0002 	.word	0x117f0002
    60e8:	200225f6 	.word	0x200225f6
    60ec:	0000572d 	.word	0x0000572d
    60f0:	000f4240 	.word	0x000f4240
    60f4:	117f0000 	.word	0x117f0000
    60f8:	2001fbf8 	.word	0x2001fbf8
    60fc:	0d1a0000 	.word	0x0d1a0000
    6100:	402c0000 	.word	0x402c0000
    6104:	200200a0 	.word	0x200200a0

00006108 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    6108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    610a:	4606      	mov	r6, r0
    610c:	7a00      	ldrb	r0, [r0, #8]
    610e:	460c      	mov	r4, r1
    6110:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    6112:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    6114:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    6116:	d413      	bmi.n	6140 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    6118:	b183      	cbz	r3, 613c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    611a:	440f      	add	r7, r1
    611c:	e001      	b.n	6122 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    611e:	42bc      	cmp	r4, r7
    6120:	d00c      	beq.n	613c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    6122:	6833      	ldr	r3, [r6, #0]
    6124:	462a      	mov	r2, r5
    6126:	4621      	mov	r1, r4
    6128:	4630      	mov	r0, r6
    612a:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    612c:	3401      	adds	r4, #1
    612e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    6132:	4798      	blx	r3
    6134:	2800      	cmp	r0, #0
    6136:	d1f2      	bne.n	611e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    6138:	2000      	movs	r0, #0
}
    613a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    613c:	2001      	movs	r0, #1
}
    613e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    6140:	0790      	lsls	r0, r2, #30
    6142:	d012      	beq.n	616a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    6144:	2b00      	cmp	r3, #0
    6146:	d0f9      	beq.n	613c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    6148:	440f      	add	r7, r1
    614a:	e001      	b.n	6150 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    614c:	42bc      	cmp	r4, r7
    614e:	d0f5      	beq.n	613c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    6150:	6833      	ldr	r3, [r6, #0]
    6152:	462a      	mov	r2, r5
    6154:	4621      	mov	r1, r4
    6156:	4630      	mov	r0, r6
    6158:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    615a:	3401      	adds	r4, #1
    615c:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    6160:	4798      	blx	r3
    6162:	2800      	cmp	r0, #0
    6164:	d1f2      	bne.n	614c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    6166:	2000      	movs	r0, #0
    6168:	e7e7      	b.n	613a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    616a:	4806      	ldr	r0, [pc, #24]	; (6184 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    616c:	f7ff ff1e 	bl	5fac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6170:	2800      	cmp	r0, #0
    6172:	d1e3      	bne.n	613c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    6174:	4904      	ldr	r1, [pc, #16]	; (6188 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    6176:	240c      	movs	r4, #12
  m_errorLine = line;
    6178:	4b04      	ldr	r3, [pc, #16]	; (618c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    617a:	f240 3282 	movw	r2, #898	; 0x382
  m_errorCode = code;
    617e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6180:	601a      	str	r2, [r3, #0]
}
    6182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6184:	123a0037 	.word	0x123a0037
    6188:	20008ebe 	.word	0x20008ebe
    618c:	2001d1c0 	.word	0x2001d1c0

00006190 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    6190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6192:	4606      	mov	r6, r0
    6194:	7a00      	ldrb	r0, [r0, #8]
    6196:	460c      	mov	r4, r1
    6198:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    619a:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    619c:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    619e:	d413      	bmi.n	61c8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    61a0:	b183      	cbz	r3, 61c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    61a2:	440f      	add	r7, r1
    61a4:	e001      	b.n	61aa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    61a6:	42bc      	cmp	r4, r7
    61a8:	d00c      	beq.n	61c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    61aa:	6833      	ldr	r3, [r6, #0]
    61ac:	462a      	mov	r2, r5
    61ae:	4621      	mov	r1, r4
    61b0:	4630      	mov	r0, r6
    61b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    61b4:	3401      	adds	r4, #1
    61b6:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    61ba:	4798      	blx	r3
    61bc:	2800      	cmp	r0, #0
    61be:	d1f2      	bne.n	61a6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    61c0:	2000      	movs	r0, #0
}
    61c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    61c4:	2001      	movs	r0, #1
}
    61c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    61c8:	0790      	lsls	r0, r2, #30
    61ca:	d012      	beq.n	61f2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    61cc:	2b00      	cmp	r3, #0
    61ce:	d0f9      	beq.n	61c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    61d0:	440f      	add	r7, r1
    61d2:	e001      	b.n	61d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    61d4:	42bc      	cmp	r4, r7
    61d6:	d0f5      	beq.n	61c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    61d8:	6833      	ldr	r3, [r6, #0]
    61da:	462a      	mov	r2, r5
    61dc:	4621      	mov	r1, r4
    61de:	4630      	mov	r0, r6
    61e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    61e2:	3401      	adds	r4, #1
    61e4:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    61e8:	4798      	blx	r3
    61ea:	2800      	cmp	r0, #0
    61ec:	d1f2      	bne.n	61d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    61ee:	2000      	movs	r0, #0
    61f0:	e7e7      	b.n	61c2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    61f2:	4806      	ldr	r0, [pc, #24]	; (620c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    61f4:	f7ff feda 	bl	5fac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    61f8:	2800      	cmp	r0, #0
    61fa:	d1e3      	bne.n	61c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    61fc:	4904      	ldr	r1, [pc, #16]	; (6210 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    61fe:	240e      	movs	r4, #14
  m_errorLine = line;
    6200:	4b04      	ldr	r3, [pc, #16]	; (6214 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    6202:	f240 421e 	movw	r2, #1054	; 0x41e
  m_errorCode = code;
    6206:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6208:	601a      	str	r2, [r3, #0]
}
    620a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    620c:	193a0027 	.word	0x193a0027
    6210:	20008ebe 	.word	0x20008ebe
    6214:	2001d1c0 	.word	0x2001d1c0

00006218 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    6218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    621c:	4ba8      	ldr	r3, [pc, #672]	; (64c0 <SdioCard::begin(SdioConfig)+0x2a8>)
  m_curState = IDLE_STATE;
    621e:	2200      	movs	r2, #0
  m_initDone = false;
    6220:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 6520 <SdioCard::begin(SdioConfig)+0x308>
bool SdioCard::begin(SdioConfig sdioConfig) {
    6224:	b091      	sub	sp, #68	; 0x44
  m_errorCode = SD_CARD_ERROR_NONE;
    6226:	4da7      	ldr	r5, [pc, #668]	; (64c4 <SdioCard::begin(SdioConfig)+0x2ac>)
  m_highCapacity = false;
    6228:	4fa7      	ldr	r7, [pc, #668]	; (64c8 <SdioCard::begin(SdioConfig)+0x2b0>)
  m_version2 = false;
    622a:	4ea8      	ldr	r6, [pc, #672]	; (64cc <SdioCard::begin(SdioConfig)+0x2b4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    622c:	702a      	strb	r2, [r5, #0]
  m_curState = IDLE_STATE;
    622e:	7242      	strb	r2, [r0, #9]
  m_initDone = false;
    6230:	f888 2000 	strb.w	r2, [r8]
  m_highCapacity = false;
    6234:	703a      	strb	r2, [r7, #0]
  m_version2 = false;
    6236:	7032      	strb	r2, [r6, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6238:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    623c:	7201      	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    623e:	2105      	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6240:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    6244:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 64e8 <SdioCard::begin(SdioConfig)+0x2d0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6248:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    624c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6250:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    6254:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    6258:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    625c:	f042 0218 	orr.w	r2, r2, #24
    6260:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    6264:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    626c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6270:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6274:	4a96      	ldr	r2, [pc, #600]	; (64d0 <SdioCard::begin(SdioConfig)+0x2b8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6276:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    627a:	f040 000c 	orr.w	r0, r0, #12
    627e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    6282:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6284:	f420 5060 	bic.w	r0, r0, #14336	; 0x3800
    6288:	6258      	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    628a:	69d8      	ldr	r0, [r3, #28]
    628c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    6290:	61d8      	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    6292:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6294:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    6298:	6258      	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    629a:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    629e:	f8c2 11d0 	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    62a2:	f8c2 11bc 	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    62a6:	f8c2 11c0 	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    62aa:	f8c2 11c4 	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    62ae:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    62b2:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    62b6:	4b87      	ldr	r3, [pc, #540]	; (64d4 <SdioCard::begin(SdioConfig)+0x2bc>)
  SDHC_MIX_CTRL |= 0x80000000;
    62b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    62bc:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    62c0:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
    62c4:	4313      	orrs	r3, r2
    62c6:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    62ca:	f8d9 402c 	ldr.w	r4, [r9, #44]	; 0x2c
    62ce:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    62d2:	d1fa      	bne.n	62ca <SdioCard::begin(SdioConfig)+0xb2>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    62d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    62d8:	f7ff fa2e 	bl	5738 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    62dc:	4b7c      	ldr	r3, [pc, #496]	; (64d0 <SdioCard::begin(SdioConfig)+0x2b8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    62de:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    62e2:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    62e6:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    62ea:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    62ee:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    62f2:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    62f6:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    62fa:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    62fe:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    6302:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    6306:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    630a:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    630e:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    6312:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    6316:	4b70      	ldr	r3, [pc, #448]	; (64d8 <SdioCard::begin(SdioConfig)+0x2c0>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    6318:	4a70      	ldr	r2, [pc, #448]	; (64dc <SdioCard::begin(SdioConfig)+0x2c4>)
    631a:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
    631e:	4b70      	ldr	r3, [pc, #448]	; (64e0 <SdioCard::begin(SdioConfig)+0x2c8>)
    6320:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    6324:	4b6f      	ldr	r3, [pc, #444]	; (64e4 <SdioCard::begin(SdioConfig)+0x2cc>)
    6326:	2260      	movs	r2, #96	; 0x60
    6328:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    632c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6330:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6334:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    6338:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
    633c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    6340:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    6344:	4b68      	ldr	r3, [pc, #416]	; (64e8 <SdioCard::begin(SdioConfig)+0x2d0>)
    6346:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    6348:	f011 6100 	ands.w	r1, r1, #134217728	; 0x8000000
    634c:	d1fb      	bne.n	6346 <SdioCard::begin(SdioConfig)+0x12e>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    634e:	4608      	mov	r0, r1
    6350:	f7ff fb7a 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    6354:	4604      	mov	r4, r0
    6356:	b948      	cbnz	r0, 636c <SdioCard::begin(SdioConfig)+0x154>
  m_errorCode = code;
    6358:	2101      	movs	r1, #1
  m_errorLine = line;
    635a:	4b64      	ldr	r3, [pc, #400]	; (64ec <SdioCard::begin(SdioConfig)+0x2d4>)
    635c:	f240 228e 	movw	r2, #654	; 0x28e
  m_errorCode = code;
    6360:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6362:	601a      	str	r2, [r3, #0]
}
    6364:	4620      	mov	r0, r4
    6366:	b011      	add	sp, #68	; 0x44
    6368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    636c:	2403      	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    636e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 6524 <SdioCard::begin(SdioConfig)+0x30c>
    6372:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    6376:	4648      	mov	r0, r9
    6378:	f7ff fb66 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    637c:	2800      	cmp	r0, #0
    637e:	d144      	bne.n	640a <SdioCard::begin(SdioConfig)+0x1f2>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    6380:	3c01      	subs	r4, #1
    6382:	d1f6      	bne.n	6372 <SdioCard::begin(SdioConfig)+0x15a>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6384:	7832      	ldrb	r2, [r6, #0]
    6386:	4b5a      	ldr	r3, [pc, #360]	; (64f0 <SdioCard::begin(SdioConfig)+0x2d8>)
    6388:	2a00      	cmp	r2, #0
    638a:	bf14      	ite	ne
    638c:	469a      	movne	sl, r3
    638e:	f44f 1a40 	moveq.w	sl, #3145728	; 0x300000
  int m = micros();
    6392:	f002 f90b 	bl	85ac <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    6396:	4e57      	ldr	r6, [pc, #348]	; (64f4 <SdioCard::begin(SdioConfig)+0x2dc>)
  int m = micros();
    6398:	4604      	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    639a:	f8df b18c 	ldr.w	fp, [pc, #396]	; 6528 <SdioCard::begin(SdioConfig)+0x310>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    639e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 652c <SdioCard::begin(SdioConfig)+0x314>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    63a2:	2100      	movs	r1, #0
    63a4:	4630      	mov	r0, r6
    63a6:	f7ff fb4f 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    63aa:	b950      	cbnz	r0, 63c2 <SdioCard::begin(SdioConfig)+0x1aa>
      return sdError(SD_CARD_ERROR_ACMD41);
    63ac:	2400      	movs	r4, #0
  m_errorCode = code;
    63ae:	2117      	movs	r1, #23
  m_errorLine = line;
    63b0:	4b4e      	ldr	r3, [pc, #312]	; (64ec <SdioCard::begin(SdioConfig)+0x2d4>)
    63b2:	f240 229f 	movw	r2, #671	; 0x29f
}
    63b6:	4620      	mov	r0, r4
  m_errorCode = code;
    63b8:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    63ba:	601a      	str	r2, [r3, #0]
}
    63bc:	b011      	add	sp, #68	; 0x44
    63be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    63c2:	4651      	mov	r1, sl
    63c4:	4658      	mov	r0, fp
    63c6:	f7ff fb3f 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    63ca:	2800      	cmp	r0, #0
    63cc:	d0ee      	beq.n	63ac <SdioCard::begin(SdioConfig)+0x194>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    63ce:	f002 f8ed 	bl	85ac <micros>
    63d2:	1b00      	subs	r0, r0, r4
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    63d4:	4b44      	ldr	r3, [pc, #272]	; (64e8 <SdioCard::begin(SdioConfig)+0x2d0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    63d6:	4548      	cmp	r0, r9
    63d8:	d8e8      	bhi.n	63ac <SdioCard::begin(SdioConfig)+0x194>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    63da:	691a      	ldr	r2, [r3, #16]
    63dc:	2a00      	cmp	r2, #0
    63de:	dae0      	bge.n	63a2 <SdioCard::begin(SdioConfig)+0x18a>
  m_ocr = SDHC_CMDRSP0;
    63e0:	6919      	ldr	r1, [r3, #16]
    63e2:	4a45      	ldr	r2, [pc, #276]	; (64f8 <SdioCard::begin(SdioConfig)+0x2e0>)
    63e4:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    63e6:	691b      	ldr	r3, [r3, #16]
    63e8:	005a      	lsls	r2, r3, #1
    63ea:	d501      	bpl.n	63f0 <SdioCard::begin(SdioConfig)+0x1d8>
    m_highCapacity = true;
    63ec:	2301      	movs	r3, #1
    63ee:	703b      	strb	r3, [r7, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    63f0:	2100      	movs	r1, #0
    63f2:	4842      	ldr	r0, [pc, #264]	; (64fc <SdioCard::begin(SdioConfig)+0x2e4>)
    63f4:	f7ff fb28 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    63f8:	4604      	mov	r4, r0
    63fa:	b9c0      	cbnz	r0, 642e <SdioCard::begin(SdioConfig)+0x216>
  m_errorCode = code;
    63fc:	2102      	movs	r1, #2
  m_errorLine = line;
    63fe:	4b3b      	ldr	r3, [pc, #236]	; (64ec <SdioCard::begin(SdioConfig)+0x2d4>)
    6400:	f44f 722a 	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    6404:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6406:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    6408:	e7ac      	b.n	6364 <SdioCard::begin(SdioConfig)+0x14c>
      if (SDHC_CMDRSP0 != 0X1AA) {
    640a:	4b37      	ldr	r3, [pc, #220]	; (64e8 <SdioCard::begin(SdioConfig)+0x2d0>)
    640c:	691b      	ldr	r3, [r3, #16]
    640e:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    6412:	d007      	beq.n	6424 <SdioCard::begin(SdioConfig)+0x20c>
  m_errorCode = code;
    6414:	2106      	movs	r1, #6
  m_errorLine = line;
    6416:	4b35      	ldr	r3, [pc, #212]	; (64ec <SdioCard::begin(SdioConfig)+0x2d4>)
    6418:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    641c:	2400      	movs	r4, #0
  m_errorCode = code;
    641e:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6420:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    6422:	e79f      	b.n	6364 <SdioCard::begin(SdioConfig)+0x14c>
      m_version2 = true;
    6424:	2301      	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6426:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 64f0 <SdioCard::begin(SdioConfig)+0x2d8>
      m_version2 = true;
    642a:	7033      	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    642c:	e7b1      	b.n	6392 <SdioCard::begin(SdioConfig)+0x17a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    642e:	2100      	movs	r1, #0
    6430:	4833      	ldr	r0, [pc, #204]	; (6500 <SdioCard::begin(SdioConfig)+0x2e8>)
    6432:	f7ff fb09 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    6436:	4604      	mov	r4, r0
    6438:	b930      	cbnz	r0, 6448 <SdioCard::begin(SdioConfig)+0x230>
  m_errorCode = code;
    643a:	2103      	movs	r1, #3
  m_errorLine = line;
    643c:	4b2b      	ldr	r3, [pc, #172]	; (64ec <SdioCard::begin(SdioConfig)+0x2d4>)
    643e:	f240 22ab 	movw	r2, #683	; 0x2ab
  m_errorCode = code;
    6442:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6444:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    6446:	e78d      	b.n	6364 <SdioCard::begin(SdioConfig)+0x14c>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6448:	4e27      	ldr	r6, [pc, #156]	; (64e8 <SdioCard::begin(SdioConfig)+0x2d0>)
    644a:	4b2e      	ldr	r3, [pc, #184]	; (6504 <SdioCard::begin(SdioConfig)+0x2ec>)
    644c:	6932      	ldr	r2, [r6, #16]
    644e:	4f2e      	ldr	r7, [pc, #184]	; (6508 <SdioCard::begin(SdioConfig)+0x2f0>)
    6450:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6452:	492e      	ldr	r1, [pc, #184]	; (650c <SdioCard::begin(SdioConfig)+0x2f4>)
    6454:	482e      	ldr	r0, [pc, #184]	; (6510 <SdioCard::begin(SdioConfig)+0x2f8>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6456:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6458:	f7ff fb42 	bl	5ae0 <readReg16(unsigned long, void*)>
    645c:	4604      	mov	r4, r0
    645e:	b930      	cbnz	r0, 646e <SdioCard::begin(SdioConfig)+0x256>
  m_errorCode = code;
    6460:	2107      	movs	r1, #7
  m_errorLine = line;
    6462:	4b22      	ldr	r3, [pc, #136]	; (64ec <SdioCard::begin(SdioConfig)+0x2d4>)
    6464:	f44f 722c 	mov.w	r2, #688	; 0x2b0
  m_errorCode = code;
    6468:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    646a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    646c:	e77a      	b.n	6364 <SdioCard::begin(SdioConfig)+0x14c>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    646e:	4929      	ldr	r1, [pc, #164]	; (6514 <SdioCard::begin(SdioConfig)+0x2fc>)
    6470:	4829      	ldr	r0, [pc, #164]	; (6518 <SdioCard::begin(SdioConfig)+0x300>)
    6472:	f7ff fb35 	bl	5ae0 <readReg16(unsigned long, void*)>
    6476:	4604      	mov	r4, r0
    6478:	b930      	cbnz	r0, 6488 <SdioCard::begin(SdioConfig)+0x270>
  m_errorCode = code;
    647a:	2108      	movs	r1, #8
  m_errorLine = line;
    647c:	4b1b      	ldr	r3, [pc, #108]	; (64ec <SdioCard::begin(SdioConfig)+0x2d4>)
    647e:	f240 22b3 	movw	r2, #691	; 0x2b3
  m_errorCode = code;
    6482:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6484:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    6486:	e76d      	b.n	6364 <SdioCard::begin(SdioConfig)+0x14c>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    6488:	6839      	ldr	r1, [r7, #0]
    648a:	4824      	ldr	r0, [pc, #144]	; (651c <SdioCard::begin(SdioConfig)+0x304>)
    648c:	f7ff fadc 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    6490:	4604      	mov	r4, r0
    6492:	b930      	cbnz	r0, 64a2 <SdioCard::begin(SdioConfig)+0x28a>
  m_errorCode = code;
    6494:	2105      	movs	r1, #5
  m_errorLine = line;
    6496:	4b15      	ldr	r3, [pc, #84]	; (64ec <SdioCard::begin(SdioConfig)+0x2d4>)
    6498:	f240 22b6 	movw	r2, #694	; 0x2b6
  m_errorCode = code;
    649c:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    649e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    64a0:	e760      	b.n	6364 <SdioCard::begin(SdioConfig)+0x14c>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    64a2:	6839      	ldr	r1, [r7, #0]
    64a4:	4813      	ldr	r0, [pc, #76]	; (64f4 <SdioCard::begin(SdioConfig)+0x2dc>)
    64a6:	f7ff facf 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    64aa:	2800      	cmp	r0, #0
    64ac:	d140      	bne.n	6530 <SdioCard::begin(SdioConfig)+0x318>
  m_errorCode = code;
    64ae:	2114      	movs	r1, #20
  m_errorLine = line;
    64b0:	4b0e      	ldr	r3, [pc, #56]	; (64ec <SdioCard::begin(SdioConfig)+0x2d4>)
    64b2:	f240 22ba 	movw	r2, #698	; 0x2ba
    return sdError(SD_CARD_ERROR_ACMD6);
    64b6:	2400      	movs	r4, #0
  m_errorCode = code;
    64b8:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    64ba:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    64bc:	e752      	b.n	6364 <SdioCard::begin(SdioConfig)+0x14c>
    64be:	bf00      	nop
    64c0:	400d8000 	.word	0x400d8000
    64c4:	20008ebe 	.word	0x20008ebe
    64c8:	200225f6 	.word	0x200225f6
    64cc:	200225f5 	.word	0x200225f5
    64d0:	401f8000 	.word	0x401f8000
    64d4:	01008000 	.word	0x01008000
    64d8:	117f000b 	.word	0x117f000b
    64dc:	000056e9 	.word	0x000056e9
    64e0:	20009000 	.word	0x20009000
    64e4:	e000e400 	.word	0xe000e400
    64e8:	402c0000 	.word	0x402c0000
    64ec:	2001d1c0 	.word	0x2001d1c0
    64f0:	40300000 	.word	0x40300000
    64f4:	371a0000 	.word	0x371a0000
    64f8:	2001fbf4 	.word	0x2001fbf4
    64fc:	02090000 	.word	0x02090000
    6500:	031a0000 	.word	0x031a0000
    6504:	ffff0000 	.word	0xffff0000
    6508:	2001fbf8 	.word	0x2001fbf8
    650c:	2001fbe4 	.word	0x2001fbe4
    6510:	09090000 	.word	0x09090000
    6514:	2001fbd4 	.word	0x2001fbd4
    6518:	0a090000 	.word	0x0a090000
    651c:	071b0000 	.word	0x071b0000
    6520:	200225f4 	.word	0x200225f4
    6524:	081a0000 	.word	0x081a0000
    6528:	29020000 	.word	0x29020000
    652c:	000f4240 	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    6530:	2102      	movs	r1, #2
    6532:	482e      	ldr	r0, [pc, #184]	; (65ec <SdioCard::begin(SdioConfig)+0x3d4>)
    6534:	f7ff fa88 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    6538:	4604      	mov	r4, r0
    653a:	2800      	cmp	r0, #0
    653c:	d0b7      	beq.n	64ae <SdioCard::begin(SdioConfig)+0x296>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    653e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    6540:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    6544:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    6548:	4669      	mov	r1, sp
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    654a:	f023 0306 	bic.w	r3, r3, #6
    654e:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    6550:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    6552:	f043 0302 	orr.w	r3, r3, #2
    6556:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    6558:	6472      	str	r2, [r6, #68]	; 0x44
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    655a:	f7ff fc1b 	bl	5d94 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    655e:	b118      	cbz	r0, 6568 <SdioCard::begin(SdioConfig)+0x350>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    6560:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6564:	079b      	lsls	r3, r3, #30
    6566:	d432      	bmi.n	65ce <SdioCard::begin(SdioConfig)+0x3b6>
    kHzSdClk = 25000;
    6568:	f246 10a8 	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    656c:	4d20      	ldr	r5, [pc, #128]	; (65f0 <SdioCard::begin(SdioConfig)+0x3d8>)
    656e:	2305      	movs	r3, #5
    6570:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    6574:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6578:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    657c:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6580:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    6584:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    6588:	f7ff f8d6 	bl	5738 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    658c:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    658e:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6592:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    6596:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    659a:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    659e:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    65a2:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    65a6:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    65aa:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    65ae:	f8c5 23bc 	str.w	r2, [r5, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    65b2:	f8c5 23c0 	str.w	r2, [r5, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    65b6:	f8c5 23ac 	str.w	r2, [r5, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    65ba:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
  m_initDone = true;
    65be:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    65c0:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    65c4:	f8c5 23b8 	str.w	r2, [r5, #952]	; 0x3b8
  m_initDone = true;
    65c8:	f888 3000 	strb.w	r3, [r8]
  return true;
    65cc:	e6ca      	b.n	6364 <SdioCard::begin(SdioConfig)+0x14c>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    65ce:	4669      	mov	r1, sp
    65d0:	4808      	ldr	r0, [pc, #32]	; (65f4 <SdioCard::begin(SdioConfig)+0x3dc>)
    65d2:	f7ff fbdf 	bl	5d94 <cardCMD6(unsigned long, unsigned char*)>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    65d6:	2800      	cmp	r0, #0
    65d8:	d0c6      	beq.n	6568 <SdioCard::begin(SdioConfig)+0x350>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    65da:	f89d 3010 	ldrb.w	r3, [sp, #16]
    65de:	f003 030f 	and.w	r3, r3, #15
    65e2:	2b01      	cmp	r3, #1
    65e4:	d1c0      	bne.n	6568 <SdioCard::begin(SdioConfig)+0x350>
    kHzSdClk = 50000;
    65e6:	f24c 3050 	movw	r0, #50000	; 0xc350
    65ea:	e7bf      	b.n	656c <SdioCard::begin(SdioConfig)+0x354>
    65ec:	061a0000 	.word	0x061a0000
    65f0:	401f8000 	.word	0x401f8000
    65f4:	80fffff1 	.word	0x80fffff1

000065f8 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    65f8:	4b37      	ldr	r3, [pc, #220]	; (66d8 <SdioCard::readData(unsigned char*)+0xe0>)
    65fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    65fc:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    65fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6602:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    6604:	d40d      	bmi.n	6622 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6608:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    660c:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    660e:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    6610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6612:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    6616:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    661a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    661e:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    6620:	b662      	cpsie	i
  uint32_t m = micros();
    6622:	f001 ffc3 	bl	85ac <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    6626:	4e2c      	ldr	r6, [pc, #176]	; (66d8 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6628:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 66f0 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    662c:	4605      	mov	r5, r0
  while (fcn()) {
    662e:	e004      	b.n	663a <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6630:	f001 ffbc 	bl	85ac <micros>
    6634:	1b43      	subs	r3, r0, r5
    6636:	4543      	cmp	r3, r8
    6638:	d837      	bhi.n	66aa <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    663a:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    663c:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    6640:	d0f6      	beq.n	6630 <SdioCard::readData(unsigned char*)+0x38>
    6642:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    6646:	4824      	ldr	r0, [pc, #144]	; (66d8 <SdioCard::readData(unsigned char*)+0xe0>)
    6648:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    664c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    664e:	051b      	lsls	r3, r3, #20
    6650:	d5fc      	bpl.n	664c <SdioCard::readData(unsigned char*)+0x54>
    6652:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    6656:	6a02      	ldr	r2, [r0, #32]
    6658:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    665c:	459c      	cmp	ip, r3
    665e:	d1fa      	bne.n	6656 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    6660:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    6664:	4567      	cmp	r7, ip
    6666:	d1f1      	bne.n	664c <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    6668:	f001 ffa0 	bl	85ac <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    666c:	4f1a      	ldr	r7, [pc, #104]	; (66d8 <SdioCard::readData(unsigned char*)+0xe0>)
    666e:	4d1b      	ldr	r5, [pc, #108]	; (66dc <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    6670:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6672:	f8df 807c 	ldr.w	r8, [pc, #124]	; 66f0 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    6676:	e004      	b.n	6682 <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6678:	f001 ff98 	bl	85ac <micros>
    667c:	1b83      	subs	r3, r0, r6
    667e:	4543      	cmp	r3, r8
    6680:	d81d      	bhi.n	66be <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    6682:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    6684:	402c      	ands	r4, r5
    6686:	d0f7      	beq.n	6678 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    6688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    668a:	4a15      	ldr	r2, [pc, #84]	; (66e0 <SdioCard::readData(unsigned char*)+0xe8>)
    668c:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    668e:	6813      	ldr	r3, [r2, #0]
    6690:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6692:	6813      	ldr	r3, [r2, #0]
    6694:	f013 0302 	ands.w	r3, r3, #2
    6698:	d01b      	beq.n	66d2 <SdioCard::readData(unsigned char*)+0xda>
    669a:	6812      	ldr	r2, [r2, #0]
    669c:	4b11      	ldr	r3, [pc, #68]	; (66e4 <SdioCard::readData(unsigned char*)+0xec>)
    669e:	421a      	tst	r2, r3
    66a0:	bf0c      	ite	eq
    66a2:	2001      	moveq	r0, #1
    66a4:	2000      	movne	r0, #0
}
    66a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    66aa:	490f      	ldr	r1, [pc, #60]	; (66e8 <SdioCard::readData(unsigned char*)+0xf0>)
    66ac:	251a      	movs	r5, #26
  m_errorLine = line;
    66ae:	4b0f      	ldr	r3, [pc, #60]	; (66ec <SdioCard::readData(unsigned char*)+0xf4>)
    66b0:	f240 3237 	movw	r2, #823	; 0x337
    return sdError(SD_CARD_ERROR_READ_FIFO);
    66b4:	4620      	mov	r0, r4
  m_errorCode = code;
    66b6:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    66b8:	601a      	str	r2, [r3, #0]
}
    66ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    66be:	490a      	ldr	r1, [pc, #40]	; (66e8 <SdioCard::readData(unsigned char*)+0xf0>)
    66c0:	251d      	movs	r5, #29
  m_errorLine = line;
    66c2:	4b0a      	ldr	r3, [pc, #40]	; (66ec <SdioCard::readData(unsigned char*)+0xf4>)
    66c4:	f240 3242 	movw	r2, #834	; 0x342
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    66c8:	4620      	mov	r0, r4
  m_errorCode = code;
    66ca:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    66cc:	601a      	str	r2, [r3, #0]
}
    66ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    66d2:	4618      	mov	r0, r3
}
    66d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66d8:	402c0000 	.word	0x402c0000
    66dc:	117f0002 	.word	0x117f0002
    66e0:	200200a0 	.word	0x200200a0
    66e4:	117f0000 	.word	0x117f0000
    66e8:	20008ebe 	.word	0x20008ebe
    66ec:	2001d1c0 	.word	0x2001d1c0
    66f0:	000f4240 	.word	0x000f4240

000066f4 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    66f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    66f8:	4b29      	ldr	r3, [pc, #164]	; (67a0 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    66fa:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    66fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 67c0 <SdioCard::readStart(unsigned long)+0xcc>
    6700:	4e28      	ldr	r6, [pc, #160]	; (67a4 <SdioCard::readStart(unsigned long)+0xb0>)
    6702:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    6706:	f001 ff51 	bl	85ac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    670a:	4d27      	ldr	r5, [pc, #156]	; (67a8 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    670c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    670e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 67c4 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6712:	4f26      	ldr	r7, [pc, #152]	; (67ac <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    6714:	e006      	b.n	6724 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6716:	f001 ff49 	bl	85ac <micros>
    671a:	1b00      	subs	r0, r0, r4
    671c:	42b8      	cmp	r0, r7
    671e:	d829      	bhi.n	6774 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    6720:	f003 fff6 	bl	a710 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6724:	6831      	ldr	r1, [r6, #0]
    6726:	4628      	mov	r0, r5
    6728:	f7ff f98e 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    672c:	2800      	cmp	r0, #0
    672e:	d0f2      	beq.n	6716 <SdioCard::readStart(unsigned long)+0x22>
    6730:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6734:	05db      	lsls	r3, r3, #23
    6736:	d5ee      	bpl.n	6716 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    6738:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    673a:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    673e:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6742:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    6746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    674a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    674e:	4b18      	ldr	r3, [pc, #96]	; (67b0 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    6750:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    6754:	781b      	ldrb	r3, [r3, #0]
    6756:	b1cb      	cbz	r3, 678c <SdioCard::readStart(unsigned long)+0x98>
    6758:	4649      	mov	r1, r9
    675a:	4816      	ldr	r0, [pc, #88]	; (67b4 <SdioCard::readStart(unsigned long)+0xc0>)
    675c:	f7ff f974 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    6760:	b930      	cbnz	r0, 6770 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    6762:	4915      	ldr	r1, [pc, #84]	; (67b8 <SdioCard::readStart(unsigned long)+0xc4>)
    6764:	240c      	movs	r4, #12
  m_errorLine = line;
    6766:	4b15      	ldr	r3, [pc, #84]	; (67bc <SdioCard::readStart(unsigned long)+0xc8>)
    6768:	f240 329e 	movw	r2, #926	; 0x39e
  m_errorCode = code;
    676c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    676e:	601a      	str	r2, [r3, #0]
}
    6770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    6774:	4a10      	ldr	r2, [pc, #64]	; (67b8 <SdioCard::readStart(unsigned long)+0xc4>)
    6776:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6778:	2000      	movs	r0, #0
  m_errorLine = line;
    677a:	4b10      	ldr	r3, [pc, #64]	; (67bc <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    677c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    677e:	f240 3292 	movw	r2, #914	; 0x392
      m_busyFcn = 0;
    6782:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    6786:	601a      	str	r2, [r3, #0]
}
    6788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    678c:	ea4f 2949 	mov.w	r9, r9, lsl #9
    6790:	4808      	ldr	r0, [pc, #32]	; (67b4 <SdioCard::readStart(unsigned long)+0xc0>)
    6792:	4649      	mov	r1, r9
    6794:	f7ff f958 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    6798:	2800      	cmp	r0, #0
    679a:	d1e9      	bne.n	6770 <SdioCard::readStart(unsigned long)+0x7c>
    679c:	e7e1      	b.n	6762 <SdioCard::readStart(unsigned long)+0x6e>
    679e:	bf00      	nop
    67a0:	00005bdd 	.word	0x00005bdd
    67a4:	2001fbf8 	.word	0x2001fbf8
    67a8:	0d1a0000 	.word	0x0d1a0000
    67ac:	000f4240 	.word	0x000f4240
    67b0:	200225f6 	.word	0x200225f6
    67b4:	123a0030 	.word	0x123a0030
    67b8:	20008ebe 	.word	0x20008ebe
    67bc:	2001d1c0 	.word	0x2001d1c0
    67c0:	2002009c 	.word	0x2002009c
    67c4:	402c0000 	.word	0x402c0000

000067c8 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    67c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    67cc:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    67ce:	4c1d      	ldr	r4, [pc, #116]	; (6844 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    67d0:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    67d2:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    67d4:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    67d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    67d8:	481b      	ldr	r0, [pc, #108]	; (6848 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    67da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    67de:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    67e0:	f7ff f932 	bl	5a48 <cardCommand(unsigned long, unsigned long)>
    67e4:	b940      	cbnz	r0, 67f8 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    67e6:	4919      	ldr	r1, [pc, #100]	; (684c <SdioCard::stopTransmission(bool)+0x84>)
    67e8:	2409      	movs	r4, #9
  m_errorLine = line;
    67ea:	4b19      	ldr	r3, [pc, #100]	; (6850 <SdioCard::stopTransmission(bool)+0x88>)
    67ec:	f44f 726d 	mov.w	r2, #948	; 0x3b4
  m_errorCode = code;
    67f0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    67f2:	601a      	str	r2, [r3, #0]
}
    67f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    67f8:	2d00      	cmp	r5, #0
    67fa:	d0fb      	beq.n	67f4 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    67fc:	4b15      	ldr	r3, [pc, #84]	; (6854 <SdioCard::stopTransmission(bool)+0x8c>)
    67fe:	4e16      	ldr	r6, [pc, #88]	; (6858 <SdioCard::stopTransmission(bool)+0x90>)
    6800:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    6802:	f001 fed3 	bl	85ac <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    6806:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    6808:	4607      	mov	r7, r0
  while (fcn()) {
    680a:	01da      	lsls	r2, r3, #7
    680c:	d416      	bmi.n	683c <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    680e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 685c <SdioCard::stopTransmission(bool)+0x94>
    6812:	e004      	b.n	681e <SdioCard::stopTransmission(bool)+0x56>
    yield();
    6814:	f003 ff7c 	bl	a710 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    6818:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    681a:	01db      	lsls	r3, r3, #7
    681c:	d40e      	bmi.n	683c <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    681e:	f001 fec5 	bl	85ac <micros>
    6822:	1bc0      	subs	r0, r0, r7
    6824:	4540      	cmp	r0, r8
    6826:	d9f5      	bls.n	6814 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    6828:	4a08      	ldr	r2, [pc, #32]	; (684c <SdioCard::stopTransmission(bool)+0x84>)
    682a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    682c:	2000      	movs	r0, #0
  m_errorLine = line;
    682e:	4b08      	ldr	r3, [pc, #32]	; (6850 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    6830:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6832:	f44f 726e 	mov.w	r2, #952	; 0x3b8
      m_busyFcn = 0;
    6836:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    6838:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    683a:	e7db      	b.n	67f4 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    683c:	2300      	movs	r3, #0
  return true;
    683e:	4628      	mov	r0, r5
  m_busyFcn = 0;
    6840:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    6842:	e7d7      	b.n	67f4 <SdioCard::stopTransmission(bool)+0x2c>
    6844:	402c0000 	.word	0x402c0000
    6848:	0cdb0000 	.word	0x0cdb0000
    684c:	20008ebe 	.word	0x20008ebe
    6850:	2001d1c0 	.word	0x2001d1c0
    6854:	00005719 	.word	0x00005719
    6858:	2002009c 	.word	0x2002009c
    685c:	000f4240 	.word	0x000f4240

00006860 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    6860:	4b0a      	ldr	r3, [pc, #40]	; (688c <SdioCard::syncDevice()+0x2c>)
    6862:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    6864:	b510      	push	{r4, lr}
    6866:	4604      	mov	r4, r0
  if (!m_transferActive) {
    6868:	b91b      	cbnz	r3, 6872 <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    686a:	7a63      	ldrb	r3, [r4, #9]
    686c:	b943      	cbnz	r3, 6880 <SdioCard::syncDevice()+0x20>
  return true;
    686e:	2001      	movs	r0, #1
}
    6870:	bd10      	pop	{r4, pc}
    6872:	f7ff f84b 	bl	590c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6876:	2800      	cmp	r0, #0
    6878:	d0fa      	beq.n	6870 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    687a:	7a63      	ldrb	r3, [r4, #9]
    687c:	2b00      	cmp	r3, #0
    687e:	d0f6      	beq.n	686e <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    6880:	4620      	mov	r0, r4
    6882:	2101      	movs	r1, #1
}
    6884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    6888:	f7ff bf9e 	b.w	67c8 <SdioCard::stopTransmission(bool)>
    688c:	200225f7 	.word	0x200225f7

00006890 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6894:	4604      	mov	r4, r0
    6896:	7a00      	ldrb	r0, [r0, #8]
    6898:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    689c:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    689e:	f010 0501 	ands.w	r5, r0, #1
    68a2:	d013      	beq.n	68cc <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    68a4:	0793      	lsls	r3, r2, #30
    68a6:	d03c      	beq.n	6922 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    68a8:	2301      	movs	r3, #1
    68aa:	4838      	ldr	r0, [pc, #224]	; (698c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    68ac:	466a      	mov	r2, sp
    68ae:	f7ff fb7d 	bl	5fac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    68b2:	2800      	cmp	r0, #0
    68b4:	d03a      	beq.n	692c <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    68b6:	f44f 7200 	mov.w	r2, #512	; 0x200
    68ba:	4669      	mov	r1, sp
    68bc:	4630      	mov	r0, r6
    68be:	f001 ff09 	bl	86d4 <memcpy>
}
    68c2:	4628      	mov	r0, r5
    68c4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    68c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    68cc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 699c <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    68d0:	460f      	mov	r7, r1
    68d2:	f898 3000 	ldrb.w	r3, [r8]
    68d6:	2b00      	cmp	r3, #0
    68d8:	d135      	bne.n	6946 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    68da:	7a63      	ldrb	r3, [r4, #9]
    68dc:	2b01      	cmp	r3, #1
    68de:	d039      	beq.n	6954 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    68e0:	6822      	ldr	r2, [r4, #0]
    68e2:	492b      	ldr	r1, [pc, #172]	; (6990 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    68e4:	6a12      	ldr	r2, [r2, #32]
    68e6:	428a      	cmp	r2, r1
    68e8:	d14a      	bne.n	6980 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    68ea:	f898 2000 	ldrb.w	r2, [r8]
    68ee:	2a00      	cmp	r2, #0
    68f0:	d134      	bne.n	695c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    68f2:	2b00      	cmp	r3, #0
    68f4:	d139      	bne.n	696a <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    68f6:	4639      	mov	r1, r7
    68f8:	4620      	mov	r0, r4
    68fa:	f7ff fefb 	bl	66f4 <SdioCard::readStart(unsigned long)>
    68fe:	b1e8      	cbz	r0, 693c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    6900:	2301      	movs	r3, #1
      m_curSector = sector;
    6902:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    6904:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    6906:	4631      	mov	r1, r6
    6908:	4620      	mov	r0, r4
    690a:	f7ff fe75 	bl	65f8 <SdioCard::readData(unsigned char*)>
    690e:	b1a8      	cbz	r0, 693c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    6910:	6863      	ldr	r3, [r4, #4]
  return true;
    6912:	4605      	mov	r5, r0
    m_curSector++;
    6914:	3301      	adds	r3, #1
}
    6916:	4628      	mov	r0, r5
    m_curSector++;
    6918:	6063      	str	r3, [r4, #4]
}
    691a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    691e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6922:	2301      	movs	r3, #1
    6924:	4819      	ldr	r0, [pc, #100]	; (698c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6926:	f7ff fb41 	bl	5fac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    692a:	b938      	cbnz	r0, 693c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    692c:	4919      	ldr	r1, [pc, #100]	; (6994 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    692e:	200b      	movs	r0, #11
  m_errorLine = line;
    6930:	4b19      	ldr	r3, [pc, #100]	; (6998 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    6932:	f240 3255 	movw	r2, #853	; 0x355
      return sdError(SD_CARD_ERROR_CMD17);
    6936:	2500      	movs	r5, #0
  m_errorCode = code;
    6938:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    693a:	601a      	str	r2, [r3, #0]
}
    693c:	4628      	mov	r0, r5
    693e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6946:	f7fe ffe1 	bl	590c <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    694a:	2800      	cmp	r0, #0
    694c:	d0f6      	beq.n	693c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    694e:	7a63      	ldrb	r3, [r4, #9]
    6950:	2b01      	cmp	r3, #1
    6952:	d1c5      	bne.n	68e0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6954:	6862      	ldr	r2, [r4, #4]
    6956:	42ba      	cmp	r2, r7
    6958:	d1c2      	bne.n	68e0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    695a:	e7d4      	b.n	6906 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    695c:	f7fe ffd6 	bl	590c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6960:	2800      	cmp	r0, #0
    6962:	d0eb      	beq.n	693c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    6964:	7a63      	ldrb	r3, [r4, #9]
    6966:	2b00      	cmp	r3, #0
    6968:	d0c5      	beq.n	68f6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    696a:	2101      	movs	r1, #1
    696c:	4620      	mov	r0, r4
    696e:	f7ff ff2b 	bl	67c8 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6972:	2800      	cmp	r0, #0
    6974:	d1bf      	bne.n	68f6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    6976:	4628      	mov	r0, r5
    6978:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    697c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    6980:	4620      	mov	r0, r4
    6982:	4790      	blx	r2
    6984:	2800      	cmp	r0, #0
    6986:	d0f6      	beq.n	6976 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    6988:	e7b5      	b.n	68f6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    698a:	bf00      	nop
    698c:	113a0011 	.word	0x113a0011
    6990:	00006861 	.word	0x00006861
    6994:	20008ebe 	.word	0x20008ebe
    6998:	2001d1c0 	.word	0x2001d1c0
    699c:	200225f7 	.word	0x200225f7

000069a0 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    69a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69a4:	7a04      	ldrb	r4, [r0, #8]
    69a6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    69aa:	460f      	mov	r7, r1
    69ac:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    69ae:	f014 0401 	ands.w	r4, r4, #1
    69b2:	d01d      	beq.n	69f0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    69b4:	f012 0f03 	tst.w	r2, #3
    69b8:	d006      	beq.n	69c8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    69ba:	4668      	mov	r0, sp
    69bc:	4611      	mov	r1, r2
    69be:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    69c2:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    69c4:	f001 fe86 	bl	86d4 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    69c8:	2301      	movs	r3, #1
    69ca:	4642      	mov	r2, r8
    69cc:	4639      	mov	r1, r7
    69ce:	482c      	ldr	r0, [pc, #176]	; (6a80 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    69d0:	f7ff faec 	bl	5fac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    69d4:	4604      	mov	r4, r0
    69d6:	b930      	cbnz	r0, 69e6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    69d8:	492a      	ldr	r1, [pc, #168]	; (6a84 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    69da:	200d      	movs	r0, #13
  m_errorLine = line;
    69dc:	4b2a      	ldr	r3, [pc, #168]	; (6a88 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    69de:	f240 32f2 	movw	r2, #1010	; 0x3f2
  m_errorCode = code;
    69e2:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    69e4:	601a      	str	r2, [r3, #0]
}
    69e6:	4620      	mov	r0, r4
    69e8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    69ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    69f0:	4d26      	ldr	r5, [pc, #152]	; (6a8c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    69f2:	4606      	mov	r6, r0
    69f4:	782b      	ldrb	r3, [r5, #0]
    69f6:	bb2b      	cbnz	r3, 6a44 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    69f8:	7a73      	ldrb	r3, [r6, #9]
    69fa:	2b02      	cmp	r3, #2
    69fc:	d029      	beq.n	6a52 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    69fe:	6832      	ldr	r2, [r6, #0]
    6a00:	4923      	ldr	r1, [pc, #140]	; (6a90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    6a02:	6a12      	ldr	r2, [r2, #32]
    6a04:	428a      	cmp	r2, r1
    6a06:	d136      	bne.n	6a76 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    6a08:	782a      	ldrb	r2, [r5, #0]
    6a0a:	bb32      	cbnz	r2, 6a5a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    6a0c:	2b00      	cmp	r3, #0
    6a0e:	d12b      	bne.n	6a68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    6a10:	6833      	ldr	r3, [r6, #0]
    6a12:	4639      	mov	r1, r7
    6a14:	4630      	mov	r0, r6
    6a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6a18:	4798      	blx	r3
    6a1a:	2800      	cmp	r0, #0
    6a1c:	d0e3      	beq.n	69e6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    6a1e:	2302      	movs	r3, #2
      m_curSector = sector;
    6a20:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    6a22:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    6a24:	6833      	ldr	r3, [r6, #0]
    6a26:	4641      	mov	r1, r8
    6a28:	4630      	mov	r0, r6
    6a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    6a2c:	4798      	blx	r3
    6a2e:	2800      	cmp	r0, #0
    6a30:	d0d9      	beq.n	69e6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    6a32:	6873      	ldr	r3, [r6, #4]
  return true;
    6a34:	4604      	mov	r4, r0
    m_curSector++;
    6a36:	3301      	adds	r3, #1
}
    6a38:	4620      	mov	r0, r4
    m_curSector++;
    6a3a:	6073      	str	r3, [r6, #4]
}
    6a3c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a44:	f7fe ff62 	bl	590c <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6a48:	2800      	cmp	r0, #0
    6a4a:	d0cc      	beq.n	69e6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6a4c:	7a73      	ldrb	r3, [r6, #9]
    6a4e:	2b02      	cmp	r3, #2
    6a50:	d1d5      	bne.n	69fe <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6a52:	6872      	ldr	r2, [r6, #4]
    6a54:	42ba      	cmp	r2, r7
    6a56:	d1d2      	bne.n	69fe <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6a58:	e7e4      	b.n	6a24 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    6a5a:	f7fe ff57 	bl	590c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6a5e:	2800      	cmp	r0, #0
    6a60:	d0c1      	beq.n	69e6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    6a62:	7a73      	ldrb	r3, [r6, #9]
    6a64:	2b00      	cmp	r3, #0
    6a66:	d0d3      	beq.n	6a10 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    6a68:	2101      	movs	r1, #1
    6a6a:	4630      	mov	r0, r6
    6a6c:	f7ff feac 	bl	67c8 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6a70:	2800      	cmp	r0, #0
    6a72:	d0b8      	beq.n	69e6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6a74:	e7cc      	b.n	6a10 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6a76:	4630      	mov	r0, r6
    6a78:	4790      	blx	r2
    6a7a:	2800      	cmp	r0, #0
    6a7c:	d0b3      	beq.n	69e6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6a7e:	e7c7      	b.n	6a10 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6a80:	183a0001 	.word	0x183a0001
    6a84:	20008ebe 	.word	0x20008ebe
    6a88:	2001d1c0 	.word	0x2001d1c0
    6a8c:	200225f7 	.word	0x200225f7
    6a90:	00006861 	.word	0x00006861

00006a94 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    6a94:	f001 bdb4 	b.w	8600 <digitalWrite>

00006a98 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    6a98:	b430      	push	{r4, r5}
    6a9a:	b082      	sub	sp, #8
    6a9c:	460c      	mov	r4, r1
    6a9e:	ab02      	add	r3, sp, #8
    6aa0:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    6aa4:	7cc3      	ldrb	r3, [r0, #19]
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d030      	beq.n	6b0c <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    6aaa:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6aac:	7cc3      	ldrb	r3, [r0, #19]
    6aae:	07da      	lsls	r2, r3, #31
    6ab0:	d508      	bpl.n	6ac4 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    6ab2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6ab6:	6945      	ldr	r5, [r0, #20]
    6ab8:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    6abc:	402a      	ands	r2, r5
    6abe:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    6ac0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    6ac4:	079d      	lsls	r5, r3, #30
    6ac6:	d508      	bpl.n	6ada <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6ac8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6acc:	6985      	ldr	r5, [r0, #24]
    6ace:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    6ad2:	402a      	ands	r2, r5
    6ad4:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    6ad6:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    6ada:	0759      	lsls	r1, r3, #29
    6adc:	d508      	bpl.n	6af0 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    6ade:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6ae2:	69c5      	ldr	r5, [r0, #28]
    6ae4:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    6ae8:	402a      	ands	r2, r5
    6aea:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    6aec:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    6af0:	071a      	lsls	r2, r3, #28
    6af2:	d508      	bpl.n	6b06 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    6af4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6af8:	6a05      	ldr	r5, [r0, #32]
    6afa:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    6afe:	402a      	ands	r2, r5
    6b00:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    6b02:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    6b06:	06db      	lsls	r3, r3, #27
    6b08:	d42f      	bmi.n	6b6a <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    6b0a:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    6b0c:	6883      	ldr	r3, [r0, #8]
    6b0e:	429c      	cmp	r4, r3
    6b10:	d035      	beq.n	6b7e <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    6b12:	4b22      	ldr	r3, [pc, #136]	; (6b9c <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    6b14:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    6b16:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    6b18:	4a21      	ldr	r2, [pc, #132]	; (6ba0 <SPIClass::beginTransaction(SPISettings)+0x108>)
    6b1a:	f3c3 1101 	ubfx	r1, r3, #4, #2
    6b1e:	f3c3 6382 	ubfx	r3, r3, #26, #3
    6b22:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    6b26:	3301      	adds	r3, #1
    6b28:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    6b2c:	b1cc      	cbz	r4, 6b62 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    6b2e:	4294      	cmp	r4, r2
    6b30:	d827      	bhi.n	6b82 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    6b32:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    6b36:	fbb2 f2f3 	udiv	r2, r2, r3
    6b3a:	4294      	cmp	r4, r2
    6b3c:	d32c      	bcc.n	6b98 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    6b3e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    6b42:	d320      	bcc.n	6b86 <SPIClass::beginTransaction(SPISettings)+0xee>
    6b44:	4c17      	ldr	r4, [pc, #92]	; (6ba4 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6b46:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6b48:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6b4a:	2203      	movs	r2, #3
		port().CR = 0;
    6b4c:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    6b4e:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    6b50:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6b52:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    6b54:	2201      	movs	r2, #1
		port().CCR = _ccr;
    6b56:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    6b58:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    6b5a:	611a      	str	r2, [r3, #16]
	}
    6b5c:	b002      	add	sp, #8
    6b5e:	bc30      	pop	{r4, r5}
    6b60:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    6b62:	4299      	cmp	r1, r3
    6b64:	d3ef      	bcc.n	6b46 <SPIClass::beginTransaction(SPISettings)+0xae>
    6b66:	1c53      	adds	r3, r2, #1
    6b68:	e7e9      	b.n	6b3e <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    6b6a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    6b6e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    6b70:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    6b74:	400b      	ands	r3, r1
    6b76:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    6b78:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    6b7c:	e7c5      	b.n	6b0a <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    6b7e:	68c4      	ldr	r4, [r0, #12]
    6b80:	e7e2      	b.n	6b48 <SPIClass::beginTransaction(SPISettings)+0xb0>
    6b82:	2400      	movs	r4, #0
    6b84:	e7df      	b.n	6b46 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    6b86:	2b02      	cmp	r3, #2
    6b88:	d9fb      	bls.n	6b82 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    6b8a:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6b8c:	085a      	lsrs	r2, r3, #1
    6b8e:	0214      	lsls	r4, r2, #8
    6b90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    6b94:	431c      	orrs	r4, r3
    6b96:	e7d6      	b.n	6b46 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    6b98:	461a      	mov	r2, r3
    6b9a:	e7e4      	b.n	6b66 <SPIClass::beginTransaction(SPISettings)+0xce>
    6b9c:	400fc000 	.word	0x400fc000
    6ba0:	20000b2c 	.word	0x20000b2c
    6ba4:	007f7fff 	.word	0x007f7fff

00006ba8 <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() {
    6ba8:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    6baa:	4603      	mov	r3, r0
    6bac:	f853 0b04 	ldr.w	r0, [r3], #4
    6bb0:	e893 0006 	ldmia.w	r3, {r1, r2}
    6bb4:	f7ff ff70 	bl	6a98 <SPIClass::beginTransaction(SPISettings)>
}
    6bb8:	bd08      	pop	{r3, pc}
    6bba:	bf00      	nop

00006bbc <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    6bbc:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    6bbe:	7cd3      	ldrb	r3, [r2, #19]
    6bc0:	b313      	cbz	r3, 6c08 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    6bc2:	07d8      	lsls	r0, r3, #31
    6bc4:	d504      	bpl.n	6bd0 <SdSpiArduinoDriver::deactivate()+0x14>
    6bc6:	6a90      	ldr	r0, [r2, #40]	; 0x28
    6bc8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6bcc:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    6bd0:	0799      	lsls	r1, r3, #30
    6bd2:	d504      	bpl.n	6bde <SdSpiArduinoDriver::deactivate()+0x22>
    6bd4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    6bd6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6bda:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    6bde:	0758      	lsls	r0, r3, #29
    6be0:	d504      	bpl.n	6bec <SdSpiArduinoDriver::deactivate()+0x30>
    6be2:	6b10      	ldr	r0, [r2, #48]	; 0x30
    6be4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6be8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    6bec:	0719      	lsls	r1, r3, #28
    6bee:	d504      	bpl.n	6bfa <SdSpiArduinoDriver::deactivate()+0x3e>
    6bf0:	6b50      	ldr	r0, [r2, #52]	; 0x34
    6bf2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6bf6:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    6bfa:	06db      	lsls	r3, r3, #27
    6bfc:	d504      	bpl.n	6c08 <SdSpiArduinoDriver::deactivate()+0x4c>
    6bfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
    6c00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6c04:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    6c08:	4770      	bx	lr
    6c0a:	bf00      	nop

00006c0c <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    6c0c:	6800      	ldr	r0, [r0, #0]
    6c0e:	f000 baa5 	b.w	715c <SPIClass::end()>
    6c12:	bf00      	nop

00006c14 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6c14:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    6c16:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6c18:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    6c1a:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6c1c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6c1e:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6c22:	d0fb      	beq.n	6c1c <SdSpiArduinoDriver::receive()+0x8>
    6c24:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    6c26:	b2c0      	uxtb	r0, r0
    6c28:	4770      	bx	lr
    6c2a:	bf00      	nop

00006c2c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    6c2c:	b530      	push	{r4, r5, lr}
    6c2e:	460c      	mov	r4, r1
    6c30:	b083      	sub	sp, #12
    6c32:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    6c34:	21ff      	movs	r1, #255	; 0xff
    6c36:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    6c38:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    6c3a:	f005 ffbf 	bl	cbbc <memset>
		transfer(buf, buf, count);
    6c3e:	6828      	ldr	r0, [r5, #0]
    6c40:	9b01      	ldr	r3, [sp, #4]
    6c42:	4622      	mov	r2, r4
    6c44:	4621      	mov	r1, r4
    6c46:	f000 fa85 	bl	7154 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    6c4a:	2000      	movs	r0, #0
    6c4c:	b003      	add	sp, #12
    6c4e:	bd30      	pop	{r4, r5, pc}

00006c50 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6c50:	6803      	ldr	r3, [r0, #0]
    6c52:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    6c54:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6c56:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6c58:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6c5c:	d0fb      	beq.n	6c56 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    6c5e:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    6c60:	4770      	bx	lr
    6c62:	bf00      	nop

00006c64 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    6c64:	1e53      	subs	r3, r2, #1
    6c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    6c6a:	b530      	push	{r4, r5, lr}
    6c6c:	4614      	mov	r4, r2
    6c6e:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    6c72:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    6c74:	d311      	bcc.n	6c9a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    6c76:	b16a      	cbz	r2, 6c94 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6c78:	6803      	ldr	r3, [r0, #0]
    6c7a:	1e48      	subs	r0, r1, #1
    6c7c:	6819      	ldr	r1, [r3, #0]
    6c7e:	1882      	adds	r2, r0, r2
		port().TDR = data;
    6c80:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    6c84:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6c86:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6c88:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6c8c:	d0fb      	beq.n	6c86 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    6c8e:	4290      	cmp	r0, r2
    6c90:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    6c92:	d1f5      	bne.n	6c80 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    6c94:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6c98:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    6c9a:	4668      	mov	r0, sp
    6c9c:	f001 fd1a 	bl	86d4 <memcpy>
		transfer(buf, buf, count);
    6ca0:	466a      	mov	r2, sp
    6ca2:	4623      	mov	r3, r4
    6ca4:	6828      	ldr	r0, [r5, #0]
    6ca6:	4611      	mov	r1, r2
    6ca8:	f000 fa54 	bl	7154 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    6cac:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6cb0:	bd30      	pop	{r4, r5, pc}
    6cb2:	bf00      	nop

00006cb4 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    6cb4:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    6cb6:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    6cb8:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    6cba:	07dc      	lsls	r4, r3, #31
    6cbc:	d51d      	bpl.n	6cfa <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    6cbe:	4604      	mov	r4, r0
    6cc0:	6840      	ldr	r0, [r0, #4]
    6cc2:	f104 0210 	add.w	r2, r4, #16
    6cc6:	6803      	ldr	r3, [r0, #0]
    6cc8:	68e1      	ldr	r1, [r4, #12]
    6cca:	9201      	str	r2, [sp, #4]
    6ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6cce:	4798      	blx	r3
    6cd0:	9a01      	ldr	r2, [sp, #4]
    6cd2:	4605      	mov	r5, r0
    6cd4:	b1a8      	cbz	r0, 6d02 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6cd6:	7823      	ldrb	r3, [r4, #0]
    6cd8:	0799      	lsls	r1, r3, #30
    6cda:	d508      	bpl.n	6cee <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    6cdc:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    6cde:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    6ce2:	4419      	add	r1, r3
    6ce4:	6803      	ldr	r3, [r0, #0]
    6ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6ce8:	4798      	blx	r3
    6cea:	b150      	cbz	r0, 6d02 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6cec:	7823      	ldrb	r3, [r4, #0]
    6cee:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    6cf2:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    6cf4:	7023      	strb	r3, [r4, #0]
}
    6cf6:	b003      	add	sp, #12
    6cf8:	bd30      	pop	{r4, r5, pc}
  return true;
    6cfa:	2501      	movs	r5, #1
}
    6cfc:	4628      	mov	r0, r5
    6cfe:	b003      	add	sp, #12
    6d00:	bd30      	pop	{r4, r5, pc}
  return false;
    6d02:	2500      	movs	r5, #0
}
    6d04:	4628      	mov	r0, r5
    6d06:	b003      	add	sp, #12
    6d08:	bd30      	pop	{r4, r5, pc}
    6d0a:	bf00      	nop

00006d0c <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    6d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    6d0e:	6843      	ldr	r3, [r0, #4]
    6d10:	b30b      	cbz	r3, 6d56 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    6d12:	68c3      	ldr	r3, [r0, #12]
    6d14:	4604      	mov	r4, r0
    6d16:	460f      	mov	r7, r1
    6d18:	4615      	mov	r5, r2
    6d1a:	428b      	cmp	r3, r1
    6d1c:	d106      	bne.n	6d2c <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    6d1e:	f810 3b10 	ldrb.w	r3, [r0], #16
    6d22:	f005 0503 	and.w	r5, r5, #3
    6d26:	432b      	orrs	r3, r5
    6d28:	7023      	strb	r3, [r4, #0]
}
    6d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    6d2c:	f7ff ffc2 	bl	6cb4 <FsCache::sync()>
    6d30:	b188      	cbz	r0, 6d56 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    6d32:	076b      	lsls	r3, r5, #29
    6d34:	d505      	bpl.n	6d42 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    6d36:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    6d3a:	4630      	mov	r0, r6
    m_sector = sector;
    6d3c:	2300      	movs	r3, #0
    6d3e:	60e7      	str	r7, [r4, #12]
    6d40:	e7ef      	b.n	6d22 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    6d42:	6860      	ldr	r0, [r4, #4]
    6d44:	f104 0610 	add.w	r6, r4, #16
    6d48:	4639      	mov	r1, r7
    6d4a:	6803      	ldr	r3, [r0, #0]
    6d4c:	4632      	mov	r2, r6
    6d4e:	691b      	ldr	r3, [r3, #16]
    6d50:	4798      	blx	r3
    6d52:	2800      	cmp	r0, #0
    6d54:	d1f1      	bne.n	6d3a <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    6d56:	2000      	movs	r0, #0
}
    6d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d5a:	bf00      	nop

00006d5c <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    6d5c:	b510      	push	{r4, lr}
    6d5e:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    6d60:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    6d62:	b082      	sub	sp, #8
  if (ls) {
    6d64:	b118      	cbz	r0, 6d6e <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    6d66:	2300      	movs	r3, #0
    6d68:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    6d6a:	b002      	add	sp, #8
    6d6c:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    6d6e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    6d72:	428b      	cmp	r3, r1
    6d74:	d2f9      	bcs.n	6d6a <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    6d76:	aa01      	add	r2, sp, #4
    6d78:	4618      	mov	r0, r3
    6d7a:	f000 f815 	bl	6da8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    6d7e:	b180      	cbz	r0, 6da2 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    6d80:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    6d82:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    6d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6d88:	d201      	bcs.n	6d8e <FsName::get16()+0x32>
      rtn = cp;
    6d8a:	b298      	uxth	r0, r3
    6d8c:	e7ed      	b.n	6d6a <FsName::get16()+0xe>
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6d8e:	0a98      	lsrs	r0, r3, #10
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
    6d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6d94:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    6d98:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6d9c:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    6d9e:	81a3      	strh	r3, [r4, #12]
    6da0:	e7e3      	b.n	6d6a <FsName::get16()+0xe>
  return 0XFFFF;
    6da2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6da6:	e7e0      	b.n	6d6a <FsName::get16()+0xe>

00006da8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
    6da8:	4288      	cmp	r0, r1
    6daa:	d23d      	bcs.n	6e28 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    6dac:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    6dae:	b410      	push	{r4}
      return nullptr;
    }
    uint8_t ch = str[0];
    if ((ch & 0X80) == 0) {
    6db0:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    6db4:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    6db6:	2800      	cmp	r0, #0
    6db8:	da2d      	bge.n	6e16 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      *rtn = ch;
      return str + 1;
    }
    if ((ch & 0XE0) == 0XC0) {
    6dba:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    6dbe:	28c0      	cmp	r0, #192	; 0xc0
    6dc0:	d034      	beq.n	6e2c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
      cp = ch & 0X1F;
      n = 2;
    } else if ((ch & 0XF0) == 0XE0) {
    6dc2:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    6dc6:	28e0      	cmp	r0, #224	; 0xe0
    6dc8:	d034      	beq.n	6e34 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
      cp = ch & 0X0F;
      n = 3;
    } else if ((ch & 0XF8) == 0XF0) {
    6dca:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    6dce:	28f0      	cmp	r0, #240	; 0xf0
    6dd0:	d126      	bne.n	6e20 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    6dd2:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    6dd6:	2004      	movs	r0, #4
    } else {
      return nullptr;
    }
    if ((str + n) > end) {
    6dd8:	4418      	add	r0, r3
    6dda:	4288      	cmp	r0, r1
    6ddc:	d820      	bhi.n	6e20 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    6dde:	3301      	adds	r3, #1
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
      ch = str[i];
    6de0:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    6de4:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
        return nullptr;
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    6de8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    6dec:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    6df0:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    6df4:	d114      	bne.n	6e20 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    6df6:	4283      	cmp	r3, r0
    6df8:	d1f2      	bne.n	6de0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    }
    // Don't allow over long as ASCII.
    if (cp < 0X80 || !isValidCp(cp)) {
    6dfa:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    6dfe:	4b0f      	ldr	r3, [pc, #60]	; (6e3c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    6e00:	4299      	cmp	r1, r3
    6e02:	d80d      	bhi.n	6e20 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    6e04:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    6e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6e0c:	d308      	bcc.n	6e20 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      return nullptr;
    }
    *rtn = cp;
    6e0e:	6014      	str	r4, [r2, #0]
    return str + n;
  }
    6e10:	f85d 4b04 	ldr.w	r4, [sp], #4
    6e14:	4770      	bx	lr
      return str + 1;
    6e16:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    6e18:	6014      	str	r4, [r2, #0]
  }
    6e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
    6e1e:	4770      	bx	lr
      return nullptr;
    6e20:	2000      	movs	r0, #0
  }
    6e22:	f85d 4b04 	ldr.w	r4, [sp], #4
    6e26:	4770      	bx	lr
      return nullptr;
    6e28:	2000      	movs	r0, #0
  }
    6e2a:	4770      	bx	lr
      cp = ch & 0X1F;
    6e2c:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    6e30:	2002      	movs	r0, #2
    6e32:	e7d1      	b.n	6dd8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    6e34:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    6e38:	2003      	movs	r0, #3
    6e3a:	e7cd      	b.n	6dd8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    6e3c:	0010ff7f 	.word	0x0010ff7f

00006e40 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    6e40:	287e      	cmp	r0, #126	; 0x7e
    6e42:	d93e      	bls.n	6ec2 <toUpcase(unsigned short)+0x82>
  size_t right = size;
    6e44:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    6e48:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    6e4a:	b430      	push	{r4, r5}
    6e4c:	4c28      	ldr	r4, [pc, #160]	; (6ef0 <toUpcase(unsigned short)+0xb0>)
    6e4e:	e004      	b.n	6e5a <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    6e50:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    6e54:	4282      	cmp	r2, r0
    6e56:	d820      	bhi.n	6e9a <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    6e58:	460b      	mov	r3, r1
  while (right - left > 1) {
    6e5a:	ebac 0203 	sub.w	r2, ip, r3
    6e5e:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    6e60:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    6e64:	d8f4      	bhi.n	6e50 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    6e66:	b29b      	uxth	r3, r3
    6e68:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    6e6c:	4290      	cmp	r0, r2
    6e6e:	d216      	bcs.n	6e9e <toUpcase(unsigned short)+0x5e>
    6e70:	244b      	movs	r4, #75	; 0x4b
    6e72:	2300      	movs	r3, #0
    6e74:	4d1f      	ldr	r5, [pc, #124]	; (6ef4 <toUpcase(unsigned short)+0xb4>)
    6e76:	e004      	b.n	6e82 <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    6e78:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    6e7c:	4282      	cmp	r2, r0
    6e7e:	d81e      	bhi.n	6ebe <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    6e80:	460b      	mov	r3, r1
  while (right - left > 1) {
    6e82:	1ae2      	subs	r2, r4, r3
    6e84:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    6e86:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    6e8a:	d8f5      	bhi.n	6e78 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    6e8c:	b29b      	uxth	r3, r3
    6e8e:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    6e92:	4282      	cmp	r2, r0
    6e94:	d01f      	beq.n	6ed6 <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    6e96:	bc30      	pop	{r4, r5}
    6e98:	4770      	bx	lr
    mid = left + (right - left)/2;
    6e9a:	468c      	mov	ip, r1
    6e9c:	e7dd      	b.n	6e5a <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    6e9e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    6ea2:	1a82      	subs	r2, r0, r2
    6ea4:	78e3      	ldrb	r3, [r4, #3]
    6ea6:	429a      	cmp	r2, r3
    6ea8:	dae2      	bge.n	6e70 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    6eaa:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    6eae:	2b01      	cmp	r3, #1
    6eb0:	d016      	beq.n	6ee0 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    6eb2:	b1d3      	cbz	r3, 6eea <toUpcase(unsigned short)+0xaa>
    6eb4:	b29b      	uxth	r3, r3
    6eb6:	4403      	add	r3, r0
}
    6eb8:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    6eba:	b298      	uxth	r0, r3
}
    6ebc:	4770      	bx	lr
    mid = left + (right - left)/2;
    6ebe:	460c      	mov	r4, r1
    6ec0:	e7df      	b.n	6e82 <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    6ec2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    6ec6:	2b19      	cmp	r3, #25
    6ec8:	bf8c      	ite	hi
    6eca:	2300      	movhi	r3, #0
    6ecc:	2301      	movls	r3, #1
    6ece:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    6ed2:	b298      	uxth	r0, r3
}
    6ed4:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    6ed6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    6eda:	8868      	ldrh	r0, [r5, #2]
}
    6edc:	bc30      	pop	{r4, r5}
    6ede:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    6ee0:	f002 0201 	and.w	r2, r2, #1
    6ee4:	1a83      	subs	r3, r0, r2
    6ee6:	b298      	uxth	r0, r3
    6ee8:	e7d5      	b.n	6e96 <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    6eea:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    6eee:	e7e2      	b.n	6eb6 <toUpcase(unsigned short)+0x76>
    6ef0:	20000738 	.word	0x20000738
    6ef4:	20000600 	.word	0x20000600

00006ef8 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    6ef8:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    6efc:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    6efe:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    6f02:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6f04:	d101      	bne.n	6f0a <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    6f06:	6883      	ldr	r3, [r0, #8]
    6f08:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    6f0a:	f000 bec5 	b.w	7c98 <EventResponder::triggerEventNotImmediate()>
    6f0e:	bf00      	nop

00006f10 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    6f10:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6f12:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    6f14:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    6f18:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    6f1a:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    6f1c:	b1a3      	cbz	r3, 6f48 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    6f1e:	b321      	cbz	r1, 6f6a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    6f20:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    6f24:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    6f26:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    6f28:	6f25      	ldr	r5, [r4, #112]	; 0x70
    6f2a:	07af      	lsls	r7, r5, #30
    6f2c:	d407      	bmi.n	6f3e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    6f2e:	4615      	mov	r5, r2
				count_read--;
    6f30:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    6f32:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    6f34:	b11a      	cbz	r2, 6f3e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    6f36:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    6f3a:	462a      	mov	r2, r5
    6f3c:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    6f3e:	6965      	ldr	r5, [r4, #20]
    6f40:	07ed      	lsls	r5, r5, #31
    6f42:	d5f1      	bpl.n	6f28 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    6f44:	2b00      	cmp	r3, #0
    6f46:	d1ea      	bne.n	6f1e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    6f48:	b16e      	cbz	r6, 6f66 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    6f4a:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    6f4c:	6f19      	ldr	r1, [r3, #112]	; 0x70
    6f4e:	0789      	lsls	r1, r1, #30
    6f50:	d4fa      	bmi.n	6f48 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    6f52:	4611      	mov	r1, r2
			count_read--;
    6f54:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    6f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    6f58:	2a00      	cmp	r2, #0
    6f5a:	d0f5      	beq.n	6f48 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    6f5c:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    6f60:	460a      	mov	r2, r1
	while (count_read) {
    6f62:	2e00      	cmp	r6, #0
    6f64:	d1f1      	bne.n	6f4a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    6f66:	bcf0      	pop	{r4, r5, r6, r7}
    6f68:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    6f6a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    6f6e:	e7d9      	b.n	6f24 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00006f70 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    6f70:	4b32      	ldr	r3, [pc, #200]	; (703c <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    6f72:	4933      	ldr	r1, [pc, #204]	; (7040 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6f74:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    6f76:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    6f7a:	7920      	ldrb	r0, [r4, #4]
    6f7c:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    6f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    6f80:	f895 c004 	ldrb.w	ip, [r5, #4]
    6f84:	f881 c01c 	strb.w	ip, [r1, #28]
    6f88:	7708      	strb	r0, [r1, #28]
    6f8a:	b152      	cbz	r2, 6fa2 <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    6f8c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    6f90:	d323      	bcc.n	6fda <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    6f92:	492c      	ldr	r1, [pc, #176]	; (7044 <_spi_dma_rxISR1()+0xd4>)
    6f94:	4411      	add	r1, r2
		DMA_SERQ = channel;
    6f96:	4a2a      	ldr	r2, [pc, #168]	; (7040 <_spi_dma_rxISR1()+0xd0>)
    6f98:	6419      	str	r1, [r3, #64]	; 0x40
    6f9a:	76d0      	strb	r0, [r2, #27]
    6f9c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6fa0:	bd30      	pop	{r4, r5, pc}
    6fa2:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    6fa4:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    6fa6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    6fa8:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    6faa:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    6fae:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    6fb0:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    6fb2:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    6fb6:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6fb8:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    6fba:	6804      	ldr	r4, [r0, #0]
    6fbc:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6fbe:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    6fc2:	4b21      	ldr	r3, [pc, #132]	; (7048 <_spi_dma_rxISR1()+0xd8>)
    6fc4:	429c      	cmp	r4, r3
    6fc6:	d126      	bne.n	7016 <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    6fc8:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    6fca:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    6fcc:	2b02      	cmp	r3, #2
		_data = data;
    6fce:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6fd0:	d126      	bne.n	7020 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    6fd2:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6fd8:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    6fda:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6fdc:	8be9      	ldrh	r1, [r5, #30]
    6fde:	0409      	lsls	r1, r1, #16
    6fe0:	d422      	bmi.n	7028 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    6fe2:	b292      	uxth	r2, r2
    6fe4:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    6fe6:	6821      	ldr	r1, [r4, #0]
    6fe8:	8bec      	ldrh	r4, [r5, #30]
    6fea:	b2a4      	uxth	r4, r4
    6fec:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6fee:	8bcc      	ldrh	r4, [r1, #30]
    6ff0:	0424      	lsls	r4, r4, #16
    6ff2:	d505      	bpl.n	7000 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    6ff4:	8bcc      	ldrh	r4, [r1, #30]
    6ff6:	f3c2 0208 	ubfx	r2, r2, #0, #9
    6ffa:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    6ffe:	4322      	orrs	r2, r4
    7000:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    7002:	8bca      	ldrh	r2, [r1, #30]
    7004:	b292      	uxth	r2, r2
    7006:	82ca      	strh	r2, [r1, #22]
    7008:	2100      	movs	r1, #0
    700a:	4a0d      	ldr	r2, [pc, #52]	; (7040 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    700c:	6419      	str	r1, [r3, #64]	; 0x40
    700e:	76d0      	strb	r0, [r2, #27]
    7010:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7014:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    7016:	4623      	mov	r3, r4
    7018:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    701a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    701e:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    7024:	f000 be38 	b.w	7c98 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7028:	8be9      	ldrh	r1, [r5, #30]
    702a:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    702e:	b292      	uxth	r2, r2
    7030:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    7034:	ea41 010e 	orr.w	r1, r1, lr
    7038:	83e9      	strh	r1, [r5, #30]
    703a:	e7d4      	b.n	6fe6 <_spi_dma_rxISR1()+0x76>
    703c:	2000c750 	.word	0x2000c750
    7040:	400e8000 	.word	0x400e8000
    7044:	ffff8001 	.word	0xffff8001
    7048:	00006ef9 	.word	0x00006ef9

0000704c <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    704c:	4b32      	ldr	r3, [pc, #200]	; (7118 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    704e:	4933      	ldr	r1, [pc, #204]	; (711c <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7050:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    7052:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    7056:	7920      	ldrb	r0, [r4, #4]
    7058:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    705a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    705c:	f895 c004 	ldrb.w	ip, [r5, #4]
    7060:	f881 c01c 	strb.w	ip, [r1, #28]
    7064:	7708      	strb	r0, [r1, #28]
    7066:	b152      	cbz	r2, 707e <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    7068:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    706c:	d323      	bcc.n	70b6 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    706e:	492c      	ldr	r1, [pc, #176]	; (7120 <_spi_dma_rxISR0()+0xd4>)
    7070:	4411      	add	r1, r2
		DMA_SERQ = channel;
    7072:	4a2a      	ldr	r2, [pc, #168]	; (711c <_spi_dma_rxISR0()+0xd0>)
    7074:	6419      	str	r1, [r3, #64]	; 0x40
    7076:	76d0      	strb	r0, [r2, #27]
    7078:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    707c:	bd30      	pop	{r4, r5, pc}
    707e:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7080:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    7082:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7084:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7086:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    708a:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    708c:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    708e:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    7092:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7094:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    7096:	6804      	ldr	r4, [r0, #0]
    7098:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    709a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    709e:	4b21      	ldr	r3, [pc, #132]	; (7124 <_spi_dma_rxISR0()+0xd8>)
    70a0:	429c      	cmp	r4, r3
    70a2:	d126      	bne.n	70f2 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    70a4:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    70a6:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    70a8:	2b02      	cmp	r3, #2
		_data = data;
    70aa:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    70ac:	d126      	bne.n	70fc <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    70ae:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    70b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    70b4:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    70b6:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    70b8:	8be9      	ldrh	r1, [r5, #30]
    70ba:	0409      	lsls	r1, r1, #16
    70bc:	d422      	bmi.n	7104 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    70be:	b292      	uxth	r2, r2
    70c0:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    70c2:	6821      	ldr	r1, [r4, #0]
    70c4:	8bec      	ldrh	r4, [r5, #30]
    70c6:	b2a4      	uxth	r4, r4
    70c8:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    70ca:	8bcc      	ldrh	r4, [r1, #30]
    70cc:	0424      	lsls	r4, r4, #16
    70ce:	d505      	bpl.n	70dc <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    70d0:	8bcc      	ldrh	r4, [r1, #30]
    70d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
    70d6:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    70da:	4322      	orrs	r2, r4
    70dc:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    70de:	8bca      	ldrh	r2, [r1, #30]
    70e0:	b292      	uxth	r2, r2
    70e2:	82ca      	strh	r2, [r1, #22]
    70e4:	2100      	movs	r1, #0
    70e6:	4a0d      	ldr	r2, [pc, #52]	; (711c <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    70e8:	6419      	str	r1, [r3, #64]	; 0x40
    70ea:	76d0      	strb	r0, [r2, #27]
    70ec:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    70f0:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    70f2:	4623      	mov	r3, r4
    70f4:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    70f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    70fa:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    70fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    7100:	f000 bdca 	b.w	7c98 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7104:	8be9      	ldrh	r1, [r5, #30]
    7106:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    710a:	b292      	uxth	r2, r2
    710c:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    7110:	ea41 010e 	orr.w	r1, r1, lr
    7114:	83e9      	strh	r1, [r5, #30]
    7116:	e7d4      	b.n	70c2 <_spi_dma_rxISR0()+0x76>
    7118:	2000c700 	.word	0x2000c700
    711c:	400e8000 	.word	0x400e8000
    7120:	ffff8001 	.word	0xffff8001
    7124:	00006ef9 	.word	0x00006ef9

00007128 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    7128:	2300      	movs	r3, #0
    712a:	e9c0 1200 	strd	r1, r2, [r0]
    712e:	e9c0 3302 	strd	r3, r3, [r0, #8]
    7132:	e9c0 3304 	strd	r3, r3, [r0, #16]
    7136:	e9c0 3306 	strd	r3, r3, [r0, #24]
    713a:	e9c0 3308 	strd	r3, r3, [r0, #32]
    713e:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    7142:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    7146:	6383      	str	r3, [r0, #56]	; 0x38
    7148:	8783      	strh	r3, [r0, #60]	; 0x3c
    714a:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    714e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    7152:	4770      	bx	lr

00007154 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    7154:	b10b      	cbz	r3, 715a <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    7156:	f7ff bedb 	b.w	6f10 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    715a:	4770      	bx	lr

0000715c <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    715c:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    715e:	e9d3 1200 	ldrd	r1, r2, [r3]
    7162:	6809      	ldr	r1, [r1, #0]
    7164:	4211      	tst	r1, r2
    7166:	d100      	bne.n	716a <SPIClass::end()+0xe>
    7168:	4770      	bx	lr
void SPIClass::end() {
    716a:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    716c:	6802      	ldr	r2, [r0, #0]
    716e:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    7170:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    7172:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    7174:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    7176:	7c22      	ldrb	r2, [r4, #16]
    7178:	4413      	add	r3, r2
    717a:	7c18      	ldrb	r0, [r3, #16]
    717c:	f001 fa6a 	bl	8654 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    7180:	7c62      	ldrb	r2, [r4, #17]
    7182:	6863      	ldr	r3, [r4, #4]
    7184:	2105      	movs	r1, #5
    7186:	4413      	add	r3, r2
    7188:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    718c:	f001 fa62 	bl	8654 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    7190:	6863      	ldr	r3, [r4, #4]
    7192:	7ca2      	ldrb	r2, [r4, #18]
    7194:	2105      	movs	r1, #5
    7196:	4413      	add	r3, r2
}
    7198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    719c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    71a0:	f001 ba58 	b.w	8654 <pinMode>

000071a4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    71a4:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    71a6:	4a08      	ldr	r2, [pc, #32]	; (71c8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    71a8:	4908      	ldr	r1, [pc, #32]	; (71cc <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    71aa:	4809      	ldr	r0, [pc, #36]	; (71d0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    71ac:	f7ff ffbc 	bl	7128 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    71b0:	4a08      	ldr	r2, [pc, #32]	; (71d4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    71b2:	4909      	ldr	r1, [pc, #36]	; (71d8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    71b4:	4809      	ldr	r0, [pc, #36]	; (71dc <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    71b6:	f7ff ffb7 	bl	7128 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    71ba:	4a09      	ldr	r2, [pc, #36]	; (71e0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    71bc:	4909      	ldr	r1, [pc, #36]	; (71e4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    71be:	480a      	ldr	r0, [pc, #40]	; (71e8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    71c0:	f7ff ffb2 	bl	7128 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    71c4:	bd08      	pop	{r3, pc}
    71c6:	bf00      	nop
    71c8:	2000090c 	.word	0x2000090c
    71cc:	403a0000 	.word	0x403a0000
    71d0:	2000c700 	.word	0x2000c700
    71d4:	2000089c 	.word	0x2000089c
    71d8:	4039c000 	.word	0x4039c000
    71dc:	2000c750 	.word	0x2000c750
    71e0:	2000082c 	.word	0x2000082c
    71e4:	40394000 	.word	0x40394000
    71e8:	2000c7a0 	.word	0x2000c7a0

000071ec <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    71ec:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    71f0:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    71f4:	1a10      	subs	r0, r2, r0
    71f6:	4770      	bx	lr

000071f8 <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    71f8:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    71fc:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7200:	429a      	cmp	r2, r3
    7202:	d905      	bls.n	7210 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    7204:	1c5a      	adds	r2, r3, #1
    7206:	4403      	add	r3, r0
    7208:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    720c:	7e98      	ldrb	r0, [r3, #26]
    720e:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    7210:	f04f 30ff 	mov.w	r0, #4294967295
	}
    7214:	4770      	bx	lr
    7216:	bf00      	nop

00007218 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    7218:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    721c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7220:	429a      	cmp	r2, r3
    7222:	d902      	bls.n	722a <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    7224:	4418      	add	r0, r3
    7226:	7e80      	ldrb	r0, [r0, #26]
    7228:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    722a:	f04f 30ff 	mov.w	r0, #4294967295
	}
    722e:	4770      	bx	lr

00007230 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    7230:	4770      	bx	lr
    7232:	bf00      	nop

00007234 <TwoWire::write(unsigned char)>:
{
    7234:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    7236:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    723a:	b178      	cbz	r0, 725c <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    723c:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    7240:	2a88      	cmp	r2, #136	; 0x88
    7242:	d903      	bls.n	724c <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    7244:	2201      	movs	r2, #1
			return 0;
    7246:	2000      	movs	r0, #0
    7248:	605a      	str	r2, [r3, #4]
    724a:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    724c:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    7250:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    7252:	441a      	add	r2, r3
    7254:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    7258:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    725c:	4770      	bx	lr
    725e:	bf00      	nop

00007260 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    7260:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    7262:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    7266:	b90c      	cbnz	r4, 726c <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    7268:	4620      	mov	r0, r4
    726a:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    726c:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    7270:	4605      	mov	r5, r0
    7272:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    7276:	42a2      	cmp	r2, r4
    7278:	d80d      	bhi.n	7296 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    727a:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    727c:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    7280:	4622      	mov	r2, r4
    7282:	4418      	add	r0, r3
    7284:	f001 fa26 	bl	86d4 <memcpy>
		txBufferLength += quantity;
    7288:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    728c:	4620      	mov	r0, r4
		txBufferLength += quantity;
    728e:	4423      	add	r3, r4
    7290:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    7294:	bd38      	pop	{r3, r4, r5, pc}
    7296:	2201      	movs	r2, #1
    7298:	6042      	str	r2, [r0, #4]
    729a:	e7ef      	b.n	727c <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

0000729c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    729c:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    729e:	2500      	movs	r5, #0
    72a0:	4613      	mov	r3, r2
    72a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    72a6:	4604      	mov	r4, r0
    72a8:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
    72ac:	4815      	ldr	r0, [pc, #84]	; (7304 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    72ae:	2288      	movs	r2, #136	; 0x88
    72b0:	6121      	str	r1, [r4, #16]
    72b2:	4629      	mov	r1, r5
    72b4:	6020      	str	r0, [r4, #0]
    72b6:	f104 001a 	add.w	r0, r4, #26
    72ba:	6163      	str	r3, [r4, #20]
    72bc:	7325      	strb	r5, [r4, #12]
    72be:	7625      	strb	r5, [r4, #24]
    72c0:	7665      	strb	r5, [r4, #25]
    72c2:	f005 fc7b 	bl	cbbc <memset>
    72c6:	2289      	movs	r2, #137	; 0x89
    72c8:	4629      	mov	r1, r5
    72ca:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    72ce:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    72d2:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    72d6:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    72da:	f005 fc6f 	bl	cbbc <memset>
	}
    72de:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
    72e0:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    72e4:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    72e8:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    72ec:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    72f0:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    72f4:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    72f8:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    72fc:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
    7300:	bd38      	pop	{r3, r4, r5, pc}
    7302:	bf00      	nop
    7304:	20000aa0 	.word	0x20000aa0

00007308 <TwoWire::force_clock()>:
{
    7308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    730c:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    7310:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    7312:	7e01      	ldrb	r1, [r0, #24]
{
    7314:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    7316:	7e43      	ldrb	r3, [r0, #25]
{
    7318:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    731a:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    731e:	4a38      	ldr	r2, [pc, #224]	; (7400 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    7320:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    7324:	4f37      	ldr	r7, [pc, #220]	; (7404 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    7326:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    7328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    732c:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    7330:	0109      	lsls	r1, r1, #4
    7332:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    7334:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    7338:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    733c:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    7340:	011b      	lsls	r3, r3, #4
    7342:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    7344:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    7346:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    734a:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    734e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    7352:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    7354:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    7356:	492c      	ldr	r1, [pc, #176]	; (7408 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    7358:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    735a:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    735e:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    7360:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    7364:	686b      	ldr	r3, [r5, #4]
    7366:	4333      	orrs	r3, r6
    7368:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    736a:	4b28      	ldr	r3, [pc, #160]	; (740c <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    736c:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    736e:	683a      	ldr	r2, [r7, #0]
    7370:	fba3 3202 	umull	r3, r2, r3, r2
    7374:	0c92      	lsrs	r2, r2, #18
    7376:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    737a:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    737c:	684b      	ldr	r3, [r1, #4]
    737e:	1b1b      	subs	r3, r3, r4
    7380:	429a      	cmp	r2, r3
    7382:	d8fb      	bhi.n	737c <TwoWire::force_clock()+0x74>
    7384:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    7388:	4a1f      	ldr	r2, [pc, #124]	; (7408 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    738a:	f8df e080 	ldr.w	lr, [pc, #128]	; 740c <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    738e:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    7392:	4203      	tst	r3, r0
    7394:	d002      	beq.n	739c <TwoWire::force_clock()+0x94>
    7396:	68ab      	ldr	r3, [r5, #8]
    7398:	4233      	tst	r3, r6
    739a:	d12f      	bne.n	73fc <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    739c:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    73a0:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    73a2:	6839      	ldr	r1, [r7, #0]
    73a4:	fbae 3101 	umull	r3, r1, lr, r1
    73a8:	0c89      	lsrs	r1, r1, #18
    73aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    73ae:	6853      	ldr	r3, [r2, #4]
    73b0:	1b1b      	subs	r3, r3, r4
    73b2:	4299      	cmp	r1, r3
    73b4:	d8fb      	bhi.n	73ae <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    73b6:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    73ba:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    73bc:	6839      	ldr	r1, [r7, #0]
    73be:	fbae 3101 	umull	r3, r1, lr, r1
    73c2:	0c89      	lsrs	r1, r1, #18
    73c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    73c8:	6853      	ldr	r3, [r2, #4]
    73ca:	1b1b      	subs	r3, r3, r4
    73cc:	4299      	cmp	r1, r3
    73ce:	d8fb      	bhi.n	73c8 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    73d0:	f1bc 0c01 	subs.w	ip, ip, #1
    73d4:	d1db      	bne.n	738e <TwoWire::force_clock()+0x86>
	bool ret = false;
    73d6:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    73d8:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    73dc:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    73de:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    73e2:	68db      	ldr	r3, [r3, #12]
    73e4:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    73e8:	f899 3019 	ldrb.w	r3, [r9, #25]
    73ec:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    73f0:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    73f4:	6013      	str	r3, [r2, #0]
}
    73f6:	b003      	add	sp, #12
    73f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    73fc:	2001      	movs	r0, #1
    73fe:	e7eb      	b.n	73d8 <TwoWire::force_clock()+0xd0>
    7400:	20007964 	.word	0x20007964
    7404:	200088b8 	.word	0x200088b8
    7408:	e0001000 	.word	0xe0001000
    740c:	431bde83 	.word	0x431bde83

00007410 <TwoWire::wait_idle()>:
	return systick_millis_count;
    7410:	4a0e      	ldr	r2, [pc, #56]	; (744c <TwoWire::wait_idle()+0x3c>)
{
    7412:	b510      	push	{r4, lr}
    7414:	6811      	ldr	r1, [r2, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
    7416:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    7418:	e005      	b.n	7426 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    741a:	01db      	lsls	r3, r3, #7
    741c:	d407      	bmi.n	742e <TwoWire::wait_idle()+0x1e>
    741e:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    7420:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    7422:	2b10      	cmp	r3, #16
    7424:	d808      	bhi.n	7438 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    7426:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    7428:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    742c:	d1f5      	bne.n	741a <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    742e:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    7432:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    7434:	6163      	str	r3, [r4, #20]
}
    7436:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    7438:	f7ff ff66 	bl	7308 <TwoWire::force_clock()>
    743c:	2800      	cmp	r0, #0
    743e:	d0fa      	beq.n	7436 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    7440:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    7444:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    7446:	6163      	str	r3, [r4, #20]
	return true;
    7448:	e7f5      	b.n	7436 <TwoWire::wait_idle()+0x26>
    744a:	bf00      	nop
    744c:	20022564 	.word	0x20022564

00007450 <TwoWire::endTransmission(unsigned char)>:
{
    7450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    7454:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
    7458:	f1ba 0f00 	cmp.w	sl, #0
    745c:	d058      	beq.n	7510 <TwoWire::endTransmission(unsigned char)+0xc0>
	if (!wait_idle()) return 4;
    745e:	4681      	mov	r9, r0
    7460:	4688      	mov	r8, r1
    7462:	f7ff ffd5 	bl	7410 <TwoWire::wait_idle()>
    7466:	2800      	cmp	r0, #0
    7468:	d052      	beq.n	7510 <TwoWire::endTransmission(unsigned char)+0xc0>
    746a:	4e37      	ldr	r6, [pc, #220]	; (7548 <TwoWire::endTransmission(unsigned char)+0xf8>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    746c:	2400      	movs	r4, #0
    746e:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    7470:	e016      	b.n	74a0 <TwoWire::endTransmission(unsigned char)+0x50>
		uint32_t status = port->MSR; // pg 2884 & 2891
    7472:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    7474:	051a      	lsls	r2, r3, #20
    7476:	d444      	bmi.n	7502 <TwoWire::endTransmission(unsigned char)+0xb2>
		if (status & LPI2C_MSR_NDF) {
    7478:	0558      	lsls	r0, r3, #21
    747a:	d458      	bmi.n	752e <TwoWire::endTransmission(unsigned char)+0xde>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    747c:	0499      	lsls	r1, r3, #18
    747e:	d44c      	bmi.n	751a <TwoWire::endTransmission(unsigned char)+0xca>
    7480:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    7482:	1bd2      	subs	r2, r2, r7
    7484:	2a32      	cmp	r2, #50	; 0x32
    7486:	d848      	bhi.n	751a <TwoWire::endTransmission(unsigned char)+0xca>
		if (tx_index > tx_len) {
    7488:	4554      	cmp	r4, sl
    748a:	d907      	bls.n	749c <TwoWire::endTransmission(unsigned char)+0x4c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    748c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    748e:	0752      	lsls	r2, r2, #29
    7490:	d104      	bne.n	749c <TwoWire::endTransmission(unsigned char)+0x4c>
    7492:	059b      	lsls	r3, r3, #22
    7494:	d455      	bmi.n	7542 <TwoWire::endTransmission(unsigned char)+0xf2>
    7496:	f1b8 0f00 	cmp.w	r8, #0
    749a:	d052      	beq.n	7542 <TwoWire::endTransmission(unsigned char)+0xf2>
		yield();
    749c:	f003 f938 	bl	a710 <yield>
		if (tx_index <= tx_len) {
    74a0:	4554      	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    74a2:	f8d9 5010 	ldr.w	r5, [r9, #16]
		if (tx_index <= tx_len) {
    74a6:	d8e4      	bhi.n	7472 <TwoWire::endTransmission(unsigned char)+0x22>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    74a8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    74aa:	0751      	lsls	r1, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    74ac:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    74b0:	d4df      	bmi.n	7472 <TwoWire::endTransmission(unsigned char)+0x22>
    74b2:	e013      	b.n	74dc <TwoWire::endTransmission(unsigned char)+0x8c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    74b4:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    74b8:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    74ba:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    74bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    74c0:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    74c2:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    74c4:	d027      	beq.n	7516 <TwoWire::endTransmission(unsigned char)+0xc6>
				} else if (tx_index < tx_len) {
    74c6:	458a      	cmp	sl, r1
				fifo_used++;
    74c8:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    74cc:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    74d0:	d90e      	bls.n	74f0 <TwoWire::endTransmission(unsigned char)+0xa0>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    74d2:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    74d6:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    74d8:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    74da:	d0ca      	beq.n	7472 <TwoWire::endTransmission(unsigned char)+0x22>
					tx_index = 1;
    74dc:	2101      	movs	r1, #1
				if (tx_index == 0) {
    74de:	2c00      	cmp	r4, #0
    74e0:	d0e8      	beq.n	74b4 <TwoWire::endTransmission(unsigned char)+0x64>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    74e2:	4621      	mov	r1, r4
				fifo_used++;
    74e4:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    74e6:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    74e8:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    74ea:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    74ee:	d8f0      	bhi.n	74d2 <TwoWire::endTransmission(unsigned char)+0x82>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    74f0:	f1b8 0f00 	cmp.w	r8, #0
    74f4:	d0bd      	beq.n	7472 <TwoWire::endTransmission(unsigned char)+0x22>
    74f6:	f44f 7300 	mov.w	r3, #512	; 0x200
    74fa:	662b      	str	r3, [r5, #96]	; 0x60
		uint32_t status = port->MSR; // pg 2884 & 2891
    74fc:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    74fe:	051a      	lsls	r2, r3, #20
    7500:	d5ba      	bpl.n	7478 <TwoWire::endTransmission(unsigned char)+0x28>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    7502:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    7504:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    7506:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    750a:	612b      	str	r3, [r5, #16]
}
    750c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!tx_len) return 4; // no address for transmit
    7510:	2004      	movs	r0, #4
}
    7512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    7516:	2401      	movs	r4, #1
    7518:	e7ab      	b.n	7472 <TwoWire::endTransmission(unsigned char)+0x22>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    751a:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    751c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    7520:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    7522:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    7526:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    7528:	662a      	str	r2, [r5, #96]	; 0x60
}
    752a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    752e:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    7530:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    7534:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    7536:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    753a:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    753c:	662a      	str	r2, [r5, #96]	; 0x60
}
    753e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;
    7542:	2000      	movs	r0, #0
    7544:	e7e5      	b.n	7512 <TwoWire::endTransmission(unsigned char)+0xc2>
    7546:	bf00      	nop
    7548:	20022564 	.word	0x20022564

0000754c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    754c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7550:	4682      	mov	sl, r0
    7552:	460c      	mov	r4, r1
    7554:	4615      	mov	r5, r2
    7556:	461f      	mov	r7, r3
	if (!wait_idle()) return 4;
    7558:	f7ff ff5a 	bl	7410 <TwoWire::wait_idle()>
    755c:	2800      	cmp	r0, #0
    755e:	f000 808f 	beq.w	7680 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x134>
	address = (address & 0x7F) << 1;
    7562:	0063      	lsls	r3, r4, #1
	rxBufferIndex = 0;
    7564:	2100      	movs	r1, #0
    7566:	2d01      	cmp	r5, #1
    7568:	f8df 811c 	ldr.w	r8, [pc, #284]	; 7688 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    756c:	b2db      	uxtb	r3, r3
    756e:	f240 4601 	movw	r6, #1025	; 0x401
    7572:	bf38      	it	cc
    7574:	2501      	movcc	r5, #1
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    7576:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    7578:	431e      	orrs	r6, r3
    757a:	f8d8 9000 	ldr.w	r9, [r8]
	rxBufferIndex = 0;
    757e:	f8aa 10a2 	strh.w	r1, [sl, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    7582:	e01e      	b.n	75c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x76>
		if (rxBufferLength < sizeof(rxBuffer)) {
    7584:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
    7588:	2b87      	cmp	r3, #135	; 0x87
    758a:	d93d      	bls.n	7608 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		uint32_t status = port->MSR; // pg 2884 & 2891
    758c:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
    758e:	050b      	lsls	r3, r1, #20
    7590:	d457      	bmi.n	7642 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf6>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    7592:	f411 5f10 	tst.w	r1, #9216	; 0x2400
    7596:	d167      	bne.n	7668 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
    7598:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    759c:	eba3 0309 	sub.w	r3, r3, r9
    75a0:	2b32      	cmp	r3, #50	; 0x32
    75a2:	d861      	bhi.n	7668 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
		if (rxBufferLength >= length && tx_state >= 3) {
    75a4:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
    75a8:	42ab      	cmp	r3, r5
    75aa:	d308      	bcc.n	75be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    75ac:	2c02      	cmp	r4, #2
    75ae:	d906      	bls.n	75be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
			uint32_t tx_fifo = port->MFSR & 0x07;
    75b0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    75b2:	0758      	lsls	r0, r3, #29
    75b4:	d103      	bne.n	75be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    75b6:	058b      	lsls	r3, r1, #22
    75b8:	d447      	bmi.n	764a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
    75ba:	2f00      	cmp	r7, #0
    75bc:	d045      	beq.n	764a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
		yield();
    75be:	f003 f8a7 	bl	a710 <yield>
		if (tx_state < 3) {
    75c2:	2c02      	cmp	r4, #2
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    75c4:	f8da 2010 	ldr.w	r2, [sl, #16]
		if (tx_state < 3) {
    75c8:	d8dc      	bhi.n	7584 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    75ca:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			while (tx_fifo < 4 && tx_state < 3) {
    75cc:	0759      	lsls	r1, r3, #29
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    75ce:	f003 0007 	and.w	r0, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    75d2:	d4d7      	bmi.n	7584 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
    75d4:	4621      	mov	r1, r4
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    75d6:	1e6c      	subs	r4, r5, #1
    75d8:	4408      	add	r0, r1
    75da:	f444 7480 	orr.w	r4, r4, #256	; 0x100
				if (tx_state == 0) {
    75de:	b941      	cbnz	r1, 75f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    75e0:	6616      	str	r6, [r2, #96]	; 0x60
				tx_state++;
    75e2:	3101      	adds	r1, #1
			while (tx_fifo < 4 && tx_state < 3) {
    75e4:	1a43      	subs	r3, r0, r1
    75e6:	2b03      	cmp	r3, #3
    75e8:	d801      	bhi.n	75ee <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa2>
    75ea:	2902      	cmp	r1, #2
    75ec:	d9f7      	bls.n	75de <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x92>
				tx_state++;
    75ee:	460c      	mov	r4, r1
    75f0:	e7c8      	b.n	7584 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
				} else if (tx_state == 1) {
    75f2:	2901      	cmp	r1, #1
    75f4:	d031      	beq.n	765a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    75f6:	b117      	cbz	r7, 75fe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb2>
    75f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    75fc:	6613      	str	r3, [r2, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    75fe:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
				tx_state++;
    7602:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    7604:	2b87      	cmp	r3, #135	; 0x87
    7606:	d8c1      	bhi.n	758c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    7608:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    760a:	f411 2fe0 	tst.w	r1, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    760e:	f3c1 4e02 	ubfx	lr, r1, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    7612:	d0bb      	beq.n	758c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
    7614:	1c59      	adds	r1, r3, #1
    7616:	449e      	add	lr, r3
    7618:	3319      	adds	r3, #25
    761a:	b2c9      	uxtb	r1, r1
    761c:	fa5f fe8e 	uxtb.w	lr, lr
    7620:	fa5a f383 	uxtab	r3, sl, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    7624:	f8d2 c070 	ldr.w	ip, [r2, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    7628:	1c48      	adds	r0, r1, #1
    762a:	4571      	cmp	r1, lr
				rxBuffer[rxBufferLength++] = port->MRDR;
    762c:	f88a 10a3 	strb.w	r1, [sl, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    7630:	b2c1      	uxtb	r1, r0
				rxBuffer[rxBufferLength++] = port->MRDR;
    7632:	f803 cf01 	strb.w	ip, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    7636:	d0a9      	beq.n	758c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
    7638:	2989      	cmp	r1, #137	; 0x89
    763a:	d1f3      	bne.n	7624 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd8>
		uint32_t status = port->MSR; // pg 2884 & 2891
    763c:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
    763e:	050b      	lsls	r3, r1, #20
    7640:	d5a7      	bpl.n	7592 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    7642:	6913      	ldr	r3, [r2, #16]
    7644:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    7648:	6113      	str	r3, [r2, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    764a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    764c:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    7650:	d105      	bne.n	765e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	return rxBufferLength;
    7652:	f89a 00a3 	ldrb.w	r0, [sl, #163]	; 0xa3
}
    7656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    765a:	6614      	str	r4, [r2, #96]	; 0x60
    765c:	e7c1      	b.n	75e2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    765e:	6913      	ldr	r3, [r2, #16]
    7660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    7664:	6113      	str	r3, [r2, #16]
    7666:	e7f4      	b.n	7652 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    7668:	6913      	ldr	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    766a:	f44f 7100 	mov.w	r1, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    766e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    7672:	6113      	str	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    7674:	6611      	str	r1, [r2, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    7676:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    7678:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    767c:	d0e9      	beq.n	7652 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    767e:	e7ee      	b.n	765e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	if (!wait_idle()) return 4;
    7680:	2004      	movs	r0, #4
}
    7682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7686:	bf00      	nop
    7688:	20022564 	.word	0x20022564

0000768c <TwoWire::isr()>:


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    768c:	6903      	ldr	r3, [r0, #16]
{
    768e:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    7690:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
    7694:	4604      	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    7696:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    769a:	d001      	beq.n	76a0 <TwoWire::isr()+0x14>
    769c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    76a0:	07ae      	lsls	r6, r5, #30
    76a2:	d50b      	bpl.n	76bc <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    76a4:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    76a8:	0408      	lsls	r0, r1, #16
    76aa:	d53e      	bpl.n	772a <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    76ac:	2200      	movs	r2, #0
    76ae:	2001      	movs	r0, #1
    76b0:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    76b4:	4422      	add	r2, r4
    76b6:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    76ba:	7691      	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    76bc:	07ea      	lsls	r2, r5, #31
    76be:	d510      	bpl.n	76e2 <TwoWire::isr()+0x56>
		if (!transmitting) {
    76c0:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
    76c4:	b1f6      	cbz	r6, 7704 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    76c6:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
    76ca:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    76ce:	42b2      	cmp	r2, r6
    76d0:	d927      	bls.n	7722 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    76d2:	1c72      	adds	r2, r6, #1
    76d4:	4426      	add	r6, r4
    76d6:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    76da:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
    76de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    76e2:	05ab      	lsls	r3, r5, #22
    76e4:	d50d      	bpl.n	7702 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    76e6:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    76ea:	b118      	cbz	r0, 76f4 <TwoWire::isr()+0x68>
    76ec:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    76f0:	b103      	cbz	r3, 76f4 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    76f2:	4798      	blx	r3
		}
		rxBufferIndex = 0;
    76f4:	2300      	movs	r3, #0
    76f6:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    76fa:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    76fe:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
	}
}
    7702:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    7704:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    7708:	b10a      	cbz	r2, 770e <TwoWire::isr()+0x82>
				(*user_onRequest)();
    770a:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    770c:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    770e:	2200      	movs	r2, #0
    7710:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    7714:	2201      	movs	r2, #1
    7716:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    771a:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    771e:	42b2      	cmp	r2, r6
    7720:	d8d7      	bhi.n	76d2 <TwoWire::isr()+0x46>
			port->STDR = 0;
    7722:	2200      	movs	r2, #0
    7724:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    7728:	e7db      	b.n	76e2 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    772a:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    772e:	2a87      	cmp	r2, #135	; 0x87
    7730:	d8c4      	bhi.n	76bc <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    7732:	1c50      	adds	r0, r2, #1
    7734:	b2c0      	uxtb	r0, r0
    7736:	e7bd      	b.n	76b4 <TwoWire::isr()+0x28>

00007738 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    7738:	4801      	ldr	r0, [pc, #4]	; (7740 <lpi2c1_isr()+0x8>)
    773a:	f7ff bfa7 	b.w	768c <TwoWire::isr()>
    773e:	bf00      	nop
    7740:	2000c7f4 	.word	0x2000c7f4

00007744 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    7744:	4801      	ldr	r0, [pc, #4]	; (774c <lpi2c3_isr()+0x8>)
    7746:	f7ff bfa1 	b.w	768c <TwoWire::isr()>
    774a:	bf00      	nop
    774c:	2000c934 	.word	0x2000c934

00007750 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    7750:	4801      	ldr	r0, [pc, #4]	; (7758 <lpi2c4_isr()+0x8>)
    7752:	f7ff bf9b 	b.w	768c <TwoWire::isr()>
    7756:	bf00      	nop
    7758:	2000ca74 	.word	0x2000ca74

0000775c <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    775c:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    775e:	4c09      	ldr	r4, [pc, #36]	; (7784 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    7760:	4909      	ldr	r1, [pc, #36]	; (7788 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    7762:	4622      	mov	r2, r4
    7764:	4809      	ldr	r0, [pc, #36]	; (778c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    7766:	f7ff fd99 	bl	729c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    776a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    776e:	4908      	ldr	r1, [pc, #32]	; (7790 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    7770:	4808      	ldr	r0, [pc, #32]	; (7794 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    7772:	f7ff fd93 	bl	729c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    7776:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    777a:	4907      	ldr	r1, [pc, #28]	; (7798 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    777c:	4807      	ldr	r0, [pc, #28]	; (779c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    777e:	f7ff fd8d 	bl	729c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    7782:	bd10      	pop	{r4, pc}
    7784:	60002754 	.word	0x60002754
    7788:	403f0000 	.word	0x403f0000
    778c:	2000c7f4 	.word	0x2000c7f4
    7790:	403f8000 	.word	0x403f8000
    7794:	2000c934 	.word	0x2000c934
    7798:	403fc000 	.word	0x403fc000
    779c:	2000ca74 	.word	0x2000ca74

000077a0 <AudioStream::update_all()>:
    77a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    77a4:	2240      	movs	r2, #64	; 0x40
    77a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    77aa:	4770      	bx	lr

000077ac <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    77ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    77ae:	4b14      	ldr	r3, [pc, #80]	; (7800 <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    77b0:	4d14      	ldr	r5, [pc, #80]	; (7804 <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
    77b2:	681c      	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    77b4:	686e      	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    77b6:	b19c      	cbz	r4, 77e0 <software_isr()+0x34>
		if (p->active) {
    77b8:	7a23      	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    77ba:	4620      	mov	r0, r4
		if (p->active) {
    77bc:	b16b      	cbz	r3, 77da <software_isr()+0x2e>
			p->update();
    77be:	6823      	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
    77c0:	686f      	ldr	r7, [r5, #4]
			p->update();
    77c2:	681b      	ldr	r3, [r3, #0]
    77c4:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    77c6:	686b      	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    77c8:	88e1      	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    77ca:	1bdb      	subs	r3, r3, r7
			p->cpu_cycles = cycles;
    77cc:	f3c3 128f 	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    77d0:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
    77d4:	80a2      	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    77d6:	bf38      	it	cc
    77d8:	80e2      	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    77da:	6964      	ldr	r4, [r4, #20]
    77dc:	2c00      	cmp	r4, #0
    77de:	d1eb      	bne.n	77b8 <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    77e0:	4b08      	ldr	r3, [pc, #32]	; (7804 <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    77e2:	4a09      	ldr	r2, [pc, #36]	; (7808 <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    77e4:	685b      	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    77e6:	8810      	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    77e8:	1b9b      	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    77ea:	4c08      	ldr	r4, [pc, #32]	; (780c <software_isr()+0x60>)
    77ec:	f3c3 118f 	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    77f0:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
    77f4:	8021      	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
    77f6:	bf38      	it	cc
    77f8:	8011      	strhcc	r1, [r2, #0]

	asm("DSB");
    77fa:	f3bf 8f4f 	dsb	sy
}
    77fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7800:	200200ac 	.word	0x200200ac
    7804:	e0001000 	.word	0xe0001000
    7808:	200225da 	.word	0x200225da
    780c:	200225d8 	.word	0x200225d8

00007810 <AudioStream::allocate()>:
{
    7810:	b430      	push	{r4, r5}
	__disable_irq();
    7812:	b672      	cpsid	i
	index = memory_pool_first_mask;
    7814:	4d24      	ldr	r5, [pc, #144]	; (78a8 <AudioStream::allocate()+0x98>)
	p += index;
    7816:	4c25      	ldr	r4, [pc, #148]	; (78ac <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
    7818:	882a      	ldrh	r2, [r5, #0]
		if (p >= end) {
    781a:	f104 0170 	add.w	r1, r4, #112	; 0x70
	p += index;
    781e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
    7822:	428b      	cmp	r3, r1
    7824:	d23c      	bcs.n	78a0 <AudioStream::allocate()+0x90>
    7826:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    782a:	1c50      	adds	r0, r2, #1
    782c:	1ac9      	subs	r1, r1, r3
    782e:	eb00 0091 	add.w	r0, r0, r1, lsr #2
    7832:	e002      	b.n	783a <AudioStream::allocate()+0x2a>
		index++;
    7834:	3201      	adds	r2, #1
		if (p >= end) {
    7836:	4282      	cmp	r2, r0
    7838:	d032      	beq.n	78a0 <AudioStream::allocate()+0x90>
		index++;
    783a:	469c      	mov	ip, r3
		avail = *p;
    783c:	f853 1b04 	ldr.w	r1, [r3], #4
		if (avail) break;
    7840:	2900      	cmp	r1, #0
    7842:	d0f7      	beq.n	7834 <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
    7844:	fab1 f081 	clz	r0, r1
	avail &= ~(0x80000000 >> n);
    7848:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    784c:	40c3      	lsrs	r3, r0
    784e:	ea21 0103 	bic.w	r1, r1, r3
	*p = avail;
    7852:	f8cc 1000 	str.w	r1, [ip]
	if (!avail) index++;
    7856:	b901      	cbnz	r1, 785a <AudioStream::allocate()+0x4a>
    7858:	3201      	adds	r2, #1
	used = memory_used + 1;
    785a:	4b15      	ldr	r3, [pc, #84]	; (78b0 <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
    785c:	802a      	strh	r2, [r5, #0]
	used = memory_used + 1;
    785e:	881a      	ldrh	r2, [r3, #0]
	memory_used = used;
    7860:	3201      	adds	r2, #1
    7862:	b291      	uxth	r1, r2
    7864:	8019      	strh	r1, [r3, #0]
	__enable_irq();
    7866:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
    7868:	ebac 0c04 	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
    786c:	f641 737c 	movw	r3, #8060	; 0x1f7c
    7870:	ebc0 6400 	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
    7874:	ea4f 0cac 	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
    7878:	ebc0 1084 	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
    787c:	2401      	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
    787e:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    7882:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
    7886:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    788a:	480a      	ldr	r0, [pc, #40]	; (78b4 <AudioStream::allocate()+0xa4>)
    788c:	6800      	ldr	r0, [r0, #0]
	block->ref_count = 1;
    788e:	54c4      	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
    7890:	4418      	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
    7892:	4b09      	ldr	r3, [pc, #36]	; (78b8 <AudioStream::allocate()+0xa8>)
    7894:	881c      	ldrh	r4, [r3, #0]
    7896:	4294      	cmp	r4, r2
}
    7898:	bc30      	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
    789a:	bf38      	it	cc
    789c:	8019      	strhcc	r1, [r3, #0]
}
    789e:	4770      	bx	lr
			__enable_irq();
    78a0:	b662      	cpsie	i
			return NULL;
    78a2:	2000      	movs	r0, #0
}
    78a4:	bc30      	pop	{r4, r5}
    78a6:	4770      	bx	lr
    78a8:	200225dc 	.word	0x200225dc
    78ac:	200200b0 	.word	0x200200b0
    78b0:	200225d4 	.word	0x200225d4
    78b4:	200200a8 	.word	0x200200a8
    78b8:	200225d6 	.word	0x200225d6

000078bc <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    78bc:	8842      	ldrh	r2, [r0, #2]
	__disable_irq();
    78be:	b672      	cpsid	i
	if (block->ref_count > 1) {
    78c0:	7803      	ldrb	r3, [r0, #0]
    78c2:	2b01      	cmp	r3, #1
    78c4:	d903      	bls.n	78ce <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    78c6:	3b01      	subs	r3, #1
    78c8:	7003      	strb	r3, [r0, #0]
	__enable_irq();
    78ca:	b662      	cpsie	i
}
    78cc:	4770      	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    78ce:	43d1      	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
    78d0:	0953      	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
    78d2:	480b      	ldr	r0, [pc, #44]	; (7900 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    78d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    78d8:	f001 011f 	and.w	r1, r1, #31
    78dc:	40ca      	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
    78de:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    78e2:	430a      	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    78e4:	4907      	ldr	r1, [pc, #28]	; (7904 <AudioStream::release(audio_block_struct*)+0x48>)
    78e6:	f8b1 c000 	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
    78ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    78ee:	459c      	cmp	ip, r3
		memory_used--;
    78f0:	4a05      	ldr	r2, [pc, #20]	; (7908 <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    78f2:	bf88      	it	hi
    78f4:	800b      	strhhi	r3, [r1, #0]
		memory_used--;
    78f6:	8813      	ldrh	r3, [r2, #0]
    78f8:	3b01      	subs	r3, #1
    78fa:	8013      	strh	r3, [r2, #0]
	__enable_irq();
    78fc:	b662      	cpsie	i
}
    78fe:	4770      	bx	lr
    7900:	200200b0 	.word	0x200200b0
    7904:	200225dc 	.word	0x200225dc
    7908:	200225d4 	.word	0x200225d4

0000790c <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    790c:	68c3      	ldr	r3, [r0, #12]
    790e:	b913      	cbnz	r3, 7916 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
    7910:	e01d      	b.n	794e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
    7912:	68db      	ldr	r3, [r3, #12]
    7914:	b1e3      	cbz	r3, 7950 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
    7916:	7a18      	ldrb	r0, [r3, #8]
    7918:	4290      	cmp	r0, r2
    791a:	d1fa      	bne.n	7912 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
    791c:	b410      	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
    791e:	6858      	ldr	r0, [r3, #4]
    7920:	f893 c009 	ldrb.w	ip, [r3, #9]
    7924:	6900      	ldr	r0, [r0, #16]
    7926:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    792a:	b154      	cbz	r4, 7942 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    792c:	68db      	ldr	r3, [r3, #12]
    792e:	b12b      	cbz	r3, 793c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    7930:	7a18      	ldrb	r0, [r3, #8]
    7932:	4290      	cmp	r0, r2
    7934:	d0f3      	beq.n	791e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    7936:	68db      	ldr	r3, [r3, #12]
    7938:	2b00      	cmp	r3, #0
    793a:	d1f9      	bne.n	7930 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
    793c:	f85d 4b04 	ldr.w	r4, [sp], #4
    7940:	4770      	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
    7942:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
    7946:	7808      	ldrb	r0, [r1, #0]
    7948:	3001      	adds	r0, #1
    794a:	7008      	strb	r0, [r1, #0]
    794c:	e7ee      	b.n	792c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
    794e:	4770      	bx	lr
    7950:	4770      	bx	lr
    7952:	bf00      	nop

00007954 <AudioStream::receiveWritable(unsigned int)>:
{
    7954:	b538      	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
    7956:	7a43      	ldrb	r3, [r0, #9]
    7958:	428b      	cmp	r3, r1
    795a:	d91b      	bls.n	7994 <AudioStream::receiveWritable(unsigned int)+0x40>
	in = inputQueue[index];
    795c:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    795e:	2200      	movs	r2, #0
	in = inputQueue[index];
    7960:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    7964:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    7968:	b1a4      	cbz	r4, 7994 <AudioStream::receiveWritable(unsigned int)+0x40>
    796a:	7823      	ldrb	r3, [r4, #0]
    796c:	2b01      	cmp	r3, #1
    796e:	d801      	bhi.n	7974 <AudioStream::receiveWritable(unsigned int)+0x20>
}
    7970:	4620      	mov	r0, r4
    7972:	bd38      	pop	{r3, r4, r5, pc}
		p = allocate();
    7974:	f7ff ff4c 	bl	7810 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    7978:	4605      	mov	r5, r0
    797a:	b128      	cbz	r0, 7988 <AudioStream::receiveWritable(unsigned int)+0x34>
    797c:	f44f 7280 	mov.w	r2, #256	; 0x100
    7980:	1d21      	adds	r1, r4, #4
    7982:	3004      	adds	r0, #4
    7984:	f000 fea6 	bl	86d4 <memcpy>
		in->ref_count--;
    7988:	7823      	ldrb	r3, [r4, #0]
    798a:	3b01      	subs	r3, #1
    798c:	7023      	strb	r3, [r4, #0]
		p = allocate();
    798e:	462c      	mov	r4, r5
}
    7990:	4620      	mov	r0, r4
    7992:	bd38      	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
    7994:	2400      	movs	r4, #0
}
    7996:	4620      	mov	r0, r4
    7998:	bd38      	pop	{r3, r4, r5, pc}
    799a:	bf00      	nop

0000799c <AudioConnection::AudioConnection()>:
	: src(NULL), dst(NULL),
    799c:	2200      	movs	r2, #0
	next_dest = AudioStream::unused;
    799e:	4904      	ldr	r1, [pc, #16]	; (79b0 <AudioConnection::AudioConnection()+0x14>)
	: src(NULL), dst(NULL),
    79a0:	e9c0 2200 	strd	r2, r2, [r0]
	  src_index(0), dest_index(0),
    79a4:	8102      	strh	r2, [r0, #8]
	  isConnected(false)
    79a6:	7402      	strb	r2, [r0, #16]
	next_dest = AudioStream::unused;
    79a8:	680a      	ldr	r2, [r1, #0]
	AudioStream::unused = this;
    79aa:	6008      	str	r0, [r1, #0]
	next_dest = AudioStream::unused;
    79ac:	60c2      	str	r2, [r0, #12]
}
    79ae:	4770      	bx	lr
    79b0:	20020120 	.word	0x20020120

000079b4 <AudioConnection::connect()>:
		if (isConnected) // already connected
    79b4:	7c03      	ldrb	r3, [r0, #16]
    79b6:	b9fb      	cbnz	r3, 79f8 <AudioConnection::connect()+0x44>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
    79b8:	6803      	ldr	r3, [r0, #0]
    79ba:	4601      	mov	r1, r0
    79bc:	b1fb      	cbz	r3, 79fe <AudioConnection::connect()+0x4a>
    79be:	6843      	ldr	r3, [r0, #4]
    79c0:	b1eb      	cbz	r3, 79fe <AudioConnection::connect()+0x4a>
		if (dest_index >= dst->num_inputs) // input number too high
    79c2:	7a42      	ldrb	r2, [r0, #9]
    79c4:	7a5b      	ldrb	r3, [r3, #9]
    79c6:	429a      	cmp	r2, r3
    79c8:	d21c      	bcs.n	7a04 <AudioConnection::connect()+0x50>
{
    79ca:	b430      	push	{r4, r5}
		__disable_irq();
    79cc:	b672      	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
    79ce:	4b2b      	ldr	r3, [pc, #172]	; (7a7c <AudioConnection::connect()+0xc8>)
    79d0:	681c      	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
    79d2:	b1ec      	cbz	r4, 7a10 <AudioConnection::connect()+0x5c>
			p = s->destination_list;	// first patchCord in this stream's list
    79d4:	68e3      	ldr	r3, [r4, #12]
			while (p)
    79d6:	b1c3      	cbz	r3, 7a0a <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    79d8:	6848      	ldr	r0, [r1, #4]
    79da:	e001      	b.n	79e0 <AudioConnection::connect()+0x2c>
				p = p->next_dest;
    79dc:	68db      	ldr	r3, [r3, #12]
			while (p)
    79de:	b1a3      	cbz	r3, 7a0a <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    79e0:	685a      	ldr	r2, [r3, #4]
    79e2:	4282      	cmp	r2, r0
    79e4:	d1fa      	bne.n	79dc <AudioConnection::connect()+0x28>
    79e6:	f893 c009 	ldrb.w	ip, [r3, #9]
    79ea:	7a4a      	ldrb	r2, [r1, #9]
    79ec:	4594      	cmp	ip, r2
    79ee:	d1f5      	bne.n	79dc <AudioConnection::connect()+0x28>
					__enable_irq();
    79f0:	b662      	cpsie	i
					return 4;
    79f2:	2004      	movs	r0, #4
}
    79f4:	bc30      	pop	{r4, r5}
    79f6:	4770      	bx	lr
	int result = 1;
    79f8:	2001      	movs	r0, #1
	__enable_irq();
    79fa:	b662      	cpsie	i
}
    79fc:	4770      	bx	lr
			result = 3;
    79fe:	2003      	movs	r0, #3
	__enable_irq();
    7a00:	b662      	cpsie	i
}
    7a02:	4770      	bx	lr
			result = 2;
    7a04:	2002      	movs	r0, #2
	__enable_irq();
    7a06:	b662      	cpsie	i
}
    7a08:	4770      	bx	lr
			s = s->next_update;
    7a0a:	6964      	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
    7a0c:	2c00      	cmp	r4, #0
    7a0e:	d1e1      	bne.n	79d4 <AudioConnection::connect()+0x20>
		pp = &AudioStream::unused;
    7a10:	4c1b      	ldr	r4, [pc, #108]	; (7a80 <AudioConnection::connect()+0xcc>)
    7a12:	6823      	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
    7a14:	b143      	cbz	r3, 7a28 <AudioConnection::connect()+0x74>
    7a16:	4299      	cmp	r1, r3
    7a18:	d102      	bne.n	7a20 <AudioConnection::connect()+0x6c>
    7a1a:	e00b      	b.n	7a34 <AudioConnection::connect()+0x80>
    7a1c:	4299      	cmp	r1, r3
    7a1e:	d007      	beq.n	7a30 <AudioConnection::connect()+0x7c>
			pp = &((*pp)->next_dest);
    7a20:	461a      	mov	r2, r3
    7a22:	68db      	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
    7a24:	2b00      	cmp	r3, #0
    7a26:	d1f9      	bne.n	7a1c <AudioConnection::connect()+0x68>
			result = 5;
    7a28:	2005      	movs	r0, #5
	__enable_irq();
    7a2a:	b662      	cpsie	i
}
    7a2c:	bc30      	pop	{r4, r5}
    7a2e:	4770      	bx	lr
			pp = &((*pp)->next_dest);
    7a30:	f102 040c 	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
    7a34:	680d      	ldr	r5, [r1, #0]
    7a36:	68e8      	ldr	r0, [r5, #12]
		if (p == NULL) 
    7a38:	b1e8      	cbz	r0, 7a76 <AudioConnection::connect()+0xc2>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    7a3a:	68c3      	ldr	r3, [r0, #12]
    7a3c:	b91b      	cbnz	r3, 7a46 <AudioConnection::connect()+0x92>
    7a3e:	e008      	b.n	7a52 <AudioConnection::connect()+0x9e>
    7a40:	68da      	ldr	r2, [r3, #12]
    7a42:	b13a      	cbz	r2, 7a54 <AudioConnection::connect()+0xa0>
    7a44:	4613      	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
    7a46:	4281      	cmp	r1, r0
    7a48:	4618      	mov	r0, r3
    7a4a:	d1f9      	bne.n	7a40 <AudioConnection::connect()+0x8c>
					__enable_irq();
    7a4c:	b662      	cpsie	i
					return 6;
    7a4e:	2006      	movs	r0, #6
    7a50:	e7d0      	b.n	79f4 <AudioConnection::connect()+0x40>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    7a52:	4603      	mov	r3, r0
			p->next_dest = this; // end of list, can link ourselves in
    7a54:	60d9      	str	r1, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
    7a56:	68cb      	ldr	r3, [r1, #12]
		next_dest = NULL; // we're last in the source's destination list
    7a58:	2000      	movs	r0, #0
		*pp = next_dest;  // remove ourselves from the unused list
    7a5a:	6023      	str	r3, [r4, #0]
		src->active = true;
    7a5c:	2301      	movs	r3, #1
		next_dest = NULL; // we're last in the source's destination list
    7a5e:	60c8      	str	r0, [r1, #12]
		src->numConnections++;
    7a60:	7aaa      	ldrb	r2, [r5, #10]
		src->active = true;
    7a62:	722b      	strb	r3, [r5, #8]
		src->numConnections++;
    7a64:	441a      	add	r2, r3
    7a66:	72aa      	strb	r2, [r5, #10]
		dst->numConnections++;
    7a68:	684a      	ldr	r2, [r1, #4]
    7a6a:	7a94      	ldrb	r4, [r2, #10]
		dst->active = true;
    7a6c:	7213      	strb	r3, [r2, #8]
		dst->numConnections++;
    7a6e:	441c      	add	r4, r3
    7a70:	7294      	strb	r4, [r2, #10]
		isConnected = true;
    7a72:	740b      	strb	r3, [r1, #16]
		result = 0;
    7a74:	e7d9      	b.n	7a2a <AudioConnection::connect()+0x76>
			src->destination_list = this;
    7a76:	60e9      	str	r1, [r5, #12]
    7a78:	e7ed      	b.n	7a56 <AudioConnection::connect()+0xa2>
    7a7a:	bf00      	nop
    7a7c:	200200ac 	.word	0x200200ac
    7a80:	20020120 	.word	0x20020120

00007a84 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
{
    7a84:	b510      	push	{r4, lr}
	if (!isConnected)
    7a86:	7c04      	ldrb	r4, [r0, #16]
{
    7a88:	f89d e008 	ldrb.w	lr, [sp, #8]
	if (!isConnected)
    7a8c:	b10c      	cbz	r4, 7a92 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xe>
}
    7a8e:	2001      	movs	r0, #1
    7a90:	bd10      	pop	{r4, pc}
		src_index = sourceOutput;
    7a92:	7202      	strb	r2, [r0, #8]
		dest_index = destinationInput;
    7a94:	f880 e009 	strb.w	lr, [r0, #9]
		dst = &destination;
    7a98:	e9c0 1300 	strd	r1, r3, [r0]
}
    7a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		result = connect();
    7aa0:	f7ff bf88 	b.w	79b4 <AudioConnection::connect()>

00007aa4 <AudioConnection::disconnect()>:
{
    7aa4:	b538      	push	{r3, r4, r5, lr}
	if (!isConnected) return 1;
    7aa6:	7c03      	ldrb	r3, [r0, #16]
    7aa8:	2b00      	cmp	r3, #0
    7aaa:	d036      	beq.n	7b1a <AudioConnection::disconnect()+0x76>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    7aac:	6843      	ldr	r3, [r0, #4]
    7aae:	4604      	mov	r4, r0
    7ab0:	7a42      	ldrb	r2, [r0, #9]
    7ab2:	7a5b      	ldrb	r3, [r3, #9]
    7ab4:	429a      	cmp	r2, r3
    7ab6:	d238      	bcs.n	7b2a <AudioConnection::disconnect()+0x86>
	__disable_irq();
    7ab8:	b672      	cpsid	i
	p = src->destination_list;
    7aba:	6801      	ldr	r1, [r0, #0]
    7abc:	68cb      	ldr	r3, [r1, #12]
	if (p == NULL) {
    7abe:	2b00      	cmp	r3, #0
    7ac0:	d02d      	beq.n	7b1e <AudioConnection::disconnect()+0x7a>
	} else if (p == this) {
    7ac2:	4298      	cmp	r0, r3
    7ac4:	d033      	beq.n	7b2e <AudioConnection::disconnect()+0x8a>
			if (p->next_dest == this) // found the parent of the disconnecting object
    7ac6:	461a      	mov	r2, r3
    7ac8:	68db      	ldr	r3, [r3, #12]
    7aca:	429c      	cmp	r4, r3
    7acc:	d02a      	beq.n	7b24 <AudioConnection::disconnect()+0x80>
		while (p)
    7ace:	2b00      	cmp	r3, #0
    7ad0:	d1f9      	bne.n	7ac6 <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
    7ad2:	6862      	ldr	r2, [r4, #4]
    7ad4:	7a60      	ldrb	r0, [r4, #9]
    7ad6:	6913      	ldr	r3, [r2, #16]
    7ad8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7adc:	b148      	cbz	r0, 7af2 <AudioConnection::disconnect()+0x4e>
		AudioStream::release(dst->inputQueue[dest_index]);
    7ade:	f7ff feed 	bl	78bc <AudioStream::release(audio_block_struct*)>
		__disable_irq();
    7ae2:	b672      	cpsid	i
		dst->inputQueue[dest_index] = NULL;
    7ae4:	6862      	ldr	r2, [r4, #4]
    7ae6:	2500      	movs	r5, #0
    7ae8:	7a60      	ldrb	r0, [r4, #9]
    7aea:	6913      	ldr	r3, [r2, #16]
	src->numConnections--;
    7aec:	6821      	ldr	r1, [r4, #0]
		dst->inputQueue[dest_index] = NULL;
    7aee:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
	src->numConnections--;
    7af2:	7a8b      	ldrb	r3, [r1, #10]
    7af4:	3b01      	subs	r3, #1
    7af6:	b2db      	uxtb	r3, r3
    7af8:	728b      	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
    7afa:	b903      	cbnz	r3, 7afe <AudioConnection::disconnect()+0x5a>
		src->active = false;
    7afc:	720b      	strb	r3, [r1, #8]
	dst->numConnections--;
    7afe:	7a93      	ldrb	r3, [r2, #10]
    7b00:	3b01      	subs	r3, #1
    7b02:	b2db      	uxtb	r3, r3
    7b04:	7293      	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
    7b06:	b903      	cbnz	r3, 7b0a <AudioConnection::disconnect()+0x66>
		dst->active = false;
    7b08:	7213      	strb	r3, [r2, #8]
	next_dest = dst->unused;
    7b0a:	4b0a      	ldr	r3, [pc, #40]	; (7b34 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
    7b0c:	2000      	movs	r0, #0
	next_dest = dst->unused;
    7b0e:	681a      	ldr	r2, [r3, #0]
	isConnected = false;
    7b10:	7420      	strb	r0, [r4, #16]
	dst->unused = this;
    7b12:	601c      	str	r4, [r3, #0]
	next_dest = dst->unused;
    7b14:	60e2      	str	r2, [r4, #12]
	__enable_irq();
    7b16:	b662      	cpsie	i
}
    7b18:	bd38      	pop	{r3, r4, r5, pc}
	if (!isConnected) return 1;
    7b1a:	2001      	movs	r0, #1
}
    7b1c:	bd38      	pop	{r3, r4, r5, pc}
		__enable_irq();
    7b1e:	b662      	cpsie	i
		return 3;
    7b20:	2003      	movs	r0, #3
}
    7b22:	bd38      	pop	{r3, r4, r5, pc}
				p-> next_dest = this->next_dest; // skip parent's link past us
    7b24:	68e3      	ldr	r3, [r4, #12]
    7b26:	60d3      	str	r3, [r2, #12]
				break;
    7b28:	e7d3      	b.n	7ad2 <AudioConnection::disconnect()+0x2e>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    7b2a:	2002      	movs	r0, #2
}
    7b2c:	bd38      	pop	{r3, r4, r5, pc}
		if (p->next_dest) {
    7b2e:	68c3      	ldr	r3, [r0, #12]
			src->destination_list = NULL;
    7b30:	60cb      	str	r3, [r1, #12]
    7b32:	e7ce      	b.n	7ad2 <AudioConnection::disconnect()+0x2e>
    7b34:	20020120 	.word	0x20020120

00007b38 <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
    7b38:	b510      	push	{r4, lr}
    7b3a:	4604      	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
    7b3c:	f7ff ffb2 	bl	7aa4 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
    7b40:	4a09      	ldr	r2, [pc, #36]	; (7b68 <AudioConnection::~AudioConnection()+0x30>)
    7b42:	6813      	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
    7b44:	b143      	cbz	r3, 7b58 <AudioConnection::~AudioConnection()+0x20>
    7b46:	429c      	cmp	r4, r3
    7b48:	d102      	bne.n	7b50 <AudioConnection::~AudioConnection()+0x18>
    7b4a:	e008      	b.n	7b5e <AudioConnection::~AudioConnection()+0x26>
    7b4c:	429c      	cmp	r4, r3
    7b4e:	d005      	beq.n	7b5c <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
    7b50:	461a      	mov	r2, r3
    7b52:	68db      	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
    7b54:	2b00      	cmp	r3, #0
    7b56:	d1f9      	bne.n	7b4c <AudioConnection::~AudioConnection()+0x14>
}
    7b58:	4620      	mov	r0, r4
    7b5a:	bd10      	pop	{r4, pc}
		pp = &((*pp)->next_dest);
    7b5c:	320c      	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
    7b5e:	68e3      	ldr	r3, [r4, #12]
}
    7b60:	4620      	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
    7b62:	6013      	str	r3, [r2, #0]
}
    7b64:	bd10      	pop	{r4, pc}
    7b66:	bf00      	nop
    7b68:	20020120 	.word	0x20020120

00007b6c <AudioStream::update_setup()>:
	if (update_scheduled) return false;
    7b6c:	4b0c      	ldr	r3, [pc, #48]	; (7ba0 <AudioStream::update_setup()+0x34>)
    7b6e:	781a      	ldrb	r2, [r3, #0]
    7b70:	b99a      	cbnz	r2, 7b9a <AudioStream::update_setup()+0x2e>
    7b72:	4a0c      	ldr	r2, [pc, #48]	; (7ba4 <AudioStream::update_setup()+0x38>)
    7b74:	490c      	ldr	r1, [pc, #48]	; (7ba8 <AudioStream::update_setup()+0x3c>)
{
    7b76:	b410      	push	{r4}
    7b78:	f8c2 1158 	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    7b7c:	480b      	ldr	r0, [pc, #44]	; (7bac <AudioStream::update_setup()+0x40>)
    7b7e:	24d0      	movs	r4, #208	; 0xd0
	update_scheduled = true;
    7b80:	2201      	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    7b82:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    7b86:	f880 4046 	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    7b8a:	2440      	movs	r4, #64	; 0x40
	update_scheduled = true;
    7b8c:	4610      	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    7b8e:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
}
    7b92:	f85d 4b04 	ldr.w	r4, [sp], #4
	update_scheduled = true;
    7b96:	701a      	strb	r2, [r3, #0]
}
    7b98:	4770      	bx	lr
	if (update_scheduled) return false;
    7b9a:	2000      	movs	r0, #0
}
    7b9c:	4770      	bx	lr
    7b9e:	bf00      	nop
    7ba0:	200225f9 	.word	0x200225f9
    7ba4:	20009000 	.word	0x20009000
    7ba8:	000077ad 	.word	0x000077ad
    7bac:	e000e400 	.word	0xe000e400

00007bb0 <DMAChannel::begin(bool)>:
{
    7bb0:	b430      	push	{r4, r5}
	__disable_irq();
    7bb2:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    7bb4:	b921      	cbnz	r1, 7bc0 <DMAChannel::begin(bool)+0x10>
    7bb6:	6803      	ldr	r3, [r0, #0]
    7bb8:	b113      	cbz	r3, 7bc0 <DMAChannel::begin(bool)+0x10>
    7bba:	7902      	ldrb	r2, [r0, #4]
    7bbc:	2a0f      	cmp	r2, #15
    7bbe:	d93b      	bls.n	7c38 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    7bc0:	4c24      	ldr	r4, [pc, #144]	; (7c54 <DMAChannel::begin(bool)+0xa4>)
    7bc2:	8821      	ldrh	r1, [r4, #0]
{
    7bc4:	2300      	movs	r3, #0
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    7bc6:	fa41 f203 	asr.w	r2, r1, r3
    7bca:	f012 0201 	ands.w	r2, r2, #1
    7bce:	d008      	beq.n	7be2 <DMAChannel::begin(bool)+0x32>
		if (++ch >= DMA_MAX_CHANNELS) {
    7bd0:	3301      	adds	r3, #1
    7bd2:	2b10      	cmp	r3, #16
    7bd4:	d1f7      	bne.n	7bc6 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    7bd6:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    7bd8:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    7bda:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    7bdc:	6002      	str	r2, [r0, #0]
}
    7bde:	bc30      	pop	{r4, r5}
    7be0:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    7be2:	f04f 0c01 	mov.w	ip, #1
    7be6:	fa0c fc03 	lsl.w	ip, ip, r3
    7bea:	ea41 010c 	orr.w	r1, r1, ip
    7bee:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    7bf0:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7bf2:	4919      	ldr	r1, [pc, #100]	; (7c58 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    7bf4:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    7bf8:	4c18      	ldr	r4, [pc, #96]	; (7c5c <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7bfa:	4419      	add	r1, r3
	channel = ch;
    7bfc:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7c00:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    7c02:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    7c04:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    7c08:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    7c0a:	f240 4482 	movw	r4, #1154	; 0x482
    7c0e:	4914      	ldr	r1, [pc, #80]	; (7c60 <DMAChannel::begin(bool)+0xb0>)
    7c10:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    7c12:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    7c16:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    7c1a:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    7c1e:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7c22:	6003      	str	r3, [r0, #0]
}
    7c24:	bc30      	pop	{r4, r5}
	*p++ = 0;
    7c26:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    7c2a:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    7c2e:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    7c32:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    7c36:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    7c38:	4c06      	ldr	r4, [pc, #24]	; (7c54 <DMAChannel::begin(bool)+0xa4>)
    7c3a:	8821      	ldrh	r1, [r4, #0]
    7c3c:	fa41 f502 	asr.w	r5, r1, r2
    7c40:	07ed      	lsls	r5, r5, #31
    7c42:	d5bf      	bpl.n	7bc4 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    7c44:	4d04      	ldr	r5, [pc, #16]	; (7c58 <DMAChannel::begin(bool)+0xa8>)
    7c46:	4415      	add	r5, r2
    7c48:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    7c4c:	d1ba      	bne.n	7bc4 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    7c4e:	b662      	cpsie	i
		return;
    7c50:	e7c5      	b.n	7bde <DMAChannel::begin(bool)+0x2e>
    7c52:	bf00      	nop
    7c54:	200225e4 	.word	0x200225e4
    7c58:	02007480 	.word	0x02007480
    7c5c:	400fc000 	.word	0x400fc000
    7c60:	400e8000 	.word	0x400e8000

00007c64 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
    7c64:	7903      	ldrb	r3, [r0, #4]
    7c66:	2b0f      	cmp	r3, #15
    7c68:	d811      	bhi.n	7c8e <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    7c6a:	4a09      	ldr	r2, [pc, #36]	; (7c90 <DMAChannel::release()+0x2c>)
    7c6c:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    7c6e:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    7c70:	4908      	ldr	r1, [pc, #32]	; (7c94 <DMAChannel::release()+0x30>)
    7c72:	2201      	movs	r2, #1
    7c74:	f890 c004 	ldrb.w	ip, [r0, #4]
    7c78:	880b      	ldrh	r3, [r1, #0]
    7c7a:	fa02 f20c 	lsl.w	r2, r2, ip
    7c7e:	ea23 0302 	bic.w	r3, r3, r2
    7c82:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    7c84:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    7c86:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    7c88:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    7c8a:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    7c8c:	6003      	str	r3, [r0, #0]
}
    7c8e:	4770      	bx	lr
    7c90:	400e8000 	.word	0x400e8000
    7c94:	200225e4 	.word	0x200225e4

00007c98 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7c98:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7c9c:	b672      	cpsid	i
	if (_triggered == false) {
    7c9e:	7f43      	ldrb	r3, [r0, #29]
    7ca0:	b95b      	cbnz	r3, 7cba <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    7ca2:	7f01      	ldrb	r1, [r0, #28]
    7ca4:	2901      	cmp	r1, #1
{
    7ca6:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    7ca8:	d00b      	beq.n	7cc2 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    7caa:	2903      	cmp	r1, #3
    7cac:	d013      	beq.n	7cd6 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    7cae:	2301      	movs	r3, #1
    7cb0:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    7cb2:	b902      	cbnz	r2, 7cb6 <EventResponder::triggerEventNotImmediate()+0x1e>
    7cb4:	b662      	cpsie	i
}
    7cb6:	bc30      	pop	{r4, r5}
    7cb8:	4770      	bx	lr
    7cba:	b90a      	cbnz	r2, 7cc0 <EventResponder::triggerEventNotImmediate()+0x28>
    7cbc:	b662      	cpsie	i
    7cbe:	4770      	bx	lr
    7cc0:	4770      	bx	lr
			if (firstYield == nullptr) {
    7cc2:	4c12      	ldr	r4, [pc, #72]	; (7d0c <EventResponder::triggerEventNotImmediate()+0x74>)
    7cc4:	6821      	ldr	r1, [r4, #0]
    7cc6:	b1b1      	cbz	r1, 7cf6 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    7cc8:	4911      	ldr	r1, [pc, #68]	; (7d10 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    7cca:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    7ccc:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    7cce:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    7cd0:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    7cd2:	6158      	str	r0, [r3, #20]
				lastYield = this;
    7cd4:	e7eb      	b.n	7cae <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    7cd6:	4d0f      	ldr	r5, [pc, #60]	; (7d14 <EventResponder::triggerEventNotImmediate()+0x7c>)
    7cd8:	490f      	ldr	r1, [pc, #60]	; (7d18 <EventResponder::triggerEventNotImmediate()+0x80>)
    7cda:	682c      	ldr	r4, [r5, #0]
    7cdc:	b18c      	cbz	r4, 7d02 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    7cde:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    7ce0:	680b      	ldr	r3, [r1, #0]
    7ce2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    7ce4:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    7ce6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7cea:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    7cee:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    7cf0:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    7cf4:	e7db      	b.n	7cae <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    7cf6:	4b06      	ldr	r3, [pc, #24]	; (7d10 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    7cf8:	6020      	str	r0, [r4, #0]
				lastYield = this;
    7cfa:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    7cfc:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    7d00:	e7d5      	b.n	7cae <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    7d02:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    7d06:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    7d08:	e7ed      	b.n	7ce6 <EventResponder::triggerEventNotImmediate()+0x4e>
    7d0a:	bf00      	nop
    7d0c:	20020148 	.word	0x20020148
    7d10:	20020154 	.word	0x20020154
    7d14:	20020150 	.word	0x20020150
    7d18:	2002014c 	.word	0x2002014c

00007d1c <EventResponder::runFromInterrupt()>:
{
    7d1c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7d1e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7d22:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    7d24:	4c0c      	ldr	r4, [pc, #48]	; (7d58 <EventResponder::runFromInterrupt()+0x3c>)
    7d26:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7d28:	b180      	cbz	r0, 7d4c <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    7d2a:	4e0c      	ldr	r6, [pc, #48]	; (7d5c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    7d2c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    7d2e:	6943      	ldr	r3, [r0, #20]
    7d30:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    7d32:	b173      	cbz	r3, 7d52 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    7d34:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    7d36:	b902      	cbnz	r2, 7d3a <EventResponder::runFromInterrupt()+0x1e>
    7d38:	b662      	cpsie	i
			(*(first->_function))(*first);
    7d3a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    7d3c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    7d3e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7d40:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7d44:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    7d46:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7d48:	2800      	cmp	r0, #0
    7d4a:	d1f0      	bne.n	7d2e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    7d4c:	b902      	cbnz	r2, 7d50 <EventResponder::runFromInterrupt()+0x34>
    7d4e:	b662      	cpsie	i
}
    7d50:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    7d52:	6033      	str	r3, [r6, #0]
    7d54:	e7ef      	b.n	7d36 <EventResponder::runFromInterrupt()+0x1a>
    7d56:	bf00      	nop
    7d58:	20020150 	.word	0x20020150
    7d5c:	2002014c 	.word	0x2002014c

00007d60 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    7d60:	f7ff bfdc 	b.w	7d1c <EventResponder::runFromInterrupt()>

00007d64 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    7d64:	4904      	ldr	r1, [pc, #16]	; (7d78 <systick_isr+0x14>)
	systick_millis_count++;
    7d66:	4a05      	ldr	r2, [pc, #20]	; (7d7c <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    7d68:	6849      	ldr	r1, [r1, #4]
    7d6a:	4b05      	ldr	r3, [pc, #20]	; (7d80 <systick_isr+0x1c>)
    7d6c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    7d6e:	6813      	ldr	r3, [r2, #0]
    7d70:	3301      	adds	r3, #1
    7d72:	6013      	str	r3, [r2, #0]
}
    7d74:	4770      	bx	lr
    7d76:	bf00      	nop
    7d78:	e0001000 	.word	0xe0001000
    7d7c:	20022564 	.word	0x20022564
    7d80:	20022560 	.word	0x20022560

00007d84 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
    7d84:	b510      	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    7d86:	4c13      	ldr	r4, [pc, #76]	; (7dd4 <pit_isr()+0x50>)
    7d88:	6823      	ldr	r3, [r4, #0]
    7d8a:	b113      	cbz	r3, 7d92 <pit_isr()+0xe>
    7d8c:	4a12      	ldr	r2, [pc, #72]	; (7dd8 <pit_isr()+0x54>)
    7d8e:	68d1      	ldr	r1, [r2, #12]
    7d90:	b9e1      	cbnz	r1, 7dcc <pit_isr()+0x48>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    7d92:	6863      	ldr	r3, [r4, #4]
    7d94:	b113      	cbz	r3, 7d9c <pit_isr()+0x18>
    7d96:	4a10      	ldr	r2, [pc, #64]	; (7dd8 <pit_isr()+0x54>)
    7d98:	69d1      	ldr	r1, [r2, #28]
    7d9a:	b999      	cbnz	r1, 7dc4 <pit_isr()+0x40>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    7d9c:	68a3      	ldr	r3, [r4, #8]
    7d9e:	b113      	cbz	r3, 7da6 <pit_isr()+0x22>
    7da0:	4a0d      	ldr	r2, [pc, #52]	; (7dd8 <pit_isr()+0x54>)
    7da2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7da4:	b951      	cbnz	r1, 7dbc <pit_isr()+0x38>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    7da6:	68e3      	ldr	r3, [r4, #12]
    7da8:	b13b      	cbz	r3, 7dba <pit_isr()+0x36>
    7daa:	4a0b      	ldr	r2, [pc, #44]	; (7dd8 <pit_isr()+0x54>)
    7dac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    7dae:	b121      	cbz	r1, 7dba <pit_isr()+0x36>
    7db0:	2101      	movs	r1, #1
#endif
}
    7db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    7db6:	63d1      	str	r1, [r2, #60]	; 0x3c
    7db8:	4718      	bx	r3
}
    7dba:	bd10      	pop	{r4, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    7dbc:	2101      	movs	r1, #1
    7dbe:	62d1      	str	r1, [r2, #44]	; 0x2c
    7dc0:	4798      	blx	r3
    7dc2:	e7f0      	b.n	7da6 <pit_isr()+0x22>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    7dc4:	2101      	movs	r1, #1
    7dc6:	61d1      	str	r1, [r2, #28]
    7dc8:	4798      	blx	r3
    7dca:	e7e7      	b.n	7d9c <pit_isr()+0x18>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    7dcc:	2101      	movs	r1, #1
    7dce:	60d1      	str	r1, [r2, #12]
    7dd0:	4798      	blx	r3
    7dd2:	e7de      	b.n	7d92 <pit_isr()+0xe>
    7dd4:	200092c0 	.word	0x200092c0
    7dd8:	40084100 	.word	0x40084100

00007ddc <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
	if (channel) {
    7ddc:	6803      	ldr	r3, [r0, #0]
{
    7dde:	4684      	mov	ip, r0
    7de0:	b410      	push	{r4}
	if (channel) {
    7de2:	b373      	cbz	r3, 7e42 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x66>
		channel->TCTRL = 0;
    7de4:	2000      	movs	r0, #0
    7de6:	6098      	str	r0, [r3, #8]
		channel->TFLG = 1;
    7de8:	2001      	movs	r0, #1
    7dea:	60d8      	str	r0, [r3, #12]
	channel->LDVAL = cycles;
    7dec:	601a      	str	r2, [r3, #0]
	int index = channel - IMXRT_PIT_CHANNELS;
    7dee:	4a23      	ldr	r2, [pc, #140]	; (7e7c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
	funct_table[index] = funct;
    7df0:	4823      	ldr	r0, [pc, #140]	; (7e80 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
	int index = channel - IMXRT_PIT_CHANNELS;
    7df2:	441a      	add	r2, r3
    7df4:	4c23      	ldr	r4, [pc, #140]	; (7e84 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
    7df6:	1112      	asrs	r2, r2, #4
	funct_table[index] = funct;
    7df8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	channel->TCTRL = 3;
    7dfc:	2003      	movs	r0, #3
	nvic_priorites[index] = nvic_priority;
    7dfe:	4922      	ldr	r1, [pc, #136]	; (7e88 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	channel->TCTRL = 3;
    7e00:	6098      	str	r0, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    7e02:	f89c 3004 	ldrb.w	r3, [ip, #4]
    7e06:	4821      	ldr	r0, [pc, #132]	; (7e8c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
    7e08:	548b      	strb	r3, [r1, r2]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    7e0a:	780b      	ldrb	r3, [r1, #0]
    7e0c:	784a      	ldrb	r2, [r1, #1]
    7e0e:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
    7e12:	4293      	cmp	r3, r2
    7e14:	7888      	ldrb	r0, [r1, #2]
    7e16:	bf28      	it	cs
    7e18:	4613      	movcs	r3, r2
    7e1a:	78ca      	ldrb	r2, [r1, #3]
    7e1c:	4283      	cmp	r3, r0
    7e1e:	bf28      	it	cs
    7e20:	4603      	movcs	r3, r0
    7e22:	4293      	cmp	r3, r2
    7e24:	bf28      	it	cs
    7e26:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    7e28:	4c19      	ldr	r4, [pc, #100]	; (7e90 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    7e2a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    7e2e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
    7e32:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    7e34:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
}
    7e38:	f85d 4b04 	ldr.w	r4, [sp], #4
	NVIC_ENABLE_IRQ(IRQ_PIT);
    7e3c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
    7e40:	4770      	bx	lr
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7e42:	4814      	ldr	r0, [pc, #80]	; (7e94 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    7e44:	4c14      	ldr	r4, [pc, #80]	; (7e98 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>)
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7e46:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    7e48:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    7e4c:	66c3      	str	r3, [r0, #108]	; 0x6c
		PIT_MCR = 1;
    7e4e:	2001      	movs	r0, #1
    7e50:	4b12      	ldr	r3, [pc, #72]	; (7e9c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc0>)
    7e52:	6018      	str	r0, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    7e54:	4812      	ldr	r0, [pc, #72]	; (7ea0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc4>)
    7e56:	4603      	mov	r3, r0
    7e58:	f8cc 0000 	str.w	r0, [ip]
			if (channel->TCTRL == 0) break;
    7e5c:	6898      	ldr	r0, [r3, #8]
    7e5e:	2800      	cmp	r0, #0
    7e60:	d0c4      	beq.n	7dec <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x10>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    7e62:	3310      	adds	r3, #16
    7e64:	42a3      	cmp	r3, r4
    7e66:	f8cc 3000 	str.w	r3, [ip]
    7e6a:	d1f7      	bne.n	7e5c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
				channel = NULL;
    7e6c:	2300      	movs	r3, #0
}
    7e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
				return false;
    7e72:	4618      	mov	r0, r3
				channel = NULL;
    7e74:	f8cc 3000 	str.w	r3, [ip]
}
    7e78:	4770      	bx	lr
    7e7a:	bf00      	nop
    7e7c:	bff7bf00 	.word	0xbff7bf00
    7e80:	200092c0 	.word	0x200092c0
    7e84:	00007d85 	.word	0x00007d85
    7e88:	200088d8 	.word	0x200088d8
    7e8c:	20009000 	.word	0x20009000
    7e90:	e000e400 	.word	0xe000e400
    7e94:	400fc000 	.word	0x400fc000
    7e98:	40084140 	.word	0x40084140
    7e9c:	40084000 	.word	0x40084000
    7ea0:	40084100 	.word	0x40084100

00007ea4 <IntervalTimer::end()>:
	if (channel) {
    7ea4:	6802      	ldr	r2, [r0, #0]
    7ea6:	b322      	cbz	r2, 7ef2 <IntervalTimer::end()+0x4e>
		int index = channel - IMXRT_PIT_CHANNELS;
    7ea8:	4b12      	ldr	r3, [pc, #72]	; (7ef4 <IntervalTimer::end()+0x50>)
		funct_table[index] = nullptr;
    7eaa:	2100      	movs	r1, #0
		nvic_priorites[index] = 255;
    7eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
		int index = channel - IMXRT_PIT_CHANNELS;
    7eb0:	4413      	add	r3, r2
void IntervalTimer::end() {
    7eb2:	b510      	push	{r4, lr}
		int index = channel - IMXRT_PIT_CHANNELS;
    7eb4:	111b      	asrs	r3, r3, #4
		funct_table[index] = nullptr;
    7eb6:	4c10      	ldr	r4, [pc, #64]	; (7ef8 <IntervalTimer::end()+0x54>)
		channel->TCTRL = 0;
    7eb8:	6091      	str	r1, [r2, #8]
		funct_table[index] = nullptr;
    7eba:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
		channel->TFLG = 1;
    7ebe:	2401      	movs	r4, #1
    7ec0:	60d4      	str	r4, [r2, #12]
		nvic_priorites[index] = 255;
    7ec2:	4a0e      	ldr	r2, [pc, #56]	; (7efc <IntervalTimer::end()+0x58>)
    7ec4:	f802 c003 	strb.w	ip, [r2, r3]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    7ec8:	7813      	ldrb	r3, [r2, #0]
    7eca:	f892 c001 	ldrb.w	ip, [r2, #1]
    7ece:	f892 e002 	ldrb.w	lr, [r2, #2]
    7ed2:	4563      	cmp	r3, ip
    7ed4:	bf28      	it	cs
    7ed6:	4663      	movcs	r3, ip
    7ed8:	f892 c003 	ldrb.w	ip, [r2, #3]
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    7edc:	4a08      	ldr	r2, [pc, #32]	; (7f00 <IntervalTimer::end()+0x5c>)
    7ede:	4573      	cmp	r3, lr
    7ee0:	bf28      	it	cs
    7ee2:	4673      	movcs	r3, lr
    7ee4:	4563      	cmp	r3, ip
    7ee6:	bf28      	it	cs
    7ee8:	4663      	movcs	r3, ip
    7eea:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
    7eee:	6001      	str	r1, [r0, #0]
}
    7ef0:	bd10      	pop	{r4, pc}
    7ef2:	4770      	bx	lr
    7ef4:	bff7bf00 	.word	0xbff7bf00
    7ef8:	200092c0 	.word	0x200092c0
    7efc:	200088d8 	.word	0x200088d8
    7f00:	e000e400 	.word	0xe000e400

00007f04 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7f04:	4608      	mov	r0, r1
    7f06:	f002 bb6f 	b.w	a5e8 <usb_serial_putchar>
    7f0a:	bf00      	nop

00007f0c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    7f0c:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7f0e:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    7f10:	bf08      	it	eq
    7f12:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7f14:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    7f16:	b391      	cbz	r1, 7f7e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    7f18:	f04f 0e21 	mov.w	lr, #33	; 0x21
    7f1c:	e001      	b.n	7f22 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    7f1e:	fa5f fe86 	uxtb.w	lr, r6
    7f22:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    7f26:	fbb1 f5f2 	udiv	r5, r1, r2
    7f2a:	fb02 1415 	mls	r4, r2, r5, r1
    7f2e:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7f32:	2c09      	cmp	r4, #9
    7f34:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    7f38:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    7f3c:	bf98      	it	ls
    7f3e:	fa5f f48c 	uxtbls.w	r4, ip
    7f42:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    7f46:	bf88      	it	hi
    7f48:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    7f4a:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7f4c:	44ec      	add	ip, sp
			n /= base;
    7f4e:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7f50:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    7f54:	d2e3      	bcs.n	7f1e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    7f56:	b14b      	cbz	r3, 7f6c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    7f58:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    7f5c:	222d      	movs	r2, #45	; 0x2d
		i--;
    7f5e:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    7f62:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    7f66:	446b      	add	r3, sp
    7f68:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    7f6c:	6803      	ldr	r3, [r0, #0]
    7f6e:	a901      	add	r1, sp, #4
    7f70:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    7f74:	685b      	ldr	r3, [r3, #4]
    7f76:	4471      	add	r1, lr
    7f78:	4798      	blx	r3
}
    7f7a:	b00a      	add	sp, #40	; 0x28
    7f7c:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    7f7e:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    7f80:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    7f84:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    7f88:	e7e5      	b.n	7f56 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    7f8a:	bf00      	nop

00007f8c <Print::print(long)>:
	if (n < 0) {
    7f8c:	2900      	cmp	r1, #0
    7f8e:	db03      	blt.n	7f98 <Print::print(long)+0xc>
	uint8_t sign=0;
    7f90:	2300      	movs	r3, #0
	if (base == 0) {
    7f92:	220a      	movs	r2, #10
    7f94:	f7ff bfba 	b.w	7f0c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    7f98:	4249      	negs	r1, r1
		sign = '-';
    7f9a:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    7f9c:	220a      	movs	r2, #10
    7f9e:	f7ff bfb5 	b.w	7f0c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7fa2:	bf00      	nop

00007fa4 <Print::println()>:
{
    7fa4:	b500      	push	{lr}
	return write(buf, 2);
    7fa6:	6803      	ldr	r3, [r0, #0]
{
    7fa8:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    7faa:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    7fae:	2202      	movs	r2, #2
    7fb0:	a901      	add	r1, sp, #4
    7fb2:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    7fb4:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    7fb8:	4798      	blx	r3
}
    7fba:	b003      	add	sp, #12
    7fbc:	f85d fb04 	ldr.w	pc, [sp], #4

00007fc0 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7fc0:	4b05      	ldr	r3, [pc, #20]	; (7fd8 <_write+0x18>)
    7fc2:	2802      	cmp	r0, #2
    7fc4:	bf88      	it	hi
    7fc6:	4603      	movhi	r3, r0
{
    7fc8:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7fca:	681c      	ldr	r4, [r3, #0]
    7fcc:	4618      	mov	r0, r3
    7fce:	6863      	ldr	r3, [r4, #4]
}
    7fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7fd4:	4718      	bx	r3
    7fd6:	bf00      	nop
    7fd8:	200088bc 	.word	0x200088bc

00007fdc <Print::printf(char const*, ...)>:
{
    7fdc:	b40e      	push	{r1, r2, r3}
    7fde:	b500      	push	{lr}
    7fe0:	b082      	sub	sp, #8
    7fe2:	aa03      	add	r2, sp, #12
    7fe4:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    7fe8:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    7fea:	f004 fcfb 	bl	c9e4 <vdprintf>
}
    7fee:	b002      	add	sp, #8
    7ff0:	f85d eb04 	ldr.w	lr, [sp], #4
    7ff4:	b003      	add	sp, #12
    7ff6:	4770      	bx	lr

00007ff8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    7ff8:	b95a      	cbnz	r2, 8012 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    7ffa:	6803      	ldr	r3, [r0, #0]
    7ffc:	b2c9      	uxtb	r1, r1
    7ffe:	4a07      	ldr	r2, [pc, #28]	; (801c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    8000:	681b      	ldr	r3, [r3, #0]
    8002:	4293      	cmp	r3, r2
{
    8004:	b500      	push	{lr}
    8006:	d106      	bne.n	8016 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    8008:	4608      	mov	r0, r1
}
    800a:	f85d eb04 	ldr.w	lr, [sp], #4
    800e:	f002 baeb 	b.w	a5e8 <usb_serial_putchar>
    8012:	f7ff bf7b 	b.w	7f0c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    8016:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    801a:	4718      	bx	r3
    801c:	00007f05 	.word	0x00007f05

00008020 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    8020:	eeb4 0b40 	vcmp.f64	d0, d0
{
    8024:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    8026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    802a:	4605      	mov	r5, r0
    802c:	ed2d 8b02 	vpush	{d8}
    8030:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    8032:	d67c      	bvs.n	812e <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    8034:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    8038:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8158 <Print::printFloat(double, unsigned char)+0x138>
    803c:	eeb4 7b46 	vcmp.f64	d7, d6
    8040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8044:	dc6b      	bgt.n	811e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    8046:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8160 <Print::printFloat(double, unsigned char)+0x140>
    804a:	eeb4 0bc7 	vcmpe.f64	d0, d7
    804e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8052:	dc5a      	bgt.n	810a <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    8054:	ed9f 7b44 	vldr	d7, [pc, #272]	; 8168 <Print::printFloat(double, unsigned char)+0x148>
    8058:	eeb4 0bc7 	vcmpe.f64	d0, d7
    805c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8060:	d453      	bmi.n	810a <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    8062:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    8066:	460c      	mov	r4, r1
    8068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    806c:	d45b      	bmi.n	8126 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    806e:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    8070:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    8074:	2c00      	cmp	r4, #0
    8076:	d05e      	beq.n	8136 <Print::printFloat(double, unsigned char)+0x116>
    8078:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    807c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8170 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    8080:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    8084:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    8088:	fa5f f28c 	uxtb.w	r2, ip
    808c:	42a2      	cmp	r2, r4
    808e:	d3f7      	bcc.n	8080 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    8090:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    8094:	220a      	movs	r2, #10
    8096:	4628      	mov	r0, r5
    8098:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    809c:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    80a0:	ee17 1a90 	vmov	r1, s15
    80a4:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    80a8:	f7ff ff30 	bl	7f0c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    80ac:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    80ae:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    80b2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    80b6:	4606      	mov	r6, r0
		buf[0] = '.';
    80b8:	bf28      	it	cs
    80ba:	240f      	movcs	r4, #15
    80bc:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    80c0:	f10d 0309 	add.w	r3, sp, #9
    80c4:	aa02      	add	r2, sp, #8
    80c6:	1e61      	subs	r1, r4, #1
    80c8:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    80cc:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    80d0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    80d4:	edcd 7a01 	vstr	s15, [sp, #4]
    80d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    80dc:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    80e0:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    80e2:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    80e6:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    80ea:	4291      	cmp	r1, r2
			remainder -= n; 
    80ec:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    80f0:	d1ec      	bne.n	80cc <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    80f2:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    80f4:	3401      	adds	r4, #1
		count += write(buf, count);
    80f6:	a902      	add	r1, sp, #8
    80f8:	4628      	mov	r0, r5
    80fa:	685b      	ldr	r3, [r3, #4]
    80fc:	b2e2      	uxtb	r2, r4
    80fe:	4798      	blx	r3
	}
	return count;
}
    8100:	4630      	mov	r0, r6
    8102:	b006      	add	sp, #24
    8104:	ecbd 8b02 	vpop	{d8}
    8108:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    810a:	682b      	ldr	r3, [r5, #0]
    810c:	2203      	movs	r2, #3
    810e:	491a      	ldr	r1, [pc, #104]	; (8178 <Print::printFloat(double, unsigned char)+0x158>)
    8110:	685b      	ldr	r3, [r3, #4]
    8112:	b006      	add	sp, #24
    8114:	ecbd 8b02 	vpop	{d8}
    8118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    811c:	4718      	bx	r3
    811e:	6803      	ldr	r3, [r0, #0]
    8120:	2203      	movs	r2, #3
    8122:	4916      	ldr	r1, [pc, #88]	; (817c <Print::printFloat(double, unsigned char)+0x15c>)
    8124:	e7f4      	b.n	8110 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    8126:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    812a:	2301      	movs	r3, #1
    812c:	e7a0      	b.n	8070 <Print::printFloat(double, unsigned char)+0x50>
    812e:	6803      	ldr	r3, [r0, #0]
    8130:	2203      	movs	r2, #3
    8132:	4913      	ldr	r1, [pc, #76]	; (8180 <Print::printFloat(double, unsigned char)+0x160>)
    8134:	e7ec      	b.n	8110 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    8136:	ee30 0b07 	vadd.f64	d0, d0, d7
    813a:	220a      	movs	r2, #10
    813c:	4628      	mov	r0, r5
    813e:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    8142:	ee17 1a90 	vmov	r1, s15
}
    8146:	b006      	add	sp, #24
    8148:	ecbd 8b02 	vpop	{d8}
    814c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8150:	f7ff bedc 	b.w	7f0c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    8154:	f3af 8000 	nop.w
    8158:	ffffffff 	.word	0xffffffff
    815c:	7fefffff 	.word	0x7fefffff
    8160:	e0000000 	.word	0xe0000000
    8164:	41efffff 	.word	0x41efffff
    8168:	e0000000 	.word	0xe0000000
    816c:	c1efffff 	.word	0xc1efffff
    8170:	9999999a 	.word	0x9999999a
    8174:	3fb99999 	.word	0x3fb99999
    8178:	20000828 	.word	0x20000828
    817c:	20000824 	.word	0x20000824
    8180:	20000820 	.word	0x20000820

00008184 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    8184:	f002 ba20 	b.w	a5c8 <usb_serial_getchar>

00008188 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    8188:	f002 b9b8 	b.w	a4fc <usb_serial_peekchar>

0000818c <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    818c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    8190:	b392      	cbz	r2, 81f8 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    8192:	4617      	mov	r7, r2
    8194:	fab3 f283 	clz	r2, r3
    8198:	0952      	lsrs	r2, r2, #5
    819a:	b36b      	cbz	r3, 81f8 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    819c:	f1b3 0801 	subs.w	r8, r3, #1
    81a0:	d025      	beq.n	81ee <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    81a2:	eb07 0a08 	add.w	sl, r7, r8
    81a6:	4683      	mov	fp, r0
    81a8:	4689      	mov	r9, r1
	size_t index = 0;
    81aa:	4690      	mov	r8, r2
    81ac:	4c17      	ldr	r4, [pc, #92]	; (820c <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    81ae:	4e18      	ldr	r6, [pc, #96]	; (8210 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    81b0:	6825      	ldr	r5, [r4, #0]
    81b2:	e00b      	b.n	81cc <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    81b4:	f002 fa08 	bl	a5c8 <usb_serial_getchar>
    if (c >= 0) return c;
    81b8:	2800      	cmp	r0, #0
    81ba:	da10      	bge.n	81de <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    81bc:	f002 faa8 	bl	a710 <yield>
    81c0:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    81c2:	f8db 2008 	ldr.w	r2, [fp, #8]
    81c6:	1b5b      	subs	r3, r3, r5
    81c8:	4293      	cmp	r3, r2
    81ca:	d21a      	bcs.n	8202 <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    81cc:	f8db 3000 	ldr.w	r3, [fp]
    81d0:	695b      	ldr	r3, [r3, #20]
    81d2:	42b3      	cmp	r3, r6
    81d4:	d0ee      	beq.n	81b4 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    81d6:	4658      	mov	r0, fp
    81d8:	4798      	blx	r3
    if (c >= 0) return c;
    81da:	2800      	cmp	r0, #0
    81dc:	dbee      	blt.n	81bc <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    81de:	4548      	cmp	r0, r9
    81e0:	d005      	beq.n	81ee <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    81e2:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    81e6:	45ba      	cmp	sl, r7
		index++;
    81e8:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    81ec:	d1e0      	bne.n	81b0 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    81ee:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    81f0:	4640      	mov	r0, r8
	*buffer = 0;
    81f2:	703b      	strb	r3, [r7, #0]
}
    81f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    81f8:	f04f 0800 	mov.w	r8, #0
}
    81fc:	4640      	mov	r0, r8
    81fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    8202:	2301      	movs	r3, #1
    8204:	f88b 300c 	strb.w	r3, [fp, #12]
    8208:	e7f1      	b.n	81ee <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    820a:	bf00      	nop
    820c:	20022564 	.word	0x20022564
    8210:	00008185 	.word	0x00008185

00008214 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8214:	49a2      	ldr	r1, [pc, #648]	; (84a0 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8216:	4ba3      	ldr	r3, [pc, #652]	; (84a4 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    8218:	4288      	cmp	r0, r1
{
    821a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    821e:	4ca2      	ldr	r4, [pc, #648]	; (84a8 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8220:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    8222:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    8224:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    8228:	d91b      	bls.n	8262 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    822a:	4ba0      	ldr	r3, [pc, #640]	; (84ac <set_arm_clock+0x298>)
    822c:	4298      	cmp	r0, r3
    822e:	f240 8102 	bls.w	8436 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    8232:	1ac3      	subs	r3, r0, r3
    8234:	499e      	ldr	r1, [pc, #632]	; (84b0 <set_arm_clock+0x29c>)
    8236:	0a1b      	lsrs	r3, r3, #8
    8238:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    823c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    8240:	09db      	lsrs	r3, r3, #7
    8242:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8246:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    824a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    824e:	428b      	cmp	r3, r1
    8250:	bf28      	it	cs
    8252:	460b      	movcs	r3, r1
    8254:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    8258:	4b96      	ldr	r3, [pc, #600]	; (84b4 <set_arm_clock+0x2a0>)
    825a:	fba3 3707 	umull	r3, r7, r3, r7
    825e:	08ff      	lsrs	r7, r7, #3
    8260:	e004      	b.n	826c <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    8262:	4f95      	ldr	r7, [pc, #596]	; (84b8 <set_arm_clock+0x2a4>)
    8264:	42b8      	cmp	r0, r7
    8266:	bf8c      	ite	hi
    8268:	270e      	movhi	r7, #14
    826a:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    826c:	498d      	ldr	r1, [pc, #564]	; (84a4 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    826e:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8272:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8276:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8278:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    827c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8280:	d20c      	bcs.n	829c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    8282:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8286:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    828a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    828e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8292:	680b      	ldr	r3, [r1, #0]
    8294:	2b00      	cmp	r3, #0
    8296:	dafc      	bge.n	8292 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    8298:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    829c:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    82a0:	d124      	bne.n	82ec <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    82a2:	4986      	ldr	r1, [pc, #536]	; (84bc <set_arm_clock+0x2a8>)
    82a4:	690c      	ldr	r4, [r1, #16]
    82a6:	4986      	ldr	r1, [pc, #536]	; (84c0 <set_arm_clock+0x2ac>)
    82a8:	43a1      	bics	r1, r4
    82aa:	f000 80ea 	beq.w	8482 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    82ae:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    82b2:	4634      	mov	r4, r6
    82b4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    82b8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    82bc:	d004      	beq.n	82c8 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    82be:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    82c2:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    82c4:	4b77      	ldr	r3, [pc, #476]	; (84a4 <set_arm_clock+0x290>)
    82c6:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    82c8:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    82cc:	d007      	beq.n	82de <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    82ce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    82d2:	4974      	ldr	r1, [pc, #464]	; (84a4 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    82d4:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    82d6:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    82d8:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    82da:	071a      	lsls	r2, r3, #28
    82dc:	d4fc      	bmi.n	82d8 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    82de:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    82e2:	4a70      	ldr	r2, [pc, #448]	; (84a4 <set_arm_clock+0x290>)
    82e4:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    82e6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    82e8:	069b      	lsls	r3, r3, #26
    82ea:	d4fc      	bmi.n	82e6 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    82ec:	4c75      	ldr	r4, [pc, #468]	; (84c4 <set_arm_clock+0x2b0>)
    82ee:	42a0      	cmp	r0, r4
    82f0:	f200 80ce 	bhi.w	8490 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    82f4:	f04f 0c01 	mov.w	ip, #1
    82f8:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    82fa:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    82fc:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    8300:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    8304:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    8308:	42a2      	cmp	r2, r4
    830a:	d818      	bhi.n	833e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    830c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    8310:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    8314:	f040 808d 	bne.w	8432 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    8318:	f1bc 0f04 	cmp.w	ip, #4
    831c:	f200 8091 	bhi.w	8442 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    8320:	180a      	adds	r2, r1, r0
    8322:	42a2      	cmp	r2, r4
    8324:	f200 80a4 	bhi.w	8470 <set_arm_clock+0x25c>
    8328:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    832c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    832e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    8332:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    8336:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    833a:	42a2      	cmp	r2, r4
    833c:	d9e6      	bls.n	830c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    833e:	f10c 31ff 	add.w	r1, ip, #4294967295
    8342:	028c      	lsls	r4, r1, #10
    8344:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8348:	485f      	ldr	r0, [pc, #380]	; (84c8 <set_arm_clock+0x2b4>)
    834a:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    834c:	4a5f      	ldr	r2, [pc, #380]	; (84cc <set_arm_clock+0x2b8>)
    834e:	4290      	cmp	r0, r2
    8350:	d97f      	bls.n	8452 <set_arm_clock+0x23e>
    8352:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 84f8 <set_arm_clock+0x2e4>
    8356:	226c      	movs	r2, #108	; 0x6c
    8358:	485d      	ldr	r0, [pc, #372]	; (84d0 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    835a:	4d58      	ldr	r5, [pc, #352]	; (84bc <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    835c:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8360:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    8364:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8368:	f8df c190 	ldr.w	ip, [pc, #400]	; 84fc <set_arm_clock+0x2e8>
    836c:	ea0e 0c0c 	and.w	ip, lr, ip
    8370:	45d4      	cmp	ip, sl
    8372:	d009      	beq.n	8388 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    8374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    8378:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    837c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    8380:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8382:	682a      	ldr	r2, [r5, #0]
    8384:	2a00      	cmp	r2, #0
    8386:	dafc      	bge.n	8382 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    8388:	4a46      	ldr	r2, [pc, #280]	; (84a4 <set_arm_clock+0x290>)
    838a:	6915      	ldr	r5, [r2, #16]
    838c:	f005 0507 	and.w	r5, r5, #7
    8390:	429d      	cmp	r5, r3
    8392:	d003      	beq.n	839c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    8394:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    8396:	6c93      	ldr	r3, [r2, #72]	; 0x48
    8398:	03dd      	lsls	r5, r3, #15
    839a:	d4fc      	bmi.n	8396 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    839c:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    83a0:	d009      	beq.n	83b6 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    83a2:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    83a6:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    83aa:	4a3e      	ldr	r2, [pc, #248]	; (84a4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    83ac:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    83ae:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    83b0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    83b2:	0799      	lsls	r1, r3, #30
    83b4:	d4fc      	bmi.n	83b0 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    83b6:	4947      	ldr	r1, [pc, #284]	; (84d4 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    83b8:	4a47      	ldr	r2, [pc, #284]	; (84d8 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    83ba:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    83bc:	4291      	cmp	r1, r2
    83be:	d83c      	bhi.n	843a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    83c0:	4b46      	ldr	r3, [pc, #280]	; (84dc <set_arm_clock+0x2c8>)
    83c2:	09c9      	lsrs	r1, r1, #7
    83c4:	fba3 3101 	umull	r3, r1, r3, r1
    83c8:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    83ca:	1e4b      	subs	r3, r1, #1
    83cc:	021b      	lsls	r3, r3, #8
    83ce:	ea86 0203 	eor.w	r2, r6, r3
    83d2:	f412 7f40 	tst.w	r2, #768	; 0x300
    83d6:	d006      	beq.n	83e6 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    83d8:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    83dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    83e0:	4a30      	ldr	r2, [pc, #192]	; (84a4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    83e2:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    83e4:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    83e6:	4a2f      	ldr	r2, [pc, #188]	; (84a4 <set_arm_clock+0x290>)
    83e8:	6953      	ldr	r3, [r2, #20]
    83ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    83ee:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    83f0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    83f2:	069b      	lsls	r3, r3, #26
    83f4:	d4fc      	bmi.n	83f0 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    83f6:	4b3a      	ldr	r3, [pc, #232]	; (84e0 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    83f8:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    83fa:	fba3 2300 	umull	r2, r3, r3, r0
    83fe:	f04f 32ff 	mov.w	r2, #4294967295
    8402:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    8406:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    840a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    840e:	4a35      	ldr	r2, [pc, #212]	; (84e4 <set_arm_clock+0x2d0>)
    8410:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    8412:	4a35      	ldr	r2, [pc, #212]	; (84e8 <set_arm_clock+0x2d4>)
    8414:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8416:	4a35      	ldr	r2, [pc, #212]	; (84ec <set_arm_clock+0x2d8>)
    8418:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    841a:	d208      	bcs.n	842e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    841c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8420:	4a21      	ldr	r2, [pc, #132]	; (84a8 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    8422:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    8426:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8428:	6813      	ldr	r3, [r2, #0]
    842a:	2b00      	cmp	r3, #0
    842c:	dafc      	bge.n	8428 <set_arm_clock+0x214>
	}

	return frequency;
}
    842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8432:	4673      	mov	r3, lr
    8434:	e762      	b.n	82fc <set_arm_clock+0xe8>
    8436:	2712      	movs	r7, #18
    8438:	e718      	b.n	826c <set_arm_clock+0x58>
    843a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    843e:	2104      	movs	r1, #4
    8440:	e7c5      	b.n	83ce <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8442:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8446:	4820      	ldr	r0, [pc, #128]	; (84c8 <set_arm_clock+0x2b4>)
    8448:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    844a:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    844c:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    844e:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8452:	4a27      	ldr	r2, [pc, #156]	; (84f0 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    8454:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8500 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8458:	fba2 2000 	umull	r2, r0, r2, r0
    845c:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    845e:	4825      	ldr	r0, [pc, #148]	; (84f4 <set_arm_clock+0x2e0>)
    8460:	2a36      	cmp	r2, #54	; 0x36
    8462:	bf38      	it	cc
    8464:	2236      	movcc	r2, #54	; 0x36
    8466:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    846a:	ea42 0a0a 	orr.w	sl, r2, sl
    846e:	e774      	b.n	835a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8470:	ea4f 248c 	mov.w	r4, ip, lsl #10
    8474:	2300      	movs	r3, #0
    8476:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    847a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    847e:	46ac      	mov	ip, r5
    8480:	e762      	b.n	8348 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    8482:	461d      	mov	r5, r3
    8484:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    8488:	4611      	mov	r1, r2
    848a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    848e:	e713      	b.n	82b8 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    8490:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    8492:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    8496:	4602      	mov	r2, r0
    8498:	4631      	mov	r1, r6
    849a:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    849c:	46e6      	mov	lr, ip
    849e:	e753      	b.n	8348 <set_arm_clock+0x134>
    84a0:	1f78a400 	.word	0x1f78a400
    84a4:	400fc000 	.word	0x400fc000
    84a8:	40080000 	.word	0x40080000
    84ac:	23c34600 	.word	0x23c34600
    84b0:	004cb223 	.word	0x004cb223
    84b4:	51eb851f 	.word	0x51eb851f
    84b8:	016e3600 	.word	0x016e3600
    84bc:	400d8000 	.word	0x400d8000
    84c0:	80003040 	.word	0x80003040
    84c4:	269fb1ff 	.word	0x269fb1ff
    84c8:	005b8d80 	.word	0x005b8d80
    84cc:	4df67eff 	.word	0x4df67eff
    84d0:	4d3f6400 	.word	0x4d3f6400
    84d4:	08f0d17f 	.word	0x08f0d17f
    84d8:	2cb4177f 	.word	0x2cb4177f
    84dc:	00e5109f 	.word	0x00e5109f
    84e0:	431bde83 	.word	0x431bde83
    84e4:	200088b8 	.word	0x200088b8
    84e8:	200088b4 	.word	0x200088b4
    84ec:	20022090 	.word	0x20022090
    84f0:	165e9f81 	.word	0x165e9f81
    84f4:	00b71b00 	.word	0x00b71b00
    84f8:	8000206c 	.word	0x8000206c
    84fc:	8001307f 	.word	0x8001307f
    8500:	80002000 	.word	0x80002000

00008504 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    8504:	b900      	cbnz	r0, 8508 <delay+0x4>
    8506:	4770      	bx	lr
{
    8508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    850c:	2101      	movs	r1, #1
    850e:	4681      	mov	r9, r0
    8510:	4c21      	ldr	r4, [pc, #132]	; (8598 <delay+0x94>)
    8512:	4d22      	ldr	r5, [pc, #136]	; (859c <delay+0x98>)
    8514:	4e22      	ldr	r6, [pc, #136]	; (85a0 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8516:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    851a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    851c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    851e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    8522:	2b00      	cmp	r3, #0
    8524:	d1f7      	bne.n	8516 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8526:	491f      	ldr	r1, [pc, #124]	; (85a4 <delay+0xa0>)
    8528:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    852a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    852e:	f8df a078 	ldr.w	sl, [pc, #120]	; 85a8 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    8532:	1a1b      	subs	r3, r3, r0
    8534:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    8536:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    853a:	f8da 2000 	ldr.w	r2, [sl]
    853e:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    8542:	455a      	cmp	r2, fp
    8544:	bf94      	ite	ls
    8546:	4490      	addls	r8, r2
    8548:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    854a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    854e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    8550:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8552:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    8556:	2b00      	cmp	r3, #0
    8558:	d1f7      	bne.n	854a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    855a:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    855c:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    8560:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    8562:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8566:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    856a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    856e:	bf94      	ite	ls
    8570:	4462      	addls	r2, ip
    8572:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    8576:	eba2 0208 	sub.w	r2, r2, r8
    857a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    857e:	d306      	bcc.n	858e <delay+0x8a>
			if (--msec == 0) return;
    8580:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    8584:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    8588:	d1df      	bne.n	854a <delay+0x46>
}
    858a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    858e:	f002 f8bf 	bl	a710 <yield>
		while ((micros() - start) >= 1000) {
    8592:	4904      	ldr	r1, [pc, #16]	; (85a4 <delay+0xa0>)
    8594:	e7d9      	b.n	854a <delay+0x46>
    8596:	bf00      	nop
    8598:	20022568 	.word	0x20022568
    859c:	20022564 	.word	0x20022564
    85a0:	20022560 	.word	0x20022560
    85a4:	e0001000 	.word	0xe0001000
    85a8:	20022090 	.word	0x20022090

000085ac <micros>:
{
    85ac:	b430      	push	{r4, r5}
    85ae:	4b0f      	ldr	r3, [pc, #60]	; (85ec <micros+0x40>)
    85b0:	f04f 0c01 	mov.w	ip, #1
    85b4:	4d0e      	ldr	r5, [pc, #56]	; (85f0 <micros+0x44>)
    85b6:	4c0f      	ldr	r4, [pc, #60]	; (85f4 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    85b8:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    85bc:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    85be:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    85c0:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    85c4:	2a00      	cmp	r2, #0
    85c6:	d1f7      	bne.n	85b8 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    85c8:	4b0b      	ldr	r3, [pc, #44]	; (85f8 <micros+0x4c>)
    85ca:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    85cc:	4a0b      	ldr	r2, [pc, #44]	; (85fc <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    85ce:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    85d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    85d4:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    85d6:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    85da:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    85de:	bc30      	pop	{r4, r5}
    85e0:	428a      	cmp	r2, r1
    85e2:	bf94      	ite	ls
    85e4:	1880      	addls	r0, r0, r2
    85e6:	1840      	addhi	r0, r0, r1
    85e8:	4770      	bx	lr
    85ea:	bf00      	nop
    85ec:	20022568 	.word	0x20022568
    85f0:	20022564 	.word	0x20022564
    85f4:	20022560 	.word	0x20022560
    85f8:	e0001000 	.word	0xe0001000
    85fc:	20022090 	.word	0x20022090

00008600 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    8600:	2836      	cmp	r0, #54	; 0x36
    8602:	d816      	bhi.n	8632 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    8604:	0102      	lsls	r2, r0, #4
    8606:	4b10      	ldr	r3, [pc, #64]	; (8648 <digitalWrite+0x48>)
    8608:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    860c:	589b      	ldr	r3, [r3, r2]
{
    860e:	b410      	push	{r4}
	mask = p->mask;
    8610:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    8612:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    8614:	4214      	tst	r4, r2
    8616:	d005      	beq.n	8624 <digitalWrite+0x24>
		if (val) {
    8618:	b961      	cbnz	r1, 8634 <digitalWrite+0x34>
		}
	}
}
    861a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    861e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    8622:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8624:	6883      	ldr	r3, [r0, #8]
		if (val) {
    8626:	b151      	cbz	r1, 863e <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8628:	4a08      	ldr	r2, [pc, #32]	; (864c <digitalWrite+0x4c>)
}
    862a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    862e:	601a      	str	r2, [r3, #0]
}
    8630:	4770      	bx	lr
    8632:	4770      	bx	lr
    8634:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    8638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    863c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    863e:	4a04      	ldr	r2, [pc, #16]	; (8650 <digitalWrite+0x50>)
}
    8640:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8644:	601a      	str	r2, [r3, #0]
}
    8646:	4770      	bx	lr
    8648:	20007964 	.word	0x20007964
    864c:	0001f038 	.word	0x0001f038
    8650:	00013038 	.word	0x00013038

00008654 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    8654:	2836      	cmp	r0, #54	; 0x36
    8656:	d829      	bhi.n	86ac <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    8658:	4b16      	ldr	r3, [pc, #88]	; (86b4 <pinMode+0x60>)
    865a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    865c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    865e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8662:	589a      	ldr	r2, [r3, r2]
{
    8664:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8666:	6853      	ldr	r3, [r2, #4]
    8668:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    866a:	d00e      	beq.n	868a <pinMode+0x36>
    866c:	2904      	cmp	r1, #4
    866e:	d00c      	beq.n	868a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8670:	ea23 0304 	bic.w	r3, r3, r4
    8674:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8676:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    8678:	b1a9      	cbz	r1, 86a6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    867a:	2902      	cmp	r1, #2
    867c:	d017      	beq.n	86ae <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    867e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8680:	bf0c      	ite	eq
    8682:	4a0d      	ldreq	r2, [pc, #52]	; (86b8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    8684:	4a0d      	ldrne	r2, [pc, #52]	; (86bc <pinMode+0x68>)
    8686:	601a      	str	r2, [r3, #0]
    8688:	e007      	b.n	869a <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    868a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    868c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    868e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8690:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    8692:	d008      	beq.n	86a6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    8694:	f640 0238 	movw	r2, #2104	; 0x838
    8698:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    869a:	6843      	ldr	r3, [r0, #4]
    869c:	2215      	movs	r2, #21
}
    869e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    86a2:	601a      	str	r2, [r3, #0]
}
    86a4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    86a6:	2238      	movs	r2, #56	; 0x38
    86a8:	601a      	str	r2, [r3, #0]
    86aa:	e7f6      	b.n	869a <pinMode+0x46>
    86ac:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    86ae:	4a04      	ldr	r2, [pc, #16]	; (86c0 <pinMode+0x6c>)
    86b0:	601a      	str	r2, [r3, #0]
    86b2:	e7f2      	b.n	869a <pinMode+0x46>
    86b4:	20007964 	.word	0x20007964
    86b8:	00013038 	.word	0x00013038
    86bc:	00010038 	.word	0x00010038
    86c0:	0001f038 	.word	0x0001f038

000086c4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    86c4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    86c6:	f7f7 fe63 	bl	390 <setup>
	while (1) {
		loop();
    86ca:	f7f7 fccf 	bl	6c <loop>
		yield();
    86ce:	f002 f81f 	bl	a710 <yield>
	while (1) {
    86d2:	e7fa      	b.n	86ca <main+0x6>

000086d4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    86d4:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    86d6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    86da:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    86de:	d16d      	bne.n	87bc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    86e0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    86e2:	d341      	bcc.n	8768 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    86e4:	f851 3b04 	ldr.w	r3, [r1], #4
    86e8:	f840 3b04 	str.w	r3, [r0], #4
    86ec:	f851 3b04 	ldr.w	r3, [r1], #4
    86f0:	f840 3b04 	str.w	r3, [r0], #4
    86f4:	f851 3b04 	ldr.w	r3, [r1], #4
    86f8:	f840 3b04 	str.w	r3, [r0], #4
    86fc:	f851 3b04 	ldr.w	r3, [r1], #4
    8700:	f840 3b04 	str.w	r3, [r0], #4
    8704:	f851 3b04 	ldr.w	r3, [r1], #4
    8708:	f840 3b04 	str.w	r3, [r0], #4
    870c:	f851 3b04 	ldr.w	r3, [r1], #4
    8710:	f840 3b04 	str.w	r3, [r0], #4
    8714:	f851 3b04 	ldr.w	r3, [r1], #4
    8718:	f840 3b04 	str.w	r3, [r0], #4
    871c:	f851 3b04 	ldr.w	r3, [r1], #4
    8720:	f840 3b04 	str.w	r3, [r0], #4
    8724:	f851 3b04 	ldr.w	r3, [r1], #4
    8728:	f840 3b04 	str.w	r3, [r0], #4
    872c:	f851 3b04 	ldr.w	r3, [r1], #4
    8730:	f840 3b04 	str.w	r3, [r0], #4
    8734:	f851 3b04 	ldr.w	r3, [r1], #4
    8738:	f840 3b04 	str.w	r3, [r0], #4
    873c:	f851 3b04 	ldr.w	r3, [r1], #4
    8740:	f840 3b04 	str.w	r3, [r0], #4
    8744:	f851 3b04 	ldr.w	r3, [r1], #4
    8748:	f840 3b04 	str.w	r3, [r0], #4
    874c:	f851 3b04 	ldr.w	r3, [r1], #4
    8750:	f840 3b04 	str.w	r3, [r0], #4
    8754:	f851 3b04 	ldr.w	r3, [r1], #4
    8758:	f840 3b04 	str.w	r3, [r0], #4
    875c:	f851 3b04 	ldr.w	r3, [r1], #4
    8760:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8764:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8766:	d2bd      	bcs.n	86e4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8768:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    876a:	d311      	bcc.n	8790 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    876c:	f851 3b04 	ldr.w	r3, [r1], #4
    8770:	f840 3b04 	str.w	r3, [r0], #4
    8774:	f851 3b04 	ldr.w	r3, [r1], #4
    8778:	f840 3b04 	str.w	r3, [r0], #4
    877c:	f851 3b04 	ldr.w	r3, [r1], #4
    8780:	f840 3b04 	str.w	r3, [r0], #4
    8784:	f851 3b04 	ldr.w	r3, [r1], #4
    8788:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    878c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    878e:	d2ed      	bcs.n	876c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8790:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    8792:	d305      	bcc.n	87a0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8794:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8798:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    879c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    879e:	d2f9      	bcs.n	8794 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    87a0:	3204      	adds	r2, #4
	beq	.Ldone
    87a2:	d008      	beq.n	87b6 <memcpy+0xe2>

	lsls	r2, r2, #31
    87a4:	07d2      	lsls	r2, r2, #31
	itt ne
    87a6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    87a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    87ac:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    87b0:	d301      	bcc.n	87b6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    87b2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    87b4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    87b6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    87b8:	4770      	bx	lr
    87ba:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    87bc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    87be:	d313      	bcc.n	87e8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    87c0:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    87c2:	d08d      	beq.n	86e0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    87c4:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    87c8:	d08a      	beq.n	86e0 <memcpy+0xc>

	rsb	r3, #4
    87ca:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    87ce:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    87d0:	07db      	lsls	r3, r3, #31
	itt ne
    87d2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    87d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    87d8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    87dc:	d380      	bcc.n	86e0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    87de:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    87e2:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    87e6:	e77b      	b.n	86e0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    87e8:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    87ea:	d3d9      	bcc.n	87a0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    87ec:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    87ee:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    87f2:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    87f6:	d2f9      	bcs.n	87ec <memcpy+0x118>

	ldrb	r3, [r1]
    87f8:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    87fa:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    87fc:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    87fe:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8800:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8802:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8804:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8806:	4770      	bx	lr

00008808 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    8808:	f002 baa0 	b.w	ad4c <malloc>

0000880c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    880c:	f002 baa6 	b.w	ad5c <free>

00008810 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    8810:	f101 3cff 	add.w	ip, r1, #4294967295
{
    8814:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    8816:	4666      	mov	r6, ip
	int i=0, j;
    8818:	2400      	movs	r4, #0
    881a:	e000      	b.n	881e <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    881c:	3401      	adds	r4, #1
		digit = val % radix;
    881e:	fbb0 f5f2 	udiv	r5, r0, r2
    8822:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8826:	2b09      	cmp	r3, #9
    8828:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    882c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    8830:	fa5f fe8e 	uxtb.w	lr, lr
    8834:	bf98      	it	ls
    8836:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    883a:	4290      	cmp	r0, r2
		val /= radix;
    883c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    883e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    8842:	d2eb      	bcs.n	881c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    8844:	1c63      	adds	r3, r4, #1
    8846:	2200      	movs	r2, #0
    8848:	18c8      	adds	r0, r1, r3
    884a:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    884c:	b17c      	cbz	r4, 886e <ultoa+0x5e>
		t = buf[j];
    884e:	4662      	mov	r2, ip
    8850:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    8854:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    8858:	eba1 030c 	sub.w	r3, r1, ip
    885c:	3202      	adds	r2, #2
		buf[j] = buf[i];
    885e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    8862:	3b01      	subs	r3, #1
    8864:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    8866:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    8868:	4423      	add	r3, r4
    886a:	429a      	cmp	r2, r3
    886c:	dbef      	blt.n	884e <ultoa+0x3e>
	}
	return buf;
}
    886e:	4608      	mov	r0, r1
    8870:	bd70      	pop	{r4, r5, r6, pc}
    8872:	bf00      	nop

00008874 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    8874:	4a07      	ldr	r2, [pc, #28]	; (8894 <rtc_get+0x20>)
    8876:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    8878:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    887a:	4619      	mov	r1, r3
    887c:	4684      	mov	ip, r0
    887e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    8880:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    8882:	4299      	cmp	r1, r3
    8884:	d1f9      	bne.n	887a <rtc_get+0x6>
    8886:	4584      	cmp	ip, r0
    8888:	d1f7      	bne.n	887a <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    888a:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    888c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    8890:	4770      	bx	lr
    8892:	bf00      	nop
    8894:	400d4000 	.word	0x400d4000

00008898 <unused_interrupt_vector>:
	__disable_irq();
    8898:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    889a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    889e:	4c4f      	ldr	r4, [pc, #316]	; (89dc <unused_interrupt_vector+0x144>)
    88a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    88a4:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    88a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    88ac:	4e4c      	ldr	r6, [pc, #304]	; (89e0 <unused_interrupt_vector+0x148>)
	while (p < end) {
    88ae:	4d4d      	ldr	r5, [pc, #308]	; (89e4 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    88b0:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    88b4:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    88b8:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    88bc:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    88c0:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    88c4:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    88c8:	6993      	ldr	r3, [r2, #24]
    88ca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    88ce:	69d3      	ldr	r3, [r2, #28]
    88d0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    88d4:	f000 f8d2 	bl	8a7c <tempmonGetTemp>
    88d8:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    88dc:	f7ff ffca 	bl	8874 <rtc_get>
	info->len = sizeof(*info) / 4;
    88e0:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    88e2:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    88e6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    88ea:	460b      	mov	r3, r1
    88ec:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    88f0:	493d      	ldr	r1, [pc, #244]	; (89e8 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    88f2:	1d30      	adds	r0, r6, #4
    88f4:	405a      	eors	r2, r3
    88f6:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    88f8:	f002 0301 	and.w	r3, r2, #1
    88fc:	3c01      	subs	r4, #1
    88fe:	fb01 f303 	mul.w	r3, r1, r3
    8902:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    8906:	d1f7      	bne.n	88f8 <unused_interrupt_vector+0x60>
	while (p < end) {
    8908:	42a8      	cmp	r0, r5
    890a:	d002      	beq.n	8912 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    890c:	6873      	ldr	r3, [r6, #4]
    890e:	4606      	mov	r6, r0
    8910:	e7ef      	b.n	88f2 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    8912:	4b32      	ldr	r3, [pc, #200]	; (89dc <unused_interrupt_vector+0x144>)
    8914:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    8918:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    891c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8920:	492f      	ldr	r1, [pc, #188]	; (89e0 <unused_interrupt_vector+0x148>)
    8922:	4a32      	ldr	r2, [pc, #200]	; (89ec <unused_interrupt_vector+0x154>)
    8924:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    8928:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    892c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8930:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8934:	4a2e      	ldr	r2, [pc, #184]	; (89f0 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    8936:	2502      	movs	r5, #2
    8938:	482e      	ldr	r0, [pc, #184]	; (89f4 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    893a:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    893c:	492e      	ldr	r1, [pc, #184]	; (89f8 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    893e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    8942:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    8944:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    8946:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8948:	482c      	ldr	r0, [pc, #176]	; (89fc <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    894a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    894e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8952:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8954:	680b      	ldr	r3, [r1, #0]
    8956:	4283      	cmp	r3, r0
    8958:	d83d      	bhi.n	89d6 <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    895a:	4d26      	ldr	r5, [pc, #152]	; (89f4 <unused_interrupt_vector+0x15c>)
    895c:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    895e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8962:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    8966:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    8968:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    896a:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    896e:	4924      	ldr	r1, [pc, #144]	; (8a00 <unused_interrupt_vector+0x168>)
    8970:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    8974:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    8978:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    897c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    8980:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    8984:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    8988:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    898c:	e001      	b.n	8992 <unused_interrupt_vector+0xfa>
		usb_isr();
    898e:	f000 f9cb 	bl	8d28 <usb_isr>
		if (PIT_TFLG0) {
    8992:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    8996:	2b00      	cmp	r3, #0
    8998:	d0f9      	beq.n	898e <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    899a:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    899c:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    89a0:	2c4f      	cmp	r4, #79	; 0x4f
    89a2:	d9f4      	bls.n	898e <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    89a4:	4b17      	ldr	r3, [pc, #92]	; (8a04 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    89a6:	2002      	movs	r0, #2
    89a8:	4917      	ldr	r1, [pc, #92]	; (8a08 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    89aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    89ae:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    89b2:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    89b4:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    89b8:	b93b      	cbnz	r3, 89ca <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    89ba:	4814      	ldr	r0, [pc, #80]	; (8a0c <unused_interrupt_vector+0x174>)
    89bc:	4914      	ldr	r1, [pc, #80]	; (8a10 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    89be:	4a0d      	ldr	r2, [pc, #52]	; (89f4 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    89c0:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    89c2:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    89c6:	2b00      	cmp	r3, #0
    89c8:	d0fa      	beq.n	89c0 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    89ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    89ce:	4a11      	ldr	r2, [pc, #68]	; (8a14 <unused_interrupt_vector+0x17c>)
    89d0:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    89d4:	e7fe      	b.n	89d4 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    89d6:	f7ff fc1d 	bl	8214 <set_arm_clock>
    89da:	e7be      	b.n	895a <unused_interrupt_vector+0xc2>
    89dc:	2027ff00 	.word	0x2027ff00
    89e0:	2027ff80 	.word	0x2027ff80
    89e4:	2027ffa8 	.word	0x2027ffa8
    89e8:	edb88320 	.word	0xedb88320
    89ec:	2027ffa0 	.word	0x2027ffa0
    89f0:	400fc000 	.word	0x400fc000
    89f4:	40084000 	.word	0x40084000
    89f8:	200088b8 	.word	0x200088b8
    89fc:	0bcd3d80 	.word	0x0bcd3d80
    8a00:	00249f00 	.word	0x00249f00
    8a04:	400d9000 	.word	0x400d9000
    8a08:	402e0000 	.word	0x402e0000
    8a0c:	400f8000 	.word	0x400f8000
    8a10:	0bad00f1 	.word	0x0bad00f1
    8a14:	05fa0004 	.word	0x05fa0004

00008a18 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    8a18:	490a      	ldr	r1, [pc, #40]	; (8a44 <_sbrk+0x2c>)
    8a1a:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    8a1c:	b138      	cbz	r0, 8a2e <_sbrk+0x16>
{
    8a1e:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    8a20:	1813      	adds	r3, r2, r0
    8a22:	4809      	ldr	r0, [pc, #36]	; (8a48 <_sbrk+0x30>)
    8a24:	4283      	cmp	r3, r0
    8a26:	d804      	bhi.n	8a32 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    8a28:	4610      	mov	r0, r2
                __brkval = prev + incr;
    8a2a:	600b      	str	r3, [r1, #0]
}
    8a2c:	bd08      	pop	{r3, pc}
    8a2e:	4610      	mov	r0, r2
    8a30:	4770      	bx	lr
                        errno = ENOMEM;
    8a32:	f004 f9f9 	bl	ce28 <__errno>
    8a36:	230c      	movs	r3, #12
                        return (void *)-1;
    8a38:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    8a3c:	6003      	str	r3, [r0, #0]
}
    8a3e:	4610      	mov	r0, r2
    8a40:	bd08      	pop	{r3, pc}
    8a42:	bf00      	nop
    8a44:	200088e4 	.word	0x200088e4
    8a48:	20280000 	.word	0x20280000

00008a4c <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    8a4c:	2000      	movs	r0, #0
    8a4e:	4770      	bx	lr

00008a50 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    8a50:	f04f 30ff 	mov.w	r0, #4294967295
    8a54:	4770      	bx	lr
    8a56:	bf00      	nop

00008a58 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    8a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    8a5c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    8a5e:	604b      	str	r3, [r1, #4]
}
    8a60:	4770      	bx	lr
    8a62:	bf00      	nop

00008a64 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    8a64:	2001      	movs	r0, #1
    8a66:	4770      	bx	lr

00008a68 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    8a68:	f04f 30ff 	mov.w	r0, #4294967295
    8a6c:	4770      	bx	lr
    8a6e:	bf00      	nop

00008a70 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    8a70:	bf30      	wfi
    8a72:	e7fd      	b.n	8a70 <__cxa_pure_virtual>

00008a74 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    8a74:	bf30      	wfi
    8a76:	e7fd      	b.n	8a74 <abort>

00008a78 <Panic_Temp_isr>:
  unused_interrupt_vector();
    8a78:	f7ff bf0e 	b.w	8898 <unused_interrupt_vector>

00008a7c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    8a7c:	4a12      	ldr	r2, [pc, #72]	; (8ac8 <tempmonGetTemp+0x4c>)
    8a7e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    8a82:	075b      	lsls	r3, r3, #29
    8a84:	d5fb      	bpl.n	8a7e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8a86:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8a8a:	4810      	ldr	r0, [pc, #64]	; (8acc <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8a8c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8a90:	490f      	ldr	r1, [pc, #60]	; (8ad0 <tempmonGetTemp+0x54>)
    8a92:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8a96:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8a9a:	ed91 6a00 	vldr	s12, [r1]
    8a9e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    8aa2:	4a0c      	ldr	r2, [pc, #48]	; (8ad4 <tempmonGetTemp+0x58>)
    8aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8aa8:	4b0b      	ldr	r3, [pc, #44]	; (8ad8 <tempmonGetTemp+0x5c>)
    8aaa:	edd2 6a00 	vldr	s13, [r2]
    8aae:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8ab2:	ed93 7a00 	vldr	s14, [r3]
    8ab6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    8aba:	ee67 7a86 	vmul.f32	s15, s15, s12
    8abe:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    8ac2:	ee37 0a40 	vsub.f32	s0, s14, s0
    8ac6:	4770      	bx	lr
    8ac8:	400d8100 	.word	0x400d8100
    8acc:	20022080 	.word	0x20022080
    8ad0:	20022088 	.word	0x20022088
    8ad4:	2002208c 	.word	0x2002208c
    8ad8:	20022084 	.word	0x20022084

00008adc <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    8adc:	b430      	push	{r4, r5}
	//printf("rx %lu\n", len);
	if (len > 0) {
    8ade:	2900      	cmp	r1, #0
    8ae0:	d131      	bne.n	8b46 <endpoint0_receive+0x6a>
    8ae2:	4c2b      	ldr	r4, [pc, #172]	; (8b90 <endpoint0_receive+0xb4>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8ae4:	4b2b      	ldr	r3, [pc, #172]	; (8b94 <endpoint0_receive+0xb8>)
    8ae6:	2101      	movs	r1, #1
    8ae8:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8aea:	b1da      	cbz	r2, 8b24 <endpoint0_receive+0x48>
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8aec:	492a      	ldr	r1, [pc, #168]	; (8b98 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    8aee:	2200      	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8af0:	f248 0580 	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8af4:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    8af8:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8afa:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    8afc:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8b00:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8b04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    8b08:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    8b0c:	4313      	orrs	r3, r2
    8b0e:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8b12:	4b22      	ldr	r3, [pc, #136]	; (8b9c <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    8b14:	4920      	ldr	r1, [pc, #128]	; (8b98 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8b16:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    8b18:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    8b1c:	2b00      	cmp	r3, #0
    8b1e:	d1fb      	bne.n	8b18 <endpoint0_receive+0x3c>
}
    8b20:	bc30      	pop	{r4, r5}
    8b22:	4770      	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8b24:	491c      	ldr	r1, [pc, #112]	; (8b98 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8b26:	2580      	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8b28:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    8b2c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8b2e:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    8b30:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8b34:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8b38:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    8b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8b40:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8b44:	e7e5      	b.n	8b12 <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8b46:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    8b48:	4b15      	ldr	r3, [pc, #84]	; (8ba0 <endpoint0_receive+0xc4>)
    8b4a:	2401      	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    8b4c:	2500      	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8b4e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8b52:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    8b54:	601c      	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8b56:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8b58:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    8b5c:	4c0c      	ldr	r4, [pc, #48]	; (8b90 <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8b5e:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8b60:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    8b64:	60e5      	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8b66:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8b68:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8b6c:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    8b70:	60a3      	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8b72:	6159      	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    8b74:	4908      	ldr	r1, [pc, #32]	; (8b98 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8b76:	6198      	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    8b78:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    8b7c:	f043 0301 	orr.w	r3, r3, #1
    8b80:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8b84:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    8b88:	2b00      	cmp	r3, #0
    8b8a:	d1fb      	bne.n	8b84 <endpoint0_receive+0xa8>
    8b8c:	e7aa      	b.n	8ae4 <endpoint0_receive+0x8>
    8b8e:	bf00      	nop
    8b90:	20000000 	.word	0x20000000
    8b94:	200092e0 	.word	0x200092e0
    8b98:	402e0000 	.word	0x402e0000
    8b9c:	200216dc 	.word	0x200216dc
    8ba0:	20009300 	.word	0x20009300

00008ba4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8ba4:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    8ba6:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    8ba8:	b11b      	cbz	r3, 8bb2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    8baa:	6853      	ldr	r3, [r2, #4]
    8bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8bb0:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    8bb2:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    8bb4:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    8bb6:	b33c      	cbz	r4, 8c08 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8bb8:	4b1a      	ldr	r3, [pc, #104]	; (8c24 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    8bba:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8bbc:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8bc0:	420c      	tst	r4, r1
    8bc2:	d11d      	bne.n	8c00 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    8bc4:	4e18      	ldr	r6, [pc, #96]	; (8c28 <schedule_transfer+0x84>)
    8bc6:	6877      	ldr	r7, [r6, #4]
    8bc8:	e004      	b.n	8bd4 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8bca:	6874      	ldr	r4, [r6, #4]
    8bcc:	1be4      	subs	r4, r4, r7
    8bce:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    8bd2:	d20b      	bcs.n	8bec <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    8bd4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8bd8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    8bdc:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8be0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8be4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8be8:	0464      	lsls	r4, r4, #17
    8bea:	d5ee      	bpl.n	8bca <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8bec:	400d      	ands	r5, r1
    8bee:	d107      	bne.n	8c00 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    8bf0:	4c0c      	ldr	r4, [pc, #48]	; (8c24 <schedule_transfer+0x80>)
		endpoint->status = 0;
    8bf2:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    8bf6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8bfa:	430b      	orrs	r3, r1
    8bfc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    8c00:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8c02:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    8c04:	bcf0      	pop	{r4, r5, r6, r7}
    8c06:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    8c08:	4d06      	ldr	r5, [pc, #24]	; (8c24 <schedule_transfer+0x80>)
	endpoint->status = 0;
    8c0a:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    8c0e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    8c12:	430b      	orrs	r3, r1
    8c14:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    8c18:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    8c1a:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8c1c:	b662      	cpsie	i
}
    8c1e:	bcf0      	pop	{r4, r5, r6, r7}
    8c20:	4770      	bx	lr
    8c22:	bf00      	nop
    8c24:	402e0000 	.word	0x402e0000
    8c28:	e0001000 	.word	0xe0001000

00008c2c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    8c2c:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    8c2e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    8c30:	b19d      	cbz	r5, 8c5a <run_callbacks+0x2e>
    8c32:	4606      	mov	r6, r0
    8c34:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    8c36:	2400      	movs	r4, #0
    8c38:	e003      	b.n	8c42 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    8c3a:	6812      	ldr	r2, [r2, #0]
		count++;
    8c3c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    8c3e:	2a01      	cmp	r2, #1
    8c40:	d00c      	beq.n	8c5c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    8c42:	6853      	ldr	r3, [r2, #4]
    8c44:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    8c48:	d0f7      	beq.n	8c3a <run_callbacks+0xe>
			ep->first_transfer = t;
    8c4a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8c4c:	b12c      	cbz	r4, 8c5a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    8c4e:	4628      	mov	r0, r5
		ep->callback_function(first);
    8c50:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    8c52:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    8c54:	4798      	blx	r3
	while (count) {
    8c56:	3c01      	subs	r4, #1
    8c58:	d1f9      	bne.n	8c4e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    8c5a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    8c5c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    8c60:	e7f4      	b.n	8c4c <run_callbacks+0x20>
    8c62:	bf00      	nop

00008c64 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8c64:	b430      	push	{r4, r5}
	if (len > 0) {
    8c66:	b9d9      	cbnz	r1, 8ca0 <endpoint0_transmit.constprop.0+0x3c>
    8c68:	4c1f      	ldr	r4, [pc, #124]	; (8ce8 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    8c6a:	4b20      	ldr	r3, [pc, #128]	; (8cec <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    8c6c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8c6e:	4a20      	ldr	r2, [pc, #128]	; (8cf0 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    8c70:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8c72:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    8c76:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8c78:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    8c7a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8c7e:	2480      	movs	r4, #128	; 0x80
    8c80:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8c82:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    8c86:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8c8a:	481a      	ldr	r0, [pc, #104]	; (8cf4 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    8c8c:	432b      	orrs	r3, r5
    8c8e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8c92:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    8c94:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8c98:	2b00      	cmp	r3, #0
    8c9a:	d1fb      	bne.n	8c94 <endpoint0_transmit.constprop.0+0x30>
}
    8c9c:	bc30      	pop	{r4, r5}
    8c9e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8ca0:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    8ca2:	4b15      	ldr	r3, [pc, #84]	; (8cf8 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8ca4:	4c10      	ldr	r4, [pc, #64]	; (8ce8 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    8ca6:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8ca8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8cac:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    8cae:	4a10      	ldr	r2, [pc, #64]	; (8cf0 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8cb0:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8cb2:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    8cb6:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8cb8:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8cba:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8cbe:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8cc0:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8cc2:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8cc6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8cca:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    8ccc:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8cce:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    8cd0:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    8cd2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8cda:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8cde:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8ce2:	2b00      	cmp	r3, #0
    8ce4:	d1fb      	bne.n	8cde <endpoint0_transmit.constprop.0+0x7a>
    8ce6:	e7c0      	b.n	8c6a <endpoint0_transmit.constprop.0+0x6>
    8ce8:	20000000 	.word	0x20000000
    8cec:	200092e0 	.word	0x200092e0
    8cf0:	402e0000 	.word	0x402e0000
    8cf4:	200216dc 	.word	0x200216dc
    8cf8:	20009300 	.word	0x20009300

00008cfc <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    8cfc:	4908      	ldr	r1, [pc, #32]	; (8d20 <usb_stop_sof_interrupts+0x24>)
    8cfe:	2201      	movs	r2, #1
    8d00:	780b      	ldrb	r3, [r1, #0]
    8d02:	fa02 f000 	lsl.w	r0, r2, r0
    8d06:	ea23 0000 	bic.w	r0, r3, r0
    8d0a:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    8d0c:	b930      	cbnz	r0, 8d1c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    8d0e:	4a05      	ldr	r2, [pc, #20]	; (8d24 <usb_stop_sof_interrupts+0x28>)
    8d10:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    8d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8d18:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    8d1c:	4770      	bx	lr
    8d1e:	bf00      	nop
    8d20:	20022606 	.word	0x20022606
    8d24:	402e0000 	.word	0x402e0000

00008d28 <usb_isr>:
{
    8d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    8d2c:	4ca8      	ldr	r4, [pc, #672]	; (8fd0 <usb_isr+0x2a8>)
{
    8d2e:	b087      	sub	sp, #28
	uint32_t status = USB1_USBSTS;
    8d30:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    8d34:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
    8d36:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    8d3a:	f140 809c 	bpl.w	8e76 <usb_isr+0x14e>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    8d3e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    8d42:	2b00      	cmp	r3, #0
    8d44:	d063      	beq.n	8e0e <usb_isr+0xe6>
    8d46:	4da3      	ldr	r5, [pc, #652]	; (8fd4 <usb_isr+0x2ac>)
    8d48:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8fdc <usb_isr+0x2b4>
		usb_configuration = setup.wValue;
    8d4c:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8ffc <usb_isr+0x2d4>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8d50:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 9000 <usb_isr+0x2d8>
			USB1_ENDPTSETUPSTAT = setupstatus;
    8d54:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    8d58:	e9d5 700a 	ldrd	r7, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8d5c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8d60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    8d64:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    8d68:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8d6c:	049b      	lsls	r3, r3, #18
    8d6e:	d5f5      	bpl.n	8d5c <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8d70:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8d74:	f04f 1201 	mov.w	r2, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8d78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    8d7c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8d80:	f8c4 21b4 	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    8d84:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    8d88:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    8d8c:	d1fa      	bne.n	8d84 <usb_isr+0x5c>
			endpoint0_notify_mask = 0;
    8d8e:	b2ba      	uxth	r2, r7
    8d90:	f8c9 3000 	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    8d94:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
	setup.bothwords = setupdata;
    8d98:	e9cd 7004 	strd	r7, r0, [sp, #16]
	switch (setup.wRequestAndType) {
    8d9c:	f000 81b2 	beq.w	9104 <usb_isr+0x3dc>
    8da0:	f200 80c3 	bhi.w	8f2a <usb_isr+0x202>
    8da4:	f240 3102 	movw	r1, #770	; 0x302
    8da8:	428a      	cmp	r2, r1
    8daa:	f000 8226 	beq.w	91fa <usb_isr+0x4d2>
    8dae:	f240 80dd 	bls.w	8f6c <usb_isr+0x244>
    8db2:	f240 6181 	movw	r1, #1665	; 0x681
    8db6:	428a      	cmp	r2, r1
    8db8:	f200 80ac 	bhi.w	8f14 <usb_isr+0x1ec>
    8dbc:	f5b2 6fd0 	cmp.w	r2, #1664	; 0x680
    8dc0:	f080 81d5 	bcs.w	916e <usb_isr+0x446>
    8dc4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    8dc8:	f040 809e 	bne.w	8f08 <usb_isr+0x1e0>
	endpoint0_transfer_ack.next = 1;
    8dcc:	4a82      	ldr	r2, [pc, #520]	; (8fd8 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    8dce:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8dd0:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    8dd2:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8dd4:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8dd6:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8dd8:	2380      	movs	r3, #128	; 0x80
    8dda:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8ddc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8de0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8de4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8dec:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8df0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8df4:	2b00      	cmp	r3, #0
    8df6:	d1fb      	bne.n	8df0 <usb_isr+0xc8>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8df8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    8dfc:	065b      	lsls	r3, r3, #25
    8dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8e02:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8e06:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    8e0a:	2b00      	cmp	r3, #0
    8e0c:	d1a2      	bne.n	8d54 <usb_isr+0x2c>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    8e0e:	4b70      	ldr	r3, [pc, #448]	; (8fd0 <usb_isr+0x2a8>)
    8e10:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    8e14:	b37c      	cbz	r4, 8e76 <usb_isr+0x14e>
			if (completestatus & endpoint0_notify_mask) {
    8e16:	4a71      	ldr	r2, [pc, #452]	; (8fdc <usb_isr+0x2b4>)
			USB1_ENDPTCOMPLETE = completestatus;
    8e18:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    8e1c:	6811      	ldr	r1, [r2, #0]
    8e1e:	420c      	tst	r4, r1
    8e20:	f040 8288 	bne.w	9334 <usb_isr+0x60c>
			completestatus &= endpointN_notify_mask;
    8e24:	4b6e      	ldr	r3, [pc, #440]	; (8fe0 <usb_isr+0x2b8>)
    8e26:	681b      	ldr	r3, [r3, #0]
			if (completestatus) {
    8e28:	401c      	ands	r4, r3
    8e2a:	d024      	beq.n	8e76 <usb_isr+0x14e>
				while (tx) {
    8e2c:	ea5f 4814 	movs.w	r8, r4, lsr #16
    8e30:	d010      	beq.n	8e54 <usb_isr+0x12c>
    8e32:	4d68      	ldr	r5, [pc, #416]	; (8fd4 <usb_isr+0x2ac>)
					tx &= ~(1<<p);
    8e34:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    8e38:	fa98 f7a8 	rbit	r7, r8
    8e3c:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8e40:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    8e44:	fa09 f707 	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8e48:	3040      	adds	r0, #64	; 0x40
    8e4a:	f7ff feef 	bl	8c2c <run_callbacks>
				while (tx) {
    8e4e:	ea38 0807 	bics.w	r8, r8, r7
    8e52:	d1f1      	bne.n	8e38 <usb_isr+0x110>
				uint32_t rx = completestatus & 0xffff;
    8e54:	b2a4      	uxth	r4, r4
				while(rx) {
    8e56:	b174      	cbz	r4, 8e76 <usb_isr+0x14e>
    8e58:	4d5e      	ldr	r5, [pc, #376]	; (8fd4 <usb_isr+0x2ac>)
					rx &= ~(1<<p);
    8e5a:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    8e5e:	fa94 f7a4 	rbit	r7, r4
    8e62:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    8e66:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    8e6a:	fa08 f707 	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    8e6e:	f7ff fedd 	bl	8c2c <run_callbacks>
				while(rx) {
    8e72:	43bc      	bics	r4, r7
    8e74:	d1f3      	bne.n	8e5e <usb_isr+0x136>
	if (status & USB_USBSTS_URI) { // page 3164
    8e76:	0672      	lsls	r2, r6, #25
    8e78:	d516      	bpl.n	8ea8 <usb_isr+0x180>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8e7a:	4b55      	ldr	r3, [pc, #340]	; (8fd0 <usb_isr+0x2a8>)
    8e7c:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    8e80:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    8e84:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    8e88:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8e8c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8e90:	2c00      	cmp	r4, #0
    8e92:	d1fb      	bne.n	8e8c <usb_isr+0x164>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    8e94:	f04f 32ff 	mov.w	r2, #4294967295
    8e98:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    8e9c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    8ea0:	f001 fa44 	bl	a32c <usb_serial_reset>
		endpointN_notify_mask = 0;
    8ea4:	4b4e      	ldr	r3, [pc, #312]	; (8fe0 <usb_isr+0x2b8>)
    8ea6:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    8ea8:	01f4      	lsls	r4, r6, #7
    8eaa:	d503      	bpl.n	8eb4 <usb_isr+0x18c>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    8eac:	4b4d      	ldr	r3, [pc, #308]	; (8fe4 <usb_isr+0x2bc>)
    8eae:	681b      	ldr	r3, [r3, #0]
    8eb0:	b103      	cbz	r3, 8eb4 <usb_isr+0x18c>
    8eb2:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    8eb4:	01b0      	lsls	r0, r6, #6
    8eb6:	d503      	bpl.n	8ec0 <usb_isr+0x198>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    8eb8:	4b4b      	ldr	r3, [pc, #300]	; (8fe8 <usb_isr+0x2c0>)
    8eba:	681b      	ldr	r3, [r3, #0]
    8ebc:	b103      	cbz	r3, 8ec0 <usb_isr+0x198>
    8ebe:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    8ec0:	0771      	lsls	r1, r6, #29
    8ec2:	d509      	bpl.n	8ed8 <usb_isr+0x1b0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    8ec4:	4b42      	ldr	r3, [pc, #264]	; (8fd0 <usb_isr+0x2a8>)
    8ec6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    8eca:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    8ece:	f000 8110 	beq.w	90f2 <usb_isr+0x3ca>
			usb_high_speed = 1;
    8ed2:	4b46      	ldr	r3, [pc, #280]	; (8fec <usb_isr+0x2c4>)
    8ed4:	2201      	movs	r2, #1
    8ed6:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8ed8:	4b3d      	ldr	r3, [pc, #244]	; (8fd0 <usb_isr+0x2a8>)
    8eda:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    8ede:	061a      	lsls	r2, r3, #24
    8ee0:	d50f      	bpl.n	8f02 <usb_isr+0x1da>
    8ee2:	0633      	lsls	r3, r6, #24
    8ee4:	d50d      	bpl.n	8f02 <usb_isr+0x1da>
		if (usb_reboot_timer) {
    8ee6:	4a42      	ldr	r2, [pc, #264]	; (8ff0 <usb_isr+0x2c8>)
    8ee8:	7813      	ldrb	r3, [r2, #0]
    8eea:	b12b      	cbz	r3, 8ef8 <usb_isr+0x1d0>
			if (--usb_reboot_timer == 0) {
    8eec:	3b01      	subs	r3, #1
    8eee:	b2db      	uxtb	r3, r3
    8ef0:	7013      	strb	r3, [r2, #0]
    8ef2:	2b00      	cmp	r3, #0
    8ef4:	f000 8299 	beq.w	942a <usb_isr+0x702>
}
    8ef8:	b007      	add	sp, #28
    8efa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_midi_flush_output();
    8efe:	f001 b815 	b.w	9f2c <usb_midi_flush_output>
}
    8f02:	b007      	add	sp, #28
    8f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (setup.wRequestAndType) {
    8f08:	d97c      	bls.n	9004 <usb_isr+0x2dc>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8f0a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8f0e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    8f12:	e778      	b.n	8e06 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8f14:	f5b2 6f08 	cmp.w	r2, #2176	; 0x880
    8f18:	d1f7      	bne.n	8f0a <usb_isr+0x1e2>
		reply_buffer[0] = usb_configuration;
    8f1a:	4836      	ldr	r0, [pc, #216]	; (8ff4 <usb_isr+0x2cc>)
		endpoint0_transmit(reply_buffer, 1, 0);
    8f1c:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    8f1e:	f89b 3000 	ldrb.w	r3, [fp]
    8f22:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    8f24:	f7ff fe9e 	bl	8c64 <endpoint0_transmit.constprop.0>
		return;
    8f28:	e76d      	b.n	8e06 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8f2a:	f242 2121 	movw	r1, #8737	; 0x2221
    8f2e:	428a      	cmp	r2, r1
    8f30:	f000 81d3 	beq.w	92da <usb_isr+0x5b2>
    8f34:	f240 8099 	bls.w	906a <usb_isr+0x342>
    8f38:	f248 11a2 	movw	r1, #33186	; 0x81a2
    8f3c:	428a      	cmp	r2, r1
    8f3e:	f000 81bf 	beq.w	92c0 <usb_isr+0x598>
    8f42:	d976      	bls.n	9032 <usb_isr+0x30a>
    8f44:	f248 43a1 	movw	r3, #33953	; 0x84a1
    8f48:	429a      	cmp	r2, r3
    8f4a:	f040 80b6 	bne.w	90ba <usb_isr+0x392>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    8f4e:	f5b0 2f10 	cmp.w	r0, #589824	; 0x90000
    8f52:	d2da      	bcs.n	8f0a <usb_isr+0x1e2>
			if (usb_audio_get_feature(&setup, endpoint0_buffer, &len)) {
    8f54:	aa03      	add	r2, sp, #12
    8f56:	4928      	ldr	r1, [pc, #160]	; (8ff8 <usb_isr+0x2d0>)
    8f58:	a804      	add	r0, sp, #16
    8f5a:	f000 fe9b 	bl	9c94 <usb_audio_get_feature>
    8f5e:	2800      	cmp	r0, #0
    8f60:	d0d3      	beq.n	8f0a <usb_isr+0x1e2>
				endpoint0_transmit(endpoint0_buffer, len, 0);
    8f62:	9903      	ldr	r1, [sp, #12]
    8f64:	4824      	ldr	r0, [pc, #144]	; (8ff8 <usb_isr+0x2d0>)
    8f66:	f7ff fe7d 	bl	8c64 <endpoint0_transmit.constprop.0>
				return;
    8f6a:	e74c      	b.n	8e06 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8f6c:	2a82      	cmp	r2, #130	; 0x82
    8f6e:	f000 8191 	beq.w	9294 <usb_isr+0x56c>
    8f72:	f240 80b5 	bls.w	90e0 <usb_isr+0x3b8>
    8f76:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    8f7a:	f040 80a6 	bne.w	90ca <usb_isr+0x3a2>
		if (endpoint > 7) break;
    8f7e:	f010 0f78 	tst.w	r0, #120	; 0x78
    8f82:	b283      	uxth	r3, r0
    8f84:	d1c1      	bne.n	8f0a <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    8f86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8f8a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8f8e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8f92:	bf14      	ite	ne
    8f94:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    8f98:	f023 0301 	biceq.w	r3, r3, #1
    8f9c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8fa0:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8fa2:	4b0d      	ldr	r3, [pc, #52]	; (8fd8 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    8fa4:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8fa6:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8fa8:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8faa:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8fac:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8fae:	2280      	movs	r2, #128	; 0x80
    8fb0:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8fb2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8fb6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8fba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8fc2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8fc6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8fca:	2b00      	cmp	r3, #0
    8fcc:	d1fb      	bne.n	8fc6 <usb_isr+0x29e>
    8fce:	e71a      	b.n	8e06 <usb_isr+0xde>
    8fd0:	402e0000 	.word	0x402e0000
    8fd4:	20000000 	.word	0x20000000
    8fd8:	200092e0 	.word	0x200092e0
    8fdc:	200216dc 	.word	0x200216dc
    8fe0:	200216e0 	.word	0x200216e0
    8fe4:	200225cc 	.word	0x200225cc
    8fe8:	200225d0 	.word	0x200225d0
    8fec:	20022613 	.word	0x20022613
    8ff0:	20022614 	.word	0x20022614
    8ff4:	20022024 	.word	0x20022024
    8ff8:	200216d4 	.word	0x200216d4
    8ffc:	20022612 	.word	0x20022612
    9000:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    9004:	f240 3321 	movw	r3, #801	; 0x321
    9008:	429a      	cmp	r2, r3
    900a:	d004      	beq.n	9016 <usb_isr+0x2ee>
    900c:	f240 4321 	movw	r3, #1057	; 0x421
    9010:	429a      	cmp	r2, r3
    9012:	f47f af7a 	bne.w	8f0a <usb_isr+0x1e2>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    9016:	f5b0 2f10 	cmp.w	r0, #589824	; 0x90000
    901a:	ea4f 4110 	mov.w	r1, r0, lsr #16
    901e:	f4bf af74 	bcs.w	8f0a <usb_isr+0x1e2>
			endpoint0_setupdata.bothwords = setupdata;
    9022:	4bb5      	ldr	r3, [pc, #724]	; (92f8 <usb_isr+0x5d0>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    9024:	2201      	movs	r2, #1
			endpoint0_setupdata.bothwords = setupdata;
    9026:	e9c3 7000 	strd	r7, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    902a:	48b4      	ldr	r0, [pc, #720]	; (92fc <usb_isr+0x5d4>)
    902c:	f7ff fd56 	bl	8adc <endpoint0_receive>
			return; // handle these after ACK
    9030:	e6e9      	b.n	8e06 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    9032:	f242 3321 	movw	r3, #8993	; 0x2321
    9036:	429a      	cmp	r2, r3
    9038:	d125      	bne.n	9086 <usb_isr+0x35e>
	endpoint0_transfer_ack.next = 1;
    903a:	4bb1      	ldr	r3, [pc, #708]	; (9300 <usb_isr+0x5d8>)
	endpoint0_transfer_ack.pointer0 = 0;
    903c:	2200      	movs	r2, #0
    903e:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    9040:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    9042:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9044:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9046:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9048:	2280      	movs	r2, #128	; 0x80
    904a:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    904c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9050:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9054:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    905c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    9060:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9064:	2b00      	cmp	r3, #0
    9066:	d1fb      	bne.n	9060 <usb_isr+0x338>
    9068:	e6cd      	b.n	8e06 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    906a:	f640 3101 	movw	r1, #2817	; 0xb01
    906e:	428a      	cmp	r2, r1
    9070:	f000 80ed 	beq.w	924e <usb_isr+0x526>
    9074:	f242 0321 	movw	r3, #8225	; 0x2021
    9078:	429a      	cmp	r2, r3
    907a:	d10a      	bne.n	9092 <usb_isr+0x36a>
		if (setup.wLength != 7) break;
    907c:	0c01      	lsrs	r1, r0, #16
    907e:	2907      	cmp	r1, #7
    9080:	f47f af43 	bne.w	8f0a <usb_isr+0x1e2>
    9084:	e7cd      	b.n	9022 <usb_isr+0x2fa>
	switch (setup.wRequestAndType) {
    9086:	f248 13a1 	movw	r3, #33185	; 0x81a1
    908a:	429a      	cmp	r2, r3
    908c:	f43f af5f 	beq.w	8f4e <usb_isr+0x226>
    9090:	e73b      	b.n	8f0a <usb_isr+0x1e2>
    9092:	f640 2381 	movw	r3, #2689	; 0xa81
    9096:	429a      	cmp	r2, r3
    9098:	f47f af37 	bne.w	8f0a <usb_isr+0x1e2>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    909c:	b280      	uxth	r0, r0
    909e:	2804      	cmp	r0, #4
    90a0:	f000 81ba 	beq.w	9418 <usb_isr+0x6f0>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    90a4:	2805      	cmp	r0, #5
    90a6:	f47f af30 	bne.w	8f0a <usb_isr+0x1e2>
			endpoint0_buffer[0] = usb_audio_receive_setting;
    90aa:	4b96      	ldr	r3, [pc, #600]	; (9304 <usb_isr+0x5dc>)
    90ac:	781b      	ldrb	r3, [r3, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    90ae:	2101      	movs	r1, #1
			endpoint0_buffer[0] = usb_audio_receive_setting;
    90b0:	4892      	ldr	r0, [pc, #584]	; (92fc <usb_isr+0x5d4>)
    90b2:	7003      	strb	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    90b4:	f7ff fdd6 	bl	8c64 <endpoint0_transmit.constprop.0>
			return;
    90b8:	e6a5      	b.n	8e06 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    90ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    90be:	f248 23a1 	movw	r3, #33441	; 0x82a1
    90c2:	429a      	cmp	r2, r3
    90c4:	f43f af43 	beq.w	8f4e <usb_isr+0x226>
    90c8:	e71f      	b.n	8f0a <usb_isr+0x1e2>
    90ca:	f4ff af1e 	bcc.w	8f0a <usb_isr+0x1e2>
    90ce:	f240 1321 	movw	r3, #289	; 0x121
    90d2:	429a      	cmp	r2, r3
    90d4:	d09f      	beq.n	9016 <usb_isr+0x2ee>
    90d6:	f240 2321 	movw	r3, #545	; 0x221
    90da:	429a      	cmp	r2, r3
    90dc:	d09b      	beq.n	9016 <usb_isr+0x2ee>
    90de:	e714      	b.n	8f0a <usb_isr+0x1e2>
    90e0:	2a80      	cmp	r2, #128	; 0x80
    90e2:	f47f af12 	bne.w	8f0a <usb_isr+0x1e2>
		reply_buffer[0] = 0;
    90e6:	4888      	ldr	r0, [pc, #544]	; (9308 <usb_isr+0x5e0>)
		endpoint0_transmit(reply_buffer, 2, 0);
    90e8:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    90ea:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    90ec:	f7ff fdba 	bl	8c64 <endpoint0_transmit.constprop.0>
		return;
    90f0:	e689      	b.n	8e06 <usb_isr+0xde>
			usb_high_speed = 0;
    90f2:	4a86      	ldr	r2, [pc, #536]	; (930c <usb_isr+0x5e4>)
    90f4:	7013      	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    90f6:	4b86      	ldr	r3, [pc, #536]	; (9310 <usb_isr+0x5e8>)
    90f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    90fc:	061a      	lsls	r2, r3, #24
    90fe:	f57f af00 	bpl.w	8f02 <usb_isr+0x1da>
    9102:	e6ee      	b.n	8ee2 <usb_isr+0x1ba>
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    9104:	4983      	ldr	r1, [pc, #524]	; (9314 <usb_isr+0x5ec>)
		usb_configuration = setup.wValue;
    9106:	f3c7 4c07 	ubfx	ip, r7, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    910a:	f04f 12c8 	mov.w	r2, #13107400	; 0xc800c8
    910e:	9301      	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    9110:	f88b c000 	strb.w	ip, [fp]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    9114:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    9118:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    911c:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    9120:	f04f 12c4 	mov.w	r2, #12845252	; 0xc400c4
    9124:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
    9128:	3ac2      	subs	r2, #194	; 0xc2
    912a:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
		usb_serial_configure();
    912e:	f001 f8ff 	bl	a330 <usb_serial_configure>
		usb_midi_configure();
    9132:	f000 fe99 	bl	9e68 <usb_midi_configure>
		usb_audio_configure();
    9136:	f000 fd39 	bl	9bac <usb_audio_configure>
	endpoint0_transfer_ack.next = 1;
    913a:	4a71      	ldr	r2, [pc, #452]	; (9300 <usb_isr+0x5d8>)
    913c:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    913e:	9b01      	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9140:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9142:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9144:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    9146:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9148:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    914a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    914e:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9150:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9154:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    9158:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    915c:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9160:	f8c9 3000 	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    9164:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9168:	2b00      	cmp	r3, #0
    916a:	d1fb      	bne.n	9164 <usb_isr+0x43c>
    916c:	e64b      	b.n	8e06 <usb_isr+0xde>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    916e:	4b6a      	ldr	r3, [pc, #424]	; (9318 <usb_isr+0x5f0>)
    9170:	6859      	ldr	r1, [r3, #4]
    9172:	2900      	cmp	r1, #0
    9174:	f43f aec9 	beq.w	8f0a <usb_isr+0x1e2>
    9178:	ea4f 4c17 	mov.w	ip, r7, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    917c:	fa1f fe80 	uxth.w	lr, r0
    9180:	e004      	b.n	918c <usb_isr+0x464>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9182:	6919      	ldr	r1, [r3, #16]
    9184:	330c      	adds	r3, #12
    9186:	2900      	cmp	r1, #0
    9188:	f43f aebf 	beq.w	8f0a <usb_isr+0x1e2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    918c:	881a      	ldrh	r2, [r3, #0]
    918e:	4562      	cmp	r2, ip
    9190:	d1f7      	bne.n	9182 <usb_isr+0x45a>
    9192:	885a      	ldrh	r2, [r3, #2]
    9194:	4572      	cmp	r2, lr
    9196:	d1f4      	bne.n	9182 <usb_isr+0x45a>
				if ((setup.wValue >> 8) == 3) {
    9198:	ea4f 221c 	mov.w	r2, ip, lsr #8
    919c:	2a03      	cmp	r2, #3
    919e:	f000 80e2 	beq.w	9366 <usb_isr+0x63e>
					datalen = list->length;
    91a2:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    91a4:	0c00      	lsrs	r0, r0, #16
    91a6:	4282      	cmp	r2, r0
    91a8:	bf28      	it	cs
    91aa:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    91ac:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
    91b0:	4617      	mov	r7, r2
    91b2:	f040 80de 	bne.w	9372 <usb_isr+0x64a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    91b6:	4b55      	ldr	r3, [pc, #340]	; (930c <usb_isr+0x5e4>)
    91b8:	4958      	ldr	r1, [pc, #352]	; (931c <usb_isr+0x5f4>)
    91ba:	7818      	ldrb	r0, [r3, #0]
    91bc:	4b58      	ldr	r3, [pc, #352]	; (9320 <usb_isr+0x5f8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    91be:	f8df a164 	ldr.w	sl, [pc, #356]	; 9324 <usb_isr+0x5fc>
    91c2:	2800      	cmp	r0, #0
    91c4:	bf18      	it	ne
    91c6:	4619      	movne	r1, r3
    91c8:	4856      	ldr	r0, [pc, #344]	; (9324 <usb_isr+0x5fc>)
    91ca:	f7ff fa83 	bl	86d4 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    91ce:	f02a 031f 	bic.w	r3, sl, #31
	uint32_t end_addr = (uint32_t)addr + size;
    91d2:	eb0a 0107 	add.w	r1, sl, r7
	asm("dsb");
    91d6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    91da:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    91de:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    91e2:	3320      	adds	r3, #32
	} while (location < end_addr);
    91e4:	4299      	cmp	r1, r3
    91e6:	d8fa      	bhi.n	91de <usb_isr+0x4b6>
	asm("dsb");
    91e8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    91ec:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    91f0:	484c      	ldr	r0, [pc, #304]	; (9324 <usb_isr+0x5fc>)
    91f2:	4639      	mov	r1, r7
    91f4:	f7ff fd36 	bl	8c64 <endpoint0_transmit.constprop.0>
				return;
    91f8:	e605      	b.n	8e06 <usb_isr+0xde>
		if (endpoint > 7) break;
    91fa:	f010 0f78 	tst.w	r0, #120	; 0x78
    91fe:	b283      	uxth	r3, r0
    9200:	f47f ae83 	bne.w	8f0a <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    9204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    9208:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    920c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    9210:	bf14      	ite	ne
    9212:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    9216:	f043 0301 	orreq.w	r3, r3, #1
    921a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    921e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    9220:	4b37      	ldr	r3, [pc, #220]	; (9300 <usb_isr+0x5d8>)
	endpoint_queue_head[1].status = 0;
    9222:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9224:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9226:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9228:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    922a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    922c:	2280      	movs	r2, #128	; 0x80
    922e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9230:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9234:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9238:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    923c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9240:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    9244:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9248:	2b00      	cmp	r3, #0
    924a:	d1fb      	bne.n	9244 <usb_isr+0x51c>
    924c:	e5db      	b.n	8e06 <usb_isr+0xde>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    924e:	b280      	uxth	r0, r0
    9250:	2804      	cmp	r0, #4
    9252:	f000 80c5 	beq.w	93e0 <usb_isr+0x6b8>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    9256:	2805      	cmp	r0, #5
    9258:	f47f ae57 	bne.w	8f0a <usb_isr+0x1e2>
	endpoint0_transfer_ack.next = 1;
    925c:	4a28      	ldr	r2, [pc, #160]	; (9300 <usb_isr+0x5d8>)
			usb_audio_receive_setting = setup.wValue;
    925e:	f3c7 4c0f 	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    9262:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9264:	6093      	str	r3, [r2, #8]
			usb_audio_receive_setting = setup.wValue;
    9266:	4b27      	ldr	r3, [pc, #156]	; (9304 <usb_isr+0x5dc>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9268:	64aa      	str	r2, [r5, #72]	; 0x48
			usb_audio_receive_setting = setup.wValue;
    926a:	f883 c000 	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    926e:	2301      	movs	r3, #1
    9270:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9272:	2380      	movs	r3, #128	; 0x80
    9274:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9276:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    927a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    927e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9286:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    928a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    928e:	2b00      	cmp	r3, #0
    9290:	d1fb      	bne.n	928a <usb_isr+0x562>
    9292:	e5b8      	b.n	8e06 <usb_isr+0xde>
		endpoint = setup.wIndex & 0x7F;
    9294:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    9296:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    929a:	f47f ae36 	bne.w	8f0a <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    929e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    92a2:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    92a6:	4a18      	ldr	r2, [pc, #96]	; (9308 <usb_isr+0x5e0>)
    92a8:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    92aa:	0618      	lsls	r0, r3, #24
    92ac:	d458      	bmi.n	9360 <usb_isr+0x638>
    92ae:	07cf      	lsls	r7, r1, #31
    92b0:	d501      	bpl.n	92b6 <usb_isr+0x58e>
			reply_buffer[0] = 1;
    92b2:	2301      	movs	r3, #1
    92b4:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    92b6:	2102      	movs	r1, #2
    92b8:	4813      	ldr	r0, [pc, #76]	; (9308 <usb_isr+0x5e0>)
    92ba:	f7ff fcd3 	bl	8c64 <endpoint0_transmit.constprop.0>
		return;
    92be:	e5a2      	b.n	8e06 <usb_isr+0xde>
		if (setup.wLength >= 3) {
    92c0:	f5b0 3f40 	cmp.w	r0, #196608	; 0x30000
    92c4:	f4ff ae21 	bcc.w	8f0a <usb_isr+0x1e2>
			endpoint0_buffer[0] = 44100 & 255;
    92c8:	480c      	ldr	r0, [pc, #48]	; (92fc <usb_isr+0x5d4>)
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    92ca:	2103      	movs	r1, #3
			endpoint0_buffer[2] = 0;
    92cc:	7083      	strb	r3, [r0, #2]
			endpoint0_buffer[0] = 44100 & 255;
    92ce:	f64a 4344 	movw	r3, #44100	; 0xac44
    92d2:	8003      	strh	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    92d4:	f7ff fcc6 	bl	8c64 <endpoint0_transmit.constprop.0>
			return;
    92d8:	e595      	b.n	8e06 <usb_isr+0xde>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    92da:	b280      	uxth	r0, r0
    92dc:	2800      	cmp	r0, #0
    92de:	f47f aeac 	bne.w	903a <usb_isr+0x312>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    92e2:	4b11      	ldr	r3, [pc, #68]	; (9328 <usb_isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
    92e4:	f3c7 4c07 	ubfx	ip, r7, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    92e8:	681a      	ldr	r2, [r3, #0]
    92ea:	4b10      	ldr	r3, [pc, #64]	; (932c <usb_isr+0x604>)
    92ec:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    92ee:	4b10      	ldr	r3, [pc, #64]	; (9330 <usb_isr+0x608>)
    92f0:	f883 c000 	strb.w	ip, [r3]
    92f4:	e6a1      	b.n	903a <usb_isr+0x312>
    92f6:	bf00      	nop
    92f8:	2000c6f8 	.word	0x2000c6f8
    92fc:	200216d4 	.word	0x200216d4
    9300:	200092e0 	.word	0x200092e0
    9304:	2002260d 	.word	0x2002260d
    9308:	20022024 	.word	0x20022024
    930c:	20022613 	.word	0x20022613
    9310:	402e0000 	.word	0x402e0000
    9314:	00cc0002 	.word	0x00cc0002
    9318:	20008704 	.word	0x20008704
    931c:	60002888 	.word	0x60002888
    9320:	600029e0 	.word	0x600029e0
    9324:	202009c0 	.word	0x202009c0
    9328:	20022564 	.word	0x20022564
    932c:	200225c8 	.word	0x200225c8
    9330:	20022611 	.word	0x20022611
				endpoint0_notify_mask = 0;
    9334:	2100      	movs	r1, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9336:	f242 0021 	movw	r0, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    933a:	6011      	str	r1, [r2, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    933c:	493d      	ldr	r1, [pc, #244]	; (9434 <usb_isr+0x70c>)
    933e:	e9d1 2100 	ldrd	r2, r1, [r1]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9342:	b295      	uxth	r5, r2
    9344:	4285      	cmp	r5, r0
    9346:	d028      	beq.n	939a <usb_isr+0x672>
	if (setup.word1 == 0x02010121 || setup.word1 == 0x01000121 /* TODO: check setup.word2 */) {
    9348:	4b3b      	ldr	r3, [pc, #236]	; (9438 <usb_isr+0x710>)
    934a:	429a      	cmp	r2, r3
    934c:	d003      	beq.n	9356 <usb_isr+0x62e>
    934e:	4b3b      	ldr	r3, [pc, #236]	; (943c <usb_isr+0x714>)
    9350:	429a      	cmp	r2, r3
    9352:	f47f ad67 	bne.w	8e24 <usb_isr+0xfc>
		usb_audio_set_feature(&endpoint0_setupdata, endpoint0_buffer);
    9356:	493a      	ldr	r1, [pc, #232]	; (9440 <usb_isr+0x718>)
    9358:	4836      	ldr	r0, [pc, #216]	; (9434 <usb_isr+0x70c>)
    935a:	f000 fccd 	bl	9cf8 <usb_audio_set_feature>
    935e:	e561      	b.n	8e24 <usb_isr+0xfc>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    9360:	03cb      	lsls	r3, r1, #15
    9362:	d4a6      	bmi.n	92b2 <usb_isr+0x58a>
    9364:	e7a7      	b.n	92b6 <usb_isr+0x58e>
					datalen = *(list->addr);
    9366:	780a      	ldrb	r2, [r1, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;
    9368:	0c00      	lsrs	r0, r0, #16
    936a:	4282      	cmp	r2, r0
    936c:	bf28      	it	cs
    936e:	4602      	movcs	r2, r0
    9370:	4617      	mov	r7, r2
				} else if (setup.wValue == 0x700) {
    9372:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
    9376:	d151      	bne.n	941c <usb_isr+0x6f4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    9378:	4b32      	ldr	r3, [pc, #200]	; (9444 <usb_isr+0x71c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    937a:	463a      	mov	r2, r7
    937c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 9464 <usb_isr+0x73c>
					if (usb_high_speed) src = usb_config_descriptor_12;
    9380:	7818      	ldrb	r0, [r3, #0]
    9382:	4931      	ldr	r1, [pc, #196]	; (9448 <usb_isr+0x720>)
    9384:	4b31      	ldr	r3, [pc, #196]	; (944c <usb_isr+0x724>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9386:	2800      	cmp	r0, #0
    9388:	bf18      	it	ne
    938a:	4619      	movne	r1, r3
    938c:	4650      	mov	r0, sl
    938e:	f7ff f9a1 	bl	86d4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    9392:	2307      	movs	r3, #7
    9394:	f88a 3001 	strb.w	r3, [sl, #1]
    9398:	e719      	b.n	91ce <usb_isr+0x4a6>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    939a:	b289      	uxth	r1, r1
    939c:	2900      	cmp	r1, #0
    939e:	d1d3      	bne.n	9348 <usb_isr+0x620>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    93a0:	4927      	ldr	r1, [pc, #156]	; (9440 <usb_isr+0x718>)
    93a2:	4d2b      	ldr	r5, [pc, #172]	; (9450 <usb_isr+0x728>)
    93a4:	c903      	ldmia	r1, {r0, r1}
    93a6:	80a9      	strh	r1, [r5, #4]
		if (usb_cdc_line_coding[0] == 134) {
    93a8:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    93aa:	ea4f 4111 	mov.w	r1, r1, lsr #16
    93ae:	6028      	str	r0, [r5, #0]
    93b0:	71a9      	strb	r1, [r5, #6]
		if (usb_cdc_line_coding[0] == 134) {
    93b2:	d1c9      	bne.n	9348 <usb_isr+0x620>
	__disable_irq();
    93b4:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    93b6:	4827      	ldr	r0, [pc, #156]	; (9454 <usb_isr+0x72c>)
    93b8:	7801      	ldrb	r1, [r0, #0]
    93ba:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    93be:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    93c0:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    93c4:	060d      	lsls	r5, r1, #24
    93c6:	d406      	bmi.n	93d6 <usb_isr+0x6ae>
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    93c8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    93cc:	2080      	movs	r0, #128	; 0x80
    93ce:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    93d2:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
	__enable_irq();
    93d6:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    93d8:	4b1f      	ldr	r3, [pc, #124]	; (9458 <usb_isr+0x730>)
    93da:	2150      	movs	r1, #80	; 0x50
    93dc:	7019      	strb	r1, [r3, #0]
    93de:	e7b3      	b.n	9348 <usb_isr+0x620>
	endpoint0_transfer_ack.next = 1;
    93e0:	4a1e      	ldr	r2, [pc, #120]	; (945c <usb_isr+0x734>)
			usb_audio_transmit_setting = setup.wValue;
    93e2:	f3c7 4c0f 	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    93e6:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    93e8:	6093      	str	r3, [r2, #8]
			usb_audio_transmit_setting = setup.wValue;
    93ea:	4b1d      	ldr	r3, [pc, #116]	; (9460 <usb_isr+0x738>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    93ec:	64aa      	str	r2, [r5, #72]	; 0x48
			usb_audio_transmit_setting = setup.wValue;
    93ee:	f883 c000 	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    93f2:	2301      	movs	r3, #1
    93f4:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    93f6:	2380      	movs	r3, #128	; 0x80
    93f8:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    93fa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    93fe:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9402:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    940a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    940e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9412:	2b00      	cmp	r3, #0
    9414:	d1fb      	bne.n	940e <usb_isr+0x6e6>
    9416:	e4f6      	b.n	8e06 <usb_isr+0xde>
			endpoint0_buffer[0] = usb_audio_transmit_setting;
    9418:	4b11      	ldr	r3, [pc, #68]	; (9460 <usb_isr+0x738>)
    941a:	e647      	b.n	90ac <usb_isr+0x384>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    941c:	f8df a044 	ldr.w	sl, [pc, #68]	; 9464 <usb_isr+0x73c>
    9420:	463a      	mov	r2, r7
    9422:	4650      	mov	r0, sl
    9424:	f7ff f956 	bl	86d4 <memcpy>
    9428:	e6d1      	b.n	91ce <usb_isr+0x4a6>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    942a:	2006      	movs	r0, #6
    942c:	f7ff fc66 	bl	8cfc <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    9430:	f00c f8e6 	bl	15600 <___reboot_Teensyduino__veneer>
    9434:	2000c6f8 	.word	0x2000c6f8
    9438:	02010121 	.word	0x02010121
    943c:	01000121 	.word	0x01000121
    9440:	200216d4 	.word	0x200216d4
    9444:	20022613 	.word	0x20022613
    9448:	600029e0 	.word	0x600029e0
    944c:	60002888 	.word	0x60002888
    9450:	200225c0 	.word	0x200225c0
    9454:	20022606 	.word	0x20022606
    9458:	20022614 	.word	0x20022614
    945c:	200092e0 	.word	0x200092e0
    9460:	20022610 	.word	0x20022610
    9464:	202009c0 	.word	0x202009c0

00009468 <usb_config_rx>:
{
    9468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    946c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    946e:	1e83      	subs	r3, r0, #2
    9470:	2b04      	cmp	r3, #4
    9472:	d901      	bls.n	9478 <usb_config_rx+0x10>
}
    9474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9478:	f8df 904c 	ldr.w	r9, [pc, #76]	; 94c8 <usb_config_rx+0x60>
    947c:	4615      	mov	r5, r2
    947e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    9480:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9482:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    9486:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9488:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    948c:	2100      	movs	r1, #0
    948e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9492:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    9494:	f003 fb92 	bl	cbbc <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9498:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    949c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    949e:	0952      	lsrs	r2, r2, #5
    94a0:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    94a4:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    94a8:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    94ac:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    94b0:	2f00      	cmp	r7, #0
    94b2:	d0df      	beq.n	9474 <usb_config_rx+0xc>
    94b4:	4a03      	ldr	r2, [pc, #12]	; (94c4 <usb_config_rx+0x5c>)
    94b6:	40b3      	lsls	r3, r6
    94b8:	6811      	ldr	r1, [r2, #0]
    94ba:	430b      	orrs	r3, r1
    94bc:	6013      	str	r3, [r2, #0]
}
    94be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    94c2:	bf00      	nop
    94c4:	200216e0 	.word	0x200216e0
    94c8:	20000000 	.word	0x20000000

000094cc <usb_config_tx>:
{
    94cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    94d0:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    94d2:	1e81      	subs	r1, r0, #2
    94d4:	2904      	cmp	r1, #4
    94d6:	d901      	bls.n	94dc <usb_config_tx+0x10>
}
    94d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    94dc:	01c7      	lsls	r7, r0, #7
    94de:	f8df 904c 	ldr.w	r9, [pc, #76]	; 952c <usb_config_tx+0x60>
    94e2:	4692      	mov	sl, r2
    94e4:	4604      	mov	r4, r0
    94e6:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    94e8:	223c      	movs	r2, #60	; 0x3c
    94ea:	2100      	movs	r1, #0
    94ec:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    94ee:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    94f2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    94f4:	f108 0004 	add.w	r0, r8, #4
    94f8:	f003 fb60 	bl	cbbc <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    94fc:	faba f28a 	clz	r2, sl
    9500:	0952      	lsrs	r2, r2, #5
    9502:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    9506:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    950a:	2201      	movs	r2, #1
	qh->callback_function = callback;
    950c:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9510:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9514:	2e00      	cmp	r6, #0
    9516:	d0df      	beq.n	94d8 <usb_config_tx+0xc>
    9518:	4b03      	ldr	r3, [pc, #12]	; (9528 <usb_config_tx+0x5c>)
    951a:	3410      	adds	r4, #16
    951c:	6819      	ldr	r1, [r3, #0]
    951e:	40a2      	lsls	r2, r4
    9520:	430a      	orrs	r2, r1
    9522:	601a      	str	r2, [r3, #0]
}
    9524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9528:	200216e0 	.word	0x200216e0
    952c:	20000000 	.word	0x20000000

00009530 <usb_config_rx_iso>:
{
    9530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9534:	4614      	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    9536:	3a01      	subs	r2, #1
    9538:	2a02      	cmp	r2, #2
    953a:	d804      	bhi.n	9546 <usb_config_rx_iso+0x16>
    953c:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    953e:	1e83      	subs	r3, r0, #2
    9540:	4607      	mov	r7, r0
    9542:	2b04      	cmp	r3, #4
    9544:	d901      	bls.n	954a <usb_config_rx_iso+0x1a>
}
    9546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    954a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 9590 <usb_config_rx_iso+0x60>
    954e:	460e      	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    9550:	07a4      	lsls	r4, r4, #30
	memset(qh, 0, sizeof(endpoint_t));
    9552:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9554:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    9558:	2100      	movs	r1, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    955a:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    955e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (mult << 30);
    9562:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
	memset(qh, 0, sizeof(endpoint_t));
    9566:	f003 fb29 	bl	cbbc <memset>
	qh->next = 1; // Terminate bit = 1
    956a:	2301      	movs	r3, #1
	qh->config = config;
    956c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    9570:	f8c8 5038 	str.w	r5, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9574:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    9578:	2d00      	cmp	r5, #0
    957a:	d0e4      	beq.n	9546 <usb_config_rx_iso+0x16>
    957c:	4a03      	ldr	r2, [pc, #12]	; (958c <usb_config_rx_iso+0x5c>)
    957e:	40bb      	lsls	r3, r7
    9580:	6811      	ldr	r1, [r2, #0]
    9582:	430b      	orrs	r3, r1
    9584:	6013      	str	r3, [r2, #0]
}
    9586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    958a:	bf00      	nop
    958c:	200216e0 	.word	0x200216e0
    9590:	20000000 	.word	0x20000000

00009594 <usb_config_tx_iso>:
{
    9594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9598:	4614      	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    959a:	3a01      	subs	r2, #1
    959c:	2a02      	cmp	r2, #2
    959e:	d804      	bhi.n	95aa <usb_config_tx_iso+0x16>
    95a0:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    95a2:	1e83      	subs	r3, r0, #2
    95a4:	4607      	mov	r7, r0
    95a6:	2b04      	cmp	r3, #4
    95a8:	d901      	bls.n	95ae <usb_config_tx_iso+0x1a>
}
    95aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    95ae:	ea4f 18c0 	mov.w	r8, r0, lsl #7
    95b2:	f8df a048 	ldr.w	sl, [pc, #72]	; 95fc <usb_config_tx_iso+0x68>
    95b6:	460e      	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    95b8:	07a4      	lsls	r4, r4, #30
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    95ba:	f108 0840 	add.w	r8, r8, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    95be:	223c      	movs	r2, #60	; 0x3c
    95c0:	2100      	movs	r1, #0
	uint32_t config = (packet_size << 16) | (mult << 30);
    95c2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    95c6:	eb0a 0908 	add.w	r9, sl, r8
	memset(qh, 0, sizeof(endpoint_t));
    95ca:	f109 0004 	add.w	r0, r9, #4
    95ce:	f003 faf5 	bl	cbbc <memset>
	qh->next = 1; // Terminate bit = 1
    95d2:	2301      	movs	r3, #1
	qh->config = config;
    95d4:	f84a 4008 	str.w	r4, [sl, r8]
	qh->callback_function = callback;
    95d8:	f8c9 5038 	str.w	r5, [r9, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    95dc:	f8c9 3008 	str.w	r3, [r9, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    95e0:	2d00      	cmp	r5, #0
    95e2:	d0e2      	beq.n	95aa <usb_config_tx_iso+0x16>
    95e4:	4a04      	ldr	r2, [pc, #16]	; (95f8 <usb_config_tx_iso+0x64>)
    95e6:	f107 0010 	add.w	r0, r7, #16
    95ea:	6811      	ldr	r1, [r2, #0]
    95ec:	4083      	lsls	r3, r0
    95ee:	430b      	orrs	r3, r1
    95f0:	6013      	str	r3, [r2, #0]
}
    95f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    95f6:	bf00      	nop
    95f8:	200216e0 	.word	0x200216e0
    95fc:	20000000 	.word	0x20000000

00009600 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    9600:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    9602:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    9604:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    9606:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    960a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    960e:	b410      	push	{r4}
	transfer->next = 1;
    9610:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    9612:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    9614:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    9618:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    961a:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    961e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    9622:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    9624:	6181      	str	r1, [r0, #24]
}
    9626:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    962a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    962e:	4770      	bx	lr

00009630 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9630:	1e83      	subs	r3, r0, #2
{
    9632:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9634:	2b04      	cmp	r3, #4
    9636:	d900      	bls.n	963a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    9638:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    963a:	4b06      	ldr	r3, [pc, #24]	; (9654 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    963c:	f100 0110 	add.w	r1, r0, #16
    9640:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    9644:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    9648:	fa0c f101 	lsl.w	r1, ip, r1
    964c:	3040      	adds	r0, #64	; 0x40
    964e:	f7ff baa9 	b.w	8ba4 <schedule_transfer>
    9652:	bf00      	nop
    9654:	20000000 	.word	0x20000000

00009658 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9658:	1e83      	subs	r3, r0, #2
{
    965a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    965c:	2b04      	cmp	r3, #4
    965e:	d900      	bls.n	9662 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    9660:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    9662:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    9664:	4b02      	ldr	r3, [pc, #8]	; (9670 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    9666:	4081      	lsls	r1, r0
    9668:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    966c:	f7ff ba9a 	b.w	8ba4 <schedule_transfer>
    9670:	20000000 	.word	0x20000000

00009674 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    9674:	6840      	ldr	r0, [r0, #4]
#endif
}
    9676:	4770      	bx	lr

00009678 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>:
	update_responsibility = false;
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
    9678:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    967c:	4298      	cmp	r0, r3
{
    967e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    9682:	d309      	bcc.n	9698 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x20>
    9684:	e00a      	b.n	969c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
		uint32_t n = *src++;
    9686:	f850 4b04 	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    968a:	0c25      	lsrs	r5, r4, #16
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    968c:	4283      	cmp	r3, r0
		*left++ = n & 0xFFFF;
    968e:	f821 4b02 	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    9692:	f822 5b02 	strh.w	r5, [r2], #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    9696:	d901      	bls.n	969c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
    9698:	078c      	lsls	r4, r1, #30
    969a:	d4f4      	bmi.n	9686 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xe>
	}

	while ((src < target - 2)) {
    969c:	f1a3 0408 	sub.w	r4, r3, #8
    96a0:	42a0      	cmp	r0, r4
    96a2:	d230      	bcs.n	9706 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8e>
    96a4:	f1a3 0809 	sub.w	r8, r3, #9
    96a8:	f100 0c08 	add.w	ip, r0, #8
    96ac:	4696      	mov	lr, r2
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    96ae:	4f17      	ldr	r7, [pc, #92]	; (970c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x94>)
    96b0:	eba8 0800 	sub.w	r8, r8, r0
    96b4:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    96b8:	f108 0801 	add.w	r8, r8, #1
    96bc:	ea4f 0988 	mov.w	r9, r8, lsl #2
    96c0:	eb01 0688 	add.w	r6, r1, r8, lsl #2
		uint32_t n = *src++;
    96c4:	e95c a402 	ldrd	sl, r4, [ip, #-8]
	while ((src < target - 2)) {
    96c8:	f10c 0c08 	add.w	ip, ip, #8
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    96cc:	fa1f f58a 	uxth.w	r5, sl
    96d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    96d4:	403c      	ands	r4, r7
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    96d6:	f841 5b04 	str.w	r5, [r1], #4
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    96da:	ea44 441a 	orr.w	r4, r4, sl, lsr #16
	while ((src < target - 2)) {
    96de:	42b1      	cmp	r1, r6
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    96e0:	f84e 4b04 	str.w	r4, [lr], #4
	while ((src < target - 2)) {
    96e4:	d1ee      	bne.n	96c4 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x4c>
		uint32_t n = *src++;
    96e6:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
		right+=2;
    96ea:	444a      	add	r2, r9
	}

	while ((src < target)) {
    96ec:	4283      	cmp	r3, r0
    96ee:	d908      	bls.n	9702 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8a>
		uint32_t n = *src++;
    96f0:	f850 1b04 	ldr.w	r1, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    96f4:	0c0c      	lsrs	r4, r1, #16
	while ((src < target)) {
    96f6:	4283      	cmp	r3, r0
		*left++ = n & 0xFFFF;
    96f8:	f826 1b02 	strh.w	r1, [r6], #2
		*right++ = n >> 16;
    96fc:	f822 4b02 	strh.w	r4, [r2], #2
	while ((src < target)) {
    9700:	d8f6      	bhi.n	96f0 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x78>
	}
}
    9702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while ((src < target - 2)) {
    9706:	460e      	mov	r6, r1
	while ((src < target)) {
    9708:	e7f0      	b.n	96ec <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x74>
    970a:	bf00      	nop
    970c:	ffff0000 	.word	0xffff0000

00009710 <sync_event(transfer_struct*)>:
{
    9710:	b538      	push	{r3, r4, r5, lr}
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9712:	4a11      	ldr	r2, [pc, #68]	; (9758 <sync_event(transfer_struct*)+0x48>)
    9714:	4b11      	ldr	r3, [pc, #68]	; (975c <sync_event(transfer_struct*)+0x4c>)
    9716:	7811      	ldrb	r1, [r2, #0]
    9718:	681a      	ldr	r2, [r3, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    971a:	2300      	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    971c:	4c10      	ldr	r4, [pc, #64]	; (9760 <sync_event(transfer_struct*)+0x50>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    971e:	4d11      	ldr	r5, [pc, #68]	; (9764 <sync_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9720:	40ca      	lsrs	r2, r1
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    9722:	4811      	ldr	r0, [pc, #68]	; (9768 <sync_event(transfer_struct*)+0x58>)
    9724:	4621      	mov	r1, r4
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9726:	6022      	str	r2, [r4, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    9728:	782a      	ldrb	r2, [r5, #0]
    972a:	f7ff ff69 	bl	9600 <usb_prepare_transfer>
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
    972e:	782b      	ldrb	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    9730:	4423      	add	r3, r4
	asm("dsb");
    9732:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
    9736:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    973a:	f8c2 4f68 	str.w	r4, [r2, #3944]	; 0xf68
		location += 32;
    973e:	3420      	adds	r4, #32
	} while (location < end_addr);
    9740:	42a3      	cmp	r3, r4
    9742:	d8fa      	bhi.n	973a <sync_event(transfer_struct*)+0x2a>
	asm("dsb");
    9744:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9748:	f3bf 8f6f 	isb	sy
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    974c:	4906      	ldr	r1, [pc, #24]	; (9768 <sync_event(transfer_struct*)+0x58>)
    974e:	2006      	movs	r0, #6
}
    9750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    9754:	f7ff bf6c 	b.w	9630 <usb_transmit>
    9758:	2002260f 	.word	0x2002260f
    975c:	200216f8 	.word	0x200216f8
    9760:	20200820 	.word	0x20200820
    9764:	2002260e 	.word	0x2002260e
    9768:	2000a500 	.word	0x2000a500

0000976c <AudioOutputUSB::update()>:
		len--;
	}
}

void AudioOutputUSB::update(void)
{
    976c:	b538      	push	{r3, r4, r5, lr}
    976e:	4605      	mov	r5, r0
	audio_block_t *left, *right;

	// TODO: we shouldn't be writing to these......
	//left = receiveReadOnly(0); // input 0 = left channel
	//right = receiveReadOnly(1); // input 1 = right channel
	left = receiveWritable(0); // input 0 = left channel
    9770:	2100      	movs	r1, #0
    9772:	f7fe f8ef 	bl	7954 <AudioStream::receiveWritable(unsigned int)>
	right = receiveWritable(1); // input 1 = right channel
    9776:	2101      	movs	r1, #1
	left = receiveWritable(0); // input 0 = left channel
    9778:	4604      	mov	r4, r0
	right = receiveWritable(1); // input 1 = right channel
    977a:	4628      	mov	r0, r5
    977c:	f7fe f8ea 	bl	7954 <AudioStream::receiveWritable(unsigned int)>
	if (usb_audio_transmit_setting == 0) {
    9780:	4b3b      	ldr	r3, [pc, #236]	; (9870 <AudioOutputUSB::update()+0x104>)
	right = receiveWritable(1); // input 1 = right channel
    9782:	4605      	mov	r5, r0
	if (usb_audio_transmit_setting == 0) {
    9784:	781b      	ldrb	r3, [r3, #0]
    9786:	b1f3      	cbz	r3, 97c6 <AudioOutputUSB::update()+0x5a>
		if (right_1st) { release(right_1st); right_1st = NULL; }
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
		offset_1st = 0;
		return;
	}
	if (left == NULL) {
    9788:	2c00      	cmp	r4, #0
    978a:	d04a      	beq.n	9822 <AudioOutputUSB::update()+0xb6>
			if (right) release(right);
			return;
		}
		memset(left->data, 0, sizeof(left->data));
	}
	if (right == NULL) {
    978c:	2d00      	cmp	r5, #0
    978e:	d054      	beq.n	983a <AudioOutputUSB::update()+0xce>
			release(left);
			return;
		}
		memset(right->data, 0, sizeof(right->data));
	}
	__disable_irq();
    9790:	b672      	cpsid	i
	if (left_1st == NULL) {
    9792:	4b38      	ldr	r3, [pc, #224]	; (9874 <AudioOutputUSB::update()+0x108>)
    9794:	6818      	ldr	r0, [r3, #0]
    9796:	2800      	cmp	r0, #0
    9798:	d03d      	beq.n	9816 <AudioOutputUSB::update()+0xaa>
		left_1st = left;
		right_1st = right;
		offset_1st = 0;
	} else if (left_2nd == NULL) {
    979a:	4a37      	ldr	r2, [pc, #220]	; (9878 <AudioOutputUSB::update()+0x10c>)
    979c:	6811      	ldr	r1, [r2, #0]
    979e:	2900      	cmp	r1, #0
    97a0:	d056      	beq.n	9850 <AudioOutputUSB::update()+0xe4>
		left_2nd = left;
		right_2nd = right;
	} else {
		// buffer overrun - PC is consuming too slowly
		audio_block_t *discard1 = left_1st;
		left_1st = left_2nd;
    97a2:	6019      	str	r1, [r3, #0]
		left_2nd = left;
		audio_block_t *discard2 = right_1st;
		right_1st = right_2nd;
    97a4:	4935      	ldr	r1, [pc, #212]	; (987c <AudioOutputUSB::update()+0x110>)
		audio_block_t *discard2 = right_1st;
    97a6:	4b36      	ldr	r3, [pc, #216]	; (9880 <AudioOutputUSB::update()+0x114>)
		left_2nd = left;
    97a8:	6014      	str	r4, [r2, #0]
		right_2nd = right;
		offset_1st = 0; // TODO: discard part of this data?
    97aa:	2400      	movs	r4, #0
		right_1st = right_2nd;
    97ac:	680a      	ldr	r2, [r1, #0]
		right_2nd = right;
    97ae:	600d      	str	r5, [r1, #0]
		offset_1st = 0; // TODO: discard part of this data?
    97b0:	4934      	ldr	r1, [pc, #208]	; (9884 <AudioOutputUSB::update()+0x118>)
    97b2:	800c      	strh	r4, [r1, #0]
		audio_block_t *discard2 = right_1st;
    97b4:	681c      	ldr	r4, [r3, #0]
		right_1st = right_2nd;
    97b6:	601a      	str	r2, [r3, #0]
		//serial_print("*");
		release(discard1);
    97b8:	f7fe f880 	bl	78bc <AudioStream::release(audio_block_struct*)>
		release(discard2);
    97bc:	4620      	mov	r0, r4
    97be:	f7fe f87d 	bl	78bc <AudioStream::release(audio_block_struct*)>
	}
	__enable_irq();
    97c2:	b662      	cpsie	i
}
    97c4:	bd38      	pop	{r3, r4, r5, pc}
		if (left) release(left);
    97c6:	b114      	cbz	r4, 97ce <AudioOutputUSB::update()+0x62>
    97c8:	4620      	mov	r0, r4
    97ca:	f7fe f877 	bl	78bc <AudioStream::release(audio_block_struct*)>
		if (right) release(right);
    97ce:	b115      	cbz	r5, 97d6 <AudioOutputUSB::update()+0x6a>
    97d0:	4628      	mov	r0, r5
    97d2:	f7fe f873 	bl	78bc <AudioStream::release(audio_block_struct*)>
		if (left_1st) { release(left_1st); left_1st = NULL; }
    97d6:	4c27      	ldr	r4, [pc, #156]	; (9874 <AudioOutputUSB::update()+0x108>)
    97d8:	6820      	ldr	r0, [r4, #0]
    97da:	b118      	cbz	r0, 97e4 <AudioOutputUSB::update()+0x78>
    97dc:	f7fe f86e 	bl	78bc <AudioStream::release(audio_block_struct*)>
    97e0:	2300      	movs	r3, #0
    97e2:	6023      	str	r3, [r4, #0]
		if (left_2nd) { release(left_2nd); left_2nd = NULL; }
    97e4:	4c24      	ldr	r4, [pc, #144]	; (9878 <AudioOutputUSB::update()+0x10c>)
    97e6:	6820      	ldr	r0, [r4, #0]
    97e8:	b118      	cbz	r0, 97f2 <AudioOutputUSB::update()+0x86>
    97ea:	f7fe f867 	bl	78bc <AudioStream::release(audio_block_struct*)>
    97ee:	2300      	movs	r3, #0
    97f0:	6023      	str	r3, [r4, #0]
		if (right_1st) { release(right_1st); right_1st = NULL; }
    97f2:	4c23      	ldr	r4, [pc, #140]	; (9880 <AudioOutputUSB::update()+0x114>)
    97f4:	6820      	ldr	r0, [r4, #0]
    97f6:	b118      	cbz	r0, 9800 <AudioOutputUSB::update()+0x94>
    97f8:	f7fe f860 	bl	78bc <AudioStream::release(audio_block_struct*)>
    97fc:	2300      	movs	r3, #0
    97fe:	6023      	str	r3, [r4, #0]
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
    9800:	4c1e      	ldr	r4, [pc, #120]	; (987c <AudioOutputUSB::update()+0x110>)
    9802:	6820      	ldr	r0, [r4, #0]
    9804:	b118      	cbz	r0, 980e <AudioOutputUSB::update()+0xa2>
    9806:	f7fe f859 	bl	78bc <AudioStream::release(audio_block_struct*)>
    980a:	2300      	movs	r3, #0
    980c:	6023      	str	r3, [r4, #0]
		offset_1st = 0;
    980e:	4b1d      	ldr	r3, [pc, #116]	; (9884 <AudioOutputUSB::update()+0x118>)
    9810:	2200      	movs	r2, #0
    9812:	801a      	strh	r2, [r3, #0]
}
    9814:	bd38      	pop	{r3, r4, r5, pc}
		left_1st = left;
    9816:	601c      	str	r4, [r3, #0]
		right_1st = right;
    9818:	4a19      	ldr	r2, [pc, #100]	; (9880 <AudioOutputUSB::update()+0x114>)
		offset_1st = 0;
    981a:	4b1a      	ldr	r3, [pc, #104]	; (9884 <AudioOutputUSB::update()+0x118>)
		right_1st = right;
    981c:	6015      	str	r5, [r2, #0]
		offset_1st = 0;
    981e:	8018      	strh	r0, [r3, #0]
    9820:	e7cf      	b.n	97c2 <AudioOutputUSB::update()+0x56>
		left = allocate();
    9822:	f7fd fff5 	bl	7810 <AudioStream::allocate()>
		if (left == NULL) {
    9826:	4604      	mov	r4, r0
    9828:	b1b0      	cbz	r0, 9858 <AudioOutputUSB::update()+0xec>
		memset(left->data, 0, sizeof(left->data));
    982a:	f44f 7280 	mov.w	r2, #256	; 0x100
    982e:	2100      	movs	r1, #0
    9830:	3004      	adds	r0, #4
    9832:	f003 f9c3 	bl	cbbc <memset>
	if (right == NULL) {
    9836:	2d00      	cmp	r5, #0
    9838:	d1aa      	bne.n	9790 <AudioOutputUSB::update()+0x24>
		right = allocate();
    983a:	f7fd ffe9 	bl	7810 <AudioStream::allocate()>
		if (right == NULL) {
    983e:	4605      	mov	r5, r0
    9840:	b188      	cbz	r0, 9866 <AudioOutputUSB::update()+0xfa>
		memset(right->data, 0, sizeof(right->data));
    9842:	f44f 7280 	mov.w	r2, #256	; 0x100
    9846:	2100      	movs	r1, #0
    9848:	3004      	adds	r0, #4
    984a:	f003 f9b7 	bl	cbbc <memset>
    984e:	e79f      	b.n	9790 <AudioOutputUSB::update()+0x24>
		right_2nd = right;
    9850:	4b0a      	ldr	r3, [pc, #40]	; (987c <AudioOutputUSB::update()+0x110>)
		left_2nd = left;
    9852:	6014      	str	r4, [r2, #0]
		right_2nd = right;
    9854:	601d      	str	r5, [r3, #0]
    9856:	e7b4      	b.n	97c2 <AudioOutputUSB::update()+0x56>
			if (right) release(right);
    9858:	2d00      	cmp	r5, #0
    985a:	d0b3      	beq.n	97c4 <AudioOutputUSB::update()+0x58>
    985c:	4628      	mov	r0, r5
}
    985e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			if (right) release(right);
    9862:	f7fe b82b 	b.w	78bc <AudioStream::release(audio_block_struct*)>
			release(left);
    9866:	4620      	mov	r0, r4
}
    9868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			release(left);
    986c:	f7fe b826 	b.w	78bc <AudioStream::release(audio_block_struct*)>
    9870:	20022610 	.word	0x20022610
    9874:	20020138 	.word	0x20020138
    9878:	2002013c 	.word	0x2002013c
    987c:	20020144 	.word	0x20020144
    9880:	20020140 	.word	0x20020140
    9884:	200225e0 	.word	0x200225e0

00009888 <usb_audio_receive_callback>:
{
    9888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	AudioInputUSB::receive_flag = 1;
    988c:	2201      	movs	r2, #1
    988e:	4b4a      	ldr	r3, [pc, #296]	; (99b8 <usb_audio_receive_callback+0x130>)
	left = AudioInputUSB::incoming_left;
    9890:	f8df a138 	ldr.w	sl, [pc, #312]	; 99cc <usb_audio_receive_callback+0x144>
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
    9894:	0886      	lsrs	r6, r0, #2
	AudioInputUSB::receive_flag = 1;
    9896:	701a      	strb	r2, [r3, #0]
	count = AudioInputUSB::incoming_count;
    9898:	4b48      	ldr	r3, [pc, #288]	; (99bc <usb_audio_receive_callback+0x134>)
	left = AudioInputUSB::incoming_left;
    989a:	f8da 4000 	ldr.w	r4, [sl]
	count = AudioInputUSB::incoming_count;
    989e:	881f      	ldrh	r7, [r3, #0]
	right = AudioInputUSB::incoming_right;
    98a0:	4b47      	ldr	r3, [pc, #284]	; (99c0 <usb_audio_receive_callback+0x138>)
	count = AudioInputUSB::incoming_count;
    98a2:	46b9      	mov	r9, r7
	right = AudioInputUSB::incoming_right;
    98a4:	681d      	ldr	r5, [r3, #0]
	if (left == NULL) {
    98a6:	2c00      	cmp	r4, #0
    98a8:	d04a      	beq.n	9940 <usb_audio_receive_callback+0xb8>
	if (right == NULL) {
    98aa:	2d00      	cmp	r5, #0
    98ac:	d051      	beq.n	9952 <usb_audio_receive_callback+0xca>
	while (len > 0) {
    98ae:	2e00      	cmp	r6, #0
    98b0:	d058      	beq.n	9964 <usb_audio_receive_callback+0xdc>
		avail = AUDIO_BLOCK_SAMPLES - count;
    98b2:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
		if (len < avail) {
    98b6:	429e      	cmp	r6, r3
    98b8:	d37a      	bcc.n	99b0 <usb_audio_receive_callback+0x128>
    98ba:	f8df b114 	ldr.w	fp, [pc, #276]	; 99d0 <usb_audio_receive_callback+0x148>
    98be:	4f41      	ldr	r7, [pc, #260]	; (99c4 <usb_audio_receive_callback+0x13c>)
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    98c0:	f8df 8110 	ldr.w	r8, [pc, #272]	; 99d4 <usb_audio_receive_callback+0x14c>
		} else if (avail > 0) {
    98c4:	b9fb      	cbnz	r3, 9906 <usb_audio_receive_callback+0x7e>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    98c6:	683b      	ldr	r3, [r7, #0]
    98c8:	2b00      	cmp	r3, #0
    98ca:	d137      	bne.n	993c <usb_audio_receive_callback+0xb4>
    98cc:	f8d8 3000 	ldr.w	r3, [r8]
    98d0:	2b00      	cmp	r3, #0
    98d2:	d133      	bne.n	993c <usb_audio_receive_callback+0xb4>
			AudioInputUSB::ready_left = left;
    98d4:	603c      	str	r4, [r7, #0]
			AudioInputUSB::ready_right = right;
    98d6:	f8c8 5000 	str.w	r5, [r8]
			left = AudioStream::allocate();
    98da:	f7fd ff99 	bl	7810 <AudioStream::allocate()>
			if (left == NULL) {
    98de:	4604      	mov	r4, r0
    98e0:	2800      	cmp	r0, #0
    98e2:	d043      	beq.n	996c <usb_audio_receive_callback+0xe4>
			right = AudioStream::allocate();
    98e4:	f7fd ff94 	bl	7810 <AudioStream::allocate()>
			if (right == NULL) {
    98e8:	4605      	mov	r5, r0
    98ea:	2800      	cmp	r0, #0
    98ec:	d046      	beq.n	997c <usb_audio_receive_callback+0xf4>
			AudioInputUSB::incoming_right = right;
    98ee:	4b34      	ldr	r3, [pc, #208]	; (99c0 <usb_audio_receive_callback+0x138>)
			AudioInputUSB::incoming_left = left;
    98f0:	f8ca 4000 	str.w	r4, [sl]
			AudioInputUSB::incoming_right = right;
    98f4:	6018      	str	r0, [r3, #0]
	while (len > 0) {
    98f6:	2e00      	cmp	r6, #0
    98f8:	d033      	beq.n	9962 <usb_audio_receive_callback+0xda>
		if (len < avail) {
    98fa:	2e7f      	cmp	r6, #127	; 0x7f
			count = 0;
    98fc:	f04f 0900 	mov.w	r9, #0
		avail = AUDIO_BLOCK_SAMPLES - count;
    9900:	f04f 0380 	mov.w	r3, #128	; 0x80
		if (len < avail) {
    9904:	d945      	bls.n	9992 <usb_audio_receive_callback+0x10a>
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    9906:	1d2a      	adds	r2, r5, #4
    9908:	1d21      	adds	r1, r4, #4
    990a:	4658      	mov	r0, fp
    990c:	444e      	add	r6, r9
    990e:	eb02 0249 	add.w	r2, r2, r9, lsl #1
    9912:	eb01 0149 	add.w	r1, r1, r9, lsl #1
			len -= avail;
    9916:	3e80      	subs	r6, #128	; 0x80
			data += avail;
    9918:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    991c:	f7ff feac 	bl	9678 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    9920:	683b      	ldr	r3, [r7, #0]
    9922:	b91b      	cbnz	r3, 992c <usb_audio_receive_callback+0xa4>
    9924:	f8d8 3000 	ldr.w	r3, [r8]
    9928:	2b00      	cmp	r3, #0
    992a:	d0d3      	beq.n	98d4 <usb_audio_receive_callback+0x4c>
				AudioInputUSB::incoming_count = count + avail;
    992c:	2380      	movs	r3, #128	; 0x80
    992e:	4a23      	ldr	r2, [pc, #140]	; (99bc <usb_audio_receive_callback+0x134>)
    9930:	8013      	strh	r3, [r2, #0]
				if (len > 0) {
    9932:	b11e      	cbz	r6, 993c <usb_audio_receive_callback+0xb4>
					usb_audio_overrun_count++;
    9934:	4a24      	ldr	r2, [pc, #144]	; (99c8 <usb_audio_receive_callback+0x140>)
    9936:	6813      	ldr	r3, [r2, #0]
    9938:	3301      	adds	r3, #1
    993a:	6013      	str	r3, [r2, #0]
}
    993c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		left = AudioStream::allocate();
    9940:	f7fd ff66 	bl	7810 <AudioStream::allocate()>
		if (left == NULL) return;
    9944:	4604      	mov	r4, r0
    9946:	2800      	cmp	r0, #0
    9948:	d0f8      	beq.n	993c <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_left = left;
    994a:	f8ca 0000 	str.w	r0, [sl]
	if (right == NULL) {
    994e:	2d00      	cmp	r5, #0
    9950:	d1ad      	bne.n	98ae <usb_audio_receive_callback+0x26>
		right = AudioStream::allocate();
    9952:	f7fd ff5d 	bl	7810 <AudioStream::allocate()>
		if (right == NULL) return;
    9956:	4605      	mov	r5, r0
    9958:	2800      	cmp	r0, #0
    995a:	d0ef      	beq.n	993c <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_right = right;
    995c:	4b18      	ldr	r3, [pc, #96]	; (99c0 <usb_audio_receive_callback+0x138>)
    995e:	6018      	str	r0, [r3, #0]
    9960:	e7a5      	b.n	98ae <usb_audio_receive_callback+0x26>
    9962:	4637      	mov	r7, r6
	AudioInputUSB::incoming_count = count;
    9964:	4b15      	ldr	r3, [pc, #84]	; (99bc <usb_audio_receive_callback+0x134>)
    9966:	801f      	strh	r7, [r3, #0]
}
    9968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioInputUSB::incoming_right = NULL;
    996c:	4b14      	ldr	r3, [pc, #80]	; (99c0 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    996e:	f8ca 0000 	str.w	r0, [sl]
				AudioInputUSB::incoming_right = NULL;
    9972:	6018      	str	r0, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    9974:	4b11      	ldr	r3, [pc, #68]	; (99bc <usb_audio_receive_callback+0x134>)
    9976:	8018      	strh	r0, [r3, #0]
}
    9978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioStream::release(left);
    997c:	4620      	mov	r0, r4
    997e:	f7fd ff9d 	bl	78bc <AudioStream::release(audio_block_struct*)>
				AudioInputUSB::incoming_right = NULL;
    9982:	4b0f      	ldr	r3, [pc, #60]	; (99c0 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    9984:	f8ca 5000 	str.w	r5, [sl]
				AudioInputUSB::incoming_right = NULL;
    9988:	601d      	str	r5, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    998a:	4b0c      	ldr	r3, [pc, #48]	; (99bc <usb_audio_receive_callback+0x134>)
    998c:	801d      	strh	r5, [r3, #0]
}
    998e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9992:	464f      	mov	r7, r9
    9994:	464b      	mov	r3, r9
			copy_to_buffers(data, left->data + count, right->data + count, len);
    9996:	1d2a      	adds	r2, r5, #4
    9998:	1d21      	adds	r1, r4, #4
    999a:	4658      	mov	r0, fp
			AudioInputUSB::incoming_count = count + len;
    999c:	4437      	add	r7, r6
			copy_to_buffers(data, left->data + count, right->data + count, len);
    999e:	441a      	add	r2, r3
    99a0:	4419      	add	r1, r3
    99a2:	4633      	mov	r3, r6
    99a4:	f7ff fe68 	bl	9678 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			AudioInputUSB::incoming_count = count + len;
    99a8:	4b04      	ldr	r3, [pc, #16]	; (99bc <usb_audio_receive_callback+0x134>)
    99aa:	801f      	strh	r7, [r3, #0]
}
    99ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_to_buffers(data, left->data + count, right->data + count, len);
    99b0:	007b      	lsls	r3, r7, #1
    99b2:	f8df b01c 	ldr.w	fp, [pc, #28]	; 99d0 <usb_audio_receive_callback+0x148>
    99b6:	e7ee      	b.n	9996 <usb_audio_receive_callback+0x10e>
    99b8:	200225fb 	.word	0x200225fb
    99bc:	200225de 	.word	0x200225de
    99c0:	20020134 	.word	0x20020134
    99c4:	20020128 	.word	0x20020128
    99c8:	200225b8 	.word	0x200225b8
    99cc:	20020130 	.word	0x20020130
    99d0:	20200840 	.word	0x20200840
    99d4:	2002012c 	.word	0x2002012c

000099d8 <rx_event(transfer_struct*)>:
{
    99d8:	b508      	push	{r3, lr}
	if (t) {
    99da:	b138      	cbz	r0, 99ec <rx_event(transfer_struct*)+0x14>
		int len = AUDIO_RX_SIZE - ((rx_transfer.status >> 16) & 0x7FFF);
    99dc:	4b11      	ldr	r3, [pc, #68]	; (9a24 <rx_event(transfer_struct*)+0x4c>)
    99de:	6858      	ldr	r0, [r3, #4]
    99e0:	f3c0 400e 	ubfx	r0, r0, #16, #15
		usb_audio_receive_callback(len);
    99e4:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
    99e8:	f7ff ff4e 	bl	9888 <usb_audio_receive_callback>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    99ec:	2300      	movs	r3, #0
    99ee:	22b4      	movs	r2, #180	; 0xb4
    99f0:	490d      	ldr	r1, [pc, #52]	; (9a28 <rx_event(transfer_struct*)+0x50>)
    99f2:	480c      	ldr	r0, [pc, #48]	; (9a24 <rx_event(transfer_struct*)+0x4c>)
    99f4:	f7ff fe04 	bl	9600 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    99f8:	4b0b      	ldr	r3, [pc, #44]	; (9a28 <rx_event(transfer_struct*)+0x50>)
	uint32_t end_addr = (uint32_t)addr + size;
    99fa:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    99fe:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9a02:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9a06:	f8c2 3f5c 	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    9a0a:	3320      	adds	r3, #32
	} while (location < end_addr);
    9a0c:	4299      	cmp	r1, r3
    9a0e:	d8fa      	bhi.n	9a06 <rx_event(transfer_struct*)+0x2e>
	asm("dsb");
    9a10:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9a14:	f3bf 8f6f 	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    9a18:	4902      	ldr	r1, [pc, #8]	; (9a24 <rx_event(transfer_struct*)+0x4c>)
    9a1a:	2005      	movs	r0, #5
}
    9a1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    9a20:	f7ff be1a 	b.w	9658 <usb_receive>
    9a24:	2000a320 	.word	0x2000a320
    9a28:	20200840 	.word	0x20200840

00009a2c <AudioOutputUSB::begin()>:
	update_responsibility = false;
    9a2c:	2300      	movs	r3, #0
    9a2e:	4803      	ldr	r0, [pc, #12]	; (9a3c <AudioOutputUSB::begin()+0x10>)
	left_1st = NULL;
    9a30:	4903      	ldr	r1, [pc, #12]	; (9a40 <AudioOutputUSB::begin()+0x14>)
	right_1st = NULL;
    9a32:	4a04      	ldr	r2, [pc, #16]	; (9a44 <AudioOutputUSB::begin()+0x18>)
	update_responsibility = false;
    9a34:	7003      	strb	r3, [r0, #0]
	left_1st = NULL;
    9a36:	600b      	str	r3, [r1, #0]
	right_1st = NULL;
    9a38:	6013      	str	r3, [r2, #0]
}
    9a3a:	4770      	bx	lr
    9a3c:	200225fc 	.word	0x200225fc
    9a40:	20020138 	.word	0x20020138
    9a44:	20020140 	.word	0x20020140

00009a48 <usb_audio_transmit_callback>:
{
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9a48:	4a39      	ldr	r2, [pc, #228]	; (9b30 <usb_audio_transmit_callback+0xe8>)
{
    9a4a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9a4e:	6813      	ldr	r3, [r2, #0]
    9a50:	3301      	adds	r3, #1
    9a52:	2b09      	cmp	r3, #9
{
    9a54:	ed2d 8b02 	vpush	{d8}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9a58:	d955      	bls.n	9b06 <usb_audio_transmit_callback+0xbe>
		target = 44;
	} else {
		count = 0;
    9a5a:	21b4      	movs	r1, #180	; 0xb4
    9a5c:	2300      	movs	r3, #0
		target = 45;
    9a5e:	f04f 092d 	mov.w	r9, #45	; 0x2d
		count = 0;
    9a62:	ee08 1a10 	vmov	s16, r1
    9a66:	6013      	str	r3, [r2, #0]
{
    9a68:	2700      	movs	r7, #0
    9a6a:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 9b44 <usb_audio_transmit_callback+0xfc>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
		offset = AudioOutputUSB::offset_1st;
    9a6e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 9b48 <usb_audio_transmit_callback+0x100>
		left = AudioOutputUSB::left_1st;
    9a72:	f8db 0000 	ldr.w	r0, [fp]
		num = target - len;
    9a76:	eba9 0207 	sub.w	r2, r9, r7
		if (left == NULL) {
    9a7a:	2800      	cmp	r0, #0
    9a7c:	d04a      	beq.n	9b14 <usb_audio_transmit_callback+0xcc>
		offset = AudioOutputUSB::offset_1st;
    9a7e:	f8ba c000 	ldrh.w	ip, [sl]

		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
			left->data + offset, right->data + offset, num);
    9a82:	1d05      	adds	r5, r0, #4
		right = AudioOutputUSB::right_1st;
    9a84:	4b2b      	ldr	r3, [pc, #172]	; (9b34 <usb_audio_transmit_callback+0xec>)
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    9a86:	eb05 054c 	add.w	r5, r5, ip, lsl #1
		right = AudioOutputUSB::right_1st;
    9a8a:	f8d3 8000 	ldr.w	r8, [r3]
		avail = AUDIO_BLOCK_SAMPLES - offset;
    9a8e:	f1cc 0380 	rsb	r3, ip, #128	; 0x80
    9a92:	429a      	cmp	r2, r3
			left->data + offset, right->data + offset, num);
    9a94:	f108 0404 	add.w	r4, r8, #4
    9a98:	bf28      	it	cs
    9a9a:	461a      	movcs	r2, r3
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    9a9c:	4b26      	ldr	r3, [pc, #152]	; (9b38 <usb_audio_transmit_callback+0xf0>)
    9a9e:	eb04 044c 	add.w	r4, r4, ip, lsl #1
    9aa2:	eb03 0687 	add.w	r6, r3, r7, lsl #2
	while (len > 0) {
    9aa6:	b15a      	cbz	r2, 9ac0 <usb_audio_transmit_callback+0x78>
    9aa8:	4611      	mov	r1, r2
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    9aaa:	f935 3b02 	ldrsh.w	r3, [r5], #2
	while (len > 0) {
    9aae:	3901      	subs	r1, #1
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    9ab0:	f934 eb02 	ldrsh.w	lr, [r4], #2
    9ab4:	b29b      	uxth	r3, r3
    9ab6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    9aba:	f846 3b04 	str.w	r3, [r6], #4
	while (len > 0) {
    9abe:	d1f4      	bne.n	9aaa <usb_audio_transmit_callback+0x62>
		len += num;
		offset += num;
    9ac0:	4494      	add	ip, r2
		len += num;
    9ac2:	4417      	add	r7, r2
		if (offset >= AUDIO_BLOCK_SAMPLES) {
    9ac4:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    9ac8:	d80b      	bhi.n	9ae2 <usb_audio_transmit_callback+0x9a>
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
			AudioOutputUSB::right_2nd = NULL;
			AudioOutputUSB::offset_1st = 0;
		} else {
			AudioOutputUSB::offset_1st = offset;
    9aca:	fa1f fc8c 	uxth.w	ip, ip
	while (len < target) {
    9ace:	454f      	cmp	r7, r9
			AudioOutputUSB::offset_1st = offset;
    9ad0:	f8aa c000 	strh.w	ip, [sl]
	while (len < target) {
    9ad4:	d3cd      	bcc.n	9a72 <usb_audio_transmit_callback+0x2a>
		}
	}
	return target * 4;
}
    9ad6:	ee18 0a10 	vmov	r0, s16
    9ada:	ecbd 8b02 	vpop	{d8}
    9ade:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			AudioStream::release(left);
    9ae2:	f7fd feeb 	bl	78bc <AudioStream::release(audio_block_struct*)>
			AudioStream::release(right);
    9ae6:	4640      	mov	r0, r8
    9ae8:	f7fd fee8 	bl	78bc <AudioStream::release(audio_block_struct*)>
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9aec:	4813      	ldr	r0, [pc, #76]	; (9b3c <usb_audio_transmit_callback+0xf4>)
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9aee:	4b14      	ldr	r3, [pc, #80]	; (9b40 <usb_audio_transmit_callback+0xf8>)
			AudioOutputUSB::left_2nd = NULL;
    9af0:	2200      	movs	r2, #0
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9af2:	6801      	ldr	r1, [r0, #0]
    9af4:	4694      	mov	ip, r2
			AudioOutputUSB::left_2nd = NULL;
    9af6:	6002      	str	r2, [r0, #0]
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9af8:	f8cb 1000 	str.w	r1, [fp]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9afc:	6819      	ldr	r1, [r3, #0]
			AudioOutputUSB::right_2nd = NULL;
    9afe:	601a      	str	r2, [r3, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9b00:	4b0c      	ldr	r3, [pc, #48]	; (9b34 <usb_audio_transmit_callback+0xec>)
    9b02:	6019      	str	r1, [r3, #0]
			AudioOutputUSB::offset_1st = 0;
    9b04:	e7e3      	b.n	9ace <usb_audio_transmit_callback+0x86>
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9b06:	21b0      	movs	r1, #176	; 0xb0
		target = 44;
    9b08:	f04f 092c 	mov.w	r9, #44	; 0x2c
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9b0c:	6013      	str	r3, [r2, #0]
    9b0e:	ee08 1a10 	vmov	s16, r1
    9b12:	e7a9      	b.n	9a68 <usb_audio_transmit_callback+0x20>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
    9b14:	4b08      	ldr	r3, [pc, #32]	; (9b38 <usb_audio_transmit_callback+0xf0>)
    9b16:	4601      	mov	r1, r0
    9b18:	0092      	lsls	r2, r2, #2
    9b1a:	eb03 0047 	add.w	r0, r3, r7, lsl #1
    9b1e:	f003 f84d 	bl	cbbc <memset>
}
    9b22:	ee18 0a10 	vmov	r0, s16
    9b26:	ecbd 8b02 	vpop	{d8}
    9b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b2e:	bf00      	nop
    9b30:	200088dc 	.word	0x200088dc
    9b34:	20020140 	.word	0x20020140
    9b38:	2000c640 	.word	0x2000c640
    9b3c:	2002013c 	.word	0x2002013c
    9b40:	20020144 	.word	0x20020144
    9b44:	20020138 	.word	0x20020138
    9b48:	200225e0 	.word	0x200225e0

00009b4c <tx_event(transfer_struct*)>:
{
    9b4c:	b538      	push	{r3, r4, r5, lr}
	int len = usb_audio_transmit_callback();
    9b4e:	f7ff ff7b 	bl	9a48 <usb_audio_transmit_callback>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9b52:	4a11      	ldr	r2, [pc, #68]	; (9b98 <tx_event(transfer_struct*)+0x4c>)
    9b54:	4b11      	ldr	r3, [pc, #68]	; (9b9c <tx_event(transfer_struct*)+0x50>)
	int len = usb_audio_transmit_callback();
    9b56:	4605      	mov	r5, r0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9b58:	6812      	ldr	r2, [r2, #0]
    9b5a:	781b      	ldrb	r3, [r3, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    9b5c:	4c10      	ldr	r4, [pc, #64]	; (9ba0 <tx_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9b5e:	40da      	lsrs	r2, r3
    9b60:	4910      	ldr	r1, [pc, #64]	; (9ba4 <tx_event(transfer_struct*)+0x58>)
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    9b62:	2300      	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9b64:	600a      	str	r2, [r1, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    9b66:	4602      	mov	r2, r0
    9b68:	4621      	mov	r1, r4
    9b6a:	480f      	ldr	r0, [pc, #60]	; (9ba8 <tx_event(transfer_struct*)+0x5c>)
    9b6c:	f7ff fd48 	bl	9600 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    9b70:	1960      	adds	r0, r4, r5
	asm("dsb");
    9b72:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9b76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9b7a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9b7e:	3420      	adds	r4, #32
	} while (location < end_addr);
    9b80:	42a0      	cmp	r0, r4
    9b82:	d8fa      	bhi.n	9b7a <tx_event(transfer_struct*)+0x2e>
	asm("dsb");
    9b84:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9b88:	f3bf 8f6f 	isb	sy
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    9b8c:	4906      	ldr	r1, [pc, #24]	; (9ba8 <tx_event(transfer_struct*)+0x5c>)
    9b8e:	2005      	movs	r0, #5
}
    9b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    9b94:	f7ff bd4c 	b.w	9630 <usb_transmit>
    9b98:	200216f8 	.word	0x200216f8
    9b9c:	2002260f 	.word	0x2002260f
    9ba0:	2000c640 	.word	0x2000c640
    9ba4:	20200820 	.word	0x20200820
    9ba8:	2000a520 	.word	0x2000a520

00009bac <usb_audio_configure>:
{
    9bac:	b538      	push	{r3, r4, r5, lr}
	usb_audio_overrun_count = 0;
    9bae:	492b      	ldr	r1, [pc, #172]	; (9c5c <usb_audio_configure+0xb0>)
	usb_audio_underrun_count = 0;
    9bb0:	2400      	movs	r4, #0
    9bb2:	4b2b      	ldr	r3, [pc, #172]	; (9c60 <usb_audio_configure+0xb4>)
	if (usb_high_speed) {
    9bb4:	4a2b      	ldr	r2, [pc, #172]	; (9c64 <usb_audio_configure+0xb8>)
	usb_audio_underrun_count = 0;
    9bb6:	601c      	str	r4, [r3, #0]
	usb_audio_overrun_count = 0;
    9bb8:	600c      	str	r4, [r1, #0]
	if (usb_high_speed) {
    9bba:	7811      	ldrb	r1, [r2, #0]
	feedback_accumulator = 739875226; // 44.1 * 2^24
    9bbc:	4b2a      	ldr	r3, [pc, #168]	; (9c68 <usb_audio_configure+0xbc>)
	if (usb_high_speed) {
    9bbe:	42a1      	cmp	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    9bc0:	4a2a      	ldr	r2, [pc, #168]	; (9c6c <usb_audio_configure+0xc0>)
		usb_audio_sync_nbytes = 4;
    9bc2:	4d2b      	ldr	r5, [pc, #172]	; (9c70 <usb_audio_configure+0xc4>)
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    9bc4:	4621      	mov	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    9bc6:	601a      	str	r2, [r3, #0]
	if (usb_high_speed) {
    9bc8:	bf0b      	itete	eq
    9bca:	2303      	moveq	r3, #3
    9bcc:	2304      	movne	r3, #4
    9bce:	200a      	moveq	r0, #10
    9bd0:	2008      	movne	r0, #8
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    9bd2:	2220      	movs	r2, #32
		usb_audio_sync_nbytes = 4;
    9bd4:	702b      	strb	r3, [r5, #0]
		usb_audio_sync_rshift = 8;
    9bd6:	4b27      	ldr	r3, [pc, #156]	; (9c74 <usb_audio_configure+0xc8>)
    9bd8:	7018      	strb	r0, [r3, #0]
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    9bda:	4827      	ldr	r0, [pc, #156]	; (9c78 <usb_audio_configure+0xcc>)
    9bdc:	f002 ffee 	bl	cbbc <memset>
	usb_config_rx_iso(AUDIO_RX_ENDPOINT, AUDIO_RX_SIZE, 1, rx_event);
    9be0:	2201      	movs	r2, #1
    9be2:	21b4      	movs	r1, #180	; 0xb4
    9be4:	2005      	movs	r0, #5
    9be6:	4b25      	ldr	r3, [pc, #148]	; (9c7c <usb_audio_configure+0xd0>)
    9be8:	f7ff fca2 	bl	9530 <usb_config_rx_iso>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    9bec:	4623      	mov	r3, r4
    9bee:	22b4      	movs	r2, #180	; 0xb4
    9bf0:	4923      	ldr	r1, [pc, #140]	; (9c80 <usb_audio_configure+0xd4>)
    9bf2:	4821      	ldr	r0, [pc, #132]	; (9c78 <usb_audio_configure+0xcc>)
    9bf4:	f7ff fd04 	bl	9600 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9bf8:	4b21      	ldr	r3, [pc, #132]	; (9c80 <usb_audio_configure+0xd4>)
	uint32_t end_addr = (uint32_t)addr + size;
    9bfa:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    9bfe:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9c02:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9c06:	f8c2 3f5c 	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    9c0a:	3320      	adds	r3, #32
	} while (location < end_addr);
    9c0c:	4299      	cmp	r1, r3
    9c0e:	d8fa      	bhi.n	9c06 <usb_audio_configure+0x5a>
	asm("dsb");
    9c10:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9c14:	f3bf 8f6f 	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    9c18:	4917      	ldr	r1, [pc, #92]	; (9c78 <usb_audio_configure+0xcc>)
    9c1a:	2005      	movs	r0, #5
    9c1c:	f7ff fd1c 	bl	9658 <usb_receive>
	memset(&sync_transfer, 0, sizeof(sync_transfer));
    9c20:	2220      	movs	r2, #32
    9c22:	2100      	movs	r1, #0
    9c24:	4817      	ldr	r0, [pc, #92]	; (9c84 <usb_audio_configure+0xd8>)
    9c26:	f002 ffc9 	bl	cbbc <memset>
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
    9c2a:	4b17      	ldr	r3, [pc, #92]	; (9c88 <usb_audio_configure+0xdc>)
    9c2c:	7829      	ldrb	r1, [r5, #0]
    9c2e:	2201      	movs	r2, #1
    9c30:	2006      	movs	r0, #6
    9c32:	f7ff fcaf 	bl	9594 <usb_config_tx_iso>
	sync_event(NULL);
    9c36:	2000      	movs	r0, #0
    9c38:	f7ff fd6a 	bl	9710 <sync_event(transfer_struct*)>
	memset(&tx_transfer, 0, sizeof(tx_transfer));
    9c3c:	2220      	movs	r2, #32
    9c3e:	2100      	movs	r1, #0
    9c40:	4812      	ldr	r0, [pc, #72]	; (9c8c <usb_audio_configure+0xe0>)
    9c42:	f002 ffbb 	bl	cbbc <memset>
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
    9c46:	2005      	movs	r0, #5
    9c48:	4b11      	ldr	r3, [pc, #68]	; (9c90 <usb_audio_configure+0xe4>)
    9c4a:	2201      	movs	r2, #1
    9c4c:	21b4      	movs	r1, #180	; 0xb4
    9c4e:	f7ff fca1 	bl	9594 <usb_config_tx_iso>
	tx_event(NULL);
    9c52:	2000      	movs	r0, #0
}
    9c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tx_event(NULL);
    9c58:	f7ff bf78 	b.w	9b4c <tx_event(transfer_struct*)>
    9c5c:	200225b8 	.word	0x200225b8
    9c60:	200225bc 	.word	0x200225bc
    9c64:	20022613 	.word	0x20022613
    9c68:	200216f8 	.word	0x200216f8
    9c6c:	2c19999a 	.word	0x2c19999a
    9c70:	2002260e 	.word	0x2002260e
    9c74:	2002260f 	.word	0x2002260f
    9c78:	2000a320 	.word	0x2000a320
    9c7c:	000099d9 	.word	0x000099d9
    9c80:	20200840 	.word	0x20200840
    9c84:	2000a500 	.word	0x2000a500
    9c88:	00009711 	.word	0x00009711
    9c8c:	2000a520 	.word	0x2000a520
    9c90:	00009b4d 	.word	0x00009b4d

00009c94 <usb_audio_get_feature>:
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
    9c94:	7803      	ldrb	r3, [r0, #0]
    9c96:	2ba1      	cmp	r3, #161	; 0xa1
    9c98:	d001      	beq.n	9c9e <usb_audio_get_feature+0xa>
			if (setup.bCS==0x01) { // mute
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
				*datalen = 1;
				return 1;
			}
			else if (setup.bCS==0x02) { // volume
    9c9a:	2000      	movs	r0, #0
				*datalen = 2;
				return 1;
			}
	}
	return 0;
}
    9c9c:	4770      	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    9c9e:	78c3      	ldrb	r3, [r0, #3]
    9ca0:	7840      	ldrb	r0, [r0, #1]
			if (setup.bCS==0x01) { // mute
    9ca2:	2b01      	cmp	r3, #1
    9ca4:	d008      	beq.n	9cb8 <usb_audio_get_feature+0x24>
			else if (setup.bCS==0x02) { // volume
    9ca6:	2b02      	cmp	r3, #2
    9ca8:	d1f7      	bne.n	9c9a <usb_audio_get_feature+0x6>
				if (setup.bRequest==0x81) { // GET_CURR
    9caa:	3881      	subs	r0, #129	; 0x81
    9cac:	2803      	cmp	r0, #3
    9cae:	d8f4      	bhi.n	9c9a <usb_audio_get_feature+0x6>
    9cb0:	e8df f000 	tbb	[pc, r0]
    9cb4:	0b13171b 	.word	0x0b13171b
{
    9cb8:	b410      	push	{r4}
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    9cba:	4c0e      	ldr	r4, [pc, #56]	; (9cf4 <usb_audio_get_feature+0x60>)
				return 1;
    9cbc:	4618      	mov	r0, r3
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    9cbe:	6864      	ldr	r4, [r4, #4]
    9cc0:	700c      	strb	r4, [r1, #0]
}
    9cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
				*datalen = 1;
    9cc6:	6013      	str	r3, [r2, #0]
}
    9cc8:	4770      	bx	lr
					data[0] = 1; // increment vol by by 1
    9cca:	2301      	movs	r3, #1
    9ccc:	2000      	movs	r0, #0
    9cce:	700b      	strb	r3, [r1, #0]
				*datalen = 2;
    9cd0:	2302      	movs	r3, #2
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    9cd2:	7048      	strb	r0, [r1, #1]
				return 1;
    9cd4:	2001      	movs	r0, #1
				*datalen = 2;
    9cd6:	6013      	str	r3, [r2, #0]
				return 1;
    9cd8:	4770      	bx	lr
					data[0] = FEATURE_MAX_VOLUME;  // max level, for range of 0 to MAX
    9cda:	23ff      	movs	r3, #255	; 0xff
    9cdc:	2000      	movs	r0, #0
    9cde:	700b      	strb	r3, [r1, #0]
					data[1] = 0;
    9ce0:	e7f6      	b.n	9cd0 <usb_audio_get_feature+0x3c>
					data[0] = 0;     // min level is 0
    9ce2:	2300      	movs	r3, #0
    9ce4:	4618      	mov	r0, r3
    9ce6:	700b      	strb	r3, [r1, #0]
					data[1] = 0;
    9ce8:	e7f2      	b.n	9cd0 <usb_audio_get_feature+0x3c>
					data[0] = AudioInputUSB::features.volume & 0xFF;
    9cea:	4b02      	ldr	r3, [pc, #8]	; (9cf4 <usb_audio_get_feature+0x60>)
    9cec:	6898      	ldr	r0, [r3, #8]
    9cee:	7008      	strb	r0, [r1, #0]
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    9cf0:	7a58      	ldrb	r0, [r3, #9]
    9cf2:	e7ed      	b.n	9cd0 <usb_audio_get_feature+0x3c>
    9cf4:	200088cc 	.word	0x200088cc

00009cf8 <usb_audio_set_feature>:

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
    9cf8:	7803      	ldrb	r3, [r0, #0]
    9cfa:	2b21      	cmp	r3, #33	; 0x21
    9cfc:	d001      	beq.n	9d02 <usb_audio_set_feature+0xa>
					AudioInputUSB::features.change = 1;
					return 1;
				}
			}
	}
	return 0;
    9cfe:	2000      	movs	r0, #0
}
    9d00:	4770      	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    9d02:	78c3      	ldrb	r3, [r0, #3]
    9d04:	7842      	ldrb	r2, [r0, #1]
			if (setup.bCS==0x01) { // mute
    9d06:	2b01      	cmp	r3, #1
    9d08:	d009      	beq.n	9d1e <usb_audio_set_feature+0x26>
				if (setup.bRequest==0x01) { // SET_CUR
    9d0a:	2b02      	cmp	r3, #2
    9d0c:	d1f7      	bne.n	9cfe <usb_audio_set_feature+0x6>
    9d0e:	2a01      	cmp	r2, #1
    9d10:	d1f5      	bne.n	9cfe <usb_audio_set_feature+0x6>
					AudioInputUSB::features.volume = buf[0];
    9d12:	4b07      	ldr	r3, [pc, #28]	; (9d30 <usb_audio_set_feature+0x38>)
					return 1;
    9d14:	4610      	mov	r0, r2
					AudioInputUSB::features.volume = buf[0];
    9d16:	7809      	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    9d18:	601a      	str	r2, [r3, #0]
					AudioInputUSB::features.volume = buf[0];
    9d1a:	6099      	str	r1, [r3, #8]
					return 1;
    9d1c:	4770      	bx	lr
				if (setup.bRequest==0x01) { // SET_CUR
    9d1e:	2a01      	cmp	r2, #1
    9d20:	d1ed      	bne.n	9cfe <usb_audio_set_feature+0x6>
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    9d22:	4b03      	ldr	r3, [pc, #12]	; (9d30 <usb_audio_set_feature+0x38>)
					return 1;
    9d24:	4610      	mov	r0, r2
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    9d26:	7809      	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    9d28:	e9c3 2100 	strd	r2, r1, [r3]
					return 1;
    9d2c:	4770      	bx	lr
    9d2e:	bf00      	nop
    9d30:	200088cc 	.word	0x200088cc

00009d34 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9d34:	4a12      	ldr	r2, [pc, #72]	; (9d80 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9d36:	4b13      	ldr	r3, [pc, #76]	; (9d84 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9d38:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    9d3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    9d40:	4298      	cmp	r0, r3
{
    9d42:	b510      	push	{r4, lr}
    9d44:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    9d46:	d202      	bcs.n	9d4e <usb_init_serialnumber+0x1a>
    9d48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9d4c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    9d4e:	4c0e      	ldr	r4, [pc, #56]	; (9d88 <usb_init_serialnumber+0x54>)
    9d50:	a901      	add	r1, sp, #4
    9d52:	220a      	movs	r2, #10
    9d54:	f7fe fd5c 	bl	8810 <ultoa>
	for (i=0; i<10; i++) {
    9d58:	a901      	add	r1, sp, #4
    9d5a:	2300      	movs	r3, #0
    9d5c:	4620      	mov	r0, r4
		char c = buf[i];
    9d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    9d62:	3301      	adds	r3, #1
		if (!c) break;
    9d64:	b13a      	cbz	r2, 9d76 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    9d66:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    9d68:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    9d6c:	d1f7      	bne.n	9d5e <usb_init_serialnumber+0x2a>
    9d6e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9d70:	7023      	strb	r3, [r4, #0]
}
    9d72:	b004      	add	sp, #16
    9d74:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9d76:	005b      	lsls	r3, r3, #1
    9d78:	b2db      	uxtb	r3, r3
    9d7a:	7023      	strb	r3, [r4, #0]
}
    9d7c:	b004      	add	sp, #16
    9d7e:	bd10      	pop	{r4, pc}
    9d80:	401f4400 	.word	0x401f4400
    9d84:	00989680 	.word	0x00989680
    9d88:	20008ea4 	.word	0x20008ea4

00009d8c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    9d8c:	f000 bbe4 	b.w	a558 <usb_serial_flush_input>

00009d90 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    9d90:	f000 bbd6 	b.w	a540 <usb_serial_available>

00009d94 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9d94:	f000 bc72 	b.w	a67c <usb_serial_flush_output>

00009d98 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9d98:	f000 bc48 	b.w	a62c <usb_serial_write_buffer_free>

00009d9c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9d9c:	4608      	mov	r0, r1
    9d9e:	4611      	mov	r1, r2
    9da0:	f000 bc38 	b.w	a614 <usb_serial_write>

00009da4 <rx_queue_transfer>:




static void rx_queue_transfer(int i)
{
    9da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    9da6:	4c14      	ldr	r4, [pc, #80]	; (9df8 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9da8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9dac:	4e13      	ldr	r6, [pc, #76]	; (9dfc <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9dae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    9db2:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9db6:	4f12      	ldr	r7, [pc, #72]	; (9e00 <rx_queue_transfer+0x5c>)
    9db8:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    9dbc:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9dbe:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9dc2:	4621      	mov	r1, r4
    9dc4:	883a      	ldrh	r2, [r7, #0]
    9dc6:	4630      	mov	r0, r6
    9dc8:	f7ff fc1a 	bl	9600 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9dcc:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    9dce:	4423      	add	r3, r4
	asm("dsb");
    9dd0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9dd4:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    9dd8:	3420      	adds	r4, #32
	} while (location < end_addr);
    9dda:	42a3      	cmp	r3, r4
    9ddc:	d8fa      	bhi.n	9dd4 <rx_queue_transfer+0x30>
	asm("dsb");
    9dde:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9de2:	f3bf 8f6f 	isb	sy
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
    9de6:	2004      	movs	r0, #4
    9de8:	4631      	mov	r1, r6
    9dea:	f7ff fc35 	bl	9658 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    9df2:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    9df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9df8:	20200b20 	.word	0x20200b20
    9dfc:	2000a340 	.word	0x2000a340
    9e00:	200225e8 	.word	0x200225e8

00009e04 <rx_event>:


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9e04:	6842      	ldr	r2, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
    9e06:	f64f 71fc 	movw	r1, #65532	; 0xfffc
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9e0a:	4b11      	ldr	r3, [pc, #68]	; (9e50 <rx_event+0x4c>)
    9e0c:	f3c2 420e 	ubfx	r2, r2, #16, #15
	int i = t->callback_param;
    9e10:	69c0      	ldr	r0, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9e12:	881b      	ldrh	r3, [r3, #0]
    9e14:	1a9b      	subs	r3, r3, r2
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9e16:	400b      	ands	r3, r1
    9e18:	d017      	beq.n	9e4a <rx_event+0x46>
		uint32_t head = rx_head;
		rx_count[i] = len;
    9e1a:	490e      	ldr	r1, [pc, #56]	; (9e54 <rx_event+0x50>)
{
    9e1c:	b430      	push	{r4, r5}
		uint32_t head = rx_head;
    9e1e:	4c0e      	ldr	r4, [pc, #56]	; (9e58 <rx_event+0x54>)
		rx_index[i] = 0;
    9e20:	4d0e      	ldr	r5, [pc, #56]	; (9e5c <rx_event+0x58>)
		uint32_t head = rx_head;
    9e22:	7822      	ldrb	r2, [r4, #0]
		rx_count[i] = len;
    9e24:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
		rx_index[i] = 0;
    9e28:	2100      	movs	r1, #0
		if (++head > RX_NUM) head = 0;
    9e2a:	3201      	adds	r2, #1
		rx_index[i] = 0;
    9e2c:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
    9e30:	2a06      	cmp	r2, #6
		rx_list[head] = i;
		rx_head = head;
    9e32:	bf94      	ite	ls
    9e34:	b2d1      	uxtbls	r1, r2
		if (++head > RX_NUM) head = 0;
    9e36:	460a      	movhi	r2, r1
		rx_head = head;
    9e38:	7021      	strb	r1, [r4, #0]
		rx_available += len;
    9e3a:	4909      	ldr	r1, [pc, #36]	; (9e60 <rx_event+0x5c>)
    9e3c:	680c      	ldr	r4, [r1, #0]
    9e3e:	4423      	add	r3, r4
    9e40:	600b      	str	r3, [r1, #0]
		rx_list[head] = i;
    9e42:	4b08      	ldr	r3, [pc, #32]	; (9e64 <rx_event+0x60>)
    9e44:	5498      	strb	r0, [r3, r2]
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9e46:	bc30      	pop	{r4, r5}
    9e48:	4770      	bx	lr
		rx_queue_transfer(i);
    9e4a:	f7ff bfab 	b.w	9da4 <rx_queue_transfer>
    9e4e:	bf00      	nop
    9e50:	200225e8 	.word	0x200225e8
    9e54:	20022034 	.word	0x20022034
    9e58:	20022602 	.word	0x20022602
    9e5c:	20022050 	.word	0x20022050
    9e60:	2002202c 	.word	0x2002202c
    9e64:	2002206c 	.word	0x2002206c

00009e68 <usb_midi_configure>:
	if (usb_high_speed) {
    9e68:	4b21      	ldr	r3, [pc, #132]	; (9ef0 <usb_midi_configure+0x88>)
{
    9e6a:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    9e6c:	781b      	ldrb	r3, [r3, #0]
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d03b      	beq.n	9eea <usb_midi_configure+0x82>
    9e72:	f44f 7300 	mov.w	r3, #512	; 0x200
    9e76:	461e      	mov	r6, r3
		rx_packet_size = MIDI_RX_SIZE_480;
    9e78:	491e      	ldr	r1, [pc, #120]	; (9ef4 <usb_midi_configure+0x8c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9e7a:	2280      	movs	r2, #128	; 0x80
		tx_packet_size = MIDI_TX_SIZE_480;
    9e7c:	4d1e      	ldr	r5, [pc, #120]	; (9ef8 <usb_midi_configure+0x90>)
	tx_head = 0;
    9e7e:	2400      	movs	r4, #0
		rx_packet_size = MIDI_RX_SIZE_480;
    9e80:	800b      	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9e82:	2100      	movs	r1, #0
    9e84:	481d      	ldr	r0, [pc, #116]	; (9efc <usb_midi_configure+0x94>)
		tx_packet_size = MIDI_TX_SIZE_480;
    9e86:	802b      	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9e88:	f002 fe98 	bl	cbbc <memset>
	tx_head = 0;
    9e8c:	4a1c      	ldr	r2, [pc, #112]	; (9f00 <usb_midi_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9e8e:	4621      	mov	r1, r4
	tx_available = 0;
    9e90:	4b1c      	ldr	r3, [pc, #112]	; (9f04 <usb_midi_configure+0x9c>)
	tx_head = 0;
    9e92:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9e94:	22c0      	movs	r2, #192	; 0xc0
    9e96:	481c      	ldr	r0, [pc, #112]	; (9f08 <usb_midi_configure+0xa0>)
	tx_available = 0;
    9e98:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9e9a:	f002 fe8f 	bl	cbbc <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9e9e:	4a1b      	ldr	r2, [pc, #108]	; (9f0c <usb_midi_configure+0xa4>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9ea0:	4631      	mov	r1, r6
	memset(rx_index, 0, sizeof(rx_index));
    9ea2:	4b1b      	ldr	r3, [pc, #108]	; (9f10 <usb_midi_configure+0xa8>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9ea4:	2004      	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
    9ea6:	6094      	str	r4, [r2, #8]
	memset(rx_index, 0, sizeof(rx_index));
    9ea8:	609c      	str	r4, [r3, #8]
	memset(rx_count, 0, sizeof(rx_count));
    9eaa:	e9c2 4400 	strd	r4, r4, [r2]
	rx_head = 0;
    9eae:	4a19      	ldr	r2, [pc, #100]	; (9f14 <usb_midi_configure+0xac>)
	memset(rx_index, 0, sizeof(rx_index));
    9eb0:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    9eb4:	7014      	strb	r4, [r2, #0]
	rx_tail = 0;
    9eb6:	4b18      	ldr	r3, [pc, #96]	; (9f18 <usb_midi_configure+0xb0>)
	rx_available = 0;
    9eb8:	4a18      	ldr	r2, [pc, #96]	; (9f1c <usb_midi_configure+0xb4>)
	rx_tail = 0;
    9eba:	701c      	strb	r4, [r3, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9ebc:	4b18      	ldr	r3, [pc, #96]	; (9f20 <usb_midi_configure+0xb8>)
	rx_available = 0;
    9ebe:	6014      	str	r4, [r2, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9ec0:	4622      	mov	r2, r4
    9ec2:	f7ff fad1 	bl	9468 <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
    9ec6:	4623      	mov	r3, r4
    9ec8:	4622      	mov	r2, r4
    9eca:	8829      	ldrh	r1, [r5, #0]
    9ecc:	2004      	movs	r0, #4
    9ece:	f7ff fafd 	bl	94cc <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9ed2:	4620      	mov	r0, r4
    9ed4:	3401      	adds	r4, #1
    9ed6:	f7ff ff65 	bl	9da4 <rx_queue_transfer>
    9eda:	2c06      	cmp	r4, #6
    9edc:	d1f9      	bne.n	9ed2 <usb_midi_configure+0x6a>
	transmit_previous_timeout = 0;
    9ede:	2300      	movs	r3, #0
    9ee0:	4910      	ldr	r1, [pc, #64]	; (9f24 <usb_midi_configure+0xbc>)
	tx_noautoflush = 0;
    9ee2:	4a11      	ldr	r2, [pc, #68]	; (9f28 <usb_midi_configure+0xc0>)
	transmit_previous_timeout = 0;
    9ee4:	700b      	strb	r3, [r1, #0]
	tx_noautoflush = 0;
    9ee6:	7013      	strb	r3, [r2, #0]
}
    9ee8:	bd70      	pop	{r4, r5, r6, pc}
    9eea:	2340      	movs	r3, #64	; 0x40
    9eec:	461e      	mov	r6, r3
    9eee:	e7c3      	b.n	9e78 <usb_midi_configure+0x10>
    9ef0:	20022613 	.word	0x20022613
    9ef4:	200225e8 	.word	0x200225e8
    9ef8:	200225f0 	.word	0x200225f0
    9efc:	2000a540 	.word	0x2000a540
    9f00:	20022609 	.word	0x20022609
    9f04:	200225ec 	.word	0x200225ec
    9f08:	2000a340 	.word	0x2000a340
    9f0c:	20022034 	.word	0x20022034
    9f10:	20022050 	.word	0x20022050
    9f14:	20022602 	.word	0x20022602
    9f18:	20022604 	.word	0x20022604
    9f1c:	2002202c 	.word	0x2002202c
    9f20:	00009e05 	.word	0x00009e05
    9f24:	20022607 	.word	0x20022607
    9f28:	2002260b 	.word	0x2002260b

00009f2c <usb_midi_flush_output>:
{
    9f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx_noautoflush == 0 && tx_available > 0) {
    9f30:	4b21      	ldr	r3, [pc, #132]	; (9fb8 <usb_midi_flush_output+0x8c>)
    9f32:	781d      	ldrb	r5, [r3, #0]
    9f34:	b915      	cbnz	r5, 9f3c <usb_midi_flush_output+0x10>
    9f36:	4e21      	ldr	r6, [pc, #132]	; (9fbc <usb_midi_flush_output+0x90>)
    9f38:	8833      	ldrh	r3, [r6, #0]
    9f3a:	b90b      	cbnz	r3, 9f40 <usb_midi_flush_output+0x14>
}
    9f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint32_t head = tx_head;
    9f40:	f8df 8088 	ldr.w	r8, [pc, #136]	; 9fcc <usb_midi_flush_output+0xa0>
		transfer_t *xfer = tx_transfer + head;
    9f44:	4a1e      	ldr	r2, [pc, #120]	; (9fc0 <usb_midi_flush_output+0x94>)
		uint32_t head = tx_head;
    9f46:	f898 7000 	ldrb.w	r7, [r8]
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    9f4a:	4c1e      	ldr	r4, [pc, #120]	; (9fc4 <usb_midi_flush_output+0x98>)
		transfer_t *xfer = tx_transfer + head;
    9f4c:	eb02 1947 	add.w	r9, r2, r7, lsl #5
		uint32_t len = tx_packet_size - tx_available;
    9f50:	4a1d      	ldr	r2, [pc, #116]	; (9fc8 <usb_midi_flush_output+0x9c>)
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    9f52:	eb04 2447 	add.w	r4, r4, r7, lsl #9
		uint32_t len = tx_packet_size - tx_available;
    9f56:	8812      	ldrh	r2, [r2, #0]
		usb_prepare_transfer(xfer, txbuf, len, 0);
    9f58:	4648      	mov	r0, r9
    9f5a:	4621      	mov	r1, r4
    9f5c:	1ad2      	subs	r2, r2, r3
    9f5e:	462b      	mov	r3, r5
    9f60:	f7ff fb4e 	bl	9600 <usb_prepare_transfer>
	asm("dsb");
    9f64:	f3bf 8f4f 	dsb	sy
    9f68:	f104 0220 	add.w	r2, r4, #32
	uint32_t end_addr = (uint32_t)addr + size;
    9f6c:	f504 7300 	add.w	r3, r4, #512	; 0x200
    9f70:	4293      	cmp	r3, r2
    9f72:	bf34      	ite	cc
    9f74:	2301      	movcc	r3, #1
    9f76:	2310      	movcs	r3, #16
		SCB_CACHE_DCCIMVAC = location;
    9f78:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9f7c:	eb04 1343 	add.w	r3, r4, r3, lsl #5
    9f80:	f8c2 4f70 	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    9f84:	3420      	adds	r4, #32
	} while (location < end_addr);
    9f86:	429c      	cmp	r4, r3
    9f88:	d1fa      	bne.n	9f80 <usb_midi_flush_output+0x54>
	asm("dsb");
    9f8a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9f8e:	f3bf 8f6f 	isb	sy
		if (++head >= TX_NUM) head = 0;
    9f92:	3701      	adds	r7, #1
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
    9f94:	4649      	mov	r1, r9
    9f96:	2004      	movs	r0, #4
    9f98:	f7ff fb4a 	bl	9630 <usb_transmit>
		if (++head >= TX_NUM) head = 0;
    9f9c:	2f03      	cmp	r7, #3
		tx_available = 0;
    9f9e:	f04f 0300 	mov.w	r3, #0
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    9fa2:	f04f 0002 	mov.w	r0, #2
		tx_head = head;
    9fa6:	bf98      	it	ls
    9fa8:	b2fd      	uxtbls	r5, r7
		tx_available = 0;
    9faa:	8033      	strh	r3, [r6, #0]
		tx_head = head;
    9fac:	f888 5000 	strb.w	r5, [r8]
}
    9fb0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    9fb4:	f7fe bea2 	b.w	8cfc <usb_stop_sof_interrupts>
    9fb8:	2002260b 	.word	0x2002260b
    9fbc:	200225ec 	.word	0x200225ec
    9fc0:	2000a540 	.word	0x2000a540
    9fc4:	20201720 	.word	0x20201720
    9fc8:	200225f0 	.word	0x200225f0
    9fcc:	20022609 	.word	0x20022609

00009fd0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9fd2:	4c14      	ldr	r4, [pc, #80]	; (a024 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9fd4:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9fd8:	4e13      	ldr	r6, [pc, #76]	; (a028 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9fde:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9fe2:	4f12      	ldr	r7, [pc, #72]	; (a02c <rx_queue_transfer+0x5c>)
    9fe4:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    9fe8:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9fea:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9fee:	4621      	mov	r1, r4
    9ff0:	883a      	ldrh	r2, [r7, #0]
    9ff2:	4630      	mov	r0, r6
    9ff4:	f7ff fb04 	bl	9600 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9ff8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    9ffa:	4423      	add	r3, r4
	asm("dsb");
    9ffc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    a000:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    a004:	3420      	adds	r4, #32
	} while (location < end_addr);
    a006:	42a3      	cmp	r3, r4
    a008:	d8fa      	bhi.n	a000 <rx_queue_transfer+0x30>
	asm("dsb");
    a00a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a00e:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a012:	2003      	movs	r0, #3
    a014:	4631      	mov	r1, r6
    a016:	f7ff fb1f 	bl	9658 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a01a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    a01e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    a022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a024:	20009320 	.word	0x20009320
    a028:	2000a400 	.word	0x2000a400
    a02c:	200225ea 	.word	0x200225ea

0000a030 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a030:	4b24      	ldr	r3, [pc, #144]	; (a0c4 <rx_event+0x94>)
{
    a032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a036:	881c      	ldrh	r4, [r3, #0]
    a038:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    a03a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a03c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    a040:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a042:	2c00      	cmp	r4, #0
    a044:	dd24      	ble.n	a090 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    a046:	4920      	ldr	r1, [pc, #128]	; (a0c8 <rx_event+0x98>)
		if (head != rx_tail) {
    a048:	4820      	ldr	r0, [pc, #128]	; (a0cc <rx_event+0x9c>)
		uint32_t head = rx_head;
    a04a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    a04c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a04e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    a050:	4e1f      	ldr	r6, [pc, #124]	; (a0d0 <rx_event+0xa0>)
		if (head != rx_tail) {
    a052:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    a054:	481f      	ldr	r0, [pc, #124]	; (a0d4 <rx_event+0xa4>)
		if (head != rx_tail) {
    a056:	d007      	beq.n	a068 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    a058:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    a05c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a060:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    a064:	4294      	cmp	r4, r2
    a066:	d918      	bls.n	a09a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    a068:	3301      	adds	r3, #1
		rx_index[i] = 0;
    a06a:	2200      	movs	r2, #0
		rx_count[i] = len;
    a06c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a070:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    a072:	4e19      	ldr	r6, [pc, #100]	; (a0d8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    a074:	bf88      	it	hi
    a076:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    a078:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    a07c:	bf98      	it	ls
    a07e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    a080:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    a082:	4b16      	ldr	r3, [pc, #88]	; (a0dc <rx_event+0xac>)
		rx_head = head;
    a084:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    a086:	681a      	ldr	r2, [r3, #0]
    a088:	4414      	add	r4, r2
    a08a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    a08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    a090:	4628      	mov	r0, r5
}
    a092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    a096:	f7ff bf9b 	b.w	9fd0 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a09a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    a09e:	4910      	ldr	r1, [pc, #64]	; (a0e0 <rx_event+0xb0>)
    a0a0:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    a0a2:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a0a4:	4408      	add	r0, r1
    a0a6:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    a0aa:	f7fe fb13 	bl	86d4 <memcpy>
				rx_available += len;
    a0ae:	4a0b      	ldr	r2, [pc, #44]	; (a0dc <rx_event+0xac>)
				rx_queue_transfer(i);
    a0b0:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    a0b2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    a0b6:	6813      	ldr	r3, [r2, #0]
    a0b8:	4423      	add	r3, r4
}
    a0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    a0be:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    a0c0:	f7ff bf86 	b.w	9fd0 <rx_queue_transfer>
    a0c4:	200225ea 	.word	0x200225ea
    a0c8:	20022603 	.word	0x20022603
    a0cc:	20022605 	.word	0x20022605
    a0d0:	20022040 	.word	0x20022040
    a0d4:	20022074 	.word	0x20022074
    a0d8:	2002205c 	.word	0x2002205c
    a0dc:	20022030 	.word	0x20022030
    a0e0:	20009320 	.word	0x20009320

0000a0e4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a0e4:	4b1d      	ldr	r3, [pc, #116]	; (a15c <usb_serial_flush_callback+0x78>)
    a0e6:	781a      	ldrb	r2, [r3, #0]
    a0e8:	2a00      	cmp	r2, #0
    a0ea:	d136      	bne.n	a15a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    a0ec:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    a0f0:	4a1b      	ldr	r2, [pc, #108]	; (a160 <usb_serial_flush_callback+0x7c>)
    a0f2:	7812      	ldrb	r2, [r2, #0]
    a0f4:	b38a      	cbz	r2, a15a <usb_serial_flush_callback+0x76>
{
    a0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    a0fa:	4d1a      	ldr	r5, [pc, #104]	; (a164 <usb_serial_flush_callback+0x80>)
    a0fc:	882a      	ldrh	r2, [r5, #0]
    a0fe:	b352      	cbz	r2, a156 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a100:	4e19      	ldr	r6, [pc, #100]	; (a168 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a102:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a106:	4f19      	ldr	r7, [pc, #100]	; (a16c <usb_serial_flush_callback+0x88>)
    a108:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a10a:	4c19      	ldr	r4, [pc, #100]	; (a170 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a10c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a110:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a114:	4642      	mov	r2, r8
    a116:	4638      	mov	r0, r7
    a118:	4621      	mov	r1, r4
    a11a:	f7ff fa71 	bl	9600 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a11e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    a122:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a126:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a12a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a12e:	3420      	adds	r4, #32
	} while (location < end_addr);
    a130:	42a2      	cmp	r2, r4
    a132:	d8fa      	bhi.n	a12a <usb_serial_flush_callback+0x46>
	asm("dsb");
    a134:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a138:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a13c:	2003      	movs	r0, #3
    a13e:	4639      	mov	r1, r7
    a140:	f7ff fa76 	bl	9630 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a144:	7833      	ldrb	r3, [r6, #0]
    a146:	3301      	adds	r3, #1
    a148:	b2db      	uxtb	r3, r3
    a14a:	2b03      	cmp	r3, #3
    a14c:	bf88      	it	hi
    a14e:	2300      	movhi	r3, #0
    a150:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    a152:	2300      	movs	r3, #0
    a154:	802b      	strh	r3, [r5, #0]
}
    a156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a15a:	4770      	bx	lr
    a15c:	2002260c 	.word	0x2002260c
    a160:	20022612 	.word	0x20022612
    a164:	200225ee 	.word	0x200225ee
    a168:	2002260a 	.word	0x2002260a
    a16c:	2000a5c0 	.word	0x2000a5c0
    a170:	2000a640 	.word	0x2000a640

0000a174 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    a174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a178:	b085      	sub	sp, #20
	while (size > 0) {
    a17a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    a17e:	2900      	cmp	r1, #0
    a180:	f000 80bf 	beq.w	a302 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    a184:	2300      	movs	r3, #0
    a186:	4c60      	ldr	r4, [pc, #384]	; (a308 <usb_serial_write.part.0+0x194>)
    a188:	f8df 8198 	ldr.w	r8, [pc, #408]	; a324 <usb_serial_write.part.0+0x1b0>
    a18c:	f8df a198 	ldr.w	sl, [pc, #408]	; a328 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    a190:	4f5e      	ldr	r7, [pc, #376]	; (a30c <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    a192:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    a194:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a196:	4a5e      	ldr	r2, [pc, #376]	; (a310 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    a198:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    a19a:	4b5e      	ldr	r3, [pc, #376]	; (a314 <usb_serial_write.part.0+0x1a0>)
    a19c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    a19e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    a1a2:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    a1a6:	2b00      	cmp	r3, #0
    a1a8:	f040 80a7 	bne.w	a2fa <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    a1ac:	461e      	mov	r6, r3
		int waiting=0;
    a1ae:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    a1b0:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    a1b2:	4648      	mov	r0, r9
    a1b4:	f7ff fa5e 	bl	9674 <usb_transfer_status>
			if (!(status & 0x80)) {
    a1b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    a1bc:	f000 808c 	beq.w	a2d8 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    a1c0:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    a1c4:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    a1c8:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    a1cc:	b905      	cbnz	r5, a1d0 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    a1ce:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    a1d0:	2b00      	cmp	r3, #0
    a1d2:	d17d      	bne.n	a2d0 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a1d4:	683b      	ldr	r3, [r7, #0]
    a1d6:	1b9b      	subs	r3, r3, r6
    a1d8:	2b78      	cmp	r3, #120	; 0x78
    a1da:	f200 8087 	bhi.w	a2ec <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    a1de:	4b4e      	ldr	r3, [pc, #312]	; (a318 <usb_serial_write.part.0+0x1a4>)
    a1e0:	781b      	ldrb	r3, [r3, #0]
    a1e2:	2b00      	cmp	r3, #0
    a1e4:	d074      	beq.n	a2d0 <usb_serial_write.part.0+0x15c>
			yield();
    a1e6:	f000 fa93 	bl	a710 <yield>
			tx_noautoflush = 1;
    a1ea:	2201      	movs	r2, #1
		while (!tx_available) {
    a1ec:	f8b8 3000 	ldrh.w	r3, [r8]
    a1f0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    a1f2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    a1f4:	2b00      	cmp	r3, #0
    a1f6:	d0dc      	beq.n	a1b2 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a1f8:	4a46      	ldr	r2, [pc, #280]	; (a314 <usb_serial_write.part.0+0x1a0>)
    a1fa:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    a1fe:	7811      	ldrb	r1, [r2, #0]
    a200:	461a      	mov	r2, r3
    a202:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    a206:	4d45      	ldr	r5, [pc, #276]	; (a31c <usb_serial_write.part.0+0x1a8>)
    a208:	02c9      	lsls	r1, r1, #11
    a20a:	4428      	add	r0, r5
		if (size >= tx_available) {
    a20c:	9d01      	ldr	r5, [sp, #4]
    a20e:	4295      	cmp	r5, r2
    a210:	d217      	bcs.n	a242 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    a212:	9303      	str	r3, [sp, #12]
    a214:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    a218:	462a      	mov	r2, r5
    a21a:	f7fe fa5b 	bl	86d4 <memcpy>
			tx_available -= size;
    a21e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a220:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    a224:	1b5b      	subs	r3, r3, r5
    a226:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a22a:	4b3d      	ldr	r3, [pc, #244]	; (a320 <usb_serial_write.part.0+0x1ac>)
    a22c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    a230:	f3bf 8f4f 	dsb	sy
			sent += size;
    a234:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    a236:	2300      	movs	r3, #0
			sent += size;
    a238:	4428      	add	r0, r5
		tx_noautoflush = 0;
    a23a:	7023      	strb	r3, [r4, #0]
}
    a23c:	b005      	add	sp, #20
    a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a242:	4b36      	ldr	r3, [pc, #216]	; (a31c <usb_serial_write.part.0+0x1a8>)
    a244:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    a246:	9902      	ldr	r1, [sp, #8]
    a248:	f7fe fa44 	bl	86d4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a24c:	2300      	movs	r3, #0
    a24e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a252:	4629      	mov	r1, r5
    a254:	4648      	mov	r0, r9
    a256:	f7ff f9d3 	bl	9600 <usb_prepare_transfer>
	asm("dsb");
    a25a:	f3bf 8f4f 	dsb	sy
    a25e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    a262:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    a266:	4293      	cmp	r3, r2
    a268:	bf34      	ite	cc
    a26a:	2301      	movcc	r3, #1
    a26c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a26e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a272:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    a276:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    a27a:	3520      	adds	r5, #32
	} while (location < end_addr);
    a27c:	42ab      	cmp	r3, r5
    a27e:	d1fa      	bne.n	a276 <usb_serial_write.part.0+0x102>
	asm("dsb");
    a280:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a284:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a288:	2003      	movs	r0, #3
    a28a:	4649      	mov	r1, r9
    a28c:	f7ff f9d0 	bl	9630 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a290:	4a20      	ldr	r2, [pc, #128]	; (a314 <usb_serial_write.part.0+0x1a0>)
    a292:	7813      	ldrb	r3, [r2, #0]
    a294:	3301      	adds	r3, #1
    a296:	b2db      	uxtb	r3, r3
    a298:	2b03      	cmp	r3, #3
    a29a:	bf84      	itt	hi
    a29c:	2300      	movhi	r3, #0
    a29e:	4a1d      	ldrhi	r2, [pc, #116]	; (a314 <usb_serial_write.part.0+0x1a0>)
    a2a0:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    a2a2:	f8b8 3000 	ldrh.w	r3, [r8]
    a2a6:	9a01      	ldr	r2, [sp, #4]
    a2a8:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    a2aa:	9a00      	ldr	r2, [sp, #0]
    a2ac:	441a      	add	r2, r3
			size -= tx_available;
    a2ae:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    a2b0:	9200      	str	r2, [sp, #0]
			data += tx_available;
    a2b2:	9a02      	ldr	r2, [sp, #8]
    a2b4:	441a      	add	r2, r3
			tx_available = 0;
    a2b6:	2300      	movs	r3, #0
			data += tx_available;
    a2b8:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    a2ba:	4a19      	ldr	r2, [pc, #100]	; (a320 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    a2bc:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    a2c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a2c4:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    a2c8:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    a2ca:	2900      	cmp	r1, #0
    a2cc:	f47f af62 	bne.w	a194 <usb_serial_write.part.0+0x20>
	return sent;
    a2d0:	9800      	ldr	r0, [sp, #0]
}
    a2d2:	b005      	add	sp, #20
    a2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    a2d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a2dc:	4b0d      	ldr	r3, [pc, #52]	; (a314 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    a2de:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a2e2:	7819      	ldrb	r1, [r3, #0]
				break;
    a2e4:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    a2e6:	f8a8 2000 	strh.w	r2, [r8]
				break;
    a2ea:	e78a      	b.n	a202 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    a2ec:	2301      	movs	r3, #1
				return sent;
    a2ee:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    a2f0:	f88a 3000 	strb.w	r3, [sl]
}
    a2f4:	b005      	add	sp, #20
    a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a2fa:	461a      	mov	r2, r3
    a2fc:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    a300:	e77f      	b.n	a202 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    a302:	9801      	ldr	r0, [sp, #4]
	return sent;
    a304:	e7e5      	b.n	a2d2 <usb_serial_write.part.0+0x15e>
    a306:	bf00      	nop
    a308:	2002260c 	.word	0x2002260c
    a30c:	20022564 	.word	0x20022564
    a310:	2000a5c0 	.word	0x2000a5c0
    a314:	2002260a 	.word	0x2002260a
    a318:	20022612 	.word	0x20022612
    a31c:	2000a640 	.word	0x2000a640
    a320:	402e0000 	.word	0x402e0000
    a324:	200225ee 	.word	0x200225ee
    a328:	20022608 	.word	0x20022608

0000a32c <usb_serial_reset>:
}
    a32c:	4770      	bx	lr
    a32e:	bf00      	nop

0000a330 <usb_serial_configure>:
	if (usb_high_speed) {
    a330:	4b2a      	ldr	r3, [pc, #168]	; (a3dc <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a332:	2100      	movs	r1, #0
    a334:	2280      	movs	r2, #128	; 0x80
    a336:	482a      	ldr	r0, [pc, #168]	; (a3e0 <usb_serial_configure+0xb0>)
{
    a338:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a33a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    a33c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a33e:	4d29      	ldr	r5, [pc, #164]	; (a3e4 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    a340:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    a342:	4e29      	ldr	r6, [pc, #164]	; (a3e8 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    a344:	bf0c      	ite	eq
    a346:	2340      	moveq	r3, #64	; 0x40
    a348:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a34c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a34e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a350:	f002 fc34 	bl	cbbc <memset>
	tx_head = 0;
    a354:	4a25      	ldr	r2, [pc, #148]	; (a3ec <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a356:	4621      	mov	r1, r4
	tx_available = 0;
    a358:	4b25      	ldr	r3, [pc, #148]	; (a3f0 <usb_serial_configure+0xc0>)
	tx_head = 0;
    a35a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a35c:	f44f 7280 	mov.w	r2, #256	; 0x100
    a360:	4824      	ldr	r0, [pc, #144]	; (a3f4 <usb_serial_configure+0xc4>)
	tx_available = 0;
    a362:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a364:	f002 fc2a 	bl	cbbc <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a368:	4a23      	ldr	r2, [pc, #140]	; (a3f8 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a36a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    a36c:	4b23      	ldr	r3, [pc, #140]	; (a3fc <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a36e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    a370:	e9c2 4400 	strd	r4, r4, [r2]
    a374:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    a378:	4a21      	ldr	r2, [pc, #132]	; (a400 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    a37a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    a37e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    a380:	4a20      	ldr	r2, [pc, #128]	; (a404 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    a382:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    a386:	4b20      	ldr	r3, [pc, #128]	; (a408 <usb_serial_configure+0xd8>)
    a388:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a38a:	4623      	mov	r3, r4
	rx_available = 0;
    a38c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a38e:	4622      	mov	r2, r4
    a390:	f7ff f89c 	bl	94cc <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a394:	4622      	mov	r2, r4
    a396:	8831      	ldrh	r1, [r6, #0]
    a398:	2003      	movs	r0, #3
    a39a:	4b1c      	ldr	r3, [pc, #112]	; (a40c <usb_serial_configure+0xdc>)
    a39c:	f7ff f864 	bl	9468 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a3a0:	4623      	mov	r3, r4
    a3a2:	2201      	movs	r2, #1
    a3a4:	8829      	ldrh	r1, [r5, #0]
    a3a6:	2003      	movs	r0, #3
    a3a8:	f7ff f890 	bl	94cc <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a3ac:	4620      	mov	r0, r4
    a3ae:	3401      	adds	r4, #1
    a3b0:	f7ff fe0e 	bl	9fd0 <rx_queue_transfer>
    a3b4:	2c08      	cmp	r4, #8
    a3b6:	d1f9      	bne.n	a3ac <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    a3b8:	4b15      	ldr	r3, [pc, #84]	; (a410 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    a3ba:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    a3bc:	4815      	ldr	r0, [pc, #84]	; (a414 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    a3be:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    a3c0:	4c15      	ldr	r4, [pc, #84]	; (a418 <usb_serial_configure+0xe8>)
    a3c2:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a3c4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a3c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a3cc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    a3d0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    a3d4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    a3d8:	bd70      	pop	{r4, r5, r6, pc}
    a3da:	bf00      	nop
    a3dc:	20022613 	.word	0x20022613
    a3e0:	2000a5c0 	.word	0x2000a5c0
    a3e4:	200225f2 	.word	0x200225f2
    a3e8:	200225ea 	.word	0x200225ea
    a3ec:	2002260a 	.word	0x2002260a
    a3f0:	200225ee 	.word	0x200225ee
    a3f4:	2000a400 	.word	0x2000a400
    a3f8:	20022040 	.word	0x20022040
    a3fc:	2002205c 	.word	0x2002205c
    a400:	20022603 	.word	0x20022603
    a404:	20022030 	.word	0x20022030
    a408:	20022605 	.word	0x20022605
    a40c:	0000a031 	.word	0x0000a031
    a410:	402e0000 	.word	0x402e0000
    a414:	200225cc 	.word	0x200225cc
    a418:	0000a0e5 	.word	0x0000a0e5

0000a41c <usb_serial_read>:
{
    a41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a420:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a424:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    a428:	f8df a0c8 	ldr.w	sl, [pc, #200]	; a4f4 <usb_serial_read+0xd8>
{
    a42c:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a42e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    a432:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    a434:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    a438:	2900      	cmp	r1, #0
    a43a:	d04f      	beq.n	a4dc <usb_serial_read+0xc0>
    a43c:	4680      	mov	r8, r0
    a43e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    a440:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    a442:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a4f8 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    a446:	4b26      	ldr	r3, [pc, #152]	; (a4e0 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a448:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a44c:	4925      	ldr	r1, [pc, #148]	; (a4e4 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    a44e:	781b      	ldrb	r3, [r3, #0]
    a450:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    a452:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    a456:	d03f      	beq.n	a4d8 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    a458:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    a45a:	4b23      	ldr	r3, [pc, #140]	; (a4e8 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a45c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    a45e:	bf28      	it	cs
    a460:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a462:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a464:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a468:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    a46c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    a46e:	4b1f      	ldr	r3, [pc, #124]	; (a4ec <usb_serial_read+0xd0>)
    a470:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    a474:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    a478:	42aa      	cmp	r2, r5
    a47a:	d21c      	bcs.n	a4b6 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a47c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    a480:	4918      	ldr	r1, [pc, #96]	; (a4e4 <usb_serial_read+0xc8>)
			rx_available -= len;
    a482:	4c1b      	ldr	r4, [pc, #108]	; (a4f0 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a484:	4461      	add	r1, ip
    a486:	9201      	str	r2, [sp, #4]
    a488:	f7fe f924 	bl	86d4 <memcpy>
			rx_available -= len;
    a48c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    a48e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    a492:	4658      	mov	r0, fp
			rx_index[i] += len;
    a494:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    a496:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    a49a:	442a      	add	r2, r5
			rx_available -= len;
    a49c:	4439      	add	r1, r7
			rx_index[i] += len;
    a49e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    a4a2:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a4a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a4a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a4ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    a4b0:	b003      	add	sp, #12
    a4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a4b6:	462a      	mov	r2, r5
			count += avail;
    a4b8:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a4ba:	f7fe f90b 	bl	86d4 <memcpy>
			rx_available -= avail;
    a4be:	490c      	ldr	r1, [pc, #48]	; (a4f0 <usb_serial_read+0xd4>)
			rx_tail = tail;
    a4c0:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    a4c2:	4630      	mov	r0, r6
			rx_available -= avail;
    a4c4:	680a      	ldr	r2, [r1, #0]
			p += avail;
    a4c6:	44a8      	add	r8, r5
			rx_available -= avail;
    a4c8:	1b52      	subs	r2, r2, r5
    a4ca:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    a4cc:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    a4d0:	f7ff fd7e 	bl	9fd0 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    a4d4:	45bb      	cmp	fp, r7
    a4d6:	d8b6      	bhi.n	a446 <usb_serial_read+0x2a>
	return count;
    a4d8:	4638      	mov	r0, r7
    a4da:	e7e3      	b.n	a4a4 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    a4dc:	4608      	mov	r0, r1
    a4de:	e7e1      	b.n	a4a4 <usb_serial_read+0x88>
    a4e0:	20022603 	.word	0x20022603
    a4e4:	20009320 	.word	0x20009320
    a4e8:	20022074 	.word	0x20022074
    a4ec:	20022040 	.word	0x20022040
    a4f0:	20022030 	.word	0x20022030
    a4f4:	20022605 	.word	0x20022605
    a4f8:	2002205c 	.word	0x2002205c

0000a4fc <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    a4fc:	4b0b      	ldr	r3, [pc, #44]	; (a52c <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    a4fe:	4a0c      	ldr	r2, [pc, #48]	; (a530 <usb_serial_peekchar+0x34>)
    a500:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    a502:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    a504:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a506:	428a      	cmp	r2, r1
    a508:	d00d      	beq.n	a526 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a50a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    a50c:	4809      	ldr	r0, [pc, #36]	; (a534 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a50e:	4a0a      	ldr	r2, [pc, #40]	; (a538 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    a510:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a512:	490a      	ldr	r1, [pc, #40]	; (a53c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    a514:	bf28      	it	cs
    a516:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a518:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a51a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    a51e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    a522:	5c58      	ldrb	r0, [r3, r1]
    a524:	4770      	bx	lr
	if (tail == rx_head) return -1;
    a526:	f04f 30ff 	mov.w	r0, #4294967295
}
    a52a:	4770      	bx	lr
    a52c:	20022603 	.word	0x20022603
    a530:	20022605 	.word	0x20022605
    a534:	20022074 	.word	0x20022074
    a538:	20009320 	.word	0x20009320
    a53c:	2002205c 	.word	0x2002205c

0000a540 <usb_serial_available>:
	uint32_t n = rx_available;
    a540:	4b04      	ldr	r3, [pc, #16]	; (a554 <usb_serial_available+0x14>)
{
    a542:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    a544:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a546:	b10c      	cbz	r4, a54c <usb_serial_available+0xc>
}
    a548:	4620      	mov	r0, r4
    a54a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    a54c:	f000 f8e0 	bl	a710 <yield>
}
    a550:	4620      	mov	r0, r4
    a552:	bd10      	pop	{r4, pc}
    a554:	20022030 	.word	0x20022030

0000a558 <usb_serial_flush_input>:
{
    a558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a55c:	4e14      	ldr	r6, [pc, #80]	; (a5b0 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    a55e:	4d15      	ldr	r5, [pc, #84]	; (a5b4 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    a560:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    a562:	782a      	ldrb	r2, [r5, #0]
    a564:	4293      	cmp	r3, r2
    a566:	d021      	beq.n	a5ac <usb_serial_flush_input+0x54>
    a568:	b2dc      	uxtb	r4, r3
    a56a:	f8df 9050 	ldr.w	r9, [pc, #80]	; a5bc <usb_serial_flush_input+0x64>
    a56e:	f8df b050 	ldr.w	fp, [pc, #80]	; a5c0 <usb_serial_flush_input+0x68>
    a572:	f8df 8050 	ldr.w	r8, [pc, #80]	; a5c4 <usb_serial_flush_input+0x6c>
    a576:	4f10      	ldr	r7, [pc, #64]	; (a5b8 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    a578:	3401      	adds	r4, #1
    a57a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    a57c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    a580:	d901      	bls.n	a586 <usb_serial_flush_input+0x2e>
    a582:	2400      	movs	r4, #0
    a584:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    a586:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a58a:	f8db 3000 	ldr.w	r3, [fp]
    a58e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    a592:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    a596:	1a52      	subs	r2, r2, r1
    a598:	1a9b      	subs	r3, r3, r2
    a59a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    a59e:	f7ff fd17 	bl	9fd0 <rx_queue_transfer>
		rx_tail = tail;
    a5a2:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    a5a6:	782b      	ldrb	r3, [r5, #0]
    a5a8:	42a3      	cmp	r3, r4
    a5aa:	d1e5      	bne.n	a578 <usb_serial_flush_input+0x20>
}
    a5ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5b0:	20022605 	.word	0x20022605
    a5b4:	20022603 	.word	0x20022603
    a5b8:	2002205c 	.word	0x2002205c
    a5bc:	20022074 	.word	0x20022074
    a5c0:	20022030 	.word	0x20022030
    a5c4:	20022040 	.word	0x20022040

0000a5c8 <usb_serial_getchar>:
{
    a5c8:	b500      	push	{lr}
    a5ca:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    a5cc:	2101      	movs	r1, #1
    a5ce:	f10d 0007 	add.w	r0, sp, #7
    a5d2:	f7ff ff23 	bl	a41c <usb_serial_read>
    a5d6:	b120      	cbz	r0, a5e2 <usb_serial_getchar+0x1a>
    a5d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    a5dc:	b003      	add	sp, #12
    a5de:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    a5e2:	f04f 30ff 	mov.w	r0, #4294967295
    a5e6:	e7f9      	b.n	a5dc <usb_serial_getchar+0x14>

0000a5e8 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    a5e8:	4b09      	ldr	r3, [pc, #36]	; (a610 <usb_serial_putchar+0x28>)
{
    a5ea:	b500      	push	{lr}
    a5ec:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    a5ee:	781b      	ldrb	r3, [r3, #0]
{
    a5f0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    a5f4:	b13b      	cbz	r3, a606 <usb_serial_putchar+0x1e>
    a5f6:	2101      	movs	r1, #1
    a5f8:	f10d 0007 	add.w	r0, sp, #7
    a5fc:	f7ff fdba 	bl	a174 <usb_serial_write.part.0>
}
    a600:	b003      	add	sp, #12
    a602:	f85d fb04 	ldr.w	pc, [sp], #4
    a606:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a60a:	b003      	add	sp, #12
    a60c:	f85d fb04 	ldr.w	pc, [sp], #4
    a610:	20022612 	.word	0x20022612

0000a614 <usb_serial_write>:
	if (!usb_configuration) return 0;
    a614:	4b04      	ldr	r3, [pc, #16]	; (a628 <usb_serial_write+0x14>)
    a616:	781b      	ldrb	r3, [r3, #0]
    a618:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    a61c:	b10b      	cbz	r3, a622 <usb_serial_write+0xe>
    a61e:	f7ff bda9 	b.w	a174 <usb_serial_write.part.0>
}
    a622:	4610      	mov	r0, r2
    a624:	4770      	bx	lr
    a626:	bf00      	nop
    a628:	20022612 	.word	0x20022612

0000a62c <usb_serial_write_buffer_free>:
{
    a62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a630:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    a632:	f8df 8044 	ldr.w	r8, [pc, #68]	; a678 <usb_serial_write_buffer_free+0x4c>
    a636:	2301      	movs	r3, #1
    a638:	4d0d      	ldr	r5, [pc, #52]	; (a670 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a63a:	4627      	mov	r7, r4
    a63c:	4e0d      	ldr	r6, [pc, #52]	; (a674 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a63e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    a642:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a644:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    a646:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    a648:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    a64a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a64e:	d005      	beq.n	a65c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a650:	f7ff f810 	bl	9674 <usb_transfer_status>
    a654:	0603      	lsls	r3, r0, #24
    a656:	bf58      	it	pl
    a658:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a65c:	2c04      	cmp	r4, #4
    a65e:	d1f0      	bne.n	a642 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    a660:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a664:	2300      	movs	r3, #0
}
    a666:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    a668:	f888 3000 	strb.w	r3, [r8]
}
    a66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a670:	2000a5c0 	.word	0x2000a5c0
    a674:	2002260a 	.word	0x2002260a
    a678:	2002260c 	.word	0x2002260c

0000a67c <usb_serial_flush_output>:
{
    a67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a680:	4b1d      	ldr	r3, [pc, #116]	; (a6f8 <usb_serial_flush_output+0x7c>)
    a682:	781b      	ldrb	r3, [r3, #0]
    a684:	b113      	cbz	r3, a68c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a686:	4d1d      	ldr	r5, [pc, #116]	; (a6fc <usb_serial_flush_output+0x80>)
    a688:	882a      	ldrh	r2, [r5, #0]
    a68a:	b90a      	cbnz	r2, a690 <usb_serial_flush_output+0x14>
}
    a68c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    a690:	4e1b      	ldr	r6, [pc, #108]	; (a700 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a692:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a696:	491b      	ldr	r1, [pc, #108]	; (a704 <usb_serial_flush_output+0x88>)
    a698:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a69a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a69c:	4c1a      	ldr	r4, [pc, #104]	; (a708 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a69e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    a6a2:	4f1a      	ldr	r7, [pc, #104]	; (a70c <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a6a4:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    a6a8:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a6aa:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    a6ac:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a6ae:	4621      	mov	r1, r4
    a6b0:	2300      	movs	r3, #0
    a6b2:	f7fe ffa5 	bl	9600 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a6b6:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    a6ba:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a6be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a6c2:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a6c6:	3420      	adds	r4, #32
	} while (location < end_addr);
    a6c8:	42a2      	cmp	r2, r4
    a6ca:	d8fa      	bhi.n	a6c2 <usb_serial_flush_output+0x46>
	asm("dsb");
    a6cc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a6d0:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a6d4:	2003      	movs	r0, #3
    a6d6:	4641      	mov	r1, r8
    a6d8:	f7fe ffaa 	bl	9630 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a6dc:	7833      	ldrb	r3, [r6, #0]
    a6de:	3301      	adds	r3, #1
    a6e0:	b2db      	uxtb	r3, r3
    a6e2:	2b03      	cmp	r3, #3
    a6e4:	bf88      	it	hi
    a6e6:	2300      	movhi	r3, #0
    a6e8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    a6ea:	2300      	movs	r3, #0
    a6ec:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a6ee:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a6f2:	703b      	strb	r3, [r7, #0]
}
    a6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a6f8:	20022612 	.word	0x20022612
    a6fc:	200225ee 	.word	0x200225ee
    a700:	2002260a 	.word	0x2002260a
    a704:	2000a5c0 	.word	0x2000a5c0
    a708:	2000a640 	.word	0x2000a640
    a70c:	2002260c 	.word	0x2002260c

0000a710 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a714:	4e32      	ldr	r6, [pc, #200]	; (a7e0 <yield+0xd0>)
    a716:	7833      	ldrb	r3, [r6, #0]
    a718:	b163      	cbz	r3, a734 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    a71a:	4f32      	ldr	r7, [pc, #200]	; (a7e4 <yield+0xd4>)
    a71c:	783a      	ldrb	r2, [r7, #0]
    a71e:	b94a      	cbnz	r2, a734 <yield+0x24>
	running = 1;
    a720:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a722:	07d9      	lsls	r1, r3, #31
	running = 1;
    a724:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a726:	d444      	bmi.n	a7b2 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    a728:	079a      	lsls	r2, r3, #30
    a72a:	d426      	bmi.n	a77a <yield+0x6a>

	running = 0;
    a72c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a72e:	075b      	lsls	r3, r3, #29
	running = 0;
    a730:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a732:	d401      	bmi.n	a738 <yield+0x28>
	
};
    a734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    a738:	4b2b      	ldr	r3, [pc, #172]	; (a7e8 <yield+0xd8>)
    a73a:	681a      	ldr	r2, [r3, #0]
    a73c:	2a00      	cmp	r2, #0
    a73e:	d0f9      	beq.n	a734 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a740:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    a744:	2a00      	cmp	r2, #0
    a746:	d1f5      	bne.n	a734 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a748:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    a74c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    a74e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a750:	2800      	cmp	r0, #0
    a752:	d03b      	beq.n	a7cc <yield+0xbc>
		if (runningFromYield) {
    a754:	4c25      	ldr	r4, [pc, #148]	; (a7ec <yield+0xdc>)
    a756:	7821      	ldrb	r1, [r4, #0]
    a758:	2900      	cmp	r1, #0
    a75a:	d137      	bne.n	a7cc <yield+0xbc>
		runningFromYield = true;
    a75c:	2201      	movs	r2, #1
    a75e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    a760:	6942      	ldr	r2, [r0, #20]
    a762:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    a764:	2a00      	cmp	r2, #0
    a766:	d038      	beq.n	a7da <yield+0xca>
			firstYield->_prev = nullptr;
    a768:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    a76a:	b905      	cbnz	r5, a76e <yield+0x5e>
    a76c:	b662      	cpsie	i
		first->_triggered = false;
    a76e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    a770:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    a772:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a774:	4798      	blx	r3
		runningFromYield = false;
    a776:	7025      	strb	r5, [r4, #0]
    a778:	e7dc      	b.n	a734 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a77a:	f8df 807c 	ldr.w	r8, [pc, #124]	; a7f8 <yield+0xe8>
    a77e:	f898 2000 	ldrb.w	r2, [r8]
    a782:	2a00      	cmp	r2, #0
    a784:	d0d2      	beq.n	a72c <yield+0x1c>
    a786:	2500      	movs	r5, #0
    a788:	f8df 9070 	ldr.w	r9, [pc, #112]	; a7fc <yield+0xec>
    a78c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    a78e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a792:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    a794:	6823      	ldr	r3, [r4, #0]
    a796:	4620      	mov	r0, r4
    a798:	691b      	ldr	r3, [r3, #16]
    a79a:	4798      	blx	r3
    a79c:	b110      	cbz	r0, a7a4 <yield+0x94>
    a79e:	6963      	ldr	r3, [r4, #20]
    a7a0:	689b      	ldr	r3, [r3, #8]
    a7a2:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a7a4:	f898 2000 	ldrb.w	r2, [r8]
    a7a8:	b2eb      	uxtb	r3, r5
    a7aa:	429a      	cmp	r2, r3
    a7ac:	d8ef      	bhi.n	a78e <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a7ae:	7833      	ldrb	r3, [r6, #0]
    a7b0:	e7bc      	b.n	a72c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    a7b2:	f7ff fec5 	bl	a540 <usb_serial_available>
		if (Serial.available()) serialEvent();
    a7b6:	b968      	cbnz	r0, a7d4 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a7b8:	4b0d      	ldr	r3, [pc, #52]	; (a7f0 <yield+0xe0>)
    a7ba:	781b      	ldrb	r3, [r3, #0]
    a7bc:	b90b      	cbnz	r3, a7c2 <yield+0xb2>
    a7be:	7833      	ldrb	r3, [r6, #0]
    a7c0:	e7b2      	b.n	a728 <yield+0x18>
    a7c2:	7833      	ldrb	r3, [r6, #0]
    a7c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    a7c8:	7033      	strb	r3, [r6, #0]
    a7ca:	e7ad      	b.n	a728 <yield+0x18>
		if (doit) __enable_irq();
    a7cc:	2d00      	cmp	r5, #0
    a7ce:	d1b1      	bne.n	a734 <yield+0x24>
    a7d0:	b662      	cpsie	i
    a7d2:	e7af      	b.n	a734 <yield+0x24>
		if (Serial.available()) serialEvent();
    a7d4:	f000 f8cc 	bl	a970 <serialEvent()>
    a7d8:	e7ee      	b.n	a7b8 <yield+0xa8>
			lastYield = nullptr;
    a7da:	4b06      	ldr	r3, [pc, #24]	; (a7f4 <yield+0xe4>)
    a7dc:	601a      	str	r2, [r3, #0]
    a7de:	e7c4      	b.n	a76a <yield+0x5a>
    a7e0:	20008ebf 	.word	0x20008ebf
    a7e4:	200225ff 	.word	0x200225ff
    a7e8:	20020148 	.word	0x20020148
    a7ec:	200225fd 	.word	0x200225fd
    a7f0:	60002846 	.word	0x60002846
    a7f4:	20020154 	.word	0x20020154
    a7f8:	200225fe 	.word	0x200225fe
    a7fc:	20020158 	.word	0x20020158

0000a800 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    a800:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    a802:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a804:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    a808:	4619      	mov	r1, r3
{
    a80a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a80c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a810:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a814:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a818:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    a81c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    a820:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    a822:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a826:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a82a:	b29b      	uxth	r3, r3
    a82c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    a830:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a834:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    a838:	3101      	adds	r1, #1
    a83a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    a83e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a840:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a842:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a846:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a848:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a84a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a84c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a84e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    a852:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a854:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a856:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a858:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    a85a:	d1eb      	bne.n	a834 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a85c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a860:	b29b      	uxth	r3, r3
    a862:	f043 030f 	orr.w	r3, r3, #15
    a866:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a86a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a86e:	b29b      	uxth	r3, r3
    a870:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    a874:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    a878:	bd10      	pop	{r4, pc}
    a87a:	bf00      	nop

0000a87c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a87c:	4b37      	ldr	r3, [pc, #220]	; (a95c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a87e:	4a38      	ldr	r2, [pc, #224]	; (a960 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a880:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    a882:	4838      	ldr	r0, [pc, #224]	; (a964 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a884:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    a888:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a88a:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a88c:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a890:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a894:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a898:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a89c:	430a      	orrs	r2, r1
    a89e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    a8a2:	f7ff ffad 	bl	a800 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    a8a6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a8aa:	f7ff ffa9 	bl	a800 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    a8ae:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a8b2:	f7ff ffa5 	bl	a800 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    a8b6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a8ba:	f7ff ffa1 	bl	a800 <flexpwm_init>
	for (i=0; i < 4; i++) {
    a8be:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a8c0:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a8c4:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    a8c8:	4611      	mov	r1, r2
    a8ca:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a8ce:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a8d2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a8d4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a8d6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a8d8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a8da:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a8de:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a8e0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a8e2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a8e6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a8e8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a8ea:	d1ee      	bne.n	a8ca <pwm_init+0x4e>
    a8ec:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a8ee:	481e      	ldr	r0, [pc, #120]	; (a968 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a8f0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a8f4:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a8f8:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a8fa:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a8fe:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a902:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a906:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a90a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a90c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a90e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a910:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a912:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a916:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a918:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a91a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a91e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a920:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a922:	d1ee      	bne.n	a902 <pwm_init+0x86>
    a924:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a926:	4811      	ldr	r0, [pc, #68]	; (a96c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a928:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a92a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a92e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a930:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a934:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a938:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a93c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a940:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a942:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a944:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a946:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a948:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a94a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a94c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a94e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a952:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a954:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    a958:	d1ee      	bne.n	a938 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    a95a:	bd70      	pop	{r4, r5, r6, pc}
    a95c:	400fc000 	.word	0x400fc000
    a960:	fc030000 	.word	0xfc030000
    a964:	403dc000 	.word	0x403dc000
    a968:	401e0000 	.word	0x401e0000
    a96c:	401e4000 	.word	0x401e4000

0000a970 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    a970:	4770      	bx	lr
    a972:	bf00      	nop

0000a974 <sm_align_pool>:
{
    a974:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    a976:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    a97a:	b15b      	cbz	r3, a994 <sm_align_pool+0x20>
    a97c:	b1ba      	cbz	r2, a9ae <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    a97e:	4b0f      	ldr	r3, [pc, #60]	; (a9bc <sm_align_pool+0x48>)
    a980:	fba3 1302 	umull	r1, r3, r3, r2
    a984:	08db      	lsrs	r3, r3, #3
    a986:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a98a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    a98e:	d10a      	bne.n	a9a6 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    a990:	2001      	movs	r0, #1
}
    a992:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    a994:	4b09      	ldr	r3, [pc, #36]	; (a9bc <sm_align_pool+0x48>)
    a996:	fba3 1302 	umull	r1, r3, r3, r2
    a99a:	08db      	lsrs	r3, r3, #3
    a99c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    a9a0:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    a9a4:	d001      	beq.n	a9aa <sm_align_pool+0x36>
    a9a6:	1ad2      	subs	r2, r2, r3
    a9a8:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    a9aa:	2af0      	cmp	r2, #240	; 0xf0
    a9ac:	d8f0      	bhi.n	a990 <sm_align_pool+0x1c>
		errno = ENOSPC;
    a9ae:	f002 fa3b 	bl	ce28 <__errno>
    a9b2:	221c      	movs	r2, #28
    a9b4:	4603      	mov	r3, r0
    a9b6:	2000      	movs	r0, #0
    a9b8:	601a      	str	r2, [r3, #0]
}
    a9ba:	bd08      	pop	{r3, pc}
    a9bc:	aaaaaaab 	.word	0xaaaaaaab

0000a9c0 <sm_set_pool>:
{
    a9c0:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    a9c2:	4604      	mov	r4, r0
    a9c4:	b338      	cbz	r0, aa16 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    a9c6:	b119      	cbz	r1, a9d0 <sm_set_pool+0x10>
    a9c8:	fab2 f682 	clz	r6, r2
    a9cc:	0976      	lsrs	r6, r6, #5
    a9ce:	b9a2      	cbnz	r2, a9fa <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    a9d0:	6820      	ldr	r0, [r4, #0]
    a9d2:	b300      	cbz	r0, aa16 <sm_set_pool+0x56>
    a9d4:	6862      	ldr	r2, [r4, #4]
    a9d6:	b1f2      	cbz	r2, aa16 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    a9d8:	4b18      	ldr	r3, [pc, #96]	; (aa3c <sm_set_pool+0x7c>)
    a9da:	4919      	ldr	r1, [pc, #100]	; (aa40 <sm_set_pool+0x80>)
    a9dc:	fb02 f303 	mul.w	r3, r2, r3
    a9e0:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    a9e4:	d317      	bcc.n	aa16 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    a9e6:	68a3      	ldr	r3, [r4, #8]
    a9e8:	b9e3      	cbnz	r3, aa24 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    a9ea:	2200      	movs	r2, #0
			return 1;
    a9ec:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    a9ee:	6022      	str	r2, [r4, #0]
    a9f0:	6062      	str	r2, [r4, #4]
    a9f2:	60a2      	str	r2, [r4, #8]
    a9f4:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    a9f6:	4618      	mov	r0, r3
    a9f8:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    a9fa:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    a9fc:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    a9fe:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    aa02:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    aa04:	f7ff ffb6 	bl	a974 <sm_align_pool>
    aa08:	4603      	mov	r3, r0
    aa0a:	2800      	cmp	r0, #0
    aa0c:	d0f3      	beq.n	a9f6 <sm_set_pool+0x36>
	if (do_zero) {
    aa0e:	b96d      	cbnz	r5, aa2c <sm_set_pool+0x6c>
	return 1;
    aa10:	2301      	movs	r3, #1
}
    aa12:	4618      	mov	r0, r3
    aa14:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    aa16:	f002 fa07 	bl	ce28 <__errno>
    aa1a:	2216      	movs	r2, #22
		return 0;
    aa1c:	2300      	movs	r3, #0
		errno = EINVAL;
    aa1e:	6002      	str	r2, [r0, #0]
}
    aa20:	4618      	mov	r0, r3
    aa22:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    aa24:	2100      	movs	r1, #0
    aa26:	f002 f8c9 	bl	cbbc <memset>
    aa2a:	e7de      	b.n	a9ea <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    aa2c:	6862      	ldr	r2, [r4, #4]
    aa2e:	4631      	mov	r1, r6
    aa30:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    aa32:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    aa34:	f002 f8c2 	bl	cbbc <memset>
	return 1;
    aa38:	2301      	movs	r3, #1
    aa3a:	e7dc      	b.n	a9f6 <sm_set_pool+0x36>
    aa3c:	aaaaaaab 	.word	0xaaaaaaab
    aa40:	15555555 	.word	0x15555555

0000aa44 <__aeabi_atexit>:
    aa44:	4603      	mov	r3, r0
    aa46:	4608      	mov	r0, r1
    aa48:	4619      	mov	r1, r3
    aa4a:	f001 be27 	b.w	c69c <__cxa_atexit>
    aa4e:	bf00      	nop

0000aa50 <__aeabi_uldivmod>:
    aa50:	b953      	cbnz	r3, aa68 <__aeabi_uldivmod+0x18>
    aa52:	b94a      	cbnz	r2, aa68 <__aeabi_uldivmod+0x18>
    aa54:	2900      	cmp	r1, #0
    aa56:	bf08      	it	eq
    aa58:	2800      	cmpeq	r0, #0
    aa5a:	bf1c      	itt	ne
    aa5c:	f04f 31ff 	movne.w	r1, #4294967295
    aa60:	f04f 30ff 	movne.w	r0, #4294967295
    aa64:	f000 b970 	b.w	ad48 <__aeabi_idiv0>
    aa68:	f1ad 0c08 	sub.w	ip, sp, #8
    aa6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    aa70:	f000 f806 	bl	aa80 <__udivmoddi4>
    aa74:	f8dd e004 	ldr.w	lr, [sp, #4]
    aa78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    aa7c:	b004      	add	sp, #16
    aa7e:	4770      	bx	lr

0000aa80 <__udivmoddi4>:
    aa80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa84:	9e08      	ldr	r6, [sp, #32]
    aa86:	460d      	mov	r5, r1
    aa88:	4604      	mov	r4, r0
    aa8a:	460f      	mov	r7, r1
    aa8c:	2b00      	cmp	r3, #0
    aa8e:	d14a      	bne.n	ab26 <__udivmoddi4+0xa6>
    aa90:	428a      	cmp	r2, r1
    aa92:	4694      	mov	ip, r2
    aa94:	d965      	bls.n	ab62 <__udivmoddi4+0xe2>
    aa96:	fab2 f382 	clz	r3, r2
    aa9a:	b143      	cbz	r3, aaae <__udivmoddi4+0x2e>
    aa9c:	fa02 fc03 	lsl.w	ip, r2, r3
    aaa0:	f1c3 0220 	rsb	r2, r3, #32
    aaa4:	409f      	lsls	r7, r3
    aaa6:	fa20 f202 	lsr.w	r2, r0, r2
    aaaa:	4317      	orrs	r7, r2
    aaac:	409c      	lsls	r4, r3
    aaae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    aab2:	fa1f f58c 	uxth.w	r5, ip
    aab6:	fbb7 f1fe 	udiv	r1, r7, lr
    aaba:	0c22      	lsrs	r2, r4, #16
    aabc:	fb0e 7711 	mls	r7, lr, r1, r7
    aac0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    aac4:	fb01 f005 	mul.w	r0, r1, r5
    aac8:	4290      	cmp	r0, r2
    aaca:	d90a      	bls.n	aae2 <__udivmoddi4+0x62>
    aacc:	eb1c 0202 	adds.w	r2, ip, r2
    aad0:	f101 37ff 	add.w	r7, r1, #4294967295
    aad4:	f080 811c 	bcs.w	ad10 <__udivmoddi4+0x290>
    aad8:	4290      	cmp	r0, r2
    aada:	f240 8119 	bls.w	ad10 <__udivmoddi4+0x290>
    aade:	3902      	subs	r1, #2
    aae0:	4462      	add	r2, ip
    aae2:	1a12      	subs	r2, r2, r0
    aae4:	b2a4      	uxth	r4, r4
    aae6:	fbb2 f0fe 	udiv	r0, r2, lr
    aaea:	fb0e 2210 	mls	r2, lr, r0, r2
    aaee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    aaf2:	fb00 f505 	mul.w	r5, r0, r5
    aaf6:	42a5      	cmp	r5, r4
    aaf8:	d90a      	bls.n	ab10 <__udivmoddi4+0x90>
    aafa:	eb1c 0404 	adds.w	r4, ip, r4
    aafe:	f100 32ff 	add.w	r2, r0, #4294967295
    ab02:	f080 8107 	bcs.w	ad14 <__udivmoddi4+0x294>
    ab06:	42a5      	cmp	r5, r4
    ab08:	f240 8104 	bls.w	ad14 <__udivmoddi4+0x294>
    ab0c:	4464      	add	r4, ip
    ab0e:	3802      	subs	r0, #2
    ab10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    ab14:	1b64      	subs	r4, r4, r5
    ab16:	2100      	movs	r1, #0
    ab18:	b11e      	cbz	r6, ab22 <__udivmoddi4+0xa2>
    ab1a:	40dc      	lsrs	r4, r3
    ab1c:	2300      	movs	r3, #0
    ab1e:	e9c6 4300 	strd	r4, r3, [r6]
    ab22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab26:	428b      	cmp	r3, r1
    ab28:	d908      	bls.n	ab3c <__udivmoddi4+0xbc>
    ab2a:	2e00      	cmp	r6, #0
    ab2c:	f000 80ed 	beq.w	ad0a <__udivmoddi4+0x28a>
    ab30:	2100      	movs	r1, #0
    ab32:	e9c6 0500 	strd	r0, r5, [r6]
    ab36:	4608      	mov	r0, r1
    ab38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab3c:	fab3 f183 	clz	r1, r3
    ab40:	2900      	cmp	r1, #0
    ab42:	d149      	bne.n	abd8 <__udivmoddi4+0x158>
    ab44:	42ab      	cmp	r3, r5
    ab46:	d302      	bcc.n	ab4e <__udivmoddi4+0xce>
    ab48:	4282      	cmp	r2, r0
    ab4a:	f200 80f8 	bhi.w	ad3e <__udivmoddi4+0x2be>
    ab4e:	1a84      	subs	r4, r0, r2
    ab50:	eb65 0203 	sbc.w	r2, r5, r3
    ab54:	2001      	movs	r0, #1
    ab56:	4617      	mov	r7, r2
    ab58:	2e00      	cmp	r6, #0
    ab5a:	d0e2      	beq.n	ab22 <__udivmoddi4+0xa2>
    ab5c:	e9c6 4700 	strd	r4, r7, [r6]
    ab60:	e7df      	b.n	ab22 <__udivmoddi4+0xa2>
    ab62:	b902      	cbnz	r2, ab66 <__udivmoddi4+0xe6>
    ab64:	deff      	udf	#255	; 0xff
    ab66:	fab2 f382 	clz	r3, r2
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	f040 8090 	bne.w	ac90 <__udivmoddi4+0x210>
    ab70:	1a8a      	subs	r2, r1, r2
    ab72:	ea4f 471c 	mov.w	r7, ip, lsr #16
    ab76:	fa1f fe8c 	uxth.w	lr, ip
    ab7a:	2101      	movs	r1, #1
    ab7c:	fbb2 f5f7 	udiv	r5, r2, r7
    ab80:	fb07 2015 	mls	r0, r7, r5, r2
    ab84:	0c22      	lsrs	r2, r4, #16
    ab86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    ab8a:	fb0e f005 	mul.w	r0, lr, r5
    ab8e:	4290      	cmp	r0, r2
    ab90:	d908      	bls.n	aba4 <__udivmoddi4+0x124>
    ab92:	eb1c 0202 	adds.w	r2, ip, r2
    ab96:	f105 38ff 	add.w	r8, r5, #4294967295
    ab9a:	d202      	bcs.n	aba2 <__udivmoddi4+0x122>
    ab9c:	4290      	cmp	r0, r2
    ab9e:	f200 80cb 	bhi.w	ad38 <__udivmoddi4+0x2b8>
    aba2:	4645      	mov	r5, r8
    aba4:	1a12      	subs	r2, r2, r0
    aba6:	b2a4      	uxth	r4, r4
    aba8:	fbb2 f0f7 	udiv	r0, r2, r7
    abac:	fb07 2210 	mls	r2, r7, r0, r2
    abb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    abb4:	fb0e fe00 	mul.w	lr, lr, r0
    abb8:	45a6      	cmp	lr, r4
    abba:	d908      	bls.n	abce <__udivmoddi4+0x14e>
    abbc:	eb1c 0404 	adds.w	r4, ip, r4
    abc0:	f100 32ff 	add.w	r2, r0, #4294967295
    abc4:	d202      	bcs.n	abcc <__udivmoddi4+0x14c>
    abc6:	45a6      	cmp	lr, r4
    abc8:	f200 80bb 	bhi.w	ad42 <__udivmoddi4+0x2c2>
    abcc:	4610      	mov	r0, r2
    abce:	eba4 040e 	sub.w	r4, r4, lr
    abd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    abd6:	e79f      	b.n	ab18 <__udivmoddi4+0x98>
    abd8:	f1c1 0720 	rsb	r7, r1, #32
    abdc:	408b      	lsls	r3, r1
    abde:	fa22 fc07 	lsr.w	ip, r2, r7
    abe2:	ea4c 0c03 	orr.w	ip, ip, r3
    abe6:	fa05 f401 	lsl.w	r4, r5, r1
    abea:	fa20 f307 	lsr.w	r3, r0, r7
    abee:	40fd      	lsrs	r5, r7
    abf0:	ea4f 491c 	mov.w	r9, ip, lsr #16
    abf4:	4323      	orrs	r3, r4
    abf6:	fbb5 f8f9 	udiv	r8, r5, r9
    abfa:	fa1f fe8c 	uxth.w	lr, ip
    abfe:	fb09 5518 	mls	r5, r9, r8, r5
    ac02:	0c1c      	lsrs	r4, r3, #16
    ac04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    ac08:	fb08 f50e 	mul.w	r5, r8, lr
    ac0c:	42a5      	cmp	r5, r4
    ac0e:	fa02 f201 	lsl.w	r2, r2, r1
    ac12:	fa00 f001 	lsl.w	r0, r0, r1
    ac16:	d90b      	bls.n	ac30 <__udivmoddi4+0x1b0>
    ac18:	eb1c 0404 	adds.w	r4, ip, r4
    ac1c:	f108 3aff 	add.w	sl, r8, #4294967295
    ac20:	f080 8088 	bcs.w	ad34 <__udivmoddi4+0x2b4>
    ac24:	42a5      	cmp	r5, r4
    ac26:	f240 8085 	bls.w	ad34 <__udivmoddi4+0x2b4>
    ac2a:	f1a8 0802 	sub.w	r8, r8, #2
    ac2e:	4464      	add	r4, ip
    ac30:	1b64      	subs	r4, r4, r5
    ac32:	b29d      	uxth	r5, r3
    ac34:	fbb4 f3f9 	udiv	r3, r4, r9
    ac38:	fb09 4413 	mls	r4, r9, r3, r4
    ac3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    ac40:	fb03 fe0e 	mul.w	lr, r3, lr
    ac44:	45a6      	cmp	lr, r4
    ac46:	d908      	bls.n	ac5a <__udivmoddi4+0x1da>
    ac48:	eb1c 0404 	adds.w	r4, ip, r4
    ac4c:	f103 35ff 	add.w	r5, r3, #4294967295
    ac50:	d26c      	bcs.n	ad2c <__udivmoddi4+0x2ac>
    ac52:	45a6      	cmp	lr, r4
    ac54:	d96a      	bls.n	ad2c <__udivmoddi4+0x2ac>
    ac56:	3b02      	subs	r3, #2
    ac58:	4464      	add	r4, ip
    ac5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    ac5e:	fba3 9502 	umull	r9, r5, r3, r2
    ac62:	eba4 040e 	sub.w	r4, r4, lr
    ac66:	42ac      	cmp	r4, r5
    ac68:	46c8      	mov	r8, r9
    ac6a:	46ae      	mov	lr, r5
    ac6c:	d356      	bcc.n	ad1c <__udivmoddi4+0x29c>
    ac6e:	d053      	beq.n	ad18 <__udivmoddi4+0x298>
    ac70:	b156      	cbz	r6, ac88 <__udivmoddi4+0x208>
    ac72:	ebb0 0208 	subs.w	r2, r0, r8
    ac76:	eb64 040e 	sbc.w	r4, r4, lr
    ac7a:	fa04 f707 	lsl.w	r7, r4, r7
    ac7e:	40ca      	lsrs	r2, r1
    ac80:	40cc      	lsrs	r4, r1
    ac82:	4317      	orrs	r7, r2
    ac84:	e9c6 7400 	strd	r7, r4, [r6]
    ac88:	4618      	mov	r0, r3
    ac8a:	2100      	movs	r1, #0
    ac8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac90:	f1c3 0120 	rsb	r1, r3, #32
    ac94:	fa02 fc03 	lsl.w	ip, r2, r3
    ac98:	fa20 f201 	lsr.w	r2, r0, r1
    ac9c:	fa25 f101 	lsr.w	r1, r5, r1
    aca0:	409d      	lsls	r5, r3
    aca2:	432a      	orrs	r2, r5
    aca4:	ea4f 471c 	mov.w	r7, ip, lsr #16
    aca8:	fa1f fe8c 	uxth.w	lr, ip
    acac:	fbb1 f0f7 	udiv	r0, r1, r7
    acb0:	fb07 1510 	mls	r5, r7, r0, r1
    acb4:	0c11      	lsrs	r1, r2, #16
    acb6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    acba:	fb00 f50e 	mul.w	r5, r0, lr
    acbe:	428d      	cmp	r5, r1
    acc0:	fa04 f403 	lsl.w	r4, r4, r3
    acc4:	d908      	bls.n	acd8 <__udivmoddi4+0x258>
    acc6:	eb1c 0101 	adds.w	r1, ip, r1
    acca:	f100 38ff 	add.w	r8, r0, #4294967295
    acce:	d22f      	bcs.n	ad30 <__udivmoddi4+0x2b0>
    acd0:	428d      	cmp	r5, r1
    acd2:	d92d      	bls.n	ad30 <__udivmoddi4+0x2b0>
    acd4:	3802      	subs	r0, #2
    acd6:	4461      	add	r1, ip
    acd8:	1b49      	subs	r1, r1, r5
    acda:	b292      	uxth	r2, r2
    acdc:	fbb1 f5f7 	udiv	r5, r1, r7
    ace0:	fb07 1115 	mls	r1, r7, r5, r1
    ace4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    ace8:	fb05 f10e 	mul.w	r1, r5, lr
    acec:	4291      	cmp	r1, r2
    acee:	d908      	bls.n	ad02 <__udivmoddi4+0x282>
    acf0:	eb1c 0202 	adds.w	r2, ip, r2
    acf4:	f105 38ff 	add.w	r8, r5, #4294967295
    acf8:	d216      	bcs.n	ad28 <__udivmoddi4+0x2a8>
    acfa:	4291      	cmp	r1, r2
    acfc:	d914      	bls.n	ad28 <__udivmoddi4+0x2a8>
    acfe:	3d02      	subs	r5, #2
    ad00:	4462      	add	r2, ip
    ad02:	1a52      	subs	r2, r2, r1
    ad04:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    ad08:	e738      	b.n	ab7c <__udivmoddi4+0xfc>
    ad0a:	4631      	mov	r1, r6
    ad0c:	4630      	mov	r0, r6
    ad0e:	e708      	b.n	ab22 <__udivmoddi4+0xa2>
    ad10:	4639      	mov	r1, r7
    ad12:	e6e6      	b.n	aae2 <__udivmoddi4+0x62>
    ad14:	4610      	mov	r0, r2
    ad16:	e6fb      	b.n	ab10 <__udivmoddi4+0x90>
    ad18:	4548      	cmp	r0, r9
    ad1a:	d2a9      	bcs.n	ac70 <__udivmoddi4+0x1f0>
    ad1c:	ebb9 0802 	subs.w	r8, r9, r2
    ad20:	eb65 0e0c 	sbc.w	lr, r5, ip
    ad24:	3b01      	subs	r3, #1
    ad26:	e7a3      	b.n	ac70 <__udivmoddi4+0x1f0>
    ad28:	4645      	mov	r5, r8
    ad2a:	e7ea      	b.n	ad02 <__udivmoddi4+0x282>
    ad2c:	462b      	mov	r3, r5
    ad2e:	e794      	b.n	ac5a <__udivmoddi4+0x1da>
    ad30:	4640      	mov	r0, r8
    ad32:	e7d1      	b.n	acd8 <__udivmoddi4+0x258>
    ad34:	46d0      	mov	r8, sl
    ad36:	e77b      	b.n	ac30 <__udivmoddi4+0x1b0>
    ad38:	3d02      	subs	r5, #2
    ad3a:	4462      	add	r2, ip
    ad3c:	e732      	b.n	aba4 <__udivmoddi4+0x124>
    ad3e:	4608      	mov	r0, r1
    ad40:	e70a      	b.n	ab58 <__udivmoddi4+0xd8>
    ad42:	4464      	add	r4, ip
    ad44:	3802      	subs	r0, #2
    ad46:	e742      	b.n	abce <__udivmoddi4+0x14e>

0000ad48 <__aeabi_idiv0>:
    ad48:	4770      	bx	lr
    ad4a:	bf00      	nop

0000ad4c <malloc>:
    ad4c:	4b02      	ldr	r3, [pc, #8]	; (ad58 <malloc+0xc>)
    ad4e:	4601      	mov	r1, r0
    ad50:	6818      	ldr	r0, [r3, #0]
    ad52:	f000 b80b 	b.w	ad6c <_malloc_r>
    ad56:	bf00      	nop
    ad58:	20008e74 	.word	0x20008e74

0000ad5c <free>:
    ad5c:	4b02      	ldr	r3, [pc, #8]	; (ad68 <free+0xc>)
    ad5e:	4601      	mov	r1, r0
    ad60:	6818      	ldr	r0, [r3, #0]
    ad62:	f002 bb7f 	b.w	d464 <_free_r>
    ad66:	bf00      	nop
    ad68:	20008e74 	.word	0x20008e74

0000ad6c <_malloc_r>:
    ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad70:	f101 060b 	add.w	r6, r1, #11
    ad74:	2e16      	cmp	r6, #22
    ad76:	b083      	sub	sp, #12
    ad78:	4604      	mov	r4, r0
    ad7a:	d824      	bhi.n	adc6 <_malloc_r+0x5a>
    ad7c:	2910      	cmp	r1, #16
    ad7e:	f200 80ba 	bhi.w	aef6 <_malloc_r+0x18a>
    ad82:	f000 faa3 	bl	b2cc <__malloc_lock>
    ad86:	2610      	movs	r6, #16
    ad88:	2218      	movs	r2, #24
    ad8a:	2002      	movs	r0, #2
    ad8c:	4fb5      	ldr	r7, [pc, #724]	; (b064 <_malloc_r+0x2f8>)
    ad8e:	443a      	add	r2, r7
    ad90:	f1a2 0108 	sub.w	r1, r2, #8
    ad94:	6853      	ldr	r3, [r2, #4]
    ad96:	428b      	cmp	r3, r1
    ad98:	f000 80ba 	beq.w	af10 <_malloc_r+0x1a4>
    ad9c:	685a      	ldr	r2, [r3, #4]
    ad9e:	68d9      	ldr	r1, [r3, #12]
    ada0:	f022 0203 	bic.w	r2, r2, #3
    ada4:	441a      	add	r2, r3
    ada6:	689d      	ldr	r5, [r3, #8]
    ada8:	60e9      	str	r1, [r5, #12]
    adaa:	608d      	str	r5, [r1, #8]
    adac:	6851      	ldr	r1, [r2, #4]
    adae:	f041 0101 	orr.w	r1, r1, #1
    adb2:	4620      	mov	r0, r4
    adb4:	6051      	str	r1, [r2, #4]
    adb6:	f103 0508 	add.w	r5, r3, #8
    adba:	f000 fa8d 	bl	b2d8 <__malloc_unlock>
    adbe:	4628      	mov	r0, r5
    adc0:	b003      	add	sp, #12
    adc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adc6:	f036 0607 	bics.w	r6, r6, #7
    adca:	f100 8094 	bmi.w	aef6 <_malloc_r+0x18a>
    adce:	42b1      	cmp	r1, r6
    add0:	f200 8091 	bhi.w	aef6 <_malloc_r+0x18a>
    add4:	f000 fa7a 	bl	b2cc <__malloc_lock>
    add8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    addc:	f0c0 819a 	bcc.w	b114 <_malloc_r+0x3a8>
    ade0:	0a73      	lsrs	r3, r6, #9
    ade2:	f000 808f 	beq.w	af04 <_malloc_r+0x198>
    ade6:	2b04      	cmp	r3, #4
    ade8:	f200 816f 	bhi.w	b0ca <_malloc_r+0x35e>
    adec:	09b3      	lsrs	r3, r6, #6
    adee:	f103 0039 	add.w	r0, r3, #57	; 0x39
    adf2:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    adf6:	00c3      	lsls	r3, r0, #3
    adf8:	4f9a      	ldr	r7, [pc, #616]	; (b064 <_malloc_r+0x2f8>)
    adfa:	443b      	add	r3, r7
    adfc:	f1a3 0508 	sub.w	r5, r3, #8
    ae00:	685b      	ldr	r3, [r3, #4]
    ae02:	429d      	cmp	r5, r3
    ae04:	d106      	bne.n	ae14 <_malloc_r+0xa8>
    ae06:	e00c      	b.n	ae22 <_malloc_r+0xb6>
    ae08:	2900      	cmp	r1, #0
    ae0a:	f280 8127 	bge.w	b05c <_malloc_r+0x2f0>
    ae0e:	68db      	ldr	r3, [r3, #12]
    ae10:	429d      	cmp	r5, r3
    ae12:	d006      	beq.n	ae22 <_malloc_r+0xb6>
    ae14:	685a      	ldr	r2, [r3, #4]
    ae16:	f022 0203 	bic.w	r2, r2, #3
    ae1a:	1b91      	subs	r1, r2, r6
    ae1c:	290f      	cmp	r1, #15
    ae1e:	ddf3      	ble.n	ae08 <_malloc_r+0x9c>
    ae20:	4660      	mov	r0, ip
    ae22:	693d      	ldr	r5, [r7, #16]
    ae24:	f8df c250 	ldr.w	ip, [pc, #592]	; b078 <_malloc_r+0x30c>
    ae28:	4565      	cmp	r5, ip
    ae2a:	d07c      	beq.n	af26 <_malloc_r+0x1ba>
    ae2c:	686a      	ldr	r2, [r5, #4]
    ae2e:	f022 0203 	bic.w	r2, r2, #3
    ae32:	1b93      	subs	r3, r2, r6
    ae34:	2b0f      	cmp	r3, #15
    ae36:	f300 817b 	bgt.w	b130 <_malloc_r+0x3c4>
    ae3a:	2b00      	cmp	r3, #0
    ae3c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    ae40:	f280 816c 	bge.w	b11c <_malloc_r+0x3b0>
    ae44:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    ae48:	f080 811a 	bcs.w	b080 <_malloc_r+0x314>
    ae4c:	08d3      	lsrs	r3, r2, #3
    ae4e:	6879      	ldr	r1, [r7, #4]
    ae50:	3301      	adds	r3, #1
    ae52:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    ae56:	2201      	movs	r2, #1
    ae58:	fa02 f20e 	lsl.w	r2, r2, lr
    ae5c:	430a      	orrs	r2, r1
    ae5e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    ae62:	f8c5 e008 	str.w	lr, [r5, #8]
    ae66:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    ae6a:	3908      	subs	r1, #8
    ae6c:	60e9      	str	r1, [r5, #12]
    ae6e:	607a      	str	r2, [r7, #4]
    ae70:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    ae74:	f8ce 500c 	str.w	r5, [lr, #12]
    ae78:	1083      	asrs	r3, r0, #2
    ae7a:	2101      	movs	r1, #1
    ae7c:	4099      	lsls	r1, r3
    ae7e:	4291      	cmp	r1, r2
    ae80:	d857      	bhi.n	af32 <_malloc_r+0x1c6>
    ae82:	4211      	tst	r1, r2
    ae84:	d106      	bne.n	ae94 <_malloc_r+0x128>
    ae86:	f020 0003 	bic.w	r0, r0, #3
    ae8a:	0049      	lsls	r1, r1, #1
    ae8c:	4211      	tst	r1, r2
    ae8e:	f100 0004 	add.w	r0, r0, #4
    ae92:	d0fa      	beq.n	ae8a <_malloc_r+0x11e>
    ae94:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    ae98:	464d      	mov	r5, r9
    ae9a:	4686      	mov	lr, r0
    ae9c:	f8d5 800c 	ldr.w	r8, [r5, #12]
    aea0:	4545      	cmp	r5, r8
    aea2:	d108      	bne.n	aeb6 <_malloc_r+0x14a>
    aea4:	e11d      	b.n	b0e2 <_malloc_r+0x376>
    aea6:	2b00      	cmp	r3, #0
    aea8:	f280 8124 	bge.w	b0f4 <_malloc_r+0x388>
    aeac:	f8d8 800c 	ldr.w	r8, [r8, #12]
    aeb0:	4545      	cmp	r5, r8
    aeb2:	f000 8116 	beq.w	b0e2 <_malloc_r+0x376>
    aeb6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    aeba:	f022 0203 	bic.w	r2, r2, #3
    aebe:	1b93      	subs	r3, r2, r6
    aec0:	2b0f      	cmp	r3, #15
    aec2:	ddf0      	ble.n	aea6 <_malloc_r+0x13a>
    aec4:	4620      	mov	r0, r4
    aec6:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    aeca:	eb08 0106 	add.w	r1, r8, r6
    aece:	f046 0601 	orr.w	r6, r6, #1
    aed2:	f8c8 6004 	str.w	r6, [r8, #4]
    aed6:	60ec      	str	r4, [r5, #12]
    aed8:	60a5      	str	r5, [r4, #8]
    aeda:	f043 0401 	orr.w	r4, r3, #1
    aede:	e9c7 1104 	strd	r1, r1, [r7, #16]
    aee2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    aee6:	604c      	str	r4, [r1, #4]
    aee8:	f848 3002 	str.w	r3, [r8, r2]
    aeec:	f000 f9f4 	bl	b2d8 <__malloc_unlock>
    aef0:	f108 0508 	add.w	r5, r8, #8
    aef4:	e002      	b.n	aefc <_malloc_r+0x190>
    aef6:	230c      	movs	r3, #12
    aef8:	6023      	str	r3, [r4, #0]
    aefa:	2500      	movs	r5, #0
    aefc:	4628      	mov	r0, r5
    aefe:	b003      	add	sp, #12
    af00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af04:	f44f 7300 	mov.w	r3, #512	; 0x200
    af08:	2040      	movs	r0, #64	; 0x40
    af0a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    af0e:	e773      	b.n	adf8 <_malloc_r+0x8c>
    af10:	68d3      	ldr	r3, [r2, #12]
    af12:	429a      	cmp	r2, r3
    af14:	bf08      	it	eq
    af16:	3002      	addeq	r0, #2
    af18:	f47f af40 	bne.w	ad9c <_malloc_r+0x30>
    af1c:	693d      	ldr	r5, [r7, #16]
    af1e:	f8df c158 	ldr.w	ip, [pc, #344]	; b078 <_malloc_r+0x30c>
    af22:	4565      	cmp	r5, ip
    af24:	d182      	bne.n	ae2c <_malloc_r+0xc0>
    af26:	687a      	ldr	r2, [r7, #4]
    af28:	1083      	asrs	r3, r0, #2
    af2a:	2101      	movs	r1, #1
    af2c:	4099      	lsls	r1, r3
    af2e:	4291      	cmp	r1, r2
    af30:	d9a7      	bls.n	ae82 <_malloc_r+0x116>
    af32:	68bd      	ldr	r5, [r7, #8]
    af34:	686b      	ldr	r3, [r5, #4]
    af36:	f023 0903 	bic.w	r9, r3, #3
    af3a:	454e      	cmp	r6, r9
    af3c:	d803      	bhi.n	af46 <_malloc_r+0x1da>
    af3e:	eba9 0306 	sub.w	r3, r9, r6
    af42:	2b0f      	cmp	r3, #15
    af44:	dc7a      	bgt.n	b03c <_malloc_r+0x2d0>
    af46:	f8df b134 	ldr.w	fp, [pc, #308]	; b07c <_malloc_r+0x310>
    af4a:	4b47      	ldr	r3, [pc, #284]	; (b068 <_malloc_r+0x2fc>)
    af4c:	f8db 2000 	ldr.w	r2, [fp]
    af50:	681b      	ldr	r3, [r3, #0]
    af52:	3201      	adds	r2, #1
    af54:	4433      	add	r3, r6
    af56:	eb05 0a09 	add.w	sl, r5, r9
    af5a:	f000 8133 	beq.w	b1c4 <_malloc_r+0x458>
    af5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    af62:	330f      	adds	r3, #15
    af64:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    af68:	f028 080f 	bic.w	r8, r8, #15
    af6c:	4641      	mov	r1, r8
    af6e:	4620      	mov	r0, r4
    af70:	f001 ff32 	bl	cdd8 <_sbrk_r>
    af74:	1c41      	adds	r1, r0, #1
    af76:	4602      	mov	r2, r0
    af78:	f000 80f3 	beq.w	b162 <_malloc_r+0x3f6>
    af7c:	4582      	cmp	sl, r0
    af7e:	f200 80ee 	bhi.w	b15e <_malloc_r+0x3f2>
    af82:	4b3a      	ldr	r3, [pc, #232]	; (b06c <_malloc_r+0x300>)
    af84:	6819      	ldr	r1, [r3, #0]
    af86:	4441      	add	r1, r8
    af88:	6019      	str	r1, [r3, #0]
    af8a:	4608      	mov	r0, r1
    af8c:	f000 814e 	beq.w	b22c <_malloc_r+0x4c0>
    af90:	f8db 1000 	ldr.w	r1, [fp]
    af94:	9301      	str	r3, [sp, #4]
    af96:	3101      	adds	r1, #1
    af98:	bf1b      	ittet	ne
    af9a:	eba2 010a 	subne.w	r1, r2, sl
    af9e:	1809      	addne	r1, r1, r0
    afa0:	f8cb 2000 	streq.w	r2, [fp]
    afa4:	6019      	strne	r1, [r3, #0]
    afa6:	f012 0b07 	ands.w	fp, r2, #7
    afaa:	f000 8117 	beq.w	b1dc <_malloc_r+0x470>
    afae:	f1cb 0108 	rsb	r1, fp, #8
    afb2:	440a      	add	r2, r1
    afb4:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    afb8:	4490      	add	r8, r2
    afba:	3108      	adds	r1, #8
    afbc:	eba1 0108 	sub.w	r1, r1, r8
    afc0:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    afc4:	4651      	mov	r1, sl
    afc6:	4620      	mov	r0, r4
    afc8:	9200      	str	r2, [sp, #0]
    afca:	f001 ff05 	bl	cdd8 <_sbrk_r>
    afce:	1c42      	adds	r2, r0, #1
    afd0:	e9dd 2300 	ldrd	r2, r3, [sp]
    afd4:	f000 814f 	beq.w	b276 <_malloc_r+0x50a>
    afd8:	1a80      	subs	r0, r0, r2
    afda:	eb00 080a 	add.w	r8, r0, sl
    afde:	6819      	ldr	r1, [r3, #0]
    afe0:	60ba      	str	r2, [r7, #8]
    afe2:	f048 0001 	orr.w	r0, r8, #1
    afe6:	4451      	add	r1, sl
    afe8:	42bd      	cmp	r5, r7
    afea:	6050      	str	r0, [r2, #4]
    afec:	6019      	str	r1, [r3, #0]
    afee:	f000 8129 	beq.w	b244 <_malloc_r+0x4d8>
    aff2:	f1b9 0f0f 	cmp.w	r9, #15
    aff6:	f240 8127 	bls.w	b248 <_malloc_r+0x4dc>
    affa:	6868      	ldr	r0, [r5, #4]
    affc:	f1a9 0c0c 	sub.w	ip, r9, #12
    b000:	f02c 0c07 	bic.w	ip, ip, #7
    b004:	f000 0001 	and.w	r0, r0, #1
    b008:	ea40 000c 	orr.w	r0, r0, ip
    b00c:	6068      	str	r0, [r5, #4]
    b00e:	f04f 0e05 	mov.w	lr, #5
    b012:	eb05 000c 	add.w	r0, r5, ip
    b016:	f1bc 0f0f 	cmp.w	ip, #15
    b01a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    b01e:	f200 8132 	bhi.w	b286 <_malloc_r+0x51a>
    b022:	6850      	ldr	r0, [r2, #4]
    b024:	4615      	mov	r5, r2
    b026:	4b12      	ldr	r3, [pc, #72]	; (b070 <_malloc_r+0x304>)
    b028:	681a      	ldr	r2, [r3, #0]
    b02a:	428a      	cmp	r2, r1
    b02c:	bf38      	it	cc
    b02e:	6019      	strcc	r1, [r3, #0]
    b030:	4b10      	ldr	r3, [pc, #64]	; (b074 <_malloc_r+0x308>)
    b032:	681a      	ldr	r2, [r3, #0]
    b034:	428a      	cmp	r2, r1
    b036:	bf38      	it	cc
    b038:	6019      	strcc	r1, [r3, #0]
    b03a:	e094      	b.n	b166 <_malloc_r+0x3fa>
    b03c:	19aa      	adds	r2, r5, r6
    b03e:	f043 0301 	orr.w	r3, r3, #1
    b042:	f046 0601 	orr.w	r6, r6, #1
    b046:	606e      	str	r6, [r5, #4]
    b048:	4620      	mov	r0, r4
    b04a:	60ba      	str	r2, [r7, #8]
    b04c:	6053      	str	r3, [r2, #4]
    b04e:	f000 f943 	bl	b2d8 <__malloc_unlock>
    b052:	3508      	adds	r5, #8
    b054:	4628      	mov	r0, r5
    b056:	b003      	add	sp, #12
    b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b05c:	68d9      	ldr	r1, [r3, #12]
    b05e:	441a      	add	r2, r3
    b060:	e6a1      	b.n	ada6 <_malloc_r+0x3a>
    b062:	bf00      	nop
    b064:	20008a58 	.word	0x20008a58
    b068:	2002036c 	.word	0x2002036c
    b06c:	2002033c 	.word	0x2002033c
    b070:	20020364 	.word	0x20020364
    b074:	20020368 	.word	0x20020368
    b078:	20008a60 	.word	0x20008a60
    b07c:	20008e60 	.word	0x20008e60
    b080:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    b084:	ea4f 2352 	mov.w	r3, r2, lsr #9
    b088:	d363      	bcc.n	b152 <_malloc_r+0x3e6>
    b08a:	2b14      	cmp	r3, #20
    b08c:	f200 80b7 	bhi.w	b1fe <_malloc_r+0x492>
    b090:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    b094:	00c9      	lsls	r1, r1, #3
    b096:	335b      	adds	r3, #91	; 0x5b
    b098:	eb07 0e01 	add.w	lr, r7, r1
    b09c:	5879      	ldr	r1, [r7, r1]
    b09e:	f1ae 0e08 	sub.w	lr, lr, #8
    b0a2:	458e      	cmp	lr, r1
    b0a4:	f000 8091 	beq.w	b1ca <_malloc_r+0x45e>
    b0a8:	684b      	ldr	r3, [r1, #4]
    b0aa:	f023 0303 	bic.w	r3, r3, #3
    b0ae:	4293      	cmp	r3, r2
    b0b0:	d902      	bls.n	b0b8 <_malloc_r+0x34c>
    b0b2:	6889      	ldr	r1, [r1, #8]
    b0b4:	458e      	cmp	lr, r1
    b0b6:	d1f7      	bne.n	b0a8 <_malloc_r+0x33c>
    b0b8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    b0bc:	687a      	ldr	r2, [r7, #4]
    b0be:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    b0c2:	f8ce 5008 	str.w	r5, [lr, #8]
    b0c6:	60cd      	str	r5, [r1, #12]
    b0c8:	e6d6      	b.n	ae78 <_malloc_r+0x10c>
    b0ca:	2b14      	cmp	r3, #20
    b0cc:	d959      	bls.n	b182 <_malloc_r+0x416>
    b0ce:	2b54      	cmp	r3, #84	; 0x54
    b0d0:	f200 809d 	bhi.w	b20e <_malloc_r+0x4a2>
    b0d4:	0b33      	lsrs	r3, r6, #12
    b0d6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    b0da:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    b0de:	00c3      	lsls	r3, r0, #3
    b0e0:	e68a      	b.n	adf8 <_malloc_r+0x8c>
    b0e2:	f10e 0e01 	add.w	lr, lr, #1
    b0e6:	f01e 0f03 	tst.w	lr, #3
    b0ea:	f105 0508 	add.w	r5, r5, #8
    b0ee:	f47f aed5 	bne.w	ae9c <_malloc_r+0x130>
    b0f2:	e051      	b.n	b198 <_malloc_r+0x42c>
    b0f4:	4442      	add	r2, r8
    b0f6:	4645      	mov	r5, r8
    b0f8:	6853      	ldr	r3, [r2, #4]
    b0fa:	f8d8 100c 	ldr.w	r1, [r8, #12]
    b0fe:	f043 0301 	orr.w	r3, r3, #1
    b102:	6053      	str	r3, [r2, #4]
    b104:	f855 3f08 	ldr.w	r3, [r5, #8]!
    b108:	4620      	mov	r0, r4
    b10a:	60d9      	str	r1, [r3, #12]
    b10c:	608b      	str	r3, [r1, #8]
    b10e:	f000 f8e3 	bl	b2d8 <__malloc_unlock>
    b112:	e6f3      	b.n	aefc <_malloc_r+0x190>
    b114:	08f0      	lsrs	r0, r6, #3
    b116:	f106 0208 	add.w	r2, r6, #8
    b11a:	e637      	b.n	ad8c <_malloc_r+0x20>
    b11c:	442a      	add	r2, r5
    b11e:	4620      	mov	r0, r4
    b120:	6853      	ldr	r3, [r2, #4]
    b122:	f043 0301 	orr.w	r3, r3, #1
    b126:	6053      	str	r3, [r2, #4]
    b128:	3508      	adds	r5, #8
    b12a:	f000 f8d5 	bl	b2d8 <__malloc_unlock>
    b12e:	e6e5      	b.n	aefc <_malloc_r+0x190>
    b130:	19a9      	adds	r1, r5, r6
    b132:	4620      	mov	r0, r4
    b134:	f046 0601 	orr.w	r6, r6, #1
    b138:	f043 0401 	orr.w	r4, r3, #1
    b13c:	606e      	str	r6, [r5, #4]
    b13e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    b142:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    b146:	604c      	str	r4, [r1, #4]
    b148:	50ab      	str	r3, [r5, r2]
    b14a:	f000 f8c5 	bl	b2d8 <__malloc_unlock>
    b14e:	3508      	adds	r5, #8
    b150:	e6d4      	b.n	aefc <_malloc_r+0x190>
    b152:	0993      	lsrs	r3, r2, #6
    b154:	f103 0139 	add.w	r1, r3, #57	; 0x39
    b158:	00c9      	lsls	r1, r1, #3
    b15a:	3338      	adds	r3, #56	; 0x38
    b15c:	e79c      	b.n	b098 <_malloc_r+0x32c>
    b15e:	42bd      	cmp	r5, r7
    b160:	d05f      	beq.n	b222 <_malloc_r+0x4b6>
    b162:	68bd      	ldr	r5, [r7, #8]
    b164:	6868      	ldr	r0, [r5, #4]
    b166:	f020 0803 	bic.w	r8, r0, #3
    b16a:	4546      	cmp	r6, r8
    b16c:	eba8 0306 	sub.w	r3, r8, r6
    b170:	d802      	bhi.n	b178 <_malloc_r+0x40c>
    b172:	2b0f      	cmp	r3, #15
    b174:	f73f af62 	bgt.w	b03c <_malloc_r+0x2d0>
    b178:	4620      	mov	r0, r4
    b17a:	f000 f8ad 	bl	b2d8 <__malloc_unlock>
    b17e:	2500      	movs	r5, #0
    b180:	e6bc      	b.n	aefc <_malloc_r+0x190>
    b182:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    b186:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    b18a:	00c3      	lsls	r3, r0, #3
    b18c:	e634      	b.n	adf8 <_malloc_r+0x8c>
    b18e:	f859 3908 	ldr.w	r3, [r9], #-8
    b192:	454b      	cmp	r3, r9
    b194:	f040 8096 	bne.w	b2c4 <_malloc_r+0x558>
    b198:	f010 0f03 	tst.w	r0, #3
    b19c:	f100 30ff 	add.w	r0, r0, #4294967295
    b1a0:	d1f5      	bne.n	b18e <_malloc_r+0x422>
    b1a2:	687b      	ldr	r3, [r7, #4]
    b1a4:	ea23 0301 	bic.w	r3, r3, r1
    b1a8:	607b      	str	r3, [r7, #4]
    b1aa:	0049      	lsls	r1, r1, #1
    b1ac:	4299      	cmp	r1, r3
    b1ae:	f63f aec0 	bhi.w	af32 <_malloc_r+0x1c6>
    b1b2:	b919      	cbnz	r1, b1bc <_malloc_r+0x450>
    b1b4:	e6bd      	b.n	af32 <_malloc_r+0x1c6>
    b1b6:	0049      	lsls	r1, r1, #1
    b1b8:	f10e 0e04 	add.w	lr, lr, #4
    b1bc:	4219      	tst	r1, r3
    b1be:	d0fa      	beq.n	b1b6 <_malloc_r+0x44a>
    b1c0:	4670      	mov	r0, lr
    b1c2:	e667      	b.n	ae94 <_malloc_r+0x128>
    b1c4:	f103 0810 	add.w	r8, r3, #16
    b1c8:	e6d0      	b.n	af6c <_malloc_r+0x200>
    b1ca:	109a      	asrs	r2, r3, #2
    b1cc:	f04f 0801 	mov.w	r8, #1
    b1d0:	687b      	ldr	r3, [r7, #4]
    b1d2:	fa08 f202 	lsl.w	r2, r8, r2
    b1d6:	431a      	orrs	r2, r3
    b1d8:	607a      	str	r2, [r7, #4]
    b1da:	e770      	b.n	b0be <_malloc_r+0x352>
    b1dc:	eb02 0108 	add.w	r1, r2, r8
    b1e0:	4249      	negs	r1, r1
    b1e2:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    b1e6:	4651      	mov	r1, sl
    b1e8:	4620      	mov	r0, r4
    b1ea:	9200      	str	r2, [sp, #0]
    b1ec:	f001 fdf4 	bl	cdd8 <_sbrk_r>
    b1f0:	1c43      	adds	r3, r0, #1
    b1f2:	e9dd 2300 	ldrd	r2, r3, [sp]
    b1f6:	f47f aeef 	bne.w	afd8 <_malloc_r+0x26c>
    b1fa:	46da      	mov	sl, fp
    b1fc:	e6ef      	b.n	afde <_malloc_r+0x272>
    b1fe:	2b54      	cmp	r3, #84	; 0x54
    b200:	d825      	bhi.n	b24e <_malloc_r+0x4e2>
    b202:	0b13      	lsrs	r3, r2, #12
    b204:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    b208:	00c9      	lsls	r1, r1, #3
    b20a:	336e      	adds	r3, #110	; 0x6e
    b20c:	e744      	b.n	b098 <_malloc_r+0x32c>
    b20e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    b212:	d825      	bhi.n	b260 <_malloc_r+0x4f4>
    b214:	0bf3      	lsrs	r3, r6, #15
    b216:	f103 0078 	add.w	r0, r3, #120	; 0x78
    b21a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    b21e:	00c3      	lsls	r3, r0, #3
    b220:	e5ea      	b.n	adf8 <_malloc_r+0x8c>
    b222:	4b29      	ldr	r3, [pc, #164]	; (b2c8 <_malloc_r+0x55c>)
    b224:	6818      	ldr	r0, [r3, #0]
    b226:	4440      	add	r0, r8
    b228:	6018      	str	r0, [r3, #0]
    b22a:	e6b1      	b.n	af90 <_malloc_r+0x224>
    b22c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    b230:	f1bc 0f00 	cmp.w	ip, #0
    b234:	f47f aeac 	bne.w	af90 <_malloc_r+0x224>
    b238:	68bd      	ldr	r5, [r7, #8]
    b23a:	44c8      	add	r8, r9
    b23c:	f048 0001 	orr.w	r0, r8, #1
    b240:	6068      	str	r0, [r5, #4]
    b242:	e6f0      	b.n	b026 <_malloc_r+0x2ba>
    b244:	4615      	mov	r5, r2
    b246:	e6ee      	b.n	b026 <_malloc_r+0x2ba>
    b248:	2301      	movs	r3, #1
    b24a:	6053      	str	r3, [r2, #4]
    b24c:	e794      	b.n	b178 <_malloc_r+0x40c>
    b24e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    b252:	d823      	bhi.n	b29c <_malloc_r+0x530>
    b254:	0bd3      	lsrs	r3, r2, #15
    b256:	f103 0178 	add.w	r1, r3, #120	; 0x78
    b25a:	00c9      	lsls	r1, r1, #3
    b25c:	3377      	adds	r3, #119	; 0x77
    b25e:	e71b      	b.n	b098 <_malloc_r+0x32c>
    b260:	f240 5254 	movw	r2, #1364	; 0x554
    b264:	4293      	cmp	r3, r2
    b266:	d823      	bhi.n	b2b0 <_malloc_r+0x544>
    b268:	0cb3      	lsrs	r3, r6, #18
    b26a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    b26e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    b272:	00c3      	lsls	r3, r0, #3
    b274:	e5c0      	b.n	adf8 <_malloc_r+0x8c>
    b276:	f1ab 0b08 	sub.w	fp, fp, #8
    b27a:	44d8      	add	r8, fp
    b27c:	eba8 0802 	sub.w	r8, r8, r2
    b280:	f04f 0a00 	mov.w	sl, #0
    b284:	e6ab      	b.n	afde <_malloc_r+0x272>
    b286:	f105 0108 	add.w	r1, r5, #8
    b28a:	4620      	mov	r0, r4
    b28c:	9300      	str	r3, [sp, #0]
    b28e:	f002 f8e9 	bl	d464 <_free_r>
    b292:	68bd      	ldr	r5, [r7, #8]
    b294:	9b00      	ldr	r3, [sp, #0]
    b296:	6868      	ldr	r0, [r5, #4]
    b298:	6819      	ldr	r1, [r3, #0]
    b29a:	e6c4      	b.n	b026 <_malloc_r+0x2ba>
    b29c:	f240 5154 	movw	r1, #1364	; 0x554
    b2a0:	428b      	cmp	r3, r1
    b2a2:	d80b      	bhi.n	b2bc <_malloc_r+0x550>
    b2a4:	0c93      	lsrs	r3, r2, #18
    b2a6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    b2aa:	00c9      	lsls	r1, r1, #3
    b2ac:	337c      	adds	r3, #124	; 0x7c
    b2ae:	e6f3      	b.n	b098 <_malloc_r+0x32c>
    b2b0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    b2b4:	207f      	movs	r0, #127	; 0x7f
    b2b6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    b2ba:	e59d      	b.n	adf8 <_malloc_r+0x8c>
    b2bc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    b2c0:	237e      	movs	r3, #126	; 0x7e
    b2c2:	e6e9      	b.n	b098 <_malloc_r+0x32c>
    b2c4:	687b      	ldr	r3, [r7, #4]
    b2c6:	e770      	b.n	b1aa <_malloc_r+0x43e>
    b2c8:	2002033c 	.word	0x2002033c

0000b2cc <__malloc_lock>:
    b2cc:	4801      	ldr	r0, [pc, #4]	; (b2d4 <__malloc_lock+0x8>)
    b2ce:	f001 bdd9 	b.w	ce84 <__retarget_lock_acquire_recursive>
    b2d2:	bf00      	nop
    b2d4:	20020334 	.word	0x20020334

0000b2d8 <__malloc_unlock>:
    b2d8:	4801      	ldr	r0, [pc, #4]	; (b2e0 <__malloc_unlock+0x8>)
    b2da:	f001 bdd5 	b.w	ce88 <__retarget_lock_release_recursive>
    b2de:	bf00      	nop
    b2e0:	20020334 	.word	0x20020334

0000b2e4 <realloc>:
    b2e4:	b410      	push	{r4}
    b2e6:	4c04      	ldr	r4, [pc, #16]	; (b2f8 <realloc+0x14>)
    b2e8:	4603      	mov	r3, r0
    b2ea:	460a      	mov	r2, r1
    b2ec:	6820      	ldr	r0, [r4, #0]
    b2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    b2f2:	4619      	mov	r1, r3
    b2f4:	f000 b802 	b.w	b2fc <_realloc_r>
    b2f8:	20008e74 	.word	0x20008e74

0000b2fc <_realloc_r>:
    b2fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b300:	4617      	mov	r7, r2
    b302:	2900      	cmp	r1, #0
    b304:	f000 8098 	beq.w	b438 <_realloc_r+0x13c>
    b308:	460c      	mov	r4, r1
    b30a:	f107 050b 	add.w	r5, r7, #11
    b30e:	4680      	mov	r8, r0
    b310:	f7ff ffdc 	bl	b2cc <__malloc_lock>
    b314:	2d16      	cmp	r5, #22
    b316:	f854 1c04 	ldr.w	r1, [r4, #-4]
    b31a:	d85b      	bhi.n	b3d4 <_realloc_r+0xd8>
    b31c:	2510      	movs	r5, #16
    b31e:	462a      	mov	r2, r5
    b320:	42af      	cmp	r7, r5
    b322:	d85c      	bhi.n	b3de <_realloc_r+0xe2>
    b324:	f021 0603 	bic.w	r6, r1, #3
    b328:	4296      	cmp	r6, r2
    b32a:	f1a4 0908 	sub.w	r9, r4, #8
    b32e:	da62      	bge.n	b3f6 <_realloc_r+0xfa>
    b330:	4bbc      	ldr	r3, [pc, #752]	; (b624 <_realloc_r+0x328>)
    b332:	f8d3 c008 	ldr.w	ip, [r3, #8]
    b336:	eb09 0006 	add.w	r0, r9, r6
    b33a:	4584      	cmp	ip, r0
    b33c:	f000 8097 	beq.w	b46e <_realloc_r+0x172>
    b340:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b344:	f02c 0301 	bic.w	r3, ip, #1
    b348:	4403      	add	r3, r0
    b34a:	685b      	ldr	r3, [r3, #4]
    b34c:	07db      	lsls	r3, r3, #31
    b34e:	d468      	bmi.n	b422 <_realloc_r+0x126>
    b350:	f02c 0c03 	bic.w	ip, ip, #3
    b354:	eb06 030c 	add.w	r3, r6, ip
    b358:	4293      	cmp	r3, r2
    b35a:	da47      	bge.n	b3ec <_realloc_r+0xf0>
    b35c:	07cb      	lsls	r3, r1, #31
    b35e:	d410      	bmi.n	b382 <_realloc_r+0x86>
    b360:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b364:	eba9 0a03 	sub.w	sl, r9, r3
    b368:	f8da 3004 	ldr.w	r3, [sl, #4]
    b36c:	f023 0103 	bic.w	r1, r3, #3
    b370:	448c      	add	ip, r1
    b372:	44b4      	add	ip, r6
    b374:	4594      	cmp	ip, r2
    b376:	f280 8111 	bge.w	b59c <_realloc_r+0x2a0>
    b37a:	1873      	adds	r3, r6, r1
    b37c:	4293      	cmp	r3, r2
    b37e:	f280 80e8 	bge.w	b552 <_realloc_r+0x256>
    b382:	4639      	mov	r1, r7
    b384:	4640      	mov	r0, r8
    b386:	f7ff fcf1 	bl	ad6c <_malloc_r>
    b38a:	4607      	mov	r7, r0
    b38c:	b1e0      	cbz	r0, b3c8 <_realloc_r+0xcc>
    b38e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b392:	f023 0301 	bic.w	r3, r3, #1
    b396:	444b      	add	r3, r9
    b398:	f1a0 0208 	sub.w	r2, r0, #8
    b39c:	4293      	cmp	r3, r2
    b39e:	f000 80d2 	beq.w	b546 <_realloc_r+0x24a>
    b3a2:	1f32      	subs	r2, r6, #4
    b3a4:	2a24      	cmp	r2, #36	; 0x24
    b3a6:	f200 80f5 	bhi.w	b594 <_realloc_r+0x298>
    b3aa:	2a13      	cmp	r2, #19
    b3ac:	f200 80ac 	bhi.w	b508 <_realloc_r+0x20c>
    b3b0:	4603      	mov	r3, r0
    b3b2:	4622      	mov	r2, r4
    b3b4:	6811      	ldr	r1, [r2, #0]
    b3b6:	6019      	str	r1, [r3, #0]
    b3b8:	6851      	ldr	r1, [r2, #4]
    b3ba:	6059      	str	r1, [r3, #4]
    b3bc:	6892      	ldr	r2, [r2, #8]
    b3be:	609a      	str	r2, [r3, #8]
    b3c0:	4621      	mov	r1, r4
    b3c2:	4640      	mov	r0, r8
    b3c4:	f002 f84e 	bl	d464 <_free_r>
    b3c8:	4640      	mov	r0, r8
    b3ca:	f7ff ff85 	bl	b2d8 <__malloc_unlock>
    b3ce:	4638      	mov	r0, r7
    b3d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3d4:	f025 0507 	bic.w	r5, r5, #7
    b3d8:	2d00      	cmp	r5, #0
    b3da:	462a      	mov	r2, r5
    b3dc:	daa0      	bge.n	b320 <_realloc_r+0x24>
    b3de:	230c      	movs	r3, #12
    b3e0:	f8c8 3000 	str.w	r3, [r8]
    b3e4:	2700      	movs	r7, #0
    b3e6:	4638      	mov	r0, r7
    b3e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3ec:	461e      	mov	r6, r3
    b3ee:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    b3f2:	60d3      	str	r3, [r2, #12]
    b3f4:	609a      	str	r2, [r3, #8]
    b3f6:	1b73      	subs	r3, r6, r5
    b3f8:	2b0f      	cmp	r3, #15
    b3fa:	d822      	bhi.n	b442 <_realloc_r+0x146>
    b3fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
    b400:	f003 0301 	and.w	r3, r3, #1
    b404:	4333      	orrs	r3, r6
    b406:	444e      	add	r6, r9
    b408:	f8c9 3004 	str.w	r3, [r9, #4]
    b40c:	6873      	ldr	r3, [r6, #4]
    b40e:	f043 0301 	orr.w	r3, r3, #1
    b412:	6073      	str	r3, [r6, #4]
    b414:	4640      	mov	r0, r8
    b416:	4627      	mov	r7, r4
    b418:	f7ff ff5e 	bl	b2d8 <__malloc_unlock>
    b41c:	4638      	mov	r0, r7
    b41e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b422:	07c9      	lsls	r1, r1, #31
    b424:	d4ad      	bmi.n	b382 <_realloc_r+0x86>
    b426:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b42a:	eba9 0a03 	sub.w	sl, r9, r3
    b42e:	f8da 1004 	ldr.w	r1, [sl, #4]
    b432:	f021 0103 	bic.w	r1, r1, #3
    b436:	e7a0      	b.n	b37a <_realloc_r+0x7e>
    b438:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b43c:	4611      	mov	r1, r2
    b43e:	f7ff bc95 	b.w	ad6c <_malloc_r>
    b442:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b446:	eb09 0105 	add.w	r1, r9, r5
    b44a:	f002 0201 	and.w	r2, r2, #1
    b44e:	444e      	add	r6, r9
    b450:	f043 0301 	orr.w	r3, r3, #1
    b454:	432a      	orrs	r2, r5
    b456:	f8c9 2004 	str.w	r2, [r9, #4]
    b45a:	604b      	str	r3, [r1, #4]
    b45c:	6873      	ldr	r3, [r6, #4]
    b45e:	f043 0301 	orr.w	r3, r3, #1
    b462:	3108      	adds	r1, #8
    b464:	6073      	str	r3, [r6, #4]
    b466:	4640      	mov	r0, r8
    b468:	f001 fffc 	bl	d464 <_free_r>
    b46c:	e7d2      	b.n	b414 <_realloc_r+0x118>
    b46e:	f8dc 0004 	ldr.w	r0, [ip, #4]
    b472:	f020 0b03 	bic.w	fp, r0, #3
    b476:	eb06 0c0b 	add.w	ip, r6, fp
    b47a:	f105 0010 	add.w	r0, r5, #16
    b47e:	4584      	cmp	ip, r0
    b480:	da4d      	bge.n	b51e <_realloc_r+0x222>
    b482:	07c9      	lsls	r1, r1, #31
    b484:	f53f af7d 	bmi.w	b382 <_realloc_r+0x86>
    b488:	f854 1c08 	ldr.w	r1, [r4, #-8]
    b48c:	eba9 0a01 	sub.w	sl, r9, r1
    b490:	f8da 1004 	ldr.w	r1, [sl, #4]
    b494:	f021 0103 	bic.w	r1, r1, #3
    b498:	448b      	add	fp, r1
    b49a:	44b3      	add	fp, r6
    b49c:	4558      	cmp	r0, fp
    b49e:	f73f af6c 	bgt.w	b37a <_realloc_r+0x7e>
    b4a2:	4657      	mov	r7, sl
    b4a4:	f8da 100c 	ldr.w	r1, [sl, #12]
    b4a8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b4ac:	1f32      	subs	r2, r6, #4
    b4ae:	2a24      	cmp	r2, #36	; 0x24
    b4b0:	60c1      	str	r1, [r0, #12]
    b4b2:	6088      	str	r0, [r1, #8]
    b4b4:	f200 80db 	bhi.w	b66e <_realloc_r+0x372>
    b4b8:	2a13      	cmp	r2, #19
    b4ba:	f240 80d6 	bls.w	b66a <_realloc_r+0x36e>
    b4be:	6821      	ldr	r1, [r4, #0]
    b4c0:	f8ca 1008 	str.w	r1, [sl, #8]
    b4c4:	6861      	ldr	r1, [r4, #4]
    b4c6:	f8ca 100c 	str.w	r1, [sl, #12]
    b4ca:	2a1b      	cmp	r2, #27
    b4cc:	f200 80df 	bhi.w	b68e <_realloc_r+0x392>
    b4d0:	3408      	adds	r4, #8
    b4d2:	f10a 0210 	add.w	r2, sl, #16
    b4d6:	6821      	ldr	r1, [r4, #0]
    b4d8:	6011      	str	r1, [r2, #0]
    b4da:	6861      	ldr	r1, [r4, #4]
    b4dc:	6051      	str	r1, [r2, #4]
    b4de:	68a1      	ldr	r1, [r4, #8]
    b4e0:	6091      	str	r1, [r2, #8]
    b4e2:	eb0a 0105 	add.w	r1, sl, r5
    b4e6:	ebab 0205 	sub.w	r2, fp, r5
    b4ea:	f042 0201 	orr.w	r2, r2, #1
    b4ee:	6099      	str	r1, [r3, #8]
    b4f0:	604a      	str	r2, [r1, #4]
    b4f2:	f8da 3004 	ldr.w	r3, [sl, #4]
    b4f6:	f003 0301 	and.w	r3, r3, #1
    b4fa:	432b      	orrs	r3, r5
    b4fc:	4640      	mov	r0, r8
    b4fe:	f8ca 3004 	str.w	r3, [sl, #4]
    b502:	f7ff fee9 	bl	b2d8 <__malloc_unlock>
    b506:	e76e      	b.n	b3e6 <_realloc_r+0xea>
    b508:	6823      	ldr	r3, [r4, #0]
    b50a:	6003      	str	r3, [r0, #0]
    b50c:	6863      	ldr	r3, [r4, #4]
    b50e:	6043      	str	r3, [r0, #4]
    b510:	2a1b      	cmp	r2, #27
    b512:	d868      	bhi.n	b5e6 <_realloc_r+0x2ea>
    b514:	f104 0208 	add.w	r2, r4, #8
    b518:	f100 0308 	add.w	r3, r0, #8
    b51c:	e74a      	b.n	b3b4 <_realloc_r+0xb8>
    b51e:	eb09 0205 	add.w	r2, r9, r5
    b522:	609a      	str	r2, [r3, #8]
    b524:	ebac 0305 	sub.w	r3, ip, r5
    b528:	f043 0301 	orr.w	r3, r3, #1
    b52c:	6053      	str	r3, [r2, #4]
    b52e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b532:	f003 0301 	and.w	r3, r3, #1
    b536:	432b      	orrs	r3, r5
    b538:	4640      	mov	r0, r8
    b53a:	f844 3c04 	str.w	r3, [r4, #-4]
    b53e:	f7ff fecb 	bl	b2d8 <__malloc_unlock>
    b542:	4627      	mov	r7, r4
    b544:	e74f      	b.n	b3e6 <_realloc_r+0xea>
    b546:	f850 3c04 	ldr.w	r3, [r0, #-4]
    b54a:	f023 0303 	bic.w	r3, r3, #3
    b54e:	441e      	add	r6, r3
    b550:	e751      	b.n	b3f6 <_realloc_r+0xfa>
    b552:	4657      	mov	r7, sl
    b554:	f8da 100c 	ldr.w	r1, [sl, #12]
    b558:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b55c:	1f32      	subs	r2, r6, #4
    b55e:	2a24      	cmp	r2, #36	; 0x24
    b560:	60c1      	str	r1, [r0, #12]
    b562:	6088      	str	r0, [r1, #8]
    b564:	d84c      	bhi.n	b600 <_realloc_r+0x304>
    b566:	2a13      	cmp	r2, #19
    b568:	d948      	bls.n	b5fc <_realloc_r+0x300>
    b56a:	6821      	ldr	r1, [r4, #0]
    b56c:	f8ca 1008 	str.w	r1, [sl, #8]
    b570:	6861      	ldr	r1, [r4, #4]
    b572:	f8ca 100c 	str.w	r1, [sl, #12]
    b576:	2a1b      	cmp	r2, #27
    b578:	d856      	bhi.n	b628 <_realloc_r+0x32c>
    b57a:	3408      	adds	r4, #8
    b57c:	f10a 0210 	add.w	r2, sl, #16
    b580:	461e      	mov	r6, r3
    b582:	6823      	ldr	r3, [r4, #0]
    b584:	6013      	str	r3, [r2, #0]
    b586:	6863      	ldr	r3, [r4, #4]
    b588:	6053      	str	r3, [r2, #4]
    b58a:	68a3      	ldr	r3, [r4, #8]
    b58c:	6093      	str	r3, [r2, #8]
    b58e:	46d1      	mov	r9, sl
    b590:	463c      	mov	r4, r7
    b592:	e730      	b.n	b3f6 <_realloc_r+0xfa>
    b594:	4621      	mov	r1, r4
    b596:	f001 fa95 	bl	cac4 <memmove>
    b59a:	e711      	b.n	b3c0 <_realloc_r+0xc4>
    b59c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    b5a0:	4657      	mov	r7, sl
    b5a2:	60cb      	str	r3, [r1, #12]
    b5a4:	6099      	str	r1, [r3, #8]
    b5a6:	f857 1f08 	ldr.w	r1, [r7, #8]!
    b5aa:	f8da 300c 	ldr.w	r3, [sl, #12]
    b5ae:	60cb      	str	r3, [r1, #12]
    b5b0:	1f32      	subs	r2, r6, #4
    b5b2:	2a24      	cmp	r2, #36	; 0x24
    b5b4:	6099      	str	r1, [r3, #8]
    b5b6:	d82d      	bhi.n	b614 <_realloc_r+0x318>
    b5b8:	2a13      	cmp	r2, #19
    b5ba:	d929      	bls.n	b610 <_realloc_r+0x314>
    b5bc:	6823      	ldr	r3, [r4, #0]
    b5be:	f8ca 3008 	str.w	r3, [sl, #8]
    b5c2:	6863      	ldr	r3, [r4, #4]
    b5c4:	f8ca 300c 	str.w	r3, [sl, #12]
    b5c8:	2a1b      	cmp	r2, #27
    b5ca:	d842      	bhi.n	b652 <_realloc_r+0x356>
    b5cc:	3408      	adds	r4, #8
    b5ce:	f10a 0310 	add.w	r3, sl, #16
    b5d2:	6822      	ldr	r2, [r4, #0]
    b5d4:	601a      	str	r2, [r3, #0]
    b5d6:	6862      	ldr	r2, [r4, #4]
    b5d8:	605a      	str	r2, [r3, #4]
    b5da:	68a2      	ldr	r2, [r4, #8]
    b5dc:	609a      	str	r2, [r3, #8]
    b5de:	4666      	mov	r6, ip
    b5e0:	46d1      	mov	r9, sl
    b5e2:	463c      	mov	r4, r7
    b5e4:	e707      	b.n	b3f6 <_realloc_r+0xfa>
    b5e6:	68a3      	ldr	r3, [r4, #8]
    b5e8:	6083      	str	r3, [r0, #8]
    b5ea:	68e3      	ldr	r3, [r4, #12]
    b5ec:	60c3      	str	r3, [r0, #12]
    b5ee:	2a24      	cmp	r2, #36	; 0x24
    b5f0:	d026      	beq.n	b640 <_realloc_r+0x344>
    b5f2:	f104 0210 	add.w	r2, r4, #16
    b5f6:	f100 0310 	add.w	r3, r0, #16
    b5fa:	e6db      	b.n	b3b4 <_realloc_r+0xb8>
    b5fc:	463a      	mov	r2, r7
    b5fe:	e7bf      	b.n	b580 <_realloc_r+0x284>
    b600:	4621      	mov	r1, r4
    b602:	4638      	mov	r0, r7
    b604:	461e      	mov	r6, r3
    b606:	46d1      	mov	r9, sl
    b608:	f001 fa5c 	bl	cac4 <memmove>
    b60c:	463c      	mov	r4, r7
    b60e:	e6f2      	b.n	b3f6 <_realloc_r+0xfa>
    b610:	463b      	mov	r3, r7
    b612:	e7de      	b.n	b5d2 <_realloc_r+0x2d6>
    b614:	4621      	mov	r1, r4
    b616:	4638      	mov	r0, r7
    b618:	4666      	mov	r6, ip
    b61a:	46d1      	mov	r9, sl
    b61c:	f001 fa52 	bl	cac4 <memmove>
    b620:	463c      	mov	r4, r7
    b622:	e6e8      	b.n	b3f6 <_realloc_r+0xfa>
    b624:	20008a58 	.word	0x20008a58
    b628:	68a1      	ldr	r1, [r4, #8]
    b62a:	f8ca 1010 	str.w	r1, [sl, #16]
    b62e:	68e1      	ldr	r1, [r4, #12]
    b630:	f8ca 1014 	str.w	r1, [sl, #20]
    b634:	2a24      	cmp	r2, #36	; 0x24
    b636:	d020      	beq.n	b67a <_realloc_r+0x37e>
    b638:	3410      	adds	r4, #16
    b63a:	f10a 0218 	add.w	r2, sl, #24
    b63e:	e79f      	b.n	b580 <_realloc_r+0x284>
    b640:	6923      	ldr	r3, [r4, #16]
    b642:	6103      	str	r3, [r0, #16]
    b644:	6961      	ldr	r1, [r4, #20]
    b646:	6141      	str	r1, [r0, #20]
    b648:	f104 0218 	add.w	r2, r4, #24
    b64c:	f100 0318 	add.w	r3, r0, #24
    b650:	e6b0      	b.n	b3b4 <_realloc_r+0xb8>
    b652:	68a3      	ldr	r3, [r4, #8]
    b654:	f8ca 3010 	str.w	r3, [sl, #16]
    b658:	68e3      	ldr	r3, [r4, #12]
    b65a:	f8ca 3014 	str.w	r3, [sl, #20]
    b65e:	2a24      	cmp	r2, #36	; 0x24
    b660:	d021      	beq.n	b6a6 <_realloc_r+0x3aa>
    b662:	3410      	adds	r4, #16
    b664:	f10a 0318 	add.w	r3, sl, #24
    b668:	e7b3      	b.n	b5d2 <_realloc_r+0x2d6>
    b66a:	463a      	mov	r2, r7
    b66c:	e733      	b.n	b4d6 <_realloc_r+0x1da>
    b66e:	4621      	mov	r1, r4
    b670:	4638      	mov	r0, r7
    b672:	f001 fa27 	bl	cac4 <memmove>
    b676:	4b16      	ldr	r3, [pc, #88]	; (b6d0 <_realloc_r+0x3d4>)
    b678:	e733      	b.n	b4e2 <_realloc_r+0x1e6>
    b67a:	6922      	ldr	r2, [r4, #16]
    b67c:	f8ca 2018 	str.w	r2, [sl, #24]
    b680:	6962      	ldr	r2, [r4, #20]
    b682:	f8ca 201c 	str.w	r2, [sl, #28]
    b686:	3418      	adds	r4, #24
    b688:	f10a 0220 	add.w	r2, sl, #32
    b68c:	e778      	b.n	b580 <_realloc_r+0x284>
    b68e:	68a1      	ldr	r1, [r4, #8]
    b690:	f8ca 1010 	str.w	r1, [sl, #16]
    b694:	68e1      	ldr	r1, [r4, #12]
    b696:	f8ca 1014 	str.w	r1, [sl, #20]
    b69a:	2a24      	cmp	r2, #36	; 0x24
    b69c:	d00d      	beq.n	b6ba <_realloc_r+0x3be>
    b69e:	3410      	adds	r4, #16
    b6a0:	f10a 0218 	add.w	r2, sl, #24
    b6a4:	e717      	b.n	b4d6 <_realloc_r+0x1da>
    b6a6:	6923      	ldr	r3, [r4, #16]
    b6a8:	f8ca 3018 	str.w	r3, [sl, #24]
    b6ac:	6963      	ldr	r3, [r4, #20]
    b6ae:	f8ca 301c 	str.w	r3, [sl, #28]
    b6b2:	3418      	adds	r4, #24
    b6b4:	f10a 0320 	add.w	r3, sl, #32
    b6b8:	e78b      	b.n	b5d2 <_realloc_r+0x2d6>
    b6ba:	6922      	ldr	r2, [r4, #16]
    b6bc:	f8ca 2018 	str.w	r2, [sl, #24]
    b6c0:	6962      	ldr	r2, [r4, #20]
    b6c2:	f8ca 201c 	str.w	r2, [sl, #28]
    b6c6:	3418      	adds	r4, #24
    b6c8:	f10a 0220 	add.w	r2, sl, #32
    b6cc:	e703      	b.n	b4d6 <_realloc_r+0x1da>
    b6ce:	bf00      	nop
    b6d0:	20008a58 	.word	0x20008a58
    b6d4:	00000000 	.word	0x00000000

0000b6d8 <_strtod_l>:
    b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6dc:	ed2d 8b10 	vpush	{d8-d15}
    b6e0:	b097      	sub	sp, #92	; 0x5c
    b6e2:	468a      	mov	sl, r1
    b6e4:	2100      	movs	r1, #0
    b6e6:	9207      	str	r2, [sp, #28]
    b6e8:	9112      	str	r1, [sp, #72]	; 0x48
    b6ea:	2200      	movs	r2, #0
    b6ec:	2100      	movs	r1, #0
    b6ee:	e9cd 1204 	strd	r1, r2, [sp, #16]
    b6f2:	4680      	mov	r8, r0
    b6f4:	4651      	mov	r1, sl
    b6f6:	9111      	str	r1, [sp, #68]	; 0x44
    b6f8:	460f      	mov	r7, r1
    b6fa:	f811 2b01 	ldrb.w	r2, [r1], #1
    b6fe:	2a2d      	cmp	r2, #45	; 0x2d
    b700:	d85e      	bhi.n	b7c0 <_strtod_l+0xe8>
    b702:	a001      	add	r0, pc, #4	; (adr r0, b708 <_strtod_l+0x30>)
    b704:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    b708:	0000b8a9 	.word	0x0000b8a9
    b70c:	0000b7c1 	.word	0x0000b7c1
    b710:	0000b7c1 	.word	0x0000b7c1
    b714:	0000b7c1 	.word	0x0000b7c1
    b718:	0000b7c1 	.word	0x0000b7c1
    b71c:	0000b7c1 	.word	0x0000b7c1
    b720:	0000b7c1 	.word	0x0000b7c1
    b724:	0000b7c1 	.word	0x0000b7c1
    b728:	0000b7c1 	.word	0x0000b7c1
    b72c:	0000b6f7 	.word	0x0000b6f7
    b730:	0000b6f7 	.word	0x0000b6f7
    b734:	0000b6f7 	.word	0x0000b6f7
    b738:	0000b6f7 	.word	0x0000b6f7
    b73c:	0000b6f7 	.word	0x0000b6f7
    b740:	0000b7c1 	.word	0x0000b7c1
    b744:	0000b7c1 	.word	0x0000b7c1
    b748:	0000b7c1 	.word	0x0000b7c1
    b74c:	0000b7c1 	.word	0x0000b7c1
    b750:	0000b7c1 	.word	0x0000b7c1
    b754:	0000b7c1 	.word	0x0000b7c1
    b758:	0000b7c1 	.word	0x0000b7c1
    b75c:	0000b7c1 	.word	0x0000b7c1
    b760:	0000b7c1 	.word	0x0000b7c1
    b764:	0000b7c1 	.word	0x0000b7c1
    b768:	0000b7c1 	.word	0x0000b7c1
    b76c:	0000b7c1 	.word	0x0000b7c1
    b770:	0000b7c1 	.word	0x0000b7c1
    b774:	0000b7c1 	.word	0x0000b7c1
    b778:	0000b7c1 	.word	0x0000b7c1
    b77c:	0000b7c1 	.word	0x0000b7c1
    b780:	0000b7c1 	.word	0x0000b7c1
    b784:	0000b7c1 	.word	0x0000b7c1
    b788:	0000b6f7 	.word	0x0000b6f7
    b78c:	0000b7c1 	.word	0x0000b7c1
    b790:	0000b7c1 	.word	0x0000b7c1
    b794:	0000b7c1 	.word	0x0000b7c1
    b798:	0000b7c1 	.word	0x0000b7c1
    b79c:	0000b7c1 	.word	0x0000b7c1
    b7a0:	0000b7c1 	.word	0x0000b7c1
    b7a4:	0000b7c1 	.word	0x0000b7c1
    b7a8:	0000b7c1 	.word	0x0000b7c1
    b7ac:	0000b7c1 	.word	0x0000b7c1
    b7b0:	0000b7c1 	.word	0x0000b7c1
    b7b4:	0000bee3 	.word	0x0000bee3
    b7b8:	0000b7c1 	.word	0x0000b7c1
    b7bc:	0000becf 	.word	0x0000becf
    b7c0:	2100      	movs	r1, #0
    b7c2:	9109      	str	r1, [sp, #36]	; 0x24
    b7c4:	2a30      	cmp	r2, #48	; 0x30
    b7c6:	d07d      	beq.n	b8c4 <_strtod_l+0x1ec>
    b7c8:	2300      	movs	r3, #0
    b7ca:	9308      	str	r3, [sp, #32]
    b7cc:	2a2f      	cmp	r2, #47	; 0x2f
    b7ce:	4614      	mov	r4, r2
    b7d0:	f240 84cd 	bls.w	c16e <_strtod_l+0xa96>
    b7d4:	f04f 0900 	mov.w	r9, #0
    b7d8:	4638      	mov	r0, r7
    b7da:	464e      	mov	r6, r9
    b7dc:	464d      	mov	r5, r9
    b7de:	e012      	b.n	b806 <_strtod_l+0x12e>
    b7e0:	3001      	adds	r0, #1
    b7e2:	2d08      	cmp	r5, #8
    b7e4:	9011      	str	r0, [sp, #68]	; 0x44
    b7e6:	bfc8      	it	gt
    b7e8:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    b7ec:	7804      	ldrb	r4, [r0, #0]
    b7ee:	bfc6      	itte	gt
    b7f0:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    b7f4:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    b7f8:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    b7fc:	2c2f      	cmp	r4, #47	; 0x2f
    b7fe:	f105 0501 	add.w	r5, r5, #1
    b802:	4622      	mov	r2, r4
    b804:	dd6f      	ble.n	b8e6 <_strtod_l+0x20e>
    b806:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    b80a:	2c39      	cmp	r4, #57	; 0x39
    b80c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    b810:	dde6      	ble.n	b7e0 <_strtod_l+0x108>
    b812:	499f      	ldr	r1, [pc, #636]	; (ba90 <_strtod_l+0x3b8>)
    b814:	2201      	movs	r2, #1
    b816:	f001 fa23 	bl	cc60 <strncmp>
    b81a:	2800      	cmp	r0, #0
    b81c:	d137      	bne.n	b88e <_strtod_l+0x1b6>
    b81e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b820:	461a      	mov	r2, r3
    b822:	3301      	adds	r3, #1
    b824:	9311      	str	r3, [sp, #68]	; 0x44
    b826:	7854      	ldrb	r4, [r2, #1]
    b828:	2d00      	cmp	r5, #0
    b82a:	f040 8543 	bne.w	c2b4 <_strtod_l+0xbdc>
    b82e:	2c30      	cmp	r4, #48	; 0x30
    b830:	f040 8524 	bne.w	c27c <_strtod_l+0xba4>
    b834:	f1c3 0201 	rsb	r2, r3, #1
    b838:	1898      	adds	r0, r3, r2
    b83a:	3301      	adds	r3, #1
    b83c:	9311      	str	r3, [sp, #68]	; 0x44
    b83e:	781c      	ldrb	r4, [r3, #0]
    b840:	2c30      	cmp	r4, #48	; 0x30
    b842:	d0f9      	beq.n	b838 <_strtod_l+0x160>
    b844:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    b848:	2b08      	cmp	r3, #8
    b84a:	f200 8301 	bhi.w	be50 <_strtod_l+0x778>
    b84e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b850:	1c43      	adds	r3, r0, #1
    b852:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    b856:	930b      	str	r3, [sp, #44]	; 0x2c
    b858:	2501      	movs	r5, #1
    b85a:	46bc      	mov	ip, r7
    b85c:	f04f 0e00 	mov.w	lr, #0
    b860:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    b864:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    b868:	2000      	movs	r0, #0
    b86a:	f10c 0301 	add.w	r3, ip, #1
    b86e:	9311      	str	r3, [sp, #68]	; 0x44
    b870:	f89c 4001 	ldrb.w	r4, [ip, #1]
    b874:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    b878:	2909      	cmp	r1, #9
    b87a:	f200 82bb 	bhi.w	bdf4 <_strtod_l+0x71c>
    b87e:	3001      	adds	r0, #1
    b880:	468b      	mov	fp, r1
    b882:	2900      	cmp	r1, #0
    b884:	f040 844f 	bne.w	c126 <_strtod_l+0xa4e>
    b888:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    b88c:	e7ed      	b.n	b86a <_strtod_l+0x192>
    b88e:	2000      	movs	r0, #0
    b890:	2c65      	cmp	r4, #101	; 0x65
    b892:	46ae      	mov	lr, r5
    b894:	900b      	str	r0, [sp, #44]	; 0x2c
    b896:	4684      	mov	ip, r0
    b898:	d001      	beq.n	b89e <_strtod_l+0x1c6>
    b89a:	2c45      	cmp	r4, #69	; 0x45
    b89c:	d130      	bne.n	b900 <_strtod_l+0x228>
    b89e:	2d00      	cmp	r5, #0
    b8a0:	d16b      	bne.n	b97a <_strtod_l+0x2a2>
    b8a2:	9b08      	ldr	r3, [sp, #32]
    b8a4:	4303      	orrs	r3, r0
    b8a6:	d167      	bne.n	b978 <_strtod_l+0x2a0>
    b8a8:	9b07      	ldr	r3, [sp, #28]
    b8aa:	ed9f 8b77 	vldr	d8, [pc, #476]	; ba88 <_strtod_l+0x3b0>
    b8ae:	b113      	cbz	r3, b8b6 <_strtod_l+0x1de>
    b8b0:	9b07      	ldr	r3, [sp, #28]
    b8b2:	f8c3 a000 	str.w	sl, [r3]
    b8b6:	eeb0 0b48 	vmov.f64	d0, d8
    b8ba:	b017      	add	sp, #92	; 0x5c
    b8bc:	ecbd 8b10 	vpop	{d8-d15}
    b8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8c4:	787a      	ldrb	r2, [r7, #1]
    b8c6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    b8ca:	2a58      	cmp	r2, #88	; 0x58
    b8cc:	f000 840c 	beq.w	c0e8 <_strtod_l+0xa10>
    b8d0:	3701      	adds	r7, #1
    b8d2:	9711      	str	r7, [sp, #68]	; 0x44
    b8d4:	783a      	ldrb	r2, [r7, #0]
    b8d6:	2a30      	cmp	r2, #48	; 0x30
    b8d8:	d0fa      	beq.n	b8d0 <_strtod_l+0x1f8>
    b8da:	2a00      	cmp	r2, #0
    b8dc:	f000 80b7 	beq.w	ba4e <_strtod_l+0x376>
    b8e0:	2301      	movs	r3, #1
    b8e2:	9308      	str	r3, [sp, #32]
    b8e4:	e772      	b.n	b7cc <_strtod_l+0xf4>
    b8e6:	496a      	ldr	r1, [pc, #424]	; (ba90 <_strtod_l+0x3b8>)
    b8e8:	2201      	movs	r2, #1
    b8ea:	f001 f9b9 	bl	cc60 <strncmp>
    b8ee:	2800      	cmp	r0, #0
    b8f0:	f000 80c0 	beq.w	ba74 <_strtod_l+0x39c>
    b8f4:	46ae      	mov	lr, r5
    b8f6:	f04f 0c00 	mov.w	ip, #0
    b8fa:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    b8fe:	4660      	mov	r0, ip
    b900:	f04f 0b00 	mov.w	fp, #0
    b904:	2d00      	cmp	r5, #0
    b906:	d07e      	beq.n	ba06 <_strtod_l+0x32e>
    b908:	ee07 6a90 	vmov	s15, r6
    b90c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b90e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    b912:	ebab 0303 	sub.w	r3, fp, r3
    b916:	f1be 0f00 	cmp.w	lr, #0
    b91a:	bf08      	it	eq
    b91c:	46ae      	moveq	lr, r5
    b91e:	2d10      	cmp	r5, #16
    b920:	930a      	str	r3, [sp, #40]	; 0x28
    b922:	462b      	mov	r3, r5
    b924:	bfa8      	it	ge
    b926:	2310      	movge	r3, #16
    b928:	2d09      	cmp	r5, #9
    b92a:	ed8d 7b04 	vstr	d7, [sp, #16]
    b92e:	dd0c      	ble.n	b94a <_strtod_l+0x272>
    b930:	4a58      	ldr	r2, [pc, #352]	; (ba94 <_strtod_l+0x3bc>)
    b932:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    b936:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    b93a:	ee06 9a90 	vmov	s13, r9
    b93e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    b942:	eea7 6b05 	vfma.f64	d6, d7, d5
    b946:	ed8d 6b04 	vstr	d6, [sp, #16]
    b94a:	2d0f      	cmp	r5, #15
    b94c:	f300 80a8 	bgt.w	baa0 <_strtod_l+0x3c8>
    b950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b952:	2a00      	cmp	r2, #0
    b954:	f000 83e4 	beq.w	c120 <_strtod_l+0xa48>
    b958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b95a:	f340 833c 	ble.w	bfd6 <_strtod_l+0x8fe>
    b95e:	2a16      	cmp	r2, #22
    b960:	f340 8498 	ble.w	c294 <_strtod_l+0xbbc>
    b964:	990a      	ldr	r1, [sp, #40]	; 0x28
    b966:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    b96a:	428a      	cmp	r2, r1
    b96c:	f280 84a6 	bge.w	c2bc <_strtod_l+0xbe4>
    b970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b972:	1aeb      	subs	r3, r5, r3
    b974:	4413      	add	r3, r2
    b976:	e099      	b.n	baac <_strtod_l+0x3d4>
    b978:	2500      	movs	r5, #0
    b97a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    b97e:	f10a 0301 	add.w	r3, sl, #1
    b982:	9311      	str	r3, [sp, #68]	; 0x44
    b984:	f89a 4001 	ldrb.w	r4, [sl, #1]
    b988:	2c2b      	cmp	r4, #43	; 0x2b
    b98a:	f000 825e 	beq.w	be4a <_strtod_l+0x772>
    b98e:	2c2d      	cmp	r4, #45	; 0x2d
    b990:	f000 81f7 	beq.w	bd82 <_strtod_l+0x6aa>
    b994:	2300      	movs	r3, #0
    b996:	930a      	str	r3, [sp, #40]	; 0x28
    b998:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    b99c:	2b09      	cmp	r3, #9
    b99e:	f200 81eb 	bhi.w	bd78 <_strtod_l+0x6a0>
    b9a2:	2c30      	cmp	r4, #48	; 0x30
    b9a4:	d105      	bne.n	b9b2 <_strtod_l+0x2da>
    b9a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b9a8:	3301      	adds	r3, #1
    b9aa:	9311      	str	r3, [sp, #68]	; 0x44
    b9ac:	781c      	ldrb	r4, [r3, #0]
    b9ae:	2c30      	cmp	r4, #48	; 0x30
    b9b0:	d0fa      	beq.n	b9a8 <_strtod_l+0x2d0>
    b9b2:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    b9b6:	2b08      	cmp	r3, #8
    b9b8:	d8a2      	bhi.n	b900 <_strtod_l+0x228>
    b9ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b9bc:	920c      	str	r2, [sp, #48]	; 0x30
    b9be:	1c53      	adds	r3, r2, #1
    b9c0:	9311      	str	r3, [sp, #68]	; 0x44
    b9c2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    b9c6:	7854      	ldrb	r4, [r2, #1]
    b9c8:	2c2f      	cmp	r4, #47	; 0x2f
    b9ca:	dc07      	bgt.n	b9dc <_strtod_l+0x304>
    b9cc:	e3de      	b.n	c18c <_strtod_l+0xab4>
    b9ce:	3301      	adds	r3, #1
    b9d0:	9311      	str	r3, [sp, #68]	; 0x44
    b9d2:	784c      	ldrb	r4, [r1, #1]
    b9d4:	2c2f      	cmp	r4, #47	; 0x2f
    b9d6:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    b9da:	dd06      	ble.n	b9ea <_strtod_l+0x312>
    b9dc:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    b9e0:	2c39      	cmp	r4, #57	; 0x39
    b9e2:	4619      	mov	r1, r3
    b9e4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    b9e8:	ddf1      	ble.n	b9ce <_strtod_l+0x2f6>
    b9ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b9ec:	1a9b      	subs	r3, r3, r2
    b9ee:	2b08      	cmp	r3, #8
    b9f0:	f340 83cc 	ble.w	c18c <_strtod_l+0xab4>
    b9f4:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    b9f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b9fa:	2b00      	cmp	r3, #0
    b9fc:	d082      	beq.n	b904 <_strtod_l+0x22c>
    b9fe:	f1cb 0b00 	rsb	fp, fp, #0
    ba02:	2d00      	cmp	r5, #0
    ba04:	d180      	bne.n	b908 <_strtod_l+0x230>
    ba06:	9b08      	ldr	r3, [sp, #32]
    ba08:	4303      	orrs	r3, r0
    ba0a:	d120      	bne.n	ba4e <_strtod_l+0x376>
    ba0c:	f1bc 0f00 	cmp.w	ip, #0
    ba10:	f47f af4a 	bne.w	b8a8 <_strtod_l+0x1d0>
    ba14:	2c69      	cmp	r4, #105	; 0x69
    ba16:	f000 83cf 	beq.w	c1b8 <_strtod_l+0xae0>
    ba1a:	f300 82f3 	bgt.w	c004 <_strtod_l+0x92c>
    ba1e:	2c49      	cmp	r4, #73	; 0x49
    ba20:	f000 83ca 	beq.w	c1b8 <_strtod_l+0xae0>
    ba24:	2c4e      	cmp	r4, #78	; 0x4e
    ba26:	f47f af3f 	bne.w	b8a8 <_strtod_l+0x1d0>
    ba2a:	491b      	ldr	r1, [pc, #108]	; (ba98 <_strtod_l+0x3c0>)
    ba2c:	a811      	add	r0, sp, #68	; 0x44
    ba2e:	f002 f93b 	bl	dca8 <__match>
    ba32:	2800      	cmp	r0, #0
    ba34:	f43f af38 	beq.w	b8a8 <_strtod_l+0x1d0>
    ba38:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba3a:	781b      	ldrb	r3, [r3, #0]
    ba3c:	2b28      	cmp	r3, #40	; 0x28
    ba3e:	f000 84f2 	beq.w	c426 <_strtod_l+0xd4e>
    ba42:	4816      	ldr	r0, [pc, #88]	; (ba9c <_strtod_l+0x3c4>)
    ba44:	f001 fc6c 	bl	d320 <nan>
    ba48:	eeb0 8b40 	vmov.f64	d8, d0
    ba4c:	e001      	b.n	ba52 <_strtod_l+0x37a>
    ba4e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; ba88 <_strtod_l+0x3b0>
    ba52:	9a07      	ldr	r2, [sp, #28]
    ba54:	b10a      	cbz	r2, ba5a <_strtod_l+0x382>
    ba56:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba58:	6013      	str	r3, [r2, #0]
    ba5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ba5c:	2b00      	cmp	r3, #0
    ba5e:	f43f af2a 	beq.w	b8b6 <_strtod_l+0x1de>
    ba62:	eeb1 8b48 	vneg.f64	d8, d8
    ba66:	eeb0 0b48 	vmov.f64	d0, d8
    ba6a:	b017      	add	sp, #92	; 0x5c
    ba6c:	ecbd 8b10 	vpop	{d8-d15}
    ba70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba74:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba76:	900b      	str	r0, [sp, #44]	; 0x2c
    ba78:	1c5a      	adds	r2, r3, #1
    ba7a:	9211      	str	r2, [sp, #68]	; 0x44
    ba7c:	785c      	ldrb	r4, [r3, #1]
    ba7e:	46ae      	mov	lr, r5
    ba80:	e6f8      	b.n	b874 <_strtod_l+0x19c>
    ba82:	bf00      	nop
    ba84:	f3af 8000 	nop.w
	...
    ba90:	20008038 	.word	0x20008038
    ba94:	200003a8 	.word	0x200003a8
    ba98:	20000ee8 	.word	0x20000ee8
    ba9c:	20008328 	.word	0x20008328
    baa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    baa2:	1aeb      	subs	r3, r5, r3
    baa4:	4413      	add	r3, r2
    baa6:	2b00      	cmp	r3, #0
    baa8:	f340 82b0 	ble.w	c00c <_strtod_l+0x934>
    baac:	f013 010f 	ands.w	r1, r3, #15
    bab0:	d00a      	beq.n	bac8 <_strtod_l+0x3f0>
    bab2:	4ac3      	ldr	r2, [pc, #780]	; (bdc0 <_strtod_l+0x6e8>)
    bab4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    bab8:	ed9d 6b04 	vldr	d6, [sp, #16]
    babc:	ed92 7b00 	vldr	d7, [r2]
    bac0:	ee27 7b06 	vmul.f64	d7, d7, d6
    bac4:	ed8d 7b04 	vstr	d7, [sp, #16]
    bac8:	f033 020f 	bics.w	r2, r3, #15
    bacc:	f040 8238 	bne.w	bf40 <_strtod_l+0x868>
    bad0:	2300      	movs	r3, #0
    bad2:	9308      	str	r3, [sp, #32]
    bad4:	9600      	str	r6, [sp, #0]
    bad6:	462b      	mov	r3, r5
    bad8:	4672      	mov	r2, lr
    bada:	4639      	mov	r1, r7
    badc:	4640      	mov	r0, r8
    bade:	f002 fa6f 	bl	dfc0 <__s2b>
    bae2:	4681      	mov	r9, r0
    bae4:	2800      	cmp	r0, #0
    bae6:	f000 82e1 	beq.w	c0ac <_strtod_l+0x9d4>
    baea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    baec:	eba3 0b0b 	sub.w	fp, r3, fp
    baf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    baf2:	ed9f eba9 	vldr	d14, [pc, #676]	; bd98 <_strtod_l+0x6c0>
    baf6:	2b00      	cmp	r3, #0
    baf8:	ed9f cba9 	vldr	d12, [pc, #676]	; bda0 <_strtod_l+0x6c8>
    bafc:	ed9f dbaa 	vldr	d13, [pc, #680]	; bda8 <_strtod_l+0x6d0>
    bb00:	ed9f bbab 	vldr	d11, [pc, #684]	; bdb0 <_strtod_l+0x6d8>
    bb04:	bfb4      	ite	lt
    bb06:	465a      	movlt	r2, fp
    bb08:	2200      	movge	r2, #0
    bb0a:	f04f 0a00 	mov.w	sl, #0
    bb0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    bb12:	920b      	str	r2, [sp, #44]	; 0x2c
    bb14:	930c      	str	r3, [sp, #48]	; 0x30
    bb16:	4654      	mov	r4, sl
    bb18:	f8d9 1004 	ldr.w	r1, [r9, #4]
    bb1c:	4640      	mov	r0, r8
    bb1e:	f002 f9cd 	bl	debc <_Balloc>
    bb22:	4606      	mov	r6, r0
    bb24:	2800      	cmp	r0, #0
    bb26:	f000 810e 	beq.w	bd46 <_strtod_l+0x66e>
    bb2a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    bb2e:	ed9d 8b04 	vldr	d8, [sp, #16]
    bb32:	3202      	adds	r2, #2
    bb34:	0092      	lsls	r2, r2, #2
    bb36:	f109 010c 	add.w	r1, r9, #12
    bb3a:	300c      	adds	r0, #12
    bb3c:	f7fc fdca 	bl	86d4 <memcpy>
    bb40:	eeb0 0b48 	vmov.f64	d0, d8
    bb44:	aa14      	add	r2, sp, #80	; 0x50
    bb46:	a913      	add	r1, sp, #76	; 0x4c
    bb48:	4640      	mov	r0, r8
    bb4a:	f002 fdf5 	bl	e738 <__d2b>
    bb4e:	9012      	str	r0, [sp, #72]	; 0x48
    bb50:	2800      	cmp	r0, #0
    bb52:	f000 80e4 	beq.w	bd1e <_strtod_l+0x646>
    bb56:	2101      	movs	r1, #1
    bb58:	4640      	mov	r0, r8
    bb5a:	f002 fad9 	bl	e110 <__i2b>
    bb5e:	4604      	mov	r4, r0
    bb60:	2800      	cmp	r0, #0
    bb62:	f000 80f0 	beq.w	bd46 <_strtod_l+0x66e>
    bb66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bb68:	2a00      	cmp	r2, #0
    bb6a:	f2c0 80de 	blt.w	bd2a <_strtod_l+0x652>
    bb6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb70:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    bb72:	eb02 0b03 	add.w	fp, r2, r3
    bb76:	9b08      	ldr	r3, [sp, #32]
    bb78:	9d14      	ldr	r5, [sp, #80]	; 0x50
    bb7a:	1ad2      	subs	r2, r2, r3
    bb7c:	442a      	add	r2, r5
    bb7e:	4b91      	ldr	r3, [pc, #580]	; (bdc4 <_strtod_l+0x6ec>)
    bb80:	3a01      	subs	r2, #1
    bb82:	429a      	cmp	r2, r3
    bb84:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    bb88:	f280 8098 	bge.w	bcbc <_strtod_l+0x5e4>
    bb8c:	1a99      	subs	r1, r3, r2
    bb8e:	291f      	cmp	r1, #31
    bb90:	eba5 0501 	sub.w	r5, r5, r1
    bb94:	f300 80e3 	bgt.w	bd5e <_strtod_l+0x686>
    bb98:	2201      	movs	r2, #1
    bb9a:	fa02 f301 	lsl.w	r3, r2, r1
    bb9e:	930d      	str	r3, [sp, #52]	; 0x34
    bba0:	2300      	movs	r3, #0
    bba2:	930e      	str	r3, [sp, #56]	; 0x38
    bba4:	442f      	add	r7, r5
    bba6:	9b08      	ldr	r3, [sp, #32]
    bba8:	445d      	add	r5, fp
    bbaa:	45ab      	cmp	fp, r5
    bbac:	465a      	mov	r2, fp
    bbae:	441f      	add	r7, r3
    bbb0:	bfa8      	it	ge
    bbb2:	462a      	movge	r2, r5
    bbb4:	42ba      	cmp	r2, r7
    bbb6:	bfa8      	it	ge
    bbb8:	463a      	movge	r2, r7
    bbba:	2a00      	cmp	r2, #0
    bbbc:	dd03      	ble.n	bbc6 <_strtod_l+0x4ee>
    bbbe:	1aad      	subs	r5, r5, r2
    bbc0:	1abf      	subs	r7, r7, r2
    bbc2:	ebab 0b02 	sub.w	fp, fp, r2
    bbc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bbc8:	2b00      	cmp	r3, #0
    bbca:	f300 8088 	bgt.w	bcde <_strtod_l+0x606>
    bbce:	2d00      	cmp	r5, #0
    bbd0:	f300 809c 	bgt.w	bd0c <_strtod_l+0x634>
    bbd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	f300 80b7 	bgt.w	bd4a <_strtod_l+0x672>
    bbdc:	2f00      	cmp	r7, #0
    bbde:	f300 80a9 	bgt.w	bd34 <_strtod_l+0x65c>
    bbe2:	f1bb 0f00 	cmp.w	fp, #0
    bbe6:	dd08      	ble.n	bbfa <_strtod_l+0x522>
    bbe8:	4621      	mov	r1, r4
    bbea:	465a      	mov	r2, fp
    bbec:	4640      	mov	r0, r8
    bbee:	f002 fbcb 	bl	e388 <__lshift>
    bbf2:	4604      	mov	r4, r0
    bbf4:	2800      	cmp	r0, #0
    bbf6:	f000 80a6 	beq.w	bd46 <_strtod_l+0x66e>
    bbfa:	9912      	ldr	r1, [sp, #72]	; 0x48
    bbfc:	4632      	mov	r2, r6
    bbfe:	4640      	mov	r0, r8
    bc00:	f002 fc5c 	bl	e4bc <__mdiff>
    bc04:	4682      	mov	sl, r0
    bc06:	2800      	cmp	r0, #0
    bc08:	f000 809d 	beq.w	bd46 <_strtod_l+0x66e>
    bc0c:	2300      	movs	r3, #0
    bc0e:	68c5      	ldr	r5, [r0, #12]
    bc10:	60c3      	str	r3, [r0, #12]
    bc12:	4621      	mov	r1, r4
    bc14:	f002 fc30 	bl	e478 <__mcmp>
    bc18:	2800      	cmp	r0, #0
    bc1a:	f2c0 83c7 	blt.w	c3ac <_strtod_l+0xcd4>
    bc1e:	f000 8361 	beq.w	c2e4 <_strtod_l+0xc0c>
    bc22:	4621      	mov	r1, r4
    bc24:	4650      	mov	r0, sl
    bc26:	f002 fdf1 	bl	e80c <__ratio>
    bc2a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    bc2e:	eeb4 0bc7 	vcmpe.f64	d0, d7
    bc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bc36:	d846      	bhi.n	bcc6 <_strtod_l+0x5ee>
    bc38:	2d00      	cmp	r5, #0
    bc3a:	f000 80cb 	beq.w	bdd4 <_strtod_l+0x6fc>
    bc3e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    bc42:	9805      	ldr	r0, [sp, #20]
    bc44:	4b60      	ldr	r3, [pc, #384]	; (bdc8 <_strtod_l+0x6f0>)
    bc46:	2200      	movs	r2, #0
    bc48:	4960      	ldr	r1, [pc, #384]	; (bdcc <_strtod_l+0x6f4>)
    bc4a:	f8df c184 	ldr.w	ip, [pc, #388]	; bdd0 <_strtod_l+0x6f8>
    bc4e:	ea00 0701 	and.w	r7, r0, r1
    bc52:	4567      	cmp	r7, ip
    bc54:	f000 80d4 	beq.w	be00 <_strtod_l+0x728>
    bc58:	9908      	ldr	r1, [sp, #32]
    bc5a:	b159      	cbz	r1, bc74 <_strtod_l+0x59c>
    bc5c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    bc60:	d808      	bhi.n	bc74 <_strtod_l+0x59c>
    bc62:	eeb4 9bcb 	vcmpe.f64	d9, d11
    bc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bc6a:	f240 8156 	bls.w	bf1a <_strtod_l+0x842>
    bc6e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    bc72:	1bcb      	subs	r3, r1, r7
    bc74:	eeb0 0b48 	vmov.f64	d0, d8
    bc78:	ec43 2b1a 	vmov	d10, r2, r3
    bc7c:	f002 fcc8 	bl	e610 <__ulp>
    bc80:	eeaa 8b00 	vfma.f64	d8, d10, d0
    bc84:	ed8d 8b04 	vstr	d8, [sp, #16]
    bc88:	ee18 3a90 	vmov	r3, s17
    bc8c:	9a08      	ldr	r2, [sp, #32]
    bc8e:	b922      	cbnz	r2, bc9a <_strtod_l+0x5c2>
    bc90:	4a4e      	ldr	r2, [pc, #312]	; (bdcc <_strtod_l+0x6f4>)
    bc92:	401a      	ands	r2, r3
    bc94:	4297      	cmp	r7, r2
    bc96:	f000 80e4 	beq.w	be62 <_strtod_l+0x78a>
    bc9a:	9912      	ldr	r1, [sp, #72]	; 0x48
    bc9c:	4640      	mov	r0, r8
    bc9e:	f002 f933 	bl	df08 <_Bfree>
    bca2:	4631      	mov	r1, r6
    bca4:	4640      	mov	r0, r8
    bca6:	f002 f92f 	bl	df08 <_Bfree>
    bcaa:	4621      	mov	r1, r4
    bcac:	4640      	mov	r0, r8
    bcae:	f002 f92b 	bl	df08 <_Bfree>
    bcb2:	4651      	mov	r1, sl
    bcb4:	4640      	mov	r0, r8
    bcb6:	f002 f927 	bl	df08 <_Bfree>
    bcba:	e72d      	b.n	bb18 <_strtod_l+0x440>
    bcbc:	2301      	movs	r3, #1
    bcbe:	2100      	movs	r1, #0
    bcc0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    bcc4:	e76e      	b.n	bba4 <_strtod_l+0x4cc>
    bcc6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    bcca:	ee20 9b09 	vmul.f64	d9, d0, d9
    bcce:	2d00      	cmp	r5, #0
    bcd0:	d15f      	bne.n	bd92 <_strtod_l+0x6ba>
    bcd2:	eeb1 7b49 	vneg.f64	d7, d9
    bcd6:	9805      	ldr	r0, [sp, #20]
    bcd8:	ec53 2b17 	vmov	r2, r3, d7
    bcdc:	e7b4      	b.n	bc48 <_strtod_l+0x570>
    bcde:	4621      	mov	r1, r4
    bce0:	461a      	mov	r2, r3
    bce2:	4640      	mov	r0, r8
    bce4:	f002 faf0 	bl	e2c8 <__pow5mult>
    bce8:	4604      	mov	r4, r0
    bcea:	b360      	cbz	r0, bd46 <_strtod_l+0x66e>
    bcec:	4601      	mov	r1, r0
    bcee:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bcf0:	4640      	mov	r0, r8
    bcf2:	f002 fa3b 	bl	e16c <__multiply>
    bcf6:	b330      	cbz	r0, bd46 <_strtod_l+0x66e>
    bcf8:	900f      	str	r0, [sp, #60]	; 0x3c
    bcfa:	9912      	ldr	r1, [sp, #72]	; 0x48
    bcfc:	4640      	mov	r0, r8
    bcfe:	f002 f903 	bl	df08 <_Bfree>
    bd02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    bd04:	9212      	str	r2, [sp, #72]	; 0x48
    bd06:	2d00      	cmp	r5, #0
    bd08:	f77f af64 	ble.w	bbd4 <_strtod_l+0x4fc>
    bd0c:	9912      	ldr	r1, [sp, #72]	; 0x48
    bd0e:	462a      	mov	r2, r5
    bd10:	4640      	mov	r0, r8
    bd12:	f002 fb39 	bl	e388 <__lshift>
    bd16:	9012      	str	r0, [sp, #72]	; 0x48
    bd18:	2800      	cmp	r0, #0
    bd1a:	f47f af5b 	bne.w	bbd4 <_strtod_l+0x4fc>
    bd1e:	2322      	movs	r3, #34	; 0x22
    bd20:	ed9f 8b25 	vldr	d8, [pc, #148]	; bdb8 <_strtod_l+0x6e0>
    bd24:	f8c8 3000 	str.w	r3, [r8]
    bd28:	e0bc      	b.n	bea4 <_strtod_l+0x7cc>
    bd2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bd2c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    bd30:	1a9f      	subs	r7, r3, r2
    bd32:	e720      	b.n	bb76 <_strtod_l+0x49e>
    bd34:	4631      	mov	r1, r6
    bd36:	463a      	mov	r2, r7
    bd38:	4640      	mov	r0, r8
    bd3a:	f002 fb25 	bl	e388 <__lshift>
    bd3e:	4606      	mov	r6, r0
    bd40:	2800      	cmp	r0, #0
    bd42:	f47f af4e 	bne.w	bbe2 <_strtod_l+0x50a>
    bd46:	9812      	ldr	r0, [sp, #72]	; 0x48
    bd48:	e7e9      	b.n	bd1e <_strtod_l+0x646>
    bd4a:	4631      	mov	r1, r6
    bd4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bd4e:	4640      	mov	r0, r8
    bd50:	f002 faba 	bl	e2c8 <__pow5mult>
    bd54:	4606      	mov	r6, r0
    bd56:	2800      	cmp	r0, #0
    bd58:	f47f af40 	bne.w	bbdc <_strtod_l+0x504>
    bd5c:	e7f3      	b.n	bd46 <_strtod_l+0x66e>
    bd5e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    bd62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    bd66:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    bd6a:	2101      	movs	r1, #1
    bd6c:	32e2      	adds	r2, #226	; 0xe2
    bd6e:	fa01 f302 	lsl.w	r3, r1, r2
    bd72:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    bd76:	e715      	b.n	bba4 <_strtod_l+0x4cc>
    bd78:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    bd7c:	f04f 0b00 	mov.w	fp, #0
    bd80:	e5c0      	b.n	b904 <_strtod_l+0x22c>
    bd82:	2301      	movs	r3, #1
    bd84:	930a      	str	r3, [sp, #40]	; 0x28
    bd86:	f10a 0302 	add.w	r3, sl, #2
    bd8a:	9311      	str	r3, [sp, #68]	; 0x44
    bd8c:	f89a 4002 	ldrb.w	r4, [sl, #2]
    bd90:	e602      	b.n	b998 <_strtod_l+0x2c0>
    bd92:	eeb0 7b49 	vmov.f64	d7, d9
    bd96:	e79e      	b.n	bcd6 <_strtod_l+0x5fe>
    bd98:	94a03595 	.word	0x94a03595
    bd9c:	3fcfffff 	.word	0x3fcfffff
    bda0:	94a03595 	.word	0x94a03595
    bda4:	3fdfffff 	.word	0x3fdfffff
    bda8:	35afe535 	.word	0x35afe535
    bdac:	3fe00000 	.word	0x3fe00000
    bdb0:	ffc00000 	.word	0xffc00000
    bdb4:	41dfffff 	.word	0x41dfffff
    bdb8:	00000000 	.word	0x00000000
    bdbc:	7ff00000 	.word	0x7ff00000
    bdc0:	200003a8 	.word	0x200003a8
    bdc4:	fffffc02 	.word	0xfffffc02
    bdc8:	3ff00000 	.word	0x3ff00000
    bdcc:	7ff00000 	.word	0x7ff00000
    bdd0:	7fe00000 	.word	0x7fe00000
    bdd4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    bdd8:	2900      	cmp	r1, #0
    bdda:	f000 8085 	beq.w	bee8 <_strtod_l+0x810>
    bdde:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    bde2:	2901      	cmp	r1, #1
    bde4:	f000 81d8 	beq.w	c198 <_strtod_l+0xac0>
    bde8:	4610      	mov	r0, r2
    bdea:	4bb7      	ldr	r3, [pc, #732]	; (c0c8 <_strtod_l+0x9f0>)
    bdec:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    bdf0:	2200      	movs	r2, #0
    bdf2:	e729      	b.n	bc48 <_strtod_l+0x570>
    bdf4:	2c65      	cmp	r4, #101	; 0x65
    bdf6:	f04f 0c01 	mov.w	ip, #1
    bdfa:	f43f adbe 	beq.w	b97a <_strtod_l+0x2a2>
    bdfe:	e54c      	b.n	b89a <_strtod_l+0x1c2>
    be00:	ec43 2b1a 	vmov	d10, r2, r3
    be04:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    be08:	9305      	str	r3, [sp, #20]
    be0a:	ed9d fb04 	vldr	d15, [sp, #16]
    be0e:	eeb0 0b4f 	vmov.f64	d0, d15
    be12:	f002 fbfd 	bl	e610 <__ulp>
    be16:	49ad      	ldr	r1, [pc, #692]	; (c0cc <_strtod_l+0x9f4>)
    be18:	eeaa fb00 	vfma.f64	d15, d10, d0
    be1c:	ee1f 3a90 	vmov	r3, s31
    be20:	4aab      	ldr	r2, [pc, #684]	; (c0d0 <_strtod_l+0x9f8>)
    be22:	4019      	ands	r1, r3
    be24:	4291      	cmp	r1, r2
    be26:	ed8d fb04 	vstr	d15, [sp, #16]
    be2a:	d972      	bls.n	bf12 <_strtod_l+0x83a>
    be2c:	4ba9      	ldr	r3, [pc, #676]	; (c0d4 <_strtod_l+0x9fc>)
    be2e:	ee18 2a90 	vmov	r2, s17
    be32:	429a      	cmp	r2, r3
    be34:	d103      	bne.n	be3e <_strtod_l+0x766>
    be36:	ee18 3a10 	vmov	r3, s16
    be3a:	3301      	adds	r3, #1
    be3c:	d083      	beq.n	bd46 <_strtod_l+0x66e>
    be3e:	4aa5      	ldr	r2, [pc, #660]	; (c0d4 <_strtod_l+0x9fc>)
    be40:	f04f 33ff 	mov.w	r3, #4294967295
    be44:	e9cd 3204 	strd	r3, r2, [sp, #16]
    be48:	e727      	b.n	bc9a <_strtod_l+0x5c2>
    be4a:	2300      	movs	r3, #0
    be4c:	930a      	str	r3, [sp, #40]	; 0x28
    be4e:	e79a      	b.n	bd86 <_strtod_l+0x6ae>
    be50:	2c65      	cmp	r4, #101	; 0x65
    be52:	f000 80d0 	beq.w	bff6 <_strtod_l+0x91e>
    be56:	2c45      	cmp	r4, #69	; 0x45
    be58:	f000 80cd 	beq.w	bff6 <_strtod_l+0x91e>
    be5c:	f04f 0c01 	mov.w	ip, #1
    be60:	e5d1      	b.n	ba06 <_strtod_l+0x32e>
    be62:	ec51 0b19 	vmov	r0, r1, d9
    be66:	930d      	str	r3, [sp, #52]	; 0x34
    be68:	f009 fb8c 	bl	15584 <__aeabi_d2lz>
    be6c:	f009 fb5c 	bl	15528 <__aeabi_l2d>
    be70:	9b04      	ldr	r3, [sp, #16]
    be72:	431d      	orrs	r5, r3
    be74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    be76:	ec41 0b17 	vmov	d7, r0, r1
    be7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    be7e:	431d      	orrs	r5, r3
    be80:	ee39 9b47 	vsub.f64	d9, d9, d7
    be84:	f000 80a0 	beq.w	bfc8 <_strtod_l+0x8f0>
    be88:	eeb4 9bcc 	vcmpe.f64	d9, d12
    be8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    be90:	d405      	bmi.n	be9e <_strtod_l+0x7c6>
    be92:	eeb4 9bcd 	vcmpe.f64	d9, d13
    be96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    be9a:	f77f aefe 	ble.w	bc9a <_strtod_l+0x5c2>
    be9e:	ed9d 8b04 	vldr	d8, [sp, #16]
    bea2:	9812      	ldr	r0, [sp, #72]	; 0x48
    bea4:	4601      	mov	r1, r0
    bea6:	4640      	mov	r0, r8
    bea8:	f002 f82e 	bl	df08 <_Bfree>
    beac:	4631      	mov	r1, r6
    beae:	4640      	mov	r0, r8
    beb0:	f002 f82a 	bl	df08 <_Bfree>
    beb4:	4621      	mov	r1, r4
    beb6:	4640      	mov	r0, r8
    beb8:	f002 f826 	bl	df08 <_Bfree>
    bebc:	4649      	mov	r1, r9
    bebe:	4640      	mov	r0, r8
    bec0:	f002 f822 	bl	df08 <_Bfree>
    bec4:	4651      	mov	r1, sl
    bec6:	4640      	mov	r0, r8
    bec8:	f002 f81e 	bl	df08 <_Bfree>
    becc:	e5c1      	b.n	ba52 <_strtod_l+0x37a>
    bece:	2201      	movs	r2, #1
    bed0:	9209      	str	r2, [sp, #36]	; 0x24
    bed2:	1c79      	adds	r1, r7, #1
    bed4:	9111      	str	r1, [sp, #68]	; 0x44
    bed6:	787a      	ldrb	r2, [r7, #1]
    bed8:	2a00      	cmp	r2, #0
    beda:	f43f ace5 	beq.w	b8a8 <_strtod_l+0x1d0>
    bede:	460f      	mov	r7, r1
    bee0:	e470      	b.n	b7c4 <_strtod_l+0xec>
    bee2:	2200      	movs	r2, #0
    bee4:	9209      	str	r2, [sp, #36]	; 0x24
    bee6:	e7f4      	b.n	bed2 <_strtod_l+0x7fa>
    bee8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    beec:	4610      	mov	r0, r2
    beee:	2b00      	cmp	r3, #0
    bef0:	f47f af7b 	bne.w	bdea <_strtod_l+0x712>
    bef4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    bef8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    befc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bf00:	f100 81d3 	bmi.w	c2aa <_strtod_l+0xbd2>
    bf04:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    bf08:	ee20 9b09 	vmul.f64	d9, d0, d9
    bf0c:	eeb1 7b49 	vneg.f64	d7, d9
    bf10:	e6e2      	b.n	bcd8 <_strtod_l+0x600>
    bf12:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    bf16:	9305      	str	r3, [sp, #20]
    bf18:	e6b8      	b.n	bc8c <_strtod_l+0x5b4>
    bf1a:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    bf1e:	ee19 3a10 	vmov	r3, s18
    bf22:	2b01      	cmp	r3, #1
    bf24:	bf38      	it	cc
    bf26:	2301      	movcc	r3, #1
    bf28:	ee09 3a10 	vmov	s18, r3
    bf2c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    bf30:	2d00      	cmp	r5, #0
    bf32:	f040 813e 	bne.w	c1b2 <_strtod_l+0xada>
    bf36:	eeb1 7b49 	vneg.f64	d7, d9
    bf3a:	ec53 2b17 	vmov	r2, r3, d7
    bf3e:	e696      	b.n	bc6e <_strtod_l+0x596>
    bf40:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    bf44:	f300 80b2 	bgt.w	c0ac <_strtod_l+0x9d4>
    bf48:	2a10      	cmp	r2, #16
    bf4a:	ea4f 1322 	mov.w	r3, r2, asr #4
    bf4e:	f340 8286 	ble.w	c45e <_strtod_l+0xd86>
    bf52:	4c61      	ldr	r4, [pc, #388]	; (c0d8 <_strtod_l+0xa00>)
    bf54:	ed9d 7b04 	vldr	d7, [sp, #16]
    bf58:	2000      	movs	r0, #0
    bf5a:	4622      	mov	r2, r4
    bf5c:	4601      	mov	r1, r0
    bf5e:	f013 0f01 	tst.w	r3, #1
    bf62:	f101 0101 	add.w	r1, r1, #1
    bf66:	ea4f 0363 	mov.w	r3, r3, asr #1
    bf6a:	d004      	beq.n	bf76 <_strtod_l+0x89e>
    bf6c:	ed92 6b00 	vldr	d6, [r2]
    bf70:	2001      	movs	r0, #1
    bf72:	ee27 7b06 	vmul.f64	d7, d7, d6
    bf76:	2b01      	cmp	r3, #1
    bf78:	f102 0208 	add.w	r2, r2, #8
    bf7c:	d1ef      	bne.n	bf5e <_strtod_l+0x886>
    bf7e:	b108      	cbz	r0, bf84 <_strtod_l+0x8ac>
    bf80:	ed8d 7b04 	vstr	d7, [sp, #16]
    bf84:	9b05      	ldr	r3, [sp, #20]
    bf86:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    bf8a:	9305      	str	r3, [sp, #20]
    bf8c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    bf90:	ed9d 6b04 	vldr	d6, [sp, #16]
    bf94:	ed94 7b00 	vldr	d7, [r4]
    bf98:	4b4c      	ldr	r3, [pc, #304]	; (c0cc <_strtod_l+0x9f4>)
    bf9a:	ee27 7b06 	vmul.f64	d7, d7, d6
    bf9e:	ee17 2a90 	vmov	r2, s15
    bfa2:	494e      	ldr	r1, [pc, #312]	; (c0dc <_strtod_l+0xa04>)
    bfa4:	4013      	ands	r3, r2
    bfa6:	428b      	cmp	r3, r1
    bfa8:	ed8d 7b04 	vstr	d7, [sp, #16]
    bfac:	d87e      	bhi.n	c0ac <_strtod_l+0x9d4>
    bfae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    bfb2:	428b      	cmp	r3, r1
    bfb4:	f240 81d6 	bls.w	c364 <_strtod_l+0xc8c>
    bfb8:	4c46      	ldr	r4, [pc, #280]	; (c0d4 <_strtod_l+0x9fc>)
    bfba:	f04f 33ff 	mov.w	r3, #4294967295
    bfbe:	e9cd 3404 	strd	r3, r4, [sp, #16]
    bfc2:	2300      	movs	r3, #0
    bfc4:	9308      	str	r3, [sp, #32]
    bfc6:	e585      	b.n	bad4 <_strtod_l+0x3fc>
    bfc8:	eeb4 9bce 	vcmpe.f64	d9, d14
    bfcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bfd0:	f57f ae63 	bpl.w	bc9a <_strtod_l+0x5c2>
    bfd4:	e763      	b.n	be9e <_strtod_l+0x7c6>
    bfd6:	3216      	adds	r2, #22
    bfd8:	f6ff ad62 	blt.w	baa0 <_strtod_l+0x3c8>
    bfdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bfde:	eba3 0b0b 	sub.w	fp, r3, fp
    bfe2:	4b3f      	ldr	r3, [pc, #252]	; (c0e0 <_strtod_l+0xa08>)
    bfe4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    bfe8:	ed93 7b00 	vldr	d7, [r3]
    bfec:	ed9d 6b04 	vldr	d6, [sp, #16]
    bff0:	ee86 8b07 	vdiv.f64	d8, d6, d7
    bff4:	e52d      	b.n	ba52 <_strtod_l+0x37a>
    bff6:	f04f 0e00 	mov.w	lr, #0
    bffa:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    bffe:	f04f 0c01 	mov.w	ip, #1
    c002:	e44e      	b.n	b8a2 <_strtod_l+0x1ca>
    c004:	2c6e      	cmp	r4, #110	; 0x6e
    c006:	f43f ad10 	beq.w	ba2a <_strtod_l+0x352>
    c00a:	e44d      	b.n	b8a8 <_strtod_l+0x1d0>
    c00c:	f43f ad60 	beq.w	bad0 <_strtod_l+0x3f8>
    c010:	425b      	negs	r3, r3
    c012:	f013 010f 	ands.w	r1, r3, #15
    c016:	d00a      	beq.n	c02e <_strtod_l+0x956>
    c018:	4a31      	ldr	r2, [pc, #196]	; (c0e0 <_strtod_l+0xa08>)
    c01a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    c01e:	ed9d 6b04 	vldr	d6, [sp, #16]
    c022:	ed92 7b00 	vldr	d7, [r2]
    c026:	ee86 7b07 	vdiv.f64	d7, d6, d7
    c02a:	ed8d 7b04 	vstr	d7, [sp, #16]
    c02e:	111b      	asrs	r3, r3, #4
    c030:	f43f ad4e 	beq.w	bad0 <_strtod_l+0x3f8>
    c034:	2b1f      	cmp	r3, #31
    c036:	dc33      	bgt.n	c0a0 <_strtod_l+0x9c8>
    c038:	f013 0210 	ands.w	r2, r3, #16
    c03c:	bf18      	it	ne
    c03e:	226a      	movne	r2, #106	; 0x6a
    c040:	ed9d 7b04 	vldr	d7, [sp, #16]
    c044:	9208      	str	r2, [sp, #32]
    c046:	4a27      	ldr	r2, [pc, #156]	; (c0e4 <_strtod_l+0xa0c>)
    c048:	2100      	movs	r1, #0
    c04a:	07d8      	lsls	r0, r3, #31
    c04c:	d504      	bpl.n	c058 <_strtod_l+0x980>
    c04e:	ed92 6b00 	vldr	d6, [r2]
    c052:	2101      	movs	r1, #1
    c054:	ee27 7b06 	vmul.f64	d7, d7, d6
    c058:	105b      	asrs	r3, r3, #1
    c05a:	f102 0208 	add.w	r2, r2, #8
    c05e:	d1f4      	bne.n	c04a <_strtod_l+0x972>
    c060:	b109      	cbz	r1, c066 <_strtod_l+0x98e>
    c062:	ed8d 7b04 	vstr	d7, [sp, #16]
    c066:	9b08      	ldr	r3, [sp, #32]
    c068:	b193      	cbz	r3, c090 <_strtod_l+0x9b8>
    c06a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c06e:	f3c1 520a 	ubfx	r2, r1, #20, #11
    c072:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    c076:	2b00      	cmp	r3, #0
    c078:	dd0a      	ble.n	c090 <_strtod_l+0x9b8>
    c07a:	2b1f      	cmp	r3, #31
    c07c:	f340 822f 	ble.w	c4de <_strtod_l+0xe06>
    c080:	2000      	movs	r0, #0
    c082:	2b34      	cmp	r3, #52	; 0x34
    c084:	9004      	str	r0, [sp, #16]
    c086:	f340 8240 	ble.w	c50a <_strtod_l+0xe32>
    c08a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    c08e:	9305      	str	r3, [sp, #20]
    c090:	ed9d 7b04 	vldr	d7, [sp, #16]
    c094:	eeb5 7b40 	vcmp.f64	d7, #0.0
    c098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c09c:	f47f ad1a 	bne.w	bad4 <_strtod_l+0x3fc>
    c0a0:	2322      	movs	r3, #34	; 0x22
    c0a2:	ed9f 8b05 	vldr	d8, [pc, #20]	; c0b8 <_strtod_l+0x9e0>
    c0a6:	f8c8 3000 	str.w	r3, [r8]
    c0aa:	e4d2      	b.n	ba52 <_strtod_l+0x37a>
    c0ac:	2322      	movs	r3, #34	; 0x22
    c0ae:	ed9f 8b04 	vldr	d8, [pc, #16]	; c0c0 <_strtod_l+0x9e8>
    c0b2:	f8c8 3000 	str.w	r3, [r8]
    c0b6:	e4cc      	b.n	ba52 <_strtod_l+0x37a>
	...
    c0c4:	7ff00000 	.word	0x7ff00000
    c0c8:	bff00000 	.word	0xbff00000
    c0cc:	7ff00000 	.word	0x7ff00000
    c0d0:	7c9fffff 	.word	0x7c9fffff
    c0d4:	7fefffff 	.word	0x7fefffff
    c0d8:	20000380 	.word	0x20000380
    c0dc:	7ca00000 	.word	0x7ca00000
    c0e0:	200003a8 	.word	0x200003a8
    c0e4:	20000470 	.word	0x20000470
    c0e8:	9302      	str	r3, [sp, #8]
    c0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0ec:	9301      	str	r3, [sp, #4]
    c0ee:	ab12      	add	r3, sp, #72	; 0x48
    c0f0:	9300      	str	r3, [sp, #0]
    c0f2:	4aa7      	ldr	r2, [pc, #668]	; (c390 <_strtod_l+0xcb8>)
    c0f4:	ab13      	add	r3, sp, #76	; 0x4c
    c0f6:	a911      	add	r1, sp, #68	; 0x44
    c0f8:	4640      	mov	r0, r8
    c0fa:	f001 fb0b 	bl	d714 <__gethex>
    c0fe:	f010 050f 	ands.w	r5, r0, #15
    c102:	4604      	mov	r4, r0
    c104:	f43f aca3 	beq.w	ba4e <_strtod_l+0x376>
    c108:	2d06      	cmp	r5, #6
    c10a:	d174      	bne.n	c1f6 <_strtod_l+0xb1e>
    c10c:	9b07      	ldr	r3, [sp, #28]
    c10e:	ed9f 8b9a 	vldr	d8, [pc, #616]	; c378 <_strtod_l+0xca0>
    c112:	3701      	adds	r7, #1
    c114:	2b00      	cmp	r3, #0
    c116:	f43f abce 	beq.w	b8b6 <_strtod_l+0x1de>
    c11a:	601f      	str	r7, [r3, #0]
    c11c:	f7ff bbcb 	b.w	b8b6 <_strtod_l+0x1de>
    c120:	ed9d 8b04 	vldr	d8, [sp, #16]
    c124:	e495      	b.n	ba52 <_strtod_l+0x37a>
    c126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c128:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    c12c:	4403      	add	r3, r0
    c12e:	930b      	str	r3, [sp, #44]	; 0x2c
    c130:	2801      	cmp	r0, #1
    c132:	f105 0301 	add.w	r3, r5, #1
    c136:	461a      	mov	r2, r3
    c138:	d014      	beq.n	c164 <_strtod_l+0xa8c>
    c13a:	4428      	add	r0, r5
    c13c:	1e44      	subs	r4, r0, #1
    c13e:	e003      	b.n	c148 <_strtod_l+0xa70>
    c140:	0046      	lsls	r6, r0, #1
    c142:	429c      	cmp	r4, r3
    c144:	d00d      	beq.n	c162 <_strtod_l+0xa8a>
    c146:	3301      	adds	r3, #1
    c148:	462a      	mov	r2, r5
    c14a:	2a08      	cmp	r2, #8
    c14c:	461d      	mov	r5, r3
    c14e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    c152:	d9f5      	bls.n	c140 <_strtod_l+0xa68>
    c154:	2b10      	cmp	r3, #16
    c156:	bfdc      	itt	le
    c158:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    c15c:	ea4f 0949 	movle.w	r9, r9, lsl #1
    c160:	e7ef      	b.n	c142 <_strtod_l+0xa6a>
    c162:	3202      	adds	r2, #2
    c164:	2d08      	cmp	r5, #8
    c166:	dc3c      	bgt.n	c1e2 <_strtod_l+0xb0a>
    c168:	4615      	mov	r5, r2
    c16a:	f7ff bb79 	b.w	b860 <_strtod_l+0x188>
    c16e:	4989      	ldr	r1, [pc, #548]	; (c394 <_strtod_l+0xcbc>)
    c170:	2201      	movs	r2, #1
    c172:	4638      	mov	r0, r7
    c174:	f000 fd74 	bl	cc60 <strncmp>
    c178:	2800      	cmp	r0, #0
    c17a:	f000 8082 	beq.w	c282 <_strtod_l+0xbaa>
    c17e:	f04f 0e00 	mov.w	lr, #0
    c182:	46f1      	mov	r9, lr
    c184:	4676      	mov	r6, lr
    c186:	4675      	mov	r5, lr
    c188:	f7ff bbb5 	b.w	b8f6 <_strtod_l+0x21e>
    c18c:	f644 631f 	movw	r3, #19999	; 0x4e1f
    c190:	459b      	cmp	fp, r3
    c192:	bfa8      	it	ge
    c194:	469b      	movge	fp, r3
    c196:	e42f      	b.n	b9f8 <_strtod_l+0x320>
    c198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    c19c:	4618      	mov	r0, r3
    c19e:	2b00      	cmp	r3, #0
    c1a0:	f47f ae23 	bne.w	bdea <_strtod_l+0x712>
    c1a4:	2322      	movs	r3, #34	; 0x22
    c1a6:	ed9f 8b74 	vldr	d8, [pc, #464]	; c378 <_strtod_l+0xca0>
    c1aa:	9812      	ldr	r0, [sp, #72]	; 0x48
    c1ac:	f8c8 3000 	str.w	r3, [r8]
    c1b0:	e678      	b.n	bea4 <_strtod_l+0x7cc>
    c1b2:	eeb0 7b49 	vmov.f64	d7, d9
    c1b6:	e6c0      	b.n	bf3a <_strtod_l+0x862>
    c1b8:	4977      	ldr	r1, [pc, #476]	; (c398 <_strtod_l+0xcc0>)
    c1ba:	a811      	add	r0, sp, #68	; 0x44
    c1bc:	f001 fd74 	bl	dca8 <__match>
    c1c0:	2800      	cmp	r0, #0
    c1c2:	f43f ab71 	beq.w	b8a8 <_strtod_l+0x1d0>
    c1c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c1c8:	4974      	ldr	r1, [pc, #464]	; (c39c <_strtod_l+0xcc4>)
    c1ca:	3b01      	subs	r3, #1
    c1cc:	a811      	add	r0, sp, #68	; 0x44
    c1ce:	9311      	str	r3, [sp, #68]	; 0x44
    c1d0:	f001 fd6a 	bl	dca8 <__match>
    c1d4:	b910      	cbnz	r0, c1dc <_strtod_l+0xb04>
    c1d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c1d8:	3301      	adds	r3, #1
    c1da:	9311      	str	r3, [sp, #68]	; 0x44
    c1dc:	ed9f 8b68 	vldr	d8, [pc, #416]	; c380 <_strtod_l+0xca8>
    c1e0:	e437      	b.n	ba52 <_strtod_l+0x37a>
    c1e2:	2a10      	cmp	r2, #16
    c1e4:	bfdc      	itt	le
    c1e6:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    c1ea:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    c1ee:	4615      	mov	r5, r2
    c1f0:	2000      	movs	r0, #0
    c1f2:	f7ff bb3a 	b.w	b86a <_strtod_l+0x192>
    c1f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c1f8:	b13a      	cbz	r2, c20a <_strtod_l+0xb32>
    c1fa:	2135      	movs	r1, #53	; 0x35
    c1fc:	a814      	add	r0, sp, #80	; 0x50
    c1fe:	f002 fb37 	bl	e870 <__copybits>
    c202:	9912      	ldr	r1, [sp, #72]	; 0x48
    c204:	4640      	mov	r0, r8
    c206:	f001 fe7f 	bl	df08 <_Bfree>
    c20a:	3d01      	subs	r5, #1
    c20c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c20e:	2d04      	cmp	r5, #4
    c210:	f200 818f 	bhi.w	c532 <_strtod_l+0xe5a>
    c214:	e8df f005 	tbb	[pc, r5]
    c218:	1f2a2d03 	.word	0x1f2a2d03
    c21c:	03          	.byte	0x03
    c21d:	00          	.byte	0x00
    c21e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    c220:	9204      	str	r2, [sp, #16]
    c222:	f203 4233 	addw	r2, r3, #1075	; 0x433
    c226:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c228:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    c22c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    c230:	9305      	str	r3, [sp, #20]
    c232:	05e5      	lsls	r5, r4, #23
    c234:	d502      	bpl.n	c23c <_strtod_l+0xb64>
    c236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c23a:	9305      	str	r3, [sp, #20]
    c23c:	4a58      	ldr	r2, [pc, #352]	; (c3a0 <_strtod_l+0xcc8>)
    c23e:	401a      	ands	r2, r3
    c240:	ed9d 8b04 	vldr	d8, [sp, #16]
    c244:	2a00      	cmp	r2, #0
    c246:	f47f ac04 	bne.w	ba52 <_strtod_l+0x37a>
    c24a:	f000 fded 	bl	ce28 <__errno>
    c24e:	2322      	movs	r3, #34	; 0x22
    c250:	6003      	str	r3, [r0, #0]
    c252:	f7ff bbfe 	b.w	ba52 <_strtod_l+0x37a>
    c256:	f04f 33ff 	mov.w	r3, #4294967295
    c25a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    c25e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    c262:	05e3      	lsls	r3, r4, #23
    c264:	f57f af5c 	bpl.w	c120 <_strtod_l+0xa48>
    c268:	9b05      	ldr	r3, [sp, #20]
    c26a:	e7e4      	b.n	c236 <_strtod_l+0xb5e>
    c26c:	4b4c      	ldr	r3, [pc, #304]	; (c3a0 <_strtod_l+0xcc8>)
    c26e:	9305      	str	r3, [sp, #20]
    c270:	e7f7      	b.n	c262 <_strtod_l+0xb8a>
    c272:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c274:	9304      	str	r3, [sp, #16]
    c276:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c278:	9305      	str	r3, [sp, #20]
    c27a:	e7da      	b.n	c232 <_strtod_l+0xb5a>
    c27c:	2000      	movs	r0, #0
    c27e:	f7ff bae1 	b.w	b844 <_strtod_l+0x16c>
    c282:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c284:	461a      	mov	r2, r3
    c286:	3301      	adds	r3, #1
    c288:	9311      	str	r3, [sp, #68]	; 0x44
    c28a:	7854      	ldrb	r4, [r2, #1]
    c28c:	4606      	mov	r6, r0
    c28e:	4681      	mov	r9, r0
    c290:	f7ff bacd 	b.w	b82e <_strtod_l+0x156>
    c294:	4b43      	ldr	r3, [pc, #268]	; (c3a4 <_strtod_l+0xccc>)
    c296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c29a:	ed93 8b00 	vldr	d8, [r3]
    c29e:	ed9d 7b04 	vldr	d7, [sp, #16]
    c2a2:	ee28 8b07 	vmul.f64	d8, d8, d7
    c2a6:	f7ff bbd4 	b.w	ba52 <_strtod_l+0x37a>
    c2aa:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    c2ae:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    c2b2:	e511      	b.n	bcd8 <_strtod_l+0x600>
    c2b4:	46ae      	mov	lr, r5
    c2b6:	900b      	str	r0, [sp, #44]	; 0x2c
    c2b8:	f7ff badc 	b.w	b874 <_strtod_l+0x19c>
    c2bc:	4b39      	ldr	r3, [pc, #228]	; (c3a4 <_strtod_l+0xccc>)
    c2be:	f1c5 050f 	rsb	r5, r5, #15
    c2c2:	1b4a      	subs	r2, r1, r5
    c2c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    c2c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c2cc:	ed95 8b00 	vldr	d8, [r5]
    c2d0:	ed93 7b00 	vldr	d7, [r3]
    c2d4:	ed9d 6b04 	vldr	d6, [sp, #16]
    c2d8:	ee28 8b06 	vmul.f64	d8, d8, d6
    c2dc:	ee28 8b07 	vmul.f64	d8, d8, d7
    c2e0:	f7ff bbb7 	b.w	ba52 <_strtod_l+0x37a>
    c2e4:	2d00      	cmp	r5, #0
    c2e6:	f000 8095 	beq.w	c414 <_strtod_l+0xd3c>
    c2ea:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    c2ee:	4b2e      	ldr	r3, [pc, #184]	; (c3a8 <_strtod_l+0xcd0>)
    c2f0:	f3cc 0113 	ubfx	r1, ip, #0, #20
    c2f4:	4299      	cmp	r1, r3
    c2f6:	4662      	mov	r2, ip
    c2f8:	f000 80d2 	beq.w	c4a0 <_strtod_l+0xdc8>
    c2fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c2fe:	2b00      	cmp	r3, #0
    c300:	f000 80a5 	beq.w	c44e <_strtod_l+0xd76>
    c304:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    c308:	4213      	tst	r3, r2
    c30a:	4617      	mov	r7, r2
    c30c:	d01a      	beq.n	c344 <_strtod_l+0xc6c>
    c30e:	eeb0 0b48 	vmov.f64	d0, d8
    c312:	2d00      	cmp	r5, #0
    c314:	f000 80a6 	beq.w	c464 <_strtod_l+0xd8c>
    c318:	f002 f97a 	bl	e610 <__ulp>
    c31c:	9b08      	ldr	r3, [sp, #32]
    c31e:	b17b      	cbz	r3, c340 <_strtod_l+0xc68>
    c320:	f3c7 530a 	ubfx	r3, r7, #20, #11
    c324:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    c328:	2b00      	cmp	r3, #0
    c32a:	dd09      	ble.n	c340 <_strtod_l+0xc68>
    c32c:	051b      	lsls	r3, r3, #20
    c32e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    c332:	2000      	movs	r0, #0
    c334:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    c338:	ec41 0b17 	vmov	d7, r0, r1
    c33c:	ee20 0b07 	vmul.f64	d0, d0, d7
    c340:	ee38 8b00 	vadd.f64	d8, d8, d0
    c344:	9b08      	ldr	r3, [sp, #32]
    c346:	b15b      	cbz	r3, c360 <_strtod_l+0xc88>
    c348:	ed9f 7b0f 	vldr	d7, [pc, #60]	; c388 <_strtod_l+0xcb0>
    c34c:	4b14      	ldr	r3, [pc, #80]	; (c3a0 <_strtod_l+0xcc8>)
    c34e:	ee28 8b07 	vmul.f64	d8, d8, d7
    c352:	ee18 2a90 	vmov	r2, s17
    c356:	4013      	ands	r3, r2
    c358:	b913      	cbnz	r3, c360 <_strtod_l+0xc88>
    c35a:	2322      	movs	r3, #34	; 0x22
    c35c:	f8c8 3000 	str.w	r3, [r8]
    c360:	9812      	ldr	r0, [sp, #72]	; 0x48
    c362:	e59f      	b.n	bea4 <_strtod_l+0x7cc>
    c364:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    c368:	9305      	str	r3, [sp, #20]
    c36a:	2300      	movs	r3, #0
    c36c:	9308      	str	r3, [sp, #32]
    c36e:	f7ff bbb1 	b.w	bad4 <_strtod_l+0x3fc>
    c372:	bf00      	nop
    c374:	f3af 8000 	nop.w
	...
    c384:	7ff00000 	.word	0x7ff00000
    c388:	00000000 	.word	0x00000000
    c38c:	39500000 	.word	0x39500000
    c390:	20007cd4 	.word	0x20007cd4
    c394:	20008038 	.word	0x20008038
    c398:	20000edc 	.word	0x20000edc
    c39c:	20000ee0 	.word	0x20000ee0
    c3a0:	7ff00000 	.word	0x7ff00000
    c3a4:	200003a8 	.word	0x200003a8
    c3a8:	000fffff 	.word	0x000fffff
    c3ac:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    c3b0:	430d      	orrs	r5, r1
    c3b2:	d1c7      	bne.n	c344 <_strtod_l+0xc6c>
    c3b4:	f3c2 0313 	ubfx	r3, r2, #0, #20
    c3b8:	4617      	mov	r7, r2
    c3ba:	2b00      	cmp	r3, #0
    c3bc:	d1c2      	bne.n	c344 <_strtod_l+0xc6c>
    c3be:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    c3c2:	0d1b      	lsrs	r3, r3, #20
    c3c4:	051b      	lsls	r3, r3, #20
    c3c6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    c3ca:	d9bb      	bls.n	c344 <_strtod_l+0xc6c>
    c3cc:	f8da 3014 	ldr.w	r3, [sl, #20]
    c3d0:	b91b      	cbnz	r3, c3da <_strtod_l+0xd02>
    c3d2:	f8da 3010 	ldr.w	r3, [sl, #16]
    c3d6:	2b01      	cmp	r3, #1
    c3d8:	ddb4      	ble.n	c344 <_strtod_l+0xc6c>
    c3da:	4651      	mov	r1, sl
    c3dc:	2201      	movs	r2, #1
    c3de:	4640      	mov	r0, r8
    c3e0:	f001 ffd2 	bl	e388 <__lshift>
    c3e4:	4621      	mov	r1, r4
    c3e6:	4682      	mov	sl, r0
    c3e8:	f002 f846 	bl	e478 <__mcmp>
    c3ec:	2800      	cmp	r0, #0
    c3ee:	dda9      	ble.n	c344 <_strtod_l+0xc6c>
    c3f0:	9b08      	ldr	r3, [sp, #32]
    c3f2:	2b00      	cmp	r3, #0
    c3f4:	d17e      	bne.n	c4f4 <_strtod_l+0xe1c>
    c3f6:	4b50      	ldr	r3, [pc, #320]	; (c538 <_strtod_l+0xe60>)
    c3f8:	403b      	ands	r3, r7
    c3fa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    c3fe:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    c402:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    c406:	9305      	str	r3, [sp, #20]
    c408:	f04f 33ff 	mov.w	r3, #4294967295
    c40c:	9304      	str	r3, [sp, #16]
    c40e:	ed9d 8b04 	vldr	d8, [sp, #16]
    c412:	e797      	b.n	c344 <_strtod_l+0xc6c>
    c414:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    c418:	f3c2 0313 	ubfx	r3, r2, #0, #20
    c41c:	430b      	orrs	r3, r1
    c41e:	4617      	mov	r7, r2
    c420:	f47f af6c 	bne.w	c2fc <_strtod_l+0xc24>
    c424:	e7e4      	b.n	c3f0 <_strtod_l+0xd18>
    c426:	4945      	ldr	r1, [pc, #276]	; (c53c <_strtod_l+0xe64>)
    c428:	a811      	add	r0, sp, #68	; 0x44
    c42a:	aa14      	add	r2, sp, #80	; 0x50
    c42c:	f001 fc58 	bl	dce0 <__hexnan>
    c430:	2805      	cmp	r0, #5
    c432:	f47f ab06 	bne.w	ba42 <_strtod_l+0x36a>
    c436:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c438:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    c43c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    c440:	9305      	str	r3, [sp, #20]
    c442:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c444:	9304      	str	r3, [sp, #16]
    c446:	ed9d 8b04 	vldr	d8, [sp, #16]
    c44a:	f7ff bb02 	b.w	ba52 <_strtod_l+0x37a>
    c44e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c454:	4203      	tst	r3, r0
    c456:	f43f af75 	beq.w	c344 <_strtod_l+0xc6c>
    c45a:	460f      	mov	r7, r1
    c45c:	e757      	b.n	c30e <_strtod_l+0xc36>
    c45e:	4c38      	ldr	r4, [pc, #224]	; (c540 <_strtod_l+0xe68>)
    c460:	2100      	movs	r1, #0
    c462:	e58f      	b.n	bf84 <_strtod_l+0x8ac>
    c464:	f002 f8d4 	bl	e610 <__ulp>
    c468:	9b08      	ldr	r3, [sp, #32]
    c46a:	2b00      	cmp	r3, #0
    c46c:	d055      	beq.n	c51a <_strtod_l+0xe42>
    c46e:	f3c7 530a 	ubfx	r3, r7, #20, #11
    c472:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    c476:	2b00      	cmp	r3, #0
    c478:	dd09      	ble.n	c48e <_strtod_l+0xdb6>
    c47a:	051b      	lsls	r3, r3, #20
    c47c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    c480:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    c484:	4628      	mov	r0, r5
    c486:	ec41 0b17 	vmov	d7, r0, r1
    c48a:	ee20 0b07 	vmul.f64	d0, d0, d7
    c48e:	ee38 8b40 	vsub.f64	d8, d8, d0
    c492:	eeb5 8b40 	vcmp.f64	d8, #0.0
    c496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c49a:	f47f af55 	bne.w	c348 <_strtod_l+0xc70>
    c49e:	e681      	b.n	c1a4 <_strtod_l+0xacc>
    c4a0:	9b08      	ldr	r3, [sp, #32]
    c4a2:	9904      	ldr	r1, [sp, #16]
    c4a4:	b31b      	cbz	r3, c4ee <_strtod_l+0xe16>
    c4a6:	4b24      	ldr	r3, [pc, #144]	; (c538 <_strtod_l+0xe60>)
    c4a8:	4013      	ands	r3, r2
    c4aa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    c4ae:	d81e      	bhi.n	c4ee <_strtod_l+0xe16>
    c4b0:	0d1b      	lsrs	r3, r3, #20
    c4b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    c4b6:	f04f 30ff 	mov.w	r0, #4294967295
    c4ba:	fa00 f303 	lsl.w	r3, r0, r3
    c4be:	4299      	cmp	r1, r3
    c4c0:	f47f af1c 	bne.w	c2fc <_strtod_l+0xc24>
    c4c4:	4b1f      	ldr	r3, [pc, #124]	; (c544 <_strtod_l+0xe6c>)
    c4c6:	429a      	cmp	r2, r3
    c4c8:	d030      	beq.n	c52c <_strtod_l+0xe54>
    c4ca:	4b1b      	ldr	r3, [pc, #108]	; (c538 <_strtod_l+0xe60>)
    c4cc:	4013      	ands	r3, r2
    c4ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    c4d2:	9305      	str	r3, [sp, #20]
    c4d4:	2300      	movs	r3, #0
    c4d6:	9304      	str	r3, [sp, #16]
    c4d8:	ed9d 8b04 	vldr	d8, [sp, #16]
    c4dc:	e732      	b.n	c344 <_strtod_l+0xc6c>
    c4de:	f04f 32ff 	mov.w	r2, #4294967295
    c4e2:	fa02 f303 	lsl.w	r3, r2, r3
    c4e6:	9a04      	ldr	r2, [sp, #16]
    c4e8:	401a      	ands	r2, r3
    c4ea:	9204      	str	r2, [sp, #16]
    c4ec:	e5d0      	b.n	c090 <_strtod_l+0x9b8>
    c4ee:	f04f 33ff 	mov.w	r3, #4294967295
    c4f2:	e7e4      	b.n	c4be <_strtod_l+0xde6>
    c4f4:	4b10      	ldr	r3, [pc, #64]	; (c538 <_strtod_l+0xe60>)
    c4f6:	403b      	ands	r3, r7
    c4f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    c4fc:	f73f af7d 	bgt.w	c3fa <_strtod_l+0xd22>
    c500:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    c504:	f73f af20 	bgt.w	c348 <_strtod_l+0xc70>
    c508:	e64c      	b.n	c1a4 <_strtod_l+0xacc>
    c50a:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    c50e:	f04f 33ff 	mov.w	r3, #4294967295
    c512:	4093      	lsls	r3, r2
    c514:	400b      	ands	r3, r1
    c516:	9305      	str	r3, [sp, #20]
    c518:	e5ba      	b.n	c090 <_strtod_l+0x9b8>
    c51a:	ee38 8b40 	vsub.f64	d8, d8, d0
    c51e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    c522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c526:	f47f af1b 	bne.w	c360 <_strtod_l+0xc88>
    c52a:	e63b      	b.n	c1a4 <_strtod_l+0xacc>
    c52c:	3101      	adds	r1, #1
    c52e:	d1cc      	bne.n	c4ca <_strtod_l+0xdf2>
    c530:	e409      	b.n	bd46 <_strtod_l+0x66e>
    c532:	2300      	movs	r3, #0
    c534:	e67d      	b.n	c232 <_strtod_l+0xb5a>
    c536:	bf00      	nop
    c538:	7ff00000 	.word	0x7ff00000
    c53c:	20007ce8 	.word	0x20007ce8
    c540:	20000380 	.word	0x20000380
    c544:	7fefffff 	.word	0x7fefffff

0000c548 <_strtod_r>:
    c548:	4b01      	ldr	r3, [pc, #4]	; (c550 <_strtod_r+0x8>)
    c54a:	f7ff b8c5 	b.w	b6d8 <_strtod_l>
    c54e:	bf00      	nop
    c550:	200088ec 	.word	0x200088ec

0000c554 <_strtol_l.constprop.0>:
    c554:	2b01      	cmp	r3, #1
    c556:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c55a:	d040      	beq.n	c5de <_strtol_l.constprop.0+0x8a>
    c55c:	2b24      	cmp	r3, #36	; 0x24
    c55e:	4698      	mov	r8, r3
    c560:	d83d      	bhi.n	c5de <_strtol_l.constprop.0+0x8a>
    c562:	4d4c      	ldr	r5, [pc, #304]	; (c694 <_strtol_l.constprop.0+0x140>)
    c564:	468e      	mov	lr, r1
    c566:	4676      	mov	r6, lr
    c568:	f81e bb01 	ldrb.w	fp, [lr], #1
    c56c:	f815 400b 	ldrb.w	r4, [r5, fp]
    c570:	f014 0408 	ands.w	r4, r4, #8
    c574:	d1f7      	bne.n	c566 <_strtol_l.constprop.0+0x12>
    c576:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    c57a:	d072      	beq.n	c662 <_strtol_l.constprop.0+0x10e>
    c57c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    c580:	bf08      	it	eq
    c582:	f89e b000 	ldrbeq.w	fp, [lr]
    c586:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    c58a:	bf08      	it	eq
    c58c:	f106 0e02 	addeq.w	lr, r6, #2
    c590:	2b00      	cmp	r3, #0
    c592:	d042      	beq.n	c61a <_strtol_l.constprop.0+0xc6>
    c594:	2b10      	cmp	r3, #16
    c596:	d057      	beq.n	c648 <_strtol_l.constprop.0+0xf4>
    c598:	fbb9 f7f8 	udiv	r7, r9, r8
    c59c:	2500      	movs	r5, #0
    c59e:	462e      	mov	r6, r5
    c5a0:	fb08 9a17 	mls	sl, r8, r7, r9
    c5a4:	e005      	b.n	c5b2 <_strtol_l.constprop.0+0x5e>
    c5a6:	d033      	beq.n	c610 <_strtol_l.constprop.0+0xbc>
    c5a8:	fb08 c606 	mla	r6, r8, r6, ip
    c5ac:	2501      	movs	r5, #1
    c5ae:	f81e bb01 	ldrb.w	fp, [lr], #1
    c5b2:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    c5b6:	f1bc 0f09 	cmp.w	ip, #9
    c5ba:	d906      	bls.n	c5ca <_strtol_l.constprop.0+0x76>
    c5bc:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    c5c0:	f1bc 0f19 	cmp.w	ip, #25
    c5c4:	d812      	bhi.n	c5ec <_strtol_l.constprop.0+0x98>
    c5c6:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    c5ca:	4563      	cmp	r3, ip
    c5cc:	dd17      	ble.n	c5fe <_strtol_l.constprop.0+0xaa>
    c5ce:	f1b5 3fff 	cmp.w	r5, #4294967295
    c5d2:	d0ec      	beq.n	c5ae <_strtol_l.constprop.0+0x5a>
    c5d4:	42b7      	cmp	r7, r6
    c5d6:	d2e6      	bcs.n	c5a6 <_strtol_l.constprop.0+0x52>
    c5d8:	f04f 35ff 	mov.w	r5, #4294967295
    c5dc:	e7e7      	b.n	c5ae <_strtol_l.constprop.0+0x5a>
    c5de:	f000 fc23 	bl	ce28 <__errno>
    c5e2:	2316      	movs	r3, #22
    c5e4:	6003      	str	r3, [r0, #0]
    c5e6:	2000      	movs	r0, #0
    c5e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5ec:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    c5f0:	f1bc 0f19 	cmp.w	ip, #25
    c5f4:	d803      	bhi.n	c5fe <_strtol_l.constprop.0+0xaa>
    c5f6:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    c5fa:	4563      	cmp	r3, ip
    c5fc:	dce7      	bgt.n	c5ce <_strtol_l.constprop.0+0x7a>
    c5fe:	1c6b      	adds	r3, r5, #1
    c600:	d027      	beq.n	c652 <_strtol_l.constprop.0+0xfe>
    c602:	b98c      	cbnz	r4, c628 <_strtol_l.constprop.0+0xd4>
    c604:	b10a      	cbz	r2, c60a <_strtol_l.constprop.0+0xb6>
    c606:	bba5      	cbnz	r5, c672 <_strtol_l.constprop.0+0x11e>
    c608:	6011      	str	r1, [r2, #0]
    c60a:	4630      	mov	r0, r6
    c60c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c610:	45e2      	cmp	sl, ip
    c612:	dac9      	bge.n	c5a8 <_strtol_l.constprop.0+0x54>
    c614:	f04f 35ff 	mov.w	r5, #4294967295
    c618:	e7c9      	b.n	c5ae <_strtol_l.constprop.0+0x5a>
    c61a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    c61e:	d005      	beq.n	c62c <_strtol_l.constprop.0+0xd8>
    c620:	f04f 080a 	mov.w	r8, #10
    c624:	4643      	mov	r3, r8
    c626:	e7b7      	b.n	c598 <_strtol_l.constprop.0+0x44>
    c628:	4276      	negs	r6, r6
    c62a:	e7eb      	b.n	c604 <_strtol_l.constprop.0+0xb0>
    c62c:	f89e 3000 	ldrb.w	r3, [lr]
    c630:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c634:	2b58      	cmp	r3, #88	; 0x58
    c636:	d121      	bne.n	c67c <_strtol_l.constprop.0+0x128>
    c638:	f04f 0810 	mov.w	r8, #16
    c63c:	f89e b001 	ldrb.w	fp, [lr, #1]
    c640:	4643      	mov	r3, r8
    c642:	f10e 0e02 	add.w	lr, lr, #2
    c646:	e7a7      	b.n	c598 <_strtol_l.constprop.0+0x44>
    c648:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    c64c:	d01a      	beq.n	c684 <_strtol_l.constprop.0+0x130>
    c64e:	4698      	mov	r8, r3
    c650:	e7a2      	b.n	c598 <_strtol_l.constprop.0+0x44>
    c652:	2322      	movs	r3, #34	; 0x22
    c654:	6003      	str	r3, [r0, #0]
    c656:	b172      	cbz	r2, c676 <_strtol_l.constprop.0+0x122>
    c658:	f10e 31ff 	add.w	r1, lr, #4294967295
    c65c:	464e      	mov	r6, r9
    c65e:	6011      	str	r1, [r2, #0]
    c660:	e7d3      	b.n	c60a <_strtol_l.constprop.0+0xb6>
    c662:	f89e b000 	ldrb.w	fp, [lr]
    c666:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    c66a:	f106 0e02 	add.w	lr, r6, #2
    c66e:	2401      	movs	r4, #1
    c670:	e78e      	b.n	c590 <_strtol_l.constprop.0+0x3c>
    c672:	46b1      	mov	r9, r6
    c674:	e7f0      	b.n	c658 <_strtol_l.constprop.0+0x104>
    c676:	464e      	mov	r6, r9
    c678:	4630      	mov	r0, r6
    c67a:	e7c7      	b.n	c60c <_strtol_l.constprop.0+0xb8>
    c67c:	f04f 0808 	mov.w	r8, #8
    c680:	4643      	mov	r3, r8
    c682:	e789      	b.n	c598 <_strtol_l.constprop.0+0x44>
    c684:	f89e 5000 	ldrb.w	r5, [lr]
    c688:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    c68c:	2d58      	cmp	r5, #88	; 0x58
    c68e:	d0d3      	beq.n	c638 <_strtol_l.constprop.0+0xe4>
    c690:	4698      	mov	r8, r3
    c692:	e781      	b.n	c598 <_strtol_l.constprop.0+0x44>
    c694:	20000d59 	.word	0x20000d59

0000c698 <_strtol_r>:
    c698:	f7ff bf5c 	b.w	c554 <_strtol_l.constprop.0>

0000c69c <__cxa_atexit>:
    c69c:	4613      	mov	r3, r2
    c69e:	460a      	mov	r2, r1
    c6a0:	4601      	mov	r1, r0
    c6a2:	2002      	movs	r0, #2
    c6a4:	f000 be4a 	b.w	d33c <__register_exitproc>

0000c6a8 <stdio_exit_handler>:
    c6a8:	4a02      	ldr	r2, [pc, #8]	; (c6b4 <stdio_exit_handler+0xc>)
    c6aa:	4903      	ldr	r1, [pc, #12]	; (c6b8 <stdio_exit_handler+0x10>)
    c6ac:	4803      	ldr	r0, [pc, #12]	; (c6bc <stdio_exit_handler+0x14>)
    c6ae:	f000 b8bb 	b.w	c828 <_fwalk_sglue>
    c6b2:	bf00      	nop
    c6b4:	20008e68 	.word	0x20008e68
    c6b8:	00011ce5 	.word	0x00011ce5
    c6bc:	20008790 	.word	0x20008790

0000c6c0 <cleanup_stdio>:
    c6c0:	4b0c      	ldr	r3, [pc, #48]	; (c6f4 <cleanup_stdio+0x34>)
    c6c2:	6841      	ldr	r1, [r0, #4]
    c6c4:	4299      	cmp	r1, r3
    c6c6:	b510      	push	{r4, lr}
    c6c8:	4604      	mov	r4, r0
    c6ca:	d001      	beq.n	c6d0 <cleanup_stdio+0x10>
    c6cc:	f005 fb0a 	bl	11ce4 <_fclose_r>
    c6d0:	68a1      	ldr	r1, [r4, #8]
    c6d2:	4b09      	ldr	r3, [pc, #36]	; (c6f8 <cleanup_stdio+0x38>)
    c6d4:	4299      	cmp	r1, r3
    c6d6:	d002      	beq.n	c6de <cleanup_stdio+0x1e>
    c6d8:	4620      	mov	r0, r4
    c6da:	f005 fb03 	bl	11ce4 <_fclose_r>
    c6de:	68e1      	ldr	r1, [r4, #12]
    c6e0:	4b06      	ldr	r3, [pc, #24]	; (c6fc <cleanup_stdio+0x3c>)
    c6e2:	4299      	cmp	r1, r3
    c6e4:	d004      	beq.n	c6f0 <cleanup_stdio+0x30>
    c6e6:	4620      	mov	r0, r4
    c6e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c6ec:	f005 bafa 	b.w	11ce4 <_fclose_r>
    c6f0:	bd10      	pop	{r4, pc}
    c6f2:	bf00      	nop
    c6f4:	20020370 	.word	0x20020370
    c6f8:	200203d8 	.word	0x200203d8
    c6fc:	20020440 	.word	0x20020440

0000c700 <global_stdio_init.part.0>:
    c700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c704:	4c2a      	ldr	r4, [pc, #168]	; (c7b0 <global_stdio_init.part.0+0xb0>)
    c706:	4b2b      	ldr	r3, [pc, #172]	; (c7b4 <global_stdio_init.part.0+0xb4>)
    c708:	482b      	ldr	r0, [pc, #172]	; (c7b8 <global_stdio_init.part.0+0xb8>)
    c70a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; c7cc <global_stdio_init.part.0+0xcc>
    c70e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; c7d0 <global_stdio_init.part.0+0xd0>
    c712:	4f2a      	ldr	r7, [pc, #168]	; (c7bc <global_stdio_init.part.0+0xbc>)
    c714:	6018      	str	r0, [r3, #0]
    c716:	2500      	movs	r5, #0
    c718:	2304      	movs	r3, #4
    c71a:	2208      	movs	r2, #8
    c71c:	4629      	mov	r1, r5
    c71e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c722:	4e27      	ldr	r6, [pc, #156]	; (c7c0 <global_stdio_init.part.0+0xc0>)
    c724:	6665      	str	r5, [r4, #100]	; 0x64
    c726:	e9c4 5302 	strd	r5, r3, [r4, #8]
    c72a:	e9c4 5500 	strd	r5, r5, [r4]
    c72e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    c732:	61a5      	str	r5, [r4, #24]
    c734:	f000 fa42 	bl	cbbc <memset>
    c738:	4b22      	ldr	r3, [pc, #136]	; (c7c4 <global_stdio_init.part.0+0xc4>)
    c73a:	6763      	str	r3, [r4, #116]	; 0x74
    c73c:	2208      	movs	r2, #8
    c73e:	4629      	mov	r1, r5
    c740:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    c744:	e9c4 4907 	strd	r4, r9, [r4, #28]
    c748:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    c74c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    c750:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    c754:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    c758:	6725      	str	r5, [r4, #112]	; 0x70
    c75a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    c75e:	62e6      	str	r6, [r4, #44]	; 0x2c
    c760:	f000 fa2c 	bl	cbbc <memset>
    c764:	4b18      	ldr	r3, [pc, #96]	; (c7c8 <global_stdio_init.part.0+0xc8>)
    c766:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    c76a:	4629      	mov	r1, r5
    c76c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    c770:	2208      	movs	r2, #8
    c772:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    c776:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    c77a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    c77e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    c782:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    c786:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    c78a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    c78e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    c792:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    c796:	f000 fa11 	bl	cbbc <memset>
    c79a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    c79e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    c7a2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    c7a6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    c7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c7ae:	bf00      	nop
    c7b0:	20020370 	.word	0x20020370
    c7b4:	200204a8 	.word	0x200204a8
    c7b8:	0000c6a9 	.word	0x0000c6a9
    c7bc:	0000c971 	.word	0x0000c971
    c7c0:	0000c991 	.word	0x0000c991
    c7c4:	00010009 	.word	0x00010009
    c7c8:	00020012 	.word	0x00020012
    c7cc:	0000c909 	.word	0x0000c909
    c7d0:	0000c931 	.word	0x0000c931

0000c7d4 <__sinit>:
    c7d4:	b510      	push	{r4, lr}
    c7d6:	4604      	mov	r4, r0
    c7d8:	480a      	ldr	r0, [pc, #40]	; (c804 <__sinit+0x30>)
    c7da:	f000 fb53 	bl	ce84 <__retarget_lock_acquire_recursive>
    c7de:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c7e0:	b923      	cbnz	r3, c7ec <__sinit+0x18>
    c7e2:	4b09      	ldr	r3, [pc, #36]	; (c808 <__sinit+0x34>)
    c7e4:	4a09      	ldr	r2, [pc, #36]	; (c80c <__sinit+0x38>)
    c7e6:	681b      	ldr	r3, [r3, #0]
    c7e8:	6362      	str	r2, [r4, #52]	; 0x34
    c7ea:	b123      	cbz	r3, c7f6 <__sinit+0x22>
    c7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c7f0:	4804      	ldr	r0, [pc, #16]	; (c804 <__sinit+0x30>)
    c7f2:	f000 bb49 	b.w	ce88 <__retarget_lock_release_recursive>
    c7f6:	f7ff ff83 	bl	c700 <global_stdio_init.part.0>
    c7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c7fe:	4801      	ldr	r0, [pc, #4]	; (c804 <__sinit+0x30>)
    c800:	f000 bb42 	b.w	ce88 <__retarget_lock_release_recursive>
    c804:	20020338 	.word	0x20020338
    c808:	200204a8 	.word	0x200204a8
    c80c:	0000c6c1 	.word	0x0000c6c1

0000c810 <__sfp_lock_acquire>:
    c810:	4801      	ldr	r0, [pc, #4]	; (c818 <__sfp_lock_acquire+0x8>)
    c812:	f000 bb37 	b.w	ce84 <__retarget_lock_acquire_recursive>
    c816:	bf00      	nop
    c818:	20020338 	.word	0x20020338

0000c81c <__sfp_lock_release>:
    c81c:	4801      	ldr	r0, [pc, #4]	; (c824 <__sfp_lock_release+0x8>)
    c81e:	f000 bb33 	b.w	ce88 <__retarget_lock_release_recursive>
    c822:	bf00      	nop
    c824:	20020338 	.word	0x20020338

0000c828 <_fwalk_sglue>:
    c828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c82c:	4680      	mov	r8, r0
    c82e:	460f      	mov	r7, r1
    c830:	4616      	mov	r6, r2
    c832:	f04f 0900 	mov.w	r9, #0
    c836:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    c83a:	3d01      	subs	r5, #1
    c83c:	d411      	bmi.n	c862 <_fwalk_sglue+0x3a>
    c83e:	89a3      	ldrh	r3, [r4, #12]
    c840:	2b01      	cmp	r3, #1
    c842:	f105 35ff 	add.w	r5, r5, #4294967295
    c846:	d908      	bls.n	c85a <_fwalk_sglue+0x32>
    c848:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    c84c:	3301      	adds	r3, #1
    c84e:	4621      	mov	r1, r4
    c850:	d003      	beq.n	c85a <_fwalk_sglue+0x32>
    c852:	4640      	mov	r0, r8
    c854:	47b8      	blx	r7
    c856:	ea49 0900 	orr.w	r9, r9, r0
    c85a:	1c6b      	adds	r3, r5, #1
    c85c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    c860:	d1ed      	bne.n	c83e <_fwalk_sglue+0x16>
    c862:	6836      	ldr	r6, [r6, #0]
    c864:	2e00      	cmp	r6, #0
    c866:	d1e6      	bne.n	c836 <_fwalk_sglue+0xe>
    c868:	4648      	mov	r0, r9
    c86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c86e:	bf00      	nop

0000c870 <sprintf>:
    c870:	b40e      	push	{r1, r2, r3}
    c872:	b510      	push	{r4, lr}
    c874:	b09d      	sub	sp, #116	; 0x74
    c876:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c87a:	ab1f      	add	r3, sp, #124	; 0x7c
    c87c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    c880:	9104      	str	r1, [sp, #16]
    c882:	4909      	ldr	r1, [pc, #36]	; (c8a8 <sprintf+0x38>)
    c884:	f853 2b04 	ldr.w	r2, [r3], #4
    c888:	9002      	str	r0, [sp, #8]
    c88a:	4c08      	ldr	r4, [pc, #32]	; (c8ac <sprintf+0x3c>)
    c88c:	6808      	ldr	r0, [r1, #0]
    c88e:	9301      	str	r3, [sp, #4]
    c890:	a902      	add	r1, sp, #8
    c892:	9405      	str	r4, [sp, #20]
    c894:	f002 f85c 	bl	e950 <_svfprintf_r>
    c898:	9b02      	ldr	r3, [sp, #8]
    c89a:	2200      	movs	r2, #0
    c89c:	701a      	strb	r2, [r3, #0]
    c89e:	b01d      	add	sp, #116	; 0x74
    c8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c8a4:	b003      	add	sp, #12
    c8a6:	4770      	bx	lr
    c8a8:	20008e74 	.word	0x20008e74
    c8ac:	ffff0208 	.word	0xffff0208

0000c8b0 <sscanf>:
    c8b0:	b40e      	push	{r1, r2, r3}
    c8b2:	b510      	push	{r4, lr}
    c8b4:	b09f      	sub	sp, #124	; 0x7c
    c8b6:	ac21      	add	r4, sp, #132	; 0x84
    c8b8:	f44f 7101 	mov.w	r1, #516	; 0x204
    c8bc:	f854 2b04 	ldr.w	r2, [r4], #4
    c8c0:	9201      	str	r2, [sp, #4]
    c8c2:	f8ad 101c 	strh.w	r1, [sp, #28]
    c8c6:	9004      	str	r0, [sp, #16]
    c8c8:	9008      	str	r0, [sp, #32]
    c8ca:	f000 fcb9 	bl	d240 <strlen>
    c8ce:	9005      	str	r0, [sp, #20]
    c8d0:	9009      	str	r0, [sp, #36]	; 0x24
    c8d2:	480b      	ldr	r0, [pc, #44]	; (c900 <sscanf+0x50>)
    c8d4:	490b      	ldr	r1, [pc, #44]	; (c904 <sscanf+0x54>)
    c8d6:	910c      	str	r1, [sp, #48]	; 0x30
    c8d8:	2300      	movs	r3, #0
    c8da:	f64f 7cff 	movw	ip, #65535	; 0xffff
    c8de:	9310      	str	r3, [sp, #64]	; 0x40
    c8e0:	9315      	str	r3, [sp, #84]	; 0x54
    c8e2:	9a01      	ldr	r2, [sp, #4]
    c8e4:	6800      	ldr	r0, [r0, #0]
    c8e6:	f8ad c01e 	strh.w	ip, [sp, #30]
    c8ea:	4623      	mov	r3, r4
    c8ec:	a904      	add	r1, sp, #16
    c8ee:	9403      	str	r4, [sp, #12]
    c8f0:	f003 fdd0 	bl	10494 <__ssvfscanf_r>
    c8f4:	b01f      	add	sp, #124	; 0x7c
    c8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c8fa:	b003      	add	sp, #12
    c8fc:	4770      	bx	lr
    c8fe:	bf00      	nop
    c900:	20008e74 	.word	0x20008e74
    c904:	0000c92d 	.word	0x0000c92d

0000c908 <__sread>:
    c908:	b510      	push	{r4, lr}
    c90a:	460c      	mov	r4, r1
    c90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c910:	f000 fa4c 	bl	cdac <_read_r>
    c914:	2800      	cmp	r0, #0
    c916:	db03      	blt.n	c920 <__sread+0x18>
    c918:	6d23      	ldr	r3, [r4, #80]	; 0x50
    c91a:	4403      	add	r3, r0
    c91c:	6523      	str	r3, [r4, #80]	; 0x50
    c91e:	bd10      	pop	{r4, pc}
    c920:	89a3      	ldrh	r3, [r4, #12]
    c922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    c926:	81a3      	strh	r3, [r4, #12]
    c928:	bd10      	pop	{r4, pc}
    c92a:	bf00      	nop

0000c92c <__seofread>:
    c92c:	2000      	movs	r0, #0
    c92e:	4770      	bx	lr

0000c930 <__swrite>:
    c930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c934:	460c      	mov	r4, r1
    c936:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    c93a:	461f      	mov	r7, r3
    c93c:	05cb      	lsls	r3, r1, #23
    c93e:	4605      	mov	r5, r0
    c940:	4616      	mov	r6, r2
    c942:	d40b      	bmi.n	c95c <__swrite+0x2c>
    c944:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    c948:	81a1      	strh	r1, [r4, #12]
    c94a:	463b      	mov	r3, r7
    c94c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c950:	4632      	mov	r2, r6
    c952:	4628      	mov	r0, r5
    c954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c958:	f000 ba50 	b.w	cdfc <_write_r>
    c95c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c960:	2302      	movs	r3, #2
    c962:	2200      	movs	r2, #0
    c964:	f000 fa0c 	bl	cd80 <_lseek_r>
    c968:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    c96c:	e7ea      	b.n	c944 <__swrite+0x14>
    c96e:	bf00      	nop

0000c970 <__sseek>:
    c970:	b510      	push	{r4, lr}
    c972:	460c      	mov	r4, r1
    c974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c978:	f000 fa02 	bl	cd80 <_lseek_r>
    c97c:	89a3      	ldrh	r3, [r4, #12]
    c97e:	1c42      	adds	r2, r0, #1
    c980:	bf0e      	itee	eq
    c982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    c986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    c98a:	6520      	strne	r0, [r4, #80]	; 0x50
    c98c:	81a3      	strh	r3, [r4, #12]
    c98e:	bd10      	pop	{r4, pc}

0000c990 <__sclose>:
    c990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c994:	f000 b9e2 	b.w	cd5c <_close_r>

0000c998 <_vdprintf_r>:
    c998:	b5f0      	push	{r4, r5, r6, r7, lr}
    c99a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    c99e:	af04      	add	r7, sp, #16
    c9a0:	9300      	str	r3, [sp, #0]
    c9a2:	4613      	mov	r3, r2
    c9a4:	f44f 7200 	mov.w	r2, #512	; 0x200
    c9a8:	460e      	mov	r6, r1
    c9aa:	9203      	str	r2, [sp, #12]
    c9ac:	4639      	mov	r1, r7
    c9ae:	aa03      	add	r2, sp, #12
    c9b0:	4605      	mov	r5, r0
    c9b2:	f000 f825 	bl	ca00 <_vasnprintf_r>
    c9b6:	b188      	cbz	r0, c9dc <_vdprintf_r+0x44>
    c9b8:	4604      	mov	r4, r0
    c9ba:	4602      	mov	r2, r0
    c9bc:	9b03      	ldr	r3, [sp, #12]
    c9be:	4631      	mov	r1, r6
    c9c0:	4628      	mov	r0, r5
    c9c2:	f000 fa1b 	bl	cdfc <_write_r>
    c9c6:	42bc      	cmp	r4, r7
    c9c8:	9003      	str	r0, [sp, #12]
    c9ca:	d004      	beq.n	c9d6 <_vdprintf_r+0x3e>
    c9cc:	4628      	mov	r0, r5
    c9ce:	4621      	mov	r1, r4
    c9d0:	f000 fd48 	bl	d464 <_free_r>
    c9d4:	9803      	ldr	r0, [sp, #12]
    c9d6:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    c9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c9dc:	f04f 30ff 	mov.w	r0, #4294967295
    c9e0:	e7f9      	b.n	c9d6 <_vdprintf_r+0x3e>
    c9e2:	bf00      	nop

0000c9e4 <vdprintf>:
    c9e4:	b410      	push	{r4}
    c9e6:	4c05      	ldr	r4, [pc, #20]	; (c9fc <vdprintf+0x18>)
    c9e8:	4684      	mov	ip, r0
    c9ea:	4613      	mov	r3, r2
    c9ec:	6820      	ldr	r0, [r4, #0]
    c9ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    c9f2:	460a      	mov	r2, r1
    c9f4:	4661      	mov	r1, ip
    c9f6:	f7ff bfcf 	b.w	c998 <_vdprintf_r>
    c9fa:	bf00      	nop
    c9fc:	20008e74 	.word	0x20008e74

0000ca00 <_vasnprintf_r>:
    ca00:	b530      	push	{r4, r5, lr}
    ca02:	6814      	ldr	r4, [r2, #0]
    ca04:	4615      	mov	r5, r2
    ca06:	b09b      	sub	sp, #108	; 0x6c
    ca08:	461a      	mov	r2, r3
    ca0a:	b109      	cbz	r1, ca10 <_vasnprintf_r+0x10>
    ca0c:	2c00      	cmp	r4, #0
    ca0e:	d119      	bne.n	ca44 <_vasnprintf_r+0x44>
    ca10:	2100      	movs	r1, #0
    ca12:	f44f 7322 	mov.w	r3, #648	; 0x288
    ca16:	f8ad 300c 	strh.w	r3, [sp, #12]
    ca1a:	9100      	str	r1, [sp, #0]
    ca1c:	9104      	str	r1, [sp, #16]
    ca1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ca22:	9102      	str	r1, [sp, #8]
    ca24:	9105      	str	r1, [sp, #20]
    ca26:	f8ad 300e 	strh.w	r3, [sp, #14]
    ca2a:	4669      	mov	r1, sp
    ca2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ca2e:	f001 ff8f 	bl	e950 <_svfprintf_r>
    ca32:	2800      	cmp	r0, #0
    ca34:	db13      	blt.n	ca5e <_vasnprintf_r+0x5e>
    ca36:	9b00      	ldr	r3, [sp, #0]
    ca38:	6028      	str	r0, [r5, #0]
    ca3a:	2200      	movs	r2, #0
    ca3c:	701a      	strb	r2, [r3, #0]
    ca3e:	9804      	ldr	r0, [sp, #16]
    ca40:	b01b      	add	sp, #108	; 0x6c
    ca42:	bd30      	pop	{r4, r5, pc}
    ca44:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    ca48:	9100      	str	r1, [sp, #0]
    ca4a:	9104      	str	r1, [sp, #16]
    ca4c:	f8ad 300c 	strh.w	r3, [sp, #12]
    ca50:	4621      	mov	r1, r4
    ca52:	dae4      	bge.n	ca1e <_vasnprintf_r+0x1e>
    ca54:	238b      	movs	r3, #139	; 0x8b
    ca56:	6003      	str	r3, [r0, #0]
    ca58:	2000      	movs	r0, #0
    ca5a:	b01b      	add	sp, #108	; 0x6c
    ca5c:	bd30      	pop	{r4, r5, pc}
    ca5e:	2000      	movs	r0, #0
    ca60:	e7ee      	b.n	ca40 <_vasnprintf_r+0x40>
    ca62:	bf00      	nop

0000ca64 <memcmp>:
    ca64:	2a03      	cmp	r2, #3
    ca66:	b570      	push	{r4, r5, r6, lr}
    ca68:	d914      	bls.n	ca94 <memcmp+0x30>
    ca6a:	ea40 0301 	orr.w	r3, r0, r1
    ca6e:	079b      	lsls	r3, r3, #30
    ca70:	d122      	bne.n	cab8 <memcmp+0x54>
    ca72:	4604      	mov	r4, r0
    ca74:	460b      	mov	r3, r1
    ca76:	4619      	mov	r1, r3
    ca78:	4620      	mov	r0, r4
    ca7a:	680e      	ldr	r6, [r1, #0]
    ca7c:	6805      	ldr	r5, [r0, #0]
    ca7e:	42b5      	cmp	r5, r6
    ca80:	f104 0404 	add.w	r4, r4, #4
    ca84:	f103 0304 	add.w	r3, r3, #4
    ca88:	d116      	bne.n	cab8 <memcmp+0x54>
    ca8a:	3a04      	subs	r2, #4
    ca8c:	2a03      	cmp	r2, #3
    ca8e:	4620      	mov	r0, r4
    ca90:	4619      	mov	r1, r3
    ca92:	d8f0      	bhi.n	ca76 <memcmp+0x12>
    ca94:	1e54      	subs	r4, r2, #1
    ca96:	b19a      	cbz	r2, cac0 <memcmp+0x5c>
    ca98:	1e42      	subs	r2, r0, #1
    ca9a:	3901      	subs	r1, #1
    ca9c:	e001      	b.n	caa2 <memcmp+0x3e>
    ca9e:	18c3      	adds	r3, r0, r3
    caa0:	d00c      	beq.n	cabc <memcmp+0x58>
    caa2:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    caa6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    caaa:	45e6      	cmp	lr, ip
    caac:	eba4 0302 	sub.w	r3, r4, r2
    cab0:	d0f5      	beq.n	ca9e <memcmp+0x3a>
    cab2:	ebae 000c 	sub.w	r0, lr, ip
    cab6:	bd70      	pop	{r4, r5, r6, pc}
    cab8:	1e54      	subs	r4, r2, #1
    caba:	e7ed      	b.n	ca98 <memcmp+0x34>
    cabc:	4618      	mov	r0, r3
    cabe:	bd70      	pop	{r4, r5, r6, pc}
    cac0:	4610      	mov	r0, r2
    cac2:	bd70      	pop	{r4, r5, r6, pc}

0000cac4 <memmove>:
    cac4:	4288      	cmp	r0, r1
    cac6:	d90d      	bls.n	cae4 <memmove+0x20>
    cac8:	188b      	adds	r3, r1, r2
    caca:	4283      	cmp	r3, r0
    cacc:	d90a      	bls.n	cae4 <memmove+0x20>
    cace:	eb00 0c02 	add.w	ip, r0, r2
    cad2:	b1ba      	cbz	r2, cb04 <memmove+0x40>
    cad4:	4662      	mov	r2, ip
    cad6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    cada:	f802 cd01 	strb.w	ip, [r2, #-1]!
    cade:	4299      	cmp	r1, r3
    cae0:	d1f9      	bne.n	cad6 <memmove+0x12>
    cae2:	4770      	bx	lr
    cae4:	2a0f      	cmp	r2, #15
    cae6:	d80e      	bhi.n	cb06 <memmove+0x42>
    cae8:	4603      	mov	r3, r0
    caea:	f102 3cff 	add.w	ip, r2, #4294967295
    caee:	b14a      	cbz	r2, cb04 <memmove+0x40>
    caf0:	f10c 0c01 	add.w	ip, ip, #1
    caf4:	3b01      	subs	r3, #1
    caf6:	448c      	add	ip, r1
    caf8:	f811 2b01 	ldrb.w	r2, [r1], #1
    cafc:	f803 2f01 	strb.w	r2, [r3, #1]!
    cb00:	4561      	cmp	r1, ip
    cb02:	d1f9      	bne.n	caf8 <memmove+0x34>
    cb04:	4770      	bx	lr
    cb06:	ea40 0301 	orr.w	r3, r0, r1
    cb0a:	079b      	lsls	r3, r3, #30
    cb0c:	d150      	bne.n	cbb0 <memmove+0xec>
    cb0e:	f1a2 0310 	sub.w	r3, r2, #16
    cb12:	b570      	push	{r4, r5, r6, lr}
    cb14:	f101 0c20 	add.w	ip, r1, #32
    cb18:	f023 050f 	bic.w	r5, r3, #15
    cb1c:	f101 0e10 	add.w	lr, r1, #16
    cb20:	f100 0410 	add.w	r4, r0, #16
    cb24:	44ac      	add	ip, r5
    cb26:	091b      	lsrs	r3, r3, #4
    cb28:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    cb2c:	f844 5c10 	str.w	r5, [r4, #-16]
    cb30:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    cb34:	f844 5c0c 	str.w	r5, [r4, #-12]
    cb38:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    cb3c:	f844 5c08 	str.w	r5, [r4, #-8]
    cb40:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    cb44:	f844 5c04 	str.w	r5, [r4, #-4]
    cb48:	f10e 0e10 	add.w	lr, lr, #16
    cb4c:	45e6      	cmp	lr, ip
    cb4e:	f104 0410 	add.w	r4, r4, #16
    cb52:	d1e9      	bne.n	cb28 <memmove+0x64>
    cb54:	3301      	adds	r3, #1
    cb56:	f012 0f0c 	tst.w	r2, #12
    cb5a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    cb5e:	f002 040f 	and.w	r4, r2, #15
    cb62:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    cb66:	d027      	beq.n	cbb8 <memmove+0xf4>
    cb68:	3c04      	subs	r4, #4
    cb6a:	f024 0603 	bic.w	r6, r4, #3
    cb6e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    cb72:	441e      	add	r6, r3
    cb74:	1f1c      	subs	r4, r3, #4
    cb76:	468e      	mov	lr, r1
    cb78:	f85e 5b04 	ldr.w	r5, [lr], #4
    cb7c:	f844 5f04 	str.w	r5, [r4, #4]!
    cb80:	42b4      	cmp	r4, r6
    cb82:	d1f9      	bne.n	cb78 <memmove+0xb4>
    cb84:	f10c 0401 	add.w	r4, ip, #1
    cb88:	f002 0203 	and.w	r2, r2, #3
    cb8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    cb90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    cb94:	f102 3cff 	add.w	ip, r2, #4294967295
    cb98:	b14a      	cbz	r2, cbae <memmove+0xea>
    cb9a:	f10c 0c01 	add.w	ip, ip, #1
    cb9e:	3b01      	subs	r3, #1
    cba0:	448c      	add	ip, r1
    cba2:	f811 2b01 	ldrb.w	r2, [r1], #1
    cba6:	f803 2f01 	strb.w	r2, [r3, #1]!
    cbaa:	4561      	cmp	r1, ip
    cbac:	d1f9      	bne.n	cba2 <memmove+0xde>
    cbae:	bd70      	pop	{r4, r5, r6, pc}
    cbb0:	f102 3cff 	add.w	ip, r2, #4294967295
    cbb4:	4603      	mov	r3, r0
    cbb6:	e79b      	b.n	caf0 <memmove+0x2c>
    cbb8:	4622      	mov	r2, r4
    cbba:	e7eb      	b.n	cb94 <memmove+0xd0>

0000cbbc <memset>:
    cbbc:	0783      	lsls	r3, r0, #30
    cbbe:	b530      	push	{r4, r5, lr}
    cbc0:	d048      	beq.n	cc54 <memset+0x98>
    cbc2:	1e54      	subs	r4, r2, #1
    cbc4:	2a00      	cmp	r2, #0
    cbc6:	d03f      	beq.n	cc48 <memset+0x8c>
    cbc8:	b2ca      	uxtb	r2, r1
    cbca:	4603      	mov	r3, r0
    cbcc:	e001      	b.n	cbd2 <memset+0x16>
    cbce:	3c01      	subs	r4, #1
    cbd0:	d33a      	bcc.n	cc48 <memset+0x8c>
    cbd2:	f803 2b01 	strb.w	r2, [r3], #1
    cbd6:	079d      	lsls	r5, r3, #30
    cbd8:	d1f9      	bne.n	cbce <memset+0x12>
    cbda:	2c03      	cmp	r4, #3
    cbdc:	d92d      	bls.n	cc3a <memset+0x7e>
    cbde:	b2cd      	uxtb	r5, r1
    cbe0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    cbe4:	2c0f      	cmp	r4, #15
    cbe6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    cbea:	d936      	bls.n	cc5a <memset+0x9e>
    cbec:	f1a4 0210 	sub.w	r2, r4, #16
    cbf0:	f022 0c0f 	bic.w	ip, r2, #15
    cbf4:	f103 0e20 	add.w	lr, r3, #32
    cbf8:	44e6      	add	lr, ip
    cbfa:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    cbfe:	f103 0210 	add.w	r2, r3, #16
    cc02:	e942 5504 	strd	r5, r5, [r2, #-16]
    cc06:	e942 5502 	strd	r5, r5, [r2, #-8]
    cc0a:	3210      	adds	r2, #16
    cc0c:	4572      	cmp	r2, lr
    cc0e:	d1f8      	bne.n	cc02 <memset+0x46>
    cc10:	f10c 0201 	add.w	r2, ip, #1
    cc14:	f014 0f0c 	tst.w	r4, #12
    cc18:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    cc1c:	f004 0c0f 	and.w	ip, r4, #15
    cc20:	d013      	beq.n	cc4a <memset+0x8e>
    cc22:	f1ac 0304 	sub.w	r3, ip, #4
    cc26:	f023 0303 	bic.w	r3, r3, #3
    cc2a:	3304      	adds	r3, #4
    cc2c:	4413      	add	r3, r2
    cc2e:	f842 5b04 	str.w	r5, [r2], #4
    cc32:	4293      	cmp	r3, r2
    cc34:	d1fb      	bne.n	cc2e <memset+0x72>
    cc36:	f00c 0403 	and.w	r4, ip, #3
    cc3a:	b12c      	cbz	r4, cc48 <memset+0x8c>
    cc3c:	b2c9      	uxtb	r1, r1
    cc3e:	441c      	add	r4, r3
    cc40:	f803 1b01 	strb.w	r1, [r3], #1
    cc44:	429c      	cmp	r4, r3
    cc46:	d1fb      	bne.n	cc40 <memset+0x84>
    cc48:	bd30      	pop	{r4, r5, pc}
    cc4a:	4664      	mov	r4, ip
    cc4c:	4613      	mov	r3, r2
    cc4e:	2c00      	cmp	r4, #0
    cc50:	d1f4      	bne.n	cc3c <memset+0x80>
    cc52:	e7f9      	b.n	cc48 <memset+0x8c>
    cc54:	4603      	mov	r3, r0
    cc56:	4614      	mov	r4, r2
    cc58:	e7bf      	b.n	cbda <memset+0x1e>
    cc5a:	461a      	mov	r2, r3
    cc5c:	46a4      	mov	ip, r4
    cc5e:	e7e0      	b.n	cc22 <memset+0x66>

0000cc60 <strncmp>:
    cc60:	2a00      	cmp	r2, #0
    cc62:	d03e      	beq.n	cce2 <strncmp+0x82>
    cc64:	ea40 0301 	orr.w	r3, r0, r1
    cc68:	079b      	lsls	r3, r3, #30
    cc6a:	b530      	push	{r4, r5, lr}
    cc6c:	4684      	mov	ip, r0
    cc6e:	d12f      	bne.n	ccd0 <strncmp+0x70>
    cc70:	2a03      	cmp	r2, #3
    cc72:	d92d      	bls.n	ccd0 <strncmp+0x70>
    cc74:	460b      	mov	r3, r1
    cc76:	e008      	b.n	cc8a <strncmp+0x2a>
    cc78:	3a04      	subs	r2, #4
    cc7a:	4684      	mov	ip, r0
    cc7c:	4619      	mov	r1, r3
    cc7e:	d025      	beq.n	cccc <strncmp+0x6c>
    cc80:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    cc84:	d122      	bne.n	cccc <strncmp+0x6c>
    cc86:	2a03      	cmp	r2, #3
    cc88:	d922      	bls.n	ccd0 <strncmp+0x70>
    cc8a:	6804      	ldr	r4, [r0, #0]
    cc8c:	4619      	mov	r1, r3
    cc8e:	f853 5b04 	ldr.w	r5, [r3], #4
    cc92:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    cc96:	42ac      	cmp	r4, r5
    cc98:	4684      	mov	ip, r0
    cc9a:	ea2e 0e04 	bic.w	lr, lr, r4
    cc9e:	f100 0004 	add.w	r0, r0, #4
    cca2:	d0e9      	beq.n	cc78 <strncmp+0x18>
    cca4:	f89c 0000 	ldrb.w	r0, [ip]
    cca8:	780c      	ldrb	r4, [r1, #0]
    ccaa:	42a0      	cmp	r0, r4
    ccac:	d11b      	bne.n	cce6 <strncmp+0x86>
    ccae:	46e6      	mov	lr, ip
    ccb0:	b168      	cbz	r0, ccce <strncmp+0x6e>
    ccb2:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    ccb6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    ccba:	eba2 030e 	sub.w	r3, r2, lr
    ccbe:	42a0      	cmp	r0, r4
    ccc0:	f103 33ff 	add.w	r3, r3, #4294967295
    ccc4:	d10f      	bne.n	cce6 <strncmp+0x86>
    ccc6:	eb1c 0303 	adds.w	r3, ip, r3
    ccca:	d1f1      	bne.n	ccb0 <strncmp+0x50>
    cccc:	2000      	movs	r0, #0
    ccce:	bd30      	pop	{r4, r5, pc}
    ccd0:	f89c 0000 	ldrb.w	r0, [ip]
    ccd4:	780c      	ldrb	r4, [r1, #0]
    ccd6:	4284      	cmp	r4, r0
    ccd8:	d105      	bne.n	cce6 <strncmp+0x86>
    ccda:	2a01      	cmp	r2, #1
    ccdc:	d0f6      	beq.n	cccc <strncmp+0x6c>
    ccde:	46e6      	mov	lr, ip
    cce0:	e7e6      	b.n	ccb0 <strncmp+0x50>
    cce2:	4610      	mov	r0, r2
    cce4:	4770      	bx	lr
    cce6:	1b00      	subs	r0, r0, r4
    cce8:	bd30      	pop	{r4, r5, pc}
    ccea:	bf00      	nop

0000ccec <strncpy>:
    ccec:	ea40 0301 	orr.w	r3, r0, r1
    ccf0:	079b      	lsls	r3, r3, #30
    ccf2:	b530      	push	{r4, r5, lr}
    ccf4:	d101      	bne.n	ccfa <strncpy+0xe>
    ccf6:	2a03      	cmp	r2, #3
    ccf8:	d80f      	bhi.n	cd1a <strncpy+0x2e>
    ccfa:	4684      	mov	ip, r0
    ccfc:	f101 3eff 	add.w	lr, r1, #4294967295
    cd00:	e007      	b.n	cd12 <strncpy+0x26>
    cd02:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    cd06:	f803 1b01 	strb.w	r1, [r3], #1
    cd0a:	1e54      	subs	r4, r2, #1
    cd0c:	b1c1      	cbz	r1, cd40 <strncpy+0x54>
    cd0e:	469c      	mov	ip, r3
    cd10:	4622      	mov	r2, r4
    cd12:	4663      	mov	r3, ip
    cd14:	2a00      	cmp	r2, #0
    cd16:	d1f4      	bne.n	cd02 <strncpy+0x16>
    cd18:	bd30      	pop	{r4, r5, pc}
    cd1a:	460b      	mov	r3, r1
    cd1c:	4684      	mov	ip, r0
    cd1e:	4619      	mov	r1, r3
    cd20:	f853 5b04 	ldr.w	r5, [r3], #4
    cd24:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    cd28:	ea24 0405 	bic.w	r4, r4, r5
    cd2c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    cd30:	d1e4      	bne.n	ccfc <strncpy+0x10>
    cd32:	3a04      	subs	r2, #4
    cd34:	2a03      	cmp	r2, #3
    cd36:	f84c 5b04 	str.w	r5, [ip], #4
    cd3a:	4619      	mov	r1, r3
    cd3c:	d8ef      	bhi.n	cd1e <strncpy+0x32>
    cd3e:	e7dd      	b.n	ccfc <strncpy+0x10>
    cd40:	4494      	add	ip, r2
    cd42:	2c00      	cmp	r4, #0
    cd44:	d0e8      	beq.n	cd18 <strncpy+0x2c>
    cd46:	f803 1b01 	strb.w	r1, [r3], #1
    cd4a:	4563      	cmp	r3, ip
    cd4c:	d1fb      	bne.n	cd46 <strncpy+0x5a>
    cd4e:	bd30      	pop	{r4, r5, pc}

0000cd50 <__locale_mb_cur_max>:
    cd50:	4b01      	ldr	r3, [pc, #4]	; (cd58 <__locale_mb_cur_max+0x8>)
    cd52:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    cd56:	4770      	bx	lr
    cd58:	200088ec 	.word	0x200088ec

0000cd5c <_close_r>:
    cd5c:	b538      	push	{r3, r4, r5, lr}
    cd5e:	4d07      	ldr	r5, [pc, #28]	; (cd7c <_close_r+0x20>)
    cd60:	2200      	movs	r2, #0
    cd62:	4604      	mov	r4, r0
    cd64:	4608      	mov	r0, r1
    cd66:	602a      	str	r2, [r5, #0]
    cd68:	f7fb fe72 	bl	8a50 <_close>
    cd6c:	1c43      	adds	r3, r0, #1
    cd6e:	d000      	beq.n	cd72 <_close_r+0x16>
    cd70:	bd38      	pop	{r3, r4, r5, pc}
    cd72:	682b      	ldr	r3, [r5, #0]
    cd74:	2b00      	cmp	r3, #0
    cd76:	d0fb      	beq.n	cd70 <_close_r+0x14>
    cd78:	6023      	str	r3, [r4, #0]
    cd7a:	bd38      	pop	{r3, r4, r5, pc}
    cd7c:	200216e4 	.word	0x200216e4

0000cd80 <_lseek_r>:
    cd80:	b538      	push	{r3, r4, r5, lr}
    cd82:	460c      	mov	r4, r1
    cd84:	4d08      	ldr	r5, [pc, #32]	; (cda8 <_lseek_r+0x28>)
    cd86:	4684      	mov	ip, r0
    cd88:	4611      	mov	r1, r2
    cd8a:	4620      	mov	r0, r4
    cd8c:	461a      	mov	r2, r3
    cd8e:	2300      	movs	r3, #0
    cd90:	602b      	str	r3, [r5, #0]
    cd92:	4664      	mov	r4, ip
    cd94:	f7fb fe68 	bl	8a68 <_lseek>
    cd98:	1c43      	adds	r3, r0, #1
    cd9a:	d000      	beq.n	cd9e <_lseek_r+0x1e>
    cd9c:	bd38      	pop	{r3, r4, r5, pc}
    cd9e:	682b      	ldr	r3, [r5, #0]
    cda0:	2b00      	cmp	r3, #0
    cda2:	d0fb      	beq.n	cd9c <_lseek_r+0x1c>
    cda4:	6023      	str	r3, [r4, #0]
    cda6:	bd38      	pop	{r3, r4, r5, pc}
    cda8:	200216e4 	.word	0x200216e4

0000cdac <_read_r>:
    cdac:	b538      	push	{r3, r4, r5, lr}
    cdae:	460c      	mov	r4, r1
    cdb0:	4d08      	ldr	r5, [pc, #32]	; (cdd4 <_read_r+0x28>)
    cdb2:	4684      	mov	ip, r0
    cdb4:	4611      	mov	r1, r2
    cdb6:	4620      	mov	r0, r4
    cdb8:	461a      	mov	r2, r3
    cdba:	2300      	movs	r3, #0
    cdbc:	602b      	str	r3, [r5, #0]
    cdbe:	4664      	mov	r4, ip
    cdc0:	f7fb fe44 	bl	8a4c <_read>
    cdc4:	1c43      	adds	r3, r0, #1
    cdc6:	d000      	beq.n	cdca <_read_r+0x1e>
    cdc8:	bd38      	pop	{r3, r4, r5, pc}
    cdca:	682b      	ldr	r3, [r5, #0]
    cdcc:	2b00      	cmp	r3, #0
    cdce:	d0fb      	beq.n	cdc8 <_read_r+0x1c>
    cdd0:	6023      	str	r3, [r4, #0]
    cdd2:	bd38      	pop	{r3, r4, r5, pc}
    cdd4:	200216e4 	.word	0x200216e4

0000cdd8 <_sbrk_r>:
    cdd8:	b538      	push	{r3, r4, r5, lr}
    cdda:	4d07      	ldr	r5, [pc, #28]	; (cdf8 <_sbrk_r+0x20>)
    cddc:	2200      	movs	r2, #0
    cdde:	4604      	mov	r4, r0
    cde0:	4608      	mov	r0, r1
    cde2:	602a      	str	r2, [r5, #0]
    cde4:	f7fb fe18 	bl	8a18 <_sbrk>
    cde8:	1c43      	adds	r3, r0, #1
    cdea:	d000      	beq.n	cdee <_sbrk_r+0x16>
    cdec:	bd38      	pop	{r3, r4, r5, pc}
    cdee:	682b      	ldr	r3, [r5, #0]
    cdf0:	2b00      	cmp	r3, #0
    cdf2:	d0fb      	beq.n	cdec <_sbrk_r+0x14>
    cdf4:	6023      	str	r3, [r4, #0]
    cdf6:	bd38      	pop	{r3, r4, r5, pc}
    cdf8:	200216e4 	.word	0x200216e4

0000cdfc <_write_r>:
    cdfc:	b538      	push	{r3, r4, r5, lr}
    cdfe:	460c      	mov	r4, r1
    ce00:	4d08      	ldr	r5, [pc, #32]	; (ce24 <_write_r+0x28>)
    ce02:	4684      	mov	ip, r0
    ce04:	4611      	mov	r1, r2
    ce06:	4620      	mov	r0, r4
    ce08:	461a      	mov	r2, r3
    ce0a:	2300      	movs	r3, #0
    ce0c:	602b      	str	r3, [r5, #0]
    ce0e:	4664      	mov	r4, ip
    ce10:	f7fb f8d6 	bl	7fc0 <_write>
    ce14:	1c43      	adds	r3, r0, #1
    ce16:	d000      	beq.n	ce1a <_write_r+0x1e>
    ce18:	bd38      	pop	{r3, r4, r5, pc}
    ce1a:	682b      	ldr	r3, [r5, #0]
    ce1c:	2b00      	cmp	r3, #0
    ce1e:	d0fb      	beq.n	ce18 <_write_r+0x1c>
    ce20:	6023      	str	r3, [r4, #0]
    ce22:	bd38      	pop	{r3, r4, r5, pc}
    ce24:	200216e4 	.word	0x200216e4

0000ce28 <__errno>:
    ce28:	4b01      	ldr	r3, [pc, #4]	; (ce30 <__errno+0x8>)
    ce2a:	6818      	ldr	r0, [r3, #0]
    ce2c:	4770      	bx	lr
    ce2e:	bf00      	nop
    ce30:	20008e74 	.word	0x20008e74

0000ce34 <__libc_init_array>:
    ce34:	b570      	push	{r4, r5, r6, lr}
    ce36:	4e0d      	ldr	r6, [pc, #52]	; (ce6c <__libc_init_array+0x38>)
    ce38:	4d0d      	ldr	r5, [pc, #52]	; (ce70 <__libc_init_array+0x3c>)
    ce3a:	1b76      	subs	r6, r6, r5
    ce3c:	10b6      	asrs	r6, r6, #2
    ce3e:	d006      	beq.n	ce4e <__libc_init_array+0x1a>
    ce40:	2400      	movs	r4, #0
    ce42:	f855 3b04 	ldr.w	r3, [r5], #4
    ce46:	3401      	adds	r4, #1
    ce48:	4798      	blx	r3
    ce4a:	42a6      	cmp	r6, r4
    ce4c:	d1f9      	bne.n	ce42 <__libc_init_array+0xe>
    ce4e:	4e09      	ldr	r6, [pc, #36]	; (ce74 <__libc_init_array+0x40>)
    ce50:	4d09      	ldr	r5, [pc, #36]	; (ce78 <__libc_init_array+0x44>)
    ce52:	1b76      	subs	r6, r6, r5
    ce54:	f008 fbdc 	bl	15610 <___init_veneer>
    ce58:	10b6      	asrs	r6, r6, #2
    ce5a:	d006      	beq.n	ce6a <__libc_init_array+0x36>
    ce5c:	2400      	movs	r4, #0
    ce5e:	f855 3b04 	ldr.w	r3, [r5], #4
    ce62:	3401      	adds	r4, #1
    ce64:	4798      	blx	r3
    ce66:	42a6      	cmp	r6, r4
    ce68:	d1f9      	bne.n	ce5e <__libc_init_array+0x2a>
    ce6a:	bd70      	pop	{r4, r5, r6, pc}
    ce6c:	60002738 	.word	0x60002738
    ce70:	60002738 	.word	0x60002738
    ce74:	60002754 	.word	0x60002754
    ce78:	60002738 	.word	0x60002738

0000ce7c <__retarget_lock_init_recursive>:
    ce7c:	4770      	bx	lr
    ce7e:	bf00      	nop

0000ce80 <__retarget_lock_close_recursive>:
    ce80:	4770      	bx	lr
    ce82:	bf00      	nop

0000ce84 <__retarget_lock_acquire_recursive>:
    ce84:	4770      	bx	lr
    ce86:	bf00      	nop

0000ce88 <__retarget_lock_release_recursive>:
    ce88:	4770      	bx	lr
    ce8a:	bf00      	nop
	...
    cea0:	eba2 0003 	sub.w	r0, r2, r3
    cea4:	4770      	bx	lr
    cea6:	bf00      	nop

0000cea8 <strcmp>:
    cea8:	7802      	ldrb	r2, [r0, #0]
    ceaa:	780b      	ldrb	r3, [r1, #0]
    ceac:	2a01      	cmp	r2, #1
    ceae:	bf28      	it	cs
    ceb0:	429a      	cmpcs	r2, r3
    ceb2:	d1f5      	bne.n	cea0 <__retarget_lock_release_recursive+0x18>
    ceb4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    ceb8:	ea40 0401 	orr.w	r4, r0, r1
    cebc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    cec0:	f06f 0c00 	mvn.w	ip, #0
    cec4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    cec8:	b312      	cbz	r2, cf10 <strcmp+0x68>
    ceca:	ea80 0401 	eor.w	r4, r0, r1
    cece:	f014 0f07 	tst.w	r4, #7
    ced2:	d16a      	bne.n	cfaa <strcmp+0x102>
    ced4:	f000 0407 	and.w	r4, r0, #7
    ced8:	f020 0007 	bic.w	r0, r0, #7
    cedc:	f004 0503 	and.w	r5, r4, #3
    cee0:	f021 0107 	bic.w	r1, r1, #7
    cee4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    cee8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    ceec:	f014 0f04 	tst.w	r4, #4
    cef0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    cef4:	fa0c f405 	lsl.w	r4, ip, r5
    cef8:	ea62 0204 	orn	r2, r2, r4
    cefc:	ea66 0604 	orn	r6, r6, r4
    cf00:	d00a      	beq.n	cf18 <strcmp+0x70>
    cf02:	ea63 0304 	orn	r3, r3, r4
    cf06:	4662      	mov	r2, ip
    cf08:	ea67 0704 	orn	r7, r7, r4
    cf0c:	4666      	mov	r6, ip
    cf0e:	e003      	b.n	cf18 <strcmp+0x70>
    cf10:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    cf14:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    cf18:	fa82 f54c 	uadd8	r5, r2, ip
    cf1c:	ea82 0406 	eor.w	r4, r2, r6
    cf20:	faa4 f48c 	sel	r4, r4, ip
    cf24:	bb6c      	cbnz	r4, cf82 <strcmp+0xda>
    cf26:	fa83 f54c 	uadd8	r5, r3, ip
    cf2a:	ea83 0507 	eor.w	r5, r3, r7
    cf2e:	faa5 f58c 	sel	r5, r5, ip
    cf32:	b995      	cbnz	r5, cf5a <strcmp+0xb2>
    cf34:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    cf38:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    cf3c:	fa82 f54c 	uadd8	r5, r2, ip
    cf40:	ea82 0406 	eor.w	r4, r2, r6
    cf44:	faa4 f48c 	sel	r4, r4, ip
    cf48:	fa83 f54c 	uadd8	r5, r3, ip
    cf4c:	ea83 0507 	eor.w	r5, r3, r7
    cf50:	faa5 f58c 	sel	r5, r5, ip
    cf54:	4325      	orrs	r5, r4
    cf56:	d0db      	beq.n	cf10 <strcmp+0x68>
    cf58:	b99c      	cbnz	r4, cf82 <strcmp+0xda>
    cf5a:	ba2d      	rev	r5, r5
    cf5c:	fab5 f485 	clz	r4, r5
    cf60:	f024 0407 	bic.w	r4, r4, #7
    cf64:	fa27 f104 	lsr.w	r1, r7, r4
    cf68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cf6c:	fa23 f304 	lsr.w	r3, r3, r4
    cf70:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cf74:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cf78:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cf7c:	eba0 0001 	sub.w	r0, r0, r1
    cf80:	4770      	bx	lr
    cf82:	ba24      	rev	r4, r4
    cf84:	fab4 f484 	clz	r4, r4
    cf88:	f024 0407 	bic.w	r4, r4, #7
    cf8c:	fa26 f104 	lsr.w	r1, r6, r4
    cf90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cf94:	fa22 f204 	lsr.w	r2, r2, r4
    cf98:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    cf9c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cfa0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cfa4:	eba0 0001 	sub.w	r0, r0, r1
    cfa8:	4770      	bx	lr
    cfaa:	f014 0f03 	tst.w	r4, #3
    cfae:	d13c      	bne.n	d02a <strcmp+0x182>
    cfb0:	f010 0403 	ands.w	r4, r0, #3
    cfb4:	d128      	bne.n	d008 <strcmp+0x160>
    cfb6:	f850 2b08 	ldr.w	r2, [r0], #8
    cfba:	f851 3b08 	ldr.w	r3, [r1], #8
    cfbe:	fa82 f54c 	uadd8	r5, r2, ip
    cfc2:	ea82 0503 	eor.w	r5, r2, r3
    cfc6:	faa5 f58c 	sel	r5, r5, ip
    cfca:	b95d      	cbnz	r5, cfe4 <strcmp+0x13c>
    cfcc:	f850 2c04 	ldr.w	r2, [r0, #-4]
    cfd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    cfd4:	fa82 f54c 	uadd8	r5, r2, ip
    cfd8:	ea82 0503 	eor.w	r5, r2, r3
    cfdc:	faa5 f58c 	sel	r5, r5, ip
    cfe0:	2d00      	cmp	r5, #0
    cfe2:	d0e8      	beq.n	cfb6 <strcmp+0x10e>
    cfe4:	ba2d      	rev	r5, r5
    cfe6:	fab5 f485 	clz	r4, r5
    cfea:	f024 0407 	bic.w	r4, r4, #7
    cfee:	fa23 f104 	lsr.w	r1, r3, r4
    cff2:	fa22 f204 	lsr.w	r2, r2, r4
    cff6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    cffa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cffe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d002:	eba0 0001 	sub.w	r0, r0, r1
    d006:	4770      	bx	lr
    d008:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    d00c:	f020 0003 	bic.w	r0, r0, #3
    d010:	f850 2b08 	ldr.w	r2, [r0], #8
    d014:	f021 0103 	bic.w	r1, r1, #3
    d018:	f851 3b08 	ldr.w	r3, [r1], #8
    d01c:	fa0c f404 	lsl.w	r4, ip, r4
    d020:	ea62 0204 	orn	r2, r2, r4
    d024:	ea63 0304 	orn	r3, r3, r4
    d028:	e7c9      	b.n	cfbe <strcmp+0x116>
    d02a:	f010 0403 	ands.w	r4, r0, #3
    d02e:	d01a      	beq.n	d066 <strcmp+0x1be>
    d030:	eba1 0104 	sub.w	r1, r1, r4
    d034:	f020 0003 	bic.w	r0, r0, #3
    d038:	07e4      	lsls	r4, r4, #31
    d03a:	f850 2b04 	ldr.w	r2, [r0], #4
    d03e:	d006      	beq.n	d04e <strcmp+0x1a6>
    d040:	d20f      	bcs.n	d062 <strcmp+0x1ba>
    d042:	788b      	ldrb	r3, [r1, #2]
    d044:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    d048:	1ae4      	subs	r4, r4, r3
    d04a:	d106      	bne.n	d05a <strcmp+0x1b2>
    d04c:	b12b      	cbz	r3, d05a <strcmp+0x1b2>
    d04e:	78cb      	ldrb	r3, [r1, #3]
    d050:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    d054:	1ae4      	subs	r4, r4, r3
    d056:	d100      	bne.n	d05a <strcmp+0x1b2>
    d058:	b91b      	cbnz	r3, d062 <strcmp+0x1ba>
    d05a:	4620      	mov	r0, r4
    d05c:	f85d 4b10 	ldr.w	r4, [sp], #16
    d060:	4770      	bx	lr
    d062:	f101 0104 	add.w	r1, r1, #4
    d066:	f850 2b04 	ldr.w	r2, [r0], #4
    d06a:	07cc      	lsls	r4, r1, #31
    d06c:	f021 0103 	bic.w	r1, r1, #3
    d070:	f851 3b04 	ldr.w	r3, [r1], #4
    d074:	d848      	bhi.n	d108 <strcmp+0x260>
    d076:	d224      	bcs.n	d0c2 <strcmp+0x21a>
    d078:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    d07c:	fa82 f54c 	uadd8	r5, r2, ip
    d080:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    d084:	faa5 f58c 	sel	r5, r5, ip
    d088:	d10a      	bne.n	d0a0 <strcmp+0x1f8>
    d08a:	b965      	cbnz	r5, d0a6 <strcmp+0x1fe>
    d08c:	f851 3b04 	ldr.w	r3, [r1], #4
    d090:	ea84 0402 	eor.w	r4, r4, r2
    d094:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    d098:	d10e      	bne.n	d0b8 <strcmp+0x210>
    d09a:	f850 2b04 	ldr.w	r2, [r0], #4
    d09e:	e7eb      	b.n	d078 <strcmp+0x1d0>
    d0a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    d0a4:	e055      	b.n	d152 <strcmp+0x2aa>
    d0a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    d0aa:	d14d      	bne.n	d148 <strcmp+0x2a0>
    d0ac:	7808      	ldrb	r0, [r1, #0]
    d0ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d0b2:	f1c0 0000 	rsb	r0, r0, #0
    d0b6:	4770      	bx	lr
    d0b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    d0bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    d0c0:	e047      	b.n	d152 <strcmp+0x2aa>
    d0c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    d0c6:	fa82 f54c 	uadd8	r5, r2, ip
    d0ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    d0ce:	faa5 f58c 	sel	r5, r5, ip
    d0d2:	d10a      	bne.n	d0ea <strcmp+0x242>
    d0d4:	b965      	cbnz	r5, d0f0 <strcmp+0x248>
    d0d6:	f851 3b04 	ldr.w	r3, [r1], #4
    d0da:	ea84 0402 	eor.w	r4, r4, r2
    d0de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    d0e2:	d10c      	bne.n	d0fe <strcmp+0x256>
    d0e4:	f850 2b04 	ldr.w	r2, [r0], #4
    d0e8:	e7eb      	b.n	d0c2 <strcmp+0x21a>
    d0ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
    d0ee:	e030      	b.n	d152 <strcmp+0x2aa>
    d0f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    d0f4:	d128      	bne.n	d148 <strcmp+0x2a0>
    d0f6:	880b      	ldrh	r3, [r1, #0]
    d0f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    d0fc:	e029      	b.n	d152 <strcmp+0x2aa>
    d0fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
    d102:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    d106:	e024      	b.n	d152 <strcmp+0x2aa>
    d108:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    d10c:	fa82 f54c 	uadd8	r5, r2, ip
    d110:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    d114:	faa5 f58c 	sel	r5, r5, ip
    d118:	d10a      	bne.n	d130 <strcmp+0x288>
    d11a:	b965      	cbnz	r5, d136 <strcmp+0x28e>
    d11c:	f851 3b04 	ldr.w	r3, [r1], #4
    d120:	ea84 0402 	eor.w	r4, r4, r2
    d124:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    d128:	d109      	bne.n	d13e <strcmp+0x296>
    d12a:	f850 2b04 	ldr.w	r2, [r0], #4
    d12e:	e7eb      	b.n	d108 <strcmp+0x260>
    d130:	ea4f 6313 	mov.w	r3, r3, lsr #24
    d134:	e00d      	b.n	d152 <strcmp+0x2aa>
    d136:	f015 0fff 	tst.w	r5, #255	; 0xff
    d13a:	d105      	bne.n	d148 <strcmp+0x2a0>
    d13c:	680b      	ldr	r3, [r1, #0]
    d13e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    d142:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d146:	e004      	b.n	d152 <strcmp+0x2aa>
    d148:	f04f 0000 	mov.w	r0, #0
    d14c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d150:	4770      	bx	lr
    d152:	ba12      	rev	r2, r2
    d154:	ba1b      	rev	r3, r3
    d156:	fa82 f44c 	uadd8	r4, r2, ip
    d15a:	ea82 0403 	eor.w	r4, r2, r3
    d15e:	faa4 f58c 	sel	r5, r4, ip
    d162:	fab5 f485 	clz	r4, r5
    d166:	fa02 f204 	lsl.w	r2, r2, r4
    d16a:	fa03 f304 	lsl.w	r3, r3, r4
    d16e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    d172:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d176:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    d17a:	4770      	bx	lr
    d17c:	0000      	movs	r0, r0
	...

0000d180 <memchr>:
    d180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d184:	2a10      	cmp	r2, #16
    d186:	db2b      	blt.n	d1e0 <memchr+0x60>
    d188:	f010 0f07 	tst.w	r0, #7
    d18c:	d008      	beq.n	d1a0 <memchr+0x20>
    d18e:	f810 3b01 	ldrb.w	r3, [r0], #1
    d192:	3a01      	subs	r2, #1
    d194:	428b      	cmp	r3, r1
    d196:	d02d      	beq.n	d1f4 <memchr+0x74>
    d198:	f010 0f07 	tst.w	r0, #7
    d19c:	b342      	cbz	r2, d1f0 <memchr+0x70>
    d19e:	d1f6      	bne.n	d18e <memchr+0xe>
    d1a0:	b4f0      	push	{r4, r5, r6, r7}
    d1a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d1a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    d1aa:	f022 0407 	bic.w	r4, r2, #7
    d1ae:	f07f 0700 	mvns.w	r7, #0
    d1b2:	2300      	movs	r3, #0
    d1b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    d1b8:	3c08      	subs	r4, #8
    d1ba:	ea85 0501 	eor.w	r5, r5, r1
    d1be:	ea86 0601 	eor.w	r6, r6, r1
    d1c2:	fa85 f547 	uadd8	r5, r5, r7
    d1c6:	faa3 f587 	sel	r5, r3, r7
    d1ca:	fa86 f647 	uadd8	r6, r6, r7
    d1ce:	faa5 f687 	sel	r6, r5, r7
    d1d2:	b98e      	cbnz	r6, d1f8 <memchr+0x78>
    d1d4:	d1ee      	bne.n	d1b4 <memchr+0x34>
    d1d6:	bcf0      	pop	{r4, r5, r6, r7}
    d1d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d1dc:	f002 0207 	and.w	r2, r2, #7
    d1e0:	b132      	cbz	r2, d1f0 <memchr+0x70>
    d1e2:	f810 3b01 	ldrb.w	r3, [r0], #1
    d1e6:	3a01      	subs	r2, #1
    d1e8:	ea83 0301 	eor.w	r3, r3, r1
    d1ec:	b113      	cbz	r3, d1f4 <memchr+0x74>
    d1ee:	d1f8      	bne.n	d1e2 <memchr+0x62>
    d1f0:	2000      	movs	r0, #0
    d1f2:	4770      	bx	lr
    d1f4:	3801      	subs	r0, #1
    d1f6:	4770      	bx	lr
    d1f8:	2d00      	cmp	r5, #0
    d1fa:	bf06      	itte	eq
    d1fc:	4635      	moveq	r5, r6
    d1fe:	3803      	subeq	r0, #3
    d200:	3807      	subne	r0, #7
    d202:	f015 0f01 	tst.w	r5, #1
    d206:	d107      	bne.n	d218 <memchr+0x98>
    d208:	3001      	adds	r0, #1
    d20a:	f415 7f80 	tst.w	r5, #256	; 0x100
    d20e:	bf02      	ittt	eq
    d210:	3001      	addeq	r0, #1
    d212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    d216:	3001      	addeq	r0, #1
    d218:	bcf0      	pop	{r4, r5, r6, r7}
    d21a:	3801      	subs	r0, #1
    d21c:	4770      	bx	lr
    d21e:	bf00      	nop
	...

0000d240 <strlen>:
    d240:	f890 f000 	pld	[r0]
    d244:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    d248:	f020 0107 	bic.w	r1, r0, #7
    d24c:	f06f 0c00 	mvn.w	ip, #0
    d250:	f010 0407 	ands.w	r4, r0, #7
    d254:	f891 f020 	pld	[r1, #32]
    d258:	f040 8049 	bne.w	d2ee <strlen+0xae>
    d25c:	f04f 0400 	mov.w	r4, #0
    d260:	f06f 0007 	mvn.w	r0, #7
    d264:	e9d1 2300 	ldrd	r2, r3, [r1]
    d268:	f891 f040 	pld	[r1, #64]	; 0x40
    d26c:	f100 0008 	add.w	r0, r0, #8
    d270:	fa82 f24c 	uadd8	r2, r2, ip
    d274:	faa4 f28c 	sel	r2, r4, ip
    d278:	fa83 f34c 	uadd8	r3, r3, ip
    d27c:	faa2 f38c 	sel	r3, r2, ip
    d280:	bb4b      	cbnz	r3, d2d6 <strlen+0x96>
    d282:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    d286:	fa82 f24c 	uadd8	r2, r2, ip
    d28a:	f100 0008 	add.w	r0, r0, #8
    d28e:	faa4 f28c 	sel	r2, r4, ip
    d292:	fa83 f34c 	uadd8	r3, r3, ip
    d296:	faa2 f38c 	sel	r3, r2, ip
    d29a:	b9e3      	cbnz	r3, d2d6 <strlen+0x96>
    d29c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    d2a0:	fa82 f24c 	uadd8	r2, r2, ip
    d2a4:	f100 0008 	add.w	r0, r0, #8
    d2a8:	faa4 f28c 	sel	r2, r4, ip
    d2ac:	fa83 f34c 	uadd8	r3, r3, ip
    d2b0:	faa2 f38c 	sel	r3, r2, ip
    d2b4:	b97b      	cbnz	r3, d2d6 <strlen+0x96>
    d2b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    d2ba:	f101 0120 	add.w	r1, r1, #32
    d2be:	fa82 f24c 	uadd8	r2, r2, ip
    d2c2:	f100 0008 	add.w	r0, r0, #8
    d2c6:	faa4 f28c 	sel	r2, r4, ip
    d2ca:	fa83 f34c 	uadd8	r3, r3, ip
    d2ce:	faa2 f38c 	sel	r3, r2, ip
    d2d2:	2b00      	cmp	r3, #0
    d2d4:	d0c6      	beq.n	d264 <strlen+0x24>
    d2d6:	2a00      	cmp	r2, #0
    d2d8:	bf04      	itt	eq
    d2da:	3004      	addeq	r0, #4
    d2dc:	461a      	moveq	r2, r3
    d2de:	ba12      	rev	r2, r2
    d2e0:	fab2 f282 	clz	r2, r2
    d2e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    d2e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    d2ec:	4770      	bx	lr
    d2ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    d2f2:	f004 0503 	and.w	r5, r4, #3
    d2f6:	f1c4 0000 	rsb	r0, r4, #0
    d2fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    d2fe:	f014 0f04 	tst.w	r4, #4
    d302:	f891 f040 	pld	[r1, #64]	; 0x40
    d306:	fa0c f505 	lsl.w	r5, ip, r5
    d30a:	ea62 0205 	orn	r2, r2, r5
    d30e:	bf1c      	itt	ne
    d310:	ea63 0305 	ornne	r3, r3, r5
    d314:	4662      	movne	r2, ip
    d316:	f04f 0400 	mov.w	r4, #0
    d31a:	e7a9      	b.n	d270 <strlen+0x30>
    d31c:	0000      	movs	r0, r0
	...

0000d320 <nan>:
    d320:	ed9f 0b01 	vldr	d0, [pc, #4]	; d328 <nan+0x8>
    d324:	4770      	bx	lr
    d326:	bf00      	nop
    d328:	00000000 	.word	0x00000000
    d32c:	7ff80000 	.word	0x7ff80000

0000d330 <nanf>:
    d330:	ed9f 0a01 	vldr	s0, [pc, #4]	; d338 <nanf+0x8>
    d334:	4770      	bx	lr
    d336:	bf00      	nop
    d338:	7fc00000 	.word	0x7fc00000

0000d33c <__register_exitproc>:
    d33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d340:	f8df a07c 	ldr.w	sl, [pc, #124]	; d3c0 <__register_exitproc+0x84>
    d344:	4606      	mov	r6, r0
    d346:	f8da 0000 	ldr.w	r0, [sl]
    d34a:	4698      	mov	r8, r3
    d34c:	460f      	mov	r7, r1
    d34e:	4691      	mov	r9, r2
    d350:	f7ff fd98 	bl	ce84 <__retarget_lock_acquire_recursive>
    d354:	4b18      	ldr	r3, [pc, #96]	; (d3b8 <__register_exitproc+0x7c>)
    d356:	681c      	ldr	r4, [r3, #0]
    d358:	b324      	cbz	r4, d3a4 <__register_exitproc+0x68>
    d35a:	6865      	ldr	r5, [r4, #4]
    d35c:	2d1f      	cmp	r5, #31
    d35e:	dc24      	bgt.n	d3aa <__register_exitproc+0x6e>
    d360:	b95e      	cbnz	r6, d37a <__register_exitproc+0x3e>
    d362:	1c6b      	adds	r3, r5, #1
    d364:	3502      	adds	r5, #2
    d366:	f8da 0000 	ldr.w	r0, [sl]
    d36a:	6063      	str	r3, [r4, #4]
    d36c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    d370:	f7ff fd8a 	bl	ce88 <__retarget_lock_release_recursive>
    d374:	2000      	movs	r0, #0
    d376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d37a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    d37e:	2301      	movs	r3, #1
    d380:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    d384:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    d388:	40ab      	lsls	r3, r5
    d38a:	431a      	orrs	r2, r3
    d38c:	2e02      	cmp	r6, #2
    d38e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    d392:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    d396:	d1e4      	bne.n	d362 <__register_exitproc+0x26>
    d398:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    d39c:	431a      	orrs	r2, r3
    d39e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    d3a2:	e7de      	b.n	d362 <__register_exitproc+0x26>
    d3a4:	4c05      	ldr	r4, [pc, #20]	; (d3bc <__register_exitproc+0x80>)
    d3a6:	601c      	str	r4, [r3, #0]
    d3a8:	e7d7      	b.n	d35a <__register_exitproc+0x1e>
    d3aa:	f8da 0000 	ldr.w	r0, [sl]
    d3ae:	f7ff fd6b 	bl	ce88 <__retarget_lock_release_recursive>
    d3b2:	f04f 30ff 	mov.w	r0, #4294967295
    d3b6:	e7de      	b.n	d376 <__register_exitproc+0x3a>
    d3b8:	2002019c 	.word	0x2002019c
    d3bc:	200201a0 	.word	0x200201a0
    d3c0:	200088e0 	.word	0x200088e0

0000d3c4 <_malloc_trim_r>:
    d3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3c6:	4f24      	ldr	r7, [pc, #144]	; (d458 <_malloc_trim_r+0x94>)
    d3c8:	460c      	mov	r4, r1
    d3ca:	4606      	mov	r6, r0
    d3cc:	f7fd ff7e 	bl	b2cc <__malloc_lock>
    d3d0:	68bb      	ldr	r3, [r7, #8]
    d3d2:	685d      	ldr	r5, [r3, #4]
    d3d4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    d3d8:	310f      	adds	r1, #15
    d3da:	f025 0503 	bic.w	r5, r5, #3
    d3de:	194b      	adds	r3, r1, r5
    d3e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    d3e4:	f023 030f 	bic.w	r3, r3, #15
    d3e8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    d3ec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    d3f0:	db07      	blt.n	d402 <_malloc_trim_r+0x3e>
    d3f2:	2100      	movs	r1, #0
    d3f4:	4630      	mov	r0, r6
    d3f6:	f7ff fcef 	bl	cdd8 <_sbrk_r>
    d3fa:	68bb      	ldr	r3, [r7, #8]
    d3fc:	442b      	add	r3, r5
    d3fe:	4298      	cmp	r0, r3
    d400:	d004      	beq.n	d40c <_malloc_trim_r+0x48>
    d402:	4630      	mov	r0, r6
    d404:	f7fd ff68 	bl	b2d8 <__malloc_unlock>
    d408:	2000      	movs	r0, #0
    d40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d40c:	4261      	negs	r1, r4
    d40e:	4630      	mov	r0, r6
    d410:	f7ff fce2 	bl	cdd8 <_sbrk_r>
    d414:	3001      	adds	r0, #1
    d416:	d00d      	beq.n	d434 <_malloc_trim_r+0x70>
    d418:	4a10      	ldr	r2, [pc, #64]	; (d45c <_malloc_trim_r+0x98>)
    d41a:	68bb      	ldr	r3, [r7, #8]
    d41c:	1b2d      	subs	r5, r5, r4
    d41e:	f045 0501 	orr.w	r5, r5, #1
    d422:	605d      	str	r5, [r3, #4]
    d424:	6813      	ldr	r3, [r2, #0]
    d426:	4630      	mov	r0, r6
    d428:	1b1b      	subs	r3, r3, r4
    d42a:	6013      	str	r3, [r2, #0]
    d42c:	f7fd ff54 	bl	b2d8 <__malloc_unlock>
    d430:	2001      	movs	r0, #1
    d432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d434:	2100      	movs	r1, #0
    d436:	4630      	mov	r0, r6
    d438:	f7ff fcce 	bl	cdd8 <_sbrk_r>
    d43c:	68ba      	ldr	r2, [r7, #8]
    d43e:	1a83      	subs	r3, r0, r2
    d440:	2b0f      	cmp	r3, #15
    d442:	ddde      	ble.n	d402 <_malloc_trim_r+0x3e>
    d444:	f043 0301 	orr.w	r3, r3, #1
    d448:	6053      	str	r3, [r2, #4]
    d44a:	4b05      	ldr	r3, [pc, #20]	; (d460 <_malloc_trim_r+0x9c>)
    d44c:	4903      	ldr	r1, [pc, #12]	; (d45c <_malloc_trim_r+0x98>)
    d44e:	681b      	ldr	r3, [r3, #0]
    d450:	1ac0      	subs	r0, r0, r3
    d452:	6008      	str	r0, [r1, #0]
    d454:	e7d5      	b.n	d402 <_malloc_trim_r+0x3e>
    d456:	bf00      	nop
    d458:	20008a58 	.word	0x20008a58
    d45c:	2002033c 	.word	0x2002033c
    d460:	20008e60 	.word	0x20008e60

0000d464 <_free_r>:
    d464:	2900      	cmp	r1, #0
    d466:	d061      	beq.n	d52c <_free_r+0xc8>
    d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d46a:	460c      	mov	r4, r1
    d46c:	4606      	mov	r6, r0
    d46e:	f7fd ff2d 	bl	b2cc <__malloc_lock>
    d472:	f854 2c04 	ldr.w	r2, [r4, #-4]
    d476:	4f7b      	ldr	r7, [pc, #492]	; (d664 <_free_r+0x200>)
    d478:	f1a4 0508 	sub.w	r5, r4, #8
    d47c:	f022 0101 	bic.w	r1, r2, #1
    d480:	eb05 0c01 	add.w	ip, r5, r1
    d484:	68b8      	ldr	r0, [r7, #8]
    d486:	f8dc 3004 	ldr.w	r3, [ip, #4]
    d48a:	4560      	cmp	r0, ip
    d48c:	f023 0303 	bic.w	r3, r3, #3
    d490:	f000 808b 	beq.w	d5aa <_free_r+0x146>
    d494:	07d2      	lsls	r2, r2, #31
    d496:	f8cc 3004 	str.w	r3, [ip, #4]
    d49a:	d432      	bmi.n	d502 <_free_r+0x9e>
    d49c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d4a0:	1aad      	subs	r5, r5, r2
    d4a2:	4411      	add	r1, r2
    d4a4:	68aa      	ldr	r2, [r5, #8]
    d4a6:	f107 0008 	add.w	r0, r7, #8
    d4aa:	4282      	cmp	r2, r0
    d4ac:	d06a      	beq.n	d584 <_free_r+0x120>
    d4ae:	eb0c 0403 	add.w	r4, ip, r3
    d4b2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    d4b6:	68ec      	ldr	r4, [r5, #12]
    d4b8:	60d4      	str	r4, [r2, #12]
    d4ba:	f01e 0f01 	tst.w	lr, #1
    d4be:	60a2      	str	r2, [r4, #8]
    d4c0:	f000 8097 	beq.w	d5f2 <_free_r+0x18e>
    d4c4:	f041 0301 	orr.w	r3, r1, #1
    d4c8:	606b      	str	r3, [r5, #4]
    d4ca:	f8cc 1000 	str.w	r1, [ip]
    d4ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d4d2:	d235      	bcs.n	d540 <_free_r+0xdc>
    d4d4:	6878      	ldr	r0, [r7, #4]
    d4d6:	08cb      	lsrs	r3, r1, #3
    d4d8:	2201      	movs	r2, #1
    d4da:	0949      	lsrs	r1, r1, #5
    d4dc:	3301      	adds	r3, #1
    d4de:	408a      	lsls	r2, r1
    d4e0:	4302      	orrs	r2, r0
    d4e2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    d4e6:	607a      	str	r2, [r7, #4]
    d4e8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    d4ec:	3a08      	subs	r2, #8
    d4ee:	e9c5 1202 	strd	r1, r2, [r5, #8]
    d4f2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d4f6:	60cd      	str	r5, [r1, #12]
    d4f8:	4630      	mov	r0, r6
    d4fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d4fe:	f7fd beeb 	b.w	b2d8 <__malloc_unlock>
    d502:	eb0c 0203 	add.w	r2, ip, r3
    d506:	6852      	ldr	r2, [r2, #4]
    d508:	07d0      	lsls	r0, r2, #31
    d50a:	d410      	bmi.n	d52e <_free_r+0xca>
    d50c:	4419      	add	r1, r3
    d50e:	f107 0008 	add.w	r0, r7, #8
    d512:	f8dc 3008 	ldr.w	r3, [ip, #8]
    d516:	4283      	cmp	r3, r0
    d518:	d073      	beq.n	d602 <_free_r+0x19e>
    d51a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d51e:	60da      	str	r2, [r3, #12]
    d520:	6093      	str	r3, [r2, #8]
    d522:	f041 0301 	orr.w	r3, r1, #1
    d526:	606b      	str	r3, [r5, #4]
    d528:	5069      	str	r1, [r5, r1]
    d52a:	e7d0      	b.n	d4ce <_free_r+0x6a>
    d52c:	4770      	bx	lr
    d52e:	f041 0301 	orr.w	r3, r1, #1
    d532:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d536:	f844 3c04 	str.w	r3, [r4, #-4]
    d53a:	f8cc 1000 	str.w	r1, [ip]
    d53e:	d3c9      	bcc.n	d4d4 <_free_r+0x70>
    d540:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    d544:	ea4f 2351 	mov.w	r3, r1, lsr #9
    d548:	d248      	bcs.n	d5dc <_free_r+0x178>
    d54a:	098b      	lsrs	r3, r1, #6
    d54c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d550:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d554:	00c3      	lsls	r3, r0, #3
    d556:	18f8      	adds	r0, r7, r3
    d558:	58fb      	ldr	r3, [r7, r3]
    d55a:	3808      	subs	r0, #8
    d55c:	4298      	cmp	r0, r3
    d55e:	d059      	beq.n	d614 <_free_r+0x1b0>
    d560:	685a      	ldr	r2, [r3, #4]
    d562:	f022 0203 	bic.w	r2, r2, #3
    d566:	428a      	cmp	r2, r1
    d568:	d902      	bls.n	d570 <_free_r+0x10c>
    d56a:	689b      	ldr	r3, [r3, #8]
    d56c:	4298      	cmp	r0, r3
    d56e:	d1f7      	bne.n	d560 <_free_r+0xfc>
    d570:	68d8      	ldr	r0, [r3, #12]
    d572:	e9c5 3002 	strd	r3, r0, [r5, #8]
    d576:	6085      	str	r5, [r0, #8]
    d578:	60dd      	str	r5, [r3, #12]
    d57a:	4630      	mov	r0, r6
    d57c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d580:	f7fd beaa 	b.w	b2d8 <__malloc_unlock>
    d584:	eb0c 0203 	add.w	r2, ip, r3
    d588:	6852      	ldr	r2, [r2, #4]
    d58a:	07d2      	lsls	r2, r2, #31
    d58c:	d463      	bmi.n	d656 <_free_r+0x1f2>
    d58e:	440b      	add	r3, r1
    d590:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    d594:	60ca      	str	r2, [r1, #12]
    d596:	6091      	str	r1, [r2, #8]
    d598:	f043 0201 	orr.w	r2, r3, #1
    d59c:	606a      	str	r2, [r5, #4]
    d59e:	4630      	mov	r0, r6
    d5a0:	50eb      	str	r3, [r5, r3]
    d5a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d5a6:	f7fd be97 	b.w	b2d8 <__malloc_unlock>
    d5aa:	440b      	add	r3, r1
    d5ac:	07d1      	lsls	r1, r2, #31
    d5ae:	d407      	bmi.n	d5c0 <_free_r+0x15c>
    d5b0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d5b4:	1aad      	subs	r5, r5, r2
    d5b6:	4413      	add	r3, r2
    d5b8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    d5bc:	60ca      	str	r2, [r1, #12]
    d5be:	6091      	str	r1, [r2, #8]
    d5c0:	f043 0201 	orr.w	r2, r3, #1
    d5c4:	606a      	str	r2, [r5, #4]
    d5c6:	4a28      	ldr	r2, [pc, #160]	; (d668 <_free_r+0x204>)
    d5c8:	60bd      	str	r5, [r7, #8]
    d5ca:	6812      	ldr	r2, [r2, #0]
    d5cc:	429a      	cmp	r2, r3
    d5ce:	d893      	bhi.n	d4f8 <_free_r+0x94>
    d5d0:	4b26      	ldr	r3, [pc, #152]	; (d66c <_free_r+0x208>)
    d5d2:	4630      	mov	r0, r6
    d5d4:	6819      	ldr	r1, [r3, #0]
    d5d6:	f7ff fef5 	bl	d3c4 <_malloc_trim_r>
    d5da:	e78d      	b.n	d4f8 <_free_r+0x94>
    d5dc:	2b14      	cmp	r3, #20
    d5de:	d90a      	bls.n	d5f6 <_free_r+0x192>
    d5e0:	2b54      	cmp	r3, #84	; 0x54
    d5e2:	d81f      	bhi.n	d624 <_free_r+0x1c0>
    d5e4:	0b0b      	lsrs	r3, r1, #12
    d5e6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d5ea:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    d5ee:	00c3      	lsls	r3, r0, #3
    d5f0:	e7b1      	b.n	d556 <_free_r+0xf2>
    d5f2:	4419      	add	r1, r3
    d5f4:	e78d      	b.n	d512 <_free_r+0xae>
    d5f6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d5fa:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    d5fe:	00c3      	lsls	r3, r0, #3
    d600:	e7a9      	b.n	d556 <_free_r+0xf2>
    d602:	f041 0301 	orr.w	r3, r1, #1
    d606:	e9c7 5504 	strd	r5, r5, [r7, #16]
    d60a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    d60e:	606b      	str	r3, [r5, #4]
    d610:	5069      	str	r1, [r5, r1]
    d612:	e771      	b.n	d4f8 <_free_r+0x94>
    d614:	6879      	ldr	r1, [r7, #4]
    d616:	1092      	asrs	r2, r2, #2
    d618:	2401      	movs	r4, #1
    d61a:	fa04 f202 	lsl.w	r2, r4, r2
    d61e:	430a      	orrs	r2, r1
    d620:	607a      	str	r2, [r7, #4]
    d622:	e7a6      	b.n	d572 <_free_r+0x10e>
    d624:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d628:	d806      	bhi.n	d638 <_free_r+0x1d4>
    d62a:	0bcb      	lsrs	r3, r1, #15
    d62c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d630:	f103 0277 	add.w	r2, r3, #119	; 0x77
    d634:	00c3      	lsls	r3, r0, #3
    d636:	e78e      	b.n	d556 <_free_r+0xf2>
    d638:	f240 5254 	movw	r2, #1364	; 0x554
    d63c:	4293      	cmp	r3, r2
    d63e:	d806      	bhi.n	d64e <_free_r+0x1ea>
    d640:	0c8b      	lsrs	r3, r1, #18
    d642:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d646:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    d64a:	00c3      	lsls	r3, r0, #3
    d64c:	e783      	b.n	d556 <_free_r+0xf2>
    d64e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d652:	227e      	movs	r2, #126	; 0x7e
    d654:	e77f      	b.n	d556 <_free_r+0xf2>
    d656:	f041 0301 	orr.w	r3, r1, #1
    d65a:	606b      	str	r3, [r5, #4]
    d65c:	f8cc 1000 	str.w	r1, [ip]
    d660:	e74a      	b.n	d4f8 <_free_r+0x94>
    d662:	bf00      	nop
    d664:	20008a58 	.word	0x20008a58
    d668:	20008e64 	.word	0x20008e64
    d66c:	2002036c 	.word	0x2002036c

0000d670 <rshift>:
    d670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d674:	6904      	ldr	r4, [r0, #16]
    d676:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    d67a:	dd2f      	ble.n	d6dc <rshift+0x6c>
    d67c:	f100 0e14 	add.w	lr, r0, #20
    d680:	114e      	asrs	r6, r1, #5
    d682:	f011 0c1f 	ands.w	ip, r1, #31
    d686:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    d68a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    d68e:	d02b      	beq.n	d6e8 <rshift+0x78>
    d690:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    d694:	3304      	adds	r3, #4
    d696:	429d      	cmp	r5, r3
    d698:	fa21 f10c 	lsr.w	r1, r1, ip
    d69c:	f1cc 0820 	rsb	r8, ip, #32
    d6a0:	d918      	bls.n	d6d4 <rshift+0x64>
    d6a2:	4677      	mov	r7, lr
    d6a4:	681a      	ldr	r2, [r3, #0]
    d6a6:	fa02 f208 	lsl.w	r2, r2, r8
    d6aa:	430a      	orrs	r2, r1
    d6ac:	f847 2b04 	str.w	r2, [r7], #4
    d6b0:	f853 1b04 	ldr.w	r1, [r3], #4
    d6b4:	429d      	cmp	r5, r3
    d6b6:	fa21 f10c 	lsr.w	r1, r1, ip
    d6ba:	d8f3      	bhi.n	d6a4 <rshift+0x34>
    d6bc:	1ba3      	subs	r3, r4, r6
    d6be:	009b      	lsls	r3, r3, #2
    d6c0:	3b05      	subs	r3, #5
    d6c2:	089b      	lsrs	r3, r3, #2
    d6c4:	3301      	adds	r3, #1
    d6c6:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    d6ca:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    d6ce:	b1c9      	cbz	r1, d704 <rshift+0x94>
    d6d0:	3404      	adds	r4, #4
    d6d2:	e017      	b.n	d704 <rshift+0x94>
    d6d4:	6141      	str	r1, [r0, #20]
    d6d6:	4674      	mov	r4, lr
    d6d8:	2900      	cmp	r1, #0
    d6da:	d1f9      	bne.n	d6d0 <rshift+0x60>
    d6dc:	2300      	movs	r3, #0
    d6de:	6103      	str	r3, [r0, #16]
    d6e0:	2300      	movs	r3, #0
    d6e2:	6143      	str	r3, [r0, #20]
    d6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d6e8:	429d      	cmp	r5, r3
    d6ea:	bf88      	it	hi
    d6ec:	f100 0210 	addhi.w	r2, r0, #16
    d6f0:	d9f4      	bls.n	d6dc <rshift+0x6c>
    d6f2:	f853 1b04 	ldr.w	r1, [r3], #4
    d6f6:	f842 1f04 	str.w	r1, [r2, #4]!
    d6fa:	429d      	cmp	r5, r3
    d6fc:	d8f9      	bhi.n	d6f2 <rshift+0x82>
    d6fe:	1ba4      	subs	r4, r4, r6
    d700:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    d704:	eba4 030e 	sub.w	r3, r4, lr
    d708:	109b      	asrs	r3, r3, #2
    d70a:	4574      	cmp	r4, lr
    d70c:	6103      	str	r3, [r0, #16]
    d70e:	d0e7      	beq.n	d6e0 <rshift+0x70>
    d710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d714 <__gethex>:
    d714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d718:	ed2d 8b02 	vpush	{d8}
    d71c:	680c      	ldr	r4, [r1, #0]
    d71e:	468b      	mov	fp, r1
    d720:	78a1      	ldrb	r1, [r4, #2]
    d722:	b085      	sub	sp, #20
    d724:	2930      	cmp	r1, #48	; 0x30
    d726:	ee08 0a10 	vmov	s16, r0
    d72a:	4692      	mov	sl, r2
    d72c:	9302      	str	r3, [sp, #8]
    d72e:	f040 81ce 	bne.w	dace <__gethex+0x3ba>
    d732:	f06f 0001 	mvn.w	r0, #1
    d736:	1b00      	subs	r0, r0, r4
    d738:	1ce2      	adds	r2, r4, #3
    d73a:	1883      	adds	r3, r0, r2
    d73c:	4614      	mov	r4, r2
    d73e:	f812 1b01 	ldrb.w	r1, [r2], #1
    d742:	2930      	cmp	r1, #48	; 0x30
    d744:	d0f9      	beq.n	d73a <__gethex+0x26>
    d746:	f8df 8300 	ldr.w	r8, [pc, #768]	; da48 <__gethex+0x334>
    d74a:	f818 2001 	ldrb.w	r2, [r8, r1]
    d74e:	2a00      	cmp	r2, #0
    d750:	f000 80e5 	beq.w	d91e <__gethex+0x20a>
    d754:	7822      	ldrb	r2, [r4, #0]
    d756:	2700      	movs	r7, #0
    d758:	f818 2002 	ldrb.w	r2, [r8, r2]
    d75c:	463d      	mov	r5, r7
    d75e:	4626      	mov	r6, r4
    d760:	b12a      	cbz	r2, d76e <__gethex+0x5a>
    d762:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    d766:	f818 2002 	ldrb.w	r2, [r8, r2]
    d76a:	2a00      	cmp	r2, #0
    d76c:	d1f9      	bne.n	d762 <__gethex+0x4e>
    d76e:	49b5      	ldr	r1, [pc, #724]	; (da44 <__gethex+0x330>)
    d770:	9301      	str	r3, [sp, #4]
    d772:	2201      	movs	r2, #1
    d774:	4630      	mov	r0, r6
    d776:	f7ff fa73 	bl	cc60 <strncmp>
    d77a:	9b01      	ldr	r3, [sp, #4]
    d77c:	4681      	mov	r9, r0
    d77e:	2800      	cmp	r0, #0
    d780:	d04d      	beq.n	d81e <__gethex+0x10a>
    d782:	2d00      	cmp	r5, #0
    d784:	d14e      	bne.n	d824 <__gethex+0x110>
    d786:	7832      	ldrb	r2, [r6, #0]
    d788:	46a9      	mov	r9, r5
    d78a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    d78e:	2a50      	cmp	r2, #80	; 0x50
    d790:	4635      	mov	r5, r6
    d792:	d050      	beq.n	d836 <__gethex+0x122>
    d794:	f8cb 6000 	str.w	r6, [fp]
    d798:	2f00      	cmp	r7, #0
    d79a:	d169      	bne.n	d870 <__gethex+0x15c>
    d79c:	1b2b      	subs	r3, r5, r4
    d79e:	3b01      	subs	r3, #1
    d7a0:	2b07      	cmp	r3, #7
    d7a2:	4639      	mov	r1, r7
    d7a4:	dd04      	ble.n	d7b0 <__gethex+0x9c>
    d7a6:	105b      	asrs	r3, r3, #1
    d7a8:	2b07      	cmp	r3, #7
    d7aa:	f101 0101 	add.w	r1, r1, #1
    d7ae:	dcfa      	bgt.n	d7a6 <__gethex+0x92>
    d7b0:	ee18 0a10 	vmov	r0, s16
    d7b4:	f000 fb82 	bl	debc <_Balloc>
    d7b8:	4683      	mov	fp, r0
    d7ba:	2800      	cmp	r0, #0
    d7bc:	f000 8266 	beq.w	dc8c <__gethex+0x578>
    d7c0:	f100 0614 	add.w	r6, r0, #20
    d7c4:	42ac      	cmp	r4, r5
    d7c6:	9601      	str	r6, [sp, #4]
    d7c8:	f080 81d2 	bcs.w	db70 <__gethex+0x45c>
    d7cc:	2700      	movs	r7, #0
    d7ce:	f8cd 900c 	str.w	r9, [sp, #12]
    d7d2:	499c      	ldr	r1, [pc, #624]	; (da44 <__gethex+0x330>)
    d7d4:	46a1      	mov	r9, r4
    d7d6:	463c      	mov	r4, r7
    d7d8:	e00c      	b.n	d7f4 <__gethex+0xe0>
    d7da:	2f20      	cmp	r7, #32
    d7dc:	d019      	beq.n	d812 <__gethex+0xfe>
    d7de:	4638      	mov	r0, r7
    d7e0:	3704      	adds	r7, #4
    d7e2:	782a      	ldrb	r2, [r5, #0]
    d7e4:	f818 2002 	ldrb.w	r2, [r8, r2]
    d7e8:	f002 020f 	and.w	r2, r2, #15
    d7ec:	4082      	lsls	r2, r0
    d7ee:	4314      	orrs	r4, r2
    d7f0:	454d      	cmp	r5, r9
    d7f2:	d047      	beq.n	d884 <__gethex+0x170>
    d7f4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    d7f8:	2a2e      	cmp	r2, #46	; 0x2e
    d7fa:	d1ee      	bne.n	d7da <__gethex+0xc6>
    d7fc:	454d      	cmp	r5, r9
    d7fe:	d3ec      	bcc.n	d7da <__gethex+0xc6>
    d800:	2201      	movs	r2, #1
    d802:	4628      	mov	r0, r5
    d804:	f7ff fa2c 	bl	cc60 <strncmp>
    d808:	498e      	ldr	r1, [pc, #568]	; (da44 <__gethex+0x330>)
    d80a:	2800      	cmp	r0, #0
    d80c:	d0f0      	beq.n	d7f0 <__gethex+0xdc>
    d80e:	2f20      	cmp	r7, #32
    d810:	d1e5      	bne.n	d7de <__gethex+0xca>
    d812:	2000      	movs	r0, #0
    d814:	f846 4b04 	str.w	r4, [r6], #4
    d818:	2704      	movs	r7, #4
    d81a:	4604      	mov	r4, r0
    d81c:	e7e1      	b.n	d7e2 <__gethex+0xce>
    d81e:	2d00      	cmp	r5, #0
    d820:	f000 8142 	beq.w	daa8 <__gethex+0x394>
    d824:	7832      	ldrb	r2, [r6, #0]
    d826:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    d82a:	1bad      	subs	r5, r5, r6
    d82c:	2a50      	cmp	r2, #80	; 0x50
    d82e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    d832:	4635      	mov	r5, r6
    d834:	d1ae      	bne.n	d794 <__gethex+0x80>
    d836:	786a      	ldrb	r2, [r5, #1]
    d838:	2a2b      	cmp	r2, #43	; 0x2b
    d83a:	f000 8125 	beq.w	da88 <__gethex+0x374>
    d83e:	2a2d      	cmp	r2, #45	; 0x2d
    d840:	f000 80a5 	beq.w	d98e <__gethex+0x27a>
    d844:	1c6e      	adds	r6, r5, #1
    d846:	2000      	movs	r0, #0
    d848:	f818 1002 	ldrb.w	r1, [r8, r2]
    d84c:	1e4a      	subs	r2, r1, #1
    d84e:	2a18      	cmp	r2, #24
    d850:	f200 809b 	bhi.w	d98a <__gethex+0x276>
    d854:	7872      	ldrb	r2, [r6, #1]
    d856:	f818 2002 	ldrb.w	r2, [r8, r2]
    d85a:	3910      	subs	r1, #16
    d85c:	3601      	adds	r6, #1
    d85e:	2a00      	cmp	r2, #0
    d860:	d15a      	bne.n	d918 <__gethex+0x204>
    d862:	b100      	cbz	r0, d866 <__gethex+0x152>
    d864:	4249      	negs	r1, r1
    d866:	4489      	add	r9, r1
    d868:	f8cb 6000 	str.w	r6, [fp]
    d86c:	2f00      	cmp	r7, #0
    d86e:	d095      	beq.n	d79c <__gethex+0x88>
    d870:	2b00      	cmp	r3, #0
    d872:	bf14      	ite	ne
    d874:	2500      	movne	r5, #0
    d876:	2506      	moveq	r5, #6
    d878:	4628      	mov	r0, r5
    d87a:	b005      	add	sp, #20
    d87c:	ecbd 8b02 	vpop	{d8}
    d880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d884:	f8dd 900c 	ldr.w	r9, [sp, #12]
    d888:	4623      	mov	r3, r4
    d88a:	f846 3b04 	str.w	r3, [r6], #4
    d88e:	4618      	mov	r0, r3
    d890:	9b01      	ldr	r3, [sp, #4]
    d892:	1af6      	subs	r6, r6, r3
    d894:	10b6      	asrs	r6, r6, #2
    d896:	f8cb 6010 	str.w	r6, [fp, #16]
    d89a:	f000 fbe9 	bl	e070 <__hi0bits>
    d89e:	0176      	lsls	r6, r6, #5
    d8a0:	f8da 4000 	ldr.w	r4, [sl]
    d8a4:	1a30      	subs	r0, r6, r0
    d8a6:	42a0      	cmp	r0, r4
    d8a8:	dc75      	bgt.n	d996 <__gethex+0x282>
    d8aa:	f2c0 80ef 	blt.w	da8c <__gethex+0x378>
    d8ae:	2700      	movs	r7, #0
    d8b0:	f8da 3008 	ldr.w	r3, [sl, #8]
    d8b4:	454b      	cmp	r3, r9
    d8b6:	f2c0 8151 	blt.w	db5c <__gethex+0x448>
    d8ba:	f8da 3004 	ldr.w	r3, [sl, #4]
    d8be:	454b      	cmp	r3, r9
    d8c0:	dd4a      	ble.n	d958 <__gethex+0x244>
    d8c2:	eba3 0909 	sub.w	r9, r3, r9
    d8c6:	454c      	cmp	r4, r9
    d8c8:	f300 8082 	bgt.w	d9d0 <__gethex+0x2bc>
    d8cc:	f8da 200c 	ldr.w	r2, [sl, #12]
    d8d0:	2a02      	cmp	r2, #2
    d8d2:	f000 8165 	beq.w	dba0 <__gethex+0x48c>
    d8d6:	2a03      	cmp	r2, #3
    d8d8:	f000 8181 	beq.w	dbde <__gethex+0x4ca>
    d8dc:	2a01      	cmp	r2, #1
    d8de:	f000 816f 	beq.w	dbc0 <__gethex+0x4ac>
    d8e2:	ee18 0a10 	vmov	r0, s16
    d8e6:	4659      	mov	r1, fp
    d8e8:	f000 fb0e 	bl	df08 <_Bfree>
    d8ec:	2550      	movs	r5, #80	; 0x50
    d8ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d8f0:	2300      	movs	r3, #0
    d8f2:	4628      	mov	r0, r5
    d8f4:	6013      	str	r3, [r2, #0]
    d8f6:	b005      	add	sp, #20
    d8f8:	ecbd 8b02 	vpop	{d8}
    d8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d900:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d904:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    d908:	f1a2 0110 	sub.w	r1, r2, #16
    d90c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    d910:	f818 2002 	ldrb.w	r2, [r8, r2]
    d914:	2a00      	cmp	r2, #0
    d916:	d0a4      	beq.n	d862 <__gethex+0x14e>
    d918:	2a19      	cmp	r2, #25
    d91a:	ddf1      	ble.n	d900 <__gethex+0x1ec>
    d91c:	e7a1      	b.n	d862 <__gethex+0x14e>
    d91e:	4949      	ldr	r1, [pc, #292]	; (da44 <__gethex+0x330>)
    d920:	9301      	str	r3, [sp, #4]
    d922:	2201      	movs	r2, #1
    d924:	4620      	mov	r0, r4
    d926:	f7ff f99b 	bl	cc60 <strncmp>
    d92a:	9b01      	ldr	r3, [sp, #4]
    d92c:	2800      	cmp	r0, #0
    d92e:	d16d      	bne.n	da0c <__gethex+0x2f8>
    d930:	7861      	ldrb	r1, [r4, #1]
    d932:	f818 2001 	ldrb.w	r2, [r8, r1]
    d936:	1c65      	adds	r5, r4, #1
    d938:	2a00      	cmp	r2, #0
    d93a:	d069      	beq.n	da10 <__gethex+0x2fc>
    d93c:	2930      	cmp	r1, #48	; 0x30
    d93e:	462c      	mov	r4, r5
    d940:	d105      	bne.n	d94e <__gethex+0x23a>
    d942:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    d946:	2b30      	cmp	r3, #48	; 0x30
    d948:	d0fb      	beq.n	d942 <__gethex+0x22e>
    d94a:	f818 2003 	ldrb.w	r2, [r8, r3]
    d94e:	fab2 f782 	clz	r7, r2
    d952:	097f      	lsrs	r7, r7, #5
    d954:	2301      	movs	r3, #1
    d956:	e702      	b.n	d75e <__gethex+0x4a>
    d958:	2501      	movs	r5, #1
    d95a:	b157      	cbz	r7, d972 <__gethex+0x25e>
    d95c:	f8da 300c 	ldr.w	r3, [sl, #12]
    d960:	2b02      	cmp	r3, #2
    d962:	d05d      	beq.n	da20 <__gethex+0x30c>
    d964:	2b03      	cmp	r3, #3
    d966:	d05f      	beq.n	da28 <__gethex+0x314>
    d968:	2b01      	cmp	r3, #1
    d96a:	f000 8084 	beq.w	da76 <__gethex+0x362>
    d96e:	f045 0510 	orr.w	r5, r5, #16
    d972:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d974:	f8c3 b000 	str.w	fp, [r3]
    d978:	9b02      	ldr	r3, [sp, #8]
    d97a:	4628      	mov	r0, r5
    d97c:	f8c3 9000 	str.w	r9, [r3]
    d980:	b005      	add	sp, #20
    d982:	ecbd 8b02 	vpop	{d8}
    d986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d98a:	462e      	mov	r6, r5
    d98c:	e702      	b.n	d794 <__gethex+0x80>
    d98e:	2001      	movs	r0, #1
    d990:	78aa      	ldrb	r2, [r5, #2]
    d992:	1cae      	adds	r6, r5, #2
    d994:	e758      	b.n	d848 <__gethex+0x134>
    d996:	1b06      	subs	r6, r0, r4
    d998:	4631      	mov	r1, r6
    d99a:	4658      	mov	r0, fp
    d99c:	f000 ff96 	bl	e8cc <__any_on>
    d9a0:	4607      	mov	r7, r0
    d9a2:	b178      	cbz	r0, d9c4 <__gethex+0x2b0>
    d9a4:	1e72      	subs	r2, r6, #1
    d9a6:	1153      	asrs	r3, r2, #5
    d9a8:	9901      	ldr	r1, [sp, #4]
    d9aa:	2701      	movs	r7, #1
    d9ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    d9b0:	f002 031f 	and.w	r3, r2, #31
    d9b4:	fa07 f303 	lsl.w	r3, r7, r3
    d9b8:	420b      	tst	r3, r1
    d9ba:	d003      	beq.n	d9c4 <__gethex+0x2b0>
    d9bc:	42ba      	cmp	r2, r7
    d9be:	f300 80e2 	bgt.w	db86 <__gethex+0x472>
    d9c2:	2702      	movs	r7, #2
    d9c4:	4631      	mov	r1, r6
    d9c6:	4658      	mov	r0, fp
    d9c8:	44b1      	add	r9, r6
    d9ca:	f7ff fe51 	bl	d670 <rshift>
    d9ce:	e76f      	b.n	d8b0 <__gethex+0x19c>
    d9d0:	f109 35ff 	add.w	r5, r9, #4294967295
    d9d4:	2f00      	cmp	r7, #0
    d9d6:	f040 80ce 	bne.w	db76 <__gethex+0x462>
    d9da:	2d00      	cmp	r5, #0
    d9dc:	f040 80cd 	bne.w	db7a <__gethex+0x466>
    d9e0:	116b      	asrs	r3, r5, #5
    d9e2:	9a01      	ldr	r2, [sp, #4]
    d9e4:	f005 051f 	and.w	r5, r5, #31
    d9e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    d9ec:	2301      	movs	r3, #1
    d9ee:	40ab      	lsls	r3, r5
    d9f0:	4213      	tst	r3, r2
    d9f2:	4649      	mov	r1, r9
    d9f4:	4658      	mov	r0, fp
    d9f6:	bf18      	it	ne
    d9f8:	f047 0702 	orrne.w	r7, r7, #2
    d9fc:	eba4 0409 	sub.w	r4, r4, r9
    da00:	f7ff fe36 	bl	d670 <rshift>
    da04:	2502      	movs	r5, #2
    da06:	f8da 9004 	ldr.w	r9, [sl, #4]
    da0a:	e7a6      	b.n	d95a <__gethex+0x246>
    da0c:	7821      	ldrb	r1, [r4, #0]
    da0e:	4625      	mov	r5, r4
    da10:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    da14:	2950      	cmp	r1, #80	; 0x50
    da16:	f000 80bf 	beq.w	db98 <__gethex+0x484>
    da1a:	f8cb 5000 	str.w	r5, [fp]
    da1e:	e727      	b.n	d870 <__gethex+0x15c>
    da20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    da22:	f1c3 0301 	rsb	r3, r3, #1
    da26:	9311      	str	r3, [sp, #68]	; 0x44
    da28:	9b11      	ldr	r3, [sp, #68]	; 0x44
    da2a:	2b00      	cmp	r3, #0
    da2c:	d09f      	beq.n	d96e <__gethex+0x25a>
    da2e:	f8db 7010 	ldr.w	r7, [fp, #16]
    da32:	f8dd 8004 	ldr.w	r8, [sp, #4]
    da36:	00ba      	lsls	r2, r7, #2
    da38:	4643      	mov	r3, r8
    da3a:	9201      	str	r2, [sp, #4]
    da3c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    da40:	2100      	movs	r1, #0
    da42:	e007      	b.n	da54 <__gethex+0x340>
    da44:	20008038 	.word	0x20008038
    da48:	20000bf4 	.word	0x20000bf4
    da4c:	4298      	cmp	r0, r3
    da4e:	f843 1c04 	str.w	r1, [r3, #-4]
    da52:	d93f      	bls.n	dad4 <__gethex+0x3c0>
    da54:	461e      	mov	r6, r3
    da56:	f853 2b04 	ldr.w	r2, [r3], #4
    da5a:	f1b2 3fff 	cmp.w	r2, #4294967295
    da5e:	d0f5      	beq.n	da4c <__gethex+0x338>
    da60:	3201      	adds	r2, #1
    da62:	2d02      	cmp	r5, #2
    da64:	6032      	str	r2, [r6, #0]
    da66:	f000 80bf 	beq.w	dbe8 <__gethex+0x4d4>
    da6a:	f014 041f 	ands.w	r4, r4, #31
    da6e:	f040 80e7 	bne.w	dc40 <__gethex+0x52c>
    da72:	2521      	movs	r5, #33	; 0x21
    da74:	e77d      	b.n	d972 <__gethex+0x25e>
    da76:	07ba      	lsls	r2, r7, #30
    da78:	f57f af79 	bpl.w	d96e <__gethex+0x25a>
    da7c:	9b01      	ldr	r3, [sp, #4]
    da7e:	681b      	ldr	r3, [r3, #0]
    da80:	431f      	orrs	r7, r3
    da82:	07fb      	lsls	r3, r7, #31
    da84:	d4d3      	bmi.n	da2e <__gethex+0x31a>
    da86:	e772      	b.n	d96e <__gethex+0x25a>
    da88:	2000      	movs	r0, #0
    da8a:	e781      	b.n	d990 <__gethex+0x27c>
    da8c:	1a22      	subs	r2, r4, r0
    da8e:	4659      	mov	r1, fp
    da90:	ee18 0a10 	vmov	r0, s16
    da94:	eba9 0902 	sub.w	r9, r9, r2
    da98:	f000 fc76 	bl	e388 <__lshift>
    da9c:	f100 0314 	add.w	r3, r0, #20
    daa0:	4683      	mov	fp, r0
    daa2:	9301      	str	r3, [sp, #4]
    daa4:	2700      	movs	r7, #0
    daa6:	e703      	b.n	d8b0 <__gethex+0x19c>
    daa8:	7872      	ldrb	r2, [r6, #1]
    daaa:	f818 0002 	ldrb.w	r0, [r8, r2]
    daae:	1c71      	adds	r1, r6, #1
    dab0:	2800      	cmp	r0, #0
    dab2:	f000 80a0 	beq.w	dbf6 <__gethex+0x4e2>
    dab6:	460d      	mov	r5, r1
    dab8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    dabc:	f818 0002 	ldrb.w	r0, [r8, r2]
    dac0:	2800      	cmp	r0, #0
    dac2:	d1f8      	bne.n	dab6 <__gethex+0x3a2>
    dac4:	1b75      	subs	r5, r6, r5
    dac6:	ea4f 0985 	mov.w	r9, r5, lsl #2
    daca:	460e      	mov	r6, r1
    dacc:	e65d      	b.n	d78a <__gethex+0x76>
    dace:	3402      	adds	r4, #2
    dad0:	2300      	movs	r3, #0
    dad2:	e638      	b.n	d746 <__gethex+0x32>
    dad4:	f8db 3008 	ldr.w	r3, [fp, #8]
    dad8:	429f      	cmp	r7, r3
    dada:	f280 808e 	bge.w	dbfa <__gethex+0x4e6>
    dade:	463b      	mov	r3, r7
    dae0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    dae4:	2101      	movs	r1, #1
    dae6:	3301      	adds	r3, #1
    dae8:	2d02      	cmp	r5, #2
    daea:	f8cb 3010 	str.w	r3, [fp, #16]
    daee:	6151      	str	r1, [r2, #20]
    daf0:	d07a      	beq.n	dbe8 <__gethex+0x4d4>
    daf2:	429f      	cmp	r7, r3
    daf4:	dab9      	bge.n	da6a <__gethex+0x356>
    daf6:	2b00      	cmp	r3, #0
    daf8:	f340 809b 	ble.w	dc32 <__gethex+0x51e>
    dafc:	f8db 2014 	ldr.w	r2, [fp, #20]
    db00:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    db04:	f10b 0018 	add.w	r0, fp, #24
    db08:	4283      	cmp	r3, r0
    db0a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    db0e:	f240 80b1 	bls.w	dc74 <__gethex+0x560>
    db12:	4644      	mov	r4, r8
    db14:	6801      	ldr	r1, [r0, #0]
    db16:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    db1a:	f844 2b04 	str.w	r2, [r4], #4
    db1e:	f850 2b04 	ldr.w	r2, [r0], #4
    db22:	4283      	cmp	r3, r0
    db24:	ea4f 0252 	mov.w	r2, r2, lsr #1
    db28:	d8f4      	bhi.n	db14 <__gethex+0x400>
    db2a:	eba3 030b 	sub.w	r3, r3, fp
    db2e:	3b19      	subs	r3, #25
    db30:	089b      	lsrs	r3, r3, #2
    db32:	3301      	adds	r3, #1
    db34:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    db38:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    db3c:	2a00      	cmp	r2, #0
    db3e:	f040 809d 	bne.w	dc7c <__gethex+0x568>
    db42:	eba3 0208 	sub.w	r2, r3, r8
    db46:	1092      	asrs	r2, r2, #2
    db48:	4543      	cmp	r3, r8
    db4a:	f8cb 2010 	str.w	r2, [fp, #16]
    db4e:	d073      	beq.n	dc38 <__gethex+0x524>
    db50:	f8da 3008 	ldr.w	r3, [sl, #8]
    db54:	f109 0901 	add.w	r9, r9, #1
    db58:	454b      	cmp	r3, r9
    db5a:	da8a      	bge.n	da72 <__gethex+0x35e>
    db5c:	ee18 0a10 	vmov	r0, s16
    db60:	4659      	mov	r1, fp
    db62:	f000 f9d1 	bl	df08 <_Bfree>
    db66:	9a10      	ldr	r2, [sp, #64]	; 0x40
    db68:	2300      	movs	r3, #0
    db6a:	6013      	str	r3, [r2, #0]
    db6c:	25a3      	movs	r5, #163	; 0xa3
    db6e:	e683      	b.n	d878 <__gethex+0x164>
    db70:	9e01      	ldr	r6, [sp, #4]
    db72:	2300      	movs	r3, #0
    db74:	e689      	b.n	d88a <__gethex+0x176>
    db76:	2701      	movs	r7, #1
    db78:	e732      	b.n	d9e0 <__gethex+0x2cc>
    db7a:	4629      	mov	r1, r5
    db7c:	4658      	mov	r0, fp
    db7e:	f000 fea5 	bl	e8cc <__any_on>
    db82:	4607      	mov	r7, r0
    db84:	e72c      	b.n	d9e0 <__gethex+0x2cc>
    db86:	1eb1      	subs	r1, r6, #2
    db88:	4658      	mov	r0, fp
    db8a:	f000 fe9f 	bl	e8cc <__any_on>
    db8e:	2800      	cmp	r0, #0
    db90:	f43f af17 	beq.w	d9c2 <__gethex+0x2ae>
    db94:	2703      	movs	r7, #3
    db96:	e715      	b.n	d9c4 <__gethex+0x2b0>
    db98:	f04f 0900 	mov.w	r9, #0
    db9c:	2701      	movs	r7, #1
    db9e:	e64a      	b.n	d836 <__gethex+0x122>
    dba0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    dba2:	2a00      	cmp	r2, #0
    dba4:	f47f ae9d 	bne.w	d8e2 <__gethex+0x1ce>
    dba8:	9902      	ldr	r1, [sp, #8]
    dbaa:	600b      	str	r3, [r1, #0]
    dbac:	9b01      	ldr	r3, [sp, #4]
    dbae:	2201      	movs	r2, #1
    dbb0:	f8cb 2010 	str.w	r2, [fp, #16]
    dbb4:	601a      	str	r2, [r3, #0]
    dbb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dbb8:	2562      	movs	r5, #98	; 0x62
    dbba:	f8c3 b000 	str.w	fp, [r3]
    dbbe:	e65b      	b.n	d878 <__gethex+0x164>
    dbc0:	454c      	cmp	r4, r9
    dbc2:	f47f ae8e 	bne.w	d8e2 <__gethex+0x1ce>
    dbc6:	2c01      	cmp	r4, #1
    dbc8:	d0ee      	beq.n	dba8 <__gethex+0x494>
    dbca:	1e61      	subs	r1, r4, #1
    dbcc:	4658      	mov	r0, fp
    dbce:	f000 fe7d 	bl	e8cc <__any_on>
    dbd2:	2800      	cmp	r0, #0
    dbd4:	f43f ae85 	beq.w	d8e2 <__gethex+0x1ce>
    dbd8:	f8da 3004 	ldr.w	r3, [sl, #4]
    dbdc:	e7e4      	b.n	dba8 <__gethex+0x494>
    dbde:	9a11      	ldr	r2, [sp, #68]	; 0x44
    dbe0:	2a00      	cmp	r2, #0
    dbe2:	f43f ae7e 	beq.w	d8e2 <__gethex+0x1ce>
    dbe6:	e7df      	b.n	dba8 <__gethex+0x494>
    dbe8:	f8da 3000 	ldr.w	r3, [sl]
    dbec:	3b01      	subs	r3, #1
    dbee:	42a3      	cmp	r3, r4
    dbf0:	d034      	beq.n	dc5c <__gethex+0x548>
    dbf2:	2522      	movs	r5, #34	; 0x22
    dbf4:	e6bd      	b.n	d972 <__gethex+0x25e>
    dbf6:	460e      	mov	r6, r1
    dbf8:	e5c7      	b.n	d78a <__gethex+0x76>
    dbfa:	f8db 1004 	ldr.w	r1, [fp, #4]
    dbfe:	ee18 0a10 	vmov	r0, s16
    dc02:	3101      	adds	r1, #1
    dc04:	f000 f95a 	bl	debc <_Balloc>
    dc08:	4606      	mov	r6, r0
    dc0a:	b3c8      	cbz	r0, dc80 <__gethex+0x56c>
    dc0c:	f8db 3010 	ldr.w	r3, [fp, #16]
    dc10:	3302      	adds	r3, #2
    dc12:	009a      	lsls	r2, r3, #2
    dc14:	f10b 010c 	add.w	r1, fp, #12
    dc18:	300c      	adds	r0, #12
    dc1a:	f7fa fd5b 	bl	86d4 <memcpy>
    dc1e:	4659      	mov	r1, fp
    dc20:	ee18 0a10 	vmov	r0, s16
    dc24:	f000 f970 	bl	df08 <_Bfree>
    dc28:	f106 0814 	add.w	r8, r6, #20
    dc2c:	6933      	ldr	r3, [r6, #16]
    dc2e:	46b3      	mov	fp, r6
    dc30:	e756      	b.n	dae0 <__gethex+0x3cc>
    dc32:	2300      	movs	r3, #0
    dc34:	f8cb 3010 	str.w	r3, [fp, #16]
    dc38:	2300      	movs	r3, #0
    dc3a:	f8cb 3014 	str.w	r3, [fp, #20]
    dc3e:	e787      	b.n	db50 <__gethex+0x43c>
    dc40:	9b01      	ldr	r3, [sp, #4]
    dc42:	4443      	add	r3, r8
    dc44:	f1c4 0420 	rsb	r4, r4, #32
    dc48:	f853 0c04 	ldr.w	r0, [r3, #-4]
    dc4c:	f000 fa10 	bl	e070 <__hi0bits>
    dc50:	42a0      	cmp	r0, r4
    dc52:	f6bf af0e 	bge.w	da72 <__gethex+0x35e>
    dc56:	f8db 3010 	ldr.w	r3, [fp, #16]
    dc5a:	e74c      	b.n	daf6 <__gethex+0x3e2>
    dc5c:	1163      	asrs	r3, r4, #5
    dc5e:	f004 041f 	and.w	r4, r4, #31
    dc62:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    dc66:	2301      	movs	r3, #1
    dc68:	40a3      	lsls	r3, r4
    dc6a:	4213      	tst	r3, r2
    dc6c:	bf0c      	ite	eq
    dc6e:	2522      	moveq	r5, #34	; 0x22
    dc70:	2521      	movne	r5, #33	; 0x21
    dc72:	e67e      	b.n	d972 <__gethex+0x25e>
    dc74:	f8c8 2000 	str.w	r2, [r8]
    dc78:	4643      	mov	r3, r8
    dc7a:	b16a      	cbz	r2, dc98 <__gethex+0x584>
    dc7c:	3304      	adds	r3, #4
    dc7e:	e760      	b.n	db42 <__gethex+0x42e>
    dc80:	4b07      	ldr	r3, [pc, #28]	; (dca0 <__gethex+0x58c>)
    dc82:	4808      	ldr	r0, [pc, #32]	; (dca4 <__gethex+0x590>)
    dc84:	4632      	mov	r2, r6
    dc86:	2184      	movs	r1, #132	; 0x84
    dc88:	f004 fa0a 	bl	120a0 <__assert_func>
    dc8c:	4b04      	ldr	r3, [pc, #16]	; (dca0 <__gethex+0x58c>)
    dc8e:	4805      	ldr	r0, [pc, #20]	; (dca4 <__gethex+0x590>)
    dc90:	465a      	mov	r2, fp
    dc92:	21e4      	movs	r1, #228	; 0xe4
    dc94:	f004 fa04 	bl	120a0 <__assert_func>
    dc98:	f8cb 2010 	str.w	r2, [fp, #16]
    dc9c:	e7cc      	b.n	dc38 <__gethex+0x524>
    dc9e:	bf00      	nop
    dca0:	20000b7c 	.word	0x20000b7c
    dca4:	20000b90 	.word	0x20000b90

0000dca8 <__match>:
    dca8:	b410      	push	{r4}
    dcaa:	6804      	ldr	r4, [r0, #0]
    dcac:	e009      	b.n	dcc2 <__match+0x1a>
    dcae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    dcb2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    dcb6:	f1bc 0f19 	cmp.w	ip, #25
    dcba:	bf98      	it	ls
    dcbc:	3320      	addls	r3, #32
    dcbe:	4293      	cmp	r3, r2
    dcc0:	d109      	bne.n	dcd6 <__match+0x2e>
    dcc2:	f811 2b01 	ldrb.w	r2, [r1], #1
    dcc6:	2a00      	cmp	r2, #0
    dcc8:	d1f1      	bne.n	dcae <__match+0x6>
    dcca:	3401      	adds	r4, #1
    dccc:	6004      	str	r4, [r0, #0]
    dcce:	2001      	movs	r0, #1
    dcd0:	f85d 4b04 	ldr.w	r4, [sp], #4
    dcd4:	4770      	bx	lr
    dcd6:	2000      	movs	r0, #0
    dcd8:	f85d 4b04 	ldr.w	r4, [sp], #4
    dcdc:	4770      	bx	lr
    dcde:	bf00      	nop

0000dce0 <__hexnan>:
    dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dce4:	6809      	ldr	r1, [r1, #0]
    dce6:	b085      	sub	sp, #20
    dce8:	114b      	asrs	r3, r1, #5
    dcea:	f011 011f 	ands.w	r1, r1, #31
    dcee:	9002      	str	r0, [sp, #8]
    dcf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    dcf4:	9103      	str	r1, [sp, #12]
    dcf6:	f040 808f 	bne.w	de18 <__hexnan+0x138>
    dcfa:	1f1d      	subs	r5, r3, #4
    dcfc:	9301      	str	r3, [sp, #4]
    dcfe:	9b02      	ldr	r3, [sp, #8]
    dd00:	9901      	ldr	r1, [sp, #4]
    dd02:	681c      	ldr	r4, [r3, #0]
    dd04:	2300      	movs	r3, #0
    dd06:	f841 3c04 	str.w	r3, [r1, #-4]
    dd0a:	7861      	ldrb	r1, [r4, #1]
    dd0c:	3401      	adds	r4, #1
    dd0e:	2900      	cmp	r1, #0
    dd10:	f000 8098 	beq.w	de44 <__hexnan+0x164>
    dd14:	f8df 9174 	ldr.w	r9, [pc, #372]	; de8c <__hexnan+0x1ac>
    dd18:	46a8      	mov	r8, r5
    dd1a:	46ac      	mov	ip, r5
    dd1c:	469a      	mov	sl, r3
    dd1e:	461e      	mov	r6, r3
    dd20:	e00e      	b.n	dd40 <__hexnan+0x60>
    dd22:	2920      	cmp	r1, #32
    dd24:	f200 808c 	bhi.w	de40 <__hexnan+0x160>
    dd28:	4556      	cmp	r6, sl
    dd2a:	dd06      	ble.n	dd3a <__hexnan+0x5a>
    dd2c:	45c4      	cmp	ip, r8
    dd2e:	d201      	bcs.n	dd34 <__hexnan+0x54>
    dd30:	2b07      	cmp	r3, #7
    dd32:	dd5b      	ble.n	ddec <__hexnan+0x10c>
    dd34:	4562      	cmp	r2, ip
    dd36:	d351      	bcc.n	dddc <__hexnan+0xfc>
    dd38:	2308      	movs	r3, #8
    dd3a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    dd3e:	b1a1      	cbz	r1, dd6a <__hexnan+0x8a>
    dd40:	f819 0001 	ldrb.w	r0, [r9, r1]
    dd44:	2800      	cmp	r0, #0
    dd46:	d0ec      	beq.n	dd22 <__hexnan+0x42>
    dd48:	3301      	adds	r3, #1
    dd4a:	2b08      	cmp	r3, #8
    dd4c:	f106 0601 	add.w	r6, r6, #1
    dd50:	dc3a      	bgt.n	ddc8 <__hexnan+0xe8>
    dd52:	f8dc 1000 	ldr.w	r1, [ip]
    dd56:	0109      	lsls	r1, r1, #4
    dd58:	f000 000f 	and.w	r0, r0, #15
    dd5c:	4308      	orrs	r0, r1
    dd5e:	f8cc 0000 	str.w	r0, [ip]
    dd62:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    dd66:	2900      	cmp	r1, #0
    dd68:	d1ea      	bne.n	dd40 <__hexnan+0x60>
    dd6a:	2e00      	cmp	r6, #0
    dd6c:	d06a      	beq.n	de44 <__hexnan+0x164>
    dd6e:	45c4      	cmp	ip, r8
    dd70:	d201      	bcs.n	dd76 <__hexnan+0x96>
    dd72:	2b07      	cmp	r3, #7
    dd74:	dd74      	ble.n	de60 <__hexnan+0x180>
    dd76:	4562      	cmp	r2, ip
    dd78:	d252      	bcs.n	de20 <__hexnan+0x140>
    dd7a:	1f11      	subs	r1, r2, #4
    dd7c:	4663      	mov	r3, ip
    dd7e:	f853 0b04 	ldr.w	r0, [r3], #4
    dd82:	f841 0f04 	str.w	r0, [r1, #4]!
    dd86:	42ab      	cmp	r3, r5
    dd88:	d9f9      	bls.n	dd7e <__hexnan+0x9e>
    dd8a:	eba5 030c 	sub.w	r3, r5, ip
    dd8e:	f023 0303 	bic.w	r3, r3, #3
    dd92:	1c69      	adds	r1, r5, #1
    dd94:	3304      	adds	r3, #4
    dd96:	f10c 0c01 	add.w	ip, ip, #1
    dd9a:	4561      	cmp	r1, ip
    dd9c:	bf38      	it	cc
    dd9e:	2304      	movcc	r3, #4
    dda0:	4413      	add	r3, r2
    dda2:	2100      	movs	r1, #0
    dda4:	f843 1b04 	str.w	r1, [r3], #4
    dda8:	42ab      	cmp	r3, r5
    ddaa:	d9fb      	bls.n	dda4 <__hexnan+0xc4>
    ddac:	9b01      	ldr	r3, [sp, #4]
    ddae:	f853 3c04 	ldr.w	r3, [r3, #-4]
    ddb2:	b92b      	cbnz	r3, ddc0 <__hexnan+0xe0>
    ddb4:	42aa      	cmp	r2, r5
    ddb6:	d049      	beq.n	de4c <__hexnan+0x16c>
    ddb8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    ddbc:	2b00      	cmp	r3, #0
    ddbe:	d0f9      	beq.n	ddb4 <__hexnan+0xd4>
    ddc0:	2005      	movs	r0, #5
    ddc2:	b005      	add	sp, #20
    ddc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddc8:	4562      	cmp	r2, ip
    ddca:	d2b6      	bcs.n	dd3a <__hexnan+0x5a>
    ddcc:	2300      	movs	r3, #0
    ddce:	f84c 3c04 	str.w	r3, [ip, #-4]
    ddd2:	4619      	mov	r1, r3
    ddd4:	f1ac 0c04 	sub.w	ip, ip, #4
    ddd8:	2301      	movs	r3, #1
    ddda:	e7bd      	b.n	dd58 <__hexnan+0x78>
    dddc:	2300      	movs	r3, #0
    ddde:	f1ac 0804 	sub.w	r8, ip, #4
    dde2:	f84c 3c04 	str.w	r3, [ip, #-4]
    dde6:	46b2      	mov	sl, r6
    dde8:	46c4      	mov	ip, r8
    ddea:	e7a6      	b.n	dd3a <__hexnan+0x5a>
    ddec:	f1c3 0108 	rsb	r1, r3, #8
    ddf0:	f8dc 3000 	ldr.w	r3, [ip]
    ddf4:	0089      	lsls	r1, r1, #2
    ddf6:	f1c1 0e20 	rsb	lr, r1, #32
    ddfa:	4660      	mov	r0, ip
    ddfc:	469b      	mov	fp, r3
    ddfe:	6847      	ldr	r7, [r0, #4]
    de00:	fa07 f30e 	lsl.w	r3, r7, lr
    de04:	ea43 030b 	orr.w	r3, r3, fp
    de08:	fa27 fb01 	lsr.w	fp, r7, r1
    de0c:	6003      	str	r3, [r0, #0]
    de0e:	f840 bf04 	str.w	fp, [r0, #4]!
    de12:	4540      	cmp	r0, r8
    de14:	d3f3      	bcc.n	ddfe <__hexnan+0x11e>
    de16:	e78d      	b.n	dd34 <__hexnan+0x54>
    de18:	1d19      	adds	r1, r3, #4
    de1a:	9101      	str	r1, [sp, #4]
    de1c:	461d      	mov	r5, r3
    de1e:	e76e      	b.n	dcfe <__hexnan+0x1e>
    de20:	9b03      	ldr	r3, [sp, #12]
    de22:	2b00      	cmp	r3, #0
    de24:	d0c2      	beq.n	ddac <__hexnan+0xcc>
    de26:	9b03      	ldr	r3, [sp, #12]
    de28:	9801      	ldr	r0, [sp, #4]
    de2a:	f1c3 0120 	rsb	r1, r3, #32
    de2e:	f04f 33ff 	mov.w	r3, #4294967295
    de32:	40cb      	lsrs	r3, r1
    de34:	f850 1c04 	ldr.w	r1, [r0, #-4]
    de38:	400b      	ands	r3, r1
    de3a:	f840 3c04 	str.w	r3, [r0, #-4]
    de3e:	e7b8      	b.n	ddb2 <__hexnan+0xd2>
    de40:	2929      	cmp	r1, #41	; 0x29
    de42:	d009      	beq.n	de58 <__hexnan+0x178>
    de44:	2004      	movs	r0, #4
    de46:	b005      	add	sp, #20
    de48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de4c:	2301      	movs	r3, #1
    de4e:	2005      	movs	r0, #5
    de50:	602b      	str	r3, [r5, #0]
    de52:	b005      	add	sp, #20
    de54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de58:	9902      	ldr	r1, [sp, #8]
    de5a:	3401      	adds	r4, #1
    de5c:	600c      	str	r4, [r1, #0]
    de5e:	e784      	b.n	dd6a <__hexnan+0x8a>
    de60:	f8dc 1000 	ldr.w	r1, [ip]
    de64:	f1c3 0308 	rsb	r3, r3, #8
    de68:	009b      	lsls	r3, r3, #2
    de6a:	f1c3 0720 	rsb	r7, r3, #32
    de6e:	4664      	mov	r4, ip
    de70:	4608      	mov	r0, r1
    de72:	6866      	ldr	r6, [r4, #4]
    de74:	fa06 f107 	lsl.w	r1, r6, r7
    de78:	4301      	orrs	r1, r0
    de7a:	fa26 f003 	lsr.w	r0, r6, r3
    de7e:	6021      	str	r1, [r4, #0]
    de80:	f844 0f04 	str.w	r0, [r4, #4]!
    de84:	4544      	cmp	r4, r8
    de86:	d3f4      	bcc.n	de72 <__hexnan+0x192>
    de88:	e775      	b.n	dd76 <__hexnan+0x96>
    de8a:	bf00      	nop
    de8c:	20000bf4 	.word	0x20000bf4

0000de90 <__ascii_mbtowc>:
    de90:	b082      	sub	sp, #8
    de92:	b149      	cbz	r1, dea8 <__ascii_mbtowc+0x18>
    de94:	b15a      	cbz	r2, deae <__ascii_mbtowc+0x1e>
    de96:	b16b      	cbz	r3, deb4 <__ascii_mbtowc+0x24>
    de98:	7813      	ldrb	r3, [r2, #0]
    de9a:	600b      	str	r3, [r1, #0]
    de9c:	7812      	ldrb	r2, [r2, #0]
    de9e:	1e10      	subs	r0, r2, #0
    dea0:	bf18      	it	ne
    dea2:	2001      	movne	r0, #1
    dea4:	b002      	add	sp, #8
    dea6:	4770      	bx	lr
    dea8:	a901      	add	r1, sp, #4
    deaa:	2a00      	cmp	r2, #0
    deac:	d1f3      	bne.n	de96 <__ascii_mbtowc+0x6>
    deae:	4610      	mov	r0, r2
    deb0:	b002      	add	sp, #8
    deb2:	4770      	bx	lr
    deb4:	f06f 0001 	mvn.w	r0, #1
    deb8:	e7f4      	b.n	dea4 <__ascii_mbtowc+0x14>
    deba:	bf00      	nop

0000debc <_Balloc>:
    debc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    debe:	b570      	push	{r4, r5, r6, lr}
    dec0:	4605      	mov	r5, r0
    dec2:	460c      	mov	r4, r1
    dec4:	b14b      	cbz	r3, deda <_Balloc+0x1e>
    dec6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    deca:	b180      	cbz	r0, deee <_Balloc+0x32>
    decc:	6802      	ldr	r2, [r0, #0]
    dece:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    ded2:	2300      	movs	r3, #0
    ded4:	e9c0 3303 	strd	r3, r3, [r0, #12]
    ded8:	bd70      	pop	{r4, r5, r6, pc}
    deda:	2221      	movs	r2, #33	; 0x21
    dedc:	2104      	movs	r1, #4
    dede:	f004 f8ff 	bl	120e0 <_calloc_r>
    dee2:	4603      	mov	r3, r0
    dee4:	6468      	str	r0, [r5, #68]	; 0x44
    dee6:	2800      	cmp	r0, #0
    dee8:	d1ed      	bne.n	dec6 <_Balloc+0xa>
    deea:	2000      	movs	r0, #0
    deec:	bd70      	pop	{r4, r5, r6, pc}
    deee:	2101      	movs	r1, #1
    def0:	fa01 f604 	lsl.w	r6, r1, r4
    def4:	1d72      	adds	r2, r6, #5
    def6:	0092      	lsls	r2, r2, #2
    def8:	4628      	mov	r0, r5
    defa:	f004 f8f1 	bl	120e0 <_calloc_r>
    defe:	2800      	cmp	r0, #0
    df00:	d0f3      	beq.n	deea <_Balloc+0x2e>
    df02:	e9c0 4601 	strd	r4, r6, [r0, #4]
    df06:	e7e4      	b.n	ded2 <_Balloc+0x16>

0000df08 <_Bfree>:
    df08:	b131      	cbz	r1, df18 <_Bfree+0x10>
    df0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    df0c:	684a      	ldr	r2, [r1, #4]
    df0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    df12:	6008      	str	r0, [r1, #0]
    df14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    df18:	4770      	bx	lr
    df1a:	bf00      	nop

0000df1c <__multadd>:
    df1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df20:	690e      	ldr	r6, [r1, #16]
    df22:	4680      	mov	r8, r0
    df24:	460f      	mov	r7, r1
    df26:	461d      	mov	r5, r3
    df28:	f101 0e14 	add.w	lr, r1, #20
    df2c:	2000      	movs	r0, #0
    df2e:	f8de 1000 	ldr.w	r1, [lr]
    df32:	b28c      	uxth	r4, r1
    df34:	fb02 5304 	mla	r3, r2, r4, r5
    df38:	0c09      	lsrs	r1, r1, #16
    df3a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    df3e:	fb02 cc01 	mla	ip, r2, r1, ip
    df42:	3001      	adds	r0, #1
    df44:	b29c      	uxth	r4, r3
    df46:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    df4a:	4286      	cmp	r6, r0
    df4c:	f84e 4b04 	str.w	r4, [lr], #4
    df50:	ea4f 451c 	mov.w	r5, ip, lsr #16
    df54:	dceb      	bgt.n	df2e <__multadd+0x12>
    df56:	b13d      	cbz	r5, df68 <__multadd+0x4c>
    df58:	68bb      	ldr	r3, [r7, #8]
    df5a:	42b3      	cmp	r3, r6
    df5c:	dd07      	ble.n	df6e <__multadd+0x52>
    df5e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    df62:	3601      	adds	r6, #1
    df64:	615d      	str	r5, [r3, #20]
    df66:	613e      	str	r6, [r7, #16]
    df68:	4638      	mov	r0, r7
    df6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df6e:	6879      	ldr	r1, [r7, #4]
    df70:	4640      	mov	r0, r8
    df72:	3101      	adds	r1, #1
    df74:	f7ff ffa2 	bl	debc <_Balloc>
    df78:	4604      	mov	r4, r0
    df7a:	b1b0      	cbz	r0, dfaa <__multadd+0x8e>
    df7c:	693a      	ldr	r2, [r7, #16]
    df7e:	3202      	adds	r2, #2
    df80:	f107 010c 	add.w	r1, r7, #12
    df84:	0092      	lsls	r2, r2, #2
    df86:	300c      	adds	r0, #12
    df88:	f7fa fba4 	bl	86d4 <memcpy>
    df8c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    df90:	687a      	ldr	r2, [r7, #4]
    df92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    df96:	6039      	str	r1, [r7, #0]
    df98:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    df9c:	4627      	mov	r7, r4
    df9e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    dfa2:	3601      	adds	r6, #1
    dfa4:	615d      	str	r5, [r3, #20]
    dfa6:	613e      	str	r6, [r7, #16]
    dfa8:	e7de      	b.n	df68 <__multadd+0x4c>
    dfaa:	4b03      	ldr	r3, [pc, #12]	; (dfb8 <__multadd+0x9c>)
    dfac:	4803      	ldr	r0, [pc, #12]	; (dfbc <__multadd+0xa0>)
    dfae:	4622      	mov	r2, r4
    dfb0:	21ba      	movs	r1, #186	; 0xba
    dfb2:	f004 f875 	bl	120a0 <__assert_func>
    dfb6:	bf00      	nop
    dfb8:	20000b7c 	.word	0x20000b7c
    dfbc:	20000cf4 	.word	0x20000cf4

0000dfc0 <__s2b>:
    dfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dfc4:	4617      	mov	r7, r2
    dfc6:	4a27      	ldr	r2, [pc, #156]	; (e064 <__s2b+0xa4>)
    dfc8:	461e      	mov	r6, r3
    dfca:	3308      	adds	r3, #8
    dfcc:	460c      	mov	r4, r1
    dfce:	2e09      	cmp	r6, #9
    dfd0:	fb82 1203 	smull	r1, r2, r2, r3
    dfd4:	ea4f 73e3 	mov.w	r3, r3, asr #31
    dfd8:	4605      	mov	r5, r0
    dfda:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    dfde:	dd39      	ble.n	e054 <__s2b+0x94>
    dfe0:	f04f 0c01 	mov.w	ip, #1
    dfe4:	2100      	movs	r1, #0
    dfe6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    dfea:	4563      	cmp	r3, ip
    dfec:	f101 0101 	add.w	r1, r1, #1
    dff0:	dcf9      	bgt.n	dfe6 <__s2b+0x26>
    dff2:	4628      	mov	r0, r5
    dff4:	f7ff ff62 	bl	debc <_Balloc>
    dff8:	4601      	mov	r1, r0
    dffa:	b368      	cbz	r0, e058 <__s2b+0x98>
    dffc:	9b08      	ldr	r3, [sp, #32]
    dffe:	6143      	str	r3, [r0, #20]
    e000:	2f09      	cmp	r7, #9
    e002:	f04f 0301 	mov.w	r3, #1
    e006:	6103      	str	r3, [r0, #16]
    e008:	dc12      	bgt.n	e030 <__s2b+0x70>
    e00a:	340a      	adds	r4, #10
    e00c:	2709      	movs	r7, #9
    e00e:	42be      	cmp	r6, r7
    e010:	dd0b      	ble.n	e02a <__s2b+0x6a>
    e012:	1bf2      	subs	r2, r6, r7
    e014:	18a6      	adds	r6, r4, r2
    e016:	f814 3b01 	ldrb.w	r3, [r4], #1
    e01a:	220a      	movs	r2, #10
    e01c:	3b30      	subs	r3, #48	; 0x30
    e01e:	4628      	mov	r0, r5
    e020:	f7ff ff7c 	bl	df1c <__multadd>
    e024:	42a6      	cmp	r6, r4
    e026:	4601      	mov	r1, r0
    e028:	d1f5      	bne.n	e016 <__s2b+0x56>
    e02a:	4608      	mov	r0, r1
    e02c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e030:	f104 0909 	add.w	r9, r4, #9
    e034:	46c8      	mov	r8, r9
    e036:	443c      	add	r4, r7
    e038:	f818 3b01 	ldrb.w	r3, [r8], #1
    e03c:	220a      	movs	r2, #10
    e03e:	3b30      	subs	r3, #48	; 0x30
    e040:	4628      	mov	r0, r5
    e042:	f7ff ff6b 	bl	df1c <__multadd>
    e046:	45a0      	cmp	r8, r4
    e048:	4601      	mov	r1, r0
    e04a:	d1f5      	bne.n	e038 <__s2b+0x78>
    e04c:	f1a7 0408 	sub.w	r4, r7, #8
    e050:	444c      	add	r4, r9
    e052:	e7dc      	b.n	e00e <__s2b+0x4e>
    e054:	2100      	movs	r1, #0
    e056:	e7cc      	b.n	dff2 <__s2b+0x32>
    e058:	460a      	mov	r2, r1
    e05a:	4b03      	ldr	r3, [pc, #12]	; (e068 <__s2b+0xa8>)
    e05c:	4803      	ldr	r0, [pc, #12]	; (e06c <__s2b+0xac>)
    e05e:	21d3      	movs	r1, #211	; 0xd3
    e060:	f004 f81e 	bl	120a0 <__assert_func>
    e064:	38e38e39 	.word	0x38e38e39
    e068:	20000b7c 	.word	0x20000b7c
    e06c:	20000cf4 	.word	0x20000cf4

0000e070 <__hi0bits>:
    e070:	0c03      	lsrs	r3, r0, #16
    e072:	041b      	lsls	r3, r3, #16
    e074:	b9d3      	cbnz	r3, e0ac <__hi0bits+0x3c>
    e076:	0400      	lsls	r0, r0, #16
    e078:	2310      	movs	r3, #16
    e07a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    e07e:	bf04      	itt	eq
    e080:	0200      	lsleq	r0, r0, #8
    e082:	3308      	addeq	r3, #8
    e084:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    e088:	bf04      	itt	eq
    e08a:	0100      	lsleq	r0, r0, #4
    e08c:	3304      	addeq	r3, #4
    e08e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    e092:	bf04      	itt	eq
    e094:	0080      	lsleq	r0, r0, #2
    e096:	3302      	addeq	r3, #2
    e098:	2800      	cmp	r0, #0
    e09a:	db05      	blt.n	e0a8 <__hi0bits+0x38>
    e09c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    e0a0:	f103 0301 	add.w	r3, r3, #1
    e0a4:	bf08      	it	eq
    e0a6:	2320      	moveq	r3, #32
    e0a8:	4618      	mov	r0, r3
    e0aa:	4770      	bx	lr
    e0ac:	2300      	movs	r3, #0
    e0ae:	e7e4      	b.n	e07a <__hi0bits+0xa>

0000e0b0 <__lo0bits>:
    e0b0:	6803      	ldr	r3, [r0, #0]
    e0b2:	f013 0207 	ands.w	r2, r3, #7
    e0b6:	d008      	beq.n	e0ca <__lo0bits+0x1a>
    e0b8:	07d9      	lsls	r1, r3, #31
    e0ba:	d41f      	bmi.n	e0fc <__lo0bits+0x4c>
    e0bc:	079a      	lsls	r2, r3, #30
    e0be:	d522      	bpl.n	e106 <__lo0bits+0x56>
    e0c0:	085b      	lsrs	r3, r3, #1
    e0c2:	6003      	str	r3, [r0, #0]
    e0c4:	2201      	movs	r2, #1
    e0c6:	4610      	mov	r0, r2
    e0c8:	4770      	bx	lr
    e0ca:	b299      	uxth	r1, r3
    e0cc:	b909      	cbnz	r1, e0d2 <__lo0bits+0x22>
    e0ce:	0c1b      	lsrs	r3, r3, #16
    e0d0:	2210      	movs	r2, #16
    e0d2:	b2d9      	uxtb	r1, r3
    e0d4:	b909      	cbnz	r1, e0da <__lo0bits+0x2a>
    e0d6:	3208      	adds	r2, #8
    e0d8:	0a1b      	lsrs	r3, r3, #8
    e0da:	0719      	lsls	r1, r3, #28
    e0dc:	bf04      	itt	eq
    e0de:	091b      	lsreq	r3, r3, #4
    e0e0:	3204      	addeq	r2, #4
    e0e2:	0799      	lsls	r1, r3, #30
    e0e4:	bf04      	itt	eq
    e0e6:	089b      	lsreq	r3, r3, #2
    e0e8:	3202      	addeq	r2, #2
    e0ea:	07d9      	lsls	r1, r3, #31
    e0ec:	d403      	bmi.n	e0f6 <__lo0bits+0x46>
    e0ee:	085b      	lsrs	r3, r3, #1
    e0f0:	f102 0201 	add.w	r2, r2, #1
    e0f4:	d005      	beq.n	e102 <__lo0bits+0x52>
    e0f6:	6003      	str	r3, [r0, #0]
    e0f8:	4610      	mov	r0, r2
    e0fa:	4770      	bx	lr
    e0fc:	2200      	movs	r2, #0
    e0fe:	4610      	mov	r0, r2
    e100:	4770      	bx	lr
    e102:	2220      	movs	r2, #32
    e104:	e7df      	b.n	e0c6 <__lo0bits+0x16>
    e106:	089b      	lsrs	r3, r3, #2
    e108:	2202      	movs	r2, #2
    e10a:	6003      	str	r3, [r0, #0]
    e10c:	4610      	mov	r0, r2
    e10e:	4770      	bx	lr

0000e110 <__i2b>:
    e110:	b538      	push	{r3, r4, r5, lr}
    e112:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e114:	4604      	mov	r4, r0
    e116:	460d      	mov	r5, r1
    e118:	b14b      	cbz	r3, e12e <__i2b+0x1e>
    e11a:	6858      	ldr	r0, [r3, #4]
    e11c:	b1b0      	cbz	r0, e14c <__i2b+0x3c>
    e11e:	6802      	ldr	r2, [r0, #0]
    e120:	605a      	str	r2, [r3, #4]
    e122:	2200      	movs	r2, #0
    e124:	2301      	movs	r3, #1
    e126:	e9c0 3504 	strd	r3, r5, [r0, #16]
    e12a:	60c2      	str	r2, [r0, #12]
    e12c:	bd38      	pop	{r3, r4, r5, pc}
    e12e:	2221      	movs	r2, #33	; 0x21
    e130:	2104      	movs	r1, #4
    e132:	f003 ffd5 	bl	120e0 <_calloc_r>
    e136:	4603      	mov	r3, r0
    e138:	6460      	str	r0, [r4, #68]	; 0x44
    e13a:	2800      	cmp	r0, #0
    e13c:	d1ed      	bne.n	e11a <__i2b+0xa>
    e13e:	4b09      	ldr	r3, [pc, #36]	; (e164 <__i2b+0x54>)
    e140:	4809      	ldr	r0, [pc, #36]	; (e168 <__i2b+0x58>)
    e142:	2200      	movs	r2, #0
    e144:	f240 1145 	movw	r1, #325	; 0x145
    e148:	f003 ffaa 	bl	120a0 <__assert_func>
    e14c:	221c      	movs	r2, #28
    e14e:	2101      	movs	r1, #1
    e150:	4620      	mov	r0, r4
    e152:	f003 ffc5 	bl	120e0 <_calloc_r>
    e156:	2800      	cmp	r0, #0
    e158:	d0f1      	beq.n	e13e <__i2b+0x2e>
    e15a:	2201      	movs	r2, #1
    e15c:	2302      	movs	r3, #2
    e15e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    e162:	e7de      	b.n	e122 <__i2b+0x12>
    e164:	20000b7c 	.word	0x20000b7c
    e168:	20000cf4 	.word	0x20000cf4

0000e16c <__multiply>:
    e16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e170:	690e      	ldr	r6, [r1, #16]
    e172:	6915      	ldr	r5, [r2, #16]
    e174:	42ae      	cmp	r6, r5
    e176:	b085      	sub	sp, #20
    e178:	4688      	mov	r8, r1
    e17a:	4614      	mov	r4, r2
    e17c:	db05      	blt.n	e18a <__multiply+0x1e>
    e17e:	462a      	mov	r2, r5
    e180:	4623      	mov	r3, r4
    e182:	4635      	mov	r5, r6
    e184:	460c      	mov	r4, r1
    e186:	4616      	mov	r6, r2
    e188:	4698      	mov	r8, r3
    e18a:	68a3      	ldr	r3, [r4, #8]
    e18c:	6861      	ldr	r1, [r4, #4]
    e18e:	19af      	adds	r7, r5, r6
    e190:	42bb      	cmp	r3, r7
    e192:	bfb8      	it	lt
    e194:	3101      	addlt	r1, #1
    e196:	f7ff fe91 	bl	debc <_Balloc>
    e19a:	9001      	str	r0, [sp, #4]
    e19c:	2800      	cmp	r0, #0
    e19e:	f000 8087 	beq.w	e2b0 <__multiply+0x144>
    e1a2:	9b01      	ldr	r3, [sp, #4]
    e1a4:	f103 0914 	add.w	r9, r3, #20
    e1a8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    e1ac:	45d1      	cmp	r9, sl
    e1ae:	d205      	bcs.n	e1bc <__multiply+0x50>
    e1b0:	464b      	mov	r3, r9
    e1b2:	2200      	movs	r2, #0
    e1b4:	f843 2b04 	str.w	r2, [r3], #4
    e1b8:	459a      	cmp	sl, r3
    e1ba:	d8fb      	bhi.n	e1b4 <__multiply+0x48>
    e1bc:	f108 0814 	add.w	r8, r8, #20
    e1c0:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    e1c4:	f104 0314 	add.w	r3, r4, #20
    e1c8:	45d8      	cmp	r8, fp
    e1ca:	461a      	mov	r2, r3
    e1cc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    e1d0:	d25f      	bcs.n	e292 <__multiply+0x126>
    e1d2:	1b2b      	subs	r3, r5, r4
    e1d4:	3b15      	subs	r3, #21
    e1d6:	f023 0303 	bic.w	r3, r3, #3
    e1da:	3304      	adds	r3, #4
    e1dc:	3415      	adds	r4, #21
    e1de:	42a5      	cmp	r5, r4
    e1e0:	bf38      	it	cc
    e1e2:	2304      	movcc	r3, #4
    e1e4:	e9cd a702 	strd	sl, r7, [sp, #8]
    e1e8:	46ac      	mov	ip, r5
    e1ea:	461f      	mov	r7, r3
    e1ec:	4692      	mov	sl, r2
    e1ee:	e005      	b.n	e1fc <__multiply+0x90>
    e1f0:	0c09      	lsrs	r1, r1, #16
    e1f2:	d129      	bne.n	e248 <__multiply+0xdc>
    e1f4:	45c3      	cmp	fp, r8
    e1f6:	f109 0904 	add.w	r9, r9, #4
    e1fa:	d948      	bls.n	e28e <__multiply+0x122>
    e1fc:	f858 1b04 	ldr.w	r1, [r8], #4
    e200:	b28d      	uxth	r5, r1
    e202:	2d00      	cmp	r5, #0
    e204:	d0f4      	beq.n	e1f0 <__multiply+0x84>
    e206:	4656      	mov	r6, sl
    e208:	464c      	mov	r4, r9
    e20a:	2300      	movs	r3, #0
    e20c:	f856 1b04 	ldr.w	r1, [r6], #4
    e210:	6822      	ldr	r2, [r4, #0]
    e212:	fa1f fe81 	uxth.w	lr, r1
    e216:	b290      	uxth	r0, r2
    e218:	0c09      	lsrs	r1, r1, #16
    e21a:	fb05 000e 	mla	r0, r5, lr, r0
    e21e:	0c12      	lsrs	r2, r2, #16
    e220:	4403      	add	r3, r0
    e222:	fb05 2201 	mla	r2, r5, r1, r2
    e226:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e22a:	b29b      	uxth	r3, r3
    e22c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    e230:	45b4      	cmp	ip, r6
    e232:	f844 3b04 	str.w	r3, [r4], #4
    e236:	ea4f 4312 	mov.w	r3, r2, lsr #16
    e23a:	d8e7      	bhi.n	e20c <__multiply+0xa0>
    e23c:	f849 3007 	str.w	r3, [r9, r7]
    e240:	f858 1c04 	ldr.w	r1, [r8, #-4]
    e244:	0c09      	lsrs	r1, r1, #16
    e246:	d0d5      	beq.n	e1f4 <__multiply+0x88>
    e248:	f8d9 3000 	ldr.w	r3, [r9]
    e24c:	4650      	mov	r0, sl
    e24e:	461a      	mov	r2, r3
    e250:	464c      	mov	r4, r9
    e252:	2600      	movs	r6, #0
    e254:	8805      	ldrh	r5, [r0, #0]
    e256:	0c12      	lsrs	r2, r2, #16
    e258:	fb01 2205 	mla	r2, r1, r5, r2
    e25c:	4416      	add	r6, r2
    e25e:	b29b      	uxth	r3, r3
    e260:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    e264:	f844 3b04 	str.w	r3, [r4], #4
    e268:	f850 5b04 	ldr.w	r5, [r0], #4
    e26c:	6822      	ldr	r2, [r4, #0]
    e26e:	0c2d      	lsrs	r5, r5, #16
    e270:	b293      	uxth	r3, r2
    e272:	fb01 3305 	mla	r3, r1, r5, r3
    e276:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    e27a:	4584      	cmp	ip, r0
    e27c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    e280:	d8e8      	bhi.n	e254 <__multiply+0xe8>
    e282:	45c3      	cmp	fp, r8
    e284:	f849 3007 	str.w	r3, [r9, r7]
    e288:	f109 0904 	add.w	r9, r9, #4
    e28c:	d8b6      	bhi.n	e1fc <__multiply+0x90>
    e28e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    e292:	2f00      	cmp	r7, #0
    e294:	dc02      	bgt.n	e29c <__multiply+0x130>
    e296:	e005      	b.n	e2a4 <__multiply+0x138>
    e298:	3f01      	subs	r7, #1
    e29a:	d003      	beq.n	e2a4 <__multiply+0x138>
    e29c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    e2a0:	2b00      	cmp	r3, #0
    e2a2:	d0f9      	beq.n	e298 <__multiply+0x12c>
    e2a4:	9b01      	ldr	r3, [sp, #4]
    e2a6:	4618      	mov	r0, r3
    e2a8:	611f      	str	r7, [r3, #16]
    e2aa:	b005      	add	sp, #20
    e2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2b0:	4b03      	ldr	r3, [pc, #12]	; (e2c0 <__multiply+0x154>)
    e2b2:	4804      	ldr	r0, [pc, #16]	; (e2c4 <__multiply+0x158>)
    e2b4:	9a01      	ldr	r2, [sp, #4]
    e2b6:	f44f 71b1 	mov.w	r1, #354	; 0x162
    e2ba:	f003 fef1 	bl	120a0 <__assert_func>
    e2be:	bf00      	nop
    e2c0:	20000b7c 	.word	0x20000b7c
    e2c4:	20000cf4 	.word	0x20000cf4

0000e2c8 <__pow5mult>:
    e2c8:	f012 0303 	ands.w	r3, r2, #3
    e2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2d0:	4614      	mov	r4, r2
    e2d2:	4606      	mov	r6, r0
    e2d4:	d132      	bne.n	e33c <__pow5mult+0x74>
    e2d6:	460d      	mov	r5, r1
    e2d8:	10a4      	asrs	r4, r4, #2
    e2da:	d020      	beq.n	e31e <__pow5mult+0x56>
    e2dc:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    e2e0:	f1b8 0f00 	cmp.w	r8, #0
    e2e4:	d033      	beq.n	e34e <__pow5mult+0x86>
    e2e6:	07e3      	lsls	r3, r4, #31
    e2e8:	f04f 0700 	mov.w	r7, #0
    e2ec:	d407      	bmi.n	e2fe <__pow5mult+0x36>
    e2ee:	1064      	asrs	r4, r4, #1
    e2f0:	d015      	beq.n	e31e <__pow5mult+0x56>
    e2f2:	f8d8 0000 	ldr.w	r0, [r8]
    e2f6:	b1a8      	cbz	r0, e324 <__pow5mult+0x5c>
    e2f8:	4680      	mov	r8, r0
    e2fa:	07e3      	lsls	r3, r4, #31
    e2fc:	d5f7      	bpl.n	e2ee <__pow5mult+0x26>
    e2fe:	4642      	mov	r2, r8
    e300:	4629      	mov	r1, r5
    e302:	4630      	mov	r0, r6
    e304:	f7ff ff32 	bl	e16c <__multiply>
    e308:	b1b5      	cbz	r5, e338 <__pow5mult+0x70>
    e30a:	6869      	ldr	r1, [r5, #4]
    e30c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    e30e:	1064      	asrs	r4, r4, #1
    e310:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    e314:	602a      	str	r2, [r5, #0]
    e316:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    e31a:	4605      	mov	r5, r0
    e31c:	d1e9      	bne.n	e2f2 <__pow5mult+0x2a>
    e31e:	4628      	mov	r0, r5
    e320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e324:	4642      	mov	r2, r8
    e326:	4641      	mov	r1, r8
    e328:	4630      	mov	r0, r6
    e32a:	f7ff ff1f 	bl	e16c <__multiply>
    e32e:	f8c8 0000 	str.w	r0, [r8]
    e332:	6007      	str	r7, [r0, #0]
    e334:	4680      	mov	r8, r0
    e336:	e7e0      	b.n	e2fa <__pow5mult+0x32>
    e338:	4605      	mov	r5, r0
    e33a:	e7d8      	b.n	e2ee <__pow5mult+0x26>
    e33c:	3b01      	subs	r3, #1
    e33e:	4a0f      	ldr	r2, [pc, #60]	; (e37c <__pow5mult+0xb4>)
    e340:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    e344:	2300      	movs	r3, #0
    e346:	f7ff fde9 	bl	df1c <__multadd>
    e34a:	4605      	mov	r5, r0
    e34c:	e7c4      	b.n	e2d8 <__pow5mult+0x10>
    e34e:	2101      	movs	r1, #1
    e350:	4630      	mov	r0, r6
    e352:	f7ff fdb3 	bl	debc <_Balloc>
    e356:	4680      	mov	r8, r0
    e358:	b140      	cbz	r0, e36c <__pow5mult+0xa4>
    e35a:	2301      	movs	r3, #1
    e35c:	f240 2271 	movw	r2, #625	; 0x271
    e360:	e9c0 3204 	strd	r3, r2, [r0, #16]
    e364:	2300      	movs	r3, #0
    e366:	6430      	str	r0, [r6, #64]	; 0x40
    e368:	6003      	str	r3, [r0, #0]
    e36a:	e7bc      	b.n	e2e6 <__pow5mult+0x1e>
    e36c:	4b04      	ldr	r3, [pc, #16]	; (e380 <__pow5mult+0xb8>)
    e36e:	4805      	ldr	r0, [pc, #20]	; (e384 <__pow5mult+0xbc>)
    e370:	4642      	mov	r2, r8
    e372:	f240 1145 	movw	r1, #325	; 0x145
    e376:	f003 fe93 	bl	120a0 <__assert_func>
    e37a:	bf00      	nop
    e37c:	20007d40 	.word	0x20007d40
    e380:	20000b7c 	.word	0x20000b7c
    e384:	20000cf4 	.word	0x20000cf4

0000e388 <__lshift>:
    e388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e38c:	460d      	mov	r5, r1
    e38e:	4614      	mov	r4, r2
    e390:	692f      	ldr	r7, [r5, #16]
    e392:	68ab      	ldr	r3, [r5, #8]
    e394:	6849      	ldr	r1, [r1, #4]
    e396:	eb07 1762 	add.w	r7, r7, r2, asr #5
    e39a:	1c7e      	adds	r6, r7, #1
    e39c:	429e      	cmp	r6, r3
    e39e:	4680      	mov	r8, r0
    e3a0:	ea4f 1962 	mov.w	r9, r2, asr #5
    e3a4:	dd04      	ble.n	e3b0 <__lshift+0x28>
    e3a6:	005b      	lsls	r3, r3, #1
    e3a8:	429e      	cmp	r6, r3
    e3aa:	f101 0101 	add.w	r1, r1, #1
    e3ae:	dcfa      	bgt.n	e3a6 <__lshift+0x1e>
    e3b0:	4640      	mov	r0, r8
    e3b2:	f7ff fd83 	bl	debc <_Balloc>
    e3b6:	4684      	mov	ip, r0
    e3b8:	2800      	cmp	r0, #0
    e3ba:	d052      	beq.n	e462 <__lshift+0xda>
    e3bc:	f1b9 0f00 	cmp.w	r9, #0
    e3c0:	f100 0214 	add.w	r2, r0, #20
    e3c4:	dd0e      	ble.n	e3e4 <__lshift+0x5c>
    e3c6:	f109 0105 	add.w	r1, r9, #5
    e3ca:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    e3ce:	4613      	mov	r3, r2
    e3d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    e3d4:	2000      	movs	r0, #0
    e3d6:	f843 0b04 	str.w	r0, [r3], #4
    e3da:	428b      	cmp	r3, r1
    e3dc:	d1fb      	bne.n	e3d6 <__lshift+0x4e>
    e3de:	f1ae 0314 	sub.w	r3, lr, #20
    e3e2:	441a      	add	r2, r3
    e3e4:	6929      	ldr	r1, [r5, #16]
    e3e6:	f105 0314 	add.w	r3, r5, #20
    e3ea:	f014 0e1f 	ands.w	lr, r4, #31
    e3ee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    e3f2:	d02e      	beq.n	e452 <__lshift+0xca>
    e3f4:	f1ce 0920 	rsb	r9, lr, #32
    e3f8:	4610      	mov	r0, r2
    e3fa:	f04f 0a00 	mov.w	sl, #0
    e3fe:	681c      	ldr	r4, [r3, #0]
    e400:	fa04 f40e 	lsl.w	r4, r4, lr
    e404:	ea44 040a 	orr.w	r4, r4, sl
    e408:	f840 4b04 	str.w	r4, [r0], #4
    e40c:	f853 4b04 	ldr.w	r4, [r3], #4
    e410:	4299      	cmp	r1, r3
    e412:	fa24 fa09 	lsr.w	sl, r4, r9
    e416:	d8f2      	bhi.n	e3fe <__lshift+0x76>
    e418:	1b4b      	subs	r3, r1, r5
    e41a:	3b15      	subs	r3, #21
    e41c:	f023 0303 	bic.w	r3, r3, #3
    e420:	3304      	adds	r3, #4
    e422:	f105 0015 	add.w	r0, r5, #21
    e426:	4281      	cmp	r1, r0
    e428:	bf38      	it	cc
    e42a:	2304      	movcc	r3, #4
    e42c:	f1ba 0f00 	cmp.w	sl, #0
    e430:	bf18      	it	ne
    e432:	4637      	movne	r7, r6
    e434:	f842 a003 	str.w	sl, [r2, r3]
    e438:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    e43c:	686a      	ldr	r2, [r5, #4]
    e43e:	f8cc 7010 	str.w	r7, [ip, #16]
    e442:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e446:	6029      	str	r1, [r5, #0]
    e448:	4660      	mov	r0, ip
    e44a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    e44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e452:	3a04      	subs	r2, #4
    e454:	f853 0b04 	ldr.w	r0, [r3], #4
    e458:	f842 0f04 	str.w	r0, [r2, #4]!
    e45c:	4299      	cmp	r1, r3
    e45e:	d8f9      	bhi.n	e454 <__lshift+0xcc>
    e460:	e7ea      	b.n	e438 <__lshift+0xb0>
    e462:	4b03      	ldr	r3, [pc, #12]	; (e470 <__lshift+0xe8>)
    e464:	4803      	ldr	r0, [pc, #12]	; (e474 <__lshift+0xec>)
    e466:	4662      	mov	r2, ip
    e468:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    e46c:	f003 fe18 	bl	120a0 <__assert_func>
    e470:	20000b7c 	.word	0x20000b7c
    e474:	20000cf4 	.word	0x20000cf4

0000e478 <__mcmp>:
    e478:	690b      	ldr	r3, [r1, #16]
    e47a:	4684      	mov	ip, r0
    e47c:	6900      	ldr	r0, [r0, #16]
    e47e:	1ac0      	subs	r0, r0, r3
    e480:	d116      	bne.n	e4b0 <__mcmp+0x38>
    e482:	f10c 0c14 	add.w	ip, ip, #20
    e486:	3114      	adds	r1, #20
    e488:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    e48c:	b410      	push	{r4}
    e48e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    e492:	e001      	b.n	e498 <__mcmp+0x20>
    e494:	4594      	cmp	ip, r2
    e496:	d208      	bcs.n	e4aa <__mcmp+0x32>
    e498:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    e49c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    e4a0:	428c      	cmp	r4, r1
    e4a2:	d0f7      	beq.n	e494 <__mcmp+0x1c>
    e4a4:	d205      	bcs.n	e4b2 <__mcmp+0x3a>
    e4a6:	f04f 30ff 	mov.w	r0, #4294967295
    e4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    e4ae:	4770      	bx	lr
    e4b0:	4770      	bx	lr
    e4b2:	2001      	movs	r0, #1
    e4b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    e4b8:	4770      	bx	lr
    e4ba:	bf00      	nop

0000e4bc <__mdiff>:
    e4bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4c0:	690f      	ldr	r7, [r1, #16]
    e4c2:	6913      	ldr	r3, [r2, #16]
    e4c4:	1aff      	subs	r7, r7, r3
    e4c6:	2f00      	cmp	r7, #0
    e4c8:	460e      	mov	r6, r1
    e4ca:	4690      	mov	r8, r2
    e4cc:	d17f      	bne.n	e5ce <__mdiff+0x112>
    e4ce:	f101 0514 	add.w	r5, r1, #20
    e4d2:	3214      	adds	r2, #20
    e4d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    e4d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    e4dc:	e001      	b.n	e4e2 <__mdiff+0x26>
    e4de:	429d      	cmp	r5, r3
    e4e0:	d278      	bcs.n	e5d4 <__mdiff+0x118>
    e4e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    e4e6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    e4ea:	42a1      	cmp	r1, r4
    e4ec:	d0f7      	beq.n	e4de <__mdiff+0x22>
    e4ee:	d369      	bcc.n	e5c4 <__mdiff+0x108>
    e4f0:	6871      	ldr	r1, [r6, #4]
    e4f2:	f7ff fce3 	bl	debc <_Balloc>
    e4f6:	4681      	mov	r9, r0
    e4f8:	2800      	cmp	r0, #0
    e4fa:	d077      	beq.n	e5ec <__mdiff+0x130>
    e4fc:	6935      	ldr	r5, [r6, #16]
    e4fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
    e502:	60c7      	str	r7, [r0, #12]
    e504:	f108 0e14 	add.w	lr, r8, #20
    e508:	f106 0014 	add.w	r0, r6, #20
    e50c:	f109 0a14 	add.w	sl, r9, #20
    e510:	f106 0110 	add.w	r1, r6, #16
    e514:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    e518:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    e51c:	4656      	mov	r6, sl
    e51e:	f04f 0c00 	mov.w	ip, #0
    e522:	f85e 4b04 	ldr.w	r4, [lr], #4
    e526:	f851 bf04 	ldr.w	fp, [r1, #4]!
    e52a:	b2a3      	uxth	r3, r4
    e52c:	fa1c fc8b 	uxtah	ip, ip, fp
    e530:	ebac 0303 	sub.w	r3, ip, r3
    e534:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    e538:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    e53c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    e540:	b29b      	uxth	r3, r3
    e542:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    e546:	4572      	cmp	r2, lr
    e548:	f846 3b04 	str.w	r3, [r6], #4
    e54c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    e550:	d8e7      	bhi.n	e522 <__mdiff+0x66>
    e552:	eba2 0108 	sub.w	r1, r2, r8
    e556:	3915      	subs	r1, #21
    e558:	f108 0815 	add.w	r8, r8, #21
    e55c:	4542      	cmp	r2, r8
    e55e:	f021 0403 	bic.w	r4, r1, #3
    e562:	f104 0404 	add.w	r4, r4, #4
    e566:	bf38      	it	cc
    e568:	2404      	movcc	r4, #4
    e56a:	4420      	add	r0, r4
    e56c:	f021 0203 	bic.w	r2, r1, #3
    e570:	bf38      	it	cc
    e572:	2200      	movcc	r2, #0
    e574:	4287      	cmp	r7, r0
    e576:	4452      	add	r2, sl
    e578:	4454      	add	r4, sl
    e57a:	d918      	bls.n	e5ae <__mdiff+0xf2>
    e57c:	4626      	mov	r6, r4
    e57e:	4601      	mov	r1, r0
    e580:	f851 3b04 	ldr.w	r3, [r1], #4
    e584:	fa1c fc83 	uxtah	ip, ip, r3
    e588:	ea4f 422c 	mov.w	r2, ip, asr #16
    e58c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e590:	fa1f fc8c 	uxth.w	ip, ip
    e594:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    e598:	428f      	cmp	r7, r1
    e59a:	f846 3b04 	str.w	r3, [r6], #4
    e59e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    e5a2:	d8ed      	bhi.n	e580 <__mdiff+0xc4>
    e5a4:	3f01      	subs	r7, #1
    e5a6:	1a3f      	subs	r7, r7, r0
    e5a8:	f027 0703 	bic.w	r7, r7, #3
    e5ac:	19e2      	adds	r2, r4, r7
    e5ae:	b923      	cbnz	r3, e5ba <__mdiff+0xfe>
    e5b0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    e5b4:	3d01      	subs	r5, #1
    e5b6:	2b00      	cmp	r3, #0
    e5b8:	d0fa      	beq.n	e5b0 <__mdiff+0xf4>
    e5ba:	f8c9 5010 	str.w	r5, [r9, #16]
    e5be:	4648      	mov	r0, r9
    e5c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5c4:	4633      	mov	r3, r6
    e5c6:	2701      	movs	r7, #1
    e5c8:	4646      	mov	r6, r8
    e5ca:	4698      	mov	r8, r3
    e5cc:	e790      	b.n	e4f0 <__mdiff+0x34>
    e5ce:	dbf9      	blt.n	e5c4 <__mdiff+0x108>
    e5d0:	2700      	movs	r7, #0
    e5d2:	e78d      	b.n	e4f0 <__mdiff+0x34>
    e5d4:	2100      	movs	r1, #0
    e5d6:	f7ff fc71 	bl	debc <_Balloc>
    e5da:	4681      	mov	r9, r0
    e5dc:	b168      	cbz	r0, e5fa <__mdiff+0x13e>
    e5de:	2201      	movs	r2, #1
    e5e0:	2300      	movs	r3, #0
    e5e2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    e5e6:	4648      	mov	r0, r9
    e5e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5ec:	4b06      	ldr	r3, [pc, #24]	; (e608 <__mdiff+0x14c>)
    e5ee:	4807      	ldr	r0, [pc, #28]	; (e60c <__mdiff+0x150>)
    e5f0:	464a      	mov	r2, r9
    e5f2:	f240 2145 	movw	r1, #581	; 0x245
    e5f6:	f003 fd53 	bl	120a0 <__assert_func>
    e5fa:	4b03      	ldr	r3, [pc, #12]	; (e608 <__mdiff+0x14c>)
    e5fc:	4803      	ldr	r0, [pc, #12]	; (e60c <__mdiff+0x150>)
    e5fe:	464a      	mov	r2, r9
    e600:	f240 2137 	movw	r1, #567	; 0x237
    e604:	f003 fd4c 	bl	120a0 <__assert_func>
    e608:	20000b7c 	.word	0x20000b7c
    e60c:	20000cf4 	.word	0x20000cf4

0000e610 <__ulp>:
    e610:	b082      	sub	sp, #8
    e612:	ed8d 0b00 	vstr	d0, [sp]
    e616:	4b16      	ldr	r3, [pc, #88]	; (e670 <__ulp+0x60>)
    e618:	9a01      	ldr	r2, [sp, #4]
    e61a:	4013      	ands	r3, r2
    e61c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    e620:	2b00      	cmp	r3, #0
    e622:	dd06      	ble.n	e632 <__ulp+0x22>
    e624:	2200      	movs	r2, #0
    e626:	4619      	mov	r1, r3
    e628:	4610      	mov	r0, r2
    e62a:	ec41 0b10 	vmov	d0, r0, r1
    e62e:	b002      	add	sp, #8
    e630:	4770      	bx	lr
    e632:	425b      	negs	r3, r3
    e634:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    e638:	ea4f 5223 	mov.w	r2, r3, asr #20
    e63c:	da09      	bge.n	e652 <__ulp+0x42>
    e63e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    e642:	4113      	asrs	r3, r2
    e644:	2200      	movs	r2, #0
    e646:	4619      	mov	r1, r3
    e648:	4610      	mov	r0, r2
    e64a:	ec41 0b10 	vmov	d0, r0, r1
    e64e:	b002      	add	sp, #8
    e650:	4770      	bx	lr
    e652:	f1a2 0314 	sub.w	r3, r2, #20
    e656:	2b1e      	cmp	r3, #30
    e658:	bfda      	itte	le
    e65a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    e65e:	40da      	lsrle	r2, r3
    e660:	2201      	movgt	r2, #1
    e662:	2300      	movs	r3, #0
    e664:	4619      	mov	r1, r3
    e666:	4610      	mov	r0, r2
    e668:	ec41 0b10 	vmov	d0, r0, r1
    e66c:	b002      	add	sp, #8
    e66e:	4770      	bx	lr
    e670:	7ff00000 	.word	0x7ff00000

0000e674 <__b2d>:
    e674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e676:	6904      	ldr	r4, [r0, #16]
    e678:	f100 0614 	add.w	r6, r0, #20
    e67c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    e680:	1f27      	subs	r7, r4, #4
    e682:	f854 5c04 	ldr.w	r5, [r4, #-4]
    e686:	4628      	mov	r0, r5
    e688:	f7ff fcf2 	bl	e070 <__hi0bits>
    e68c:	f1c0 0320 	rsb	r3, r0, #32
    e690:	280a      	cmp	r0, #10
    e692:	600b      	str	r3, [r1, #0]
    e694:	dd1b      	ble.n	e6ce <__b2d+0x5a>
    e696:	42be      	cmp	r6, r7
    e698:	d20b      	bcs.n	e6b2 <__b2d+0x3e>
    e69a:	380b      	subs	r0, #11
    e69c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    e6a0:	d12e      	bne.n	e700 <__b2d+0x8c>
    e6a2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    e6a6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e6aa:	460a      	mov	r2, r1
    e6ac:	ec43 2b10 	vmov	d0, r2, r3
    e6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e6b2:	f1b0 010b 	subs.w	r1, r0, #11
    e6b6:	d0f4      	beq.n	e6a2 <__b2d+0x2e>
    e6b8:	fa05 f101 	lsl.w	r1, r5, r1
    e6bc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    e6c0:	2100      	movs	r1, #0
    e6c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e6c6:	460a      	mov	r2, r1
    e6c8:	ec43 2b10 	vmov	d0, r2, r3
    e6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e6ce:	f1c0 0c0b 	rsb	ip, r0, #11
    e6d2:	fa25 f10c 	lsr.w	r1, r5, ip
    e6d6:	42be      	cmp	r6, r7
    e6d8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    e6dc:	bf38      	it	cc
    e6de:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    e6e2:	f100 0015 	add.w	r0, r0, #21
    e6e6:	bf34      	ite	cc
    e6e8:	fa21 f10c 	lsrcc.w	r1, r1, ip
    e6ec:	2100      	movcs	r1, #0
    e6ee:	fa05 f000 	lsl.w	r0, r5, r0
    e6f2:	4301      	orrs	r1, r0
    e6f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e6f8:	460a      	mov	r2, r1
    e6fa:	ec43 2b10 	vmov	d0, r2, r3
    e6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e700:	f1c0 0c20 	rsb	ip, r0, #32
    e704:	4085      	lsls	r5, r0
    e706:	fa21 f30c 	lsr.w	r3, r1, ip
    e70a:	ea45 0703 	orr.w	r7, r5, r3
    e70e:	f1a4 0508 	sub.w	r5, r4, #8
    e712:	42ae      	cmp	r6, r5
    e714:	fa01 f100 	lsl.w	r1, r1, r0
    e718:	bf3c      	itt	cc
    e71a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    e71e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    e722:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    e726:	bf38      	it	cc
    e728:	4301      	orrcc	r1, r0
    e72a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e72e:	460a      	mov	r2, r1
    e730:	ec43 2b10 	vmov	d0, r2, r3
    e734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e736:	bf00      	nop

0000e738 <__d2b>:
    e738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e73c:	4688      	mov	r8, r1
    e73e:	b083      	sub	sp, #12
    e740:	2101      	movs	r1, #1
    e742:	ec57 6b10 	vmov	r6, r7, d0
    e746:	4615      	mov	r5, r2
    e748:	f7ff fbb8 	bl	debc <_Balloc>
    e74c:	4604      	mov	r4, r0
    e74e:	2800      	cmp	r0, #0
    e750:	d051      	beq.n	e7f6 <__d2b+0xbe>
    e752:	f3c7 590a 	ubfx	r9, r7, #20, #11
    e756:	f3c7 0313 	ubfx	r3, r7, #0, #20
    e75a:	f1b9 0f00 	cmp.w	r9, #0
    e75e:	d001      	beq.n	e764 <__d2b+0x2c>
    e760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e764:	2e00      	cmp	r6, #0
    e766:	9301      	str	r3, [sp, #4]
    e768:	d118      	bne.n	e79c <__d2b+0x64>
    e76a:	a801      	add	r0, sp, #4
    e76c:	f7ff fca0 	bl	e0b0 <__lo0bits>
    e770:	9a01      	ldr	r2, [sp, #4]
    e772:	6162      	str	r2, [r4, #20]
    e774:	2201      	movs	r2, #1
    e776:	f100 0320 	add.w	r3, r0, #32
    e77a:	6122      	str	r2, [r4, #16]
    e77c:	f1b9 0f00 	cmp.w	r9, #0
    e780:	d025      	beq.n	e7ce <__d2b+0x96>
    e782:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    e786:	eb09 0203 	add.w	r2, r9, r3
    e78a:	4620      	mov	r0, r4
    e78c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    e790:	f8c8 2000 	str.w	r2, [r8]
    e794:	602b      	str	r3, [r5, #0]
    e796:	b003      	add	sp, #12
    e798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e79c:	4668      	mov	r0, sp
    e79e:	9600      	str	r6, [sp, #0]
    e7a0:	f7ff fc86 	bl	e0b0 <__lo0bits>
    e7a4:	4603      	mov	r3, r0
    e7a6:	b310      	cbz	r0, e7ee <__d2b+0xb6>
    e7a8:	e9dd 0200 	ldrd	r0, r2, [sp]
    e7ac:	f1c3 0120 	rsb	r1, r3, #32
    e7b0:	fa02 f101 	lsl.w	r1, r2, r1
    e7b4:	4301      	orrs	r1, r0
    e7b6:	40da      	lsrs	r2, r3
    e7b8:	6161      	str	r1, [r4, #20]
    e7ba:	9201      	str	r2, [sp, #4]
    e7bc:	2a00      	cmp	r2, #0
    e7be:	61a2      	str	r2, [r4, #24]
    e7c0:	bf14      	ite	ne
    e7c2:	2202      	movne	r2, #2
    e7c4:	2201      	moveq	r2, #1
    e7c6:	6122      	str	r2, [r4, #16]
    e7c8:	f1b9 0f00 	cmp.w	r9, #0
    e7cc:	d1d9      	bne.n	e782 <__d2b+0x4a>
    e7ce:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    e7d2:	f8c8 3000 	str.w	r3, [r8]
    e7d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    e7da:	6918      	ldr	r0, [r3, #16]
    e7dc:	f7ff fc48 	bl	e070 <__hi0bits>
    e7e0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    e7e4:	4620      	mov	r0, r4
    e7e6:	602b      	str	r3, [r5, #0]
    e7e8:	b003      	add	sp, #12
    e7ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e7ee:	9a00      	ldr	r2, [sp, #0]
    e7f0:	6162      	str	r2, [r4, #20]
    e7f2:	9a01      	ldr	r2, [sp, #4]
    e7f4:	e7e2      	b.n	e7bc <__d2b+0x84>
    e7f6:	4b03      	ldr	r3, [pc, #12]	; (e804 <__d2b+0xcc>)
    e7f8:	4803      	ldr	r0, [pc, #12]	; (e808 <__d2b+0xd0>)
    e7fa:	4622      	mov	r2, r4
    e7fc:	f240 310f 	movw	r1, #783	; 0x30f
    e800:	f003 fc4e 	bl	120a0 <__assert_func>
    e804:	20000b7c 	.word	0x20000b7c
    e808:	20000cf4 	.word	0x20000cf4

0000e80c <__ratio>:
    e80c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e80e:	b083      	sub	sp, #12
    e810:	460e      	mov	r6, r1
    e812:	4669      	mov	r1, sp
    e814:	4607      	mov	r7, r0
    e816:	f7ff ff2d 	bl	e674 <__b2d>
    e81a:	a901      	add	r1, sp, #4
    e81c:	4630      	mov	r0, r6
    e81e:	ec55 4b10 	vmov	r4, r5, d0
    e822:	eeb0 7b40 	vmov.f64	d7, d0
    e826:	f7ff ff25 	bl	e674 <__b2d>
    e82a:	6933      	ldr	r3, [r6, #16]
    e82c:	693a      	ldr	r2, [r7, #16]
    e82e:	1ad2      	subs	r2, r2, r3
    e830:	e9dd 3100 	ldrd	r3, r1, [sp]
    e834:	1a5b      	subs	r3, r3, r1
    e836:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    e83a:	2b00      	cmp	r3, #0
    e83c:	dd09      	ble.n	e852 <__ratio+0x46>
    e83e:	ee17 2a90 	vmov	r2, s15
    e842:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    e846:	ec45 4b17 	vmov	d7, r4, r5
    e84a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    e84e:	b003      	add	sp, #12
    e850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e852:	ee10 2a90 	vmov	r2, s1
    e856:	ec51 0b10 	vmov	r0, r1, d0
    e85a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    e85e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    e862:	ec41 0b10 	vmov	d0, r0, r1
    e866:	ee87 0b00 	vdiv.f64	d0, d7, d0
    e86a:	b003      	add	sp, #12
    e86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e86e:	bf00      	nop

0000e870 <__copybits>:
    e870:	3901      	subs	r1, #1
    e872:	1149      	asrs	r1, r1, #5
    e874:	f101 0c01 	add.w	ip, r1, #1
    e878:	6911      	ldr	r1, [r2, #16]
    e87a:	f102 0314 	add.w	r3, r2, #20
    e87e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    e882:	428b      	cmp	r3, r1
    e884:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    e888:	d217      	bcs.n	e8ba <__copybits+0x4a>
    e88a:	b510      	push	{r4, lr}
    e88c:	f1a0 0e04 	sub.w	lr, r0, #4
    e890:	f853 4b04 	ldr.w	r4, [r3], #4
    e894:	f84e 4f04 	str.w	r4, [lr, #4]!
    e898:	4299      	cmp	r1, r3
    e89a:	d8f9      	bhi.n	e890 <__copybits+0x20>
    e89c:	1a8a      	subs	r2, r1, r2
    e89e:	f1a2 0315 	sub.w	r3, r2, #21
    e8a2:	f023 0303 	bic.w	r3, r3, #3
    e8a6:	3304      	adds	r3, #4
    e8a8:	4418      	add	r0, r3
    e8aa:	4584      	cmp	ip, r0
    e8ac:	d904      	bls.n	e8b8 <__copybits+0x48>
    e8ae:	2300      	movs	r3, #0
    e8b0:	f840 3b04 	str.w	r3, [r0], #4
    e8b4:	4584      	cmp	ip, r0
    e8b6:	d8fb      	bhi.n	e8b0 <__copybits+0x40>
    e8b8:	bd10      	pop	{r4, pc}
    e8ba:	4584      	cmp	ip, r0
    e8bc:	d905      	bls.n	e8ca <__copybits+0x5a>
    e8be:	2300      	movs	r3, #0
    e8c0:	f840 3b04 	str.w	r3, [r0], #4
    e8c4:	4584      	cmp	ip, r0
    e8c6:	d8fb      	bhi.n	e8c0 <__copybits+0x50>
    e8c8:	4770      	bx	lr
    e8ca:	4770      	bx	lr

0000e8cc <__any_on>:
    e8cc:	6903      	ldr	r3, [r0, #16]
    e8ce:	114a      	asrs	r2, r1, #5
    e8d0:	4293      	cmp	r3, r2
    e8d2:	f100 0014 	add.w	r0, r0, #20
    e8d6:	da09      	bge.n	e8ec <__any_on+0x20>
    e8d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    e8dc:	e002      	b.n	e8e4 <__any_on+0x18>
    e8de:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    e8e2:	b9c2      	cbnz	r2, e916 <__any_on+0x4a>
    e8e4:	4283      	cmp	r3, r0
    e8e6:	d8fa      	bhi.n	e8de <__any_on+0x12>
    e8e8:	2000      	movs	r0, #0
    e8ea:	4770      	bx	lr
    e8ec:	dd10      	ble.n	e910 <__any_on+0x44>
    e8ee:	f011 011f 	ands.w	r1, r1, #31
    e8f2:	d00d      	beq.n	e910 <__any_on+0x44>
    e8f4:	b410      	push	{r4}
    e8f6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    e8fa:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e8fe:	fa24 f201 	lsr.w	r2, r4, r1
    e902:	408a      	lsls	r2, r1
    e904:	4294      	cmp	r4, r2
    e906:	d00c      	beq.n	e922 <__any_on+0x56>
    e908:	2001      	movs	r0, #1
    e90a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e90e:	4770      	bx	lr
    e910:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e914:	e7e6      	b.n	e8e4 <__any_on+0x18>
    e916:	2001      	movs	r0, #1
    e918:	4770      	bx	lr
    e91a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    e91e:	2a00      	cmp	r2, #0
    e920:	d1f2      	bne.n	e908 <__any_on+0x3c>
    e922:	4283      	cmp	r3, r0
    e924:	d8f9      	bhi.n	e91a <__any_on+0x4e>
    e926:	2000      	movs	r0, #0
    e928:	f85d 4b04 	ldr.w	r4, [sp], #4
    e92c:	4770      	bx	lr
    e92e:	bf00      	nop

0000e930 <__ascii_wctomb>:
    e930:	b149      	cbz	r1, e946 <__ascii_wctomb+0x16>
    e932:	2aff      	cmp	r2, #255	; 0xff
    e934:	d802      	bhi.n	e93c <__ascii_wctomb+0xc>
    e936:	700a      	strb	r2, [r1, #0]
    e938:	2001      	movs	r0, #1
    e93a:	4770      	bx	lr
    e93c:	238a      	movs	r3, #138	; 0x8a
    e93e:	6003      	str	r3, [r0, #0]
    e940:	f04f 30ff 	mov.w	r0, #4294967295
    e944:	4770      	bx	lr
    e946:	4608      	mov	r0, r1
    e948:	4770      	bx	lr
    e94a:	bf00      	nop
    e94c:	0000      	movs	r0, r0
	...

0000e950 <_svfprintf_r>:
    e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e954:	ed2d 8b08 	vpush	{d8-d11}
    e958:	b0d1      	sub	sp, #324	; 0x144
    e95a:	460c      	mov	r4, r1
    e95c:	ee0b 1a10 	vmov	s22, r1
    e960:	4690      	mov	r8, r2
    e962:	9308      	str	r3, [sp, #32]
    e964:	4683      	mov	fp, r0
    e966:	f003 fb59 	bl	1201c <_localeconv_r>
    e96a:	6803      	ldr	r3, [r0, #0]
    e96c:	9312      	str	r3, [sp, #72]	; 0x48
    e96e:	4618      	mov	r0, r3
    e970:	f7fe fc66 	bl	d240 <strlen>
    e974:	af20      	add	r7, sp, #128	; 0x80
    e976:	9010      	str	r0, [sp, #64]	; 0x40
    e978:	2208      	movs	r2, #8
    e97a:	2100      	movs	r1, #0
    e97c:	4638      	mov	r0, r7
    e97e:	f7fe f91d 	bl	cbbc <memset>
    e982:	89a3      	ldrh	r3, [r4, #12]
    e984:	061b      	lsls	r3, r3, #24
    e986:	d503      	bpl.n	e990 <_svfprintf_r+0x40>
    e988:	6923      	ldr	r3, [r4, #16]
    e98a:	2b00      	cmp	r3, #0
    e98c:	f000 8755 	beq.w	f83a <_svfprintf_r+0xeea>
    e990:	2300      	movs	r3, #0
    e992:	ed9f 8b83 	vldr	d8, [pc, #524]	; eba0 <_svfprintf_r+0x250>
    e996:	ed9f 9b84 	vldr	d9, [pc, #528]	; eba8 <_svfprintf_r+0x258>
    e99a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    e99e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    e9a2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    e9a6:	aa27      	add	r2, sp, #156	; 0x9c
    e9a8:	930e      	str	r3, [sp, #56]	; 0x38
    e9aa:	9224      	str	r2, [sp, #144]	; 0x90
    e9ac:	4692      	mov	sl, r2
    e9ae:	9311      	str	r3, [sp, #68]	; 0x44
    e9b0:	9304      	str	r3, [sp, #16]
    e9b2:	4644      	mov	r4, r8
    e9b4:	46a1      	mov	r9, r4
    e9b6:	4b7e      	ldr	r3, [pc, #504]	; (ebb0 <_svfprintf_r+0x260>)
    e9b8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    e9bc:	f7fe f9c8 	bl	cd50 <__locale_mb_cur_max>
    e9c0:	464a      	mov	r2, r9
    e9c2:	4603      	mov	r3, r0
    e9c4:	a91c      	add	r1, sp, #112	; 0x70
    e9c6:	9700      	str	r7, [sp, #0]
    e9c8:	4658      	mov	r0, fp
    e9ca:	47a8      	blx	r5
    e9cc:	2800      	cmp	r0, #0
    e9ce:	f000 80b0 	beq.w	eb32 <_svfprintf_r+0x1e2>
    e9d2:	f2c0 80a6 	blt.w	eb22 <_svfprintf_r+0x1d2>
    e9d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    e9d8:	2a25      	cmp	r2, #37	; 0x25
    e9da:	4603      	mov	r3, r0
    e9dc:	d001      	beq.n	e9e2 <_svfprintf_r+0x92>
    e9de:	4499      	add	r9, r3
    e9e0:	e7e9      	b.n	e9b6 <_svfprintf_r+0x66>
    e9e2:	ebb9 0504 	subs.w	r5, r9, r4
    e9e6:	4606      	mov	r6, r0
    e9e8:	f040 80a7 	bne.w	eb3a <_svfprintf_r+0x1ea>
    e9ec:	2300      	movs	r3, #0
    e9ee:	f04f 32ff 	mov.w	r2, #4294967295
    e9f2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    e9f6:	4698      	mov	r8, r3
    e9f8:	9306      	str	r3, [sp, #24]
    e9fa:	f109 0901 	add.w	r9, r9, #1
    e9fe:	f899 3000 	ldrb.w	r3, [r9]
    ea02:	9203      	str	r2, [sp, #12]
    ea04:	252b      	movs	r5, #43	; 0x2b
    ea06:	2620      	movs	r6, #32
    ea08:	f109 0901 	add.w	r9, r9, #1
    ea0c:	f1a3 0220 	sub.w	r2, r3, #32
    ea10:	2a5a      	cmp	r2, #90	; 0x5a
    ea12:	f200 80cf 	bhi.w	ebb4 <_svfprintf_r+0x264>
    ea16:	e8df f012 	tbh	[pc, r2, lsl #1]
    ea1a:	02e8      	.short	0x02e8
    ea1c:	00cd00cd 	.word	0x00cd00cd
    ea20:	00cd02e3 	.word	0x00cd02e3
    ea24:	00cd00cd 	.word	0x00cd00cd
    ea28:	00cd006a 	.word	0x00cd006a
    ea2c:	020500cd 	.word	0x020500cd
    ea30:	00cd0284 	.word	0x00cd0284
    ea34:	02c90210 	.word	0x02c90210
    ea38:	02bd00cd 	.word	0x02bd00cd
    ea3c:	005b005b 	.word	0x005b005b
    ea40:	005b005b 	.word	0x005b005b
    ea44:	005b005b 	.word	0x005b005b
    ea48:	005b005b 	.word	0x005b005b
    ea4c:	00cd005b 	.word	0x00cd005b
    ea50:	00cd00cd 	.word	0x00cd00cd
    ea54:	00cd00cd 	.word	0x00cd00cd
    ea58:	00cd00cd 	.word	0x00cd00cd
    ea5c:	00cd0153 	.word	0x00cd0153
    ea60:	021a0183 	.word	0x021a0183
    ea64:	01530153 	.word	0x01530153
    ea68:	00cd0153 	.word	0x00cd0153
    ea6c:	00cd00cd 	.word	0x00cd00cd
    ea70:	021500cd 	.word	0x021500cd
    ea74:	00cd00cd 	.word	0x00cd00cd
    ea78:	00cd0296 	.word	0x00cd0296
    ea7c:	00cd00cd 	.word	0x00cd00cd
    ea80:	00cd01ab 	.word	0x00cd01ab
    ea84:	00cd02aa 	.word	0x00cd02aa
    ea88:	06e300cd 	.word	0x06e300cd
    ea8c:	00cd00cd 	.word	0x00cd00cd
    ea90:	00cd00cd 	.word	0x00cd00cd
    ea94:	00cd00cd 	.word	0x00cd00cd
    ea98:	00cd00cd 	.word	0x00cd00cd
    ea9c:	00cd0153 	.word	0x00cd0153
    eaa0:	01de0183 	.word	0x01de0183
    eaa4:	01530153 	.word	0x01530153
    eaa8:	02770153 	.word	0x02770153
    eaac:	007f01de 	.word	0x007f01de
    eab0:	028900cd 	.word	0x028900cd
    eab4:	025f00cd 	.word	0x025f00cd
    eab8:	022f06e0 	.word	0x022f06e0
    eabc:	00cd007f 	.word	0x00cd007f
    eac0:	007c01ab 	.word	0x007c01ab
    eac4:	00cd06b8 	.word	0x00cd06b8
    eac8:	06bd00cd 	.word	0x06bd00cd
    eacc:	007c00cd 	.word	0x007c00cd
    ead0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ead4:	2100      	movs	r1, #0
    ead6:	f819 3b01 	ldrb.w	r3, [r9], #1
    eada:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    eade:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    eae2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    eae6:	2a09      	cmp	r2, #9
    eae8:	d9f5      	bls.n	ead6 <_svfprintf_r+0x186>
    eaea:	9106      	str	r1, [sp, #24]
    eaec:	e78e      	b.n	ea0c <_svfprintf_r+0xbc>
    eaee:	4658      	mov	r0, fp
    eaf0:	f003 fa94 	bl	1201c <_localeconv_r>
    eaf4:	6843      	ldr	r3, [r0, #4]
    eaf6:	9315      	str	r3, [sp, #84]	; 0x54
    eaf8:	4618      	mov	r0, r3
    eafa:	f7fe fba1 	bl	d240 <strlen>
    eafe:	9016      	str	r0, [sp, #88]	; 0x58
    eb00:	4658      	mov	r0, fp
    eb02:	f003 fa8b 	bl	1201c <_localeconv_r>
    eb06:	6883      	ldr	r3, [r0, #8]
    eb08:	9313      	str	r3, [sp, #76]	; 0x4c
    eb0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    eb0c:	2b00      	cmp	r3, #0
    eb0e:	f040 862d 	bne.w	f76c <_svfprintf_r+0xe1c>
    eb12:	f899 3000 	ldrb.w	r3, [r9]
    eb16:	e777      	b.n	ea08 <_svfprintf_r+0xb8>
    eb18:	f899 3000 	ldrb.w	r3, [r9]
    eb1c:	f048 0820 	orr.w	r8, r8, #32
    eb20:	e772      	b.n	ea08 <_svfprintf_r+0xb8>
    eb22:	2208      	movs	r2, #8
    eb24:	2100      	movs	r1, #0
    eb26:	4638      	mov	r0, r7
    eb28:	f7fe f848 	bl	cbbc <memset>
    eb2c:	2301      	movs	r3, #1
    eb2e:	4499      	add	r9, r3
    eb30:	e741      	b.n	e9b6 <_svfprintf_r+0x66>
    eb32:	ebb9 0504 	subs.w	r5, r9, r4
    eb36:	4606      	mov	r6, r0
    eb38:	d011      	beq.n	eb5e <_svfprintf_r+0x20e>
    eb3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    eb3c:	442b      	add	r3, r5
    eb3e:	9326      	str	r3, [sp, #152]	; 0x98
    eb40:	9b25      	ldr	r3, [sp, #148]	; 0x94
    eb42:	3301      	adds	r3, #1
    eb44:	2b07      	cmp	r3, #7
    eb46:	e9ca 4500 	strd	r4, r5, [sl]
    eb4a:	9325      	str	r3, [sp, #148]	; 0x94
    eb4c:	dc1c      	bgt.n	eb88 <_svfprintf_r+0x238>
    eb4e:	f10a 0a08 	add.w	sl, sl, #8
    eb52:	9b04      	ldr	r3, [sp, #16]
    eb54:	442b      	add	r3, r5
    eb56:	9304      	str	r3, [sp, #16]
    eb58:	2e00      	cmp	r6, #0
    eb5a:	f47f af47 	bne.w	e9ec <_svfprintf_r+0x9c>
    eb5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    eb60:	2b00      	cmp	r3, #0
    eb62:	f041 820b 	bne.w	ff7c <_svfprintf_r+0x162c>
    eb66:	ee1b 3a10 	vmov	r3, s22
    eb6a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    eb6e:	f013 0f40 	tst.w	r3, #64	; 0x40
    eb72:	9b04      	ldr	r3, [sp, #16]
    eb74:	bf18      	it	ne
    eb76:	f04f 33ff 	movne.w	r3, #4294967295
    eb7a:	9304      	str	r3, [sp, #16]
    eb7c:	9804      	ldr	r0, [sp, #16]
    eb7e:	b051      	add	sp, #324	; 0x144
    eb80:	ecbd 8b08 	vpop	{d8-d11}
    eb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb88:	ee1b 1a10 	vmov	r1, s22
    eb8c:	aa24      	add	r2, sp, #144	; 0x90
    eb8e:	4658      	mov	r0, fp
    eb90:	f004 fd6a 	bl	13668 <__ssprint_r>
    eb94:	2800      	cmp	r0, #0
    eb96:	d1e6      	bne.n	eb66 <_svfprintf_r+0x216>
    eb98:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eb9c:	e7d9      	b.n	eb52 <_svfprintf_r+0x202>
    eb9e:	bf00      	nop
	...
    eba8:	ffffffff 	.word	0xffffffff
    ebac:	7fefffff 	.word	0x7fefffff
    ebb0:	200088ec 	.word	0x200088ec
    ebb4:	930b      	str	r3, [sp, #44]	; 0x2c
    ebb6:	2b00      	cmp	r3, #0
    ebb8:	d0d1      	beq.n	eb5e <_svfprintf_r+0x20e>
    ebba:	2100      	movs	r1, #0
    ebbc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    ebc0:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    ebc4:	2301      	movs	r3, #1
    ebc6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ebca:	9302      	str	r3, [sp, #8]
    ebcc:	9107      	str	r1, [sp, #28]
    ebce:	9305      	str	r3, [sp, #20]
    ebd0:	9103      	str	r1, [sp, #12]
    ebd2:	910f      	str	r1, [sp, #60]	; 0x3c
    ebd4:	ac37      	add	r4, sp, #220	; 0xdc
    ebd6:	f018 0302 	ands.w	r3, r8, #2
    ebda:	9309      	str	r3, [sp, #36]	; 0x24
    ebdc:	d002      	beq.n	ebe4 <_svfprintf_r+0x294>
    ebde:	9b02      	ldr	r3, [sp, #8]
    ebe0:	3302      	adds	r3, #2
    ebe2:	9302      	str	r3, [sp, #8]
    ebe4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    ebe8:	930a      	str	r3, [sp, #40]	; 0x28
    ebea:	d105      	bne.n	ebf8 <_svfprintf_r+0x2a8>
    ebec:	9b06      	ldr	r3, [sp, #24]
    ebee:	9a02      	ldr	r2, [sp, #8]
    ebf0:	1a9d      	subs	r5, r3, r2
    ebf2:	2d00      	cmp	r5, #0
    ebf4:	f300 8369 	bgt.w	f2ca <_svfprintf_r+0x97a>
    ebf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ebfa:	b189      	cbz	r1, ec20 <_svfprintf_r+0x2d0>
    ebfc:	9925      	ldr	r1, [sp, #148]	; 0x94
    ebfe:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    ec02:	3101      	adds	r1, #1
    ec04:	3201      	adds	r2, #1
    ec06:	f8ca 0000 	str.w	r0, [sl]
    ec0a:	2907      	cmp	r1, #7
    ec0c:	f04f 0001 	mov.w	r0, #1
    ec10:	9226      	str	r2, [sp, #152]	; 0x98
    ec12:	9125      	str	r1, [sp, #148]	; 0x94
    ec14:	f8ca 0004 	str.w	r0, [sl, #4]
    ec18:	f300 83a2 	bgt.w	f360 <_svfprintf_r+0xa10>
    ec1c:	f10a 0a08 	add.w	sl, sl, #8
    ec20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ec22:	b183      	cbz	r3, ec46 <_svfprintf_r+0x2f6>
    ec24:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ec26:	a91a      	add	r1, sp, #104	; 0x68
    ec28:	3301      	adds	r3, #1
    ec2a:	3202      	adds	r2, #2
    ec2c:	f8ca 1000 	str.w	r1, [sl]
    ec30:	2b07      	cmp	r3, #7
    ec32:	f04f 0102 	mov.w	r1, #2
    ec36:	9226      	str	r2, [sp, #152]	; 0x98
    ec38:	9325      	str	r3, [sp, #148]	; 0x94
    ec3a:	f8ca 1004 	str.w	r1, [sl, #4]
    ec3e:	f300 83a3 	bgt.w	f388 <_svfprintf_r+0xa38>
    ec42:	f10a 0a08 	add.w	sl, sl, #8
    ec46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ec48:	2b80      	cmp	r3, #128	; 0x80
    ec4a:	f000 826c 	beq.w	f126 <_svfprintf_r+0x7d6>
    ec4e:	9b03      	ldr	r3, [sp, #12]
    ec50:	9905      	ldr	r1, [sp, #20]
    ec52:	1a5d      	subs	r5, r3, r1
    ec54:	2d00      	cmp	r5, #0
    ec56:	f300 82a5 	bgt.w	f1a4 <_svfprintf_r+0x854>
    ec5a:	f418 7f80 	tst.w	r8, #256	; 0x100
    ec5e:	f040 820d 	bne.w	f07c <_svfprintf_r+0x72c>
    ec62:	9b05      	ldr	r3, [sp, #20]
    ec64:	f8ca 3004 	str.w	r3, [sl, #4]
    ec68:	441a      	add	r2, r3
    ec6a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ec6c:	f8ca 4000 	str.w	r4, [sl]
    ec70:	3301      	adds	r3, #1
    ec72:	2b07      	cmp	r3, #7
    ec74:	9226      	str	r2, [sp, #152]	; 0x98
    ec76:	9325      	str	r3, [sp, #148]	; 0x94
    ec78:	f300 831b 	bgt.w	f2b2 <_svfprintf_r+0x962>
    ec7c:	f10a 0a08 	add.w	sl, sl, #8
    ec80:	f018 0f04 	tst.w	r8, #4
    ec84:	d005      	beq.n	ec92 <_svfprintf_r+0x342>
    ec86:	9b06      	ldr	r3, [sp, #24]
    ec88:	9902      	ldr	r1, [sp, #8]
    ec8a:	1a5c      	subs	r4, r3, r1
    ec8c:	2c00      	cmp	r4, #0
    ec8e:	f300 8388 	bgt.w	f3a2 <_svfprintf_r+0xa52>
    ec92:	9b04      	ldr	r3, [sp, #16]
    ec94:	9906      	ldr	r1, [sp, #24]
    ec96:	9802      	ldr	r0, [sp, #8]
    ec98:	4281      	cmp	r1, r0
    ec9a:	bfac      	ite	ge
    ec9c:	185b      	addge	r3, r3, r1
    ec9e:	181b      	addlt	r3, r3, r0
    eca0:	9304      	str	r3, [sp, #16]
    eca2:	2a00      	cmp	r2, #0
    eca4:	f040 82b0 	bne.w	f208 <_svfprintf_r+0x8b8>
    eca8:	2300      	movs	r3, #0
    ecaa:	9325      	str	r3, [sp, #148]	; 0x94
    ecac:	9b07      	ldr	r3, [sp, #28]
    ecae:	b11b      	cbz	r3, ecb8 <_svfprintf_r+0x368>
    ecb0:	9907      	ldr	r1, [sp, #28]
    ecb2:	4658      	mov	r0, fp
    ecb4:	f7fe fbd6 	bl	d464 <_free_r>
    ecb8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ecbc:	464c      	mov	r4, r9
    ecbe:	e679      	b.n	e9b4 <_svfprintf_r+0x64>
    ecc0:	930b      	str	r3, [sp, #44]	; 0x2c
    ecc2:	9b08      	ldr	r3, [sp, #32]
    ecc4:	3307      	adds	r3, #7
    ecc6:	f023 0307 	bic.w	r3, r3, #7
    ecca:	ecb3 8b02 	vldmia	r3!, {d8}
    ecce:	eeb0 7bc8 	vabs.f64	d7, d8
    ecd2:	eeb4 7b49 	vcmp.f64	d7, d9
    ecd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ecda:	9308      	str	r3, [sp, #32]
    ecdc:	f340 84e9 	ble.w	f6b2 <_svfprintf_r+0xd62>
    ece0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    ece4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ece8:	f101 8059 	bmi.w	fd9e <_svfprintf_r+0x144e>
    ecec:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ecf0:	4cab      	ldr	r4, [pc, #684]	; (efa0 <_svfprintf_r+0x650>)
    ecf2:	4bac      	ldr	r3, [pc, #688]	; (efa4 <_svfprintf_r+0x654>)
    ecf4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    ecf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ecfa:	2a47      	cmp	r2, #71	; 0x47
    ecfc:	bfc8      	it	gt
    ecfe:	461c      	movgt	r4, r3
    ed00:	2300      	movs	r3, #0
    ed02:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ed06:	2203      	movs	r2, #3
    ed08:	9307      	str	r3, [sp, #28]
    ed0a:	9202      	str	r2, [sp, #8]
    ed0c:	9205      	str	r2, [sp, #20]
    ed0e:	9303      	str	r3, [sp, #12]
    ed10:	930f      	str	r3, [sp, #60]	; 0x3c
    ed12:	2900      	cmp	r1, #0
    ed14:	f43f af5f 	beq.w	ebd6 <_svfprintf_r+0x286>
    ed18:	9b02      	ldr	r3, [sp, #8]
    ed1a:	3301      	adds	r3, #1
    ed1c:	9302      	str	r3, [sp, #8]
    ed1e:	e75a      	b.n	ebd6 <_svfprintf_r+0x286>
    ed20:	2b43      	cmp	r3, #67	; 0x43
    ed22:	930b      	str	r3, [sp, #44]	; 0x2c
    ed24:	d003      	beq.n	ed2e <_svfprintf_r+0x3de>
    ed26:	f018 0f10 	tst.w	r8, #16
    ed2a:	f000 855d 	beq.w	f7e8 <_svfprintf_r+0xe98>
    ed2e:	9d08      	ldr	r5, [sp, #32]
    ed30:	2208      	movs	r2, #8
    ed32:	2100      	movs	r1, #0
    ed34:	a822      	add	r0, sp, #136	; 0x88
    ed36:	ac37      	add	r4, sp, #220	; 0xdc
    ed38:	f7fd ff40 	bl	cbbc <memset>
    ed3c:	ab22      	add	r3, sp, #136	; 0x88
    ed3e:	f855 2b04 	ldr.w	r2, [r5], #4
    ed42:	4621      	mov	r1, r4
    ed44:	4658      	mov	r0, fp
    ed46:	f004 fb65 	bl	13414 <_wcrtomb_r>
    ed4a:	4603      	mov	r3, r0
    ed4c:	3301      	adds	r3, #1
    ed4e:	9005      	str	r0, [sp, #20]
    ed50:	f001 82ee 	beq.w	10330 <_svfprintf_r+0x19e0>
    ed54:	9b05      	ldr	r3, [sp, #20]
    ed56:	9508      	str	r5, [sp, #32]
    ed58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ed5c:	9302      	str	r3, [sp, #8]
    ed5e:	2100      	movs	r1, #0
    ed60:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    ed64:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ed68:	9107      	str	r1, [sp, #28]
    ed6a:	9103      	str	r1, [sp, #12]
    ed6c:	910f      	str	r1, [sp, #60]	; 0x3c
    ed6e:	e732      	b.n	ebd6 <_svfprintf_r+0x286>
    ed70:	930b      	str	r3, [sp, #44]	; 0x2c
    ed72:	9b08      	ldr	r3, [sp, #32]
    ed74:	461a      	mov	r2, r3
    ed76:	2300      	movs	r3, #0
    ed78:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    ed7c:	4613      	mov	r3, r2
    ed7e:	f853 4b04 	ldr.w	r4, [r3], #4
    ed82:	9308      	str	r3, [sp, #32]
    ed84:	2c00      	cmp	r4, #0
    ed86:	f000 8548 	beq.w	f81a <_svfprintf_r+0xeca>
    ed8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ed8c:	2b53      	cmp	r3, #83	; 0x53
    ed8e:	f000 86ec 	beq.w	fb6a <_svfprintf_r+0x121a>
    ed92:	f018 0310 	ands.w	r3, r8, #16
    ed96:	930c      	str	r3, [sp, #48]	; 0x30
    ed98:	f040 86e7 	bne.w	fb6a <_svfprintf_r+0x121a>
    ed9c:	9b03      	ldr	r3, [sp, #12]
    ed9e:	1c5d      	adds	r5, r3, #1
    eda0:	f001 80e5 	beq.w	ff6e <_svfprintf_r+0x161e>
    eda4:	990c      	ldr	r1, [sp, #48]	; 0x30
    eda6:	461a      	mov	r2, r3
    eda8:	4620      	mov	r0, r4
    edaa:	f7fe f9e9 	bl	d180 <memchr>
    edae:	9007      	str	r0, [sp, #28]
    edb0:	2800      	cmp	r0, #0
    edb2:	f001 8328 	beq.w	10406 <_svfprintf_r+0x1ab6>
    edb6:	9b07      	ldr	r3, [sp, #28]
    edb8:	1b1a      	subs	r2, r3, r4
    edba:	9205      	str	r2, [sp, #20]
    edbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    edbe:	9303      	str	r3, [sp, #12]
    edc0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    edc4:	930f      	str	r3, [sp, #60]	; 0x3c
    edc6:	930d      	str	r3, [sp, #52]	; 0x34
    edc8:	9307      	str	r3, [sp, #28]
    edca:	2373      	movs	r3, #115	; 0x73
    edcc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    edd0:	9202      	str	r2, [sp, #8]
    edd2:	930b      	str	r3, [sp, #44]	; 0x2c
    edd4:	e79d      	b.n	ed12 <_svfprintf_r+0x3c2>
    edd6:	f018 0f20 	tst.w	r8, #32
    edda:	930b      	str	r3, [sp, #44]	; 0x2c
    eddc:	9b08      	ldr	r3, [sp, #32]
    edde:	d03d      	beq.n	ee5c <_svfprintf_r+0x50c>
    ede0:	3307      	adds	r3, #7
    ede2:	f023 0307 	bic.w	r3, r3, #7
    ede6:	461a      	mov	r2, r3
    ede8:	4611      	mov	r1, r2
    edea:	685b      	ldr	r3, [r3, #4]
    edec:	f851 2b08 	ldr.w	r2, [r1], #8
    edf0:	9108      	str	r1, [sp, #32]
    edf2:	4619      	mov	r1, r3
    edf4:	2b00      	cmp	r3, #0
    edf6:	f2c0 840c 	blt.w	f612 <_svfprintf_r+0xcc2>
    edfa:	9b03      	ldr	r3, [sp, #12]
    edfc:	3301      	adds	r3, #1
    edfe:	f000 829e 	beq.w	f33e <_svfprintf_r+0x9ee>
    ee02:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    ee06:	ea52 0301 	orrs.w	r3, r2, r1
    ee0a:	9002      	str	r0, [sp, #8]
    ee0c:	f040 8299 	bne.w	f342 <_svfprintf_r+0x9f2>
    ee10:	9b03      	ldr	r3, [sp, #12]
    ee12:	2b00      	cmp	r3, #0
    ee14:	f040 829a 	bne.w	f34c <_svfprintf_r+0x9fc>
    ee18:	4680      	mov	r8, r0
    ee1a:	2300      	movs	r3, #0
    ee1c:	9303      	str	r3, [sp, #12]
    ee1e:	9305      	str	r3, [sp, #20]
    ee20:	ac50      	add	r4, sp, #320	; 0x140
    ee22:	e106      	b.n	f032 <_svfprintf_r+0x6e2>
    ee24:	9b08      	ldr	r3, [sp, #32]
    ee26:	f853 2b04 	ldr.w	r2, [r3], #4
    ee2a:	9206      	str	r2, [sp, #24]
    ee2c:	2a00      	cmp	r2, #0
    ee2e:	f280 8419 	bge.w	f664 <_svfprintf_r+0xd14>
    ee32:	9a06      	ldr	r2, [sp, #24]
    ee34:	9308      	str	r3, [sp, #32]
    ee36:	4252      	negs	r2, r2
    ee38:	9206      	str	r2, [sp, #24]
    ee3a:	f899 3000 	ldrb.w	r3, [r9]
    ee3e:	f048 0804 	orr.w	r8, r8, #4
    ee42:	e5e1      	b.n	ea08 <_svfprintf_r+0xb8>
    ee44:	f899 3000 	ldrb.w	r3, [r9]
    ee48:	f048 0808 	orr.w	r8, r8, #8
    ee4c:	e5dc      	b.n	ea08 <_svfprintf_r+0xb8>
    ee4e:	f048 0810 	orr.w	r8, r8, #16
    ee52:	f018 0f20 	tst.w	r8, #32
    ee56:	930b      	str	r3, [sp, #44]	; 0x2c
    ee58:	9b08      	ldr	r3, [sp, #32]
    ee5a:	d1c1      	bne.n	ede0 <_svfprintf_r+0x490>
    ee5c:	f018 0f10 	tst.w	r8, #16
    ee60:	f040 840b 	bne.w	f67a <_svfprintf_r+0xd2a>
    ee64:	f018 0f40 	tst.w	r8, #64	; 0x40
    ee68:	f000 8403 	beq.w	f672 <_svfprintf_r+0xd22>
    ee6c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    ee70:	9308      	str	r3, [sp, #32]
    ee72:	17d1      	asrs	r1, r2, #31
    ee74:	460b      	mov	r3, r1
    ee76:	e7bd      	b.n	edf4 <_svfprintf_r+0x4a4>
    ee78:	9b08      	ldr	r3, [sp, #32]
    ee7a:	f048 0202 	orr.w	r2, r8, #2
    ee7e:	9202      	str	r2, [sp, #8]
    ee80:	f853 2b04 	ldr.w	r2, [r3], #4
    ee84:	9308      	str	r3, [sp, #32]
    ee86:	f647 0330 	movw	r3, #30768	; 0x7830
    ee8a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    ee8e:	2078      	movs	r0, #120	; 0x78
    ee90:	4b45      	ldr	r3, [pc, #276]	; (efa8 <_svfprintf_r+0x658>)
    ee92:	9311      	str	r3, [sp, #68]	; 0x44
    ee94:	2100      	movs	r1, #0
    ee96:	2302      	movs	r3, #2
    ee98:	900b      	str	r0, [sp, #44]	; 0x2c
    ee9a:	2000      	movs	r0, #0
    ee9c:	9c03      	ldr	r4, [sp, #12]
    ee9e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    eea2:	1c60      	adds	r0, r4, #1
    eea4:	f000 80ad 	beq.w	f002 <_svfprintf_r+0x6b2>
    eea8:	9802      	ldr	r0, [sp, #8]
    eeaa:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    eeae:	ea52 0001 	orrs.w	r0, r2, r1
    eeb2:	f040 80a4 	bne.w	effe <_svfprintf_r+0x6ae>
    eeb6:	2c00      	cmp	r4, #0
    eeb8:	f040 86ae 	bne.w	fc18 <_svfprintf_r+0x12c8>
    eebc:	2b00      	cmp	r3, #0
    eebe:	d1ac      	bne.n	ee1a <_svfprintf_r+0x4ca>
    eec0:	9b02      	ldr	r3, [sp, #8]
    eec2:	f013 0301 	ands.w	r3, r3, #1
    eec6:	9305      	str	r3, [sp, #20]
    eec8:	f000 83d1 	beq.w	f66e <_svfprintf_r+0xd1e>
    eecc:	2330      	movs	r3, #48	; 0x30
    eece:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    eed2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    eed6:	e0ac      	b.n	f032 <_svfprintf_r+0x6e2>
    eed8:	f018 0f20 	tst.w	r8, #32
    eedc:	f040 83d4 	bne.w	f688 <_svfprintf_r+0xd38>
    eee0:	f018 0f10 	tst.w	r8, #16
    eee4:	f040 869f 	bne.w	fc26 <_svfprintf_r+0x12d6>
    eee8:	f018 0f40 	tst.w	r8, #64	; 0x40
    eeec:	f040 8797 	bne.w	fe1e <_svfprintf_r+0x14ce>
    eef0:	f418 7f00 	tst.w	r8, #512	; 0x200
    eef4:	f000 8697 	beq.w	fc26 <_svfprintf_r+0x12d6>
    eef8:	9b08      	ldr	r3, [sp, #32]
    eefa:	9904      	ldr	r1, [sp, #16]
    eefc:	f853 2b04 	ldr.w	r2, [r3], #4
    ef00:	9308      	str	r3, [sp, #32]
    ef02:	7011      	strb	r1, [r2, #0]
    ef04:	464c      	mov	r4, r9
    ef06:	e555      	b.n	e9b4 <_svfprintf_r+0x64>
    ef08:	f899 3000 	ldrb.w	r3, [r9]
    ef0c:	2b68      	cmp	r3, #104	; 0x68
    ef0e:	bf03      	ittte	eq
    ef10:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    ef14:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    ef18:	f109 0901 	addeq.w	r9, r9, #1
    ef1c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    ef20:	e572      	b.n	ea08 <_svfprintf_r+0xb8>
    ef22:	f899 3000 	ldrb.w	r3, [r9]
    ef26:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    ef2a:	e56d      	b.n	ea08 <_svfprintf_r+0xb8>
    ef2c:	f899 3000 	ldrb.w	r3, [r9]
    ef30:	2b6c      	cmp	r3, #108	; 0x6c
    ef32:	bf03      	ittte	eq
    ef34:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    ef38:	f048 0820 	orreq.w	r8, r8, #32
    ef3c:	f109 0901 	addeq.w	r9, r9, #1
    ef40:	f048 0810 	orrne.w	r8, r8, #16
    ef44:	e560      	b.n	ea08 <_svfprintf_r+0xb8>
    ef46:	930b      	str	r3, [sp, #44]	; 0x2c
    ef48:	f048 0810 	orr.w	r8, r8, #16
    ef4c:	f018 0120 	ands.w	r1, r8, #32
    ef50:	f000 8351 	beq.w	f5f6 <_svfprintf_r+0xca6>
    ef54:	9b08      	ldr	r3, [sp, #32]
    ef56:	3307      	adds	r3, #7
    ef58:	f023 0307 	bic.w	r3, r3, #7
    ef5c:	6859      	ldr	r1, [r3, #4]
    ef5e:	f853 2b08 	ldr.w	r2, [r3], #8
    ef62:	9308      	str	r3, [sp, #32]
    ef64:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    ef68:	9302      	str	r3, [sp, #8]
    ef6a:	2300      	movs	r3, #0
    ef6c:	e795      	b.n	ee9a <_svfprintf_r+0x54a>
    ef6e:	930b      	str	r3, [sp, #44]	; 0x2c
    ef70:	f048 0310 	orr.w	r3, r8, #16
    ef74:	9302      	str	r3, [sp, #8]
    ef76:	9b02      	ldr	r3, [sp, #8]
    ef78:	f013 0120 	ands.w	r1, r3, #32
    ef7c:	f000 8329 	beq.w	f5d2 <_svfprintf_r+0xc82>
    ef80:	9b08      	ldr	r3, [sp, #32]
    ef82:	3307      	adds	r3, #7
    ef84:	f023 0307 	bic.w	r3, r3, #7
    ef88:	6859      	ldr	r1, [r3, #4]
    ef8a:	f853 2b08 	ldr.w	r2, [r3], #8
    ef8e:	9308      	str	r3, [sp, #32]
    ef90:	2301      	movs	r3, #1
    ef92:	e782      	b.n	ee9a <_svfprintf_r+0x54a>
    ef94:	f899 3000 	ldrb.w	r3, [r9]
    ef98:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    ef9c:	e534      	b.n	ea08 <_svfprintf_r+0xb8>
    ef9e:	bf00      	nop
    efa0:	20000eec 	.word	0x20000eec
    efa4:	20000824 	.word	0x20000824
    efa8:	20000ef4 	.word	0x20000ef4
    efac:	4649      	mov	r1, r9
    efae:	f811 3b01 	ldrb.w	r3, [r1], #1
    efb2:	2b2a      	cmp	r3, #42	; 0x2a
    efb4:	f001 8249 	beq.w	1044a <_svfprintf_r+0x1afa>
    efb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    efbc:	2a09      	cmp	r2, #9
    efbe:	4689      	mov	r9, r1
    efc0:	bf98      	it	ls
    efc2:	2100      	movls	r1, #0
    efc4:	f201 8144 	bhi.w	10250 <_svfprintf_r+0x1900>
    efc8:	f819 3b01 	ldrb.w	r3, [r9], #1
    efcc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    efd0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    efd4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    efd8:	2a09      	cmp	r2, #9
    efda:	d9f5      	bls.n	efc8 <_svfprintf_r+0x678>
    efdc:	9103      	str	r1, [sp, #12]
    efde:	e515      	b.n	ea0c <_svfprintf_r+0xbc>
    efe0:	f899 3000 	ldrb.w	r3, [r9]
    efe4:	f048 0801 	orr.w	r8, r8, #1
    efe8:	e50e      	b.n	ea08 <_svfprintf_r+0xb8>
    efea:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    efee:	2b00      	cmp	r3, #0
    eff0:	f47f ad8f 	bne.w	eb12 <_svfprintf_r+0x1c2>
    eff4:	f899 3000 	ldrb.w	r3, [r9]
    eff8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    effc:	e504      	b.n	ea08 <_svfprintf_r+0xb8>
    effe:	f8cd 8008 	str.w	r8, [sp, #8]
    f002:	2b01      	cmp	r3, #1
    f004:	f000 819d 	beq.w	f342 <_svfprintf_r+0x9f2>
    f008:	2b02      	cmp	r3, #2
    f00a:	ac50      	add	r4, sp, #320	; 0x140
    f00c:	d120      	bne.n	f050 <_svfprintf_r+0x700>
    f00e:	9811      	ldr	r0, [sp, #68]	; 0x44
    f010:	f002 030f 	and.w	r3, r2, #15
    f014:	0912      	lsrs	r2, r2, #4
    f016:	5cc3      	ldrb	r3, [r0, r3]
    f018:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f01c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    f020:	0909      	lsrs	r1, r1, #4
    f022:	ea52 0301 	orrs.w	r3, r2, r1
    f026:	d1f3      	bne.n	f010 <_svfprintf_r+0x6c0>
    f028:	ab50      	add	r3, sp, #320	; 0x140
    f02a:	1b1b      	subs	r3, r3, r4
    f02c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f030:	9305      	str	r3, [sp, #20]
    f032:	9a05      	ldr	r2, [sp, #20]
    f034:	9803      	ldr	r0, [sp, #12]
    f036:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f03a:	4282      	cmp	r2, r0
    f03c:	f04f 0300 	mov.w	r3, #0
    f040:	bfb8      	it	lt
    f042:	4602      	movlt	r2, r0
    f044:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f048:	9307      	str	r3, [sp, #28]
    f04a:	9202      	str	r2, [sp, #8]
    f04c:	930f      	str	r3, [sp, #60]	; 0x3c
    f04e:	e660      	b.n	ed12 <_svfprintf_r+0x3c2>
    f050:	f002 0307 	and.w	r3, r2, #7
    f054:	08d2      	lsrs	r2, r2, #3
    f056:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    f05a:	08c9      	lsrs	r1, r1, #3
    f05c:	3330      	adds	r3, #48	; 0x30
    f05e:	ea52 0501 	orrs.w	r5, r2, r1
    f062:	4620      	mov	r0, r4
    f064:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f068:	d1f2      	bne.n	f050 <_svfprintf_r+0x700>
    f06a:	9a02      	ldr	r2, [sp, #8]
    f06c:	07d1      	lsls	r1, r2, #31
    f06e:	f100 824d 	bmi.w	f50c <_svfprintf_r+0xbbc>
    f072:	ab50      	add	r3, sp, #320	; 0x140
    f074:	1b1b      	subs	r3, r3, r4
    f076:	4690      	mov	r8, r2
    f078:	9305      	str	r3, [sp, #20]
    f07a:	e7da      	b.n	f032 <_svfprintf_r+0x6e2>
    f07c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f07e:	2b65      	cmp	r3, #101	; 0x65
    f080:	f340 80d4 	ble.w	f22c <_svfprintf_r+0x8dc>
    f084:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f08c:	f040 81c1 	bne.w	f412 <_svfprintf_r+0xac2>
    f090:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f092:	49ba      	ldr	r1, [pc, #744]	; (f37c <_svfprintf_r+0xa2c>)
    f094:	f8ca 1000 	str.w	r1, [sl]
    f098:	3301      	adds	r3, #1
    f09a:	3201      	adds	r2, #1
    f09c:	2101      	movs	r1, #1
    f09e:	2b07      	cmp	r3, #7
    f0a0:	9226      	str	r2, [sp, #152]	; 0x98
    f0a2:	9325      	str	r3, [sp, #148]	; 0x94
    f0a4:	f8ca 1004 	str.w	r1, [sl, #4]
    f0a8:	f300 8551 	bgt.w	fb4e <_svfprintf_r+0x11fe>
    f0ac:	f10a 0a08 	add.w	sl, sl, #8
    f0b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f0b2:	990e      	ldr	r1, [sp, #56]	; 0x38
    f0b4:	428b      	cmp	r3, r1
    f0b6:	f280 82d0 	bge.w	f65a <_svfprintf_r+0xd0a>
    f0ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f0bc:	9912      	ldr	r1, [sp, #72]	; 0x48
    f0be:	441a      	add	r2, r3
    f0c0:	e9ca 1300 	strd	r1, r3, [sl]
    f0c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f0c6:	9226      	str	r2, [sp, #152]	; 0x98
    f0c8:	3301      	adds	r3, #1
    f0ca:	2b07      	cmp	r3, #7
    f0cc:	9325      	str	r3, [sp, #148]	; 0x94
    f0ce:	f300 8397 	bgt.w	f800 <_svfprintf_r+0xeb0>
    f0d2:	f10a 0a08 	add.w	sl, sl, #8
    f0d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f0d8:	1e5c      	subs	r4, r3, #1
    f0da:	2c00      	cmp	r4, #0
    f0dc:	f77f add0 	ble.w	ec80 <_svfprintf_r+0x330>
    f0e0:	2c10      	cmp	r4, #16
    f0e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f0e4:	f340 856e 	ble.w	fbc4 <_svfprintf_r+0x1274>
    f0e8:	ee1b 6a10 	vmov	r6, s22
    f0ec:	2510      	movs	r5, #16
    f0ee:	e005      	b.n	f0fc <_svfprintf_r+0x7ac>
    f0f0:	f10a 0a08 	add.w	sl, sl, #8
    f0f4:	3c10      	subs	r4, #16
    f0f6:	2c10      	cmp	r4, #16
    f0f8:	f340 8564 	ble.w	fbc4 <_svfprintf_r+0x1274>
    f0fc:	3301      	adds	r3, #1
    f0fe:	49a0      	ldr	r1, [pc, #640]	; (f380 <_svfprintf_r+0xa30>)
    f100:	3210      	adds	r2, #16
    f102:	2b07      	cmp	r3, #7
    f104:	e9ca 1500 	strd	r1, r5, [sl]
    f108:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f10c:	ddf0      	ble.n	f0f0 <_svfprintf_r+0x7a0>
    f10e:	aa24      	add	r2, sp, #144	; 0x90
    f110:	4631      	mov	r1, r6
    f112:	4658      	mov	r0, fp
    f114:	f004 faa8 	bl	13668 <__ssprint_r>
    f118:	2800      	cmp	r0, #0
    f11a:	d17e      	bne.n	f21a <_svfprintf_r+0x8ca>
    f11c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f120:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f124:	e7e6      	b.n	f0f4 <_svfprintf_r+0x7a4>
    f126:	9b06      	ldr	r3, [sp, #24]
    f128:	9902      	ldr	r1, [sp, #8]
    f12a:	1a5d      	subs	r5, r3, r1
    f12c:	2d00      	cmp	r5, #0
    f12e:	f77f ad8e 	ble.w	ec4e <_svfprintf_r+0x2fe>
    f132:	2d10      	cmp	r5, #16
    f134:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f136:	dd21      	ble.n	f17c <_svfprintf_r+0x82c>
    f138:	9409      	str	r4, [sp, #36]	; 0x24
    f13a:	2610      	movs	r6, #16
    f13c:	ee1b 4a10 	vmov	r4, s22
    f140:	e004      	b.n	f14c <_svfprintf_r+0x7fc>
    f142:	3d10      	subs	r5, #16
    f144:	2d10      	cmp	r5, #16
    f146:	f10a 0a08 	add.w	sl, sl, #8
    f14a:	dd16      	ble.n	f17a <_svfprintf_r+0x82a>
    f14c:	3301      	adds	r3, #1
    f14e:	498c      	ldr	r1, [pc, #560]	; (f380 <_svfprintf_r+0xa30>)
    f150:	3210      	adds	r2, #16
    f152:	2b07      	cmp	r3, #7
    f154:	e9ca 1600 	strd	r1, r6, [sl]
    f158:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f15c:	ddf1      	ble.n	f142 <_svfprintf_r+0x7f2>
    f15e:	aa24      	add	r2, sp, #144	; 0x90
    f160:	4621      	mov	r1, r4
    f162:	4658      	mov	r0, fp
    f164:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f168:	f004 fa7e 	bl	13668 <__ssprint_r>
    f16c:	2800      	cmp	r0, #0
    f16e:	d154      	bne.n	f21a <_svfprintf_r+0x8ca>
    f170:	3d10      	subs	r5, #16
    f172:	2d10      	cmp	r5, #16
    f174:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f178:	dce8      	bgt.n	f14c <_svfprintf_r+0x7fc>
    f17a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f17c:	4980      	ldr	r1, [pc, #512]	; (f380 <_svfprintf_r+0xa30>)
    f17e:	f8ca 5004 	str.w	r5, [sl, #4]
    f182:	3301      	adds	r3, #1
    f184:	442a      	add	r2, r5
    f186:	2b07      	cmp	r3, #7
    f188:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f18c:	f8ca 1000 	str.w	r1, [sl]
    f190:	f300 8526 	bgt.w	fbe0 <_svfprintf_r+0x1290>
    f194:	9b03      	ldr	r3, [sp, #12]
    f196:	9905      	ldr	r1, [sp, #20]
    f198:	1a5d      	subs	r5, r3, r1
    f19a:	2d00      	cmp	r5, #0
    f19c:	f10a 0a08 	add.w	sl, sl, #8
    f1a0:	f77f ad5b 	ble.w	ec5a <_svfprintf_r+0x30a>
    f1a4:	2d10      	cmp	r5, #16
    f1a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f1a8:	dd1f      	ble.n	f1ea <_svfprintf_r+0x89a>
    f1aa:	4651      	mov	r1, sl
    f1ac:	2610      	movs	r6, #16
    f1ae:	ee1b aa10 	vmov	sl, s22
    f1b2:	e004      	b.n	f1be <_svfprintf_r+0x86e>
    f1b4:	3d10      	subs	r5, #16
    f1b6:	2d10      	cmp	r5, #16
    f1b8:	f101 0108 	add.w	r1, r1, #8
    f1bc:	dd14      	ble.n	f1e8 <_svfprintf_r+0x898>
    f1be:	3301      	adds	r3, #1
    f1c0:	486f      	ldr	r0, [pc, #444]	; (f380 <_svfprintf_r+0xa30>)
    f1c2:	3210      	adds	r2, #16
    f1c4:	2b07      	cmp	r3, #7
    f1c6:	e9c1 0600 	strd	r0, r6, [r1]
    f1ca:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f1ce:	ddf1      	ble.n	f1b4 <_svfprintf_r+0x864>
    f1d0:	aa24      	add	r2, sp, #144	; 0x90
    f1d2:	4651      	mov	r1, sl
    f1d4:	4658      	mov	r0, fp
    f1d6:	f004 fa47 	bl	13668 <__ssprint_r>
    f1da:	b9f0      	cbnz	r0, f21a <_svfprintf_r+0x8ca>
    f1dc:	3d10      	subs	r5, #16
    f1de:	2d10      	cmp	r5, #16
    f1e0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f1e4:	a927      	add	r1, sp, #156	; 0x9c
    f1e6:	dcea      	bgt.n	f1be <_svfprintf_r+0x86e>
    f1e8:	468a      	mov	sl, r1
    f1ea:	3301      	adds	r3, #1
    f1ec:	4964      	ldr	r1, [pc, #400]	; (f380 <_svfprintf_r+0xa30>)
    f1ee:	f8ca 5004 	str.w	r5, [sl, #4]
    f1f2:	442a      	add	r2, r5
    f1f4:	2b07      	cmp	r3, #7
    f1f6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f1fa:	f8ca 1000 	str.w	r1, [sl]
    f1fe:	f300 81da 	bgt.w	f5b6 <_svfprintf_r+0xc66>
    f202:	f10a 0a08 	add.w	sl, sl, #8
    f206:	e528      	b.n	ec5a <_svfprintf_r+0x30a>
    f208:	ee1b 1a10 	vmov	r1, s22
    f20c:	aa24      	add	r2, sp, #144	; 0x90
    f20e:	4658      	mov	r0, fp
    f210:	f004 fa2a 	bl	13668 <__ssprint_r>
    f214:	2800      	cmp	r0, #0
    f216:	f43f ad47 	beq.w	eca8 <_svfprintf_r+0x358>
    f21a:	9b07      	ldr	r3, [sp, #28]
    f21c:	2b00      	cmp	r3, #0
    f21e:	f43f aca2 	beq.w	eb66 <_svfprintf_r+0x216>
    f222:	9907      	ldr	r1, [sp, #28]
    f224:	4658      	mov	r0, fp
    f226:	f7fe f91d 	bl	d464 <_free_r>
    f22a:	e49c      	b.n	eb66 <_svfprintf_r+0x216>
    f22c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f22e:	2b01      	cmp	r3, #1
    f230:	f340 817a 	ble.w	f528 <_svfprintf_r+0xbd8>
    f234:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f236:	f8ca 4000 	str.w	r4, [sl]
    f23a:	3301      	adds	r3, #1
    f23c:	3201      	adds	r2, #1
    f23e:	2101      	movs	r1, #1
    f240:	2b07      	cmp	r3, #7
    f242:	9226      	str	r2, [sp, #152]	; 0x98
    f244:	9325      	str	r3, [sp, #148]	; 0x94
    f246:	f8ca 1004 	str.w	r1, [sl, #4]
    f24a:	f300 81f8 	bgt.w	f63e <_svfprintf_r+0xcee>
    f24e:	f10a 0a08 	add.w	sl, sl, #8
    f252:	9910      	ldr	r1, [sp, #64]	; 0x40
    f254:	9812      	ldr	r0, [sp, #72]	; 0x48
    f256:	3301      	adds	r3, #1
    f258:	440a      	add	r2, r1
    f25a:	2b07      	cmp	r3, #7
    f25c:	e9ca 0100 	strd	r0, r1, [sl]
    f260:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f264:	f300 81dd 	bgt.w	f622 <_svfprintf_r+0xcd2>
    f268:	f10a 0a08 	add.w	sl, sl, #8
    f26c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f274:	f000 8177 	beq.w	f566 <_svfprintf_r+0xc16>
    f278:	990e      	ldr	r1, [sp, #56]	; 0x38
    f27a:	3301      	adds	r3, #1
    f27c:	3901      	subs	r1, #1
    f27e:	3401      	adds	r4, #1
    f280:	440a      	add	r2, r1
    f282:	2b07      	cmp	r3, #7
    f284:	f8ca 4000 	str.w	r4, [sl]
    f288:	9325      	str	r3, [sp, #148]	; 0x94
    f28a:	f8ca 1004 	str.w	r1, [sl, #4]
    f28e:	9226      	str	r2, [sp, #152]	; 0x98
    f290:	f300 815b 	bgt.w	f54a <_svfprintf_r+0xbfa>
    f294:	f10a 0a08 	add.w	sl, sl, #8
    f298:	9914      	ldr	r1, [sp, #80]	; 0x50
    f29a:	f8ca 1004 	str.w	r1, [sl, #4]
    f29e:	3301      	adds	r3, #1
    f2a0:	440a      	add	r2, r1
    f2a2:	2b07      	cmp	r3, #7
    f2a4:	a91e      	add	r1, sp, #120	; 0x78
    f2a6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f2aa:	f8ca 1000 	str.w	r1, [sl]
    f2ae:	f77f ace5 	ble.w	ec7c <_svfprintf_r+0x32c>
    f2b2:	ee1b 1a10 	vmov	r1, s22
    f2b6:	aa24      	add	r2, sp, #144	; 0x90
    f2b8:	4658      	mov	r0, fp
    f2ba:	f004 f9d5 	bl	13668 <__ssprint_r>
    f2be:	2800      	cmp	r0, #0
    f2c0:	d1ab      	bne.n	f21a <_svfprintf_r+0x8ca>
    f2c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f2c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f2c8:	e4da      	b.n	ec80 <_svfprintf_r+0x330>
    f2ca:	2d10      	cmp	r5, #16
    f2cc:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    f2d0:	4e2c      	ldr	r6, [pc, #176]	; (f384 <_svfprintf_r+0xa34>)
    f2d2:	dd24      	ble.n	f31e <_svfprintf_r+0x9ce>
    f2d4:	9417      	str	r4, [sp, #92]	; 0x5c
    f2d6:	2310      	movs	r3, #16
    f2d8:	ee1b 4a10 	vmov	r4, s22
    f2dc:	4608      	mov	r0, r1
    f2de:	e004      	b.n	f2ea <_svfprintf_r+0x99a>
    f2e0:	3d10      	subs	r5, #16
    f2e2:	2d10      	cmp	r5, #16
    f2e4:	f10a 0a08 	add.w	sl, sl, #8
    f2e8:	dd17      	ble.n	f31a <_svfprintf_r+0x9ca>
    f2ea:	3001      	adds	r0, #1
    f2ec:	3210      	adds	r2, #16
    f2ee:	2807      	cmp	r0, #7
    f2f0:	e9ca 6300 	strd	r6, r3, [sl]
    f2f4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    f2f8:	ddf2      	ble.n	f2e0 <_svfprintf_r+0x990>
    f2fa:	aa24      	add	r2, sp, #144	; 0x90
    f2fc:	4621      	mov	r1, r4
    f2fe:	4658      	mov	r0, fp
    f300:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f304:	f004 f9b0 	bl	13668 <__ssprint_r>
    f308:	2800      	cmp	r0, #0
    f30a:	d186      	bne.n	f21a <_svfprintf_r+0x8ca>
    f30c:	3d10      	subs	r5, #16
    f30e:	2d10      	cmp	r5, #16
    f310:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    f314:	f04f 0310 	mov.w	r3, #16
    f318:	dce7      	bgt.n	f2ea <_svfprintf_r+0x99a>
    f31a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    f31c:	4601      	mov	r1, r0
    f31e:	3101      	adds	r1, #1
    f320:	442a      	add	r2, r5
    f322:	2907      	cmp	r1, #7
    f324:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    f328:	f8ca 6000 	str.w	r6, [sl]
    f32c:	f8ca 5004 	str.w	r5, [sl, #4]
    f330:	f300 83bd 	bgt.w	faae <_svfprintf_r+0x115e>
    f334:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f338:	f10a 0a08 	add.w	sl, sl, #8
    f33c:	e45d      	b.n	ebfa <_svfprintf_r+0x2aa>
    f33e:	f8cd 8008 	str.w	r8, [sp, #8]
    f342:	2a0a      	cmp	r2, #10
    f344:	f171 0300 	sbcs.w	r3, r1, #0
    f348:	f080 8345 	bcs.w	f9d6 <_svfprintf_r+0x1086>
    f34c:	3230      	adds	r2, #48	; 0x30
    f34e:	2301      	movs	r3, #1
    f350:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f354:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    f358:	9305      	str	r3, [sp, #20]
    f35a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    f35e:	e668      	b.n	f032 <_svfprintf_r+0x6e2>
    f360:	ee1b 1a10 	vmov	r1, s22
    f364:	aa24      	add	r2, sp, #144	; 0x90
    f366:	4658      	mov	r0, fp
    f368:	f004 f97e 	bl	13668 <__ssprint_r>
    f36c:	2800      	cmp	r0, #0
    f36e:	f47f af54 	bne.w	f21a <_svfprintf_r+0x8ca>
    f372:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f374:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f378:	e452      	b.n	ec20 <_svfprintf_r+0x2d0>
    f37a:	bf00      	nop
    f37c:	20000f24 	.word	0x20000f24
    f380:	20008770 	.word	0x20008770
    f384:	200029a0 	.word	0x200029a0
    f388:	ee1b 1a10 	vmov	r1, s22
    f38c:	aa24      	add	r2, sp, #144	; 0x90
    f38e:	4658      	mov	r0, fp
    f390:	f004 f96a 	bl	13668 <__ssprint_r>
    f394:	2800      	cmp	r0, #0
    f396:	f47f af40 	bne.w	f21a <_svfprintf_r+0x8ca>
    f39a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f39c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f3a0:	e451      	b.n	ec46 <_svfprintf_r+0x2f6>
    f3a2:	2c10      	cmp	r4, #16
    f3a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f3a6:	4ebe      	ldr	r6, [pc, #760]	; (f6a0 <_svfprintf_r+0xd50>)
    f3a8:	dd1f      	ble.n	f3ea <_svfprintf_r+0xa9a>
    f3aa:	ee1b 8a10 	vmov	r8, s22
    f3ae:	2510      	movs	r5, #16
    f3b0:	e004      	b.n	f3bc <_svfprintf_r+0xa6c>
    f3b2:	3c10      	subs	r4, #16
    f3b4:	2c10      	cmp	r4, #16
    f3b6:	f10a 0a08 	add.w	sl, sl, #8
    f3ba:	dd16      	ble.n	f3ea <_svfprintf_r+0xa9a>
    f3bc:	3301      	adds	r3, #1
    f3be:	3210      	adds	r2, #16
    f3c0:	2b07      	cmp	r3, #7
    f3c2:	e9ca 6500 	strd	r6, r5, [sl]
    f3c6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f3ca:	ddf2      	ble.n	f3b2 <_svfprintf_r+0xa62>
    f3cc:	aa24      	add	r2, sp, #144	; 0x90
    f3ce:	4641      	mov	r1, r8
    f3d0:	4658      	mov	r0, fp
    f3d2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f3d6:	f004 f947 	bl	13668 <__ssprint_r>
    f3da:	2800      	cmp	r0, #0
    f3dc:	f47f af1d 	bne.w	f21a <_svfprintf_r+0x8ca>
    f3e0:	3c10      	subs	r4, #16
    f3e2:	2c10      	cmp	r4, #16
    f3e4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f3e8:	dce8      	bgt.n	f3bc <_svfprintf_r+0xa6c>
    f3ea:	3301      	adds	r3, #1
    f3ec:	4422      	add	r2, r4
    f3ee:	2b07      	cmp	r3, #7
    f3f0:	e9ca 6400 	strd	r6, r4, [sl]
    f3f4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f3f8:	f77f ac4b 	ble.w	ec92 <_svfprintf_r+0x342>
    f3fc:	ee1b 1a10 	vmov	r1, s22
    f400:	aa24      	add	r2, sp, #144	; 0x90
    f402:	4658      	mov	r0, fp
    f404:	f004 f930 	bl	13668 <__ssprint_r>
    f408:	2800      	cmp	r0, #0
    f40a:	f47f af06 	bne.w	f21a <_svfprintf_r+0x8ca>
    f40e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f410:	e43f      	b.n	ec92 <_svfprintf_r+0x342>
    f412:	991b      	ldr	r1, [sp, #108]	; 0x6c
    f414:	2900      	cmp	r1, #0
    f416:	f340 835a 	ble.w	face <_svfprintf_r+0x117e>
    f41a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f41c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f41e:	429e      	cmp	r6, r3
    f420:	bfa8      	it	ge
    f422:	461e      	movge	r6, r3
    f424:	2e00      	cmp	r6, #0
    f426:	dd0b      	ble.n	f440 <_svfprintf_r+0xaf0>
    f428:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f42a:	3301      	adds	r3, #1
    f42c:	4432      	add	r2, r6
    f42e:	2b07      	cmp	r3, #7
    f430:	e9ca 4600 	strd	r4, r6, [sl]
    f434:	9226      	str	r2, [sp, #152]	; 0x98
    f436:	9325      	str	r3, [sp, #148]	; 0x94
    f438:	f300 8689 	bgt.w	1014e <_svfprintf_r+0x17fe>
    f43c:	f10a 0a08 	add.w	sl, sl, #8
    f440:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f442:	2e00      	cmp	r6, #0
    f444:	bfa8      	it	ge
    f446:	1bad      	subge	r5, r5, r6
    f448:	2d00      	cmp	r5, #0
    f44a:	f300 8203 	bgt.w	f854 <_svfprintf_r+0xf04>
    f44e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f450:	f418 6f80 	tst.w	r8, #1024	; 0x400
    f454:	4423      	add	r3, r4
    f456:	9305      	str	r3, [sp, #20]
    f458:	f040 821f 	bne.w	f89a <_svfprintf_r+0xf4a>
    f45c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f45e:	990e      	ldr	r1, [sp, #56]	; 0x38
    f460:	428b      	cmp	r3, r1
    f462:	db03      	blt.n	f46c <_svfprintf_r+0xb1c>
    f464:	f018 0f01 	tst.w	r8, #1
    f468:	f000 84cf 	beq.w	fe0a <_svfprintf_r+0x14ba>
    f46c:	9910      	ldr	r1, [sp, #64]	; 0x40
    f46e:	9812      	ldr	r0, [sp, #72]	; 0x48
    f470:	440a      	add	r2, r1
    f472:	e9ca 0100 	strd	r0, r1, [sl]
    f476:	9925      	ldr	r1, [sp, #148]	; 0x94
    f478:	9226      	str	r2, [sp, #152]	; 0x98
    f47a:	3101      	adds	r1, #1
    f47c:	2907      	cmp	r1, #7
    f47e:	9125      	str	r1, [sp, #148]	; 0x94
    f480:	f300 86a5 	bgt.w	101ce <_svfprintf_r+0x187e>
    f484:	f10a 0a08 	add.w	sl, sl, #8
    f488:	990e      	ldr	r1, [sp, #56]	; 0x38
    f48a:	1865      	adds	r5, r4, r1
    f48c:	1acc      	subs	r4, r1, r3
    f48e:	9b05      	ldr	r3, [sp, #20]
    f490:	1aed      	subs	r5, r5, r3
    f492:	42a5      	cmp	r5, r4
    f494:	bfa8      	it	ge
    f496:	4625      	movge	r5, r4
    f498:	2d00      	cmp	r5, #0
    f49a:	dd0d      	ble.n	f4b8 <_svfprintf_r+0xb68>
    f49c:	f8ca 3000 	str.w	r3, [sl]
    f4a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f4a2:	f8ca 5004 	str.w	r5, [sl, #4]
    f4a6:	3301      	adds	r3, #1
    f4a8:	442a      	add	r2, r5
    f4aa:	2b07      	cmp	r3, #7
    f4ac:	9226      	str	r2, [sp, #152]	; 0x98
    f4ae:	9325      	str	r3, [sp, #148]	; 0x94
    f4b0:	f300 86bb 	bgt.w	1022a <_svfprintf_r+0x18da>
    f4b4:	f10a 0a08 	add.w	sl, sl, #8
    f4b8:	2d00      	cmp	r5, #0
    f4ba:	bfa8      	it	ge
    f4bc:	1b64      	subge	r4, r4, r5
    f4be:	2c00      	cmp	r4, #0
    f4c0:	f77f abde 	ble.w	ec80 <_svfprintf_r+0x330>
    f4c4:	2c10      	cmp	r4, #16
    f4c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f4c8:	f340 837c 	ble.w	fbc4 <_svfprintf_r+0x1274>
    f4cc:	ee1b 6a10 	vmov	r6, s22
    f4d0:	2510      	movs	r5, #16
    f4d2:	e005      	b.n	f4e0 <_svfprintf_r+0xb90>
    f4d4:	f10a 0a08 	add.w	sl, sl, #8
    f4d8:	3c10      	subs	r4, #16
    f4da:	2c10      	cmp	r4, #16
    f4dc:	f340 8372 	ble.w	fbc4 <_svfprintf_r+0x1274>
    f4e0:	3301      	adds	r3, #1
    f4e2:	4970      	ldr	r1, [pc, #448]	; (f6a4 <_svfprintf_r+0xd54>)
    f4e4:	3210      	adds	r2, #16
    f4e6:	2b07      	cmp	r3, #7
    f4e8:	e9ca 1500 	strd	r1, r5, [sl]
    f4ec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f4f0:	ddf0      	ble.n	f4d4 <_svfprintf_r+0xb84>
    f4f2:	aa24      	add	r2, sp, #144	; 0x90
    f4f4:	4631      	mov	r1, r6
    f4f6:	4658      	mov	r0, fp
    f4f8:	f004 f8b6 	bl	13668 <__ssprint_r>
    f4fc:	2800      	cmp	r0, #0
    f4fe:	f47f ae8c 	bne.w	f21a <_svfprintf_r+0x8ca>
    f502:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f506:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f50a:	e7e5      	b.n	f4d8 <_svfprintf_r+0xb88>
    f50c:	2b30      	cmp	r3, #48	; 0x30
    f50e:	f43f ad8b 	beq.w	f028 <_svfprintf_r+0x6d8>
    f512:	2330      	movs	r3, #48	; 0x30
    f514:	3802      	subs	r0, #2
    f516:	f804 3c01 	strb.w	r3, [r4, #-1]
    f51a:	ab50      	add	r3, sp, #320	; 0x140
    f51c:	1a1b      	subs	r3, r3, r0
    f51e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f522:	9305      	str	r3, [sp, #20]
    f524:	4604      	mov	r4, r0
    f526:	e584      	b.n	f032 <_svfprintf_r+0x6e2>
    f528:	f018 0f01 	tst.w	r8, #1
    f52c:	f47f ae82 	bne.w	f234 <_svfprintf_r+0x8e4>
    f530:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f532:	f8ca 4000 	str.w	r4, [sl]
    f536:	3301      	adds	r3, #1
    f538:	3201      	adds	r2, #1
    f53a:	2101      	movs	r1, #1
    f53c:	2b07      	cmp	r3, #7
    f53e:	9226      	str	r2, [sp, #152]	; 0x98
    f540:	9325      	str	r3, [sp, #148]	; 0x94
    f542:	f8ca 1004 	str.w	r1, [sl, #4]
    f546:	f77f aea5 	ble.w	f294 <_svfprintf_r+0x944>
    f54a:	ee1b 1a10 	vmov	r1, s22
    f54e:	aa24      	add	r2, sp, #144	; 0x90
    f550:	4658      	mov	r0, fp
    f552:	f004 f889 	bl	13668 <__ssprint_r>
    f556:	2800      	cmp	r0, #0
    f558:	f47f ae5f 	bne.w	f21a <_svfprintf_r+0x8ca>
    f55c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f560:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f564:	e698      	b.n	f298 <_svfprintf_r+0x948>
    f566:	990e      	ldr	r1, [sp, #56]	; 0x38
    f568:	1e4c      	subs	r4, r1, #1
    f56a:	2c00      	cmp	r4, #0
    f56c:	f77f ae94 	ble.w	f298 <_svfprintf_r+0x948>
    f570:	2c10      	cmp	r4, #16
    f572:	f340 8361 	ble.w	fc38 <_svfprintf_r+0x12e8>
    f576:	ee1b 6a10 	vmov	r6, s22
    f57a:	2510      	movs	r5, #16
    f57c:	e005      	b.n	f58a <_svfprintf_r+0xc3a>
    f57e:	f10a 0a08 	add.w	sl, sl, #8
    f582:	3c10      	subs	r4, #16
    f584:	2c10      	cmp	r4, #16
    f586:	f340 8357 	ble.w	fc38 <_svfprintf_r+0x12e8>
    f58a:	3301      	adds	r3, #1
    f58c:	4945      	ldr	r1, [pc, #276]	; (f6a4 <_svfprintf_r+0xd54>)
    f58e:	3210      	adds	r2, #16
    f590:	2b07      	cmp	r3, #7
    f592:	e9ca 1500 	strd	r1, r5, [sl]
    f596:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f59a:	ddf0      	ble.n	f57e <_svfprintf_r+0xc2e>
    f59c:	aa24      	add	r2, sp, #144	; 0x90
    f59e:	4631      	mov	r1, r6
    f5a0:	4658      	mov	r0, fp
    f5a2:	f004 f861 	bl	13668 <__ssprint_r>
    f5a6:	2800      	cmp	r0, #0
    f5a8:	f47f ae37 	bne.w	f21a <_svfprintf_r+0x8ca>
    f5ac:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f5b0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f5b4:	e7e5      	b.n	f582 <_svfprintf_r+0xc32>
    f5b6:	ee1b 1a10 	vmov	r1, s22
    f5ba:	aa24      	add	r2, sp, #144	; 0x90
    f5bc:	4658      	mov	r0, fp
    f5be:	f004 f853 	bl	13668 <__ssprint_r>
    f5c2:	2800      	cmp	r0, #0
    f5c4:	f47f ae29 	bne.w	f21a <_svfprintf_r+0x8ca>
    f5c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f5ca:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f5ce:	f7ff bb44 	b.w	ec5a <_svfprintf_r+0x30a>
    f5d2:	9b02      	ldr	r3, [sp, #8]
    f5d4:	f013 0310 	ands.w	r3, r3, #16
    f5d8:	f040 80c1 	bne.w	f75e <_svfprintf_r+0xe0e>
    f5dc:	9a02      	ldr	r2, [sp, #8]
    f5de:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    f5e2:	f000 837a 	beq.w	fcda <_svfprintf_r+0x138a>
    f5e6:	9808      	ldr	r0, [sp, #32]
    f5e8:	f850 2b04 	ldr.w	r2, [r0], #4
    f5ec:	9008      	str	r0, [sp, #32]
    f5ee:	4619      	mov	r1, r3
    f5f0:	b292      	uxth	r2, r2
    f5f2:	2301      	movs	r3, #1
    f5f4:	e451      	b.n	ee9a <_svfprintf_r+0x54a>
    f5f6:	f018 0310 	ands.w	r3, r8, #16
    f5fa:	d155      	bne.n	f6a8 <_svfprintf_r+0xd58>
    f5fc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    f600:	f000 835d 	beq.w	fcbe <_svfprintf_r+0x136e>
    f604:	9808      	ldr	r0, [sp, #32]
    f606:	f850 2b04 	ldr.w	r2, [r0], #4
    f60a:	9008      	str	r0, [sp, #32]
    f60c:	4619      	mov	r1, r3
    f60e:	b292      	uxth	r2, r2
    f610:	e4a8      	b.n	ef64 <_svfprintf_r+0x614>
    f612:	4252      	negs	r2, r2
    f614:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f618:	f8cd 8008 	str.w	r8, [sp, #8]
    f61c:	202d      	movs	r0, #45	; 0x2d
    f61e:	2301      	movs	r3, #1
    f620:	e43c      	b.n	ee9c <_svfprintf_r+0x54c>
    f622:	ee1b 1a10 	vmov	r1, s22
    f626:	aa24      	add	r2, sp, #144	; 0x90
    f628:	4658      	mov	r0, fp
    f62a:	f004 f81d 	bl	13668 <__ssprint_r>
    f62e:	2800      	cmp	r0, #0
    f630:	f47f adf3 	bne.w	f21a <_svfprintf_r+0x8ca>
    f634:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f638:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f63c:	e616      	b.n	f26c <_svfprintf_r+0x91c>
    f63e:	ee1b 1a10 	vmov	r1, s22
    f642:	aa24      	add	r2, sp, #144	; 0x90
    f644:	4658      	mov	r0, fp
    f646:	f004 f80f 	bl	13668 <__ssprint_r>
    f64a:	2800      	cmp	r0, #0
    f64c:	f47f ade5 	bne.w	f21a <_svfprintf_r+0x8ca>
    f650:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f654:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f658:	e5fb      	b.n	f252 <_svfprintf_r+0x902>
    f65a:	f018 0f01 	tst.w	r8, #1
    f65e:	f43f ab0f 	beq.w	ec80 <_svfprintf_r+0x330>
    f662:	e52a      	b.n	f0ba <_svfprintf_r+0x76a>
    f664:	9308      	str	r3, [sp, #32]
    f666:	f899 3000 	ldrb.w	r3, [r9]
    f66a:	f7ff b9cd 	b.w	ea08 <_svfprintf_r+0xb8>
    f66e:	ac50      	add	r4, sp, #320	; 0x140
    f670:	e4df      	b.n	f032 <_svfprintf_r+0x6e2>
    f672:	f418 7f00 	tst.w	r8, #512	; 0x200
    f676:	f040 83db 	bne.w	fe30 <_svfprintf_r+0x14e0>
    f67a:	f853 2b04 	ldr.w	r2, [r3], #4
    f67e:	9308      	str	r3, [sp, #32]
    f680:	17d1      	asrs	r1, r2, #31
    f682:	460b      	mov	r3, r1
    f684:	f7ff bbb6 	b.w	edf4 <_svfprintf_r+0x4a4>
    f688:	9b08      	ldr	r3, [sp, #32]
    f68a:	9804      	ldr	r0, [sp, #16]
    f68c:	f853 1b04 	ldr.w	r1, [r3], #4
    f690:	9308      	str	r3, [sp, #32]
    f692:	17c2      	asrs	r2, r0, #31
    f694:	e9c1 0200 	strd	r0, r2, [r1]
    f698:	464c      	mov	r4, r9
    f69a:	f7ff b98b 	b.w	e9b4 <_svfprintf_r+0x64>
    f69e:	bf00      	nop
    f6a0:	200029a0 	.word	0x200029a0
    f6a4:	20008770 	.word	0x20008770
    f6a8:	9b08      	ldr	r3, [sp, #32]
    f6aa:	f853 2b04 	ldr.w	r2, [r3], #4
    f6ae:	9308      	str	r3, [sp, #32]
    f6b0:	e458      	b.n	ef64 <_svfprintf_r+0x614>
    f6b2:	eeb4 8b48 	vcmp.f64	d8, d8
    f6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f6ba:	f180 8694 	bvs.w	103e6 <_svfprintf_r+0x1a96>
    f6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6c0:	2b61      	cmp	r3, #97	; 0x61
    f6c2:	f000 8552 	beq.w	1016a <_svfprintf_r+0x181a>
    f6c6:	2b41      	cmp	r3, #65	; 0x41
    f6c8:	f000 85c0 	beq.w	1024c <_svfprintf_r+0x18fc>
    f6cc:	9b03      	ldr	r3, [sp, #12]
    f6ce:	3301      	adds	r3, #1
    f6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6d2:	f023 0520 	bic.w	r5, r3, #32
    f6d6:	f000 8480 	beq.w	ffda <_svfprintf_r+0x168a>
    f6da:	2d47      	cmp	r5, #71	; 0x47
    f6dc:	d104      	bne.n	f6e8 <_svfprintf_r+0xd98>
    f6de:	9b03      	ldr	r3, [sp, #12]
    f6e0:	2b00      	cmp	r3, #0
    f6e2:	bf08      	it	eq
    f6e4:	2301      	moveq	r3, #1
    f6e6:	9303      	str	r3, [sp, #12]
    f6e8:	ee18 3a90 	vmov	r3, s17
    f6ec:	2b00      	cmp	r3, #0
    f6ee:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    f6f2:	4646      	mov	r6, r8
    f6f4:	f2c0 8618 	blt.w	10328 <_svfprintf_r+0x19d8>
    f6f8:	eeb0 ab48 	vmov.f64	d10, d8
    f6fc:	2300      	movs	r3, #0
    f6fe:	4690      	mov	r8, r2
    f700:	9309      	str	r3, [sp, #36]	; 0x24
    f702:	9307      	str	r3, [sp, #28]
    f704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f706:	3b41      	subs	r3, #65	; 0x41
    f708:	2b25      	cmp	r3, #37	; 0x25
    f70a:	f200 8398 	bhi.w	fe3e <_svfprintf_r+0x14ee>
    f70e:	e8df f013 	tbh	[pc, r3, lsl #1]
    f712:	046f      	.short	0x046f
    f714:	03960396 	.word	0x03960396
    f718:	04680396 	.word	0x04680396
    f71c:	0396046c 	.word	0x0396046c
    f720:	03960396 	.word	0x03960396
    f724:	03960396 	.word	0x03960396
    f728:	03960396 	.word	0x03960396
    f72c:	03960396 	.word	0x03960396
    f730:	03960396 	.word	0x03960396
    f734:	03960396 	.word	0x03960396
    f738:	03960396 	.word	0x03960396
    f73c:	03960396 	.word	0x03960396
    f740:	03960396 	.word	0x03960396
    f744:	03960396 	.word	0x03960396
    f748:	03960396 	.word	0x03960396
    f74c:	03960396 	.word	0x03960396
    f750:	03960396 	.word	0x03960396
    f754:	03960396 	.word	0x03960396
    f758:	04680396 	.word	0x04680396
    f75c:	046c      	.short	0x046c
    f75e:	9b08      	ldr	r3, [sp, #32]
    f760:	f853 2b04 	ldr.w	r2, [r3], #4
    f764:	9308      	str	r3, [sp, #32]
    f766:	2301      	movs	r3, #1
    f768:	f7ff bb97 	b.w	ee9a <_svfprintf_r+0x54a>
    f76c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f76e:	2b00      	cmp	r3, #0
    f770:	f43f a9cf 	beq.w	eb12 <_svfprintf_r+0x1c2>
    f774:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f776:	781b      	ldrb	r3, [r3, #0]
    f778:	2b00      	cmp	r3, #0
    f77a:	f43f a9ca 	beq.w	eb12 <_svfprintf_r+0x1c2>
    f77e:	f899 3000 	ldrb.w	r3, [r9]
    f782:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    f786:	f7ff b93f 	b.w	ea08 <_svfprintf_r+0xb8>
    f78a:	930b      	str	r3, [sp, #44]	; 0x2c
    f78c:	f8cd 8008 	str.w	r8, [sp, #8]
    f790:	f7ff bbf1 	b.w	ef76 <_svfprintf_r+0x626>
    f794:	930b      	str	r3, [sp, #44]	; 0x2c
    f796:	4b9a      	ldr	r3, [pc, #616]	; (fa00 <_svfprintf_r+0x10b0>)
    f798:	9311      	str	r3, [sp, #68]	; 0x44
    f79a:	f018 0120 	ands.w	r1, r8, #32
    f79e:	f000 8105 	beq.w	f9ac <_svfprintf_r+0x105c>
    f7a2:	9b08      	ldr	r3, [sp, #32]
    f7a4:	3307      	adds	r3, #7
    f7a6:	f023 0307 	bic.w	r3, r3, #7
    f7aa:	6859      	ldr	r1, [r3, #4]
    f7ac:	f853 2b08 	ldr.w	r2, [r3], #8
    f7b0:	9308      	str	r3, [sp, #32]
    f7b2:	f018 0f01 	tst.w	r8, #1
    f7b6:	d00a      	beq.n	f7ce <_svfprintf_r+0xe7e>
    f7b8:	ea52 0301 	orrs.w	r3, r2, r1
    f7bc:	d007      	beq.n	f7ce <_svfprintf_r+0xe7e>
    f7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f7c0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    f7c4:	2330      	movs	r3, #48	; 0x30
    f7c6:	f048 0802 	orr.w	r8, r8, #2
    f7ca:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    f7ce:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    f7d2:	9302      	str	r3, [sp, #8]
    f7d4:	2302      	movs	r3, #2
    f7d6:	f7ff bb60 	b.w	ee9a <_svfprintf_r+0x54a>
    f7da:	930b      	str	r3, [sp, #44]	; 0x2c
    f7dc:	f7ff bbb6 	b.w	ef4c <_svfprintf_r+0x5fc>
    f7e0:	930b      	str	r3, [sp, #44]	; 0x2c
    f7e2:	4b88      	ldr	r3, [pc, #544]	; (fa04 <_svfprintf_r+0x10b4>)
    f7e4:	9311      	str	r3, [sp, #68]	; 0x44
    f7e6:	e7d8      	b.n	f79a <_svfprintf_r+0xe4a>
    f7e8:	9b08      	ldr	r3, [sp, #32]
    f7ea:	2101      	movs	r1, #1
    f7ec:	f853 2b04 	ldr.w	r2, [r3], #4
    f7f0:	9102      	str	r1, [sp, #8]
    f7f2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    f7f6:	9308      	str	r3, [sp, #32]
    f7f8:	9105      	str	r1, [sp, #20]
    f7fa:	ac37      	add	r4, sp, #220	; 0xdc
    f7fc:	f7ff baaf 	b.w	ed5e <_svfprintf_r+0x40e>
    f800:	ee1b 1a10 	vmov	r1, s22
    f804:	aa24      	add	r2, sp, #144	; 0x90
    f806:	4658      	mov	r0, fp
    f808:	f003 ff2e 	bl	13668 <__ssprint_r>
    f80c:	2800      	cmp	r0, #0
    f80e:	f47f ad04 	bne.w	f21a <_svfprintf_r+0x8ca>
    f812:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f814:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f818:	e45d      	b.n	f0d6 <_svfprintf_r+0x786>
    f81a:	9b03      	ldr	r3, [sp, #12]
    f81c:	9407      	str	r4, [sp, #28]
    f81e:	2b06      	cmp	r3, #6
    f820:	4622      	mov	r2, r4
    f822:	bf28      	it	cs
    f824:	2306      	movcs	r3, #6
    f826:	9403      	str	r4, [sp, #12]
    f828:	4621      	mov	r1, r4
    f82a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    f82e:	4c76      	ldr	r4, [pc, #472]	; (fa08 <_svfprintf_r+0x10b8>)
    f830:	9302      	str	r3, [sp, #8]
    f832:	9305      	str	r3, [sp, #20]
    f834:	920f      	str	r2, [sp, #60]	; 0x3c
    f836:	f7ff ba6c 	b.w	ed12 <_svfprintf_r+0x3c2>
    f83a:	2140      	movs	r1, #64	; 0x40
    f83c:	4658      	mov	r0, fp
    f83e:	f7fb fa95 	bl	ad6c <_malloc_r>
    f842:	6020      	str	r0, [r4, #0]
    f844:	6120      	str	r0, [r4, #16]
    f846:	2800      	cmp	r0, #0
    f848:	f000 860f 	beq.w	1046a <_svfprintf_r+0x1b1a>
    f84c:	2340      	movs	r3, #64	; 0x40
    f84e:	6163      	str	r3, [r4, #20]
    f850:	f7ff b89e 	b.w	e990 <_svfprintf_r+0x40>
    f854:	2d10      	cmp	r5, #16
    f856:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f858:	f340 825d 	ble.w	fd16 <_svfprintf_r+0x13c6>
    f85c:	4651      	mov	r1, sl
    f85e:	2610      	movs	r6, #16
    f860:	ee1b aa10 	vmov	sl, s22
    f864:	e004      	b.n	f870 <_svfprintf_r+0xf20>
    f866:	3108      	adds	r1, #8
    f868:	3d10      	subs	r5, #16
    f86a:	2d10      	cmp	r5, #16
    f86c:	f340 8252 	ble.w	fd14 <_svfprintf_r+0x13c4>
    f870:	3301      	adds	r3, #1
    f872:	4866      	ldr	r0, [pc, #408]	; (fa0c <_svfprintf_r+0x10bc>)
    f874:	3210      	adds	r2, #16
    f876:	2b07      	cmp	r3, #7
    f878:	e9c1 0600 	strd	r0, r6, [r1]
    f87c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f880:	ddf1      	ble.n	f866 <_svfprintf_r+0xf16>
    f882:	aa24      	add	r2, sp, #144	; 0x90
    f884:	4651      	mov	r1, sl
    f886:	4658      	mov	r0, fp
    f888:	f003 feee 	bl	13668 <__ssprint_r>
    f88c:	2800      	cmp	r0, #0
    f88e:	f47f acc4 	bne.w	f21a <_svfprintf_r+0x8ca>
    f892:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f896:	a927      	add	r1, sp, #156	; 0x9c
    f898:	e7e6      	b.n	f868 <_svfprintf_r+0xf18>
    f89a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f89c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    f8a0:	18e3      	adds	r3, r4, r3
    f8a2:	9303      	str	r3, [sp, #12]
    f8a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f8a6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    f8aa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f8ac:	9d05      	ldr	r5, [sp, #20]
    f8ae:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    f8b2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    f8b6:	940b      	str	r4, [sp, #44]	; 0x2c
    f8b8:	ee1b 1a10 	vmov	r1, s22
    f8bc:	4650      	mov	r0, sl
    f8be:	2b00      	cmp	r3, #0
    f8c0:	d034      	beq.n	f92c <_svfprintf_r+0xfdc>
    f8c2:	f1b8 0f00 	cmp.w	r8, #0
    f8c6:	d135      	bne.n	f934 <_svfprintf_r+0xfe4>
    f8c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f8ca:	3b01      	subs	r3, #1
    f8cc:	3e01      	subs	r6, #1
    f8ce:	930d      	str	r3, [sp, #52]	; 0x34
    f8d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f8d2:	e9c0 3900 	strd	r3, r9, [r0]
    f8d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f8d8:	3301      	adds	r3, #1
    f8da:	444a      	add	r2, r9
    f8dc:	2b07      	cmp	r3, #7
    f8de:	9226      	str	r2, [sp, #152]	; 0x98
    f8e0:	9325      	str	r3, [sp, #148]	; 0x94
    f8e2:	dc6c      	bgt.n	f9be <_svfprintf_r+0x106e>
    f8e4:	3008      	adds	r0, #8
    f8e6:	9b03      	ldr	r3, [sp, #12]
    f8e8:	f896 c000 	ldrb.w	ip, [r6]
    f8ec:	1b5b      	subs	r3, r3, r5
    f8ee:	4563      	cmp	r3, ip
    f8f0:	bfa8      	it	ge
    f8f2:	4663      	movge	r3, ip
    f8f4:	2b00      	cmp	r3, #0
    f8f6:	469a      	mov	sl, r3
    f8f8:	dd0c      	ble.n	f914 <_svfprintf_r+0xfc4>
    f8fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
    f8fc:	3401      	adds	r4, #1
    f8fe:	441a      	add	r2, r3
    f900:	2c07      	cmp	r4, #7
    f902:	e9c0 5300 	strd	r5, r3, [r0]
    f906:	9226      	str	r2, [sp, #152]	; 0x98
    f908:	9425      	str	r4, [sp, #148]	; 0x94
    f90a:	f300 8177 	bgt.w	fbfc <_svfprintf_r+0x12ac>
    f90e:	f896 c000 	ldrb.w	ip, [r6]
    f912:	3008      	adds	r0, #8
    f914:	f1ba 0f00 	cmp.w	sl, #0
    f918:	bfac      	ite	ge
    f91a:	ebac 040a 	subge.w	r4, ip, sl
    f91e:	4664      	movlt	r4, ip
    f920:	2c00      	cmp	r4, #0
    f922:	dc0a      	bgt.n	f93a <_svfprintf_r+0xfea>
    f924:	4465      	add	r5, ip
    f926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f928:	2b00      	cmp	r3, #0
    f92a:	d1ca      	bne.n	f8c2 <_svfprintf_r+0xf72>
    f92c:	f1b8 0f00 	cmp.w	r8, #0
    f930:	f000 83ac 	beq.w	1008c <_svfprintf_r+0x173c>
    f934:	f108 38ff 	add.w	r8, r8, #4294967295
    f938:	e7ca      	b.n	f8d0 <_svfprintf_r+0xf80>
    f93a:	2c10      	cmp	r4, #16
    f93c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    f940:	dd24      	ble.n	f98c <_svfprintf_r+0x103c>
    f942:	9505      	str	r5, [sp, #20]
    f944:	f04f 0a10 	mov.w	sl, #16
    f948:	4663      	mov	r3, ip
    f94a:	460d      	mov	r5, r1
    f94c:	e004      	b.n	f958 <_svfprintf_r+0x1008>
    f94e:	3c10      	subs	r4, #16
    f950:	2c10      	cmp	r4, #16
    f952:	f100 0008 	add.w	r0, r0, #8
    f956:	dd16      	ble.n	f986 <_svfprintf_r+0x1036>
    f958:	3301      	adds	r3, #1
    f95a:	492c      	ldr	r1, [pc, #176]	; (fa0c <_svfprintf_r+0x10bc>)
    f95c:	3210      	adds	r2, #16
    f95e:	2b07      	cmp	r3, #7
    f960:	e9c0 1a00 	strd	r1, sl, [r0]
    f964:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f968:	ddf1      	ble.n	f94e <_svfprintf_r+0xffe>
    f96a:	aa24      	add	r2, sp, #144	; 0x90
    f96c:	4629      	mov	r1, r5
    f96e:	4658      	mov	r0, fp
    f970:	f003 fe7a 	bl	13668 <__ssprint_r>
    f974:	2800      	cmp	r0, #0
    f976:	f47f ac50 	bne.w	f21a <_svfprintf_r+0x8ca>
    f97a:	3c10      	subs	r4, #16
    f97c:	2c10      	cmp	r4, #16
    f97e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f982:	a827      	add	r0, sp, #156	; 0x9c
    f984:	dce8      	bgt.n	f958 <_svfprintf_r+0x1008>
    f986:	4629      	mov	r1, r5
    f988:	9d05      	ldr	r5, [sp, #20]
    f98a:	469c      	mov	ip, r3
    f98c:	f10c 0301 	add.w	r3, ip, #1
    f990:	4422      	add	r2, r4
    f992:	6044      	str	r4, [r0, #4]
    f994:	2b07      	cmp	r3, #7
    f996:	4c1d      	ldr	r4, [pc, #116]	; (fa0c <_svfprintf_r+0x10bc>)
    f998:	6004      	str	r4, [r0, #0]
    f99a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f99e:	f300 83c6 	bgt.w	1012e <_svfprintf_r+0x17de>
    f9a2:	f896 c000 	ldrb.w	ip, [r6]
    f9a6:	3008      	adds	r0, #8
    f9a8:	4465      	add	r5, ip
    f9aa:	e7bc      	b.n	f926 <_svfprintf_r+0xfd6>
    f9ac:	f018 0310 	ands.w	r3, r8, #16
    f9b0:	f000 80c2 	beq.w	fb38 <_svfprintf_r+0x11e8>
    f9b4:	9b08      	ldr	r3, [sp, #32]
    f9b6:	f853 2b04 	ldr.w	r2, [r3], #4
    f9ba:	9308      	str	r3, [sp, #32]
    f9bc:	e6f9      	b.n	f7b2 <_svfprintf_r+0xe62>
    f9be:	aa24      	add	r2, sp, #144	; 0x90
    f9c0:	4658      	mov	r0, fp
    f9c2:	9105      	str	r1, [sp, #20]
    f9c4:	f003 fe50 	bl	13668 <__ssprint_r>
    f9c8:	2800      	cmp	r0, #0
    f9ca:	f47f ac26 	bne.w	f21a <_svfprintf_r+0x8ca>
    f9ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f9d0:	9905      	ldr	r1, [sp, #20]
    f9d2:	a827      	add	r0, sp, #156	; 0x9c
    f9d4:	e787      	b.n	f8e6 <_svfprintf_r+0xf96>
    f9d6:	9802      	ldr	r0, [sp, #8]
    f9d8:	f8cd a01c 	str.w	sl, [sp, #28]
    f9dc:	ac50      	add	r4, sp, #320	; 0x140
    f9de:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    f9e2:	2500      	movs	r5, #0
    f9e4:	ee0a ba10 	vmov	s20, fp
    f9e8:	4b09      	ldr	r3, [pc, #36]	; (fa10 <_svfprintf_r+0x10c0>)
    f9ea:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    f9ee:	f8cd 9014 	str.w	r9, [sp, #20]
    f9f2:	46a3      	mov	fp, r4
    f9f4:	f04f 0805 	mov.w	r8, #5
    f9f8:	46ac      	mov	ip, r5
    f9fa:	4604      	mov	r4, r0
    f9fc:	e010      	b.n	fa20 <_svfprintf_r+0x10d0>
    f9fe:	bf00      	nop
    fa00:	20000ef4 	.word	0x20000ef4
    fa04:	20000f08 	.word	0x20000f08
    fa08:	20000f1c 	.word	0x20000f1c
    fa0c:	20008770 	.word	0x20008770
    fa10:	cccccccd 	.word	0xcccccccd
    fa14:	2a0a      	cmp	r2, #10
    fa16:	f171 0100 	sbcs.w	r1, r1, #0
    fa1a:	d336      	bcc.n	fa8a <_svfprintf_r+0x113a>
    fa1c:	464a      	mov	r2, r9
    fa1e:	4631      	mov	r1, r6
    fa20:	1850      	adds	r0, r2, r1
    fa22:	f140 0000 	adc.w	r0, r0, #0
    fa26:	fba3 5600 	umull	r5, r6, r3, r0
    fa2a:	f026 0503 	bic.w	r5, r6, #3
    fa2e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    fa32:	1b40      	subs	r0, r0, r5
    fa34:	1a15      	subs	r5, r2, r0
    fa36:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    fa3a:	f161 0e00 	sbc.w	lr, r1, #0
    fa3e:	fb06 f605 	mul.w	r6, r6, r5
    fa42:	fba5 9503 	umull	r9, r5, r5, r3
    fa46:	fb03 660e 	mla	r6, r3, lr, r6
    fa4a:	f009 0e01 	and.w	lr, r9, #1
    fa4e:	442e      	add	r6, r5
    fa50:	fbae 5e08 	umull	r5, lr, lr, r8
    fa54:	182d      	adds	r5, r5, r0
    fa56:	ea4f 0959 	mov.w	r9, r9, lsr #1
    fa5a:	3530      	adds	r5, #48	; 0x30
    fa5c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    fa60:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    fa64:	f10c 0c01 	add.w	ip, ip, #1
    fa68:	f10b 3bff 	add.w	fp, fp, #4294967295
    fa6c:	0876      	lsrs	r6, r6, #1
    fa6e:	2c00      	cmp	r4, #0
    fa70:	d0d0      	beq.n	fa14 <_svfprintf_r+0x10c4>
    fa72:	f89a 0000 	ldrb.w	r0, [sl]
    fa76:	4584      	cmp	ip, r0
    fa78:	d1cc      	bne.n	fa14 <_svfprintf_r+0x10c4>
    fa7a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fa7e:	d0c9      	beq.n	fa14 <_svfprintf_r+0x10c4>
    fa80:	2a0a      	cmp	r2, #10
    fa82:	f171 0100 	sbcs.w	r1, r1, #0
    fa86:	f080 818f 	bcs.w	fda8 <_svfprintf_r+0x1458>
    fa8a:	465c      	mov	r4, fp
    fa8c:	ab50      	add	r3, sp, #320	; 0x140
    fa8e:	1b1b      	subs	r3, r3, r4
    fa90:	f8dd 9014 	ldr.w	r9, [sp, #20]
    fa94:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    fa98:	ee1a ba10 	vmov	fp, s20
    fa9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    faa0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    faa4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    faa8:	9305      	str	r3, [sp, #20]
    faaa:	f7ff bac2 	b.w	f032 <_svfprintf_r+0x6e2>
    faae:	ee1b 1a10 	vmov	r1, s22
    fab2:	aa24      	add	r2, sp, #144	; 0x90
    fab4:	4658      	mov	r0, fp
    fab6:	f003 fdd7 	bl	13668 <__ssprint_r>
    faba:	2800      	cmp	r0, #0
    fabc:	f47f abad 	bne.w	f21a <_svfprintf_r+0x8ca>
    fac0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fac4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fac6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    faca:	f7ff b896 	b.w	ebfa <_svfprintf_r+0x2aa>
    face:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fad0:	48be      	ldr	r0, [pc, #760]	; (fdcc <_svfprintf_r+0x147c>)
    fad2:	f8ca 0000 	str.w	r0, [sl]
    fad6:	3301      	adds	r3, #1
    fad8:	3201      	adds	r2, #1
    fada:	2001      	movs	r0, #1
    fadc:	2b07      	cmp	r3, #7
    fade:	9226      	str	r2, [sp, #152]	; 0x98
    fae0:	9325      	str	r3, [sp, #148]	; 0x94
    fae2:	f8ca 0004 	str.w	r0, [sl, #4]
    fae6:	f300 8177 	bgt.w	fdd8 <_svfprintf_r+0x1488>
    faea:	f10a 0a08 	add.w	sl, sl, #8
    faee:	2900      	cmp	r1, #0
    faf0:	f040 80af 	bne.w	fc52 <_svfprintf_r+0x1302>
    faf4:	990e      	ldr	r1, [sp, #56]	; 0x38
    faf6:	f008 0301 	and.w	r3, r8, #1
    fafa:	430b      	orrs	r3, r1
    fafc:	f43f a8c0 	beq.w	ec80 <_svfprintf_r+0x330>
    fb00:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fb02:	9912      	ldr	r1, [sp, #72]	; 0x48
    fb04:	441a      	add	r2, r3
    fb06:	e9ca 1300 	strd	r1, r3, [sl]
    fb0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fb0c:	9226      	str	r2, [sp, #152]	; 0x98
    fb0e:	3301      	adds	r3, #1
    fb10:	2b07      	cmp	r3, #7
    fb12:	9325      	str	r3, [sp, #148]	; 0x94
    fb14:	f300 8252 	bgt.w	ffbc <_svfprintf_r+0x166c>
    fb18:	f10a 0a08 	add.w	sl, sl, #8
    fb1c:	990e      	ldr	r1, [sp, #56]	; 0x38
    fb1e:	f8ca 4000 	str.w	r4, [sl]
    fb22:	3301      	adds	r3, #1
    fb24:	440a      	add	r2, r1
    fb26:	2b07      	cmp	r3, #7
    fb28:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fb2c:	f8ca 1004 	str.w	r1, [sl, #4]
    fb30:	f77f a8a4 	ble.w	ec7c <_svfprintf_r+0x32c>
    fb34:	f7ff bbbd 	b.w	f2b2 <_svfprintf_r+0x962>
    fb38:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    fb3c:	f000 80dd 	beq.w	fcfa <_svfprintf_r+0x13aa>
    fb40:	9808      	ldr	r0, [sp, #32]
    fb42:	f850 2b04 	ldr.w	r2, [r0], #4
    fb46:	9008      	str	r0, [sp, #32]
    fb48:	4619      	mov	r1, r3
    fb4a:	b292      	uxth	r2, r2
    fb4c:	e631      	b.n	f7b2 <_svfprintf_r+0xe62>
    fb4e:	ee1b 1a10 	vmov	r1, s22
    fb52:	aa24      	add	r2, sp, #144	; 0x90
    fb54:	4658      	mov	r0, fp
    fb56:	f003 fd87 	bl	13668 <__ssprint_r>
    fb5a:	2800      	cmp	r0, #0
    fb5c:	f47f ab5d 	bne.w	f21a <_svfprintf_r+0x8ca>
    fb60:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fb62:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fb66:	f7ff baa3 	b.w	f0b0 <_svfprintf_r+0x760>
    fb6a:	ae22      	add	r6, sp, #136	; 0x88
    fb6c:	2208      	movs	r2, #8
    fb6e:	2100      	movs	r1, #0
    fb70:	4630      	mov	r0, r6
    fb72:	941d      	str	r4, [sp, #116]	; 0x74
    fb74:	f7fd f822 	bl	cbbc <memset>
    fb78:	9b03      	ldr	r3, [sp, #12]
    fb7a:	1c5a      	adds	r2, r3, #1
    fb7c:	f000 80db 	beq.w	fd36 <_svfprintf_r+0x13e6>
    fb80:	2500      	movs	r5, #0
    fb82:	f8cd 9008 	str.w	r9, [sp, #8]
    fb86:	f8cd 801c 	str.w	r8, [sp, #28]
    fb8a:	4699      	mov	r9, r3
    fb8c:	46a8      	mov	r8, r5
    fb8e:	e00c      	b.n	fbaa <_svfprintf_r+0x125a>
    fb90:	a937      	add	r1, sp, #220	; 0xdc
    fb92:	4658      	mov	r0, fp
    fb94:	f003 fc3e 	bl	13414 <_wcrtomb_r>
    fb98:	1c43      	adds	r3, r0, #1
    fb9a:	4440      	add	r0, r8
    fb9c:	f000 83c8 	beq.w	10330 <_svfprintf_r+0x19e0>
    fba0:	4548      	cmp	r0, r9
    fba2:	dc08      	bgt.n	fbb6 <_svfprintf_r+0x1266>
    fba4:	f000 8418 	beq.w	103d8 <_svfprintf_r+0x1a88>
    fba8:	4680      	mov	r8, r0
    fbaa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    fbac:	5952      	ldr	r2, [r2, r5]
    fbae:	4633      	mov	r3, r6
    fbb0:	3504      	adds	r5, #4
    fbb2:	2a00      	cmp	r2, #0
    fbb4:	d1ec      	bne.n	fb90 <_svfprintf_r+0x1240>
    fbb6:	f8cd 8014 	str.w	r8, [sp, #20]
    fbba:	f8dd 9008 	ldr.w	r9, [sp, #8]
    fbbe:	f8dd 801c 	ldr.w	r8, [sp, #28]
    fbc2:	e0c5      	b.n	fd50 <_svfprintf_r+0x1400>
    fbc4:	3301      	adds	r3, #1
    fbc6:	4982      	ldr	r1, [pc, #520]	; (fdd0 <_svfprintf_r+0x1480>)
    fbc8:	f8ca 4004 	str.w	r4, [sl, #4]
    fbcc:	4422      	add	r2, r4
    fbce:	2b07      	cmp	r3, #7
    fbd0:	f8ca 1000 	str.w	r1, [sl]
    fbd4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fbd8:	f77f a850 	ble.w	ec7c <_svfprintf_r+0x32c>
    fbdc:	f7ff bb69 	b.w	f2b2 <_svfprintf_r+0x962>
    fbe0:	ee1b 1a10 	vmov	r1, s22
    fbe4:	aa24      	add	r2, sp, #144	; 0x90
    fbe6:	4658      	mov	r0, fp
    fbe8:	f003 fd3e 	bl	13668 <__ssprint_r>
    fbec:	2800      	cmp	r0, #0
    fbee:	f47f ab14 	bne.w	f21a <_svfprintf_r+0x8ca>
    fbf2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fbf4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fbf8:	f7ff b829 	b.w	ec4e <_svfprintf_r+0x2fe>
    fbfc:	aa24      	add	r2, sp, #144	; 0x90
    fbfe:	4658      	mov	r0, fp
    fc00:	9105      	str	r1, [sp, #20]
    fc02:	f003 fd31 	bl	13668 <__ssprint_r>
    fc06:	2800      	cmp	r0, #0
    fc08:	f47f ab07 	bne.w	f21a <_svfprintf_r+0x8ca>
    fc0c:	f896 c000 	ldrb.w	ip, [r6]
    fc10:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fc12:	9905      	ldr	r1, [sp, #20]
    fc14:	a827      	add	r0, sp, #156	; 0x9c
    fc16:	e67d      	b.n	f914 <_svfprintf_r+0xfc4>
    fc18:	2b01      	cmp	r3, #1
    fc1a:	f8cd 8008 	str.w	r8, [sp, #8]
    fc1e:	f47f a9f3 	bne.w	f008 <_svfprintf_r+0x6b8>
    fc22:	f7ff bb93 	b.w	f34c <_svfprintf_r+0x9fc>
    fc26:	9b08      	ldr	r3, [sp, #32]
    fc28:	9904      	ldr	r1, [sp, #16]
    fc2a:	f853 2b04 	ldr.w	r2, [r3], #4
    fc2e:	464c      	mov	r4, r9
    fc30:	6011      	str	r1, [r2, #0]
    fc32:	9308      	str	r3, [sp, #32]
    fc34:	f7fe bebe 	b.w	e9b4 <_svfprintf_r+0x64>
    fc38:	3301      	adds	r3, #1
    fc3a:	4965      	ldr	r1, [pc, #404]	; (fdd0 <_svfprintf_r+0x1480>)
    fc3c:	f8ca 4004 	str.w	r4, [sl, #4]
    fc40:	4422      	add	r2, r4
    fc42:	2b07      	cmp	r3, #7
    fc44:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fc48:	f8ca 1000 	str.w	r1, [sl]
    fc4c:	f77f ab22 	ble.w	f294 <_svfprintf_r+0x944>
    fc50:	e47b      	b.n	f54a <_svfprintf_r+0xbfa>
    fc52:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fc54:	9812      	ldr	r0, [sp, #72]	; 0x48
    fc56:	441a      	add	r2, r3
    fc58:	e9ca 0300 	strd	r0, r3, [sl]
    fc5c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fc5e:	9226      	str	r2, [sp, #152]	; 0x98
    fc60:	3301      	adds	r3, #1
    fc62:	2b07      	cmp	r3, #7
    fc64:	9325      	str	r3, [sp, #148]	; 0x94
    fc66:	f300 81a9 	bgt.w	ffbc <_svfprintf_r+0x166c>
    fc6a:	f10a 0a08 	add.w	sl, sl, #8
    fc6e:	2900      	cmp	r1, #0
    fc70:	f6bf af54 	bge.w	fb1c <_svfprintf_r+0x11cc>
    fc74:	424d      	negs	r5, r1
    fc76:	3110      	adds	r1, #16
    fc78:	f280 830f 	bge.w	1029a <_svfprintf_r+0x194a>
    fc7c:	ee1b 1a10 	vmov	r1, s22
    fc80:	2610      	movs	r6, #16
    fc82:	e005      	b.n	fc90 <_svfprintf_r+0x1340>
    fc84:	f10a 0a08 	add.w	sl, sl, #8
    fc88:	3d10      	subs	r5, #16
    fc8a:	2d10      	cmp	r5, #16
    fc8c:	f340 8305 	ble.w	1029a <_svfprintf_r+0x194a>
    fc90:	3301      	adds	r3, #1
    fc92:	484f      	ldr	r0, [pc, #316]	; (fdd0 <_svfprintf_r+0x1480>)
    fc94:	3210      	adds	r2, #16
    fc96:	2b07      	cmp	r3, #7
    fc98:	e9ca 0600 	strd	r0, r6, [sl]
    fc9c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fca0:	ddf0      	ble.n	fc84 <_svfprintf_r+0x1334>
    fca2:	aa24      	add	r2, sp, #144	; 0x90
    fca4:	4658      	mov	r0, fp
    fca6:	9103      	str	r1, [sp, #12]
    fca8:	f003 fcde 	bl	13668 <__ssprint_r>
    fcac:	2800      	cmp	r0, #0
    fcae:	f47f aab4 	bne.w	f21a <_svfprintf_r+0x8ca>
    fcb2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fcb6:	9903      	ldr	r1, [sp, #12]
    fcb8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fcbc:	e7e4      	b.n	fc88 <_svfprintf_r+0x1338>
    fcbe:	9b08      	ldr	r3, [sp, #32]
    fcc0:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    fcc4:	bf1a      	itte	ne
    fcc6:	4611      	movne	r1, r2
    fcc8:	f853 2b04 	ldrne.w	r2, [r3], #4
    fccc:	f853 2b04 	ldreq.w	r2, [r3], #4
    fcd0:	9308      	str	r3, [sp, #32]
    fcd2:	bf18      	it	ne
    fcd4:	b2d2      	uxtbne	r2, r2
    fcd6:	f7ff b945 	b.w	ef64 <_svfprintf_r+0x614>
    fcda:	9b02      	ldr	r3, [sp, #8]
    fcdc:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    fce0:	9b08      	ldr	r3, [sp, #32]
    fce2:	bf1a      	itte	ne
    fce4:	4611      	movne	r1, r2
    fce6:	f853 2b04 	ldrne.w	r2, [r3], #4
    fcea:	f853 2b04 	ldreq.w	r2, [r3], #4
    fcee:	9308      	str	r3, [sp, #32]
    fcf0:	bf18      	it	ne
    fcf2:	b2d2      	uxtbne	r2, r2
    fcf4:	2301      	movs	r3, #1
    fcf6:	f7ff b8d0 	b.w	ee9a <_svfprintf_r+0x54a>
    fcfa:	9b08      	ldr	r3, [sp, #32]
    fcfc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    fd00:	bf1a      	itte	ne
    fd02:	4611      	movne	r1, r2
    fd04:	f853 2b04 	ldrne.w	r2, [r3], #4
    fd08:	f853 2b04 	ldreq.w	r2, [r3], #4
    fd0c:	9308      	str	r3, [sp, #32]
    fd0e:	bf18      	it	ne
    fd10:	b2d2      	uxtbne	r2, r2
    fd12:	e54e      	b.n	f7b2 <_svfprintf_r+0xe62>
    fd14:	468a      	mov	sl, r1
    fd16:	3301      	adds	r3, #1
    fd18:	492d      	ldr	r1, [pc, #180]	; (fdd0 <_svfprintf_r+0x1480>)
    fd1a:	f8ca 5004 	str.w	r5, [sl, #4]
    fd1e:	442a      	add	r2, r5
    fd20:	2b07      	cmp	r3, #7
    fd22:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    fd26:	f8ca 1000 	str.w	r1, [sl]
    fd2a:	f300 8139 	bgt.w	ffa0 <_svfprintf_r+0x1650>
    fd2e:	f10a 0a08 	add.w	sl, sl, #8
    fd32:	f7ff bb8c 	b.w	f44e <_svfprintf_r+0xafe>
    fd36:	2300      	movs	r3, #0
    fd38:	4619      	mov	r1, r3
    fd3a:	9600      	str	r6, [sp, #0]
    fd3c:	aa1d      	add	r2, sp, #116	; 0x74
    fd3e:	4658      	mov	r0, fp
    fd40:	f003 fb8e 	bl	13460 <_wcsrtombs_r>
    fd44:	4603      	mov	r3, r0
    fd46:	3301      	adds	r3, #1
    fd48:	9005      	str	r0, [sp, #20]
    fd4a:	f000 82f1 	beq.w	10330 <_svfprintf_r+0x19e0>
    fd4e:	941d      	str	r4, [sp, #116]	; 0x74
    fd50:	9b05      	ldr	r3, [sp, #20]
    fd52:	2b00      	cmp	r3, #0
    fd54:	d04e      	beq.n	fdf4 <_svfprintf_r+0x14a4>
    fd56:	2b63      	cmp	r3, #99	; 0x63
    fd58:	f300 8118 	bgt.w	ff8c <_svfprintf_r+0x163c>
    fd5c:	2300      	movs	r3, #0
    fd5e:	9307      	str	r3, [sp, #28]
    fd60:	ac37      	add	r4, sp, #220	; 0xdc
    fd62:	2208      	movs	r2, #8
    fd64:	2100      	movs	r1, #0
    fd66:	4630      	mov	r0, r6
    fd68:	f7fc ff28 	bl	cbbc <memset>
    fd6c:	9d05      	ldr	r5, [sp, #20]
    fd6e:	9600      	str	r6, [sp, #0]
    fd70:	462b      	mov	r3, r5
    fd72:	aa1d      	add	r2, sp, #116	; 0x74
    fd74:	4621      	mov	r1, r4
    fd76:	4658      	mov	r0, fp
    fd78:	f003 fb72 	bl	13460 <_wcsrtombs_r>
    fd7c:	4285      	cmp	r5, r0
    fd7e:	f040 837c 	bne.w	1047a <_svfprintf_r+0x1b2a>
    fd82:	9a05      	ldr	r2, [sp, #20]
    fd84:	2300      	movs	r3, #0
    fd86:	54a3      	strb	r3, [r4, r2]
    fd88:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    fd8c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    fd90:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fd94:	9303      	str	r3, [sp, #12]
    fd96:	9202      	str	r2, [sp, #8]
    fd98:	930f      	str	r3, [sp, #60]	; 0x3c
    fd9a:	f7fe bfba 	b.w	ed12 <_svfprintf_r+0x3c2>
    fd9e:	212d      	movs	r1, #45	; 0x2d
    fda0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    fda4:	f7fe bfa4 	b.w	ecf0 <_svfprintf_r+0x3a0>
    fda8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fdaa:	9915      	ldr	r1, [sp, #84]	; 0x54
    fdac:	ebab 0b03 	sub.w	fp, fp, r3
    fdb0:	461a      	mov	r2, r3
    fdb2:	4658      	mov	r0, fp
    fdb4:	f7fc ff9a 	bl	ccec <strncpy>
    fdb8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    fdbc:	4b05      	ldr	r3, [pc, #20]	; (fdd4 <_svfprintf_r+0x1484>)
    fdbe:	b10a      	cbz	r2, fdc4 <_svfprintf_r+0x1474>
    fdc0:	f10a 0a01 	add.w	sl, sl, #1
    fdc4:	f04f 0c00 	mov.w	ip, #0
    fdc8:	e628      	b.n	fa1c <_svfprintf_r+0x10cc>
    fdca:	bf00      	nop
    fdcc:	20000f24 	.word	0x20000f24
    fdd0:	20008770 	.word	0x20008770
    fdd4:	cccccccd 	.word	0xcccccccd
    fdd8:	ee1b 1a10 	vmov	r1, s22
    fddc:	aa24      	add	r2, sp, #144	; 0x90
    fdde:	4658      	mov	r0, fp
    fde0:	f003 fc42 	bl	13668 <__ssprint_r>
    fde4:	2800      	cmp	r0, #0
    fde6:	f47f aa18 	bne.w	f21a <_svfprintf_r+0x8ca>
    fdea:	991b      	ldr	r1, [sp, #108]	; 0x6c
    fdec:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fdee:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fdf2:	e67c      	b.n	faee <_svfprintf_r+0x119e>
    fdf4:	9b05      	ldr	r3, [sp, #20]
    fdf6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fdfa:	930f      	str	r3, [sp, #60]	; 0x3c
    fdfc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    fe00:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    fe04:	9307      	str	r3, [sp, #28]
    fe06:	f7fe bf84 	b.w	ed12 <_svfprintf_r+0x3c2>
    fe0a:	990e      	ldr	r1, [sp, #56]	; 0x38
    fe0c:	9805      	ldr	r0, [sp, #20]
    fe0e:	1865      	adds	r5, r4, r1
    fe10:	1a2d      	subs	r5, r5, r0
    fe12:	1acc      	subs	r4, r1, r3
    fe14:	42a5      	cmp	r5, r4
    fe16:	bfa8      	it	ge
    fe18:	4625      	movge	r5, r4
    fe1a:	f7ff bb4d 	b.w	f4b8 <_svfprintf_r+0xb68>
    fe1e:	9b08      	ldr	r3, [sp, #32]
    fe20:	9904      	ldr	r1, [sp, #16]
    fe22:	f853 2b04 	ldr.w	r2, [r3], #4
    fe26:	9308      	str	r3, [sp, #32]
    fe28:	8011      	strh	r1, [r2, #0]
    fe2a:	464c      	mov	r4, r9
    fe2c:	f7fe bdc2 	b.w	e9b4 <_svfprintf_r+0x64>
    fe30:	f913 2b04 	ldrsb.w	r2, [r3], #4
    fe34:	9308      	str	r3, [sp, #32]
    fe36:	17d1      	asrs	r1, r2, #31
    fe38:	460b      	mov	r3, r1
    fe3a:	f7fe bfdb 	b.w	edf4 <_svfprintf_r+0x4a4>
    fe3e:	9a03      	ldr	r2, [sp, #12]
    fe40:	2102      	movs	r1, #2
    fe42:	ab22      	add	r3, sp, #136	; 0x88
    fe44:	9301      	str	r3, [sp, #4]
    fe46:	ab1d      	add	r3, sp, #116	; 0x74
    fe48:	9300      	str	r3, [sp, #0]
    fe4a:	4658      	mov	r0, fp
    fe4c:	ab1b      	add	r3, sp, #108	; 0x6c
    fe4e:	eeb0 0b4a 	vmov.f64	d0, d10
    fe52:	9202      	str	r2, [sp, #8]
    fe54:	f002 fa14 	bl	12280 <_dtoa_r>
    fe58:	2d47      	cmp	r5, #71	; 0x47
    fe5a:	9a02      	ldr	r2, [sp, #8]
    fe5c:	4604      	mov	r4, r0
    fe5e:	f000 8161 	beq.w	10124 <_svfprintf_r+0x17d4>
    fe62:	2d46      	cmp	r5, #70	; 0x46
    fe64:	4410      	add	r0, r2
    fe66:	d105      	bne.n	fe74 <_svfprintf_r+0x1524>
    fe68:	7823      	ldrb	r3, [r4, #0]
    fe6a:	2b30      	cmp	r3, #48	; 0x30
    fe6c:	f000 826f 	beq.w	1034e <_svfprintf_r+0x19fe>
    fe70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    fe72:	4410      	add	r0, r2
    fe74:	eeb5 ab40 	vcmp.f64	d10, #0.0
    fe78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fe7c:	f040 8146 	bne.w	1010c <_svfprintf_r+0x17bc>
    fe80:	4603      	mov	r3, r0
    fe82:	1b1b      	subs	r3, r3, r4
    fe84:	930e      	str	r3, [sp, #56]	; 0x38
    fe86:	2d47      	cmp	r5, #71	; 0x47
    fe88:	f000 8110 	beq.w	100ac <_svfprintf_r+0x175c>
    fe8c:	2d46      	cmp	r5, #70	; 0x46
    fe8e:	f000 81b5 	beq.w	101fc <_svfprintf_r+0x18ac>
    fe92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fe94:	930c      	str	r3, [sp, #48]	; 0x30
    fe96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe98:	2d41      	cmp	r5, #65	; 0x41
    fe9a:	f103 33ff 	add.w	r3, r3, #4294967295
    fe9e:	931b      	str	r3, [sp, #108]	; 0x6c
    fea0:	f000 81e5 	beq.w	1026e <_svfprintf_r+0x191e>
    fea4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    fea8:	2100      	movs	r1, #0
    feaa:	2b00      	cmp	r3, #0
    feac:	bfb8      	it	lt
    feae:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    feb0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    feb4:	bfba      	itte	lt
    feb6:	f1c3 0301 	rsblt	r3, r3, #1
    feba:	222d      	movlt	r2, #45	; 0x2d
    febc:	222b      	movge	r2, #43	; 0x2b
    febe:	2b09      	cmp	r3, #9
    fec0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    fec4:	f340 81da 	ble.w	1027c <_svfprintf_r+0x192c>
    fec8:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    fecc:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 102ec <_svfprintf_r+0x199c>
    fed0:	462a      	mov	r2, r5
    fed2:	4610      	mov	r0, r2
    fed4:	fb8c 2103 	smull	r2, r1, ip, r3
    fed8:	17da      	asrs	r2, r3, #31
    feda:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    fede:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    fee2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    fee6:	3130      	adds	r1, #48	; 0x30
    fee8:	f800 1c01 	strb.w	r1, [r0, #-1]
    feec:	4619      	mov	r1, r3
    feee:	2963      	cmp	r1, #99	; 0x63
    fef0:	4613      	mov	r3, r2
    fef2:	f100 32ff 	add.w	r2, r0, #4294967295
    fef6:	dcec      	bgt.n	fed2 <_svfprintf_r+0x1582>
    fef8:	3330      	adds	r3, #48	; 0x30
    fefa:	b2d9      	uxtb	r1, r3
    fefc:	1e83      	subs	r3, r0, #2
    fefe:	429d      	cmp	r5, r3
    ff00:	f802 1c01 	strb.w	r1, [r2, #-1]
    ff04:	f240 828b 	bls.w	1041e <_svfprintf_r+0x1ace>
    ff08:	4613      	mov	r3, r2
    ff0a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ff0e:	e001      	b.n	ff14 <_svfprintf_r+0x15c4>
    ff10:	f813 1b01 	ldrb.w	r1, [r3], #1
    ff14:	f802 1b01 	strb.w	r1, [r2], #1
    ff18:	429d      	cmp	r5, r3
    ff1a:	d1f9      	bne.n	ff10 <_svfprintf_r+0x15c0>
    ff1c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    ff20:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ff24:	1a1b      	subs	r3, r3, r0
    ff26:	4413      	add	r3, r2
    ff28:	aa1e      	add	r2, sp, #120	; 0x78
    ff2a:	1a9b      	subs	r3, r3, r2
    ff2c:	9314      	str	r3, [sp, #80]	; 0x50
    ff2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ff30:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ff32:	2b01      	cmp	r3, #1
    ff34:	441a      	add	r2, r3
    ff36:	9205      	str	r2, [sp, #20]
    ff38:	f340 8203 	ble.w	10342 <_svfprintf_r+0x19f2>
    ff3c:	9b05      	ldr	r3, [sp, #20]
    ff3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ff40:	4413      	add	r3, r2
    ff42:	9305      	str	r3, [sp, #20]
    ff44:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    ff48:	9a05      	ldr	r2, [sp, #20]
    ff4a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    ff4e:	2300      	movs	r3, #0
    ff50:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ff54:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ff58:	930f      	str	r3, [sp, #60]	; 0x3c
    ff5a:	9202      	str	r2, [sp, #8]
    ff5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ff5e:	2b00      	cmp	r3, #0
    ff60:	f040 80b1 	bne.w	100c6 <_svfprintf_r+0x1776>
    ff64:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ff68:	9303      	str	r3, [sp, #12]
    ff6a:	f7fe bed2 	b.w	ed12 <_svfprintf_r+0x3c2>
    ff6e:	4620      	mov	r0, r4
    ff70:	f7fd f966 	bl	d240 <strlen>
    ff74:	4602      	mov	r2, r0
    ff76:	9005      	str	r0, [sp, #20]
    ff78:	f7fe bf20 	b.w	edbc <_svfprintf_r+0x46c>
    ff7c:	ee1b 1a10 	vmov	r1, s22
    ff80:	aa24      	add	r2, sp, #144	; 0x90
    ff82:	4658      	mov	r0, fp
    ff84:	f003 fb70 	bl	13668 <__ssprint_r>
    ff88:	f7fe bded 	b.w	eb66 <_svfprintf_r+0x216>
    ff8c:	1c59      	adds	r1, r3, #1
    ff8e:	4658      	mov	r0, fp
    ff90:	f7fa feec 	bl	ad6c <_malloc_r>
    ff94:	4604      	mov	r4, r0
    ff96:	2800      	cmp	r0, #0
    ff98:	f000 81ca 	beq.w	10330 <_svfprintf_r+0x19e0>
    ff9c:	9007      	str	r0, [sp, #28]
    ff9e:	e6e0      	b.n	fd62 <_svfprintf_r+0x1412>
    ffa0:	ee1b 1a10 	vmov	r1, s22
    ffa4:	aa24      	add	r2, sp, #144	; 0x90
    ffa6:	4658      	mov	r0, fp
    ffa8:	f003 fb5e 	bl	13668 <__ssprint_r>
    ffac:	2800      	cmp	r0, #0
    ffae:	f47f a934 	bne.w	f21a <_svfprintf_r+0x8ca>
    ffb2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ffb4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ffb8:	f7ff ba49 	b.w	f44e <_svfprintf_r+0xafe>
    ffbc:	ee1b 1a10 	vmov	r1, s22
    ffc0:	aa24      	add	r2, sp, #144	; 0x90
    ffc2:	4658      	mov	r0, fp
    ffc4:	f003 fb50 	bl	13668 <__ssprint_r>
    ffc8:	2800      	cmp	r0, #0
    ffca:	f47f a926 	bne.w	f21a <_svfprintf_r+0x8ca>
    ffce:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ffd2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ffd4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ffd8:	e649      	b.n	fc6e <_svfprintf_r+0x131e>
    ffda:	2306      	movs	r3, #6
    ffdc:	9303      	str	r3, [sp, #12]
    ffde:	f7ff bb83 	b.w	f6e8 <_svfprintf_r+0xd98>
    ffe2:	9b03      	ldr	r3, [sp, #12]
    ffe4:	2102      	movs	r1, #2
    ffe6:	1c5a      	adds	r2, r3, #1
    ffe8:	e72b      	b.n	fe42 <_svfprintf_r+0x14f2>
    ffea:	9a03      	ldr	r2, [sp, #12]
    ffec:	2103      	movs	r1, #3
    ffee:	e728      	b.n	fe42 <_svfprintf_r+0x14f2>
    fff0:	a81b      	add	r0, sp, #108	; 0x6c
    fff2:	eeb0 0b4a 	vmov.f64	d0, d10
    fff6:	f002 f817 	bl	12028 <frexp>
    fffa:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    fffe:	ee20 0b07 	vmul.f64	d0, d0, d7
   10002:	eeb5 0b40 	vcmp.f64	d0, #0.0
   10006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1000a:	d101      	bne.n	10010 <_svfprintf_r+0x16c0>
   1000c:	2301      	movs	r3, #1
   1000e:	931b      	str	r3, [sp, #108]	; 0x6c
   10010:	48b3      	ldr	r0, [pc, #716]	; (102e0 <_svfprintf_r+0x1990>)
   10012:	9b03      	ldr	r3, [sp, #12]
   10014:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   10018:	3b01      	subs	r3, #1
   1001a:	4622      	mov	r2, r4
   1001c:	e004      	b.n	10028 <_svfprintf_r+0x16d8>
   1001e:	eeb5 0b40 	vcmp.f64	d0, #0.0
   10022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10026:	d013      	beq.n	10050 <_svfprintf_r+0x1700>
   10028:	ee20 0b05 	vmul.f64	d0, d0, d5
   1002c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   10030:	f1b3 3fff 	cmp.w	r3, #4294967295
   10034:	ee17 1a90 	vmov	r1, s15
   10038:	5c41      	ldrb	r1, [r0, r1]
   1003a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   1003e:	4694      	mov	ip, r2
   10040:	ee30 0b46 	vsub.f64	d0, d0, d6
   10044:	f802 1b01 	strb.w	r1, [r2], #1
   10048:	4619      	mov	r1, r3
   1004a:	f103 33ff 	add.w	r3, r3, #4294967295
   1004e:	d1e6      	bne.n	1001e <_svfprintf_r+0x16ce>
   10050:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   10054:	eeb4 0bc6 	vcmpe.f64	d0, d6
   10058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1005c:	f300 8148 	bgt.w	102f0 <_svfprintf_r+0x19a0>
   10060:	eeb4 0b46 	vcmp.f64	d0, d6
   10064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10068:	d104      	bne.n	10074 <_svfprintf_r+0x1724>
   1006a:	ee17 3a90 	vmov	r3, s15
   1006e:	07db      	lsls	r3, r3, #31
   10070:	f100 813e 	bmi.w	102f0 <_svfprintf_r+0x19a0>
   10074:	2900      	cmp	r1, #0
   10076:	db06      	blt.n	10086 <_svfprintf_r+0x1736>
   10078:	1c4b      	adds	r3, r1, #1
   1007a:	4413      	add	r3, r2
   1007c:	2130      	movs	r1, #48	; 0x30
   1007e:	f802 1b01 	strb.w	r1, [r2], #1
   10082:	4293      	cmp	r3, r2
   10084:	d1fb      	bne.n	1007e <_svfprintf_r+0x172e>
   10086:	1b13      	subs	r3, r2, r4
   10088:	930e      	str	r3, [sp, #56]	; 0x38
   1008a:	e6fc      	b.n	fe86 <_svfprintf_r+0x1536>
   1008c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1008e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10090:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   10094:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   10098:	9613      	str	r6, [sp, #76]	; 0x4c
   1009a:	18e3      	adds	r3, r4, r3
   1009c:	429d      	cmp	r5, r3
   1009e:	4629      	mov	r1, r5
   100a0:	bf28      	it	cs
   100a2:	4619      	movcs	r1, r3
   100a4:	4682      	mov	sl, r0
   100a6:	9105      	str	r1, [sp, #20]
   100a8:	f7ff b9d8 	b.w	f45c <_svfprintf_r+0xb0c>
   100ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   100ae:	930c      	str	r3, [sp, #48]	; 0x30
   100b0:	1cda      	adds	r2, r3, #3
   100b2:	db02      	blt.n	100ba <_svfprintf_r+0x176a>
   100b4:	9a03      	ldr	r2, [sp, #12]
   100b6:	4293      	cmp	r3, r2
   100b8:	dd0c      	ble.n	100d4 <_svfprintf_r+0x1784>
   100ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   100bc:	3b02      	subs	r3, #2
   100be:	930b      	str	r3, [sp, #44]	; 0x2c
   100c0:	f023 0520 	bic.w	r5, r3, #32
   100c4:	e6e7      	b.n	fe96 <_svfprintf_r+0x1546>
   100c6:	212d      	movs	r1, #45	; 0x2d
   100c8:	2300      	movs	r3, #0
   100ca:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   100ce:	9303      	str	r3, [sp, #12]
   100d0:	f7fe be22 	b.w	ed18 <_svfprintf_r+0x3c8>
   100d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   100d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   100d8:	4293      	cmp	r3, r2
   100da:	f2c0 80bd 	blt.w	10258 <_svfprintf_r+0x1908>
   100de:	07f0      	lsls	r0, r6, #31
   100e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   100e2:	f140 8132 	bpl.w	1034a <_svfprintf_r+0x19fa>
   100e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   100e8:	4413      	add	r3, r2
   100ea:	9305      	str	r3, [sp, #20]
   100ec:	0571      	lsls	r1, r6, #21
   100ee:	d503      	bpl.n	100f8 <_svfprintf_r+0x17a8>
   100f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   100f2:	2b00      	cmp	r3, #0
   100f4:	f300 8135 	bgt.w	10362 <_svfprintf_r+0x1a12>
   100f8:	9b05      	ldr	r3, [sp, #20]
   100fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   100fe:	9302      	str	r3, [sp, #8]
   10100:	2367      	movs	r3, #103	; 0x67
   10102:	930b      	str	r3, [sp, #44]	; 0x2c
   10104:	2300      	movs	r3, #0
   10106:	930f      	str	r3, [sp, #60]	; 0x3c
   10108:	930d      	str	r3, [sp, #52]	; 0x34
   1010a:	e727      	b.n	ff5c <_svfprintf_r+0x160c>
   1010c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1010e:	4283      	cmp	r3, r0
   10110:	f4bf aeb7 	bcs.w	fe82 <_svfprintf_r+0x1532>
   10114:	2130      	movs	r1, #48	; 0x30
   10116:	1c5a      	adds	r2, r3, #1
   10118:	9222      	str	r2, [sp, #136]	; 0x88
   1011a:	7019      	strb	r1, [r3, #0]
   1011c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1011e:	4298      	cmp	r0, r3
   10120:	d8f9      	bhi.n	10116 <_svfprintf_r+0x17c6>
   10122:	e6ae      	b.n	fe82 <_svfprintf_r+0x1532>
   10124:	07f3      	lsls	r3, r6, #31
   10126:	f100 80a7 	bmi.w	10278 <_svfprintf_r+0x1928>
   1012a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1012c:	e6a9      	b.n	fe82 <_svfprintf_r+0x1532>
   1012e:	aa24      	add	r2, sp, #144	; 0x90
   10130:	4658      	mov	r0, fp
   10132:	9105      	str	r1, [sp, #20]
   10134:	f003 fa98 	bl	13668 <__ssprint_r>
   10138:	2800      	cmp	r0, #0
   1013a:	f47f a86e 	bne.w	f21a <_svfprintf_r+0x8ca>
   1013e:	f896 c000 	ldrb.w	ip, [r6]
   10142:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10144:	9905      	ldr	r1, [sp, #20]
   10146:	a827      	add	r0, sp, #156	; 0x9c
   10148:	4465      	add	r5, ip
   1014a:	f7ff bbec 	b.w	f926 <_svfprintf_r+0xfd6>
   1014e:	ee1b 1a10 	vmov	r1, s22
   10152:	aa24      	add	r2, sp, #144	; 0x90
   10154:	4658      	mov	r0, fp
   10156:	f003 fa87 	bl	13668 <__ssprint_r>
   1015a:	2800      	cmp	r0, #0
   1015c:	f47f a85d 	bne.w	f21a <_svfprintf_r+0x8ca>
   10160:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10162:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10166:	f7ff b96b 	b.w	f440 <_svfprintf_r+0xaf0>
   1016a:	2378      	movs	r3, #120	; 0x78
   1016c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   10170:	2330      	movs	r3, #48	; 0x30
   10172:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   10176:	9b03      	ldr	r3, [sp, #12]
   10178:	2b63      	cmp	r3, #99	; 0x63
   1017a:	f048 0602 	orr.w	r6, r8, #2
   1017e:	f300 80a6 	bgt.w	102ce <_svfprintf_r+0x197e>
   10182:	2300      	movs	r3, #0
   10184:	9307      	str	r3, [sp, #28]
   10186:	ac37      	add	r4, sp, #220	; 0xdc
   10188:	ee18 3a90 	vmov	r3, s17
   1018c:	2b00      	cmp	r3, #0
   1018e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   10192:	db2b      	blt.n	101ec <_svfprintf_r+0x189c>
   10194:	eeb0 ab48 	vmov.f64	d10, d8
   10198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1019a:	f023 0520 	bic.w	r5, r3, #32
   1019e:	2300      	movs	r3, #0
   101a0:	9309      	str	r3, [sp, #36]	; 0x24
   101a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   101a4:	2b61      	cmp	r3, #97	; 0x61
   101a6:	f47f aaad 	bne.w	f704 <_svfprintf_r+0xdb4>
   101aa:	eeb0 0b4a 	vmov.f64	d0, d10
   101ae:	a81b      	add	r0, sp, #108	; 0x6c
   101b0:	f001 ff3a 	bl	12028 <frexp>
   101b4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   101b8:	ee20 0b07 	vmul.f64	d0, d0, d7
   101bc:	eeb5 0b40 	vcmp.f64	d0, #0.0
   101c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101c4:	d101      	bne.n	101ca <_svfprintf_r+0x187a>
   101c6:	2301      	movs	r3, #1
   101c8:	931b      	str	r3, [sp, #108]	; 0x6c
   101ca:	4846      	ldr	r0, [pc, #280]	; (102e4 <_svfprintf_r+0x1994>)
   101cc:	e721      	b.n	10012 <_svfprintf_r+0x16c2>
   101ce:	ee1b 1a10 	vmov	r1, s22
   101d2:	aa24      	add	r2, sp, #144	; 0x90
   101d4:	4658      	mov	r0, fp
   101d6:	f003 fa47 	bl	13668 <__ssprint_r>
   101da:	2800      	cmp	r0, #0
   101dc:	f47f a81d 	bne.w	f21a <_svfprintf_r+0x8ca>
   101e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   101e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   101e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   101e8:	f7ff b94e 	b.w	f488 <_svfprintf_r+0xb38>
   101ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   101ee:	f023 0520 	bic.w	r5, r3, #32
   101f2:	232d      	movs	r3, #45	; 0x2d
   101f4:	9309      	str	r3, [sp, #36]	; 0x24
   101f6:	eeb1 ab48 	vneg.f64	d10, d8
   101fa:	e7d2      	b.n	101a2 <_svfprintf_r+0x1852>
   101fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   101fe:	920c      	str	r2, [sp, #48]	; 0x30
   10200:	2a00      	cmp	r2, #0
   10202:	f006 0301 	and.w	r3, r6, #1
   10206:	f340 810d 	ble.w	10424 <_svfprintf_r+0x1ad4>
   1020a:	9903      	ldr	r1, [sp, #12]
   1020c:	430b      	orrs	r3, r1
   1020e:	f040 80cf 	bne.w	103b0 <_svfprintf_r+0x1a60>
   10212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10214:	9305      	str	r3, [sp, #20]
   10216:	2366      	movs	r3, #102	; 0x66
   10218:	930b      	str	r3, [sp, #44]	; 0x2c
   1021a:	0572      	lsls	r2, r6, #21
   1021c:	f100 80a3 	bmi.w	10366 <_svfprintf_r+0x1a16>
   10220:	9b05      	ldr	r3, [sp, #20]
   10222:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10226:	9302      	str	r3, [sp, #8]
   10228:	e76c      	b.n	10104 <_svfprintf_r+0x17b4>
   1022a:	ee1b 1a10 	vmov	r1, s22
   1022e:	aa24      	add	r2, sp, #144	; 0x90
   10230:	4658      	mov	r0, fp
   10232:	f003 fa19 	bl	13668 <__ssprint_r>
   10236:	2800      	cmp	r0, #0
   10238:	f47e afef 	bne.w	f21a <_svfprintf_r+0x8ca>
   1023c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1023e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10240:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10242:	1b1c      	subs	r4, r3, r4
   10244:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   10248:	f7ff b936 	b.w	f4b8 <_svfprintf_r+0xb68>
   1024c:	2358      	movs	r3, #88	; 0x58
   1024e:	e78d      	b.n	1016c <_svfprintf_r+0x181c>
   10250:	2200      	movs	r2, #0
   10252:	9203      	str	r2, [sp, #12]
   10254:	f7fe bbda 	b.w	ea0c <_svfprintf_r+0xbc>
   10258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1025a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1025c:	189a      	adds	r2, r3, r2
   1025e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10260:	9205      	str	r2, [sp, #20]
   10262:	2b00      	cmp	r3, #0
   10264:	f340 80ab 	ble.w	103be <_svfprintf_r+0x1a6e>
   10268:	2367      	movs	r3, #103	; 0x67
   1026a:	930b      	str	r3, [sp, #44]	; 0x2c
   1026c:	e7d5      	b.n	1021a <_svfprintf_r+0x18ca>
   1026e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10270:	320f      	adds	r2, #15
   10272:	b2d2      	uxtb	r2, r2
   10274:	2101      	movs	r1, #1
   10276:	e618      	b.n	feaa <_svfprintf_r+0x155a>
   10278:	18a0      	adds	r0, r4, r2
   1027a:	e5fb      	b.n	fe74 <_svfprintf_r+0x1524>
   1027c:	2900      	cmp	r1, #0
   1027e:	f040 80a8 	bne.w	103d2 <_svfprintf_r+0x1a82>
   10282:	2230      	movs	r2, #48	; 0x30
   10284:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   10288:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   1028c:	3330      	adds	r3, #48	; 0x30
   1028e:	f802 3b01 	strb.w	r3, [r2], #1
   10292:	ab1e      	add	r3, sp, #120	; 0x78
   10294:	1ad3      	subs	r3, r2, r3
   10296:	9314      	str	r3, [sp, #80]	; 0x50
   10298:	e649      	b.n	ff2e <_svfprintf_r+0x15de>
   1029a:	3301      	adds	r3, #1
   1029c:	4912      	ldr	r1, [pc, #72]	; (102e8 <_svfprintf_r+0x1998>)
   1029e:	f8ca 5004 	str.w	r5, [sl, #4]
   102a2:	442a      	add	r2, r5
   102a4:	2b07      	cmp	r3, #7
   102a6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   102aa:	f8ca 1000 	str.w	r1, [sl]
   102ae:	f77f ac33 	ble.w	fb18 <_svfprintf_r+0x11c8>
   102b2:	ee1b 1a10 	vmov	r1, s22
   102b6:	aa24      	add	r2, sp, #144	; 0x90
   102b8:	4658      	mov	r0, fp
   102ba:	f003 f9d5 	bl	13668 <__ssprint_r>
   102be:	2800      	cmp	r0, #0
   102c0:	f47e afab 	bne.w	f21a <_svfprintf_r+0x8ca>
   102c4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   102c8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   102cc:	e426      	b.n	fb1c <_svfprintf_r+0x11cc>
   102ce:	1c59      	adds	r1, r3, #1
   102d0:	4658      	mov	r0, fp
   102d2:	f7fa fd4b 	bl	ad6c <_malloc_r>
   102d6:	4604      	mov	r4, r0
   102d8:	b350      	cbz	r0, 10330 <_svfprintf_r+0x19e0>
   102da:	9007      	str	r0, [sp, #28]
   102dc:	e754      	b.n	10188 <_svfprintf_r+0x1838>
   102de:	bf00      	nop
   102e0:	20000f08 	.word	0x20000f08
   102e4:	20000ef4 	.word	0x20000ef4
   102e8:	20008770 	.word	0x20008770
   102ec:	66666667 	.word	0x66666667
   102f0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   102f4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   102f8:	f890 c00f 	ldrb.w	ip, [r0, #15]
   102fc:	4561      	cmp	r1, ip
   102fe:	4613      	mov	r3, r2
   10300:	d10a      	bne.n	10318 <_svfprintf_r+0x19c8>
   10302:	f04f 0e30 	mov.w	lr, #48	; 0x30
   10306:	f803 ec01 	strb.w	lr, [r3, #-1]
   1030a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1030c:	1e59      	subs	r1, r3, #1
   1030e:	9122      	str	r1, [sp, #136]	; 0x88
   10310:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   10314:	458c      	cmp	ip, r1
   10316:	d0f6      	beq.n	10306 <_svfprintf_r+0x19b6>
   10318:	2939      	cmp	r1, #57	; 0x39
   1031a:	bf16      	itet	ne
   1031c:	3101      	addne	r1, #1
   1031e:	7a81      	ldrbeq	r1, [r0, #10]
   10320:	b2c9      	uxtbne	r1, r1
   10322:	f803 1c01 	strb.w	r1, [r3, #-1]
   10326:	e6ae      	b.n	10086 <_svfprintf_r+0x1736>
   10328:	2300      	movs	r3, #0
   1032a:	4690      	mov	r8, r2
   1032c:	9307      	str	r3, [sp, #28]
   1032e:	e760      	b.n	101f2 <_svfprintf_r+0x18a2>
   10330:	ee1b 2a10 	vmov	r2, s22
   10334:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1033c:	8193      	strh	r3, [r2, #12]
   1033e:	f7fe bc16 	b.w	eb6e <_svfprintf_r+0x21e>
   10342:	07f5      	lsls	r5, r6, #31
   10344:	f57f adfe 	bpl.w	ff44 <_svfprintf_r+0x15f4>
   10348:	e5f8      	b.n	ff3c <_svfprintf_r+0x15ec>
   1034a:	9305      	str	r3, [sp, #20]
   1034c:	e6ce      	b.n	100ec <_svfprintf_r+0x179c>
   1034e:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10356:	f43f ad8b 	beq.w	fe70 <_svfprintf_r+0x1520>
   1035a:	f1c2 0201 	rsb	r2, r2, #1
   1035e:	921b      	str	r2, [sp, #108]	; 0x6c
   10360:	e587      	b.n	fe72 <_svfprintf_r+0x1522>
   10362:	2367      	movs	r3, #103	; 0x67
   10364:	930b      	str	r3, [sp, #44]	; 0x2c
   10366:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10368:	780b      	ldrb	r3, [r1, #0]
   1036a:	2bff      	cmp	r3, #255	; 0xff
   1036c:	d079      	beq.n	10462 <_svfprintf_r+0x1b12>
   1036e:	2500      	movs	r5, #0
   10370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10372:	4628      	mov	r0, r5
   10374:	e003      	b.n	1037e <_svfprintf_r+0x1a2e>
   10376:	3001      	adds	r0, #1
   10378:	3101      	adds	r1, #1
   1037a:	2bff      	cmp	r3, #255	; 0xff
   1037c:	d008      	beq.n	10390 <_svfprintf_r+0x1a40>
   1037e:	4293      	cmp	r3, r2
   10380:	da06      	bge.n	10390 <_svfprintf_r+0x1a40>
   10382:	1ad2      	subs	r2, r2, r3
   10384:	784b      	ldrb	r3, [r1, #1]
   10386:	2b00      	cmp	r3, #0
   10388:	d1f5      	bne.n	10376 <_svfprintf_r+0x1a26>
   1038a:	780b      	ldrb	r3, [r1, #0]
   1038c:	3501      	adds	r5, #1
   1038e:	e7f4      	b.n	1037a <_svfprintf_r+0x1a2a>
   10390:	920c      	str	r2, [sp, #48]	; 0x30
   10392:	9113      	str	r1, [sp, #76]	; 0x4c
   10394:	900d      	str	r0, [sp, #52]	; 0x34
   10396:	950f      	str	r5, [sp, #60]	; 0x3c
   10398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1039a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1039c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1039e:	4413      	add	r3, r2
   103a0:	9a05      	ldr	r2, [sp, #20]
   103a2:	fb01 2303 	mla	r3, r1, r3, r2
   103a6:	9305      	str	r3, [sp, #20]
   103a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   103ac:	9302      	str	r3, [sp, #8]
   103ae:	e5d5      	b.n	ff5c <_svfprintf_r+0x160c>
   103b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   103b2:	18d3      	adds	r3, r2, r3
   103b4:	4419      	add	r1, r3
   103b6:	2366      	movs	r3, #102	; 0x66
   103b8:	9105      	str	r1, [sp, #20]
   103ba:	930b      	str	r3, [sp, #44]	; 0x2c
   103bc:	e72d      	b.n	1021a <_svfprintf_r+0x18ca>
   103be:	f1c3 0301 	rsb	r3, r3, #1
   103c2:	441a      	add	r2, r3
   103c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   103c8:	9302      	str	r3, [sp, #8]
   103ca:	2367      	movs	r3, #103	; 0x67
   103cc:	9205      	str	r2, [sp, #20]
   103ce:	930b      	str	r3, [sp, #44]	; 0x2c
   103d0:	e698      	b.n	10104 <_svfprintf_r+0x17b4>
   103d2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   103d6:	e759      	b.n	1028c <_svfprintf_r+0x193c>
   103d8:	9b03      	ldr	r3, [sp, #12]
   103da:	f8dd 9008 	ldr.w	r9, [sp, #8]
   103de:	f8dd 801c 	ldr.w	r8, [sp, #28]
   103e2:	9305      	str	r3, [sp, #20]
   103e4:	e4b4      	b.n	fd50 <_svfprintf_r+0x1400>
   103e6:	ee18 3a90 	vmov	r3, s17
   103ea:	2b00      	cmp	r3, #0
   103ec:	bfb4      	ite	lt
   103ee:	212d      	movlt	r1, #45	; 0x2d
   103f0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   103f4:	4c25      	ldr	r4, [pc, #148]	; (1048c <_svfprintf_r+0x1b3c>)
   103f6:	4b26      	ldr	r3, [pc, #152]	; (10490 <_svfprintf_r+0x1b40>)
   103f8:	bfb8      	it	lt
   103fa:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   103fe:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   10402:	f7fe bc79 	b.w	ecf8 <_svfprintf_r+0x3a8>
   10406:	9b03      	ldr	r3, [sp, #12]
   10408:	9302      	str	r3, [sp, #8]
   1040a:	9305      	str	r3, [sp, #20]
   1040c:	2373      	movs	r3, #115	; 0x73
   1040e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   10412:	9003      	str	r0, [sp, #12]
   10414:	900f      	str	r0, [sp, #60]	; 0x3c
   10416:	900d      	str	r0, [sp, #52]	; 0x34
   10418:	930b      	str	r3, [sp, #44]	; 0x2c
   1041a:	f7fe bc7a 	b.w	ed12 <_svfprintf_r+0x3c2>
   1041e:	2302      	movs	r3, #2
   10420:	9314      	str	r3, [sp, #80]	; 0x50
   10422:	e584      	b.n	ff2e <_svfprintf_r+0x15de>
   10424:	9a03      	ldr	r2, [sp, #12]
   10426:	4313      	orrs	r3, r2
   10428:	d105      	bne.n	10436 <_svfprintf_r+0x1ae6>
   1042a:	2301      	movs	r3, #1
   1042c:	2266      	movs	r2, #102	; 0x66
   1042e:	9302      	str	r3, [sp, #8]
   10430:	920b      	str	r2, [sp, #44]	; 0x2c
   10432:	9305      	str	r3, [sp, #20]
   10434:	e666      	b.n	10104 <_svfprintf_r+0x17b4>
   10436:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10438:	3301      	adds	r3, #1
   1043a:	441a      	add	r2, r3
   1043c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10440:	9302      	str	r3, [sp, #8]
   10442:	2366      	movs	r3, #102	; 0x66
   10444:	9205      	str	r2, [sp, #20]
   10446:	930b      	str	r3, [sp, #44]	; 0x2c
   10448:	e65c      	b.n	10104 <_svfprintf_r+0x17b4>
   1044a:	9a08      	ldr	r2, [sp, #32]
   1044c:	f899 3001 	ldrb.w	r3, [r9, #1]
   10450:	4689      	mov	r9, r1
   10452:	f852 1b04 	ldr.w	r1, [r2], #4
   10456:	9208      	str	r2, [sp, #32]
   10458:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   1045c:	9103      	str	r1, [sp, #12]
   1045e:	f7fe bad3 	b.w	ea08 <_svfprintf_r+0xb8>
   10462:	2300      	movs	r3, #0
   10464:	930f      	str	r3, [sp, #60]	; 0x3c
   10466:	930d      	str	r3, [sp, #52]	; 0x34
   10468:	e796      	b.n	10398 <_svfprintf_r+0x1a48>
   1046a:	230c      	movs	r3, #12
   1046c:	f8cb 3000 	str.w	r3, [fp]
   10470:	f04f 33ff 	mov.w	r3, #4294967295
   10474:	9304      	str	r3, [sp, #16]
   10476:	f7fe bb81 	b.w	eb7c <_svfprintf_r+0x22c>
   1047a:	ee1b 2a10 	vmov	r2, s22
   1047e:	8993      	ldrh	r3, [r2, #12]
   10480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10484:	8193      	strh	r3, [r2, #12]
   10486:	f7fe bec8 	b.w	f21a <_svfprintf_r+0x8ca>
   1048a:	bf00      	nop
   1048c:	20000ef0 	.word	0x20000ef0
   10490:	20000820 	.word	0x20000820

00010494 <__ssvfscanf_r>:
   10494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10498:	ed2d 8b02 	vpush	{d8}
   1049c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
   104a0:	468b      	mov	fp, r1
   104a2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   104a6:	af02      	add	r7, sp, #8
   104a8:	048c      	lsls	r4, r1, #18
   104aa:	4681      	mov	r9, r0
   104ac:	64fa      	str	r2, [r7, #76]	; 0x4c
   104ae:	633b      	str	r3, [r7, #48]	; 0x30
   104b0:	d409      	bmi.n	104c6 <__ssvfscanf_r+0x32>
   104b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   104b6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   104ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   104be:	f8ab 100c 	strh.w	r1, [fp, #12]
   104c2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   104c6:	2300      	movs	r3, #0
   104c8:	461c      	mov	r4, r3
   104ca:	2208      	movs	r2, #8
   104cc:	4619      	mov	r1, r3
   104ce:	f107 0058 	add.w	r0, r7, #88	; 0x58
   104d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   104d4:	46a2      	mov	sl, r4
   104d6:	f7fc fb71 	bl	cbbc <memset>
   104da:	643c      	str	r4, [r7, #64]	; 0x40
   104dc:	627c      	str	r4, [r7, #36]	; 0x24
   104de:	63bc      	str	r4, [r7, #56]	; 0x38
   104e0:	647c      	str	r4, [r7, #68]	; 0x44
   104e2:	4b83      	ldr	r3, [pc, #524]	; (106f0 <__ssvfscanf_r+0x25c>)
   104e4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   104e8:	f7fc fc32 	bl	cd50 <__locale_mb_cur_max>
   104ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
   104f0:	4603      	mov	r3, r0
   104f2:	9200      	str	r2, [sp, #0]
   104f4:	f107 0154 	add.w	r1, r7, #84	; 0x54
   104f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   104fa:	4648      	mov	r0, r9
   104fc:	47a0      	blx	r4
   104fe:	1e05      	subs	r5, r0, #0
   10500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10502:	db33      	blt.n	1056c <__ssvfscanf_r+0xd8>
   10504:	442b      	add	r3, r5
   10506:	64fb      	str	r3, [r7, #76]	; 0x4c
   10508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1050a:	462e      	mov	r6, r5
   1050c:	2b00      	cmp	r3, #0
   1050e:	f000 80b6 	beq.w	1067e <__ssvfscanf_r+0x1ea>
   10512:	2d01      	cmp	r5, #1
   10514:	d038      	beq.n	10588 <__ssvfscanf_r+0xf4>
   10516:	2b25      	cmp	r3, #37	; 0x25
   10518:	d040      	beq.n	1059c <__ssvfscanf_r+0x108>
   1051a:	2d00      	cmp	r5, #0
   1051c:	d0e1      	beq.n	104e2 <__ssvfscanf_r+0x4e>
   1051e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10520:	1b9e      	subs	r6, r3, r6
   10522:	f8db 3004 	ldr.w	r3, [fp, #4]
   10526:	1e74      	subs	r4, r6, #1
   10528:	2b00      	cmp	r3, #0
   1052a:	f340 8098 	ble.w	1065e <__ssvfscanf_r+0x1ca>
   1052e:	f8db 1000 	ldr.w	r1, [fp]
   10532:	f894 c001 	ldrb.w	ip, [r4, #1]
   10536:	f891 e000 	ldrb.w	lr, [r1]
   1053a:	1ca3      	adds	r3, r4, #2
   1053c:	eb0a 0003 	add.w	r0, sl, r3
   10540:	45e6      	cmp	lr, ip
   10542:	f101 0101 	add.w	r1, r1, #1
   10546:	eba3 0206 	sub.w	r2, r3, r6
   1054a:	f104 0401 	add.w	r4, r4, #1
   1054e:	eba0 0006 	sub.w	r0, r0, r6
   10552:	f040 8094 	bne.w	1067e <__ssvfscanf_r+0x1ea>
   10556:	f8db 3004 	ldr.w	r3, [fp, #4]
   1055a:	f8cb 1000 	str.w	r1, [fp]
   1055e:	3b01      	subs	r3, #1
   10560:	42aa      	cmp	r2, r5
   10562:	f8cb 3004 	str.w	r3, [fp, #4]
   10566:	dbdf      	blt.n	10528 <__ssvfscanf_r+0x94>
   10568:	4682      	mov	sl, r0
   1056a:	e7ba      	b.n	104e2 <__ssvfscanf_r+0x4e>
   1056c:	3301      	adds	r3, #1
   1056e:	64fb      	str	r3, [r7, #76]	; 0x4c
   10570:	2208      	movs	r2, #8
   10572:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   10576:	2100      	movs	r1, #0
   10578:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1057c:	657b      	str	r3, [r7, #84]	; 0x54
   1057e:	f7fc fb1d 	bl	cbbc <memset>
   10582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   10584:	2b00      	cmp	r3, #0
   10586:	d07a      	beq.n	1067e <__ssvfscanf_r+0x1ea>
   10588:	4e5a      	ldr	r6, [pc, #360]	; (106f4 <__ssvfscanf_r+0x260>)
   1058a:	5cf2      	ldrb	r2, [r6, r3]
   1058c:	0710      	lsls	r0, r2, #28
   1058e:	f100 851c 	bmi.w	10fca <__ssvfscanf_r+0xb36>
   10592:	2b25      	cmp	r3, #37	; 0x25
   10594:	f040 8086 	bne.w	106a4 <__ssvfscanf_r+0x210>
   10598:	2501      	movs	r5, #1
   1059a:	462e      	mov	r6, r5
   1059c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1059e:	2400      	movs	r4, #0
   105a0:	7802      	ldrb	r2, [r0, #0]
   105a2:	46a0      	mov	r8, r4
   105a4:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   105a8:	1c41      	adds	r1, r0, #1
   105aa:	2b55      	cmp	r3, #85	; 0x55
   105ac:	d867      	bhi.n	1067e <__ssvfscanf_r+0x1ea>
   105ae:	e8df f013 	tbh	[pc, r3, lsl #1]
   105b2:	070a      	.short	0x070a
   105b4:	00660066 	.word	0x00660066
   105b8:	00660066 	.word	0x00660066
   105bc:	00660701 	.word	0x00660701
   105c0:	00660066 	.word	0x00660066
   105c4:	00660066 	.word	0x00660066
   105c8:	060c060c 	.word	0x060c060c
   105cc:	060c060c 	.word	0x060c060c
   105d0:	060c060c 	.word	0x060c060c
   105d4:	060c060c 	.word	0x060c060c
   105d8:	060c060c 	.word	0x060c060c
   105dc:	00660066 	.word	0x00660066
   105e0:	00660066 	.word	0x00660066
   105e4:	00660066 	.word	0x00660066
   105e8:	06180066 	.word	0x06180066
   105ec:	048e0066 	.word	0x048e0066
   105f0:	061804c9 	.word	0x061804c9
   105f4:	06180618 	.word	0x06180618
   105f8:	00660066 	.word	0x00660066
   105fc:	00660066 	.word	0x00660066
   10600:	00660082 	.word	0x00660082
   10604:	04bf0066 	.word	0x04bf0066
   10608:	00660066 	.word	0x00660066
   1060c:	00890066 	.word	0x00890066
   10610:	00660066 	.word	0x00660066
   10614:	00660066 	.word	0x00660066
   10618:	0066066b 	.word	0x0066066b
   1061c:	06dd0066 	.word	0x06dd0066
   10620:	00660066 	.word	0x00660066
   10624:	00660066 	.word	0x00660066
   10628:	06180066 	.word	0x06180066
   1062c:	04900066 	.word	0x04900066
   10630:	061804cb 	.word	0x061804cb
   10634:	06180618 	.word	0x06180618
   10638:	06d206be 	.word	0x06d206be
   1063c:	00660082 	.word	0x00660082
   10640:	06f306e7 	.word	0x06f306e7
   10644:	04c106ac 	.word	0x04c106ac
   10648:	006606da 	.word	0x006606da
   1064c:	008b0066 	.word	0x008b0066
   10650:	06ca007d 	.word	0x06ca007d
   10654:	00660066 	.word	0x00660066
   10658:	0066066b 	.word	0x0066066b
   1065c:	007d      	.short	0x007d
   1065e:	4659      	mov	r1, fp
   10660:	4648      	mov	r0, r9
   10662:	f003 f8c1 	bl	137e8 <__ssrefill_r>
   10666:	2800      	cmp	r0, #0
   10668:	f43f af61 	beq.w	1052e <__ssvfscanf_r+0x9a>
   1066c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1066e:	2b00      	cmp	r3, #0
   10670:	f001 8052 	beq.w	11718 <__ssvfscanf_r+0x1284>
   10674:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10678:	065a      	lsls	r2, r3, #25
   1067a:	f101 804d 	bmi.w	11718 <__ssvfscanf_r+0x1284>
   1067e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10680:	b143      	cbz	r3, 10694 <__ssvfscanf_r+0x200>
   10682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10684:	f8d3 8000 	ldr.w	r8, [r3]
   10688:	f1b8 0f00 	cmp.w	r8, #0
   1068c:	d002      	beq.n	10694 <__ssvfscanf_r+0x200>
   1068e:	4640      	mov	r0, r8
   10690:	f7fa fb64 	bl	ad5c <free>
   10694:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10696:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
   1069a:	46bd      	mov	sp, r7
   1069c:	ecbd 8b02 	vpop	{d8}
   106a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   106a6:	2501      	movs	r5, #1
   106a8:	1e5e      	subs	r6, r3, #1
   106aa:	e73a      	b.n	10522 <__ssvfscanf_r+0x8e>
   106ac:	0723      	lsls	r3, r4, #28
   106ae:	d1e6      	bne.n	1067e <__ssvfscanf_r+0x1ea>
   106b0:	7842      	ldrb	r2, [r0, #1]
   106b2:	4608      	mov	r0, r1
   106b4:	e776      	b.n	105a4 <__ssvfscanf_r+0x110>
   106b6:	0722      	lsls	r2, r4, #28
   106b8:	d1e1      	bne.n	1067e <__ssvfscanf_r+0x1ea>
   106ba:	7842      	ldrb	r2, [r0, #1]
   106bc:	f044 0402 	orr.w	r4, r4, #2
   106c0:	4608      	mov	r0, r1
   106c2:	e76f      	b.n	105a4 <__ssvfscanf_r+0x110>
   106c4:	f044 0401 	orr.w	r4, r4, #1
   106c8:	64f9      	str	r1, [r7, #76]	; 0x4c
   106ca:	2502      	movs	r5, #2
   106cc:	f8db 3004 	ldr.w	r3, [fp, #4]
   106d0:	2b00      	cmp	r3, #0
   106d2:	f340 8408 	ble.w	10ee6 <__ssvfscanf_r+0xa52>
   106d6:	0660      	lsls	r0, r4, #25
   106d8:	f140 840f 	bpl.w	10efa <__ssvfscanf_r+0xa66>
   106dc:	1e6b      	subs	r3, r5, #1
   106de:	2b03      	cmp	r3, #3
   106e0:	f201 80eb 	bhi.w	118ba <__ssvfscanf_r+0x1426>
   106e4:	e8df f013 	tbh	[pc, r3, lsl #1]
   106e8:	01f1027b 	.word	0x01f1027b
   106ec:	0008014b 	.word	0x0008014b
   106f0:	200088ec 	.word	0x200088ec
   106f4:	20000d59 	.word	0x20000d59
   106f8:	4648      	mov	r0, r9
   106fa:	f001 fc8f 	bl	1201c <_localeconv_r>
   106fe:	6803      	ldr	r3, [r0, #0]
   10700:	623b      	str	r3, [r7, #32]
   10702:	f108 33ff 	add.w	r3, r8, #4294967295
   10706:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   1070a:	f240 855a 	bls.w	111c2 <__ssvfscanf_r+0xd2e>
   1070e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
   10712:	eb08 0305 	add.w	r3, r8, r5
   10716:	613b      	str	r3, [r7, #16]
   10718:	f240 185d 	movw	r8, #349	; 0x15d
   1071c:	2600      	movs	r6, #0
   1071e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   10722:	ee08 9a10 	vmov	s16, r9
   10726:	e9c7 6605 	strd	r6, r6, [r7, #20]
   1072a:	63fe      	str	r6, [r7, #60]	; 0x3c
   1072c:	637e      	str	r6, [r7, #52]	; 0x34
   1072e:	61fe      	str	r6, [r7, #28]
   10730:	64be      	str	r6, [r7, #72]	; 0x48
   10732:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   10736:	62bb      	str	r3, [r7, #40]	; 0x28
   10738:	461d      	mov	r5, r3
   1073a:	4646      	mov	r6, r8
   1073c:	f8db 1000 	ldr.w	r1, [fp]
   10740:	780a      	ldrb	r2, [r1, #0]
   10742:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   10746:	2b4e      	cmp	r3, #78	; 0x4e
   10748:	d850      	bhi.n	107ec <__ssvfscanf_r+0x358>
   1074a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1074e:	037e      	.short	0x037e
   10750:	037e004f 	.word	0x037e004f
   10754:	004f004f 	.word	0x004f004f
   10758:	00a600a3 	.word	0x00a600a3
   1075c:	00a600a6 	.word	0x00a600a6
   10760:	00a600a6 	.word	0x00a600a6
   10764:	00a600a6 	.word	0x00a600a6
   10768:	00a600a6 	.word	0x00a600a6
   1076c:	004f004f 	.word	0x004f004f
   10770:	004f004f 	.word	0x004f004f
   10774:	004f004f 	.word	0x004f004f
   10778:	0374004f 	.word	0x0374004f
   1077c:	030b030b 	.word	0x030b030b
   10780:	039e030b 	.word	0x039e030b
   10784:	004f0394 	.word	0x004f0394
   10788:	0384004f 	.word	0x0384004f
   1078c:	004f004f 	.word	0x004f004f
   10790:	004f004f 	.word	0x004f004f
   10794:	004f035d 	.word	0x004f035d
   10798:	004f033a 	.word	0x004f033a
   1079c:	004f004f 	.word	0x004f004f
   107a0:	004f0333 	.word	0x004f0333
   107a4:	004f004f 	.word	0x004f004f
   107a8:	036d031e 	.word	0x036d031e
   107ac:	004f004f 	.word	0x004f004f
   107b0:	004f004f 	.word	0x004f004f
   107b4:	004f004f 	.word	0x004f004f
   107b8:	0374004f 	.word	0x0374004f
   107bc:	030b030b 	.word	0x030b030b
   107c0:	039e030b 	.word	0x039e030b
   107c4:	004f0394 	.word	0x004f0394
   107c8:	0384004f 	.word	0x0384004f
   107cc:	004f004f 	.word	0x004f004f
   107d0:	004f004f 	.word	0x004f004f
   107d4:	004f035d 	.word	0x004f035d
   107d8:	004f033a 	.word	0x004f033a
   107dc:	004f004f 	.word	0x004f004f
   107e0:	004f0333 	.word	0x004f0333
   107e4:	004f004f 	.word	0x004f004f
   107e8:	036d031e 	.word	0x036d031e
   107ec:	05a0      	lsls	r0, r4, #22
   107ee:	d56f      	bpl.n	108d0 <__ssvfscanf_r+0x43c>
   107f0:	6a38      	ldr	r0, [r7, #32]
   107f2:	7803      	ldrb	r3, [r0, #0]
   107f4:	4293      	cmp	r3, r2
   107f6:	d16b      	bne.n	108d0 <__ssvfscanf_r+0x43c>
   107f8:	e9c7 4502 	strd	r4, r5, [r7, #8]
   107fc:	607e      	str	r6, [r7, #4]
   107fe:	4681      	mov	r9, r0
   10800:	ee18 6a10 	vmov	r6, s16
   10804:	f04f 0800 	mov.w	r8, #0
   10808:	465c      	mov	r4, fp
   1080a:	e007      	b.n	1081c <__ssvfscanf_r+0x388>
   1080c:	6021      	str	r1, [r4, #0]
   1080e:	f891 e000 	ldrb.w	lr, [r1]
   10812:	f899 0000 	ldrb.w	r0, [r9]
   10816:	4586      	cmp	lr, r0
   10818:	d11c      	bne.n	10854 <__ssvfscanf_r+0x3c0>
   1081a:	46da      	mov	sl, fp
   1081c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   10820:	4645      	mov	r5, r8
   10822:	f10a 0b01 	add.w	fp, sl, #1
   10826:	3101      	adds	r1, #1
   10828:	f108 0801 	add.w	r8, r8, #1
   1082c:	2800      	cmp	r0, #0
   1082e:	f000 8664 	beq.w	114fa <__ssvfscanf_r+0x1066>
   10832:	6860      	ldr	r0, [r4, #4]
   10834:	3801      	subs	r0, #1
   10836:	2800      	cmp	r0, #0
   10838:	6060      	str	r0, [r4, #4]
   1083a:	dce7      	bgt.n	1080c <__ssvfscanf_r+0x378>
   1083c:	4621      	mov	r1, r4
   1083e:	4630      	mov	r0, r6
   10840:	f002 ffd2 	bl	137e8 <__ssrefill_r>
   10844:	b930      	cbnz	r0, 10854 <__ssvfscanf_r+0x3c0>
   10846:	6821      	ldr	r1, [r4, #0]
   10848:	f899 0000 	ldrb.w	r0, [r9]
   1084c:	f891 e000 	ldrb.w	lr, [r1]
   10850:	4586      	cmp	lr, r0
   10852:	d0e2      	beq.n	1081a <__ssvfscanf_r+0x386>
   10854:	46a3      	mov	fp, r4
   10856:	6a3a      	ldr	r2, [r7, #32]
   10858:	68bc      	ldr	r4, [r7, #8]
   1085a:	613d      	str	r5, [r7, #16]
   1085c:	462b      	mov	r3, r5
   1085e:	46b1      	mov	r9, r6
   10860:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   10862:	68fd      	ldr	r5, [r7, #12]
   10864:	64bd      	str	r5, [r7, #72]	; 0x48
   10866:	3301      	adds	r3, #1
   10868:	465d      	mov	r5, fp
   1086a:	eb02 0803 	add.w	r8, r2, r3
   1086e:	46b3      	mov	fp, r6
   10870:	4626      	mov	r6, r4
   10872:	4614      	mov	r4, r2
   10874:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
   10878:	462a      	mov	r2, r5
   1087a:	4648      	mov	r0, r9
   1087c:	f002 ff74 	bl	13768 <_sungetc_r>
   10880:	4544      	cmp	r4, r8
   10882:	d1f7      	bne.n	10874 <__ssvfscanf_r+0x3e0>
   10884:	693b      	ldr	r3, [r7, #16]
   10886:	4634      	mov	r4, r6
   10888:	ebaa 0a03 	sub.w	sl, sl, r3
   1088c:	465e      	mov	r6, fp
   1088e:	46ab      	mov	fp, r5
   10890:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   10892:	e020      	b.n	108d6 <__ssvfscanf_r+0x442>
   10894:	05e0      	lsls	r0, r4, #23
   10896:	f100 8501 	bmi.w	1129c <__ssvfscanf_r+0xe08>
   1089a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1089c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1089e:	42d9      	cmn	r1, r3
   108a0:	d116      	bne.n	108d0 <__ssvfscanf_r+0x43c>
   108a2:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   108a6:	f805 2b01 	strb.w	r2, [r5], #1
   108aa:	3e01      	subs	r6, #1
   108ac:	f8db 3004 	ldr.w	r3, [fp, #4]
   108b0:	3b01      	subs	r3, #1
   108b2:	2b00      	cmp	r3, #0
   108b4:	f10a 0a01 	add.w	sl, sl, #1
   108b8:	f8cb 3004 	str.w	r3, [fp, #4]
   108bc:	f340 836f 	ble.w	10f9e <__ssvfscanf_r+0xb0a>
   108c0:	f8db 3000 	ldr.w	r3, [fp]
   108c4:	3301      	adds	r3, #1
   108c6:	f8cb 3000 	str.w	r3, [fp]
   108ca:	2e00      	cmp	r6, #0
   108cc:	f47f af36 	bne.w	1073c <__ssvfscanf_r+0x2a8>
   108d0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   108d2:	ee18 9a10 	vmov	r9, s16
   108d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   108d8:	2b00      	cmp	r3, #0
   108da:	f040 82dc 	bne.w	10e96 <__ssvfscanf_r+0xa02>
   108de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   108e0:	3b01      	subs	r3, #1
   108e2:	2b01      	cmp	r3, #1
   108e4:	f241 8016 	bls.w	11914 <__ssvfscanf_r+0x1480>
   108e8:	1e73      	subs	r3, r6, #1
   108ea:	2b06      	cmp	r3, #6
   108ec:	f240 8627 	bls.w	1153e <__ssvfscanf_r+0x10aa>
   108f0:	05e3      	lsls	r3, r4, #23
   108f2:	d51b      	bpl.n	1092c <__ssvfscanf_r+0x498>
   108f4:	0566      	lsls	r6, r4, #21
   108f6:	f101 80b5 	bmi.w	11a64 <__ssvfscanf_r+0x15d0>
   108fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   108fe:	2965      	cmp	r1, #101	; 0x65
   10900:	f105 33ff 	add.w	r3, r5, #4294967295
   10904:	f10a 36ff 	add.w	r6, sl, #4294967295
   10908:	d00a      	beq.n	10920 <__ssvfscanf_r+0x48c>
   1090a:	2945      	cmp	r1, #69	; 0x45
   1090c:	d008      	beq.n	10920 <__ssvfscanf_r+0x48c>
   1090e:	465a      	mov	r2, fp
   10910:	4648      	mov	r0, r9
   10912:	f002 ff29 	bl	13768 <_sungetc_r>
   10916:	f815 1c02 	ldrb.w	r1, [r5, #-2]
   1091a:	f1aa 0602 	sub.w	r6, sl, #2
   1091e:	1eab      	subs	r3, r5, #2
   10920:	465a      	mov	r2, fp
   10922:	4648      	mov	r0, r9
   10924:	46b2      	mov	sl, r6
   10926:	461d      	mov	r5, r3
   10928:	f002 ff1e 	bl	13768 <_sungetc_r>
   1092c:	f014 0210 	ands.w	r2, r4, #16
   10930:	f47f add7 	bne.w	104e2 <__ssvfscanf_r+0x4e>
   10934:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   10938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1093c:	702a      	strb	r2, [r5, #0]
   1093e:	f000 84d2 	beq.w	112e6 <__ssvfscanf_r+0xe52>
   10942:	69bb      	ldr	r3, [r7, #24]
   10944:	2b00      	cmp	r3, #0
   10946:	f040 872c 	bne.w	117a2 <__ssvfscanf_r+0x130e>
   1094a:	4648      	mov	r0, r9
   1094c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1094e:	2200      	movs	r2, #0
   10950:	f7fb fdfa 	bl	c548 <_strtod_r>
   10954:	07e0      	lsls	r0, r4, #31
   10956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10958:	f100 85c9 	bmi.w	114ee <__ssvfscanf_r+0x105a>
   1095c:	07a1      	lsls	r1, r4, #30
   1095e:	f100 85c6 	bmi.w	114ee <__ssvfscanf_r+0x105a>
   10962:	eeb4 0b40 	vcmp.f64	d0, d0
   10966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1096a:	f853 4b04 	ldr.w	r4, [r3], #4
   1096e:	f180 86f4 	bvs.w	1175a <__ssvfscanf_r+0x12c6>
   10972:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   10976:	633b      	str	r3, [r7, #48]	; 0x30
   10978:	ed84 0a00 	vstr	s0, [r4]
   1097c:	e3a2      	b.n	110c4 <__ssvfscanf_r+0xc30>
   1097e:	f108 33ff 	add.w	r3, r8, #4294967295
   10982:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   10986:	f240 83a2 	bls.w	110ce <__ssvfscanf_r+0xc3a>
   1098a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   1098e:	eb08 0302 	add.w	r3, r8, r2
   10992:	63fb      	str	r3, [r7, #60]	; 0x3c
   10994:	f240 185d 	movw	r8, #349	; 0x15d
   10998:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1099c:	2200      	movs	r2, #0
   1099e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   109a0:	62bb      	str	r3, [r7, #40]	; 0x28
   109a2:	4659      	mov	r1, fp
   109a4:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   109a8:	46d3      	mov	fp, sl
   109aa:	461d      	mov	r5, r3
   109ac:	4692      	mov	sl, r2
   109ae:	680a      	ldr	r2, [r1, #0]
   109b0:	7810      	ldrb	r0, [r2, #0]
   109b2:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   109b6:	2b4d      	cmp	r3, #77	; 0x4d
   109b8:	d860      	bhi.n	10a7c <__ssvfscanf_r+0x5e8>
   109ba:	e8df f013 	tbh	[pc, r3, lsl #1]
   109be:	0282      	.short	0x0282
   109c0:	0282005f 	.word	0x0282005f
   109c4:	005f005f 	.word	0x005f005f
   109c8:	01e002cd 	.word	0x01e002cd
   109cc:	01e001e0 	.word	0x01e001e0
   109d0:	01e001e0 	.word	0x01e001e0
   109d4:	01e001e0 	.word	0x01e001e0
   109d8:	026f026f 	.word	0x026f026f
   109dc:	005f005f 	.word	0x005f005f
   109e0:	005f005f 	.word	0x005f005f
   109e4:	005f005f 	.word	0x005f005f
   109e8:	004e005f 	.word	0x004e005f
   109ec:	004e004e 	.word	0x004e004e
   109f0:	004e004e 	.word	0x004e004e
   109f4:	005f004e 	.word	0x005f004e
   109f8:	005f005f 	.word	0x005f005f
   109fc:	005f005f 	.word	0x005f005f
   10a00:	005f005f 	.word	0x005f005f
   10a04:	005f005f 	.word	0x005f005f
   10a08:	005f005f 	.word	0x005f005f
   10a0c:	005f005f 	.word	0x005f005f
   10a10:	005f005f 	.word	0x005f005f
   10a14:	005f005f 	.word	0x005f005f
   10a18:	005f0276 	.word	0x005f0276
   10a1c:	005f005f 	.word	0x005f005f
   10a20:	005f005f 	.word	0x005f005f
   10a24:	005f005f 	.word	0x005f005f
   10a28:	004e005f 	.word	0x004e005f
   10a2c:	004e004e 	.word	0x004e004e
   10a30:	004e004e 	.word	0x004e004e
   10a34:	005f004e 	.word	0x005f004e
   10a38:	005f005f 	.word	0x005f005f
   10a3c:	005f005f 	.word	0x005f005f
   10a40:	005f005f 	.word	0x005f005f
   10a44:	005f005f 	.word	0x005f005f
   10a48:	005f005f 	.word	0x005f005f
   10a4c:	005f005f 	.word	0x005f005f
   10a50:	005f005f 	.word	0x005f005f
   10a54:	005f005f 	.word	0x005f005f
   10a58:	0276      	.short	0x0276
   10a5a:	2e0a      	cmp	r6, #10
   10a5c:	dd0e      	ble.n	10a7c <__ssvfscanf_r+0x5e8>
   10a5e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   10a62:	684b      	ldr	r3, [r1, #4]
   10a64:	f805 0b01 	strb.w	r0, [r5], #1
   10a68:	3b01      	subs	r3, #1
   10a6a:	2b00      	cmp	r3, #0
   10a6c:	604b      	str	r3, [r1, #4]
   10a6e:	f340 828d 	ble.w	10f8c <__ssvfscanf_r+0xaf8>
   10a72:	3201      	adds	r2, #1
   10a74:	600a      	str	r2, [r1, #0]
   10a76:	f1b8 0801 	subs.w	r8, r8, #1
   10a7a:	d198      	bne.n	109ae <__ssvfscanf_r+0x51a>
   10a7c:	05e0      	lsls	r0, r4, #23
   10a7e:	46d0      	mov	r8, sl
   10a80:	63be      	str	r6, [r7, #56]	; 0x38
   10a82:	46da      	mov	sl, fp
   10a84:	468b      	mov	fp, r1
   10a86:	d507      	bpl.n	10a98 <__ssvfscanf_r+0x604>
   10a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10a8a:	429d      	cmp	r5, r3
   10a8c:	f200 8422 	bhi.w	112d4 <__ssvfscanf_r+0xe40>
   10a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10a92:	429d      	cmp	r5, r3
   10a94:	f43f adf3 	beq.w	1067e <__ssvfscanf_r+0x1ea>
   10a98:	f014 0210 	ands.w	r2, r4, #16
   10a9c:	d110      	bne.n	10ac0 <__ssvfscanf_r+0x62c>
   10a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10aa2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   10aa4:	702a      	strb	r2, [r5, #0]
   10aa6:	4648      	mov	r0, r9
   10aa8:	47b0      	blx	r6
   10aaa:	06a1      	lsls	r1, r4, #26
   10aac:	f140 8408 	bpl.w	112c0 <__ssvfscanf_r+0xe2c>
   10ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10ab2:	f853 2b04 	ldr.w	r2, [r3], #4
   10ab6:	6010      	str	r0, [r2, #0]
   10ab8:	633b      	str	r3, [r7, #48]	; 0x30
   10aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10abc:	3301      	adds	r3, #1
   10abe:	647b      	str	r3, [r7, #68]	; 0x44
   10ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10ac2:	1aed      	subs	r5, r5, r3
   10ac4:	4445      	add	r5, r8
   10ac6:	44aa      	add	sl, r5
   10ac8:	e50b      	b.n	104e2 <__ssvfscanf_r+0x4e>
   10aca:	f1b8 0f00 	cmp.w	r8, #0
   10ace:	bf08      	it	eq
   10ad0:	f04f 38ff 	moveq.w	r8, #4294967295
   10ad4:	07e0      	lsls	r0, r4, #31
   10ad6:	f140 8295 	bpl.w	11004 <__ssvfscanf_r+0xb70>
   10ada:	f014 0310 	ands.w	r3, r4, #16
   10ade:	637b      	str	r3, [r7, #52]	; 0x34
   10ae0:	f040 8474 	bne.w	113cc <__ssvfscanf_r+0xf38>
   10ae4:	0621      	lsls	r1, r4, #24
   10ae6:	f140 8666 	bpl.w	117b6 <__ssvfscanf_r+0x1322>
   10aea:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10aec:	f854 3b04 	ldr.w	r3, [r4], #4
   10af0:	63fb      	str	r3, [r7, #60]	; 0x3c
   10af2:	2b00      	cmp	r3, #0
   10af4:	f43f adc3 	beq.w	1067e <__ssvfscanf_r+0x1ea>
   10af8:	2080      	movs	r0, #128	; 0x80
   10afa:	f7fa f927 	bl	ad4c <malloc>
   10afe:	64b8      	str	r0, [r7, #72]	; 0x48
   10b00:	2800      	cmp	r0, #0
   10b02:	f000 8778 	beq.w	119f6 <__ssvfscanf_r+0x1562>
   10b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10b0a:	601a      	str	r2, [r3, #0]
   10b0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10b0e:	88d5      	ldrh	r5, [r2, #6]
   10b10:	8893      	ldrh	r3, [r2, #4]
   10b12:	429d      	cmp	r5, r3
   10b14:	f080 8552 	bcs.w	115bc <__ssvfscanf_r+0x1128>
   10b18:	6810      	ldr	r0, [r2, #0]
   10b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b1c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   10b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10b22:	633c      	str	r4, [r7, #48]	; 0x30
   10b24:	3501      	adds	r5, #1
   10b26:	80dd      	strh	r5, [r3, #6]
   10b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   10b2c:	2320      	movs	r3, #32
   10b2e:	623b      	str	r3, [r7, #32]
   10b30:	f8db 3000 	ldr.w	r3, [fp]
   10b34:	4eb1      	ldr	r6, [pc, #708]	; (10dfc <__ssvfscanf_r+0x968>)
   10b36:	781b      	ldrb	r3, [r3, #0]
   10b38:	5cf3      	ldrb	r3, [r6, r3]
   10b3a:	f013 0308 	ands.w	r3, r3, #8
   10b3e:	f040 84bb 	bne.w	114b8 <__ssvfscanf_r+0x1024>
   10b42:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   10b44:	627e      	str	r6, [r7, #36]	; 0x24
   10b46:	461d      	mov	r5, r3
   10b48:	f7fc f902 	bl	cd50 <__locale_mb_cur_max>
   10b4c:	42a8      	cmp	r0, r5
   10b4e:	f43f ad8d 	beq.w	1066c <__ssvfscanf_r+0x1d8>
   10b52:	e9db 3200 	ldrd	r3, r2, [fp]
   10b56:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   10b5a:	f813 1b01 	ldrb.w	r1, [r3], #1
   10b5e:	5541      	strb	r1, [r0, r5]
   10b60:	3a01      	subs	r2, #1
   10b62:	2c03      	cmp	r4, #3
   10b64:	e9cb 3200 	strd	r3, r2, [fp]
   10b68:	f105 0501 	add.w	r5, r5, #1
   10b6c:	f107 0668 	add.w	r6, r7, #104	; 0x68
   10b70:	d102      	bne.n	10b78 <__ssvfscanf_r+0x6e4>
   10b72:	6833      	ldr	r3, [r6, #0]
   10b74:	2b04      	cmp	r3, #4
   10b76:	d004      	beq.n	10b82 <__ssvfscanf_r+0x6ee>
   10b78:	2208      	movs	r2, #8
   10b7a:	2100      	movs	r1, #0
   10b7c:	4630      	mov	r0, r6
   10b7e:	f7fc f81d 	bl	cbbc <memset>
   10b82:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   10b86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10b88:	9600      	str	r6, [sp, #0]
   10b8a:	462b      	mov	r3, r5
   10b8c:	4648      	mov	r0, r9
   10b8e:	f002 fc17 	bl	133c0 <_mbrtowc_r>
   10b92:	1c42      	adds	r2, r0, #1
   10b94:	4604      	mov	r4, r0
   10b96:	f43f ad69 	beq.w	1066c <__ssvfscanf_r+0x1d8>
   10b9a:	2800      	cmp	r0, #0
   10b9c:	f040 8478 	bne.w	11490 <__ssvfscanf_r+0xffc>
   10ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10ba2:	6018      	str	r0, [r3, #0]
   10ba4:	f002 fc68 	bl	13478 <iswspace>
   10ba8:	2800      	cmp	r0, #0
   10baa:	f040 865c 	bne.w	11866 <__ssvfscanf_r+0x13d2>
   10bae:	44aa      	add	sl, r5
   10bb0:	f108 38ff 	add.w	r8, r8, #4294967295
   10bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10bb6:	2b00      	cmp	r3, #0
   10bb8:	f040 8633 	bne.w	11822 <__ssvfscanf_r+0x138e>
   10bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10bbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10bc0:	3304      	adds	r3, #4
   10bc2:	64bb      	str	r3, [r7, #72]	; 0x48
   10bc4:	2a00      	cmp	r2, #0
   10bc6:	f000 862c 	beq.w	11822 <__ssvfscanf_r+0x138e>
   10bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10bcc:	1a9d      	subs	r5, r3, r2
   10bce:	6a3b      	ldr	r3, [r7, #32]
   10bd0:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   10bd4:	f240 8756 	bls.w	11a84 <__ssvfscanf_r+0x15f0>
   10bd8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   10bda:	f000 bc5c 	b.w	11496 <__ssvfscanf_r+0x1002>
   10bde:	f1b8 0f00 	cmp.w	r8, #0
   10be2:	bf08      	it	eq
   10be4:	f04f 38ff 	moveq.w	r8, #4294967295
   10be8:	07e0      	lsls	r0, r4, #31
   10bea:	f140 827b 	bpl.w	110e4 <__ssvfscanf_r+0xc50>
   10bee:	f014 0310 	ands.w	r3, r4, #16
   10bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   10bf4:	f040 83f3 	bne.w	113de <__ssvfscanf_r+0xf4a>
   10bf8:	0621      	lsls	r1, r4, #24
   10bfa:	f140 85ed 	bpl.w	117d8 <__ssvfscanf_r+0x1344>
   10bfe:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   10c00:	f856 3b04 	ldr.w	r3, [r6], #4
   10c04:	623b      	str	r3, [r7, #32]
   10c06:	2b00      	cmp	r3, #0
   10c08:	f43f ad39 	beq.w	1067e <__ssvfscanf_r+0x1ea>
   10c0c:	2080      	movs	r0, #128	; 0x80
   10c0e:	f7fa f89d 	bl	ad4c <malloc>
   10c12:	4604      	mov	r4, r0
   10c14:	2800      	cmp	r0, #0
   10c16:	f000 86ee 	beq.w	119f6 <__ssvfscanf_r+0x1562>
   10c1a:	6a3b      	ldr	r3, [r7, #32]
   10c1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10c1e:	6018      	str	r0, [r3, #0]
   10c20:	88d5      	ldrh	r5, [r2, #6]
   10c22:	8893      	ldrh	r3, [r2, #4]
   10c24:	429d      	cmp	r5, r3
   10c26:	f080 84dd 	bcs.w	115e4 <__ssvfscanf_r+0x1150>
   10c2a:	6810      	ldr	r0, [r2, #0]
   10c2c:	6a3b      	ldr	r3, [r7, #32]
   10c2e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   10c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10c34:	633e      	str	r6, [r7, #48]	; 0x30
   10c36:	3501      	adds	r5, #1
   10c38:	80dd      	strh	r5, [r3, #6]
   10c3a:	2320      	movs	r3, #32
   10c3c:	61fc      	str	r4, [r7, #28]
   10c3e:	61bb      	str	r3, [r7, #24]
   10c40:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   10c42:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   10c46:	2500      	movs	r5, #0
   10c48:	46c2      	mov	sl, r8
   10c4a:	46a0      	mov	r8, r4
   10c4c:	f7fc f880 	bl	cd50 <__locale_mb_cur_max>
   10c50:	42a8      	cmp	r0, r5
   10c52:	f43f ad0b 	beq.w	1066c <__ssvfscanf_r+0x1d8>
   10c56:	e9db 3200 	ldrd	r3, r2, [fp]
   10c5a:	f813 1b01 	ldrb.w	r1, [r3], #1
   10c5e:	3a01      	subs	r2, #1
   10c60:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   10c64:	e9cb 3200 	strd	r3, r2, [fp]
   10c68:	2e03      	cmp	r6, #3
   10c6a:	f105 0301 	add.w	r3, r5, #1
   10c6e:	5541      	strb	r1, [r0, r5]
   10c70:	64bb      	str	r3, [r7, #72]	; 0x48
   10c72:	f107 0460 	add.w	r4, r7, #96	; 0x60
   10c76:	d102      	bne.n	10c7e <__ssvfscanf_r+0x7ea>
   10c78:	6823      	ldr	r3, [r4, #0]
   10c7a:	2b04      	cmp	r3, #4
   10c7c:	d004      	beq.n	10c88 <__ssvfscanf_r+0x7f4>
   10c7e:	2208      	movs	r2, #8
   10c80:	2100      	movs	r1, #0
   10c82:	4620      	mov	r0, r4
   10c84:	f7fb ff9a 	bl	cbbc <memset>
   10c88:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   10c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10c8e:	9400      	str	r4, [sp, #0]
   10c90:	4641      	mov	r1, r8
   10c92:	4648      	mov	r0, r9
   10c94:	f002 fb94 	bl	133c0 <_mbrtowc_r>
   10c98:	1c42      	adds	r2, r0, #1
   10c9a:	4606      	mov	r6, r0
   10c9c:	f43f ace6 	beq.w	1066c <__ssvfscanf_r+0x1d8>
   10ca0:	2800      	cmp	r0, #0
   10ca2:	f040 82ca 	bne.w	1123a <__ssvfscanf_r+0xda6>
   10ca6:	f8c8 0000 	str.w	r0, [r8]
   10caa:	4605      	mov	r5, r0
   10cac:	f107 0368 	add.w	r3, r7, #104	; 0x68
   10cb0:	2208      	movs	r2, #8
   10cb2:	2100      	movs	r1, #0
   10cb4:	4618      	mov	r0, r3
   10cb6:	637b      	str	r3, [r7, #52]	; 0x34
   10cb8:	f7fb ff80 	bl	cbbc <memset>
   10cbc:	4950      	ldr	r1, [pc, #320]	; (10e00 <__ssvfscanf_r+0x96c>)
   10cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10cc0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
   10cc4:	462a      	mov	r2, r5
   10cc6:	4648      	mov	r0, r9
   10cc8:	460d      	mov	r5, r1
   10cca:	f107 0150 	add.w	r1, r7, #80	; 0x50
   10cce:	47a8      	blx	r5
   10cd0:	2801      	cmp	r0, #1
   10cd2:	f000 83d5 	beq.w	11480 <__ssvfscanf_r+0xfec>
   10cd6:	2200      	movs	r2, #0
   10cd8:	f107 0370 	add.w	r3, r7, #112	; 0x70
   10cdc:	5c9b      	ldrb	r3, [r3, r2]
   10cde:	2b00      	cmp	r3, #0
   10ce0:	f000 85a1 	beq.w	11826 <__ssvfscanf_r+0x1392>
   10ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10ce8:	2e03      	cmp	r6, #3
   10cea:	4413      	add	r3, r2
   10cec:	63fb      	str	r3, [r7, #60]	; 0x3c
   10cee:	f000 83ca 	beq.w	11486 <__ssvfscanf_r+0xff2>
   10cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
   10cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10cf8:	b95b      	cbnz	r3, 10d12 <__ssvfscanf_r+0x87e>
   10cfa:	6a3b      	ldr	r3, [r7, #32]
   10cfc:	f108 0804 	add.w	r8, r8, #4
   10d00:	b13b      	cbz	r3, 10d12 <__ssvfscanf_r+0x87e>
   10d02:	69fb      	ldr	r3, [r7, #28]
   10d04:	eba8 0403 	sub.w	r4, r8, r3
   10d08:	69bb      	ldr	r3, [r7, #24]
   10d0a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   10d0e:	f240 8405 	bls.w	1151c <__ssvfscanf_r+0x1088>
   10d12:	f8db 3004 	ldr.w	r3, [fp, #4]
   10d16:	2b00      	cmp	r3, #0
   10d18:	f04f 0500 	mov.w	r5, #0
   10d1c:	f340 8296 	ble.w	1124c <__ssvfscanf_r+0xdb8>
   10d20:	f1ba 0f00 	cmp.w	sl, #0
   10d24:	d192      	bne.n	10c4c <__ssvfscanf_r+0x7b8>
   10d26:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   10d2a:	627e      	str	r6, [r7, #36]	; 0x24
   10d2c:	4644      	mov	r4, r8
   10d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10d30:	2b00      	cmp	r3, #0
   10d32:	f47f abd6 	bne.w	104e2 <__ssvfscanf_r+0x4e>
   10d36:	6023      	str	r3, [r4, #0]
   10d38:	6a3b      	ldr	r3, [r7, #32]
   10d3a:	2b00      	cmp	r3, #0
   10d3c:	f000 81c2 	beq.w	110c4 <__ssvfscanf_r+0xc30>
   10d40:	69fb      	ldr	r3, [r7, #28]
   10d42:	69ba      	ldr	r2, [r7, #24]
   10d44:	1ae1      	subs	r1, r4, r3
   10d46:	108b      	asrs	r3, r1, #2
   10d48:	3301      	adds	r3, #1
   10d4a:	429a      	cmp	r2, r3
   10d4c:	f240 81ba 	bls.w	110c4 <__ssvfscanf_r+0xc30>
   10d50:	6a3c      	ldr	r4, [r7, #32]
   10d52:	3104      	adds	r1, #4
   10d54:	6820      	ldr	r0, [r4, #0]
   10d56:	f7fa fac5 	bl	b2e4 <realloc>
   10d5a:	2800      	cmp	r0, #0
   10d5c:	f000 81b2 	beq.w	110c4 <__ssvfscanf_r+0xc30>
   10d60:	6020      	str	r0, [r4, #0]
   10d62:	e1af      	b.n	110c4 <__ssvfscanf_r+0xc30>
   10d64:	0521      	lsls	r1, r4, #20
   10d66:	f57f adb3 	bpl.w	108d0 <__ssvfscanf_r+0x43c>
   10d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d6c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10d6e:	185b      	adds	r3, r3, r1
   10d70:	f47f adae 	bne.w	108d0 <__ssvfscanf_r+0x43c>
   10d74:	64bb      	str	r3, [r7, #72]	; 0x48
   10d76:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   10d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   10d7c:	e593      	b.n	108a6 <__ssvfscanf_r+0x412>
   10d7e:	4b21      	ldr	r3, [pc, #132]	; (10e04 <__ssvfscanf_r+0x970>)
   10d80:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   10d84:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   10d88:	e66b      	b.n	10a62 <__ssvfscanf_r+0x5ce>
   10d8a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
   10d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   10d92:	f47f ad9d 	bne.w	108d0 <__ssvfscanf_r+0x43c>
   10d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10d98:	2b01      	cmp	r3, #1
   10d9a:	f47f ad99 	bne.w	108d0 <__ssvfscanf_r+0x43c>
   10d9e:	2330      	movs	r3, #48	; 0x30
   10da0:	f805 3b01 	strb.w	r3, [r5], #1
   10da4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   10da8:	2300      	movs	r3, #0
   10daa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   10dae:	3e01      	subs	r6, #1
   10db0:	637b      	str	r3, [r7, #52]	; 0x34
   10db2:	e578      	b.n	108a6 <__ssvfscanf_r+0x412>
   10db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10db6:	2b06      	cmp	r3, #6
   10db8:	f040 8574 	bne.w	118a4 <__ssvfscanf_r+0x1410>
   10dbc:	2307      	movs	r3, #7
   10dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   10dc0:	e571      	b.n	108a6 <__ssvfscanf_r+0x412>
   10dc2:	0523      	lsls	r3, r4, #20
   10dc4:	f57f ad84 	bpl.w	108d0 <__ssvfscanf_r+0x43c>
   10dc8:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
   10dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10dd0:	d005      	beq.n	10dde <__ssvfscanf_r+0x94a>
   10dd2:	0561      	lsls	r1, r4, #21
   10dd4:	f57f ad7c 	bpl.w	108d0 <__ssvfscanf_r+0x43c>
   10dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10dda:	2b00      	cmp	r3, #0
   10ddc:	d047      	beq.n	10e6e <__ssvfscanf_r+0x9da>
   10dde:	05a3      	lsls	r3, r4, #22
   10de0:	d404      	bmi.n	10dec <__ssvfscanf_r+0x958>
   10de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10de4:	69f9      	ldr	r1, [r7, #28]
   10de6:	1a5b      	subs	r3, r3, r1
   10de8:	e9c7 5305 	strd	r5, r3, [r7, #20]
   10dec:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
   10df0:	2300      	movs	r3, #0
   10df2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
   10df6:	637b      	str	r3, [r7, #52]	; 0x34
   10df8:	e555      	b.n	108a6 <__ssvfscanf_r+0x412>
   10dfa:	bf00      	nop
   10dfc:	20000d59 	.word	0x20000d59
   10e00:	200088ec 	.word	0x200088ec
   10e04:	2000297c 	.word	0x2000297c
   10e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10e0a:	2b00      	cmp	r3, #0
   10e0c:	f000 81ff 	beq.w	1120e <__ssvfscanf_r+0xd7a>
   10e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10e12:	2b02      	cmp	r3, #2
   10e14:	f000 83b0 	beq.w	11578 <__ssvfscanf_r+0x10e4>
   10e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10e1a:	2b01      	cmp	r3, #1
   10e1c:	f000 81f1 	beq.w	11202 <__ssvfscanf_r+0xd6e>
   10e20:	2b04      	cmp	r3, #4
   10e22:	f000 81ee 	beq.w	11202 <__ssvfscanf_r+0xd6e>
   10e26:	e553      	b.n	108d0 <__ssvfscanf_r+0x43c>
   10e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10e2a:	2b07      	cmp	r3, #7
   10e2c:	f040 853a 	bne.w	118a4 <__ssvfscanf_r+0x1410>
   10e30:	2308      	movs	r3, #8
   10e32:	64bb      	str	r3, [r7, #72]	; 0x48
   10e34:	e537      	b.n	108a6 <__ssvfscanf_r+0x412>
   10e36:	0520      	lsls	r0, r4, #20
   10e38:	f100 81f9 	bmi.w	1122e <__ssvfscanf_r+0xd9a>
   10e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10e3e:	2b01      	cmp	r3, #1
   10e40:	f47f ad46 	bne.w	108d0 <__ssvfscanf_r+0x43c>
   10e44:	2302      	movs	r3, #2
   10e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   10e48:	e52d      	b.n	108a6 <__ssvfscanf_r+0x412>
   10e4a:	0623      	lsls	r3, r4, #24
   10e4c:	f57f ad40 	bpl.w	108d0 <__ssvfscanf_r+0x43c>
   10e50:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10e54:	e527      	b.n	108a6 <__ssvfscanf_r+0x412>
   10e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10e58:	2b00      	cmp	r3, #0
   10e5a:	f040 81cc 	bne.w	111f6 <__ssvfscanf_r+0xd62>
   10e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10e60:	b9b3      	cbnz	r3, 10e90 <__ssvfscanf_r+0x9fc>
   10e62:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   10e66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   10e6a:	f000 8520 	beq.w	118ae <__ssvfscanf_r+0x141a>
   10e6e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   10e70:	ee18 9a10 	vmov	r9, s16
   10e74:	e533      	b.n	108de <__ssvfscanf_r+0x44a>
   10e76:	0521      	lsls	r1, r4, #20
   10e78:	f100 81b7 	bmi.w	111ea <__ssvfscanf_r+0xd56>
   10e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10e7e:	2b02      	cmp	r3, #2
   10e80:	f040 8510 	bne.w	118a4 <__ssvfscanf_r+0x1410>
   10e84:	2303      	movs	r3, #3
   10e86:	64bb      	str	r3, [r7, #72]	; 0x48
   10e88:	e50d      	b.n	108a6 <__ssvfscanf_r+0x412>
   10e8a:	0520      	lsls	r0, r4, #20
   10e8c:	d59c      	bpl.n	10dc8 <__ssvfscanf_r+0x934>
   10e8e:	e76c      	b.n	10d6a <__ssvfscanf_r+0x8d6>
   10e90:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   10e92:	ee18 9a10 	vmov	r9, s16
   10e96:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   10e9a:	e520      	b.n	108de <__ssvfscanf_r+0x44a>
   10e9c:	4b8d      	ldr	r3, [pc, #564]	; (110d4 <__ssvfscanf_r+0xc40>)
   10e9e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   10ea2:	2e08      	cmp	r6, #8
   10ea4:	f73f addb 	bgt.w	10a5e <__ssvfscanf_r+0x5ca>
   10ea8:	e5e8      	b.n	10a7c <__ssvfscanf_r+0x5e8>
   10eaa:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   10eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   10eb2:	f47f ade3 	bne.w	10a7c <__ssvfscanf_r+0x5e8>
   10eb6:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   10eba:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   10ebe:	2610      	movs	r6, #16
   10ec0:	e5cf      	b.n	10a62 <__ssvfscanf_r+0x5ce>
   10ec2:	0623      	lsls	r3, r4, #24
   10ec4:	f57f adda 	bpl.w	10a7c <__ssvfscanf_r+0x5e8>
   10ec8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10ecc:	e5c9      	b.n	10a62 <__ssvfscanf_r+0x5ce>
   10ece:	f044 0401 	orr.w	r4, r4, #1
   10ed2:	f8db 3004 	ldr.w	r3, [fp, #4]
   10ed6:	64f9      	str	r1, [r7, #76]	; 0x4c
   10ed8:	2b00      	cmp	r3, #0
   10eda:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   10ede:	f04f 0500 	mov.w	r5, #0
   10ee2:	f73f abf8 	bgt.w	106d6 <__ssvfscanf_r+0x242>
   10ee6:	4659      	mov	r1, fp
   10ee8:	4648      	mov	r0, r9
   10eea:	f002 fc7d 	bl	137e8 <__ssrefill_r>
   10eee:	2800      	cmp	r0, #0
   10ef0:	f47f abbc 	bne.w	1066c <__ssvfscanf_r+0x1d8>
   10ef4:	0660      	lsls	r0, r4, #25
   10ef6:	f53f abf1 	bmi.w	106dc <__ssvfscanf_r+0x248>
   10efa:	f8db 2000 	ldr.w	r2, [fp]
   10efe:	4e76      	ldr	r6, [pc, #472]	; (110d8 <__ssvfscanf_r+0xc44>)
   10f00:	7813      	ldrb	r3, [r2, #0]
   10f02:	5cf3      	ldrb	r3, [r6, r3]
   10f04:	0719      	lsls	r1, r3, #28
   10f06:	f57f abe9 	bpl.w	106dc <__ssvfscanf_r+0x248>
   10f0a:	f8db 3004 	ldr.w	r3, [fp, #4]
   10f0e:	3b01      	subs	r3, #1
   10f10:	2b00      	cmp	r3, #0
   10f12:	f10a 0a01 	add.w	sl, sl, #1
   10f16:	f8cb 3004 	str.w	r3, [fp, #4]
   10f1a:	f102 0201 	add.w	r2, r2, #1
   10f1e:	dd4a      	ble.n	10fb6 <__ssvfscanf_r+0xb22>
   10f20:	f8cb 2000 	str.w	r2, [fp]
   10f24:	7813      	ldrb	r3, [r2, #0]
   10f26:	5cf3      	ldrb	r3, [r6, r3]
   10f28:	0719      	lsls	r1, r3, #28
   10f2a:	f57f abd7 	bpl.w	106dc <__ssvfscanf_r+0x248>
   10f2e:	e7ec      	b.n	10f0a <__ssvfscanf_r+0xa76>
   10f30:	f044 0401 	orr.w	r4, r4, #1
   10f34:	4b69      	ldr	r3, [pc, #420]	; (110dc <__ssvfscanf_r+0xc48>)
   10f36:	62fb      	str	r3, [r7, #44]	; 0x2c
   10f38:	2308      	movs	r3, #8
   10f3a:	64f9      	str	r1, [r7, #76]	; 0x4c
   10f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   10f3e:	2503      	movs	r5, #3
   10f40:	f7ff bbc4 	b.w	106cc <__ssvfscanf_r+0x238>
   10f44:	f044 0401 	orr.w	r4, r4, #1
   10f48:	4b65      	ldr	r3, [pc, #404]	; (110e0 <__ssvfscanf_r+0xc4c>)
   10f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   10f4c:	230a      	movs	r3, #10
   10f4e:	64f9      	str	r1, [r7, #76]	; 0x4c
   10f50:	63bb      	str	r3, [r7, #56]	; 0x38
   10f52:	2503      	movs	r5, #3
   10f54:	f7ff bbba 	b.w	106cc <__ssvfscanf_r+0x238>
   10f58:	0523      	lsls	r3, r4, #20
   10f5a:	f57f ad82 	bpl.w	10a62 <__ssvfscanf_r+0x5ce>
   10f5e:	b916      	cbnz	r6, 10f66 <__ssvfscanf_r+0xad2>
   10f60:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   10f64:	2608      	movs	r6, #8
   10f66:	0563      	lsls	r3, r4, #21
   10f68:	f100 81a6 	bmi.w	112b8 <__ssvfscanf_r+0xe24>
   10f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10f6e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   10f72:	b11b      	cbz	r3, 10f7c <__ssvfscanf_r+0xae8>
   10f74:	3b01      	subs	r3, #1
   10f76:	63fb      	str	r3, [r7, #60]	; 0x3c
   10f78:	f108 0801 	add.w	r8, r8, #1
   10f7c:	684b      	ldr	r3, [r1, #4]
   10f7e:	3b01      	subs	r3, #1
   10f80:	2b00      	cmp	r3, #0
   10f82:	f10a 0a01 	add.w	sl, sl, #1
   10f86:	604b      	str	r3, [r1, #4]
   10f88:	f73f ad73 	bgt.w	10a72 <__ssvfscanf_r+0x5de>
   10f8c:	4648      	mov	r0, r9
   10f8e:	64b9      	str	r1, [r7, #72]	; 0x48
   10f90:	f002 fc2a 	bl	137e8 <__ssrefill_r>
   10f94:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10f96:	2800      	cmp	r0, #0
   10f98:	f43f ad6d 	beq.w	10a76 <__ssvfscanf_r+0x5e2>
   10f9c:	e56e      	b.n	10a7c <__ssvfscanf_r+0x5e8>
   10f9e:	ee18 0a10 	vmov	r0, s16
   10fa2:	4659      	mov	r1, fp
   10fa4:	f002 fc20 	bl	137e8 <__ssrefill_r>
   10fa8:	2800      	cmp	r0, #0
   10faa:	f47f ac91 	bne.w	108d0 <__ssvfscanf_r+0x43c>
   10fae:	2e00      	cmp	r6, #0
   10fb0:	f47f abc4 	bne.w	1073c <__ssvfscanf_r+0x2a8>
   10fb4:	e48c      	b.n	108d0 <__ssvfscanf_r+0x43c>
   10fb6:	4659      	mov	r1, fp
   10fb8:	4648      	mov	r0, r9
   10fba:	f002 fc15 	bl	137e8 <__ssrefill_r>
   10fbe:	2800      	cmp	r0, #0
   10fc0:	f47f ab54 	bne.w	1066c <__ssvfscanf_r+0x1d8>
   10fc4:	f8db 2000 	ldr.w	r2, [fp]
   10fc8:	e79a      	b.n	10f00 <__ssvfscanf_r+0xa6c>
   10fca:	f8db 2004 	ldr.w	r2, [fp, #4]
   10fce:	e00f      	b.n	10ff0 <__ssvfscanf_r+0xb5c>
   10fd0:	f8db 3000 	ldr.w	r3, [fp]
   10fd4:	781a      	ldrb	r2, [r3, #0]
   10fd6:	5cb2      	ldrb	r2, [r6, r2]
   10fd8:	0711      	lsls	r1, r2, #28
   10fda:	f103 0301 	add.w	r3, r3, #1
   10fde:	f57f aa80 	bpl.w	104e2 <__ssvfscanf_r+0x4e>
   10fe2:	f8db 2004 	ldr.w	r2, [fp, #4]
   10fe6:	3a01      	subs	r2, #1
   10fe8:	e9cb 3200 	strd	r3, r2, [fp]
   10fec:	f10a 0a01 	add.w	sl, sl, #1
   10ff0:	2a00      	cmp	r2, #0
   10ff2:	dced      	bgt.n	10fd0 <__ssvfscanf_r+0xb3c>
   10ff4:	4659      	mov	r1, fp
   10ff6:	4648      	mov	r0, r9
   10ff8:	f002 fbf6 	bl	137e8 <__ssrefill_r>
   10ffc:	2800      	cmp	r0, #0
   10ffe:	d0e7      	beq.n	10fd0 <__ssvfscanf_r+0xb3c>
   11000:	f7ff ba6f 	b.w	104e2 <__ssvfscanf_r+0x4e>
   11004:	06e1      	lsls	r1, r4, #27
   11006:	f100 8349 	bmi.w	1169c <__ssvfscanf_r+0x1208>
   1100a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   1100e:	f000 83ab 	beq.w	11768 <__ssvfscanf_r+0x12d4>
   11012:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   11014:	f854 6b04 	ldr.w	r6, [r4], #4
   11018:	64be      	str	r6, [r7, #72]	; 0x48
   1101a:	2e00      	cmp	r6, #0
   1101c:	f43f ab2f 	beq.w	1067e <__ssvfscanf_r+0x1ea>
   11020:	2020      	movs	r0, #32
   11022:	f7f9 fe93 	bl	ad4c <malloc>
   11026:	4605      	mov	r5, r0
   11028:	2800      	cmp	r0, #0
   1102a:	f000 8462 	beq.w	118f2 <__ssvfscanf_r+0x145e>
   1102e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11030:	6030      	str	r0, [r6, #0]
   11032:	8893      	ldrh	r3, [r2, #4]
   11034:	88d6      	ldrh	r6, [r2, #6]
   11036:	429e      	cmp	r6, r3
   11038:	f080 82a8 	bcs.w	1158c <__ssvfscanf_r+0x10f8>
   1103c:	6810      	ldr	r0, [r2, #0]
   1103e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11040:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   11044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11046:	633c      	str	r4, [r7, #48]	; 0x30
   11048:	3601      	adds	r6, #1
   1104a:	80de      	strh	r6, [r3, #6]
   1104c:	2320      	movs	r3, #32
   1104e:	63fb      	str	r3, [r7, #60]	; 0x3c
   11050:	f8db 2000 	ldr.w	r2, [fp]
   11054:	4e20      	ldr	r6, [pc, #128]	; (110d8 <__ssvfscanf_r+0xc44>)
   11056:	7811      	ldrb	r1, [r2, #0]
   11058:	5c71      	ldrb	r1, [r6, r1]
   1105a:	0708      	lsls	r0, r1, #28
   1105c:	f100 82ac 	bmi.w	115b8 <__ssvfscanf_r+0x1124>
   11060:	4633      	mov	r3, r6
   11062:	462c      	mov	r4, r5
   11064:	4610      	mov	r0, r2
   11066:	462e      	mov	r6, r5
   11068:	f8db 1004 	ldr.w	r1, [fp, #4]
   1106c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1106e:	3901      	subs	r1, #1
   11070:	f8cb 1004 	str.w	r1, [fp, #4]
   11074:	1c41      	adds	r1, r0, #1
   11076:	f8cb 1000 	str.w	r1, [fp]
   1107a:	4635      	mov	r5, r6
   1107c:	7801      	ldrb	r1, [r0, #0]
   1107e:	f805 1b01 	strb.w	r1, [r5], #1
   11082:	b122      	cbz	r2, 1108e <__ssvfscanf_r+0xbfa>
   11084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11086:	1b2e      	subs	r6, r5, r4
   11088:	4296      	cmp	r6, r2
   1108a:	f080 837a 	bcs.w	11782 <__ssvfscanf_r+0x12ee>
   1108e:	f1b8 0801 	subs.w	r8, r8, #1
   11092:	d00b      	beq.n	110ac <__ssvfscanf_r+0xc18>
   11094:	f8db 1004 	ldr.w	r1, [fp, #4]
   11098:	2900      	cmp	r1, #0
   1109a:	462e      	mov	r6, r5
   1109c:	f340 83ae 	ble.w	117fc <__ssvfscanf_r+0x1368>
   110a0:	f8db 0000 	ldr.w	r0, [fp]
   110a4:	7801      	ldrb	r1, [r0, #0]
   110a6:	5c59      	ldrb	r1, [r3, r1]
   110a8:	0709      	lsls	r1, r1, #28
   110aa:	d5dd      	bpl.n	11068 <__ssvfscanf_r+0xbd4>
   110ac:	1b29      	subs	r1, r5, r4
   110ae:	448a      	add	sl, r1
   110b0:	3101      	adds	r1, #1
   110b2:	f04f 0300 	mov.w	r3, #0
   110b6:	702b      	strb	r3, [r5, #0]
   110b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   110ba:	b11b      	cbz	r3, 110c4 <__ssvfscanf_r+0xc30>
   110bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   110be:	428b      	cmp	r3, r1
   110c0:	f200 8394 	bhi.w	117ec <__ssvfscanf_r+0x1358>
   110c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   110c6:	3301      	adds	r3, #1
   110c8:	647b      	str	r3, [r7, #68]	; 0x44
   110ca:	f7ff ba0a 	b.w	104e2 <__ssvfscanf_r+0x4e>
   110ce:	2300      	movs	r3, #0
   110d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   110d2:	e461      	b.n	10998 <__ssvfscanf_r+0x504>
   110d4:	2000297c 	.word	0x2000297c
   110d8:	20000d59 	.word	0x20000d59
   110dc:	000130ad 	.word	0x000130ad
   110e0:	0000c699 	.word	0x0000c699
   110e4:	06e6      	lsls	r6, r4, #27
   110e6:	f100 8181 	bmi.w	113ec <__ssvfscanf_r+0xf58>
   110ea:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   110ee:	f000 836d 	beq.w	117cc <__ssvfscanf_r+0x1338>
   110f2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   110f4:	f854 6b04 	ldr.w	r6, [r4], #4
   110f8:	64be      	str	r6, [r7, #72]	; 0x48
   110fa:	2e00      	cmp	r6, #0
   110fc:	f43f aabf 	beq.w	1067e <__ssvfscanf_r+0x1ea>
   11100:	2020      	movs	r0, #32
   11102:	f7f9 fe23 	bl	ad4c <malloc>
   11106:	4605      	mov	r5, r0
   11108:	2800      	cmp	r0, #0
   1110a:	f000 83f2 	beq.w	118f2 <__ssvfscanf_r+0x145e>
   1110e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11110:	6030      	str	r0, [r6, #0]
   11112:	8893      	ldrh	r3, [r2, #4]
   11114:	88d6      	ldrh	r6, [r2, #6]
   11116:	429e      	cmp	r6, r3
   11118:	f080 827a 	bcs.w	11610 <__ssvfscanf_r+0x117c>
   1111c:	6810      	ldr	r0, [r2, #0]
   1111e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11120:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   11124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11126:	633c      	str	r4, [r7, #48]	; 0x30
   11128:	3601      	adds	r6, #1
   1112a:	80de      	strh	r6, [r3, #6]
   1112c:	2420      	movs	r4, #32
   1112e:	f8db 2000 	ldr.w	r2, [fp]
   11132:	f107 0370 	add.w	r3, r7, #112	; 0x70
   11136:	4619      	mov	r1, r3
   11138:	7813      	ldrb	r3, [r2, #0]
   1113a:	5ccb      	ldrb	r3, [r1, r3]
   1113c:	2b00      	cmp	r3, #0
   1113e:	f43f aa9e 	beq.w	1067e <__ssvfscanf_r+0x1ea>
   11142:	ee08 9a10 	vmov	s16, r9
   11146:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   1114a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   1114e:	462e      	mov	r6, r5
   11150:	46a2      	mov	sl, r4
   11152:	4610      	mov	r0, r2
   11154:	460c      	mov	r4, r1
   11156:	f8db 1004 	ldr.w	r1, [fp, #4]
   1115a:	1c43      	adds	r3, r0, #1
   1115c:	3901      	subs	r1, #1
   1115e:	e9cb 3100 	strd	r3, r1, [fp]
   11162:	4629      	mov	r1, r5
   11164:	7800      	ldrb	r0, [r0, #0]
   11166:	f801 0b01 	strb.w	r0, [r1], #1
   1116a:	f1b9 0f00 	cmp.w	r9, #0
   1116e:	d002      	beq.n	11176 <__ssvfscanf_r+0xce2>
   11170:	1b8d      	subs	r5, r1, r6
   11172:	4555      	cmp	r5, sl
   11174:	d27a      	bcs.n	1126c <__ssvfscanf_r+0xdd8>
   11176:	460d      	mov	r5, r1
   11178:	f1b8 0801 	subs.w	r8, r8, #1
   1117c:	d00a      	beq.n	11194 <__ssvfscanf_r+0xd00>
   1117e:	f8db 1004 	ldr.w	r1, [fp, #4]
   11182:	2900      	cmp	r1, #0
   11184:	f340 816a 	ble.w	1145c <__ssvfscanf_r+0xfc8>
   11188:	f8db 0000 	ldr.w	r0, [fp]
   1118c:	7801      	ldrb	r1, [r0, #0]
   1118e:	5c61      	ldrb	r1, [r4, r1]
   11190:	2900      	cmp	r1, #0
   11192:	d1e0      	bne.n	11156 <__ssvfscanf_r+0xcc2>
   11194:	4654      	mov	r4, sl
   11196:	ee18 9a10 	vmov	r9, s16
   1119a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1119e:	1bae      	subs	r6, r5, r6
   111a0:	f43f aa6d 	beq.w	1067e <__ssvfscanf_r+0x1ea>
   111a4:	f04f 0300 	mov.w	r3, #0
   111a8:	702b      	strb	r3, [r5, #0]
   111aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   111ac:	b11b      	cbz	r3, 111b6 <__ssvfscanf_r+0xd22>
   111ae:	1c71      	adds	r1, r6, #1
   111b0:	428c      	cmp	r4, r1
   111b2:	f200 832d 	bhi.w	11810 <__ssvfscanf_r+0x137c>
   111b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   111b8:	3301      	adds	r3, #1
   111ba:	44b2      	add	sl, r6
   111bc:	647b      	str	r3, [r7, #68]	; 0x44
   111be:	f7ff b990 	b.w	104e2 <__ssvfscanf_r+0x4e>
   111c2:	2300      	movs	r3, #0
   111c4:	613b      	str	r3, [r7, #16]
   111c6:	f7ff baa9 	b.w	1071c <__ssvfscanf_r+0x288>
   111ca:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   111ce:	f47f aa56 	bne.w	1067e <__ssvfscanf_r+0x1ea>
   111d2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   111d6:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   111da:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   111de:	f7ff ba67 	b.w	106b0 <__ssvfscanf_r+0x21c>
   111e2:	64f9      	str	r1, [r7, #76]	; 0x4c
   111e4:	2504      	movs	r5, #4
   111e6:	f7ff ba71 	b.w	106cc <__ssvfscanf_r+0x238>
   111ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   111ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   111ee:	185b      	adds	r3, r3, r1
   111f0:	f47f ae44 	bne.w	10e7c <__ssvfscanf_r+0x9e8>
   111f4:	e5be      	b.n	10d74 <__ssvfscanf_r+0x8e0>
   111f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   111f8:	2b03      	cmp	r3, #3
   111fa:	d002      	beq.n	11202 <__ssvfscanf_r+0xd6e>
   111fc:	2b05      	cmp	r3, #5
   111fe:	f47f ab67 	bne.w	108d0 <__ssvfscanf_r+0x43c>
   11202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11204:	3301      	adds	r3, #1
   11206:	b2db      	uxtb	r3, r3
   11208:	64bb      	str	r3, [r7, #72]	; 0x48
   1120a:	f7ff bb4c 	b.w	108a6 <__ssvfscanf_r+0x412>
   1120e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11210:	2b00      	cmp	r3, #0
   11212:	f47f ae01 	bne.w	10e18 <__ssvfscanf_r+0x984>
   11216:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   1121a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1121e:	f47f adfb 	bne.w	10e18 <__ssvfscanf_r+0x984>
   11222:	2301      	movs	r3, #1
   11224:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   11228:	63fb      	str	r3, [r7, #60]	; 0x3c
   1122a:	f7ff bb3c 	b.w	108a6 <__ssvfscanf_r+0x412>
   1122e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11230:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   11232:	185b      	adds	r3, r3, r1
   11234:	f47f ae02 	bne.w	10e3c <__ssvfscanf_r+0x9a8>
   11238:	e59c      	b.n	10d74 <__ssvfscanf_r+0x8e0>
   1123a:	1c83      	adds	r3, r0, #2
   1123c:	f040 845b 	bne.w	11af6 <__ssvfscanf_r+0x1662>
   11240:	f8db 3004 	ldr.w	r3, [fp, #4]
   11244:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   11246:	2b00      	cmp	r3, #0
   11248:	f73f ad00 	bgt.w	10c4c <__ssvfscanf_r+0x7b8>
   1124c:	4659      	mov	r1, fp
   1124e:	4648      	mov	r0, r9
   11250:	f002 faca 	bl	137e8 <__ssrefill_r>
   11254:	2800      	cmp	r0, #0
   11256:	f43f ad63 	beq.w	10d20 <__ssvfscanf_r+0x88c>
   1125a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1125e:	627e      	str	r6, [r7, #36]	; 0x24
   11260:	4644      	mov	r4, r8
   11262:	2d00      	cmp	r5, #0
   11264:	f43f ad63 	beq.w	10d2e <__ssvfscanf_r+0x89a>
   11268:	f7ff ba00 	b.w	1066c <__ssvfscanf_r+0x1d8>
   1126c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   11270:	4630      	mov	r0, r6
   11272:	4651      	mov	r1, sl
   11274:	f7fa f836 	bl	b2e4 <realloc>
   11278:	4606      	mov	r6, r0
   1127a:	2800      	cmp	r0, #0
   1127c:	f000 8339 	beq.w	118f2 <__ssvfscanf_r+0x145e>
   11280:	4405      	add	r5, r0
   11282:	f8c9 0000 	str.w	r0, [r9]
   11286:	e777      	b.n	11178 <__ssvfscanf_r+0xce4>
   11288:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   1128c:	4bbc      	ldr	r3, [pc, #752]	; (11580 <__ssvfscanf_r+0x10ec>)
   1128e:	62fb      	str	r3, [r7, #44]	; 0x2c
   11290:	2310      	movs	r3, #16
   11292:	64f9      	str	r1, [r7, #76]	; 0x4c
   11294:	63bb      	str	r3, [r7, #56]	; 0x38
   11296:	2503      	movs	r5, #3
   11298:	f7ff ba18 	b.w	106cc <__ssvfscanf_r+0x238>
   1129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1129e:	3301      	adds	r3, #1
   112a0:	637b      	str	r3, [r7, #52]	; 0x34
   112a2:	693b      	ldr	r3, [r7, #16]
   112a4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   112a8:	2b00      	cmp	r3, #0
   112aa:	f43f aafe 	beq.w	108aa <__ssvfscanf_r+0x416>
   112ae:	693b      	ldr	r3, [r7, #16]
   112b0:	3b01      	subs	r3, #1
   112b2:	613b      	str	r3, [r7, #16]
   112b4:	f7ff bafa 	b.w	108ac <__ssvfscanf_r+0x418>
   112b8:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   112bc:	f7ff bbd1 	b.w	10a62 <__ssvfscanf_r+0x5ce>
   112c0:	0722      	lsls	r2, r4, #28
   112c2:	f140 81c7 	bpl.w	11654 <__ssvfscanf_r+0x11c0>
   112c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   112c8:	f853 2b04 	ldr.w	r2, [r3], #4
   112cc:	633b      	str	r3, [r7, #48]	; 0x30
   112ce:	7010      	strb	r0, [r2, #0]
   112d0:	f7ff bbf3 	b.w	10aba <__ssvfscanf_r+0x626>
   112d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   112d8:	465a      	mov	r2, fp
   112da:	4648      	mov	r0, r9
   112dc:	3d01      	subs	r5, #1
   112de:	f002 fa43 	bl	13768 <_sungetc_r>
   112e2:	f7ff bbd5 	b.w	10a90 <__ssvfscanf_r+0x5fc>
   112e6:	69fb      	ldr	r3, [r7, #28]
   112e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   112ea:	4293      	cmp	r3, r2
   112ec:	f43f ab2d 	beq.w	1094a <__ssvfscanf_r+0x4b6>
   112f0:	1a9a      	subs	r2, r3, r2
   112f2:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   112f6:	429d      	cmp	r5, r3
   112f8:	bf28      	it	cs
   112fa:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   112fe:	49a1      	ldr	r1, [pc, #644]	; (11584 <__ssvfscanf_r+0x10f0>)
   11300:	4628      	mov	r0, r5
   11302:	f7fb fab5 	bl	c870 <sprintf>
   11306:	f7ff bb20 	b.w	1094a <__ssvfscanf_r+0x4b6>
   1130a:	06e2      	lsls	r2, r4, #27
   1130c:	f100 8131 	bmi.w	11572 <__ssvfscanf_r+0x10de>
   11310:	0723      	lsls	r3, r4, #28
   11312:	f100 81ba 	bmi.w	1168a <__ssvfscanf_r+0x11f6>
   11316:	0766      	lsls	r6, r4, #29
   11318:	f140 82b4 	bpl.w	11884 <__ssvfscanf_r+0x13f0>
   1131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1131e:	64f9      	str	r1, [r7, #76]	; 0x4c
   11320:	f853 2b04 	ldr.w	r2, [r3], #4
   11324:	633b      	str	r3, [r7, #48]	; 0x30
   11326:	f8a2 a000 	strh.w	sl, [r2]
   1132a:	f7ff b8da 	b.w	104e2 <__ssvfscanf_r+0x4e>
   1132e:	0723      	lsls	r3, r4, #28
   11330:	f47f a9a5 	bne.w	1067e <__ssvfscanf_r+0x1ea>
   11334:	7842      	ldrb	r2, [r0, #1]
   11336:	2a68      	cmp	r2, #104	; 0x68
   11338:	f000 8186 	beq.w	11648 <__ssvfscanf_r+0x11b4>
   1133c:	f044 0404 	orr.w	r4, r4, #4
   11340:	4608      	mov	r0, r1
   11342:	f7ff b92f 	b.w	105a4 <__ssvfscanf_r+0x110>
   11346:	4b8e      	ldr	r3, [pc, #568]	; (11580 <__ssvfscanf_r+0x10ec>)
   11348:	62fb      	str	r3, [r7, #44]	; 0x2c
   1134a:	230a      	movs	r3, #10
   1134c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1134e:	63bb      	str	r3, [r7, #56]	; 0x38
   11350:	2503      	movs	r5, #3
   11352:	f7ff b9bb 	b.w	106cc <__ssvfscanf_r+0x238>
   11356:	4b8c      	ldr	r3, [pc, #560]	; (11588 <__ssvfscanf_r+0x10f4>)
   11358:	62fb      	str	r3, [r7, #44]	; 0x2c
   1135a:	2300      	movs	r3, #0
   1135c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1135e:	63bb      	str	r3, [r7, #56]	; 0x38
   11360:	2503      	movs	r5, #3
   11362:	f7ff b9b3 	b.w	106cc <__ssvfscanf_r+0x238>
   11366:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   1136a:	e78f      	b.n	1128c <__ssvfscanf_r+0xdf8>
   1136c:	f107 0070 	add.w	r0, r7, #112	; 0x70
   11370:	f000 fdde 	bl	11f30 <__sccl>
   11374:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   11378:	64f8      	str	r0, [r7, #76]	; 0x4c
   1137a:	2501      	movs	r5, #1
   1137c:	f7ff b9a6 	b.w	106cc <__ssvfscanf_r+0x238>
   11380:	0722      	lsls	r2, r4, #28
   11382:	f47f a97c 	bne.w	1067e <__ssvfscanf_r+0x1ea>
   11386:	7842      	ldrb	r2, [r0, #1]
   11388:	2a6c      	cmp	r2, #108	; 0x6c
   1138a:	f000 8157 	beq.w	1163c <__ssvfscanf_r+0x11a8>
   1138e:	f044 0401 	orr.w	r4, r4, #1
   11392:	4608      	mov	r0, r1
   11394:	f7ff b906 	b.w	105a4 <__ssvfscanf_r+0x110>
   11398:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   1139c:	f47f a96f 	bne.w	1067e <__ssvfscanf_r+0x1ea>
   113a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   113a2:	2a00      	cmp	r2, #0
   113a4:	f000 81e7 	beq.w	11776 <__ssvfscanf_r+0x12e2>
   113a8:	7842      	ldrb	r2, [r0, #1]
   113aa:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   113ae:	4608      	mov	r0, r1
   113b0:	f7ff b8f8 	b.w	105a4 <__ssvfscanf_r+0x110>
   113b4:	ea58 0804 	orrs.w	r8, r8, r4
   113b8:	f47f a961 	bne.w	1067e <__ssvfscanf_r+0x1ea>
   113bc:	7842      	ldrb	r2, [r0, #1]
   113be:	2410      	movs	r4, #16
   113c0:	4608      	mov	r0, r1
   113c2:	f7ff b8ef 	b.w	105a4 <__ssvfscanf_r+0x110>
   113c6:	64f9      	str	r1, [r7, #76]	; 0x4c
   113c8:	f7ff b8a7 	b.w	1051a <__ssvfscanf_r+0x86>
   113cc:	2300      	movs	r3, #0
   113ce:	623b      	str	r3, [r7, #32]
   113d0:	62bb      	str	r3, [r7, #40]	; 0x28
   113d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   113d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
   113d8:	64bb      	str	r3, [r7, #72]	; 0x48
   113da:	f7ff bba9 	b.w	10b30 <__ssvfscanf_r+0x69c>
   113de:	2300      	movs	r3, #0
   113e0:	e9c7 3306 	strd	r3, r3, [r7, #24]
   113e4:	623b      	str	r3, [r7, #32]
   113e6:	f107 0454 	add.w	r4, r7, #84	; 0x54
   113ea:	e429      	b.n	10c40 <__ssvfscanf_r+0x7ac>
   113ec:	f8db 3000 	ldr.w	r3, [fp]
   113f0:	f107 0270 	add.w	r2, r7, #112	; 0x70
   113f4:	4611      	mov	r1, r2
   113f6:	781a      	ldrb	r2, [r3, #0]
   113f8:	5c8a      	ldrb	r2, [r1, r2]
   113fa:	2a00      	cmp	r2, #0
   113fc:	f43f a93f 	beq.w	1067e <__ssvfscanf_r+0x1ea>
   11400:	3301      	adds	r3, #1
   11402:	f8cb 3000 	str.w	r3, [fp]
   11406:	f8db 3004 	ldr.w	r3, [fp, #4]
   1140a:	f1b8 0f01 	cmp.w	r8, #1
   1140e:	f103 33ff 	add.w	r3, r3, #4294967295
   11412:	f8cb 3004 	str.w	r3, [fp, #4]
   11416:	bf18      	it	ne
   11418:	460c      	movne	r4, r1
   1141a:	d114      	bne.n	11446 <__ssvfscanf_r+0xfb2>
   1141c:	f7ff bb53 	b.w	10ac6 <__ssvfscanf_r+0x632>
   11420:	f8db 3000 	ldr.w	r3, [fp]
   11424:	781a      	ldrb	r2, [r3, #0]
   11426:	5ca2      	ldrb	r2, [r4, r2]
   11428:	3301      	adds	r3, #1
   1142a:	2a00      	cmp	r2, #0
   1142c:	f43f ab4b 	beq.w	10ac6 <__ssvfscanf_r+0x632>
   11430:	f8cb 3000 	str.w	r3, [fp]
   11434:	f8db 3004 	ldr.w	r3, [fp, #4]
   11438:	3501      	adds	r5, #1
   1143a:	3b01      	subs	r3, #1
   1143c:	4545      	cmp	r5, r8
   1143e:	f8cb 3004 	str.w	r3, [fp, #4]
   11442:	f43f ab40 	beq.w	10ac6 <__ssvfscanf_r+0x632>
   11446:	2b00      	cmp	r3, #0
   11448:	dcea      	bgt.n	11420 <__ssvfscanf_r+0xf8c>
   1144a:	4659      	mov	r1, fp
   1144c:	4648      	mov	r0, r9
   1144e:	f002 f9cb 	bl	137e8 <__ssrefill_r>
   11452:	2800      	cmp	r0, #0
   11454:	d0e4      	beq.n	11420 <__ssvfscanf_r+0xf8c>
   11456:	44aa      	add	sl, r5
   11458:	f7ff b843 	b.w	104e2 <__ssvfscanf_r+0x4e>
   1145c:	ee18 0a10 	vmov	r0, s16
   11460:	4659      	mov	r1, fp
   11462:	f002 f9c1 	bl	137e8 <__ssrefill_r>
   11466:	2800      	cmp	r0, #0
   11468:	f43f ae8e 	beq.w	11188 <__ssvfscanf_r+0xcf4>
   1146c:	42b5      	cmp	r5, r6
   1146e:	4654      	mov	r4, sl
   11470:	ee18 9a10 	vmov	r9, s16
   11474:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   11478:	f47f ae91 	bne.w	1119e <__ssvfscanf_r+0xd0a>
   1147c:	f7ff b8f6 	b.w	1066c <__ssvfscanf_r+0x1d8>
   11480:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   11484:	e428      	b.n	10cd8 <__ssvfscanf_r+0x844>
   11486:	6823      	ldr	r3, [r4, #0]
   11488:	2b04      	cmp	r3, #4
   1148a:	f47f ac32 	bne.w	10cf2 <__ssvfscanf_r+0x85e>
   1148e:	e432      	b.n	10cf6 <__ssvfscanf_r+0x862>
   11490:	1c83      	adds	r3, r0, #2
   11492:	f040 8339 	bne.w	11b08 <__ssvfscanf_r+0x1674>
   11496:	f8db 3004 	ldr.w	r3, [fp, #4]
   1149a:	2b00      	cmp	r3, #0
   1149c:	f340 81d7 	ble.w	1184e <__ssvfscanf_r+0x13ba>
   114a0:	f8db 3000 	ldr.w	r3, [fp]
   114a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   114a6:	781b      	ldrb	r3, [r3, #0]
   114a8:	5cd3      	ldrb	r3, [r2, r3]
   114aa:	0718      	lsls	r0, r3, #28
   114ac:	d403      	bmi.n	114b6 <__ssvfscanf_r+0x1022>
   114ae:	f1b8 0f00 	cmp.w	r8, #0
   114b2:	f47f ab49 	bne.w	10b48 <__ssvfscanf_r+0x6b4>
   114b6:	627c      	str	r4, [r7, #36]	; 0x24
   114b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   114ba:	2b00      	cmp	r3, #0
   114bc:	f47f a811 	bne.w	104e2 <__ssvfscanf_r+0x4e>
   114c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
   114c2:	6013      	str	r3, [r2, #0]
   114c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   114c6:	2b00      	cmp	r3, #0
   114c8:	f43f adfc 	beq.w	110c4 <__ssvfscanf_r+0xc30>
   114cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   114ce:	1ad1      	subs	r1, r2, r3
   114d0:	108b      	asrs	r3, r1, #2
   114d2:	6a3a      	ldr	r2, [r7, #32]
   114d4:	3301      	adds	r3, #1
   114d6:	429a      	cmp	r2, r3
   114d8:	f67f adf4 	bls.w	110c4 <__ssvfscanf_r+0xc30>
   114dc:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   114de:	3104      	adds	r1, #4
   114e0:	6820      	ldr	r0, [r4, #0]
   114e2:	f7f9 feff 	bl	b2e4 <realloc>
   114e6:	2800      	cmp	r0, #0
   114e8:	f47f ac3a 	bne.w	10d60 <__ssvfscanf_r+0x8cc>
   114ec:	e5ea      	b.n	110c4 <__ssvfscanf_r+0xc30>
   114ee:	f853 2b04 	ldr.w	r2, [r3], #4
   114f2:	ed82 0b00 	vstr	d0, [r2]
   114f6:	633b      	str	r3, [r7, #48]	; 0x30
   114f8:	e5e4      	b.n	110c4 <__ssvfscanf_r+0xc30>
   114fa:	68fd      	ldr	r5, [r7, #12]
   114fc:	6a39      	ldr	r1, [r7, #32]
   114fe:	687e      	ldr	r6, [r7, #4]
   11500:	4628      	mov	r0, r5
   11502:	4642      	mov	r2, r8
   11504:	46a3      	mov	fp, r4
   11506:	68bc      	ldr	r4, [r7, #8]
   11508:	f000 fd56 	bl	11fb8 <stpncpy>
   1150c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1150e:	61fb      	str	r3, [r7, #28]
   11510:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   11514:	3e01      	subs	r6, #1
   11516:	4605      	mov	r5, r0
   11518:	f7ff b9c8 	b.w	108ac <__ssvfscanf_r+0x418>
   1151c:	69f8      	ldr	r0, [r7, #28]
   1151e:	00d9      	lsls	r1, r3, #3
   11520:	461d      	mov	r5, r3
   11522:	f7f9 fedf 	bl	b2e4 <realloc>
   11526:	61f8      	str	r0, [r7, #28]
   11528:	2800      	cmp	r0, #0
   1152a:	f000 8264 	beq.w	119f6 <__ssvfscanf_r+0x1562>
   1152e:	6a3a      	ldr	r2, [r7, #32]
   11530:	006b      	lsls	r3, r5, #1
   11532:	eb00 0804 	add.w	r8, r0, r4
   11536:	6010      	str	r0, [r2, #0]
   11538:	61bb      	str	r3, [r7, #24]
   1153a:	f7ff bbea 	b.w	10d12 <__ssvfscanf_r+0x87e>
   1153e:	2e02      	cmp	r6, #2
   11540:	f240 82c4 	bls.w	11acc <__ssvfscanf_r+0x1638>
   11544:	2e03      	cmp	r6, #3
   11546:	f43f a9d3 	beq.w	108f0 <__ssvfscanf_r+0x45c>
   1154a:	3e04      	subs	r6, #4
   1154c:	fa5f f886 	uxtb.w	r8, r6
   11550:	ea6f 0308 	mvn.w	r3, r8
   11554:	18ee      	adds	r6, r5, r3
   11556:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1155a:	465a      	mov	r2, fp
   1155c:	4648      	mov	r0, r9
   1155e:	f002 f903 	bl	13768 <_sungetc_r>
   11562:	42ae      	cmp	r6, r5
   11564:	d1f7      	bne.n	11556 <__ssvfscanf_r+0x10c2>
   11566:	f10a 3aff 	add.w	sl, sl, #4294967295
   1156a:	ebaa 0a08 	sub.w	sl, sl, r8
   1156e:	f7ff b9bf 	b.w	108f0 <__ssvfscanf_r+0x45c>
   11572:	64f9      	str	r1, [r7, #76]	; 0x4c
   11574:	f7fe bfb5 	b.w	104e2 <__ssvfscanf_r+0x4e>
   11578:	2303      	movs	r3, #3
   1157a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1157c:	f7ff b993 	b.w	108a6 <__ssvfscanf_r+0x412>
   11580:	000130ad 	.word	0x000130ad
   11584:	20000d50 	.word	0x20000d50
   11588:	0000c699 	.word	0x0000c699
   1158c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   11590:	4293      	cmp	r3, r2
   11592:	f200 8297 	bhi.w	11ac4 <__ssvfscanf_r+0x1630>
   11596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11598:	3308      	adds	r3, #8
   1159a:	b29b      	uxth	r3, r3
   1159c:	6810      	ldr	r0, [r2, #0]
   1159e:	63f8      	str	r0, [r7, #60]	; 0x3c
   115a0:	0099      	lsls	r1, r3, #2
   115a2:	637b      	str	r3, [r7, #52]	; 0x34
   115a4:	f7f9 fe9e 	bl	b2e4 <realloc>
   115a8:	2800      	cmp	r0, #0
   115aa:	f000 827b 	beq.w	11aa4 <__ssvfscanf_r+0x1610>
   115ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   115b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   115b2:	8093      	strh	r3, [r2, #4]
   115b4:	6010      	str	r0, [r2, #0]
   115b6:	e542      	b.n	1103e <__ssvfscanf_r+0xbaa>
   115b8:	2101      	movs	r1, #1
   115ba:	e57a      	b.n	110b2 <__ssvfscanf_r+0xc1e>
   115bc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   115c0:	4293      	cmp	r3, r2
   115c2:	f200 8293 	bhi.w	11aec <__ssvfscanf_r+0x1658>
   115c6:	3308      	adds	r3, #8
   115c8:	b29e      	uxth	r6, r3
   115ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   115cc:	00b1      	lsls	r1, r6, #2
   115ce:	6818      	ldr	r0, [r3, #0]
   115d0:	f7f9 fe88 	bl	b2e4 <realloc>
   115d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   115d6:	2800      	cmp	r0, #0
   115d8:	f000 823e 	beq.w	11a58 <__ssvfscanf_r+0x15c4>
   115dc:	809e      	strh	r6, [r3, #4]
   115de:	6018      	str	r0, [r3, #0]
   115e0:	f7ff ba9b 	b.w	10b1a <__ssvfscanf_r+0x686>
   115e4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   115e8:	4293      	cmp	r3, r2
   115ea:	f200 827f 	bhi.w	11aec <__ssvfscanf_r+0x1658>
   115ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   115f0:	3308      	adds	r3, #8
   115f2:	b29b      	uxth	r3, r3
   115f4:	0099      	lsls	r1, r3, #2
   115f6:	6810      	ldr	r0, [r2, #0]
   115f8:	64bb      	str	r3, [r7, #72]	; 0x48
   115fa:	f7f9 fe73 	bl	b2e4 <realloc>
   115fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11600:	2800      	cmp	r0, #0
   11602:	f000 8228 	beq.w	11a56 <__ssvfscanf_r+0x15c2>
   11606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11608:	8093      	strh	r3, [r2, #4]
   1160a:	6010      	str	r0, [r2, #0]
   1160c:	f7ff bb0e 	b.w	10c2c <__ssvfscanf_r+0x798>
   11610:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   11614:	4293      	cmp	r3, r2
   11616:	f200 8255 	bhi.w	11ac4 <__ssvfscanf_r+0x1630>
   1161a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1161c:	3308      	adds	r3, #8
   1161e:	b29b      	uxth	r3, r3
   11620:	6810      	ldr	r0, [r2, #0]
   11622:	63f8      	str	r0, [r7, #60]	; 0x3c
   11624:	0099      	lsls	r1, r3, #2
   11626:	637b      	str	r3, [r7, #52]	; 0x34
   11628:	f7f9 fe5c 	bl	b2e4 <realloc>
   1162c:	2800      	cmp	r0, #0
   1162e:	f000 8239 	beq.w	11aa4 <__ssvfscanf_r+0x1610>
   11632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11636:	8093      	strh	r3, [r2, #4]
   11638:	6010      	str	r0, [r2, #0]
   1163a:	e570      	b.n	1111e <__ssvfscanf_r+0xc8a>
   1163c:	7882      	ldrb	r2, [r0, #2]
   1163e:	f044 0402 	orr.w	r4, r4, #2
   11642:	3002      	adds	r0, #2
   11644:	f7fe bfae 	b.w	105a4 <__ssvfscanf_r+0x110>
   11648:	7882      	ldrb	r2, [r0, #2]
   1164a:	f044 0408 	orr.w	r4, r4, #8
   1164e:	3002      	adds	r0, #2
   11650:	f7fe bfa8 	b.w	105a4 <__ssvfscanf_r+0x110>
   11654:	0763      	lsls	r3, r4, #29
   11656:	d458      	bmi.n	1170a <__ssvfscanf_r+0x1276>
   11658:	f014 0201 	ands.w	r2, r4, #1
   1165c:	f47f aa28 	bne.w	10ab0 <__ssvfscanf_r+0x61c>
   11660:	07a6      	lsls	r6, r4, #30
   11662:	f57f aa25 	bpl.w	10ab0 <__ssvfscanf_r+0x61c>
   11666:	4bb3      	ldr	r3, [pc, #716]	; (11934 <__ssvfscanf_r+0x14a0>)
   11668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1166a:	4299      	cmp	r1, r3
   1166c:	4648      	mov	r0, r9
   1166e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11672:	f000 823d 	beq.w	11af0 <__ssvfscanf_r+0x165c>
   11676:	f001 fdd1 	bl	1321c <_strtoll_r>
   1167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1167c:	f853 2b04 	ldr.w	r2, [r3], #4
   11680:	633b      	str	r3, [r7, #48]	; 0x30
   11682:	e9c2 0100 	strd	r0, r1, [r2]
   11686:	f7ff ba18 	b.w	10aba <__ssvfscanf_r+0x626>
   1168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1168c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1168e:	f853 2b04 	ldr.w	r2, [r3], #4
   11692:	633b      	str	r3, [r7, #48]	; 0x30
   11694:	f882 a000 	strb.w	sl, [r2]
   11698:	f7fe bf23 	b.w	104e2 <__ssvfscanf_r+0x4e>
   1169c:	f8db 3000 	ldr.w	r3, [fp]
   116a0:	4ea5      	ldr	r6, [pc, #660]	; (11938 <__ssvfscanf_r+0x14a4>)
   116a2:	781a      	ldrb	r2, [r3, #0]
   116a4:	5cb2      	ldrb	r2, [r6, r2]
   116a6:	0712      	lsls	r2, r2, #28
   116a8:	f53e af1b 	bmi.w	104e2 <__ssvfscanf_r+0x4e>
   116ac:	3301      	adds	r3, #1
   116ae:	f8cb 3000 	str.w	r3, [fp]
   116b2:	f8db 3004 	ldr.w	r3, [fp, #4]
   116b6:	f1b8 0f01 	cmp.w	r8, #1
   116ba:	f103 33ff 	add.w	r3, r3, #4294967295
   116be:	f8cb 3004 	str.w	r3, [fp, #4]
   116c2:	bf08      	it	eq
   116c4:	f10a 0a01 	addeq.w	sl, sl, #1
   116c8:	f43e af0b 	beq.w	104e2 <__ssvfscanf_r+0x4e>
   116cc:	2401      	movs	r4, #1
   116ce:	e011      	b.n	116f4 <__ssvfscanf_r+0x1260>
   116d0:	f8db 3000 	ldr.w	r3, [fp]
   116d4:	781a      	ldrb	r2, [r3, #0]
   116d6:	5cb2      	ldrb	r2, [r6, r2]
   116d8:	0715      	lsls	r5, r2, #28
   116da:	f103 0301 	add.w	r3, r3, #1
   116de:	d411      	bmi.n	11704 <__ssvfscanf_r+0x1270>
   116e0:	f8cb 3000 	str.w	r3, [fp]
   116e4:	f8db 3004 	ldr.w	r3, [fp, #4]
   116e8:	3401      	adds	r4, #1
   116ea:	3b01      	subs	r3, #1
   116ec:	4544      	cmp	r4, r8
   116ee:	f8cb 3004 	str.w	r3, [fp, #4]
   116f2:	d007      	beq.n	11704 <__ssvfscanf_r+0x1270>
   116f4:	2b00      	cmp	r3, #0
   116f6:	dceb      	bgt.n	116d0 <__ssvfscanf_r+0x123c>
   116f8:	4659      	mov	r1, fp
   116fa:	4648      	mov	r0, r9
   116fc:	f002 f874 	bl	137e8 <__ssrefill_r>
   11700:	2800      	cmp	r0, #0
   11702:	d0e5      	beq.n	116d0 <__ssvfscanf_r+0x123c>
   11704:	44a2      	add	sl, r4
   11706:	f7fe beec 	b.w	104e2 <__ssvfscanf_r+0x4e>
   1170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1170c:	f853 2b04 	ldr.w	r2, [r3], #4
   11710:	633b      	str	r3, [r7, #48]	; 0x30
   11712:	8010      	strh	r0, [r2, #0]
   11714:	f7ff b9d1 	b.w	10aba <__ssvfscanf_r+0x626>
   11718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1171a:	2b00      	cmp	r3, #0
   1171c:	f000 816e 	beq.w	119fc <__ssvfscanf_r+0x1568>
   11720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11722:	f8d3 8000 	ldr.w	r8, [r3]
   11726:	88de      	ldrh	r6, [r3, #6]
   11728:	b176      	cbz	r6, 11748 <__ssvfscanf_r+0x12b4>
   1172a:	2400      	movs	r4, #0
   1172c:	f1a8 0504 	sub.w	r5, r8, #4
   11730:	46a1      	mov	r9, r4
   11732:	f855 3f04 	ldr.w	r3, [r5, #4]!
   11736:	6818      	ldr	r0, [r3, #0]
   11738:	f7f9 fb10 	bl	ad5c <free>
   1173c:	3401      	adds	r4, #1
   1173e:	682b      	ldr	r3, [r5, #0]
   11740:	42a6      	cmp	r6, r4
   11742:	f8c3 9000 	str.w	r9, [r3]
   11746:	d1f4      	bne.n	11732 <__ssvfscanf_r+0x129e>
   11748:	f04f 33ff 	mov.w	r3, #4294967295
   1174c:	647b      	str	r3, [r7, #68]	; 0x44
   1174e:	f1b8 0f00 	cmp.w	r8, #0
   11752:	f47e af9c 	bne.w	1068e <__ssvfscanf_r+0x1fa>
   11756:	f7fe bf9d 	b.w	10694 <__ssvfscanf_r+0x200>
   1175a:	4878      	ldr	r0, [pc, #480]	; (1193c <__ssvfscanf_r+0x14a8>)
   1175c:	633b      	str	r3, [r7, #48]	; 0x30
   1175e:	f7fb fde7 	bl	d330 <nanf>
   11762:	ed84 0a00 	vstr	s0, [r4]
   11766:	e4ad      	b.n	110c4 <__ssvfscanf_r+0xc30>
   11768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1176a:	63fc      	str	r4, [r7, #60]	; 0x3c
   1176c:	f852 5b04 	ldr.w	r5, [r2], #4
   11770:	633a      	str	r2, [r7, #48]	; 0x30
   11772:	64bc      	str	r4, [r7, #72]	; 0x48
   11774:	e46c      	b.n	11050 <__ssvfscanf_r+0xbbc>
   11776:	b082      	sub	sp, #8
   11778:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1177c:	ab02      	add	r3, sp, #8
   1177e:	643b      	str	r3, [r7, #64]	; 0x40
   11780:	e612      	b.n	113a8 <__ssvfscanf_r+0xf14>
   11782:	637b      	str	r3, [r7, #52]	; 0x34
   11784:	0053      	lsls	r3, r2, #1
   11786:	4620      	mov	r0, r4
   11788:	4619      	mov	r1, r3
   1178a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1178c:	f7f9 fdaa 	bl	b2e4 <realloc>
   11790:	4604      	mov	r4, r0
   11792:	2800      	cmp	r0, #0
   11794:	f000 80ad 	beq.w	118f2 <__ssvfscanf_r+0x145e>
   11798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1179a:	1985      	adds	r5, r0, r6
   1179c:	6018      	str	r0, [r3, #0]
   1179e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   117a0:	e475      	b.n	1108e <__ssvfscanf_r+0xbfa>
   117a2:	697d      	ldr	r5, [r7, #20]
   117a4:	4629      	mov	r1, r5
   117a6:	230a      	movs	r3, #10
   117a8:	3101      	adds	r1, #1
   117aa:	4648      	mov	r0, r9
   117ac:	f7fa ff74 	bl	c698 <_strtol_r>
   117b0:	69bb      	ldr	r3, [r7, #24]
   117b2:	1ac2      	subs	r2, r0, r3
   117b4:	e59d      	b.n	112f2 <__ssvfscanf_r+0xe5e>
   117b6:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   117ba:	f853 1b04 	ldr.w	r1, [r3], #4
   117be:	623a      	str	r2, [r7, #32]
   117c0:	64b9      	str	r1, [r7, #72]	; 0x48
   117c2:	633b      	str	r3, [r7, #48]	; 0x30
   117c4:	62ba      	str	r2, [r7, #40]	; 0x28
   117c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   117c8:	f7ff b9b2 	b.w	10b30 <__ssvfscanf_r+0x69c>
   117cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   117ce:	64bc      	str	r4, [r7, #72]	; 0x48
   117d0:	f853 5b04 	ldr.w	r5, [r3], #4
   117d4:	633b      	str	r3, [r7, #48]	; 0x30
   117d6:	e4aa      	b.n	1112e <__ssvfscanf_r+0xc9a>
   117d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   117da:	6aba      	ldr	r2, [r7, #40]	; 0x28
   117dc:	f853 4b04 	ldr.w	r4, [r3], #4
   117e0:	61ba      	str	r2, [r7, #24]
   117e2:	e9c7 2207 	strd	r2, r2, [r7, #28]
   117e6:	633b      	str	r3, [r7, #48]	; 0x30
   117e8:	f7ff ba2a 	b.w	10c40 <__ssvfscanf_r+0x7ac>
   117ec:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   117ee:	6820      	ldr	r0, [r4, #0]
   117f0:	f7f9 fd78 	bl	b2e4 <realloc>
   117f4:	2800      	cmp	r0, #0
   117f6:	f47f aab3 	bne.w	10d60 <__ssvfscanf_r+0x8cc>
   117fa:	e463      	b.n	110c4 <__ssvfscanf_r+0xc30>
   117fc:	4659      	mov	r1, fp
   117fe:	4648      	mov	r0, r9
   11800:	637b      	str	r3, [r7, #52]	; 0x34
   11802:	f001 fff1 	bl	137e8 <__ssrefill_r>
   11806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11808:	2800      	cmp	r0, #0
   1180a:	f43f ac49 	beq.w	110a0 <__ssvfscanf_r+0xc0c>
   1180e:	e44d      	b.n	110ac <__ssvfscanf_r+0xc18>
   11810:	6818      	ldr	r0, [r3, #0]
   11812:	461c      	mov	r4, r3
   11814:	f7f9 fd66 	bl	b2e4 <realloc>
   11818:	2800      	cmp	r0, #0
   1181a:	f43f accc 	beq.w	111b6 <__ssvfscanf_r+0xd22>
   1181e:	6020      	str	r0, [r4, #0]
   11820:	e4c9      	b.n	111b6 <__ssvfscanf_r+0xd22>
   11822:	2500      	movs	r5, #0
   11824:	e637      	b.n	11496 <__ssvfscanf_r+0x1002>
   11826:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   11828:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1182c:	627e      	str	r6, [r7, #36]	; 0x24
   1182e:	4644      	mov	r4, r8
   11830:	2d00      	cmp	r5, #0
   11832:	f43f aa7c 	beq.w	10d2e <__ssvfscanf_r+0x89a>
   11836:	3d01      	subs	r5, #1
   11838:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1183c:	465a      	mov	r2, fp
   1183e:	5d59      	ldrb	r1, [r3, r5]
   11840:	4648      	mov	r0, r9
   11842:	f001 ff91 	bl	13768 <_sungetc_r>
   11846:	2d00      	cmp	r5, #0
   11848:	d1f5      	bne.n	11836 <__ssvfscanf_r+0x13a2>
   1184a:	f7ff ba70 	b.w	10d2e <__ssvfscanf_r+0x89a>
   1184e:	4659      	mov	r1, fp
   11850:	4648      	mov	r0, r9
   11852:	f001 ffc9 	bl	137e8 <__ssrefill_r>
   11856:	2800      	cmp	r0, #0
   11858:	f43f ae22 	beq.w	114a0 <__ssvfscanf_r+0x100c>
   1185c:	627c      	str	r4, [r7, #36]	; 0x24
   1185e:	2d00      	cmp	r5, #0
   11860:	f47e af04 	bne.w	1066c <__ssvfscanf_r+0x1d8>
   11864:	e628      	b.n	114b8 <__ssvfscanf_r+0x1024>
   11866:	627c      	str	r4, [r7, #36]	; 0x24
   11868:	2d00      	cmp	r5, #0
   1186a:	f43f ae25 	beq.w	114b8 <__ssvfscanf_r+0x1024>
   1186e:	3d01      	subs	r5, #1
   11870:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   11874:	465a      	mov	r2, fp
   11876:	5d59      	ldrb	r1, [r3, r5]
   11878:	4648      	mov	r0, r9
   1187a:	f001 ff75 	bl	13768 <_sungetc_r>
   1187e:	2d00      	cmp	r5, #0
   11880:	d1f5      	bne.n	1186e <__ssvfscanf_r+0x13da>
   11882:	e619      	b.n	114b8 <__ssvfscanf_r+0x1024>
   11884:	07e5      	lsls	r5, r4, #31
   11886:	d43c      	bmi.n	11902 <__ssvfscanf_r+0x146e>
   11888:	07a4      	lsls	r4, r4, #30
   1188a:	d53a      	bpl.n	11902 <__ssvfscanf_r+0x146e>
   1188c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1188e:	64f9      	str	r1, [r7, #76]	; 0x4c
   11890:	f853 2b04 	ldr.w	r2, [r3], #4
   11894:	633b      	str	r3, [r7, #48]	; 0x30
   11896:	ea4f 73ea 	mov.w	r3, sl, asr #31
   1189a:	f8c2 a000 	str.w	sl, [r2]
   1189e:	6053      	str	r3, [r2, #4]
   118a0:	f7fe be1f 	b.w	104e2 <__ssvfscanf_r+0x4e>
   118a4:	ee18 9a10 	vmov	r9, s16
   118a8:	461e      	mov	r6, r3
   118aa:	f7ff b814 	b.w	108d6 <__ssvfscanf_r+0x442>
   118ae:	2301      	movs	r3, #1
   118b0:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   118b4:	64bb      	str	r3, [r7, #72]	; 0x48
   118b6:	f7fe bff6 	b.w	108a6 <__ssvfscanf_r+0x412>
   118ba:	f1b8 0f01 	cmp.w	r8, #1
   118be:	bf38      	it	cc
   118c0:	f04f 0801 	movcc.w	r8, #1
   118c4:	f014 0301 	ands.w	r3, r4, #1
   118c8:	d13a      	bne.n	11940 <__ssvfscanf_r+0x14ac>
   118ca:	06e5      	lsls	r5, r4, #27
   118cc:	f100 8136 	bmi.w	11b3c <__ssvfscanf_r+0x16a8>
   118d0:	0624      	lsls	r4, r4, #24
   118d2:	f140 814c 	bpl.w	11b6e <__ssvfscanf_r+0x16da>
   118d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   118d8:	f853 5b04 	ldr.w	r5, [r3], #4
   118dc:	64bb      	str	r3, [r7, #72]	; 0x48
   118de:	2d00      	cmp	r5, #0
   118e0:	f43e aecd 	beq.w	1067e <__ssvfscanf_r+0x1ea>
   118e4:	4640      	mov	r0, r8
   118e6:	f7f9 fa31 	bl	ad4c <malloc>
   118ea:	4603      	mov	r3, r0
   118ec:	2800      	cmp	r0, #0
   118ee:	f040 80dc 	bne.w	11aaa <__ssvfscanf_r+0x1616>
   118f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   118f4:	2b00      	cmp	r3, #0
   118f6:	f000 8081 	beq.w	119fc <__ssvfscanf_r+0x1568>
   118fa:	f8d3 8000 	ldr.w	r8, [r3]
   118fe:	88de      	ldrh	r6, [r3, #6]
   11900:	e712      	b.n	11728 <__ssvfscanf_r+0x1294>
   11902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11904:	64f9      	str	r1, [r7, #76]	; 0x4c
   11906:	f853 2b04 	ldr.w	r2, [r3], #4
   1190a:	f8c2 a000 	str.w	sl, [r2]
   1190e:	633b      	str	r3, [r7, #48]	; 0x30
   11910:	f7fe bde7 	b.w	104e2 <__ssvfscanf_r+0x4e>
   11914:	462b      	mov	r3, r5
   11916:	6abd      	ldr	r5, [r7, #40]	; 0x28
   11918:	42ab      	cmp	r3, r5
   1191a:	f67e aeb0 	bls.w	1067e <__ssvfscanf_r+0x1ea>
   1191e:	461c      	mov	r4, r3
   11920:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   11924:	465a      	mov	r2, fp
   11926:	4648      	mov	r0, r9
   11928:	f001 ff1e 	bl	13768 <_sungetc_r>
   1192c:	42ac      	cmp	r4, r5
   1192e:	d1f7      	bne.n	11920 <__ssvfscanf_r+0x148c>
   11930:	f7fe bea5 	b.w	1067e <__ssvfscanf_r+0x1ea>
   11934:	000130ad 	.word	0x000130ad
   11938:	20000d59 	.word	0x20000d59
   1193c:	20008328 	.word	0x20008328
   11940:	f014 0310 	ands.w	r3, r4, #16
   11944:	637b      	str	r3, [r7, #52]	; 0x34
   11946:	d05e      	beq.n	11a06 <__ssvfscanf_r+0x1572>
   11948:	2500      	movs	r5, #0
   1194a:	63fd      	str	r5, [r7, #60]	; 0x3c
   1194c:	64bd      	str	r5, [r7, #72]	; 0x48
   1194e:	462e      	mov	r6, r5
   11950:	2400      	movs	r4, #0
   11952:	464b      	mov	r3, r9
   11954:	46c1      	mov	r9, r8
   11956:	46a8      	mov	r8, r5
   11958:	4625      	mov	r5, r4
   1195a:	461c      	mov	r4, r3
   1195c:	f7fb f9f8 	bl	cd50 <__locale_mb_cur_max>
   11960:	42a8      	cmp	r0, r5
   11962:	f43e ae83 	beq.w	1066c <__ssvfscanf_r+0x1d8>
   11966:	e9db 3200 	ldrd	r3, r2, [fp]
   1196a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1196e:	3a01      	subs	r2, #1
   11970:	e9cb 3200 	strd	r3, r2, [fp]
   11974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11976:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   1197a:	2a03      	cmp	r2, #3
   1197c:	5541      	strb	r1, [r0, r5]
   1197e:	f105 0301 	add.w	r3, r5, #1
   11982:	f107 0568 	add.w	r5, r7, #104	; 0x68
   11986:	d102      	bne.n	1198e <__ssvfscanf_r+0x14fa>
   11988:	682a      	ldr	r2, [r5, #0]
   1198a:	2a04      	cmp	r2, #4
   1198c:	d006      	beq.n	1199c <__ssvfscanf_r+0x1508>
   1198e:	2208      	movs	r2, #8
   11990:	2100      	movs	r1, #0
   11992:	4628      	mov	r0, r5
   11994:	62bb      	str	r3, [r7, #40]	; 0x28
   11996:	f7fb f911 	bl	cbbc <memset>
   1199a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1199c:	9500      	str	r5, [sp, #0]
   1199e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   119a2:	4631      	mov	r1, r6
   119a4:	4620      	mov	r0, r4
   119a6:	62bb      	str	r3, [r7, #40]	; 0x28
   119a8:	f001 fd0a 	bl	133c0 <_mbrtowc_r>
   119ac:	1c43      	adds	r3, r0, #1
   119ae:	6278      	str	r0, [r7, #36]	; 0x24
   119b0:	f43e ae5c 	beq.w	1066c <__ssvfscanf_r+0x1d8>
   119b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   119b6:	2800      	cmp	r0, #0
   119b8:	f040 8147 	bne.w	11c4a <__ssvfscanf_r+0x17b6>
   119bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   119be:	b902      	cbnz	r2, 119c2 <__ssvfscanf_r+0x152e>
   119c0:	6032      	str	r2, [r6, #0]
   119c2:	449a      	add	sl, r3
   119c4:	f109 39ff 	add.w	r9, r9, #4294967295
   119c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   119ca:	2b00      	cmp	r3, #0
   119cc:	f040 8175 	bne.w	11cba <__ssvfscanf_r+0x1826>
   119d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   119d2:	2b00      	cmp	r3, #0
   119d4:	f000 8170 	beq.w	11cb8 <__ssvfscanf_r+0x1824>
   119d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   119da:	1af5      	subs	r5, r6, r3
   119dc:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   119e0:	f200 816a 	bhi.w	11cb8 <__ssvfscanf_r+0x1824>
   119e4:	4618      	mov	r0, r3
   119e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   119ea:	f7f9 fc7b 	bl	b2e4 <realloc>
   119ee:	63f8      	str	r0, [r7, #60]	; 0x3c
   119f0:	2800      	cmp	r0, #0
   119f2:	f040 815c 	bne.w	11cae <__ssvfscanf_r+0x181a>
   119f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   119f8:	2b00      	cmp	r3, #0
   119fa:	d12d      	bne.n	11a58 <__ssvfscanf_r+0x15c4>
   119fc:	f04f 33ff 	mov.w	r3, #4294967295
   11a00:	647b      	str	r3, [r7, #68]	; 0x44
   11a02:	f7fe be47 	b.w	10694 <__ssvfscanf_r+0x200>
   11a06:	0622      	lsls	r2, r4, #24
   11a08:	f140 808f 	bpl.w	11b2a <__ssvfscanf_r+0x1696>
   11a0c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   11a0e:	f854 3b04 	ldr.w	r3, [r4], #4
   11a12:	64bb      	str	r3, [r7, #72]	; 0x48
   11a14:	2b00      	cmp	r3, #0
   11a16:	f43e ae32 	beq.w	1067e <__ssvfscanf_r+0x1ea>
   11a1a:	2080      	movs	r0, #128	; 0x80
   11a1c:	f7f9 f996 	bl	ad4c <malloc>
   11a20:	4606      	mov	r6, r0
   11a22:	2800      	cmp	r0, #0
   11a24:	d0e7      	beq.n	119f6 <__ssvfscanf_r+0x1562>
   11a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11a28:	6018      	str	r0, [r3, #0]
   11a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11a2c:	88dd      	ldrh	r5, [r3, #6]
   11a2e:	889a      	ldrh	r2, [r3, #4]
   11a30:	4295      	cmp	r5, r2
   11a32:	f0c0 80b3 	bcc.w	11b9c <__ssvfscanf_r+0x1708>
   11a36:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   11a3a:	428a      	cmp	r2, r1
   11a3c:	d856      	bhi.n	11aec <__ssvfscanf_r+0x1658>
   11a3e:	3208      	adds	r2, #8
   11a40:	b293      	uxth	r3, r2
   11a42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11a44:	63fb      	str	r3, [r7, #60]	; 0x3c
   11a46:	0099      	lsls	r1, r3, #2
   11a48:	6810      	ldr	r0, [r2, #0]
   11a4a:	f7f9 fc4b 	bl	b2e4 <realloc>
   11a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11a50:	2800      	cmp	r0, #0
   11a52:	f040 80ae 	bne.w	11bb2 <__ssvfscanf_r+0x171e>
   11a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11a58:	88db      	ldrh	r3, [r3, #6]
   11a5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11a5c:	461e      	mov	r6, r3
   11a5e:	f8d2 8000 	ldr.w	r8, [r2]
   11a62:	e661      	b.n	11728 <__ssvfscanf_r+0x1294>
   11a64:	462b      	mov	r3, r5
   11a66:	6abd      	ldr	r5, [r7, #40]	; 0x28
   11a68:	42ab      	cmp	r3, r5
   11a6a:	f67e ae08 	bls.w	1067e <__ssvfscanf_r+0x1ea>
   11a6e:	461c      	mov	r4, r3
   11a70:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   11a74:	465a      	mov	r2, fp
   11a76:	4648      	mov	r0, r9
   11a78:	f001 fe76 	bl	13768 <_sungetc_r>
   11a7c:	42ac      	cmp	r4, r5
   11a7e:	d1f7      	bne.n	11a70 <__ssvfscanf_r+0x15dc>
   11a80:	f7fe bdfd 	b.w	1067e <__ssvfscanf_r+0x1ea>
   11a84:	4610      	mov	r0, r2
   11a86:	00d9      	lsls	r1, r3, #3
   11a88:	461e      	mov	r6, r3
   11a8a:	f7f9 fc2b 	bl	b2e4 <realloc>
   11a8e:	62b8      	str	r0, [r7, #40]	; 0x28
   11a90:	2800      	cmp	r0, #0
   11a92:	d0b0      	beq.n	119f6 <__ssvfscanf_r+0x1562>
   11a94:	1942      	adds	r2, r0, r5
   11a96:	64ba      	str	r2, [r7, #72]	; 0x48
   11a98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11a9a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   11a9c:	6010      	str	r0, [r2, #0]
   11a9e:	0073      	lsls	r3, r6, #1
   11aa0:	623b      	str	r3, [r7, #32]
   11aa2:	e4f8      	b.n	11496 <__ssvfscanf_r+0x1002>
   11aa4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   11aa8:	e63e      	b.n	11728 <__ssvfscanf_r+0x1294>
   11aaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
   11aac:	6028      	str	r0, [r5, #0]
   11aae:	88ce      	ldrh	r6, [r1, #6]
   11ab0:	888a      	ldrh	r2, [r1, #4]
   11ab2:	4296      	cmp	r6, r2
   11ab4:	f0c0 808e 	bcc.w	11bd4 <__ssvfscanf_r+0x1740>
   11ab8:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   11abc:	428a      	cmp	r2, r1
   11abe:	6338      	str	r0, [r7, #48]	; 0x30
   11ac0:	f240 80a5 	bls.w	11c0e <__ssvfscanf_r+0x177a>
   11ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11ac6:	f8d3 8000 	ldr.w	r8, [r3]
   11aca:	e62d      	b.n	11728 <__ssvfscanf_r+0x1294>
   11acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11ace:	4295      	cmp	r5, r2
   11ad0:	f67e add5 	bls.w	1067e <__ssvfscanf_r+0x1ea>
   11ad4:	462c      	mov	r4, r5
   11ad6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   11ad8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   11adc:	465a      	mov	r2, fp
   11ade:	4648      	mov	r0, r9
   11ae0:	f001 fe42 	bl	13768 <_sungetc_r>
   11ae4:	42ac      	cmp	r4, r5
   11ae6:	d1f7      	bne.n	11ad8 <__ssvfscanf_r+0x1644>
   11ae8:	f7fe bdc9 	b.w	1067e <__ssvfscanf_r+0x1ea>
   11aec:	462b      	mov	r3, r5
   11aee:	e7b4      	b.n	11a5a <__ssvfscanf_r+0x15c6>
   11af0:	f001 fc64 	bl	133bc <_strtoull_r>
   11af4:	e5c1      	b.n	1167a <__ssvfscanf_r+0x11e6>
   11af6:	f8d8 3000 	ldr.w	r3, [r8]
   11afa:	461d      	mov	r5, r3
   11afc:	3301      	adds	r3, #1
   11afe:	f47f a8d5 	bne.w	10cac <__ssvfscanf_r+0x818>
   11b02:	462a      	mov	r2, r5
   11b04:	f7ff b8e8 	b.w	10cd8 <__ssvfscanf_r+0x844>
   11b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11b0a:	6818      	ldr	r0, [r3, #0]
   11b0c:	f001 fcb4 	bl	13478 <iswspace>
   11b10:	2800      	cmp	r0, #0
   11b12:	f47f aea8 	bne.w	11866 <__ssvfscanf_r+0x13d2>
   11b16:	2c03      	cmp	r4, #3
   11b18:	44aa      	add	sl, r5
   11b1a:	f47f a849 	bne.w	10bb0 <__ssvfscanf_r+0x71c>
   11b1e:	6833      	ldr	r3, [r6, #0]
   11b20:	2b04      	cmp	r3, #4
   11b22:	f47f a845 	bne.w	10bb0 <__ssvfscanf_r+0x71c>
   11b26:	f7ff b845 	b.w	10bb4 <__ssvfscanf_r+0x720>
   11b2a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   11b2e:	f853 6b04 	ldr.w	r6, [r3], #4
   11b32:	633b      	str	r3, [r7, #48]	; 0x30
   11b34:	4615      	mov	r5, r2
   11b36:	63fa      	str	r2, [r7, #60]	; 0x3c
   11b38:	64ba      	str	r2, [r7, #72]	; 0x48
   11b3a:	e709      	b.n	11950 <__ssvfscanf_r+0x14bc>
   11b3c:	461c      	mov	r4, r3
   11b3e:	f8db 3004 	ldr.w	r3, [fp, #4]
   11b42:	4598      	cmp	r8, r3
   11b44:	dd39      	ble.n	11bba <__ssvfscanf_r+0x1726>
   11b46:	f8db 2000 	ldr.w	r2, [fp]
   11b4a:	441a      	add	r2, r3
   11b4c:	f8cb 2000 	str.w	r2, [fp]
   11b50:	4659      	mov	r1, fp
   11b52:	4648      	mov	r0, r9
   11b54:	441c      	add	r4, r3
   11b56:	eba8 0803 	sub.w	r8, r8, r3
   11b5a:	f001 fe45 	bl	137e8 <__ssrefill_r>
   11b5e:	2800      	cmp	r0, #0
   11b60:	d0ed      	beq.n	11b3e <__ssvfscanf_r+0x16aa>
   11b62:	2c00      	cmp	r4, #0
   11b64:	f43e ad82 	beq.w	1066c <__ssvfscanf_r+0x1d8>
   11b68:	44a2      	add	sl, r4
   11b6a:	f7fe bcba 	b.w	104e2 <__ssvfscanf_r+0x4e>
   11b6e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   11b70:	4643      	mov	r3, r8
   11b72:	6829      	ldr	r1, [r5, #0]
   11b74:	f8cd b000 	str.w	fp, [sp]
   11b78:	2201      	movs	r2, #1
   11b7a:	4648      	mov	r0, r9
   11b7c:	f001 fe52 	bl	13824 <_sfread_r>
   11b80:	4604      	mov	r4, r0
   11b82:	2800      	cmp	r0, #0
   11b84:	f43e ad72 	beq.w	1066c <__ssvfscanf_r+0x1d8>
   11b88:	3504      	adds	r5, #4
   11b8a:	64bd      	str	r5, [r7, #72]	; 0x48
   11b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   11b8e:	3301      	adds	r3, #1
   11b90:	647b      	str	r3, [r7, #68]	; 0x44
   11b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11b94:	633b      	str	r3, [r7, #48]	; 0x30
   11b96:	44a2      	add	sl, r4
   11b98:	f7fe bca3 	b.w	104e2 <__ssvfscanf_r+0x4e>
   11b9c:	6818      	ldr	r0, [r3, #0]
   11b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11ba0:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   11ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11ba6:	633c      	str	r4, [r7, #48]	; 0x30
   11ba8:	3501      	adds	r5, #1
   11baa:	80dd      	strh	r5, [r3, #6]
   11bac:	63fe      	str	r6, [r7, #60]	; 0x3c
   11bae:	2520      	movs	r5, #32
   11bb0:	e6ce      	b.n	11950 <__ssvfscanf_r+0x14bc>
   11bb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11bb4:	8093      	strh	r3, [r2, #4]
   11bb6:	6010      	str	r0, [r2, #0]
   11bb8:	e7f1      	b.n	11b9e <__ssvfscanf_r+0x170a>
   11bba:	eba3 0308 	sub.w	r3, r3, r8
   11bbe:	f8cb 3004 	str.w	r3, [fp, #4]
   11bc2:	f8db 3000 	ldr.w	r3, [fp]
   11bc6:	4444      	add	r4, r8
   11bc8:	4443      	add	r3, r8
   11bca:	f8cb 3000 	str.w	r3, [fp]
   11bce:	44a2      	add	sl, r4
   11bd0:	f7fe bc87 	b.w	104e2 <__ssvfscanf_r+0x4e>
   11bd4:	680a      	ldr	r2, [r1, #0]
   11bd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   11bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11bda:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   11bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11be0:	3601      	adds	r6, #1
   11be2:	b2b6      	uxth	r6, r6
   11be4:	80d6      	strh	r6, [r2, #6]
   11be6:	4619      	mov	r1, r3
   11be8:	f8cd b000 	str.w	fp, [sp]
   11bec:	4643      	mov	r3, r8
   11bee:	2201      	movs	r2, #1
   11bf0:	4648      	mov	r0, r9
   11bf2:	f001 fe17 	bl	13824 <_sfread_r>
   11bf6:	4604      	mov	r4, r0
   11bf8:	b1d8      	cbz	r0, 11c32 <__ssvfscanf_r+0x179e>
   11bfa:	4580      	cmp	r8, r0
   11bfc:	d9c6      	bls.n	11b8c <__ssvfscanf_r+0x16f8>
   11bfe:	6828      	ldr	r0, [r5, #0]
   11c00:	4621      	mov	r1, r4
   11c02:	f7f9 fb6f 	bl	b2e4 <realloc>
   11c06:	2800      	cmp	r0, #0
   11c08:	d0c0      	beq.n	11b8c <__ssvfscanf_r+0x16f8>
   11c0a:	6028      	str	r0, [r5, #0]
   11c0c:	e7be      	b.n	11b8c <__ssvfscanf_r+0x16f8>
   11c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11c10:	3208      	adds	r2, #8
   11c12:	b294      	uxth	r4, r2
   11c14:	681a      	ldr	r2, [r3, #0]
   11c16:	637a      	str	r2, [r7, #52]	; 0x34
   11c18:	4610      	mov	r0, r2
   11c1a:	00a1      	lsls	r1, r4, #2
   11c1c:	f7f9 fb62 	bl	b2e4 <realloc>
   11c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11c22:	63f8      	str	r0, [r7, #60]	; 0x3c
   11c24:	2800      	cmp	r0, #0
   11c26:	d05b      	beq.n	11ce0 <__ssvfscanf_r+0x184c>
   11c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11c2a:	809c      	strh	r4, [r3, #4]
   11c2c:	6018      	str	r0, [r3, #0]
   11c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11c30:	e7d2      	b.n	11bd8 <__ssvfscanf_r+0x1744>
   11c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   11c34:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   11c38:	2b00      	cmp	r3, #0
   11c3a:	f43f ad75 	beq.w	11728 <__ssvfscanf_r+0x1294>
   11c3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   11c42:	065b      	lsls	r3, r3, #25
   11c44:	f57e ad1d 	bpl.w	10682 <__ssvfscanf_r+0x1ee>
   11c48:	e56a      	b.n	11720 <__ssvfscanf_r+0x128c>
   11c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11c4c:	3202      	adds	r2, #2
   11c4e:	d11d      	bne.n	11c8c <__ssvfscanf_r+0x17f8>
   11c50:	f8db 2004 	ldr.w	r2, [fp, #4]
   11c54:	2a00      	cmp	r2, #0
   11c56:	461d      	mov	r5, r3
   11c58:	f73f ae80 	bgt.w	1195c <__ssvfscanf_r+0x14c8>
   11c5c:	4659      	mov	r1, fp
   11c5e:	4620      	mov	r0, r4
   11c60:	f001 fdc2 	bl	137e8 <__ssrefill_r>
   11c64:	b9e0      	cbnz	r0, 11ca0 <__ssvfscanf_r+0x180c>
   11c66:	f1b9 0f00 	cmp.w	r9, #0
   11c6a:	f47f ae77 	bne.w	1195c <__ssvfscanf_r+0x14c8>
   11c6e:	4645      	mov	r5, r8
   11c70:	46a1      	mov	r9, r4
   11c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11c74:	b123      	cbz	r3, 11c80 <__ssvfscanf_r+0x17ec>
   11c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11c78:	1af1      	subs	r1, r6, r3
   11c7a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   11c7e:	d827      	bhi.n	11cd0 <__ssvfscanf_r+0x183c>
   11c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11c82:	2b00      	cmp	r3, #0
   11c84:	f47e ac2d 	bne.w	104e2 <__ssvfscanf_r+0x4e>
   11c88:	f7ff ba1c 	b.w	110c4 <__ssvfscanf_r+0xc30>
   11c8c:	449a      	add	sl, r3
   11c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11c90:	2b03      	cmp	r3, #3
   11c92:	f47f ae97 	bne.w	119c4 <__ssvfscanf_r+0x1530>
   11c96:	682b      	ldr	r3, [r5, #0]
   11c98:	2b04      	cmp	r3, #4
   11c9a:	f47f ae93 	bne.w	119c4 <__ssvfscanf_r+0x1530>
   11c9e:	e693      	b.n	119c8 <__ssvfscanf_r+0x1534>
   11ca0:	46a1      	mov	r9, r4
   11ca2:	462c      	mov	r4, r5
   11ca4:	4645      	mov	r5, r8
   11ca6:	2c00      	cmp	r4, #0
   11ca8:	d0e3      	beq.n	11c72 <__ssvfscanf_r+0x17de>
   11caa:	f7fe bcdf 	b.w	1066c <__ssvfscanf_r+0x1d8>
   11cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
   11cb0:	1946      	adds	r6, r0, r5
   11cb2:	6010      	str	r0, [r2, #0]
   11cb4:	ea4f 0848 	mov.w	r8, r8, lsl #1
   11cb8:	3604      	adds	r6, #4
   11cba:	f8db 3004 	ldr.w	r3, [fp, #4]
   11cbe:	2b00      	cmp	r3, #0
   11cc0:	f04f 0500 	mov.w	r5, #0
   11cc4:	ddca      	ble.n	11c5c <__ssvfscanf_r+0x17c8>
   11cc6:	f1b9 0f00 	cmp.w	r9, #0
   11cca:	f47f ae47 	bne.w	1195c <__ssvfscanf_r+0x14c8>
   11cce:	e7ce      	b.n	11c6e <__ssvfscanf_r+0x17da>
   11cd0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   11cd2:	6820      	ldr	r0, [r4, #0]
   11cd4:	f7f9 fb06 	bl	b2e4 <realloc>
   11cd8:	2800      	cmp	r0, #0
   11cda:	d0d1      	beq.n	11c80 <__ssvfscanf_r+0x17ec>
   11cdc:	6020      	str	r0, [r4, #0]
   11cde:	e7cf      	b.n	11c80 <__ssvfscanf_r+0x17ec>
   11ce0:	4690      	mov	r8, r2
   11ce2:	e521      	b.n	11728 <__ssvfscanf_r+0x1294>

00011ce4 <_fclose_r>:
   11ce4:	b570      	push	{r4, r5, r6, lr}
   11ce6:	2900      	cmp	r1, #0
   11ce8:	d04b      	beq.n	11d82 <_fclose_r+0x9e>
   11cea:	4606      	mov	r6, r0
   11cec:	460c      	mov	r4, r1
   11cee:	b110      	cbz	r0, 11cf6 <_fclose_r+0x12>
   11cf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11cf2:	2b00      	cmp	r3, #0
   11cf4:	d048      	beq.n	11d88 <_fclose_r+0xa4>
   11cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11cf8:	07d8      	lsls	r0, r3, #31
   11cfa:	d534      	bpl.n	11d66 <_fclose_r+0x82>
   11cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11d00:	2b00      	cmp	r3, #0
   11d02:	d03e      	beq.n	11d82 <_fclose_r+0x9e>
   11d04:	4621      	mov	r1, r4
   11d06:	4630      	mov	r0, r6
   11d08:	f000 f850 	bl	11dac <__sflush_r>
   11d0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11d0e:	4605      	mov	r5, r0
   11d10:	b133      	cbz	r3, 11d20 <_fclose_r+0x3c>
   11d12:	69e1      	ldr	r1, [r4, #28]
   11d14:	4630      	mov	r0, r6
   11d16:	4798      	blx	r3
   11d18:	2800      	cmp	r0, #0
   11d1a:	bfb8      	it	lt
   11d1c:	f04f 35ff 	movlt.w	r5, #4294967295
   11d20:	89a3      	ldrh	r3, [r4, #12]
   11d22:	061a      	lsls	r2, r3, #24
   11d24:	d43c      	bmi.n	11da0 <_fclose_r+0xbc>
   11d26:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11d28:	b141      	cbz	r1, 11d3c <_fclose_r+0x58>
   11d2a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11d2e:	4299      	cmp	r1, r3
   11d30:	d002      	beq.n	11d38 <_fclose_r+0x54>
   11d32:	4630      	mov	r0, r6
   11d34:	f7fb fb96 	bl	d464 <_free_r>
   11d38:	2300      	movs	r3, #0
   11d3a:	6323      	str	r3, [r4, #48]	; 0x30
   11d3c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   11d3e:	b121      	cbz	r1, 11d4a <_fclose_r+0x66>
   11d40:	4630      	mov	r0, r6
   11d42:	f7fb fb8f 	bl	d464 <_free_r>
   11d46:	2300      	movs	r3, #0
   11d48:	6463      	str	r3, [r4, #68]	; 0x44
   11d4a:	f7fa fd61 	bl	c810 <__sfp_lock_acquire>
   11d4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11d50:	2200      	movs	r2, #0
   11d52:	07db      	lsls	r3, r3, #31
   11d54:	81a2      	strh	r2, [r4, #12]
   11d56:	d51f      	bpl.n	11d98 <_fclose_r+0xb4>
   11d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11d5a:	f7fb f891 	bl	ce80 <__retarget_lock_close_recursive>
   11d5e:	f7fa fd5d 	bl	c81c <__sfp_lock_release>
   11d62:	4628      	mov	r0, r5
   11d64:	bd70      	pop	{r4, r5, r6, pc}
   11d66:	89a3      	ldrh	r3, [r4, #12]
   11d68:	0599      	lsls	r1, r3, #22
   11d6a:	d4cb      	bmi.n	11d04 <_fclose_r+0x20>
   11d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11d6e:	f7fb f889 	bl	ce84 <__retarget_lock_acquire_recursive>
   11d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11d76:	2b00      	cmp	r3, #0
   11d78:	d1c4      	bne.n	11d04 <_fclose_r+0x20>
   11d7a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   11d7c:	f015 0501 	ands.w	r5, r5, #1
   11d80:	d005      	beq.n	11d8e <_fclose_r+0xaa>
   11d82:	2500      	movs	r5, #0
   11d84:	4628      	mov	r0, r5
   11d86:	bd70      	pop	{r4, r5, r6, pc}
   11d88:	f7fa fd24 	bl	c7d4 <__sinit>
   11d8c:	e7b3      	b.n	11cf6 <_fclose_r+0x12>
   11d8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11d90:	f7fb f87a 	bl	ce88 <__retarget_lock_release_recursive>
   11d94:	4628      	mov	r0, r5
   11d96:	bd70      	pop	{r4, r5, r6, pc}
   11d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11d9a:	f7fb f875 	bl	ce88 <__retarget_lock_release_recursive>
   11d9e:	e7db      	b.n	11d58 <_fclose_r+0x74>
   11da0:	6921      	ldr	r1, [r4, #16]
   11da2:	4630      	mov	r0, r6
   11da4:	f7fb fb5e 	bl	d464 <_free_r>
   11da8:	e7bd      	b.n	11d26 <_fclose_r+0x42>
   11daa:	bf00      	nop

00011dac <__sflush_r>:
   11dac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   11db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11db4:	460c      	mov	r4, r1
   11db6:	0711      	lsls	r1, r2, #28
   11db8:	4680      	mov	r8, r0
   11dba:	d447      	bmi.n	11e4c <__sflush_r+0xa0>
   11dbc:	6863      	ldr	r3, [r4, #4]
   11dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   11dc2:	2b00      	cmp	r3, #0
   11dc4:	81a2      	strh	r2, [r4, #12]
   11dc6:	dd5e      	ble.n	11e86 <__sflush_r+0xda>
   11dc8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   11dca:	2d00      	cmp	r5, #0
   11dcc:	d058      	beq.n	11e80 <__sflush_r+0xd4>
   11dce:	2300      	movs	r3, #0
   11dd0:	f8d8 6000 	ldr.w	r6, [r8]
   11dd4:	f8c8 3000 	str.w	r3, [r8]
   11dd8:	b293      	uxth	r3, r2
   11dda:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   11dde:	d156      	bne.n	11e8e <__sflush_r+0xe2>
   11de0:	2301      	movs	r3, #1
   11de2:	69e1      	ldr	r1, [r4, #28]
   11de4:	4640      	mov	r0, r8
   11de6:	47a8      	blx	r5
   11de8:	1c43      	adds	r3, r0, #1
   11dea:	d067      	beq.n	11ebc <__sflush_r+0x110>
   11dec:	89a3      	ldrh	r3, [r4, #12]
   11dee:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   11df0:	075f      	lsls	r7, r3, #29
   11df2:	d505      	bpl.n	11e00 <__sflush_r+0x54>
   11df4:	6863      	ldr	r3, [r4, #4]
   11df6:	1ac0      	subs	r0, r0, r3
   11df8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11dfa:	b10b      	cbz	r3, 11e00 <__sflush_r+0x54>
   11dfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11dfe:	1ac0      	subs	r0, r0, r3
   11e00:	69e1      	ldr	r1, [r4, #28]
   11e02:	4602      	mov	r2, r0
   11e04:	2300      	movs	r3, #0
   11e06:	4640      	mov	r0, r8
   11e08:	47a8      	blx	r5
   11e0a:	1c41      	adds	r1, r0, #1
   11e0c:	d141      	bne.n	11e92 <__sflush_r+0xe6>
   11e0e:	f8d8 3000 	ldr.w	r3, [r8]
   11e12:	2b00      	cmp	r3, #0
   11e14:	d03d      	beq.n	11e92 <__sflush_r+0xe6>
   11e16:	2b1d      	cmp	r3, #29
   11e18:	d001      	beq.n	11e1e <__sflush_r+0x72>
   11e1a:	2b16      	cmp	r3, #22
   11e1c:	d156      	bne.n	11ecc <__sflush_r+0x120>
   11e1e:	89a3      	ldrh	r3, [r4, #12]
   11e20:	6922      	ldr	r2, [r4, #16]
   11e22:	6022      	str	r2, [r4, #0]
   11e24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   11e28:	2100      	movs	r1, #0
   11e2a:	6061      	str	r1, [r4, #4]
   11e2c:	81a3      	strh	r3, [r4, #12]
   11e2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11e30:	f8c8 6000 	str.w	r6, [r8]
   11e34:	b321      	cbz	r1, 11e80 <__sflush_r+0xd4>
   11e36:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11e3a:	4299      	cmp	r1, r3
   11e3c:	d002      	beq.n	11e44 <__sflush_r+0x98>
   11e3e:	4640      	mov	r0, r8
   11e40:	f7fb fb10 	bl	d464 <_free_r>
   11e44:	2000      	movs	r0, #0
   11e46:	6320      	str	r0, [r4, #48]	; 0x30
   11e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e4c:	6926      	ldr	r6, [r4, #16]
   11e4e:	b1be      	cbz	r6, 11e80 <__sflush_r+0xd4>
   11e50:	b293      	uxth	r3, r2
   11e52:	6825      	ldr	r5, [r4, #0]
   11e54:	6026      	str	r6, [r4, #0]
   11e56:	079a      	lsls	r2, r3, #30
   11e58:	bf0c      	ite	eq
   11e5a:	6963      	ldreq	r3, [r4, #20]
   11e5c:	2300      	movne	r3, #0
   11e5e:	1bad      	subs	r5, r5, r6
   11e60:	60a3      	str	r3, [r4, #8]
   11e62:	e00b      	b.n	11e7c <__sflush_r+0xd0>
   11e64:	462b      	mov	r3, r5
   11e66:	4632      	mov	r2, r6
   11e68:	69e1      	ldr	r1, [r4, #28]
   11e6a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11e6c:	4640      	mov	r0, r8
   11e6e:	47b8      	blx	r7
   11e70:	f1b0 0c00 	subs.w	ip, r0, #0
   11e74:	eba5 050c 	sub.w	r5, r5, ip
   11e78:	4466      	add	r6, ip
   11e7a:	dd17      	ble.n	11eac <__sflush_r+0x100>
   11e7c:	2d00      	cmp	r5, #0
   11e7e:	dcf1      	bgt.n	11e64 <__sflush_r+0xb8>
   11e80:	2000      	movs	r0, #0
   11e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11e88:	2b00      	cmp	r3, #0
   11e8a:	dc9d      	bgt.n	11dc8 <__sflush_r+0x1c>
   11e8c:	e7f8      	b.n	11e80 <__sflush_r+0xd4>
   11e8e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   11e90:	e7ae      	b.n	11df0 <__sflush_r+0x44>
   11e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11e96:	6922      	ldr	r2, [r4, #16]
   11e98:	6022      	str	r2, [r4, #0]
   11e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   11e9e:	81a3      	strh	r3, [r4, #12]
   11ea0:	2200      	movs	r2, #0
   11ea2:	04db      	lsls	r3, r3, #19
   11ea4:	6062      	str	r2, [r4, #4]
   11ea6:	d5c2      	bpl.n	11e2e <__sflush_r+0x82>
   11ea8:	6520      	str	r0, [r4, #80]	; 0x50
   11eaa:	e7c0      	b.n	11e2e <__sflush_r+0x82>
   11eac:	89a3      	ldrh	r3, [r4, #12]
   11eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11eb2:	f04f 30ff 	mov.w	r0, #4294967295
   11eb6:	81a3      	strh	r3, [r4, #12]
   11eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ebc:	f8d8 3000 	ldr.w	r3, [r8]
   11ec0:	2b00      	cmp	r3, #0
   11ec2:	d093      	beq.n	11dec <__sflush_r+0x40>
   11ec4:	2b1d      	cmp	r3, #29
   11ec6:	d006      	beq.n	11ed6 <__sflush_r+0x12a>
   11ec8:	2b16      	cmp	r3, #22
   11eca:	d004      	beq.n	11ed6 <__sflush_r+0x12a>
   11ecc:	89a3      	ldrh	r3, [r4, #12]
   11ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11ed2:	81a3      	strh	r3, [r4, #12]
   11ed4:	e7d5      	b.n	11e82 <__sflush_r+0xd6>
   11ed6:	f8c8 6000 	str.w	r6, [r8]
   11eda:	e7d1      	b.n	11e80 <__sflush_r+0xd4>

00011edc <_fflush_r>:
   11edc:	b538      	push	{r3, r4, r5, lr}
   11ede:	460c      	mov	r4, r1
   11ee0:	4605      	mov	r5, r0
   11ee2:	b108      	cbz	r0, 11ee8 <_fflush_r+0xc>
   11ee4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11ee6:	b303      	cbz	r3, 11f2a <_fflush_r+0x4e>
   11ee8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   11eec:	b188      	cbz	r0, 11f12 <_fflush_r+0x36>
   11eee:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11ef0:	07db      	lsls	r3, r3, #31
   11ef2:	d401      	bmi.n	11ef8 <_fflush_r+0x1c>
   11ef4:	0581      	lsls	r1, r0, #22
   11ef6:	d50f      	bpl.n	11f18 <_fflush_r+0x3c>
   11ef8:	4628      	mov	r0, r5
   11efa:	4621      	mov	r1, r4
   11efc:	f7ff ff56 	bl	11dac <__sflush_r>
   11f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11f02:	07da      	lsls	r2, r3, #31
   11f04:	4605      	mov	r5, r0
   11f06:	d402      	bmi.n	11f0e <_fflush_r+0x32>
   11f08:	89a3      	ldrh	r3, [r4, #12]
   11f0a:	059b      	lsls	r3, r3, #22
   11f0c:	d508      	bpl.n	11f20 <_fflush_r+0x44>
   11f0e:	4628      	mov	r0, r5
   11f10:	bd38      	pop	{r3, r4, r5, pc}
   11f12:	4605      	mov	r5, r0
   11f14:	4628      	mov	r0, r5
   11f16:	bd38      	pop	{r3, r4, r5, pc}
   11f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11f1a:	f7fa ffb3 	bl	ce84 <__retarget_lock_acquire_recursive>
   11f1e:	e7eb      	b.n	11ef8 <_fflush_r+0x1c>
   11f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11f22:	f7fa ffb1 	bl	ce88 <__retarget_lock_release_recursive>
   11f26:	4628      	mov	r0, r5
   11f28:	bd38      	pop	{r3, r4, r5, pc}
   11f2a:	f7fa fc53 	bl	c7d4 <__sinit>
   11f2e:	e7db      	b.n	11ee8 <_fflush_r+0xc>

00011f30 <__sccl>:
   11f30:	b570      	push	{r4, r5, r6, lr}
   11f32:	780c      	ldrb	r4, [r1, #0]
   11f34:	2c5e      	cmp	r4, #94	; 0x5e
   11f36:	4686      	mov	lr, r0
   11f38:	d01e      	beq.n	11f78 <__sccl+0x48>
   11f3a:	2200      	movs	r2, #0
   11f3c:	1c48      	adds	r0, r1, #1
   11f3e:	4694      	mov	ip, r2
   11f40:	f10e 33ff 	add.w	r3, lr, #4294967295
   11f44:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   11f48:	f803 2f01 	strb.w	r2, [r3, #1]!
   11f4c:	428b      	cmp	r3, r1
   11f4e:	d1fb      	bne.n	11f48 <__sccl+0x18>
   11f50:	b184      	cbz	r4, 11f74 <__sccl+0x44>
   11f52:	f08c 0101 	eor.w	r1, ip, #1
   11f56:	f80e 1004 	strb.w	r1, [lr, r4]
   11f5a:	1c45      	adds	r5, r0, #1
   11f5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   11f60:	2b2d      	cmp	r3, #45	; 0x2d
   11f62:	d00e      	beq.n	11f82 <__sccl+0x52>
   11f64:	2b5d      	cmp	r3, #93	; 0x5d
   11f66:	d003      	beq.n	11f70 <__sccl+0x40>
   11f68:	b11b      	cbz	r3, 11f72 <__sccl+0x42>
   11f6a:	461c      	mov	r4, r3
   11f6c:	4628      	mov	r0, r5
   11f6e:	e7f2      	b.n	11f56 <__sccl+0x26>
   11f70:	4628      	mov	r0, r5
   11f72:	bd70      	pop	{r4, r5, r6, pc}
   11f74:	3801      	subs	r0, #1
   11f76:	bd70      	pop	{r4, r5, r6, pc}
   11f78:	2201      	movs	r2, #1
   11f7a:	784c      	ldrb	r4, [r1, #1]
   11f7c:	1c88      	adds	r0, r1, #2
   11f7e:	4694      	mov	ip, r2
   11f80:	e7de      	b.n	11f40 <__sccl+0x10>
   11f82:	f890 c001 	ldrb.w	ip, [r0, #1]
   11f86:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   11f8a:	d0ee      	beq.n	11f6a <__sccl+0x3a>
   11f8c:	4564      	cmp	r4, ip
   11f8e:	dcec      	bgt.n	11f6a <__sccl+0x3a>
   11f90:	1c66      	adds	r6, r4, #1
   11f92:	3002      	adds	r0, #2
   11f94:	eb0e 0206 	add.w	r2, lr, r6
   11f98:	f802 1b01 	strb.w	r1, [r2], #1
   11f9c:	eba2 030e 	sub.w	r3, r2, lr
   11fa0:	3b01      	subs	r3, #1
   11fa2:	459c      	cmp	ip, r3
   11fa4:	dcf8      	bgt.n	11f98 <__sccl+0x68>
   11fa6:	ebac 0304 	sub.w	r3, ip, r4
   11faa:	3b01      	subs	r3, #1
   11fac:	4564      	cmp	r4, ip
   11fae:	bfa8      	it	ge
   11fb0:	2300      	movge	r3, #0
   11fb2:	3502      	adds	r5, #2
   11fb4:	199c      	adds	r4, r3, r6
   11fb6:	e7d1      	b.n	11f5c <__sccl+0x2c>

00011fb8 <stpncpy>:
   11fb8:	ea41 0300 	orr.w	r3, r1, r0
   11fbc:	079b      	lsls	r3, r3, #30
   11fbe:	b430      	push	{r4, r5}
   11fc0:	d101      	bne.n	11fc6 <stpncpy+0xe>
   11fc2:	2a03      	cmp	r2, #3
   11fc4:	d80f      	bhi.n	11fe6 <stpncpy+0x2e>
   11fc6:	f101 3cff 	add.w	ip, r1, #4294967295
   11fca:	e007      	b.n	11fdc <stpncpy+0x24>
   11fcc:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   11fd0:	f803 1b01 	strb.w	r1, [r3], #1
   11fd4:	1e54      	subs	r4, r2, #1
   11fd6:	b1c1      	cbz	r1, 1200a <stpncpy+0x52>
   11fd8:	4622      	mov	r2, r4
   11fda:	4618      	mov	r0, r3
   11fdc:	4603      	mov	r3, r0
   11fde:	2a00      	cmp	r2, #0
   11fe0:	d1f4      	bne.n	11fcc <stpncpy+0x14>
   11fe2:	bc30      	pop	{r4, r5}
   11fe4:	4770      	bx	lr
   11fe6:	460b      	mov	r3, r1
   11fe8:	4619      	mov	r1, r3
   11fea:	f853 5b04 	ldr.w	r5, [r3], #4
   11fee:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   11ff2:	ea24 0405 	bic.w	r4, r4, r5
   11ff6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   11ffa:	d1e4      	bne.n	11fc6 <stpncpy+0xe>
   11ffc:	3a04      	subs	r2, #4
   11ffe:	2a03      	cmp	r2, #3
   12000:	f840 5b04 	str.w	r5, [r0], #4
   12004:	4619      	mov	r1, r3
   12006:	d8ef      	bhi.n	11fe8 <stpncpy+0x30>
   12008:	e7dd      	b.n	11fc6 <stpncpy+0xe>
   1200a:	4402      	add	r2, r0
   1200c:	2c00      	cmp	r4, #0
   1200e:	d0e8      	beq.n	11fe2 <stpncpy+0x2a>
   12010:	f803 1b01 	strb.w	r1, [r3], #1
   12014:	4293      	cmp	r3, r2
   12016:	d1fb      	bne.n	12010 <stpncpy+0x58>
   12018:	bc30      	pop	{r4, r5}
   1201a:	4770      	bx	lr

0001201c <_localeconv_r>:
   1201c:	4800      	ldr	r0, [pc, #0]	; (12020 <_localeconv_r+0x4>)
   1201e:	4770      	bx	lr
   12020:	200089dc 	.word	0x200089dc
   12024:	00000000 	.word	0x00000000

00012028 <frexp>:
   12028:	b430      	push	{r4, r5}
   1202a:	b082      	sub	sp, #8
   1202c:	ed8d 0b00 	vstr	d0, [sp]
   12030:	9a01      	ldr	r2, [sp, #4]
   12032:	4c19      	ldr	r4, [pc, #100]	; (12098 <frexp+0x70>)
   12034:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   12038:	2100      	movs	r1, #0
   1203a:	42a3      	cmp	r3, r4
   1203c:	6001      	str	r1, [r0, #0]
   1203e:	dc21      	bgt.n	12084 <frexp+0x5c>
   12040:	9c00      	ldr	r4, [sp, #0]
   12042:	431c      	orrs	r4, r3
   12044:	d01e      	beq.n	12084 <frexp+0x5c>
   12046:	4c15      	ldr	r4, [pc, #84]	; (1209c <frexp+0x74>)
   12048:	4014      	ands	r4, r2
   1204a:	b954      	cbnz	r4, 12062 <frexp+0x3a>
   1204c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 12090 <frexp+0x68>
   12050:	ee20 7b07 	vmul.f64	d7, d0, d7
   12054:	ed8d 7b00 	vstr	d7, [sp]
   12058:	9a01      	ldr	r2, [sp, #4]
   1205a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   1205e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   12062:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   12066:	e9dd 4500 	ldrd	r4, r5, [sp]
   1206a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   1206e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   12072:	151b      	asrs	r3, r3, #20
   12074:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   12078:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1207c:	e9cd 4500 	strd	r4, r5, [sp]
   12080:	440b      	add	r3, r1
   12082:	6003      	str	r3, [r0, #0]
   12084:	ed9d 0b00 	vldr	d0, [sp]
   12088:	b002      	add	sp, #8
   1208a:	bc30      	pop	{r4, r5}
   1208c:	4770      	bx	lr
   1208e:	bf00      	nop
   12090:	00000000 	.word	0x00000000
   12094:	43500000 	.word	0x43500000
   12098:	7fefffff 	.word	0x7fefffff
   1209c:	7ff00000 	.word	0x7ff00000

000120a0 <__assert_func>:
   120a0:	b500      	push	{lr}
   120a2:	4c0b      	ldr	r4, [pc, #44]	; (120d0 <__assert_func+0x30>)
   120a4:	6825      	ldr	r5, [r4, #0]
   120a6:	4614      	mov	r4, r2
   120a8:	68ee      	ldr	r6, [r5, #12]
   120aa:	461a      	mov	r2, r3
   120ac:	b085      	sub	sp, #20
   120ae:	4603      	mov	r3, r0
   120b0:	460d      	mov	r5, r1
   120b2:	b14c      	cbz	r4, 120c8 <__assert_func+0x28>
   120b4:	4907      	ldr	r1, [pc, #28]	; (120d4 <__assert_func+0x34>)
   120b6:	9500      	str	r5, [sp, #0]
   120b8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   120bc:	4630      	mov	r0, r6
   120be:	4906      	ldr	r1, [pc, #24]	; (120d8 <__assert_func+0x38>)
   120c0:	f001 fabe 	bl	13640 <fiprintf>
   120c4:	f7f6 fcd6 	bl	8a74 <abort>
   120c8:	4904      	ldr	r1, [pc, #16]	; (120dc <__assert_func+0x3c>)
   120ca:	460c      	mov	r4, r1
   120cc:	e7f3      	b.n	120b6 <__assert_func+0x16>
   120ce:	bf00      	nop
   120d0:	20008e74 	.word	0x20008e74
   120d4:	20000b3c 	.word	0x20000b3c
   120d8:	20000b4c 	.word	0x20000b4c
   120dc:	20008328 	.word	0x20008328

000120e0 <_calloc_r>:
   120e0:	b538      	push	{r3, r4, r5, lr}
   120e2:	fba1 1402 	umull	r1, r4, r1, r2
   120e6:	bb8c      	cbnz	r4, 1214c <_calloc_r+0x6c>
   120e8:	f7f8 fe40 	bl	ad6c <_malloc_r>
   120ec:	4605      	mov	r5, r0
   120ee:	b1e0      	cbz	r0, 1212a <_calloc_r+0x4a>
   120f0:	f850 2c04 	ldr.w	r2, [r0, #-4]
   120f4:	f022 0203 	bic.w	r2, r2, #3
   120f8:	3a04      	subs	r2, #4
   120fa:	2a24      	cmp	r2, #36	; 0x24
   120fc:	d817      	bhi.n	1212e <_calloc_r+0x4e>
   120fe:	2a13      	cmp	r2, #19
   12100:	d91a      	bls.n	12138 <_calloc_r+0x58>
   12102:	2a1b      	cmp	r2, #27
   12104:	e9c0 4400 	strd	r4, r4, [r0]
   12108:	d91d      	bls.n	12146 <_calloc_r+0x66>
   1210a:	2a24      	cmp	r2, #36	; 0x24
   1210c:	bf14      	ite	ne
   1210e:	f100 0210 	addne.w	r2, r0, #16
   12112:	f100 0218 	addeq.w	r2, r0, #24
   12116:	f04f 0300 	mov.w	r3, #0
   1211a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   1211e:	bf04      	itt	eq
   12120:	6104      	streq	r4, [r0, #16]
   12122:	6144      	streq	r4, [r0, #20]
   12124:	e9c2 3300 	strd	r3, r3, [r2]
   12128:	6093      	str	r3, [r2, #8]
   1212a:	4628      	mov	r0, r5
   1212c:	bd38      	pop	{r3, r4, r5, pc}
   1212e:	4621      	mov	r1, r4
   12130:	f7fa fd44 	bl	cbbc <memset>
   12134:	4628      	mov	r0, r5
   12136:	bd38      	pop	{r3, r4, r5, pc}
   12138:	4602      	mov	r2, r0
   1213a:	2300      	movs	r3, #0
   1213c:	e9c2 3300 	strd	r3, r3, [r2]
   12140:	6093      	str	r3, [r2, #8]
   12142:	4628      	mov	r0, r5
   12144:	bd38      	pop	{r3, r4, r5, pc}
   12146:	f100 0208 	add.w	r2, r0, #8
   1214a:	e7f6      	b.n	1213a <_calloc_r+0x5a>
   1214c:	f7fa fe6c 	bl	ce28 <__errno>
   12150:	230c      	movs	r3, #12
   12152:	2500      	movs	r5, #0
   12154:	6003      	str	r3, [r0, #0]
   12156:	e7e8      	b.n	1212a <_calloc_r+0x4a>

00012158 <quorem>:
   12158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1215c:	6903      	ldr	r3, [r0, #16]
   1215e:	690c      	ldr	r4, [r1, #16]
   12160:	42a3      	cmp	r3, r4
   12162:	b083      	sub	sp, #12
   12164:	f2c0 8087 	blt.w	12276 <quorem+0x11e>
   12168:	3c01      	subs	r4, #1
   1216a:	f101 0514 	add.w	r5, r1, #20
   1216e:	00a3      	lsls	r3, r4, #2
   12170:	f100 0814 	add.w	r8, r0, #20
   12174:	9300      	str	r3, [sp, #0]
   12176:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1217a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1217e:	3301      	adds	r3, #1
   12180:	4681      	mov	r9, r0
   12182:	429a      	cmp	r2, r3
   12184:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   12188:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   1218c:	9001      	str	r0, [sp, #4]
   1218e:	fbb2 f6f3 	udiv	r6, r2, r3
   12192:	d33b      	bcc.n	1220c <quorem+0xb4>
   12194:	f04f 0c00 	mov.w	ip, #0
   12198:	46ae      	mov	lr, r5
   1219a:	4640      	mov	r0, r8
   1219c:	46e2      	mov	sl, ip
   1219e:	4663      	mov	r3, ip
   121a0:	f85e bb04 	ldr.w	fp, [lr], #4
   121a4:	6802      	ldr	r2, [r0, #0]
   121a6:	fa1f fc8b 	uxth.w	ip, fp
   121aa:	fb06 330c 	mla	r3, r6, ip, r3
   121ae:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   121b2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   121b6:	fb06 cc0b 	mla	ip, r6, fp, ip
   121ba:	b29b      	uxth	r3, r3
   121bc:	ebaa 0303 	sub.w	r3, sl, r3
   121c0:	fa1f fa8c 	uxth.w	sl, ip
   121c4:	fa13 f382 	uxtah	r3, r3, r2
   121c8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   121cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
   121d0:	b29b      	uxth	r3, r3
   121d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   121d6:	4577      	cmp	r7, lr
   121d8:	f840 3b04 	str.w	r3, [r0], #4
   121dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
   121e0:	ea4f 431c 	mov.w	r3, ip, lsr #16
   121e4:	d2dc      	bcs.n	121a0 <quorem+0x48>
   121e6:	9b00      	ldr	r3, [sp, #0]
   121e8:	f858 3003 	ldr.w	r3, [r8, r3]
   121ec:	b973      	cbnz	r3, 1220c <quorem+0xb4>
   121ee:	9b01      	ldr	r3, [sp, #4]
   121f0:	3b04      	subs	r3, #4
   121f2:	4598      	cmp	r8, r3
   121f4:	d304      	bcc.n	12200 <quorem+0xa8>
   121f6:	e007      	b.n	12208 <quorem+0xb0>
   121f8:	4598      	cmp	r8, r3
   121fa:	f104 34ff 	add.w	r4, r4, #4294967295
   121fe:	d203      	bcs.n	12208 <quorem+0xb0>
   12200:	f853 2904 	ldr.w	r2, [r3], #-4
   12204:	2a00      	cmp	r2, #0
   12206:	d0f7      	beq.n	121f8 <quorem+0xa0>
   12208:	f8c9 4010 	str.w	r4, [r9, #16]
   1220c:	4648      	mov	r0, r9
   1220e:	f7fc f933 	bl	e478 <__mcmp>
   12212:	2800      	cmp	r0, #0
   12214:	db2b      	blt.n	1226e <quorem+0x116>
   12216:	3601      	adds	r6, #1
   12218:	4641      	mov	r1, r8
   1221a:	2300      	movs	r3, #0
   1221c:	f855 0b04 	ldr.w	r0, [r5], #4
   12220:	f8d1 c000 	ldr.w	ip, [r1]
   12224:	b282      	uxth	r2, r0
   12226:	1a9a      	subs	r2, r3, r2
   12228:	0c03      	lsrs	r3, r0, #16
   1222a:	fa12 f28c 	uxtah	r2, r2, ip
   1222e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   12232:	eb03 4322 	add.w	r3, r3, r2, asr #16
   12236:	b292      	uxth	r2, r2
   12238:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1223c:	42af      	cmp	r7, r5
   1223e:	f841 2b04 	str.w	r2, [r1], #4
   12242:	ea4f 4323 	mov.w	r3, r3, asr #16
   12246:	d2e9      	bcs.n	1221c <quorem+0xc4>
   12248:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1224c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   12250:	b96a      	cbnz	r2, 1226e <quorem+0x116>
   12252:	3b04      	subs	r3, #4
   12254:	4598      	cmp	r8, r3
   12256:	d304      	bcc.n	12262 <quorem+0x10a>
   12258:	e007      	b.n	1226a <quorem+0x112>
   1225a:	4598      	cmp	r8, r3
   1225c:	f104 34ff 	add.w	r4, r4, #4294967295
   12260:	d203      	bcs.n	1226a <quorem+0x112>
   12262:	f853 2904 	ldr.w	r2, [r3], #-4
   12266:	2a00      	cmp	r2, #0
   12268:	d0f7      	beq.n	1225a <quorem+0x102>
   1226a:	f8c9 4010 	str.w	r4, [r9, #16]
   1226e:	4630      	mov	r0, r6
   12270:	b003      	add	sp, #12
   12272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12276:	2000      	movs	r0, #0
   12278:	b003      	add	sp, #12
   1227a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1227e:	bf00      	nop

00012280 <_dtoa_r>:
   12280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12284:	ed2d 8b02 	vpush	{d8}
   12288:	b08f      	sub	sp, #60	; 0x3c
   1228a:	ed8d 0b02 	vstr	d0, [sp, #8]
   1228e:	9101      	str	r1, [sp, #4]
   12290:	6b81      	ldr	r1, [r0, #56]	; 0x38
   12292:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   12294:	9305      	str	r3, [sp, #20]
   12296:	ec57 6b10 	vmov	r6, r7, d0
   1229a:	4604      	mov	r4, r0
   1229c:	4693      	mov	fp, r2
   1229e:	b141      	cbz	r1, 122b2 <_dtoa_r+0x32>
   122a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   122a2:	604a      	str	r2, [r1, #4]
   122a4:	2301      	movs	r3, #1
   122a6:	4093      	lsls	r3, r2
   122a8:	608b      	str	r3, [r1, #8]
   122aa:	f7fb fe2d 	bl	df08 <_Bfree>
   122ae:	2300      	movs	r3, #0
   122b0:	63a3      	str	r3, [r4, #56]	; 0x38
   122b2:	f1b7 0800 	subs.w	r8, r7, #0
   122b6:	bfb4      	ite	lt
   122b8:	2301      	movlt	r3, #1
   122ba:	2300      	movge	r3, #0
   122bc:	602b      	str	r3, [r5, #0]
   122be:	4bbe      	ldr	r3, [pc, #760]	; (125b8 <_dtoa_r+0x338>)
   122c0:	bfbc      	itt	lt
   122c2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   122c6:	f8cd 800c 	strlt.w	r8, [sp, #12]
   122ca:	ea33 0308 	bics.w	r3, r3, r8
   122ce:	f000 809f 	beq.w	12410 <_dtoa_r+0x190>
   122d2:	ed9d 8b02 	vldr	d8, [sp, #8]
   122d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
   122da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   122de:	d111      	bne.n	12304 <_dtoa_r+0x84>
   122e0:	9a05      	ldr	r2, [sp, #20]
   122e2:	2301      	movs	r3, #1
   122e4:	6013      	str	r3, [r2, #0]
   122e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   122e8:	2b00      	cmp	r3, #0
   122ea:	f000 823f 	beq.w	1276c <_dtoa_r+0x4ec>
   122ee:	4bb3      	ldr	r3, [pc, #716]	; (125bc <_dtoa_r+0x33c>)
   122f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   122f2:	6013      	str	r3, [r2, #0]
   122f4:	3b01      	subs	r3, #1
   122f6:	9300      	str	r3, [sp, #0]
   122f8:	9800      	ldr	r0, [sp, #0]
   122fa:	b00f      	add	sp, #60	; 0x3c
   122fc:	ecbd 8b02 	vpop	{d8}
   12300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12304:	aa0c      	add	r2, sp, #48	; 0x30
   12306:	a90d      	add	r1, sp, #52	; 0x34
   12308:	4620      	mov	r0, r4
   1230a:	eeb0 0b48 	vmov.f64	d0, d8
   1230e:	f7fc fa13 	bl	e738 <__d2b>
   12312:	ea5f 5318 	movs.w	r3, r8, lsr #20
   12316:	4605      	mov	r5, r0
   12318:	f040 8092 	bne.w	12440 <_dtoa_r+0x1c0>
   1231c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   12320:	440b      	add	r3, r1
   12322:	f203 4232 	addw	r2, r3, #1074	; 0x432
   12326:	2a20      	cmp	r2, #32
   12328:	f340 82fa 	ble.w	12920 <_dtoa_r+0x6a0>
   1232c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   12330:	fa08 f802 	lsl.w	r8, r8, r2
   12334:	f203 4212 	addw	r2, r3, #1042	; 0x412
   12338:	40d6      	lsrs	r6, r2
   1233a:	ea48 0206 	orr.w	r2, r8, r6
   1233e:	ee07 2a10 	vmov	s14, r2
   12342:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   12346:	1e58      	subs	r0, r3, #1
   12348:	ee17 6a90 	vmov	r6, s15
   1234c:	ec53 2b17 	vmov	r2, r3, d7
   12350:	f04f 0a01 	mov.w	sl, #1
   12354:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   12358:	ed9f 3b91 	vldr	d3, [pc, #580]	; 125a0 <_dtoa_r+0x320>
   1235c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 125a8 <_dtoa_r+0x328>
   12360:	ed9f 5b93 	vldr	d5, [pc, #588]	; 125b0 <_dtoa_r+0x330>
   12364:	ee06 0a90 	vmov	s13, r0
   12368:	ec43 2b12 	vmov	d2, r2, r3
   1236c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   12370:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   12374:	ee32 6b46 	vsub.f64	d6, d2, d6
   12378:	eea6 7b03 	vfma.f64	d7, d6, d3
   1237c:	eea4 7b05 	vfma.f64	d7, d4, d5
   12380:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   12384:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   12388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1238c:	ee16 7a90 	vmov	r7, s13
   12390:	d508      	bpl.n	123a4 <_dtoa_r+0x124>
   12392:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   12396:	eeb4 6b47 	vcmp.f64	d6, d7
   1239a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1239e:	bf18      	it	ne
   123a0:	f107 37ff 	addne.w	r7, r7, #4294967295
   123a4:	2f16      	cmp	r7, #22
   123a6:	f200 8145 	bhi.w	12634 <_dtoa_r+0x3b4>
   123aa:	4b85      	ldr	r3, [pc, #532]	; (125c0 <_dtoa_r+0x340>)
   123ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   123b0:	ed93 7b00 	vldr	d7, [r3]
   123b4:	eeb4 8bc7 	vcmpe.f64	d8, d7
   123b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   123bc:	d557      	bpl.n	1246e <_dtoa_r+0x1ee>
   123be:	1a09      	subs	r1, r1, r0
   123c0:	2300      	movs	r3, #0
   123c2:	f1b1 0801 	subs.w	r8, r1, #1
   123c6:	f107 37ff 	add.w	r7, r7, #4294967295
   123ca:	930a      	str	r3, [sp, #40]	; 0x28
   123cc:	f100 8139 	bmi.w	12642 <_dtoa_r+0x3c2>
   123d0:	2300      	movs	r3, #0
   123d2:	9306      	str	r3, [sp, #24]
   123d4:	2f00      	cmp	r7, #0
   123d6:	da52      	bge.n	1247e <_dtoa_r+0x1fe>
   123d8:	9b06      	ldr	r3, [sp, #24]
   123da:	9704      	str	r7, [sp, #16]
   123dc:	1bdb      	subs	r3, r3, r7
   123de:	9306      	str	r3, [sp, #24]
   123e0:	427b      	negs	r3, r7
   123e2:	9308      	str	r3, [sp, #32]
   123e4:	9b01      	ldr	r3, [sp, #4]
   123e6:	2b09      	cmp	r3, #9
   123e8:	f04f 0700 	mov.w	r7, #0
   123ec:	d84e      	bhi.n	1248c <_dtoa_r+0x20c>
   123ee:	2b05      	cmp	r3, #5
   123f0:	f340 829d 	ble.w	1292e <_dtoa_r+0x6ae>
   123f4:	3b04      	subs	r3, #4
   123f6:	9301      	str	r3, [sp, #4]
   123f8:	2600      	movs	r6, #0
   123fa:	9b01      	ldr	r3, [sp, #4]
   123fc:	1e9a      	subs	r2, r3, #2
   123fe:	2a03      	cmp	r2, #3
   12400:	f200 8125 	bhi.w	1264e <_dtoa_r+0x3ce>
   12404:	e8df f012 	tbh	[pc, r2, lsl #1]
   12408:	03a703aa 	.word	0x03a703aa
   1240c:	037e039d 	.word	0x037e039d
   12410:	9a05      	ldr	r2, [sp, #20]
   12412:	f3c8 0813 	ubfx	r8, r8, #0, #20
   12416:	f242 730f 	movw	r3, #9999	; 0x270f
   1241a:	ea58 0806 	orrs.w	r8, r8, r6
   1241e:	6013      	str	r3, [r2, #0]
   12420:	d11e      	bne.n	12460 <_dtoa_r+0x1e0>
   12422:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12424:	2b00      	cmp	r3, #0
   12426:	f000 8591 	beq.w	12f4c <_dtoa_r+0xccc>
   1242a:	4b66      	ldr	r3, [pc, #408]	; (125c4 <_dtoa_r+0x344>)
   1242c:	9300      	str	r3, [sp, #0]
   1242e:	3308      	adds	r3, #8
   12430:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   12432:	9800      	ldr	r0, [sp, #0]
   12434:	6013      	str	r3, [r2, #0]
   12436:	b00f      	add	sp, #60	; 0x3c
   12438:	ecbd 8b02 	vpop	{d8}
   1243c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12440:	ee18 6a90 	vmov	r6, s17
   12444:	f3c6 0613 	ubfx	r6, r6, #0, #20
   12448:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   1244c:	ec53 2b18 	vmov	r2, r3, d8
   12450:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   12454:	990c      	ldr	r1, [sp, #48]	; 0x30
   12456:	f04f 0a00 	mov.w	sl, #0
   1245a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1245e:	e77b      	b.n	12358 <_dtoa_r+0xd8>
   12460:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12462:	2b00      	cmp	r3, #0
   12464:	f040 833b 	bne.w	12ade <_dtoa_r+0x85e>
   12468:	4b57      	ldr	r3, [pc, #348]	; (125c8 <_dtoa_r+0x348>)
   1246a:	9300      	str	r3, [sp, #0]
   1246c:	e744      	b.n	122f8 <_dtoa_r+0x78>
   1246e:	1a09      	subs	r1, r1, r0
   12470:	2300      	movs	r3, #0
   12472:	f1b1 0801 	subs.w	r8, r1, #1
   12476:	930a      	str	r3, [sp, #40]	; 0x28
   12478:	f100 80e3 	bmi.w	12642 <_dtoa_r+0x3c2>
   1247c:	9306      	str	r3, [sp, #24]
   1247e:	2300      	movs	r3, #0
   12480:	9308      	str	r3, [sp, #32]
   12482:	9b01      	ldr	r3, [sp, #4]
   12484:	9704      	str	r7, [sp, #16]
   12486:	2b09      	cmp	r3, #9
   12488:	44b8      	add	r8, r7
   1248a:	d9b0      	bls.n	123ee <_dtoa_r+0x16e>
   1248c:	2300      	movs	r3, #0
   1248e:	2601      	movs	r6, #1
   12490:	9301      	str	r3, [sp, #4]
   12492:	9607      	str	r6, [sp, #28]
   12494:	f04f 39ff 	mov.w	r9, #4294967295
   12498:	469b      	mov	fp, r3
   1249a:	2100      	movs	r1, #0
   1249c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1249e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   124a2:	4620      	mov	r0, r4
   124a4:	f7fb fd0a 	bl	debc <_Balloc>
   124a8:	9000      	str	r0, [sp, #0]
   124aa:	2800      	cmp	r0, #0
   124ac:	f000 8540 	beq.w	12f30 <_dtoa_r+0xcb0>
   124b0:	9b00      	ldr	r3, [sp, #0]
   124b2:	63a3      	str	r3, [r4, #56]	; 0x38
   124b4:	f1b9 0f0e 	cmp.w	r9, #14
   124b8:	f200 80dc 	bhi.w	12674 <_dtoa_r+0x3f4>
   124bc:	2e00      	cmp	r6, #0
   124be:	f000 80d9 	beq.w	12674 <_dtoa_r+0x3f4>
   124c2:	9b04      	ldr	r3, [sp, #16]
   124c4:	2b00      	cmp	r3, #0
   124c6:	f340 83de 	ble.w	12c86 <_dtoa_r+0xa06>
   124ca:	4a3d      	ldr	r2, [pc, #244]	; (125c0 <_dtoa_r+0x340>)
   124cc:	f003 010f 	and.w	r1, r3, #15
   124d0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   124d4:	ed92 7b00 	vldr	d7, [r2]
   124d8:	111a      	asrs	r2, r3, #4
   124da:	05db      	lsls	r3, r3, #23
   124dc:	f140 8382 	bpl.w	12be4 <_dtoa_r+0x964>
   124e0:	493a      	ldr	r1, [pc, #232]	; (125cc <_dtoa_r+0x34c>)
   124e2:	ed91 6b08 	vldr	d6, [r1, #32]
   124e6:	f002 020f 	and.w	r2, r2, #15
   124ea:	2003      	movs	r0, #3
   124ec:	ee88 5b06 	vdiv.f64	d5, d8, d6
   124f0:	b15a      	cbz	r2, 1250a <_dtoa_r+0x28a>
   124f2:	4936      	ldr	r1, [pc, #216]	; (125cc <_dtoa_r+0x34c>)
   124f4:	07d6      	lsls	r6, r2, #31
   124f6:	d504      	bpl.n	12502 <_dtoa_r+0x282>
   124f8:	ed91 6b00 	vldr	d6, [r1]
   124fc:	3001      	adds	r0, #1
   124fe:	ee27 7b06 	vmul.f64	d7, d7, d6
   12502:	1052      	asrs	r2, r2, #1
   12504:	f101 0108 	add.w	r1, r1, #8
   12508:	d1f4      	bne.n	124f4 <_dtoa_r+0x274>
   1250a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1250e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12510:	b13b      	cbz	r3, 12522 <_dtoa_r+0x2a2>
   12512:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   12516:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1251e:	f100 84ae 	bmi.w	12e7e <_dtoa_r+0xbfe>
   12522:	ee07 0a90 	vmov	s15, r0
   12526:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1252a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1252e:	eea5 7b06 	vfma.f64	d7, d5, d6
   12532:	ee17 2a90 	vmov	r2, s15
   12536:	ec51 0b17 	vmov	r0, r1, d7
   1253a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1253e:	f1b9 0f00 	cmp.w	r9, #0
   12542:	f000 8388 	beq.w	12c56 <_dtoa_r+0x9d6>
   12546:	9e04      	ldr	r6, [sp, #16]
   12548:	464a      	mov	r2, r9
   1254a:	9b07      	ldr	r3, [sp, #28]
   1254c:	2b00      	cmp	r3, #0
   1254e:	f000 8447 	beq.w	12de0 <_dtoa_r+0xb60>
   12552:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   12556:	4b1a      	ldr	r3, [pc, #104]	; (125c0 <_dtoa_r+0x340>)
   12558:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   1255c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   12560:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   12564:	ee36 7b47 	vsub.f64	d7, d6, d7
   12568:	ed1c 6b02 	vldr	d6, [ip, #-8]
   1256c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   12570:	ec41 0b16 	vmov	d6, r0, r1
   12574:	ee14 0a90 	vmov	r0, s9
   12578:	ee35 5b46 	vsub.f64	d5, d5, d6
   1257c:	9900      	ldr	r1, [sp, #0]
   1257e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   12582:	3030      	adds	r0, #48	; 0x30
   12584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12588:	f801 0b01 	strb.w	r0, [r1], #1
   1258c:	f300 84ac 	bgt.w	12ee8 <_dtoa_r+0xc68>
   12590:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   12594:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12598:	f04f 0c00 	mov.w	ip, #0
   1259c:	e031      	b.n	12602 <_dtoa_r+0x382>
   1259e:	bf00      	nop
   125a0:	636f4361 	.word	0x636f4361
   125a4:	3fd287a7 	.word	0x3fd287a7
   125a8:	8b60c8b3 	.word	0x8b60c8b3
   125ac:	3fc68a28 	.word	0x3fc68a28
   125b0:	509f79fb 	.word	0x509f79fb
   125b4:	3fd34413 	.word	0x3fd34413
   125b8:	7ff00000 	.word	0x7ff00000
   125bc:	20000f25 	.word	0x20000f25
   125c0:	200003a8 	.word	0x200003a8
   125c4:	20000e5c 	.word	0x20000e5c
   125c8:	20000e68 	.word	0x20000e68
   125cc:	20000380 	.word	0x20000380
   125d0:	f10c 0c01 	add.w	ip, ip, #1
   125d4:	4594      	cmp	ip, r2
   125d6:	da4d      	bge.n	12674 <_dtoa_r+0x3f4>
   125d8:	ee27 7b04 	vmul.f64	d7, d7, d4
   125dc:	ee25 5b04 	vmul.f64	d5, d5, d4
   125e0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   125e4:	ee16 3a90 	vmov	r3, s13
   125e8:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   125ec:	3330      	adds	r3, #48	; 0x30
   125ee:	ee37 7b43 	vsub.f64	d7, d7, d3
   125f2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   125f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   125fa:	f801 3b01 	strb.w	r3, [r1], #1
   125fe:	f100 8473 	bmi.w	12ee8 <_dtoa_r+0xc68>
   12602:	ee32 6b47 	vsub.f64	d6, d2, d7
   12606:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1260e:	d5df      	bpl.n	125d0 <_dtoa_r+0x350>
   12610:	9a00      	ldr	r2, [sp, #0]
   12612:	9604      	str	r6, [sp, #16]
   12614:	e002      	b.n	1261c <_dtoa_r+0x39c>
   12616:	428a      	cmp	r2, r1
   12618:	f000 8450 	beq.w	12ebc <_dtoa_r+0xc3c>
   1261c:	4689      	mov	r9, r1
   1261e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   12622:	2b39      	cmp	r3, #57	; 0x39
   12624:	d0f7      	beq.n	12616 <_dtoa_r+0x396>
   12626:	3301      	adds	r3, #1
   12628:	b2db      	uxtb	r3, r3
   1262a:	700b      	strb	r3, [r1, #0]
   1262c:	9b04      	ldr	r3, [sp, #16]
   1262e:	3301      	adds	r3, #1
   12630:	9304      	str	r3, [sp, #16]
   12632:	e155      	b.n	128e0 <_dtoa_r+0x660>
   12634:	1a09      	subs	r1, r1, r0
   12636:	2301      	movs	r3, #1
   12638:	f1b1 0801 	subs.w	r8, r1, #1
   1263c:	930a      	str	r3, [sp, #40]	; 0x28
   1263e:	f57f aec7 	bpl.w	123d0 <_dtoa_r+0x150>
   12642:	f1c1 0301 	rsb	r3, r1, #1
   12646:	9306      	str	r3, [sp, #24]
   12648:	f04f 0800 	mov.w	r8, #0
   1264c:	e6c2      	b.n	123d4 <_dtoa_r+0x154>
   1264e:	2600      	movs	r6, #0
   12650:	63e6      	str	r6, [r4, #60]	; 0x3c
   12652:	4631      	mov	r1, r6
   12654:	4620      	mov	r0, r4
   12656:	f7fb fc31 	bl	debc <_Balloc>
   1265a:	9000      	str	r0, [sp, #0]
   1265c:	2800      	cmp	r0, #0
   1265e:	f000 8467 	beq.w	12f30 <_dtoa_r+0xcb0>
   12662:	9b00      	ldr	r3, [sp, #0]
   12664:	63a3      	str	r3, [r4, #56]	; 0x38
   12666:	f04f 33ff 	mov.w	r3, #4294967295
   1266a:	930b      	str	r3, [sp, #44]	; 0x2c
   1266c:	4699      	mov	r9, r3
   1266e:	2301      	movs	r3, #1
   12670:	46b3      	mov	fp, r6
   12672:	9307      	str	r3, [sp, #28]
   12674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12676:	2a00      	cmp	r2, #0
   12678:	db55      	blt.n	12726 <_dtoa_r+0x4a6>
   1267a:	9904      	ldr	r1, [sp, #16]
   1267c:	290e      	cmp	r1, #14
   1267e:	dc52      	bgt.n	12726 <_dtoa_r+0x4a6>
   12680:	4bb7      	ldr	r3, [pc, #732]	; (12960 <_dtoa_r+0x6e0>)
   12682:	f1bb 0f00 	cmp.w	fp, #0
   12686:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1268a:	ed93 6b00 	vldr	d6, [r3]
   1268e:	da15      	bge.n	126bc <_dtoa_r+0x43c>
   12690:	f1b9 0f00 	cmp.w	r9, #0
   12694:	dc12      	bgt.n	126bc <_dtoa_r+0x43c>
   12696:	f040 82f2 	bne.w	12c7e <_dtoa_r+0x9fe>
   1269a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1269e:	ee26 7b07 	vmul.f64	d7, d6, d7
   126a2:	eeb4 8bc7 	vcmpe.f64	d8, d7
   126a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   126aa:	46ca      	mov	sl, r9
   126ac:	464e      	mov	r6, r9
   126ae:	f200 826d 	bhi.w	12b8c <_dtoa_r+0x90c>
   126b2:	f8dd 8000 	ldr.w	r8, [sp]
   126b6:	ea6f 0b0b 	mvn.w	fp, fp
   126ba:	e270      	b.n	12b9e <_dtoa_r+0x91e>
   126bc:	ee88 7b06 	vdiv.f64	d7, d8, d6
   126c0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   126c4:	9900      	ldr	r1, [sp, #0]
   126c6:	ee17 3a10 	vmov	r3, s14
   126ca:	f1b9 0f01 	cmp.w	r9, #1
   126ce:	f103 0330 	add.w	r3, r3, #48	; 0x30
   126d2:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   126d6:	f801 3b01 	strb.w	r3, [r1], #1
   126da:	eea5 8b46 	vfms.f64	d8, d5, d6
   126de:	f000 8334 	beq.w	12d4a <_dtoa_r+0xaca>
   126e2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   126e6:	2301      	movs	r3, #1
   126e8:	e011      	b.n	1270e <_dtoa_r+0x48e>
   126ea:	ee88 7b06 	vdiv.f64	d7, d8, d6
   126ee:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   126f2:	3301      	adds	r3, #1
   126f4:	ee17 2a10 	vmov	r2, s14
   126f8:	454b      	cmp	r3, r9
   126fa:	f102 0230 	add.w	r2, r2, #48	; 0x30
   126fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   12702:	f801 2b01 	strb.w	r2, [r1], #1
   12706:	eea5 8b46 	vfms.f64	d8, d5, d6
   1270a:	f000 831e 	beq.w	12d4a <_dtoa_r+0xaca>
   1270e:	ee28 8b04 	vmul.f64	d8, d8, d4
   12712:	eeb5 8b40 	vcmp.f64	d8, #0.0
   12716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1271a:	d1e6      	bne.n	126ea <_dtoa_r+0x46a>
   1271c:	9b04      	ldr	r3, [sp, #16]
   1271e:	3301      	adds	r3, #1
   12720:	9304      	str	r3, [sp, #16]
   12722:	4689      	mov	r9, r1
   12724:	e0dc      	b.n	128e0 <_dtoa_r+0x660>
   12726:	9b07      	ldr	r3, [sp, #28]
   12728:	b343      	cbz	r3, 1277c <_dtoa_r+0x4fc>
   1272a:	9b01      	ldr	r3, [sp, #4]
   1272c:	2b01      	cmp	r3, #1
   1272e:	f340 8276 	ble.w	12c1e <_dtoa_r+0x99e>
   12732:	9b08      	ldr	r3, [sp, #32]
   12734:	f109 3aff 	add.w	sl, r9, #4294967295
   12738:	4553      	cmp	r3, sl
   1273a:	f280 823f 	bge.w	12bbc <_dtoa_r+0x93c>
   1273e:	9b08      	ldr	r3, [sp, #32]
   12740:	f8cd a020 	str.w	sl, [sp, #32]
   12744:	ebaa 0203 	sub.w	r2, sl, r3
   12748:	4417      	add	r7, r2
   1274a:	f04f 0a00 	mov.w	sl, #0
   1274e:	f1b9 0f00 	cmp.w	r9, #0
   12752:	f2c0 8325 	blt.w	12da0 <_dtoa_r+0xb20>
   12756:	9b06      	ldr	r3, [sp, #24]
   12758:	9309      	str	r3, [sp, #36]	; 0x24
   1275a:	444b      	add	r3, r9
   1275c:	44c8      	add	r8, r9
   1275e:	9306      	str	r3, [sp, #24]
   12760:	2101      	movs	r1, #1
   12762:	4620      	mov	r0, r4
   12764:	f7fb fcd4 	bl	e110 <__i2b>
   12768:	4606      	mov	r6, r0
   1276a:	e00c      	b.n	12786 <_dtoa_r+0x506>
   1276c:	4b7d      	ldr	r3, [pc, #500]	; (12964 <_dtoa_r+0x6e4>)
   1276e:	9300      	str	r3, [sp, #0]
   12770:	9800      	ldr	r0, [sp, #0]
   12772:	b00f      	add	sp, #60	; 0x3c
   12774:	ecbd 8b02 	vpop	{d8}
   12778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1277c:	9b06      	ldr	r3, [sp, #24]
   1277e:	f8dd a020 	ldr.w	sl, [sp, #32]
   12782:	9e07      	ldr	r6, [sp, #28]
   12784:	9309      	str	r3, [sp, #36]	; 0x24
   12786:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12788:	b16b      	cbz	r3, 127a6 <_dtoa_r+0x526>
   1278a:	f1b8 0f00 	cmp.w	r8, #0
   1278e:	dd0a      	ble.n	127a6 <_dtoa_r+0x526>
   12790:	4543      	cmp	r3, r8
   12792:	9906      	ldr	r1, [sp, #24]
   12794:	461a      	mov	r2, r3
   12796:	bfa8      	it	ge
   12798:	4642      	movge	r2, r8
   1279a:	1a89      	subs	r1, r1, r2
   1279c:	1a9b      	subs	r3, r3, r2
   1279e:	9106      	str	r1, [sp, #24]
   127a0:	9309      	str	r3, [sp, #36]	; 0x24
   127a2:	eba8 0802 	sub.w	r8, r8, r2
   127a6:	9b08      	ldr	r3, [sp, #32]
   127a8:	b163      	cbz	r3, 127c4 <_dtoa_r+0x544>
   127aa:	9b07      	ldr	r3, [sp, #28]
   127ac:	2b00      	cmp	r3, #0
   127ae:	f000 82a7 	beq.w	12d00 <_dtoa_r+0xa80>
   127b2:	f1ba 0f00 	cmp.w	sl, #0
   127b6:	f300 8204 	bgt.w	12bc2 <_dtoa_r+0x942>
   127ba:	9b08      	ldr	r3, [sp, #32]
   127bc:	ebb3 020a 	subs.w	r2, r3, sl
   127c0:	f040 82ff 	bne.w	12dc2 <_dtoa_r+0xb42>
   127c4:	2101      	movs	r1, #1
   127c6:	4620      	mov	r0, r4
   127c8:	f7fb fca2 	bl	e110 <__i2b>
   127cc:	2f00      	cmp	r7, #0
   127ce:	4682      	mov	sl, r0
   127d0:	f300 80af 	bgt.w	12932 <_dtoa_r+0x6b2>
   127d4:	9b01      	ldr	r3, [sp, #4]
   127d6:	2b01      	cmp	r3, #1
   127d8:	f340 8187 	ble.w	12aea <_dtoa_r+0x86a>
   127dc:	2300      	movs	r3, #0
   127de:	9308      	str	r3, [sp, #32]
   127e0:	2001      	movs	r0, #1
   127e2:	2f00      	cmp	r7, #0
   127e4:	f040 80b1 	bne.w	1294a <_dtoa_r+0x6ca>
   127e8:	4440      	add	r0, r8
   127ea:	f010 001f 	ands.w	r0, r0, #31
   127ee:	f000 817a 	beq.w	12ae6 <_dtoa_r+0x866>
   127f2:	f1c0 0220 	rsb	r2, r0, #32
   127f6:	2a04      	cmp	r2, #4
   127f8:	f300 8088 	bgt.w	1290c <_dtoa_r+0x68c>
   127fc:	f040 81f6 	bne.w	12bec <_dtoa_r+0x96c>
   12800:	9b06      	ldr	r3, [sp, #24]
   12802:	2b00      	cmp	r3, #0
   12804:	dd05      	ble.n	12812 <_dtoa_r+0x592>
   12806:	4629      	mov	r1, r5
   12808:	461a      	mov	r2, r3
   1280a:	4620      	mov	r0, r4
   1280c:	f7fb fdbc 	bl	e388 <__lshift>
   12810:	4605      	mov	r5, r0
   12812:	f1b8 0f00 	cmp.w	r8, #0
   12816:	dd05      	ble.n	12824 <_dtoa_r+0x5a4>
   12818:	4651      	mov	r1, sl
   1281a:	4642      	mov	r2, r8
   1281c:	4620      	mov	r0, r4
   1281e:	f7fb fdb3 	bl	e388 <__lshift>
   12822:	4682      	mov	sl, r0
   12824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12826:	2b00      	cmp	r3, #0
   12828:	f040 813f 	bne.w	12aaa <_dtoa_r+0x82a>
   1282c:	f1b9 0f00 	cmp.w	r9, #0
   12830:	f340 8125 	ble.w	12a7e <_dtoa_r+0x7fe>
   12834:	9b07      	ldr	r3, [sp, #28]
   12836:	2b00      	cmp	r3, #0
   12838:	f040 80a3 	bne.w	12982 <_dtoa_r+0x702>
   1283c:	9b04      	ldr	r3, [sp, #16]
   1283e:	3301      	adds	r3, #1
   12840:	9304      	str	r3, [sp, #16]
   12842:	f8dd 8000 	ldr.w	r8, [sp]
   12846:	2701      	movs	r7, #1
   12848:	e007      	b.n	1285a <_dtoa_r+0x5da>
   1284a:	4629      	mov	r1, r5
   1284c:	2300      	movs	r3, #0
   1284e:	220a      	movs	r2, #10
   12850:	4620      	mov	r0, r4
   12852:	f7fb fb63 	bl	df1c <__multadd>
   12856:	3701      	adds	r7, #1
   12858:	4605      	mov	r5, r0
   1285a:	4651      	mov	r1, sl
   1285c:	4628      	mov	r0, r5
   1285e:	f7ff fc7b 	bl	12158 <quorem>
   12862:	45b9      	cmp	r9, r7
   12864:	f100 0030 	add.w	r0, r0, #48	; 0x30
   12868:	f808 0b01 	strb.w	r0, [r8], #1
   1286c:	dced      	bgt.n	1284a <_dtoa_r+0x5ca>
   1286e:	f1b9 0f00 	cmp.w	r9, #0
   12872:	9a00      	ldr	r2, [sp, #0]
   12874:	bfcc      	ite	gt
   12876:	46cb      	movgt	fp, r9
   12878:	f04f 0b01 	movle.w	fp, #1
   1287c:	4603      	mov	r3, r0
   1287e:	4493      	add	fp, r2
   12880:	2700      	movs	r7, #0
   12882:	4629      	mov	r1, r5
   12884:	2201      	movs	r2, #1
   12886:	4620      	mov	r0, r4
   12888:	9301      	str	r3, [sp, #4]
   1288a:	f7fb fd7d 	bl	e388 <__lshift>
   1288e:	4651      	mov	r1, sl
   12890:	4605      	mov	r5, r0
   12892:	f7fb fdf1 	bl	e478 <__mcmp>
   12896:	2800      	cmp	r0, #0
   12898:	f340 81af 	ble.w	12bfa <_dtoa_r+0x97a>
   1289c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   128a0:	9a00      	ldr	r2, [sp, #0]
   128a2:	f10b 3bff 	add.w	fp, fp, #4294967295
   128a6:	e004      	b.n	128b2 <_dtoa_r+0x632>
   128a8:	455a      	cmp	r2, fp
   128aa:	f000 81b1 	beq.w	12c10 <_dtoa_r+0x990>
   128ae:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   128b2:	2b39      	cmp	r3, #57	; 0x39
   128b4:	f10b 0901 	add.w	r9, fp, #1
   128b8:	d0f6      	beq.n	128a8 <_dtoa_r+0x628>
   128ba:	3301      	adds	r3, #1
   128bc:	f88b 3000 	strb.w	r3, [fp]
   128c0:	4651      	mov	r1, sl
   128c2:	4620      	mov	r0, r4
   128c4:	f7fb fb20 	bl	df08 <_Bfree>
   128c8:	b156      	cbz	r6, 128e0 <_dtoa_r+0x660>
   128ca:	b12f      	cbz	r7, 128d8 <_dtoa_r+0x658>
   128cc:	42b7      	cmp	r7, r6
   128ce:	d003      	beq.n	128d8 <_dtoa_r+0x658>
   128d0:	4639      	mov	r1, r7
   128d2:	4620      	mov	r0, r4
   128d4:	f7fb fb18 	bl	df08 <_Bfree>
   128d8:	4631      	mov	r1, r6
   128da:	4620      	mov	r0, r4
   128dc:	f7fb fb14 	bl	df08 <_Bfree>
   128e0:	4629      	mov	r1, r5
   128e2:	4620      	mov	r0, r4
   128e4:	f7fb fb10 	bl	df08 <_Bfree>
   128e8:	2300      	movs	r3, #0
   128ea:	f889 3000 	strb.w	r3, [r9]
   128ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   128f2:	601a      	str	r2, [r3, #0]
   128f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   128f6:	2b00      	cmp	r3, #0
   128f8:	f43f acfe 	beq.w	122f8 <_dtoa_r+0x78>
   128fc:	9800      	ldr	r0, [sp, #0]
   128fe:	f8c3 9000 	str.w	r9, [r3]
   12902:	b00f      	add	sp, #60	; 0x3c
   12904:	ecbd 8b02 	vpop	{d8}
   12908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1290c:	f1c0 001c 	rsb	r0, r0, #28
   12910:	9b06      	ldr	r3, [sp, #24]
   12912:	4403      	add	r3, r0
   12914:	9306      	str	r3, [sp, #24]
   12916:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12918:	4403      	add	r3, r0
   1291a:	9309      	str	r3, [sp, #36]	; 0x24
   1291c:	4480      	add	r8, r0
   1291e:	e76f      	b.n	12800 <_dtoa_r+0x580>
   12920:	f1c2 0220 	rsb	r2, r2, #32
   12924:	fa06 f202 	lsl.w	r2, r6, r2
   12928:	ee07 2a10 	vmov	s14, r2
   1292c:	e509      	b.n	12342 <_dtoa_r+0xc2>
   1292e:	2601      	movs	r6, #1
   12930:	e563      	b.n	123fa <_dtoa_r+0x17a>
   12932:	4601      	mov	r1, r0
   12934:	463a      	mov	r2, r7
   12936:	4620      	mov	r0, r4
   12938:	f7fb fcc6 	bl	e2c8 <__pow5mult>
   1293c:	9b01      	ldr	r3, [sp, #4]
   1293e:	2b01      	cmp	r3, #1
   12940:	4682      	mov	sl, r0
   12942:	f340 81c5 	ble.w	12cd0 <_dtoa_r+0xa50>
   12946:	2300      	movs	r3, #0
   12948:	9308      	str	r3, [sp, #32]
   1294a:	f8da 2010 	ldr.w	r2, [sl, #16]
   1294e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   12952:	6910      	ldr	r0, [r2, #16]
   12954:	f7fb fb8c 	bl	e070 <__hi0bits>
   12958:	f1c0 0020 	rsb	r0, r0, #32
   1295c:	e744      	b.n	127e8 <_dtoa_r+0x568>
   1295e:	bf00      	nop
   12960:	200003a8 	.word	0x200003a8
   12964:	20000f24 	.word	0x20000f24
   12968:	4631      	mov	r1, r6
   1296a:	2300      	movs	r3, #0
   1296c:	220a      	movs	r2, #10
   1296e:	4620      	mov	r0, r4
   12970:	f7fb fad4 	bl	df1c <__multadd>
   12974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12976:	2b00      	cmp	r3, #0
   12978:	4606      	mov	r6, r0
   1297a:	f340 82ce 	ble.w	12f1a <_dtoa_r+0xc9a>
   1297e:	9704      	str	r7, [sp, #16]
   12980:	4699      	mov	r9, r3
   12982:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12984:	2b00      	cmp	r3, #0
   12986:	dd05      	ble.n	12994 <_dtoa_r+0x714>
   12988:	4631      	mov	r1, r6
   1298a:	461a      	mov	r2, r3
   1298c:	4620      	mov	r0, r4
   1298e:	f7fb fcfb 	bl	e388 <__lshift>
   12992:	4606      	mov	r6, r0
   12994:	9b08      	ldr	r3, [sp, #32]
   12996:	2b00      	cmp	r3, #0
   12998:	f040 81eb 	bne.w	12d72 <_dtoa_r+0xaf2>
   1299c:	46b0      	mov	r8, r6
   1299e:	9b02      	ldr	r3, [sp, #8]
   129a0:	9f00      	ldr	r7, [sp, #0]
   129a2:	f003 0201 	and.w	r2, r3, #1
   129a6:	1e7b      	subs	r3, r7, #1
   129a8:	444b      	add	r3, r9
   129aa:	9308      	str	r3, [sp, #32]
   129ac:	9b01      	ldr	r3, [sp, #4]
   129ae:	920a      	str	r2, [sp, #40]	; 0x28
   129b0:	4313      	orrs	r3, r2
   129b2:	9309      	str	r3, [sp, #36]	; 0x24
   129b4:	4651      	mov	r1, sl
   129b6:	4628      	mov	r0, r5
   129b8:	f7ff fbce 	bl	12158 <quorem>
   129bc:	4631      	mov	r1, r6
   129be:	4683      	mov	fp, r0
   129c0:	4628      	mov	r0, r5
   129c2:	f7fb fd59 	bl	e478 <__mcmp>
   129c6:	4642      	mov	r2, r8
   129c8:	4651      	mov	r1, sl
   129ca:	4681      	mov	r9, r0
   129cc:	4620      	mov	r0, r4
   129ce:	f7fb fd75 	bl	e4bc <__mdiff>
   129d2:	68c2      	ldr	r2, [r0, #12]
   129d4:	4601      	mov	r1, r0
   129d6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   129da:	2a00      	cmp	r2, #0
   129dc:	d142      	bne.n	12a64 <_dtoa_r+0x7e4>
   129de:	e9cd 0306 	strd	r0, r3, [sp, #24]
   129e2:	4628      	mov	r0, r5
   129e4:	f7fb fd48 	bl	e478 <__mcmp>
   129e8:	9906      	ldr	r1, [sp, #24]
   129ea:	9002      	str	r0, [sp, #8]
   129ec:	4620      	mov	r0, r4
   129ee:	f7fb fa8b 	bl	df08 <_Bfree>
   129f2:	9a02      	ldr	r2, [sp, #8]
   129f4:	9b07      	ldr	r3, [sp, #28]
   129f6:	b91a      	cbnz	r2, 12a00 <_dtoa_r+0x780>
   129f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   129fa:	2900      	cmp	r1, #0
   129fc:	f000 827e 	beq.w	12efc <_dtoa_r+0xc7c>
   12a00:	f1b9 0f00 	cmp.w	r9, #0
   12a04:	f2c0 8183 	blt.w	12d0e <_dtoa_r+0xa8e>
   12a08:	9901      	ldr	r1, [sp, #4]
   12a0a:	ea49 0901 	orr.w	r9, r9, r1
   12a0e:	990a      	ldr	r1, [sp, #40]	; 0x28
   12a10:	ea51 0909 	orrs.w	r9, r1, r9
   12a14:	f000 817b 	beq.w	12d0e <_dtoa_r+0xa8e>
   12a18:	2a00      	cmp	r2, #0
   12a1a:	f300 81c6 	bgt.w	12daa <_dtoa_r+0xb2a>
   12a1e:	9a08      	ldr	r2, [sp, #32]
   12a20:	703b      	strb	r3, [r7, #0]
   12a22:	f107 0901 	add.w	r9, r7, #1
   12a26:	4297      	cmp	r7, r2
   12a28:	46cb      	mov	fp, r9
   12a2a:	f000 81c4 	beq.w	12db6 <_dtoa_r+0xb36>
   12a2e:	4629      	mov	r1, r5
   12a30:	2300      	movs	r3, #0
   12a32:	220a      	movs	r2, #10
   12a34:	4620      	mov	r0, r4
   12a36:	f7fb fa71 	bl	df1c <__multadd>
   12a3a:	4546      	cmp	r6, r8
   12a3c:	4605      	mov	r5, r0
   12a3e:	4631      	mov	r1, r6
   12a40:	f04f 0300 	mov.w	r3, #0
   12a44:	f04f 020a 	mov.w	r2, #10
   12a48:	4620      	mov	r0, r4
   12a4a:	d012      	beq.n	12a72 <_dtoa_r+0x7f2>
   12a4c:	f7fb fa66 	bl	df1c <__multadd>
   12a50:	4641      	mov	r1, r8
   12a52:	4606      	mov	r6, r0
   12a54:	2300      	movs	r3, #0
   12a56:	220a      	movs	r2, #10
   12a58:	4620      	mov	r0, r4
   12a5a:	f7fb fa5f 	bl	df1c <__multadd>
   12a5e:	464f      	mov	r7, r9
   12a60:	4680      	mov	r8, r0
   12a62:	e7a7      	b.n	129b4 <_dtoa_r+0x734>
   12a64:	4620      	mov	r0, r4
   12a66:	9302      	str	r3, [sp, #8]
   12a68:	f7fb fa4e 	bl	df08 <_Bfree>
   12a6c:	9b02      	ldr	r3, [sp, #8]
   12a6e:	2201      	movs	r2, #1
   12a70:	e7c6      	b.n	12a00 <_dtoa_r+0x780>
   12a72:	f7fb fa53 	bl	df1c <__multadd>
   12a76:	464f      	mov	r7, r9
   12a78:	4606      	mov	r6, r0
   12a7a:	4680      	mov	r8, r0
   12a7c:	e79a      	b.n	129b4 <_dtoa_r+0x734>
   12a7e:	9b01      	ldr	r3, [sp, #4]
   12a80:	2b02      	cmp	r3, #2
   12a82:	dc71      	bgt.n	12b68 <_dtoa_r+0x8e8>
   12a84:	9b07      	ldr	r3, [sp, #28]
   12a86:	2b00      	cmp	r3, #0
   12a88:	f47f af7b 	bne.w	12982 <_dtoa_r+0x702>
   12a8c:	9b04      	ldr	r3, [sp, #16]
   12a8e:	4651      	mov	r1, sl
   12a90:	3301      	adds	r3, #1
   12a92:	4628      	mov	r0, r5
   12a94:	9304      	str	r3, [sp, #16]
   12a96:	f7ff fb5f 	bl	12158 <quorem>
   12a9a:	f8dd b000 	ldr.w	fp, [sp]
   12a9e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   12aa2:	f80b 3b01 	strb.w	r3, [fp], #1
   12aa6:	2700      	movs	r7, #0
   12aa8:	e6eb      	b.n	12882 <_dtoa_r+0x602>
   12aaa:	4651      	mov	r1, sl
   12aac:	4628      	mov	r0, r5
   12aae:	f7fb fce3 	bl	e478 <__mcmp>
   12ab2:	2800      	cmp	r0, #0
   12ab4:	f6bf aeba 	bge.w	1282c <_dtoa_r+0x5ac>
   12ab8:	4629      	mov	r1, r5
   12aba:	2300      	movs	r3, #0
   12abc:	220a      	movs	r2, #10
   12abe:	4620      	mov	r0, r4
   12ac0:	f7fb fa2c 	bl	df1c <__multadd>
   12ac4:	9b04      	ldr	r3, [sp, #16]
   12ac6:	1e5f      	subs	r7, r3, #1
   12ac8:	9b07      	ldr	r3, [sp, #28]
   12aca:	4605      	mov	r5, r0
   12acc:	2b00      	cmp	r3, #0
   12ace:	f47f af4b 	bne.w	12968 <_dtoa_r+0x6e8>
   12ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12ad4:	2b00      	cmp	r3, #0
   12ad6:	f340 8218 	ble.w	12f0a <_dtoa_r+0xc8a>
   12ada:	4699      	mov	r9, r3
   12adc:	e6b1      	b.n	12842 <_dtoa_r+0x5c2>
   12ade:	4bbc      	ldr	r3, [pc, #752]	; (12dd0 <_dtoa_r+0xb50>)
   12ae0:	9300      	str	r3, [sp, #0]
   12ae2:	3303      	adds	r3, #3
   12ae4:	e4a4      	b.n	12430 <_dtoa_r+0x1b0>
   12ae6:	201c      	movs	r0, #28
   12ae8:	e712      	b.n	12910 <_dtoa_r+0x690>
   12aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   12aee:	2800      	cmp	r0, #0
   12af0:	f47f ae74 	bne.w	127dc <_dtoa_r+0x55c>
   12af4:	f3c1 0213 	ubfx	r2, r1, #0, #20
   12af8:	2a00      	cmp	r2, #0
   12afa:	f000 80f4 	beq.w	12ce6 <_dtoa_r+0xa66>
   12afe:	9b02      	ldr	r3, [sp, #8]
   12b00:	9308      	str	r3, [sp, #32]
   12b02:	e66d      	b.n	127e0 <_dtoa_r+0x560>
   12b04:	2301      	movs	r3, #1
   12b06:	9307      	str	r3, [sp, #28]
   12b08:	9b04      	ldr	r3, [sp, #16]
   12b0a:	445b      	add	r3, fp
   12b0c:	f103 0901 	add.w	r9, r3, #1
   12b10:	f1b9 0f01 	cmp.w	r9, #1
   12b14:	46cc      	mov	ip, r9
   12b16:	930b      	str	r3, [sp, #44]	; 0x2c
   12b18:	bfb8      	it	lt
   12b1a:	f04f 0c01 	movlt.w	ip, #1
   12b1e:	2100      	movs	r1, #0
   12b20:	f1bc 0f17 	cmp.w	ip, #23
   12b24:	63e1      	str	r1, [r4, #60]	; 0x3c
   12b26:	f77f acbc 	ble.w	124a2 <_dtoa_r+0x222>
   12b2a:	2001      	movs	r0, #1
   12b2c:	2204      	movs	r2, #4
   12b2e:	0052      	lsls	r2, r2, #1
   12b30:	f102 0314 	add.w	r3, r2, #20
   12b34:	4563      	cmp	r3, ip
   12b36:	4601      	mov	r1, r0
   12b38:	f100 0001 	add.w	r0, r0, #1
   12b3c:	d9f7      	bls.n	12b2e <_dtoa_r+0x8ae>
   12b3e:	63e1      	str	r1, [r4, #60]	; 0x3c
   12b40:	e4af      	b.n	124a2 <_dtoa_r+0x222>
   12b42:	2301      	movs	r3, #1
   12b44:	9307      	str	r3, [sp, #28]
   12b46:	f1bb 0f00 	cmp.w	fp, #0
   12b4a:	dd52      	ble.n	12bf2 <_dtoa_r+0x972>
   12b4c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   12b50:	46d9      	mov	r9, fp
   12b52:	46dc      	mov	ip, fp
   12b54:	e7e3      	b.n	12b1e <_dtoa_r+0x89e>
   12b56:	2300      	movs	r3, #0
   12b58:	9307      	str	r3, [sp, #28]
   12b5a:	e7d5      	b.n	12b08 <_dtoa_r+0x888>
   12b5c:	2300      	movs	r3, #0
   12b5e:	9307      	str	r3, [sp, #28]
   12b60:	e7f1      	b.n	12b46 <_dtoa_r+0x8c6>
   12b62:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   12b66:	9704      	str	r7, [sp, #16]
   12b68:	f1b9 0f00 	cmp.w	r9, #0
   12b6c:	f47f ada1 	bne.w	126b2 <_dtoa_r+0x432>
   12b70:	4651      	mov	r1, sl
   12b72:	464b      	mov	r3, r9
   12b74:	2205      	movs	r2, #5
   12b76:	4620      	mov	r0, r4
   12b78:	f7fb f9d0 	bl	df1c <__multadd>
   12b7c:	4601      	mov	r1, r0
   12b7e:	4682      	mov	sl, r0
   12b80:	4628      	mov	r0, r5
   12b82:	f7fb fc79 	bl	e478 <__mcmp>
   12b86:	2800      	cmp	r0, #0
   12b88:	f77f ad93 	ble.w	126b2 <_dtoa_r+0x432>
   12b8c:	9b04      	ldr	r3, [sp, #16]
   12b8e:	f103 0b01 	add.w	fp, r3, #1
   12b92:	9b00      	ldr	r3, [sp, #0]
   12b94:	2231      	movs	r2, #49	; 0x31
   12b96:	4698      	mov	r8, r3
   12b98:	f803 2b01 	strb.w	r2, [r3], #1
   12b9c:	9300      	str	r3, [sp, #0]
   12b9e:	4651      	mov	r1, sl
   12ba0:	4620      	mov	r0, r4
   12ba2:	f7fb f9b1 	bl	df08 <_Bfree>
   12ba6:	f10b 0301 	add.w	r3, fp, #1
   12baa:	f8dd 9000 	ldr.w	r9, [sp]
   12bae:	9304      	str	r3, [sp, #16]
   12bb0:	f8cd 8000 	str.w	r8, [sp]
   12bb4:	2e00      	cmp	r6, #0
   12bb6:	f47f ae8f 	bne.w	128d8 <_dtoa_r+0x658>
   12bba:	e691      	b.n	128e0 <_dtoa_r+0x660>
   12bbc:	eba3 0a0a 	sub.w	sl, r3, sl
   12bc0:	e5c5      	b.n	1274e <_dtoa_r+0x4ce>
   12bc2:	4631      	mov	r1, r6
   12bc4:	4652      	mov	r2, sl
   12bc6:	4620      	mov	r0, r4
   12bc8:	f7fb fb7e 	bl	e2c8 <__pow5mult>
   12bcc:	462a      	mov	r2, r5
   12bce:	4601      	mov	r1, r0
   12bd0:	4606      	mov	r6, r0
   12bd2:	4620      	mov	r0, r4
   12bd4:	f7fb faca 	bl	e16c <__multiply>
   12bd8:	4629      	mov	r1, r5
   12bda:	4605      	mov	r5, r0
   12bdc:	4620      	mov	r0, r4
   12bde:	f7fb f993 	bl	df08 <_Bfree>
   12be2:	e5ea      	b.n	127ba <_dtoa_r+0x53a>
   12be4:	2002      	movs	r0, #2
   12be6:	eeb0 5b48 	vmov.f64	d5, d8
   12bea:	e481      	b.n	124f0 <_dtoa_r+0x270>
   12bec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   12bf0:	e68e      	b.n	12910 <_dtoa_r+0x690>
   12bf2:	f04f 0b01 	mov.w	fp, #1
   12bf6:	46d9      	mov	r9, fp
   12bf8:	e44f      	b.n	1249a <_dtoa_r+0x21a>
   12bfa:	d103      	bne.n	12c04 <_dtoa_r+0x984>
   12bfc:	9b01      	ldr	r3, [sp, #4]
   12bfe:	07db      	lsls	r3, r3, #31
   12c00:	f53f ae4c 	bmi.w	1289c <_dtoa_r+0x61c>
   12c04:	46d9      	mov	r9, fp
   12c06:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   12c0a:	2b30      	cmp	r3, #48	; 0x30
   12c0c:	d0fa      	beq.n	12c04 <_dtoa_r+0x984>
   12c0e:	e657      	b.n	128c0 <_dtoa_r+0x640>
   12c10:	9b04      	ldr	r3, [sp, #16]
   12c12:	9a00      	ldr	r2, [sp, #0]
   12c14:	3301      	adds	r3, #1
   12c16:	9304      	str	r3, [sp, #16]
   12c18:	2331      	movs	r3, #49	; 0x31
   12c1a:	7013      	strb	r3, [r2, #0]
   12c1c:	e650      	b.n	128c0 <_dtoa_r+0x640>
   12c1e:	f1ba 0f00 	cmp.w	sl, #0
   12c22:	f000 8123 	beq.w	12e6c <_dtoa_r+0xbec>
   12c26:	f202 4233 	addw	r2, r2, #1075	; 0x433
   12c2a:	9b06      	ldr	r3, [sp, #24]
   12c2c:	9309      	str	r3, [sp, #36]	; 0x24
   12c2e:	4413      	add	r3, r2
   12c30:	f8dd a020 	ldr.w	sl, [sp, #32]
   12c34:	9306      	str	r3, [sp, #24]
   12c36:	4490      	add	r8, r2
   12c38:	e592      	b.n	12760 <_dtoa_r+0x4e0>
   12c3a:	ee07 0a90 	vmov	s15, r0
   12c3e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   12c42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   12c46:	eea6 5b07 	vfma.f64	d5, d6, d7
   12c4a:	ee15 2a90 	vmov	r2, s11
   12c4e:	ec51 0b15 	vmov	r0, r1, d5
   12c52:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   12c56:	ec41 0b15 	vmov	d5, r0, r1
   12c5a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   12c5e:	ee36 7b47 	vsub.f64	d7, d6, d7
   12c62:	eeb4 7bc5 	vcmpe.f64	d7, d5
   12c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12c6a:	f300 8137 	bgt.w	12edc <_dtoa_r+0xc5c>
   12c6e:	eeb1 5b45 	vneg.f64	d5, d5
   12c72:	eeb4 7bc5 	vcmpe.f64	d7, d5
   12c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12c7a:	f57f acfb 	bpl.w	12674 <_dtoa_r+0x3f4>
   12c7e:	f04f 0a00 	mov.w	sl, #0
   12c82:	4656      	mov	r6, sl
   12c84:	e515      	b.n	126b2 <_dtoa_r+0x432>
   12c86:	f000 80f5 	beq.w	12e74 <_dtoa_r+0xbf4>
   12c8a:	9b04      	ldr	r3, [sp, #16]
   12c8c:	4951      	ldr	r1, [pc, #324]	; (12dd4 <_dtoa_r+0xb54>)
   12c8e:	425a      	negs	r2, r3
   12c90:	f002 000f 	and.w	r0, r2, #15
   12c94:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   12c98:	ed91 6b00 	vldr	d6, [r1]
   12c9c:	1112      	asrs	r2, r2, #4
   12c9e:	ee28 6b06 	vmul.f64	d6, d8, d6
   12ca2:	f000 8142 	beq.w	12f2a <_dtoa_r+0xcaa>
   12ca6:	eeb0 7b46 	vmov.f64	d7, d6
   12caa:	494b      	ldr	r1, [pc, #300]	; (12dd8 <_dtoa_r+0xb58>)
   12cac:	2600      	movs	r6, #0
   12cae:	2002      	movs	r0, #2
   12cb0:	07d3      	lsls	r3, r2, #31
   12cb2:	d505      	bpl.n	12cc0 <_dtoa_r+0xa40>
   12cb4:	ed91 5b00 	vldr	d5, [r1]
   12cb8:	3001      	adds	r0, #1
   12cba:	2601      	movs	r6, #1
   12cbc:	ee27 7b05 	vmul.f64	d7, d7, d5
   12cc0:	1052      	asrs	r2, r2, #1
   12cc2:	f101 0108 	add.w	r1, r1, #8
   12cc6:	d1f3      	bne.n	12cb0 <_dtoa_r+0xa30>
   12cc8:	2e00      	cmp	r6, #0
   12cca:	fe06 6b07 	vseleq.f64	d6, d6, d7
   12cce:	e41e      	b.n	1250e <_dtoa_r+0x28e>
   12cd0:	9b02      	ldr	r3, [sp, #8]
   12cd2:	2b00      	cmp	r3, #0
   12cd4:	f47f ae37 	bne.w	12946 <_dtoa_r+0x6c6>
   12cd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   12cdc:	f3c1 0213 	ubfx	r2, r1, #0, #20
   12ce0:	2a00      	cmp	r2, #0
   12ce2:	f040 8137 	bne.w	12f54 <_dtoa_r+0xcd4>
   12ce6:	4a3d      	ldr	r2, [pc, #244]	; (12ddc <_dtoa_r+0xb5c>)
   12ce8:	400a      	ands	r2, r1
   12cea:	2a00      	cmp	r2, #0
   12cec:	f000 80fa 	beq.w	12ee4 <_dtoa_r+0xc64>
   12cf0:	9b06      	ldr	r3, [sp, #24]
   12cf2:	3301      	adds	r3, #1
   12cf4:	9306      	str	r3, [sp, #24]
   12cf6:	2301      	movs	r3, #1
   12cf8:	f108 0801 	add.w	r8, r8, #1
   12cfc:	9308      	str	r3, [sp, #32]
   12cfe:	e56f      	b.n	127e0 <_dtoa_r+0x560>
   12d00:	4629      	mov	r1, r5
   12d02:	9a08      	ldr	r2, [sp, #32]
   12d04:	4620      	mov	r0, r4
   12d06:	f7fb fadf 	bl	e2c8 <__pow5mult>
   12d0a:	4605      	mov	r5, r0
   12d0c:	e55a      	b.n	127c4 <_dtoa_r+0x544>
   12d0e:	2a00      	cmp	r2, #0
   12d10:	dd12      	ble.n	12d38 <_dtoa_r+0xab8>
   12d12:	4629      	mov	r1, r5
   12d14:	2201      	movs	r2, #1
   12d16:	4620      	mov	r0, r4
   12d18:	9301      	str	r3, [sp, #4]
   12d1a:	f7fb fb35 	bl	e388 <__lshift>
   12d1e:	4651      	mov	r1, sl
   12d20:	4605      	mov	r5, r0
   12d22:	f7fb fba9 	bl	e478 <__mcmp>
   12d26:	2800      	cmp	r0, #0
   12d28:	9b01      	ldr	r3, [sp, #4]
   12d2a:	f340 80e1 	ble.w	12ef0 <_dtoa_r+0xc70>
   12d2e:	2b39      	cmp	r3, #57	; 0x39
   12d30:	f000 80ca 	beq.w	12ec8 <_dtoa_r+0xc48>
   12d34:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   12d38:	46b9      	mov	r9, r7
   12d3a:	f809 3b01 	strb.w	r3, [r9], #1
   12d3e:	9b04      	ldr	r3, [sp, #16]
   12d40:	3301      	adds	r3, #1
   12d42:	4637      	mov	r7, r6
   12d44:	9304      	str	r3, [sp, #16]
   12d46:	4646      	mov	r6, r8
   12d48:	e5ba      	b.n	128c0 <_dtoa_r+0x640>
   12d4a:	ee38 8b08 	vadd.f64	d8, d8, d8
   12d4e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   12d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12d56:	dc0a      	bgt.n	12d6e <_dtoa_r+0xaee>
   12d58:	eeb4 8b46 	vcmp.f64	d8, d6
   12d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12d60:	f47f acdc 	bne.w	1271c <_dtoa_r+0x49c>
   12d64:	ee17 3a10 	vmov	r3, s14
   12d68:	07d8      	lsls	r0, r3, #31
   12d6a:	f57f acd7 	bpl.w	1271c <_dtoa_r+0x49c>
   12d6e:	9a00      	ldr	r2, [sp, #0]
   12d70:	e454      	b.n	1261c <_dtoa_r+0x39c>
   12d72:	6871      	ldr	r1, [r6, #4]
   12d74:	4620      	mov	r0, r4
   12d76:	f7fb f8a1 	bl	debc <_Balloc>
   12d7a:	4607      	mov	r7, r0
   12d7c:	2800      	cmp	r0, #0
   12d7e:	f000 80de 	beq.w	12f3e <_dtoa_r+0xcbe>
   12d82:	6933      	ldr	r3, [r6, #16]
   12d84:	3302      	adds	r3, #2
   12d86:	009a      	lsls	r2, r3, #2
   12d88:	f106 010c 	add.w	r1, r6, #12
   12d8c:	300c      	adds	r0, #12
   12d8e:	f7f5 fca1 	bl	86d4 <memcpy>
   12d92:	4639      	mov	r1, r7
   12d94:	2201      	movs	r2, #1
   12d96:	4620      	mov	r0, r4
   12d98:	f7fb faf6 	bl	e388 <__lshift>
   12d9c:	4680      	mov	r8, r0
   12d9e:	e5fe      	b.n	1299e <_dtoa_r+0x71e>
   12da0:	9b06      	ldr	r3, [sp, #24]
   12da2:	eba3 0309 	sub.w	r3, r3, r9
   12da6:	9309      	str	r3, [sp, #36]	; 0x24
   12da8:	e4da      	b.n	12760 <_dtoa_r+0x4e0>
   12daa:	2b39      	cmp	r3, #57	; 0x39
   12dac:	f000 808c 	beq.w	12ec8 <_dtoa_r+0xc48>
   12db0:	46b9      	mov	r9, r7
   12db2:	3301      	adds	r3, #1
   12db4:	e7c1      	b.n	12d3a <_dtoa_r+0xaba>
   12db6:	9a04      	ldr	r2, [sp, #16]
   12db8:	3201      	adds	r2, #1
   12dba:	4637      	mov	r7, r6
   12dbc:	9204      	str	r2, [sp, #16]
   12dbe:	4646      	mov	r6, r8
   12dc0:	e55f      	b.n	12882 <_dtoa_r+0x602>
   12dc2:	4629      	mov	r1, r5
   12dc4:	4620      	mov	r0, r4
   12dc6:	f7fb fa7f 	bl	e2c8 <__pow5mult>
   12dca:	4605      	mov	r5, r0
   12dcc:	e4fa      	b.n	127c4 <_dtoa_r+0x544>
   12dce:	bf00      	nop
   12dd0:	20000e68 	.word	0x20000e68
   12dd4:	200003a8 	.word	0x200003a8
   12dd8:	20000380 	.word	0x20000380
   12ddc:	7ff00000 	.word	0x7ff00000
   12de0:	4b5e      	ldr	r3, [pc, #376]	; (12f5c <_dtoa_r+0xcdc>)
   12de2:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   12de6:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   12dea:	ed1c 3b02 	vldr	d3, [ip, #-8]
   12dee:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   12df2:	ee36 7b47 	vsub.f64	d7, d6, d7
   12df6:	ec41 0b16 	vmov	d6, r0, r1
   12dfa:	ee15 1a90 	vmov	r1, s11
   12dfe:	ee23 3b06 	vmul.f64	d3, d3, d6
   12e02:	9800      	ldr	r0, [sp, #0]
   12e04:	3130      	adds	r1, #48	; 0x30
   12e06:	2a01      	cmp	r2, #1
   12e08:	f800 1b01 	strb.w	r1, [r0], #1
   12e0c:	f000 8083 	beq.w	12f16 <_dtoa_r+0xc96>
   12e10:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12e14:	9b00      	ldr	r3, [sp, #0]
   12e16:	1899      	adds	r1, r3, r2
   12e18:	ee27 7b04 	vmul.f64	d7, d7, d4
   12e1c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   12e20:	ee16 3a90 	vmov	r3, s13
   12e24:	3330      	adds	r3, #48	; 0x30
   12e26:	f800 3b01 	strb.w	r3, [r0], #1
   12e2a:	4281      	cmp	r1, r0
   12e2c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   12e30:	ee37 7b45 	vsub.f64	d7, d7, d5
   12e34:	d1f0      	bne.n	12e18 <_dtoa_r+0xb98>
   12e36:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   12e3a:	ee33 5b06 	vadd.f64	d5, d3, d6
   12e3e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   12e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12e46:	f53f abe3 	bmi.w	12610 <_dtoa_r+0x390>
   12e4a:	ee36 6b43 	vsub.f64	d6, d6, d3
   12e4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   12e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12e56:	f77f ac0d 	ble.w	12674 <_dtoa_r+0x3f4>
   12e5a:	4689      	mov	r9, r1
   12e5c:	3901      	subs	r1, #1
   12e5e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   12e62:	2b30      	cmp	r3, #48	; 0x30
   12e64:	d0f9      	beq.n	12e5a <_dtoa_r+0xbda>
   12e66:	1c73      	adds	r3, r6, #1
   12e68:	9304      	str	r3, [sp, #16]
   12e6a:	e539      	b.n	128e0 <_dtoa_r+0x660>
   12e6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12e6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   12e72:	e6da      	b.n	12c2a <_dtoa_r+0x9aa>
   12e74:	2002      	movs	r0, #2
   12e76:	eeb0 6b48 	vmov.f64	d6, d8
   12e7a:	f7ff bb48 	b.w	1250e <_dtoa_r+0x28e>
   12e7e:	f1b9 0f00 	cmp.w	r9, #0
   12e82:	f43f aeda 	beq.w	12c3a <_dtoa_r+0x9ba>
   12e86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12e88:	2a00      	cmp	r2, #0
   12e8a:	f77f abf3 	ble.w	12674 <_dtoa_r+0x3f4>
   12e8e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12e92:	ee26 6b04 	vmul.f64	d6, d6, d4
   12e96:	3001      	adds	r0, #1
   12e98:	ee07 0a90 	vmov	s15, r0
   12e9c:	9b04      	ldr	r3, [sp, #16]
   12e9e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   12ea2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   12ea6:	eea6 7b05 	vfma.f64	d7, d6, d5
   12eaa:	ee17 ca90 	vmov	ip, s15
   12eae:	ec51 0b17 	vmov	r0, r1, d7
   12eb2:	1e5e      	subs	r6, r3, #1
   12eb4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   12eb8:	f7ff bb47 	b.w	1254a <_dtoa_r+0x2ca>
   12ebc:	9b04      	ldr	r3, [sp, #16]
   12ebe:	3301      	adds	r3, #1
   12ec0:	9304      	str	r3, [sp, #16]
   12ec2:	2331      	movs	r3, #49	; 0x31
   12ec4:	f7ff bbb1 	b.w	1262a <_dtoa_r+0x3aa>
   12ec8:	9b04      	ldr	r3, [sp, #16]
   12eca:	46bb      	mov	fp, r7
   12ecc:	3301      	adds	r3, #1
   12ece:	9304      	str	r3, [sp, #16]
   12ed0:	2339      	movs	r3, #57	; 0x39
   12ed2:	4637      	mov	r7, r6
   12ed4:	f80b 3b01 	strb.w	r3, [fp], #1
   12ed8:	4646      	mov	r6, r8
   12eda:	e4e1      	b.n	128a0 <_dtoa_r+0x620>
   12edc:	f04f 0a00 	mov.w	sl, #0
   12ee0:	4656      	mov	r6, sl
   12ee2:	e653      	b.n	12b8c <_dtoa_r+0x90c>
   12ee4:	9208      	str	r2, [sp, #32]
   12ee6:	e47b      	b.n	127e0 <_dtoa_r+0x560>
   12ee8:	1c73      	adds	r3, r6, #1
   12eea:	9304      	str	r3, [sp, #16]
   12eec:	4689      	mov	r9, r1
   12eee:	e4f7      	b.n	128e0 <_dtoa_r+0x660>
   12ef0:	f47f af22 	bne.w	12d38 <_dtoa_r+0xab8>
   12ef4:	07da      	lsls	r2, r3, #31
   12ef6:	f57f af1f 	bpl.w	12d38 <_dtoa_r+0xab8>
   12efa:	e718      	b.n	12d2e <_dtoa_r+0xaae>
   12efc:	2b39      	cmp	r3, #57	; 0x39
   12efe:	d0e3      	beq.n	12ec8 <_dtoa_r+0xc48>
   12f00:	f1b9 0f00 	cmp.w	r9, #0
   12f04:	f73f af16 	bgt.w	12d34 <_dtoa_r+0xab4>
   12f08:	e716      	b.n	12d38 <_dtoa_r+0xab8>
   12f0a:	9b01      	ldr	r3, [sp, #4]
   12f0c:	2b02      	cmp	r3, #2
   12f0e:	f73f ae28 	bgt.w	12b62 <_dtoa_r+0x8e2>
   12f12:	9704      	str	r7, [sp, #16]
   12f14:	e5ba      	b.n	12a8c <_dtoa_r+0x80c>
   12f16:	4601      	mov	r1, r0
   12f18:	e78d      	b.n	12e36 <_dtoa_r+0xbb6>
   12f1a:	9b01      	ldr	r3, [sp, #4]
   12f1c:	2b02      	cmp	r3, #2
   12f1e:	f73f ae20 	bgt.w	12b62 <_dtoa_r+0x8e2>
   12f22:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   12f26:	9704      	str	r7, [sp, #16]
   12f28:	e52b      	b.n	12982 <_dtoa_r+0x702>
   12f2a:	2002      	movs	r0, #2
   12f2c:	f7ff baef 	b.w	1250e <_dtoa_r+0x28e>
   12f30:	4b0b      	ldr	r3, [pc, #44]	; (12f60 <_dtoa_r+0xce0>)
   12f32:	480c      	ldr	r0, [pc, #48]	; (12f64 <_dtoa_r+0xce4>)
   12f34:	2200      	movs	r2, #0
   12f36:	f240 11af 	movw	r1, #431	; 0x1af
   12f3a:	f7ff f8b1 	bl	120a0 <__assert_func>
   12f3e:	4b08      	ldr	r3, [pc, #32]	; (12f60 <_dtoa_r+0xce0>)
   12f40:	4808      	ldr	r0, [pc, #32]	; (12f64 <_dtoa_r+0xce4>)
   12f42:	463a      	mov	r2, r7
   12f44:	f240 21ef 	movw	r1, #751	; 0x2ef
   12f48:	f7ff f8aa 	bl	120a0 <__assert_func>
   12f4c:	4b06      	ldr	r3, [pc, #24]	; (12f68 <_dtoa_r+0xce8>)
   12f4e:	9300      	str	r3, [sp, #0]
   12f50:	f7ff b9d2 	b.w	122f8 <_dtoa_r+0x78>
   12f54:	9b02      	ldr	r3, [sp, #8]
   12f56:	9308      	str	r3, [sp, #32]
   12f58:	e4f7      	b.n	1294a <_dtoa_r+0x6ca>
   12f5a:	bf00      	nop
   12f5c:	200003a8 	.word	0x200003a8
   12f60:	20000b7c 	.word	0x20000b7c
   12f64:	20000e6c 	.word	0x20000e6c
   12f68:	20000e5c 	.word	0x20000e5c

00012f6c <_strtoul_l.constprop.0>:
   12f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12f70:	4607      	mov	r7, r0
   12f72:	484c      	ldr	r0, [pc, #304]	; (130a4 <_strtoul_l.constprop.0+0x138>)
   12f74:	460e      	mov	r6, r1
   12f76:	4635      	mov	r5, r6
   12f78:	f816 eb01 	ldrb.w	lr, [r6], #1
   12f7c:	f810 c00e 	ldrb.w	ip, [r0, lr]
   12f80:	f01c 0c08 	ands.w	ip, ip, #8
   12f84:	d1f7      	bne.n	12f76 <_strtoul_l.constprop.0+0xa>
   12f86:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   12f8a:	d05a      	beq.n	13042 <_strtoul_l.constprop.0+0xd6>
   12f8c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   12f90:	bf03      	ittte	eq
   12f92:	f896 e000 	ldrbeq.w	lr, [r6]
   12f96:	4664      	moveq	r4, ip
   12f98:	1cae      	addeq	r6, r5, #2
   12f9a:	4664      	movne	r4, ip
   12f9c:	b15b      	cbz	r3, 12fb6 <_strtoul_l.constprop.0+0x4a>
   12f9e:	2b10      	cmp	r3, #16
   12fa0:	d054      	beq.n	1304c <_strtoul_l.constprop.0+0xe0>
   12fa2:	f04f 38ff 	mov.w	r8, #4294967295
   12fa6:	fbb8 f8f3 	udiv	r8, r8, r3
   12faa:	fb03 fa08 	mul.w	sl, r3, r8
   12fae:	ea6f 0a0a 	mvn.w	sl, sl
   12fb2:	4699      	mov	r9, r3
   12fb4:	e008      	b.n	12fc8 <_strtoul_l.constprop.0+0x5c>
   12fb6:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   12fba:	d05a      	beq.n	13072 <_strtoul_l.constprop.0+0x106>
   12fbc:	230a      	movs	r3, #10
   12fbe:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 130a8 <_strtoul_l.constprop.0+0x13c>
   12fc2:	f04f 0a05 	mov.w	sl, #5
   12fc6:	4699      	mov	r9, r3
   12fc8:	2500      	movs	r5, #0
   12fca:	4628      	mov	r0, r5
   12fcc:	e005      	b.n	12fda <_strtoul_l.constprop.0+0x6e>
   12fce:	d02c      	beq.n	1302a <_strtoul_l.constprop.0+0xbe>
   12fd0:	fb09 c000 	mla	r0, r9, r0, ip
   12fd4:	2501      	movs	r5, #1
   12fd6:	f816 eb01 	ldrb.w	lr, [r6], #1
   12fda:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   12fde:	f1bc 0f09 	cmp.w	ip, #9
   12fe2:	d906      	bls.n	12ff2 <_strtoul_l.constprop.0+0x86>
   12fe4:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   12fe8:	f1bc 0f19 	cmp.w	ip, #25
   12fec:	d80b      	bhi.n	13006 <_strtoul_l.constprop.0+0x9a>
   12fee:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   12ff2:	4563      	cmp	r3, ip
   12ff4:	dd10      	ble.n	13018 <_strtoul_l.constprop.0+0xac>
   12ff6:	f1b5 3fff 	cmp.w	r5, #4294967295
   12ffa:	d0ec      	beq.n	12fd6 <_strtoul_l.constprop.0+0x6a>
   12ffc:	4540      	cmp	r0, r8
   12ffe:	d9e6      	bls.n	12fce <_strtoul_l.constprop.0+0x62>
   13000:	f04f 35ff 	mov.w	r5, #4294967295
   13004:	e7e7      	b.n	12fd6 <_strtoul_l.constprop.0+0x6a>
   13006:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   1300a:	f1bc 0f19 	cmp.w	ip, #25
   1300e:	d803      	bhi.n	13018 <_strtoul_l.constprop.0+0xac>
   13010:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   13014:	4563      	cmp	r3, ip
   13016:	dcee      	bgt.n	12ff6 <_strtoul_l.constprop.0+0x8a>
   13018:	1c6b      	adds	r3, r5, #1
   1301a:	d00b      	beq.n	13034 <_strtoul_l.constprop.0+0xc8>
   1301c:	b104      	cbz	r4, 13020 <_strtoul_l.constprop.0+0xb4>
   1301e:	4240      	negs	r0, r0
   13020:	b10a      	cbz	r2, 13026 <_strtoul_l.constprop.0+0xba>
   13022:	b965      	cbnz	r5, 1303e <_strtoul_l.constprop.0+0xd2>
   13024:	6011      	str	r1, [r2, #0]
   13026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1302a:	45d4      	cmp	ip, sl
   1302c:	ddd0      	ble.n	12fd0 <_strtoul_l.constprop.0+0x64>
   1302e:	f04f 35ff 	mov.w	r5, #4294967295
   13032:	e7d0      	b.n	12fd6 <_strtoul_l.constprop.0+0x6a>
   13034:	2322      	movs	r3, #34	; 0x22
   13036:	603b      	str	r3, [r7, #0]
   13038:	4628      	mov	r0, r5
   1303a:	2a00      	cmp	r2, #0
   1303c:	d0f3      	beq.n	13026 <_strtoul_l.constprop.0+0xba>
   1303e:	1e71      	subs	r1, r6, #1
   13040:	e7f0      	b.n	13024 <_strtoul_l.constprop.0+0xb8>
   13042:	f896 e000 	ldrb.w	lr, [r6]
   13046:	2401      	movs	r4, #1
   13048:	1cae      	adds	r6, r5, #2
   1304a:	e7a7      	b.n	12f9c <_strtoul_l.constprop.0+0x30>
   1304c:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   13050:	d121      	bne.n	13096 <_strtoul_l.constprop.0+0x12a>
   13052:	7830      	ldrb	r0, [r6, #0]
   13054:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   13058:	2858      	cmp	r0, #88	; 0x58
   1305a:	d116      	bne.n	1308a <_strtoul_l.constprop.0+0x11e>
   1305c:	f04f 0910 	mov.w	r9, #16
   13060:	f896 e001 	ldrb.w	lr, [r6, #1]
   13064:	f04f 0a0f 	mov.w	sl, #15
   13068:	3602      	adds	r6, #2
   1306a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1306e:	464b      	mov	r3, r9
   13070:	e7aa      	b.n	12fc8 <_strtoul_l.constprop.0+0x5c>
   13072:	7833      	ldrb	r3, [r6, #0]
   13074:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   13078:	2b58      	cmp	r3, #88	; 0x58
   1307a:	d0ef      	beq.n	1305c <_strtoul_l.constprop.0+0xf0>
   1307c:	2308      	movs	r3, #8
   1307e:	f04f 0a07 	mov.w	sl, #7
   13082:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   13086:	4699      	mov	r9, r3
   13088:	e79e      	b.n	12fc8 <_strtoul_l.constprop.0+0x5c>
   1308a:	4699      	mov	r9, r3
   1308c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   13090:	f04f 0a0f 	mov.w	sl, #15
   13094:	e798      	b.n	12fc8 <_strtoul_l.constprop.0+0x5c>
   13096:	f04f 0a0f 	mov.w	sl, #15
   1309a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1309e:	4699      	mov	r9, r3
   130a0:	e792      	b.n	12fc8 <_strtoul_l.constprop.0+0x5c>
   130a2:	bf00      	nop
   130a4:	20000d59 	.word	0x20000d59
   130a8:	19999999 	.word	0x19999999

000130ac <_strtoul_r>:
   130ac:	f7ff bf5e 	b.w	12f6c <_strtoul_l.constprop.0>

000130b0 <_strtoll_l.constprop.0>:
   130b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130b4:	b085      	sub	sp, #20
   130b6:	461f      	mov	r7, r3
   130b8:	4b57      	ldr	r3, [pc, #348]	; (13218 <_strtoll_l.constprop.0+0x168>)
   130ba:	9003      	str	r0, [sp, #12]
   130bc:	468a      	mov	sl, r1
   130be:	9200      	str	r2, [sp, #0]
   130c0:	460d      	mov	r5, r1
   130c2:	462a      	mov	r2, r5
   130c4:	f815 4b01 	ldrb.w	r4, [r5], #1
   130c8:	5d1e      	ldrb	r6, [r3, r4]
   130ca:	f016 0608 	ands.w	r6, r6, #8
   130ce:	d1f8      	bne.n	130c2 <_strtoll_l.constprop.0+0x12>
   130d0:	2c2d      	cmp	r4, #45	; 0x2d
   130d2:	d075      	beq.n	131c0 <_strtoll_l.constprop.0+0x110>
   130d4:	2c2b      	cmp	r4, #43	; 0x2b
   130d6:	bf05      	ittet	eq
   130d8:	782c      	ldrbeq	r4, [r5, #0]
   130da:	9602      	streq	r6, [sp, #8]
   130dc:	9602      	strne	r6, [sp, #8]
   130de:	1c95      	addeq	r5, r2, #2
   130e0:	f04f 36ff 	mov.w	r6, #4294967295
   130e4:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   130e8:	b12f      	cbz	r7, 130f6 <_strtoll_l.constprop.0+0x46>
   130ea:	2f10      	cmp	r7, #16
   130ec:	d06f      	beq.n	131ce <_strtoll_l.constprop.0+0x11e>
   130ee:	46b8      	mov	r8, r7
   130f0:	ea4f 79e7 	mov.w	r9, r7, asr #31
   130f4:	e005      	b.n	13102 <_strtoll_l.constprop.0+0x52>
   130f6:	2c30      	cmp	r4, #48	; 0x30
   130f8:	d074      	beq.n	131e4 <_strtoll_l.constprop.0+0x134>
   130fa:	f04f 080a 	mov.w	r8, #10
   130fe:	46b9      	mov	r9, r7
   13100:	4647      	mov	r7, r8
   13102:	4642      	mov	r2, r8
   13104:	464b      	mov	r3, r9
   13106:	4630      	mov	r0, r6
   13108:	4659      	mov	r1, fp
   1310a:	f7f7 fca1 	bl	aa50 <__aeabi_uldivmod>
   1310e:	2300      	movs	r3, #0
   13110:	9201      	str	r2, [sp, #4]
   13112:	4684      	mov	ip, r0
   13114:	460a      	mov	r2, r1
   13116:	4618      	mov	r0, r3
   13118:	4619      	mov	r1, r3
   1311a:	e011      	b.n	13140 <_strtoll_l.constprop.0+0x90>
   1311c:	428a      	cmp	r2, r1
   1311e:	bf08      	it	eq
   13120:	4584      	cmpeq	ip, r0
   13122:	d03d      	beq.n	131a0 <_strtoll_l.constprop.0+0xf0>
   13124:	fb00 f309 	mul.w	r3, r0, r9
   13128:	fb08 3301 	mla	r3, r8, r1, r3
   1312c:	fba0 0108 	umull	r0, r1, r0, r8
   13130:	440b      	add	r3, r1
   13132:	eb1e 0000 	adds.w	r0, lr, r0
   13136:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   1313a:	2301      	movs	r3, #1
   1313c:	f815 4b01 	ldrb.w	r4, [r5], #1
   13140:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   13144:	f1be 0f09 	cmp.w	lr, #9
   13148:	d906      	bls.n	13158 <_strtoll_l.constprop.0+0xa8>
   1314a:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   1314e:	f1be 0f19 	cmp.w	lr, #25
   13152:	d80c      	bhi.n	1316e <_strtoll_l.constprop.0+0xbe>
   13154:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   13158:	4577      	cmp	r7, lr
   1315a:	dd11      	ble.n	13180 <_strtoll_l.constprop.0+0xd0>
   1315c:	1c5c      	adds	r4, r3, #1
   1315e:	d0ed      	beq.n	1313c <_strtoll_l.constprop.0+0x8c>
   13160:	4584      	cmp	ip, r0
   13162:	eb72 0301 	sbcs.w	r3, r2, r1
   13166:	d2d9      	bcs.n	1311c <_strtoll_l.constprop.0+0x6c>
   13168:	f04f 33ff 	mov.w	r3, #4294967295
   1316c:	e7e6      	b.n	1313c <_strtoll_l.constprop.0+0x8c>
   1316e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   13172:	f1be 0f19 	cmp.w	lr, #25
   13176:	d803      	bhi.n	13180 <_strtoll_l.constprop.0+0xd0>
   13178:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   1317c:	4577      	cmp	r7, lr
   1317e:	dced      	bgt.n	1315c <_strtoll_l.constprop.0+0xac>
   13180:	1c5a      	adds	r2, r3, #1
   13182:	d013      	beq.n	131ac <_strtoll_l.constprop.0+0xfc>
   13184:	9a02      	ldr	r2, [sp, #8]
   13186:	b112      	cbz	r2, 1318e <_strtoll_l.constprop.0+0xde>
   13188:	4240      	negs	r0, r0
   1318a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1318e:	9a00      	ldr	r2, [sp, #0]
   13190:	b11a      	cbz	r2, 1319a <_strtoll_l.constprop.0+0xea>
   13192:	bba3      	cbnz	r3, 131fe <_strtoll_l.constprop.0+0x14e>
   13194:	9b00      	ldr	r3, [sp, #0]
   13196:	f8c3 a000 	str.w	sl, [r3]
   1319a:	b005      	add	sp, #20
   1319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131a0:	9b01      	ldr	r3, [sp, #4]
   131a2:	4573      	cmp	r3, lr
   131a4:	dabe      	bge.n	13124 <_strtoll_l.constprop.0+0x74>
   131a6:	f04f 33ff 	mov.w	r3, #4294967295
   131aa:	e7c7      	b.n	1313c <_strtoll_l.constprop.0+0x8c>
   131ac:	9a03      	ldr	r2, [sp, #12]
   131ae:	2322      	movs	r3, #34	; 0x22
   131b0:	6013      	str	r3, [r2, #0]
   131b2:	9b00      	ldr	r3, [sp, #0]
   131b4:	b333      	cbz	r3, 13204 <_strtoll_l.constprop.0+0x154>
   131b6:	f105 3aff 	add.w	sl, r5, #4294967295
   131ba:	4630      	mov	r0, r6
   131bc:	4659      	mov	r1, fp
   131be:	e7e9      	b.n	13194 <_strtoll_l.constprop.0+0xe4>
   131c0:	2301      	movs	r3, #1
   131c2:	782c      	ldrb	r4, [r5, #0]
   131c4:	9302      	str	r3, [sp, #8]
   131c6:	1c95      	adds	r5, r2, #2
   131c8:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   131cc:	e78c      	b.n	130e8 <_strtoll_l.constprop.0+0x38>
   131ce:	2c30      	cmp	r4, #48	; 0x30
   131d0:	d104      	bne.n	131dc <_strtoll_l.constprop.0+0x12c>
   131d2:	782b      	ldrb	r3, [r5, #0]
   131d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   131d8:	2b58      	cmp	r3, #88	; 0x58
   131da:	d008      	beq.n	131ee <_strtoll_l.constprop.0+0x13e>
   131dc:	46b8      	mov	r8, r7
   131de:	f04f 0900 	mov.w	r9, #0
   131e2:	e78e      	b.n	13102 <_strtoll_l.constprop.0+0x52>
   131e4:	782b      	ldrb	r3, [r5, #0]
   131e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   131ea:	2b58      	cmp	r3, #88	; 0x58
   131ec:	d10f      	bne.n	1320e <_strtoll_l.constprop.0+0x15e>
   131ee:	f04f 0810 	mov.w	r8, #16
   131f2:	786c      	ldrb	r4, [r5, #1]
   131f4:	f04f 0900 	mov.w	r9, #0
   131f8:	3502      	adds	r5, #2
   131fa:	4647      	mov	r7, r8
   131fc:	e781      	b.n	13102 <_strtoll_l.constprop.0+0x52>
   131fe:	4606      	mov	r6, r0
   13200:	468b      	mov	fp, r1
   13202:	e7d8      	b.n	131b6 <_strtoll_l.constprop.0+0x106>
   13204:	4630      	mov	r0, r6
   13206:	4659      	mov	r1, fp
   13208:	b005      	add	sp, #20
   1320a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1320e:	f04f 0808 	mov.w	r8, #8
   13212:	46b9      	mov	r9, r7
   13214:	4647      	mov	r7, r8
   13216:	e774      	b.n	13102 <_strtoll_l.constprop.0+0x52>
   13218:	20000d59 	.word	0x20000d59

0001321c <_strtoll_r>:
   1321c:	f7ff bf48 	b.w	130b0 <_strtoll_l.constprop.0>

00013220 <_strtoull_l.constprop.0>:
   13220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13224:	b085      	sub	sp, #20
   13226:	468b      	mov	fp, r1
   13228:	9201      	str	r2, [sp, #4]
   1322a:	4a62      	ldr	r2, [pc, #392]	; (133b4 <_strtoull_l.constprop.0+0x194>)
   1322c:	9003      	str	r0, [sp, #12]
   1322e:	461e      	mov	r6, r3
   13230:	460d      	mov	r5, r1
   13232:	4629      	mov	r1, r5
   13234:	f815 4b01 	ldrb.w	r4, [r5], #1
   13238:	5d13      	ldrb	r3, [r2, r4]
   1323a:	f013 0308 	ands.w	r3, r3, #8
   1323e:	d1f8      	bne.n	13232 <_strtoull_l.constprop.0+0x12>
   13240:	2c2d      	cmp	r4, #45	; 0x2d
   13242:	f000 8082 	beq.w	1334a <_strtoull_l.constprop.0+0x12a>
   13246:	2c2b      	cmp	r4, #43	; 0x2b
   13248:	bf03      	ittte	eq
   1324a:	782c      	ldrbeq	r4, [r5, #0]
   1324c:	9302      	streq	r3, [sp, #8]
   1324e:	1c8d      	addeq	r5, r1, #2
   13250:	9302      	strne	r3, [sp, #8]
   13252:	b1be      	cbz	r6, 13284 <_strtoull_l.constprop.0+0x64>
   13254:	2e10      	cmp	r6, #16
   13256:	d07d      	beq.n	13354 <_strtoull_l.constprop.0+0x134>
   13258:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   1325c:	4632      	mov	r2, r6
   1325e:	4653      	mov	r3, sl
   13260:	f04f 30ff 	mov.w	r0, #4294967295
   13264:	f04f 31ff 	mov.w	r1, #4294967295
   13268:	f7f7 fbf2 	bl	aa50 <__aeabi_uldivmod>
   1326c:	4632      	mov	r2, r6
   1326e:	4607      	mov	r7, r0
   13270:	4688      	mov	r8, r1
   13272:	4653      	mov	r3, sl
   13274:	f04f 30ff 	mov.w	r0, #4294967295
   13278:	f04f 31ff 	mov.w	r1, #4294967295
   1327c:	46b1      	mov	r9, r6
   1327e:	f7f7 fbe7 	bl	aa50 <__aeabi_uldivmod>
   13282:	e00a      	b.n	1329a <_strtoull_l.constprop.0+0x7a>
   13284:	2c30      	cmp	r4, #48	; 0x30
   13286:	d079      	beq.n	1337c <_strtoull_l.constprop.0+0x15c>
   13288:	f04f 090a 	mov.w	r9, #10
   1328c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 133b8 <_strtoull_l.constprop.0+0x198>
   13290:	46b2      	mov	sl, r6
   13292:	2205      	movs	r2, #5
   13294:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   13298:	464e      	mov	r6, r9
   1329a:	f04f 0c00 	mov.w	ip, #0
   1329e:	4660      	mov	r0, ip
   132a0:	4661      	mov	r1, ip
   132a2:	e011      	b.n	132c8 <_strtoull_l.constprop.0+0xa8>
   132a4:	4541      	cmp	r1, r8
   132a6:	bf08      	it	eq
   132a8:	42b8      	cmpeq	r0, r7
   132aa:	d03e      	beq.n	1332a <_strtoull_l.constprop.0+0x10a>
   132ac:	fb00 f40a 	mul.w	r4, r0, sl
   132b0:	fb09 4101 	mla	r1, r9, r1, r4
   132b4:	fba0 0409 	umull	r0, r4, r0, r9
   132b8:	4421      	add	r1, r4
   132ba:	1818      	adds	r0, r3, r0
   132bc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   132c0:	f04f 0c01 	mov.w	ip, #1
   132c4:	f815 4b01 	ldrb.w	r4, [r5], #1
   132c8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   132cc:	2b09      	cmp	r3, #9
   132ce:	d905      	bls.n	132dc <_strtoull_l.constprop.0+0xbc>
   132d0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   132d4:	2b19      	cmp	r3, #25
   132d6:	d80d      	bhi.n	132f4 <_strtoull_l.constprop.0+0xd4>
   132d8:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   132dc:	429e      	cmp	r6, r3
   132de:	dd11      	ble.n	13304 <_strtoull_l.constprop.0+0xe4>
   132e0:	f1bc 3fff 	cmp.w	ip, #4294967295
   132e4:	d0ee      	beq.n	132c4 <_strtoull_l.constprop.0+0xa4>
   132e6:	4287      	cmp	r7, r0
   132e8:	eb78 0401 	sbcs.w	r4, r8, r1
   132ec:	d2da      	bcs.n	132a4 <_strtoull_l.constprop.0+0x84>
   132ee:	f04f 3cff 	mov.w	ip, #4294967295
   132f2:	e7e7      	b.n	132c4 <_strtoull_l.constprop.0+0xa4>
   132f4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   132f8:	2b19      	cmp	r3, #25
   132fa:	d803      	bhi.n	13304 <_strtoull_l.constprop.0+0xe4>
   132fc:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   13300:	429e      	cmp	r6, r3
   13302:	dced      	bgt.n	132e0 <_strtoull_l.constprop.0+0xc0>
   13304:	f1bc 3fff 	cmp.w	ip, #4294967295
   13308:	d014      	beq.n	13334 <_strtoull_l.constprop.0+0x114>
   1330a:	9b02      	ldr	r3, [sp, #8]
   1330c:	b113      	cbz	r3, 13314 <_strtoull_l.constprop.0+0xf4>
   1330e:	4240      	negs	r0, r0
   13310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13314:	9b01      	ldr	r3, [sp, #4]
   13316:	b12b      	cbz	r3, 13324 <_strtoull_l.constprop.0+0x104>
   13318:	f1bc 0f00 	cmp.w	ip, #0
   1331c:	d112      	bne.n	13344 <_strtoull_l.constprop.0+0x124>
   1331e:	9b01      	ldr	r3, [sp, #4]
   13320:	f8c3 b000 	str.w	fp, [r3]
   13324:	b005      	add	sp, #20
   13326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1332a:	4293      	cmp	r3, r2
   1332c:	ddbe      	ble.n	132ac <_strtoull_l.constprop.0+0x8c>
   1332e:	f04f 3cff 	mov.w	ip, #4294967295
   13332:	e7c7      	b.n	132c4 <_strtoull_l.constprop.0+0xa4>
   13334:	9a03      	ldr	r2, [sp, #12]
   13336:	2322      	movs	r3, #34	; 0x22
   13338:	6013      	str	r3, [r2, #0]
   1333a:	9b01      	ldr	r3, [sp, #4]
   1333c:	4660      	mov	r0, ip
   1333e:	4661      	mov	r1, ip
   13340:	2b00      	cmp	r3, #0
   13342:	d0ef      	beq.n	13324 <_strtoull_l.constprop.0+0x104>
   13344:	f105 3bff 	add.w	fp, r5, #4294967295
   13348:	e7e9      	b.n	1331e <_strtoull_l.constprop.0+0xfe>
   1334a:	2301      	movs	r3, #1
   1334c:	782c      	ldrb	r4, [r5, #0]
   1334e:	9302      	str	r3, [sp, #8]
   13350:	1c8d      	adds	r5, r1, #2
   13352:	e77e      	b.n	13252 <_strtoull_l.constprop.0+0x32>
   13354:	2c30      	cmp	r4, #48	; 0x30
   13356:	d123      	bne.n	133a0 <_strtoull_l.constprop.0+0x180>
   13358:	782b      	ldrb	r3, [r5, #0]
   1335a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1335e:	2b58      	cmp	r3, #88	; 0x58
   13360:	d11b      	bne.n	1339a <_strtoull_l.constprop.0+0x17a>
   13362:	f04f 0910 	mov.w	r9, #16
   13366:	786c      	ldrb	r4, [r5, #1]
   13368:	220f      	movs	r2, #15
   1336a:	3502      	adds	r5, #2
   1336c:	f04f 37ff 	mov.w	r7, #4294967295
   13370:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   13374:	f04f 0a00 	mov.w	sl, #0
   13378:	464e      	mov	r6, r9
   1337a:	e78e      	b.n	1329a <_strtoull_l.constprop.0+0x7a>
   1337c:	782b      	ldrb	r3, [r5, #0]
   1337e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   13382:	2b58      	cmp	r3, #88	; 0x58
   13384:	d0ed      	beq.n	13362 <_strtoull_l.constprop.0+0x142>
   13386:	f04f 0908 	mov.w	r9, #8
   1338a:	46b2      	mov	sl, r6
   1338c:	2207      	movs	r2, #7
   1338e:	f04f 37ff 	mov.w	r7, #4294967295
   13392:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   13396:	464e      	mov	r6, r9
   13398:	e77f      	b.n	1329a <_strtoull_l.constprop.0+0x7a>
   1339a:	f04f 0a00 	mov.w	sl, #0
   1339e:	e75d      	b.n	1325c <_strtoull_l.constprop.0+0x3c>
   133a0:	220f      	movs	r2, #15
   133a2:	f04f 37ff 	mov.w	r7, #4294967295
   133a6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   133aa:	46b1      	mov	r9, r6
   133ac:	f04f 0a00 	mov.w	sl, #0
   133b0:	e773      	b.n	1329a <_strtoull_l.constprop.0+0x7a>
   133b2:	bf00      	nop
   133b4:	20000d59 	.word	0x20000d59
   133b8:	19999999 	.word	0x19999999

000133bc <_strtoull_r>:
   133bc:	f7ff bf30 	b.w	13220 <_strtoull_l.constprop.0>

000133c0 <_mbrtowc_r>:
   133c0:	b570      	push	{r4, r5, r6, lr}
   133c2:	b082      	sub	sp, #8
   133c4:	4604      	mov	r4, r0
   133c6:	9d06      	ldr	r5, [sp, #24]
   133c8:	b155      	cbz	r5, 133e0 <_mbrtowc_r+0x20>
   133ca:	b16a      	cbz	r2, 133e8 <_mbrtowc_r+0x28>
   133cc:	480f      	ldr	r0, [pc, #60]	; (1340c <_mbrtowc_r+0x4c>)
   133ce:	9500      	str	r5, [sp, #0]
   133d0:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   133d4:	4620      	mov	r0, r4
   133d6:	47b0      	blx	r6
   133d8:	1c43      	adds	r3, r0, #1
   133da:	d010      	beq.n	133fe <_mbrtowc_r+0x3e>
   133dc:	b002      	add	sp, #8
   133de:	bd70      	pop	{r4, r5, r6, pc}
   133e0:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   133e4:	2a00      	cmp	r2, #0
   133e6:	d1f1      	bne.n	133cc <_mbrtowc_r+0xc>
   133e8:	4b08      	ldr	r3, [pc, #32]	; (1340c <_mbrtowc_r+0x4c>)
   133ea:	9500      	str	r5, [sp, #0]
   133ec:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   133f0:	4611      	mov	r1, r2
   133f2:	2301      	movs	r3, #1
   133f4:	4a06      	ldr	r2, [pc, #24]	; (13410 <_mbrtowc_r+0x50>)
   133f6:	4620      	mov	r0, r4
   133f8:	47b0      	blx	r6
   133fa:	1c43      	adds	r3, r0, #1
   133fc:	d1ee      	bne.n	133dc <_mbrtowc_r+0x1c>
   133fe:	2200      	movs	r2, #0
   13400:	238a      	movs	r3, #138	; 0x8a
   13402:	602a      	str	r2, [r5, #0]
   13404:	6023      	str	r3, [r4, #0]
   13406:	b002      	add	sp, #8
   13408:	bd70      	pop	{r4, r5, r6, pc}
   1340a:	bf00      	nop
   1340c:	200088ec 	.word	0x200088ec
   13410:	20008328 	.word	0x20008328

00013414 <_wcrtomb_r>:
   13414:	b570      	push	{r4, r5, r6, lr}
   13416:	4605      	mov	r5, r0
   13418:	b084      	sub	sp, #16
   1341a:	b15b      	cbz	r3, 13434 <_wcrtomb_r+0x20>
   1341c:	461c      	mov	r4, r3
   1341e:	b169      	cbz	r1, 1343c <_wcrtomb_r+0x28>
   13420:	4b0e      	ldr	r3, [pc, #56]	; (1345c <_wcrtomb_r+0x48>)
   13422:	4628      	mov	r0, r5
   13424:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   13428:	4623      	mov	r3, r4
   1342a:	47b0      	blx	r6
   1342c:	1c43      	adds	r3, r0, #1
   1342e:	d00f      	beq.n	13450 <_wcrtomb_r+0x3c>
   13430:	b004      	add	sp, #16
   13432:	bd70      	pop	{r4, r5, r6, pc}
   13434:	f500 7482 	add.w	r4, r0, #260	; 0x104
   13438:	2900      	cmp	r1, #0
   1343a:	d1f1      	bne.n	13420 <_wcrtomb_r+0xc>
   1343c:	4a07      	ldr	r2, [pc, #28]	; (1345c <_wcrtomb_r+0x48>)
   1343e:	4623      	mov	r3, r4
   13440:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   13444:	4628      	mov	r0, r5
   13446:	460a      	mov	r2, r1
   13448:	a901      	add	r1, sp, #4
   1344a:	47b0      	blx	r6
   1344c:	1c43      	adds	r3, r0, #1
   1344e:	d1ef      	bne.n	13430 <_wcrtomb_r+0x1c>
   13450:	2200      	movs	r2, #0
   13452:	238a      	movs	r3, #138	; 0x8a
   13454:	6022      	str	r2, [r4, #0]
   13456:	602b      	str	r3, [r5, #0]
   13458:	b004      	add	sp, #16
   1345a:	bd70      	pop	{r4, r5, r6, pc}
   1345c:	200088ec 	.word	0x200088ec

00013460 <_wcsrtombs_r>:
   13460:	b510      	push	{r4, lr}
   13462:	b082      	sub	sp, #8
   13464:	9c04      	ldr	r4, [sp, #16]
   13466:	e9cd 3400 	strd	r3, r4, [sp]
   1346a:	f04f 33ff 	mov.w	r3, #4294967295
   1346e:	f001 fd9f 	bl	14fb0 <_wcsnrtombs_r>
   13472:	b002      	add	sp, #8
   13474:	bd10      	pop	{r4, pc}
   13476:	bf00      	nop

00013478 <iswspace>:
   13478:	2100      	movs	r1, #0
   1347a:	f000 b801 	b.w	13480 <iswspace_l>
   1347e:	bf00      	nop

00013480 <iswspace_l>:
   13480:	b510      	push	{r4, lr}
   13482:	f000 f8ab 	bl	135dc <_jp2uc_l>
   13486:	4604      	mov	r4, r0
   13488:	f001 fda4 	bl	14fd4 <category>
   1348c:	f1a0 031a 	sub.w	r3, r0, #26
   13490:	b2db      	uxtb	r3, r3
   13492:	2b02      	cmp	r3, #2
   13494:	d906      	bls.n	134a4 <iswspace_l+0x24>
   13496:	f1a4 0009 	sub.w	r0, r4, #9
   1349a:	2804      	cmp	r0, #4
   1349c:	bf8c      	ite	hi
   1349e:	2000      	movhi	r0, #0
   134a0:	2001      	movls	r0, #1
   134a2:	bd10      	pop	{r4, pc}
   134a4:	2001      	movs	r0, #1
   134a6:	bd10      	pop	{r4, pc}

000134a8 <__jp2uc>:
   134a8:	2902      	cmp	r1, #2
   134aa:	d032      	beq.n	13512 <__jp2uc+0x6a>
   134ac:	2903      	cmp	r1, #3
   134ae:	f3c0 2307 	ubfx	r3, r0, #8, #8
   134b2:	bf1d      	ittte	ne
   134b4:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   134b8:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   134bc:	b2d2      	uxtbne	r2, r2
   134be:	b2c2      	uxtbeq	r2, r0
   134c0:	f103 0150 	add.w	r1, r3, #80	; 0x50
   134c4:	b2c9      	uxtb	r1, r1
   134c6:	291f      	cmp	r1, #31
   134c8:	d806      	bhi.n	134d8 <__jp2uc+0x30>
   134ca:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   134ce:	4288      	cmp	r0, r1
   134d0:	d969      	bls.n	135a6 <__jp2uc+0xfe>
   134d2:	f04f 30ff 	mov.w	r0, #4294967295
   134d6:	4770      	bx	lr
   134d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   134dc:	b2c9      	uxtb	r1, r1
   134de:	2924      	cmp	r1, #36	; 0x24
   134e0:	d80e      	bhi.n	13500 <__jp2uc+0x58>
   134e2:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   134e6:	4288      	cmp	r0, r1
   134e8:	d8f3      	bhi.n	134d2 <__jp2uc+0x2a>
   134ea:	3bd0      	subs	r3, #208	; 0xd0
   134ec:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   134f0:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   134f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   134f8:	4a30      	ldr	r2, [pc, #192]	; (135bc <__jp2uc+0x114>)
   134fa:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   134fe:	4770      	bx	lr
   13500:	3ba1      	subs	r3, #161	; 0xa1
   13502:	2b07      	cmp	r3, #7
   13504:	d8e5      	bhi.n	134d2 <__jp2uc+0x2a>
   13506:	e8df f003 	tbb	[pc, r3]
   1350a:	3e48      	.short	0x3e48
   1350c:	25292e34 	.word	0x25292e34
   13510:	1921      	.short	0x1921
   13512:	b2c2      	uxtb	r2, r0
   13514:	2a9e      	cmp	r2, #158	; 0x9e
   13516:	f3c0 2107 	ubfx	r1, r0, #8, #8
   1351a:	d90b      	bls.n	13534 <__jp2uc+0x8c>
   1351c:	3223      	adds	r2, #35	; 0x23
   1351e:	b2d2      	uxtb	r2, r2
   13520:	2380      	movs	r3, #128	; 0x80
   13522:	299f      	cmp	r1, #159	; 0x9f
   13524:	bf94      	ite	ls
   13526:	3970      	subls	r1, #112	; 0x70
   13528:	3150      	addhi	r1, #80	; 0x50
   1352a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1352e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   13532:	e7c5      	b.n	134c0 <__jp2uc+0x18>
   13534:	3a7e      	subs	r2, #126	; 0x7e
   13536:	b2d2      	uxtb	r2, r2
   13538:	237f      	movs	r3, #127	; 0x7f
   1353a:	e7f2      	b.n	13522 <__jp2uc+0x7a>
   1353c:	2ac0      	cmp	r2, #192	; 0xc0
   1353e:	d8c8      	bhi.n	134d2 <__jp2uc+0x2a>
   13540:	4b1f      	ldr	r3, [pc, #124]	; (135c0 <__jp2uc+0x118>)
   13542:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   13546:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1354a:	4770      	bx	lr
   1354c:	2af1      	cmp	r2, #241	; 0xf1
   1354e:	d8c0      	bhi.n	134d2 <__jp2uc+0x2a>
   13550:	4b1c      	ldr	r3, [pc, #112]	; (135c4 <__jp2uc+0x11c>)
   13552:	e019      	b.n	13588 <__jp2uc+0xe0>
   13554:	2ad8      	cmp	r2, #216	; 0xd8
   13556:	d8bc      	bhi.n	134d2 <__jp2uc+0x2a>
   13558:	4b1b      	ldr	r3, [pc, #108]	; (135c8 <__jp2uc+0x120>)
   1355a:	e015      	b.n	13588 <__jp2uc+0xe0>
   1355c:	2af6      	cmp	r2, #246	; 0xf6
   1355e:	d8b8      	bhi.n	134d2 <__jp2uc+0x2a>
   13560:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   13564:	4770      	bx	lr
   13566:	2af3      	cmp	r2, #243	; 0xf3
   13568:	d8b3      	bhi.n	134d2 <__jp2uc+0x2a>
   1356a:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   1356e:	3020      	adds	r0, #32
   13570:	4770      	bx	lr
   13572:	4b16      	ldr	r3, [pc, #88]	; (135cc <__jp2uc+0x124>)
   13574:	4413      	add	r3, r2
   13576:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   1357a:	2b00      	cmp	r3, #0
   1357c:	d0a9      	beq.n	134d2 <__jp2uc+0x2a>
   1357e:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   13582:	3060      	adds	r0, #96	; 0x60
   13584:	4770      	bx	lr
   13586:	4b12      	ldr	r3, [pc, #72]	; (135d0 <__jp2uc+0x128>)
   13588:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   1358c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   13590:	2800      	cmp	r0, #0
   13592:	bf08      	it	eq
   13594:	f04f 30ff 	moveq.w	r0, #4294967295
   13598:	4770      	bx	lr
   1359a:	4b0e      	ldr	r3, [pc, #56]	; (135d4 <__jp2uc+0x12c>)
   1359c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   135a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   135a4:	4770      	bx	lr
   135a6:	3bb0      	subs	r3, #176	; 0xb0
   135a8:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   135ac:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   135b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   135b4:	4a08      	ldr	r2, [pc, #32]	; (135d8 <__jp2uc+0x130>)
   135b6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   135ba:	4770      	bx	lr
   135bc:	20005ee8 	.word	0x20005ee8
   135c0:	20001210 	.word	0x20001210
   135c4:	2000116c 	.word	0x2000116c
   135c8:	200010fc 	.word	0x200010fc
   135cc:	200010a0 	.word	0x200010a0
   135d0:	20000fe4 	.word	0x20000fe4
   135d4:	20000f28 	.word	0x20000f28
   135d8:	20001250 	.word	0x20001250

000135dc <_jp2uc_l>:
   135dc:	b538      	push	{r3, r4, r5, lr}
   135de:	4605      	mov	r5, r0
   135e0:	b1b9      	cbz	r1, 13612 <_jp2uc_l+0x36>
   135e2:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   135e6:	4912      	ldr	r1, [pc, #72]	; (13630 <_jp2uc_l+0x54>)
   135e8:	4620      	mov	r0, r4
   135ea:	f7f9 fc5d 	bl	cea8 <strcmp>
   135ee:	b928      	cbnz	r0, 135fc <_jp2uc_l+0x20>
   135f0:	4628      	mov	r0, r5
   135f2:	2101      	movs	r1, #1
   135f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   135f8:	f7ff bf56 	b.w	134a8 <__jp2uc>
   135fc:	490d      	ldr	r1, [pc, #52]	; (13634 <_jp2uc_l+0x58>)
   135fe:	4620      	mov	r0, r4
   13600:	f7f9 fc52 	bl	cea8 <strcmp>
   13604:	b938      	cbnz	r0, 13616 <_jp2uc_l+0x3a>
   13606:	4628      	mov	r0, r5
   13608:	2102      	movs	r1, #2
   1360a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1360e:	f7ff bf4b 	b.w	134a8 <__jp2uc>
   13612:	4c09      	ldr	r4, [pc, #36]	; (13638 <_jp2uc_l+0x5c>)
   13614:	e7e7      	b.n	135e6 <_jp2uc_l+0xa>
   13616:	4909      	ldr	r1, [pc, #36]	; (1363c <_jp2uc_l+0x60>)
   13618:	4620      	mov	r0, r4
   1361a:	f7f9 fc45 	bl	cea8 <strcmp>
   1361e:	b928      	cbnz	r0, 1362c <_jp2uc_l+0x50>
   13620:	4628      	mov	r0, r5
   13622:	2103      	movs	r1, #3
   13624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13628:	f7ff bf3e 	b.w	134a8 <__jp2uc>
   1362c:	4628      	mov	r0, r5
   1362e:	bd38      	pop	{r3, r4, r5, pc}
   13630:	20000ec8 	.word	0x20000ec8
   13634:	20000ecc 	.word	0x20000ecc
   13638:	20008a16 	.word	0x20008a16
   1363c:	20000ed4 	.word	0x20000ed4

00013640 <fiprintf>:
   13640:	b40e      	push	{r1, r2, r3}
   13642:	b510      	push	{r4, lr}
   13644:	b083      	sub	sp, #12
   13646:	ab05      	add	r3, sp, #20
   13648:	4c06      	ldr	r4, [pc, #24]	; (13664 <fiprintf+0x24>)
   1364a:	f853 2b04 	ldr.w	r2, [r3], #4
   1364e:	9301      	str	r3, [sp, #4]
   13650:	4601      	mov	r1, r0
   13652:	6820      	ldr	r0, [r4, #0]
   13654:	f000 f97c 	bl	13950 <_vfiprintf_r>
   13658:	b003      	add	sp, #12
   1365a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1365e:	b003      	add	sp, #12
   13660:	4770      	bx	lr
   13662:	bf00      	nop
   13664:	20008e74 	.word	0x20008e74

00013668 <__ssprint_r>:
   13668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1366c:	6893      	ldr	r3, [r2, #8]
   1366e:	6817      	ldr	r7, [r2, #0]
   13670:	b083      	sub	sp, #12
   13672:	4692      	mov	sl, r2
   13674:	2b00      	cmp	r3, #0
   13676:	d070      	beq.n	1375a <__ssprint_r+0xf2>
   13678:	4681      	mov	r9, r0
   1367a:	688a      	ldr	r2, [r1, #8]
   1367c:	6808      	ldr	r0, [r1, #0]
   1367e:	460c      	mov	r4, r1
   13680:	3708      	adds	r7, #8
   13682:	e043      	b.n	1370c <__ssprint_r+0xa4>
   13684:	89a3      	ldrh	r3, [r4, #12]
   13686:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1368a:	d02e      	beq.n	136ea <__ssprint_r+0x82>
   1368c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   13690:	eba0 0801 	sub.w	r8, r0, r1
   13694:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   13698:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   1369c:	f108 0001 	add.w	r0, r8, #1
   136a0:	1076      	asrs	r6, r6, #1
   136a2:	4428      	add	r0, r5
   136a4:	42b0      	cmp	r0, r6
   136a6:	4632      	mov	r2, r6
   136a8:	bf84      	itt	hi
   136aa:	4606      	movhi	r6, r0
   136ac:	4632      	movhi	r2, r6
   136ae:	055b      	lsls	r3, r3, #21
   136b0:	d537      	bpl.n	13722 <__ssprint_r+0xba>
   136b2:	4611      	mov	r1, r2
   136b4:	4648      	mov	r0, r9
   136b6:	f7f7 fb59 	bl	ad6c <_malloc_r>
   136ba:	9001      	str	r0, [sp, #4]
   136bc:	2800      	cmp	r0, #0
   136be:	d03a      	beq.n	13736 <__ssprint_r+0xce>
   136c0:	4642      	mov	r2, r8
   136c2:	6921      	ldr	r1, [r4, #16]
   136c4:	f7f5 f806 	bl	86d4 <memcpy>
   136c8:	89a2      	ldrh	r2, [r4, #12]
   136ca:	9b01      	ldr	r3, [sp, #4]
   136cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   136d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   136d4:	81a2      	strh	r2, [r4, #12]
   136d6:	eba6 0208 	sub.w	r2, r6, r8
   136da:	eb03 0008 	add.w	r0, r3, r8
   136de:	6166      	str	r6, [r4, #20]
   136e0:	60a2      	str	r2, [r4, #8]
   136e2:	6123      	str	r3, [r4, #16]
   136e4:	6020      	str	r0, [r4, #0]
   136e6:	462e      	mov	r6, r5
   136e8:	46a8      	mov	r8, r5
   136ea:	4642      	mov	r2, r8
   136ec:	4659      	mov	r1, fp
   136ee:	f7f9 f9e9 	bl	cac4 <memmove>
   136f2:	f8da 3008 	ldr.w	r3, [sl, #8]
   136f6:	68a2      	ldr	r2, [r4, #8]
   136f8:	6820      	ldr	r0, [r4, #0]
   136fa:	1b92      	subs	r2, r2, r6
   136fc:	4440      	add	r0, r8
   136fe:	1b5b      	subs	r3, r3, r5
   13700:	60a2      	str	r2, [r4, #8]
   13702:	6020      	str	r0, [r4, #0]
   13704:	f8ca 3008 	str.w	r3, [sl, #8]
   13708:	b33b      	cbz	r3, 1375a <__ssprint_r+0xf2>
   1370a:	3708      	adds	r7, #8
   1370c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   13710:	2d00      	cmp	r5, #0
   13712:	d0fa      	beq.n	1370a <__ssprint_r+0xa2>
   13714:	42aa      	cmp	r2, r5
   13716:	4616      	mov	r6, r2
   13718:	4690      	mov	r8, r2
   1371a:	d9b3      	bls.n	13684 <__ssprint_r+0x1c>
   1371c:	462e      	mov	r6, r5
   1371e:	46a8      	mov	r8, r5
   13720:	e7e3      	b.n	136ea <__ssprint_r+0x82>
   13722:	4648      	mov	r0, r9
   13724:	f7f7 fdea 	bl	b2fc <_realloc_r>
   13728:	4603      	mov	r3, r0
   1372a:	2800      	cmp	r0, #0
   1372c:	d1d3      	bne.n	136d6 <__ssprint_r+0x6e>
   1372e:	6921      	ldr	r1, [r4, #16]
   13730:	4648      	mov	r0, r9
   13732:	f7f9 fe97 	bl	d464 <_free_r>
   13736:	89a3      	ldrh	r3, [r4, #12]
   13738:	220c      	movs	r2, #12
   1373a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1373e:	f8c9 2000 	str.w	r2, [r9]
   13742:	f04f 30ff 	mov.w	r0, #4294967295
   13746:	81a3      	strh	r3, [r4, #12]
   13748:	2200      	movs	r2, #0
   1374a:	2300      	movs	r3, #0
   1374c:	f8ca 2008 	str.w	r2, [sl, #8]
   13750:	f8ca 3004 	str.w	r3, [sl, #4]
   13754:	b003      	add	sp, #12
   13756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1375a:	2000      	movs	r0, #0
   1375c:	2300      	movs	r3, #0
   1375e:	f8ca 3004 	str.w	r3, [sl, #4]
   13762:	b003      	add	sp, #12
   13764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013768 <_sungetc_r>:
   13768:	b538      	push	{r3, r4, r5, lr}
   1376a:	1c4b      	adds	r3, r1, #1
   1376c:	d01a      	beq.n	137a4 <_sungetc_r+0x3c>
   1376e:	8993      	ldrh	r3, [r2, #12]
   13770:	4614      	mov	r4, r2
   13772:	6b12      	ldr	r2, [r2, #48]	; 0x30
   13774:	f023 0320 	bic.w	r3, r3, #32
   13778:	81a3      	strh	r3, [r4, #12]
   1377a:	b2cd      	uxtb	r5, r1
   1377c:	b1aa      	cbz	r2, 137aa <_sungetc_r+0x42>
   1377e:	6862      	ldr	r2, [r4, #4]
   13780:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13782:	429a      	cmp	r2, r3
   13784:	da09      	bge.n	1379a <_sungetc_r+0x32>
   13786:	6823      	ldr	r3, [r4, #0]
   13788:	1e5a      	subs	r2, r3, #1
   1378a:	6022      	str	r2, [r4, #0]
   1378c:	f803 5c01 	strb.w	r5, [r3, #-1]
   13790:	6863      	ldr	r3, [r4, #4]
   13792:	3301      	adds	r3, #1
   13794:	6063      	str	r3, [r4, #4]
   13796:	4628      	mov	r0, r5
   13798:	bd38      	pop	{r3, r4, r5, pc}
   1379a:	4621      	mov	r1, r4
   1379c:	f001 fa58 	bl	14c50 <__submore>
   137a0:	2800      	cmp	r0, #0
   137a2:	d0f0      	beq.n	13786 <_sungetc_r+0x1e>
   137a4:	f04f 35ff 	mov.w	r5, #4294967295
   137a8:	e7f5      	b.n	13796 <_sungetc_r+0x2e>
   137aa:	6923      	ldr	r3, [r4, #16]
   137ac:	6822      	ldr	r2, [r4, #0]
   137ae:	b12b      	cbz	r3, 137bc <_sungetc_r+0x54>
   137b0:	4293      	cmp	r3, r2
   137b2:	d203      	bcs.n	137bc <_sungetc_r+0x54>
   137b4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   137b8:	42ab      	cmp	r3, r5
   137ba:	d00f      	beq.n	137dc <_sungetc_r+0x74>
   137bc:	6861      	ldr	r1, [r4, #4]
   137be:	63e1      	str	r1, [r4, #60]	; 0x3c
   137c0:	4623      	mov	r3, r4
   137c2:	63a2      	str	r2, [r4, #56]	; 0x38
   137c4:	f104 0140 	add.w	r1, r4, #64	; 0x40
   137c8:	2203      	movs	r2, #3
   137ca:	6362      	str	r2, [r4, #52]	; 0x34
   137cc:	6321      	str	r1, [r4, #48]	; 0x30
   137ce:	f803 5f42 	strb.w	r5, [r3, #66]!
   137d2:	2201      	movs	r2, #1
   137d4:	e9c4 3200 	strd	r3, r2, [r4]
   137d8:	4628      	mov	r0, r5
   137da:	bd38      	pop	{r3, r4, r5, pc}
   137dc:	6863      	ldr	r3, [r4, #4]
   137de:	3a01      	subs	r2, #1
   137e0:	3301      	adds	r3, #1
   137e2:	e9c4 2300 	strd	r2, r3, [r4]
   137e6:	e7d6      	b.n	13796 <_sungetc_r+0x2e>

000137e8 <__ssrefill_r>:
   137e8:	b510      	push	{r4, lr}
   137ea:	460c      	mov	r4, r1
   137ec:	6b09      	ldr	r1, [r1, #48]	; 0x30
   137ee:	b169      	cbz	r1, 1380c <__ssrefill_r+0x24>
   137f0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   137f4:	4299      	cmp	r1, r3
   137f6:	d001      	beq.n	137fc <__ssrefill_r+0x14>
   137f8:	f7f9 fe34 	bl	d464 <_free_r>
   137fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   137fe:	6063      	str	r3, [r4, #4]
   13800:	2000      	movs	r0, #0
   13802:	6320      	str	r0, [r4, #48]	; 0x30
   13804:	b113      	cbz	r3, 1380c <__ssrefill_r+0x24>
   13806:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13808:	6023      	str	r3, [r4, #0]
   1380a:	bd10      	pop	{r4, pc}
   1380c:	89a3      	ldrh	r3, [r4, #12]
   1380e:	6921      	ldr	r1, [r4, #16]
   13810:	2200      	movs	r2, #0
   13812:	f043 0320 	orr.w	r3, r3, #32
   13816:	e9c4 1200 	strd	r1, r2, [r4]
   1381a:	81a3      	strh	r3, [r4, #12]
   1381c:	f04f 30ff 	mov.w	r0, #4294967295
   13820:	bd10      	pop	{r4, pc}
   13822:	bf00      	nop

00013824 <_sfread_r>:
   13824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13828:	b085      	sub	sp, #20
   1382a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1382e:	fb02 f303 	mul.w	r3, r2, r3
   13832:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   13834:	9301      	str	r3, [sp, #4]
   13836:	b3a3      	cbz	r3, 138a2 <_sfread_r+0x7e>
   13838:	f8d4 a004 	ldr.w	sl, [r4, #4]
   1383c:	9b01      	ldr	r3, [sp, #4]
   1383e:	4553      	cmp	r3, sl
   13840:	468b      	mov	fp, r1
   13842:	d946      	bls.n	138d2 <_sfread_r+0xae>
   13844:	46a0      	mov	r8, r4
   13846:	9d01      	ldr	r5, [sp, #4]
   13848:	f858 1b40 	ldr.w	r1, [r8], #64
   1384c:	4607      	mov	r7, r0
   1384e:	2600      	movs	r6, #0
   13850:	4652      	mov	r2, sl
   13852:	4658      	mov	r0, fp
   13854:	f7f4 ff3e 	bl	86d4 <memcpy>
   13858:	6823      	ldr	r3, [r4, #0]
   1385a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1385c:	4453      	add	r3, sl
   1385e:	46a9      	mov	r9, r5
   13860:	e9c4 3600 	strd	r3, r6, [r4]
   13864:	4611      	mov	r1, r2
   13866:	4638      	mov	r0, r7
   13868:	44d3      	add	fp, sl
   1386a:	eba5 050a 	sub.w	r5, r5, sl
   1386e:	b1e2      	cbz	r2, 138aa <_sfread_r+0x86>
   13870:	4542      	cmp	r2, r8
   13872:	d001      	beq.n	13878 <_sfread_r+0x54>
   13874:	f7f9 fdf6 	bl	d464 <_free_r>
   13878:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1387a:	6326      	str	r6, [r4, #48]	; 0x30
   1387c:	6063      	str	r3, [r4, #4]
   1387e:	b1a3      	cbz	r3, 138aa <_sfread_r+0x86>
   13880:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   13882:	6021      	str	r1, [r4, #0]
   13884:	42ab      	cmp	r3, r5
   13886:	469a      	mov	sl, r3
   13888:	d3e2      	bcc.n	13850 <_sfread_r+0x2c>
   1388a:	9b02      	ldr	r3, [sp, #8]
   1388c:	9301      	str	r3, [sp, #4]
   1388e:	462a      	mov	r2, r5
   13890:	4658      	mov	r0, fp
   13892:	f7f4 ff1f 	bl	86d4 <memcpy>
   13896:	e9d4 3200 	ldrd	r3, r2, [r4]
   1389a:	1b52      	subs	r2, r2, r5
   1389c:	442b      	add	r3, r5
   1389e:	e9c4 3200 	strd	r3, r2, [r4]
   138a2:	9801      	ldr	r0, [sp, #4]
   138a4:	b005      	add	sp, #20
   138a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138aa:	9a01      	ldr	r2, [sp, #4]
   138ac:	9b03      	ldr	r3, [sp, #12]
   138ae:	4452      	add	r2, sl
   138b0:	eba2 0209 	sub.w	r2, r2, r9
   138b4:	fbb2 f3f3 	udiv	r3, r2, r3
   138b8:	9301      	str	r3, [sp, #4]
   138ba:	89a3      	ldrh	r3, [r4, #12]
   138bc:	6922      	ldr	r2, [r4, #16]
   138be:	9801      	ldr	r0, [sp, #4]
   138c0:	f043 0320 	orr.w	r3, r3, #32
   138c4:	81a3      	strh	r3, [r4, #12]
   138c6:	2300      	movs	r3, #0
   138c8:	e9c4 2300 	strd	r2, r3, [r4]
   138cc:	b005      	add	sp, #20
   138ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138d2:	6821      	ldr	r1, [r4, #0]
   138d4:	461d      	mov	r5, r3
   138d6:	e7d8      	b.n	1388a <_sfread_r+0x66>

000138d8 <__sprint_r.part.0>:
   138d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138dc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   138de:	049c      	lsls	r4, r3, #18
   138e0:	4690      	mov	r8, r2
   138e2:	d52d      	bpl.n	13940 <__sprint_r.part.0+0x68>
   138e4:	6893      	ldr	r3, [r2, #8]
   138e6:	6812      	ldr	r2, [r2, #0]
   138e8:	b343      	cbz	r3, 1393c <__sprint_r.part.0+0x64>
   138ea:	468b      	mov	fp, r1
   138ec:	4606      	mov	r6, r0
   138ee:	f102 0908 	add.w	r9, r2, #8
   138f2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   138f6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   138fa:	d015      	beq.n	13928 <__sprint_r.part.0+0x50>
   138fc:	3d04      	subs	r5, #4
   138fe:	2400      	movs	r4, #0
   13900:	e001      	b.n	13906 <__sprint_r.part.0+0x2e>
   13902:	42a7      	cmp	r7, r4
   13904:	d00e      	beq.n	13924 <__sprint_r.part.0+0x4c>
   13906:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1390a:	465a      	mov	r2, fp
   1390c:	4630      	mov	r0, r6
   1390e:	f001 fa97 	bl	14e40 <_fputwc_r>
   13912:	1c43      	adds	r3, r0, #1
   13914:	f104 0401 	add.w	r4, r4, #1
   13918:	d1f3      	bne.n	13902 <__sprint_r.part.0+0x2a>
   1391a:	2300      	movs	r3, #0
   1391c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   13920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13924:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13928:	f02a 0a03 	bic.w	sl, sl, #3
   1392c:	eba3 030a 	sub.w	r3, r3, sl
   13930:	f8c8 3008 	str.w	r3, [r8, #8]
   13934:	f109 0908 	add.w	r9, r9, #8
   13938:	2b00      	cmp	r3, #0
   1393a:	d1da      	bne.n	138f2 <__sprint_r.part.0+0x1a>
   1393c:	2000      	movs	r0, #0
   1393e:	e7ec      	b.n	1391a <__sprint_r.part.0+0x42>
   13940:	f001 f80c 	bl	1495c <__sfvwrite_r>
   13944:	2300      	movs	r3, #0
   13946:	e9c8 3301 	strd	r3, r3, [r8, #4]
   1394a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1394e:	bf00      	nop

00013950 <_vfiprintf_r>:
   13950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13954:	ed2d 8b02 	vpush	{d8}
   13958:	b0c5      	sub	sp, #276	; 0x114
   1395a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   1395e:	4683      	mov	fp, r0
   13960:	ee08 1a10 	vmov	s16, r1
   13964:	4616      	mov	r6, r2
   13966:	2100      	movs	r1, #0
   13968:	2208      	movs	r2, #8
   1396a:	4650      	mov	r0, sl
   1396c:	461c      	mov	r4, r3
   1396e:	9307      	str	r3, [sp, #28]
   13970:	f7f9 f924 	bl	cbbc <memset>
   13974:	f1bb 0f00 	cmp.w	fp, #0
   13978:	d004      	beq.n	13984 <_vfiprintf_r+0x34>
   1397a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   1397e:	2b00      	cmp	r3, #0
   13980:	f000 86a0 	beq.w	146c4 <_vfiprintf_r+0xd74>
   13984:	ee18 2a10 	vmov	r2, s16
   13988:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1398a:	07db      	lsls	r3, r3, #31
   1398c:	f140 8513 	bpl.w	143b6 <_vfiprintf_r+0xa66>
   13990:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   13994:	b28a      	uxth	r2, r1
   13996:	0495      	lsls	r5, r2, #18
   13998:	d40b      	bmi.n	139b2 <_vfiprintf_r+0x62>
   1399a:	ee18 3a10 	vmov	r3, s16
   1399e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   139a2:	8199      	strh	r1, [r3, #12]
   139a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   139a6:	b28a      	uxth	r2, r1
   139a8:	ee18 1a10 	vmov	r1, s16
   139ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   139b0:	664b      	str	r3, [r1, #100]	; 0x64
   139b2:	0710      	lsls	r0, r2, #28
   139b4:	f140 8105 	bpl.w	13bc2 <_vfiprintf_r+0x272>
   139b8:	ee18 3a10 	vmov	r3, s16
   139bc:	691b      	ldr	r3, [r3, #16]
   139be:	2b00      	cmp	r3, #0
   139c0:	f000 80ff 	beq.w	13bc2 <_vfiprintf_r+0x272>
   139c4:	f002 031a 	and.w	r3, r2, #26
   139c8:	2b0a      	cmp	r3, #10
   139ca:	f000 810a 	beq.w	13be2 <_vfiprintf_r+0x292>
   139ce:	2300      	movs	r3, #0
   139d0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   139d4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   139d8:	aa1b      	add	r2, sp, #108	; 0x6c
   139da:	930c      	str	r3, [sp, #48]	; 0x30
   139dc:	9218      	str	r2, [sp, #96]	; 0x60
   139de:	4691      	mov	r9, r2
   139e0:	930b      	str	r3, [sp, #44]	; 0x2c
   139e2:	9305      	str	r3, [sp, #20]
   139e4:	46b0      	mov	r8, r6
   139e6:	4644      	mov	r4, r8
   139e8:	4ba8      	ldr	r3, [pc, #672]	; (13c8c <_vfiprintf_r+0x33c>)
   139ea:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   139ee:	f7f9 f9af 	bl	cd50 <__locale_mb_cur_max>
   139f2:	4622      	mov	r2, r4
   139f4:	4603      	mov	r3, r0
   139f6:	a912      	add	r1, sp, #72	; 0x48
   139f8:	f8cd a000 	str.w	sl, [sp]
   139fc:	4658      	mov	r0, fp
   139fe:	47a8      	blx	r5
   13a00:	2800      	cmp	r0, #0
   13a02:	f000 8145 	beq.w	13c90 <_vfiprintf_r+0x340>
   13a06:	f2c0 8139 	blt.w	13c7c <_vfiprintf_r+0x32c>
   13a0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13a0c:	2a25      	cmp	r2, #37	; 0x25
   13a0e:	4603      	mov	r3, r0
   13a10:	d001      	beq.n	13a16 <_vfiprintf_r+0xc6>
   13a12:	441c      	add	r4, r3
   13a14:	e7e8      	b.n	139e8 <_vfiprintf_r+0x98>
   13a16:	ebb4 0608 	subs.w	r6, r4, r8
   13a1a:	4605      	mov	r5, r0
   13a1c:	f040 813c 	bne.w	13c98 <_vfiprintf_r+0x348>
   13a20:	2300      	movs	r3, #0
   13a22:	7861      	ldrb	r1, [r4, #1]
   13a24:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13a28:	f104 0801 	add.w	r8, r4, #1
   13a2c:	9306      	str	r3, [sp, #24]
   13a2e:	f04f 37ff 	mov.w	r7, #4294967295
   13a32:	461e      	mov	r6, r3
   13a34:	242b      	movs	r4, #43	; 0x2b
   13a36:	f108 0801 	add.w	r8, r8, #1
   13a3a:	f1a1 0320 	sub.w	r3, r1, #32
   13a3e:	2b5a      	cmp	r3, #90	; 0x5a
   13a40:	f200 8178 	bhi.w	13d34 <_vfiprintf_r+0x3e4>
   13a44:	e8df f013 	tbh	[pc, r3, lsl #1]
   13a48:	017602b5 	.word	0x017602b5
   13a4c:	02b00176 	.word	0x02b00176
   13a50:	01760176 	.word	0x01760176
   13a54:	006a0176 	.word	0x006a0176
   13a58:	01760176 	.word	0x01760176
   13a5c:	028d027d 	.word	0x028d027d
   13a60:	02880176 	.word	0x02880176
   13a64:	01760297 	.word	0x01760297
   13a68:	005b0292 	.word	0x005b0292
   13a6c:	005b005b 	.word	0x005b005b
   13a70:	005b005b 	.word	0x005b005b
   13a74:	005b005b 	.word	0x005b005b
   13a78:	005b005b 	.word	0x005b005b
   13a7c:	01760176 	.word	0x01760176
   13a80:	01760176 	.word	0x01760176
   13a84:	01760176 	.word	0x01760176
   13a88:	01760176 	.word	0x01760176
   13a8c:	025c0176 	.word	0x025c0176
   13a90:	01760084 	.word	0x01760084
   13a94:	01760176 	.word	0x01760176
   13a98:	01760176 	.word	0x01760176
   13a9c:	01760176 	.word	0x01760176
   13aa0:	01760176 	.word	0x01760176
   13aa4:	00e80176 	.word	0x00e80176
   13aa8:	01760176 	.word	0x01760176
   13aac:	02330176 	.word	0x02330176
   13ab0:	02da0176 	.word	0x02da0176
   13ab4:	01760176 	.word	0x01760176
   13ab8:	0176058b 	.word	0x0176058b
   13abc:	01760176 	.word	0x01760176
   13ac0:	01760176 	.word	0x01760176
   13ac4:	01760176 	.word	0x01760176
   13ac8:	01760176 	.word	0x01760176
   13acc:	025c0176 	.word	0x025c0176
   13ad0:	01760086 	.word	0x01760086
   13ad4:	01760176 	.word	0x01760176
   13ad8:	008602cd 	.word	0x008602cd
   13adc:	0176007f 	.word	0x0176007f
   13ae0:	017602c0 	.word	0x017602c0
   13ae4:	00ea02fd 	.word	0x00ea02fd
   13ae8:	007f02ed 	.word	0x007f02ed
   13aec:	02330176 	.word	0x02330176
   13af0:	0569007c 	.word	0x0569007c
   13af4:	01760176 	.word	0x01760176
   13af8:	0176056b 	.word	0x0176056b
   13afc:	007c      	.short	0x007c
   13afe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13b02:	2200      	movs	r2, #0
   13b04:	f818 1b01 	ldrb.w	r1, [r8], #1
   13b08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   13b0c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   13b10:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13b14:	2b09      	cmp	r3, #9
   13b16:	d9f5      	bls.n	13b04 <_vfiprintf_r+0x1b4>
   13b18:	9206      	str	r2, [sp, #24]
   13b1a:	e78e      	b.n	13a3a <_vfiprintf_r+0xea>
   13b1c:	4658      	mov	r0, fp
   13b1e:	f7fe fa7d 	bl	1201c <_localeconv_r>
   13b22:	6843      	ldr	r3, [r0, #4]
   13b24:	930d      	str	r3, [sp, #52]	; 0x34
   13b26:	4618      	mov	r0, r3
   13b28:	f7f9 fb8a 	bl	d240 <strlen>
   13b2c:	900e      	str	r0, [sp, #56]	; 0x38
   13b2e:	4605      	mov	r5, r0
   13b30:	4658      	mov	r0, fp
   13b32:	f7fe fa73 	bl	1201c <_localeconv_r>
   13b36:	6883      	ldr	r3, [r0, #8]
   13b38:	930b      	str	r3, [sp, #44]	; 0x2c
   13b3a:	2d00      	cmp	r5, #0
   13b3c:	f040 84d6 	bne.w	144ec <_vfiprintf_r+0xb9c>
   13b40:	f898 1000 	ldrb.w	r1, [r8]
   13b44:	e777      	b.n	13a36 <_vfiprintf_r+0xe6>
   13b46:	f898 1000 	ldrb.w	r1, [r8]
   13b4a:	f046 0620 	orr.w	r6, r6, #32
   13b4e:	e772      	b.n	13a36 <_vfiprintf_r+0xe6>
   13b50:	f046 0610 	orr.w	r6, r6, #16
   13b54:	06b4      	lsls	r4, r6, #26
   13b56:	f140 818e 	bpl.w	13e76 <_vfiprintf_r+0x526>
   13b5a:	9b07      	ldr	r3, [sp, #28]
   13b5c:	3307      	adds	r3, #7
   13b5e:	f023 0307 	bic.w	r3, r3, #7
   13b62:	461a      	mov	r2, r3
   13b64:	6859      	ldr	r1, [r3, #4]
   13b66:	f852 3b08 	ldr.w	r3, [r2], #8
   13b6a:	9207      	str	r2, [sp, #28]
   13b6c:	460a      	mov	r2, r1
   13b6e:	2900      	cmp	r1, #0
   13b70:	f2c0 8470 	blt.w	14454 <_vfiprintf_r+0xb04>
   13b74:	1c79      	adds	r1, r7, #1
   13b76:	f000 85a2 	beq.w	146be <_vfiprintf_r+0xd6e>
   13b7a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   13b7e:	9103      	str	r1, [sp, #12]
   13b80:	ea53 0102 	orrs.w	r1, r3, r2
   13b84:	f000 843f 	beq.w	14406 <_vfiprintf_r+0xab6>
   13b88:	2b0a      	cmp	r3, #10
   13b8a:	f172 0100 	sbcs.w	r1, r2, #0
   13b8e:	f080 8541 	bcs.w	14614 <_vfiprintf_r+0xcc4>
   13b92:	3330      	adds	r3, #48	; 0x30
   13b94:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   13b98:	9e03      	ldr	r6, [sp, #12]
   13b9a:	2301      	movs	r3, #1
   13b9c:	9304      	str	r3, [sp, #16]
   13b9e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   13ba2:	9b04      	ldr	r3, [sp, #16]
   13ba4:	42bb      	cmp	r3, r7
   13ba6:	bfb8      	it	lt
   13ba8:	463b      	movlt	r3, r7
   13baa:	9303      	str	r3, [sp, #12]
   13bac:	2300      	movs	r3, #0
   13bae:	9308      	str	r3, [sp, #32]
   13bb0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   13bb4:	2b00      	cmp	r3, #0
   13bb6:	f000 80cb 	beq.w	13d50 <_vfiprintf_r+0x400>
   13bba:	9b03      	ldr	r3, [sp, #12]
   13bbc:	3301      	adds	r3, #1
   13bbe:	9303      	str	r3, [sp, #12]
   13bc0:	e0c6      	b.n	13d50 <_vfiprintf_r+0x400>
   13bc2:	ee18 1a10 	vmov	r1, s16
   13bc6:	4658      	mov	r0, fp
   13bc8:	ee18 5a10 	vmov	r5, s16
   13bcc:	f001 f87c 	bl	14cc8 <__swsetup_r>
   13bd0:	2800      	cmp	r0, #0
   13bd2:	f040 8652 	bne.w	1487a <_vfiprintf_r+0xf2a>
   13bd6:	89aa      	ldrh	r2, [r5, #12]
   13bd8:	f002 031a 	and.w	r3, r2, #26
   13bdc:	2b0a      	cmp	r3, #10
   13bde:	f47f aef6 	bne.w	139ce <_vfiprintf_r+0x7e>
   13be2:	ee18 1a10 	vmov	r1, s16
   13be6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   13bea:	2b00      	cmp	r3, #0
   13bec:	f6ff aeef 	blt.w	139ce <_vfiprintf_r+0x7e>
   13bf0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   13bf2:	07db      	lsls	r3, r3, #31
   13bf4:	d402      	bmi.n	13bfc <_vfiprintf_r+0x2ac>
   13bf6:	0597      	lsls	r7, r2, #22
   13bf8:	f140 8612 	bpl.w	14820 <_vfiprintf_r+0xed0>
   13bfc:	ee18 1a10 	vmov	r1, s16
   13c00:	4623      	mov	r3, r4
   13c02:	4632      	mov	r2, r6
   13c04:	4658      	mov	r0, fp
   13c06:	f000 fe69 	bl	148dc <__sbprintf>
   13c0a:	9005      	str	r0, [sp, #20]
   13c0c:	9805      	ldr	r0, [sp, #20]
   13c0e:	b045      	add	sp, #276	; 0x114
   13c10:	ecbd 8b02 	vpop	{d8}
   13c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c18:	f046 0610 	orr.w	r6, r6, #16
   13c1c:	f016 0220 	ands.w	r2, r6, #32
   13c20:	f000 8136 	beq.w	13e90 <_vfiprintf_r+0x540>
   13c24:	9b07      	ldr	r3, [sp, #28]
   13c26:	3307      	adds	r3, #7
   13c28:	f023 0307 	bic.w	r3, r3, #7
   13c2c:	4619      	mov	r1, r3
   13c2e:	685a      	ldr	r2, [r3, #4]
   13c30:	f851 3b08 	ldr.w	r3, [r1], #8
   13c34:	9107      	str	r1, [sp, #28]
   13c36:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   13c3a:	9103      	str	r1, [sp, #12]
   13c3c:	2100      	movs	r1, #0
   13c3e:	2000      	movs	r0, #0
   13c40:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   13c44:	1c78      	adds	r0, r7, #1
   13c46:	f000 8210 	beq.w	1406a <_vfiprintf_r+0x71a>
   13c4a:	9803      	ldr	r0, [sp, #12]
   13c4c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   13c50:	ea53 0002 	orrs.w	r0, r3, r2
   13c54:	f040 8208 	bne.w	14068 <_vfiprintf_r+0x718>
   13c58:	2f00      	cmp	r7, #0
   13c5a:	f040 8538 	bne.w	146ce <_vfiprintf_r+0xd7e>
   13c5e:	2900      	cmp	r1, #0
   13c60:	f040 83d5 	bne.w	1440e <_vfiprintf_r+0xabe>
   13c64:	9b03      	ldr	r3, [sp, #12]
   13c66:	f013 0301 	ands.w	r3, r3, #1
   13c6a:	9304      	str	r3, [sp, #16]
   13c6c:	f000 8411 	beq.w	14492 <_vfiprintf_r+0xb42>
   13c70:	2330      	movs	r3, #48	; 0x30
   13c72:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   13c76:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   13c7a:	e792      	b.n	13ba2 <_vfiprintf_r+0x252>
   13c7c:	2208      	movs	r2, #8
   13c7e:	2100      	movs	r1, #0
   13c80:	4650      	mov	r0, sl
   13c82:	f7f8 ff9b 	bl	cbbc <memset>
   13c86:	2301      	movs	r3, #1
   13c88:	441c      	add	r4, r3
   13c8a:	e6ad      	b.n	139e8 <_vfiprintf_r+0x98>
   13c8c:	200088ec 	.word	0x200088ec
   13c90:	ebb4 0608 	subs.w	r6, r4, r8
   13c94:	4605      	mov	r5, r0
   13c96:	d01b      	beq.n	13cd0 <_vfiprintf_r+0x380>
   13c98:	9b19      	ldr	r3, [sp, #100]	; 0x64
   13c9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13c9c:	3301      	adds	r3, #1
   13c9e:	4432      	add	r2, r6
   13ca0:	2b07      	cmp	r3, #7
   13ca2:	e9c9 8600 	strd	r8, r6, [r9]
   13ca6:	921a      	str	r2, [sp, #104]	; 0x68
   13ca8:	9319      	str	r3, [sp, #100]	; 0x64
   13caa:	dd1c      	ble.n	13ce6 <_vfiprintf_r+0x396>
   13cac:	2a00      	cmp	r2, #0
   13cae:	f000 83a6 	beq.w	143fe <_vfiprintf_r+0xaae>
   13cb2:	ee18 1a10 	vmov	r1, s16
   13cb6:	aa18      	add	r2, sp, #96	; 0x60
   13cb8:	4658      	mov	r0, fp
   13cba:	f7ff fe0d 	bl	138d8 <__sprint_r.part.0>
   13cbe:	bb20      	cbnz	r0, 13d0a <_vfiprintf_r+0x3ba>
   13cc0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13cc4:	9b05      	ldr	r3, [sp, #20]
   13cc6:	4433      	add	r3, r6
   13cc8:	9305      	str	r3, [sp, #20]
   13cca:	2d00      	cmp	r5, #0
   13ccc:	f47f aea8 	bne.w	13a20 <_vfiprintf_r+0xd0>
   13cd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13cd2:	2b00      	cmp	r3, #0
   13cd4:	f040 85c1 	bne.w	1485a <_vfiprintf_r+0xf0a>
   13cd8:	ee18 3a10 	vmov	r3, s16
   13cdc:	2200      	movs	r2, #0
   13cde:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13ce2:	9219      	str	r2, [sp, #100]	; 0x64
   13ce4:	e015      	b.n	13d12 <_vfiprintf_r+0x3c2>
   13ce6:	f109 0908 	add.w	r9, r9, #8
   13cea:	e7eb      	b.n	13cc4 <_vfiprintf_r+0x374>
   13cec:	ee18 1a10 	vmov	r1, s16
   13cf0:	aa18      	add	r2, sp, #96	; 0x60
   13cf2:	4658      	mov	r0, fp
   13cf4:	f7ff fdf0 	bl	138d8 <__sprint_r.part.0>
   13cf8:	2800      	cmp	r0, #0
   13cfa:	f000 80a6 	beq.w	13e4a <_vfiprintf_r+0x4fa>
   13cfe:	9b08      	ldr	r3, [sp, #32]
   13d00:	b11b      	cbz	r3, 13d0a <_vfiprintf_r+0x3ba>
   13d02:	9908      	ldr	r1, [sp, #32]
   13d04:	4658      	mov	r0, fp
   13d06:	f7f9 fbad 	bl	d464 <_free_r>
   13d0a:	ee18 3a10 	vmov	r3, s16
   13d0e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13d12:	ee18 2a10 	vmov	r2, s16
   13d16:	6e52      	ldr	r2, [r2, #100]	; 0x64
   13d18:	f012 0f01 	tst.w	r2, #1
   13d1c:	b29a      	uxth	r2, r3
   13d1e:	f000 80a0 	beq.w	13e62 <_vfiprintf_r+0x512>
   13d22:	0650      	lsls	r0, r2, #25
   13d24:	f100 85b2 	bmi.w	1488c <_vfiprintf_r+0xf3c>
   13d28:	9805      	ldr	r0, [sp, #20]
   13d2a:	b045      	add	sp, #276	; 0x114
   13d2c:	ecbd 8b02 	vpop	{d8}
   13d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d34:	2900      	cmp	r1, #0
   13d36:	d0cb      	beq.n	13cd0 <_vfiprintf_r+0x380>
   13d38:	2300      	movs	r3, #0
   13d3a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13d3e:	2301      	movs	r3, #1
   13d40:	e9cd 3303 	strd	r3, r3, [sp, #12]
   13d44:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   13d48:	ac2b      	add	r4, sp, #172	; 0xac
   13d4a:	2300      	movs	r3, #0
   13d4c:	9308      	str	r3, [sp, #32]
   13d4e:	461f      	mov	r7, r3
   13d50:	f016 0302 	ands.w	r3, r6, #2
   13d54:	9309      	str	r3, [sp, #36]	; 0x24
   13d56:	d002      	beq.n	13d5e <_vfiprintf_r+0x40e>
   13d58:	9b03      	ldr	r3, [sp, #12]
   13d5a:	3302      	adds	r3, #2
   13d5c:	9303      	str	r3, [sp, #12]
   13d5e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   13d62:	930a      	str	r3, [sp, #40]	; 0x28
   13d64:	d105      	bne.n	13d72 <_vfiprintf_r+0x422>
   13d66:	9b06      	ldr	r3, [sp, #24]
   13d68:	9a03      	ldr	r2, [sp, #12]
   13d6a:	1a9d      	subs	r5, r3, r2
   13d6c:	2d00      	cmp	r5, #0
   13d6e:	f300 827b 	bgt.w	14268 <_vfiprintf_r+0x918>
   13d72:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13d76:	1c41      	adds	r1, r0, #1
   13d78:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   13d7c:	b182      	cbz	r2, 13da0 <_vfiprintf_r+0x450>
   13d7e:	2201      	movs	r2, #1
   13d80:	3301      	adds	r3, #1
   13d82:	f8c9 2004 	str.w	r2, [r9, #4]
   13d86:	2907      	cmp	r1, #7
   13d88:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   13d8c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13d90:	f8c9 2000 	str.w	r2, [r9]
   13d94:	f300 824a 	bgt.w	1422c <_vfiprintf_r+0x8dc>
   13d98:	4608      	mov	r0, r1
   13d9a:	f109 0908 	add.w	r9, r9, #8
   13d9e:	3101      	adds	r1, #1
   13da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13da2:	b1e2      	cbz	r2, 13dde <_vfiprintf_r+0x48e>
   13da4:	aa11      	add	r2, sp, #68	; 0x44
   13da6:	3302      	adds	r3, #2
   13da8:	f8c9 2000 	str.w	r2, [r9]
   13dac:	2907      	cmp	r1, #7
   13dae:	f04f 0202 	mov.w	r2, #2
   13db2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13db6:	f8c9 2004 	str.w	r2, [r9, #4]
   13dba:	f340 8250 	ble.w	1425e <_vfiprintf_r+0x90e>
   13dbe:	2b00      	cmp	r3, #0
   13dc0:	f000 8343 	beq.w	1444a <_vfiprintf_r+0xafa>
   13dc4:	ee18 1a10 	vmov	r1, s16
   13dc8:	aa18      	add	r2, sp, #96	; 0x60
   13dca:	4658      	mov	r0, fp
   13dcc:	f7ff fd84 	bl	138d8 <__sprint_r.part.0>
   13dd0:	2800      	cmp	r0, #0
   13dd2:	d194      	bne.n	13cfe <_vfiprintf_r+0x3ae>
   13dd4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13dd8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13ddc:	1c41      	adds	r1, r0, #1
   13dde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13de0:	2a80      	cmp	r2, #128	; 0x80
   13de2:	f000 8184 	beq.w	140ee <_vfiprintf_r+0x79e>
   13de6:	9a04      	ldr	r2, [sp, #16]
   13de8:	1abd      	subs	r5, r7, r2
   13dea:	2d00      	cmp	r5, #0
   13dec:	f300 81d7 	bgt.w	1419e <_vfiprintf_r+0x84e>
   13df0:	9a04      	ldr	r2, [sp, #16]
   13df2:	f8c9 4000 	str.w	r4, [r9]
   13df6:	4413      	add	r3, r2
   13df8:	2907      	cmp	r1, #7
   13dfa:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13dfe:	f8c9 2004 	str.w	r2, [r9, #4]
   13e02:	f340 816e 	ble.w	140e2 <_vfiprintf_r+0x792>
   13e06:	2b00      	cmp	r3, #0
   13e08:	f000 8275 	beq.w	142f6 <_vfiprintf_r+0x9a6>
   13e0c:	ee18 1a10 	vmov	r1, s16
   13e10:	aa18      	add	r2, sp, #96	; 0x60
   13e12:	4658      	mov	r0, fp
   13e14:	f7ff fd60 	bl	138d8 <__sprint_r.part.0>
   13e18:	2800      	cmp	r0, #0
   13e1a:	f47f af70 	bne.w	13cfe <_vfiprintf_r+0x3ae>
   13e1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13e20:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13e24:	0775      	lsls	r5, r6, #29
   13e26:	d505      	bpl.n	13e34 <_vfiprintf_r+0x4e4>
   13e28:	9a06      	ldr	r2, [sp, #24]
   13e2a:	9903      	ldr	r1, [sp, #12]
   13e2c:	1a54      	subs	r4, r2, r1
   13e2e:	2c00      	cmp	r4, #0
   13e30:	f300 826b 	bgt.w	1430a <_vfiprintf_r+0x9ba>
   13e34:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   13e38:	9803      	ldr	r0, [sp, #12]
   13e3a:	4281      	cmp	r1, r0
   13e3c:	bfac      	ite	ge
   13e3e:	1852      	addge	r2, r2, r1
   13e40:	1812      	addlt	r2, r2, r0
   13e42:	9205      	str	r2, [sp, #20]
   13e44:	2b00      	cmp	r3, #0
   13e46:	f47f af51 	bne.w	13cec <_vfiprintf_r+0x39c>
   13e4a:	9908      	ldr	r1, [sp, #32]
   13e4c:	2300      	movs	r3, #0
   13e4e:	9319      	str	r3, [sp, #100]	; 0x64
   13e50:	2900      	cmp	r1, #0
   13e52:	f000 8149 	beq.w	140e8 <_vfiprintf_r+0x798>
   13e56:	4658      	mov	r0, fp
   13e58:	f7f9 fb04 	bl	d464 <_free_r>
   13e5c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13e60:	e5c1      	b.n	139e6 <_vfiprintf_r+0x96>
   13e62:	059c      	lsls	r4, r3, #22
   13e64:	f53f af5d 	bmi.w	13d22 <_vfiprintf_r+0x3d2>
   13e68:	ee18 4a10 	vmov	r4, s16
   13e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13e6e:	f7f9 f80b 	bl	ce88 <__retarget_lock_release_recursive>
   13e72:	89a2      	ldrh	r2, [r4, #12]
   13e74:	e755      	b.n	13d22 <_vfiprintf_r+0x3d2>
   13e76:	06f0      	lsls	r0, r6, #27
   13e78:	9a07      	ldr	r2, [sp, #28]
   13e7a:	f100 831f 	bmi.w	144bc <_vfiprintf_r+0xb6c>
   13e7e:	0671      	lsls	r1, r6, #25
   13e80:	f140 8319 	bpl.w	144b6 <_vfiprintf_r+0xb66>
   13e84:	f932 3b04 	ldrsh.w	r3, [r2], #4
   13e88:	9207      	str	r2, [sp, #28]
   13e8a:	17da      	asrs	r2, r3, #31
   13e8c:	4611      	mov	r1, r2
   13e8e:	e66e      	b.n	13b6e <_vfiprintf_r+0x21e>
   13e90:	f016 0310 	ands.w	r3, r6, #16
   13e94:	9907      	ldr	r1, [sp, #28]
   13e96:	f040 8309 	bne.w	144ac <_vfiprintf_r+0xb5c>
   13e9a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   13e9e:	f000 8301 	beq.w	144a4 <_vfiprintf_r+0xb54>
   13ea2:	461a      	mov	r2, r3
   13ea4:	f851 3b04 	ldr.w	r3, [r1], #4
   13ea8:	9107      	str	r1, [sp, #28]
   13eaa:	b29b      	uxth	r3, r3
   13eac:	e6c3      	b.n	13c36 <_vfiprintf_r+0x2e6>
   13eae:	9b07      	ldr	r3, [sp, #28]
   13eb0:	461a      	mov	r2, r3
   13eb2:	2300      	movs	r3, #0
   13eb4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13eb8:	4613      	mov	r3, r2
   13eba:	f853 4b04 	ldr.w	r4, [r3], #4
   13ebe:	9303      	str	r3, [sp, #12]
   13ec0:	2c00      	cmp	r4, #0
   13ec2:	f000 8412 	beq.w	146ea <_vfiprintf_r+0xd9a>
   13ec6:	2953      	cmp	r1, #83	; 0x53
   13ec8:	f000 8365 	beq.w	14596 <_vfiprintf_r+0xc46>
   13ecc:	f016 0510 	ands.w	r5, r6, #16
   13ed0:	f040 8361 	bne.w	14596 <_vfiprintf_r+0xc46>
   13ed4:	1c7b      	adds	r3, r7, #1
   13ed6:	f000 84b3 	beq.w	14840 <_vfiprintf_r+0xef0>
   13eda:	463a      	mov	r2, r7
   13edc:	4629      	mov	r1, r5
   13ede:	4620      	mov	r0, r4
   13ee0:	f7f9 f94e 	bl	d180 <memchr>
   13ee4:	9008      	str	r0, [sp, #32]
   13ee6:	2800      	cmp	r0, #0
   13ee8:	f000 849f 	beq.w	1482a <_vfiprintf_r+0xeda>
   13eec:	1b03      	subs	r3, r0, r4
   13eee:	9a03      	ldr	r2, [sp, #12]
   13ef0:	9304      	str	r3, [sp, #16]
   13ef2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13ef6:	462f      	mov	r7, r5
   13ef8:	9207      	str	r2, [sp, #28]
   13efa:	9303      	str	r3, [sp, #12]
   13efc:	9508      	str	r5, [sp, #32]
   13efe:	e657      	b.n	13bb0 <_vfiprintf_r+0x260>
   13f00:	2943      	cmp	r1, #67	; 0x43
   13f02:	d002      	beq.n	13f0a <_vfiprintf_r+0x5ba>
   13f04:	06f5      	lsls	r5, r6, #27
   13f06:	f140 832d 	bpl.w	14564 <_vfiprintf_r+0xc14>
   13f0a:	9d07      	ldr	r5, [sp, #28]
   13f0c:	2208      	movs	r2, #8
   13f0e:	2100      	movs	r1, #0
   13f10:	a816      	add	r0, sp, #88	; 0x58
   13f12:	ac2b      	add	r4, sp, #172	; 0xac
   13f14:	f7f8 fe52 	bl	cbbc <memset>
   13f18:	ab16      	add	r3, sp, #88	; 0x58
   13f1a:	f855 2b04 	ldr.w	r2, [r5], #4
   13f1e:	4621      	mov	r1, r4
   13f20:	4658      	mov	r0, fp
   13f22:	f7ff fa77 	bl	13414 <_wcrtomb_r>
   13f26:	4603      	mov	r3, r0
   13f28:	3301      	adds	r3, #1
   13f2a:	9004      	str	r0, [sp, #16]
   13f2c:	f000 84b3 	beq.w	14896 <_vfiprintf_r+0xf46>
   13f30:	9b04      	ldr	r3, [sp, #16]
   13f32:	9507      	str	r5, [sp, #28]
   13f34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13f38:	9303      	str	r3, [sp, #12]
   13f3a:	2300      	movs	r3, #0
   13f3c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13f40:	e703      	b.n	13d4a <_vfiprintf_r+0x3fa>
   13f42:	9b07      	ldr	r3, [sp, #28]
   13f44:	f853 2b04 	ldr.w	r2, [r3], #4
   13f48:	9206      	str	r2, [sp, #24]
   13f4a:	2a00      	cmp	r2, #0
   13f4c:	f280 829c 	bge.w	14488 <_vfiprintf_r+0xb38>
   13f50:	9a06      	ldr	r2, [sp, #24]
   13f52:	4252      	negs	r2, r2
   13f54:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13f58:	f898 1000 	ldrb.w	r1, [r8]
   13f5c:	f046 0604 	orr.w	r6, r6, #4
   13f60:	e569      	b.n	13a36 <_vfiprintf_r+0xe6>
   13f62:	f898 1000 	ldrb.w	r1, [r8]
   13f66:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   13f6a:	e564      	b.n	13a36 <_vfiprintf_r+0xe6>
   13f6c:	f898 1000 	ldrb.w	r1, [r8]
   13f70:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   13f74:	e55f      	b.n	13a36 <_vfiprintf_r+0xe6>
   13f76:	4642      	mov	r2, r8
   13f78:	f812 1b01 	ldrb.w	r1, [r2], #1
   13f7c:	292a      	cmp	r1, #42	; 0x2a
   13f7e:	f000 8496 	beq.w	148ae <_vfiprintf_r+0xf5e>
   13f82:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13f86:	2b09      	cmp	r3, #9
   13f88:	4690      	mov	r8, r2
   13f8a:	f04f 0700 	mov.w	r7, #0
   13f8e:	f63f ad54 	bhi.w	13a3a <_vfiprintf_r+0xea>
   13f92:	f818 1b01 	ldrb.w	r1, [r8], #1
   13f96:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   13f9a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   13f9e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13fa2:	2b09      	cmp	r3, #9
   13fa4:	d9f5      	bls.n	13f92 <_vfiprintf_r+0x642>
   13fa6:	e548      	b.n	13a3a <_vfiprintf_r+0xea>
   13fa8:	f898 1000 	ldrb.w	r1, [r8]
   13fac:	f046 0601 	orr.w	r6, r6, #1
   13fb0:	e541      	b.n	13a36 <_vfiprintf_r+0xe6>
   13fb2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   13fb6:	2b00      	cmp	r3, #0
   13fb8:	f47f adc2 	bne.w	13b40 <_vfiprintf_r+0x1f0>
   13fbc:	2320      	movs	r3, #32
   13fbe:	f898 1000 	ldrb.w	r1, [r8]
   13fc2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13fc6:	e536      	b.n	13a36 <_vfiprintf_r+0xe6>
   13fc8:	f898 1000 	ldrb.w	r1, [r8]
   13fcc:	296c      	cmp	r1, #108	; 0x6c
   13fce:	bf03      	ittte	eq
   13fd0:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   13fd4:	f046 0620 	orreq.w	r6, r6, #32
   13fd8:	f108 0801 	addeq.w	r8, r8, #1
   13fdc:	f046 0610 	orrne.w	r6, r6, #16
   13fe0:	e529      	b.n	13a36 <_vfiprintf_r+0xe6>
   13fe2:	f898 1000 	ldrb.w	r1, [r8]
   13fe6:	2968      	cmp	r1, #104	; 0x68
   13fe8:	bf03      	ittte	eq
   13fea:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   13fee:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   13ff2:	f108 0801 	addeq.w	r8, r8, #1
   13ff6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   13ffa:	e51c      	b.n	13a36 <_vfiprintf_r+0xe6>
   13ffc:	f046 0310 	orr.w	r3, r6, #16
   14000:	9303      	str	r3, [sp, #12]
   14002:	9b03      	ldr	r3, [sp, #12]
   14004:	f013 0220 	ands.w	r2, r3, #32
   14008:	f000 8206 	beq.w	14418 <_vfiprintf_r+0xac8>
   1400c:	9b07      	ldr	r3, [sp, #28]
   1400e:	3307      	adds	r3, #7
   14010:	f023 0307 	bic.w	r3, r3, #7
   14014:	4619      	mov	r1, r3
   14016:	685a      	ldr	r2, [r3, #4]
   14018:	f851 3b08 	ldr.w	r3, [r1], #8
   1401c:	9107      	str	r1, [sp, #28]
   1401e:	2101      	movs	r1, #1
   14020:	e60d      	b.n	13c3e <_vfiprintf_r+0x2ee>
   14022:	9a07      	ldr	r2, [sp, #28]
   14024:	f046 0302 	orr.w	r3, r6, #2
   14028:	9303      	str	r3, [sp, #12]
   1402a:	f852 3b04 	ldr.w	r3, [r2], #4
   1402e:	9207      	str	r2, [sp, #28]
   14030:	f647 0230 	movw	r2, #30768	; 0x7830
   14034:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   14038:	4ab8      	ldr	r2, [pc, #736]	; (1431c <_vfiprintf_r+0x9cc>)
   1403a:	920c      	str	r2, [sp, #48]	; 0x30
   1403c:	2102      	movs	r1, #2
   1403e:	2200      	movs	r2, #0
   14040:	e5fd      	b.n	13c3e <_vfiprintf_r+0x2ee>
   14042:	06b7      	lsls	r7, r6, #26
   14044:	f100 8248 	bmi.w	144d8 <_vfiprintf_r+0xb88>
   14048:	06f5      	lsls	r5, r6, #27
   1404a:	f100 8346 	bmi.w	146da <_vfiprintf_r+0xd8a>
   1404e:	0674      	lsls	r4, r6, #25
   14050:	f100 83d5 	bmi.w	147fe <_vfiprintf_r+0xeae>
   14054:	05b0      	lsls	r0, r6, #22
   14056:	f140 8340 	bpl.w	146da <_vfiprintf_r+0xd8a>
   1405a:	9b07      	ldr	r3, [sp, #28]
   1405c:	9905      	ldr	r1, [sp, #20]
   1405e:	f853 2b04 	ldr.w	r2, [r3], #4
   14062:	9307      	str	r3, [sp, #28]
   14064:	7011      	strb	r1, [r2, #0]
   14066:	e4be      	b.n	139e6 <_vfiprintf_r+0x96>
   14068:	9603      	str	r6, [sp, #12]
   1406a:	2901      	cmp	r1, #1
   1406c:	f43f ad8c 	beq.w	13b88 <_vfiprintf_r+0x238>
   14070:	2902      	cmp	r1, #2
   14072:	ac44      	add	r4, sp, #272	; 0x110
   14074:	d111      	bne.n	1409a <_vfiprintf_r+0x74a>
   14076:	980c      	ldr	r0, [sp, #48]	; 0x30
   14078:	f003 010f 	and.w	r1, r3, #15
   1407c:	091b      	lsrs	r3, r3, #4
   1407e:	5c41      	ldrb	r1, [r0, r1]
   14080:	f804 1d01 	strb.w	r1, [r4, #-1]!
   14084:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   14088:	0912      	lsrs	r2, r2, #4
   1408a:	ea53 0102 	orrs.w	r1, r3, r2
   1408e:	d1f3      	bne.n	14078 <_vfiprintf_r+0x728>
   14090:	9e03      	ldr	r6, [sp, #12]
   14092:	ab44      	add	r3, sp, #272	; 0x110
   14094:	1b1b      	subs	r3, r3, r4
   14096:	9304      	str	r3, [sp, #16]
   14098:	e583      	b.n	13ba2 <_vfiprintf_r+0x252>
   1409a:	f003 0107 	and.w	r1, r3, #7
   1409e:	08db      	lsrs	r3, r3, #3
   140a0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   140a4:	08d2      	lsrs	r2, r2, #3
   140a6:	3130      	adds	r1, #48	; 0x30
   140a8:	ea53 0502 	orrs.w	r5, r3, r2
   140ac:	4620      	mov	r0, r4
   140ae:	f804 1d01 	strb.w	r1, [r4, #-1]!
   140b2:	d1f2      	bne.n	1409a <_vfiprintf_r+0x74a>
   140b4:	9e03      	ldr	r6, [sp, #12]
   140b6:	07f3      	lsls	r3, r6, #31
   140b8:	d5eb      	bpl.n	14092 <_vfiprintf_r+0x742>
   140ba:	2930      	cmp	r1, #48	; 0x30
   140bc:	d0e8      	beq.n	14090 <_vfiprintf_r+0x740>
   140be:	2330      	movs	r3, #48	; 0x30
   140c0:	3802      	subs	r0, #2
   140c2:	f804 3c01 	strb.w	r3, [r4, #-1]
   140c6:	ab44      	add	r3, sp, #272	; 0x110
   140c8:	1a1b      	subs	r3, r3, r0
   140ca:	9e03      	ldr	r6, [sp, #12]
   140cc:	9304      	str	r3, [sp, #16]
   140ce:	4604      	mov	r4, r0
   140d0:	e567      	b.n	13ba2 <_vfiprintf_r+0x252>
   140d2:	9b04      	ldr	r3, [sp, #16]
   140d4:	941b      	str	r4, [sp, #108]	; 0x6c
   140d6:	2201      	movs	r2, #1
   140d8:	931c      	str	r3, [sp, #112]	; 0x70
   140da:	931a      	str	r3, [sp, #104]	; 0x68
   140dc:	9219      	str	r2, [sp, #100]	; 0x64
   140de:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   140e2:	f109 0908 	add.w	r9, r9, #8
   140e6:	e69d      	b.n	13e24 <_vfiprintf_r+0x4d4>
   140e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   140ec:	e47b      	b.n	139e6 <_vfiprintf_r+0x96>
   140ee:	9a06      	ldr	r2, [sp, #24]
   140f0:	9d03      	ldr	r5, [sp, #12]
   140f2:	1b55      	subs	r5, r2, r5
   140f4:	2d00      	cmp	r5, #0
   140f6:	f77f ae76 	ble.w	13de6 <_vfiprintf_r+0x496>
   140fa:	2d10      	cmp	r5, #16
   140fc:	f340 83bb 	ble.w	14876 <_vfiprintf_r+0xf26>
   14100:	9409      	str	r4, [sp, #36]	; 0x24
   14102:	ee18 4a10 	vmov	r4, s16
   14106:	e007      	b.n	14118 <_vfiprintf_r+0x7c8>
   14108:	f100 0c02 	add.w	ip, r0, #2
   1410c:	f109 0908 	add.w	r9, r9, #8
   14110:	4610      	mov	r0, r2
   14112:	3d10      	subs	r5, #16
   14114:	2d10      	cmp	r5, #16
   14116:	dd1e      	ble.n	14156 <_vfiprintf_r+0x806>
   14118:	4981      	ldr	r1, [pc, #516]	; (14320 <_vfiprintf_r+0x9d0>)
   1411a:	f8c9 1000 	str.w	r1, [r9]
   1411e:	1c42      	adds	r2, r0, #1
   14120:	3310      	adds	r3, #16
   14122:	2110      	movs	r1, #16
   14124:	2a07      	cmp	r2, #7
   14126:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1412a:	f8c9 1004 	str.w	r1, [r9, #4]
   1412e:	ddeb      	ble.n	14108 <_vfiprintf_r+0x7b8>
   14130:	aa18      	add	r2, sp, #96	; 0x60
   14132:	2b00      	cmp	r3, #0
   14134:	d074      	beq.n	14220 <_vfiprintf_r+0x8d0>
   14136:	4621      	mov	r1, r4
   14138:	4658      	mov	r0, fp
   1413a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1413e:	f7ff fbcb 	bl	138d8 <__sprint_r.part.0>
   14142:	2800      	cmp	r0, #0
   14144:	f47f addb 	bne.w	13cfe <_vfiprintf_r+0x3ae>
   14148:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1414c:	3d10      	subs	r5, #16
   1414e:	2d10      	cmp	r5, #16
   14150:	f100 0c01 	add.w	ip, r0, #1
   14154:	dce0      	bgt.n	14118 <_vfiprintf_r+0x7c8>
   14156:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14158:	4a71      	ldr	r2, [pc, #452]	; (14320 <_vfiprintf_r+0x9d0>)
   1415a:	f8c9 5004 	str.w	r5, [r9, #4]
   1415e:	442b      	add	r3, r5
   14160:	f1bc 0f07 	cmp.w	ip, #7
   14164:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   14168:	f8c9 2000 	str.w	r2, [r9]
   1416c:	f340 8194 	ble.w	14498 <_vfiprintf_r+0xb48>
   14170:	2b00      	cmp	r3, #0
   14172:	f000 831f 	beq.w	147b4 <_vfiprintf_r+0xe64>
   14176:	ee18 1a10 	vmov	r1, s16
   1417a:	aa18      	add	r2, sp, #96	; 0x60
   1417c:	4658      	mov	r0, fp
   1417e:	f7ff fbab 	bl	138d8 <__sprint_r.part.0>
   14182:	2800      	cmp	r0, #0
   14184:	f47f adbb 	bne.w	13cfe <_vfiprintf_r+0x3ae>
   14188:	9a04      	ldr	r2, [sp, #16]
   1418a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1418e:	1abd      	subs	r5, r7, r2
   14190:	2d00      	cmp	r5, #0
   14192:	f100 0101 	add.w	r1, r0, #1
   14196:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1419a:	f77f ae29 	ble.w	13df0 <_vfiprintf_r+0x4a0>
   1419e:	2d10      	cmp	r5, #16
   141a0:	dd29      	ble.n	141f6 <_vfiprintf_r+0x8a6>
   141a2:	9409      	str	r4, [sp, #36]	; 0x24
   141a4:	2710      	movs	r7, #16
   141a6:	ee18 4a10 	vmov	r4, s16
   141aa:	e007      	b.n	141bc <_vfiprintf_r+0x86c>
   141ac:	f100 0c02 	add.w	ip, r0, #2
   141b0:	f109 0908 	add.w	r9, r9, #8
   141b4:	4610      	mov	r0, r2
   141b6:	3d10      	subs	r5, #16
   141b8:	2d10      	cmp	r5, #16
   141ba:	dd1a      	ble.n	141f2 <_vfiprintf_r+0x8a2>
   141bc:	1c42      	adds	r2, r0, #1
   141be:	4958      	ldr	r1, [pc, #352]	; (14320 <_vfiprintf_r+0x9d0>)
   141c0:	3310      	adds	r3, #16
   141c2:	2a07      	cmp	r2, #7
   141c4:	e9c9 1700 	strd	r1, r7, [r9]
   141c8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   141cc:	ddee      	ble.n	141ac <_vfiprintf_r+0x85c>
   141ce:	aa18      	add	r2, sp, #96	; 0x60
   141d0:	b303      	cbz	r3, 14214 <_vfiprintf_r+0x8c4>
   141d2:	4621      	mov	r1, r4
   141d4:	4658      	mov	r0, fp
   141d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   141da:	f7ff fb7d 	bl	138d8 <__sprint_r.part.0>
   141de:	2800      	cmp	r0, #0
   141e0:	f47f ad8d 	bne.w	13cfe <_vfiprintf_r+0x3ae>
   141e4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   141e8:	3d10      	subs	r5, #16
   141ea:	2d10      	cmp	r5, #16
   141ec:	f100 0c01 	add.w	ip, r0, #1
   141f0:	dce4      	bgt.n	141bc <_vfiprintf_r+0x86c>
   141f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   141f4:	4661      	mov	r1, ip
   141f6:	4a4a      	ldr	r2, [pc, #296]	; (14320 <_vfiprintf_r+0x9d0>)
   141f8:	f8c9 5004 	str.w	r5, [r9, #4]
   141fc:	442b      	add	r3, r5
   141fe:	2907      	cmp	r1, #7
   14200:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   14204:	f8c9 2000 	str.w	r2, [r9]
   14208:	f300 80e7 	bgt.w	143da <_vfiprintf_r+0xa8a>
   1420c:	f109 0908 	add.w	r9, r9, #8
   14210:	3101      	adds	r1, #1
   14212:	e5ed      	b.n	13df0 <_vfiprintf_r+0x4a0>
   14214:	f04f 0c01 	mov.w	ip, #1
   14218:	4618      	mov	r0, r3
   1421a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1421e:	e7ca      	b.n	141b6 <_vfiprintf_r+0x866>
   14220:	f04f 0c01 	mov.w	ip, #1
   14224:	4618      	mov	r0, r3
   14226:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1422a:	e772      	b.n	14112 <_vfiprintf_r+0x7c2>
   1422c:	2b00      	cmp	r3, #0
   1422e:	f000 8104 	beq.w	1443a <_vfiprintf_r+0xaea>
   14232:	ee18 1a10 	vmov	r1, s16
   14236:	aa18      	add	r2, sp, #96	; 0x60
   14238:	4658      	mov	r0, fp
   1423a:	f7ff fb4d 	bl	138d8 <__sprint_r.part.0>
   1423e:	2800      	cmp	r0, #0
   14240:	f47f ad5d 	bne.w	13cfe <_vfiprintf_r+0x3ae>
   14244:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   14248:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1424c:	1c41      	adds	r1, r0, #1
   1424e:	e5a7      	b.n	13da0 <_vfiprintf_r+0x450>
   14250:	2302      	movs	r3, #2
   14252:	aa11      	add	r2, sp, #68	; 0x44
   14254:	931c      	str	r3, [sp, #112]	; 0x70
   14256:	921b      	str	r2, [sp, #108]	; 0x6c
   14258:	2101      	movs	r1, #1
   1425a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1425e:	4608      	mov	r0, r1
   14260:	f109 0908 	add.w	r9, r9, #8
   14264:	1c41      	adds	r1, r0, #1
   14266:	e5ba      	b.n	13dde <_vfiprintf_r+0x48e>
   14268:	2d10      	cmp	r5, #16
   1426a:	f340 82e5 	ble.w	14838 <_vfiprintf_r+0xee8>
   1426e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   14272:	940f      	str	r4, [sp, #60]	; 0x3c
   14274:	4608      	mov	r0, r1
   14276:	ee18 4a10 	vmov	r4, s16
   1427a:	e007      	b.n	1428c <_vfiprintf_r+0x93c>
   1427c:	f100 0c02 	add.w	ip, r0, #2
   14280:	f109 0908 	add.w	r9, r9, #8
   14284:	4610      	mov	r0, r2
   14286:	3d10      	subs	r5, #16
   14288:	2d10      	cmp	r5, #16
   1428a:	dd1d      	ble.n	142c8 <_vfiprintf_r+0x978>
   1428c:	4925      	ldr	r1, [pc, #148]	; (14324 <_vfiprintf_r+0x9d4>)
   1428e:	f8c9 1000 	str.w	r1, [r9]
   14292:	1c42      	adds	r2, r0, #1
   14294:	3310      	adds	r3, #16
   14296:	2110      	movs	r1, #16
   14298:	2a07      	cmp	r2, #7
   1429a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1429e:	f8c9 1004 	str.w	r1, [r9, #4]
   142a2:	ddeb      	ble.n	1427c <_vfiprintf_r+0x92c>
   142a4:	aa18      	add	r2, sp, #96	; 0x60
   142a6:	b303      	cbz	r3, 142ea <_vfiprintf_r+0x99a>
   142a8:	4621      	mov	r1, r4
   142aa:	4658      	mov	r0, fp
   142ac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   142b0:	f7ff fb12 	bl	138d8 <__sprint_r.part.0>
   142b4:	2800      	cmp	r0, #0
   142b6:	f47f ad22 	bne.w	13cfe <_vfiprintf_r+0x3ae>
   142ba:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   142be:	3d10      	subs	r5, #16
   142c0:	2d10      	cmp	r5, #16
   142c2:	f100 0c01 	add.w	ip, r0, #1
   142c6:	dce1      	bgt.n	1428c <_vfiprintf_r+0x93c>
   142c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   142ca:	4660      	mov	r0, ip
   142cc:	4a15      	ldr	r2, [pc, #84]	; (14324 <_vfiprintf_r+0x9d4>)
   142ce:	f8c9 5004 	str.w	r5, [r9, #4]
   142d2:	442b      	add	r3, r5
   142d4:	2807      	cmp	r0, #7
   142d6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   142da:	f8c9 2000 	str.w	r2, [r9]
   142de:	f300 80c1 	bgt.w	14464 <_vfiprintf_r+0xb14>
   142e2:	f109 0908 	add.w	r9, r9, #8
   142e6:	1c41      	adds	r1, r0, #1
   142e8:	e546      	b.n	13d78 <_vfiprintf_r+0x428>
   142ea:	4618      	mov	r0, r3
   142ec:	f04f 0c01 	mov.w	ip, #1
   142f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   142f4:	e7c7      	b.n	14286 <_vfiprintf_r+0x936>
   142f6:	0776      	lsls	r6, r6, #29
   142f8:	9319      	str	r3, [sp, #100]	; 0x64
   142fa:	d553      	bpl.n	143a4 <_vfiprintf_r+0xa54>
   142fc:	9a06      	ldr	r2, [sp, #24]
   142fe:	9903      	ldr	r1, [sp, #12]
   14300:	1a54      	subs	r4, r2, r1
   14302:	2c00      	cmp	r4, #0
   14304:	dd4e      	ble.n	143a4 <_vfiprintf_r+0xa54>
   14306:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1430a:	2c10      	cmp	r4, #16
   1430c:	f340 82b0 	ble.w	14870 <_vfiprintf_r+0xf20>
   14310:	9919      	ldr	r1, [sp, #100]	; 0x64
   14312:	ee18 6a10 	vmov	r6, s16
   14316:	2510      	movs	r5, #16
   14318:	e00d      	b.n	14336 <_vfiprintf_r+0x9e6>
   1431a:	bf00      	nop
   1431c:	20000ef4 	.word	0x20000ef4
   14320:	20008780 	.word	0x20008780
   14324:	200029b0 	.word	0x200029b0
   14328:	1c88      	adds	r0, r1, #2
   1432a:	f109 0908 	add.w	r9, r9, #8
   1432e:	4611      	mov	r1, r2
   14330:	3c10      	subs	r4, #16
   14332:	2c10      	cmp	r4, #16
   14334:	dd1a      	ble.n	1436c <_vfiprintf_r+0xa1c>
   14336:	1c4a      	adds	r2, r1, #1
   14338:	48b3      	ldr	r0, [pc, #716]	; (14608 <_vfiprintf_r+0xcb8>)
   1433a:	3310      	adds	r3, #16
   1433c:	2a07      	cmp	r2, #7
   1433e:	e9c9 0500 	strd	r0, r5, [r9]
   14342:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   14346:	ddef      	ble.n	14328 <_vfiprintf_r+0x9d8>
   14348:	aa18      	add	r2, sp, #96	; 0x60
   1434a:	b333      	cbz	r3, 1439a <_vfiprintf_r+0xa4a>
   1434c:	4631      	mov	r1, r6
   1434e:	4658      	mov	r0, fp
   14350:	f7ff fac2 	bl	138d8 <__sprint_r.part.0>
   14354:	2800      	cmp	r0, #0
   14356:	f47f acd2 	bne.w	13cfe <_vfiprintf_r+0x3ae>
   1435a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1435e:	3c10      	subs	r4, #16
   14360:	2c10      	cmp	r4, #16
   14362:	f101 0001 	add.w	r0, r1, #1
   14366:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1436a:	dce4      	bgt.n	14336 <_vfiprintf_r+0x9e6>
   1436c:	4aa6      	ldr	r2, [pc, #664]	; (14608 <_vfiprintf_r+0xcb8>)
   1436e:	f8c9 4004 	str.w	r4, [r9, #4]
   14372:	4423      	add	r3, r4
   14374:	2807      	cmp	r0, #7
   14376:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1437a:	f8c9 2000 	str.w	r2, [r9]
   1437e:	f77f ad59 	ble.w	13e34 <_vfiprintf_r+0x4e4>
   14382:	b17b      	cbz	r3, 143a4 <_vfiprintf_r+0xa54>
   14384:	ee18 1a10 	vmov	r1, s16
   14388:	aa18      	add	r2, sp, #96	; 0x60
   1438a:	4658      	mov	r0, fp
   1438c:	f7ff faa4 	bl	138d8 <__sprint_r.part.0>
   14390:	2800      	cmp	r0, #0
   14392:	f47f acb4 	bne.w	13cfe <_vfiprintf_r+0x3ae>
   14396:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14398:	e54c      	b.n	13e34 <_vfiprintf_r+0x4e4>
   1439a:	2001      	movs	r0, #1
   1439c:	4619      	mov	r1, r3
   1439e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   143a2:	e7c5      	b.n	14330 <_vfiprintf_r+0x9e0>
   143a4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   143a8:	9903      	ldr	r1, [sp, #12]
   143aa:	428a      	cmp	r2, r1
   143ac:	bfac      	ite	ge
   143ae:	189b      	addge	r3, r3, r2
   143b0:	185b      	addlt	r3, r3, r1
   143b2:	9305      	str	r3, [sp, #20]
   143b4:	e549      	b.n	13e4a <_vfiprintf_r+0x4fa>
   143b6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   143ba:	058f      	lsls	r7, r1, #22
   143bc:	ee18 3a10 	vmov	r3, s16
   143c0:	b28a      	uxth	r2, r1
   143c2:	f53f aae8 	bmi.w	13996 <_vfiprintf_r+0x46>
   143c6:	ee18 5a10 	vmov	r5, s16
   143ca:	6d98      	ldr	r0, [r3, #88]	; 0x58
   143cc:	f7f8 fd5a 	bl	ce84 <__retarget_lock_acquire_recursive>
   143d0:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   143d4:	b28a      	uxth	r2, r1
   143d6:	f7ff bade 	b.w	13996 <_vfiprintf_r+0x46>
   143da:	2b00      	cmp	r3, #0
   143dc:	f43f ae79 	beq.w	140d2 <_vfiprintf_r+0x782>
   143e0:	ee18 1a10 	vmov	r1, s16
   143e4:	aa18      	add	r2, sp, #96	; 0x60
   143e6:	4658      	mov	r0, fp
   143e8:	f7ff fa76 	bl	138d8 <__sprint_r.part.0>
   143ec:	2800      	cmp	r0, #0
   143ee:	f47f ac86 	bne.w	13cfe <_vfiprintf_r+0x3ae>
   143f2:	9919      	ldr	r1, [sp, #100]	; 0x64
   143f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   143f6:	3101      	adds	r1, #1
   143f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   143fc:	e4f8      	b.n	13df0 <_vfiprintf_r+0x4a0>
   143fe:	9219      	str	r2, [sp, #100]	; 0x64
   14400:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14404:	e45e      	b.n	13cc4 <_vfiprintf_r+0x374>
   14406:	2f00      	cmp	r7, #0
   14408:	f47f abc3 	bne.w	13b92 <_vfiprintf_r+0x242>
   1440c:	9e03      	ldr	r6, [sp, #12]
   1440e:	2700      	movs	r7, #0
   14410:	9704      	str	r7, [sp, #16]
   14412:	ac44      	add	r4, sp, #272	; 0x110
   14414:	f7ff bbc5 	b.w	13ba2 <_vfiprintf_r+0x252>
   14418:	9b03      	ldr	r3, [sp, #12]
   1441a:	f013 0310 	ands.w	r3, r3, #16
   1441e:	d154      	bne.n	144ca <_vfiprintf_r+0xb7a>
   14420:	9a03      	ldr	r2, [sp, #12]
   14422:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   14426:	f000 816b 	beq.w	14700 <_vfiprintf_r+0xdb0>
   1442a:	9907      	ldr	r1, [sp, #28]
   1442c:	461a      	mov	r2, r3
   1442e:	f851 3b04 	ldr.w	r3, [r1], #4
   14432:	9107      	str	r1, [sp, #28]
   14434:	b29b      	uxth	r3, r3
   14436:	2101      	movs	r1, #1
   14438:	e401      	b.n	13c3e <_vfiprintf_r+0x2ee>
   1443a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1443c:	2a00      	cmp	r2, #0
   1443e:	d164      	bne.n	1450a <_vfiprintf_r+0xbba>
   14440:	4618      	mov	r0, r3
   14442:	2101      	movs	r1, #1
   14444:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14448:	e4c9      	b.n	13dde <_vfiprintf_r+0x48e>
   1444a:	2101      	movs	r1, #1
   1444c:	4618      	mov	r0, r3
   1444e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14452:	e4c4      	b.n	13dde <_vfiprintf_r+0x48e>
   14454:	425b      	negs	r3, r3
   14456:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1445a:	9603      	str	r6, [sp, #12]
   1445c:	202d      	movs	r0, #45	; 0x2d
   1445e:	2101      	movs	r1, #1
   14460:	f7ff bbee 	b.w	13c40 <_vfiprintf_r+0x2f0>
   14464:	2b00      	cmp	r3, #0
   14466:	f000 8088 	beq.w	1457a <_vfiprintf_r+0xc2a>
   1446a:	ee18 1a10 	vmov	r1, s16
   1446e:	aa18      	add	r2, sp, #96	; 0x60
   14470:	4658      	mov	r0, fp
   14472:	f7ff fa31 	bl	138d8 <__sprint_r.part.0>
   14476:	2800      	cmp	r0, #0
   14478:	f47f ac41 	bne.w	13cfe <_vfiprintf_r+0x3ae>
   1447c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   14480:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14484:	1c41      	adds	r1, r0, #1
   14486:	e477      	b.n	13d78 <_vfiprintf_r+0x428>
   14488:	f898 1000 	ldrb.w	r1, [r8]
   1448c:	9307      	str	r3, [sp, #28]
   1448e:	f7ff bad2 	b.w	13a36 <_vfiprintf_r+0xe6>
   14492:	ac44      	add	r4, sp, #272	; 0x110
   14494:	f7ff bb85 	b.w	13ba2 <_vfiprintf_r+0x252>
   14498:	f109 0908 	add.w	r9, r9, #8
   1449c:	f10c 0101 	add.w	r1, ip, #1
   144a0:	4660      	mov	r0, ip
   144a2:	e4a0      	b.n	13de6 <_vfiprintf_r+0x496>
   144a4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   144a8:	f040 8197 	bne.w	147da <_vfiprintf_r+0xe8a>
   144ac:	f851 3b04 	ldr.w	r3, [r1], #4
   144b0:	9107      	str	r1, [sp, #28]
   144b2:	f7ff bbc0 	b.w	13c36 <_vfiprintf_r+0x2e6>
   144b6:	05b3      	lsls	r3, r6, #22
   144b8:	f100 8188 	bmi.w	147cc <_vfiprintf_r+0xe7c>
   144bc:	f852 3b04 	ldr.w	r3, [r2], #4
   144c0:	9207      	str	r2, [sp, #28]
   144c2:	17da      	asrs	r2, r3, #31
   144c4:	4611      	mov	r1, r2
   144c6:	f7ff bb52 	b.w	13b6e <_vfiprintf_r+0x21e>
   144ca:	9907      	ldr	r1, [sp, #28]
   144cc:	f851 3b04 	ldr.w	r3, [r1], #4
   144d0:	9107      	str	r1, [sp, #28]
   144d2:	2101      	movs	r1, #1
   144d4:	f7ff bbb3 	b.w	13c3e <_vfiprintf_r+0x2ee>
   144d8:	9b07      	ldr	r3, [sp, #28]
   144da:	9805      	ldr	r0, [sp, #20]
   144dc:	f853 1b04 	ldr.w	r1, [r3], #4
   144e0:	9307      	str	r3, [sp, #28]
   144e2:	17c2      	asrs	r2, r0, #31
   144e4:	e9c1 0200 	strd	r0, r2, [r1]
   144e8:	f7ff ba7d 	b.w	139e6 <_vfiprintf_r+0x96>
   144ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   144ee:	2b00      	cmp	r3, #0
   144f0:	f43f ab26 	beq.w	13b40 <_vfiprintf_r+0x1f0>
   144f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   144f6:	781b      	ldrb	r3, [r3, #0]
   144f8:	2b00      	cmp	r3, #0
   144fa:	f43f ab21 	beq.w	13b40 <_vfiprintf_r+0x1f0>
   144fe:	f898 1000 	ldrb.w	r1, [r8]
   14502:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   14506:	f7ff ba96 	b.w	13a36 <_vfiprintf_r+0xe6>
   1450a:	2302      	movs	r3, #2
   1450c:	aa11      	add	r2, sp, #68	; 0x44
   1450e:	931c      	str	r3, [sp, #112]	; 0x70
   14510:	921b      	str	r2, [sp, #108]	; 0x6c
   14512:	2001      	movs	r0, #1
   14514:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14518:	e6a2      	b.n	14260 <_vfiprintf_r+0x910>
   1451a:	9603      	str	r6, [sp, #12]
   1451c:	e571      	b.n	14002 <_vfiprintf_r+0x6b2>
   1451e:	4b3b      	ldr	r3, [pc, #236]	; (1460c <_vfiprintf_r+0xcbc>)
   14520:	930c      	str	r3, [sp, #48]	; 0x30
   14522:	f016 0220 	ands.w	r2, r6, #32
   14526:	d059      	beq.n	145dc <_vfiprintf_r+0xc8c>
   14528:	9b07      	ldr	r3, [sp, #28]
   1452a:	3307      	adds	r3, #7
   1452c:	f023 0307 	bic.w	r3, r3, #7
   14530:	4618      	mov	r0, r3
   14532:	685a      	ldr	r2, [r3, #4]
   14534:	f850 3b08 	ldr.w	r3, [r0], #8
   14538:	9007      	str	r0, [sp, #28]
   1453a:	07f4      	lsls	r4, r6, #31
   1453c:	d509      	bpl.n	14552 <_vfiprintf_r+0xc02>
   1453e:	ea53 0002 	orrs.w	r0, r3, r2
   14542:	d006      	beq.n	14552 <_vfiprintf_r+0xc02>
   14544:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   14548:	2130      	movs	r1, #48	; 0x30
   1454a:	f046 0602 	orr.w	r6, r6, #2
   1454e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   14552:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   14556:	9103      	str	r1, [sp, #12]
   14558:	2102      	movs	r1, #2
   1455a:	f7ff bb70 	b.w	13c3e <_vfiprintf_r+0x2ee>
   1455e:	4b2c      	ldr	r3, [pc, #176]	; (14610 <_vfiprintf_r+0xcc0>)
   14560:	930c      	str	r3, [sp, #48]	; 0x30
   14562:	e7de      	b.n	14522 <_vfiprintf_r+0xbd2>
   14564:	9b07      	ldr	r3, [sp, #28]
   14566:	2101      	movs	r1, #1
   14568:	f853 2b04 	ldr.w	r2, [r3], #4
   1456c:	9103      	str	r1, [sp, #12]
   1456e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   14572:	9307      	str	r3, [sp, #28]
   14574:	9104      	str	r1, [sp, #16]
   14576:	ac2b      	add	r4, sp, #172	; 0xac
   14578:	e4df      	b.n	13f3a <_vfiprintf_r+0x5ea>
   1457a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1457e:	2a00      	cmp	r2, #0
   14580:	f040 8132 	bne.w	147e8 <_vfiprintf_r+0xe98>
   14584:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14586:	2a00      	cmp	r2, #0
   14588:	f47f ae62 	bne.w	14250 <_vfiprintf_r+0x900>
   1458c:	4618      	mov	r0, r3
   1458e:	2101      	movs	r1, #1
   14590:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14594:	e427      	b.n	13de6 <_vfiprintf_r+0x496>
   14596:	2100      	movs	r1, #0
   14598:	2208      	movs	r2, #8
   1459a:	a816      	add	r0, sp, #88	; 0x58
   1459c:	9413      	str	r4, [sp, #76]	; 0x4c
   1459e:	f7f8 fb0d 	bl	cbbc <memset>
   145a2:	1c79      	adds	r1, r7, #1
   145a4:	f000 80bc 	beq.w	14720 <_vfiprintf_r+0xdd0>
   145a8:	2500      	movs	r5, #0
   145aa:	9407      	str	r4, [sp, #28]
   145ac:	462c      	mov	r4, r5
   145ae:	e00c      	b.n	145ca <_vfiprintf_r+0xc7a>
   145b0:	a92b      	add	r1, sp, #172	; 0xac
   145b2:	4658      	mov	r0, fp
   145b4:	f7fe ff2e 	bl	13414 <_wcrtomb_r>
   145b8:	1c42      	adds	r2, r0, #1
   145ba:	4420      	add	r0, r4
   145bc:	f000 816b 	beq.w	14896 <_vfiprintf_r+0xf46>
   145c0:	42b8      	cmp	r0, r7
   145c2:	dc08      	bgt.n	145d6 <_vfiprintf_r+0xc86>
   145c4:	f000 8170 	beq.w	148a8 <_vfiprintf_r+0xf58>
   145c8:	4604      	mov	r4, r0
   145ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   145cc:	5952      	ldr	r2, [r2, r5]
   145ce:	ab16      	add	r3, sp, #88	; 0x58
   145d0:	3504      	adds	r5, #4
   145d2:	2a00      	cmp	r2, #0
   145d4:	d1ec      	bne.n	145b0 <_vfiprintf_r+0xc60>
   145d6:	9404      	str	r4, [sp, #16]
   145d8:	9c07      	ldr	r4, [sp, #28]
   145da:	e0af      	b.n	1473c <_vfiprintf_r+0xdec>
   145dc:	f016 0310 	ands.w	r3, r6, #16
   145e0:	9807      	ldr	r0, [sp, #28]
   145e2:	d10c      	bne.n	145fe <_vfiprintf_r+0xcae>
   145e4:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   145e8:	d005      	beq.n	145f6 <_vfiprintf_r+0xca6>
   145ea:	461a      	mov	r2, r3
   145ec:	f850 3b04 	ldr.w	r3, [r0], #4
   145f0:	9007      	str	r0, [sp, #28]
   145f2:	b29b      	uxth	r3, r3
   145f4:	e7a1      	b.n	1453a <_vfiprintf_r+0xbea>
   145f6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   145fa:	f040 80e1 	bne.w	147c0 <_vfiprintf_r+0xe70>
   145fe:	f850 3b04 	ldr.w	r3, [r0], #4
   14602:	9007      	str	r0, [sp, #28]
   14604:	e799      	b.n	1453a <_vfiprintf_r+0xbea>
   14606:	bf00      	nop
   14608:	200029b0 	.word	0x200029b0
   1460c:	20000ef4 	.word	0x20000ef4
   14610:	20000f08 	.word	0x20000f08
   14614:	9903      	ldr	r1, [sp, #12]
   14616:	9704      	str	r7, [sp, #16]
   14618:	ac44      	add	r4, sp, #272	; 0x110
   1461a:	469e      	mov	lr, r3
   1461c:	ee08 ba90 	vmov	s17, fp
   14620:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   14624:	f04f 0c00 	mov.w	ip, #0
   14628:	4623      	mov	r3, r4
   1462a:	e006      	b.n	1463a <_vfiprintf_r+0xcea>
   1462c:	f1be 0f0a 	cmp.w	lr, #10
   14630:	f172 0200 	sbcs.w	r2, r2, #0
   14634:	d339      	bcc.n	146aa <_vfiprintf_r+0xd5a>
   14636:	46a6      	mov	lr, r4
   14638:	462a      	mov	r2, r5
   1463a:	49a6      	ldr	r1, [pc, #664]	; (148d4 <_vfiprintf_r+0xf84>)
   1463c:	eb1e 0002 	adds.w	r0, lr, r2
   14640:	f140 0000 	adc.w	r0, r0, #0
   14644:	460f      	mov	r7, r1
   14646:	fba1 1400 	umull	r1, r4, r1, r0
   1464a:	f024 0103 	bic.w	r1, r4, #3
   1464e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   14652:	1a40      	subs	r0, r0, r1
   14654:	ebbe 0100 	subs.w	r1, lr, r0
   14658:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1465c:	f162 0400 	sbc.w	r4, r2, #0
   14660:	fb05 f501 	mul.w	r5, r5, r1
   14664:	fb07 5504 	mla	r5, r7, r4, r5
   14668:	fba1 4107 	umull	r4, r1, r1, r7
   1466c:	440d      	add	r5, r1
   1466e:	2705      	movs	r7, #5
   14670:	f004 0101 	and.w	r1, r4, #1
   14674:	fba1 1b07 	umull	r1, fp, r1, r7
   14678:	1809      	adds	r1, r1, r0
   1467a:	0864      	lsrs	r4, r4, #1
   1467c:	3130      	adds	r1, #48	; 0x30
   1467e:	f803 1c01 	strb.w	r1, [r3, #-1]
   14682:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   14686:	f10c 0c01 	add.w	ip, ip, #1
   1468a:	3b01      	subs	r3, #1
   1468c:	086d      	lsrs	r5, r5, #1
   1468e:	2e00      	cmp	r6, #0
   14690:	d0cc      	beq.n	1462c <_vfiprintf_r+0xcdc>
   14692:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14694:	7809      	ldrb	r1, [r1, #0]
   14696:	4561      	cmp	r1, ip
   14698:	d1c8      	bne.n	1462c <_vfiprintf_r+0xcdc>
   1469a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1469e:	d0c5      	beq.n	1462c <_vfiprintf_r+0xcdc>
   146a0:	f1be 0f0a 	cmp.w	lr, #10
   146a4:	f172 0200 	sbcs.w	r2, r2, #0
   146a8:	d26c      	bcs.n	14784 <_vfiprintf_r+0xe34>
   146aa:	461c      	mov	r4, r3
   146ac:	ab44      	add	r3, sp, #272	; 0x110
   146ae:	1b1b      	subs	r3, r3, r4
   146b0:	9f04      	ldr	r7, [sp, #16]
   146b2:	9e03      	ldr	r6, [sp, #12]
   146b4:	9304      	str	r3, [sp, #16]
   146b6:	ee18 ba90 	vmov	fp, s17
   146ba:	f7ff ba72 	b.w	13ba2 <_vfiprintf_r+0x252>
   146be:	9603      	str	r6, [sp, #12]
   146c0:	f7ff ba62 	b.w	13b88 <_vfiprintf_r+0x238>
   146c4:	4658      	mov	r0, fp
   146c6:	f7f8 f885 	bl	c7d4 <__sinit>
   146ca:	f7ff b95b 	b.w	13984 <_vfiprintf_r+0x34>
   146ce:	2901      	cmp	r1, #1
   146d0:	9603      	str	r6, [sp, #12]
   146d2:	f47f accd 	bne.w	14070 <_vfiprintf_r+0x720>
   146d6:	f7ff ba5c 	b.w	13b92 <_vfiprintf_r+0x242>
   146da:	9b07      	ldr	r3, [sp, #28]
   146dc:	9905      	ldr	r1, [sp, #20]
   146de:	f853 2b04 	ldr.w	r2, [r3], #4
   146e2:	6011      	str	r1, [r2, #0]
   146e4:	9307      	str	r3, [sp, #28]
   146e6:	f7ff b97e 	b.w	139e6 <_vfiprintf_r+0x96>
   146ea:	2f06      	cmp	r7, #6
   146ec:	463b      	mov	r3, r7
   146ee:	9a03      	ldr	r2, [sp, #12]
   146f0:	4c79      	ldr	r4, [pc, #484]	; (148d8 <_vfiprintf_r+0xf88>)
   146f2:	9207      	str	r2, [sp, #28]
   146f4:	bf28      	it	cs
   146f6:	2306      	movcs	r3, #6
   146f8:	9304      	str	r3, [sp, #16]
   146fa:	9303      	str	r3, [sp, #12]
   146fc:	f7ff bb25 	b.w	13d4a <_vfiprintf_r+0x3fa>
   14700:	9b03      	ldr	r3, [sp, #12]
   14702:	9907      	ldr	r1, [sp, #28]
   14704:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   14708:	bf14      	ite	ne
   1470a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1470e:	f851 3b04 	ldreq.w	r3, [r1], #4
   14712:	9107      	str	r1, [sp, #28]
   14714:	bf1c      	itt	ne
   14716:	4602      	movne	r2, r0
   14718:	b2db      	uxtbne	r3, r3
   1471a:	2101      	movs	r1, #1
   1471c:	f7ff ba8f 	b.w	13c3e <_vfiprintf_r+0x2ee>
   14720:	ab16      	add	r3, sp, #88	; 0x58
   14722:	9300      	str	r3, [sp, #0]
   14724:	2300      	movs	r3, #0
   14726:	4619      	mov	r1, r3
   14728:	aa13      	add	r2, sp, #76	; 0x4c
   1472a:	4658      	mov	r0, fp
   1472c:	f7fe fe98 	bl	13460 <_wcsrtombs_r>
   14730:	4603      	mov	r3, r0
   14732:	3301      	adds	r3, #1
   14734:	9004      	str	r0, [sp, #16]
   14736:	f000 80ae 	beq.w	14896 <_vfiprintf_r+0xf46>
   1473a:	9413      	str	r4, [sp, #76]	; 0x4c
   1473c:	9b04      	ldr	r3, [sp, #16]
   1473e:	2b00      	cmp	r3, #0
   14740:	d030      	beq.n	147a4 <_vfiprintf_r+0xe54>
   14742:	2b63      	cmp	r3, #99	; 0x63
   14744:	dc63      	bgt.n	1480e <_vfiprintf_r+0xebe>
   14746:	2300      	movs	r3, #0
   14748:	9308      	str	r3, [sp, #32]
   1474a:	ac2b      	add	r4, sp, #172	; 0xac
   1474c:	2208      	movs	r2, #8
   1474e:	2100      	movs	r1, #0
   14750:	a816      	add	r0, sp, #88	; 0x58
   14752:	f7f8 fa33 	bl	cbbc <memset>
   14756:	9d04      	ldr	r5, [sp, #16]
   14758:	ab16      	add	r3, sp, #88	; 0x58
   1475a:	9300      	str	r3, [sp, #0]
   1475c:	aa13      	add	r2, sp, #76	; 0x4c
   1475e:	462b      	mov	r3, r5
   14760:	4621      	mov	r1, r4
   14762:	4658      	mov	r0, fp
   14764:	f7fe fe7c 	bl	13460 <_wcsrtombs_r>
   14768:	4285      	cmp	r5, r0
   1476a:	f040 80ab 	bne.w	148c4 <_vfiprintf_r+0xf74>
   1476e:	9b03      	ldr	r3, [sp, #12]
   14770:	9a04      	ldr	r2, [sp, #16]
   14772:	9307      	str	r3, [sp, #28]
   14774:	2300      	movs	r3, #0
   14776:	54a3      	strb	r3, [r4, r2]
   14778:	461f      	mov	r7, r3
   1477a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1477e:	9303      	str	r3, [sp, #12]
   14780:	f7ff ba16 	b.w	13bb0 <_vfiprintf_r+0x260>
   14784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14786:	990d      	ldr	r1, [sp, #52]	; 0x34
   14788:	1a9b      	subs	r3, r3, r2
   1478a:	4618      	mov	r0, r3
   1478c:	9308      	str	r3, [sp, #32]
   1478e:	f7f8 faad 	bl	ccec <strncpy>
   14792:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14794:	9b08      	ldr	r3, [sp, #32]
   14796:	784a      	ldrb	r2, [r1, #1]
   14798:	b10a      	cbz	r2, 1479e <_vfiprintf_r+0xe4e>
   1479a:	3101      	adds	r1, #1
   1479c:	910b      	str	r1, [sp, #44]	; 0x2c
   1479e:	f04f 0c00 	mov.w	ip, #0
   147a2:	e748      	b.n	14636 <_vfiprintf_r+0xce6>
   147a4:	9b03      	ldr	r3, [sp, #12]
   147a6:	9307      	str	r3, [sp, #28]
   147a8:	9b04      	ldr	r3, [sp, #16]
   147aa:	9303      	str	r3, [sp, #12]
   147ac:	461f      	mov	r7, r3
   147ae:	9308      	str	r3, [sp, #32]
   147b0:	f7ff b9fe 	b.w	13bb0 <_vfiprintf_r+0x260>
   147b4:	2101      	movs	r1, #1
   147b6:	4618      	mov	r0, r3
   147b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   147bc:	f7ff bb13 	b.w	13de6 <_vfiprintf_r+0x496>
   147c0:	f850 3b04 	ldr.w	r3, [r0], #4
   147c4:	9007      	str	r0, [sp, #28]
   147c6:	4622      	mov	r2, r4
   147c8:	b2db      	uxtb	r3, r3
   147ca:	e6b6      	b.n	1453a <_vfiprintf_r+0xbea>
   147cc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   147d0:	9207      	str	r2, [sp, #28]
   147d2:	17da      	asrs	r2, r3, #31
   147d4:	4611      	mov	r1, r2
   147d6:	f7ff b9ca 	b.w	13b6e <_vfiprintf_r+0x21e>
   147da:	f851 3b04 	ldr.w	r3, [r1], #4
   147de:	9107      	str	r1, [sp, #28]
   147e0:	4602      	mov	r2, r0
   147e2:	b2db      	uxtb	r3, r3
   147e4:	f7ff ba27 	b.w	13c36 <_vfiprintf_r+0x2e6>
   147e8:	2301      	movs	r3, #1
   147ea:	931c      	str	r3, [sp, #112]	; 0x70
   147ec:	2101      	movs	r1, #1
   147ee:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   147f2:	931b      	str	r3, [sp, #108]	; 0x6c
   147f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   147f8:	460b      	mov	r3, r1
   147fa:	f7ff bacd 	b.w	13d98 <_vfiprintf_r+0x448>
   147fe:	9b07      	ldr	r3, [sp, #28]
   14800:	9905      	ldr	r1, [sp, #20]
   14802:	f853 2b04 	ldr.w	r2, [r3], #4
   14806:	9307      	str	r3, [sp, #28]
   14808:	8011      	strh	r1, [r2, #0]
   1480a:	f7ff b8ec 	b.w	139e6 <_vfiprintf_r+0x96>
   1480e:	1c59      	adds	r1, r3, #1
   14810:	4658      	mov	r0, fp
   14812:	f7f6 faab 	bl	ad6c <_malloc_r>
   14816:	4604      	mov	r4, r0
   14818:	2800      	cmp	r0, #0
   1481a:	d03c      	beq.n	14896 <_vfiprintf_r+0xf46>
   1481c:	9008      	str	r0, [sp, #32]
   1481e:	e795      	b.n	1474c <_vfiprintf_r+0xdfc>
   14820:	6d88      	ldr	r0, [r1, #88]	; 0x58
   14822:	f7f8 fb31 	bl	ce88 <__retarget_lock_release_recursive>
   14826:	f7ff b9e9 	b.w	13bfc <_vfiprintf_r+0x2ac>
   1482a:	9b03      	ldr	r3, [sp, #12]
   1482c:	9307      	str	r3, [sp, #28]
   1482e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   14832:	9f08      	ldr	r7, [sp, #32]
   14834:	f7ff b9bc 	b.w	13bb0 <_vfiprintf_r+0x260>
   14838:	9819      	ldr	r0, [sp, #100]	; 0x64
   1483a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1483c:	3001      	adds	r0, #1
   1483e:	e545      	b.n	142cc <_vfiprintf_r+0x97c>
   14840:	9b03      	ldr	r3, [sp, #12]
   14842:	9307      	str	r3, [sp, #28]
   14844:	4620      	mov	r0, r4
   14846:	f7f8 fcfb 	bl	d240 <strlen>
   1484a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1484e:	462f      	mov	r7, r5
   14850:	9004      	str	r0, [sp, #16]
   14852:	9303      	str	r3, [sp, #12]
   14854:	9508      	str	r5, [sp, #32]
   14856:	f7ff b9ab 	b.w	13bb0 <_vfiprintf_r+0x260>
   1485a:	ee18 1a10 	vmov	r1, s16
   1485e:	aa18      	add	r2, sp, #96	; 0x60
   14860:	4658      	mov	r0, fp
   14862:	f7ff f839 	bl	138d8 <__sprint_r.part.0>
   14866:	2800      	cmp	r0, #0
   14868:	f43f aa36 	beq.w	13cd8 <_vfiprintf_r+0x388>
   1486c:	f7ff ba4d 	b.w	13d0a <_vfiprintf_r+0x3ba>
   14870:	9819      	ldr	r0, [sp, #100]	; 0x64
   14872:	3001      	adds	r0, #1
   14874:	e57a      	b.n	1436c <_vfiprintf_r+0xa1c>
   14876:	468c      	mov	ip, r1
   14878:	e46e      	b.n	14158 <_vfiprintf_r+0x808>
   1487a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1487c:	07d9      	lsls	r1, r3, #31
   1487e:	d405      	bmi.n	1488c <_vfiprintf_r+0xf3c>
   14880:	89ab      	ldrh	r3, [r5, #12]
   14882:	059a      	lsls	r2, r3, #22
   14884:	d402      	bmi.n	1488c <_vfiprintf_r+0xf3c>
   14886:	6da8      	ldr	r0, [r5, #88]	; 0x58
   14888:	f7f8 fafe 	bl	ce88 <__retarget_lock_release_recursive>
   1488c:	f04f 33ff 	mov.w	r3, #4294967295
   14890:	9305      	str	r3, [sp, #20]
   14892:	f7ff ba49 	b.w	13d28 <_vfiprintf_r+0x3d8>
   14896:	ee18 2a10 	vmov	r2, s16
   1489a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1489e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   148a2:	8193      	strh	r3, [r2, #12]
   148a4:	f7ff ba35 	b.w	13d12 <_vfiprintf_r+0x3c2>
   148a8:	9c07      	ldr	r4, [sp, #28]
   148aa:	9704      	str	r7, [sp, #16]
   148ac:	e746      	b.n	1473c <_vfiprintf_r+0xdec>
   148ae:	9b07      	ldr	r3, [sp, #28]
   148b0:	f898 1001 	ldrb.w	r1, [r8, #1]
   148b4:	f853 7b04 	ldr.w	r7, [r3], #4
   148b8:	9307      	str	r3, [sp, #28]
   148ba:	4690      	mov	r8, r2
   148bc:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   148c0:	f7ff b8b9 	b.w	13a36 <_vfiprintf_r+0xe6>
   148c4:	ee18 2a10 	vmov	r2, s16
   148c8:	8993      	ldrh	r3, [r2, #12]
   148ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   148ce:	8193      	strh	r3, [r2, #12]
   148d0:	f7ff ba15 	b.w	13cfe <_vfiprintf_r+0x3ae>
   148d4:	cccccccd 	.word	0xcccccccd
   148d8:	20000f1c 	.word	0x20000f1c

000148dc <__sbprintf>:
   148dc:	b570      	push	{r4, r5, r6, lr}
   148de:	460c      	mov	r4, r1
   148e0:	8989      	ldrh	r1, [r1, #12]
   148e2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   148e6:	f021 0102 	bic.w	r1, r1, #2
   148ea:	f8ad 1014 	strh.w	r1, [sp, #20]
   148ee:	6e61      	ldr	r1, [r4, #100]	; 0x64
   148f0:	911b      	str	r1, [sp, #108]	; 0x6c
   148f2:	89e1      	ldrh	r1, [r4, #14]
   148f4:	f8ad 1016 	strh.w	r1, [sp, #22]
   148f8:	69e1      	ldr	r1, [r4, #28]
   148fa:	9109      	str	r1, [sp, #36]	; 0x24
   148fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   148fe:	910b      	str	r1, [sp, #44]	; 0x2c
   14900:	a91c      	add	r1, sp, #112	; 0x70
   14902:	9102      	str	r1, [sp, #8]
   14904:	9106      	str	r1, [sp, #24]
   14906:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1490a:	4606      	mov	r6, r0
   1490c:	9104      	str	r1, [sp, #16]
   1490e:	9107      	str	r1, [sp, #28]
   14910:	a818      	add	r0, sp, #96	; 0x60
   14912:	2100      	movs	r1, #0
   14914:	e9cd 3200 	strd	r3, r2, [sp]
   14918:	9108      	str	r1, [sp, #32]
   1491a:	f7f8 faaf 	bl	ce7c <__retarget_lock_init_recursive>
   1491e:	e9dd 3200 	ldrd	r3, r2, [sp]
   14922:	a902      	add	r1, sp, #8
   14924:	4630      	mov	r0, r6
   14926:	f7ff f813 	bl	13950 <_vfiprintf_r>
   1492a:	1e05      	subs	r5, r0, #0
   1492c:	db07      	blt.n	1493e <__sbprintf+0x62>
   1492e:	a902      	add	r1, sp, #8
   14930:	4630      	mov	r0, r6
   14932:	f7fd fad3 	bl	11edc <_fflush_r>
   14936:	2800      	cmp	r0, #0
   14938:	bf18      	it	ne
   1493a:	f04f 35ff 	movne.w	r5, #4294967295
   1493e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   14942:	065b      	lsls	r3, r3, #25
   14944:	d503      	bpl.n	1494e <__sbprintf+0x72>
   14946:	89a3      	ldrh	r3, [r4, #12]
   14948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1494c:	81a3      	strh	r3, [r4, #12]
   1494e:	9818      	ldr	r0, [sp, #96]	; 0x60
   14950:	f7f8 fa96 	bl	ce80 <__retarget_lock_close_recursive>
   14954:	4628      	mov	r0, r5
   14956:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   1495a:	bd70      	pop	{r4, r5, r6, pc}

0001495c <__sfvwrite_r>:
   1495c:	6893      	ldr	r3, [r2, #8]
   1495e:	2b00      	cmp	r3, #0
   14960:	f000 8085 	beq.w	14a6e <__sfvwrite_r+0x112>
   14964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14968:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1496c:	460c      	mov	r4, r1
   1496e:	0719      	lsls	r1, r3, #28
   14970:	4680      	mov	r8, r0
   14972:	b083      	sub	sp, #12
   14974:	4617      	mov	r7, r2
   14976:	b298      	uxth	r0, r3
   14978:	d525      	bpl.n	149c6 <__sfvwrite_r+0x6a>
   1497a:	6923      	ldr	r3, [r4, #16]
   1497c:	b31b      	cbz	r3, 149c6 <__sfvwrite_r+0x6a>
   1497e:	f010 0302 	ands.w	r3, r0, #2
   14982:	683d      	ldr	r5, [r7, #0]
   14984:	d02d      	beq.n	149e2 <__sfvwrite_r+0x86>
   14986:	f04f 0a00 	mov.w	sl, #0
   1498a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 14c4c <__sfvwrite_r+0x2f0>
   1498e:	4656      	mov	r6, sl
   14990:	46b9      	mov	r9, r7
   14992:	455e      	cmp	r6, fp
   14994:	4633      	mov	r3, r6
   14996:	4652      	mov	r2, sl
   14998:	bf28      	it	cs
   1499a:	465b      	movcs	r3, fp
   1499c:	4640      	mov	r0, r8
   1499e:	2e00      	cmp	r6, #0
   149a0:	d052      	beq.n	14a48 <__sfvwrite_r+0xec>
   149a2:	69e1      	ldr	r1, [r4, #28]
   149a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   149a6:	47b8      	blx	r7
   149a8:	2800      	cmp	r0, #0
   149aa:	dd56      	ble.n	14a5a <__sfvwrite_r+0xfe>
   149ac:	f8d9 3008 	ldr.w	r3, [r9, #8]
   149b0:	1a1b      	subs	r3, r3, r0
   149b2:	4482      	add	sl, r0
   149b4:	1a36      	subs	r6, r6, r0
   149b6:	f8c9 3008 	str.w	r3, [r9, #8]
   149ba:	2b00      	cmp	r3, #0
   149bc:	d1e9      	bne.n	14992 <__sfvwrite_r+0x36>
   149be:	2000      	movs	r0, #0
   149c0:	b003      	add	sp, #12
   149c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149c6:	4621      	mov	r1, r4
   149c8:	4640      	mov	r0, r8
   149ca:	f000 f97d 	bl	14cc8 <__swsetup_r>
   149ce:	2800      	cmp	r0, #0
   149d0:	f040 8138 	bne.w	14c44 <__sfvwrite_r+0x2e8>
   149d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   149d8:	683d      	ldr	r5, [r7, #0]
   149da:	b298      	uxth	r0, r3
   149dc:	f010 0302 	ands.w	r3, r0, #2
   149e0:	d1d1      	bne.n	14986 <__sfvwrite_r+0x2a>
   149e2:	f010 0901 	ands.w	r9, r0, #1
   149e6:	d144      	bne.n	14a72 <__sfvwrite_r+0x116>
   149e8:	464e      	mov	r6, r9
   149ea:	9700      	str	r7, [sp, #0]
   149ec:	b346      	cbz	r6, 14a40 <__sfvwrite_r+0xe4>
   149ee:	0582      	lsls	r2, r0, #22
   149f0:	f8d4 b008 	ldr.w	fp, [r4, #8]
   149f4:	f140 8085 	bpl.w	14b02 <__sfvwrite_r+0x1a6>
   149f8:	45b3      	cmp	fp, r6
   149fa:	465a      	mov	r2, fp
   149fc:	f200 80b4 	bhi.w	14b68 <__sfvwrite_r+0x20c>
   14a00:	f410 6f90 	tst.w	r0, #1152	; 0x480
   14a04:	f040 80c1 	bne.w	14b8a <__sfvwrite_r+0x22e>
   14a08:	6820      	ldr	r0, [r4, #0]
   14a0a:	9201      	str	r2, [sp, #4]
   14a0c:	4649      	mov	r1, r9
   14a0e:	f7f8 f859 	bl	cac4 <memmove>
   14a12:	68a3      	ldr	r3, [r4, #8]
   14a14:	9a01      	ldr	r2, [sp, #4]
   14a16:	eba3 010b 	sub.w	r1, r3, fp
   14a1a:	6823      	ldr	r3, [r4, #0]
   14a1c:	60a1      	str	r1, [r4, #8]
   14a1e:	4413      	add	r3, r2
   14a20:	46b2      	mov	sl, r6
   14a22:	6023      	str	r3, [r4, #0]
   14a24:	2600      	movs	r6, #0
   14a26:	9a00      	ldr	r2, [sp, #0]
   14a28:	6893      	ldr	r3, [r2, #8]
   14a2a:	eba3 030a 	sub.w	r3, r3, sl
   14a2e:	44d1      	add	r9, sl
   14a30:	6093      	str	r3, [r2, #8]
   14a32:	2b00      	cmp	r3, #0
   14a34:	d0c3      	beq.n	149be <__sfvwrite_r+0x62>
   14a36:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   14a3a:	b280      	uxth	r0, r0
   14a3c:	2e00      	cmp	r6, #0
   14a3e:	d1d6      	bne.n	149ee <__sfvwrite_r+0x92>
   14a40:	e9d5 9600 	ldrd	r9, r6, [r5]
   14a44:	3508      	adds	r5, #8
   14a46:	e7d1      	b.n	149ec <__sfvwrite_r+0x90>
   14a48:	e9d5 a600 	ldrd	sl, r6, [r5]
   14a4c:	3508      	adds	r5, #8
   14a4e:	e7a0      	b.n	14992 <__sfvwrite_r+0x36>
   14a50:	4621      	mov	r1, r4
   14a52:	4640      	mov	r0, r8
   14a54:	f7fd fa42 	bl	11edc <_fflush_r>
   14a58:	b388      	cbz	r0, 14abe <__sfvwrite_r+0x162>
   14a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14a62:	f04f 30ff 	mov.w	r0, #4294967295
   14a66:	81a3      	strh	r3, [r4, #12]
   14a68:	b003      	add	sp, #12
   14a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a6e:	2000      	movs	r0, #0
   14a70:	4770      	bx	lr
   14a72:	461e      	mov	r6, r3
   14a74:	46ba      	mov	sl, r7
   14a76:	4699      	mov	r9, r3
   14a78:	4618      	mov	r0, r3
   14a7a:	9500      	str	r5, [sp, #0]
   14a7c:	461f      	mov	r7, r3
   14a7e:	b366      	cbz	r6, 14ada <__sfvwrite_r+0x17e>
   14a80:	2800      	cmp	r0, #0
   14a82:	d032      	beq.n	14aea <__sfvwrite_r+0x18e>
   14a84:	464a      	mov	r2, r9
   14a86:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   14a8a:	6820      	ldr	r0, [r4, #0]
   14a8c:	68a5      	ldr	r5, [r4, #8]
   14a8e:	42b2      	cmp	r2, r6
   14a90:	bf28      	it	cs
   14a92:	4632      	movcs	r2, r6
   14a94:	4288      	cmp	r0, r1
   14a96:	d904      	bls.n	14aa2 <__sfvwrite_r+0x146>
   14a98:	eb05 0b03 	add.w	fp, r5, r3
   14a9c:	455a      	cmp	r2, fp
   14a9e:	f300 80a7 	bgt.w	14bf0 <__sfvwrite_r+0x294>
   14aa2:	4293      	cmp	r3, r2
   14aa4:	dc64      	bgt.n	14b70 <__sfvwrite_r+0x214>
   14aa6:	69e1      	ldr	r1, [r4, #28]
   14aa8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   14aaa:	463a      	mov	r2, r7
   14aac:	4640      	mov	r0, r8
   14aae:	47a8      	blx	r5
   14ab0:	f1b0 0b00 	subs.w	fp, r0, #0
   14ab4:	ddd1      	ble.n	14a5a <__sfvwrite_r+0xfe>
   14ab6:	ebb9 090b 	subs.w	r9, r9, fp
   14aba:	d0c9      	beq.n	14a50 <__sfvwrite_r+0xf4>
   14abc:	2001      	movs	r0, #1
   14abe:	f8da 3008 	ldr.w	r3, [sl, #8]
   14ac2:	eba3 030b 	sub.w	r3, r3, fp
   14ac6:	445f      	add	r7, fp
   14ac8:	eba6 060b 	sub.w	r6, r6, fp
   14acc:	f8ca 3008 	str.w	r3, [sl, #8]
   14ad0:	2b00      	cmp	r3, #0
   14ad2:	f43f af74 	beq.w	149be <__sfvwrite_r+0x62>
   14ad6:	2e00      	cmp	r6, #0
   14ad8:	d1d2      	bne.n	14a80 <__sfvwrite_r+0x124>
   14ada:	9a00      	ldr	r2, [sp, #0]
   14adc:	6856      	ldr	r6, [r2, #4]
   14ade:	4613      	mov	r3, r2
   14ae0:	3208      	adds	r2, #8
   14ae2:	9200      	str	r2, [sp, #0]
   14ae4:	2e00      	cmp	r6, #0
   14ae6:	d0f8      	beq.n	14ada <__sfvwrite_r+0x17e>
   14ae8:	681f      	ldr	r7, [r3, #0]
   14aea:	4632      	mov	r2, r6
   14aec:	210a      	movs	r1, #10
   14aee:	4638      	mov	r0, r7
   14af0:	f7f8 fb46 	bl	d180 <memchr>
   14af4:	2800      	cmp	r0, #0
   14af6:	f000 809c 	beq.w	14c32 <__sfvwrite_r+0x2d6>
   14afa:	3001      	adds	r0, #1
   14afc:	eba0 0907 	sub.w	r9, r0, r7
   14b00:	e7c0      	b.n	14a84 <__sfvwrite_r+0x128>
   14b02:	6820      	ldr	r0, [r4, #0]
   14b04:	6923      	ldr	r3, [r4, #16]
   14b06:	4298      	cmp	r0, r3
   14b08:	d816      	bhi.n	14b38 <__sfvwrite_r+0x1dc>
   14b0a:	6962      	ldr	r2, [r4, #20]
   14b0c:	42b2      	cmp	r2, r6
   14b0e:	d813      	bhi.n	14b38 <__sfvwrite_r+0x1dc>
   14b10:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14b14:	42b3      	cmp	r3, r6
   14b16:	bf28      	it	cs
   14b18:	4633      	movcs	r3, r6
   14b1a:	69e1      	ldr	r1, [r4, #28]
   14b1c:	fb93 f3f2 	sdiv	r3, r3, r2
   14b20:	6a67      	ldr	r7, [r4, #36]	; 0x24
   14b22:	fb02 f303 	mul.w	r3, r2, r3
   14b26:	4640      	mov	r0, r8
   14b28:	464a      	mov	r2, r9
   14b2a:	47b8      	blx	r7
   14b2c:	f1b0 0a00 	subs.w	sl, r0, #0
   14b30:	dd93      	ble.n	14a5a <__sfvwrite_r+0xfe>
   14b32:	eba6 060a 	sub.w	r6, r6, sl
   14b36:	e776      	b.n	14a26 <__sfvwrite_r+0xca>
   14b38:	45b3      	cmp	fp, r6
   14b3a:	46da      	mov	sl, fp
   14b3c:	bf28      	it	cs
   14b3e:	46b2      	movcs	sl, r6
   14b40:	4652      	mov	r2, sl
   14b42:	4649      	mov	r1, r9
   14b44:	f7f7 ffbe 	bl	cac4 <memmove>
   14b48:	68a3      	ldr	r3, [r4, #8]
   14b4a:	6822      	ldr	r2, [r4, #0]
   14b4c:	eba3 030a 	sub.w	r3, r3, sl
   14b50:	4452      	add	r2, sl
   14b52:	60a3      	str	r3, [r4, #8]
   14b54:	6022      	str	r2, [r4, #0]
   14b56:	2b00      	cmp	r3, #0
   14b58:	d1eb      	bne.n	14b32 <__sfvwrite_r+0x1d6>
   14b5a:	4621      	mov	r1, r4
   14b5c:	4640      	mov	r0, r8
   14b5e:	f7fd f9bd 	bl	11edc <_fflush_r>
   14b62:	2800      	cmp	r0, #0
   14b64:	d0e5      	beq.n	14b32 <__sfvwrite_r+0x1d6>
   14b66:	e778      	b.n	14a5a <__sfvwrite_r+0xfe>
   14b68:	6820      	ldr	r0, [r4, #0]
   14b6a:	46b3      	mov	fp, r6
   14b6c:	4632      	mov	r2, r6
   14b6e:	e74c      	b.n	14a0a <__sfvwrite_r+0xae>
   14b70:	4639      	mov	r1, r7
   14b72:	9201      	str	r2, [sp, #4]
   14b74:	f7f7 ffa6 	bl	cac4 <memmove>
   14b78:	9a01      	ldr	r2, [sp, #4]
   14b7a:	68a3      	ldr	r3, [r4, #8]
   14b7c:	1a9b      	subs	r3, r3, r2
   14b7e:	60a3      	str	r3, [r4, #8]
   14b80:	6823      	ldr	r3, [r4, #0]
   14b82:	4413      	add	r3, r2
   14b84:	6023      	str	r3, [r4, #0]
   14b86:	4693      	mov	fp, r2
   14b88:	e795      	b.n	14ab6 <__sfvwrite_r+0x15a>
   14b8a:	6823      	ldr	r3, [r4, #0]
   14b8c:	6921      	ldr	r1, [r4, #16]
   14b8e:	eba3 0b01 	sub.w	fp, r3, r1
   14b92:	6963      	ldr	r3, [r4, #20]
   14b94:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   14b98:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   14b9c:	f10b 0301 	add.w	r3, fp, #1
   14ba0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   14ba4:	4433      	add	r3, r6
   14ba6:	4553      	cmp	r3, sl
   14ba8:	4652      	mov	r2, sl
   14baa:	bf84      	itt	hi
   14bac:	469a      	movhi	sl, r3
   14bae:	4652      	movhi	r2, sl
   14bb0:	0543      	lsls	r3, r0, #21
   14bb2:	d52c      	bpl.n	14c0e <__sfvwrite_r+0x2b2>
   14bb4:	4611      	mov	r1, r2
   14bb6:	4640      	mov	r0, r8
   14bb8:	f7f6 f8d8 	bl	ad6c <_malloc_r>
   14bbc:	2800      	cmp	r0, #0
   14bbe:	d03b      	beq.n	14c38 <__sfvwrite_r+0x2dc>
   14bc0:	465a      	mov	r2, fp
   14bc2:	6921      	ldr	r1, [r4, #16]
   14bc4:	9001      	str	r0, [sp, #4]
   14bc6:	f7f3 fd85 	bl	86d4 <memcpy>
   14bca:	89a2      	ldrh	r2, [r4, #12]
   14bcc:	9b01      	ldr	r3, [sp, #4]
   14bce:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   14bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14bd6:	81a2      	strh	r2, [r4, #12]
   14bd8:	eb03 000b 	add.w	r0, r3, fp
   14bdc:	6123      	str	r3, [r4, #16]
   14bde:	ebaa 030b 	sub.w	r3, sl, fp
   14be2:	f8c4 a014 	str.w	sl, [r4, #20]
   14be6:	60a3      	str	r3, [r4, #8]
   14be8:	6020      	str	r0, [r4, #0]
   14bea:	46b3      	mov	fp, r6
   14bec:	4632      	mov	r2, r6
   14bee:	e70c      	b.n	14a0a <__sfvwrite_r+0xae>
   14bf0:	4639      	mov	r1, r7
   14bf2:	465a      	mov	r2, fp
   14bf4:	f7f7 ff66 	bl	cac4 <memmove>
   14bf8:	6823      	ldr	r3, [r4, #0]
   14bfa:	445b      	add	r3, fp
   14bfc:	6023      	str	r3, [r4, #0]
   14bfe:	4621      	mov	r1, r4
   14c00:	4640      	mov	r0, r8
   14c02:	f7fd f96b 	bl	11edc <_fflush_r>
   14c06:	2800      	cmp	r0, #0
   14c08:	f43f af55 	beq.w	14ab6 <__sfvwrite_r+0x15a>
   14c0c:	e725      	b.n	14a5a <__sfvwrite_r+0xfe>
   14c0e:	4640      	mov	r0, r8
   14c10:	f7f6 fb74 	bl	b2fc <_realloc_r>
   14c14:	4603      	mov	r3, r0
   14c16:	2800      	cmp	r0, #0
   14c18:	d1de      	bne.n	14bd8 <__sfvwrite_r+0x27c>
   14c1a:	6921      	ldr	r1, [r4, #16]
   14c1c:	4640      	mov	r0, r8
   14c1e:	f7f8 fc21 	bl	d464 <_free_r>
   14c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14c26:	220c      	movs	r2, #12
   14c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14c2c:	f8c8 2000 	str.w	r2, [r8]
   14c30:	e715      	b.n	14a5e <__sfvwrite_r+0x102>
   14c32:	1c72      	adds	r2, r6, #1
   14c34:	4691      	mov	r9, r2
   14c36:	e726      	b.n	14a86 <__sfvwrite_r+0x12a>
   14c38:	220c      	movs	r2, #12
   14c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14c3e:	f8c8 2000 	str.w	r2, [r8]
   14c42:	e70c      	b.n	14a5e <__sfvwrite_r+0x102>
   14c44:	f04f 30ff 	mov.w	r0, #4294967295
   14c48:	e6ba      	b.n	149c0 <__sfvwrite_r+0x64>
   14c4a:	bf00      	nop
   14c4c:	7ffffc00 	.word	0x7ffffc00

00014c50 <__submore>:
   14c50:	f101 0340 	add.w	r3, r1, #64	; 0x40
   14c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c58:	460c      	mov	r4, r1
   14c5a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   14c5c:	4299      	cmp	r1, r3
   14c5e:	d014      	beq.n	14c8a <__submore+0x3a>
   14c60:	6b66      	ldr	r6, [r4, #52]	; 0x34
   14c62:	0077      	lsls	r7, r6, #1
   14c64:	463a      	mov	r2, r7
   14c66:	f7f6 fb49 	bl	b2fc <_realloc_r>
   14c6a:	4605      	mov	r5, r0
   14c6c:	b340      	cbz	r0, 14cc0 <__submore+0x70>
   14c6e:	eb00 0806 	add.w	r8, r0, r6
   14c72:	4601      	mov	r1, r0
   14c74:	4632      	mov	r2, r6
   14c76:	4640      	mov	r0, r8
   14c78:	f7f3 fd2c 	bl	86d4 <memcpy>
   14c7c:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   14c80:	f8c4 8000 	str.w	r8, [r4]
   14c84:	2000      	movs	r0, #0
   14c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   14c8e:	f7f6 f86d 	bl	ad6c <_malloc_r>
   14c92:	b1a8      	cbz	r0, 14cc0 <__submore+0x70>
   14c94:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   14c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14c9c:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   14ca0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   14ca4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   14ca8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   14cac:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   14cb0:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   14cb4:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   14cb8:	6023      	str	r3, [r4, #0]
   14cba:	2000      	movs	r0, #0
   14cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14cc0:	f04f 30ff 	mov.w	r0, #4294967295
   14cc4:	e7df      	b.n	14c86 <__submore+0x36>
   14cc6:	bf00      	nop

00014cc8 <__swsetup_r>:
   14cc8:	b538      	push	{r3, r4, r5, lr}
   14cca:	4b31      	ldr	r3, [pc, #196]	; (14d90 <__swsetup_r+0xc8>)
   14ccc:	681b      	ldr	r3, [r3, #0]
   14cce:	4605      	mov	r5, r0
   14cd0:	460c      	mov	r4, r1
   14cd2:	b113      	cbz	r3, 14cda <__swsetup_r+0x12>
   14cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   14cd6:	2a00      	cmp	r2, #0
   14cd8:	d04e      	beq.n	14d78 <__swsetup_r+0xb0>
   14cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14cde:	0718      	lsls	r0, r3, #28
   14ce0:	b29a      	uxth	r2, r3
   14ce2:	d51c      	bpl.n	14d1e <__swsetup_r+0x56>
   14ce4:	6921      	ldr	r1, [r4, #16]
   14ce6:	b329      	cbz	r1, 14d34 <__swsetup_r+0x6c>
   14ce8:	f012 0001 	ands.w	r0, r2, #1
   14cec:	d007      	beq.n	14cfe <__swsetup_r+0x36>
   14cee:	2000      	movs	r0, #0
   14cf0:	60a0      	str	r0, [r4, #8]
   14cf2:	6960      	ldr	r0, [r4, #20]
   14cf4:	4240      	negs	r0, r0
   14cf6:	61a0      	str	r0, [r4, #24]
   14cf8:	b139      	cbz	r1, 14d0a <__swsetup_r+0x42>
   14cfa:	2000      	movs	r0, #0
   14cfc:	bd38      	pop	{r3, r4, r5, pc}
   14cfe:	0795      	lsls	r5, r2, #30
   14d00:	bf58      	it	pl
   14d02:	6960      	ldrpl	r0, [r4, #20]
   14d04:	60a0      	str	r0, [r4, #8]
   14d06:	2900      	cmp	r1, #0
   14d08:	d1f7      	bne.n	14cfa <__swsetup_r+0x32>
   14d0a:	0612      	lsls	r2, r2, #24
   14d0c:	bf58      	it	pl
   14d0e:	4608      	movpl	r0, r1
   14d10:	d5f4      	bpl.n	14cfc <__swsetup_r+0x34>
   14d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14d16:	81a3      	strh	r3, [r4, #12]
   14d18:	f04f 30ff 	mov.w	r0, #4294967295
   14d1c:	bd38      	pop	{r3, r4, r5, pc}
   14d1e:	06d1      	lsls	r1, r2, #27
   14d20:	d52e      	bpl.n	14d80 <__swsetup_r+0xb8>
   14d22:	0752      	lsls	r2, r2, #29
   14d24:	d414      	bmi.n	14d50 <__swsetup_r+0x88>
   14d26:	6921      	ldr	r1, [r4, #16]
   14d28:	f043 0308 	orr.w	r3, r3, #8
   14d2c:	81a3      	strh	r3, [r4, #12]
   14d2e:	b29a      	uxth	r2, r3
   14d30:	2900      	cmp	r1, #0
   14d32:	d1d9      	bne.n	14ce8 <__swsetup_r+0x20>
   14d34:	f402 7020 	and.w	r0, r2, #640	; 0x280
   14d38:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   14d3c:	d0d4      	beq.n	14ce8 <__swsetup_r+0x20>
   14d3e:	4621      	mov	r1, r4
   14d40:	4628      	mov	r0, r5
   14d42:	f000 f977 	bl	15034 <__smakebuf_r>
   14d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14d4a:	6921      	ldr	r1, [r4, #16]
   14d4c:	b29a      	uxth	r2, r3
   14d4e:	e7cb      	b.n	14ce8 <__swsetup_r+0x20>
   14d50:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14d52:	b151      	cbz	r1, 14d6a <__swsetup_r+0xa2>
   14d54:	f104 0240 	add.w	r2, r4, #64	; 0x40
   14d58:	4291      	cmp	r1, r2
   14d5a:	d004      	beq.n	14d66 <__swsetup_r+0x9e>
   14d5c:	4628      	mov	r0, r5
   14d5e:	f7f8 fb81 	bl	d464 <_free_r>
   14d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14d66:	2200      	movs	r2, #0
   14d68:	6322      	str	r2, [r4, #48]	; 0x30
   14d6a:	6921      	ldr	r1, [r4, #16]
   14d6c:	2200      	movs	r2, #0
   14d6e:	e9c4 1200 	strd	r1, r2, [r4]
   14d72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   14d76:	e7d7      	b.n	14d28 <__swsetup_r+0x60>
   14d78:	4618      	mov	r0, r3
   14d7a:	f7f7 fd2b 	bl	c7d4 <__sinit>
   14d7e:	e7ac      	b.n	14cda <__swsetup_r+0x12>
   14d80:	2209      	movs	r2, #9
   14d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14d86:	602a      	str	r2, [r5, #0]
   14d88:	f04f 30ff 	mov.w	r0, #4294967295
   14d8c:	81a3      	strh	r3, [r4, #12]
   14d8e:	bd38      	pop	{r3, r4, r5, pc}
   14d90:	20008e74 	.word	0x20008e74

00014d94 <__fputwc>:
   14d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14d98:	b082      	sub	sp, #8
   14d9a:	4682      	mov	sl, r0
   14d9c:	4688      	mov	r8, r1
   14d9e:	4614      	mov	r4, r2
   14da0:	f7f7 ffd6 	bl	cd50 <__locale_mb_cur_max>
   14da4:	2801      	cmp	r0, #1
   14da6:	d103      	bne.n	14db0 <__fputwc+0x1c>
   14da8:	f108 33ff 	add.w	r3, r8, #4294967295
   14dac:	2bfe      	cmp	r3, #254	; 0xfe
   14dae:	d936      	bls.n	14e1e <__fputwc+0x8a>
   14db0:	f10d 0904 	add.w	r9, sp, #4
   14db4:	4642      	mov	r2, r8
   14db6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   14dba:	4649      	mov	r1, r9
   14dbc:	4650      	mov	r0, sl
   14dbe:	f7fe fb29 	bl	13414 <_wcrtomb_r>
   14dc2:	1c42      	adds	r2, r0, #1
   14dc4:	4606      	mov	r6, r0
   14dc6:	d032      	beq.n	14e2e <__fputwc+0x9a>
   14dc8:	b320      	cbz	r0, 14e14 <__fputwc+0x80>
   14dca:	f89d c004 	ldrb.w	ip, [sp, #4]
   14dce:	2500      	movs	r5, #0
   14dd0:	e009      	b.n	14de6 <__fputwc+0x52>
   14dd2:	6823      	ldr	r3, [r4, #0]
   14dd4:	1c5a      	adds	r2, r3, #1
   14dd6:	6022      	str	r2, [r4, #0]
   14dd8:	f883 c000 	strb.w	ip, [r3]
   14ddc:	3501      	adds	r5, #1
   14dde:	42b5      	cmp	r5, r6
   14de0:	d218      	bcs.n	14e14 <__fputwc+0x80>
   14de2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   14de6:	68a3      	ldr	r3, [r4, #8]
   14de8:	3b01      	subs	r3, #1
   14dea:	2b00      	cmp	r3, #0
   14dec:	60a3      	str	r3, [r4, #8]
   14dee:	daf0      	bge.n	14dd2 <__fputwc+0x3e>
   14df0:	69a7      	ldr	r7, [r4, #24]
   14df2:	42bb      	cmp	r3, r7
   14df4:	4661      	mov	r1, ip
   14df6:	4622      	mov	r2, r4
   14df8:	4650      	mov	r0, sl
   14dfa:	db02      	blt.n	14e02 <__fputwc+0x6e>
   14dfc:	f1bc 0f0a 	cmp.w	ip, #10
   14e00:	d1e7      	bne.n	14dd2 <__fputwc+0x3e>
   14e02:	f000 f983 	bl	1510c <__swbuf_r>
   14e06:	1c43      	adds	r3, r0, #1
   14e08:	d1e8      	bne.n	14ddc <__fputwc+0x48>
   14e0a:	4606      	mov	r6, r0
   14e0c:	4630      	mov	r0, r6
   14e0e:	b002      	add	sp, #8
   14e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e14:	4646      	mov	r6, r8
   14e16:	4630      	mov	r0, r6
   14e18:	b002      	add	sp, #8
   14e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e1e:	fa5f fc88 	uxtb.w	ip, r8
   14e22:	f88d c004 	strb.w	ip, [sp, #4]
   14e26:	4606      	mov	r6, r0
   14e28:	f10d 0904 	add.w	r9, sp, #4
   14e2c:	e7cf      	b.n	14dce <__fputwc+0x3a>
   14e2e:	89a3      	ldrh	r3, [r4, #12]
   14e30:	4630      	mov	r0, r6
   14e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14e36:	81a3      	strh	r3, [r4, #12]
   14e38:	b002      	add	sp, #8
   14e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e3e:	bf00      	nop

00014e40 <_fputwc_r>:
   14e40:	b530      	push	{r4, r5, lr}
   14e42:	6e53      	ldr	r3, [r2, #100]	; 0x64
   14e44:	f013 0f01 	tst.w	r3, #1
   14e48:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   14e4c:	4614      	mov	r4, r2
   14e4e:	b083      	sub	sp, #12
   14e50:	4605      	mov	r5, r0
   14e52:	b29a      	uxth	r2, r3
   14e54:	d101      	bne.n	14e5a <_fputwc_r+0x1a>
   14e56:	0598      	lsls	r0, r3, #22
   14e58:	d51c      	bpl.n	14e94 <_fputwc_r+0x54>
   14e5a:	0490      	lsls	r0, r2, #18
   14e5c:	d406      	bmi.n	14e6c <_fputwc_r+0x2c>
   14e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14e60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   14e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14e68:	81a3      	strh	r3, [r4, #12]
   14e6a:	6662      	str	r2, [r4, #100]	; 0x64
   14e6c:	4622      	mov	r2, r4
   14e6e:	4628      	mov	r0, r5
   14e70:	f7ff ff90 	bl	14d94 <__fputwc>
   14e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14e76:	07da      	lsls	r2, r3, #31
   14e78:	4605      	mov	r5, r0
   14e7a:	d402      	bmi.n	14e82 <_fputwc_r+0x42>
   14e7c:	89a3      	ldrh	r3, [r4, #12]
   14e7e:	059b      	lsls	r3, r3, #22
   14e80:	d502      	bpl.n	14e88 <_fputwc_r+0x48>
   14e82:	4628      	mov	r0, r5
   14e84:	b003      	add	sp, #12
   14e86:	bd30      	pop	{r4, r5, pc}
   14e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14e8a:	f7f7 fffd 	bl	ce88 <__retarget_lock_release_recursive>
   14e8e:	4628      	mov	r0, r5
   14e90:	b003      	add	sp, #12
   14e92:	bd30      	pop	{r4, r5, pc}
   14e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14e96:	9101      	str	r1, [sp, #4]
   14e98:	f7f7 fff4 	bl	ce84 <__retarget_lock_acquire_recursive>
   14e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14ea0:	9901      	ldr	r1, [sp, #4]
   14ea2:	b29a      	uxth	r2, r3
   14ea4:	e7d9      	b.n	14e5a <_fputwc_r+0x1a>
   14ea6:	bf00      	nop

00014ea8 <_wcsnrtombs_l>:
   14ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eac:	b08b      	sub	sp, #44	; 0x2c
   14eae:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   14eb2:	9f14      	ldr	r7, [sp, #80]	; 0x50
   14eb4:	9103      	str	r1, [sp, #12]
   14eb6:	4681      	mov	r9, r0
   14eb8:	9205      	str	r2, [sp, #20]
   14eba:	461e      	mov	r6, r3
   14ebc:	f1b8 0f00 	cmp.w	r8, #0
   14ec0:	d05c      	beq.n	14f7c <_wcsnrtombs_l+0xd4>
   14ec2:	9b03      	ldr	r3, [sp, #12]
   14ec4:	2b00      	cmp	r3, #0
   14ec6:	d05e      	beq.n	14f86 <_wcsnrtombs_l+0xde>
   14ec8:	9b05      	ldr	r3, [sp, #20]
   14eca:	681d      	ldr	r5, [r3, #0]
   14ecc:	2f00      	cmp	r7, #0
   14ece:	d06a      	beq.n	14fa6 <_wcsnrtombs_l+0xfe>
   14ed0:	1e74      	subs	r4, r6, #1
   14ed2:	b34e      	cbz	r6, 14f28 <_wcsnrtombs_l+0x80>
   14ed4:	9b03      	ldr	r3, [sp, #12]
   14ed6:	9304      	str	r3, [sp, #16]
   14ed8:	3d04      	subs	r5, #4
   14eda:	2600      	movs	r6, #0
   14edc:	9501      	str	r5, [sp, #4]
   14ede:	e00b      	b.n	14ef8 <_wcsnrtombs_l+0x50>
   14ee0:	9b03      	ldr	r3, [sp, #12]
   14ee2:	bb2b      	cbnz	r3, 14f30 <_wcsnrtombs_l+0x88>
   14ee4:	9b01      	ldr	r3, [sp, #4]
   14ee6:	681a      	ldr	r2, [r3, #0]
   14ee8:	2a00      	cmp	r2, #0
   14eea:	d03a      	beq.n	14f62 <_wcsnrtombs_l+0xba>
   14eec:	45bc      	cmp	ip, r7
   14eee:	d25c      	bcs.n	14faa <_wcsnrtombs_l+0x102>
   14ef0:	3c01      	subs	r4, #1
   14ef2:	1c63      	adds	r3, r4, #1
   14ef4:	4666      	mov	r6, ip
   14ef6:	d017      	beq.n	14f28 <_wcsnrtombs_l+0x80>
   14ef8:	f8d8 3000 	ldr.w	r3, [r8]
   14efc:	9302      	str	r3, [sp, #8]
   14efe:	9b01      	ldr	r3, [sp, #4]
   14f00:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   14f04:	f853 2f04 	ldr.w	r2, [r3, #4]!
   14f08:	9301      	str	r3, [sp, #4]
   14f0a:	a907      	add	r1, sp, #28
   14f0c:	4643      	mov	r3, r8
   14f0e:	4648      	mov	r0, r9
   14f10:	f8d8 b004 	ldr.w	fp, [r8, #4]
   14f14:	47a8      	blx	r5
   14f16:	1c42      	adds	r2, r0, #1
   14f18:	d03a      	beq.n	14f90 <_wcsnrtombs_l+0xe8>
   14f1a:	eb00 0c06 	add.w	ip, r0, r6
   14f1e:	45bc      	cmp	ip, r7
   14f20:	d9de      	bls.n	14ee0 <_wcsnrtombs_l+0x38>
   14f22:	9b02      	ldr	r3, [sp, #8]
   14f24:	e9c8 3b00 	strd	r3, fp, [r8]
   14f28:	4630      	mov	r0, r6
   14f2a:	b00b      	add	sp, #44	; 0x2c
   14f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f30:	2800      	cmp	r0, #0
   14f32:	dd0e      	ble.n	14f52 <_wcsnrtombs_l+0xaa>
   14f34:	9b04      	ldr	r3, [sp, #16]
   14f36:	9d01      	ldr	r5, [sp, #4]
   14f38:	4418      	add	r0, r3
   14f3a:	1e5a      	subs	r2, r3, #1
   14f3c:	a907      	add	r1, sp, #28
   14f3e:	f100 3eff 	add.w	lr, r0, #4294967295
   14f42:	f811 3b01 	ldrb.w	r3, [r1], #1
   14f46:	f802 3f01 	strb.w	r3, [r2, #1]!
   14f4a:	4572      	cmp	r2, lr
   14f4c:	d1f9      	bne.n	14f42 <_wcsnrtombs_l+0x9a>
   14f4e:	9501      	str	r5, [sp, #4]
   14f50:	9004      	str	r0, [sp, #16]
   14f52:	9b05      	ldr	r3, [sp, #20]
   14f54:	681a      	ldr	r2, [r3, #0]
   14f56:	3204      	adds	r2, #4
   14f58:	601a      	str	r2, [r3, #0]
   14f5a:	9b01      	ldr	r3, [sp, #4]
   14f5c:	681a      	ldr	r2, [r3, #0]
   14f5e:	2a00      	cmp	r2, #0
   14f60:	d1c4      	bne.n	14eec <_wcsnrtombs_l+0x44>
   14f62:	9b03      	ldr	r3, [sp, #12]
   14f64:	b10b      	cbz	r3, 14f6a <_wcsnrtombs_l+0xc2>
   14f66:	9b05      	ldr	r3, [sp, #20]
   14f68:	601a      	str	r2, [r3, #0]
   14f6a:	f10c 36ff 	add.w	r6, ip, #4294967295
   14f6e:	2200      	movs	r2, #0
   14f70:	4630      	mov	r0, r6
   14f72:	f8c8 2000 	str.w	r2, [r8]
   14f76:	b00b      	add	sp, #44	; 0x2c
   14f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f7c:	9b03      	ldr	r3, [sp, #12]
   14f7e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   14f82:	2b00      	cmp	r3, #0
   14f84:	d1a0      	bne.n	14ec8 <_wcsnrtombs_l+0x20>
   14f86:	9b05      	ldr	r3, [sp, #20]
   14f88:	f04f 37ff 	mov.w	r7, #4294967295
   14f8c:	681d      	ldr	r5, [r3, #0]
   14f8e:	e79f      	b.n	14ed0 <_wcsnrtombs_l+0x28>
   14f90:	4606      	mov	r6, r0
   14f92:	218a      	movs	r1, #138	; 0x8a
   14f94:	2200      	movs	r2, #0
   14f96:	4630      	mov	r0, r6
   14f98:	f8c9 1000 	str.w	r1, [r9]
   14f9c:	f8c8 2000 	str.w	r2, [r8]
   14fa0:	b00b      	add	sp, #44	; 0x2c
   14fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fa6:	463e      	mov	r6, r7
   14fa8:	e7be      	b.n	14f28 <_wcsnrtombs_l+0x80>
   14faa:	4666      	mov	r6, ip
   14fac:	e7bc      	b.n	14f28 <_wcsnrtombs_l+0x80>
   14fae:	bf00      	nop

00014fb0 <_wcsnrtombs_r>:
   14fb0:	b510      	push	{r4, lr}
   14fb2:	b084      	sub	sp, #16
   14fb4:	4c05      	ldr	r4, [pc, #20]	; (14fcc <_wcsnrtombs_r+0x1c>)
   14fb6:	9806      	ldr	r0, [sp, #24]
   14fb8:	9000      	str	r0, [sp, #0]
   14fba:	9807      	ldr	r0, [sp, #28]
   14fbc:	9001      	str	r0, [sp, #4]
   14fbe:	4804      	ldr	r0, [pc, #16]	; (14fd0 <_wcsnrtombs_r+0x20>)
   14fc0:	6800      	ldr	r0, [r0, #0]
   14fc2:	9402      	str	r4, [sp, #8]
   14fc4:	f7ff ff70 	bl	14ea8 <_wcsnrtombs_l>
   14fc8:	b004      	add	sp, #16
   14fca:	bd10      	pop	{r4, pc}
   14fcc:	200088ec 	.word	0x200088ec
   14fd0:	20008e74 	.word	0x20008e74

00014fd4 <category>:
   14fd4:	4b15      	ldr	r3, [pc, #84]	; (1502c <category+0x58>)
   14fd6:	4298      	cmp	r0, r3
   14fd8:	d823      	bhi.n	15022 <category+0x4e>
   14fda:	b570      	push	{r4, r5, r6, lr}
   14fdc:	4e14      	ldr	r6, [pc, #80]	; (15030 <category+0x5c>)
   14fde:	f04f 0e00 	mov.w	lr, #0
   14fe2:	f640 04db 	movw	r4, #2267	; 0x8db
   14fe6:	e003      	b.n	14ff0 <category+0x1c>
   14fe8:	f102 0e01 	add.w	lr, r2, #1
   14fec:	45a6      	cmp	lr, r4
   14fee:	dc16      	bgt.n	1501e <category+0x4a>
   14ff0:	eb04 020e 	add.w	r2, r4, lr
   14ff4:	f022 0301 	bic.w	r3, r2, #1
   14ff8:	eb03 0362 	add.w	r3, r3, r2, asr #1
   14ffc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   15000:	1052      	asrs	r2, r2, #1
   15002:	7859      	ldrb	r1, [r3, #1]
   15004:	885d      	ldrh	r5, [r3, #2]
   15006:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   1500a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   1500e:	448c      	add	ip, r1
   15010:	4560      	cmp	r0, ip
   15012:	d8e9      	bhi.n	14fe8 <category+0x14>
   15014:	4288      	cmp	r0, r1
   15016:	d206      	bcs.n	15026 <category+0x52>
   15018:	1e54      	subs	r4, r2, #1
   1501a:	45a6      	cmp	lr, r4
   1501c:	dde8      	ble.n	14ff0 <category+0x1c>
   1501e:	20ff      	movs	r0, #255	; 0xff
   15020:	bd70      	pop	{r4, r5, r6, pc}
   15022:	20ff      	movs	r0, #255	; 0xff
   15024:	4770      	bx	lr
   15026:	7818      	ldrb	r0, [r3, #0]
   15028:	bd70      	pop	{r4, r5, r6, pc}
   1502a:	bf00      	nop
   1502c:	000e01ef 	.word	0x000e01ef
   15030:	200029c0 	.word	0x200029c0

00015034 <__smakebuf_r>:
   15034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15038:	898b      	ldrh	r3, [r1, #12]
   1503a:	460c      	mov	r4, r1
   1503c:	0799      	lsls	r1, r3, #30
   1503e:	b096      	sub	sp, #88	; 0x58
   15040:	d508      	bpl.n	15054 <__smakebuf_r+0x20>
   15042:	f104 0343 	add.w	r3, r4, #67	; 0x43
   15046:	2201      	movs	r2, #1
   15048:	e9c4 3204 	strd	r3, r2, [r4, #16]
   1504c:	6023      	str	r3, [r4, #0]
   1504e:	b016      	add	sp, #88	; 0x58
   15050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   15058:	2900      	cmp	r1, #0
   1505a:	4606      	mov	r6, r0
   1505c:	db25      	blt.n	150aa <__smakebuf_r+0x76>
   1505e:	466a      	mov	r2, sp
   15060:	f000 f8ac 	bl	151bc <_fstat_r>
   15064:	2800      	cmp	r0, #0
   15066:	db1f      	blt.n	150a8 <__smakebuf_r+0x74>
   15068:	9d01      	ldr	r5, [sp, #4]
   1506a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1506e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   15072:	fab5 f585 	clz	r5, r5
   15076:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1507a:	096d      	lsrs	r5, r5, #5
   1507c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   15080:	4641      	mov	r1, r8
   15082:	4630      	mov	r0, r6
   15084:	f7f5 fe72 	bl	ad6c <_malloc_r>
   15088:	b1e0      	cbz	r0, 150c4 <__smakebuf_r+0x90>
   1508a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1508e:	f8c4 8014 	str.w	r8, [r4, #20]
   15092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15096:	6020      	str	r0, [r4, #0]
   15098:	6120      	str	r0, [r4, #16]
   1509a:	81a3      	strh	r3, [r4, #12]
   1509c:	bb35      	cbnz	r5, 150ec <__smakebuf_r+0xb8>
   1509e:	433b      	orrs	r3, r7
   150a0:	81a3      	strh	r3, [r4, #12]
   150a2:	b016      	add	sp, #88	; 0x58
   150a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150a8:	89a3      	ldrh	r3, [r4, #12]
   150aa:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   150ae:	d019      	beq.n	150e4 <__smakebuf_r+0xb0>
   150b0:	f04f 0840 	mov.w	r8, #64	; 0x40
   150b4:	2500      	movs	r5, #0
   150b6:	4641      	mov	r1, r8
   150b8:	4630      	mov	r0, r6
   150ba:	462f      	mov	r7, r5
   150bc:	f7f5 fe56 	bl	ad6c <_malloc_r>
   150c0:	2800      	cmp	r0, #0
   150c2:	d1e2      	bne.n	1508a <__smakebuf_r+0x56>
   150c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   150c8:	059a      	lsls	r2, r3, #22
   150ca:	d4c0      	bmi.n	1504e <__smakebuf_r+0x1a>
   150cc:	f023 0303 	bic.w	r3, r3, #3
   150d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   150d4:	f043 0302 	orr.w	r3, r3, #2
   150d8:	2101      	movs	r1, #1
   150da:	e9c4 2104 	strd	r2, r1, [r4, #16]
   150de:	81a3      	strh	r3, [r4, #12]
   150e0:	6022      	str	r2, [r4, #0]
   150e2:	e7b4      	b.n	1504e <__smakebuf_r+0x1a>
   150e4:	f44f 6880 	mov.w	r8, #1024	; 0x400
   150e8:	462f      	mov	r7, r5
   150ea:	e7c9      	b.n	15080 <__smakebuf_r+0x4c>
   150ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   150f0:	4630      	mov	r0, r6
   150f2:	f000 f879 	bl	151e8 <_isatty_r>
   150f6:	b910      	cbnz	r0, 150fe <__smakebuf_r+0xca>
   150f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   150fc:	e7cf      	b.n	1509e <__smakebuf_r+0x6a>
   150fe:	89a3      	ldrh	r3, [r4, #12]
   15100:	f023 0303 	bic.w	r3, r3, #3
   15104:	f043 0301 	orr.w	r3, r3, #1
   15108:	b21b      	sxth	r3, r3
   1510a:	e7c8      	b.n	1509e <__smakebuf_r+0x6a>

0001510c <__swbuf_r>:
   1510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1510e:	460d      	mov	r5, r1
   15110:	4614      	mov	r4, r2
   15112:	4606      	mov	r6, r0
   15114:	b110      	cbz	r0, 1511c <__swbuf_r+0x10>
   15116:	6b43      	ldr	r3, [r0, #52]	; 0x34
   15118:	2b00      	cmp	r3, #0
   1511a:	d04c      	beq.n	151b6 <__swbuf_r+0xaa>
   1511c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15120:	69a3      	ldr	r3, [r4, #24]
   15122:	60a3      	str	r3, [r4, #8]
   15124:	0717      	lsls	r7, r2, #28
   15126:	b290      	uxth	r0, r2
   15128:	d51b      	bpl.n	15162 <__swbuf_r+0x56>
   1512a:	6923      	ldr	r3, [r4, #16]
   1512c:	b1cb      	cbz	r3, 15162 <__swbuf_r+0x56>
   1512e:	b2ed      	uxtb	r5, r5
   15130:	0481      	lsls	r1, r0, #18
   15132:	462f      	mov	r7, r5
   15134:	d522      	bpl.n	1517c <__swbuf_r+0x70>
   15136:	6822      	ldr	r2, [r4, #0]
   15138:	6961      	ldr	r1, [r4, #20]
   1513a:	1ad3      	subs	r3, r2, r3
   1513c:	4299      	cmp	r1, r3
   1513e:	dd29      	ble.n	15194 <__swbuf_r+0x88>
   15140:	3301      	adds	r3, #1
   15142:	68a1      	ldr	r1, [r4, #8]
   15144:	3901      	subs	r1, #1
   15146:	60a1      	str	r1, [r4, #8]
   15148:	1c51      	adds	r1, r2, #1
   1514a:	6021      	str	r1, [r4, #0]
   1514c:	7015      	strb	r5, [r2, #0]
   1514e:	6962      	ldr	r2, [r4, #20]
   15150:	429a      	cmp	r2, r3
   15152:	d027      	beq.n	151a4 <__swbuf_r+0x98>
   15154:	89a3      	ldrh	r3, [r4, #12]
   15156:	07db      	lsls	r3, r3, #31
   15158:	d501      	bpl.n	1515e <__swbuf_r+0x52>
   1515a:	2d0a      	cmp	r5, #10
   1515c:	d022      	beq.n	151a4 <__swbuf_r+0x98>
   1515e:	4638      	mov	r0, r7
   15160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15162:	4621      	mov	r1, r4
   15164:	4630      	mov	r0, r6
   15166:	f7ff fdaf 	bl	14cc8 <__swsetup_r>
   1516a:	bb08      	cbnz	r0, 151b0 <__swbuf_r+0xa4>
   1516c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15170:	6923      	ldr	r3, [r4, #16]
   15172:	b290      	uxth	r0, r2
   15174:	b2ed      	uxtb	r5, r5
   15176:	0481      	lsls	r1, r0, #18
   15178:	462f      	mov	r7, r5
   1517a:	d4dc      	bmi.n	15136 <__swbuf_r+0x2a>
   1517c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   15180:	81a2      	strh	r2, [r4, #12]
   15182:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15184:	6961      	ldr	r1, [r4, #20]
   15186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1518a:	6662      	str	r2, [r4, #100]	; 0x64
   1518c:	6822      	ldr	r2, [r4, #0]
   1518e:	1ad3      	subs	r3, r2, r3
   15190:	4299      	cmp	r1, r3
   15192:	dcd5      	bgt.n	15140 <__swbuf_r+0x34>
   15194:	4621      	mov	r1, r4
   15196:	4630      	mov	r0, r6
   15198:	f7fc fea0 	bl	11edc <_fflush_r>
   1519c:	b940      	cbnz	r0, 151b0 <__swbuf_r+0xa4>
   1519e:	6822      	ldr	r2, [r4, #0]
   151a0:	2301      	movs	r3, #1
   151a2:	e7ce      	b.n	15142 <__swbuf_r+0x36>
   151a4:	4621      	mov	r1, r4
   151a6:	4630      	mov	r0, r6
   151a8:	f7fc fe98 	bl	11edc <_fflush_r>
   151ac:	2800      	cmp	r0, #0
   151ae:	d0d6      	beq.n	1515e <__swbuf_r+0x52>
   151b0:	f04f 37ff 	mov.w	r7, #4294967295
   151b4:	e7d3      	b.n	1515e <__swbuf_r+0x52>
   151b6:	f7f7 fb0d 	bl	c7d4 <__sinit>
   151ba:	e7af      	b.n	1511c <__swbuf_r+0x10>

000151bc <_fstat_r>:
   151bc:	b570      	push	{r4, r5, r6, lr}
   151be:	460c      	mov	r4, r1
   151c0:	4d08      	ldr	r5, [pc, #32]	; (151e4 <_fstat_r+0x28>)
   151c2:	4603      	mov	r3, r0
   151c4:	2600      	movs	r6, #0
   151c6:	4620      	mov	r0, r4
   151c8:	4611      	mov	r1, r2
   151ca:	461c      	mov	r4, r3
   151cc:	602e      	str	r6, [r5, #0]
   151ce:	f7f3 fc43 	bl	8a58 <_fstat>
   151d2:	1c43      	adds	r3, r0, #1
   151d4:	d000      	beq.n	151d8 <_fstat_r+0x1c>
   151d6:	bd70      	pop	{r4, r5, r6, pc}
   151d8:	682b      	ldr	r3, [r5, #0]
   151da:	2b00      	cmp	r3, #0
   151dc:	d0fb      	beq.n	151d6 <_fstat_r+0x1a>
   151de:	6023      	str	r3, [r4, #0]
   151e0:	bd70      	pop	{r4, r5, r6, pc}
   151e2:	bf00      	nop
   151e4:	200216e4 	.word	0x200216e4

000151e8 <_isatty_r>:
   151e8:	b538      	push	{r3, r4, r5, lr}
   151ea:	4d07      	ldr	r5, [pc, #28]	; (15208 <_isatty_r+0x20>)
   151ec:	2200      	movs	r2, #0
   151ee:	4604      	mov	r4, r0
   151f0:	4608      	mov	r0, r1
   151f2:	602a      	str	r2, [r5, #0]
   151f4:	f7f3 fc36 	bl	8a64 <_isatty>
   151f8:	1c43      	adds	r3, r0, #1
   151fa:	d000      	beq.n	151fe <_isatty_r+0x16>
   151fc:	bd38      	pop	{r3, r4, r5, pc}
   151fe:	682b      	ldr	r3, [r5, #0]
   15200:	2b00      	cmp	r3, #0
   15202:	d0fb      	beq.n	151fc <_isatty_r+0x14>
   15204:	6023      	str	r3, [r4, #0]
   15206:	bd38      	pop	{r3, r4, r5, pc}
   15208:	200216e4 	.word	0x200216e4

0001520c <__aeabi_drsub>:
   1520c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   15210:	e002      	b.n	15218 <__adddf3>
   15212:	bf00      	nop

00015214 <__aeabi_dsub>:
   15214:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00015218 <__adddf3>:
   15218:	b530      	push	{r4, r5, lr}
   1521a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1521e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   15222:	ea94 0f05 	teq	r4, r5
   15226:	bf08      	it	eq
   15228:	ea90 0f02 	teqeq	r0, r2
   1522c:	bf1f      	itttt	ne
   1522e:	ea54 0c00 	orrsne.w	ip, r4, r0
   15232:	ea55 0c02 	orrsne.w	ip, r5, r2
   15236:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1523a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1523e:	f000 80e2 	beq.w	15406 <__adddf3+0x1ee>
   15242:	ea4f 5454 	mov.w	r4, r4, lsr #21
   15246:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1524a:	bfb8      	it	lt
   1524c:	426d      	neglt	r5, r5
   1524e:	dd0c      	ble.n	1526a <__adddf3+0x52>
   15250:	442c      	add	r4, r5
   15252:	ea80 0202 	eor.w	r2, r0, r2
   15256:	ea81 0303 	eor.w	r3, r1, r3
   1525a:	ea82 0000 	eor.w	r0, r2, r0
   1525e:	ea83 0101 	eor.w	r1, r3, r1
   15262:	ea80 0202 	eor.w	r2, r0, r2
   15266:	ea81 0303 	eor.w	r3, r1, r3
   1526a:	2d36      	cmp	r5, #54	; 0x36
   1526c:	bf88      	it	hi
   1526e:	bd30      	pophi	{r4, r5, pc}
   15270:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   15274:	ea4f 3101 	mov.w	r1, r1, lsl #12
   15278:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1527c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   15280:	d002      	beq.n	15288 <__adddf3+0x70>
   15282:	4240      	negs	r0, r0
   15284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15288:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1528c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   15290:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   15294:	d002      	beq.n	1529c <__adddf3+0x84>
   15296:	4252      	negs	r2, r2
   15298:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1529c:	ea94 0f05 	teq	r4, r5
   152a0:	f000 80a7 	beq.w	153f2 <__adddf3+0x1da>
   152a4:	f1a4 0401 	sub.w	r4, r4, #1
   152a8:	f1d5 0e20 	rsbs	lr, r5, #32
   152ac:	db0d      	blt.n	152ca <__adddf3+0xb2>
   152ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   152b2:	fa22 f205 	lsr.w	r2, r2, r5
   152b6:	1880      	adds	r0, r0, r2
   152b8:	f141 0100 	adc.w	r1, r1, #0
   152bc:	fa03 f20e 	lsl.w	r2, r3, lr
   152c0:	1880      	adds	r0, r0, r2
   152c2:	fa43 f305 	asr.w	r3, r3, r5
   152c6:	4159      	adcs	r1, r3
   152c8:	e00e      	b.n	152e8 <__adddf3+0xd0>
   152ca:	f1a5 0520 	sub.w	r5, r5, #32
   152ce:	f10e 0e20 	add.w	lr, lr, #32
   152d2:	2a01      	cmp	r2, #1
   152d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   152d8:	bf28      	it	cs
   152da:	f04c 0c02 	orrcs.w	ip, ip, #2
   152de:	fa43 f305 	asr.w	r3, r3, r5
   152e2:	18c0      	adds	r0, r0, r3
   152e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   152e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   152ec:	d507      	bpl.n	152fe <__adddf3+0xe6>
   152ee:	f04f 0e00 	mov.w	lr, #0
   152f2:	f1dc 0c00 	rsbs	ip, ip, #0
   152f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   152fa:	eb6e 0101 	sbc.w	r1, lr, r1
   152fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   15302:	d31b      	bcc.n	1533c <__adddf3+0x124>
   15304:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   15308:	d30c      	bcc.n	15324 <__adddf3+0x10c>
   1530a:	0849      	lsrs	r1, r1, #1
   1530c:	ea5f 0030 	movs.w	r0, r0, rrx
   15310:	ea4f 0c3c 	mov.w	ip, ip, rrx
   15314:	f104 0401 	add.w	r4, r4, #1
   15318:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1531c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   15320:	f080 809a 	bcs.w	15458 <__adddf3+0x240>
   15324:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   15328:	bf08      	it	eq
   1532a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1532e:	f150 0000 	adcs.w	r0, r0, #0
   15332:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   15336:	ea41 0105 	orr.w	r1, r1, r5
   1533a:	bd30      	pop	{r4, r5, pc}
   1533c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   15340:	4140      	adcs	r0, r0
   15342:	eb41 0101 	adc.w	r1, r1, r1
   15346:	3c01      	subs	r4, #1
   15348:	bf28      	it	cs
   1534a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1534e:	d2e9      	bcs.n	15324 <__adddf3+0x10c>
   15350:	f091 0f00 	teq	r1, #0
   15354:	bf04      	itt	eq
   15356:	4601      	moveq	r1, r0
   15358:	2000      	moveq	r0, #0
   1535a:	fab1 f381 	clz	r3, r1
   1535e:	bf08      	it	eq
   15360:	3320      	addeq	r3, #32
   15362:	f1a3 030b 	sub.w	r3, r3, #11
   15366:	f1b3 0220 	subs.w	r2, r3, #32
   1536a:	da0c      	bge.n	15386 <__adddf3+0x16e>
   1536c:	320c      	adds	r2, #12
   1536e:	dd08      	ble.n	15382 <__adddf3+0x16a>
   15370:	f102 0c14 	add.w	ip, r2, #20
   15374:	f1c2 020c 	rsb	r2, r2, #12
   15378:	fa01 f00c 	lsl.w	r0, r1, ip
   1537c:	fa21 f102 	lsr.w	r1, r1, r2
   15380:	e00c      	b.n	1539c <__adddf3+0x184>
   15382:	f102 0214 	add.w	r2, r2, #20
   15386:	bfd8      	it	le
   15388:	f1c2 0c20 	rsble	ip, r2, #32
   1538c:	fa01 f102 	lsl.w	r1, r1, r2
   15390:	fa20 fc0c 	lsr.w	ip, r0, ip
   15394:	bfdc      	itt	le
   15396:	ea41 010c 	orrle.w	r1, r1, ip
   1539a:	4090      	lslle	r0, r2
   1539c:	1ae4      	subs	r4, r4, r3
   1539e:	bfa2      	ittt	ge
   153a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   153a4:	4329      	orrge	r1, r5
   153a6:	bd30      	popge	{r4, r5, pc}
   153a8:	ea6f 0404 	mvn.w	r4, r4
   153ac:	3c1f      	subs	r4, #31
   153ae:	da1c      	bge.n	153ea <__adddf3+0x1d2>
   153b0:	340c      	adds	r4, #12
   153b2:	dc0e      	bgt.n	153d2 <__adddf3+0x1ba>
   153b4:	f104 0414 	add.w	r4, r4, #20
   153b8:	f1c4 0220 	rsb	r2, r4, #32
   153bc:	fa20 f004 	lsr.w	r0, r0, r4
   153c0:	fa01 f302 	lsl.w	r3, r1, r2
   153c4:	ea40 0003 	orr.w	r0, r0, r3
   153c8:	fa21 f304 	lsr.w	r3, r1, r4
   153cc:	ea45 0103 	orr.w	r1, r5, r3
   153d0:	bd30      	pop	{r4, r5, pc}
   153d2:	f1c4 040c 	rsb	r4, r4, #12
   153d6:	f1c4 0220 	rsb	r2, r4, #32
   153da:	fa20 f002 	lsr.w	r0, r0, r2
   153de:	fa01 f304 	lsl.w	r3, r1, r4
   153e2:	ea40 0003 	orr.w	r0, r0, r3
   153e6:	4629      	mov	r1, r5
   153e8:	bd30      	pop	{r4, r5, pc}
   153ea:	fa21 f004 	lsr.w	r0, r1, r4
   153ee:	4629      	mov	r1, r5
   153f0:	bd30      	pop	{r4, r5, pc}
   153f2:	f094 0f00 	teq	r4, #0
   153f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   153fa:	bf06      	itte	eq
   153fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   15400:	3401      	addeq	r4, #1
   15402:	3d01      	subne	r5, #1
   15404:	e74e      	b.n	152a4 <__adddf3+0x8c>
   15406:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1540a:	bf18      	it	ne
   1540c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   15410:	d029      	beq.n	15466 <__adddf3+0x24e>
   15412:	ea94 0f05 	teq	r4, r5
   15416:	bf08      	it	eq
   15418:	ea90 0f02 	teqeq	r0, r2
   1541c:	d005      	beq.n	1542a <__adddf3+0x212>
   1541e:	ea54 0c00 	orrs.w	ip, r4, r0
   15422:	bf04      	itt	eq
   15424:	4619      	moveq	r1, r3
   15426:	4610      	moveq	r0, r2
   15428:	bd30      	pop	{r4, r5, pc}
   1542a:	ea91 0f03 	teq	r1, r3
   1542e:	bf1e      	ittt	ne
   15430:	2100      	movne	r1, #0
   15432:	2000      	movne	r0, #0
   15434:	bd30      	popne	{r4, r5, pc}
   15436:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1543a:	d105      	bne.n	15448 <__adddf3+0x230>
   1543c:	0040      	lsls	r0, r0, #1
   1543e:	4149      	adcs	r1, r1
   15440:	bf28      	it	cs
   15442:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   15446:	bd30      	pop	{r4, r5, pc}
   15448:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1544c:	bf3c      	itt	cc
   1544e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   15452:	bd30      	popcc	{r4, r5, pc}
   15454:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15458:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1545c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   15460:	f04f 0000 	mov.w	r0, #0
   15464:	bd30      	pop	{r4, r5, pc}
   15466:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1546a:	bf1a      	itte	ne
   1546c:	4619      	movne	r1, r3
   1546e:	4610      	movne	r0, r2
   15470:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   15474:	bf1c      	itt	ne
   15476:	460b      	movne	r3, r1
   15478:	4602      	movne	r2, r0
   1547a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1547e:	bf06      	itte	eq
   15480:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   15484:	ea91 0f03 	teqeq	r1, r3
   15488:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1548c:	bd30      	pop	{r4, r5, pc}
   1548e:	bf00      	nop

00015490 <__aeabi_ui2d>:
   15490:	f090 0f00 	teq	r0, #0
   15494:	bf04      	itt	eq
   15496:	2100      	moveq	r1, #0
   15498:	4770      	bxeq	lr
   1549a:	b530      	push	{r4, r5, lr}
   1549c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   154a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   154a4:	f04f 0500 	mov.w	r5, #0
   154a8:	f04f 0100 	mov.w	r1, #0
   154ac:	e750      	b.n	15350 <__adddf3+0x138>
   154ae:	bf00      	nop

000154b0 <__aeabi_i2d>:
   154b0:	f090 0f00 	teq	r0, #0
   154b4:	bf04      	itt	eq
   154b6:	2100      	moveq	r1, #0
   154b8:	4770      	bxeq	lr
   154ba:	b530      	push	{r4, r5, lr}
   154bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   154c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   154c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   154c8:	bf48      	it	mi
   154ca:	4240      	negmi	r0, r0
   154cc:	f04f 0100 	mov.w	r1, #0
   154d0:	e73e      	b.n	15350 <__adddf3+0x138>
   154d2:	bf00      	nop

000154d4 <__aeabi_f2d>:
   154d4:	0042      	lsls	r2, r0, #1
   154d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   154da:	ea4f 0131 	mov.w	r1, r1, rrx
   154de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   154e2:	bf1f      	itttt	ne
   154e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   154e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   154ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   154f0:	4770      	bxne	lr
   154f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   154f6:	bf08      	it	eq
   154f8:	4770      	bxeq	lr
   154fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   154fe:	bf04      	itt	eq
   15500:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   15504:	4770      	bxeq	lr
   15506:	b530      	push	{r4, r5, lr}
   15508:	f44f 7460 	mov.w	r4, #896	; 0x380
   1550c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15510:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15514:	e71c      	b.n	15350 <__adddf3+0x138>
   15516:	bf00      	nop

00015518 <__aeabi_ul2d>:
   15518:	ea50 0201 	orrs.w	r2, r0, r1
   1551c:	bf08      	it	eq
   1551e:	4770      	bxeq	lr
   15520:	b530      	push	{r4, r5, lr}
   15522:	f04f 0500 	mov.w	r5, #0
   15526:	e00a      	b.n	1553e <__aeabi_l2d+0x16>

00015528 <__aeabi_l2d>:
   15528:	ea50 0201 	orrs.w	r2, r0, r1
   1552c:	bf08      	it	eq
   1552e:	4770      	bxeq	lr
   15530:	b530      	push	{r4, r5, lr}
   15532:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   15536:	d502      	bpl.n	1553e <__aeabi_l2d+0x16>
   15538:	4240      	negs	r0, r0
   1553a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1553e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15542:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15546:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1554a:	f43f aed8 	beq.w	152fe <__adddf3+0xe6>
   1554e:	f04f 0203 	mov.w	r2, #3
   15552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   15556:	bf18      	it	ne
   15558:	3203      	addne	r2, #3
   1555a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1555e:	bf18      	it	ne
   15560:	3203      	addne	r2, #3
   15562:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   15566:	f1c2 0320 	rsb	r3, r2, #32
   1556a:	fa00 fc03 	lsl.w	ip, r0, r3
   1556e:	fa20 f002 	lsr.w	r0, r0, r2
   15572:	fa01 fe03 	lsl.w	lr, r1, r3
   15576:	ea40 000e 	orr.w	r0, r0, lr
   1557a:	fa21 f102 	lsr.w	r1, r1, r2
   1557e:	4414      	add	r4, r2
   15580:	e6bd      	b.n	152fe <__adddf3+0xe6>
   15582:	bf00      	nop

00015584 <__aeabi_d2lz>:
   15584:	b508      	push	{r3, lr}
   15586:	4602      	mov	r2, r0
   15588:	460b      	mov	r3, r1
   1558a:	ec43 2b17 	vmov	d7, r2, r3
   1558e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   15592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15596:	d403      	bmi.n	155a0 <__aeabi_d2lz+0x1c>
   15598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1559c:	f000 b80c 	b.w	155b8 <__aeabi_d2ulz>
   155a0:	eeb1 7b47 	vneg.f64	d7, d7
   155a4:	ec51 0b17 	vmov	r0, r1, d7
   155a8:	f000 f806 	bl	155b8 <__aeabi_d2ulz>
   155ac:	4240      	negs	r0, r0
   155ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   155b2:	bd08      	pop	{r3, pc}
   155b4:	0000      	movs	r0, r0
	...

000155b8 <__aeabi_d2ulz>:
   155b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 155e8 <__aeabi_d2ulz+0x30>
   155bc:	ec41 0b17 	vmov	d7, r0, r1
   155c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 155f0 <__aeabi_d2ulz+0x38>
   155c4:	ee27 6b06 	vmul.f64	d6, d7, d6
   155c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   155cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   155d0:	eea4 7b45 	vfms.f64	d7, d4, d5
   155d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   155d8:	ee16 1a10 	vmov	r1, s12
   155dc:	ee17 0a90 	vmov	r0, s15
   155e0:	4770      	bx	lr
   155e2:	bf00      	nop
   155e4:	f3af 8000 	nop.w
   155e8:	00000000 	.word	0x00000000
   155ec:	3df00000 	.word	0x3df00000
   155f0:	00000000 	.word	0x00000000
   155f4:	41f00000 	.word	0x41f00000

000155f8 <___ZN16CrashReportClasscvbEv_veneer>:
   155f8:	f85f f000 	ldr.w	pc, [pc]	; 155fc <___ZN16CrashReportClasscvbEv_veneer+0x4>
   155fc:	60001eb5 	.word	0x60001eb5

00015600 <___reboot_Teensyduino__veneer>:
   15600:	f85f f000 	ldr.w	pc, [pc]	; 15604 <___reboot_Teensyduino__veneer+0x4>
   15604:	60002611 	.word	0x60002611

00015608 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   15608:	f85f f000 	ldr.w	pc, [pc]	; 1560c <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   1560c:	60001655 	.word	0x60001655

00015610 <___init_veneer>:
   15610:	f85f f000 	ldr.w	pc, [pc]	; 15614 <___init_veneer+0x4>
   15614:	600026b9 	.word	0x600026b9

00015618 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   15618:	f85f f000 	ldr.w	pc, [pc]	; 1561c <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1561c:	6000171d 	.word	0x6000171d

Disassembly of section .fini:

00015620 <_fini>:
   15620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15622:	bf00      	nop

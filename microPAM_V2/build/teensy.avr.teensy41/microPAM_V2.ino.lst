
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\B6A2B96C86D1458F5F30CD00E995713A/microPAM_V2.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 fd0c 	bl	60001e48 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 fcb8 	bl	60001e58 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 feda 	bl	600022d4 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f001 f87d 	bl	60002630 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 fce8 	bl	60001f50 <configure_external_ram>
	analog_init();
60001580:	f001 f80c 	bl	6000259c <analog_init>
	pwm_init();
60001584:	f001 f864 	bl	60002650 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fed2 	bl	60002330 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 fc5e 	bl	60001e4c <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 ff63 	bl	60002460 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 fc57 	bl	60001e54 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 fc53 	bl	60001e50 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f001 f839 	bl	60002620 <____libc_init_array_veneer>
	main();
600015ae:	f001 f83b 	bl	60002628 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	000144a8 	.word	0x000144a8
600015c0:	60002870 	.word	0x60002870
600015c4:	00000000 	.word	0x00000000
600015c8:	20008ec0 	.word	0x20008ec0
600015cc:	60016d1c 	.word	0x60016d1c
600015d0:	20000000 	.word	0x20000000
600015d4:	2001ece0 	.word	0x2001ece0
600015d8:	20008ec0 	.word	0x20008ec0
600015dc:	20008c00 	.word	0x20008c00
600015e0:	00008205 	.word	0x00008205
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	00007805 	.word	0x00007805
600015f4:	2001ec50 	.word	0x2001ec50
600015f8:	00007809 	.word	0x00007809
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	016e3600 	.word	0x016e3600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	2001ec54 	.word	0x2001ec54
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001654:	4b7c      	ldr	r3, [pc, #496]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001656:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
6000165a:	2a0b      	cmp	r2, #11
{
6000165c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001660:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
60001662:	d11c      	bne.n	6000169e <CrashReportClass::printTo(Print&) const+0x4a>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001664:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001668:	4978      	ldr	r1, [pc, #480]	; (6000184c <CrashReportClass::printTo(Print&) const+0x1f8>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
6000166a:	4b79      	ldr	r3, [pc, #484]	; (60001850 <CrashReportClass::printTo(Print&) const+0x1fc>)
	while (data < end) {
6000166c:	4e79      	ldr	r6, [pc, #484]	; (60001854 <CrashReportClass::printTo(Print&) const+0x200>)
		crc ^= *data++;
6000166e:	f101 0c04 	add.w	ip, r1, #4
60001672:	4050      	eors	r0, r2
60001674:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001676:	f000 0201 	and.w	r2, r0, #1
6000167a:	3c01      	subs	r4, #1
6000167c:	fb03 f202 	mul.w	r2, r3, r2
60001680:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
60001684:	d1f7      	bne.n	60001676 <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
60001686:	45b4      	cmp	ip, r6
60001688:	d002      	beq.n	60001690 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
6000168a:	684a      	ldr	r2, [r1, #4]
6000168c:	4661      	mov	r1, ip
6000168e:	e7ee      	b.n	6000166e <CrashReportClass::printTo(Print&) const+0x1a>
	}
	if (crc != info->crc) return 0;
60001690:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 60001848 <CrashReportClass::printTo(Print&) const+0x1f4>
60001694:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001698:	4298      	cmp	r0, r3
6000169a:	f000 80fd 	beq.w	60001898 <CrashReportClass::printTo(Print&) const+0x244>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
6000169e:	682b      	ldr	r3, [r5, #0]
600016a0:	2217      	movs	r2, #23
600016a2:	496d      	ldr	r1, [pc, #436]	; (60001858 <CrashReportClass::printTo(Print&) const+0x204>)
600016a4:	4628      	mov	r0, r5
600016a6:	685b      	ldr	r3, [r3, #4]
600016a8:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600016aa:	4628      	mov	r0, r5
600016ac:	f000 ffc8 	bl	60002640 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016b0:	682b      	ldr	r3, [r5, #0]
600016b2:	2248      	movs	r2, #72	; 0x48
600016b4:	4969      	ldr	r1, [pc, #420]	; (6000185c <CrashReportClass::printTo(Print&) const+0x208>)
600016b6:	685b      	ldr	r3, [r3, #4]
600016b8:	4628      	mov	r0, r5
600016ba:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016bc:	4628      	mov	r0, r5
600016be:	f000 ffbf 	bl	60002640 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016c2:	682b      	ldr	r3, [r5, #0]
600016c4:	2249      	movs	r2, #73	; 0x49
600016c6:	4966      	ldr	r1, [pc, #408]	; (60001860 <CrashReportClass::printTo(Print&) const+0x20c>)
600016c8:	685b      	ldr	r3, [r3, #4]
600016ca:	4628      	mov	r0, r5
600016cc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016ce:	4628      	mov	r0, r5
600016d0:	f000 ffb6 	bl	60002640 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016d4:	682b      	ldr	r3, [r5, #0]
600016d6:	2224      	movs	r2, #36	; 0x24
600016d8:	4962      	ldr	r1, [pc, #392]	; (60001864 <CrashReportClass::printTo(Print&) const+0x210>)
600016da:	685b      	ldr	r3, [r3, #4]
600016dc:	4628      	mov	r0, r5
600016de:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016e0:	4628      	mov	r0, r5
600016e2:	f000 ffad 	bl	60002640 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016e6:	682b      	ldr	r3, [r5, #0]
600016e8:	2247      	movs	r2, #71	; 0x47
600016ea:	495f      	ldr	r1, [pc, #380]	; (60001868 <CrashReportClass::printTo(Print&) const+0x214>)
600016ec:	685b      	ldr	r3, [r3, #4]
600016ee:	4628      	mov	r0, r5
600016f0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016f2:	4628      	mov	r0, r5
600016f4:	f000 ffa4 	bl	60002640 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016f8:	682b      	ldr	r3, [r5, #0]
600016fa:	223f      	movs	r2, #63	; 0x3f
600016fc:	495b      	ldr	r1, [pc, #364]	; (6000186c <CrashReportClass::printTo(Print&) const+0x218>)
600016fe:	685b      	ldr	r3, [r3, #4]
60001700:	4628      	mov	r0, r5
60001702:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001704:	4628      	mov	r0, r5
60001706:	f000 ff9b 	bl	60002640 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
6000170a:	4b59      	ldr	r3, [pc, #356]	; (60001870 <CrashReportClass::printTo(Print&) const+0x21c>)
6000170c:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
6000170e:	07a2      	lsls	r2, r4, #30
60001710:	d50d      	bpl.n	6000172e <CrashReportClass::printTo(Print&) const+0xda>
    uint32_t gpr5 = SRC_GPR5;
60001712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
60001714:	4b57      	ldr	r3, [pc, #348]	; (60001874 <CrashReportClass::printTo(Print&) const+0x220>)
60001716:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
60001718:	682b      	ldr	r3, [r5, #0]
6000171a:	f000 81b8 	beq.w	60001a8e <CrashReportClass::printTo(Print&) const+0x43a>
6000171e:	2240      	movs	r2, #64	; 0x40
60001720:	4955      	ldr	r1, [pc, #340]	; (60001878 <CrashReportClass::printTo(Print&) const+0x224>)
60001722:	685b      	ldr	r3, [r3, #4]
60001724:	4628      	mov	r0, r5
60001726:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001728:	4628      	mov	r0, r5
6000172a:	f000 ff89 	bl	60002640 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
6000172e:	0763      	lsls	r3, r4, #29
60001730:	f100 81a3 	bmi.w	60001a7a <CrashReportClass::printTo(Print&) const+0x426>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001734:	0727      	lsls	r7, r4, #28
60001736:	f100 8196 	bmi.w	60001a66 <CrashReportClass::printTo(Print&) const+0x412>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
6000173a:	06e6      	lsls	r6, r4, #27
6000173c:	f100 8189 	bmi.w	60001a52 <CrashReportClass::printTo(Print&) const+0x3fe>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001740:	06a0      	lsls	r0, r4, #26
60001742:	f100 817c 	bmi.w	60001a3e <CrashReportClass::printTo(Print&) const+0x3ea>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001746:	0661      	lsls	r1, r4, #25
60001748:	f100 816f 	bmi.w	60001a2a <CrashReportClass::printTo(Print&) const+0x3d6>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000174c:	0622      	lsls	r2, r4, #24
6000174e:	f100 8134 	bmi.w	600019ba <CrashReportClass::printTo(Print&) const+0x366>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001752:	05e3      	lsls	r3, r4, #23
60001754:	f100 813d 	bmi.w	600019d2 <CrashReportClass::printTo(Print&) const+0x37e>
  if (bc->bitmask) {
60001758:	4f3b      	ldr	r7, [pc, #236]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
6000175a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
6000175e:	2b00      	cmp	r3, #0
60001760:	d051      	beq.n	60001806 <CrashReportClass::printTo(Print&) const+0x1b2>
60001762:	2401      	movs	r4, #1
							  return write((const uint8_t *)str, strlen(str)); }
60001764:	f8df 912c 	ldr.w	r9, [pc, #300]	; 60001894 <CrashReportClass::printTo(Print&) const+0x240>
60001768:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6000188c <CrashReportClass::printTo(Print&) const+0x238>
6000176c:	e004      	b.n	60001778 <CrashReportClass::printTo(Print&) const+0x124>
    for (int i=0; i < 6; i++) {
6000176e:	3401      	adds	r4, #1
60001770:	2c07      	cmp	r4, #7
60001772:	d039      	beq.n	600017e8 <CrashReportClass::printTo(Print&) const+0x194>
      if (bc->bitmask & (1 << i)) {
60001774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
60001778:	1e62      	subs	r2, r4, #1
6000177a:	2601      	movs	r6, #1
6000177c:	fa06 f102 	lsl.w	r1, r6, r2
60001780:	4219      	tst	r1, r3
60001782:	d0f4      	beq.n	6000176e <CrashReportClass::printTo(Print&) const+0x11a>
60001784:	682b      	ldr	r3, [r5, #0]
60001786:	eb08 0a82 	add.w	sl, r8, r2, lsl #2
6000178a:	4649      	mov	r1, r9
6000178c:	220e      	movs	r2, #14
6000178e:	685b      	ldr	r3, [r3, #4]
60001790:	4628      	mov	r0, r5
60001792:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001794:	4621      	mov	r1, r4
60001796:	4628      	mov	r0, r5
    for (int i=0; i < 6; i++) {
60001798:	3401      	adds	r4, #1
6000179a:	f000 ff39 	bl	60002610 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000179e:	682b      	ldr	r3, [r5, #0]
600017a0:	2205      	movs	r2, #5
600017a2:	4936      	ldr	r1, [pc, #216]	; (6000187c <CrashReportClass::printTo(Print&) const+0x228>)
600017a4:	685b      	ldr	r3, [r3, #4]
600017a6:	4628      	mov	r0, r5
600017a8:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600017aa:	2300      	movs	r3, #0
600017ac:	f8da 1004 	ldr.w	r1, [sl, #4]
600017b0:	220a      	movs	r2, #10
600017b2:	4628      	mov	r0, r5
600017b4:	f000 ff48 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017b8:	682b      	ldr	r3, [r5, #0]
600017ba:	2204      	movs	r2, #4
600017bc:	4930      	ldr	r1, [pc, #192]	; (60001880 <CrashReportClass::printTo(Print&) const+0x22c>)
600017be:	685b      	ldr	r3, [r3, #4]
600017c0:	4628      	mov	r0, r5
600017c2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600017c4:	f8da 1004 	ldr.w	r1, [sl, #4]
600017c8:	2300      	movs	r3, #0
600017ca:	2210      	movs	r2, #16
600017cc:	4628      	mov	r0, r5
600017ce:	f000 ff3b 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017d2:	682b      	ldr	r3, [r5, #0]
600017d4:	4632      	mov	r2, r6
600017d6:	492b      	ldr	r1, [pc, #172]	; (60001884 <CrashReportClass::printTo(Print&) const+0x230>)
600017d8:	685b      	ldr	r3, [r3, #4]
600017da:	4628      	mov	r0, r5
600017dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017de:	4628      	mov	r0, r5
600017e0:	f000 ff2e 	bl	60002640 <___ZN5Print7printlnEv_veneer>
600017e4:	2c07      	cmp	r4, #7
600017e6:	d1c5      	bne.n	60001774 <CrashReportClass::printTo(Print&) const+0x120>
    *(volatile uint32_t *)(&bc->bitmask) = 0;
600017e8:	4b27      	ldr	r3, [pc, #156]	; (60001888 <CrashReportClass::printTo(Print&) const+0x234>)
600017ea:	2200      	movs	r2, #0
600017ec:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600017f0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
600017f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600017f8:	4a24      	ldr	r2, [pc, #144]	; (6000188c <CrashReportClass::printTo(Print&) const+0x238>)
600017fa:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600017fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001802:	f3bf 8f6f 	isb	sy
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001806:	4a10      	ldr	r2, [pc, #64]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001808:	2300      	movs	r3, #0
	info->ipsr  = 0;
6000180a:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
6000180e:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001812:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001816:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
6000181a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000181e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001822:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001826:	4809      	ldr	r0, [pc, #36]	; (6000184c <CrashReportClass::printTo(Print&) const+0x1f8>)
60001828:	4919      	ldr	r1, [pc, #100]	; (60001890 <CrashReportClass::printTo(Print&) const+0x23c>)
6000182a:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
6000182e:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001832:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001836:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000183a:	4a0d      	ldr	r2, [pc, #52]	; (60001870 <CrashReportClass::printTo(Print&) const+0x21c>)
}
6000183c:	2001      	movs	r0, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000183e:	6891      	ldr	r1, [r2, #8]
60001840:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001842:	6313      	str	r3, [r2, #48]	; 0x30
}
60001844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60001848:	2027ff00 	.word	0x2027ff00
6000184c:	2027ff80 	.word	0x2027ff80
60001850:	edb88320 	.word	0xedb88320
60001854:	2027ffa8 	.word	0x2027ffa8
60001858:	20008028 	.word	0x20008028
6000185c:	20008040 	.word	0x20008040
60001860:	2000808c 	.word	0x2000808c
60001864:	200080d8 	.word	0x200080d8
60001868:	20008100 	.word	0x20008100
6000186c:	20008148 	.word	0x20008148
60001870:	400f8000 	.word	0x400f8000
60001874:	0bad00f1 	.word	0x0bad00f1
60001878:	200081d4 	.word	0x200081d4
6000187c:	200083ac 	.word	0x200083ac
60001880:	200083b4 	.word	0x200083b4
60001884:	200080d4 	.word	0x200080d4
60001888:	2027f000 	.word	0x2027f000
6000188c:	2027ffc0 	.word	0x2027ffc0
60001890:	2027ffa0 	.word	0x2027ffa0
60001894:	2000839c 	.word	0x2000839c
							  return write((const uint8_t *)str, strlen(str)); }
60001898:	682b      	ldr	r3, [r5, #0]
6000189a:	220c      	movs	r2, #12
6000189c:	49aa      	ldr	r1, [pc, #680]	; (60001b48 <CrashReportClass::printTo(Print&) const+0x4f4>)
6000189e:	4628      	mov	r0, r5
600018a0:	685b      	ldr	r3, [r3, #4]
600018a2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018a4:	4628      	mov	r0, r5
600018a6:	f000 fecb 	bl	60002640 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018aa:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
600018ac:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
600018b0:	4628      	mov	r0, r5
    info->time /= 60;
600018b2:	4ba6      	ldr	r3, [pc, #664]	; (60001b4c <CrashReportClass::printTo(Print&) const+0x4f8>)
600018b4:	f8d2 a004 	ldr.w	sl, [r2, #4]
600018b8:	fba3 2709 	umull	r2, r7, r3, r9
600018bc:	49a4      	ldr	r1, [pc, #656]	; (60001b50 <CrashReportClass::printTo(Print&) const+0x4fc>)
600018be:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
600018c0:	fba3 2307 	umull	r2, r3, r3, r7
600018c4:	2226      	movs	r2, #38	; 0x26
600018c6:	095e      	lsrs	r6, r3, #5
600018c8:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
600018cc:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
600018ce:	49a1      	ldr	r1, [pc, #644]	; (60001b54 <CrashReportClass::printTo(Print&) const+0x500>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018d0:	220a      	movs	r2, #10
600018d2:	4628      	mov	r0, r5
600018d4:	fba1 3106 	umull	r3, r1, r1, r6
600018d8:	4623      	mov	r3, r4
600018da:	0909      	lsrs	r1, r1, #4
600018dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
600018e0:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
600018e4:	f000 feb0 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018e8:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
600018ea:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
600018ee:	2201      	movs	r2, #1
600018f0:	685b      	ldr	r3, [r3, #4]
600018f2:	4628      	mov	r0, r5
600018f4:	4998      	ldr	r1, [pc, #608]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x504>)
600018f6:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018f8:	4623      	mov	r3, r4
600018fa:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
600018fe:	220a      	movs	r2, #10
60001900:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
60001902:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
60001906:	f000 fe9f 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000190a:	682b      	ldr	r3, [r5, #0]
6000190c:	2201      	movs	r2, #1
6000190e:	4992      	ldr	r1, [pc, #584]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x504>)
60001910:	685b      	ldr	r3, [r3, #4]
60001912:	4628      	mov	r0, r5
60001914:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001916:	4623      	mov	r3, r4
60001918:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
6000191c:	220a      	movs	r2, #10
6000191e:	4628      	mov	r0, r5
60001920:	f000 fe92 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001924:	4628      	mov	r0, r5
60001926:	f000 fe8b 	bl	60002640 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000192a:	682b      	ldr	r3, [r5, #0]
6000192c:	2224      	movs	r2, #36	; 0x24
6000192e:	498b      	ldr	r1, [pc, #556]	; (60001b5c <CrashReportClass::printTo(Print&) const+0x508>)
60001930:	685b      	ldr	r3, [r3, #4]
60001932:	4628      	mov	r0, r5
60001934:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001936:	4623      	mov	r3, r4
60001938:	2210      	movs	r2, #16
6000193a:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
6000193e:	4628      	mov	r0, r5
60001940:	f000 fe82 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001944:	4628      	mov	r0, r5
60001946:	f000 fe7b 	bl	60002640 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
6000194a:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
6000194e:	2e00      	cmp	r6, #0
60001950:	f040 80a0 	bne.w	60001a94 <CrashReportClass::printTo(Print&) const+0x440>
    uint32_t _HFSR = info->hfsr;
60001954:	4e82      	ldr	r6, [pc, #520]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x50c>)
60001956:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
6000195a:	2c00      	cmp	r4, #0
6000195c:	f040 80bb 	bne.w	60001ad6 <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001960:	682b      	ldr	r3, [r5, #0]
60001962:	2222      	movs	r2, #34	; 0x22
60001964:	497f      	ldr	r1, [pc, #508]	; (60001b64 <CrashReportClass::printTo(Print&) const+0x510>)
60001966:	4628      	mov	r0, r5
60001968:	685b      	ldr	r3, [r3, #4]
6000196a:	4798      	blx	r3
    p.print(info->temp);
6000196c:	4b7c      	ldr	r3, [pc, #496]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x50c>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
6000196e:	2102      	movs	r1, #2
60001970:	4628      	mov	r0, r5
60001972:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001976:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
6000197a:	f000 fe4d 	bl	60002618 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000197e:	682b      	ldr	r3, [r5, #0]
60001980:	2205      	movs	r2, #5
60001982:	4979      	ldr	r1, [pc, #484]	; (60001b68 <CrashReportClass::printTo(Print&) const+0x514>)
60001984:	685b      	ldr	r3, [r3, #4]
60001986:	4628      	mov	r0, r5
60001988:	4798      	blx	r3
6000198a:	682b      	ldr	r3, [r5, #0]
6000198c:	221d      	movs	r2, #29
6000198e:	4977      	ldr	r1, [pc, #476]	; (60001b6c <CrashReportClass::printTo(Print&) const+0x518>)
60001990:	685b      	ldr	r3, [r3, #4]
60001992:	4628      	mov	r0, r5
60001994:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001996:	4a76      	ldr	r2, [pc, #472]	; (60001b70 <CrashReportClass::printTo(Print&) const+0x51c>)
60001998:	4876      	ldr	r0, [pc, #472]	; (60001b74 <CrashReportClass::printTo(Print&) const+0x520>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000199a:	2300      	movs	r3, #0
6000199c:	6811      	ldr	r1, [r2, #0]
6000199e:	220a      	movs	r2, #10
600019a0:	fba0 0101 	umull	r0, r1, r0, r1
600019a4:	4628      	mov	r0, r5
600019a6:	0c89      	lsrs	r1, r1, #18
600019a8:	f000 fe4e 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019ac:	682b      	ldr	r3, [r5, #0]
600019ae:	2204      	movs	r2, #4
600019b0:	4971      	ldr	r1, [pc, #452]	; (60001b78 <CrashReportClass::printTo(Print&) const+0x524>)
600019b2:	685b      	ldr	r3, [r3, #4]
600019b4:	4628      	mov	r0, r5
600019b6:	4798      	blx	r3
600019b8:	e6a7      	b.n	6000170a <CrashReportClass::printTo(Print&) const+0xb6>
600019ba:	682b      	ldr	r3, [r5, #0]
600019bc:	2221      	movs	r2, #33	; 0x21
600019be:	496f      	ldr	r1, [pc, #444]	; (60001b7c <CrashReportClass::printTo(Print&) const+0x528>)
600019c0:	4628      	mov	r0, r5
600019c2:	685b      	ldr	r3, [r3, #4]
600019c4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019c6:	4628      	mov	r0, r5
600019c8:	f000 fe3a 	bl	60002640 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
600019cc:	05e3      	lsls	r3, r4, #23
600019ce:	f57f aec3 	bpl.w	60001758 <CrashReportClass::printTo(Print&) const+0x104>
							  return write((const uint8_t *)str, strlen(str)); }
600019d2:	682b      	ldr	r3, [r5, #0]
600019d4:	2229      	movs	r2, #41	; 0x29
600019d6:	496a      	ldr	r1, [pc, #424]	; (60001b80 <CrashReportClass::printTo(Print&) const+0x52c>)
600019d8:	4628      	mov	r0, r5
600019da:	685b      	ldr	r3, [r3, #4]
600019dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019de:	4628      	mov	r0, r5
600019e0:	f000 fe2e 	bl	60002640 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
600019e4:	4967      	ldr	r1, [pc, #412]	; (60001b84 <CrashReportClass::printTo(Print&) const+0x530>)
							  return write((const uint8_t *)str, strlen(str)); }
600019e6:	6828      	ldr	r0, [r5, #0]
600019e8:	2221      	movs	r2, #33	; 0x21
600019ea:	688b      	ldr	r3, [r1, #8]
600019ec:	6844      	ldr	r4, [r0, #4]
600019ee:	4628      	mov	r0, r5
600019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
600019f4:	608b      	str	r3, [r1, #8]
600019f6:	4964      	ldr	r1, [pc, #400]	; (60001b88 <CrashReportClass::printTo(Print&) const+0x534>)
600019f8:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
600019fa:	4628      	mov	r0, r5
600019fc:	f000 fe20 	bl	60002640 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a00:	682b      	ldr	r3, [r5, #0]
60001a02:	2242      	movs	r2, #66	; 0x42
60001a04:	4961      	ldr	r1, [pc, #388]	; (60001b8c <CrashReportClass::printTo(Print&) const+0x538>)
60001a06:	685b      	ldr	r3, [r3, #4]
60001a08:	4628      	mov	r0, r5
60001a0a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a0c:	4628      	mov	r0, r5
60001a0e:	f000 fe17 	bl	60002640 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a12:	4a5f      	ldr	r2, [pc, #380]	; (60001b90 <CrashReportClass::printTo(Print&) const+0x53c>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001a14:	4b5f      	ldr	r3, [pc, #380]	; (60001b94 <CrashReportClass::printTo(Print&) const+0x540>)
60001a16:	2107      	movs	r1, #7
60001a18:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001a20:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001a22:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001a26:	bf30      	wfi
60001a28:	e7fd      	b.n	60001a26 <CrashReportClass::printTo(Print&) const+0x3d2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a2a:	682b      	ldr	r3, [r5, #0]
60001a2c:	2221      	movs	r2, #33	; 0x21
60001a2e:	495a      	ldr	r1, [pc, #360]	; (60001b98 <CrashReportClass::printTo(Print&) const+0x544>)
60001a30:	4628      	mov	r0, r5
60001a32:	685b      	ldr	r3, [r3, #4]
60001a34:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a36:	4628      	mov	r0, r5
60001a38:	f000 fe02 	bl	60002640 <___ZN5Print7printlnEv_veneer>
60001a3c:	e686      	b.n	6000174c <CrashReportClass::printTo(Print&) const+0xf8>
							  return write((const uint8_t *)str, strlen(str)); }
60001a3e:	682b      	ldr	r3, [r5, #0]
60001a40:	2229      	movs	r2, #41	; 0x29
60001a42:	4956      	ldr	r1, [pc, #344]	; (60001b9c <CrashReportClass::printTo(Print&) const+0x548>)
60001a44:	4628      	mov	r0, r5
60001a46:	685b      	ldr	r3, [r3, #4]
60001a48:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a4a:	4628      	mov	r0, r5
60001a4c:	f000 fdf8 	bl	60002640 <___ZN5Print7printlnEv_veneer>
60001a50:	e679      	b.n	60001746 <CrashReportClass::printTo(Print&) const+0xf2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a52:	682b      	ldr	r3, [r5, #0]
60001a54:	2226      	movs	r2, #38	; 0x26
60001a56:	4952      	ldr	r1, [pc, #328]	; (60001ba0 <CrashReportClass::printTo(Print&) const+0x54c>)
60001a58:	4628      	mov	r0, r5
60001a5a:	685b      	ldr	r3, [r3, #4]
60001a5c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a5e:	4628      	mov	r0, r5
60001a60:	f000 fdee 	bl	60002640 <___ZN5Print7printlnEv_veneer>
60001a64:	e66c      	b.n	60001740 <CrashReportClass::printTo(Print&) const+0xec>
							  return write((const uint8_t *)str, strlen(str)); }
60001a66:	682b      	ldr	r3, [r5, #0]
60001a68:	222a      	movs	r2, #42	; 0x2a
60001a6a:	494e      	ldr	r1, [pc, #312]	; (60001ba4 <CrashReportClass::printTo(Print&) const+0x550>)
60001a6c:	4628      	mov	r0, r5
60001a6e:	685b      	ldr	r3, [r3, #4]
60001a70:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a72:	4628      	mov	r0, r5
60001a74:	f000 fde4 	bl	60002640 <___ZN5Print7printlnEv_veneer>
60001a78:	e65f      	b.n	6000173a <CrashReportClass::printTo(Print&) const+0xe6>
							  return write((const uint8_t *)str, strlen(str)); }
60001a7a:	682b      	ldr	r3, [r5, #0]
60001a7c:	2227      	movs	r2, #39	; 0x27
60001a7e:	494a      	ldr	r1, [pc, #296]	; (60001ba8 <CrashReportClass::printTo(Print&) const+0x554>)
60001a80:	4628      	mov	r0, r5
60001a82:	685b      	ldr	r3, [r3, #4]
60001a84:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a86:	4628      	mov	r0, r5
60001a88:	f000 fdda 	bl	60002640 <___ZN5Print7printlnEv_veneer>
60001a8c:	e652      	b.n	60001734 <CrashReportClass::printTo(Print&) const+0xe0>
							  return write((const uint8_t *)str, strlen(str)); }
60001a8e:	2248      	movs	r2, #72	; 0x48
60001a90:	4946      	ldr	r1, [pc, #280]	; (60001bac <CrashReportClass::printTo(Print&) const+0x558>)
60001a92:	e646      	b.n	60001722 <CrashReportClass::printTo(Print&) const+0xce>
60001a94:	682b      	ldr	r3, [r5, #0]
60001a96:	2208      	movs	r2, #8
60001a98:	4945      	ldr	r1, [pc, #276]	; (60001bb0 <CrashReportClass::printTo(Print&) const+0x55c>)
60001a9a:	4628      	mov	r0, r5
60001a9c:	685b      	ldr	r3, [r3, #4]
60001a9e:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001aa0:	4623      	mov	r3, r4
60001aa2:	2210      	movs	r2, #16
60001aa4:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001aa8:	4628      	mov	r0, r5
60001aaa:	f000 fdcd 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001aae:	4628      	mov	r0, r5
60001ab0:	f000 fdc6 	bl	60002640 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001ab4:	07f4      	lsls	r4, r6, #31
60001ab6:	d427      	bmi.n	60001b08 <CrashReportClass::printTo(Print&) const+0x4b4>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001ab8:	07b0      	lsls	r0, r6, #30
60001aba:	f100 811d 	bmi.w	60001cf8 <CrashReportClass::printTo(Print&) const+0x6a4>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001abe:	0731      	lsls	r1, r6, #28
60001ac0:	f100 810e 	bmi.w	60001ce0 <CrashReportClass::printTo(Print&) const+0x68c>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001ac4:	06f2      	lsls	r2, r6, #27
60001ac6:	f100 8127 	bmi.w	60001d18 <CrashReportClass::printTo(Print&) const+0x6c4>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001aca:	06b3      	lsls	r3, r6, #26
60001acc:	d525      	bpl.n	60001b1a <CrashReportClass::printTo(Print&) const+0x4c6>
							  return write((const uint8_t *)str, strlen(str)); }
60001ace:	682b      	ldr	r3, [r5, #0]
60001ad0:	222a      	movs	r2, #42	; 0x2a
60001ad2:	4938      	ldr	r1, [pc, #224]	; (60001bb4 <CrashReportClass::printTo(Print&) const+0x560>)
60001ad4:	e01b      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001ad6:	682b      	ldr	r3, [r5, #0]
60001ad8:	2208      	movs	r2, #8
60001ada:	4937      	ldr	r1, [pc, #220]	; (60001bb8 <CrashReportClass::printTo(Print&) const+0x564>)
60001adc:	4628      	mov	r0, r5
60001ade:	685b      	ldr	r3, [r3, #4]
60001ae0:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ae2:	2300      	movs	r3, #0
60001ae4:	2210      	movs	r2, #16
60001ae6:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001aea:	4628      	mov	r0, r5
60001aec:	f000 fdac 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001af0:	4628      	mov	r0, r5
60001af2:	f000 fda5 	bl	60002640 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001af6:	07a0      	lsls	r0, r4, #30
60001af8:	d466      	bmi.n	60001bc8 <CrashReportClass::printTo(Print&) const+0x574>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001afa:	0061      	lsls	r1, r4, #1
60001afc:	f57f af30 	bpl.w	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001b00:	682b      	ldr	r3, [r5, #0]
60001b02:	221b      	movs	r2, #27
60001b04:	492d      	ldr	r1, [pc, #180]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x568>)
60001b06:	e062      	b.n	60001bce <CrashReportClass::printTo(Print&) const+0x57a>
60001b08:	682b      	ldr	r3, [r5, #0]
60001b0a:	2228      	movs	r2, #40	; 0x28
60001b0c:	492c      	ldr	r1, [pc, #176]	; (60001bc0 <CrashReportClass::printTo(Print&) const+0x56c>)
60001b0e:	685b      	ldr	r3, [r3, #4]
60001b10:	4628      	mov	r0, r5
60001b12:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b14:	4628      	mov	r0, r5
60001b16:	f000 fd93 	bl	60002640 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001b1a:	0637      	lsls	r7, r6, #24
60001b1c:	d47d      	bmi.n	60001c1a <CrashReportClass::printTo(Print&) const+0x5c6>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001b1e:	05f4      	lsls	r4, r6, #23
60001b20:	d45c      	bmi.n	60001bdc <CrashReportClass::printTo(Print&) const+0x588>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001b22:	05b0      	lsls	r0, r6, #22
60001b24:	f100 80e4 	bmi.w	60001cf0 <CrashReportClass::printTo(Print&) const+0x69c>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001b28:	0571      	lsls	r1, r6, #21
60001b2a:	f100 80dd 	bmi.w	60001ce8 <CrashReportClass::printTo(Print&) const+0x694>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001b2e:	0532      	lsls	r2, r6, #20
60001b30:	f100 80ee 	bmi.w	60001d10 <CrashReportClass::printTo(Print&) const+0x6bc>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001b34:	04f3      	lsls	r3, r6, #19
60001b36:	f100 80e7 	bmi.w	60001d08 <CrashReportClass::printTo(Print&) const+0x6b4>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001b3a:	04b7      	lsls	r7, r6, #18
60001b3c:	d557      	bpl.n	60001bee <CrashReportClass::printTo(Print&) const+0x59a>
							  return write((const uint8_t *)str, strlen(str)); }
60001b3e:	682b      	ldr	r3, [r5, #0]
60001b40:	2231      	movs	r2, #49	; 0x31
60001b42:	4920      	ldr	r1, [pc, #128]	; (60001bc4 <CrashReportClass::printTo(Print&) const+0x570>)
60001b44:	e04d      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001b46:	bf00      	nop
60001b48:	20007b10 	.word	0x20007b10
60001b4c:	88888889 	.word	0x88888889
60001b50:	20007b20 	.word	0x20007b20
60001b54:	aaaaaaab 	.word	0xaaaaaaab
60001b58:	20007b48 	.word	0x20007b48
60001b5c:	20007b4c 	.word	0x20007b4c
60001b60:	2027ff00 	.word	0x2027ff00
60001b64:	20007fd4 	.word	0x20007fd4
60001b68:	20007ff8 	.word	0x20007ff8
60001b6c:	20008000 	.word	0x20008000
60001b70:	200085d0 	.word	0x200085d0
60001b74:	431bde83 	.word	0x431bde83
60001b78:	20008020 	.word	0x20008020
60001b7c:	200082e4 	.word	0x200082e4
60001b80:	20008308 	.word	0x20008308
60001b84:	400f8000 	.word	0x400f8000
60001b88:	20008334 	.word	0x20008334
60001b8c:	20008358 	.word	0x20008358
60001b90:	400d4000 	.word	0x400d4000
60001b94:	400ac000 	.word	0x400ac000
60001b98:	200082c0 	.word	0x200082c0
60001b9c:	20008294 	.word	0x20008294
60001ba0:	2000826c 	.word	0x2000826c
60001ba4:	20008240 	.word	0x20008240
60001ba8:	20008218 	.word	0x20008218
60001bac:	20008188 	.word	0x20008188
60001bb0:	20007b74 	.word	0x20007b74
60001bb4:	20007c24 	.word	0x20007c24
60001bb8:	20007f84 	.word	0x20007f84
60001bbc:	20007fb8 	.word	0x20007fb8
60001bc0:	20007b80 	.word	0x20007b80
60001bc4:	20007e48 	.word	0x20007e48
60001bc8:	682b      	ldr	r3, [r5, #0]
60001bca:	2226      	movs	r2, #38	; 0x26
60001bcc:	495c      	ldr	r1, [pc, #368]	; (60001d40 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001bce:	4628      	mov	r0, r5
60001bd0:	685b      	ldr	r3, [r3, #4]
60001bd2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bd4:	4628      	mov	r0, r5
60001bd6:	f000 fd33 	bl	60002640 <___ZN5Print7printlnEv_veneer>
60001bda:	e6c1      	b.n	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001bdc:	682b      	ldr	r3, [r5, #0]
60001bde:	2220      	movs	r2, #32
60001be0:	4958      	ldr	r1, [pc, #352]	; (60001d44 <CrashReportClass::printTo(Print&) const+0x6f0>)
60001be2:	685b      	ldr	r3, [r3, #4]
60001be4:	4628      	mov	r0, r5
60001be6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001be8:	4628      	mov	r0, r5
60001bea:	f000 fd29 	bl	60002640 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001bee:	0434      	lsls	r4, r6, #16
60001bf0:	d43f      	bmi.n	60001c72 <CrashReportClass::printTo(Print&) const+0x61e>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001bf2:	03f0      	lsls	r0, r6, #15
60001bf4:	d42d      	bmi.n	60001c52 <CrashReportClass::printTo(Print&) const+0x5fe>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001bf6:	03b1      	lsls	r1, r6, #14
60001bf8:	f100 8082 	bmi.w	60001d00 <CrashReportClass::printTo(Print&) const+0x6ac>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001bfc:	0372      	lsls	r2, r6, #13
60001bfe:	d44a      	bmi.n	60001c96 <CrashReportClass::printTo(Print&) const+0x642>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001c00:	0333      	lsls	r3, r6, #12
60001c02:	f100 8091 	bmi.w	60001d28 <CrashReportClass::printTo(Print&) const+0x6d4>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001c06:	01f7      	lsls	r7, r6, #7
60001c08:	f100 808a 	bmi.w	60001d20 <CrashReportClass::printTo(Print&) const+0x6cc>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001c0c:	01b4      	lsls	r4, r6, #6
60001c0e:	f57f aea1 	bpl.w	60001954 <CrashReportClass::printTo(Print&) const+0x300>
							  return write((const uint8_t *)str, strlen(str)); }
60001c12:	682b      	ldr	r3, [r5, #0]
60001c14:	221b      	movs	r2, #27
60001c16:	494c      	ldr	r1, [pc, #304]	; (60001d48 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001c18:	e01e      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001c1a:	682b      	ldr	r3, [r5, #0]
60001c1c:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001c1e:	4c4b      	ldr	r4, [pc, #300]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001c20:	4628      	mov	r0, r5
60001c22:	494b      	ldr	r1, [pc, #300]	; (60001d50 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001c24:	685b      	ldr	r3, [r3, #4]
60001c26:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c28:	2210      	movs	r2, #16
60001c2a:	2300      	movs	r3, #0
60001c2c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001c30:	4628      	mov	r0, r5
60001c32:	f000 fd09 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001c36:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001c3a:	2a1f      	cmp	r2, #31
60001c3c:	d92f      	bls.n	60001c9e <CrashReportClass::printTo(Print&) const+0x64a>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001c3e:	4b45      	ldr	r3, [pc, #276]	; (60001d54 <CrashReportClass::printTo(Print&) const+0x700>)
60001c40:	429a      	cmp	r2, r3
60001c42:	d302      	bcc.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001c44:	3320      	adds	r3, #32
60001c46:	429a      	cmp	r2, r3
60001c48:	d372      	bcc.n	60001d30 <CrashReportClass::printTo(Print&) const+0x6dc>
        p.println();
60001c4a:	4628      	mov	r0, r5
60001c4c:	f000 fcf8 	bl	60002640 <___ZN5Print7printlnEv_veneer>
60001c50:	e765      	b.n	60001b1e <CrashReportClass::printTo(Print&) const+0x4ca>
							  return write((const uint8_t *)str, strlen(str)); }
60001c52:	682b      	ldr	r3, [r5, #0]
60001c54:	2223      	movs	r2, #35	; 0x23
60001c56:	4940      	ldr	r1, [pc, #256]	; (60001d58 <CrashReportClass::printTo(Print&) const+0x704>)
60001c58:	685b      	ldr	r3, [r3, #4]
60001c5a:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001c5c:	4e3b      	ldr	r6, [pc, #236]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001c5e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c60:	4628      	mov	r0, r5
60001c62:	f000 fced 	bl	60002640 <___ZN5Print7printlnEv_veneer>
60001c66:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001c6a:	2c00      	cmp	r4, #0
60001c6c:	f43f ae78 	beq.w	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
60001c70:	e731      	b.n	60001ad6 <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001c72:	682b      	ldr	r3, [r5, #0]
60001c74:	2221      	movs	r2, #33	; 0x21
60001c76:	4939      	ldr	r1, [pc, #228]	; (60001d5c <CrashReportClass::printTo(Print&) const+0x708>)
60001c78:	4628      	mov	r0, r5
60001c7a:	685b      	ldr	r3, [r3, #4]
60001c7c:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001c7e:	4933      	ldr	r1, [pc, #204]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c80:	2300      	movs	r3, #0
60001c82:	2210      	movs	r2, #16
60001c84:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001c88:	4628      	mov	r0, r5
60001c8a:	f000 fcdd 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001c8e:	4628      	mov	r0, r5
60001c90:	f000 fcd6 	bl	60002640 <___ZN5Print7printlnEv_veneer>
60001c94:	e7ad      	b.n	60001bf2 <CrashReportClass::printTo(Print&) const+0x59e>
							  return write((const uint8_t *)str, strlen(str)); }
60001c96:	682b      	ldr	r3, [r5, #0]
60001c98:	2228      	movs	r2, #40	; 0x28
60001c9a:	4931      	ldr	r1, [pc, #196]	; (60001d60 <CrashReportClass::printTo(Print&) const+0x70c>)
60001c9c:	e7dc      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001c9e:	682b      	ldr	r3, [r5, #0]
60001ca0:	221e      	movs	r2, #30
60001ca2:	4930      	ldr	r1, [pc, #192]	; (60001d64 <CrashReportClass::printTo(Print&) const+0x710>)
60001ca4:	4628      	mov	r0, r5
60001ca6:	685b      	ldr	r3, [r3, #4]
60001ca8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001caa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001cae:	2300      	movs	r3, #0
60001cb0:	2210      	movs	r2, #16
60001cb2:	4628      	mov	r0, r5
60001cb4:	f000 fcc8 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cb8:	682b      	ldr	r3, [r5, #0]
60001cba:	223e      	movs	r2, #62	; 0x3e
60001cbc:	492a      	ldr	r1, [pc, #168]	; (60001d68 <CrashReportClass::printTo(Print&) const+0x714>)
60001cbe:	685b      	ldr	r3, [r3, #4]
60001cc0:	4628      	mov	r0, r5
60001cc2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cc4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001cc8:	2300      	movs	r3, #0
60001cca:	2210      	movs	r2, #16
60001ccc:	4628      	mov	r0, r5
60001cce:	f000 fcbb 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cd2:	682b      	ldr	r3, [r5, #0]
60001cd4:	221d      	movs	r2, #29
60001cd6:	4925      	ldr	r1, [pc, #148]	; (60001d6c <CrashReportClass::printTo(Print&) const+0x718>)
60001cd8:	685b      	ldr	r3, [r3, #4]
60001cda:	4628      	mov	r0, r5
60001cdc:	4798      	blx	r3
60001cde:	e7b4      	b.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001ce0:	682b      	ldr	r3, [r5, #0]
60001ce2:	2229      	movs	r2, #41	; 0x29
60001ce4:	4922      	ldr	r1, [pc, #136]	; (60001d70 <CrashReportClass::printTo(Print&) const+0x71c>)
60001ce6:	e712      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001ce8:	682b      	ldr	r3, [r5, #0]
60001cea:	2244      	movs	r2, #68	; 0x44
60001cec:	4921      	ldr	r1, [pc, #132]	; (60001d74 <CrashReportClass::printTo(Print&) const+0x720>)
60001cee:	e778      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001cf0:	682b      	ldr	r3, [r5, #0]
60001cf2:	222c      	movs	r2, #44	; 0x2c
60001cf4:	4920      	ldr	r1, [pc, #128]	; (60001d78 <CrashReportClass::printTo(Print&) const+0x724>)
60001cf6:	e774      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001cf8:	682b      	ldr	r3, [r5, #0]
60001cfa:	2221      	movs	r2, #33	; 0x21
60001cfc:	491f      	ldr	r1, [pc, #124]	; (60001d7c <CrashReportClass::printTo(Print&) const+0x728>)
60001cfe:	e706      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001d00:	682b      	ldr	r3, [r5, #0]
60001d02:	2232      	movs	r2, #50	; 0x32
60001d04:	491e      	ldr	r1, [pc, #120]	; (60001d80 <CrashReportClass::printTo(Print&) const+0x72c>)
60001d06:	e7a7      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d08:	682b      	ldr	r3, [r5, #0]
60001d0a:	2233      	movs	r2, #51	; 0x33
60001d0c:	491d      	ldr	r1, [pc, #116]	; (60001d84 <CrashReportClass::printTo(Print&) const+0x730>)
60001d0e:	e768      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001d10:	682b      	ldr	r3, [r5, #0]
60001d12:	223f      	movs	r2, #63	; 0x3f
60001d14:	491c      	ldr	r1, [pc, #112]	; (60001d88 <CrashReportClass::printTo(Print&) const+0x734>)
60001d16:	e764      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001d18:	682b      	ldr	r3, [r5, #0]
60001d1a:	2225      	movs	r2, #37	; 0x25
60001d1c:	491b      	ldr	r1, [pc, #108]	; (60001d8c <CrashReportClass::printTo(Print&) const+0x738>)
60001d1e:	e6f6      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001d20:	682b      	ldr	r3, [r5, #0]
60001d22:	2228      	movs	r2, #40	; 0x28
60001d24:	491a      	ldr	r1, [pc, #104]	; (60001d90 <CrashReportClass::printTo(Print&) const+0x73c>)
60001d26:	e797      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d28:	682b      	ldr	r3, [r5, #0]
60001d2a:	2216      	movs	r2, #22
60001d2c:	4919      	ldr	r1, [pc, #100]	; (60001d94 <CrashReportClass::printTo(Print&) const+0x740>)
60001d2e:	e793      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d30:	682b      	ldr	r3, [r5, #0]
60001d32:	2241      	movs	r2, #65	; 0x41
60001d34:	4918      	ldr	r1, [pc, #96]	; (60001d98 <CrashReportClass::printTo(Print&) const+0x744>)
60001d36:	4628      	mov	r0, r5
60001d38:	685b      	ldr	r3, [r3, #4]
60001d3a:	4798      	blx	r3
60001d3c:	e785      	b.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001d3e:	bf00      	nop
60001d40:	20007f90 	.word	0x20007f90
60001d44:	20007d38 	.word	0x20007d38
60001d48:	20007f68 	.word	0x20007f68
60001d4c:	2027ff00 	.word	0x2027ff00
60001d50:	20007c50 	.word	0x20007c50
60001d54:	2001ece0 	.word	0x2001ece0
60001d58:	20007ea0 	.word	0x20007ea0
60001d5c:	20007e7c 	.word	0x20007e7c
60001d60:	20007ef8 	.word	0x20007ef8
60001d64:	20007c74 	.word	0x20007c74
60001d68:	20007c94 	.word	0x20007c94
60001d6c:	20007cd4 	.word	0x20007cd4
60001d70:	20007bd0 	.word	0x20007bd0
60001d74:	20007d8c 	.word	0x20007d8c
60001d78:	20007d5c 	.word	0x20007d5c
60001d7c:	20007bac 	.word	0x20007bac
60001d80:	20007ec4 	.word	0x20007ec4
60001d84:	20007e14 	.word	0x20007e14
60001d88:	20007dd4 	.word	0x20007dd4
60001d8c:	20007bfc 	.word	0x20007bfc
60001d90:	20007f3c 	.word	0x20007f3c
60001d94:	20007f24 	.word	0x20007f24
60001d98:	20007cf4 	.word	0x20007cf4

60001d9c <CrashReportClass::clear()>:
	info->len = 0;
60001d9c:	4a0f      	ldr	r2, [pc, #60]	; (60001ddc <CrashReportClass::clear()+0x40>)
60001d9e:	2300      	movs	r3, #0
	info->ipsr  = 0;
60001da0:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->hfsr  = 0;
60001da4:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->bfar  = 0;
60001da8:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->xpsr  = 0;
60001dac:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001db0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	asm("dsb");
60001db4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
60001db8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001dbc:	4808      	ldr	r0, [pc, #32]	; (60001de0 <CrashReportClass::clear()+0x44>)
60001dbe:	4909      	ldr	r1, [pc, #36]	; (60001de4 <CrashReportClass::clear()+0x48>)
60001dc0:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
60001dc4:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
	asm("dsb");
60001dc8:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001dcc:	f3bf 8f6f 	isb	sy
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001dd0:	4a05      	ldr	r2, [pc, #20]	; (60001de8 <CrashReportClass::clear()+0x4c>)
60001dd2:	6891      	ldr	r1, [r2, #8]
60001dd4:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001dd6:	6313      	str	r3, [r2, #48]	; 0x30
}
60001dd8:	4770      	bx	lr
60001dda:	bf00      	nop
60001ddc:	2027ff00 	.word	0x2027ff00
60001de0:	2027ff80 	.word	0x2027ff80
60001de4:	2027ffa0 	.word	0x2027ffa0
60001de8:	400f8000 	.word	0x400f8000

60001dec <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001dec:	4b12      	ldr	r3, [pc, #72]	; (60001e38 <CrashReportClass::operator bool()+0x4c>)
60001dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001df2:	2b0b      	cmp	r3, #11
60001df4:	d11e      	bne.n	60001e34 <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001df6:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001dfa:	4810      	ldr	r0, [pc, #64]	; (60001e3c <CrashReportClass::operator bool()+0x50>)
{
60001dfc:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001dfe:	4d10      	ldr	r5, [pc, #64]	; (60001e40 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001e00:	4c10      	ldr	r4, [pc, #64]	; (60001e44 <CrashReportClass::operator bool()+0x58>)
60001e02:	e001      	b.n	60001e08 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001e04:	686b      	ldr	r3, [r5, #4]
60001e06:	4675      	mov	r5, lr
60001e08:	f105 0e04 	add.w	lr, r5, #4
60001e0c:	405a      	eors	r2, r3
60001e0e:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e10:	f002 0301 	and.w	r3, r2, #1
60001e14:	3901      	subs	r1, #1
60001e16:	fb00 f303 	mul.w	r3, r0, r3
60001e1a:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001e1e:	d1f7      	bne.n	60001e10 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001e20:	45a6      	cmp	lr, r4
60001e22:	d1ef      	bne.n	60001e04 <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001e24:	4b04      	ldr	r3, [pc, #16]	; (60001e38 <CrashReportClass::operator bool()+0x4c>)
60001e26:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001e2a:	1a80      	subs	r0, r0, r2
60001e2c:	fab0 f080 	clz	r0, r0
60001e30:	0940      	lsrs	r0, r0, #5
}
60001e32:	bd30      	pop	{r4, r5, pc}
	return false;
60001e34:	2000      	movs	r0, #0
}
60001e36:	4770      	bx	lr
60001e38:	2027ff00 	.word	0x2027ff00
60001e3c:	edb88320 	.word	0xedb88320
60001e40:	2027ff80 	.word	0x2027ff80
60001e44:	2027ffa8 	.word	0x2027ffa8

60001e48 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001e48:	4770      	bx	lr
60001e4a:	bf00      	nop

60001e4c <startup_default_middle_hook>:
60001e4c:	4770      	bx	lr
60001e4e:	bf00      	nop

60001e50 <startup_default_late_hook>:
60001e50:	4770      	bx	lr
60001e52:	bf00      	nop

60001e54 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001e54:	bf00      	nop
60001e56:	4770      	bx	lr

60001e58 <configure_cache>:
{
60001e58:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001e5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e5e:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e60:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e62:	482b      	ldr	r0, [pc, #172]	; (60001f10 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001e64:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e68:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e6c:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e6e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001e72:	4828      	ldr	r0, [pc, #160]	; (60001f14 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e74:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001e78:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001e7a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001e7e:	4826      	ldr	r0, [pc, #152]	; (60001f18 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001e80:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001e84:	4a25      	ldr	r2, [pc, #148]	; (60001f1c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001e86:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001e8a:	4c25      	ldr	r4, [pc, #148]	; (60001f20 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001e8c:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001e90:	4824      	ldr	r0, [pc, #144]	; (60001f24 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001e92:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001e96:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001e9a:	4c23      	ldr	r4, [pc, #140]	; (60001f28 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001e9c:	4823      	ldr	r0, [pc, #140]	; (60001f2c <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001e9e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001ea2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001ea6:	4c22      	ldr	r4, [pc, #136]	; (60001f30 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001ea8:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001eac:	4821      	ldr	r0, [pc, #132]	; (60001f34 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001eae:	4a22      	ldr	r2, [pc, #136]	; (60001f38 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001eb0:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001eb4:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001eb8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ebc:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ec0:	4c1e      	ldr	r4, [pc, #120]	; (60001f3c <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ec2:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ec4:	481e      	ldr	r0, [pc, #120]	; (60001f40 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ec6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001eca:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ece:	4a1d      	ldr	r2, [pc, #116]	; (60001f44 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ed0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001ed4:	4c1c      	ldr	r4, [pc, #112]	; (60001f48 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ed6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001eda:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001edc:	481b      	ldr	r0, [pc, #108]	; (60001f4c <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001ede:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001ee2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001ee6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001eea:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001eee:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001ef2:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001ef6:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001efa:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001efe:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001f02:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001f06:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001f0a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001f0e:	4770      	bx	lr
60001f10:	1000003f 	.word	0x1000003f
60001f14:	03080025 	.word	0x03080025
60001f18:	00100009 	.word	0x00100009
60001f1c:	2001ece0 	.word	0x2001ece0
60001f20:	00200013 	.word	0x00200013
60001f24:	07020021 	.word	0x07020021
60001f28:	20000014 	.word	0x20000014
60001f2c:	13080025 	.word	0x13080025
60001f30:	10000009 	.word	0x10000009
60001f34:	20200016 	.word	0x20200016
60001f38:	130b0027 	.word	0x130b0027
60001f3c:	40000017 	.word	0x40000017
60001f40:	60000018 	.word	0x60000018
60001f44:	070b002f 	.word	0x070b002f
60001f48:	70000019 	.word	0x70000019
60001f4c:	130b002f 	.word	0x130b002f

60001f50 <configure_external_ram>:
{
60001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f52:	4bb8      	ldr	r3, [pc, #736]	; (60002234 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f54:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f56:	4eb8      	ldr	r6, [pc, #736]	; (60002238 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f58:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f5a:	4fb8      	ldr	r7, [pc, #736]	; (6000223c <configure_external_ram+0x2ec>)
{
60001f5c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f5e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f62:	49b7      	ldr	r1, [pc, #732]	; (60002240 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f64:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f68:	4db6      	ldr	r5, [pc, #728]	; (60002244 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f6a:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001f6e:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001f72:	4cb5      	ldr	r4, [pc, #724]	; (60002248 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001f74:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f78:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f7c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f80:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f84:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001f88:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f8c:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001f8e:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001f90:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001f92:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001f94:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001fa2:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fa6:	4aa9      	ldr	r2, [pc, #676]	; (6000224c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001fa8:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001fac:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001fb0:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001fb4:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001fb8:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fbc:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001fbe:	4ba4      	ldr	r3, [pc, #656]	; (60002250 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fc0:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001fc2:	48a4      	ldr	r0, [pc, #656]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001fc4:	49a4      	ldr	r1, [pc, #656]	; (60002258 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001fc6:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fc8:	4aa4      	ldr	r2, [pc, #656]	; (6000225c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fca:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001fcc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001fd0:	f043 030c 	orr.w	r3, r3, #12
60001fd4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001fd8:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001fdc:	6803      	ldr	r3, [r0, #0]
60001fde:	f043 0302 	orr.w	r3, r3, #2
60001fe2:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001fe4:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fe6:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001fe8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fec:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001fee:	4b9c      	ldr	r3, [pc, #624]	; (60002260 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ff0:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001ff2:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ff4:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001ff6:	4c9b      	ldr	r4, [pc, #620]	; (60002264 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ff8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ffa:	4a9b      	ldr	r2, [pc, #620]	; (60002268 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002000:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60002002:	68c3      	ldr	r3, [r0, #12]
60002004:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60002008:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000200a:	6a03      	ldr	r3, [r0, #32]
6000200c:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000200e:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002010:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002012:	6a03      	ldr	r3, [r0, #32]
60002014:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60002016:	4a95      	ldr	r2, [pc, #596]	; (6000226c <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002018:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000201a:	4c95      	ldr	r4, [pc, #596]	; (60002270 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000201c:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000201e:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60002020:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60002022:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60002024:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60002028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000202c:	f043 0301 	orr.w	r3, r3, #1
60002030:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002034:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002038:	498e      	ldr	r1, [pc, #568]	; (60002274 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000203a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000203e:	f043 0301 	orr.w	r3, r3, #1
60002042:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002046:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000204a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000204c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000204e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002050:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002054:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002056:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002058:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000205a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000205e:	6803      	ldr	r3, [r0, #0]
60002060:	f023 0302 	bic.w	r3, r3, #2
60002064:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002066:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002068:	4b83      	ldr	r3, [pc, #524]	; (60002278 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000206a:	4984      	ldr	r1, [pc, #528]	; (6000227c <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000206c:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000206e:	f843 2b04 	str.w	r2, [r3], #4
60002072:	428b      	cmp	r3, r1
60002074:	d1fb      	bne.n	6000206e <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60002076:	4a77      	ldr	r2, [pc, #476]	; (60002254 <configure_external_ram+0x304>)
60002078:	6813      	ldr	r3, [r2, #0]
6000207a:	f043 0301 	orr.w	r3, r3, #1
6000207e:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60002080:	6813      	ldr	r3, [r2, #0]
60002082:	f013 0301 	ands.w	r3, r3, #1
60002086:	d1fb      	bne.n	60002080 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002088:	487a      	ldr	r0, [pc, #488]	; (60002274 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000208a:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
6000208c:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002090:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002092:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002096:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002098:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
6000209c:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020a0:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600020a4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020a8:	4975      	ldr	r1, [pc, #468]	; (60002280 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600020aa:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020ae:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020b2:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020b6:	4873      	ldr	r0, [pc, #460]	; (60002284 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020b8:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020bc:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600020c0:	4c71      	ldr	r4, [pc, #452]	; (60002288 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020c2:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600020c6:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600020ca:	4970      	ldr	r1, [pc, #448]	; (6000228c <configure_external_ram+0x33c>)
600020cc:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600020d0:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600020d2:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600020d6:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020da:	485e      	ldr	r0, [pc, #376]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600020dc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020e0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600020e4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020e8:	6943      	ldr	r3, [r0, #20]
600020ea:	07da      	lsls	r2, r3, #31
600020ec:	d5fc      	bpl.n	600020e8 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600020ee:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600020f0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020f6:	4957      	ldr	r1, [pc, #348]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600020f8:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600020fa:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020fe:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002102:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002106:	694b      	ldr	r3, [r1, #20]
60002108:	07db      	lsls	r3, r3, #31
6000210a:	d5fc      	bpl.n	60002106 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000210c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000210e:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002110:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002114:	4a4f      	ldr	r2, [pc, #316]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002116:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002118:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000211c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002120:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002124:	6953      	ldr	r3, [r2, #20]
60002126:	07df      	lsls	r7, r3, #31
60002128:	d5fc      	bpl.n	60002124 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000212a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000212c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000212e:	4858      	ldr	r0, [pc, #352]	; (60002290 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002130:	4948      	ldr	r1, [pc, #288]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002132:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002134:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002138:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000213c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002140:	694b      	ldr	r3, [r1, #20]
60002142:	07de      	lsls	r6, r3, #31
60002144:	d5fc      	bpl.n	60002140 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60002146:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000214a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000214e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60002150:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002152:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002154:	4293      	cmp	r3, r2
60002156:	d165      	bne.n	60002224 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002158:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000215a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000215e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002160:	483c      	ldr	r0, [pc, #240]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60002162:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002166:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000216a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000216e:	6943      	ldr	r3, [r0, #20]
60002170:	07dd      	lsls	r5, r3, #31
60002172:	d5fc      	bpl.n	6000216e <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002174:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002176:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000217a:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000217c:	4a35      	ldr	r2, [pc, #212]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000217e:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60002180:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002184:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002188:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000218c:	6953      	ldr	r3, [r2, #20]
6000218e:	07dc      	lsls	r4, r3, #31
60002190:	d5fc      	bpl.n	6000218c <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002192:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002194:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002198:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000219c:	492d      	ldr	r1, [pc, #180]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000219e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021a0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021a4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021a8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ac:	694b      	ldr	r3, [r1, #20]
600021ae:	07d8      	lsls	r0, r3, #31
600021b0:	d5fc      	bpl.n	600021ac <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021b2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021b4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021bc:	4a25      	ldr	r2, [pc, #148]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021be:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600021c0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021c4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021c8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021cc:	6953      	ldr	r3, [r2, #20]
600021ce:	07d9      	lsls	r1, r3, #31
600021d0:	d5fc      	bpl.n	600021cc <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021d2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021d4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021d8:	482d      	ldr	r0, [pc, #180]	; (60002290 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021da:	491e      	ldr	r1, [pc, #120]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021dc:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021de:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021e2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ea:	694b      	ldr	r3, [r1, #20]
600021ec:	07da      	lsls	r2, r3, #31
600021ee:	d5fc      	bpl.n	600021ea <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600021f0:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600021f4:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021f8:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600021fa:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021fc:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600021fe:	4293      	cmp	r3, r2
60002200:	d050      	beq.n	600022a4 <configure_external_ram+0x354>
60002202:	2508      	movs	r5, #8
60002204:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60002208:	4922      	ldr	r1, [pc, #136]	; (60002294 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
6000220a:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
6000220c:	4b22      	ldr	r3, [pc, #136]	; (60002298 <configure_external_ram+0x348>)
			external_psram_size = 16;
6000220e:	4a23      	ldr	r2, [pc, #140]	; (6000229c <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002210:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60002212:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60002214:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002216:	2301      	movs	r3, #1
60002218:	4821      	ldr	r0, [pc, #132]	; (600022a0 <configure_external_ram+0x350>)
6000221a:	4422      	add	r2, r4
6000221c:	f000 fa1c 	bl	60002658 <__sm_set_pool_veneer>
}
60002220:	b003      	add	sp, #12
60002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60002224:	4b1e      	ldr	r3, [pc, #120]	; (600022a0 <configure_external_ram+0x350>)
60002226:	2200      	movs	r2, #0
60002228:	e9c3 2200 	strd	r2, r2, [r3]
6000222c:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60002230:	b003      	add	sp, #12
60002232:	bdf0      	pop	{r4, r5, r6, r7, pc}
60002234:	401f8000 	.word	0x401f8000
60002238:	0001b0f9 	.word	0x0001b0f9
6000223c:	000110f9 	.word	0x000110f9
60002240:	401f8400 	.word	0x401f8400
60002244:	000170f9 	.word	0x000170f9
60002248:	400fc000 	.word	0x400fc000
6000224c:	1ffffcff 	.word	0x1ffffcff
60002250:	a0000300 	.word	0xa0000300
60002254:	402a4000 	.word	0x402a4000
60002258:	402a8000 	.word	0x402a8000
6000225c:	ffff0012 	.word	0xffff0012
60002260:	00f737ff 	.word	0x00f737ff
60002264:	80000040 	.word	0x80000040
60002268:	7cf0ff00 	.word	0x7cf0ff00
6000226c:	830f00ff 	.word	0x830f00ff
60002270:	00020063 	.word	0x00020063
60002274:	5af05af0 	.word	0x5af05af0
60002278:	402a4200 	.word	0x402a4200
6000227c:	402a4300 	.word	0x402a4300
60002280:	3018049f 	.word	0x3018049f
60002284:	0a1806eb 	.word	0x0a1806eb
60002288:	0a180638 	.word	0x0a180638
6000228c:	26013206 	.word	0x26013206
60002290:	00030004 	.word	0x00030004
60002294:	70000000 	.word	0x70000000
60002298:	70000000 	.word	0x70000000
6000229c:	2001ec9b 	.word	0x2001ec9b
600022a0:	2001e638 	.word	0x2001e638
	FLEXSPI2_IPCR0 = addr;
600022a4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022ac:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022ae:	4808      	ldr	r0, [pc, #32]	; (600022d0 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
600022b0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022b4:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022b8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022bc:	6943      	ldr	r3, [r0, #20]
600022be:	07db      	lsls	r3, r3, #31
600022c0:	d5fc      	bpl.n	600022bc <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022c2:	2301      	movs	r3, #1
600022c4:	2510      	movs	r5, #16
600022c6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
600022ca:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
600022cc:	e79c      	b.n	60002208 <configure_external_ram+0x2b8>
600022ce:	bf00      	nop
600022d0:	402a4000 	.word	0x402a4000

600022d4 <usb_pll_start>:
{
600022d4:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600022d6:	4a15      	ldr	r2, [pc, #84]	; (6000232c <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600022d8:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600022da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600022de:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600022e2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600022e6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600022ea:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600022ee:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600022f0:	f013 0f02 	tst.w	r3, #2
600022f4:	d10e      	bne.n	60002314 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600022f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600022fa:	d00f      	beq.n	6000231c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600022fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60002300:	d00e      	beq.n	60002320 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60002302:	2b00      	cmp	r3, #0
60002304:	daf3      	bge.n	600022ee <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60002306:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000230a:	d10b      	bne.n	60002324 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000230c:	065b      	lsls	r3, r3, #25
6000230e:	d50b      	bpl.n	60002328 <usb_pll_start+0x54>
}
60002310:	bcf0      	pop	{r4, r5, r6, r7}
60002312:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002314:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60002316:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60002318:	6190      	str	r0, [r2, #24]
			continue;
6000231a:	e7e8      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000231c:	6155      	str	r5, [r2, #20]
			continue;
6000231e:	e7e6      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60002320:	6156      	str	r6, [r2, #20]
			continue;
60002322:	e7e4      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60002324:	6191      	str	r1, [r2, #24]
			continue;
60002326:	e7e2      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002328:	6157      	str	r7, [r2, #20]
			continue;
6000232a:	e7e0      	b.n	600022ee <usb_pll_start+0x1a>
6000232c:	400d8000 	.word	0x400d8000

60002330 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002330:	4a3f      	ldr	r2, [pc, #252]	; (60002430 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002332:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60002334:	493f      	ldr	r1, [pc, #252]	; (60002434 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002336:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000233a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000233e:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002342:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60002438 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002346:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000234a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 6000243c <tempmon_init+0x10c>
{
6000234e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002354:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002358:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000235c:	4d38      	ldr	r5, [pc, #224]	; (60002440 <tempmon_init+0x110>)
6000235e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002360:	4c38      	ldr	r4, [pc, #224]	; (60002444 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002362:	4839      	ldr	r0, [pc, #228]	; (60002448 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002364:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002366:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000236a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000236c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002374:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002378:	ee07 1a10 	vmov	s14, r1
6000237c:	4b33      	ldr	r3, [pc, #204]	; (6000244c <tempmon_init+0x11c>)
6000237e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002382:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002384:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002388:	4931      	ldr	r1, [pc, #196]	; (60002450 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002392:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002396:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000239a:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000239e:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023a2:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023aa:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023ae:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023b2:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600023b6:	4827      	ldr	r0, [pc, #156]	; (60002454 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023b8:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023bc:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023c0:	ee75 5a87 	vadd.f32	s11, s11, s14
600023c4:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023c8:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023cc:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023d0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023d8:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023e0:	ee16 3a10 	vmov	r3, s12
600023e4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023ec:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600023f0:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023f2:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023f6:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600023fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
600023fe:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60002402:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60002404:	4914      	ldr	r1, [pc, #80]	; (60002458 <tempmon_init+0x128>)
60002406:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000240a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000240e:	f043 0302 	orr.w	r3, r3, #2
60002412:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60002416:	4b11      	ldr	r3, [pc, #68]	; (6000245c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002418:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000241c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002420:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002424:	2201      	movs	r2, #1
}
60002426:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002428:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000242c:	4770      	bx	lr
6000242e:	bf00      	nop
60002430:	400d8100 	.word	0x400d8100
60002434:	401f4400 	.word	0x401f4400
60002438:	42aa0000 	.word	0x42aa0000
6000243c:	42b40000 	.word	0x42b40000
60002440:	2001e788 	.word	0x2001e788
60002444:	2001e784 	.word	0x2001e784
60002448:	2001e78c 	.word	0x2001e78c
6000244c:	2001e790 	.word	0x2001e790
60002450:	0fff0000 	.word	0x0fff0000
60002454:	e000e400 	.word	0xe000e400
60002458:	20008c00 	.word	0x20008c00
6000245c:	000083e1 	.word	0x000083e1

60002460 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002460:	4b31      	ldr	r3, [pc, #196]	; (60002528 <usb_init+0xc8>)
60002462:	f640 7261 	movw	r2, #3937	; 0xf61
{
60002466:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002468:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000246c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60002470:	f000 f8c6 	bl	60002600 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002474:	4a2d      	ldr	r2, [pc, #180]	; (6000252c <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60002476:	492e      	ldr	r1, [pc, #184]	; (60002530 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002478:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000247c:	482d      	ldr	r0, [pc, #180]	; (60002534 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000247e:	f043 0303 	orr.w	r3, r3, #3
60002482:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002486:	4b2c      	ldr	r3, [pc, #176]	; (60002538 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002488:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000248c:	6802      	ldr	r2, [r0, #0]
6000248e:	421a      	tst	r2, r3
60002490:	d103      	bne.n	6000249a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60002492:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60002496:	079a      	lsls	r2, r3, #30
60002498:	d01b      	beq.n	600024d2 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000249a:	4a25      	ldr	r2, [pc, #148]	; (60002530 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
6000249c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600024a0:	4b24      	ldr	r3, [pc, #144]	; (60002534 <usb_init+0xd4>)
600024a2:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600024a4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024a8:	f043 0302 	orr.w	r3, r3, #2
600024ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600024b0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024b4:	079b      	lsls	r3, r3, #30
600024b6:	d4fb      	bmi.n	600024b0 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600024bc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600024c0:	4b1c      	ldr	r3, [pc, #112]	; (60002534 <usb_init+0xd4>)
600024c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024c6:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600024ca:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600024cc:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
600024ce:	f000 f89b 	bl	60002608 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600024d2:	4a18      	ldr	r2, [pc, #96]	; (60002534 <usb_init+0xd4>)
600024d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024d8:	4c15      	ldr	r4, [pc, #84]	; (60002530 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600024da:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600024dc:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024de:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024e0:	4b16      	ldr	r3, [pc, #88]	; (6000253c <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600024e2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024e4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024e8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024ec:	4618      	mov	r0, r3
600024ee:	f000 f8a3 	bl	60002638 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600024f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024f6:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600024f8:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600024fc:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002500:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60002502:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60002506:	641a      	str	r2, [r3, #64]	; 0x40
60002508:	4b0d      	ldr	r3, [pc, #52]	; (60002540 <usb_init+0xe0>)
6000250a:	4a0e      	ldr	r2, [pc, #56]	; (60002544 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000250c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60002510:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60002514:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60002518:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000251c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000251e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60002522:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60002526:	bd10      	pop	{r4, pc}
60002528:	400d8000 	.word	0x400d8000
6000252c:	400fc000 	.word	0x400fc000
60002530:	402e0000 	.word	0x402e0000
60002534:	400d9000 	.word	0x400d9000
60002538:	001e1c00 	.word	0x001e1c00
6000253c:	20000000 	.word	0x20000000
60002540:	20008c00 	.word	0x20008c00
60002544:	000085c9 	.word	0x000085c9

60002548 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60002548:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000254a:	4b0e      	ldr	r3, [pc, #56]	; (60002584 <_reboot_Teensyduino_+0x3c>)
6000254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000254e:	079b      	lsls	r3, r3, #30
60002550:	d400      	bmi.n	60002554 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60002552:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60002554:	b672      	cpsid	i
		USB1_USBCMD = 0;
60002556:	4b0c      	ldr	r3, [pc, #48]	; (60002588 <_reboot_Teensyduino_+0x40>)
60002558:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000255a:	4a0c      	ldr	r2, [pc, #48]	; (6000258c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
6000255c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002560:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002564:	490a      	ldr	r1, [pc, #40]	; (60002590 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002566:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000256a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000256c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000256e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002572:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60002576:	4807      	ldr	r0, [pc, #28]	; (60002594 <_reboot_Teensyduino_+0x4c>)
60002578:	4a07      	ldr	r2, [pc, #28]	; (60002598 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000257a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
6000257c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000257e:	689b      	ldr	r3, [r3, #8]
60002580:	4798      	blx	r3
	}
	__builtin_unreachable();
60002582:	bf00      	nop
60002584:	401f4400 	.word	0x401f4400
60002588:	402e0000 	.word	0x402e0000
6000258c:	400ac000 	.word	0x400ac000
60002590:	00200003 	.word	0x00200003
60002594:	20208000 	.word	0x20208000
60002598:	eb120000 	.word	0xeb120000

6000259c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000259c:	4b10      	ldr	r3, [pc, #64]	; (600025e0 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000259e:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025a0:	4a10      	ldr	r2, [pc, #64]	; (600025e4 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025a2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025a4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600025a8:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025aa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025ac:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600025b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025b2:	f441 7140 	orr.w	r1, r1, #768	; 0x300
600025b6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025b8:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600025ba:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600025bc:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025be:	061b      	lsls	r3, r3, #24
600025c0:	d4fc      	bmi.n	600025bc <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600025c2:	4a09      	ldr	r2, [pc, #36]	; (600025e8 <analog_init+0x4c>)
600025c4:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600025c8:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600025ca:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600025cc:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600025ce:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025d0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600025d4:	d1fb      	bne.n	600025ce <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600025d6:	4a05      	ldr	r2, [pc, #20]	; (600025ec <analog_init+0x50>)
600025d8:	7013      	strb	r3, [r2, #0]
}
600025da:	f85d 4b04 	ldr.w	r4, [sp], #4
600025de:	4770      	bx	lr
600025e0:	400fc000 	.word	0x400fc000
600025e4:	400c4000 	.word	0x400c4000
600025e8:	400c8000 	.word	0x400c8000
600025ec:	2001ec9a 	.word	0x2001ec9a

600025f0 <_init>:
600025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600025f2:	bf00      	nop
600025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
600025f6:	bc08      	pop	{r3}
600025f8:	469e      	mov	lr, r3
600025fa:	4770      	bx	lr
600025fc:	0000      	movs	r0, r0
	...

60002600 <__usb_init_serialnumber_veneer>:
60002600:	f85f f000 	ldr.w	pc, [pc]	; 60002604 <__usb_init_serialnumber_veneer+0x4>
60002604:	00008d39 	.word	0x00008d39

60002608 <__delay_veneer>:
60002608:	f85f f000 	ldr.w	pc, [pc]	; 6000260c <__delay_veneer+0x4>
6000260c:	00007e2d 	.word	0x00007e2d

60002610 <___ZN5Print5printEl_veneer>:
60002610:	f85f f000 	ldr.w	pc, [pc]	; 60002614 <___ZN5Print5printEl_veneer+0x4>
60002614:	000078b1 	.word	0x000078b1

60002618 <___ZN5Print10printFloatEdh_veneer>:
60002618:	f85f f000 	ldr.w	pc, [pc]	; 6000261c <___ZN5Print10printFloatEdh_veneer+0x4>
6000261c:	00007949 	.word	0x00007949

60002620 <____libc_init_array_veneer>:
60002620:	f85f f000 	ldr.w	pc, [pc]	; 60002624 <____libc_init_array_veneer+0x4>
60002624:	0000bc0d 	.word	0x0000bc0d

60002628 <__main_veneer>:
60002628:	f85f f000 	ldr.w	pc, [pc]	; 6000262c <__main_veneer+0x4>
6000262c:	00007fed 	.word	0x00007fed

60002630 <__set_arm_clock_veneer>:
60002630:	f85f f000 	ldr.w	pc, [pc]	; 60002634 <__set_arm_clock_veneer+0x4>
60002634:	00007b3d 	.word	0x00007b3d

60002638 <__memset_veneer>:
60002638:	f85f f000 	ldr.w	pc, [pc]	; 6000263c <__memset_veneer+0x4>
6000263c:	0000b995 	.word	0x0000b995

60002640 <___ZN5Print7printlnEv_veneer>:
60002640:	f85f f000 	ldr.w	pc, [pc]	; 60002644 <___ZN5Print7printlnEv_veneer+0x4>
60002644:	000078c9 	.word	0x000078c9

60002648 <___ZN5Print11printNumberEmhh_veneer>:
60002648:	f85f f000 	ldr.w	pc, [pc]	; 6000264c <___ZN5Print11printNumberEmhh_veneer+0x4>
6000264c:	0000791d 	.word	0x0000791d

60002650 <__pwm_init_veneer>:
60002650:	f85f f000 	ldr.w	pc, [pc]	; 60002654 <__pwm_init_veneer+0x4>
60002654:	00009655 	.word	0x00009655

60002658 <__sm_set_pool_veneer>:
60002658:	f85f f000 	ldr.w	pc, [pc]	; 6000265c <__sm_set_pool_veneer+0x4>
6000265c:	00009799 	.word	0x00009799

60002660 <__frame_dummy_init_array_entry>:
60002660:	00000045 00000815 000014e9 000073dd     E............s..
60002670:	00007611                                .v..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;  // ref manual 20.3.3.1.3 page 1231
		uint32_t lo2 = SNVS_HPRTCLR;
		if (lo1 == lo2 && hi1 == hi2) {
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      2c:	1049      	asrs	r1, r1, #1
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	4770      	bx	lr
      38:	20008ec0 	.word	0x20008ec0
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
      3c:	20008ec0 	.word	0x20008ec0
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags) {
    return m_fFile   ? m_fFile->ls(pr, flags)
           : m_xFile ? m_xFile->ls(pr, flags)
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	2001e6c8 	.word	0x2001e6c8
      64:	60020800 	.word	0x60020800

00000068 <loop>:
      68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
      6c:	4c83      	ldr	r4, [pc, #524]	; (27c <loop+0x214>)
      6e:	b08b      	sub	sp, #44	; 0x2c
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
      70:	4d83      	ldr	r5, [pc, #524]	; (280 <loop+0x218>)
      72:	6823      	ldr	r3, [r4, #0]
      74:	3301      	adds	r3, #1
      76:	6023      	str	r3, [r4, #0]
      78:	f001 fa82 	bl	1580 <getDataCount()>
      7c:	882b      	ldrh	r3, [r5, #0]
  }
}
      7e:	4283      	cmp	r3, r0
    *m_xFile = *from.m_xFile;
      80:	4b80      	ldr	r3, [pc, #512]	; (284 <loop+0x21c>)
}
      82:	681a      	ldr	r2, [r3, #0]
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      84:	bf38      	it	cc
    char sign;
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	8028      	strhcc	r0, [r5, #0]
      88:	07d2      	lsls	r2, r2, #31
}
      8a:	d513      	bpl.n	b4 <loop+0x4c>
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	4f7e      	ldr	r7, [pc, #504]	; (288 <loop+0x220>)
      8e:	f009 f943 	bl	9318 <usb_serial_available>
      92:	b9f0      	cbnz	r0, d2 <loop+0x6a>
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
      94:	8838      	ldrh	r0, [r7, #0]
		buf[sizeof(buf) - 1] = '0';
      96:	4e7d      	ldr	r6, [pc, #500]	; (28c <loop+0x224>)
      98:	b200      	sxth	r0, r0
		i = sizeof(buf) - 1;
      9a:	f001 f9b5 	bl	1408 <saveData(short)>
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
      9e:	4b7c      	ldr	r3, [pc, #496]	; (290 <loop+0x228>)
      a0:	8038      	strh	r0, [r7, #0]
      a2:	681f      	ldr	r7, [r3, #0]
  uint32_t freeClusterCount() {
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    if (switchSpi && !setDedicatedSpi(true)) {
      return 0;
    }
    uint32_t rtn = Vol::freeClusterCount();
      a4:	6833      	ldr	r3, [r6, #0]
      a6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
      aa:	42bb      	cmp	r3, r7
      ac:	d31b      	bcc.n	e6 <loop+0x7e>
      ae:	b00b      	add	sp, #44	; 0x2c
      b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static void i2c_write_data(uint8_t address, uint8_t reg, uint8_t *buffer, uint16_t nbuf)
{
  Wire.beginTransmission(address);
  Wire.write(reg);
  for(int ii=0; ii<nbuf; ii++) Wire.write(buffer[ii]);
      b4:	4a77      	ldr	r2, [pc, #476]	; (294 <loop+0x22c>)
      b6:	4f74      	ldr	r7, [pc, #464]	; (288 <loop+0x220>)
      b8:	6812      	ldr	r2, [r2, #0]
      ba:	2a01      	cmp	r2, #1
  return str - name;

fail:
  *name = 0;
  return 0;
}
      bc:	f04f 32ff 	mov.w	r2, #4294967295
      c0:	bf18      	it	ne
  for (uint8_t is = 2; is <= m_setCount; is++) {
      c2:	2200      	movne	r2, #0
      c4:	803a      	strh	r2, [r7, #0]
      c6:	2201      	movs	r2, #1
      c8:	601a      	str	r2, [r3, #0]
      ca:	f009 f925 	bl	9318 <usb_serial_available>
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      ce:	2800      	cmp	r0, #0
}
      d0:	d0e0      	beq.n	94 <loop+0x2c>
	while (newdiv > 65535 && prescale < 7) {
      d2:	f009 f965 	bl	93a0 <usb_serial_getchar>
      d6:	b2c0      	uxtb	r0, r0
      d8:	2873      	cmp	r0, #115	; 0x73
      da:	d026      	beq.n	12a <loop+0xc2>
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    else if (c == '.')
      isFraction = true;
      dc:	2865      	cmp	r0, #101	; 0x65
      de:	d11c      	bne.n	11a <loop+0xb2>
      e0:	2304      	movs	r3, #4
    return 0; // zero returned if timeout
      e2:	803b      	strh	r3, [r7, #0]
      e4:	e7d6      	b.n	94 <loop+0x2c>
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      e6:	a808      	add	r0, sp, #32
      e8:	f001 fc02 	bl	18f0 <rtc_get_datetime(datetime_t*)>
      ec:	4b6a      	ldr	r3, [pc, #424]	; (298 <loop+0x230>)
      ee:	f9b3 3000 	ldrsh.w	r3, [r3]
      f2:	b9eb      	cbnz	r3, 130 <loop+0xc8>
      f4:	4b69      	ldr	r3, [pc, #420]	; (29c <loop+0x234>)
      f6:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 2dc <loop+0x274>
      fa:	9307      	str	r3, [sp, #28]
      fc:	4b68      	ldr	r3, [pc, #416]	; (2a0 <loop+0x238>)
      fe:	9306      	str	r3, [sp, #24]
     100:	2300      	movs	r3, #0
     102:	9a07      	ldr	r2, [sp, #28]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     104:	6037      	str	r7, [r6, #0]
     106:	6013      	str	r3, [r2, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
     108:	9a06      	ldr	r2, [sp, #24]
     10a:	6023      	str	r3, [r4, #0]
     10c:	f8cb 3000 	str.w	r3, [fp]
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          break;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
     110:	802b      	strh	r3, [r5, #0]
     112:	6013      	str	r3, [r2, #0]
     114:	b00b      	add	sp, #44	; 0x2c
     116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     11a:	286d      	cmp	r0, #109	; 0x6d
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     11c:	d17d      	bne.n	21a <loop+0x1b2>
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     11e:	4a5e      	ldr	r2, [pc, #376]	; (298 <loop+0x230>)
     120:	8813      	ldrh	r3, [r2, #0]
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     122:	f1c3 0301 	rsb	r3, r3, #1
     126:	8013      	strh	r3, [r2, #0]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     128:	e7b4      	b.n	94 <loop+0x2c>
				break;
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     12a:	2300      	movs	r3, #0
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     12c:	803b      	strh	r3, [r7, #0]
     12e:	e7b1      	b.n	94 <loop+0x2c>
     130:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
	if (!wait_idle()) return 4;
     134:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
	return rxBufferLength;
}
     138:	9304      	str	r3, [sp, #16]
     13a:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
     13e:	4959      	ldr	r1, [pc, #356]	; (2a4 <loop+0x23c>)
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     140:	9303      	str	r3, [sp, #12]
     142:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     146:	4858      	ldr	r0, [pc, #352]	; (2a8 <loop+0x240>)
     148:	9302      	str	r3, [sp, #8]
     14a:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
     14e:	f8df b18c 	ldr.w	fp, [pc, #396]	; 2dc <loop+0x274>
     152:	9301      	str	r3, [sp, #4]
     154:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     158:	9300      	str	r3, [sp, #0]
     15a:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     15e:	f007 fbcf 	bl	7900 <Print::printf(char const*, ...)>
     162:	2103      	movs	r1, #3
        if (flags & T_CREATE) {
          df->createTimeMs = ms10;
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
     164:	4851      	ldr	r0, [pc, #324]	; (2ac <loop+0x244>)
     166:	f009 f941 	bl	93ec <usb_serial_write>
     16a:	2300      	movs	r3, #0
     16c:	220a      	movs	r2, #10
     16e:	6821      	ldr	r1, [r4, #0]
  bool skip = data[0] == EXFAT_TYPE_FILE;
     170:	484d      	ldr	r0, [pc, #308]	; (2a8 <loop+0x240>)
     172:	f007 fbd3 	bl	791c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     176:	2101      	movs	r1, #1
     178:	484d      	ldr	r0, [pc, #308]	; (2b0 <loop+0x248>)
     17a:	f009 f937 	bl	93ec <usb_serial_write>
	n = __builtin_bswap32(n);
     17e:	4b47      	ldr	r3, [pc, #284]	; (29c <loop+0x234>)
     180:	220a      	movs	r2, #10
     182:	f8db 1000 	ldr.w	r1, [fp]
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     186:	9307      	str	r3, [sp, #28]
     188:	2300      	movs	r3, #0
     18a:	4847      	ldr	r0, [pc, #284]	; (2a8 <loop+0x240>)
     18c:	f007 fbc6 	bl	791c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     190:	2101      	movs	r1, #1
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     192:	4847      	ldr	r0, [pc, #284]	; (2b0 <loop+0x248>)
     194:	f009 f92a 	bl	93ec <usb_serial_write>
     198:	9907      	ldr	r1, [sp, #28]
     19a:	2300      	movs	r3, #0
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     19c:	220a      	movs	r2, #10
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     19e:	6809      	ldr	r1, [r1, #0]
     1a0:	4841      	ldr	r0, [pc, #260]	; (2a8 <loop+0x240>)
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     1a2:	f007 fbbb 	bl	791c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	n = __builtin_bswap32(n);
     1a6:	2101      	movs	r1, #1
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     1a8:	4841      	ldr	r0, [pc, #260]	; (2b0 <loop+0x248>)
     1aa:	f009 f91f 	bl	93ec <usb_serial_write>
	if (priority(ch3) < priority(ch4)) swap(ch3, ch4);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
     1ae:	882a      	ldrh	r2, [r5, #0]
     1b0:	4940      	ldr	r1, [pc, #256]	; (2b4 <loop+0x24c>)
	c = c1.channel;
     1b2:	483d      	ldr	r0, [pc, #244]	; (2a8 <loop+0x240>)
	c1.channel = c2.channel;
     1b4:	f007 fba4 	bl	7900 <Print::printf(char const*, ...)>
	c1.TCD = c2.TCD;
     1b8:	2102      	movs	r1, #2
	t = c1.TCD;
     1ba:	483f      	ldr	r0, [pc, #252]	; (2b8 <loop+0x250>)
	c1.TCD = c2.TCD;
     1bc:	f009 f916 	bl	93ec <usb_serial_write>
}
     1c0:	4b3e      	ldr	r3, [pc, #248]	; (2bc <loop+0x254>)
     1c2:	493f      	ldr	r1, [pc, #252]	; (2c0 <loop+0x258>)
     1c4:	681a      	ldr	r2, [r3, #0]
     1c6:	4838      	ldr	r0, [pc, #224]	; (2a8 <loop+0x240>)
     1c8:	f007 fb9a 	bl	7900 <Print::printf(char const*, ...)>
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     1cc:	4b34      	ldr	r3, [pc, #208]	; (2a0 <loop+0x238>)
     1ce:	2101      	movs	r1, #1
  bool syncDevice() { return m_blockDev->syncDevice(); }
     1d0:	4837      	ldr	r0, [pc, #220]	; (2b0 <loop+0x248>)
     1d2:	9306      	str	r3, [sp, #24]
     1d4:	f009 f90a 	bl	93ec <usb_serial_write>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
     1d8:	9906      	ldr	r1, [sp, #24]
     1da:	2300      	movs	r3, #0
     1dc:	220a      	movs	r2, #10
     1de:	4832      	ldr	r0, [pc, #200]	; (2a8 <loop+0x240>)
     1e0:	6809      	ldr	r1, [r1, #0]
     1e2:	f007 fb9b 	bl	791c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     1e6:	2104      	movs	r1, #4
     1e8:	4836      	ldr	r0, [pc, #216]	; (2c4 <loop+0x25c>)
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
     1ea:	f009 f8ff 	bl	93ec <usb_serial_write>
     1ee:	4b36      	ldr	r3, [pc, #216]	; (2c8 <loop+0x260>)
     1f0:	f9b3 3000 	ldrsh.w	r3, [r3]
     1f4:	bb0b      	cbnz	r3, 23a <loop+0x1d2>
     1f6:	4699      	mov	r9, r3
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
     1f8:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2e0 <loop+0x278>

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
     1fc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2a8 <loop+0x240>
			if (d > 2) {
     200:	4b32      	ldr	r3, [pc, #200]	; (2cc <loop+0x264>)
				div = d-2;
     202:	4651      	mov	r1, sl
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     204:	4640      	mov	r0, r8
     206:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     20a:	f109 0901 	add.w	r9, r9, #1
     20e:	f007 fb77 	bl	7900 <Print::printf(char const*, ...)>
     212:	f1b9 0f08 	cmp.w	r9, #8
     216:	d1f3      	bne.n	200 <loop+0x198>
     218:	e772      	b.n	100 <loop+0x98>
     21a:	283a      	cmp	r0, #58	; 0x3a
     21c:	d102      	bne.n	224 <loop+0x1bc>
     21e:	f001 fc29 	bl	1a74 <menu1()>
     222:	e737      	b.n	94 <loop+0x2c>
     224:	283f      	cmp	r0, #63	; 0x3f
     226:	d102      	bne.n	22e <loop+0x1c6>
     228:	f001 fc2e 	bl	1a88 <menu2()>
     22c:	e732      	b.n	94 <loop+0x2c>
     22e:	2821      	cmp	r0, #33	; 0x21
     230:	f47f af30 	bne.w	94 <loop+0x2c>
void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     234:	f001 fcf4 	bl	1c20 <menu3()>
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     238:	e72c      	b.n	94 <loop+0x2c>
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2e4 <loop+0x27c>
     23e:	4924      	ldr	r1, [pc, #144]	; (2d0 <loop+0x268>)
};
     240:	f8df 9064 	ldr.w	r9, [pc, #100]	; 2a8 <loop+0x240>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     244:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     248:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     24c:	4648      	mov	r0, r9
     24e:	f007 fb57 	bl	7900 <Print::printf(char const*, ...)>
     252:	491f      	ldr	r1, [pc, #124]	; (2d0 <loop+0x268>)
     254:	45d0      	cmp	r8, sl
     256:	d1f7      	bne.n	248 <loop+0x1e0>
     258:	f8df 808c 	ldr.w	r8, [pc, #140]	; 2e8 <loop+0x280>
     25c:	491d      	ldr	r1, [pc, #116]	; (2d4 <loop+0x26c>)
     25e:	f8d8 2000 	ldr.w	r2, [r8]
     262:	4811      	ldr	r0, [pc, #68]	; (2a8 <loop+0x240>)
     264:	f007 fb4c 	bl	7900 <Print::printf(char const*, ...)>
     268:	2260      	movs	r2, #96	; 0x60
     26a:	2100      	movs	r1, #0
     26c:	481a      	ldr	r0, [pc, #104]	; (2d8 <loop+0x270>)
     26e:	f00b fb91 	bl	b994 <memset>
     272:	2300      	movs	r3, #0
     274:	f8c8 3000 	str.w	r3, [r8]
      {
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
        Serial.printf("%2d",max_stat);

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
        max_stat=0;        
     278:	e742      	b.n	100 <loop+0x98>
     27a:	bf00      	nop
     27c:	2001e0b4 	.word	0x2001e0b4
     280:	2001ec80 	.word	0x2001ec80
     284:	2000c53c 	.word	0x2000c53c
     288:	2001ec82 	.word	0x2001ec82
     28c:	2001e0b0 	.word	0x2001e0b0
     290:	2001ec54 	.word	0x2001ec54
     294:	2001ec68 	.word	0x2001ec68
     298:	2001ec84 	.word	0x2001ec84
     29c:	2001e6e4 	.word	0x2001e6e4
     2a0:	2001e620 	.word	0x2001e620
     2a4:	20007a48 	.word	0x20007a48
     2a8:	200085d4 	.word	0x200085d4
     2ac:	20007a6c 	.word	0x20007a6c
     2b0:	20000440 	.word	0x20000440
     2b4:	20007a70 	.word	0x20007a70
     2b8:	20007a74 	.word	0x20007a74
     2bc:	2001e61c 	.word	0x2001e61c
     2c0:	20007a78 	.word	0x20007a78
     2c4:	20007a7c 	.word	0x20007a7c
     2c8:	2001ec88 	.word	0x2001ec88
     2cc:	2001e6a0 	.word	0x2001e6a0
     2d0:	20007a8c 	.word	0x20007a8c
     2d4:	20007a94 	.word	0x20007a94
     2d8:	2001e6e8 	.word	0x2001e6e8
     2dc:	2001e6e0 	.word	0x2001e6e0
     2e0:	20007a84 	.word	0x20007a84
     2e4:	2001e6e4 	.word	0x2001e6e4
     2e8:	2001e6c0 	.word	0x2001e6c0

000002ec <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(1);} // wait for setup() to finish
     2ec:	b510      	push	{r4, lr}
     2ee:	4c0b      	ldr	r4, [pc, #44]	; (31c <setup1()+0x30>)
     2f0:	6823      	ldr	r3, [r4, #0]
     2f2:	b92b      	cbnz	r3, 300 <setup1()+0x14>
     2f4:	2001      	movs	r0, #1
     2f6:	f007 fd99 	bl	7e2c <delay>
     2fa:	6823      	ldr	r3, [r4, #0]
     2fc:	2b00      	cmp	r3, #0
     2fe:	d0f9      	beq.n	2f4 <setup1()+0x8>
  i2s_setup();
     300:	f000 f9dc 	bl	6bc <i2s_setup()>
  dma_setup();
     304:	f000 fa20 	bl	748 <dma_setup()>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     308:	210b      	movs	r1, #11
     30a:	4805      	ldr	r0, [pc, #20]	; (320 <setup1()+0x34>)
     30c:	f009 f86e 	bl	93ec <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     310:	4804      	ldr	r0, [pc, #16]	; (324 <setup1()+0x38>)

  Serial.println("Setup1 done");
}
     312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     316:	f007 bad7 	b.w	78c8 <Print::println()>
     31a:	bf00      	nop
     31c:	2001e748 	.word	0x2001e748
     320:	2000051c 	.word	0x2000051c
     324:	200085d4 	.word	0x200085d4

00000328 <setup>:
{
     328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     32c:	4d4c      	ldr	r5, [pc, #304]	; (460 <setup+0x138>)
     32e:	b087      	sub	sp, #28
     330:	4c4c      	ldr	r4, [pc, #304]	; (464 <setup+0x13c>)
				if (elapsed > 750) break;
     332:	f240 28ee 	movw	r8, #750	; 0x2ee
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     336:	4f4c      	ldr	r7, [pc, #304]	; (468 <setup+0x140>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     338:	f8df 9154 	ldr.w	r9, [pc, #340]	; 490 <setup+0x168>
		uint32_t millis_begin = systick_millis_count;
     33c:	682e      	ldr	r6, [r5, #0]
		yield();
     33e:	f009 f8d3 	bl	94e8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     342:	7823      	ldrb	r3, [r4, #0]
     344:	2b00      	cmp	r3, #0
     346:	d069      	beq.n	41c <setup+0xf4>
     348:	783b      	ldrb	r3, [r7, #0]
     34a:	07da      	lsls	r2, r3, #31
     34c:	d566      	bpl.n	41c <setup+0xf4>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     34e:	682b      	ldr	r3, [r5, #0]
     350:	f8d9 2000 	ldr.w	r2, [r9]
     354:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     356:	2b0e      	cmp	r3, #14
     358:	d960      	bls.n	41c <setup+0xf4>
     35a:	682b      	ldr	r3, [r5, #0]
  while(millis()<10000) if(Serial) { termon=1; break;}
     35c:	f242 760f 	movw	r6, #9999	; 0x270f
     360:	42b3      	cmp	r3, r6
     362:	d813      	bhi.n	38c <setup+0x64>
     364:	4f40      	ldr	r7, [pc, #256]	; (468 <setup+0x140>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     366:	f8df 8128 	ldr.w	r8, [pc, #296]	; 490 <setup+0x168>
		yield();
     36a:	f009 f8bd 	bl	94e8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     36e:	7823      	ldrb	r3, [r4, #0]
     370:	2b00      	cmp	r3, #0
     372:	d05d      	beq.n	430 <setup+0x108>
     374:	783b      	ldrb	r3, [r7, #0]
     376:	07db      	lsls	r3, r3, #31
     378:	d55a      	bpl.n	430 <setup+0x108>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     37a:	682b      	ldr	r3, [r5, #0]
     37c:	f8d8 2000 	ldr.w	r2, [r8]
     380:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     382:	2b0e      	cmp	r3, #14
     384:	d954      	bls.n	430 <setup+0x108>
     386:	4b39      	ldr	r3, [pc, #228]	; (46c <setup+0x144>)
     388:	2201      	movs	r2, #1
     38a:	601a      	str	r2, [r3, #0]
    if(CrashReport) Serial.print(CrashReport);
     38c:	4838      	ldr	r0, [pc, #224]	; (470 <setup+0x148>)
     38e:	f014 f87b 	bl	14488 <___ZN16CrashReportClasscvbEv_veneer>
     392:	2800      	cmp	r0, #0
     394:	d154      	bne.n	440 <setup+0x118>
  rtc_setup();
     396:	2113      	movs	r1, #19
     398:	2012      	movs	r0, #18
     39a:	f001 faa7 	bl	18ec <rtc_setup(unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     39e:	2110      	movs	r1, #16
     3a0:	4834      	ldr	r0, [pc, #208]	; (474 <setup+0x14c>)
     3a2:	f009 f823 	bl	93ec <usb_serial_write>
     3a6:	4834      	ldr	r0, [pc, #208]	; (478 <setup+0x150>)
     3a8:	f007 fa8e 	bl	78c8 <Print::println()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     3ac:	a804      	add	r0, sp, #16
     3ae:	f001 fa9f 	bl	18f0 <rtc_get_datetime(datetime_t*)>
     3b2:	2800      	cmp	r0, #0
     3b4:	d04c      	beq.n	450 <setup+0x128>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     3b6:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     3ba:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     3be:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     3c2:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     3c6:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     3ca:	e9cd 2102 	strd	r2, r1, [sp, #8]
     3ce:	e9cd 0400 	strd	r0, r4, [sp]
     3d2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  ready=1;
     3d6:	2401      	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     3d8:	4928      	ldr	r1, [pc, #160]	; (47c <setup+0x154>)
     3da:	4827      	ldr	r0, [pc, #156]	; (478 <setup+0x150>)
     3dc:	f007 fa90 	bl	7900 <Print::printf(char const*, ...)>
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     3e0:	4825      	ldr	r0, [pc, #148]	; (478 <setup+0x150>)
     3e2:	f007 fa71 	bl	78c8 <Print::println()>
     3e6:	210b      	movs	r1, #11
     3e8:	4825      	ldr	r0, [pc, #148]	; (480 <setup+0x158>)
     3ea:	f008 ffff 	bl	93ec <usb_serial_write>
     3ee:	4822      	ldr	r0, [pc, #136]	; (478 <setup+0x150>)
     3f0:	f007 fa6a 	bl	78c8 <Print::println()>
  filing_init();
     3f4:	f000 fc5e 	bl	cb4 <filing_init()>
     3f8:	210a      	movs	r1, #10
     3fa:	4822      	ldr	r0, [pc, #136]	; (484 <setup+0x15c>)
     3fc:	f008 fff6 	bl	93ec <usb_serial_write>
     400:	481d      	ldr	r0, [pc, #116]	; (478 <setup+0x150>)
     402:	f007 fa61 	bl	78c8 <Print::println()>
  ready=1;
     406:	4b20      	ldr	r3, [pc, #128]	; (488 <setup+0x160>)
     408:	601c      	str	r4, [r3, #0]
    setup1();
     40a:	f7ff ff6f 	bl	2ec <setup1()>
    pinMode(13,OUTPUT);
     40e:	4621      	mov	r1, r4
     410:	200d      	movs	r0, #13
     412:	f007 fdb3 	bl	7f7c <pinMode>
}
     416:	b007      	add	sp, #28
     418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     41c:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     41e:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     420:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     422:	b192      	cbz	r2, 44a <setup+0x122>
				if (elapsed > 2000) break;
     424:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     428:	d897      	bhi.n	35a <setup+0x32>
			yield();
     42a:	f009 f85d 	bl	94e8 <yield>
     42e:	e786      	b.n	33e <setup+0x16>
     430:	682b      	ldr	r3, [r5, #0]
  while(millis()<10000) if(Serial) { termon=1; break;}
     432:	42b3      	cmp	r3, r6
     434:	d999      	bls.n	36a <setup+0x42>
    if(CrashReport) Serial.print(CrashReport);
     436:	480e      	ldr	r0, [pc, #56]	; (470 <setup+0x148>)
     438:	f014 f826 	bl	14488 <___ZN16CrashReportClasscvbEv_veneer>
     43c:	2800      	cmp	r0, #0
     43e:	d0aa      	beq.n	396 <setup+0x6e>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     440:	490d      	ldr	r1, [pc, #52]	; (478 <setup+0x150>)
     442:	480b      	ldr	r0, [pc, #44]	; (470 <setup+0x148>)
     444:	f014 f818 	bl	14478 <___ZNK16CrashReportClass7printToER5Print_veneer>
     448:	e7a5      	b.n	396 <setup+0x6e>
				if (elapsed > 750) break;
     44a:	4543      	cmp	r3, r8
     44c:	d9ed      	bls.n	42a <setup+0x102>
     44e:	e784      	b.n	35a <setup+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     450:	2114      	movs	r1, #20
     452:	480e      	ldr	r0, [pc, #56]	; (48c <setup+0x164>)
     454:	f008 ffca 	bl	93ec <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     458:	4807      	ldr	r0, [pc, #28]	; (478 <setup+0x150>)
     45a:	f007 fa35 	bl	78c8 <Print::println()>
     45e:	e7aa      	b.n	3b6 <setup+0x8e>
     460:	2001ec54 	.word	0x2001ec54
     464:	2001eca3 	.word	0x2001eca3
     468:	2001eca2 	.word	0x2001eca2
     46c:	2001ec68 	.word	0x2001ec68
     470:	200085c8 	.word	0x200085c8
     474:	20007aa4 	.word	0x20007aa4
     478:	200085d4 	.word	0x200085d4
     47c:	20007ad0 	.word	0x20007ad0
     480:	20007af8 	.word	0x20007af8
     484:	20007b04 	.word	0x20007b04
     488:	2001e748 	.word	0x2001e748
     48c:	20007ab8 	.word	0x20007ab8
     490:	2001ec74 	.word	0x2001ec74

00000494 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     494:	4b36      	ldr	r3, [pc, #216]	; (570 <acq_isr()+0xdc>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     496:	4a37      	ldr	r2, [pc, #220]	; (574 <acq_isr()+0xe0>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     498:	4937      	ldr	r1, [pc, #220]	; (578 <acq_isr()+0xe4>)
  {
     49a:	b510      	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     49c:	681c      	ldr	r4, [r3, #0]
     49e:	7918      	ldrb	r0, [r3, #4]
     4a0:	6923      	ldr	r3, [r4, #16]
     4a2:	77c8      	strb	r0, [r1, #31]
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     4a4:	4293      	cmp	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     4a6:	bf28      	it	cs
     4a8:	f5a2 6280 	subcs.w	r2, r2, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     4ac:	4611      	mov	r1, r2
	asm("dsb");
     4ae:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
     4b2:	f502 6080 	add.w	r0, r2, #1024	; 0x400
     4b6:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
     4ba:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
     4be:	4298      	cmp	r0, r3
     4c0:	bf34      	ite	cc
     4c2:	2001      	movcc	r0, #1
     4c4:	2020      	movcs	r0, #32
     4c6:	eb02 1040 	add.w	r0, r2, r0, lsl #5
	} while (location < end_addr);
     4ca:	4283      	cmp	r3, r0
		SCB_CACHE_DCIMVAC = location;
     4cc:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
     4d0:	461a      	mov	r2, r3
	} while (location < end_addr);
     4d2:	f103 0320 	add.w	r3, r3, #32
     4d6:	d1f8      	bne.n	4ca <acq_isr()+0x36>
	asm("dsb");
     4d8:	f3bf 8f4f 	dsb	sy
	asm("isb");
     4dc:	f3bf 8f6f 	isb	sy
        arm_dcache_delete((void*)src, sizeof(i2s_buffer) / 2);
    #endif

    // extract data
    #if NCH==1
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     4e0:	4b26      	ldr	r3, [pc, #152]	; (57c <acq_isr()+0xe8>)
     4e2:	2200      	movs	r2, #0
     4e4:	4c26      	ldr	r4, [pc, #152]	; (580 <acq_isr()+0xec>)
     4e6:	f9b3 0000 	ldrsh.w	r0, [r3]
     4ea:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
     4ee:	4423      	add	r3, r4
     4f0:	4103      	asrs	r3, r0
     4f2:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
     4f6:	3201      	adds	r2, #1
     4f8:	2a80      	cmp	r2, #128	; 0x80
     4fa:	d1f6      	bne.n	4ea <acq_isr()+0x56>
#endif

int32_t acqbias=0;
/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     4fc:	4c21      	ldr	r4, [pc, #132]	; (584 <acq_isr()+0xf0>)

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     4fe:	2300      	movs	r3, #0
     500:	4a21      	ldr	r2, [pc, #132]	; (588 <acq_isr()+0xf4>)
{ procCount++;
     502:	6820      	ldr	r0, [r4, #0]
     504:	3001      	adds	r0, #1
     506:	6020      	str	r0, [r4, #0]
     508:	4610      	mov	r0, r2
  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     50a:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
     50e:	3301      	adds	r3, #1
     510:	2b80      	cmp	r3, #128	; 0x80
     512:	f840 4f04 	str.w	r4, [r0, #4]!
     516:	d1f8      	bne.n	50a <acq_isr()+0x76>
     518:	4b1c      	ldr	r3, [pc, #112]	; (58c <acq_isr()+0xf8>)
  
  float tmp=0.0f;
     51a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 590 <acq_isr()+0xfc>
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii];
     51e:	edd2 7a01 	vldr	s15, [r2, #4]
     522:	3204      	adds	r2, #4
     524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     528:	4293      	cmp	r3, r2
     52a:	ee37 7a27 	vadd.f32	s14, s14, s15
     52e:	d1f6      	bne.n	51e <acq_isr()+0x8a>
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     530:	eddf 7a18 	vldr	s15, [pc, #96]	; 594 <acq_isr()+0x100>

  if(proc==0)
     534:	4b18      	ldr	r3, [pc, #96]	; (598 <acq_isr()+0x104>)
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     536:	ee27 7a27 	vmul.f32	s14, s14, s15
     53a:	4a18      	ldr	r2, [pc, #96]	; (59c <acq_isr()+0x108>)
  if(proc==0)
     53c:	f9b3 3000 	ldrsh.w	r3, [r3]
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     540:	eebd 7ac7 	vcvt.s32.f32	s14, s14
     544:	ed82 7a00 	vstr	s14, [r2]
  if(proc==0)
     548:	b113      	cbz	r3, 550 <acq_isr()+0xbc>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     54a:	2b01      	cmp	r3, #1
     54c:	d00a      	beq.n	564 <acq_isr()+0xd0>
  }
     54e:	bd10      	pop	{r4, pc}
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     550:	4813      	ldr	r0, [pc, #76]	; (5a0 <acq_isr()+0x10c>)
     552:	f001 f829 	bl	15a8 <pushData(unsigned long*)>
     556:	2800      	cmp	r0, #0
     558:	d1f9      	bne.n	54e <acq_isr()+0xba>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     55a:	4a12      	ldr	r2, [pc, #72]	; (5a4 <acq_isr()+0x110>)
     55c:	6813      	ldr	r3, [r2, #0]
     55e:	3301      	adds	r3, #1
     560:	6013      	str	r3, [r2, #0]
  }
     562:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     564:	480e      	ldr	r0, [pc, #56]	; (5a0 <acq_isr()+0x10c>)
     566:	f000 f967 	bl	838 <compress(void*)>
     56a:	2800      	cmp	r0, #0
     56c:	d1ef      	bne.n	54e <acq_isr()+0xba>
     56e:	e7f4      	b.n	55a <acq_isr()+0xc6>
     570:	2001d74c 	.word	0x2001d74c
     574:	20200400 	.word	0x20200400
     578:	400e8000 	.word	0x400e8000
     57c:	2001ec8c 	.word	0x2001ec8c
     580:	06978000 	.word	0x06978000
     584:	2001e6e0 	.word	0x2001e6e0
     588:	2001e418 	.word	0x2001e418
     58c:	2001e618 	.word	0x2001e618
     590:	00000000 	.word	0x00000000
     594:	3c000000 	.word	0x3c000000
     598:	2001ec88 	.word	0x2001ec88
     59c:	2001e61c 	.word	0x2001e61c
     5a0:	2001e41c 	.word	0x2001e41c
     5a4:	2001e6e4 	.word	0x2001e6e4

000005a8 <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
     5a8:	b510      	push	{r4, lr}
     5aa:	4604      	mov	r4, r0
		release();
     5ac:	f007 f8ac 	bl	7708 <DMAChannel::release()>
	}
     5b0:	4620      	mov	r0, r4
     5b2:	bd10      	pop	{r4, pc}
     5b4:	0000      	movs	r0, r0
	...

000005b8 <setAudioFrequency(int)>:
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5b8:	ee07 0a90 	vmov	s15, r0
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     5bc:	4938      	ldr	r1, [pc, #224]	; (6a0 <setAudioFrequency(int)+0xe8>)
     5be:	0280      	lsls	r0, r0, #10
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5c0:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
     5c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     5c8:	4b36      	ldr	r3, [pc, #216]	; (6a4 <setAudioFrequency(int)+0xec>)
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5ca:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 688 <setAudioFrequency(int)+0xd0>
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     5ce:	fb91 f1f0 	sdiv	r1, r1, r0
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5d2:	ee27 7b06 	vmul.f64	d7, d7, d6
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     5d6:	1c4a      	adds	r2, r1, #1
     5d8:	ee06 2a10 	vmov	s12, r2
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5dc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     5e0:	ee27 7b03 	vmul.f64	d7, d7, d3
     5e4:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 690 <setAudioFrequency(int)+0xd8>
  {
     5e8:	b410      	push	{r4}
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5ea:	ee27 7b06 	vmul.f64	d7, d7, d6
    int c1 = C * c2 - (c0 * c2);
     5ee:	f242 7410 	movw	r4, #10000	; 0x2710
     5f2:	ed9f 5b29 	vldr	d5, [pc, #164]	; 698 <setAudioFrequency(int)+0xe0>
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5f6:	ee87 6b04 	vdiv.f64	d6, d7, d4
    int c0 = C;
     5fa:	eefd 7bc6 	vcvt.s32.f64	s15, d6
     5fe:	ee17 2a90 	vmov	r2, s15
    int c1 = C * c2 - (c0 * c2);
     602:	fb04 f002 	mul.w	r0, r4, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     606:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     60a:	ee07 0a10 	vmov	s14, r0
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     60e:	f442 1289 	orr.w	r2, r2, #1122304	; 0x112000
    int c1 = C * c2 - (c0 * c2);
     612:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     616:	671a      	str	r2, [r3, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     618:	ee96 7b05 	vfnms.f64	d7, d6, d5
     61c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     620:	ee17 2a90 	vmov	r2, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     624:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
     628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     62c:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     636:	671a      	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     638:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     63a:	2a00      	cmp	r2, #0
     63c:	dafc      	bge.n	638 <setAudioFrequency(int)+0x80>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     63e:	f8d3 4170 	ldr.w	r4, [r3, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     642:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     646:	4a18      	ldr	r2, [pc, #96]	; (6a8 <setAudioFrequency(int)+0xf0>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     648:	4818      	ldr	r0, [pc, #96]	; (6ac <setAudioFrequency(int)+0xf4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     64a:	4022      	ands	r2, r4
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     64c:	4c18      	ldr	r4, [pc, #96]	; (6b0 <setAudioFrequency(int)+0xf8>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     64e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     652:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     654:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     658:	671a      	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     65a:	69c2      	ldr	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     65c:	4b15      	ldr	r3, [pc, #84]	; (6b4 <setAudioFrequency(int)+0xfc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     65e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     666:	61c2      	str	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     668:	6a82      	ldr	r2, [r0, #40]	; 0x28
     66a:	4013      	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     66c:	4a12      	ldr	r2, [pc, #72]	; (6b8 <setAudioFrequency(int)+0x100>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     66e:	430b      	orrs	r3, r1
     670:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     674:	6283      	str	r3, [r0, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     676:	6863      	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     678:	401a      	ands	r2, r3
     67a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     67e:	6062      	str	r2, [r4, #4]
  }
     680:	f85d 4b04 	ldr.w	r4, [sp], #4
     684:	4770      	bx	lr
     686:	bf00      	nop
     688:	00000000 	.word	0x00000000
     68c:	40700000 	.word	0x40700000
     690:	00000000 	.word	0x00000000
     694:	4176e360 	.word	0x4176e360
     698:	00000000 	.word	0x00000000
     69c:	40c38800 	.word	0x40c38800
     6a0:	269fb200 	.word	0x269fb200
     6a4:	400d8000 	.word	0x400d8000
     6a8:	ff7f7fff 	.word	0xff7f7fff
     6ac:	400fc000 	.word	0x400fc000
     6b0:	400ac000 	.word	0x400ac000
     6b4:	fffffe00 	.word	0xfffffe00
     6b8:	fff7fff8 	.word	0xfff7fff8

000006bc <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     6bc:	4a19      	ldr	r2, [pc, #100]	; (724 <i2s_setup()+0x68>)
     6be:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     6c0:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     6c2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     6c6:	4c18      	ldr	r4, [pc, #96]	; (728 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     6c8:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     6ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     6ce:	2b00      	cmp	r3, #0
     6d0:	db27      	blt.n	722 <i2s_setup()+0x66>
    int fs = fsamp;
     6d2:	4b16      	ldr	r3, [pc, #88]	; (72c <i2s_setup()+0x70>)
    setAudioFrequency(fs);
     6d4:	6818      	ldr	r0, [r3, #0]
     6d6:	f7ff ff6f 	bl	5b8 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     6da:	4b15      	ldr	r3, [pc, #84]	; (730 <i2s_setup()+0x74>)
     6dc:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     6de:	4915      	ldr	r1, [pc, #84]	; (734 <i2s_setup()+0x78>)
     6e0:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     6e2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     6e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     6ea:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     6ee:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     6f2:	2201      	movs	r2, #1
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     6f4:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     6f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     6fc:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     6fe:	480e      	ldr	r0, [pc, #56]	; (738 <i2s_setup()+0x7c>)
    I2S1_RMR = 0;
     700:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     704:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     708:	490c      	ldr	r1, [pc, #48]	; (73c <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     70a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     70e:	4a0c      	ldr	r2, [pc, #48]	; (740 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     710:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     714:	4b0b      	ldr	r3, [pc, #44]	; (744 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     716:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     71a:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     71e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     722:	bd10      	pop	{r4, pc}
     724:	400fc000 	.word	0x400fc000
     728:	40384000 	.word	0x40384000
     72c:	20008b94 	.word	0x20008b94
     730:	401f8000 	.word	0x401f8000
     734:	401f8400 	.word	0x401f8400
     738:	07000001 	.word	0x07000001
     73c:	00011f1b 	.word	0x00011f1b
     740:	1f1f1f00 	.word	0x1f1f1f00
     744:	92000001 	.word	0x92000001

00000748 <dma_setup()>:
  {
     748:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     74a:	4c1c      	ldr	r4, [pc, #112]	; (7bc <dma_setup()+0x74>)
     74c:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     74e:	4d1c      	ldr	r5, [pc, #112]	; (7c0 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     750:	4620      	mov	r0, r4
     752:	f006 ff7f 	bl	7654 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     756:	6823      	ldr	r3, [r4, #0]
     758:	481a      	ldr	r0, [pc, #104]	; (7c4 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     75a:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     75e:	491a      	ldr	r1, [pc, #104]	; (7c8 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     760:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     762:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     764:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     766:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     768:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     76a:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     76c:	4d17      	ldr	r5, [pc, #92]	; (7cc <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     76e:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     770:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     772:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     774:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     776:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     778:	2204      	movs	r2, #4
     77a:	4915      	ldr	r1, [pc, #84]	; (7d0 <dma_setup()+0x88>)
     77c:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     77e:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     780:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     782:	4d14      	ldr	r5, [pc, #80]	; (7d4 <dma_setup()+0x8c>)
     784:	60da      	str	r2, [r3, #12]
		*mux = 0;
     786:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     78a:	4b13      	ldr	r3, [pc, #76]	; (7d8 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     78c:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     790:	2101      	movs	r1, #1
     792:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     794:	4811      	ldr	r0, [pc, #68]	; (7dc <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     796:	f002 051f 	and.w	r5, r2, #31
     79a:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     79e:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     7a2:	40a9      	lsls	r1, r5
     7a4:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     7a6:	4d0e      	ldr	r5, [pc, #56]	; (7e0 <dma_setup()+0x98>)
     7a8:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     7ac:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     7ae:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     7b0:	490c      	ldr	r1, [pc, #48]	; (7e4 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     7b2:	4b0d      	ldr	r3, [pc, #52]	; (7e8 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     7b4:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     7b6:	7922      	ldrb	r2, [r4, #4]
     7b8:	76da      	strb	r2, [r3, #27]
  }
     7ba:	bd38      	pop	{r3, r4, r5, pc}
     7bc:	2001d74c 	.word	0x2001d74c
     7c0:	02020000 	.word	0x02020000
     7c4:	403840a0 	.word	0x403840a0
     7c8:	20200000 	.word	0x20200000
     7cc:	fffff800 	.word	0xfffff800
     7d0:	400ec000 	.word	0x400ec000
     7d4:	80000013 	.word	0x80000013
     7d8:	38003840 	.word	0x38003840
     7dc:	20008c00 	.word	0x20008c00
     7e0:	00000495 	.word	0x00000495
     7e4:	e000e400 	.word	0xe000e400
     7e8:	400e8000 	.word	0x400e8000

000007ec <acqModifyFrequency(unsigned long)>:
  {
     7ec:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     7ee:	4c08      	ldr	r4, [pc, #32]	; (810 <acqModifyFrequency(unsigned long)+0x24>)
     7f0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     7f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     7f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     7fc:	f7ff fedc 	bl	5b8 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     800:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     804:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     808:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     80c:	bd10      	pop	{r4, pc}
     80e:	bf00      	nop
     810:	40384000 	.word	0x40384000

00000814 <_GLOBAL__sub_I_procCount>:
		begin();
     814:	4805      	ldr	r0, [pc, #20]	; (82c <_GLOBAL__sub_I_procCount+0x18>)
     816:	2100      	movs	r1, #0
  }
}
     818:	b508      	push	{r3, lr}
     81a:	f006 ff1b 	bl	7654 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     81e:	4a04      	ldr	r2, [pc, #16]	; (830 <_GLOBAL__sub_I_procCount+0x1c>)
     820:	4904      	ldr	r1, [pc, #16]	; (834 <_GLOBAL__sub_I_procCount+0x20>)
     822:	4802      	ldr	r0, [pc, #8]	; (82c <_GLOBAL__sub_I_procCount+0x18>)
}
     824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     828:	f008 bff8 	b.w	981c <__aeabi_atexit>
     82c:	2001d74c 	.word	0x2001d74c
     830:	200085f0 	.word	0x200085f0
     834:	000005a9 	.word	0x000005a9

00000838 <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     83c:	b083      	sub	sp, #12
     83e:	4604      	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
     840:	f007 fcaa 	bl	8198 <rtc_get>
     844:	4682      	mov	sl, r0
  uint32_t t1;
  t1 = micros();
     846:	f007 fb45 	bl	7ed4 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     84a:	49a1      	ldr	r1, [pc, #644]	; (ad0 <compress(void*)+0x298>)
     84c:	6822      	ldr	r2, [r4, #0]
     84e:	4623      	mov	r3, r4
     850:	680d      	ldr	r5, [r1, #0]
     852:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     856:	499f      	ldr	r1, [pc, #636]	; (ad4 <compress(void*)+0x29c>)
  t1 = micros();
     858:	4681      	mov	r9, r0
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     85a:	602a      	str	r2, [r5, #0]
     85c:	462c      	mov	r4, r5
     85e:	600a      	str	r2, [r1, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     860:	4629      	mov	r1, r5
     862:	4618      	mov	r0, r3
     864:	3304      	adds	r3, #4
     866:	e9d0 0200 	ldrd	r0, r2, [r0]
     86a:	42b3      	cmp	r3, r6
     86c:	eba2 0200 	sub.w	r2, r2, r0
     870:	f844 2f04 	str.w	r2, [r4, #4]!
     874:	d1f5      	bne.n	862 <compress(void*)+0x2a>
     876:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc

  // find maximum in filtered data
  int32_t mx = 0;
     87a:	2200      	movs	r2, #0
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
     87c:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd;
    if(dd>mx) mx = dd;
     880:	2b00      	cmp	r3, #0
     882:	bfb8      	it	lt
     884:	425b      	neglt	r3, r3
     886:	429a      	cmp	r2, r3
     888:	bfb8      	it	lt
     88a:	461a      	movlt	r2, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     88c:	4281      	cmp	r1, r0
     88e:	d1f5      	bne.n	87c <compress(void*)+0x44>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     890:	2702      	movs	r7, #2
     892:	2101      	movs	r1, #1
     894:	e003      	b.n	89e <compress(void*)+0x66>
     896:	3701      	adds	r7, #1
     898:	2f18      	cmp	r7, #24
     89a:	f000 8110 	beq.w	abe <compress(void*)+0x286>
     89e:	1e7c      	subs	r4, r7, #1
     8a0:	fa01 f304 	lsl.w	r3, r1, r4
     8a4:	4293      	cmp	r3, r2
     8a6:	ddf6      	ble.n	896 <compress(void*)+0x5e>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NSAMP*nb) / MBIT;
     8a8:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
     8ac:	40b9      	lsls	r1, r7
  int ndat = NH+NCH + ncmp;
     8ae:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
     8b2:	1e48      	subs	r0, r1, #1
  int ndat = NH+NCH + ncmp;
     8b4:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     8b6:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
     8ba:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
     8be:	4986      	ldr	r1, [pc, #536]	; (ad8 <compress(void*)+0x2a0>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     8c0:	4d86      	ldr	r5, [pc, #536]	; (adc <compress(void*)+0x2a4>)
  proc_stat[nb-1]++;
     8c2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     8c6:	3201      	adds	r2, #1
     8c8:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     8cc:	682a      	ldr	r2, [r5, #0]
     8ce:	4c84      	ldr	r4, [pc, #528]	; (ae0 <compress(void*)+0x2a8>)
     8d0:	42ba      	cmp	r2, r7
     8d2:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     8d6:	46a3      	mov	fp, r4
     8d8:	4622      	mov	r2, r4
     8da:	bf38      	it	cc
     8dc:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     8de:	f852 1f04 	ldr.w	r1, [r2, #4]!
     8e2:	4001      	ands	r1, r0
     8e4:	4296      	cmp	r6, r2
     8e6:	6011      	str	r1, [r2, #0]
     8e8:	d1f9      	bne.n	8de <compress(void*)+0xa6>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     8ea:	4d7e      	ldr	r5, [pc, #504]	; (ae4 <compress(void*)+0x2ac>)
     8ec:	f44f 7200 	mov.w	r2, #512	; 0x200
     8f0:	2100      	movs	r1, #0
     8f2:	9300      	str	r3, [sp, #0]
     8f4:	4628      	mov	r0, r5
     8f6:	f00b f84d 	bl	b994 <memset>
  *iptr++ = nb | shift<<16;
     8fa:	4a7b      	ldr	r2, [pc, #492]	; (ae8 <compress(void*)+0x2b0>)
  *iptr++ = NCH+ncmp; // number of data after header
     8fc:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     8fe:	2100      	movs	r1, #0
  *iptr++ = nb | shift<<16;
     900:	f9b2 2000 	ldrsh.w	r2, [r2]

  // pack data
  // 
  int nx = MBIT;
     904:	f04f 0c20 	mov.w	ip, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
     908:	2007      	movs	r0, #7
  *iptr++ = NCH+ncmp; // number of data after header
     90a:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
     90c:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
     910:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     912:	f8db 2000 	ldr.w	r2, [fp]
     916:	f8cb 1000 	str.w	r1, [fp]
     91a:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     91c:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     920:	602a      	str	r2, [r5, #0]
  *iptr++ = NCH;
     922:	2201      	movs	r2, #1
  *iptr++ = t1;
     924:	e9c5 a902 	strd	sl, r9, [r5, #8]
  *iptr++ = NCH;
     928:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NSAMP; ii ++)
     92a:	e00a      	b.n	942 <compress(void*)+0x10a>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     92c:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
     930:	4694      	mov	ip, r2
     932:	ea41 010e 	orr.w	r1, r1, lr
     936:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NSAMP; ii ++)
     93a:	42a6      	cmp	r6, r4
     93c:	d018      	beq.n	970 <compress(void*)+0x138>
      {   outData[kk] |= (tempData[ii] << nx);
     93e:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     942:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
     946:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
     948:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
     94c:	dcee      	bgt.n	92c <compress(void*)+0xf4>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     94e:	eba7 0e0c 	sub.w	lr, r7, ip
     952:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
     956:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
     95a:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
     95e:	d12f      	bne.n	9c0 <compress(void*)+0x188>
      {   outData[kk++] |= tempData[ii];
     960:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NSAMP; ii ++)
     962:	42a6      	cmp	r6, r4
          nx=MBIT;
     964:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
     968:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     96c:	4648      	mov	r0, r9
  for (int ii = 0; ii < NSAMP; ii ++)
     96e:	d1e6      	bne.n	93e <compress(void*)+0x106>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     970:	4e5e      	ldr	r6, [pc, #376]	; (aec <compress(void*)+0x2b4>)
     972:	6834      	ldr	r4, [r6, #0]
     974:	eb04 0208 	add.w	r2, r4, r8
     978:	2a80      	cmp	r2, #128	; 0x80
     97a:	dc2d      	bgt.n	9d8 <compress(void*)+0x1a0>
     97c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     980:	4a5b      	ldr	r2, [pc, #364]	; (af0 <compress(void*)+0x2b8>)
     982:	4858      	ldr	r0, [pc, #352]	; (ae4 <compress(void*)+0x2ac>)
     984:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
     988:	4423      	add	r3, r4
     98a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     98e:	2300      	movs	r3, #0
     990:	e001      	b.n	996 <compress(void*)+0x15e>
     992:	f850 1f04 	ldr.w	r1, [r0, #4]!
     996:	3301      	adds	r3, #1
     998:	f842 1f04 	str.w	r1, [r2, #4]!
     99c:	4543      	cmp	r3, r8
     99e:	dbf8      	blt.n	992 <compress(void*)+0x15a>
     9a0:	f1b8 0f00 	cmp.w	r8, #0
     9a4:	f108 33ff 	add.w	r3, r8, #4294967295
     9a8:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
     9ac:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9b0:	bfd8      	it	le
     9b2:	2300      	movle	r3, #0
     9b4:	4423      	add	r3, r4
     9b6:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     9b8:	4638      	mov	r0, r7
     9ba:	b003      	add	sp, #12
     9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     9c0:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
     9c4:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     9c8:	ea4e 0202 	orr.w	r2, lr, r2
     9cc:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     9d0:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
     9d2:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
     9d6:	e7b0      	b.n	93a <compress(void*)+0x102>
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     9d8:	2c7a      	cmp	r4, #122	; 0x7a
     9da:	dd22      	ble.n	a22 <compress(void*)+0x1ea>
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     9dc:	2c7f      	cmp	r4, #127	; 0x7f
     9de:	dc0a      	bgt.n	9f6 <compress(void*)+0x1be>
     9e0:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
     9e4:	4842      	ldr	r0, [pc, #264]	; (af0 <compress(void*)+0x2b8>)
     9e6:	2100      	movs	r1, #0
     9e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     9ec:	0092      	lsls	r2, r2, #2
     9ee:	f00a ffd1 	bl	b994 <memset>
     9f2:	2380      	movs	r3, #128	; 0x80
     9f4:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
     9f6:	483e      	ldr	r0, [pc, #248]	; (af0 <compress(void*)+0x2b8>)
     9f8:	f000 fdd6 	bl	15a8 <pushData(unsigned long*)>
     9fc:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9fe:	ea4f 0288 	mov.w	r2, r8, lsl #2
     a02:	4938      	ldr	r1, [pc, #224]	; (ae4 <compress(void*)+0x2ac>)
      if(!pushData(dout)) ret = 0;
     a04:	bf18      	it	ne
     a06:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     a08:	f1b8 0f00 	cmp.w	r8, #0
     a0c:	4838      	ldr	r0, [pc, #224]	; (af0 <compress(void*)+0x2b8>)
     a0e:	bfd8      	it	le
     a10:	2204      	movle	r2, #4
     a12:	f007 faf3 	bl	7ffc <memcpy>
}
     a16:	4638      	mov	r0, r7
     a18:	f8c6 8000 	str.w	r8, [r6]
     a1c:	b003      	add	sp, #12
     a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     a22:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
     a26:	4832      	ldr	r0, [pc, #200]	; (af0 <compress(void*)+0x2b8>)
     a28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     a2c:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     a30:	616b      	str	r3, [r5, #20]
      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     a32:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     a36:	4d2b      	ldr	r5, [pc, #172]	; (ae4 <compress(void*)+0x2ac>)
     a38:	4423      	add	r3, r4
     a3a:	4629      	mov	r1, r5
     a3c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     a40:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
     a44:	e001      	b.n	a4a <compress(void*)+0x212>
     a46:	f851 2f04 	ldr.w	r2, [r1, #4]!
     a4a:	f843 2f04 	str.w	r2, [r3, #4]!
     a4e:	4298      	cmp	r0, r3
     a50:	d1f9      	bne.n	a46 <compress(void*)+0x20e>
     a52:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
     a54:	4826      	ldr	r0, [pc, #152]	; (af0 <compress(void*)+0x2b8>)
     a56:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
     a5a:	6033      	str	r3, [r6, #0]
     a5c:	f000 fda4 	bl	15a8 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a60:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
     a62:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
     a64:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a66:	4a23      	ldr	r2, [pc, #140]	; (af4 <compress(void*)+0x2bc>)
      if(!pushData(dout)) ret = 0;
     a68:	bf18      	it	ne
     a6a:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
     a6c:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a70:	f8df e070 	ldr.w	lr, [pc, #112]	; ae4 <compress(void*)+0x2ac>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a74:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a76:	f8df c078 	ldr.w	ip, [pc, #120]	; af0 <compress(void*)+0x2b8>
      while (ii < ndat) dout[nout++] = outData[ii++];
     a7a:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a7c:	ea42 0203 	orr.w	r2, r2, r3
     a80:	f04f 0306 	mov.w	r3, #6
     a84:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a86:	6033      	str	r3, [r6, #0]
     a88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     a8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     a90:	e89e 0003 	ldmia.w	lr, {r0, r1}
     a94:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
     a98:	da8e      	bge.n	9b8 <compress(void*)+0x180>
     a9a:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
     a9e:	eb05 0189 	add.w	r1, r5, r9, lsl #2
     aa2:	f10c 0008 	add.w	r0, ip, #8
     aa6:	4442      	add	r2, r8
     aa8:	0092      	lsls	r2, r2, #2
     aaa:	f007 faa7 	bl	7ffc <memcpy>
     aae:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
     ab2:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
     ab4:	4443      	add	r3, r8
     ab6:	6033      	str	r3, [r6, #0]
}
     ab8:	b003      	add	sp, #12
     aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     abe:	2267      	movs	r2, #103	; 0x67
     ac0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
     ac4:	f04f 0868 	mov.w	r8, #104	; 0x68
     ac8:	2361      	movs	r3, #97	; 0x61
     aca:	2417      	movs	r4, #23
     acc:	9201      	str	r2, [sp, #4]
     ace:	e6f6      	b.n	8be <compress(void*)+0x86>
     ad0:	20008bdc 	.word	0x20008bdc
     ad4:	2001ec64 	.word	0x2001ec64
     ad8:	2001e6e8 	.word	0x2001e6e8
     adc:	2001e6c0 	.word	0x2001e6c0
     ae0:	2001de64 	.word	0x2001de64
     ae4:	2001da14 	.word	0x2001da14
     ae8:	2001ec8c 	.word	0x2001ec8c
     aec:	2001e0b8 	.word	0x2001e0b8
     af0:	2001d754 	.word	0x2001d754
     af4:	ffff0000 	.word	0xffff0000

00000af8 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     af8:	2000      	movs	r0, #0
     afa:	4770      	bx	lr

00000afc <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     afc:	4770      	bx	lr
     afe:	bf00      	nop

00000b00 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     b00:	b570      	push	{r4, r5, r6, lr}
     b02:	b082      	sub	sp, #8
     b04:	4606      	mov	r6, r0
     b06:	4614      	mov	r4, r2
     b08:	460d      	mov	r5, r1
    datetime_t t;
    rtc_get_datetime(&t);
     b0a:	4668      	mov	r0, sp
     b0c:	f000 fef0 	bl	18f0 <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
     b10:	f89d 2002 	ldrb.w	r2, [sp, #2]
     b14:	f89d c003 	ldrb.w	ip, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     b18:	f8bd 3000 	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0
     b1c:	2a0c      	cmp	r2, #12
     b1e:	bf98      	it	ls
     b20:	f1bc 0f1f 	cmpls.w	ip, #31
     b24:	d804      	bhi.n	b30 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x30>
     b26:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
     b2a:	b29b      	uxth	r3, r3
     b2c:	2b7f      	cmp	r3, #127	; 0x7f
     b2e:	d920      	bls.n	b72 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
                                              : year << 9 | month << 5 | day;
     b30:	f04f 0c00 	mov.w	ip, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
     b34:	f89d 2005 	ldrb.w	r2, [sp, #5]
     b38:	f89d 3006 	ldrb.w	r3, [sp, #6]
     b3c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
     b40:	2a17      	cmp	r2, #23
     b42:	bf98      	it	ls
     b44:	2b3b      	cmpls	r3, #59	; 0x3b
    *date = FS_DATE(t.year,t.month,t.day);
     b46:	f8a6 c000 	strh.w	ip, [r6]
     b4a:	d801      	bhi.n	b50 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x50>
     b4c:	293b      	cmp	r1, #59	; 0x3b
     b4e:	d905      	bls.n	b5c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5c>
             ? 0
             : hour << 11 | minute << 5 | second >> 1;
     b50:	2300      	movs	r3, #0
    *ms10 = 0;
     b52:	2200      	movs	r2, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
     b54:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
     b56:	7022      	strb	r2, [r4, #0]
}
     b58:	b002      	add	sp, #8
     b5a:	bd70      	pop	{r4, r5, r6, pc}
     b5c:	015b      	lsls	r3, r3, #5
     b5e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    *ms10 = 0;
     b62:	2200      	movs	r2, #0
     b64:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
     b68:	b29b      	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
     b6a:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
     b6c:	7022      	strb	r2, [r4, #0]
}
     b6e:	b002      	add	sp, #8
     b70:	bd70      	pop	{r4, r5, r6, pc}
                                              : year << 9 | month << 5 | day;
     b72:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
     b76:	ea4c 2c43 	orr.w	ip, ip, r3, lsl #9
     b7a:	fa1f fc8c 	uxth.w	ip, ip
     b7e:	e7d9      	b.n	b34 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x34>

00000b80 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template <class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     b80:	4b04      	ldr	r3, [pc, #16]	; (b94 <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b82:	b510      	push	{r4, lr}
     b84:	4604      	mov	r4, r0
     b86:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() { close(); }
     b8a:	f003 feb3 	bl	48f4 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b8e:	4620      	mov	r0, r4
     b90:	bd10      	pop	{r4, pc}
     b92:	bf00      	nop
     b94:	200006f8 	.word	0x200006f8

00000b98 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile   ? m_fFile->read(buf, count)
     b98:	6c83      	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
     b9a:	b500      	push	{lr}
     b9c:	b083      	sub	sp, #12
     b9e:	b163      	cbz	r3, bba <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     ba0:	2201      	movs	r2, #1
     ba2:	f10d 0107 	add.w	r1, sp, #7
     ba6:	4618      	mov	r0, r3
     ba8:	f002 fe1c 	bl	37e4 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     bac:	2801      	cmp	r0, #1
     bae:	d10c      	bne.n	bca <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     bb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
     bb4:	b003      	add	sp, #12
     bb6:	f85d fb04 	ldr.w	pc, [sp], #4
     bba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->read(buf, count)
     bbc:	b128      	cbz	r0, bca <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     bbe:	2201      	movs	r2, #1
     bc0:	f10d 0107 	add.w	r1, sp, #7
     bc4:	f001 f914 	bl	1df0 <ExFatFile::read(void*, unsigned int)>
     bc8:	e7f0      	b.n	bac <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     bca:	f04f 30ff 	mov.w	r0, #4294967295
     bce:	e7f1      	b.n	bb4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000bd0 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     bd0:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bd2:	b113      	cbz	r3, bda <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     bd4:	4618      	mov	r0, r3
     bd6:	f002 bed9 	b.w	398c <FatFile::peek()>
     bda:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
     bdc:	b108      	cbz	r0, be2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     bde:	f001 b9d7 	b.w	1f90 <ExFatFile::peek()>
  int peek() { return BaseFile::peek(); }
     be2:	f04f 30ff 	mov.w	r0, #4294967295
     be6:	4770      	bx	lr

00000be8 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     be8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bea:	b153      	cbz	r3, c02 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     bec:	7818      	ldrb	r0, [r3, #0]
     bee:	f010 0008 	ands.w	r0, r0, #8
     bf2:	d00d      	beq.n	c10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     bf4:	69d8      	ldr	r0, [r3, #28]
     bf6:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     bf8:	1ac0      	subs	r0, r0, r3
     bfa:	bf48      	it	mi
     bfc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     c00:	4770      	bx	lr
     c02:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     c04:	b1a3      	cbz	r3, c30 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
    return n > INT_MAX ? INT_MAX : n;
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     c06:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     c0a:	f010 0008 	ands.w	r0, r0, #8
     c0e:	d100      	bne.n	c12 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  int available() { return BaseFile::available(); }
     c10:	4770      	bx	lr
     c12:	6918      	ldr	r0, [r3, #16]
     c14:	6819      	ldr	r1, [r3, #0]
     c16:	695a      	ldr	r2, [r3, #20]
     c18:	1a40      	subs	r0, r0, r1
     c1a:	685b      	ldr	r3, [r3, #4]
     c1c:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     c20:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     c24:	f173 0300 	sbcs.w	r3, r3, #0
     c28:	d3f2      	bcc.n	c10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     c2a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     c2e:	4770      	bx	lr
     c30:	4618      	mov	r0, r3
     c32:	e7ed      	b.n	c10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000c34 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     c34:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c36:	b113      	cbz	r3, c3e <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     c38:	4618      	mov	r0, r3
     c3a:	f002 bfab 	b.w	3b94 <FatFile::sync()>
     c3e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
     c40:	b108      	cbz	r0, c46 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     c42:	f001 bd7d 	b.w	2740 <ExFatFile::sync()>
  void flush() { BaseFile::sync(); }
     c46:	4770      	bx	lr

00000c48 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     c48:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c4a:	b113      	cbz	r3, c52 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     c4c:	4618      	mov	r0, r3
     c4e:	f002 bfa7 	b.w	3ba0 <FatFile::write(void const*, unsigned int)>
     c52:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     c54:	b108      	cbz	r0, c5a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     c56:	f001 bf07 	b.w	2a68 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     c5a:	4770      	bx	lr

00000c5c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) { return BaseFile::write(b); }
     c5c:	b500      	push	{lr}
    return m_fFile   ? m_fFile->write(buf, count)
     c5e:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c60:	b083      	sub	sp, #12
     c62:	f88d 1007 	strb.w	r1, [sp, #7]
     c66:	b143      	cbz	r3, c7a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     c68:	2201      	movs	r2, #1
     c6a:	f10d 0107 	add.w	r1, sp, #7
     c6e:	4618      	mov	r0, r3
     c70:	f002 ff96 	bl	3ba0 <FatFile::write(void const*, unsigned int)>
     c74:	b003      	add	sp, #12
     c76:	f85d fb04 	ldr.w	pc, [sp], #4
     c7a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     c7c:	2800      	cmp	r0, #0
     c7e:	d0f9      	beq.n	c74 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     c80:	2201      	movs	r2, #1
     c82:	f10d 0107 	add.w	r1, sp, #7
     c86:	f001 feef 	bl	2a68 <ExFatFile::write(void const*, unsigned int)>
     c8a:	b003      	add	sp, #12
     c8c:	f85d fb04 	ldr.w	pc, [sp], #4

00000c90 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     c90:	b538      	push	{r3, r4, r5, lr}
     c92:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     c94:	b149      	cbz	r1, caa <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
     c96:	4608      	mov	r0, r1
     c98:	460d      	mov	r5, r1
     c9a:	f00b fa11 	bl	c0c0 <strlen>
     c9e:	6823      	ldr	r3, [r4, #0]
     ca0:	4602      	mov	r2, r0
     ca2:	4629      	mov	r1, r5
     ca4:	685b      	ldr	r3, [r3, #4]
     ca6:	4620      	mov	r0, r4
     ca8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     caa:	4620      	mov	r0, r4
     cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     cb0:	f006 be0a 	b.w	78c8 <Print::println()>

00000cb4 <filing_init()>:
#    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     cb4:	4b26      	ldr	r3, [pc, #152]	; (d50 <filing_init()+0x9c>)
     cb6:	4a27      	ldr	r2, [pc, #156]	; (d54 <filing_init()+0xa0>)
     cb8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  #endif

  FsDateTime::callback = dateTime;
     cbc:	4926      	ldr	r1, [pc, #152]	; (d58 <filing_init()+0xa4>)
     cbe:	4827      	ldr	r0, [pc, #156]	; (d5c <filing_init()+0xa8>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     cc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
{
     cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     cc8:	4f25      	ldr	r7, [pc, #148]	; (d60 <filing_init()+0xac>)
     cca:	b082      	sub	sp, #8
  FsDateTime::callback = dateTime;
     ccc:	2505      	movs	r5, #5
     cce:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d74 <filing_init()+0xc0>
     cd2:	f207 468c 	addw	r6, r7, #1164	; 0x48c
     cd6:	6008      	str	r0, [r1, #0]
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     cd8:	6013      	str	r3, [r2, #0]
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     cda:	f04f 0100 	mov.w	r1, #0
     cde:	4630      	mov	r0, r6
     ce0:	f005 fb04 	bl	62ec <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     ce4:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     ce6:	f8c7 6488 	str.w	r6, [r7, #1160]	; 0x488
    return m_card && !m_card->errorCode();
     cea:	f004 fe71 	bl	59d0 <SdioCard::errorCode() const>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cee:	2301      	movs	r3, #1
    return m_card && !m_card->errorCode();
     cf0:	4604      	mov	r4, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cf2:	4638      	mov	r0, r7
     cf4:	461a      	mov	r2, r3
    return m_card && !m_card->errorCode();
     cf6:	b99c      	cbnz	r4, d20 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cf8:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
     cfc:	9400      	str	r4, [sp, #0]
     cfe:	f003 fe63 	bl	49c8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
     d02:	b168      	cbz	r0, d20 <filing_init()+0x6c>
     d04:	2111      	movs	r1, #17
     d06:	4817      	ldr	r0, [pc, #92]	; (d64 <filing_init()+0xb0>)
     d08:	f008 fb70 	bl	93ec <usb_serial_write>
     d0c:	4816      	ldr	r0, [pc, #88]	; (d68 <filing_init()+0xb4>)
     d0e:	f006 fddb 	bl	78c8 <Print::println()>

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
     d12:	2301      	movs	r3, #1
     d14:	4a15      	ldr	r2, [pc, #84]	; (d6c <filing_init()+0xb8>)
      return 1;
     d16:	4618      	mov	r0, r3
      haveStore=1;
     d18:	6013      	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
     d1a:	b002      	add	sp, #8
     d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d20:	210f      	movs	r1, #15
     d22:	4640      	mov	r0, r8
     d24:	f008 fb62 	bl	93ec <usb_serial_write>
     d28:	480f      	ldr	r0, [pc, #60]	; (d68 <filing_init()+0xb4>)
     d2a:	f006 fdcd 	bl	78c8 <Print::println()>
      delay(100);
     d2e:	2064      	movs	r0, #100	; 0x64
     d30:	f007 f87c 	bl	7e2c <delay>
  for(int ii=0; ii<5;ii++)
     d34:	3d01      	subs	r5, #1
     d36:	d1d0      	bne.n	cda <filing_init()+0x26>
     d38:	211b      	movs	r1, #27
     d3a:	480d      	ldr	r0, [pc, #52]	; (d70 <filing_init()+0xbc>)
     d3c:	f008 fb56 	bl	93ec <usb_serial_write>
     d40:	4809      	ldr	r0, [pc, #36]	; (d68 <filing_init()+0xb4>)
     d42:	f006 fdc1 	bl	78c8 <Print::println()>
  return 0;
     d46:	4628      	mov	r0, r5
}
     d48:	b002      	add	sp, #8
     d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d4e:	bf00      	nop
     d50:	401f4400 	.word	0x401f4400
     d54:	2000c178 	.word	0x2000c178
     d58:	2001e06c 	.word	0x2001e06c
     d5c:	00000b01 	.word	0x00000b01
     d60:	2001e798 	.word	0x2001e798
     d64:	200003cc 	.word	0x200003cc
     d68:	200085d4 	.word	0x200085d4
     d6c:	2001e698 	.word	0x2001e698
     d70:	200003f0 	.word	0x200003f0
     d74:	200003e0 	.word	0x200003e0

00000d78 <timeStamp()>:

char * timeStamp(void)
{
     d78:	b510      	push	{r4, lr}
     d7a:	b086      	sub	sp, #24
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
     d7c:	4c0d      	ldr	r4, [pc, #52]	; (db4 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
     d7e:	a804      	add	r0, sp, #16
     d80:	f000 fdb6 	bl	18f0 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
     d84:	f99d 2017 	ldrsb.w	r2, [sp, #23]
     d88:	f99d 3016 	ldrsb.w	r3, [sp, #22]
     d8c:	f99d 0015 	ldrsb.w	r0, [sp, #21]
     d90:	f99d 1013 	ldrsb.w	r1, [sp, #19]
     d94:	e9cd 3202 	strd	r3, r2, [sp, #8]
     d98:	e9cd 1000 	strd	r1, r0, [sp]
     d9c:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     da0:	4620      	mov	r0, r4
     da2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     da6:	4904      	ldr	r1, [pc, #16]	; (db8 <timeStamp()+0x40>)
     da8:	f00a fc4e 	bl	b648 <sprintf>
  return date_time;
}
     dac:	4620      	mov	r0, r4
     dae:	b006      	add	sp, #24
     db0:	bd10      	pop	{r4, pc}
     db2:	bf00      	nop
     db4:	2001e0bc 	.word	0x2001e0bc
     db8:	20000558 	.word	0x20000558

00000dbc <headerInit(long, long, long, int)>:

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
  int nbytes=nbits/8;
     dbc:	2a00      	cmp	r2, #0
{
     dbe:	b530      	push	{r4, r5, lr}
  int nbytes=nbits/8;
     dc0:	bfb4      	ite	lt
     dc2:	1dd4      	addlt	r4, r2, #7
     dc4:	4614      	movge	r4, r2
{
     dc6:	b083      	sub	sp, #12
  int nbytes=nbits/8;
     dc8:	10e4      	asrs	r4, r4, #3

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
     dca:	9301      	str	r3, [sp, #4]
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes;
     dcc:	fb00 f504 	mul.w	r5, r0, r4
  wav_hdr.nBlockAlign=nchan*nbytes;
  wav_hdr.nBitsPerSamples=nbits;

  strcpy(&wav_hdr.info[0], MAGIC);
     dd0:	4b1e      	ldr	r3, [pc, #120]	; (e4c <headerInit(long, long, long, int)+0x90>)
  wav_hdr.nBlockAlign=nchan*nbytes;
     dd2:	fb11 f104 	smulbb	r1, r1, r4
  strcpy(wav_hdr.rId,"RIFF");
     dd6:	4c1e      	ldr	r4, [pc, #120]	; (e50 <headerInit(long, long, long, int)+0x94>)
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes;
     dd8:	e9c4 0506 	strd	r0, r5, [r4, #24]
  wav_hdr.nBlockAlign=nchan*nbytes;
     ddc:	8421      	strh	r1, [r4, #32]
  wav_hdr.nBitsPerSamples=nbits;
     dde:	8462      	strh	r2, [r4, #34]	; 0x22
  strcpy(&wav_hdr.info[0], MAGIC);
     de0:	e893 0003 	ldmia.w	r3, {r0, r1}
  strcpy(wav_hdr.wId,"WAVE");
     de4:	4b1b      	ldr	r3, [pc, #108]	; (e54 <headerInit(long, long, long, int)+0x98>)
  strcpy(&wav_hdr.info[0], MAGIC);
     de6:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  strcpy(wav_hdr.wId,"WAVE");
     dea:	60a3      	str	r3, [r4, #8]
  strcpy(wav_hdr.dId,"data");
     dec:	4b1a      	ldr	r3, [pc, #104]	; (e58 <headerInit(long, long, long, int)+0x9c>)
  strcpy(wav_hdr.rId,"RIFF");
     dee:	491b      	ldr	r1, [pc, #108]	; (e5c <headerInit(long, long, long, int)+0xa0>)
  strcpy(wav_hdr.dId,"data");
     df0:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  wav_hdr.rLen=512-2*4; // will be updated at closing
     df4:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  strcpy(wav_hdr.rId,"RIFF");
     df8:	6021      	str	r1, [r4, #0]
  wav_hdr.rLen=512-2*4; // will be updated at closing
     dfa:	6063      	str	r3, [r4, #4]
  wav_hdr.dLen = 0; // will be updated at closing
     dfc:	2300      	movs	r3, #0
  strcpy(wav_hdr.iId,"info");
     dfe:	4918      	ldr	r1, [pc, #96]	; (e60 <headerInit(long, long, long, int)+0xa4>)
  strcpy(&wav_hdr.info[0], MAGIC);
     e00:	62e0      	str	r0, [r4, #44]	; 0x2c
  strcpy(wav_hdr.fId,"fmt ");
     e02:	4818      	ldr	r0, [pc, #96]	; (e64 <headerInit(long, long, long, int)+0xa8>)
  strcpy(wav_hdr.iId,"info");
     e04:	6261      	str	r1, [r4, #36]	; 0x24
  wav_hdr.fLen=0x10;
     e06:	2110      	movs	r1, #16
  wav_hdr.dLen = 0; // will be updated at closing
     e08:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
     e0c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  strcpy(wav_hdr.fId,"fmt ");
     e10:	60e0      	str	r0, [r4, #12]
  wav_hdr.iLen = 512 - 13*4;
     e12:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
  wav_hdr.nFormatTag=1;
     e16:	e9c4 1304 	strd	r1, r3, [r4, #16]
  wav_hdr.iLen = 512 - 13*4;
     e1a:	62a0      	str	r0, [r4, #40]	; 0x28
  strcpy(&wav_hdr.info[4], timeStamp());
     e1c:	f7ff ffac 	bl	d78 <timeStamp()>
     e20:	4601      	mov	r1, r0
     e22:	f104 0030 	add.w	r0, r4, #48	; 0x30
     e26:	f00b f899 	bl	bf5c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
     e2a:	9a01      	ldr	r2, [sp, #4]
     e2c:	490e      	ldr	r1, [pc, #56]	; (e68 <headerInit(long, long, long, int)+0xac>)
     e2e:	f104 0040 	add.w	r0, r4, #64	; 0x40
     e32:	f00a fc09 	bl	b648 <sprintf>
  strcpy(&wav_hdr.info[30]," end");
     e36:	4b0d      	ldr	r3, [pc, #52]	; (e6c <headerInit(long, long, long, int)+0xb0>)
     e38:	6818      	ldr	r0, [r3, #0]
     e3a:	791b      	ldrb	r3, [r3, #4]
     e3c:	f8c4 004a 	str.w	r0, [r4, #74]	; 0x4a

  return (char *)&wav_hdr;
}
     e40:	4620      	mov	r0, r4
  strcpy(&wav_hdr.info[30]," end");
     e42:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     e46:	b003      	add	sp, #12
     e48:	bd30      	pop	{r4, r5, pc}
     e4a:	bf00      	nop
     e4c:	20000398 	.word	0x20000398
     e50:	2001dc14 	.word	0x2001dc14
     e54:	45564157 	.word	0x45564157
     e58:	61746164 	.word	0x61746164
     e5c:	46464952 	.word	0x46464952
     e60:	6f666e69 	.word	0x6f666e69
     e64:	20746d66 	.word	0x20746d66
     e68:	200003a0 	.word	0x200003a0
     e6c:	200003a8 	.word	0x200003a8

00000e70 <writeHeader(char*)>:
  wav_hdr.rLen += wav_hdr.dLen;
  return (char *)&wav_hdr;
}

void writeHeader(char * wav_hdr) 
{ 
     e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_fFile   ? m_fFile->curPosition()
     e74:	4c1f      	ldr	r4, [pc, #124]	; (ef4 <writeHeader(char*)+0x84>)
     e76:	4607      	mov	r7, r0
     e78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e7a:	b333      	cbz	r3, eca <writeHeader(char*)+0x5a>
  bool createContiguous(const char* path, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster() const { return m_curCluster; }

  /** \return The current position for a file or directory. */
  uint32_t curPosition() const { return m_curPosition; }
     e7c:	695d      	ldr	r5, [r3, #20]
     e7e:	462e      	mov	r6, r5
  uint32_t fpos;
  fpos = file.curPosition();
  Serial.printf(" fpos=%d ",fpos);
     e80:	462a      	mov	r2, r5
     e82:	491d      	ldr	r1, [pc, #116]	; (ef8 <writeHeader(char*)+0x88>)
     e84:	481d      	ldr	r0, [pc, #116]	; (efc <writeHeader(char*)+0x8c>)
     e86:	f006 fd3b 	bl	7900 <Print::printf(char const*, ...)>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     e8a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e8c:	b1c8      	cbz	r0, ec2 <writeHeader(char*)+0x52>
     e8e:	2100      	movs	r1, #0
     e90:	f002 fdb2 	bl	39f8 <FatFile::seekSet(unsigned long)>
    return m_fFile   ? m_fFile->write(buf, count)
     e94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e96:	b160      	cbz	r0, eb2 <writeHeader(char*)+0x42>
     e98:	4639      	mov	r1, r7
     e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
     e9e:	f002 fe7f 	bl	3ba0 <FatFile::write(void const*, unsigned int)>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     ea2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     ea4:	b1db      	cbz	r3, ede <writeHeader(char*)+0x6e>
     ea6:	4629      	mov	r1, r5
     ea8:	4618      	mov	r0, r3
  file.seek(0);
  file.write(wav_hdr,512);
  file.seek(fpos);
}
     eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     eae:	f002 bda3 	b.w	39f8 <FatFile::seekSet(unsigned long)>
     eb2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     eb4:	b138      	cbz	r0, ec6 <writeHeader(char*)+0x56>
     eb6:	4639      	mov	r1, r7
     eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
     ebc:	f001 fdd4 	bl	2a68 <ExFatFile::write(void const*, unsigned int)>
     ec0:	e7ef      	b.n	ea2 <writeHeader(char*)+0x32>
     ec2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->seekSet(pos)
     ec4:	b930      	cbnz	r0, ed4 <writeHeader(char*)+0x64>
     ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     eca:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->curPosition()
     ecc:	b17e      	cbz	r6, eee <writeHeader(char*)+0x7e>
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster() const { return m_curCluster; }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const { return m_curPosition; }
     ece:	6835      	ldr	r5, [r6, #0]
     ed0:	462e      	mov	r6, r5
     ed2:	e7d5      	b.n	e80 <writeHeader(char*)+0x10>
           : m_xFile ? m_xFile->seekSet(pos)
     ed4:	2200      	movs	r2, #0
     ed6:	2300      	movs	r3, #0
     ed8:	f001 f870 	bl	1fbc <ExFatFile::seekSet(unsigned long long)>
     edc:	e7da      	b.n	e94 <writeHeader(char*)+0x24>
     ede:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     ee0:	2800      	cmp	r0, #0
     ee2:	d0f0      	beq.n	ec6 <writeHeader(char*)+0x56>
     ee4:	4632      	mov	r2, r6
     ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     eea:	f001 b867 	b.w	1fbc <ExFatFile::seekSet(unsigned long long)>
     eee:	4635      	mov	r5, r6
     ef0:	e7c6      	b.n	e80 <writeHeader(char*)+0x10>
     ef2:	bf00      	nop
     ef4:	2001e648 	.word	0x2001e648
     ef8:	20000438 	.word	0x20000438
     efc:	200085d4 	.word	0x200085d4

00000f00 <makeHeader(long*)>:
   return wheader;
}
*/

int16_t makeHeader(int32_t *header)
{
     f00:	b530      	push	{r4, r5, lr}
     f02:	b089      	sub	sp, #36	; 0x24
     f04:	4604      	mov	r4, r0

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
     f06:	4d1d      	ldr	r5, [pc, #116]	; (f7c <makeHeader(long*)+0x7c>)
    rtc_get_datetime(&t);
     f08:	a806      	add	r0, sp, #24
     f0a:	f000 fcf1 	bl	18f0 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
     f0e:	f99d 001f 	ldrsb.w	r0, [sp, #31]
     f12:	f99d 301e 	ldrsb.w	r3, [sp, #30]
     f16:	f99d 101d 	ldrsb.w	r1, [sp, #29]
     f1a:	f99d 201b 	ldrsb.w	r2, [sp, #27]
     f1e:	e9cd 3003 	strd	r3, r0, [sp, #12]
     f22:	f99d 001a 	ldrsb.w	r0, [sp, #26]
     f26:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     f2a:	9000      	str	r0, [sp, #0]
     f2c:	4620      	mov	r0, r4
     f2e:	e9cd 2101 	strd	r2, r1, [sp, #4]
     f32:	4a13      	ldr	r2, [pc, #76]	; (f80 <makeHeader(long*)+0x80>)
     f34:	4913      	ldr	r1, [pc, #76]	; (f84 <makeHeader(long*)+0x84>)
     f36:	f00a fb87 	bl	b648 <sprintf>
    header[10] = t_on;
     f3a:	4b13      	ldr	r3, [pc, #76]	; (f88 <makeHeader(long*)+0x88>)
    header[9] = t_acq;
     f3c:	682d      	ldr	r5, [r5, #0]
    header[8] = NCH;
     f3e:	2001      	movs	r0, #1
    header[10] = t_on;
     f40:	681b      	ldr	r3, [r3, #0]
    header[6] = SerNum;      // serial number
     f42:	4a12      	ldr	r2, [pc, #72]	; (f8c <makeHeader(long*)+0x8c>)
    header[10] = t_on;
     f44:	62a3      	str	r3, [r4, #40]	; 0x28
    header[11] = t_off;
     f46:	4b12      	ldr	r3, [pc, #72]	; (f90 <makeHeader(long*)+0x90>)
    header[6] = SerNum;      // serial number
     f48:	6812      	ldr	r2, [r2, #0]
    header[11] = t_off;
     f4a:	681b      	ldr	r3, [r3, #0]
    header[7] = fsamp;
     f4c:	4911      	ldr	r1, [pc, #68]	; (f94 <makeHeader(long*)+0x94>)
    header[6] = SerNum;      // serial number
     f4e:	61a2      	str	r2, [r4, #24]
    header[7] = fsamp;
     f50:	6809      	ldr	r1, [r1, #0]
    header[12] = proc;
     f52:	4a11      	ldr	r2, [pc, #68]	; (f98 <makeHeader(long*)+0x98>)
    header[11] = t_off;
     f54:	62e3      	str	r3, [r4, #44]	; 0x2c
    header[13] = shift;
     f56:	4b11      	ldr	r3, [pc, #68]	; (f9c <makeHeader(long*)+0x9c>)
    header[9] = t_acq;
     f58:	6265      	str	r5, [r4, #36]	; 0x24
    header[5] = 20;          // SW version
     f5a:	2514      	movs	r5, #20
    header[13] = shift;
     f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
    header[7] = fsamp;
     f60:	61e1      	str	r1, [r4, #28]
    header[12] = proc;
     f62:	f9b2 1000 	ldrsh.w	r1, [r2]

    header[127]=0x55555555;
     f66:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
     f6a:	6165      	str	r5, [r4, #20]
    header[8] = NCH;
     f6c:	6220      	str	r0, [r4, #32]
    header[12] = proc;
     f6e:	6321      	str	r1, [r4, #48]	; 0x30
    header[127]=0x55555555;
     f70:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
    header[13] = shift;
     f74:	6363      	str	r3, [r4, #52]	; 0x34
    return 1;
}
     f76:	b009      	add	sp, #36	; 0x24
     f78:	bd30      	pop	{r4, r5, pc}
     f7a:	bf00      	nop
     f7c:	20008bd4 	.word	0x20008bd4
     f80:	20000398 	.word	0x20000398
     f84:	200003b0 	.word	0x200003b0
     f88:	20008bd8 	.word	0x20008bd8
     f8c:	2000c178 	.word	0x2000c178
     f90:	2001ec5c 	.word	0x2001ec5c
     f94:	20008b94 	.word	0x20008b94
     f98:	2001ec88 	.word	0x2001ec88
     f9c:	2001ec8c 	.word	0x2001ec8c

00000fa0 <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
     fa0:	b530      	push	{r4, r5, lr}
     fa2:	b087      	sub	sp, #28
     fa4:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
     fa6:	a804      	add	r0, sp, #16
     fa8:	f000 fca2 	bl	18f0 <rtc_get_datetime(datetime_t*)>

    if(t_acq<600)
     fac:	4b23      	ldr	r3, [pc, #140]	; (103c <newDirectory(char*)+0x9c>)
     fae:	681b      	ldr	r3, [r3, #0]
     fb0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
     fb4:	d218      	bcs.n	fe8 <newDirectory(char*)+0x48>
  if(h==ho) return 0;
     fb6:	4922      	ldr	r1, [pc, #136]	; (1040 <newDirectory(char*)+0xa0>)
    {
      if(newFolder(t.hour))
     fb8:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(h==ho) return 0;
     fbc:	680b      	ldr	r3, [r1, #0]
     fbe:	429a      	cmp	r2, r3
     fc0:	d038      	beq.n	1034 <newDirectory(char*)+0x94>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     fc2:	f99d 0012 	ldrsb.w	r0, [sp, #18]
     fc6:	f99d 5013 	ldrsb.w	r5, [sp, #19]
     fca:	4b1e      	ldr	r3, [pc, #120]	; (1044 <newDirectory(char*)+0xa4>)
     fcc:	e9cd 5202 	strd	r5, r2, [sp, #8]
     fd0:	681b      	ldr	r3, [r3, #0]
     fd2:	9001      	str	r0, [sp, #4]
     fd4:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  ho=h;
     fd8:	600a      	str	r2, [r1, #0]
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     fda:	9000      	str	r0, [sp, #0]
     fdc:	4620      	mov	r0, r4
     fde:	4a1a      	ldr	r2, [pc, #104]	; (1048 <newDirectory(char*)+0xa8>)
     fe0:	491a      	ldr	r1, [pc, #104]	; (104c <newDirectory(char*)+0xac>)
     fe2:	f00a fb31 	bl	b648 <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
     fe6:	e014      	b.n	1012 <newDirectory(char*)+0x72>
  if(h==ho) return 0;
     fe8:	4815      	ldr	r0, [pc, #84]	; (1040 <newDirectory(char*)+0xa0>)
          return 1;   // have new directory
      }
    }
    else
    {
      if(newFolder(t.day))
     fea:	f99d 1013 	ldrsb.w	r1, [sp, #19]
  if(h==ho) return 0;
     fee:	6803      	ldr	r3, [r0, #0]
     ff0:	4299      	cmp	r1, r3
     ff2:	d01f      	beq.n	1034 <newDirectory(char*)+0x94>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/", 
     ff4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     ff8:	f99d 5012 	ldrsb.w	r5, [sp, #18]
     ffc:	4b11      	ldr	r3, [pc, #68]	; (1044 <newDirectory(char*)+0xa4>)
     ffe:	e9cd 5101 	strd	r5, r1, [sp, #4]
    1002:	681b      	ldr	r3, [r3, #0]
    1004:	9200      	str	r2, [sp, #0]
  ho=h;
    1006:	6001      	str	r1, [r0, #0]
          sprintf(dirName, "/%s%06x_%04d%02d%02d/", 
    1008:	4620      	mov	r0, r4
    100a:	4a0f      	ldr	r2, [pc, #60]	; (1048 <newDirectory(char*)+0xa8>)
    100c:	4910      	ldr	r1, [pc, #64]	; (1050 <newDirectory(char*)+0xb0>)
    100e:	f00a fb1b 	bl	b648 <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
    1012:	4810      	ldr	r0, [pc, #64]	; (1054 <newDirectory(char*)+0xb4>)
    1014:	f006 fc58 	bl	78c8 <Print::println()>
    1018:	2102      	movs	r1, #2
    101a:	480f      	ldr	r0, [pc, #60]	; (1058 <newDirectory(char*)+0xb8>)
    101c:	f008 f9e6 	bl	93ec <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    1020:	4620      	mov	r0, r4
    1022:	f00b f84d 	bl	c0c0 <strlen>
    1026:	4601      	mov	r1, r0
    1028:	4620      	mov	r0, r4
    102a:	f008 f9df 	bl	93ec <usb_serial_write>
          return 1;   // have new directory
    102e:	2001      	movs	r0, #1
      }
    }
    return 0;       // keep old directory

}
    1030:	b007      	add	sp, #28
    1032:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
    1034:	2000      	movs	r0, #0
}
    1036:	b007      	add	sp, #28
    1038:	bd30      	pop	{r4, r5, pc}
    103a:	bf00      	nop
    103c:	20008bd4 	.word	0x20008bd4
    1040:	200085e4 	.word	0x200085e4
    1044:	2000c178 	.word	0x2000c178
    1048:	20000444 	.word	0x20000444
    104c:	20000448 	.word	0x20000448
    1050:	20000468 	.word	0x20000468
    1054:	200085d4 	.word	0x200085d4
    1058:	20000464 	.word	0x20000464

0000105c <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    105c:	b510      	push	{r4, lr}
    105e:	b084      	sub	sp, #16
    1060:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1062:	a802      	add	r0, sp, #8
    1064:	f000 fc44 	bl	18f0 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    1068:	4b15      	ldr	r3, [pc, #84]	; (10c0 <newFileName(char*)+0x64>)
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    106a:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    if(proc==0)
    106e:	f9b3 3000 	ldrsh.w	r3, [r3]
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    1072:	f99d 100e 	ldrsb.w	r1, [sp, #14]
    if(proc==0)
    1076:	b9cb      	cbnz	r3, 10ac <newFileName(char*)+0x50>
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    1078:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    107c:	4a11      	ldr	r2, [pc, #68]	; (10c4 <newFileName(char*)+0x68>)
    107e:	e9cd 1000 	strd	r1, r0, [sp]
    1082:	4911      	ldr	r1, [pc, #68]	; (10c8 <newFileName(char*)+0x6c>)
    1084:	4620      	mov	r0, r4
    1086:	f00a fadf 	bl	b648 <sprintf>
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    108a:	4810      	ldr	r0, [pc, #64]	; (10cc <newFileName(char*)+0x70>)
    108c:	f006 fc1c 	bl	78c8 <Print::println()>
    1090:	2102      	movs	r1, #2
    1092:	480f      	ldr	r0, [pc, #60]	; (10d0 <newFileName(char*)+0x74>)
    1094:	f008 f9aa 	bl	93ec <usb_serial_write>
    1098:	4620      	mov	r0, r4
    109a:	f00b f811 	bl	c0c0 <strlen>
    109e:	4601      	mov	r1, r0
    10a0:	4620      	mov	r0, r4
    10a2:	f008 f9a3 	bl	93ec <usb_serial_write>
    return 1;
}
    10a6:	2001      	movs	r0, #1
    10a8:	b004      	add	sp, #16
    10aa:	bd10      	pop	{r4, pc}
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    10ac:	e9cd 1000 	strd	r1, r0, [sp]
    10b0:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    10b4:	4620      	mov	r0, r4
    10b6:	4a03      	ldr	r2, [pc, #12]	; (10c4 <newFileName(char*)+0x68>)
    10b8:	4906      	ldr	r1, [pc, #24]	; (10d4 <newFileName(char*)+0x78>)
    10ba:	f00a fac5 	bl	b648 <sprintf>
    10be:	e7e4      	b.n	108a <newFileName(char*)+0x2e>
    10c0:	2001ec88 	.word	0x2001ec88
    10c4:	2000040c 	.word	0x2000040c
    10c8:	20000410 	.word	0x20000410
    10cc:	200085d4 	.word	0x200085d4
    10d0:	20000464 	.word	0x20000464
    10d4:	20000424 	.word	0x20000424

000010d8 <storeData(short)>:
static int32_t fileHeader[128];
uint32_t nbuf;

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    10d8:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    10da:	4604      	mov	r4, r0
{
    10dc:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    10de:	2800      	cmp	r0, #0
    10e0:	d04a      	beq.n	1178 <storeData(short)+0xa0>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    10e2:	2801      	cmp	r0, #1
    10e4:	d00a      	beq.n	10fc <storeData(short)+0x24>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    10e6:	2802      	cmp	r0, #2
    10e8:	f000 80c9 	beq.w	127e <storeData(short)+0x1a6>
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    10ec:	1ec3      	subs	r3, r0, #3
    10ee:	b29b      	uxth	r3, r3
    10f0:	2b01      	cmp	r3, #1
    10f2:	f240 8142 	bls.w	137a <storeData(short)+0x2a2>
            file.close();
        }
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    }
    return status;
}
    10f6:	4620      	mov	r0, r4
    10f8:	b014      	add	sp, #80	; 0x50
    10fa:	bd70      	pop	{r4, r5, r6, pc}
    10fc:	4dac      	ldr	r5, [pc, #688]	; (13b0 <storeData(short)+0x2d8>)
        if(proc==0)
    10fe:	4bad      	ldr	r3, [pc, #692]	; (13b4 <storeData(short)+0x2dc>)
    {   nbuf=0;
    1100:	2200      	movs	r2, #0
    1102:	4ead      	ldr	r6, [pc, #692]	; (13b8 <storeData(short)+0x2e0>)
        if(proc==0)
    1104:	f9b3 3000 	ldrsh.w	r3, [r3]
    {   nbuf=0;
    1108:	6032      	str	r2, [r6, #0]
        if(proc==0)
    110a:	2b00      	cmp	r3, #0
    110c:	f040 8084 	bne.w	1218 <storeData(short)+0x140>
          hdr = headerInit(fsamp, nchan, nbits, SerNum);
    1110:	49aa      	ldr	r1, [pc, #680]	; (13bc <storeData(short)+0x2e4>)
    1112:	2220      	movs	r2, #32
    1114:	4baa      	ldr	r3, [pc, #680]	; (13c0 <storeData(short)+0x2e8>)
    1116:	6808      	ldr	r0, [r1, #0]
    1118:	2180      	movs	r1, #128	; 0x80
    111a:	681b      	ldr	r3, [r3, #0]
    111c:	f7ff fe4e 	bl	dbc <headerInit(long, long, long, int)>
    1120:	4601      	mov	r1, r0
    return m_fFile   ? m_fFile->write(buf, count)
    1122:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1124:	2800      	cmp	r0, #0
    1126:	d07e      	beq.n	1226 <storeData(short)+0x14e>
    1128:	f44f 7200 	mov.w	r2, #512	; 0x200
    112c:	f002 fd38 	bl	3ba0 <FatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    1130:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1134:	f0c0 8083 	bcc.w	123e <storeData(short)+0x166>
    1138:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    113a:	2800      	cmp	r0, #0
    113c:	f000 8096 	beq.w	126c <storeData(short)+0x194>
    1140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1144:	499f      	ldr	r1, [pc, #636]	; (13c4 <storeData(short)+0x2ec>)
    1146:	f002 fd2b 	bl	3ba0 <FatFile::write(void const*, unsigned int)>
    114a:	4604      	mov	r4, r0
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    114c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    1150:	f0c0 8099 	bcc.w	1286 <storeData(short)+0x1ae>
        disk_count++;
    1154:	499c      	ldr	r1, [pc, #624]	; (13c8 <storeData(short)+0x2f0>)
          nbuf++;
    1156:	6833      	ldr	r3, [r6, #0]
        disk_count++;
    1158:	680a      	ldr	r2, [r1, #0]
          nbuf++;
    115a:	3301      	adds	r3, #1
        disk_count++;
    115c:	3201      	adds	r2, #1
          nbuf++;
    115e:	6033      	str	r3, [r6, #0]
        disk_count++;
    1160:	600a      	str	r2, [r1, #0]
    1162:	499a      	ldr	r1, [pc, #616]	; (13cc <storeData(short)+0x2f4>)
        if((nbuf % 1000)==0 ) file.flush();
    1164:	4a9a      	ldr	r2, [pc, #616]	; (13d0 <storeData(short)+0x2f8>)
        disk_count++;
    1166:	fb01 f303 	mul.w	r3, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    116a:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
    116e:	d275      	bcs.n	125c <storeData(short)+0x184>
    1170:	2402      	movs	r4, #2
}
    1172:	4620      	mov	r0, r4
    1174:	b014      	add	sp, #80	; 0x50
    1176:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    1178:	4896      	ldr	r0, [pc, #600]	; (13d4 <storeData(short)+0x2fc>)
    117a:	f7ff ff11 	bl	fa0 <newDirectory(char*)>
    117e:	b1d8      	cbz	r0, 11b8 <storeData(short)+0xe0>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
    1180:	4d95      	ldr	r5, [pc, #596]	; (13d8 <storeData(short)+0x300>)
    1182:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    1186:	2a00      	cmp	r2, #0
    1188:	f000 80b9 	beq.w	12fe <storeData(short)+0x226>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    118c:	466e      	mov	r6, sp
    118e:	4611      	mov	r1, r2
    1190:	4623      	mov	r3, r4
    1192:	4a90      	ldr	r2, [pc, #576]	; (13d4 <storeData(short)+0x2fc>)
    1194:	4630      	mov	r0, r6
  FatFile() {}
    1196:	9400      	str	r4, [sp, #0]
    1198:	f002 fb00 	bl	379c <FatFile::open(FatVolume*, char const*, int)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    119c:	2800      	cmp	r0, #0
    119e:	f000 80bb 	beq.w	1318 <storeData(short)+0x240>
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    11a2:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    11a6:	2800      	cmp	r0, #0
    11a8:	f000 80cd 	beq.w	1346 <storeData(short)+0x26e>
    11ac:	4989      	ldr	r1, [pc, #548]	; (13d4 <storeData(short)+0x2fc>)
    11ae:	f003 fb2b 	bl	4808 <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    11b2:	2800      	cmp	r0, #0
    11b4:	f000 80d0 	beq.w	1358 <storeData(short)+0x280>
        if(newFileName(fileName))
    11b8:	4888      	ldr	r0, [pc, #544]	; (13dc <storeData(short)+0x304>)
    11ba:	f7ff ff4f 	bl	105c <newFileName(char*)>
    11be:	2800      	cmp	r0, #0
    11c0:	f000 80f3 	beq.w	13aa <storeData(short)+0x2d2>
            file = sd.open(fileName, FILE_WRITE); 
    11c4:	f244 2302 	movw	r3, #16898	; 0x4202
    11c8:	4a84      	ldr	r2, [pc, #528]	; (13dc <storeData(short)+0x304>)
    11ca:	4983      	ldr	r1, [pc, #524]	; (13d8 <storeData(short)+0x300>)
    11cc:	4668      	mov	r0, sp
    11ce:	f003 fc85 	bl	4adc <FsVolume::open(char const*, int)>
class Print
    11d2:	4d77      	ldr	r5, [pc, #476]	; (13b0 <storeData(short)+0x2d8>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    11d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
class StreamFile : public stream_t, public BaseFile {
    11d8:	f105 0010 	add.w	r0, r5, #16
    11dc:	732b      	strb	r3, [r5, #12]
    11de:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    11e2:	e9c5 1201 	strd	r1, r2, [r5, #4]
    11e6:	a904      	add	r1, sp, #16
    11e8:	f003 fb36 	bl	4858 <FsBaseFile::operator=(FsBaseFile const&)>
    11ec:	4b7c      	ldr	r3, [pc, #496]	; (13e0 <storeData(short)+0x308>)
  ~FsBaseFile() { close(); }
    11ee:	a804      	add	r0, sp, #16
    11f0:	9300      	str	r3, [sp, #0]
    11f2:	f003 fb7f 	bl	48f4 <FsBaseFile::close()>
  bool isOpen() const { return m_fFile || m_xFile; }
    11f6:	6cab      	ldr	r3, [r5, #72]	; 0x48
    11f8:	2b00      	cmp	r3, #0
    11fa:	d180      	bne.n	10fe <storeData(short)+0x26>
    11fc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    11fe:	2b00      	cmp	r3, #0
    1200:	f47f af7d 	bne.w	10fe <storeData(short)+0x26>
    1204:	2111      	movs	r1, #17
    1206:	4877      	ldr	r0, [pc, #476]	; (13e4 <storeData(short)+0x30c>)
    1208:	f008 f8f0 	bl	93ec <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    120c:	4876      	ldr	r0, [pc, #472]	; (13e8 <storeData(short)+0x310>)
                return STOPPED; 
    120e:	f04f 34ff 	mov.w	r4, #4294967295
    1212:	f006 fb59 	bl	78c8 <Print::println()>
    1216:	e76e      	b.n	10f6 <storeData(short)+0x1e>
          makeHeader(fileHeader);
    1218:	4874      	ldr	r0, [pc, #464]	; (13ec <storeData(short)+0x314>)
    121a:	f7ff fe71 	bl	f00 <makeHeader(long*)>
    return m_fFile   ? m_fFile->write(buf, count)
    121e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr=(char *)fileHeader;
    1220:	4972      	ldr	r1, [pc, #456]	; (13ec <storeData(short)+0x314>)
    1222:	2800      	cmp	r0, #0
    1224:	d180      	bne.n	1128 <storeData(short)+0x50>
    1226:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
    1228:	2800      	cmp	r0, #0
    122a:	f000 809c 	beq.w	1366 <storeData(short)+0x28e>
    122e:	f44f 7200 	mov.w	r2, #512	; 0x200
    1232:	f001 fc19 	bl	2a68 <ExFatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    1236:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    123a:	f4bf af7d 	bcs.w	1138 <storeData(short)+0x60>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    123e:	2400      	movs	r4, #0
  bool isOpen() const { return m_fFile || m_xFile; }
    1240:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1242:	2b00      	cmp	r3, #0
    1244:	d057      	beq.n	12f6 <storeData(short)+0x21e>
        {   if(proc==0)
    1246:	4b5b      	ldr	r3, [pc, #364]	; (13b4 <storeData(short)+0x2dc>)
    1248:	f9b3 3000 	ldrsh.w	r3, [r3]
    124c:	2b00      	cmp	r3, #0
    124e:	d046      	beq.n	12de <storeData(short)+0x206>
            file.close();
    1250:	4867      	ldr	r0, [pc, #412]	; (13f0 <storeData(short)+0x318>)
    1252:	f003 fb4f 	bl	48f4 <FsBaseFile::close()>
}
    1256:	4620      	mov	r0, r4
    1258:	b014      	add	sp, #80	; 0x50
    125a:	bd70      	pop	{r4, r5, r6, pc}
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    125c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    125e:	2800      	cmp	r0, #0
    1260:	f000 8083 	beq.w	136a <storeData(short)+0x292>
    1264:	2402      	movs	r4, #2
    1266:	f002 fc95 	bl	3b94 <FatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    126a:	e744      	b.n	10f6 <storeData(short)+0x1e>
    126c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
    126e:	b148      	cbz	r0, 1284 <storeData(short)+0x1ac>
    1270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1274:	4953      	ldr	r1, [pc, #332]	; (13c4 <storeData(short)+0x2ec>)
    1276:	f001 fbf7 	bl	2a68 <ExFatFile::write(void const*, unsigned int)>
    127a:	4604      	mov	r4, r0
    127c:	e766      	b.n	114c <storeData(short)+0x74>
    127e:	4d4c      	ldr	r5, [pc, #304]	; (13b0 <storeData(short)+0x2d8>)
    1280:	4e4d      	ldr	r6, [pc, #308]	; (13b8 <storeData(short)+0x2e0>)
    1282:	e759      	b.n	1138 <storeData(short)+0x60>
    1284:	4604      	mov	r4, r0
    1286:	2101      	movs	r1, #1
    1288:	485a      	ldr	r0, [pc, #360]	; (13f4 <storeData(short)+0x31c>)
    128a:	f008 f8af 	bl	93ec <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    128e:	2300      	movs	r3, #0
    1290:	220a      	movs	r2, #10
    1292:	4621      	mov	r1, r4
    1294:	4854      	ldr	r0, [pc, #336]	; (13e8 <storeData(short)+0x310>)
    1296:	f006 fb41 	bl	791c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    129a:	2101      	movs	r1, #1
    129c:	4856      	ldr	r0, [pc, #344]	; (13f8 <storeData(short)+0x320>)
    129e:	f008 f8a5 	bl	93ec <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    12a2:	2102      	movs	r1, #2
    12a4:	4850      	ldr	r0, [pc, #320]	; (13e8 <storeData(short)+0x310>)
    12a6:	f006 fb03 	bl	78b0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    12aa:	484f      	ldr	r0, [pc, #316]	; (13e8 <storeData(short)+0x310>)
    12ac:	f006 fb0c 	bl	78c8 <Print::println()>
        disk_count++;
    12b0:	4945      	ldr	r1, [pc, #276]	; (13c8 <storeData(short)+0x2f0>)
    12b2:	4846      	ldr	r0, [pc, #280]	; (13cc <storeData(short)+0x2f4>)
    12b4:	6833      	ldr	r3, [r6, #0]
    12b6:	680a      	ldr	r2, [r1, #0]
    12b8:	fb00 f303 	mul.w	r3, r0, r3
        if((nbuf % 1000)==0 ) file.flush();
    12bc:	4844      	ldr	r0, [pc, #272]	; (13d0 <storeData(short)+0x2f8>)
        disk_count++;
    12be:	3201      	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    12c0:	ebb0 0ff3 	cmp.w	r0, r3, ror #3
        disk_count++;
    12c4:	600a      	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    12c6:	d3ba      	bcc.n	123e <storeData(short)+0x166>
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    12c8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    12ca:	2800      	cmp	r0, #0
    12cc:	d057      	beq.n	137e <storeData(short)+0x2a6>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    12ce:	2403      	movs	r4, #3
    12d0:	f002 fc60 	bl	3b94 <FatFile::sync()>
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    12d4:	3c03      	subs	r4, #3
    12d6:	bf18      	it	ne
    12d8:	f04f 34ff 	movne.w	r4, #4294967295
    12dc:	e7b0      	b.n	1240 <storeData(short)+0x168>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    12de:	4b36      	ldr	r3, [pc, #216]	; (13b8 <storeData(short)+0x2e0>)
  wav_hdr.dLen = nbytes;
    12e0:	4846      	ldr	r0, [pc, #280]	; (13fc <storeData(short)+0x324>)
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    12e2:	681b      	ldr	r3, [r3, #0]
  wav_hdr.rLen += wav_hdr.dLen;
    12e4:	6842      	ldr	r2, [r0, #4]
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    12e6:	031b      	lsls	r3, r3, #12
  wav_hdr.rLen += wav_hdr.dLen;
    12e8:	441a      	add	r2, r3
  wav_hdr.dLen = nbytes;
    12ea:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    12ee:	6042      	str	r2, [r0, #4]
              writeHeader(hdr);
    12f0:	f7ff fdbe 	bl	e70 <writeHeader(char*)>
    12f4:	e7ac      	b.n	1250 <storeData(short)+0x178>
  bool isOpen() const { return m_fFile || m_xFile; }
    12f6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    12f8:	2b00      	cmp	r3, #0
    12fa:	d1a4      	bne.n	1246 <storeData(short)+0x16e>
    12fc:	e6fb      	b.n	10f6 <storeData(short)+0x1e>
    12fe:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           : m_xVol ? m_xVol->exists(path)
    1302:	b1c9      	cbz	r1, 1338 <storeData(short)+0x260>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1304:	466e      	mov	r6, sp
    1306:	4613      	mov	r3, r2
  ExFatFile() {}
    1308:	920c      	str	r2, [sp, #48]	; 0x30
    130a:	4630      	mov	r0, r6
    130c:	4a31      	ldr	r2, [pc, #196]	; (13d4 <storeData(short)+0x2fc>)
    130e:	f001 f929 	bl	2564 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1312:	2800      	cmp	r0, #0
    1314:	f47f af45 	bne.w	11a2 <storeData(short)+0xca>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    1318:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    131c:	2a00      	cmp	r2, #0
    131e:	d035      	beq.n	138c <storeData(short)+0x2b4>
    1320:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1322:	f202 4144 	addw	r1, r2, #1092	; 0x444
    1326:	2301      	movs	r3, #1
    1328:	4630      	mov	r0, r6
    132a:	4a2a      	ldr	r2, [pc, #168]	; (13d4 <storeData(short)+0x2fc>)
    132c:	9400      	str	r4, [sp, #0]
    132e:	f002 f947 	bl	35c0 <FatFile::mkdir(FatFile*, char const*, bool)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1332:	2800      	cmp	r0, #0
    1334:	f47f af35 	bne.w	11a2 <storeData(short)+0xca>
    1338:	4931      	ldr	r1, [pc, #196]	; (1400 <storeData(short)+0x328>)
    133a:	f04f 34ff 	mov.w	r4, #4294967295
    133e:	482a      	ldr	r0, [pc, #168]	; (13e8 <storeData(short)+0x310>)
    1340:	f7ff fca6 	bl	c90 <Print::println(char const*) [clone .isra.0]>
    1344:	e6d7      	b.n	10f6 <storeData(short)+0x1e>
    1346:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    134a:	b128      	cbz	r0, 1358 <storeData(short)+0x280>
    134c:	4921      	ldr	r1, [pc, #132]	; (13d4 <storeData(short)+0x2fc>)
    134e:	f001 ff8d 	bl	326c <ExFatVolume::chdir(char const*)>
    1352:	2800      	cmp	r0, #0
    1354:	f47f af30 	bne.w	11b8 <storeData(short)+0xe0>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1358:	492a      	ldr	r1, [pc, #168]	; (1404 <storeData(short)+0x32c>)
    135a:	f04f 34ff 	mov.w	r4, #4294967295
    135e:	4822      	ldr	r0, [pc, #136]	; (13e8 <storeData(short)+0x310>)
    1360:	f7ff fc96 	bl	c90 <Print::println(char const*) [clone .isra.0]>
    1364:	e6c7      	b.n	10f6 <storeData(short)+0x1e>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    1366:	2400      	movs	r4, #0
    1368:	e6c5      	b.n	10f6 <storeData(short)+0x1e>
    136a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    136c:	2402      	movs	r4, #2
    136e:	2800      	cmp	r0, #0
    1370:	f43f aec1 	beq.w	10f6 <storeData(short)+0x1e>
    1374:	f001 f9e4 	bl	2740 <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1378:	e6bd      	b.n	10f6 <storeData(short)+0x1e>
    137a:	4d0d      	ldr	r5, [pc, #52]	; (13b0 <storeData(short)+0x2d8>)
    137c:	e7aa      	b.n	12d4 <storeData(short)+0x1fc>
    137e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1380:	2800      	cmp	r0, #0
    1382:	d0f0      	beq.n	1366 <storeData(short)+0x28e>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    1384:	2403      	movs	r4, #3
    1386:	f001 f9db 	bl	2740 <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    138a:	e7a3      	b.n	12d4 <storeData(short)+0x1fc>
    138c:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    1390:	2900      	cmp	r1, #0
    1392:	d0d1      	beq.n	1338 <storeData(short)+0x260>
    1394:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1396:	2301      	movs	r3, #1
    1398:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    139c:	4630      	mov	r0, r6
    139e:	4a0d      	ldr	r2, [pc, #52]	; (13d4 <storeData(short)+0x2fc>)
    13a0:	f001 fa86 	bl	28b0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    13a4:	2800      	cmp	r0, #0
    13a6:	d0c7      	beq.n	1338 <storeData(short)+0x260>
    13a8:	e6fb      	b.n	11a2 <storeData(short)+0xca>
        {  return STOPPED; // if file open fails: don't do anything
    13aa:	f04f 34ff 	mov.w	r4, #4294967295
    13ae:	e6a2      	b.n	10f6 <storeData(short)+0x1e>
    13b0:	2001e648 	.word	0x2001e648
    13b4:	2001ec88 	.word	0x2001ec88
    13b8:	2001e6c4 	.word	0x2001e6c4
    13bc:	20008b94 	.word	0x20008b94
    13c0:	2000c178 	.word	0x2000c178
    13c4:	2000c540 	.word	0x2000c540
    13c8:	2001e620 	.word	0x2001e620
    13cc:	26e978d5 	.word	0x26e978d5
    13d0:	00418937 	.word	0x00418937
    13d4:	2001d9c4 	.word	0x2001d9c4
    13d8:	2001e798 	.word	0x2001e798
    13dc:	2001de14 	.word	0x2001de14
    13e0:	200006f8 	.word	0x200006f8
    13e4:	20000540 	.word	0x20000540
    13e8:	200085d4 	.word	0x200085d4
    13ec:	2000d540 	.word	0x2000d540
    13f0:	2001e658 	.word	0x2001e658
    13f4:	20000554 	.word	0x20000554
    13f8:	20000440 	.word	0x20000440
    13fc:	2001dc14 	.word	0x2001dc14
    1400:	20000528 	.word	0x20000528
    1404:	20000534 	.word	0x20000534

00001408 <saveData(short)>:
//
volatile uint32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    1408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    140a:	4606      	mov	r6, r0
    if(status==STOPPED) 
    140c:	3001      	adds	r0, #1
    140e:	d03c      	beq.n	148a <saveData(short)+0x82>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1410:	4b2e      	ldr	r3, [pc, #184]	; (14cc <saveData(short)+0xc4>)
    1412:	2208      	movs	r2, #8
      digitalWriteFast(13,HIGH);
    }
    else
      digitalWriteFast(13,LOW);

    if(status<CLOSED) return status; // we are stopped: don't do anything
    1414:	2e00      	cmp	r6, #0
    1416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    141a:	db34      	blt.n	1486 <saveData(short)+0x7e>
  tx=rtc_get();
    141c:	f006 febc 	bl	8198 <rtc_get>
  tx = tx % t_acq;
    1420:	4b2b      	ldr	r3, [pc, #172]	; (14d0 <saveData(short)+0xc8>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    1422:	2e01      	cmp	r6, #1
  tx = tx % t_acq;
    1424:	681b      	ldr	r3, [r3, #0]
    1426:	fbb0 f2f3 	udiv	r2, r0, r3
    142a:	fb02 0013 	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    142e:	4b29      	ldr	r3, [pc, #164]	; (14d4 <saveData(short)+0xcc>)
    1430:	dd05      	ble.n	143e <saveData(short)+0x36>
    1432:	681a      	ldr	r2, [r3, #0]
    1434:	b11a      	cbz	r2, 143e <saveData(short)+0x36>
    1436:	681a      	ldr	r2, [r3, #0]
    1438:	4290      	cmp	r0, r2
    143a:	bf38      	it	cc
    143c:	2603      	movcc	r6, #3
  tx_=tx;
    143e:	6018      	str	r0, [r3, #0]

    status=checkEndOfFile(status);

    if(getDataCount()>=NDBL)
    1440:	f000 f89e 	bl	1580 <getDataCount()>
    1444:	2807      	cmp	r0, #7
    1446:	d936      	bls.n	14b6 <saveData(short)+0xae>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    1448:	4d23      	ldr	r5, [pc, #140]	; (14d8 <saveData(short)+0xd0>)
    144a:	2208      	movs	r2, #8
    144c:	4b1f      	ldr	r3, [pc, #124]	; (14cc <saveData(short)+0xc4>)
    144e:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
    1452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    { 
      digitalWriteFast(13,HIGH);
      for(int ii=0; ii<NDBL; ii++)
      { while(queue_isBusy()); //wait if acq writes to queue
    1456:	f000 f8a1 	bl	159c <queue_isBusy()>
    145a:	4604      	mov	r4, r0
    145c:	2800      	cmp	r0, #0
    145e:	d1fa      	bne.n	1456 <saveData(short)+0x4e>
        pullData(&diskBuffer[ii*NBUF_ACQ]);
    1460:	4628      	mov	r0, r5
      for(int ii=0; ii<NDBL; ii++)
    1462:	f505 7500 	add.w	r5, r5, #512	; 0x200
        pullData(&diskBuffer[ii*NBUF_ACQ]);
    1466:	f000 f8d9 	bl	161c <pullData(unsigned long*)>
      for(int ii=0; ii<NDBL; ii++)
    146a:	42bd      	cmp	r5, r7
    146c:	d1f3      	bne.n	1456 <saveData(short)+0x4e>
    146e:	4b1b      	ldr	r3, [pc, #108]	; (14dc <saveData(short)+0xd4>)
    1470:	4a1b      	ldr	r2, [pc, #108]	; (14e0 <saveData(short)+0xd8>)
      }
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1472:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1476:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    147a:	3401      	adds	r4, #1
    147c:	2c08      	cmp	r4, #8
    147e:	d1f8      	bne.n	1472 <saveData(short)+0x6a>
      if(haveStore)
    1480:	4b18      	ldr	r3, [pc, #96]	; (14e4 <saveData(short)+0xdc>)
    1482:	681b      	ldr	r3, [r3, #0]
    1484:	b9eb      	cbnz	r3, 14c2 <saveData(short)+0xba>
    }
    else
      digitalWriteFast(13,LOW);

    return status;
}
    1486:	4630      	mov	r0, r6
    1488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      while(queue_isBusy()); //wait if acq writes to queue
    148a:	f000 f887 	bl	159c <queue_isBusy()>
    148e:	4604      	mov	r4, r0
    1490:	2800      	cmp	r0, #0
    1492:	d1fa      	bne.n	148a <saveData(short)+0x82>
      pullData(diskBuffer);
    1494:	4810      	ldr	r0, [pc, #64]	; (14d8 <saveData(short)+0xd0>)
    1496:	f000 f8c1 	bl	161c <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    149a:	4b10      	ldr	r3, [pc, #64]	; (14dc <saveData(short)+0xd4>)
    149c:	4a10      	ldr	r2, [pc, #64]	; (14e0 <saveData(short)+0xd8>)
    149e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    14a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    14a6:	3401      	adds	r4, #1
    14a8:	2c08      	cmp	r4, #8
    14aa:	d1f8      	bne.n	149e <saveData(short)+0x96>
    14ac:	4b07      	ldr	r3, [pc, #28]	; (14cc <saveData(short)+0xc4>)
}
    14ae:	4630      	mov	r0, r6
    14b0:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
    14b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    14b6:	4b05      	ldr	r3, [pc, #20]	; (14cc <saveData(short)+0xc4>)
    14b8:	2208      	movs	r2, #8
    14ba:	4630      	mov	r0, r6
    14bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    14c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status=storeData(status);
    14c2:	4630      	mov	r0, r6
}
    14c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        status=storeData(status);
    14c8:	f7ff be06 	b.w	10d8 <storeData(short)>
    14cc:	42004000 	.word	0x42004000
    14d0:	20008bd4 	.word	0x20008bd4
    14d4:	2001e0ac 	.word	0x2001e0ac
    14d8:	2000c540 	.word	0x2000c540
    14dc:	2000c53c 	.word	0x2000c53c
    14e0:	2001e6a0 	.word	0x2001e6a0
    14e4:	2001e698 	.word	0x2001e698

000014e8 <_GLOBAL__sub_I_t_acq>:
  FsVolume() = default;
    14e8:	481c      	ldr	r0, [pc, #112]	; (155c <_GLOBAL__sub_I_t_acq+0x74>)
	SPISettings() : _clock(4000000) {
    14ea:	4b1d      	ldr	r3, [pc, #116]	; (1560 <_GLOBAL__sub_I_t_acq+0x78>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    14ec:	491d      	ldr	r1, [pc, #116]	; (1564 <_GLOBAL__sub_I_t_acq+0x7c>)
SdFs sd;
    14ee:	4a1e      	ldr	r2, [pc, #120]	; (1568 <_GLOBAL__sub_I_t_acq+0x80>)
}
    14f0:	b510      	push	{r4, lr}
    14f2:	f8c0 34a0 	str.w	r3, [r0, #1184]	; 0x4a0
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() { initSharedSpiCard(); }
    14f6:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    14fa:	2400      	movs	r4, #0
    14fc:	f8c0 148c 	str.w	r1, [r0, #1164]	; 0x48c
    1500:	f8c0 34a8 	str.w	r3, [r0, #1192]	; 0x4a8
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1504:	2107      	movs	r1, #7
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    1506:	4b19      	ldr	r3, [pc, #100]	; (156c <_GLOBAL__sub_I_t_acq+0x84>)
    1508:	f8c0 4480 	str.w	r4, [r0, #1152]	; 0x480
    150c:	f8c0 4484 	str.w	r4, [r0, #1156]	; 0x484
class SdBase : public Vol {
    1510:	f8c0 4488 	str.w	r4, [r0, #1160]	; 0x488
  SdioConfig() {}
    1514:	f8a0 4494 	strh.w	r4, [r0, #1172]	; 0x494
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    1518:	f8c0 449c 	str.w	r4, [r0, #1180]	; 0x49c
  SharedSpiCard() { initSharedSpiCard(); }
    151c:	f8a0 44ac 	strh.w	r4, [r0, #1196]	; 0x4ac
    1520:	f8c0 14a4 	str.w	r1, [r0, #1188]	; 0x4a4
    m_type = 0;
    1524:	f880 44ae 	strb.w	r4, [r0, #1198]	; 0x4ae
SdFs sd;
    1528:	4911      	ldr	r1, [pc, #68]	; (1570 <_GLOBAL__sub_I_t_acq+0x88>)
  DedicatedSpiCard() = default;
    152a:	f8c0 44b0 	str.w	r4, [r0, #1200]	; 0x4b0
    152e:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    1532:	f880 44b4 	strb.w	r4, [r0, #1204]	; 0x4b4
    1536:	f008 f971 	bl	981c <__aeabi_atexit>
	constexpr Print() : write_error(0) {}
    153a:	480e      	ldr	r0, [pc, #56]	; (1574 <_GLOBAL__sub_I_t_acq+0x8c>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    153c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1540:	4b0d      	ldr	r3, [pc, #52]	; (1578 <_GLOBAL__sub_I_t_acq+0x90>)
    1542:	7304      	strb	r4, [r0, #12]
FsFile file;
    1544:	4a08      	ldr	r2, [pc, #32]	; (1568 <_GLOBAL__sub_I_t_acq+0x80>)
    1546:	6003      	str	r3, [r0, #0]
    1548:	e9c0 4101 	strd	r4, r1, [r0, #4]
  FsBaseFile() = default;
    154c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    1550:	490a      	ldr	r1, [pc, #40]	; (157c <_GLOBAL__sub_I_t_acq+0x94>)
}
    1552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
FsFile file;
    1556:	f008 b961 	b.w	981c <__aeabi_atexit>
    155a:	bf00      	nop
    155c:	2001e798 	.word	0x2001e798
    1560:	003d0900 	.word	0x003d0900
    1564:	2000080c 	.word	0x2000080c
    1568:	200085f0 	.word	0x200085f0
    156c:	20000728 	.word	0x20000728
    1570:	00000afd 	.word	0x00000afd
    1574:	2001e648 	.word	0x2001e648
    1578:	200007c4 	.word	0x200007c4
    157c:	00000b81 	.word	0x00000b81

00001580 <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    1580:	4a04      	ldr	r2, [pc, #16]	; (1594 <getDataCount()+0x14>)
    1582:	4b05      	ldr	r3, [pc, #20]	; (1598 <getDataCount()+0x18>)
    1584:	6810      	ldr	r0, [r2, #0]
    1586:	681b      	ldr	r3, [r3, #0]
    1588:	1ac0      	subs	r0, r0, r3
    158a:	bf48      	it	mi
    158c:	3080      	addmi	r0, #128	; 0x80
    158e:	b280      	uxth	r0, r0
    1590:	4770      	bx	lr
    1592:	bf00      	nop
    1594:	2001ec60 	.word	0x2001ec60
    1598:	2001e69c 	.word	0x2001e69c

0000159c <queue_isBusy()>:

  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    159c:	4b01      	ldr	r3, [pc, #4]	; (15a4 <queue_isBusy()+0x8>)
    159e:	6818      	ldr	r0, [r3, #0]
    15a0:	4770      	bx	lr
    15a2:	bf00      	nop
    15a4:	2000d744 	.word	0x2000d744

000015a8 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    15a8:	b470      	push	{r4, r5, r6}
    if ( (tail+1)%MAXBUF == head ) return 0;
    15aa:	4c18      	ldr	r4, [pc, #96]	; (160c <pushData(unsigned long*)+0x64>)
    15ac:	4a18      	ldr	r2, [pc, #96]	; (1610 <pushData(unsigned long*)+0x68>)
    15ae:	6823      	ldr	r3, [r4, #0]
    15b0:	6811      	ldr	r1, [r2, #0]
    15b2:	3301      	adds	r3, #1
    15b4:	425a      	negs	r2, r3
    15b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    15ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    15be:	bf58      	it	pl
    15c0:	4253      	negpl	r3, r2
    15c2:	428b      	cmp	r3, r1
    15c4:	d01e      	beq.n	1604 <pushData(unsigned long*)+0x5c>
    //while(busy); 
    queue_busy=1;
    15c6:	4e13      	ldr	r6, [pc, #76]	; (1614 <pushData(unsigned long*)+0x6c>)
    15c8:	2201      	movs	r2, #1
    15ca:	1f01      	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    15cc:	2300      	movs	r3, #0
    15ce:	4d12      	ldr	r5, [pc, #72]	; (1618 <pushData(unsigned long*)+0x70>)
    queue_busy=1;
    15d0:	6032      	str	r2, [r6, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    15d2:	6822      	ldr	r2, [r4, #0]
    15d4:	f851 0f04 	ldr.w	r0, [r1, #4]!
    15d8:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    15dc:	3301      	adds	r3, #1
    15de:	2b80      	cmp	r3, #128	; 0x80
    15e0:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    15e4:	d1f5      	bne.n	15d2 <pushData(unsigned long*)+0x2a>
    tail = (tail+1)%MAXBUF;
    15e6:	6823      	ldr	r3, [r4, #0]
    queue_busy=0;
    return 1; // signal success.
    15e8:	2001      	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    15ea:	3301      	adds	r3, #1
    15ec:	425a      	negs	r2, r3
    15ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    15f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    15f6:	bf58      	it	pl
    15f8:	4253      	negpl	r3, r2
    queue_busy=0;
    15fa:	2200      	movs	r2, #0
    tail = (tail+1)%MAXBUF;
    15fc:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    15fe:	6032      	str	r2, [r6, #0]
  }
    1600:	bc70      	pop	{r4, r5, r6}
    1602:	4770      	bx	lr
    if ( (tail+1)%MAXBUF == head ) return 0;
    1604:	2000      	movs	r0, #0
  }
    1606:	bc70      	pop	{r4, r5, r6}
    1608:	4770      	bx	lr
    160a:	bf00      	nop
    160c:	2001ec60 	.word	0x2001ec60
    1610:	2001e69c 	.word	0x2001e69c
    1614:	2000d744 	.word	0x2000d744
    1618:	2000d748 	.word	0x2000d748

0000161c <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    161c:	4b14      	ldr	r3, [pc, #80]	; (1670 <pullData(unsigned long*)+0x54>)
  {
    161e:	b430      	push	{r4, r5}
    if ( head==tail ) return 0;
    1620:	4c14      	ldr	r4, [pc, #80]	; (1674 <pullData(unsigned long*)+0x58>)
    1622:	6822      	ldr	r2, [r4, #0]
    1624:	681b      	ldr	r3, [r3, #0]
    1626:	429a      	cmp	r2, r3
    1628:	d01e      	beq.n	1668 <pullData(unsigned long*)+0x4c>
    //while(busy); 
    queue_busy=1;
    162a:	4d13      	ldr	r5, [pc, #76]	; (1678 <pullData(unsigned long*)+0x5c>)
    162c:	2201      	movs	r2, #1
    162e:	1f01      	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    1630:	2300      	movs	r3, #0
    1632:	4812      	ldr	r0, [pc, #72]	; (167c <pullData(unsigned long*)+0x60>)
    queue_busy=1;
    1634:	602a      	str	r2, [r5, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    1636:	6822      	ldr	r2, [r4, #0]
    1638:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    163c:	3301      	adds	r3, #1
    163e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    1642:	2b80      	cmp	r3, #128	; 0x80
    1644:	f841 2f04 	str.w	r2, [r1, #4]!
    1648:	d1f5      	bne.n	1636 <pullData(unsigned long*)+0x1a>
    head = (head+1)%MAXBUF;
    164a:	6823      	ldr	r3, [r4, #0]
    queue_busy=0;
    return 1;
    164c:	2001      	movs	r0, #1
    head = (head+1)%MAXBUF;
    164e:	3301      	adds	r3, #1
    1650:	425a      	negs	r2, r3
    1652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1656:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    165a:	bf58      	it	pl
    165c:	4253      	negpl	r3, r2
    queue_busy=0;
    165e:	2200      	movs	r2, #0
    head = (head+1)%MAXBUF;
    1660:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    1662:	602a      	str	r2, [r5, #0]
  }
    1664:	bc30      	pop	{r4, r5}
    1666:	4770      	bx	lr
    if ( head==tail ) return 0;
    1668:	2000      	movs	r0, #0
  }
    166a:	bc30      	pop	{r4, r5}
    166c:	4770      	bx	lr
    166e:	bf00      	nop
    1670:	2001ec60 	.word	0x2001ec60
    1674:	2001e69c 	.word	0x2001e69c
    1678:	2000d744 	.word	0x2000d744
    167c:	2000d748 	.word	0x2000d748

00001680 <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    1680:	4a54      	ldr	r2, [pc, #336]	; (17d4 <time2date(unsigned long, datetime_t*)+0x154>)
  {
    1682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1686:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    168a:	f240 196d 	movw	r9, #365	; 0x16d
    168e:	4e52      	ldr	r6, [pc, #328]	; (17d8 <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1690:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1692:	4f52      	ldr	r7, [pc, #328]	; (17dc <time2date(unsigned long, datetime_t*)+0x15c>)
    1694:	f8df 8158 	ldr.w	r8, [pc, #344]	; 17f0 <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    1698:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    169c:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    16a0:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    16a2:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    16a6:	4c4e      	ldr	r4, [pc, #312]	; (17e0 <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    16a8:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    16ac:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    16b0:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    16b4:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    16b6:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    16ba:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    16bc:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    16c0:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    16c4:	4b47      	ldr	r3, [pc, #284]	; (17e4 <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    16c6:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    16ca:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    16ce:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    16d0:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    16d2:	1ae2      	subs	r2, r4, r3
    16d4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    16d8:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    16da:	089b      	lsrs	r3, r3, #2
    16dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    16e0:	1ae4      	subs	r4, r4, r3
    16e2:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    16e4:	b2c3      	uxtb	r3, r0
    16e6:	f240 1c6d 	movw	ip, #365	; 0x16d
    16ea:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    16ee:	f013 0403 	ands.w	r4, r3, #3
    16f2:	fb06 f503 	mul.w	r5, r6, r3
    16f6:	d108      	bne.n	170a <time2date(unsigned long, datetime_t*)+0x8a>
    16f8:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    16fc:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    1700:	d303      	bcc.n	170a <time2date(unsigned long, datetime_t*)+0x8a>
    1702:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    1706:	bf38      	it	cc
    1708:	46cc      	movcc	ip, r9
    170a:	4462      	add	r2, ip
    170c:	3001      	adds	r0, #1
    170e:	4596      	cmp	lr, r2
    1710:	d2e8      	bcs.n	16e4 <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    1712:	4d35      	ldr	r5, [pc, #212]	; (17e8 <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    1714:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    1716:	fba5 0503 	umull	r0, r5, r5, r3
    171a:	b3a4      	cbz	r4, 1786 <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    171c:	096e      	lsrs	r6, r5, #5
    171e:	2764      	movs	r7, #100	; 0x64
    1720:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1724:	09ed      	lsrs	r5, r5, #7
    1726:	fb07 3616 	mls	r6, r7, r6, r3
    172a:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    172e:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    1732:	ebae 0e02 	sub.w	lr, lr, r2
    1736:	2300      	movs	r3, #0
    1738:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    173a:	4f2c      	ldr	r7, [pc, #176]	; (17ec <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    173c:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    173e:	e00a      	b.n	1756 <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    1740:	f813 c007 	ldrb.w	ip, [r3, r7]
    1744:	4584      	cmp	ip, r0
    1746:	d837      	bhi.n	17b8 <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    1748:	2a0c      	cmp	r2, #12
        time -= monthLength;
    174a:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    174e:	d012      	beq.n	1776 <time2date(unsigned long, datetime_t*)+0xf6>
    1750:	3201      	adds	r2, #1
    1752:	3301      	adds	r3, #1
    1754:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    1756:	2b01      	cmp	r3, #1
    1758:	fa5f fe83 	uxtb.w	lr, r3
    175c:	d1f0      	bne.n	1740 <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    175e:	b91c      	cbnz	r4, 1768 <time2date(unsigned long, datetime_t*)+0xe8>
    1760:	b1f6      	cbz	r6, 17a0 <time2date(unsigned long, datetime_t*)+0x120>
    1762:	f04f 0c1d 	mov.w	ip, #29
    1766:	e001      	b.n	176c <time2date(unsigned long, datetime_t*)+0xec>
    1768:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    176c:	4560      	cmp	r0, ip
    176e:	d32d      	bcc.n	17cc <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    1770:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    1774:	e7ec      	b.n	1750 <time2date(unsigned long, datetime_t*)+0xd0>
    1776:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    177a:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    177c:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    1780:	70c8      	strb	r0, [r1, #3]
  }
    1782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    1786:	2064      	movs	r0, #100	; 0x64
    1788:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    178a:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    178c:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1790:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1794:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    1798:	b14e      	cbz	r6, 17ae <time2date(unsigned long, datetime_t*)+0x12e>
    179a:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    179e:	e7c8      	b.n	1732 <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    17a0:	2d00      	cmp	r5, #0
    17a2:	bf14      	ite	ne
    17a4:	f04f 0c1c 	movne.w	ip, #28
    17a8:	f04f 0c1d 	moveq.w	ip, #29
    17ac:	e7de      	b.n	176c <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    17ae:	2d00      	cmp	r5, #0
    17b0:	d1bd      	bne.n	172e <time2date(unsigned long, datetime_t*)+0xae>
    17b2:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    17b6:	e7bc      	b.n	1732 <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    17b8:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    17bc:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    17be:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    17c2:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    17c4:	f881 e002 	strb.w	lr, [r1, #2]
  }
    17c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    17cc:	f04f 0e02 	mov.w	lr, #2
    17d0:	e7d3      	b.n	177a <time2date(unsigned long, datetime_t*)+0xfa>
    17d2:	bf00      	nop
    17d4:	88888889 	.word	0x88888889
    17d8:	c28f5c29 	.word	0xc28f5c29
    17dc:	028f5c28 	.word	0x028f5c28
    17e0:	aaaaaaab 	.word	0xaaaaaaab
    17e4:	24924925 	.word	0x24924925
    17e8:	51eb851f 	.word	0x51eb851f
    17ec:	20000580 	.word	0x20000580
    17f0:	00a3d70a 	.word	0x00a3d70a

000017f4 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    17f4:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    17f6:	4a35      	ldr	r2, [pc, #212]	; (18cc <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    17f8:	314e      	adds	r1, #78	; 0x4e
    17fa:	b2c9      	uxtb	r1, r1
  {
    17fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    1800:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    1804:	b1e1      	cbz	r1, 1840 <date2time(datetime_t*)+0x4c>
    1806:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    180a:	f240 73b3 	movw	r3, #1971	; 0x7b3
    180e:	4d30      	ldr	r5, [pc, #192]	; (18d0 <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    1810:	4e30      	ldr	r6, [pc, #192]	; (18d4 <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    1812:	4f31      	ldr	r7, [pc, #196]	; (18d8 <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    1814:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 18e4 <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    1818:	4563      	cmp	r3, ip
    181a:	fb05 f403 	mul.w	r4, r5, r3
    181e:	d00f      	beq.n	1840 <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    1820:	f013 0f03 	tst.w	r3, #3
    1824:	f103 0301 	add.w	r3, r3, #1
    1828:	d1f6      	bne.n	1818 <date2time(datetime_t*)+0x24>
    182a:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    182e:	d302      	bcc.n	1836 <date2time(datetime_t*)+0x42>
    1830:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    1834:	d3f0      	bcc.n	1818 <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    1836:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    1838:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    183a:	fb05 f403 	mul.w	r4, r5, r3
    183e:	d1ef      	bne.n	1820 <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    1840:	f990 e002 	ldrsb.w	lr, [r0, #2]
    1844:	f1be 0f01 	cmp.w	lr, #1
    1848:	dd29      	ble.n	189e <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    184a:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    184e:	4e23      	ldr	r6, [pc, #140]	; (18dc <date2time(datetime_t*)+0xe8>)
    1850:	2564      	movs	r5, #100	; 0x64
    1852:	f44f 74c8 	mov.w	r4, #400	; 0x190
    1856:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    185a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 18e8 <date2time(datetime_t*)+0xf4>
    185e:	4920      	ldr	r1, [pc, #128]	; (18e0 <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1860:	0977      	lsrs	r7, r6, #5
    1862:	09f6      	lsrs	r6, r6, #7
    1864:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1868:	4d1b      	ldr	r5, [pc, #108]	; (18d8 <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    186a:	fb04 3616 	mls	r6, r4, r6, r3
    186e:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    1872:	2301      	movs	r3, #1
    1874:	e007      	b.n	1886 <date2time(datetime_t*)+0x92>
    1876:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1878:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    187c:	3101      	adds	r1, #1
    187e:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1880:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    1884:	d00b      	beq.n	189e <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1886:	2b02      	cmp	r3, #2
    1888:	d1f5      	bne.n	1876 <date2time(datetime_t*)+0x82>
    188a:	2c00      	cmp	r4, #0
    188c:	d1f3      	bne.n	1876 <date2time(datetime_t*)+0x82>
    188e:	b90f      	cbnz	r7, 1894 <date2time(datetime_t*)+0xa0>
    1890:	2e00      	cmp	r6, #0
    1892:	d1f0      	bne.n	1876 <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    1894:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    1896:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    1898:	3101      	adds	r1, #1
    189a:	4573      	cmp	r3, lr
    189c:	d1f3      	bne.n	1886 <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    189e:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    18a2:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    18a6:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    18aa:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    18ae:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    18b2:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    18b4:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    18b8:	f990 1003 	ldrsb.w	r1, [r0, #3]
    18bc:	4c06      	ldr	r4, [pc, #24]	; (18d8 <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    18be:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    18c0:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    18c2:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    18c6:	4410      	add	r0, r2
    18c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18cc:	01e13380 	.word	0x01e13380
    18d0:	c28f5c29 	.word	0xc28f5c29
    18d4:	028f5c28 	.word	0x028f5c28
    18d8:	00015180 	.word	0x00015180
    18dc:	51eb851f 	.word	0x51eb851f
    18e0:	20000580 	.word	0x20000580
    18e4:	00a3d70a 	.word	0x00a3d70a
    18e8:	00263b80 	.word	0x00263b80

000018ec <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    18ec:	2001      	movs	r0, #1
    18ee:	4770      	bx	lr

000018f0 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    18f0:	b500      	push	{lr}
    18f2:	b083      	sub	sp, #12
    18f4:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    18f6:	f006 fc4f 	bl	8198 <rtc_get>
    18fa:	9901      	ldr	r1, [sp, #4]
    18fc:	f7ff fec0 	bl	1680 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    1900:	2001      	movs	r0, #1
    1902:	b003      	add	sp, #12
    1904:	f85d fb04 	ldr.w	pc, [sp], #4

00001908 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    1908:	b570      	push	{r4, r5, r6, lr}
    190a:	b082      	sub	sp, #8
    190c:	4614      	mov	r4, r2
    190e:	460d      	mov	r5, r1
    1910:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    1912:	f006 fc41 	bl	8198 <rtc_get>
    1916:	4669      	mov	r1, sp
    1918:	f7ff feb2 	bl	1680 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    191c:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    1920:	4608      	mov	r0, r1
    t.month=month;
    1922:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    1926:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    192a:	f7ff ff63 	bl	17f4 <date2time(datetime_t*)>
    192e:	f006 fc45 	bl	81bc <rtc_set>
    rtc_set_datetime(&t);
  }
    1932:	b002      	add	sp, #8
    1934:	bd70      	pop	{r4, r5, r6, pc}
    1936:	bf00      	nop

00001938 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    1938:	b570      	push	{r4, r5, r6, lr}
    193a:	b082      	sub	sp, #8
    193c:	4614      	mov	r4, r2
    193e:	460d      	mov	r5, r1
    1940:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    1942:	f006 fc29 	bl	8198 <rtc_get>
    1946:	4669      	mov	r1, sp
    1948:	f7ff fe9a 	bl	1680 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    194c:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    1950:	4608      	mov	r0, r1
    t.min=minutes;
    1952:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    1956:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    195a:	f7ff ff4b 	bl	17f4 <date2time(datetime_t*)>
    195e:	f006 fc2d 	bl	81bc <rtc_set>
    rtc_set_datetime(&t);
  }
    1962:	b002      	add	sp, #8
    1964:	bd70      	pop	{r4, r5, r6, pc}
    1966:	bf00      	nop

00001968 <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1968:	b510      	push	{r4, lr}
    196a:	4604      	mov	r4, r0
    196c:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    196e:	f007 fcd3 	bl	9318 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1972:	2800      	cmp	r0, #0
    1974:	d0fb      	beq.n	196e <menuGetInt32(long*) [clone .isra.0]+0x6>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1976:	210d      	movs	r1, #13
    1978:	aa02      	add	r2, sp, #8
    197a:	2328      	movs	r3, #40	; 0x28
    197c:	480d      	ldr	r0, [pc, #52]	; (19b4 <menuGetInt32(long*) [clone .isra.0]+0x4c>)
    197e:	f006 f899 	bl	7ab4 <Stream::readBytesUntil(char, char*, unsigned int)>
    1982:	4603      	mov	r3, r0
  buffer[count]=0;
    1984:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1986:	a802      	add	r0, sp, #8
    1988:	3330      	adds	r3, #48	; 0x30
    198a:	446b      	add	r3, sp
    198c:	f803 2c28 	strb.w	r2, [r3, #-40]
    1990:	f00a fb96 	bl	c0c0 <strlen>
    1994:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1996:	a802      	add	r0, sp, #8
    1998:	f007 fd28 	bl	93ec <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    199c:	4805      	ldr	r0, [pc, #20]	; (19b4 <menuGetInt32(long*) [clone .isra.0]+0x4c>)
    199e:	f005 ff93 	bl	78c8 <Print::println()>
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    19a2:	aa01      	add	r2, sp, #4
    19a4:	4904      	ldr	r1, [pc, #16]	; (19b8 <menuGetInt32(long*) [clone .isra.0]+0x50>)
    19a6:	a802      	add	r0, sp, #8
    19a8:	f009 fe6e 	bl	b688 <sscanf>
    19ac:	9b01      	ldr	r3, [sp, #4]
    19ae:	6023      	str	r3, [r4, #0]
  return 1;
}
    19b0:	b00c      	add	sp, #48	; 0x30
    19b2:	bd10      	pop	{r4, pc}
    19b4:	200085d4 	.word	0x200085d4
    19b8:	2000057c 	.word	0x2000057c

000019bc <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    19bc:	b510      	push	{r4, lr}
    19be:	4604      	mov	r4, r0
    19c0:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    19c2:	f007 fca9 	bl	9318 <usb_serial_available>
  while(!Serial.available()) continue;
    19c6:	2800      	cmp	r0, #0
    19c8:	d0fb      	beq.n	19c2 <menuGetInt16(short*) [clone .isra.0]+0x6>
  count = Serial.readBytesUntil('\r',buffer,40);
    19ca:	210d      	movs	r1, #13
    19cc:	aa02      	add	r2, sp, #8
    19ce:	2328      	movs	r3, #40	; 0x28
    19d0:	480d      	ldr	r0, [pc, #52]	; (1a08 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    19d2:	f006 f86f 	bl	7ab4 <Stream::readBytesUntil(char, char*, unsigned int)>
    19d6:	4603      	mov	r3, r0
  buffer[count]=0;
    19d8:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    19da:	a802      	add	r0, sp, #8
    19dc:	3330      	adds	r3, #48	; 0x30
    19de:	446b      	add	r3, sp
    19e0:	f803 2c28 	strb.w	r2, [r3, #-40]
    19e4:	f00a fb6c 	bl	c0c0 <strlen>
    19e8:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    19ea:	a802      	add	r0, sp, #8
    19ec:	f007 fcfe 	bl	93ec <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    19f0:	4805      	ldr	r0, [pc, #20]	; (1a08 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    19f2:	f005 ff69 	bl	78c8 <Print::println()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    19f6:	aa01      	add	r2, sp, #4
    19f8:	4904      	ldr	r1, [pc, #16]	; (1a0c <menuGetInt16(short*) [clone .isra.0]+0x50>)
    19fa:	a802      	add	r0, sp, #8
    19fc:	f009 fe44 	bl	b688 <sscanf>
    1a00:	9b01      	ldr	r3, [sp, #4]
    1a02:	8023      	strh	r3, [r4, #0]
}
    1a04:	b00c      	add	sp, #48	; 0x30
    1a06:	bd10      	pop	{r4, pc}
    1a08:	200085d4 	.word	0x200085d4
    1a0c:	2000057c 	.word	0x2000057c

00001a10 <menuGet3Int(int*, int*, int*) [clone .isra.0]>:

static int menuGet3Int(int *val1, int *val2, int *val3)
    1a10:	b570      	push	{r4, r5, r6, lr}
    1a12:	4606      	mov	r6, r0
    1a14:	b090      	sub	sp, #64	; 0x40
    1a16:	460c      	mov	r4, r1
    1a18:	4615      	mov	r5, r2
        virtual int available() { return usb_serial_available(); }
    1a1a:	f007 fc7d 	bl	9318 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1a1e:	2800      	cmp	r0, #0
    1a20:	d0fb      	beq.n	1a1a <menuGet3Int(int*, int*, int*) [clone .isra.0]+0xa>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1a22:	aa06      	add	r2, sp, #24
    1a24:	210d      	movs	r1, #13
    1a26:	2328      	movs	r3, #40	; 0x28
    1a28:	4810      	ldr	r0, [pc, #64]	; (1a6c <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    1a2a:	f006 f843 	bl	7ab4 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1a2e:	f100 0340 	add.w	r3, r0, #64	; 0x40
    1a32:	eb0d 0003 	add.w	r0, sp, r3
    1a36:	2300      	movs	r3, #0
    1a38:	f800 3c28 	strb.w	r3, [r0, #-40]
							  return write((const uint8_t *)str, strlen(str)); }
    1a3c:	a806      	add	r0, sp, #24
    1a3e:	f00a fb3f 	bl	c0c0 <strlen>
    1a42:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a44:	a806      	add	r0, sp, #24
    1a46:	f007 fcd1 	bl	93ec <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a4a:	4808      	ldr	r0, [pc, #32]	; (1a6c <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    1a4c:	f005 ff3c 	bl	78c8 <Print::println()>
  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1a50:	f10d 0317 	add.w	r3, sp, #23
    1a54:	4632      	mov	r2, r6
    1a56:	4906      	ldr	r1, [pc, #24]	; (1a70 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x60>)
    1a58:	a806      	add	r0, sp, #24
    1a5a:	9400      	str	r4, [sp, #0]
    1a5c:	e9cd 3501 	strd	r3, r5, [sp, #4]
    1a60:	f10d 0316 	add.w	r3, sp, #22
    1a64:	f009 fe10 	bl	b688 <sscanf>
}
    1a68:	b010      	add	sp, #64	; 0x40
    1a6a:	bd70      	pop	{r4, r5, r6, pc}
    1a6c:	200085d4 	.word	0x200085d4
    1a70:	20000574 	.word	0x20000574

00001a74 <menu1()>:

void menu1(void)
{   // have ':'
    1a74:	b508      	push	{r3, lr}
        virtual int available() { return usb_serial_available(); }
    1a76:	f007 fc4f 	bl	9318 <usb_serial_available>
    while(!Serial.available()) ;
    1a7a:	2800      	cmp	r0, #0
    1a7c:	d0fb      	beq.n	1a76 <menu1()+0x2>
    char ch;
    ch=Serial.read();
    if(ch=='x') return;
}
    1a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        virtual int read() { return usb_serial_getchar(); }
    1a82:	f007 bc8d 	b.w	93a0 <usb_serial_getchar>
    1a86:	bf00      	nop

00001a88 <menu2()>:

void menu2(void)
{   // have '?'
    1a88:	b510      	push	{r4, lr}
    1a8a:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    1a8c:	f007 fc44 	bl	9318 <usb_serial_available>
    datetime_t t;

    while(!Serial.available()) ;
    1a90:	2800      	cmp	r0, #0
    1a92:	d0fb      	beq.n	1a8c <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1a94:	f007 fc84 	bl	93a0 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1a98:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    1a9a:	2870      	cmp	r0, #112	; 0x70
    1a9c:	d018      	beq.n	1ad0 <menu2()+0x48>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    1a9e:	2864      	cmp	r0, #100	; 0x64
    1aa0:	d065      	beq.n	1b6e <menu2()+0xe6>
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
    1aa2:	3861      	subs	r0, #97	; 0x61
    1aa4:	2813      	cmp	r0, #19
    1aa6:	d80d      	bhi.n	1ac4 <menu2()+0x3c>
    1aa8:	e8df f000 	tbb	[pc, r0]
    1aac:	0c530c70 	.word	0x0c530c70
    1ab0:	0c0c7f0c 	.word	0x0c0c7f0c
    1ab4:	0c0c0c0c 	.word	0x0c0c0c0c
    1ab8:	0c0c0c0c 	.word	0x0c0c0c0c
    1abc:	928c0c0c 	.word	0x928c0c0c
    1ac0:	f007 fc6e 	bl	93a0 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    1ac4:	f007 fc28 	bl	9318 <usb_serial_available>
    }
    else if(ch=='c')
    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
    1ac8:	2800      	cmp	r0, #0
    1aca:	d1f9      	bne.n	1ac0 <menu2()+0x38>

}
    1acc:	b008      	add	sp, #32
    1ace:	bd10      	pop	{r4, pc}
      rtc_get_datetime(&t);
    1ad0:	a806      	add	r0, sp, #24
    1ad2:	f7ff ff0d 	bl	18f0 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    1ad6:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    1ada:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    1ade:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1ae2:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1ae6:	f99d 401e 	ldrsb.w	r4, [sp, #30]
    1aea:	9000      	str	r0, [sp, #0]
    1aec:	4840      	ldr	r0, [pc, #256]	; (1bf0 <menu2()+0x168>)
    1aee:	e9cd 3203 	strd	r3, r2, [sp, #12]
    1af2:	e9cd 1401 	strd	r1, r4, [sp, #4]
    1af6:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1afa:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1afe:	493d      	ldr	r1, [pc, #244]	; (1bf4 <menu2()+0x16c>)
    1b00:	f005 fefe 	bl	7900 <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1b04:	210c      	movs	r1, #12
    1b06:	483c      	ldr	r0, [pc, #240]	; (1bf8 <menu2()+0x170>)
    1b08:	f007 fc70 	bl	93ec <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    1b0c:	493b      	ldr	r1, [pc, #236]	; (1bfc <menu2()+0x174>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1b0e:	220a      	movs	r2, #10
    1b10:	2300      	movs	r3, #0
    1b12:	6809      	ldr	r1, [r1, #0]
    1b14:	4836      	ldr	r0, [pc, #216]	; (1bf0 <menu2()+0x168>)
    1b16:	f005 ff01 	bl	791c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1b1a:	4835      	ldr	r0, [pc, #212]	; (1bf0 <menu2()+0x168>)
    1b1c:	f005 fed4 	bl	78c8 <Print::println()>
    1b20:	210c      	movs	r1, #12
    1b22:	4837      	ldr	r0, [pc, #220]	; (1c00 <menu2()+0x178>)
    1b24:	f007 fc62 	bl	93ec <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1b28:	4b36      	ldr	r3, [pc, #216]	; (1c04 <menu2()+0x17c>)
	size_t println(long n)				{ return print(n) + println(); }
    1b2a:	4831      	ldr	r0, [pc, #196]	; (1bf0 <menu2()+0x168>)
    1b2c:	6819      	ldr	r1, [r3, #0]
    1b2e:	f005 febf 	bl	78b0 <Print::print(long)>
    1b32:	482f      	ldr	r0, [pc, #188]	; (1bf0 <menu2()+0x168>)
    1b34:	f005 fec8 	bl	78c8 <Print::println()>
    1b38:	210c      	movs	r1, #12
    1b3a:	4833      	ldr	r0, [pc, #204]	; (1c08 <menu2()+0x180>)
    1b3c:	f007 fc56 	bl	93ec <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1b40:	4b32      	ldr	r3, [pc, #200]	; (1c0c <menu2()+0x184>)
	size_t print(int n)				{ return print((long)n); }
    1b42:	482b      	ldr	r0, [pc, #172]	; (1bf0 <menu2()+0x168>)
    1b44:	f9b3 1000 	ldrsh.w	r1, [r3]
    1b48:	f005 feb2 	bl	78b0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1b4c:	4828      	ldr	r0, [pc, #160]	; (1bf0 <menu2()+0x168>)
    1b4e:	f005 febb 	bl	78c8 <Print::println()>
    1b52:	210c      	movs	r1, #12
    1b54:	482e      	ldr	r0, [pc, #184]	; (1c10 <menu2()+0x188>)
    1b56:	f007 fc49 	bl	93ec <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    1b5a:	4b2e      	ldr	r3, [pc, #184]	; (1c14 <menu2()+0x18c>)
	size_t print(int n)				{ return print((long)n); }
    1b5c:	f9b3 1000 	ldrsh.w	r1, [r3]
    1b60:	4823      	ldr	r0, [pc, #140]	; (1bf0 <menu2()+0x168>)
    1b62:	f005 fea5 	bl	78b0 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1b66:	4822      	ldr	r0, [pc, #136]	; (1bf0 <menu2()+0x168>)
    1b68:	f005 feae 	bl	78c8 <Print::println()>
    1b6c:	e7aa      	b.n	1ac4 <menu2()+0x3c>
      rtc_get_datetime(&t);
    1b6e:	a806      	add	r0, sp, #24
    1b70:	f7ff febe 	bl	18f0 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    1b74:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1b78:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1b7c:	9000      	str	r0, [sp, #0]
    1b7e:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1b82:	4925      	ldr	r1, [pc, #148]	; (1c18 <menu2()+0x190>)
    1b84:	481a      	ldr	r0, [pc, #104]	; (1bf0 <menu2()+0x168>)
    1b86:	f005 febb 	bl	7900 <Print::printf(char const*, ...)>
    1b8a:	e79b      	b.n	1ac4 <menu2()+0x3c>
    1b8c:	210c      	movs	r1, #12
    1b8e:	481a      	ldr	r0, [pc, #104]	; (1bf8 <menu2()+0x170>)
    1b90:	f007 fc2c 	bl	93ec <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    1b94:	4919      	ldr	r1, [pc, #100]	; (1bfc <menu2()+0x174>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1b96:	2300      	movs	r3, #0
    1b98:	220a      	movs	r2, #10
    1b9a:	6809      	ldr	r1, [r1, #0]
    1b9c:	4814      	ldr	r0, [pc, #80]	; (1bf0 <menu2()+0x168>)
    1b9e:	f005 febd 	bl	791c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1ba2:	4813      	ldr	r0, [pc, #76]	; (1bf0 <menu2()+0x168>)
    1ba4:	f005 fe90 	bl	78c8 <Print::println()>
    1ba8:	e78c      	b.n	1ac4 <menu2()+0x3c>
    1baa:	210c      	movs	r1, #12
    1bac:	4814      	ldr	r0, [pc, #80]	; (1c00 <menu2()+0x178>)
    1bae:	f007 fc1d 	bl	93ec <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1bb2:	4b14      	ldr	r3, [pc, #80]	; (1c04 <menu2()+0x17c>)
	size_t println(long n)				{ return print(n) + println(); }
    1bb4:	480e      	ldr	r0, [pc, #56]	; (1bf0 <menu2()+0x168>)
    1bb6:	6819      	ldr	r1, [r3, #0]
    1bb8:	f005 fe7a 	bl	78b0 <Print::print(long)>
    1bbc:	480c      	ldr	r0, [pc, #48]	; (1bf0 <menu2()+0x168>)
    1bbe:	f005 fe83 	bl	78c8 <Print::println()>
    1bc2:	e77f      	b.n	1ac4 <menu2()+0x3c>
    1bc4:	210c      	movs	r1, #12
    1bc6:	4810      	ldr	r0, [pc, #64]	; (1c08 <menu2()+0x180>)
    1bc8:	f007 fc10 	bl	93ec <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1bcc:	4b0f      	ldr	r3, [pc, #60]	; (1c0c <menu2()+0x184>)
    1bce:	e7c5      	b.n	1b5c <menu2()+0xd4>
      rtc_get_datetime(&t);
    1bd0:	a806      	add	r0, sp, #24
    1bd2:	f7ff fe8d 	bl	18f0 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    1bd6:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    1bda:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1bde:	9000      	str	r0, [sp, #0]
    1be0:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    1be4:	490d      	ldr	r1, [pc, #52]	; (1c1c <menu2()+0x194>)
    1be6:	4802      	ldr	r0, [pc, #8]	; (1bf0 <menu2()+0x168>)
    1be8:	f005 fe8a 	bl	7900 <Print::printf(char const*, ...)>
    1bec:	e76a      	b.n	1ac4 <menu2()+0x3c>
    1bee:	bf00      	nop
    1bf0:	200085d4 	.word	0x200085d4
    1bf4:	20000480 	.word	0x20000480
    1bf8:	200004a4 	.word	0x200004a4
    1bfc:	20008bd4 	.word	0x20008bd4
    1c00:	200004b4 	.word	0x200004b4
    1c04:	20008b94 	.word	0x20008b94
    1c08:	200004c4 	.word	0x200004c4
    1c0c:	2001ec8c 	.word	0x2001ec8c
    1c10:	200004d4 	.word	0x200004d4
    1c14:	2001ec88 	.word	0x2001ec88
    1c18:	200004e4 	.word	0x200004e4
    1c1c:	20000500 	.word	0x20000500

00001c20 <menu3()>:

void menu3(void)
{   // have '!'
    1c20:	b510      	push	{r4, lr}
    1c22:	b084      	sub	sp, #16
        virtual int available() { return usb_serial_available(); }
    1c24:	f007 fb78 	bl	9318 <usb_serial_available>

    while(!Serial.available()) ;
    1c28:	2800      	cmp	r0, #0
    1c2a:	d0fb      	beq.n	1c24 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1c2c:	f007 fbb8 	bl	93a0 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1c30:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    1c32:	2864      	cmp	r0, #100	; 0x64
    1c34:	d00e      	beq.n	1c54 <menu3()+0x34>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    1c36:	3861      	subs	r0, #97	; 0x61
    1c38:	2813      	cmp	r0, #19
    1c3a:	d815      	bhi.n	1c68 <menu3()+0x48>
    1c3c:	e8df f000 	tbb	[pc, r0]
    1c40:	14281422 	.word	0x14281422
    1c44:	14142e14 	.word	0x14142e14
    1c48:	14141414 	.word	0x14141414
    1c4c:	14141414 	.word	0x14141414
    1c50:	16381414 	.word	0x16381414
      menuGet3Int(&year,&month,&day);
    1c54:	aa03      	add	r2, sp, #12
    1c56:	a902      	add	r1, sp, #8
    1c58:	a801      	add	r0, sp, #4
    1c5a:	f7ff fed9 	bl	1a10 <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetDate(year,month,day);
    1c5e:	9801      	ldr	r0, [sp, #4]
    1c60:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    1c64:	f7ff fe50 	bl	1908 <rtcSetDate(int, int, int)>
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
    }
}
    1c68:	b004      	add	sp, #16
    1c6a:	bd10      	pop	{r4, pc}
      menuGet3Int(&hour,&minutes,&seconds);
    1c6c:	aa03      	add	r2, sp, #12
    1c6e:	a902      	add	r1, sp, #8
    1c70:	a801      	add	r0, sp, #4
    1c72:	f7ff fecd 	bl	1a10 <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetTime(hour,minutes,seconds);
    1c76:	9801      	ldr	r0, [sp, #4]
    1c78:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    1c7c:	f7ff fe5c 	bl	1938 <rtcSetTime(int, int, int)>
}
    1c80:	b004      	add	sp, #16
    1c82:	bd10      	pop	{r4, pc}
      menuGetInt32((int32_t *)&t_acq);
    1c84:	4810      	ldr	r0, [pc, #64]	; (1cc8 <menu3()+0xa8>)
}
    1c86:	b004      	add	sp, #16
    1c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_acq);
    1c8c:	f7ff be6c 	b.w	1968 <menuGetInt32(long*) [clone .isra.0]>
      menuGetInt16(&proc);
    1c90:	480e      	ldr	r0, [pc, #56]	; (1ccc <menu3()+0xac>)
}
    1c92:	b004      	add	sp, #16
    1c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt16(&proc);
    1c98:	f7ff be90 	b.w	19bc <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt32(&fsamp);
    1c9c:	4c0c      	ldr	r4, [pc, #48]	; (1cd0 <menu3()+0xb0>)
    1c9e:	4620      	mov	r0, r4
    1ca0:	f7ff fe62 	bl	1968 <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    1ca4:	6820      	ldr	r0, [r4, #0]
}
    1ca6:	b004      	add	sp, #16
    1ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    1cac:	f7fe bd9e 	b.w	7ec <acqModifyFrequency(unsigned long)>
      menuGetInt16(&shift); if(shift<0) shift=0;
    1cb0:	4c08      	ldr	r4, [pc, #32]	; (1cd4 <menu3()+0xb4>)
    1cb2:	4620      	mov	r0, r4
    1cb4:	f7ff fe82 	bl	19bc <menuGetInt16(short*) [clone .isra.0]>
    1cb8:	f9b4 3000 	ldrsh.w	r3, [r4]
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	dad3      	bge.n	1c68 <menu3()+0x48>
    1cc0:	2300      	movs	r3, #0
    1cc2:	8023      	strh	r3, [r4, #0]
    1cc4:	e7d0      	b.n	1c68 <menu3()+0x48>
    1cc6:	bf00      	nop
    1cc8:	20008bd4 	.word	0x20008bd4
    1ccc:	2001ec88 	.word	0x2001ec88
    1cd0:	20008b94 	.word	0x20008b94
    1cd4:	2001ec8c 	.word	0x2001ec8c

00001cd8 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1cd8:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    1cda:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1cde:	b084      	sub	sp, #16
    1ce0:	468c      	mov	ip, r1
    1ce2:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    1ce4:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1ce6:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    1ce8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1cec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    1cf0:	ea4f 124c 	mov.w	r2, ip, lsl #5
    1cf4:	4629      	mov	r1, r5
    1cf6:	6a20      	ldr	r0, [r4, #32]
    1cf8:	f001 f952 	bl	2fa0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1cfc:	2801      	cmp	r0, #1
    1cfe:	d106      	bne.n	1d0e <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    1d00:	4632      	mov	r2, r6
    1d02:	4629      	mov	r1, r5
    1d04:	6a20      	ldr	r0, [r4, #32]
    1d06:	f001 f92f 	bl	2f68 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    1d0a:	b004      	add	sp, #16
    1d0c:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    1d0e:	2000      	movs	r0, #0
}
    1d10:	b004      	add	sp, #16
    1d12:	bd70      	pop	{r4, r5, r6, pc}

00001d14 <ExFatFile::close()>:
bool ExFatFile::close() {
    1d14:	b510      	push	{r4, lr}
    1d16:	4604      	mov	r4, r0
  bool rtn = sync();
    1d18:	f000 fd12 	bl	2740 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    1d1c:	2300      	movs	r3, #0
    1d1e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    1d22:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    1d26:	bd10      	pop	{r4, pc}

00001d28 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    1d28:	b538      	push	{r3, r4, r5, lr}
    1d2a:	460d      	mov	r5, r1
  if (isOpen()) {
    1d2c:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    1d30:	b109      	cbz	r1, 1d36 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    1d32:	2000      	movs	r0, #0
}
    1d34:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    1d36:	2238      	movs	r2, #56	; 0x38
    1d38:	4604      	mov	r4, r0
    1d3a:	f009 fe2b 	bl	b994 <memset>
  m_flags = FILE_FLAG_READ;
    1d3e:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    1d40:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    1d42:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    1d44:	4618      	mov	r0, r3
    1d46:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    1d4a:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    1d4e:	bd38      	pop	{r3, r4, r5, pc}

00001d50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    1d50:	b4f0      	push	{r4, r5, r6, r7}
    1d52:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    1d54:	7809      	ldrb	r1, [r1, #0]
    1d56:	2920      	cmp	r1, #32
    1d58:	d103      	bne.n	1d62 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    1d5a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1d5e:	2c20      	cmp	r4, #32
    1d60:	d0fb      	beq.n	1d5a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    1d62:	6015      	str	r5, [r2, #0]
  fname->end = path;
    1d64:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    1d66:	782c      	ldrb	r4, [r5, #0]
    1d68:	2c2f      	cmp	r4, #47	; 0x2f
    1d6a:	d011      	beq.n	1d90 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1d6c:	b184      	cbz	r4, 1d90 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1d6e:	1c6e      	adds	r6, r5, #1
    1d70:	2c3c      	cmp	r4, #60	; 0x3c
    1d72:	4f1e      	ldr	r7, [pc, #120]	; (1dec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>)
    uint8_t c = *path++;
    1d74:	4635      	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    1d76:	d82a      	bhi.n	1dce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    1d78:	2c21      	cmp	r4, #33	; 0x21
    1d7a:	d812      	bhi.n	1da2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    1d7c:	f104 3cff 	add.w	ip, r4, #4294967295
    1d80:	f1bc 0f1e 	cmp.w	ip, #30
    1d84:	d816      	bhi.n	1db4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

fail:
  return false;
}
    1d86:	2000      	movs	r0, #0
    1d88:	bcf0      	pop	{r4, r5, r6, r7}
    1d8a:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    1d8c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1d90:	2c20      	cmp	r4, #32
    1d92:	d0fb      	beq.n	1d8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    1d94:	2c2f      	cmp	r4, #47	; 0x2f
    1d96:	d0f9      	beq.n	1d8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    1d98:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    1d9a:	4611      	mov	r1, r2
}
    1d9c:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    1d9e:	f000 bfd5 	b.w	2d4c <ExFatFile::hashName(ExName_t*)>
    1da2:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    1da6:	fa5f fc8c 	uxtb.w	ip, ip
    1daa:	fa27 fc0c 	lsr.w	ip, r7, ip
    1dae:	f01c 0f01 	tst.w	ip, #1
    1db2:	d1e8      	bne.n	1d86 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    1db4:	2c2e      	cmp	r4, #46	; 0x2e
    1db6:	d001      	beq.n	1dbc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1db8:	2c20      	cmp	r4, #32
    1dba:	d10f      	bne.n	1ddc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
  while (*path && !isDirSeparator(*path)) {
    1dbc:	f816 4b01 	ldrb.w	r4, [r6], #1
    1dc0:	2c00      	cmp	r4, #0
    1dc2:	d0e5      	beq.n	1d90 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1dc4:	2c2f      	cmp	r4, #47	; 0x2f
    1dc6:	d0e3      	beq.n	1d90 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    1dc8:	2c3c      	cmp	r4, #60	; 0x3c
    1dca:	4635      	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    1dcc:	d9d4      	bls.n	1d78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    1dce:	2c5c      	cmp	r4, #92	; 0x5c
    1dd0:	d0d9      	beq.n	1d86 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1dd2:	d905      	bls.n	1de0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    1dd4:	2c7c      	cmp	r4, #124	; 0x7c
    1dd6:	d0d6      	beq.n	1d86 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1dd8:	0621      	lsls	r1, r4, #24
    1dda:	d4d4      	bmi.n	1d86 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    1ddc:	6096      	str	r6, [r2, #8]
    1dde:	e7ed      	b.n	1dbc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1de0:	3c3e      	subs	r4, #62	; 0x3e
    1de2:	2c01      	cmp	r4, #1
    1de4:	d8fa      	bhi.n	1ddc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
}
    1de6:	2000      	movs	r0, #0
    1de8:	bcf0      	pop	{r4, r5, r6, r7}
    1dea:	4770      	bx	lr
    1dec:	05002101 	.word	0x05002101

00001df0 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    1df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const { return m_attributes & FS_ATTRIB_READ_ONLY; }
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    1df4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    1df8:	b083      	sub	sp, #12
    1dfa:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    1dfc:	07dc      	lsls	r4, r3, #31
    1dfe:	d574      	bpl.n	1eea <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    1e00:	0658      	lsls	r0, r3, #25
    1e02:	460f      	mov	r7, r1
    1e04:	4690      	mov	r8, r2
    1e06:	f140 80b0 	bpl.w	1f6a <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    1e0a:	e9d5 2300 	ldrd	r2, r3, [r5]
    1e0e:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    1e12:	eb18 0402 	adds.w	r4, r8, r2
    1e16:	f143 0300 	adc.w	r3, r3, #0
    1e1a:	42a1      	cmp	r1, r4
    1e1c:	eb70 0303 	sbcs.w	r3, r0, r3
    1e20:	f0c0 80a9 	bcc.w	1f76 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    1e24:	f1b8 0f00 	cmp.w	r8, #0
    1e28:	d05b      	beq.n	1ee2 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    1e2a:	4646      	mov	r6, r8
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1e2c:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    1e30:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1e34:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1e38:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    1e3c:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    1e3e:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    1e42:	2c00      	cmp	r4, #0
    1e44:	d170      	bne.n	1f28 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    1e46:	4313      	orrs	r3, r2
    1e48:	d170      	bne.n	1f2c <ExFatFile::read(void*, unsigned int)+0x13c>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1e4a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1e4e:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    1e50:	bf4c      	ite	mi
    1e52:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    1e56:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    1e58:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1e5a:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    1e5e:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    1e60:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1e64:	0a63      	lsrs	r3, r4, #9
    1e66:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    1e68:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    1e6c:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    1e6e:	f1bb 0f00 	cmp.w	fp, #0
    1e72:	d145      	bne.n	1f00 <ExFatFile::read(void*, unsigned int)+0x110>
    1e74:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1e78:	d342      	bcc.n	1f00 <ExFatFile::read(void*, unsigned int)+0x110>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
    1e7a:	f8da 2218 	ldr.w	r2, [sl, #536]	; 0x218
    1e7e:	4291      	cmp	r1, r2
    1e80:	d03e      	beq.n	1f00 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    1e82:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    1e86:	d358      	bcc.n	1f3a <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    1e88:	f04f 0b01 	mov.w	fp, #1
    1e8c:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    1e90:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    1e94:	0a73      	lsrs	r3, r6, #9
    1e96:	459b      	cmp	fp, r3
    1e98:	bf28      	it	cs
    1e9a:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    1e9c:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1e9e:	ea4f 244b 	mov.w	r4, fp, lsl #9
    1ea2:	d80a      	bhi.n	1eba <ExFatFile::read(void*, unsigned int)+0xca>
    1ea4:	eb01 030b 	add.w	r3, r1, fp
    1ea8:	429a      	cmp	r2, r3
    1eaa:	d206      	bcs.n	1eba <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    1eac:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1eb0:	9101      	str	r1, [sp, #4]
    1eb2:	f005 f8e9 	bl	7088 <FsCache::sync()>
    1eb6:	9901      	ldr	r1, [sp, #4]
    1eb8:	b1b8      	cbz	r0, 1eea <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    1eba:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1ebe:	465b      	mov	r3, fp
    1ec0:	6802      	ldr	r2, [r0, #0]
    1ec2:	f8d2 a014 	ldr.w	sl, [r2, #20]
    1ec6:	463a      	mov	r2, r7
    1ec8:	47d0      	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    1eca:	b170      	cbz	r0, 1eea <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    1ecc:	4623      	mov	r3, r4
    dst += n;
    1ece:	4427      	add	r7, r4
    m_curPosition += n;
    1ed0:	e9d5 1200 	ldrd	r1, r2, [r5]
    1ed4:	185b      	adds	r3, r3, r1
    1ed6:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    1eda:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    1edc:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    1ee0:	d1a8      	bne.n	1e34 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    1ee2:	4640      	mov	r0, r8

fail:
  m_error |= READ_ERROR;
  return -1;
}
    1ee4:	b003      	add	sp, #12
    1ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    1eea:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    1eee:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    1ef2:	f043 0302 	orr.w	r3, r3, #2
    1ef6:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    1efa:	b003      	add	sp, #12
    1efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    1f00:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    1f04:	2200      	movs	r2, #0
    1f06:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1f0a:	42b4      	cmp	r4, r6
    1f0c:	bf28      	it	cs
    1f0e:	4634      	movcs	r4, r6
    1f10:	f005 f8e6 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    1f14:	2800      	cmp	r0, #0
    1f16:	d0e8      	beq.n	1eea <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    1f18:	eb00 010b 	add.w	r1, r0, fp
    1f1c:	4622      	mov	r2, r4
    1f1e:	4638      	mov	r0, r7
    1f20:	f006 f86c 	bl	7ffc <memcpy>
    m_curPosition += n;
    1f24:	4623      	mov	r3, r4
    1f26:	e7d2      	b.n	1ece <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    1f28:	69aa      	ldr	r2, [r5, #24]
    1f2a:	e796      	b.n	1e5a <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    1f2c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    1f30:	065b      	lsls	r3, r3, #25
    1f32:	d50e      	bpl.n	1f52 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    1f34:	69aa      	ldr	r2, [r5, #24]
    1f36:	3201      	adds	r2, #1
    1f38:	e78e      	b.n	1e58 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    1f3a:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1f3e:	463a      	mov	r2, r7
    1f40:	6803      	ldr	r3, [r0, #0]
    1f42:	691b      	ldr	r3, [r3, #16]
    1f44:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    1f46:	2800      	cmp	r0, #0
    1f48:	d0cf      	beq.n	1eea <ExFatFile::read(void*, unsigned int)+0xfa>
    1f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    1f4e:	461c      	mov	r4, r3
    1f50:	e7bd      	b.n	1ece <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1f52:	464a      	mov	r2, r9
    1f54:	4650      	mov	r0, sl
    1f56:	69a9      	ldr	r1, [r5, #24]
    1f58:	f001 f864 	bl	3024 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    1f5c:	2800      	cmp	r0, #0
    1f5e:	dbc4      	blt.n	1eea <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    1f60:	d00c      	beq.n	1f7c <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    1f62:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1f66:	69aa      	ldr	r2, [r5, #24]
    1f68:	e777      	b.n	1e5a <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    1f6a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1f6e:	0719      	lsls	r1, r3, #28
    1f70:	f57f af58 	bpl.w	1e24 <ExFatFile::read(void*, unsigned int)+0x34>
    1f74:	e749      	b.n	1e0a <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    1f76:	eba1 0802 	sub.w	r8, r1, r2
    1f7a:	e753      	b.n	1e24 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    1f7c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1f80:	f013 0f50 	tst.w	r3, #80	; 0x50
    1f84:	d0b1      	beq.n	1eea <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    1f86:	eba8 0806 	sub.w	r8, r8, r6
    1f8a:	4640      	mov	r0, r8
    1f8c:	e7aa      	b.n	1ee4 <ExFatFile::read(void*, unsigned int)+0xf4>
    1f8e:	bf00      	nop

00001f90 <ExFatFile::peek()>:
int ExFatFile::peek() {
    1f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f92:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    1f94:	2201      	movs	r2, #1
    1f96:	4604      	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    1f98:	6985      	ldr	r5, [r0, #24]
    1f9a:	f10d 0107 	add.w	r1, sp, #7
  uint64_t saveCurPosition = m_curPosition;
    1f9e:	e9d0 6700 	ldrd	r6, r7, [r0]
    1fa2:	f7ff ff25 	bl	1df0 <ExFatFile::read(void*, unsigned int)>
    1fa6:	2801      	cmp	r0, #1
  m_curCluster = saveCurCluster;
    1fa8:	61a5      	str	r5, [r4, #24]
    1faa:	bf0c      	ite	eq
    1fac:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    1fb0:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = saveCurPosition;
    1fb4:	e9c4 6700 	strd	r6, r7, [r4]
}
    1fb8:	b003      	add	sp, #12
    1fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001fbc <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    1fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fc0:	461f      	mov	r7, r3
  bool isOpen() const { return m_attributes; }
    1fc2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    1fc6:	b083      	sub	sp, #12
    1fc8:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    1fca:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d051      	beq.n	2076 <ExFatFile::seekSet(unsigned long long)+0xba>
    1fd2:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    1fd4:	e9d0 1c00 	ldrd	r1, ip, [r0]
    1fd8:	45bc      	cmp	ip, r7
    1fda:	bf08      	it	eq
    1fdc:	4291      	cmpeq	r1, r2
    1fde:	d05c      	beq.n	209a <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    1fe0:	ea56 0207 	orrs.w	r2, r6, r7
    1fe4:	d04d      	beq.n	2082 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    1fe6:	071d      	lsls	r5, r3, #28
    1fe8:	d504      	bpl.n	1ff4 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    1fea:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    1fee:	42b0      	cmp	r0, r6
    1ff0:	41ba      	sbcs	r2, r7
    1ff2:	d340      	bcc.n	2076 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    1ff4:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1ff8:	1e75      	subs	r5, r6, #1
    1ffa:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    1ffe:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    2000:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2004:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    2008:	3209      	adds	r2, #9
    200a:	b2d2      	uxtb	r2, r2
    200c:	f1c2 0e20 	rsb	lr, r2, #32
    2010:	40d5      	lsrs	r5, r2
    2012:	f1a2 0920 	sub.w	r9, r2, #32
    2016:	fa00 fb0e 	lsl.w	fp, r0, lr
    201a:	fa20 f009 	lsr.w	r0, r0, r9
    201e:	ea45 050b 	orr.w	r5, r5, fp
    2022:	4305      	orrs	r5, r0
  if (isContiguous()) {
    2024:	9801      	ldr	r0, [sp, #4]
    2026:	0640      	lsls	r0, r0, #25
    2028:	d433      	bmi.n	2092 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    202a:	1e48      	subs	r0, r1, #1
    202c:	fa20 f202 	lsr.w	r2, r0, r2
    2030:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    2034:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    2038:	fa00 fe0e 	lsl.w	lr, r0, lr
    203c:	fa20 f009 	lsr.w	r0, r0, r9
    2040:	ea42 020e 	orr.w	r2, r2, lr
    2044:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    2048:	d001      	beq.n	204e <ExFatFile::seekSet(unsigned long long)+0x92>
    204a:	4295      	cmp	r5, r2
    204c:	d229      	bcs.n	20a2 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    204e:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    2050:	bf4c      	ite	mi
    2052:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    2056:	69e3      	ldrpl	r3, [r4, #28]
    2058:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    205a:	f104 0918 	add.w	r9, r4, #24
    205e:	e006      	b.n	206e <ExFatFile::seekSet(unsigned long long)+0xb2>
    2060:	69a1      	ldr	r1, [r4, #24]
    2062:	3d01      	subs	r5, #1
    2064:	6a20      	ldr	r0, [r4, #32]
    2066:	f000 ffdd 	bl	3024 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    206a:	2800      	cmp	r0, #0
    206c:	dd03      	ble.n	2076 <ExFatFile::seekSet(unsigned long long)+0xba>
    206e:	464a      	mov	r2, r9
  while (nNew--) {
    2070:	2d00      	cmp	r5, #0
    2072:	d1f5      	bne.n	2060 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

done:
    2074:	e007      	b.n	2086 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    2076:	2000      	movs	r0, #0
  m_curCluster = tmp;
    2078:	f8c4 8018 	str.w	r8, [r4, #24]
}
    207c:	b003      	add	sp, #12
    207e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    2082:	2300      	movs	r3, #0
    2084:	6183      	str	r3, [r0, #24]
  return true;
    2086:	2001      	movs	r0, #1
  m_curPosition = pos;
    2088:	e9c4 6700 	strd	r6, r7, [r4]
}
    208c:	b003      	add	sp, #12
    208e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    2092:	69e3      	ldr	r3, [r4, #28]
    2094:	442b      	add	r3, r5
    2096:	61a3      	str	r3, [r4, #24]
    goto done;
    2098:	e7f5      	b.n	2086 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    209a:	2001      	movs	r0, #1
}
    209c:	b003      	add	sp, #12
    209e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    20a2:	1aad      	subs	r5, r5, r2
    20a4:	e7d9      	b.n	205a <ExFatFile::seekSet(unsigned long long)+0x9e>
    20a6:	bf00      	nop

000020a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    20a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20ac:	4690      	mov	r8, r2
    20ae:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    20b2:	b08f      	sub	sp, #60	; 0x3c
    20b4:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    20b6:	2a00      	cmp	r2, #0
    20b8:	f040 80d6 	bne.w	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
    20bc:	468b      	mov	fp, r1
    20be:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    20c2:	f011 0f50 	tst.w	r1, #80	; 0x50
    20c6:	f000 80cf 	beq.w	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  switch (oflag & O_ACCMODE) {
    20ca:	f003 0103 	and.w	r1, r3, #3
    20ce:	469a      	mov	sl, r3
    20d0:	2903      	cmp	r1, #3
    20d2:	f000 80c9 	beq.w	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    20d6:	3101      	adds	r1, #1
    20d8:	f003 0008 	and.w	r0, r3, #8
    20dc:	ea41 0300 	orr.w	r3, r1, r0
    20e0:	9302      	str	r3, [sp, #8]
  if (fname) {
    20e2:	f1b8 0f00 	cmp.w	r8, #0
    20e6:	f000 80c9 	beq.w	227c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d4>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    20ea:	f8d8 100c 	ldr.w	r1, [r8, #12]
    20ee:	f101 070e 	add.w	r7, r1, #14
    20f2:	49bd      	ldr	r1, [pc, #756]	; (23e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x340>)
    20f4:	fba1 1707 	umull	r1, r7, r1, r7
  if (pos == m_curPosition) {
    20f8:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    20fc:	08ff      	lsrs	r7, r7, #3
  if (pos == m_curPosition) {
    20fe:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    2100:	f107 0702 	add.w	r7, r7, #2
    2104:	b2ff      	uxtb	r7, r7
  if (pos == m_curPosition) {
    2106:	d005      	beq.n	2114 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    2108:	2000      	movs	r0, #0
    210a:	2100      	movs	r1, #0
    m_curCluster = 0;
    210c:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    2110:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    2114:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2116:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    2118:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    211a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    211e:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    2120:	2220      	movs	r2, #32
    2122:	a906      	add	r1, sp, #24
    2124:	4658      	mov	r0, fp
    2126:	f7ff fe63 	bl	1df0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    212a:	b300      	cbz	r0, 216e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    212c:	2820      	cmp	r0, #32
    212e:	f040 809b 	bne.w	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    2132:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    2136:	f89d 3018 	ldrb.w	r3, [sp, #24]
    213a:	2a00      	cmp	r2, #0
    213c:	f2c0 80a0 	blt.w	2280 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
      if (freeCount == 0) {
    2140:	b934      	cbnz	r4, 2150 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    2142:	f8db 2000 	ldr.w	r2, [fp]
    2146:	f1a2 0920 	sub.w	r9, r2, #32
  uint32_t curCluster() const { return m_curCluster; }
    214a:	f8db 2018 	ldr.w	r2, [fp, #24]
    214e:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    2150:	42bc      	cmp	r4, r7
    2152:	d201      	bcs.n	2158 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    2154:	3401      	adds	r4, #1
    2156:	b2e4      	uxtb	r4, r4
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    2158:	2b00      	cmp	r3, #0
    215a:	f000 80f9 	beq.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a8>
    n = dir->read(buf, FS_DIR_SIZE);
    215e:	2220      	movs	r2, #32
    2160:	a906      	add	r1, sp, #24
    2162:	4658      	mov	r0, fp
      inSet = false;
    2164:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    2166:	f7ff fe43 	bl	1df0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    216a:	2800      	cmp	r0, #0
    216c:	d1de      	bne.n	212c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    216e:	f41a 7f00 	tst.w	sl, #512	; 0x200
    2172:	d079      	beq.n	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    2174:	9b02      	ldr	r3, [sp, #8]
    2176:	079b      	lsls	r3, r3, #30
    2178:	d576      	bpl.n	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    217a:	f1b8 0f00 	cmp.w	r8, #0
    217e:	d073      	beq.n	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  while (freeCount < freeNeed) {
    2180:	42bc      	cmp	r4, r7
    2182:	d217      	bcs.n	21b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
    2184:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    2188:	2220      	movs	r2, #32
    218a:	a906      	add	r1, sp, #24
    218c:	4658      	mov	r0, fp
    218e:	f7ff fe2f 	bl	1df0 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    2192:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    2194:	2800      	cmp	r0, #0
    2196:	d060      	beq.n	225a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    2198:	2820      	cmp	r0, #32
    219a:	d165      	bne.n	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (freeCount == 0) {
    219c:	b92c      	cbnz	r4, 21aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    219e:	f8db 2000 	ldr.w	r2, [fp]
    21a2:	f8db a018 	ldr.w	sl, [fp, #24]
    21a6:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    21aa:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    21ac:	42a7      	cmp	r7, r4
    21ae:	d8eb      	bhi.n	2188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe0>
    21b0:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    21b4:	2238      	movs	r2, #56	; 0x38
    21b6:	2100      	movs	r1, #0
    21b8:	4628      	mov	r0, r5
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    21ba:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    21be:	f009 fbe9 	bl	b994 <memset>
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
    21c2:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    21c6:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    21ca:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    21cc:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    21ce:	2328      	movs	r3, #40	; 0x28
  m_dirPos = freePos;
    21d0:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    21d4:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    21d8:	f8d8 3000 	ldr.w	r3, [r8]
  m_dirPos = freePos;
    21dc:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    21e0:	f8c8 3004 	str.w	r3, [r8, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    21e4:	b3a7      	cbz	r7, 2250 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
    21e6:	2400      	movs	r4, #0
      m_setCount = freeNeed - 1;
    21e8:	1e7e      	subs	r6, r7, #1
      if (FsDateTime::callback) {
    21ea:	f8df 9200 	ldr.w	r9, [pc, #512]	; 23ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
      m_setCount = freeNeed - 1;
    21ee:	b2f6      	uxtb	r6, r6
      if (FsDateTime::callback) {
    21f0:	46a2      	mov	sl, r4
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    21f2:	2201      	movs	r2, #1
    21f4:	4651      	mov	r1, sl
    21f6:	4628      	mov	r0, r5
    21f8:	f7ff fd6e 	bl	1cd8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    21fc:	4683      	mov	fp, r0
    21fe:	b398      	cbz	r0, 2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    2200:	f990 2000 	ldrsb.w	r2, [r0]
    2204:	2a00      	cmp	r2, #0
    2206:	db2f      	blt.n	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    memset(cache, 0, FS_DIR_SIZE);
    2208:	2220      	movs	r2, #32
    220a:	2100      	movs	r1, #0
    220c:	f009 fbc2 	bl	b994 <memset>
    if (i == 0) {
    2210:	2c00      	cmp	r4, #0
    2212:	f000 80cb 	beq.w	23ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x304>
    } else if (i == 1) {
    2216:	f1ba 0f01 	cmp.w	sl, #1
    221a:	f000 80e9 	beq.w	23f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x348>
      dirName->type = EXFAT_TYPE_NAME;
    221e:	23c1      	movs	r3, #193	; 0xc1
    2220:	465a      	mov	r2, fp
    2222:	f10b 0b20 	add.w	fp, fp, #32
    2226:	f802 3b02 	strb.w	r3, [r2], #2
  bool atEnd() { return next == end; }
    222a:	e9d8 3001 	ldrd	r3, r0, [r8, #4]
        if (fname->atEnd()) {
    222e:	4298      	cmp	r0, r3
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    2230:	f103 0301 	add.w	r3, r3, #1
    2234:	d007      	beq.n	2246 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    2236:	f8c8 3004 	str.w	r3, [r8, #4]
    223a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    223e:	f822 1b02 	strh.w	r1, [r2], #2
      for (size_t k = 0; k < 15; k++) {
    2242:	4593      	cmp	fp, r2
    2244:	d1f3      	bne.n	222e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x186>
  for (uint8_t i = 0; i < freeNeed; i++) {
    2246:	3401      	adds	r4, #1
    2248:	fa5f fa84 	uxtb.w	sl, r4
    224c:	4557      	cmp	r7, sl
    224e:	d8d0      	bhi.n	21f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14a>
  return sync();
    2250:	4628      	mov	r0, r5
    2252:	f000 fa75 	bl	2740 <ExFatFile::sync()>
    2256:	4606      	mov	r6, r0
    2258:	e00c      	b.n	2274 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      if (!dir->addDirCluster()) {
    225a:	4658      	mov	r0, fp
      uint32_t saveCurCluster = dir->m_curCluster;
    225c:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    2260:	f000 fa9e 	bl	27a0 <ExFatFile::addDirCluster()>
    2264:	2800      	cmp	r0, #0
    2266:	d178      	bne.n	235a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b2>
  m_attributes = FILE_ATTR_CLOSED;
    2268:	2300      	movs	r3, #0
  return false;
    226a:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    226c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    2270:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    2274:	4630      	mov	r0, r6
    2276:	b00f      	add	sp, #60	; 0x3c
    2278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    227c:	2703      	movs	r7, #3
    227e:	e749      	b.n	2114 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    2280:	bb56      	cbnz	r6, 22d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x230>
        freeCount = 0;
    2282:	42bc      	cmp	r4, r7
    2284:	bf38      	it	cc
    2286:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    2288:	2b85      	cmp	r3, #133	; 0x85
    228a:	f47f af49 	bne.w	2120 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    228e:	4631      	mov	r1, r6
    2290:	2238      	movs	r2, #56	; 0x38
    2292:	4628      	mov	r0, r5
      inSet = true;
    2294:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    2296:	f009 fb7d 	bl	b994 <memset>
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    229a:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    229e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    22a2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    22a6:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    22aa:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    22ac:	bf58      	it	pl
    22ae:	f043 0308 	orrpl.w	r3, r3, #8
    22b2:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    22b6:	f8db 3000 	ldr.w	r3, [fp]
    22ba:	f8db 2020 	ldr.w	r2, [fp, #32]
    22be:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    22c0:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    22c2:	f8db 2018 	ldr.w	r2, [fp, #24]
    22c6:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    22ca:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    22ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    22d2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    22d6:	e723      	b.n	2120 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    22d8:	2bc0      	cmp	r3, #192	; 0xc0
    22da:	d00e      	beq.n	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x252>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    22dc:	2bc1      	cmp	r3, #193	; 0xc1
    22de:	f47f af3e 	bne.w	215e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    22e2:	4642      	mov	r2, r8
    22e4:	a906      	add	r1, sp, #24
    22e6:	4628      	mov	r0, r5
    22e8:	f000 fcfe 	bl	2ce8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    22ec:	b118      	cbz	r0, 22f6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
      if (fname->atEnd()) {
    22ee:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
    22f2:	429a      	cmp	r2, r3
    22f4:	d034      	beq.n	2360 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
        inSet = false;
    22f6:	4606      	mov	r6, r0
    22f8:	e712      	b.n	2120 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    22fa:	9b02      	ldr	r3, [sp, #8]
    22fc:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    2300:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2304:	079b      	lsls	r3, r3, #30
    2306:	d502      	bpl.n	230e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x266>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2308:	9b03      	ldr	r3, [sp, #12]
    230a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    230e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2310:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    2312:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    2316:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    231a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    231e:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    2322:	f1b8 0f00 	cmp.w	r8, #0
    2326:	d01b      	beq.n	2360 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
  void reset() { next = begin; }
    2328:	f8d8 3000 	ldr.w	r3, [r8]
      if (fname->nameLength != dirStream->nameLength ||
    232c:	f8d8 200c 	ldr.w	r2, [r8, #12]
    2330:	f8c8 3004 	str.w	r3, [r8, #4]
    2334:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2338:	429a      	cmp	r2, r3
    233a:	f47f af10 	bne.w	215e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    233e:	f8b8 6010 	ldrh.w	r6, [r8, #16]
    2342:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    2346:	1af6      	subs	r6, r6, r3
    2348:	fab6 f686 	clz	r6, r6
    234c:	0976      	lsrs	r6, r6, #5
    234e:	e6e7      	b.n	2120 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    2350:	f1b8 0f00 	cmp.w	r8, #0
    2354:	f47f af0b 	bne.w	216e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    2358:	e786      	b.n	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
      dir->m_curCluster = saveCurCluster;
    235a:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    235e:	e725      	b.n	21ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x104>
  if (oflag & O_EXCL) {
    2360:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    2364:	d180      	bne.n	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    2366:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    236a:	d15d      	bne.n	2428 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
    236c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2370:	079f      	lsls	r7, r3, #30
    2372:	d459      	bmi.n	2428 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
  if (oflag & O_TRUNC) {
    2374:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    2378:	f47f af76 	bne.w	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    237c:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    2380:	f43f af78 	beq.w	2274 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    2384:	4628      	mov	r0, r5
    2386:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    238a:	f7ff fe17 	bl	1fbc <ExFatFile::seekSet(unsigned long long)>
    238e:	2800      	cmp	r0, #0
    2390:	f43f af6a 	beq.w	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (isWritable()) {
    2394:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2398:	079a      	lsls	r2, r3, #30
    239a:	f57f af6b 	bpl.w	2274 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    239e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    23a2:	f043 0320 	orr.w	r3, r3, #32
    23a6:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    23aa:	e763      	b.n	2274 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      dirFile->type = EXFAT_TYPE_FILE;
    23ac:	2385      	movs	r3, #133	; 0x85
    23ae:	f88b 3000 	strb.w	r3, [fp]
      m_setCount = freeNeed - 1;
    23b2:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    23b6:	f88b 6001 	strb.w	r6, [fp, #1]
      if (FsDateTime::callback) {
    23ba:	f8d9 3000 	ldr.w	r3, [r9]
    23be:	b353      	cbz	r3, 2416 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x36e>
        FsDateTime::callback(&date, &time, &ms10);
    23c0:	f10d 0213 	add.w	r2, sp, #19
    23c4:	f10d 0116 	add.w	r1, sp, #22
    23c8:	a805      	add	r0, sp, #20
    23ca:	4798      	blx	r3
    23cc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    23d0:	f8ab 300a 	strh.w	r3, [fp, #10]
    23d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    23d8:	f8ab 3008 	strh.w	r3, [fp, #8]
        dirFile->createTimeMs = ms10;
    23dc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    23e0:	f88b 3014 	strb.w	r3, [fp, #20]
    23e4:	e72f      	b.n	2246 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    23e6:	bf00      	nop
    23e8:	88888889 	.word	0x88888889
    23ec:	2001e06c 	.word	0x2001e06c
      dirStream->type = EXFAT_TYPE_STREAM;
    23f0:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    23f2:	f88b a001 	strb.w	sl, [fp, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    23f6:	f88b 3000 	strb.w	r3, [fp]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    23fa:	9b02      	ldr	r3, [sp, #8]
    23fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2400:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    2404:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2408:	f88b 3003 	strb.w	r3, [fp, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    240c:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    2410:	f8ab 3004 	strh.w	r3, [fp, #4]
}
    2414:	e717      	b.n	2246 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    2416:	f245 6321 	movw	r3, #22049	; 0x5621
    241a:	f8ab 300a 	strh.w	r3, [fp, #10]
    241e:	f8ab 300e 	strh.w	r3, [fp, #14]
    2422:	f8ab 3012 	strh.w	r3, [fp, #18]
        if (FS_DEFAULT_TIME) {
    2426:	e70e      	b.n	2246 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    2428:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    242c:	06dc      	lsls	r4, r3, #27
    242e:	f53f af1b 	bmi.w	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    2432:	07d8      	lsls	r0, r3, #31
    2434:	f53f af18 	bmi.w	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (oflag & O_TRUNC) {
    2438:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    243c:	d013      	beq.n	2466 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3be>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    243e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2442:	0799      	lsls	r1, r3, #30
    2444:	f57f af10 	bpl.w	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    2448:	2200      	movs	r2, #0
    244a:	2300      	movs	r3, #0
    244c:	4628      	mov	r0, r5
    244e:	f7ff fdb5 	bl	1fbc <ExFatFile::seekSet(unsigned long long)>
    2452:	2800      	cmp	r0, #0
    2454:	f43f af08 	beq.w	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    2458:	4628      	mov	r0, r5
    245a:	f000 fa93 	bl	2984 <ExFatFile::truncate()>
    245e:	2800      	cmp	r0, #0
    2460:	f43f af02 	beq.w	2268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    2464:	e796      	b.n	2394 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    2466:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    246a:	d093      	beq.n	2394 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
    246c:	e78a      	b.n	2384 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    246e:	bf00      	nop

00002470 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    2470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    2474:	2500      	movs	r5, #0
    2476:	b097      	sub	sp, #92	; 0x5c
    2478:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    247a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    247e:	9201      	str	r2, [sp, #4]
    2480:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
    2482:	2b00      	cmp	r3, #0
    2484:	d13e      	bne.n	2504 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    2486:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    248a:	460f      	mov	r7, r1
    248c:	f013 0f50 	tst.w	r3, #80	; 0x50
    2490:	d038      	beq.n	2504 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
  if (isDirSeparator(*path)) {
    2492:	7813      	ldrb	r3, [r2, #0]
    2494:	4604      	mov	r4, r0
    2496:	4616      	mov	r6, r2
    2498:	2b2f      	cmp	r3, #47	; 0x2f
    249a:	d037      	beq.n	250c <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    249c:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    24a0:	ab01      	add	r3, sp, #4
    24a2:	aa03      	add	r2, sp, #12
    24a4:	4631      	mov	r1, r6
    24a6:	4620      	mov	r0, r4
    24a8:	f7ff fc52 	bl	1d50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    24ac:	b350      	cbz	r0, 2504 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    if (*path == 0) {
    24ae:	9e01      	ldr	r6, [sp, #4]
    24b0:	7833      	ldrb	r3, [r6, #0]
    24b2:	2b00      	cmp	r3, #0
    24b4:	d03e      	beq.n	2534 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    24b6:	2300      	movs	r3, #0
    24b8:	aa03      	add	r2, sp, #12
    24ba:	4639      	mov	r1, r7
    24bc:	4620      	mov	r0, r4
    24be:	f7ff fdf3 	bl	20a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    24c2:	b1f8      	cbz	r0, 2504 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    tmpDir = *this;
    24c4:	46a4      	mov	ip, r4
    24c6:	ad08      	add	r5, sp, #32
    24c8:	f104 0730 	add.w	r7, r4, #48	; 0x30
    24cc:	f8dc 0000 	ldr.w	r0, [ip]
    24d0:	f10c 0c10 	add.w	ip, ip, #16
    24d4:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    24d8:	46ae      	mov	lr, r5
    24da:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    24de:	3510      	adds	r5, #16
    24e0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    24e4:	45bc      	cmp	ip, r7
    24e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    24ea:	d1ef      	bne.n	24cc <ExFatFile::open(ExFatFile*, char const*, int)+0x5c>
    24ec:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    24f0:	af08      	add	r7, sp, #32
    tmpDir = *this;
    24f2:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    24f4:	4620      	mov	r0, r4
    24f6:	f000 f923 	bl	2740 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    24fa:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    24fe:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    2502:	e7cd      	b.n	24a0 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  return false;
    2504:	2000      	movs	r0, #0
}
    2506:	b017      	add	sp, #92	; 0x5c
    2508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    250c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2510:	292f      	cmp	r1, #47	; 0x2f
    2512:	d0fb      	beq.n	250c <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    2514:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    2516:	b9b1      	cbnz	r1, 2546 <ExFatFile::open(ExFatFile*, char const*, int)+0xd6>
  memset(this, 0, sizeof(ExFatFile));
    2518:	2238      	movs	r2, #56	; 0x38
    251a:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    251c:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    251e:	f009 fa39 	bl	b994 <memset>
  m_flags = FILE_FLAG_READ;
    2522:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    2524:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    2526:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    2528:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    252a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    252e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    2532:	e7e8      	b.n	2506 <ExFatFile::open(ExFatFile*, char const*, int)+0x96>
  return openPrivate(dirFile, &fname, oflag);
    2534:	464b      	mov	r3, r9
    2536:	aa03      	add	r2, sp, #12
    2538:	4639      	mov	r1, r7
    253a:	4620      	mov	r0, r4
    253c:	f7ff fdb4 	bl	20a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    2540:	b017      	add	sp, #92	; 0x5c
    2542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    2546:	2238      	movs	r2, #56	; 0x38
    2548:	2100      	movs	r1, #0
    254a:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    254c:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    254e:	f009 fa21 	bl	b994 <memset>
  m_flags = FILE_FLAG_READ;
    2552:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    2554:	af08      	add	r7, sp, #32
  m_vol = vol;
    2556:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    2558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    255c:	2340      	movs	r3, #64	; 0x40
    255e:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    2562:	e79b      	b.n	249c <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>

00002564 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    2564:	b119      	cbz	r1, 256e <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    2566:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    256a:	f7ff bf81 	b.w	2470 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    256e:	4608      	mov	r0, r1
    2570:	4770      	bx	lr
    2572:	bf00      	nop

00002574 <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2574:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    2576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2578:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    257a:	6a00      	ldr	r0, [r0, #32]
    257c:	b101      	cbz	r1, 2580 <ExFatFile::addCluster()+0xc>
    257e:	3101      	adds	r1, #1
    2580:	2201      	movs	r2, #1
    2582:	f000 fc15 	bl	2db0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    2586:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2588:	4605      	mov	r5, r0
  if (find < 2) {
    258a:	d932      	bls.n	25f2 <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    258c:	2301      	movs	r3, #1
    258e:	4601      	mov	r1, r0
    2590:	6a20      	ldr	r0, [r4, #32]
    2592:	461a      	mov	r2, r3
    2594:	f000 fc6c 	bl	2e70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2598:	4606      	mov	r6, r0
    259a:	b350      	cbz	r0, 25f2 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    259c:	69a3      	ldr	r3, [r4, #24]
    259e:	b35b      	cbz	r3, 25f8 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    25a0:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    25a4:	0651      	lsls	r1, r2, #25
    25a6:	d512      	bpl.n	25ce <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    25a8:	1c59      	adds	r1, r3, #1
    25aa:	42a9      	cmp	r1, r5
    25ac:	d018      	beq.n	25e0 <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    25ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    25b2:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    25b4:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    25b8:	e005      	b.n	25c6 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    25ba:	6a20      	ldr	r0, [r4, #32]
    25bc:	f000 fd54 	bl	3068 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    25c0:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    25c2:	b1b0      	cbz	r0, 25f2 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    25c4:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    25c6:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    25c8:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    25ca:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    25cc:	d3f5      	bcc.n	25ba <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    25ce:	f04f 32ff 	mov.w	r2, #4294967295
    25d2:	4629      	mov	r1, r5
    25d4:	6a20      	ldr	r0, [r4, #32]
    25d6:	f000 fd47 	bl	3068 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    25da:	b150      	cbz	r0, 25f2 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    25dc:	69a1      	ldr	r1, [r4, #24]
    25de:	b911      	cbnz	r1, 25e6 <ExFatFile::addCluster()+0x72>
}
    25e0:	4630      	mov	r0, r6
  m_curCluster = find;
    25e2:	61a5      	str	r5, [r4, #24]
}
    25e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    25e6:	462a      	mov	r2, r5
    25e8:	6a20      	ldr	r0, [r4, #32]
    25ea:	f000 fd3d 	bl	3068 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    25ee:	2800      	cmp	r0, #0
    25f0:	d1f6      	bne.n	25e0 <ExFatFile::addCluster()+0x6c>
  return false;
    25f2:	2600      	movs	r6, #0
}
    25f4:	4630      	mov	r0, r6
    25f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    25f8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    25fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2600:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    2604:	e7ec      	b.n	25e0 <ExFatFile::addCluster()+0x6c>
    2606:	bf00      	nop

00002608 <ExFatFile::syncDir()>:
bool ExFatFile::syncDir() {
    2608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    260c:	f04f 0800 	mov.w	r8, #0
    2610:	b082      	sub	sp, #8
        if (FsDateTime::callback) {
    2612:	4f4a      	ldr	r7, [pc, #296]	; (273c <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    2614:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    2616:	4644      	mov	r4, r8
    2618:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    261a:	2200      	movs	r2, #0
    261c:	4630      	mov	r0, r6
    261e:	f7ff fb5b 	bl	1cd8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    2622:	4605      	mov	r5, r0
    2624:	b130      	cbz	r0, 2634 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    2626:	7801      	ldrb	r1, [r0, #0]
    2628:	29c0      	cmp	r1, #192	; 0xc0
    262a:	d069      	beq.n	2700 <ExFatFile::syncDir()+0xf8>
    262c:	29c1      	cmp	r1, #193	; 0xc1
    262e:	d02b      	beq.n	2688 <ExFatFile::syncDir()+0x80>
    2630:	2985      	cmp	r1, #133	; 0x85
    2632:	d009      	beq.n	2648 <ExFatFile::syncDir()+0x40>
  m_error |= WRITE_ERROR;
    2634:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    2638:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    263a:	f043 0301 	orr.w	r3, r3, #1
    263e:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    2642:	b002      	add	sp, #8
    2644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    2648:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    264c:	f003 0337 	and.w	r3, r3, #55	; 0x37
    2650:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    2652:	683b      	ldr	r3, [r7, #0]
    2654:	b183      	cbz	r3, 2678 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    2656:	f10d 0203 	add.w	r2, sp, #3
    265a:	f10d 0106 	add.w	r1, sp, #6
    265e:	a801      	add	r0, sp, #4
    2660:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    2662:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    2666:	81ab      	strh	r3, [r5, #12]
    2668:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    266a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    266e:	81eb      	strh	r3, [r5, #14]
    2670:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    2672:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2676:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    2678:	6a32      	ldr	r2, [r6, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    267a:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    267e:	f043 0301 	orr.w	r3, r3, #1
    2682:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2686:	7829      	ldrb	r1, [r5, #0]
    2688:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    268c:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    268e:	fab0 f080 	clz	r0, r0
    2692:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2694:	e001      	b.n	269a <ExFatFile::syncDir()+0x92>
    2696:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2698:	5ca9      	ldrb	r1, [r5, r2]
    269a:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    269c:	2a01      	cmp	r2, #1
    269e:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    26a2:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    26a6:	fa11 f383 	uxtah	r3, r1, r3
    26aa:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    26ac:	d101      	bne.n	26b2 <ExFatFile::syncDir()+0xaa>
    26ae:	2800      	cmp	r0, #0
    26b0:	d1f1      	bne.n	2696 <ExFatFile::syncDir()+0x8e>
    26b2:	2a1f      	cmp	r2, #31
    26b4:	d9f0      	bls.n	2698 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    26b6:	f108 0801 	add.w	r8, r8, #1
    26ba:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    26be:	fa5f f188 	uxtb.w	r1, r8
    26c2:	428b      	cmp	r3, r1
    26c4:	d2a9      	bcs.n	261a <ExFatFile::syncDir()+0x12>
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    26c6:	2201      	movs	r2, #1
    26c8:	f106 0124 	add.w	r1, r6, #36	; 0x24
    26cc:	6a30      	ldr	r0, [r6, #32]
    26ce:	f000 fc4b 	bl	2f68 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    26d2:	2800      	cmp	r0, #0
    26d4:	d0ae      	beq.n	2634 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    26d6:	6a35      	ldr	r5, [r6, #32]
    26d8:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    26da:	4628      	mov	r0, r5
    26dc:	f004 fcd4 	bl	7088 <FsCache::sync()>
    26e0:	2800      	cmp	r0, #0
    26e2:	d0a7      	beq.n	2634 <ExFatFile::syncDir()+0x2c>
    26e4:	f505 7004 	add.w	r0, r5, #528	; 0x210
    26e8:	f004 fcce 	bl	7088 <FsCache::sync()>
    26ec:	2800      	cmp	r0, #0
    26ee:	d0a1      	beq.n	2634 <ExFatFile::syncDir()+0x2c>
    26f0:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    26f4:	6803      	ldr	r3, [r0, #0]
    26f6:	69db      	ldr	r3, [r3, #28]
    26f8:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    26fa:	2800      	cmp	r0, #0
    26fc:	d1a1      	bne.n	2642 <ExFatFile::syncDir()+0x3a>
    26fe:	e799      	b.n	2634 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    2700:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    2704:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    2708:	7843      	ldrb	r3, [r0, #1]
    270a:	bf14      	ite	ne
    270c:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    2710:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    2714:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    2716:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    271a:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    271e:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    2722:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    2726:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    2728:	e9c5 0106 	strd	r0, r1, [r5, #24]
    272c:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    2730:	f043 0301 	orr.w	r3, r3, #1
    2734:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2738:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() { m_dataCache.dirty(); }
    273a:	e7a5      	b.n	2688 <ExFatFile::syncDir()+0x80>
    273c:	2001e06c 	.word	0x2001e06c

00002740 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    2740:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    2742:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2746:	b343      	cbz	r3, 279a <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    2748:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    274c:	4604      	mov	r4, r0
    274e:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    2752:	2a00      	cmp	r2, #0
    2754:	db0c      	blt.n	2770 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    2756:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2758:	4628      	mov	r0, r5
    275a:	f004 fc95 	bl	7088 <FsCache::sync()>
    275e:	b978      	cbnz	r0, 2780 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    2760:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    2764:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2766:	f043 0301 	orr.w	r3, r3, #1
    276a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    276e:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2774:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    2778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    277c:	f7ff bf44 	b.w	2608 <ExFatFile::syncDir()>
    2780:	f505 7004 	add.w	r0, r5, #528	; 0x210
    2784:	f004 fc80 	bl	7088 <FsCache::sync()>
    2788:	2800      	cmp	r0, #0
    278a:	d0e9      	beq.n	2760 <ExFatFile::sync()+0x20>
    278c:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    2790:	6803      	ldr	r3, [r0, #0]
    2792:	69db      	ldr	r3, [r3, #28]
    2794:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2796:	2800      	cmp	r0, #0
    2798:	d0e2      	beq.n	2760 <ExFatFile::sync()+0x20>
    return true;
    279a:	2001      	movs	r0, #1
}
    279c:	bd38      	pop	{r3, r4, r5, pc}
    279e:	bf00      	nop

000027a0 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    27a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    27a2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    27a6:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    27a8:	065a      	lsls	r2, r3, #25
    27aa:	d44c      	bmi.n	2846 <ExFatFile::addDirCluster()+0xa6>
    27ac:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    27ae:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    27b0:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    27b4:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    27b6:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    27ba:	d301      	bcc.n	27c0 <ExFatFile::addDirCluster()+0x20>
}
    27bc:	2000      	movs	r0, #0
    27be:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    27c0:	4628      	mov	r0, r5
    27c2:	f7ff fed7 	bl	2574 <ExFatFile::addCluster()>
    27c6:	2800      	cmp	r0, #0
    27c8:	d0f8      	beq.n	27bc <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    27ca:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    27cc:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    27ce:	69ae      	ldr	r6, [r5, #24]
    27d0:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    27d4:	3e02      	subs	r6, #2
    27d6:	409e      	lsls	r6, r3
    27d8:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    27dc:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    27de:	1931      	adds	r1, r6, r4
    27e0:	2205      	movs	r2, #5
    27e2:	f500 7004 	add.w	r0, r0, #528	; 0x210
    27e6:	3401      	adds	r4, #1
    27e8:	f004 fc7a 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    27ec:	f44f 7200 	mov.w	r2, #512	; 0x200
    27f0:	2100      	movs	r1, #0
    if (!cache) {
    27f2:	2800      	cmp	r0, #0
    27f4:	d0e2      	beq.n	27bc <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    27f6:	f009 f8cd 	bl	b994 <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    27fa:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    27fc:	2301      	movs	r3, #1
    27fe:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2802:	4093      	lsls	r3, r2
    2804:	429c      	cmp	r4, r3
    2806:	d3ea      	bcc.n	27de <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    2808:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    280c:	065b      	lsls	r3, r3, #25
    280e:	d415      	bmi.n	283c <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2810:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    2814:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength += m_vol->bytesPerCluster();
    2818:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    281c:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    2820:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    2824:	189b      	adds	r3, r3, r2
    2826:	f141 0000 	adc.w	r0, r1, #0
    282a:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    282c:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength += m_vol->bytesPerCluster();
    2830:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    2832:	189b      	adds	r3, r3, r2
    2834:	f141 0100 	adc.w	r1, r1, #0
    2838:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    283c:	4628      	mov	r0, r5
}
    283e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    2842:	f7ff bf7d 	b.w	2740 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2846:	6a00      	ldr	r0, [r0, #32]
    2848:	f000 fd04 	bl	3254 <ExFatPartition::rootLength()>
    284c:	e7af      	b.n	27ae <ExFatFile::addDirCluster()+0xe>
    284e:	bf00      	nop

00002850 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    2850:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    2852:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2856:	f013 0f50 	tst.w	r3, #80	; 0x50
    285a:	d102      	bne.n	2862 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    285c:	2500      	movs	r5, #0
}
    285e:	4628      	mov	r0, r5
    2860:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    2862:	f640 2302 	movw	r3, #2562	; 0xa02
    2866:	4604      	mov	r4, r0
    2868:	f7ff fc1e 	bl	20a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    286c:	2800      	cmp	r0, #0
    286e:	d0f5      	beq.n	285c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    2870:	2330      	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    2872:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    2874:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    2878:	f7ff ff92 	bl	27a0 <ExFatFile::addDirCluster()>
    287c:	4605      	mov	r5, r0
    287e:	2800      	cmp	r0, #0
    2880:	d0ec      	beq.n	285c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    2882:	69a1      	ldr	r1, [r4, #24]
  void rewind() { seekSet(0); }
    2884:	2200      	movs	r2, #0
    2886:	2300      	movs	r3, #0
    2888:	4620      	mov	r0, r4
    288a:	61e1      	str	r1, [r4, #28]
    288c:	f7ff fb96 	bl	1fbc <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    2890:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    2892:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    2896:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    289a:	2b00      	cmp	r3, #0
    289c:	d0df      	beq.n	285e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    289e:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    28a0:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    28a2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    28a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    28aa:	f7ff bead 	b.w	2608 <ExFatFile::syncDir()>
    28ae:	bf00      	nop

000028b0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    28b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  ExFatFile() {}
    28b2:	2500      	movs	r5, #0
    28b4:	b097      	sub	sp, #92	; 0x5c
    28b6:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    28b8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    28bc:	9201      	str	r2, [sp, #4]
    28be:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    28c0:	2b00      	cmp	r3, #0
    28c2:	d146      	bne.n	2952 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    28c4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    28c8:	460e      	mov	r6, r1
    28ca:	f013 0f50 	tst.w	r3, #80	; 0x50
    28ce:	d040      	beq.n	2952 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
  if (isDirSeparator(*path)) {
    28d0:	7813      	ldrb	r3, [r2, #0]
    28d2:	4604      	mov	r4, r0
    28d4:	4611      	mov	r1, r2
    28d6:	2b2f      	cmp	r3, #47	; 0x2f
    28d8:	d03e      	beq.n	2958 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!parsePathName(path, &fname, &path)) {
    28da:	ab01      	add	r3, sp, #4
    28dc:	aa03      	add	r2, sp, #12
    28de:	4620      	mov	r0, r4
    28e0:	f7ff fa36 	bl	1d50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    28e4:	2800      	cmp	r0, #0
    28e6:	d034      	beq.n	2952 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!*path) {
    28e8:	9b01      	ldr	r3, [sp, #4]
    28ea:	781b      	ldrb	r3, [r3, #0]
    28ec:	2b00      	cmp	r3, #0
    28ee:	d041      	beq.n	2974 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc4>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    28f0:	2300      	movs	r3, #0
    28f2:	aa03      	add	r2, sp, #12
    28f4:	4631      	mov	r1, r6
    28f6:	4620      	mov	r0, r4
    28f8:	f7ff fbd6 	bl	20a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    28fc:	b930      	cbnz	r0, 290c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5c>
      if (!pFlag || !mkdir(parent, &fname)) {
    28fe:	b347      	cbz	r7, 2952 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    2900:	aa03      	add	r2, sp, #12
    2902:	4631      	mov	r1, r6
    2904:	4620      	mov	r0, r4
    2906:	f7ff ffa3 	bl	2850 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    290a:	b310      	cbz	r0, 2952 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    tmpDir = *this;
    290c:	46a4      	mov	ip, r4
    290e:	ad08      	add	r5, sp, #32
    2910:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2914:	f8dc 0000 	ldr.w	r0, [ip]
    2918:	f10c 0c10 	add.w	ip, ip, #16
    291c:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    2920:	46ae      	mov	lr, r5
    2922:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    2926:	3510      	adds	r5, #16
    2928:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    292c:	45b4      	cmp	ip, r6
    292e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2932:	d1ef      	bne.n	2914 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x64>
    2934:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    2938:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    293a:	6028      	str	r0, [r5, #0]
    close();
    293c:	4620      	mov	r0, r4
    293e:	f7ff f9e9 	bl	1d14 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    2942:	9901      	ldr	r1, [sp, #4]
    2944:	ab01      	add	r3, sp, #4
    2946:	aa03      	add	r2, sp, #12
    2948:	4620      	mov	r0, r4
    294a:	f7ff fa01 	bl	1d50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    294e:	2800      	cmp	r0, #0
    2950:	d1ca      	bne.n	28e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x38>
  return false;
    2952:	2000      	movs	r0, #0
}
    2954:	b017      	add	sp, #92	; 0x5c
    2956:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    2958:	3101      	adds	r1, #1
    295a:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    295c:	780b      	ldrb	r3, [r1, #0]
    295e:	2b2f      	cmp	r3, #47	; 0x2f
    2960:	d0fa      	beq.n	2958 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!tmpDir.openRoot(parent->m_vol)) {
    2962:	6a31      	ldr	r1, [r6, #32]
    2964:	a808      	add	r0, sp, #32
    2966:	f7ff f9df 	bl	1d28 <ExFatFile::openRoot(ExFatVolume*)>
    296a:	2800      	cmp	r0, #0
    296c:	d0f1      	beq.n	2952 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!parsePathName(path, &fname, &path)) {
    296e:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    2970:	ae08      	add	r6, sp, #32
    2972:	e7b2      	b.n	28da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2a>
  return mkdir(parent, &fname);
    2974:	aa03      	add	r2, sp, #12
    2976:	4631      	mov	r1, r6
    2978:	4620      	mov	r0, r4
    297a:	f7ff ff69 	bl	2850 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    297e:	b017      	add	sp, #92	; 0x5c
    2980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2982:	bf00      	nop

00002984 <ExFatFile::truncate()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    2984:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    2988:	079a      	lsls	r2, r3, #30
    298a:	d562      	bpl.n	2a52 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    298c:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    298e:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    2990:	b082      	sub	sp, #8
    2992:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    2994:	b3a5      	cbz	r5, 2a00 <ExFatFile::truncate()+0x7c>
    return true;
  }
  if (isContiguous()) {
    2996:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    299a:	d034      	beq.n	2a06 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    299c:	6a00      	ldr	r0, [r0, #32]
    299e:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    29a0:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    29a4:	3a01      	subs	r2, #1
    29a6:	68e1      	ldr	r1, [r4, #12]
    29a8:	f10c 0c09 	add.w	ip, ip, #9
    29ac:	f141 31ff 	adc.w	r1, r1, #4294967295
    29b0:	fa5f fc8c 	uxtb.w	ip, ip
    29b4:	f1cc 0e20 	rsb	lr, ip, #32
    29b8:	fa22 f20c 	lsr.w	r2, r2, ip
    29bc:	f1ac 0c20 	sub.w	ip, ip, #32
    29c0:	fa01 fe0e 	lsl.w	lr, r1, lr
    29c4:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    29c8:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    29ca:	ea42 020e 	orr.w	r2, r2, lr
    29ce:	ea42 020c 	orr.w	r2, r2, ip
    29d2:	3201      	adds	r2, #1
    if (m_curCluster) {
    29d4:	b319      	cbz	r1, 2a1e <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    29d6:	3d01      	subs	r5, #1
    29d8:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    29da:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    29dc:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    29de:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    29e0:	bb72      	cbnz	r2, 2a40 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    29e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    29e6:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    29e8:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    29ec:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    29f0:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    29f4:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    29f8:	f7ff fea2 	bl	2740 <ExFatFile::sync()>

fail:
  return false;
}
    29fc:	b002      	add	sp, #8
    29fe:	bd70      	pop	{r4, r5, r6, pc}
    return true;
    2a00:	2001      	movs	r0, #1
}
    2a02:	b002      	add	sp, #8
    2a04:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    2a06:	6981      	ldr	r1, [r0, #24]
    2a08:	b961      	cbnz	r1, 2a24 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    2a0a:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2a0c:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    2a0e:	4629      	mov	r1, r5
    2a10:	6a20      	ldr	r0, [r4, #32]
    2a12:	f000 fb49 	bl	30a8 <ExFatPartition::freeChain(unsigned long)>
    2a16:	b1c8      	cbz	r0, 2a4c <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2a18:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2a1c:	e7e1      	b.n	29e2 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    2a1e:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2a20:	61e1      	str	r1, [r4, #28]
    2a22:	e7dd      	b.n	29e0 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2a24:	aa01      	add	r2, sp, #4
    2a26:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    2a28:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2a2a:	f000 fafb 	bl	3024 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    2a2e:	2800      	cmp	r0, #0
    2a30:	db0c      	blt.n	2a4c <ExFatFile::truncate()+0xc8>
      if (fg) {
    2a32:	d110      	bne.n	2a56 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    2a34:	9d01      	ldr	r5, [sp, #4]
    2a36:	2d00      	cmp	r5, #0
    2a38:	d1e9      	bne.n	2a0e <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2a3a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2a3e:	e7d0      	b.n	29e2 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2a40:	2300      	movs	r3, #0
    2a42:	9901      	ldr	r1, [sp, #4]
    2a44:	f000 fa14 	bl	2e70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2a48:	2800      	cmp	r0, #0
    2a4a:	d1e5      	bne.n	2a18 <ExFatFile::truncate()+0x94>
  return false;
    2a4c:	2000      	movs	r0, #0
}
    2a4e:	b002      	add	sp, #8
    2a50:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2a52:	2000      	movs	r0, #0
}
    2a54:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    2a56:	f04f 32ff 	mov.w	r2, #4294967295
    2a5a:	69a1      	ldr	r1, [r4, #24]
    2a5c:	6a20      	ldr	r0, [r4, #32]
    2a5e:	f000 fb03 	bl	3068 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2a62:	2800      	cmp	r0, #0
    2a64:	d1e6      	bne.n	2a34 <ExFatFile::truncate()+0xb0>
    2a66:	e7f1      	b.n	2a4c <ExFatFile::truncate()+0xc8>

00002a68 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    2a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2a6c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    2a70:	b083      	sub	sp, #12
    2a72:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    2a74:	079d      	lsls	r5, r3, #30
    2a76:	f140 80a1 	bpl.w	2bbc <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    2a7a:	4691      	mov	r9, r2
    2a7c:	071a      	lsls	r2, r3, #28
    2a7e:	460e      	mov	r6, r1
    2a80:	f100 8095 	bmi.w	2bae <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    2a84:	f1b9 0f00 	cmp.w	r9, #0
    2a88:	f000 8128 	beq.w	2cdc <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    2a8c:	6823      	ldr	r3, [r4, #0]
    2a8e:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2a90:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    2a92:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2a94:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    2a98:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    2a9c:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    2aa0:	f1b8 0f00 	cmp.w	r8, #0
    2aa4:	f040 8094 	bne.w	2bd0 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    2aa8:	2900      	cmp	r1, #0
    2aaa:	f000 80d4 	beq.w	2c56 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    2aae:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2ab2:	065b      	lsls	r3, r3, #25
    2ab4:	f140 80ec 	bpl.w	2c90 <ExFatFile::write(void const*, unsigned int)+0x228>
    2ab8:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    2abc:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2ac0:	f10c 0c09 	add.w	ip, ip, #9
    2ac4:	3b01      	subs	r3, #1
    2ac6:	fa5f fc8c 	uxtb.w	ip, ip
    2aca:	f142 32ff 	adc.w	r2, r2, #4294967295
    2ace:	f1cc 0e20 	rsb	lr, ip, #32
    2ad2:	fa23 f30c 	lsr.w	r3, r3, ip
    2ad6:	f1ac 0c20 	sub.w	ip, ip, #32
    2ada:	fa02 fe0e 	lsl.w	lr, r2, lr
    2ade:	fa22 fc0c 	lsr.w	ip, r2, ip
    2ae2:	69e2      	ldr	r2, [r4, #28]
    2ae4:	ea43 030e 	orr.w	r3, r3, lr
    2ae8:	ea43 030c 	orr.w	r3, r3, ip
    2aec:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    2aee:	4299      	cmp	r1, r3
    2af0:	f080 80d5 	bcs.w	2c9e <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    2af4:	3101      	adds	r1, #1
    2af6:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    2af8:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2afc:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    2afe:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2b02:	4091      	lsls	r1, r2
    2b04:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2b06:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    2b0a:	f0c0 808a 	bcc.w	2c22 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    2b0e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    2b12:	f0c0 80a6 	bcc.w	2c62 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    2b16:	2301      	movs	r3, #1
    2b18:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    2b1a:	0a6a      	lsrs	r2, r5, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    2b1c:	eba3 0308 	sub.w	r3, r3, r8
    2b20:	4293      	cmp	r3, r2
    2b22:	bf28      	it	cs
    2b24:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    2b26:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
    2b2a:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    2b2c:	ea4f 2843 	mov.w	r8, r3, lsl #9
    2b30:	d309      	bcc.n	2b46 <ExFatFile::write(void const*, unsigned int)+0xde>
    2b32:	185f      	adds	r7, r3, r1
    2b34:	42ba      	cmp	r2, r7
    2b36:	d206      	bcs.n	2b46 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    2b38:	2200      	movs	r2, #0
    2b3a:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2b3e:	f04f 32ff 	mov.w	r2, #4294967295
    2b42:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
    2b46:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2b4a:	4632      	mov	r2, r6
    2b4c:	6807      	ldr	r7, [r0, #0]
    2b4e:	6a7f      	ldr	r7, [r7, #36]	; 0x24
    2b50:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    2b52:	b398      	cbz	r0, 2bbc <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    2b54:	4643      	mov	r3, r8
    src += n;
    2b56:	4446      	add	r6, r8
    toWrite -= n;
    2b58:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    2b5c:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    2b60:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    2b64:	19db      	adds	r3, r3, r7
    2b66:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    2b6a:	4298      	cmp	r0, r3
    2b6c:	4191      	sbcs	r1, r2
    m_curPosition += n;
    2b6e:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    2b72:	d207      	bcs.n	2b84 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2b74:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2b78:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    2b7c:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2b80:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    2b84:	2d00      	cmp	r5, #0
    2b86:	d183      	bne.n	2a90 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    2b88:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    2b8c:	4298      	cmp	r0, r3
    2b8e:	4191      	sbcs	r1, r2
    2b90:	f0c0 8096 	bcc.w	2cc0 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    2b94:	4b53      	ldr	r3, [pc, #332]	; (2ce4 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    2b96:	681b      	ldr	r3, [r3, #0]
    2b98:	2b00      	cmp	r3, #0
    2b9a:	f000 809d 	beq.w	2cd8 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2b9e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2ba2:	4648      	mov	r0, r9
    2ba4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2ba8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    2bac:	e00d      	b.n	2bca <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    2bae:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    2bb2:	f7ff fa03 	bl	1fbc <ExFatFile::seekSet(unsigned long long)>
    2bb6:	2800      	cmp	r0, #0
    2bb8:	f47f af64 	bne.w	2a84 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    2bbc:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    2bc0:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2bc2:	f043 0301 	orr.w	r3, r3, #1
    2bc6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2bca:	b003      	add	sp, #12
    2bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    2bd0:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2bd4:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2bd6:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    2bda:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2bde:	4091      	lsls	r1, r2
    2be0:	4441      	add	r1, r8
    2be2:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2be4:	2f00      	cmp	r7, #0
    2be6:	d08e      	beq.n	2b06 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    2be8:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    2bec:	2201      	movs	r2, #1
    2bee:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2bf2:	45a8      	cmp	r8, r5
    2bf4:	bf28      	it	cs
    2bf6:	46a8      	movcs	r8, r5
    2bf8:	f004 fa72 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2bfc:	2800      	cmp	r0, #0
    2bfe:	d0dd      	beq.n	2bbc <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2c00:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2c02:	4447      	add	r7, r8
      memcpy(dst, src, n);
    2c04:	4642      	mov	r2, r8
    2c06:	4631      	mov	r1, r6
    2c08:	f005 f9f8 	bl	7ffc <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2c0c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    2c10:	6a20      	ldr	r0, [r4, #32]
    2c12:	d19f      	bne.n	2b54 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() { return m_dataCache.sync(); }
    2c14:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2c18:	f004 fa36 	bl	7088 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    2c1c:	2800      	cmp	r0, #0
    2c1e:	d199      	bne.n	2b54 <ExFatFile::write(void const*, unsigned int)+0xec>
    2c20:	e7cc      	b.n	2bbc <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    2c22:	6862      	ldr	r2, [r4, #4]
    2c24:	6963      	ldr	r3, [r4, #20]
    2c26:	9200      	str	r2, [sp, #0]
    2c28:	9301      	str	r3, [sp, #4]
    2c2a:	6922      	ldr	r2, [r4, #16]
    2c2c:	6823      	ldr	r3, [r4, #0]
    2c2e:	4293      	cmp	r3, r2
    2c30:	e9dd 2300 	ldrd	r2, r3, [sp]
    2c34:	419a      	sbcs	r2, r3
    2c36:	d212      	bcs.n	2c5e <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    2c38:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    2c3a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2c3e:	f004 fa4f 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2c42:	2800      	cmp	r0, #0
    2c44:	d0ba      	beq.n	2bbc <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2c46:	462a      	mov	r2, r5
    2c48:	4631      	mov	r1, r6
    2c4a:	4438      	add	r0, r7
    m_curPosition += n;
    2c4c:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    2c4e:	f005 f9d5 	bl	7ffc <memcpy>
    m_curPosition += n;
    2c52:	462b      	mov	r3, r5
    2c54:	e77f      	b.n	2b56 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    2c56:	69e1      	ldr	r1, [r4, #28]
    2c58:	b349      	cbz	r1, 2cae <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    2c5a:	61a1      	str	r1, [r4, #24]
    2c5c:	e74c      	b.n	2af8 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    2c5e:	2205      	movs	r2, #5
    2c60:	e7eb      	b.n	2c3a <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    2c62:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    2c66:	428b      	cmp	r3, r1
    2c68:	d106      	bne.n	2c78 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    2c6a:	2300      	movs	r3, #0
    2c6c:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2c70:	f04f 33ff 	mov.w	r3, #4294967295
    2c74:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
    2c78:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2c7c:	4632      	mov	r2, r6
    2c7e:	6803      	ldr	r3, [r0, #0]
    2c80:	6a1b      	ldr	r3, [r3, #32]
    2c82:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    2c84:	2800      	cmp	r0, #0
    2c86:	d099      	beq.n	2bbc <ExFatFile::write(void const*, unsigned int)+0x154>
    2c88:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2c8c:	4698      	mov	r8, r3
    2c8e:	e762      	b.n	2b56 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2c90:	f104 0218 	add.w	r2, r4, #24
    2c94:	f000 f9c6 	bl	3024 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    2c98:	2800      	cmp	r0, #0
    2c9a:	db8f      	blt.n	2bbc <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    2c9c:	d104      	bne.n	2ca8 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    2c9e:	4620      	mov	r0, r4
    2ca0:	f7ff fc68 	bl	2574 <ExFatFile::addCluster()>
    2ca4:	2800      	cmp	r0, #0
    2ca6:	d089      	beq.n	2bbc <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    2ca8:	69a1      	ldr	r1, [r4, #24]
    2caa:	6a20      	ldr	r0, [r4, #32]
    2cac:	e724      	b.n	2af8 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    2cae:	4620      	mov	r0, r4
    2cb0:	f7ff fc60 	bl	2574 <ExFatFile::addCluster()>
    2cb4:	2800      	cmp	r0, #0
    2cb6:	d081      	beq.n	2bbc <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    2cb8:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    2cba:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    2cbc:	61e1      	str	r1, [r4, #28]
    2cbe:	e71b      	b.n	2af8 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2cc0:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2cc4:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    2cc6:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2cca:	f061 037f 	orn	r3, r1, #127	; 0x7f
    2cce:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2cd2:	b003      	add	sp, #12
    2cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2cd8:	4648      	mov	r0, r9
    2cda:	e776      	b.n	2bca <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    2cdc:	e9d4 3200 	ldrd	r3, r2, [r4]
    2ce0:	e752      	b.n	2b88 <ExFatFile::write(void const*, unsigned int)+0x120>
    2ce2:	bf00      	nop
    2ce4:	2001e06c 	.word	0x2001e06c

00002ce8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    2ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  bool atEnd() { return next == end; }
    2cec:	e9d2 3801 	ldrd	r3, r8, [r2, #4]
    2cf0:	f103 090f 	add.w	r9, r3, #15
  return *reinterpret_cast<const uint16_t*>(src);
    2cf4:	f831 0f02 	ldrh.w	r0, [r1, #2]!
    if (fname->atEnd()) {
    2cf8:	4598      	cmp	r8, r3
  char getch() { return atEnd() ? 0 : *next++; }
    2cfa:	f103 0301 	add.w	r3, r3, #1
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2cfe:	fa5f fc80 	uxtb.w	ip, r0
    if (fname->atEnd()) {
    2d02:	d01e      	beq.n	2d42 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    2d04:	6053      	str	r3, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2d06:	287e      	cmp	r0, #126	; 0x7e
    2d08:	f813 ec01 	ldrb.w	lr, [r3, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2d0c:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
    2d10:	f1ac 0620 	sub.w	r6, ip, #32
    2d14:	f1ae 0561 	sub.w	r5, lr, #97	; 0x61
    2d18:	f1ae 0720 	sub.w	r7, lr, #32
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2d1c:	d80e      	bhi.n	2d3c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2d1e:	2d19      	cmp	r5, #25
    2d20:	bf98      	it	ls
    2d22:	fa5f fe87 	uxtbls.w	lr, r7
    2d26:	2c19      	cmp	r4, #25
    2d28:	bf98      	it	ls
    2d2a:	fa5f fc86 	uxtbls.w	ip, r6
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2d2e:	45f4      	cmp	ip, lr
    2d30:	d104      	bne.n	2d3c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
  for (uint8_t i = 0; i < 15; i++) {
    2d32:	4599      	cmp	r9, r3
    2d34:	d1de      	bne.n	2cf4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    2d36:	2001      	movs	r0, #1
}
    2d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
    2d3c:	2000      	movs	r0, #0
}
    2d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return u == 0;
    2d42:	fab0 f080 	clz	r0, r0
    2d46:	0940      	lsrs	r0, r0, #5
}
    2d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00002d4c <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    2d4c:	b530      	push	{r4, r5, lr}
  void reset() { next = begin; }
    2d4e:	680d      	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
    2d50:	688c      	ldr	r4, [r1, #8]
  void reset() { next = begin; }
    2d52:	604d      	str	r5, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    2d54:	42ac      	cmp	r4, r5
    2d56:	d025      	beq.n	2da4 <ExFatFile::hashName(ExName_t*)+0x58>
    2d58:	462a      	mov	r2, r5
  uint16_t hash = 0;
    2d5a:	2300      	movs	r3, #0
  char getch() { return atEnd() ? 0 : *next++; }
    2d5c:	3201      	adds	r2, #1
  hash = ((hash << 15) | (hash >> 1)) + u;
    2d5e:	03d8      	lsls	r0, r3, #15
    2d60:	604a      	str	r2, [r1, #4]
    2d62:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
    2d66:	f812 0c01 	ldrb.w	r0, [r2, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2d6a:	f1a0 0c61 	sub.w	ip, r0, #97	; 0x61
    2d6e:	f1a0 0e20 	sub.w	lr, r0, #32
    2d72:	f1bc 0f19 	cmp.w	ip, #25
    2d76:	bf98      	it	ls
    2d78:	fa5f f08e 	uxtbls.w	r0, lr
  while (!fname->atEnd()) {
    2d7c:	4294      	cmp	r4, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
    2d7e:	4403      	add	r3, r0
  hash = ((hash << 15) | (hash >> 1));
    2d80:	ea4f 30c3 	mov.w	r0, r3, lsl #15
    2d84:	f3c3 034e 	ubfx	r3, r3, #1, #15
    2d88:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    2d8c:	ea43 0300 	orr.w	r3, r3, r0
  while (!fname->atEnd()) {
    2d90:	d1e4      	bne.n	2d5c <ExFatFile::hashName(ExName_t*)+0x10>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    2d92:	1b64      	subs	r4, r4, r5
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    2d94:	820b      	strh	r3, [r1, #16]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2d96:	1e60      	subs	r0, r4, #1
  fname->nameLength = fname->end - fname->begin;
    2d98:	60cc      	str	r4, [r1, #12]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2d9a:	28fe      	cmp	r0, #254	; 0xfe
    2d9c:	bf8c      	ite	hi
    2d9e:	2000      	movhi	r0, #0
    2da0:	2001      	movls	r0, #1
  }
  return true;

fail:
  return false;
}
    2da2:	bd30      	pop	{r4, r5, pc}
  while (!fname->atEnd()) {
    2da4:	2000      	movs	r0, #0
    2da6:	4604      	mov	r4, r0
  uint16_t hash = 0;
    2da8:	4603      	mov	r3, r0
  fname->nameLength = fname->end - fname->begin;
    2daa:	60cc      	str	r4, [r1, #12]
  fname->nameHash = hash;
    2dac:	820b      	strh	r3, [r1, #16]
}
    2dae:	bd30      	pop	{r4, r5, pc}

00002db0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2db4:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2db6:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2db8:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2dba:	2900      	cmp	r1, #0
    2dbc:	d042      	beq.n	2e44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    2dbe:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    2dc2:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2dc6:	4543      	cmp	r3, r8
    2dc8:	d942      	bls.n	2e50 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    2dca:	f008 0307 	and.w	r3, r8, #7
    2dce:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    2dd0:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    2dd4:	409d      	lsls	r5, r3
    2dd6:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    2dd8:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    2dda:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector =
    2ddc:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    2de0:	2200      	movs	r2, #0
    2de2:	4638      	mov	r0, r7
    2de4:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    2de8:	f004 f97a 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2dec:	b1e8      	cbz	r0, 2e2a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    2dee:	f10b 3bff 	add.w	fp, fp, #4294967295
    2df2:	4483      	add	fp, r0
    2df4:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    2df8:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    2dfc:	e00a      	b.n	2e14 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    2dfe:	454a      	cmp	r2, r9
    2e00:	d02b      	beq.n	2e5a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2e02:	45a0      	cmp	r8, r4
    2e04:	d010      	beq.n	2e28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    2e06:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    2e0a:	42a5      	cmp	r5, r4
    2e0c:	d914      	bls.n	2e38 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    2e0e:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    2e12:	d00c      	beq.n	2e2e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    2e14:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    2e16:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    2e18:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    2e1c:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    2e20:	d0ed      	beq.n	2dfe <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    2e22:	45a0      	cmp	r8, r4
        endAlloc++;
    2e24:	4626      	mov	r6, r4
        if (endAlloc == start) {
    2e26:	d1ee      	bne.n	2e06 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    2e28:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    2e2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    2e2e:	4558      	cmp	r0, fp
      mask = 1;
    2e30:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    2e34:	d1e0      	bne.n	2df8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    2e36:	e001      	b.n	2e3c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    2e38:	2600      	movs	r6, #0
    2e3a:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    2e3c:	2501      	movs	r5, #1
    i = 0;
    2e3e:	f04f 0b00 	mov.w	fp, #0
    2e42:	e7cb      	b.n	2ddc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2e44:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    2e48:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2e4c:	4543      	cmp	r3, r8
    2e4e:	d8bc      	bhi.n	2dca <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    2e50:	f04f 0800 	mov.w	r8, #0
    2e54:	2501      	movs	r5, #1
    start = 0;
    2e56:	46c3      	mov	fp, r8
    2e58:	e7be      	b.n	2dd8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    2e5a:	f1ba 0f00 	cmp.w	sl, #0
    2e5e:	d104      	bne.n	2e6a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    2e60:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    2e64:	bf08      	it	eq
    2e66:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    2e6a:	1cb0      	adds	r0, r6, #2
}
    2e6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002e70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    2e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e74:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    2e76:	1e88      	subs	r0, r1, #2
                                  bool value) {
    2e78:	4615      	mov	r5, r2
    2e7a:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    2e7c:	1883      	adds	r3, r0, r2
    2e7e:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    2e82:	4293      	cmp	r3, r2
    2e84:	d837      	bhi.n	2ef6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    2e86:	bbce      	cbnz	r6, 2efc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    2e88:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    2e8c:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    2e8e:	bf88      	it	hi
    2e90:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    2e94:	f000 0307 	and.w	r3, r0, #7
    2e98:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2e9a:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    2e9e:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    2ea2:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2ea4:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    2ea8:	b2e4      	uxtb	r4, r4
    2eaa:	2201      	movs	r2, #1
    2eac:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2eae:	188f      	adds	r7, r1, r2
    2eb0:	f004 f916 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2eb4:	b1f8      	cbz	r0, 2ef6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2eb6:	f109 3eff 	add.w	lr, r9, #4294967295
    2eba:	4486      	add	lr, r0
    2ebc:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2ec0:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    2ec4:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2ec8:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    2ecc:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    2ed0:	bf14      	ite	ne
    2ed2:	2201      	movne	r2, #1
    2ed4:	2200      	moveq	r2, #0
    2ed6:	42b2      	cmp	r2, r6
    2ed8:	d00d      	beq.n	2ef6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    2eda:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    2edc:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    2ee0:	d018      	beq.n	2f14 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    2ee2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2ee6:	d1ed      	bne.n	2ec4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    2ee8:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2eea:	46a1      	mov	r9, r4
    2eec:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    2ef0:	d1e6      	bne.n	2ec0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2ef2:	4639      	mov	r1, r7
    2ef4:	e7d9      	b.n	2eaa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

fail:
  return false;
    2ef6:	2000      	movs	r0, #0
}
    2ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2efc:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    2f00:	428b      	cmp	r3, r1
    2f02:	d9c7      	bls.n	2e94 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    2f04:	4281      	cmp	r1, r0
    2f06:	d3c5      	bcc.n	2e94 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2f08:	4293      	cmp	r3, r2
    2f0a:	bf28      	it	cs
    2f0c:	2300      	movcs	r3, #0
    2f0e:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    2f12:	e7bf      	b.n	2e94 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    2f14:	2001      	movs	r0, #1
}
    2f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f1a:	bf00      	nop

00002f1c <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    2f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    2f1e:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2f22:	3301      	adds	r3, #1
    2f24:	428b      	cmp	r3, r1
    2f26:	d201      	bcs.n	2f2c <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    2f28:	2000      	movs	r0, #0
}
    2f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f2c:	4607      	mov	r7, r0
    2f2e:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    2f30:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    2f34:	2500      	movs	r5, #0
    2f36:	e005      	b.n	2f44 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    2f38:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    2f3c:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    2f3e:	3301      	adds	r3, #1
    2f40:	42a3      	cmp	r3, r4
    2f42:	d3f1      	bcc.n	2f28 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2f44:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    2f48:	2200      	movs	r2, #0
    2f4a:	4630      	mov	r0, r6
    2f4c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2f50:	f004 f8c6 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2f54:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    2f56:	2800      	cmp	r0, #0
    2f58:	d0e6      	beq.n	2f28 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2f5a:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2f5e:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    2f60:	1c63      	adds	r3, r4, #1
    2f62:	d1e9      	bne.n	2f38 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    2f64:	1c68      	adds	r0, r5, #1
}
    2f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002f68 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    2f68:	b538      	push	{r3, r4, r5, lr}
    2f6a:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    2f6c:	680b      	ldr	r3, [r1, #0]
    2f6e:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    2f72:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    2f76:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    2f7a:	3b02      	subs	r3, #2
    2f7c:	6865      	ldr	r5, [r4, #4]
    2f7e:	fa03 f30c 	lsl.w	r3, r3, ip
    2f82:	4029      	ands	r1, r5
    2f84:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    2f88:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    2f8c:	4419      	add	r1, r3
    2f8e:	f004 f8a7 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    2f92:	b118      	cbz	r0, 2f9c <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    2f94:	6863      	ldr	r3, [r4, #4]
    2f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2f9a:	4418      	add	r0, r3
}
    2f9c:	bd38      	pop	{r3, r4, r5, pc}
    2f9e:	bf00      	nop

00002fa0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2fa4:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2fa6:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    2faa:	6849      	ldr	r1, [r1, #4]
    2fac:	400b      	ands	r3, r1
  pos->position += offset;
    2fae:	4411      	add	r1, r2
    2fb0:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2fb2:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2fb4:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    2fb8:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    2fbc:	b2d2      	uxtb	r2, r2
    2fbe:	40d3      	lsrs	r3, r2
  while (tmp--) {
    2fc0:	b32b      	cbz	r3, 300e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    2fc2:	4680      	mov	r8, r0
    2fc4:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    2fc6:	f500 7904 	add.w	r9, r0, #528	; 0x210
    2fca:	e005      	b.n	2fd8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    2fcc:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    2fce:	3d01      	subs	r5, #1
      pos->cluster++;
    2fd0:	f103 0301 	add.w	r3, r3, #1
    2fd4:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    2fd6:	d31a      	bcc.n	300e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    2fd8:	7a26      	ldrb	r6, [r4, #8]
    2fda:	2e00      	cmp	r6, #0
    2fdc:	d1f6      	bne.n	2fcc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    2fde:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    2fe2:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    2fe4:	6827      	ldr	r7, [r4, #0]
    2fe6:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    2fe8:	3301      	adds	r3, #1
    2fea:	429f      	cmp	r7, r3
    2fec:	d812      	bhi.n	3014 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2fee:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    2ff2:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    2ff6:	f004 f873 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2ffa:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    2ffc:	b150      	cbz	r0, 3014 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2ffe:	f3c7 0708 	ubfx	r7, r7, #0, #9
    3002:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    3004:	1c5a      	adds	r2, r3, #1
    3006:	d009      	beq.n	301c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    3008:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    300a:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    300c:	d2e4      	bcs.n	2fd8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    300e:	2001      	movs	r0, #1
}
    3010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    3014:	f04f 30ff 	mov.w	r0, #4294967295
}
    3018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    301c:	4630      	mov	r0, r6
}
    301e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3022:	bf00      	nop

00003024 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    3024:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    3026:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    302a:	3301      	adds	r3, #1
    302c:	428b      	cmp	r3, r1
    302e:	d202      	bcs.n	3036 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    3030:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    3034:	bd38      	pop	{r3, r4, r5, pc}
    3036:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3038:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    303c:	4615      	mov	r5, r2
    303e:	f500 7004 	add.w	r0, r0, #528	; 0x210
    3042:	2200      	movs	r2, #0
    3044:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    3048:	f004 f84a 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    304c:	2800      	cmp	r0, #0
    304e:	d0ef      	beq.n	3030 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3050:	00a4      	lsls	r4, r4, #2
    3052:	f3c4 0408 	ubfx	r4, r4, #0, #9
    3056:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    3058:	1c5a      	adds	r2, r3, #1
    305a:	d002      	beq.n	3062 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    305c:	2001      	movs	r0, #1
  *value = next;
    305e:	602b      	str	r3, [r5, #0]
}
    3060:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    3062:	2000      	movs	r0, #0
}
    3064:	bd38      	pop	{r3, r4, r5, pc}
    3066:	bf00      	nop

00003068 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3068:	2901      	cmp	r1, #1
    306a:	d91b      	bls.n	30a4 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    306c:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    306e:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    3072:	460c      	mov	r4, r1
    3074:	3301      	adds	r3, #1
    3076:	428b      	cmp	r3, r1
    3078:	d201      	bcs.n	307e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
    307a:	2000      	movs	r0, #0
}
    307c:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    307e:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    3082:	4615      	mov	r5, r2
    3084:	f500 7004 	add.w	r0, r0, #528	; 0x210
    3088:	2201      	movs	r2, #1
    308a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    308e:	f004 f827 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    3092:	4603      	mov	r3, r0
    3094:	2800      	cmp	r0, #0
    3096:	d0f0      	beq.n	307a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    3098:	00a4      	lsls	r4, r4, #2
  return true;
    309a:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    309c:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    30a0:	511d      	str	r5, [r3, r4]
}
    30a2:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    30a4:	2000      	movs	r0, #0
}
    30a6:	4770      	bx	lr

000030a8 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    30a8:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    30ac:	3301      	adds	r3, #1
    30ae:	4299      	cmp	r1, r3
    30b0:	d901      	bls.n	30b6 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

fail:
  return false;
}
    30b2:	2000      	movs	r0, #0
    30b4:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    30b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30ba:	4605      	mov	r5, r0
    30bc:	b083      	sub	sp, #12
    30be:	460c      	mov	r4, r1
    30c0:	f500 7904 	add.w	r9, r0, #528	; 0x210
    30c4:	460f      	mov	r7, r1
    30c6:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    30ca:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    30ce:	2200      	movs	r2, #0
    30d0:	4648      	mov	r0, r9
    30d2:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    30d6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    30da:	f004 f801 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    30de:	b190      	cbz	r0, 3106 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    30e0:	00a3      	lsls	r3, r4, #2
    30e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    30e6:	58c2      	ldr	r2, [r0, r3]
    30e8:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    30ea:	1c53      	adds	r3, r2, #1
    30ec:	bf16      	itet	ne
    30ee:	4616      	movne	r6, r2
    30f0:	f04f 0a00 	moveq.w	sl, #0
    30f4:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    30f8:	2c01      	cmp	r4, #1
    30fa:	d904      	bls.n	3106 <ExFatPartition::freeChain(unsigned long)+0x5e>
    30fc:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    3100:	3201      	adds	r2, #1
    3102:	4294      	cmp	r4, r2
    3104:	d903      	bls.n	310e <ExFatPartition::freeChain(unsigned long)+0x66>
}
    3106:	2000      	movs	r0, #0
    3108:	b003      	add	sp, #12
    310a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    310e:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    3112:	2201      	movs	r2, #1
    3114:	4648      	mov	r0, r9
    3116:	4459      	add	r1, fp
    3118:	f003 ffe2 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    311c:	2800      	cmp	r0, #0
    311e:	d0f2      	beq.n	3106 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    3120:	9b01      	ldr	r3, [sp, #4]
    3122:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    3126:	f1ba 0f00 	cmp.w	sl, #0
    312a:	d012      	beq.n	3152 <ExFatPartition::freeChain(unsigned long)+0xaa>
    312c:	3401      	adds	r4, #1
    312e:	42b4      	cmp	r4, r6
    3130:	d008      	beq.n	3144 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    3132:	2300      	movs	r3, #0
    3134:	1be2      	subs	r2, r4, r7
    3136:	4639      	mov	r1, r7
    3138:	4628      	mov	r0, r5
    313a:	f7ff fe99 	bl	2e70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    313e:	2800      	cmp	r0, #0
    3140:	d0e1      	beq.n	3106 <ExFatPartition::freeChain(unsigned long)+0x5e>
    3142:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    3144:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    3148:	3301      	adds	r3, #1
    314a:	42b3      	cmp	r3, r6
    314c:	d3db      	bcc.n	3106 <ExFatPartition::freeChain(unsigned long)+0x5e>
    314e:	4634      	mov	r4, r6
    3150:	e7bb      	b.n	30ca <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    3152:	1c62      	adds	r2, r4, #1
    3154:	4653      	mov	r3, sl
    3156:	4639      	mov	r1, r7
    3158:	4628      	mov	r0, r5
    315a:	1bd2      	subs	r2, r2, r7
}
    315c:	b003      	add	sp, #12
    315e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    3162:	f7ff be85 	b.w	2e70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3166:	bf00      	nop

00003168 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    3168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    316a:	f04f 0c00 	mov.w	ip, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    316e:	4615      	mov	r5, r2
    m_sector = 0XFFFFFFFF;
    3170:	f04f 32ff 	mov.w	r2, #4294967295
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    3174:	4604      	mov	r4, r0
  m_fatType = 0;
    3176:	f880 c444 	strb.w	ip, [r0, #1092]	; 0x444
  m_blockDev = dev;
    317a:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    317e:	6041      	str	r1, [r0, #4]
    3180:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    m_status = 0;
    3184:	f880 c000 	strb.w	ip, [r0]
    3188:	f880 c210 	strb.w	ip, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    318c:	6082      	str	r2, [r0, #8]
    318e:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
  if (part) {
    3192:	b1e5      	cbz	r5, 31ce <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    3194:	2d04      	cmp	r5, #4
    3196:	d901      	bls.n	319c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    3198:	2000      	movs	r0, #0
}
    319a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    319c:	f500 7704 	add.w	r7, r0, #528	; 0x210
    31a0:	4662      	mov	r2, ip
    31a2:	4661      	mov	r1, ip
    31a4:	4638      	mov	r0, r7
    31a6:	f003 ff9b 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    31aa:	2800      	cmp	r0, #0
    31ac:	d0f4      	beq.n	3198 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    MbrPart_t* mp = mbr->part + part - 1;
    31ae:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    31b2:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    31b6:	442b      	add	r3, r5
    31b8:	0119      	lsls	r1, r3, #4
    31ba:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    31be:	791a      	ldrb	r2, [r3, #4]
    31c0:	2a00      	cmp	r2, #0
    31c2:	d0e9      	beq.n	3198 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    31c4:	5c42      	ldrb	r2, [r0, r1]
    31c6:	0652      	lsls	r2, r2, #25
    31c8:	d1e6      	bne.n	3198 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  return *reinterpret_cast<const uint32_t*>(src);
    31ca:	689e      	ldr	r6, [r3, #8]
    31cc:	e002      	b.n	31d4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    31ce:	461e      	mov	r6, r3
    31d0:	f500 7704 	add.w	r7, r0, #528	; 0x210
    31d4:	2200      	movs	r2, #0
    31d6:	4631      	mov	r1, r6
    31d8:	4638      	mov	r0, r7
    31da:	f003 ff81 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    31de:	4605      	mov	r5, r0
    31e0:	2800      	cmp	r0, #0
    31e2:	d0d9      	beq.n	3198 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    31e4:	2205      	movs	r2, #5
    31e6:	491a      	ldr	r1, [pc, #104]	; (3250 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe8>)
    31e8:	3003      	adds	r0, #3
    31ea:	f008 fc25 	bl	ba38 <strncmp>
    31ee:	2800      	cmp	r0, #0
    31f0:	d1d2      	bne.n	3198 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    31f2:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    31f6:	2b09      	cmp	r3, #9
    31f8:	d1ce      	bne.n	3198 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    31fa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  bitmapFind(0, 1);
    31fc:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    31fe:	4433      	add	r3, r6
    3200:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    3204:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    3206:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    320a:	6dab      	ldr	r3, [r5, #88]	; 0x58
    320c:	4433      	add	r3, r6
    320e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    3212:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    3214:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    3218:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    321a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    321e:	f895 206d 	ldrb.w	r2, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3222:	2501      	movs	r5, #1
  m_bitmapStart = 0;
    3224:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    3228:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    322a:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    322e:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3232:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    3236:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3238:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    323c:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    3240:	462a      	mov	r2, r5
    3242:	f7ff fdb5 	bl	2db0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    3246:	2340      	movs	r3, #64	; 0x40
  return true;
    3248:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    324a:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3250:	2000058c 	.word	0x2000058c

00003254 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    3254:	b510      	push	{r4, lr}
    3256:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    3258:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    325c:	f7ff fe5e 	bl	2f1c <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3260:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    3264:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    3266:	b2db      	uxtb	r3, r3
}
    3268:	4098      	lsls	r0, r3
    326a:	bd10      	pop	{r4, pc}

0000326c <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    326c:	b570      	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    326e:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    3272:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    3274:	2300      	movs	r3, #0
    3276:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    3278:	4668      	mov	r0, sp
    327a:	4621      	mov	r1, r4
    327c:	930c      	str	r3, [sp, #48]	; 0x30
    327e:	f7ff f8f7 	bl	2470 <ExFatFile::open(ExFatFile*, char const*, int)>
    3282:	4605      	mov	r5, r0
    3284:	b1d8      	cbz	r0, 32be <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    3286:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    328a:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    328e:	d019      	beq.n	32c4 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    3290:	46ee      	mov	lr, sp
    3292:	46a4      	mov	ip, r4
    3294:	ae0c      	add	r6, sp, #48	; 0x30
    3296:	4674      	mov	r4, lr
    3298:	f10c 0c10 	add.w	ip, ip, #16
    329c:	f10e 0e10 	add.w	lr, lr, #16
    32a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    32a2:	42b4      	cmp	r4, r6
    32a4:	f84c 0c10 	str.w	r0, [ip, #-16]
    32a8:	f84c 1c0c 	str.w	r1, [ip, #-12]
    32ac:	f84c 2c08 	str.w	r2, [ip, #-8]
    32b0:	f84c 3c04 	str.w	r3, [ip, #-4]
    32b4:	d1ef      	bne.n	3296 <ExFatVolume::chdir(char const*)+0x2a>
    32b6:	f8de 0000 	ldr.w	r0, [lr]
    32ba:	f8cc 0000 	str.w	r0, [ip]
  return true;

fail:
  return false;
}
    32be:	4628      	mov	r0, r5
    32c0:	b00e      	add	sp, #56	; 0x38
    32c2:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    32c4:	461d      	mov	r5, r3
}
    32c6:	4628      	mov	r0, r5
    32c8:	b00e      	add	sp, #56	; 0x38
    32ca:	bd70      	pop	{r4, r5, r6, pc}

000032cc <FatFile::sync() [clone .part.0]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    32cc:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    32ce:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    32d2:	b082      	sub	sp, #8
    32d4:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    32d6:	2b00      	cmp	r3, #0
    32d8:	db0d      	blt.n	32f6 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    32da:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    32dc:	f105 0024 	add.w	r0, r5, #36	; 0x24
    32e0:	f003 fed2 	bl	7088 <FsCache::sync()>
    32e4:	2800      	cmp	r0, #0
    32e6:	d13f      	bne.n	3368 <FatFile::sync() [clone .part.0]+0x9c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    32e8:	7863      	ldrb	r3, [r4, #1]
  return false;
    32ea:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    32ec:	f043 0301 	orr.w	r3, r3, #1
    32f0:	7063      	strb	r3, [r4, #1]
}
    32f2:	b002      	add	sp, #8
    32f4:	bd70      	pop	{r4, r5, r6, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    32f6:	6880      	ldr	r0, [r0, #8]
    32f8:	2201      	movs	r2, #1
    32fa:	69a1      	ldr	r1, [r4, #24]
    32fc:	3024      	adds	r0, #36	; 0x24
    32fe:	f003 feef 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3302:	2800      	cmp	r0, #0
    3304:	d0f0      	beq.n	32e8 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    3306:	88a5      	ldrh	r5, [r4, #4]
    3308:	f005 050f 	and.w	r5, r5, #15
    330c:	016b      	lsls	r3, r5, #5
    330e:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    3312:	5cc3      	ldrb	r3, [r0, r3]
    3314:	2be5      	cmp	r3, #229	; 0xe5
    3316:	d0e7      	beq.n	32e8 <FatFile::sync() [clone .part.0]+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    3318:	7823      	ldrb	r3, [r4, #0]
    331a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    331e:	72eb      	strb	r3, [r5, #11]
    if (isFile()) {
    3320:	7823      	ldrb	r3, [r4, #0]
    3322:	071b      	lsls	r3, r3, #28
    3324:	d501      	bpl.n	332a <FatFile::sync() [clone .part.0]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    3326:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    3328:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    332a:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    332c:	4915      	ldr	r1, [pc, #84]	; (3384 <FatFile::sync() [clone .part.0]+0xb8>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    332e:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    3330:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    3332:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    3334:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    3336:	b166      	cbz	r6, 3352 <FatFile::sync() [clone .part.0]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    3338:	f10d 0203 	add.w	r2, sp, #3
    333c:	f10d 0106 	add.w	r1, sp, #6
    3340:	a801      	add	r0, sp, #4
    3342:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    3344:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3348:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    334c:	832b      	strh	r3, [r5, #24]
    334e:	826b      	strh	r3, [r5, #18]
    3350:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    3352:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    3354:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    3356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    335a:	f105 0024 	add.w	r0, r5, #36	; 0x24
    335e:	70a3      	strb	r3, [r4, #2]
    3360:	f003 fe92 	bl	7088 <FsCache::sync()>
    3364:	2800      	cmp	r0, #0
    3366:	d0bf      	beq.n	32e8 <FatFile::sync() [clone .part.0]+0x1c>
    3368:	f505 700d 	add.w	r0, r5, #564	; 0x234
    336c:	f003 fe8c 	bl	7088 <FsCache::sync()>
    3370:	2800      	cmp	r0, #0
    3372:	d0b9      	beq.n	32e8 <FatFile::sync() [clone .part.0]+0x1c>
    3374:	6828      	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    3376:	6803      	ldr	r3, [r0, #0]
    3378:	69db      	ldr	r3, [r3, #28]
    337a:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    337c:	2800      	cmp	r0, #0
    337e:	d0b3      	beq.n	32e8 <FatFile::sync() [clone .part.0]+0x1c>
    3380:	e7b7      	b.n	32f2 <FatFile::sync() [clone .part.0]+0x26>
    3382:	bf00      	nop
    3384:	2001e06c 	.word	0x2001e06c

00003388 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    3388:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    338a:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    338c:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    3390:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    3392:	6880      	ldr	r0, [r0, #8]
    3394:	4629      	mov	r1, r5
    3396:	f001 f941 	bl	461c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    339a:	b150      	cbz	r0, 33b2 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    339c:	b155      	cbz	r5, 33b4 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    339e:	6923      	ldr	r3, [r4, #16]
    33a0:	3501      	adds	r5, #1
    33a2:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    33a4:	78a3      	ldrb	r3, [r4, #2]
    33a6:	bf18      	it	ne
    33a8:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    33ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    33b0:	70a3      	strb	r3, [r4, #2]
}
    33b2:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    33b4:	78a3      	ldrb	r3, [r4, #2]
    33b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    33ba:	e7f7      	b.n	33ac <FatFile::addCluster()+0x24>

000033bc <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    33bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    33be:	7804      	ldrb	r4, [r0, #0]
    33c0:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    33c4:	d104      	bne.n	33d0 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL * 4095) {
    33c6:	4b1a      	ldr	r3, [pc, #104]	; (3430 <FatFile::addDirCluster()+0x74>)
    33c8:	4605      	mov	r5, r0
    33ca:	6942      	ldr	r2, [r0, #20]
    33cc:	429a      	cmp	r2, r3
    33ce:	d302      	bcc.n	33d6 <FatFile::addDirCluster()+0x1a>
  return false;
    33d0:	2700      	movs	r7, #0
}
    33d2:	4638      	mov	r0, r7
    33d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    33d6:	f7ff ffd7 	bl	3388 <FatFile::addCluster()>
    33da:	4607      	mov	r7, r0
    33dc:	2800      	cmp	r0, #0
    33de:	d0f7      	beq.n	33d0 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    33e0:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    33e2:	692e      	ldr	r6, [r5, #16]
    33e4:	7982      	ldrb	r2, [r0, #6]
    33e6:	3e02      	subs	r6, #2
    33e8:	6941      	ldr	r1, [r0, #20]
    33ea:	4096      	lsls	r6, r2
    33ec:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    33ee:	7901      	ldrb	r1, [r0, #4]
    33f0:	b1a9      	cbz	r1, 341e <FatFile::addDirCluster()+0x62>
    33f2:	4621      	mov	r1, r4
    33f4:	e006      	b.n	3404 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    33f6:	f008 facd 	bl	b994 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    33fa:	68a8      	ldr	r0, [r5, #8]
    33fc:	b2e1      	uxtb	r1, r4
    33fe:	7902      	ldrb	r2, [r0, #4]
    3400:	428a      	cmp	r2, r1
    3402:	d90b      	bls.n	341c <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    3404:	4431      	add	r1, r6
    3406:	2205      	movs	r2, #5
    3408:	3024      	adds	r0, #36	; 0x24
    340a:	3401      	adds	r4, #1
    340c:	f003 fe68 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    3410:	f44f 7200 	mov.w	r2, #512	; 0x200
    3414:	2100      	movs	r1, #0
    if (!pc) {
    3416:	2800      	cmp	r0, #0
    3418:	d1ed      	bne.n	33f6 <FatFile::addDirCluster()+0x3a>
    341a:	e7d9      	b.n	33d0 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    341c:	7982      	ldrb	r2, [r0, #6]
    341e:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    3422:	6969      	ldr	r1, [r5, #20]
}
    3424:	4638      	mov	r0, r7
    3426:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    3428:	fa11 f383 	uxtah	r3, r1, r3
    342c:	616b      	str	r3, [r5, #20]
}
    342e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3430:	001ffe00 	.word	0x001ffe00

00003434 <FatFile::close()>:
bool FatFile::close() {
    3434:	b510      	push	{r4, lr}
  if (!isOpen()) {
    3436:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    3438:	4604      	mov	r4, r0
  if (!isOpen()) {
    343a:	b12b      	cbz	r3, 3448 <FatFile::close()+0x14>
    343c:	f7ff ff46 	bl	32cc <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    3440:	2300      	movs	r3, #0
    3442:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3444:	70a3      	strb	r3, [r4, #2]
}
    3446:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    3448:	2300      	movs	r3, #0
    return true;
    344a:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    344c:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    344e:	70a3      	strb	r3, [r4, #2]
}
    3450:	bd10      	pop	{r4, pc}
    3452:	bf00      	nop

00003454 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    3454:	780b      	ldrb	r3, [r1, #0]
    3456:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    345a:	d101      	bne.n	3460 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    345c:	2000      	movs	r0, #0
    345e:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    3460:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    3462:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    3466:	b089      	sub	sp, #36	; 0x24
    3468:	460d      	mov	r5, r1
    346a:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    346c:	f000 fe70 	bl	4150 <FatFile::open(FatFile*, FatLfn_t*, int)>
    3470:	b138      	cbz	r0, 3482 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    3472:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    3474:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    3476:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    3478:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    347a:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    347c:	f7ff ff9e 	bl	33bc <FatFile::addDirCluster()>
    3480:	b910      	cbnz	r0, 3488 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    3482:	2000      	movs	r0, #0
    3484:	b009      	add	sp, #36	; 0x24
    3486:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    3488:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    348a:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    348c:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    348e:	b16b      	cbz	r3, 34ac <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    3490:	6963      	ldr	r3, [r4, #20]
    3492:	b133      	cbz	r3, 34a2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3494:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    3496:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3498:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    349c:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    34a0:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    34a2:	4620      	mov	r0, r4
    34a4:	f7ff ff12 	bl	32cc <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    34a8:	2800      	cmp	r0, #0
    34aa:	d0ea      	beq.n	3482 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    return m_cache.prepare(sector, options);
    34ac:	68a0      	ldr	r0, [r4, #8]
    34ae:	2201      	movs	r2, #1
    34b0:	69a1      	ldr	r1, [r4, #24]
    34b2:	3024      	adds	r0, #36	; 0x24
    34b4:	f003 fe14 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    34b8:	2800      	cmp	r0, #0
    34ba:	d0e2      	beq.n	3482 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    34bc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FS_ATTRIB_DIRECTORY;
    34c0:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    34c2:	f00c 0c0f 	and.w	ip, ip, #15
    34c6:	ea4f 134c 	mov.w	r3, ip, lsl #5
    34ca:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FS_ATTRIB_DIRECTORY;
    34ce:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    34d2:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    34d4:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    34d6:	6a23      	ldr	r3, [r4, #32]
    34d8:	f897 e006 	ldrb.w	lr, [r7, #6]
    34dc:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    34de:	f8dc 1004 	ldr.w	r1, [ip, #4]
    34e2:	f8dc 2008 	ldr.w	r2, [ip, #8]
    34e6:	f8dc 300c 	ldr.w	r3, [ip, #12]
    34ea:	fa06 f60e 	lsl.w	r6, r6, lr
    34ee:	46ee      	mov	lr, sp
    34f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    34f4:	f8dc 0010 	ldr.w	r0, [ip, #16]
    34f8:	f8dc 1014 	ldr.w	r1, [ip, #20]
    34fc:	f8dc 2018 	ldr.w	r2, [ip, #24]
    3500:	f8dc 301c 	ldr.w	r3, [ip, #28]
    3504:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    3508:	697b      	ldr	r3, [r7, #20]
    350a:	f107 0024 	add.w	r0, r7, #36	; 0x24
    350e:	2201      	movs	r2, #1
    3510:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    3512:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    3516:	f8cd 3001 	str.w	r3, [sp, #1]
    351a:	f8cd 3005 	str.w	r3, [sp, #5]
    351e:	f8ad 3009 	strh.w	r3, [sp, #9]
    3522:	f003 fddd 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3526:	4684      	mov	ip, r0
    3528:	2800      	cmp	r0, #0
    352a:	d0aa      	beq.n	3482 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    352c:	272e      	movs	r7, #46	; 0x2e
    352e:	46ee      	mov	lr, sp
    3530:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    3534:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    3536:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    353a:	f8cc 0000 	str.w	r0, [ip]
    353e:	f8cc 1004 	str.w	r1, [ip, #4]
    3542:	f8cc 2008 	str.w	r2, [ip, #8]
    3546:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    354a:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    354e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3552:	f8cc 0010 	str.w	r0, [ip, #16]
    3556:	f8cc 1014 	str.w	r1, [ip, #20]
    355a:	f8cc 2018 	str.w	r2, [ip, #24]
    355e:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    3562:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    3564:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    3566:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    356a:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    356e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3570:	f8cc 0020 	str.w	r0, [ip, #32]
    3574:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    3578:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    357c:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    3580:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3582:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    3586:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    358a:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    358e:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    3592:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3594:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3598:	f003 fd76 	bl	7088 <FsCache::sync()>
    359c:	2800      	cmp	r0, #0
    359e:	f43f af70 	beq.w	3482 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    35a2:	f504 700d 	add.w	r0, r4, #564	; 0x234
    35a6:	f003 fd6f 	bl	7088 <FsCache::sync()>
    35aa:	2800      	cmp	r0, #0
    35ac:	f43f af69 	beq.w	3482 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    35b0:	6820      	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    35b2:	6803      	ldr	r3, [r0, #0]
    35b4:	69db      	ldr	r3, [r3, #28]
}
    35b6:	b009      	add	sp, #36	; 0x24
    35b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    35bc:	4718      	bx	r3
    35be:	bf00      	nop

000035c0 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    35c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35c4:	2600      	movs	r6, #0
    35c6:	b094      	sub	sp, #80	; 0x50
    35c8:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    35ca:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    35cc:	9201      	str	r2, [sp, #4]
    35ce:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    35d0:	2b00      	cmp	r3, #0
    35d2:	d141      	bne.n	3658 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    35d4:	780b      	ldrb	r3, [r1, #0]
    35d6:	460d      	mov	r5, r1
    35d8:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    35dc:	d03c      	beq.n	3658 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
  if (isDirSeparator(*path)) {
    35de:	7813      	ldrb	r3, [r2, #0]
    35e0:	4604      	mov	r4, r0
    35e2:	4616      	mov	r6, r2
    35e4:	2b2f      	cmp	r3, #47	; 0x2f
    35e6:	d03b      	beq.n	3660 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!open(parent, &fname, O_RDONLY)) {
    35e8:	2700      	movs	r7, #0
    35ea:	e028      	b.n	363e <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
    if (!*path) {
    35ec:	9e01      	ldr	r6, [sp, #4]
    35ee:	7836      	ldrb	r6, [r6, #0]
    35f0:	2e00      	cmp	r6, #0
    35f2:	d04e      	beq.n	3692 <FatFile::mkdir(FatFile*, char const*, bool)+0xd2>
    if (!open(parent, &fname, O_RDONLY)) {
    35f4:	f000 fdac 	bl	4150 <FatFile::open(FatFile*, FatLfn_t*, int)>
    35f8:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    35fa:	aa03      	add	r2, sp, #12
    35fc:	4629      	mov	r1, r5
    35fe:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    3600:	b92b      	cbnz	r3, 360e <FatFile::mkdir(FatFile*, char const*, bool)+0x4e>
      if (!pFlag || !mkdir(parent, &fname)) {
    3602:	f1b8 0f00 	cmp.w	r8, #0
    3606:	d027      	beq.n	3658 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    3608:	f7ff ff24 	bl	3454 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    360c:	b320      	cbz	r0, 3658 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    tmpDir = *this;
    360e:	46a6      	mov	lr, r4
    3610:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    3614:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3618:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    361c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3620:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3624:	f8de 5000 	ldr.w	r5, [lr]
    3628:	4620      	mov	r0, r4
  if (!isOpen()) {
    362a:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    362c:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    3630:	b10b      	cbz	r3, 3636 <FatFile::mkdir(FatFile*, char const*, bool)+0x76>
    3632:	f7ff fe4b 	bl	32cc <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    3636:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    3638:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    363a:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    363c:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    363e:	4631      	mov	r1, r6
    3640:	ab01      	add	r3, sp, #4
    3642:	aa03      	add	r2, sp, #12
    3644:	4620      	mov	r0, r4
    3646:	f000 fed3 	bl	43f0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    364a:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    364c:	aa03      	add	r2, sp, #12
    364e:	4629      	mov	r1, r5
    3650:	2300      	movs	r3, #0
    3652:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    3654:	2e00      	cmp	r6, #0
    3656:	d1c9      	bne.n	35ec <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  switch (vol->fatType()) {
    3658:	2000      	movs	r0, #0
}
    365a:	b014      	add	sp, #80	; 0x50
    365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    3660:	3601      	adds	r6, #1
    3662:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    3664:	7833      	ldrb	r3, [r6, #0]
    3666:	2b2f      	cmp	r3, #47	; 0x2f
    3668:	d0fa      	beq.n	3660 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!tmpDir.openRoot(parent->m_vol)) {
    366a:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    366c:	2224      	movs	r2, #36	; 0x24
    366e:	2100      	movs	r1, #0
    3670:	a80b      	add	r0, sp, #44	; 0x2c
    3672:	f008 f98f 	bl	b994 <memset>
  m_vol = vol;
    3676:	950d      	str	r5, [sp, #52]	; 0x34
  uint8_t fatType() const { return m_fatType; }
    3678:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    367a:	2b10      	cmp	r3, #16
    367c:	d00f      	beq.n	369e <FatFile::mkdir(FatFile*, char const*, bool)+0xde>
    367e:	2b20      	cmp	r3, #32
    3680:	d1ea      	bne.n	3658 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    3682:	2380      	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    3684:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    3688:	2301      	movs	r3, #1
    parent = &tmpDir;
    368a:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    368c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    3690:	e7aa      	b.n	35e8 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
  return mkdir(parent, &fname);
    3692:	aa03      	add	r2, sp, #12
    3694:	f7ff fede 	bl	3454 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    3698:	b014      	add	sp, #80	; 0x50
    369a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    369e:	2340      	movs	r3, #64	; 0x40
    36a0:	e7f0      	b.n	3684 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    36a2:	bf00      	nop

000036a4 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    36a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36a8:	2500      	movs	r5, #0
    36aa:	b094      	sub	sp, #80	; 0x50
    36ac:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    36ae:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    36b0:	9201      	str	r2, [sp, #4]
    36b2:	950b      	str	r5, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
    36b4:	2b00      	cmp	r3, #0
    36b6:	d137      	bne.n	3728 <FatFile::open(FatFile*, char const*, int)+0x84>
    36b8:	780b      	ldrb	r3, [r1, #0]
    36ba:	460e      	mov	r6, r1
    36bc:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    36c0:	d032      	beq.n	3728 <FatFile::open(FatFile*, char const*, int)+0x84>
  if (isDirSeparator(*path)) {
    36c2:	7813      	ldrb	r3, [r2, #0]
    36c4:	4604      	mov	r4, r0
    36c6:	4615      	mov	r5, r2
    36c8:	2b2f      	cmp	r3, #47	; 0x2f
    36ca:	d031      	beq.n	3730 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
    36cc:	2700      	movs	r7, #0
    36ce:	e01e      	b.n	370e <FatFile::open(FatFile*, char const*, int)+0x6a>
    if (*path == 0) {
    36d0:	9d01      	ldr	r5, [sp, #4]
    36d2:	782d      	ldrb	r5, [r5, #0]
    36d4:	2d00      	cmp	r5, #0
    36d6:	d042      	beq.n	375e <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    36d8:	f000 fd3a 	bl	4150 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    36dc:	46a6      	mov	lr, r4
    36de:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    if (!open(dirFile, &fname, O_RDONLY)) {
    36e2:	b308      	cbz	r0, 3728 <FatFile::open(FatFile*, char const*, int)+0x84>
    dirFile = &tmpDir;
    36e4:	4666      	mov	r6, ip
  if (!isOpen()) {
    36e6:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    36e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    36ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    36f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    36f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    36f8:	f8de 3000 	ldr.w	r3, [lr]
    36fc:	4620      	mov	r0, r4
    36fe:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    3702:	b10d      	cbz	r5, 3708 <FatFile::open(FatFile*, char const*, int)+0x64>
    3704:	f7ff fde2 	bl	32cc <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    3708:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    370a:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    370c:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    370e:	4629      	mov	r1, r5
    3710:	ab01      	add	r3, sp, #4
    3712:	aa03      	add	r2, sp, #12
    3714:	4620      	mov	r0, r4
    3716:	f000 fe6b 	bl	43f0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    371a:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    371c:	aa03      	add	r2, sp, #12
    371e:	4631      	mov	r1, r6
    3720:	2300      	movs	r3, #0
    3722:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    3724:	2d00      	cmp	r5, #0
    3726:	d1d3      	bne.n	36d0 <FatFile::open(FatFile*, char const*, int)+0x2c>
  return false;
    3728:	2000      	movs	r0, #0
}
    372a:	b014      	add	sp, #80	; 0x50
    372c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    3730:	3501      	adds	r5, #1
    3732:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    3734:	7829      	ldrb	r1, [r5, #0]
    3736:	292f      	cmp	r1, #47	; 0x2f
    3738:	d0fa      	beq.n	3730 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (*path == 0) {
    373a:	b9b9      	cbnz	r1, 376c <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    373c:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    373e:	2224      	movs	r2, #36	; 0x24
    3740:	4620      	mov	r0, r4
    3742:	f008 f927 	bl	b994 <memset>
  m_vol = vol;
    3746:	60a5      	str	r5, [r4, #8]
    3748:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    374a:	2b10      	cmp	r3, #16
    374c:	d024      	beq.n	3798 <FatFile::open(FatFile*, char const*, int)+0xf4>
    374e:	2b20      	cmp	r3, #32
    3750:	d1ea      	bne.n	3728 <FatFile::open(FatFile*, char const*, int)+0x84>
    3752:	2280      	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    3754:	2301      	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    3756:	7022      	strb	r2, [r4, #0]
  return true;
    3758:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    375a:	70a3      	strb	r3, [r4, #2]
  return true;
    375c:	e7e5      	b.n	372a <FatFile::open(FatFile*, char const*, int)+0x86>
  return open(dirFile, &fname, oflag);
    375e:	4643      	mov	r3, r8
    3760:	aa03      	add	r2, sp, #12
    3762:	f000 fcf5 	bl	4150 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    3766:	b014      	add	sp, #80	; 0x50
    3768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    376c:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    376e:	2224      	movs	r2, #36	; 0x24
    3770:	2100      	movs	r1, #0
    3772:	a80b      	add	r0, sp, #44	; 0x2c
    3774:	f008 f90e 	bl	b994 <memset>
  m_vol = vol;
    3778:	960d      	str	r6, [sp, #52]	; 0x34
    377a:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    377c:	2b10      	cmp	r3, #16
    377e:	d009      	beq.n	3794 <FatFile::open(FatFile*, char const*, int)+0xf0>
    3780:	2b20      	cmp	r3, #32
    3782:	d1d1      	bne.n	3728 <FatFile::open(FatFile*, char const*, int)+0x84>
    3784:	2380      	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    3786:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    378a:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    378c:	ae0b      	add	r6, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    378e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    3792:	e79b      	b.n	36cc <FatFile::open(FatFile*, char const*, int)+0x28>
  switch (vol->fatType()) {
    3794:	2340      	movs	r3, #64	; 0x40
    3796:	e7f6      	b.n	3786 <FatFile::open(FatFile*, char const*, int)+0xe2>
    3798:	2240      	movs	r2, #64	; 0x40
    379a:	e7db      	b.n	3754 <FatFile::open(FatFile*, char const*, int)+0xb0>

0000379c <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    379c:	b119      	cbz	r1, 37a6 <FatFile::open(FatVolume*, char const*, int)+0xa>
    379e:	f201 4144 	addw	r1, r1, #1092	; 0x444
    37a2:	f7ff bf7f 	b.w	36a4 <FatFile::open(FatFile*, char const*, int)>
}
    37a6:	4608      	mov	r0, r1
    37a8:	4770      	bx	lr
    37aa:	bf00      	nop

000037ac <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    37ac:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    37ae:	7805      	ldrb	r5, [r0, #0]
    37b0:	b10d      	cbz	r5, 37b6 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    37b2:	2000      	movs	r0, #0
}
    37b4:	bd70      	pop	{r4, r5, r6, pc}
    37b6:	460e      	mov	r6, r1
    37b8:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    37ba:	2224      	movs	r2, #36	; 0x24
    37bc:	4629      	mov	r1, r5
    37be:	f008 f8e9 	bl	b994 <memset>
  m_vol = vol;
    37c2:	60a6      	str	r6, [r4, #8]
    37c4:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    37c6:	2b10      	cmp	r3, #16
    37c8:	d009      	beq.n	37de <FatFile::openRoot(FatVolume*)+0x32>
    37ca:	2b20      	cmp	r3, #32
    37cc:	d105      	bne.n	37da <FatFile::openRoot(FatVolume*)+0x2e>
    37ce:	2280      	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    37d0:	2301      	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    37d2:	7022      	strb	r2, [r4, #0]
  return true;
    37d4:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    37d6:	70a3      	strb	r3, [r4, #2]
}
    37d8:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    37da:	4628      	mov	r0, r5
}
    37dc:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    37de:	2240      	movs	r2, #64	; 0x40
    37e0:	e7f6      	b.n	37d0 <FatFile::openRoot(FatVolume*)+0x24>
    37e2:	bf00      	nop

000037e4 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    37e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37e8:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const { return m_lfnOrd; }
  /** \return True if this is an open file/directory. */
  bool isOpen() const { return m_attributes; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    37ec:	7883      	ldrb	r3, [r0, #2]
    37ee:	b083      	sub	sp, #12
    37f0:	4605      	mov	r5, r0
  if (!isReadable()) {
    37f2:	07df      	lsls	r7, r3, #31
    37f4:	f140 808c 	bpl.w	3910 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
    37f8:	4688      	mov	r8, r1
    37fa:	7801      	ldrb	r1, [r0, #0]
    37fc:	4692      	mov	sl, r2
  if (isFile()) {
    37fe:	070e      	lsls	r6, r1, #28
    3800:	f100 8091 	bmi.w	3926 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    3804:	064c      	lsls	r4, r1, #25
    3806:	d508      	bpl.n	381a <FatFile::read(void*, unsigned int)+0x36>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    3808:	6883      	ldr	r3, [r0, #8]
    380a:	891a      	ldrh	r2, [r3, #8]
    380c:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    380e:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    3812:	b29b      	uxth	r3, r3
    3814:	459a      	cmp	sl, r3
    3816:	bf28      	it	cs
    3818:	469a      	movcs	sl, r3
  while (toRead) {
    381a:	f1ba 0f00 	cmp.w	sl, #0
    381e:	f000 80af 	beq.w	3980 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3822:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3824:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    3828:	0648      	lsls	r0, r1, #25
    uint32_t tmp32 = m_fileSize - m_curPosition;
    382a:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    382c:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3830:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    3834:	68af      	ldr	r7, [r5, #8]
    3836:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    383a:	d53d      	bpl.n	38b8 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart() +
    383c:	6a39      	ldr	r1, [r7, #32]
    383e:	eb01 2152 	add.w	r1, r1, r2, lsr #9
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    3842:	f1bb 0f00 	cmp.w	fp, #0
    3846:	d151      	bne.n	38ec <FatFile::read(void*, unsigned int)+0x108>
    3848:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    384c:	d34e      	bcc.n	38ec <FatFile::read(void*, unsigned int)+0x108>
  uint32_t sector() { return m_sector; }
    384e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3850:	4291      	cmp	r1, r2
    3852:	d04b      	beq.n	38ec <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    3854:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    3858:	f0c0 8082 	bcc.w	3960 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    385c:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    385e:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    3860:	0640      	lsls	r0, r0, #25
    3862:	d405      	bmi.n	3870 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    3864:	7938      	ldrb	r0, [r7, #4]
    3866:	eba0 0009 	sub.w	r0, r0, r9
    386a:	4283      	cmp	r3, r0
    386c:	bf28      	it	cs
    386e:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    3870:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    3872:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3876:	d80c      	bhi.n	3892 <FatFile::read(void*, unsigned int)+0xae>
    3878:	18c8      	adds	r0, r1, r3
    387a:	4282      	cmp	r2, r0
    387c:	d209      	bcs.n	3892 <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    387e:	f107 0024 	add.w	r0, r7, #36	; 0x24
    3882:	e9cd 1300 	strd	r1, r3, [sp]
    3886:	f003 fbff 	bl	7088 <FsCache::sync()>
    388a:	e9dd 1300 	ldrd	r1, r3, [sp]
    388e:	2800      	cmp	r0, #0
    3890:	d03e      	beq.n	3910 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    3892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3894:	6802      	ldr	r2, [r0, #0]
    3896:	6957      	ldr	r7, [r2, #20]
    3898:	4642      	mov	r2, r8
    389a:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    389c:	2800      	cmp	r0, #0
    389e:	d037      	beq.n	3910 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    38a0:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    38a2:	1b36      	subs	r6, r6, r4
    dst += n;
    38a4:	44a0      	add	r8, r4
    m_curPosition += n;
    38a6:	4422      	add	r2, r4
    38a8:	616a      	str	r2, [r5, #20]
  while (toRead) {
    38aa:	d069      	beq.n	3980 <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const { return m_attributes & FILE_ATTR_ROOT32; }
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
    38ac:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    38ae:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    38b2:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    38b4:	0648      	lsls	r0, r1, #25
    38b6:	d4c1      	bmi.n	383c <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    38b8:	f897 9005 	ldrb.w	r9, [r7, #5]
    38bc:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    38c0:	f1bb 0f00 	cmp.w	fp, #0
    38c4:	d136      	bne.n	3934 <FatFile::read(void*, unsigned int)+0x150>
    38c6:	f1b9 0f00 	cmp.w	r9, #0
    38ca:	d133      	bne.n	3934 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    38cc:	2a00      	cmp	r2, #0
    38ce:	d133      	bne.n	3938 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    38d0:	060a      	lsls	r2, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    38d2:	bf4c      	ite	mi
    38d4:	6a3a      	ldrmi	r2, [r7, #32]
    38d6:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    38d8:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    38da:	3a02      	subs	r2, #2
    38dc:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    38de:	6979      	ldr	r1, [r7, #20]
    38e0:	4082      	lsls	r2, r0
    38e2:	4449      	add	r1, r9
    38e4:	4411      	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    38e6:	f1bb 0f00 	cmp.w	fp, #0
    38ea:	d0ad      	beq.n	3848 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    38ec:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    38f0:	2200      	movs	r2, #0
    38f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
    38f6:	42b4      	cmp	r4, r6
    38f8:	bf28      	it	cs
    38fa:	4634      	movcs	r4, r6
    38fc:	f003 fbf0 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    3900:	b130      	cbz	r0, 3910 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    3902:	eb00 010b 	add.w	r1, r0, fp
    3906:	4622      	mov	r2, r4
    3908:	4640      	mov	r0, r8
    390a:	f004 fb77 	bl	7ffc <memcpy>
    390e:	e7c7      	b.n	38a0 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    3910:	786b      	ldrb	r3, [r5, #1]
  return -1;
    3912:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    3916:	f043 0302 	orr.w	r3, r3, #2
    391a:	706b      	strb	r3, [r5, #1]
}
    391c:	b003      	add	sp, #12
    391e:	ecbd 8b02 	vpop	{d8}
    3922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3926:	69c3      	ldr	r3, [r0, #28]
    3928:	6942      	ldr	r2, [r0, #20]
    392a:	1a9b      	subs	r3, r3, r2
    392c:	459a      	cmp	sl, r3
    392e:	bf28      	it	cs
    3930:	469a      	movcs	sl, r3
    3932:	e772      	b.n	381a <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    3934:	692a      	ldr	r2, [r5, #16]
    3936:	e7d0      	b.n	38da <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    3938:	070b      	lsls	r3, r1, #28
    393a:	d505      	bpl.n	3948 <FatFile::read(void*, unsigned int)+0x164>
    393c:	78aa      	ldrb	r2, [r5, #2]
    393e:	0654      	lsls	r4, r2, #25
    3940:	d502      	bpl.n	3948 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    3942:	692a      	ldr	r2, [r5, #16]
    3944:	3201      	adds	r2, #1
    3946:	e7c7      	b.n	38d8 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3948:	ee18 2a10 	vmov	r2, s16
    394c:	4638      	mov	r0, r7
    394e:	6929      	ldr	r1, [r5, #16]
    3950:	f000 fe1e 	bl	4590 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3954:	2800      	cmp	r0, #0
    3956:	dbdb      	blt.n	3910 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    3958:	d00c      	beq.n	3974 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    395a:	68af      	ldr	r7, [r5, #8]
    395c:	692a      	ldr	r2, [r5, #16]
    395e:	e7bc      	b.n	38da <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    3960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3962:	4642      	mov	r2, r8
    3964:	6803      	ldr	r3, [r0, #0]
    3966:	691b      	ldr	r3, [r3, #16]
    3968:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    396a:	2800      	cmp	r0, #0
    396c:	d0d0      	beq.n	3910 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    396e:	f44f 7400 	mov.w	r4, #512	; 0x200
    3972:	e795      	b.n	38a0 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    3974:	782b      	ldrb	r3, [r5, #0]
    3976:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    397a:	d0c9      	beq.n	3910 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    397c:	ebaa 0a06 	sub.w	sl, sl, r6
    3980:	4650      	mov	r0, sl
}
    3982:	b003      	add	sp, #12
    3984:	ecbd 8b02 	vpop	{d8}
    3988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000398c <FatFile::peek()>:
int FatFile::peek() {
    398c:	b570      	push	{r4, r5, r6, lr}
    398e:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3990:	2201      	movs	r2, #1
    3992:	4604      	mov	r4, r0
    3994:	f10d 0107 	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    3998:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    399c:	f7ff ff22 	bl	37e4 <FatFile::read(void*, unsigned int)>
    39a0:	2801      	cmp	r0, #1
    39a2:	bf0c      	ite	eq
    39a4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    39a8:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    39ac:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    39b0:	b002      	add	sp, #8
    39b2:	bd70      	pop	{r4, r5, r6, pc}

000039b4 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    39b4:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    39b6:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    39ba:	b530      	push	{r4, r5, lr}
    39bc:	4604      	mov	r4, r0
    39be:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    39c0:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    39c4:	d009      	beq.n	39da <FatFile::readDirCache(bool)+0x26>
    39c6:	2901      	cmp	r1, #1
    39c8:	d107      	bne.n	39da <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    39ca:	3320      	adds	r3, #32
    39cc:	6143      	str	r3, [r0, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    39ce:	68a0      	ldr	r0, [r4, #8]
    39d0:	3034      	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    39d2:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    39d6:	b003      	add	sp, #12
    39d8:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    39da:	2201      	movs	r2, #1
    39dc:	f10d 0107 	add.w	r1, sp, #7
    39e0:	4620      	mov	r0, r4
    39e2:	f7ff feff 	bl	37e4 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    39e6:	b240      	sxtb	r0, r0
    39e8:	2801      	cmp	r0, #1
    39ea:	d103      	bne.n	39f4 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    39ec:	6963      	ldr	r3, [r4, #20]
    39ee:	331f      	adds	r3, #31
    39f0:	6163      	str	r3, [r4, #20]
    39f2:	e7ec      	b.n	39ce <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    39f4:	2000      	movs	r0, #0
    39f6:	e7ee      	b.n	39d6 <FatFile::readDirCache(bool)+0x22>

000039f8 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    39f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const { return m_attributes; }
    39fc:	7803      	ldrb	r3, [r0, #0]
    39fe:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    3a00:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    3a02:	2b00      	cmp	r3, #0
    3a04:	d039      	beq.n	3a7a <FatFile::seekSet(unsigned long)+0x82>
    3a06:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    3a08:	6941      	ldr	r1, [r0, #20]
    3a0a:	42a9      	cmp	r1, r5
    3a0c:	d042      	beq.n	3a94 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    3a0e:	2d00      	cmp	r5, #0
    3a10:	d037      	beq.n	3a82 <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    3a12:	0718      	lsls	r0, r3, #28
    3a14:	d52a      	bpl.n	3a6c <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    3a16:	69e2      	ldr	r2, [r4, #28]
    3a18:	42aa      	cmp	r2, r5
    3a1a:	d32e      	bcc.n	3a7a <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3a1c:	f8d4 c008 	ldr.w	ip, [r4, #8]
    3a20:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    3a22:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    3a24:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    3a28:	f012 0f40 	tst.w	r2, #64	; 0x40
    3a2c:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3a30:	b2c0      	uxtb	r0, r0
    3a32:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    3a36:	d130      	bne.n	3a9a <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    3a38:	1e4a      	subs	r2, r1, #1
    3a3a:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3a3c:	b109      	cbz	r1, 3a42 <FatFile::seekSet(unsigned long)+0x4a>
    3a3e:	4296      	cmp	r6, r2
    3a40:	d22f      	bcs.n	3aa2 <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    3a42:	061b      	lsls	r3, r3, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    3a44:	bf4c      	ite	mi
    3a46:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    3a4a:	6a23      	ldrpl	r3, [r4, #32]
    3a4c:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3a4e:	f104 0810 	add.w	r8, r4, #16
    3a52:	e006      	b.n	3a62 <FatFile::seekSet(unsigned long)+0x6a>
    3a54:	6921      	ldr	r1, [r4, #16]
    3a56:	3e01      	subs	r6, #1
    3a58:	68a0      	ldr	r0, [r4, #8]
    3a5a:	f000 fd99 	bl	4590 <FatPartition::fatGet(unsigned long, unsigned long*)>
    3a5e:	2800      	cmp	r0, #0
    3a60:	dd0b      	ble.n	3a7a <FatFile::seekSet(unsigned long)+0x82>
    3a62:	4642      	mov	r2, r8
  while (nNew--) {
    3a64:	2e00      	cmp	r6, #0
    3a66:	d1f5      	bne.n	3a54 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3a68:	78a2      	ldrb	r2, [r4, #2]
    3a6a:	e00c      	b.n	3a86 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    3a6c:	065a      	lsls	r2, r3, #25
    3a6e:	d5d5      	bpl.n	3a1c <FatFile::seekSet(unsigned long)+0x24>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
    3a70:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    3a72:	891b      	ldrh	r3, [r3, #8]
    3a74:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    3a78:	d9f6      	bls.n	3a68 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    3a7a:	2000      	movs	r0, #0
  m_curCluster = tmp;
    3a7c:	6127      	str	r7, [r4, #16]
}
    3a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a82:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    3a84:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3a86:	f022 0220 	bic.w	r2, r2, #32
  return true;
    3a8a:	2001      	movs	r0, #1
  m_curPosition = pos;
    3a8c:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3a8e:	70a2      	strb	r2, [r4, #2]
}
    3a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    3a94:	2001      	movs	r0, #1
}
    3a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    3a9a:	6a23      	ldr	r3, [r4, #32]
    3a9c:	4433      	add	r3, r6
    3a9e:	6123      	str	r3, [r4, #16]
    goto done;
    3aa0:	e7f1      	b.n	3a86 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    3aa2:	1ab6      	subs	r6, r6, r2
    3aa4:	e7d3      	b.n	3a4e <FatFile::seekSet(unsigned long)+0x56>
    3aa6:	bf00      	nop

00003aa8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    3aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3aac:	460e      	mov	r6, r1
    3aae:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    3ab0:	2100      	movs	r1, #0
    3ab2:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    3ab4:	4604      	mov	r4, r0
    3ab6:	4698      	mov	r8, r3
    3ab8:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    3abc:	f007 ff6a 	bl	b994 <memset>
  m_vol = dirFile->m_vol;
    3ac0:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    3ac2:	6a33      	ldr	r3, [r6, #32]
    3ac4:	f100 0234 	add.w	r2, r0, #52	; 0x34
  m_dirIndex = dirIndex;
    3ac8:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    3aca:	f005 050f 	and.w	r5, r5, #15
    3ace:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    3ad2:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFatFile(const DirFat_t* dir) {
  return (dir->attributes & (FS_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFatFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    3ad6:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
    3ad8:	070b      	lsls	r3, r1, #28
    3ada:	d411      	bmi.n	3b00 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    3adc:	f001 0137 	and.w	r1, r1, #55	; 0x37
    3ae0:	7021      	strb	r1, [r4, #0]
  if (isFatFile(dir)) {
    3ae2:	7ad3      	ldrb	r3, [r2, #11]
    3ae4:	f013 0f18 	tst.w	r3, #24
    3ae8:	d102      	bne.n	3af0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    3aea:	f041 0108 	orr.w	r1, r1, #8
    3aee:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    3af0:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    3af4:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    3af6:	2b01      	cmp	r3, #1
    3af8:	d03c      	beq.n	3b74 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xcc>
    3afa:	2b02      	cmp	r3, #2
    3afc:	d006      	beq.n	3b0c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    3afe:	b313      	cbz	r3, 3b46 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
  m_attributes = FILE_ATTR_CLOSED;
    3b00:	2300      	movs	r3, #0
  return false;
    3b02:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    3b04:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3b06:	70a3      	strb	r3, [r4, #2]
}
    3b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3b0c:	2303      	movs	r3, #3
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    3b0e:	7821      	ldrb	r1, [r4, #0]
      m_flags = FILE_FLAG_WRITE;
    3b10:	70a3      	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    3b12:	06cd      	lsls	r5, r1, #27
    3b14:	d4f4      	bmi.n	3b00 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    3b16:	07ce      	lsls	r6, r1, #31
    3b18:	d4f2      	bmi.n	3b00 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3b1a:	f041 0120 	orr.w	r1, r1, #32
  if (oflag & O_TRUNC) {
    3b1e:	f418 6f80 	tst.w	r8, #1024	; 0x400
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3b22:	7021      	strb	r1, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3b24:	f008 0108 	and.w	r1, r8, #8
    3b28:	ea43 0301 	orr.w	r3, r3, r1
    3b2c:	70a3      	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
    3b2e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3b30:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3b32:	61a1      	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    3b34:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3b36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    3b3a:	d012      	beq.n	3b62 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xba>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3b3c:	bb19      	cbnz	r1, 3b86 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xde>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3b3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3b42:	70a3      	strb	r3, [r4, #2]
    3b44:	e010      	b.n	3b68 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
      if (oflag & O_TRUNC) {
    3b46:	f418 6f80 	tst.w	r8, #1024	; 0x400
    3b4a:	d1d9      	bne.n	3b00 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3b4c:	f008 0308 	and.w	r3, r8, #8
    3b50:	f043 0301 	orr.w	r3, r3, #1
    3b54:	70a3      	strb	r3, [r4, #2]
    3b56:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3b58:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3b5a:	61a1      	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    3b5c:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3b5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    3b62:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    3b64:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    3b66:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3b68:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    3b6c:	d104      	bne.n	3b78 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
  return true;
    3b6e:	2001      	movs	r0, #1
}
    3b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3b74:	2302      	movs	r3, #2
    3b76:	e7ca      	b.n	3b0e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3b78:	69e1      	ldr	r1, [r4, #28]
    3b7a:	4620      	mov	r0, r4
    3b7c:	f7ff ff3c 	bl	39f8 <FatFile::seekSet(unsigned long)>
    3b80:	2800      	cmp	r0, #0
    3b82:	d1f4      	bne.n	3b6e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>
    3b84:	e7bc      	b.n	3b00 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3b86:	f000 fd89 	bl	469c <FatPartition::freeChain(unsigned long)>
    3b8a:	2800      	cmp	r0, #0
    3b8c:	d0b8      	beq.n	3b00 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3b8e:	78a3      	ldrb	r3, [r4, #2]
    3b90:	e7d5      	b.n	3b3e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
    3b92:	bf00      	nop

00003b94 <FatFile::sync()>:
  if (!isOpen()) {
    3b94:	7803      	ldrb	r3, [r0, #0]
    3b96:	b10b      	cbz	r3, 3b9c <FatFile::sync()+0x8>
    3b98:	f7ff bb98 	b.w	32cc <FatFile::sync() [clone .part.0]>
}
    3b9c:	2001      	movs	r0, #1
    3b9e:	4770      	bx	lr

00003ba0 <FatFile::write(void const*, unsigned int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    3ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    3ba4:	7883      	ldrb	r3, [r0, #2]
    3ba6:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    3ba8:	079c      	lsls	r4, r3, #30
    3baa:	d577      	bpl.n	3c9c <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3bac:	4688      	mov	r8, r1
    3bae:	0719      	lsls	r1, r3, #28
    3bb0:	4691      	mov	r9, r2
    3bb2:	f100 80b5 	bmi.w	3d20 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    3bb6:	696b      	ldr	r3, [r5, #20]
    3bb8:	eb13 0209 	adds.w	r2, r3, r9
    3bbc:	d26e      	bcs.n	3c9c <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3bbe:	f1b9 0f00 	cmp.w	r9, #0
    3bc2:	d040      	beq.n	3c46 <FatFile::write(void const*, unsigned int)+0xa6>
    3bc4:	464f      	mov	r7, r9
    m_status = 0;
    3bc6:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    3bca:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    3bcc:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3bd0:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    3bd2:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3bd4:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    3bd8:	d13f      	bne.n	3c5a <FatFile::write(void const*, unsigned int)+0xba>
    3bda:	2e00      	cmp	r6, #0
    3bdc:	d13d      	bne.n	3c5a <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    3bde:	2900      	cmp	r1, #0
    3be0:	d06e      	beq.n	3cc0 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    3be2:	78aa      	ldrb	r2, [r5, #2]
    3be4:	0652      	lsls	r2, r2, #25
    3be6:	d576      	bpl.n	3cd6 <FatFile::write(void const*, unsigned int)+0x136>
    3be8:	69ea      	ldr	r2, [r5, #28]
    3bea:	429a      	cmp	r2, r3
    3bec:	d973      	bls.n	3cd6 <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    3bee:	3101      	adds	r1, #1
    3bf0:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3bf2:	3902      	subs	r1, #2
    3bf4:	7982      	ldrb	r2, [r0, #6]
    3bf6:	6943      	ldr	r3, [r0, #20]
    3bf8:	4091      	lsls	r1, r2
    3bfa:	4419      	add	r1, r3
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3bfc:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    3c00:	d353      	bcc.n	3caa <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    3c02:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    3c06:	d370      	bcc.n	3cea <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3c08:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    3c0a:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3c0c:	1b1b      	subs	r3, r3, r4
    3c0e:	4293      	cmp	r3, r2
    3c10:	bf28      	it	cs
    3c12:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    3c14:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    3c16:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3c18:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3c1c:	d307      	bcc.n	3c2e <FatFile::write(void const*, unsigned int)+0x8e>
    3c1e:	185e      	adds	r6, r3, r1
    3c20:	42b2      	cmp	r2, r6
    3c22:	d204      	bcs.n	3c2e <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    3c24:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    3c28:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3c2c:	62c2      	str	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
    3c2e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3c30:	4642      	mov	r2, r8
    3c32:	6806      	ldr	r6, [r0, #0]
    3c34:	6a76      	ldr	r6, [r6, #36]	; 0x24
    3c36:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    3c38:	b380      	cbz	r0, 3c9c <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3c3a:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    3c3c:	1b3f      	subs	r7, r7, r4
    src += n;
    3c3e:	44a0      	add	r8, r4
    m_curPosition += n;
    3c40:	4423      	add	r3, r4
    3c42:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    3c44:	d1c1      	bne.n	3bca <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    3c46:	69ea      	ldr	r2, [r5, #28]
    3c48:	429a      	cmp	r2, r3
    3c4a:	d276      	bcs.n	3d3a <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3c4c:	78aa      	ldrb	r2, [r5, #2]
    3c4e:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    3c50:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3c52:	f062 037f 	orn	r3, r2, #127	; 0x7f
    3c56:	70ab      	strb	r3, [r5, #2]
    3c58:	e025      	b.n	3ca6 <FatFile::write(void const*, unsigned int)+0x106>
    3c5a:	7982      	ldrb	r2, [r0, #6]
    3c5c:	3902      	subs	r1, #2
    3c5e:	6943      	ldr	r3, [r0, #20]
    3c60:	4091      	lsls	r1, r2
    3c62:	4419      	add	r1, r3
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3c64:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3c66:	2e00      	cmp	r6, #0
    3c68:	d0c8      	beq.n	3bfc <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    3c6a:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3c6e:	2201      	movs	r2, #1
    3c70:	42bc      	cmp	r4, r7
    3c72:	bf28      	it	cs
    3c74:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    3c76:	3024      	adds	r0, #36	; 0x24
    3c78:	f003 fa32 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    3c7c:	b170      	cbz	r0, 3c9c <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    3c7e:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3c80:	4426      	add	r6, r4
      memcpy(dst, src, n);
    3c82:	4622      	mov	r2, r4
    3c84:	4641      	mov	r1, r8
    3c86:	f004 f9b9 	bl	7ffc <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3c8a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3c8e:	68a8      	ldr	r0, [r5, #8]
    3c90:	d1d3      	bne.n	3c3a <FatFile::write(void const*, unsigned int)+0x9a>
  bool cacheSyncData() { return m_cache.sync(); }
    3c92:	3024      	adds	r0, #36	; 0x24
    3c94:	f003 f9f8 	bl	7088 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    3c98:	2800      	cmp	r0, #0
    3c9a:	d1ce      	bne.n	3c3a <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3c9c:	786b      	ldrb	r3, [r5, #1]
  return 0;
    3c9e:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3ca0:	f043 0301 	orr.w	r3, r3, #1
    3ca4:	706b      	strb	r3, [r5, #1]
}
    3ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3caa:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    3cae:	696a      	ldr	r2, [r5, #20]
    3cb0:	69eb      	ldr	r3, [r5, #28]
    3cb2:	42bc      	cmp	r4, r7
    3cb4:	bf28      	it	cs
    3cb6:	463c      	movcs	r4, r7
    3cb8:	429a      	cmp	r2, r3
    3cba:	d305      	bcc.n	3cc8 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3cbc:	2205      	movs	r2, #5
    3cbe:	e7da      	b.n	3c76 <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    3cc0:	6a29      	ldr	r1, [r5, #32]
    3cc2:	b321      	cbz	r1, 3d0e <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    3cc4:	6129      	str	r1, [r5, #16]
    3cc6:	e794      	b.n	3bf2 <FatFile::write(void const*, unsigned int)+0x52>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    3cc8:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3cca:	f013 0f20 	tst.w	r3, #32
    3cce:	bf14      	ite	ne
    3cd0:	2205      	movne	r2, #5
    3cd2:	2201      	moveq	r2, #1
    3cd4:	e7cf      	b.n	3c76 <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3cd6:	f105 0210 	add.w	r2, r5, #16
    3cda:	f000 fc59 	bl	4590 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3cde:	2800      	cmp	r0, #0
    3ce0:	dbdc      	blt.n	3c9c <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    3ce2:	d024      	beq.n	3d2e <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3ce4:	68a8      	ldr	r0, [r5, #8]
    3ce6:	6929      	ldr	r1, [r5, #16]
    3ce8:	e783      	b.n	3bf2 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    3cea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3cec:	428b      	cmp	r3, r1
    3cee:	d104      	bne.n	3cfa <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    3cf0:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    3cf4:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3cf8:	62c3      	str	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
    3cfa:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3cfc:	4642      	mov	r2, r8
    3cfe:	6803      	ldr	r3, [r0, #0]
    3d00:	6a1b      	ldr	r3, [r3, #32]
    3d02:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3d04:	2800      	cmp	r0, #0
    3d06:	d0c9      	beq.n	3c9c <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    3d08:	f44f 7400 	mov.w	r4, #512	; 0x200
    3d0c:	e795      	b.n	3c3a <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    3d0e:	4628      	mov	r0, r5
    3d10:	f7ff fb3a 	bl	3388 <FatFile::addCluster()>
    3d14:	2800      	cmp	r0, #0
    3d16:	d0c1      	beq.n	3c9c <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    3d18:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3d1a:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    3d1c:	6229      	str	r1, [r5, #32]
    3d1e:	e768      	b.n	3bf2 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    3d20:	69c1      	ldr	r1, [r0, #28]
    3d22:	f7ff fe69 	bl	39f8 <FatFile::seekSet(unsigned long)>
    3d26:	2800      	cmp	r0, #0
    3d28:	f47f af45 	bne.w	3bb6 <FatFile::write(void const*, unsigned int)+0x16>
    3d2c:	e7b6      	b.n	3c9c <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    3d2e:	4628      	mov	r0, r5
    3d30:	f7ff fb2a 	bl	3388 <FatFile::addCluster()>
    3d34:	2800      	cmp	r0, #0
    3d36:	d1d5      	bne.n	3ce4 <FatFile::write(void const*, unsigned int)+0x144>
    3d38:	e7b0      	b.n	3c9c <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    3d3a:	4b05      	ldr	r3, [pc, #20]	; (3d50 <FatFile::write(void const*, unsigned int)+0x1b0>)
    3d3c:	681b      	ldr	r3, [r3, #0]
    3d3e:	b12b      	cbz	r3, 3d4c <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3d40:	78ab      	ldrb	r3, [r5, #2]
    3d42:	4648      	mov	r0, r9
    3d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3d48:	70ab      	strb	r3, [r5, #2]
    3d4a:	e7ac      	b.n	3ca6 <FatFile::write(void const*, unsigned int)+0x106>
    3d4c:	4648      	mov	r0, r9
    3d4e:	e7aa      	b.n	3ca6 <FatFile::write(void const*, unsigned int)+0x106>
    3d50:	2001e06c 	.word	0x2001e06c

00003d54 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    3d58:	4686      	mov	lr, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3d5a:	b08a      	sub	sp, #40	; 0x28
    3d5c:	4615      	mov	r5, r2
  void reset() { next = begin; }
    3d5e:	6814      	ldr	r4, [r2, #0]
    3d60:	4606      	mov	r6, r0
    3d62:	4688      	mov	r8, r1
  FatFile dir = *this;
    3d64:	f10d 0c04 	add.w	ip, sp, #4
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3d68:	461f      	mov	r7, r3
  FatFile dir = *this;
    3d6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3d6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3d72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3d76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3d7a:	f8de 3000 	ldr.w	r3, [lr]
    3d7e:	606c      	str	r4, [r5, #4]
    3d80:	f8cc 3000 	str.w	r3, [ip]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3d84:	2f00      	cmp	r7, #0
    3d86:	d03b      	beq.n	3e00 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xac>
    3d88:	f04f 0901 	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3d8c:	eba8 0109 	sub.w	r1, r8, r9
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3d90:	a801      	add	r0, sp, #4
    3d92:	b289      	uxth	r1, r1
    3d94:	0149      	lsls	r1, r1, #5
    3d96:	f7ff fe2f 	bl	39f8 <FatFile::seekSet(unsigned long)>
    3d9a:	b398      	cbz	r0, 3e04 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    3d9c:	2100      	movs	r1, #0
    3d9e:	a801      	add	r0, sp, #4
    3da0:	f7ff fe08 	bl	39b4 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3da4:	4682      	mov	sl, r0
    3da6:	b368      	cbz	r0, 3e04 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    3da8:	2400      	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    3daa:	b2e2      	uxtb	r2, r4
    3dac:	4651      	mov	r1, sl
    3dae:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    3db0:	3401      	adds	r4, #1
      uint16_t u = getLfnChar(ldir, i);
    3db2:	f000 fb75 	bl	44a0 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3db6:	b2c3      	uxtb	r3, r0
      if (fname->atEnd()) {
    3db8:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
    3dbc:	428a      	cmp	r2, r1
  char getch() { return atEnd() ? 0 : *next++; }
    3dbe:	f101 0c01 	add.w	ip, r1, #1
    3dc2:	d023      	beq.n	3e0c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3dc4:	287f      	cmp	r0, #127	; 0x7f
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    3dc6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    3dca:	f1a3 0e20 	sub.w	lr, r3, #32
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3dce:	d819      	bhi.n	3e04 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    3dd0:	2a19      	cmp	r2, #25
    3dd2:	f8c5 c004 	str.w	ip, [r5, #4]
    3dd6:	780a      	ldrb	r2, [r1, #0]
    3dd8:	bf98      	it	ls
    3dda:	fa5f f38e 	uxtbls.w	r3, lr
    3dde:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    3de2:	f1a2 0020 	sub.w	r0, r2, #32
    3de6:	2919      	cmp	r1, #25
    3de8:	bf98      	it	ls
    3dea:	b2c2      	uxtbls	r2, r0
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3dec:	429a      	cmp	r2, r3
    3dee:	d109      	bne.n	3e04 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    for (uint8_t i = 0; i < 13; i++) {
    3df0:	2c0d      	cmp	r4, #13
    3df2:	d1da      	bne.n	3daa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x56>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3df4:	f109 0901 	add.w	r9, r9, #1
    3df8:	fa5f f989 	uxtb.w	r9, r9
    3dfc:	454f      	cmp	r7, r9
    3dfe:	d2c5      	bcs.n	3d8c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x38>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    3e00:	2001      	movs	r0, #1
    3e02:	e000      	b.n	3e06 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>

fail:
  return false;
    3e04:	2000      	movs	r0, #0
}
    3e06:	b00a      	add	sp, #40	; 0x28
    3e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return u == 0;
    3e0c:	fab0 f080 	clz	r0, r0
    3e10:	0940      	lsrs	r0, r0, #5
}
    3e12:	b00a      	add	sp, #40	; 0x28
    3e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003e18 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    3e1c:	4686      	mov	lr, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3e1e:	b08a      	sub	sp, #40	; 0x28
    3e20:	4614      	mov	r4, r2
    3e22:	4688      	mov	r8, r1
    3e24:	461e      	mov	r6, r3
  FatFile dir = *this;
    3e26:	f10d 0904 	add.w	r9, sp, #4
    3e2a:	f102 0711 	add.w	r7, r2, #17
    3e2e:	f102 0c1c 	add.w	ip, r2, #28
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    3e32:	2500      	movs	r5, #0
    3e34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3e38:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    3e3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3e40:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    3e44:	f8de 3000 	ldr.w	r3, [lr]
    3e48:	f8c9 3000 	str.w	r3, [r9]
    for (uint8_t i = 0; i < 11; i++) {
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3e4c:	01eb      	lsls	r3, r5, #7
    3e4e:	f817 2f01 	ldrb.w	r2, [r7, #1]!
    3e52:	ea43 0355 	orr.w	r3, r3, r5, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    3e56:	4567      	cmp	r7, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3e58:	fa52 f383 	uxtab	r3, r2, r3
    3e5c:	b2dd      	uxtb	r5, r3
    for (uint8_t i = 0; i < 11; i++) {
    3e5e:	d1f5      	bne.n	3e4c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
  void reset() { next = begin; }
    3e60:	6823      	ldr	r3, [r4, #0]
    3e62:	6063      	str	r3, [r4, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3e64:	2e00      	cmp	r6, #0
    3e66:	d059      	beq.n	3f1c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x104>
  uint8_t fc = 0;
    3e68:	f04f 0900 	mov.w	r9, #0
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3e6c:	f04f 0a01 	mov.w	sl, #1
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3e70:	464f      	mov	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3e72:	eba8 010a 	sub.w	r1, r8, sl
    3e76:	a801      	add	r0, sp, #4
    3e78:	b289      	uxth	r1, r1
    3e7a:	0149      	lsls	r1, r1, #5
    3e7c:	f7ff fdbc 	bl	39f8 <FatFile::seekSet(unsigned long)>
    3e80:	2800      	cmp	r0, #0
    3e82:	d053      	beq.n	3f2c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    3e84:	2100      	movs	r1, #0
    3e86:	a801      	add	r0, sp, #4
    3e88:	f7ff fd94 	bl	39b4 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3e8c:	2800      	cmp	r0, #0
    3e8e:	d04d      	beq.n	3f2c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    3e90:	9a03      	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3e92:	45b2      	cmp	sl, r6
  bool atEnd() { return next == end; }
    3e94:	f04f 0c01 	mov.w	ip, #1
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    3e98:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    3e9c:	f043 0301 	orr.w	r3, r3, #1
    3ea0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    3ea4:	bf0c      	ite	eq
    3ea6:	f04a 0240 	orreq.w	r2, sl, #64	; 0x40
    3eaa:	4652      	movne	r2, sl
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3eac:	230f      	movs	r3, #15
    ldir->mustBeZero1 = 0;
    3eae:	7307      	strb	r7, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3eb0:	7002      	strb	r2, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3eb2:	1c42      	adds	r2, r0, #1
    3eb4:	72c3      	strb	r3, [r0, #11]
    3eb6:	2300      	movs	r3, #0
    ldir->checksum = checksum;
    3eb8:	7345      	strb	r5, [r0, #13]
    3eba:	68a1      	ldr	r1, [r4, #8]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3ebc:	8347      	strh	r7, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    3ebe:	e006      	b.n	3ece <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb6>
    3ec0:	8010      	strh	r0, [r2, #0]
    3ec2:	f10c 0c01 	add.w	ip, ip, #1
    3ec6:	3301      	adds	r3, #1
    3ec8:	3202      	adds	r2, #2
    3eca:	fa5f fc8c 	uxtb.w	ip, ip
    3ece:	6860      	ldr	r0, [r4, #4]
      uint16_t cp;
      if (fname->atEnd()) {
    3ed0:	4288      	cmp	r0, r1
    3ed2:	d00e      	beq.n	3ef2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xda>
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    3ed4:	f100 0e01 	add.w	lr, r0, #1
    3ed8:	f8c4 e004 	str.w	lr, [r4, #4]
    3edc:	7800      	ldrb	r0, [r0, #0]
  if (i < 5) {
    3ede:	2b04      	cmp	r3, #4
    3ee0:	fa5f fe83 	uxtb.w	lr, r3
    3ee4:	d9ec      	bls.n	3ec0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
  } else if (i < 11) {
    3ee6:	f1be 0f0a 	cmp.w	lr, #10
    3eea:	d80c      	bhi.n	3f06 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xee>
    3eec:	f8a2 0003 	strh.w	r0, [r2, #3]
}
    3ef0:	e7e7      	b.n	3ec2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
        cp = fc++ ? 0XFFFF : 0;
    3ef2:	f1b9 0f00 	cmp.w	r9, #0
    3ef6:	d015      	beq.n	3f24 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
    3ef8:	f109 0901 	add.w	r9, r9, #1
    3efc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3f00:	fa5f f989 	uxtb.w	r9, r9
    3f04:	e7eb      	b.n	3ede <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    for (uint8_t i = 0; i < 13; i++) {
    3f06:	f1bc 0f0d 	cmp.w	ip, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    3f0a:	f8a2 0005 	strh.w	r0, [r2, #5]
    3f0e:	d1d8      	bne.n	3ec2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3f10:	f10a 0a01 	add.w	sl, sl, #1
    3f14:	fa5f fa8a 	uxtb.w	sl, sl
    3f18:	4556      	cmp	r6, sl
    3f1a:	d2aa      	bcs.n	3e72 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    3f1c:	2001      	movs	r0, #1

fail:
  return false;
}
    3f1e:	b00a      	add	sp, #40	; 0x28
    3f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cp = fc++ ? 0XFFFF : 0;
    3f24:	4648      	mov	r0, r9
    3f26:	f04f 0901 	mov.w	r9, #1
    3f2a:	e7d8      	b.n	3ede <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
  return false;
    3f2c:	2000      	movs	r0, #0
}
    3f2e:	b00a      	add	sp, #40	; 0x28
    3f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003f34 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    3f34:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    3f36:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    3f3a:	f852 3b12 	ldr.w	r3, [r2], #18
bool FatFile::makeSFN(FatLfn_t* fname) {
    3f3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    3f42:	f8c0 1012 	str.w	r1, [r0, #18]
bool FatFile::makeSFN(FatLfn_t* fname) {
    3f46:	4686      	mov	lr, r0
  const char* end = fname->end;
    3f48:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    3f4a:	6051      	str	r1, [r2, #4]
    3f4c:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    3f50:	781a      	ldrb	r2, [r3, #0]
    3f52:	2a2e      	cmp	r2, #46	; 0x2e
    3f54:	bf14      	ite	ne
    3f56:	2001      	movne	r0, #1
    3f58:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    3f5a:	d103      	bne.n	3f64 <FatFile::makeSFN(FatLfn_t*)+0x30>
    3f5c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3f60:	2a2e      	cmp	r2, #46	; 0x2e
    3f62:	d0fb      	beq.n	3f5c <FatFile::makeSFN(FatLfn_t*)+0x28>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    3f64:	1e61      	subs	r1, r4, #1
    3f66:	4299      	cmp	r1, r3
    3f68:	d90b      	bls.n	3f82 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3f6a:	460a      	mov	r2, r1
    3f6c:	e002      	b.n	3f74 <FatFile::makeSFN(FatLfn_t*)+0x40>
    3f6e:	4293      	cmp	r3, r2
    3f70:	4611      	mov	r1, r2
    3f72:	d006      	beq.n	3f82 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3f74:	4611      	mov	r1, r2
    3f76:	3a01      	subs	r2, #1
    3f78:	f891 c000 	ldrb.w	ip, [r1]
    3f7c:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    3f80:	d1f5      	bne.n	3f6e <FatFile::makeSFN(FatLfn_t*)+0x3a>
  }

  for (; ptr < end; ptr++) {
    3f82:	429c      	cmp	r4, r3
    3f84:	f04f 0500 	mov.w	r5, #0
    3f88:	f240 8086 	bls.w	4098 <FatFile::makeSFN(FatLfn_t*)+0x164>
    3f8c:	2607      	movs	r6, #7
    3f8e:	2708      	movs	r7, #8
    3f90:	46a9      	mov	r9, r5
    3f92:	46a8      	mov	r8, r5
    3f94:	e006      	b.n	3fa4 <FatFile::makeSFN(FatLfn_t*)+0x70>
    3f96:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
    3f98:	260a      	movs	r6, #10
      i = 8;                  // Place for extension.
    3f9a:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    3f9e:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    3fa0:	429c      	cmp	r4, r3
    3fa2:	d95b      	bls.n	405c <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    3fa4:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    3fa6:	2a2e      	cmp	r2, #46	; 0x2e
    3fa8:	bf08      	it	eq
    3faa:	4299      	cmpeq	r1, r3
    3fac:	d0f3      	beq.n	3f96 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    3fae:	2a22      	cmp	r2, #34	; 0x22
    3fb0:	d00d      	beq.n	3fce <FatFile::makeSFN(FatLfn_t*)+0x9a>
    3fb2:	2a7c      	cmp	r2, #124	; 0x7c
    3fb4:	d00b      	beq.n	3fce <FatFile::makeSFN(FatLfn_t*)+0x9a>
    3fb6:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    3fba:	f1bc 0f02 	cmp.w	ip, #2
    3fbe:	d906      	bls.n	3fce <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    3fc0:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    3fc4:	f1bc 0f05 	cmp.w	ip, #5
    3fc8:	d821      	bhi.n	400e <FatFile::makeSFN(FatLfn_t*)+0xda>
    3fca:	2a2d      	cmp	r2, #45	; 0x2d
    3fcc:	d01f      	beq.n	400e <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    3fce:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    3fd2:	2a80      	cmp	r2, #128	; 0x80
    3fd4:	d05d      	beq.n	4092 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    3fd6:	454e      	cmp	r6, r9
    3fd8:	d22f      	bcs.n	403a <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    3fda:	4299      	cmp	r1, r3
    3fdc:	bf2c      	ite	cs
    3fde:	2000      	movcs	r0, #0
    3fe0:	2001      	movcc	r0, #1
    3fe2:	2e0a      	cmp	r6, #10
    3fe4:	bf08      	it	eq
    3fe6:	f040 0001 	orreq.w	r0, r0, #1
    3fea:	2800      	cmp	r0, #0
    3fec:	d047      	beq.n	407e <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    3fee:	f89e 3012 	ldrb.w	r3, [lr, #18]
    3ff2:	2b20      	cmp	r3, #32
    3ff4:	d040      	beq.n	4078 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    3ff6:	f89e 3010 	ldrb.w	r3, [lr, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3ffa:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    3ffc:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    3ffe:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    4000:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    4002:	f88e 0011 	strb.w	r0, [lr, #17]
    fname->sfn[fname->seqPos] = '~';
    4006:	7499      	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    4008:	74da      	strb	r2, [r3, #19]
  }
  return true;

fail:
  return false;
}
    400a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    400e:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    4012:	f1bc 0f05 	cmp.w	ip, #5
    4016:	d9da      	bls.n	3fce <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    4018:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    401c:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    4020:	d8d5      	bhi.n	3fce <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    4022:	454e      	cmp	r6, r9
    4024:	d3d9      	bcc.n	3fda <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    4026:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    402a:	f1bc 0f19 	cmp.w	ip, #25
    402e:	d828      	bhi.n	4082 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    4030:	3a20      	subs	r2, #32
        lc |= bit;
    4032:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    4034:	b2d2      	uxtb	r2, r2
        lc |= bit;
    4036:	b2ed      	uxtb	r5, r5
    4038:	e001      	b.n	403e <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    403a:	2000      	movs	r0, #0
        c = '_';
    403c:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    403e:	f109 0c01 	add.w	ip, r9, #1
    4042:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    4044:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    4046:	f889 2012 	strb.w	r2, [r9, #18]
    404a:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    404e:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    4050:	4691      	mov	r9, r2
    4052:	bf98      	it	ls
    4054:	f88e 2010 	strbls.w	r2, [lr, #16]
  for (; ptr < end; ptr++) {
    4058:	429c      	cmp	r4, r3
    405a:	d8a3      	bhi.n	3fa4 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    405c:	f89e 3012 	ldrb.w	r3, [lr, #18]
    4060:	2b20      	cmp	r3, #32
    4062:	d009      	beq.n	4078 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    4064:	2800      	cmp	r0, #0
    4066:	d0c6      	beq.n	3ff6 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    4068:	ea18 0f05 	tst.w	r8, r5
    406c:	bf18      	it	ne
    406e:	2502      	movne	r5, #2
    4070:	f88e 5011 	strb.w	r5, [lr, #17]
}
    4074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    4078:	2000      	movs	r0, #0
}
    407a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    407e:	460b      	mov	r3, r1
    4080:	e78e      	b.n	3fa0 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    4082:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    4086:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    408a:	bf98      	it	ls
    408c:	ea47 0808 	orrls.w	r8, r7, r8
    4090:	e7d5      	b.n	403e <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    4092:	3301      	adds	r3, #1
        is83 = false;
    4094:	2000      	movs	r0, #0
    4096:	e783      	b.n	3fa0 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    4098:	46a8      	mov	r8, r5
    409a:	e7df      	b.n	405c <FatFile::makeSFN(FatLfn_t*)+0x128>

0000409c <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    409c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    40a0:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    40a4:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    40a6:	460f      	mov	r7, r1
    40a8:	4604      	mov	r4, r0
    40aa:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 414c <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    40ae:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    40b2:	f891 8010 	ldrb.w	r8, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    40b6:	f101 0612 	add.w	r6, r1, #18
	return systick_millis_count;
    40ba:	f1b8 0f03 	cmp.w	r8, #3
    40be:	f8db 3000 	ldr.w	r3, [fp]
    40c2:	bf28      	it	cs
    40c4:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    40c8:	442b      	add	r3, r5
    40ca:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    40cc:	f108 0304 	add.w	r3, r8, #4
    40d0:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    40d2:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4; i > pos; i--) {
    40d6:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    40d8:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    40da:	2a09      	cmp	r2, #9
    40dc:	f102 0137 	add.w	r1, r2, #55	; 0x37
    40e0:	bf98      	it	ls
    40e2:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    40e6:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    40e8:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    40ea:	7491      	strb	r1, [r2, #18]
    for (uint8_t i = pos + 4; i > pos; i--) {
    40ec:	4598      	cmp	r8, r3
    40ee:	d1f0      	bne.n	40d2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    40f0:	eb07 0308 	add.w	r3, r7, r8
  void rewind() { seekSet(0); }
    40f4:	2100      	movs	r1, #0
    40f6:	4620      	mov	r0, r4
    40f8:	f883 a012 	strb.w	sl, [r3, #18]
    40fc:	f7ff fc7c 	bl	39f8 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    4100:	2101      	movs	r1, #1
    4102:	4620      	mov	r0, r4
    4104:	f7ff fc56 	bl	39b4 <FatFile::readDirCache(bool)>
    4108:	4603      	mov	r3, r0
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    410a:	220b      	movs	r2, #11
    410c:	4630      	mov	r0, r6
      if (!dir) {
    410e:	b19b      	cbz	r3, 4138 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    4110:	f893 c000 	ldrb.w	ip, [r3]
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4114:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    4116:	f1bc 0f00 	cmp.w	ip, #0
    411a:	d013      	beq.n	4144 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    411c:	7adb      	ldrb	r3, [r3, #11]
    411e:	071b      	lsls	r3, r3, #28
    4120:	d4ee      	bmi.n	4100 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    4122:	f007 fb8b 	bl	b83c <memcmp>
    4126:	2800      	cmp	r0, #0
    4128:	d1ea      	bne.n	4100 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    412a:	f109 39ff 	add.w	r9, r9, #4294967295
    412e:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    4132:	d1c2      	bne.n	40ba <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    4134:	4648      	mov	r0, r9
fail:
    4136:	e003      	b.n	4140 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    4138:	7860      	ldrb	r0, [r4, #1]
    413a:	fab0 f080 	clz	r0, r0
    413e:	0940      	lsrs	r0, r0, #5

done:
  return true;
}
    4140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    4144:	2001      	movs	r0, #1
}
    4146:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    414a:	bf00      	nop
    414c:	2001ec54 	.word	0x2001ec54

00004150 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    4150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4154:	ed2d 8b02 	vpush	{d8}
    4158:	b08b      	sub	sp, #44	; 0x2c
    415a:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t freeIndex = 0;
  uint16_t freeTotal;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    415e:	688b      	ldr	r3, [r1, #8]
    4160:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    4162:	780b      	ldrb	r3, [r1, #0]
    4164:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    4168:	d052      	beq.n	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  bool isOpen() const { return m_attributes; }
    416a:	9b02      	ldr	r3, [sp, #8]
    416c:	781b      	ldrb	r3, [r3, #0]
    416e:	2b00      	cmp	r3, #0
    4170:	d14e      	bne.n	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    4172:	68d3      	ldr	r3, [r2, #12]
    4174:	4690      	mov	r8, r2
    4176:	4a9c      	ldr	r2, [pc, #624]	; (43e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x298>)
    4178:	460e      	mov	r6, r1
    417a:	330c      	adds	r3, #12
    417c:	fba2 2303 	umull	r2, r3, r2, r3
    4180:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    4184:	f898 3011 	ldrb.w	r3, [r8, #17]
    4188:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12) / 13;
    418a:	9204      	str	r2, [sp, #16]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    418c:	f000 80ab 	beq.w	42e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x196>
    4190:	1c57      	adds	r7, r2, #1
    4192:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    4194:	2300      	movs	r3, #0
  void rewind() { seekSet(0); }
    4196:	4630      	mov	r0, r6
    4198:	4619      	mov	r1, r3
    419a:	461c      	mov	r4, r3
    419c:	9306      	str	r3, [sp, #24]
    419e:	f7ff fc2b 	bl	39f8 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    41a2:	f108 0312 	add.w	r3, r8, #18
  uint8_t order = 0;
    41a6:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    41a8:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    41aa:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    41ac:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    41b0:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    41b2:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    41b4:	2100      	movs	r1, #0
    41b6:	4630      	mov	r0, r6
    41b8:	f7ff fbfc 	bl	39b4 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    41bc:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    41c0:	4603      	mov	r3, r0
    41c2:	b318      	cbz	r0, 420c <FatFile::open(FatFile*, FatLfn_t*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    41c4:	7802      	ldrb	r2, [r0, #0]
    41c6:	2ae5      	cmp	r2, #229	; 0xe5
    41c8:	d028      	beq.n	421c <FatFile::open(FatFile*, FatLfn_t*, int)+0xcc>
    41ca:	b33a      	cbz	r2, 421c <FatFile::open(FatFile*, FatLfn_t*, int)+0xcc>
        freeFound = 0;
    41cc:	42bc      	cmp	r4, r7
    41ce:	bf38      	it	cc
    41d0:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    41d2:	2a2e      	cmp	r2, #46	; 0x2e
    41d4:	d02a      	beq.n	422c <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
}
static inline uint8_t isFatLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    41d6:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isFatLongName(dir)) {
    41da:	f1bc 0f0f 	cmp.w	ip, #15
    41de:	d057      	beq.n	4290 <FatFile::open(FatFile*, FatLfn_t*, int)+0x140>
    } else if (isFatFileOrSubdir(dir)) {
    41e0:	f01c 0c08 	ands.w	ip, ip, #8
    41e4:	d122      	bne.n	422c <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
      if (lfnOrd) {
    41e6:	f1b9 0f00 	cmp.w	r9, #0
    41ea:	d17e      	bne.n	42ea <FatFile::open(FatFile*, FatLfn_t*, int)+0x19a>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    41ec:	220b      	movs	r2, #11
    41ee:	ee18 1a10 	vmov	r1, s16
    41f2:	f007 fb23 	bl	b83c <memcmp>
    41f6:	2800      	cmp	r0, #0
    41f8:	d1db      	bne.n	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    41fa:	f898 3011 	ldrb.w	r3, [r8, #17]
    41fe:	f013 0301 	ands.w	r3, r3, #1
    4202:	f000 80e9 	beq.w	43d8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x288>
          goto found;
        }
        fnameFound = true;
    4206:	2301      	movs	r3, #1
    4208:	9305      	str	r3, [sp, #20]
    420a:	e7d2      	b.n	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    420c:	7873      	ldrb	r3, [r6, #1]
    420e:	b183      	cbz	r3, 4232 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe2>
    goto fail;
  }
  return true;

fail:
  return false;
    4210:	2000      	movs	r0, #0
}
    4212:	b00b      	add	sp, #44	; 0x2c
    4214:	ecbd 8b02 	vpop	{d8}
    4218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    421c:	2c00      	cmp	r4, #0
    421e:	bf08      	it	eq
    4220:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    4222:	42bc      	cmp	r4, r7
    4224:	d201      	bcs.n	422a <FatFile::open(FatFile*, FatLfn_t*, int)+0xda>
        freeFound++;
    4226:	3401      	adds	r4, #1
    4228:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    422a:	b112      	cbz	r2, 4232 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe2>
      lfnOrd = 0;
    422c:	f04f 0900 	mov.w	r9, #0
    4230:	e7bf      	b.n	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    4232:	9b03      	ldr	r3, [sp, #12]
    4234:	059a      	lsls	r2, r3, #22
    4236:	d5eb      	bpl.n	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    4238:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    423c:	3b01      	subs	r3, #1
    423e:	2b01      	cmp	r3, #1
    4240:	d8e6      	bhi.n	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  if (freeFound == 0) {
    4242:	2c00      	cmp	r4, #0
    4244:	bf08      	it	eq
    4246:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    4248:	42bc      	cmp	r4, r7
    424a:	d303      	bcc.n	4254 <FatFile::open(FatFile*, FatLfn_t*, int)+0x104>
    424c:	e00c      	b.n	4268 <FatFile::open(FatFile*, FatLfn_t*, int)+0x118>
    freeFound++;
    424e:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    4250:	42a7      	cmp	r7, r4
    4252:	d009      	beq.n	4268 <FatFile::open(FatFile*, FatLfn_t*, int)+0x118>
    dir = dirFile->readDirCache();
    4254:	2100      	movs	r1, #0
    4256:	4630      	mov	r0, r6
    4258:	f7ff fbac 	bl	39b4 <FatFile::readDirCache(bool)>
    freeFound++;
    425c:	1c63      	adds	r3, r4, #1
    if (!dir) {
    425e:	2800      	cmp	r0, #0
    4260:	d1f5      	bne.n	424e <FatFile::open(FatFile*, FatLfn_t*, int)+0xfe>
      if (dirFile->getError()) {
    4262:	7873      	ldrb	r3, [r6, #1]
    4264:	2b00      	cmp	r3, #0
    4266:	d1d3      	bne.n	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  freeTotal = freeFound;
    4268:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
    426a:	b2bd      	uxth	r5, r7
    426c:	42a7      	cmp	r7, r4
    426e:	d95e      	bls.n	432e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1de>
    4270:	f8dd 901c 	ldr.w	r9, [sp, #28]
    4274:	e006      	b.n	4284 <FatFile::open(FatFile*, FatLfn_t*, int)+0x134>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
    4276:	f899 3004 	ldrb.w	r3, [r9, #4]
    freeTotal += vol->dirEntriesPerCluster();
    427a:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    427e:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
    4280:	42a5      	cmp	r5, r4
    4282:	d954      	bls.n	432e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1de>
    if (!dirFile->addDirCluster()) {
    4284:	4630      	mov	r0, r6
    4286:	f7ff f899 	bl	33bc <FatFile::addDirCluster()>
    428a:	2800      	cmp	r0, #0
    428c:	d1f3      	bne.n	4276 <FatFile::open(FatFile*, FatLfn_t*, int)+0x126>
    428e:	e7bf      	b.n	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
      if (!lfnOrd) {
    4290:	f1b9 0f00 	cmp.w	r9, #0
    4294:	d11a      	bne.n	42cc <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
        order = ldir->order & 0X1F;
    4296:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    429a:	9904      	ldr	r1, [sp, #16]
    429c:	4559      	cmp	r1, fp
    429e:	d188      	bne.n	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    42a0:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    42a4:	d085      	beq.n	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    42a6:	7b43      	ldrb	r3, [r0, #13]
    42a8:	4689      	mov	r9, r1
    42aa:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    42ac:	f1bb 0f01 	cmp.w	fp, #1
    42b0:	f47f af7f 	bne.w	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    42b4:	1c69      	adds	r1, r5, #1
    42b6:	464b      	mov	r3, r9
    42b8:	4642      	mov	r2, r8
    42ba:	4630      	mov	r0, r6
    42bc:	b289      	uxth	r1, r1
    42be:	f7ff fd49 	bl	3d54 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    42c2:	2800      	cmp	r0, #0
    42c4:	bf08      	it	eq
    42c6:	f04f 0900 	moveq.w	r9, #0
    42ca:	e772      	b.n	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    42cc:	f10b 3bff 	add.w	fp, fp, #4294967295
    42d0:	fa5f fb8b 	uxtb.w	fp, fp
    42d4:	455a      	cmp	r2, fp
    42d6:	d1a9      	bne.n	422c <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
    42d8:	7b43      	ldrb	r3, [r0, #13]
    42da:	9a06      	ldr	r2, [sp, #24]
    42dc:	4293      	cmp	r3, r2
    42de:	d0e5      	beq.n	42ac <FatFile::open(FatFile*, FatLfn_t*, int)+0x15c>
      lfnOrd = 0;
    42e0:	f04f 0900 	mov.w	r9, #0
    42e4:	e765      	b.n	41b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    42e6:	2701      	movs	r7, #1
    42e8:	e754      	b.n	4194 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    42ea:	f1bb 0f01 	cmp.w	fp, #1
    42ee:	d18f      	bne.n	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    for (uint8_t i = 0; i < 11; i++) {
    42f0:	300a      	adds	r0, #10
    42f2:	e001      	b.n	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a8>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    42f4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    42f8:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    42fc:	4298      	cmp	r0, r3
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    42fe:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    4302:	fa52 f281 	uxtab	r2, r2, r1
    4306:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    430a:	d1f3      	bne.n	42f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a4>
    430c:	9b06      	ldr	r3, [sp, #24]
    430e:	4563      	cmp	r3, ip
    4310:	f47f af7e 	bne.w	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    4314:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    4316:	9b03      	ldr	r3, [sp, #12]
    4318:	0519      	lsls	r1, r3, #20
    431a:	f53f af79 	bmi.w	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    431e:	9b03      	ldr	r3, [sp, #12]
    4320:	462a      	mov	r2, r5
    4322:	4631      	mov	r1, r6
    4324:	9802      	ldr	r0, [sp, #8]
    4326:	9700      	str	r7, [sp, #0]
    4328:	f7ff fbbe 	bl	3aa8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    432c:	e771      	b.n	4212 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (fnameFound) {
    432e:	9b05      	ldr	r3, [sp, #20]
    4330:	b133      	cbz	r3, 4340 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f0>
    if (!dirFile->makeUniqueSfn(fname)) {
    4332:	4641      	mov	r1, r8
    4334:	4630      	mov	r0, r6
    4336:	f7ff feb1 	bl	409c <FatFile::makeUniqueSfn(FatLfn_t*)>
    433a:	2800      	cmp	r0, #0
    433c:	f43f af68 	beq.w	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  lfnOrd = freeNeed - 1;
    4340:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    4342:	4642      	mov	r2, r8
    4344:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    4346:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    4348:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    434c:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    434e:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    4350:	4629      	mov	r1, r5
    4352:	f7ff fd61 	bl	3e18 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    4356:	2800      	cmp	r0, #0
    4358:	f43f af5a 	beq.w	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    435c:	0169      	lsls	r1, r5, #5
    435e:	4630      	mov	r0, r6
    4360:	f7ff fb4a 	bl	39f8 <FatFile::seekSet(unsigned long)>
    4364:	2800      	cmp	r0, #0
    4366:	f43f af53 	beq.w	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    436a:	2100      	movs	r1, #0
    436c:	4630      	mov	r0, r6
    436e:	f7ff fb21 	bl	39b4 <FatFile::readDirCache(bool)>
  if (!dir) {
    4372:	4604      	mov	r4, r0
    4374:	2800      	cmp	r0, #0
    4376:	f43f af4b 	beq.w	4210 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  memset(dir, 0, sizeof(DirFat_t));
    437a:	2220      	movs	r2, #32
    437c:	2100      	movs	r1, #0
    437e:	f007 fb09 	bl	b994 <memset>
  memcpy(dir->name, fname->sfn, 11);
    4382:	f8d8 2012 	ldr.w	r2, [r8, #18]
    4386:	f8d8 3016 	ldr.w	r3, [r8, #22]
    438a:	6022      	str	r2, [r4, #0]
    438c:	6063      	str	r3, [r4, #4]
    438e:	f898 301c 	ldrb.w	r3, [r8, #28]
    4392:	f8b8 201a 	ldrh.w	r2, [r8, #26]
    4396:	72a3      	strb	r3, [r4, #10]
    4398:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    439a:	f898 3011 	ldrb.w	r3, [r8, #17]
    439e:	f003 0318 	and.w	r3, r3, #24
    43a2:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    43a4:	4b11      	ldr	r3, [pc, #68]	; (43ec <FatFile::open(FatFile*, FatLfn_t*, int)+0x29c>)
    43a6:	681b      	ldr	r3, [r3, #0]
    43a8:	b1c3      	cbz	r3, 43dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x28c>
    FsDateTime::callback(&date, &time, &ms10);
    43aa:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    43ae:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    43b2:	a809      	add	r0, sp, #36	; 0x24
    43b4:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    43b6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    43ba:	8223      	strh	r3, [r4, #16]
    43bc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    43c0:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    43c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    43c6:	7363      	strb	r3, [r4, #13]
    43c8:	9a07      	ldr	r2, [sp, #28]
    43ca:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    43ce:	f043 0301 	orr.w	r3, r3, #1
    43d2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  void cacheDirty() { m_cache.dirty(); }
    43d6:	e7a2      	b.n	431e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1ce>
    43d8:	461f      	mov	r7, r3
    43da:	e79c      	b.n	4316 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
    43dc:	f245 6321 	movw	r3, #22049	; 0x5621
    43e0:	8223      	strh	r3, [r4, #16]
    43e2:	8323      	strh	r3, [r4, #24]
    43e4:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    43e6:	e7ef      	b.n	43c8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x278>
    43e8:	4ec4ec4f 	.word	0x4ec4ec4f
    43ec:	2001e06c 	.word	0x2001e06c

000043f0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    43f0:	7808      	ldrb	r0, [r1, #0]
    43f2:	2820      	cmp	r0, #32
                            const char** ptr) {
    43f4:	b430      	push	{r4, r5}
  while (*path == ' ') {
    43f6:	d103      	bne.n	4400 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    43f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    43fc:	2c20      	cmp	r4, #32
    43fe:	d0fb      	beq.n	43f8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    4400:	2500      	movs	r5, #0
  fname->begin = path;
    4402:	6011      	str	r1, [r2, #0]
  fname->len = 0;
    4404:	60d5      	str	r5, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
    4406:	780c      	ldrb	r4, [r1, #0]
    4408:	2c2f      	cmp	r4, #47	; 0x2f
    440a:	d00f      	beq.n	442c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    440c:	b174      	cbz	r4, 442c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    440e:	4823      	ldr	r0, [pc, #140]	; (449c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>)
      DBG_FAIL_MACRO;
      goto fail;
    }
#else   // USE_UTF8_LONG_NAMES
    uint8_t cp = *path++;
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    4410:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t cp = *path++;
    4414:	f101 0101 	add.w	r1, r1, #1
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    4418:	d108      	bne.n	442c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    441a:	2c3c      	cmp	r4, #60	; 0x3c
    441c:	d82f      	bhi.n	447e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8e>
    441e:	2c21      	cmp	r4, #33	; 0x21
    4420:	d807      	bhi.n	4432 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x42>
    4422:	f104 3cff 	add.w	ip, r4, #4294967295
    4426:	f1bc 0f1e 	cmp.w	ip, #30
    442a:	d80b      	bhi.n	4444 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  *ptr = path;
  return makeSFN(fname);

fail:
  return false;
}
    442c:	2000      	movs	r0, #0
    442e:	bc30      	pop	{r4, r5}
    4430:	4770      	bx	lr
    4432:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    4436:	fa5f fc8c 	uxtb.w	ip, ip
    443a:	fa20 fc0c 	lsr.w	ip, r0, ip
    443e:	f01c 0f01 	tst.w	ip, #1
    4442:	d1f3      	bne.n	442c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    if (cp != '.' && cp != ' ') {
    4444:	2c2e      	cmp	r4, #46	; 0x2e
    len++;
    4446:	f105 0501 	add.w	r5, r5, #1
    if (cp != '.' && cp != ' ') {
    444a:	d001      	beq.n	4450 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    444c:	2c20      	cmp	r4, #32
    444e:	d11c      	bne.n	448a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
  while (*path && !isDirSeparator(*path)) {
    4450:	780c      	ldrb	r4, [r1, #0]
    4452:	b10c      	cbz	r4, 4458 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    4454:	2c2f      	cmp	r4, #47	; 0x2f
    4456:	d1db      	bne.n	4410 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    4458:	68d0      	ldr	r0, [r2, #12]
    445a:	3801      	subs	r0, #1
    445c:	28fe      	cmp	r0, #254	; 0xfe
    445e:	d8e5      	bhi.n	442c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    4460:	2c20      	cmp	r4, #32
    4462:	d001      	beq.n	4468 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    4464:	2c2f      	cmp	r4, #47	; 0x2f
    4466:	d105      	bne.n	4474 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x84>
    4468:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    446c:	2820      	cmp	r0, #32
    446e:	d0fb      	beq.n	4468 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    4470:	282f      	cmp	r0, #47	; 0x2f
    4472:	d0f9      	beq.n	4468 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
  return makeSFN(fname);
    4474:	4610      	mov	r0, r2
  *ptr = path;
    4476:	6019      	str	r1, [r3, #0]
}
    4478:	bc30      	pop	{r4, r5}
  return makeSFN(fname);
    447a:	f7ff bd5b 	b.w	3f34 <FatFile::makeSFN(FatLfn_t*)>
    447e:	2c5c      	cmp	r4, #92	; 0x5c
    4480:	d0d4      	beq.n	442c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    4482:	d905      	bls.n	4490 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa0>
    4484:	2c7c      	cmp	r4, #124	; 0x7c
    4486:	d0d1      	beq.n	442c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    len++;
    4488:	3501      	adds	r5, #1
      fname->end = path;
    448a:	e9c2 1502 	strd	r1, r5, [r2, #8]
    448e:	e7df      	b.n	4450 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    4490:	3c3e      	subs	r4, #62	; 0x3e
    4492:	2c01      	cmp	r4, #1
    4494:	d8f8      	bhi.n	4488 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x98>
}
    4496:	2000      	movs	r0, #0
    4498:	bc30      	pop	{r4, r5}
    449a:	4770      	bx	lr
    449c:	05002101 	.word	0x05002101

000044a0 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
  if (i < 5) {
    44a0:	2a04      	cmp	r2, #4
    44a2:	d804      	bhi.n	44ae <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    44a4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    44a8:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
    44ac:	4770      	bx	lr
  } else if (i < 11) {
    44ae:	2a0a      	cmp	r2, #10
    44b0:	d803      	bhi.n	44ba <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    44b2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    44b6:	8890      	ldrh	r0, [r2, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    44b8:	4770      	bx	lr
  } else if (i < 13) {
    44ba:	2a0c      	cmp	r2, #12
    44bc:	d803      	bhi.n	44c6 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    44be:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    44c2:	88c8      	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    44c4:	4770      	bx	lr
  return 0;
    44c6:	2000      	movs	r0, #0
}
    44c8:	4770      	bx	lr
    44ca:	bf00      	nop

000044cc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    44cc:	b570      	push	{r4, r5, r6, lr}
  uint8_t fatType() const { return m_fatType; }
    44ce:	79c3      	ldrb	r3, [r0, #7]
    44d0:	4605      	mov	r5, r0
    44d2:	460c      	mov	r4, r1
    44d4:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    44d6:	2b20      	cmp	r3, #32
    44d8:	d019      	beq.n	450e <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x42>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    44da:	2b10      	cmp	r3, #16
    44dc:	d002      	beq.n	44e4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x18>
  }
  *value = next;
  return 1;

fail:
  return -1;
    44de:	f04f 30ff 	mov.w	r0, #4294967295
}
    44e2:	bd70      	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    44e4:	6983      	ldr	r3, [r0, #24]
    44e6:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    44ea:	f500 700d 	add.w	r0, r0, #564	; 0x234
    44ee:	2202      	movs	r2, #2
    44f0:	4419      	add	r1, r3
    44f2:	f002 fdf5 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    44f6:	2800      	cmp	r0, #0
    44f8:	d0f1      	beq.n	44de <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    44fa:	0061      	lsls	r1, r4, #1
  if (isEOC(next)) {
    44fc:	69ea      	ldr	r2, [r5, #28]
    next = getLe16(pc + offset);
    44fe:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
    4502:	5a43      	ldrh	r3, [r0, r1]
  if (isEOC(next)) {
    4504:	429a      	cmp	r2, r3
    4506:	d313      	bcc.n	4530 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x64>
  return 1;
    4508:	2001      	movs	r0, #1
  *value = next;
    450a:	6033      	str	r3, [r6, #0]
}
    450c:	bd70      	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    450e:	6981      	ldr	r1, [r0, #24]
    4510:	2202      	movs	r2, #2
    4512:	f500 700d 	add.w	r0, r0, #564	; 0x234
    4516:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    451a:	f002 fde1 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    451e:	2800      	cmp	r0, #0
    4520:	d0dd      	beq.n	44de <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    4522:	00a1      	lsls	r1, r4, #2
  if (isEOC(next)) {
    4524:	69ea      	ldr	r2, [r5, #28]
    next = getLe32(pc + offset);
    4526:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    452a:	5843      	ldr	r3, [r0, r1]
  if (isEOC(next)) {
    452c:	429a      	cmp	r2, r3
    452e:	d2eb      	bcs.n	4508 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x3c>
    return 0;
    4530:	2000      	movs	r0, #0
}
    4532:	bd70      	pop	{r4, r5, r6, pc}

00004534 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4534:	b538      	push	{r3, r4, r5, lr}
  uint8_t fatType() const { return m_fatType; }
    4536:	79c3      	ldrb	r3, [r0, #7]
    4538:	460c      	mov	r4, r1
    453a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    453c:	2b20      	cmp	r3, #32
    453e:	d015      	beq.n	456c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x38>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    4540:	2b10      	cmp	r3, #16
    4542:	d001      	beq.n	4548 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    4544:	2000      	movs	r0, #0
}
    4546:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    4548:	6983      	ldr	r3, [r0, #24]
    454a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    454e:	f500 700d 	add.w	r0, r0, #564	; 0x234
    4552:	2203      	movs	r2, #3
    4554:	4419      	add	r1, r3
    4556:	f002 fdc3 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    455a:	4603      	mov	r3, r0
    455c:	2800      	cmp	r0, #0
    455e:	d0f1      	beq.n	4544 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    4560:	0061      	lsls	r1, r4, #1
    return true;
    4562:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    4564:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
    4568:	525d      	strh	r5, [r3, r1]
}
    456a:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    456c:	6981      	ldr	r1, [r0, #24]
    456e:	2203      	movs	r2, #3
    4570:	f500 700d 	add.w	r0, r0, #564	; 0x234
    4574:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4578:	f002 fdb2 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    457c:	4603      	mov	r3, r0
    457e:	2800      	cmp	r0, #0
    4580:	d0e0      	beq.n	4544 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    4582:	00a1      	lsls	r1, r4, #2
    return true;
    4584:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    4586:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    458a:	505d      	str	r5, [r3, r1]
}
    458c:	bd38      	pop	{r3, r4, r5, pc}
    458e:	bf00      	nop

00004590 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    4590:	2901      	cmp	r1, #1
    4592:	d90c      	bls.n	45ae <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4594:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    4596:	69c4      	ldr	r4, [r0, #28]
    4598:	428c      	cmp	r4, r1
    459a:	d303      	bcc.n	45a4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    459c:	f85d 4b04 	ldr.w	r4, [sp], #4
    45a0:	f7ff bf94 	b.w	44cc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    45a4:	f04f 30ff 	mov.w	r0, #4294967295
    45a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    45ac:	4770      	bx	lr
    45ae:	f04f 30ff 	mov.w	r0, #4294967295
    45b2:	4770      	bx	lr

000045b4 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    45b4:	2901      	cmp	r1, #1
    45b6:	d90c      	bls.n	45d2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    45b8:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > m_lastCluster) {
    45ba:	69c3      	ldr	r3, [r0, #28]
    45bc:	460c      	mov	r4, r1
    45be:	428b      	cmp	r3, r1
    45c0:	d305      	bcc.n	45ce <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
  uint8_t fatType() const { return m_fatType; }
    45c2:	79c3      	ldrb	r3, [r0, #7]
    45c4:	4615      	mov	r5, r2
  if (fatType() == 32) {
    45c6:	2b20      	cmp	r3, #32
    45c8:	d017      	beq.n	45fa <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
  if (fatType() == 16) {
    45ca:	2b10      	cmp	r3, #16
    45cc:	d003      	beq.n	45d6 <FatPartition::fatPut(unsigned long, unsigned long)+0x22>
  return false;
    45ce:	2000      	movs	r0, #0
}
    45d0:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    45d2:	2000      	movs	r0, #0
}
    45d4:	4770      	bx	lr
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    45d6:	6983      	ldr	r3, [r0, #24]
    45d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    45dc:	f500 700d 	add.w	r0, r0, #564	; 0x234
    45e0:	2203      	movs	r2, #3
    45e2:	4419      	add	r1, r3
    45e4:	f002 fd7c 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    45e8:	4603      	mov	r3, r0
    45ea:	2800      	cmp	r0, #0
    45ec:	d0ef      	beq.n	45ce <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    45ee:	0064      	lsls	r4, r4, #1
    return true;
    45f0:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    45f2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    45f6:	531d      	strh	r5, [r3, r4]
}
    45f8:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    45fa:	6981      	ldr	r1, [r0, #24]
    45fc:	2203      	movs	r2, #3
    45fe:	f500 700d 	add.w	r0, r0, #564	; 0x234
    4602:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4606:	f002 fd6b 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    460a:	4603      	mov	r3, r0
    460c:	2800      	cmp	r0, #0
    460e:	d0de      	beq.n	45ce <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    4610:	00a4      	lsls	r4, r4, #2
    return true;
    4612:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    4614:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
    4618:	511d      	str	r5, [r3, r4]
}
    461a:	bd38      	pop	{r3, r4, r5, pc}

0000461c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    461c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    4620:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4622:	b082      	sub	sp, #8
    4624:	4605      	mov	r5, r0
    4626:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    4628:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    462a:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    462c:	d333      	bcc.n	4696 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    setStart = true;
    462e:	2701      	movs	r7, #1
    find++;
    4630:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    4632:	69eb      	ldr	r3, [r5, #28]
    4634:	aa01      	add	r2, sp, #4
    4636:	4628      	mov	r0, r5
    4638:	42a3      	cmp	r3, r4
    463a:	d205      	bcs.n	4648 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    463c:	bb37      	cbnz	r7, 468c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
      find = m_allocSearchStart;
    463e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    4640:	2701      	movs	r7, #1
    find++;
    4642:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    4644:	42a3      	cmp	r3, r4
    4646:	d321      	bcc.n	468c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (cluster < 2 || cluster > m_lastCluster) {
    4648:	42a6      	cmp	r6, r4
    464a:	bf18      	it	ne
    464c:	2c01      	cmpne	r4, #1
    464e:	4621      	mov	r1, r4
    4650:	d91c      	bls.n	468c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    4652:	f7ff ff3b 	bl	44cc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    4656:	2800      	cmp	r0, #0
    4658:	db18      	blt.n	468c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    if (fg && f == 0) {
    465a:	d0e9      	beq.n	4630 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    465c:	9b01      	ldr	r3, [sp, #4]
    465e:	2b00      	cmp	r3, #0
    4660:	d1e6      	bne.n	4630 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    4662:	b107      	cbz	r7, 4666 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    4664:	60ec      	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    4666:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    466a:	4621      	mov	r1, r4
    466c:	4628      	mov	r0, r5
    466e:	f7ff ffa1 	bl	45b4 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    4672:	4607      	mov	r7, r0
    4674:	b150      	cbz	r0, 468c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (current) {
    4676:	b916      	cbnz	r6, 467e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  *next = find;
    4678:	f8c8 4000 	str.w	r4, [r8]
  return true;
    467c:	e007      	b.n	468e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (!fatPut(current, find)) {
    467e:	4631      	mov	r1, r6
    4680:	4628      	mov	r0, r5
    4682:	4622      	mov	r2, r4
    4684:	f7ff ff96 	bl	45b4 <FatPartition::fatPut(unsigned long, unsigned long)>
    4688:	2800      	cmp	r0, #0
    468a:	d1f5      	bne.n	4678 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5c>
  return false;
    468c:	2700      	movs	r7, #0
}
    468e:	4638      	mov	r0, r7
    4690:	b002      	add	sp, #8
    4692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4696:	460c      	mov	r4, r1
    setStart = false;
    4698:	2700      	movs	r7, #0
    469a:	e7c9      	b.n	4630 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>

0000469c <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    469c:	b570      	push	{r4, r5, r6, lr}
    469e:	4605      	mov	r5, r0
    46a0:	b082      	sub	sp, #8
    46a2:	460c      	mov	r4, r1
    46a4:	e017      	b.n	46d6 <FatPartition::freeChain(unsigned long)+0x3a>
  if (cluster < 2 || cluster > m_lastCluster) {
    46a6:	69eb      	ldr	r3, [r5, #28]
    46a8:	429c      	cmp	r4, r3
    46aa:	d819      	bhi.n	46e0 <FatPartition::freeChain(unsigned long)+0x44>
    46ac:	f7ff ff0e 	bl	44cc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    46b0:	4606      	mov	r6, r0
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    46b2:	4621      	mov	r1, r4
    46b4:	2200      	movs	r2, #0
    46b6:	2e00      	cmp	r6, #0
    46b8:	4628      	mov	r0, r5
    46ba:	db11      	blt.n	46e0 <FatPartition::freeChain(unsigned long)+0x44>
  if (cluster < 2 || cluster > m_lastCluster) {
    46bc:	69eb      	ldr	r3, [r5, #28]
    46be:	429c      	cmp	r4, r3
    46c0:	d80e      	bhi.n	46e0 <FatPartition::freeChain(unsigned long)+0x44>
    46c2:	f7ff ff37 	bl	4534 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    46c6:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    46c8:	b150      	cbz	r0, 46e0 <FatPartition::freeChain(unsigned long)+0x44>
    if (cluster < m_allocSearchStart) {
    46ca:	68eb      	ldr	r3, [r5, #12]
    46cc:	42a3      	cmp	r3, r4
    }
    cluster = next;
    46ce:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    46d0:	bf88      	it	hi
    46d2:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    46d4:	b12e      	cbz	r6, 46e2 <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    46d6:	2c01      	cmp	r4, #1
    46d8:	4621      	mov	r1, r4
    46da:	aa01      	add	r2, sp, #4
    46dc:	4628      	mov	r0, r5
    46de:	d8e2      	bhi.n	46a6 <FatPartition::freeChain(unsigned long)+0xa>

  return true;

fail:
  return false;
    46e0:	2000      	movs	r0, #0
}
    46e2:	b002      	add	sp, #8
    46e4:	bd70      	pop	{r4, r5, r6, pc}
    46e6:	bf00      	nop

000046e8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    46e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46ea:	461e      	mov	r6, r3
    m_sector = 0XFFFFFFFF;
    46ec:	f04f 33ff 	mov.w	r3, #4294967295
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    46f0:	f04f 0c00 	mov.w	ip, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    46f4:	4604      	mov	r4, r0
    46f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  m_allocSearchStart = 1;
  m_cache.init(dev);
    46f8:	f100 0724 	add.w	r7, r0, #36	; 0x24
    46fc:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  m_allocSearchStart = 1;
    4700:	2301      	movs	r3, #1
  m_blockDev = dev;
    4702:	6001      	str	r1, [r0, #0]
  m_fatType = 0;
    4704:	f880 c007 	strb.w	ip, [r0, #7]
    m_blockDev = blockDev;
    4708:	6281      	str	r1, [r0, #40]	; 0x28
    470a:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
    m_status = 0;
    470e:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
    4712:	f880 c234 	strb.w	ip, [r0, #564]	; 0x234
  m_allocSearchStart = 1;
    4716:	60c3      	str	r3, [r0, #12]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4718:	b1d2      	cbz	r2, 4750 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x68>
    if (part > 4) {
    471a:	2a04      	cmp	r2, #4
    471c:	4615      	mov	r5, r2
    471e:	d901      	bls.n	4724 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x3c>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    4720:	2000      	movs	r0, #0
}
    4722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
    4724:	4662      	mov	r2, ip
    4726:	4661      	mov	r1, ip
    4728:	4638      	mov	r0, r7
    472a:	f002 fcd9 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    472e:	2800      	cmp	r0, #0
    4730:	d0f6      	beq.n	4720 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    MbrPart_t* mp = mbr->part + part - 1;
    4732:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    4736:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    473a:	442b      	add	r3, r5
    473c:	0119      	lsls	r1, r3, #4
    473e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    4742:	791a      	ldrb	r2, [r3, #4]
    4744:	2a00      	cmp	r2, #0
    4746:	d0eb      	beq.n	4720 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    4748:	5c42      	ldrb	r2, [r0, r1]
    474a:	0652      	lsls	r2, r2, #25
    474c:	d1e8      	bne.n	4720 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    474e:	689e      	ldr	r6, [r3, #8]
    4750:	2200      	movs	r2, #0
    4752:	4631      	mov	r1, r6
    4754:	4638      	mov	r0, r7
    4756:	f002 fcc3 	bl	70e0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    475a:	2800      	cmp	r0, #0
    475c:	d0e0      	beq.n	4720 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    475e:	7c03      	ldrb	r3, [r0, #16]
    4760:	2b02      	cmp	r3, #2
    4762:	d1dd      	bne.n	4720 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    4764:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    4768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    476c:	d1d8      	bne.n	4720 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    476e:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    4770:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4772:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    4774:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    4776:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    4778:	f04f 0300 	mov.w	r3, #0
    477c:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    477e:	d041      	beq.n	4804 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x11c>
    4780:	2201      	movs	r2, #1
    4782:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    4784:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4786:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    4788:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    478a:	4291      	cmp	r1, r2
    478c:	d004      	beq.n	4798 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb0>
    if (tmp == 0) {
    478e:	2b08      	cmp	r3, #8
    4790:	d1f7      	bne.n	4782 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x9a>
  return false;
    4792:	2000      	movs	r0, #0
    4794:	71a3      	strb	r3, [r4, #6]
}
    4796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  countOfClusters >>= m_sectorsPerClusterShift;
    4798:	461d      	mov	r5, r3
    479a:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    479c:	8ac1      	ldrh	r1, [r0, #22]
    479e:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    47a0:	b909      	cbnz	r1, 47a6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xbe>
    47a2:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    47a4:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    47a6:	89c3      	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    47a8:	f8b0 2011 	ldrh.w	r2, [r0, #17]
    47ac:	4433      	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    47ae:	8122      	strh	r2, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    47b0:	0152      	lsls	r2, r2, #5
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    47b2:	61a3      	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    47b4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    47b8:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    47bc:	6223      	str	r3, [r4, #32]
      m_rootDirStart +
    47be:	eb03 2352 	add.w	r3, r3, r2, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    47c2:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector =
    47c6:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    47c8:	b902      	cbnz	r2, 47cc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe4>
  return *reinterpret_cast<const uint32_t*>(src);
    47ca:	6a02      	ldr	r2, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    47cc:	1af3      	subs	r3, r6, r3
    47ce:	4413      	add	r3, r2
  countOfClusters >>= m_sectorsPerClusterShift;
    47d0:	40eb      	lsrs	r3, r5
  m_lastCluster = countOfClusters + 1;
    47d2:	1c5a      	adds	r2, r3, #1
    47d4:	61e2      	str	r2, [r4, #28]
  if (countOfClusters < 4085) {
    47d6:	f640 72f4 	movw	r2, #4084	; 0xff4
    47da:	4293      	cmp	r3, r2
    47dc:	d90c      	bls.n	47f8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x110>
  } else if (countOfClusters < 65525) {
    47de:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    47e2:	4293      	cmp	r3, r2
    47e4:	d90c      	bls.n	4800 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x118>
    47e6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    47e8:	2320      	movs	r3, #32
    47ea:	6222      	str	r2, [r4, #32]
  return true;
    47ec:	2001      	movs	r0, #1
    m_fatType = 16;
    47ee:	71e3      	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    47f0:	6321      	str	r1, [r4, #48]	; 0x30
    47f2:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    47f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 12;
    47f8:	230c      	movs	r3, #12
  return false;
    47fa:	2000      	movs	r0, #0
    m_fatType = 12;
    47fc:	71e3      	strb	r3, [r4, #7]
}
    47fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4800:	2310      	movs	r3, #16
    4802:	e7f3      	b.n	47ec <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x104>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4804:	461d      	mov	r5, r3
    4806:	e7c9      	b.n	479c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb4>

00004808 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char* path) {
    4808:	b530      	push	{r4, r5, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    480a:	f200 4444 	addw	r4, r0, #1092	; 0x444
    480e:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    4810:	2300      	movs	r3, #0
    4812:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    4814:	a801      	add	r0, sp, #4
    4816:	4621      	mov	r1, r4
    4818:	9301      	str	r3, [sp, #4]
    481a:	f7fe ff43 	bl	36a4 <FatFile::open(FatFile*, char const*, int)>
    481e:	4605      	mov	r5, r0
    4820:	b198      	cbz	r0, 484a <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    4822:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4826:	f013 03d0 	ands.w	r3, r3, #208	; 0xd0
    482a:	d011      	beq.n	4850 <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    482c:	f10d 0e04 	add.w	lr, sp, #4
    4830:	46a4      	mov	ip, r4
    4832:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4836:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    483a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    483e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4842:	f8de 3000 	ldr.w	r3, [lr]
    4846:	f8cc 3000 	str.w	r3, [ip]
  return true;

fail:
  return false;
}
    484a:	4628      	mov	r0, r5
    484c:	b00b      	add	sp, #44	; 0x2c
    484e:	bd30      	pop	{r4, r5, pc}
  return false;
    4850:	461d      	mov	r5, r3
}
    4852:	4628      	mov	r0, r5
    4854:	b00b      	add	sp, #44	; 0x2c
    4856:	bd30      	pop	{r4, r5, pc}

00004858 <FsBaseFile::operator=(FsBaseFile const&)>:
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) {
    4858:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    485a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    485c:	4604      	mov	r4, r0
  if (this == &from) {
    485e:	d01b      	beq.n	4898 <FsBaseFile::operator=(FsBaseFile const&)+0x40>
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4860:	6b80      	ldr	r0, [r0, #56]	; 0x38
    4862:	460d      	mov	r5, r1
    4864:	b1d0      	cbz	r0, 489c <FsBaseFile::operator=(FsBaseFile const&)+0x44>
    4866:	f7fe fde5 	bl	3434 <FatFile::close()>
  m_fFile = nullptr;
    486a:	2600      	movs	r6, #0
    486c:	63a6      	str	r6, [r4, #56]	; 0x38
  if (from.m_fFile) {
    486e:	6baf      	ldr	r7, [r5, #56]	; 0x38
  m_xFile = nullptr;
    4870:	63e6      	str	r6, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    4872:	b1cf      	cbz	r7, 48a8 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    4874:	4621      	mov	r1, r4
    4876:	2024      	movs	r0, #36	; 0x24
    4878:	f000 f8a4 	bl	49c4 <operator new(unsigned int, unsigned long*)>
    487c:	8006      	strh	r6, [r0, #0]
    487e:	7086      	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    4880:	4684      	mov	ip, r0
    m_fFile = new (m_fileMem) FatFile;
    4882:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    4884:	6bad      	ldr	r5, [r5, #56]	; 0x38
    4886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4888:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    488c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    488e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4892:	682b      	ldr	r3, [r5, #0]
    4894:	f8cc 3000 	str.w	r3, [ip]
}
    4898:	4620      	mov	r0, r4
    489a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    489c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    489e:	2800      	cmp	r0, #0
    48a0:	d0e3      	beq.n	486a <FsBaseFile::operator=(FsBaseFile const&)+0x12>
    48a2:	f7fd fa37 	bl	1d14 <ExFatFile::close()>
    48a6:	e7e0      	b.n	486a <FsBaseFile::operator=(FsBaseFile const&)+0x12>
  } else if (from.m_xFile) {
    48a8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    48aa:	2b00      	cmp	r3, #0
    48ac:	d0f4      	beq.n	4898 <FsBaseFile::operator=(FsBaseFile const&)+0x40>
    m_xFile = new (m_fileMem) ExFatFile;
    48ae:	4621      	mov	r1, r4
    48b0:	2038      	movs	r0, #56	; 0x38
    48b2:	f000 f887 	bl	49c4 <operator new(unsigned int, unsigned long*)>
    48b6:	f880 7031 	strb.w	r7, [r0, #49]	; 0x31
    48ba:	8647      	strh	r7, [r0, #50]	; 0x32
    48bc:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    48be:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    48c0:	f103 0730 	add.w	r7, r3, #48	; 0x30
    48c4:	681e      	ldr	r6, [r3, #0]
    48c6:	3310      	adds	r3, #16
    48c8:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    48cc:	3010      	adds	r0, #16
    48ce:	f853 1c08 	ldr.w	r1, [r3, #-8]
    48d2:	f853 2c04 	ldr.w	r2, [r3, #-4]
    48d6:	42bb      	cmp	r3, r7
    48d8:	f840 6c10 	str.w	r6, [r0, #-16]
    48dc:	f840 5c0c 	str.w	r5, [r0, #-12]
    48e0:	f840 1c08 	str.w	r1, [r0, #-8]
    48e4:	f840 2c04 	str.w	r2, [r0, #-4]
    48e8:	d1ec      	bne.n	48c4 <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    48ea:	681b      	ldr	r3, [r3, #0]
    48ec:	6003      	str	r3, [r0, #0]
}
    48ee:	4620      	mov	r0, r4
    48f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48f2:	bf00      	nop

000048f4 <FsBaseFile::close()>:
bool FsBaseFile::close() {
    48f4:	b510      	push	{r4, lr}
    48f6:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    48f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
    48fa:	b128      	cbz	r0, 4908 <FsBaseFile::close()+0x14>
    48fc:	f7fe fd9a 	bl	3434 <FatFile::close()>
  m_fFile = nullptr;
    4900:	2300      	movs	r3, #0
  m_xFile = nullptr;
    4902:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
  return rtn;
}
    4906:	bd10      	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4908:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    490a:	b128      	cbz	r0, 4918 <FsBaseFile::close()+0x24>
    490c:	f7fd fa02 	bl	1d14 <ExFatFile::close()>
  m_fFile = nullptr;
    4910:	2300      	movs	r3, #0
  m_xFile = nullptr;
    4912:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
    4916:	bd10      	pop	{r4, pc}
  m_fFile = nullptr;
    4918:	2300      	movs	r3, #0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    491a:	2001      	movs	r0, #1
  m_xFile = nullptr;
    491c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
    4920:	bd10      	pop	{r4, pc}
    4922:	bf00      	nop

00004924 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    4924:	2900      	cmp	r1, #0
    4926:	d04b      	beq.n	49c0 <FsBaseFile::open(FsVolume*, char const*, int)+0x9c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    4928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    492c:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    492e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    4930:	460d      	mov	r5, r1
    4932:	4690      	mov	r8, r2
    4934:	461f      	mov	r7, r3
    4936:	b1d0      	cbz	r0, 496e <FsBaseFile::open(FsVolume*, char const*, int)+0x4a>
    4938:	f7fe fd7c 	bl	3434 <FatFile::close()>
  m_fFile = nullptr;
    493c:	2600      	movs	r6, #0
    return false;
  }
  close();
  if (vol->m_fVol) {
    493e:	f8d5 9480 	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    4942:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    4946:	f1b9 0f00 	cmp.w	r9, #0
    494a:	d01d      	beq.n	4988 <FsBaseFile::open(FsVolume*, char const*, int)+0x64>
    m_fFile = new (m_fileMem) FatFile;
    494c:	4621      	mov	r1, r4
    494e:	2024      	movs	r0, #36	; 0x24
    4950:	f000 f838 	bl	49c4 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4954:	463b      	mov	r3, r7
    4956:	8006      	strh	r6, [r0, #0]
    4958:	4642      	mov	r2, r8
    495a:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    495c:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    495e:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    4962:	f7fe ff1b 	bl	379c <FatFile::open(FatVolume*, char const*, int)>
    4966:	bb40      	cbnz	r0, 49ba <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
      return true;
    }
    m_fFile = nullptr;
    4968:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    496a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    496e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4970:	2800      	cmp	r0, #0
    4972:	d0e3      	beq.n	493c <FsBaseFile::open(FsVolume*, char const*, int)+0x18>
    4974:	f7fd f9ce 	bl	1d14 <ExFatFile::close()>
  m_fFile = nullptr;
    4978:	2600      	movs	r6, #0
  if (vol->m_fVol) {
    497a:	f8d5 9480 	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    497e:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    4982:	f1b9 0f00 	cmp.w	r9, #0
    4986:	d1e1      	bne.n	494c <FsBaseFile::open(FsVolume*, char const*, int)+0x28>
  } else if (vol->m_xVol) {
    4988:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    498c:	b193      	cbz	r3, 49b4 <FsBaseFile::open(FsVolume*, char const*, int)+0x90>
    m_xFile = new (m_fileMem) ExFatFile;
    498e:	4621      	mov	r1, r4
    4990:	2038      	movs	r0, #56	; 0x38
    4992:	f000 f817 	bl	49c4 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4996:	463b      	mov	r3, r7
    4998:	f880 9031 	strb.w	r9, [r0, #49]	; 0x31
    499c:	4642      	mov	r2, r8
    499e:	f8a0 9032 	strh.w	r9, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    49a2:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    49a4:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    49a8:	f7fd fddc 	bl	2564 <ExFatFile::open(ExFatVolume*, char const*, int)>
    49ac:	b928      	cbnz	r0, 49ba <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
    m_xFile = nullptr;
    49ae:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    49b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    49b4:	2000      	movs	r0, #0
}
    49b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return true;
    49ba:	2001      	movs	r0, #1
}
    49bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    49c0:	2000      	movs	r0, #0
}
    49c2:	4770      	bx	lr

000049c4 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    49c4:	4608      	mov	r0, r1
    49c6:	4770      	bx	lr

000049c8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    49c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
    49cc:	2500      	movs	r5, #0
                     uint32_t volStart) {
    49ce:	4606      	mov	r6, r0
    49d0:	460f      	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
    49d2:	4601      	mov	r1, r0
  m_fVol = nullptr;
    49d4:	f8c0 5480 	str.w	r5, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    49d8:	f44f 6090 	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
    49dc:	4698      	mov	r8, r3
    49de:	f8dd a020 	ldr.w	sl, [sp, #32]
    49e2:	4691      	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    49e4:	f7ff ffee 	bl	49c4 <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    49e8:	f04f 33ff 	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    49ec:	6045      	str	r5, [r0, #4]
    m_status = 0;
    49ee:	7005      	strb	r5, [r0, #0]
    if (!init(dev, part, volStart)) {
    49f0:	4642      	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    49f2:	6083      	str	r3, [r0, #8]
    49f4:	4639      	mov	r1, r7
    49f6:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
    49fa:	4653      	mov	r3, sl
    m_blockDev = blockDev;
    49fc:	f8c0 5214 	str.w	r5, [r0, #532]	; 0x214
    4a00:	4604      	mov	r4, r0
    m_status = 0;
    4a02:	f880 5210 	strb.w	r5, [r0, #528]	; 0x210
  ExFatPartition() = default;
    4a06:	f880 5444 	strb.w	r5, [r0, #1092]	; 0x444
    4a0a:	f880 5479 	strb.w	r5, [r0, #1145]	; 0x479
    4a0e:	f8a0 547a 	strh.w	r5, [r0, #1146]	; 0x47a
    4a12:	f8c6 0484 	str.w	r0, [r6, #1156]	; 0x484
    4a16:	f7fe fba7 	bl	3168 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4a1a:	2800      	cmp	r0, #0
    4a1c:	d13e      	bne.n	4a9c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xd4>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    4a1e:	2500      	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    4a20:	4631      	mov	r1, r6
    4a22:	f44f 608d 	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
    4a26:	f8c6 5484 	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    4a2a:	f7ff ffcb 	bl	49c4 <operator new(unsigned int, unsigned long*)>
  FatPartition() = default;
    4a2e:	71c5      	strb	r5, [r0, #7]
    m_blockDev = blockDev;
    4a30:	6285      	str	r5, [r0, #40]	; 0x28
    if (!init(dev, part, volStart)) {
    4a32:	4653      	mov	r3, sl
    m_status = 0;
    4a34:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
    4a38:	4642      	mov	r2, r8
    m_blockDev = blockDev;
    4a3a:	f8c0 5238 	str.w	r5, [r0, #568]	; 0x238
    4a3e:	4639      	mov	r1, r7
    m_status = 0;
    4a40:	f880 5234 	strb.w	r5, [r0, #564]	; 0x234
    4a44:	4604      	mov	r4, r0
    4a46:	f8a0 5444 	strh.w	r5, [r0, #1092]	; 0x444
    4a4a:	f880 5446 	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    4a4e:	f04f 35ff 	mov.w	r5, #4294967295
    4a52:	62c5      	str	r5, [r0, #44]	; 0x2c
    4a54:	f8c0 523c 	str.w	r5, [r0, #572]	; 0x23c
    4a58:	f8c6 0480 	str.w	r0, [r6, #1152]	; 0x480
    4a5c:	f7ff fe44 	bl	46e8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4a60:	b928      	cbnz	r0, 4a6e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xa6>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    4a62:	2300      	movs	r3, #0
  return false;
    4a64:	4618      	mov	r0, r3
  m_fVol = nullptr;
    4a66:	f8c6 3480 	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    4a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    4a6e:	f204 4544 	addw	r5, r4, #1092	; 0x444
    4a72:	4628      	mov	r0, r5
    4a74:	f7fe fcde 	bl	3434 <FatFile::close()>
    return m_vwd.openRoot(this);
    4a78:	4621      	mov	r1, r4
    4a7a:	4628      	mov	r0, r5
    4a7c:	f7fe fe96 	bl	37ac <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    4a80:	2800      	cmp	r0, #0
    4a82:	d0ee      	beq.n	4a62 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x9a>
    if (setCwv || !m_cwv) {
    4a84:	4b12      	ldr	r3, [pc, #72]	; (4ad0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
    4a86:	681a      	ldr	r2, [r3, #0]
    4a88:	b9ba      	cbnz	r2, 4aba <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf2>
      m_cwv = this;
    4a8a:	601c      	str	r4, [r3, #0]
  if (setCwv || !m_cwv) {
    4a8c:	4b11      	ldr	r3, [pc, #68]	; (4ad4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    4a8e:	f1b9 0f00 	cmp.w	r9, #0
    4a92:	d016      	beq.n	4ac2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfa>
  return true;
    4a94:	2001      	movs	r0, #1
    m_cwv = this;
    4a96:	601e      	str	r6, [r3, #0]
}
    4a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    4a9c:	f504 6589 	add.w	r5, r4, #1096	; 0x448
    4aa0:	4628      	mov	r0, r5
    4aa2:	f7fd f937 	bl	1d14 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    4aa6:	4621      	mov	r1, r4
    4aa8:	4628      	mov	r0, r5
    4aaa:	f7fd f93d 	bl	1d28 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    4aae:	2800      	cmp	r0, #0
    4ab0:	d0b5      	beq.n	4a1e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
    if (setCwv || !m_cwv) {
    4ab2:	4b09      	ldr	r3, [pc, #36]	; (4ad8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x110>)
    4ab4:	681a      	ldr	r2, [r3, #0]
    4ab6:	2a00      	cmp	r2, #0
    4ab8:	d0e7      	beq.n	4a8a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc2>
  if (setCwv || !m_cwv) {
    4aba:	4b06      	ldr	r3, [pc, #24]	; (4ad4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    4abc:	f1b9 0f00 	cmp.w	r9, #0
    4ac0:	d1e8      	bne.n	4a94 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
    4ac2:	681a      	ldr	r2, [r3, #0]
    4ac4:	2a00      	cmp	r2, #0
    4ac6:	d0e5      	beq.n	4a94 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
  return true;
    4ac8:	2001      	movs	r0, #1
}
    4aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ace:	bf00      	nop
    4ad0:	2001e0a8 	.word	0x2001e0a8
    4ad4:	2001e0a4 	.word	0x2001e0a4
    4ad8:	2001e070 	.word	0x2001e070

00004adc <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    4adc:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    4ade:	2500      	movs	r5, #0
    4ae0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    4ae4:	4604      	mov	r4, r0
    4ae6:	6045      	str	r5, [r0, #4]
    4ae8:	7305      	strb	r5, [r0, #12]
    4aea:	6086      	str	r6, [r0, #8]
    4aec:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4af0:	4d03      	ldr	r5, [pc, #12]	; (4b00 <FsVolume::open(char const*, int)+0x24>)
    4af2:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    4af6:	f7ff ff15 	bl	4924 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    4afa:	4620      	mov	r0, r4
    4afc:	bd70      	pop	{r4, r5, r6, pc}
    4afe:	bf00      	nop
    4b00:	200007c4 	.word	0x200007c4

00004b04 <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
    4b04:	f04f 30ff 	mov.w	r0, #4294967295
    4b08:	4770      	bx	lr
    4b0a:	bf00      	nop

00004b0c <SharedSpiCard::errorCode() const>:
  uint8_t errorCode() const { return m_errorCode; }
    4b0c:	7c80      	ldrb	r0, [r0, #18]
    4b0e:	4770      	bx	lr

00004b10 <SharedSpiCard::errorData() const>:
  uint32_t errorData() const { return m_status; }
    4b10:	7d40      	ldrb	r0, [r0, #21]
    4b12:	4770      	bx	lr

00004b14 <SharedSpiCard::type() const>:
  uint8_t type() const { return m_type; }
    4b14:	7d80      	ldrb	r0, [r0, #22]
    4b16:	4770      	bx	lr

00004b18 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    4b18:	2001      	movs	r0, #1
    4b1a:	4770      	bx	lr

00004b1c <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    4b1c:	7f00      	ldrb	r0, [r0, #28]
    4b1e:	4770      	bx	lr

00004b20 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4b20:	4770      	bx	lr
    4b22:	bf00      	nop

00004b24 <DedicatedSpiCard::~DedicatedSpiCard()>:
    4b24:	b510      	push	{r4, lr}
    4b26:	4604      	mov	r4, r0
    4b28:	2120      	movs	r1, #32
    4b2a:	f003 fb01 	bl	8130 <operator delete(void*, unsigned int)>
    4b2e:	4620      	mov	r0, r4
    4b30:	bd10      	pop	{r4, pc}
    4b32:	bf00      	nop

00004b34 <SharedSpiCard::end()>:
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
//------------------------------------------------------------------------------
void SharedSpiCard::end() {
    4b34:	b538      	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    4b36:	7c03      	ldrb	r3, [r0, #16]
    4b38:	b153      	cbz	r3, 4b50 <SharedSpiCard::end()+0x1c>
    syncDevice();
    4b3a:	4605      	mov	r5, r0
    4b3c:	4604      	mov	r4, r0
    4b3e:	f855 3b04 	ldr.w	r3, [r5], #4
    4b42:	69db      	ldr	r3, [r3, #28]
    4b44:	4798      	blx	r3
  void spiEnd() { m_spiDriver.end(); }
    4b46:	4628      	mov	r0, r5
    4b48:	f002 fa4a 	bl	6fe0 <SdSpiArduinoDriver::end()>
    spiEnd();
    m_beginCalled = false;
    4b4c:	2300      	movs	r3, #0
    4b4e:	7423      	strb	r3, [r4, #16]
  }
}
    4b50:	bd38      	pop	{r3, r4, r5, pc}
    4b52:	bf00      	nop

00004b54 <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    4b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b58:	4e20      	ldr	r6, [pc, #128]	; (4bdc <SharedSpiCard::writeStop()+0x88>)
    4b5a:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    4b5c:	f100 0804 	add.w	r8, r0, #4
    4b60:	6835      	ldr	r5, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4b62:	f505 7516 	add.w	r5, r5, #600	; 0x258
    4b66:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    4b68:	e003      	b.n	4b72 <SharedSpiCard::writeStop()+0x1e>
    4b6a:	6833      	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4b6c:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4b6e:	041b      	lsls	r3, r3, #16
    4b70:	d410      	bmi.n	4b94 <SharedSpiCard::writeStop()+0x40>
    4b72:	4640      	mov	r0, r8
    4b74:	f002 fa38 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4b78:	28ff      	cmp	r0, #255	; 0xff
    4b7a:	4604      	mov	r4, r0
    4b7c:	d1f5      	bne.n	4b6a <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    4b7e:	21fd      	movs	r1, #253	; 0xfd
    4b80:	4640      	mov	r0, r8
    4b82:	f002 fa4f 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    4b86:	7cfb      	ldrb	r3, [r7, #19]
    4b88:	b9cb      	cbnz	r3, 4bbe <SharedSpiCard::writeStop()+0x6a>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4b8a:	2300      	movs	r3, #0
    4b8c:	2001      	movs	r0, #1
    4b8e:	753b      	strb	r3, [r7, #20]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    4b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    4b94:	231f      	movs	r3, #31
  if (m_spiActive) {
    4b96:	7cf8      	ldrb	r0, [r7, #19]
    4b98:	74bb      	strb	r3, [r7, #18]
    4b9a:	2800      	cmp	r0, #0
    4b9c:	d0f8      	beq.n	4b90 <SharedSpiCard::writeStop()+0x3c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4b9e:	7c78      	ldrb	r0, [r7, #17]
    4ba0:	2101      	movs	r1, #1
    4ba2:	f002 f961 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ba6:	21ff      	movs	r1, #255	; 0xff
    4ba8:	4640      	mov	r0, r8
    4baa:	f002 fa3b 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4bae:	4640      	mov	r0, r8
    4bb0:	f002 f9ee 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4bb4:	2300      	movs	r3, #0
  return false;
    4bb6:	4618      	mov	r0, r3
    m_spiActive = false;
    4bb8:	74fb      	strb	r3, [r7, #19]
}
    4bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4bbe:	2101      	movs	r1, #1
    4bc0:	7c78      	ldrb	r0, [r7, #17]
    4bc2:	f002 f951 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4bc6:	4621      	mov	r1, r4
    4bc8:	4640      	mov	r0, r8
    4bca:	f002 fa2b 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4bce:	4640      	mov	r0, r8
    4bd0:	f002 f9de 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4bd4:	2300      	movs	r3, #0
    4bd6:	74fb      	strb	r3, [r7, #19]
}
    4bd8:	e7d7      	b.n	4b8a <SharedSpiCard::writeStop()+0x36>
    4bda:	bf00      	nop
    4bdc:	2001ec54 	.word	0x2001ec54

00004be0 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    4be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    4be4:	7d03      	ldrb	r3, [r0, #20]
    4be6:	2b01      	cmp	r3, #1
    4be8:	d035      	beq.n	4c56 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    4bea:	7cc6      	ldrb	r6, [r0, #19]
    4bec:	4604      	mov	r4, r0
    4bee:	b14e      	cbz	r6, 4c04 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    4bf0:	3004      	adds	r0, #4
    4bf2:	f002 f9f9 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    4bf6:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4bfa:	bf18      	it	ne
    4bfc:	2501      	movne	r5, #1
}
    4bfe:	4628      	mov	r0, r5
    4c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    4c04:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    4c06:	f04f 0801 	mov.w	r8, #1
    4c0a:	4638      	mov	r0, r7
    4c0c:	f002 f9b6 	bl	6f7c <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    4c10:	4631      	mov	r1, r6
    4c12:	7c60      	ldrb	r0, [r4, #17]
    4c14:	f884 8013 	strb.w	r8, [r4, #19]
    4c18:	f002 f926 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c1c:	21ff      	movs	r1, #255	; 0xff
    4c1e:	4638      	mov	r0, r7
    4c20:	f002 fa00 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4c24:	4638      	mov	r0, r7
    4c26:	f002 f9df 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    4c2a:	7ce3      	ldrb	r3, [r4, #19]
  bool rtn = 0XFF != spiReceive();
    4c2c:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4c30:	bf18      	it	ne
    4c32:	2501      	movne	r5, #1
  if (m_spiActive) {
    4c34:	2b00      	cmp	r3, #0
    4c36:	d0e2      	beq.n	4bfe <SharedSpiCard::isBusy()+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4c38:	4641      	mov	r1, r8
    4c3a:	7c60      	ldrb	r0, [r4, #17]
    4c3c:	f002 f914 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c40:	21ff      	movs	r1, #255	; 0xff
    4c42:	4638      	mov	r0, r7
    4c44:	f002 f9ee 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4c48:	4638      	mov	r0, r7
    4c4a:	f002 f9a1 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
}
    4c4e:	4628      	mov	r0, r5
    m_spiActive = false;
    4c50:	74e6      	strb	r6, [r4, #19]
}
    4c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4c56:	2500      	movs	r5, #0
}
    4c58:	4628      	mov	r0, r5
    4c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c5e:	bf00      	nop

00004c60 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    4c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c64:	4f20      	ldr	r7, [pc, #128]	; (4ce8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    4c66:	4604      	mov	r4, r0
    4c68:	4688      	mov	r8, r1
    4c6a:	4691      	mov	r9, r2
    4c6c:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    4c6e:	1d06      	adds	r6, r0, #4
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4c70:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    4c74:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    4c76:	e003      	b.n	4c80 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    4c78:	683b      	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4c7a:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4c7c:	041b      	lsls	r3, r3, #16
    4c7e:	d40d      	bmi.n	4c9c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    4c80:	4630      	mov	r0, r6
    4c82:	f002 f9b1 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    4c86:	28ff      	cmp	r0, #255	; 0xff
    4c88:	7560      	strb	r0, [r4, #21]
    4c8a:	d0f5      	beq.n	4c78 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    4c8c:	28fe      	cmp	r0, #254	; 0xfe
    4c8e:	d01a      	beq.n	4cc6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    4c90:	2319      	movs	r3, #25
  if (m_spiActive) {
    4c92:	7ce0      	ldrb	r0, [r4, #19]
    m_errorCode = code;
    4c94:	74a3      	strb	r3, [r4, #18]
    4c96:	b930      	cbnz	r0, 4ca6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    4c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4c9c:	231e      	movs	r3, #30
  if (m_spiActive) {
    4c9e:	7ce0      	ldrb	r0, [r4, #19]
    4ca0:	74a3      	strb	r3, [r4, #18]
    4ca2:	2800      	cmp	r0, #0
    4ca4:	d0f8      	beq.n	4c98 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4ca6:	7c60      	ldrb	r0, [r4, #17]
    4ca8:	2101      	movs	r1, #1
    4caa:	f002 f8dd 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4cae:	21ff      	movs	r1, #255	; 0xff
    4cb0:	4630      	mov	r0, r6
    4cb2:	f002 f9b7 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4cb6:	4630      	mov	r0, r6
    4cb8:	f002 f96a 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4cbc:	2300      	movs	r3, #0
  return false;
    4cbe:	4618      	mov	r0, r3
    m_spiActive = false;
    4cc0:	74e3      	strb	r3, [r4, #19]
}
    4cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    4cc6:	464a      	mov	r2, r9
    4cc8:	4641      	mov	r1, r8
    4cca:	4630      	mov	r0, r6
    4ccc:	f002 f998 	bl	7000 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    4cd0:	7560      	strb	r0, [r4, #21]
    4cd2:	b938      	cbnz	r0, 4ce4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    4cd4:	4630      	mov	r0, r6
    4cd6:	f002 f987 	bl	6fe8 <SdSpiArduinoDriver::receive()>
    4cda:	4630      	mov	r0, r6
    4cdc:	f002 f984 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  return true;
    4ce0:	2001      	movs	r0, #1
    4ce2:	e7d9      	b.n	4c98 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    4ce4:	2326      	movs	r3, #38	; 0x26
    4ce6:	e7d4      	b.n	4c92 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    4ce8:	2001ec54 	.word	0x2001ec54

00004cec <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    4cec:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    4cee:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    4cf0:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    4cf2:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    4cf4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    4cf6:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    4cf8:	7507      	strb	r7, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    4cfa:	f000 f83b 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4cfe:	b9b0      	cbnz	r0, 4d2e <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    4d00:	7ce6      	ldrb	r6, [r4, #19]
    4d02:	b91e      	cbnz	r6, 4d0c <SharedSpiCard::readStop()+0x20>
  return true;
    4d04:	2601      	movs	r6, #1
}
    4d06:	4630      	mov	r0, r6
    4d08:	b003      	add	sp, #12
    4d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4d0c:	4605      	mov	r5, r0
    4d0e:	2101      	movs	r1, #1
    4d10:	7c60      	ldrb	r0, [r4, #17]
    4d12:	f002 f8a9 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d16:	1d20      	adds	r0, r4, #4
    4d18:	21ff      	movs	r1, #255	; 0xff
    4d1a:	9001      	str	r0, [sp, #4]
    4d1c:	f002 f982 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4d20:	9801      	ldr	r0, [sp, #4]
    4d22:	f002 f935 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    4d26:	4630      	mov	r0, r6
    m_spiActive = false;
    4d28:	74e5      	strb	r5, [r4, #19]
}
    4d2a:	b003      	add	sp, #12
    4d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    4d2e:	2309      	movs	r3, #9
  if (m_spiActive) {
    4d30:	7ce6      	ldrb	r6, [r4, #19]
    4d32:	74a3      	strb	r3, [r4, #18]
    4d34:	2e00      	cmp	r6, #0
    4d36:	d0e6      	beq.n	4d06 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    4d38:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4d3a:	7c60      	ldrb	r0, [r4, #17]
    4d3c:	2101      	movs	r1, #1
}
    4d3e:	463e      	mov	r6, r7
    4d40:	f002 f892 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d44:	21ff      	movs	r1, #255	; 0xff
    4d46:	4628      	mov	r0, r5
    4d48:	f002 f96c 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4d4c:	4628      	mov	r0, r5
    4d4e:	f002 f91f 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
}
    4d52:	4630      	mov	r0, r6
    m_spiActive = false;
    4d54:	74e7      	strb	r7, [r4, #19]
}
    4d56:	b003      	add	sp, #12
    4d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d5a:	bf00      	nop

00004d5c <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    4d5c:	7d02      	ldrb	r2, [r0, #20]
    4d5e:	2a02      	cmp	r2, #2
    4d60:	d003      	beq.n	4d6a <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    4d62:	2a01      	cmp	r2, #1
    4d64:	d004      	beq.n	4d70 <SharedSpiCard::syncDevice()+0x14>
}
    4d66:	2001      	movs	r0, #1
    4d68:	4770      	bx	lr
    return writeStop();
    4d6a:	6803      	ldr	r3, [r0, #0]
    4d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4d6e:	4718      	bx	r3
    return readStop();
    4d70:	f7ff bfbc 	b.w	4cec <SharedSpiCard::readStop()>

00004d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    4d78:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4d7a:	b082      	sub	sp, #8
    4d7c:	460f      	mov	r7, r1
    4d7e:	4936      	ldr	r1, [pc, #216]	; (4e58 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>)
    4d80:	9201      	str	r2, [sp, #4]
    4d82:	4606      	mov	r6, r0
  if (!syncDevice()) {
    4d84:	69da      	ldr	r2, [r3, #28]
    4d86:	428a      	cmp	r2, r1
    4d88:	d15d      	bne.n	4e46 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd2>
  if (m_state == WRITE_STATE) {
    4d8a:	7d02      	ldrb	r2, [r0, #20]
    4d8c:	2a02      	cmp	r2, #2
    4d8e:	d043      	beq.n	4e18 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
  if (m_state == READ_STATE) {
    4d90:	2a01      	cmp	r2, #1
    4d92:	d05c      	beq.n	4e4e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xda>
  if (!m_spiActive) {
    4d94:	7cf4      	ldrb	r4, [r6, #19]
    4d96:	2c00      	cmp	r4, #0
    4d98:	d046      	beq.n	4e28 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb4>
  void spiActivate() { m_spiDriver.activate(); }
    4d9a:	1d35      	adds	r5, r6, #4
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    4d9c:	b19f      	cbz	r7, 4dc6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    4d9e:	2f0c      	cmp	r7, #12
    4da0:	d011      	beq.n	4dc6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    4da2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4e5c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe8>
    4da6:	f8d8 4000 	ldr.w	r4, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4daa:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    4dae:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    4db0:	e004      	b.n	4dbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    4db2:	f8d8 3000 	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4db6:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    4db8:	0419      	lsls	r1, r3, #16
    4dba:	d431      	bmi.n	4e20 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    return m_spiDriver.receive();
    4dbc:	4628      	mov	r0, r5
    4dbe:	f002 f913 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4dc2:	28ff      	cmp	r0, #255	; 0xff
    4dc4:	d1f5      	bne.n	4db2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
    m_spiDriver.send(data);
    4dc6:	f10d 0804 	add.w	r8, sp, #4
    4dca:	ac02      	add	r4, sp, #8
    4dcc:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    4dd0:	4628      	mov	r0, r5
    4dd2:	f002 f927 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
    4dd6:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    4dda:	4628      	mov	r0, r5
    4ddc:	f002 f922 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    4de0:	4544      	cmp	r4, r8
    4de2:	d1f8      	bne.n	4dd6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    4de4:	2f00      	cmp	r7, #0
    4de6:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    4de8:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    4dec:	bf0c      	ite	eq
    4dee:	2195      	moveq	r1, #149	; 0x95
    4df0:	2187      	movne	r1, #135	; 0x87
    4df2:	f002 f917 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4df6:	4628      	mov	r0, r5
    4df8:	f002 f8f6 	bl	6fe8 <SdSpiArduinoDriver::receive()>
    4dfc:	4628      	mov	r0, r5
    4dfe:	f002 f8f3 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    4e02:	0602      	lsls	r2, r0, #24
    4e04:	f104 33ff 	add.w	r3, r4, #4294967295
    m_status = spiReceive();
    4e08:	7570      	strb	r0, [r6, #21]
  } while (m_status & 0X80 && ++n < 10);
    4e0a:	d502      	bpl.n	4e12 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9e>
    4e0c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    4e10:	d1f4      	bne.n	4dfc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x88>
}
    4e12:	b002      	add	sp, #8
    4e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    4e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4e1a:	4798      	blx	r3
  if (!syncDevice()) {
    4e1c:	2800      	cmp	r0, #0
    4e1e:	d1b9      	bne.n	4d94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    4e20:	20ff      	movs	r0, #255	; 0xff
}
    4e22:	b002      	add	sp, #8
    4e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    4e28:	1d35      	adds	r5, r6, #4
    4e2a:	4628      	mov	r0, r5
    4e2c:	f002 f8a6 	bl	6f7c <SdSpiArduinoDriver::activate()>
    m_spiActive = true;
    4e30:	2301      	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
    4e32:	4621      	mov	r1, r4
    4e34:	7c70      	ldrb	r0, [r6, #17]
    4e36:	74f3      	strb	r3, [r6, #19]
    4e38:	f002 f816 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4e3c:	21ff      	movs	r1, #255	; 0xff
    4e3e:	4628      	mov	r0, r5
    4e40:	f002 f8f0 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
}
    4e44:	e7aa      	b.n	4d9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    4e46:	4790      	blx	r2
    4e48:	2800      	cmp	r0, #0
    4e4a:	d0e9      	beq.n	4e20 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    4e4c:	e7a2      	b.n	4d94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return readStop();
    4e4e:	f7ff ff4d 	bl	4cec <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    4e52:	2800      	cmp	r0, #0
    4e54:	d0e4      	beq.n	4e20 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    4e56:	e79d      	b.n	4d94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    4e58:	00004d5d 	.word	0x00004d5d
    4e5c:	2001ec54 	.word	0x2001ec54

00004e60 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    4e60:	b570      	push	{r4, r5, r6, lr}
    4e62:	460c      	mov	r4, r1
    4e64:	b082      	sub	sp, #8
    4e66:	4616      	mov	r6, r2
  if (cardCommand(CMD6, arg)) {
    4e68:	2106      	movs	r1, #6
    4e6a:	4622      	mov	r2, r4
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    4e6c:	4604      	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    4e6e:	f7ff ff81 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4e72:	b1b0      	cbz	r0, 4ea2 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x42>
    m_errorCode = code;
    4e74:	2304      	movs	r3, #4
    4e76:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    4e78:	7ce0      	ldrb	r0, [r4, #19]
    4e7a:	b908      	cbnz	r0, 4e80 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x20>
}
    4e7c:	b002      	add	sp, #8
    4e7e:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    4e80:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4e82:	7c60      	ldrb	r0, [r4, #17]
    4e84:	2101      	movs	r1, #1
    4e86:	f001 ffef 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4e8a:	21ff      	movs	r1, #255	; 0xff
    4e8c:	4628      	mov	r0, r5
    4e8e:	f002 f8c9 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4e92:	4628      	mov	r0, r5
    4e94:	f002 f87c 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4e98:	2300      	movs	r3, #0
  return false;
    4e9a:	4618      	mov	r0, r3
    m_spiActive = false;
    4e9c:	74e3      	strb	r3, [r4, #19]
}
    4e9e:	b002      	add	sp, #8
    4ea0:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(status, 64)) {
    4ea2:	4605      	mov	r5, r0
    4ea4:	2240      	movs	r2, #64	; 0x40
    4ea6:	4631      	mov	r1, r6
    4ea8:	4620      	mov	r0, r4
    4eaa:	f7ff fed9 	bl	4c60 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    4eae:	2800      	cmp	r0, #0
    4eb0:	d0e2      	beq.n	4e78 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x18>
  if (m_spiActive) {
    4eb2:	7ce6      	ldrb	r6, [r4, #19]
    4eb4:	2e00      	cmp	r6, #0
    4eb6:	d0e1      	beq.n	4e7c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4eb8:	7c60      	ldrb	r0, [r4, #17]
    4eba:	2101      	movs	r1, #1
    4ebc:	f001 ffd4 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ec0:	1d20      	adds	r0, r4, #4
    4ec2:	21ff      	movs	r1, #255	; 0xff
    4ec4:	9001      	str	r0, [sp, #4]
    4ec6:	f002 f8ad 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4eca:	9801      	ldr	r0, [sp, #4]
    4ecc:	f002 f860 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
}
    4ed0:	4630      	mov	r0, r6
    m_spiActive = false;
    4ed2:	74e5      	strb	r5, [r4, #19]
}
    4ed4:	b002      	add	sp, #8
    4ed6:	bd70      	pop	{r4, r5, r6, pc}

00004ed8 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    4eda:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4edc:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    4ede:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4ee0:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    4ee2:	f7ff ff47 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4ee6:	b9e0      	cbnz	r0, 4f22 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    4ee8:	1d37      	adds	r7, r6, #4
    4eea:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    4eec:	4638      	mov	r0, r7
    4eee:	f002 f87b 	bl	6fe8 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    4ef2:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    4ef6:	42a5      	cmp	r5, r4
    4ef8:	d1f8      	bne.n	4eec <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    4efa:	7cf4      	ldrb	r4, [r6, #19]
    4efc:	b914      	cbnz	r4, 4f04 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    4efe:	2401      	movs	r4, #1
}
    4f00:	4620      	mov	r0, r4
    4f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4f04:	7c70      	ldrb	r0, [r6, #17]
    4f06:	2101      	movs	r1, #1
    4f08:	f001 ffae 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f0c:	21ff      	movs	r1, #255	; 0xff
    4f0e:	4638      	mov	r0, r7
    4f10:	f002 f888 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4f14:	4638      	mov	r0, r7
    4f16:	f002 f83b 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4f1a:	2300      	movs	r3, #0
}
    4f1c:	4620      	mov	r0, r4
    m_spiActive = false;
    4f1e:	74f3      	strb	r3, [r6, #19]
}
    4f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    4f22:	2312      	movs	r3, #18
  if (m_spiActive) {
    4f24:	7cf4      	ldrb	r4, [r6, #19]
    4f26:	74b3      	strb	r3, [r6, #18]
    4f28:	2c00      	cmp	r4, #0
    4f2a:	d0e9      	beq.n	4f00 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    4f2c:	1d34      	adds	r4, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4f2e:	7c70      	ldrb	r0, [r6, #17]
    4f30:	2101      	movs	r1, #1
    4f32:	f001 ff99 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f36:	21ff      	movs	r1, #255	; 0xff
    4f38:	4620      	mov	r0, r4
    4f3a:	f002 f873 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4f3e:	4620      	mov	r0, r4
    4f40:	f002 f826 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4f44:	2300      	movs	r3, #0
  return false;
    4f46:	461c      	mov	r4, r3
    m_spiActive = false;
    4f48:	74f3      	strb	r3, [r6, #19]
}
    4f4a:	4620      	mov	r0, r4
    4f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f4e:	bf00      	nop

00004f50 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    4f50:	b570      	push	{r4, r5, r6, lr}
    4f52:	4616      	mov	r6, r2
    4f54:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    4f56:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    4f58:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    4f5a:	f7ff ff0b 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4f5e:	b1b0      	cbz	r0, 4f8e <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    4f60:	231c      	movs	r3, #28
    4f62:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    4f64:	7ce0      	ldrb	r0, [r4, #19]
    4f66:	b908      	cbnz	r0, 4f6c <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    4f68:	b002      	add	sp, #8
    4f6a:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    4f6c:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4f6e:	7c60      	ldrb	r0, [r4, #17]
    4f70:	2101      	movs	r1, #1
    4f72:	f001 ff79 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f76:	21ff      	movs	r1, #255	; 0xff
    4f78:	4628      	mov	r0, r5
    4f7a:	f002 f853 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4f7e:	4628      	mov	r0, r5
    4f80:	f002 f806 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4f84:	2300      	movs	r3, #0
  return false;
    4f86:	4618      	mov	r0, r3
    m_spiActive = false;
    4f88:	74e3      	strb	r3, [r4, #19]
}
    4f8a:	b002      	add	sp, #8
    4f8c:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    4f8e:	4605      	mov	r5, r0
    4f90:	2210      	movs	r2, #16
    4f92:	4631      	mov	r1, r6
    4f94:	4620      	mov	r0, r4
    4f96:	f7ff fe63 	bl	4c60 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    4f9a:	2800      	cmp	r0, #0
    4f9c:	d0e2      	beq.n	4f64 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    4f9e:	7ce6      	ldrb	r6, [r4, #19]
    4fa0:	2e00      	cmp	r6, #0
    4fa2:	d0e1      	beq.n	4f68 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4fa4:	7c60      	ldrb	r0, [r4, #17]
    4fa6:	2101      	movs	r1, #1
    4fa8:	f001 ff5e 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4fac:	1d20      	adds	r0, r4, #4
    4fae:	21ff      	movs	r1, #255	; 0xff
    4fb0:	9001      	str	r0, [sp, #4]
    4fb2:	f002 f837 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4fb6:	9801      	ldr	r0, [sp, #4]
    4fb8:	f001 ffea 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
}
    4fbc:	4630      	mov	r0, r6
    m_spiActive = false;
    4fbe:	74e5      	strb	r5, [r4, #19]
}
    4fc0:	b002      	add	sp, #8
    4fc2:	bd70      	pop	{r4, r5, r6, pc}

00004fc4 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? csd.capacity() : 0;
    4fc4:	6803      	ldr	r3, [r0, #0]
    4fc6:	4a24      	ldr	r2, [pc, #144]	; (5058 <SharedSpiCard::sectorCount()+0x94>)
    4fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4fca:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    4fcc:	b500      	push	{lr}
    4fce:	b085      	sub	sp, #20
    4fd0:	d10e      	bne.n	4ff0 <SharedSpiCard::sectorCount()+0x2c>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    4fd2:	466a      	mov	r2, sp
    4fd4:	2109      	movs	r1, #9
    4fd6:	f7ff ffbb 	bl	4f50 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? csd.capacity() : 0;
    4fda:	b130      	cbz	r0, 4fea <SharedSpiCard::sectorCount()+0x26>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    4fdc:	f89d 3000 	ldrb.w	r3, [sp]
    if (ver == 0) {
    4fe0:	099b      	lsrs	r3, r3, #6
    4fe2:	d008      	beq.n	4ff6 <SharedSpiCard::sectorCount()+0x32>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    4fe4:	2b01      	cmp	r3, #1
    4fe6:	d027      	beq.n	5038 <SharedSpiCard::sectorCount()+0x74>
    4fe8:	2000      	movs	r0, #0
}
    4fea:	b005      	add	sp, #20
    4fec:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? csd.capacity() : 0;
    4ff0:	4669      	mov	r1, sp
    4ff2:	4798      	blx	r3
    4ff4:	e7f1      	b.n	4fda <SharedSpiCard::sectorCount()+0x16>
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    4ff6:	f89d 3009 	ldrb.w	r3, [sp, #9]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    4ffa:	f89d 2006 	ldrb.w	r2, [sp, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    4ffe:	f89d 0008 	ldrb.w	r0, [sp, #8]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5002:	005b      	lsls	r3, r3, #1
    5004:	f89d 100a 	ldrb.w	r1, [sp, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5008:	0292      	lsls	r2, r2, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    500a:	f89d c007 	ldrb.w	ip, [sp, #7]
    500e:	0980      	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5010:	f003 0306 	and.w	r3, r3, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5014:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5018:	ea40 008c 	orr.w	r0, r0, ip, lsl #2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    501c:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
      uint8_t read_bl_len = csd[5] & 15;
    5020:	f89d 1005 	ldrb.w	r1, [sp, #5]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5024:	4310      	orrs	r0, r2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5026:	f001 020f 	and.w	r2, r1, #15
    502a:	3001      	adds	r0, #1
    502c:	4413      	add	r3, r2
    502e:	3b07      	subs	r3, #7
    5030:	4098      	lsls	r0, r3
}
    5032:	b005      	add	sp, #20
    5034:	f85d fb04 	ldr.w	pc, [sp], #4
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5038:	f89d 3007 	ldrb.w	r3, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
    503c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5040:	041b      	lsls	r3, r3, #16
      c_size |= csd[9];
    5042:	ba40      	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5044:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    5048:	b280      	uxth	r0, r0
    504a:	4318      	orrs	r0, r3
      return (c_size + 1) << 10;
    504c:	3001      	adds	r0, #1
    504e:	0280      	lsls	r0, r0, #10
    5050:	b005      	add	sp, #20
    5052:	f85d fb04 	ldr.w	pc, [sp], #4
    5056:	bf00      	nop
    5058:	00005429 	.word	0x00005429

0000505c <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    505c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    505e:	460a      	mov	r2, r1
    5060:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    5062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::readStart(uint32_t sector) {
    5064:	b083      	sub	sp, #12
    5066:	4d16      	ldr	r5, [pc, #88]	; (50c0 <SharedSpiCard::readStart(unsigned long)+0x64>)
    5068:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    506a:	42ab      	cmp	r3, r5
    506c:	d124      	bne.n	50b8 <SharedSpiCard::readStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    506e:	7d80      	ldrb	r0, [r0, #22]
    5070:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    5072:	f04f 0112 	mov.w	r1, #18
    5076:	4620      	mov	r0, r4
    sector <<= 9;
    5078:	bf18      	it	ne
    507a:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    507c:	f7ff fe7a 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5080:	b920      	cbnz	r0, 508c <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    5082:	2301      	movs	r3, #1
  return true;
    5084:	4618      	mov	r0, r3
  m_state = READ_STATE;
    5086:	7523      	strb	r3, [r4, #20]
}
    5088:	b003      	add	sp, #12
    508a:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    508c:	230c      	movs	r3, #12
  if (m_spiActive) {
    508e:	7ce0      	ldrb	r0, [r4, #19]
    5090:	74a3      	strb	r3, [r4, #18]
    5092:	2800      	cmp	r0, #0
    5094:	d0f8      	beq.n	5088 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    5096:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5098:	7c60      	ldrb	r0, [r4, #17]
    509a:	2101      	movs	r1, #1
    509c:	f001 fee4 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    50a0:	21ff      	movs	r1, #255	; 0xff
    50a2:	4628      	mov	r0, r5
    50a4:	f001 ffbe 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    50a8:	4628      	mov	r0, r5
    50aa:	f001 ff71 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    50ae:	2300      	movs	r3, #0
}
    50b0:	4618      	mov	r0, r3
    m_spiActive = false;
    50b2:	74e3      	strb	r3, [r4, #19]
}
    50b4:	b003      	add	sp, #12
    50b6:	bd30      	pop	{r4, r5, pc}
    50b8:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    50ba:	4798      	blx	r3
    50bc:	9a01      	ldr	r2, [sp, #4]
    50be:	e7d7      	b.n	5070 <SharedSpiCard::readStart(unsigned long)+0x14>
    50c0:	00004b15 	.word	0x00004b15

000050c4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    50c4:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    50c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    50ca:	695f      	ldr	r7, [r3, #20]
    50cc:	4b16      	ldr	r3, [pc, #88]	; (5128 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    50ce:	429f      	cmp	r7, r3
    50d0:	d11f      	bne.n	5112 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    50d2:	7d03      	ldrb	r3, [r0, #20]
    50d4:	4604      	mov	r4, r0
    50d6:	460d      	mov	r5, r1
    50d8:	4616      	mov	r6, r2
    50da:	2b01      	cmp	r3, #1
    50dc:	d102      	bne.n	50e4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    50de:	6983      	ldr	r3, [r0, #24]
    50e0:	4299      	cmp	r1, r3
    50e2:	d005      	beq.n	50f0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    50e4:	4629      	mov	r1, r5
    50e6:	4620      	mov	r0, r4
    50e8:	f7ff ffb8 	bl	505c <SharedSpiCard::readStart(unsigned long)>
    50ec:	b170      	cbz	r0, 510c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    50ee:	61a5      	str	r5, [r4, #24]
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    50f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    50f4:	4631      	mov	r1, r6
    50f6:	4620      	mov	r0, r4
    50f8:	f7ff fdb2 	bl	4c60 <SharedSpiCard::readData(unsigned char*, unsigned int)>
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    50fc:	b130      	cbz	r0, 510c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
  }
  m_curSector += ns;
    50fe:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    5100:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    5102:	3301      	adds	r3, #1
    5104:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    5106:	b148      	cbz	r0, 511c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    5108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

fail:
  return false;
    510c:	2000      	movs	r0, #0
}
    510e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    5112:	46bc      	mov	ip, r7
    5114:	2301      	movs	r3, #1
}
    5116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    511a:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    511c:	4620      	mov	r0, r4
}
    511e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    5122:	f7ff bde3 	b.w	4cec <SharedSpiCard::readStop()>
    5126:	bf00      	nop
    5128:	000054a1 	.word	0x000054a1

0000512c <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    512c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    512e:	460a      	mov	r2, r1
    5130:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    5132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeStart(uint32_t sector) {
    5134:	b083      	sub	sp, #12
    5136:	4d16      	ldr	r5, [pc, #88]	; (5190 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    5138:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    513a:	42ab      	cmp	r3, r5
    513c:	d124      	bne.n	5188 <SharedSpiCard::writeStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    513e:	7d80      	ldrb	r0, [r0, #22]
    5140:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    5142:	f04f 0119 	mov.w	r1, #25
    5146:	4620      	mov	r0, r4
    sector <<= 9;
    5148:	bf18      	it	ne
    514a:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    514c:	f7ff fe12 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5150:	b920      	cbnz	r0, 515c <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    5152:	2302      	movs	r3, #2
  return true;
    5154:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    5156:	7523      	strb	r3, [r4, #20]
}
    5158:	b003      	add	sp, #12
    515a:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    515c:	230e      	movs	r3, #14
  if (m_spiActive) {
    515e:	7ce0      	ldrb	r0, [r4, #19]
    5160:	74a3      	strb	r3, [r4, #18]
    5162:	2800      	cmp	r0, #0
    5164:	d0f8      	beq.n	5158 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    5166:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5168:	7c60      	ldrb	r0, [r4, #17]
    516a:	2101      	movs	r1, #1
    516c:	f001 fe7c 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5170:	21ff      	movs	r1, #255	; 0xff
    5172:	4628      	mov	r0, r5
    5174:	f001 ff56 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5178:	4628      	mov	r0, r5
    517a:	f001 ff09 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    517e:	2300      	movs	r3, #0
}
    5180:	4618      	mov	r0, r3
    m_spiActive = false;
    5182:	74e3      	strb	r3, [r4, #19]
}
    5184:	b003      	add	sp, #12
    5186:	bd30      	pop	{r4, r5, pc}
    5188:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    518a:	4798      	blx	r3
    518c:	9a01      	ldr	r2, [sp, #4]
    518e:	e7d7      	b.n	5140 <SharedSpiCard::writeStart(unsigned long)+0x14>
    5190:	00004b15 	.word	0x00004b15

00005194 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    5194:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5196:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    519a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    519c:	4617      	mov	r7, r2
    519e:	4a41      	ldr	r2, [pc, #260]	; (52a4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    51a0:	b085      	sub	sp, #20
    51a2:	4604      	mov	r4, r0
    51a4:	460e      	mov	r6, r1
    51a6:	4293      	cmp	r3, r2
    51a8:	d145      	bne.n	5236 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    51aa:	466a      	mov	r2, sp
    51ac:	2109      	movs	r1, #9
    51ae:	f7ff fecf 	bl	4f50 <SharedSpiCard::readRegister(unsigned char, void*)>
    51b2:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    51b4:	b1b5      	cbz	r5, 51e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    } else {
      return 0;
    }
  }
  /** \return true if erase granularity is single block. */
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    51b6:	f89d 300a 	ldrb.w	r3, [sp, #10]
  if (!csd.eraseSingleBlock()) {
    51ba:	065a      	lsls	r2, r3, #25
    51bc:	d518      	bpl.n	51f0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    51be:	7da3      	ldrb	r3, [r4, #22]
    51c0:	2b03      	cmp	r3, #3
    51c2:	d001      	beq.n	51c8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    51c4:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    51c6:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    51c8:	4632      	mov	r2, r6
    51ca:	2120      	movs	r1, #32
    51cc:	4620      	mov	r0, r4
    51ce:	f7ff fdd1 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    51d2:	b928      	cbnz	r0, 51e0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    51d4:	463a      	mov	r2, r7
    51d6:	2121      	movs	r1, #33	; 0x21
    51d8:	4620      	mov	r0, r4
    51da:	f7ff fdcb 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    51de:	b370      	cbz	r0, 523e <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    51e0:	2327      	movs	r3, #39	; 0x27
    51e2:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    51e4:	7ce5      	ldrb	r5, [r4, #19]
    51e6:	b99d      	cbnz	r5, 5210 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    51e8:	4628      	mov	r0, r5
    51ea:	b005      	add	sp, #20
    51ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  /** \return erase size in 512 byte blocks if eraseSingleBlock is false. */
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    51f0:	005b      	lsls	r3, r3, #1
    51f2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    51f6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    51fa:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    51fe:	1c7a      	adds	r2, r7, #1
    5200:	4332      	orrs	r2, r6
    5202:	4213      	tst	r3, r2
    5204:	d0db      	beq.n	51be <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    5206:	2328      	movs	r3, #40	; 0x28
  if (m_spiActive) {
    5208:	7ce5      	ldrb	r5, [r4, #19]
    520a:	74a3      	strb	r3, [r4, #18]
    520c:	2d00      	cmp	r5, #0
    520e:	d0eb      	beq.n	51e8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    5210:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5212:	7c60      	ldrb	r0, [r4, #17]
    5214:	2101      	movs	r1, #1
    5216:	f001 fe27 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    521a:	21ff      	movs	r1, #255	; 0xff
    521c:	4628      	mov	r0, r5
    521e:	f001 ff01 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5222:	4628      	mov	r0, r5
    5224:	f001 feb4 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5228:	2300      	movs	r3, #0
  return false;
    522a:	461d      	mov	r5, r3
    m_spiActive = false;
    522c:	74e3      	strb	r3, [r4, #19]
}
    522e:	4628      	mov	r0, r5
    5230:	b005      	add	sp, #20
    5232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    5236:	4669      	mov	r1, sp
    5238:	4798      	blx	r3
    523a:	4605      	mov	r5, r0
    523c:	e7ba      	b.n	51b4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      cardCommand(CMD38, 0)) {
    523e:	4602      	mov	r2, r0
    5240:	2126      	movs	r1, #38	; 0x26
    5242:	4620      	mov	r0, r4
    5244:	f7ff fd96 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    5248:	2800      	cmp	r0, #0
    524a:	d1c9      	bne.n	51e0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    524c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 52a8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5250:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    5254:	f104 0904 	add.w	r9, r4, #4
    5258:	f8d8 3000 	ldr.w	r3, [r8]
    525c:	441f      	add	r7, r3
    525e:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    5260:	e004      	b.n	526c <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    5262:	f8d8 3000 	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5266:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    5268:	041b      	lsls	r3, r3, #16
    526a:	d417      	bmi.n	529c <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    526c:	4648      	mov	r0, r9
    526e:	f001 febb 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    5272:	28ff      	cmp	r0, #255	; 0xff
    5274:	4606      	mov	r6, r0
    5276:	d1f4      	bne.n	5262 <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    5278:	7ce3      	ldrb	r3, [r4, #19]
    527a:	2b00      	cmp	r3, #0
    527c:	d0b4      	beq.n	51e8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    527e:	2101      	movs	r1, #1
    5280:	7c60      	ldrb	r0, [r4, #17]
  return true;
    5282:	461d      	mov	r5, r3
    5284:	f001 fdf0 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5288:	4631      	mov	r1, r6
    528a:	4648      	mov	r0, r9
    528c:	f001 feca 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5290:	4648      	mov	r0, r9
    5292:	f001 fe7d 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5296:	2300      	movs	r3, #0
    5298:	74e3      	strb	r3, [r4, #19]
}
    529a:	e7a5      	b.n	51e8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    529c:	2329      	movs	r3, #41	; 0x29
    529e:	74a3      	strb	r3, [r4, #18]
    goto fail;
    52a0:	e7a0      	b.n	51e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    52a2:	bf00      	nop
    52a4:	00005429 	.word	0x00005429
    52a8:	2001ec54 	.word	0x2001ec54

000052ac <SharedSpiCard::readSCR(scr_t*)>:
bool SharedSpiCard::readSCR(scr_t* scr) {
    52ac:	b570      	push	{r4, r5, r6, lr}
    52ae:	4604      	mov	r4, r0
    52b0:	b082      	sub	sp, #8
    cardCommand(CMD55, 0);
    52b2:	2200      	movs	r2, #0
    52b4:	460e      	mov	r6, r1
    52b6:	2137      	movs	r1, #55	; 0x37
    52b8:	f7ff fd5c 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    52bc:	2200      	movs	r2, #0
    52be:	2133      	movs	r1, #51	; 0x33
    52c0:	4620      	mov	r0, r4
    52c2:	f7ff fd57 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD51, 0)) {
    52c6:	b1b0      	cbz	r0, 52f6 <SharedSpiCard::readSCR(scr_t*)+0x4a>
    m_errorCode = code;
    52c8:	2318      	movs	r3, #24
    52ca:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    52cc:	7ce0      	ldrb	r0, [r4, #19]
    52ce:	b908      	cbnz	r0, 52d4 <SharedSpiCard::readSCR(scr_t*)+0x28>
}
    52d0:	b002      	add	sp, #8
    52d2:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    52d4:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    52d6:	7c60      	ldrb	r0, [r4, #17]
    52d8:	2101      	movs	r1, #1
    52da:	f001 fdc5 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    52de:	21ff      	movs	r1, #255	; 0xff
    52e0:	4628      	mov	r0, r5
    52e2:	f001 fe9f 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    52e6:	4628      	mov	r0, r5
    52e8:	f001 fe52 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    52ec:	2300      	movs	r3, #0
  return false;
    52ee:	4618      	mov	r0, r3
    m_spiActive = false;
    52f0:	74e3      	strb	r3, [r4, #19]
}
    52f2:	b002      	add	sp, #8
    52f4:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, sizeof(scr_t))) {
    52f6:	4605      	mov	r5, r0
    52f8:	2208      	movs	r2, #8
    52fa:	4631      	mov	r1, r6
    52fc:	4620      	mov	r0, r4
    52fe:	f7ff fcaf 	bl	4c60 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5302:	2800      	cmp	r0, #0
    5304:	d0e2      	beq.n	52cc <SharedSpiCard::readSCR(scr_t*)+0x20>
  if (m_spiActive) {
    5306:	7ce6      	ldrb	r6, [r4, #19]
    5308:	2e00      	cmp	r6, #0
    530a:	d0e1      	beq.n	52d0 <SharedSpiCard::readSCR(scr_t*)+0x24>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    530c:	7c60      	ldrb	r0, [r4, #17]
    530e:	2101      	movs	r1, #1
    5310:	f001 fdaa 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5314:	1d20      	adds	r0, r4, #4
    5316:	21ff      	movs	r1, #255	; 0xff
    5318:	9001      	str	r0, [sp, #4]
    531a:	f001 fe83 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    531e:	9801      	ldr	r0, [sp, #4]
    5320:	f001 fe36 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
}
    5324:	4630      	mov	r0, r6
    m_spiActive = false;
    5326:	74e5      	strb	r5, [r4, #19]
}
    5328:	b002      	add	sp, #8
    532a:	bd70      	pop	{r4, r5, r6, pc}

0000532c <SharedSpiCard::readSDS(sds_t*)>:
bool SharedSpiCard::readSDS(sds_t* sds) {
    532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    532e:	4604      	mov	r4, r0
    cardCommand(CMD55, 0);
    5330:	2200      	movs	r2, #0
    5332:	460d      	mov	r5, r1
    5334:	2137      	movs	r1, #55	; 0x37
    5336:	f7ff fd1d 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    533a:	2200      	movs	r2, #0
    533c:	210d      	movs	r1, #13
    533e:	4620      	mov	r0, r4
    5340:	f7ff fd18 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    5344:	b1a0      	cbz	r0, 5370 <SharedSpiCard::readSDS(sds_t*)+0x44>
    m_errorCode = code;
    5346:	2315      	movs	r3, #21
    5348:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    534a:	7ce0      	ldrb	r0, [r4, #19]
    534c:	b900      	cbnz	r0, 5350 <SharedSpiCard::readSDS(sds_t*)+0x24>
}
    534e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_spiDriver.send(data);
    5350:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5352:	7c60      	ldrb	r0, [r4, #17]
    5354:	2101      	movs	r1, #1
    5356:	f001 fd87 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    535a:	21ff      	movs	r1, #255	; 0xff
    535c:	4628      	mov	r0, r5
    535e:	f001 fe61 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5362:	4628      	mov	r0, r5
    5364:	f001 fe14 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5368:	2300      	movs	r3, #0
  return false;
    536a:	4618      	mov	r0, r3
    m_spiActive = false;
    536c:	74e3      	strb	r3, [r4, #19]
}
    536e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_spiDriver.receive();
    5370:	1d27      	adds	r7, r4, #4
    5372:	4638      	mov	r0, r7
    5374:	f001 fe38 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    5378:	4606      	mov	r6, r0
    537a:	2800      	cmp	r0, #0
    537c:	d1e3      	bne.n	5346 <SharedSpiCard::readSDS(sds_t*)+0x1a>
  if (!readData(dst, sizeof(sds_t))) {
    537e:	2240      	movs	r2, #64	; 0x40
    5380:	4629      	mov	r1, r5
    5382:	4620      	mov	r0, r4
    5384:	f7ff fc6c 	bl	4c60 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5388:	2800      	cmp	r0, #0
    538a:	d0de      	beq.n	534a <SharedSpiCard::readSDS(sds_t*)+0x1e>
  if (m_spiActive) {
    538c:	7ce5      	ldrb	r5, [r4, #19]
    538e:	2d00      	cmp	r5, #0
    5390:	d0dd      	beq.n	534e <SharedSpiCard::readSDS(sds_t*)+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5392:	7c60      	ldrb	r0, [r4, #17]
    5394:	2101      	movs	r1, #1
    5396:	f001 fd67 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    539a:	21ff      	movs	r1, #255	; 0xff
    539c:	4638      	mov	r0, r7
    539e:	f001 fe41 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    53a2:	4638      	mov	r0, r7
    53a4:	f001 fdf4 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
  return true;
    53a8:	4628      	mov	r0, r5
    m_spiActive = false;
    53aa:	74e6      	strb	r6, [r4, #19]
}
    53ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53ae:	bf00      	nop

000053b0 <SharedSpiCard::readCID(cid_t*)>:
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    53b0:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    53b2:	2200      	movs	r2, #0
    53b4:	b082      	sub	sp, #8
    53b6:	460e      	mov	r6, r1
    53b8:	210a      	movs	r1, #10
    53ba:	4604      	mov	r4, r0
    53bc:	f7ff fcda 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    53c0:	b1b0      	cbz	r0, 53f0 <SharedSpiCard::readCID(cid_t*)+0x40>
    m_errorCode = code;
    53c2:	231c      	movs	r3, #28
    53c4:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    53c6:	7ce0      	ldrb	r0, [r4, #19]
    53c8:	b908      	cbnz	r0, 53ce <SharedSpiCard::readCID(cid_t*)+0x1e>
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    53ca:	b002      	add	sp, #8
    53cc:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    53ce:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    53d0:	7c60      	ldrb	r0, [r4, #17]
    53d2:	2101      	movs	r1, #1
    53d4:	f001 fd48 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    53d8:	21ff      	movs	r1, #255	; 0xff
    53da:	4628      	mov	r0, r5
    53dc:	f001 fe22 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    53e0:	4628      	mov	r0, r5
    53e2:	f001 fdd5 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    53e6:	2300      	movs	r3, #0
  return false;
    53e8:	4618      	mov	r0, r3
    m_spiActive = false;
    53ea:	74e3      	strb	r3, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    53ec:	b002      	add	sp, #8
    53ee:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    53f0:	4605      	mov	r5, r0
    53f2:	2210      	movs	r2, #16
    53f4:	4631      	mov	r1, r6
    53f6:	4620      	mov	r0, r4
    53f8:	f7ff fc32 	bl	4c60 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    53fc:	2800      	cmp	r0, #0
    53fe:	d0e2      	beq.n	53c6 <SharedSpiCard::readCID(cid_t*)+0x16>
  if (m_spiActive) {
    5400:	7ce6      	ldrb	r6, [r4, #19]
    5402:	2e00      	cmp	r6, #0
    5404:	d0e1      	beq.n	53ca <SharedSpiCard::readCID(cid_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5406:	7c60      	ldrb	r0, [r4, #17]
    5408:	2101      	movs	r1, #1
    540a:	f001 fd2d 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    540e:	1d20      	adds	r0, r4, #4
    5410:	21ff      	movs	r1, #255	; 0xff
    5412:	9001      	str	r0, [sp, #4]
    5414:	f001 fe06 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5418:	9801      	ldr	r0, [sp, #4]
    541a:	f001 fdb9 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
}
    541e:	4630      	mov	r0, r6
    m_spiActive = false;
    5420:	74e5      	strb	r5, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    5422:	b002      	add	sp, #8
    5424:	bd70      	pop	{r4, r5, r6, pc}
    5426:	bf00      	nop

00005428 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5428:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    542a:	2200      	movs	r2, #0
    542c:	b082      	sub	sp, #8
    542e:	460e      	mov	r6, r1
    5430:	2109      	movs	r1, #9
    5432:	4604      	mov	r4, r0
    5434:	f7ff fc9e 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5438:	b1b0      	cbz	r0, 5468 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    543a:	231c      	movs	r3, #28
    543c:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    543e:	7ce0      	ldrb	r0, [r4, #19]
    5440:	b908      	cbnz	r0, 5446 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5442:	b002      	add	sp, #8
    5444:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5446:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5448:	7c60      	ldrb	r0, [r4, #17]
    544a:	2101      	movs	r1, #1
    544c:	f001 fd0c 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5450:	21ff      	movs	r1, #255	; 0xff
    5452:	4628      	mov	r0, r5
    5454:	f001 fde6 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5458:	4628      	mov	r0, r5
    545a:	f001 fd99 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    545e:	2300      	movs	r3, #0
  return false;
    5460:	4618      	mov	r0, r3
    m_spiActive = false;
    5462:	74e3      	strb	r3, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5464:	b002      	add	sp, #8
    5466:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    5468:	4605      	mov	r5, r0
    546a:	2210      	movs	r2, #16
    546c:	4631      	mov	r1, r6
    546e:	4620      	mov	r0, r4
    5470:	f7ff fbf6 	bl	4c60 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5474:	2800      	cmp	r0, #0
    5476:	d0e2      	beq.n	543e <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    5478:	7ce6      	ldrb	r6, [r4, #19]
    547a:	2e00      	cmp	r6, #0
    547c:	d0e1      	beq.n	5442 <SharedSpiCard::readCSD(csd_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    547e:	7c60      	ldrb	r0, [r4, #17]
    5480:	2101      	movs	r1, #1
    5482:	f001 fcf1 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5486:	1d20      	adds	r0, r4, #4
    5488:	21ff      	movs	r1, #255	; 0xff
    548a:	9001      	str	r0, [sp, #4]
    548c:	f001 fdca 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5490:	9801      	ldr	r0, [sp, #4]
    5492:	f001 fd7d 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
}
    5496:	4630      	mov	r0, r6
    m_spiActive = false;
    5498:	74e5      	strb	r5, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    549a:	b002      	add	sp, #8
    549c:	bd70      	pop	{r4, r5, r6, pc}
    549e:	bf00      	nop

000054a0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    54a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54a2:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    54a4:	7d02      	ldrb	r2, [r0, #20]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    54a6:	b083      	sub	sp, #12
    54a8:	4606      	mov	r6, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
    54aa:	2a01      	cmp	r2, #1
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    54ac:	460d      	mov	r5, r1
    54ae:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    54b0:	d102      	bne.n	54b8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
    54b2:	6983      	ldr	r3, [r0, #24]
    54b4:	428b      	cmp	r3, r1
    54b6:	d005      	beq.n	54c4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    54b8:	4629      	mov	r1, r5
    54ba:	4630      	mov	r0, r6
    54bc:	f7ff fdce 	bl	505c <SharedSpiCard::readStart(unsigned long)>
    54c0:	b180      	cbz	r0, 54e4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_curSector = sector;
    54c2:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    54c4:	b197      	cbz	r7, 54ec <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    if (!readStart(sector)) {
    54c6:	2500      	movs	r5, #0
    54c8:	e001      	b.n	54ce <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    54ca:	42af      	cmp	r7, r5
    54cc:	d00e      	beq.n	54ec <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    54ce:	4621      	mov	r1, r4
    54d0:	f44f 7200 	mov.w	r2, #512	; 0x200
    54d4:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    54d6:	3501      	adds	r5, #1
    54d8:	f504 7400 	add.w	r4, r4, #512	; 0x200
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    54dc:	f7ff fbc0 	bl	4c60 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    54e0:	2800      	cmp	r0, #0
    54e2:	d1f2      	bne.n	54ca <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
  return false;
    54e4:	2400      	movs	r4, #0
}
    54e6:	4620      	mov	r0, r4
    54e8:	b003      	add	sp, #12
    54ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_curSector += ns;
    54ec:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    54ee:	7f34      	ldrb	r4, [r6, #28]
  m_curSector += ns;
    54f0:	443b      	add	r3, r7
    54f2:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    54f4:	b11c      	cbz	r4, 54fe <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
    54f6:	2401      	movs	r4, #1
}
    54f8:	4620      	mov	r0, r4
    54fa:	b003      	add	sp, #12
    54fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cardCommand(CMD12, 0)) {
    54fe:	4622      	mov	r2, r4
    5500:	210c      	movs	r1, #12
    5502:	4630      	mov	r0, r6
  m_state = IDLE_STATE;
    5504:	7534      	strb	r4, [r6, #20]
  if (cardCommand(CMD12, 0)) {
    5506:	f7ff fc35 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    550a:	4605      	mov	r5, r0
    550c:	b980      	cbnz	r0, 5530 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
  if (m_spiActive) {
    550e:	7cf4      	ldrb	r4, [r6, #19]
    5510:	2c00      	cmp	r4, #0
    5512:	d0f0      	beq.n	54f6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5514:	2101      	movs	r1, #1
    5516:	7c70      	ldrb	r0, [r6, #17]
    5518:	f001 fca6 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    551c:	1d30      	adds	r0, r6, #4
    551e:	21ff      	movs	r1, #255	; 0xff
    5520:	9001      	str	r0, [sp, #4]
    5522:	f001 fd7f 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5526:	9801      	ldr	r0, [sp, #4]
    5528:	f001 fd32 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    552c:	74f5      	strb	r5, [r6, #19]
}
    552e:	e7da      	b.n	54e6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    m_errorCode = code;
    5530:	2209      	movs	r2, #9
  if (m_spiActive) {
    5532:	7cf3      	ldrb	r3, [r6, #19]
    5534:	74b2      	strb	r2, [r6, #18]
    5536:	2b00      	cmp	r3, #0
    5538:	d0d4      	beq.n	54e4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_spiDriver.send(data);
    553a:	1d35      	adds	r5, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    553c:	2101      	movs	r1, #1
    553e:	7c70      	ldrb	r0, [r6, #17]
    5540:	f001 fc92 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5544:	21ff      	movs	r1, #255	; 0xff
    5546:	4628      	mov	r0, r5
    5548:	f001 fd6c 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    554c:	4628      	mov	r0, r5
    554e:	f001 fd1f 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5552:	74f4      	strb	r4, [r6, #19]
}
    5554:	e7c7      	b.n	54e6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    5556:	bf00      	nop

00005558 <DedicatedSpiCard::setDedicatedSpi(bool)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
  if (!syncDevice()) {
    5558:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    555a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    555e:	69da      	ldr	r2, [r3, #28]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    5560:	b082      	sub	sp, #8
    5562:	4d24      	ldr	r5, [pc, #144]	; (55f4 <DedicatedSpiCard::setDedicatedSpi(bool)+0x9c>)
    5564:	4604      	mov	r4, r0
    5566:	460e      	mov	r6, r1
    5568:	42aa      	cmp	r2, r5
    556a:	d111      	bne.n	5590 <DedicatedSpiCard::setDedicatedSpi(bool)+0x38>
  if (m_state == WRITE_STATE) {
    556c:	7d05      	ldrb	r5, [r0, #20]
    556e:	2d02      	cmp	r5, #2
    5570:	d006      	beq.n	5580 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
  if (m_state == READ_STATE) {
    5572:	2d01      	cmp	r5, #1
    5574:	d00e      	beq.n	5594 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>
    return false;
  }
  m_dedicatedSpi = value;
  return true;
    5576:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    5578:	7726      	strb	r6, [r4, #28]
}
    557a:	b002      	add	sp, #8
    557c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    5580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    5582:	4798      	blx	r3
  if (!syncDevice()) {
    5584:	2800      	cmp	r0, #0
    5586:	d1f6      	bne.n	5576 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    return false;
    5588:	2000      	movs	r0, #0
}
    558a:	b002      	add	sp, #8
    558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncDevice()) {
    5590:	4790      	blx	r2
    5592:	e7f7      	b.n	5584 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2c>
  m_state = IDLE_STATE;
    5594:	f04f 0800 	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    5598:	210c      	movs	r1, #12
    559a:	4642      	mov	r2, r8
  m_state = IDLE_STATE;
    559c:	f880 8014 	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    55a0:	f7ff fbe8 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    55a4:	4607      	mov	r7, r0
    55a6:	b980      	cbnz	r0, 55ca <DedicatedSpiCard::setDedicatedSpi(bool)+0x72>
  if (m_spiActive) {
    55a8:	7ce3      	ldrb	r3, [r4, #19]
    55aa:	2b00      	cmp	r3, #0
    55ac:	d0e3      	beq.n	5576 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    55ae:	4629      	mov	r1, r5
    55b0:	7c60      	ldrb	r0, [r4, #17]
    55b2:	f001 fc59 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    55b6:	1d20      	adds	r0, r4, #4
    55b8:	21ff      	movs	r1, #255	; 0xff
    55ba:	9001      	str	r0, [sp, #4]
    55bc:	f001 fd32 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    55c0:	9801      	ldr	r0, [sp, #4]
    55c2:	f001 fce5 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    55c6:	74e7      	strb	r7, [r4, #19]
    55c8:	e7d5      	b.n	5576 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    m_errorCode = code;
    55ca:	2209      	movs	r2, #9
  if (m_spiActive) {
    55cc:	7ce3      	ldrb	r3, [r4, #19]
    55ce:	74a2      	strb	r2, [r4, #18]
    55d0:	2b00      	cmp	r3, #0
    55d2:	d0d9      	beq.n	5588 <DedicatedSpiCard::setDedicatedSpi(bool)+0x30>
    m_spiDriver.send(data);
    55d4:	1d26      	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    55d6:	4629      	mov	r1, r5
    55d8:	7c60      	ldrb	r0, [r4, #17]
    55da:	f001 fc45 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    55de:	21ff      	movs	r1, #255	; 0xff
    55e0:	4630      	mov	r0, r6
    55e2:	f001 fd1f 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    55e6:	4630      	mov	r0, r6
    55e8:	f001 fcd2 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    return false;
    55ec:	4640      	mov	r0, r8
    m_spiActive = false;
    55ee:	f884 8013 	strb.w	r8, [r4, #19]
    55f2:	e7c2      	b.n	557a <DedicatedSpiCard::setDedicatedSpi(bool)+0x22>
    55f4:	00004d5d 	.word	0x00004d5d

000055f8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    55f8:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    55fa:	1d05      	adds	r5, r0, #4
    55fc:	4616      	mov	r6, r2
    55fe:	4604      	mov	r4, r0
    5600:	4628      	mov	r0, r5
    5602:	f001 fd0f 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    5606:	f44f 7200 	mov.w	r2, #512	; 0x200
    560a:	4631      	mov	r1, r6
    560c:	4628      	mov	r0, r5
    560e:	f001 fd13 	bl	7038 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    5612:	21ff      	movs	r1, #255	; 0xff
    5614:	4628      	mov	r0, r5
    5616:	f001 fd05 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
    561a:	21ff      	movs	r1, #255	; 0xff
    561c:	4628      	mov	r0, r5
    561e:	f001 fd01 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    5622:	4628      	mov	r0, r5
    5624:	f001 fce0 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5628:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    562c:	7560      	strb	r0, [r4, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    562e:	2b05      	cmp	r3, #5
    5630:	d004      	beq.n	563c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    5632:	2321      	movs	r3, #33	; 0x21
  if (m_spiActive) {
    5634:	7ce0      	ldrb	r0, [r4, #19]
    5636:	74a3      	strb	r3, [r4, #18]
    5638:	b910      	cbnz	r0, 5640 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    563a:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    563c:	2001      	movs	r0, #1
}
    563e:	bd70      	pop	{r4, r5, r6, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5640:	7c60      	ldrb	r0, [r4, #17]
    5642:	2101      	movs	r1, #1
    5644:	f001 fc10 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5648:	21ff      	movs	r1, #255	; 0xff
    564a:	4628      	mov	r0, r5
    564c:	f001 fcea 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5650:	4628      	mov	r0, r5
    5652:	f001 fc9d 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5656:	2300      	movs	r3, #0
}
    5658:	4618      	mov	r0, r3
    m_spiActive = false;
    565a:	74e3      	strb	r3, [r4, #19]
}
    565c:	bd70      	pop	{r4, r5, r6, pc}
    565e:	bf00      	nop

00005660 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    5660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5664:	4d17      	ldr	r5, [pc, #92]	; (56c4 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    5666:	4606      	mov	r6, r0
    5668:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    566a:	f100 0804 	add.w	r8, r0, #4
    566e:	682c      	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5670:	f504 7416 	add.w	r4, r4, #600	; 0x258
    5674:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    5676:	e003      	b.n	5680 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    5678:	682b      	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    567a:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    567c:	041b      	lsls	r3, r3, #16
    567e:	d40c      	bmi.n	569a <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    5680:	4640      	mov	r0, r8
    5682:	f001 fcb1 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    5686:	28ff      	cmp	r0, #255	; 0xff
    5688:	d1f6      	bne.n	5678 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    568a:	463a      	mov	r2, r7
    568c:	21fc      	movs	r1, #252	; 0xfc
    568e:	4630      	mov	r0, r6
    5690:	f7ff ffb2 	bl	55f8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5694:	b118      	cbz	r0, 569e <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    5696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    569a:	2325      	movs	r3, #37	; 0x25
    569c:	74b3      	strb	r3, [r6, #18]
  if (m_spiActive) {
    569e:	7cf0      	ldrb	r0, [r6, #19]
    56a0:	2800      	cmp	r0, #0
    56a2:	d0f8      	beq.n	5696 <SharedSpiCard::writeData(unsigned char const*)+0x36>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    56a4:	7c70      	ldrb	r0, [r6, #17]
    56a6:	2101      	movs	r1, #1
    56a8:	f001 fbde 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    56ac:	21ff      	movs	r1, #255	; 0xff
    56ae:	4640      	mov	r0, r8
    56b0:	f001 fcb8 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    56b4:	4640      	mov	r0, r8
    56b6:	f001 fc6b 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    56ba:	2300      	movs	r3, #0
}
    56bc:	4618      	mov	r0, r3
    m_spiActive = false;
    56be:	74f3      	strb	r3, [r6, #19]
}
    56c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56c4:	2001ec54 	.word	0x2001ec54

000056c8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    56c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    56cc:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    56ce:	4615      	mov	r5, r2
    56d0:	4a35      	ldr	r2, [pc, #212]	; (57a8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    56d2:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    56d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    56d6:	460e      	mov	r6, r1
    56d8:	4293      	cmp	r3, r2
    56da:	d15c      	bne.n	5796 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xce>
  uint8_t type() const { return m_type; }
    56dc:	7d80      	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    56de:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    56e0:	f04f 0118 	mov.w	r1, #24
    56e4:	4620      	mov	r0, r4
    sector <<= 9;
    56e6:	bf18      	it	ne
    56e8:	0276      	lslne	r6, r6, #9
  if (cardCommand(CMD24, sector)) {
    56ea:	4632      	mov	r2, r6
    56ec:	f7ff fb42 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    56f0:	b148      	cbz	r0, 5706 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    m_errorCode = code;
    56f2:	230d      	movs	r3, #13
    56f4:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    56f6:	f894 9013 	ldrb.w	r9, [r4, #19]
    56fa:	f1b9 0f00 	cmp.w	r9, #0
    56fe:	d138      	bne.n	5772 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xaa>
}
    5700:	4648      	mov	r0, r9
    5702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    5706:	462a      	mov	r2, r5
    5708:	21fe      	movs	r1, #254	; 0xfe
    570a:	4620      	mov	r0, r4
    570c:	f7ff ff74 	bl	55f8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5710:	4681      	mov	r9, r0
    5712:	2800      	cmp	r0, #0
    5714:	d0ef      	beq.n	56f6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    5716:	4f25      	ldr	r7, [pc, #148]	; (57ac <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    return m_spiDriver.receive();
    5718:	f104 0804 	add.w	r8, r4, #4
    571c:	683e      	ldr	r6, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    571e:	f506 7616 	add.w	r6, r6, #600	; 0x258
    5722:	b2b6      	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    5724:	e003      	b.n	572e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x66>
    5726:	683b      	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5728:	1af3      	subs	r3, r6, r3
    if (timeout.timedOut()) {
    572a:	041b      	lsls	r3, r3, #16
    572c:	d438      	bmi.n	57a0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd8>
    572e:	4640      	mov	r0, r8
    5730:	f001 fc5a 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    5734:	28ff      	cmp	r0, #255	; 0xff
    5736:	4605      	mov	r5, r0
    5738:	d1f5      	bne.n	5726 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
    573a:	2200      	movs	r2, #0
    573c:	210d      	movs	r1, #13
    573e:	4620      	mov	r0, r4
    5740:	f7ff fb18 	bl	4d74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5744:	bb48      	cbnz	r0, 579a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
    5746:	4640      	mov	r0, r8
    5748:	f001 fc4e 	bl	6fe8 <SdSpiArduinoDriver::receive()>
    574c:	4606      	mov	r6, r0
    574e:	bb20      	cbnz	r0, 579a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
  if (m_spiActive) {
    5750:	7ce3      	ldrb	r3, [r4, #19]
    5752:	2b00      	cmp	r3, #0
    5754:	d0d4      	beq.n	5700 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5756:	2101      	movs	r1, #1
    5758:	7c60      	ldrb	r0, [r4, #17]
  return true;
    575a:	4699      	mov	r9, r3
    575c:	f001 fb84 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5760:	4629      	mov	r1, r5
    5762:	4640      	mov	r0, r8
    5764:	f001 fc5e 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5768:	4640      	mov	r0, r8
    576a:	f001 fc11 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    576e:	74e6      	strb	r6, [r4, #19]
}
    5770:	e7c6      	b.n	5700 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    m_spiDriver.send(data);
    5772:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5774:	7c60      	ldrb	r0, [r4, #17]
    5776:	2101      	movs	r1, #1
    5778:	f001 fb76 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    577c:	21ff      	movs	r1, #255	; 0xff
    577e:	4628      	mov	r0, r5
    5780:	f001 fc50 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5784:	4628      	mov	r0, r5
    5786:	f001 fc03 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    578a:	2300      	movs	r3, #0
  return false;
    578c:	4699      	mov	r9, r3
    m_spiActive = false;
    578e:	74e3      	strb	r3, [r4, #19]
}
    5790:	4648      	mov	r0, r9
    5792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    5796:	4798      	blx	r3
    5798:	e7a1      	b.n	56de <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    m_errorCode = code;
    579a:	230a      	movs	r3, #10
    579c:	74a3      	strb	r3, [r4, #18]
    goto fail;
    579e:	e7aa      	b.n	56f6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    57a0:	2324      	movs	r3, #36	; 0x24
    57a2:	74a3      	strb	r3, [r4, #18]
    goto fail;
    57a4:	e7a7      	b.n	56f6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    57a6:	bf00      	nop
    57a8:	00004b15 	.word	0x00004b15
    57ac:	2001ec54 	.word	0x2001ec54

000057b0 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    57b0:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    57b2:	7f04      	ldrb	r4, [r0, #28]
    57b4:	b134      	cbz	r4, 57c4 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    57b6:	6804      	ldr	r4, [r0, #0]
    57b8:	2301      	movs	r3, #1
    57ba:	6a64      	ldr	r4, [r4, #36]	; 0x24
    57bc:	46a4      	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    57be:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    57c2:	4760      	bx	ip
}
    57c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    57c8:	f7ff bf7e 	b.w	56c8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

000057cc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    57cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57d0:	469a      	mov	sl, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    57d2:	7d03      	ldrb	r3, [r0, #20]
                                    size_t ns) {
    57d4:	b081      	sub	sp, #4
    57d6:	4607      	mov	r7, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    57d8:	2b02      	cmp	r3, #2
                                    size_t ns) {
    57da:	460c      	mov	r4, r1
    57dc:	4690      	mov	r8, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    57de:	d059      	beq.n	5894 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    if (!writeStart(sector)) {
    57e0:	683b      	ldr	r3, [r7, #0]
    57e2:	4621      	mov	r1, r4
    57e4:	4638      	mov	r0, r7
    57e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    57e8:	4798      	blx	r3
    57ea:	2800      	cmp	r0, #0
    57ec:	d037      	beq.n	585e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
      goto fail;
    }
    m_curSector = sector;
    57ee:	61bc      	str	r4, [r7, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    57f0:	f1ba 0f00 	cmp.w	sl, #0
    57f4:	d023      	beq.n	583e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x72>
    if (!writeStart(sector)) {
    57f6:	f04f 0900 	mov.w	r9, #0
    57fa:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 58a0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd4>
    57fe:	4d27      	ldr	r5, [pc, #156]	; (589c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd0>)
    return m_spiDriver.receive();
    5800:	1d3e      	adds	r6, r7, #4
    if (!writeData(src)) {
    5802:	683b      	ldr	r3, [r7, #0]
    5804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    5806:	455b      	cmp	r3, fp
    5808:	d12d      	bne.n	5866 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x9a>
    580a:	682c      	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    580c:	f504 7416 	add.w	r4, r4, #600	; 0x258
    5810:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    5812:	e003      	b.n	581c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    5814:	682b      	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5816:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    5818:	041b      	lsls	r3, r3, #16
    581a:	d41c      	bmi.n	5856 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8a>
    581c:	4630      	mov	r0, r6
    581e:	f001 fbe3 	bl	6fe8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    5822:	28ff      	cmp	r0, #255	; 0xff
    5824:	d1f6      	bne.n	5814 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    5826:	4642      	mov	r2, r8
    5828:	21fc      	movs	r1, #252	; 0xfc
    582a:	4638      	mov	r0, r7
    582c:	f7ff fee4 	bl	55f8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5830:	b198      	cbz	r0, 585a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8e>
  for (size_t i = 0; i < ns; i++, src += 512) {
    5832:	f109 0901 	add.w	r9, r9, #1
    5836:	f508 7800 	add.w	r8, r8, #512	; 0x200
    583a:	45ca      	cmp	sl, r9
    583c:	d1e1      	bne.n	5802 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
      goto fail;
    }
  }
  m_curSector += ns;
    583e:	69bb      	ldr	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    5840:	7f38      	ldrb	r0, [r7, #28]
  m_curSector += ns;
    5842:	4453      	add	r3, sl
    5844:	61bb      	str	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    5846:	b958      	cbnz	r0, 5860 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x94>
    5848:	683b      	ldr	r3, [r7, #0]
    584a:	4638      	mov	r0, r7
    584c:	6e9b      	ldr	r3, [r3, #104]	; 0x68

fail:
  return false;
}
    584e:	b001      	add	sp, #4
    5850:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : writeStop();
    5854:	4718      	bx	r3
    m_errorCode = code;
    5856:	2325      	movs	r3, #37	; 0x25
    5858:	74bb      	strb	r3, [r7, #18]
  if (m_spiActive) {
    585a:	7cfb      	ldrb	r3, [r7, #19]
    585c:	b94b      	cbnz	r3, 5872 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xa6>
  return false;
    585e:	2000      	movs	r0, #0
}
    5860:	b001      	add	sp, #4
    5862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!writeData(src)) {
    5866:	4641      	mov	r1, r8
    5868:	4638      	mov	r0, r7
    586a:	4798      	blx	r3
    586c:	2800      	cmp	r0, #0
    586e:	d1e0      	bne.n	5832 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x66>
    5870:	e7f5      	b.n	585e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5872:	7c78      	ldrb	r0, [r7, #17]
    5874:	2101      	movs	r1, #1
    5876:	f001 faf7 	bl	6e68 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    587a:	21ff      	movs	r1, #255	; 0xff
    587c:	4630      	mov	r0, r6
    587e:	f001 fbd1 	bl	7024 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5882:	4630      	mov	r0, r6
    5884:	f001 fb84 	bl	6f90 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5888:	2300      	movs	r3, #0
  return false;
    588a:	4618      	mov	r0, r3
    m_spiActive = false;
    588c:	74fb      	strb	r3, [r7, #19]
}
    588e:	b001      	add	sp, #4
    5890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    5894:	6983      	ldr	r3, [r0, #24]
    5896:	428b      	cmp	r3, r1
    5898:	d1a2      	bne.n	57e0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
    589a:	e7a9      	b.n	57f0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
    589c:	2001ec54 	.word	0x2001ec54
    58a0:	00005661 	.word	0x00005661

000058a4 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() { return false; }
    58a4:	2000      	movs	r0, #0
    58a6:	4770      	bx	lr

000058a8 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() { return false; }
    58a8:	2000      	movs	r0, #0
    58aa:	4770      	bx	lr

000058ac <SdCardInterface::setDedicatedSpi(bool)>:
  }
    58ac:	2000      	movs	r0, #0
    58ae:	4770      	bx	lr

000058b0 <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    58b0:	4770      	bx	lr
    58b2:	bf00      	nop

000058b4 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    58b4:	4b08      	ldr	r3, [pc, #32]	; (58d8 <sdIrs()+0x24>)
    58b6:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    58b8:	4a08      	ldr	r2, [pc, #32]	; (58dc <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    58ba:	4809      	ldr	r0, [pc, #36]	; (58e0 <sdIrs()+0x2c>)
static void sdIrs() {
    58bc:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    58be:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    58c0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    58c2:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    58c4:	6812      	ldr	r2, [r2, #0]
}
    58c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    58ca:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    58cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    58ce:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    58d2:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    58d4:	7001      	strb	r1, [r0, #0]
}
    58d6:	4770      	bx	lr
    58d8:	402c0000 	.word	0x402c0000
    58dc:	2001e068 	.word	0x2001e068
    58e0:	2001ec96 	.word	0x2001ec96

000058e4 <isBusyDat()>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    58e4:	4b03      	ldr	r3, [pc, #12]	; (58f4 <isBusyDat()+0x10>)
    58e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    58e8:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    58ec:	f3c0 6000 	ubfx	r0, r0, #24, #1
    58f0:	4770      	bx	lr
    58f2:	bf00      	nop
    58f4:	402c0000 	.word	0x402c0000

000058f8 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    58f8:	4b01      	ldr	r3, [pc, #4]	; (5900 <isBusyDMA()+0x8>)
    58fa:	7818      	ldrb	r0, [r3, #0]
    58fc:	4770      	bx	lr
    58fe:	bf00      	nop
    5900:	2001ec96 	.word	0x2001ec96

00005904 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5904:	4a2b      	ldr	r2, [pc, #172]	; (59b4 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5906:	4b2c      	ldr	r3, [pc, #176]	; (59b8 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5908:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    590a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    590e:	492b      	ldr	r1, [pc, #172]	; (59bc <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5910:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5918:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    591a:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    591c:	4c28      	ldr	r4, [pc, #160]	; (59c0 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    591e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5922:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000 * kHzMax;
    5926:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    592a:	089b      	lsrs	r3, r3, #2
    592c:	fbb1 fef3 	udiv	lr, r1, r3
    5930:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5934:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    5938:	d235      	bcs.n	59a6 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    593a:	2301      	movs	r3, #1
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    593c:	461e      	mov	r6, r3
    593e:	005b      	lsls	r3, r3, #1
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5940:	011a      	lsls	r2, r3, #4
    5942:	fbbe f2f2 	udiv	r2, lr, r2
    5946:	4282      	cmp	r2, r0
    5948:	d901      	bls.n	594e <setSdclk(unsigned long)+0x4a>
    594a:	2bff      	cmp	r3, #255	; 0xff
    594c:	d9f6      	bls.n	593c <setSdclk(unsigned long)+0x38>
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    594e:	fbbe f2f3 	udiv	r2, lr, r3
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    5952:	0236      	lsls	r6, r6, #8
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5954:	4290      	cmp	r0, r2
    5956:	d22a      	bcs.n	59ae <setSdclk(unsigned long)+0xaa>
    5958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    595c:	2201      	movs	r2, #1
    595e:	e000      	b.n	5962 <setSdclk(unsigned long)+0x5e>
    5960:	46a4      	mov	ip, r4
    dvs++;
    5962:	4615      	mov	r5, r2
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5964:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    5968:	3201      	adds	r2, #1
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    596a:	fbbe f1fc 	udiv	r1, lr, ip
    596e:	4281      	cmp	r1, r0
    5970:	d917      	bls.n	59a2 <setSdclk(unsigned long)+0x9e>
    5972:	2a10      	cmp	r2, #16
    5974:	d1f4      	bne.n	5960 <setSdclk(unsigned long)+0x5c>
    5976:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    5978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    597c:	4911      	ldr	r1, [pc, #68]	; (59c4 <setSdclk(unsigned long)+0xc0>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    597e:	4a12      	ldr	r2, [pc, #72]	; (59c8 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    5980:	fb03 fc0c 	mul.w	ip, r3, ip
    5984:	fbbe f3fc 	udiv	r3, lr, ip
    5988:	600b      	str	r3, [r1, #0]
                      SDHC_SYSCTL_SDCLKFS_MASK);
    598a:	4b10      	ldr	r3, [pc, #64]	; (59cc <setSdclk(unsigned long)+0xc8>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    598c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);
    598e:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    5990:	432b      	orrs	r3, r5
    5992:	4333      	orrs	r3, r6
    5994:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
    5998:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    599a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    599c:	071b      	lsls	r3, r3, #28
    599e:	d5fc      	bpl.n	599a <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    59a0:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    59a2:	012d      	lsls	r5, r5, #4
    59a4:	e7e8      	b.n	5978 <setSdclk(unsigned long)+0x74>
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    59a6:	4672      	mov	r2, lr
    59a8:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    59aa:	2301      	movs	r3, #1
    59ac:	e7d2      	b.n	5954 <setSdclk(unsigned long)+0x50>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    59ae:	469c      	mov	ip, r3
    59b0:	2500      	movs	r5, #0
    59b2:	e7e1      	b.n	5978 <setSdclk(unsigned long)+0x74>
    59b4:	400fc000 	.word	0x400fc000
    59b8:	400d8000 	.word	0x400d8000
    59bc:	5e69ec00 	.word	0x5e69ec00
    59c0:	aaaaaaab 	.word	0xaaaaaaab
    59c4:	2000d740 	.word	0x2000d740
    59c8:	402c0000 	.word	0x402c0000
    59cc:	fff0000f 	.word	0xfff0000f

000059d0 <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    59d0:	4b01      	ldr	r3, [pc, #4]	; (59d8 <SdioCard::errorCode() const+0x8>)
    59d2:	7818      	ldrb	r0, [r3, #0]
    59d4:	4770      	bx	lr
    59d6:	bf00      	nop
    59d8:	20008bf6 	.word	0x20008bf6

000059dc <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    59dc:	4b01      	ldr	r3, [pc, #4]	; (59e4 <SdioCard::errorData() const+0x8>)
    59de:	6818      	ldr	r0, [r3, #0]
    59e0:	4770      	bx	lr
    59e2:	bf00      	nop
    59e4:	2001e068 	.word	0x2001e068

000059e8 <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    59e8:	b410      	push	{r4}
  memcpy(cid, &m_cid, sizeof(cid_t));
    59ea:	4c07      	ldr	r4, [pc, #28]	; (5a08 <SdioCard::readCID(cid_t*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    59ec:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    59ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    59f0:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    59f4:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
    59f6:	f8cc 1004 	str.w	r1, [ip, #4]
    59fa:	f8cc 2008 	str.w	r2, [ip, #8]
    59fe:	f8cc 300c 	str.w	r3, [ip, #12]
}
    5a02:	f85d 4b04 	ldr.w	r4, [sp], #4
    5a06:	4770      	bx	lr
    5a08:	2001d954 	.word	0x2001d954

00005a0c <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    5a0c:	b410      	push	{r4}
  memcpy(csd, &m_csd, sizeof(csd_t));
    5a0e:	4c07      	ldr	r4, [pc, #28]	; (5a2c <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    5a10:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    5a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5a14:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    5a18:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, sizeof(csd_t));
    5a1a:	f8cc 1004 	str.w	r1, [ip, #4]
    5a1e:	f8cc 2008 	str.w	r2, [ip, #8]
    5a22:	f8cc 300c 	str.w	r3, [ip, #12]
}
    5a26:	f85d 4b04 	ldr.w	r4, [sp], #4
    5a2a:	4770      	bx	lr
    5a2c:	2001d964 	.word	0x2001d964

00005a30 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    5a30:	4b02      	ldr	r3, [pc, #8]	; (5a3c <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    5a32:	2001      	movs	r0, #1
  *ocr = m_ocr;
    5a34:	681b      	ldr	r3, [r3, #0]
    5a36:	600b      	str	r3, [r1, #0]
}
    5a38:	4770      	bx	lr
    5a3a:	bf00      	nop
    5a3c:	2001d974 	.word	0x2001d974

00005a40 <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    5a40:	4a03      	ldr	r2, [pc, #12]	; (5a50 <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readSCR(scr_t* scr) {
    5a42:	460b      	mov	r3, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    5a44:	ca03      	ldmia	r2!, {r0, r1}
    5a46:	6018      	str	r0, [r3, #0]
  return true;
}
    5a48:	2001      	movs	r0, #1
  memcpy(scr, &m_scr, sizeof(scr_t));
    5a4a:	6059      	str	r1, [r3, #4]
}
    5a4c:	4770      	bx	lr
    5a4e:	bf00      	nop
    5a50:	2001d97c 	.word	0x2001d97c

00005a54 <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    5a54:	b530      	push	{r4, r5, lr}
  memcpy(sds, &m_sds, sizeof(sds_t));
    5a56:	4c0b      	ldr	r4, [pc, #44]	; (5a84 <SdioCard::readSDS(sds_t*)+0x30>)
    5a58:	468c      	mov	ip, r1
    5a5a:	f104 0540 	add.w	r5, r4, #64	; 0x40
    5a5e:	46a6      	mov	lr, r4
    5a60:	f10c 0c10 	add.w	ip, ip, #16
    5a64:	3410      	adds	r4, #16
    5a66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5a6a:	45ae      	cmp	lr, r5
    5a6c:	f84c 0c10 	str.w	r0, [ip, #-16]
    5a70:	f84c 1c0c 	str.w	r1, [ip, #-12]
    5a74:	f84c 2c08 	str.w	r2, [ip, #-8]
    5a78:	f84c 3c04 	str.w	r3, [ip, #-4]
    5a7c:	d1ef      	bne.n	5a5e <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    5a7e:	2001      	movs	r0, #1
    5a80:	bd30      	pop	{r4, r5, pc}
    5a82:	bf00      	nop
    5a84:	2001d984 	.word	0x2001d984

00005a88 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    5a88:	4770      	bx	lr
    5a8a:	bf00      	nop

00005a8c <SdioCard::~SdioCard()>:
    5a8c:	b510      	push	{r4, lr}
    5a8e:	4604      	mov	r4, r0
    5a90:	210c      	movs	r1, #12
    5a92:	f002 fb4d 	bl	8130 <operator delete(void*, unsigned int)>
    5a96:	4620      	mov	r0, r4
    5a98:	bd10      	pop	{r4, pc}
    5a9a:	bf00      	nop

00005a9c <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
    5a9c:	4b04      	ldr	r3, [pc, #16]	; (5ab0 <SdioCard::type() const+0x14>)
    5a9e:	781b      	ldrb	r3, [r3, #0]
    5aa0:	b123      	cbz	r3, 5aac <SdioCard::type() const+0x10>
    5aa2:	4b04      	ldr	r3, [pc, #16]	; (5ab4 <SdioCard::type() const+0x18>)
    5aa4:	7818      	ldrb	r0, [r3, #0]
    5aa6:	3002      	adds	r0, #2
    5aa8:	b2c0      	uxtb	r0, r0
    5aaa:	4770      	bx	lr
    5aac:	2001      	movs	r0, #1
                    : SD_CARD_TYPE_SD1;
}
    5aae:	4770      	bx	lr
    5ab0:	2001ec93 	.word	0x2001ec93
    5ab4:	2001ec94 	.word	0x2001ec94

00005ab8 <SdioCard::sectorCount()>:
    uint8_t ver = csd[0] >> 6;
    5ab8:	4a16      	ldr	r2, [pc, #88]	; (5b14 <SdioCard::sectorCount()+0x5c>)
    5aba:	7813      	ldrb	r3, [r2, #0]
    if (ver == 0) {
    5abc:	099b      	lsrs	r3, r3, #6
    5abe:	d00e      	beq.n	5ade <SdioCard::sectorCount()+0x26>
    } else if (ver == 1) {
    5ac0:	2b01      	cmp	r3, #1
    5ac2:	d001      	beq.n	5ac8 <SdioCard::sectorCount()+0x10>
      return 0;
    5ac4:	2000      	movs	r0, #0
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    5ac6:	4770      	bx	lr
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5ac8:	79d3      	ldrb	r3, [r2, #7]
      c_size |= csd[9];
    5aca:	8910      	ldrh	r0, [r2, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5acc:	041b      	lsls	r3, r3, #16
      c_size |= csd[9];
    5ace:	ba40      	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5ad0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    5ad4:	b280      	uxth	r0, r0
    5ad6:	4318      	orrs	r0, r3
      return (c_size + 1) << 10;
    5ad8:	3001      	adds	r0, #1
    5ada:	0280      	lsls	r0, r0, #10
    5adc:	4770      	bx	lr
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5ade:	7a53      	ldrb	r3, [r2, #9]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5ae0:	7a10      	ldrb	r0, [r2, #8]
    5ae2:	f892 c007 	ldrb.w	ip, [r2, #7]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5ae6:	005b      	lsls	r3, r3, #1
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5ae8:	7991      	ldrb	r1, [r2, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5aea:	0980      	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5aec:	f003 0306 	and.w	r3, r3, #6
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5af0:	ea40 008c 	orr.w	r0, r0, ip, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5af4:	f892 c00a 	ldrb.w	ip, [r2, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5af8:	0289      	lsls	r1, r1, #10
      uint8_t read_bl_len = csd[5] & 15;
    5afa:	7952      	ldrb	r2, [r2, #5]
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5afc:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5b00:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5b04:	f002 020f 	and.w	r2, r2, #15
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5b08:	4308      	orrs	r0, r1
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5b0a:	4413      	add	r3, r2
    5b0c:	3001      	adds	r0, #1
    5b0e:	3b07      	subs	r3, #7
    5b10:	4098      	lsls	r0, r3
    5b12:	4770      	bx	lr
    5b14:	2001d964 	.word	0x2001d964

00005b18 <waitDmaStatus()>:
static bool waitDmaStatus() {
    5b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  m_busyFcn = fcn;
    5b1a:	4b13      	ldr	r3, [pc, #76]	; (5b68 <waitDmaStatus()+0x50>)
    5b1c:	4f13      	ldr	r7, [pc, #76]	; (5b6c <waitDmaStatus()+0x54>)
static bool isBusyDMA() { return m_dmaBusy; }
    5b1e:	4d14      	ldr	r5, [pc, #80]	; (5b70 <waitDmaStatus()+0x58>)
  m_busyFcn = fcn;
    5b20:	603b      	str	r3, [r7, #0]
  uint32_t m = micros();
    5b22:	f002 f9d7 	bl	7ed4 <micros>
static bool isBusyDMA() { return m_dmaBusy; }
    5b26:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5b28:	b17b      	cbz	r3, 5b4a <waitDmaStatus()+0x32>
    5b2a:	4604      	mov	r4, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5b2c:	4e11      	ldr	r6, [pc, #68]	; (5b74 <waitDmaStatus()+0x5c>)
    5b2e:	e003      	b.n	5b38 <waitDmaStatus()+0x20>
    yield();
    5b30:	f003 fcda 	bl	94e8 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    5b34:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5b36:	b143      	cbz	r3, 5b4a <waitDmaStatus()+0x32>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5b38:	f002 f9cc 	bl	7ed4 <micros>
    5b3c:	1b00      	subs	r0, r0, r4
    5b3e:	42b0      	cmp	r0, r6
    5b40:	d9f6      	bls.n	5b30 <waitDmaStatus()+0x18>
      m_busyFcn = 0;
    5b42:	2300      	movs	r3, #0
    return false;  // Caller will set errorCode.
    5b44:	4618      	mov	r0, r3
      m_busyFcn = 0;
    5b46:	603b      	str	r3, [r7, #0]
}
    5b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5b4a:	4b0b      	ldr	r3, [pc, #44]	; (5b78 <waitDmaStatus()+0x60>)
  m_busyFcn = 0;
    5b4c:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5b4e:	6818      	ldr	r0, [r3, #0]
  m_busyFcn = 0;
    5b50:	603a      	str	r2, [r7, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5b52:	f010 0002 	ands.w	r0, r0, #2
    5b56:	d0f7      	beq.n	5b48 <waitDmaStatus()+0x30>
    5b58:	681a      	ldr	r2, [r3, #0]
    5b5a:	4b08      	ldr	r3, [pc, #32]	; (5b7c <waitDmaStatus()+0x64>)
    5b5c:	421a      	tst	r2, r3
    5b5e:	bf0c      	ite	eq
    5b60:	2001      	moveq	r0, #1
    5b62:	2000      	movne	r0, #0
}
    5b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b66:	bf00      	nop
    5b68:	000058f9 	.word	0x000058f9
    5b6c:	2001e064 	.word	0x2001e064
    5b70:	2001ec96 	.word	0x2001ec96
    5b74:	000f4240 	.word	0x000f4240
    5b78:	2001e068 	.word	0x2001e068
    5b7c:	117f0000 	.word	0x117f0000

00005b80 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    5b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    5b84:	f002 f9a6 	bl	7ed4 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5b88:	4e17      	ldr	r6, [pc, #92]	; (5be8 <waitTransferComplete() [clone .part.0]+0x68>)
    5b8a:	4d18      	ldr	r5, [pc, #96]	; (5bec <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    5b8c:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5b8e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5c04 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    5b92:	e004      	b.n	5b9e <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5b94:	f002 f99e 	bl	7ed4 <micros>
    5b98:	1bc0      	subs	r0, r0, r7
    5b9a:	4540      	cmp	r0, r8
    5b9c:	d81b      	bhi.n	5bd6 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5b9e:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    5ba0:	402c      	ands	r4, r5
    5ba2:	d0f7      	beq.n	5b94 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    5ba4:	4a12      	ldr	r2, [pc, #72]	; (5bf0 <waitTransferComplete() [clone .part.0]+0x70>)
    5ba6:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    5ba8:	4b12      	ldr	r3, [pc, #72]	; (5bf4 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5baa:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5bac:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5bae:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5bb0:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5bb2:	4a11      	ldr	r2, [pc, #68]	; (5bf8 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    5bb4:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5bb6:	681b      	ldr	r3, [r3, #0]
    5bb8:	4213      	tst	r3, r2
    5bba:	d009      	beq.n	5bd0 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    5bbc:	490f      	ldr	r1, [pc, #60]	; (5bfc <waitTransferComplete() [clone .part.0]+0x7c>)
    5bbe:	2420      	movs	r4, #32
  m_errorLine = line;
    5bc0:	4b0f      	ldr	r3, [pc, #60]	; (5c00 <waitTransferComplete() [clone .part.0]+0x80>)
    5bc2:	f240 22aa 	movw	r2, #682	; 0x2aa
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    5bc6:	2000      	movs	r0, #0
  m_errorCode = code;
    5bc8:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5bca:	601a      	str	r2, [r3, #0]
}
    5bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    5bd0:	2001      	movs	r0, #1
}
    5bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    5bd6:	4a06      	ldr	r2, [pc, #24]	; (5bf0 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    5bd8:	4b06      	ldr	r3, [pc, #24]	; (5bf4 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5bda:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5bdc:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5bde:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5be0:	681b      	ldr	r3, [r3, #0]
    5be2:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5be4:	e7ea      	b.n	5bbc <waitTransferComplete() [clone .part.0]+0x3c>
    5be6:	bf00      	nop
    5be8:	402c0000 	.word	0x402c0000
    5bec:	117f0002 	.word	0x117f0002
    5bf0:	2001ec95 	.word	0x2001ec95
    5bf4:	2001e068 	.word	0x2001e068
    5bf8:	117f0000 	.word	0x117f0000
    5bfc:	20008bf6 	.word	0x20008bf6
    5c00:	2001d748 	.word	0x2001d748
    5c04:	000f4240 	.word	0x000f4240

00005c08 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    5c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    5c0c:	4c26      	ldr	r4, [pc, #152]	; (5ca8 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    5c0e:	460f      	mov	r7, r1
  if (!m_transferActive) {
    5c10:	7823      	ldrb	r3, [r4, #0]
    5c12:	2b00      	cmp	r3, #0
    5c14:	d138      	bne.n	5c88 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    5c16:	4b25      	ldr	r3, [pc, #148]	; (5cac <SdioCard::writeData(unsigned char const*)+0xa4>)
    5c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5c1a:	05d2      	lsls	r2, r2, #23
    5c1c:	d52b      	bpl.n	5c76 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5c1e:	4d23      	ldr	r5, [pc, #140]	; (5cac <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c20:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5cb8 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5c24:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5c2a:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    5c2c:	f002 f952 	bl	7ed4 <micros>
    5c30:	4606      	mov	r6, r0
  while (fcn()) {
    5c32:	e004      	b.n	5c3e <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c34:	f002 f94e 	bl	7ed4 <micros>
    5c38:	1b80      	subs	r0, r0, r6
    5c3a:	4540      	cmp	r0, r8
    5c3c:	d82a      	bhi.n	5c94 <SdioCard::writeData(unsigned char const*)+0x8c>
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    5c3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    5c40:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    5c44:	d0f6      	beq.n	5c34 <SdioCard::writeData(unsigned char const*)+0x2c>
    5c46:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    5c4a:	4818      	ldr	r0, [pc, #96]	; (5cac <SdioCard::writeData(unsigned char const*)+0xa4>)
    5c4c:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    5c50:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5c52:	055b      	lsls	r3, r3, #21
    5c54:	d5fc      	bpl.n	5c50 <SdioCard::writeData(unsigned char const*)+0x48>
    5c56:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    5c5a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5c5e:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    5c60:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5c62:	d1fa      	bne.n	5c5a <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    5c64:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    5c68:	45bc      	cmp	ip, r7
    5c6a:	d1f1      	bne.n	5c50 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    5c6c:	2301      	movs	r3, #1
  return true;
    5c6e:	4618      	mov	r0, r3
  m_transferActive = true;
    5c70:	7023      	strb	r3, [r4, #0]
}
    5c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    5c7c:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    5c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c80:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    5c84:	629a      	str	r2, [r3, #40]	; 0x28
    5c86:	e7ca      	b.n	5c1e <SdioCard::writeData(unsigned char const*)+0x16>
    5c88:	f7ff ff7a 	bl	5b80 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    5c8c:	2800      	cmp	r0, #0
    5c8e:	d1c2      	bne.n	5c16 <SdioCard::writeData(unsigned char const*)+0xe>
}
    5c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    5c94:	4906      	ldr	r1, [pc, #24]	; (5cb0 <SdioCard::writeData(unsigned char const*)+0xa8>)
    5c96:	2422      	movs	r4, #34	; 0x22
  m_errorLine = line;
    5c98:	4b06      	ldr	r3, [pc, #24]	; (5cb4 <SdioCard::writeData(unsigned char const*)+0xac>)
    5c9a:	f240 421f 	movw	r2, #1055	; 0x41f
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    5c9e:	4648      	mov	r0, r9
  m_errorCode = code;
    5ca0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5ca2:	601a      	str	r2, [r3, #0]
}
    5ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5ca8:	2001ec95 	.word	0x2001ec95
    5cac:	402c0000 	.word	0x402c0000
    5cb0:	20008bf6 	.word	0x20008bf6
    5cb4:	2001d748 	.word	0x2001d748
    5cb8:	000f4240 	.word	0x000f4240

00005cbc <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    5cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cc0:	4607      	mov	r7, r0
    5cc2:	4688      	mov	r8, r1
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    5cc4:	4c1f      	ldr	r4, [pc, #124]	; (5d44 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    5cc6:	f002 f905 	bl	7ed4 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5cca:	4e1f      	ldr	r6, [pc, #124]	; (5d48 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5ccc:	4605      	mov	r5, r0
  while (fcn()) {
    5cce:	e004      	b.n	5cda <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5cd0:	f002 f900 	bl	7ed4 <micros>
    5cd4:	1b43      	subs	r3, r0, r5
    5cd6:	42b3      	cmp	r3, r6
    5cd8:	d824      	bhi.n	5d24 <cardCommand(unsigned long, unsigned long)+0x68>
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    5cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5cdc:	07d9      	lsls	r1, r3, #31
    5cde:	d4f7      	bmi.n	5cd0 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5ce0:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    5ce2:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5ce6:	d420      	bmi.n	5d2a <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    5ce8:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    5cec:	4c15      	ldr	r4, [pc, #84]	; (5d44 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5cee:	4e17      	ldr	r6, [pc, #92]	; (5d4c <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    5cf0:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    5cf2:	f002 f8ef 	bl	7ed4 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5cf6:	4f14      	ldr	r7, [pc, #80]	; (5d48 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5cf8:	4605      	mov	r5, r0
  while (fcn()) {
    5cfa:	e004      	b.n	5d06 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5cfc:	f002 f8ea 	bl	7ed4 <micros>
    5d00:	1b40      	subs	r0, r0, r5
    5d02:	42b8      	cmp	r0, r7
    5d04:	d80e      	bhi.n	5d24 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5d06:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    5d08:	4233      	tst	r3, r6
    5d0a:	d0f7      	beq.n	5cfc <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    5d0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5d0e:	4b10      	ldr	r3, [pc, #64]	; (5d50 <cardCommand(unsigned long, unsigned long)+0x94>)
    5d10:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5d12:	681a      	ldr	r2, [r3, #0]
    5d14:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5d16:	681a      	ldr	r2, [r3, #0]
    5d18:	07d2      	lsls	r2, r2, #31
    5d1a:	d503      	bpl.n	5d24 <cardCommand(unsigned long, unsigned long)+0x68>
    5d1c:	681b      	ldr	r3, [r3, #0]
    5d1e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    5d22:	d00b      	beq.n	5d3c <cardCommand(unsigned long, unsigned long)+0x80>
    5d24:	2000      	movs	r0, #0
}
    5d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5d2a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5d2c:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5d2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    5d32:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5d34:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    5d36:	4313      	orrs	r3, r2
    5d38:	64a3      	str	r3, [r4, #72]	; 0x48
    5d3a:	e7d5      	b.n	5ce8 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5d3c:	2001      	movs	r0, #1
}
    5d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d42:	bf00      	nop
    5d44:	402c0000 	.word	0x402c0000
    5d48:	000f4240 	.word	0x000f4240
    5d4c:	000f0001 	.word	0x000f0001
    5d50:	2001e068 	.word	0x2001e068

00005d54 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    5d54:	4b15      	ldr	r3, [pc, #84]	; (5dac <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    5d56:	b530      	push	{r4, r5, lr}
    5d58:	460d      	mov	r5, r1
    5d5a:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    5d5c:	6819      	ldr	r1, [r3, #0]
    5d5e:	f7ff ffad 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    5d62:	b308      	cbz	r0, 5da8 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    5d64:	4b12      	ldr	r3, [pc, #72]	; (5db0 <readReg16(unsigned long, void*)+0x5c>)
    5d66:	f105 040f 	add.w	r4, r5, #15
    5d6a:	691a      	ldr	r2, [r3, #16]
    5d6c:	9200      	str	r2, [sp, #0]
    5d6e:	6959      	ldr	r1, [r3, #20]
    5d70:	9101      	str	r1, [sp, #4]
    5d72:	6999      	ldr	r1, [r3, #24]
    5d74:	9102      	str	r1, [sp, #8]
    5d76:	69db      	ldr	r3, [r3, #28]
    5d78:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    5d7a:	2300      	movs	r3, #0
    5d7c:	e001      	b.n	5d82 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5d7e:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    5d82:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    5d86:	3301      	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5d88:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    5d8c:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    5d90:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5d92:	fa22 f20c 	lsr.w	r2, r2, ip
    5d96:	f10e 0110 	add.w	r1, lr, #16
    5d9a:	f804 2d01 	strb.w	r2, [r4, #-1]!
    5d9e:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    5da2:	d1ec      	bne.n	5d7e <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    5da4:	2300      	movs	r3, #0
    5da6:	73eb      	strb	r3, [r5, #15]
}
    5da8:	b005      	add	sp, #20
    5daa:	bd30      	pop	{r4, r5, pc}
    5dac:	2001d978 	.word	0x2001d978
    5db0:	402c0000 	.word	0x402c0000

00005db4 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    5db4:	b510      	push	{r4, lr}
  bool useDma() { return m_options & DMA_SDIO; }
    5db6:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    5db8:	07db      	lsls	r3, r3, #31
    5dba:	d505      	bpl.n	5dc8 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5dbc:	4b15      	ldr	r3, [pc, #84]	; (5e14 <SdioCard::isBusy()+0x60>)
    5dbe:	681b      	ldr	r3, [r3, #0]
    5dc0:	b1b3      	cbz	r3, 5df0 <SdioCard::isBusy()+0x3c>
}
    5dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5dc6:	4718      	bx	r3
    if (m_transferActive) {
    5dc8:	4b13      	ldr	r3, [pc, #76]	; (5e18 <SdioCard::isBusy()+0x64>)
    5dca:	781b      	ldrb	r3, [r3, #0]
    5dcc:	b93b      	cbnz	r3, 5dde <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5dce:	4b13      	ldr	r3, [pc, #76]	; (5e1c <SdioCard::isBusy()+0x68>)
    5dd0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    5dd2:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    5dd6:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    5dda:	4620      	mov	r0, r4
    5ddc:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5dde:	4b0f      	ldr	r3, [pc, #60]	; (5e1c <SdioCard::isBusy()+0x68>)
    5de0:	4c0f      	ldr	r4, [pc, #60]	; (5e20 <SdioCard::isBusy()+0x6c>)
    5de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5de4:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    5de6:	fab4 f484 	clz	r4, r4
    5dea:	0964      	lsrs	r4, r4, #5
}
    5dec:	4620      	mov	r0, r4
    5dee:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5df0:	4b0c      	ldr	r3, [pc, #48]	; (5e24 <SdioCard::isBusy()+0x70>)
    5df2:	781c      	ldrb	r4, [r3, #0]
    5df4:	2c00      	cmp	r4, #0
    5df6:	d0f0      	beq.n	5dda <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5df8:	4b0b      	ldr	r3, [pc, #44]	; (5e28 <SdioCard::isBusy()+0x74>)
    5dfa:	480c      	ldr	r0, [pc, #48]	; (5e2c <SdioCard::isBusy()+0x78>)
    5dfc:	6819      	ldr	r1, [r3, #0]
    5dfe:	f7ff ff5d 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    5e02:	2800      	cmp	r0, #0
    5e04:	d0e9      	beq.n	5dda <SdioCard::isBusy()+0x26>
    5e06:	4b05      	ldr	r3, [pc, #20]	; (5e1c <SdioCard::isBusy()+0x68>)
    5e08:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5e0a:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    5e0e:	f3c4 2400 	ubfx	r4, r4, #8, #1
    5e12:	e7e2      	b.n	5dda <SdioCard::isBusy()+0x26>
    5e14:	2001e064 	.word	0x2001e064
    5e18:	2001ec95 	.word	0x2001ec95
    5e1c:	402c0000 	.word	0x402c0000
    5e20:	117f0002 	.word	0x117f0002
    5e24:	2001ec92 	.word	0x2001ec92
    5e28:	2001d978 	.word	0x2001d978
    5e2c:	0d1a0000 	.word	0x0d1a0000

00005e30 <SdioCard::status()>:
uint32_t SdioCard::status() { return statusCMD13(); }
    5e30:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5e32:	4b04      	ldr	r3, [pc, #16]	; (5e44 <SdioCard::status()+0x14>)
    5e34:	4804      	ldr	r0, [pc, #16]	; (5e48 <SdioCard::status()+0x18>)
    5e36:	6819      	ldr	r1, [r3, #0]
    5e38:	f7ff ff40 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    5e3c:	b108      	cbz	r0, 5e42 <SdioCard::status()+0x12>
    5e3e:	4b03      	ldr	r3, [pc, #12]	; (5e4c <SdioCard::status()+0x1c>)
    5e40:	6918      	ldr	r0, [r3, #16]
uint32_t SdioCard::status() { return statusCMD13(); }
    5e42:	bd08      	pop	{r3, pc}
    5e44:	2001d978 	.word	0x2001d978
    5e48:	0d1a0000 	.word	0x0d1a0000
    5e4c:	402c0000 	.word	0x402c0000

00005e50 <isBusyCMD13()>:
static bool isBusyCMD13() {
    5e50:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5e52:	4b07      	ldr	r3, [pc, #28]	; (5e70 <isBusyCMD13()+0x20>)
    5e54:	4807      	ldr	r0, [pc, #28]	; (5e74 <isBusyCMD13()+0x24>)
    5e56:	6819      	ldr	r1, [r3, #0]
    5e58:	f7ff ff30 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    5e5c:	b130      	cbz	r0, 5e6c <isBusyCMD13()+0x1c>
    5e5e:	4b06      	ldr	r3, [pc, #24]	; (5e78 <isBusyCMD13()+0x28>)
    5e60:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    5e62:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    5e66:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    5e6a:	bd08      	pop	{r3, pc}
    5e6c:	2001      	movs	r0, #1
    5e6e:	bd08      	pop	{r3, pc}
    5e70:	2001d978 	.word	0x2001d978
    5e74:	0d1a0000 	.word	0x0d1a0000
    5e78:	402c0000 	.word	0x402c0000

00005e7c <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    5e80:	4b29      	ldr	r3, [pc, #164]	; (5f28 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    5e82:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    5e84:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 5f48 <SdioCard::writeStart(unsigned long)+0xcc>
    5e88:	4e28      	ldr	r6, [pc, #160]	; (5f2c <SdioCard::writeStart(unsigned long)+0xb0>)
    5e8a:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    5e8e:	f002 f821 	bl	7ed4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5e92:	4d27      	ldr	r5, [pc, #156]	; (5f30 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    5e94:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5e96:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 5f4c <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5e9a:	4f26      	ldr	r7, [pc, #152]	; (5f34 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    5e9c:	e006      	b.n	5eac <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5e9e:	f002 f819 	bl	7ed4 <micros>
    5ea2:	1b00      	subs	r0, r0, r4
    5ea4:	42b8      	cmp	r0, r7
    5ea6:	d829      	bhi.n	5efc <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    5ea8:	f003 fb1e 	bl	94e8 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5eac:	6831      	ldr	r1, [r6, #0]
    5eae:	4628      	mov	r0, r5
    5eb0:	f7ff ff04 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    5eb4:	2800      	cmp	r0, #0
    5eb6:	d0f2      	beq.n	5e9e <SdioCard::writeStart(unsigned long)+0x22>
    5eb8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5ebc:	05db      	lsls	r3, r3, #23
    5ebe:	d5ee      	bpl.n	5e9e <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    5ec0:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    5ec6:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5eca:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    5ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5ed2:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5ed6:	4b18      	ldr	r3, [pc, #96]	; (5f38 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5ed8:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5edc:	781b      	ldrb	r3, [r3, #0]
    5ede:	b1cb      	cbz	r3, 5f14 <SdioCard::writeStart(unsigned long)+0x98>
    5ee0:	4649      	mov	r1, r9
    5ee2:	4816      	ldr	r0, [pc, #88]	; (5f3c <SdioCard::writeStart(unsigned long)+0xc0>)
    5ee4:	f7ff feea 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    5ee8:	b930      	cbnz	r0, 5ef8 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    5eea:	4915      	ldr	r1, [pc, #84]	; (5f40 <SdioCard::writeStart(unsigned long)+0xc4>)
    5eec:	240e      	movs	r4, #14
  m_errorLine = line;
    5eee:	4b15      	ldr	r3, [pc, #84]	; (5f44 <SdioCard::writeStart(unsigned long)+0xc8>)
    5ef0:	f240 427e 	movw	r2, #1150	; 0x47e
  m_errorCode = code;
    5ef4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5ef6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    5ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5efc:	4a10      	ldr	r2, [pc, #64]	; (5f40 <SdioCard::writeStart(unsigned long)+0xc4>)
    5efe:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5f00:	2000      	movs	r0, #0
  m_errorLine = line;
    5f02:	4b10      	ldr	r3, [pc, #64]	; (5f44 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    5f04:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5f06:	f240 4272 	movw	r2, #1138	; 0x472
      m_busyFcn = 0;
    5f0a:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    5f0e:	601a      	str	r2, [r3, #0]
}
    5f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5f14:	ea4f 2949 	mov.w	r9, r9, lsl #9
    5f18:	4808      	ldr	r0, [pc, #32]	; (5f3c <SdioCard::writeStart(unsigned long)+0xc0>)
    5f1a:	4649      	mov	r1, r9
    5f1c:	f7ff fece 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    5f20:	2800      	cmp	r0, #0
    5f22:	d1e9      	bne.n	5ef8 <SdioCard::writeStart(unsigned long)+0x7c>
    5f24:	e7e1      	b.n	5eea <SdioCard::writeStart(unsigned long)+0x6e>
    5f26:	bf00      	nop
    5f28:	00005e51 	.word	0x00005e51
    5f2c:	2001d978 	.word	0x2001d978
    5f30:	0d1a0000 	.word	0x0d1a0000
    5f34:	000f4240 	.word	0x000f4240
    5f38:	2001ec94 	.word	0x2001ec94
    5f3c:	193a0020 	.word	0x193a0020
    5f40:	20008bf6 	.word	0x20008bf6
    5f44:	2001d748 	.word	0x2001d748
    5f48:	2001e064 	.word	0x2001e064
    5f4c:	402c0000 	.word	0x402c0000

00005f50 <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    5f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f54:	468a      	mov	sl, r1
    5f56:	4691      	mov	r9, r2
    5f58:	4e24      	ldr	r6, [pc, #144]	; (5fec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x9c>)
  uint32_t m = micros();
    5f5a:	f001 ffbb 	bl	7ed4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f5e:	4d24      	ldr	r5, [pc, #144]	; (5ff0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa0>)
  uint32_t m = micros();
    5f60:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f62:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 6014 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc4>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f66:	4f23      	ldr	r7, [pc, #140]	; (5ff4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa4>)
  while (fcn()) {
    5f68:	e004      	b.n	5f74 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f6a:	f001 ffb3 	bl	7ed4 <micros>
    5f6e:	1b00      	subs	r0, r0, r4
    5f70:	42b8      	cmp	r0, r7
    5f72:	d825      	bhi.n	5fc0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f74:	6831      	ldr	r1, [r6, #0]
    5f76:	4628      	mov	r0, r5
    5f78:	f7ff fea0 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    5f7c:	2800      	cmp	r0, #0
    5f7e:	d0f4      	beq.n	5f6a <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
    5f80:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5f84:	05db      	lsls	r3, r3, #23
    5f86:	d5f0      	bpl.n	5f6a <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    5f88:	4b1b      	ldr	r3, [pc, #108]	; (5ff8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa8>)
    5f8a:	2201      	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5f8c:	4651      	mov	r1, sl
    5f8e:	481b      	ldr	r0, [pc, #108]	; (5ffc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xac>)
  m_dmaBusy = true;
    5f90:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    5f92:	2200      	movs	r2, #0
    5f94:	4b1a      	ldr	r3, [pc, #104]	; (6000 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb0>)
    5f96:	601a      	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5f98:	4a1a      	ldr	r2, [pc, #104]	; (6004 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5f9a:	4b1b      	ldr	r3, [pc, #108]	; (6008 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb8>)
  SDHC_DSADDR = (uint32_t)status;
    5f9c:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5fa0:	f8c8 2004 	str.w	r2, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5fa4:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5fa8:	f7ff fe88 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    5fac:	b990      	cbnz	r0, 5fd4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>
  m_errorCode = code;
    5fae:	4917      	ldr	r1, [pc, #92]	; (600c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    5fb0:	2404      	movs	r4, #4
  m_errorLine = line;
    5fb2:	4b17      	ldr	r3, [pc, #92]	; (6010 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    5fb4:	f240 321b 	movw	r2, #795	; 0x31b
  m_errorCode = code;
    5fb8:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5fba:	601a      	str	r2, [r3, #0]
}
    5fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5fc0:	4912      	ldr	r1, [pc, #72]	; (600c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    5fc2:	240a      	movs	r4, #10
  m_errorLine = line;
    5fc4:	4b12      	ldr	r3, [pc, #72]	; (6010 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    5fc6:	f44f 7245 	mov.w	r2, #788	; 0x314
    return sdError(SD_CARD_ERROR_CMD13);
    5fca:	2000      	movs	r0, #0
  m_errorCode = code;
    5fcc:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5fce:	601a      	str	r2, [r3, #0]
}
    5fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!waitDmaStatus()) {
    5fd4:	f7ff fda0 	bl	5b18 <waitDmaStatus()>
    5fd8:	2800      	cmp	r0, #0
    5fda:	d1f9      	bne.n	5fd0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
  m_errorCode = code;
    5fdc:	490b      	ldr	r1, [pc, #44]	; (600c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    5fde:	2426      	movs	r4, #38	; 0x26
  m_errorLine = line;
    5fe0:	4b0b      	ldr	r3, [pc, #44]	; (6010 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    5fe2:	f240 321e 	movw	r2, #798	; 0x31e
  m_errorCode = code;
    5fe6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5fe8:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    5fea:	e7f1      	b.n	5fd0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
    5fec:	2001d978 	.word	0x2001d978
    5ff0:	0d1a0000 	.word	0x0d1a0000
    5ff4:	000f4240 	.word	0x000f4240
    5ff8:	2001ec96 	.word	0x2001ec96
    5ffc:	063a0011 	.word	0x063a0011
    6000:	2001e068 	.word	0x2001e068
    6004:	00010040 	.word	0x00010040
    6008:	117f0002 	.word	0x117f0002
    600c:	20008bf6 	.word	0x20008bf6
    6010:	2001d748 	.word	0x2001d748
    6014:	402c0000 	.word	0x402c0000

00006018 <SdioCard::readStop()>:
bool SdioCard::readStop() { return transferStop(); }
    6018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    601c:	4c25      	ldr	r4, [pc, #148]	; (60b4 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    601e:	2100      	movs	r1, #0
    6020:	4825      	ldr	r0, [pc, #148]	; (60b8 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6022:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6028:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    602a:	f7ff fe47 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    602e:	4605      	mov	r5, r0
    6030:	b948      	cbnz	r0, 6046 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    6032:	4922      	ldr	r1, [pc, #136]	; (60bc <SdioCard::readStop()+0xa4>)
    6034:	2009      	movs	r0, #9
  m_errorLine = line;
    6036:	4b22      	ldr	r3, [pc, #136]	; (60c0 <SdioCard::readStop()+0xa8>)
    6038:	f240 226d 	movw	r2, #621	; 0x26d
  m_errorCode = code;
    603c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    603e:	601a      	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    6040:	4628      	mov	r0, r5
    6042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    6046:	4b1f      	ldr	r3, [pc, #124]	; (60c4 <SdioCard::readStop()+0xac>)
    6048:	f8df 8080 	ldr.w	r8, [pc, #128]	; 60cc <SdioCard::readStop()+0xb4>
    604c:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    6050:	f001 ff40 	bl	7ed4 <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    6054:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    6056:	4606      	mov	r6, r0
  while (fcn()) {
    6058:	01d8      	lsls	r0, r3, #7
    605a:	d418      	bmi.n	608e <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    605c:	4f1a      	ldr	r7, [pc, #104]	; (60c8 <SdioCard::readStop()+0xb0>)
    605e:	e004      	b.n	606a <SdioCard::readStop()+0x52>
    yield();
    6060:	f003 fa42 	bl	94e8 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    6064:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    6066:	01d9      	lsls	r1, r3, #7
    6068:	d411      	bmi.n	608e <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    606a:	f001 ff33 	bl	7ed4 <micros>
    606e:	1b83      	subs	r3, r0, r6
    6070:	42bb      	cmp	r3, r7
    6072:	d9f5      	bls.n	6060 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    6074:	4a11      	ldr	r2, [pc, #68]	; (60bc <SdioCard::readStop()+0xa4>)
    6076:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6078:	2500      	movs	r5, #0
  m_errorLine = line;
    607a:	4b11      	ldr	r3, [pc, #68]	; (60c0 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    607c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    607e:	f44f 721c 	mov.w	r2, #624	; 0x270
bool SdioCard::readStop() { return transferStop(); }
    6082:	4628      	mov	r0, r5
      m_busyFcn = 0;
    6084:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    6088:	601a      	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    608a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    608e:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    6090:	4b08      	ldr	r3, [pc, #32]	; (60b4 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    6092:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    6096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6098:	0792      	lsls	r2, r2, #30
    609a:	d5d1      	bpl.n	6040 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    609c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    609e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    60a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    60a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    60a6:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    60aa:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    60ac:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    60ae:	629a      	str	r2, [r3, #40]	; 0x28
    60b0:	e7c6      	b.n	6040 <SdioCard::readStop()+0x28>
    60b2:	bf00      	nop
    60b4:	402c0000 	.word	0x402c0000
    60b8:	0cdb0000 	.word	0x0cdb0000
    60bc:	20008bf6 	.word	0x20008bf6
    60c0:	2001d748 	.word	0x2001d748
    60c4:	000058e5 	.word	0x000058e5
    60c8:	000f4240 	.word	0x000f4240
    60cc:	2001e064 	.word	0x2001e064

000060d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                        size_t n) {
    60d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60d4:	4614      	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    60d6:	f012 0203 	ands.w	r2, r2, #3
                        size_t n) {
    60da:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    60dc:	bf18      	it	ne
    60de:	2201      	movne	r2, #1
    60e0:	9301      	str	r3, [sp, #4]
    60e2:	2b00      	cmp	r3, #0
    60e4:	bf08      	it	eq
    60e6:	f042 0201 	orreq.w	r2, r2, #1
    60ea:	b152      	cbz	r2, 6102 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x32>
  m_errorCode = code;
    60ec:	492e      	ldr	r1, [pc, #184]	; (61a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    60ee:	2026      	movs	r0, #38	; 0x26
  m_errorLine = line;
    60f0:	4b2e      	ldr	r3, [pc, #184]	; (61ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
    60f2:	f240 2223 	movw	r2, #547	; 0x223
  m_errorCode = code;
    60f6:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    60f8:	601a      	str	r2, [r3, #0]
}
    60fa:	2000      	movs	r0, #0
    60fc:	b003      	add	sp, #12
    60fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    6102:	4b2b      	ldr	r3, [pc, #172]	; (61b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe0>)
    6104:	4606      	mov	r6, r0
    6106:	4a2b      	ldr	r2, [pc, #172]	; (61b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
    6108:	460d      	mov	r5, r1
    610a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 61cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xfc>
    610e:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    6110:	f001 fee0 	bl	7ed4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6114:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 61d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
  uint32_t m = micros();
    6118:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    611a:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 61d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    611e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 61d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>
  while (fcn()) {
    6122:	e006      	b.n	6132 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x62>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6124:	f001 fed6 	bl	7ed4 <micros>
    6128:	1bc0      	subs	r0, r0, r7
    612a:	4550      	cmp	r0, sl
    612c:	d82f      	bhi.n	618e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xbe>
    yield();
    612e:	f003 f9db 	bl	94e8 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6132:	f8d9 1000 	ldr.w	r1, [r9]
    6136:	4640      	mov	r0, r8
    6138:	f7ff fdc0 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    613c:	2800      	cmp	r0, #0
    613e:	d0f1      	beq.n	6124 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
    6140:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    6144:	05db      	lsls	r3, r3, #23
    6146:	d5ed      	bpl.n	6124 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6148:	9a01      	ldr	r2, [sp, #4]
  m_dmaBusy = true;
    614a:	2001      	movs	r0, #1
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    614c:	4b1a      	ldr	r3, [pc, #104]	; (61b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe8>)
  m_busyFcn = 0;
    614e:	4919      	ldr	r1, [pc, #100]	; (61b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6150:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    6154:	2200      	movs	r2, #0
    6156:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    615c:	4917      	ldr	r1, [pc, #92]	; (61bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xec>)
    615e:	7008      	strb	r0, [r1, #0]
  m_irqstat = 0;
    6160:	4917      	ldr	r1, [pc, #92]	; (61c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf0>)
    6162:	600a      	str	r2, [r1, #0]
  SDHC_DSADDR = (uint32_t)buf;
    6164:	f8cb 4000 	str.w	r4, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6168:	f8cb 3004 	str.w	r3, [fp, #4]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    616c:	4b15      	ldr	r3, [pc, #84]	; (61c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    616e:	4a16      	ldr	r2, [pc, #88]	; (61c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf8>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    6170:	781b      	ldrb	r3, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6172:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    6176:	b1ab      	cbz	r3, 61a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd4>
    6178:	4629      	mov	r1, r5
    617a:	4630      	mov	r0, r6
    617c:	f7ff fd9e 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6180:	2800      	cmp	r0, #0
    6182:	d0ba      	beq.n	60fa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
}
    6184:	b003      	add	sp, #12
    6186:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return waitDmaStatus();
    618a:	f7ff bcc5 	b.w	5b18 <waitDmaStatus()>
  m_errorCode = code;
    618e:	4a06      	ldr	r2, [pc, #24]	; (61a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    6190:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6192:	2000      	movs	r0, #0
  m_errorLine = line;
    6194:	4b05      	ldr	r3, [pc, #20]	; (61ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
      m_busyFcn = 0;
    6196:	4c07      	ldr	r4, [pc, #28]	; (61b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  m_errorCode = code;
    6198:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    619a:	f240 2226 	movw	r2, #550	; 0x226
      m_busyFcn = 0;
    619e:	6020      	str	r0, [r4, #0]
  m_errorLine = line;
    61a0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    61a2:	e7aa      	b.n	60fa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    61a4:	026d      	lsls	r5, r5, #9
    61a6:	e7e7      	b.n	6178 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>
    61a8:	20008bf6 	.word	0x20008bf6
    61ac:	2001d748 	.word	0x2001d748
    61b0:	00005e51 	.word	0x00005e51
    61b4:	2001e064 	.word	0x2001e064
    61b8:	1fff0000 	.word	0x1fff0000
    61bc:	2001ec96 	.word	0x2001ec96
    61c0:	2001e068 	.word	0x2001e068
    61c4:	2001ec94 	.word	0x2001ec94
    61c8:	117f0002 	.word	0x117f0002
    61cc:	2001d978 	.word	0x2001d978
    61d0:	0d1a0000 	.word	0x0d1a0000
    61d4:	402c0000 	.word	0x402c0000
    61d8:	000f4240 	.word	0x000f4240

000061dc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    61dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61de:	4606      	mov	r6, r0
    61e0:	7a00      	ldrb	r0, [r0, #8]
    61e2:	460c      	mov	r4, r1
    61e4:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    61e6:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    61e8:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    61ea:	d413      	bmi.n	6214 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    61ec:	b183      	cbz	r3, 6210 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    61ee:	440f      	add	r7, r1
    61f0:	e001      	b.n	61f6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    61f2:	42bc      	cmp	r4, r7
    61f4:	d00c      	beq.n	6210 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    61f6:	6833      	ldr	r3, [r6, #0]
    61f8:	462a      	mov	r2, r5
    61fa:	4621      	mov	r1, r4
    61fc:	4630      	mov	r0, r6
    61fe:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    6200:	3401      	adds	r4, #1
    6202:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i * 512UL)) {
    6206:	4798      	blx	r3
    6208:	2800      	cmp	r0, #0
    620a:	d1f2      	bne.n	61f2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    620c:	2000      	movs	r0, #0
}
    620e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    6210:	2001      	movs	r0, #1
}
    6212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    6214:	0790      	lsls	r0, r2, #30
    6216:	d012      	beq.n	623e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    6218:	2b00      	cmp	r3, #0
    621a:	d0f9      	beq.n	6210 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    621c:	440f      	add	r7, r1
    621e:	e001      	b.n	6224 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    6220:	42bc      	cmp	r4, r7
    6222:	d0f5      	beq.n	6210 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    6224:	6833      	ldr	r3, [r6, #0]
    6226:	462a      	mov	r2, r5
    6228:	4621      	mov	r1, r4
    622a:	4630      	mov	r0, r6
    622c:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    622e:	3401      	adds	r4, #1
    6230:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    6234:	4798      	blx	r3
    6236:	2800      	cmp	r0, #0
    6238:	d1f2      	bne.n	6220 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    623a:	2000      	movs	r0, #0
    623c:	e7e7      	b.n	620e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    623e:	4806      	ldr	r0, [pc, #24]	; (6258 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    6240:	f7ff ff46 	bl	60d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6244:	2800      	cmp	r0, #0
    6246:	d1e3      	bne.n	6210 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    6248:	4904      	ldr	r1, [pc, #16]	; (625c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    624a:	240c      	movs	r4, #12
  m_errorLine = line;
    624c:	4b04      	ldr	r3, [pc, #16]	; (6260 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    624e:	f240 32ce 	movw	r2, #974	; 0x3ce
  m_errorCode = code;
    6252:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6254:	601a      	str	r2, [r3, #0]
}
    6256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6258:	123a0037 	.word	0x123a0037
    625c:	20008bf6 	.word	0x20008bf6
    6260:	2001d748 	.word	0x2001d748

00006264 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    6264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6266:	4606      	mov	r6, r0
    6268:	7a00      	ldrb	r0, [r0, #8]
    626a:	460c      	mov	r4, r1
    626c:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    626e:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    6270:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    6272:	d413      	bmi.n	629c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    6274:	b183      	cbz	r3, 6298 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    6276:	440f      	add	r7, r1
    6278:	e001      	b.n	627e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    627a:	42bc      	cmp	r4, r7
    627c:	d00c      	beq.n	6298 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    627e:	6833      	ldr	r3, [r6, #0]
    6280:	462a      	mov	r2, r5
    6282:	4621      	mov	r1, r4
    6284:	4630      	mov	r0, r6
    6286:	6a1b      	ldr	r3, [r3, #32]
    for (size_t i = 0; i < n; i++) {
    6288:	3401      	adds	r4, #1
    628a:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i * 512UL)) {
    628e:	4798      	blx	r3
    6290:	2800      	cmp	r0, #0
    6292:	d1f2      	bne.n	627a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    6294:	2000      	movs	r0, #0
}
    6296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    6298:	2001      	movs	r0, #1
}
    629a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    629c:	0790      	lsls	r0, r2, #30
    629e:	d012      	beq.n	62c6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    62a0:	2b00      	cmp	r3, #0
    62a2:	d0f9      	beq.n	6298 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    62a4:	440f      	add	r7, r1
    62a6:	e001      	b.n	62ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    62a8:	42bc      	cmp	r4, r7
    62aa:	d0f5      	beq.n	6298 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    62ac:	6833      	ldr	r3, [r6, #0]
    62ae:	462a      	mov	r2, r5
    62b0:	4621      	mov	r1, r4
    62b2:	4630      	mov	r0, r6
    62b4:	6a1b      	ldr	r3, [r3, #32]
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    62b6:	3401      	adds	r4, #1
    62b8:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    62bc:	4798      	blx	r3
    62be:	2800      	cmp	r0, #0
    62c0:	d1f2      	bne.n	62a8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    62c2:	2000      	movs	r0, #0
    62c4:	e7e7      	b.n	6296 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    62c6:	4806      	ldr	r0, [pc, #24]	; (62e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    62c8:	f7ff ff02 	bl	60d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    62cc:	2800      	cmp	r0, #0
    62ce:	d1e3      	bne.n	6298 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    62d0:	4904      	ldr	r1, [pc, #16]	; (62e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    62d2:	240e      	movs	r4, #14
  m_errorLine = line;
    62d4:	4b04      	ldr	r3, [pc, #16]	; (62e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    62d6:	f240 4264 	movw	r2, #1124	; 0x464
  m_errorCode = code;
    62da:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    62dc:	601a      	str	r2, [r3, #0]
}
    62de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62e0:	193a0027 	.word	0x193a0027
    62e4:	20008bf6 	.word	0x20008bf6
    62e8:	2001d748 	.word	0x2001d748

000062ec <SdioCard::begin(SdioConfig)>:
  m_curState = IDLE_STATE;
    62ec:	2200      	movs	r2, #0
  m_initDone = false;
    62ee:	4bb1      	ldr	r3, [pc, #708]	; (65b4 <SdioCard::begin(SdioConfig)+0x2c8>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    62f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_initDone = false;
    62f4:	701a      	strb	r2, [r3, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
    62f6:	4606      	mov	r6, r0
  CCM_ANALOG_PFD_528 |= (1 << 7);
    62f8:	4baf      	ldr	r3, [pc, #700]	; (65b8 <SdioCard::begin(SdioConfig)+0x2cc>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    62fa:	b093      	sub	sp, #76	; 0x4c
  m_errorCode = SD_CARD_ERROR_NONE;
    62fc:	4caf      	ldr	r4, [pc, #700]	; (65bc <SdioCard::begin(SdioConfig)+0x2d0>)
  m_highCapacity = false;
    62fe:	f8df a314 	ldr.w	sl, [pc, #788]	; 6614 <SdioCard::begin(SdioConfig)+0x328>
  m_version2 = false;
    6302:	4faf      	ldr	r7, [pc, #700]	; (65c0 <SdioCard::begin(SdioConfig)+0x2d4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    6304:	7022      	strb	r2, [r4, #0]
  m_curState = IDLE_STATE;
    6306:	7242      	strb	r2, [r0, #9]
  m_highCapacity = false;
    6308:	f88a 2000 	strb.w	r2, [sl]
  m_version2 = false;
    630c:	703a      	strb	r2, [r7, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    630e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    6312:	7201      	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6314:	2105      	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    631a:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 65dc <SdioCard::begin(SdioConfig)+0x2f0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    631e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    6322:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6326:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    632a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    632e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6332:	f042 0218 	orr.w	r2, r2, #24
    6336:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    633a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    633e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    6342:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6346:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    634a:	4a9e      	ldr	r2, [pc, #632]	; (65c4 <SdioCard::begin(SdioConfig)+0x2d8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    634c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    6350:	f040 000c 	orr.w	r0, r0, #12
    6354:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    6358:	6a58      	ldr	r0, [r3, #36]	; 0x24
    635a:	f420 5060 	bic.w	r0, r0, #14336	; 0x3800
    635e:	6258      	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    6360:	69d8      	ldr	r0, [r3, #28]
    6362:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    6366:	61d8      	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    6368:	6a58      	ldr	r0, [r3, #36]	; 0x24
    636a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    636e:	6258      	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6370:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    6374:	f8c2 11d0 	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6378:	f8c2 11bc 	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    637c:	f8c2 11c0 	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6380:	f8c2 11c4 	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    6384:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    6388:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    638c:	4b8e      	ldr	r3, [pc, #568]	; (65c8 <SdioCard::begin(SdioConfig)+0x2dc>)
  SDHC_MIX_CTRL |= 0x80000000;
    638e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    6392:	f8c8 2048 	str.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6396:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    639a:	4313      	orrs	r3, r2
    639c:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    63a0:	f8d8 502c 	ldr.w	r5, [r8, #44]	; 0x2c
    63a4:	f015 7580 	ands.w	r5, r5, #16777216	; 0x1000000
    63a8:	d1fa      	bne.n	63a0 <SdioCard::begin(SdioConfig)+0xb4>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    63aa:	f44f 70c8 	mov.w	r0, #400	; 0x190
    63ae:	f7ff faa9 	bl	5904 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    63b2:	4b84      	ldr	r3, [pc, #528]	; (65c4 <SdioCard::begin(SdioConfig)+0x2d8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    63b4:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    63b8:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    63bc:	f8c3 51cc 	str.w	r5, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    63c0:	f8c3 51d0 	str.w	r5, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    63c4:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    63c8:	f8c3 51c0 	str.w	r5, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    63cc:	f8c3 51c4 	str.w	r5, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    63d0:	f8c3 51c8 	str.w	r5, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    63d4:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    63d8:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    63dc:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    63e0:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    63e4:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    63e8:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    63ec:	4b77      	ldr	r3, [pc, #476]	; (65cc <SdioCard::begin(SdioConfig)+0x2e0>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    63ee:	4a78      	ldr	r2, [pc, #480]	; (65d0 <SdioCard::begin(SdioConfig)+0x2e4>)
    63f0:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
    63f4:	4b77      	ldr	r3, [pc, #476]	; (65d4 <SdioCard::begin(SdioConfig)+0x2e8>)
    63f6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    63fa:	4b77      	ldr	r3, [pc, #476]	; (65d8 <SdioCard::begin(SdioConfig)+0x2ec>)
    63fc:	2260      	movs	r2, #96	; 0x60
    63fe:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    6402:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    640a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    640e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    6412:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    6416:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    641a:	4b70      	ldr	r3, [pc, #448]	; (65dc <SdioCard::begin(SdioConfig)+0x2f0>)
    641c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    641e:	f011 6100 	ands.w	r1, r1, #134217728	; 0x8000000
    6422:	d1fb      	bne.n	641c <SdioCard::begin(SdioConfig)+0x130>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    6424:	4608      	mov	r0, r1
    6426:	f7ff fc49 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    642a:	4683      	mov	fp, r0
    642c:	b948      	cbnz	r0, 6442 <SdioCard::begin(SdioConfig)+0x156>
  m_errorCode = code;
    642e:	2101      	movs	r1, #1
  m_errorLine = line;
    6430:	4b6b      	ldr	r3, [pc, #428]	; (65e0 <SdioCard::begin(SdioConfig)+0x2f4>)
    6432:	f240 22be 	movw	r2, #702	; 0x2be
  m_errorCode = code;
    6436:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6438:	601a      	str	r2, [r3, #0]
}
    643a:	4658      	mov	r0, fp
    643c:	b013      	add	sp, #76	; 0x4c
    643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6442:	f04f 0803 	mov.w	r8, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    6446:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 6618 <SdioCard::begin(SdioConfig)+0x32c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    644a:	4d64      	ldr	r5, [pc, #400]	; (65dc <SdioCard::begin(SdioConfig)+0x2f0>)
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    644c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    6450:	4648      	mov	r0, r9
    6452:	f7ff fc33 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6456:	2800      	cmp	r0, #0
    6458:	d14e      	bne.n	64f8 <SdioCard::begin(SdioConfig)+0x20c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    645a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    645c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    6460:	62eb      	str	r3, [r5, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    6462:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    6464:	01db      	lsls	r3, r3, #7
    6466:	d4fc      	bmi.n	6462 <SdioCard::begin(SdioConfig)+0x176>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    6468:	f1b8 0801 	subs.w	r8, r8, #1
    646c:	d1ee      	bne.n	644c <SdioCard::begin(SdioConfig)+0x160>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    646e:	783b      	ldrb	r3, [r7, #0]
    6470:	2b00      	cmp	r3, #0
    6472:	4b5c      	ldr	r3, [pc, #368]	; (65e4 <SdioCard::begin(SdioConfig)+0x2f8>)
    6474:	bf0c      	ite	eq
    6476:	f44f 1940 	moveq.w	r9, #3145728	; 0x300000
    647a:	4699      	movne	r9, r3
  int m = micros();
    647c:	f001 fd2a 	bl	7ed4 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6480:	4f59      	ldr	r7, [pc, #356]	; (65e8 <SdioCard::begin(SdioConfig)+0x2fc>)
  int m = micros();
    6482:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6484:	f8df b194 	ldr.w	fp, [pc, #404]	; 661c <SdioCard::begin(SdioConfig)+0x330>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6488:	f8df 8194 	ldr.w	r8, [pc, #404]	; 6620 <SdioCard::begin(SdioConfig)+0x334>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    648c:	2100      	movs	r1, #0
    648e:	4638      	mov	r0, r7
    6490:	f7ff fc14 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6494:	b958      	cbnz	r0, 64ae <SdioCard::begin(SdioConfig)+0x1c2>
      return sdError(SD_CARD_ERROR_ACMD41);
    6496:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    649a:	2117      	movs	r1, #23
  m_errorLine = line;
    649c:	4b50      	ldr	r3, [pc, #320]	; (65e0 <SdioCard::begin(SdioConfig)+0x2f4>)
    649e:	f240 22d3 	movw	r2, #723	; 0x2d3
}
    64a2:	4658      	mov	r0, fp
  m_errorCode = code;
    64a4:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    64a6:	601a      	str	r2, [r3, #0]
}
    64a8:	b013      	add	sp, #76	; 0x4c
    64aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    64ae:	4649      	mov	r1, r9
    64b0:	4658      	mov	r0, fp
    64b2:	f7ff fc03 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    64b6:	2800      	cmp	r0, #0
    64b8:	d0ed      	beq.n	6496 <SdioCard::begin(SdioConfig)+0x1aa>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    64ba:	f001 fd0b 	bl	7ed4 <micros>
    64be:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    64c0:	4b46      	ldr	r3, [pc, #280]	; (65dc <SdioCard::begin(SdioConfig)+0x2f0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    64c2:	4540      	cmp	r0, r8
    64c4:	d8e7      	bhi.n	6496 <SdioCard::begin(SdioConfig)+0x1aa>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    64c6:	691a      	ldr	r2, [r3, #16]
    64c8:	2a00      	cmp	r2, #0
    64ca:	dadf      	bge.n	648c <SdioCard::begin(SdioConfig)+0x1a0>
  m_ocr = SDHC_CMDRSP0;
    64cc:	6919      	ldr	r1, [r3, #16]
    64ce:	4a47      	ldr	r2, [pc, #284]	; (65ec <SdioCard::begin(SdioConfig)+0x300>)
    64d0:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    64d2:	691b      	ldr	r3, [r3, #16]
    64d4:	005d      	lsls	r5, r3, #1
    64d6:	d502      	bpl.n	64de <SdioCard::begin(SdioConfig)+0x1f2>
    m_highCapacity = true;
    64d8:	2301      	movs	r3, #1
    64da:	f88a 3000 	strb.w	r3, [sl]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    64de:	2100      	movs	r1, #0
    64e0:	4843      	ldr	r0, [pc, #268]	; (65f0 <SdioCard::begin(SdioConfig)+0x304>)
    64e2:	f7ff fbeb 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    64e6:	4683      	mov	fp, r0
    64e8:	b9c8      	cbnz	r0, 651e <SdioCard::begin(SdioConfig)+0x232>
  m_errorCode = code;
    64ea:	2102      	movs	r1, #2
  m_errorLine = line;
    64ec:	4b3c      	ldr	r3, [pc, #240]	; (65e0 <SdioCard::begin(SdioConfig)+0x2f4>)
    64ee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  m_errorCode = code;
    64f2:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    64f4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    64f6:	e7a0      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
      if (SDHC_CMDRSP0 != 0X1AA) {
    64f8:	4b38      	ldr	r3, [pc, #224]	; (65dc <SdioCard::begin(SdioConfig)+0x2f0>)
    64fa:	691b      	ldr	r3, [r3, #16]
    64fc:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    6500:	d008      	beq.n	6514 <SdioCard::begin(SdioConfig)+0x228>
  m_errorCode = code;
    6502:	2106      	movs	r1, #6
  m_errorLine = line;
    6504:	4b36      	ldr	r3, [pc, #216]	; (65e0 <SdioCard::begin(SdioConfig)+0x2f4>)
    6506:	f44f 7231 	mov.w	r2, #708	; 0x2c4
        return sdError(SD_CARD_ERROR_CMD8);
    650a:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    650e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6510:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    6512:	e792      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
      m_version2 = true;
    6514:	2301      	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6516:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 65e4 <SdioCard::begin(SdioConfig)+0x2f8>
      m_version2 = true;
    651a:	703b      	strb	r3, [r7, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    651c:	e7ae      	b.n	647c <SdioCard::begin(SdioConfig)+0x190>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    651e:	2100      	movs	r1, #0
    6520:	4834      	ldr	r0, [pc, #208]	; (65f4 <SdioCard::begin(SdioConfig)+0x308>)
    6522:	f7ff fbcb 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6526:	4683      	mov	fp, r0
    6528:	b930      	cbnz	r0, 6538 <SdioCard::begin(SdioConfig)+0x24c>
  m_errorCode = code;
    652a:	2103      	movs	r1, #3
  m_errorLine = line;
    652c:	4b2c      	ldr	r3, [pc, #176]	; (65e0 <SdioCard::begin(SdioConfig)+0x2f4>)
    652e:	f240 22df 	movw	r2, #735	; 0x2df
  m_errorCode = code;
    6532:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6534:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    6536:	e780      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6538:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 65dc <SdioCard::begin(SdioConfig)+0x2f0>
    653c:	4b2e      	ldr	r3, [pc, #184]	; (65f8 <SdioCard::begin(SdioConfig)+0x30c>)
    653e:	f8da 2010 	ldr.w	r2, [sl, #16]
    6542:	4d2e      	ldr	r5, [pc, #184]	; (65fc <SdioCard::begin(SdioConfig)+0x310>)
    6544:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6546:	492e      	ldr	r1, [pc, #184]	; (6600 <SdioCard::begin(SdioConfig)+0x314>)
    6548:	482e      	ldr	r0, [pc, #184]	; (6604 <SdioCard::begin(SdioConfig)+0x318>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    654a:	602b      	str	r3, [r5, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    654c:	f7ff fc02 	bl	5d54 <readReg16(unsigned long, void*)>
    6550:	4683      	mov	fp, r0
    6552:	b930      	cbnz	r0, 6562 <SdioCard::begin(SdioConfig)+0x276>
  m_errorCode = code;
    6554:	2107      	movs	r1, #7
  m_errorLine = line;
    6556:	4b22      	ldr	r3, [pc, #136]	; (65e0 <SdioCard::begin(SdioConfig)+0x2f4>)
    6558:	f44f 7239 	mov.w	r2, #740	; 0x2e4
  m_errorCode = code;
    655c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    655e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    6560:	e76b      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    6562:	4929      	ldr	r1, [pc, #164]	; (6608 <SdioCard::begin(SdioConfig)+0x31c>)
    6564:	4829      	ldr	r0, [pc, #164]	; (660c <SdioCard::begin(SdioConfig)+0x320>)
    6566:	f7ff fbf5 	bl	5d54 <readReg16(unsigned long, void*)>
    656a:	4683      	mov	fp, r0
    656c:	b930      	cbnz	r0, 657c <SdioCard::begin(SdioConfig)+0x290>
  m_errorCode = code;
    656e:	2108      	movs	r1, #8
  m_errorLine = line;
    6570:	4b1b      	ldr	r3, [pc, #108]	; (65e0 <SdioCard::begin(SdioConfig)+0x2f4>)
    6572:	f240 22e7 	movw	r2, #743	; 0x2e7
  m_errorCode = code;
    6576:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6578:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    657a:	e75e      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    657c:	6829      	ldr	r1, [r5, #0]
    657e:	4824      	ldr	r0, [pc, #144]	; (6610 <SdioCard::begin(SdioConfig)+0x324>)
    6580:	f7ff fb9c 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6584:	4683      	mov	fp, r0
    6586:	b930      	cbnz	r0, 6596 <SdioCard::begin(SdioConfig)+0x2aa>
  m_errorCode = code;
    6588:	2105      	movs	r1, #5
  m_errorLine = line;
    658a:	4b15      	ldr	r3, [pc, #84]	; (65e0 <SdioCard::begin(SdioConfig)+0x2f4>)
    658c:	f240 22ea 	movw	r2, #746	; 0x2ea
  m_errorCode = code;
    6590:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6592:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    6594:	e751      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6596:	6829      	ldr	r1, [r5, #0]
    6598:	4813      	ldr	r0, [pc, #76]	; (65e8 <SdioCard::begin(SdioConfig)+0x2fc>)
    659a:	f7ff fb8f 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    659e:	2800      	cmp	r0, #0
    65a0:	d140      	bne.n	6624 <SdioCard::begin(SdioConfig)+0x338>
  m_errorCode = code;
    65a2:	2114      	movs	r1, #20
  m_errorLine = line;
    65a4:	4b0e      	ldr	r3, [pc, #56]	; (65e0 <SdioCard::begin(SdioConfig)+0x2f4>)
    65a6:	f240 22ee 	movw	r2, #750	; 0x2ee
    return sdError(SD_CARD_ERROR_ACMD6);
    65aa:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    65ae:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    65b0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    65b2:	e742      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
    65b4:	2001ec92 	.word	0x2001ec92
    65b8:	400d8000 	.word	0x400d8000
    65bc:	20008bf6 	.word	0x20008bf6
    65c0:	2001ec93 	.word	0x2001ec93
    65c4:	401f8000 	.word	0x401f8000
    65c8:	01008000 	.word	0x01008000
    65cc:	117f000b 	.word	0x117f000b
    65d0:	000058b5 	.word	0x000058b5
    65d4:	20008c00 	.word	0x20008c00
    65d8:	e000e400 	.word	0xe000e400
    65dc:	402c0000 	.word	0x402c0000
    65e0:	2001d748 	.word	0x2001d748
    65e4:	40300000 	.word	0x40300000
    65e8:	371a0000 	.word	0x371a0000
    65ec:	2001d974 	.word	0x2001d974
    65f0:	02090000 	.word	0x02090000
    65f4:	031a0000 	.word	0x031a0000
    65f8:	ffff0000 	.word	0xffff0000
    65fc:	2001d978 	.word	0x2001d978
    6600:	2001d964 	.word	0x2001d964
    6604:	09090000 	.word	0x09090000
    6608:	2001d954 	.word	0x2001d954
    660c:	0a090000 	.word	0x0a090000
    6610:	071b0000 	.word	0x071b0000
    6614:	2001ec94 	.word	0x2001ec94
    6618:	081a0000 	.word	0x081a0000
    661c:	29020000 	.word	0x29020000
    6620:	000f4240 	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6624:	2102      	movs	r1, #2
    6626:	4886      	ldr	r0, [pc, #536]	; (6840 <SdioCard::begin(SdioConfig)+0x554>)
    6628:	f7ff fb48 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    662c:	2800      	cmp	r0, #0
    662e:	d0b8      	beq.n	65a2 <SdioCard::begin(SdioConfig)+0x2b6>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6630:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6634:	f8df 9240 	ldr.w	r9, [pc, #576]	; 6878 <SdioCard::begin(SdioConfig)+0x58c>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6638:	f023 0306 	bic.w	r3, r3, #6
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    663c:	f8df 821c 	ldr.w	r8, [pc, #540]	; 685c <SdioCard::begin(SdioConfig)+0x570>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6640:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    6644:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    6648:	f043 0302 	orr.w	r3, r3, #2
    664c:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    6650:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    6654:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
  uint32_t m = micros();
    6658:	f001 fc3c 	bl	7ed4 <micros>
    665c:	4607      	mov	r7, r0
  while (fcn()) {
    665e:	e004      	b.n	666a <SdioCard::begin(SdioConfig)+0x37e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6660:	f001 fc38 	bl	7ed4 <micros>
    6664:	1bc0      	subs	r0, r0, r7
    6666:	4540      	cmp	r0, r8
    6668:	d82b      	bhi.n	66c2 <SdioCard::begin(SdioConfig)+0x3d6>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    666a:	6829      	ldr	r1, [r5, #0]
    666c:	4648      	mov	r0, r9
    666e:	f7ff fb25 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6672:	2800      	cmp	r0, #0
    6674:	d0f4      	beq.n	6660 <SdioCard::begin(SdioConfig)+0x374>
    6676:	f8da 3010 	ldr.w	r3, [sl, #16]
  while (fcn()) {
    667a:	05d8      	lsls	r0, r3, #23
    667c:	d5f0      	bpl.n	6660 <SdioCard::begin(SdioConfig)+0x374>
  m_dmaBusy = true;
    667e:	2301      	movs	r3, #1
    6680:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 687c <SdioCard::begin(SdioConfig)+0x590>
  m_irqstat = 0;
    6684:	4f6f      	ldr	r7, [pc, #444]	; (6844 <SdioCard::begin(SdioConfig)+0x558>)
    6686:	f04f 0b00 	mov.w	fp, #0
  m_dmaBusy = true;
    668a:	f888 3000 	strb.w	r3, [r8]
  SDHC_DSADDR = (uint32_t)scr;
    668e:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 6880 <SdioCard::begin(SdioConfig)+0x594>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    6692:	4b6d      	ldr	r3, [pc, #436]	; (6848 <SdioCard::begin(SdioConfig)+0x55c>)
  m_irqstat = 0;
    6694:	f8c7 b000 	str.w	fp, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    6698:	f8ca 9000 	str.w	r9, [sl]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    669c:	f8ca 3004 	str.w	r3, [sl, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    66a0:	4b6a      	ldr	r3, [pc, #424]	; (684c <SdioCard::begin(SdioConfig)+0x560>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    66a2:	486b      	ldr	r0, [pc, #428]	; (6850 <SdioCard::begin(SdioConfig)+0x564>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    66a4:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    66a8:	6829      	ldr	r1, [r5, #0]
    66aa:	f7ff fb07 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    66ae:	b988      	cbnz	r0, 66d4 <SdioCard::begin(SdioConfig)+0x3e8>
  m_errorCode = code;
    66b0:	2118      	movs	r1, #24
  m_errorLine = line;
    66b2:	4b68      	ldr	r3, [pc, #416]	; (6854 <SdioCard::begin(SdioConfig)+0x568>)
    66b4:	f240 12d7 	movw	r2, #471	; 0x1d7
    return false;
    66b8:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    66bc:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    66be:	601a      	str	r2, [r3, #0]
  return false;
    66c0:	e6bb      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    66c2:	210a      	movs	r1, #10
  m_errorLine = line;
    66c4:	4b63      	ldr	r3, [pc, #396]	; (6854 <SdioCard::begin(SdioConfig)+0x568>)
    66c6:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    return false;
    66ca:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    66ce:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    66d0:	601a      	str	r2, [r3, #0]
  return false;
    66d2:	e6b2      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    66d4:	4659      	mov	r1, fp
    66d6:	4860      	ldr	r0, [pc, #384]	; (6858 <SdioCard::begin(SdioConfig)+0x56c>)
    66d8:	f7ff faf0 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    66dc:	2800      	cmp	r0, #0
    66de:	d0e7      	beq.n	66b0 <SdioCard::begin(SdioConfig)+0x3c4>
  if (!waitDmaStatus()) {
    66e0:	f7ff fa1a 	bl	5b18 <waitDmaStatus()>
    66e4:	4683      	mov	fp, r0
    66e6:	b930      	cbnz	r0, 66f6 <SdioCard::begin(SdioConfig)+0x40a>
  m_errorCode = code;
    66e8:	2126      	movs	r1, #38	; 0x26
  m_errorLine = line;
    66ea:	4b5a      	ldr	r3, [pc, #360]	; (6854 <SdioCard::begin(SdioConfig)+0x568>)
    66ec:	f44f 72ed 	mov.w	r2, #474	; 0x1da
  m_errorCode = code;
    66f0:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    66f2:	601a      	str	r2, [r3, #0]
  return false;
    66f4:	e6a1      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
  uint32_t m = micros();
    66f6:	f001 fbed 	bl	7ed4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    66fa:	f8df a17c 	ldr.w	sl, [pc, #380]	; 6878 <SdioCard::begin(SdioConfig)+0x58c>
    66fe:	f8df b184 	ldr.w	fp, [pc, #388]	; 6884 <SdioCard::begin(SdioConfig)+0x598>
  uint32_t m = micros();
    6702:	9001      	str	r0, [sp, #4]
  while (fcn()) {
    6704:	e006      	b.n	6714 <SdioCard::begin(SdioConfig)+0x428>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6706:	f001 fbe5 	bl	7ed4 <micros>
    670a:	9b01      	ldr	r3, [sp, #4]
    670c:	1ac0      	subs	r0, r0, r3
    670e:	4b53      	ldr	r3, [pc, #332]	; (685c <SdioCard::begin(SdioConfig)+0x570>)
    6710:	4298      	cmp	r0, r3
    6712:	d827      	bhi.n	6764 <SdioCard::begin(SdioConfig)+0x478>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6714:	6829      	ldr	r1, [r5, #0]
    6716:	4650      	mov	r0, sl
    6718:	f7ff fad0 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    671c:	2800      	cmp	r0, #0
    671e:	d0f2      	beq.n	6706 <SdioCard::begin(SdioConfig)+0x41a>
    6720:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    6724:	05d9      	lsls	r1, r3, #23
    6726:	d5ee      	bpl.n	6706 <SdioCard::begin(SdioConfig)+0x41a>
  m_dmaBusy = true;
    6728:	2201      	movs	r2, #1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    672a:	4849      	ldr	r0, [pc, #292]	; (6850 <SdioCard::begin(SdioConfig)+0x564>)
  m_dmaBusy = true;
    672c:	f888 2000 	strb.w	r2, [r8]
  m_irqstat = 0;
    6730:	f04f 0800 	mov.w	r8, #0
  SDHC_DSADDR = (uint32_t)scr;
    6734:	4a4a      	ldr	r2, [pc, #296]	; (6860 <SdioCard::begin(SdioConfig)+0x574>)
  m_irqstat = 0;
    6736:	f8c7 8000 	str.w	r8, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    673a:	f8cb 2000 	str.w	r2, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    673e:	4a49      	ldr	r2, [pc, #292]	; (6864 <SdioCard::begin(SdioConfig)+0x578>)
    6740:	f8cb 2004 	str.w	r2, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6744:	4a41      	ldr	r2, [pc, #260]	; (684c <SdioCard::begin(SdioConfig)+0x560>)
    6746:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    674a:	6829      	ldr	r1, [r5, #0]
    674c:	f7ff fab6 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6750:	b988      	cbnz	r0, 6776 <SdioCard::begin(SdioConfig)+0x48a>
  m_errorCode = code;
    6752:	2115      	movs	r1, #21
  m_errorLine = line;
    6754:	4b3f      	ldr	r3, [pc, #252]	; (6854 <SdioCard::begin(SdioConfig)+0x568>)
    6756:	f240 12c5 	movw	r2, #453	; 0x1c5
    return false;
    675a:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    675e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6760:	601a      	str	r2, [r3, #0]
  return false;
    6762:	e66a      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    6764:	210a      	movs	r1, #10
  m_errorLine = line;
    6766:	4b3b      	ldr	r3, [pc, #236]	; (6854 <SdioCard::begin(SdioConfig)+0x568>)
    6768:	f44f 72df 	mov.w	r2, #446	; 0x1be
    return false;
    676c:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    6770:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6772:	601a      	str	r2, [r3, #0]
  return false;
    6774:	e661      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6776:	4641      	mov	r1, r8
    6778:	483b      	ldr	r0, [pc, #236]	; (6868 <SdioCard::begin(SdioConfig)+0x57c>)
    677a:	f7ff fa9f 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    677e:	2800      	cmp	r0, #0
    6780:	d0e7      	beq.n	6752 <SdioCard::begin(SdioConfig)+0x466>
  if (!waitDmaStatus()) {
    6782:	f7ff f9c9 	bl	5b18 <waitDmaStatus()>
    6786:	4683      	mov	fp, r0
    6788:	b930      	cbnz	r0, 6798 <SdioCard::begin(SdioConfig)+0x4ac>
  m_errorCode = code;
    678a:	2126      	movs	r1, #38	; 0x26
  m_errorLine = line;
    678c:	4b31      	ldr	r3, [pc, #196]	; (6854 <SdioCard::begin(SdioConfig)+0x568>)
    678e:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
  m_errorCode = code;
    6792:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6794:	601a      	str	r2, [r3, #0]
  return false;
    6796:	e650      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
  /** Bytes 0-3 SD Association, bytes 4-7 reserved for manufacturer. */
  uint8_t scr[8];
  /** \return SCR_STRUCTURE field  - must be zero.*/
  uint8_t srcStructure() const { return scr[0] >> 4; }
  /** \return SD_SPEC field 0 - v1.0 or V1.01, 1 - 1.10, 2 - V2.00 or greater */
  uint8_t sdSpec() const { return scr[0] & 0XF; }
    6798:	f899 3000 	ldrb.w	r3, [r9]
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    679c:	071a      	lsls	r2, r3, #28
    679e:	d018      	beq.n	67d2 <SdioCard::begin(SdioConfig)+0x4e6>
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    67a0:	6833      	ldr	r3, [r6, #0]
    67a2:	aa02      	add	r2, sp, #8
    67a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
    67a8:	4630      	mov	r0, r6
    67aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67ac:	4798      	blx	r3
    67ae:	b180      	cbz	r0, 67d2 <SdioCard::begin(SdioConfig)+0x4e6>
    67b0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    67b4:	079b      	lsls	r3, r3, #30
    67b6:	d50c      	bpl.n	67d2 <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    67b8:	6833      	ldr	r3, [r6, #0]
    67ba:	aa02      	add	r2, sp, #8
    67bc:	4630      	mov	r0, r6
    67be:	492b      	ldr	r1, [pc, #172]	; (686c <SdioCard::begin(SdioConfig)+0x580>)
    67c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67c2:	4798      	blx	r3
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    67c4:	b128      	cbz	r0, 67d2 <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    67c6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    67ca:	f003 030f 	and.w	r3, r3, #15
    67ce:	2b01      	cmp	r3, #1
    67d0:	d032      	beq.n	6838 <SdioCard::begin(SdioConfig)+0x54c>
    kHzSdClk = 25000;
    67d2:	f246 10a8 	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    67d6:	4c26      	ldr	r4, [pc, #152]	; (6870 <SdioCard::begin(SdioConfig)+0x584>)
    67d8:	2305      	movs	r3, #5
    67da:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    67de:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    67e2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    67e6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    67ea:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    67ee:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    67f2:	f7ff f887 	bl	5904 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    67f6:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    67f8:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    67fc:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    6800:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6804:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6808:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    680c:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    6810:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6814:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6818:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    681c:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    6820:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6824:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    6828:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    682a:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    682e:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    6832:	4a10      	ldr	r2, [pc, #64]	; (6874 <SdioCard::begin(SdioConfig)+0x588>)
    6834:	7013      	strb	r3, [r2, #0]
  return true;
    6836:	e600      	b.n	643a <SdioCard::begin(SdioConfig)+0x14e>
    kHzSdClk = 50000;
    6838:	f24c 3050 	movw	r0, #50000	; 0xc350
    683c:	e7cb      	b.n	67d6 <SdioCard::begin(SdioConfig)+0x4ea>
    683e:	bf00      	nop
    6840:	061a0000 	.word	0x061a0000
    6844:	2001e068 	.word	0x2001e068
    6848:	00010008 	.word	0x00010008
    684c:	117f0002 	.word	0x117f0002
    6850:	371a0000 	.word	0x371a0000
    6854:	2001d748 	.word	0x2001d748
    6858:	333a0011 	.word	0x333a0011
    685c:	000f4240 	.word	0x000f4240
    6860:	2001d984 	.word	0x2001d984
    6864:	00010040 	.word	0x00010040
    6868:	0d3a0011 	.word	0x0d3a0011
    686c:	80fffff1 	.word	0x80fffff1
    6870:	401f8000 	.word	0x401f8000
    6874:	2001ec92 	.word	0x2001ec92
    6878:	0d1a0000 	.word	0x0d1a0000
    687c:	2001ec96 	.word	0x2001ec96
    6880:	2001d97c 	.word	0x2001d97c
    6884:	402c0000 	.word	0x402c0000

00006888 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    6888:	4b37      	ldr	r3, [pc, #220]	; (6968 <SdioCard::readData(unsigned char*)+0xe0>)
    688a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    688c:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    688e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6892:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    6894:	d40d      	bmi.n	68b2 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6898:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    689c:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    689e:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    68a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    68a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    68a6:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    68a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    68aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    68ae:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    68b0:	b662      	cpsie	i
  uint32_t m = micros();
    68b2:	f001 fb0f 	bl	7ed4 <micros>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    68b6:	4e2c      	ldr	r6, [pc, #176]	; (6968 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    68b8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 6980 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    68bc:	4605      	mov	r5, r0
  while (fcn()) {
    68be:	e004      	b.n	68ca <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    68c0:	f001 fb08 	bl	7ed4 <micros>
    68c4:	1b43      	subs	r3, r0, r5
    68c6:	4543      	cmp	r3, r8
    68c8:	d837      	bhi.n	693a <SdioCard::readData(unsigned char*)+0xb2>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    68ca:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    68cc:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    68d0:	d0f6      	beq.n	68c0 <SdioCard::readData(unsigned char*)+0x38>
    68d2:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    68d6:	4824      	ldr	r0, [pc, #144]	; (6968 <SdioCard::readData(unsigned char*)+0xe0>)
    68d8:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    68dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    68de:	051b      	lsls	r3, r3, #20
    68e0:	d5fc      	bpl.n	68dc <SdioCard::readData(unsigned char*)+0x54>
    68e2:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    68e6:	6a02      	ldr	r2, [r0, #32]
    68e8:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    68ec:	459c      	cmp	ip, r3
    68ee:	d1fa      	bne.n	68e6 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    68f0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    68f4:	4567      	cmp	r7, ip
    68f6:	d1f1      	bne.n	68dc <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    68f8:	f001 faec 	bl	7ed4 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    68fc:	4f1a      	ldr	r7, [pc, #104]	; (6968 <SdioCard::readData(unsigned char*)+0xe0>)
    68fe:	4d1b      	ldr	r5, [pc, #108]	; (696c <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    6900:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6902:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6980 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    6906:	e004      	b.n	6912 <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6908:	f001 fae4 	bl	7ed4 <micros>
    690c:	1b83      	subs	r3, r0, r6
    690e:	4543      	cmp	r3, r8
    6910:	d81d      	bhi.n	694e <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    6912:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    6914:	402c      	ands	r4, r5
    6916:	d0f7      	beq.n	6908 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    6918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    691a:	4a15      	ldr	r2, [pc, #84]	; (6970 <SdioCard::readData(unsigned char*)+0xe8>)
    691c:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    691e:	6813      	ldr	r3, [r2, #0]
    6920:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6922:	6813      	ldr	r3, [r2, #0]
    6924:	f013 0302 	ands.w	r3, r3, #2
    6928:	d01b      	beq.n	6962 <SdioCard::readData(unsigned char*)+0xda>
    692a:	6812      	ldr	r2, [r2, #0]
    692c:	4b11      	ldr	r3, [pc, #68]	; (6974 <SdioCard::readData(unsigned char*)+0xec>)
    692e:	421a      	tst	r2, r3
    6930:	bf0c      	ite	eq
    6932:	2001      	moveq	r0, #1
    6934:	2000      	movne	r0, #0
}
    6936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    693a:	490f      	ldr	r1, [pc, #60]	; (6978 <SdioCard::readData(unsigned char*)+0xf0>)
    693c:	251b      	movs	r5, #27
  m_errorLine = line;
    693e:	4b0f      	ldr	r3, [pc, #60]	; (697c <SdioCard::readData(unsigned char*)+0xf4>)
    6940:	f240 3279 	movw	r2, #889	; 0x379
    return sdError(SD_CARD_ERROR_READ_FIFO);
    6944:	4620      	mov	r0, r4
  m_errorCode = code;
    6946:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6948:	601a      	str	r2, [r3, #0]
}
    694a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    694e:	490a      	ldr	r1, [pc, #40]	; (6978 <SdioCard::readData(unsigned char*)+0xf0>)
    6950:	251e      	movs	r5, #30
  m_errorLine = line;
    6952:	4b0a      	ldr	r3, [pc, #40]	; (697c <SdioCard::readData(unsigned char*)+0xf4>)
    6954:	f44f 7261 	mov.w	r2, #900	; 0x384
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    6958:	4620      	mov	r0, r4
  m_errorCode = code;
    695a:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    695c:	601a      	str	r2, [r3, #0]
}
    695e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6962:	4618      	mov	r0, r3
}
    6964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6968:	402c0000 	.word	0x402c0000
    696c:	117f0002 	.word	0x117f0002
    6970:	2001e068 	.word	0x2001e068
    6974:	117f0000 	.word	0x117f0000
    6978:	20008bf6 	.word	0x20008bf6
    697c:	2001d748 	.word	0x2001d748
    6980:	000f4240 	.word	0x000f4240

00006984 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    6984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    6988:	4b29      	ldr	r3, [pc, #164]	; (6a30 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    698a:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    698c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6a50 <SdioCard::readStart(unsigned long)+0xcc>
    6990:	4e28      	ldr	r6, [pc, #160]	; (6a34 <SdioCard::readStart(unsigned long)+0xb0>)
    6992:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    6996:	f001 fa9d 	bl	7ed4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    699a:	4d27      	ldr	r5, [pc, #156]	; (6a38 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    699c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    699e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6a54 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    69a2:	4f26      	ldr	r7, [pc, #152]	; (6a3c <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    69a4:	e006      	b.n	69b4 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    69a6:	f001 fa95 	bl	7ed4 <micros>
    69aa:	1b00      	subs	r0, r0, r4
    69ac:	42b8      	cmp	r0, r7
    69ae:	d829      	bhi.n	6a04 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    69b0:	f002 fd9a 	bl	94e8 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    69b4:	6831      	ldr	r1, [r6, #0]
    69b6:	4628      	mov	r0, r5
    69b8:	f7ff f980 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    69bc:	2800      	cmp	r0, #0
    69be:	d0f2      	beq.n	69a6 <SdioCard::readStart(unsigned long)+0x22>
    69c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    69c4:	05db      	lsls	r3, r3, #23
    69c6:	d5ee      	bpl.n	69a6 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    69c8:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    69ca:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    69ce:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    69d2:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    69d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    69da:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    69de:	4b18      	ldr	r3, [pc, #96]	; (6a40 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    69e0:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    69e4:	781b      	ldrb	r3, [r3, #0]
    69e6:	b1cb      	cbz	r3, 6a1c <SdioCard::readStart(unsigned long)+0x98>
    69e8:	4649      	mov	r1, r9
    69ea:	4816      	ldr	r0, [pc, #88]	; (6a44 <SdioCard::readStart(unsigned long)+0xc0>)
    69ec:	f7ff f966 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    69f0:	b930      	cbnz	r0, 6a00 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    69f2:	4915      	ldr	r1, [pc, #84]	; (6a48 <SdioCard::readStart(unsigned long)+0xc4>)
    69f4:	240c      	movs	r4, #12
  m_errorLine = line;
    69f6:	4b15      	ldr	r3, [pc, #84]	; (6a4c <SdioCard::readStart(unsigned long)+0xc8>)
    69f8:	f240 32ea 	movw	r2, #1002	; 0x3ea
  m_errorCode = code;
    69fc:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    69fe:	601a      	str	r2, [r3, #0]
}
    6a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    6a04:	4a10      	ldr	r2, [pc, #64]	; (6a48 <SdioCard::readStart(unsigned long)+0xc4>)
    6a06:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6a08:	2000      	movs	r0, #0
  m_errorLine = line;
    6a0a:	4b10      	ldr	r3, [pc, #64]	; (6a4c <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    6a0c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6a0e:	f240 32de 	movw	r2, #990	; 0x3de
      m_busyFcn = 0;
    6a12:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    6a16:	601a      	str	r2, [r3, #0]
}
    6a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6a1c:	ea4f 2949 	mov.w	r9, r9, lsl #9
    6a20:	4808      	ldr	r0, [pc, #32]	; (6a44 <SdioCard::readStart(unsigned long)+0xc0>)
    6a22:	4649      	mov	r1, r9
    6a24:	f7ff f94a 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6a28:	2800      	cmp	r0, #0
    6a2a:	d1e9      	bne.n	6a00 <SdioCard::readStart(unsigned long)+0x7c>
    6a2c:	e7e1      	b.n	69f2 <SdioCard::readStart(unsigned long)+0x6e>
    6a2e:	bf00      	nop
    6a30:	00005e51 	.word	0x00005e51
    6a34:	2001d978 	.word	0x2001d978
    6a38:	0d1a0000 	.word	0x0d1a0000
    6a3c:	000f4240 	.word	0x000f4240
    6a40:	2001ec94 	.word	0x2001ec94
    6a44:	123a0030 	.word	0x123a0030
    6a48:	20008bf6 	.word	0x20008bf6
    6a4c:	2001d748 	.word	0x2001d748
    6a50:	2001e064 	.word	0x2001e064
    6a54:	402c0000 	.word	0x402c0000

00006a58 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    6a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    6a5c:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6a5e:	4c1d      	ldr	r4, [pc, #116]	; (6ad4 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    6a60:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    6a62:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6a64:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6a68:	481b      	ldr	r0, [pc, #108]	; (6ad8 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6a6e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6a70:	f7ff f924 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6a74:	b940      	cbnz	r0, 6a88 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    6a76:	4919      	ldr	r1, [pc, #100]	; (6adc <SdioCard::stopTransmission(bool)+0x84>)
    6a78:	2409      	movs	r4, #9
  m_errorLine = line;
    6a7a:	4b19      	ldr	r3, [pc, #100]	; (6ae0 <SdioCard::stopTransmission(bool)+0x88>)
    6a7c:	f240 32fa 	movw	r2, #1018	; 0x3fa
  m_errorCode = code;
    6a80:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6a82:	601a      	str	r2, [r3, #0]
}
    6a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    6a88:	2d00      	cmp	r5, #0
    6a8a:	d0fb      	beq.n	6a84 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    6a8c:	4b15      	ldr	r3, [pc, #84]	; (6ae4 <SdioCard::stopTransmission(bool)+0x8c>)
    6a8e:	4e16      	ldr	r6, [pc, #88]	; (6ae8 <SdioCard::stopTransmission(bool)+0x90>)
    6a90:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    6a92:	f001 fa1f 	bl	7ed4 <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    6a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    6a98:	4607      	mov	r7, r0
  while (fcn()) {
    6a9a:	01da      	lsls	r2, r3, #7
    6a9c:	d416      	bmi.n	6acc <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6a9e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6aec <SdioCard::stopTransmission(bool)+0x94>
    6aa2:	e004      	b.n	6aae <SdioCard::stopTransmission(bool)+0x56>
    yield();
    6aa4:	f002 fd20 	bl	94e8 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    6aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    6aaa:	01db      	lsls	r3, r3, #7
    6aac:	d40e      	bmi.n	6acc <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6aae:	f001 fa11 	bl	7ed4 <micros>
    6ab2:	1bc0      	subs	r0, r0, r7
    6ab4:	4540      	cmp	r0, r8
    6ab6:	d9f5      	bls.n	6aa4 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    6ab8:	4a08      	ldr	r2, [pc, #32]	; (6adc <SdioCard::stopTransmission(bool)+0x84>)
    6aba:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6abc:	2000      	movs	r0, #0
  m_errorLine = line;
    6abe:	4b08      	ldr	r3, [pc, #32]	; (6ae0 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    6ac0:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6ac2:	f240 32fe 	movw	r2, #1022	; 0x3fe
      m_busyFcn = 0;
    6ac6:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    6ac8:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    6aca:	e7db      	b.n	6a84 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    6acc:	2300      	movs	r3, #0
  return true;
    6ace:	4628      	mov	r0, r5
  m_busyFcn = 0;
    6ad0:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    6ad2:	e7d7      	b.n	6a84 <SdioCard::stopTransmission(bool)+0x2c>
    6ad4:	402c0000 	.word	0x402c0000
    6ad8:	0cdb0000 	.word	0x0cdb0000
    6adc:	20008bf6 	.word	0x20008bf6
    6ae0:	2001d748 	.word	0x2001d748
    6ae4:	000058e5 	.word	0x000058e5
    6ae8:	2001e064 	.word	0x2001e064
    6aec:	000f4240 	.word	0x000f4240

00006af0 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    6af0:	4b0a      	ldr	r3, [pc, #40]	; (6b1c <SdioCard::syncDevice()+0x2c>)
    6af2:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    6af4:	b510      	push	{r4, lr}
    6af6:	4604      	mov	r4, r0
  if (!m_transferActive) {
    6af8:	b91b      	cbnz	r3, 6b02 <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    6afa:	7a63      	ldrb	r3, [r4, #9]
    6afc:	b943      	cbnz	r3, 6b10 <SdioCard::syncDevice()+0x20>
  return true;
    6afe:	2001      	movs	r0, #1
}
    6b00:	bd10      	pop	{r4, pc}
    6b02:	f7ff f83d 	bl	5b80 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6b06:	2800      	cmp	r0, #0
    6b08:	d0fa      	beq.n	6b00 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    6b0a:	7a63      	ldrb	r3, [r4, #9]
    6b0c:	2b00      	cmp	r3, #0
    6b0e:	d0f6      	beq.n	6afe <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    6b10:	4620      	mov	r0, r4
    6b12:	2101      	movs	r1, #1
}
    6b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    6b18:	f7ff bf9e 	b.w	6a58 <SdioCard::stopTransmission(bool)>
    6b1c:	2001ec95 	.word	0x2001ec95

00006b20 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6b24:	7a43      	ldrb	r3, [r0, #9]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6b26:	460d      	mov	r5, r1
    6b28:	4616      	mov	r6, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6b2a:	b1bb      	cbz	r3, 6b5c <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    6b2c:	6803      	ldr	r3, [r0, #0]
    6b2e:	4604      	mov	r4, r0
    6b30:	4a3f      	ldr	r2, [pc, #252]	; (6c30 <SdioCard::erase(unsigned long, unsigned long)+0x110>)
    6b32:	69db      	ldr	r3, [r3, #28]
    6b34:	4293      	cmp	r3, r2
    6b36:	d14a      	bne.n	6bce <SdioCard::erase(unsigned long, unsigned long)+0xae>
  if (!m_transferActive) {
    6b38:	4b3e      	ldr	r3, [pc, #248]	; (6c34 <SdioCard::erase(unsigned long, unsigned long)+0x114>)
    6b3a:	781b      	ldrb	r3, [r3, #0]
    6b3c:	b93b      	cbnz	r3, 6b4e <SdioCard::erase(unsigned long, unsigned long)+0x2e>
    return stopTransmission(true);
    6b3e:	2101      	movs	r1, #1
    6b40:	4620      	mov	r0, r4
    6b42:	f7ff ff89 	bl	6a58 <SdioCard::stopTransmission(bool)>
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6b46:	b948      	cbnz	r0, 6b5c <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return false;
    6b48:	2000      	movs	r0, #0
}
    6b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b4e:	f7ff f817 	bl	5b80 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6b52:	2800      	cmp	r0, #0
    6b54:	d0f8      	beq.n	6b48 <SdioCard::erase(unsigned long, unsigned long)+0x28>
  if (m_curState != IDLE_STATE) {
    6b56:	7a63      	ldrb	r3, [r4, #9]
    6b58:	2b00      	cmp	r3, #0
    6b5a:	d1f0      	bne.n	6b3e <SdioCard::erase(unsigned long, unsigned long)+0x1e>
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    6b5c:	4c36      	ldr	r4, [pc, #216]	; (6c38 <SdioCard::erase(unsigned long, unsigned long)+0x118>)
    6b5e:	7aa3      	ldrb	r3, [r4, #10]
  if (!m_csd.eraseSingleBlock()) {
    6b60:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    6b64:	d112      	bne.n	6b8c <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    6b66:	005b      	lsls	r3, r3, #1
    6b68:	7ae2      	ldrb	r2, [r4, #11]
    6b6a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    6b6e:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    6b72:	1c72      	adds	r2, r6, #1
    6b74:	432a      	orrs	r2, r5
    6b76:	4213      	tst	r3, r2
    6b78:	d008      	beq.n	6b8c <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  m_errorCode = code;
    6b7a:	4930      	ldr	r1, [pc, #192]	; (6c3c <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6b7c:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    6b7e:	4b30      	ldr	r3, [pc, #192]	; (6c40 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6b80:	f240 322d 	movw	r2, #813	; 0x32d
  m_errorCode = code;
    6b84:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6b86:	601a      	str	r2, [r3, #0]
}
    6b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    6b8c:	4b2d      	ldr	r3, [pc, #180]	; (6c44 <SdioCard::erase(unsigned long, unsigned long)+0x124>)
    6b8e:	781b      	ldrb	r3, [r3, #0]
    6b90:	b90b      	cbnz	r3, 6b96 <SdioCard::erase(unsigned long, unsigned long)+0x76>
    firstSector <<= 9;
    6b92:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    6b94:	0276      	lsls	r6, r6, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    6b96:	4629      	mov	r1, r5
    6b98:	482b      	ldr	r0, [pc, #172]	; (6c48 <SdioCard::erase(unsigned long, unsigned long)+0x128>)
    6b9a:	f7ff f88f 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6b9e:	b940      	cbnz	r0, 6bb2 <SdioCard::erase(unsigned long, unsigned long)+0x92>
  m_errorCode = code;
    6ba0:	4926      	ldr	r1, [pc, #152]	; (6c3c <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6ba2:	240f      	movs	r4, #15
  m_errorLine = line;
    6ba4:	4b26      	ldr	r3, [pc, #152]	; (6c40 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6ba6:	f240 3235 	movw	r2, #821	; 0x335
  m_errorCode = code;
    6baa:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6bac:	601a      	str	r2, [r3, #0]
}
    6bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    6bb2:	4631      	mov	r1, r6
    6bb4:	4825      	ldr	r0, [pc, #148]	; (6c4c <SdioCard::erase(unsigned long, unsigned long)+0x12c>)
    6bb6:	f7ff f881 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6bba:	b960      	cbnz	r0, 6bd6 <SdioCard::erase(unsigned long, unsigned long)+0xb6>
  m_errorCode = code;
    6bbc:	491f      	ldr	r1, [pc, #124]	; (6c3c <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6bbe:	2410      	movs	r4, #16
  m_errorLine = line;
    6bc0:	4b1f      	ldr	r3, [pc, #124]	; (6c40 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6bc2:	f44f 724e 	mov.w	r2, #824	; 0x338
  m_errorCode = code;
    6bc6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6bc8:	601a      	str	r2, [r3, #0]
}
    6bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6bce:	4798      	blx	r3
    6bd0:	2800      	cmp	r0, #0
    6bd2:	d0b9      	beq.n	6b48 <SdioCard::erase(unsigned long, unsigned long)+0x28>
    6bd4:	e7c2      	b.n	6b5c <SdioCard::erase(unsigned long, unsigned long)+0x3c>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    6bd6:	2100      	movs	r1, #0
    6bd8:	481d      	ldr	r0, [pc, #116]	; (6c50 <SdioCard::erase(unsigned long, unsigned long)+0x130>)
    6bda:	f7ff f86f 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6bde:	b938      	cbnz	r0, 6bf0 <SdioCard::erase(unsigned long, unsigned long)+0xd0>
  m_errorCode = code;
    6be0:	4916      	ldr	r1, [pc, #88]	; (6c3c <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6be2:	2411      	movs	r4, #17
  m_errorLine = line;
    6be4:	4b16      	ldr	r3, [pc, #88]	; (6c40 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6be6:	f240 323b 	movw	r2, #827	; 0x33b
  m_errorCode = code;
    6bea:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6bec:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    6bee:	e7cb      	b.n	6b88 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  uint32_t m = micros();
    6bf0:	f001 f970 	bl	7ed4 <micros>
    6bf4:	4e17      	ldr	r6, [pc, #92]	; (6c54 <SdioCard::erase(unsigned long, unsigned long)+0x134>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6bf6:	4d18      	ldr	r5, [pc, #96]	; (6c58 <SdioCard::erase(unsigned long, unsigned long)+0x138>)
  uint32_t m = micros();
    6bf8:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6bfa:	f8df 8064 	ldr.w	r8, [pc, #100]	; 6c60 <SdioCard::erase(unsigned long, unsigned long)+0x140>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6bfe:	4f17      	ldr	r7, [pc, #92]	; (6c5c <SdioCard::erase(unsigned long, unsigned long)+0x13c>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6c00:	6831      	ldr	r1, [r6, #0]
    6c02:	4628      	mov	r0, r5
    6c04:	f7ff f85a 	bl	5cbc <cardCommand(unsigned long, unsigned long)>
    6c08:	b118      	cbz	r0, 6c12 <SdioCard::erase(unsigned long, unsigned long)+0xf2>
    6c0a:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6c0e:	05db      	lsls	r3, r3, #23
    6c10:	d4ba      	bmi.n	6b88 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6c12:	f001 f95f 	bl	7ed4 <micros>
    6c16:	1b00      	subs	r0, r0, r4
    6c18:	42b8      	cmp	r0, r7
    6c1a:	d9f1      	bls.n	6c00 <SdioCard::erase(unsigned long, unsigned long)+0xe0>
  m_errorCode = code;
    6c1c:	4907      	ldr	r1, [pc, #28]	; (6c3c <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6c1e:	2429      	movs	r4, #41	; 0x29
  m_errorLine = line;
    6c20:	4b07      	ldr	r3, [pc, #28]	; (6c40 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6c22:	f240 323e 	movw	r2, #830	; 0x33e
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    6c26:	2000      	movs	r0, #0
  m_errorCode = code;
    6c28:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6c2a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    6c2c:	e7ac      	b.n	6b88 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    6c2e:	bf00      	nop
    6c30:	00006af1 	.word	0x00006af1
    6c34:	2001ec95 	.word	0x2001ec95
    6c38:	2001d964 	.word	0x2001d964
    6c3c:	20008bf6 	.word	0x20008bf6
    6c40:	2001d748 	.word	0x2001d748
    6c44:	2001ec94 	.word	0x2001ec94
    6c48:	201a0000 	.word	0x201a0000
    6c4c:	211a0000 	.word	0x211a0000
    6c50:	261b0000 	.word	0x261b0000
    6c54:	2001d978 	.word	0x2001d978
    6c58:	0d1a0000 	.word	0x0d1a0000
    6c5c:	000f4240 	.word	0x000f4240
    6c60:	402c0000 	.word	0x402c0000

00006c64 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c68:	4604      	mov	r4, r0
    6c6a:	7a00      	ldrb	r0, [r0, #8]
    6c6c:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6c70:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    6c72:	f010 0501 	ands.w	r5, r0, #1
    6c76:	d013      	beq.n	6ca0 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    6c78:	0793      	lsls	r3, r2, #30
    6c7a:	d03c      	beq.n	6cf6 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6c7c:	2301      	movs	r3, #1
    6c7e:	4838      	ldr	r0, [pc, #224]	; (6d60 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6c80:	466a      	mov	r2, sp
    6c82:	f7ff fa25 	bl	60d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6c86:	2800      	cmp	r0, #0
    6c88:	d03a      	beq.n	6d00 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    6c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
    6c8e:	4669      	mov	r1, sp
    6c90:	4630      	mov	r0, r6
    6c92:	f001 f9b3 	bl	7ffc <memcpy>
}
    6c96:	4628      	mov	r0, r5
    6c98:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6ca0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6d70 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    6ca4:	460f      	mov	r7, r1
    6ca6:	f898 3000 	ldrb.w	r3, [r8]
    6caa:	2b00      	cmp	r3, #0
    6cac:	d135      	bne.n	6d1a <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6cae:	7a63      	ldrb	r3, [r4, #9]
    6cb0:	2b01      	cmp	r3, #1
    6cb2:	d039      	beq.n	6d28 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    6cb4:	6822      	ldr	r2, [r4, #0]
    6cb6:	492b      	ldr	r1, [pc, #172]	; (6d64 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    6cb8:	69d2      	ldr	r2, [r2, #28]
    6cba:	428a      	cmp	r2, r1
    6cbc:	d14a      	bne.n	6d54 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    6cbe:	f898 2000 	ldrb.w	r2, [r8]
    6cc2:	2a00      	cmp	r2, #0
    6cc4:	d134      	bne.n	6d30 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    6cc6:	2b00      	cmp	r3, #0
    6cc8:	d139      	bne.n	6d3e <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    6cca:	4639      	mov	r1, r7
    6ccc:	4620      	mov	r0, r4
    6cce:	f7ff fe59 	bl	6984 <SdioCard::readStart(unsigned long)>
    6cd2:	b1e8      	cbz	r0, 6d10 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    6cd4:	2301      	movs	r3, #1
      m_curSector = sector;
    6cd6:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    6cd8:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    6cda:	4631      	mov	r1, r6
    6cdc:	4620      	mov	r0, r4
    6cde:	f7ff fdd3 	bl	6888 <SdioCard::readData(unsigned char*)>
    6ce2:	b1a8      	cbz	r0, 6d10 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    6ce4:	6863      	ldr	r3, [r4, #4]
  return true;
    6ce6:	4605      	mov	r5, r0
    m_curSector++;
    6ce8:	3301      	adds	r3, #1
}
    6cea:	4628      	mov	r0, r5
    m_curSector++;
    6cec:	6063      	str	r3, [r4, #4]
}
    6cee:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6cf6:	2301      	movs	r3, #1
    6cf8:	4819      	ldr	r0, [pc, #100]	; (6d60 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6cfa:	f7ff f9e9 	bl	60d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6cfe:	b938      	cbnz	r0, 6d10 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    6d00:	4919      	ldr	r1, [pc, #100]	; (6d68 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    6d02:	200b      	movs	r0, #11
  m_errorLine = line;
    6d04:	4b19      	ldr	r3, [pc, #100]	; (6d6c <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    6d06:	f240 32a1 	movw	r2, #929	; 0x3a1
      return sdError(SD_CARD_ERROR_CMD17);
    6d0a:	2500      	movs	r5, #0
  m_errorCode = code;
    6d0c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6d0e:	601a      	str	r2, [r3, #0]
}
    6d10:	4628      	mov	r0, r5
    6d12:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d1a:	f7fe ff31 	bl	5b80 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6d1e:	2800      	cmp	r0, #0
    6d20:	d0f6      	beq.n	6d10 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6d22:	7a63      	ldrb	r3, [r4, #9]
    6d24:	2b01      	cmp	r3, #1
    6d26:	d1c5      	bne.n	6cb4 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6d28:	6862      	ldr	r2, [r4, #4]
    6d2a:	42ba      	cmp	r2, r7
    6d2c:	d1c2      	bne.n	6cb4 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6d2e:	e7d4      	b.n	6cda <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    6d30:	f7fe ff26 	bl	5b80 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6d34:	2800      	cmp	r0, #0
    6d36:	d0eb      	beq.n	6d10 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    6d38:	7a63      	ldrb	r3, [r4, #9]
    6d3a:	2b00      	cmp	r3, #0
    6d3c:	d0c5      	beq.n	6cca <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    6d3e:	2101      	movs	r1, #1
    6d40:	4620      	mov	r0, r4
    6d42:	f7ff fe89 	bl	6a58 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6d46:	2800      	cmp	r0, #0
    6d48:	d1bf      	bne.n	6cca <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    6d4a:	4628      	mov	r0, r5
    6d4c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    6d54:	4620      	mov	r0, r4
    6d56:	4790      	blx	r2
    6d58:	2800      	cmp	r0, #0
    6d5a:	d0f6      	beq.n	6d4a <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    6d5c:	e7b5      	b.n	6cca <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    6d5e:	bf00      	nop
    6d60:	113a0011 	.word	0x113a0011
    6d64:	00006af1 	.word	0x00006af1
    6d68:	20008bf6 	.word	0x20008bf6
    6d6c:	2001d748 	.word	0x2001d748
    6d70:	2001ec95 	.word	0x2001ec95

00006d74 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    6d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d78:	7a04      	ldrb	r4, [r0, #8]
    6d7a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6d7e:	460f      	mov	r7, r1
    6d80:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    6d82:	f014 0401 	ands.w	r4, r4, #1
    6d86:	d01d      	beq.n	6dc4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    6d88:	f012 0f03 	tst.w	r2, #3
    6d8c:	d006      	beq.n	6d9c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    6d8e:	4668      	mov	r0, sp
    6d90:	4611      	mov	r1, r2
    6d92:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    6d96:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    6d98:	f001 f930 	bl	7ffc <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    6d9c:	2301      	movs	r3, #1
    6d9e:	4642      	mov	r2, r8
    6da0:	4639      	mov	r1, r7
    6da2:	482c      	ldr	r0, [pc, #176]	; (6e54 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    6da4:	f7ff f994 	bl	60d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6da8:	4604      	mov	r4, r0
    6daa:	b930      	cbnz	r0, 6dba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    6dac:	492a      	ldr	r1, [pc, #168]	; (6e58 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    6dae:	200d      	movs	r0, #13
  m_errorLine = line;
    6db0:	4b2a      	ldr	r3, [pc, #168]	; (6e5c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    6db2:	f44f 6287 	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    6db6:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6db8:	601a      	str	r2, [r3, #0]
}
    6dba:	4620      	mov	r0, r4
    6dbc:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6dc4:	4d26      	ldr	r5, [pc, #152]	; (6e60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    6dc6:	4606      	mov	r6, r0
    6dc8:	782b      	ldrb	r3, [r5, #0]
    6dca:	bb2b      	cbnz	r3, 6e18 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6dcc:	7a73      	ldrb	r3, [r6, #9]
    6dce:	2b02      	cmp	r3, #2
    6dd0:	d029      	beq.n	6e26 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    6dd2:	6832      	ldr	r2, [r6, #0]
    6dd4:	4923      	ldr	r1, [pc, #140]	; (6e64 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    6dd6:	69d2      	ldr	r2, [r2, #28]
    6dd8:	428a      	cmp	r2, r1
    6dda:	d136      	bne.n	6e4a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    6ddc:	782a      	ldrb	r2, [r5, #0]
    6dde:	bb32      	cbnz	r2, 6e2e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    6de0:	2b00      	cmp	r3, #0
    6de2:	d12b      	bne.n	6e3c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector)) {
    6de4:	6833      	ldr	r3, [r6, #0]
    6de6:	4639      	mov	r1, r7
    6de8:	4630      	mov	r0, r6
    6dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    6dec:	4798      	blx	r3
    6dee:	2800      	cmp	r0, #0
    6df0:	d0e3      	beq.n	6dba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    6df2:	2302      	movs	r3, #2
      m_curSector = sector;
    6df4:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    6df6:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    6df8:	6833      	ldr	r3, [r6, #0]
    6dfa:	4641      	mov	r1, r8
    6dfc:	4630      	mov	r0, r6
    6dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6e00:	4798      	blx	r3
    6e02:	2800      	cmp	r0, #0
    6e04:	d0d9      	beq.n	6dba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    6e06:	6873      	ldr	r3, [r6, #4]
  return true;
    6e08:	4604      	mov	r4, r0
    m_curSector++;
    6e0a:	3301      	adds	r3, #1
}
    6e0c:	4620      	mov	r0, r4
    m_curSector++;
    6e0e:	6073      	str	r3, [r6, #4]
}
    6e10:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e18:	f7fe feb2 	bl	5b80 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6e1c:	2800      	cmp	r0, #0
    6e1e:	d0cc      	beq.n	6dba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6e20:	7a73      	ldrb	r3, [r6, #9]
    6e22:	2b02      	cmp	r3, #2
    6e24:	d1d5      	bne.n	6dd2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6e26:	6872      	ldr	r2, [r6, #4]
    6e28:	42ba      	cmp	r2, r7
    6e2a:	d1d2      	bne.n	6dd2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6e2c:	e7e4      	b.n	6df8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    6e2e:	f7fe fea7 	bl	5b80 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6e32:	2800      	cmp	r0, #0
    6e34:	d0c1      	beq.n	6dba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    6e36:	7a73      	ldrb	r3, [r6, #9]
    6e38:	2b00      	cmp	r3, #0
    6e3a:	d0d3      	beq.n	6de4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    6e3c:	2101      	movs	r1, #1
    6e3e:	4630      	mov	r0, r6
    6e40:	f7ff fe0a 	bl	6a58 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6e44:	2800      	cmp	r0, #0
    6e46:	d0b8      	beq.n	6dba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6e48:	e7cc      	b.n	6de4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6e4a:	4630      	mov	r0, r6
    6e4c:	4790      	blx	r2
    6e4e:	2800      	cmp	r0, #0
    6e50:	d0b3      	beq.n	6dba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6e52:	e7c7      	b.n	6de4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6e54:	183a0001 	.word	0x183a0001
    6e58:	20008bf6 	.word	0x20008bf6
    6e5c:	2001d748 	.word	0x2001d748
    6e60:	2001ec95 	.word	0x2001ec95
    6e64:	00006af1 	.word	0x00006af1

00006e68 <sdCsWrite(unsigned char, bool)>:
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    6e68:	f001 b85e 	b.w	7f28 <digitalWrite>

00006e6c <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    6e6c:	b430      	push	{r4, r5}
    6e6e:	b082      	sub	sp, #8
    6e70:	460c      	mov	r4, r1
    6e72:	ab02      	add	r3, sp, #8
    6e74:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    6e78:	7cc3      	ldrb	r3, [r0, #19]
    6e7a:	2b00      	cmp	r3, #0
    6e7c:	d030      	beq.n	6ee0 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    6e7e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6e80:	7cc3      	ldrb	r3, [r0, #19]
    6e82:	07da      	lsls	r2, r3, #31
    6e84:	d508      	bpl.n	6e98 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    6e86:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6e8a:	6945      	ldr	r5, [r0, #20]
    6e8c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    6e90:	402a      	ands	r2, r5
    6e92:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    6e94:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    6e98:	079d      	lsls	r5, r3, #30
    6e9a:	d508      	bpl.n	6eae <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6e9c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6ea0:	6985      	ldr	r5, [r0, #24]
    6ea2:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    6ea6:	402a      	ands	r2, r5
    6ea8:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    6eaa:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    6eae:	0759      	lsls	r1, r3, #29
    6eb0:	d508      	bpl.n	6ec4 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    6eb2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6eb6:	69c5      	ldr	r5, [r0, #28]
    6eb8:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    6ebc:	402a      	ands	r2, r5
    6ebe:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    6ec0:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    6ec4:	071a      	lsls	r2, r3, #28
    6ec6:	d508      	bpl.n	6eda <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    6ec8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6ecc:	6a05      	ldr	r5, [r0, #32]
    6ece:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    6ed2:	402a      	ands	r2, r5
    6ed4:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    6ed6:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    6eda:	06db      	lsls	r3, r3, #27
    6edc:	d42f      	bmi.n	6f3e <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    6ede:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    6ee0:	6883      	ldr	r3, [r0, #8]
    6ee2:	429c      	cmp	r4, r3
    6ee4:	d035      	beq.n	6f52 <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    6ee6:	4b22      	ldr	r3, [pc, #136]	; (6f70 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    6ee8:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    6eea:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    6eec:	4a21      	ldr	r2, [pc, #132]	; (6f74 <SPIClass::beginTransaction(SPISettings)+0x108>)
    6eee:	f3c3 1101 	ubfx	r1, r3, #4, #2
    6ef2:	f3c3 6382 	ubfx	r3, r3, #26, #3
    6ef6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    6efa:	3301      	adds	r3, #1
    6efc:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    6f00:	b1cc      	cbz	r4, 6f36 <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    6f02:	4294      	cmp	r4, r2
    6f04:	d827      	bhi.n	6f56 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    6f06:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    6f0a:	fbb2 f2f3 	udiv	r2, r2, r3
    6f0e:	4294      	cmp	r4, r2
    6f10:	d32c      	bcc.n	6f6c <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    6f12:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    6f16:	d320      	bcc.n	6f5a <SPIClass::beginTransaction(SPISettings)+0xee>
    6f18:	4c17      	ldr	r4, [pc, #92]	; (6f78 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6f1a:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6f1c:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6f1e:	2203      	movs	r2, #3
		port().CR = 0;
    6f20:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    6f22:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    6f24:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6f26:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    6f28:	2201      	movs	r2, #1
		port().CCR = _ccr;
    6f2a:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    6f2c:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    6f2e:	611a      	str	r2, [r3, #16]
	}
    6f30:	b002      	add	sp, #8
    6f32:	bc30      	pop	{r4, r5}
    6f34:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    6f36:	4299      	cmp	r1, r3
    6f38:	d3ef      	bcc.n	6f1a <SPIClass::beginTransaction(SPISettings)+0xae>
    6f3a:	1c53      	adds	r3, r2, #1
    6f3c:	e7e9      	b.n	6f12 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    6f3e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    6f42:	6a41      	ldr	r1, [r0, #36]	; 0x24
    6f44:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    6f48:	400b      	ands	r3, r1
    6f4a:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    6f4c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    6f50:	e7c5      	b.n	6ede <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    6f52:	68c4      	ldr	r4, [r0, #12]
    6f54:	e7e2      	b.n	6f1c <SPIClass::beginTransaction(SPISettings)+0xb0>
    6f56:	2400      	movs	r4, #0
    6f58:	e7df      	b.n	6f1a <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    6f5a:	2b02      	cmp	r3, #2
    6f5c:	d9fb      	bls.n	6f56 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    6f5e:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6f60:	085a      	lsrs	r2, r3, #1
    6f62:	0214      	lsls	r4, r2, #8
    6f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    6f68:	431c      	orrs	r4, r3
    6f6a:	e7d6      	b.n	6f1a <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    6f6c:	461a      	mov	r2, r3
    6f6e:	e7e4      	b.n	6f3a <SPIClass::beginTransaction(SPISettings)+0xce>
    6f70:	400fc000 	.word	0x400fc000
    6f74:	20000878 	.word	0x20000878
    6f78:	007f7fff 	.word	0x007f7fff

00006f7c <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    6f7c:	b508      	push	{r3, lr}
    6f7e:	4603      	mov	r3, r0
    6f80:	f853 0b04 	ldr.w	r0, [r3], #4
    6f84:	e893 0006 	ldmia.w	r3, {r1, r2}
    6f88:	f7ff ff70 	bl	6e6c <SPIClass::beginTransaction(SPISettings)>
    6f8c:	bd08      	pop	{r3, pc}
    6f8e:	bf00      	nop

00006f90 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    6f90:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    6f92:	7cd3      	ldrb	r3, [r2, #19]
    6f94:	b313      	cbz	r3, 6fdc <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    6f96:	07d8      	lsls	r0, r3, #31
    6f98:	d504      	bpl.n	6fa4 <SdSpiArduinoDriver::deactivate()+0x14>
    6f9a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    6f9c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6fa0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    6fa4:	0799      	lsls	r1, r3, #30
    6fa6:	d504      	bpl.n	6fb2 <SdSpiArduinoDriver::deactivate()+0x22>
    6fa8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    6faa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6fae:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    6fb2:	0758      	lsls	r0, r3, #29
    6fb4:	d504      	bpl.n	6fc0 <SdSpiArduinoDriver::deactivate()+0x30>
    6fb6:	6b10      	ldr	r0, [r2, #48]	; 0x30
    6fb8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6fbc:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    6fc0:	0719      	lsls	r1, r3, #28
    6fc2:	d504      	bpl.n	6fce <SdSpiArduinoDriver::deactivate()+0x3e>
    6fc4:	6b50      	ldr	r0, [r2, #52]	; 0x34
    6fc6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6fca:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    6fce:	06db      	lsls	r3, r3, #27
    6fd0:	d504      	bpl.n	6fdc <SdSpiArduinoDriver::deactivate()+0x4c>
    6fd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
    6fd4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6fd8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    6fdc:	4770      	bx	lr
    6fde:	bf00      	nop

00006fe0 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    6fe0:	6800      	ldr	r0, [r0, #0]
    6fe2:	f000 b9d7 	b.w	7394 <SPIClass::end()>
    6fe6:	bf00      	nop

00006fe8 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6fe8:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    6fea:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6fec:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    6fee:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6ff0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6ff2:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6ff6:	d0fb      	beq.n	6ff0 <SdSpiArduinoDriver::receive()+0x8>
    6ff8:	6f50      	ldr	r0, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    6ffa:	b2c0      	uxtb	r0, r0
    6ffc:	4770      	bx	lr
    6ffe:	bf00      	nop

00007000 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    7000:	b530      	push	{r4, r5, lr}
    7002:	460c      	mov	r4, r1
    7004:	b083      	sub	sp, #12
    7006:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    7008:	21ff      	movs	r1, #255	; 0xff
    700a:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    700c:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    700e:	f004 fcc1 	bl	b994 <memset>
		transfer(buf, buf, count);
    7012:	6828      	ldr	r0, [r5, #0]
    7014:	9b01      	ldr	r3, [sp, #4]
    7016:	4622      	mov	r2, r4
    7018:	4621      	mov	r1, r4
    701a:	f000 f9b7 	bl	738c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    701e:	2000      	movs	r0, #0
    7020:	b003      	add	sp, #12
    7022:	bd30      	pop	{r4, r5, pc}

00007024 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7024:	6803      	ldr	r3, [r0, #0]
    7026:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    7028:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    702a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    702c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    7030:	d0fb      	beq.n	702a <SdSpiArduinoDriver::send(unsigned char)+0x6>
    7032:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    7034:	4770      	bx	lr
    7036:	bf00      	nop

00007038 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    7038:	1e53      	subs	r3, r2, #1
    703a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    703e:	b530      	push	{r4, r5, lr}
    7040:	4614      	mov	r4, r2
    7042:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    7046:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    7048:	d311      	bcc.n	706e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    704a:	b16a      	cbz	r2, 7068 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    704c:	6803      	ldr	r3, [r0, #0]
    704e:	1e48      	subs	r0, r1, #1
    7050:	6819      	ldr	r1, [r3, #0]
    7052:	1882      	adds	r2, r0, r2
		port().TDR = data;
    7054:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    7058:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    705a:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    705c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    7060:	d0fb      	beq.n	705a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    7062:	4290      	cmp	r0, r2
    7064:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    7066:	d1f5      	bne.n	7054 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    7068:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    706c:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    706e:	4668      	mov	r0, sp
    7070:	f000 ffc4 	bl	7ffc <memcpy>
		transfer(buf, buf, count);
    7074:	466a      	mov	r2, sp
    7076:	4623      	mov	r3, r4
    7078:	6828      	ldr	r0, [r5, #0]
    707a:	4611      	mov	r1, r2
    707c:	f000 f986 	bl	738c <SPIClass::transfer(void const*, void*, unsigned int)>
}
    7080:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    7084:	bd30      	pop	{r4, r5, pc}
    7086:	bf00      	nop

00007088 <FsCache::sync()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    7088:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    708a:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    708c:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    708e:	07dc      	lsls	r4, r3, #31
    7090:	d51d      	bpl.n	70ce <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    7092:	4604      	mov	r4, r0
    7094:	6840      	ldr	r0, [r0, #4]
    7096:	f104 0210 	add.w	r2, r4, #16
    709a:	6803      	ldr	r3, [r0, #0]
    709c:	68a1      	ldr	r1, [r4, #8]
    709e:	9201      	str	r2, [sp, #4]
    70a0:	6a1b      	ldr	r3, [r3, #32]
    70a2:	4798      	blx	r3
    70a4:	9a01      	ldr	r2, [sp, #4]
    70a6:	4605      	mov	r5, r0
    70a8:	b1a8      	cbz	r0, 70d6 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    70aa:	7823      	ldrb	r3, [r4, #0]
    70ac:	0799      	lsls	r1, r3, #30
    70ae:	d508      	bpl.n	70c2 <FsCache::sync()+0x3a>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    70b0:	68e3      	ldr	r3, [r4, #12]
    70b2:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    70b6:	4419      	add	r1, r3
    70b8:	6803      	ldr	r3, [r0, #0]
    70ba:	6a1b      	ldr	r3, [r3, #32]
    70bc:	4798      	blx	r3
    70be:	b150      	cbz	r0, 70d6 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    70c0:	7823      	ldrb	r3, [r4, #0]
    70c2:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    70c6:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    70c8:	7023      	strb	r3, [r4, #0]
}
    70ca:	b003      	add	sp, #12
    70cc:	bd30      	pop	{r4, r5, pc}
  return true;
    70ce:	2501      	movs	r5, #1
}
    70d0:	4628      	mov	r0, r5
    70d2:	b003      	add	sp, #12
    70d4:	bd30      	pop	{r4, r5, pc}
  return false;
    70d6:	2500      	movs	r5, #0
}
    70d8:	4628      	mov	r0, r5
    70da:	b003      	add	sp, #12
    70dc:	bd30      	pop	{r4, r5, pc}
    70de:	bf00      	nop

000070e0 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    70e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    70e2:	6843      	ldr	r3, [r0, #4]
    70e4:	b30b      	cbz	r3, 712a <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    70e6:	6883      	ldr	r3, [r0, #8]
    70e8:	4604      	mov	r4, r0
    70ea:	460f      	mov	r7, r1
    70ec:	4615      	mov	r5, r2
    70ee:	428b      	cmp	r3, r1
    70f0:	d106      	bne.n	7100 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    70f2:	f810 3b10 	ldrb.w	r3, [r0], #16
    70f6:	f005 0503 	and.w	r5, r5, #3
    70fa:	432b      	orrs	r3, r5
    70fc:	7023      	strb	r3, [r4, #0]
}
    70fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    7100:	f7ff ffc2 	bl	7088 <FsCache::sync()>
    7104:	b188      	cbz	r0, 712a <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    7106:	076b      	lsls	r3, r5, #29
    7108:	d505      	bpl.n	7116 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    710a:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    710e:	4630      	mov	r0, r6
    m_sector = sector;
    7110:	2300      	movs	r3, #0
    7112:	60a7      	str	r7, [r4, #8]
    7114:	e7ef      	b.n	70f6 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    7116:	6860      	ldr	r0, [r4, #4]
    7118:	f104 0610 	add.w	r6, r4, #16
    711c:	4639      	mov	r1, r7
    711e:	6803      	ldr	r3, [r0, #0]
    7120:	4632      	mov	r2, r6
    7122:	691b      	ldr	r3, [r3, #16]
    7124:	4798      	blx	r3
    7126:	2800      	cmp	r0, #0
    7128:	d1f1      	bne.n	710e <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    712a:	2000      	movs	r0, #0
}
    712c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    712e:	bf00      	nop

00007130 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7130:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    7134:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    7136:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    713a:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    713c:	d101      	bne.n	7142 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    713e:	6883      	ldr	r3, [r0, #8]
    7140:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    7142:	f000 bafb 	b.w	773c <EventResponder::triggerEventNotImmediate()>
    7146:	bf00      	nop

00007148 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    7148:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    714a:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    714c:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    7150:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    7152:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    7154:	b1a3      	cbz	r3, 7180 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7156:	b321      	cbz	r1, 71a2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    7158:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    715c:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    715e:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7160:	6f25      	ldr	r5, [r4, #112]	; 0x70
    7162:	07af      	lsls	r7, r5, #30
    7164:	d407      	bmi.n	7176 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    7166:	4615      	mov	r5, r2
				count_read--;
    7168:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    716a:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    716c:	b11a      	cbz	r2, 7176 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    716e:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    7172:	462a      	mov	r2, r5
    7174:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    7176:	6965      	ldr	r5, [r4, #20]
    7178:	07ed      	lsls	r5, r5, #31
    717a:	d5f1      	bpl.n	7160 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    717c:	2b00      	cmp	r3, #0
    717e:	d1ea      	bne.n	7156 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    7180:	b16e      	cbz	r6, 719e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    7182:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7184:	6f19      	ldr	r1, [r3, #112]	; 0x70
    7186:	0789      	lsls	r1, r1, #30
    7188:	d4fa      	bmi.n	7180 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    718a:	4611      	mov	r1, r2
			count_read--;
    718c:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    718e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    7190:	2a00      	cmp	r2, #0
    7192:	d0f5      	beq.n	7180 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    7194:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    7198:	460a      	mov	r2, r1
	while (count_read) {
    719a:	2e00      	cmp	r6, #0
    719c:	d1f1      	bne.n	7182 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    719e:	bcf0      	pop	{r4, r5, r6, r7}
    71a0:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    71a2:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    71a6:	e7d9      	b.n	715c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

000071a8 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    71a8:	4b32      	ldr	r3, [pc, #200]	; (7274 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    71aa:	4933      	ldr	r1, [pc, #204]	; (7278 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    71ac:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    71ae:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    71b2:	7920      	ldrb	r0, [r4, #4]
    71b4:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    71b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    71b8:	f895 c004 	ldrb.w	ip, [r5, #4]
    71bc:	f881 c01c 	strb.w	ip, [r1, #28]
    71c0:	7708      	strb	r0, [r1, #28]
    71c2:	b152      	cbz	r2, 71da <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    71c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    71c8:	d323      	bcc.n	7212 <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    71ca:	492c      	ldr	r1, [pc, #176]	; (727c <_spi_dma_rxISR1()+0xd4>)
    71cc:	4411      	add	r1, r2
		DMA_SERQ = channel;
    71ce:	4a2a      	ldr	r2, [pc, #168]	; (7278 <_spi_dma_rxISR1()+0xd0>)
    71d0:	6419      	str	r1, [r3, #64]	; 0x40
    71d2:	76d0      	strb	r0, [r2, #27]
    71d4:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    71d8:	bd30      	pop	{r4, r5, pc}
    71da:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    71dc:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    71de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    71e0:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    71e2:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    71e6:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    71e8:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    71ea:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    71ee:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    71f0:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    71f2:	6804      	ldr	r4, [r0, #0]
    71f4:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    71f6:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    71fa:	4b21      	ldr	r3, [pc, #132]	; (7280 <_spi_dma_rxISR1()+0xd8>)
    71fc:	429c      	cmp	r4, r3
    71fe:	d126      	bne.n	724e <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    7200:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    7202:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    7204:	2b02      	cmp	r3, #2
		_data = data;
    7206:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7208:	d126      	bne.n	7258 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    720a:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    720c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    7210:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    7212:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7214:	8be9      	ldrh	r1, [r5, #30]
    7216:	0409      	lsls	r1, r1, #16
    7218:	d422      	bmi.n	7260 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    721a:	b292      	uxth	r2, r2
    721c:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    721e:	6821      	ldr	r1, [r4, #0]
    7220:	8bec      	ldrh	r4, [r5, #30]
    7222:	b2a4      	uxth	r4, r4
    7224:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7226:	8bcc      	ldrh	r4, [r1, #30]
    7228:	0424      	lsls	r4, r4, #16
    722a:	d505      	bpl.n	7238 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    722c:	8bcc      	ldrh	r4, [r1, #30]
    722e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    7232:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    7236:	4322      	orrs	r2, r4
    7238:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    723a:	8bca      	ldrh	r2, [r1, #30]
    723c:	b292      	uxth	r2, r2
    723e:	82ca      	strh	r2, [r1, #22]
    7240:	2100      	movs	r1, #0
    7242:	4a0d      	ldr	r2, [pc, #52]	; (7278 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    7244:	6419      	str	r1, [r3, #64]	; 0x40
    7246:	76d0      	strb	r0, [r2, #27]
    7248:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    724c:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    724e:	4623      	mov	r3, r4
    7250:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7252:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    7256:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    725c:	f000 ba6e 	b.w	773c <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7260:	8be9      	ldrh	r1, [r5, #30]
    7262:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    7266:	b292      	uxth	r2, r2
    7268:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    726c:	ea41 010e 	orr.w	r1, r1, lr
    7270:	83e9      	strh	r1, [r5, #30]
    7272:	e7d4      	b.n	721e <_spi_dma_rxISR1()+0x76>
    7274:	2000c0d8 	.word	0x2000c0d8
    7278:	400e8000 	.word	0x400e8000
    727c:	ffff8001 	.word	0xffff8001
    7280:	00007131 	.word	0x00007131

00007284 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    7284:	4b32      	ldr	r3, [pc, #200]	; (7350 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    7286:	4933      	ldr	r1, [pc, #204]	; (7354 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7288:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    728a:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    728e:	7920      	ldrb	r0, [r4, #4]
    7290:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    7292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    7294:	f895 c004 	ldrb.w	ip, [r5, #4]
    7298:	f881 c01c 	strb.w	ip, [r1, #28]
    729c:	7708      	strb	r0, [r1, #28]
    729e:	b152      	cbz	r2, 72b6 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    72a0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    72a4:	d323      	bcc.n	72ee <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    72a6:	492c      	ldr	r1, [pc, #176]	; (7358 <_spi_dma_rxISR0()+0xd4>)
    72a8:	4411      	add	r1, r2
		DMA_SERQ = channel;
    72aa:	4a2a      	ldr	r2, [pc, #168]	; (7354 <_spi_dma_rxISR0()+0xd0>)
    72ac:	6419      	str	r1, [r3, #64]	; 0x40
    72ae:	76d0      	strb	r0, [r2, #27]
    72b0:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    72b4:	bd30      	pop	{r4, r5, pc}
    72b6:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    72b8:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    72ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    72bc:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    72be:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    72c2:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    72c4:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    72c6:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    72ca:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    72cc:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    72ce:	6804      	ldr	r4, [r0, #0]
    72d0:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    72d2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    72d6:	4b21      	ldr	r3, [pc, #132]	; (735c <_spi_dma_rxISR0()+0xd8>)
    72d8:	429c      	cmp	r4, r3
    72da:	d126      	bne.n	732a <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    72dc:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    72de:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    72e0:	2b02      	cmp	r3, #2
		_data = data;
    72e2:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    72e4:	d126      	bne.n	7334 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    72e6:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    72e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    72ec:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    72ee:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    72f0:	8be9      	ldrh	r1, [r5, #30]
    72f2:	0409      	lsls	r1, r1, #16
    72f4:	d422      	bmi.n	733c <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    72f6:	b292      	uxth	r2, r2
    72f8:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    72fa:	6821      	ldr	r1, [r4, #0]
    72fc:	8bec      	ldrh	r4, [r5, #30]
    72fe:	b2a4      	uxth	r4, r4
    7300:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7302:	8bcc      	ldrh	r4, [r1, #30]
    7304:	0424      	lsls	r4, r4, #16
    7306:	d505      	bpl.n	7314 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7308:	8bcc      	ldrh	r4, [r1, #30]
    730a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    730e:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    7312:	4322      	orrs	r2, r4
    7314:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    7316:	8bca      	ldrh	r2, [r1, #30]
    7318:	b292      	uxth	r2, r2
    731a:	82ca      	strh	r2, [r1, #22]
    731c:	2100      	movs	r1, #0
    731e:	4a0d      	ldr	r2, [pc, #52]	; (7354 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    7320:	6419      	str	r1, [r3, #64]	; 0x40
    7322:	76d0      	strb	r0, [r2, #27]
    7324:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7328:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    732a:	4623      	mov	r3, r4
    732c:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    732e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    7332:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    7338:	f000 ba00 	b.w	773c <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    733c:	8be9      	ldrh	r1, [r5, #30]
    733e:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    7342:	b292      	uxth	r2, r2
    7344:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    7348:	ea41 010e 	orr.w	r1, r1, lr
    734c:	83e9      	strh	r1, [r5, #30]
    734e:	e7d4      	b.n	72fa <_spi_dma_rxISR0()+0x76>
    7350:	2000c088 	.word	0x2000c088
    7354:	400e8000 	.word	0x400e8000
    7358:	ffff8001 	.word	0xffff8001
    735c:	00007131 	.word	0x00007131

00007360 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    7360:	2300      	movs	r3, #0
    7362:	e9c0 1200 	strd	r1, r2, [r0]
    7366:	e9c0 3302 	strd	r3, r3, [r0, #8]
    736a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    736e:	e9c0 3306 	strd	r3, r3, [r0, #24]
    7372:	e9c0 3308 	strd	r3, r3, [r0, #32]
    7376:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    737a:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    737e:	6383      	str	r3, [r0, #56]	; 0x38
    7380:	8783      	strh	r3, [r0, #60]	; 0x3c
    7382:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    7386:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    738a:	4770      	bx	lr

0000738c <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    738c:	b10b      	cbz	r3, 7392 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    738e:	f7ff bedb 	b.w	7148 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    7392:	4770      	bx	lr

00007394 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    7394:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7396:	e9d3 1200 	ldrd	r1, r2, [r3]
    739a:	6809      	ldr	r1, [r1, #0]
    739c:	4211      	tst	r1, r2
    739e:	d100      	bne.n	73a2 <SPIClass::end()+0xe>
    73a0:	4770      	bx	lr
void SPIClass::end() {
    73a2:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    73a4:	6802      	ldr	r2, [r0, #0]
    73a6:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    73a8:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    73aa:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    73ac:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    73ae:	7c22      	ldrb	r2, [r4, #16]
    73b0:	4413      	add	r3, r2
    73b2:	7c18      	ldrb	r0, [r3, #16]
    73b4:	f000 fde2 	bl	7f7c <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    73b8:	7c62      	ldrb	r2, [r4, #17]
    73ba:	6863      	ldr	r3, [r4, #4]
    73bc:	2105      	movs	r1, #5
    73be:	4413      	add	r3, r2
    73c0:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    73c4:	f000 fdda 	bl	7f7c <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    73c8:	6863      	ldr	r3, [r4, #4]
    73ca:	7ca2      	ldrb	r2, [r4, #18]
    73cc:	2105      	movs	r1, #5
    73ce:	4413      	add	r3, r2
}
    73d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    73d4:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    73d8:	f000 bdd0 	b.w	7f7c <pinMode>

000073dc <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    73dc:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    73de:	4a08      	ldr	r2, [pc, #32]	; (7400 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    73e0:	4908      	ldr	r1, [pc, #32]	; (7404 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    73e2:	4809      	ldr	r0, [pc, #36]	; (7408 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    73e4:	f7ff ffbc 	bl	7360 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    73e8:	4a08      	ldr	r2, [pc, #32]	; (740c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    73ea:	4909      	ldr	r1, [pc, #36]	; (7410 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    73ec:	4809      	ldr	r0, [pc, #36]	; (7414 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    73ee:	f7ff ffb7 	bl	7360 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    73f2:	4a09      	ldr	r2, [pc, #36]	; (7418 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    73f4:	4909      	ldr	r1, [pc, #36]	; (741c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    73f6:	480a      	ldr	r0, [pc, #40]	; (7420 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    73f8:	f7ff ffb2 	bl	7360 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    73fc:	bd08      	pop	{r3, pc}
    73fe:	bf00      	nop
    7400:	20000680 	.word	0x20000680
    7404:	403a0000 	.word	0x403a0000
    7408:	2000c088 	.word	0x2000c088
    740c:	20000610 	.word	0x20000610
    7410:	4039c000 	.word	0x4039c000
    7414:	2000c0d8 	.word	0x2000c0d8
    7418:	200005a0 	.word	0x200005a0
    741c:	40394000 	.word	0x40394000
    7420:	2000c128 	.word	0x2000c128

00007424 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    7424:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7428:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    742c:	1a10      	subs	r0, r2, r0
    742e:	4770      	bx	lr

00007430 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    7430:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    7434:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7438:	429a      	cmp	r2, r3
    743a:	d905      	bls.n	7448 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    743c:	1c5a      	adds	r2, r3, #1
    743e:	4403      	add	r3, r0
    7440:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    7444:	7e98      	ldrb	r0, [r3, #26]
    7446:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    7448:	f04f 30ff 	mov.w	r0, #4294967295
	}
    744c:	4770      	bx	lr
    744e:	bf00      	nop

00007450 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    7450:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    7454:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7458:	429a      	cmp	r2, r3
    745a:	d902      	bls.n	7462 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    745c:	4418      	add	r0, r3
    745e:	7e80      	ldrb	r0, [r0, #26]
    7460:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    7462:	f04f 30ff 	mov.w	r0, #4294967295
	}
    7466:	4770      	bx	lr

00007468 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    7468:	4770      	bx	lr
    746a:	bf00      	nop

0000746c <TwoWire::write(unsigned char)>:
{
    746c:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    746e:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    7472:	b178      	cbz	r0, 7494 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    7474:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    7478:	2a88      	cmp	r2, #136	; 0x88
    747a:	d903      	bls.n	7484 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    747c:	2201      	movs	r2, #1
			return 0;
    747e:	2000      	movs	r0, #0
    7480:	605a      	str	r2, [r3, #4]
    7482:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    7484:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    7488:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    748a:	441a      	add	r2, r3
    748c:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    7490:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    7494:	4770      	bx	lr
    7496:	bf00      	nop

00007498 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    7498:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    749a:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    749e:	b90c      	cbnz	r4, 74a4 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    74a0:	4620      	mov	r0, r4
    74a2:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    74a4:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    74a8:	4605      	mov	r5, r0
    74aa:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    74ae:	42a2      	cmp	r2, r4
    74b0:	d80d      	bhi.n	74ce <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    74b2:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    74b4:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    74b8:	4622      	mov	r2, r4
    74ba:	4418      	add	r0, r3
    74bc:	f000 fd9e 	bl	7ffc <memcpy>
		txBufferLength += quantity;
    74c0:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    74c4:	4620      	mov	r0, r4
		txBufferLength += quantity;
    74c6:	4423      	add	r3, r4
    74c8:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    74cc:	bd38      	pop	{r3, r4, r5, pc}
    74ce:	2201      	movs	r2, #1
    74d0:	6042      	str	r2, [r0, #4]
    74d2:	e7ef      	b.n	74b4 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

000074d4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    74d4:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    74d6:	2500      	movs	r5, #0
    74d8:	4613      	mov	r3, r2
    74da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    74de:	4604      	mov	r4, r0
    74e0:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
    74e4:	4815      	ldr	r0, [pc, #84]	; (753c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    74e6:	2288      	movs	r2, #136	; 0x88
    74e8:	6121      	str	r1, [r4, #16]
    74ea:	4629      	mov	r1, r5
    74ec:	6020      	str	r0, [r4, #0]
    74ee:	f104 001a 	add.w	r0, r4, #26
    74f2:	6163      	str	r3, [r4, #20]
    74f4:	7325      	strb	r5, [r4, #12]
    74f6:	7625      	strb	r5, [r4, #24]
    74f8:	7665      	strb	r5, [r4, #25]
    74fa:	f004 fa4b 	bl	b994 <memset>
    74fe:	2289      	movs	r2, #137	; 0x89
    7500:	4629      	mov	r1, r5
    7502:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    7506:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    750a:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    750e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    7512:	f004 fa3f 	bl	b994 <memset>
	}
    7516:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
    7518:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    751c:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    7520:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    7524:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    7528:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    752c:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    7530:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    7534:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
    7538:	bd38      	pop	{r3, r4, r5, pc}
    753a:	bf00      	nop
    753c:	200007e8 	.word	0x200007e8

00007540 <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    7540:	6903      	ldr	r3, [r0, #16]
{
    7542:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    7544:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
    7548:	4604      	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    754a:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    754e:	d001      	beq.n	7554 <TwoWire::isr()+0x14>
    7550:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    7554:	07ae      	lsls	r6, r5, #30
    7556:	d50b      	bpl.n	7570 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    7558:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    755c:	0408      	lsls	r0, r1, #16
    755e:	d53e      	bpl.n	75de <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    7560:	2200      	movs	r2, #0
    7562:	2001      	movs	r0, #1
    7564:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    7568:	4422      	add	r2, r4
    756a:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    756e:	7691      	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    7570:	07ea      	lsls	r2, r5, #31
    7572:	d510      	bpl.n	7596 <TwoWire::isr()+0x56>
		if (!transmitting) {
    7574:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
    7578:	b1f6      	cbz	r6, 75b8 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    757a:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
    757e:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    7582:	42b2      	cmp	r2, r6
    7584:	d927      	bls.n	75d6 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    7586:	1c72      	adds	r2, r6, #1
    7588:	4426      	add	r6, r4
    758a:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    758e:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
    7592:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    7596:	05ab      	lsls	r3, r5, #22
    7598:	d50d      	bpl.n	75b6 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    759a:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    759e:	b118      	cbz	r0, 75a8 <TwoWire::isr()+0x68>
    75a0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    75a4:	b103      	cbz	r3, 75a8 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    75a6:	4798      	blx	r3
		}
		rxBufferIndex = 0;
    75a8:	2300      	movs	r3, #0
    75aa:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    75ae:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    75b2:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
	}
}
    75b6:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    75b8:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    75bc:	b10a      	cbz	r2, 75c2 <TwoWire::isr()+0x82>
				(*user_onRequest)();
    75be:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    75c0:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    75c2:	2200      	movs	r2, #0
    75c4:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    75c8:	2201      	movs	r2, #1
    75ca:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    75ce:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    75d2:	42b2      	cmp	r2, r6
    75d4:	d8d7      	bhi.n	7586 <TwoWire::isr()+0x46>
			port->STDR = 0;
    75d6:	2200      	movs	r2, #0
    75d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    75dc:	e7db      	b.n	7596 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    75de:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    75e2:	2a87      	cmp	r2, #135	; 0x87
    75e4:	d8c4      	bhi.n	7570 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    75e6:	1c50      	adds	r0, r2, #1
    75e8:	b2c0      	uxtb	r0, r0
    75ea:	e7bd      	b.n	7568 <TwoWire::isr()+0x28>

000075ec <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    75ec:	4801      	ldr	r0, [pc, #4]	; (75f4 <lpi2c1_isr()+0x8>)
    75ee:	f7ff bfa7 	b.w	7540 <TwoWire::isr()>
    75f2:	bf00      	nop
    75f4:	2000c17c 	.word	0x2000c17c

000075f8 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    75f8:	4801      	ldr	r0, [pc, #4]	; (7600 <lpi2c3_isr()+0x8>)
    75fa:	f7ff bfa1 	b.w	7540 <TwoWire::isr()>
    75fe:	bf00      	nop
    7600:	2000c2bc 	.word	0x2000c2bc

00007604 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    7604:	4801      	ldr	r0, [pc, #4]	; (760c <lpi2c4_isr()+0x8>)
    7606:	f7ff bf9b 	b.w	7540 <TwoWire::isr()>
    760a:	bf00      	nop
    760c:	2000c3fc 	.word	0x2000c3fc

00007610 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    7610:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    7612:	4c09      	ldr	r4, [pc, #36]	; (7638 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    7614:	4909      	ldr	r1, [pc, #36]	; (763c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    7616:	4622      	mov	r2, r4
    7618:	4809      	ldr	r0, [pc, #36]	; (7640 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    761a:	f7ff ff5b 	bl	74d4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    761e:	f104 0250 	add.w	r2, r4, #80	; 0x50
    7622:	4908      	ldr	r1, [pc, #32]	; (7644 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    7624:	4808      	ldr	r0, [pc, #32]	; (7648 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    7626:	f7ff ff55 	bl	74d4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    762a:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    762e:	4907      	ldr	r1, [pc, #28]	; (764c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    7630:	4807      	ldr	r0, [pc, #28]	; (7650 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    7632:	f7ff ff4f 	bl	74d4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    7636:	bd10      	pop	{r4, pc}
    7638:	60002674 	.word	0x60002674
    763c:	403f0000 	.word	0x403f0000
    7640:	2000c17c 	.word	0x2000c17c
    7644:	403f8000 	.word	0x403f8000
    7648:	2000c2bc 	.word	0x2000c2bc
    764c:	403fc000 	.word	0x403fc000
    7650:	2000c3fc 	.word	0x2000c3fc

00007654 <DMAChannel::begin(bool)>:
{
    7654:	b430      	push	{r4, r5}
	__disable_irq();
    7656:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    7658:	b921      	cbnz	r1, 7664 <DMAChannel::begin(bool)+0x10>
    765a:	6803      	ldr	r3, [r0, #0]
    765c:	b113      	cbz	r3, 7664 <DMAChannel::begin(bool)+0x10>
    765e:	7902      	ldrb	r2, [r0, #4]
    7660:	2a0f      	cmp	r2, #15
    7662:	d93b      	bls.n	76dc <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    7664:	4c24      	ldr	r4, [pc, #144]	; (76f8 <DMAChannel::begin(bool)+0xa4>)
    7666:	8821      	ldrh	r1, [r4, #0]
{
    7668:	2300      	movs	r3, #0
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    766a:	fa41 f203 	asr.w	r2, r1, r3
    766e:	f012 0201 	ands.w	r2, r2, #1
    7672:	d008      	beq.n	7686 <DMAChannel::begin(bool)+0x32>
		if (++ch >= DMA_MAX_CHANNELS) {
    7674:	3301      	adds	r3, #1
    7676:	2b10      	cmp	r3, #16
    7678:	d1f7      	bne.n	766a <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    767a:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    767c:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    767e:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    7680:	6002      	str	r2, [r0, #0]
}
    7682:	bc30      	pop	{r4, r5}
    7684:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    7686:	f04f 0c01 	mov.w	ip, #1
    768a:	fa0c fc03 	lsl.w	ip, ip, r3
    768e:	ea41 010c 	orr.w	r1, r1, ip
    7692:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    7694:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7696:	4919      	ldr	r1, [pc, #100]	; (76fc <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    7698:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    769c:	4c18      	ldr	r4, [pc, #96]	; (7700 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    769e:	4419      	add	r1, r3
	channel = ch;
    76a0:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    76a4:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    76a6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    76a8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    76ac:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    76ae:	f240 4482 	movw	r4, #1154	; 0x482
    76b2:	4914      	ldr	r1, [pc, #80]	; (7704 <DMAChannel::begin(bool)+0xb0>)
    76b4:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    76b6:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    76ba:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    76be:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    76c2:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    76c6:	6003      	str	r3, [r0, #0]
}
    76c8:	bc30      	pop	{r4, r5}
	*p++ = 0;
    76ca:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    76ce:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    76d2:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    76d6:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    76da:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    76dc:	4c06      	ldr	r4, [pc, #24]	; (76f8 <DMAChannel::begin(bool)+0xa4>)
    76de:	8821      	ldrh	r1, [r4, #0]
    76e0:	fa41 f502 	asr.w	r5, r1, r2
    76e4:	07ed      	lsls	r5, r5, #31
    76e6:	d5bf      	bpl.n	7668 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    76e8:	4d04      	ldr	r5, [pc, #16]	; (76fc <DMAChannel::begin(bool)+0xa8>)
    76ea:	4415      	add	r5, r2
    76ec:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    76f0:	d1ba      	bne.n	7668 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    76f2:	b662      	cpsie	i
		return;
    76f4:	e7c5      	b.n	7682 <DMAChannel::begin(bool)+0x2e>
    76f6:	bf00      	nop
    76f8:	2001ec86 	.word	0x2001ec86
    76fc:	02007480 	.word	0x02007480
    7700:	400fc000 	.word	0x400fc000
    7704:	400e8000 	.word	0x400e8000

00007708 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
    7708:	7903      	ldrb	r3, [r0, #4]
    770a:	2b0f      	cmp	r3, #15
    770c:	d811      	bhi.n	7732 <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    770e:	4a09      	ldr	r2, [pc, #36]	; (7734 <DMAChannel::release()+0x2c>)
    7710:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    7712:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    7714:	4908      	ldr	r1, [pc, #32]	; (7738 <DMAChannel::release()+0x30>)
    7716:	2201      	movs	r2, #1
    7718:	f890 c004 	ldrb.w	ip, [r0, #4]
    771c:	880b      	ldrh	r3, [r1, #0]
    771e:	fa02 f20c 	lsl.w	r2, r2, ip
    7722:	ea23 0302 	bic.w	r3, r3, r2
    7726:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    7728:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    772a:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    772c:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    772e:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    7730:	6003      	str	r3, [r0, #0]
}
    7732:	4770      	bx	lr
    7734:	400e8000 	.word	0x400e8000
    7738:	2001ec86 	.word	0x2001ec86

0000773c <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    773c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7740:	b672      	cpsid	i
	if (_triggered == false) {
    7742:	7f43      	ldrb	r3, [r0, #29]
    7744:	b95b      	cbnz	r3, 775e <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    7746:	7f01      	ldrb	r1, [r0, #28]
    7748:	2901      	cmp	r1, #1
{
    774a:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    774c:	d00b      	beq.n	7766 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    774e:	2903      	cmp	r1, #3
    7750:	d013      	beq.n	777a <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    7752:	2301      	movs	r3, #1
    7754:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    7756:	b902      	cbnz	r2, 775a <EventResponder::triggerEventNotImmediate()+0x1e>
    7758:	b662      	cpsie	i
}
    775a:	bc30      	pop	{r4, r5}
    775c:	4770      	bx	lr
    775e:	b90a      	cbnz	r2, 7764 <EventResponder::triggerEventNotImmediate()+0x28>
    7760:	b662      	cpsie	i
    7762:	4770      	bx	lr
    7764:	4770      	bx	lr
			if (firstYield == nullptr) {
    7766:	4c12      	ldr	r4, [pc, #72]	; (77b0 <EventResponder::triggerEventNotImmediate()+0x74>)
    7768:	6821      	ldr	r1, [r4, #0]
    776a:	b1b1      	cbz	r1, 779a <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    776c:	4911      	ldr	r1, [pc, #68]	; (77b4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    776e:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    7770:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    7772:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    7774:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    7776:	6158      	str	r0, [r3, #20]
				lastYield = this;
    7778:	e7eb      	b.n	7752 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    777a:	4d0f      	ldr	r5, [pc, #60]	; (77b8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    777c:	490f      	ldr	r1, [pc, #60]	; (77bc <EventResponder::triggerEventNotImmediate()+0x80>)
    777e:	682c      	ldr	r4, [r5, #0]
    7780:	b18c      	cbz	r4, 77a6 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    7782:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    7784:	680b      	ldr	r3, [r1, #0]
    7786:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    7788:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    778a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    778e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    7792:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    7794:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    7798:	e7db      	b.n	7752 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    779a:	4b06      	ldr	r3, [pc, #24]	; (77b4 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    779c:	6020      	str	r0, [r4, #0]
				lastYield = this;
    779e:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    77a0:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    77a4:	e7d5      	b.n	7752 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    77a6:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    77aa:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    77ac:	e7ed      	b.n	778a <EventResponder::triggerEventNotImmediate()+0x4e>
    77ae:	bf00      	nop
    77b0:	2001e074 	.word	0x2001e074
    77b4:	2001e080 	.word	0x2001e080
    77b8:	2001e07c 	.word	0x2001e07c
    77bc:	2001e078 	.word	0x2001e078

000077c0 <EventResponder::runFromInterrupt()>:
{
    77c0:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    77c2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    77c6:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    77c8:	4c0c      	ldr	r4, [pc, #48]	; (77fc <EventResponder::runFromInterrupt()+0x3c>)
    77ca:	6820      	ldr	r0, [r4, #0]
		if (first) {
    77cc:	b180      	cbz	r0, 77f0 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    77ce:	4e0c      	ldr	r6, [pc, #48]	; (7800 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    77d0:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    77d2:	6943      	ldr	r3, [r0, #20]
    77d4:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    77d6:	b173      	cbz	r3, 77f6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    77d8:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    77da:	b902      	cbnz	r2, 77de <EventResponder::runFromInterrupt()+0x1e>
    77dc:	b662      	cpsie	i
			(*(first->_function))(*first);
    77de:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    77e0:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    77e2:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    77e4:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    77e8:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    77ea:	6820      	ldr	r0, [r4, #0]
		if (first) {
    77ec:	2800      	cmp	r0, #0
    77ee:	d1f0      	bne.n	77d2 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    77f0:	b902      	cbnz	r2, 77f4 <EventResponder::runFromInterrupt()+0x34>
    77f2:	b662      	cpsie	i
}
    77f4:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    77f6:	6033      	str	r3, [r6, #0]
    77f8:	e7ef      	b.n	77da <EventResponder::runFromInterrupt()+0x1a>
    77fa:	bf00      	nop
    77fc:	2001e07c 	.word	0x2001e07c
    7800:	2001e078 	.word	0x2001e078

00007804 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    7804:	f7ff bfdc 	b.w	77c0 <EventResponder::runFromInterrupt()>

00007808 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    7808:	4904      	ldr	r1, [pc, #16]	; (781c <systick_isr+0x14>)
	systick_millis_count++;
    780a:	4a05      	ldr	r2, [pc, #20]	; (7820 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    780c:	6849      	ldr	r1, [r1, #4]
    780e:	4b05      	ldr	r3, [pc, #20]	; (7824 <systick_isr+0x1c>)
    7810:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    7812:	6813      	ldr	r3, [r2, #0]
    7814:	3301      	adds	r3, #1
    7816:	6013      	str	r3, [r2, #0]
}
    7818:	4770      	bx	lr
    781a:	bf00      	nop
    781c:	e0001000 	.word	0xe0001000
    7820:	2001ec54 	.word	0x2001ec54
    7824:	2001ec50 	.word	0x2001ec50

00007828 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7828:	4608      	mov	r0, r1
    782a:	f001 bdc9 	b.w	93c0 <usb_serial_putchar>
    782e:	bf00      	nop

00007830 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
    7830:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7832:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    7834:	bf08      	it	eq
    7836:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7838:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
    783a:	b391      	cbz	r1, 78a2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
    783c:	f04f 0e21 	mov.w	lr, #33	; 0x21
    7840:	e001      	b.n	7846 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
    7842:	fa5f fe86 	uxtb.w	lr, r6
    7846:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    784a:	fbb1 f5f2 	udiv	r5, r1, r2
    784e:	fb02 1415 	mls	r4, r2, r5, r1
    7852:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7856:	2c09      	cmp	r4, #9
    7858:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    785c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    7860:	bf98      	it	ls
    7862:	fa5f f48c 	uxtbls.w	r4, ip
    7866:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    786a:	bf88      	it	hi
    786c:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    786e:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7870:	44ec      	add	ip, sp
			n /= base;
    7872:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7874:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    7878:	d2e3      	bcs.n	7842 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    787a:	b14b      	cbz	r3, 7890 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    787c:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    7880:	222d      	movs	r2, #45	; 0x2d
		i--;
    7882:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    7886:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    788a:	446b      	add	r3, sp
    788c:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    7890:	6803      	ldr	r3, [r0, #0]
    7892:	a901      	add	r1, sp, #4
    7894:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    7898:	685b      	ldr	r3, [r3, #4]
    789a:	4471      	add	r1, lr
    789c:	4798      	blx	r3
}
    789e:	b00a      	add	sp, #40	; 0x28
    78a0:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    78a2:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    78a4:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    78a8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    78ac:	e7e5      	b.n	787a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    78ae:	bf00      	nop

000078b0 <Print::print(long)>:
	if (n < 0) {
    78b0:	2900      	cmp	r1, #0
    78b2:	db03      	blt.n	78bc <Print::print(long)+0xc>
	uint8_t sign=0;
    78b4:	2300      	movs	r3, #0
	if (base == 0) {
    78b6:	220a      	movs	r2, #10
    78b8:	f7ff bfba 	b.w	7830 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    78bc:	4249      	negs	r1, r1
		sign = '-';
    78be:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    78c0:	220a      	movs	r2, #10
    78c2:	f7ff bfb5 	b.w	7830 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    78c6:	bf00      	nop

000078c8 <Print::println()>:
{
    78c8:	b500      	push	{lr}
	return write(buf, 2);
    78ca:	6803      	ldr	r3, [r0, #0]
{
    78cc:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    78ce:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    78d2:	2202      	movs	r2, #2
    78d4:	a901      	add	r1, sp, #4
    78d6:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    78d8:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    78dc:	4798      	blx	r3
}
    78de:	b003      	add	sp, #12
    78e0:	f85d fb04 	ldr.w	pc, [sp], #4

000078e4 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    78e4:	4b05      	ldr	r3, [pc, #20]	; (78fc <_write+0x18>)
    78e6:	2802      	cmp	r0, #2
    78e8:	bf88      	it	hi
    78ea:	4603      	movhi	r3, r0
{
    78ec:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    78ee:	681c      	ldr	r4, [r3, #0]
    78f0:	4618      	mov	r0, r3
    78f2:	6863      	ldr	r3, [r4, #4]
}
    78f4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    78f8:	4718      	bx	r3
    78fa:	bf00      	nop
    78fc:	200085d4 	.word	0x200085d4

00007900 <Print::printf(char const*, ...)>:
{
    7900:	b40e      	push	{r1, r2, r3}
    7902:	b500      	push	{lr}
    7904:	b082      	sub	sp, #8
    7906:	aa03      	add	r2, sp, #12
    7908:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    790c:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    790e:	f003 ff55 	bl	b7bc <vdprintf>
}
    7912:	b002      	add	sp, #8
    7914:	f85d eb04 	ldr.w	lr, [sp], #4
    7918:	b003      	add	sp, #12
    791a:	4770      	bx	lr

0000791c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    791c:	b95a      	cbnz	r2, 7936 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    791e:	6803      	ldr	r3, [r0, #0]
    7920:	b2c9      	uxtb	r1, r1
    7922:	4a07      	ldr	r2, [pc, #28]	; (7940 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    7924:	681b      	ldr	r3, [r3, #0]
    7926:	4293      	cmp	r3, r2
{
    7928:	b500      	push	{lr}
    792a:	d106      	bne.n	793a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    792c:	4608      	mov	r0, r1
}
    792e:	f85d eb04 	ldr.w	lr, [sp], #4
    7932:	f001 bd45 	b.w	93c0 <usb_serial_putchar>
    7936:	f7ff bf7b 	b.w	7830 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    793a:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    793e:	4718      	bx	r3
    7940:	00007829 	.word	0x00007829
    7944:	00000000 	.word	0x00000000

00007948 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    7948:	eeb4 0b40 	vcmp.f64	d0, d0
{
    794c:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    794e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    7952:	4605      	mov	r5, r0
    7954:	ed2d 8b02 	vpush	{d8}
    7958:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    795a:	d67c      	bvs.n	7a56 <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    795c:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    7960:	ed9f 6b47 	vldr	d6, [pc, #284]	; 7a80 <Print::printFloat(double, unsigned char)+0x138>
    7964:	eeb4 7b46 	vcmp.f64	d7, d6
    7968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    796c:	dc6b      	bgt.n	7a46 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    796e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 7a88 <Print::printFloat(double, unsigned char)+0x140>
    7972:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    797a:	dc5a      	bgt.n	7a32 <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    797c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 7a90 <Print::printFloat(double, unsigned char)+0x148>
    7980:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7988:	d453      	bmi.n	7a32 <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    798a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    798e:	460c      	mov	r4, r1
    7990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7994:	d45b      	bmi.n	7a4e <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    7996:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    7998:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    799c:	2c00      	cmp	r4, #0
    799e:	d05e      	beq.n	7a5e <Print::printFloat(double, unsigned char)+0x116>
    79a0:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    79a4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 7a98 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    79a8:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    79ac:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    79b0:	fa5f f28c 	uxtb.w	r2, ip
    79b4:	42a2      	cmp	r2, r4
    79b6:	d3f7      	bcc.n	79a8 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    79b8:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    79bc:	220a      	movs	r2, #10
    79be:	4628      	mov	r0, r5
    79c0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    79c4:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    79c8:	ee17 1a90 	vmov	r1, s15
    79cc:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    79d0:	f7ff ff2e 	bl	7830 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    79d4:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    79d6:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    79da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    79de:	4606      	mov	r6, r0
		buf[0] = '.';
    79e0:	bf28      	it	cs
    79e2:	240f      	movcs	r4, #15
    79e4:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    79e8:	f10d 0309 	add.w	r3, sp, #9
    79ec:	aa02      	add	r2, sp, #8
    79ee:	1e61      	subs	r1, r4, #1
    79f0:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    79f4:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    79f8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    79fc:	edcd 7a01 	vstr	s15, [sp, #4]
    7a00:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    7a04:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    7a08:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    7a0a:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    7a0e:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    7a12:	4291      	cmp	r1, r2
			remainder -= n; 
    7a14:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    7a18:	d1ec      	bne.n	79f4 <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    7a1a:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    7a1c:	3401      	adds	r4, #1
		count += write(buf, count);
    7a1e:	a902      	add	r1, sp, #8
    7a20:	4628      	mov	r0, r5
    7a22:	685b      	ldr	r3, [r3, #4]
    7a24:	b2e2      	uxtb	r2, r4
    7a26:	4798      	blx	r3
	}
	return count;
}
    7a28:	4630      	mov	r0, r6
    7a2a:	b006      	add	sp, #24
    7a2c:	ecbd 8b02 	vpop	{d8}
    7a30:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    7a32:	682b      	ldr	r3, [r5, #0]
    7a34:	2203      	movs	r2, #3
    7a36:	491a      	ldr	r1, [pc, #104]	; (7aa0 <Print::printFloat(double, unsigned char)+0x158>)
    7a38:	685b      	ldr	r3, [r3, #4]
    7a3a:	b006      	add	sp, #24
    7a3c:	ecbd 8b02 	vpop	{d8}
    7a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a44:	4718      	bx	r3
    7a46:	6803      	ldr	r3, [r0, #0]
    7a48:	2203      	movs	r2, #3
    7a4a:	4916      	ldr	r1, [pc, #88]	; (7aa4 <Print::printFloat(double, unsigned char)+0x15c>)
    7a4c:	e7f4      	b.n	7a38 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    7a4e:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    7a52:	2301      	movs	r3, #1
    7a54:	e7a0      	b.n	7998 <Print::printFloat(double, unsigned char)+0x50>
    7a56:	6803      	ldr	r3, [r0, #0]
    7a58:	2203      	movs	r2, #3
    7a5a:	4913      	ldr	r1, [pc, #76]	; (7aa8 <Print::printFloat(double, unsigned char)+0x160>)
    7a5c:	e7ec      	b.n	7a38 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    7a5e:	ee30 0b07 	vadd.f64	d0, d0, d7
    7a62:	220a      	movs	r2, #10
    7a64:	4628      	mov	r0, r5
    7a66:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    7a6a:	ee17 1a90 	vmov	r1, s15
}
    7a6e:	b006      	add	sp, #24
    7a70:	ecbd 8b02 	vpop	{d8}
    7a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a78:	f7ff beda 	b.w	7830 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7a7c:	f3af 8000 	nop.w
    7a80:	ffffffff 	.word	0xffffffff
    7a84:	7fefffff 	.word	0x7fefffff
    7a88:	e0000000 	.word	0xe0000000
    7a8c:	41efffff 	.word	0x41efffff
    7a90:	e0000000 	.word	0xe0000000
    7a94:	c1efffff 	.word	0xc1efffff
    7a98:	9999999a 	.word	0x9999999a
    7a9c:	3fb99999 	.word	0x3fb99999
    7aa0:	2000059c 	.word	0x2000059c
    7aa4:	20000598 	.word	0x20000598
    7aa8:	20000594 	.word	0x20000594

00007aac <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    7aac:	f001 bc78 	b.w	93a0 <usb_serial_getchar>

00007ab0 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    7ab0:	f001 bc10 	b.w	92d4 <usb_serial_peekchar>

00007ab4 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    7ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    7ab8:	b392      	cbz	r2, 7b20 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    7aba:	4617      	mov	r7, r2
    7abc:	fab3 f283 	clz	r2, r3
    7ac0:	0952      	lsrs	r2, r2, #5
    7ac2:	b36b      	cbz	r3, 7b20 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    7ac4:	f1b3 0801 	subs.w	r8, r3, #1
    7ac8:	d025      	beq.n	7b16 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7aca:	eb07 0a08 	add.w	sl, r7, r8
    7ace:	4683      	mov	fp, r0
    7ad0:	4689      	mov	r9, r1
	size_t index = 0;
    7ad2:	4690      	mov	r8, r2
    7ad4:	4c17      	ldr	r4, [pc, #92]	; (7b34 <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    7ad6:	4e18      	ldr	r6, [pc, #96]	; (7b38 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    7ad8:	6825      	ldr	r5, [r4, #0]
    7ada:	e00b      	b.n	7af4 <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    7adc:	f001 fc60 	bl	93a0 <usb_serial_getchar>
    if (c >= 0) return c;
    7ae0:	2800      	cmp	r0, #0
    7ae2:	da10      	bge.n	7b06 <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    7ae4:	f001 fd00 	bl	94e8 <yield>
    7ae8:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    7aea:	f8db 2008 	ldr.w	r2, [fp, #8]
    7aee:	1b5b      	subs	r3, r3, r5
    7af0:	4293      	cmp	r3, r2
    7af2:	d21a      	bcs.n	7b2a <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    7af4:	f8db 3000 	ldr.w	r3, [fp]
    7af8:	695b      	ldr	r3, [r3, #20]
    7afa:	42b3      	cmp	r3, r6
    7afc:	d0ee      	beq.n	7adc <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    7afe:	4658      	mov	r0, fp
    7b00:	4798      	blx	r3
    if (c >= 0) return c;
    7b02:	2800      	cmp	r0, #0
    7b04:	dbee      	blt.n	7ae4 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    7b06:	4548      	cmp	r0, r9
    7b08:	d005      	beq.n	7b16 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    7b0a:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    7b0e:	45ba      	cmp	sl, r7
		index++;
    7b10:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    7b14:	d1e0      	bne.n	7ad8 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    7b16:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    7b18:	4640      	mov	r0, r8
	*buffer = 0;
    7b1a:	703b      	strb	r3, [r7, #0]
}
    7b1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    7b20:	f04f 0800 	mov.w	r8, #0
}
    7b24:	4640      	mov	r0, r8
    7b26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    7b2a:	2301      	movs	r3, #1
    7b2c:	f88b 300c 	strb.w	r3, [fp, #12]
    7b30:	e7f1      	b.n	7b16 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7b32:	bf00      	nop
    7b34:	2001ec54 	.word	0x2001ec54
    7b38:	00007aad 	.word	0x00007aad

00007b3c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7b3c:	49a2      	ldr	r1, [pc, #648]	; (7dc8 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7b3e:	4ba3      	ldr	r3, [pc, #652]	; (7dcc <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    7b40:	4288      	cmp	r0, r1
{
    7b42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    7b46:	4ca2      	ldr	r4, [pc, #648]	; (7dd0 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7b48:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    7b4a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    7b4c:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    7b50:	d91b      	bls.n	7b8a <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    7b52:	4ba0      	ldr	r3, [pc, #640]	; (7dd4 <set_arm_clock+0x298>)
    7b54:	4298      	cmp	r0, r3
    7b56:	f240 8102 	bls.w	7d5e <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7b5a:	1ac3      	subs	r3, r0, r3
    7b5c:	499e      	ldr	r1, [pc, #632]	; (7dd8 <set_arm_clock+0x29c>)
    7b5e:	0a1b      	lsrs	r3, r3, #8
    7b60:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7b64:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7b68:	09db      	lsrs	r3, r3, #7
    7b6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7b6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7b72:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7b76:	428b      	cmp	r3, r1
    7b78:	bf28      	it	cs
    7b7a:	460b      	movcs	r3, r1
    7b7c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    7b80:	4b96      	ldr	r3, [pc, #600]	; (7ddc <set_arm_clock+0x2a0>)
    7b82:	fba3 3707 	umull	r3, r7, r3, r7
    7b86:	08ff      	lsrs	r7, r7, #3
    7b88:	e004      	b.n	7b94 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    7b8a:	4f95      	ldr	r7, [pc, #596]	; (7de0 <set_arm_clock+0x2a4>)
    7b8c:	42b8      	cmp	r0, r7
    7b8e:	bf8c      	ite	hi
    7b90:	270e      	movhi	r7, #14
    7b92:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7b94:	498d      	ldr	r1, [pc, #564]	; (7dcc <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7b96:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7b9a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7b9e:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7ba0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    7ba4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7ba8:	d20c      	bcs.n	7bc4 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7baa:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7bae:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7bb2:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    7bb6:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7bba:	680b      	ldr	r3, [r1, #0]
    7bbc:	2b00      	cmp	r3, #0
    7bbe:	dafc      	bge.n	7bba <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7bc0:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    7bc4:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    7bc8:	d124      	bne.n	7c14 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    7bca:	4986      	ldr	r1, [pc, #536]	; (7de4 <set_arm_clock+0x2a8>)
    7bcc:	690c      	ldr	r4, [r1, #16]
    7bce:	4986      	ldr	r1, [pc, #536]	; (7de8 <set_arm_clock+0x2ac>)
    7bd0:	43a1      	bics	r1, r4
    7bd2:	f000 80ea 	beq.w	7daa <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7bd6:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    7bda:	4634      	mov	r4, r6
    7bdc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7be0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    7be4:	d004      	beq.n	7bf0 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    7be6:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    7bea:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    7bec:	4b77      	ldr	r3, [pc, #476]	; (7dcc <set_arm_clock+0x290>)
    7bee:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7bf0:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    7bf4:	d007      	beq.n	7c06 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    7bf6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    7bfa:	4974      	ldr	r1, [pc, #464]	; (7dcc <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    7bfc:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    7bfe:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    7c00:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    7c02:	071a      	lsls	r2, r3, #28
    7c04:	d4fc      	bmi.n	7c00 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    7c06:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    7c0a:	4a70      	ldr	r2, [pc, #448]	; (7dcc <set_arm_clock+0x290>)
    7c0c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7c0e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7c10:	069b      	lsls	r3, r3, #26
    7c12:	d4fc      	bmi.n	7c0e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    7c14:	4c75      	ldr	r4, [pc, #468]	; (7dec <set_arm_clock+0x2b0>)
    7c16:	42a0      	cmp	r0, r4
    7c18:	f200 80ce 	bhi.w	7db8 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    7c1c:	f04f 0c01 	mov.w	ip, #1
    7c20:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    7c22:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    7c24:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    7c28:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    7c2c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7c30:	42a2      	cmp	r2, r4
    7c32:	d818      	bhi.n	7c66 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    7c34:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    7c38:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    7c3c:	f040 808d 	bne.w	7d5a <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    7c40:	f1bc 0f04 	cmp.w	ip, #4
    7c44:	f200 8091 	bhi.w	7d6a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    7c48:	180a      	adds	r2, r1, r0
    7c4a:	42a2      	cmp	r2, r4
    7c4c:	f200 80a4 	bhi.w	7d98 <set_arm_clock+0x25c>
    7c50:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    7c54:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    7c56:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7c5a:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    7c5e:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7c62:	42a2      	cmp	r2, r4
    7c64:	d9e6      	bls.n	7c34 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7c66:	f10c 31ff 	add.w	r1, ip, #4294967295
    7c6a:	028c      	lsls	r4, r1, #10
    7c6c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7c70:	485f      	ldr	r0, [pc, #380]	; (7df0 <set_arm_clock+0x2b4>)
    7c72:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    7c74:	4a5f      	ldr	r2, [pc, #380]	; (7df4 <set_arm_clock+0x2b8>)
    7c76:	4290      	cmp	r0, r2
    7c78:	d97f      	bls.n	7d7a <set_arm_clock+0x23e>
    7c7a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 7e20 <set_arm_clock+0x2e4>
    7c7e:	226c      	movs	r2, #108	; 0x6c
    7c80:	485d      	ldr	r0, [pc, #372]	; (7df8 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7c82:	4d58      	ldr	r5, [pc, #352]	; (7de4 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    7c84:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7c88:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    7c8c:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7c90:	f8df c190 	ldr.w	ip, [pc, #400]	; 7e24 <set_arm_clock+0x2e8>
    7c94:	ea0e 0c0c 	and.w	ip, lr, ip
    7c98:	45d4      	cmp	ip, sl
    7c9a:	d009      	beq.n	7cb0 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    7c9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    7ca0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    7ca4:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    7ca8:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    7caa:	682a      	ldr	r2, [r5, #0]
    7cac:	2a00      	cmp	r2, #0
    7cae:	dafc      	bge.n	7caa <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    7cb0:	4a46      	ldr	r2, [pc, #280]	; (7dcc <set_arm_clock+0x290>)
    7cb2:	6915      	ldr	r5, [r2, #16]
    7cb4:	f005 0507 	and.w	r5, r5, #7
    7cb8:	429d      	cmp	r5, r3
    7cba:	d003      	beq.n	7cc4 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    7cbc:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    7cbe:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7cc0:	03dd      	lsls	r5, r3, #15
    7cc2:	d4fc      	bmi.n	7cbe <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7cc4:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    7cc8:	d009      	beq.n	7cde <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    7cca:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7cce:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    7cd2:	4a3e      	ldr	r2, [pc, #248]	; (7dcc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7cd4:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    7cd6:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    7cd8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7cda:	0799      	lsls	r1, r3, #30
    7cdc:	d4fc      	bmi.n	7cd8 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7cde:	4947      	ldr	r1, [pc, #284]	; (7dfc <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    7ce0:	4a47      	ldr	r2, [pc, #284]	; (7e00 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7ce2:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    7ce4:	4291      	cmp	r1, r2
    7ce6:	d83c      	bhi.n	7d62 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7ce8:	4b46      	ldr	r3, [pc, #280]	; (7e04 <set_arm_clock+0x2c8>)
    7cea:	09c9      	lsrs	r1, r1, #7
    7cec:	fba3 3101 	umull	r3, r1, r3, r1
    7cf0:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    7cf2:	1e4b      	subs	r3, r1, #1
    7cf4:	021b      	lsls	r3, r3, #8
    7cf6:	ea86 0203 	eor.w	r2, r6, r3
    7cfa:	f412 7f40 	tst.w	r2, #768	; 0x300
    7cfe:	d006      	beq.n	7d0e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    7d00:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    7d08:	4a30      	ldr	r2, [pc, #192]	; (7dcc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7d0a:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    7d0c:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    7d0e:	4a2f      	ldr	r2, [pc, #188]	; (7dcc <set_arm_clock+0x290>)
    7d10:	6953      	ldr	r3, [r2, #20]
    7d12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    7d16:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7d18:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7d1a:	069b      	lsls	r3, r3, #26
    7d1c:	d4fc      	bmi.n	7d18 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7d1e:	4b3a      	ldr	r3, [pc, #232]	; (7e08 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7d20:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7d22:	fba3 2300 	umull	r2, r3, r3, r0
    7d26:	f04f 32ff 	mov.w	r2, #4294967295
    7d2a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    7d2e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7d32:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    7d36:	4a35      	ldr	r2, [pc, #212]	; (7e0c <set_arm_clock+0x2d0>)
    7d38:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    7d3a:	4a35      	ldr	r2, [pc, #212]	; (7e10 <set_arm_clock+0x2d4>)
    7d3c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7d3e:	4a35      	ldr	r2, [pc, #212]	; (7e14 <set_arm_clock+0x2d8>)
    7d40:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7d42:	d208      	bcs.n	7d56 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7d44:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7d48:	4a21      	ldr	r2, [pc, #132]	; (7dd0 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7d4a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    7d4e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7d50:	6813      	ldr	r3, [r2, #0]
    7d52:	2b00      	cmp	r3, #0
    7d54:	dafc      	bge.n	7d50 <set_arm_clock+0x214>
	}

	return frequency;
}
    7d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d5a:	4673      	mov	r3, lr
    7d5c:	e762      	b.n	7c24 <set_arm_clock+0xe8>
    7d5e:	2712      	movs	r7, #18
    7d60:	e718      	b.n	7b94 <set_arm_clock+0x58>
    7d62:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    7d66:	2104      	movs	r1, #4
    7d68:	e7c5      	b.n	7cf6 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7d6a:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7d6e:	4820      	ldr	r0, [pc, #128]	; (7df0 <set_arm_clock+0x2b4>)
    7d70:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7d72:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7d74:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7d76:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7d7a:	4a27      	ldr	r2, [pc, #156]	; (7e18 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7d7c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 7e28 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7d80:	fba2 2000 	umull	r2, r0, r2, r0
    7d84:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    7d86:	4825      	ldr	r0, [pc, #148]	; (7e1c <set_arm_clock+0x2e0>)
    7d88:	2a36      	cmp	r2, #54	; 0x36
    7d8a:	bf38      	it	cc
    7d8c:	2236      	movcc	r2, #54	; 0x36
    7d8e:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7d92:	ea42 0a0a 	orr.w	sl, r2, sl
    7d96:	e774      	b.n	7c82 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7d98:	ea4f 248c 	mov.w	r4, ip, lsl #10
    7d9c:	2300      	movs	r3, #0
    7d9e:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    7da2:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    7da6:	46ac      	mov	ip, r5
    7da8:	e762      	b.n	7c70 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7daa:	461d      	mov	r5, r3
    7dac:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    7db0:	4611      	mov	r1, r2
    7db2:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    7db6:	e713      	b.n	7be0 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    7db8:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    7dba:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7dbe:	4602      	mov	r2, r0
    7dc0:	4631      	mov	r1, r6
    7dc2:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    7dc4:	46e6      	mov	lr, ip
    7dc6:	e753      	b.n	7c70 <set_arm_clock+0x134>
    7dc8:	1f78a400 	.word	0x1f78a400
    7dcc:	400fc000 	.word	0x400fc000
    7dd0:	40080000 	.word	0x40080000
    7dd4:	23c34600 	.word	0x23c34600
    7dd8:	004cb223 	.word	0x004cb223
    7ddc:	51eb851f 	.word	0x51eb851f
    7de0:	016e3600 	.word	0x016e3600
    7de4:	400d8000 	.word	0x400d8000
    7de8:	80003040 	.word	0x80003040
    7dec:	269fb1ff 	.word	0x269fb1ff
    7df0:	005b8d80 	.word	0x005b8d80
    7df4:	4df67eff 	.word	0x4df67eff
    7df8:	4d3f6400 	.word	0x4d3f6400
    7dfc:	08f0d17f 	.word	0x08f0d17f
    7e00:	2cb4177f 	.word	0x2cb4177f
    7e04:	00e5109f 	.word	0x00e5109f
    7e08:	431bde83 	.word	0x431bde83
    7e0c:	200085d0 	.word	0x200085d0
    7e10:	200085cc 	.word	0x200085cc
    7e14:	2001e794 	.word	0x2001e794
    7e18:	165e9f81 	.word	0x165e9f81
    7e1c:	00b71b00 	.word	0x00b71b00
    7e20:	8000206c 	.word	0x8000206c
    7e24:	8001307f 	.word	0x8001307f
    7e28:	80002000 	.word	0x80002000

00007e2c <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    7e2c:	b900      	cbnz	r0, 7e30 <delay+0x4>
    7e2e:	4770      	bx	lr
{
    7e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7e34:	2101      	movs	r1, #1
    7e36:	4681      	mov	r9, r0
    7e38:	4c21      	ldr	r4, [pc, #132]	; (7ec0 <delay+0x94>)
    7e3a:	4d22      	ldr	r5, [pc, #136]	; (7ec4 <delay+0x98>)
    7e3c:	4e22      	ldr	r6, [pc, #136]	; (7ec8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7e3e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    7e42:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    7e44:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7e46:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	d1f7      	bne.n	7e3e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7e4e:	491f      	ldr	r1, [pc, #124]	; (7ecc <delay+0xa0>)
    7e50:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    7e52:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e56:	f8df a078 	ldr.w	sl, [pc, #120]	; 7ed0 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    7e5a:	1a1b      	subs	r3, r3, r0
    7e5c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    7e5e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e62:	f8da 2000 	ldr.w	r2, [sl]
    7e66:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    7e6a:	455a      	cmp	r2, fp
    7e6c:	bf94      	ite	ls
    7e6e:	4490      	addls	r8, r2
    7e70:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7e72:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    7e76:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    7e78:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7e7a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7e7e:	2b00      	cmp	r3, #0
    7e80:	d1f7      	bne.n	7e72 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7e82:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e84:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    7e88:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    7e8a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e8e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    7e92:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    7e96:	bf94      	ite	ls
    7e98:	4462      	addls	r2, ip
    7e9a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    7e9e:	eba2 0208 	sub.w	r2, r2, r8
    7ea2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    7ea6:	d306      	bcc.n	7eb6 <delay+0x8a>
			if (--msec == 0) return;
    7ea8:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    7eac:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    7eb0:	d1df      	bne.n	7e72 <delay+0x46>
}
    7eb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    7eb6:	f001 fb17 	bl	94e8 <yield>
		while ((micros() - start) >= 1000) {
    7eba:	4904      	ldr	r1, [pc, #16]	; (7ecc <delay+0xa0>)
    7ebc:	e7d9      	b.n	7e72 <delay+0x46>
    7ebe:	bf00      	nop
    7ec0:	2001ec58 	.word	0x2001ec58
    7ec4:	2001ec54 	.word	0x2001ec54
    7ec8:	2001ec50 	.word	0x2001ec50
    7ecc:	e0001000 	.word	0xe0001000
    7ed0:	2001e794 	.word	0x2001e794

00007ed4 <micros>:
{
    7ed4:	b430      	push	{r4, r5}
    7ed6:	4b0f      	ldr	r3, [pc, #60]	; (7f14 <micros+0x40>)
    7ed8:	f04f 0c01 	mov.w	ip, #1
    7edc:	4d0e      	ldr	r5, [pc, #56]	; (7f18 <micros+0x44>)
    7ede:	4c0f      	ldr	r4, [pc, #60]	; (7f1c <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7ee0:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    7ee4:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    7ee6:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7ee8:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    7eec:	2a00      	cmp	r2, #0
    7eee:	d1f7      	bne.n	7ee0 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7ef0:	4b0b      	ldr	r3, [pc, #44]	; (7f20 <micros+0x4c>)
    7ef2:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7ef4:	4a0b      	ldr	r2, [pc, #44]	; (7f24 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    7ef6:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    7ef8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7efc:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    7efe:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f02:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    7f06:	bc30      	pop	{r4, r5}
    7f08:	428a      	cmp	r2, r1
    7f0a:	bf94      	ite	ls
    7f0c:	1880      	addls	r0, r0, r2
    7f0e:	1840      	addhi	r0, r0, r1
    7f10:	4770      	bx	lr
    7f12:	bf00      	nop
    7f14:	2001ec58 	.word	0x2001ec58
    7f18:	2001ec54 	.word	0x2001ec54
    7f1c:	2001ec50 	.word	0x2001ec50
    7f20:	e0001000 	.word	0xe0001000
    7f24:	2001e794 	.word	0x2001e794

00007f28 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    7f28:	2836      	cmp	r0, #54	; 0x36
    7f2a:	d816      	bhi.n	7f5a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    7f2c:	0102      	lsls	r2, r0, #4
    7f2e:	4b10      	ldr	r3, [pc, #64]	; (7f70 <digitalWrite+0x48>)
    7f30:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    7f34:	589b      	ldr	r3, [r3, r2]
{
    7f36:	b410      	push	{r4}
	mask = p->mask;
    7f38:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    7f3a:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    7f3c:	4214      	tst	r4, r2
    7f3e:	d005      	beq.n	7f4c <digitalWrite+0x24>
		if (val) {
    7f40:	b961      	cbnz	r1, 7f5c <digitalWrite+0x34>
		}
	}
}
    7f42:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    7f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    7f4a:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7f4c:	6883      	ldr	r3, [r0, #8]
		if (val) {
    7f4e:	b151      	cbz	r1, 7f66 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7f50:	4a08      	ldr	r2, [pc, #32]	; (7f74 <digitalWrite+0x4c>)
}
    7f52:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7f56:	601a      	str	r2, [r3, #0]
}
    7f58:	4770      	bx	lr
    7f5a:	4770      	bx	lr
    7f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    7f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    7f64:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    7f66:	4a04      	ldr	r2, [pc, #16]	; (7f78 <digitalWrite+0x50>)
}
    7f68:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    7f6c:	601a      	str	r2, [r3, #0]
}
    7f6e:	4770      	bx	lr
    7f70:	200076b0 	.word	0x200076b0
    7f74:	0001f038 	.word	0x0001f038
    7f78:	00013038 	.word	0x00013038

00007f7c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    7f7c:	2836      	cmp	r0, #54	; 0x36
    7f7e:	d829      	bhi.n	7fd4 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    7f80:	4b16      	ldr	r3, [pc, #88]	; (7fdc <pinMode+0x60>)
    7f82:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    7f84:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    7f86:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    7f8a:	589a      	ldr	r2, [r3, r2]
{
    7f8c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    7f8e:	6853      	ldr	r3, [r2, #4]
    7f90:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    7f92:	d00e      	beq.n	7fb2 <pinMode+0x36>
    7f94:	2904      	cmp	r1, #4
    7f96:	d00c      	beq.n	7fb2 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    7f98:	ea23 0304 	bic.w	r3, r3, r4
    7f9c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    7f9e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    7fa0:	b1a9      	cbz	r1, 7fce <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    7fa2:	2902      	cmp	r1, #2
    7fa4:	d017      	beq.n	7fd6 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    7fa6:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    7fa8:	bf0c      	ite	eq
    7faa:	4a0d      	ldreq	r2, [pc, #52]	; (7fe0 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    7fac:	4a0d      	ldrne	r2, [pc, #52]	; (7fe4 <pinMode+0x68>)
    7fae:	601a      	str	r2, [r3, #0]
    7fb0:	e007      	b.n	7fc2 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    7fb2:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    7fb4:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    7fb6:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    7fb8:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    7fba:	d008      	beq.n	7fce <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    7fbc:	f640 0238 	movw	r2, #2104	; 0x838
    7fc0:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    7fc2:	6843      	ldr	r3, [r0, #4]
    7fc4:	2215      	movs	r2, #21
}
    7fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    7fca:	601a      	str	r2, [r3, #0]
}
    7fcc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    7fce:	2238      	movs	r2, #56	; 0x38
    7fd0:	601a      	str	r2, [r3, #0]
    7fd2:	e7f6      	b.n	7fc2 <pinMode+0x46>
    7fd4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7fd6:	4a04      	ldr	r2, [pc, #16]	; (7fe8 <pinMode+0x6c>)
    7fd8:	601a      	str	r2, [r3, #0]
    7fda:	e7f2      	b.n	7fc2 <pinMode+0x46>
    7fdc:	200076b0 	.word	0x200076b0
    7fe0:	00013038 	.word	0x00013038
    7fe4:	00010038 	.word	0x00010038
    7fe8:	0001f038 	.word	0x0001f038

00007fec <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    7fec:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    7fee:	f7f8 f99b 	bl	328 <setup>
	while (1) {
		loop();
    7ff2:	f7f8 f839 	bl	68 <loop>
		yield();
    7ff6:	f001 fa77 	bl	94e8 <yield>
	while (1) {
    7ffa:	e7fa      	b.n	7ff2 <main+0x6>

00007ffc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    7ffc:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    7ffe:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8002:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8006:	d16d      	bne.n	80e4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8008:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    800a:	d341      	bcc.n	8090 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    800c:	f851 3b04 	ldr.w	r3, [r1], #4
    8010:	f840 3b04 	str.w	r3, [r0], #4
    8014:	f851 3b04 	ldr.w	r3, [r1], #4
    8018:	f840 3b04 	str.w	r3, [r0], #4
    801c:	f851 3b04 	ldr.w	r3, [r1], #4
    8020:	f840 3b04 	str.w	r3, [r0], #4
    8024:	f851 3b04 	ldr.w	r3, [r1], #4
    8028:	f840 3b04 	str.w	r3, [r0], #4
    802c:	f851 3b04 	ldr.w	r3, [r1], #4
    8030:	f840 3b04 	str.w	r3, [r0], #4
    8034:	f851 3b04 	ldr.w	r3, [r1], #4
    8038:	f840 3b04 	str.w	r3, [r0], #4
    803c:	f851 3b04 	ldr.w	r3, [r1], #4
    8040:	f840 3b04 	str.w	r3, [r0], #4
    8044:	f851 3b04 	ldr.w	r3, [r1], #4
    8048:	f840 3b04 	str.w	r3, [r0], #4
    804c:	f851 3b04 	ldr.w	r3, [r1], #4
    8050:	f840 3b04 	str.w	r3, [r0], #4
    8054:	f851 3b04 	ldr.w	r3, [r1], #4
    8058:	f840 3b04 	str.w	r3, [r0], #4
    805c:	f851 3b04 	ldr.w	r3, [r1], #4
    8060:	f840 3b04 	str.w	r3, [r0], #4
    8064:	f851 3b04 	ldr.w	r3, [r1], #4
    8068:	f840 3b04 	str.w	r3, [r0], #4
    806c:	f851 3b04 	ldr.w	r3, [r1], #4
    8070:	f840 3b04 	str.w	r3, [r0], #4
    8074:	f851 3b04 	ldr.w	r3, [r1], #4
    8078:	f840 3b04 	str.w	r3, [r0], #4
    807c:	f851 3b04 	ldr.w	r3, [r1], #4
    8080:	f840 3b04 	str.w	r3, [r0], #4
    8084:	f851 3b04 	ldr.w	r3, [r1], #4
    8088:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    808c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    808e:	d2bd      	bcs.n	800c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8090:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8092:	d311      	bcc.n	80b8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8094:	f851 3b04 	ldr.w	r3, [r1], #4
    8098:	f840 3b04 	str.w	r3, [r0], #4
    809c:	f851 3b04 	ldr.w	r3, [r1], #4
    80a0:	f840 3b04 	str.w	r3, [r0], #4
    80a4:	f851 3b04 	ldr.w	r3, [r1], #4
    80a8:	f840 3b04 	str.w	r3, [r0], #4
    80ac:	f851 3b04 	ldr.w	r3, [r1], #4
    80b0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    80b4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    80b6:	d2ed      	bcs.n	8094 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    80b8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    80ba:	d305      	bcc.n	80c8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    80bc:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    80c0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    80c4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    80c6:	d2f9      	bcs.n	80bc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    80c8:	3204      	adds	r2, #4
	beq	.Ldone
    80ca:	d008      	beq.n	80de <memcpy+0xe2>

	lsls	r2, r2, #31
    80cc:	07d2      	lsls	r2, r2, #31
	itt ne
    80ce:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    80d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    80d4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    80d8:	d301      	bcc.n	80de <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    80da:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    80dc:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    80de:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    80e0:	4770      	bx	lr
    80e2:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    80e4:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    80e6:	d313      	bcc.n	8110 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    80e8:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    80ea:	d08d      	beq.n	8008 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    80ec:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    80f0:	d08a      	beq.n	8008 <memcpy+0xc>

	rsb	r3, #4
    80f2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    80f6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    80f8:	07db      	lsls	r3, r3, #31
	itt ne
    80fa:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    80fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8100:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8104:	d380      	bcc.n	8008 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    8106:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    810a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    810e:	e77b      	b.n	8008 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8110:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    8112:	d3d9      	bcc.n	80c8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8114:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    8116:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    811a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    811e:	d2f9      	bcs.n	8114 <memcpy+0x118>

	ldrb	r3, [r1]
    8120:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8122:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8124:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8126:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8128:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    812a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    812c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    812e:	4770      	bx	lr

00008130 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    8130:	f001 bd00 	b.w	9b34 <free>

00008134 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    8134:	f101 3cff 	add.w	ip, r1, #4294967295
{
    8138:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    813a:	4666      	mov	r6, ip
	int i=0, j;
    813c:	2400      	movs	r4, #0
    813e:	e000      	b.n	8142 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    8140:	3401      	adds	r4, #1
		digit = val % radix;
    8142:	fbb0 f5f2 	udiv	r5, r0, r2
    8146:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    814a:	2b09      	cmp	r3, #9
    814c:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    8150:	f103 0330 	add.w	r3, r3, #48	; 0x30
    8154:	fa5f fe8e 	uxtb.w	lr, lr
    8158:	bf98      	it	ls
    815a:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    815e:	4290      	cmp	r0, r2
		val /= radix;
    8160:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8162:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    8166:	d2eb      	bcs.n	8140 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    8168:	1c63      	adds	r3, r4, #1
    816a:	2200      	movs	r2, #0
    816c:	18c8      	adds	r0, r1, r3
    816e:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    8170:	b17c      	cbz	r4, 8192 <ultoa+0x5e>
		t = buf[j];
    8172:	4662      	mov	r2, ip
    8174:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    8178:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    817c:	eba1 030c 	sub.w	r3, r1, ip
    8180:	3202      	adds	r2, #2
		buf[j] = buf[i];
    8182:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    8186:	3b01      	subs	r3, #1
    8188:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    818a:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    818c:	4423      	add	r3, r4
    818e:	429a      	cmp	r2, r3
    8190:	dbef      	blt.n	8172 <ultoa+0x3e>
	}
	return buf;
}
    8192:	4608      	mov	r0, r1
    8194:	bd70      	pop	{r4, r5, r6, pc}
    8196:	bf00      	nop

00008198 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    8198:	4a07      	ldr	r2, [pc, #28]	; (81b8 <rtc_get+0x20>)
    819a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    819c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    819e:	4619      	mov	r1, r3
    81a0:	4684      	mov	ip, r0
    81a2:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    81a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    81a6:	4299      	cmp	r1, r3
    81a8:	d1f9      	bne.n	819e <rtc_get+0x6>
    81aa:	4584      	cmp	ip, r0
    81ac:	d1f7      	bne.n	819e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    81ae:	0bdb      	lsrs	r3, r3, #15
}
    81b0:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    81b4:	4770      	bx	lr
    81b6:	bf00      	nop
    81b8:	400d4000 	.word	0x400d4000

000081bc <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    81bc:	4910      	ldr	r1, [pc, #64]	; (8200 <rtc_set+0x44>)
    81be:	688b      	ldr	r3, [r1, #8]
    81c0:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    81c4:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    81c6:	688b      	ldr	r3, [r1, #8]
    81c8:	07db      	lsls	r3, r3, #31
    81ca:	d4fc      	bmi.n	81c6 <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    81cc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    81ce:	4a0c      	ldr	r2, [pc, #48]	; (8200 <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    81d0:	f023 0301 	bic.w	r3, r3, #1
    81d4:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    81d6:	6b93      	ldr	r3, [r2, #56]	; 0x38
    81d8:	07d9      	lsls	r1, r3, #31
    81da:	d4fc      	bmi.n	81d6 <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    81dc:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    81de:	4908      	ldr	r1, [pc, #32]	; (8200 <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    81e0:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    81e2:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    81e4:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    81e6:	6b93      	ldr	r3, [r2, #56]	; 0x38
    81e8:	f043 0301 	orr.w	r3, r3, #1
    81ec:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    81ee:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    81f0:	07db      	lsls	r3, r3, #31
    81f2:	d5fc      	bpl.n	81ee <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    81f4:	688b      	ldr	r3, [r1, #8]
    81f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    81fa:	608b      	str	r3, [r1, #8]
}
    81fc:	4770      	bx	lr
    81fe:	bf00      	nop
    8200:	400d4000 	.word	0x400d4000

00008204 <unused_interrupt_vector>:
	__disable_irq();
    8204:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    8206:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    820a:	4c4f      	ldr	r4, [pc, #316]	; (8348 <unused_interrupt_vector+0x144>)
    820c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    8210:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    8214:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    8218:	4e4c      	ldr	r6, [pc, #304]	; (834c <unused_interrupt_vector+0x148>)
	while (p < end) {
    821a:	4d4d      	ldr	r5, [pc, #308]	; (8350 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    821c:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    8220:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    8224:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    8228:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    822c:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    8230:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    8234:	6993      	ldr	r3, [r2, #24]
    8236:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    823a:	69d3      	ldr	r3, [r2, #28]
    823c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    8240:	f000 f8d0 	bl	83e4 <tempmonGetTemp>
    8244:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    8248:	f7ff ffa6 	bl	8198 <rtc_get>
	info->len = sizeof(*info) / 4;
    824c:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    824e:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    8252:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    8256:	460b      	mov	r3, r1
    8258:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    825c:	493d      	ldr	r1, [pc, #244]	; (8354 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    825e:	1d30      	adds	r0, r6, #4
    8260:	405a      	eors	r2, r3
    8262:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8264:	f002 0301 	and.w	r3, r2, #1
    8268:	3c01      	subs	r4, #1
    826a:	fb01 f303 	mul.w	r3, r1, r3
    826e:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    8272:	d1f7      	bne.n	8264 <unused_interrupt_vector+0x60>
	while (p < end) {
    8274:	42a8      	cmp	r0, r5
    8276:	d002      	beq.n	827e <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    8278:	6873      	ldr	r3, [r6, #4]
    827a:	4606      	mov	r6, r0
    827c:	e7ef      	b.n	825e <unused_interrupt_vector+0x5a>
	info->crc = crc;
    827e:	4b32      	ldr	r3, [pc, #200]	; (8348 <unused_interrupt_vector+0x144>)
    8280:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    8284:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8288:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    828c:	492f      	ldr	r1, [pc, #188]	; (834c <unused_interrupt_vector+0x148>)
    828e:	4a32      	ldr	r2, [pc, #200]	; (8358 <unused_interrupt_vector+0x154>)
    8290:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    8294:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    8298:	f3bf 8f4f 	dsb	sy
	asm("isb");
    829c:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    82a0:	4a2e      	ldr	r2, [pc, #184]	; (835c <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    82a2:	2502      	movs	r5, #2
    82a4:	482e      	ldr	r0, [pc, #184]	; (8360 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    82a6:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    82a8:	492e      	ldr	r1, [pc, #184]	; (8364 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    82aa:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    82ae:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    82b0:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    82b2:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    82b4:	482c      	ldr	r0, [pc, #176]	; (8368 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    82b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    82ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    82be:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    82c0:	680b      	ldr	r3, [r1, #0]
    82c2:	4283      	cmp	r3, r0
    82c4:	d83d      	bhi.n	8342 <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    82c6:	4d26      	ldr	r5, [pc, #152]	; (8360 <unused_interrupt_vector+0x15c>)
    82c8:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    82ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    82ce:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    82d2:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    82d4:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    82d6:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    82da:	4924      	ldr	r1, [pc, #144]	; (836c <unused_interrupt_vector+0x168>)
    82dc:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    82e0:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    82e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    82e8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    82ec:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    82f0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    82f4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    82f8:	e001      	b.n	82fe <unused_interrupt_vector+0xfa>
		usb_isr();
    82fa:	f000 f965 	bl	85c8 <usb_isr>
		if (PIT_TFLG0) {
    82fe:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    8302:	2b00      	cmp	r3, #0
    8304:	d0f9      	beq.n	82fa <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    8306:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    8308:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    830c:	2c4f      	cmp	r4, #79	; 0x4f
    830e:	d9f4      	bls.n	82fa <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8310:	4b17      	ldr	r3, [pc, #92]	; (8370 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    8312:	2002      	movs	r0, #2
    8314:	4917      	ldr	r1, [pc, #92]	; (8374 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8316:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    831a:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    831e:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8320:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    8324:	b93b      	cbnz	r3, 8336 <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    8326:	4814      	ldr	r0, [pc, #80]	; (8378 <unused_interrupt_vector+0x174>)
    8328:	4914      	ldr	r1, [pc, #80]	; (837c <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    832a:	4a0d      	ldr	r2, [pc, #52]	; (8360 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    832c:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    832e:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    8332:	2b00      	cmp	r3, #0
    8334:	d0fa      	beq.n	832c <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    8336:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    833a:	4a11      	ldr	r2, [pc, #68]	; (8380 <unused_interrupt_vector+0x17c>)
    833c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    8340:	e7fe      	b.n	8340 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8342:	f7ff fbfb 	bl	7b3c <set_arm_clock>
    8346:	e7be      	b.n	82c6 <unused_interrupt_vector+0xc2>
    8348:	2027ff00 	.word	0x2027ff00
    834c:	2027ff80 	.word	0x2027ff80
    8350:	2027ffa8 	.word	0x2027ffa8
    8354:	edb88320 	.word	0xedb88320
    8358:	2027ffa0 	.word	0x2027ffa0
    835c:	400fc000 	.word	0x400fc000
    8360:	40084000 	.word	0x40084000
    8364:	200085d0 	.word	0x200085d0
    8368:	0bcd3d80 	.word	0x0bcd3d80
    836c:	00249f00 	.word	0x00249f00
    8370:	400d9000 	.word	0x400d9000
    8374:	402e0000 	.word	0x402e0000
    8378:	400f8000 	.word	0x400f8000
    837c:	0bad00f1 	.word	0x0bad00f1
    8380:	05fa0004 	.word	0x05fa0004

00008384 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    8384:	490a      	ldr	r1, [pc, #40]	; (83b0 <_sbrk+0x2c>)
    8386:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    8388:	b138      	cbz	r0, 839a <_sbrk+0x16>
{
    838a:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    838c:	1813      	adds	r3, r2, r0
    838e:	4809      	ldr	r0, [pc, #36]	; (83b4 <_sbrk+0x30>)
    8390:	4283      	cmp	r3, r0
    8392:	d804      	bhi.n	839e <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    8394:	4610      	mov	r0, r2
                __brkval = prev + incr;
    8396:	600b      	str	r3, [r1, #0]
}
    8398:	bd08      	pop	{r3, pc}
    839a:	4610      	mov	r0, r2
    839c:	4770      	bx	lr
                        errno = ENOMEM;
    839e:	f003 fc2f 	bl	bc00 <__errno>
    83a2:	230c      	movs	r3, #12
                        return (void *)-1;
    83a4:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    83a8:	6003      	str	r3, [r0, #0]
}
    83aa:	4610      	mov	r0, r2
    83ac:	bd08      	pop	{r3, pc}
    83ae:	bf00      	nop
    83b0:	200085ec 	.word	0x200085ec
    83b4:	20280000 	.word	0x20280000

000083b8 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    83b8:	2000      	movs	r0, #0
    83ba:	4770      	bx	lr

000083bc <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    83bc:	f04f 30ff 	mov.w	r0, #4294967295
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop

000083c4 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    83c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    83c8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    83ca:	604b      	str	r3, [r1, #4]
}
    83cc:	4770      	bx	lr
    83ce:	bf00      	nop

000083d0 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    83d0:	2001      	movs	r0, #1
    83d2:	4770      	bx	lr

000083d4 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    83d4:	f04f 30ff 	mov.w	r0, #4294967295
    83d8:	4770      	bx	lr
    83da:	bf00      	nop

000083dc <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    83dc:	bf30      	wfi
    83de:	e7fd      	b.n	83dc <abort>

000083e0 <Panic_Temp_isr>:
  unused_interrupt_vector();
    83e0:	f7ff bf10 	b.w	8204 <unused_interrupt_vector>

000083e4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    83e4:	4a12      	ldr	r2, [pc, #72]	; (8430 <tempmonGetTemp+0x4c>)
    83e6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    83ea:	075b      	lsls	r3, r3, #29
    83ec:	d5fb      	bpl.n	83e6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    83ee:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    83f2:	4810      	ldr	r0, [pc, #64]	; (8434 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    83f4:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    83f8:	490f      	ldr	r1, [pc, #60]	; (8438 <tempmonGetTemp+0x54>)
    83fa:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    83fe:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8402:	ed91 6a00 	vldr	s12, [r1]
    8406:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    840a:	4a0c      	ldr	r2, [pc, #48]	; (843c <tempmonGetTemp+0x58>)
    840c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8410:	4b0b      	ldr	r3, [pc, #44]	; (8440 <tempmonGetTemp+0x5c>)
    8412:	edd2 6a00 	vldr	s13, [r2]
    8416:	ee77 7ac7 	vsub.f32	s15, s15, s14
    841a:	ed93 7a00 	vldr	s14, [r3]
    841e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    8422:	ee67 7a86 	vmul.f32	s15, s15, s12
    8426:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    842a:	ee37 0a40 	vsub.f32	s0, s14, s0
    842e:	4770      	bx	lr
    8430:	400d8100 	.word	0x400d8100
    8434:	2001e784 	.word	0x2001e784
    8438:	2001e78c 	.word	0x2001e78c
    843c:	2001e790 	.word	0x2001e790
    8440:	2001e788 	.word	0x2001e788

00008444 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8444:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    8446:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    8448:	b11b      	cbz	r3, 8452 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    844a:	6853      	ldr	r3, [r2, #4]
    844c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8450:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    8452:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    8454:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    8456:	b33c      	cbz	r4, 84a8 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8458:	4b1a      	ldr	r3, [pc, #104]	; (84c4 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    845a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    845c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8460:	420c      	tst	r4, r1
    8462:	d11d      	bne.n	84a0 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    8464:	4e18      	ldr	r6, [pc, #96]	; (84c8 <schedule_transfer+0x84>)
    8466:	6877      	ldr	r7, [r6, #4]
    8468:	e004      	b.n	8474 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    846a:	6874      	ldr	r4, [r6, #4]
    846c:	1be4      	subs	r4, r4, r7
    846e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    8472:	d20b      	bcs.n	848c <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    8474:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8478:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    847c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8480:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8484:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8488:	0464      	lsls	r4, r4, #17
    848a:	d5ee      	bpl.n	846a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    848c:	400d      	ands	r5, r1
    848e:	d107      	bne.n	84a0 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    8490:	4c0c      	ldr	r4, [pc, #48]	; (84c4 <schedule_transfer+0x80>)
		endpoint->status = 0;
    8492:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    8496:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    849a:	430b      	orrs	r3, r1
    849c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    84a0:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    84a2:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    84a4:	bcf0      	pop	{r4, r5, r6, r7}
    84a6:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    84a8:	4d06      	ldr	r5, [pc, #24]	; (84c4 <schedule_transfer+0x80>)
	endpoint->status = 0;
    84aa:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    84ae:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    84b2:	430b      	orrs	r3, r1
    84b4:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    84b8:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    84ba:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    84bc:	b662      	cpsie	i
}
    84be:	bcf0      	pop	{r4, r5, r6, r7}
    84c0:	4770      	bx	lr
    84c2:	bf00      	nop
    84c4:	402e0000 	.word	0x402e0000
    84c8:	e0001000 	.word	0xe0001000

000084cc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    84cc:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    84ce:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    84d0:	b19d      	cbz	r5, 84fa <run_callbacks+0x2e>
    84d2:	4606      	mov	r6, r0
    84d4:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    84d6:	2400      	movs	r4, #0
    84d8:	e003      	b.n	84e2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    84da:	6812      	ldr	r2, [r2, #0]
		count++;
    84dc:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    84de:	2a01      	cmp	r2, #1
    84e0:	d00c      	beq.n	84fc <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    84e2:	6853      	ldr	r3, [r2, #4]
    84e4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    84e8:	d0f7      	beq.n	84da <run_callbacks+0xe>
			ep->first_transfer = t;
    84ea:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    84ec:	b12c      	cbz	r4, 84fa <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    84ee:	4628      	mov	r0, r5
		ep->callback_function(first);
    84f0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    84f2:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    84f4:	4798      	blx	r3
	while (count) {
    84f6:	3c01      	subs	r4, #1
    84f8:	d1f9      	bne.n	84ee <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    84fa:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    84fc:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    8500:	e7f4      	b.n	84ec <run_callbacks+0x20>
    8502:	bf00      	nop

00008504 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8504:	b430      	push	{r4, r5}
	if (len > 0) {
    8506:	b9d9      	cbnz	r1, 8540 <endpoint0_transmit.constprop.0+0x3c>
    8508:	4c1f      	ldr	r4, [pc, #124]	; (8588 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    850a:	4b20      	ldr	r3, [pc, #128]	; (858c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    850c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    850e:	4a20      	ldr	r2, [pc, #128]	; (8590 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    8510:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8512:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    8516:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8518:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    851a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    851e:	2480      	movs	r4, #128	; 0x80
    8520:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8522:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    8526:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    852a:	481a      	ldr	r0, [pc, #104]	; (8594 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    852c:	432b      	orrs	r3, r5
    852e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8532:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    8534:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8538:	2b00      	cmp	r3, #0
    853a:	d1fb      	bne.n	8534 <endpoint0_transmit.constprop.0+0x30>
}
    853c:	bc30      	pop	{r4, r5}
    853e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8540:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    8542:	4b15      	ldr	r3, [pc, #84]	; (8598 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8544:	4c10      	ldr	r4, [pc, #64]	; (8588 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    8546:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8548:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    854c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    854e:	4a10      	ldr	r2, [pc, #64]	; (8590 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8550:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8552:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    8556:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8558:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    855a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    855e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8560:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8562:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8566:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    856a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    856c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    856e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    8570:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    8572:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    857a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    857e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8582:	2b00      	cmp	r3, #0
    8584:	d1fb      	bne.n	857e <endpoint0_transmit.constprop.0+0x7a>
    8586:	e7c0      	b.n	850a <endpoint0_transmit.constprop.0+0x6>
    8588:	20000000 	.word	0x20000000
    858c:	20008ec0 	.word	0x20008ec0
    8590:	402e0000 	.word	0x402e0000
    8594:	2001e62c 	.word	0x2001e62c
    8598:	20008ee0 	.word	0x20008ee0

0000859c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    859c:	4908      	ldr	r1, [pc, #32]	; (85c0 <usb_stop_sof_interrupts+0x24>)
    859e:	2201      	movs	r2, #1
    85a0:	780b      	ldrb	r3, [r1, #0]
    85a2:	fa02 f000 	lsl.w	r0, r2, r0
    85a6:	ea23 0000 	bic.w	r0, r3, r0
    85aa:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    85ac:	b930      	cbnz	r0, 85bc <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    85ae:	4a05      	ldr	r2, [pc, #20]	; (85c4 <usb_stop_sof_interrupts+0x28>)
    85b0:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    85b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    85b8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    85bc:	4770      	bx	lr
    85be:	bf00      	nop
    85c0:	2001ec9e 	.word	0x2001ec9e
    85c4:	402e0000 	.word	0x402e0000

000085c8 <usb_isr>:
{
    85c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    85cc:	4c97      	ldr	r4, [pc, #604]	; (882c <usb_isr+0x264>)
{
    85ce:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    85d0:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    85d4:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    85d6:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    85da:	d553      	bpl.n	8684 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    85dc:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    85e0:	2a00      	cmp	r2, #0
    85e2:	d04a      	beq.n	867a <usb_isr+0xb2>
    85e4:	4e92      	ldr	r6, [pc, #584]	; (8830 <usb_isr+0x268>)
    85e6:	f8df a260 	ldr.w	sl, [pc, #608]	; 8848 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    85ea:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8860 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    85ee:	f8df b274 	ldr.w	fp, [pc, #628]	; 8864 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    85f2:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8868 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    85f6:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    85fa:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    85fe:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8602:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    8606:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    860a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    860e:	049d      	lsls	r5, r3, #18
    8610:	d5f5      	bpl.n	85fe <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8612:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    861a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    861e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8622:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    8626:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    862a:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    862e:	d1fa      	bne.n	8626 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    8630:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    8632:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    8634:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    8638:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    863c:	f000 81cf 	beq.w	89de <usb_isr+0x416>
    8640:	f200 80db 	bhi.w	87fa <usb_isr+0x232>
    8644:	f240 3102 	movw	r1, #770	; 0x302
    8648:	428b      	cmp	r3, r1
    864a:	f000 81e7 	beq.w	8a1c <usb_isr+0x454>
    864e:	f200 809a 	bhi.w	8786 <usb_isr+0x1be>
    8652:	2b82      	cmp	r3, #130	; 0x82
    8654:	f000 81cb 	beq.w	89ee <usb_isr+0x426>
    8658:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    865c:	f040 808a 	bne.w	8774 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    8660:	f010 0f78 	tst.w	r0, #120	; 0x78
    8664:	b283      	uxth	r3, r0
    8666:	f000 8203 	beq.w	8a70 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    866a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    866e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8672:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    8676:	2a00      	cmp	r2, #0
    8678:	d1bd      	bne.n	85f6 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    867a:	4a6c      	ldr	r2, [pc, #432]	; (882c <usb_isr+0x264>)
    867c:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    8680:	2b00      	cmp	r3, #0
    8682:	d142      	bne.n	870a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    8684:	067e      	lsls	r6, r7, #25
    8686:	d516      	bpl.n	86b6 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8688:	4b68      	ldr	r3, [pc, #416]	; (882c <usb_isr+0x264>)
    868a:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    868e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    8692:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    8696:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    869a:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    869e:	2c00      	cmp	r4, #0
    86a0:	d1fb      	bne.n	869a <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    86a2:	f04f 32ff 	mov.w	r2, #4294967295
    86a6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    86aa:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    86ae:	f000 fd29 	bl	9104 <usb_serial_reset>
		endpointN_notify_mask = 0;
    86b2:	4b60      	ldr	r3, [pc, #384]	; (8834 <usb_isr+0x26c>)
    86b4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    86b6:	01fc      	lsls	r4, r7, #7
    86b8:	d503      	bpl.n	86c2 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    86ba:	4b5f      	ldr	r3, [pc, #380]	; (8838 <usb_isr+0x270>)
    86bc:	681b      	ldr	r3, [r3, #0]
    86be:	b103      	cbz	r3, 86c2 <usb_isr+0xfa>
    86c0:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    86c2:	01b8      	lsls	r0, r7, #6
    86c4:	d503      	bpl.n	86ce <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    86c6:	4b5d      	ldr	r3, [pc, #372]	; (883c <usb_isr+0x274>)
    86c8:	681b      	ldr	r3, [r3, #0]
    86ca:	b103      	cbz	r3, 86ce <usb_isr+0x106>
    86cc:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    86ce:	0779      	lsls	r1, r7, #29
    86d0:	d508      	bpl.n	86e4 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    86d2:	4b56      	ldr	r3, [pc, #344]	; (882c <usb_isr+0x264>)
    86d4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    86d8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    86dc:	d047      	beq.n	876e <usb_isr+0x1a6>
			usb_high_speed = 1;
    86de:	4b58      	ldr	r3, [pc, #352]	; (8840 <usb_isr+0x278>)
    86e0:	2201      	movs	r2, #1
    86e2:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    86e4:	4b51      	ldr	r3, [pc, #324]	; (882c <usb_isr+0x264>)
    86e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    86ea:	061a      	lsls	r2, r3, #24
    86ec:	d50a      	bpl.n	8704 <usb_isr+0x13c>
    86ee:	063b      	lsls	r3, r7, #24
    86f0:	d508      	bpl.n	8704 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    86f2:	4a54      	ldr	r2, [pc, #336]	; (8844 <usb_isr+0x27c>)
    86f4:	7813      	ldrb	r3, [r2, #0]
    86f6:	b12b      	cbz	r3, 8704 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    86f8:	3b01      	subs	r3, #1
    86fa:	b2db      	uxtb	r3, r3
    86fc:	7013      	strb	r3, [r2, #0]
    86fe:	2b00      	cmp	r3, #0
    8700:	f000 8272 	beq.w	8be8 <usb_isr+0x620>
}
    8704:	b003      	add	sp, #12
    8706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    870a:	494f      	ldr	r1, [pc, #316]	; (8848 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    870c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    8710:	6808      	ldr	r0, [r1, #0]
    8712:	4203      	tst	r3, r0
    8714:	f040 81d1 	bne.w	8aba <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    8718:	4a46      	ldr	r2, [pc, #280]	; (8834 <usb_isr+0x26c>)
    871a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    871c:	401c      	ands	r4, r3
    871e:	d0b1      	beq.n	8684 <usb_isr+0xbc>
				while (tx) {
    8720:	ea5f 4814 	movs.w	r8, r4, lsr #16
    8724:	d010      	beq.n	8748 <usb_isr+0x180>
    8726:	4e42      	ldr	r6, [pc, #264]	; (8830 <usb_isr+0x268>)
					tx &= ~(1<<p);
    8728:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    872c:	fa98 f5a8 	rbit	r5, r8
    8730:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8734:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    8738:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    873c:	3040      	adds	r0, #64	; 0x40
    873e:	f7ff fec5 	bl	84cc <run_callbacks>
				while (tx) {
    8742:	ea38 0805 	bics.w	r8, r8, r5
    8746:	d1f1      	bne.n	872c <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    8748:	b2a4      	uxth	r4, r4
				while(rx) {
    874a:	2c00      	cmp	r4, #0
    874c:	d09a      	beq.n	8684 <usb_isr+0xbc>
    874e:	4e38      	ldr	r6, [pc, #224]	; (8830 <usb_isr+0x268>)
					rx &= ~(1<<p);
    8750:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    8754:	fa94 f5a4 	rbit	r5, r4
    8758:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    875c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    8760:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    8764:	f7ff feb2 	bl	84cc <run_callbacks>
				while(rx) {
    8768:	43ac      	bics	r4, r5
    876a:	d1f3      	bne.n	8754 <usb_isr+0x18c>
    876c:	e78a      	b.n	8684 <usb_isr+0xbc>
			usb_high_speed = 0;
    876e:	4a34      	ldr	r2, [pc, #208]	; (8840 <usb_isr+0x278>)
    8770:	7013      	strb	r3, [r2, #0]
    8772:	e7b7      	b.n	86e4 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    8774:	2b80      	cmp	r3, #128	; 0x80
    8776:	f47f af78 	bne.w	866a <usb_isr+0xa2>
		reply_buffer[0] = 0;
    877a:	4834      	ldr	r0, [pc, #208]	; (884c <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    877c:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    877e:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8780:	f7ff fec0 	bl	8504 <endpoint0_transmit.constprop.0>
		return;
    8784:	e775      	b.n	8672 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    8786:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    878a:	f000 810b 	beq.w	89a4 <usb_isr+0x3dc>
    878e:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    8792:	2b01      	cmp	r3, #1
    8794:	f63f af69 	bhi.w	866a <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8798:	4b2d      	ldr	r3, [pc, #180]	; (8850 <usb_isr+0x288>)
    879a:	685d      	ldr	r5, [r3, #4]
    879c:	2d00      	cmp	r5, #0
    879e:	f43f af64 	beq.w	866a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    87a2:	fa1f fc8c 	uxth.w	ip, ip
    87a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    87aa:	e004      	b.n	87b6 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    87ac:	691d      	ldr	r5, [r3, #16]
    87ae:	330c      	adds	r3, #12
    87b0:	2d00      	cmp	r5, #0
    87b2:	f43f af5a 	beq.w	866a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    87b6:	881a      	ldrh	r2, [r3, #0]
    87b8:	4572      	cmp	r2, lr
    87ba:	d1f7      	bne.n	87ac <usb_isr+0x1e4>
    87bc:	885a      	ldrh	r2, [r3, #2]
    87be:	4562      	cmp	r2, ip
    87c0:	d1f4      	bne.n	87ac <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    87c2:	ea4f 221e 	mov.w	r2, lr, lsr #8
    87c6:	2a03      	cmp	r2, #3
    87c8:	f000 81a5 	beq.w	8b16 <usb_isr+0x54e>
					datalen = list->length;
    87cc:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    87ce:	0c00      	lsrs	r0, r0, #16
    87d0:	4282      	cmp	r2, r0
    87d2:	bf28      	it	cs
    87d4:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    87d6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    87da:	f040 81a1 	bne.w	8b20 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    87de:	4b18      	ldr	r3, [pc, #96]	; (8840 <usb_isr+0x278>)
    87e0:	491c      	ldr	r1, [pc, #112]	; (8854 <usb_isr+0x28c>)
    87e2:	7818      	ldrb	r0, [r3, #0]
    87e4:	4b1c      	ldr	r3, [pc, #112]	; (8858 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    87e6:	9201      	str	r2, [sp, #4]
    87e8:	2800      	cmp	r0, #0
    87ea:	bf18      	it	ne
    87ec:	4619      	movne	r1, r3
    87ee:	481b      	ldr	r0, [pc, #108]	; (885c <usb_isr+0x294>)
    87f0:	f7ff fc04 	bl	7ffc <memcpy>
    87f4:	4d19      	ldr	r5, [pc, #100]	; (885c <usb_isr+0x294>)
    87f6:	9a01      	ldr	r2, [sp, #4]
    87f8:	e1e1      	b.n	8bbe <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    87fa:	f242 2121 	movw	r1, #8737	; 0x2221
    87fe:	428b      	cmp	r3, r1
    8800:	d07c      	beq.n	88fc <usb_isr+0x334>
    8802:	d933      	bls.n	886c <usb_isr+0x2a4>
    8804:	f242 3121 	movw	r1, #8993	; 0x2321
    8808:	428b      	cmp	r3, r1
    880a:	f000 8081 	beq.w	8910 <usb_isr+0x348>
    880e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    8812:	428b      	cmp	r3, r1
    8814:	f47f af29 	bne.w	866a <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    8818:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    881c:	b283      	uxth	r3, r0
    881e:	f47f af24 	bne.w	866a <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    8822:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    8826:	f363 0c0f 	bfi	ip, r3, #0, #16
    882a:	e7b5      	b.n	8798 <usb_isr+0x1d0>
    882c:	402e0000 	.word	0x402e0000
    8830:	20000000 	.word	0x20000000
    8834:	2001e630 	.word	0x2001e630
    8838:	2001ec78 	.word	0x2001ec78
    883c:	2001ec7c 	.word	0x2001ec7c
    8840:	2001eca4 	.word	0x2001eca4
    8844:	2001eca5 	.word	0x2001eca5
    8848:	2001e62c 	.word	0x2001e62c
    884c:	2001e74c 	.word	0x2001e74c
    8850:	20008400 	.word	0x20008400
    8854:	6000279c 	.word	0x6000279c
    8858:	60002800 	.word	0x60002800
    885c:	20200800 	.word	0x20200800
    8860:	2001e624 	.word	0x2001e624
    8864:	b8c6cf5d 	.word	0xb8c6cf5d
    8868:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    886c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8870:	d066      	beq.n	8940 <usb_isr+0x378>
    8872:	f242 0121 	movw	r1, #8225	; 0x2021
    8876:	428b      	cmp	r3, r1
    8878:	f47f aef7 	bne.w	866a <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    887c:	0c03      	lsrs	r3, r0, #16
    887e:	2b07      	cmp	r3, #7
    8880:	f47f aef3 	bne.w	866a <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    8884:	4bb2      	ldr	r3, [pc, #712]	; (8b50 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8886:	49b3      	ldr	r1, [pc, #716]	; (8b54 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    8888:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    888a:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    888c:	49b2      	ldr	r1, [pc, #712]	; (8b58 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    888e:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8890:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    8894:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    8898:	2201      	movs	r2, #1
    889a:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    889c:	4aaf      	ldr	r2, [pc, #700]	; (8b5c <usb_isr+0x594>)
    889e:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    88a0:	4aaf      	ldr	r2, [pc, #700]	; (8b60 <usb_isr+0x598>)
    88a2:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    88a4:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    88a8:	f041 0101 	orr.w	r1, r1, #1
    88ac:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    88b0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    88b4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    88b8:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    88ba:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    88bc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    88c0:	2b00      	cmp	r3, #0
    88c2:	d1fb      	bne.n	88bc <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    88c4:	4aa7      	ldr	r2, [pc, #668]	; (8b64 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    88c6:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    88c8:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    88ca:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    88cc:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    88ce:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    88d0:	f248 0380 	movw	r3, #32896	; 0x8080
    88d4:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    88d6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    88da:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    88de:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    88e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    88e6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    88ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    88ee:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    88f2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    88f6:	2b00      	cmp	r3, #0
    88f8:	d1fb      	bne.n	88f2 <usb_isr+0x32a>
    88fa:	e6ba      	b.n	8672 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    88fc:	b280      	uxth	r0, r0
    88fe:	b938      	cbnz	r0, 8910 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8900:	4b99      	ldr	r3, [pc, #612]	; (8b68 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    8902:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8906:	6819      	ldr	r1, [r3, #0]
    8908:	4b98      	ldr	r3, [pc, #608]	; (8b6c <usb_isr+0x5a4>)
    890a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    890c:	4b98      	ldr	r3, [pc, #608]	; (8b70 <usb_isr+0x5a8>)
    890e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    8910:	4b94      	ldr	r3, [pc, #592]	; (8b64 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    8912:	2200      	movs	r2, #0
    8914:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    8916:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    8918:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    891a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    891c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    891e:	2280      	movs	r2, #128	; 0x80
    8920:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8922:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8926:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    892a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    892e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8932:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8936:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    893a:	2b00      	cmp	r3, #0
    893c:	d1fb      	bne.n	8936 <usb_isr+0x36e>
    893e:	e698      	b.n	8672 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    8940:	f3c2 4207 	ubfx	r2, r2, #16, #8
    8944:	4b8b      	ldr	r3, [pc, #556]	; (8b74 <usb_isr+0x5ac>)
    8946:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8948:	4b8b      	ldr	r3, [pc, #556]	; (8b78 <usb_isr+0x5b0>)
    894a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    894e:	4b8b      	ldr	r3, [pc, #556]	; (8b7c <usb_isr+0x5b4>)
    8950:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    8954:	4b8a      	ldr	r3, [pc, #552]	; (8b80 <usb_isr+0x5b8>)
    8956:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    895a:	f000 fbd5 	bl	9108 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    895e:	2280      	movs	r2, #128	; 0x80
    8960:	4629      	mov	r1, r5
    8962:	4888      	ldr	r0, [pc, #544]	; (8b84 <usb_isr+0x5bc>)
    8964:	f003 f816 	bl	b994 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    8968:	4b87      	ldr	r3, [pc, #540]	; (8b88 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    896a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    896c:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    8970:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    8974:	4b7b      	ldr	r3, [pc, #492]	; (8b64 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    8976:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8978:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    897a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    897c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    897e:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8980:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8982:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8986:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    898a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    898e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8992:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8996:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    899a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    899e:	2b00      	cmp	r3, #0
    89a0:	d1fb      	bne.n	899a <usb_isr+0x3d2>
    89a2:	e666      	b.n	8672 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    89a4:	4b6f      	ldr	r3, [pc, #444]	; (8b64 <usb_isr+0x59c>)
    89a6:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    89a8:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    89aa:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    89ac:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    89ae:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    89b0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    89b2:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    89b4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    89b8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    89bc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    89c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    89c4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    89c8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    89cc:	2b00      	cmp	r3, #0
    89ce:	d1fb      	bne.n	89c8 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    89d0:	0c13      	lsrs	r3, r2, #16
    89d2:	065b      	lsls	r3, r3, #25
    89d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    89d8:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    89dc:	e649      	b.n	8672 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    89de:	4b65      	ldr	r3, [pc, #404]	; (8b74 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    89e0:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    89e2:	486a      	ldr	r0, [pc, #424]	; (8b8c <usb_isr+0x5c4>)
    89e4:	781b      	ldrb	r3, [r3, #0]
    89e6:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    89e8:	f7ff fd8c 	bl	8504 <endpoint0_transmit.constprop.0>
		return;
    89ec:	e641      	b.n	8672 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    89ee:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    89f0:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    89f4:	f47f ae39 	bne.w	866a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    89f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    89fc:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    8a00:	4a62      	ldr	r2, [pc, #392]	; (8b8c <usb_isr+0x5c4>)
    8a02:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8a04:	0618      	lsls	r0, r3, #24
    8a06:	f100 809e 	bmi.w	8b46 <usb_isr+0x57e>
    8a0a:	07cb      	lsls	r3, r1, #31
    8a0c:	d501      	bpl.n	8a12 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    8a0e:	2301      	movs	r3, #1
    8a10:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8a12:	2102      	movs	r1, #2
    8a14:	485d      	ldr	r0, [pc, #372]	; (8b8c <usb_isr+0x5c4>)
    8a16:	f7ff fd75 	bl	8504 <endpoint0_transmit.constprop.0>
		return;
    8a1a:	e62a      	b.n	8672 <usb_isr+0xaa>
		if (endpoint > 7) break;
    8a1c:	f010 0f78 	tst.w	r0, #120	; 0x78
    8a20:	b283      	uxth	r3, r0
    8a22:	f47f ae22 	bne.w	866a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    8a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8a2a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8a2e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8a32:	bf14      	ite	ne
    8a34:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8a38:	f043 0301 	orreq.w	r3, r3, #1
    8a3c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8a40:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8a42:	4b48      	ldr	r3, [pc, #288]	; (8b64 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    8a44:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8a46:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8a48:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8a4a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8a4c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a4e:	2280      	movs	r2, #128	; 0x80
    8a50:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a52:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8a56:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8a5a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8a62:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8a66:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a6a:	2b00      	cmp	r3, #0
    8a6c:	d1fb      	bne.n	8a66 <usb_isr+0x49e>
    8a6e:	e600      	b.n	8672 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    8a70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8a74:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8a78:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8a7c:	bf14      	ite	ne
    8a7e:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    8a82:	f023 0301 	biceq.w	r3, r3, #1
    8a86:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8a8a:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8a8c:	4b35      	ldr	r3, [pc, #212]	; (8b64 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    8a8e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8a90:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8a92:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8a94:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8a96:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a98:	2280      	movs	r2, #128	; 0x80
    8a9a:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a9c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8aa0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8aa4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8aac:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8ab0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	d1fb      	bne.n	8ab0 <usb_isr+0x4e8>
    8ab8:	e5db      	b.n	8672 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    8aba:	2000      	movs	r0, #0
    8abc:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    8abe:	4926      	ldr	r1, [pc, #152]	; (8b58 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8ac0:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    8ac2:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8ac4:	f242 0121 	movw	r1, #8225	; 0x2021
    8ac8:	428c      	cmp	r4, r1
    8aca:	f47f ae25 	bne.w	8718 <usb_isr+0x150>
    8ace:	b280      	uxth	r0, r0
    8ad0:	2800      	cmp	r0, #0
    8ad2:	f47f ae21 	bne.w	8718 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8ad6:	492e      	ldr	r1, [pc, #184]	; (8b90 <usb_isr+0x5c8>)
    8ad8:	4c2e      	ldr	r4, [pc, #184]	; (8b94 <usb_isr+0x5cc>)
    8ada:	c903      	ldmia	r1, {r0, r1}
    8adc:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    8ade:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8ae0:	ea4f 4111 	mov.w	r1, r1, lsr #16
    8ae4:	6020      	str	r0, [r4, #0]
    8ae6:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    8ae8:	f47f ae16 	bne.w	8718 <usb_isr+0x150>
	__disable_irq();
    8aec:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    8aee:	482a      	ldr	r0, [pc, #168]	; (8b98 <usb_isr+0x5d0>)
    8af0:	7801      	ldrb	r1, [r0, #0]
    8af2:	f041 0108 	orr.w	r1, r1, #8
    8af6:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    8af8:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    8afc:	060d      	lsls	r5, r1, #24
    8afe:	d405      	bmi.n	8b0c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8b00:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8b02:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8b04:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8b08:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    8b0c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    8b0e:	4a23      	ldr	r2, [pc, #140]	; (8b9c <usb_isr+0x5d4>)
    8b10:	2150      	movs	r1, #80	; 0x50
    8b12:	7011      	strb	r1, [r2, #0]
    8b14:	e600      	b.n	8718 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    8b16:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    8b18:	782a      	ldrb	r2, [r5, #0]
    8b1a:	4282      	cmp	r2, r0
    8b1c:	bf28      	it	cs
    8b1e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    8b20:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    8b24:	d144      	bne.n	8bb0 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    8b26:	4b1e      	ldr	r3, [pc, #120]	; (8ba0 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8b28:	4d1e      	ldr	r5, [pc, #120]	; (8ba4 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    8b2a:	7818      	ldrb	r0, [r3, #0]
    8b2c:	491e      	ldr	r1, [pc, #120]	; (8ba8 <usb_isr+0x5e0>)
    8b2e:	4b1f      	ldr	r3, [pc, #124]	; (8bac <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8b30:	9201      	str	r2, [sp, #4]
    8b32:	2800      	cmp	r0, #0
    8b34:	bf18      	it	ne
    8b36:	4619      	movne	r1, r3
    8b38:	4628      	mov	r0, r5
    8b3a:	f7ff fa5f 	bl	7ffc <memcpy>
					usb_descriptor_buffer[1] = 7;
    8b3e:	2307      	movs	r3, #7
    8b40:	706b      	strb	r3, [r5, #1]
    8b42:	9a01      	ldr	r2, [sp, #4]
    8b44:	e03b      	b.n	8bbe <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8b46:	03c9      	lsls	r1, r1, #15
    8b48:	f53f af61 	bmi.w	8a0e <usb_isr+0x446>
    8b4c:	e761      	b.n	8a12 <usb_isr+0x44a>
    8b4e:	bf00      	nop
    8b50:	20008ee0 	.word	0x20008ee0
    8b54:	2001f624 	.word	0x2001f624
    8b58:	2000c080 	.word	0x2000c080
    8b5c:	00070080 	.word	0x00070080
    8b60:	20020624 	.word	0x20020624
    8b64:	20008ec0 	.word	0x20008ec0
    8b68:	2001ec54 	.word	0x2001ec54
    8b6c:	2001ec74 	.word	0x2001ec74
    8b70:	2001eca2 	.word	0x2001eca2
    8b74:	2001eca3 	.word	0x2001eca3
    8b78:	00cc0002 	.word	0x00cc0002
    8b7c:	000200c8 	.word	0x000200c8
    8b80:	00c80002 	.word	0x00c80002
    8b84:	20000080 	.word	0x20000080
    8b88:	74d59319 	.word	0x74d59319
    8b8c:	2001e74c 	.word	0x2001e74c
    8b90:	2001e624 	.word	0x2001e624
    8b94:	2001ec6c 	.word	0x2001ec6c
    8b98:	2001ec9e 	.word	0x2001ec9e
    8b9c:	2001eca5 	.word	0x2001eca5
    8ba0:	2001eca4 	.word	0x2001eca4
    8ba4:	20200800 	.word	0x20200800
    8ba8:	60002800 	.word	0x60002800
    8bac:	6000279c 	.word	0x6000279c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    8bb0:	4629      	mov	r1, r5
    8bb2:	4d10      	ldr	r5, [pc, #64]	; (8bf4 <usb_isr+0x62c>)
    8bb4:	9201      	str	r2, [sp, #4]
    8bb6:	4628      	mov	r0, r5
    8bb8:	f7ff fa20 	bl	7ffc <memcpy>
    8bbc:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8bbe:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8bc2:	4415      	add	r5, r2
	asm("dsb");
    8bc4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8bc8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8bcc:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    8bd0:	3320      	adds	r3, #32
	} while (location < end_addr);
    8bd2:	429d      	cmp	r5, r3
    8bd4:	d8fa      	bhi.n	8bcc <usb_isr+0x604>
	asm("dsb");
    8bd6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8bda:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    8bde:	4805      	ldr	r0, [pc, #20]	; (8bf4 <usb_isr+0x62c>)
    8be0:	4611      	mov	r1, r2
    8be2:	f7ff fc8f 	bl	8504 <endpoint0_transmit.constprop.0>
				return;
    8be6:	e544      	b.n	8672 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    8be8:	2003      	movs	r0, #3
    8bea:	f7ff fcd7 	bl	859c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    8bee:	f00b fc4f 	bl	14490 <___reboot_Teensyduino__veneer>
    8bf2:	bf00      	nop
    8bf4:	20200800 	.word	0x20200800

00008bf8 <usb_config_rx>:
{
    8bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8bfc:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8bfe:	1e83      	subs	r3, r0, #2
    8c00:	2b02      	cmp	r3, #2
    8c02:	d901      	bls.n	8c08 <usb_config_rx+0x10>
}
    8c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8c08:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8c58 <usb_config_rx+0x60>
    8c0c:	4615      	mov	r5, r2
    8c0e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    8c10:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8c12:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    8c16:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8c18:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    8c1c:	2100      	movs	r1, #0
    8c1e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8c22:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    8c24:	f002 feb6 	bl	b994 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8c28:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    8c2c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8c2e:	0952      	lsrs	r2, r2, #5
    8c30:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    8c34:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    8c38:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8c3c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    8c40:	2f00      	cmp	r7, #0
    8c42:	d0df      	beq.n	8c04 <usb_config_rx+0xc>
    8c44:	4a03      	ldr	r2, [pc, #12]	; (8c54 <usb_config_rx+0x5c>)
    8c46:	40b3      	lsls	r3, r6
    8c48:	6811      	ldr	r1, [r2, #0]
    8c4a:	430b      	orrs	r3, r1
    8c4c:	6013      	str	r3, [r2, #0]
}
    8c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c52:	bf00      	nop
    8c54:	2001e630 	.word	0x2001e630
    8c58:	20000000 	.word	0x20000000

00008c5c <usb_config_tx>:
{
    8c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c60:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8c62:	1e81      	subs	r1, r0, #2
    8c64:	2902      	cmp	r1, #2
    8c66:	d901      	bls.n	8c6c <usb_config_tx+0x10>
}
    8c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8c6c:	01c7      	lsls	r7, r0, #7
    8c6e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8cbc <usb_config_tx+0x60>
    8c72:	4692      	mov	sl, r2
    8c74:	4604      	mov	r4, r0
    8c76:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    8c78:	223c      	movs	r2, #60	; 0x3c
    8c7a:	2100      	movs	r1, #0
    8c7c:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8c7e:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8c82:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    8c84:	f108 0004 	add.w	r0, r8, #4
    8c88:	f002 fe84 	bl	b994 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8c8c:	faba f28a 	clz	r2, sl
    8c90:	0952      	lsrs	r2, r2, #5
    8c92:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    8c96:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    8c9a:	2201      	movs	r2, #1
	qh->callback_function = callback;
    8c9c:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8ca0:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    8ca4:	2e00      	cmp	r6, #0
    8ca6:	d0df      	beq.n	8c68 <usb_config_tx+0xc>
    8ca8:	4b03      	ldr	r3, [pc, #12]	; (8cb8 <usb_config_tx+0x5c>)
    8caa:	3410      	adds	r4, #16
    8cac:	6819      	ldr	r1, [r3, #0]
    8cae:	40a2      	lsls	r2, r4
    8cb0:	430a      	orrs	r2, r1
    8cb2:	601a      	str	r2, [r3, #0]
}
    8cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8cb8:	2001e630 	.word	0x2001e630
    8cbc:	20000000 	.word	0x20000000

00008cc0 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    8cc0:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    8cc2:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    8cc4:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    8cc6:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    8cca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    8cce:	b410      	push	{r4}
	transfer->next = 1;
    8cd0:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    8cd2:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    8cd4:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    8cd8:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    8cda:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    8cde:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    8ce2:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    8ce4:	6181      	str	r1, [r0, #24]
}
    8ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    8cea:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    8cee:	4770      	bx	lr

00008cf0 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8cf0:	1e83      	subs	r3, r0, #2
{
    8cf2:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8cf4:	2b02      	cmp	r3, #2
    8cf6:	d900      	bls.n	8cfa <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    8cf8:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8cfa:	4b06      	ldr	r3, [pc, #24]	; (8d14 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    8cfc:	f100 0110 	add.w	r1, r0, #16
    8d00:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8d04:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    8d08:	fa0c f101 	lsl.w	r1, ip, r1
    8d0c:	3040      	adds	r0, #64	; 0x40
    8d0e:	f7ff bb99 	b.w	8444 <schedule_transfer>
    8d12:	bf00      	nop
    8d14:	20000000 	.word	0x20000000

00008d18 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8d18:	1e83      	subs	r3, r0, #2
{
    8d1a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8d1c:	2b02      	cmp	r3, #2
    8d1e:	d900      	bls.n	8d22 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    8d20:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    8d22:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    8d24:	4b02      	ldr	r3, [pc, #8]	; (8d30 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    8d26:	4081      	lsls	r1, r0
    8d28:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    8d2c:	f7ff bb8a 	b.w	8444 <schedule_transfer>
    8d30:	20000000 	.word	0x20000000

00008d34 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    8d34:	6840      	ldr	r0, [r0, #4]
#endif
}
    8d36:	4770      	bx	lr

00008d38 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8d38:	4a12      	ldr	r2, [pc, #72]	; (8d84 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    8d3a:	4b13      	ldr	r3, [pc, #76]	; (8d88 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8d3c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    8d40:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    8d44:	4298      	cmp	r0, r3
{
    8d46:	b510      	push	{r4, lr}
    8d48:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    8d4a:	d202      	bcs.n	8d52 <usb_init_serialnumber+0x1a>
    8d4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8d50:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    8d52:	4c0e      	ldr	r4, [pc, #56]	; (8d8c <usb_init_serialnumber+0x54>)
    8d54:	a901      	add	r1, sp, #4
    8d56:	220a      	movs	r2, #10
    8d58:	f7ff f9ec 	bl	8134 <ultoa>
	for (i=0; i<10; i++) {
    8d5c:	a901      	add	r1, sp, #4
    8d5e:	2300      	movs	r3, #0
    8d60:	4620      	mov	r0, r4
		char c = buf[i];
    8d62:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    8d66:	3301      	adds	r3, #1
		if (!c) break;
    8d68:	b13a      	cbz	r2, 8d7a <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    8d6a:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    8d6c:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    8d70:	d1f7      	bne.n	8d62 <usb_init_serialnumber+0x2a>
    8d72:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    8d74:	7023      	strb	r3, [r4, #0]
}
    8d76:	b004      	add	sp, #16
    8d78:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    8d7a:	005b      	lsls	r3, r3, #1
    8d7c:	b2db      	uxtb	r3, r3
    8d7e:	7023      	strb	r3, [r4, #0]
}
    8d80:	b004      	add	sp, #16
    8d82:	bd10      	pop	{r4, pc}
    8d84:	401f4400 	.word	0x401f4400
    8d88:	00989680 	.word	0x00989680
    8d8c:	20008be0 	.word	0x20008be0

00008d90 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    8d90:	f000 bace 	b.w	9330 <usb_serial_flush_input>

00008d94 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    8d94:	f000 bac0 	b.w	9318 <usb_serial_available>

00008d98 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    8d98:	f000 bb5c 	b.w	9454 <usb_serial_flush_output>

00008d9c <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    8d9c:	f000 bb32 	b.w	9404 <usb_serial_write_buffer_free>

00008da0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8da0:	4608      	mov	r0, r1
    8da2:	4611      	mov	r1, r2
    8da4:	f000 bb22 	b.w	93ec <usb_serial_write>

00008da8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    8da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8daa:	4c14      	ldr	r4, [pc, #80]	; (8dfc <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8dac:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8db0:	4e13      	ldr	r6, [pc, #76]	; (8e00 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8db6:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8dba:	4f12      	ldr	r7, [pc, #72]	; (8e04 <rx_queue_transfer+0x5c>)
    8dbc:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    8dc0:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8dc2:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8dc6:	4621      	mov	r1, r4
    8dc8:	883a      	ldrh	r2, [r7, #0]
    8dca:	4630      	mov	r0, r6
    8dcc:	f7ff ff78 	bl	8cc0 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    8dd0:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    8dd2:	4423      	add	r3, r4
	asm("dsb");
    8dd4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    8dd8:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    8ddc:	3420      	adds	r4, #32
	} while (location < end_addr);
    8dde:	42a3      	cmp	r3, r4
    8de0:	d8fa      	bhi.n	8dd8 <rx_queue_transfer+0x30>
	asm("dsb");
    8de2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8de6:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    8dea:	2003      	movs	r0, #3
    8dec:	4631      	mov	r1, r6
    8dee:	f7ff ff93 	bl	8d18 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8df6:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    8dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8dfc:	20008f00 	.word	0x20008f00
    8e00:	20009f00 	.word	0x20009f00
    8e04:	2001ec8a 	.word	0x2001ec8a

00008e08 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8e08:	4b24      	ldr	r3, [pc, #144]	; (8e9c <rx_event+0x94>)
{
    8e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8e0e:	881c      	ldrh	r4, [r3, #0]
    8e10:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    8e12:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8e14:	f3c3 430e 	ubfx	r3, r3, #16, #15
    8e18:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    8e1a:	2c00      	cmp	r4, #0
    8e1c:	dd24      	ble.n	8e68 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    8e1e:	4920      	ldr	r1, [pc, #128]	; (8ea0 <rx_event+0x98>)
		if (head != rx_tail) {
    8e20:	4820      	ldr	r0, [pc, #128]	; (8ea4 <rx_event+0x9c>)
		uint32_t head = rx_head;
    8e22:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    8e24:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    8e26:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    8e28:	4e1f      	ldr	r6, [pc, #124]	; (8ea8 <rx_event+0xa0>)
		if (head != rx_tail) {
    8e2a:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    8e2c:	481f      	ldr	r0, [pc, #124]	; (8eac <rx_event+0xa4>)
		if (head != rx_tail) {
    8e2e:	d007      	beq.n	8e40 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    8e30:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    8e34:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8e38:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    8e3c:	4294      	cmp	r4, r2
    8e3e:	d918      	bls.n	8e72 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    8e40:	3301      	adds	r3, #1
		rx_index[i] = 0;
    8e42:	2200      	movs	r2, #0
		rx_count[i] = len;
    8e44:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    8e48:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    8e4a:	4e19      	ldr	r6, [pc, #100]	; (8eb0 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    8e4c:	bf88      	it	hi
    8e4e:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    8e50:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    8e54:	bf98      	it	ls
    8e56:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    8e58:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    8e5a:	4b16      	ldr	r3, [pc, #88]	; (8eb4 <rx_event+0xac>)
		rx_head = head;
    8e5c:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    8e5e:	681a      	ldr	r2, [r3, #0]
    8e60:	4414      	add	r4, r2
    8e62:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    8e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    8e68:	4628      	mov	r0, r5
}
    8e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    8e6e:	f7ff bf9b 	b.w	8da8 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8e72:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    8e76:	4910      	ldr	r1, [pc, #64]	; (8eb8 <rx_event+0xb0>)
    8e78:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    8e7a:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8e7c:	4408      	add	r0, r1
    8e7e:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    8e82:	f7ff f8bb 	bl	7ffc <memcpy>
				rx_available += len;
    8e86:	4a0b      	ldr	r2, [pc, #44]	; (8eb4 <rx_event+0xac>)
				rx_queue_transfer(i);
    8e88:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    8e8a:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    8e8e:	6813      	ldr	r3, [r2, #0]
    8e90:	4423      	add	r3, r4
}
    8e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    8e96:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    8e98:	f7ff bf86 	b.w	8da8 <rx_queue_transfer>
    8e9c:	2001ec8a 	.word	0x2001ec8a
    8ea0:	2001ec9c 	.word	0x2001ec9c
    8ea4:	2001ec9d 	.word	0x2001ec9d
    8ea8:	2001e758 	.word	0x2001e758
    8eac:	2001e778 	.word	0x2001e778
    8eb0:	2001e768 	.word	0x2001e768
    8eb4:	2001e754 	.word	0x2001e754
    8eb8:	20008f00 	.word	0x20008f00

00008ebc <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    8ebc:	4b1d      	ldr	r3, [pc, #116]	; (8f34 <usb_serial_flush_callback+0x78>)
    8ebe:	781a      	ldrb	r2, [r3, #0]
    8ec0:	2a00      	cmp	r2, #0
    8ec2:	d136      	bne.n	8f32 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    8ec4:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    8ec8:	4a1b      	ldr	r2, [pc, #108]	; (8f38 <usb_serial_flush_callback+0x7c>)
    8eca:	7812      	ldrb	r2, [r2, #0]
    8ecc:	b38a      	cbz	r2, 8f32 <usb_serial_flush_callback+0x76>
{
    8ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    8ed2:	4d1a      	ldr	r5, [pc, #104]	; (8f3c <usb_serial_flush_callback+0x80>)
    8ed4:	882a      	ldrh	r2, [r5, #0]
    8ed6:	b352      	cbz	r2, 8f2e <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8ed8:	4e19      	ldr	r6, [pc, #100]	; (8f40 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8eda:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    8ede:	4f19      	ldr	r7, [pc, #100]	; (8f44 <usb_serial_flush_callback+0x88>)
    8ee0:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8ee2:	4c19      	ldr	r4, [pc, #100]	; (8f48 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    8ee4:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8ee8:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8eec:	4642      	mov	r2, r8
    8eee:	4638      	mov	r0, r7
    8ef0:	4621      	mov	r1, r4
    8ef2:	f7ff fee5 	bl	8cc0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    8ef6:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    8efa:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8efe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8f02:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    8f06:	3420      	adds	r4, #32
	} while (location < end_addr);
    8f08:	42a2      	cmp	r2, r4
    8f0a:	d8fa      	bhi.n	8f02 <usb_serial_flush_callback+0x46>
	asm("dsb");
    8f0c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8f10:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8f14:	2004      	movs	r0, #4
    8f16:	4639      	mov	r1, r7
    8f18:	f7ff feea 	bl	8cf0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8f1c:	7833      	ldrb	r3, [r6, #0]
    8f1e:	3301      	adds	r3, #1
    8f20:	b2db      	uxtb	r3, r3
    8f22:	2b03      	cmp	r3, #3
    8f24:	bf88      	it	hi
    8f26:	2300      	movhi	r3, #0
    8f28:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    8f2a:	2300      	movs	r3, #0
    8f2c:	802b      	strh	r3, [r5, #0]
}
    8f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f32:	4770      	bx	lr
    8f34:	2001eca1 	.word	0x2001eca1
    8f38:	2001eca3 	.word	0x2001eca3
    8f3c:	2001ec8e 	.word	0x2001ec8e
    8f40:	2001eca0 	.word	0x2001eca0
    8f44:	2000a000 	.word	0x2000a000
    8f48:	2000a080 	.word	0x2000a080

00008f4c <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    8f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f50:	b085      	sub	sp, #20
	while (size > 0) {
    8f52:	e9cd 1001 	strd	r1, r0, [sp, #4]
    8f56:	2900      	cmp	r1, #0
    8f58:	f000 80bf 	beq.w	90da <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    8f5c:	2300      	movs	r3, #0
    8f5e:	4c60      	ldr	r4, [pc, #384]	; (90e0 <usb_serial_write.part.0+0x194>)
    8f60:	f8df 8198 	ldr.w	r8, [pc, #408]	; 90fc <usb_serial_write.part.0+0x1b0>
    8f64:	f8df a198 	ldr.w	sl, [pc, #408]	; 9100 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    8f68:	4f5e      	ldr	r7, [pc, #376]	; (90e4 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    8f6a:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    8f6c:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    8f6e:	4a5e      	ldr	r2, [pc, #376]	; (90e8 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    8f70:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    8f72:	4b5e      	ldr	r3, [pc, #376]	; (90ec <usb_serial_write.part.0+0x1a0>)
    8f74:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    8f76:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    8f7a:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    8f7e:	2b00      	cmp	r3, #0
    8f80:	f040 80a7 	bne.w	90d2 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    8f84:	461e      	mov	r6, r3
		int waiting=0;
    8f86:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    8f88:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    8f8a:	4648      	mov	r0, r9
    8f8c:	f7ff fed2 	bl	8d34 <usb_transfer_status>
			if (!(status & 0x80)) {
    8f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    8f94:	f000 808c 	beq.w	90b0 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    8f98:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    8f9c:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    8fa0:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    8fa4:	b905      	cbnz	r5, 8fa8 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    8fa6:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    8fa8:	2b00      	cmp	r3, #0
    8faa:	d17d      	bne.n	90a8 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    8fac:	683b      	ldr	r3, [r7, #0]
    8fae:	1b9b      	subs	r3, r3, r6
    8fb0:	2b78      	cmp	r3, #120	; 0x78
    8fb2:	f200 8087 	bhi.w	90c4 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    8fb6:	4b4e      	ldr	r3, [pc, #312]	; (90f0 <usb_serial_write.part.0+0x1a4>)
    8fb8:	781b      	ldrb	r3, [r3, #0]
    8fba:	2b00      	cmp	r3, #0
    8fbc:	d074      	beq.n	90a8 <usb_serial_write.part.0+0x15c>
			yield();
    8fbe:	f000 fa93 	bl	94e8 <yield>
			tx_noautoflush = 1;
    8fc2:	2201      	movs	r2, #1
		while (!tx_available) {
    8fc4:	f8b8 3000 	ldrh.w	r3, [r8]
    8fc8:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    8fca:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    8fcc:	2b00      	cmp	r3, #0
    8fce:	d0dc      	beq.n	8f8a <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8fd0:	4a46      	ldr	r2, [pc, #280]	; (90ec <usb_serial_write.part.0+0x1a0>)
    8fd2:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    8fd6:	7811      	ldrb	r1, [r2, #0]
    8fd8:	461a      	mov	r2, r3
    8fda:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    8fde:	4d45      	ldr	r5, [pc, #276]	; (90f4 <usb_serial_write.part.0+0x1a8>)
    8fe0:	02c9      	lsls	r1, r1, #11
    8fe2:	4428      	add	r0, r5
		if (size >= tx_available) {
    8fe4:	9d01      	ldr	r5, [sp, #4]
    8fe6:	4295      	cmp	r5, r2
    8fe8:	d217      	bcs.n	901a <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    8fea:	9303      	str	r3, [sp, #12]
    8fec:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    8ff0:	462a      	mov	r2, r5
    8ff2:	f7ff f803 	bl	7ffc <memcpy>
			tx_available -= size;
    8ff6:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8ff8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    8ffc:	1b5b      	subs	r3, r3, r5
    8ffe:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9002:	4b3d      	ldr	r3, [pc, #244]	; (90f8 <usb_serial_write.part.0+0x1ac>)
    9004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    9008:	f3bf 8f4f 	dsb	sy
			sent += size;
    900c:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    900e:	2300      	movs	r3, #0
			sent += size;
    9010:	4428      	add	r0, r5
		tx_noautoflush = 0;
    9012:	7023      	strb	r3, [r4, #0]
}
    9014:	b005      	add	sp, #20
    9016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    901a:	4b36      	ldr	r3, [pc, #216]	; (90f4 <usb_serial_write.part.0+0x1a8>)
    901c:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    901e:	9902      	ldr	r1, [sp, #8]
    9020:	f7fe ffec 	bl	7ffc <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9024:	2300      	movs	r3, #0
    9026:	f44f 6200 	mov.w	r2, #2048	; 0x800
    902a:	4629      	mov	r1, r5
    902c:	4648      	mov	r0, r9
    902e:	f7ff fe47 	bl	8cc0 <usb_prepare_transfer>
	asm("dsb");
    9032:	f3bf 8f4f 	dsb	sy
    9036:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    903a:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    903e:	4293      	cmp	r3, r2
    9040:	bf34      	ite	cc
    9042:	2301      	movcc	r3, #1
    9044:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    9046:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    904a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    904e:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    9052:	3520      	adds	r5, #32
	} while (location < end_addr);
    9054:	42ab      	cmp	r3, r5
    9056:	d1fa      	bne.n	904e <usb_serial_write.part.0+0x102>
	asm("dsb");
    9058:	f3bf 8f4f 	dsb	sy
	asm("isb");
    905c:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9060:	2004      	movs	r0, #4
    9062:	4649      	mov	r1, r9
    9064:	f7ff fe44 	bl	8cf0 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9068:	4a20      	ldr	r2, [pc, #128]	; (90ec <usb_serial_write.part.0+0x1a0>)
    906a:	7813      	ldrb	r3, [r2, #0]
    906c:	3301      	adds	r3, #1
    906e:	b2db      	uxtb	r3, r3
    9070:	2b03      	cmp	r3, #3
    9072:	bf84      	itt	hi
    9074:	2300      	movhi	r3, #0
    9076:	4a1d      	ldrhi	r2, [pc, #116]	; (90ec <usb_serial_write.part.0+0x1a0>)
    9078:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    907a:	f8b8 3000 	ldrh.w	r3, [r8]
    907e:	9a01      	ldr	r2, [sp, #4]
    9080:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    9082:	9a00      	ldr	r2, [sp, #0]
    9084:	441a      	add	r2, r3
			size -= tx_available;
    9086:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    9088:	9200      	str	r2, [sp, #0]
			data += tx_available;
    908a:	9a02      	ldr	r2, [sp, #8]
    908c:	441a      	add	r2, r3
			tx_available = 0;
    908e:	2300      	movs	r3, #0
			data += tx_available;
    9090:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    9092:	4a19      	ldr	r2, [pc, #100]	; (90f8 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    9094:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    9098:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    909c:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    90a0:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    90a2:	2900      	cmp	r1, #0
    90a4:	f47f af62 	bne.w	8f6c <usb_serial_write.part.0+0x20>
	return sent;
    90a8:	9800      	ldr	r0, [sp, #0]
}
    90aa:	b005      	add	sp, #20
    90ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    90b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    90b4:	4b0d      	ldr	r3, [pc, #52]	; (90ec <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    90b6:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    90ba:	7819      	ldrb	r1, [r3, #0]
				break;
    90bc:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    90be:	f8a8 2000 	strh.w	r2, [r8]
				break;
    90c2:	e78a      	b.n	8fda <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    90c4:	2301      	movs	r3, #1
				return sent;
    90c6:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    90c8:	f88a 3000 	strb.w	r3, [sl]
}
    90cc:	b005      	add	sp, #20
    90ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    90d2:	461a      	mov	r2, r3
    90d4:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    90d8:	e77f      	b.n	8fda <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    90da:	9801      	ldr	r0, [sp, #4]
	return sent;
    90dc:	e7e5      	b.n	90aa <usb_serial_write.part.0+0x15e>
    90de:	bf00      	nop
    90e0:	2001eca1 	.word	0x2001eca1
    90e4:	2001ec54 	.word	0x2001ec54
    90e8:	2000a000 	.word	0x2000a000
    90ec:	2001eca0 	.word	0x2001eca0
    90f0:	2001eca3 	.word	0x2001eca3
    90f4:	2000a080 	.word	0x2000a080
    90f8:	402e0000 	.word	0x402e0000
    90fc:	2001ec8e 	.word	0x2001ec8e
    9100:	2001ec9f 	.word	0x2001ec9f

00009104 <usb_serial_reset>:
}
    9104:	4770      	bx	lr
    9106:	bf00      	nop

00009108 <usb_serial_configure>:
	if (usb_high_speed) {
    9108:	4b2a      	ldr	r3, [pc, #168]	; (91b4 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    910a:	2100      	movs	r1, #0
    910c:	2280      	movs	r2, #128	; 0x80
    910e:	482a      	ldr	r0, [pc, #168]	; (91b8 <usb_serial_configure+0xb0>)
{
    9110:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    9112:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    9114:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    9116:	4d29      	ldr	r5, [pc, #164]	; (91bc <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    9118:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    911a:	4e29      	ldr	r6, [pc, #164]	; (91c0 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    911c:	bf0c      	ite	eq
    911e:	2340      	moveq	r3, #64	; 0x40
    9120:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    9124:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    9126:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9128:	f002 fc34 	bl	b994 <memset>
	tx_head = 0;
    912c:	4a25      	ldr	r2, [pc, #148]	; (91c4 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    912e:	4621      	mov	r1, r4
	tx_available = 0;
    9130:	4b25      	ldr	r3, [pc, #148]	; (91c8 <usb_serial_configure+0xc0>)
	tx_head = 0;
    9132:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9134:	f44f 7280 	mov.w	r2, #256	; 0x100
    9138:	4824      	ldr	r0, [pc, #144]	; (91cc <usb_serial_configure+0xc4>)
	tx_available = 0;
    913a:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    913c:	f002 fc2a 	bl	b994 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9140:	4a23      	ldr	r2, [pc, #140]	; (91d0 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9142:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    9144:	4b23      	ldr	r3, [pc, #140]	; (91d4 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9146:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    9148:	e9c2 4400 	strd	r4, r4, [r2]
    914c:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    9150:	4a21      	ldr	r2, [pc, #132]	; (91d8 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    9152:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    9156:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    9158:	4a20      	ldr	r2, [pc, #128]	; (91dc <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    915a:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    915e:	4b20      	ldr	r3, [pc, #128]	; (91e0 <usb_serial_configure+0xd8>)
    9160:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9162:	4623      	mov	r3, r4
	rx_available = 0;
    9164:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9166:	4622      	mov	r2, r4
    9168:	f7ff fd78 	bl	8c5c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    916c:	4622      	mov	r2, r4
    916e:	8831      	ldrh	r1, [r6, #0]
    9170:	2003      	movs	r0, #3
    9172:	4b1c      	ldr	r3, [pc, #112]	; (91e4 <usb_serial_configure+0xdc>)
    9174:	f7ff fd40 	bl	8bf8 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    9178:	4623      	mov	r3, r4
    917a:	2201      	movs	r2, #1
    917c:	8829      	ldrh	r1, [r5, #0]
    917e:	2004      	movs	r0, #4
    9180:	f7ff fd6c 	bl	8c5c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9184:	4620      	mov	r0, r4
    9186:	3401      	adds	r4, #1
    9188:	f7ff fe0e 	bl	8da8 <rx_queue_transfer>
    918c:	2c08      	cmp	r4, #8
    918e:	d1f9      	bne.n	9184 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    9190:	4b15      	ldr	r3, [pc, #84]	; (91e8 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    9192:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    9194:	4815      	ldr	r0, [pc, #84]	; (91ec <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    9196:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    9198:	4c15      	ldr	r4, [pc, #84]	; (91f0 <usb_serial_configure+0xe8>)
    919a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    919c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    91a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    91a4:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    91a8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    91ac:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    91b0:	bd70      	pop	{r4, r5, r6, pc}
    91b2:	bf00      	nop
    91b4:	2001eca4 	.word	0x2001eca4
    91b8:	2000a000 	.word	0x2000a000
    91bc:	2001ec90 	.word	0x2001ec90
    91c0:	2001ec8a 	.word	0x2001ec8a
    91c4:	2001eca0 	.word	0x2001eca0
    91c8:	2001ec8e 	.word	0x2001ec8e
    91cc:	20009f00 	.word	0x20009f00
    91d0:	2001e758 	.word	0x2001e758
    91d4:	2001e768 	.word	0x2001e768
    91d8:	2001ec9c 	.word	0x2001ec9c
    91dc:	2001e754 	.word	0x2001e754
    91e0:	2001ec9d 	.word	0x2001ec9d
    91e4:	00008e09 	.word	0x00008e09
    91e8:	402e0000 	.word	0x402e0000
    91ec:	2001ec78 	.word	0x2001ec78
    91f0:	00008ebd 	.word	0x00008ebd

000091f4 <usb_serial_read>:
{
    91f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    91f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    91fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    9200:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 92cc <usb_serial_read+0xd8>
{
    9204:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9206:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    920a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    920c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    9210:	2900      	cmp	r1, #0
    9212:	d04f      	beq.n	92b4 <usb_serial_read+0xc0>
    9214:	4680      	mov	r8, r0
    9216:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    9218:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    921a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 92d0 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    921e:	4b26      	ldr	r3, [pc, #152]	; (92b8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    9220:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9224:	4925      	ldr	r1, [pc, #148]	; (92bc <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    9226:	781b      	ldrb	r3, [r3, #0]
    9228:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    922a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    922e:	d03f      	beq.n	92b0 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    9230:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    9232:	4b23      	ldr	r3, [pc, #140]	; (92c0 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9234:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    9236:	bf28      	it	cs
    9238:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    923a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    923c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9240:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    9244:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    9246:	4b1f      	ldr	r3, [pc, #124]	; (92c4 <usb_serial_read+0xd0>)
    9248:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    924c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    9250:	42aa      	cmp	r2, r5
    9252:	d21c      	bcs.n	928e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    9254:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    9258:	4918      	ldr	r1, [pc, #96]	; (92bc <usb_serial_read+0xc8>)
			rx_available -= len;
    925a:	4c1b      	ldr	r4, [pc, #108]	; (92c8 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    925c:	4461      	add	r1, ip
    925e:	9201      	str	r2, [sp, #4]
    9260:	f7fe fecc 	bl	7ffc <memcpy>
			rx_available -= len;
    9264:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    9266:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    926a:	4658      	mov	r0, fp
			rx_index[i] += len;
    926c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    926e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    9272:	442a      	add	r2, r5
			rx_available -= len;
    9274:	4439      	add	r1, r7
			rx_index[i] += len;
    9276:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    927a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    927c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9280:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9284:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    9288:	b003      	add	sp, #12
    928a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    928e:	462a      	mov	r2, r5
			count += avail;
    9290:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9292:	f7fe feb3 	bl	7ffc <memcpy>
			rx_available -= avail;
    9296:	490c      	ldr	r1, [pc, #48]	; (92c8 <usb_serial_read+0xd4>)
			rx_tail = tail;
    9298:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    929a:	4630      	mov	r0, r6
			rx_available -= avail;
    929c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    929e:	44a8      	add	r8, r5
			rx_available -= avail;
    92a0:	1b52      	subs	r2, r2, r5
    92a2:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    92a4:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    92a8:	f7ff fd7e 	bl	8da8 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    92ac:	45bb      	cmp	fp, r7
    92ae:	d8b6      	bhi.n	921e <usb_serial_read+0x2a>
	return count;
    92b0:	4638      	mov	r0, r7
    92b2:	e7e3      	b.n	927c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    92b4:	4608      	mov	r0, r1
    92b6:	e7e1      	b.n	927c <usb_serial_read+0x88>
    92b8:	2001ec9c 	.word	0x2001ec9c
    92bc:	20008f00 	.word	0x20008f00
    92c0:	2001e778 	.word	0x2001e778
    92c4:	2001e758 	.word	0x2001e758
    92c8:	2001e754 	.word	0x2001e754
    92cc:	2001ec9d 	.word	0x2001ec9d
    92d0:	2001e768 	.word	0x2001e768

000092d4 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    92d4:	4b0b      	ldr	r3, [pc, #44]	; (9304 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    92d6:	4a0c      	ldr	r2, [pc, #48]	; (9308 <usb_serial_peekchar+0x34>)
    92d8:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    92da:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    92dc:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    92de:	428a      	cmp	r2, r1
    92e0:	d00d      	beq.n	92fe <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    92e2:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    92e4:	4809      	ldr	r0, [pc, #36]	; (930c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    92e6:	4a0a      	ldr	r2, [pc, #40]	; (9310 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    92e8:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    92ea:	490a      	ldr	r1, [pc, #40]	; (9314 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    92ec:	bf28      	it	cs
    92ee:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    92f0:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    92f2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    92f6:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    92fa:	5c58      	ldrb	r0, [r3, r1]
    92fc:	4770      	bx	lr
	if (tail == rx_head) return -1;
    92fe:	f04f 30ff 	mov.w	r0, #4294967295
}
    9302:	4770      	bx	lr
    9304:	2001ec9c 	.word	0x2001ec9c
    9308:	2001ec9d 	.word	0x2001ec9d
    930c:	2001e778 	.word	0x2001e778
    9310:	20008f00 	.word	0x20008f00
    9314:	2001e768 	.word	0x2001e768

00009318 <usb_serial_available>:
	uint32_t n = rx_available;
    9318:	4b04      	ldr	r3, [pc, #16]	; (932c <usb_serial_available+0x14>)
{
    931a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    931c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    931e:	b10c      	cbz	r4, 9324 <usb_serial_available+0xc>
}
    9320:	4620      	mov	r0, r4
    9322:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    9324:	f000 f8e0 	bl	94e8 <yield>
}
    9328:	4620      	mov	r0, r4
    932a:	bd10      	pop	{r4, pc}
    932c:	2001e754 	.word	0x2001e754

00009330 <usb_serial_flush_input>:
{
    9330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    9334:	4e14      	ldr	r6, [pc, #80]	; (9388 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    9336:	4d15      	ldr	r5, [pc, #84]	; (938c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    9338:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    933a:	782a      	ldrb	r2, [r5, #0]
    933c:	4293      	cmp	r3, r2
    933e:	d021      	beq.n	9384 <usb_serial_flush_input+0x54>
    9340:	b2dc      	uxtb	r4, r3
    9342:	f8df 9050 	ldr.w	r9, [pc, #80]	; 9394 <usb_serial_flush_input+0x64>
    9346:	f8df b050 	ldr.w	fp, [pc, #80]	; 9398 <usb_serial_flush_input+0x68>
    934a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 939c <usb_serial_flush_input+0x6c>
    934e:	4f10      	ldr	r7, [pc, #64]	; (9390 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    9350:	3401      	adds	r4, #1
    9352:	2c08      	cmp	r4, #8
		rx_tail = tail;
    9354:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    9358:	d901      	bls.n	935e <usb_serial_flush_input+0x2e>
    935a:	2400      	movs	r4, #0
    935c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    935e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    9362:	f8db 3000 	ldr.w	r3, [fp]
    9366:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    936a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    936e:	1a52      	subs	r2, r2, r1
    9370:	1a9b      	subs	r3, r3, r2
    9372:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    9376:	f7ff fd17 	bl	8da8 <rx_queue_transfer>
		rx_tail = tail;
    937a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    937e:	782b      	ldrb	r3, [r5, #0]
    9380:	42a3      	cmp	r3, r4
    9382:	d1e5      	bne.n	9350 <usb_serial_flush_input+0x20>
}
    9384:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9388:	2001ec9d 	.word	0x2001ec9d
    938c:	2001ec9c 	.word	0x2001ec9c
    9390:	2001e768 	.word	0x2001e768
    9394:	2001e778 	.word	0x2001e778
    9398:	2001e754 	.word	0x2001e754
    939c:	2001e758 	.word	0x2001e758

000093a0 <usb_serial_getchar>:
{
    93a0:	b500      	push	{lr}
    93a2:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    93a4:	2101      	movs	r1, #1
    93a6:	f10d 0007 	add.w	r0, sp, #7
    93aa:	f7ff ff23 	bl	91f4 <usb_serial_read>
    93ae:	b120      	cbz	r0, 93ba <usb_serial_getchar+0x1a>
    93b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    93b4:	b003      	add	sp, #12
    93b6:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    93ba:	f04f 30ff 	mov.w	r0, #4294967295
    93be:	e7f9      	b.n	93b4 <usb_serial_getchar+0x14>

000093c0 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    93c0:	4b09      	ldr	r3, [pc, #36]	; (93e8 <usb_serial_putchar+0x28>)
{
    93c2:	b500      	push	{lr}
    93c4:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    93c6:	781b      	ldrb	r3, [r3, #0]
{
    93c8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    93cc:	b13b      	cbz	r3, 93de <usb_serial_putchar+0x1e>
    93ce:	2101      	movs	r1, #1
    93d0:	f10d 0007 	add.w	r0, sp, #7
    93d4:	f7ff fdba 	bl	8f4c <usb_serial_write.part.0>
}
    93d8:	b003      	add	sp, #12
    93da:	f85d fb04 	ldr.w	pc, [sp], #4
    93de:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    93e2:	b003      	add	sp, #12
    93e4:	f85d fb04 	ldr.w	pc, [sp], #4
    93e8:	2001eca3 	.word	0x2001eca3

000093ec <usb_serial_write>:
	if (!usb_configuration) return 0;
    93ec:	4b04      	ldr	r3, [pc, #16]	; (9400 <usb_serial_write+0x14>)
    93ee:	781b      	ldrb	r3, [r3, #0]
    93f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    93f4:	b10b      	cbz	r3, 93fa <usb_serial_write+0xe>
    93f6:	f7ff bda9 	b.w	8f4c <usb_serial_write.part.0>
}
    93fa:	4610      	mov	r0, r2
    93fc:	4770      	bx	lr
    93fe:	bf00      	nop
    9400:	2001eca3 	.word	0x2001eca3

00009404 <usb_serial_write_buffer_free>:
{
    9404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    9408:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    940a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 9450 <usb_serial_write_buffer_free+0x4c>
    940e:	2301      	movs	r3, #1
    9410:	4d0d      	ldr	r5, [pc, #52]	; (9448 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    9412:	4627      	mov	r7, r4
    9414:	4e0d      	ldr	r6, [pc, #52]	; (944c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    9416:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    941a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    941c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    941e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    9420:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    9422:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    9426:	d005      	beq.n	9434 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9428:	f7ff fc84 	bl	8d34 <usb_transfer_status>
    942c:	0603      	lsls	r3, r0, #24
    942e:	bf58      	it	pl
    9430:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    9434:	2c04      	cmp	r4, #4
    9436:	d1f0      	bne.n	941a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    9438:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    943c:	2300      	movs	r3, #0
}
    943e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    9440:	f888 3000 	strb.w	r3, [r8]
}
    9444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9448:	2000a000 	.word	0x2000a000
    944c:	2001eca0 	.word	0x2001eca0
    9450:	2001eca1 	.word	0x2001eca1

00009454 <usb_serial_flush_output>:
{
    9454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    9458:	4b1d      	ldr	r3, [pc, #116]	; (94d0 <usb_serial_flush_output+0x7c>)
    945a:	781b      	ldrb	r3, [r3, #0]
    945c:	b113      	cbz	r3, 9464 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    945e:	4d1d      	ldr	r5, [pc, #116]	; (94d4 <usb_serial_flush_output+0x80>)
    9460:	882a      	ldrh	r2, [r5, #0]
    9462:	b90a      	cbnz	r2, 9468 <usb_serial_flush_output+0x14>
}
    9464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    9468:	4e1b      	ldr	r6, [pc, #108]	; (94d8 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    946a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    946e:	491b      	ldr	r1, [pc, #108]	; (94dc <usb_serial_flush_output+0x88>)
    9470:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9472:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9474:	4c1a      	ldr	r4, [pc, #104]	; (94e0 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    9476:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    947a:	4f1a      	ldr	r7, [pc, #104]	; (94e4 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    947c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    9480:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9482:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    9484:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9486:	4621      	mov	r1, r4
    9488:	2300      	movs	r3, #0
    948a:	f7ff fc19 	bl	8cc0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    948e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    9492:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9496:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    949a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    949e:	3420      	adds	r4, #32
	} while (location < end_addr);
    94a0:	42a2      	cmp	r2, r4
    94a2:	d8fa      	bhi.n	949a <usb_serial_flush_output+0x46>
	asm("dsb");
    94a4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    94a8:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    94ac:	2004      	movs	r0, #4
    94ae:	4641      	mov	r1, r8
    94b0:	f7ff fc1e 	bl	8cf0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    94b4:	7833      	ldrb	r3, [r6, #0]
    94b6:	3301      	adds	r3, #1
    94b8:	b2db      	uxtb	r3, r3
    94ba:	2b03      	cmp	r3, #3
    94bc:	bf88      	it	hi
    94be:	2300      	movhi	r3, #0
    94c0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    94c2:	2300      	movs	r3, #0
    94c4:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    94c6:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    94ca:	703b      	strb	r3, [r7, #0]
}
    94cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    94d0:	2001eca3 	.word	0x2001eca3
    94d4:	2001ec8e 	.word	0x2001ec8e
    94d8:	2001eca0 	.word	0x2001eca0
    94dc:	2000a000 	.word	0x2000a000
    94e0:	2000a080 	.word	0x2000a080
    94e4:	2001eca1 	.word	0x2001eca1

000094e8 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    94e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    94ec:	4e32      	ldr	r6, [pc, #200]	; (95b8 <yield+0xd0>)
    94ee:	7833      	ldrb	r3, [r6, #0]
    94f0:	b163      	cbz	r3, 950c <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    94f2:	4f32      	ldr	r7, [pc, #200]	; (95bc <yield+0xd4>)
    94f4:	783a      	ldrb	r2, [r7, #0]
    94f6:	b94a      	cbnz	r2, 950c <yield+0x24>
	running = 1;
    94f8:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    94fa:	07d9      	lsls	r1, r3, #31
	running = 1;
    94fc:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    94fe:	d444      	bmi.n	958a <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    9500:	079a      	lsls	r2, r3, #30
    9502:	d426      	bmi.n	9552 <yield+0x6a>

	running = 0;
    9504:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    9506:	075b      	lsls	r3, r3, #29
	running = 0;
    9508:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    950a:	d401      	bmi.n	9510 <yield+0x28>
	
};
    950c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    9510:	4b2b      	ldr	r3, [pc, #172]	; (95c0 <yield+0xd8>)
    9512:	681a      	ldr	r2, [r3, #0]
    9514:	2a00      	cmp	r2, #0
    9516:	d0f9      	beq.n	950c <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9518:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    951c:	2a00      	cmp	r2, #0
    951e:	d1f5      	bne.n	950c <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9520:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    9524:	b672      	cpsid	i
		EventResponder *first = firstYield;
    9526:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    9528:	2800      	cmp	r0, #0
    952a:	d03b      	beq.n	95a4 <yield+0xbc>
		if (runningFromYield) {
    952c:	4c25      	ldr	r4, [pc, #148]	; (95c4 <yield+0xdc>)
    952e:	7821      	ldrb	r1, [r4, #0]
    9530:	2900      	cmp	r1, #0
    9532:	d137      	bne.n	95a4 <yield+0xbc>
		runningFromYield = true;
    9534:	2201      	movs	r2, #1
    9536:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    9538:	6942      	ldr	r2, [r0, #20]
    953a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    953c:	2a00      	cmp	r2, #0
    953e:	d038      	beq.n	95b2 <yield+0xca>
			firstYield->_prev = nullptr;
    9540:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    9542:	b905      	cbnz	r5, 9546 <yield+0x5e>
    9544:	b662      	cpsie	i
		first->_triggered = false;
    9546:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    9548:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    954a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    954c:	4798      	blx	r3
		runningFromYield = false;
    954e:	7025      	strb	r5, [r4, #0]
    9550:	e7dc      	b.n	950c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9552:	f8df 807c 	ldr.w	r8, [pc, #124]	; 95d0 <yield+0xe8>
    9556:	f898 2000 	ldrb.w	r2, [r8]
    955a:	2a00      	cmp	r2, #0
    955c:	d0d2      	beq.n	9504 <yield+0x1c>
    955e:	2500      	movs	r5, #0
    9560:	f8df 9070 	ldr.w	r9, [pc, #112]	; 95d4 <yield+0xec>
    9564:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    9566:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    956a:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    956c:	6823      	ldr	r3, [r4, #0]
    956e:	4620      	mov	r0, r4
    9570:	691b      	ldr	r3, [r3, #16]
    9572:	4798      	blx	r3
    9574:	b110      	cbz	r0, 957c <yield+0x94>
    9576:	6963      	ldr	r3, [r4, #20]
    9578:	689b      	ldr	r3, [r3, #8]
    957a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    957c:	f898 2000 	ldrb.w	r2, [r8]
    9580:	b2eb      	uxtb	r3, r5
    9582:	429a      	cmp	r2, r3
    9584:	d8ef      	bhi.n	9566 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    9586:	7833      	ldrb	r3, [r6, #0]
    9588:	e7bc      	b.n	9504 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    958a:	f7ff fec5 	bl	9318 <usb_serial_available>
		if (Serial.available()) serialEvent();
    958e:	b968      	cbnz	r0, 95ac <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    9590:	4b0d      	ldr	r3, [pc, #52]	; (95c8 <yield+0xe0>)
    9592:	781b      	ldrb	r3, [r3, #0]
    9594:	b90b      	cbnz	r3, 959a <yield+0xb2>
    9596:	7833      	ldrb	r3, [r6, #0]
    9598:	e7b2      	b.n	9500 <yield+0x18>
    959a:	7833      	ldrb	r3, [r6, #0]
    959c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    95a0:	7033      	strb	r3, [r6, #0]
    95a2:	e7ad      	b.n	9500 <yield+0x18>
		if (doit) __enable_irq();
    95a4:	2d00      	cmp	r5, #0
    95a6:	d1b1      	bne.n	950c <yield+0x24>
    95a8:	b662      	cpsie	i
    95aa:	e7af      	b.n	950c <yield+0x24>
		if (Serial.available()) serialEvent();
    95ac:	f000 f8cc 	bl	9748 <serialEvent()>
    95b0:	e7ee      	b.n	9590 <yield+0xa8>
			lastYield = nullptr;
    95b2:	4b06      	ldr	r3, [pc, #24]	; (95cc <yield+0xe4>)
    95b4:	601a      	str	r2, [r3, #0]
    95b6:	e7c4      	b.n	9542 <yield+0x5a>
    95b8:	20008bf7 	.word	0x20008bf7
    95bc:	2001ec99 	.word	0x2001ec99
    95c0:	2001e074 	.word	0x2001e074
    95c4:	2001ec97 	.word	0x2001ec97
    95c8:	60002766 	.word	0x60002766
    95cc:	2001e080 	.word	0x2001e080
    95d0:	2001ec98 	.word	0x2001ec98
    95d4:	2001e084 	.word	0x2001e084

000095d8 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    95d8:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    95da:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    95dc:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    95e0:	4619      	mov	r1, r3
{
    95e2:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    95e4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    95e8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    95ec:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    95f0:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    95f4:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    95f8:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    95fa:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    95fe:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    9602:	b29b      	uxth	r3, r3
    9604:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    9608:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    960c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    9610:	3101      	adds	r1, #1
    9612:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    9616:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9618:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    961a:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    961e:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9620:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9622:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9624:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9626:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    962a:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    962c:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    962e:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9630:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    9632:	d1eb      	bne.n	960c <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9634:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    9638:	b29b      	uxth	r3, r3
    963a:	f043 030f 	orr.w	r3, r3, #15
    963e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9642:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    9646:	b29b      	uxth	r3, r3
    9648:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    964c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    9650:	bd10      	pop	{r4, pc}
    9652:	bf00      	nop

00009654 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9654:	4b37      	ldr	r3, [pc, #220]	; (9734 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9656:	4a38      	ldr	r2, [pc, #224]	; (9738 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9658:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    965a:	4838      	ldr	r0, [pc, #224]	; (973c <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    965c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    9660:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9662:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9664:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9668:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    966c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9670:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9674:	430a      	orrs	r2, r1
    9676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    967a:	f7ff ffad 	bl	95d8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    967e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    9682:	f7ff ffa9 	bl	95d8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    9686:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    968a:	f7ff ffa5 	bl	95d8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    968e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    9692:	f7ff ffa1 	bl	95d8 <flexpwm_init>
	for (i=0; i < 4; i++) {
    9696:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    9698:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    969c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    96a0:	4611      	mov	r1, r2
    96a2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    96a6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    96aa:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    96ac:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    96ae:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    96b0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    96b2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    96b6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    96b8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    96ba:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    96be:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    96c0:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    96c2:	d1ee      	bne.n	96a2 <pwm_init+0x4e>
    96c4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    96c6:	481e      	ldr	r0, [pc, #120]	; (9740 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    96c8:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    96cc:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    96d0:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    96d2:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    96d6:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    96da:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    96de:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    96e2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    96e4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    96e6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    96e8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    96ea:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    96ee:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    96f0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    96f2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    96f6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    96f8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    96fa:	d1ee      	bne.n	96da <pwm_init+0x86>
    96fc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    96fe:	4811      	ldr	r0, [pc, #68]	; (9744 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9700:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9702:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    9706:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9708:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    970c:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    9710:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    9714:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    9718:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    971a:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    971c:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    971e:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9720:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9722:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9724:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9726:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    972a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    972c:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    9730:	d1ee      	bne.n	9710 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    9732:	bd70      	pop	{r4, r5, r6, pc}
    9734:	400fc000 	.word	0x400fc000
    9738:	fc030000 	.word	0xfc030000
    973c:	403dc000 	.word	0x403dc000
    9740:	401e0000 	.word	0x401e0000
    9744:	401e4000 	.word	0x401e4000

00009748 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    9748:	4770      	bx	lr
    974a:	bf00      	nop

0000974c <sm_align_pool>:
{
    974c:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    974e:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    9752:	b15b      	cbz	r3, 976c <sm_align_pool+0x20>
    9754:	b1ba      	cbz	r2, 9786 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    9756:	4b0f      	ldr	r3, [pc, #60]	; (9794 <sm_align_pool+0x48>)
    9758:	fba3 1302 	umull	r1, r3, r3, r2
    975c:	08db      	lsrs	r3, r3, #3
    975e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9762:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    9766:	d10a      	bne.n	977e <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    9768:	2001      	movs	r0, #1
}
    976a:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    976c:	4b09      	ldr	r3, [pc, #36]	; (9794 <sm_align_pool+0x48>)
    976e:	fba3 1302 	umull	r1, r3, r3, r2
    9772:	08db      	lsrs	r3, r3, #3
    9774:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    9778:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    977c:	d001      	beq.n	9782 <sm_align_pool+0x36>
    977e:	1ad2      	subs	r2, r2, r3
    9780:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    9782:	2af0      	cmp	r2, #240	; 0xf0
    9784:	d8f0      	bhi.n	9768 <sm_align_pool+0x1c>
		errno = ENOSPC;
    9786:	f002 fa3b 	bl	bc00 <__errno>
    978a:	221c      	movs	r2, #28
    978c:	4603      	mov	r3, r0
    978e:	2000      	movs	r0, #0
    9790:	601a      	str	r2, [r3, #0]
}
    9792:	bd08      	pop	{r3, pc}
    9794:	aaaaaaab 	.word	0xaaaaaaab

00009798 <sm_set_pool>:
{
    9798:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    979a:	4604      	mov	r4, r0
    979c:	b338      	cbz	r0, 97ee <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    979e:	b119      	cbz	r1, 97a8 <sm_set_pool+0x10>
    97a0:	fab2 f682 	clz	r6, r2
    97a4:	0976      	lsrs	r6, r6, #5
    97a6:	b9a2      	cbnz	r2, 97d2 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    97a8:	6820      	ldr	r0, [r4, #0]
    97aa:	b300      	cbz	r0, 97ee <sm_set_pool+0x56>
    97ac:	6862      	ldr	r2, [r4, #4]
    97ae:	b1f2      	cbz	r2, 97ee <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    97b0:	4b18      	ldr	r3, [pc, #96]	; (9814 <sm_set_pool+0x7c>)
    97b2:	4919      	ldr	r1, [pc, #100]	; (9818 <sm_set_pool+0x80>)
    97b4:	fb02 f303 	mul.w	r3, r2, r3
    97b8:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    97bc:	d317      	bcc.n	97ee <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    97be:	68a3      	ldr	r3, [r4, #8]
    97c0:	b9e3      	cbnz	r3, 97fc <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    97c2:	2200      	movs	r2, #0
			return 1;
    97c4:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    97c6:	6022      	str	r2, [r4, #0]
    97c8:	6062      	str	r2, [r4, #4]
    97ca:	60a2      	str	r2, [r4, #8]
    97cc:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    97ce:	4618      	mov	r0, r3
    97d0:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    97d2:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    97d4:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    97d6:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    97da:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    97dc:	f7ff ffb6 	bl	974c <sm_align_pool>
    97e0:	4603      	mov	r3, r0
    97e2:	2800      	cmp	r0, #0
    97e4:	d0f3      	beq.n	97ce <sm_set_pool+0x36>
	if (do_zero) {
    97e6:	b96d      	cbnz	r5, 9804 <sm_set_pool+0x6c>
	return 1;
    97e8:	2301      	movs	r3, #1
}
    97ea:	4618      	mov	r0, r3
    97ec:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    97ee:	f002 fa07 	bl	bc00 <__errno>
    97f2:	2216      	movs	r2, #22
		return 0;
    97f4:	2300      	movs	r3, #0
		errno = EINVAL;
    97f6:	6002      	str	r2, [r0, #0]
}
    97f8:	4618      	mov	r0, r3
    97fa:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    97fc:	2100      	movs	r1, #0
    97fe:	f002 f8c9 	bl	b994 <memset>
    9802:	e7de      	b.n	97c2 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    9804:	6862      	ldr	r2, [r4, #4]
    9806:	4631      	mov	r1, r6
    9808:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    980a:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    980c:	f002 f8c2 	bl	b994 <memset>
	return 1;
    9810:	2301      	movs	r3, #1
    9812:	e7dc      	b.n	97ce <sm_set_pool+0x36>
    9814:	aaaaaaab 	.word	0xaaaaaaab
    9818:	15555555 	.word	0x15555555

0000981c <__aeabi_atexit>:
    981c:	4603      	mov	r3, r0
    981e:	4608      	mov	r0, r1
    9820:	4619      	mov	r1, r3
    9822:	f001 be27 	b.w	b474 <__cxa_atexit>
    9826:	bf00      	nop

00009828 <__aeabi_uldivmod>:
    9828:	b953      	cbnz	r3, 9840 <__aeabi_uldivmod+0x18>
    982a:	b94a      	cbnz	r2, 9840 <__aeabi_uldivmod+0x18>
    982c:	2900      	cmp	r1, #0
    982e:	bf08      	it	eq
    9830:	2800      	cmpeq	r0, #0
    9832:	bf1c      	itt	ne
    9834:	f04f 31ff 	movne.w	r1, #4294967295
    9838:	f04f 30ff 	movne.w	r0, #4294967295
    983c:	f000 b970 	b.w	9b20 <__aeabi_idiv0>
    9840:	f1ad 0c08 	sub.w	ip, sp, #8
    9844:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    9848:	f000 f806 	bl	9858 <__udivmoddi4>
    984c:	f8dd e004 	ldr.w	lr, [sp, #4]
    9850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    9854:	b004      	add	sp, #16
    9856:	4770      	bx	lr

00009858 <__udivmoddi4>:
    9858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    985c:	9e08      	ldr	r6, [sp, #32]
    985e:	460d      	mov	r5, r1
    9860:	4604      	mov	r4, r0
    9862:	460f      	mov	r7, r1
    9864:	2b00      	cmp	r3, #0
    9866:	d14a      	bne.n	98fe <__udivmoddi4+0xa6>
    9868:	428a      	cmp	r2, r1
    986a:	4694      	mov	ip, r2
    986c:	d965      	bls.n	993a <__udivmoddi4+0xe2>
    986e:	fab2 f382 	clz	r3, r2
    9872:	b143      	cbz	r3, 9886 <__udivmoddi4+0x2e>
    9874:	fa02 fc03 	lsl.w	ip, r2, r3
    9878:	f1c3 0220 	rsb	r2, r3, #32
    987c:	409f      	lsls	r7, r3
    987e:	fa20 f202 	lsr.w	r2, r0, r2
    9882:	4317      	orrs	r7, r2
    9884:	409c      	lsls	r4, r3
    9886:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    988a:	fa1f f58c 	uxth.w	r5, ip
    988e:	fbb7 f1fe 	udiv	r1, r7, lr
    9892:	0c22      	lsrs	r2, r4, #16
    9894:	fb0e 7711 	mls	r7, lr, r1, r7
    9898:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    989c:	fb01 f005 	mul.w	r0, r1, r5
    98a0:	4290      	cmp	r0, r2
    98a2:	d90a      	bls.n	98ba <__udivmoddi4+0x62>
    98a4:	eb1c 0202 	adds.w	r2, ip, r2
    98a8:	f101 37ff 	add.w	r7, r1, #4294967295
    98ac:	f080 811c 	bcs.w	9ae8 <__udivmoddi4+0x290>
    98b0:	4290      	cmp	r0, r2
    98b2:	f240 8119 	bls.w	9ae8 <__udivmoddi4+0x290>
    98b6:	3902      	subs	r1, #2
    98b8:	4462      	add	r2, ip
    98ba:	1a12      	subs	r2, r2, r0
    98bc:	b2a4      	uxth	r4, r4
    98be:	fbb2 f0fe 	udiv	r0, r2, lr
    98c2:	fb0e 2210 	mls	r2, lr, r0, r2
    98c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    98ca:	fb00 f505 	mul.w	r5, r0, r5
    98ce:	42a5      	cmp	r5, r4
    98d0:	d90a      	bls.n	98e8 <__udivmoddi4+0x90>
    98d2:	eb1c 0404 	adds.w	r4, ip, r4
    98d6:	f100 32ff 	add.w	r2, r0, #4294967295
    98da:	f080 8107 	bcs.w	9aec <__udivmoddi4+0x294>
    98de:	42a5      	cmp	r5, r4
    98e0:	f240 8104 	bls.w	9aec <__udivmoddi4+0x294>
    98e4:	4464      	add	r4, ip
    98e6:	3802      	subs	r0, #2
    98e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    98ec:	1b64      	subs	r4, r4, r5
    98ee:	2100      	movs	r1, #0
    98f0:	b11e      	cbz	r6, 98fa <__udivmoddi4+0xa2>
    98f2:	40dc      	lsrs	r4, r3
    98f4:	2300      	movs	r3, #0
    98f6:	e9c6 4300 	strd	r4, r3, [r6]
    98fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    98fe:	428b      	cmp	r3, r1
    9900:	d908      	bls.n	9914 <__udivmoddi4+0xbc>
    9902:	2e00      	cmp	r6, #0
    9904:	f000 80ed 	beq.w	9ae2 <__udivmoddi4+0x28a>
    9908:	2100      	movs	r1, #0
    990a:	e9c6 0500 	strd	r0, r5, [r6]
    990e:	4608      	mov	r0, r1
    9910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9914:	fab3 f183 	clz	r1, r3
    9918:	2900      	cmp	r1, #0
    991a:	d149      	bne.n	99b0 <__udivmoddi4+0x158>
    991c:	42ab      	cmp	r3, r5
    991e:	d302      	bcc.n	9926 <__udivmoddi4+0xce>
    9920:	4282      	cmp	r2, r0
    9922:	f200 80f8 	bhi.w	9b16 <__udivmoddi4+0x2be>
    9926:	1a84      	subs	r4, r0, r2
    9928:	eb65 0203 	sbc.w	r2, r5, r3
    992c:	2001      	movs	r0, #1
    992e:	4617      	mov	r7, r2
    9930:	2e00      	cmp	r6, #0
    9932:	d0e2      	beq.n	98fa <__udivmoddi4+0xa2>
    9934:	e9c6 4700 	strd	r4, r7, [r6]
    9938:	e7df      	b.n	98fa <__udivmoddi4+0xa2>
    993a:	b902      	cbnz	r2, 993e <__udivmoddi4+0xe6>
    993c:	deff      	udf	#255	; 0xff
    993e:	fab2 f382 	clz	r3, r2
    9942:	2b00      	cmp	r3, #0
    9944:	f040 8090 	bne.w	9a68 <__udivmoddi4+0x210>
    9948:	1a8a      	subs	r2, r1, r2
    994a:	ea4f 471c 	mov.w	r7, ip, lsr #16
    994e:	fa1f fe8c 	uxth.w	lr, ip
    9952:	2101      	movs	r1, #1
    9954:	fbb2 f5f7 	udiv	r5, r2, r7
    9958:	fb07 2015 	mls	r0, r7, r5, r2
    995c:	0c22      	lsrs	r2, r4, #16
    995e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    9962:	fb0e f005 	mul.w	r0, lr, r5
    9966:	4290      	cmp	r0, r2
    9968:	d908      	bls.n	997c <__udivmoddi4+0x124>
    996a:	eb1c 0202 	adds.w	r2, ip, r2
    996e:	f105 38ff 	add.w	r8, r5, #4294967295
    9972:	d202      	bcs.n	997a <__udivmoddi4+0x122>
    9974:	4290      	cmp	r0, r2
    9976:	f200 80cb 	bhi.w	9b10 <__udivmoddi4+0x2b8>
    997a:	4645      	mov	r5, r8
    997c:	1a12      	subs	r2, r2, r0
    997e:	b2a4      	uxth	r4, r4
    9980:	fbb2 f0f7 	udiv	r0, r2, r7
    9984:	fb07 2210 	mls	r2, r7, r0, r2
    9988:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    998c:	fb0e fe00 	mul.w	lr, lr, r0
    9990:	45a6      	cmp	lr, r4
    9992:	d908      	bls.n	99a6 <__udivmoddi4+0x14e>
    9994:	eb1c 0404 	adds.w	r4, ip, r4
    9998:	f100 32ff 	add.w	r2, r0, #4294967295
    999c:	d202      	bcs.n	99a4 <__udivmoddi4+0x14c>
    999e:	45a6      	cmp	lr, r4
    99a0:	f200 80bb 	bhi.w	9b1a <__udivmoddi4+0x2c2>
    99a4:	4610      	mov	r0, r2
    99a6:	eba4 040e 	sub.w	r4, r4, lr
    99aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    99ae:	e79f      	b.n	98f0 <__udivmoddi4+0x98>
    99b0:	f1c1 0720 	rsb	r7, r1, #32
    99b4:	408b      	lsls	r3, r1
    99b6:	fa22 fc07 	lsr.w	ip, r2, r7
    99ba:	ea4c 0c03 	orr.w	ip, ip, r3
    99be:	fa05 f401 	lsl.w	r4, r5, r1
    99c2:	fa20 f307 	lsr.w	r3, r0, r7
    99c6:	40fd      	lsrs	r5, r7
    99c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
    99cc:	4323      	orrs	r3, r4
    99ce:	fbb5 f8f9 	udiv	r8, r5, r9
    99d2:	fa1f fe8c 	uxth.w	lr, ip
    99d6:	fb09 5518 	mls	r5, r9, r8, r5
    99da:	0c1c      	lsrs	r4, r3, #16
    99dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    99e0:	fb08 f50e 	mul.w	r5, r8, lr
    99e4:	42a5      	cmp	r5, r4
    99e6:	fa02 f201 	lsl.w	r2, r2, r1
    99ea:	fa00 f001 	lsl.w	r0, r0, r1
    99ee:	d90b      	bls.n	9a08 <__udivmoddi4+0x1b0>
    99f0:	eb1c 0404 	adds.w	r4, ip, r4
    99f4:	f108 3aff 	add.w	sl, r8, #4294967295
    99f8:	f080 8088 	bcs.w	9b0c <__udivmoddi4+0x2b4>
    99fc:	42a5      	cmp	r5, r4
    99fe:	f240 8085 	bls.w	9b0c <__udivmoddi4+0x2b4>
    9a02:	f1a8 0802 	sub.w	r8, r8, #2
    9a06:	4464      	add	r4, ip
    9a08:	1b64      	subs	r4, r4, r5
    9a0a:	b29d      	uxth	r5, r3
    9a0c:	fbb4 f3f9 	udiv	r3, r4, r9
    9a10:	fb09 4413 	mls	r4, r9, r3, r4
    9a14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    9a18:	fb03 fe0e 	mul.w	lr, r3, lr
    9a1c:	45a6      	cmp	lr, r4
    9a1e:	d908      	bls.n	9a32 <__udivmoddi4+0x1da>
    9a20:	eb1c 0404 	adds.w	r4, ip, r4
    9a24:	f103 35ff 	add.w	r5, r3, #4294967295
    9a28:	d26c      	bcs.n	9b04 <__udivmoddi4+0x2ac>
    9a2a:	45a6      	cmp	lr, r4
    9a2c:	d96a      	bls.n	9b04 <__udivmoddi4+0x2ac>
    9a2e:	3b02      	subs	r3, #2
    9a30:	4464      	add	r4, ip
    9a32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    9a36:	fba3 9502 	umull	r9, r5, r3, r2
    9a3a:	eba4 040e 	sub.w	r4, r4, lr
    9a3e:	42ac      	cmp	r4, r5
    9a40:	46c8      	mov	r8, r9
    9a42:	46ae      	mov	lr, r5
    9a44:	d356      	bcc.n	9af4 <__udivmoddi4+0x29c>
    9a46:	d053      	beq.n	9af0 <__udivmoddi4+0x298>
    9a48:	b156      	cbz	r6, 9a60 <__udivmoddi4+0x208>
    9a4a:	ebb0 0208 	subs.w	r2, r0, r8
    9a4e:	eb64 040e 	sbc.w	r4, r4, lr
    9a52:	fa04 f707 	lsl.w	r7, r4, r7
    9a56:	40ca      	lsrs	r2, r1
    9a58:	40cc      	lsrs	r4, r1
    9a5a:	4317      	orrs	r7, r2
    9a5c:	e9c6 7400 	strd	r7, r4, [r6]
    9a60:	4618      	mov	r0, r3
    9a62:	2100      	movs	r1, #0
    9a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a68:	f1c3 0120 	rsb	r1, r3, #32
    9a6c:	fa02 fc03 	lsl.w	ip, r2, r3
    9a70:	fa20 f201 	lsr.w	r2, r0, r1
    9a74:	fa25 f101 	lsr.w	r1, r5, r1
    9a78:	409d      	lsls	r5, r3
    9a7a:	432a      	orrs	r2, r5
    9a7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
    9a80:	fa1f fe8c 	uxth.w	lr, ip
    9a84:	fbb1 f0f7 	udiv	r0, r1, r7
    9a88:	fb07 1510 	mls	r5, r7, r0, r1
    9a8c:	0c11      	lsrs	r1, r2, #16
    9a8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    9a92:	fb00 f50e 	mul.w	r5, r0, lr
    9a96:	428d      	cmp	r5, r1
    9a98:	fa04 f403 	lsl.w	r4, r4, r3
    9a9c:	d908      	bls.n	9ab0 <__udivmoddi4+0x258>
    9a9e:	eb1c 0101 	adds.w	r1, ip, r1
    9aa2:	f100 38ff 	add.w	r8, r0, #4294967295
    9aa6:	d22f      	bcs.n	9b08 <__udivmoddi4+0x2b0>
    9aa8:	428d      	cmp	r5, r1
    9aaa:	d92d      	bls.n	9b08 <__udivmoddi4+0x2b0>
    9aac:	3802      	subs	r0, #2
    9aae:	4461      	add	r1, ip
    9ab0:	1b49      	subs	r1, r1, r5
    9ab2:	b292      	uxth	r2, r2
    9ab4:	fbb1 f5f7 	udiv	r5, r1, r7
    9ab8:	fb07 1115 	mls	r1, r7, r5, r1
    9abc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    9ac0:	fb05 f10e 	mul.w	r1, r5, lr
    9ac4:	4291      	cmp	r1, r2
    9ac6:	d908      	bls.n	9ada <__udivmoddi4+0x282>
    9ac8:	eb1c 0202 	adds.w	r2, ip, r2
    9acc:	f105 38ff 	add.w	r8, r5, #4294967295
    9ad0:	d216      	bcs.n	9b00 <__udivmoddi4+0x2a8>
    9ad2:	4291      	cmp	r1, r2
    9ad4:	d914      	bls.n	9b00 <__udivmoddi4+0x2a8>
    9ad6:	3d02      	subs	r5, #2
    9ad8:	4462      	add	r2, ip
    9ada:	1a52      	subs	r2, r2, r1
    9adc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    9ae0:	e738      	b.n	9954 <__udivmoddi4+0xfc>
    9ae2:	4631      	mov	r1, r6
    9ae4:	4630      	mov	r0, r6
    9ae6:	e708      	b.n	98fa <__udivmoddi4+0xa2>
    9ae8:	4639      	mov	r1, r7
    9aea:	e6e6      	b.n	98ba <__udivmoddi4+0x62>
    9aec:	4610      	mov	r0, r2
    9aee:	e6fb      	b.n	98e8 <__udivmoddi4+0x90>
    9af0:	4548      	cmp	r0, r9
    9af2:	d2a9      	bcs.n	9a48 <__udivmoddi4+0x1f0>
    9af4:	ebb9 0802 	subs.w	r8, r9, r2
    9af8:	eb65 0e0c 	sbc.w	lr, r5, ip
    9afc:	3b01      	subs	r3, #1
    9afe:	e7a3      	b.n	9a48 <__udivmoddi4+0x1f0>
    9b00:	4645      	mov	r5, r8
    9b02:	e7ea      	b.n	9ada <__udivmoddi4+0x282>
    9b04:	462b      	mov	r3, r5
    9b06:	e794      	b.n	9a32 <__udivmoddi4+0x1da>
    9b08:	4640      	mov	r0, r8
    9b0a:	e7d1      	b.n	9ab0 <__udivmoddi4+0x258>
    9b0c:	46d0      	mov	r8, sl
    9b0e:	e77b      	b.n	9a08 <__udivmoddi4+0x1b0>
    9b10:	3d02      	subs	r5, #2
    9b12:	4462      	add	r2, ip
    9b14:	e732      	b.n	997c <__udivmoddi4+0x124>
    9b16:	4608      	mov	r0, r1
    9b18:	e70a      	b.n	9930 <__udivmoddi4+0xd8>
    9b1a:	4464      	add	r4, ip
    9b1c:	3802      	subs	r0, #2
    9b1e:	e742      	b.n	99a6 <__udivmoddi4+0x14e>

00009b20 <__aeabi_idiv0>:
    9b20:	4770      	bx	lr
    9b22:	bf00      	nop

00009b24 <malloc>:
    9b24:	4b02      	ldr	r3, [pc, #8]	; (9b30 <malloc+0xc>)
    9b26:	4601      	mov	r1, r0
    9b28:	6818      	ldr	r0, [r3, #0]
    9b2a:	f000 b80b 	b.w	9b44 <_malloc_r>
    9b2e:	bf00      	nop
    9b30:	20008b7c 	.word	0x20008b7c

00009b34 <free>:
    9b34:	4b02      	ldr	r3, [pc, #8]	; (9b40 <free+0xc>)
    9b36:	4601      	mov	r1, r0
    9b38:	6818      	ldr	r0, [r3, #0]
    9b3a:	f002 bbd3 	b.w	c2e4 <_free_r>
    9b3e:	bf00      	nop
    9b40:	20008b7c 	.word	0x20008b7c

00009b44 <_malloc_r>:
    9b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b48:	f101 060b 	add.w	r6, r1, #11
    9b4c:	2e16      	cmp	r6, #22
    9b4e:	b083      	sub	sp, #12
    9b50:	4604      	mov	r4, r0
    9b52:	d824      	bhi.n	9b9e <_malloc_r+0x5a>
    9b54:	2910      	cmp	r1, #16
    9b56:	f200 80ba 	bhi.w	9cce <_malloc_r+0x18a>
    9b5a:	f000 faa3 	bl	a0a4 <__malloc_lock>
    9b5e:	2610      	movs	r6, #16
    9b60:	2218      	movs	r2, #24
    9b62:	2002      	movs	r0, #2
    9b64:	4fb5      	ldr	r7, [pc, #724]	; (9e3c <_malloc_r+0x2f8>)
    9b66:	443a      	add	r2, r7
    9b68:	f1a2 0108 	sub.w	r1, r2, #8
    9b6c:	6853      	ldr	r3, [r2, #4]
    9b6e:	428b      	cmp	r3, r1
    9b70:	f000 80ba 	beq.w	9ce8 <_malloc_r+0x1a4>
    9b74:	685a      	ldr	r2, [r3, #4]
    9b76:	68d9      	ldr	r1, [r3, #12]
    9b78:	f022 0203 	bic.w	r2, r2, #3
    9b7c:	441a      	add	r2, r3
    9b7e:	689d      	ldr	r5, [r3, #8]
    9b80:	60e9      	str	r1, [r5, #12]
    9b82:	608d      	str	r5, [r1, #8]
    9b84:	6851      	ldr	r1, [r2, #4]
    9b86:	f041 0101 	orr.w	r1, r1, #1
    9b8a:	4620      	mov	r0, r4
    9b8c:	6051      	str	r1, [r2, #4]
    9b8e:	f103 0508 	add.w	r5, r3, #8
    9b92:	f000 fa8d 	bl	a0b0 <__malloc_unlock>
    9b96:	4628      	mov	r0, r5
    9b98:	b003      	add	sp, #12
    9b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b9e:	f036 0607 	bics.w	r6, r6, #7
    9ba2:	f100 8094 	bmi.w	9cce <_malloc_r+0x18a>
    9ba6:	42b1      	cmp	r1, r6
    9ba8:	f200 8091 	bhi.w	9cce <_malloc_r+0x18a>
    9bac:	f000 fa7a 	bl	a0a4 <__malloc_lock>
    9bb0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    9bb4:	f0c0 819a 	bcc.w	9eec <_malloc_r+0x3a8>
    9bb8:	0a73      	lsrs	r3, r6, #9
    9bba:	f000 808f 	beq.w	9cdc <_malloc_r+0x198>
    9bbe:	2b04      	cmp	r3, #4
    9bc0:	f200 816f 	bhi.w	9ea2 <_malloc_r+0x35e>
    9bc4:	09b3      	lsrs	r3, r6, #6
    9bc6:	f103 0039 	add.w	r0, r3, #57	; 0x39
    9bca:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    9bce:	00c3      	lsls	r3, r0, #3
    9bd0:	4f9a      	ldr	r7, [pc, #616]	; (9e3c <_malloc_r+0x2f8>)
    9bd2:	443b      	add	r3, r7
    9bd4:	f1a3 0508 	sub.w	r5, r3, #8
    9bd8:	685b      	ldr	r3, [r3, #4]
    9bda:	429d      	cmp	r5, r3
    9bdc:	d106      	bne.n	9bec <_malloc_r+0xa8>
    9bde:	e00c      	b.n	9bfa <_malloc_r+0xb6>
    9be0:	2900      	cmp	r1, #0
    9be2:	f280 8127 	bge.w	9e34 <_malloc_r+0x2f0>
    9be6:	68db      	ldr	r3, [r3, #12]
    9be8:	429d      	cmp	r5, r3
    9bea:	d006      	beq.n	9bfa <_malloc_r+0xb6>
    9bec:	685a      	ldr	r2, [r3, #4]
    9bee:	f022 0203 	bic.w	r2, r2, #3
    9bf2:	1b91      	subs	r1, r2, r6
    9bf4:	290f      	cmp	r1, #15
    9bf6:	ddf3      	ble.n	9be0 <_malloc_r+0x9c>
    9bf8:	4660      	mov	r0, ip
    9bfa:	693d      	ldr	r5, [r7, #16]
    9bfc:	f8df c250 	ldr.w	ip, [pc, #592]	; 9e50 <_malloc_r+0x30c>
    9c00:	4565      	cmp	r5, ip
    9c02:	d07c      	beq.n	9cfe <_malloc_r+0x1ba>
    9c04:	686a      	ldr	r2, [r5, #4]
    9c06:	f022 0203 	bic.w	r2, r2, #3
    9c0a:	1b93      	subs	r3, r2, r6
    9c0c:	2b0f      	cmp	r3, #15
    9c0e:	f300 817b 	bgt.w	9f08 <_malloc_r+0x3c4>
    9c12:	2b00      	cmp	r3, #0
    9c14:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    9c18:	f280 816c 	bge.w	9ef4 <_malloc_r+0x3b0>
    9c1c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    9c20:	f080 811a 	bcs.w	9e58 <_malloc_r+0x314>
    9c24:	08d3      	lsrs	r3, r2, #3
    9c26:	6879      	ldr	r1, [r7, #4]
    9c28:	3301      	adds	r3, #1
    9c2a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    9c2e:	2201      	movs	r2, #1
    9c30:	fa02 f20e 	lsl.w	r2, r2, lr
    9c34:	430a      	orrs	r2, r1
    9c36:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    9c3a:	f8c5 e008 	str.w	lr, [r5, #8]
    9c3e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    9c42:	3908      	subs	r1, #8
    9c44:	60e9      	str	r1, [r5, #12]
    9c46:	607a      	str	r2, [r7, #4]
    9c48:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    9c4c:	f8ce 500c 	str.w	r5, [lr, #12]
    9c50:	1083      	asrs	r3, r0, #2
    9c52:	2101      	movs	r1, #1
    9c54:	4099      	lsls	r1, r3
    9c56:	4291      	cmp	r1, r2
    9c58:	d857      	bhi.n	9d0a <_malloc_r+0x1c6>
    9c5a:	4211      	tst	r1, r2
    9c5c:	d106      	bne.n	9c6c <_malloc_r+0x128>
    9c5e:	f020 0003 	bic.w	r0, r0, #3
    9c62:	0049      	lsls	r1, r1, #1
    9c64:	4211      	tst	r1, r2
    9c66:	f100 0004 	add.w	r0, r0, #4
    9c6a:	d0fa      	beq.n	9c62 <_malloc_r+0x11e>
    9c6c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    9c70:	464d      	mov	r5, r9
    9c72:	4686      	mov	lr, r0
    9c74:	f8d5 800c 	ldr.w	r8, [r5, #12]
    9c78:	4545      	cmp	r5, r8
    9c7a:	d108      	bne.n	9c8e <_malloc_r+0x14a>
    9c7c:	e11d      	b.n	9eba <_malloc_r+0x376>
    9c7e:	2b00      	cmp	r3, #0
    9c80:	f280 8124 	bge.w	9ecc <_malloc_r+0x388>
    9c84:	f8d8 800c 	ldr.w	r8, [r8, #12]
    9c88:	4545      	cmp	r5, r8
    9c8a:	f000 8116 	beq.w	9eba <_malloc_r+0x376>
    9c8e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    9c92:	f022 0203 	bic.w	r2, r2, #3
    9c96:	1b93      	subs	r3, r2, r6
    9c98:	2b0f      	cmp	r3, #15
    9c9a:	ddf0      	ble.n	9c7e <_malloc_r+0x13a>
    9c9c:	4620      	mov	r0, r4
    9c9e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    9ca2:	eb08 0106 	add.w	r1, r8, r6
    9ca6:	f046 0601 	orr.w	r6, r6, #1
    9caa:	f8c8 6004 	str.w	r6, [r8, #4]
    9cae:	60ec      	str	r4, [r5, #12]
    9cb0:	60a5      	str	r5, [r4, #8]
    9cb2:	f043 0401 	orr.w	r4, r3, #1
    9cb6:	e9c7 1104 	strd	r1, r1, [r7, #16]
    9cba:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    9cbe:	604c      	str	r4, [r1, #4]
    9cc0:	f848 3002 	str.w	r3, [r8, r2]
    9cc4:	f000 f9f4 	bl	a0b0 <__malloc_unlock>
    9cc8:	f108 0508 	add.w	r5, r8, #8
    9ccc:	e002      	b.n	9cd4 <_malloc_r+0x190>
    9cce:	230c      	movs	r3, #12
    9cd0:	6023      	str	r3, [r4, #0]
    9cd2:	2500      	movs	r5, #0
    9cd4:	4628      	mov	r0, r5
    9cd6:	b003      	add	sp, #12
    9cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
    9ce0:	2040      	movs	r0, #64	; 0x40
    9ce2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    9ce6:	e773      	b.n	9bd0 <_malloc_r+0x8c>
    9ce8:	68d3      	ldr	r3, [r2, #12]
    9cea:	429a      	cmp	r2, r3
    9cec:	bf08      	it	eq
    9cee:	3002      	addeq	r0, #2
    9cf0:	f47f af40 	bne.w	9b74 <_malloc_r+0x30>
    9cf4:	693d      	ldr	r5, [r7, #16]
    9cf6:	f8df c158 	ldr.w	ip, [pc, #344]	; 9e50 <_malloc_r+0x30c>
    9cfa:	4565      	cmp	r5, ip
    9cfc:	d182      	bne.n	9c04 <_malloc_r+0xc0>
    9cfe:	687a      	ldr	r2, [r7, #4]
    9d00:	1083      	asrs	r3, r0, #2
    9d02:	2101      	movs	r1, #1
    9d04:	4099      	lsls	r1, r3
    9d06:	4291      	cmp	r1, r2
    9d08:	d9a7      	bls.n	9c5a <_malloc_r+0x116>
    9d0a:	68bd      	ldr	r5, [r7, #8]
    9d0c:	686b      	ldr	r3, [r5, #4]
    9d0e:	f023 0903 	bic.w	r9, r3, #3
    9d12:	454e      	cmp	r6, r9
    9d14:	d803      	bhi.n	9d1e <_malloc_r+0x1da>
    9d16:	eba9 0306 	sub.w	r3, r9, r6
    9d1a:	2b0f      	cmp	r3, #15
    9d1c:	dc7a      	bgt.n	9e14 <_malloc_r+0x2d0>
    9d1e:	f8df b134 	ldr.w	fp, [pc, #308]	; 9e54 <_malloc_r+0x310>
    9d22:	4b47      	ldr	r3, [pc, #284]	; (9e40 <_malloc_r+0x2fc>)
    9d24:	f8db 2000 	ldr.w	r2, [fp]
    9d28:	681b      	ldr	r3, [r3, #0]
    9d2a:	3201      	adds	r2, #1
    9d2c:	4433      	add	r3, r6
    9d2e:	eb05 0a09 	add.w	sl, r5, r9
    9d32:	f000 8133 	beq.w	9f9c <_malloc_r+0x458>
    9d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    9d3a:	330f      	adds	r3, #15
    9d3c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    9d40:	f028 080f 	bic.w	r8, r8, #15
    9d44:	4641      	mov	r1, r8
    9d46:	4620      	mov	r0, r4
    9d48:	f001 ff32 	bl	bbb0 <_sbrk_r>
    9d4c:	1c41      	adds	r1, r0, #1
    9d4e:	4602      	mov	r2, r0
    9d50:	f000 80f3 	beq.w	9f3a <_malloc_r+0x3f6>
    9d54:	4582      	cmp	sl, r0
    9d56:	f200 80ee 	bhi.w	9f36 <_malloc_r+0x3f2>
    9d5a:	4b3a      	ldr	r3, [pc, #232]	; (9e44 <_malloc_r+0x300>)
    9d5c:	6819      	ldr	r1, [r3, #0]
    9d5e:	4441      	add	r1, r8
    9d60:	6019      	str	r1, [r3, #0]
    9d62:	4608      	mov	r0, r1
    9d64:	f000 814e 	beq.w	a004 <_malloc_r+0x4c0>
    9d68:	f8db 1000 	ldr.w	r1, [fp]
    9d6c:	9301      	str	r3, [sp, #4]
    9d6e:	3101      	adds	r1, #1
    9d70:	bf1b      	ittet	ne
    9d72:	eba2 010a 	subne.w	r1, r2, sl
    9d76:	1809      	addne	r1, r1, r0
    9d78:	f8cb 2000 	streq.w	r2, [fp]
    9d7c:	6019      	strne	r1, [r3, #0]
    9d7e:	f012 0b07 	ands.w	fp, r2, #7
    9d82:	f000 8117 	beq.w	9fb4 <_malloc_r+0x470>
    9d86:	f1cb 0108 	rsb	r1, fp, #8
    9d8a:	440a      	add	r2, r1
    9d8c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    9d90:	4490      	add	r8, r2
    9d92:	3108      	adds	r1, #8
    9d94:	eba1 0108 	sub.w	r1, r1, r8
    9d98:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    9d9c:	4651      	mov	r1, sl
    9d9e:	4620      	mov	r0, r4
    9da0:	9200      	str	r2, [sp, #0]
    9da2:	f001 ff05 	bl	bbb0 <_sbrk_r>
    9da6:	1c42      	adds	r2, r0, #1
    9da8:	e9dd 2300 	ldrd	r2, r3, [sp]
    9dac:	f000 814f 	beq.w	a04e <_malloc_r+0x50a>
    9db0:	1a80      	subs	r0, r0, r2
    9db2:	eb00 080a 	add.w	r8, r0, sl
    9db6:	6819      	ldr	r1, [r3, #0]
    9db8:	60ba      	str	r2, [r7, #8]
    9dba:	f048 0001 	orr.w	r0, r8, #1
    9dbe:	4451      	add	r1, sl
    9dc0:	42bd      	cmp	r5, r7
    9dc2:	6050      	str	r0, [r2, #4]
    9dc4:	6019      	str	r1, [r3, #0]
    9dc6:	f000 8129 	beq.w	a01c <_malloc_r+0x4d8>
    9dca:	f1b9 0f0f 	cmp.w	r9, #15
    9dce:	f240 8127 	bls.w	a020 <_malloc_r+0x4dc>
    9dd2:	6868      	ldr	r0, [r5, #4]
    9dd4:	f1a9 0c0c 	sub.w	ip, r9, #12
    9dd8:	f02c 0c07 	bic.w	ip, ip, #7
    9ddc:	f000 0001 	and.w	r0, r0, #1
    9de0:	ea40 000c 	orr.w	r0, r0, ip
    9de4:	6068      	str	r0, [r5, #4]
    9de6:	f04f 0e05 	mov.w	lr, #5
    9dea:	eb05 000c 	add.w	r0, r5, ip
    9dee:	f1bc 0f0f 	cmp.w	ip, #15
    9df2:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    9df6:	f200 8132 	bhi.w	a05e <_malloc_r+0x51a>
    9dfa:	6850      	ldr	r0, [r2, #4]
    9dfc:	4615      	mov	r5, r2
    9dfe:	4b12      	ldr	r3, [pc, #72]	; (9e48 <_malloc_r+0x304>)
    9e00:	681a      	ldr	r2, [r3, #0]
    9e02:	428a      	cmp	r2, r1
    9e04:	bf38      	it	cc
    9e06:	6019      	strcc	r1, [r3, #0]
    9e08:	4b10      	ldr	r3, [pc, #64]	; (9e4c <_malloc_r+0x308>)
    9e0a:	681a      	ldr	r2, [r3, #0]
    9e0c:	428a      	cmp	r2, r1
    9e0e:	bf38      	it	cc
    9e10:	6019      	strcc	r1, [r3, #0]
    9e12:	e094      	b.n	9f3e <_malloc_r+0x3fa>
    9e14:	19aa      	adds	r2, r5, r6
    9e16:	f043 0301 	orr.w	r3, r3, #1
    9e1a:	f046 0601 	orr.w	r6, r6, #1
    9e1e:	606e      	str	r6, [r5, #4]
    9e20:	4620      	mov	r0, r4
    9e22:	60ba      	str	r2, [r7, #8]
    9e24:	6053      	str	r3, [r2, #4]
    9e26:	f000 f943 	bl	a0b0 <__malloc_unlock>
    9e2a:	3508      	adds	r5, #8
    9e2c:	4628      	mov	r0, r5
    9e2e:	b003      	add	sp, #12
    9e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e34:	68d9      	ldr	r1, [r3, #12]
    9e36:	441a      	add	r2, r3
    9e38:	e6a1      	b.n	9b7e <_malloc_r+0x3a>
    9e3a:	bf00      	nop
    9e3c:	20008760 	.word	0x20008760
    9e40:	2001e2dc 	.word	0x2001e2dc
    9e44:	2001e2ac 	.word	0x2001e2ac
    9e48:	2001e2d4 	.word	0x2001e2d4
    9e4c:	2001e2d8 	.word	0x2001e2d8
    9e50:	20008768 	.word	0x20008768
    9e54:	20008b68 	.word	0x20008b68
    9e58:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    9e5c:	ea4f 2352 	mov.w	r3, r2, lsr #9
    9e60:	d363      	bcc.n	9f2a <_malloc_r+0x3e6>
    9e62:	2b14      	cmp	r3, #20
    9e64:	f200 80b7 	bhi.w	9fd6 <_malloc_r+0x492>
    9e68:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    9e6c:	00c9      	lsls	r1, r1, #3
    9e6e:	335b      	adds	r3, #91	; 0x5b
    9e70:	eb07 0e01 	add.w	lr, r7, r1
    9e74:	5879      	ldr	r1, [r7, r1]
    9e76:	f1ae 0e08 	sub.w	lr, lr, #8
    9e7a:	458e      	cmp	lr, r1
    9e7c:	f000 8091 	beq.w	9fa2 <_malloc_r+0x45e>
    9e80:	684b      	ldr	r3, [r1, #4]
    9e82:	f023 0303 	bic.w	r3, r3, #3
    9e86:	4293      	cmp	r3, r2
    9e88:	d902      	bls.n	9e90 <_malloc_r+0x34c>
    9e8a:	6889      	ldr	r1, [r1, #8]
    9e8c:	458e      	cmp	lr, r1
    9e8e:	d1f7      	bne.n	9e80 <_malloc_r+0x33c>
    9e90:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    9e94:	687a      	ldr	r2, [r7, #4]
    9e96:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    9e9a:	f8ce 5008 	str.w	r5, [lr, #8]
    9e9e:	60cd      	str	r5, [r1, #12]
    9ea0:	e6d6      	b.n	9c50 <_malloc_r+0x10c>
    9ea2:	2b14      	cmp	r3, #20
    9ea4:	d959      	bls.n	9f5a <_malloc_r+0x416>
    9ea6:	2b54      	cmp	r3, #84	; 0x54
    9ea8:	f200 809d 	bhi.w	9fe6 <_malloc_r+0x4a2>
    9eac:	0b33      	lsrs	r3, r6, #12
    9eae:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    9eb2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    9eb6:	00c3      	lsls	r3, r0, #3
    9eb8:	e68a      	b.n	9bd0 <_malloc_r+0x8c>
    9eba:	f10e 0e01 	add.w	lr, lr, #1
    9ebe:	f01e 0f03 	tst.w	lr, #3
    9ec2:	f105 0508 	add.w	r5, r5, #8
    9ec6:	f47f aed5 	bne.w	9c74 <_malloc_r+0x130>
    9eca:	e051      	b.n	9f70 <_malloc_r+0x42c>
    9ecc:	4442      	add	r2, r8
    9ece:	4645      	mov	r5, r8
    9ed0:	6853      	ldr	r3, [r2, #4]
    9ed2:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9ed6:	f043 0301 	orr.w	r3, r3, #1
    9eda:	6053      	str	r3, [r2, #4]
    9edc:	f855 3f08 	ldr.w	r3, [r5, #8]!
    9ee0:	4620      	mov	r0, r4
    9ee2:	60d9      	str	r1, [r3, #12]
    9ee4:	608b      	str	r3, [r1, #8]
    9ee6:	f000 f8e3 	bl	a0b0 <__malloc_unlock>
    9eea:	e6f3      	b.n	9cd4 <_malloc_r+0x190>
    9eec:	08f0      	lsrs	r0, r6, #3
    9eee:	f106 0208 	add.w	r2, r6, #8
    9ef2:	e637      	b.n	9b64 <_malloc_r+0x20>
    9ef4:	442a      	add	r2, r5
    9ef6:	4620      	mov	r0, r4
    9ef8:	6853      	ldr	r3, [r2, #4]
    9efa:	f043 0301 	orr.w	r3, r3, #1
    9efe:	6053      	str	r3, [r2, #4]
    9f00:	3508      	adds	r5, #8
    9f02:	f000 f8d5 	bl	a0b0 <__malloc_unlock>
    9f06:	e6e5      	b.n	9cd4 <_malloc_r+0x190>
    9f08:	19a9      	adds	r1, r5, r6
    9f0a:	4620      	mov	r0, r4
    9f0c:	f046 0601 	orr.w	r6, r6, #1
    9f10:	f043 0401 	orr.w	r4, r3, #1
    9f14:	606e      	str	r6, [r5, #4]
    9f16:	e9c7 1104 	strd	r1, r1, [r7, #16]
    9f1a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    9f1e:	604c      	str	r4, [r1, #4]
    9f20:	50ab      	str	r3, [r5, r2]
    9f22:	f000 f8c5 	bl	a0b0 <__malloc_unlock>
    9f26:	3508      	adds	r5, #8
    9f28:	e6d4      	b.n	9cd4 <_malloc_r+0x190>
    9f2a:	0993      	lsrs	r3, r2, #6
    9f2c:	f103 0139 	add.w	r1, r3, #57	; 0x39
    9f30:	00c9      	lsls	r1, r1, #3
    9f32:	3338      	adds	r3, #56	; 0x38
    9f34:	e79c      	b.n	9e70 <_malloc_r+0x32c>
    9f36:	42bd      	cmp	r5, r7
    9f38:	d05f      	beq.n	9ffa <_malloc_r+0x4b6>
    9f3a:	68bd      	ldr	r5, [r7, #8]
    9f3c:	6868      	ldr	r0, [r5, #4]
    9f3e:	f020 0803 	bic.w	r8, r0, #3
    9f42:	4546      	cmp	r6, r8
    9f44:	eba8 0306 	sub.w	r3, r8, r6
    9f48:	d802      	bhi.n	9f50 <_malloc_r+0x40c>
    9f4a:	2b0f      	cmp	r3, #15
    9f4c:	f73f af62 	bgt.w	9e14 <_malloc_r+0x2d0>
    9f50:	4620      	mov	r0, r4
    9f52:	f000 f8ad 	bl	a0b0 <__malloc_unlock>
    9f56:	2500      	movs	r5, #0
    9f58:	e6bc      	b.n	9cd4 <_malloc_r+0x190>
    9f5a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    9f5e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    9f62:	00c3      	lsls	r3, r0, #3
    9f64:	e634      	b.n	9bd0 <_malloc_r+0x8c>
    9f66:	f859 3908 	ldr.w	r3, [r9], #-8
    9f6a:	454b      	cmp	r3, r9
    9f6c:	f040 8096 	bne.w	a09c <_malloc_r+0x558>
    9f70:	f010 0f03 	tst.w	r0, #3
    9f74:	f100 30ff 	add.w	r0, r0, #4294967295
    9f78:	d1f5      	bne.n	9f66 <_malloc_r+0x422>
    9f7a:	687b      	ldr	r3, [r7, #4]
    9f7c:	ea23 0301 	bic.w	r3, r3, r1
    9f80:	607b      	str	r3, [r7, #4]
    9f82:	0049      	lsls	r1, r1, #1
    9f84:	4299      	cmp	r1, r3
    9f86:	f63f aec0 	bhi.w	9d0a <_malloc_r+0x1c6>
    9f8a:	b919      	cbnz	r1, 9f94 <_malloc_r+0x450>
    9f8c:	e6bd      	b.n	9d0a <_malloc_r+0x1c6>
    9f8e:	0049      	lsls	r1, r1, #1
    9f90:	f10e 0e04 	add.w	lr, lr, #4
    9f94:	4219      	tst	r1, r3
    9f96:	d0fa      	beq.n	9f8e <_malloc_r+0x44a>
    9f98:	4670      	mov	r0, lr
    9f9a:	e667      	b.n	9c6c <_malloc_r+0x128>
    9f9c:	f103 0810 	add.w	r8, r3, #16
    9fa0:	e6d0      	b.n	9d44 <_malloc_r+0x200>
    9fa2:	109a      	asrs	r2, r3, #2
    9fa4:	f04f 0801 	mov.w	r8, #1
    9fa8:	687b      	ldr	r3, [r7, #4]
    9faa:	fa08 f202 	lsl.w	r2, r8, r2
    9fae:	431a      	orrs	r2, r3
    9fb0:	607a      	str	r2, [r7, #4]
    9fb2:	e770      	b.n	9e96 <_malloc_r+0x352>
    9fb4:	eb02 0108 	add.w	r1, r2, r8
    9fb8:	4249      	negs	r1, r1
    9fba:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    9fbe:	4651      	mov	r1, sl
    9fc0:	4620      	mov	r0, r4
    9fc2:	9200      	str	r2, [sp, #0]
    9fc4:	f001 fdf4 	bl	bbb0 <_sbrk_r>
    9fc8:	1c43      	adds	r3, r0, #1
    9fca:	e9dd 2300 	ldrd	r2, r3, [sp]
    9fce:	f47f aeef 	bne.w	9db0 <_malloc_r+0x26c>
    9fd2:	46da      	mov	sl, fp
    9fd4:	e6ef      	b.n	9db6 <_malloc_r+0x272>
    9fd6:	2b54      	cmp	r3, #84	; 0x54
    9fd8:	d825      	bhi.n	a026 <_malloc_r+0x4e2>
    9fda:	0b13      	lsrs	r3, r2, #12
    9fdc:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    9fe0:	00c9      	lsls	r1, r1, #3
    9fe2:	336e      	adds	r3, #110	; 0x6e
    9fe4:	e744      	b.n	9e70 <_malloc_r+0x32c>
    9fe6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    9fea:	d825      	bhi.n	a038 <_malloc_r+0x4f4>
    9fec:	0bf3      	lsrs	r3, r6, #15
    9fee:	f103 0078 	add.w	r0, r3, #120	; 0x78
    9ff2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    9ff6:	00c3      	lsls	r3, r0, #3
    9ff8:	e5ea      	b.n	9bd0 <_malloc_r+0x8c>
    9ffa:	4b29      	ldr	r3, [pc, #164]	; (a0a0 <_malloc_r+0x55c>)
    9ffc:	6818      	ldr	r0, [r3, #0]
    9ffe:	4440      	add	r0, r8
    a000:	6018      	str	r0, [r3, #0]
    a002:	e6b1      	b.n	9d68 <_malloc_r+0x224>
    a004:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    a008:	f1bc 0f00 	cmp.w	ip, #0
    a00c:	f47f aeac 	bne.w	9d68 <_malloc_r+0x224>
    a010:	68bd      	ldr	r5, [r7, #8]
    a012:	44c8      	add	r8, r9
    a014:	f048 0001 	orr.w	r0, r8, #1
    a018:	6068      	str	r0, [r5, #4]
    a01a:	e6f0      	b.n	9dfe <_malloc_r+0x2ba>
    a01c:	4615      	mov	r5, r2
    a01e:	e6ee      	b.n	9dfe <_malloc_r+0x2ba>
    a020:	2301      	movs	r3, #1
    a022:	6053      	str	r3, [r2, #4]
    a024:	e794      	b.n	9f50 <_malloc_r+0x40c>
    a026:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    a02a:	d823      	bhi.n	a074 <_malloc_r+0x530>
    a02c:	0bd3      	lsrs	r3, r2, #15
    a02e:	f103 0178 	add.w	r1, r3, #120	; 0x78
    a032:	00c9      	lsls	r1, r1, #3
    a034:	3377      	adds	r3, #119	; 0x77
    a036:	e71b      	b.n	9e70 <_malloc_r+0x32c>
    a038:	f240 5254 	movw	r2, #1364	; 0x554
    a03c:	4293      	cmp	r3, r2
    a03e:	d823      	bhi.n	a088 <_malloc_r+0x544>
    a040:	0cb3      	lsrs	r3, r6, #18
    a042:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    a046:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    a04a:	00c3      	lsls	r3, r0, #3
    a04c:	e5c0      	b.n	9bd0 <_malloc_r+0x8c>
    a04e:	f1ab 0b08 	sub.w	fp, fp, #8
    a052:	44d8      	add	r8, fp
    a054:	eba8 0802 	sub.w	r8, r8, r2
    a058:	f04f 0a00 	mov.w	sl, #0
    a05c:	e6ab      	b.n	9db6 <_malloc_r+0x272>
    a05e:	f105 0108 	add.w	r1, r5, #8
    a062:	4620      	mov	r0, r4
    a064:	9300      	str	r3, [sp, #0]
    a066:	f002 f93d 	bl	c2e4 <_free_r>
    a06a:	68bd      	ldr	r5, [r7, #8]
    a06c:	9b00      	ldr	r3, [sp, #0]
    a06e:	6868      	ldr	r0, [r5, #4]
    a070:	6819      	ldr	r1, [r3, #0]
    a072:	e6c4      	b.n	9dfe <_malloc_r+0x2ba>
    a074:	f240 5154 	movw	r1, #1364	; 0x554
    a078:	428b      	cmp	r3, r1
    a07a:	d80b      	bhi.n	a094 <_malloc_r+0x550>
    a07c:	0c93      	lsrs	r3, r2, #18
    a07e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    a082:	00c9      	lsls	r1, r1, #3
    a084:	337c      	adds	r3, #124	; 0x7c
    a086:	e6f3      	b.n	9e70 <_malloc_r+0x32c>
    a088:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    a08c:	207f      	movs	r0, #127	; 0x7f
    a08e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    a092:	e59d      	b.n	9bd0 <_malloc_r+0x8c>
    a094:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    a098:	237e      	movs	r3, #126	; 0x7e
    a09a:	e6e9      	b.n	9e70 <_malloc_r+0x32c>
    a09c:	687b      	ldr	r3, [r7, #4]
    a09e:	e770      	b.n	9f82 <_malloc_r+0x43e>
    a0a0:	2001e2ac 	.word	0x2001e2ac

0000a0a4 <__malloc_lock>:
    a0a4:	4801      	ldr	r0, [pc, #4]	; (a0ac <__malloc_lock+0x8>)
    a0a6:	f001 bdd9 	b.w	bc5c <__retarget_lock_acquire_recursive>
    a0aa:	bf00      	nop
    a0ac:	2001e2a4 	.word	0x2001e2a4

0000a0b0 <__malloc_unlock>:
    a0b0:	4801      	ldr	r0, [pc, #4]	; (a0b8 <__malloc_unlock+0x8>)
    a0b2:	f001 bdd5 	b.w	bc60 <__retarget_lock_release_recursive>
    a0b6:	bf00      	nop
    a0b8:	2001e2a4 	.word	0x2001e2a4

0000a0bc <realloc>:
    a0bc:	b410      	push	{r4}
    a0be:	4c04      	ldr	r4, [pc, #16]	; (a0d0 <realloc+0x14>)
    a0c0:	4603      	mov	r3, r0
    a0c2:	460a      	mov	r2, r1
    a0c4:	6820      	ldr	r0, [r4, #0]
    a0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    a0ca:	4619      	mov	r1, r3
    a0cc:	f000 b802 	b.w	a0d4 <_realloc_r>
    a0d0:	20008b7c 	.word	0x20008b7c

0000a0d4 <_realloc_r>:
    a0d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0d8:	4617      	mov	r7, r2
    a0da:	2900      	cmp	r1, #0
    a0dc:	f000 8098 	beq.w	a210 <_realloc_r+0x13c>
    a0e0:	460c      	mov	r4, r1
    a0e2:	f107 050b 	add.w	r5, r7, #11
    a0e6:	4680      	mov	r8, r0
    a0e8:	f7ff ffdc 	bl	a0a4 <__malloc_lock>
    a0ec:	2d16      	cmp	r5, #22
    a0ee:	f854 1c04 	ldr.w	r1, [r4, #-4]
    a0f2:	d85b      	bhi.n	a1ac <_realloc_r+0xd8>
    a0f4:	2510      	movs	r5, #16
    a0f6:	462a      	mov	r2, r5
    a0f8:	42af      	cmp	r7, r5
    a0fa:	d85c      	bhi.n	a1b6 <_realloc_r+0xe2>
    a0fc:	f021 0603 	bic.w	r6, r1, #3
    a100:	4296      	cmp	r6, r2
    a102:	f1a4 0908 	sub.w	r9, r4, #8
    a106:	da62      	bge.n	a1ce <_realloc_r+0xfa>
    a108:	4bbc      	ldr	r3, [pc, #752]	; (a3fc <_realloc_r+0x328>)
    a10a:	f8d3 c008 	ldr.w	ip, [r3, #8]
    a10e:	eb09 0006 	add.w	r0, r9, r6
    a112:	4584      	cmp	ip, r0
    a114:	f000 8097 	beq.w	a246 <_realloc_r+0x172>
    a118:	f8d0 c004 	ldr.w	ip, [r0, #4]
    a11c:	f02c 0301 	bic.w	r3, ip, #1
    a120:	4403      	add	r3, r0
    a122:	685b      	ldr	r3, [r3, #4]
    a124:	07db      	lsls	r3, r3, #31
    a126:	d468      	bmi.n	a1fa <_realloc_r+0x126>
    a128:	f02c 0c03 	bic.w	ip, ip, #3
    a12c:	eb06 030c 	add.w	r3, r6, ip
    a130:	4293      	cmp	r3, r2
    a132:	da47      	bge.n	a1c4 <_realloc_r+0xf0>
    a134:	07cb      	lsls	r3, r1, #31
    a136:	d410      	bmi.n	a15a <_realloc_r+0x86>
    a138:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a13c:	eba9 0a03 	sub.w	sl, r9, r3
    a140:	f8da 3004 	ldr.w	r3, [sl, #4]
    a144:	f023 0103 	bic.w	r1, r3, #3
    a148:	448c      	add	ip, r1
    a14a:	44b4      	add	ip, r6
    a14c:	4594      	cmp	ip, r2
    a14e:	f280 8111 	bge.w	a374 <_realloc_r+0x2a0>
    a152:	1873      	adds	r3, r6, r1
    a154:	4293      	cmp	r3, r2
    a156:	f280 80e8 	bge.w	a32a <_realloc_r+0x256>
    a15a:	4639      	mov	r1, r7
    a15c:	4640      	mov	r0, r8
    a15e:	f7ff fcf1 	bl	9b44 <_malloc_r>
    a162:	4607      	mov	r7, r0
    a164:	b1e0      	cbz	r0, a1a0 <_realloc_r+0xcc>
    a166:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a16a:	f023 0301 	bic.w	r3, r3, #1
    a16e:	444b      	add	r3, r9
    a170:	f1a0 0208 	sub.w	r2, r0, #8
    a174:	4293      	cmp	r3, r2
    a176:	f000 80d2 	beq.w	a31e <_realloc_r+0x24a>
    a17a:	1f32      	subs	r2, r6, #4
    a17c:	2a24      	cmp	r2, #36	; 0x24
    a17e:	f200 80f5 	bhi.w	a36c <_realloc_r+0x298>
    a182:	2a13      	cmp	r2, #19
    a184:	f200 80ac 	bhi.w	a2e0 <_realloc_r+0x20c>
    a188:	4603      	mov	r3, r0
    a18a:	4622      	mov	r2, r4
    a18c:	6811      	ldr	r1, [r2, #0]
    a18e:	6019      	str	r1, [r3, #0]
    a190:	6851      	ldr	r1, [r2, #4]
    a192:	6059      	str	r1, [r3, #4]
    a194:	6892      	ldr	r2, [r2, #8]
    a196:	609a      	str	r2, [r3, #8]
    a198:	4621      	mov	r1, r4
    a19a:	4640      	mov	r0, r8
    a19c:	f002 f8a2 	bl	c2e4 <_free_r>
    a1a0:	4640      	mov	r0, r8
    a1a2:	f7ff ff85 	bl	a0b0 <__malloc_unlock>
    a1a6:	4638      	mov	r0, r7
    a1a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1ac:	f025 0507 	bic.w	r5, r5, #7
    a1b0:	2d00      	cmp	r5, #0
    a1b2:	462a      	mov	r2, r5
    a1b4:	daa0      	bge.n	a0f8 <_realloc_r+0x24>
    a1b6:	230c      	movs	r3, #12
    a1b8:	f8c8 3000 	str.w	r3, [r8]
    a1bc:	2700      	movs	r7, #0
    a1be:	4638      	mov	r0, r7
    a1c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1c4:	461e      	mov	r6, r3
    a1c6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    a1ca:	60d3      	str	r3, [r2, #12]
    a1cc:	609a      	str	r2, [r3, #8]
    a1ce:	1b73      	subs	r3, r6, r5
    a1d0:	2b0f      	cmp	r3, #15
    a1d2:	d822      	bhi.n	a21a <_realloc_r+0x146>
    a1d4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a1d8:	f003 0301 	and.w	r3, r3, #1
    a1dc:	4333      	orrs	r3, r6
    a1de:	444e      	add	r6, r9
    a1e0:	f8c9 3004 	str.w	r3, [r9, #4]
    a1e4:	6873      	ldr	r3, [r6, #4]
    a1e6:	f043 0301 	orr.w	r3, r3, #1
    a1ea:	6073      	str	r3, [r6, #4]
    a1ec:	4640      	mov	r0, r8
    a1ee:	4627      	mov	r7, r4
    a1f0:	f7ff ff5e 	bl	a0b0 <__malloc_unlock>
    a1f4:	4638      	mov	r0, r7
    a1f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1fa:	07c9      	lsls	r1, r1, #31
    a1fc:	d4ad      	bmi.n	a15a <_realloc_r+0x86>
    a1fe:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a202:	eba9 0a03 	sub.w	sl, r9, r3
    a206:	f8da 1004 	ldr.w	r1, [sl, #4]
    a20a:	f021 0103 	bic.w	r1, r1, #3
    a20e:	e7a0      	b.n	a152 <_realloc_r+0x7e>
    a210:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a214:	4611      	mov	r1, r2
    a216:	f7ff bc95 	b.w	9b44 <_malloc_r>
    a21a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a21e:	eb09 0105 	add.w	r1, r9, r5
    a222:	f002 0201 	and.w	r2, r2, #1
    a226:	444e      	add	r6, r9
    a228:	f043 0301 	orr.w	r3, r3, #1
    a22c:	432a      	orrs	r2, r5
    a22e:	f8c9 2004 	str.w	r2, [r9, #4]
    a232:	604b      	str	r3, [r1, #4]
    a234:	6873      	ldr	r3, [r6, #4]
    a236:	f043 0301 	orr.w	r3, r3, #1
    a23a:	3108      	adds	r1, #8
    a23c:	6073      	str	r3, [r6, #4]
    a23e:	4640      	mov	r0, r8
    a240:	f002 f850 	bl	c2e4 <_free_r>
    a244:	e7d2      	b.n	a1ec <_realloc_r+0x118>
    a246:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a24a:	f020 0b03 	bic.w	fp, r0, #3
    a24e:	eb06 0c0b 	add.w	ip, r6, fp
    a252:	f105 0010 	add.w	r0, r5, #16
    a256:	4584      	cmp	ip, r0
    a258:	da4d      	bge.n	a2f6 <_realloc_r+0x222>
    a25a:	07c9      	lsls	r1, r1, #31
    a25c:	f53f af7d 	bmi.w	a15a <_realloc_r+0x86>
    a260:	f854 1c08 	ldr.w	r1, [r4, #-8]
    a264:	eba9 0a01 	sub.w	sl, r9, r1
    a268:	f8da 1004 	ldr.w	r1, [sl, #4]
    a26c:	f021 0103 	bic.w	r1, r1, #3
    a270:	448b      	add	fp, r1
    a272:	44b3      	add	fp, r6
    a274:	4558      	cmp	r0, fp
    a276:	f73f af6c 	bgt.w	a152 <_realloc_r+0x7e>
    a27a:	4657      	mov	r7, sl
    a27c:	f8da 100c 	ldr.w	r1, [sl, #12]
    a280:	f857 0f08 	ldr.w	r0, [r7, #8]!
    a284:	1f32      	subs	r2, r6, #4
    a286:	2a24      	cmp	r2, #36	; 0x24
    a288:	60c1      	str	r1, [r0, #12]
    a28a:	6088      	str	r0, [r1, #8]
    a28c:	f200 80db 	bhi.w	a446 <_realloc_r+0x372>
    a290:	2a13      	cmp	r2, #19
    a292:	f240 80d6 	bls.w	a442 <_realloc_r+0x36e>
    a296:	6821      	ldr	r1, [r4, #0]
    a298:	f8ca 1008 	str.w	r1, [sl, #8]
    a29c:	6861      	ldr	r1, [r4, #4]
    a29e:	f8ca 100c 	str.w	r1, [sl, #12]
    a2a2:	2a1b      	cmp	r2, #27
    a2a4:	f200 80df 	bhi.w	a466 <_realloc_r+0x392>
    a2a8:	3408      	adds	r4, #8
    a2aa:	f10a 0210 	add.w	r2, sl, #16
    a2ae:	6821      	ldr	r1, [r4, #0]
    a2b0:	6011      	str	r1, [r2, #0]
    a2b2:	6861      	ldr	r1, [r4, #4]
    a2b4:	6051      	str	r1, [r2, #4]
    a2b6:	68a1      	ldr	r1, [r4, #8]
    a2b8:	6091      	str	r1, [r2, #8]
    a2ba:	eb0a 0105 	add.w	r1, sl, r5
    a2be:	ebab 0205 	sub.w	r2, fp, r5
    a2c2:	f042 0201 	orr.w	r2, r2, #1
    a2c6:	6099      	str	r1, [r3, #8]
    a2c8:	604a      	str	r2, [r1, #4]
    a2ca:	f8da 3004 	ldr.w	r3, [sl, #4]
    a2ce:	f003 0301 	and.w	r3, r3, #1
    a2d2:	432b      	orrs	r3, r5
    a2d4:	4640      	mov	r0, r8
    a2d6:	f8ca 3004 	str.w	r3, [sl, #4]
    a2da:	f7ff fee9 	bl	a0b0 <__malloc_unlock>
    a2de:	e76e      	b.n	a1be <_realloc_r+0xea>
    a2e0:	6823      	ldr	r3, [r4, #0]
    a2e2:	6003      	str	r3, [r0, #0]
    a2e4:	6863      	ldr	r3, [r4, #4]
    a2e6:	6043      	str	r3, [r0, #4]
    a2e8:	2a1b      	cmp	r2, #27
    a2ea:	d868      	bhi.n	a3be <_realloc_r+0x2ea>
    a2ec:	f104 0208 	add.w	r2, r4, #8
    a2f0:	f100 0308 	add.w	r3, r0, #8
    a2f4:	e74a      	b.n	a18c <_realloc_r+0xb8>
    a2f6:	eb09 0205 	add.w	r2, r9, r5
    a2fa:	609a      	str	r2, [r3, #8]
    a2fc:	ebac 0305 	sub.w	r3, ip, r5
    a300:	f043 0301 	orr.w	r3, r3, #1
    a304:	6053      	str	r3, [r2, #4]
    a306:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a30a:	f003 0301 	and.w	r3, r3, #1
    a30e:	432b      	orrs	r3, r5
    a310:	4640      	mov	r0, r8
    a312:	f844 3c04 	str.w	r3, [r4, #-4]
    a316:	f7ff fecb 	bl	a0b0 <__malloc_unlock>
    a31a:	4627      	mov	r7, r4
    a31c:	e74f      	b.n	a1be <_realloc_r+0xea>
    a31e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    a322:	f023 0303 	bic.w	r3, r3, #3
    a326:	441e      	add	r6, r3
    a328:	e751      	b.n	a1ce <_realloc_r+0xfa>
    a32a:	4657      	mov	r7, sl
    a32c:	f8da 100c 	ldr.w	r1, [sl, #12]
    a330:	f857 0f08 	ldr.w	r0, [r7, #8]!
    a334:	1f32      	subs	r2, r6, #4
    a336:	2a24      	cmp	r2, #36	; 0x24
    a338:	60c1      	str	r1, [r0, #12]
    a33a:	6088      	str	r0, [r1, #8]
    a33c:	d84c      	bhi.n	a3d8 <_realloc_r+0x304>
    a33e:	2a13      	cmp	r2, #19
    a340:	d948      	bls.n	a3d4 <_realloc_r+0x300>
    a342:	6821      	ldr	r1, [r4, #0]
    a344:	f8ca 1008 	str.w	r1, [sl, #8]
    a348:	6861      	ldr	r1, [r4, #4]
    a34a:	f8ca 100c 	str.w	r1, [sl, #12]
    a34e:	2a1b      	cmp	r2, #27
    a350:	d856      	bhi.n	a400 <_realloc_r+0x32c>
    a352:	3408      	adds	r4, #8
    a354:	f10a 0210 	add.w	r2, sl, #16
    a358:	461e      	mov	r6, r3
    a35a:	6823      	ldr	r3, [r4, #0]
    a35c:	6013      	str	r3, [r2, #0]
    a35e:	6863      	ldr	r3, [r4, #4]
    a360:	6053      	str	r3, [r2, #4]
    a362:	68a3      	ldr	r3, [r4, #8]
    a364:	6093      	str	r3, [r2, #8]
    a366:	46d1      	mov	r9, sl
    a368:	463c      	mov	r4, r7
    a36a:	e730      	b.n	a1ce <_realloc_r+0xfa>
    a36c:	4621      	mov	r1, r4
    a36e:	f001 fa95 	bl	b89c <memmove>
    a372:	e711      	b.n	a198 <_realloc_r+0xc4>
    a374:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    a378:	4657      	mov	r7, sl
    a37a:	60cb      	str	r3, [r1, #12]
    a37c:	6099      	str	r1, [r3, #8]
    a37e:	f857 1f08 	ldr.w	r1, [r7, #8]!
    a382:	f8da 300c 	ldr.w	r3, [sl, #12]
    a386:	60cb      	str	r3, [r1, #12]
    a388:	1f32      	subs	r2, r6, #4
    a38a:	2a24      	cmp	r2, #36	; 0x24
    a38c:	6099      	str	r1, [r3, #8]
    a38e:	d82d      	bhi.n	a3ec <_realloc_r+0x318>
    a390:	2a13      	cmp	r2, #19
    a392:	d929      	bls.n	a3e8 <_realloc_r+0x314>
    a394:	6823      	ldr	r3, [r4, #0]
    a396:	f8ca 3008 	str.w	r3, [sl, #8]
    a39a:	6863      	ldr	r3, [r4, #4]
    a39c:	f8ca 300c 	str.w	r3, [sl, #12]
    a3a0:	2a1b      	cmp	r2, #27
    a3a2:	d842      	bhi.n	a42a <_realloc_r+0x356>
    a3a4:	3408      	adds	r4, #8
    a3a6:	f10a 0310 	add.w	r3, sl, #16
    a3aa:	6822      	ldr	r2, [r4, #0]
    a3ac:	601a      	str	r2, [r3, #0]
    a3ae:	6862      	ldr	r2, [r4, #4]
    a3b0:	605a      	str	r2, [r3, #4]
    a3b2:	68a2      	ldr	r2, [r4, #8]
    a3b4:	609a      	str	r2, [r3, #8]
    a3b6:	4666      	mov	r6, ip
    a3b8:	46d1      	mov	r9, sl
    a3ba:	463c      	mov	r4, r7
    a3bc:	e707      	b.n	a1ce <_realloc_r+0xfa>
    a3be:	68a3      	ldr	r3, [r4, #8]
    a3c0:	6083      	str	r3, [r0, #8]
    a3c2:	68e3      	ldr	r3, [r4, #12]
    a3c4:	60c3      	str	r3, [r0, #12]
    a3c6:	2a24      	cmp	r2, #36	; 0x24
    a3c8:	d026      	beq.n	a418 <_realloc_r+0x344>
    a3ca:	f104 0210 	add.w	r2, r4, #16
    a3ce:	f100 0310 	add.w	r3, r0, #16
    a3d2:	e6db      	b.n	a18c <_realloc_r+0xb8>
    a3d4:	463a      	mov	r2, r7
    a3d6:	e7bf      	b.n	a358 <_realloc_r+0x284>
    a3d8:	4621      	mov	r1, r4
    a3da:	4638      	mov	r0, r7
    a3dc:	461e      	mov	r6, r3
    a3de:	46d1      	mov	r9, sl
    a3e0:	f001 fa5c 	bl	b89c <memmove>
    a3e4:	463c      	mov	r4, r7
    a3e6:	e6f2      	b.n	a1ce <_realloc_r+0xfa>
    a3e8:	463b      	mov	r3, r7
    a3ea:	e7de      	b.n	a3aa <_realloc_r+0x2d6>
    a3ec:	4621      	mov	r1, r4
    a3ee:	4638      	mov	r0, r7
    a3f0:	4666      	mov	r6, ip
    a3f2:	46d1      	mov	r9, sl
    a3f4:	f001 fa52 	bl	b89c <memmove>
    a3f8:	463c      	mov	r4, r7
    a3fa:	e6e8      	b.n	a1ce <_realloc_r+0xfa>
    a3fc:	20008760 	.word	0x20008760
    a400:	68a1      	ldr	r1, [r4, #8]
    a402:	f8ca 1010 	str.w	r1, [sl, #16]
    a406:	68e1      	ldr	r1, [r4, #12]
    a408:	f8ca 1014 	str.w	r1, [sl, #20]
    a40c:	2a24      	cmp	r2, #36	; 0x24
    a40e:	d020      	beq.n	a452 <_realloc_r+0x37e>
    a410:	3410      	adds	r4, #16
    a412:	f10a 0218 	add.w	r2, sl, #24
    a416:	e79f      	b.n	a358 <_realloc_r+0x284>
    a418:	6923      	ldr	r3, [r4, #16]
    a41a:	6103      	str	r3, [r0, #16]
    a41c:	6961      	ldr	r1, [r4, #20]
    a41e:	6141      	str	r1, [r0, #20]
    a420:	f104 0218 	add.w	r2, r4, #24
    a424:	f100 0318 	add.w	r3, r0, #24
    a428:	e6b0      	b.n	a18c <_realloc_r+0xb8>
    a42a:	68a3      	ldr	r3, [r4, #8]
    a42c:	f8ca 3010 	str.w	r3, [sl, #16]
    a430:	68e3      	ldr	r3, [r4, #12]
    a432:	f8ca 3014 	str.w	r3, [sl, #20]
    a436:	2a24      	cmp	r2, #36	; 0x24
    a438:	d021      	beq.n	a47e <_realloc_r+0x3aa>
    a43a:	3410      	adds	r4, #16
    a43c:	f10a 0318 	add.w	r3, sl, #24
    a440:	e7b3      	b.n	a3aa <_realloc_r+0x2d6>
    a442:	463a      	mov	r2, r7
    a444:	e733      	b.n	a2ae <_realloc_r+0x1da>
    a446:	4621      	mov	r1, r4
    a448:	4638      	mov	r0, r7
    a44a:	f001 fa27 	bl	b89c <memmove>
    a44e:	4b16      	ldr	r3, [pc, #88]	; (a4a8 <_realloc_r+0x3d4>)
    a450:	e733      	b.n	a2ba <_realloc_r+0x1e6>
    a452:	6922      	ldr	r2, [r4, #16]
    a454:	f8ca 2018 	str.w	r2, [sl, #24]
    a458:	6962      	ldr	r2, [r4, #20]
    a45a:	f8ca 201c 	str.w	r2, [sl, #28]
    a45e:	3418      	adds	r4, #24
    a460:	f10a 0220 	add.w	r2, sl, #32
    a464:	e778      	b.n	a358 <_realloc_r+0x284>
    a466:	68a1      	ldr	r1, [r4, #8]
    a468:	f8ca 1010 	str.w	r1, [sl, #16]
    a46c:	68e1      	ldr	r1, [r4, #12]
    a46e:	f8ca 1014 	str.w	r1, [sl, #20]
    a472:	2a24      	cmp	r2, #36	; 0x24
    a474:	d00d      	beq.n	a492 <_realloc_r+0x3be>
    a476:	3410      	adds	r4, #16
    a478:	f10a 0218 	add.w	r2, sl, #24
    a47c:	e717      	b.n	a2ae <_realloc_r+0x1da>
    a47e:	6923      	ldr	r3, [r4, #16]
    a480:	f8ca 3018 	str.w	r3, [sl, #24]
    a484:	6963      	ldr	r3, [r4, #20]
    a486:	f8ca 301c 	str.w	r3, [sl, #28]
    a48a:	3418      	adds	r4, #24
    a48c:	f10a 0320 	add.w	r3, sl, #32
    a490:	e78b      	b.n	a3aa <_realloc_r+0x2d6>
    a492:	6922      	ldr	r2, [r4, #16]
    a494:	f8ca 2018 	str.w	r2, [sl, #24]
    a498:	6962      	ldr	r2, [r4, #20]
    a49a:	f8ca 201c 	str.w	r2, [sl, #28]
    a49e:	3418      	adds	r4, #24
    a4a0:	f10a 0220 	add.w	r2, sl, #32
    a4a4:	e703      	b.n	a2ae <_realloc_r+0x1da>
    a4a6:	bf00      	nop
    a4a8:	20008760 	.word	0x20008760
    a4ac:	00000000 	.word	0x00000000

0000a4b0 <_strtod_l>:
    a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4b4:	ed2d 8b10 	vpush	{d8-d15}
    a4b8:	b097      	sub	sp, #92	; 0x5c
    a4ba:	468a      	mov	sl, r1
    a4bc:	2100      	movs	r1, #0
    a4be:	9207      	str	r2, [sp, #28]
    a4c0:	9112      	str	r1, [sp, #72]	; 0x48
    a4c2:	2200      	movs	r2, #0
    a4c4:	2100      	movs	r1, #0
    a4c6:	e9cd 1204 	strd	r1, r2, [sp, #16]
    a4ca:	4680      	mov	r8, r0
    a4cc:	4651      	mov	r1, sl
    a4ce:	9111      	str	r1, [sp, #68]	; 0x44
    a4d0:	460f      	mov	r7, r1
    a4d2:	f811 2b01 	ldrb.w	r2, [r1], #1
    a4d6:	2a2d      	cmp	r2, #45	; 0x2d
    a4d8:	d85e      	bhi.n	a598 <_strtod_l+0xe8>
    a4da:	a001      	add	r0, pc, #4	; (adr r0, a4e0 <_strtod_l+0x30>)
    a4dc:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    a4e0:	0000a681 	.word	0x0000a681
    a4e4:	0000a599 	.word	0x0000a599
    a4e8:	0000a599 	.word	0x0000a599
    a4ec:	0000a599 	.word	0x0000a599
    a4f0:	0000a599 	.word	0x0000a599
    a4f4:	0000a599 	.word	0x0000a599
    a4f8:	0000a599 	.word	0x0000a599
    a4fc:	0000a599 	.word	0x0000a599
    a500:	0000a599 	.word	0x0000a599
    a504:	0000a4cf 	.word	0x0000a4cf
    a508:	0000a4cf 	.word	0x0000a4cf
    a50c:	0000a4cf 	.word	0x0000a4cf
    a510:	0000a4cf 	.word	0x0000a4cf
    a514:	0000a4cf 	.word	0x0000a4cf
    a518:	0000a599 	.word	0x0000a599
    a51c:	0000a599 	.word	0x0000a599
    a520:	0000a599 	.word	0x0000a599
    a524:	0000a599 	.word	0x0000a599
    a528:	0000a599 	.word	0x0000a599
    a52c:	0000a599 	.word	0x0000a599
    a530:	0000a599 	.word	0x0000a599
    a534:	0000a599 	.word	0x0000a599
    a538:	0000a599 	.word	0x0000a599
    a53c:	0000a599 	.word	0x0000a599
    a540:	0000a599 	.word	0x0000a599
    a544:	0000a599 	.word	0x0000a599
    a548:	0000a599 	.word	0x0000a599
    a54c:	0000a599 	.word	0x0000a599
    a550:	0000a599 	.word	0x0000a599
    a554:	0000a599 	.word	0x0000a599
    a558:	0000a599 	.word	0x0000a599
    a55c:	0000a599 	.word	0x0000a599
    a560:	0000a4cf 	.word	0x0000a4cf
    a564:	0000a599 	.word	0x0000a599
    a568:	0000a599 	.word	0x0000a599
    a56c:	0000a599 	.word	0x0000a599
    a570:	0000a599 	.word	0x0000a599
    a574:	0000a599 	.word	0x0000a599
    a578:	0000a599 	.word	0x0000a599
    a57c:	0000a599 	.word	0x0000a599
    a580:	0000a599 	.word	0x0000a599
    a584:	0000a599 	.word	0x0000a599
    a588:	0000a599 	.word	0x0000a599
    a58c:	0000acbb 	.word	0x0000acbb
    a590:	0000a599 	.word	0x0000a599
    a594:	0000aca7 	.word	0x0000aca7
    a598:	2100      	movs	r1, #0
    a59a:	9109      	str	r1, [sp, #36]	; 0x24
    a59c:	2a30      	cmp	r2, #48	; 0x30
    a59e:	d07d      	beq.n	a69c <_strtod_l+0x1ec>
    a5a0:	2300      	movs	r3, #0
    a5a2:	9308      	str	r3, [sp, #32]
    a5a4:	2a2f      	cmp	r2, #47	; 0x2f
    a5a6:	4614      	mov	r4, r2
    a5a8:	f240 84cd 	bls.w	af46 <_strtod_l+0xa96>
    a5ac:	f04f 0900 	mov.w	r9, #0
    a5b0:	4638      	mov	r0, r7
    a5b2:	464e      	mov	r6, r9
    a5b4:	464d      	mov	r5, r9
    a5b6:	e012      	b.n	a5de <_strtod_l+0x12e>
    a5b8:	3001      	adds	r0, #1
    a5ba:	2d08      	cmp	r5, #8
    a5bc:	9011      	str	r0, [sp, #68]	; 0x44
    a5be:	bfc8      	it	gt
    a5c0:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    a5c4:	7804      	ldrb	r4, [r0, #0]
    a5c6:	bfc6      	itte	gt
    a5c8:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    a5cc:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    a5d0:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    a5d4:	2c2f      	cmp	r4, #47	; 0x2f
    a5d6:	f105 0501 	add.w	r5, r5, #1
    a5da:	4622      	mov	r2, r4
    a5dc:	dd6f      	ble.n	a6be <_strtod_l+0x20e>
    a5de:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    a5e2:	2c39      	cmp	r4, #57	; 0x39
    a5e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a5e8:	dde6      	ble.n	a5b8 <_strtod_l+0x108>
    a5ea:	499f      	ldr	r1, [pc, #636]	; (a868 <_strtod_l+0x3b8>)
    a5ec:	2201      	movs	r2, #1
    a5ee:	f001 fa23 	bl	ba38 <strncmp>
    a5f2:	2800      	cmp	r0, #0
    a5f4:	d137      	bne.n	a666 <_strtod_l+0x1b6>
    a5f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a5f8:	461a      	mov	r2, r3
    a5fa:	3301      	adds	r3, #1
    a5fc:	9311      	str	r3, [sp, #68]	; 0x44
    a5fe:	7854      	ldrb	r4, [r2, #1]
    a600:	2d00      	cmp	r5, #0
    a602:	f040 8543 	bne.w	b08c <_strtod_l+0xbdc>
    a606:	2c30      	cmp	r4, #48	; 0x30
    a608:	f040 8524 	bne.w	b054 <_strtod_l+0xba4>
    a60c:	f1c3 0201 	rsb	r2, r3, #1
    a610:	1898      	adds	r0, r3, r2
    a612:	3301      	adds	r3, #1
    a614:	9311      	str	r3, [sp, #68]	; 0x44
    a616:	781c      	ldrb	r4, [r3, #0]
    a618:	2c30      	cmp	r4, #48	; 0x30
    a61a:	d0f9      	beq.n	a610 <_strtod_l+0x160>
    a61c:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a620:	2b08      	cmp	r3, #8
    a622:	f200 8301 	bhi.w	ac28 <_strtod_l+0x778>
    a626:	9f11      	ldr	r7, [sp, #68]	; 0x44
    a628:	1c43      	adds	r3, r0, #1
    a62a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a62e:	930b      	str	r3, [sp, #44]	; 0x2c
    a630:	2501      	movs	r5, #1
    a632:	46bc      	mov	ip, r7
    a634:	f04f 0e00 	mov.w	lr, #0
    a638:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    a63c:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    a640:	2000      	movs	r0, #0
    a642:	f10c 0301 	add.w	r3, ip, #1
    a646:	9311      	str	r3, [sp, #68]	; 0x44
    a648:	f89c 4001 	ldrb.w	r4, [ip, #1]
    a64c:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    a650:	2909      	cmp	r1, #9
    a652:	f200 82bb 	bhi.w	abcc <_strtod_l+0x71c>
    a656:	3001      	adds	r0, #1
    a658:	468b      	mov	fp, r1
    a65a:	2900      	cmp	r1, #0
    a65c:	f040 844f 	bne.w	aefe <_strtod_l+0xa4e>
    a660:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    a664:	e7ed      	b.n	a642 <_strtod_l+0x192>
    a666:	2000      	movs	r0, #0
    a668:	2c65      	cmp	r4, #101	; 0x65
    a66a:	46ae      	mov	lr, r5
    a66c:	900b      	str	r0, [sp, #44]	; 0x2c
    a66e:	4684      	mov	ip, r0
    a670:	d001      	beq.n	a676 <_strtod_l+0x1c6>
    a672:	2c45      	cmp	r4, #69	; 0x45
    a674:	d130      	bne.n	a6d8 <_strtod_l+0x228>
    a676:	2d00      	cmp	r5, #0
    a678:	d16b      	bne.n	a752 <_strtod_l+0x2a2>
    a67a:	9b08      	ldr	r3, [sp, #32]
    a67c:	4303      	orrs	r3, r0
    a67e:	d167      	bne.n	a750 <_strtod_l+0x2a0>
    a680:	9b07      	ldr	r3, [sp, #28]
    a682:	ed9f 8b77 	vldr	d8, [pc, #476]	; a860 <_strtod_l+0x3b0>
    a686:	b113      	cbz	r3, a68e <_strtod_l+0x1de>
    a688:	9b07      	ldr	r3, [sp, #28]
    a68a:	f8c3 a000 	str.w	sl, [r3]
    a68e:	eeb0 0b48 	vmov.f64	d0, d8
    a692:	b017      	add	sp, #92	; 0x5c
    a694:	ecbd 8b10 	vpop	{d8-d15}
    a698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a69c:	787a      	ldrb	r2, [r7, #1]
    a69e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    a6a2:	2a58      	cmp	r2, #88	; 0x58
    a6a4:	f000 840c 	beq.w	aec0 <_strtod_l+0xa10>
    a6a8:	3701      	adds	r7, #1
    a6aa:	9711      	str	r7, [sp, #68]	; 0x44
    a6ac:	783a      	ldrb	r2, [r7, #0]
    a6ae:	2a30      	cmp	r2, #48	; 0x30
    a6b0:	d0fa      	beq.n	a6a8 <_strtod_l+0x1f8>
    a6b2:	2a00      	cmp	r2, #0
    a6b4:	f000 80b7 	beq.w	a826 <_strtod_l+0x376>
    a6b8:	2301      	movs	r3, #1
    a6ba:	9308      	str	r3, [sp, #32]
    a6bc:	e772      	b.n	a5a4 <_strtod_l+0xf4>
    a6be:	496a      	ldr	r1, [pc, #424]	; (a868 <_strtod_l+0x3b8>)
    a6c0:	2201      	movs	r2, #1
    a6c2:	f001 f9b9 	bl	ba38 <strncmp>
    a6c6:	2800      	cmp	r0, #0
    a6c8:	f000 80c0 	beq.w	a84c <_strtod_l+0x39c>
    a6cc:	46ae      	mov	lr, r5
    a6ce:	f04f 0c00 	mov.w	ip, #0
    a6d2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    a6d6:	4660      	mov	r0, ip
    a6d8:	f04f 0b00 	mov.w	fp, #0
    a6dc:	2d00      	cmp	r5, #0
    a6de:	d07e      	beq.n	a7de <_strtod_l+0x32e>
    a6e0:	ee07 6a90 	vmov	s15, r6
    a6e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a6e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    a6ea:	ebab 0303 	sub.w	r3, fp, r3
    a6ee:	f1be 0f00 	cmp.w	lr, #0
    a6f2:	bf08      	it	eq
    a6f4:	46ae      	moveq	lr, r5
    a6f6:	2d10      	cmp	r5, #16
    a6f8:	930a      	str	r3, [sp, #40]	; 0x28
    a6fa:	462b      	mov	r3, r5
    a6fc:	bfa8      	it	ge
    a6fe:	2310      	movge	r3, #16
    a700:	2d09      	cmp	r5, #9
    a702:	ed8d 7b04 	vstr	d7, [sp, #16]
    a706:	dd0c      	ble.n	a722 <_strtod_l+0x272>
    a708:	4a58      	ldr	r2, [pc, #352]	; (a86c <_strtod_l+0x3bc>)
    a70a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    a70e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    a712:	ee06 9a90 	vmov	s13, r9
    a716:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a71a:	eea7 6b05 	vfma.f64	d6, d7, d5
    a71e:	ed8d 6b04 	vstr	d6, [sp, #16]
    a722:	2d0f      	cmp	r5, #15
    a724:	f300 80a8 	bgt.w	a878 <_strtod_l+0x3c8>
    a728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a72a:	2a00      	cmp	r2, #0
    a72c:	f000 83e4 	beq.w	aef8 <_strtod_l+0xa48>
    a730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a732:	f340 833c 	ble.w	adae <_strtod_l+0x8fe>
    a736:	2a16      	cmp	r2, #22
    a738:	f340 8498 	ble.w	b06c <_strtod_l+0xbbc>
    a73c:	990a      	ldr	r1, [sp, #40]	; 0x28
    a73e:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    a742:	428a      	cmp	r2, r1
    a744:	f280 84a6 	bge.w	b094 <_strtod_l+0xbe4>
    a748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a74a:	1aeb      	subs	r3, r5, r3
    a74c:	4413      	add	r3, r2
    a74e:	e099      	b.n	a884 <_strtod_l+0x3d4>
    a750:	2500      	movs	r5, #0
    a752:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    a756:	f10a 0301 	add.w	r3, sl, #1
    a75a:	9311      	str	r3, [sp, #68]	; 0x44
    a75c:	f89a 4001 	ldrb.w	r4, [sl, #1]
    a760:	2c2b      	cmp	r4, #43	; 0x2b
    a762:	f000 825e 	beq.w	ac22 <_strtod_l+0x772>
    a766:	2c2d      	cmp	r4, #45	; 0x2d
    a768:	f000 81f7 	beq.w	ab5a <_strtod_l+0x6aa>
    a76c:	2300      	movs	r3, #0
    a76e:	930a      	str	r3, [sp, #40]	; 0x28
    a770:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    a774:	2b09      	cmp	r3, #9
    a776:	f200 81eb 	bhi.w	ab50 <_strtod_l+0x6a0>
    a77a:	2c30      	cmp	r4, #48	; 0x30
    a77c:	d105      	bne.n	a78a <_strtod_l+0x2da>
    a77e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a780:	3301      	adds	r3, #1
    a782:	9311      	str	r3, [sp, #68]	; 0x44
    a784:	781c      	ldrb	r4, [r3, #0]
    a786:	2c30      	cmp	r4, #48	; 0x30
    a788:	d0fa      	beq.n	a780 <_strtod_l+0x2d0>
    a78a:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a78e:	2b08      	cmp	r3, #8
    a790:	d8a2      	bhi.n	a6d8 <_strtod_l+0x228>
    a792:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a794:	920c      	str	r2, [sp, #48]	; 0x30
    a796:	1c53      	adds	r3, r2, #1
    a798:	9311      	str	r3, [sp, #68]	; 0x44
    a79a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a79e:	7854      	ldrb	r4, [r2, #1]
    a7a0:	2c2f      	cmp	r4, #47	; 0x2f
    a7a2:	dc07      	bgt.n	a7b4 <_strtod_l+0x304>
    a7a4:	e3de      	b.n	af64 <_strtod_l+0xab4>
    a7a6:	3301      	adds	r3, #1
    a7a8:	9311      	str	r3, [sp, #68]	; 0x44
    a7aa:	784c      	ldrb	r4, [r1, #1]
    a7ac:	2c2f      	cmp	r4, #47	; 0x2f
    a7ae:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    a7b2:	dd06      	ble.n	a7c2 <_strtod_l+0x312>
    a7b4:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    a7b8:	2c39      	cmp	r4, #57	; 0x39
    a7ba:	4619      	mov	r1, r3
    a7bc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    a7c0:	ddf1      	ble.n	a7a6 <_strtod_l+0x2f6>
    a7c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a7c4:	1a9b      	subs	r3, r3, r2
    a7c6:	2b08      	cmp	r3, #8
    a7c8:	f340 83cc 	ble.w	af64 <_strtod_l+0xab4>
    a7cc:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    a7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	d082      	beq.n	a6dc <_strtod_l+0x22c>
    a7d6:	f1cb 0b00 	rsb	fp, fp, #0
    a7da:	2d00      	cmp	r5, #0
    a7dc:	d180      	bne.n	a6e0 <_strtod_l+0x230>
    a7de:	9b08      	ldr	r3, [sp, #32]
    a7e0:	4303      	orrs	r3, r0
    a7e2:	d120      	bne.n	a826 <_strtod_l+0x376>
    a7e4:	f1bc 0f00 	cmp.w	ip, #0
    a7e8:	f47f af4a 	bne.w	a680 <_strtod_l+0x1d0>
    a7ec:	2c69      	cmp	r4, #105	; 0x69
    a7ee:	f000 83cf 	beq.w	af90 <_strtod_l+0xae0>
    a7f2:	f300 82f3 	bgt.w	addc <_strtod_l+0x92c>
    a7f6:	2c49      	cmp	r4, #73	; 0x49
    a7f8:	f000 83ca 	beq.w	af90 <_strtod_l+0xae0>
    a7fc:	2c4e      	cmp	r4, #78	; 0x4e
    a7fe:	f47f af3f 	bne.w	a680 <_strtod_l+0x1d0>
    a802:	491b      	ldr	r1, [pc, #108]	; (a870 <_strtod_l+0x3c0>)
    a804:	a811      	add	r0, sp, #68	; 0x44
    a806:	f002 f98f 	bl	cb28 <__match>
    a80a:	2800      	cmp	r0, #0
    a80c:	f43f af38 	beq.w	a680 <_strtod_l+0x1d0>
    a810:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a812:	781b      	ldrb	r3, [r3, #0]
    a814:	2b28      	cmp	r3, #40	; 0x28
    a816:	f000 84f2 	beq.w	b1fe <_strtod_l+0xd4e>
    a81a:	4816      	ldr	r0, [pc, #88]	; (a874 <_strtod_l+0x3c4>)
    a81c:	f001 fcc0 	bl	c1a0 <nan>
    a820:	eeb0 8b40 	vmov.f64	d8, d0
    a824:	e001      	b.n	a82a <_strtod_l+0x37a>
    a826:	ed9f 8b0e 	vldr	d8, [pc, #56]	; a860 <_strtod_l+0x3b0>
    a82a:	9a07      	ldr	r2, [sp, #28]
    a82c:	b10a      	cbz	r2, a832 <_strtod_l+0x382>
    a82e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a830:	6013      	str	r3, [r2, #0]
    a832:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a834:	2b00      	cmp	r3, #0
    a836:	f43f af2a 	beq.w	a68e <_strtod_l+0x1de>
    a83a:	eeb1 8b48 	vneg.f64	d8, d8
    a83e:	eeb0 0b48 	vmov.f64	d0, d8
    a842:	b017      	add	sp, #92	; 0x5c
    a844:	ecbd 8b10 	vpop	{d8-d15}
    a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a84c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a84e:	900b      	str	r0, [sp, #44]	; 0x2c
    a850:	1c5a      	adds	r2, r3, #1
    a852:	9211      	str	r2, [sp, #68]	; 0x44
    a854:	785c      	ldrb	r4, [r3, #1]
    a856:	46ae      	mov	lr, r5
    a858:	e6f8      	b.n	a64c <_strtod_l+0x19c>
    a85a:	bf00      	nop
    a85c:	f3af 8000 	nop.w
	...
    a868:	20007d34 	.word	0x20007d34
    a86c:	200002a8 	.word	0x200002a8
    a870:	20000c34 	.word	0x20000c34
    a874:	20008024 	.word	0x20008024
    a878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a87a:	1aeb      	subs	r3, r5, r3
    a87c:	4413      	add	r3, r2
    a87e:	2b00      	cmp	r3, #0
    a880:	f340 82b0 	ble.w	ade4 <_strtod_l+0x934>
    a884:	f013 010f 	ands.w	r1, r3, #15
    a888:	d00a      	beq.n	a8a0 <_strtod_l+0x3f0>
    a88a:	4ac3      	ldr	r2, [pc, #780]	; (ab98 <_strtod_l+0x6e8>)
    a88c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a890:	ed9d 6b04 	vldr	d6, [sp, #16]
    a894:	ed92 7b00 	vldr	d7, [r2]
    a898:	ee27 7b06 	vmul.f64	d7, d7, d6
    a89c:	ed8d 7b04 	vstr	d7, [sp, #16]
    a8a0:	f033 020f 	bics.w	r2, r3, #15
    a8a4:	f040 8238 	bne.w	ad18 <_strtod_l+0x868>
    a8a8:	2300      	movs	r3, #0
    a8aa:	9308      	str	r3, [sp, #32]
    a8ac:	9600      	str	r6, [sp, #0]
    a8ae:	462b      	mov	r3, r5
    a8b0:	4672      	mov	r2, lr
    a8b2:	4639      	mov	r1, r7
    a8b4:	4640      	mov	r0, r8
    a8b6:	f002 fac3 	bl	ce40 <__s2b>
    a8ba:	4681      	mov	r9, r0
    a8bc:	2800      	cmp	r0, #0
    a8be:	f000 82e1 	beq.w	ae84 <_strtod_l+0x9d4>
    a8c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a8c4:	eba3 0b0b 	sub.w	fp, r3, fp
    a8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a8ca:	ed9f eba9 	vldr	d14, [pc, #676]	; ab70 <_strtod_l+0x6c0>
    a8ce:	2b00      	cmp	r3, #0
    a8d0:	ed9f cba9 	vldr	d12, [pc, #676]	; ab78 <_strtod_l+0x6c8>
    a8d4:	ed9f dbaa 	vldr	d13, [pc, #680]	; ab80 <_strtod_l+0x6d0>
    a8d8:	ed9f bbab 	vldr	d11, [pc, #684]	; ab88 <_strtod_l+0x6d8>
    a8dc:	bfb4      	ite	lt
    a8de:	465a      	movlt	r2, fp
    a8e0:	2200      	movge	r2, #0
    a8e2:	f04f 0a00 	mov.w	sl, #0
    a8e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a8ea:	920b      	str	r2, [sp, #44]	; 0x2c
    a8ec:	930c      	str	r3, [sp, #48]	; 0x30
    a8ee:	4654      	mov	r4, sl
    a8f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a8f4:	4640      	mov	r0, r8
    a8f6:	f002 fa21 	bl	cd3c <_Balloc>
    a8fa:	4606      	mov	r6, r0
    a8fc:	2800      	cmp	r0, #0
    a8fe:	f000 810e 	beq.w	ab1e <_strtod_l+0x66e>
    a902:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a906:	ed9d 8b04 	vldr	d8, [sp, #16]
    a90a:	3202      	adds	r2, #2
    a90c:	0092      	lsls	r2, r2, #2
    a90e:	f109 010c 	add.w	r1, r9, #12
    a912:	300c      	adds	r0, #12
    a914:	f7fd fb72 	bl	7ffc <memcpy>
    a918:	eeb0 0b48 	vmov.f64	d0, d8
    a91c:	aa14      	add	r2, sp, #80	; 0x50
    a91e:	a913      	add	r1, sp, #76	; 0x4c
    a920:	4640      	mov	r0, r8
    a922:	f002 fe49 	bl	d5b8 <__d2b>
    a926:	9012      	str	r0, [sp, #72]	; 0x48
    a928:	2800      	cmp	r0, #0
    a92a:	f000 80e4 	beq.w	aaf6 <_strtod_l+0x646>
    a92e:	2101      	movs	r1, #1
    a930:	4640      	mov	r0, r8
    a932:	f002 fb2d 	bl	cf90 <__i2b>
    a936:	4604      	mov	r4, r0
    a938:	2800      	cmp	r0, #0
    a93a:	f000 80f0 	beq.w	ab1e <_strtod_l+0x66e>
    a93e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a940:	2a00      	cmp	r2, #0
    a942:	f2c0 80de 	blt.w	ab02 <_strtod_l+0x652>
    a946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a948:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    a94a:	eb02 0b03 	add.w	fp, r2, r3
    a94e:	9b08      	ldr	r3, [sp, #32]
    a950:	9d14      	ldr	r5, [sp, #80]	; 0x50
    a952:	1ad2      	subs	r2, r2, r3
    a954:	442a      	add	r2, r5
    a956:	4b91      	ldr	r3, [pc, #580]	; (ab9c <_strtod_l+0x6ec>)
    a958:	3a01      	subs	r2, #1
    a95a:	429a      	cmp	r2, r3
    a95c:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    a960:	f280 8098 	bge.w	aa94 <_strtod_l+0x5e4>
    a964:	1a99      	subs	r1, r3, r2
    a966:	291f      	cmp	r1, #31
    a968:	eba5 0501 	sub.w	r5, r5, r1
    a96c:	f300 80e3 	bgt.w	ab36 <_strtod_l+0x686>
    a970:	2201      	movs	r2, #1
    a972:	fa02 f301 	lsl.w	r3, r2, r1
    a976:	930d      	str	r3, [sp, #52]	; 0x34
    a978:	2300      	movs	r3, #0
    a97a:	930e      	str	r3, [sp, #56]	; 0x38
    a97c:	442f      	add	r7, r5
    a97e:	9b08      	ldr	r3, [sp, #32]
    a980:	445d      	add	r5, fp
    a982:	45ab      	cmp	fp, r5
    a984:	465a      	mov	r2, fp
    a986:	441f      	add	r7, r3
    a988:	bfa8      	it	ge
    a98a:	462a      	movge	r2, r5
    a98c:	42ba      	cmp	r2, r7
    a98e:	bfa8      	it	ge
    a990:	463a      	movge	r2, r7
    a992:	2a00      	cmp	r2, #0
    a994:	dd03      	ble.n	a99e <_strtod_l+0x4ee>
    a996:	1aad      	subs	r5, r5, r2
    a998:	1abf      	subs	r7, r7, r2
    a99a:	ebab 0b02 	sub.w	fp, fp, r2
    a99e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a9a0:	2b00      	cmp	r3, #0
    a9a2:	f300 8088 	bgt.w	aab6 <_strtod_l+0x606>
    a9a6:	2d00      	cmp	r5, #0
    a9a8:	f300 809c 	bgt.w	aae4 <_strtod_l+0x634>
    a9ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a9ae:	2b00      	cmp	r3, #0
    a9b0:	f300 80b7 	bgt.w	ab22 <_strtod_l+0x672>
    a9b4:	2f00      	cmp	r7, #0
    a9b6:	f300 80a9 	bgt.w	ab0c <_strtod_l+0x65c>
    a9ba:	f1bb 0f00 	cmp.w	fp, #0
    a9be:	dd08      	ble.n	a9d2 <_strtod_l+0x522>
    a9c0:	4621      	mov	r1, r4
    a9c2:	465a      	mov	r2, fp
    a9c4:	4640      	mov	r0, r8
    a9c6:	f002 fc1f 	bl	d208 <__lshift>
    a9ca:	4604      	mov	r4, r0
    a9cc:	2800      	cmp	r0, #0
    a9ce:	f000 80a6 	beq.w	ab1e <_strtod_l+0x66e>
    a9d2:	9912      	ldr	r1, [sp, #72]	; 0x48
    a9d4:	4632      	mov	r2, r6
    a9d6:	4640      	mov	r0, r8
    a9d8:	f002 fcb0 	bl	d33c <__mdiff>
    a9dc:	4682      	mov	sl, r0
    a9de:	2800      	cmp	r0, #0
    a9e0:	f000 809d 	beq.w	ab1e <_strtod_l+0x66e>
    a9e4:	2300      	movs	r3, #0
    a9e6:	68c5      	ldr	r5, [r0, #12]
    a9e8:	60c3      	str	r3, [r0, #12]
    a9ea:	4621      	mov	r1, r4
    a9ec:	f002 fc84 	bl	d2f8 <__mcmp>
    a9f0:	2800      	cmp	r0, #0
    a9f2:	f2c0 83c7 	blt.w	b184 <_strtod_l+0xcd4>
    a9f6:	f000 8361 	beq.w	b0bc <_strtod_l+0xc0c>
    a9fa:	4621      	mov	r1, r4
    a9fc:	4650      	mov	r0, sl
    a9fe:	f002 fe45 	bl	d68c <__ratio>
    aa02:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    aa06:	eeb4 0bc7 	vcmpe.f64	d0, d7
    aa0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aa0e:	d846      	bhi.n	aa9e <_strtod_l+0x5ee>
    aa10:	2d00      	cmp	r5, #0
    aa12:	f000 80cb 	beq.w	abac <_strtod_l+0x6fc>
    aa16:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    aa1a:	9805      	ldr	r0, [sp, #20]
    aa1c:	4b60      	ldr	r3, [pc, #384]	; (aba0 <_strtod_l+0x6f0>)
    aa1e:	2200      	movs	r2, #0
    aa20:	4960      	ldr	r1, [pc, #384]	; (aba4 <_strtod_l+0x6f4>)
    aa22:	f8df c184 	ldr.w	ip, [pc, #388]	; aba8 <_strtod_l+0x6f8>
    aa26:	ea00 0701 	and.w	r7, r0, r1
    aa2a:	4567      	cmp	r7, ip
    aa2c:	f000 80d4 	beq.w	abd8 <_strtod_l+0x728>
    aa30:	9908      	ldr	r1, [sp, #32]
    aa32:	b159      	cbz	r1, aa4c <_strtod_l+0x59c>
    aa34:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    aa38:	d808      	bhi.n	aa4c <_strtod_l+0x59c>
    aa3a:	eeb4 9bcb 	vcmpe.f64	d9, d11
    aa3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aa42:	f240 8156 	bls.w	acf2 <_strtod_l+0x842>
    aa46:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    aa4a:	1bcb      	subs	r3, r1, r7
    aa4c:	eeb0 0b48 	vmov.f64	d0, d8
    aa50:	ec43 2b1a 	vmov	d10, r2, r3
    aa54:	f002 fd1c 	bl	d490 <__ulp>
    aa58:	eeaa 8b00 	vfma.f64	d8, d10, d0
    aa5c:	ed8d 8b04 	vstr	d8, [sp, #16]
    aa60:	ee18 3a90 	vmov	r3, s17
    aa64:	9a08      	ldr	r2, [sp, #32]
    aa66:	b922      	cbnz	r2, aa72 <_strtod_l+0x5c2>
    aa68:	4a4e      	ldr	r2, [pc, #312]	; (aba4 <_strtod_l+0x6f4>)
    aa6a:	401a      	ands	r2, r3
    aa6c:	4297      	cmp	r7, r2
    aa6e:	f000 80e4 	beq.w	ac3a <_strtod_l+0x78a>
    aa72:	9912      	ldr	r1, [sp, #72]	; 0x48
    aa74:	4640      	mov	r0, r8
    aa76:	f002 f987 	bl	cd88 <_Bfree>
    aa7a:	4631      	mov	r1, r6
    aa7c:	4640      	mov	r0, r8
    aa7e:	f002 f983 	bl	cd88 <_Bfree>
    aa82:	4621      	mov	r1, r4
    aa84:	4640      	mov	r0, r8
    aa86:	f002 f97f 	bl	cd88 <_Bfree>
    aa8a:	4651      	mov	r1, sl
    aa8c:	4640      	mov	r0, r8
    aa8e:	f002 f97b 	bl	cd88 <_Bfree>
    aa92:	e72d      	b.n	a8f0 <_strtod_l+0x440>
    aa94:	2301      	movs	r3, #1
    aa96:	2100      	movs	r1, #0
    aa98:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    aa9c:	e76e      	b.n	a97c <_strtod_l+0x4cc>
    aa9e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    aaa2:	ee20 9b09 	vmul.f64	d9, d0, d9
    aaa6:	2d00      	cmp	r5, #0
    aaa8:	d15f      	bne.n	ab6a <_strtod_l+0x6ba>
    aaaa:	eeb1 7b49 	vneg.f64	d7, d9
    aaae:	9805      	ldr	r0, [sp, #20]
    aab0:	ec53 2b17 	vmov	r2, r3, d7
    aab4:	e7b4      	b.n	aa20 <_strtod_l+0x570>
    aab6:	4621      	mov	r1, r4
    aab8:	461a      	mov	r2, r3
    aaba:	4640      	mov	r0, r8
    aabc:	f002 fb44 	bl	d148 <__pow5mult>
    aac0:	4604      	mov	r4, r0
    aac2:	b360      	cbz	r0, ab1e <_strtod_l+0x66e>
    aac4:	4601      	mov	r1, r0
    aac6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    aac8:	4640      	mov	r0, r8
    aaca:	f002 fa8f 	bl	cfec <__multiply>
    aace:	b330      	cbz	r0, ab1e <_strtod_l+0x66e>
    aad0:	900f      	str	r0, [sp, #60]	; 0x3c
    aad2:	9912      	ldr	r1, [sp, #72]	; 0x48
    aad4:	4640      	mov	r0, r8
    aad6:	f002 f957 	bl	cd88 <_Bfree>
    aada:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    aadc:	9212      	str	r2, [sp, #72]	; 0x48
    aade:	2d00      	cmp	r5, #0
    aae0:	f77f af64 	ble.w	a9ac <_strtod_l+0x4fc>
    aae4:	9912      	ldr	r1, [sp, #72]	; 0x48
    aae6:	462a      	mov	r2, r5
    aae8:	4640      	mov	r0, r8
    aaea:	f002 fb8d 	bl	d208 <__lshift>
    aaee:	9012      	str	r0, [sp, #72]	; 0x48
    aaf0:	2800      	cmp	r0, #0
    aaf2:	f47f af5b 	bne.w	a9ac <_strtod_l+0x4fc>
    aaf6:	2322      	movs	r3, #34	; 0x22
    aaf8:	ed9f 8b25 	vldr	d8, [pc, #148]	; ab90 <_strtod_l+0x6e0>
    aafc:	f8c8 3000 	str.w	r3, [r8]
    ab00:	e0bc      	b.n	ac7c <_strtod_l+0x7cc>
    ab02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ab04:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    ab08:	1a9f      	subs	r7, r3, r2
    ab0a:	e720      	b.n	a94e <_strtod_l+0x49e>
    ab0c:	4631      	mov	r1, r6
    ab0e:	463a      	mov	r2, r7
    ab10:	4640      	mov	r0, r8
    ab12:	f002 fb79 	bl	d208 <__lshift>
    ab16:	4606      	mov	r6, r0
    ab18:	2800      	cmp	r0, #0
    ab1a:	f47f af4e 	bne.w	a9ba <_strtod_l+0x50a>
    ab1e:	9812      	ldr	r0, [sp, #72]	; 0x48
    ab20:	e7e9      	b.n	aaf6 <_strtod_l+0x646>
    ab22:	4631      	mov	r1, r6
    ab24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ab26:	4640      	mov	r0, r8
    ab28:	f002 fb0e 	bl	d148 <__pow5mult>
    ab2c:	4606      	mov	r6, r0
    ab2e:	2800      	cmp	r0, #0
    ab30:	f47f af40 	bne.w	a9b4 <_strtod_l+0x504>
    ab34:	e7f3      	b.n	ab1e <_strtod_l+0x66e>
    ab36:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    ab3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    ab3e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    ab42:	2101      	movs	r1, #1
    ab44:	32e2      	adds	r2, #226	; 0xe2
    ab46:	fa01 f302 	lsl.w	r3, r1, r2
    ab4a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    ab4e:	e715      	b.n	a97c <_strtod_l+0x4cc>
    ab50:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    ab54:	f04f 0b00 	mov.w	fp, #0
    ab58:	e5c0      	b.n	a6dc <_strtod_l+0x22c>
    ab5a:	2301      	movs	r3, #1
    ab5c:	930a      	str	r3, [sp, #40]	; 0x28
    ab5e:	f10a 0302 	add.w	r3, sl, #2
    ab62:	9311      	str	r3, [sp, #68]	; 0x44
    ab64:	f89a 4002 	ldrb.w	r4, [sl, #2]
    ab68:	e602      	b.n	a770 <_strtod_l+0x2c0>
    ab6a:	eeb0 7b49 	vmov.f64	d7, d9
    ab6e:	e79e      	b.n	aaae <_strtod_l+0x5fe>
    ab70:	94a03595 	.word	0x94a03595
    ab74:	3fcfffff 	.word	0x3fcfffff
    ab78:	94a03595 	.word	0x94a03595
    ab7c:	3fdfffff 	.word	0x3fdfffff
    ab80:	35afe535 	.word	0x35afe535
    ab84:	3fe00000 	.word	0x3fe00000
    ab88:	ffc00000 	.word	0xffc00000
    ab8c:	41dfffff 	.word	0x41dfffff
    ab90:	00000000 	.word	0x00000000
    ab94:	7ff00000 	.word	0x7ff00000
    ab98:	200002a8 	.word	0x200002a8
    ab9c:	fffffc02 	.word	0xfffffc02
    aba0:	3ff00000 	.word	0x3ff00000
    aba4:	7ff00000 	.word	0x7ff00000
    aba8:	7fe00000 	.word	0x7fe00000
    abac:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    abb0:	2900      	cmp	r1, #0
    abb2:	f000 8085 	beq.w	acc0 <_strtod_l+0x810>
    abb6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    abba:	2901      	cmp	r1, #1
    abbc:	f000 81d8 	beq.w	af70 <_strtod_l+0xac0>
    abc0:	4610      	mov	r0, r2
    abc2:	4bb7      	ldr	r3, [pc, #732]	; (aea0 <_strtod_l+0x9f0>)
    abc4:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    abc8:	2200      	movs	r2, #0
    abca:	e729      	b.n	aa20 <_strtod_l+0x570>
    abcc:	2c65      	cmp	r4, #101	; 0x65
    abce:	f04f 0c01 	mov.w	ip, #1
    abd2:	f43f adbe 	beq.w	a752 <_strtod_l+0x2a2>
    abd6:	e54c      	b.n	a672 <_strtod_l+0x1c2>
    abd8:	ec43 2b1a 	vmov	d10, r2, r3
    abdc:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    abe0:	9305      	str	r3, [sp, #20]
    abe2:	ed9d fb04 	vldr	d15, [sp, #16]
    abe6:	eeb0 0b4f 	vmov.f64	d0, d15
    abea:	f002 fc51 	bl	d490 <__ulp>
    abee:	49ad      	ldr	r1, [pc, #692]	; (aea4 <_strtod_l+0x9f4>)
    abf0:	eeaa fb00 	vfma.f64	d15, d10, d0
    abf4:	ee1f 3a90 	vmov	r3, s31
    abf8:	4aab      	ldr	r2, [pc, #684]	; (aea8 <_strtod_l+0x9f8>)
    abfa:	4019      	ands	r1, r3
    abfc:	4291      	cmp	r1, r2
    abfe:	ed8d fb04 	vstr	d15, [sp, #16]
    ac02:	d972      	bls.n	acea <_strtod_l+0x83a>
    ac04:	4ba9      	ldr	r3, [pc, #676]	; (aeac <_strtod_l+0x9fc>)
    ac06:	ee18 2a90 	vmov	r2, s17
    ac0a:	429a      	cmp	r2, r3
    ac0c:	d103      	bne.n	ac16 <_strtod_l+0x766>
    ac0e:	ee18 3a10 	vmov	r3, s16
    ac12:	3301      	adds	r3, #1
    ac14:	d083      	beq.n	ab1e <_strtod_l+0x66e>
    ac16:	4aa5      	ldr	r2, [pc, #660]	; (aeac <_strtod_l+0x9fc>)
    ac18:	f04f 33ff 	mov.w	r3, #4294967295
    ac1c:	e9cd 3204 	strd	r3, r2, [sp, #16]
    ac20:	e727      	b.n	aa72 <_strtod_l+0x5c2>
    ac22:	2300      	movs	r3, #0
    ac24:	930a      	str	r3, [sp, #40]	; 0x28
    ac26:	e79a      	b.n	ab5e <_strtod_l+0x6ae>
    ac28:	2c65      	cmp	r4, #101	; 0x65
    ac2a:	f000 80d0 	beq.w	adce <_strtod_l+0x91e>
    ac2e:	2c45      	cmp	r4, #69	; 0x45
    ac30:	f000 80cd 	beq.w	adce <_strtod_l+0x91e>
    ac34:	f04f 0c01 	mov.w	ip, #1
    ac38:	e5d1      	b.n	a7de <_strtod_l+0x32e>
    ac3a:	ec51 0b19 	vmov	r0, r1, d9
    ac3e:	930d      	str	r3, [sp, #52]	; 0x34
    ac40:	f009 fbe0 	bl	14404 <__aeabi_d2lz>
    ac44:	f009 fbb0 	bl	143a8 <__aeabi_l2d>
    ac48:	9b04      	ldr	r3, [sp, #16]
    ac4a:	431d      	orrs	r5, r3
    ac4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ac4e:	ec41 0b17 	vmov	d7, r0, r1
    ac52:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ac56:	431d      	orrs	r5, r3
    ac58:	ee39 9b47 	vsub.f64	d9, d9, d7
    ac5c:	f000 80a0 	beq.w	ada0 <_strtod_l+0x8f0>
    ac60:	eeb4 9bcc 	vcmpe.f64	d9, d12
    ac64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ac68:	d405      	bmi.n	ac76 <_strtod_l+0x7c6>
    ac6a:	eeb4 9bcd 	vcmpe.f64	d9, d13
    ac6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ac72:	f77f aefe 	ble.w	aa72 <_strtod_l+0x5c2>
    ac76:	ed9d 8b04 	vldr	d8, [sp, #16]
    ac7a:	9812      	ldr	r0, [sp, #72]	; 0x48
    ac7c:	4601      	mov	r1, r0
    ac7e:	4640      	mov	r0, r8
    ac80:	f002 f882 	bl	cd88 <_Bfree>
    ac84:	4631      	mov	r1, r6
    ac86:	4640      	mov	r0, r8
    ac88:	f002 f87e 	bl	cd88 <_Bfree>
    ac8c:	4621      	mov	r1, r4
    ac8e:	4640      	mov	r0, r8
    ac90:	f002 f87a 	bl	cd88 <_Bfree>
    ac94:	4649      	mov	r1, r9
    ac96:	4640      	mov	r0, r8
    ac98:	f002 f876 	bl	cd88 <_Bfree>
    ac9c:	4651      	mov	r1, sl
    ac9e:	4640      	mov	r0, r8
    aca0:	f002 f872 	bl	cd88 <_Bfree>
    aca4:	e5c1      	b.n	a82a <_strtod_l+0x37a>
    aca6:	2201      	movs	r2, #1
    aca8:	9209      	str	r2, [sp, #36]	; 0x24
    acaa:	1c79      	adds	r1, r7, #1
    acac:	9111      	str	r1, [sp, #68]	; 0x44
    acae:	787a      	ldrb	r2, [r7, #1]
    acb0:	2a00      	cmp	r2, #0
    acb2:	f43f ace5 	beq.w	a680 <_strtod_l+0x1d0>
    acb6:	460f      	mov	r7, r1
    acb8:	e470      	b.n	a59c <_strtod_l+0xec>
    acba:	2200      	movs	r2, #0
    acbc:	9209      	str	r2, [sp, #36]	; 0x24
    acbe:	e7f4      	b.n	acaa <_strtod_l+0x7fa>
    acc0:	f3c2 0313 	ubfx	r3, r2, #0, #20
    acc4:	4610      	mov	r0, r2
    acc6:	2b00      	cmp	r3, #0
    acc8:	f47f af7b 	bne.w	abc2 <_strtod_l+0x712>
    accc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    acd0:	eeb4 0bc7 	vcmpe.f64	d0, d7
    acd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acd8:	f100 81d3 	bmi.w	b082 <_strtod_l+0xbd2>
    acdc:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    ace0:	ee20 9b09 	vmul.f64	d9, d0, d9
    ace4:	eeb1 7b49 	vneg.f64	d7, d9
    ace8:	e6e2      	b.n	aab0 <_strtod_l+0x600>
    acea:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    acee:	9305      	str	r3, [sp, #20]
    acf0:	e6b8      	b.n	aa64 <_strtod_l+0x5b4>
    acf2:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    acf6:	ee19 3a10 	vmov	r3, s18
    acfa:	2b01      	cmp	r3, #1
    acfc:	bf38      	it	cc
    acfe:	2301      	movcc	r3, #1
    ad00:	ee09 3a10 	vmov	s18, r3
    ad04:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    ad08:	2d00      	cmp	r5, #0
    ad0a:	f040 813e 	bne.w	af8a <_strtod_l+0xada>
    ad0e:	eeb1 7b49 	vneg.f64	d7, d9
    ad12:	ec53 2b17 	vmov	r2, r3, d7
    ad16:	e696      	b.n	aa46 <_strtod_l+0x596>
    ad18:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    ad1c:	f300 80b2 	bgt.w	ae84 <_strtod_l+0x9d4>
    ad20:	2a10      	cmp	r2, #16
    ad22:	ea4f 1322 	mov.w	r3, r2, asr #4
    ad26:	f340 8286 	ble.w	b236 <_strtod_l+0xd86>
    ad2a:	4c61      	ldr	r4, [pc, #388]	; (aeb0 <_strtod_l+0xa00>)
    ad2c:	ed9d 7b04 	vldr	d7, [sp, #16]
    ad30:	2000      	movs	r0, #0
    ad32:	4622      	mov	r2, r4
    ad34:	4601      	mov	r1, r0
    ad36:	f013 0f01 	tst.w	r3, #1
    ad3a:	f101 0101 	add.w	r1, r1, #1
    ad3e:	ea4f 0363 	mov.w	r3, r3, asr #1
    ad42:	d004      	beq.n	ad4e <_strtod_l+0x89e>
    ad44:	ed92 6b00 	vldr	d6, [r2]
    ad48:	2001      	movs	r0, #1
    ad4a:	ee27 7b06 	vmul.f64	d7, d7, d6
    ad4e:	2b01      	cmp	r3, #1
    ad50:	f102 0208 	add.w	r2, r2, #8
    ad54:	d1ef      	bne.n	ad36 <_strtod_l+0x886>
    ad56:	b108      	cbz	r0, ad5c <_strtod_l+0x8ac>
    ad58:	ed8d 7b04 	vstr	d7, [sp, #16]
    ad5c:	9b05      	ldr	r3, [sp, #20]
    ad5e:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    ad62:	9305      	str	r3, [sp, #20]
    ad64:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    ad68:	ed9d 6b04 	vldr	d6, [sp, #16]
    ad6c:	ed94 7b00 	vldr	d7, [r4]
    ad70:	4b4c      	ldr	r3, [pc, #304]	; (aea4 <_strtod_l+0x9f4>)
    ad72:	ee27 7b06 	vmul.f64	d7, d7, d6
    ad76:	ee17 2a90 	vmov	r2, s15
    ad7a:	494e      	ldr	r1, [pc, #312]	; (aeb4 <_strtod_l+0xa04>)
    ad7c:	4013      	ands	r3, r2
    ad7e:	428b      	cmp	r3, r1
    ad80:	ed8d 7b04 	vstr	d7, [sp, #16]
    ad84:	d87e      	bhi.n	ae84 <_strtod_l+0x9d4>
    ad86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    ad8a:	428b      	cmp	r3, r1
    ad8c:	f240 81d6 	bls.w	b13c <_strtod_l+0xc8c>
    ad90:	4c46      	ldr	r4, [pc, #280]	; (aeac <_strtod_l+0x9fc>)
    ad92:	f04f 33ff 	mov.w	r3, #4294967295
    ad96:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ad9a:	2300      	movs	r3, #0
    ad9c:	9308      	str	r3, [sp, #32]
    ad9e:	e585      	b.n	a8ac <_strtod_l+0x3fc>
    ada0:	eeb4 9bce 	vcmpe.f64	d9, d14
    ada4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ada8:	f57f ae63 	bpl.w	aa72 <_strtod_l+0x5c2>
    adac:	e763      	b.n	ac76 <_strtod_l+0x7c6>
    adae:	3216      	adds	r2, #22
    adb0:	f6ff ad62 	blt.w	a878 <_strtod_l+0x3c8>
    adb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    adb6:	eba3 0b0b 	sub.w	fp, r3, fp
    adba:	4b3f      	ldr	r3, [pc, #252]	; (aeb8 <_strtod_l+0xa08>)
    adbc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    adc0:	ed93 7b00 	vldr	d7, [r3]
    adc4:	ed9d 6b04 	vldr	d6, [sp, #16]
    adc8:	ee86 8b07 	vdiv.f64	d8, d6, d7
    adcc:	e52d      	b.n	a82a <_strtod_l+0x37a>
    adce:	f04f 0e00 	mov.w	lr, #0
    add2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    add6:	f04f 0c01 	mov.w	ip, #1
    adda:	e44e      	b.n	a67a <_strtod_l+0x1ca>
    addc:	2c6e      	cmp	r4, #110	; 0x6e
    adde:	f43f ad10 	beq.w	a802 <_strtod_l+0x352>
    ade2:	e44d      	b.n	a680 <_strtod_l+0x1d0>
    ade4:	f43f ad60 	beq.w	a8a8 <_strtod_l+0x3f8>
    ade8:	425b      	negs	r3, r3
    adea:	f013 010f 	ands.w	r1, r3, #15
    adee:	d00a      	beq.n	ae06 <_strtod_l+0x956>
    adf0:	4a31      	ldr	r2, [pc, #196]	; (aeb8 <_strtod_l+0xa08>)
    adf2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    adf6:	ed9d 6b04 	vldr	d6, [sp, #16]
    adfa:	ed92 7b00 	vldr	d7, [r2]
    adfe:	ee86 7b07 	vdiv.f64	d7, d6, d7
    ae02:	ed8d 7b04 	vstr	d7, [sp, #16]
    ae06:	111b      	asrs	r3, r3, #4
    ae08:	f43f ad4e 	beq.w	a8a8 <_strtod_l+0x3f8>
    ae0c:	2b1f      	cmp	r3, #31
    ae0e:	dc33      	bgt.n	ae78 <_strtod_l+0x9c8>
    ae10:	f013 0210 	ands.w	r2, r3, #16
    ae14:	bf18      	it	ne
    ae16:	226a      	movne	r2, #106	; 0x6a
    ae18:	ed9d 7b04 	vldr	d7, [sp, #16]
    ae1c:	9208      	str	r2, [sp, #32]
    ae1e:	4a27      	ldr	r2, [pc, #156]	; (aebc <_strtod_l+0xa0c>)
    ae20:	2100      	movs	r1, #0
    ae22:	07d8      	lsls	r0, r3, #31
    ae24:	d504      	bpl.n	ae30 <_strtod_l+0x980>
    ae26:	ed92 6b00 	vldr	d6, [r2]
    ae2a:	2101      	movs	r1, #1
    ae2c:	ee27 7b06 	vmul.f64	d7, d7, d6
    ae30:	105b      	asrs	r3, r3, #1
    ae32:	f102 0208 	add.w	r2, r2, #8
    ae36:	d1f4      	bne.n	ae22 <_strtod_l+0x972>
    ae38:	b109      	cbz	r1, ae3e <_strtod_l+0x98e>
    ae3a:	ed8d 7b04 	vstr	d7, [sp, #16]
    ae3e:	9b08      	ldr	r3, [sp, #32]
    ae40:	b193      	cbz	r3, ae68 <_strtod_l+0x9b8>
    ae42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ae46:	f3c1 520a 	ubfx	r2, r1, #20, #11
    ae4a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    ae4e:	2b00      	cmp	r3, #0
    ae50:	dd0a      	ble.n	ae68 <_strtod_l+0x9b8>
    ae52:	2b1f      	cmp	r3, #31
    ae54:	f340 822f 	ble.w	b2b6 <_strtod_l+0xe06>
    ae58:	2000      	movs	r0, #0
    ae5a:	2b34      	cmp	r3, #52	; 0x34
    ae5c:	9004      	str	r0, [sp, #16]
    ae5e:	f340 8240 	ble.w	b2e2 <_strtod_l+0xe32>
    ae62:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    ae66:	9305      	str	r3, [sp, #20]
    ae68:	ed9d 7b04 	vldr	d7, [sp, #16]
    ae6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    ae70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae74:	f47f ad1a 	bne.w	a8ac <_strtod_l+0x3fc>
    ae78:	2322      	movs	r3, #34	; 0x22
    ae7a:	ed9f 8b05 	vldr	d8, [pc, #20]	; ae90 <_strtod_l+0x9e0>
    ae7e:	f8c8 3000 	str.w	r3, [r8]
    ae82:	e4d2      	b.n	a82a <_strtod_l+0x37a>
    ae84:	2322      	movs	r3, #34	; 0x22
    ae86:	ed9f 8b04 	vldr	d8, [pc, #16]	; ae98 <_strtod_l+0x9e8>
    ae8a:	f8c8 3000 	str.w	r3, [r8]
    ae8e:	e4cc      	b.n	a82a <_strtod_l+0x37a>
	...
    ae9c:	7ff00000 	.word	0x7ff00000
    aea0:	bff00000 	.word	0xbff00000
    aea4:	7ff00000 	.word	0x7ff00000
    aea8:	7c9fffff 	.word	0x7c9fffff
    aeac:	7fefffff 	.word	0x7fefffff
    aeb0:	20000280 	.word	0x20000280
    aeb4:	7ca00000 	.word	0x7ca00000
    aeb8:	200002a8 	.word	0x200002a8
    aebc:	20000370 	.word	0x20000370
    aec0:	9302      	str	r3, [sp, #8]
    aec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aec4:	9301      	str	r3, [sp, #4]
    aec6:	ab12      	add	r3, sp, #72	; 0x48
    aec8:	9300      	str	r3, [sp, #0]
    aeca:	4aa7      	ldr	r2, [pc, #668]	; (b168 <_strtod_l+0xcb8>)
    aecc:	ab13      	add	r3, sp, #76	; 0x4c
    aece:	a911      	add	r1, sp, #68	; 0x44
    aed0:	4640      	mov	r0, r8
    aed2:	f001 fb5f 	bl	c594 <__gethex>
    aed6:	f010 050f 	ands.w	r5, r0, #15
    aeda:	4604      	mov	r4, r0
    aedc:	f43f aca3 	beq.w	a826 <_strtod_l+0x376>
    aee0:	2d06      	cmp	r5, #6
    aee2:	d174      	bne.n	afce <_strtod_l+0xb1e>
    aee4:	9b07      	ldr	r3, [sp, #28]
    aee6:	ed9f 8b9a 	vldr	d8, [pc, #616]	; b150 <_strtod_l+0xca0>
    aeea:	3701      	adds	r7, #1
    aeec:	2b00      	cmp	r3, #0
    aeee:	f43f abce 	beq.w	a68e <_strtod_l+0x1de>
    aef2:	601f      	str	r7, [r3, #0]
    aef4:	f7ff bbcb 	b.w	a68e <_strtod_l+0x1de>
    aef8:	ed9d 8b04 	vldr	d8, [sp, #16]
    aefc:	e495      	b.n	a82a <_strtod_l+0x37a>
    aefe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    af00:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    af04:	4403      	add	r3, r0
    af06:	930b      	str	r3, [sp, #44]	; 0x2c
    af08:	2801      	cmp	r0, #1
    af0a:	f105 0301 	add.w	r3, r5, #1
    af0e:	461a      	mov	r2, r3
    af10:	d014      	beq.n	af3c <_strtod_l+0xa8c>
    af12:	4428      	add	r0, r5
    af14:	1e44      	subs	r4, r0, #1
    af16:	e003      	b.n	af20 <_strtod_l+0xa70>
    af18:	0046      	lsls	r6, r0, #1
    af1a:	429c      	cmp	r4, r3
    af1c:	d00d      	beq.n	af3a <_strtod_l+0xa8a>
    af1e:	3301      	adds	r3, #1
    af20:	462a      	mov	r2, r5
    af22:	2a08      	cmp	r2, #8
    af24:	461d      	mov	r5, r3
    af26:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    af2a:	d9f5      	bls.n	af18 <_strtod_l+0xa68>
    af2c:	2b10      	cmp	r3, #16
    af2e:	bfdc      	itt	le
    af30:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    af34:	ea4f 0949 	movle.w	r9, r9, lsl #1
    af38:	e7ef      	b.n	af1a <_strtod_l+0xa6a>
    af3a:	3202      	adds	r2, #2
    af3c:	2d08      	cmp	r5, #8
    af3e:	dc3c      	bgt.n	afba <_strtod_l+0xb0a>
    af40:	4615      	mov	r5, r2
    af42:	f7ff bb79 	b.w	a638 <_strtod_l+0x188>
    af46:	4989      	ldr	r1, [pc, #548]	; (b16c <_strtod_l+0xcbc>)
    af48:	2201      	movs	r2, #1
    af4a:	4638      	mov	r0, r7
    af4c:	f000 fd74 	bl	ba38 <strncmp>
    af50:	2800      	cmp	r0, #0
    af52:	f000 8082 	beq.w	b05a <_strtod_l+0xbaa>
    af56:	f04f 0e00 	mov.w	lr, #0
    af5a:	46f1      	mov	r9, lr
    af5c:	4676      	mov	r6, lr
    af5e:	4675      	mov	r5, lr
    af60:	f7ff bbb5 	b.w	a6ce <_strtod_l+0x21e>
    af64:	f644 631f 	movw	r3, #19999	; 0x4e1f
    af68:	459b      	cmp	fp, r3
    af6a:	bfa8      	it	ge
    af6c:	469b      	movge	fp, r3
    af6e:	e42f      	b.n	a7d0 <_strtod_l+0x320>
    af70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    af74:	4618      	mov	r0, r3
    af76:	2b00      	cmp	r3, #0
    af78:	f47f ae23 	bne.w	abc2 <_strtod_l+0x712>
    af7c:	2322      	movs	r3, #34	; 0x22
    af7e:	ed9f 8b74 	vldr	d8, [pc, #464]	; b150 <_strtod_l+0xca0>
    af82:	9812      	ldr	r0, [sp, #72]	; 0x48
    af84:	f8c8 3000 	str.w	r3, [r8]
    af88:	e678      	b.n	ac7c <_strtod_l+0x7cc>
    af8a:	eeb0 7b49 	vmov.f64	d7, d9
    af8e:	e6c0      	b.n	ad12 <_strtod_l+0x862>
    af90:	4977      	ldr	r1, [pc, #476]	; (b170 <_strtod_l+0xcc0>)
    af92:	a811      	add	r0, sp, #68	; 0x44
    af94:	f001 fdc8 	bl	cb28 <__match>
    af98:	2800      	cmp	r0, #0
    af9a:	f43f ab71 	beq.w	a680 <_strtod_l+0x1d0>
    af9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    afa0:	4974      	ldr	r1, [pc, #464]	; (b174 <_strtod_l+0xcc4>)
    afa2:	3b01      	subs	r3, #1
    afa4:	a811      	add	r0, sp, #68	; 0x44
    afa6:	9311      	str	r3, [sp, #68]	; 0x44
    afa8:	f001 fdbe 	bl	cb28 <__match>
    afac:	b910      	cbnz	r0, afb4 <_strtod_l+0xb04>
    afae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    afb0:	3301      	adds	r3, #1
    afb2:	9311      	str	r3, [sp, #68]	; 0x44
    afb4:	ed9f 8b68 	vldr	d8, [pc, #416]	; b158 <_strtod_l+0xca8>
    afb8:	e437      	b.n	a82a <_strtod_l+0x37a>
    afba:	2a10      	cmp	r2, #16
    afbc:	bfdc      	itt	le
    afbe:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    afc2:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    afc6:	4615      	mov	r5, r2
    afc8:	2000      	movs	r0, #0
    afca:	f7ff bb3a 	b.w	a642 <_strtod_l+0x192>
    afce:	9a12      	ldr	r2, [sp, #72]	; 0x48
    afd0:	b13a      	cbz	r2, afe2 <_strtod_l+0xb32>
    afd2:	2135      	movs	r1, #53	; 0x35
    afd4:	a814      	add	r0, sp, #80	; 0x50
    afd6:	f002 fb8b 	bl	d6f0 <__copybits>
    afda:	9912      	ldr	r1, [sp, #72]	; 0x48
    afdc:	4640      	mov	r0, r8
    afde:	f001 fed3 	bl	cd88 <_Bfree>
    afe2:	3d01      	subs	r5, #1
    afe4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    afe6:	2d04      	cmp	r5, #4
    afe8:	f200 818f 	bhi.w	b30a <_strtod_l+0xe5a>
    afec:	e8df f005 	tbb	[pc, r5]
    aff0:	1f2a2d03 	.word	0x1f2a2d03
    aff4:	03          	.byte	0x03
    aff5:	00          	.byte	0x00
    aff6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    aff8:	9204      	str	r2, [sp, #16]
    affa:	f203 4233 	addw	r2, r3, #1075	; 0x433
    affe:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b000:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    b004:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    b008:	9305      	str	r3, [sp, #20]
    b00a:	05e5      	lsls	r5, r4, #23
    b00c:	d502      	bpl.n	b014 <_strtod_l+0xb64>
    b00e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b012:	9305      	str	r3, [sp, #20]
    b014:	4a58      	ldr	r2, [pc, #352]	; (b178 <_strtod_l+0xcc8>)
    b016:	401a      	ands	r2, r3
    b018:	ed9d 8b04 	vldr	d8, [sp, #16]
    b01c:	2a00      	cmp	r2, #0
    b01e:	f47f ac04 	bne.w	a82a <_strtod_l+0x37a>
    b022:	f000 fded 	bl	bc00 <__errno>
    b026:	2322      	movs	r3, #34	; 0x22
    b028:	6003      	str	r3, [r0, #0]
    b02a:	f7ff bbfe 	b.w	a82a <_strtod_l+0x37a>
    b02e:	f04f 33ff 	mov.w	r3, #4294967295
    b032:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    b036:	e9cd 3604 	strd	r3, r6, [sp, #16]
    b03a:	05e3      	lsls	r3, r4, #23
    b03c:	f57f af5c 	bpl.w	aef8 <_strtod_l+0xa48>
    b040:	9b05      	ldr	r3, [sp, #20]
    b042:	e7e4      	b.n	b00e <_strtod_l+0xb5e>
    b044:	4b4c      	ldr	r3, [pc, #304]	; (b178 <_strtod_l+0xcc8>)
    b046:	9305      	str	r3, [sp, #20]
    b048:	e7f7      	b.n	b03a <_strtod_l+0xb8a>
    b04a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b04c:	9304      	str	r3, [sp, #16]
    b04e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b050:	9305      	str	r3, [sp, #20]
    b052:	e7da      	b.n	b00a <_strtod_l+0xb5a>
    b054:	2000      	movs	r0, #0
    b056:	f7ff bae1 	b.w	a61c <_strtod_l+0x16c>
    b05a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b05c:	461a      	mov	r2, r3
    b05e:	3301      	adds	r3, #1
    b060:	9311      	str	r3, [sp, #68]	; 0x44
    b062:	7854      	ldrb	r4, [r2, #1]
    b064:	4606      	mov	r6, r0
    b066:	4681      	mov	r9, r0
    b068:	f7ff bacd 	b.w	a606 <_strtod_l+0x156>
    b06c:	4b43      	ldr	r3, [pc, #268]	; (b17c <_strtod_l+0xccc>)
    b06e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b072:	ed93 8b00 	vldr	d8, [r3]
    b076:	ed9d 7b04 	vldr	d7, [sp, #16]
    b07a:	ee28 8b07 	vmul.f64	d8, d8, d7
    b07e:	f7ff bbd4 	b.w	a82a <_strtod_l+0x37a>
    b082:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    b086:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    b08a:	e511      	b.n	aab0 <_strtod_l+0x600>
    b08c:	46ae      	mov	lr, r5
    b08e:	900b      	str	r0, [sp, #44]	; 0x2c
    b090:	f7ff badc 	b.w	a64c <_strtod_l+0x19c>
    b094:	4b39      	ldr	r3, [pc, #228]	; (b17c <_strtod_l+0xccc>)
    b096:	f1c5 050f 	rsb	r5, r5, #15
    b09a:	1b4a      	subs	r2, r1, r5
    b09c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    b0a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b0a4:	ed95 8b00 	vldr	d8, [r5]
    b0a8:	ed93 7b00 	vldr	d7, [r3]
    b0ac:	ed9d 6b04 	vldr	d6, [sp, #16]
    b0b0:	ee28 8b06 	vmul.f64	d8, d8, d6
    b0b4:	ee28 8b07 	vmul.f64	d8, d8, d7
    b0b8:	f7ff bbb7 	b.w	a82a <_strtod_l+0x37a>
    b0bc:	2d00      	cmp	r5, #0
    b0be:	f000 8095 	beq.w	b1ec <_strtod_l+0xd3c>
    b0c2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    b0c6:	4b2e      	ldr	r3, [pc, #184]	; (b180 <_strtod_l+0xcd0>)
    b0c8:	f3cc 0113 	ubfx	r1, ip, #0, #20
    b0cc:	4299      	cmp	r1, r3
    b0ce:	4662      	mov	r2, ip
    b0d0:	f000 80d2 	beq.w	b278 <_strtod_l+0xdc8>
    b0d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b0d6:	2b00      	cmp	r3, #0
    b0d8:	f000 80a5 	beq.w	b226 <_strtod_l+0xd76>
    b0dc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b0e0:	4213      	tst	r3, r2
    b0e2:	4617      	mov	r7, r2
    b0e4:	d01a      	beq.n	b11c <_strtod_l+0xc6c>
    b0e6:	eeb0 0b48 	vmov.f64	d0, d8
    b0ea:	2d00      	cmp	r5, #0
    b0ec:	f000 80a6 	beq.w	b23c <_strtod_l+0xd8c>
    b0f0:	f002 f9ce 	bl	d490 <__ulp>
    b0f4:	9b08      	ldr	r3, [sp, #32]
    b0f6:	b17b      	cbz	r3, b118 <_strtod_l+0xc68>
    b0f8:	f3c7 530a 	ubfx	r3, r7, #20, #11
    b0fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b100:	2b00      	cmp	r3, #0
    b102:	dd09      	ble.n	b118 <_strtod_l+0xc68>
    b104:	051b      	lsls	r3, r3, #20
    b106:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    b10a:	2000      	movs	r0, #0
    b10c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    b110:	ec41 0b17 	vmov	d7, r0, r1
    b114:	ee20 0b07 	vmul.f64	d0, d0, d7
    b118:	ee38 8b00 	vadd.f64	d8, d8, d0
    b11c:	9b08      	ldr	r3, [sp, #32]
    b11e:	b15b      	cbz	r3, b138 <_strtod_l+0xc88>
    b120:	ed9f 7b0f 	vldr	d7, [pc, #60]	; b160 <_strtod_l+0xcb0>
    b124:	4b14      	ldr	r3, [pc, #80]	; (b178 <_strtod_l+0xcc8>)
    b126:	ee28 8b07 	vmul.f64	d8, d8, d7
    b12a:	ee18 2a90 	vmov	r2, s17
    b12e:	4013      	ands	r3, r2
    b130:	b913      	cbnz	r3, b138 <_strtod_l+0xc88>
    b132:	2322      	movs	r3, #34	; 0x22
    b134:	f8c8 3000 	str.w	r3, [r8]
    b138:	9812      	ldr	r0, [sp, #72]	; 0x48
    b13a:	e59f      	b.n	ac7c <_strtod_l+0x7cc>
    b13c:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    b140:	9305      	str	r3, [sp, #20]
    b142:	2300      	movs	r3, #0
    b144:	9308      	str	r3, [sp, #32]
    b146:	f7ff bbb1 	b.w	a8ac <_strtod_l+0x3fc>
    b14a:	bf00      	nop
    b14c:	f3af 8000 	nop.w
	...
    b15c:	7ff00000 	.word	0x7ff00000
    b160:	00000000 	.word	0x00000000
    b164:	39500000 	.word	0x39500000
    b168:	20007a20 	.word	0x20007a20
    b16c:	20007d34 	.word	0x20007d34
    b170:	20000c28 	.word	0x20000c28
    b174:	20000c2c 	.word	0x20000c2c
    b178:	7ff00000 	.word	0x7ff00000
    b17c:	200002a8 	.word	0x200002a8
    b180:	000fffff 	.word	0x000fffff
    b184:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b188:	430d      	orrs	r5, r1
    b18a:	d1c7      	bne.n	b11c <_strtod_l+0xc6c>
    b18c:	f3c2 0313 	ubfx	r3, r2, #0, #20
    b190:	4617      	mov	r7, r2
    b192:	2b00      	cmp	r3, #0
    b194:	d1c2      	bne.n	b11c <_strtod_l+0xc6c>
    b196:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b19a:	0d1b      	lsrs	r3, r3, #20
    b19c:	051b      	lsls	r3, r3, #20
    b19e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    b1a2:	d9bb      	bls.n	b11c <_strtod_l+0xc6c>
    b1a4:	f8da 3014 	ldr.w	r3, [sl, #20]
    b1a8:	b91b      	cbnz	r3, b1b2 <_strtod_l+0xd02>
    b1aa:	f8da 3010 	ldr.w	r3, [sl, #16]
    b1ae:	2b01      	cmp	r3, #1
    b1b0:	ddb4      	ble.n	b11c <_strtod_l+0xc6c>
    b1b2:	4651      	mov	r1, sl
    b1b4:	2201      	movs	r2, #1
    b1b6:	4640      	mov	r0, r8
    b1b8:	f002 f826 	bl	d208 <__lshift>
    b1bc:	4621      	mov	r1, r4
    b1be:	4682      	mov	sl, r0
    b1c0:	f002 f89a 	bl	d2f8 <__mcmp>
    b1c4:	2800      	cmp	r0, #0
    b1c6:	dda9      	ble.n	b11c <_strtod_l+0xc6c>
    b1c8:	9b08      	ldr	r3, [sp, #32]
    b1ca:	2b00      	cmp	r3, #0
    b1cc:	d17e      	bne.n	b2cc <_strtod_l+0xe1c>
    b1ce:	4b50      	ldr	r3, [pc, #320]	; (b310 <_strtod_l+0xe60>)
    b1d0:	403b      	ands	r3, r7
    b1d2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    b1d6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    b1da:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    b1de:	9305      	str	r3, [sp, #20]
    b1e0:	f04f 33ff 	mov.w	r3, #4294967295
    b1e4:	9304      	str	r3, [sp, #16]
    b1e6:	ed9d 8b04 	vldr	d8, [sp, #16]
    b1ea:	e797      	b.n	b11c <_strtod_l+0xc6c>
    b1ec:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b1f0:	f3c2 0313 	ubfx	r3, r2, #0, #20
    b1f4:	430b      	orrs	r3, r1
    b1f6:	4617      	mov	r7, r2
    b1f8:	f47f af6c 	bne.w	b0d4 <_strtod_l+0xc24>
    b1fc:	e7e4      	b.n	b1c8 <_strtod_l+0xd18>
    b1fe:	4945      	ldr	r1, [pc, #276]	; (b314 <_strtod_l+0xe64>)
    b200:	a811      	add	r0, sp, #68	; 0x44
    b202:	aa14      	add	r2, sp, #80	; 0x50
    b204:	f001 fcac 	bl	cb60 <__hexnan>
    b208:	2805      	cmp	r0, #5
    b20a:	f47f ab06 	bne.w	a81a <_strtod_l+0x36a>
    b20e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b210:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    b214:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    b218:	9305      	str	r3, [sp, #20]
    b21a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b21c:	9304      	str	r3, [sp, #16]
    b21e:	ed9d 8b04 	vldr	d8, [sp, #16]
    b222:	f7ff bb02 	b.w	a82a <_strtod_l+0x37a>
    b226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b22a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b22c:	4203      	tst	r3, r0
    b22e:	f43f af75 	beq.w	b11c <_strtod_l+0xc6c>
    b232:	460f      	mov	r7, r1
    b234:	e757      	b.n	b0e6 <_strtod_l+0xc36>
    b236:	4c38      	ldr	r4, [pc, #224]	; (b318 <_strtod_l+0xe68>)
    b238:	2100      	movs	r1, #0
    b23a:	e58f      	b.n	ad5c <_strtod_l+0x8ac>
    b23c:	f002 f928 	bl	d490 <__ulp>
    b240:	9b08      	ldr	r3, [sp, #32]
    b242:	2b00      	cmp	r3, #0
    b244:	d055      	beq.n	b2f2 <_strtod_l+0xe42>
    b246:	f3c7 530a 	ubfx	r3, r7, #20, #11
    b24a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b24e:	2b00      	cmp	r3, #0
    b250:	dd09      	ble.n	b266 <_strtod_l+0xdb6>
    b252:	051b      	lsls	r3, r3, #20
    b254:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    b258:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    b25c:	4628      	mov	r0, r5
    b25e:	ec41 0b17 	vmov	d7, r0, r1
    b262:	ee20 0b07 	vmul.f64	d0, d0, d7
    b266:	ee38 8b40 	vsub.f64	d8, d8, d0
    b26a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b272:	f47f af55 	bne.w	b120 <_strtod_l+0xc70>
    b276:	e681      	b.n	af7c <_strtod_l+0xacc>
    b278:	9b08      	ldr	r3, [sp, #32]
    b27a:	9904      	ldr	r1, [sp, #16]
    b27c:	b31b      	cbz	r3, b2c6 <_strtod_l+0xe16>
    b27e:	4b24      	ldr	r3, [pc, #144]	; (b310 <_strtod_l+0xe60>)
    b280:	4013      	ands	r3, r2
    b282:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    b286:	d81e      	bhi.n	b2c6 <_strtod_l+0xe16>
    b288:	0d1b      	lsrs	r3, r3, #20
    b28a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b28e:	f04f 30ff 	mov.w	r0, #4294967295
    b292:	fa00 f303 	lsl.w	r3, r0, r3
    b296:	4299      	cmp	r1, r3
    b298:	f47f af1c 	bne.w	b0d4 <_strtod_l+0xc24>
    b29c:	4b1f      	ldr	r3, [pc, #124]	; (b31c <_strtod_l+0xe6c>)
    b29e:	429a      	cmp	r2, r3
    b2a0:	d030      	beq.n	b304 <_strtod_l+0xe54>
    b2a2:	4b1b      	ldr	r3, [pc, #108]	; (b310 <_strtod_l+0xe60>)
    b2a4:	4013      	ands	r3, r2
    b2a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    b2aa:	9305      	str	r3, [sp, #20]
    b2ac:	2300      	movs	r3, #0
    b2ae:	9304      	str	r3, [sp, #16]
    b2b0:	ed9d 8b04 	vldr	d8, [sp, #16]
    b2b4:	e732      	b.n	b11c <_strtod_l+0xc6c>
    b2b6:	f04f 32ff 	mov.w	r2, #4294967295
    b2ba:	fa02 f303 	lsl.w	r3, r2, r3
    b2be:	9a04      	ldr	r2, [sp, #16]
    b2c0:	401a      	ands	r2, r3
    b2c2:	9204      	str	r2, [sp, #16]
    b2c4:	e5d0      	b.n	ae68 <_strtod_l+0x9b8>
    b2c6:	f04f 33ff 	mov.w	r3, #4294967295
    b2ca:	e7e4      	b.n	b296 <_strtod_l+0xde6>
    b2cc:	4b10      	ldr	r3, [pc, #64]	; (b310 <_strtod_l+0xe60>)
    b2ce:	403b      	ands	r3, r7
    b2d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    b2d4:	f73f af7d 	bgt.w	b1d2 <_strtod_l+0xd22>
    b2d8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    b2dc:	f73f af20 	bgt.w	b120 <_strtod_l+0xc70>
    b2e0:	e64c      	b.n	af7c <_strtod_l+0xacc>
    b2e2:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    b2e6:	f04f 33ff 	mov.w	r3, #4294967295
    b2ea:	4093      	lsls	r3, r2
    b2ec:	400b      	ands	r3, r1
    b2ee:	9305      	str	r3, [sp, #20]
    b2f0:	e5ba      	b.n	ae68 <_strtod_l+0x9b8>
    b2f2:	ee38 8b40 	vsub.f64	d8, d8, d0
    b2f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b2fe:	f47f af1b 	bne.w	b138 <_strtod_l+0xc88>
    b302:	e63b      	b.n	af7c <_strtod_l+0xacc>
    b304:	3101      	adds	r1, #1
    b306:	d1cc      	bne.n	b2a2 <_strtod_l+0xdf2>
    b308:	e409      	b.n	ab1e <_strtod_l+0x66e>
    b30a:	2300      	movs	r3, #0
    b30c:	e67d      	b.n	b00a <_strtod_l+0xb5a>
    b30e:	bf00      	nop
    b310:	7ff00000 	.word	0x7ff00000
    b314:	20007a34 	.word	0x20007a34
    b318:	20000280 	.word	0x20000280
    b31c:	7fefffff 	.word	0x7fefffff

0000b320 <_strtod_r>:
    b320:	4b01      	ldr	r3, [pc, #4]	; (b328 <_strtod_r+0x8>)
    b322:	f7ff b8c5 	b.w	a4b0 <_strtod_l>
    b326:	bf00      	nop
    b328:	200085f4 	.word	0x200085f4

0000b32c <_strtol_l.constprop.0>:
    b32c:	2b01      	cmp	r3, #1
    b32e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b332:	d040      	beq.n	b3b6 <_strtol_l.constprop.0+0x8a>
    b334:	2b24      	cmp	r3, #36	; 0x24
    b336:	4698      	mov	r8, r3
    b338:	d83d      	bhi.n	b3b6 <_strtol_l.constprop.0+0x8a>
    b33a:	4d4c      	ldr	r5, [pc, #304]	; (b46c <_strtol_l.constprop.0+0x140>)
    b33c:	468e      	mov	lr, r1
    b33e:	4676      	mov	r6, lr
    b340:	f81e bb01 	ldrb.w	fp, [lr], #1
    b344:	f815 400b 	ldrb.w	r4, [r5, fp]
    b348:	f014 0408 	ands.w	r4, r4, #8
    b34c:	d1f7      	bne.n	b33e <_strtol_l.constprop.0+0x12>
    b34e:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    b352:	d072      	beq.n	b43a <_strtol_l.constprop.0+0x10e>
    b354:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    b358:	bf08      	it	eq
    b35a:	f89e b000 	ldrbeq.w	fp, [lr]
    b35e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    b362:	bf08      	it	eq
    b364:	f106 0e02 	addeq.w	lr, r6, #2
    b368:	2b00      	cmp	r3, #0
    b36a:	d042      	beq.n	b3f2 <_strtol_l.constprop.0+0xc6>
    b36c:	2b10      	cmp	r3, #16
    b36e:	d057      	beq.n	b420 <_strtol_l.constprop.0+0xf4>
    b370:	fbb9 f7f8 	udiv	r7, r9, r8
    b374:	2500      	movs	r5, #0
    b376:	462e      	mov	r6, r5
    b378:	fb08 9a17 	mls	sl, r8, r7, r9
    b37c:	e005      	b.n	b38a <_strtol_l.constprop.0+0x5e>
    b37e:	d033      	beq.n	b3e8 <_strtol_l.constprop.0+0xbc>
    b380:	fb08 c606 	mla	r6, r8, r6, ip
    b384:	2501      	movs	r5, #1
    b386:	f81e bb01 	ldrb.w	fp, [lr], #1
    b38a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    b38e:	f1bc 0f09 	cmp.w	ip, #9
    b392:	d906      	bls.n	b3a2 <_strtol_l.constprop.0+0x76>
    b394:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    b398:	f1bc 0f19 	cmp.w	ip, #25
    b39c:	d812      	bhi.n	b3c4 <_strtol_l.constprop.0+0x98>
    b39e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    b3a2:	4563      	cmp	r3, ip
    b3a4:	dd17      	ble.n	b3d6 <_strtol_l.constprop.0+0xaa>
    b3a6:	f1b5 3fff 	cmp.w	r5, #4294967295
    b3aa:	d0ec      	beq.n	b386 <_strtol_l.constprop.0+0x5a>
    b3ac:	42b7      	cmp	r7, r6
    b3ae:	d2e6      	bcs.n	b37e <_strtol_l.constprop.0+0x52>
    b3b0:	f04f 35ff 	mov.w	r5, #4294967295
    b3b4:	e7e7      	b.n	b386 <_strtol_l.constprop.0+0x5a>
    b3b6:	f000 fc23 	bl	bc00 <__errno>
    b3ba:	2316      	movs	r3, #22
    b3bc:	6003      	str	r3, [r0, #0]
    b3be:	2000      	movs	r0, #0
    b3c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3c4:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    b3c8:	f1bc 0f19 	cmp.w	ip, #25
    b3cc:	d803      	bhi.n	b3d6 <_strtol_l.constprop.0+0xaa>
    b3ce:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    b3d2:	4563      	cmp	r3, ip
    b3d4:	dce7      	bgt.n	b3a6 <_strtol_l.constprop.0+0x7a>
    b3d6:	1c6b      	adds	r3, r5, #1
    b3d8:	d027      	beq.n	b42a <_strtol_l.constprop.0+0xfe>
    b3da:	b98c      	cbnz	r4, b400 <_strtol_l.constprop.0+0xd4>
    b3dc:	b10a      	cbz	r2, b3e2 <_strtol_l.constprop.0+0xb6>
    b3de:	bba5      	cbnz	r5, b44a <_strtol_l.constprop.0+0x11e>
    b3e0:	6011      	str	r1, [r2, #0]
    b3e2:	4630      	mov	r0, r6
    b3e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3e8:	45e2      	cmp	sl, ip
    b3ea:	dac9      	bge.n	b380 <_strtol_l.constprop.0+0x54>
    b3ec:	f04f 35ff 	mov.w	r5, #4294967295
    b3f0:	e7c9      	b.n	b386 <_strtol_l.constprop.0+0x5a>
    b3f2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b3f6:	d005      	beq.n	b404 <_strtol_l.constprop.0+0xd8>
    b3f8:	f04f 080a 	mov.w	r8, #10
    b3fc:	4643      	mov	r3, r8
    b3fe:	e7b7      	b.n	b370 <_strtol_l.constprop.0+0x44>
    b400:	4276      	negs	r6, r6
    b402:	e7eb      	b.n	b3dc <_strtol_l.constprop.0+0xb0>
    b404:	f89e 3000 	ldrb.w	r3, [lr]
    b408:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b40c:	2b58      	cmp	r3, #88	; 0x58
    b40e:	d121      	bne.n	b454 <_strtol_l.constprop.0+0x128>
    b410:	f04f 0810 	mov.w	r8, #16
    b414:	f89e b001 	ldrb.w	fp, [lr, #1]
    b418:	4643      	mov	r3, r8
    b41a:	f10e 0e02 	add.w	lr, lr, #2
    b41e:	e7a7      	b.n	b370 <_strtol_l.constprop.0+0x44>
    b420:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b424:	d01a      	beq.n	b45c <_strtol_l.constprop.0+0x130>
    b426:	4698      	mov	r8, r3
    b428:	e7a2      	b.n	b370 <_strtol_l.constprop.0+0x44>
    b42a:	2322      	movs	r3, #34	; 0x22
    b42c:	6003      	str	r3, [r0, #0]
    b42e:	b172      	cbz	r2, b44e <_strtol_l.constprop.0+0x122>
    b430:	f10e 31ff 	add.w	r1, lr, #4294967295
    b434:	464e      	mov	r6, r9
    b436:	6011      	str	r1, [r2, #0]
    b438:	e7d3      	b.n	b3e2 <_strtol_l.constprop.0+0xb6>
    b43a:	f89e b000 	ldrb.w	fp, [lr]
    b43e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    b442:	f106 0e02 	add.w	lr, r6, #2
    b446:	2401      	movs	r4, #1
    b448:	e78e      	b.n	b368 <_strtol_l.constprop.0+0x3c>
    b44a:	46b1      	mov	r9, r6
    b44c:	e7f0      	b.n	b430 <_strtol_l.constprop.0+0x104>
    b44e:	464e      	mov	r6, r9
    b450:	4630      	mov	r0, r6
    b452:	e7c7      	b.n	b3e4 <_strtol_l.constprop.0+0xb8>
    b454:	f04f 0808 	mov.w	r8, #8
    b458:	4643      	mov	r3, r8
    b45a:	e789      	b.n	b370 <_strtol_l.constprop.0+0x44>
    b45c:	f89e 5000 	ldrb.w	r5, [lr]
    b460:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    b464:	2d58      	cmp	r5, #88	; 0x58
    b466:	d0d3      	beq.n	b410 <_strtol_l.constprop.0+0xe4>
    b468:	4698      	mov	r8, r3
    b46a:	e781      	b.n	b370 <_strtol_l.constprop.0+0x44>
    b46c:	20000aa5 	.word	0x20000aa5

0000b470 <_strtol_r>:
    b470:	f7ff bf5c 	b.w	b32c <_strtol_l.constprop.0>

0000b474 <__cxa_atexit>:
    b474:	4613      	mov	r3, r2
    b476:	460a      	mov	r2, r1
    b478:	4601      	mov	r1, r0
    b47a:	2002      	movs	r0, #2
    b47c:	f000 be9e 	b.w	c1bc <__register_exitproc>

0000b480 <stdio_exit_handler>:
    b480:	4a02      	ldr	r2, [pc, #8]	; (b48c <stdio_exit_handler+0xc>)
    b482:	4903      	ldr	r1, [pc, #12]	; (b490 <stdio_exit_handler+0x10>)
    b484:	4803      	ldr	r0, [pc, #12]	; (b494 <stdio_exit_handler+0x14>)
    b486:	f000 b8bb 	b.w	b600 <_fwalk_sglue>
    b48a:	bf00      	nop
    b48c:	20008b70 	.word	0x20008b70
    b490:	00010b65 	.word	0x00010b65
    b494:	200084a8 	.word	0x200084a8

0000b498 <cleanup_stdio>:
    b498:	4b0c      	ldr	r3, [pc, #48]	; (b4cc <cleanup_stdio+0x34>)
    b49a:	6841      	ldr	r1, [r0, #4]
    b49c:	4299      	cmp	r1, r3
    b49e:	b510      	push	{r4, lr}
    b4a0:	4604      	mov	r4, r0
    b4a2:	d001      	beq.n	b4a8 <cleanup_stdio+0x10>
    b4a4:	f005 fb5e 	bl	10b64 <_fclose_r>
    b4a8:	68a1      	ldr	r1, [r4, #8]
    b4aa:	4b09      	ldr	r3, [pc, #36]	; (b4d0 <cleanup_stdio+0x38>)
    b4ac:	4299      	cmp	r1, r3
    b4ae:	d002      	beq.n	b4b6 <cleanup_stdio+0x1e>
    b4b0:	4620      	mov	r0, r4
    b4b2:	f005 fb57 	bl	10b64 <_fclose_r>
    b4b6:	68e1      	ldr	r1, [r4, #12]
    b4b8:	4b06      	ldr	r3, [pc, #24]	; (b4d4 <cleanup_stdio+0x3c>)
    b4ba:	4299      	cmp	r1, r3
    b4bc:	d004      	beq.n	b4c8 <cleanup_stdio+0x30>
    b4be:	4620      	mov	r0, r4
    b4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b4c4:	f005 bb4e 	b.w	10b64 <_fclose_r>
    b4c8:	bd10      	pop	{r4, pc}
    b4ca:	bf00      	nop
    b4cc:	2001e2e0 	.word	0x2001e2e0
    b4d0:	2001e348 	.word	0x2001e348
    b4d4:	2001e3b0 	.word	0x2001e3b0

0000b4d8 <global_stdio_init.part.0>:
    b4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b4dc:	4c2a      	ldr	r4, [pc, #168]	; (b588 <global_stdio_init.part.0+0xb0>)
    b4de:	4b2b      	ldr	r3, [pc, #172]	; (b58c <global_stdio_init.part.0+0xb4>)
    b4e0:	482b      	ldr	r0, [pc, #172]	; (b590 <global_stdio_init.part.0+0xb8>)
    b4e2:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b5a4 <global_stdio_init.part.0+0xcc>
    b4e6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b5a8 <global_stdio_init.part.0+0xd0>
    b4ea:	4f2a      	ldr	r7, [pc, #168]	; (b594 <global_stdio_init.part.0+0xbc>)
    b4ec:	6018      	str	r0, [r3, #0]
    b4ee:	2500      	movs	r5, #0
    b4f0:	2304      	movs	r3, #4
    b4f2:	2208      	movs	r2, #8
    b4f4:	4629      	mov	r1, r5
    b4f6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b4fa:	4e27      	ldr	r6, [pc, #156]	; (b598 <global_stdio_init.part.0+0xc0>)
    b4fc:	6665      	str	r5, [r4, #100]	; 0x64
    b4fe:	e9c4 5302 	strd	r5, r3, [r4, #8]
    b502:	e9c4 5500 	strd	r5, r5, [r4]
    b506:	e9c4 5504 	strd	r5, r5, [r4, #16]
    b50a:	61a5      	str	r5, [r4, #24]
    b50c:	f000 fa42 	bl	b994 <memset>
    b510:	4b22      	ldr	r3, [pc, #136]	; (b59c <global_stdio_init.part.0+0xc4>)
    b512:	6763      	str	r3, [r4, #116]	; 0x74
    b514:	2208      	movs	r2, #8
    b516:	4629      	mov	r1, r5
    b518:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b51c:	e9c4 4907 	strd	r4, r9, [r4, #28]
    b520:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    b524:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    b528:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    b52c:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    b530:	6725      	str	r5, [r4, #112]	; 0x70
    b532:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    b536:	62e6      	str	r6, [r4, #44]	; 0x2c
    b538:	f000 fa2c 	bl	b994 <memset>
    b53c:	4b18      	ldr	r3, [pc, #96]	; (b5a0 <global_stdio_init.part.0+0xc8>)
    b53e:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    b542:	4629      	mov	r1, r5
    b544:	f104 0368 	add.w	r3, r4, #104	; 0x68
    b548:	2208      	movs	r2, #8
    b54a:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b54e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    b552:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    b556:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    b55a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    b55e:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    b562:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    b566:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    b56a:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b56e:	f000 fa11 	bl	b994 <memset>
    b572:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    b576:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    b57a:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    b57e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    b582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b586:	bf00      	nop
    b588:	2001e2e0 	.word	0x2001e2e0
    b58c:	2001e418 	.word	0x2001e418
    b590:	0000b481 	.word	0x0000b481
    b594:	0000b749 	.word	0x0000b749
    b598:	0000b769 	.word	0x0000b769
    b59c:	00010009 	.word	0x00010009
    b5a0:	00020012 	.word	0x00020012
    b5a4:	0000b6e1 	.word	0x0000b6e1
    b5a8:	0000b709 	.word	0x0000b709

0000b5ac <__sinit>:
    b5ac:	b510      	push	{r4, lr}
    b5ae:	4604      	mov	r4, r0
    b5b0:	480a      	ldr	r0, [pc, #40]	; (b5dc <__sinit+0x30>)
    b5b2:	f000 fb53 	bl	bc5c <__retarget_lock_acquire_recursive>
    b5b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b5b8:	b923      	cbnz	r3, b5c4 <__sinit+0x18>
    b5ba:	4b09      	ldr	r3, [pc, #36]	; (b5e0 <__sinit+0x34>)
    b5bc:	4a09      	ldr	r2, [pc, #36]	; (b5e4 <__sinit+0x38>)
    b5be:	681b      	ldr	r3, [r3, #0]
    b5c0:	6362      	str	r2, [r4, #52]	; 0x34
    b5c2:	b123      	cbz	r3, b5ce <__sinit+0x22>
    b5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b5c8:	4804      	ldr	r0, [pc, #16]	; (b5dc <__sinit+0x30>)
    b5ca:	f000 bb49 	b.w	bc60 <__retarget_lock_release_recursive>
    b5ce:	f7ff ff83 	bl	b4d8 <global_stdio_init.part.0>
    b5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b5d6:	4801      	ldr	r0, [pc, #4]	; (b5dc <__sinit+0x30>)
    b5d8:	f000 bb42 	b.w	bc60 <__retarget_lock_release_recursive>
    b5dc:	2001e2a8 	.word	0x2001e2a8
    b5e0:	2001e418 	.word	0x2001e418
    b5e4:	0000b499 	.word	0x0000b499

0000b5e8 <__sfp_lock_acquire>:
    b5e8:	4801      	ldr	r0, [pc, #4]	; (b5f0 <__sfp_lock_acquire+0x8>)
    b5ea:	f000 bb37 	b.w	bc5c <__retarget_lock_acquire_recursive>
    b5ee:	bf00      	nop
    b5f0:	2001e2a8 	.word	0x2001e2a8

0000b5f4 <__sfp_lock_release>:
    b5f4:	4801      	ldr	r0, [pc, #4]	; (b5fc <__sfp_lock_release+0x8>)
    b5f6:	f000 bb33 	b.w	bc60 <__retarget_lock_release_recursive>
    b5fa:	bf00      	nop
    b5fc:	2001e2a8 	.word	0x2001e2a8

0000b600 <_fwalk_sglue>:
    b600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b604:	4680      	mov	r8, r0
    b606:	460f      	mov	r7, r1
    b608:	4616      	mov	r6, r2
    b60a:	f04f 0900 	mov.w	r9, #0
    b60e:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    b612:	3d01      	subs	r5, #1
    b614:	d411      	bmi.n	b63a <_fwalk_sglue+0x3a>
    b616:	89a3      	ldrh	r3, [r4, #12]
    b618:	2b01      	cmp	r3, #1
    b61a:	f105 35ff 	add.w	r5, r5, #4294967295
    b61e:	d908      	bls.n	b632 <_fwalk_sglue+0x32>
    b620:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    b624:	3301      	adds	r3, #1
    b626:	4621      	mov	r1, r4
    b628:	d003      	beq.n	b632 <_fwalk_sglue+0x32>
    b62a:	4640      	mov	r0, r8
    b62c:	47b8      	blx	r7
    b62e:	ea49 0900 	orr.w	r9, r9, r0
    b632:	1c6b      	adds	r3, r5, #1
    b634:	f104 0468 	add.w	r4, r4, #104	; 0x68
    b638:	d1ed      	bne.n	b616 <_fwalk_sglue+0x16>
    b63a:	6836      	ldr	r6, [r6, #0]
    b63c:	2e00      	cmp	r6, #0
    b63e:	d1e6      	bne.n	b60e <_fwalk_sglue+0xe>
    b640:	4648      	mov	r0, r9
    b642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b646:	bf00      	nop

0000b648 <sprintf>:
    b648:	b40e      	push	{r1, r2, r3}
    b64a:	b510      	push	{r4, lr}
    b64c:	b09d      	sub	sp, #116	; 0x74
    b64e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b652:	ab1f      	add	r3, sp, #124	; 0x7c
    b654:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b658:	9104      	str	r1, [sp, #16]
    b65a:	4909      	ldr	r1, [pc, #36]	; (b680 <sprintf+0x38>)
    b65c:	f853 2b04 	ldr.w	r2, [r3], #4
    b660:	9002      	str	r0, [sp, #8]
    b662:	4c08      	ldr	r4, [pc, #32]	; (b684 <sprintf+0x3c>)
    b664:	6808      	ldr	r0, [r1, #0]
    b666:	9301      	str	r3, [sp, #4]
    b668:	a902      	add	r1, sp, #8
    b66a:	9405      	str	r4, [sp, #20]
    b66c:	f002 f8b0 	bl	d7d0 <_svfprintf_r>
    b670:	9b02      	ldr	r3, [sp, #8]
    b672:	2200      	movs	r2, #0
    b674:	701a      	strb	r2, [r3, #0]
    b676:	b01d      	add	sp, #116	; 0x74
    b678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b67c:	b003      	add	sp, #12
    b67e:	4770      	bx	lr
    b680:	20008b7c 	.word	0x20008b7c
    b684:	ffff0208 	.word	0xffff0208

0000b688 <sscanf>:
    b688:	b40e      	push	{r1, r2, r3}
    b68a:	b510      	push	{r4, lr}
    b68c:	b09f      	sub	sp, #124	; 0x7c
    b68e:	ac21      	add	r4, sp, #132	; 0x84
    b690:	f44f 7101 	mov.w	r1, #516	; 0x204
    b694:	f854 2b04 	ldr.w	r2, [r4], #4
    b698:	9201      	str	r2, [sp, #4]
    b69a:	f8ad 101c 	strh.w	r1, [sp, #28]
    b69e:	9004      	str	r0, [sp, #16]
    b6a0:	9008      	str	r0, [sp, #32]
    b6a2:	f000 fd0d 	bl	c0c0 <strlen>
    b6a6:	9005      	str	r0, [sp, #20]
    b6a8:	9009      	str	r0, [sp, #36]	; 0x24
    b6aa:	480b      	ldr	r0, [pc, #44]	; (b6d8 <sscanf+0x50>)
    b6ac:	490b      	ldr	r1, [pc, #44]	; (b6dc <sscanf+0x54>)
    b6ae:	910c      	str	r1, [sp, #48]	; 0x30
    b6b0:	2300      	movs	r3, #0
    b6b2:	f64f 7cff 	movw	ip, #65535	; 0xffff
    b6b6:	9310      	str	r3, [sp, #64]	; 0x40
    b6b8:	9315      	str	r3, [sp, #84]	; 0x54
    b6ba:	9a01      	ldr	r2, [sp, #4]
    b6bc:	6800      	ldr	r0, [r0, #0]
    b6be:	f8ad c01e 	strh.w	ip, [sp, #30]
    b6c2:	4623      	mov	r3, r4
    b6c4:	a904      	add	r1, sp, #16
    b6c6:	9403      	str	r4, [sp, #12]
    b6c8:	f003 fe24 	bl	f314 <__ssvfscanf_r>
    b6cc:	b01f      	add	sp, #124	; 0x7c
    b6ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6d2:	b003      	add	sp, #12
    b6d4:	4770      	bx	lr
    b6d6:	bf00      	nop
    b6d8:	20008b7c 	.word	0x20008b7c
    b6dc:	0000b705 	.word	0x0000b705

0000b6e0 <__sread>:
    b6e0:	b510      	push	{r4, lr}
    b6e2:	460c      	mov	r4, r1
    b6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b6e8:	f000 fa4c 	bl	bb84 <_read_r>
    b6ec:	2800      	cmp	r0, #0
    b6ee:	db03      	blt.n	b6f8 <__sread+0x18>
    b6f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b6f2:	4403      	add	r3, r0
    b6f4:	6523      	str	r3, [r4, #80]	; 0x50
    b6f6:	bd10      	pop	{r4, pc}
    b6f8:	89a3      	ldrh	r3, [r4, #12]
    b6fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b6fe:	81a3      	strh	r3, [r4, #12]
    b700:	bd10      	pop	{r4, pc}
    b702:	bf00      	nop

0000b704 <__seofread>:
    b704:	2000      	movs	r0, #0
    b706:	4770      	bx	lr

0000b708 <__swrite>:
    b708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b70c:	460c      	mov	r4, r1
    b70e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    b712:	461f      	mov	r7, r3
    b714:	05cb      	lsls	r3, r1, #23
    b716:	4605      	mov	r5, r0
    b718:	4616      	mov	r6, r2
    b71a:	d40b      	bmi.n	b734 <__swrite+0x2c>
    b71c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    b720:	81a1      	strh	r1, [r4, #12]
    b722:	463b      	mov	r3, r7
    b724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b728:	4632      	mov	r2, r6
    b72a:	4628      	mov	r0, r5
    b72c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b730:	f000 ba50 	b.w	bbd4 <_write_r>
    b734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b738:	2302      	movs	r3, #2
    b73a:	2200      	movs	r2, #0
    b73c:	f000 fa0c 	bl	bb58 <_lseek_r>
    b740:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    b744:	e7ea      	b.n	b71c <__swrite+0x14>
    b746:	bf00      	nop

0000b748 <__sseek>:
    b748:	b510      	push	{r4, lr}
    b74a:	460c      	mov	r4, r1
    b74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b750:	f000 fa02 	bl	bb58 <_lseek_r>
    b754:	89a3      	ldrh	r3, [r4, #12]
    b756:	1c42      	adds	r2, r0, #1
    b758:	bf0e      	itee	eq
    b75a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b75e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b762:	6520      	strne	r0, [r4, #80]	; 0x50
    b764:	81a3      	strh	r3, [r4, #12]
    b766:	bd10      	pop	{r4, pc}

0000b768 <__sclose>:
    b768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b76c:	f000 b9e2 	b.w	bb34 <_close_r>

0000b770 <_vdprintf_r>:
    b770:	b5f0      	push	{r4, r5, r6, r7, lr}
    b772:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    b776:	af04      	add	r7, sp, #16
    b778:	9300      	str	r3, [sp, #0]
    b77a:	4613      	mov	r3, r2
    b77c:	f44f 7200 	mov.w	r2, #512	; 0x200
    b780:	460e      	mov	r6, r1
    b782:	9203      	str	r2, [sp, #12]
    b784:	4639      	mov	r1, r7
    b786:	aa03      	add	r2, sp, #12
    b788:	4605      	mov	r5, r0
    b78a:	f000 f825 	bl	b7d8 <_vasnprintf_r>
    b78e:	b188      	cbz	r0, b7b4 <_vdprintf_r+0x44>
    b790:	4604      	mov	r4, r0
    b792:	4602      	mov	r2, r0
    b794:	9b03      	ldr	r3, [sp, #12]
    b796:	4631      	mov	r1, r6
    b798:	4628      	mov	r0, r5
    b79a:	f000 fa1b 	bl	bbd4 <_write_r>
    b79e:	42bc      	cmp	r4, r7
    b7a0:	9003      	str	r0, [sp, #12]
    b7a2:	d004      	beq.n	b7ae <_vdprintf_r+0x3e>
    b7a4:	4628      	mov	r0, r5
    b7a6:	4621      	mov	r1, r4
    b7a8:	f000 fd9c 	bl	c2e4 <_free_r>
    b7ac:	9803      	ldr	r0, [sp, #12]
    b7ae:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    b7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7b4:	f04f 30ff 	mov.w	r0, #4294967295
    b7b8:	e7f9      	b.n	b7ae <_vdprintf_r+0x3e>
    b7ba:	bf00      	nop

0000b7bc <vdprintf>:
    b7bc:	b410      	push	{r4}
    b7be:	4c05      	ldr	r4, [pc, #20]	; (b7d4 <vdprintf+0x18>)
    b7c0:	4684      	mov	ip, r0
    b7c2:	4613      	mov	r3, r2
    b7c4:	6820      	ldr	r0, [r4, #0]
    b7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    b7ca:	460a      	mov	r2, r1
    b7cc:	4661      	mov	r1, ip
    b7ce:	f7ff bfcf 	b.w	b770 <_vdprintf_r>
    b7d2:	bf00      	nop
    b7d4:	20008b7c 	.word	0x20008b7c

0000b7d8 <_vasnprintf_r>:
    b7d8:	b530      	push	{r4, r5, lr}
    b7da:	6814      	ldr	r4, [r2, #0]
    b7dc:	4615      	mov	r5, r2
    b7de:	b09b      	sub	sp, #108	; 0x6c
    b7e0:	461a      	mov	r2, r3
    b7e2:	b109      	cbz	r1, b7e8 <_vasnprintf_r+0x10>
    b7e4:	2c00      	cmp	r4, #0
    b7e6:	d119      	bne.n	b81c <_vasnprintf_r+0x44>
    b7e8:	2100      	movs	r1, #0
    b7ea:	f44f 7322 	mov.w	r3, #648	; 0x288
    b7ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    b7f2:	9100      	str	r1, [sp, #0]
    b7f4:	9104      	str	r1, [sp, #16]
    b7f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b7fa:	9102      	str	r1, [sp, #8]
    b7fc:	9105      	str	r1, [sp, #20]
    b7fe:	f8ad 300e 	strh.w	r3, [sp, #14]
    b802:	4669      	mov	r1, sp
    b804:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    b806:	f001 ffe3 	bl	d7d0 <_svfprintf_r>
    b80a:	2800      	cmp	r0, #0
    b80c:	db13      	blt.n	b836 <_vasnprintf_r+0x5e>
    b80e:	9b00      	ldr	r3, [sp, #0]
    b810:	6028      	str	r0, [r5, #0]
    b812:	2200      	movs	r2, #0
    b814:	701a      	strb	r2, [r3, #0]
    b816:	9804      	ldr	r0, [sp, #16]
    b818:	b01b      	add	sp, #108	; 0x6c
    b81a:	bd30      	pop	{r4, r5, pc}
    b81c:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    b820:	9100      	str	r1, [sp, #0]
    b822:	9104      	str	r1, [sp, #16]
    b824:	f8ad 300c 	strh.w	r3, [sp, #12]
    b828:	4621      	mov	r1, r4
    b82a:	dae4      	bge.n	b7f6 <_vasnprintf_r+0x1e>
    b82c:	238b      	movs	r3, #139	; 0x8b
    b82e:	6003      	str	r3, [r0, #0]
    b830:	2000      	movs	r0, #0
    b832:	b01b      	add	sp, #108	; 0x6c
    b834:	bd30      	pop	{r4, r5, pc}
    b836:	2000      	movs	r0, #0
    b838:	e7ee      	b.n	b818 <_vasnprintf_r+0x40>
    b83a:	bf00      	nop

0000b83c <memcmp>:
    b83c:	2a03      	cmp	r2, #3
    b83e:	b570      	push	{r4, r5, r6, lr}
    b840:	d914      	bls.n	b86c <memcmp+0x30>
    b842:	ea40 0301 	orr.w	r3, r0, r1
    b846:	079b      	lsls	r3, r3, #30
    b848:	d122      	bne.n	b890 <memcmp+0x54>
    b84a:	4604      	mov	r4, r0
    b84c:	460b      	mov	r3, r1
    b84e:	4619      	mov	r1, r3
    b850:	4620      	mov	r0, r4
    b852:	680e      	ldr	r6, [r1, #0]
    b854:	6805      	ldr	r5, [r0, #0]
    b856:	42b5      	cmp	r5, r6
    b858:	f104 0404 	add.w	r4, r4, #4
    b85c:	f103 0304 	add.w	r3, r3, #4
    b860:	d116      	bne.n	b890 <memcmp+0x54>
    b862:	3a04      	subs	r2, #4
    b864:	2a03      	cmp	r2, #3
    b866:	4620      	mov	r0, r4
    b868:	4619      	mov	r1, r3
    b86a:	d8f0      	bhi.n	b84e <memcmp+0x12>
    b86c:	1e54      	subs	r4, r2, #1
    b86e:	b19a      	cbz	r2, b898 <memcmp+0x5c>
    b870:	1e42      	subs	r2, r0, #1
    b872:	3901      	subs	r1, #1
    b874:	e001      	b.n	b87a <memcmp+0x3e>
    b876:	18c3      	adds	r3, r0, r3
    b878:	d00c      	beq.n	b894 <memcmp+0x58>
    b87a:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    b87e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    b882:	45e6      	cmp	lr, ip
    b884:	eba4 0302 	sub.w	r3, r4, r2
    b888:	d0f5      	beq.n	b876 <memcmp+0x3a>
    b88a:	ebae 000c 	sub.w	r0, lr, ip
    b88e:	bd70      	pop	{r4, r5, r6, pc}
    b890:	1e54      	subs	r4, r2, #1
    b892:	e7ed      	b.n	b870 <memcmp+0x34>
    b894:	4618      	mov	r0, r3
    b896:	bd70      	pop	{r4, r5, r6, pc}
    b898:	4610      	mov	r0, r2
    b89a:	bd70      	pop	{r4, r5, r6, pc}

0000b89c <memmove>:
    b89c:	4288      	cmp	r0, r1
    b89e:	d90d      	bls.n	b8bc <memmove+0x20>
    b8a0:	188b      	adds	r3, r1, r2
    b8a2:	4283      	cmp	r3, r0
    b8a4:	d90a      	bls.n	b8bc <memmove+0x20>
    b8a6:	eb00 0c02 	add.w	ip, r0, r2
    b8aa:	b1ba      	cbz	r2, b8dc <memmove+0x40>
    b8ac:	4662      	mov	r2, ip
    b8ae:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    b8b2:	f802 cd01 	strb.w	ip, [r2, #-1]!
    b8b6:	4299      	cmp	r1, r3
    b8b8:	d1f9      	bne.n	b8ae <memmove+0x12>
    b8ba:	4770      	bx	lr
    b8bc:	2a0f      	cmp	r2, #15
    b8be:	d80e      	bhi.n	b8de <memmove+0x42>
    b8c0:	4603      	mov	r3, r0
    b8c2:	f102 3cff 	add.w	ip, r2, #4294967295
    b8c6:	b14a      	cbz	r2, b8dc <memmove+0x40>
    b8c8:	f10c 0c01 	add.w	ip, ip, #1
    b8cc:	3b01      	subs	r3, #1
    b8ce:	448c      	add	ip, r1
    b8d0:	f811 2b01 	ldrb.w	r2, [r1], #1
    b8d4:	f803 2f01 	strb.w	r2, [r3, #1]!
    b8d8:	4561      	cmp	r1, ip
    b8da:	d1f9      	bne.n	b8d0 <memmove+0x34>
    b8dc:	4770      	bx	lr
    b8de:	ea40 0301 	orr.w	r3, r0, r1
    b8e2:	079b      	lsls	r3, r3, #30
    b8e4:	d150      	bne.n	b988 <memmove+0xec>
    b8e6:	f1a2 0310 	sub.w	r3, r2, #16
    b8ea:	b570      	push	{r4, r5, r6, lr}
    b8ec:	f101 0c20 	add.w	ip, r1, #32
    b8f0:	f023 050f 	bic.w	r5, r3, #15
    b8f4:	f101 0e10 	add.w	lr, r1, #16
    b8f8:	f100 0410 	add.w	r4, r0, #16
    b8fc:	44ac      	add	ip, r5
    b8fe:	091b      	lsrs	r3, r3, #4
    b900:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    b904:	f844 5c10 	str.w	r5, [r4, #-16]
    b908:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    b90c:	f844 5c0c 	str.w	r5, [r4, #-12]
    b910:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    b914:	f844 5c08 	str.w	r5, [r4, #-8]
    b918:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    b91c:	f844 5c04 	str.w	r5, [r4, #-4]
    b920:	f10e 0e10 	add.w	lr, lr, #16
    b924:	45e6      	cmp	lr, ip
    b926:	f104 0410 	add.w	r4, r4, #16
    b92a:	d1e9      	bne.n	b900 <memmove+0x64>
    b92c:	3301      	adds	r3, #1
    b92e:	f012 0f0c 	tst.w	r2, #12
    b932:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    b936:	f002 040f 	and.w	r4, r2, #15
    b93a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    b93e:	d027      	beq.n	b990 <memmove+0xf4>
    b940:	3c04      	subs	r4, #4
    b942:	f024 0603 	bic.w	r6, r4, #3
    b946:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    b94a:	441e      	add	r6, r3
    b94c:	1f1c      	subs	r4, r3, #4
    b94e:	468e      	mov	lr, r1
    b950:	f85e 5b04 	ldr.w	r5, [lr], #4
    b954:	f844 5f04 	str.w	r5, [r4, #4]!
    b958:	42b4      	cmp	r4, r6
    b95a:	d1f9      	bne.n	b950 <memmove+0xb4>
    b95c:	f10c 0401 	add.w	r4, ip, #1
    b960:	f002 0203 	and.w	r2, r2, #3
    b964:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    b968:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    b96c:	f102 3cff 	add.w	ip, r2, #4294967295
    b970:	b14a      	cbz	r2, b986 <memmove+0xea>
    b972:	f10c 0c01 	add.w	ip, ip, #1
    b976:	3b01      	subs	r3, #1
    b978:	448c      	add	ip, r1
    b97a:	f811 2b01 	ldrb.w	r2, [r1], #1
    b97e:	f803 2f01 	strb.w	r2, [r3, #1]!
    b982:	4561      	cmp	r1, ip
    b984:	d1f9      	bne.n	b97a <memmove+0xde>
    b986:	bd70      	pop	{r4, r5, r6, pc}
    b988:	f102 3cff 	add.w	ip, r2, #4294967295
    b98c:	4603      	mov	r3, r0
    b98e:	e79b      	b.n	b8c8 <memmove+0x2c>
    b990:	4622      	mov	r2, r4
    b992:	e7eb      	b.n	b96c <memmove+0xd0>

0000b994 <memset>:
    b994:	0783      	lsls	r3, r0, #30
    b996:	b530      	push	{r4, r5, lr}
    b998:	d048      	beq.n	ba2c <memset+0x98>
    b99a:	1e54      	subs	r4, r2, #1
    b99c:	2a00      	cmp	r2, #0
    b99e:	d03f      	beq.n	ba20 <memset+0x8c>
    b9a0:	b2ca      	uxtb	r2, r1
    b9a2:	4603      	mov	r3, r0
    b9a4:	e001      	b.n	b9aa <memset+0x16>
    b9a6:	3c01      	subs	r4, #1
    b9a8:	d33a      	bcc.n	ba20 <memset+0x8c>
    b9aa:	f803 2b01 	strb.w	r2, [r3], #1
    b9ae:	079d      	lsls	r5, r3, #30
    b9b0:	d1f9      	bne.n	b9a6 <memset+0x12>
    b9b2:	2c03      	cmp	r4, #3
    b9b4:	d92d      	bls.n	ba12 <memset+0x7e>
    b9b6:	b2cd      	uxtb	r5, r1
    b9b8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    b9bc:	2c0f      	cmp	r4, #15
    b9be:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    b9c2:	d936      	bls.n	ba32 <memset+0x9e>
    b9c4:	f1a4 0210 	sub.w	r2, r4, #16
    b9c8:	f022 0c0f 	bic.w	ip, r2, #15
    b9cc:	f103 0e20 	add.w	lr, r3, #32
    b9d0:	44e6      	add	lr, ip
    b9d2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    b9d6:	f103 0210 	add.w	r2, r3, #16
    b9da:	e942 5504 	strd	r5, r5, [r2, #-16]
    b9de:	e942 5502 	strd	r5, r5, [r2, #-8]
    b9e2:	3210      	adds	r2, #16
    b9e4:	4572      	cmp	r2, lr
    b9e6:	d1f8      	bne.n	b9da <memset+0x46>
    b9e8:	f10c 0201 	add.w	r2, ip, #1
    b9ec:	f014 0f0c 	tst.w	r4, #12
    b9f0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    b9f4:	f004 0c0f 	and.w	ip, r4, #15
    b9f8:	d013      	beq.n	ba22 <memset+0x8e>
    b9fa:	f1ac 0304 	sub.w	r3, ip, #4
    b9fe:	f023 0303 	bic.w	r3, r3, #3
    ba02:	3304      	adds	r3, #4
    ba04:	4413      	add	r3, r2
    ba06:	f842 5b04 	str.w	r5, [r2], #4
    ba0a:	4293      	cmp	r3, r2
    ba0c:	d1fb      	bne.n	ba06 <memset+0x72>
    ba0e:	f00c 0403 	and.w	r4, ip, #3
    ba12:	b12c      	cbz	r4, ba20 <memset+0x8c>
    ba14:	b2c9      	uxtb	r1, r1
    ba16:	441c      	add	r4, r3
    ba18:	f803 1b01 	strb.w	r1, [r3], #1
    ba1c:	429c      	cmp	r4, r3
    ba1e:	d1fb      	bne.n	ba18 <memset+0x84>
    ba20:	bd30      	pop	{r4, r5, pc}
    ba22:	4664      	mov	r4, ip
    ba24:	4613      	mov	r3, r2
    ba26:	2c00      	cmp	r4, #0
    ba28:	d1f4      	bne.n	ba14 <memset+0x80>
    ba2a:	e7f9      	b.n	ba20 <memset+0x8c>
    ba2c:	4603      	mov	r3, r0
    ba2e:	4614      	mov	r4, r2
    ba30:	e7bf      	b.n	b9b2 <memset+0x1e>
    ba32:	461a      	mov	r2, r3
    ba34:	46a4      	mov	ip, r4
    ba36:	e7e0      	b.n	b9fa <memset+0x66>

0000ba38 <strncmp>:
    ba38:	2a00      	cmp	r2, #0
    ba3a:	d03e      	beq.n	baba <strncmp+0x82>
    ba3c:	ea40 0301 	orr.w	r3, r0, r1
    ba40:	079b      	lsls	r3, r3, #30
    ba42:	b530      	push	{r4, r5, lr}
    ba44:	4684      	mov	ip, r0
    ba46:	d12f      	bne.n	baa8 <strncmp+0x70>
    ba48:	2a03      	cmp	r2, #3
    ba4a:	d92d      	bls.n	baa8 <strncmp+0x70>
    ba4c:	460b      	mov	r3, r1
    ba4e:	e008      	b.n	ba62 <strncmp+0x2a>
    ba50:	3a04      	subs	r2, #4
    ba52:	4684      	mov	ip, r0
    ba54:	4619      	mov	r1, r3
    ba56:	d025      	beq.n	baa4 <strncmp+0x6c>
    ba58:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    ba5c:	d122      	bne.n	baa4 <strncmp+0x6c>
    ba5e:	2a03      	cmp	r2, #3
    ba60:	d922      	bls.n	baa8 <strncmp+0x70>
    ba62:	6804      	ldr	r4, [r0, #0]
    ba64:	4619      	mov	r1, r3
    ba66:	f853 5b04 	ldr.w	r5, [r3], #4
    ba6a:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    ba6e:	42ac      	cmp	r4, r5
    ba70:	4684      	mov	ip, r0
    ba72:	ea2e 0e04 	bic.w	lr, lr, r4
    ba76:	f100 0004 	add.w	r0, r0, #4
    ba7a:	d0e9      	beq.n	ba50 <strncmp+0x18>
    ba7c:	f89c 0000 	ldrb.w	r0, [ip]
    ba80:	780c      	ldrb	r4, [r1, #0]
    ba82:	42a0      	cmp	r0, r4
    ba84:	d11b      	bne.n	babe <strncmp+0x86>
    ba86:	46e6      	mov	lr, ip
    ba88:	b168      	cbz	r0, baa6 <strncmp+0x6e>
    ba8a:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    ba8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    ba92:	eba2 030e 	sub.w	r3, r2, lr
    ba96:	42a0      	cmp	r0, r4
    ba98:	f103 33ff 	add.w	r3, r3, #4294967295
    ba9c:	d10f      	bne.n	babe <strncmp+0x86>
    ba9e:	eb1c 0303 	adds.w	r3, ip, r3
    baa2:	d1f1      	bne.n	ba88 <strncmp+0x50>
    baa4:	2000      	movs	r0, #0
    baa6:	bd30      	pop	{r4, r5, pc}
    baa8:	f89c 0000 	ldrb.w	r0, [ip]
    baac:	780c      	ldrb	r4, [r1, #0]
    baae:	4284      	cmp	r4, r0
    bab0:	d105      	bne.n	babe <strncmp+0x86>
    bab2:	2a01      	cmp	r2, #1
    bab4:	d0f6      	beq.n	baa4 <strncmp+0x6c>
    bab6:	46e6      	mov	lr, ip
    bab8:	e7e6      	b.n	ba88 <strncmp+0x50>
    baba:	4610      	mov	r0, r2
    babc:	4770      	bx	lr
    babe:	1b00      	subs	r0, r0, r4
    bac0:	bd30      	pop	{r4, r5, pc}
    bac2:	bf00      	nop

0000bac4 <strncpy>:
    bac4:	ea40 0301 	orr.w	r3, r0, r1
    bac8:	079b      	lsls	r3, r3, #30
    baca:	b530      	push	{r4, r5, lr}
    bacc:	d101      	bne.n	bad2 <strncpy+0xe>
    bace:	2a03      	cmp	r2, #3
    bad0:	d80f      	bhi.n	baf2 <strncpy+0x2e>
    bad2:	4684      	mov	ip, r0
    bad4:	f101 3eff 	add.w	lr, r1, #4294967295
    bad8:	e007      	b.n	baea <strncpy+0x26>
    bada:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    bade:	f803 1b01 	strb.w	r1, [r3], #1
    bae2:	1e54      	subs	r4, r2, #1
    bae4:	b1c1      	cbz	r1, bb18 <strncpy+0x54>
    bae6:	469c      	mov	ip, r3
    bae8:	4622      	mov	r2, r4
    baea:	4663      	mov	r3, ip
    baec:	2a00      	cmp	r2, #0
    baee:	d1f4      	bne.n	bada <strncpy+0x16>
    baf0:	bd30      	pop	{r4, r5, pc}
    baf2:	460b      	mov	r3, r1
    baf4:	4684      	mov	ip, r0
    baf6:	4619      	mov	r1, r3
    baf8:	f853 5b04 	ldr.w	r5, [r3], #4
    bafc:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    bb00:	ea24 0405 	bic.w	r4, r4, r5
    bb04:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    bb08:	d1e4      	bne.n	bad4 <strncpy+0x10>
    bb0a:	3a04      	subs	r2, #4
    bb0c:	2a03      	cmp	r2, #3
    bb0e:	f84c 5b04 	str.w	r5, [ip], #4
    bb12:	4619      	mov	r1, r3
    bb14:	d8ef      	bhi.n	baf6 <strncpy+0x32>
    bb16:	e7dd      	b.n	bad4 <strncpy+0x10>
    bb18:	4494      	add	ip, r2
    bb1a:	2c00      	cmp	r4, #0
    bb1c:	d0e8      	beq.n	baf0 <strncpy+0x2c>
    bb1e:	f803 1b01 	strb.w	r1, [r3], #1
    bb22:	4563      	cmp	r3, ip
    bb24:	d1fb      	bne.n	bb1e <strncpy+0x5a>
    bb26:	bd30      	pop	{r4, r5, pc}

0000bb28 <__locale_mb_cur_max>:
    bb28:	4b01      	ldr	r3, [pc, #4]	; (bb30 <__locale_mb_cur_max+0x8>)
    bb2a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    bb2e:	4770      	bx	lr
    bb30:	200085f4 	.word	0x200085f4

0000bb34 <_close_r>:
    bb34:	b538      	push	{r3, r4, r5, lr}
    bb36:	4d07      	ldr	r5, [pc, #28]	; (bb54 <_close_r+0x20>)
    bb38:	2200      	movs	r2, #0
    bb3a:	4604      	mov	r4, r0
    bb3c:	4608      	mov	r0, r1
    bb3e:	602a      	str	r2, [r5, #0]
    bb40:	f7fc fc3c 	bl	83bc <_close>
    bb44:	1c43      	adds	r3, r0, #1
    bb46:	d000      	beq.n	bb4a <_close_r+0x16>
    bb48:	bd38      	pop	{r3, r4, r5, pc}
    bb4a:	682b      	ldr	r3, [r5, #0]
    bb4c:	2b00      	cmp	r3, #0
    bb4e:	d0fb      	beq.n	bb48 <_close_r+0x14>
    bb50:	6023      	str	r3, [r4, #0]
    bb52:	bd38      	pop	{r3, r4, r5, pc}
    bb54:	2001e634 	.word	0x2001e634

0000bb58 <_lseek_r>:
    bb58:	b538      	push	{r3, r4, r5, lr}
    bb5a:	460c      	mov	r4, r1
    bb5c:	4d08      	ldr	r5, [pc, #32]	; (bb80 <_lseek_r+0x28>)
    bb5e:	4684      	mov	ip, r0
    bb60:	4611      	mov	r1, r2
    bb62:	4620      	mov	r0, r4
    bb64:	461a      	mov	r2, r3
    bb66:	2300      	movs	r3, #0
    bb68:	602b      	str	r3, [r5, #0]
    bb6a:	4664      	mov	r4, ip
    bb6c:	f7fc fc32 	bl	83d4 <_lseek>
    bb70:	1c43      	adds	r3, r0, #1
    bb72:	d000      	beq.n	bb76 <_lseek_r+0x1e>
    bb74:	bd38      	pop	{r3, r4, r5, pc}
    bb76:	682b      	ldr	r3, [r5, #0]
    bb78:	2b00      	cmp	r3, #0
    bb7a:	d0fb      	beq.n	bb74 <_lseek_r+0x1c>
    bb7c:	6023      	str	r3, [r4, #0]
    bb7e:	bd38      	pop	{r3, r4, r5, pc}
    bb80:	2001e634 	.word	0x2001e634

0000bb84 <_read_r>:
    bb84:	b538      	push	{r3, r4, r5, lr}
    bb86:	460c      	mov	r4, r1
    bb88:	4d08      	ldr	r5, [pc, #32]	; (bbac <_read_r+0x28>)
    bb8a:	4684      	mov	ip, r0
    bb8c:	4611      	mov	r1, r2
    bb8e:	4620      	mov	r0, r4
    bb90:	461a      	mov	r2, r3
    bb92:	2300      	movs	r3, #0
    bb94:	602b      	str	r3, [r5, #0]
    bb96:	4664      	mov	r4, ip
    bb98:	f7fc fc0e 	bl	83b8 <_read>
    bb9c:	1c43      	adds	r3, r0, #1
    bb9e:	d000      	beq.n	bba2 <_read_r+0x1e>
    bba0:	bd38      	pop	{r3, r4, r5, pc}
    bba2:	682b      	ldr	r3, [r5, #0]
    bba4:	2b00      	cmp	r3, #0
    bba6:	d0fb      	beq.n	bba0 <_read_r+0x1c>
    bba8:	6023      	str	r3, [r4, #0]
    bbaa:	bd38      	pop	{r3, r4, r5, pc}
    bbac:	2001e634 	.word	0x2001e634

0000bbb0 <_sbrk_r>:
    bbb0:	b538      	push	{r3, r4, r5, lr}
    bbb2:	4d07      	ldr	r5, [pc, #28]	; (bbd0 <_sbrk_r+0x20>)
    bbb4:	2200      	movs	r2, #0
    bbb6:	4604      	mov	r4, r0
    bbb8:	4608      	mov	r0, r1
    bbba:	602a      	str	r2, [r5, #0]
    bbbc:	f7fc fbe2 	bl	8384 <_sbrk>
    bbc0:	1c43      	adds	r3, r0, #1
    bbc2:	d000      	beq.n	bbc6 <_sbrk_r+0x16>
    bbc4:	bd38      	pop	{r3, r4, r5, pc}
    bbc6:	682b      	ldr	r3, [r5, #0]
    bbc8:	2b00      	cmp	r3, #0
    bbca:	d0fb      	beq.n	bbc4 <_sbrk_r+0x14>
    bbcc:	6023      	str	r3, [r4, #0]
    bbce:	bd38      	pop	{r3, r4, r5, pc}
    bbd0:	2001e634 	.word	0x2001e634

0000bbd4 <_write_r>:
    bbd4:	b538      	push	{r3, r4, r5, lr}
    bbd6:	460c      	mov	r4, r1
    bbd8:	4d08      	ldr	r5, [pc, #32]	; (bbfc <_write_r+0x28>)
    bbda:	4684      	mov	ip, r0
    bbdc:	4611      	mov	r1, r2
    bbde:	4620      	mov	r0, r4
    bbe0:	461a      	mov	r2, r3
    bbe2:	2300      	movs	r3, #0
    bbe4:	602b      	str	r3, [r5, #0]
    bbe6:	4664      	mov	r4, ip
    bbe8:	f7fb fe7c 	bl	78e4 <_write>
    bbec:	1c43      	adds	r3, r0, #1
    bbee:	d000      	beq.n	bbf2 <_write_r+0x1e>
    bbf0:	bd38      	pop	{r3, r4, r5, pc}
    bbf2:	682b      	ldr	r3, [r5, #0]
    bbf4:	2b00      	cmp	r3, #0
    bbf6:	d0fb      	beq.n	bbf0 <_write_r+0x1c>
    bbf8:	6023      	str	r3, [r4, #0]
    bbfa:	bd38      	pop	{r3, r4, r5, pc}
    bbfc:	2001e634 	.word	0x2001e634

0000bc00 <__errno>:
    bc00:	4b01      	ldr	r3, [pc, #4]	; (bc08 <__errno+0x8>)
    bc02:	6818      	ldr	r0, [r3, #0]
    bc04:	4770      	bx	lr
    bc06:	bf00      	nop
    bc08:	20008b7c 	.word	0x20008b7c

0000bc0c <__libc_init_array>:
    bc0c:	b570      	push	{r4, r5, r6, lr}
    bc0e:	4e0d      	ldr	r6, [pc, #52]	; (bc44 <__libc_init_array+0x38>)
    bc10:	4d0d      	ldr	r5, [pc, #52]	; (bc48 <__libc_init_array+0x3c>)
    bc12:	1b76      	subs	r6, r6, r5
    bc14:	10b6      	asrs	r6, r6, #2
    bc16:	d006      	beq.n	bc26 <__libc_init_array+0x1a>
    bc18:	2400      	movs	r4, #0
    bc1a:	f855 3b04 	ldr.w	r3, [r5], #4
    bc1e:	3401      	adds	r4, #1
    bc20:	4798      	blx	r3
    bc22:	42a6      	cmp	r6, r4
    bc24:	d1f9      	bne.n	bc1a <__libc_init_array+0xe>
    bc26:	4e09      	ldr	r6, [pc, #36]	; (bc4c <__libc_init_array+0x40>)
    bc28:	4d09      	ldr	r5, [pc, #36]	; (bc50 <__libc_init_array+0x44>)
    bc2a:	1b76      	subs	r6, r6, r5
    bc2c:	f008 fc28 	bl	14480 <___init_veneer>
    bc30:	10b6      	asrs	r6, r6, #2
    bc32:	d006      	beq.n	bc42 <__libc_init_array+0x36>
    bc34:	2400      	movs	r4, #0
    bc36:	f855 3b04 	ldr.w	r3, [r5], #4
    bc3a:	3401      	adds	r4, #1
    bc3c:	4798      	blx	r3
    bc3e:	42a6      	cmp	r6, r4
    bc40:	d1f9      	bne.n	bc36 <__libc_init_array+0x2a>
    bc42:	bd70      	pop	{r4, r5, r6, pc}
    bc44:	60002660 	.word	0x60002660
    bc48:	60002660 	.word	0x60002660
    bc4c:	60002674 	.word	0x60002674
    bc50:	60002660 	.word	0x60002660

0000bc54 <__retarget_lock_init_recursive>:
    bc54:	4770      	bx	lr
    bc56:	bf00      	nop

0000bc58 <__retarget_lock_close_recursive>:
    bc58:	4770      	bx	lr
    bc5a:	bf00      	nop

0000bc5c <__retarget_lock_acquire_recursive>:
    bc5c:	4770      	bx	lr
    bc5e:	bf00      	nop

0000bc60 <__retarget_lock_release_recursive>:
    bc60:	4770      	bx	lr
    bc62:	bf00      	nop
	...
    bc80:	eba2 0003 	sub.w	r0, r2, r3
    bc84:	4770      	bx	lr
    bc86:	bf00      	nop

0000bc88 <strcmp>:
    bc88:	7802      	ldrb	r2, [r0, #0]
    bc8a:	780b      	ldrb	r3, [r1, #0]
    bc8c:	2a01      	cmp	r2, #1
    bc8e:	bf28      	it	cs
    bc90:	429a      	cmpcs	r2, r3
    bc92:	d1f5      	bne.n	bc80 <__retarget_lock_release_recursive+0x20>
    bc94:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    bc98:	ea40 0401 	orr.w	r4, r0, r1
    bc9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    bca0:	f06f 0c00 	mvn.w	ip, #0
    bca4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    bca8:	b312      	cbz	r2, bcf0 <strcmp+0x68>
    bcaa:	ea80 0401 	eor.w	r4, r0, r1
    bcae:	f014 0f07 	tst.w	r4, #7
    bcb2:	d16a      	bne.n	bd8a <strcmp+0x102>
    bcb4:	f000 0407 	and.w	r4, r0, #7
    bcb8:	f020 0007 	bic.w	r0, r0, #7
    bcbc:	f004 0503 	and.w	r5, r4, #3
    bcc0:	f021 0107 	bic.w	r1, r1, #7
    bcc4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bcc8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bccc:	f014 0f04 	tst.w	r4, #4
    bcd0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bcd4:	fa0c f405 	lsl.w	r4, ip, r5
    bcd8:	ea62 0204 	orn	r2, r2, r4
    bcdc:	ea66 0604 	orn	r6, r6, r4
    bce0:	d00a      	beq.n	bcf8 <strcmp+0x70>
    bce2:	ea63 0304 	orn	r3, r3, r4
    bce6:	4662      	mov	r2, ip
    bce8:	ea67 0704 	orn	r7, r7, r4
    bcec:	4666      	mov	r6, ip
    bcee:	e003      	b.n	bcf8 <strcmp+0x70>
    bcf0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bcf4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bcf8:	fa82 f54c 	uadd8	r5, r2, ip
    bcfc:	ea82 0406 	eor.w	r4, r2, r6
    bd00:	faa4 f48c 	sel	r4, r4, ip
    bd04:	bb6c      	cbnz	r4, bd62 <strcmp+0xda>
    bd06:	fa83 f54c 	uadd8	r5, r3, ip
    bd0a:	ea83 0507 	eor.w	r5, r3, r7
    bd0e:	faa5 f58c 	sel	r5, r5, ip
    bd12:	b995      	cbnz	r5, bd3a <strcmp+0xb2>
    bd14:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    bd18:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    bd1c:	fa82 f54c 	uadd8	r5, r2, ip
    bd20:	ea82 0406 	eor.w	r4, r2, r6
    bd24:	faa4 f48c 	sel	r4, r4, ip
    bd28:	fa83 f54c 	uadd8	r5, r3, ip
    bd2c:	ea83 0507 	eor.w	r5, r3, r7
    bd30:	faa5 f58c 	sel	r5, r5, ip
    bd34:	4325      	orrs	r5, r4
    bd36:	d0db      	beq.n	bcf0 <strcmp+0x68>
    bd38:	b99c      	cbnz	r4, bd62 <strcmp+0xda>
    bd3a:	ba2d      	rev	r5, r5
    bd3c:	fab5 f485 	clz	r4, r5
    bd40:	f024 0407 	bic.w	r4, r4, #7
    bd44:	fa27 f104 	lsr.w	r1, r7, r4
    bd48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    bd4c:	fa23 f304 	lsr.w	r3, r3, r4
    bd50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    bd54:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bd58:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bd5c:	eba0 0001 	sub.w	r0, r0, r1
    bd60:	4770      	bx	lr
    bd62:	ba24      	rev	r4, r4
    bd64:	fab4 f484 	clz	r4, r4
    bd68:	f024 0407 	bic.w	r4, r4, #7
    bd6c:	fa26 f104 	lsr.w	r1, r6, r4
    bd70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    bd74:	fa22 f204 	lsr.w	r2, r2, r4
    bd78:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    bd7c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bd80:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bd84:	eba0 0001 	sub.w	r0, r0, r1
    bd88:	4770      	bx	lr
    bd8a:	f014 0f03 	tst.w	r4, #3
    bd8e:	d13c      	bne.n	be0a <strcmp+0x182>
    bd90:	f010 0403 	ands.w	r4, r0, #3
    bd94:	d128      	bne.n	bde8 <strcmp+0x160>
    bd96:	f850 2b08 	ldr.w	r2, [r0], #8
    bd9a:	f851 3b08 	ldr.w	r3, [r1], #8
    bd9e:	fa82 f54c 	uadd8	r5, r2, ip
    bda2:	ea82 0503 	eor.w	r5, r2, r3
    bda6:	faa5 f58c 	sel	r5, r5, ip
    bdaa:	b95d      	cbnz	r5, bdc4 <strcmp+0x13c>
    bdac:	f850 2c04 	ldr.w	r2, [r0, #-4]
    bdb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    bdb4:	fa82 f54c 	uadd8	r5, r2, ip
    bdb8:	ea82 0503 	eor.w	r5, r2, r3
    bdbc:	faa5 f58c 	sel	r5, r5, ip
    bdc0:	2d00      	cmp	r5, #0
    bdc2:	d0e8      	beq.n	bd96 <strcmp+0x10e>
    bdc4:	ba2d      	rev	r5, r5
    bdc6:	fab5 f485 	clz	r4, r5
    bdca:	f024 0407 	bic.w	r4, r4, #7
    bdce:	fa23 f104 	lsr.w	r1, r3, r4
    bdd2:	fa22 f204 	lsr.w	r2, r2, r4
    bdd6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    bdda:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bdde:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bde2:	eba0 0001 	sub.w	r0, r0, r1
    bde6:	4770      	bx	lr
    bde8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    bdec:	f020 0003 	bic.w	r0, r0, #3
    bdf0:	f850 2b08 	ldr.w	r2, [r0], #8
    bdf4:	f021 0103 	bic.w	r1, r1, #3
    bdf8:	f851 3b08 	ldr.w	r3, [r1], #8
    bdfc:	fa0c f404 	lsl.w	r4, ip, r4
    be00:	ea62 0204 	orn	r2, r2, r4
    be04:	ea63 0304 	orn	r3, r3, r4
    be08:	e7c9      	b.n	bd9e <strcmp+0x116>
    be0a:	f010 0403 	ands.w	r4, r0, #3
    be0e:	d01a      	beq.n	be46 <strcmp+0x1be>
    be10:	eba1 0104 	sub.w	r1, r1, r4
    be14:	f020 0003 	bic.w	r0, r0, #3
    be18:	07e4      	lsls	r4, r4, #31
    be1a:	f850 2b04 	ldr.w	r2, [r0], #4
    be1e:	d006      	beq.n	be2e <strcmp+0x1a6>
    be20:	d20f      	bcs.n	be42 <strcmp+0x1ba>
    be22:	788b      	ldrb	r3, [r1, #2]
    be24:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    be28:	1ae4      	subs	r4, r4, r3
    be2a:	d106      	bne.n	be3a <strcmp+0x1b2>
    be2c:	b12b      	cbz	r3, be3a <strcmp+0x1b2>
    be2e:	78cb      	ldrb	r3, [r1, #3]
    be30:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    be34:	1ae4      	subs	r4, r4, r3
    be36:	d100      	bne.n	be3a <strcmp+0x1b2>
    be38:	b91b      	cbnz	r3, be42 <strcmp+0x1ba>
    be3a:	4620      	mov	r0, r4
    be3c:	f85d 4b10 	ldr.w	r4, [sp], #16
    be40:	4770      	bx	lr
    be42:	f101 0104 	add.w	r1, r1, #4
    be46:	f850 2b04 	ldr.w	r2, [r0], #4
    be4a:	07cc      	lsls	r4, r1, #31
    be4c:	f021 0103 	bic.w	r1, r1, #3
    be50:	f851 3b04 	ldr.w	r3, [r1], #4
    be54:	d848      	bhi.n	bee8 <strcmp+0x260>
    be56:	d224      	bcs.n	bea2 <strcmp+0x21a>
    be58:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    be5c:	fa82 f54c 	uadd8	r5, r2, ip
    be60:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    be64:	faa5 f58c 	sel	r5, r5, ip
    be68:	d10a      	bne.n	be80 <strcmp+0x1f8>
    be6a:	b965      	cbnz	r5, be86 <strcmp+0x1fe>
    be6c:	f851 3b04 	ldr.w	r3, [r1], #4
    be70:	ea84 0402 	eor.w	r4, r4, r2
    be74:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    be78:	d10e      	bne.n	be98 <strcmp+0x210>
    be7a:	f850 2b04 	ldr.w	r2, [r0], #4
    be7e:	e7eb      	b.n	be58 <strcmp+0x1d0>
    be80:	ea4f 2313 	mov.w	r3, r3, lsr #8
    be84:	e055      	b.n	bf32 <strcmp+0x2aa>
    be86:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    be8a:	d14d      	bne.n	bf28 <strcmp+0x2a0>
    be8c:	7808      	ldrb	r0, [r1, #0]
    be8e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    be92:	f1c0 0000 	rsb	r0, r0, #0
    be96:	4770      	bx	lr
    be98:	ea4f 6212 	mov.w	r2, r2, lsr #24
    be9c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bea0:	e047      	b.n	bf32 <strcmp+0x2aa>
    bea2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    bea6:	fa82 f54c 	uadd8	r5, r2, ip
    beaa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    beae:	faa5 f58c 	sel	r5, r5, ip
    beb2:	d10a      	bne.n	beca <strcmp+0x242>
    beb4:	b965      	cbnz	r5, bed0 <strcmp+0x248>
    beb6:	f851 3b04 	ldr.w	r3, [r1], #4
    beba:	ea84 0402 	eor.w	r4, r4, r2
    bebe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    bec2:	d10c      	bne.n	bede <strcmp+0x256>
    bec4:	f850 2b04 	ldr.w	r2, [r0], #4
    bec8:	e7eb      	b.n	bea2 <strcmp+0x21a>
    beca:	ea4f 4313 	mov.w	r3, r3, lsr #16
    bece:	e030      	b.n	bf32 <strcmp+0x2aa>
    bed0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    bed4:	d128      	bne.n	bf28 <strcmp+0x2a0>
    bed6:	880b      	ldrh	r3, [r1, #0]
    bed8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bedc:	e029      	b.n	bf32 <strcmp+0x2aa>
    bede:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bee2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    bee6:	e024      	b.n	bf32 <strcmp+0x2aa>
    bee8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    beec:	fa82 f54c 	uadd8	r5, r2, ip
    bef0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    bef4:	faa5 f58c 	sel	r5, r5, ip
    bef8:	d10a      	bne.n	bf10 <strcmp+0x288>
    befa:	b965      	cbnz	r5, bf16 <strcmp+0x28e>
    befc:	f851 3b04 	ldr.w	r3, [r1], #4
    bf00:	ea84 0402 	eor.w	r4, r4, r2
    bf04:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    bf08:	d109      	bne.n	bf1e <strcmp+0x296>
    bf0a:	f850 2b04 	ldr.w	r2, [r0], #4
    bf0e:	e7eb      	b.n	bee8 <strcmp+0x260>
    bf10:	ea4f 6313 	mov.w	r3, r3, lsr #24
    bf14:	e00d      	b.n	bf32 <strcmp+0x2aa>
    bf16:	f015 0fff 	tst.w	r5, #255	; 0xff
    bf1a:	d105      	bne.n	bf28 <strcmp+0x2a0>
    bf1c:	680b      	ldr	r3, [r1, #0]
    bf1e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    bf22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bf26:	e004      	b.n	bf32 <strcmp+0x2aa>
    bf28:	f04f 0000 	mov.w	r0, #0
    bf2c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bf30:	4770      	bx	lr
    bf32:	ba12      	rev	r2, r2
    bf34:	ba1b      	rev	r3, r3
    bf36:	fa82 f44c 	uadd8	r4, r2, ip
    bf3a:	ea82 0403 	eor.w	r4, r2, r3
    bf3e:	faa4 f58c 	sel	r5, r4, ip
    bf42:	fab5 f485 	clz	r4, r5
    bf46:	fa02 f204 	lsl.w	r2, r2, r4
    bf4a:	fa03 f304 	lsl.w	r3, r3, r4
    bf4e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    bf52:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bf56:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    bf5a:	4770      	bx	lr

0000bf5c <strcpy>:
    bf5c:	ea80 0201 	eor.w	r2, r0, r1
    bf60:	4684      	mov	ip, r0
    bf62:	f012 0f03 	tst.w	r2, #3
    bf66:	d14f      	bne.n	c008 <strcpy+0xac>
    bf68:	f011 0f03 	tst.w	r1, #3
    bf6c:	d132      	bne.n	bfd4 <strcpy+0x78>
    bf6e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    bf72:	f011 0f04 	tst.w	r1, #4
    bf76:	f851 3b04 	ldr.w	r3, [r1], #4
    bf7a:	d00b      	beq.n	bf94 <strcpy+0x38>
    bf7c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bf80:	439a      	bics	r2, r3
    bf82:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bf86:	bf04      	itt	eq
    bf88:	f84c 3b04 	streq.w	r3, [ip], #4
    bf8c:	f851 3b04 	ldreq.w	r3, [r1], #4
    bf90:	d116      	bne.n	bfc0 <strcpy+0x64>
    bf92:	bf00      	nop
    bf94:	f851 4b04 	ldr.w	r4, [r1], #4
    bf98:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bf9c:	439a      	bics	r2, r3
    bf9e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bfa2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    bfa6:	d10b      	bne.n	bfc0 <strcpy+0x64>
    bfa8:	f84c 3b04 	str.w	r3, [ip], #4
    bfac:	43a2      	bics	r2, r4
    bfae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bfb2:	bf04      	itt	eq
    bfb4:	f851 3b04 	ldreq.w	r3, [r1], #4
    bfb8:	f84c 4b04 	streq.w	r4, [ip], #4
    bfbc:	d0ea      	beq.n	bf94 <strcpy+0x38>
    bfbe:	4623      	mov	r3, r4
    bfc0:	f80c 3b01 	strb.w	r3, [ip], #1
    bfc4:	f013 0fff 	tst.w	r3, #255	; 0xff
    bfc8:	ea4f 2333 	mov.w	r3, r3, ror #8
    bfcc:	d1f8      	bne.n	bfc0 <strcpy+0x64>
    bfce:	f85d 4b04 	ldr.w	r4, [sp], #4
    bfd2:	4770      	bx	lr
    bfd4:	f011 0f01 	tst.w	r1, #1
    bfd8:	d006      	beq.n	bfe8 <strcpy+0x8c>
    bfda:	f811 2b01 	ldrb.w	r2, [r1], #1
    bfde:	f80c 2b01 	strb.w	r2, [ip], #1
    bfe2:	2a00      	cmp	r2, #0
    bfe4:	bf08      	it	eq
    bfe6:	4770      	bxeq	lr
    bfe8:	f011 0f02 	tst.w	r1, #2
    bfec:	d0bf      	beq.n	bf6e <strcpy+0x12>
    bfee:	f831 2b02 	ldrh.w	r2, [r1], #2
    bff2:	f012 0fff 	tst.w	r2, #255	; 0xff
    bff6:	bf16      	itet	ne
    bff8:	f82c 2b02 	strhne.w	r2, [ip], #2
    bffc:	f88c 2000 	strbeq.w	r2, [ip]
    c000:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    c004:	d1b3      	bne.n	bf6e <strcpy+0x12>
    c006:	4770      	bx	lr
    c008:	f811 2b01 	ldrb.w	r2, [r1], #1
    c00c:	f80c 2b01 	strb.w	r2, [ip], #1
    c010:	2a00      	cmp	r2, #0
    c012:	d1f9      	bne.n	c008 <strcpy+0xac>
    c014:	4770      	bx	lr
    c016:	bf00      	nop
	...

0000c020 <memchr>:
    c020:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c024:	2a10      	cmp	r2, #16
    c026:	db2b      	blt.n	c080 <memchr+0x60>
    c028:	f010 0f07 	tst.w	r0, #7
    c02c:	d008      	beq.n	c040 <memchr+0x20>
    c02e:	f810 3b01 	ldrb.w	r3, [r0], #1
    c032:	3a01      	subs	r2, #1
    c034:	428b      	cmp	r3, r1
    c036:	d02d      	beq.n	c094 <memchr+0x74>
    c038:	f010 0f07 	tst.w	r0, #7
    c03c:	b342      	cbz	r2, c090 <memchr+0x70>
    c03e:	d1f6      	bne.n	c02e <memchr+0xe>
    c040:	b4f0      	push	{r4, r5, r6, r7}
    c042:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c046:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    c04a:	f022 0407 	bic.w	r4, r2, #7
    c04e:	f07f 0700 	mvns.w	r7, #0
    c052:	2300      	movs	r3, #0
    c054:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    c058:	3c08      	subs	r4, #8
    c05a:	ea85 0501 	eor.w	r5, r5, r1
    c05e:	ea86 0601 	eor.w	r6, r6, r1
    c062:	fa85 f547 	uadd8	r5, r5, r7
    c066:	faa3 f587 	sel	r5, r3, r7
    c06a:	fa86 f647 	uadd8	r6, r6, r7
    c06e:	faa5 f687 	sel	r6, r5, r7
    c072:	b98e      	cbnz	r6, c098 <memchr+0x78>
    c074:	d1ee      	bne.n	c054 <memchr+0x34>
    c076:	bcf0      	pop	{r4, r5, r6, r7}
    c078:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c07c:	f002 0207 	and.w	r2, r2, #7
    c080:	b132      	cbz	r2, c090 <memchr+0x70>
    c082:	f810 3b01 	ldrb.w	r3, [r0], #1
    c086:	3a01      	subs	r2, #1
    c088:	ea83 0301 	eor.w	r3, r3, r1
    c08c:	b113      	cbz	r3, c094 <memchr+0x74>
    c08e:	d1f8      	bne.n	c082 <memchr+0x62>
    c090:	2000      	movs	r0, #0
    c092:	4770      	bx	lr
    c094:	3801      	subs	r0, #1
    c096:	4770      	bx	lr
    c098:	2d00      	cmp	r5, #0
    c09a:	bf06      	itte	eq
    c09c:	4635      	moveq	r5, r6
    c09e:	3803      	subeq	r0, #3
    c0a0:	3807      	subne	r0, #7
    c0a2:	f015 0f01 	tst.w	r5, #1
    c0a6:	d107      	bne.n	c0b8 <memchr+0x98>
    c0a8:	3001      	adds	r0, #1
    c0aa:	f415 7f80 	tst.w	r5, #256	; 0x100
    c0ae:	bf02      	ittt	eq
    c0b0:	3001      	addeq	r0, #1
    c0b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    c0b6:	3001      	addeq	r0, #1
    c0b8:	bcf0      	pop	{r4, r5, r6, r7}
    c0ba:	3801      	subs	r0, #1
    c0bc:	4770      	bx	lr
    c0be:	bf00      	nop

0000c0c0 <strlen>:
    c0c0:	f890 f000 	pld	[r0]
    c0c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    c0c8:	f020 0107 	bic.w	r1, r0, #7
    c0cc:	f06f 0c00 	mvn.w	ip, #0
    c0d0:	f010 0407 	ands.w	r4, r0, #7
    c0d4:	f891 f020 	pld	[r1, #32]
    c0d8:	f040 8049 	bne.w	c16e <strlen+0xae>
    c0dc:	f04f 0400 	mov.w	r4, #0
    c0e0:	f06f 0007 	mvn.w	r0, #7
    c0e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    c0e8:	f891 f040 	pld	[r1, #64]	; 0x40
    c0ec:	f100 0008 	add.w	r0, r0, #8
    c0f0:	fa82 f24c 	uadd8	r2, r2, ip
    c0f4:	faa4 f28c 	sel	r2, r4, ip
    c0f8:	fa83 f34c 	uadd8	r3, r3, ip
    c0fc:	faa2 f38c 	sel	r3, r2, ip
    c100:	bb4b      	cbnz	r3, c156 <strlen+0x96>
    c102:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    c106:	fa82 f24c 	uadd8	r2, r2, ip
    c10a:	f100 0008 	add.w	r0, r0, #8
    c10e:	faa4 f28c 	sel	r2, r4, ip
    c112:	fa83 f34c 	uadd8	r3, r3, ip
    c116:	faa2 f38c 	sel	r3, r2, ip
    c11a:	b9e3      	cbnz	r3, c156 <strlen+0x96>
    c11c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    c120:	fa82 f24c 	uadd8	r2, r2, ip
    c124:	f100 0008 	add.w	r0, r0, #8
    c128:	faa4 f28c 	sel	r2, r4, ip
    c12c:	fa83 f34c 	uadd8	r3, r3, ip
    c130:	faa2 f38c 	sel	r3, r2, ip
    c134:	b97b      	cbnz	r3, c156 <strlen+0x96>
    c136:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    c13a:	f101 0120 	add.w	r1, r1, #32
    c13e:	fa82 f24c 	uadd8	r2, r2, ip
    c142:	f100 0008 	add.w	r0, r0, #8
    c146:	faa4 f28c 	sel	r2, r4, ip
    c14a:	fa83 f34c 	uadd8	r3, r3, ip
    c14e:	faa2 f38c 	sel	r3, r2, ip
    c152:	2b00      	cmp	r3, #0
    c154:	d0c6      	beq.n	c0e4 <strlen+0x24>
    c156:	2a00      	cmp	r2, #0
    c158:	bf04      	itt	eq
    c15a:	3004      	addeq	r0, #4
    c15c:	461a      	moveq	r2, r3
    c15e:	ba12      	rev	r2, r2
    c160:	fab2 f282 	clz	r2, r2
    c164:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    c168:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    c16c:	4770      	bx	lr
    c16e:	e9d1 2300 	ldrd	r2, r3, [r1]
    c172:	f004 0503 	and.w	r5, r4, #3
    c176:	f1c4 0000 	rsb	r0, r4, #0
    c17a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    c17e:	f014 0f04 	tst.w	r4, #4
    c182:	f891 f040 	pld	[r1, #64]	; 0x40
    c186:	fa0c f505 	lsl.w	r5, ip, r5
    c18a:	ea62 0205 	orn	r2, r2, r5
    c18e:	bf1c      	itt	ne
    c190:	ea63 0305 	ornne	r3, r3, r5
    c194:	4662      	movne	r2, ip
    c196:	f04f 0400 	mov.w	r4, #0
    c19a:	e7a9      	b.n	c0f0 <strlen+0x30>
    c19c:	0000      	movs	r0, r0
	...

0000c1a0 <nan>:
    c1a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; c1a8 <nan+0x8>
    c1a4:	4770      	bx	lr
    c1a6:	bf00      	nop
    c1a8:	00000000 	.word	0x00000000
    c1ac:	7ff80000 	.word	0x7ff80000

0000c1b0 <nanf>:
    c1b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; c1b8 <nanf+0x8>
    c1b4:	4770      	bx	lr
    c1b6:	bf00      	nop
    c1b8:	7fc00000 	.word	0x7fc00000

0000c1bc <__register_exitproc>:
    c1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c1c0:	f8df a07c 	ldr.w	sl, [pc, #124]	; c240 <__register_exitproc+0x84>
    c1c4:	4606      	mov	r6, r0
    c1c6:	f8da 0000 	ldr.w	r0, [sl]
    c1ca:	4698      	mov	r8, r3
    c1cc:	460f      	mov	r7, r1
    c1ce:	4691      	mov	r9, r2
    c1d0:	f7ff fd44 	bl	bc5c <__retarget_lock_acquire_recursive>
    c1d4:	4b18      	ldr	r3, [pc, #96]	; (c238 <__register_exitproc+0x7c>)
    c1d6:	681c      	ldr	r4, [r3, #0]
    c1d8:	b324      	cbz	r4, c224 <__register_exitproc+0x68>
    c1da:	6865      	ldr	r5, [r4, #4]
    c1dc:	2d1f      	cmp	r5, #31
    c1de:	dc24      	bgt.n	c22a <__register_exitproc+0x6e>
    c1e0:	b95e      	cbnz	r6, c1fa <__register_exitproc+0x3e>
    c1e2:	1c6b      	adds	r3, r5, #1
    c1e4:	3502      	adds	r5, #2
    c1e6:	f8da 0000 	ldr.w	r0, [sl]
    c1ea:	6063      	str	r3, [r4, #4]
    c1ec:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    c1f0:	f7ff fd36 	bl	bc60 <__retarget_lock_release_recursive>
    c1f4:	2000      	movs	r0, #0
    c1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c1fa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    c1fe:	2301      	movs	r3, #1
    c200:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    c204:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    c208:	40ab      	lsls	r3, r5
    c20a:	431a      	orrs	r2, r3
    c20c:	2e02      	cmp	r6, #2
    c20e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    c212:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    c216:	d1e4      	bne.n	c1e2 <__register_exitproc+0x26>
    c218:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    c21c:	431a      	orrs	r2, r3
    c21e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    c222:	e7de      	b.n	c1e2 <__register_exitproc+0x26>
    c224:	4c05      	ldr	r4, [pc, #20]	; (c23c <__register_exitproc+0x80>)
    c226:	601c      	str	r4, [r3, #0]
    c228:	e7d7      	b.n	c1da <__register_exitproc+0x1e>
    c22a:	f8da 0000 	ldr.w	r0, [sl]
    c22e:	f7ff fd17 	bl	bc60 <__retarget_lock_release_recursive>
    c232:	f04f 30ff 	mov.w	r0, #4294967295
    c236:	e7de      	b.n	c1f6 <__register_exitproc+0x3a>
    c238:	2001e10c 	.word	0x2001e10c
    c23c:	2001e110 	.word	0x2001e110
    c240:	200085e8 	.word	0x200085e8

0000c244 <_malloc_trim_r>:
    c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c246:	4f24      	ldr	r7, [pc, #144]	; (c2d8 <_malloc_trim_r+0x94>)
    c248:	460c      	mov	r4, r1
    c24a:	4606      	mov	r6, r0
    c24c:	f7fd ff2a 	bl	a0a4 <__malloc_lock>
    c250:	68bb      	ldr	r3, [r7, #8]
    c252:	685d      	ldr	r5, [r3, #4]
    c254:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    c258:	310f      	adds	r1, #15
    c25a:	f025 0503 	bic.w	r5, r5, #3
    c25e:	194b      	adds	r3, r1, r5
    c260:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    c264:	f023 030f 	bic.w	r3, r3, #15
    c268:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    c26c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    c270:	db07      	blt.n	c282 <_malloc_trim_r+0x3e>
    c272:	2100      	movs	r1, #0
    c274:	4630      	mov	r0, r6
    c276:	f7ff fc9b 	bl	bbb0 <_sbrk_r>
    c27a:	68bb      	ldr	r3, [r7, #8]
    c27c:	442b      	add	r3, r5
    c27e:	4298      	cmp	r0, r3
    c280:	d004      	beq.n	c28c <_malloc_trim_r+0x48>
    c282:	4630      	mov	r0, r6
    c284:	f7fd ff14 	bl	a0b0 <__malloc_unlock>
    c288:	2000      	movs	r0, #0
    c28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c28c:	4261      	negs	r1, r4
    c28e:	4630      	mov	r0, r6
    c290:	f7ff fc8e 	bl	bbb0 <_sbrk_r>
    c294:	3001      	adds	r0, #1
    c296:	d00d      	beq.n	c2b4 <_malloc_trim_r+0x70>
    c298:	4a10      	ldr	r2, [pc, #64]	; (c2dc <_malloc_trim_r+0x98>)
    c29a:	68bb      	ldr	r3, [r7, #8]
    c29c:	1b2d      	subs	r5, r5, r4
    c29e:	f045 0501 	orr.w	r5, r5, #1
    c2a2:	605d      	str	r5, [r3, #4]
    c2a4:	6813      	ldr	r3, [r2, #0]
    c2a6:	4630      	mov	r0, r6
    c2a8:	1b1b      	subs	r3, r3, r4
    c2aa:	6013      	str	r3, [r2, #0]
    c2ac:	f7fd ff00 	bl	a0b0 <__malloc_unlock>
    c2b0:	2001      	movs	r0, #1
    c2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c2b4:	2100      	movs	r1, #0
    c2b6:	4630      	mov	r0, r6
    c2b8:	f7ff fc7a 	bl	bbb0 <_sbrk_r>
    c2bc:	68ba      	ldr	r2, [r7, #8]
    c2be:	1a83      	subs	r3, r0, r2
    c2c0:	2b0f      	cmp	r3, #15
    c2c2:	ddde      	ble.n	c282 <_malloc_trim_r+0x3e>
    c2c4:	f043 0301 	orr.w	r3, r3, #1
    c2c8:	6053      	str	r3, [r2, #4]
    c2ca:	4b05      	ldr	r3, [pc, #20]	; (c2e0 <_malloc_trim_r+0x9c>)
    c2cc:	4903      	ldr	r1, [pc, #12]	; (c2dc <_malloc_trim_r+0x98>)
    c2ce:	681b      	ldr	r3, [r3, #0]
    c2d0:	1ac0      	subs	r0, r0, r3
    c2d2:	6008      	str	r0, [r1, #0]
    c2d4:	e7d5      	b.n	c282 <_malloc_trim_r+0x3e>
    c2d6:	bf00      	nop
    c2d8:	20008760 	.word	0x20008760
    c2dc:	2001e2ac 	.word	0x2001e2ac
    c2e0:	20008b68 	.word	0x20008b68

0000c2e4 <_free_r>:
    c2e4:	2900      	cmp	r1, #0
    c2e6:	d061      	beq.n	c3ac <_free_r+0xc8>
    c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2ea:	460c      	mov	r4, r1
    c2ec:	4606      	mov	r6, r0
    c2ee:	f7fd fed9 	bl	a0a4 <__malloc_lock>
    c2f2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    c2f6:	4f7b      	ldr	r7, [pc, #492]	; (c4e4 <_free_r+0x200>)
    c2f8:	f1a4 0508 	sub.w	r5, r4, #8
    c2fc:	f022 0101 	bic.w	r1, r2, #1
    c300:	eb05 0c01 	add.w	ip, r5, r1
    c304:	68b8      	ldr	r0, [r7, #8]
    c306:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c30a:	4560      	cmp	r0, ip
    c30c:	f023 0303 	bic.w	r3, r3, #3
    c310:	f000 808b 	beq.w	c42a <_free_r+0x146>
    c314:	07d2      	lsls	r2, r2, #31
    c316:	f8cc 3004 	str.w	r3, [ip, #4]
    c31a:	d432      	bmi.n	c382 <_free_r+0x9e>
    c31c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c320:	1aad      	subs	r5, r5, r2
    c322:	4411      	add	r1, r2
    c324:	68aa      	ldr	r2, [r5, #8]
    c326:	f107 0008 	add.w	r0, r7, #8
    c32a:	4282      	cmp	r2, r0
    c32c:	d06a      	beq.n	c404 <_free_r+0x120>
    c32e:	eb0c 0403 	add.w	r4, ip, r3
    c332:	f8d4 e004 	ldr.w	lr, [r4, #4]
    c336:	68ec      	ldr	r4, [r5, #12]
    c338:	60d4      	str	r4, [r2, #12]
    c33a:	f01e 0f01 	tst.w	lr, #1
    c33e:	60a2      	str	r2, [r4, #8]
    c340:	f000 8097 	beq.w	c472 <_free_r+0x18e>
    c344:	f041 0301 	orr.w	r3, r1, #1
    c348:	606b      	str	r3, [r5, #4]
    c34a:	f8cc 1000 	str.w	r1, [ip]
    c34e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c352:	d235      	bcs.n	c3c0 <_free_r+0xdc>
    c354:	6878      	ldr	r0, [r7, #4]
    c356:	08cb      	lsrs	r3, r1, #3
    c358:	2201      	movs	r2, #1
    c35a:	0949      	lsrs	r1, r1, #5
    c35c:	3301      	adds	r3, #1
    c35e:	408a      	lsls	r2, r1
    c360:	4302      	orrs	r2, r0
    c362:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    c366:	607a      	str	r2, [r7, #4]
    c368:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    c36c:	3a08      	subs	r2, #8
    c36e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    c372:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    c376:	60cd      	str	r5, [r1, #12]
    c378:	4630      	mov	r0, r6
    c37a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c37e:	f7fd be97 	b.w	a0b0 <__malloc_unlock>
    c382:	eb0c 0203 	add.w	r2, ip, r3
    c386:	6852      	ldr	r2, [r2, #4]
    c388:	07d0      	lsls	r0, r2, #31
    c38a:	d410      	bmi.n	c3ae <_free_r+0xca>
    c38c:	4419      	add	r1, r3
    c38e:	f107 0008 	add.w	r0, r7, #8
    c392:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c396:	4283      	cmp	r3, r0
    c398:	d073      	beq.n	c482 <_free_r+0x19e>
    c39a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    c39e:	60da      	str	r2, [r3, #12]
    c3a0:	6093      	str	r3, [r2, #8]
    c3a2:	f041 0301 	orr.w	r3, r1, #1
    c3a6:	606b      	str	r3, [r5, #4]
    c3a8:	5069      	str	r1, [r5, r1]
    c3aa:	e7d0      	b.n	c34e <_free_r+0x6a>
    c3ac:	4770      	bx	lr
    c3ae:	f041 0301 	orr.w	r3, r1, #1
    c3b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c3b6:	f844 3c04 	str.w	r3, [r4, #-4]
    c3ba:	f8cc 1000 	str.w	r1, [ip]
    c3be:	d3c9      	bcc.n	c354 <_free_r+0x70>
    c3c0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    c3c4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    c3c8:	d248      	bcs.n	c45c <_free_r+0x178>
    c3ca:	098b      	lsrs	r3, r1, #6
    c3cc:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c3d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    c3d4:	00c3      	lsls	r3, r0, #3
    c3d6:	18f8      	adds	r0, r7, r3
    c3d8:	58fb      	ldr	r3, [r7, r3]
    c3da:	3808      	subs	r0, #8
    c3dc:	4298      	cmp	r0, r3
    c3de:	d059      	beq.n	c494 <_free_r+0x1b0>
    c3e0:	685a      	ldr	r2, [r3, #4]
    c3e2:	f022 0203 	bic.w	r2, r2, #3
    c3e6:	428a      	cmp	r2, r1
    c3e8:	d902      	bls.n	c3f0 <_free_r+0x10c>
    c3ea:	689b      	ldr	r3, [r3, #8]
    c3ec:	4298      	cmp	r0, r3
    c3ee:	d1f7      	bne.n	c3e0 <_free_r+0xfc>
    c3f0:	68d8      	ldr	r0, [r3, #12]
    c3f2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    c3f6:	6085      	str	r5, [r0, #8]
    c3f8:	60dd      	str	r5, [r3, #12]
    c3fa:	4630      	mov	r0, r6
    c3fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c400:	f7fd be56 	b.w	a0b0 <__malloc_unlock>
    c404:	eb0c 0203 	add.w	r2, ip, r3
    c408:	6852      	ldr	r2, [r2, #4]
    c40a:	07d2      	lsls	r2, r2, #31
    c40c:	d463      	bmi.n	c4d6 <_free_r+0x1f2>
    c40e:	440b      	add	r3, r1
    c410:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    c414:	60ca      	str	r2, [r1, #12]
    c416:	6091      	str	r1, [r2, #8]
    c418:	f043 0201 	orr.w	r2, r3, #1
    c41c:	606a      	str	r2, [r5, #4]
    c41e:	4630      	mov	r0, r6
    c420:	50eb      	str	r3, [r5, r3]
    c422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c426:	f7fd be43 	b.w	a0b0 <__malloc_unlock>
    c42a:	440b      	add	r3, r1
    c42c:	07d1      	lsls	r1, r2, #31
    c42e:	d407      	bmi.n	c440 <_free_r+0x15c>
    c430:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c434:	1aad      	subs	r5, r5, r2
    c436:	4413      	add	r3, r2
    c438:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    c43c:	60ca      	str	r2, [r1, #12]
    c43e:	6091      	str	r1, [r2, #8]
    c440:	f043 0201 	orr.w	r2, r3, #1
    c444:	606a      	str	r2, [r5, #4]
    c446:	4a28      	ldr	r2, [pc, #160]	; (c4e8 <_free_r+0x204>)
    c448:	60bd      	str	r5, [r7, #8]
    c44a:	6812      	ldr	r2, [r2, #0]
    c44c:	429a      	cmp	r2, r3
    c44e:	d893      	bhi.n	c378 <_free_r+0x94>
    c450:	4b26      	ldr	r3, [pc, #152]	; (c4ec <_free_r+0x208>)
    c452:	4630      	mov	r0, r6
    c454:	6819      	ldr	r1, [r3, #0]
    c456:	f7ff fef5 	bl	c244 <_malloc_trim_r>
    c45a:	e78d      	b.n	c378 <_free_r+0x94>
    c45c:	2b14      	cmp	r3, #20
    c45e:	d90a      	bls.n	c476 <_free_r+0x192>
    c460:	2b54      	cmp	r3, #84	; 0x54
    c462:	d81f      	bhi.n	c4a4 <_free_r+0x1c0>
    c464:	0b0b      	lsrs	r3, r1, #12
    c466:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c46a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    c46e:	00c3      	lsls	r3, r0, #3
    c470:	e7b1      	b.n	c3d6 <_free_r+0xf2>
    c472:	4419      	add	r1, r3
    c474:	e78d      	b.n	c392 <_free_r+0xae>
    c476:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c47a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    c47e:	00c3      	lsls	r3, r0, #3
    c480:	e7a9      	b.n	c3d6 <_free_r+0xf2>
    c482:	f041 0301 	orr.w	r3, r1, #1
    c486:	e9c7 5504 	strd	r5, r5, [r7, #16]
    c48a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    c48e:	606b      	str	r3, [r5, #4]
    c490:	5069      	str	r1, [r5, r1]
    c492:	e771      	b.n	c378 <_free_r+0x94>
    c494:	6879      	ldr	r1, [r7, #4]
    c496:	1092      	asrs	r2, r2, #2
    c498:	2401      	movs	r4, #1
    c49a:	fa04 f202 	lsl.w	r2, r4, r2
    c49e:	430a      	orrs	r2, r1
    c4a0:	607a      	str	r2, [r7, #4]
    c4a2:	e7a6      	b.n	c3f2 <_free_r+0x10e>
    c4a4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c4a8:	d806      	bhi.n	c4b8 <_free_r+0x1d4>
    c4aa:	0bcb      	lsrs	r3, r1, #15
    c4ac:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c4b0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    c4b4:	00c3      	lsls	r3, r0, #3
    c4b6:	e78e      	b.n	c3d6 <_free_r+0xf2>
    c4b8:	f240 5254 	movw	r2, #1364	; 0x554
    c4bc:	4293      	cmp	r3, r2
    c4be:	d806      	bhi.n	c4ce <_free_r+0x1ea>
    c4c0:	0c8b      	lsrs	r3, r1, #18
    c4c2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c4c6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    c4ca:	00c3      	lsls	r3, r0, #3
    c4cc:	e783      	b.n	c3d6 <_free_r+0xf2>
    c4ce:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c4d2:	227e      	movs	r2, #126	; 0x7e
    c4d4:	e77f      	b.n	c3d6 <_free_r+0xf2>
    c4d6:	f041 0301 	orr.w	r3, r1, #1
    c4da:	606b      	str	r3, [r5, #4]
    c4dc:	f8cc 1000 	str.w	r1, [ip]
    c4e0:	e74a      	b.n	c378 <_free_r+0x94>
    c4e2:	bf00      	nop
    c4e4:	20008760 	.word	0x20008760
    c4e8:	20008b6c 	.word	0x20008b6c
    c4ec:	2001e2dc 	.word	0x2001e2dc

0000c4f0 <rshift>:
    c4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4f4:	6904      	ldr	r4, [r0, #16]
    c4f6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    c4fa:	dd2f      	ble.n	c55c <rshift+0x6c>
    c4fc:	f100 0e14 	add.w	lr, r0, #20
    c500:	114e      	asrs	r6, r1, #5
    c502:	f011 0c1f 	ands.w	ip, r1, #31
    c506:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    c50a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    c50e:	d02b      	beq.n	c568 <rshift+0x78>
    c510:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    c514:	3304      	adds	r3, #4
    c516:	429d      	cmp	r5, r3
    c518:	fa21 f10c 	lsr.w	r1, r1, ip
    c51c:	f1cc 0820 	rsb	r8, ip, #32
    c520:	d918      	bls.n	c554 <rshift+0x64>
    c522:	4677      	mov	r7, lr
    c524:	681a      	ldr	r2, [r3, #0]
    c526:	fa02 f208 	lsl.w	r2, r2, r8
    c52a:	430a      	orrs	r2, r1
    c52c:	f847 2b04 	str.w	r2, [r7], #4
    c530:	f853 1b04 	ldr.w	r1, [r3], #4
    c534:	429d      	cmp	r5, r3
    c536:	fa21 f10c 	lsr.w	r1, r1, ip
    c53a:	d8f3      	bhi.n	c524 <rshift+0x34>
    c53c:	1ba3      	subs	r3, r4, r6
    c53e:	009b      	lsls	r3, r3, #2
    c540:	3b05      	subs	r3, #5
    c542:	089b      	lsrs	r3, r3, #2
    c544:	3301      	adds	r3, #1
    c546:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    c54a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    c54e:	b1c9      	cbz	r1, c584 <rshift+0x94>
    c550:	3404      	adds	r4, #4
    c552:	e017      	b.n	c584 <rshift+0x94>
    c554:	6141      	str	r1, [r0, #20]
    c556:	4674      	mov	r4, lr
    c558:	2900      	cmp	r1, #0
    c55a:	d1f9      	bne.n	c550 <rshift+0x60>
    c55c:	2300      	movs	r3, #0
    c55e:	6103      	str	r3, [r0, #16]
    c560:	2300      	movs	r3, #0
    c562:	6143      	str	r3, [r0, #20]
    c564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c568:	429d      	cmp	r5, r3
    c56a:	bf88      	it	hi
    c56c:	f100 0210 	addhi.w	r2, r0, #16
    c570:	d9f4      	bls.n	c55c <rshift+0x6c>
    c572:	f853 1b04 	ldr.w	r1, [r3], #4
    c576:	f842 1f04 	str.w	r1, [r2, #4]!
    c57a:	429d      	cmp	r5, r3
    c57c:	d8f9      	bhi.n	c572 <rshift+0x82>
    c57e:	1ba4      	subs	r4, r4, r6
    c580:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    c584:	eba4 030e 	sub.w	r3, r4, lr
    c588:	109b      	asrs	r3, r3, #2
    c58a:	4574      	cmp	r4, lr
    c58c:	6103      	str	r3, [r0, #16]
    c58e:	d0e7      	beq.n	c560 <rshift+0x70>
    c590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c594 <__gethex>:
    c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c598:	ed2d 8b02 	vpush	{d8}
    c59c:	680c      	ldr	r4, [r1, #0]
    c59e:	468b      	mov	fp, r1
    c5a0:	78a1      	ldrb	r1, [r4, #2]
    c5a2:	b085      	sub	sp, #20
    c5a4:	2930      	cmp	r1, #48	; 0x30
    c5a6:	ee08 0a10 	vmov	s16, r0
    c5aa:	4692      	mov	sl, r2
    c5ac:	9302      	str	r3, [sp, #8]
    c5ae:	f040 81ce 	bne.w	c94e <__gethex+0x3ba>
    c5b2:	f06f 0001 	mvn.w	r0, #1
    c5b6:	1b00      	subs	r0, r0, r4
    c5b8:	1ce2      	adds	r2, r4, #3
    c5ba:	1883      	adds	r3, r0, r2
    c5bc:	4614      	mov	r4, r2
    c5be:	f812 1b01 	ldrb.w	r1, [r2], #1
    c5c2:	2930      	cmp	r1, #48	; 0x30
    c5c4:	d0f9      	beq.n	c5ba <__gethex+0x26>
    c5c6:	f8df 8300 	ldr.w	r8, [pc, #768]	; c8c8 <__gethex+0x334>
    c5ca:	f818 2001 	ldrb.w	r2, [r8, r1]
    c5ce:	2a00      	cmp	r2, #0
    c5d0:	f000 80e5 	beq.w	c79e <__gethex+0x20a>
    c5d4:	7822      	ldrb	r2, [r4, #0]
    c5d6:	2700      	movs	r7, #0
    c5d8:	f818 2002 	ldrb.w	r2, [r8, r2]
    c5dc:	463d      	mov	r5, r7
    c5de:	4626      	mov	r6, r4
    c5e0:	b12a      	cbz	r2, c5ee <__gethex+0x5a>
    c5e2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c5e6:	f818 2002 	ldrb.w	r2, [r8, r2]
    c5ea:	2a00      	cmp	r2, #0
    c5ec:	d1f9      	bne.n	c5e2 <__gethex+0x4e>
    c5ee:	49b5      	ldr	r1, [pc, #724]	; (c8c4 <__gethex+0x330>)
    c5f0:	9301      	str	r3, [sp, #4]
    c5f2:	2201      	movs	r2, #1
    c5f4:	4630      	mov	r0, r6
    c5f6:	f7ff fa1f 	bl	ba38 <strncmp>
    c5fa:	9b01      	ldr	r3, [sp, #4]
    c5fc:	4681      	mov	r9, r0
    c5fe:	2800      	cmp	r0, #0
    c600:	d04d      	beq.n	c69e <__gethex+0x10a>
    c602:	2d00      	cmp	r5, #0
    c604:	d14e      	bne.n	c6a4 <__gethex+0x110>
    c606:	7832      	ldrb	r2, [r6, #0]
    c608:	46a9      	mov	r9, r5
    c60a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c60e:	2a50      	cmp	r2, #80	; 0x50
    c610:	4635      	mov	r5, r6
    c612:	d050      	beq.n	c6b6 <__gethex+0x122>
    c614:	f8cb 6000 	str.w	r6, [fp]
    c618:	2f00      	cmp	r7, #0
    c61a:	d169      	bne.n	c6f0 <__gethex+0x15c>
    c61c:	1b2b      	subs	r3, r5, r4
    c61e:	3b01      	subs	r3, #1
    c620:	2b07      	cmp	r3, #7
    c622:	4639      	mov	r1, r7
    c624:	dd04      	ble.n	c630 <__gethex+0x9c>
    c626:	105b      	asrs	r3, r3, #1
    c628:	2b07      	cmp	r3, #7
    c62a:	f101 0101 	add.w	r1, r1, #1
    c62e:	dcfa      	bgt.n	c626 <__gethex+0x92>
    c630:	ee18 0a10 	vmov	r0, s16
    c634:	f000 fb82 	bl	cd3c <_Balloc>
    c638:	4683      	mov	fp, r0
    c63a:	2800      	cmp	r0, #0
    c63c:	f000 8266 	beq.w	cb0c <__gethex+0x578>
    c640:	f100 0614 	add.w	r6, r0, #20
    c644:	42ac      	cmp	r4, r5
    c646:	9601      	str	r6, [sp, #4]
    c648:	f080 81d2 	bcs.w	c9f0 <__gethex+0x45c>
    c64c:	2700      	movs	r7, #0
    c64e:	f8cd 900c 	str.w	r9, [sp, #12]
    c652:	499c      	ldr	r1, [pc, #624]	; (c8c4 <__gethex+0x330>)
    c654:	46a1      	mov	r9, r4
    c656:	463c      	mov	r4, r7
    c658:	e00c      	b.n	c674 <__gethex+0xe0>
    c65a:	2f20      	cmp	r7, #32
    c65c:	d019      	beq.n	c692 <__gethex+0xfe>
    c65e:	4638      	mov	r0, r7
    c660:	3704      	adds	r7, #4
    c662:	782a      	ldrb	r2, [r5, #0]
    c664:	f818 2002 	ldrb.w	r2, [r8, r2]
    c668:	f002 020f 	and.w	r2, r2, #15
    c66c:	4082      	lsls	r2, r0
    c66e:	4314      	orrs	r4, r2
    c670:	454d      	cmp	r5, r9
    c672:	d047      	beq.n	c704 <__gethex+0x170>
    c674:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    c678:	2a2e      	cmp	r2, #46	; 0x2e
    c67a:	d1ee      	bne.n	c65a <__gethex+0xc6>
    c67c:	454d      	cmp	r5, r9
    c67e:	d3ec      	bcc.n	c65a <__gethex+0xc6>
    c680:	2201      	movs	r2, #1
    c682:	4628      	mov	r0, r5
    c684:	f7ff f9d8 	bl	ba38 <strncmp>
    c688:	498e      	ldr	r1, [pc, #568]	; (c8c4 <__gethex+0x330>)
    c68a:	2800      	cmp	r0, #0
    c68c:	d0f0      	beq.n	c670 <__gethex+0xdc>
    c68e:	2f20      	cmp	r7, #32
    c690:	d1e5      	bne.n	c65e <__gethex+0xca>
    c692:	2000      	movs	r0, #0
    c694:	f846 4b04 	str.w	r4, [r6], #4
    c698:	2704      	movs	r7, #4
    c69a:	4604      	mov	r4, r0
    c69c:	e7e1      	b.n	c662 <__gethex+0xce>
    c69e:	2d00      	cmp	r5, #0
    c6a0:	f000 8142 	beq.w	c928 <__gethex+0x394>
    c6a4:	7832      	ldrb	r2, [r6, #0]
    c6a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c6aa:	1bad      	subs	r5, r5, r6
    c6ac:	2a50      	cmp	r2, #80	; 0x50
    c6ae:	ea4f 0985 	mov.w	r9, r5, lsl #2
    c6b2:	4635      	mov	r5, r6
    c6b4:	d1ae      	bne.n	c614 <__gethex+0x80>
    c6b6:	786a      	ldrb	r2, [r5, #1]
    c6b8:	2a2b      	cmp	r2, #43	; 0x2b
    c6ba:	f000 8125 	beq.w	c908 <__gethex+0x374>
    c6be:	2a2d      	cmp	r2, #45	; 0x2d
    c6c0:	f000 80a5 	beq.w	c80e <__gethex+0x27a>
    c6c4:	1c6e      	adds	r6, r5, #1
    c6c6:	2000      	movs	r0, #0
    c6c8:	f818 1002 	ldrb.w	r1, [r8, r2]
    c6cc:	1e4a      	subs	r2, r1, #1
    c6ce:	2a18      	cmp	r2, #24
    c6d0:	f200 809b 	bhi.w	c80a <__gethex+0x276>
    c6d4:	7872      	ldrb	r2, [r6, #1]
    c6d6:	f818 2002 	ldrb.w	r2, [r8, r2]
    c6da:	3910      	subs	r1, #16
    c6dc:	3601      	adds	r6, #1
    c6de:	2a00      	cmp	r2, #0
    c6e0:	d15a      	bne.n	c798 <__gethex+0x204>
    c6e2:	b100      	cbz	r0, c6e6 <__gethex+0x152>
    c6e4:	4249      	negs	r1, r1
    c6e6:	4489      	add	r9, r1
    c6e8:	f8cb 6000 	str.w	r6, [fp]
    c6ec:	2f00      	cmp	r7, #0
    c6ee:	d095      	beq.n	c61c <__gethex+0x88>
    c6f0:	2b00      	cmp	r3, #0
    c6f2:	bf14      	ite	ne
    c6f4:	2500      	movne	r5, #0
    c6f6:	2506      	moveq	r5, #6
    c6f8:	4628      	mov	r0, r5
    c6fa:	b005      	add	sp, #20
    c6fc:	ecbd 8b02 	vpop	{d8}
    c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c704:	f8dd 900c 	ldr.w	r9, [sp, #12]
    c708:	4623      	mov	r3, r4
    c70a:	f846 3b04 	str.w	r3, [r6], #4
    c70e:	4618      	mov	r0, r3
    c710:	9b01      	ldr	r3, [sp, #4]
    c712:	1af6      	subs	r6, r6, r3
    c714:	10b6      	asrs	r6, r6, #2
    c716:	f8cb 6010 	str.w	r6, [fp, #16]
    c71a:	f000 fbe9 	bl	cef0 <__hi0bits>
    c71e:	0176      	lsls	r6, r6, #5
    c720:	f8da 4000 	ldr.w	r4, [sl]
    c724:	1a30      	subs	r0, r6, r0
    c726:	42a0      	cmp	r0, r4
    c728:	dc75      	bgt.n	c816 <__gethex+0x282>
    c72a:	f2c0 80ef 	blt.w	c90c <__gethex+0x378>
    c72e:	2700      	movs	r7, #0
    c730:	f8da 3008 	ldr.w	r3, [sl, #8]
    c734:	454b      	cmp	r3, r9
    c736:	f2c0 8151 	blt.w	c9dc <__gethex+0x448>
    c73a:	f8da 3004 	ldr.w	r3, [sl, #4]
    c73e:	454b      	cmp	r3, r9
    c740:	dd4a      	ble.n	c7d8 <__gethex+0x244>
    c742:	eba3 0909 	sub.w	r9, r3, r9
    c746:	454c      	cmp	r4, r9
    c748:	f300 8082 	bgt.w	c850 <__gethex+0x2bc>
    c74c:	f8da 200c 	ldr.w	r2, [sl, #12]
    c750:	2a02      	cmp	r2, #2
    c752:	f000 8165 	beq.w	ca20 <__gethex+0x48c>
    c756:	2a03      	cmp	r2, #3
    c758:	f000 8181 	beq.w	ca5e <__gethex+0x4ca>
    c75c:	2a01      	cmp	r2, #1
    c75e:	f000 816f 	beq.w	ca40 <__gethex+0x4ac>
    c762:	ee18 0a10 	vmov	r0, s16
    c766:	4659      	mov	r1, fp
    c768:	f000 fb0e 	bl	cd88 <_Bfree>
    c76c:	2550      	movs	r5, #80	; 0x50
    c76e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c770:	2300      	movs	r3, #0
    c772:	4628      	mov	r0, r5
    c774:	6013      	str	r3, [r2, #0]
    c776:	b005      	add	sp, #20
    c778:	ecbd 8b02 	vpop	{d8}
    c77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c780:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c784:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    c788:	f1a2 0110 	sub.w	r1, r2, #16
    c78c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c790:	f818 2002 	ldrb.w	r2, [r8, r2]
    c794:	2a00      	cmp	r2, #0
    c796:	d0a4      	beq.n	c6e2 <__gethex+0x14e>
    c798:	2a19      	cmp	r2, #25
    c79a:	ddf1      	ble.n	c780 <__gethex+0x1ec>
    c79c:	e7a1      	b.n	c6e2 <__gethex+0x14e>
    c79e:	4949      	ldr	r1, [pc, #292]	; (c8c4 <__gethex+0x330>)
    c7a0:	9301      	str	r3, [sp, #4]
    c7a2:	2201      	movs	r2, #1
    c7a4:	4620      	mov	r0, r4
    c7a6:	f7ff f947 	bl	ba38 <strncmp>
    c7aa:	9b01      	ldr	r3, [sp, #4]
    c7ac:	2800      	cmp	r0, #0
    c7ae:	d16d      	bne.n	c88c <__gethex+0x2f8>
    c7b0:	7861      	ldrb	r1, [r4, #1]
    c7b2:	f818 2001 	ldrb.w	r2, [r8, r1]
    c7b6:	1c65      	adds	r5, r4, #1
    c7b8:	2a00      	cmp	r2, #0
    c7ba:	d069      	beq.n	c890 <__gethex+0x2fc>
    c7bc:	2930      	cmp	r1, #48	; 0x30
    c7be:	462c      	mov	r4, r5
    c7c0:	d105      	bne.n	c7ce <__gethex+0x23a>
    c7c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    c7c6:	2b30      	cmp	r3, #48	; 0x30
    c7c8:	d0fb      	beq.n	c7c2 <__gethex+0x22e>
    c7ca:	f818 2003 	ldrb.w	r2, [r8, r3]
    c7ce:	fab2 f782 	clz	r7, r2
    c7d2:	097f      	lsrs	r7, r7, #5
    c7d4:	2301      	movs	r3, #1
    c7d6:	e702      	b.n	c5de <__gethex+0x4a>
    c7d8:	2501      	movs	r5, #1
    c7da:	b157      	cbz	r7, c7f2 <__gethex+0x25e>
    c7dc:	f8da 300c 	ldr.w	r3, [sl, #12]
    c7e0:	2b02      	cmp	r3, #2
    c7e2:	d05d      	beq.n	c8a0 <__gethex+0x30c>
    c7e4:	2b03      	cmp	r3, #3
    c7e6:	d05f      	beq.n	c8a8 <__gethex+0x314>
    c7e8:	2b01      	cmp	r3, #1
    c7ea:	f000 8084 	beq.w	c8f6 <__gethex+0x362>
    c7ee:	f045 0510 	orr.w	r5, r5, #16
    c7f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c7f4:	f8c3 b000 	str.w	fp, [r3]
    c7f8:	9b02      	ldr	r3, [sp, #8]
    c7fa:	4628      	mov	r0, r5
    c7fc:	f8c3 9000 	str.w	r9, [r3]
    c800:	b005      	add	sp, #20
    c802:	ecbd 8b02 	vpop	{d8}
    c806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c80a:	462e      	mov	r6, r5
    c80c:	e702      	b.n	c614 <__gethex+0x80>
    c80e:	2001      	movs	r0, #1
    c810:	78aa      	ldrb	r2, [r5, #2]
    c812:	1cae      	adds	r6, r5, #2
    c814:	e758      	b.n	c6c8 <__gethex+0x134>
    c816:	1b06      	subs	r6, r0, r4
    c818:	4631      	mov	r1, r6
    c81a:	4658      	mov	r0, fp
    c81c:	f000 ff96 	bl	d74c <__any_on>
    c820:	4607      	mov	r7, r0
    c822:	b178      	cbz	r0, c844 <__gethex+0x2b0>
    c824:	1e72      	subs	r2, r6, #1
    c826:	1153      	asrs	r3, r2, #5
    c828:	9901      	ldr	r1, [sp, #4]
    c82a:	2701      	movs	r7, #1
    c82c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    c830:	f002 031f 	and.w	r3, r2, #31
    c834:	fa07 f303 	lsl.w	r3, r7, r3
    c838:	420b      	tst	r3, r1
    c83a:	d003      	beq.n	c844 <__gethex+0x2b0>
    c83c:	42ba      	cmp	r2, r7
    c83e:	f300 80e2 	bgt.w	ca06 <__gethex+0x472>
    c842:	2702      	movs	r7, #2
    c844:	4631      	mov	r1, r6
    c846:	4658      	mov	r0, fp
    c848:	44b1      	add	r9, r6
    c84a:	f7ff fe51 	bl	c4f0 <rshift>
    c84e:	e76f      	b.n	c730 <__gethex+0x19c>
    c850:	f109 35ff 	add.w	r5, r9, #4294967295
    c854:	2f00      	cmp	r7, #0
    c856:	f040 80ce 	bne.w	c9f6 <__gethex+0x462>
    c85a:	2d00      	cmp	r5, #0
    c85c:	f040 80cd 	bne.w	c9fa <__gethex+0x466>
    c860:	116b      	asrs	r3, r5, #5
    c862:	9a01      	ldr	r2, [sp, #4]
    c864:	f005 051f 	and.w	r5, r5, #31
    c868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c86c:	2301      	movs	r3, #1
    c86e:	40ab      	lsls	r3, r5
    c870:	4213      	tst	r3, r2
    c872:	4649      	mov	r1, r9
    c874:	4658      	mov	r0, fp
    c876:	bf18      	it	ne
    c878:	f047 0702 	orrne.w	r7, r7, #2
    c87c:	eba4 0409 	sub.w	r4, r4, r9
    c880:	f7ff fe36 	bl	c4f0 <rshift>
    c884:	2502      	movs	r5, #2
    c886:	f8da 9004 	ldr.w	r9, [sl, #4]
    c88a:	e7a6      	b.n	c7da <__gethex+0x246>
    c88c:	7821      	ldrb	r1, [r4, #0]
    c88e:	4625      	mov	r5, r4
    c890:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    c894:	2950      	cmp	r1, #80	; 0x50
    c896:	f000 80bf 	beq.w	ca18 <__gethex+0x484>
    c89a:	f8cb 5000 	str.w	r5, [fp]
    c89e:	e727      	b.n	c6f0 <__gethex+0x15c>
    c8a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c8a2:	f1c3 0301 	rsb	r3, r3, #1
    c8a6:	9311      	str	r3, [sp, #68]	; 0x44
    c8a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c8aa:	2b00      	cmp	r3, #0
    c8ac:	d09f      	beq.n	c7ee <__gethex+0x25a>
    c8ae:	f8db 7010 	ldr.w	r7, [fp, #16]
    c8b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    c8b6:	00ba      	lsls	r2, r7, #2
    c8b8:	4643      	mov	r3, r8
    c8ba:	9201      	str	r2, [sp, #4]
    c8bc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    c8c0:	2100      	movs	r1, #0
    c8c2:	e007      	b.n	c8d4 <__gethex+0x340>
    c8c4:	20007d34 	.word	0x20007d34
    c8c8:	20000940 	.word	0x20000940
    c8cc:	4298      	cmp	r0, r3
    c8ce:	f843 1c04 	str.w	r1, [r3, #-4]
    c8d2:	d93f      	bls.n	c954 <__gethex+0x3c0>
    c8d4:	461e      	mov	r6, r3
    c8d6:	f853 2b04 	ldr.w	r2, [r3], #4
    c8da:	f1b2 3fff 	cmp.w	r2, #4294967295
    c8de:	d0f5      	beq.n	c8cc <__gethex+0x338>
    c8e0:	3201      	adds	r2, #1
    c8e2:	2d02      	cmp	r5, #2
    c8e4:	6032      	str	r2, [r6, #0]
    c8e6:	f000 80bf 	beq.w	ca68 <__gethex+0x4d4>
    c8ea:	f014 041f 	ands.w	r4, r4, #31
    c8ee:	f040 80e7 	bne.w	cac0 <__gethex+0x52c>
    c8f2:	2521      	movs	r5, #33	; 0x21
    c8f4:	e77d      	b.n	c7f2 <__gethex+0x25e>
    c8f6:	07ba      	lsls	r2, r7, #30
    c8f8:	f57f af79 	bpl.w	c7ee <__gethex+0x25a>
    c8fc:	9b01      	ldr	r3, [sp, #4]
    c8fe:	681b      	ldr	r3, [r3, #0]
    c900:	431f      	orrs	r7, r3
    c902:	07fb      	lsls	r3, r7, #31
    c904:	d4d3      	bmi.n	c8ae <__gethex+0x31a>
    c906:	e772      	b.n	c7ee <__gethex+0x25a>
    c908:	2000      	movs	r0, #0
    c90a:	e781      	b.n	c810 <__gethex+0x27c>
    c90c:	1a22      	subs	r2, r4, r0
    c90e:	4659      	mov	r1, fp
    c910:	ee18 0a10 	vmov	r0, s16
    c914:	eba9 0902 	sub.w	r9, r9, r2
    c918:	f000 fc76 	bl	d208 <__lshift>
    c91c:	f100 0314 	add.w	r3, r0, #20
    c920:	4683      	mov	fp, r0
    c922:	9301      	str	r3, [sp, #4]
    c924:	2700      	movs	r7, #0
    c926:	e703      	b.n	c730 <__gethex+0x19c>
    c928:	7872      	ldrb	r2, [r6, #1]
    c92a:	f818 0002 	ldrb.w	r0, [r8, r2]
    c92e:	1c71      	adds	r1, r6, #1
    c930:	2800      	cmp	r0, #0
    c932:	f000 80a0 	beq.w	ca76 <__gethex+0x4e2>
    c936:	460d      	mov	r5, r1
    c938:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    c93c:	f818 0002 	ldrb.w	r0, [r8, r2]
    c940:	2800      	cmp	r0, #0
    c942:	d1f8      	bne.n	c936 <__gethex+0x3a2>
    c944:	1b75      	subs	r5, r6, r5
    c946:	ea4f 0985 	mov.w	r9, r5, lsl #2
    c94a:	460e      	mov	r6, r1
    c94c:	e65d      	b.n	c60a <__gethex+0x76>
    c94e:	3402      	adds	r4, #2
    c950:	2300      	movs	r3, #0
    c952:	e638      	b.n	c5c6 <__gethex+0x32>
    c954:	f8db 3008 	ldr.w	r3, [fp, #8]
    c958:	429f      	cmp	r7, r3
    c95a:	f280 808e 	bge.w	ca7a <__gethex+0x4e6>
    c95e:	463b      	mov	r3, r7
    c960:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    c964:	2101      	movs	r1, #1
    c966:	3301      	adds	r3, #1
    c968:	2d02      	cmp	r5, #2
    c96a:	f8cb 3010 	str.w	r3, [fp, #16]
    c96e:	6151      	str	r1, [r2, #20]
    c970:	d07a      	beq.n	ca68 <__gethex+0x4d4>
    c972:	429f      	cmp	r7, r3
    c974:	dab9      	bge.n	c8ea <__gethex+0x356>
    c976:	2b00      	cmp	r3, #0
    c978:	f340 809b 	ble.w	cab2 <__gethex+0x51e>
    c97c:	f8db 2014 	ldr.w	r2, [fp, #20]
    c980:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    c984:	f10b 0018 	add.w	r0, fp, #24
    c988:	4283      	cmp	r3, r0
    c98a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    c98e:	f240 80b1 	bls.w	caf4 <__gethex+0x560>
    c992:	4644      	mov	r4, r8
    c994:	6801      	ldr	r1, [r0, #0]
    c996:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c99a:	f844 2b04 	str.w	r2, [r4], #4
    c99e:	f850 2b04 	ldr.w	r2, [r0], #4
    c9a2:	4283      	cmp	r3, r0
    c9a4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    c9a8:	d8f4      	bhi.n	c994 <__gethex+0x400>
    c9aa:	eba3 030b 	sub.w	r3, r3, fp
    c9ae:	3b19      	subs	r3, #25
    c9b0:	089b      	lsrs	r3, r3, #2
    c9b2:	3301      	adds	r3, #1
    c9b4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    c9b8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    c9bc:	2a00      	cmp	r2, #0
    c9be:	f040 809d 	bne.w	cafc <__gethex+0x568>
    c9c2:	eba3 0208 	sub.w	r2, r3, r8
    c9c6:	1092      	asrs	r2, r2, #2
    c9c8:	4543      	cmp	r3, r8
    c9ca:	f8cb 2010 	str.w	r2, [fp, #16]
    c9ce:	d073      	beq.n	cab8 <__gethex+0x524>
    c9d0:	f8da 3008 	ldr.w	r3, [sl, #8]
    c9d4:	f109 0901 	add.w	r9, r9, #1
    c9d8:	454b      	cmp	r3, r9
    c9da:	da8a      	bge.n	c8f2 <__gethex+0x35e>
    c9dc:	ee18 0a10 	vmov	r0, s16
    c9e0:	4659      	mov	r1, fp
    c9e2:	f000 f9d1 	bl	cd88 <_Bfree>
    c9e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c9e8:	2300      	movs	r3, #0
    c9ea:	6013      	str	r3, [r2, #0]
    c9ec:	25a3      	movs	r5, #163	; 0xa3
    c9ee:	e683      	b.n	c6f8 <__gethex+0x164>
    c9f0:	9e01      	ldr	r6, [sp, #4]
    c9f2:	2300      	movs	r3, #0
    c9f4:	e689      	b.n	c70a <__gethex+0x176>
    c9f6:	2701      	movs	r7, #1
    c9f8:	e732      	b.n	c860 <__gethex+0x2cc>
    c9fa:	4629      	mov	r1, r5
    c9fc:	4658      	mov	r0, fp
    c9fe:	f000 fea5 	bl	d74c <__any_on>
    ca02:	4607      	mov	r7, r0
    ca04:	e72c      	b.n	c860 <__gethex+0x2cc>
    ca06:	1eb1      	subs	r1, r6, #2
    ca08:	4658      	mov	r0, fp
    ca0a:	f000 fe9f 	bl	d74c <__any_on>
    ca0e:	2800      	cmp	r0, #0
    ca10:	f43f af17 	beq.w	c842 <__gethex+0x2ae>
    ca14:	2703      	movs	r7, #3
    ca16:	e715      	b.n	c844 <__gethex+0x2b0>
    ca18:	f04f 0900 	mov.w	r9, #0
    ca1c:	2701      	movs	r7, #1
    ca1e:	e64a      	b.n	c6b6 <__gethex+0x122>
    ca20:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ca22:	2a00      	cmp	r2, #0
    ca24:	f47f ae9d 	bne.w	c762 <__gethex+0x1ce>
    ca28:	9902      	ldr	r1, [sp, #8]
    ca2a:	600b      	str	r3, [r1, #0]
    ca2c:	9b01      	ldr	r3, [sp, #4]
    ca2e:	2201      	movs	r2, #1
    ca30:	f8cb 2010 	str.w	r2, [fp, #16]
    ca34:	601a      	str	r2, [r3, #0]
    ca36:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ca38:	2562      	movs	r5, #98	; 0x62
    ca3a:	f8c3 b000 	str.w	fp, [r3]
    ca3e:	e65b      	b.n	c6f8 <__gethex+0x164>
    ca40:	454c      	cmp	r4, r9
    ca42:	f47f ae8e 	bne.w	c762 <__gethex+0x1ce>
    ca46:	2c01      	cmp	r4, #1
    ca48:	d0ee      	beq.n	ca28 <__gethex+0x494>
    ca4a:	1e61      	subs	r1, r4, #1
    ca4c:	4658      	mov	r0, fp
    ca4e:	f000 fe7d 	bl	d74c <__any_on>
    ca52:	2800      	cmp	r0, #0
    ca54:	f43f ae85 	beq.w	c762 <__gethex+0x1ce>
    ca58:	f8da 3004 	ldr.w	r3, [sl, #4]
    ca5c:	e7e4      	b.n	ca28 <__gethex+0x494>
    ca5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ca60:	2a00      	cmp	r2, #0
    ca62:	f43f ae7e 	beq.w	c762 <__gethex+0x1ce>
    ca66:	e7df      	b.n	ca28 <__gethex+0x494>
    ca68:	f8da 3000 	ldr.w	r3, [sl]
    ca6c:	3b01      	subs	r3, #1
    ca6e:	42a3      	cmp	r3, r4
    ca70:	d034      	beq.n	cadc <__gethex+0x548>
    ca72:	2522      	movs	r5, #34	; 0x22
    ca74:	e6bd      	b.n	c7f2 <__gethex+0x25e>
    ca76:	460e      	mov	r6, r1
    ca78:	e5c7      	b.n	c60a <__gethex+0x76>
    ca7a:	f8db 1004 	ldr.w	r1, [fp, #4]
    ca7e:	ee18 0a10 	vmov	r0, s16
    ca82:	3101      	adds	r1, #1
    ca84:	f000 f95a 	bl	cd3c <_Balloc>
    ca88:	4606      	mov	r6, r0
    ca8a:	b3c8      	cbz	r0, cb00 <__gethex+0x56c>
    ca8c:	f8db 3010 	ldr.w	r3, [fp, #16]
    ca90:	3302      	adds	r3, #2
    ca92:	009a      	lsls	r2, r3, #2
    ca94:	f10b 010c 	add.w	r1, fp, #12
    ca98:	300c      	adds	r0, #12
    ca9a:	f7fb faaf 	bl	7ffc <memcpy>
    ca9e:	4659      	mov	r1, fp
    caa0:	ee18 0a10 	vmov	r0, s16
    caa4:	f000 f970 	bl	cd88 <_Bfree>
    caa8:	f106 0814 	add.w	r8, r6, #20
    caac:	6933      	ldr	r3, [r6, #16]
    caae:	46b3      	mov	fp, r6
    cab0:	e756      	b.n	c960 <__gethex+0x3cc>
    cab2:	2300      	movs	r3, #0
    cab4:	f8cb 3010 	str.w	r3, [fp, #16]
    cab8:	2300      	movs	r3, #0
    caba:	f8cb 3014 	str.w	r3, [fp, #20]
    cabe:	e787      	b.n	c9d0 <__gethex+0x43c>
    cac0:	9b01      	ldr	r3, [sp, #4]
    cac2:	4443      	add	r3, r8
    cac4:	f1c4 0420 	rsb	r4, r4, #32
    cac8:	f853 0c04 	ldr.w	r0, [r3, #-4]
    cacc:	f000 fa10 	bl	cef0 <__hi0bits>
    cad0:	42a0      	cmp	r0, r4
    cad2:	f6bf af0e 	bge.w	c8f2 <__gethex+0x35e>
    cad6:	f8db 3010 	ldr.w	r3, [fp, #16]
    cada:	e74c      	b.n	c976 <__gethex+0x3e2>
    cadc:	1163      	asrs	r3, r4, #5
    cade:	f004 041f 	and.w	r4, r4, #31
    cae2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    cae6:	2301      	movs	r3, #1
    cae8:	40a3      	lsls	r3, r4
    caea:	4213      	tst	r3, r2
    caec:	bf0c      	ite	eq
    caee:	2522      	moveq	r5, #34	; 0x22
    caf0:	2521      	movne	r5, #33	; 0x21
    caf2:	e67e      	b.n	c7f2 <__gethex+0x25e>
    caf4:	f8c8 2000 	str.w	r2, [r8]
    caf8:	4643      	mov	r3, r8
    cafa:	b16a      	cbz	r2, cb18 <__gethex+0x584>
    cafc:	3304      	adds	r3, #4
    cafe:	e760      	b.n	c9c2 <__gethex+0x42e>
    cb00:	4b07      	ldr	r3, [pc, #28]	; (cb20 <__gethex+0x58c>)
    cb02:	4808      	ldr	r0, [pc, #32]	; (cb24 <__gethex+0x590>)
    cb04:	4632      	mov	r2, r6
    cb06:	2184      	movs	r1, #132	; 0x84
    cb08:	f004 fa0a 	bl	10f20 <__assert_func>
    cb0c:	4b04      	ldr	r3, [pc, #16]	; (cb20 <__gethex+0x58c>)
    cb0e:	4805      	ldr	r0, [pc, #20]	; (cb24 <__gethex+0x590>)
    cb10:	465a      	mov	r2, fp
    cb12:	21e4      	movs	r1, #228	; 0xe4
    cb14:	f004 fa04 	bl	10f20 <__assert_func>
    cb18:	f8cb 2010 	str.w	r2, [fp, #16]
    cb1c:	e7cc      	b.n	cab8 <__gethex+0x524>
    cb1e:	bf00      	nop
    cb20:	200008c8 	.word	0x200008c8
    cb24:	200008dc 	.word	0x200008dc

0000cb28 <__match>:
    cb28:	b410      	push	{r4}
    cb2a:	6804      	ldr	r4, [r0, #0]
    cb2c:	e009      	b.n	cb42 <__match+0x1a>
    cb2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    cb32:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    cb36:	f1bc 0f19 	cmp.w	ip, #25
    cb3a:	bf98      	it	ls
    cb3c:	3320      	addls	r3, #32
    cb3e:	4293      	cmp	r3, r2
    cb40:	d109      	bne.n	cb56 <__match+0x2e>
    cb42:	f811 2b01 	ldrb.w	r2, [r1], #1
    cb46:	2a00      	cmp	r2, #0
    cb48:	d1f1      	bne.n	cb2e <__match+0x6>
    cb4a:	3401      	adds	r4, #1
    cb4c:	6004      	str	r4, [r0, #0]
    cb4e:	2001      	movs	r0, #1
    cb50:	f85d 4b04 	ldr.w	r4, [sp], #4
    cb54:	4770      	bx	lr
    cb56:	2000      	movs	r0, #0
    cb58:	f85d 4b04 	ldr.w	r4, [sp], #4
    cb5c:	4770      	bx	lr
    cb5e:	bf00      	nop

0000cb60 <__hexnan>:
    cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb64:	6809      	ldr	r1, [r1, #0]
    cb66:	b085      	sub	sp, #20
    cb68:	114b      	asrs	r3, r1, #5
    cb6a:	f011 011f 	ands.w	r1, r1, #31
    cb6e:	9002      	str	r0, [sp, #8]
    cb70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cb74:	9103      	str	r1, [sp, #12]
    cb76:	f040 808f 	bne.w	cc98 <__hexnan+0x138>
    cb7a:	1f1d      	subs	r5, r3, #4
    cb7c:	9301      	str	r3, [sp, #4]
    cb7e:	9b02      	ldr	r3, [sp, #8]
    cb80:	9901      	ldr	r1, [sp, #4]
    cb82:	681c      	ldr	r4, [r3, #0]
    cb84:	2300      	movs	r3, #0
    cb86:	f841 3c04 	str.w	r3, [r1, #-4]
    cb8a:	7861      	ldrb	r1, [r4, #1]
    cb8c:	3401      	adds	r4, #1
    cb8e:	2900      	cmp	r1, #0
    cb90:	f000 8098 	beq.w	ccc4 <__hexnan+0x164>
    cb94:	f8df 9174 	ldr.w	r9, [pc, #372]	; cd0c <__hexnan+0x1ac>
    cb98:	46a8      	mov	r8, r5
    cb9a:	46ac      	mov	ip, r5
    cb9c:	469a      	mov	sl, r3
    cb9e:	461e      	mov	r6, r3
    cba0:	e00e      	b.n	cbc0 <__hexnan+0x60>
    cba2:	2920      	cmp	r1, #32
    cba4:	f200 808c 	bhi.w	ccc0 <__hexnan+0x160>
    cba8:	4556      	cmp	r6, sl
    cbaa:	dd06      	ble.n	cbba <__hexnan+0x5a>
    cbac:	45c4      	cmp	ip, r8
    cbae:	d201      	bcs.n	cbb4 <__hexnan+0x54>
    cbb0:	2b07      	cmp	r3, #7
    cbb2:	dd5b      	ble.n	cc6c <__hexnan+0x10c>
    cbb4:	4562      	cmp	r2, ip
    cbb6:	d351      	bcc.n	cc5c <__hexnan+0xfc>
    cbb8:	2308      	movs	r3, #8
    cbba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    cbbe:	b1a1      	cbz	r1, cbea <__hexnan+0x8a>
    cbc0:	f819 0001 	ldrb.w	r0, [r9, r1]
    cbc4:	2800      	cmp	r0, #0
    cbc6:	d0ec      	beq.n	cba2 <__hexnan+0x42>
    cbc8:	3301      	adds	r3, #1
    cbca:	2b08      	cmp	r3, #8
    cbcc:	f106 0601 	add.w	r6, r6, #1
    cbd0:	dc3a      	bgt.n	cc48 <__hexnan+0xe8>
    cbd2:	f8dc 1000 	ldr.w	r1, [ip]
    cbd6:	0109      	lsls	r1, r1, #4
    cbd8:	f000 000f 	and.w	r0, r0, #15
    cbdc:	4308      	orrs	r0, r1
    cbde:	f8cc 0000 	str.w	r0, [ip]
    cbe2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    cbe6:	2900      	cmp	r1, #0
    cbe8:	d1ea      	bne.n	cbc0 <__hexnan+0x60>
    cbea:	2e00      	cmp	r6, #0
    cbec:	d06a      	beq.n	ccc4 <__hexnan+0x164>
    cbee:	45c4      	cmp	ip, r8
    cbf0:	d201      	bcs.n	cbf6 <__hexnan+0x96>
    cbf2:	2b07      	cmp	r3, #7
    cbf4:	dd74      	ble.n	cce0 <__hexnan+0x180>
    cbf6:	4562      	cmp	r2, ip
    cbf8:	d252      	bcs.n	cca0 <__hexnan+0x140>
    cbfa:	1f11      	subs	r1, r2, #4
    cbfc:	4663      	mov	r3, ip
    cbfe:	f853 0b04 	ldr.w	r0, [r3], #4
    cc02:	f841 0f04 	str.w	r0, [r1, #4]!
    cc06:	42ab      	cmp	r3, r5
    cc08:	d9f9      	bls.n	cbfe <__hexnan+0x9e>
    cc0a:	eba5 030c 	sub.w	r3, r5, ip
    cc0e:	f023 0303 	bic.w	r3, r3, #3
    cc12:	1c69      	adds	r1, r5, #1
    cc14:	3304      	adds	r3, #4
    cc16:	f10c 0c01 	add.w	ip, ip, #1
    cc1a:	4561      	cmp	r1, ip
    cc1c:	bf38      	it	cc
    cc1e:	2304      	movcc	r3, #4
    cc20:	4413      	add	r3, r2
    cc22:	2100      	movs	r1, #0
    cc24:	f843 1b04 	str.w	r1, [r3], #4
    cc28:	42ab      	cmp	r3, r5
    cc2a:	d9fb      	bls.n	cc24 <__hexnan+0xc4>
    cc2c:	9b01      	ldr	r3, [sp, #4]
    cc2e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    cc32:	b92b      	cbnz	r3, cc40 <__hexnan+0xe0>
    cc34:	42aa      	cmp	r2, r5
    cc36:	d049      	beq.n	cccc <__hexnan+0x16c>
    cc38:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    cc3c:	2b00      	cmp	r3, #0
    cc3e:	d0f9      	beq.n	cc34 <__hexnan+0xd4>
    cc40:	2005      	movs	r0, #5
    cc42:	b005      	add	sp, #20
    cc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc48:	4562      	cmp	r2, ip
    cc4a:	d2b6      	bcs.n	cbba <__hexnan+0x5a>
    cc4c:	2300      	movs	r3, #0
    cc4e:	f84c 3c04 	str.w	r3, [ip, #-4]
    cc52:	4619      	mov	r1, r3
    cc54:	f1ac 0c04 	sub.w	ip, ip, #4
    cc58:	2301      	movs	r3, #1
    cc5a:	e7bd      	b.n	cbd8 <__hexnan+0x78>
    cc5c:	2300      	movs	r3, #0
    cc5e:	f1ac 0804 	sub.w	r8, ip, #4
    cc62:	f84c 3c04 	str.w	r3, [ip, #-4]
    cc66:	46b2      	mov	sl, r6
    cc68:	46c4      	mov	ip, r8
    cc6a:	e7a6      	b.n	cbba <__hexnan+0x5a>
    cc6c:	f1c3 0108 	rsb	r1, r3, #8
    cc70:	f8dc 3000 	ldr.w	r3, [ip]
    cc74:	0089      	lsls	r1, r1, #2
    cc76:	f1c1 0e20 	rsb	lr, r1, #32
    cc7a:	4660      	mov	r0, ip
    cc7c:	469b      	mov	fp, r3
    cc7e:	6847      	ldr	r7, [r0, #4]
    cc80:	fa07 f30e 	lsl.w	r3, r7, lr
    cc84:	ea43 030b 	orr.w	r3, r3, fp
    cc88:	fa27 fb01 	lsr.w	fp, r7, r1
    cc8c:	6003      	str	r3, [r0, #0]
    cc8e:	f840 bf04 	str.w	fp, [r0, #4]!
    cc92:	4540      	cmp	r0, r8
    cc94:	d3f3      	bcc.n	cc7e <__hexnan+0x11e>
    cc96:	e78d      	b.n	cbb4 <__hexnan+0x54>
    cc98:	1d19      	adds	r1, r3, #4
    cc9a:	9101      	str	r1, [sp, #4]
    cc9c:	461d      	mov	r5, r3
    cc9e:	e76e      	b.n	cb7e <__hexnan+0x1e>
    cca0:	9b03      	ldr	r3, [sp, #12]
    cca2:	2b00      	cmp	r3, #0
    cca4:	d0c2      	beq.n	cc2c <__hexnan+0xcc>
    cca6:	9b03      	ldr	r3, [sp, #12]
    cca8:	9801      	ldr	r0, [sp, #4]
    ccaa:	f1c3 0120 	rsb	r1, r3, #32
    ccae:	f04f 33ff 	mov.w	r3, #4294967295
    ccb2:	40cb      	lsrs	r3, r1
    ccb4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    ccb8:	400b      	ands	r3, r1
    ccba:	f840 3c04 	str.w	r3, [r0, #-4]
    ccbe:	e7b8      	b.n	cc32 <__hexnan+0xd2>
    ccc0:	2929      	cmp	r1, #41	; 0x29
    ccc2:	d009      	beq.n	ccd8 <__hexnan+0x178>
    ccc4:	2004      	movs	r0, #4
    ccc6:	b005      	add	sp, #20
    ccc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cccc:	2301      	movs	r3, #1
    ccce:	2005      	movs	r0, #5
    ccd0:	602b      	str	r3, [r5, #0]
    ccd2:	b005      	add	sp, #20
    ccd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ccd8:	9902      	ldr	r1, [sp, #8]
    ccda:	3401      	adds	r4, #1
    ccdc:	600c      	str	r4, [r1, #0]
    ccde:	e784      	b.n	cbea <__hexnan+0x8a>
    cce0:	f8dc 1000 	ldr.w	r1, [ip]
    cce4:	f1c3 0308 	rsb	r3, r3, #8
    cce8:	009b      	lsls	r3, r3, #2
    ccea:	f1c3 0720 	rsb	r7, r3, #32
    ccee:	4664      	mov	r4, ip
    ccf0:	4608      	mov	r0, r1
    ccf2:	6866      	ldr	r6, [r4, #4]
    ccf4:	fa06 f107 	lsl.w	r1, r6, r7
    ccf8:	4301      	orrs	r1, r0
    ccfa:	fa26 f003 	lsr.w	r0, r6, r3
    ccfe:	6021      	str	r1, [r4, #0]
    cd00:	f844 0f04 	str.w	r0, [r4, #4]!
    cd04:	4544      	cmp	r4, r8
    cd06:	d3f4      	bcc.n	ccf2 <__hexnan+0x192>
    cd08:	e775      	b.n	cbf6 <__hexnan+0x96>
    cd0a:	bf00      	nop
    cd0c:	20000940 	.word	0x20000940

0000cd10 <__ascii_mbtowc>:
    cd10:	b082      	sub	sp, #8
    cd12:	b149      	cbz	r1, cd28 <__ascii_mbtowc+0x18>
    cd14:	b15a      	cbz	r2, cd2e <__ascii_mbtowc+0x1e>
    cd16:	b16b      	cbz	r3, cd34 <__ascii_mbtowc+0x24>
    cd18:	7813      	ldrb	r3, [r2, #0]
    cd1a:	600b      	str	r3, [r1, #0]
    cd1c:	7812      	ldrb	r2, [r2, #0]
    cd1e:	1e10      	subs	r0, r2, #0
    cd20:	bf18      	it	ne
    cd22:	2001      	movne	r0, #1
    cd24:	b002      	add	sp, #8
    cd26:	4770      	bx	lr
    cd28:	a901      	add	r1, sp, #4
    cd2a:	2a00      	cmp	r2, #0
    cd2c:	d1f3      	bne.n	cd16 <__ascii_mbtowc+0x6>
    cd2e:	4610      	mov	r0, r2
    cd30:	b002      	add	sp, #8
    cd32:	4770      	bx	lr
    cd34:	f06f 0001 	mvn.w	r0, #1
    cd38:	e7f4      	b.n	cd24 <__ascii_mbtowc+0x14>
    cd3a:	bf00      	nop

0000cd3c <_Balloc>:
    cd3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cd3e:	b570      	push	{r4, r5, r6, lr}
    cd40:	4605      	mov	r5, r0
    cd42:	460c      	mov	r4, r1
    cd44:	b14b      	cbz	r3, cd5a <_Balloc+0x1e>
    cd46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    cd4a:	b180      	cbz	r0, cd6e <_Balloc+0x32>
    cd4c:	6802      	ldr	r2, [r0, #0]
    cd4e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    cd52:	2300      	movs	r3, #0
    cd54:	e9c0 3303 	strd	r3, r3, [r0, #12]
    cd58:	bd70      	pop	{r4, r5, r6, pc}
    cd5a:	2221      	movs	r2, #33	; 0x21
    cd5c:	2104      	movs	r1, #4
    cd5e:	f004 f8ff 	bl	10f60 <_calloc_r>
    cd62:	4603      	mov	r3, r0
    cd64:	6468      	str	r0, [r5, #68]	; 0x44
    cd66:	2800      	cmp	r0, #0
    cd68:	d1ed      	bne.n	cd46 <_Balloc+0xa>
    cd6a:	2000      	movs	r0, #0
    cd6c:	bd70      	pop	{r4, r5, r6, pc}
    cd6e:	2101      	movs	r1, #1
    cd70:	fa01 f604 	lsl.w	r6, r1, r4
    cd74:	1d72      	adds	r2, r6, #5
    cd76:	0092      	lsls	r2, r2, #2
    cd78:	4628      	mov	r0, r5
    cd7a:	f004 f8f1 	bl	10f60 <_calloc_r>
    cd7e:	2800      	cmp	r0, #0
    cd80:	d0f3      	beq.n	cd6a <_Balloc+0x2e>
    cd82:	e9c0 4601 	strd	r4, r6, [r0, #4]
    cd86:	e7e4      	b.n	cd52 <_Balloc+0x16>

0000cd88 <_Bfree>:
    cd88:	b131      	cbz	r1, cd98 <_Bfree+0x10>
    cd8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cd8c:	684a      	ldr	r2, [r1, #4]
    cd8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    cd92:	6008      	str	r0, [r1, #0]
    cd94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    cd98:	4770      	bx	lr
    cd9a:	bf00      	nop

0000cd9c <__multadd>:
    cd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cda0:	690e      	ldr	r6, [r1, #16]
    cda2:	4680      	mov	r8, r0
    cda4:	460f      	mov	r7, r1
    cda6:	461d      	mov	r5, r3
    cda8:	f101 0e14 	add.w	lr, r1, #20
    cdac:	2000      	movs	r0, #0
    cdae:	f8de 1000 	ldr.w	r1, [lr]
    cdb2:	b28c      	uxth	r4, r1
    cdb4:	fb02 5304 	mla	r3, r2, r4, r5
    cdb8:	0c09      	lsrs	r1, r1, #16
    cdba:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    cdbe:	fb02 cc01 	mla	ip, r2, r1, ip
    cdc2:	3001      	adds	r0, #1
    cdc4:	b29c      	uxth	r4, r3
    cdc6:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    cdca:	4286      	cmp	r6, r0
    cdcc:	f84e 4b04 	str.w	r4, [lr], #4
    cdd0:	ea4f 451c 	mov.w	r5, ip, lsr #16
    cdd4:	dceb      	bgt.n	cdae <__multadd+0x12>
    cdd6:	b13d      	cbz	r5, cde8 <__multadd+0x4c>
    cdd8:	68bb      	ldr	r3, [r7, #8]
    cdda:	42b3      	cmp	r3, r6
    cddc:	dd07      	ble.n	cdee <__multadd+0x52>
    cdde:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    cde2:	3601      	adds	r6, #1
    cde4:	615d      	str	r5, [r3, #20]
    cde6:	613e      	str	r6, [r7, #16]
    cde8:	4638      	mov	r0, r7
    cdea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cdee:	6879      	ldr	r1, [r7, #4]
    cdf0:	4640      	mov	r0, r8
    cdf2:	3101      	adds	r1, #1
    cdf4:	f7ff ffa2 	bl	cd3c <_Balloc>
    cdf8:	4604      	mov	r4, r0
    cdfa:	b1b0      	cbz	r0, ce2a <__multadd+0x8e>
    cdfc:	693a      	ldr	r2, [r7, #16]
    cdfe:	3202      	adds	r2, #2
    ce00:	f107 010c 	add.w	r1, r7, #12
    ce04:	0092      	lsls	r2, r2, #2
    ce06:	300c      	adds	r0, #12
    ce08:	f7fb f8f8 	bl	7ffc <memcpy>
    ce0c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    ce10:	687a      	ldr	r2, [r7, #4]
    ce12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ce16:	6039      	str	r1, [r7, #0]
    ce18:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ce1c:	4627      	mov	r7, r4
    ce1e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    ce22:	3601      	adds	r6, #1
    ce24:	615d      	str	r5, [r3, #20]
    ce26:	613e      	str	r6, [r7, #16]
    ce28:	e7de      	b.n	cde8 <__multadd+0x4c>
    ce2a:	4b03      	ldr	r3, [pc, #12]	; (ce38 <__multadd+0x9c>)
    ce2c:	4803      	ldr	r0, [pc, #12]	; (ce3c <__multadd+0xa0>)
    ce2e:	4622      	mov	r2, r4
    ce30:	21ba      	movs	r1, #186	; 0xba
    ce32:	f004 f875 	bl	10f20 <__assert_func>
    ce36:	bf00      	nop
    ce38:	200008c8 	.word	0x200008c8
    ce3c:	20000a40 	.word	0x20000a40

0000ce40 <__s2b>:
    ce40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ce44:	4617      	mov	r7, r2
    ce46:	4a27      	ldr	r2, [pc, #156]	; (cee4 <__s2b+0xa4>)
    ce48:	461e      	mov	r6, r3
    ce4a:	3308      	adds	r3, #8
    ce4c:	460c      	mov	r4, r1
    ce4e:	2e09      	cmp	r6, #9
    ce50:	fb82 1203 	smull	r1, r2, r2, r3
    ce54:	ea4f 73e3 	mov.w	r3, r3, asr #31
    ce58:	4605      	mov	r5, r0
    ce5a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    ce5e:	dd39      	ble.n	ced4 <__s2b+0x94>
    ce60:	f04f 0c01 	mov.w	ip, #1
    ce64:	2100      	movs	r1, #0
    ce66:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    ce6a:	4563      	cmp	r3, ip
    ce6c:	f101 0101 	add.w	r1, r1, #1
    ce70:	dcf9      	bgt.n	ce66 <__s2b+0x26>
    ce72:	4628      	mov	r0, r5
    ce74:	f7ff ff62 	bl	cd3c <_Balloc>
    ce78:	4601      	mov	r1, r0
    ce7a:	b368      	cbz	r0, ced8 <__s2b+0x98>
    ce7c:	9b08      	ldr	r3, [sp, #32]
    ce7e:	6143      	str	r3, [r0, #20]
    ce80:	2f09      	cmp	r7, #9
    ce82:	f04f 0301 	mov.w	r3, #1
    ce86:	6103      	str	r3, [r0, #16]
    ce88:	dc12      	bgt.n	ceb0 <__s2b+0x70>
    ce8a:	340a      	adds	r4, #10
    ce8c:	2709      	movs	r7, #9
    ce8e:	42be      	cmp	r6, r7
    ce90:	dd0b      	ble.n	ceaa <__s2b+0x6a>
    ce92:	1bf2      	subs	r2, r6, r7
    ce94:	18a6      	adds	r6, r4, r2
    ce96:	f814 3b01 	ldrb.w	r3, [r4], #1
    ce9a:	220a      	movs	r2, #10
    ce9c:	3b30      	subs	r3, #48	; 0x30
    ce9e:	4628      	mov	r0, r5
    cea0:	f7ff ff7c 	bl	cd9c <__multadd>
    cea4:	42a6      	cmp	r6, r4
    cea6:	4601      	mov	r1, r0
    cea8:	d1f5      	bne.n	ce96 <__s2b+0x56>
    ceaa:	4608      	mov	r0, r1
    ceac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ceb0:	f104 0909 	add.w	r9, r4, #9
    ceb4:	46c8      	mov	r8, r9
    ceb6:	443c      	add	r4, r7
    ceb8:	f818 3b01 	ldrb.w	r3, [r8], #1
    cebc:	220a      	movs	r2, #10
    cebe:	3b30      	subs	r3, #48	; 0x30
    cec0:	4628      	mov	r0, r5
    cec2:	f7ff ff6b 	bl	cd9c <__multadd>
    cec6:	45a0      	cmp	r8, r4
    cec8:	4601      	mov	r1, r0
    ceca:	d1f5      	bne.n	ceb8 <__s2b+0x78>
    cecc:	f1a7 0408 	sub.w	r4, r7, #8
    ced0:	444c      	add	r4, r9
    ced2:	e7dc      	b.n	ce8e <__s2b+0x4e>
    ced4:	2100      	movs	r1, #0
    ced6:	e7cc      	b.n	ce72 <__s2b+0x32>
    ced8:	460a      	mov	r2, r1
    ceda:	4b03      	ldr	r3, [pc, #12]	; (cee8 <__s2b+0xa8>)
    cedc:	4803      	ldr	r0, [pc, #12]	; (ceec <__s2b+0xac>)
    cede:	21d3      	movs	r1, #211	; 0xd3
    cee0:	f004 f81e 	bl	10f20 <__assert_func>
    cee4:	38e38e39 	.word	0x38e38e39
    cee8:	200008c8 	.word	0x200008c8
    ceec:	20000a40 	.word	0x20000a40

0000cef0 <__hi0bits>:
    cef0:	0c03      	lsrs	r3, r0, #16
    cef2:	041b      	lsls	r3, r3, #16
    cef4:	b9d3      	cbnz	r3, cf2c <__hi0bits+0x3c>
    cef6:	0400      	lsls	r0, r0, #16
    cef8:	2310      	movs	r3, #16
    cefa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    cefe:	bf04      	itt	eq
    cf00:	0200      	lsleq	r0, r0, #8
    cf02:	3308      	addeq	r3, #8
    cf04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    cf08:	bf04      	itt	eq
    cf0a:	0100      	lsleq	r0, r0, #4
    cf0c:	3304      	addeq	r3, #4
    cf0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    cf12:	bf04      	itt	eq
    cf14:	0080      	lsleq	r0, r0, #2
    cf16:	3302      	addeq	r3, #2
    cf18:	2800      	cmp	r0, #0
    cf1a:	db05      	blt.n	cf28 <__hi0bits+0x38>
    cf1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    cf20:	f103 0301 	add.w	r3, r3, #1
    cf24:	bf08      	it	eq
    cf26:	2320      	moveq	r3, #32
    cf28:	4618      	mov	r0, r3
    cf2a:	4770      	bx	lr
    cf2c:	2300      	movs	r3, #0
    cf2e:	e7e4      	b.n	cefa <__hi0bits+0xa>

0000cf30 <__lo0bits>:
    cf30:	6803      	ldr	r3, [r0, #0]
    cf32:	f013 0207 	ands.w	r2, r3, #7
    cf36:	d008      	beq.n	cf4a <__lo0bits+0x1a>
    cf38:	07d9      	lsls	r1, r3, #31
    cf3a:	d41f      	bmi.n	cf7c <__lo0bits+0x4c>
    cf3c:	079a      	lsls	r2, r3, #30
    cf3e:	d522      	bpl.n	cf86 <__lo0bits+0x56>
    cf40:	085b      	lsrs	r3, r3, #1
    cf42:	6003      	str	r3, [r0, #0]
    cf44:	2201      	movs	r2, #1
    cf46:	4610      	mov	r0, r2
    cf48:	4770      	bx	lr
    cf4a:	b299      	uxth	r1, r3
    cf4c:	b909      	cbnz	r1, cf52 <__lo0bits+0x22>
    cf4e:	0c1b      	lsrs	r3, r3, #16
    cf50:	2210      	movs	r2, #16
    cf52:	b2d9      	uxtb	r1, r3
    cf54:	b909      	cbnz	r1, cf5a <__lo0bits+0x2a>
    cf56:	3208      	adds	r2, #8
    cf58:	0a1b      	lsrs	r3, r3, #8
    cf5a:	0719      	lsls	r1, r3, #28
    cf5c:	bf04      	itt	eq
    cf5e:	091b      	lsreq	r3, r3, #4
    cf60:	3204      	addeq	r2, #4
    cf62:	0799      	lsls	r1, r3, #30
    cf64:	bf04      	itt	eq
    cf66:	089b      	lsreq	r3, r3, #2
    cf68:	3202      	addeq	r2, #2
    cf6a:	07d9      	lsls	r1, r3, #31
    cf6c:	d403      	bmi.n	cf76 <__lo0bits+0x46>
    cf6e:	085b      	lsrs	r3, r3, #1
    cf70:	f102 0201 	add.w	r2, r2, #1
    cf74:	d005      	beq.n	cf82 <__lo0bits+0x52>
    cf76:	6003      	str	r3, [r0, #0]
    cf78:	4610      	mov	r0, r2
    cf7a:	4770      	bx	lr
    cf7c:	2200      	movs	r2, #0
    cf7e:	4610      	mov	r0, r2
    cf80:	4770      	bx	lr
    cf82:	2220      	movs	r2, #32
    cf84:	e7df      	b.n	cf46 <__lo0bits+0x16>
    cf86:	089b      	lsrs	r3, r3, #2
    cf88:	2202      	movs	r2, #2
    cf8a:	6003      	str	r3, [r0, #0]
    cf8c:	4610      	mov	r0, r2
    cf8e:	4770      	bx	lr

0000cf90 <__i2b>:
    cf90:	b538      	push	{r3, r4, r5, lr}
    cf92:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cf94:	4604      	mov	r4, r0
    cf96:	460d      	mov	r5, r1
    cf98:	b14b      	cbz	r3, cfae <__i2b+0x1e>
    cf9a:	6858      	ldr	r0, [r3, #4]
    cf9c:	b1b0      	cbz	r0, cfcc <__i2b+0x3c>
    cf9e:	6802      	ldr	r2, [r0, #0]
    cfa0:	605a      	str	r2, [r3, #4]
    cfa2:	2200      	movs	r2, #0
    cfa4:	2301      	movs	r3, #1
    cfa6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    cfaa:	60c2      	str	r2, [r0, #12]
    cfac:	bd38      	pop	{r3, r4, r5, pc}
    cfae:	2221      	movs	r2, #33	; 0x21
    cfb0:	2104      	movs	r1, #4
    cfb2:	f003 ffd5 	bl	10f60 <_calloc_r>
    cfb6:	4603      	mov	r3, r0
    cfb8:	6460      	str	r0, [r4, #68]	; 0x44
    cfba:	2800      	cmp	r0, #0
    cfbc:	d1ed      	bne.n	cf9a <__i2b+0xa>
    cfbe:	4b09      	ldr	r3, [pc, #36]	; (cfe4 <__i2b+0x54>)
    cfc0:	4809      	ldr	r0, [pc, #36]	; (cfe8 <__i2b+0x58>)
    cfc2:	2200      	movs	r2, #0
    cfc4:	f240 1145 	movw	r1, #325	; 0x145
    cfc8:	f003 ffaa 	bl	10f20 <__assert_func>
    cfcc:	221c      	movs	r2, #28
    cfce:	2101      	movs	r1, #1
    cfd0:	4620      	mov	r0, r4
    cfd2:	f003 ffc5 	bl	10f60 <_calloc_r>
    cfd6:	2800      	cmp	r0, #0
    cfd8:	d0f1      	beq.n	cfbe <__i2b+0x2e>
    cfda:	2201      	movs	r2, #1
    cfdc:	2302      	movs	r3, #2
    cfde:	e9c0 2301 	strd	r2, r3, [r0, #4]
    cfe2:	e7de      	b.n	cfa2 <__i2b+0x12>
    cfe4:	200008c8 	.word	0x200008c8
    cfe8:	20000a40 	.word	0x20000a40

0000cfec <__multiply>:
    cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cff0:	690e      	ldr	r6, [r1, #16]
    cff2:	6915      	ldr	r5, [r2, #16]
    cff4:	42ae      	cmp	r6, r5
    cff6:	b085      	sub	sp, #20
    cff8:	4688      	mov	r8, r1
    cffa:	4614      	mov	r4, r2
    cffc:	db05      	blt.n	d00a <__multiply+0x1e>
    cffe:	462a      	mov	r2, r5
    d000:	4623      	mov	r3, r4
    d002:	4635      	mov	r5, r6
    d004:	460c      	mov	r4, r1
    d006:	4616      	mov	r6, r2
    d008:	4698      	mov	r8, r3
    d00a:	68a3      	ldr	r3, [r4, #8]
    d00c:	6861      	ldr	r1, [r4, #4]
    d00e:	19af      	adds	r7, r5, r6
    d010:	42bb      	cmp	r3, r7
    d012:	bfb8      	it	lt
    d014:	3101      	addlt	r1, #1
    d016:	f7ff fe91 	bl	cd3c <_Balloc>
    d01a:	9001      	str	r0, [sp, #4]
    d01c:	2800      	cmp	r0, #0
    d01e:	f000 8087 	beq.w	d130 <__multiply+0x144>
    d022:	9b01      	ldr	r3, [sp, #4]
    d024:	f103 0914 	add.w	r9, r3, #20
    d028:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    d02c:	45d1      	cmp	r9, sl
    d02e:	d205      	bcs.n	d03c <__multiply+0x50>
    d030:	464b      	mov	r3, r9
    d032:	2200      	movs	r2, #0
    d034:	f843 2b04 	str.w	r2, [r3], #4
    d038:	459a      	cmp	sl, r3
    d03a:	d8fb      	bhi.n	d034 <__multiply+0x48>
    d03c:	f108 0814 	add.w	r8, r8, #20
    d040:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    d044:	f104 0314 	add.w	r3, r4, #20
    d048:	45d8      	cmp	r8, fp
    d04a:	461a      	mov	r2, r3
    d04c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    d050:	d25f      	bcs.n	d112 <__multiply+0x126>
    d052:	1b2b      	subs	r3, r5, r4
    d054:	3b15      	subs	r3, #21
    d056:	f023 0303 	bic.w	r3, r3, #3
    d05a:	3304      	adds	r3, #4
    d05c:	3415      	adds	r4, #21
    d05e:	42a5      	cmp	r5, r4
    d060:	bf38      	it	cc
    d062:	2304      	movcc	r3, #4
    d064:	e9cd a702 	strd	sl, r7, [sp, #8]
    d068:	46ac      	mov	ip, r5
    d06a:	461f      	mov	r7, r3
    d06c:	4692      	mov	sl, r2
    d06e:	e005      	b.n	d07c <__multiply+0x90>
    d070:	0c09      	lsrs	r1, r1, #16
    d072:	d129      	bne.n	d0c8 <__multiply+0xdc>
    d074:	45c3      	cmp	fp, r8
    d076:	f109 0904 	add.w	r9, r9, #4
    d07a:	d948      	bls.n	d10e <__multiply+0x122>
    d07c:	f858 1b04 	ldr.w	r1, [r8], #4
    d080:	b28d      	uxth	r5, r1
    d082:	2d00      	cmp	r5, #0
    d084:	d0f4      	beq.n	d070 <__multiply+0x84>
    d086:	4656      	mov	r6, sl
    d088:	464c      	mov	r4, r9
    d08a:	2300      	movs	r3, #0
    d08c:	f856 1b04 	ldr.w	r1, [r6], #4
    d090:	6822      	ldr	r2, [r4, #0]
    d092:	fa1f fe81 	uxth.w	lr, r1
    d096:	b290      	uxth	r0, r2
    d098:	0c09      	lsrs	r1, r1, #16
    d09a:	fb05 000e 	mla	r0, r5, lr, r0
    d09e:	0c12      	lsrs	r2, r2, #16
    d0a0:	4403      	add	r3, r0
    d0a2:	fb05 2201 	mla	r2, r5, r1, r2
    d0a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d0aa:	b29b      	uxth	r3, r3
    d0ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    d0b0:	45b4      	cmp	ip, r6
    d0b2:	f844 3b04 	str.w	r3, [r4], #4
    d0b6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    d0ba:	d8e7      	bhi.n	d08c <__multiply+0xa0>
    d0bc:	f849 3007 	str.w	r3, [r9, r7]
    d0c0:	f858 1c04 	ldr.w	r1, [r8, #-4]
    d0c4:	0c09      	lsrs	r1, r1, #16
    d0c6:	d0d5      	beq.n	d074 <__multiply+0x88>
    d0c8:	f8d9 3000 	ldr.w	r3, [r9]
    d0cc:	4650      	mov	r0, sl
    d0ce:	461a      	mov	r2, r3
    d0d0:	464c      	mov	r4, r9
    d0d2:	2600      	movs	r6, #0
    d0d4:	8805      	ldrh	r5, [r0, #0]
    d0d6:	0c12      	lsrs	r2, r2, #16
    d0d8:	fb01 2205 	mla	r2, r1, r5, r2
    d0dc:	4416      	add	r6, r2
    d0de:	b29b      	uxth	r3, r3
    d0e0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    d0e4:	f844 3b04 	str.w	r3, [r4], #4
    d0e8:	f850 5b04 	ldr.w	r5, [r0], #4
    d0ec:	6822      	ldr	r2, [r4, #0]
    d0ee:	0c2d      	lsrs	r5, r5, #16
    d0f0:	b293      	uxth	r3, r2
    d0f2:	fb01 3305 	mla	r3, r1, r5, r3
    d0f6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    d0fa:	4584      	cmp	ip, r0
    d0fc:	ea4f 4613 	mov.w	r6, r3, lsr #16
    d100:	d8e8      	bhi.n	d0d4 <__multiply+0xe8>
    d102:	45c3      	cmp	fp, r8
    d104:	f849 3007 	str.w	r3, [r9, r7]
    d108:	f109 0904 	add.w	r9, r9, #4
    d10c:	d8b6      	bhi.n	d07c <__multiply+0x90>
    d10e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    d112:	2f00      	cmp	r7, #0
    d114:	dc02      	bgt.n	d11c <__multiply+0x130>
    d116:	e005      	b.n	d124 <__multiply+0x138>
    d118:	3f01      	subs	r7, #1
    d11a:	d003      	beq.n	d124 <__multiply+0x138>
    d11c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    d120:	2b00      	cmp	r3, #0
    d122:	d0f9      	beq.n	d118 <__multiply+0x12c>
    d124:	9b01      	ldr	r3, [sp, #4]
    d126:	4618      	mov	r0, r3
    d128:	611f      	str	r7, [r3, #16]
    d12a:	b005      	add	sp, #20
    d12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d130:	4b03      	ldr	r3, [pc, #12]	; (d140 <__multiply+0x154>)
    d132:	4804      	ldr	r0, [pc, #16]	; (d144 <__multiply+0x158>)
    d134:	9a01      	ldr	r2, [sp, #4]
    d136:	f44f 71b1 	mov.w	r1, #354	; 0x162
    d13a:	f003 fef1 	bl	10f20 <__assert_func>
    d13e:	bf00      	nop
    d140:	200008c8 	.word	0x200008c8
    d144:	20000a40 	.word	0x20000a40

0000d148 <__pow5mult>:
    d148:	f012 0303 	ands.w	r3, r2, #3
    d14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d150:	4614      	mov	r4, r2
    d152:	4606      	mov	r6, r0
    d154:	d132      	bne.n	d1bc <__pow5mult+0x74>
    d156:	460d      	mov	r5, r1
    d158:	10a4      	asrs	r4, r4, #2
    d15a:	d020      	beq.n	d19e <__pow5mult+0x56>
    d15c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    d160:	f1b8 0f00 	cmp.w	r8, #0
    d164:	d033      	beq.n	d1ce <__pow5mult+0x86>
    d166:	07e3      	lsls	r3, r4, #31
    d168:	f04f 0700 	mov.w	r7, #0
    d16c:	d407      	bmi.n	d17e <__pow5mult+0x36>
    d16e:	1064      	asrs	r4, r4, #1
    d170:	d015      	beq.n	d19e <__pow5mult+0x56>
    d172:	f8d8 0000 	ldr.w	r0, [r8]
    d176:	b1a8      	cbz	r0, d1a4 <__pow5mult+0x5c>
    d178:	4680      	mov	r8, r0
    d17a:	07e3      	lsls	r3, r4, #31
    d17c:	d5f7      	bpl.n	d16e <__pow5mult+0x26>
    d17e:	4642      	mov	r2, r8
    d180:	4629      	mov	r1, r5
    d182:	4630      	mov	r0, r6
    d184:	f7ff ff32 	bl	cfec <__multiply>
    d188:	b1b5      	cbz	r5, d1b8 <__pow5mult+0x70>
    d18a:	6869      	ldr	r1, [r5, #4]
    d18c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    d18e:	1064      	asrs	r4, r4, #1
    d190:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    d194:	602a      	str	r2, [r5, #0]
    d196:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    d19a:	4605      	mov	r5, r0
    d19c:	d1e9      	bne.n	d172 <__pow5mult+0x2a>
    d19e:	4628      	mov	r0, r5
    d1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d1a4:	4642      	mov	r2, r8
    d1a6:	4641      	mov	r1, r8
    d1a8:	4630      	mov	r0, r6
    d1aa:	f7ff ff1f 	bl	cfec <__multiply>
    d1ae:	f8c8 0000 	str.w	r0, [r8]
    d1b2:	6007      	str	r7, [r0, #0]
    d1b4:	4680      	mov	r8, r0
    d1b6:	e7e0      	b.n	d17a <__pow5mult+0x32>
    d1b8:	4605      	mov	r5, r0
    d1ba:	e7d8      	b.n	d16e <__pow5mult+0x26>
    d1bc:	3b01      	subs	r3, #1
    d1be:	4a0f      	ldr	r2, [pc, #60]	; (d1fc <__pow5mult+0xb4>)
    d1c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    d1c4:	2300      	movs	r3, #0
    d1c6:	f7ff fde9 	bl	cd9c <__multadd>
    d1ca:	4605      	mov	r5, r0
    d1cc:	e7c4      	b.n	d158 <__pow5mult+0x10>
    d1ce:	2101      	movs	r1, #1
    d1d0:	4630      	mov	r0, r6
    d1d2:	f7ff fdb3 	bl	cd3c <_Balloc>
    d1d6:	4680      	mov	r8, r0
    d1d8:	b140      	cbz	r0, d1ec <__pow5mult+0xa4>
    d1da:	2301      	movs	r3, #1
    d1dc:	f240 2271 	movw	r2, #625	; 0x271
    d1e0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    d1e4:	2300      	movs	r3, #0
    d1e6:	6430      	str	r0, [r6, #64]	; 0x40
    d1e8:	6003      	str	r3, [r0, #0]
    d1ea:	e7bc      	b.n	d166 <__pow5mult+0x1e>
    d1ec:	4b04      	ldr	r3, [pc, #16]	; (d200 <__pow5mult+0xb8>)
    d1ee:	4805      	ldr	r0, [pc, #20]	; (d204 <__pow5mult+0xbc>)
    d1f0:	4642      	mov	r2, r8
    d1f2:	f240 1145 	movw	r1, #325	; 0x145
    d1f6:	f003 fe93 	bl	10f20 <__assert_func>
    d1fa:	bf00      	nop
    d1fc:	20007a98 	.word	0x20007a98
    d200:	200008c8 	.word	0x200008c8
    d204:	20000a40 	.word	0x20000a40

0000d208 <__lshift>:
    d208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d20c:	460d      	mov	r5, r1
    d20e:	4614      	mov	r4, r2
    d210:	692f      	ldr	r7, [r5, #16]
    d212:	68ab      	ldr	r3, [r5, #8]
    d214:	6849      	ldr	r1, [r1, #4]
    d216:	eb07 1762 	add.w	r7, r7, r2, asr #5
    d21a:	1c7e      	adds	r6, r7, #1
    d21c:	429e      	cmp	r6, r3
    d21e:	4680      	mov	r8, r0
    d220:	ea4f 1962 	mov.w	r9, r2, asr #5
    d224:	dd04      	ble.n	d230 <__lshift+0x28>
    d226:	005b      	lsls	r3, r3, #1
    d228:	429e      	cmp	r6, r3
    d22a:	f101 0101 	add.w	r1, r1, #1
    d22e:	dcfa      	bgt.n	d226 <__lshift+0x1e>
    d230:	4640      	mov	r0, r8
    d232:	f7ff fd83 	bl	cd3c <_Balloc>
    d236:	4684      	mov	ip, r0
    d238:	2800      	cmp	r0, #0
    d23a:	d052      	beq.n	d2e2 <__lshift+0xda>
    d23c:	f1b9 0f00 	cmp.w	r9, #0
    d240:	f100 0214 	add.w	r2, r0, #20
    d244:	dd0e      	ble.n	d264 <__lshift+0x5c>
    d246:	f109 0105 	add.w	r1, r9, #5
    d24a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    d24e:	4613      	mov	r3, r2
    d250:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    d254:	2000      	movs	r0, #0
    d256:	f843 0b04 	str.w	r0, [r3], #4
    d25a:	428b      	cmp	r3, r1
    d25c:	d1fb      	bne.n	d256 <__lshift+0x4e>
    d25e:	f1ae 0314 	sub.w	r3, lr, #20
    d262:	441a      	add	r2, r3
    d264:	6929      	ldr	r1, [r5, #16]
    d266:	f105 0314 	add.w	r3, r5, #20
    d26a:	f014 0e1f 	ands.w	lr, r4, #31
    d26e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d272:	d02e      	beq.n	d2d2 <__lshift+0xca>
    d274:	f1ce 0920 	rsb	r9, lr, #32
    d278:	4610      	mov	r0, r2
    d27a:	f04f 0a00 	mov.w	sl, #0
    d27e:	681c      	ldr	r4, [r3, #0]
    d280:	fa04 f40e 	lsl.w	r4, r4, lr
    d284:	ea44 040a 	orr.w	r4, r4, sl
    d288:	f840 4b04 	str.w	r4, [r0], #4
    d28c:	f853 4b04 	ldr.w	r4, [r3], #4
    d290:	4299      	cmp	r1, r3
    d292:	fa24 fa09 	lsr.w	sl, r4, r9
    d296:	d8f2      	bhi.n	d27e <__lshift+0x76>
    d298:	1b4b      	subs	r3, r1, r5
    d29a:	3b15      	subs	r3, #21
    d29c:	f023 0303 	bic.w	r3, r3, #3
    d2a0:	3304      	adds	r3, #4
    d2a2:	f105 0015 	add.w	r0, r5, #21
    d2a6:	4281      	cmp	r1, r0
    d2a8:	bf38      	it	cc
    d2aa:	2304      	movcc	r3, #4
    d2ac:	f1ba 0f00 	cmp.w	sl, #0
    d2b0:	bf18      	it	ne
    d2b2:	4637      	movne	r7, r6
    d2b4:	f842 a003 	str.w	sl, [r2, r3]
    d2b8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    d2bc:	686a      	ldr	r2, [r5, #4]
    d2be:	f8cc 7010 	str.w	r7, [ip, #16]
    d2c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d2c6:	6029      	str	r1, [r5, #0]
    d2c8:	4660      	mov	r0, ip
    d2ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    d2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d2d2:	3a04      	subs	r2, #4
    d2d4:	f853 0b04 	ldr.w	r0, [r3], #4
    d2d8:	f842 0f04 	str.w	r0, [r2, #4]!
    d2dc:	4299      	cmp	r1, r3
    d2de:	d8f9      	bhi.n	d2d4 <__lshift+0xcc>
    d2e0:	e7ea      	b.n	d2b8 <__lshift+0xb0>
    d2e2:	4b03      	ldr	r3, [pc, #12]	; (d2f0 <__lshift+0xe8>)
    d2e4:	4803      	ldr	r0, [pc, #12]	; (d2f4 <__lshift+0xec>)
    d2e6:	4662      	mov	r2, ip
    d2e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    d2ec:	f003 fe18 	bl	10f20 <__assert_func>
    d2f0:	200008c8 	.word	0x200008c8
    d2f4:	20000a40 	.word	0x20000a40

0000d2f8 <__mcmp>:
    d2f8:	690b      	ldr	r3, [r1, #16]
    d2fa:	4684      	mov	ip, r0
    d2fc:	6900      	ldr	r0, [r0, #16]
    d2fe:	1ac0      	subs	r0, r0, r3
    d300:	d116      	bne.n	d330 <__mcmp+0x38>
    d302:	f10c 0c14 	add.w	ip, ip, #20
    d306:	3114      	adds	r1, #20
    d308:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    d30c:	b410      	push	{r4}
    d30e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    d312:	e001      	b.n	d318 <__mcmp+0x20>
    d314:	4594      	cmp	ip, r2
    d316:	d208      	bcs.n	d32a <__mcmp+0x32>
    d318:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d31c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d320:	428c      	cmp	r4, r1
    d322:	d0f7      	beq.n	d314 <__mcmp+0x1c>
    d324:	d205      	bcs.n	d332 <__mcmp+0x3a>
    d326:	f04f 30ff 	mov.w	r0, #4294967295
    d32a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d32e:	4770      	bx	lr
    d330:	4770      	bx	lr
    d332:	2001      	movs	r0, #1
    d334:	f85d 4b04 	ldr.w	r4, [sp], #4
    d338:	4770      	bx	lr
    d33a:	bf00      	nop

0000d33c <__mdiff>:
    d33c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d340:	690f      	ldr	r7, [r1, #16]
    d342:	6913      	ldr	r3, [r2, #16]
    d344:	1aff      	subs	r7, r7, r3
    d346:	2f00      	cmp	r7, #0
    d348:	460e      	mov	r6, r1
    d34a:	4690      	mov	r8, r2
    d34c:	d17f      	bne.n	d44e <__mdiff+0x112>
    d34e:	f101 0514 	add.w	r5, r1, #20
    d352:	3214      	adds	r2, #20
    d354:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    d358:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    d35c:	e001      	b.n	d362 <__mdiff+0x26>
    d35e:	429d      	cmp	r5, r3
    d360:	d278      	bcs.n	d454 <__mdiff+0x118>
    d362:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d366:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d36a:	42a1      	cmp	r1, r4
    d36c:	d0f7      	beq.n	d35e <__mdiff+0x22>
    d36e:	d369      	bcc.n	d444 <__mdiff+0x108>
    d370:	6871      	ldr	r1, [r6, #4]
    d372:	f7ff fce3 	bl	cd3c <_Balloc>
    d376:	4681      	mov	r9, r0
    d378:	2800      	cmp	r0, #0
    d37a:	d077      	beq.n	d46c <__mdiff+0x130>
    d37c:	6935      	ldr	r5, [r6, #16]
    d37e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    d382:	60c7      	str	r7, [r0, #12]
    d384:	f108 0e14 	add.w	lr, r8, #20
    d388:	f106 0014 	add.w	r0, r6, #20
    d38c:	f109 0a14 	add.w	sl, r9, #20
    d390:	f106 0110 	add.w	r1, r6, #16
    d394:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    d398:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    d39c:	4656      	mov	r6, sl
    d39e:	f04f 0c00 	mov.w	ip, #0
    d3a2:	f85e 4b04 	ldr.w	r4, [lr], #4
    d3a6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    d3aa:	b2a3      	uxth	r3, r4
    d3ac:	fa1c fc8b 	uxtah	ip, ip, fp
    d3b0:	ebac 0303 	sub.w	r3, ip, r3
    d3b4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    d3b8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    d3bc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    d3c0:	b29b      	uxth	r3, r3
    d3c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    d3c6:	4572      	cmp	r2, lr
    d3c8:	f846 3b04 	str.w	r3, [r6], #4
    d3cc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    d3d0:	d8e7      	bhi.n	d3a2 <__mdiff+0x66>
    d3d2:	eba2 0108 	sub.w	r1, r2, r8
    d3d6:	3915      	subs	r1, #21
    d3d8:	f108 0815 	add.w	r8, r8, #21
    d3dc:	4542      	cmp	r2, r8
    d3de:	f021 0403 	bic.w	r4, r1, #3
    d3e2:	f104 0404 	add.w	r4, r4, #4
    d3e6:	bf38      	it	cc
    d3e8:	2404      	movcc	r4, #4
    d3ea:	4420      	add	r0, r4
    d3ec:	f021 0203 	bic.w	r2, r1, #3
    d3f0:	bf38      	it	cc
    d3f2:	2200      	movcc	r2, #0
    d3f4:	4287      	cmp	r7, r0
    d3f6:	4452      	add	r2, sl
    d3f8:	4454      	add	r4, sl
    d3fa:	d918      	bls.n	d42e <__mdiff+0xf2>
    d3fc:	4626      	mov	r6, r4
    d3fe:	4601      	mov	r1, r0
    d400:	f851 3b04 	ldr.w	r3, [r1], #4
    d404:	fa1c fc83 	uxtah	ip, ip, r3
    d408:	ea4f 422c 	mov.w	r2, ip, asr #16
    d40c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d410:	fa1f fc8c 	uxth.w	ip, ip
    d414:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    d418:	428f      	cmp	r7, r1
    d41a:	f846 3b04 	str.w	r3, [r6], #4
    d41e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    d422:	d8ed      	bhi.n	d400 <__mdiff+0xc4>
    d424:	3f01      	subs	r7, #1
    d426:	1a3f      	subs	r7, r7, r0
    d428:	f027 0703 	bic.w	r7, r7, #3
    d42c:	19e2      	adds	r2, r4, r7
    d42e:	b923      	cbnz	r3, d43a <__mdiff+0xfe>
    d430:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    d434:	3d01      	subs	r5, #1
    d436:	2b00      	cmp	r3, #0
    d438:	d0fa      	beq.n	d430 <__mdiff+0xf4>
    d43a:	f8c9 5010 	str.w	r5, [r9, #16]
    d43e:	4648      	mov	r0, r9
    d440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d444:	4633      	mov	r3, r6
    d446:	2701      	movs	r7, #1
    d448:	4646      	mov	r6, r8
    d44a:	4698      	mov	r8, r3
    d44c:	e790      	b.n	d370 <__mdiff+0x34>
    d44e:	dbf9      	blt.n	d444 <__mdiff+0x108>
    d450:	2700      	movs	r7, #0
    d452:	e78d      	b.n	d370 <__mdiff+0x34>
    d454:	2100      	movs	r1, #0
    d456:	f7ff fc71 	bl	cd3c <_Balloc>
    d45a:	4681      	mov	r9, r0
    d45c:	b168      	cbz	r0, d47a <__mdiff+0x13e>
    d45e:	2201      	movs	r2, #1
    d460:	2300      	movs	r3, #0
    d462:	e9c9 2304 	strd	r2, r3, [r9, #16]
    d466:	4648      	mov	r0, r9
    d468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d46c:	4b06      	ldr	r3, [pc, #24]	; (d488 <__mdiff+0x14c>)
    d46e:	4807      	ldr	r0, [pc, #28]	; (d48c <__mdiff+0x150>)
    d470:	464a      	mov	r2, r9
    d472:	f240 2145 	movw	r1, #581	; 0x245
    d476:	f003 fd53 	bl	10f20 <__assert_func>
    d47a:	4b03      	ldr	r3, [pc, #12]	; (d488 <__mdiff+0x14c>)
    d47c:	4803      	ldr	r0, [pc, #12]	; (d48c <__mdiff+0x150>)
    d47e:	464a      	mov	r2, r9
    d480:	f240 2137 	movw	r1, #567	; 0x237
    d484:	f003 fd4c 	bl	10f20 <__assert_func>
    d488:	200008c8 	.word	0x200008c8
    d48c:	20000a40 	.word	0x20000a40

0000d490 <__ulp>:
    d490:	b082      	sub	sp, #8
    d492:	ed8d 0b00 	vstr	d0, [sp]
    d496:	4b16      	ldr	r3, [pc, #88]	; (d4f0 <__ulp+0x60>)
    d498:	9a01      	ldr	r2, [sp, #4]
    d49a:	4013      	ands	r3, r2
    d49c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    d4a0:	2b00      	cmp	r3, #0
    d4a2:	dd06      	ble.n	d4b2 <__ulp+0x22>
    d4a4:	2200      	movs	r2, #0
    d4a6:	4619      	mov	r1, r3
    d4a8:	4610      	mov	r0, r2
    d4aa:	ec41 0b10 	vmov	d0, r0, r1
    d4ae:	b002      	add	sp, #8
    d4b0:	4770      	bx	lr
    d4b2:	425b      	negs	r3, r3
    d4b4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    d4b8:	ea4f 5223 	mov.w	r2, r3, asr #20
    d4bc:	da09      	bge.n	d4d2 <__ulp+0x42>
    d4be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    d4c2:	4113      	asrs	r3, r2
    d4c4:	2200      	movs	r2, #0
    d4c6:	4619      	mov	r1, r3
    d4c8:	4610      	mov	r0, r2
    d4ca:	ec41 0b10 	vmov	d0, r0, r1
    d4ce:	b002      	add	sp, #8
    d4d0:	4770      	bx	lr
    d4d2:	f1a2 0314 	sub.w	r3, r2, #20
    d4d6:	2b1e      	cmp	r3, #30
    d4d8:	bfda      	itte	le
    d4da:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    d4de:	40da      	lsrle	r2, r3
    d4e0:	2201      	movgt	r2, #1
    d4e2:	2300      	movs	r3, #0
    d4e4:	4619      	mov	r1, r3
    d4e6:	4610      	mov	r0, r2
    d4e8:	ec41 0b10 	vmov	d0, r0, r1
    d4ec:	b002      	add	sp, #8
    d4ee:	4770      	bx	lr
    d4f0:	7ff00000 	.word	0x7ff00000

0000d4f4 <__b2d>:
    d4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4f6:	6904      	ldr	r4, [r0, #16]
    d4f8:	f100 0614 	add.w	r6, r0, #20
    d4fc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    d500:	1f27      	subs	r7, r4, #4
    d502:	f854 5c04 	ldr.w	r5, [r4, #-4]
    d506:	4628      	mov	r0, r5
    d508:	f7ff fcf2 	bl	cef0 <__hi0bits>
    d50c:	f1c0 0320 	rsb	r3, r0, #32
    d510:	280a      	cmp	r0, #10
    d512:	600b      	str	r3, [r1, #0]
    d514:	dd1b      	ble.n	d54e <__b2d+0x5a>
    d516:	42be      	cmp	r6, r7
    d518:	d20b      	bcs.n	d532 <__b2d+0x3e>
    d51a:	380b      	subs	r0, #11
    d51c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    d520:	d12e      	bne.n	d580 <__b2d+0x8c>
    d522:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    d526:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d52a:	460a      	mov	r2, r1
    d52c:	ec43 2b10 	vmov	d0, r2, r3
    d530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d532:	f1b0 010b 	subs.w	r1, r0, #11
    d536:	d0f4      	beq.n	d522 <__b2d+0x2e>
    d538:	fa05 f101 	lsl.w	r1, r5, r1
    d53c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d540:	2100      	movs	r1, #0
    d542:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d546:	460a      	mov	r2, r1
    d548:	ec43 2b10 	vmov	d0, r2, r3
    d54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d54e:	f1c0 0c0b 	rsb	ip, r0, #11
    d552:	fa25 f10c 	lsr.w	r1, r5, ip
    d556:	42be      	cmp	r6, r7
    d558:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d55c:	bf38      	it	cc
    d55e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    d562:	f100 0015 	add.w	r0, r0, #21
    d566:	bf34      	ite	cc
    d568:	fa21 f10c 	lsrcc.w	r1, r1, ip
    d56c:	2100      	movcs	r1, #0
    d56e:	fa05 f000 	lsl.w	r0, r5, r0
    d572:	4301      	orrs	r1, r0
    d574:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d578:	460a      	mov	r2, r1
    d57a:	ec43 2b10 	vmov	d0, r2, r3
    d57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d580:	f1c0 0c20 	rsb	ip, r0, #32
    d584:	4085      	lsls	r5, r0
    d586:	fa21 f30c 	lsr.w	r3, r1, ip
    d58a:	ea45 0703 	orr.w	r7, r5, r3
    d58e:	f1a4 0508 	sub.w	r5, r4, #8
    d592:	42ae      	cmp	r6, r5
    d594:	fa01 f100 	lsl.w	r1, r1, r0
    d598:	bf3c      	itt	cc
    d59a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    d59e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    d5a2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    d5a6:	bf38      	it	cc
    d5a8:	4301      	orrcc	r1, r0
    d5aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d5ae:	460a      	mov	r2, r1
    d5b0:	ec43 2b10 	vmov	d0, r2, r3
    d5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5b6:	bf00      	nop

0000d5b8 <__d2b>:
    d5b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d5bc:	4688      	mov	r8, r1
    d5be:	b083      	sub	sp, #12
    d5c0:	2101      	movs	r1, #1
    d5c2:	ec57 6b10 	vmov	r6, r7, d0
    d5c6:	4615      	mov	r5, r2
    d5c8:	f7ff fbb8 	bl	cd3c <_Balloc>
    d5cc:	4604      	mov	r4, r0
    d5ce:	2800      	cmp	r0, #0
    d5d0:	d051      	beq.n	d676 <__d2b+0xbe>
    d5d2:	f3c7 590a 	ubfx	r9, r7, #20, #11
    d5d6:	f3c7 0313 	ubfx	r3, r7, #0, #20
    d5da:	f1b9 0f00 	cmp.w	r9, #0
    d5de:	d001      	beq.n	d5e4 <__d2b+0x2c>
    d5e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d5e4:	2e00      	cmp	r6, #0
    d5e6:	9301      	str	r3, [sp, #4]
    d5e8:	d118      	bne.n	d61c <__d2b+0x64>
    d5ea:	a801      	add	r0, sp, #4
    d5ec:	f7ff fca0 	bl	cf30 <__lo0bits>
    d5f0:	9a01      	ldr	r2, [sp, #4]
    d5f2:	6162      	str	r2, [r4, #20]
    d5f4:	2201      	movs	r2, #1
    d5f6:	f100 0320 	add.w	r3, r0, #32
    d5fa:	6122      	str	r2, [r4, #16]
    d5fc:	f1b9 0f00 	cmp.w	r9, #0
    d600:	d025      	beq.n	d64e <__d2b+0x96>
    d602:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    d606:	eb09 0203 	add.w	r2, r9, r3
    d60a:	4620      	mov	r0, r4
    d60c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    d610:	f8c8 2000 	str.w	r2, [r8]
    d614:	602b      	str	r3, [r5, #0]
    d616:	b003      	add	sp, #12
    d618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d61c:	4668      	mov	r0, sp
    d61e:	9600      	str	r6, [sp, #0]
    d620:	f7ff fc86 	bl	cf30 <__lo0bits>
    d624:	4603      	mov	r3, r0
    d626:	b310      	cbz	r0, d66e <__d2b+0xb6>
    d628:	e9dd 0200 	ldrd	r0, r2, [sp]
    d62c:	f1c3 0120 	rsb	r1, r3, #32
    d630:	fa02 f101 	lsl.w	r1, r2, r1
    d634:	4301      	orrs	r1, r0
    d636:	40da      	lsrs	r2, r3
    d638:	6161      	str	r1, [r4, #20]
    d63a:	9201      	str	r2, [sp, #4]
    d63c:	2a00      	cmp	r2, #0
    d63e:	61a2      	str	r2, [r4, #24]
    d640:	bf14      	ite	ne
    d642:	2202      	movne	r2, #2
    d644:	2201      	moveq	r2, #1
    d646:	6122      	str	r2, [r4, #16]
    d648:	f1b9 0f00 	cmp.w	r9, #0
    d64c:	d1d9      	bne.n	d602 <__d2b+0x4a>
    d64e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    d652:	f8c8 3000 	str.w	r3, [r8]
    d656:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    d65a:	6918      	ldr	r0, [r3, #16]
    d65c:	f7ff fc48 	bl	cef0 <__hi0bits>
    d660:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    d664:	4620      	mov	r0, r4
    d666:	602b      	str	r3, [r5, #0]
    d668:	b003      	add	sp, #12
    d66a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d66e:	9a00      	ldr	r2, [sp, #0]
    d670:	6162      	str	r2, [r4, #20]
    d672:	9a01      	ldr	r2, [sp, #4]
    d674:	e7e2      	b.n	d63c <__d2b+0x84>
    d676:	4b03      	ldr	r3, [pc, #12]	; (d684 <__d2b+0xcc>)
    d678:	4803      	ldr	r0, [pc, #12]	; (d688 <__d2b+0xd0>)
    d67a:	4622      	mov	r2, r4
    d67c:	f240 310f 	movw	r1, #783	; 0x30f
    d680:	f003 fc4e 	bl	10f20 <__assert_func>
    d684:	200008c8 	.word	0x200008c8
    d688:	20000a40 	.word	0x20000a40

0000d68c <__ratio>:
    d68c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d68e:	b083      	sub	sp, #12
    d690:	460e      	mov	r6, r1
    d692:	4669      	mov	r1, sp
    d694:	4607      	mov	r7, r0
    d696:	f7ff ff2d 	bl	d4f4 <__b2d>
    d69a:	a901      	add	r1, sp, #4
    d69c:	4630      	mov	r0, r6
    d69e:	ec55 4b10 	vmov	r4, r5, d0
    d6a2:	eeb0 7b40 	vmov.f64	d7, d0
    d6a6:	f7ff ff25 	bl	d4f4 <__b2d>
    d6aa:	6933      	ldr	r3, [r6, #16]
    d6ac:	693a      	ldr	r2, [r7, #16]
    d6ae:	1ad2      	subs	r2, r2, r3
    d6b0:	e9dd 3100 	ldrd	r3, r1, [sp]
    d6b4:	1a5b      	subs	r3, r3, r1
    d6b6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    d6ba:	2b00      	cmp	r3, #0
    d6bc:	dd09      	ble.n	d6d2 <__ratio+0x46>
    d6be:	ee17 2a90 	vmov	r2, s15
    d6c2:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    d6c6:	ec45 4b17 	vmov	d7, r4, r5
    d6ca:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d6ce:	b003      	add	sp, #12
    d6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d6d2:	ee10 2a90 	vmov	r2, s1
    d6d6:	ec51 0b10 	vmov	r0, r1, d0
    d6da:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    d6de:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    d6e2:	ec41 0b10 	vmov	d0, r0, r1
    d6e6:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d6ea:	b003      	add	sp, #12
    d6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d6ee:	bf00      	nop

0000d6f0 <__copybits>:
    d6f0:	3901      	subs	r1, #1
    d6f2:	1149      	asrs	r1, r1, #5
    d6f4:	f101 0c01 	add.w	ip, r1, #1
    d6f8:	6911      	ldr	r1, [r2, #16]
    d6fa:	f102 0314 	add.w	r3, r2, #20
    d6fe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d702:	428b      	cmp	r3, r1
    d704:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    d708:	d217      	bcs.n	d73a <__copybits+0x4a>
    d70a:	b510      	push	{r4, lr}
    d70c:	f1a0 0e04 	sub.w	lr, r0, #4
    d710:	f853 4b04 	ldr.w	r4, [r3], #4
    d714:	f84e 4f04 	str.w	r4, [lr, #4]!
    d718:	4299      	cmp	r1, r3
    d71a:	d8f9      	bhi.n	d710 <__copybits+0x20>
    d71c:	1a8a      	subs	r2, r1, r2
    d71e:	f1a2 0315 	sub.w	r3, r2, #21
    d722:	f023 0303 	bic.w	r3, r3, #3
    d726:	3304      	adds	r3, #4
    d728:	4418      	add	r0, r3
    d72a:	4584      	cmp	ip, r0
    d72c:	d904      	bls.n	d738 <__copybits+0x48>
    d72e:	2300      	movs	r3, #0
    d730:	f840 3b04 	str.w	r3, [r0], #4
    d734:	4584      	cmp	ip, r0
    d736:	d8fb      	bhi.n	d730 <__copybits+0x40>
    d738:	bd10      	pop	{r4, pc}
    d73a:	4584      	cmp	ip, r0
    d73c:	d905      	bls.n	d74a <__copybits+0x5a>
    d73e:	2300      	movs	r3, #0
    d740:	f840 3b04 	str.w	r3, [r0], #4
    d744:	4584      	cmp	ip, r0
    d746:	d8fb      	bhi.n	d740 <__copybits+0x50>
    d748:	4770      	bx	lr
    d74a:	4770      	bx	lr

0000d74c <__any_on>:
    d74c:	6903      	ldr	r3, [r0, #16]
    d74e:	114a      	asrs	r2, r1, #5
    d750:	4293      	cmp	r3, r2
    d752:	f100 0014 	add.w	r0, r0, #20
    d756:	da09      	bge.n	d76c <__any_on+0x20>
    d758:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d75c:	e002      	b.n	d764 <__any_on+0x18>
    d75e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d762:	b9c2      	cbnz	r2, d796 <__any_on+0x4a>
    d764:	4283      	cmp	r3, r0
    d766:	d8fa      	bhi.n	d75e <__any_on+0x12>
    d768:	2000      	movs	r0, #0
    d76a:	4770      	bx	lr
    d76c:	dd10      	ble.n	d790 <__any_on+0x44>
    d76e:	f011 011f 	ands.w	r1, r1, #31
    d772:	d00d      	beq.n	d790 <__any_on+0x44>
    d774:	b410      	push	{r4}
    d776:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    d77a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d77e:	fa24 f201 	lsr.w	r2, r4, r1
    d782:	408a      	lsls	r2, r1
    d784:	4294      	cmp	r4, r2
    d786:	d00c      	beq.n	d7a2 <__any_on+0x56>
    d788:	2001      	movs	r0, #1
    d78a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d78e:	4770      	bx	lr
    d790:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d794:	e7e6      	b.n	d764 <__any_on+0x18>
    d796:	2001      	movs	r0, #1
    d798:	4770      	bx	lr
    d79a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d79e:	2a00      	cmp	r2, #0
    d7a0:	d1f2      	bne.n	d788 <__any_on+0x3c>
    d7a2:	4283      	cmp	r3, r0
    d7a4:	d8f9      	bhi.n	d79a <__any_on+0x4e>
    d7a6:	2000      	movs	r0, #0
    d7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    d7ac:	4770      	bx	lr
    d7ae:	bf00      	nop

0000d7b0 <__ascii_wctomb>:
    d7b0:	b149      	cbz	r1, d7c6 <__ascii_wctomb+0x16>
    d7b2:	2aff      	cmp	r2, #255	; 0xff
    d7b4:	d802      	bhi.n	d7bc <__ascii_wctomb+0xc>
    d7b6:	700a      	strb	r2, [r1, #0]
    d7b8:	2001      	movs	r0, #1
    d7ba:	4770      	bx	lr
    d7bc:	238a      	movs	r3, #138	; 0x8a
    d7be:	6003      	str	r3, [r0, #0]
    d7c0:	f04f 30ff 	mov.w	r0, #4294967295
    d7c4:	4770      	bx	lr
    d7c6:	4608      	mov	r0, r1
    d7c8:	4770      	bx	lr
    d7ca:	bf00      	nop
    d7cc:	0000      	movs	r0, r0
	...

0000d7d0 <_svfprintf_r>:
    d7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7d4:	ed2d 8b08 	vpush	{d8-d11}
    d7d8:	b0d1      	sub	sp, #324	; 0x144
    d7da:	460c      	mov	r4, r1
    d7dc:	ee0b 1a10 	vmov	s22, r1
    d7e0:	4690      	mov	r8, r2
    d7e2:	9308      	str	r3, [sp, #32]
    d7e4:	4683      	mov	fp, r0
    d7e6:	f003 fb59 	bl	10e9c <_localeconv_r>
    d7ea:	6803      	ldr	r3, [r0, #0]
    d7ec:	9312      	str	r3, [sp, #72]	; 0x48
    d7ee:	4618      	mov	r0, r3
    d7f0:	f7fe fc66 	bl	c0c0 <strlen>
    d7f4:	af20      	add	r7, sp, #128	; 0x80
    d7f6:	9010      	str	r0, [sp, #64]	; 0x40
    d7f8:	2208      	movs	r2, #8
    d7fa:	2100      	movs	r1, #0
    d7fc:	4638      	mov	r0, r7
    d7fe:	f7fe f8c9 	bl	b994 <memset>
    d802:	89a3      	ldrh	r3, [r4, #12]
    d804:	061b      	lsls	r3, r3, #24
    d806:	d503      	bpl.n	d810 <_svfprintf_r+0x40>
    d808:	6923      	ldr	r3, [r4, #16]
    d80a:	2b00      	cmp	r3, #0
    d80c:	f000 8755 	beq.w	e6ba <_svfprintf_r+0xeea>
    d810:	2300      	movs	r3, #0
    d812:	ed9f 8b83 	vldr	d8, [pc, #524]	; da20 <_svfprintf_r+0x250>
    d816:	ed9f 9b84 	vldr	d9, [pc, #528]	; da28 <_svfprintf_r+0x258>
    d81a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    d81e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    d822:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    d826:	aa27      	add	r2, sp, #156	; 0x9c
    d828:	930e      	str	r3, [sp, #56]	; 0x38
    d82a:	9224      	str	r2, [sp, #144]	; 0x90
    d82c:	4692      	mov	sl, r2
    d82e:	9311      	str	r3, [sp, #68]	; 0x44
    d830:	9304      	str	r3, [sp, #16]
    d832:	4644      	mov	r4, r8
    d834:	46a1      	mov	r9, r4
    d836:	4b7e      	ldr	r3, [pc, #504]	; (da30 <_svfprintf_r+0x260>)
    d838:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    d83c:	f7fe f974 	bl	bb28 <__locale_mb_cur_max>
    d840:	464a      	mov	r2, r9
    d842:	4603      	mov	r3, r0
    d844:	a91c      	add	r1, sp, #112	; 0x70
    d846:	9700      	str	r7, [sp, #0]
    d848:	4658      	mov	r0, fp
    d84a:	47a8      	blx	r5
    d84c:	2800      	cmp	r0, #0
    d84e:	f000 80b0 	beq.w	d9b2 <_svfprintf_r+0x1e2>
    d852:	f2c0 80a6 	blt.w	d9a2 <_svfprintf_r+0x1d2>
    d856:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d858:	2a25      	cmp	r2, #37	; 0x25
    d85a:	4603      	mov	r3, r0
    d85c:	d001      	beq.n	d862 <_svfprintf_r+0x92>
    d85e:	4499      	add	r9, r3
    d860:	e7e9      	b.n	d836 <_svfprintf_r+0x66>
    d862:	ebb9 0504 	subs.w	r5, r9, r4
    d866:	4606      	mov	r6, r0
    d868:	f040 80a7 	bne.w	d9ba <_svfprintf_r+0x1ea>
    d86c:	2300      	movs	r3, #0
    d86e:	f04f 32ff 	mov.w	r2, #4294967295
    d872:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d876:	4698      	mov	r8, r3
    d878:	9306      	str	r3, [sp, #24]
    d87a:	f109 0901 	add.w	r9, r9, #1
    d87e:	f899 3000 	ldrb.w	r3, [r9]
    d882:	9203      	str	r2, [sp, #12]
    d884:	252b      	movs	r5, #43	; 0x2b
    d886:	2620      	movs	r6, #32
    d888:	f109 0901 	add.w	r9, r9, #1
    d88c:	f1a3 0220 	sub.w	r2, r3, #32
    d890:	2a5a      	cmp	r2, #90	; 0x5a
    d892:	f200 80cf 	bhi.w	da34 <_svfprintf_r+0x264>
    d896:	e8df f012 	tbh	[pc, r2, lsl #1]
    d89a:	02e8      	.short	0x02e8
    d89c:	00cd00cd 	.word	0x00cd00cd
    d8a0:	00cd02e3 	.word	0x00cd02e3
    d8a4:	00cd00cd 	.word	0x00cd00cd
    d8a8:	00cd006a 	.word	0x00cd006a
    d8ac:	020500cd 	.word	0x020500cd
    d8b0:	00cd0284 	.word	0x00cd0284
    d8b4:	02c90210 	.word	0x02c90210
    d8b8:	02bd00cd 	.word	0x02bd00cd
    d8bc:	005b005b 	.word	0x005b005b
    d8c0:	005b005b 	.word	0x005b005b
    d8c4:	005b005b 	.word	0x005b005b
    d8c8:	005b005b 	.word	0x005b005b
    d8cc:	00cd005b 	.word	0x00cd005b
    d8d0:	00cd00cd 	.word	0x00cd00cd
    d8d4:	00cd00cd 	.word	0x00cd00cd
    d8d8:	00cd00cd 	.word	0x00cd00cd
    d8dc:	00cd0153 	.word	0x00cd0153
    d8e0:	021a0183 	.word	0x021a0183
    d8e4:	01530153 	.word	0x01530153
    d8e8:	00cd0153 	.word	0x00cd0153
    d8ec:	00cd00cd 	.word	0x00cd00cd
    d8f0:	021500cd 	.word	0x021500cd
    d8f4:	00cd00cd 	.word	0x00cd00cd
    d8f8:	00cd0296 	.word	0x00cd0296
    d8fc:	00cd00cd 	.word	0x00cd00cd
    d900:	00cd01ab 	.word	0x00cd01ab
    d904:	00cd02aa 	.word	0x00cd02aa
    d908:	06e300cd 	.word	0x06e300cd
    d90c:	00cd00cd 	.word	0x00cd00cd
    d910:	00cd00cd 	.word	0x00cd00cd
    d914:	00cd00cd 	.word	0x00cd00cd
    d918:	00cd00cd 	.word	0x00cd00cd
    d91c:	00cd0153 	.word	0x00cd0153
    d920:	01de0183 	.word	0x01de0183
    d924:	01530153 	.word	0x01530153
    d928:	02770153 	.word	0x02770153
    d92c:	007f01de 	.word	0x007f01de
    d930:	028900cd 	.word	0x028900cd
    d934:	025f00cd 	.word	0x025f00cd
    d938:	022f06e0 	.word	0x022f06e0
    d93c:	00cd007f 	.word	0x00cd007f
    d940:	007c01ab 	.word	0x007c01ab
    d944:	00cd06b8 	.word	0x00cd06b8
    d948:	06bd00cd 	.word	0x06bd00cd
    d94c:	007c00cd 	.word	0x007c00cd
    d950:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d954:	2100      	movs	r1, #0
    d956:	f819 3b01 	ldrb.w	r3, [r9], #1
    d95a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d95e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d962:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d966:	2a09      	cmp	r2, #9
    d968:	d9f5      	bls.n	d956 <_svfprintf_r+0x186>
    d96a:	9106      	str	r1, [sp, #24]
    d96c:	e78e      	b.n	d88c <_svfprintf_r+0xbc>
    d96e:	4658      	mov	r0, fp
    d970:	f003 fa94 	bl	10e9c <_localeconv_r>
    d974:	6843      	ldr	r3, [r0, #4]
    d976:	9315      	str	r3, [sp, #84]	; 0x54
    d978:	4618      	mov	r0, r3
    d97a:	f7fe fba1 	bl	c0c0 <strlen>
    d97e:	9016      	str	r0, [sp, #88]	; 0x58
    d980:	4658      	mov	r0, fp
    d982:	f003 fa8b 	bl	10e9c <_localeconv_r>
    d986:	6883      	ldr	r3, [r0, #8]
    d988:	9313      	str	r3, [sp, #76]	; 0x4c
    d98a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d98c:	2b00      	cmp	r3, #0
    d98e:	f040 862d 	bne.w	e5ec <_svfprintf_r+0xe1c>
    d992:	f899 3000 	ldrb.w	r3, [r9]
    d996:	e777      	b.n	d888 <_svfprintf_r+0xb8>
    d998:	f899 3000 	ldrb.w	r3, [r9]
    d99c:	f048 0820 	orr.w	r8, r8, #32
    d9a0:	e772      	b.n	d888 <_svfprintf_r+0xb8>
    d9a2:	2208      	movs	r2, #8
    d9a4:	2100      	movs	r1, #0
    d9a6:	4638      	mov	r0, r7
    d9a8:	f7fd fff4 	bl	b994 <memset>
    d9ac:	2301      	movs	r3, #1
    d9ae:	4499      	add	r9, r3
    d9b0:	e741      	b.n	d836 <_svfprintf_r+0x66>
    d9b2:	ebb9 0504 	subs.w	r5, r9, r4
    d9b6:	4606      	mov	r6, r0
    d9b8:	d011      	beq.n	d9de <_svfprintf_r+0x20e>
    d9ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d9bc:	442b      	add	r3, r5
    d9be:	9326      	str	r3, [sp, #152]	; 0x98
    d9c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d9c2:	3301      	adds	r3, #1
    d9c4:	2b07      	cmp	r3, #7
    d9c6:	e9ca 4500 	strd	r4, r5, [sl]
    d9ca:	9325      	str	r3, [sp, #148]	; 0x94
    d9cc:	dc1c      	bgt.n	da08 <_svfprintf_r+0x238>
    d9ce:	f10a 0a08 	add.w	sl, sl, #8
    d9d2:	9b04      	ldr	r3, [sp, #16]
    d9d4:	442b      	add	r3, r5
    d9d6:	9304      	str	r3, [sp, #16]
    d9d8:	2e00      	cmp	r6, #0
    d9da:	f47f af47 	bne.w	d86c <_svfprintf_r+0x9c>
    d9de:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	f041 820b 	bne.w	edfc <_svfprintf_r+0x162c>
    d9e6:	ee1b 3a10 	vmov	r3, s22
    d9ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    d9ee:	f013 0f40 	tst.w	r3, #64	; 0x40
    d9f2:	9b04      	ldr	r3, [sp, #16]
    d9f4:	bf18      	it	ne
    d9f6:	f04f 33ff 	movne.w	r3, #4294967295
    d9fa:	9304      	str	r3, [sp, #16]
    d9fc:	9804      	ldr	r0, [sp, #16]
    d9fe:	b051      	add	sp, #324	; 0x144
    da00:	ecbd 8b08 	vpop	{d8-d11}
    da04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da08:	ee1b 1a10 	vmov	r1, s22
    da0c:	aa24      	add	r2, sp, #144	; 0x90
    da0e:	4658      	mov	r0, fp
    da10:	f004 fd6a 	bl	124e8 <__ssprint_r>
    da14:	2800      	cmp	r0, #0
    da16:	d1e6      	bne.n	d9e6 <_svfprintf_r+0x216>
    da18:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    da1c:	e7d9      	b.n	d9d2 <_svfprintf_r+0x202>
    da1e:	bf00      	nop
	...
    da28:	ffffffff 	.word	0xffffffff
    da2c:	7fefffff 	.word	0x7fefffff
    da30:	200085f4 	.word	0x200085f4
    da34:	930b      	str	r3, [sp, #44]	; 0x2c
    da36:	2b00      	cmp	r3, #0
    da38:	d0d1      	beq.n	d9de <_svfprintf_r+0x20e>
    da3a:	2100      	movs	r1, #0
    da3c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    da40:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    da44:	2301      	movs	r3, #1
    da46:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    da4a:	9302      	str	r3, [sp, #8]
    da4c:	9107      	str	r1, [sp, #28]
    da4e:	9305      	str	r3, [sp, #20]
    da50:	9103      	str	r1, [sp, #12]
    da52:	910f      	str	r1, [sp, #60]	; 0x3c
    da54:	ac37      	add	r4, sp, #220	; 0xdc
    da56:	f018 0302 	ands.w	r3, r8, #2
    da5a:	9309      	str	r3, [sp, #36]	; 0x24
    da5c:	d002      	beq.n	da64 <_svfprintf_r+0x294>
    da5e:	9b02      	ldr	r3, [sp, #8]
    da60:	3302      	adds	r3, #2
    da62:	9302      	str	r3, [sp, #8]
    da64:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    da68:	930a      	str	r3, [sp, #40]	; 0x28
    da6a:	d105      	bne.n	da78 <_svfprintf_r+0x2a8>
    da6c:	9b06      	ldr	r3, [sp, #24]
    da6e:	9a02      	ldr	r2, [sp, #8]
    da70:	1a9d      	subs	r5, r3, r2
    da72:	2d00      	cmp	r5, #0
    da74:	f300 8369 	bgt.w	e14a <_svfprintf_r+0x97a>
    da78:	9a26      	ldr	r2, [sp, #152]	; 0x98
    da7a:	b189      	cbz	r1, daa0 <_svfprintf_r+0x2d0>
    da7c:	9925      	ldr	r1, [sp, #148]	; 0x94
    da7e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    da82:	3101      	adds	r1, #1
    da84:	3201      	adds	r2, #1
    da86:	f8ca 0000 	str.w	r0, [sl]
    da8a:	2907      	cmp	r1, #7
    da8c:	f04f 0001 	mov.w	r0, #1
    da90:	9226      	str	r2, [sp, #152]	; 0x98
    da92:	9125      	str	r1, [sp, #148]	; 0x94
    da94:	f8ca 0004 	str.w	r0, [sl, #4]
    da98:	f300 83a2 	bgt.w	e1e0 <_svfprintf_r+0xa10>
    da9c:	f10a 0a08 	add.w	sl, sl, #8
    daa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    daa2:	b183      	cbz	r3, dac6 <_svfprintf_r+0x2f6>
    daa4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    daa6:	a91a      	add	r1, sp, #104	; 0x68
    daa8:	3301      	adds	r3, #1
    daaa:	3202      	adds	r2, #2
    daac:	f8ca 1000 	str.w	r1, [sl]
    dab0:	2b07      	cmp	r3, #7
    dab2:	f04f 0102 	mov.w	r1, #2
    dab6:	9226      	str	r2, [sp, #152]	; 0x98
    dab8:	9325      	str	r3, [sp, #148]	; 0x94
    daba:	f8ca 1004 	str.w	r1, [sl, #4]
    dabe:	f300 83a3 	bgt.w	e208 <_svfprintf_r+0xa38>
    dac2:	f10a 0a08 	add.w	sl, sl, #8
    dac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dac8:	2b80      	cmp	r3, #128	; 0x80
    daca:	f000 826c 	beq.w	dfa6 <_svfprintf_r+0x7d6>
    dace:	9b03      	ldr	r3, [sp, #12]
    dad0:	9905      	ldr	r1, [sp, #20]
    dad2:	1a5d      	subs	r5, r3, r1
    dad4:	2d00      	cmp	r5, #0
    dad6:	f300 82a5 	bgt.w	e024 <_svfprintf_r+0x854>
    dada:	f418 7f80 	tst.w	r8, #256	; 0x100
    dade:	f040 820d 	bne.w	defc <_svfprintf_r+0x72c>
    dae2:	9b05      	ldr	r3, [sp, #20]
    dae4:	f8ca 3004 	str.w	r3, [sl, #4]
    dae8:	441a      	add	r2, r3
    daea:	9b25      	ldr	r3, [sp, #148]	; 0x94
    daec:	f8ca 4000 	str.w	r4, [sl]
    daf0:	3301      	adds	r3, #1
    daf2:	2b07      	cmp	r3, #7
    daf4:	9226      	str	r2, [sp, #152]	; 0x98
    daf6:	9325      	str	r3, [sp, #148]	; 0x94
    daf8:	f300 831b 	bgt.w	e132 <_svfprintf_r+0x962>
    dafc:	f10a 0a08 	add.w	sl, sl, #8
    db00:	f018 0f04 	tst.w	r8, #4
    db04:	d005      	beq.n	db12 <_svfprintf_r+0x342>
    db06:	9b06      	ldr	r3, [sp, #24]
    db08:	9902      	ldr	r1, [sp, #8]
    db0a:	1a5c      	subs	r4, r3, r1
    db0c:	2c00      	cmp	r4, #0
    db0e:	f300 8388 	bgt.w	e222 <_svfprintf_r+0xa52>
    db12:	9b04      	ldr	r3, [sp, #16]
    db14:	9906      	ldr	r1, [sp, #24]
    db16:	9802      	ldr	r0, [sp, #8]
    db18:	4281      	cmp	r1, r0
    db1a:	bfac      	ite	ge
    db1c:	185b      	addge	r3, r3, r1
    db1e:	181b      	addlt	r3, r3, r0
    db20:	9304      	str	r3, [sp, #16]
    db22:	2a00      	cmp	r2, #0
    db24:	f040 82b0 	bne.w	e088 <_svfprintf_r+0x8b8>
    db28:	2300      	movs	r3, #0
    db2a:	9325      	str	r3, [sp, #148]	; 0x94
    db2c:	9b07      	ldr	r3, [sp, #28]
    db2e:	b11b      	cbz	r3, db38 <_svfprintf_r+0x368>
    db30:	9907      	ldr	r1, [sp, #28]
    db32:	4658      	mov	r0, fp
    db34:	f7fe fbd6 	bl	c2e4 <_free_r>
    db38:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db3c:	464c      	mov	r4, r9
    db3e:	e679      	b.n	d834 <_svfprintf_r+0x64>
    db40:	930b      	str	r3, [sp, #44]	; 0x2c
    db42:	9b08      	ldr	r3, [sp, #32]
    db44:	3307      	adds	r3, #7
    db46:	f023 0307 	bic.w	r3, r3, #7
    db4a:	ecb3 8b02 	vldmia	r3!, {d8}
    db4e:	eeb0 7bc8 	vabs.f64	d7, d8
    db52:	eeb4 7b49 	vcmp.f64	d7, d9
    db56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db5a:	9308      	str	r3, [sp, #32]
    db5c:	f340 84e9 	ble.w	e532 <_svfprintf_r+0xd62>
    db60:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    db64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db68:	f101 8059 	bmi.w	ec1e <_svfprintf_r+0x144e>
    db6c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    db70:	4cab      	ldr	r4, [pc, #684]	; (de20 <_svfprintf_r+0x650>)
    db72:	4bac      	ldr	r3, [pc, #688]	; (de24 <_svfprintf_r+0x654>)
    db74:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    db78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    db7a:	2a47      	cmp	r2, #71	; 0x47
    db7c:	bfc8      	it	gt
    db7e:	461c      	movgt	r4, r3
    db80:	2300      	movs	r3, #0
    db82:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    db86:	2203      	movs	r2, #3
    db88:	9307      	str	r3, [sp, #28]
    db8a:	9202      	str	r2, [sp, #8]
    db8c:	9205      	str	r2, [sp, #20]
    db8e:	9303      	str	r3, [sp, #12]
    db90:	930f      	str	r3, [sp, #60]	; 0x3c
    db92:	2900      	cmp	r1, #0
    db94:	f43f af5f 	beq.w	da56 <_svfprintf_r+0x286>
    db98:	9b02      	ldr	r3, [sp, #8]
    db9a:	3301      	adds	r3, #1
    db9c:	9302      	str	r3, [sp, #8]
    db9e:	e75a      	b.n	da56 <_svfprintf_r+0x286>
    dba0:	2b43      	cmp	r3, #67	; 0x43
    dba2:	930b      	str	r3, [sp, #44]	; 0x2c
    dba4:	d003      	beq.n	dbae <_svfprintf_r+0x3de>
    dba6:	f018 0f10 	tst.w	r8, #16
    dbaa:	f000 855d 	beq.w	e668 <_svfprintf_r+0xe98>
    dbae:	9d08      	ldr	r5, [sp, #32]
    dbb0:	2208      	movs	r2, #8
    dbb2:	2100      	movs	r1, #0
    dbb4:	a822      	add	r0, sp, #136	; 0x88
    dbb6:	ac37      	add	r4, sp, #220	; 0xdc
    dbb8:	f7fd feec 	bl	b994 <memset>
    dbbc:	ab22      	add	r3, sp, #136	; 0x88
    dbbe:	f855 2b04 	ldr.w	r2, [r5], #4
    dbc2:	4621      	mov	r1, r4
    dbc4:	4658      	mov	r0, fp
    dbc6:	f004 fb65 	bl	12294 <_wcrtomb_r>
    dbca:	4603      	mov	r3, r0
    dbcc:	3301      	adds	r3, #1
    dbce:	9005      	str	r0, [sp, #20]
    dbd0:	f001 82ee 	beq.w	f1b0 <_svfprintf_r+0x19e0>
    dbd4:	9b05      	ldr	r3, [sp, #20]
    dbd6:	9508      	str	r5, [sp, #32]
    dbd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    dbdc:	9302      	str	r3, [sp, #8]
    dbde:	2100      	movs	r1, #0
    dbe0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    dbe4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    dbe8:	9107      	str	r1, [sp, #28]
    dbea:	9103      	str	r1, [sp, #12]
    dbec:	910f      	str	r1, [sp, #60]	; 0x3c
    dbee:	e732      	b.n	da56 <_svfprintf_r+0x286>
    dbf0:	930b      	str	r3, [sp, #44]	; 0x2c
    dbf2:	9b08      	ldr	r3, [sp, #32]
    dbf4:	461a      	mov	r2, r3
    dbf6:	2300      	movs	r3, #0
    dbf8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    dbfc:	4613      	mov	r3, r2
    dbfe:	f853 4b04 	ldr.w	r4, [r3], #4
    dc02:	9308      	str	r3, [sp, #32]
    dc04:	2c00      	cmp	r4, #0
    dc06:	f000 8548 	beq.w	e69a <_svfprintf_r+0xeca>
    dc0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc0c:	2b53      	cmp	r3, #83	; 0x53
    dc0e:	f000 86ec 	beq.w	e9ea <_svfprintf_r+0x121a>
    dc12:	f018 0310 	ands.w	r3, r8, #16
    dc16:	930c      	str	r3, [sp, #48]	; 0x30
    dc18:	f040 86e7 	bne.w	e9ea <_svfprintf_r+0x121a>
    dc1c:	9b03      	ldr	r3, [sp, #12]
    dc1e:	1c5d      	adds	r5, r3, #1
    dc20:	f001 80e5 	beq.w	edee <_svfprintf_r+0x161e>
    dc24:	990c      	ldr	r1, [sp, #48]	; 0x30
    dc26:	461a      	mov	r2, r3
    dc28:	4620      	mov	r0, r4
    dc2a:	f7fe f9f9 	bl	c020 <memchr>
    dc2e:	9007      	str	r0, [sp, #28]
    dc30:	2800      	cmp	r0, #0
    dc32:	f001 8328 	beq.w	f286 <_svfprintf_r+0x1ab6>
    dc36:	9b07      	ldr	r3, [sp, #28]
    dc38:	1b1a      	subs	r2, r3, r4
    dc3a:	9205      	str	r2, [sp, #20]
    dc3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dc3e:	9303      	str	r3, [sp, #12]
    dc40:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    dc44:	930f      	str	r3, [sp, #60]	; 0x3c
    dc46:	930d      	str	r3, [sp, #52]	; 0x34
    dc48:	9307      	str	r3, [sp, #28]
    dc4a:	2373      	movs	r3, #115	; 0x73
    dc4c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dc50:	9202      	str	r2, [sp, #8]
    dc52:	930b      	str	r3, [sp, #44]	; 0x2c
    dc54:	e79d      	b.n	db92 <_svfprintf_r+0x3c2>
    dc56:	f018 0f20 	tst.w	r8, #32
    dc5a:	930b      	str	r3, [sp, #44]	; 0x2c
    dc5c:	9b08      	ldr	r3, [sp, #32]
    dc5e:	d03d      	beq.n	dcdc <_svfprintf_r+0x50c>
    dc60:	3307      	adds	r3, #7
    dc62:	f023 0307 	bic.w	r3, r3, #7
    dc66:	461a      	mov	r2, r3
    dc68:	4611      	mov	r1, r2
    dc6a:	685b      	ldr	r3, [r3, #4]
    dc6c:	f851 2b08 	ldr.w	r2, [r1], #8
    dc70:	9108      	str	r1, [sp, #32]
    dc72:	4619      	mov	r1, r3
    dc74:	2b00      	cmp	r3, #0
    dc76:	f2c0 840c 	blt.w	e492 <_svfprintf_r+0xcc2>
    dc7a:	9b03      	ldr	r3, [sp, #12]
    dc7c:	3301      	adds	r3, #1
    dc7e:	f000 829e 	beq.w	e1be <_svfprintf_r+0x9ee>
    dc82:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    dc86:	ea52 0301 	orrs.w	r3, r2, r1
    dc8a:	9002      	str	r0, [sp, #8]
    dc8c:	f040 8299 	bne.w	e1c2 <_svfprintf_r+0x9f2>
    dc90:	9b03      	ldr	r3, [sp, #12]
    dc92:	2b00      	cmp	r3, #0
    dc94:	f040 829a 	bne.w	e1cc <_svfprintf_r+0x9fc>
    dc98:	4680      	mov	r8, r0
    dc9a:	2300      	movs	r3, #0
    dc9c:	9303      	str	r3, [sp, #12]
    dc9e:	9305      	str	r3, [sp, #20]
    dca0:	ac50      	add	r4, sp, #320	; 0x140
    dca2:	e106      	b.n	deb2 <_svfprintf_r+0x6e2>
    dca4:	9b08      	ldr	r3, [sp, #32]
    dca6:	f853 2b04 	ldr.w	r2, [r3], #4
    dcaa:	9206      	str	r2, [sp, #24]
    dcac:	2a00      	cmp	r2, #0
    dcae:	f280 8419 	bge.w	e4e4 <_svfprintf_r+0xd14>
    dcb2:	9a06      	ldr	r2, [sp, #24]
    dcb4:	9308      	str	r3, [sp, #32]
    dcb6:	4252      	negs	r2, r2
    dcb8:	9206      	str	r2, [sp, #24]
    dcba:	f899 3000 	ldrb.w	r3, [r9]
    dcbe:	f048 0804 	orr.w	r8, r8, #4
    dcc2:	e5e1      	b.n	d888 <_svfprintf_r+0xb8>
    dcc4:	f899 3000 	ldrb.w	r3, [r9]
    dcc8:	f048 0808 	orr.w	r8, r8, #8
    dccc:	e5dc      	b.n	d888 <_svfprintf_r+0xb8>
    dcce:	f048 0810 	orr.w	r8, r8, #16
    dcd2:	f018 0f20 	tst.w	r8, #32
    dcd6:	930b      	str	r3, [sp, #44]	; 0x2c
    dcd8:	9b08      	ldr	r3, [sp, #32]
    dcda:	d1c1      	bne.n	dc60 <_svfprintf_r+0x490>
    dcdc:	f018 0f10 	tst.w	r8, #16
    dce0:	f040 840b 	bne.w	e4fa <_svfprintf_r+0xd2a>
    dce4:	f018 0f40 	tst.w	r8, #64	; 0x40
    dce8:	f000 8403 	beq.w	e4f2 <_svfprintf_r+0xd22>
    dcec:	f933 2b04 	ldrsh.w	r2, [r3], #4
    dcf0:	9308      	str	r3, [sp, #32]
    dcf2:	17d1      	asrs	r1, r2, #31
    dcf4:	460b      	mov	r3, r1
    dcf6:	e7bd      	b.n	dc74 <_svfprintf_r+0x4a4>
    dcf8:	9b08      	ldr	r3, [sp, #32]
    dcfa:	f048 0202 	orr.w	r2, r8, #2
    dcfe:	9202      	str	r2, [sp, #8]
    dd00:	f853 2b04 	ldr.w	r2, [r3], #4
    dd04:	9308      	str	r3, [sp, #32]
    dd06:	f647 0330 	movw	r3, #30768	; 0x7830
    dd0a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    dd0e:	2078      	movs	r0, #120	; 0x78
    dd10:	4b45      	ldr	r3, [pc, #276]	; (de28 <_svfprintf_r+0x658>)
    dd12:	9311      	str	r3, [sp, #68]	; 0x44
    dd14:	2100      	movs	r1, #0
    dd16:	2302      	movs	r3, #2
    dd18:	900b      	str	r0, [sp, #44]	; 0x2c
    dd1a:	2000      	movs	r0, #0
    dd1c:	9c03      	ldr	r4, [sp, #12]
    dd1e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    dd22:	1c60      	adds	r0, r4, #1
    dd24:	f000 80ad 	beq.w	de82 <_svfprintf_r+0x6b2>
    dd28:	9802      	ldr	r0, [sp, #8]
    dd2a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    dd2e:	ea52 0001 	orrs.w	r0, r2, r1
    dd32:	f040 80a4 	bne.w	de7e <_svfprintf_r+0x6ae>
    dd36:	2c00      	cmp	r4, #0
    dd38:	f040 86ae 	bne.w	ea98 <_svfprintf_r+0x12c8>
    dd3c:	2b00      	cmp	r3, #0
    dd3e:	d1ac      	bne.n	dc9a <_svfprintf_r+0x4ca>
    dd40:	9b02      	ldr	r3, [sp, #8]
    dd42:	f013 0301 	ands.w	r3, r3, #1
    dd46:	9305      	str	r3, [sp, #20]
    dd48:	f000 83d1 	beq.w	e4ee <_svfprintf_r+0xd1e>
    dd4c:	2330      	movs	r3, #48	; 0x30
    dd4e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    dd52:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    dd56:	e0ac      	b.n	deb2 <_svfprintf_r+0x6e2>
    dd58:	f018 0f20 	tst.w	r8, #32
    dd5c:	f040 83d4 	bne.w	e508 <_svfprintf_r+0xd38>
    dd60:	f018 0f10 	tst.w	r8, #16
    dd64:	f040 869f 	bne.w	eaa6 <_svfprintf_r+0x12d6>
    dd68:	f018 0f40 	tst.w	r8, #64	; 0x40
    dd6c:	f040 8797 	bne.w	ec9e <_svfprintf_r+0x14ce>
    dd70:	f418 7f00 	tst.w	r8, #512	; 0x200
    dd74:	f000 8697 	beq.w	eaa6 <_svfprintf_r+0x12d6>
    dd78:	9b08      	ldr	r3, [sp, #32]
    dd7a:	9904      	ldr	r1, [sp, #16]
    dd7c:	f853 2b04 	ldr.w	r2, [r3], #4
    dd80:	9308      	str	r3, [sp, #32]
    dd82:	7011      	strb	r1, [r2, #0]
    dd84:	464c      	mov	r4, r9
    dd86:	e555      	b.n	d834 <_svfprintf_r+0x64>
    dd88:	f899 3000 	ldrb.w	r3, [r9]
    dd8c:	2b68      	cmp	r3, #104	; 0x68
    dd8e:	bf03      	ittte	eq
    dd90:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    dd94:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    dd98:	f109 0901 	addeq.w	r9, r9, #1
    dd9c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    dda0:	e572      	b.n	d888 <_svfprintf_r+0xb8>
    dda2:	f899 3000 	ldrb.w	r3, [r9]
    dda6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    ddaa:	e56d      	b.n	d888 <_svfprintf_r+0xb8>
    ddac:	f899 3000 	ldrb.w	r3, [r9]
    ddb0:	2b6c      	cmp	r3, #108	; 0x6c
    ddb2:	bf03      	ittte	eq
    ddb4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    ddb8:	f048 0820 	orreq.w	r8, r8, #32
    ddbc:	f109 0901 	addeq.w	r9, r9, #1
    ddc0:	f048 0810 	orrne.w	r8, r8, #16
    ddc4:	e560      	b.n	d888 <_svfprintf_r+0xb8>
    ddc6:	930b      	str	r3, [sp, #44]	; 0x2c
    ddc8:	f048 0810 	orr.w	r8, r8, #16
    ddcc:	f018 0120 	ands.w	r1, r8, #32
    ddd0:	f000 8351 	beq.w	e476 <_svfprintf_r+0xca6>
    ddd4:	9b08      	ldr	r3, [sp, #32]
    ddd6:	3307      	adds	r3, #7
    ddd8:	f023 0307 	bic.w	r3, r3, #7
    dddc:	6859      	ldr	r1, [r3, #4]
    ddde:	f853 2b08 	ldr.w	r2, [r3], #8
    dde2:	9308      	str	r3, [sp, #32]
    dde4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    dde8:	9302      	str	r3, [sp, #8]
    ddea:	2300      	movs	r3, #0
    ddec:	e795      	b.n	dd1a <_svfprintf_r+0x54a>
    ddee:	930b      	str	r3, [sp, #44]	; 0x2c
    ddf0:	f048 0310 	orr.w	r3, r8, #16
    ddf4:	9302      	str	r3, [sp, #8]
    ddf6:	9b02      	ldr	r3, [sp, #8]
    ddf8:	f013 0120 	ands.w	r1, r3, #32
    ddfc:	f000 8329 	beq.w	e452 <_svfprintf_r+0xc82>
    de00:	9b08      	ldr	r3, [sp, #32]
    de02:	3307      	adds	r3, #7
    de04:	f023 0307 	bic.w	r3, r3, #7
    de08:	6859      	ldr	r1, [r3, #4]
    de0a:	f853 2b08 	ldr.w	r2, [r3], #8
    de0e:	9308      	str	r3, [sp, #32]
    de10:	2301      	movs	r3, #1
    de12:	e782      	b.n	dd1a <_svfprintf_r+0x54a>
    de14:	f899 3000 	ldrb.w	r3, [r9]
    de18:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    de1c:	e534      	b.n	d888 <_svfprintf_r+0xb8>
    de1e:	bf00      	nop
    de20:	20000c38 	.word	0x20000c38
    de24:	20000598 	.word	0x20000598
    de28:	20000c40 	.word	0x20000c40
    de2c:	4649      	mov	r1, r9
    de2e:	f811 3b01 	ldrb.w	r3, [r1], #1
    de32:	2b2a      	cmp	r3, #42	; 0x2a
    de34:	f001 8249 	beq.w	f2ca <_svfprintf_r+0x1afa>
    de38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    de3c:	2a09      	cmp	r2, #9
    de3e:	4689      	mov	r9, r1
    de40:	bf98      	it	ls
    de42:	2100      	movls	r1, #0
    de44:	f201 8144 	bhi.w	f0d0 <_svfprintf_r+0x1900>
    de48:	f819 3b01 	ldrb.w	r3, [r9], #1
    de4c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    de50:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    de54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    de58:	2a09      	cmp	r2, #9
    de5a:	d9f5      	bls.n	de48 <_svfprintf_r+0x678>
    de5c:	9103      	str	r1, [sp, #12]
    de5e:	e515      	b.n	d88c <_svfprintf_r+0xbc>
    de60:	f899 3000 	ldrb.w	r3, [r9]
    de64:	f048 0801 	orr.w	r8, r8, #1
    de68:	e50e      	b.n	d888 <_svfprintf_r+0xb8>
    de6a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    de6e:	2b00      	cmp	r3, #0
    de70:	f47f ad8f 	bne.w	d992 <_svfprintf_r+0x1c2>
    de74:	f899 3000 	ldrb.w	r3, [r9]
    de78:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    de7c:	e504      	b.n	d888 <_svfprintf_r+0xb8>
    de7e:	f8cd 8008 	str.w	r8, [sp, #8]
    de82:	2b01      	cmp	r3, #1
    de84:	f000 819d 	beq.w	e1c2 <_svfprintf_r+0x9f2>
    de88:	2b02      	cmp	r3, #2
    de8a:	ac50      	add	r4, sp, #320	; 0x140
    de8c:	d120      	bne.n	ded0 <_svfprintf_r+0x700>
    de8e:	9811      	ldr	r0, [sp, #68]	; 0x44
    de90:	f002 030f 	and.w	r3, r2, #15
    de94:	0912      	lsrs	r2, r2, #4
    de96:	5cc3      	ldrb	r3, [r0, r3]
    de98:	f804 3d01 	strb.w	r3, [r4, #-1]!
    de9c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    dea0:	0909      	lsrs	r1, r1, #4
    dea2:	ea52 0301 	orrs.w	r3, r2, r1
    dea6:	d1f3      	bne.n	de90 <_svfprintf_r+0x6c0>
    dea8:	ab50      	add	r3, sp, #320	; 0x140
    deaa:	1b1b      	subs	r3, r3, r4
    deac:	f8dd 8008 	ldr.w	r8, [sp, #8]
    deb0:	9305      	str	r3, [sp, #20]
    deb2:	9a05      	ldr	r2, [sp, #20]
    deb4:	9803      	ldr	r0, [sp, #12]
    deb6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    deba:	4282      	cmp	r2, r0
    debc:	f04f 0300 	mov.w	r3, #0
    dec0:	bfb8      	it	lt
    dec2:	4602      	movlt	r2, r0
    dec4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    dec8:	9307      	str	r3, [sp, #28]
    deca:	9202      	str	r2, [sp, #8]
    decc:	930f      	str	r3, [sp, #60]	; 0x3c
    dece:	e660      	b.n	db92 <_svfprintf_r+0x3c2>
    ded0:	f002 0307 	and.w	r3, r2, #7
    ded4:	08d2      	lsrs	r2, r2, #3
    ded6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    deda:	08c9      	lsrs	r1, r1, #3
    dedc:	3330      	adds	r3, #48	; 0x30
    dede:	ea52 0501 	orrs.w	r5, r2, r1
    dee2:	4620      	mov	r0, r4
    dee4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    dee8:	d1f2      	bne.n	ded0 <_svfprintf_r+0x700>
    deea:	9a02      	ldr	r2, [sp, #8]
    deec:	07d1      	lsls	r1, r2, #31
    deee:	f100 824d 	bmi.w	e38c <_svfprintf_r+0xbbc>
    def2:	ab50      	add	r3, sp, #320	; 0x140
    def4:	1b1b      	subs	r3, r3, r4
    def6:	4690      	mov	r8, r2
    def8:	9305      	str	r3, [sp, #20]
    defa:	e7da      	b.n	deb2 <_svfprintf_r+0x6e2>
    defc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    defe:	2b65      	cmp	r3, #101	; 0x65
    df00:	f340 80d4 	ble.w	e0ac <_svfprintf_r+0x8dc>
    df04:	eeb5 8b40 	vcmp.f64	d8, #0.0
    df08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    df0c:	f040 81c1 	bne.w	e292 <_svfprintf_r+0xac2>
    df10:	9b25      	ldr	r3, [sp, #148]	; 0x94
    df12:	49ba      	ldr	r1, [pc, #744]	; (e1fc <_svfprintf_r+0xa2c>)
    df14:	f8ca 1000 	str.w	r1, [sl]
    df18:	3301      	adds	r3, #1
    df1a:	3201      	adds	r2, #1
    df1c:	2101      	movs	r1, #1
    df1e:	2b07      	cmp	r3, #7
    df20:	9226      	str	r2, [sp, #152]	; 0x98
    df22:	9325      	str	r3, [sp, #148]	; 0x94
    df24:	f8ca 1004 	str.w	r1, [sl, #4]
    df28:	f300 8551 	bgt.w	e9ce <_svfprintf_r+0x11fe>
    df2c:	f10a 0a08 	add.w	sl, sl, #8
    df30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    df32:	990e      	ldr	r1, [sp, #56]	; 0x38
    df34:	428b      	cmp	r3, r1
    df36:	f280 82d0 	bge.w	e4da <_svfprintf_r+0xd0a>
    df3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    df3c:	9912      	ldr	r1, [sp, #72]	; 0x48
    df3e:	441a      	add	r2, r3
    df40:	e9ca 1300 	strd	r1, r3, [sl]
    df44:	9b25      	ldr	r3, [sp, #148]	; 0x94
    df46:	9226      	str	r2, [sp, #152]	; 0x98
    df48:	3301      	adds	r3, #1
    df4a:	2b07      	cmp	r3, #7
    df4c:	9325      	str	r3, [sp, #148]	; 0x94
    df4e:	f300 8397 	bgt.w	e680 <_svfprintf_r+0xeb0>
    df52:	f10a 0a08 	add.w	sl, sl, #8
    df56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    df58:	1e5c      	subs	r4, r3, #1
    df5a:	2c00      	cmp	r4, #0
    df5c:	f77f add0 	ble.w	db00 <_svfprintf_r+0x330>
    df60:	2c10      	cmp	r4, #16
    df62:	9b25      	ldr	r3, [sp, #148]	; 0x94
    df64:	f340 856e 	ble.w	ea44 <_svfprintf_r+0x1274>
    df68:	ee1b 6a10 	vmov	r6, s22
    df6c:	2510      	movs	r5, #16
    df6e:	e005      	b.n	df7c <_svfprintf_r+0x7ac>
    df70:	f10a 0a08 	add.w	sl, sl, #8
    df74:	3c10      	subs	r4, #16
    df76:	2c10      	cmp	r4, #16
    df78:	f340 8564 	ble.w	ea44 <_svfprintf_r+0x1274>
    df7c:	3301      	adds	r3, #1
    df7e:	49a0      	ldr	r1, [pc, #640]	; (e200 <_svfprintf_r+0xa30>)
    df80:	3210      	adds	r2, #16
    df82:	2b07      	cmp	r3, #7
    df84:	e9ca 1500 	strd	r1, r5, [sl]
    df88:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    df8c:	ddf0      	ble.n	df70 <_svfprintf_r+0x7a0>
    df8e:	aa24      	add	r2, sp, #144	; 0x90
    df90:	4631      	mov	r1, r6
    df92:	4658      	mov	r0, fp
    df94:	f004 faa8 	bl	124e8 <__ssprint_r>
    df98:	2800      	cmp	r0, #0
    df9a:	d17e      	bne.n	e09a <_svfprintf_r+0x8ca>
    df9c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dfa0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dfa4:	e7e6      	b.n	df74 <_svfprintf_r+0x7a4>
    dfa6:	9b06      	ldr	r3, [sp, #24]
    dfa8:	9902      	ldr	r1, [sp, #8]
    dfaa:	1a5d      	subs	r5, r3, r1
    dfac:	2d00      	cmp	r5, #0
    dfae:	f77f ad8e 	ble.w	dace <_svfprintf_r+0x2fe>
    dfb2:	2d10      	cmp	r5, #16
    dfb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dfb6:	dd21      	ble.n	dffc <_svfprintf_r+0x82c>
    dfb8:	9409      	str	r4, [sp, #36]	; 0x24
    dfba:	2610      	movs	r6, #16
    dfbc:	ee1b 4a10 	vmov	r4, s22
    dfc0:	e004      	b.n	dfcc <_svfprintf_r+0x7fc>
    dfc2:	3d10      	subs	r5, #16
    dfc4:	2d10      	cmp	r5, #16
    dfc6:	f10a 0a08 	add.w	sl, sl, #8
    dfca:	dd16      	ble.n	dffa <_svfprintf_r+0x82a>
    dfcc:	3301      	adds	r3, #1
    dfce:	498c      	ldr	r1, [pc, #560]	; (e200 <_svfprintf_r+0xa30>)
    dfd0:	3210      	adds	r2, #16
    dfd2:	2b07      	cmp	r3, #7
    dfd4:	e9ca 1600 	strd	r1, r6, [sl]
    dfd8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dfdc:	ddf1      	ble.n	dfc2 <_svfprintf_r+0x7f2>
    dfde:	aa24      	add	r2, sp, #144	; 0x90
    dfe0:	4621      	mov	r1, r4
    dfe2:	4658      	mov	r0, fp
    dfe4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dfe8:	f004 fa7e 	bl	124e8 <__ssprint_r>
    dfec:	2800      	cmp	r0, #0
    dfee:	d154      	bne.n	e09a <_svfprintf_r+0x8ca>
    dff0:	3d10      	subs	r5, #16
    dff2:	2d10      	cmp	r5, #16
    dff4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dff8:	dce8      	bgt.n	dfcc <_svfprintf_r+0x7fc>
    dffa:	9c09      	ldr	r4, [sp, #36]	; 0x24
    dffc:	4980      	ldr	r1, [pc, #512]	; (e200 <_svfprintf_r+0xa30>)
    dffe:	f8ca 5004 	str.w	r5, [sl, #4]
    e002:	3301      	adds	r3, #1
    e004:	442a      	add	r2, r5
    e006:	2b07      	cmp	r3, #7
    e008:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e00c:	f8ca 1000 	str.w	r1, [sl]
    e010:	f300 8526 	bgt.w	ea60 <_svfprintf_r+0x1290>
    e014:	9b03      	ldr	r3, [sp, #12]
    e016:	9905      	ldr	r1, [sp, #20]
    e018:	1a5d      	subs	r5, r3, r1
    e01a:	2d00      	cmp	r5, #0
    e01c:	f10a 0a08 	add.w	sl, sl, #8
    e020:	f77f ad5b 	ble.w	dada <_svfprintf_r+0x30a>
    e024:	2d10      	cmp	r5, #16
    e026:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e028:	dd1f      	ble.n	e06a <_svfprintf_r+0x89a>
    e02a:	4651      	mov	r1, sl
    e02c:	2610      	movs	r6, #16
    e02e:	ee1b aa10 	vmov	sl, s22
    e032:	e004      	b.n	e03e <_svfprintf_r+0x86e>
    e034:	3d10      	subs	r5, #16
    e036:	2d10      	cmp	r5, #16
    e038:	f101 0108 	add.w	r1, r1, #8
    e03c:	dd14      	ble.n	e068 <_svfprintf_r+0x898>
    e03e:	3301      	adds	r3, #1
    e040:	486f      	ldr	r0, [pc, #444]	; (e200 <_svfprintf_r+0xa30>)
    e042:	3210      	adds	r2, #16
    e044:	2b07      	cmp	r3, #7
    e046:	e9c1 0600 	strd	r0, r6, [r1]
    e04a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e04e:	ddf1      	ble.n	e034 <_svfprintf_r+0x864>
    e050:	aa24      	add	r2, sp, #144	; 0x90
    e052:	4651      	mov	r1, sl
    e054:	4658      	mov	r0, fp
    e056:	f004 fa47 	bl	124e8 <__ssprint_r>
    e05a:	b9f0      	cbnz	r0, e09a <_svfprintf_r+0x8ca>
    e05c:	3d10      	subs	r5, #16
    e05e:	2d10      	cmp	r5, #16
    e060:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e064:	a927      	add	r1, sp, #156	; 0x9c
    e066:	dcea      	bgt.n	e03e <_svfprintf_r+0x86e>
    e068:	468a      	mov	sl, r1
    e06a:	3301      	adds	r3, #1
    e06c:	4964      	ldr	r1, [pc, #400]	; (e200 <_svfprintf_r+0xa30>)
    e06e:	f8ca 5004 	str.w	r5, [sl, #4]
    e072:	442a      	add	r2, r5
    e074:	2b07      	cmp	r3, #7
    e076:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e07a:	f8ca 1000 	str.w	r1, [sl]
    e07e:	f300 81da 	bgt.w	e436 <_svfprintf_r+0xc66>
    e082:	f10a 0a08 	add.w	sl, sl, #8
    e086:	e528      	b.n	dada <_svfprintf_r+0x30a>
    e088:	ee1b 1a10 	vmov	r1, s22
    e08c:	aa24      	add	r2, sp, #144	; 0x90
    e08e:	4658      	mov	r0, fp
    e090:	f004 fa2a 	bl	124e8 <__ssprint_r>
    e094:	2800      	cmp	r0, #0
    e096:	f43f ad47 	beq.w	db28 <_svfprintf_r+0x358>
    e09a:	9b07      	ldr	r3, [sp, #28]
    e09c:	2b00      	cmp	r3, #0
    e09e:	f43f aca2 	beq.w	d9e6 <_svfprintf_r+0x216>
    e0a2:	9907      	ldr	r1, [sp, #28]
    e0a4:	4658      	mov	r0, fp
    e0a6:	f7fe f91d 	bl	c2e4 <_free_r>
    e0aa:	e49c      	b.n	d9e6 <_svfprintf_r+0x216>
    e0ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e0ae:	2b01      	cmp	r3, #1
    e0b0:	f340 817a 	ble.w	e3a8 <_svfprintf_r+0xbd8>
    e0b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e0b6:	f8ca 4000 	str.w	r4, [sl]
    e0ba:	3301      	adds	r3, #1
    e0bc:	3201      	adds	r2, #1
    e0be:	2101      	movs	r1, #1
    e0c0:	2b07      	cmp	r3, #7
    e0c2:	9226      	str	r2, [sp, #152]	; 0x98
    e0c4:	9325      	str	r3, [sp, #148]	; 0x94
    e0c6:	f8ca 1004 	str.w	r1, [sl, #4]
    e0ca:	f300 81f8 	bgt.w	e4be <_svfprintf_r+0xcee>
    e0ce:	f10a 0a08 	add.w	sl, sl, #8
    e0d2:	9910      	ldr	r1, [sp, #64]	; 0x40
    e0d4:	9812      	ldr	r0, [sp, #72]	; 0x48
    e0d6:	3301      	adds	r3, #1
    e0d8:	440a      	add	r2, r1
    e0da:	2b07      	cmp	r3, #7
    e0dc:	e9ca 0100 	strd	r0, r1, [sl]
    e0e0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e0e4:	f300 81dd 	bgt.w	e4a2 <_svfprintf_r+0xcd2>
    e0e8:	f10a 0a08 	add.w	sl, sl, #8
    e0ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
    e0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e0f4:	f000 8177 	beq.w	e3e6 <_svfprintf_r+0xc16>
    e0f8:	990e      	ldr	r1, [sp, #56]	; 0x38
    e0fa:	3301      	adds	r3, #1
    e0fc:	3901      	subs	r1, #1
    e0fe:	3401      	adds	r4, #1
    e100:	440a      	add	r2, r1
    e102:	2b07      	cmp	r3, #7
    e104:	f8ca 4000 	str.w	r4, [sl]
    e108:	9325      	str	r3, [sp, #148]	; 0x94
    e10a:	f8ca 1004 	str.w	r1, [sl, #4]
    e10e:	9226      	str	r2, [sp, #152]	; 0x98
    e110:	f300 815b 	bgt.w	e3ca <_svfprintf_r+0xbfa>
    e114:	f10a 0a08 	add.w	sl, sl, #8
    e118:	9914      	ldr	r1, [sp, #80]	; 0x50
    e11a:	f8ca 1004 	str.w	r1, [sl, #4]
    e11e:	3301      	adds	r3, #1
    e120:	440a      	add	r2, r1
    e122:	2b07      	cmp	r3, #7
    e124:	a91e      	add	r1, sp, #120	; 0x78
    e126:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e12a:	f8ca 1000 	str.w	r1, [sl]
    e12e:	f77f ace5 	ble.w	dafc <_svfprintf_r+0x32c>
    e132:	ee1b 1a10 	vmov	r1, s22
    e136:	aa24      	add	r2, sp, #144	; 0x90
    e138:	4658      	mov	r0, fp
    e13a:	f004 f9d5 	bl	124e8 <__ssprint_r>
    e13e:	2800      	cmp	r0, #0
    e140:	d1ab      	bne.n	e09a <_svfprintf_r+0x8ca>
    e142:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e144:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e148:	e4da      	b.n	db00 <_svfprintf_r+0x330>
    e14a:	2d10      	cmp	r5, #16
    e14c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    e150:	4e2c      	ldr	r6, [pc, #176]	; (e204 <_svfprintf_r+0xa34>)
    e152:	dd24      	ble.n	e19e <_svfprintf_r+0x9ce>
    e154:	9417      	str	r4, [sp, #92]	; 0x5c
    e156:	2310      	movs	r3, #16
    e158:	ee1b 4a10 	vmov	r4, s22
    e15c:	4608      	mov	r0, r1
    e15e:	e004      	b.n	e16a <_svfprintf_r+0x99a>
    e160:	3d10      	subs	r5, #16
    e162:	2d10      	cmp	r5, #16
    e164:	f10a 0a08 	add.w	sl, sl, #8
    e168:	dd17      	ble.n	e19a <_svfprintf_r+0x9ca>
    e16a:	3001      	adds	r0, #1
    e16c:	3210      	adds	r2, #16
    e16e:	2807      	cmp	r0, #7
    e170:	e9ca 6300 	strd	r6, r3, [sl]
    e174:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    e178:	ddf2      	ble.n	e160 <_svfprintf_r+0x990>
    e17a:	aa24      	add	r2, sp, #144	; 0x90
    e17c:	4621      	mov	r1, r4
    e17e:	4658      	mov	r0, fp
    e180:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e184:	f004 f9b0 	bl	124e8 <__ssprint_r>
    e188:	2800      	cmp	r0, #0
    e18a:	d186      	bne.n	e09a <_svfprintf_r+0x8ca>
    e18c:	3d10      	subs	r5, #16
    e18e:	2d10      	cmp	r5, #16
    e190:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    e194:	f04f 0310 	mov.w	r3, #16
    e198:	dce7      	bgt.n	e16a <_svfprintf_r+0x99a>
    e19a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    e19c:	4601      	mov	r1, r0
    e19e:	3101      	adds	r1, #1
    e1a0:	442a      	add	r2, r5
    e1a2:	2907      	cmp	r1, #7
    e1a4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    e1a8:	f8ca 6000 	str.w	r6, [sl]
    e1ac:	f8ca 5004 	str.w	r5, [sl, #4]
    e1b0:	f300 83bd 	bgt.w	e92e <_svfprintf_r+0x115e>
    e1b4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e1b8:	f10a 0a08 	add.w	sl, sl, #8
    e1bc:	e45d      	b.n	da7a <_svfprintf_r+0x2aa>
    e1be:	f8cd 8008 	str.w	r8, [sp, #8]
    e1c2:	2a0a      	cmp	r2, #10
    e1c4:	f171 0300 	sbcs.w	r3, r1, #0
    e1c8:	f080 8345 	bcs.w	e856 <_svfprintf_r+0x1086>
    e1cc:	3230      	adds	r2, #48	; 0x30
    e1ce:	2301      	movs	r3, #1
    e1d0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e1d4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    e1d8:	9305      	str	r3, [sp, #20]
    e1da:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    e1de:	e668      	b.n	deb2 <_svfprintf_r+0x6e2>
    e1e0:	ee1b 1a10 	vmov	r1, s22
    e1e4:	aa24      	add	r2, sp, #144	; 0x90
    e1e6:	4658      	mov	r0, fp
    e1e8:	f004 f97e 	bl	124e8 <__ssprint_r>
    e1ec:	2800      	cmp	r0, #0
    e1ee:	f47f af54 	bne.w	e09a <_svfprintf_r+0x8ca>
    e1f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e1f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e1f8:	e452      	b.n	daa0 <_svfprintf_r+0x2d0>
    e1fa:	bf00      	nop
    e1fc:	20000c70 	.word	0x20000c70
    e200:	20008484 	.word	0x20008484
    e204:	200026ec 	.word	0x200026ec
    e208:	ee1b 1a10 	vmov	r1, s22
    e20c:	aa24      	add	r2, sp, #144	; 0x90
    e20e:	4658      	mov	r0, fp
    e210:	f004 f96a 	bl	124e8 <__ssprint_r>
    e214:	2800      	cmp	r0, #0
    e216:	f47f af40 	bne.w	e09a <_svfprintf_r+0x8ca>
    e21a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e21c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e220:	e451      	b.n	dac6 <_svfprintf_r+0x2f6>
    e222:	2c10      	cmp	r4, #16
    e224:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e226:	4ebe      	ldr	r6, [pc, #760]	; (e520 <_svfprintf_r+0xd50>)
    e228:	dd1f      	ble.n	e26a <_svfprintf_r+0xa9a>
    e22a:	ee1b 8a10 	vmov	r8, s22
    e22e:	2510      	movs	r5, #16
    e230:	e004      	b.n	e23c <_svfprintf_r+0xa6c>
    e232:	3c10      	subs	r4, #16
    e234:	2c10      	cmp	r4, #16
    e236:	f10a 0a08 	add.w	sl, sl, #8
    e23a:	dd16      	ble.n	e26a <_svfprintf_r+0xa9a>
    e23c:	3301      	adds	r3, #1
    e23e:	3210      	adds	r2, #16
    e240:	2b07      	cmp	r3, #7
    e242:	e9ca 6500 	strd	r6, r5, [sl]
    e246:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e24a:	ddf2      	ble.n	e232 <_svfprintf_r+0xa62>
    e24c:	aa24      	add	r2, sp, #144	; 0x90
    e24e:	4641      	mov	r1, r8
    e250:	4658      	mov	r0, fp
    e252:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e256:	f004 f947 	bl	124e8 <__ssprint_r>
    e25a:	2800      	cmp	r0, #0
    e25c:	f47f af1d 	bne.w	e09a <_svfprintf_r+0x8ca>
    e260:	3c10      	subs	r4, #16
    e262:	2c10      	cmp	r4, #16
    e264:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e268:	dce8      	bgt.n	e23c <_svfprintf_r+0xa6c>
    e26a:	3301      	adds	r3, #1
    e26c:	4422      	add	r2, r4
    e26e:	2b07      	cmp	r3, #7
    e270:	e9ca 6400 	strd	r6, r4, [sl]
    e274:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e278:	f77f ac4b 	ble.w	db12 <_svfprintf_r+0x342>
    e27c:	ee1b 1a10 	vmov	r1, s22
    e280:	aa24      	add	r2, sp, #144	; 0x90
    e282:	4658      	mov	r0, fp
    e284:	f004 f930 	bl	124e8 <__ssprint_r>
    e288:	2800      	cmp	r0, #0
    e28a:	f47f af06 	bne.w	e09a <_svfprintf_r+0x8ca>
    e28e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e290:	e43f      	b.n	db12 <_svfprintf_r+0x342>
    e292:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e294:	2900      	cmp	r1, #0
    e296:	f340 835a 	ble.w	e94e <_svfprintf_r+0x117e>
    e29a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e29c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e29e:	429e      	cmp	r6, r3
    e2a0:	bfa8      	it	ge
    e2a2:	461e      	movge	r6, r3
    e2a4:	2e00      	cmp	r6, #0
    e2a6:	dd0b      	ble.n	e2c0 <_svfprintf_r+0xaf0>
    e2a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e2aa:	3301      	adds	r3, #1
    e2ac:	4432      	add	r2, r6
    e2ae:	2b07      	cmp	r3, #7
    e2b0:	e9ca 4600 	strd	r4, r6, [sl]
    e2b4:	9226      	str	r2, [sp, #152]	; 0x98
    e2b6:	9325      	str	r3, [sp, #148]	; 0x94
    e2b8:	f300 8689 	bgt.w	efce <_svfprintf_r+0x17fe>
    e2bc:	f10a 0a08 	add.w	sl, sl, #8
    e2c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e2c2:	2e00      	cmp	r6, #0
    e2c4:	bfa8      	it	ge
    e2c6:	1bad      	subge	r5, r5, r6
    e2c8:	2d00      	cmp	r5, #0
    e2ca:	f300 8203 	bgt.w	e6d4 <_svfprintf_r+0xf04>
    e2ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e2d0:	f418 6f80 	tst.w	r8, #1024	; 0x400
    e2d4:	4423      	add	r3, r4
    e2d6:	9305      	str	r3, [sp, #20]
    e2d8:	f040 821f 	bne.w	e71a <_svfprintf_r+0xf4a>
    e2dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e2de:	990e      	ldr	r1, [sp, #56]	; 0x38
    e2e0:	428b      	cmp	r3, r1
    e2e2:	db03      	blt.n	e2ec <_svfprintf_r+0xb1c>
    e2e4:	f018 0f01 	tst.w	r8, #1
    e2e8:	f000 84cf 	beq.w	ec8a <_svfprintf_r+0x14ba>
    e2ec:	9910      	ldr	r1, [sp, #64]	; 0x40
    e2ee:	9812      	ldr	r0, [sp, #72]	; 0x48
    e2f0:	440a      	add	r2, r1
    e2f2:	e9ca 0100 	strd	r0, r1, [sl]
    e2f6:	9925      	ldr	r1, [sp, #148]	; 0x94
    e2f8:	9226      	str	r2, [sp, #152]	; 0x98
    e2fa:	3101      	adds	r1, #1
    e2fc:	2907      	cmp	r1, #7
    e2fe:	9125      	str	r1, [sp, #148]	; 0x94
    e300:	f300 86a5 	bgt.w	f04e <_svfprintf_r+0x187e>
    e304:	f10a 0a08 	add.w	sl, sl, #8
    e308:	990e      	ldr	r1, [sp, #56]	; 0x38
    e30a:	1865      	adds	r5, r4, r1
    e30c:	1acc      	subs	r4, r1, r3
    e30e:	9b05      	ldr	r3, [sp, #20]
    e310:	1aed      	subs	r5, r5, r3
    e312:	42a5      	cmp	r5, r4
    e314:	bfa8      	it	ge
    e316:	4625      	movge	r5, r4
    e318:	2d00      	cmp	r5, #0
    e31a:	dd0d      	ble.n	e338 <_svfprintf_r+0xb68>
    e31c:	f8ca 3000 	str.w	r3, [sl]
    e320:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e322:	f8ca 5004 	str.w	r5, [sl, #4]
    e326:	3301      	adds	r3, #1
    e328:	442a      	add	r2, r5
    e32a:	2b07      	cmp	r3, #7
    e32c:	9226      	str	r2, [sp, #152]	; 0x98
    e32e:	9325      	str	r3, [sp, #148]	; 0x94
    e330:	f300 86bb 	bgt.w	f0aa <_svfprintf_r+0x18da>
    e334:	f10a 0a08 	add.w	sl, sl, #8
    e338:	2d00      	cmp	r5, #0
    e33a:	bfa8      	it	ge
    e33c:	1b64      	subge	r4, r4, r5
    e33e:	2c00      	cmp	r4, #0
    e340:	f77f abde 	ble.w	db00 <_svfprintf_r+0x330>
    e344:	2c10      	cmp	r4, #16
    e346:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e348:	f340 837c 	ble.w	ea44 <_svfprintf_r+0x1274>
    e34c:	ee1b 6a10 	vmov	r6, s22
    e350:	2510      	movs	r5, #16
    e352:	e005      	b.n	e360 <_svfprintf_r+0xb90>
    e354:	f10a 0a08 	add.w	sl, sl, #8
    e358:	3c10      	subs	r4, #16
    e35a:	2c10      	cmp	r4, #16
    e35c:	f340 8372 	ble.w	ea44 <_svfprintf_r+0x1274>
    e360:	3301      	adds	r3, #1
    e362:	4970      	ldr	r1, [pc, #448]	; (e524 <_svfprintf_r+0xd54>)
    e364:	3210      	adds	r2, #16
    e366:	2b07      	cmp	r3, #7
    e368:	e9ca 1500 	strd	r1, r5, [sl]
    e36c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e370:	ddf0      	ble.n	e354 <_svfprintf_r+0xb84>
    e372:	aa24      	add	r2, sp, #144	; 0x90
    e374:	4631      	mov	r1, r6
    e376:	4658      	mov	r0, fp
    e378:	f004 f8b6 	bl	124e8 <__ssprint_r>
    e37c:	2800      	cmp	r0, #0
    e37e:	f47f ae8c 	bne.w	e09a <_svfprintf_r+0x8ca>
    e382:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e386:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e38a:	e7e5      	b.n	e358 <_svfprintf_r+0xb88>
    e38c:	2b30      	cmp	r3, #48	; 0x30
    e38e:	f43f ad8b 	beq.w	dea8 <_svfprintf_r+0x6d8>
    e392:	2330      	movs	r3, #48	; 0x30
    e394:	3802      	subs	r0, #2
    e396:	f804 3c01 	strb.w	r3, [r4, #-1]
    e39a:	ab50      	add	r3, sp, #320	; 0x140
    e39c:	1a1b      	subs	r3, r3, r0
    e39e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e3a2:	9305      	str	r3, [sp, #20]
    e3a4:	4604      	mov	r4, r0
    e3a6:	e584      	b.n	deb2 <_svfprintf_r+0x6e2>
    e3a8:	f018 0f01 	tst.w	r8, #1
    e3ac:	f47f ae82 	bne.w	e0b4 <_svfprintf_r+0x8e4>
    e3b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e3b2:	f8ca 4000 	str.w	r4, [sl]
    e3b6:	3301      	adds	r3, #1
    e3b8:	3201      	adds	r2, #1
    e3ba:	2101      	movs	r1, #1
    e3bc:	2b07      	cmp	r3, #7
    e3be:	9226      	str	r2, [sp, #152]	; 0x98
    e3c0:	9325      	str	r3, [sp, #148]	; 0x94
    e3c2:	f8ca 1004 	str.w	r1, [sl, #4]
    e3c6:	f77f aea5 	ble.w	e114 <_svfprintf_r+0x944>
    e3ca:	ee1b 1a10 	vmov	r1, s22
    e3ce:	aa24      	add	r2, sp, #144	; 0x90
    e3d0:	4658      	mov	r0, fp
    e3d2:	f004 f889 	bl	124e8 <__ssprint_r>
    e3d6:	2800      	cmp	r0, #0
    e3d8:	f47f ae5f 	bne.w	e09a <_svfprintf_r+0x8ca>
    e3dc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e3e0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e3e4:	e698      	b.n	e118 <_svfprintf_r+0x948>
    e3e6:	990e      	ldr	r1, [sp, #56]	; 0x38
    e3e8:	1e4c      	subs	r4, r1, #1
    e3ea:	2c00      	cmp	r4, #0
    e3ec:	f77f ae94 	ble.w	e118 <_svfprintf_r+0x948>
    e3f0:	2c10      	cmp	r4, #16
    e3f2:	f340 8361 	ble.w	eab8 <_svfprintf_r+0x12e8>
    e3f6:	ee1b 6a10 	vmov	r6, s22
    e3fa:	2510      	movs	r5, #16
    e3fc:	e005      	b.n	e40a <_svfprintf_r+0xc3a>
    e3fe:	f10a 0a08 	add.w	sl, sl, #8
    e402:	3c10      	subs	r4, #16
    e404:	2c10      	cmp	r4, #16
    e406:	f340 8357 	ble.w	eab8 <_svfprintf_r+0x12e8>
    e40a:	3301      	adds	r3, #1
    e40c:	4945      	ldr	r1, [pc, #276]	; (e524 <_svfprintf_r+0xd54>)
    e40e:	3210      	adds	r2, #16
    e410:	2b07      	cmp	r3, #7
    e412:	e9ca 1500 	strd	r1, r5, [sl]
    e416:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e41a:	ddf0      	ble.n	e3fe <_svfprintf_r+0xc2e>
    e41c:	aa24      	add	r2, sp, #144	; 0x90
    e41e:	4631      	mov	r1, r6
    e420:	4658      	mov	r0, fp
    e422:	f004 f861 	bl	124e8 <__ssprint_r>
    e426:	2800      	cmp	r0, #0
    e428:	f47f ae37 	bne.w	e09a <_svfprintf_r+0x8ca>
    e42c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e430:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e434:	e7e5      	b.n	e402 <_svfprintf_r+0xc32>
    e436:	ee1b 1a10 	vmov	r1, s22
    e43a:	aa24      	add	r2, sp, #144	; 0x90
    e43c:	4658      	mov	r0, fp
    e43e:	f004 f853 	bl	124e8 <__ssprint_r>
    e442:	2800      	cmp	r0, #0
    e444:	f47f ae29 	bne.w	e09a <_svfprintf_r+0x8ca>
    e448:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e44a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e44e:	f7ff bb44 	b.w	dada <_svfprintf_r+0x30a>
    e452:	9b02      	ldr	r3, [sp, #8]
    e454:	f013 0310 	ands.w	r3, r3, #16
    e458:	f040 80c1 	bne.w	e5de <_svfprintf_r+0xe0e>
    e45c:	9a02      	ldr	r2, [sp, #8]
    e45e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    e462:	f000 837a 	beq.w	eb5a <_svfprintf_r+0x138a>
    e466:	9808      	ldr	r0, [sp, #32]
    e468:	f850 2b04 	ldr.w	r2, [r0], #4
    e46c:	9008      	str	r0, [sp, #32]
    e46e:	4619      	mov	r1, r3
    e470:	b292      	uxth	r2, r2
    e472:	2301      	movs	r3, #1
    e474:	e451      	b.n	dd1a <_svfprintf_r+0x54a>
    e476:	f018 0310 	ands.w	r3, r8, #16
    e47a:	d155      	bne.n	e528 <_svfprintf_r+0xd58>
    e47c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e480:	f000 835d 	beq.w	eb3e <_svfprintf_r+0x136e>
    e484:	9808      	ldr	r0, [sp, #32]
    e486:	f850 2b04 	ldr.w	r2, [r0], #4
    e48a:	9008      	str	r0, [sp, #32]
    e48c:	4619      	mov	r1, r3
    e48e:	b292      	uxth	r2, r2
    e490:	e4a8      	b.n	dde4 <_svfprintf_r+0x614>
    e492:	4252      	negs	r2, r2
    e494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e498:	f8cd 8008 	str.w	r8, [sp, #8]
    e49c:	202d      	movs	r0, #45	; 0x2d
    e49e:	2301      	movs	r3, #1
    e4a0:	e43c      	b.n	dd1c <_svfprintf_r+0x54c>
    e4a2:	ee1b 1a10 	vmov	r1, s22
    e4a6:	aa24      	add	r2, sp, #144	; 0x90
    e4a8:	4658      	mov	r0, fp
    e4aa:	f004 f81d 	bl	124e8 <__ssprint_r>
    e4ae:	2800      	cmp	r0, #0
    e4b0:	f47f adf3 	bne.w	e09a <_svfprintf_r+0x8ca>
    e4b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e4b8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e4bc:	e616      	b.n	e0ec <_svfprintf_r+0x91c>
    e4be:	ee1b 1a10 	vmov	r1, s22
    e4c2:	aa24      	add	r2, sp, #144	; 0x90
    e4c4:	4658      	mov	r0, fp
    e4c6:	f004 f80f 	bl	124e8 <__ssprint_r>
    e4ca:	2800      	cmp	r0, #0
    e4cc:	f47f ade5 	bne.w	e09a <_svfprintf_r+0x8ca>
    e4d0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e4d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e4d8:	e5fb      	b.n	e0d2 <_svfprintf_r+0x902>
    e4da:	f018 0f01 	tst.w	r8, #1
    e4de:	f43f ab0f 	beq.w	db00 <_svfprintf_r+0x330>
    e4e2:	e52a      	b.n	df3a <_svfprintf_r+0x76a>
    e4e4:	9308      	str	r3, [sp, #32]
    e4e6:	f899 3000 	ldrb.w	r3, [r9]
    e4ea:	f7ff b9cd 	b.w	d888 <_svfprintf_r+0xb8>
    e4ee:	ac50      	add	r4, sp, #320	; 0x140
    e4f0:	e4df      	b.n	deb2 <_svfprintf_r+0x6e2>
    e4f2:	f418 7f00 	tst.w	r8, #512	; 0x200
    e4f6:	f040 83db 	bne.w	ecb0 <_svfprintf_r+0x14e0>
    e4fa:	f853 2b04 	ldr.w	r2, [r3], #4
    e4fe:	9308      	str	r3, [sp, #32]
    e500:	17d1      	asrs	r1, r2, #31
    e502:	460b      	mov	r3, r1
    e504:	f7ff bbb6 	b.w	dc74 <_svfprintf_r+0x4a4>
    e508:	9b08      	ldr	r3, [sp, #32]
    e50a:	9804      	ldr	r0, [sp, #16]
    e50c:	f853 1b04 	ldr.w	r1, [r3], #4
    e510:	9308      	str	r3, [sp, #32]
    e512:	17c2      	asrs	r2, r0, #31
    e514:	e9c1 0200 	strd	r0, r2, [r1]
    e518:	464c      	mov	r4, r9
    e51a:	f7ff b98b 	b.w	d834 <_svfprintf_r+0x64>
    e51e:	bf00      	nop
    e520:	200026ec 	.word	0x200026ec
    e524:	20008484 	.word	0x20008484
    e528:	9b08      	ldr	r3, [sp, #32]
    e52a:	f853 2b04 	ldr.w	r2, [r3], #4
    e52e:	9308      	str	r3, [sp, #32]
    e530:	e458      	b.n	dde4 <_svfprintf_r+0x614>
    e532:	eeb4 8b48 	vcmp.f64	d8, d8
    e536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e53a:	f180 8694 	bvs.w	f266 <_svfprintf_r+0x1a96>
    e53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e540:	2b61      	cmp	r3, #97	; 0x61
    e542:	f000 8552 	beq.w	efea <_svfprintf_r+0x181a>
    e546:	2b41      	cmp	r3, #65	; 0x41
    e548:	f000 85c0 	beq.w	f0cc <_svfprintf_r+0x18fc>
    e54c:	9b03      	ldr	r3, [sp, #12]
    e54e:	3301      	adds	r3, #1
    e550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e552:	f023 0520 	bic.w	r5, r3, #32
    e556:	f000 8480 	beq.w	ee5a <_svfprintf_r+0x168a>
    e55a:	2d47      	cmp	r5, #71	; 0x47
    e55c:	d104      	bne.n	e568 <_svfprintf_r+0xd98>
    e55e:	9b03      	ldr	r3, [sp, #12]
    e560:	2b00      	cmp	r3, #0
    e562:	bf08      	it	eq
    e564:	2301      	moveq	r3, #1
    e566:	9303      	str	r3, [sp, #12]
    e568:	ee18 3a90 	vmov	r3, s17
    e56c:	2b00      	cmp	r3, #0
    e56e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    e572:	4646      	mov	r6, r8
    e574:	f2c0 8618 	blt.w	f1a8 <_svfprintf_r+0x19d8>
    e578:	eeb0 ab48 	vmov.f64	d10, d8
    e57c:	2300      	movs	r3, #0
    e57e:	4690      	mov	r8, r2
    e580:	9309      	str	r3, [sp, #36]	; 0x24
    e582:	9307      	str	r3, [sp, #28]
    e584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e586:	3b41      	subs	r3, #65	; 0x41
    e588:	2b25      	cmp	r3, #37	; 0x25
    e58a:	f200 8398 	bhi.w	ecbe <_svfprintf_r+0x14ee>
    e58e:	e8df f013 	tbh	[pc, r3, lsl #1]
    e592:	046f      	.short	0x046f
    e594:	03960396 	.word	0x03960396
    e598:	04680396 	.word	0x04680396
    e59c:	0396046c 	.word	0x0396046c
    e5a0:	03960396 	.word	0x03960396
    e5a4:	03960396 	.word	0x03960396
    e5a8:	03960396 	.word	0x03960396
    e5ac:	03960396 	.word	0x03960396
    e5b0:	03960396 	.word	0x03960396
    e5b4:	03960396 	.word	0x03960396
    e5b8:	03960396 	.word	0x03960396
    e5bc:	03960396 	.word	0x03960396
    e5c0:	03960396 	.word	0x03960396
    e5c4:	03960396 	.word	0x03960396
    e5c8:	03960396 	.word	0x03960396
    e5cc:	03960396 	.word	0x03960396
    e5d0:	03960396 	.word	0x03960396
    e5d4:	03960396 	.word	0x03960396
    e5d8:	04680396 	.word	0x04680396
    e5dc:	046c      	.short	0x046c
    e5de:	9b08      	ldr	r3, [sp, #32]
    e5e0:	f853 2b04 	ldr.w	r2, [r3], #4
    e5e4:	9308      	str	r3, [sp, #32]
    e5e6:	2301      	movs	r3, #1
    e5e8:	f7ff bb97 	b.w	dd1a <_svfprintf_r+0x54a>
    e5ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e5ee:	2b00      	cmp	r3, #0
    e5f0:	f43f a9cf 	beq.w	d992 <_svfprintf_r+0x1c2>
    e5f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e5f6:	781b      	ldrb	r3, [r3, #0]
    e5f8:	2b00      	cmp	r3, #0
    e5fa:	f43f a9ca 	beq.w	d992 <_svfprintf_r+0x1c2>
    e5fe:	f899 3000 	ldrb.w	r3, [r9]
    e602:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    e606:	f7ff b93f 	b.w	d888 <_svfprintf_r+0xb8>
    e60a:	930b      	str	r3, [sp, #44]	; 0x2c
    e60c:	f8cd 8008 	str.w	r8, [sp, #8]
    e610:	f7ff bbf1 	b.w	ddf6 <_svfprintf_r+0x626>
    e614:	930b      	str	r3, [sp, #44]	; 0x2c
    e616:	4b9a      	ldr	r3, [pc, #616]	; (e880 <_svfprintf_r+0x10b0>)
    e618:	9311      	str	r3, [sp, #68]	; 0x44
    e61a:	f018 0120 	ands.w	r1, r8, #32
    e61e:	f000 8105 	beq.w	e82c <_svfprintf_r+0x105c>
    e622:	9b08      	ldr	r3, [sp, #32]
    e624:	3307      	adds	r3, #7
    e626:	f023 0307 	bic.w	r3, r3, #7
    e62a:	6859      	ldr	r1, [r3, #4]
    e62c:	f853 2b08 	ldr.w	r2, [r3], #8
    e630:	9308      	str	r3, [sp, #32]
    e632:	f018 0f01 	tst.w	r8, #1
    e636:	d00a      	beq.n	e64e <_svfprintf_r+0xe7e>
    e638:	ea52 0301 	orrs.w	r3, r2, r1
    e63c:	d007      	beq.n	e64e <_svfprintf_r+0xe7e>
    e63e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e640:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    e644:	2330      	movs	r3, #48	; 0x30
    e646:	f048 0802 	orr.w	r8, r8, #2
    e64a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    e64e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    e652:	9302      	str	r3, [sp, #8]
    e654:	2302      	movs	r3, #2
    e656:	f7ff bb60 	b.w	dd1a <_svfprintf_r+0x54a>
    e65a:	930b      	str	r3, [sp, #44]	; 0x2c
    e65c:	f7ff bbb6 	b.w	ddcc <_svfprintf_r+0x5fc>
    e660:	930b      	str	r3, [sp, #44]	; 0x2c
    e662:	4b88      	ldr	r3, [pc, #544]	; (e884 <_svfprintf_r+0x10b4>)
    e664:	9311      	str	r3, [sp, #68]	; 0x44
    e666:	e7d8      	b.n	e61a <_svfprintf_r+0xe4a>
    e668:	9b08      	ldr	r3, [sp, #32]
    e66a:	2101      	movs	r1, #1
    e66c:	f853 2b04 	ldr.w	r2, [r3], #4
    e670:	9102      	str	r1, [sp, #8]
    e672:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    e676:	9308      	str	r3, [sp, #32]
    e678:	9105      	str	r1, [sp, #20]
    e67a:	ac37      	add	r4, sp, #220	; 0xdc
    e67c:	f7ff baaf 	b.w	dbde <_svfprintf_r+0x40e>
    e680:	ee1b 1a10 	vmov	r1, s22
    e684:	aa24      	add	r2, sp, #144	; 0x90
    e686:	4658      	mov	r0, fp
    e688:	f003 ff2e 	bl	124e8 <__ssprint_r>
    e68c:	2800      	cmp	r0, #0
    e68e:	f47f ad04 	bne.w	e09a <_svfprintf_r+0x8ca>
    e692:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e694:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e698:	e45d      	b.n	df56 <_svfprintf_r+0x786>
    e69a:	9b03      	ldr	r3, [sp, #12]
    e69c:	9407      	str	r4, [sp, #28]
    e69e:	2b06      	cmp	r3, #6
    e6a0:	4622      	mov	r2, r4
    e6a2:	bf28      	it	cs
    e6a4:	2306      	movcs	r3, #6
    e6a6:	9403      	str	r4, [sp, #12]
    e6a8:	4621      	mov	r1, r4
    e6aa:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    e6ae:	4c76      	ldr	r4, [pc, #472]	; (e888 <_svfprintf_r+0x10b8>)
    e6b0:	9302      	str	r3, [sp, #8]
    e6b2:	9305      	str	r3, [sp, #20]
    e6b4:	920f      	str	r2, [sp, #60]	; 0x3c
    e6b6:	f7ff ba6c 	b.w	db92 <_svfprintf_r+0x3c2>
    e6ba:	2140      	movs	r1, #64	; 0x40
    e6bc:	4658      	mov	r0, fp
    e6be:	f7fb fa41 	bl	9b44 <_malloc_r>
    e6c2:	6020      	str	r0, [r4, #0]
    e6c4:	6120      	str	r0, [r4, #16]
    e6c6:	2800      	cmp	r0, #0
    e6c8:	f000 860f 	beq.w	f2ea <_svfprintf_r+0x1b1a>
    e6cc:	2340      	movs	r3, #64	; 0x40
    e6ce:	6163      	str	r3, [r4, #20]
    e6d0:	f7ff b89e 	b.w	d810 <_svfprintf_r+0x40>
    e6d4:	2d10      	cmp	r5, #16
    e6d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e6d8:	f340 825d 	ble.w	eb96 <_svfprintf_r+0x13c6>
    e6dc:	4651      	mov	r1, sl
    e6de:	2610      	movs	r6, #16
    e6e0:	ee1b aa10 	vmov	sl, s22
    e6e4:	e004      	b.n	e6f0 <_svfprintf_r+0xf20>
    e6e6:	3108      	adds	r1, #8
    e6e8:	3d10      	subs	r5, #16
    e6ea:	2d10      	cmp	r5, #16
    e6ec:	f340 8252 	ble.w	eb94 <_svfprintf_r+0x13c4>
    e6f0:	3301      	adds	r3, #1
    e6f2:	4866      	ldr	r0, [pc, #408]	; (e88c <_svfprintf_r+0x10bc>)
    e6f4:	3210      	adds	r2, #16
    e6f6:	2b07      	cmp	r3, #7
    e6f8:	e9c1 0600 	strd	r0, r6, [r1]
    e6fc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e700:	ddf1      	ble.n	e6e6 <_svfprintf_r+0xf16>
    e702:	aa24      	add	r2, sp, #144	; 0x90
    e704:	4651      	mov	r1, sl
    e706:	4658      	mov	r0, fp
    e708:	f003 feee 	bl	124e8 <__ssprint_r>
    e70c:	2800      	cmp	r0, #0
    e70e:	f47f acc4 	bne.w	e09a <_svfprintf_r+0x8ca>
    e712:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e716:	a927      	add	r1, sp, #156	; 0x9c
    e718:	e7e6      	b.n	e6e8 <_svfprintf_r+0xf18>
    e71a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e71c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    e720:	18e3      	adds	r3, r4, r3
    e722:	9303      	str	r3, [sp, #12]
    e724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e726:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    e72a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    e72c:	9d05      	ldr	r5, [sp, #20]
    e72e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    e732:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    e736:	940b      	str	r4, [sp, #44]	; 0x2c
    e738:	ee1b 1a10 	vmov	r1, s22
    e73c:	4650      	mov	r0, sl
    e73e:	2b00      	cmp	r3, #0
    e740:	d034      	beq.n	e7ac <_svfprintf_r+0xfdc>
    e742:	f1b8 0f00 	cmp.w	r8, #0
    e746:	d135      	bne.n	e7b4 <_svfprintf_r+0xfe4>
    e748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e74a:	3b01      	subs	r3, #1
    e74c:	3e01      	subs	r6, #1
    e74e:	930d      	str	r3, [sp, #52]	; 0x34
    e750:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e752:	e9c0 3900 	strd	r3, r9, [r0]
    e756:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e758:	3301      	adds	r3, #1
    e75a:	444a      	add	r2, r9
    e75c:	2b07      	cmp	r3, #7
    e75e:	9226      	str	r2, [sp, #152]	; 0x98
    e760:	9325      	str	r3, [sp, #148]	; 0x94
    e762:	dc6c      	bgt.n	e83e <_svfprintf_r+0x106e>
    e764:	3008      	adds	r0, #8
    e766:	9b03      	ldr	r3, [sp, #12]
    e768:	f896 c000 	ldrb.w	ip, [r6]
    e76c:	1b5b      	subs	r3, r3, r5
    e76e:	4563      	cmp	r3, ip
    e770:	bfa8      	it	ge
    e772:	4663      	movge	r3, ip
    e774:	2b00      	cmp	r3, #0
    e776:	469a      	mov	sl, r3
    e778:	dd0c      	ble.n	e794 <_svfprintf_r+0xfc4>
    e77a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e77c:	3401      	adds	r4, #1
    e77e:	441a      	add	r2, r3
    e780:	2c07      	cmp	r4, #7
    e782:	e9c0 5300 	strd	r5, r3, [r0]
    e786:	9226      	str	r2, [sp, #152]	; 0x98
    e788:	9425      	str	r4, [sp, #148]	; 0x94
    e78a:	f300 8177 	bgt.w	ea7c <_svfprintf_r+0x12ac>
    e78e:	f896 c000 	ldrb.w	ip, [r6]
    e792:	3008      	adds	r0, #8
    e794:	f1ba 0f00 	cmp.w	sl, #0
    e798:	bfac      	ite	ge
    e79a:	ebac 040a 	subge.w	r4, ip, sl
    e79e:	4664      	movlt	r4, ip
    e7a0:	2c00      	cmp	r4, #0
    e7a2:	dc0a      	bgt.n	e7ba <_svfprintf_r+0xfea>
    e7a4:	4465      	add	r5, ip
    e7a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e7a8:	2b00      	cmp	r3, #0
    e7aa:	d1ca      	bne.n	e742 <_svfprintf_r+0xf72>
    e7ac:	f1b8 0f00 	cmp.w	r8, #0
    e7b0:	f000 83ac 	beq.w	ef0c <_svfprintf_r+0x173c>
    e7b4:	f108 38ff 	add.w	r8, r8, #4294967295
    e7b8:	e7ca      	b.n	e750 <_svfprintf_r+0xf80>
    e7ba:	2c10      	cmp	r4, #16
    e7bc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    e7c0:	dd24      	ble.n	e80c <_svfprintf_r+0x103c>
    e7c2:	9505      	str	r5, [sp, #20]
    e7c4:	f04f 0a10 	mov.w	sl, #16
    e7c8:	4663      	mov	r3, ip
    e7ca:	460d      	mov	r5, r1
    e7cc:	e004      	b.n	e7d8 <_svfprintf_r+0x1008>
    e7ce:	3c10      	subs	r4, #16
    e7d0:	2c10      	cmp	r4, #16
    e7d2:	f100 0008 	add.w	r0, r0, #8
    e7d6:	dd16      	ble.n	e806 <_svfprintf_r+0x1036>
    e7d8:	3301      	adds	r3, #1
    e7da:	492c      	ldr	r1, [pc, #176]	; (e88c <_svfprintf_r+0x10bc>)
    e7dc:	3210      	adds	r2, #16
    e7de:	2b07      	cmp	r3, #7
    e7e0:	e9c0 1a00 	strd	r1, sl, [r0]
    e7e4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e7e8:	ddf1      	ble.n	e7ce <_svfprintf_r+0xffe>
    e7ea:	aa24      	add	r2, sp, #144	; 0x90
    e7ec:	4629      	mov	r1, r5
    e7ee:	4658      	mov	r0, fp
    e7f0:	f003 fe7a 	bl	124e8 <__ssprint_r>
    e7f4:	2800      	cmp	r0, #0
    e7f6:	f47f ac50 	bne.w	e09a <_svfprintf_r+0x8ca>
    e7fa:	3c10      	subs	r4, #16
    e7fc:	2c10      	cmp	r4, #16
    e7fe:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e802:	a827      	add	r0, sp, #156	; 0x9c
    e804:	dce8      	bgt.n	e7d8 <_svfprintf_r+0x1008>
    e806:	4629      	mov	r1, r5
    e808:	9d05      	ldr	r5, [sp, #20]
    e80a:	469c      	mov	ip, r3
    e80c:	f10c 0301 	add.w	r3, ip, #1
    e810:	4422      	add	r2, r4
    e812:	6044      	str	r4, [r0, #4]
    e814:	2b07      	cmp	r3, #7
    e816:	4c1d      	ldr	r4, [pc, #116]	; (e88c <_svfprintf_r+0x10bc>)
    e818:	6004      	str	r4, [r0, #0]
    e81a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e81e:	f300 83c6 	bgt.w	efae <_svfprintf_r+0x17de>
    e822:	f896 c000 	ldrb.w	ip, [r6]
    e826:	3008      	adds	r0, #8
    e828:	4465      	add	r5, ip
    e82a:	e7bc      	b.n	e7a6 <_svfprintf_r+0xfd6>
    e82c:	f018 0310 	ands.w	r3, r8, #16
    e830:	f000 80c2 	beq.w	e9b8 <_svfprintf_r+0x11e8>
    e834:	9b08      	ldr	r3, [sp, #32]
    e836:	f853 2b04 	ldr.w	r2, [r3], #4
    e83a:	9308      	str	r3, [sp, #32]
    e83c:	e6f9      	b.n	e632 <_svfprintf_r+0xe62>
    e83e:	aa24      	add	r2, sp, #144	; 0x90
    e840:	4658      	mov	r0, fp
    e842:	9105      	str	r1, [sp, #20]
    e844:	f003 fe50 	bl	124e8 <__ssprint_r>
    e848:	2800      	cmp	r0, #0
    e84a:	f47f ac26 	bne.w	e09a <_svfprintf_r+0x8ca>
    e84e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e850:	9905      	ldr	r1, [sp, #20]
    e852:	a827      	add	r0, sp, #156	; 0x9c
    e854:	e787      	b.n	e766 <_svfprintf_r+0xf96>
    e856:	9802      	ldr	r0, [sp, #8]
    e858:	f8cd a01c 	str.w	sl, [sp, #28]
    e85c:	ac50      	add	r4, sp, #320	; 0x140
    e85e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    e862:	2500      	movs	r5, #0
    e864:	ee0a ba10 	vmov	s20, fp
    e868:	4b09      	ldr	r3, [pc, #36]	; (e890 <_svfprintf_r+0x10c0>)
    e86a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    e86e:	f8cd 9014 	str.w	r9, [sp, #20]
    e872:	46a3      	mov	fp, r4
    e874:	f04f 0805 	mov.w	r8, #5
    e878:	46ac      	mov	ip, r5
    e87a:	4604      	mov	r4, r0
    e87c:	e010      	b.n	e8a0 <_svfprintf_r+0x10d0>
    e87e:	bf00      	nop
    e880:	20000c40 	.word	0x20000c40
    e884:	20000c54 	.word	0x20000c54
    e888:	20000c68 	.word	0x20000c68
    e88c:	20008484 	.word	0x20008484
    e890:	cccccccd 	.word	0xcccccccd
    e894:	2a0a      	cmp	r2, #10
    e896:	f171 0100 	sbcs.w	r1, r1, #0
    e89a:	d336      	bcc.n	e90a <_svfprintf_r+0x113a>
    e89c:	464a      	mov	r2, r9
    e89e:	4631      	mov	r1, r6
    e8a0:	1850      	adds	r0, r2, r1
    e8a2:	f140 0000 	adc.w	r0, r0, #0
    e8a6:	fba3 5600 	umull	r5, r6, r3, r0
    e8aa:	f026 0503 	bic.w	r5, r6, #3
    e8ae:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    e8b2:	1b40      	subs	r0, r0, r5
    e8b4:	1a15      	subs	r5, r2, r0
    e8b6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    e8ba:	f161 0e00 	sbc.w	lr, r1, #0
    e8be:	fb06 f605 	mul.w	r6, r6, r5
    e8c2:	fba5 9503 	umull	r9, r5, r5, r3
    e8c6:	fb03 660e 	mla	r6, r3, lr, r6
    e8ca:	f009 0e01 	and.w	lr, r9, #1
    e8ce:	442e      	add	r6, r5
    e8d0:	fbae 5e08 	umull	r5, lr, lr, r8
    e8d4:	182d      	adds	r5, r5, r0
    e8d6:	ea4f 0959 	mov.w	r9, r9, lsr #1
    e8da:	3530      	adds	r5, #48	; 0x30
    e8dc:	f80b 5c01 	strb.w	r5, [fp, #-1]
    e8e0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    e8e4:	f10c 0c01 	add.w	ip, ip, #1
    e8e8:	f10b 3bff 	add.w	fp, fp, #4294967295
    e8ec:	0876      	lsrs	r6, r6, #1
    e8ee:	2c00      	cmp	r4, #0
    e8f0:	d0d0      	beq.n	e894 <_svfprintf_r+0x10c4>
    e8f2:	f89a 0000 	ldrb.w	r0, [sl]
    e8f6:	4584      	cmp	ip, r0
    e8f8:	d1cc      	bne.n	e894 <_svfprintf_r+0x10c4>
    e8fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    e8fe:	d0c9      	beq.n	e894 <_svfprintf_r+0x10c4>
    e900:	2a0a      	cmp	r2, #10
    e902:	f171 0100 	sbcs.w	r1, r1, #0
    e906:	f080 818f 	bcs.w	ec28 <_svfprintf_r+0x1458>
    e90a:	465c      	mov	r4, fp
    e90c:	ab50      	add	r3, sp, #320	; 0x140
    e90e:	1b1b      	subs	r3, r3, r4
    e910:	f8dd 9014 	ldr.w	r9, [sp, #20]
    e914:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    e918:	ee1a ba10 	vmov	fp, s20
    e91c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    e920:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e924:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    e928:	9305      	str	r3, [sp, #20]
    e92a:	f7ff bac2 	b.w	deb2 <_svfprintf_r+0x6e2>
    e92e:	ee1b 1a10 	vmov	r1, s22
    e932:	aa24      	add	r2, sp, #144	; 0x90
    e934:	4658      	mov	r0, fp
    e936:	f003 fdd7 	bl	124e8 <__ssprint_r>
    e93a:	2800      	cmp	r0, #0
    e93c:	f47f abad 	bne.w	e09a <_svfprintf_r+0x8ca>
    e940:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e944:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e946:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e94a:	f7ff b896 	b.w	da7a <_svfprintf_r+0x2aa>
    e94e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e950:	48be      	ldr	r0, [pc, #760]	; (ec4c <_svfprintf_r+0x147c>)
    e952:	f8ca 0000 	str.w	r0, [sl]
    e956:	3301      	adds	r3, #1
    e958:	3201      	adds	r2, #1
    e95a:	2001      	movs	r0, #1
    e95c:	2b07      	cmp	r3, #7
    e95e:	9226      	str	r2, [sp, #152]	; 0x98
    e960:	9325      	str	r3, [sp, #148]	; 0x94
    e962:	f8ca 0004 	str.w	r0, [sl, #4]
    e966:	f300 8177 	bgt.w	ec58 <_svfprintf_r+0x1488>
    e96a:	f10a 0a08 	add.w	sl, sl, #8
    e96e:	2900      	cmp	r1, #0
    e970:	f040 80af 	bne.w	ead2 <_svfprintf_r+0x1302>
    e974:	990e      	ldr	r1, [sp, #56]	; 0x38
    e976:	f008 0301 	and.w	r3, r8, #1
    e97a:	430b      	orrs	r3, r1
    e97c:	f43f a8c0 	beq.w	db00 <_svfprintf_r+0x330>
    e980:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e982:	9912      	ldr	r1, [sp, #72]	; 0x48
    e984:	441a      	add	r2, r3
    e986:	e9ca 1300 	strd	r1, r3, [sl]
    e98a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e98c:	9226      	str	r2, [sp, #152]	; 0x98
    e98e:	3301      	adds	r3, #1
    e990:	2b07      	cmp	r3, #7
    e992:	9325      	str	r3, [sp, #148]	; 0x94
    e994:	f300 8252 	bgt.w	ee3c <_svfprintf_r+0x166c>
    e998:	f10a 0a08 	add.w	sl, sl, #8
    e99c:	990e      	ldr	r1, [sp, #56]	; 0x38
    e99e:	f8ca 4000 	str.w	r4, [sl]
    e9a2:	3301      	adds	r3, #1
    e9a4:	440a      	add	r2, r1
    e9a6:	2b07      	cmp	r3, #7
    e9a8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e9ac:	f8ca 1004 	str.w	r1, [sl, #4]
    e9b0:	f77f a8a4 	ble.w	dafc <_svfprintf_r+0x32c>
    e9b4:	f7ff bbbd 	b.w	e132 <_svfprintf_r+0x962>
    e9b8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e9bc:	f000 80dd 	beq.w	eb7a <_svfprintf_r+0x13aa>
    e9c0:	9808      	ldr	r0, [sp, #32]
    e9c2:	f850 2b04 	ldr.w	r2, [r0], #4
    e9c6:	9008      	str	r0, [sp, #32]
    e9c8:	4619      	mov	r1, r3
    e9ca:	b292      	uxth	r2, r2
    e9cc:	e631      	b.n	e632 <_svfprintf_r+0xe62>
    e9ce:	ee1b 1a10 	vmov	r1, s22
    e9d2:	aa24      	add	r2, sp, #144	; 0x90
    e9d4:	4658      	mov	r0, fp
    e9d6:	f003 fd87 	bl	124e8 <__ssprint_r>
    e9da:	2800      	cmp	r0, #0
    e9dc:	f47f ab5d 	bne.w	e09a <_svfprintf_r+0x8ca>
    e9e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e9e2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e9e6:	f7ff baa3 	b.w	df30 <_svfprintf_r+0x760>
    e9ea:	ae22      	add	r6, sp, #136	; 0x88
    e9ec:	2208      	movs	r2, #8
    e9ee:	2100      	movs	r1, #0
    e9f0:	4630      	mov	r0, r6
    e9f2:	941d      	str	r4, [sp, #116]	; 0x74
    e9f4:	f7fc ffce 	bl	b994 <memset>
    e9f8:	9b03      	ldr	r3, [sp, #12]
    e9fa:	1c5a      	adds	r2, r3, #1
    e9fc:	f000 80db 	beq.w	ebb6 <_svfprintf_r+0x13e6>
    ea00:	2500      	movs	r5, #0
    ea02:	f8cd 9008 	str.w	r9, [sp, #8]
    ea06:	f8cd 801c 	str.w	r8, [sp, #28]
    ea0a:	4699      	mov	r9, r3
    ea0c:	46a8      	mov	r8, r5
    ea0e:	e00c      	b.n	ea2a <_svfprintf_r+0x125a>
    ea10:	a937      	add	r1, sp, #220	; 0xdc
    ea12:	4658      	mov	r0, fp
    ea14:	f003 fc3e 	bl	12294 <_wcrtomb_r>
    ea18:	1c43      	adds	r3, r0, #1
    ea1a:	4440      	add	r0, r8
    ea1c:	f000 83c8 	beq.w	f1b0 <_svfprintf_r+0x19e0>
    ea20:	4548      	cmp	r0, r9
    ea22:	dc08      	bgt.n	ea36 <_svfprintf_r+0x1266>
    ea24:	f000 8418 	beq.w	f258 <_svfprintf_r+0x1a88>
    ea28:	4680      	mov	r8, r0
    ea2a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    ea2c:	5952      	ldr	r2, [r2, r5]
    ea2e:	4633      	mov	r3, r6
    ea30:	3504      	adds	r5, #4
    ea32:	2a00      	cmp	r2, #0
    ea34:	d1ec      	bne.n	ea10 <_svfprintf_r+0x1240>
    ea36:	f8cd 8014 	str.w	r8, [sp, #20]
    ea3a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    ea3e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    ea42:	e0c5      	b.n	ebd0 <_svfprintf_r+0x1400>
    ea44:	3301      	adds	r3, #1
    ea46:	4982      	ldr	r1, [pc, #520]	; (ec50 <_svfprintf_r+0x1480>)
    ea48:	f8ca 4004 	str.w	r4, [sl, #4]
    ea4c:	4422      	add	r2, r4
    ea4e:	2b07      	cmp	r3, #7
    ea50:	f8ca 1000 	str.w	r1, [sl]
    ea54:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ea58:	f77f a850 	ble.w	dafc <_svfprintf_r+0x32c>
    ea5c:	f7ff bb69 	b.w	e132 <_svfprintf_r+0x962>
    ea60:	ee1b 1a10 	vmov	r1, s22
    ea64:	aa24      	add	r2, sp, #144	; 0x90
    ea66:	4658      	mov	r0, fp
    ea68:	f003 fd3e 	bl	124e8 <__ssprint_r>
    ea6c:	2800      	cmp	r0, #0
    ea6e:	f47f ab14 	bne.w	e09a <_svfprintf_r+0x8ca>
    ea72:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ea74:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea78:	f7ff b829 	b.w	dace <_svfprintf_r+0x2fe>
    ea7c:	aa24      	add	r2, sp, #144	; 0x90
    ea7e:	4658      	mov	r0, fp
    ea80:	9105      	str	r1, [sp, #20]
    ea82:	f003 fd31 	bl	124e8 <__ssprint_r>
    ea86:	2800      	cmp	r0, #0
    ea88:	f47f ab07 	bne.w	e09a <_svfprintf_r+0x8ca>
    ea8c:	f896 c000 	ldrb.w	ip, [r6]
    ea90:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ea92:	9905      	ldr	r1, [sp, #20]
    ea94:	a827      	add	r0, sp, #156	; 0x9c
    ea96:	e67d      	b.n	e794 <_svfprintf_r+0xfc4>
    ea98:	2b01      	cmp	r3, #1
    ea9a:	f8cd 8008 	str.w	r8, [sp, #8]
    ea9e:	f47f a9f3 	bne.w	de88 <_svfprintf_r+0x6b8>
    eaa2:	f7ff bb93 	b.w	e1cc <_svfprintf_r+0x9fc>
    eaa6:	9b08      	ldr	r3, [sp, #32]
    eaa8:	9904      	ldr	r1, [sp, #16]
    eaaa:	f853 2b04 	ldr.w	r2, [r3], #4
    eaae:	464c      	mov	r4, r9
    eab0:	6011      	str	r1, [r2, #0]
    eab2:	9308      	str	r3, [sp, #32]
    eab4:	f7fe bebe 	b.w	d834 <_svfprintf_r+0x64>
    eab8:	3301      	adds	r3, #1
    eaba:	4965      	ldr	r1, [pc, #404]	; (ec50 <_svfprintf_r+0x1480>)
    eabc:	f8ca 4004 	str.w	r4, [sl, #4]
    eac0:	4422      	add	r2, r4
    eac2:	2b07      	cmp	r3, #7
    eac4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eac8:	f8ca 1000 	str.w	r1, [sl]
    eacc:	f77f ab22 	ble.w	e114 <_svfprintf_r+0x944>
    ead0:	e47b      	b.n	e3ca <_svfprintf_r+0xbfa>
    ead2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ead4:	9812      	ldr	r0, [sp, #72]	; 0x48
    ead6:	441a      	add	r2, r3
    ead8:	e9ca 0300 	strd	r0, r3, [sl]
    eadc:	9b25      	ldr	r3, [sp, #148]	; 0x94
    eade:	9226      	str	r2, [sp, #152]	; 0x98
    eae0:	3301      	adds	r3, #1
    eae2:	2b07      	cmp	r3, #7
    eae4:	9325      	str	r3, [sp, #148]	; 0x94
    eae6:	f300 81a9 	bgt.w	ee3c <_svfprintf_r+0x166c>
    eaea:	f10a 0a08 	add.w	sl, sl, #8
    eaee:	2900      	cmp	r1, #0
    eaf0:	f6bf af54 	bge.w	e99c <_svfprintf_r+0x11cc>
    eaf4:	424d      	negs	r5, r1
    eaf6:	3110      	adds	r1, #16
    eaf8:	f280 830f 	bge.w	f11a <_svfprintf_r+0x194a>
    eafc:	ee1b 1a10 	vmov	r1, s22
    eb00:	2610      	movs	r6, #16
    eb02:	e005      	b.n	eb10 <_svfprintf_r+0x1340>
    eb04:	f10a 0a08 	add.w	sl, sl, #8
    eb08:	3d10      	subs	r5, #16
    eb0a:	2d10      	cmp	r5, #16
    eb0c:	f340 8305 	ble.w	f11a <_svfprintf_r+0x194a>
    eb10:	3301      	adds	r3, #1
    eb12:	484f      	ldr	r0, [pc, #316]	; (ec50 <_svfprintf_r+0x1480>)
    eb14:	3210      	adds	r2, #16
    eb16:	2b07      	cmp	r3, #7
    eb18:	e9ca 0600 	strd	r0, r6, [sl]
    eb1c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eb20:	ddf0      	ble.n	eb04 <_svfprintf_r+0x1334>
    eb22:	aa24      	add	r2, sp, #144	; 0x90
    eb24:	4658      	mov	r0, fp
    eb26:	9103      	str	r1, [sp, #12]
    eb28:	f003 fcde 	bl	124e8 <__ssprint_r>
    eb2c:	2800      	cmp	r0, #0
    eb2e:	f47f aab4 	bne.w	e09a <_svfprintf_r+0x8ca>
    eb32:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    eb36:	9903      	ldr	r1, [sp, #12]
    eb38:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eb3c:	e7e4      	b.n	eb08 <_svfprintf_r+0x1338>
    eb3e:	9b08      	ldr	r3, [sp, #32]
    eb40:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    eb44:	bf1a      	itte	ne
    eb46:	4611      	movne	r1, r2
    eb48:	f853 2b04 	ldrne.w	r2, [r3], #4
    eb4c:	f853 2b04 	ldreq.w	r2, [r3], #4
    eb50:	9308      	str	r3, [sp, #32]
    eb52:	bf18      	it	ne
    eb54:	b2d2      	uxtbne	r2, r2
    eb56:	f7ff b945 	b.w	dde4 <_svfprintf_r+0x614>
    eb5a:	9b02      	ldr	r3, [sp, #8]
    eb5c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    eb60:	9b08      	ldr	r3, [sp, #32]
    eb62:	bf1a      	itte	ne
    eb64:	4611      	movne	r1, r2
    eb66:	f853 2b04 	ldrne.w	r2, [r3], #4
    eb6a:	f853 2b04 	ldreq.w	r2, [r3], #4
    eb6e:	9308      	str	r3, [sp, #32]
    eb70:	bf18      	it	ne
    eb72:	b2d2      	uxtbne	r2, r2
    eb74:	2301      	movs	r3, #1
    eb76:	f7ff b8d0 	b.w	dd1a <_svfprintf_r+0x54a>
    eb7a:	9b08      	ldr	r3, [sp, #32]
    eb7c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    eb80:	bf1a      	itte	ne
    eb82:	4611      	movne	r1, r2
    eb84:	f853 2b04 	ldrne.w	r2, [r3], #4
    eb88:	f853 2b04 	ldreq.w	r2, [r3], #4
    eb8c:	9308      	str	r3, [sp, #32]
    eb8e:	bf18      	it	ne
    eb90:	b2d2      	uxtbne	r2, r2
    eb92:	e54e      	b.n	e632 <_svfprintf_r+0xe62>
    eb94:	468a      	mov	sl, r1
    eb96:	3301      	adds	r3, #1
    eb98:	492d      	ldr	r1, [pc, #180]	; (ec50 <_svfprintf_r+0x1480>)
    eb9a:	f8ca 5004 	str.w	r5, [sl, #4]
    eb9e:	442a      	add	r2, r5
    eba0:	2b07      	cmp	r3, #7
    eba2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eba6:	f8ca 1000 	str.w	r1, [sl]
    ebaa:	f300 8139 	bgt.w	ee20 <_svfprintf_r+0x1650>
    ebae:	f10a 0a08 	add.w	sl, sl, #8
    ebb2:	f7ff bb8c 	b.w	e2ce <_svfprintf_r+0xafe>
    ebb6:	2300      	movs	r3, #0
    ebb8:	4619      	mov	r1, r3
    ebba:	9600      	str	r6, [sp, #0]
    ebbc:	aa1d      	add	r2, sp, #116	; 0x74
    ebbe:	4658      	mov	r0, fp
    ebc0:	f003 fb8e 	bl	122e0 <_wcsrtombs_r>
    ebc4:	4603      	mov	r3, r0
    ebc6:	3301      	adds	r3, #1
    ebc8:	9005      	str	r0, [sp, #20]
    ebca:	f000 82f1 	beq.w	f1b0 <_svfprintf_r+0x19e0>
    ebce:	941d      	str	r4, [sp, #116]	; 0x74
    ebd0:	9b05      	ldr	r3, [sp, #20]
    ebd2:	2b00      	cmp	r3, #0
    ebd4:	d04e      	beq.n	ec74 <_svfprintf_r+0x14a4>
    ebd6:	2b63      	cmp	r3, #99	; 0x63
    ebd8:	f300 8118 	bgt.w	ee0c <_svfprintf_r+0x163c>
    ebdc:	2300      	movs	r3, #0
    ebde:	9307      	str	r3, [sp, #28]
    ebe0:	ac37      	add	r4, sp, #220	; 0xdc
    ebe2:	2208      	movs	r2, #8
    ebe4:	2100      	movs	r1, #0
    ebe6:	4630      	mov	r0, r6
    ebe8:	f7fc fed4 	bl	b994 <memset>
    ebec:	9d05      	ldr	r5, [sp, #20]
    ebee:	9600      	str	r6, [sp, #0]
    ebf0:	462b      	mov	r3, r5
    ebf2:	aa1d      	add	r2, sp, #116	; 0x74
    ebf4:	4621      	mov	r1, r4
    ebf6:	4658      	mov	r0, fp
    ebf8:	f003 fb72 	bl	122e0 <_wcsrtombs_r>
    ebfc:	4285      	cmp	r5, r0
    ebfe:	f040 837c 	bne.w	f2fa <_svfprintf_r+0x1b2a>
    ec02:	9a05      	ldr	r2, [sp, #20]
    ec04:	2300      	movs	r3, #0
    ec06:	54a3      	strb	r3, [r4, r2]
    ec08:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ec0c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ec10:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ec14:	9303      	str	r3, [sp, #12]
    ec16:	9202      	str	r2, [sp, #8]
    ec18:	930f      	str	r3, [sp, #60]	; 0x3c
    ec1a:	f7fe bfba 	b.w	db92 <_svfprintf_r+0x3c2>
    ec1e:	212d      	movs	r1, #45	; 0x2d
    ec20:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ec24:	f7fe bfa4 	b.w	db70 <_svfprintf_r+0x3a0>
    ec28:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ec2a:	9915      	ldr	r1, [sp, #84]	; 0x54
    ec2c:	ebab 0b03 	sub.w	fp, fp, r3
    ec30:	461a      	mov	r2, r3
    ec32:	4658      	mov	r0, fp
    ec34:	f7fc ff46 	bl	bac4 <strncpy>
    ec38:	f89a 2001 	ldrb.w	r2, [sl, #1]
    ec3c:	4b05      	ldr	r3, [pc, #20]	; (ec54 <_svfprintf_r+0x1484>)
    ec3e:	b10a      	cbz	r2, ec44 <_svfprintf_r+0x1474>
    ec40:	f10a 0a01 	add.w	sl, sl, #1
    ec44:	f04f 0c00 	mov.w	ip, #0
    ec48:	e628      	b.n	e89c <_svfprintf_r+0x10cc>
    ec4a:	bf00      	nop
    ec4c:	20000c70 	.word	0x20000c70
    ec50:	20008484 	.word	0x20008484
    ec54:	cccccccd 	.word	0xcccccccd
    ec58:	ee1b 1a10 	vmov	r1, s22
    ec5c:	aa24      	add	r2, sp, #144	; 0x90
    ec5e:	4658      	mov	r0, fp
    ec60:	f003 fc42 	bl	124e8 <__ssprint_r>
    ec64:	2800      	cmp	r0, #0
    ec66:	f47f aa18 	bne.w	e09a <_svfprintf_r+0x8ca>
    ec6a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ec6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ec6e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ec72:	e67c      	b.n	e96e <_svfprintf_r+0x119e>
    ec74:	9b05      	ldr	r3, [sp, #20]
    ec76:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ec7a:	930f      	str	r3, [sp, #60]	; 0x3c
    ec7c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    ec80:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ec84:	9307      	str	r3, [sp, #28]
    ec86:	f7fe bf84 	b.w	db92 <_svfprintf_r+0x3c2>
    ec8a:	990e      	ldr	r1, [sp, #56]	; 0x38
    ec8c:	9805      	ldr	r0, [sp, #20]
    ec8e:	1865      	adds	r5, r4, r1
    ec90:	1a2d      	subs	r5, r5, r0
    ec92:	1acc      	subs	r4, r1, r3
    ec94:	42a5      	cmp	r5, r4
    ec96:	bfa8      	it	ge
    ec98:	4625      	movge	r5, r4
    ec9a:	f7ff bb4d 	b.w	e338 <_svfprintf_r+0xb68>
    ec9e:	9b08      	ldr	r3, [sp, #32]
    eca0:	9904      	ldr	r1, [sp, #16]
    eca2:	f853 2b04 	ldr.w	r2, [r3], #4
    eca6:	9308      	str	r3, [sp, #32]
    eca8:	8011      	strh	r1, [r2, #0]
    ecaa:	464c      	mov	r4, r9
    ecac:	f7fe bdc2 	b.w	d834 <_svfprintf_r+0x64>
    ecb0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    ecb4:	9308      	str	r3, [sp, #32]
    ecb6:	17d1      	asrs	r1, r2, #31
    ecb8:	460b      	mov	r3, r1
    ecba:	f7fe bfdb 	b.w	dc74 <_svfprintf_r+0x4a4>
    ecbe:	9a03      	ldr	r2, [sp, #12]
    ecc0:	2102      	movs	r1, #2
    ecc2:	ab22      	add	r3, sp, #136	; 0x88
    ecc4:	9301      	str	r3, [sp, #4]
    ecc6:	ab1d      	add	r3, sp, #116	; 0x74
    ecc8:	9300      	str	r3, [sp, #0]
    ecca:	4658      	mov	r0, fp
    eccc:	ab1b      	add	r3, sp, #108	; 0x6c
    ecce:	eeb0 0b4a 	vmov.f64	d0, d10
    ecd2:	9202      	str	r2, [sp, #8]
    ecd4:	f002 fa14 	bl	11100 <_dtoa_r>
    ecd8:	2d47      	cmp	r5, #71	; 0x47
    ecda:	9a02      	ldr	r2, [sp, #8]
    ecdc:	4604      	mov	r4, r0
    ecde:	f000 8161 	beq.w	efa4 <_svfprintf_r+0x17d4>
    ece2:	2d46      	cmp	r5, #70	; 0x46
    ece4:	4410      	add	r0, r2
    ece6:	d105      	bne.n	ecf4 <_svfprintf_r+0x1524>
    ece8:	7823      	ldrb	r3, [r4, #0]
    ecea:	2b30      	cmp	r3, #48	; 0x30
    ecec:	f000 826f 	beq.w	f1ce <_svfprintf_r+0x19fe>
    ecf0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ecf2:	4410      	add	r0, r2
    ecf4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    ecf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ecfc:	f040 8146 	bne.w	ef8c <_svfprintf_r+0x17bc>
    ed00:	4603      	mov	r3, r0
    ed02:	1b1b      	subs	r3, r3, r4
    ed04:	930e      	str	r3, [sp, #56]	; 0x38
    ed06:	2d47      	cmp	r5, #71	; 0x47
    ed08:	f000 8110 	beq.w	ef2c <_svfprintf_r+0x175c>
    ed0c:	2d46      	cmp	r5, #70	; 0x46
    ed0e:	f000 81b5 	beq.w	f07c <_svfprintf_r+0x18ac>
    ed12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ed14:	930c      	str	r3, [sp, #48]	; 0x30
    ed16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ed18:	2d41      	cmp	r5, #65	; 0x41
    ed1a:	f103 33ff 	add.w	r3, r3, #4294967295
    ed1e:	931b      	str	r3, [sp, #108]	; 0x6c
    ed20:	f000 81e5 	beq.w	f0ee <_svfprintf_r+0x191e>
    ed24:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    ed28:	2100      	movs	r1, #0
    ed2a:	2b00      	cmp	r3, #0
    ed2c:	bfb8      	it	lt
    ed2e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    ed30:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    ed34:	bfba      	itte	lt
    ed36:	f1c3 0301 	rsblt	r3, r3, #1
    ed3a:	222d      	movlt	r2, #45	; 0x2d
    ed3c:	222b      	movge	r2, #43	; 0x2b
    ed3e:	2b09      	cmp	r3, #9
    ed40:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    ed44:	f340 81da 	ble.w	f0fc <_svfprintf_r+0x192c>
    ed48:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    ed4c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; f16c <_svfprintf_r+0x199c>
    ed50:	462a      	mov	r2, r5
    ed52:	4610      	mov	r0, r2
    ed54:	fb8c 2103 	smull	r2, r1, ip, r3
    ed58:	17da      	asrs	r2, r3, #31
    ed5a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    ed5e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    ed62:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    ed66:	3130      	adds	r1, #48	; 0x30
    ed68:	f800 1c01 	strb.w	r1, [r0, #-1]
    ed6c:	4619      	mov	r1, r3
    ed6e:	2963      	cmp	r1, #99	; 0x63
    ed70:	4613      	mov	r3, r2
    ed72:	f100 32ff 	add.w	r2, r0, #4294967295
    ed76:	dcec      	bgt.n	ed52 <_svfprintf_r+0x1582>
    ed78:	3330      	adds	r3, #48	; 0x30
    ed7a:	b2d9      	uxtb	r1, r3
    ed7c:	1e83      	subs	r3, r0, #2
    ed7e:	429d      	cmp	r5, r3
    ed80:	f802 1c01 	strb.w	r1, [r2, #-1]
    ed84:	f240 828b 	bls.w	f29e <_svfprintf_r+0x1ace>
    ed88:	4613      	mov	r3, r2
    ed8a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ed8e:	e001      	b.n	ed94 <_svfprintf_r+0x15c4>
    ed90:	f813 1b01 	ldrb.w	r1, [r3], #1
    ed94:	f802 1b01 	strb.w	r1, [r2], #1
    ed98:	429d      	cmp	r5, r3
    ed9a:	d1f9      	bne.n	ed90 <_svfprintf_r+0x15c0>
    ed9c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    eda0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    eda4:	1a1b      	subs	r3, r3, r0
    eda6:	4413      	add	r3, r2
    eda8:	aa1e      	add	r2, sp, #120	; 0x78
    edaa:	1a9b      	subs	r3, r3, r2
    edac:	9314      	str	r3, [sp, #80]	; 0x50
    edae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    edb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    edb2:	2b01      	cmp	r3, #1
    edb4:	441a      	add	r2, r3
    edb6:	9205      	str	r2, [sp, #20]
    edb8:	f340 8203 	ble.w	f1c2 <_svfprintf_r+0x19f2>
    edbc:	9b05      	ldr	r3, [sp, #20]
    edbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    edc0:	4413      	add	r3, r2
    edc2:	9305      	str	r3, [sp, #20]
    edc4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    edc8:	9a05      	ldr	r2, [sp, #20]
    edca:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    edce:	2300      	movs	r3, #0
    edd0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    edd4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    edd8:	930f      	str	r3, [sp, #60]	; 0x3c
    edda:	9202      	str	r2, [sp, #8]
    eddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    edde:	2b00      	cmp	r3, #0
    ede0:	f040 80b1 	bne.w	ef46 <_svfprintf_r+0x1776>
    ede4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ede8:	9303      	str	r3, [sp, #12]
    edea:	f7fe bed2 	b.w	db92 <_svfprintf_r+0x3c2>
    edee:	4620      	mov	r0, r4
    edf0:	f7fd f966 	bl	c0c0 <strlen>
    edf4:	4602      	mov	r2, r0
    edf6:	9005      	str	r0, [sp, #20]
    edf8:	f7fe bf20 	b.w	dc3c <_svfprintf_r+0x46c>
    edfc:	ee1b 1a10 	vmov	r1, s22
    ee00:	aa24      	add	r2, sp, #144	; 0x90
    ee02:	4658      	mov	r0, fp
    ee04:	f003 fb70 	bl	124e8 <__ssprint_r>
    ee08:	f7fe bded 	b.w	d9e6 <_svfprintf_r+0x216>
    ee0c:	1c59      	adds	r1, r3, #1
    ee0e:	4658      	mov	r0, fp
    ee10:	f7fa fe98 	bl	9b44 <_malloc_r>
    ee14:	4604      	mov	r4, r0
    ee16:	2800      	cmp	r0, #0
    ee18:	f000 81ca 	beq.w	f1b0 <_svfprintf_r+0x19e0>
    ee1c:	9007      	str	r0, [sp, #28]
    ee1e:	e6e0      	b.n	ebe2 <_svfprintf_r+0x1412>
    ee20:	ee1b 1a10 	vmov	r1, s22
    ee24:	aa24      	add	r2, sp, #144	; 0x90
    ee26:	4658      	mov	r0, fp
    ee28:	f003 fb5e 	bl	124e8 <__ssprint_r>
    ee2c:	2800      	cmp	r0, #0
    ee2e:	f47f a934 	bne.w	e09a <_svfprintf_r+0x8ca>
    ee32:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ee34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ee38:	f7ff ba49 	b.w	e2ce <_svfprintf_r+0xafe>
    ee3c:	ee1b 1a10 	vmov	r1, s22
    ee40:	aa24      	add	r2, sp, #144	; 0x90
    ee42:	4658      	mov	r0, fp
    ee44:	f003 fb50 	bl	124e8 <__ssprint_r>
    ee48:	2800      	cmp	r0, #0
    ee4a:	f47f a926 	bne.w	e09a <_svfprintf_r+0x8ca>
    ee4e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ee52:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ee54:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ee58:	e649      	b.n	eaee <_svfprintf_r+0x131e>
    ee5a:	2306      	movs	r3, #6
    ee5c:	9303      	str	r3, [sp, #12]
    ee5e:	f7ff bb83 	b.w	e568 <_svfprintf_r+0xd98>
    ee62:	9b03      	ldr	r3, [sp, #12]
    ee64:	2102      	movs	r1, #2
    ee66:	1c5a      	adds	r2, r3, #1
    ee68:	e72b      	b.n	ecc2 <_svfprintf_r+0x14f2>
    ee6a:	9a03      	ldr	r2, [sp, #12]
    ee6c:	2103      	movs	r1, #3
    ee6e:	e728      	b.n	ecc2 <_svfprintf_r+0x14f2>
    ee70:	a81b      	add	r0, sp, #108	; 0x6c
    ee72:	eeb0 0b4a 	vmov.f64	d0, d10
    ee76:	f002 f817 	bl	10ea8 <frexp>
    ee7a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    ee7e:	ee20 0b07 	vmul.f64	d0, d0, d7
    ee82:	eeb5 0b40 	vcmp.f64	d0, #0.0
    ee86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ee8a:	d101      	bne.n	ee90 <_svfprintf_r+0x16c0>
    ee8c:	2301      	movs	r3, #1
    ee8e:	931b      	str	r3, [sp, #108]	; 0x6c
    ee90:	48b3      	ldr	r0, [pc, #716]	; (f160 <_svfprintf_r+0x1990>)
    ee92:	9b03      	ldr	r3, [sp, #12]
    ee94:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    ee98:	3b01      	subs	r3, #1
    ee9a:	4622      	mov	r2, r4
    ee9c:	e004      	b.n	eea8 <_svfprintf_r+0x16d8>
    ee9e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    eea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eea6:	d013      	beq.n	eed0 <_svfprintf_r+0x1700>
    eea8:	ee20 0b05 	vmul.f64	d0, d0, d5
    eeac:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    eeb0:	f1b3 3fff 	cmp.w	r3, #4294967295
    eeb4:	ee17 1a90 	vmov	r1, s15
    eeb8:	5c41      	ldrb	r1, [r0, r1]
    eeba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    eebe:	4694      	mov	ip, r2
    eec0:	ee30 0b46 	vsub.f64	d0, d0, d6
    eec4:	f802 1b01 	strb.w	r1, [r2], #1
    eec8:	4619      	mov	r1, r3
    eeca:	f103 33ff 	add.w	r3, r3, #4294967295
    eece:	d1e6      	bne.n	ee9e <_svfprintf_r+0x16ce>
    eed0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    eed4:	eeb4 0bc6 	vcmpe.f64	d0, d6
    eed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eedc:	f300 8148 	bgt.w	f170 <_svfprintf_r+0x19a0>
    eee0:	eeb4 0b46 	vcmp.f64	d0, d6
    eee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eee8:	d104      	bne.n	eef4 <_svfprintf_r+0x1724>
    eeea:	ee17 3a90 	vmov	r3, s15
    eeee:	07db      	lsls	r3, r3, #31
    eef0:	f100 813e 	bmi.w	f170 <_svfprintf_r+0x19a0>
    eef4:	2900      	cmp	r1, #0
    eef6:	db06      	blt.n	ef06 <_svfprintf_r+0x1736>
    eef8:	1c4b      	adds	r3, r1, #1
    eefa:	4413      	add	r3, r2
    eefc:	2130      	movs	r1, #48	; 0x30
    eefe:	f802 1b01 	strb.w	r1, [r2], #1
    ef02:	4293      	cmp	r3, r2
    ef04:	d1fb      	bne.n	eefe <_svfprintf_r+0x172e>
    ef06:	1b13      	subs	r3, r2, r4
    ef08:	930e      	str	r3, [sp, #56]	; 0x38
    ef0a:	e6fc      	b.n	ed06 <_svfprintf_r+0x1536>
    ef0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ef0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ef10:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    ef14:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ef18:	9613      	str	r6, [sp, #76]	; 0x4c
    ef1a:	18e3      	adds	r3, r4, r3
    ef1c:	429d      	cmp	r5, r3
    ef1e:	4629      	mov	r1, r5
    ef20:	bf28      	it	cs
    ef22:	4619      	movcs	r1, r3
    ef24:	4682      	mov	sl, r0
    ef26:	9105      	str	r1, [sp, #20]
    ef28:	f7ff b9d8 	b.w	e2dc <_svfprintf_r+0xb0c>
    ef2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ef2e:	930c      	str	r3, [sp, #48]	; 0x30
    ef30:	1cda      	adds	r2, r3, #3
    ef32:	db02      	blt.n	ef3a <_svfprintf_r+0x176a>
    ef34:	9a03      	ldr	r2, [sp, #12]
    ef36:	4293      	cmp	r3, r2
    ef38:	dd0c      	ble.n	ef54 <_svfprintf_r+0x1784>
    ef3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ef3c:	3b02      	subs	r3, #2
    ef3e:	930b      	str	r3, [sp, #44]	; 0x2c
    ef40:	f023 0520 	bic.w	r5, r3, #32
    ef44:	e6e7      	b.n	ed16 <_svfprintf_r+0x1546>
    ef46:	212d      	movs	r1, #45	; 0x2d
    ef48:	2300      	movs	r3, #0
    ef4a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ef4e:	9303      	str	r3, [sp, #12]
    ef50:	f7fe be22 	b.w	db98 <_svfprintf_r+0x3c8>
    ef54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ef58:	4293      	cmp	r3, r2
    ef5a:	f2c0 80bd 	blt.w	f0d8 <_svfprintf_r+0x1908>
    ef5e:	07f0      	lsls	r0, r6, #31
    ef60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef62:	f140 8132 	bpl.w	f1ca <_svfprintf_r+0x19fa>
    ef66:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ef68:	4413      	add	r3, r2
    ef6a:	9305      	str	r3, [sp, #20]
    ef6c:	0571      	lsls	r1, r6, #21
    ef6e:	d503      	bpl.n	ef78 <_svfprintf_r+0x17a8>
    ef70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef72:	2b00      	cmp	r3, #0
    ef74:	f300 8135 	bgt.w	f1e2 <_svfprintf_r+0x1a12>
    ef78:	9b05      	ldr	r3, [sp, #20]
    ef7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ef7e:	9302      	str	r3, [sp, #8]
    ef80:	2367      	movs	r3, #103	; 0x67
    ef82:	930b      	str	r3, [sp, #44]	; 0x2c
    ef84:	2300      	movs	r3, #0
    ef86:	930f      	str	r3, [sp, #60]	; 0x3c
    ef88:	930d      	str	r3, [sp, #52]	; 0x34
    ef8a:	e727      	b.n	eddc <_svfprintf_r+0x160c>
    ef8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ef8e:	4283      	cmp	r3, r0
    ef90:	f4bf aeb7 	bcs.w	ed02 <_svfprintf_r+0x1532>
    ef94:	2130      	movs	r1, #48	; 0x30
    ef96:	1c5a      	adds	r2, r3, #1
    ef98:	9222      	str	r2, [sp, #136]	; 0x88
    ef9a:	7019      	strb	r1, [r3, #0]
    ef9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ef9e:	4298      	cmp	r0, r3
    efa0:	d8f9      	bhi.n	ef96 <_svfprintf_r+0x17c6>
    efa2:	e6ae      	b.n	ed02 <_svfprintf_r+0x1532>
    efa4:	07f3      	lsls	r3, r6, #31
    efa6:	f100 80a7 	bmi.w	f0f8 <_svfprintf_r+0x1928>
    efaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    efac:	e6a9      	b.n	ed02 <_svfprintf_r+0x1532>
    efae:	aa24      	add	r2, sp, #144	; 0x90
    efb0:	4658      	mov	r0, fp
    efb2:	9105      	str	r1, [sp, #20]
    efb4:	f003 fa98 	bl	124e8 <__ssprint_r>
    efb8:	2800      	cmp	r0, #0
    efba:	f47f a86e 	bne.w	e09a <_svfprintf_r+0x8ca>
    efbe:	f896 c000 	ldrb.w	ip, [r6]
    efc2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    efc4:	9905      	ldr	r1, [sp, #20]
    efc6:	a827      	add	r0, sp, #156	; 0x9c
    efc8:	4465      	add	r5, ip
    efca:	f7ff bbec 	b.w	e7a6 <_svfprintf_r+0xfd6>
    efce:	ee1b 1a10 	vmov	r1, s22
    efd2:	aa24      	add	r2, sp, #144	; 0x90
    efd4:	4658      	mov	r0, fp
    efd6:	f003 fa87 	bl	124e8 <__ssprint_r>
    efda:	2800      	cmp	r0, #0
    efdc:	f47f a85d 	bne.w	e09a <_svfprintf_r+0x8ca>
    efe0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    efe2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    efe6:	f7ff b96b 	b.w	e2c0 <_svfprintf_r+0xaf0>
    efea:	2378      	movs	r3, #120	; 0x78
    efec:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    eff0:	2330      	movs	r3, #48	; 0x30
    eff2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    eff6:	9b03      	ldr	r3, [sp, #12]
    eff8:	2b63      	cmp	r3, #99	; 0x63
    effa:	f048 0602 	orr.w	r6, r8, #2
    effe:	f300 80a6 	bgt.w	f14e <_svfprintf_r+0x197e>
    f002:	2300      	movs	r3, #0
    f004:	9307      	str	r3, [sp, #28]
    f006:	ac37      	add	r4, sp, #220	; 0xdc
    f008:	ee18 3a90 	vmov	r3, s17
    f00c:	2b00      	cmp	r3, #0
    f00e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    f012:	db2b      	blt.n	f06c <_svfprintf_r+0x189c>
    f014:	eeb0 ab48 	vmov.f64	d10, d8
    f018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f01a:	f023 0520 	bic.w	r5, r3, #32
    f01e:	2300      	movs	r3, #0
    f020:	9309      	str	r3, [sp, #36]	; 0x24
    f022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f024:	2b61      	cmp	r3, #97	; 0x61
    f026:	f47f aaad 	bne.w	e584 <_svfprintf_r+0xdb4>
    f02a:	eeb0 0b4a 	vmov.f64	d0, d10
    f02e:	a81b      	add	r0, sp, #108	; 0x6c
    f030:	f001 ff3a 	bl	10ea8 <frexp>
    f034:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    f038:	ee20 0b07 	vmul.f64	d0, d0, d7
    f03c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f044:	d101      	bne.n	f04a <_svfprintf_r+0x187a>
    f046:	2301      	movs	r3, #1
    f048:	931b      	str	r3, [sp, #108]	; 0x6c
    f04a:	4846      	ldr	r0, [pc, #280]	; (f164 <_svfprintf_r+0x1994>)
    f04c:	e721      	b.n	ee92 <_svfprintf_r+0x16c2>
    f04e:	ee1b 1a10 	vmov	r1, s22
    f052:	aa24      	add	r2, sp, #144	; 0x90
    f054:	4658      	mov	r0, fp
    f056:	f003 fa47 	bl	124e8 <__ssprint_r>
    f05a:	2800      	cmp	r0, #0
    f05c:	f47f a81d 	bne.w	e09a <_svfprintf_r+0x8ca>
    f060:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f062:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f064:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f068:	f7ff b94e 	b.w	e308 <_svfprintf_r+0xb38>
    f06c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f06e:	f023 0520 	bic.w	r5, r3, #32
    f072:	232d      	movs	r3, #45	; 0x2d
    f074:	9309      	str	r3, [sp, #36]	; 0x24
    f076:	eeb1 ab48 	vneg.f64	d10, d8
    f07a:	e7d2      	b.n	f022 <_svfprintf_r+0x1852>
    f07c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f07e:	920c      	str	r2, [sp, #48]	; 0x30
    f080:	2a00      	cmp	r2, #0
    f082:	f006 0301 	and.w	r3, r6, #1
    f086:	f340 810d 	ble.w	f2a4 <_svfprintf_r+0x1ad4>
    f08a:	9903      	ldr	r1, [sp, #12]
    f08c:	430b      	orrs	r3, r1
    f08e:	f040 80cf 	bne.w	f230 <_svfprintf_r+0x1a60>
    f092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f094:	9305      	str	r3, [sp, #20]
    f096:	2366      	movs	r3, #102	; 0x66
    f098:	930b      	str	r3, [sp, #44]	; 0x2c
    f09a:	0572      	lsls	r2, r6, #21
    f09c:	f100 80a3 	bmi.w	f1e6 <_svfprintf_r+0x1a16>
    f0a0:	9b05      	ldr	r3, [sp, #20]
    f0a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f0a6:	9302      	str	r3, [sp, #8]
    f0a8:	e76c      	b.n	ef84 <_svfprintf_r+0x17b4>
    f0aa:	ee1b 1a10 	vmov	r1, s22
    f0ae:	aa24      	add	r2, sp, #144	; 0x90
    f0b0:	4658      	mov	r0, fp
    f0b2:	f003 fa19 	bl	124e8 <__ssprint_r>
    f0b6:	2800      	cmp	r0, #0
    f0b8:	f47e afef 	bne.w	e09a <_svfprintf_r+0x8ca>
    f0bc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    f0be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f0c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f0c2:	1b1c      	subs	r4, r3, r4
    f0c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f0c8:	f7ff b936 	b.w	e338 <_svfprintf_r+0xb68>
    f0cc:	2358      	movs	r3, #88	; 0x58
    f0ce:	e78d      	b.n	efec <_svfprintf_r+0x181c>
    f0d0:	2200      	movs	r2, #0
    f0d2:	9203      	str	r2, [sp, #12]
    f0d4:	f7fe bbda 	b.w	d88c <_svfprintf_r+0xbc>
    f0d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f0da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f0dc:	189a      	adds	r2, r3, r2
    f0de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f0e0:	9205      	str	r2, [sp, #20]
    f0e2:	2b00      	cmp	r3, #0
    f0e4:	f340 80ab 	ble.w	f23e <_svfprintf_r+0x1a6e>
    f0e8:	2367      	movs	r3, #103	; 0x67
    f0ea:	930b      	str	r3, [sp, #44]	; 0x2c
    f0ec:	e7d5      	b.n	f09a <_svfprintf_r+0x18ca>
    f0ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f0f0:	320f      	adds	r2, #15
    f0f2:	b2d2      	uxtb	r2, r2
    f0f4:	2101      	movs	r1, #1
    f0f6:	e618      	b.n	ed2a <_svfprintf_r+0x155a>
    f0f8:	18a0      	adds	r0, r4, r2
    f0fa:	e5fb      	b.n	ecf4 <_svfprintf_r+0x1524>
    f0fc:	2900      	cmp	r1, #0
    f0fe:	f040 80a8 	bne.w	f252 <_svfprintf_r+0x1a82>
    f102:	2230      	movs	r2, #48	; 0x30
    f104:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    f108:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    f10c:	3330      	adds	r3, #48	; 0x30
    f10e:	f802 3b01 	strb.w	r3, [r2], #1
    f112:	ab1e      	add	r3, sp, #120	; 0x78
    f114:	1ad3      	subs	r3, r2, r3
    f116:	9314      	str	r3, [sp, #80]	; 0x50
    f118:	e649      	b.n	edae <_svfprintf_r+0x15de>
    f11a:	3301      	adds	r3, #1
    f11c:	4912      	ldr	r1, [pc, #72]	; (f168 <_svfprintf_r+0x1998>)
    f11e:	f8ca 5004 	str.w	r5, [sl, #4]
    f122:	442a      	add	r2, r5
    f124:	2b07      	cmp	r3, #7
    f126:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f12a:	f8ca 1000 	str.w	r1, [sl]
    f12e:	f77f ac33 	ble.w	e998 <_svfprintf_r+0x11c8>
    f132:	ee1b 1a10 	vmov	r1, s22
    f136:	aa24      	add	r2, sp, #144	; 0x90
    f138:	4658      	mov	r0, fp
    f13a:	f003 f9d5 	bl	124e8 <__ssprint_r>
    f13e:	2800      	cmp	r0, #0
    f140:	f47e afab 	bne.w	e09a <_svfprintf_r+0x8ca>
    f144:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f148:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f14c:	e426      	b.n	e99c <_svfprintf_r+0x11cc>
    f14e:	1c59      	adds	r1, r3, #1
    f150:	4658      	mov	r0, fp
    f152:	f7fa fcf7 	bl	9b44 <_malloc_r>
    f156:	4604      	mov	r4, r0
    f158:	b350      	cbz	r0, f1b0 <_svfprintf_r+0x19e0>
    f15a:	9007      	str	r0, [sp, #28]
    f15c:	e754      	b.n	f008 <_svfprintf_r+0x1838>
    f15e:	bf00      	nop
    f160:	20000c54 	.word	0x20000c54
    f164:	20000c40 	.word	0x20000c40
    f168:	20008484 	.word	0x20008484
    f16c:	66666667 	.word	0x66666667
    f170:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    f174:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    f178:	f890 c00f 	ldrb.w	ip, [r0, #15]
    f17c:	4561      	cmp	r1, ip
    f17e:	4613      	mov	r3, r2
    f180:	d10a      	bne.n	f198 <_svfprintf_r+0x19c8>
    f182:	f04f 0e30 	mov.w	lr, #48	; 0x30
    f186:	f803 ec01 	strb.w	lr, [r3, #-1]
    f18a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f18c:	1e59      	subs	r1, r3, #1
    f18e:	9122      	str	r1, [sp, #136]	; 0x88
    f190:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    f194:	458c      	cmp	ip, r1
    f196:	d0f6      	beq.n	f186 <_svfprintf_r+0x19b6>
    f198:	2939      	cmp	r1, #57	; 0x39
    f19a:	bf16      	itet	ne
    f19c:	3101      	addne	r1, #1
    f19e:	7a81      	ldrbeq	r1, [r0, #10]
    f1a0:	b2c9      	uxtbne	r1, r1
    f1a2:	f803 1c01 	strb.w	r1, [r3, #-1]
    f1a6:	e6ae      	b.n	ef06 <_svfprintf_r+0x1736>
    f1a8:	2300      	movs	r3, #0
    f1aa:	4690      	mov	r8, r2
    f1ac:	9307      	str	r3, [sp, #28]
    f1ae:	e760      	b.n	f072 <_svfprintf_r+0x18a2>
    f1b0:	ee1b 2a10 	vmov	r2, s22
    f1b4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    f1b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f1bc:	8193      	strh	r3, [r2, #12]
    f1be:	f7fe bc16 	b.w	d9ee <_svfprintf_r+0x21e>
    f1c2:	07f5      	lsls	r5, r6, #31
    f1c4:	f57f adfe 	bpl.w	edc4 <_svfprintf_r+0x15f4>
    f1c8:	e5f8      	b.n	edbc <_svfprintf_r+0x15ec>
    f1ca:	9305      	str	r3, [sp, #20]
    f1cc:	e6ce      	b.n	ef6c <_svfprintf_r+0x179c>
    f1ce:	eeb5 ab40 	vcmp.f64	d10, #0.0
    f1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1d6:	f43f ad8b 	beq.w	ecf0 <_svfprintf_r+0x1520>
    f1da:	f1c2 0201 	rsb	r2, r2, #1
    f1de:	921b      	str	r2, [sp, #108]	; 0x6c
    f1e0:	e587      	b.n	ecf2 <_svfprintf_r+0x1522>
    f1e2:	2367      	movs	r3, #103	; 0x67
    f1e4:	930b      	str	r3, [sp, #44]	; 0x2c
    f1e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f1e8:	780b      	ldrb	r3, [r1, #0]
    f1ea:	2bff      	cmp	r3, #255	; 0xff
    f1ec:	d079      	beq.n	f2e2 <_svfprintf_r+0x1b12>
    f1ee:	2500      	movs	r5, #0
    f1f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f1f2:	4628      	mov	r0, r5
    f1f4:	e003      	b.n	f1fe <_svfprintf_r+0x1a2e>
    f1f6:	3001      	adds	r0, #1
    f1f8:	3101      	adds	r1, #1
    f1fa:	2bff      	cmp	r3, #255	; 0xff
    f1fc:	d008      	beq.n	f210 <_svfprintf_r+0x1a40>
    f1fe:	4293      	cmp	r3, r2
    f200:	da06      	bge.n	f210 <_svfprintf_r+0x1a40>
    f202:	1ad2      	subs	r2, r2, r3
    f204:	784b      	ldrb	r3, [r1, #1]
    f206:	2b00      	cmp	r3, #0
    f208:	d1f5      	bne.n	f1f6 <_svfprintf_r+0x1a26>
    f20a:	780b      	ldrb	r3, [r1, #0]
    f20c:	3501      	adds	r5, #1
    f20e:	e7f4      	b.n	f1fa <_svfprintf_r+0x1a2a>
    f210:	920c      	str	r2, [sp, #48]	; 0x30
    f212:	9113      	str	r1, [sp, #76]	; 0x4c
    f214:	900d      	str	r0, [sp, #52]	; 0x34
    f216:	950f      	str	r5, [sp, #60]	; 0x3c
    f218:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f21c:	9916      	ldr	r1, [sp, #88]	; 0x58
    f21e:	4413      	add	r3, r2
    f220:	9a05      	ldr	r2, [sp, #20]
    f222:	fb01 2303 	mla	r3, r1, r3, r2
    f226:	9305      	str	r3, [sp, #20]
    f228:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f22c:	9302      	str	r3, [sp, #8]
    f22e:	e5d5      	b.n	eddc <_svfprintf_r+0x160c>
    f230:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f232:	18d3      	adds	r3, r2, r3
    f234:	4419      	add	r1, r3
    f236:	2366      	movs	r3, #102	; 0x66
    f238:	9105      	str	r1, [sp, #20]
    f23a:	930b      	str	r3, [sp, #44]	; 0x2c
    f23c:	e72d      	b.n	f09a <_svfprintf_r+0x18ca>
    f23e:	f1c3 0301 	rsb	r3, r3, #1
    f242:	441a      	add	r2, r3
    f244:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f248:	9302      	str	r3, [sp, #8]
    f24a:	2367      	movs	r3, #103	; 0x67
    f24c:	9205      	str	r2, [sp, #20]
    f24e:	930b      	str	r3, [sp, #44]	; 0x2c
    f250:	e698      	b.n	ef84 <_svfprintf_r+0x17b4>
    f252:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    f256:	e759      	b.n	f10c <_svfprintf_r+0x193c>
    f258:	9b03      	ldr	r3, [sp, #12]
    f25a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    f25e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f262:	9305      	str	r3, [sp, #20]
    f264:	e4b4      	b.n	ebd0 <_svfprintf_r+0x1400>
    f266:	ee18 3a90 	vmov	r3, s17
    f26a:	2b00      	cmp	r3, #0
    f26c:	bfb4      	ite	lt
    f26e:	212d      	movlt	r1, #45	; 0x2d
    f270:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    f274:	4c25      	ldr	r4, [pc, #148]	; (f30c <_svfprintf_r+0x1b3c>)
    f276:	4b26      	ldr	r3, [pc, #152]	; (f310 <_svfprintf_r+0x1b40>)
    f278:	bfb8      	it	lt
    f27a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    f27e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    f282:	f7fe bc79 	b.w	db78 <_svfprintf_r+0x3a8>
    f286:	9b03      	ldr	r3, [sp, #12]
    f288:	9302      	str	r3, [sp, #8]
    f28a:	9305      	str	r3, [sp, #20]
    f28c:	2373      	movs	r3, #115	; 0x73
    f28e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f292:	9003      	str	r0, [sp, #12]
    f294:	900f      	str	r0, [sp, #60]	; 0x3c
    f296:	900d      	str	r0, [sp, #52]	; 0x34
    f298:	930b      	str	r3, [sp, #44]	; 0x2c
    f29a:	f7fe bc7a 	b.w	db92 <_svfprintf_r+0x3c2>
    f29e:	2302      	movs	r3, #2
    f2a0:	9314      	str	r3, [sp, #80]	; 0x50
    f2a2:	e584      	b.n	edae <_svfprintf_r+0x15de>
    f2a4:	9a03      	ldr	r2, [sp, #12]
    f2a6:	4313      	orrs	r3, r2
    f2a8:	d105      	bne.n	f2b6 <_svfprintf_r+0x1ae6>
    f2aa:	2301      	movs	r3, #1
    f2ac:	2266      	movs	r2, #102	; 0x66
    f2ae:	9302      	str	r3, [sp, #8]
    f2b0:	920b      	str	r2, [sp, #44]	; 0x2c
    f2b2:	9305      	str	r3, [sp, #20]
    f2b4:	e666      	b.n	ef84 <_svfprintf_r+0x17b4>
    f2b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f2b8:	3301      	adds	r3, #1
    f2ba:	441a      	add	r2, r3
    f2bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f2c0:	9302      	str	r3, [sp, #8]
    f2c2:	2366      	movs	r3, #102	; 0x66
    f2c4:	9205      	str	r2, [sp, #20]
    f2c6:	930b      	str	r3, [sp, #44]	; 0x2c
    f2c8:	e65c      	b.n	ef84 <_svfprintf_r+0x17b4>
    f2ca:	9a08      	ldr	r2, [sp, #32]
    f2cc:	f899 3001 	ldrb.w	r3, [r9, #1]
    f2d0:	4689      	mov	r9, r1
    f2d2:	f852 1b04 	ldr.w	r1, [r2], #4
    f2d6:	9208      	str	r2, [sp, #32]
    f2d8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    f2dc:	9103      	str	r1, [sp, #12]
    f2de:	f7fe bad3 	b.w	d888 <_svfprintf_r+0xb8>
    f2e2:	2300      	movs	r3, #0
    f2e4:	930f      	str	r3, [sp, #60]	; 0x3c
    f2e6:	930d      	str	r3, [sp, #52]	; 0x34
    f2e8:	e796      	b.n	f218 <_svfprintf_r+0x1a48>
    f2ea:	230c      	movs	r3, #12
    f2ec:	f8cb 3000 	str.w	r3, [fp]
    f2f0:	f04f 33ff 	mov.w	r3, #4294967295
    f2f4:	9304      	str	r3, [sp, #16]
    f2f6:	f7fe bb81 	b.w	d9fc <_svfprintf_r+0x22c>
    f2fa:	ee1b 2a10 	vmov	r2, s22
    f2fe:	8993      	ldrh	r3, [r2, #12]
    f300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f304:	8193      	strh	r3, [r2, #12]
    f306:	f7fe bec8 	b.w	e09a <_svfprintf_r+0x8ca>
    f30a:	bf00      	nop
    f30c:	20000c3c 	.word	0x20000c3c
    f310:	20000594 	.word	0x20000594

0000f314 <__ssvfscanf_r>:
    f314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f318:	ed2d 8b02 	vpush	{d8}
    f31c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    f320:	468b      	mov	fp, r1
    f322:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    f326:	af02      	add	r7, sp, #8
    f328:	048c      	lsls	r4, r1, #18
    f32a:	4681      	mov	r9, r0
    f32c:	64fa      	str	r2, [r7, #76]	; 0x4c
    f32e:	633b      	str	r3, [r7, #48]	; 0x30
    f330:	d409      	bmi.n	f346 <__ssvfscanf_r+0x32>
    f332:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    f336:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    f33a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f33e:	f8ab 100c 	strh.w	r1, [fp, #12]
    f342:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    f346:	2300      	movs	r3, #0
    f348:	461c      	mov	r4, r3
    f34a:	2208      	movs	r2, #8
    f34c:	4619      	mov	r1, r3
    f34e:	f107 0058 	add.w	r0, r7, #88	; 0x58
    f352:	62fb      	str	r3, [r7, #44]	; 0x2c
    f354:	46a2      	mov	sl, r4
    f356:	f7fc fb1d 	bl	b994 <memset>
    f35a:	643c      	str	r4, [r7, #64]	; 0x40
    f35c:	627c      	str	r4, [r7, #36]	; 0x24
    f35e:	63bc      	str	r4, [r7, #56]	; 0x38
    f360:	647c      	str	r4, [r7, #68]	; 0x44
    f362:	4b83      	ldr	r3, [pc, #524]	; (f570 <__ssvfscanf_r+0x25c>)
    f364:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f368:	f7fc fbde 	bl	bb28 <__locale_mb_cur_max>
    f36c:	f107 0258 	add.w	r2, r7, #88	; 0x58
    f370:	4603      	mov	r3, r0
    f372:	9200      	str	r2, [sp, #0]
    f374:	f107 0154 	add.w	r1, r7, #84	; 0x54
    f378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    f37a:	4648      	mov	r0, r9
    f37c:	47a0      	blx	r4
    f37e:	1e05      	subs	r5, r0, #0
    f380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f382:	db33      	blt.n	f3ec <__ssvfscanf_r+0xd8>
    f384:	442b      	add	r3, r5
    f386:	64fb      	str	r3, [r7, #76]	; 0x4c
    f388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f38a:	462e      	mov	r6, r5
    f38c:	2b00      	cmp	r3, #0
    f38e:	f000 80b6 	beq.w	f4fe <__ssvfscanf_r+0x1ea>
    f392:	2d01      	cmp	r5, #1
    f394:	d038      	beq.n	f408 <__ssvfscanf_r+0xf4>
    f396:	2b25      	cmp	r3, #37	; 0x25
    f398:	d040      	beq.n	f41c <__ssvfscanf_r+0x108>
    f39a:	2d00      	cmp	r5, #0
    f39c:	d0e1      	beq.n	f362 <__ssvfscanf_r+0x4e>
    f39e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f3a0:	1b9e      	subs	r6, r3, r6
    f3a2:	f8db 3004 	ldr.w	r3, [fp, #4]
    f3a6:	1e74      	subs	r4, r6, #1
    f3a8:	2b00      	cmp	r3, #0
    f3aa:	f340 8098 	ble.w	f4de <__ssvfscanf_r+0x1ca>
    f3ae:	f8db 1000 	ldr.w	r1, [fp]
    f3b2:	f894 c001 	ldrb.w	ip, [r4, #1]
    f3b6:	f891 e000 	ldrb.w	lr, [r1]
    f3ba:	1ca3      	adds	r3, r4, #2
    f3bc:	eb0a 0003 	add.w	r0, sl, r3
    f3c0:	45e6      	cmp	lr, ip
    f3c2:	f101 0101 	add.w	r1, r1, #1
    f3c6:	eba3 0206 	sub.w	r2, r3, r6
    f3ca:	f104 0401 	add.w	r4, r4, #1
    f3ce:	eba0 0006 	sub.w	r0, r0, r6
    f3d2:	f040 8094 	bne.w	f4fe <__ssvfscanf_r+0x1ea>
    f3d6:	f8db 3004 	ldr.w	r3, [fp, #4]
    f3da:	f8cb 1000 	str.w	r1, [fp]
    f3de:	3b01      	subs	r3, #1
    f3e0:	42aa      	cmp	r2, r5
    f3e2:	f8cb 3004 	str.w	r3, [fp, #4]
    f3e6:	dbdf      	blt.n	f3a8 <__ssvfscanf_r+0x94>
    f3e8:	4682      	mov	sl, r0
    f3ea:	e7ba      	b.n	f362 <__ssvfscanf_r+0x4e>
    f3ec:	3301      	adds	r3, #1
    f3ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    f3f0:	2208      	movs	r2, #8
    f3f2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    f3f6:	2100      	movs	r1, #0
    f3f8:	f107 0058 	add.w	r0, r7, #88	; 0x58
    f3fc:	657b      	str	r3, [r7, #84]	; 0x54
    f3fe:	f7fc fac9 	bl	b994 <memset>
    f402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f404:	2b00      	cmp	r3, #0
    f406:	d07a      	beq.n	f4fe <__ssvfscanf_r+0x1ea>
    f408:	4e5a      	ldr	r6, [pc, #360]	; (f574 <__ssvfscanf_r+0x260>)
    f40a:	5cf2      	ldrb	r2, [r6, r3]
    f40c:	0710      	lsls	r0, r2, #28
    f40e:	f100 851c 	bmi.w	fe4a <__ssvfscanf_r+0xb36>
    f412:	2b25      	cmp	r3, #37	; 0x25
    f414:	f040 8086 	bne.w	f524 <__ssvfscanf_r+0x210>
    f418:	2501      	movs	r5, #1
    f41a:	462e      	mov	r6, r5
    f41c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    f41e:	2400      	movs	r4, #0
    f420:	7802      	ldrb	r2, [r0, #0]
    f422:	46a0      	mov	r8, r4
    f424:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    f428:	1c41      	adds	r1, r0, #1
    f42a:	2b55      	cmp	r3, #85	; 0x55
    f42c:	d867      	bhi.n	f4fe <__ssvfscanf_r+0x1ea>
    f42e:	e8df f013 	tbh	[pc, r3, lsl #1]
    f432:	070a      	.short	0x070a
    f434:	00660066 	.word	0x00660066
    f438:	00660066 	.word	0x00660066
    f43c:	00660701 	.word	0x00660701
    f440:	00660066 	.word	0x00660066
    f444:	00660066 	.word	0x00660066
    f448:	060c060c 	.word	0x060c060c
    f44c:	060c060c 	.word	0x060c060c
    f450:	060c060c 	.word	0x060c060c
    f454:	060c060c 	.word	0x060c060c
    f458:	060c060c 	.word	0x060c060c
    f45c:	00660066 	.word	0x00660066
    f460:	00660066 	.word	0x00660066
    f464:	00660066 	.word	0x00660066
    f468:	06180066 	.word	0x06180066
    f46c:	048e0066 	.word	0x048e0066
    f470:	061804c9 	.word	0x061804c9
    f474:	06180618 	.word	0x06180618
    f478:	00660066 	.word	0x00660066
    f47c:	00660066 	.word	0x00660066
    f480:	00660082 	.word	0x00660082
    f484:	04bf0066 	.word	0x04bf0066
    f488:	00660066 	.word	0x00660066
    f48c:	00890066 	.word	0x00890066
    f490:	00660066 	.word	0x00660066
    f494:	00660066 	.word	0x00660066
    f498:	0066066b 	.word	0x0066066b
    f49c:	06dd0066 	.word	0x06dd0066
    f4a0:	00660066 	.word	0x00660066
    f4a4:	00660066 	.word	0x00660066
    f4a8:	06180066 	.word	0x06180066
    f4ac:	04900066 	.word	0x04900066
    f4b0:	061804cb 	.word	0x061804cb
    f4b4:	06180618 	.word	0x06180618
    f4b8:	06d206be 	.word	0x06d206be
    f4bc:	00660082 	.word	0x00660082
    f4c0:	06f306e7 	.word	0x06f306e7
    f4c4:	04c106ac 	.word	0x04c106ac
    f4c8:	006606da 	.word	0x006606da
    f4cc:	008b0066 	.word	0x008b0066
    f4d0:	06ca007d 	.word	0x06ca007d
    f4d4:	00660066 	.word	0x00660066
    f4d8:	0066066b 	.word	0x0066066b
    f4dc:	007d      	.short	0x007d
    f4de:	4659      	mov	r1, fp
    f4e0:	4648      	mov	r0, r9
    f4e2:	f003 f8c1 	bl	12668 <__ssrefill_r>
    f4e6:	2800      	cmp	r0, #0
    f4e8:	f43f af61 	beq.w	f3ae <__ssvfscanf_r+0x9a>
    f4ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f4ee:	2b00      	cmp	r3, #0
    f4f0:	f001 8052 	beq.w	10598 <__ssvfscanf_r+0x1284>
    f4f4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    f4f8:	065a      	lsls	r2, r3, #25
    f4fa:	f101 804d 	bmi.w	10598 <__ssvfscanf_r+0x1284>
    f4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f500:	b143      	cbz	r3, f514 <__ssvfscanf_r+0x200>
    f502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f504:	f8d3 8000 	ldr.w	r8, [r3]
    f508:	f1b8 0f00 	cmp.w	r8, #0
    f50c:	d002      	beq.n	f514 <__ssvfscanf_r+0x200>
    f50e:	4640      	mov	r0, r8
    f510:	f7fa fb10 	bl	9b34 <free>
    f514:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f516:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    f51a:	46bd      	mov	sp, r7
    f51c:	ecbd 8b02 	vpop	{d8}
    f520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f526:	2501      	movs	r5, #1
    f528:	1e5e      	subs	r6, r3, #1
    f52a:	e73a      	b.n	f3a2 <__ssvfscanf_r+0x8e>
    f52c:	0723      	lsls	r3, r4, #28
    f52e:	d1e6      	bne.n	f4fe <__ssvfscanf_r+0x1ea>
    f530:	7842      	ldrb	r2, [r0, #1]
    f532:	4608      	mov	r0, r1
    f534:	e776      	b.n	f424 <__ssvfscanf_r+0x110>
    f536:	0722      	lsls	r2, r4, #28
    f538:	d1e1      	bne.n	f4fe <__ssvfscanf_r+0x1ea>
    f53a:	7842      	ldrb	r2, [r0, #1]
    f53c:	f044 0402 	orr.w	r4, r4, #2
    f540:	4608      	mov	r0, r1
    f542:	e76f      	b.n	f424 <__ssvfscanf_r+0x110>
    f544:	f044 0401 	orr.w	r4, r4, #1
    f548:	64f9      	str	r1, [r7, #76]	; 0x4c
    f54a:	2502      	movs	r5, #2
    f54c:	f8db 3004 	ldr.w	r3, [fp, #4]
    f550:	2b00      	cmp	r3, #0
    f552:	f340 8408 	ble.w	fd66 <__ssvfscanf_r+0xa52>
    f556:	0660      	lsls	r0, r4, #25
    f558:	f140 840f 	bpl.w	fd7a <__ssvfscanf_r+0xa66>
    f55c:	1e6b      	subs	r3, r5, #1
    f55e:	2b03      	cmp	r3, #3
    f560:	f201 80eb 	bhi.w	1073a <__ssvfscanf_r+0x1426>
    f564:	e8df f013 	tbh	[pc, r3, lsl #1]
    f568:	01f1027b 	.word	0x01f1027b
    f56c:	0008014b 	.word	0x0008014b
    f570:	200085f4 	.word	0x200085f4
    f574:	20000aa5 	.word	0x20000aa5
    f578:	4648      	mov	r0, r9
    f57a:	f001 fc8f 	bl	10e9c <_localeconv_r>
    f57e:	6803      	ldr	r3, [r0, #0]
    f580:	623b      	str	r3, [r7, #32]
    f582:	f108 33ff 	add.w	r3, r8, #4294967295
    f586:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f58a:	f240 855a 	bls.w	10042 <__ssvfscanf_r+0xd2e>
    f58e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    f592:	eb08 0305 	add.w	r3, r8, r5
    f596:	613b      	str	r3, [r7, #16]
    f598:	f240 185d 	movw	r8, #349	; 0x15d
    f59c:	2600      	movs	r6, #0
    f59e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f5a2:	ee08 9a10 	vmov	s16, r9
    f5a6:	e9c7 6605 	strd	r6, r6, [r7, #20]
    f5aa:	63fe      	str	r6, [r7, #60]	; 0x3c
    f5ac:	637e      	str	r6, [r7, #52]	; 0x34
    f5ae:	61fe      	str	r6, [r7, #28]
    f5b0:	64be      	str	r6, [r7, #72]	; 0x48
    f5b2:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    f5b6:	62bb      	str	r3, [r7, #40]	; 0x28
    f5b8:	461d      	mov	r5, r3
    f5ba:	4646      	mov	r6, r8
    f5bc:	f8db 1000 	ldr.w	r1, [fp]
    f5c0:	780a      	ldrb	r2, [r1, #0]
    f5c2:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    f5c6:	2b4e      	cmp	r3, #78	; 0x4e
    f5c8:	d850      	bhi.n	f66c <__ssvfscanf_r+0x358>
    f5ca:	e8df f013 	tbh	[pc, r3, lsl #1]
    f5ce:	037e      	.short	0x037e
    f5d0:	037e004f 	.word	0x037e004f
    f5d4:	004f004f 	.word	0x004f004f
    f5d8:	00a600a3 	.word	0x00a600a3
    f5dc:	00a600a6 	.word	0x00a600a6
    f5e0:	00a600a6 	.word	0x00a600a6
    f5e4:	00a600a6 	.word	0x00a600a6
    f5e8:	00a600a6 	.word	0x00a600a6
    f5ec:	004f004f 	.word	0x004f004f
    f5f0:	004f004f 	.word	0x004f004f
    f5f4:	004f004f 	.word	0x004f004f
    f5f8:	0374004f 	.word	0x0374004f
    f5fc:	030b030b 	.word	0x030b030b
    f600:	039e030b 	.word	0x039e030b
    f604:	004f0394 	.word	0x004f0394
    f608:	0384004f 	.word	0x0384004f
    f60c:	004f004f 	.word	0x004f004f
    f610:	004f004f 	.word	0x004f004f
    f614:	004f035d 	.word	0x004f035d
    f618:	004f033a 	.word	0x004f033a
    f61c:	004f004f 	.word	0x004f004f
    f620:	004f0333 	.word	0x004f0333
    f624:	004f004f 	.word	0x004f004f
    f628:	036d031e 	.word	0x036d031e
    f62c:	004f004f 	.word	0x004f004f
    f630:	004f004f 	.word	0x004f004f
    f634:	004f004f 	.word	0x004f004f
    f638:	0374004f 	.word	0x0374004f
    f63c:	030b030b 	.word	0x030b030b
    f640:	039e030b 	.word	0x039e030b
    f644:	004f0394 	.word	0x004f0394
    f648:	0384004f 	.word	0x0384004f
    f64c:	004f004f 	.word	0x004f004f
    f650:	004f004f 	.word	0x004f004f
    f654:	004f035d 	.word	0x004f035d
    f658:	004f033a 	.word	0x004f033a
    f65c:	004f004f 	.word	0x004f004f
    f660:	004f0333 	.word	0x004f0333
    f664:	004f004f 	.word	0x004f004f
    f668:	036d031e 	.word	0x036d031e
    f66c:	05a0      	lsls	r0, r4, #22
    f66e:	d56f      	bpl.n	f750 <__ssvfscanf_r+0x43c>
    f670:	6a38      	ldr	r0, [r7, #32]
    f672:	7803      	ldrb	r3, [r0, #0]
    f674:	4293      	cmp	r3, r2
    f676:	d16b      	bne.n	f750 <__ssvfscanf_r+0x43c>
    f678:	e9c7 4502 	strd	r4, r5, [r7, #8]
    f67c:	607e      	str	r6, [r7, #4]
    f67e:	4681      	mov	r9, r0
    f680:	ee18 6a10 	vmov	r6, s16
    f684:	f04f 0800 	mov.w	r8, #0
    f688:	465c      	mov	r4, fp
    f68a:	e007      	b.n	f69c <__ssvfscanf_r+0x388>
    f68c:	6021      	str	r1, [r4, #0]
    f68e:	f891 e000 	ldrb.w	lr, [r1]
    f692:	f899 0000 	ldrb.w	r0, [r9]
    f696:	4586      	cmp	lr, r0
    f698:	d11c      	bne.n	f6d4 <__ssvfscanf_r+0x3c0>
    f69a:	46da      	mov	sl, fp
    f69c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    f6a0:	4645      	mov	r5, r8
    f6a2:	f10a 0b01 	add.w	fp, sl, #1
    f6a6:	3101      	adds	r1, #1
    f6a8:	f108 0801 	add.w	r8, r8, #1
    f6ac:	2800      	cmp	r0, #0
    f6ae:	f000 8664 	beq.w	1037a <__ssvfscanf_r+0x1066>
    f6b2:	6860      	ldr	r0, [r4, #4]
    f6b4:	3801      	subs	r0, #1
    f6b6:	2800      	cmp	r0, #0
    f6b8:	6060      	str	r0, [r4, #4]
    f6ba:	dce7      	bgt.n	f68c <__ssvfscanf_r+0x378>
    f6bc:	4621      	mov	r1, r4
    f6be:	4630      	mov	r0, r6
    f6c0:	f002 ffd2 	bl	12668 <__ssrefill_r>
    f6c4:	b930      	cbnz	r0, f6d4 <__ssvfscanf_r+0x3c0>
    f6c6:	6821      	ldr	r1, [r4, #0]
    f6c8:	f899 0000 	ldrb.w	r0, [r9]
    f6cc:	f891 e000 	ldrb.w	lr, [r1]
    f6d0:	4586      	cmp	lr, r0
    f6d2:	d0e2      	beq.n	f69a <__ssvfscanf_r+0x386>
    f6d4:	46a3      	mov	fp, r4
    f6d6:	6a3a      	ldr	r2, [r7, #32]
    f6d8:	68bc      	ldr	r4, [r7, #8]
    f6da:	613d      	str	r5, [r7, #16]
    f6dc:	462b      	mov	r3, r5
    f6de:	46b1      	mov	r9, r6
    f6e0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f6e2:	68fd      	ldr	r5, [r7, #12]
    f6e4:	64bd      	str	r5, [r7, #72]	; 0x48
    f6e6:	3301      	adds	r3, #1
    f6e8:	465d      	mov	r5, fp
    f6ea:	eb02 0803 	add.w	r8, r2, r3
    f6ee:	46b3      	mov	fp, r6
    f6f0:	4626      	mov	r6, r4
    f6f2:	4614      	mov	r4, r2
    f6f4:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    f6f8:	462a      	mov	r2, r5
    f6fa:	4648      	mov	r0, r9
    f6fc:	f002 ff74 	bl	125e8 <_sungetc_r>
    f700:	4544      	cmp	r4, r8
    f702:	d1f7      	bne.n	f6f4 <__ssvfscanf_r+0x3e0>
    f704:	693b      	ldr	r3, [r7, #16]
    f706:	4634      	mov	r4, r6
    f708:	ebaa 0a03 	sub.w	sl, sl, r3
    f70c:	465e      	mov	r6, fp
    f70e:	46ab      	mov	fp, r5
    f710:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    f712:	e020      	b.n	f756 <__ssvfscanf_r+0x442>
    f714:	05e0      	lsls	r0, r4, #23
    f716:	f100 8501 	bmi.w	1011c <__ssvfscanf_r+0xe08>
    f71a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f71c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    f71e:	42d9      	cmn	r1, r3
    f720:	d116      	bne.n	f750 <__ssvfscanf_r+0x43c>
    f722:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    f726:	f805 2b01 	strb.w	r2, [r5], #1
    f72a:	3e01      	subs	r6, #1
    f72c:	f8db 3004 	ldr.w	r3, [fp, #4]
    f730:	3b01      	subs	r3, #1
    f732:	2b00      	cmp	r3, #0
    f734:	f10a 0a01 	add.w	sl, sl, #1
    f738:	f8cb 3004 	str.w	r3, [fp, #4]
    f73c:	f340 836f 	ble.w	fe1e <__ssvfscanf_r+0xb0a>
    f740:	f8db 3000 	ldr.w	r3, [fp]
    f744:	3301      	adds	r3, #1
    f746:	f8cb 3000 	str.w	r3, [fp]
    f74a:	2e00      	cmp	r6, #0
    f74c:	f47f af36 	bne.w	f5bc <__ssvfscanf_r+0x2a8>
    f750:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f752:	ee18 9a10 	vmov	r9, s16
    f756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f758:	2b00      	cmp	r3, #0
    f75a:	f040 82dc 	bne.w	fd16 <__ssvfscanf_r+0xa02>
    f75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f760:	3b01      	subs	r3, #1
    f762:	2b01      	cmp	r3, #1
    f764:	f241 8016 	bls.w	10794 <__ssvfscanf_r+0x1480>
    f768:	1e73      	subs	r3, r6, #1
    f76a:	2b06      	cmp	r3, #6
    f76c:	f240 8627 	bls.w	103be <__ssvfscanf_r+0x10aa>
    f770:	05e3      	lsls	r3, r4, #23
    f772:	d51b      	bpl.n	f7ac <__ssvfscanf_r+0x498>
    f774:	0566      	lsls	r6, r4, #21
    f776:	f101 80b5 	bmi.w	108e4 <__ssvfscanf_r+0x15d0>
    f77a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    f77e:	2965      	cmp	r1, #101	; 0x65
    f780:	f105 33ff 	add.w	r3, r5, #4294967295
    f784:	f10a 36ff 	add.w	r6, sl, #4294967295
    f788:	d00a      	beq.n	f7a0 <__ssvfscanf_r+0x48c>
    f78a:	2945      	cmp	r1, #69	; 0x45
    f78c:	d008      	beq.n	f7a0 <__ssvfscanf_r+0x48c>
    f78e:	465a      	mov	r2, fp
    f790:	4648      	mov	r0, r9
    f792:	f002 ff29 	bl	125e8 <_sungetc_r>
    f796:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    f79a:	f1aa 0602 	sub.w	r6, sl, #2
    f79e:	1eab      	subs	r3, r5, #2
    f7a0:	465a      	mov	r2, fp
    f7a2:	4648      	mov	r0, r9
    f7a4:	46b2      	mov	sl, r6
    f7a6:	461d      	mov	r5, r3
    f7a8:	f002 ff1e 	bl	125e8 <_sungetc_r>
    f7ac:	f014 0210 	ands.w	r2, r4, #16
    f7b0:	f47f add7 	bne.w	f362 <__ssvfscanf_r+0x4e>
    f7b4:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    f7b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f7bc:	702a      	strb	r2, [r5, #0]
    f7be:	f000 84d2 	beq.w	10166 <__ssvfscanf_r+0xe52>
    f7c2:	69bb      	ldr	r3, [r7, #24]
    f7c4:	2b00      	cmp	r3, #0
    f7c6:	f040 872c 	bne.w	10622 <__ssvfscanf_r+0x130e>
    f7ca:	4648      	mov	r0, r9
    f7cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f7ce:	2200      	movs	r2, #0
    f7d0:	f7fb fda6 	bl	b320 <_strtod_r>
    f7d4:	07e0      	lsls	r0, r4, #31
    f7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f7d8:	f100 85c9 	bmi.w	1036e <__ssvfscanf_r+0x105a>
    f7dc:	07a1      	lsls	r1, r4, #30
    f7de:	f100 85c6 	bmi.w	1036e <__ssvfscanf_r+0x105a>
    f7e2:	eeb4 0b40 	vcmp.f64	d0, d0
    f7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f7ea:	f853 4b04 	ldr.w	r4, [r3], #4
    f7ee:	f180 86f4 	bvs.w	105da <__ssvfscanf_r+0x12c6>
    f7f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f7f6:	633b      	str	r3, [r7, #48]	; 0x30
    f7f8:	ed84 0a00 	vstr	s0, [r4]
    f7fc:	e3a2      	b.n	ff44 <__ssvfscanf_r+0xc30>
    f7fe:	f108 33ff 	add.w	r3, r8, #4294967295
    f802:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f806:	f240 83a2 	bls.w	ff4e <__ssvfscanf_r+0xc3a>
    f80a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    f80e:	eb08 0302 	add.w	r3, r8, r2
    f812:	63fb      	str	r3, [r7, #60]	; 0x3c
    f814:	f240 185d 	movw	r8, #349	; 0x15d
    f818:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f81c:	2200      	movs	r2, #0
    f81e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    f820:	62bb      	str	r3, [r7, #40]	; 0x28
    f822:	4659      	mov	r1, fp
    f824:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    f828:	46d3      	mov	fp, sl
    f82a:	461d      	mov	r5, r3
    f82c:	4692      	mov	sl, r2
    f82e:	680a      	ldr	r2, [r1, #0]
    f830:	7810      	ldrb	r0, [r2, #0]
    f832:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    f836:	2b4d      	cmp	r3, #77	; 0x4d
    f838:	d860      	bhi.n	f8fc <__ssvfscanf_r+0x5e8>
    f83a:	e8df f013 	tbh	[pc, r3, lsl #1]
    f83e:	0282      	.short	0x0282
    f840:	0282005f 	.word	0x0282005f
    f844:	005f005f 	.word	0x005f005f
    f848:	01e002cd 	.word	0x01e002cd
    f84c:	01e001e0 	.word	0x01e001e0
    f850:	01e001e0 	.word	0x01e001e0
    f854:	01e001e0 	.word	0x01e001e0
    f858:	026f026f 	.word	0x026f026f
    f85c:	005f005f 	.word	0x005f005f
    f860:	005f005f 	.word	0x005f005f
    f864:	005f005f 	.word	0x005f005f
    f868:	004e005f 	.word	0x004e005f
    f86c:	004e004e 	.word	0x004e004e
    f870:	004e004e 	.word	0x004e004e
    f874:	005f004e 	.word	0x005f004e
    f878:	005f005f 	.word	0x005f005f
    f87c:	005f005f 	.word	0x005f005f
    f880:	005f005f 	.word	0x005f005f
    f884:	005f005f 	.word	0x005f005f
    f888:	005f005f 	.word	0x005f005f
    f88c:	005f005f 	.word	0x005f005f
    f890:	005f005f 	.word	0x005f005f
    f894:	005f005f 	.word	0x005f005f
    f898:	005f0276 	.word	0x005f0276
    f89c:	005f005f 	.word	0x005f005f
    f8a0:	005f005f 	.word	0x005f005f
    f8a4:	005f005f 	.word	0x005f005f
    f8a8:	004e005f 	.word	0x004e005f
    f8ac:	004e004e 	.word	0x004e004e
    f8b0:	004e004e 	.word	0x004e004e
    f8b4:	005f004e 	.word	0x005f004e
    f8b8:	005f005f 	.word	0x005f005f
    f8bc:	005f005f 	.word	0x005f005f
    f8c0:	005f005f 	.word	0x005f005f
    f8c4:	005f005f 	.word	0x005f005f
    f8c8:	005f005f 	.word	0x005f005f
    f8cc:	005f005f 	.word	0x005f005f
    f8d0:	005f005f 	.word	0x005f005f
    f8d4:	005f005f 	.word	0x005f005f
    f8d8:	0276      	.short	0x0276
    f8da:	2e0a      	cmp	r6, #10
    f8dc:	dd0e      	ble.n	f8fc <__ssvfscanf_r+0x5e8>
    f8de:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    f8e2:	684b      	ldr	r3, [r1, #4]
    f8e4:	f805 0b01 	strb.w	r0, [r5], #1
    f8e8:	3b01      	subs	r3, #1
    f8ea:	2b00      	cmp	r3, #0
    f8ec:	604b      	str	r3, [r1, #4]
    f8ee:	f340 828d 	ble.w	fe0c <__ssvfscanf_r+0xaf8>
    f8f2:	3201      	adds	r2, #1
    f8f4:	600a      	str	r2, [r1, #0]
    f8f6:	f1b8 0801 	subs.w	r8, r8, #1
    f8fa:	d198      	bne.n	f82e <__ssvfscanf_r+0x51a>
    f8fc:	05e0      	lsls	r0, r4, #23
    f8fe:	46d0      	mov	r8, sl
    f900:	63be      	str	r6, [r7, #56]	; 0x38
    f902:	46da      	mov	sl, fp
    f904:	468b      	mov	fp, r1
    f906:	d507      	bpl.n	f918 <__ssvfscanf_r+0x604>
    f908:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f90a:	429d      	cmp	r5, r3
    f90c:	f200 8422 	bhi.w	10154 <__ssvfscanf_r+0xe40>
    f910:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f912:	429d      	cmp	r5, r3
    f914:	f43f adf3 	beq.w	f4fe <__ssvfscanf_r+0x1ea>
    f918:	f014 0210 	ands.w	r2, r4, #16
    f91c:	d110      	bne.n	f940 <__ssvfscanf_r+0x62c>
    f91e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f922:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    f924:	702a      	strb	r2, [r5, #0]
    f926:	4648      	mov	r0, r9
    f928:	47b0      	blx	r6
    f92a:	06a1      	lsls	r1, r4, #26
    f92c:	f140 8408 	bpl.w	10140 <__ssvfscanf_r+0xe2c>
    f930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f932:	f853 2b04 	ldr.w	r2, [r3], #4
    f936:	6010      	str	r0, [r2, #0]
    f938:	633b      	str	r3, [r7, #48]	; 0x30
    f93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f93c:	3301      	adds	r3, #1
    f93e:	647b      	str	r3, [r7, #68]	; 0x44
    f940:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f942:	1aed      	subs	r5, r5, r3
    f944:	4445      	add	r5, r8
    f946:	44aa      	add	sl, r5
    f948:	e50b      	b.n	f362 <__ssvfscanf_r+0x4e>
    f94a:	f1b8 0f00 	cmp.w	r8, #0
    f94e:	bf08      	it	eq
    f950:	f04f 38ff 	moveq.w	r8, #4294967295
    f954:	07e0      	lsls	r0, r4, #31
    f956:	f140 8295 	bpl.w	fe84 <__ssvfscanf_r+0xb70>
    f95a:	f014 0310 	ands.w	r3, r4, #16
    f95e:	637b      	str	r3, [r7, #52]	; 0x34
    f960:	f040 8474 	bne.w	1024c <__ssvfscanf_r+0xf38>
    f964:	0621      	lsls	r1, r4, #24
    f966:	f140 8666 	bpl.w	10636 <__ssvfscanf_r+0x1322>
    f96a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    f96c:	f854 3b04 	ldr.w	r3, [r4], #4
    f970:	63fb      	str	r3, [r7, #60]	; 0x3c
    f972:	2b00      	cmp	r3, #0
    f974:	f43f adc3 	beq.w	f4fe <__ssvfscanf_r+0x1ea>
    f978:	2080      	movs	r0, #128	; 0x80
    f97a:	f7fa f8d3 	bl	9b24 <malloc>
    f97e:	64b8      	str	r0, [r7, #72]	; 0x48
    f980:	2800      	cmp	r0, #0
    f982:	f000 8778 	beq.w	10876 <__ssvfscanf_r+0x1562>
    f986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f988:	6cba      	ldr	r2, [r7, #72]	; 0x48
    f98a:	601a      	str	r2, [r3, #0]
    f98c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    f98e:	88d5      	ldrh	r5, [r2, #6]
    f990:	8893      	ldrh	r3, [r2, #4]
    f992:	429d      	cmp	r5, r3
    f994:	f080 8552 	bcs.w	1043c <__ssvfscanf_r+0x1128>
    f998:	6810      	ldr	r0, [r2, #0]
    f99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f99c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    f9a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f9a2:	633c      	str	r4, [r7, #48]	; 0x30
    f9a4:	3501      	adds	r5, #1
    f9a6:	80dd      	strh	r5, [r3, #6]
    f9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f9aa:	62bb      	str	r3, [r7, #40]	; 0x28
    f9ac:	2320      	movs	r3, #32
    f9ae:	623b      	str	r3, [r7, #32]
    f9b0:	f8db 3000 	ldr.w	r3, [fp]
    f9b4:	4eb1      	ldr	r6, [pc, #708]	; (fc7c <__ssvfscanf_r+0x968>)
    f9b6:	781b      	ldrb	r3, [r3, #0]
    f9b8:	5cf3      	ldrb	r3, [r6, r3]
    f9ba:	f013 0308 	ands.w	r3, r3, #8
    f9be:	f040 84bb 	bne.w	10338 <__ssvfscanf_r+0x1024>
    f9c2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    f9c4:	627e      	str	r6, [r7, #36]	; 0x24
    f9c6:	461d      	mov	r5, r3
    f9c8:	f7fc f8ae 	bl	bb28 <__locale_mb_cur_max>
    f9cc:	42a8      	cmp	r0, r5
    f9ce:	f43f ad8d 	beq.w	f4ec <__ssvfscanf_r+0x1d8>
    f9d2:	e9db 3200 	ldrd	r3, r2, [fp]
    f9d6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    f9da:	f813 1b01 	ldrb.w	r1, [r3], #1
    f9de:	5541      	strb	r1, [r0, r5]
    f9e0:	3a01      	subs	r2, #1
    f9e2:	2c03      	cmp	r4, #3
    f9e4:	e9cb 3200 	strd	r3, r2, [fp]
    f9e8:	f105 0501 	add.w	r5, r5, #1
    f9ec:	f107 0668 	add.w	r6, r7, #104	; 0x68
    f9f0:	d102      	bne.n	f9f8 <__ssvfscanf_r+0x6e4>
    f9f2:	6833      	ldr	r3, [r6, #0]
    f9f4:	2b04      	cmp	r3, #4
    f9f6:	d004      	beq.n	fa02 <__ssvfscanf_r+0x6ee>
    f9f8:	2208      	movs	r2, #8
    f9fa:	2100      	movs	r1, #0
    f9fc:	4630      	mov	r0, r6
    f9fe:	f7fb ffc9 	bl	b994 <memset>
    fa02:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    fa06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fa08:	9600      	str	r6, [sp, #0]
    fa0a:	462b      	mov	r3, r5
    fa0c:	4648      	mov	r0, r9
    fa0e:	f002 fc17 	bl	12240 <_mbrtowc_r>
    fa12:	1c42      	adds	r2, r0, #1
    fa14:	4604      	mov	r4, r0
    fa16:	f43f ad69 	beq.w	f4ec <__ssvfscanf_r+0x1d8>
    fa1a:	2800      	cmp	r0, #0
    fa1c:	f040 8478 	bne.w	10310 <__ssvfscanf_r+0xffc>
    fa20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fa22:	6018      	str	r0, [r3, #0]
    fa24:	f002 fc68 	bl	122f8 <iswspace>
    fa28:	2800      	cmp	r0, #0
    fa2a:	f040 865c 	bne.w	106e6 <__ssvfscanf_r+0x13d2>
    fa2e:	44aa      	add	sl, r5
    fa30:	f108 38ff 	add.w	r8, r8, #4294967295
    fa34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fa36:	2b00      	cmp	r3, #0
    fa38:	f040 8633 	bne.w	106a2 <__ssvfscanf_r+0x138e>
    fa3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fa3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fa40:	3304      	adds	r3, #4
    fa42:	64bb      	str	r3, [r7, #72]	; 0x48
    fa44:	2a00      	cmp	r2, #0
    fa46:	f000 862c 	beq.w	106a2 <__ssvfscanf_r+0x138e>
    fa4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fa4c:	1a9d      	subs	r5, r3, r2
    fa4e:	6a3b      	ldr	r3, [r7, #32]
    fa50:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    fa54:	f240 8756 	bls.w	10904 <__ssvfscanf_r+0x15f0>
    fa58:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    fa5a:	f000 bc5c 	b.w	10316 <__ssvfscanf_r+0x1002>
    fa5e:	f1b8 0f00 	cmp.w	r8, #0
    fa62:	bf08      	it	eq
    fa64:	f04f 38ff 	moveq.w	r8, #4294967295
    fa68:	07e0      	lsls	r0, r4, #31
    fa6a:	f140 827b 	bpl.w	ff64 <__ssvfscanf_r+0xc50>
    fa6e:	f014 0310 	ands.w	r3, r4, #16
    fa72:	62bb      	str	r3, [r7, #40]	; 0x28
    fa74:	f040 83f3 	bne.w	1025e <__ssvfscanf_r+0xf4a>
    fa78:	0621      	lsls	r1, r4, #24
    fa7a:	f140 85ed 	bpl.w	10658 <__ssvfscanf_r+0x1344>
    fa7e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    fa80:	f856 3b04 	ldr.w	r3, [r6], #4
    fa84:	623b      	str	r3, [r7, #32]
    fa86:	2b00      	cmp	r3, #0
    fa88:	f43f ad39 	beq.w	f4fe <__ssvfscanf_r+0x1ea>
    fa8c:	2080      	movs	r0, #128	; 0x80
    fa8e:	f7fa f849 	bl	9b24 <malloc>
    fa92:	4604      	mov	r4, r0
    fa94:	2800      	cmp	r0, #0
    fa96:	f000 86ee 	beq.w	10876 <__ssvfscanf_r+0x1562>
    fa9a:	6a3b      	ldr	r3, [r7, #32]
    fa9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fa9e:	6018      	str	r0, [r3, #0]
    faa0:	88d5      	ldrh	r5, [r2, #6]
    faa2:	8893      	ldrh	r3, [r2, #4]
    faa4:	429d      	cmp	r5, r3
    faa6:	f080 84dd 	bcs.w	10464 <__ssvfscanf_r+0x1150>
    faaa:	6810      	ldr	r0, [r2, #0]
    faac:	6a3b      	ldr	r3, [r7, #32]
    faae:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    fab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fab4:	633e      	str	r6, [r7, #48]	; 0x30
    fab6:	3501      	adds	r5, #1
    fab8:	80dd      	strh	r5, [r3, #6]
    faba:	2320      	movs	r3, #32
    fabc:	61fc      	str	r4, [r7, #28]
    fabe:	61bb      	str	r3, [r7, #24]
    fac0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    fac2:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    fac6:	2500      	movs	r5, #0
    fac8:	46c2      	mov	sl, r8
    faca:	46a0      	mov	r8, r4
    facc:	f7fc f82c 	bl	bb28 <__locale_mb_cur_max>
    fad0:	42a8      	cmp	r0, r5
    fad2:	f43f ad0b 	beq.w	f4ec <__ssvfscanf_r+0x1d8>
    fad6:	e9db 3200 	ldrd	r3, r2, [fp]
    fada:	f813 1b01 	ldrb.w	r1, [r3], #1
    fade:	3a01      	subs	r2, #1
    fae0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    fae4:	e9cb 3200 	strd	r3, r2, [fp]
    fae8:	2e03      	cmp	r6, #3
    faea:	f105 0301 	add.w	r3, r5, #1
    faee:	5541      	strb	r1, [r0, r5]
    faf0:	64bb      	str	r3, [r7, #72]	; 0x48
    faf2:	f107 0460 	add.w	r4, r7, #96	; 0x60
    faf6:	d102      	bne.n	fafe <__ssvfscanf_r+0x7ea>
    faf8:	6823      	ldr	r3, [r4, #0]
    fafa:	2b04      	cmp	r3, #4
    fafc:	d004      	beq.n	fb08 <__ssvfscanf_r+0x7f4>
    fafe:	2208      	movs	r2, #8
    fb00:	2100      	movs	r1, #0
    fb02:	4620      	mov	r0, r4
    fb04:	f7fb ff46 	bl	b994 <memset>
    fb08:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    fb0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fb0e:	9400      	str	r4, [sp, #0]
    fb10:	4641      	mov	r1, r8
    fb12:	4648      	mov	r0, r9
    fb14:	f002 fb94 	bl	12240 <_mbrtowc_r>
    fb18:	1c42      	adds	r2, r0, #1
    fb1a:	4606      	mov	r6, r0
    fb1c:	f43f ace6 	beq.w	f4ec <__ssvfscanf_r+0x1d8>
    fb20:	2800      	cmp	r0, #0
    fb22:	f040 82ca 	bne.w	100ba <__ssvfscanf_r+0xda6>
    fb26:	f8c8 0000 	str.w	r0, [r8]
    fb2a:	4605      	mov	r5, r0
    fb2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
    fb30:	2208      	movs	r2, #8
    fb32:	2100      	movs	r1, #0
    fb34:	4618      	mov	r0, r3
    fb36:	637b      	str	r3, [r7, #52]	; 0x34
    fb38:	f7fb ff2c 	bl	b994 <memset>
    fb3c:	4950      	ldr	r1, [pc, #320]	; (fc80 <__ssvfscanf_r+0x96c>)
    fb3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb40:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    fb44:	462a      	mov	r2, r5
    fb46:	4648      	mov	r0, r9
    fb48:	460d      	mov	r5, r1
    fb4a:	f107 0150 	add.w	r1, r7, #80	; 0x50
    fb4e:	47a8      	blx	r5
    fb50:	2801      	cmp	r0, #1
    fb52:	f000 83d5 	beq.w	10300 <__ssvfscanf_r+0xfec>
    fb56:	2200      	movs	r2, #0
    fb58:	f107 0370 	add.w	r3, r7, #112	; 0x70
    fb5c:	5c9b      	ldrb	r3, [r3, r2]
    fb5e:	2b00      	cmp	r3, #0
    fb60:	f000 85a1 	beq.w	106a6 <__ssvfscanf_r+0x1392>
    fb64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fb66:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fb68:	2e03      	cmp	r6, #3
    fb6a:	4413      	add	r3, r2
    fb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    fb6e:	f000 83ca 	beq.w	10306 <__ssvfscanf_r+0xff2>
    fb72:	f10a 3aff 	add.w	sl, sl, #4294967295
    fb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb78:	b95b      	cbnz	r3, fb92 <__ssvfscanf_r+0x87e>
    fb7a:	6a3b      	ldr	r3, [r7, #32]
    fb7c:	f108 0804 	add.w	r8, r8, #4
    fb80:	b13b      	cbz	r3, fb92 <__ssvfscanf_r+0x87e>
    fb82:	69fb      	ldr	r3, [r7, #28]
    fb84:	eba8 0403 	sub.w	r4, r8, r3
    fb88:	69bb      	ldr	r3, [r7, #24]
    fb8a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    fb8e:	f240 8405 	bls.w	1039c <__ssvfscanf_r+0x1088>
    fb92:	f8db 3004 	ldr.w	r3, [fp, #4]
    fb96:	2b00      	cmp	r3, #0
    fb98:	f04f 0500 	mov.w	r5, #0
    fb9c:	f340 8296 	ble.w	100cc <__ssvfscanf_r+0xdb8>
    fba0:	f1ba 0f00 	cmp.w	sl, #0
    fba4:	d192      	bne.n	facc <__ssvfscanf_r+0x7b8>
    fba6:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    fbaa:	627e      	str	r6, [r7, #36]	; 0x24
    fbac:	4644      	mov	r4, r8
    fbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbb0:	2b00      	cmp	r3, #0
    fbb2:	f47f abd6 	bne.w	f362 <__ssvfscanf_r+0x4e>
    fbb6:	6023      	str	r3, [r4, #0]
    fbb8:	6a3b      	ldr	r3, [r7, #32]
    fbba:	2b00      	cmp	r3, #0
    fbbc:	f000 81c2 	beq.w	ff44 <__ssvfscanf_r+0xc30>
    fbc0:	69fb      	ldr	r3, [r7, #28]
    fbc2:	69ba      	ldr	r2, [r7, #24]
    fbc4:	1ae1      	subs	r1, r4, r3
    fbc6:	108b      	asrs	r3, r1, #2
    fbc8:	3301      	adds	r3, #1
    fbca:	429a      	cmp	r2, r3
    fbcc:	f240 81ba 	bls.w	ff44 <__ssvfscanf_r+0xc30>
    fbd0:	6a3c      	ldr	r4, [r7, #32]
    fbd2:	3104      	adds	r1, #4
    fbd4:	6820      	ldr	r0, [r4, #0]
    fbd6:	f7fa fa71 	bl	a0bc <realloc>
    fbda:	2800      	cmp	r0, #0
    fbdc:	f000 81b2 	beq.w	ff44 <__ssvfscanf_r+0xc30>
    fbe0:	6020      	str	r0, [r4, #0]
    fbe2:	e1af      	b.n	ff44 <__ssvfscanf_r+0xc30>
    fbe4:	0521      	lsls	r1, r4, #20
    fbe6:	f57f adb3 	bpl.w	f750 <__ssvfscanf_r+0x43c>
    fbea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fbec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fbee:	185b      	adds	r3, r3, r1
    fbf0:	f47f adae 	bne.w	f750 <__ssvfscanf_r+0x43c>
    fbf4:	64bb      	str	r3, [r7, #72]	; 0x48
    fbf6:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    fbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    fbfc:	e593      	b.n	f726 <__ssvfscanf_r+0x412>
    fbfe:	4b21      	ldr	r3, [pc, #132]	; (fc84 <__ssvfscanf_r+0x970>)
    fc00:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    fc04:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    fc08:	e66b      	b.n	f8e2 <__ssvfscanf_r+0x5ce>
    fc0a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    fc0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    fc12:	f47f ad9d 	bne.w	f750 <__ssvfscanf_r+0x43c>
    fc16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fc18:	2b01      	cmp	r3, #1
    fc1a:	f47f ad99 	bne.w	f750 <__ssvfscanf_r+0x43c>
    fc1e:	2330      	movs	r3, #48	; 0x30
    fc20:	f805 3b01 	strb.w	r3, [r5], #1
    fc24:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    fc28:	2300      	movs	r3, #0
    fc2a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    fc2e:	3e01      	subs	r6, #1
    fc30:	637b      	str	r3, [r7, #52]	; 0x34
    fc32:	e578      	b.n	f726 <__ssvfscanf_r+0x412>
    fc34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fc36:	2b06      	cmp	r3, #6
    fc38:	f040 8574 	bne.w	10724 <__ssvfscanf_r+0x1410>
    fc3c:	2307      	movs	r3, #7
    fc3e:	64bb      	str	r3, [r7, #72]	; 0x48
    fc40:	e571      	b.n	f726 <__ssvfscanf_r+0x412>
    fc42:	0523      	lsls	r3, r4, #20
    fc44:	f57f ad84 	bpl.w	f750 <__ssvfscanf_r+0x43c>
    fc48:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    fc4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    fc50:	d005      	beq.n	fc5e <__ssvfscanf_r+0x94a>
    fc52:	0561      	lsls	r1, r4, #21
    fc54:	f57f ad7c 	bpl.w	f750 <__ssvfscanf_r+0x43c>
    fc58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fc5a:	2b00      	cmp	r3, #0
    fc5c:	d047      	beq.n	fcee <__ssvfscanf_r+0x9da>
    fc5e:	05a3      	lsls	r3, r4, #22
    fc60:	d404      	bmi.n	fc6c <__ssvfscanf_r+0x958>
    fc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fc64:	69f9      	ldr	r1, [r7, #28]
    fc66:	1a5b      	subs	r3, r3, r1
    fc68:	e9c7 5305 	strd	r5, r3, [r7, #20]
    fc6c:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    fc70:	2300      	movs	r3, #0
    fc72:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    fc76:	637b      	str	r3, [r7, #52]	; 0x34
    fc78:	e555      	b.n	f726 <__ssvfscanf_r+0x412>
    fc7a:	bf00      	nop
    fc7c:	20000aa5 	.word	0x20000aa5
    fc80:	200085f4 	.word	0x200085f4
    fc84:	200026c8 	.word	0x200026c8
    fc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fc8a:	2b00      	cmp	r3, #0
    fc8c:	f000 81ff 	beq.w	1008e <__ssvfscanf_r+0xd7a>
    fc90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fc92:	2b02      	cmp	r3, #2
    fc94:	f000 83b0 	beq.w	103f8 <__ssvfscanf_r+0x10e4>
    fc98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fc9a:	2b01      	cmp	r3, #1
    fc9c:	f000 81f1 	beq.w	10082 <__ssvfscanf_r+0xd6e>
    fca0:	2b04      	cmp	r3, #4
    fca2:	f000 81ee 	beq.w	10082 <__ssvfscanf_r+0xd6e>
    fca6:	e553      	b.n	f750 <__ssvfscanf_r+0x43c>
    fca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fcaa:	2b07      	cmp	r3, #7
    fcac:	f040 853a 	bne.w	10724 <__ssvfscanf_r+0x1410>
    fcb0:	2308      	movs	r3, #8
    fcb2:	64bb      	str	r3, [r7, #72]	; 0x48
    fcb4:	e537      	b.n	f726 <__ssvfscanf_r+0x412>
    fcb6:	0520      	lsls	r0, r4, #20
    fcb8:	f100 81f9 	bmi.w	100ae <__ssvfscanf_r+0xd9a>
    fcbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fcbe:	2b01      	cmp	r3, #1
    fcc0:	f47f ad46 	bne.w	f750 <__ssvfscanf_r+0x43c>
    fcc4:	2302      	movs	r3, #2
    fcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    fcc8:	e52d      	b.n	f726 <__ssvfscanf_r+0x412>
    fcca:	0623      	lsls	r3, r4, #24
    fccc:	f57f ad40 	bpl.w	f750 <__ssvfscanf_r+0x43c>
    fcd0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fcd4:	e527      	b.n	f726 <__ssvfscanf_r+0x412>
    fcd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fcd8:	2b00      	cmp	r3, #0
    fcda:	f040 81cc 	bne.w	10076 <__ssvfscanf_r+0xd62>
    fcde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fce0:	b9b3      	cbnz	r3, fd10 <__ssvfscanf_r+0x9fc>
    fce2:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    fce6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    fcea:	f000 8520 	beq.w	1072e <__ssvfscanf_r+0x141a>
    fcee:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    fcf0:	ee18 9a10 	vmov	r9, s16
    fcf4:	e533      	b.n	f75e <__ssvfscanf_r+0x44a>
    fcf6:	0521      	lsls	r1, r4, #20
    fcf8:	f100 81b7 	bmi.w	1006a <__ssvfscanf_r+0xd56>
    fcfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fcfe:	2b02      	cmp	r3, #2
    fd00:	f040 8510 	bne.w	10724 <__ssvfscanf_r+0x1410>
    fd04:	2303      	movs	r3, #3
    fd06:	64bb      	str	r3, [r7, #72]	; 0x48
    fd08:	e50d      	b.n	f726 <__ssvfscanf_r+0x412>
    fd0a:	0520      	lsls	r0, r4, #20
    fd0c:	d59c      	bpl.n	fc48 <__ssvfscanf_r+0x934>
    fd0e:	e76c      	b.n	fbea <__ssvfscanf_r+0x8d6>
    fd10:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    fd12:	ee18 9a10 	vmov	r9, s16
    fd16:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    fd1a:	e520      	b.n	f75e <__ssvfscanf_r+0x44a>
    fd1c:	4b8d      	ldr	r3, [pc, #564]	; (ff54 <__ssvfscanf_r+0xc40>)
    fd1e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    fd22:	2e08      	cmp	r6, #8
    fd24:	f73f addb 	bgt.w	f8de <__ssvfscanf_r+0x5ca>
    fd28:	e5e8      	b.n	f8fc <__ssvfscanf_r+0x5e8>
    fd2a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    fd2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    fd32:	f47f ade3 	bne.w	f8fc <__ssvfscanf_r+0x5e8>
    fd36:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    fd3a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    fd3e:	2610      	movs	r6, #16
    fd40:	e5cf      	b.n	f8e2 <__ssvfscanf_r+0x5ce>
    fd42:	0623      	lsls	r3, r4, #24
    fd44:	f57f adda 	bpl.w	f8fc <__ssvfscanf_r+0x5e8>
    fd48:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fd4c:	e5c9      	b.n	f8e2 <__ssvfscanf_r+0x5ce>
    fd4e:	f044 0401 	orr.w	r4, r4, #1
    fd52:	f8db 3004 	ldr.w	r3, [fp, #4]
    fd56:	64f9      	str	r1, [r7, #76]	; 0x4c
    fd58:	2b00      	cmp	r3, #0
    fd5a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    fd5e:	f04f 0500 	mov.w	r5, #0
    fd62:	f73f abf8 	bgt.w	f556 <__ssvfscanf_r+0x242>
    fd66:	4659      	mov	r1, fp
    fd68:	4648      	mov	r0, r9
    fd6a:	f002 fc7d 	bl	12668 <__ssrefill_r>
    fd6e:	2800      	cmp	r0, #0
    fd70:	f47f abbc 	bne.w	f4ec <__ssvfscanf_r+0x1d8>
    fd74:	0660      	lsls	r0, r4, #25
    fd76:	f53f abf1 	bmi.w	f55c <__ssvfscanf_r+0x248>
    fd7a:	f8db 2000 	ldr.w	r2, [fp]
    fd7e:	4e76      	ldr	r6, [pc, #472]	; (ff58 <__ssvfscanf_r+0xc44>)
    fd80:	7813      	ldrb	r3, [r2, #0]
    fd82:	5cf3      	ldrb	r3, [r6, r3]
    fd84:	0719      	lsls	r1, r3, #28
    fd86:	f57f abe9 	bpl.w	f55c <__ssvfscanf_r+0x248>
    fd8a:	f8db 3004 	ldr.w	r3, [fp, #4]
    fd8e:	3b01      	subs	r3, #1
    fd90:	2b00      	cmp	r3, #0
    fd92:	f10a 0a01 	add.w	sl, sl, #1
    fd96:	f8cb 3004 	str.w	r3, [fp, #4]
    fd9a:	f102 0201 	add.w	r2, r2, #1
    fd9e:	dd4a      	ble.n	fe36 <__ssvfscanf_r+0xb22>
    fda0:	f8cb 2000 	str.w	r2, [fp]
    fda4:	7813      	ldrb	r3, [r2, #0]
    fda6:	5cf3      	ldrb	r3, [r6, r3]
    fda8:	0719      	lsls	r1, r3, #28
    fdaa:	f57f abd7 	bpl.w	f55c <__ssvfscanf_r+0x248>
    fdae:	e7ec      	b.n	fd8a <__ssvfscanf_r+0xa76>
    fdb0:	f044 0401 	orr.w	r4, r4, #1
    fdb4:	4b69      	ldr	r3, [pc, #420]	; (ff5c <__ssvfscanf_r+0xc48>)
    fdb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    fdb8:	2308      	movs	r3, #8
    fdba:	64f9      	str	r1, [r7, #76]	; 0x4c
    fdbc:	63bb      	str	r3, [r7, #56]	; 0x38
    fdbe:	2503      	movs	r5, #3
    fdc0:	f7ff bbc4 	b.w	f54c <__ssvfscanf_r+0x238>
    fdc4:	f044 0401 	orr.w	r4, r4, #1
    fdc8:	4b65      	ldr	r3, [pc, #404]	; (ff60 <__ssvfscanf_r+0xc4c>)
    fdca:	62fb      	str	r3, [r7, #44]	; 0x2c
    fdcc:	230a      	movs	r3, #10
    fdce:	64f9      	str	r1, [r7, #76]	; 0x4c
    fdd0:	63bb      	str	r3, [r7, #56]	; 0x38
    fdd2:	2503      	movs	r5, #3
    fdd4:	f7ff bbba 	b.w	f54c <__ssvfscanf_r+0x238>
    fdd8:	0523      	lsls	r3, r4, #20
    fdda:	f57f ad82 	bpl.w	f8e2 <__ssvfscanf_r+0x5ce>
    fdde:	b916      	cbnz	r6, fde6 <__ssvfscanf_r+0xad2>
    fde0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    fde4:	2608      	movs	r6, #8
    fde6:	0563      	lsls	r3, r4, #21
    fde8:	f100 81a6 	bmi.w	10138 <__ssvfscanf_r+0xe24>
    fdec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fdee:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    fdf2:	b11b      	cbz	r3, fdfc <__ssvfscanf_r+0xae8>
    fdf4:	3b01      	subs	r3, #1
    fdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    fdf8:	f108 0801 	add.w	r8, r8, #1
    fdfc:	684b      	ldr	r3, [r1, #4]
    fdfe:	3b01      	subs	r3, #1
    fe00:	2b00      	cmp	r3, #0
    fe02:	f10a 0a01 	add.w	sl, sl, #1
    fe06:	604b      	str	r3, [r1, #4]
    fe08:	f73f ad73 	bgt.w	f8f2 <__ssvfscanf_r+0x5de>
    fe0c:	4648      	mov	r0, r9
    fe0e:	64b9      	str	r1, [r7, #72]	; 0x48
    fe10:	f002 fc2a 	bl	12668 <__ssrefill_r>
    fe14:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fe16:	2800      	cmp	r0, #0
    fe18:	f43f ad6d 	beq.w	f8f6 <__ssvfscanf_r+0x5e2>
    fe1c:	e56e      	b.n	f8fc <__ssvfscanf_r+0x5e8>
    fe1e:	ee18 0a10 	vmov	r0, s16
    fe22:	4659      	mov	r1, fp
    fe24:	f002 fc20 	bl	12668 <__ssrefill_r>
    fe28:	2800      	cmp	r0, #0
    fe2a:	f47f ac91 	bne.w	f750 <__ssvfscanf_r+0x43c>
    fe2e:	2e00      	cmp	r6, #0
    fe30:	f47f abc4 	bne.w	f5bc <__ssvfscanf_r+0x2a8>
    fe34:	e48c      	b.n	f750 <__ssvfscanf_r+0x43c>
    fe36:	4659      	mov	r1, fp
    fe38:	4648      	mov	r0, r9
    fe3a:	f002 fc15 	bl	12668 <__ssrefill_r>
    fe3e:	2800      	cmp	r0, #0
    fe40:	f47f ab54 	bne.w	f4ec <__ssvfscanf_r+0x1d8>
    fe44:	f8db 2000 	ldr.w	r2, [fp]
    fe48:	e79a      	b.n	fd80 <__ssvfscanf_r+0xa6c>
    fe4a:	f8db 2004 	ldr.w	r2, [fp, #4]
    fe4e:	e00f      	b.n	fe70 <__ssvfscanf_r+0xb5c>
    fe50:	f8db 3000 	ldr.w	r3, [fp]
    fe54:	781a      	ldrb	r2, [r3, #0]
    fe56:	5cb2      	ldrb	r2, [r6, r2]
    fe58:	0711      	lsls	r1, r2, #28
    fe5a:	f103 0301 	add.w	r3, r3, #1
    fe5e:	f57f aa80 	bpl.w	f362 <__ssvfscanf_r+0x4e>
    fe62:	f8db 2004 	ldr.w	r2, [fp, #4]
    fe66:	3a01      	subs	r2, #1
    fe68:	e9cb 3200 	strd	r3, r2, [fp]
    fe6c:	f10a 0a01 	add.w	sl, sl, #1
    fe70:	2a00      	cmp	r2, #0
    fe72:	dced      	bgt.n	fe50 <__ssvfscanf_r+0xb3c>
    fe74:	4659      	mov	r1, fp
    fe76:	4648      	mov	r0, r9
    fe78:	f002 fbf6 	bl	12668 <__ssrefill_r>
    fe7c:	2800      	cmp	r0, #0
    fe7e:	d0e7      	beq.n	fe50 <__ssvfscanf_r+0xb3c>
    fe80:	f7ff ba6f 	b.w	f362 <__ssvfscanf_r+0x4e>
    fe84:	06e1      	lsls	r1, r4, #27
    fe86:	f100 8349 	bmi.w	1051c <__ssvfscanf_r+0x1208>
    fe8a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    fe8e:	f000 83ab 	beq.w	105e8 <__ssvfscanf_r+0x12d4>
    fe92:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    fe94:	f854 6b04 	ldr.w	r6, [r4], #4
    fe98:	64be      	str	r6, [r7, #72]	; 0x48
    fe9a:	2e00      	cmp	r6, #0
    fe9c:	f43f ab2f 	beq.w	f4fe <__ssvfscanf_r+0x1ea>
    fea0:	2020      	movs	r0, #32
    fea2:	f7f9 fe3f 	bl	9b24 <malloc>
    fea6:	4605      	mov	r5, r0
    fea8:	2800      	cmp	r0, #0
    feaa:	f000 8462 	beq.w	10772 <__ssvfscanf_r+0x145e>
    feae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    feb0:	6030      	str	r0, [r6, #0]
    feb2:	8893      	ldrh	r3, [r2, #4]
    feb4:	88d6      	ldrh	r6, [r2, #6]
    feb6:	429e      	cmp	r6, r3
    feb8:	f080 82a8 	bcs.w	1040c <__ssvfscanf_r+0x10f8>
    febc:	6810      	ldr	r0, [r2, #0]
    febe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fec0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    fec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fec6:	633c      	str	r4, [r7, #48]	; 0x30
    fec8:	3601      	adds	r6, #1
    feca:	80de      	strh	r6, [r3, #6]
    fecc:	2320      	movs	r3, #32
    fece:	63fb      	str	r3, [r7, #60]	; 0x3c
    fed0:	f8db 2000 	ldr.w	r2, [fp]
    fed4:	4e20      	ldr	r6, [pc, #128]	; (ff58 <__ssvfscanf_r+0xc44>)
    fed6:	7811      	ldrb	r1, [r2, #0]
    fed8:	5c71      	ldrb	r1, [r6, r1]
    feda:	0708      	lsls	r0, r1, #28
    fedc:	f100 82ac 	bmi.w	10438 <__ssvfscanf_r+0x1124>
    fee0:	4633      	mov	r3, r6
    fee2:	462c      	mov	r4, r5
    fee4:	4610      	mov	r0, r2
    fee6:	462e      	mov	r6, r5
    fee8:	f8db 1004 	ldr.w	r1, [fp, #4]
    feec:	6cba      	ldr	r2, [r7, #72]	; 0x48
    feee:	3901      	subs	r1, #1
    fef0:	f8cb 1004 	str.w	r1, [fp, #4]
    fef4:	1c41      	adds	r1, r0, #1
    fef6:	f8cb 1000 	str.w	r1, [fp]
    fefa:	4635      	mov	r5, r6
    fefc:	7801      	ldrb	r1, [r0, #0]
    fefe:	f805 1b01 	strb.w	r1, [r5], #1
    ff02:	b122      	cbz	r2, ff0e <__ssvfscanf_r+0xbfa>
    ff04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ff06:	1b2e      	subs	r6, r5, r4
    ff08:	4296      	cmp	r6, r2
    ff0a:	f080 837a 	bcs.w	10602 <__ssvfscanf_r+0x12ee>
    ff0e:	f1b8 0801 	subs.w	r8, r8, #1
    ff12:	d00b      	beq.n	ff2c <__ssvfscanf_r+0xc18>
    ff14:	f8db 1004 	ldr.w	r1, [fp, #4]
    ff18:	2900      	cmp	r1, #0
    ff1a:	462e      	mov	r6, r5
    ff1c:	f340 83ae 	ble.w	1067c <__ssvfscanf_r+0x1368>
    ff20:	f8db 0000 	ldr.w	r0, [fp]
    ff24:	7801      	ldrb	r1, [r0, #0]
    ff26:	5c59      	ldrb	r1, [r3, r1]
    ff28:	0709      	lsls	r1, r1, #28
    ff2a:	d5dd      	bpl.n	fee8 <__ssvfscanf_r+0xbd4>
    ff2c:	1b29      	subs	r1, r5, r4
    ff2e:	448a      	add	sl, r1
    ff30:	3101      	adds	r1, #1
    ff32:	f04f 0300 	mov.w	r3, #0
    ff36:	702b      	strb	r3, [r5, #0]
    ff38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ff3a:	b11b      	cbz	r3, ff44 <__ssvfscanf_r+0xc30>
    ff3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ff3e:	428b      	cmp	r3, r1
    ff40:	f200 8394 	bhi.w	1066c <__ssvfscanf_r+0x1358>
    ff44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ff46:	3301      	adds	r3, #1
    ff48:	647b      	str	r3, [r7, #68]	; 0x44
    ff4a:	f7ff ba0a 	b.w	f362 <__ssvfscanf_r+0x4e>
    ff4e:	2300      	movs	r3, #0
    ff50:	63fb      	str	r3, [r7, #60]	; 0x3c
    ff52:	e461      	b.n	f818 <__ssvfscanf_r+0x504>
    ff54:	200026c8 	.word	0x200026c8
    ff58:	20000aa5 	.word	0x20000aa5
    ff5c:	00011f2d 	.word	0x00011f2d
    ff60:	0000b471 	.word	0x0000b471
    ff64:	06e6      	lsls	r6, r4, #27
    ff66:	f100 8181 	bmi.w	1026c <__ssvfscanf_r+0xf58>
    ff6a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    ff6e:	f000 836d 	beq.w	1064c <__ssvfscanf_r+0x1338>
    ff72:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    ff74:	f854 6b04 	ldr.w	r6, [r4], #4
    ff78:	64be      	str	r6, [r7, #72]	; 0x48
    ff7a:	2e00      	cmp	r6, #0
    ff7c:	f43f aabf 	beq.w	f4fe <__ssvfscanf_r+0x1ea>
    ff80:	2020      	movs	r0, #32
    ff82:	f7f9 fdcf 	bl	9b24 <malloc>
    ff86:	4605      	mov	r5, r0
    ff88:	2800      	cmp	r0, #0
    ff8a:	f000 83f2 	beq.w	10772 <__ssvfscanf_r+0x145e>
    ff8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ff90:	6030      	str	r0, [r6, #0]
    ff92:	8893      	ldrh	r3, [r2, #4]
    ff94:	88d6      	ldrh	r6, [r2, #6]
    ff96:	429e      	cmp	r6, r3
    ff98:	f080 827a 	bcs.w	10490 <__ssvfscanf_r+0x117c>
    ff9c:	6810      	ldr	r0, [r2, #0]
    ff9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ffa0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    ffa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ffa6:	633c      	str	r4, [r7, #48]	; 0x30
    ffa8:	3601      	adds	r6, #1
    ffaa:	80de      	strh	r6, [r3, #6]
    ffac:	2420      	movs	r4, #32
    ffae:	f8db 2000 	ldr.w	r2, [fp]
    ffb2:	f107 0370 	add.w	r3, r7, #112	; 0x70
    ffb6:	4619      	mov	r1, r3
    ffb8:	7813      	ldrb	r3, [r2, #0]
    ffba:	5ccb      	ldrb	r3, [r1, r3]
    ffbc:	2b00      	cmp	r3, #0
    ffbe:	f43f aa9e 	beq.w	f4fe <__ssvfscanf_r+0x1ea>
    ffc2:	ee08 9a10 	vmov	s16, r9
    ffc6:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
    ffca:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    ffce:	462e      	mov	r6, r5
    ffd0:	46a2      	mov	sl, r4
    ffd2:	4610      	mov	r0, r2
    ffd4:	460c      	mov	r4, r1
    ffd6:	f8db 1004 	ldr.w	r1, [fp, #4]
    ffda:	1c43      	adds	r3, r0, #1
    ffdc:	3901      	subs	r1, #1
    ffde:	e9cb 3100 	strd	r3, r1, [fp]
    ffe2:	4629      	mov	r1, r5
    ffe4:	7800      	ldrb	r0, [r0, #0]
    ffe6:	f801 0b01 	strb.w	r0, [r1], #1
    ffea:	f1b9 0f00 	cmp.w	r9, #0
    ffee:	d002      	beq.n	fff6 <__ssvfscanf_r+0xce2>
    fff0:	1b8d      	subs	r5, r1, r6
    fff2:	4555      	cmp	r5, sl
    fff4:	d27a      	bcs.n	100ec <__ssvfscanf_r+0xdd8>
    fff6:	460d      	mov	r5, r1
    fff8:	f1b8 0801 	subs.w	r8, r8, #1
    fffc:	d00a      	beq.n	10014 <__ssvfscanf_r+0xd00>
    fffe:	f8db 1004 	ldr.w	r1, [fp, #4]
   10002:	2900      	cmp	r1, #0
   10004:	f340 816a 	ble.w	102dc <__ssvfscanf_r+0xfc8>
   10008:	f8db 0000 	ldr.w	r0, [fp]
   1000c:	7801      	ldrb	r1, [r0, #0]
   1000e:	5c61      	ldrb	r1, [r4, r1]
   10010:	2900      	cmp	r1, #0
   10012:	d1e0      	bne.n	ffd6 <__ssvfscanf_r+0xcc2>
   10014:	4654      	mov	r4, sl
   10016:	ee18 9a10 	vmov	r9, s16
   1001a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1001e:	1bae      	subs	r6, r5, r6
   10020:	f43f aa6d 	beq.w	f4fe <__ssvfscanf_r+0x1ea>
   10024:	f04f 0300 	mov.w	r3, #0
   10028:	702b      	strb	r3, [r5, #0]
   1002a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1002c:	b11b      	cbz	r3, 10036 <__ssvfscanf_r+0xd22>
   1002e:	1c71      	adds	r1, r6, #1
   10030:	428c      	cmp	r4, r1
   10032:	f200 832d 	bhi.w	10690 <__ssvfscanf_r+0x137c>
   10036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10038:	3301      	adds	r3, #1
   1003a:	44b2      	add	sl, r6
   1003c:	647b      	str	r3, [r7, #68]	; 0x44
   1003e:	f7ff b990 	b.w	f362 <__ssvfscanf_r+0x4e>
   10042:	2300      	movs	r3, #0
   10044:	613b      	str	r3, [r7, #16]
   10046:	f7ff baa9 	b.w	f59c <__ssvfscanf_r+0x288>
   1004a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   1004e:	f47f aa56 	bne.w	f4fe <__ssvfscanf_r+0x1ea>
   10052:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   10056:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   1005a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   1005e:	f7ff ba67 	b.w	f530 <__ssvfscanf_r+0x21c>
   10062:	64f9      	str	r1, [r7, #76]	; 0x4c
   10064:	2504      	movs	r5, #4
   10066:	f7ff ba71 	b.w	f54c <__ssvfscanf_r+0x238>
   1006a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1006c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1006e:	185b      	adds	r3, r3, r1
   10070:	f47f ae44 	bne.w	fcfc <__ssvfscanf_r+0x9e8>
   10074:	e5be      	b.n	fbf4 <__ssvfscanf_r+0x8e0>
   10076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10078:	2b03      	cmp	r3, #3
   1007a:	d002      	beq.n	10082 <__ssvfscanf_r+0xd6e>
   1007c:	2b05      	cmp	r3, #5
   1007e:	f47f ab67 	bne.w	f750 <__ssvfscanf_r+0x43c>
   10082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10084:	3301      	adds	r3, #1
   10086:	b2db      	uxtb	r3, r3
   10088:	64bb      	str	r3, [r7, #72]	; 0x48
   1008a:	f7ff bb4c 	b.w	f726 <__ssvfscanf_r+0x412>
   1008e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10090:	2b00      	cmp	r3, #0
   10092:	f47f ae01 	bne.w	fc98 <__ssvfscanf_r+0x984>
   10096:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   1009a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1009e:	f47f adfb 	bne.w	fc98 <__ssvfscanf_r+0x984>
   100a2:	2301      	movs	r3, #1
   100a4:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   100a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   100aa:	f7ff bb3c 	b.w	f726 <__ssvfscanf_r+0x412>
   100ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   100b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   100b2:	185b      	adds	r3, r3, r1
   100b4:	f47f ae02 	bne.w	fcbc <__ssvfscanf_r+0x9a8>
   100b8:	e59c      	b.n	fbf4 <__ssvfscanf_r+0x8e0>
   100ba:	1c83      	adds	r3, r0, #2
   100bc:	f040 845b 	bne.w	10976 <__ssvfscanf_r+0x1662>
   100c0:	f8db 3004 	ldr.w	r3, [fp, #4]
   100c4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   100c6:	2b00      	cmp	r3, #0
   100c8:	f73f ad00 	bgt.w	facc <__ssvfscanf_r+0x7b8>
   100cc:	4659      	mov	r1, fp
   100ce:	4648      	mov	r0, r9
   100d0:	f002 faca 	bl	12668 <__ssrefill_r>
   100d4:	2800      	cmp	r0, #0
   100d6:	f43f ad63 	beq.w	fba0 <__ssvfscanf_r+0x88c>
   100da:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   100de:	627e      	str	r6, [r7, #36]	; 0x24
   100e0:	4644      	mov	r4, r8
   100e2:	2d00      	cmp	r5, #0
   100e4:	f43f ad63 	beq.w	fbae <__ssvfscanf_r+0x89a>
   100e8:	f7ff ba00 	b.w	f4ec <__ssvfscanf_r+0x1d8>
   100ec:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   100f0:	4630      	mov	r0, r6
   100f2:	4651      	mov	r1, sl
   100f4:	f7f9 ffe2 	bl	a0bc <realloc>
   100f8:	4606      	mov	r6, r0
   100fa:	2800      	cmp	r0, #0
   100fc:	f000 8339 	beq.w	10772 <__ssvfscanf_r+0x145e>
   10100:	4405      	add	r5, r0
   10102:	f8c9 0000 	str.w	r0, [r9]
   10106:	e777      	b.n	fff8 <__ssvfscanf_r+0xce4>
   10108:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   1010c:	4bbc      	ldr	r3, [pc, #752]	; (10400 <__ssvfscanf_r+0x10ec>)
   1010e:	62fb      	str	r3, [r7, #44]	; 0x2c
   10110:	2310      	movs	r3, #16
   10112:	64f9      	str	r1, [r7, #76]	; 0x4c
   10114:	63bb      	str	r3, [r7, #56]	; 0x38
   10116:	2503      	movs	r5, #3
   10118:	f7ff ba18 	b.w	f54c <__ssvfscanf_r+0x238>
   1011c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1011e:	3301      	adds	r3, #1
   10120:	637b      	str	r3, [r7, #52]	; 0x34
   10122:	693b      	ldr	r3, [r7, #16]
   10124:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10128:	2b00      	cmp	r3, #0
   1012a:	f43f aafe 	beq.w	f72a <__ssvfscanf_r+0x416>
   1012e:	693b      	ldr	r3, [r7, #16]
   10130:	3b01      	subs	r3, #1
   10132:	613b      	str	r3, [r7, #16]
   10134:	f7ff bafa 	b.w	f72c <__ssvfscanf_r+0x418>
   10138:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   1013c:	f7ff bbd1 	b.w	f8e2 <__ssvfscanf_r+0x5ce>
   10140:	0722      	lsls	r2, r4, #28
   10142:	f140 81c7 	bpl.w	104d4 <__ssvfscanf_r+0x11c0>
   10146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10148:	f853 2b04 	ldr.w	r2, [r3], #4
   1014c:	633b      	str	r3, [r7, #48]	; 0x30
   1014e:	7010      	strb	r0, [r2, #0]
   10150:	f7ff bbf3 	b.w	f93a <__ssvfscanf_r+0x626>
   10154:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   10158:	465a      	mov	r2, fp
   1015a:	4648      	mov	r0, r9
   1015c:	3d01      	subs	r5, #1
   1015e:	f002 fa43 	bl	125e8 <_sungetc_r>
   10162:	f7ff bbd5 	b.w	f910 <__ssvfscanf_r+0x5fc>
   10166:	69fb      	ldr	r3, [r7, #28]
   10168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1016a:	4293      	cmp	r3, r2
   1016c:	f43f ab2d 	beq.w	f7ca <__ssvfscanf_r+0x4b6>
   10170:	1a9a      	subs	r2, r3, r2
   10172:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   10176:	429d      	cmp	r5, r3
   10178:	bf28      	it	cs
   1017a:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   1017e:	49a1      	ldr	r1, [pc, #644]	; (10404 <__ssvfscanf_r+0x10f0>)
   10180:	4628      	mov	r0, r5
   10182:	f7fb fa61 	bl	b648 <sprintf>
   10186:	f7ff bb20 	b.w	f7ca <__ssvfscanf_r+0x4b6>
   1018a:	06e2      	lsls	r2, r4, #27
   1018c:	f100 8131 	bmi.w	103f2 <__ssvfscanf_r+0x10de>
   10190:	0723      	lsls	r3, r4, #28
   10192:	f100 81ba 	bmi.w	1050a <__ssvfscanf_r+0x11f6>
   10196:	0766      	lsls	r6, r4, #29
   10198:	f140 82b4 	bpl.w	10704 <__ssvfscanf_r+0x13f0>
   1019c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1019e:	64f9      	str	r1, [r7, #76]	; 0x4c
   101a0:	f853 2b04 	ldr.w	r2, [r3], #4
   101a4:	633b      	str	r3, [r7, #48]	; 0x30
   101a6:	f8a2 a000 	strh.w	sl, [r2]
   101aa:	f7ff b8da 	b.w	f362 <__ssvfscanf_r+0x4e>
   101ae:	0723      	lsls	r3, r4, #28
   101b0:	f47f a9a5 	bne.w	f4fe <__ssvfscanf_r+0x1ea>
   101b4:	7842      	ldrb	r2, [r0, #1]
   101b6:	2a68      	cmp	r2, #104	; 0x68
   101b8:	f000 8186 	beq.w	104c8 <__ssvfscanf_r+0x11b4>
   101bc:	f044 0404 	orr.w	r4, r4, #4
   101c0:	4608      	mov	r0, r1
   101c2:	f7ff b92f 	b.w	f424 <__ssvfscanf_r+0x110>
   101c6:	4b8e      	ldr	r3, [pc, #568]	; (10400 <__ssvfscanf_r+0x10ec>)
   101c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   101ca:	230a      	movs	r3, #10
   101cc:	64f9      	str	r1, [r7, #76]	; 0x4c
   101ce:	63bb      	str	r3, [r7, #56]	; 0x38
   101d0:	2503      	movs	r5, #3
   101d2:	f7ff b9bb 	b.w	f54c <__ssvfscanf_r+0x238>
   101d6:	4b8c      	ldr	r3, [pc, #560]	; (10408 <__ssvfscanf_r+0x10f4>)
   101d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   101da:	2300      	movs	r3, #0
   101dc:	64f9      	str	r1, [r7, #76]	; 0x4c
   101de:	63bb      	str	r3, [r7, #56]	; 0x38
   101e0:	2503      	movs	r5, #3
   101e2:	f7ff b9b3 	b.w	f54c <__ssvfscanf_r+0x238>
   101e6:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   101ea:	e78f      	b.n	1010c <__ssvfscanf_r+0xdf8>
   101ec:	f107 0070 	add.w	r0, r7, #112	; 0x70
   101f0:	f000 fdde 	bl	10db0 <__sccl>
   101f4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   101f8:	64f8      	str	r0, [r7, #76]	; 0x4c
   101fa:	2501      	movs	r5, #1
   101fc:	f7ff b9a6 	b.w	f54c <__ssvfscanf_r+0x238>
   10200:	0722      	lsls	r2, r4, #28
   10202:	f47f a97c 	bne.w	f4fe <__ssvfscanf_r+0x1ea>
   10206:	7842      	ldrb	r2, [r0, #1]
   10208:	2a6c      	cmp	r2, #108	; 0x6c
   1020a:	f000 8157 	beq.w	104bc <__ssvfscanf_r+0x11a8>
   1020e:	f044 0401 	orr.w	r4, r4, #1
   10212:	4608      	mov	r0, r1
   10214:	f7ff b906 	b.w	f424 <__ssvfscanf_r+0x110>
   10218:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   1021c:	f47f a96f 	bne.w	f4fe <__ssvfscanf_r+0x1ea>
   10220:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10222:	2a00      	cmp	r2, #0
   10224:	f000 81e7 	beq.w	105f6 <__ssvfscanf_r+0x12e2>
   10228:	7842      	ldrb	r2, [r0, #1]
   1022a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1022e:	4608      	mov	r0, r1
   10230:	f7ff b8f8 	b.w	f424 <__ssvfscanf_r+0x110>
   10234:	ea58 0804 	orrs.w	r8, r8, r4
   10238:	f47f a961 	bne.w	f4fe <__ssvfscanf_r+0x1ea>
   1023c:	7842      	ldrb	r2, [r0, #1]
   1023e:	2410      	movs	r4, #16
   10240:	4608      	mov	r0, r1
   10242:	f7ff b8ef 	b.w	f424 <__ssvfscanf_r+0x110>
   10246:	64f9      	str	r1, [r7, #76]	; 0x4c
   10248:	f7ff b8a7 	b.w	f39a <__ssvfscanf_r+0x86>
   1024c:	2300      	movs	r3, #0
   1024e:	623b      	str	r3, [r7, #32]
   10250:	62bb      	str	r3, [r7, #40]	; 0x28
   10252:	63fb      	str	r3, [r7, #60]	; 0x3c
   10254:	f107 0354 	add.w	r3, r7, #84	; 0x54
   10258:	64bb      	str	r3, [r7, #72]	; 0x48
   1025a:	f7ff bba9 	b.w	f9b0 <__ssvfscanf_r+0x69c>
   1025e:	2300      	movs	r3, #0
   10260:	e9c7 3306 	strd	r3, r3, [r7, #24]
   10264:	623b      	str	r3, [r7, #32]
   10266:	f107 0454 	add.w	r4, r7, #84	; 0x54
   1026a:	e429      	b.n	fac0 <__ssvfscanf_r+0x7ac>
   1026c:	f8db 3000 	ldr.w	r3, [fp]
   10270:	f107 0270 	add.w	r2, r7, #112	; 0x70
   10274:	4611      	mov	r1, r2
   10276:	781a      	ldrb	r2, [r3, #0]
   10278:	5c8a      	ldrb	r2, [r1, r2]
   1027a:	2a00      	cmp	r2, #0
   1027c:	f43f a93f 	beq.w	f4fe <__ssvfscanf_r+0x1ea>
   10280:	3301      	adds	r3, #1
   10282:	f8cb 3000 	str.w	r3, [fp]
   10286:	f8db 3004 	ldr.w	r3, [fp, #4]
   1028a:	f1b8 0f01 	cmp.w	r8, #1
   1028e:	f103 33ff 	add.w	r3, r3, #4294967295
   10292:	f8cb 3004 	str.w	r3, [fp, #4]
   10296:	bf18      	it	ne
   10298:	460c      	movne	r4, r1
   1029a:	d114      	bne.n	102c6 <__ssvfscanf_r+0xfb2>
   1029c:	f7ff bb53 	b.w	f946 <__ssvfscanf_r+0x632>
   102a0:	f8db 3000 	ldr.w	r3, [fp]
   102a4:	781a      	ldrb	r2, [r3, #0]
   102a6:	5ca2      	ldrb	r2, [r4, r2]
   102a8:	3301      	adds	r3, #1
   102aa:	2a00      	cmp	r2, #0
   102ac:	f43f ab4b 	beq.w	f946 <__ssvfscanf_r+0x632>
   102b0:	f8cb 3000 	str.w	r3, [fp]
   102b4:	f8db 3004 	ldr.w	r3, [fp, #4]
   102b8:	3501      	adds	r5, #1
   102ba:	3b01      	subs	r3, #1
   102bc:	4545      	cmp	r5, r8
   102be:	f8cb 3004 	str.w	r3, [fp, #4]
   102c2:	f43f ab40 	beq.w	f946 <__ssvfscanf_r+0x632>
   102c6:	2b00      	cmp	r3, #0
   102c8:	dcea      	bgt.n	102a0 <__ssvfscanf_r+0xf8c>
   102ca:	4659      	mov	r1, fp
   102cc:	4648      	mov	r0, r9
   102ce:	f002 f9cb 	bl	12668 <__ssrefill_r>
   102d2:	2800      	cmp	r0, #0
   102d4:	d0e4      	beq.n	102a0 <__ssvfscanf_r+0xf8c>
   102d6:	44aa      	add	sl, r5
   102d8:	f7ff b843 	b.w	f362 <__ssvfscanf_r+0x4e>
   102dc:	ee18 0a10 	vmov	r0, s16
   102e0:	4659      	mov	r1, fp
   102e2:	f002 f9c1 	bl	12668 <__ssrefill_r>
   102e6:	2800      	cmp	r0, #0
   102e8:	f43f ae8e 	beq.w	10008 <__ssvfscanf_r+0xcf4>
   102ec:	42b5      	cmp	r5, r6
   102ee:	4654      	mov	r4, sl
   102f0:	ee18 9a10 	vmov	r9, s16
   102f4:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   102f8:	f47f ae91 	bne.w	1001e <__ssvfscanf_r+0xd0a>
   102fc:	f7ff b8f6 	b.w	f4ec <__ssvfscanf_r+0x1d8>
   10300:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   10304:	e428      	b.n	fb58 <__ssvfscanf_r+0x844>
   10306:	6823      	ldr	r3, [r4, #0]
   10308:	2b04      	cmp	r3, #4
   1030a:	f47f ac32 	bne.w	fb72 <__ssvfscanf_r+0x85e>
   1030e:	e432      	b.n	fb76 <__ssvfscanf_r+0x862>
   10310:	1c83      	adds	r3, r0, #2
   10312:	f040 8339 	bne.w	10988 <__ssvfscanf_r+0x1674>
   10316:	f8db 3004 	ldr.w	r3, [fp, #4]
   1031a:	2b00      	cmp	r3, #0
   1031c:	f340 81d7 	ble.w	106ce <__ssvfscanf_r+0x13ba>
   10320:	f8db 3000 	ldr.w	r3, [fp]
   10324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10326:	781b      	ldrb	r3, [r3, #0]
   10328:	5cd3      	ldrb	r3, [r2, r3]
   1032a:	0718      	lsls	r0, r3, #28
   1032c:	d403      	bmi.n	10336 <__ssvfscanf_r+0x1022>
   1032e:	f1b8 0f00 	cmp.w	r8, #0
   10332:	f47f ab49 	bne.w	f9c8 <__ssvfscanf_r+0x6b4>
   10336:	627c      	str	r4, [r7, #36]	; 0x24
   10338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1033a:	2b00      	cmp	r3, #0
   1033c:	f47f a811 	bne.w	f362 <__ssvfscanf_r+0x4e>
   10340:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10342:	6013      	str	r3, [r2, #0]
   10344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10346:	2b00      	cmp	r3, #0
   10348:	f43f adfc 	beq.w	ff44 <__ssvfscanf_r+0xc30>
   1034c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1034e:	1ad1      	subs	r1, r2, r3
   10350:	108b      	asrs	r3, r1, #2
   10352:	6a3a      	ldr	r2, [r7, #32]
   10354:	3301      	adds	r3, #1
   10356:	429a      	cmp	r2, r3
   10358:	f67f adf4 	bls.w	ff44 <__ssvfscanf_r+0xc30>
   1035c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   1035e:	3104      	adds	r1, #4
   10360:	6820      	ldr	r0, [r4, #0]
   10362:	f7f9 feab 	bl	a0bc <realloc>
   10366:	2800      	cmp	r0, #0
   10368:	f47f ac3a 	bne.w	fbe0 <__ssvfscanf_r+0x8cc>
   1036c:	e5ea      	b.n	ff44 <__ssvfscanf_r+0xc30>
   1036e:	f853 2b04 	ldr.w	r2, [r3], #4
   10372:	ed82 0b00 	vstr	d0, [r2]
   10376:	633b      	str	r3, [r7, #48]	; 0x30
   10378:	e5e4      	b.n	ff44 <__ssvfscanf_r+0xc30>
   1037a:	68fd      	ldr	r5, [r7, #12]
   1037c:	6a39      	ldr	r1, [r7, #32]
   1037e:	687e      	ldr	r6, [r7, #4]
   10380:	4628      	mov	r0, r5
   10382:	4642      	mov	r2, r8
   10384:	46a3      	mov	fp, r4
   10386:	68bc      	ldr	r4, [r7, #8]
   10388:	f000 fd56 	bl	10e38 <stpncpy>
   1038c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1038e:	61fb      	str	r3, [r7, #28]
   10390:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   10394:	3e01      	subs	r6, #1
   10396:	4605      	mov	r5, r0
   10398:	f7ff b9c8 	b.w	f72c <__ssvfscanf_r+0x418>
   1039c:	69f8      	ldr	r0, [r7, #28]
   1039e:	00d9      	lsls	r1, r3, #3
   103a0:	461d      	mov	r5, r3
   103a2:	f7f9 fe8b 	bl	a0bc <realloc>
   103a6:	61f8      	str	r0, [r7, #28]
   103a8:	2800      	cmp	r0, #0
   103aa:	f000 8264 	beq.w	10876 <__ssvfscanf_r+0x1562>
   103ae:	6a3a      	ldr	r2, [r7, #32]
   103b0:	006b      	lsls	r3, r5, #1
   103b2:	eb00 0804 	add.w	r8, r0, r4
   103b6:	6010      	str	r0, [r2, #0]
   103b8:	61bb      	str	r3, [r7, #24]
   103ba:	f7ff bbea 	b.w	fb92 <__ssvfscanf_r+0x87e>
   103be:	2e02      	cmp	r6, #2
   103c0:	f240 82c4 	bls.w	1094c <__ssvfscanf_r+0x1638>
   103c4:	2e03      	cmp	r6, #3
   103c6:	f43f a9d3 	beq.w	f770 <__ssvfscanf_r+0x45c>
   103ca:	3e04      	subs	r6, #4
   103cc:	fa5f f886 	uxtb.w	r8, r6
   103d0:	ea6f 0308 	mvn.w	r3, r8
   103d4:	18ee      	adds	r6, r5, r3
   103d6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   103da:	465a      	mov	r2, fp
   103dc:	4648      	mov	r0, r9
   103de:	f002 f903 	bl	125e8 <_sungetc_r>
   103e2:	42ae      	cmp	r6, r5
   103e4:	d1f7      	bne.n	103d6 <__ssvfscanf_r+0x10c2>
   103e6:	f10a 3aff 	add.w	sl, sl, #4294967295
   103ea:	ebaa 0a08 	sub.w	sl, sl, r8
   103ee:	f7ff b9bf 	b.w	f770 <__ssvfscanf_r+0x45c>
   103f2:	64f9      	str	r1, [r7, #76]	; 0x4c
   103f4:	f7fe bfb5 	b.w	f362 <__ssvfscanf_r+0x4e>
   103f8:	2303      	movs	r3, #3
   103fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   103fc:	f7ff b993 	b.w	f726 <__ssvfscanf_r+0x412>
   10400:	00011f2d 	.word	0x00011f2d
   10404:	20000a9c 	.word	0x20000a9c
   10408:	0000b471 	.word	0x0000b471
   1040c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10410:	4293      	cmp	r3, r2
   10412:	f200 8297 	bhi.w	10944 <__ssvfscanf_r+0x1630>
   10416:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10418:	3308      	adds	r3, #8
   1041a:	b29b      	uxth	r3, r3
   1041c:	6810      	ldr	r0, [r2, #0]
   1041e:	63f8      	str	r0, [r7, #60]	; 0x3c
   10420:	0099      	lsls	r1, r3, #2
   10422:	637b      	str	r3, [r7, #52]	; 0x34
   10424:	f7f9 fe4a 	bl	a0bc <realloc>
   10428:	2800      	cmp	r0, #0
   1042a:	f000 827b 	beq.w	10924 <__ssvfscanf_r+0x1610>
   1042e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10432:	8093      	strh	r3, [r2, #4]
   10434:	6010      	str	r0, [r2, #0]
   10436:	e542      	b.n	febe <__ssvfscanf_r+0xbaa>
   10438:	2101      	movs	r1, #1
   1043a:	e57a      	b.n	ff32 <__ssvfscanf_r+0xc1e>
   1043c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10440:	4293      	cmp	r3, r2
   10442:	f200 8293 	bhi.w	1096c <__ssvfscanf_r+0x1658>
   10446:	3308      	adds	r3, #8
   10448:	b29e      	uxth	r6, r3
   1044a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1044c:	00b1      	lsls	r1, r6, #2
   1044e:	6818      	ldr	r0, [r3, #0]
   10450:	f7f9 fe34 	bl	a0bc <realloc>
   10454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10456:	2800      	cmp	r0, #0
   10458:	f000 823e 	beq.w	108d8 <__ssvfscanf_r+0x15c4>
   1045c:	809e      	strh	r6, [r3, #4]
   1045e:	6018      	str	r0, [r3, #0]
   10460:	f7ff ba9b 	b.w	f99a <__ssvfscanf_r+0x686>
   10464:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10468:	4293      	cmp	r3, r2
   1046a:	f200 827f 	bhi.w	1096c <__ssvfscanf_r+0x1658>
   1046e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10470:	3308      	adds	r3, #8
   10472:	b29b      	uxth	r3, r3
   10474:	0099      	lsls	r1, r3, #2
   10476:	6810      	ldr	r0, [r2, #0]
   10478:	64bb      	str	r3, [r7, #72]	; 0x48
   1047a:	f7f9 fe1f 	bl	a0bc <realloc>
   1047e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10480:	2800      	cmp	r0, #0
   10482:	f000 8228 	beq.w	108d6 <__ssvfscanf_r+0x15c2>
   10486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10488:	8093      	strh	r3, [r2, #4]
   1048a:	6010      	str	r0, [r2, #0]
   1048c:	f7ff bb0e 	b.w	faac <__ssvfscanf_r+0x798>
   10490:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10494:	4293      	cmp	r3, r2
   10496:	f200 8255 	bhi.w	10944 <__ssvfscanf_r+0x1630>
   1049a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1049c:	3308      	adds	r3, #8
   1049e:	b29b      	uxth	r3, r3
   104a0:	6810      	ldr	r0, [r2, #0]
   104a2:	63f8      	str	r0, [r7, #60]	; 0x3c
   104a4:	0099      	lsls	r1, r3, #2
   104a6:	637b      	str	r3, [r7, #52]	; 0x34
   104a8:	f7f9 fe08 	bl	a0bc <realloc>
   104ac:	2800      	cmp	r0, #0
   104ae:	f000 8239 	beq.w	10924 <__ssvfscanf_r+0x1610>
   104b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   104b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   104b6:	8093      	strh	r3, [r2, #4]
   104b8:	6010      	str	r0, [r2, #0]
   104ba:	e570      	b.n	ff9e <__ssvfscanf_r+0xc8a>
   104bc:	7882      	ldrb	r2, [r0, #2]
   104be:	f044 0402 	orr.w	r4, r4, #2
   104c2:	3002      	adds	r0, #2
   104c4:	f7fe bfae 	b.w	f424 <__ssvfscanf_r+0x110>
   104c8:	7882      	ldrb	r2, [r0, #2]
   104ca:	f044 0408 	orr.w	r4, r4, #8
   104ce:	3002      	adds	r0, #2
   104d0:	f7fe bfa8 	b.w	f424 <__ssvfscanf_r+0x110>
   104d4:	0763      	lsls	r3, r4, #29
   104d6:	d458      	bmi.n	1058a <__ssvfscanf_r+0x1276>
   104d8:	f014 0201 	ands.w	r2, r4, #1
   104dc:	f47f aa28 	bne.w	f930 <__ssvfscanf_r+0x61c>
   104e0:	07a6      	lsls	r6, r4, #30
   104e2:	f57f aa25 	bpl.w	f930 <__ssvfscanf_r+0x61c>
   104e6:	4bb3      	ldr	r3, [pc, #716]	; (107b4 <__ssvfscanf_r+0x14a0>)
   104e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   104ea:	4299      	cmp	r1, r3
   104ec:	4648      	mov	r0, r9
   104ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   104f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   104f2:	f000 823d 	beq.w	10970 <__ssvfscanf_r+0x165c>
   104f6:	f001 fdd1 	bl	1209c <_strtoll_r>
   104fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   104fc:	f853 2b04 	ldr.w	r2, [r3], #4
   10500:	633b      	str	r3, [r7, #48]	; 0x30
   10502:	e9c2 0100 	strd	r0, r1, [r2]
   10506:	f7ff ba18 	b.w	f93a <__ssvfscanf_r+0x626>
   1050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1050c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1050e:	f853 2b04 	ldr.w	r2, [r3], #4
   10512:	633b      	str	r3, [r7, #48]	; 0x30
   10514:	f882 a000 	strb.w	sl, [r2]
   10518:	f7fe bf23 	b.w	f362 <__ssvfscanf_r+0x4e>
   1051c:	f8db 3000 	ldr.w	r3, [fp]
   10520:	4ea5      	ldr	r6, [pc, #660]	; (107b8 <__ssvfscanf_r+0x14a4>)
   10522:	781a      	ldrb	r2, [r3, #0]
   10524:	5cb2      	ldrb	r2, [r6, r2]
   10526:	0712      	lsls	r2, r2, #28
   10528:	f53e af1b 	bmi.w	f362 <__ssvfscanf_r+0x4e>
   1052c:	3301      	adds	r3, #1
   1052e:	f8cb 3000 	str.w	r3, [fp]
   10532:	f8db 3004 	ldr.w	r3, [fp, #4]
   10536:	f1b8 0f01 	cmp.w	r8, #1
   1053a:	f103 33ff 	add.w	r3, r3, #4294967295
   1053e:	f8cb 3004 	str.w	r3, [fp, #4]
   10542:	bf08      	it	eq
   10544:	f10a 0a01 	addeq.w	sl, sl, #1
   10548:	f43e af0b 	beq.w	f362 <__ssvfscanf_r+0x4e>
   1054c:	2401      	movs	r4, #1
   1054e:	e011      	b.n	10574 <__ssvfscanf_r+0x1260>
   10550:	f8db 3000 	ldr.w	r3, [fp]
   10554:	781a      	ldrb	r2, [r3, #0]
   10556:	5cb2      	ldrb	r2, [r6, r2]
   10558:	0715      	lsls	r5, r2, #28
   1055a:	f103 0301 	add.w	r3, r3, #1
   1055e:	d411      	bmi.n	10584 <__ssvfscanf_r+0x1270>
   10560:	f8cb 3000 	str.w	r3, [fp]
   10564:	f8db 3004 	ldr.w	r3, [fp, #4]
   10568:	3401      	adds	r4, #1
   1056a:	3b01      	subs	r3, #1
   1056c:	4544      	cmp	r4, r8
   1056e:	f8cb 3004 	str.w	r3, [fp, #4]
   10572:	d007      	beq.n	10584 <__ssvfscanf_r+0x1270>
   10574:	2b00      	cmp	r3, #0
   10576:	dceb      	bgt.n	10550 <__ssvfscanf_r+0x123c>
   10578:	4659      	mov	r1, fp
   1057a:	4648      	mov	r0, r9
   1057c:	f002 f874 	bl	12668 <__ssrefill_r>
   10580:	2800      	cmp	r0, #0
   10582:	d0e5      	beq.n	10550 <__ssvfscanf_r+0x123c>
   10584:	44a2      	add	sl, r4
   10586:	f7fe beec 	b.w	f362 <__ssvfscanf_r+0x4e>
   1058a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1058c:	f853 2b04 	ldr.w	r2, [r3], #4
   10590:	633b      	str	r3, [r7, #48]	; 0x30
   10592:	8010      	strh	r0, [r2, #0]
   10594:	f7ff b9d1 	b.w	f93a <__ssvfscanf_r+0x626>
   10598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1059a:	2b00      	cmp	r3, #0
   1059c:	f000 816e 	beq.w	1087c <__ssvfscanf_r+0x1568>
   105a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   105a2:	f8d3 8000 	ldr.w	r8, [r3]
   105a6:	88de      	ldrh	r6, [r3, #6]
   105a8:	b176      	cbz	r6, 105c8 <__ssvfscanf_r+0x12b4>
   105aa:	2400      	movs	r4, #0
   105ac:	f1a8 0504 	sub.w	r5, r8, #4
   105b0:	46a1      	mov	r9, r4
   105b2:	f855 3f04 	ldr.w	r3, [r5, #4]!
   105b6:	6818      	ldr	r0, [r3, #0]
   105b8:	f7f9 fabc 	bl	9b34 <free>
   105bc:	3401      	adds	r4, #1
   105be:	682b      	ldr	r3, [r5, #0]
   105c0:	42a6      	cmp	r6, r4
   105c2:	f8c3 9000 	str.w	r9, [r3]
   105c6:	d1f4      	bne.n	105b2 <__ssvfscanf_r+0x129e>
   105c8:	f04f 33ff 	mov.w	r3, #4294967295
   105cc:	647b      	str	r3, [r7, #68]	; 0x44
   105ce:	f1b8 0f00 	cmp.w	r8, #0
   105d2:	f47e af9c 	bne.w	f50e <__ssvfscanf_r+0x1fa>
   105d6:	f7fe bf9d 	b.w	f514 <__ssvfscanf_r+0x200>
   105da:	4878      	ldr	r0, [pc, #480]	; (107bc <__ssvfscanf_r+0x14a8>)
   105dc:	633b      	str	r3, [r7, #48]	; 0x30
   105de:	f7fb fde7 	bl	c1b0 <nanf>
   105e2:	ed84 0a00 	vstr	s0, [r4]
   105e6:	e4ad      	b.n	ff44 <__ssvfscanf_r+0xc30>
   105e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   105ea:	63fc      	str	r4, [r7, #60]	; 0x3c
   105ec:	f852 5b04 	ldr.w	r5, [r2], #4
   105f0:	633a      	str	r2, [r7, #48]	; 0x30
   105f2:	64bc      	str	r4, [r7, #72]	; 0x48
   105f4:	e46c      	b.n	fed0 <__ssvfscanf_r+0xbbc>
   105f6:	b082      	sub	sp, #8
   105f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   105fc:	ab02      	add	r3, sp, #8
   105fe:	643b      	str	r3, [r7, #64]	; 0x40
   10600:	e612      	b.n	10228 <__ssvfscanf_r+0xf14>
   10602:	637b      	str	r3, [r7, #52]	; 0x34
   10604:	0053      	lsls	r3, r2, #1
   10606:	4620      	mov	r0, r4
   10608:	4619      	mov	r1, r3
   1060a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1060c:	f7f9 fd56 	bl	a0bc <realloc>
   10610:	4604      	mov	r4, r0
   10612:	2800      	cmp	r0, #0
   10614:	f000 80ad 	beq.w	10772 <__ssvfscanf_r+0x145e>
   10618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1061a:	1985      	adds	r5, r0, r6
   1061c:	6018      	str	r0, [r3, #0]
   1061e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10620:	e475      	b.n	ff0e <__ssvfscanf_r+0xbfa>
   10622:	697d      	ldr	r5, [r7, #20]
   10624:	4629      	mov	r1, r5
   10626:	230a      	movs	r3, #10
   10628:	3101      	adds	r1, #1
   1062a:	4648      	mov	r0, r9
   1062c:	f7fa ff20 	bl	b470 <_strtol_r>
   10630:	69bb      	ldr	r3, [r7, #24]
   10632:	1ac2      	subs	r2, r0, r3
   10634:	e59d      	b.n	10172 <__ssvfscanf_r+0xe5e>
   10636:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1063a:	f853 1b04 	ldr.w	r1, [r3], #4
   1063e:	623a      	str	r2, [r7, #32]
   10640:	64b9      	str	r1, [r7, #72]	; 0x48
   10642:	633b      	str	r3, [r7, #48]	; 0x30
   10644:	62ba      	str	r2, [r7, #40]	; 0x28
   10646:	63fa      	str	r2, [r7, #60]	; 0x3c
   10648:	f7ff b9b2 	b.w	f9b0 <__ssvfscanf_r+0x69c>
   1064c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1064e:	64bc      	str	r4, [r7, #72]	; 0x48
   10650:	f853 5b04 	ldr.w	r5, [r3], #4
   10654:	633b      	str	r3, [r7, #48]	; 0x30
   10656:	e4aa      	b.n	ffae <__ssvfscanf_r+0xc9a>
   10658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1065a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1065c:	f853 4b04 	ldr.w	r4, [r3], #4
   10660:	61ba      	str	r2, [r7, #24]
   10662:	e9c7 2207 	strd	r2, r2, [r7, #28]
   10666:	633b      	str	r3, [r7, #48]	; 0x30
   10668:	f7ff ba2a 	b.w	fac0 <__ssvfscanf_r+0x7ac>
   1066c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1066e:	6820      	ldr	r0, [r4, #0]
   10670:	f7f9 fd24 	bl	a0bc <realloc>
   10674:	2800      	cmp	r0, #0
   10676:	f47f aab3 	bne.w	fbe0 <__ssvfscanf_r+0x8cc>
   1067a:	e463      	b.n	ff44 <__ssvfscanf_r+0xc30>
   1067c:	4659      	mov	r1, fp
   1067e:	4648      	mov	r0, r9
   10680:	637b      	str	r3, [r7, #52]	; 0x34
   10682:	f001 fff1 	bl	12668 <__ssrefill_r>
   10686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10688:	2800      	cmp	r0, #0
   1068a:	f43f ac49 	beq.w	ff20 <__ssvfscanf_r+0xc0c>
   1068e:	e44d      	b.n	ff2c <__ssvfscanf_r+0xc18>
   10690:	6818      	ldr	r0, [r3, #0]
   10692:	461c      	mov	r4, r3
   10694:	f7f9 fd12 	bl	a0bc <realloc>
   10698:	2800      	cmp	r0, #0
   1069a:	f43f accc 	beq.w	10036 <__ssvfscanf_r+0xd22>
   1069e:	6020      	str	r0, [r4, #0]
   106a0:	e4c9      	b.n	10036 <__ssvfscanf_r+0xd22>
   106a2:	2500      	movs	r5, #0
   106a4:	e637      	b.n	10316 <__ssvfscanf_r+0x1002>
   106a6:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   106a8:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   106ac:	627e      	str	r6, [r7, #36]	; 0x24
   106ae:	4644      	mov	r4, r8
   106b0:	2d00      	cmp	r5, #0
   106b2:	f43f aa7c 	beq.w	fbae <__ssvfscanf_r+0x89a>
   106b6:	3d01      	subs	r5, #1
   106b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   106bc:	465a      	mov	r2, fp
   106be:	5d59      	ldrb	r1, [r3, r5]
   106c0:	4648      	mov	r0, r9
   106c2:	f001 ff91 	bl	125e8 <_sungetc_r>
   106c6:	2d00      	cmp	r5, #0
   106c8:	d1f5      	bne.n	106b6 <__ssvfscanf_r+0x13a2>
   106ca:	f7ff ba70 	b.w	fbae <__ssvfscanf_r+0x89a>
   106ce:	4659      	mov	r1, fp
   106d0:	4648      	mov	r0, r9
   106d2:	f001 ffc9 	bl	12668 <__ssrefill_r>
   106d6:	2800      	cmp	r0, #0
   106d8:	f43f ae22 	beq.w	10320 <__ssvfscanf_r+0x100c>
   106dc:	627c      	str	r4, [r7, #36]	; 0x24
   106de:	2d00      	cmp	r5, #0
   106e0:	f47e af04 	bne.w	f4ec <__ssvfscanf_r+0x1d8>
   106e4:	e628      	b.n	10338 <__ssvfscanf_r+0x1024>
   106e6:	627c      	str	r4, [r7, #36]	; 0x24
   106e8:	2d00      	cmp	r5, #0
   106ea:	f43f ae25 	beq.w	10338 <__ssvfscanf_r+0x1024>
   106ee:	3d01      	subs	r5, #1
   106f0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   106f4:	465a      	mov	r2, fp
   106f6:	5d59      	ldrb	r1, [r3, r5]
   106f8:	4648      	mov	r0, r9
   106fa:	f001 ff75 	bl	125e8 <_sungetc_r>
   106fe:	2d00      	cmp	r5, #0
   10700:	d1f5      	bne.n	106ee <__ssvfscanf_r+0x13da>
   10702:	e619      	b.n	10338 <__ssvfscanf_r+0x1024>
   10704:	07e5      	lsls	r5, r4, #31
   10706:	d43c      	bmi.n	10782 <__ssvfscanf_r+0x146e>
   10708:	07a4      	lsls	r4, r4, #30
   1070a:	d53a      	bpl.n	10782 <__ssvfscanf_r+0x146e>
   1070c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1070e:	64f9      	str	r1, [r7, #76]	; 0x4c
   10710:	f853 2b04 	ldr.w	r2, [r3], #4
   10714:	633b      	str	r3, [r7, #48]	; 0x30
   10716:	ea4f 73ea 	mov.w	r3, sl, asr #31
   1071a:	f8c2 a000 	str.w	sl, [r2]
   1071e:	6053      	str	r3, [r2, #4]
   10720:	f7fe be1f 	b.w	f362 <__ssvfscanf_r+0x4e>
   10724:	ee18 9a10 	vmov	r9, s16
   10728:	461e      	mov	r6, r3
   1072a:	f7ff b814 	b.w	f756 <__ssvfscanf_r+0x442>
   1072e:	2301      	movs	r3, #1
   10730:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   10734:	64bb      	str	r3, [r7, #72]	; 0x48
   10736:	f7fe bff6 	b.w	f726 <__ssvfscanf_r+0x412>
   1073a:	f1b8 0f01 	cmp.w	r8, #1
   1073e:	bf38      	it	cc
   10740:	f04f 0801 	movcc.w	r8, #1
   10744:	f014 0301 	ands.w	r3, r4, #1
   10748:	d13a      	bne.n	107c0 <__ssvfscanf_r+0x14ac>
   1074a:	06e5      	lsls	r5, r4, #27
   1074c:	f100 8136 	bmi.w	109bc <__ssvfscanf_r+0x16a8>
   10750:	0624      	lsls	r4, r4, #24
   10752:	f140 814c 	bpl.w	109ee <__ssvfscanf_r+0x16da>
   10756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10758:	f853 5b04 	ldr.w	r5, [r3], #4
   1075c:	64bb      	str	r3, [r7, #72]	; 0x48
   1075e:	2d00      	cmp	r5, #0
   10760:	f43e aecd 	beq.w	f4fe <__ssvfscanf_r+0x1ea>
   10764:	4640      	mov	r0, r8
   10766:	f7f9 f9dd 	bl	9b24 <malloc>
   1076a:	4603      	mov	r3, r0
   1076c:	2800      	cmp	r0, #0
   1076e:	f040 80dc 	bne.w	1092a <__ssvfscanf_r+0x1616>
   10772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10774:	2b00      	cmp	r3, #0
   10776:	f000 8081 	beq.w	1087c <__ssvfscanf_r+0x1568>
   1077a:	f8d3 8000 	ldr.w	r8, [r3]
   1077e:	88de      	ldrh	r6, [r3, #6]
   10780:	e712      	b.n	105a8 <__ssvfscanf_r+0x1294>
   10782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10784:	64f9      	str	r1, [r7, #76]	; 0x4c
   10786:	f853 2b04 	ldr.w	r2, [r3], #4
   1078a:	f8c2 a000 	str.w	sl, [r2]
   1078e:	633b      	str	r3, [r7, #48]	; 0x30
   10790:	f7fe bde7 	b.w	f362 <__ssvfscanf_r+0x4e>
   10794:	462b      	mov	r3, r5
   10796:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10798:	42ab      	cmp	r3, r5
   1079a:	f67e aeb0 	bls.w	f4fe <__ssvfscanf_r+0x1ea>
   1079e:	461c      	mov	r4, r3
   107a0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   107a4:	465a      	mov	r2, fp
   107a6:	4648      	mov	r0, r9
   107a8:	f001 ff1e 	bl	125e8 <_sungetc_r>
   107ac:	42ac      	cmp	r4, r5
   107ae:	d1f7      	bne.n	107a0 <__ssvfscanf_r+0x148c>
   107b0:	f7fe bea5 	b.w	f4fe <__ssvfscanf_r+0x1ea>
   107b4:	00011f2d 	.word	0x00011f2d
   107b8:	20000aa5 	.word	0x20000aa5
   107bc:	20008024 	.word	0x20008024
   107c0:	f014 0310 	ands.w	r3, r4, #16
   107c4:	637b      	str	r3, [r7, #52]	; 0x34
   107c6:	d05e      	beq.n	10886 <__ssvfscanf_r+0x1572>
   107c8:	2500      	movs	r5, #0
   107ca:	63fd      	str	r5, [r7, #60]	; 0x3c
   107cc:	64bd      	str	r5, [r7, #72]	; 0x48
   107ce:	462e      	mov	r6, r5
   107d0:	2400      	movs	r4, #0
   107d2:	464b      	mov	r3, r9
   107d4:	46c1      	mov	r9, r8
   107d6:	46a8      	mov	r8, r5
   107d8:	4625      	mov	r5, r4
   107da:	461c      	mov	r4, r3
   107dc:	f7fb f9a4 	bl	bb28 <__locale_mb_cur_max>
   107e0:	42a8      	cmp	r0, r5
   107e2:	f43e ae83 	beq.w	f4ec <__ssvfscanf_r+0x1d8>
   107e6:	e9db 3200 	ldrd	r3, r2, [fp]
   107ea:	f813 1b01 	ldrb.w	r1, [r3], #1
   107ee:	3a01      	subs	r2, #1
   107f0:	e9cb 3200 	strd	r3, r2, [fp]
   107f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   107f6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   107fa:	2a03      	cmp	r2, #3
   107fc:	5541      	strb	r1, [r0, r5]
   107fe:	f105 0301 	add.w	r3, r5, #1
   10802:	f107 0568 	add.w	r5, r7, #104	; 0x68
   10806:	d102      	bne.n	1080e <__ssvfscanf_r+0x14fa>
   10808:	682a      	ldr	r2, [r5, #0]
   1080a:	2a04      	cmp	r2, #4
   1080c:	d006      	beq.n	1081c <__ssvfscanf_r+0x1508>
   1080e:	2208      	movs	r2, #8
   10810:	2100      	movs	r1, #0
   10812:	4628      	mov	r0, r5
   10814:	62bb      	str	r3, [r7, #40]	; 0x28
   10816:	f7fb f8bd 	bl	b994 <memset>
   1081a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1081c:	9500      	str	r5, [sp, #0]
   1081e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   10822:	4631      	mov	r1, r6
   10824:	4620      	mov	r0, r4
   10826:	62bb      	str	r3, [r7, #40]	; 0x28
   10828:	f001 fd0a 	bl	12240 <_mbrtowc_r>
   1082c:	1c43      	adds	r3, r0, #1
   1082e:	6278      	str	r0, [r7, #36]	; 0x24
   10830:	f43e ae5c 	beq.w	f4ec <__ssvfscanf_r+0x1d8>
   10834:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10836:	2800      	cmp	r0, #0
   10838:	f040 8147 	bne.w	10aca <__ssvfscanf_r+0x17b6>
   1083c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1083e:	b902      	cbnz	r2, 10842 <__ssvfscanf_r+0x152e>
   10840:	6032      	str	r2, [r6, #0]
   10842:	449a      	add	sl, r3
   10844:	f109 39ff 	add.w	r9, r9, #4294967295
   10848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1084a:	2b00      	cmp	r3, #0
   1084c:	f040 8175 	bne.w	10b3a <__ssvfscanf_r+0x1826>
   10850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10852:	2b00      	cmp	r3, #0
   10854:	f000 8170 	beq.w	10b38 <__ssvfscanf_r+0x1824>
   10858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1085a:	1af5      	subs	r5, r6, r3
   1085c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   10860:	f200 816a 	bhi.w	10b38 <__ssvfscanf_r+0x1824>
   10864:	4618      	mov	r0, r3
   10866:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   1086a:	f7f9 fc27 	bl	a0bc <realloc>
   1086e:	63f8      	str	r0, [r7, #60]	; 0x3c
   10870:	2800      	cmp	r0, #0
   10872:	f040 815c 	bne.w	10b2e <__ssvfscanf_r+0x181a>
   10876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10878:	2b00      	cmp	r3, #0
   1087a:	d12d      	bne.n	108d8 <__ssvfscanf_r+0x15c4>
   1087c:	f04f 33ff 	mov.w	r3, #4294967295
   10880:	647b      	str	r3, [r7, #68]	; 0x44
   10882:	f7fe be47 	b.w	f514 <__ssvfscanf_r+0x200>
   10886:	0622      	lsls	r2, r4, #24
   10888:	f140 808f 	bpl.w	109aa <__ssvfscanf_r+0x1696>
   1088c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1088e:	f854 3b04 	ldr.w	r3, [r4], #4
   10892:	64bb      	str	r3, [r7, #72]	; 0x48
   10894:	2b00      	cmp	r3, #0
   10896:	f43e ae32 	beq.w	f4fe <__ssvfscanf_r+0x1ea>
   1089a:	2080      	movs	r0, #128	; 0x80
   1089c:	f7f9 f942 	bl	9b24 <malloc>
   108a0:	4606      	mov	r6, r0
   108a2:	2800      	cmp	r0, #0
   108a4:	d0e7      	beq.n	10876 <__ssvfscanf_r+0x1562>
   108a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   108a8:	6018      	str	r0, [r3, #0]
   108aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   108ac:	88dd      	ldrh	r5, [r3, #6]
   108ae:	889a      	ldrh	r2, [r3, #4]
   108b0:	4295      	cmp	r5, r2
   108b2:	f0c0 80b3 	bcc.w	10a1c <__ssvfscanf_r+0x1708>
   108b6:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   108ba:	428a      	cmp	r2, r1
   108bc:	d856      	bhi.n	1096c <__ssvfscanf_r+0x1658>
   108be:	3208      	adds	r2, #8
   108c0:	b293      	uxth	r3, r2
   108c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   108c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   108c6:	0099      	lsls	r1, r3, #2
   108c8:	6810      	ldr	r0, [r2, #0]
   108ca:	f7f9 fbf7 	bl	a0bc <realloc>
   108ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   108d0:	2800      	cmp	r0, #0
   108d2:	f040 80ae 	bne.w	10a32 <__ssvfscanf_r+0x171e>
   108d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   108d8:	88db      	ldrh	r3, [r3, #6]
   108da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   108dc:	461e      	mov	r6, r3
   108de:	f8d2 8000 	ldr.w	r8, [r2]
   108e2:	e661      	b.n	105a8 <__ssvfscanf_r+0x1294>
   108e4:	462b      	mov	r3, r5
   108e6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   108e8:	42ab      	cmp	r3, r5
   108ea:	f67e ae08 	bls.w	f4fe <__ssvfscanf_r+0x1ea>
   108ee:	461c      	mov	r4, r3
   108f0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   108f4:	465a      	mov	r2, fp
   108f6:	4648      	mov	r0, r9
   108f8:	f001 fe76 	bl	125e8 <_sungetc_r>
   108fc:	42ac      	cmp	r4, r5
   108fe:	d1f7      	bne.n	108f0 <__ssvfscanf_r+0x15dc>
   10900:	f7fe bdfd 	b.w	f4fe <__ssvfscanf_r+0x1ea>
   10904:	4610      	mov	r0, r2
   10906:	00d9      	lsls	r1, r3, #3
   10908:	461e      	mov	r6, r3
   1090a:	f7f9 fbd7 	bl	a0bc <realloc>
   1090e:	62b8      	str	r0, [r7, #40]	; 0x28
   10910:	2800      	cmp	r0, #0
   10912:	d0b0      	beq.n	10876 <__ssvfscanf_r+0x1562>
   10914:	1942      	adds	r2, r0, r5
   10916:	64ba      	str	r2, [r7, #72]	; 0x48
   10918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1091a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1091c:	6010      	str	r0, [r2, #0]
   1091e:	0073      	lsls	r3, r6, #1
   10920:	623b      	str	r3, [r7, #32]
   10922:	e4f8      	b.n	10316 <__ssvfscanf_r+0x1002>
   10924:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   10928:	e63e      	b.n	105a8 <__ssvfscanf_r+0x1294>
   1092a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1092c:	6028      	str	r0, [r5, #0]
   1092e:	88ce      	ldrh	r6, [r1, #6]
   10930:	888a      	ldrh	r2, [r1, #4]
   10932:	4296      	cmp	r6, r2
   10934:	f0c0 808e 	bcc.w	10a54 <__ssvfscanf_r+0x1740>
   10938:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1093c:	428a      	cmp	r2, r1
   1093e:	6338      	str	r0, [r7, #48]	; 0x30
   10940:	f240 80a5 	bls.w	10a8e <__ssvfscanf_r+0x177a>
   10944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10946:	f8d3 8000 	ldr.w	r8, [r3]
   1094a:	e62d      	b.n	105a8 <__ssvfscanf_r+0x1294>
   1094c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1094e:	4295      	cmp	r5, r2
   10950:	f67e add5 	bls.w	f4fe <__ssvfscanf_r+0x1ea>
   10954:	462c      	mov	r4, r5
   10956:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10958:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   1095c:	465a      	mov	r2, fp
   1095e:	4648      	mov	r0, r9
   10960:	f001 fe42 	bl	125e8 <_sungetc_r>
   10964:	42ac      	cmp	r4, r5
   10966:	d1f7      	bne.n	10958 <__ssvfscanf_r+0x1644>
   10968:	f7fe bdc9 	b.w	f4fe <__ssvfscanf_r+0x1ea>
   1096c:	462b      	mov	r3, r5
   1096e:	e7b4      	b.n	108da <__ssvfscanf_r+0x15c6>
   10970:	f001 fc64 	bl	1223c <_strtoull_r>
   10974:	e5c1      	b.n	104fa <__ssvfscanf_r+0x11e6>
   10976:	f8d8 3000 	ldr.w	r3, [r8]
   1097a:	461d      	mov	r5, r3
   1097c:	3301      	adds	r3, #1
   1097e:	f47f a8d5 	bne.w	fb2c <__ssvfscanf_r+0x818>
   10982:	462a      	mov	r2, r5
   10984:	f7ff b8e8 	b.w	fb58 <__ssvfscanf_r+0x844>
   10988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1098a:	6818      	ldr	r0, [r3, #0]
   1098c:	f001 fcb4 	bl	122f8 <iswspace>
   10990:	2800      	cmp	r0, #0
   10992:	f47f aea8 	bne.w	106e6 <__ssvfscanf_r+0x13d2>
   10996:	2c03      	cmp	r4, #3
   10998:	44aa      	add	sl, r5
   1099a:	f47f a849 	bne.w	fa30 <__ssvfscanf_r+0x71c>
   1099e:	6833      	ldr	r3, [r6, #0]
   109a0:	2b04      	cmp	r3, #4
   109a2:	f47f a845 	bne.w	fa30 <__ssvfscanf_r+0x71c>
   109a6:	f7ff b845 	b.w	fa34 <__ssvfscanf_r+0x720>
   109aa:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   109ae:	f853 6b04 	ldr.w	r6, [r3], #4
   109b2:	633b      	str	r3, [r7, #48]	; 0x30
   109b4:	4615      	mov	r5, r2
   109b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   109b8:	64ba      	str	r2, [r7, #72]	; 0x48
   109ba:	e709      	b.n	107d0 <__ssvfscanf_r+0x14bc>
   109bc:	461c      	mov	r4, r3
   109be:	f8db 3004 	ldr.w	r3, [fp, #4]
   109c2:	4598      	cmp	r8, r3
   109c4:	dd39      	ble.n	10a3a <__ssvfscanf_r+0x1726>
   109c6:	f8db 2000 	ldr.w	r2, [fp]
   109ca:	441a      	add	r2, r3
   109cc:	f8cb 2000 	str.w	r2, [fp]
   109d0:	4659      	mov	r1, fp
   109d2:	4648      	mov	r0, r9
   109d4:	441c      	add	r4, r3
   109d6:	eba8 0803 	sub.w	r8, r8, r3
   109da:	f001 fe45 	bl	12668 <__ssrefill_r>
   109de:	2800      	cmp	r0, #0
   109e0:	d0ed      	beq.n	109be <__ssvfscanf_r+0x16aa>
   109e2:	2c00      	cmp	r4, #0
   109e4:	f43e ad82 	beq.w	f4ec <__ssvfscanf_r+0x1d8>
   109e8:	44a2      	add	sl, r4
   109ea:	f7fe bcba 	b.w	f362 <__ssvfscanf_r+0x4e>
   109ee:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   109f0:	4643      	mov	r3, r8
   109f2:	6829      	ldr	r1, [r5, #0]
   109f4:	f8cd b000 	str.w	fp, [sp]
   109f8:	2201      	movs	r2, #1
   109fa:	4648      	mov	r0, r9
   109fc:	f001 fe52 	bl	126a4 <_sfread_r>
   10a00:	4604      	mov	r4, r0
   10a02:	2800      	cmp	r0, #0
   10a04:	f43e ad72 	beq.w	f4ec <__ssvfscanf_r+0x1d8>
   10a08:	3504      	adds	r5, #4
   10a0a:	64bd      	str	r5, [r7, #72]	; 0x48
   10a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10a0e:	3301      	adds	r3, #1
   10a10:	647b      	str	r3, [r7, #68]	; 0x44
   10a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a14:	633b      	str	r3, [r7, #48]	; 0x30
   10a16:	44a2      	add	sl, r4
   10a18:	f7fe bca3 	b.w	f362 <__ssvfscanf_r+0x4e>
   10a1c:	6818      	ldr	r0, [r3, #0]
   10a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a20:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   10a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10a26:	633c      	str	r4, [r7, #48]	; 0x30
   10a28:	3501      	adds	r5, #1
   10a2a:	80dd      	strh	r5, [r3, #6]
   10a2c:	63fe      	str	r6, [r7, #60]	; 0x3c
   10a2e:	2520      	movs	r5, #32
   10a30:	e6ce      	b.n	107d0 <__ssvfscanf_r+0x14bc>
   10a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10a34:	8093      	strh	r3, [r2, #4]
   10a36:	6010      	str	r0, [r2, #0]
   10a38:	e7f1      	b.n	10a1e <__ssvfscanf_r+0x170a>
   10a3a:	eba3 0308 	sub.w	r3, r3, r8
   10a3e:	f8cb 3004 	str.w	r3, [fp, #4]
   10a42:	f8db 3000 	ldr.w	r3, [fp]
   10a46:	4444      	add	r4, r8
   10a48:	4443      	add	r3, r8
   10a4a:	f8cb 3000 	str.w	r3, [fp]
   10a4e:	44a2      	add	sl, r4
   10a50:	f7fe bc87 	b.w	f362 <__ssvfscanf_r+0x4e>
   10a54:	680a      	ldr	r2, [r1, #0]
   10a56:	63fa      	str	r2, [r7, #60]	; 0x3c
   10a58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10a5a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   10a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10a60:	3601      	adds	r6, #1
   10a62:	b2b6      	uxth	r6, r6
   10a64:	80d6      	strh	r6, [r2, #6]
   10a66:	4619      	mov	r1, r3
   10a68:	f8cd b000 	str.w	fp, [sp]
   10a6c:	4643      	mov	r3, r8
   10a6e:	2201      	movs	r2, #1
   10a70:	4648      	mov	r0, r9
   10a72:	f001 fe17 	bl	126a4 <_sfread_r>
   10a76:	4604      	mov	r4, r0
   10a78:	b1d8      	cbz	r0, 10ab2 <__ssvfscanf_r+0x179e>
   10a7a:	4580      	cmp	r8, r0
   10a7c:	d9c6      	bls.n	10a0c <__ssvfscanf_r+0x16f8>
   10a7e:	6828      	ldr	r0, [r5, #0]
   10a80:	4621      	mov	r1, r4
   10a82:	f7f9 fb1b 	bl	a0bc <realloc>
   10a86:	2800      	cmp	r0, #0
   10a88:	d0c0      	beq.n	10a0c <__ssvfscanf_r+0x16f8>
   10a8a:	6028      	str	r0, [r5, #0]
   10a8c:	e7be      	b.n	10a0c <__ssvfscanf_r+0x16f8>
   10a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10a90:	3208      	adds	r2, #8
   10a92:	b294      	uxth	r4, r2
   10a94:	681a      	ldr	r2, [r3, #0]
   10a96:	637a      	str	r2, [r7, #52]	; 0x34
   10a98:	4610      	mov	r0, r2
   10a9a:	00a1      	lsls	r1, r4, #2
   10a9c:	f7f9 fb0e 	bl	a0bc <realloc>
   10aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10aa2:	63f8      	str	r0, [r7, #60]	; 0x3c
   10aa4:	2800      	cmp	r0, #0
   10aa6:	d05b      	beq.n	10b60 <__ssvfscanf_r+0x184c>
   10aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10aaa:	809c      	strh	r4, [r3, #4]
   10aac:	6018      	str	r0, [r3, #0]
   10aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10ab0:	e7d2      	b.n	10a58 <__ssvfscanf_r+0x1744>
   10ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10ab4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   10ab8:	2b00      	cmp	r3, #0
   10aba:	f43f ad75 	beq.w	105a8 <__ssvfscanf_r+0x1294>
   10abe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10ac2:	065b      	lsls	r3, r3, #25
   10ac4:	f57e ad1d 	bpl.w	f502 <__ssvfscanf_r+0x1ee>
   10ac8:	e56a      	b.n	105a0 <__ssvfscanf_r+0x128c>
   10aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10acc:	3202      	adds	r2, #2
   10ace:	d11d      	bne.n	10b0c <__ssvfscanf_r+0x17f8>
   10ad0:	f8db 2004 	ldr.w	r2, [fp, #4]
   10ad4:	2a00      	cmp	r2, #0
   10ad6:	461d      	mov	r5, r3
   10ad8:	f73f ae80 	bgt.w	107dc <__ssvfscanf_r+0x14c8>
   10adc:	4659      	mov	r1, fp
   10ade:	4620      	mov	r0, r4
   10ae0:	f001 fdc2 	bl	12668 <__ssrefill_r>
   10ae4:	b9e0      	cbnz	r0, 10b20 <__ssvfscanf_r+0x180c>
   10ae6:	f1b9 0f00 	cmp.w	r9, #0
   10aea:	f47f ae77 	bne.w	107dc <__ssvfscanf_r+0x14c8>
   10aee:	4645      	mov	r5, r8
   10af0:	46a1      	mov	r9, r4
   10af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10af4:	b123      	cbz	r3, 10b00 <__ssvfscanf_r+0x17ec>
   10af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10af8:	1af1      	subs	r1, r6, r3
   10afa:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   10afe:	d827      	bhi.n	10b50 <__ssvfscanf_r+0x183c>
   10b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10b02:	2b00      	cmp	r3, #0
   10b04:	f47e ac2d 	bne.w	f362 <__ssvfscanf_r+0x4e>
   10b08:	f7ff ba1c 	b.w	ff44 <__ssvfscanf_r+0xc30>
   10b0c:	449a      	add	sl, r3
   10b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10b10:	2b03      	cmp	r3, #3
   10b12:	f47f ae97 	bne.w	10844 <__ssvfscanf_r+0x1530>
   10b16:	682b      	ldr	r3, [r5, #0]
   10b18:	2b04      	cmp	r3, #4
   10b1a:	f47f ae93 	bne.w	10844 <__ssvfscanf_r+0x1530>
   10b1e:	e693      	b.n	10848 <__ssvfscanf_r+0x1534>
   10b20:	46a1      	mov	r9, r4
   10b22:	462c      	mov	r4, r5
   10b24:	4645      	mov	r5, r8
   10b26:	2c00      	cmp	r4, #0
   10b28:	d0e3      	beq.n	10af2 <__ssvfscanf_r+0x17de>
   10b2a:	f7fe bcdf 	b.w	f4ec <__ssvfscanf_r+0x1d8>
   10b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10b30:	1946      	adds	r6, r0, r5
   10b32:	6010      	str	r0, [r2, #0]
   10b34:	ea4f 0848 	mov.w	r8, r8, lsl #1
   10b38:	3604      	adds	r6, #4
   10b3a:	f8db 3004 	ldr.w	r3, [fp, #4]
   10b3e:	2b00      	cmp	r3, #0
   10b40:	f04f 0500 	mov.w	r5, #0
   10b44:	ddca      	ble.n	10adc <__ssvfscanf_r+0x17c8>
   10b46:	f1b9 0f00 	cmp.w	r9, #0
   10b4a:	f47f ae47 	bne.w	107dc <__ssvfscanf_r+0x14c8>
   10b4e:	e7ce      	b.n	10aee <__ssvfscanf_r+0x17da>
   10b50:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   10b52:	6820      	ldr	r0, [r4, #0]
   10b54:	f7f9 fab2 	bl	a0bc <realloc>
   10b58:	2800      	cmp	r0, #0
   10b5a:	d0d1      	beq.n	10b00 <__ssvfscanf_r+0x17ec>
   10b5c:	6020      	str	r0, [r4, #0]
   10b5e:	e7cf      	b.n	10b00 <__ssvfscanf_r+0x17ec>
   10b60:	4690      	mov	r8, r2
   10b62:	e521      	b.n	105a8 <__ssvfscanf_r+0x1294>

00010b64 <_fclose_r>:
   10b64:	b570      	push	{r4, r5, r6, lr}
   10b66:	2900      	cmp	r1, #0
   10b68:	d04b      	beq.n	10c02 <_fclose_r+0x9e>
   10b6a:	4606      	mov	r6, r0
   10b6c:	460c      	mov	r4, r1
   10b6e:	b110      	cbz	r0, 10b76 <_fclose_r+0x12>
   10b70:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10b72:	2b00      	cmp	r3, #0
   10b74:	d048      	beq.n	10c08 <_fclose_r+0xa4>
   10b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10b78:	07d8      	lsls	r0, r3, #31
   10b7a:	d534      	bpl.n	10be6 <_fclose_r+0x82>
   10b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10b80:	2b00      	cmp	r3, #0
   10b82:	d03e      	beq.n	10c02 <_fclose_r+0x9e>
   10b84:	4621      	mov	r1, r4
   10b86:	4630      	mov	r0, r6
   10b88:	f000 f850 	bl	10c2c <__sflush_r>
   10b8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10b8e:	4605      	mov	r5, r0
   10b90:	b133      	cbz	r3, 10ba0 <_fclose_r+0x3c>
   10b92:	69e1      	ldr	r1, [r4, #28]
   10b94:	4630      	mov	r0, r6
   10b96:	4798      	blx	r3
   10b98:	2800      	cmp	r0, #0
   10b9a:	bfb8      	it	lt
   10b9c:	f04f 35ff 	movlt.w	r5, #4294967295
   10ba0:	89a3      	ldrh	r3, [r4, #12]
   10ba2:	061a      	lsls	r2, r3, #24
   10ba4:	d43c      	bmi.n	10c20 <_fclose_r+0xbc>
   10ba6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10ba8:	b141      	cbz	r1, 10bbc <_fclose_r+0x58>
   10baa:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10bae:	4299      	cmp	r1, r3
   10bb0:	d002      	beq.n	10bb8 <_fclose_r+0x54>
   10bb2:	4630      	mov	r0, r6
   10bb4:	f7fb fb96 	bl	c2e4 <_free_r>
   10bb8:	2300      	movs	r3, #0
   10bba:	6323      	str	r3, [r4, #48]	; 0x30
   10bbc:	6c61      	ldr	r1, [r4, #68]	; 0x44
   10bbe:	b121      	cbz	r1, 10bca <_fclose_r+0x66>
   10bc0:	4630      	mov	r0, r6
   10bc2:	f7fb fb8f 	bl	c2e4 <_free_r>
   10bc6:	2300      	movs	r3, #0
   10bc8:	6463      	str	r3, [r4, #68]	; 0x44
   10bca:	f7fa fd0d 	bl	b5e8 <__sfp_lock_acquire>
   10bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10bd0:	2200      	movs	r2, #0
   10bd2:	07db      	lsls	r3, r3, #31
   10bd4:	81a2      	strh	r2, [r4, #12]
   10bd6:	d51f      	bpl.n	10c18 <_fclose_r+0xb4>
   10bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10bda:	f7fb f83d 	bl	bc58 <__retarget_lock_close_recursive>
   10bde:	f7fa fd09 	bl	b5f4 <__sfp_lock_release>
   10be2:	4628      	mov	r0, r5
   10be4:	bd70      	pop	{r4, r5, r6, pc}
   10be6:	89a3      	ldrh	r3, [r4, #12]
   10be8:	0599      	lsls	r1, r3, #22
   10bea:	d4cb      	bmi.n	10b84 <_fclose_r+0x20>
   10bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10bee:	f7fb f835 	bl	bc5c <__retarget_lock_acquire_recursive>
   10bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10bf6:	2b00      	cmp	r3, #0
   10bf8:	d1c4      	bne.n	10b84 <_fclose_r+0x20>
   10bfa:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10bfc:	f015 0501 	ands.w	r5, r5, #1
   10c00:	d005      	beq.n	10c0e <_fclose_r+0xaa>
   10c02:	2500      	movs	r5, #0
   10c04:	4628      	mov	r0, r5
   10c06:	bd70      	pop	{r4, r5, r6, pc}
   10c08:	f7fa fcd0 	bl	b5ac <__sinit>
   10c0c:	e7b3      	b.n	10b76 <_fclose_r+0x12>
   10c0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10c10:	f7fb f826 	bl	bc60 <__retarget_lock_release_recursive>
   10c14:	4628      	mov	r0, r5
   10c16:	bd70      	pop	{r4, r5, r6, pc}
   10c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10c1a:	f7fb f821 	bl	bc60 <__retarget_lock_release_recursive>
   10c1e:	e7db      	b.n	10bd8 <_fclose_r+0x74>
   10c20:	6921      	ldr	r1, [r4, #16]
   10c22:	4630      	mov	r0, r6
   10c24:	f7fb fb5e 	bl	c2e4 <_free_r>
   10c28:	e7bd      	b.n	10ba6 <_fclose_r+0x42>
   10c2a:	bf00      	nop

00010c2c <__sflush_r>:
   10c2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   10c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c34:	460c      	mov	r4, r1
   10c36:	0711      	lsls	r1, r2, #28
   10c38:	4680      	mov	r8, r0
   10c3a:	d447      	bmi.n	10ccc <__sflush_r+0xa0>
   10c3c:	6863      	ldr	r3, [r4, #4]
   10c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   10c42:	2b00      	cmp	r3, #0
   10c44:	81a2      	strh	r2, [r4, #12]
   10c46:	dd5e      	ble.n	10d06 <__sflush_r+0xda>
   10c48:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10c4a:	2d00      	cmp	r5, #0
   10c4c:	d058      	beq.n	10d00 <__sflush_r+0xd4>
   10c4e:	2300      	movs	r3, #0
   10c50:	f8d8 6000 	ldr.w	r6, [r8]
   10c54:	f8c8 3000 	str.w	r3, [r8]
   10c58:	b293      	uxth	r3, r2
   10c5a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   10c5e:	d156      	bne.n	10d0e <__sflush_r+0xe2>
   10c60:	2301      	movs	r3, #1
   10c62:	69e1      	ldr	r1, [r4, #28]
   10c64:	4640      	mov	r0, r8
   10c66:	47a8      	blx	r5
   10c68:	1c43      	adds	r3, r0, #1
   10c6a:	d067      	beq.n	10d3c <__sflush_r+0x110>
   10c6c:	89a3      	ldrh	r3, [r4, #12]
   10c6e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10c70:	075f      	lsls	r7, r3, #29
   10c72:	d505      	bpl.n	10c80 <__sflush_r+0x54>
   10c74:	6863      	ldr	r3, [r4, #4]
   10c76:	1ac0      	subs	r0, r0, r3
   10c78:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10c7a:	b10b      	cbz	r3, 10c80 <__sflush_r+0x54>
   10c7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10c7e:	1ac0      	subs	r0, r0, r3
   10c80:	69e1      	ldr	r1, [r4, #28]
   10c82:	4602      	mov	r2, r0
   10c84:	2300      	movs	r3, #0
   10c86:	4640      	mov	r0, r8
   10c88:	47a8      	blx	r5
   10c8a:	1c41      	adds	r1, r0, #1
   10c8c:	d141      	bne.n	10d12 <__sflush_r+0xe6>
   10c8e:	f8d8 3000 	ldr.w	r3, [r8]
   10c92:	2b00      	cmp	r3, #0
   10c94:	d03d      	beq.n	10d12 <__sflush_r+0xe6>
   10c96:	2b1d      	cmp	r3, #29
   10c98:	d001      	beq.n	10c9e <__sflush_r+0x72>
   10c9a:	2b16      	cmp	r3, #22
   10c9c:	d156      	bne.n	10d4c <__sflush_r+0x120>
   10c9e:	89a3      	ldrh	r3, [r4, #12]
   10ca0:	6922      	ldr	r2, [r4, #16]
   10ca2:	6022      	str	r2, [r4, #0]
   10ca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10ca8:	2100      	movs	r1, #0
   10caa:	6061      	str	r1, [r4, #4]
   10cac:	81a3      	strh	r3, [r4, #12]
   10cae:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10cb0:	f8c8 6000 	str.w	r6, [r8]
   10cb4:	b321      	cbz	r1, 10d00 <__sflush_r+0xd4>
   10cb6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10cba:	4299      	cmp	r1, r3
   10cbc:	d002      	beq.n	10cc4 <__sflush_r+0x98>
   10cbe:	4640      	mov	r0, r8
   10cc0:	f7fb fb10 	bl	c2e4 <_free_r>
   10cc4:	2000      	movs	r0, #0
   10cc6:	6320      	str	r0, [r4, #48]	; 0x30
   10cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ccc:	6926      	ldr	r6, [r4, #16]
   10cce:	b1be      	cbz	r6, 10d00 <__sflush_r+0xd4>
   10cd0:	b293      	uxth	r3, r2
   10cd2:	6825      	ldr	r5, [r4, #0]
   10cd4:	6026      	str	r6, [r4, #0]
   10cd6:	079a      	lsls	r2, r3, #30
   10cd8:	bf0c      	ite	eq
   10cda:	6963      	ldreq	r3, [r4, #20]
   10cdc:	2300      	movne	r3, #0
   10cde:	1bad      	subs	r5, r5, r6
   10ce0:	60a3      	str	r3, [r4, #8]
   10ce2:	e00b      	b.n	10cfc <__sflush_r+0xd0>
   10ce4:	462b      	mov	r3, r5
   10ce6:	4632      	mov	r2, r6
   10ce8:	69e1      	ldr	r1, [r4, #28]
   10cea:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10cec:	4640      	mov	r0, r8
   10cee:	47b8      	blx	r7
   10cf0:	f1b0 0c00 	subs.w	ip, r0, #0
   10cf4:	eba5 050c 	sub.w	r5, r5, ip
   10cf8:	4466      	add	r6, ip
   10cfa:	dd17      	ble.n	10d2c <__sflush_r+0x100>
   10cfc:	2d00      	cmp	r5, #0
   10cfe:	dcf1      	bgt.n	10ce4 <__sflush_r+0xb8>
   10d00:	2000      	movs	r0, #0
   10d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10d08:	2b00      	cmp	r3, #0
   10d0a:	dc9d      	bgt.n	10c48 <__sflush_r+0x1c>
   10d0c:	e7f8      	b.n	10d00 <__sflush_r+0xd4>
   10d0e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10d10:	e7ae      	b.n	10c70 <__sflush_r+0x44>
   10d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10d16:	6922      	ldr	r2, [r4, #16]
   10d18:	6022      	str	r2, [r4, #0]
   10d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10d1e:	81a3      	strh	r3, [r4, #12]
   10d20:	2200      	movs	r2, #0
   10d22:	04db      	lsls	r3, r3, #19
   10d24:	6062      	str	r2, [r4, #4]
   10d26:	d5c2      	bpl.n	10cae <__sflush_r+0x82>
   10d28:	6520      	str	r0, [r4, #80]	; 0x50
   10d2a:	e7c0      	b.n	10cae <__sflush_r+0x82>
   10d2c:	89a3      	ldrh	r3, [r4, #12]
   10d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d32:	f04f 30ff 	mov.w	r0, #4294967295
   10d36:	81a3      	strh	r3, [r4, #12]
   10d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d3c:	f8d8 3000 	ldr.w	r3, [r8]
   10d40:	2b00      	cmp	r3, #0
   10d42:	d093      	beq.n	10c6c <__sflush_r+0x40>
   10d44:	2b1d      	cmp	r3, #29
   10d46:	d006      	beq.n	10d56 <__sflush_r+0x12a>
   10d48:	2b16      	cmp	r3, #22
   10d4a:	d004      	beq.n	10d56 <__sflush_r+0x12a>
   10d4c:	89a3      	ldrh	r3, [r4, #12]
   10d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d52:	81a3      	strh	r3, [r4, #12]
   10d54:	e7d5      	b.n	10d02 <__sflush_r+0xd6>
   10d56:	f8c8 6000 	str.w	r6, [r8]
   10d5a:	e7d1      	b.n	10d00 <__sflush_r+0xd4>

00010d5c <_fflush_r>:
   10d5c:	b538      	push	{r3, r4, r5, lr}
   10d5e:	460c      	mov	r4, r1
   10d60:	4605      	mov	r5, r0
   10d62:	b108      	cbz	r0, 10d68 <_fflush_r+0xc>
   10d64:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10d66:	b303      	cbz	r3, 10daa <_fflush_r+0x4e>
   10d68:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10d6c:	b188      	cbz	r0, 10d92 <_fflush_r+0x36>
   10d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10d70:	07db      	lsls	r3, r3, #31
   10d72:	d401      	bmi.n	10d78 <_fflush_r+0x1c>
   10d74:	0581      	lsls	r1, r0, #22
   10d76:	d50f      	bpl.n	10d98 <_fflush_r+0x3c>
   10d78:	4628      	mov	r0, r5
   10d7a:	4621      	mov	r1, r4
   10d7c:	f7ff ff56 	bl	10c2c <__sflush_r>
   10d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10d82:	07da      	lsls	r2, r3, #31
   10d84:	4605      	mov	r5, r0
   10d86:	d402      	bmi.n	10d8e <_fflush_r+0x32>
   10d88:	89a3      	ldrh	r3, [r4, #12]
   10d8a:	059b      	lsls	r3, r3, #22
   10d8c:	d508      	bpl.n	10da0 <_fflush_r+0x44>
   10d8e:	4628      	mov	r0, r5
   10d90:	bd38      	pop	{r3, r4, r5, pc}
   10d92:	4605      	mov	r5, r0
   10d94:	4628      	mov	r0, r5
   10d96:	bd38      	pop	{r3, r4, r5, pc}
   10d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10d9a:	f7fa ff5f 	bl	bc5c <__retarget_lock_acquire_recursive>
   10d9e:	e7eb      	b.n	10d78 <_fflush_r+0x1c>
   10da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10da2:	f7fa ff5d 	bl	bc60 <__retarget_lock_release_recursive>
   10da6:	4628      	mov	r0, r5
   10da8:	bd38      	pop	{r3, r4, r5, pc}
   10daa:	f7fa fbff 	bl	b5ac <__sinit>
   10dae:	e7db      	b.n	10d68 <_fflush_r+0xc>

00010db0 <__sccl>:
   10db0:	b570      	push	{r4, r5, r6, lr}
   10db2:	780c      	ldrb	r4, [r1, #0]
   10db4:	2c5e      	cmp	r4, #94	; 0x5e
   10db6:	4686      	mov	lr, r0
   10db8:	d01e      	beq.n	10df8 <__sccl+0x48>
   10dba:	2200      	movs	r2, #0
   10dbc:	1c48      	adds	r0, r1, #1
   10dbe:	4694      	mov	ip, r2
   10dc0:	f10e 33ff 	add.w	r3, lr, #4294967295
   10dc4:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   10dc8:	f803 2f01 	strb.w	r2, [r3, #1]!
   10dcc:	428b      	cmp	r3, r1
   10dce:	d1fb      	bne.n	10dc8 <__sccl+0x18>
   10dd0:	b184      	cbz	r4, 10df4 <__sccl+0x44>
   10dd2:	f08c 0101 	eor.w	r1, ip, #1
   10dd6:	f80e 1004 	strb.w	r1, [lr, r4]
   10dda:	1c45      	adds	r5, r0, #1
   10ddc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   10de0:	2b2d      	cmp	r3, #45	; 0x2d
   10de2:	d00e      	beq.n	10e02 <__sccl+0x52>
   10de4:	2b5d      	cmp	r3, #93	; 0x5d
   10de6:	d003      	beq.n	10df0 <__sccl+0x40>
   10de8:	b11b      	cbz	r3, 10df2 <__sccl+0x42>
   10dea:	461c      	mov	r4, r3
   10dec:	4628      	mov	r0, r5
   10dee:	e7f2      	b.n	10dd6 <__sccl+0x26>
   10df0:	4628      	mov	r0, r5
   10df2:	bd70      	pop	{r4, r5, r6, pc}
   10df4:	3801      	subs	r0, #1
   10df6:	bd70      	pop	{r4, r5, r6, pc}
   10df8:	2201      	movs	r2, #1
   10dfa:	784c      	ldrb	r4, [r1, #1]
   10dfc:	1c88      	adds	r0, r1, #2
   10dfe:	4694      	mov	ip, r2
   10e00:	e7de      	b.n	10dc0 <__sccl+0x10>
   10e02:	f890 c001 	ldrb.w	ip, [r0, #1]
   10e06:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   10e0a:	d0ee      	beq.n	10dea <__sccl+0x3a>
   10e0c:	4564      	cmp	r4, ip
   10e0e:	dcec      	bgt.n	10dea <__sccl+0x3a>
   10e10:	1c66      	adds	r6, r4, #1
   10e12:	3002      	adds	r0, #2
   10e14:	eb0e 0206 	add.w	r2, lr, r6
   10e18:	f802 1b01 	strb.w	r1, [r2], #1
   10e1c:	eba2 030e 	sub.w	r3, r2, lr
   10e20:	3b01      	subs	r3, #1
   10e22:	459c      	cmp	ip, r3
   10e24:	dcf8      	bgt.n	10e18 <__sccl+0x68>
   10e26:	ebac 0304 	sub.w	r3, ip, r4
   10e2a:	3b01      	subs	r3, #1
   10e2c:	4564      	cmp	r4, ip
   10e2e:	bfa8      	it	ge
   10e30:	2300      	movge	r3, #0
   10e32:	3502      	adds	r5, #2
   10e34:	199c      	adds	r4, r3, r6
   10e36:	e7d1      	b.n	10ddc <__sccl+0x2c>

00010e38 <stpncpy>:
   10e38:	ea41 0300 	orr.w	r3, r1, r0
   10e3c:	079b      	lsls	r3, r3, #30
   10e3e:	b430      	push	{r4, r5}
   10e40:	d101      	bne.n	10e46 <stpncpy+0xe>
   10e42:	2a03      	cmp	r2, #3
   10e44:	d80f      	bhi.n	10e66 <stpncpy+0x2e>
   10e46:	f101 3cff 	add.w	ip, r1, #4294967295
   10e4a:	e007      	b.n	10e5c <stpncpy+0x24>
   10e4c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   10e50:	f803 1b01 	strb.w	r1, [r3], #1
   10e54:	1e54      	subs	r4, r2, #1
   10e56:	b1c1      	cbz	r1, 10e8a <stpncpy+0x52>
   10e58:	4622      	mov	r2, r4
   10e5a:	4618      	mov	r0, r3
   10e5c:	4603      	mov	r3, r0
   10e5e:	2a00      	cmp	r2, #0
   10e60:	d1f4      	bne.n	10e4c <stpncpy+0x14>
   10e62:	bc30      	pop	{r4, r5}
   10e64:	4770      	bx	lr
   10e66:	460b      	mov	r3, r1
   10e68:	4619      	mov	r1, r3
   10e6a:	f853 5b04 	ldr.w	r5, [r3], #4
   10e6e:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   10e72:	ea24 0405 	bic.w	r4, r4, r5
   10e76:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   10e7a:	d1e4      	bne.n	10e46 <stpncpy+0xe>
   10e7c:	3a04      	subs	r2, #4
   10e7e:	2a03      	cmp	r2, #3
   10e80:	f840 5b04 	str.w	r5, [r0], #4
   10e84:	4619      	mov	r1, r3
   10e86:	d8ef      	bhi.n	10e68 <stpncpy+0x30>
   10e88:	e7dd      	b.n	10e46 <stpncpy+0xe>
   10e8a:	4402      	add	r2, r0
   10e8c:	2c00      	cmp	r4, #0
   10e8e:	d0e8      	beq.n	10e62 <stpncpy+0x2a>
   10e90:	f803 1b01 	strb.w	r1, [r3], #1
   10e94:	4293      	cmp	r3, r2
   10e96:	d1fb      	bne.n	10e90 <stpncpy+0x58>
   10e98:	bc30      	pop	{r4, r5}
   10e9a:	4770      	bx	lr

00010e9c <_localeconv_r>:
   10e9c:	4800      	ldr	r0, [pc, #0]	; (10ea0 <_localeconv_r+0x4>)
   10e9e:	4770      	bx	lr
   10ea0:	200086e4 	.word	0x200086e4
   10ea4:	00000000 	.word	0x00000000

00010ea8 <frexp>:
   10ea8:	b430      	push	{r4, r5}
   10eaa:	b082      	sub	sp, #8
   10eac:	ed8d 0b00 	vstr	d0, [sp]
   10eb0:	9a01      	ldr	r2, [sp, #4]
   10eb2:	4c19      	ldr	r4, [pc, #100]	; (10f18 <frexp+0x70>)
   10eb4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10eb8:	2100      	movs	r1, #0
   10eba:	42a3      	cmp	r3, r4
   10ebc:	6001      	str	r1, [r0, #0]
   10ebe:	dc21      	bgt.n	10f04 <frexp+0x5c>
   10ec0:	9c00      	ldr	r4, [sp, #0]
   10ec2:	431c      	orrs	r4, r3
   10ec4:	d01e      	beq.n	10f04 <frexp+0x5c>
   10ec6:	4c15      	ldr	r4, [pc, #84]	; (10f1c <frexp+0x74>)
   10ec8:	4014      	ands	r4, r2
   10eca:	b954      	cbnz	r4, 10ee2 <frexp+0x3a>
   10ecc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 10f10 <frexp+0x68>
   10ed0:	ee20 7b07 	vmul.f64	d7, d0, d7
   10ed4:	ed8d 7b00 	vstr	d7, [sp]
   10ed8:	9a01      	ldr	r2, [sp, #4]
   10eda:	f06f 0135 	mvn.w	r1, #53	; 0x35
   10ede:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10ee2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   10ee6:	e9dd 4500 	ldrd	r4, r5, [sp]
   10eea:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   10eee:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10ef2:	151b      	asrs	r3, r3, #20
   10ef4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   10ef8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   10efc:	e9cd 4500 	strd	r4, r5, [sp]
   10f00:	440b      	add	r3, r1
   10f02:	6003      	str	r3, [r0, #0]
   10f04:	ed9d 0b00 	vldr	d0, [sp]
   10f08:	b002      	add	sp, #8
   10f0a:	bc30      	pop	{r4, r5}
   10f0c:	4770      	bx	lr
   10f0e:	bf00      	nop
   10f10:	00000000 	.word	0x00000000
   10f14:	43500000 	.word	0x43500000
   10f18:	7fefffff 	.word	0x7fefffff
   10f1c:	7ff00000 	.word	0x7ff00000

00010f20 <__assert_func>:
   10f20:	b500      	push	{lr}
   10f22:	4c0b      	ldr	r4, [pc, #44]	; (10f50 <__assert_func+0x30>)
   10f24:	6825      	ldr	r5, [r4, #0]
   10f26:	4614      	mov	r4, r2
   10f28:	68ee      	ldr	r6, [r5, #12]
   10f2a:	461a      	mov	r2, r3
   10f2c:	b085      	sub	sp, #20
   10f2e:	4603      	mov	r3, r0
   10f30:	460d      	mov	r5, r1
   10f32:	b14c      	cbz	r4, 10f48 <__assert_func+0x28>
   10f34:	4907      	ldr	r1, [pc, #28]	; (10f54 <__assert_func+0x34>)
   10f36:	9500      	str	r5, [sp, #0]
   10f38:	e9cd 1401 	strd	r1, r4, [sp, #4]
   10f3c:	4630      	mov	r0, r6
   10f3e:	4906      	ldr	r1, [pc, #24]	; (10f58 <__assert_func+0x38>)
   10f40:	f001 fabe 	bl	124c0 <fiprintf>
   10f44:	f7f7 fa4a 	bl	83dc <abort>
   10f48:	4904      	ldr	r1, [pc, #16]	; (10f5c <__assert_func+0x3c>)
   10f4a:	460c      	mov	r4, r1
   10f4c:	e7f3      	b.n	10f36 <__assert_func+0x16>
   10f4e:	bf00      	nop
   10f50:	20008b7c 	.word	0x20008b7c
   10f54:	20000888 	.word	0x20000888
   10f58:	20000898 	.word	0x20000898
   10f5c:	20008024 	.word	0x20008024

00010f60 <_calloc_r>:
   10f60:	b538      	push	{r3, r4, r5, lr}
   10f62:	fba1 1402 	umull	r1, r4, r1, r2
   10f66:	bb8c      	cbnz	r4, 10fcc <_calloc_r+0x6c>
   10f68:	f7f8 fdec 	bl	9b44 <_malloc_r>
   10f6c:	4605      	mov	r5, r0
   10f6e:	b1e0      	cbz	r0, 10faa <_calloc_r+0x4a>
   10f70:	f850 2c04 	ldr.w	r2, [r0, #-4]
   10f74:	f022 0203 	bic.w	r2, r2, #3
   10f78:	3a04      	subs	r2, #4
   10f7a:	2a24      	cmp	r2, #36	; 0x24
   10f7c:	d817      	bhi.n	10fae <_calloc_r+0x4e>
   10f7e:	2a13      	cmp	r2, #19
   10f80:	d91a      	bls.n	10fb8 <_calloc_r+0x58>
   10f82:	2a1b      	cmp	r2, #27
   10f84:	e9c0 4400 	strd	r4, r4, [r0]
   10f88:	d91d      	bls.n	10fc6 <_calloc_r+0x66>
   10f8a:	2a24      	cmp	r2, #36	; 0x24
   10f8c:	bf14      	ite	ne
   10f8e:	f100 0210 	addne.w	r2, r0, #16
   10f92:	f100 0218 	addeq.w	r2, r0, #24
   10f96:	f04f 0300 	mov.w	r3, #0
   10f9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   10f9e:	bf04      	itt	eq
   10fa0:	6104      	streq	r4, [r0, #16]
   10fa2:	6144      	streq	r4, [r0, #20]
   10fa4:	e9c2 3300 	strd	r3, r3, [r2]
   10fa8:	6093      	str	r3, [r2, #8]
   10faa:	4628      	mov	r0, r5
   10fac:	bd38      	pop	{r3, r4, r5, pc}
   10fae:	4621      	mov	r1, r4
   10fb0:	f7fa fcf0 	bl	b994 <memset>
   10fb4:	4628      	mov	r0, r5
   10fb6:	bd38      	pop	{r3, r4, r5, pc}
   10fb8:	4602      	mov	r2, r0
   10fba:	2300      	movs	r3, #0
   10fbc:	e9c2 3300 	strd	r3, r3, [r2]
   10fc0:	6093      	str	r3, [r2, #8]
   10fc2:	4628      	mov	r0, r5
   10fc4:	bd38      	pop	{r3, r4, r5, pc}
   10fc6:	f100 0208 	add.w	r2, r0, #8
   10fca:	e7f6      	b.n	10fba <_calloc_r+0x5a>
   10fcc:	f7fa fe18 	bl	bc00 <__errno>
   10fd0:	230c      	movs	r3, #12
   10fd2:	2500      	movs	r5, #0
   10fd4:	6003      	str	r3, [r0, #0]
   10fd6:	e7e8      	b.n	10faa <_calloc_r+0x4a>

00010fd8 <quorem>:
   10fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fdc:	6903      	ldr	r3, [r0, #16]
   10fde:	690c      	ldr	r4, [r1, #16]
   10fe0:	42a3      	cmp	r3, r4
   10fe2:	b083      	sub	sp, #12
   10fe4:	f2c0 8087 	blt.w	110f6 <quorem+0x11e>
   10fe8:	3c01      	subs	r4, #1
   10fea:	f101 0514 	add.w	r5, r1, #20
   10fee:	00a3      	lsls	r3, r4, #2
   10ff0:	f100 0814 	add.w	r8, r0, #20
   10ff4:	9300      	str	r3, [sp, #0]
   10ff6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   10ffa:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10ffe:	3301      	adds	r3, #1
   11000:	4681      	mov	r9, r0
   11002:	429a      	cmp	r2, r3
   11004:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   11008:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   1100c:	9001      	str	r0, [sp, #4]
   1100e:	fbb2 f6f3 	udiv	r6, r2, r3
   11012:	d33b      	bcc.n	1108c <quorem+0xb4>
   11014:	f04f 0c00 	mov.w	ip, #0
   11018:	46ae      	mov	lr, r5
   1101a:	4640      	mov	r0, r8
   1101c:	46e2      	mov	sl, ip
   1101e:	4663      	mov	r3, ip
   11020:	f85e bb04 	ldr.w	fp, [lr], #4
   11024:	6802      	ldr	r2, [r0, #0]
   11026:	fa1f fc8b 	uxth.w	ip, fp
   1102a:	fb06 330c 	mla	r3, r6, ip, r3
   1102e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   11032:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   11036:	fb06 cc0b 	mla	ip, r6, fp, ip
   1103a:	b29b      	uxth	r3, r3
   1103c:	ebaa 0303 	sub.w	r3, sl, r3
   11040:	fa1f fa8c 	uxth.w	sl, ip
   11044:	fa13 f382 	uxtah	r3, r3, r2
   11048:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   1104c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   11050:	b29b      	uxth	r3, r3
   11052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11056:	4577      	cmp	r7, lr
   11058:	f840 3b04 	str.w	r3, [r0], #4
   1105c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   11060:	ea4f 431c 	mov.w	r3, ip, lsr #16
   11064:	d2dc      	bcs.n	11020 <quorem+0x48>
   11066:	9b00      	ldr	r3, [sp, #0]
   11068:	f858 3003 	ldr.w	r3, [r8, r3]
   1106c:	b973      	cbnz	r3, 1108c <quorem+0xb4>
   1106e:	9b01      	ldr	r3, [sp, #4]
   11070:	3b04      	subs	r3, #4
   11072:	4598      	cmp	r8, r3
   11074:	d304      	bcc.n	11080 <quorem+0xa8>
   11076:	e007      	b.n	11088 <quorem+0xb0>
   11078:	4598      	cmp	r8, r3
   1107a:	f104 34ff 	add.w	r4, r4, #4294967295
   1107e:	d203      	bcs.n	11088 <quorem+0xb0>
   11080:	f853 2904 	ldr.w	r2, [r3], #-4
   11084:	2a00      	cmp	r2, #0
   11086:	d0f7      	beq.n	11078 <quorem+0xa0>
   11088:	f8c9 4010 	str.w	r4, [r9, #16]
   1108c:	4648      	mov	r0, r9
   1108e:	f7fc f933 	bl	d2f8 <__mcmp>
   11092:	2800      	cmp	r0, #0
   11094:	db2b      	blt.n	110ee <quorem+0x116>
   11096:	3601      	adds	r6, #1
   11098:	4641      	mov	r1, r8
   1109a:	2300      	movs	r3, #0
   1109c:	f855 0b04 	ldr.w	r0, [r5], #4
   110a0:	f8d1 c000 	ldr.w	ip, [r1]
   110a4:	b282      	uxth	r2, r0
   110a6:	1a9a      	subs	r2, r3, r2
   110a8:	0c03      	lsrs	r3, r0, #16
   110aa:	fa12 f28c 	uxtah	r2, r2, ip
   110ae:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   110b2:	eb03 4322 	add.w	r3, r3, r2, asr #16
   110b6:	b292      	uxth	r2, r2
   110b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   110bc:	42af      	cmp	r7, r5
   110be:	f841 2b04 	str.w	r2, [r1], #4
   110c2:	ea4f 4323 	mov.w	r3, r3, asr #16
   110c6:	d2e9      	bcs.n	1109c <quorem+0xc4>
   110c8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   110cc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   110d0:	b96a      	cbnz	r2, 110ee <quorem+0x116>
   110d2:	3b04      	subs	r3, #4
   110d4:	4598      	cmp	r8, r3
   110d6:	d304      	bcc.n	110e2 <quorem+0x10a>
   110d8:	e007      	b.n	110ea <quorem+0x112>
   110da:	4598      	cmp	r8, r3
   110dc:	f104 34ff 	add.w	r4, r4, #4294967295
   110e0:	d203      	bcs.n	110ea <quorem+0x112>
   110e2:	f853 2904 	ldr.w	r2, [r3], #-4
   110e6:	2a00      	cmp	r2, #0
   110e8:	d0f7      	beq.n	110da <quorem+0x102>
   110ea:	f8c9 4010 	str.w	r4, [r9, #16]
   110ee:	4630      	mov	r0, r6
   110f0:	b003      	add	sp, #12
   110f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110f6:	2000      	movs	r0, #0
   110f8:	b003      	add	sp, #12
   110fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110fe:	bf00      	nop

00011100 <_dtoa_r>:
   11100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11104:	ed2d 8b02 	vpush	{d8}
   11108:	b08f      	sub	sp, #60	; 0x3c
   1110a:	ed8d 0b02 	vstr	d0, [sp, #8]
   1110e:	9101      	str	r1, [sp, #4]
   11110:	6b81      	ldr	r1, [r0, #56]	; 0x38
   11112:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   11114:	9305      	str	r3, [sp, #20]
   11116:	ec57 6b10 	vmov	r6, r7, d0
   1111a:	4604      	mov	r4, r0
   1111c:	4693      	mov	fp, r2
   1111e:	b141      	cbz	r1, 11132 <_dtoa_r+0x32>
   11120:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   11122:	604a      	str	r2, [r1, #4]
   11124:	2301      	movs	r3, #1
   11126:	4093      	lsls	r3, r2
   11128:	608b      	str	r3, [r1, #8]
   1112a:	f7fb fe2d 	bl	cd88 <_Bfree>
   1112e:	2300      	movs	r3, #0
   11130:	63a3      	str	r3, [r4, #56]	; 0x38
   11132:	f1b7 0800 	subs.w	r8, r7, #0
   11136:	bfb4      	ite	lt
   11138:	2301      	movlt	r3, #1
   1113a:	2300      	movge	r3, #0
   1113c:	602b      	str	r3, [r5, #0]
   1113e:	4bbe      	ldr	r3, [pc, #760]	; (11438 <_dtoa_r+0x338>)
   11140:	bfbc      	itt	lt
   11142:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   11146:	f8cd 800c 	strlt.w	r8, [sp, #12]
   1114a:	ea33 0308 	bics.w	r3, r3, r8
   1114e:	f000 809f 	beq.w	11290 <_dtoa_r+0x190>
   11152:	ed9d 8b02 	vldr	d8, [sp, #8]
   11156:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1115e:	d111      	bne.n	11184 <_dtoa_r+0x84>
   11160:	9a05      	ldr	r2, [sp, #20]
   11162:	2301      	movs	r3, #1
   11164:	6013      	str	r3, [r2, #0]
   11166:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11168:	2b00      	cmp	r3, #0
   1116a:	f000 823f 	beq.w	115ec <_dtoa_r+0x4ec>
   1116e:	4bb3      	ldr	r3, [pc, #716]	; (1143c <_dtoa_r+0x33c>)
   11170:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11172:	6013      	str	r3, [r2, #0]
   11174:	3b01      	subs	r3, #1
   11176:	9300      	str	r3, [sp, #0]
   11178:	9800      	ldr	r0, [sp, #0]
   1117a:	b00f      	add	sp, #60	; 0x3c
   1117c:	ecbd 8b02 	vpop	{d8}
   11180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11184:	aa0c      	add	r2, sp, #48	; 0x30
   11186:	a90d      	add	r1, sp, #52	; 0x34
   11188:	4620      	mov	r0, r4
   1118a:	eeb0 0b48 	vmov.f64	d0, d8
   1118e:	f7fc fa13 	bl	d5b8 <__d2b>
   11192:	ea5f 5318 	movs.w	r3, r8, lsr #20
   11196:	4605      	mov	r5, r0
   11198:	f040 8092 	bne.w	112c0 <_dtoa_r+0x1c0>
   1119c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   111a0:	440b      	add	r3, r1
   111a2:	f203 4232 	addw	r2, r3, #1074	; 0x432
   111a6:	2a20      	cmp	r2, #32
   111a8:	f340 82fa 	ble.w	117a0 <_dtoa_r+0x6a0>
   111ac:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   111b0:	fa08 f802 	lsl.w	r8, r8, r2
   111b4:	f203 4212 	addw	r2, r3, #1042	; 0x412
   111b8:	40d6      	lsrs	r6, r2
   111ba:	ea48 0206 	orr.w	r2, r8, r6
   111be:	ee07 2a10 	vmov	s14, r2
   111c2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   111c6:	1e58      	subs	r0, r3, #1
   111c8:	ee17 6a90 	vmov	r6, s15
   111cc:	ec53 2b17 	vmov	r2, r3, d7
   111d0:	f04f 0a01 	mov.w	sl, #1
   111d4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   111d8:	ed9f 3b91 	vldr	d3, [pc, #580]	; 11420 <_dtoa_r+0x320>
   111dc:	ed9f 7b92 	vldr	d7, [pc, #584]	; 11428 <_dtoa_r+0x328>
   111e0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 11430 <_dtoa_r+0x330>
   111e4:	ee06 0a90 	vmov	s13, r0
   111e8:	ec43 2b12 	vmov	d2, r2, r3
   111ec:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   111f0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   111f4:	ee32 6b46 	vsub.f64	d6, d2, d6
   111f8:	eea6 7b03 	vfma.f64	d7, d6, d3
   111fc:	eea4 7b05 	vfma.f64	d7, d4, d5
   11200:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11204:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   11208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1120c:	ee16 7a90 	vmov	r7, s13
   11210:	d508      	bpl.n	11224 <_dtoa_r+0x124>
   11212:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   11216:	eeb4 6b47 	vcmp.f64	d6, d7
   1121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1121e:	bf18      	it	ne
   11220:	f107 37ff 	addne.w	r7, r7, #4294967295
   11224:	2f16      	cmp	r7, #22
   11226:	f200 8145 	bhi.w	114b4 <_dtoa_r+0x3b4>
   1122a:	4b85      	ldr	r3, [pc, #532]	; (11440 <_dtoa_r+0x340>)
   1122c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   11230:	ed93 7b00 	vldr	d7, [r3]
   11234:	eeb4 8bc7 	vcmpe.f64	d8, d7
   11238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1123c:	d557      	bpl.n	112ee <_dtoa_r+0x1ee>
   1123e:	1a09      	subs	r1, r1, r0
   11240:	2300      	movs	r3, #0
   11242:	f1b1 0801 	subs.w	r8, r1, #1
   11246:	f107 37ff 	add.w	r7, r7, #4294967295
   1124a:	930a      	str	r3, [sp, #40]	; 0x28
   1124c:	f100 8139 	bmi.w	114c2 <_dtoa_r+0x3c2>
   11250:	2300      	movs	r3, #0
   11252:	9306      	str	r3, [sp, #24]
   11254:	2f00      	cmp	r7, #0
   11256:	da52      	bge.n	112fe <_dtoa_r+0x1fe>
   11258:	9b06      	ldr	r3, [sp, #24]
   1125a:	9704      	str	r7, [sp, #16]
   1125c:	1bdb      	subs	r3, r3, r7
   1125e:	9306      	str	r3, [sp, #24]
   11260:	427b      	negs	r3, r7
   11262:	9308      	str	r3, [sp, #32]
   11264:	9b01      	ldr	r3, [sp, #4]
   11266:	2b09      	cmp	r3, #9
   11268:	f04f 0700 	mov.w	r7, #0
   1126c:	d84e      	bhi.n	1130c <_dtoa_r+0x20c>
   1126e:	2b05      	cmp	r3, #5
   11270:	f340 829d 	ble.w	117ae <_dtoa_r+0x6ae>
   11274:	3b04      	subs	r3, #4
   11276:	9301      	str	r3, [sp, #4]
   11278:	2600      	movs	r6, #0
   1127a:	9b01      	ldr	r3, [sp, #4]
   1127c:	1e9a      	subs	r2, r3, #2
   1127e:	2a03      	cmp	r2, #3
   11280:	f200 8125 	bhi.w	114ce <_dtoa_r+0x3ce>
   11284:	e8df f012 	tbh	[pc, r2, lsl #1]
   11288:	03a703aa 	.word	0x03a703aa
   1128c:	037e039d 	.word	0x037e039d
   11290:	9a05      	ldr	r2, [sp, #20]
   11292:	f3c8 0813 	ubfx	r8, r8, #0, #20
   11296:	f242 730f 	movw	r3, #9999	; 0x270f
   1129a:	ea58 0806 	orrs.w	r8, r8, r6
   1129e:	6013      	str	r3, [r2, #0]
   112a0:	d11e      	bne.n	112e0 <_dtoa_r+0x1e0>
   112a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   112a4:	2b00      	cmp	r3, #0
   112a6:	f000 8591 	beq.w	11dcc <_dtoa_r+0xccc>
   112aa:	4b66      	ldr	r3, [pc, #408]	; (11444 <_dtoa_r+0x344>)
   112ac:	9300      	str	r3, [sp, #0]
   112ae:	3308      	adds	r3, #8
   112b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   112b2:	9800      	ldr	r0, [sp, #0]
   112b4:	6013      	str	r3, [r2, #0]
   112b6:	b00f      	add	sp, #60	; 0x3c
   112b8:	ecbd 8b02 	vpop	{d8}
   112bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112c0:	ee18 6a90 	vmov	r6, s17
   112c4:	f3c6 0613 	ubfx	r6, r6, #0, #20
   112c8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   112cc:	ec53 2b18 	vmov	r2, r3, d8
   112d0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   112d4:	990c      	ldr	r1, [sp, #48]	; 0x30
   112d6:	f04f 0a00 	mov.w	sl, #0
   112da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   112de:	e77b      	b.n	111d8 <_dtoa_r+0xd8>
   112e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   112e2:	2b00      	cmp	r3, #0
   112e4:	f040 833b 	bne.w	1195e <_dtoa_r+0x85e>
   112e8:	4b57      	ldr	r3, [pc, #348]	; (11448 <_dtoa_r+0x348>)
   112ea:	9300      	str	r3, [sp, #0]
   112ec:	e744      	b.n	11178 <_dtoa_r+0x78>
   112ee:	1a09      	subs	r1, r1, r0
   112f0:	2300      	movs	r3, #0
   112f2:	f1b1 0801 	subs.w	r8, r1, #1
   112f6:	930a      	str	r3, [sp, #40]	; 0x28
   112f8:	f100 80e3 	bmi.w	114c2 <_dtoa_r+0x3c2>
   112fc:	9306      	str	r3, [sp, #24]
   112fe:	2300      	movs	r3, #0
   11300:	9308      	str	r3, [sp, #32]
   11302:	9b01      	ldr	r3, [sp, #4]
   11304:	9704      	str	r7, [sp, #16]
   11306:	2b09      	cmp	r3, #9
   11308:	44b8      	add	r8, r7
   1130a:	d9b0      	bls.n	1126e <_dtoa_r+0x16e>
   1130c:	2300      	movs	r3, #0
   1130e:	2601      	movs	r6, #1
   11310:	9301      	str	r3, [sp, #4]
   11312:	9607      	str	r6, [sp, #28]
   11314:	f04f 39ff 	mov.w	r9, #4294967295
   11318:	469b      	mov	fp, r3
   1131a:	2100      	movs	r1, #0
   1131c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1131e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   11322:	4620      	mov	r0, r4
   11324:	f7fb fd0a 	bl	cd3c <_Balloc>
   11328:	9000      	str	r0, [sp, #0]
   1132a:	2800      	cmp	r0, #0
   1132c:	f000 8540 	beq.w	11db0 <_dtoa_r+0xcb0>
   11330:	9b00      	ldr	r3, [sp, #0]
   11332:	63a3      	str	r3, [r4, #56]	; 0x38
   11334:	f1b9 0f0e 	cmp.w	r9, #14
   11338:	f200 80dc 	bhi.w	114f4 <_dtoa_r+0x3f4>
   1133c:	2e00      	cmp	r6, #0
   1133e:	f000 80d9 	beq.w	114f4 <_dtoa_r+0x3f4>
   11342:	9b04      	ldr	r3, [sp, #16]
   11344:	2b00      	cmp	r3, #0
   11346:	f340 83de 	ble.w	11b06 <_dtoa_r+0xa06>
   1134a:	4a3d      	ldr	r2, [pc, #244]	; (11440 <_dtoa_r+0x340>)
   1134c:	f003 010f 	and.w	r1, r3, #15
   11350:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11354:	ed92 7b00 	vldr	d7, [r2]
   11358:	111a      	asrs	r2, r3, #4
   1135a:	05db      	lsls	r3, r3, #23
   1135c:	f140 8382 	bpl.w	11a64 <_dtoa_r+0x964>
   11360:	493a      	ldr	r1, [pc, #232]	; (1144c <_dtoa_r+0x34c>)
   11362:	ed91 6b08 	vldr	d6, [r1, #32]
   11366:	f002 020f 	and.w	r2, r2, #15
   1136a:	2003      	movs	r0, #3
   1136c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   11370:	b15a      	cbz	r2, 1138a <_dtoa_r+0x28a>
   11372:	4936      	ldr	r1, [pc, #216]	; (1144c <_dtoa_r+0x34c>)
   11374:	07d6      	lsls	r6, r2, #31
   11376:	d504      	bpl.n	11382 <_dtoa_r+0x282>
   11378:	ed91 6b00 	vldr	d6, [r1]
   1137c:	3001      	adds	r0, #1
   1137e:	ee27 7b06 	vmul.f64	d7, d7, d6
   11382:	1052      	asrs	r2, r2, #1
   11384:	f101 0108 	add.w	r1, r1, #8
   11388:	d1f4      	bne.n	11374 <_dtoa_r+0x274>
   1138a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1138e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11390:	b13b      	cbz	r3, 113a2 <_dtoa_r+0x2a2>
   11392:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   11396:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1139e:	f100 84ae 	bmi.w	11cfe <_dtoa_r+0xbfe>
   113a2:	ee07 0a90 	vmov	s15, r0
   113a6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   113aa:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   113ae:	eea5 7b06 	vfma.f64	d7, d5, d6
   113b2:	ee17 2a90 	vmov	r2, s15
   113b6:	ec51 0b17 	vmov	r0, r1, d7
   113ba:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   113be:	f1b9 0f00 	cmp.w	r9, #0
   113c2:	f000 8388 	beq.w	11ad6 <_dtoa_r+0x9d6>
   113c6:	9e04      	ldr	r6, [sp, #16]
   113c8:	464a      	mov	r2, r9
   113ca:	9b07      	ldr	r3, [sp, #28]
   113cc:	2b00      	cmp	r3, #0
   113ce:	f000 8447 	beq.w	11c60 <_dtoa_r+0xb60>
   113d2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   113d6:	4b1a      	ldr	r3, [pc, #104]	; (11440 <_dtoa_r+0x340>)
   113d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   113dc:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   113e0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   113e4:	ee36 7b47 	vsub.f64	d7, d6, d7
   113e8:	ed1c 6b02 	vldr	d6, [ip, #-8]
   113ec:	ee83 5b06 	vdiv.f64	d5, d3, d6
   113f0:	ec41 0b16 	vmov	d6, r0, r1
   113f4:	ee14 0a90 	vmov	r0, s9
   113f8:	ee35 5b46 	vsub.f64	d5, d5, d6
   113fc:	9900      	ldr	r1, [sp, #0]
   113fe:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11402:	3030      	adds	r0, #48	; 0x30
   11404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11408:	f801 0b01 	strb.w	r0, [r1], #1
   1140c:	f300 84ac 	bgt.w	11d68 <_dtoa_r+0xc68>
   11410:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   11414:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11418:	f04f 0c00 	mov.w	ip, #0
   1141c:	e031      	b.n	11482 <_dtoa_r+0x382>
   1141e:	bf00      	nop
   11420:	636f4361 	.word	0x636f4361
   11424:	3fd287a7 	.word	0x3fd287a7
   11428:	8b60c8b3 	.word	0x8b60c8b3
   1142c:	3fc68a28 	.word	0x3fc68a28
   11430:	509f79fb 	.word	0x509f79fb
   11434:	3fd34413 	.word	0x3fd34413
   11438:	7ff00000 	.word	0x7ff00000
   1143c:	20000c71 	.word	0x20000c71
   11440:	200002a8 	.word	0x200002a8
   11444:	20000ba8 	.word	0x20000ba8
   11448:	20000bb4 	.word	0x20000bb4
   1144c:	20000280 	.word	0x20000280
   11450:	f10c 0c01 	add.w	ip, ip, #1
   11454:	4594      	cmp	ip, r2
   11456:	da4d      	bge.n	114f4 <_dtoa_r+0x3f4>
   11458:	ee27 7b04 	vmul.f64	d7, d7, d4
   1145c:	ee25 5b04 	vmul.f64	d5, d5, d4
   11460:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11464:	ee16 3a90 	vmov	r3, s13
   11468:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1146c:	3330      	adds	r3, #48	; 0x30
   1146e:	ee37 7b43 	vsub.f64	d7, d7, d3
   11472:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1147a:	f801 3b01 	strb.w	r3, [r1], #1
   1147e:	f100 8473 	bmi.w	11d68 <_dtoa_r+0xc68>
   11482:	ee32 6b47 	vsub.f64	d6, d2, d7
   11486:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1148e:	d5df      	bpl.n	11450 <_dtoa_r+0x350>
   11490:	9a00      	ldr	r2, [sp, #0]
   11492:	9604      	str	r6, [sp, #16]
   11494:	e002      	b.n	1149c <_dtoa_r+0x39c>
   11496:	428a      	cmp	r2, r1
   11498:	f000 8450 	beq.w	11d3c <_dtoa_r+0xc3c>
   1149c:	4689      	mov	r9, r1
   1149e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   114a2:	2b39      	cmp	r3, #57	; 0x39
   114a4:	d0f7      	beq.n	11496 <_dtoa_r+0x396>
   114a6:	3301      	adds	r3, #1
   114a8:	b2db      	uxtb	r3, r3
   114aa:	700b      	strb	r3, [r1, #0]
   114ac:	9b04      	ldr	r3, [sp, #16]
   114ae:	3301      	adds	r3, #1
   114b0:	9304      	str	r3, [sp, #16]
   114b2:	e155      	b.n	11760 <_dtoa_r+0x660>
   114b4:	1a09      	subs	r1, r1, r0
   114b6:	2301      	movs	r3, #1
   114b8:	f1b1 0801 	subs.w	r8, r1, #1
   114bc:	930a      	str	r3, [sp, #40]	; 0x28
   114be:	f57f aec7 	bpl.w	11250 <_dtoa_r+0x150>
   114c2:	f1c1 0301 	rsb	r3, r1, #1
   114c6:	9306      	str	r3, [sp, #24]
   114c8:	f04f 0800 	mov.w	r8, #0
   114cc:	e6c2      	b.n	11254 <_dtoa_r+0x154>
   114ce:	2600      	movs	r6, #0
   114d0:	63e6      	str	r6, [r4, #60]	; 0x3c
   114d2:	4631      	mov	r1, r6
   114d4:	4620      	mov	r0, r4
   114d6:	f7fb fc31 	bl	cd3c <_Balloc>
   114da:	9000      	str	r0, [sp, #0]
   114dc:	2800      	cmp	r0, #0
   114de:	f000 8467 	beq.w	11db0 <_dtoa_r+0xcb0>
   114e2:	9b00      	ldr	r3, [sp, #0]
   114e4:	63a3      	str	r3, [r4, #56]	; 0x38
   114e6:	f04f 33ff 	mov.w	r3, #4294967295
   114ea:	930b      	str	r3, [sp, #44]	; 0x2c
   114ec:	4699      	mov	r9, r3
   114ee:	2301      	movs	r3, #1
   114f0:	46b3      	mov	fp, r6
   114f2:	9307      	str	r3, [sp, #28]
   114f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   114f6:	2a00      	cmp	r2, #0
   114f8:	db55      	blt.n	115a6 <_dtoa_r+0x4a6>
   114fa:	9904      	ldr	r1, [sp, #16]
   114fc:	290e      	cmp	r1, #14
   114fe:	dc52      	bgt.n	115a6 <_dtoa_r+0x4a6>
   11500:	4bb7      	ldr	r3, [pc, #732]	; (117e0 <_dtoa_r+0x6e0>)
   11502:	f1bb 0f00 	cmp.w	fp, #0
   11506:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1150a:	ed93 6b00 	vldr	d6, [r3]
   1150e:	da15      	bge.n	1153c <_dtoa_r+0x43c>
   11510:	f1b9 0f00 	cmp.w	r9, #0
   11514:	dc12      	bgt.n	1153c <_dtoa_r+0x43c>
   11516:	f040 82f2 	bne.w	11afe <_dtoa_r+0x9fe>
   1151a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1151e:	ee26 7b07 	vmul.f64	d7, d6, d7
   11522:	eeb4 8bc7 	vcmpe.f64	d8, d7
   11526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1152a:	46ca      	mov	sl, r9
   1152c:	464e      	mov	r6, r9
   1152e:	f200 826d 	bhi.w	11a0c <_dtoa_r+0x90c>
   11532:	f8dd 8000 	ldr.w	r8, [sp]
   11536:	ea6f 0b0b 	mvn.w	fp, fp
   1153a:	e270      	b.n	11a1e <_dtoa_r+0x91e>
   1153c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   11540:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   11544:	9900      	ldr	r1, [sp, #0]
   11546:	ee17 3a10 	vmov	r3, s14
   1154a:	f1b9 0f01 	cmp.w	r9, #1
   1154e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   11552:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11556:	f801 3b01 	strb.w	r3, [r1], #1
   1155a:	eea5 8b46 	vfms.f64	d8, d5, d6
   1155e:	f000 8334 	beq.w	11bca <_dtoa_r+0xaca>
   11562:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11566:	2301      	movs	r3, #1
   11568:	e011      	b.n	1158e <_dtoa_r+0x48e>
   1156a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   1156e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   11572:	3301      	adds	r3, #1
   11574:	ee17 2a10 	vmov	r2, s14
   11578:	454b      	cmp	r3, r9
   1157a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1157e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11582:	f801 2b01 	strb.w	r2, [r1], #1
   11586:	eea5 8b46 	vfms.f64	d8, d5, d6
   1158a:	f000 831e 	beq.w	11bca <_dtoa_r+0xaca>
   1158e:	ee28 8b04 	vmul.f64	d8, d8, d4
   11592:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1159a:	d1e6      	bne.n	1156a <_dtoa_r+0x46a>
   1159c:	9b04      	ldr	r3, [sp, #16]
   1159e:	3301      	adds	r3, #1
   115a0:	9304      	str	r3, [sp, #16]
   115a2:	4689      	mov	r9, r1
   115a4:	e0dc      	b.n	11760 <_dtoa_r+0x660>
   115a6:	9b07      	ldr	r3, [sp, #28]
   115a8:	b343      	cbz	r3, 115fc <_dtoa_r+0x4fc>
   115aa:	9b01      	ldr	r3, [sp, #4]
   115ac:	2b01      	cmp	r3, #1
   115ae:	f340 8276 	ble.w	11a9e <_dtoa_r+0x99e>
   115b2:	9b08      	ldr	r3, [sp, #32]
   115b4:	f109 3aff 	add.w	sl, r9, #4294967295
   115b8:	4553      	cmp	r3, sl
   115ba:	f280 823f 	bge.w	11a3c <_dtoa_r+0x93c>
   115be:	9b08      	ldr	r3, [sp, #32]
   115c0:	f8cd a020 	str.w	sl, [sp, #32]
   115c4:	ebaa 0203 	sub.w	r2, sl, r3
   115c8:	4417      	add	r7, r2
   115ca:	f04f 0a00 	mov.w	sl, #0
   115ce:	f1b9 0f00 	cmp.w	r9, #0
   115d2:	f2c0 8325 	blt.w	11c20 <_dtoa_r+0xb20>
   115d6:	9b06      	ldr	r3, [sp, #24]
   115d8:	9309      	str	r3, [sp, #36]	; 0x24
   115da:	444b      	add	r3, r9
   115dc:	44c8      	add	r8, r9
   115de:	9306      	str	r3, [sp, #24]
   115e0:	2101      	movs	r1, #1
   115e2:	4620      	mov	r0, r4
   115e4:	f7fb fcd4 	bl	cf90 <__i2b>
   115e8:	4606      	mov	r6, r0
   115ea:	e00c      	b.n	11606 <_dtoa_r+0x506>
   115ec:	4b7d      	ldr	r3, [pc, #500]	; (117e4 <_dtoa_r+0x6e4>)
   115ee:	9300      	str	r3, [sp, #0]
   115f0:	9800      	ldr	r0, [sp, #0]
   115f2:	b00f      	add	sp, #60	; 0x3c
   115f4:	ecbd 8b02 	vpop	{d8}
   115f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115fc:	9b06      	ldr	r3, [sp, #24]
   115fe:	f8dd a020 	ldr.w	sl, [sp, #32]
   11602:	9e07      	ldr	r6, [sp, #28]
   11604:	9309      	str	r3, [sp, #36]	; 0x24
   11606:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11608:	b16b      	cbz	r3, 11626 <_dtoa_r+0x526>
   1160a:	f1b8 0f00 	cmp.w	r8, #0
   1160e:	dd0a      	ble.n	11626 <_dtoa_r+0x526>
   11610:	4543      	cmp	r3, r8
   11612:	9906      	ldr	r1, [sp, #24]
   11614:	461a      	mov	r2, r3
   11616:	bfa8      	it	ge
   11618:	4642      	movge	r2, r8
   1161a:	1a89      	subs	r1, r1, r2
   1161c:	1a9b      	subs	r3, r3, r2
   1161e:	9106      	str	r1, [sp, #24]
   11620:	9309      	str	r3, [sp, #36]	; 0x24
   11622:	eba8 0802 	sub.w	r8, r8, r2
   11626:	9b08      	ldr	r3, [sp, #32]
   11628:	b163      	cbz	r3, 11644 <_dtoa_r+0x544>
   1162a:	9b07      	ldr	r3, [sp, #28]
   1162c:	2b00      	cmp	r3, #0
   1162e:	f000 82a7 	beq.w	11b80 <_dtoa_r+0xa80>
   11632:	f1ba 0f00 	cmp.w	sl, #0
   11636:	f300 8204 	bgt.w	11a42 <_dtoa_r+0x942>
   1163a:	9b08      	ldr	r3, [sp, #32]
   1163c:	ebb3 020a 	subs.w	r2, r3, sl
   11640:	f040 82ff 	bne.w	11c42 <_dtoa_r+0xb42>
   11644:	2101      	movs	r1, #1
   11646:	4620      	mov	r0, r4
   11648:	f7fb fca2 	bl	cf90 <__i2b>
   1164c:	2f00      	cmp	r7, #0
   1164e:	4682      	mov	sl, r0
   11650:	f300 80af 	bgt.w	117b2 <_dtoa_r+0x6b2>
   11654:	9b01      	ldr	r3, [sp, #4]
   11656:	2b01      	cmp	r3, #1
   11658:	f340 8187 	ble.w	1196a <_dtoa_r+0x86a>
   1165c:	2300      	movs	r3, #0
   1165e:	9308      	str	r3, [sp, #32]
   11660:	2001      	movs	r0, #1
   11662:	2f00      	cmp	r7, #0
   11664:	f040 80b1 	bne.w	117ca <_dtoa_r+0x6ca>
   11668:	4440      	add	r0, r8
   1166a:	f010 001f 	ands.w	r0, r0, #31
   1166e:	f000 817a 	beq.w	11966 <_dtoa_r+0x866>
   11672:	f1c0 0220 	rsb	r2, r0, #32
   11676:	2a04      	cmp	r2, #4
   11678:	f300 8088 	bgt.w	1178c <_dtoa_r+0x68c>
   1167c:	f040 81f6 	bne.w	11a6c <_dtoa_r+0x96c>
   11680:	9b06      	ldr	r3, [sp, #24]
   11682:	2b00      	cmp	r3, #0
   11684:	dd05      	ble.n	11692 <_dtoa_r+0x592>
   11686:	4629      	mov	r1, r5
   11688:	461a      	mov	r2, r3
   1168a:	4620      	mov	r0, r4
   1168c:	f7fb fdbc 	bl	d208 <__lshift>
   11690:	4605      	mov	r5, r0
   11692:	f1b8 0f00 	cmp.w	r8, #0
   11696:	dd05      	ble.n	116a4 <_dtoa_r+0x5a4>
   11698:	4651      	mov	r1, sl
   1169a:	4642      	mov	r2, r8
   1169c:	4620      	mov	r0, r4
   1169e:	f7fb fdb3 	bl	d208 <__lshift>
   116a2:	4682      	mov	sl, r0
   116a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   116a6:	2b00      	cmp	r3, #0
   116a8:	f040 813f 	bne.w	1192a <_dtoa_r+0x82a>
   116ac:	f1b9 0f00 	cmp.w	r9, #0
   116b0:	f340 8125 	ble.w	118fe <_dtoa_r+0x7fe>
   116b4:	9b07      	ldr	r3, [sp, #28]
   116b6:	2b00      	cmp	r3, #0
   116b8:	f040 80a3 	bne.w	11802 <_dtoa_r+0x702>
   116bc:	9b04      	ldr	r3, [sp, #16]
   116be:	3301      	adds	r3, #1
   116c0:	9304      	str	r3, [sp, #16]
   116c2:	f8dd 8000 	ldr.w	r8, [sp]
   116c6:	2701      	movs	r7, #1
   116c8:	e007      	b.n	116da <_dtoa_r+0x5da>
   116ca:	4629      	mov	r1, r5
   116cc:	2300      	movs	r3, #0
   116ce:	220a      	movs	r2, #10
   116d0:	4620      	mov	r0, r4
   116d2:	f7fb fb63 	bl	cd9c <__multadd>
   116d6:	3701      	adds	r7, #1
   116d8:	4605      	mov	r5, r0
   116da:	4651      	mov	r1, sl
   116dc:	4628      	mov	r0, r5
   116de:	f7ff fc7b 	bl	10fd8 <quorem>
   116e2:	45b9      	cmp	r9, r7
   116e4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   116e8:	f808 0b01 	strb.w	r0, [r8], #1
   116ec:	dced      	bgt.n	116ca <_dtoa_r+0x5ca>
   116ee:	f1b9 0f00 	cmp.w	r9, #0
   116f2:	9a00      	ldr	r2, [sp, #0]
   116f4:	bfcc      	ite	gt
   116f6:	46cb      	movgt	fp, r9
   116f8:	f04f 0b01 	movle.w	fp, #1
   116fc:	4603      	mov	r3, r0
   116fe:	4493      	add	fp, r2
   11700:	2700      	movs	r7, #0
   11702:	4629      	mov	r1, r5
   11704:	2201      	movs	r2, #1
   11706:	4620      	mov	r0, r4
   11708:	9301      	str	r3, [sp, #4]
   1170a:	f7fb fd7d 	bl	d208 <__lshift>
   1170e:	4651      	mov	r1, sl
   11710:	4605      	mov	r5, r0
   11712:	f7fb fdf1 	bl	d2f8 <__mcmp>
   11716:	2800      	cmp	r0, #0
   11718:	f340 81af 	ble.w	11a7a <_dtoa_r+0x97a>
   1171c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   11720:	9a00      	ldr	r2, [sp, #0]
   11722:	f10b 3bff 	add.w	fp, fp, #4294967295
   11726:	e004      	b.n	11732 <_dtoa_r+0x632>
   11728:	455a      	cmp	r2, fp
   1172a:	f000 81b1 	beq.w	11a90 <_dtoa_r+0x990>
   1172e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11732:	2b39      	cmp	r3, #57	; 0x39
   11734:	f10b 0901 	add.w	r9, fp, #1
   11738:	d0f6      	beq.n	11728 <_dtoa_r+0x628>
   1173a:	3301      	adds	r3, #1
   1173c:	f88b 3000 	strb.w	r3, [fp]
   11740:	4651      	mov	r1, sl
   11742:	4620      	mov	r0, r4
   11744:	f7fb fb20 	bl	cd88 <_Bfree>
   11748:	b156      	cbz	r6, 11760 <_dtoa_r+0x660>
   1174a:	b12f      	cbz	r7, 11758 <_dtoa_r+0x658>
   1174c:	42b7      	cmp	r7, r6
   1174e:	d003      	beq.n	11758 <_dtoa_r+0x658>
   11750:	4639      	mov	r1, r7
   11752:	4620      	mov	r0, r4
   11754:	f7fb fb18 	bl	cd88 <_Bfree>
   11758:	4631      	mov	r1, r6
   1175a:	4620      	mov	r0, r4
   1175c:	f7fb fb14 	bl	cd88 <_Bfree>
   11760:	4629      	mov	r1, r5
   11762:	4620      	mov	r0, r4
   11764:	f7fb fb10 	bl	cd88 <_Bfree>
   11768:	2300      	movs	r3, #0
   1176a:	f889 3000 	strb.w	r3, [r9]
   1176e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11772:	601a      	str	r2, [r3, #0]
   11774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11776:	2b00      	cmp	r3, #0
   11778:	f43f acfe 	beq.w	11178 <_dtoa_r+0x78>
   1177c:	9800      	ldr	r0, [sp, #0]
   1177e:	f8c3 9000 	str.w	r9, [r3]
   11782:	b00f      	add	sp, #60	; 0x3c
   11784:	ecbd 8b02 	vpop	{d8}
   11788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1178c:	f1c0 001c 	rsb	r0, r0, #28
   11790:	9b06      	ldr	r3, [sp, #24]
   11792:	4403      	add	r3, r0
   11794:	9306      	str	r3, [sp, #24]
   11796:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11798:	4403      	add	r3, r0
   1179a:	9309      	str	r3, [sp, #36]	; 0x24
   1179c:	4480      	add	r8, r0
   1179e:	e76f      	b.n	11680 <_dtoa_r+0x580>
   117a0:	f1c2 0220 	rsb	r2, r2, #32
   117a4:	fa06 f202 	lsl.w	r2, r6, r2
   117a8:	ee07 2a10 	vmov	s14, r2
   117ac:	e509      	b.n	111c2 <_dtoa_r+0xc2>
   117ae:	2601      	movs	r6, #1
   117b0:	e563      	b.n	1127a <_dtoa_r+0x17a>
   117b2:	4601      	mov	r1, r0
   117b4:	463a      	mov	r2, r7
   117b6:	4620      	mov	r0, r4
   117b8:	f7fb fcc6 	bl	d148 <__pow5mult>
   117bc:	9b01      	ldr	r3, [sp, #4]
   117be:	2b01      	cmp	r3, #1
   117c0:	4682      	mov	sl, r0
   117c2:	f340 81c5 	ble.w	11b50 <_dtoa_r+0xa50>
   117c6:	2300      	movs	r3, #0
   117c8:	9308      	str	r3, [sp, #32]
   117ca:	f8da 2010 	ldr.w	r2, [sl, #16]
   117ce:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   117d2:	6910      	ldr	r0, [r2, #16]
   117d4:	f7fb fb8c 	bl	cef0 <__hi0bits>
   117d8:	f1c0 0020 	rsb	r0, r0, #32
   117dc:	e744      	b.n	11668 <_dtoa_r+0x568>
   117de:	bf00      	nop
   117e0:	200002a8 	.word	0x200002a8
   117e4:	20000c70 	.word	0x20000c70
   117e8:	4631      	mov	r1, r6
   117ea:	2300      	movs	r3, #0
   117ec:	220a      	movs	r2, #10
   117ee:	4620      	mov	r0, r4
   117f0:	f7fb fad4 	bl	cd9c <__multadd>
   117f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   117f6:	2b00      	cmp	r3, #0
   117f8:	4606      	mov	r6, r0
   117fa:	f340 82ce 	ble.w	11d9a <_dtoa_r+0xc9a>
   117fe:	9704      	str	r7, [sp, #16]
   11800:	4699      	mov	r9, r3
   11802:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11804:	2b00      	cmp	r3, #0
   11806:	dd05      	ble.n	11814 <_dtoa_r+0x714>
   11808:	4631      	mov	r1, r6
   1180a:	461a      	mov	r2, r3
   1180c:	4620      	mov	r0, r4
   1180e:	f7fb fcfb 	bl	d208 <__lshift>
   11812:	4606      	mov	r6, r0
   11814:	9b08      	ldr	r3, [sp, #32]
   11816:	2b00      	cmp	r3, #0
   11818:	f040 81eb 	bne.w	11bf2 <_dtoa_r+0xaf2>
   1181c:	46b0      	mov	r8, r6
   1181e:	9b02      	ldr	r3, [sp, #8]
   11820:	9f00      	ldr	r7, [sp, #0]
   11822:	f003 0201 	and.w	r2, r3, #1
   11826:	1e7b      	subs	r3, r7, #1
   11828:	444b      	add	r3, r9
   1182a:	9308      	str	r3, [sp, #32]
   1182c:	9b01      	ldr	r3, [sp, #4]
   1182e:	920a      	str	r2, [sp, #40]	; 0x28
   11830:	4313      	orrs	r3, r2
   11832:	9309      	str	r3, [sp, #36]	; 0x24
   11834:	4651      	mov	r1, sl
   11836:	4628      	mov	r0, r5
   11838:	f7ff fbce 	bl	10fd8 <quorem>
   1183c:	4631      	mov	r1, r6
   1183e:	4683      	mov	fp, r0
   11840:	4628      	mov	r0, r5
   11842:	f7fb fd59 	bl	d2f8 <__mcmp>
   11846:	4642      	mov	r2, r8
   11848:	4651      	mov	r1, sl
   1184a:	4681      	mov	r9, r0
   1184c:	4620      	mov	r0, r4
   1184e:	f7fb fd75 	bl	d33c <__mdiff>
   11852:	68c2      	ldr	r2, [r0, #12]
   11854:	4601      	mov	r1, r0
   11856:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1185a:	2a00      	cmp	r2, #0
   1185c:	d142      	bne.n	118e4 <_dtoa_r+0x7e4>
   1185e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   11862:	4628      	mov	r0, r5
   11864:	f7fb fd48 	bl	d2f8 <__mcmp>
   11868:	9906      	ldr	r1, [sp, #24]
   1186a:	9002      	str	r0, [sp, #8]
   1186c:	4620      	mov	r0, r4
   1186e:	f7fb fa8b 	bl	cd88 <_Bfree>
   11872:	9a02      	ldr	r2, [sp, #8]
   11874:	9b07      	ldr	r3, [sp, #28]
   11876:	b91a      	cbnz	r2, 11880 <_dtoa_r+0x780>
   11878:	9909      	ldr	r1, [sp, #36]	; 0x24
   1187a:	2900      	cmp	r1, #0
   1187c:	f000 827e 	beq.w	11d7c <_dtoa_r+0xc7c>
   11880:	f1b9 0f00 	cmp.w	r9, #0
   11884:	f2c0 8183 	blt.w	11b8e <_dtoa_r+0xa8e>
   11888:	9901      	ldr	r1, [sp, #4]
   1188a:	ea49 0901 	orr.w	r9, r9, r1
   1188e:	990a      	ldr	r1, [sp, #40]	; 0x28
   11890:	ea51 0909 	orrs.w	r9, r1, r9
   11894:	f000 817b 	beq.w	11b8e <_dtoa_r+0xa8e>
   11898:	2a00      	cmp	r2, #0
   1189a:	f300 81c6 	bgt.w	11c2a <_dtoa_r+0xb2a>
   1189e:	9a08      	ldr	r2, [sp, #32]
   118a0:	703b      	strb	r3, [r7, #0]
   118a2:	f107 0901 	add.w	r9, r7, #1
   118a6:	4297      	cmp	r7, r2
   118a8:	46cb      	mov	fp, r9
   118aa:	f000 81c4 	beq.w	11c36 <_dtoa_r+0xb36>
   118ae:	4629      	mov	r1, r5
   118b0:	2300      	movs	r3, #0
   118b2:	220a      	movs	r2, #10
   118b4:	4620      	mov	r0, r4
   118b6:	f7fb fa71 	bl	cd9c <__multadd>
   118ba:	4546      	cmp	r6, r8
   118bc:	4605      	mov	r5, r0
   118be:	4631      	mov	r1, r6
   118c0:	f04f 0300 	mov.w	r3, #0
   118c4:	f04f 020a 	mov.w	r2, #10
   118c8:	4620      	mov	r0, r4
   118ca:	d012      	beq.n	118f2 <_dtoa_r+0x7f2>
   118cc:	f7fb fa66 	bl	cd9c <__multadd>
   118d0:	4641      	mov	r1, r8
   118d2:	4606      	mov	r6, r0
   118d4:	2300      	movs	r3, #0
   118d6:	220a      	movs	r2, #10
   118d8:	4620      	mov	r0, r4
   118da:	f7fb fa5f 	bl	cd9c <__multadd>
   118de:	464f      	mov	r7, r9
   118e0:	4680      	mov	r8, r0
   118e2:	e7a7      	b.n	11834 <_dtoa_r+0x734>
   118e4:	4620      	mov	r0, r4
   118e6:	9302      	str	r3, [sp, #8]
   118e8:	f7fb fa4e 	bl	cd88 <_Bfree>
   118ec:	9b02      	ldr	r3, [sp, #8]
   118ee:	2201      	movs	r2, #1
   118f0:	e7c6      	b.n	11880 <_dtoa_r+0x780>
   118f2:	f7fb fa53 	bl	cd9c <__multadd>
   118f6:	464f      	mov	r7, r9
   118f8:	4606      	mov	r6, r0
   118fa:	4680      	mov	r8, r0
   118fc:	e79a      	b.n	11834 <_dtoa_r+0x734>
   118fe:	9b01      	ldr	r3, [sp, #4]
   11900:	2b02      	cmp	r3, #2
   11902:	dc71      	bgt.n	119e8 <_dtoa_r+0x8e8>
   11904:	9b07      	ldr	r3, [sp, #28]
   11906:	2b00      	cmp	r3, #0
   11908:	f47f af7b 	bne.w	11802 <_dtoa_r+0x702>
   1190c:	9b04      	ldr	r3, [sp, #16]
   1190e:	4651      	mov	r1, sl
   11910:	3301      	adds	r3, #1
   11912:	4628      	mov	r0, r5
   11914:	9304      	str	r3, [sp, #16]
   11916:	f7ff fb5f 	bl	10fd8 <quorem>
   1191a:	f8dd b000 	ldr.w	fp, [sp]
   1191e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   11922:	f80b 3b01 	strb.w	r3, [fp], #1
   11926:	2700      	movs	r7, #0
   11928:	e6eb      	b.n	11702 <_dtoa_r+0x602>
   1192a:	4651      	mov	r1, sl
   1192c:	4628      	mov	r0, r5
   1192e:	f7fb fce3 	bl	d2f8 <__mcmp>
   11932:	2800      	cmp	r0, #0
   11934:	f6bf aeba 	bge.w	116ac <_dtoa_r+0x5ac>
   11938:	4629      	mov	r1, r5
   1193a:	2300      	movs	r3, #0
   1193c:	220a      	movs	r2, #10
   1193e:	4620      	mov	r0, r4
   11940:	f7fb fa2c 	bl	cd9c <__multadd>
   11944:	9b04      	ldr	r3, [sp, #16]
   11946:	1e5f      	subs	r7, r3, #1
   11948:	9b07      	ldr	r3, [sp, #28]
   1194a:	4605      	mov	r5, r0
   1194c:	2b00      	cmp	r3, #0
   1194e:	f47f af4b 	bne.w	117e8 <_dtoa_r+0x6e8>
   11952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11954:	2b00      	cmp	r3, #0
   11956:	f340 8218 	ble.w	11d8a <_dtoa_r+0xc8a>
   1195a:	4699      	mov	r9, r3
   1195c:	e6b1      	b.n	116c2 <_dtoa_r+0x5c2>
   1195e:	4bbc      	ldr	r3, [pc, #752]	; (11c50 <_dtoa_r+0xb50>)
   11960:	9300      	str	r3, [sp, #0]
   11962:	3303      	adds	r3, #3
   11964:	e4a4      	b.n	112b0 <_dtoa_r+0x1b0>
   11966:	201c      	movs	r0, #28
   11968:	e712      	b.n	11790 <_dtoa_r+0x690>
   1196a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1196e:	2800      	cmp	r0, #0
   11970:	f47f ae74 	bne.w	1165c <_dtoa_r+0x55c>
   11974:	f3c1 0213 	ubfx	r2, r1, #0, #20
   11978:	2a00      	cmp	r2, #0
   1197a:	f000 80f4 	beq.w	11b66 <_dtoa_r+0xa66>
   1197e:	9b02      	ldr	r3, [sp, #8]
   11980:	9308      	str	r3, [sp, #32]
   11982:	e66d      	b.n	11660 <_dtoa_r+0x560>
   11984:	2301      	movs	r3, #1
   11986:	9307      	str	r3, [sp, #28]
   11988:	9b04      	ldr	r3, [sp, #16]
   1198a:	445b      	add	r3, fp
   1198c:	f103 0901 	add.w	r9, r3, #1
   11990:	f1b9 0f01 	cmp.w	r9, #1
   11994:	46cc      	mov	ip, r9
   11996:	930b      	str	r3, [sp, #44]	; 0x2c
   11998:	bfb8      	it	lt
   1199a:	f04f 0c01 	movlt.w	ip, #1
   1199e:	2100      	movs	r1, #0
   119a0:	f1bc 0f17 	cmp.w	ip, #23
   119a4:	63e1      	str	r1, [r4, #60]	; 0x3c
   119a6:	f77f acbc 	ble.w	11322 <_dtoa_r+0x222>
   119aa:	2001      	movs	r0, #1
   119ac:	2204      	movs	r2, #4
   119ae:	0052      	lsls	r2, r2, #1
   119b0:	f102 0314 	add.w	r3, r2, #20
   119b4:	4563      	cmp	r3, ip
   119b6:	4601      	mov	r1, r0
   119b8:	f100 0001 	add.w	r0, r0, #1
   119bc:	d9f7      	bls.n	119ae <_dtoa_r+0x8ae>
   119be:	63e1      	str	r1, [r4, #60]	; 0x3c
   119c0:	e4af      	b.n	11322 <_dtoa_r+0x222>
   119c2:	2301      	movs	r3, #1
   119c4:	9307      	str	r3, [sp, #28]
   119c6:	f1bb 0f00 	cmp.w	fp, #0
   119ca:	dd52      	ble.n	11a72 <_dtoa_r+0x972>
   119cc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   119d0:	46d9      	mov	r9, fp
   119d2:	46dc      	mov	ip, fp
   119d4:	e7e3      	b.n	1199e <_dtoa_r+0x89e>
   119d6:	2300      	movs	r3, #0
   119d8:	9307      	str	r3, [sp, #28]
   119da:	e7d5      	b.n	11988 <_dtoa_r+0x888>
   119dc:	2300      	movs	r3, #0
   119de:	9307      	str	r3, [sp, #28]
   119e0:	e7f1      	b.n	119c6 <_dtoa_r+0x8c6>
   119e2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   119e6:	9704      	str	r7, [sp, #16]
   119e8:	f1b9 0f00 	cmp.w	r9, #0
   119ec:	f47f ada1 	bne.w	11532 <_dtoa_r+0x432>
   119f0:	4651      	mov	r1, sl
   119f2:	464b      	mov	r3, r9
   119f4:	2205      	movs	r2, #5
   119f6:	4620      	mov	r0, r4
   119f8:	f7fb f9d0 	bl	cd9c <__multadd>
   119fc:	4601      	mov	r1, r0
   119fe:	4682      	mov	sl, r0
   11a00:	4628      	mov	r0, r5
   11a02:	f7fb fc79 	bl	d2f8 <__mcmp>
   11a06:	2800      	cmp	r0, #0
   11a08:	f77f ad93 	ble.w	11532 <_dtoa_r+0x432>
   11a0c:	9b04      	ldr	r3, [sp, #16]
   11a0e:	f103 0b01 	add.w	fp, r3, #1
   11a12:	9b00      	ldr	r3, [sp, #0]
   11a14:	2231      	movs	r2, #49	; 0x31
   11a16:	4698      	mov	r8, r3
   11a18:	f803 2b01 	strb.w	r2, [r3], #1
   11a1c:	9300      	str	r3, [sp, #0]
   11a1e:	4651      	mov	r1, sl
   11a20:	4620      	mov	r0, r4
   11a22:	f7fb f9b1 	bl	cd88 <_Bfree>
   11a26:	f10b 0301 	add.w	r3, fp, #1
   11a2a:	f8dd 9000 	ldr.w	r9, [sp]
   11a2e:	9304      	str	r3, [sp, #16]
   11a30:	f8cd 8000 	str.w	r8, [sp]
   11a34:	2e00      	cmp	r6, #0
   11a36:	f47f ae8f 	bne.w	11758 <_dtoa_r+0x658>
   11a3a:	e691      	b.n	11760 <_dtoa_r+0x660>
   11a3c:	eba3 0a0a 	sub.w	sl, r3, sl
   11a40:	e5c5      	b.n	115ce <_dtoa_r+0x4ce>
   11a42:	4631      	mov	r1, r6
   11a44:	4652      	mov	r2, sl
   11a46:	4620      	mov	r0, r4
   11a48:	f7fb fb7e 	bl	d148 <__pow5mult>
   11a4c:	462a      	mov	r2, r5
   11a4e:	4601      	mov	r1, r0
   11a50:	4606      	mov	r6, r0
   11a52:	4620      	mov	r0, r4
   11a54:	f7fb faca 	bl	cfec <__multiply>
   11a58:	4629      	mov	r1, r5
   11a5a:	4605      	mov	r5, r0
   11a5c:	4620      	mov	r0, r4
   11a5e:	f7fb f993 	bl	cd88 <_Bfree>
   11a62:	e5ea      	b.n	1163a <_dtoa_r+0x53a>
   11a64:	2002      	movs	r0, #2
   11a66:	eeb0 5b48 	vmov.f64	d5, d8
   11a6a:	e481      	b.n	11370 <_dtoa_r+0x270>
   11a6c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   11a70:	e68e      	b.n	11790 <_dtoa_r+0x690>
   11a72:	f04f 0b01 	mov.w	fp, #1
   11a76:	46d9      	mov	r9, fp
   11a78:	e44f      	b.n	1131a <_dtoa_r+0x21a>
   11a7a:	d103      	bne.n	11a84 <_dtoa_r+0x984>
   11a7c:	9b01      	ldr	r3, [sp, #4]
   11a7e:	07db      	lsls	r3, r3, #31
   11a80:	f53f ae4c 	bmi.w	1171c <_dtoa_r+0x61c>
   11a84:	46d9      	mov	r9, fp
   11a86:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11a8a:	2b30      	cmp	r3, #48	; 0x30
   11a8c:	d0fa      	beq.n	11a84 <_dtoa_r+0x984>
   11a8e:	e657      	b.n	11740 <_dtoa_r+0x640>
   11a90:	9b04      	ldr	r3, [sp, #16]
   11a92:	9a00      	ldr	r2, [sp, #0]
   11a94:	3301      	adds	r3, #1
   11a96:	9304      	str	r3, [sp, #16]
   11a98:	2331      	movs	r3, #49	; 0x31
   11a9a:	7013      	strb	r3, [r2, #0]
   11a9c:	e650      	b.n	11740 <_dtoa_r+0x640>
   11a9e:	f1ba 0f00 	cmp.w	sl, #0
   11aa2:	f000 8123 	beq.w	11cec <_dtoa_r+0xbec>
   11aa6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   11aaa:	9b06      	ldr	r3, [sp, #24]
   11aac:	9309      	str	r3, [sp, #36]	; 0x24
   11aae:	4413      	add	r3, r2
   11ab0:	f8dd a020 	ldr.w	sl, [sp, #32]
   11ab4:	9306      	str	r3, [sp, #24]
   11ab6:	4490      	add	r8, r2
   11ab8:	e592      	b.n	115e0 <_dtoa_r+0x4e0>
   11aba:	ee07 0a90 	vmov	s15, r0
   11abe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   11ac2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   11ac6:	eea6 5b07 	vfma.f64	d5, d6, d7
   11aca:	ee15 2a90 	vmov	r2, s11
   11ace:	ec51 0b15 	vmov	r0, r1, d5
   11ad2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   11ad6:	ec41 0b15 	vmov	d5, r0, r1
   11ada:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   11ade:	ee36 7b47 	vsub.f64	d7, d6, d7
   11ae2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11aea:	f300 8137 	bgt.w	11d5c <_dtoa_r+0xc5c>
   11aee:	eeb1 5b45 	vneg.f64	d5, d5
   11af2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11afa:	f57f acfb 	bpl.w	114f4 <_dtoa_r+0x3f4>
   11afe:	f04f 0a00 	mov.w	sl, #0
   11b02:	4656      	mov	r6, sl
   11b04:	e515      	b.n	11532 <_dtoa_r+0x432>
   11b06:	f000 80f5 	beq.w	11cf4 <_dtoa_r+0xbf4>
   11b0a:	9b04      	ldr	r3, [sp, #16]
   11b0c:	4951      	ldr	r1, [pc, #324]	; (11c54 <_dtoa_r+0xb54>)
   11b0e:	425a      	negs	r2, r3
   11b10:	f002 000f 	and.w	r0, r2, #15
   11b14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   11b18:	ed91 6b00 	vldr	d6, [r1]
   11b1c:	1112      	asrs	r2, r2, #4
   11b1e:	ee28 6b06 	vmul.f64	d6, d8, d6
   11b22:	f000 8142 	beq.w	11daa <_dtoa_r+0xcaa>
   11b26:	eeb0 7b46 	vmov.f64	d7, d6
   11b2a:	494b      	ldr	r1, [pc, #300]	; (11c58 <_dtoa_r+0xb58>)
   11b2c:	2600      	movs	r6, #0
   11b2e:	2002      	movs	r0, #2
   11b30:	07d3      	lsls	r3, r2, #31
   11b32:	d505      	bpl.n	11b40 <_dtoa_r+0xa40>
   11b34:	ed91 5b00 	vldr	d5, [r1]
   11b38:	3001      	adds	r0, #1
   11b3a:	2601      	movs	r6, #1
   11b3c:	ee27 7b05 	vmul.f64	d7, d7, d5
   11b40:	1052      	asrs	r2, r2, #1
   11b42:	f101 0108 	add.w	r1, r1, #8
   11b46:	d1f3      	bne.n	11b30 <_dtoa_r+0xa30>
   11b48:	2e00      	cmp	r6, #0
   11b4a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   11b4e:	e41e      	b.n	1138e <_dtoa_r+0x28e>
   11b50:	9b02      	ldr	r3, [sp, #8]
   11b52:	2b00      	cmp	r3, #0
   11b54:	f47f ae37 	bne.w	117c6 <_dtoa_r+0x6c6>
   11b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11b5c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   11b60:	2a00      	cmp	r2, #0
   11b62:	f040 8137 	bne.w	11dd4 <_dtoa_r+0xcd4>
   11b66:	4a3d      	ldr	r2, [pc, #244]	; (11c5c <_dtoa_r+0xb5c>)
   11b68:	400a      	ands	r2, r1
   11b6a:	2a00      	cmp	r2, #0
   11b6c:	f000 80fa 	beq.w	11d64 <_dtoa_r+0xc64>
   11b70:	9b06      	ldr	r3, [sp, #24]
   11b72:	3301      	adds	r3, #1
   11b74:	9306      	str	r3, [sp, #24]
   11b76:	2301      	movs	r3, #1
   11b78:	f108 0801 	add.w	r8, r8, #1
   11b7c:	9308      	str	r3, [sp, #32]
   11b7e:	e56f      	b.n	11660 <_dtoa_r+0x560>
   11b80:	4629      	mov	r1, r5
   11b82:	9a08      	ldr	r2, [sp, #32]
   11b84:	4620      	mov	r0, r4
   11b86:	f7fb fadf 	bl	d148 <__pow5mult>
   11b8a:	4605      	mov	r5, r0
   11b8c:	e55a      	b.n	11644 <_dtoa_r+0x544>
   11b8e:	2a00      	cmp	r2, #0
   11b90:	dd12      	ble.n	11bb8 <_dtoa_r+0xab8>
   11b92:	4629      	mov	r1, r5
   11b94:	2201      	movs	r2, #1
   11b96:	4620      	mov	r0, r4
   11b98:	9301      	str	r3, [sp, #4]
   11b9a:	f7fb fb35 	bl	d208 <__lshift>
   11b9e:	4651      	mov	r1, sl
   11ba0:	4605      	mov	r5, r0
   11ba2:	f7fb fba9 	bl	d2f8 <__mcmp>
   11ba6:	2800      	cmp	r0, #0
   11ba8:	9b01      	ldr	r3, [sp, #4]
   11baa:	f340 80e1 	ble.w	11d70 <_dtoa_r+0xc70>
   11bae:	2b39      	cmp	r3, #57	; 0x39
   11bb0:	f000 80ca 	beq.w	11d48 <_dtoa_r+0xc48>
   11bb4:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11bb8:	46b9      	mov	r9, r7
   11bba:	f809 3b01 	strb.w	r3, [r9], #1
   11bbe:	9b04      	ldr	r3, [sp, #16]
   11bc0:	3301      	adds	r3, #1
   11bc2:	4637      	mov	r7, r6
   11bc4:	9304      	str	r3, [sp, #16]
   11bc6:	4646      	mov	r6, r8
   11bc8:	e5ba      	b.n	11740 <_dtoa_r+0x640>
   11bca:	ee38 8b08 	vadd.f64	d8, d8, d8
   11bce:	eeb4 8bc6 	vcmpe.f64	d8, d6
   11bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11bd6:	dc0a      	bgt.n	11bee <_dtoa_r+0xaee>
   11bd8:	eeb4 8b46 	vcmp.f64	d8, d6
   11bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11be0:	f47f acdc 	bne.w	1159c <_dtoa_r+0x49c>
   11be4:	ee17 3a10 	vmov	r3, s14
   11be8:	07d8      	lsls	r0, r3, #31
   11bea:	f57f acd7 	bpl.w	1159c <_dtoa_r+0x49c>
   11bee:	9a00      	ldr	r2, [sp, #0]
   11bf0:	e454      	b.n	1149c <_dtoa_r+0x39c>
   11bf2:	6871      	ldr	r1, [r6, #4]
   11bf4:	4620      	mov	r0, r4
   11bf6:	f7fb f8a1 	bl	cd3c <_Balloc>
   11bfa:	4607      	mov	r7, r0
   11bfc:	2800      	cmp	r0, #0
   11bfe:	f000 80de 	beq.w	11dbe <_dtoa_r+0xcbe>
   11c02:	6933      	ldr	r3, [r6, #16]
   11c04:	3302      	adds	r3, #2
   11c06:	009a      	lsls	r2, r3, #2
   11c08:	f106 010c 	add.w	r1, r6, #12
   11c0c:	300c      	adds	r0, #12
   11c0e:	f7f6 f9f5 	bl	7ffc <memcpy>
   11c12:	4639      	mov	r1, r7
   11c14:	2201      	movs	r2, #1
   11c16:	4620      	mov	r0, r4
   11c18:	f7fb faf6 	bl	d208 <__lshift>
   11c1c:	4680      	mov	r8, r0
   11c1e:	e5fe      	b.n	1181e <_dtoa_r+0x71e>
   11c20:	9b06      	ldr	r3, [sp, #24]
   11c22:	eba3 0309 	sub.w	r3, r3, r9
   11c26:	9309      	str	r3, [sp, #36]	; 0x24
   11c28:	e4da      	b.n	115e0 <_dtoa_r+0x4e0>
   11c2a:	2b39      	cmp	r3, #57	; 0x39
   11c2c:	f000 808c 	beq.w	11d48 <_dtoa_r+0xc48>
   11c30:	46b9      	mov	r9, r7
   11c32:	3301      	adds	r3, #1
   11c34:	e7c1      	b.n	11bba <_dtoa_r+0xaba>
   11c36:	9a04      	ldr	r2, [sp, #16]
   11c38:	3201      	adds	r2, #1
   11c3a:	4637      	mov	r7, r6
   11c3c:	9204      	str	r2, [sp, #16]
   11c3e:	4646      	mov	r6, r8
   11c40:	e55f      	b.n	11702 <_dtoa_r+0x602>
   11c42:	4629      	mov	r1, r5
   11c44:	4620      	mov	r0, r4
   11c46:	f7fb fa7f 	bl	d148 <__pow5mult>
   11c4a:	4605      	mov	r5, r0
   11c4c:	e4fa      	b.n	11644 <_dtoa_r+0x544>
   11c4e:	bf00      	nop
   11c50:	20000bb4 	.word	0x20000bb4
   11c54:	200002a8 	.word	0x200002a8
   11c58:	20000280 	.word	0x20000280
   11c5c:	7ff00000 	.word	0x7ff00000
   11c60:	4b5e      	ldr	r3, [pc, #376]	; (11ddc <_dtoa_r+0xcdc>)
   11c62:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   11c66:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   11c6a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   11c6e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   11c72:	ee36 7b47 	vsub.f64	d7, d6, d7
   11c76:	ec41 0b16 	vmov	d6, r0, r1
   11c7a:	ee15 1a90 	vmov	r1, s11
   11c7e:	ee23 3b06 	vmul.f64	d3, d3, d6
   11c82:	9800      	ldr	r0, [sp, #0]
   11c84:	3130      	adds	r1, #48	; 0x30
   11c86:	2a01      	cmp	r2, #1
   11c88:	f800 1b01 	strb.w	r1, [r0], #1
   11c8c:	f000 8083 	beq.w	11d96 <_dtoa_r+0xc96>
   11c90:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11c94:	9b00      	ldr	r3, [sp, #0]
   11c96:	1899      	adds	r1, r3, r2
   11c98:	ee27 7b04 	vmul.f64	d7, d7, d4
   11c9c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11ca0:	ee16 3a90 	vmov	r3, s13
   11ca4:	3330      	adds	r3, #48	; 0x30
   11ca6:	f800 3b01 	strb.w	r3, [r0], #1
   11caa:	4281      	cmp	r1, r0
   11cac:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   11cb0:	ee37 7b45 	vsub.f64	d7, d7, d5
   11cb4:	d1f0      	bne.n	11c98 <_dtoa_r+0xb98>
   11cb6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   11cba:	ee33 5b06 	vadd.f64	d5, d3, d6
   11cbe:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11cc6:	f53f abe3 	bmi.w	11490 <_dtoa_r+0x390>
   11cca:	ee36 6b43 	vsub.f64	d6, d6, d3
   11cce:	eeb4 6bc7 	vcmpe.f64	d6, d7
   11cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11cd6:	f77f ac0d 	ble.w	114f4 <_dtoa_r+0x3f4>
   11cda:	4689      	mov	r9, r1
   11cdc:	3901      	subs	r1, #1
   11cde:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   11ce2:	2b30      	cmp	r3, #48	; 0x30
   11ce4:	d0f9      	beq.n	11cda <_dtoa_r+0xbda>
   11ce6:	1c73      	adds	r3, r6, #1
   11ce8:	9304      	str	r3, [sp, #16]
   11cea:	e539      	b.n	11760 <_dtoa_r+0x660>
   11cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11cee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   11cf2:	e6da      	b.n	11aaa <_dtoa_r+0x9aa>
   11cf4:	2002      	movs	r0, #2
   11cf6:	eeb0 6b48 	vmov.f64	d6, d8
   11cfa:	f7ff bb48 	b.w	1138e <_dtoa_r+0x28e>
   11cfe:	f1b9 0f00 	cmp.w	r9, #0
   11d02:	f43f aeda 	beq.w	11aba <_dtoa_r+0x9ba>
   11d06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d08:	2a00      	cmp	r2, #0
   11d0a:	f77f abf3 	ble.w	114f4 <_dtoa_r+0x3f4>
   11d0e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11d12:	ee26 6b04 	vmul.f64	d6, d6, d4
   11d16:	3001      	adds	r0, #1
   11d18:	ee07 0a90 	vmov	s15, r0
   11d1c:	9b04      	ldr	r3, [sp, #16]
   11d1e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   11d22:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   11d26:	eea6 7b05 	vfma.f64	d7, d6, d5
   11d2a:	ee17 ca90 	vmov	ip, s15
   11d2e:	ec51 0b17 	vmov	r0, r1, d7
   11d32:	1e5e      	subs	r6, r3, #1
   11d34:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   11d38:	f7ff bb47 	b.w	113ca <_dtoa_r+0x2ca>
   11d3c:	9b04      	ldr	r3, [sp, #16]
   11d3e:	3301      	adds	r3, #1
   11d40:	9304      	str	r3, [sp, #16]
   11d42:	2331      	movs	r3, #49	; 0x31
   11d44:	f7ff bbb1 	b.w	114aa <_dtoa_r+0x3aa>
   11d48:	9b04      	ldr	r3, [sp, #16]
   11d4a:	46bb      	mov	fp, r7
   11d4c:	3301      	adds	r3, #1
   11d4e:	9304      	str	r3, [sp, #16]
   11d50:	2339      	movs	r3, #57	; 0x39
   11d52:	4637      	mov	r7, r6
   11d54:	f80b 3b01 	strb.w	r3, [fp], #1
   11d58:	4646      	mov	r6, r8
   11d5a:	e4e1      	b.n	11720 <_dtoa_r+0x620>
   11d5c:	f04f 0a00 	mov.w	sl, #0
   11d60:	4656      	mov	r6, sl
   11d62:	e653      	b.n	11a0c <_dtoa_r+0x90c>
   11d64:	9208      	str	r2, [sp, #32]
   11d66:	e47b      	b.n	11660 <_dtoa_r+0x560>
   11d68:	1c73      	adds	r3, r6, #1
   11d6a:	9304      	str	r3, [sp, #16]
   11d6c:	4689      	mov	r9, r1
   11d6e:	e4f7      	b.n	11760 <_dtoa_r+0x660>
   11d70:	f47f af22 	bne.w	11bb8 <_dtoa_r+0xab8>
   11d74:	07da      	lsls	r2, r3, #31
   11d76:	f57f af1f 	bpl.w	11bb8 <_dtoa_r+0xab8>
   11d7a:	e718      	b.n	11bae <_dtoa_r+0xaae>
   11d7c:	2b39      	cmp	r3, #57	; 0x39
   11d7e:	d0e3      	beq.n	11d48 <_dtoa_r+0xc48>
   11d80:	f1b9 0f00 	cmp.w	r9, #0
   11d84:	f73f af16 	bgt.w	11bb4 <_dtoa_r+0xab4>
   11d88:	e716      	b.n	11bb8 <_dtoa_r+0xab8>
   11d8a:	9b01      	ldr	r3, [sp, #4]
   11d8c:	2b02      	cmp	r3, #2
   11d8e:	f73f ae28 	bgt.w	119e2 <_dtoa_r+0x8e2>
   11d92:	9704      	str	r7, [sp, #16]
   11d94:	e5ba      	b.n	1190c <_dtoa_r+0x80c>
   11d96:	4601      	mov	r1, r0
   11d98:	e78d      	b.n	11cb6 <_dtoa_r+0xbb6>
   11d9a:	9b01      	ldr	r3, [sp, #4]
   11d9c:	2b02      	cmp	r3, #2
   11d9e:	f73f ae20 	bgt.w	119e2 <_dtoa_r+0x8e2>
   11da2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11da6:	9704      	str	r7, [sp, #16]
   11da8:	e52b      	b.n	11802 <_dtoa_r+0x702>
   11daa:	2002      	movs	r0, #2
   11dac:	f7ff baef 	b.w	1138e <_dtoa_r+0x28e>
   11db0:	4b0b      	ldr	r3, [pc, #44]	; (11de0 <_dtoa_r+0xce0>)
   11db2:	480c      	ldr	r0, [pc, #48]	; (11de4 <_dtoa_r+0xce4>)
   11db4:	2200      	movs	r2, #0
   11db6:	f240 11af 	movw	r1, #431	; 0x1af
   11dba:	f7ff f8b1 	bl	10f20 <__assert_func>
   11dbe:	4b08      	ldr	r3, [pc, #32]	; (11de0 <_dtoa_r+0xce0>)
   11dc0:	4808      	ldr	r0, [pc, #32]	; (11de4 <_dtoa_r+0xce4>)
   11dc2:	463a      	mov	r2, r7
   11dc4:	f240 21ef 	movw	r1, #751	; 0x2ef
   11dc8:	f7ff f8aa 	bl	10f20 <__assert_func>
   11dcc:	4b06      	ldr	r3, [pc, #24]	; (11de8 <_dtoa_r+0xce8>)
   11dce:	9300      	str	r3, [sp, #0]
   11dd0:	f7ff b9d2 	b.w	11178 <_dtoa_r+0x78>
   11dd4:	9b02      	ldr	r3, [sp, #8]
   11dd6:	9308      	str	r3, [sp, #32]
   11dd8:	e4f7      	b.n	117ca <_dtoa_r+0x6ca>
   11dda:	bf00      	nop
   11ddc:	200002a8 	.word	0x200002a8
   11de0:	200008c8 	.word	0x200008c8
   11de4:	20000bb8 	.word	0x20000bb8
   11de8:	20000ba8 	.word	0x20000ba8

00011dec <_strtoul_l.constprop.0>:
   11dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11df0:	4607      	mov	r7, r0
   11df2:	484c      	ldr	r0, [pc, #304]	; (11f24 <_strtoul_l.constprop.0+0x138>)
   11df4:	460e      	mov	r6, r1
   11df6:	4635      	mov	r5, r6
   11df8:	f816 eb01 	ldrb.w	lr, [r6], #1
   11dfc:	f810 c00e 	ldrb.w	ip, [r0, lr]
   11e00:	f01c 0c08 	ands.w	ip, ip, #8
   11e04:	d1f7      	bne.n	11df6 <_strtoul_l.constprop.0+0xa>
   11e06:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   11e0a:	d05a      	beq.n	11ec2 <_strtoul_l.constprop.0+0xd6>
   11e0c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   11e10:	bf03      	ittte	eq
   11e12:	f896 e000 	ldrbeq.w	lr, [r6]
   11e16:	4664      	moveq	r4, ip
   11e18:	1cae      	addeq	r6, r5, #2
   11e1a:	4664      	movne	r4, ip
   11e1c:	b15b      	cbz	r3, 11e36 <_strtoul_l.constprop.0+0x4a>
   11e1e:	2b10      	cmp	r3, #16
   11e20:	d054      	beq.n	11ecc <_strtoul_l.constprop.0+0xe0>
   11e22:	f04f 38ff 	mov.w	r8, #4294967295
   11e26:	fbb8 f8f3 	udiv	r8, r8, r3
   11e2a:	fb03 fa08 	mul.w	sl, r3, r8
   11e2e:	ea6f 0a0a 	mvn.w	sl, sl
   11e32:	4699      	mov	r9, r3
   11e34:	e008      	b.n	11e48 <_strtoul_l.constprop.0+0x5c>
   11e36:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11e3a:	d05a      	beq.n	11ef2 <_strtoul_l.constprop.0+0x106>
   11e3c:	230a      	movs	r3, #10
   11e3e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 11f28 <_strtoul_l.constprop.0+0x13c>
   11e42:	f04f 0a05 	mov.w	sl, #5
   11e46:	4699      	mov	r9, r3
   11e48:	2500      	movs	r5, #0
   11e4a:	4628      	mov	r0, r5
   11e4c:	e005      	b.n	11e5a <_strtoul_l.constprop.0+0x6e>
   11e4e:	d02c      	beq.n	11eaa <_strtoul_l.constprop.0+0xbe>
   11e50:	fb09 c000 	mla	r0, r9, r0, ip
   11e54:	2501      	movs	r5, #1
   11e56:	f816 eb01 	ldrb.w	lr, [r6], #1
   11e5a:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   11e5e:	f1bc 0f09 	cmp.w	ip, #9
   11e62:	d906      	bls.n	11e72 <_strtoul_l.constprop.0+0x86>
   11e64:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   11e68:	f1bc 0f19 	cmp.w	ip, #25
   11e6c:	d80b      	bhi.n	11e86 <_strtoul_l.constprop.0+0x9a>
   11e6e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   11e72:	4563      	cmp	r3, ip
   11e74:	dd10      	ble.n	11e98 <_strtoul_l.constprop.0+0xac>
   11e76:	f1b5 3fff 	cmp.w	r5, #4294967295
   11e7a:	d0ec      	beq.n	11e56 <_strtoul_l.constprop.0+0x6a>
   11e7c:	4540      	cmp	r0, r8
   11e7e:	d9e6      	bls.n	11e4e <_strtoul_l.constprop.0+0x62>
   11e80:	f04f 35ff 	mov.w	r5, #4294967295
   11e84:	e7e7      	b.n	11e56 <_strtoul_l.constprop.0+0x6a>
   11e86:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   11e8a:	f1bc 0f19 	cmp.w	ip, #25
   11e8e:	d803      	bhi.n	11e98 <_strtoul_l.constprop.0+0xac>
   11e90:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   11e94:	4563      	cmp	r3, ip
   11e96:	dcee      	bgt.n	11e76 <_strtoul_l.constprop.0+0x8a>
   11e98:	1c6b      	adds	r3, r5, #1
   11e9a:	d00b      	beq.n	11eb4 <_strtoul_l.constprop.0+0xc8>
   11e9c:	b104      	cbz	r4, 11ea0 <_strtoul_l.constprop.0+0xb4>
   11e9e:	4240      	negs	r0, r0
   11ea0:	b10a      	cbz	r2, 11ea6 <_strtoul_l.constprop.0+0xba>
   11ea2:	b965      	cbnz	r5, 11ebe <_strtoul_l.constprop.0+0xd2>
   11ea4:	6011      	str	r1, [r2, #0]
   11ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11eaa:	45d4      	cmp	ip, sl
   11eac:	ddd0      	ble.n	11e50 <_strtoul_l.constprop.0+0x64>
   11eae:	f04f 35ff 	mov.w	r5, #4294967295
   11eb2:	e7d0      	b.n	11e56 <_strtoul_l.constprop.0+0x6a>
   11eb4:	2322      	movs	r3, #34	; 0x22
   11eb6:	603b      	str	r3, [r7, #0]
   11eb8:	4628      	mov	r0, r5
   11eba:	2a00      	cmp	r2, #0
   11ebc:	d0f3      	beq.n	11ea6 <_strtoul_l.constprop.0+0xba>
   11ebe:	1e71      	subs	r1, r6, #1
   11ec0:	e7f0      	b.n	11ea4 <_strtoul_l.constprop.0+0xb8>
   11ec2:	f896 e000 	ldrb.w	lr, [r6]
   11ec6:	2401      	movs	r4, #1
   11ec8:	1cae      	adds	r6, r5, #2
   11eca:	e7a7      	b.n	11e1c <_strtoul_l.constprop.0+0x30>
   11ecc:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11ed0:	d121      	bne.n	11f16 <_strtoul_l.constprop.0+0x12a>
   11ed2:	7830      	ldrb	r0, [r6, #0]
   11ed4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   11ed8:	2858      	cmp	r0, #88	; 0x58
   11eda:	d116      	bne.n	11f0a <_strtoul_l.constprop.0+0x11e>
   11edc:	f04f 0910 	mov.w	r9, #16
   11ee0:	f896 e001 	ldrb.w	lr, [r6, #1]
   11ee4:	f04f 0a0f 	mov.w	sl, #15
   11ee8:	3602      	adds	r6, #2
   11eea:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11eee:	464b      	mov	r3, r9
   11ef0:	e7aa      	b.n	11e48 <_strtoul_l.constprop.0+0x5c>
   11ef2:	7833      	ldrb	r3, [r6, #0]
   11ef4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11ef8:	2b58      	cmp	r3, #88	; 0x58
   11efa:	d0ef      	beq.n	11edc <_strtoul_l.constprop.0+0xf0>
   11efc:	2308      	movs	r3, #8
   11efe:	f04f 0a07 	mov.w	sl, #7
   11f02:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   11f06:	4699      	mov	r9, r3
   11f08:	e79e      	b.n	11e48 <_strtoul_l.constprop.0+0x5c>
   11f0a:	4699      	mov	r9, r3
   11f0c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11f10:	f04f 0a0f 	mov.w	sl, #15
   11f14:	e798      	b.n	11e48 <_strtoul_l.constprop.0+0x5c>
   11f16:	f04f 0a0f 	mov.w	sl, #15
   11f1a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11f1e:	4699      	mov	r9, r3
   11f20:	e792      	b.n	11e48 <_strtoul_l.constprop.0+0x5c>
   11f22:	bf00      	nop
   11f24:	20000aa5 	.word	0x20000aa5
   11f28:	19999999 	.word	0x19999999

00011f2c <_strtoul_r>:
   11f2c:	f7ff bf5e 	b.w	11dec <_strtoul_l.constprop.0>

00011f30 <_strtoll_l.constprop.0>:
   11f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f34:	b085      	sub	sp, #20
   11f36:	461f      	mov	r7, r3
   11f38:	4b57      	ldr	r3, [pc, #348]	; (12098 <_strtoll_l.constprop.0+0x168>)
   11f3a:	9003      	str	r0, [sp, #12]
   11f3c:	468a      	mov	sl, r1
   11f3e:	9200      	str	r2, [sp, #0]
   11f40:	460d      	mov	r5, r1
   11f42:	462a      	mov	r2, r5
   11f44:	f815 4b01 	ldrb.w	r4, [r5], #1
   11f48:	5d1e      	ldrb	r6, [r3, r4]
   11f4a:	f016 0608 	ands.w	r6, r6, #8
   11f4e:	d1f8      	bne.n	11f42 <_strtoll_l.constprop.0+0x12>
   11f50:	2c2d      	cmp	r4, #45	; 0x2d
   11f52:	d075      	beq.n	12040 <_strtoll_l.constprop.0+0x110>
   11f54:	2c2b      	cmp	r4, #43	; 0x2b
   11f56:	bf05      	ittet	eq
   11f58:	782c      	ldrbeq	r4, [r5, #0]
   11f5a:	9602      	streq	r6, [sp, #8]
   11f5c:	9602      	strne	r6, [sp, #8]
   11f5e:	1c95      	addeq	r5, r2, #2
   11f60:	f04f 36ff 	mov.w	r6, #4294967295
   11f64:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   11f68:	b12f      	cbz	r7, 11f76 <_strtoll_l.constprop.0+0x46>
   11f6a:	2f10      	cmp	r7, #16
   11f6c:	d06f      	beq.n	1204e <_strtoll_l.constprop.0+0x11e>
   11f6e:	46b8      	mov	r8, r7
   11f70:	ea4f 79e7 	mov.w	r9, r7, asr #31
   11f74:	e005      	b.n	11f82 <_strtoll_l.constprop.0+0x52>
   11f76:	2c30      	cmp	r4, #48	; 0x30
   11f78:	d074      	beq.n	12064 <_strtoll_l.constprop.0+0x134>
   11f7a:	f04f 080a 	mov.w	r8, #10
   11f7e:	46b9      	mov	r9, r7
   11f80:	4647      	mov	r7, r8
   11f82:	4642      	mov	r2, r8
   11f84:	464b      	mov	r3, r9
   11f86:	4630      	mov	r0, r6
   11f88:	4659      	mov	r1, fp
   11f8a:	f7f7 fc4d 	bl	9828 <__aeabi_uldivmod>
   11f8e:	2300      	movs	r3, #0
   11f90:	9201      	str	r2, [sp, #4]
   11f92:	4684      	mov	ip, r0
   11f94:	460a      	mov	r2, r1
   11f96:	4618      	mov	r0, r3
   11f98:	4619      	mov	r1, r3
   11f9a:	e011      	b.n	11fc0 <_strtoll_l.constprop.0+0x90>
   11f9c:	428a      	cmp	r2, r1
   11f9e:	bf08      	it	eq
   11fa0:	4584      	cmpeq	ip, r0
   11fa2:	d03d      	beq.n	12020 <_strtoll_l.constprop.0+0xf0>
   11fa4:	fb00 f309 	mul.w	r3, r0, r9
   11fa8:	fb08 3301 	mla	r3, r8, r1, r3
   11fac:	fba0 0108 	umull	r0, r1, r0, r8
   11fb0:	440b      	add	r3, r1
   11fb2:	eb1e 0000 	adds.w	r0, lr, r0
   11fb6:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   11fba:	2301      	movs	r3, #1
   11fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
   11fc0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   11fc4:	f1be 0f09 	cmp.w	lr, #9
   11fc8:	d906      	bls.n	11fd8 <_strtoll_l.constprop.0+0xa8>
   11fca:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   11fce:	f1be 0f19 	cmp.w	lr, #25
   11fd2:	d80c      	bhi.n	11fee <_strtoll_l.constprop.0+0xbe>
   11fd4:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   11fd8:	4577      	cmp	r7, lr
   11fda:	dd11      	ble.n	12000 <_strtoll_l.constprop.0+0xd0>
   11fdc:	1c5c      	adds	r4, r3, #1
   11fde:	d0ed      	beq.n	11fbc <_strtoll_l.constprop.0+0x8c>
   11fe0:	4584      	cmp	ip, r0
   11fe2:	eb72 0301 	sbcs.w	r3, r2, r1
   11fe6:	d2d9      	bcs.n	11f9c <_strtoll_l.constprop.0+0x6c>
   11fe8:	f04f 33ff 	mov.w	r3, #4294967295
   11fec:	e7e6      	b.n	11fbc <_strtoll_l.constprop.0+0x8c>
   11fee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   11ff2:	f1be 0f19 	cmp.w	lr, #25
   11ff6:	d803      	bhi.n	12000 <_strtoll_l.constprop.0+0xd0>
   11ff8:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   11ffc:	4577      	cmp	r7, lr
   11ffe:	dced      	bgt.n	11fdc <_strtoll_l.constprop.0+0xac>
   12000:	1c5a      	adds	r2, r3, #1
   12002:	d013      	beq.n	1202c <_strtoll_l.constprop.0+0xfc>
   12004:	9a02      	ldr	r2, [sp, #8]
   12006:	b112      	cbz	r2, 1200e <_strtoll_l.constprop.0+0xde>
   12008:	4240      	negs	r0, r0
   1200a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1200e:	9a00      	ldr	r2, [sp, #0]
   12010:	b11a      	cbz	r2, 1201a <_strtoll_l.constprop.0+0xea>
   12012:	bba3      	cbnz	r3, 1207e <_strtoll_l.constprop.0+0x14e>
   12014:	9b00      	ldr	r3, [sp, #0]
   12016:	f8c3 a000 	str.w	sl, [r3]
   1201a:	b005      	add	sp, #20
   1201c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12020:	9b01      	ldr	r3, [sp, #4]
   12022:	4573      	cmp	r3, lr
   12024:	dabe      	bge.n	11fa4 <_strtoll_l.constprop.0+0x74>
   12026:	f04f 33ff 	mov.w	r3, #4294967295
   1202a:	e7c7      	b.n	11fbc <_strtoll_l.constprop.0+0x8c>
   1202c:	9a03      	ldr	r2, [sp, #12]
   1202e:	2322      	movs	r3, #34	; 0x22
   12030:	6013      	str	r3, [r2, #0]
   12032:	9b00      	ldr	r3, [sp, #0]
   12034:	b333      	cbz	r3, 12084 <_strtoll_l.constprop.0+0x154>
   12036:	f105 3aff 	add.w	sl, r5, #4294967295
   1203a:	4630      	mov	r0, r6
   1203c:	4659      	mov	r1, fp
   1203e:	e7e9      	b.n	12014 <_strtoll_l.constprop.0+0xe4>
   12040:	2301      	movs	r3, #1
   12042:	782c      	ldrb	r4, [r5, #0]
   12044:	9302      	str	r3, [sp, #8]
   12046:	1c95      	adds	r5, r2, #2
   12048:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   1204c:	e78c      	b.n	11f68 <_strtoll_l.constprop.0+0x38>
   1204e:	2c30      	cmp	r4, #48	; 0x30
   12050:	d104      	bne.n	1205c <_strtoll_l.constprop.0+0x12c>
   12052:	782b      	ldrb	r3, [r5, #0]
   12054:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12058:	2b58      	cmp	r3, #88	; 0x58
   1205a:	d008      	beq.n	1206e <_strtoll_l.constprop.0+0x13e>
   1205c:	46b8      	mov	r8, r7
   1205e:	f04f 0900 	mov.w	r9, #0
   12062:	e78e      	b.n	11f82 <_strtoll_l.constprop.0+0x52>
   12064:	782b      	ldrb	r3, [r5, #0]
   12066:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1206a:	2b58      	cmp	r3, #88	; 0x58
   1206c:	d10f      	bne.n	1208e <_strtoll_l.constprop.0+0x15e>
   1206e:	f04f 0810 	mov.w	r8, #16
   12072:	786c      	ldrb	r4, [r5, #1]
   12074:	f04f 0900 	mov.w	r9, #0
   12078:	3502      	adds	r5, #2
   1207a:	4647      	mov	r7, r8
   1207c:	e781      	b.n	11f82 <_strtoll_l.constprop.0+0x52>
   1207e:	4606      	mov	r6, r0
   12080:	468b      	mov	fp, r1
   12082:	e7d8      	b.n	12036 <_strtoll_l.constprop.0+0x106>
   12084:	4630      	mov	r0, r6
   12086:	4659      	mov	r1, fp
   12088:	b005      	add	sp, #20
   1208a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1208e:	f04f 0808 	mov.w	r8, #8
   12092:	46b9      	mov	r9, r7
   12094:	4647      	mov	r7, r8
   12096:	e774      	b.n	11f82 <_strtoll_l.constprop.0+0x52>
   12098:	20000aa5 	.word	0x20000aa5

0001209c <_strtoll_r>:
   1209c:	f7ff bf48 	b.w	11f30 <_strtoll_l.constprop.0>

000120a0 <_strtoull_l.constprop.0>:
   120a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120a4:	b085      	sub	sp, #20
   120a6:	468b      	mov	fp, r1
   120a8:	9201      	str	r2, [sp, #4]
   120aa:	4a62      	ldr	r2, [pc, #392]	; (12234 <_strtoull_l.constprop.0+0x194>)
   120ac:	9003      	str	r0, [sp, #12]
   120ae:	461e      	mov	r6, r3
   120b0:	460d      	mov	r5, r1
   120b2:	4629      	mov	r1, r5
   120b4:	f815 4b01 	ldrb.w	r4, [r5], #1
   120b8:	5d13      	ldrb	r3, [r2, r4]
   120ba:	f013 0308 	ands.w	r3, r3, #8
   120be:	d1f8      	bne.n	120b2 <_strtoull_l.constprop.0+0x12>
   120c0:	2c2d      	cmp	r4, #45	; 0x2d
   120c2:	f000 8082 	beq.w	121ca <_strtoull_l.constprop.0+0x12a>
   120c6:	2c2b      	cmp	r4, #43	; 0x2b
   120c8:	bf03      	ittte	eq
   120ca:	782c      	ldrbeq	r4, [r5, #0]
   120cc:	9302      	streq	r3, [sp, #8]
   120ce:	1c8d      	addeq	r5, r1, #2
   120d0:	9302      	strne	r3, [sp, #8]
   120d2:	b1be      	cbz	r6, 12104 <_strtoull_l.constprop.0+0x64>
   120d4:	2e10      	cmp	r6, #16
   120d6:	d07d      	beq.n	121d4 <_strtoull_l.constprop.0+0x134>
   120d8:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   120dc:	4632      	mov	r2, r6
   120de:	4653      	mov	r3, sl
   120e0:	f04f 30ff 	mov.w	r0, #4294967295
   120e4:	f04f 31ff 	mov.w	r1, #4294967295
   120e8:	f7f7 fb9e 	bl	9828 <__aeabi_uldivmod>
   120ec:	4632      	mov	r2, r6
   120ee:	4607      	mov	r7, r0
   120f0:	4688      	mov	r8, r1
   120f2:	4653      	mov	r3, sl
   120f4:	f04f 30ff 	mov.w	r0, #4294967295
   120f8:	f04f 31ff 	mov.w	r1, #4294967295
   120fc:	46b1      	mov	r9, r6
   120fe:	f7f7 fb93 	bl	9828 <__aeabi_uldivmod>
   12102:	e00a      	b.n	1211a <_strtoull_l.constprop.0+0x7a>
   12104:	2c30      	cmp	r4, #48	; 0x30
   12106:	d079      	beq.n	121fc <_strtoull_l.constprop.0+0x15c>
   12108:	f04f 090a 	mov.w	r9, #10
   1210c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 12238 <_strtoull_l.constprop.0+0x198>
   12110:	46b2      	mov	sl, r6
   12112:	2205      	movs	r2, #5
   12114:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   12118:	464e      	mov	r6, r9
   1211a:	f04f 0c00 	mov.w	ip, #0
   1211e:	4660      	mov	r0, ip
   12120:	4661      	mov	r1, ip
   12122:	e011      	b.n	12148 <_strtoull_l.constprop.0+0xa8>
   12124:	4541      	cmp	r1, r8
   12126:	bf08      	it	eq
   12128:	42b8      	cmpeq	r0, r7
   1212a:	d03e      	beq.n	121aa <_strtoull_l.constprop.0+0x10a>
   1212c:	fb00 f40a 	mul.w	r4, r0, sl
   12130:	fb09 4101 	mla	r1, r9, r1, r4
   12134:	fba0 0409 	umull	r0, r4, r0, r9
   12138:	4421      	add	r1, r4
   1213a:	1818      	adds	r0, r3, r0
   1213c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   12140:	f04f 0c01 	mov.w	ip, #1
   12144:	f815 4b01 	ldrb.w	r4, [r5], #1
   12148:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1214c:	2b09      	cmp	r3, #9
   1214e:	d905      	bls.n	1215c <_strtoull_l.constprop.0+0xbc>
   12150:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   12154:	2b19      	cmp	r3, #25
   12156:	d80d      	bhi.n	12174 <_strtoull_l.constprop.0+0xd4>
   12158:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1215c:	429e      	cmp	r6, r3
   1215e:	dd11      	ble.n	12184 <_strtoull_l.constprop.0+0xe4>
   12160:	f1bc 3fff 	cmp.w	ip, #4294967295
   12164:	d0ee      	beq.n	12144 <_strtoull_l.constprop.0+0xa4>
   12166:	4287      	cmp	r7, r0
   12168:	eb78 0401 	sbcs.w	r4, r8, r1
   1216c:	d2da      	bcs.n	12124 <_strtoull_l.constprop.0+0x84>
   1216e:	f04f 3cff 	mov.w	ip, #4294967295
   12172:	e7e7      	b.n	12144 <_strtoull_l.constprop.0+0xa4>
   12174:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   12178:	2b19      	cmp	r3, #25
   1217a:	d803      	bhi.n	12184 <_strtoull_l.constprop.0+0xe4>
   1217c:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   12180:	429e      	cmp	r6, r3
   12182:	dced      	bgt.n	12160 <_strtoull_l.constprop.0+0xc0>
   12184:	f1bc 3fff 	cmp.w	ip, #4294967295
   12188:	d014      	beq.n	121b4 <_strtoull_l.constprop.0+0x114>
   1218a:	9b02      	ldr	r3, [sp, #8]
   1218c:	b113      	cbz	r3, 12194 <_strtoull_l.constprop.0+0xf4>
   1218e:	4240      	negs	r0, r0
   12190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12194:	9b01      	ldr	r3, [sp, #4]
   12196:	b12b      	cbz	r3, 121a4 <_strtoull_l.constprop.0+0x104>
   12198:	f1bc 0f00 	cmp.w	ip, #0
   1219c:	d112      	bne.n	121c4 <_strtoull_l.constprop.0+0x124>
   1219e:	9b01      	ldr	r3, [sp, #4]
   121a0:	f8c3 b000 	str.w	fp, [r3]
   121a4:	b005      	add	sp, #20
   121a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121aa:	4293      	cmp	r3, r2
   121ac:	ddbe      	ble.n	1212c <_strtoull_l.constprop.0+0x8c>
   121ae:	f04f 3cff 	mov.w	ip, #4294967295
   121b2:	e7c7      	b.n	12144 <_strtoull_l.constprop.0+0xa4>
   121b4:	9a03      	ldr	r2, [sp, #12]
   121b6:	2322      	movs	r3, #34	; 0x22
   121b8:	6013      	str	r3, [r2, #0]
   121ba:	9b01      	ldr	r3, [sp, #4]
   121bc:	4660      	mov	r0, ip
   121be:	4661      	mov	r1, ip
   121c0:	2b00      	cmp	r3, #0
   121c2:	d0ef      	beq.n	121a4 <_strtoull_l.constprop.0+0x104>
   121c4:	f105 3bff 	add.w	fp, r5, #4294967295
   121c8:	e7e9      	b.n	1219e <_strtoull_l.constprop.0+0xfe>
   121ca:	2301      	movs	r3, #1
   121cc:	782c      	ldrb	r4, [r5, #0]
   121ce:	9302      	str	r3, [sp, #8]
   121d0:	1c8d      	adds	r5, r1, #2
   121d2:	e77e      	b.n	120d2 <_strtoull_l.constprop.0+0x32>
   121d4:	2c30      	cmp	r4, #48	; 0x30
   121d6:	d123      	bne.n	12220 <_strtoull_l.constprop.0+0x180>
   121d8:	782b      	ldrb	r3, [r5, #0]
   121da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   121de:	2b58      	cmp	r3, #88	; 0x58
   121e0:	d11b      	bne.n	1221a <_strtoull_l.constprop.0+0x17a>
   121e2:	f04f 0910 	mov.w	r9, #16
   121e6:	786c      	ldrb	r4, [r5, #1]
   121e8:	220f      	movs	r2, #15
   121ea:	3502      	adds	r5, #2
   121ec:	f04f 37ff 	mov.w	r7, #4294967295
   121f0:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   121f4:	f04f 0a00 	mov.w	sl, #0
   121f8:	464e      	mov	r6, r9
   121fa:	e78e      	b.n	1211a <_strtoull_l.constprop.0+0x7a>
   121fc:	782b      	ldrb	r3, [r5, #0]
   121fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12202:	2b58      	cmp	r3, #88	; 0x58
   12204:	d0ed      	beq.n	121e2 <_strtoull_l.constprop.0+0x142>
   12206:	f04f 0908 	mov.w	r9, #8
   1220a:	46b2      	mov	sl, r6
   1220c:	2207      	movs	r2, #7
   1220e:	f04f 37ff 	mov.w	r7, #4294967295
   12212:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   12216:	464e      	mov	r6, r9
   12218:	e77f      	b.n	1211a <_strtoull_l.constprop.0+0x7a>
   1221a:	f04f 0a00 	mov.w	sl, #0
   1221e:	e75d      	b.n	120dc <_strtoull_l.constprop.0+0x3c>
   12220:	220f      	movs	r2, #15
   12222:	f04f 37ff 	mov.w	r7, #4294967295
   12226:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1222a:	46b1      	mov	r9, r6
   1222c:	f04f 0a00 	mov.w	sl, #0
   12230:	e773      	b.n	1211a <_strtoull_l.constprop.0+0x7a>
   12232:	bf00      	nop
   12234:	20000aa5 	.word	0x20000aa5
   12238:	19999999 	.word	0x19999999

0001223c <_strtoull_r>:
   1223c:	f7ff bf30 	b.w	120a0 <_strtoull_l.constprop.0>

00012240 <_mbrtowc_r>:
   12240:	b570      	push	{r4, r5, r6, lr}
   12242:	b082      	sub	sp, #8
   12244:	4604      	mov	r4, r0
   12246:	9d06      	ldr	r5, [sp, #24]
   12248:	b155      	cbz	r5, 12260 <_mbrtowc_r+0x20>
   1224a:	b16a      	cbz	r2, 12268 <_mbrtowc_r+0x28>
   1224c:	480f      	ldr	r0, [pc, #60]	; (1228c <_mbrtowc_r+0x4c>)
   1224e:	9500      	str	r5, [sp, #0]
   12250:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   12254:	4620      	mov	r0, r4
   12256:	47b0      	blx	r6
   12258:	1c43      	adds	r3, r0, #1
   1225a:	d010      	beq.n	1227e <_mbrtowc_r+0x3e>
   1225c:	b002      	add	sp, #8
   1225e:	bd70      	pop	{r4, r5, r6, pc}
   12260:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   12264:	2a00      	cmp	r2, #0
   12266:	d1f1      	bne.n	1224c <_mbrtowc_r+0xc>
   12268:	4b08      	ldr	r3, [pc, #32]	; (1228c <_mbrtowc_r+0x4c>)
   1226a:	9500      	str	r5, [sp, #0]
   1226c:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   12270:	4611      	mov	r1, r2
   12272:	2301      	movs	r3, #1
   12274:	4a06      	ldr	r2, [pc, #24]	; (12290 <_mbrtowc_r+0x50>)
   12276:	4620      	mov	r0, r4
   12278:	47b0      	blx	r6
   1227a:	1c43      	adds	r3, r0, #1
   1227c:	d1ee      	bne.n	1225c <_mbrtowc_r+0x1c>
   1227e:	2200      	movs	r2, #0
   12280:	238a      	movs	r3, #138	; 0x8a
   12282:	602a      	str	r2, [r5, #0]
   12284:	6023      	str	r3, [r4, #0]
   12286:	b002      	add	sp, #8
   12288:	bd70      	pop	{r4, r5, r6, pc}
   1228a:	bf00      	nop
   1228c:	200085f4 	.word	0x200085f4
   12290:	20008024 	.word	0x20008024

00012294 <_wcrtomb_r>:
   12294:	b570      	push	{r4, r5, r6, lr}
   12296:	4605      	mov	r5, r0
   12298:	b084      	sub	sp, #16
   1229a:	b15b      	cbz	r3, 122b4 <_wcrtomb_r+0x20>
   1229c:	461c      	mov	r4, r3
   1229e:	b169      	cbz	r1, 122bc <_wcrtomb_r+0x28>
   122a0:	4b0e      	ldr	r3, [pc, #56]	; (122dc <_wcrtomb_r+0x48>)
   122a2:	4628      	mov	r0, r5
   122a4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   122a8:	4623      	mov	r3, r4
   122aa:	47b0      	blx	r6
   122ac:	1c43      	adds	r3, r0, #1
   122ae:	d00f      	beq.n	122d0 <_wcrtomb_r+0x3c>
   122b0:	b004      	add	sp, #16
   122b2:	bd70      	pop	{r4, r5, r6, pc}
   122b4:	f500 7482 	add.w	r4, r0, #260	; 0x104
   122b8:	2900      	cmp	r1, #0
   122ba:	d1f1      	bne.n	122a0 <_wcrtomb_r+0xc>
   122bc:	4a07      	ldr	r2, [pc, #28]	; (122dc <_wcrtomb_r+0x48>)
   122be:	4623      	mov	r3, r4
   122c0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   122c4:	4628      	mov	r0, r5
   122c6:	460a      	mov	r2, r1
   122c8:	a901      	add	r1, sp, #4
   122ca:	47b0      	blx	r6
   122cc:	1c43      	adds	r3, r0, #1
   122ce:	d1ef      	bne.n	122b0 <_wcrtomb_r+0x1c>
   122d0:	2200      	movs	r2, #0
   122d2:	238a      	movs	r3, #138	; 0x8a
   122d4:	6022      	str	r2, [r4, #0]
   122d6:	602b      	str	r3, [r5, #0]
   122d8:	b004      	add	sp, #16
   122da:	bd70      	pop	{r4, r5, r6, pc}
   122dc:	200085f4 	.word	0x200085f4

000122e0 <_wcsrtombs_r>:
   122e0:	b510      	push	{r4, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	9c04      	ldr	r4, [sp, #16]
   122e6:	e9cd 3400 	strd	r3, r4, [sp]
   122ea:	f04f 33ff 	mov.w	r3, #4294967295
   122ee:	f001 fd9f 	bl	13e30 <_wcsnrtombs_r>
   122f2:	b002      	add	sp, #8
   122f4:	bd10      	pop	{r4, pc}
   122f6:	bf00      	nop

000122f8 <iswspace>:
   122f8:	2100      	movs	r1, #0
   122fa:	f000 b801 	b.w	12300 <iswspace_l>
   122fe:	bf00      	nop

00012300 <iswspace_l>:
   12300:	b510      	push	{r4, lr}
   12302:	f000 f8ab 	bl	1245c <_jp2uc_l>
   12306:	4604      	mov	r4, r0
   12308:	f001 fda4 	bl	13e54 <category>
   1230c:	f1a0 031a 	sub.w	r3, r0, #26
   12310:	b2db      	uxtb	r3, r3
   12312:	2b02      	cmp	r3, #2
   12314:	d906      	bls.n	12324 <iswspace_l+0x24>
   12316:	f1a4 0009 	sub.w	r0, r4, #9
   1231a:	2804      	cmp	r0, #4
   1231c:	bf8c      	ite	hi
   1231e:	2000      	movhi	r0, #0
   12320:	2001      	movls	r0, #1
   12322:	bd10      	pop	{r4, pc}
   12324:	2001      	movs	r0, #1
   12326:	bd10      	pop	{r4, pc}

00012328 <__jp2uc>:
   12328:	2902      	cmp	r1, #2
   1232a:	d032      	beq.n	12392 <__jp2uc+0x6a>
   1232c:	2903      	cmp	r1, #3
   1232e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   12332:	bf1d      	ittte	ne
   12334:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   12338:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   1233c:	b2d2      	uxtbne	r2, r2
   1233e:	b2c2      	uxtbeq	r2, r0
   12340:	f103 0150 	add.w	r1, r3, #80	; 0x50
   12344:	b2c9      	uxtb	r1, r1
   12346:	291f      	cmp	r1, #31
   12348:	d806      	bhi.n	12358 <__jp2uc+0x30>
   1234a:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   1234e:	4288      	cmp	r0, r1
   12350:	d969      	bls.n	12426 <__jp2uc+0xfe>
   12352:	f04f 30ff 	mov.w	r0, #4294967295
   12356:	4770      	bx	lr
   12358:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1235c:	b2c9      	uxtb	r1, r1
   1235e:	2924      	cmp	r1, #36	; 0x24
   12360:	d80e      	bhi.n	12380 <__jp2uc+0x58>
   12362:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   12366:	4288      	cmp	r0, r1
   12368:	d8f3      	bhi.n	12352 <__jp2uc+0x2a>
   1236a:	3bd0      	subs	r3, #208	; 0xd0
   1236c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   12370:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12374:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   12378:	4a30      	ldr	r2, [pc, #192]	; (1243c <__jp2uc+0x114>)
   1237a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1237e:	4770      	bx	lr
   12380:	3ba1      	subs	r3, #161	; 0xa1
   12382:	2b07      	cmp	r3, #7
   12384:	d8e5      	bhi.n	12352 <__jp2uc+0x2a>
   12386:	e8df f003 	tbb	[pc, r3]
   1238a:	3e48      	.short	0x3e48
   1238c:	25292e34 	.word	0x25292e34
   12390:	1921      	.short	0x1921
   12392:	b2c2      	uxtb	r2, r0
   12394:	2a9e      	cmp	r2, #158	; 0x9e
   12396:	f3c0 2107 	ubfx	r1, r0, #8, #8
   1239a:	d90b      	bls.n	123b4 <__jp2uc+0x8c>
   1239c:	3223      	adds	r2, #35	; 0x23
   1239e:	b2d2      	uxtb	r2, r2
   123a0:	2380      	movs	r3, #128	; 0x80
   123a2:	299f      	cmp	r1, #159	; 0x9f
   123a4:	bf94      	ite	ls
   123a6:	3970      	subls	r1, #112	; 0x70
   123a8:	3150      	addhi	r1, #80	; 0x50
   123aa:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   123ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   123b2:	e7c5      	b.n	12340 <__jp2uc+0x18>
   123b4:	3a7e      	subs	r2, #126	; 0x7e
   123b6:	b2d2      	uxtb	r2, r2
   123b8:	237f      	movs	r3, #127	; 0x7f
   123ba:	e7f2      	b.n	123a2 <__jp2uc+0x7a>
   123bc:	2ac0      	cmp	r2, #192	; 0xc0
   123be:	d8c8      	bhi.n	12352 <__jp2uc+0x2a>
   123c0:	4b1f      	ldr	r3, [pc, #124]	; (12440 <__jp2uc+0x118>)
   123c2:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   123c6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   123ca:	4770      	bx	lr
   123cc:	2af1      	cmp	r2, #241	; 0xf1
   123ce:	d8c0      	bhi.n	12352 <__jp2uc+0x2a>
   123d0:	4b1c      	ldr	r3, [pc, #112]	; (12444 <__jp2uc+0x11c>)
   123d2:	e019      	b.n	12408 <__jp2uc+0xe0>
   123d4:	2ad8      	cmp	r2, #216	; 0xd8
   123d6:	d8bc      	bhi.n	12352 <__jp2uc+0x2a>
   123d8:	4b1b      	ldr	r3, [pc, #108]	; (12448 <__jp2uc+0x120>)
   123da:	e015      	b.n	12408 <__jp2uc+0xe0>
   123dc:	2af6      	cmp	r2, #246	; 0xf6
   123de:	d8b8      	bhi.n	12352 <__jp2uc+0x2a>
   123e0:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   123e4:	4770      	bx	lr
   123e6:	2af3      	cmp	r2, #243	; 0xf3
   123e8:	d8b3      	bhi.n	12352 <__jp2uc+0x2a>
   123ea:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   123ee:	3020      	adds	r0, #32
   123f0:	4770      	bx	lr
   123f2:	4b16      	ldr	r3, [pc, #88]	; (1244c <__jp2uc+0x124>)
   123f4:	4413      	add	r3, r2
   123f6:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   123fa:	2b00      	cmp	r3, #0
   123fc:	d0a9      	beq.n	12352 <__jp2uc+0x2a>
   123fe:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   12402:	3060      	adds	r0, #96	; 0x60
   12404:	4770      	bx	lr
   12406:	4b12      	ldr	r3, [pc, #72]	; (12450 <__jp2uc+0x128>)
   12408:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   1240c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12410:	2800      	cmp	r0, #0
   12412:	bf08      	it	eq
   12414:	f04f 30ff 	moveq.w	r0, #4294967295
   12418:	4770      	bx	lr
   1241a:	4b0e      	ldr	r3, [pc, #56]	; (12454 <__jp2uc+0x12c>)
   1241c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12420:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12424:	4770      	bx	lr
   12426:	3bb0      	subs	r3, #176	; 0xb0
   12428:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   1242c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12430:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   12434:	4a08      	ldr	r2, [pc, #32]	; (12458 <__jp2uc+0x130>)
   12436:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1243a:	4770      	bx	lr
   1243c:	20005c34 	.word	0x20005c34
   12440:	20000f5c 	.word	0x20000f5c
   12444:	20000eb8 	.word	0x20000eb8
   12448:	20000e48 	.word	0x20000e48
   1244c:	20000dec 	.word	0x20000dec
   12450:	20000d30 	.word	0x20000d30
   12454:	20000c74 	.word	0x20000c74
   12458:	20000f9c 	.word	0x20000f9c

0001245c <_jp2uc_l>:
   1245c:	b538      	push	{r3, r4, r5, lr}
   1245e:	4605      	mov	r5, r0
   12460:	b1b9      	cbz	r1, 12492 <_jp2uc_l+0x36>
   12462:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   12466:	4912      	ldr	r1, [pc, #72]	; (124b0 <_jp2uc_l+0x54>)
   12468:	4620      	mov	r0, r4
   1246a:	f7f9 fc0d 	bl	bc88 <strcmp>
   1246e:	b928      	cbnz	r0, 1247c <_jp2uc_l+0x20>
   12470:	4628      	mov	r0, r5
   12472:	2101      	movs	r1, #1
   12474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12478:	f7ff bf56 	b.w	12328 <__jp2uc>
   1247c:	490d      	ldr	r1, [pc, #52]	; (124b4 <_jp2uc_l+0x58>)
   1247e:	4620      	mov	r0, r4
   12480:	f7f9 fc02 	bl	bc88 <strcmp>
   12484:	b938      	cbnz	r0, 12496 <_jp2uc_l+0x3a>
   12486:	4628      	mov	r0, r5
   12488:	2102      	movs	r1, #2
   1248a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1248e:	f7ff bf4b 	b.w	12328 <__jp2uc>
   12492:	4c09      	ldr	r4, [pc, #36]	; (124b8 <_jp2uc_l+0x5c>)
   12494:	e7e7      	b.n	12466 <_jp2uc_l+0xa>
   12496:	4909      	ldr	r1, [pc, #36]	; (124bc <_jp2uc_l+0x60>)
   12498:	4620      	mov	r0, r4
   1249a:	f7f9 fbf5 	bl	bc88 <strcmp>
   1249e:	b928      	cbnz	r0, 124ac <_jp2uc_l+0x50>
   124a0:	4628      	mov	r0, r5
   124a2:	2103      	movs	r1, #3
   124a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   124a8:	f7ff bf3e 	b.w	12328 <__jp2uc>
   124ac:	4628      	mov	r0, r5
   124ae:	bd38      	pop	{r3, r4, r5, pc}
   124b0:	20000c14 	.word	0x20000c14
   124b4:	20000c18 	.word	0x20000c18
   124b8:	2000871e 	.word	0x2000871e
   124bc:	20000c20 	.word	0x20000c20

000124c0 <fiprintf>:
   124c0:	b40e      	push	{r1, r2, r3}
   124c2:	b510      	push	{r4, lr}
   124c4:	b083      	sub	sp, #12
   124c6:	ab05      	add	r3, sp, #20
   124c8:	4c06      	ldr	r4, [pc, #24]	; (124e4 <fiprintf+0x24>)
   124ca:	f853 2b04 	ldr.w	r2, [r3], #4
   124ce:	9301      	str	r3, [sp, #4]
   124d0:	4601      	mov	r1, r0
   124d2:	6820      	ldr	r0, [r4, #0]
   124d4:	f000 f97c 	bl	127d0 <_vfiprintf_r>
   124d8:	b003      	add	sp, #12
   124da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   124de:	b003      	add	sp, #12
   124e0:	4770      	bx	lr
   124e2:	bf00      	nop
   124e4:	20008b7c 	.word	0x20008b7c

000124e8 <__ssprint_r>:
   124e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124ec:	6893      	ldr	r3, [r2, #8]
   124ee:	6817      	ldr	r7, [r2, #0]
   124f0:	b083      	sub	sp, #12
   124f2:	4692      	mov	sl, r2
   124f4:	2b00      	cmp	r3, #0
   124f6:	d070      	beq.n	125da <__ssprint_r+0xf2>
   124f8:	4681      	mov	r9, r0
   124fa:	688a      	ldr	r2, [r1, #8]
   124fc:	6808      	ldr	r0, [r1, #0]
   124fe:	460c      	mov	r4, r1
   12500:	3708      	adds	r7, #8
   12502:	e043      	b.n	1258c <__ssprint_r+0xa4>
   12504:	89a3      	ldrh	r3, [r4, #12]
   12506:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1250a:	d02e      	beq.n	1256a <__ssprint_r+0x82>
   1250c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   12510:	eba0 0801 	sub.w	r8, r0, r1
   12514:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   12518:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   1251c:	f108 0001 	add.w	r0, r8, #1
   12520:	1076      	asrs	r6, r6, #1
   12522:	4428      	add	r0, r5
   12524:	42b0      	cmp	r0, r6
   12526:	4632      	mov	r2, r6
   12528:	bf84      	itt	hi
   1252a:	4606      	movhi	r6, r0
   1252c:	4632      	movhi	r2, r6
   1252e:	055b      	lsls	r3, r3, #21
   12530:	d537      	bpl.n	125a2 <__ssprint_r+0xba>
   12532:	4611      	mov	r1, r2
   12534:	4648      	mov	r0, r9
   12536:	f7f7 fb05 	bl	9b44 <_malloc_r>
   1253a:	9001      	str	r0, [sp, #4]
   1253c:	2800      	cmp	r0, #0
   1253e:	d03a      	beq.n	125b6 <__ssprint_r+0xce>
   12540:	4642      	mov	r2, r8
   12542:	6921      	ldr	r1, [r4, #16]
   12544:	f7f5 fd5a 	bl	7ffc <memcpy>
   12548:	89a2      	ldrh	r2, [r4, #12]
   1254a:	9b01      	ldr	r3, [sp, #4]
   1254c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   12550:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12554:	81a2      	strh	r2, [r4, #12]
   12556:	eba6 0208 	sub.w	r2, r6, r8
   1255a:	eb03 0008 	add.w	r0, r3, r8
   1255e:	6166      	str	r6, [r4, #20]
   12560:	60a2      	str	r2, [r4, #8]
   12562:	6123      	str	r3, [r4, #16]
   12564:	6020      	str	r0, [r4, #0]
   12566:	462e      	mov	r6, r5
   12568:	46a8      	mov	r8, r5
   1256a:	4642      	mov	r2, r8
   1256c:	4659      	mov	r1, fp
   1256e:	f7f9 f995 	bl	b89c <memmove>
   12572:	f8da 3008 	ldr.w	r3, [sl, #8]
   12576:	68a2      	ldr	r2, [r4, #8]
   12578:	6820      	ldr	r0, [r4, #0]
   1257a:	1b92      	subs	r2, r2, r6
   1257c:	4440      	add	r0, r8
   1257e:	1b5b      	subs	r3, r3, r5
   12580:	60a2      	str	r2, [r4, #8]
   12582:	6020      	str	r0, [r4, #0]
   12584:	f8ca 3008 	str.w	r3, [sl, #8]
   12588:	b33b      	cbz	r3, 125da <__ssprint_r+0xf2>
   1258a:	3708      	adds	r7, #8
   1258c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   12590:	2d00      	cmp	r5, #0
   12592:	d0fa      	beq.n	1258a <__ssprint_r+0xa2>
   12594:	42aa      	cmp	r2, r5
   12596:	4616      	mov	r6, r2
   12598:	4690      	mov	r8, r2
   1259a:	d9b3      	bls.n	12504 <__ssprint_r+0x1c>
   1259c:	462e      	mov	r6, r5
   1259e:	46a8      	mov	r8, r5
   125a0:	e7e3      	b.n	1256a <__ssprint_r+0x82>
   125a2:	4648      	mov	r0, r9
   125a4:	f7f7 fd96 	bl	a0d4 <_realloc_r>
   125a8:	4603      	mov	r3, r0
   125aa:	2800      	cmp	r0, #0
   125ac:	d1d3      	bne.n	12556 <__ssprint_r+0x6e>
   125ae:	6921      	ldr	r1, [r4, #16]
   125b0:	4648      	mov	r0, r9
   125b2:	f7f9 fe97 	bl	c2e4 <_free_r>
   125b6:	89a3      	ldrh	r3, [r4, #12]
   125b8:	220c      	movs	r2, #12
   125ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   125be:	f8c9 2000 	str.w	r2, [r9]
   125c2:	f04f 30ff 	mov.w	r0, #4294967295
   125c6:	81a3      	strh	r3, [r4, #12]
   125c8:	2200      	movs	r2, #0
   125ca:	2300      	movs	r3, #0
   125cc:	f8ca 2008 	str.w	r2, [sl, #8]
   125d0:	f8ca 3004 	str.w	r3, [sl, #4]
   125d4:	b003      	add	sp, #12
   125d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125da:	2000      	movs	r0, #0
   125dc:	2300      	movs	r3, #0
   125de:	f8ca 3004 	str.w	r3, [sl, #4]
   125e2:	b003      	add	sp, #12
   125e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000125e8 <_sungetc_r>:
   125e8:	b538      	push	{r3, r4, r5, lr}
   125ea:	1c4b      	adds	r3, r1, #1
   125ec:	d01a      	beq.n	12624 <_sungetc_r+0x3c>
   125ee:	8993      	ldrh	r3, [r2, #12]
   125f0:	4614      	mov	r4, r2
   125f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
   125f4:	f023 0320 	bic.w	r3, r3, #32
   125f8:	81a3      	strh	r3, [r4, #12]
   125fa:	b2cd      	uxtb	r5, r1
   125fc:	b1aa      	cbz	r2, 1262a <_sungetc_r+0x42>
   125fe:	6862      	ldr	r2, [r4, #4]
   12600:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12602:	429a      	cmp	r2, r3
   12604:	da09      	bge.n	1261a <_sungetc_r+0x32>
   12606:	6823      	ldr	r3, [r4, #0]
   12608:	1e5a      	subs	r2, r3, #1
   1260a:	6022      	str	r2, [r4, #0]
   1260c:	f803 5c01 	strb.w	r5, [r3, #-1]
   12610:	6863      	ldr	r3, [r4, #4]
   12612:	3301      	adds	r3, #1
   12614:	6063      	str	r3, [r4, #4]
   12616:	4628      	mov	r0, r5
   12618:	bd38      	pop	{r3, r4, r5, pc}
   1261a:	4621      	mov	r1, r4
   1261c:	f001 fa58 	bl	13ad0 <__submore>
   12620:	2800      	cmp	r0, #0
   12622:	d0f0      	beq.n	12606 <_sungetc_r+0x1e>
   12624:	f04f 35ff 	mov.w	r5, #4294967295
   12628:	e7f5      	b.n	12616 <_sungetc_r+0x2e>
   1262a:	6923      	ldr	r3, [r4, #16]
   1262c:	6822      	ldr	r2, [r4, #0]
   1262e:	b12b      	cbz	r3, 1263c <_sungetc_r+0x54>
   12630:	4293      	cmp	r3, r2
   12632:	d203      	bcs.n	1263c <_sungetc_r+0x54>
   12634:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   12638:	42ab      	cmp	r3, r5
   1263a:	d00f      	beq.n	1265c <_sungetc_r+0x74>
   1263c:	6861      	ldr	r1, [r4, #4]
   1263e:	63e1      	str	r1, [r4, #60]	; 0x3c
   12640:	4623      	mov	r3, r4
   12642:	63a2      	str	r2, [r4, #56]	; 0x38
   12644:	f104 0140 	add.w	r1, r4, #64	; 0x40
   12648:	2203      	movs	r2, #3
   1264a:	6362      	str	r2, [r4, #52]	; 0x34
   1264c:	6321      	str	r1, [r4, #48]	; 0x30
   1264e:	f803 5f42 	strb.w	r5, [r3, #66]!
   12652:	2201      	movs	r2, #1
   12654:	e9c4 3200 	strd	r3, r2, [r4]
   12658:	4628      	mov	r0, r5
   1265a:	bd38      	pop	{r3, r4, r5, pc}
   1265c:	6863      	ldr	r3, [r4, #4]
   1265e:	3a01      	subs	r2, #1
   12660:	3301      	adds	r3, #1
   12662:	e9c4 2300 	strd	r2, r3, [r4]
   12666:	e7d6      	b.n	12616 <_sungetc_r+0x2e>

00012668 <__ssrefill_r>:
   12668:	b510      	push	{r4, lr}
   1266a:	460c      	mov	r4, r1
   1266c:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1266e:	b169      	cbz	r1, 1268c <__ssrefill_r+0x24>
   12670:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12674:	4299      	cmp	r1, r3
   12676:	d001      	beq.n	1267c <__ssrefill_r+0x14>
   12678:	f7f9 fe34 	bl	c2e4 <_free_r>
   1267c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1267e:	6063      	str	r3, [r4, #4]
   12680:	2000      	movs	r0, #0
   12682:	6320      	str	r0, [r4, #48]	; 0x30
   12684:	b113      	cbz	r3, 1268c <__ssrefill_r+0x24>
   12686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12688:	6023      	str	r3, [r4, #0]
   1268a:	bd10      	pop	{r4, pc}
   1268c:	89a3      	ldrh	r3, [r4, #12]
   1268e:	6921      	ldr	r1, [r4, #16]
   12690:	2200      	movs	r2, #0
   12692:	f043 0320 	orr.w	r3, r3, #32
   12696:	e9c4 1200 	strd	r1, r2, [r4]
   1269a:	81a3      	strh	r3, [r4, #12]
   1269c:	f04f 30ff 	mov.w	r0, #4294967295
   126a0:	bd10      	pop	{r4, pc}
   126a2:	bf00      	nop

000126a4 <_sfread_r>:
   126a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126a8:	b085      	sub	sp, #20
   126aa:	e9cd 3202 	strd	r3, r2, [sp, #8]
   126ae:	fb02 f303 	mul.w	r3, r2, r3
   126b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   126b4:	9301      	str	r3, [sp, #4]
   126b6:	b3a3      	cbz	r3, 12722 <_sfread_r+0x7e>
   126b8:	f8d4 a004 	ldr.w	sl, [r4, #4]
   126bc:	9b01      	ldr	r3, [sp, #4]
   126be:	4553      	cmp	r3, sl
   126c0:	468b      	mov	fp, r1
   126c2:	d946      	bls.n	12752 <_sfread_r+0xae>
   126c4:	46a0      	mov	r8, r4
   126c6:	9d01      	ldr	r5, [sp, #4]
   126c8:	f858 1b40 	ldr.w	r1, [r8], #64
   126cc:	4607      	mov	r7, r0
   126ce:	2600      	movs	r6, #0
   126d0:	4652      	mov	r2, sl
   126d2:	4658      	mov	r0, fp
   126d4:	f7f5 fc92 	bl	7ffc <memcpy>
   126d8:	6823      	ldr	r3, [r4, #0]
   126da:	6b22      	ldr	r2, [r4, #48]	; 0x30
   126dc:	4453      	add	r3, sl
   126de:	46a9      	mov	r9, r5
   126e0:	e9c4 3600 	strd	r3, r6, [r4]
   126e4:	4611      	mov	r1, r2
   126e6:	4638      	mov	r0, r7
   126e8:	44d3      	add	fp, sl
   126ea:	eba5 050a 	sub.w	r5, r5, sl
   126ee:	b1e2      	cbz	r2, 1272a <_sfread_r+0x86>
   126f0:	4542      	cmp	r2, r8
   126f2:	d001      	beq.n	126f8 <_sfread_r+0x54>
   126f4:	f7f9 fdf6 	bl	c2e4 <_free_r>
   126f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   126fa:	6326      	str	r6, [r4, #48]	; 0x30
   126fc:	6063      	str	r3, [r4, #4]
   126fe:	b1a3      	cbz	r3, 1272a <_sfread_r+0x86>
   12700:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   12702:	6021      	str	r1, [r4, #0]
   12704:	42ab      	cmp	r3, r5
   12706:	469a      	mov	sl, r3
   12708:	d3e2      	bcc.n	126d0 <_sfread_r+0x2c>
   1270a:	9b02      	ldr	r3, [sp, #8]
   1270c:	9301      	str	r3, [sp, #4]
   1270e:	462a      	mov	r2, r5
   12710:	4658      	mov	r0, fp
   12712:	f7f5 fc73 	bl	7ffc <memcpy>
   12716:	e9d4 3200 	ldrd	r3, r2, [r4]
   1271a:	1b52      	subs	r2, r2, r5
   1271c:	442b      	add	r3, r5
   1271e:	e9c4 3200 	strd	r3, r2, [r4]
   12722:	9801      	ldr	r0, [sp, #4]
   12724:	b005      	add	sp, #20
   12726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1272a:	9a01      	ldr	r2, [sp, #4]
   1272c:	9b03      	ldr	r3, [sp, #12]
   1272e:	4452      	add	r2, sl
   12730:	eba2 0209 	sub.w	r2, r2, r9
   12734:	fbb2 f3f3 	udiv	r3, r2, r3
   12738:	9301      	str	r3, [sp, #4]
   1273a:	89a3      	ldrh	r3, [r4, #12]
   1273c:	6922      	ldr	r2, [r4, #16]
   1273e:	9801      	ldr	r0, [sp, #4]
   12740:	f043 0320 	orr.w	r3, r3, #32
   12744:	81a3      	strh	r3, [r4, #12]
   12746:	2300      	movs	r3, #0
   12748:	e9c4 2300 	strd	r2, r3, [r4]
   1274c:	b005      	add	sp, #20
   1274e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12752:	6821      	ldr	r1, [r4, #0]
   12754:	461d      	mov	r5, r3
   12756:	e7d8      	b.n	1270a <_sfread_r+0x66>

00012758 <__sprint_r.part.0>:
   12758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1275c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1275e:	049c      	lsls	r4, r3, #18
   12760:	4690      	mov	r8, r2
   12762:	d52d      	bpl.n	127c0 <__sprint_r.part.0+0x68>
   12764:	6893      	ldr	r3, [r2, #8]
   12766:	6812      	ldr	r2, [r2, #0]
   12768:	b343      	cbz	r3, 127bc <__sprint_r.part.0+0x64>
   1276a:	468b      	mov	fp, r1
   1276c:	4606      	mov	r6, r0
   1276e:	f102 0908 	add.w	r9, r2, #8
   12772:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   12776:	ea5f 079a 	movs.w	r7, sl, lsr #2
   1277a:	d015      	beq.n	127a8 <__sprint_r.part.0+0x50>
   1277c:	3d04      	subs	r5, #4
   1277e:	2400      	movs	r4, #0
   12780:	e001      	b.n	12786 <__sprint_r.part.0+0x2e>
   12782:	42a7      	cmp	r7, r4
   12784:	d00e      	beq.n	127a4 <__sprint_r.part.0+0x4c>
   12786:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1278a:	465a      	mov	r2, fp
   1278c:	4630      	mov	r0, r6
   1278e:	f001 fa97 	bl	13cc0 <_fputwc_r>
   12792:	1c43      	adds	r3, r0, #1
   12794:	f104 0401 	add.w	r4, r4, #1
   12798:	d1f3      	bne.n	12782 <__sprint_r.part.0+0x2a>
   1279a:	2300      	movs	r3, #0
   1279c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   127a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   127a8:	f02a 0a03 	bic.w	sl, sl, #3
   127ac:	eba3 030a 	sub.w	r3, r3, sl
   127b0:	f8c8 3008 	str.w	r3, [r8, #8]
   127b4:	f109 0908 	add.w	r9, r9, #8
   127b8:	2b00      	cmp	r3, #0
   127ba:	d1da      	bne.n	12772 <__sprint_r.part.0+0x1a>
   127bc:	2000      	movs	r0, #0
   127be:	e7ec      	b.n	1279a <__sprint_r.part.0+0x42>
   127c0:	f001 f80c 	bl	137dc <__sfvwrite_r>
   127c4:	2300      	movs	r3, #0
   127c6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   127ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127ce:	bf00      	nop

000127d0 <_vfiprintf_r>:
   127d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127d4:	ed2d 8b02 	vpush	{d8}
   127d8:	b0c5      	sub	sp, #276	; 0x114
   127da:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   127de:	4683      	mov	fp, r0
   127e0:	ee08 1a10 	vmov	s16, r1
   127e4:	4616      	mov	r6, r2
   127e6:	2100      	movs	r1, #0
   127e8:	2208      	movs	r2, #8
   127ea:	4650      	mov	r0, sl
   127ec:	461c      	mov	r4, r3
   127ee:	9307      	str	r3, [sp, #28]
   127f0:	f7f9 f8d0 	bl	b994 <memset>
   127f4:	f1bb 0f00 	cmp.w	fp, #0
   127f8:	d004      	beq.n	12804 <_vfiprintf_r+0x34>
   127fa:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   127fe:	2b00      	cmp	r3, #0
   12800:	f000 86a0 	beq.w	13544 <_vfiprintf_r+0xd74>
   12804:	ee18 2a10 	vmov	r2, s16
   12808:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1280a:	07db      	lsls	r3, r3, #31
   1280c:	f140 8513 	bpl.w	13236 <_vfiprintf_r+0xa66>
   12810:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12814:	b28a      	uxth	r2, r1
   12816:	0495      	lsls	r5, r2, #18
   12818:	d40b      	bmi.n	12832 <_vfiprintf_r+0x62>
   1281a:	ee18 3a10 	vmov	r3, s16
   1281e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   12822:	8199      	strh	r1, [r3, #12]
   12824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12826:	b28a      	uxth	r2, r1
   12828:	ee18 1a10 	vmov	r1, s16
   1282c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12830:	664b      	str	r3, [r1, #100]	; 0x64
   12832:	0710      	lsls	r0, r2, #28
   12834:	f140 8105 	bpl.w	12a42 <_vfiprintf_r+0x272>
   12838:	ee18 3a10 	vmov	r3, s16
   1283c:	691b      	ldr	r3, [r3, #16]
   1283e:	2b00      	cmp	r3, #0
   12840:	f000 80ff 	beq.w	12a42 <_vfiprintf_r+0x272>
   12844:	f002 031a 	and.w	r3, r2, #26
   12848:	2b0a      	cmp	r3, #10
   1284a:	f000 810a 	beq.w	12a62 <_vfiprintf_r+0x292>
   1284e:	2300      	movs	r3, #0
   12850:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   12854:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   12858:	aa1b      	add	r2, sp, #108	; 0x6c
   1285a:	930c      	str	r3, [sp, #48]	; 0x30
   1285c:	9218      	str	r2, [sp, #96]	; 0x60
   1285e:	4691      	mov	r9, r2
   12860:	930b      	str	r3, [sp, #44]	; 0x2c
   12862:	9305      	str	r3, [sp, #20]
   12864:	46b0      	mov	r8, r6
   12866:	4644      	mov	r4, r8
   12868:	4ba8      	ldr	r3, [pc, #672]	; (12b0c <_vfiprintf_r+0x33c>)
   1286a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1286e:	f7f9 f95b 	bl	bb28 <__locale_mb_cur_max>
   12872:	4622      	mov	r2, r4
   12874:	4603      	mov	r3, r0
   12876:	a912      	add	r1, sp, #72	; 0x48
   12878:	f8cd a000 	str.w	sl, [sp]
   1287c:	4658      	mov	r0, fp
   1287e:	47a8      	blx	r5
   12880:	2800      	cmp	r0, #0
   12882:	f000 8145 	beq.w	12b10 <_vfiprintf_r+0x340>
   12886:	f2c0 8139 	blt.w	12afc <_vfiprintf_r+0x32c>
   1288a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1288c:	2a25      	cmp	r2, #37	; 0x25
   1288e:	4603      	mov	r3, r0
   12890:	d001      	beq.n	12896 <_vfiprintf_r+0xc6>
   12892:	441c      	add	r4, r3
   12894:	e7e8      	b.n	12868 <_vfiprintf_r+0x98>
   12896:	ebb4 0608 	subs.w	r6, r4, r8
   1289a:	4605      	mov	r5, r0
   1289c:	f040 813c 	bne.w	12b18 <_vfiprintf_r+0x348>
   128a0:	2300      	movs	r3, #0
   128a2:	7861      	ldrb	r1, [r4, #1]
   128a4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   128a8:	f104 0801 	add.w	r8, r4, #1
   128ac:	9306      	str	r3, [sp, #24]
   128ae:	f04f 37ff 	mov.w	r7, #4294967295
   128b2:	461e      	mov	r6, r3
   128b4:	242b      	movs	r4, #43	; 0x2b
   128b6:	f108 0801 	add.w	r8, r8, #1
   128ba:	f1a1 0320 	sub.w	r3, r1, #32
   128be:	2b5a      	cmp	r3, #90	; 0x5a
   128c0:	f200 8178 	bhi.w	12bb4 <_vfiprintf_r+0x3e4>
   128c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   128c8:	017602b5 	.word	0x017602b5
   128cc:	02b00176 	.word	0x02b00176
   128d0:	01760176 	.word	0x01760176
   128d4:	006a0176 	.word	0x006a0176
   128d8:	01760176 	.word	0x01760176
   128dc:	028d027d 	.word	0x028d027d
   128e0:	02880176 	.word	0x02880176
   128e4:	01760297 	.word	0x01760297
   128e8:	005b0292 	.word	0x005b0292
   128ec:	005b005b 	.word	0x005b005b
   128f0:	005b005b 	.word	0x005b005b
   128f4:	005b005b 	.word	0x005b005b
   128f8:	005b005b 	.word	0x005b005b
   128fc:	01760176 	.word	0x01760176
   12900:	01760176 	.word	0x01760176
   12904:	01760176 	.word	0x01760176
   12908:	01760176 	.word	0x01760176
   1290c:	025c0176 	.word	0x025c0176
   12910:	01760084 	.word	0x01760084
   12914:	01760176 	.word	0x01760176
   12918:	01760176 	.word	0x01760176
   1291c:	01760176 	.word	0x01760176
   12920:	01760176 	.word	0x01760176
   12924:	00e80176 	.word	0x00e80176
   12928:	01760176 	.word	0x01760176
   1292c:	02330176 	.word	0x02330176
   12930:	02da0176 	.word	0x02da0176
   12934:	01760176 	.word	0x01760176
   12938:	0176058b 	.word	0x0176058b
   1293c:	01760176 	.word	0x01760176
   12940:	01760176 	.word	0x01760176
   12944:	01760176 	.word	0x01760176
   12948:	01760176 	.word	0x01760176
   1294c:	025c0176 	.word	0x025c0176
   12950:	01760086 	.word	0x01760086
   12954:	01760176 	.word	0x01760176
   12958:	008602cd 	.word	0x008602cd
   1295c:	0176007f 	.word	0x0176007f
   12960:	017602c0 	.word	0x017602c0
   12964:	00ea02fd 	.word	0x00ea02fd
   12968:	007f02ed 	.word	0x007f02ed
   1296c:	02330176 	.word	0x02330176
   12970:	0569007c 	.word	0x0569007c
   12974:	01760176 	.word	0x01760176
   12978:	0176056b 	.word	0x0176056b
   1297c:	007c      	.short	0x007c
   1297e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12982:	2200      	movs	r2, #0
   12984:	f818 1b01 	ldrb.w	r1, [r8], #1
   12988:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1298c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   12990:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12994:	2b09      	cmp	r3, #9
   12996:	d9f5      	bls.n	12984 <_vfiprintf_r+0x1b4>
   12998:	9206      	str	r2, [sp, #24]
   1299a:	e78e      	b.n	128ba <_vfiprintf_r+0xea>
   1299c:	4658      	mov	r0, fp
   1299e:	f7fe fa7d 	bl	10e9c <_localeconv_r>
   129a2:	6843      	ldr	r3, [r0, #4]
   129a4:	930d      	str	r3, [sp, #52]	; 0x34
   129a6:	4618      	mov	r0, r3
   129a8:	f7f9 fb8a 	bl	c0c0 <strlen>
   129ac:	900e      	str	r0, [sp, #56]	; 0x38
   129ae:	4605      	mov	r5, r0
   129b0:	4658      	mov	r0, fp
   129b2:	f7fe fa73 	bl	10e9c <_localeconv_r>
   129b6:	6883      	ldr	r3, [r0, #8]
   129b8:	930b      	str	r3, [sp, #44]	; 0x2c
   129ba:	2d00      	cmp	r5, #0
   129bc:	f040 84d6 	bne.w	1336c <_vfiprintf_r+0xb9c>
   129c0:	f898 1000 	ldrb.w	r1, [r8]
   129c4:	e777      	b.n	128b6 <_vfiprintf_r+0xe6>
   129c6:	f898 1000 	ldrb.w	r1, [r8]
   129ca:	f046 0620 	orr.w	r6, r6, #32
   129ce:	e772      	b.n	128b6 <_vfiprintf_r+0xe6>
   129d0:	f046 0610 	orr.w	r6, r6, #16
   129d4:	06b4      	lsls	r4, r6, #26
   129d6:	f140 818e 	bpl.w	12cf6 <_vfiprintf_r+0x526>
   129da:	9b07      	ldr	r3, [sp, #28]
   129dc:	3307      	adds	r3, #7
   129de:	f023 0307 	bic.w	r3, r3, #7
   129e2:	461a      	mov	r2, r3
   129e4:	6859      	ldr	r1, [r3, #4]
   129e6:	f852 3b08 	ldr.w	r3, [r2], #8
   129ea:	9207      	str	r2, [sp, #28]
   129ec:	460a      	mov	r2, r1
   129ee:	2900      	cmp	r1, #0
   129f0:	f2c0 8470 	blt.w	132d4 <_vfiprintf_r+0xb04>
   129f4:	1c79      	adds	r1, r7, #1
   129f6:	f000 85a2 	beq.w	1353e <_vfiprintf_r+0xd6e>
   129fa:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   129fe:	9103      	str	r1, [sp, #12]
   12a00:	ea53 0102 	orrs.w	r1, r3, r2
   12a04:	f000 843f 	beq.w	13286 <_vfiprintf_r+0xab6>
   12a08:	2b0a      	cmp	r3, #10
   12a0a:	f172 0100 	sbcs.w	r1, r2, #0
   12a0e:	f080 8541 	bcs.w	13494 <_vfiprintf_r+0xcc4>
   12a12:	3330      	adds	r3, #48	; 0x30
   12a14:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12a18:	9e03      	ldr	r6, [sp, #12]
   12a1a:	2301      	movs	r3, #1
   12a1c:	9304      	str	r3, [sp, #16]
   12a1e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12a22:	9b04      	ldr	r3, [sp, #16]
   12a24:	42bb      	cmp	r3, r7
   12a26:	bfb8      	it	lt
   12a28:	463b      	movlt	r3, r7
   12a2a:	9303      	str	r3, [sp, #12]
   12a2c:	2300      	movs	r3, #0
   12a2e:	9308      	str	r3, [sp, #32]
   12a30:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12a34:	2b00      	cmp	r3, #0
   12a36:	f000 80cb 	beq.w	12bd0 <_vfiprintf_r+0x400>
   12a3a:	9b03      	ldr	r3, [sp, #12]
   12a3c:	3301      	adds	r3, #1
   12a3e:	9303      	str	r3, [sp, #12]
   12a40:	e0c6      	b.n	12bd0 <_vfiprintf_r+0x400>
   12a42:	ee18 1a10 	vmov	r1, s16
   12a46:	4658      	mov	r0, fp
   12a48:	ee18 5a10 	vmov	r5, s16
   12a4c:	f001 f87c 	bl	13b48 <__swsetup_r>
   12a50:	2800      	cmp	r0, #0
   12a52:	f040 8652 	bne.w	136fa <_vfiprintf_r+0xf2a>
   12a56:	89aa      	ldrh	r2, [r5, #12]
   12a58:	f002 031a 	and.w	r3, r2, #26
   12a5c:	2b0a      	cmp	r3, #10
   12a5e:	f47f aef6 	bne.w	1284e <_vfiprintf_r+0x7e>
   12a62:	ee18 1a10 	vmov	r1, s16
   12a66:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   12a6a:	2b00      	cmp	r3, #0
   12a6c:	f6ff aeef 	blt.w	1284e <_vfiprintf_r+0x7e>
   12a70:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12a72:	07db      	lsls	r3, r3, #31
   12a74:	d402      	bmi.n	12a7c <_vfiprintf_r+0x2ac>
   12a76:	0597      	lsls	r7, r2, #22
   12a78:	f140 8612 	bpl.w	136a0 <_vfiprintf_r+0xed0>
   12a7c:	ee18 1a10 	vmov	r1, s16
   12a80:	4623      	mov	r3, r4
   12a82:	4632      	mov	r2, r6
   12a84:	4658      	mov	r0, fp
   12a86:	f000 fe69 	bl	1375c <__sbprintf>
   12a8a:	9005      	str	r0, [sp, #20]
   12a8c:	9805      	ldr	r0, [sp, #20]
   12a8e:	b045      	add	sp, #276	; 0x114
   12a90:	ecbd 8b02 	vpop	{d8}
   12a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a98:	f046 0610 	orr.w	r6, r6, #16
   12a9c:	f016 0220 	ands.w	r2, r6, #32
   12aa0:	f000 8136 	beq.w	12d10 <_vfiprintf_r+0x540>
   12aa4:	9b07      	ldr	r3, [sp, #28]
   12aa6:	3307      	adds	r3, #7
   12aa8:	f023 0307 	bic.w	r3, r3, #7
   12aac:	4619      	mov	r1, r3
   12aae:	685a      	ldr	r2, [r3, #4]
   12ab0:	f851 3b08 	ldr.w	r3, [r1], #8
   12ab4:	9107      	str	r1, [sp, #28]
   12ab6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12aba:	9103      	str	r1, [sp, #12]
   12abc:	2100      	movs	r1, #0
   12abe:	2000      	movs	r0, #0
   12ac0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12ac4:	1c78      	adds	r0, r7, #1
   12ac6:	f000 8210 	beq.w	12eea <_vfiprintf_r+0x71a>
   12aca:	9803      	ldr	r0, [sp, #12]
   12acc:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   12ad0:	ea53 0002 	orrs.w	r0, r3, r2
   12ad4:	f040 8208 	bne.w	12ee8 <_vfiprintf_r+0x718>
   12ad8:	2f00      	cmp	r7, #0
   12ada:	f040 8538 	bne.w	1354e <_vfiprintf_r+0xd7e>
   12ade:	2900      	cmp	r1, #0
   12ae0:	f040 83d5 	bne.w	1328e <_vfiprintf_r+0xabe>
   12ae4:	9b03      	ldr	r3, [sp, #12]
   12ae6:	f013 0301 	ands.w	r3, r3, #1
   12aea:	9304      	str	r3, [sp, #16]
   12aec:	f000 8411 	beq.w	13312 <_vfiprintf_r+0xb42>
   12af0:	2330      	movs	r3, #48	; 0x30
   12af2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12af6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12afa:	e792      	b.n	12a22 <_vfiprintf_r+0x252>
   12afc:	2208      	movs	r2, #8
   12afe:	2100      	movs	r1, #0
   12b00:	4650      	mov	r0, sl
   12b02:	f7f8 ff47 	bl	b994 <memset>
   12b06:	2301      	movs	r3, #1
   12b08:	441c      	add	r4, r3
   12b0a:	e6ad      	b.n	12868 <_vfiprintf_r+0x98>
   12b0c:	200085f4 	.word	0x200085f4
   12b10:	ebb4 0608 	subs.w	r6, r4, r8
   12b14:	4605      	mov	r5, r0
   12b16:	d01b      	beq.n	12b50 <_vfiprintf_r+0x380>
   12b18:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12b1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12b1c:	3301      	adds	r3, #1
   12b1e:	4432      	add	r2, r6
   12b20:	2b07      	cmp	r3, #7
   12b22:	e9c9 8600 	strd	r8, r6, [r9]
   12b26:	921a      	str	r2, [sp, #104]	; 0x68
   12b28:	9319      	str	r3, [sp, #100]	; 0x64
   12b2a:	dd1c      	ble.n	12b66 <_vfiprintf_r+0x396>
   12b2c:	2a00      	cmp	r2, #0
   12b2e:	f000 83a6 	beq.w	1327e <_vfiprintf_r+0xaae>
   12b32:	ee18 1a10 	vmov	r1, s16
   12b36:	aa18      	add	r2, sp, #96	; 0x60
   12b38:	4658      	mov	r0, fp
   12b3a:	f7ff fe0d 	bl	12758 <__sprint_r.part.0>
   12b3e:	bb20      	cbnz	r0, 12b8a <_vfiprintf_r+0x3ba>
   12b40:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b44:	9b05      	ldr	r3, [sp, #20]
   12b46:	4433      	add	r3, r6
   12b48:	9305      	str	r3, [sp, #20]
   12b4a:	2d00      	cmp	r5, #0
   12b4c:	f47f aea8 	bne.w	128a0 <_vfiprintf_r+0xd0>
   12b50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12b52:	2b00      	cmp	r3, #0
   12b54:	f040 85c1 	bne.w	136da <_vfiprintf_r+0xf0a>
   12b58:	ee18 3a10 	vmov	r3, s16
   12b5c:	2200      	movs	r2, #0
   12b5e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12b62:	9219      	str	r2, [sp, #100]	; 0x64
   12b64:	e015      	b.n	12b92 <_vfiprintf_r+0x3c2>
   12b66:	f109 0908 	add.w	r9, r9, #8
   12b6a:	e7eb      	b.n	12b44 <_vfiprintf_r+0x374>
   12b6c:	ee18 1a10 	vmov	r1, s16
   12b70:	aa18      	add	r2, sp, #96	; 0x60
   12b72:	4658      	mov	r0, fp
   12b74:	f7ff fdf0 	bl	12758 <__sprint_r.part.0>
   12b78:	2800      	cmp	r0, #0
   12b7a:	f000 80a6 	beq.w	12cca <_vfiprintf_r+0x4fa>
   12b7e:	9b08      	ldr	r3, [sp, #32]
   12b80:	b11b      	cbz	r3, 12b8a <_vfiprintf_r+0x3ba>
   12b82:	9908      	ldr	r1, [sp, #32]
   12b84:	4658      	mov	r0, fp
   12b86:	f7f9 fbad 	bl	c2e4 <_free_r>
   12b8a:	ee18 3a10 	vmov	r3, s16
   12b8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12b92:	ee18 2a10 	vmov	r2, s16
   12b96:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12b98:	f012 0f01 	tst.w	r2, #1
   12b9c:	b29a      	uxth	r2, r3
   12b9e:	f000 80a0 	beq.w	12ce2 <_vfiprintf_r+0x512>
   12ba2:	0650      	lsls	r0, r2, #25
   12ba4:	f100 85b2 	bmi.w	1370c <_vfiprintf_r+0xf3c>
   12ba8:	9805      	ldr	r0, [sp, #20]
   12baa:	b045      	add	sp, #276	; 0x114
   12bac:	ecbd 8b02 	vpop	{d8}
   12bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bb4:	2900      	cmp	r1, #0
   12bb6:	d0cb      	beq.n	12b50 <_vfiprintf_r+0x380>
   12bb8:	2300      	movs	r3, #0
   12bba:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12bbe:	2301      	movs	r3, #1
   12bc0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12bc4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12bc8:	ac2b      	add	r4, sp, #172	; 0xac
   12bca:	2300      	movs	r3, #0
   12bcc:	9308      	str	r3, [sp, #32]
   12bce:	461f      	mov	r7, r3
   12bd0:	f016 0302 	ands.w	r3, r6, #2
   12bd4:	9309      	str	r3, [sp, #36]	; 0x24
   12bd6:	d002      	beq.n	12bde <_vfiprintf_r+0x40e>
   12bd8:	9b03      	ldr	r3, [sp, #12]
   12bda:	3302      	adds	r3, #2
   12bdc:	9303      	str	r3, [sp, #12]
   12bde:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12be2:	930a      	str	r3, [sp, #40]	; 0x28
   12be4:	d105      	bne.n	12bf2 <_vfiprintf_r+0x422>
   12be6:	9b06      	ldr	r3, [sp, #24]
   12be8:	9a03      	ldr	r2, [sp, #12]
   12bea:	1a9d      	subs	r5, r3, r2
   12bec:	2d00      	cmp	r5, #0
   12bee:	f300 827b 	bgt.w	130e8 <_vfiprintf_r+0x918>
   12bf2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12bf6:	1c41      	adds	r1, r0, #1
   12bf8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12bfc:	b182      	cbz	r2, 12c20 <_vfiprintf_r+0x450>
   12bfe:	2201      	movs	r2, #1
   12c00:	3301      	adds	r3, #1
   12c02:	f8c9 2004 	str.w	r2, [r9, #4]
   12c06:	2907      	cmp	r1, #7
   12c08:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12c0c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12c10:	f8c9 2000 	str.w	r2, [r9]
   12c14:	f300 824a 	bgt.w	130ac <_vfiprintf_r+0x8dc>
   12c18:	4608      	mov	r0, r1
   12c1a:	f109 0908 	add.w	r9, r9, #8
   12c1e:	3101      	adds	r1, #1
   12c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12c22:	b1e2      	cbz	r2, 12c5e <_vfiprintf_r+0x48e>
   12c24:	aa11      	add	r2, sp, #68	; 0x44
   12c26:	3302      	adds	r3, #2
   12c28:	f8c9 2000 	str.w	r2, [r9]
   12c2c:	2907      	cmp	r1, #7
   12c2e:	f04f 0202 	mov.w	r2, #2
   12c32:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12c36:	f8c9 2004 	str.w	r2, [r9, #4]
   12c3a:	f340 8250 	ble.w	130de <_vfiprintf_r+0x90e>
   12c3e:	2b00      	cmp	r3, #0
   12c40:	f000 8343 	beq.w	132ca <_vfiprintf_r+0xafa>
   12c44:	ee18 1a10 	vmov	r1, s16
   12c48:	aa18      	add	r2, sp, #96	; 0x60
   12c4a:	4658      	mov	r0, fp
   12c4c:	f7ff fd84 	bl	12758 <__sprint_r.part.0>
   12c50:	2800      	cmp	r0, #0
   12c52:	d194      	bne.n	12b7e <_vfiprintf_r+0x3ae>
   12c54:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12c58:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c5c:	1c41      	adds	r1, r0, #1
   12c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12c60:	2a80      	cmp	r2, #128	; 0x80
   12c62:	f000 8184 	beq.w	12f6e <_vfiprintf_r+0x79e>
   12c66:	9a04      	ldr	r2, [sp, #16]
   12c68:	1abd      	subs	r5, r7, r2
   12c6a:	2d00      	cmp	r5, #0
   12c6c:	f300 81d7 	bgt.w	1301e <_vfiprintf_r+0x84e>
   12c70:	9a04      	ldr	r2, [sp, #16]
   12c72:	f8c9 4000 	str.w	r4, [r9]
   12c76:	4413      	add	r3, r2
   12c78:	2907      	cmp	r1, #7
   12c7a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12c7e:	f8c9 2004 	str.w	r2, [r9, #4]
   12c82:	f340 816e 	ble.w	12f62 <_vfiprintf_r+0x792>
   12c86:	2b00      	cmp	r3, #0
   12c88:	f000 8275 	beq.w	13176 <_vfiprintf_r+0x9a6>
   12c8c:	ee18 1a10 	vmov	r1, s16
   12c90:	aa18      	add	r2, sp, #96	; 0x60
   12c92:	4658      	mov	r0, fp
   12c94:	f7ff fd60 	bl	12758 <__sprint_r.part.0>
   12c98:	2800      	cmp	r0, #0
   12c9a:	f47f af70 	bne.w	12b7e <_vfiprintf_r+0x3ae>
   12c9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12ca0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ca4:	0775      	lsls	r5, r6, #29
   12ca6:	d505      	bpl.n	12cb4 <_vfiprintf_r+0x4e4>
   12ca8:	9a06      	ldr	r2, [sp, #24]
   12caa:	9903      	ldr	r1, [sp, #12]
   12cac:	1a54      	subs	r4, r2, r1
   12cae:	2c00      	cmp	r4, #0
   12cb0:	f300 826b 	bgt.w	1318a <_vfiprintf_r+0x9ba>
   12cb4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12cb8:	9803      	ldr	r0, [sp, #12]
   12cba:	4281      	cmp	r1, r0
   12cbc:	bfac      	ite	ge
   12cbe:	1852      	addge	r2, r2, r1
   12cc0:	1812      	addlt	r2, r2, r0
   12cc2:	9205      	str	r2, [sp, #20]
   12cc4:	2b00      	cmp	r3, #0
   12cc6:	f47f af51 	bne.w	12b6c <_vfiprintf_r+0x39c>
   12cca:	9908      	ldr	r1, [sp, #32]
   12ccc:	2300      	movs	r3, #0
   12cce:	9319      	str	r3, [sp, #100]	; 0x64
   12cd0:	2900      	cmp	r1, #0
   12cd2:	f000 8149 	beq.w	12f68 <_vfiprintf_r+0x798>
   12cd6:	4658      	mov	r0, fp
   12cd8:	f7f9 fb04 	bl	c2e4 <_free_r>
   12cdc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ce0:	e5c1      	b.n	12866 <_vfiprintf_r+0x96>
   12ce2:	059c      	lsls	r4, r3, #22
   12ce4:	f53f af5d 	bmi.w	12ba2 <_vfiprintf_r+0x3d2>
   12ce8:	ee18 4a10 	vmov	r4, s16
   12cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12cee:	f7f8 ffb7 	bl	bc60 <__retarget_lock_release_recursive>
   12cf2:	89a2      	ldrh	r2, [r4, #12]
   12cf4:	e755      	b.n	12ba2 <_vfiprintf_r+0x3d2>
   12cf6:	06f0      	lsls	r0, r6, #27
   12cf8:	9a07      	ldr	r2, [sp, #28]
   12cfa:	f100 831f 	bmi.w	1333c <_vfiprintf_r+0xb6c>
   12cfe:	0671      	lsls	r1, r6, #25
   12d00:	f140 8319 	bpl.w	13336 <_vfiprintf_r+0xb66>
   12d04:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12d08:	9207      	str	r2, [sp, #28]
   12d0a:	17da      	asrs	r2, r3, #31
   12d0c:	4611      	mov	r1, r2
   12d0e:	e66e      	b.n	129ee <_vfiprintf_r+0x21e>
   12d10:	f016 0310 	ands.w	r3, r6, #16
   12d14:	9907      	ldr	r1, [sp, #28]
   12d16:	f040 8309 	bne.w	1332c <_vfiprintf_r+0xb5c>
   12d1a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   12d1e:	f000 8301 	beq.w	13324 <_vfiprintf_r+0xb54>
   12d22:	461a      	mov	r2, r3
   12d24:	f851 3b04 	ldr.w	r3, [r1], #4
   12d28:	9107      	str	r1, [sp, #28]
   12d2a:	b29b      	uxth	r3, r3
   12d2c:	e6c3      	b.n	12ab6 <_vfiprintf_r+0x2e6>
   12d2e:	9b07      	ldr	r3, [sp, #28]
   12d30:	461a      	mov	r2, r3
   12d32:	2300      	movs	r3, #0
   12d34:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12d38:	4613      	mov	r3, r2
   12d3a:	f853 4b04 	ldr.w	r4, [r3], #4
   12d3e:	9303      	str	r3, [sp, #12]
   12d40:	2c00      	cmp	r4, #0
   12d42:	f000 8412 	beq.w	1356a <_vfiprintf_r+0xd9a>
   12d46:	2953      	cmp	r1, #83	; 0x53
   12d48:	f000 8365 	beq.w	13416 <_vfiprintf_r+0xc46>
   12d4c:	f016 0510 	ands.w	r5, r6, #16
   12d50:	f040 8361 	bne.w	13416 <_vfiprintf_r+0xc46>
   12d54:	1c7b      	adds	r3, r7, #1
   12d56:	f000 84b3 	beq.w	136c0 <_vfiprintf_r+0xef0>
   12d5a:	463a      	mov	r2, r7
   12d5c:	4629      	mov	r1, r5
   12d5e:	4620      	mov	r0, r4
   12d60:	f7f9 f95e 	bl	c020 <memchr>
   12d64:	9008      	str	r0, [sp, #32]
   12d66:	2800      	cmp	r0, #0
   12d68:	f000 849f 	beq.w	136aa <_vfiprintf_r+0xeda>
   12d6c:	1b03      	subs	r3, r0, r4
   12d6e:	9a03      	ldr	r2, [sp, #12]
   12d70:	9304      	str	r3, [sp, #16]
   12d72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12d76:	462f      	mov	r7, r5
   12d78:	9207      	str	r2, [sp, #28]
   12d7a:	9303      	str	r3, [sp, #12]
   12d7c:	9508      	str	r5, [sp, #32]
   12d7e:	e657      	b.n	12a30 <_vfiprintf_r+0x260>
   12d80:	2943      	cmp	r1, #67	; 0x43
   12d82:	d002      	beq.n	12d8a <_vfiprintf_r+0x5ba>
   12d84:	06f5      	lsls	r5, r6, #27
   12d86:	f140 832d 	bpl.w	133e4 <_vfiprintf_r+0xc14>
   12d8a:	9d07      	ldr	r5, [sp, #28]
   12d8c:	2208      	movs	r2, #8
   12d8e:	2100      	movs	r1, #0
   12d90:	a816      	add	r0, sp, #88	; 0x58
   12d92:	ac2b      	add	r4, sp, #172	; 0xac
   12d94:	f7f8 fdfe 	bl	b994 <memset>
   12d98:	ab16      	add	r3, sp, #88	; 0x58
   12d9a:	f855 2b04 	ldr.w	r2, [r5], #4
   12d9e:	4621      	mov	r1, r4
   12da0:	4658      	mov	r0, fp
   12da2:	f7ff fa77 	bl	12294 <_wcrtomb_r>
   12da6:	4603      	mov	r3, r0
   12da8:	3301      	adds	r3, #1
   12daa:	9004      	str	r0, [sp, #16]
   12dac:	f000 84b3 	beq.w	13716 <_vfiprintf_r+0xf46>
   12db0:	9b04      	ldr	r3, [sp, #16]
   12db2:	9507      	str	r5, [sp, #28]
   12db4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12db8:	9303      	str	r3, [sp, #12]
   12dba:	2300      	movs	r3, #0
   12dbc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12dc0:	e703      	b.n	12bca <_vfiprintf_r+0x3fa>
   12dc2:	9b07      	ldr	r3, [sp, #28]
   12dc4:	f853 2b04 	ldr.w	r2, [r3], #4
   12dc8:	9206      	str	r2, [sp, #24]
   12dca:	2a00      	cmp	r2, #0
   12dcc:	f280 829c 	bge.w	13308 <_vfiprintf_r+0xb38>
   12dd0:	9a06      	ldr	r2, [sp, #24]
   12dd2:	4252      	negs	r2, r2
   12dd4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12dd8:	f898 1000 	ldrb.w	r1, [r8]
   12ddc:	f046 0604 	orr.w	r6, r6, #4
   12de0:	e569      	b.n	128b6 <_vfiprintf_r+0xe6>
   12de2:	f898 1000 	ldrb.w	r1, [r8]
   12de6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12dea:	e564      	b.n	128b6 <_vfiprintf_r+0xe6>
   12dec:	f898 1000 	ldrb.w	r1, [r8]
   12df0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12df4:	e55f      	b.n	128b6 <_vfiprintf_r+0xe6>
   12df6:	4642      	mov	r2, r8
   12df8:	f812 1b01 	ldrb.w	r1, [r2], #1
   12dfc:	292a      	cmp	r1, #42	; 0x2a
   12dfe:	f000 8496 	beq.w	1372e <_vfiprintf_r+0xf5e>
   12e02:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12e06:	2b09      	cmp	r3, #9
   12e08:	4690      	mov	r8, r2
   12e0a:	f04f 0700 	mov.w	r7, #0
   12e0e:	f63f ad54 	bhi.w	128ba <_vfiprintf_r+0xea>
   12e12:	f818 1b01 	ldrb.w	r1, [r8], #1
   12e16:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12e1a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   12e1e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12e22:	2b09      	cmp	r3, #9
   12e24:	d9f5      	bls.n	12e12 <_vfiprintf_r+0x642>
   12e26:	e548      	b.n	128ba <_vfiprintf_r+0xea>
   12e28:	f898 1000 	ldrb.w	r1, [r8]
   12e2c:	f046 0601 	orr.w	r6, r6, #1
   12e30:	e541      	b.n	128b6 <_vfiprintf_r+0xe6>
   12e32:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12e36:	2b00      	cmp	r3, #0
   12e38:	f47f adc2 	bne.w	129c0 <_vfiprintf_r+0x1f0>
   12e3c:	2320      	movs	r3, #32
   12e3e:	f898 1000 	ldrb.w	r1, [r8]
   12e42:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12e46:	e536      	b.n	128b6 <_vfiprintf_r+0xe6>
   12e48:	f898 1000 	ldrb.w	r1, [r8]
   12e4c:	296c      	cmp	r1, #108	; 0x6c
   12e4e:	bf03      	ittte	eq
   12e50:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12e54:	f046 0620 	orreq.w	r6, r6, #32
   12e58:	f108 0801 	addeq.w	r8, r8, #1
   12e5c:	f046 0610 	orrne.w	r6, r6, #16
   12e60:	e529      	b.n	128b6 <_vfiprintf_r+0xe6>
   12e62:	f898 1000 	ldrb.w	r1, [r8]
   12e66:	2968      	cmp	r1, #104	; 0x68
   12e68:	bf03      	ittte	eq
   12e6a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12e6e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12e72:	f108 0801 	addeq.w	r8, r8, #1
   12e76:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12e7a:	e51c      	b.n	128b6 <_vfiprintf_r+0xe6>
   12e7c:	f046 0310 	orr.w	r3, r6, #16
   12e80:	9303      	str	r3, [sp, #12]
   12e82:	9b03      	ldr	r3, [sp, #12]
   12e84:	f013 0220 	ands.w	r2, r3, #32
   12e88:	f000 8206 	beq.w	13298 <_vfiprintf_r+0xac8>
   12e8c:	9b07      	ldr	r3, [sp, #28]
   12e8e:	3307      	adds	r3, #7
   12e90:	f023 0307 	bic.w	r3, r3, #7
   12e94:	4619      	mov	r1, r3
   12e96:	685a      	ldr	r2, [r3, #4]
   12e98:	f851 3b08 	ldr.w	r3, [r1], #8
   12e9c:	9107      	str	r1, [sp, #28]
   12e9e:	2101      	movs	r1, #1
   12ea0:	e60d      	b.n	12abe <_vfiprintf_r+0x2ee>
   12ea2:	9a07      	ldr	r2, [sp, #28]
   12ea4:	f046 0302 	orr.w	r3, r6, #2
   12ea8:	9303      	str	r3, [sp, #12]
   12eaa:	f852 3b04 	ldr.w	r3, [r2], #4
   12eae:	9207      	str	r2, [sp, #28]
   12eb0:	f647 0230 	movw	r2, #30768	; 0x7830
   12eb4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12eb8:	4ab8      	ldr	r2, [pc, #736]	; (1319c <_vfiprintf_r+0x9cc>)
   12eba:	920c      	str	r2, [sp, #48]	; 0x30
   12ebc:	2102      	movs	r1, #2
   12ebe:	2200      	movs	r2, #0
   12ec0:	e5fd      	b.n	12abe <_vfiprintf_r+0x2ee>
   12ec2:	06b7      	lsls	r7, r6, #26
   12ec4:	f100 8248 	bmi.w	13358 <_vfiprintf_r+0xb88>
   12ec8:	06f5      	lsls	r5, r6, #27
   12eca:	f100 8346 	bmi.w	1355a <_vfiprintf_r+0xd8a>
   12ece:	0674      	lsls	r4, r6, #25
   12ed0:	f100 83d5 	bmi.w	1367e <_vfiprintf_r+0xeae>
   12ed4:	05b0      	lsls	r0, r6, #22
   12ed6:	f140 8340 	bpl.w	1355a <_vfiprintf_r+0xd8a>
   12eda:	9b07      	ldr	r3, [sp, #28]
   12edc:	9905      	ldr	r1, [sp, #20]
   12ede:	f853 2b04 	ldr.w	r2, [r3], #4
   12ee2:	9307      	str	r3, [sp, #28]
   12ee4:	7011      	strb	r1, [r2, #0]
   12ee6:	e4be      	b.n	12866 <_vfiprintf_r+0x96>
   12ee8:	9603      	str	r6, [sp, #12]
   12eea:	2901      	cmp	r1, #1
   12eec:	f43f ad8c 	beq.w	12a08 <_vfiprintf_r+0x238>
   12ef0:	2902      	cmp	r1, #2
   12ef2:	ac44      	add	r4, sp, #272	; 0x110
   12ef4:	d111      	bne.n	12f1a <_vfiprintf_r+0x74a>
   12ef6:	980c      	ldr	r0, [sp, #48]	; 0x30
   12ef8:	f003 010f 	and.w	r1, r3, #15
   12efc:	091b      	lsrs	r3, r3, #4
   12efe:	5c41      	ldrb	r1, [r0, r1]
   12f00:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12f04:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12f08:	0912      	lsrs	r2, r2, #4
   12f0a:	ea53 0102 	orrs.w	r1, r3, r2
   12f0e:	d1f3      	bne.n	12ef8 <_vfiprintf_r+0x728>
   12f10:	9e03      	ldr	r6, [sp, #12]
   12f12:	ab44      	add	r3, sp, #272	; 0x110
   12f14:	1b1b      	subs	r3, r3, r4
   12f16:	9304      	str	r3, [sp, #16]
   12f18:	e583      	b.n	12a22 <_vfiprintf_r+0x252>
   12f1a:	f003 0107 	and.w	r1, r3, #7
   12f1e:	08db      	lsrs	r3, r3, #3
   12f20:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12f24:	08d2      	lsrs	r2, r2, #3
   12f26:	3130      	adds	r1, #48	; 0x30
   12f28:	ea53 0502 	orrs.w	r5, r3, r2
   12f2c:	4620      	mov	r0, r4
   12f2e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12f32:	d1f2      	bne.n	12f1a <_vfiprintf_r+0x74a>
   12f34:	9e03      	ldr	r6, [sp, #12]
   12f36:	07f3      	lsls	r3, r6, #31
   12f38:	d5eb      	bpl.n	12f12 <_vfiprintf_r+0x742>
   12f3a:	2930      	cmp	r1, #48	; 0x30
   12f3c:	d0e8      	beq.n	12f10 <_vfiprintf_r+0x740>
   12f3e:	2330      	movs	r3, #48	; 0x30
   12f40:	3802      	subs	r0, #2
   12f42:	f804 3c01 	strb.w	r3, [r4, #-1]
   12f46:	ab44      	add	r3, sp, #272	; 0x110
   12f48:	1a1b      	subs	r3, r3, r0
   12f4a:	9e03      	ldr	r6, [sp, #12]
   12f4c:	9304      	str	r3, [sp, #16]
   12f4e:	4604      	mov	r4, r0
   12f50:	e567      	b.n	12a22 <_vfiprintf_r+0x252>
   12f52:	9b04      	ldr	r3, [sp, #16]
   12f54:	941b      	str	r4, [sp, #108]	; 0x6c
   12f56:	2201      	movs	r2, #1
   12f58:	931c      	str	r3, [sp, #112]	; 0x70
   12f5a:	931a      	str	r3, [sp, #104]	; 0x68
   12f5c:	9219      	str	r2, [sp, #100]	; 0x64
   12f5e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f62:	f109 0908 	add.w	r9, r9, #8
   12f66:	e69d      	b.n	12ca4 <_vfiprintf_r+0x4d4>
   12f68:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f6c:	e47b      	b.n	12866 <_vfiprintf_r+0x96>
   12f6e:	9a06      	ldr	r2, [sp, #24]
   12f70:	9d03      	ldr	r5, [sp, #12]
   12f72:	1b55      	subs	r5, r2, r5
   12f74:	2d00      	cmp	r5, #0
   12f76:	f77f ae76 	ble.w	12c66 <_vfiprintf_r+0x496>
   12f7a:	2d10      	cmp	r5, #16
   12f7c:	f340 83bb 	ble.w	136f6 <_vfiprintf_r+0xf26>
   12f80:	9409      	str	r4, [sp, #36]	; 0x24
   12f82:	ee18 4a10 	vmov	r4, s16
   12f86:	e007      	b.n	12f98 <_vfiprintf_r+0x7c8>
   12f88:	f100 0c02 	add.w	ip, r0, #2
   12f8c:	f109 0908 	add.w	r9, r9, #8
   12f90:	4610      	mov	r0, r2
   12f92:	3d10      	subs	r5, #16
   12f94:	2d10      	cmp	r5, #16
   12f96:	dd1e      	ble.n	12fd6 <_vfiprintf_r+0x806>
   12f98:	4981      	ldr	r1, [pc, #516]	; (131a0 <_vfiprintf_r+0x9d0>)
   12f9a:	f8c9 1000 	str.w	r1, [r9]
   12f9e:	1c42      	adds	r2, r0, #1
   12fa0:	3310      	adds	r3, #16
   12fa2:	2110      	movs	r1, #16
   12fa4:	2a07      	cmp	r2, #7
   12fa6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12faa:	f8c9 1004 	str.w	r1, [r9, #4]
   12fae:	ddeb      	ble.n	12f88 <_vfiprintf_r+0x7b8>
   12fb0:	aa18      	add	r2, sp, #96	; 0x60
   12fb2:	2b00      	cmp	r3, #0
   12fb4:	d074      	beq.n	130a0 <_vfiprintf_r+0x8d0>
   12fb6:	4621      	mov	r1, r4
   12fb8:	4658      	mov	r0, fp
   12fba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12fbe:	f7ff fbcb 	bl	12758 <__sprint_r.part.0>
   12fc2:	2800      	cmp	r0, #0
   12fc4:	f47f addb 	bne.w	12b7e <_vfiprintf_r+0x3ae>
   12fc8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12fcc:	3d10      	subs	r5, #16
   12fce:	2d10      	cmp	r5, #16
   12fd0:	f100 0c01 	add.w	ip, r0, #1
   12fd4:	dce0      	bgt.n	12f98 <_vfiprintf_r+0x7c8>
   12fd6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12fd8:	4a71      	ldr	r2, [pc, #452]	; (131a0 <_vfiprintf_r+0x9d0>)
   12fda:	f8c9 5004 	str.w	r5, [r9, #4]
   12fde:	442b      	add	r3, r5
   12fe0:	f1bc 0f07 	cmp.w	ip, #7
   12fe4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   12fe8:	f8c9 2000 	str.w	r2, [r9]
   12fec:	f340 8194 	ble.w	13318 <_vfiprintf_r+0xb48>
   12ff0:	2b00      	cmp	r3, #0
   12ff2:	f000 831f 	beq.w	13634 <_vfiprintf_r+0xe64>
   12ff6:	ee18 1a10 	vmov	r1, s16
   12ffa:	aa18      	add	r2, sp, #96	; 0x60
   12ffc:	4658      	mov	r0, fp
   12ffe:	f7ff fbab 	bl	12758 <__sprint_r.part.0>
   13002:	2800      	cmp	r0, #0
   13004:	f47f adbb 	bne.w	12b7e <_vfiprintf_r+0x3ae>
   13008:	9a04      	ldr	r2, [sp, #16]
   1300a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1300e:	1abd      	subs	r5, r7, r2
   13010:	2d00      	cmp	r5, #0
   13012:	f100 0101 	add.w	r1, r0, #1
   13016:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1301a:	f77f ae29 	ble.w	12c70 <_vfiprintf_r+0x4a0>
   1301e:	2d10      	cmp	r5, #16
   13020:	dd29      	ble.n	13076 <_vfiprintf_r+0x8a6>
   13022:	9409      	str	r4, [sp, #36]	; 0x24
   13024:	2710      	movs	r7, #16
   13026:	ee18 4a10 	vmov	r4, s16
   1302a:	e007      	b.n	1303c <_vfiprintf_r+0x86c>
   1302c:	f100 0c02 	add.w	ip, r0, #2
   13030:	f109 0908 	add.w	r9, r9, #8
   13034:	4610      	mov	r0, r2
   13036:	3d10      	subs	r5, #16
   13038:	2d10      	cmp	r5, #16
   1303a:	dd1a      	ble.n	13072 <_vfiprintf_r+0x8a2>
   1303c:	1c42      	adds	r2, r0, #1
   1303e:	4958      	ldr	r1, [pc, #352]	; (131a0 <_vfiprintf_r+0x9d0>)
   13040:	3310      	adds	r3, #16
   13042:	2a07      	cmp	r2, #7
   13044:	e9c9 1700 	strd	r1, r7, [r9]
   13048:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1304c:	ddee      	ble.n	1302c <_vfiprintf_r+0x85c>
   1304e:	aa18      	add	r2, sp, #96	; 0x60
   13050:	b303      	cbz	r3, 13094 <_vfiprintf_r+0x8c4>
   13052:	4621      	mov	r1, r4
   13054:	4658      	mov	r0, fp
   13056:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1305a:	f7ff fb7d 	bl	12758 <__sprint_r.part.0>
   1305e:	2800      	cmp	r0, #0
   13060:	f47f ad8d 	bne.w	12b7e <_vfiprintf_r+0x3ae>
   13064:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13068:	3d10      	subs	r5, #16
   1306a:	2d10      	cmp	r5, #16
   1306c:	f100 0c01 	add.w	ip, r0, #1
   13070:	dce4      	bgt.n	1303c <_vfiprintf_r+0x86c>
   13072:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13074:	4661      	mov	r1, ip
   13076:	4a4a      	ldr	r2, [pc, #296]	; (131a0 <_vfiprintf_r+0x9d0>)
   13078:	f8c9 5004 	str.w	r5, [r9, #4]
   1307c:	442b      	add	r3, r5
   1307e:	2907      	cmp	r1, #7
   13080:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13084:	f8c9 2000 	str.w	r2, [r9]
   13088:	f300 80e7 	bgt.w	1325a <_vfiprintf_r+0xa8a>
   1308c:	f109 0908 	add.w	r9, r9, #8
   13090:	3101      	adds	r1, #1
   13092:	e5ed      	b.n	12c70 <_vfiprintf_r+0x4a0>
   13094:	f04f 0c01 	mov.w	ip, #1
   13098:	4618      	mov	r0, r3
   1309a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1309e:	e7ca      	b.n	13036 <_vfiprintf_r+0x866>
   130a0:	f04f 0c01 	mov.w	ip, #1
   130a4:	4618      	mov	r0, r3
   130a6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130aa:	e772      	b.n	12f92 <_vfiprintf_r+0x7c2>
   130ac:	2b00      	cmp	r3, #0
   130ae:	f000 8104 	beq.w	132ba <_vfiprintf_r+0xaea>
   130b2:	ee18 1a10 	vmov	r1, s16
   130b6:	aa18      	add	r2, sp, #96	; 0x60
   130b8:	4658      	mov	r0, fp
   130ba:	f7ff fb4d 	bl	12758 <__sprint_r.part.0>
   130be:	2800      	cmp	r0, #0
   130c0:	f47f ad5d 	bne.w	12b7e <_vfiprintf_r+0x3ae>
   130c4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   130c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130cc:	1c41      	adds	r1, r0, #1
   130ce:	e5a7      	b.n	12c20 <_vfiprintf_r+0x450>
   130d0:	2302      	movs	r3, #2
   130d2:	aa11      	add	r2, sp, #68	; 0x44
   130d4:	931c      	str	r3, [sp, #112]	; 0x70
   130d6:	921b      	str	r2, [sp, #108]	; 0x6c
   130d8:	2101      	movs	r1, #1
   130da:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130de:	4608      	mov	r0, r1
   130e0:	f109 0908 	add.w	r9, r9, #8
   130e4:	1c41      	adds	r1, r0, #1
   130e6:	e5ba      	b.n	12c5e <_vfiprintf_r+0x48e>
   130e8:	2d10      	cmp	r5, #16
   130ea:	f340 82e5 	ble.w	136b8 <_vfiprintf_r+0xee8>
   130ee:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   130f2:	940f      	str	r4, [sp, #60]	; 0x3c
   130f4:	4608      	mov	r0, r1
   130f6:	ee18 4a10 	vmov	r4, s16
   130fa:	e007      	b.n	1310c <_vfiprintf_r+0x93c>
   130fc:	f100 0c02 	add.w	ip, r0, #2
   13100:	f109 0908 	add.w	r9, r9, #8
   13104:	4610      	mov	r0, r2
   13106:	3d10      	subs	r5, #16
   13108:	2d10      	cmp	r5, #16
   1310a:	dd1d      	ble.n	13148 <_vfiprintf_r+0x978>
   1310c:	4925      	ldr	r1, [pc, #148]	; (131a4 <_vfiprintf_r+0x9d4>)
   1310e:	f8c9 1000 	str.w	r1, [r9]
   13112:	1c42      	adds	r2, r0, #1
   13114:	3310      	adds	r3, #16
   13116:	2110      	movs	r1, #16
   13118:	2a07      	cmp	r2, #7
   1311a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1311e:	f8c9 1004 	str.w	r1, [r9, #4]
   13122:	ddeb      	ble.n	130fc <_vfiprintf_r+0x92c>
   13124:	aa18      	add	r2, sp, #96	; 0x60
   13126:	b303      	cbz	r3, 1316a <_vfiprintf_r+0x99a>
   13128:	4621      	mov	r1, r4
   1312a:	4658      	mov	r0, fp
   1312c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13130:	f7ff fb12 	bl	12758 <__sprint_r.part.0>
   13134:	2800      	cmp	r0, #0
   13136:	f47f ad22 	bne.w	12b7e <_vfiprintf_r+0x3ae>
   1313a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1313e:	3d10      	subs	r5, #16
   13140:	2d10      	cmp	r5, #16
   13142:	f100 0c01 	add.w	ip, r0, #1
   13146:	dce1      	bgt.n	1310c <_vfiprintf_r+0x93c>
   13148:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1314a:	4660      	mov	r0, ip
   1314c:	4a15      	ldr	r2, [pc, #84]	; (131a4 <_vfiprintf_r+0x9d4>)
   1314e:	f8c9 5004 	str.w	r5, [r9, #4]
   13152:	442b      	add	r3, r5
   13154:	2807      	cmp	r0, #7
   13156:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1315a:	f8c9 2000 	str.w	r2, [r9]
   1315e:	f300 80c1 	bgt.w	132e4 <_vfiprintf_r+0xb14>
   13162:	f109 0908 	add.w	r9, r9, #8
   13166:	1c41      	adds	r1, r0, #1
   13168:	e546      	b.n	12bf8 <_vfiprintf_r+0x428>
   1316a:	4618      	mov	r0, r3
   1316c:	f04f 0c01 	mov.w	ip, #1
   13170:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13174:	e7c7      	b.n	13106 <_vfiprintf_r+0x936>
   13176:	0776      	lsls	r6, r6, #29
   13178:	9319      	str	r3, [sp, #100]	; 0x64
   1317a:	d553      	bpl.n	13224 <_vfiprintf_r+0xa54>
   1317c:	9a06      	ldr	r2, [sp, #24]
   1317e:	9903      	ldr	r1, [sp, #12]
   13180:	1a54      	subs	r4, r2, r1
   13182:	2c00      	cmp	r4, #0
   13184:	dd4e      	ble.n	13224 <_vfiprintf_r+0xa54>
   13186:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1318a:	2c10      	cmp	r4, #16
   1318c:	f340 82b0 	ble.w	136f0 <_vfiprintf_r+0xf20>
   13190:	9919      	ldr	r1, [sp, #100]	; 0x64
   13192:	ee18 6a10 	vmov	r6, s16
   13196:	2510      	movs	r5, #16
   13198:	e00d      	b.n	131b6 <_vfiprintf_r+0x9e6>
   1319a:	bf00      	nop
   1319c:	20000c40 	.word	0x20000c40
   131a0:	20008494 	.word	0x20008494
   131a4:	200026fc 	.word	0x200026fc
   131a8:	1c88      	adds	r0, r1, #2
   131aa:	f109 0908 	add.w	r9, r9, #8
   131ae:	4611      	mov	r1, r2
   131b0:	3c10      	subs	r4, #16
   131b2:	2c10      	cmp	r4, #16
   131b4:	dd1a      	ble.n	131ec <_vfiprintf_r+0xa1c>
   131b6:	1c4a      	adds	r2, r1, #1
   131b8:	48b3      	ldr	r0, [pc, #716]	; (13488 <_vfiprintf_r+0xcb8>)
   131ba:	3310      	adds	r3, #16
   131bc:	2a07      	cmp	r2, #7
   131be:	e9c9 0500 	strd	r0, r5, [r9]
   131c2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   131c6:	ddef      	ble.n	131a8 <_vfiprintf_r+0x9d8>
   131c8:	aa18      	add	r2, sp, #96	; 0x60
   131ca:	b333      	cbz	r3, 1321a <_vfiprintf_r+0xa4a>
   131cc:	4631      	mov	r1, r6
   131ce:	4658      	mov	r0, fp
   131d0:	f7ff fac2 	bl	12758 <__sprint_r.part.0>
   131d4:	2800      	cmp	r0, #0
   131d6:	f47f acd2 	bne.w	12b7e <_vfiprintf_r+0x3ae>
   131da:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   131de:	3c10      	subs	r4, #16
   131e0:	2c10      	cmp	r4, #16
   131e2:	f101 0001 	add.w	r0, r1, #1
   131e6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131ea:	dce4      	bgt.n	131b6 <_vfiprintf_r+0x9e6>
   131ec:	4aa6      	ldr	r2, [pc, #664]	; (13488 <_vfiprintf_r+0xcb8>)
   131ee:	f8c9 4004 	str.w	r4, [r9, #4]
   131f2:	4423      	add	r3, r4
   131f4:	2807      	cmp	r0, #7
   131f6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   131fa:	f8c9 2000 	str.w	r2, [r9]
   131fe:	f77f ad59 	ble.w	12cb4 <_vfiprintf_r+0x4e4>
   13202:	b17b      	cbz	r3, 13224 <_vfiprintf_r+0xa54>
   13204:	ee18 1a10 	vmov	r1, s16
   13208:	aa18      	add	r2, sp, #96	; 0x60
   1320a:	4658      	mov	r0, fp
   1320c:	f7ff faa4 	bl	12758 <__sprint_r.part.0>
   13210:	2800      	cmp	r0, #0
   13212:	f47f acb4 	bne.w	12b7e <_vfiprintf_r+0x3ae>
   13216:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13218:	e54c      	b.n	12cb4 <_vfiprintf_r+0x4e4>
   1321a:	2001      	movs	r0, #1
   1321c:	4619      	mov	r1, r3
   1321e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13222:	e7c5      	b.n	131b0 <_vfiprintf_r+0x9e0>
   13224:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   13228:	9903      	ldr	r1, [sp, #12]
   1322a:	428a      	cmp	r2, r1
   1322c:	bfac      	ite	ge
   1322e:	189b      	addge	r3, r3, r2
   13230:	185b      	addlt	r3, r3, r1
   13232:	9305      	str	r3, [sp, #20]
   13234:	e549      	b.n	12cca <_vfiprintf_r+0x4fa>
   13236:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1323a:	058f      	lsls	r7, r1, #22
   1323c:	ee18 3a10 	vmov	r3, s16
   13240:	b28a      	uxth	r2, r1
   13242:	f53f aae8 	bmi.w	12816 <_vfiprintf_r+0x46>
   13246:	ee18 5a10 	vmov	r5, s16
   1324a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1324c:	f7f8 fd06 	bl	bc5c <__retarget_lock_acquire_recursive>
   13250:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   13254:	b28a      	uxth	r2, r1
   13256:	f7ff bade 	b.w	12816 <_vfiprintf_r+0x46>
   1325a:	2b00      	cmp	r3, #0
   1325c:	f43f ae79 	beq.w	12f52 <_vfiprintf_r+0x782>
   13260:	ee18 1a10 	vmov	r1, s16
   13264:	aa18      	add	r2, sp, #96	; 0x60
   13266:	4658      	mov	r0, fp
   13268:	f7ff fa76 	bl	12758 <__sprint_r.part.0>
   1326c:	2800      	cmp	r0, #0
   1326e:	f47f ac86 	bne.w	12b7e <_vfiprintf_r+0x3ae>
   13272:	9919      	ldr	r1, [sp, #100]	; 0x64
   13274:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13276:	3101      	adds	r1, #1
   13278:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1327c:	e4f8      	b.n	12c70 <_vfiprintf_r+0x4a0>
   1327e:	9219      	str	r2, [sp, #100]	; 0x64
   13280:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13284:	e45e      	b.n	12b44 <_vfiprintf_r+0x374>
   13286:	2f00      	cmp	r7, #0
   13288:	f47f abc3 	bne.w	12a12 <_vfiprintf_r+0x242>
   1328c:	9e03      	ldr	r6, [sp, #12]
   1328e:	2700      	movs	r7, #0
   13290:	9704      	str	r7, [sp, #16]
   13292:	ac44      	add	r4, sp, #272	; 0x110
   13294:	f7ff bbc5 	b.w	12a22 <_vfiprintf_r+0x252>
   13298:	9b03      	ldr	r3, [sp, #12]
   1329a:	f013 0310 	ands.w	r3, r3, #16
   1329e:	d154      	bne.n	1334a <_vfiprintf_r+0xb7a>
   132a0:	9a03      	ldr	r2, [sp, #12]
   132a2:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   132a6:	f000 816b 	beq.w	13580 <_vfiprintf_r+0xdb0>
   132aa:	9907      	ldr	r1, [sp, #28]
   132ac:	461a      	mov	r2, r3
   132ae:	f851 3b04 	ldr.w	r3, [r1], #4
   132b2:	9107      	str	r1, [sp, #28]
   132b4:	b29b      	uxth	r3, r3
   132b6:	2101      	movs	r1, #1
   132b8:	e401      	b.n	12abe <_vfiprintf_r+0x2ee>
   132ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   132bc:	2a00      	cmp	r2, #0
   132be:	d164      	bne.n	1338a <_vfiprintf_r+0xbba>
   132c0:	4618      	mov	r0, r3
   132c2:	2101      	movs	r1, #1
   132c4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132c8:	e4c9      	b.n	12c5e <_vfiprintf_r+0x48e>
   132ca:	2101      	movs	r1, #1
   132cc:	4618      	mov	r0, r3
   132ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132d2:	e4c4      	b.n	12c5e <_vfiprintf_r+0x48e>
   132d4:	425b      	negs	r3, r3
   132d6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   132da:	9603      	str	r6, [sp, #12]
   132dc:	202d      	movs	r0, #45	; 0x2d
   132de:	2101      	movs	r1, #1
   132e0:	f7ff bbee 	b.w	12ac0 <_vfiprintf_r+0x2f0>
   132e4:	2b00      	cmp	r3, #0
   132e6:	f000 8088 	beq.w	133fa <_vfiprintf_r+0xc2a>
   132ea:	ee18 1a10 	vmov	r1, s16
   132ee:	aa18      	add	r2, sp, #96	; 0x60
   132f0:	4658      	mov	r0, fp
   132f2:	f7ff fa31 	bl	12758 <__sprint_r.part.0>
   132f6:	2800      	cmp	r0, #0
   132f8:	f47f ac41 	bne.w	12b7e <_vfiprintf_r+0x3ae>
   132fc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13300:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13304:	1c41      	adds	r1, r0, #1
   13306:	e477      	b.n	12bf8 <_vfiprintf_r+0x428>
   13308:	f898 1000 	ldrb.w	r1, [r8]
   1330c:	9307      	str	r3, [sp, #28]
   1330e:	f7ff bad2 	b.w	128b6 <_vfiprintf_r+0xe6>
   13312:	ac44      	add	r4, sp, #272	; 0x110
   13314:	f7ff bb85 	b.w	12a22 <_vfiprintf_r+0x252>
   13318:	f109 0908 	add.w	r9, r9, #8
   1331c:	f10c 0101 	add.w	r1, ip, #1
   13320:	4660      	mov	r0, ip
   13322:	e4a0      	b.n	12c66 <_vfiprintf_r+0x496>
   13324:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   13328:	f040 8197 	bne.w	1365a <_vfiprintf_r+0xe8a>
   1332c:	f851 3b04 	ldr.w	r3, [r1], #4
   13330:	9107      	str	r1, [sp, #28]
   13332:	f7ff bbc0 	b.w	12ab6 <_vfiprintf_r+0x2e6>
   13336:	05b3      	lsls	r3, r6, #22
   13338:	f100 8188 	bmi.w	1364c <_vfiprintf_r+0xe7c>
   1333c:	f852 3b04 	ldr.w	r3, [r2], #4
   13340:	9207      	str	r2, [sp, #28]
   13342:	17da      	asrs	r2, r3, #31
   13344:	4611      	mov	r1, r2
   13346:	f7ff bb52 	b.w	129ee <_vfiprintf_r+0x21e>
   1334a:	9907      	ldr	r1, [sp, #28]
   1334c:	f851 3b04 	ldr.w	r3, [r1], #4
   13350:	9107      	str	r1, [sp, #28]
   13352:	2101      	movs	r1, #1
   13354:	f7ff bbb3 	b.w	12abe <_vfiprintf_r+0x2ee>
   13358:	9b07      	ldr	r3, [sp, #28]
   1335a:	9805      	ldr	r0, [sp, #20]
   1335c:	f853 1b04 	ldr.w	r1, [r3], #4
   13360:	9307      	str	r3, [sp, #28]
   13362:	17c2      	asrs	r2, r0, #31
   13364:	e9c1 0200 	strd	r0, r2, [r1]
   13368:	f7ff ba7d 	b.w	12866 <_vfiprintf_r+0x96>
   1336c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1336e:	2b00      	cmp	r3, #0
   13370:	f43f ab26 	beq.w	129c0 <_vfiprintf_r+0x1f0>
   13374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13376:	781b      	ldrb	r3, [r3, #0]
   13378:	2b00      	cmp	r3, #0
   1337a:	f43f ab21 	beq.w	129c0 <_vfiprintf_r+0x1f0>
   1337e:	f898 1000 	ldrb.w	r1, [r8]
   13382:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   13386:	f7ff ba96 	b.w	128b6 <_vfiprintf_r+0xe6>
   1338a:	2302      	movs	r3, #2
   1338c:	aa11      	add	r2, sp, #68	; 0x44
   1338e:	931c      	str	r3, [sp, #112]	; 0x70
   13390:	921b      	str	r2, [sp, #108]	; 0x6c
   13392:	2001      	movs	r0, #1
   13394:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13398:	e6a2      	b.n	130e0 <_vfiprintf_r+0x910>
   1339a:	9603      	str	r6, [sp, #12]
   1339c:	e571      	b.n	12e82 <_vfiprintf_r+0x6b2>
   1339e:	4b3b      	ldr	r3, [pc, #236]	; (1348c <_vfiprintf_r+0xcbc>)
   133a0:	930c      	str	r3, [sp, #48]	; 0x30
   133a2:	f016 0220 	ands.w	r2, r6, #32
   133a6:	d059      	beq.n	1345c <_vfiprintf_r+0xc8c>
   133a8:	9b07      	ldr	r3, [sp, #28]
   133aa:	3307      	adds	r3, #7
   133ac:	f023 0307 	bic.w	r3, r3, #7
   133b0:	4618      	mov	r0, r3
   133b2:	685a      	ldr	r2, [r3, #4]
   133b4:	f850 3b08 	ldr.w	r3, [r0], #8
   133b8:	9007      	str	r0, [sp, #28]
   133ba:	07f4      	lsls	r4, r6, #31
   133bc:	d509      	bpl.n	133d2 <_vfiprintf_r+0xc02>
   133be:	ea53 0002 	orrs.w	r0, r3, r2
   133c2:	d006      	beq.n	133d2 <_vfiprintf_r+0xc02>
   133c4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   133c8:	2130      	movs	r1, #48	; 0x30
   133ca:	f046 0602 	orr.w	r6, r6, #2
   133ce:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   133d2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   133d6:	9103      	str	r1, [sp, #12]
   133d8:	2102      	movs	r1, #2
   133da:	f7ff bb70 	b.w	12abe <_vfiprintf_r+0x2ee>
   133de:	4b2c      	ldr	r3, [pc, #176]	; (13490 <_vfiprintf_r+0xcc0>)
   133e0:	930c      	str	r3, [sp, #48]	; 0x30
   133e2:	e7de      	b.n	133a2 <_vfiprintf_r+0xbd2>
   133e4:	9b07      	ldr	r3, [sp, #28]
   133e6:	2101      	movs	r1, #1
   133e8:	f853 2b04 	ldr.w	r2, [r3], #4
   133ec:	9103      	str	r1, [sp, #12]
   133ee:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   133f2:	9307      	str	r3, [sp, #28]
   133f4:	9104      	str	r1, [sp, #16]
   133f6:	ac2b      	add	r4, sp, #172	; 0xac
   133f8:	e4df      	b.n	12dba <_vfiprintf_r+0x5ea>
   133fa:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   133fe:	2a00      	cmp	r2, #0
   13400:	f040 8132 	bne.w	13668 <_vfiprintf_r+0xe98>
   13404:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13406:	2a00      	cmp	r2, #0
   13408:	f47f ae62 	bne.w	130d0 <_vfiprintf_r+0x900>
   1340c:	4618      	mov	r0, r3
   1340e:	2101      	movs	r1, #1
   13410:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13414:	e427      	b.n	12c66 <_vfiprintf_r+0x496>
   13416:	2100      	movs	r1, #0
   13418:	2208      	movs	r2, #8
   1341a:	a816      	add	r0, sp, #88	; 0x58
   1341c:	9413      	str	r4, [sp, #76]	; 0x4c
   1341e:	f7f8 fab9 	bl	b994 <memset>
   13422:	1c79      	adds	r1, r7, #1
   13424:	f000 80bc 	beq.w	135a0 <_vfiprintf_r+0xdd0>
   13428:	2500      	movs	r5, #0
   1342a:	9407      	str	r4, [sp, #28]
   1342c:	462c      	mov	r4, r5
   1342e:	e00c      	b.n	1344a <_vfiprintf_r+0xc7a>
   13430:	a92b      	add	r1, sp, #172	; 0xac
   13432:	4658      	mov	r0, fp
   13434:	f7fe ff2e 	bl	12294 <_wcrtomb_r>
   13438:	1c42      	adds	r2, r0, #1
   1343a:	4420      	add	r0, r4
   1343c:	f000 816b 	beq.w	13716 <_vfiprintf_r+0xf46>
   13440:	42b8      	cmp	r0, r7
   13442:	dc08      	bgt.n	13456 <_vfiprintf_r+0xc86>
   13444:	f000 8170 	beq.w	13728 <_vfiprintf_r+0xf58>
   13448:	4604      	mov	r4, r0
   1344a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1344c:	5952      	ldr	r2, [r2, r5]
   1344e:	ab16      	add	r3, sp, #88	; 0x58
   13450:	3504      	adds	r5, #4
   13452:	2a00      	cmp	r2, #0
   13454:	d1ec      	bne.n	13430 <_vfiprintf_r+0xc60>
   13456:	9404      	str	r4, [sp, #16]
   13458:	9c07      	ldr	r4, [sp, #28]
   1345a:	e0af      	b.n	135bc <_vfiprintf_r+0xdec>
   1345c:	f016 0310 	ands.w	r3, r6, #16
   13460:	9807      	ldr	r0, [sp, #28]
   13462:	d10c      	bne.n	1347e <_vfiprintf_r+0xcae>
   13464:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   13468:	d005      	beq.n	13476 <_vfiprintf_r+0xca6>
   1346a:	461a      	mov	r2, r3
   1346c:	f850 3b04 	ldr.w	r3, [r0], #4
   13470:	9007      	str	r0, [sp, #28]
   13472:	b29b      	uxth	r3, r3
   13474:	e7a1      	b.n	133ba <_vfiprintf_r+0xbea>
   13476:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1347a:	f040 80e1 	bne.w	13640 <_vfiprintf_r+0xe70>
   1347e:	f850 3b04 	ldr.w	r3, [r0], #4
   13482:	9007      	str	r0, [sp, #28]
   13484:	e799      	b.n	133ba <_vfiprintf_r+0xbea>
   13486:	bf00      	nop
   13488:	200026fc 	.word	0x200026fc
   1348c:	20000c40 	.word	0x20000c40
   13490:	20000c54 	.word	0x20000c54
   13494:	9903      	ldr	r1, [sp, #12]
   13496:	9704      	str	r7, [sp, #16]
   13498:	ac44      	add	r4, sp, #272	; 0x110
   1349a:	469e      	mov	lr, r3
   1349c:	ee08 ba90 	vmov	s17, fp
   134a0:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   134a4:	f04f 0c00 	mov.w	ip, #0
   134a8:	4623      	mov	r3, r4
   134aa:	e006      	b.n	134ba <_vfiprintf_r+0xcea>
   134ac:	f1be 0f0a 	cmp.w	lr, #10
   134b0:	f172 0200 	sbcs.w	r2, r2, #0
   134b4:	d339      	bcc.n	1352a <_vfiprintf_r+0xd5a>
   134b6:	46a6      	mov	lr, r4
   134b8:	462a      	mov	r2, r5
   134ba:	49a6      	ldr	r1, [pc, #664]	; (13754 <_vfiprintf_r+0xf84>)
   134bc:	eb1e 0002 	adds.w	r0, lr, r2
   134c0:	f140 0000 	adc.w	r0, r0, #0
   134c4:	460f      	mov	r7, r1
   134c6:	fba1 1400 	umull	r1, r4, r1, r0
   134ca:	f024 0103 	bic.w	r1, r4, #3
   134ce:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   134d2:	1a40      	subs	r0, r0, r1
   134d4:	ebbe 0100 	subs.w	r1, lr, r0
   134d8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   134dc:	f162 0400 	sbc.w	r4, r2, #0
   134e0:	fb05 f501 	mul.w	r5, r5, r1
   134e4:	fb07 5504 	mla	r5, r7, r4, r5
   134e8:	fba1 4107 	umull	r4, r1, r1, r7
   134ec:	440d      	add	r5, r1
   134ee:	2705      	movs	r7, #5
   134f0:	f004 0101 	and.w	r1, r4, #1
   134f4:	fba1 1b07 	umull	r1, fp, r1, r7
   134f8:	1809      	adds	r1, r1, r0
   134fa:	0864      	lsrs	r4, r4, #1
   134fc:	3130      	adds	r1, #48	; 0x30
   134fe:	f803 1c01 	strb.w	r1, [r3, #-1]
   13502:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   13506:	f10c 0c01 	add.w	ip, ip, #1
   1350a:	3b01      	subs	r3, #1
   1350c:	086d      	lsrs	r5, r5, #1
   1350e:	2e00      	cmp	r6, #0
   13510:	d0cc      	beq.n	134ac <_vfiprintf_r+0xcdc>
   13512:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13514:	7809      	ldrb	r1, [r1, #0]
   13516:	4561      	cmp	r1, ip
   13518:	d1c8      	bne.n	134ac <_vfiprintf_r+0xcdc>
   1351a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1351e:	d0c5      	beq.n	134ac <_vfiprintf_r+0xcdc>
   13520:	f1be 0f0a 	cmp.w	lr, #10
   13524:	f172 0200 	sbcs.w	r2, r2, #0
   13528:	d26c      	bcs.n	13604 <_vfiprintf_r+0xe34>
   1352a:	461c      	mov	r4, r3
   1352c:	ab44      	add	r3, sp, #272	; 0x110
   1352e:	1b1b      	subs	r3, r3, r4
   13530:	9f04      	ldr	r7, [sp, #16]
   13532:	9e03      	ldr	r6, [sp, #12]
   13534:	9304      	str	r3, [sp, #16]
   13536:	ee18 ba90 	vmov	fp, s17
   1353a:	f7ff ba72 	b.w	12a22 <_vfiprintf_r+0x252>
   1353e:	9603      	str	r6, [sp, #12]
   13540:	f7ff ba62 	b.w	12a08 <_vfiprintf_r+0x238>
   13544:	4658      	mov	r0, fp
   13546:	f7f8 f831 	bl	b5ac <__sinit>
   1354a:	f7ff b95b 	b.w	12804 <_vfiprintf_r+0x34>
   1354e:	2901      	cmp	r1, #1
   13550:	9603      	str	r6, [sp, #12]
   13552:	f47f accd 	bne.w	12ef0 <_vfiprintf_r+0x720>
   13556:	f7ff ba5c 	b.w	12a12 <_vfiprintf_r+0x242>
   1355a:	9b07      	ldr	r3, [sp, #28]
   1355c:	9905      	ldr	r1, [sp, #20]
   1355e:	f853 2b04 	ldr.w	r2, [r3], #4
   13562:	6011      	str	r1, [r2, #0]
   13564:	9307      	str	r3, [sp, #28]
   13566:	f7ff b97e 	b.w	12866 <_vfiprintf_r+0x96>
   1356a:	2f06      	cmp	r7, #6
   1356c:	463b      	mov	r3, r7
   1356e:	9a03      	ldr	r2, [sp, #12]
   13570:	4c79      	ldr	r4, [pc, #484]	; (13758 <_vfiprintf_r+0xf88>)
   13572:	9207      	str	r2, [sp, #28]
   13574:	bf28      	it	cs
   13576:	2306      	movcs	r3, #6
   13578:	9304      	str	r3, [sp, #16]
   1357a:	9303      	str	r3, [sp, #12]
   1357c:	f7ff bb25 	b.w	12bca <_vfiprintf_r+0x3fa>
   13580:	9b03      	ldr	r3, [sp, #12]
   13582:	9907      	ldr	r1, [sp, #28]
   13584:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   13588:	bf14      	ite	ne
   1358a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1358e:	f851 3b04 	ldreq.w	r3, [r1], #4
   13592:	9107      	str	r1, [sp, #28]
   13594:	bf1c      	itt	ne
   13596:	4602      	movne	r2, r0
   13598:	b2db      	uxtbne	r3, r3
   1359a:	2101      	movs	r1, #1
   1359c:	f7ff ba8f 	b.w	12abe <_vfiprintf_r+0x2ee>
   135a0:	ab16      	add	r3, sp, #88	; 0x58
   135a2:	9300      	str	r3, [sp, #0]
   135a4:	2300      	movs	r3, #0
   135a6:	4619      	mov	r1, r3
   135a8:	aa13      	add	r2, sp, #76	; 0x4c
   135aa:	4658      	mov	r0, fp
   135ac:	f7fe fe98 	bl	122e0 <_wcsrtombs_r>
   135b0:	4603      	mov	r3, r0
   135b2:	3301      	adds	r3, #1
   135b4:	9004      	str	r0, [sp, #16]
   135b6:	f000 80ae 	beq.w	13716 <_vfiprintf_r+0xf46>
   135ba:	9413      	str	r4, [sp, #76]	; 0x4c
   135bc:	9b04      	ldr	r3, [sp, #16]
   135be:	2b00      	cmp	r3, #0
   135c0:	d030      	beq.n	13624 <_vfiprintf_r+0xe54>
   135c2:	2b63      	cmp	r3, #99	; 0x63
   135c4:	dc63      	bgt.n	1368e <_vfiprintf_r+0xebe>
   135c6:	2300      	movs	r3, #0
   135c8:	9308      	str	r3, [sp, #32]
   135ca:	ac2b      	add	r4, sp, #172	; 0xac
   135cc:	2208      	movs	r2, #8
   135ce:	2100      	movs	r1, #0
   135d0:	a816      	add	r0, sp, #88	; 0x58
   135d2:	f7f8 f9df 	bl	b994 <memset>
   135d6:	9d04      	ldr	r5, [sp, #16]
   135d8:	ab16      	add	r3, sp, #88	; 0x58
   135da:	9300      	str	r3, [sp, #0]
   135dc:	aa13      	add	r2, sp, #76	; 0x4c
   135de:	462b      	mov	r3, r5
   135e0:	4621      	mov	r1, r4
   135e2:	4658      	mov	r0, fp
   135e4:	f7fe fe7c 	bl	122e0 <_wcsrtombs_r>
   135e8:	4285      	cmp	r5, r0
   135ea:	f040 80ab 	bne.w	13744 <_vfiprintf_r+0xf74>
   135ee:	9b03      	ldr	r3, [sp, #12]
   135f0:	9a04      	ldr	r2, [sp, #16]
   135f2:	9307      	str	r3, [sp, #28]
   135f4:	2300      	movs	r3, #0
   135f6:	54a3      	strb	r3, [r4, r2]
   135f8:	461f      	mov	r7, r3
   135fa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   135fe:	9303      	str	r3, [sp, #12]
   13600:	f7ff ba16 	b.w	12a30 <_vfiprintf_r+0x260>
   13604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13606:	990d      	ldr	r1, [sp, #52]	; 0x34
   13608:	1a9b      	subs	r3, r3, r2
   1360a:	4618      	mov	r0, r3
   1360c:	9308      	str	r3, [sp, #32]
   1360e:	f7f8 fa59 	bl	bac4 <strncpy>
   13612:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13614:	9b08      	ldr	r3, [sp, #32]
   13616:	784a      	ldrb	r2, [r1, #1]
   13618:	b10a      	cbz	r2, 1361e <_vfiprintf_r+0xe4e>
   1361a:	3101      	adds	r1, #1
   1361c:	910b      	str	r1, [sp, #44]	; 0x2c
   1361e:	f04f 0c00 	mov.w	ip, #0
   13622:	e748      	b.n	134b6 <_vfiprintf_r+0xce6>
   13624:	9b03      	ldr	r3, [sp, #12]
   13626:	9307      	str	r3, [sp, #28]
   13628:	9b04      	ldr	r3, [sp, #16]
   1362a:	9303      	str	r3, [sp, #12]
   1362c:	461f      	mov	r7, r3
   1362e:	9308      	str	r3, [sp, #32]
   13630:	f7ff b9fe 	b.w	12a30 <_vfiprintf_r+0x260>
   13634:	2101      	movs	r1, #1
   13636:	4618      	mov	r0, r3
   13638:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1363c:	f7ff bb13 	b.w	12c66 <_vfiprintf_r+0x496>
   13640:	f850 3b04 	ldr.w	r3, [r0], #4
   13644:	9007      	str	r0, [sp, #28]
   13646:	4622      	mov	r2, r4
   13648:	b2db      	uxtb	r3, r3
   1364a:	e6b6      	b.n	133ba <_vfiprintf_r+0xbea>
   1364c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   13650:	9207      	str	r2, [sp, #28]
   13652:	17da      	asrs	r2, r3, #31
   13654:	4611      	mov	r1, r2
   13656:	f7ff b9ca 	b.w	129ee <_vfiprintf_r+0x21e>
   1365a:	f851 3b04 	ldr.w	r3, [r1], #4
   1365e:	9107      	str	r1, [sp, #28]
   13660:	4602      	mov	r2, r0
   13662:	b2db      	uxtb	r3, r3
   13664:	f7ff ba27 	b.w	12ab6 <_vfiprintf_r+0x2e6>
   13668:	2301      	movs	r3, #1
   1366a:	931c      	str	r3, [sp, #112]	; 0x70
   1366c:	2101      	movs	r1, #1
   1366e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   13672:	931b      	str	r3, [sp, #108]	; 0x6c
   13674:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13678:	460b      	mov	r3, r1
   1367a:	f7ff bacd 	b.w	12c18 <_vfiprintf_r+0x448>
   1367e:	9b07      	ldr	r3, [sp, #28]
   13680:	9905      	ldr	r1, [sp, #20]
   13682:	f853 2b04 	ldr.w	r2, [r3], #4
   13686:	9307      	str	r3, [sp, #28]
   13688:	8011      	strh	r1, [r2, #0]
   1368a:	f7ff b8ec 	b.w	12866 <_vfiprintf_r+0x96>
   1368e:	1c59      	adds	r1, r3, #1
   13690:	4658      	mov	r0, fp
   13692:	f7f6 fa57 	bl	9b44 <_malloc_r>
   13696:	4604      	mov	r4, r0
   13698:	2800      	cmp	r0, #0
   1369a:	d03c      	beq.n	13716 <_vfiprintf_r+0xf46>
   1369c:	9008      	str	r0, [sp, #32]
   1369e:	e795      	b.n	135cc <_vfiprintf_r+0xdfc>
   136a0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   136a2:	f7f8 fadd 	bl	bc60 <__retarget_lock_release_recursive>
   136a6:	f7ff b9e9 	b.w	12a7c <_vfiprintf_r+0x2ac>
   136aa:	9b03      	ldr	r3, [sp, #12]
   136ac:	9307      	str	r3, [sp, #28]
   136ae:	e9cd 7703 	strd	r7, r7, [sp, #12]
   136b2:	9f08      	ldr	r7, [sp, #32]
   136b4:	f7ff b9bc 	b.w	12a30 <_vfiprintf_r+0x260>
   136b8:	9819      	ldr	r0, [sp, #100]	; 0x64
   136ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   136bc:	3001      	adds	r0, #1
   136be:	e545      	b.n	1314c <_vfiprintf_r+0x97c>
   136c0:	9b03      	ldr	r3, [sp, #12]
   136c2:	9307      	str	r3, [sp, #28]
   136c4:	4620      	mov	r0, r4
   136c6:	f7f8 fcfb 	bl	c0c0 <strlen>
   136ca:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   136ce:	462f      	mov	r7, r5
   136d0:	9004      	str	r0, [sp, #16]
   136d2:	9303      	str	r3, [sp, #12]
   136d4:	9508      	str	r5, [sp, #32]
   136d6:	f7ff b9ab 	b.w	12a30 <_vfiprintf_r+0x260>
   136da:	ee18 1a10 	vmov	r1, s16
   136de:	aa18      	add	r2, sp, #96	; 0x60
   136e0:	4658      	mov	r0, fp
   136e2:	f7ff f839 	bl	12758 <__sprint_r.part.0>
   136e6:	2800      	cmp	r0, #0
   136e8:	f43f aa36 	beq.w	12b58 <_vfiprintf_r+0x388>
   136ec:	f7ff ba4d 	b.w	12b8a <_vfiprintf_r+0x3ba>
   136f0:	9819      	ldr	r0, [sp, #100]	; 0x64
   136f2:	3001      	adds	r0, #1
   136f4:	e57a      	b.n	131ec <_vfiprintf_r+0xa1c>
   136f6:	468c      	mov	ip, r1
   136f8:	e46e      	b.n	12fd8 <_vfiprintf_r+0x808>
   136fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   136fc:	07d9      	lsls	r1, r3, #31
   136fe:	d405      	bmi.n	1370c <_vfiprintf_r+0xf3c>
   13700:	89ab      	ldrh	r3, [r5, #12]
   13702:	059a      	lsls	r2, r3, #22
   13704:	d402      	bmi.n	1370c <_vfiprintf_r+0xf3c>
   13706:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13708:	f7f8 faaa 	bl	bc60 <__retarget_lock_release_recursive>
   1370c:	f04f 33ff 	mov.w	r3, #4294967295
   13710:	9305      	str	r3, [sp, #20]
   13712:	f7ff ba49 	b.w	12ba8 <_vfiprintf_r+0x3d8>
   13716:	ee18 2a10 	vmov	r2, s16
   1371a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1371e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13722:	8193      	strh	r3, [r2, #12]
   13724:	f7ff ba35 	b.w	12b92 <_vfiprintf_r+0x3c2>
   13728:	9c07      	ldr	r4, [sp, #28]
   1372a:	9704      	str	r7, [sp, #16]
   1372c:	e746      	b.n	135bc <_vfiprintf_r+0xdec>
   1372e:	9b07      	ldr	r3, [sp, #28]
   13730:	f898 1001 	ldrb.w	r1, [r8, #1]
   13734:	f853 7b04 	ldr.w	r7, [r3], #4
   13738:	9307      	str	r3, [sp, #28]
   1373a:	4690      	mov	r8, r2
   1373c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   13740:	f7ff b8b9 	b.w	128b6 <_vfiprintf_r+0xe6>
   13744:	ee18 2a10 	vmov	r2, s16
   13748:	8993      	ldrh	r3, [r2, #12]
   1374a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1374e:	8193      	strh	r3, [r2, #12]
   13750:	f7ff ba15 	b.w	12b7e <_vfiprintf_r+0x3ae>
   13754:	cccccccd 	.word	0xcccccccd
   13758:	20000c68 	.word	0x20000c68

0001375c <__sbprintf>:
   1375c:	b570      	push	{r4, r5, r6, lr}
   1375e:	460c      	mov	r4, r1
   13760:	8989      	ldrh	r1, [r1, #12]
   13762:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   13766:	f021 0102 	bic.w	r1, r1, #2
   1376a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1376e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   13770:	911b      	str	r1, [sp, #108]	; 0x6c
   13772:	89e1      	ldrh	r1, [r4, #14]
   13774:	f8ad 1016 	strh.w	r1, [sp, #22]
   13778:	69e1      	ldr	r1, [r4, #28]
   1377a:	9109      	str	r1, [sp, #36]	; 0x24
   1377c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1377e:	910b      	str	r1, [sp, #44]	; 0x2c
   13780:	a91c      	add	r1, sp, #112	; 0x70
   13782:	9102      	str	r1, [sp, #8]
   13784:	9106      	str	r1, [sp, #24]
   13786:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1378a:	4606      	mov	r6, r0
   1378c:	9104      	str	r1, [sp, #16]
   1378e:	9107      	str	r1, [sp, #28]
   13790:	a818      	add	r0, sp, #96	; 0x60
   13792:	2100      	movs	r1, #0
   13794:	e9cd 3200 	strd	r3, r2, [sp]
   13798:	9108      	str	r1, [sp, #32]
   1379a:	f7f8 fa5b 	bl	bc54 <__retarget_lock_init_recursive>
   1379e:	e9dd 3200 	ldrd	r3, r2, [sp]
   137a2:	a902      	add	r1, sp, #8
   137a4:	4630      	mov	r0, r6
   137a6:	f7ff f813 	bl	127d0 <_vfiprintf_r>
   137aa:	1e05      	subs	r5, r0, #0
   137ac:	db07      	blt.n	137be <__sbprintf+0x62>
   137ae:	a902      	add	r1, sp, #8
   137b0:	4630      	mov	r0, r6
   137b2:	f7fd fad3 	bl	10d5c <_fflush_r>
   137b6:	2800      	cmp	r0, #0
   137b8:	bf18      	it	ne
   137ba:	f04f 35ff 	movne.w	r5, #4294967295
   137be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   137c2:	065b      	lsls	r3, r3, #25
   137c4:	d503      	bpl.n	137ce <__sbprintf+0x72>
   137c6:	89a3      	ldrh	r3, [r4, #12]
   137c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   137cc:	81a3      	strh	r3, [r4, #12]
   137ce:	9818      	ldr	r0, [sp, #96]	; 0x60
   137d0:	f7f8 fa42 	bl	bc58 <__retarget_lock_close_recursive>
   137d4:	4628      	mov	r0, r5
   137d6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   137da:	bd70      	pop	{r4, r5, r6, pc}

000137dc <__sfvwrite_r>:
   137dc:	6893      	ldr	r3, [r2, #8]
   137de:	2b00      	cmp	r3, #0
   137e0:	f000 8085 	beq.w	138ee <__sfvwrite_r+0x112>
   137e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137e8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   137ec:	460c      	mov	r4, r1
   137ee:	0719      	lsls	r1, r3, #28
   137f0:	4680      	mov	r8, r0
   137f2:	b083      	sub	sp, #12
   137f4:	4617      	mov	r7, r2
   137f6:	b298      	uxth	r0, r3
   137f8:	d525      	bpl.n	13846 <__sfvwrite_r+0x6a>
   137fa:	6923      	ldr	r3, [r4, #16]
   137fc:	b31b      	cbz	r3, 13846 <__sfvwrite_r+0x6a>
   137fe:	f010 0302 	ands.w	r3, r0, #2
   13802:	683d      	ldr	r5, [r7, #0]
   13804:	d02d      	beq.n	13862 <__sfvwrite_r+0x86>
   13806:	f04f 0a00 	mov.w	sl, #0
   1380a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 13acc <__sfvwrite_r+0x2f0>
   1380e:	4656      	mov	r6, sl
   13810:	46b9      	mov	r9, r7
   13812:	455e      	cmp	r6, fp
   13814:	4633      	mov	r3, r6
   13816:	4652      	mov	r2, sl
   13818:	bf28      	it	cs
   1381a:	465b      	movcs	r3, fp
   1381c:	4640      	mov	r0, r8
   1381e:	2e00      	cmp	r6, #0
   13820:	d052      	beq.n	138c8 <__sfvwrite_r+0xec>
   13822:	69e1      	ldr	r1, [r4, #28]
   13824:	6a67      	ldr	r7, [r4, #36]	; 0x24
   13826:	47b8      	blx	r7
   13828:	2800      	cmp	r0, #0
   1382a:	dd56      	ble.n	138da <__sfvwrite_r+0xfe>
   1382c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   13830:	1a1b      	subs	r3, r3, r0
   13832:	4482      	add	sl, r0
   13834:	1a36      	subs	r6, r6, r0
   13836:	f8c9 3008 	str.w	r3, [r9, #8]
   1383a:	2b00      	cmp	r3, #0
   1383c:	d1e9      	bne.n	13812 <__sfvwrite_r+0x36>
   1383e:	2000      	movs	r0, #0
   13840:	b003      	add	sp, #12
   13842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13846:	4621      	mov	r1, r4
   13848:	4640      	mov	r0, r8
   1384a:	f000 f97d 	bl	13b48 <__swsetup_r>
   1384e:	2800      	cmp	r0, #0
   13850:	f040 8138 	bne.w	13ac4 <__sfvwrite_r+0x2e8>
   13854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13858:	683d      	ldr	r5, [r7, #0]
   1385a:	b298      	uxth	r0, r3
   1385c:	f010 0302 	ands.w	r3, r0, #2
   13860:	d1d1      	bne.n	13806 <__sfvwrite_r+0x2a>
   13862:	f010 0901 	ands.w	r9, r0, #1
   13866:	d144      	bne.n	138f2 <__sfvwrite_r+0x116>
   13868:	464e      	mov	r6, r9
   1386a:	9700      	str	r7, [sp, #0]
   1386c:	b346      	cbz	r6, 138c0 <__sfvwrite_r+0xe4>
   1386e:	0582      	lsls	r2, r0, #22
   13870:	f8d4 b008 	ldr.w	fp, [r4, #8]
   13874:	f140 8085 	bpl.w	13982 <__sfvwrite_r+0x1a6>
   13878:	45b3      	cmp	fp, r6
   1387a:	465a      	mov	r2, fp
   1387c:	f200 80b4 	bhi.w	139e8 <__sfvwrite_r+0x20c>
   13880:	f410 6f90 	tst.w	r0, #1152	; 0x480
   13884:	f040 80c1 	bne.w	13a0a <__sfvwrite_r+0x22e>
   13888:	6820      	ldr	r0, [r4, #0]
   1388a:	9201      	str	r2, [sp, #4]
   1388c:	4649      	mov	r1, r9
   1388e:	f7f8 f805 	bl	b89c <memmove>
   13892:	68a3      	ldr	r3, [r4, #8]
   13894:	9a01      	ldr	r2, [sp, #4]
   13896:	eba3 010b 	sub.w	r1, r3, fp
   1389a:	6823      	ldr	r3, [r4, #0]
   1389c:	60a1      	str	r1, [r4, #8]
   1389e:	4413      	add	r3, r2
   138a0:	46b2      	mov	sl, r6
   138a2:	6023      	str	r3, [r4, #0]
   138a4:	2600      	movs	r6, #0
   138a6:	9a00      	ldr	r2, [sp, #0]
   138a8:	6893      	ldr	r3, [r2, #8]
   138aa:	eba3 030a 	sub.w	r3, r3, sl
   138ae:	44d1      	add	r9, sl
   138b0:	6093      	str	r3, [r2, #8]
   138b2:	2b00      	cmp	r3, #0
   138b4:	d0c3      	beq.n	1383e <__sfvwrite_r+0x62>
   138b6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   138ba:	b280      	uxth	r0, r0
   138bc:	2e00      	cmp	r6, #0
   138be:	d1d6      	bne.n	1386e <__sfvwrite_r+0x92>
   138c0:	e9d5 9600 	ldrd	r9, r6, [r5]
   138c4:	3508      	adds	r5, #8
   138c6:	e7d1      	b.n	1386c <__sfvwrite_r+0x90>
   138c8:	e9d5 a600 	ldrd	sl, r6, [r5]
   138cc:	3508      	adds	r5, #8
   138ce:	e7a0      	b.n	13812 <__sfvwrite_r+0x36>
   138d0:	4621      	mov	r1, r4
   138d2:	4640      	mov	r0, r8
   138d4:	f7fd fa42 	bl	10d5c <_fflush_r>
   138d8:	b388      	cbz	r0, 1393e <__sfvwrite_r+0x162>
   138da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   138de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   138e2:	f04f 30ff 	mov.w	r0, #4294967295
   138e6:	81a3      	strh	r3, [r4, #12]
   138e8:	b003      	add	sp, #12
   138ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138ee:	2000      	movs	r0, #0
   138f0:	4770      	bx	lr
   138f2:	461e      	mov	r6, r3
   138f4:	46ba      	mov	sl, r7
   138f6:	4699      	mov	r9, r3
   138f8:	4618      	mov	r0, r3
   138fa:	9500      	str	r5, [sp, #0]
   138fc:	461f      	mov	r7, r3
   138fe:	b366      	cbz	r6, 1395a <__sfvwrite_r+0x17e>
   13900:	2800      	cmp	r0, #0
   13902:	d032      	beq.n	1396a <__sfvwrite_r+0x18e>
   13904:	464a      	mov	r2, r9
   13906:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   1390a:	6820      	ldr	r0, [r4, #0]
   1390c:	68a5      	ldr	r5, [r4, #8]
   1390e:	42b2      	cmp	r2, r6
   13910:	bf28      	it	cs
   13912:	4632      	movcs	r2, r6
   13914:	4288      	cmp	r0, r1
   13916:	d904      	bls.n	13922 <__sfvwrite_r+0x146>
   13918:	eb05 0b03 	add.w	fp, r5, r3
   1391c:	455a      	cmp	r2, fp
   1391e:	f300 80a7 	bgt.w	13a70 <__sfvwrite_r+0x294>
   13922:	4293      	cmp	r3, r2
   13924:	dc64      	bgt.n	139f0 <__sfvwrite_r+0x214>
   13926:	69e1      	ldr	r1, [r4, #28]
   13928:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1392a:	463a      	mov	r2, r7
   1392c:	4640      	mov	r0, r8
   1392e:	47a8      	blx	r5
   13930:	f1b0 0b00 	subs.w	fp, r0, #0
   13934:	ddd1      	ble.n	138da <__sfvwrite_r+0xfe>
   13936:	ebb9 090b 	subs.w	r9, r9, fp
   1393a:	d0c9      	beq.n	138d0 <__sfvwrite_r+0xf4>
   1393c:	2001      	movs	r0, #1
   1393e:	f8da 3008 	ldr.w	r3, [sl, #8]
   13942:	eba3 030b 	sub.w	r3, r3, fp
   13946:	445f      	add	r7, fp
   13948:	eba6 060b 	sub.w	r6, r6, fp
   1394c:	f8ca 3008 	str.w	r3, [sl, #8]
   13950:	2b00      	cmp	r3, #0
   13952:	f43f af74 	beq.w	1383e <__sfvwrite_r+0x62>
   13956:	2e00      	cmp	r6, #0
   13958:	d1d2      	bne.n	13900 <__sfvwrite_r+0x124>
   1395a:	9a00      	ldr	r2, [sp, #0]
   1395c:	6856      	ldr	r6, [r2, #4]
   1395e:	4613      	mov	r3, r2
   13960:	3208      	adds	r2, #8
   13962:	9200      	str	r2, [sp, #0]
   13964:	2e00      	cmp	r6, #0
   13966:	d0f8      	beq.n	1395a <__sfvwrite_r+0x17e>
   13968:	681f      	ldr	r7, [r3, #0]
   1396a:	4632      	mov	r2, r6
   1396c:	210a      	movs	r1, #10
   1396e:	4638      	mov	r0, r7
   13970:	f7f8 fb56 	bl	c020 <memchr>
   13974:	2800      	cmp	r0, #0
   13976:	f000 809c 	beq.w	13ab2 <__sfvwrite_r+0x2d6>
   1397a:	3001      	adds	r0, #1
   1397c:	eba0 0907 	sub.w	r9, r0, r7
   13980:	e7c0      	b.n	13904 <__sfvwrite_r+0x128>
   13982:	6820      	ldr	r0, [r4, #0]
   13984:	6923      	ldr	r3, [r4, #16]
   13986:	4298      	cmp	r0, r3
   13988:	d816      	bhi.n	139b8 <__sfvwrite_r+0x1dc>
   1398a:	6962      	ldr	r2, [r4, #20]
   1398c:	42b2      	cmp	r2, r6
   1398e:	d813      	bhi.n	139b8 <__sfvwrite_r+0x1dc>
   13990:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13994:	42b3      	cmp	r3, r6
   13996:	bf28      	it	cs
   13998:	4633      	movcs	r3, r6
   1399a:	69e1      	ldr	r1, [r4, #28]
   1399c:	fb93 f3f2 	sdiv	r3, r3, r2
   139a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   139a2:	fb02 f303 	mul.w	r3, r2, r3
   139a6:	4640      	mov	r0, r8
   139a8:	464a      	mov	r2, r9
   139aa:	47b8      	blx	r7
   139ac:	f1b0 0a00 	subs.w	sl, r0, #0
   139b0:	dd93      	ble.n	138da <__sfvwrite_r+0xfe>
   139b2:	eba6 060a 	sub.w	r6, r6, sl
   139b6:	e776      	b.n	138a6 <__sfvwrite_r+0xca>
   139b8:	45b3      	cmp	fp, r6
   139ba:	46da      	mov	sl, fp
   139bc:	bf28      	it	cs
   139be:	46b2      	movcs	sl, r6
   139c0:	4652      	mov	r2, sl
   139c2:	4649      	mov	r1, r9
   139c4:	f7f7 ff6a 	bl	b89c <memmove>
   139c8:	68a3      	ldr	r3, [r4, #8]
   139ca:	6822      	ldr	r2, [r4, #0]
   139cc:	eba3 030a 	sub.w	r3, r3, sl
   139d0:	4452      	add	r2, sl
   139d2:	60a3      	str	r3, [r4, #8]
   139d4:	6022      	str	r2, [r4, #0]
   139d6:	2b00      	cmp	r3, #0
   139d8:	d1eb      	bne.n	139b2 <__sfvwrite_r+0x1d6>
   139da:	4621      	mov	r1, r4
   139dc:	4640      	mov	r0, r8
   139de:	f7fd f9bd 	bl	10d5c <_fflush_r>
   139e2:	2800      	cmp	r0, #0
   139e4:	d0e5      	beq.n	139b2 <__sfvwrite_r+0x1d6>
   139e6:	e778      	b.n	138da <__sfvwrite_r+0xfe>
   139e8:	6820      	ldr	r0, [r4, #0]
   139ea:	46b3      	mov	fp, r6
   139ec:	4632      	mov	r2, r6
   139ee:	e74c      	b.n	1388a <__sfvwrite_r+0xae>
   139f0:	4639      	mov	r1, r7
   139f2:	9201      	str	r2, [sp, #4]
   139f4:	f7f7 ff52 	bl	b89c <memmove>
   139f8:	9a01      	ldr	r2, [sp, #4]
   139fa:	68a3      	ldr	r3, [r4, #8]
   139fc:	1a9b      	subs	r3, r3, r2
   139fe:	60a3      	str	r3, [r4, #8]
   13a00:	6823      	ldr	r3, [r4, #0]
   13a02:	4413      	add	r3, r2
   13a04:	6023      	str	r3, [r4, #0]
   13a06:	4693      	mov	fp, r2
   13a08:	e795      	b.n	13936 <__sfvwrite_r+0x15a>
   13a0a:	6823      	ldr	r3, [r4, #0]
   13a0c:	6921      	ldr	r1, [r4, #16]
   13a0e:	eba3 0b01 	sub.w	fp, r3, r1
   13a12:	6963      	ldr	r3, [r4, #20]
   13a14:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   13a18:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   13a1c:	f10b 0301 	add.w	r3, fp, #1
   13a20:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   13a24:	4433      	add	r3, r6
   13a26:	4553      	cmp	r3, sl
   13a28:	4652      	mov	r2, sl
   13a2a:	bf84      	itt	hi
   13a2c:	469a      	movhi	sl, r3
   13a2e:	4652      	movhi	r2, sl
   13a30:	0543      	lsls	r3, r0, #21
   13a32:	d52c      	bpl.n	13a8e <__sfvwrite_r+0x2b2>
   13a34:	4611      	mov	r1, r2
   13a36:	4640      	mov	r0, r8
   13a38:	f7f6 f884 	bl	9b44 <_malloc_r>
   13a3c:	2800      	cmp	r0, #0
   13a3e:	d03b      	beq.n	13ab8 <__sfvwrite_r+0x2dc>
   13a40:	465a      	mov	r2, fp
   13a42:	6921      	ldr	r1, [r4, #16]
   13a44:	9001      	str	r0, [sp, #4]
   13a46:	f7f4 fad9 	bl	7ffc <memcpy>
   13a4a:	89a2      	ldrh	r2, [r4, #12]
   13a4c:	9b01      	ldr	r3, [sp, #4]
   13a4e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   13a52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13a56:	81a2      	strh	r2, [r4, #12]
   13a58:	eb03 000b 	add.w	r0, r3, fp
   13a5c:	6123      	str	r3, [r4, #16]
   13a5e:	ebaa 030b 	sub.w	r3, sl, fp
   13a62:	f8c4 a014 	str.w	sl, [r4, #20]
   13a66:	60a3      	str	r3, [r4, #8]
   13a68:	6020      	str	r0, [r4, #0]
   13a6a:	46b3      	mov	fp, r6
   13a6c:	4632      	mov	r2, r6
   13a6e:	e70c      	b.n	1388a <__sfvwrite_r+0xae>
   13a70:	4639      	mov	r1, r7
   13a72:	465a      	mov	r2, fp
   13a74:	f7f7 ff12 	bl	b89c <memmove>
   13a78:	6823      	ldr	r3, [r4, #0]
   13a7a:	445b      	add	r3, fp
   13a7c:	6023      	str	r3, [r4, #0]
   13a7e:	4621      	mov	r1, r4
   13a80:	4640      	mov	r0, r8
   13a82:	f7fd f96b 	bl	10d5c <_fflush_r>
   13a86:	2800      	cmp	r0, #0
   13a88:	f43f af55 	beq.w	13936 <__sfvwrite_r+0x15a>
   13a8c:	e725      	b.n	138da <__sfvwrite_r+0xfe>
   13a8e:	4640      	mov	r0, r8
   13a90:	f7f6 fb20 	bl	a0d4 <_realloc_r>
   13a94:	4603      	mov	r3, r0
   13a96:	2800      	cmp	r0, #0
   13a98:	d1de      	bne.n	13a58 <__sfvwrite_r+0x27c>
   13a9a:	6921      	ldr	r1, [r4, #16]
   13a9c:	4640      	mov	r0, r8
   13a9e:	f7f8 fc21 	bl	c2e4 <_free_r>
   13aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13aa6:	220c      	movs	r2, #12
   13aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13aac:	f8c8 2000 	str.w	r2, [r8]
   13ab0:	e715      	b.n	138de <__sfvwrite_r+0x102>
   13ab2:	1c72      	adds	r2, r6, #1
   13ab4:	4691      	mov	r9, r2
   13ab6:	e726      	b.n	13906 <__sfvwrite_r+0x12a>
   13ab8:	220c      	movs	r2, #12
   13aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13abe:	f8c8 2000 	str.w	r2, [r8]
   13ac2:	e70c      	b.n	138de <__sfvwrite_r+0x102>
   13ac4:	f04f 30ff 	mov.w	r0, #4294967295
   13ac8:	e6ba      	b.n	13840 <__sfvwrite_r+0x64>
   13aca:	bf00      	nop
   13acc:	7ffffc00 	.word	0x7ffffc00

00013ad0 <__submore>:
   13ad0:	f101 0340 	add.w	r3, r1, #64	; 0x40
   13ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ad8:	460c      	mov	r4, r1
   13ada:	6b09      	ldr	r1, [r1, #48]	; 0x30
   13adc:	4299      	cmp	r1, r3
   13ade:	d014      	beq.n	13b0a <__submore+0x3a>
   13ae0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   13ae2:	0077      	lsls	r7, r6, #1
   13ae4:	463a      	mov	r2, r7
   13ae6:	f7f6 faf5 	bl	a0d4 <_realloc_r>
   13aea:	4605      	mov	r5, r0
   13aec:	b340      	cbz	r0, 13b40 <__submore+0x70>
   13aee:	eb00 0806 	add.w	r8, r0, r6
   13af2:	4601      	mov	r1, r0
   13af4:	4632      	mov	r2, r6
   13af6:	4640      	mov	r0, r8
   13af8:	f7f4 fa80 	bl	7ffc <memcpy>
   13afc:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   13b00:	f8c4 8000 	str.w	r8, [r4]
   13b04:	2000      	movs	r0, #0
   13b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13b0e:	f7f6 f819 	bl	9b44 <_malloc_r>
   13b12:	b1a8      	cbz	r0, 13b40 <__submore+0x70>
   13b14:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   13b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13b1c:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   13b20:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   13b24:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   13b28:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   13b2c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   13b30:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   13b34:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   13b38:	6023      	str	r3, [r4, #0]
   13b3a:	2000      	movs	r0, #0
   13b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b40:	f04f 30ff 	mov.w	r0, #4294967295
   13b44:	e7df      	b.n	13b06 <__submore+0x36>
   13b46:	bf00      	nop

00013b48 <__swsetup_r>:
   13b48:	b538      	push	{r3, r4, r5, lr}
   13b4a:	4b31      	ldr	r3, [pc, #196]	; (13c10 <__swsetup_r+0xc8>)
   13b4c:	681b      	ldr	r3, [r3, #0]
   13b4e:	4605      	mov	r5, r0
   13b50:	460c      	mov	r4, r1
   13b52:	b113      	cbz	r3, 13b5a <__swsetup_r+0x12>
   13b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13b56:	2a00      	cmp	r2, #0
   13b58:	d04e      	beq.n	13bf8 <__swsetup_r+0xb0>
   13b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b5e:	0718      	lsls	r0, r3, #28
   13b60:	b29a      	uxth	r2, r3
   13b62:	d51c      	bpl.n	13b9e <__swsetup_r+0x56>
   13b64:	6921      	ldr	r1, [r4, #16]
   13b66:	b329      	cbz	r1, 13bb4 <__swsetup_r+0x6c>
   13b68:	f012 0001 	ands.w	r0, r2, #1
   13b6c:	d007      	beq.n	13b7e <__swsetup_r+0x36>
   13b6e:	2000      	movs	r0, #0
   13b70:	60a0      	str	r0, [r4, #8]
   13b72:	6960      	ldr	r0, [r4, #20]
   13b74:	4240      	negs	r0, r0
   13b76:	61a0      	str	r0, [r4, #24]
   13b78:	b139      	cbz	r1, 13b8a <__swsetup_r+0x42>
   13b7a:	2000      	movs	r0, #0
   13b7c:	bd38      	pop	{r3, r4, r5, pc}
   13b7e:	0795      	lsls	r5, r2, #30
   13b80:	bf58      	it	pl
   13b82:	6960      	ldrpl	r0, [r4, #20]
   13b84:	60a0      	str	r0, [r4, #8]
   13b86:	2900      	cmp	r1, #0
   13b88:	d1f7      	bne.n	13b7a <__swsetup_r+0x32>
   13b8a:	0612      	lsls	r2, r2, #24
   13b8c:	bf58      	it	pl
   13b8e:	4608      	movpl	r0, r1
   13b90:	d5f4      	bpl.n	13b7c <__swsetup_r+0x34>
   13b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13b96:	81a3      	strh	r3, [r4, #12]
   13b98:	f04f 30ff 	mov.w	r0, #4294967295
   13b9c:	bd38      	pop	{r3, r4, r5, pc}
   13b9e:	06d1      	lsls	r1, r2, #27
   13ba0:	d52e      	bpl.n	13c00 <__swsetup_r+0xb8>
   13ba2:	0752      	lsls	r2, r2, #29
   13ba4:	d414      	bmi.n	13bd0 <__swsetup_r+0x88>
   13ba6:	6921      	ldr	r1, [r4, #16]
   13ba8:	f043 0308 	orr.w	r3, r3, #8
   13bac:	81a3      	strh	r3, [r4, #12]
   13bae:	b29a      	uxth	r2, r3
   13bb0:	2900      	cmp	r1, #0
   13bb2:	d1d9      	bne.n	13b68 <__swsetup_r+0x20>
   13bb4:	f402 7020 	and.w	r0, r2, #640	; 0x280
   13bb8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13bbc:	d0d4      	beq.n	13b68 <__swsetup_r+0x20>
   13bbe:	4621      	mov	r1, r4
   13bc0:	4628      	mov	r0, r5
   13bc2:	f000 f977 	bl	13eb4 <__smakebuf_r>
   13bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13bca:	6921      	ldr	r1, [r4, #16]
   13bcc:	b29a      	uxth	r2, r3
   13bce:	e7cb      	b.n	13b68 <__swsetup_r+0x20>
   13bd0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13bd2:	b151      	cbz	r1, 13bea <__swsetup_r+0xa2>
   13bd4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13bd8:	4291      	cmp	r1, r2
   13bda:	d004      	beq.n	13be6 <__swsetup_r+0x9e>
   13bdc:	4628      	mov	r0, r5
   13bde:	f7f8 fb81 	bl	c2e4 <_free_r>
   13be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13be6:	2200      	movs	r2, #0
   13be8:	6322      	str	r2, [r4, #48]	; 0x30
   13bea:	6921      	ldr	r1, [r4, #16]
   13bec:	2200      	movs	r2, #0
   13bee:	e9c4 1200 	strd	r1, r2, [r4]
   13bf2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13bf6:	e7d7      	b.n	13ba8 <__swsetup_r+0x60>
   13bf8:	4618      	mov	r0, r3
   13bfa:	f7f7 fcd7 	bl	b5ac <__sinit>
   13bfe:	e7ac      	b.n	13b5a <__swsetup_r+0x12>
   13c00:	2209      	movs	r2, #9
   13c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13c06:	602a      	str	r2, [r5, #0]
   13c08:	f04f 30ff 	mov.w	r0, #4294967295
   13c0c:	81a3      	strh	r3, [r4, #12]
   13c0e:	bd38      	pop	{r3, r4, r5, pc}
   13c10:	20008b7c 	.word	0x20008b7c

00013c14 <__fputwc>:
   13c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13c18:	b082      	sub	sp, #8
   13c1a:	4682      	mov	sl, r0
   13c1c:	4688      	mov	r8, r1
   13c1e:	4614      	mov	r4, r2
   13c20:	f7f7 ff82 	bl	bb28 <__locale_mb_cur_max>
   13c24:	2801      	cmp	r0, #1
   13c26:	d103      	bne.n	13c30 <__fputwc+0x1c>
   13c28:	f108 33ff 	add.w	r3, r8, #4294967295
   13c2c:	2bfe      	cmp	r3, #254	; 0xfe
   13c2e:	d936      	bls.n	13c9e <__fputwc+0x8a>
   13c30:	f10d 0904 	add.w	r9, sp, #4
   13c34:	4642      	mov	r2, r8
   13c36:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   13c3a:	4649      	mov	r1, r9
   13c3c:	4650      	mov	r0, sl
   13c3e:	f7fe fb29 	bl	12294 <_wcrtomb_r>
   13c42:	1c42      	adds	r2, r0, #1
   13c44:	4606      	mov	r6, r0
   13c46:	d032      	beq.n	13cae <__fputwc+0x9a>
   13c48:	b320      	cbz	r0, 13c94 <__fputwc+0x80>
   13c4a:	f89d c004 	ldrb.w	ip, [sp, #4]
   13c4e:	2500      	movs	r5, #0
   13c50:	e009      	b.n	13c66 <__fputwc+0x52>
   13c52:	6823      	ldr	r3, [r4, #0]
   13c54:	1c5a      	adds	r2, r3, #1
   13c56:	6022      	str	r2, [r4, #0]
   13c58:	f883 c000 	strb.w	ip, [r3]
   13c5c:	3501      	adds	r5, #1
   13c5e:	42b5      	cmp	r5, r6
   13c60:	d218      	bcs.n	13c94 <__fputwc+0x80>
   13c62:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   13c66:	68a3      	ldr	r3, [r4, #8]
   13c68:	3b01      	subs	r3, #1
   13c6a:	2b00      	cmp	r3, #0
   13c6c:	60a3      	str	r3, [r4, #8]
   13c6e:	daf0      	bge.n	13c52 <__fputwc+0x3e>
   13c70:	69a7      	ldr	r7, [r4, #24]
   13c72:	42bb      	cmp	r3, r7
   13c74:	4661      	mov	r1, ip
   13c76:	4622      	mov	r2, r4
   13c78:	4650      	mov	r0, sl
   13c7a:	db02      	blt.n	13c82 <__fputwc+0x6e>
   13c7c:	f1bc 0f0a 	cmp.w	ip, #10
   13c80:	d1e7      	bne.n	13c52 <__fputwc+0x3e>
   13c82:	f000 f983 	bl	13f8c <__swbuf_r>
   13c86:	1c43      	adds	r3, r0, #1
   13c88:	d1e8      	bne.n	13c5c <__fputwc+0x48>
   13c8a:	4606      	mov	r6, r0
   13c8c:	4630      	mov	r0, r6
   13c8e:	b002      	add	sp, #8
   13c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c94:	4646      	mov	r6, r8
   13c96:	4630      	mov	r0, r6
   13c98:	b002      	add	sp, #8
   13c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c9e:	fa5f fc88 	uxtb.w	ip, r8
   13ca2:	f88d c004 	strb.w	ip, [sp, #4]
   13ca6:	4606      	mov	r6, r0
   13ca8:	f10d 0904 	add.w	r9, sp, #4
   13cac:	e7cf      	b.n	13c4e <__fputwc+0x3a>
   13cae:	89a3      	ldrh	r3, [r4, #12]
   13cb0:	4630      	mov	r0, r6
   13cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13cb6:	81a3      	strh	r3, [r4, #12]
   13cb8:	b002      	add	sp, #8
   13cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13cbe:	bf00      	nop

00013cc0 <_fputwc_r>:
   13cc0:	b530      	push	{r4, r5, lr}
   13cc2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   13cc4:	f013 0f01 	tst.w	r3, #1
   13cc8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13ccc:	4614      	mov	r4, r2
   13cce:	b083      	sub	sp, #12
   13cd0:	4605      	mov	r5, r0
   13cd2:	b29a      	uxth	r2, r3
   13cd4:	d101      	bne.n	13cda <_fputwc_r+0x1a>
   13cd6:	0598      	lsls	r0, r3, #22
   13cd8:	d51c      	bpl.n	13d14 <_fputwc_r+0x54>
   13cda:	0490      	lsls	r0, r2, #18
   13cdc:	d406      	bmi.n	13cec <_fputwc_r+0x2c>
   13cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13ce0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13ce8:	81a3      	strh	r3, [r4, #12]
   13cea:	6662      	str	r2, [r4, #100]	; 0x64
   13cec:	4622      	mov	r2, r4
   13cee:	4628      	mov	r0, r5
   13cf0:	f7ff ff90 	bl	13c14 <__fputwc>
   13cf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13cf6:	07da      	lsls	r2, r3, #31
   13cf8:	4605      	mov	r5, r0
   13cfa:	d402      	bmi.n	13d02 <_fputwc_r+0x42>
   13cfc:	89a3      	ldrh	r3, [r4, #12]
   13cfe:	059b      	lsls	r3, r3, #22
   13d00:	d502      	bpl.n	13d08 <_fputwc_r+0x48>
   13d02:	4628      	mov	r0, r5
   13d04:	b003      	add	sp, #12
   13d06:	bd30      	pop	{r4, r5, pc}
   13d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13d0a:	f7f7 ffa9 	bl	bc60 <__retarget_lock_release_recursive>
   13d0e:	4628      	mov	r0, r5
   13d10:	b003      	add	sp, #12
   13d12:	bd30      	pop	{r4, r5, pc}
   13d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13d16:	9101      	str	r1, [sp, #4]
   13d18:	f7f7 ffa0 	bl	bc5c <__retarget_lock_acquire_recursive>
   13d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13d20:	9901      	ldr	r1, [sp, #4]
   13d22:	b29a      	uxth	r2, r3
   13d24:	e7d9      	b.n	13cda <_fputwc_r+0x1a>
   13d26:	bf00      	nop

00013d28 <_wcsnrtombs_l>:
   13d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d2c:	b08b      	sub	sp, #44	; 0x2c
   13d2e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   13d32:	9f14      	ldr	r7, [sp, #80]	; 0x50
   13d34:	9103      	str	r1, [sp, #12]
   13d36:	4681      	mov	r9, r0
   13d38:	9205      	str	r2, [sp, #20]
   13d3a:	461e      	mov	r6, r3
   13d3c:	f1b8 0f00 	cmp.w	r8, #0
   13d40:	d05c      	beq.n	13dfc <_wcsnrtombs_l+0xd4>
   13d42:	9b03      	ldr	r3, [sp, #12]
   13d44:	2b00      	cmp	r3, #0
   13d46:	d05e      	beq.n	13e06 <_wcsnrtombs_l+0xde>
   13d48:	9b05      	ldr	r3, [sp, #20]
   13d4a:	681d      	ldr	r5, [r3, #0]
   13d4c:	2f00      	cmp	r7, #0
   13d4e:	d06a      	beq.n	13e26 <_wcsnrtombs_l+0xfe>
   13d50:	1e74      	subs	r4, r6, #1
   13d52:	b34e      	cbz	r6, 13da8 <_wcsnrtombs_l+0x80>
   13d54:	9b03      	ldr	r3, [sp, #12]
   13d56:	9304      	str	r3, [sp, #16]
   13d58:	3d04      	subs	r5, #4
   13d5a:	2600      	movs	r6, #0
   13d5c:	9501      	str	r5, [sp, #4]
   13d5e:	e00b      	b.n	13d78 <_wcsnrtombs_l+0x50>
   13d60:	9b03      	ldr	r3, [sp, #12]
   13d62:	bb2b      	cbnz	r3, 13db0 <_wcsnrtombs_l+0x88>
   13d64:	9b01      	ldr	r3, [sp, #4]
   13d66:	681a      	ldr	r2, [r3, #0]
   13d68:	2a00      	cmp	r2, #0
   13d6a:	d03a      	beq.n	13de2 <_wcsnrtombs_l+0xba>
   13d6c:	45bc      	cmp	ip, r7
   13d6e:	d25c      	bcs.n	13e2a <_wcsnrtombs_l+0x102>
   13d70:	3c01      	subs	r4, #1
   13d72:	1c63      	adds	r3, r4, #1
   13d74:	4666      	mov	r6, ip
   13d76:	d017      	beq.n	13da8 <_wcsnrtombs_l+0x80>
   13d78:	f8d8 3000 	ldr.w	r3, [r8]
   13d7c:	9302      	str	r3, [sp, #8]
   13d7e:	9b01      	ldr	r3, [sp, #4]
   13d80:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   13d84:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13d88:	9301      	str	r3, [sp, #4]
   13d8a:	a907      	add	r1, sp, #28
   13d8c:	4643      	mov	r3, r8
   13d8e:	4648      	mov	r0, r9
   13d90:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13d94:	47a8      	blx	r5
   13d96:	1c42      	adds	r2, r0, #1
   13d98:	d03a      	beq.n	13e10 <_wcsnrtombs_l+0xe8>
   13d9a:	eb00 0c06 	add.w	ip, r0, r6
   13d9e:	45bc      	cmp	ip, r7
   13da0:	d9de      	bls.n	13d60 <_wcsnrtombs_l+0x38>
   13da2:	9b02      	ldr	r3, [sp, #8]
   13da4:	e9c8 3b00 	strd	r3, fp, [r8]
   13da8:	4630      	mov	r0, r6
   13daa:	b00b      	add	sp, #44	; 0x2c
   13dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13db0:	2800      	cmp	r0, #0
   13db2:	dd0e      	ble.n	13dd2 <_wcsnrtombs_l+0xaa>
   13db4:	9b04      	ldr	r3, [sp, #16]
   13db6:	9d01      	ldr	r5, [sp, #4]
   13db8:	4418      	add	r0, r3
   13dba:	1e5a      	subs	r2, r3, #1
   13dbc:	a907      	add	r1, sp, #28
   13dbe:	f100 3eff 	add.w	lr, r0, #4294967295
   13dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
   13dc6:	f802 3f01 	strb.w	r3, [r2, #1]!
   13dca:	4572      	cmp	r2, lr
   13dcc:	d1f9      	bne.n	13dc2 <_wcsnrtombs_l+0x9a>
   13dce:	9501      	str	r5, [sp, #4]
   13dd0:	9004      	str	r0, [sp, #16]
   13dd2:	9b05      	ldr	r3, [sp, #20]
   13dd4:	681a      	ldr	r2, [r3, #0]
   13dd6:	3204      	adds	r2, #4
   13dd8:	601a      	str	r2, [r3, #0]
   13dda:	9b01      	ldr	r3, [sp, #4]
   13ddc:	681a      	ldr	r2, [r3, #0]
   13dde:	2a00      	cmp	r2, #0
   13de0:	d1c4      	bne.n	13d6c <_wcsnrtombs_l+0x44>
   13de2:	9b03      	ldr	r3, [sp, #12]
   13de4:	b10b      	cbz	r3, 13dea <_wcsnrtombs_l+0xc2>
   13de6:	9b05      	ldr	r3, [sp, #20]
   13de8:	601a      	str	r2, [r3, #0]
   13dea:	f10c 36ff 	add.w	r6, ip, #4294967295
   13dee:	2200      	movs	r2, #0
   13df0:	4630      	mov	r0, r6
   13df2:	f8c8 2000 	str.w	r2, [r8]
   13df6:	b00b      	add	sp, #44	; 0x2c
   13df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dfc:	9b03      	ldr	r3, [sp, #12]
   13dfe:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   13e02:	2b00      	cmp	r3, #0
   13e04:	d1a0      	bne.n	13d48 <_wcsnrtombs_l+0x20>
   13e06:	9b05      	ldr	r3, [sp, #20]
   13e08:	f04f 37ff 	mov.w	r7, #4294967295
   13e0c:	681d      	ldr	r5, [r3, #0]
   13e0e:	e79f      	b.n	13d50 <_wcsnrtombs_l+0x28>
   13e10:	4606      	mov	r6, r0
   13e12:	218a      	movs	r1, #138	; 0x8a
   13e14:	2200      	movs	r2, #0
   13e16:	4630      	mov	r0, r6
   13e18:	f8c9 1000 	str.w	r1, [r9]
   13e1c:	f8c8 2000 	str.w	r2, [r8]
   13e20:	b00b      	add	sp, #44	; 0x2c
   13e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e26:	463e      	mov	r6, r7
   13e28:	e7be      	b.n	13da8 <_wcsnrtombs_l+0x80>
   13e2a:	4666      	mov	r6, ip
   13e2c:	e7bc      	b.n	13da8 <_wcsnrtombs_l+0x80>
   13e2e:	bf00      	nop

00013e30 <_wcsnrtombs_r>:
   13e30:	b510      	push	{r4, lr}
   13e32:	b084      	sub	sp, #16
   13e34:	4c05      	ldr	r4, [pc, #20]	; (13e4c <_wcsnrtombs_r+0x1c>)
   13e36:	9806      	ldr	r0, [sp, #24]
   13e38:	9000      	str	r0, [sp, #0]
   13e3a:	9807      	ldr	r0, [sp, #28]
   13e3c:	9001      	str	r0, [sp, #4]
   13e3e:	4804      	ldr	r0, [pc, #16]	; (13e50 <_wcsnrtombs_r+0x20>)
   13e40:	6800      	ldr	r0, [r0, #0]
   13e42:	9402      	str	r4, [sp, #8]
   13e44:	f7ff ff70 	bl	13d28 <_wcsnrtombs_l>
   13e48:	b004      	add	sp, #16
   13e4a:	bd10      	pop	{r4, pc}
   13e4c:	200085f4 	.word	0x200085f4
   13e50:	20008b7c 	.word	0x20008b7c

00013e54 <category>:
   13e54:	4b15      	ldr	r3, [pc, #84]	; (13eac <category+0x58>)
   13e56:	4298      	cmp	r0, r3
   13e58:	d823      	bhi.n	13ea2 <category+0x4e>
   13e5a:	b570      	push	{r4, r5, r6, lr}
   13e5c:	4e14      	ldr	r6, [pc, #80]	; (13eb0 <category+0x5c>)
   13e5e:	f04f 0e00 	mov.w	lr, #0
   13e62:	f640 04db 	movw	r4, #2267	; 0x8db
   13e66:	e003      	b.n	13e70 <category+0x1c>
   13e68:	f102 0e01 	add.w	lr, r2, #1
   13e6c:	45a6      	cmp	lr, r4
   13e6e:	dc16      	bgt.n	13e9e <category+0x4a>
   13e70:	eb04 020e 	add.w	r2, r4, lr
   13e74:	f022 0301 	bic.w	r3, r2, #1
   13e78:	eb03 0362 	add.w	r3, r3, r2, asr #1
   13e7c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   13e80:	1052      	asrs	r2, r2, #1
   13e82:	7859      	ldrb	r1, [r3, #1]
   13e84:	885d      	ldrh	r5, [r3, #2]
   13e86:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   13e8a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   13e8e:	448c      	add	ip, r1
   13e90:	4560      	cmp	r0, ip
   13e92:	d8e9      	bhi.n	13e68 <category+0x14>
   13e94:	4288      	cmp	r0, r1
   13e96:	d206      	bcs.n	13ea6 <category+0x52>
   13e98:	1e54      	subs	r4, r2, #1
   13e9a:	45a6      	cmp	lr, r4
   13e9c:	dde8      	ble.n	13e70 <category+0x1c>
   13e9e:	20ff      	movs	r0, #255	; 0xff
   13ea0:	bd70      	pop	{r4, r5, r6, pc}
   13ea2:	20ff      	movs	r0, #255	; 0xff
   13ea4:	4770      	bx	lr
   13ea6:	7818      	ldrb	r0, [r3, #0]
   13ea8:	bd70      	pop	{r4, r5, r6, pc}
   13eaa:	bf00      	nop
   13eac:	000e01ef 	.word	0x000e01ef
   13eb0:	2000270c 	.word	0x2000270c

00013eb4 <__smakebuf_r>:
   13eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13eb8:	898b      	ldrh	r3, [r1, #12]
   13eba:	460c      	mov	r4, r1
   13ebc:	0799      	lsls	r1, r3, #30
   13ebe:	b096      	sub	sp, #88	; 0x58
   13ec0:	d508      	bpl.n	13ed4 <__smakebuf_r+0x20>
   13ec2:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13ec6:	2201      	movs	r2, #1
   13ec8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13ecc:	6023      	str	r3, [r4, #0]
   13ece:	b016      	add	sp, #88	; 0x58
   13ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13ed8:	2900      	cmp	r1, #0
   13eda:	4606      	mov	r6, r0
   13edc:	db25      	blt.n	13f2a <__smakebuf_r+0x76>
   13ede:	466a      	mov	r2, sp
   13ee0:	f000 f8ac 	bl	1403c <_fstat_r>
   13ee4:	2800      	cmp	r0, #0
   13ee6:	db1f      	blt.n	13f28 <__smakebuf_r+0x74>
   13ee8:	9d01      	ldr	r5, [sp, #4]
   13eea:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   13eee:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   13ef2:	fab5 f585 	clz	r5, r5
   13ef6:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13efa:	096d      	lsrs	r5, r5, #5
   13efc:	f44f 6700 	mov.w	r7, #2048	; 0x800
   13f00:	4641      	mov	r1, r8
   13f02:	4630      	mov	r0, r6
   13f04:	f7f5 fe1e 	bl	9b44 <_malloc_r>
   13f08:	b1e0      	cbz	r0, 13f44 <__smakebuf_r+0x90>
   13f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13f0e:	f8c4 8014 	str.w	r8, [r4, #20]
   13f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13f16:	6020      	str	r0, [r4, #0]
   13f18:	6120      	str	r0, [r4, #16]
   13f1a:	81a3      	strh	r3, [r4, #12]
   13f1c:	bb35      	cbnz	r5, 13f6c <__smakebuf_r+0xb8>
   13f1e:	433b      	orrs	r3, r7
   13f20:	81a3      	strh	r3, [r4, #12]
   13f22:	b016      	add	sp, #88	; 0x58
   13f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f28:	89a3      	ldrh	r3, [r4, #12]
   13f2a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   13f2e:	d019      	beq.n	13f64 <__smakebuf_r+0xb0>
   13f30:	f04f 0840 	mov.w	r8, #64	; 0x40
   13f34:	2500      	movs	r5, #0
   13f36:	4641      	mov	r1, r8
   13f38:	4630      	mov	r0, r6
   13f3a:	462f      	mov	r7, r5
   13f3c:	f7f5 fe02 	bl	9b44 <_malloc_r>
   13f40:	2800      	cmp	r0, #0
   13f42:	d1e2      	bne.n	13f0a <__smakebuf_r+0x56>
   13f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13f48:	059a      	lsls	r2, r3, #22
   13f4a:	d4c0      	bmi.n	13ece <__smakebuf_r+0x1a>
   13f4c:	f023 0303 	bic.w	r3, r3, #3
   13f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13f54:	f043 0302 	orr.w	r3, r3, #2
   13f58:	2101      	movs	r1, #1
   13f5a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13f5e:	81a3      	strh	r3, [r4, #12]
   13f60:	6022      	str	r2, [r4, #0]
   13f62:	e7b4      	b.n	13ece <__smakebuf_r+0x1a>
   13f64:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13f68:	462f      	mov	r7, r5
   13f6a:	e7c9      	b.n	13f00 <__smakebuf_r+0x4c>
   13f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13f70:	4630      	mov	r0, r6
   13f72:	f000 f879 	bl	14068 <_isatty_r>
   13f76:	b910      	cbnz	r0, 13f7e <__smakebuf_r+0xca>
   13f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13f7c:	e7cf      	b.n	13f1e <__smakebuf_r+0x6a>
   13f7e:	89a3      	ldrh	r3, [r4, #12]
   13f80:	f023 0303 	bic.w	r3, r3, #3
   13f84:	f043 0301 	orr.w	r3, r3, #1
   13f88:	b21b      	sxth	r3, r3
   13f8a:	e7c8      	b.n	13f1e <__smakebuf_r+0x6a>

00013f8c <__swbuf_r>:
   13f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f8e:	460d      	mov	r5, r1
   13f90:	4614      	mov	r4, r2
   13f92:	4606      	mov	r6, r0
   13f94:	b110      	cbz	r0, 13f9c <__swbuf_r+0x10>
   13f96:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13f98:	2b00      	cmp	r3, #0
   13f9a:	d04c      	beq.n	14036 <__swbuf_r+0xaa>
   13f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13fa0:	69a3      	ldr	r3, [r4, #24]
   13fa2:	60a3      	str	r3, [r4, #8]
   13fa4:	0717      	lsls	r7, r2, #28
   13fa6:	b290      	uxth	r0, r2
   13fa8:	d51b      	bpl.n	13fe2 <__swbuf_r+0x56>
   13faa:	6923      	ldr	r3, [r4, #16]
   13fac:	b1cb      	cbz	r3, 13fe2 <__swbuf_r+0x56>
   13fae:	b2ed      	uxtb	r5, r5
   13fb0:	0481      	lsls	r1, r0, #18
   13fb2:	462f      	mov	r7, r5
   13fb4:	d522      	bpl.n	13ffc <__swbuf_r+0x70>
   13fb6:	6822      	ldr	r2, [r4, #0]
   13fb8:	6961      	ldr	r1, [r4, #20]
   13fba:	1ad3      	subs	r3, r2, r3
   13fbc:	4299      	cmp	r1, r3
   13fbe:	dd29      	ble.n	14014 <__swbuf_r+0x88>
   13fc0:	3301      	adds	r3, #1
   13fc2:	68a1      	ldr	r1, [r4, #8]
   13fc4:	3901      	subs	r1, #1
   13fc6:	60a1      	str	r1, [r4, #8]
   13fc8:	1c51      	adds	r1, r2, #1
   13fca:	6021      	str	r1, [r4, #0]
   13fcc:	7015      	strb	r5, [r2, #0]
   13fce:	6962      	ldr	r2, [r4, #20]
   13fd0:	429a      	cmp	r2, r3
   13fd2:	d027      	beq.n	14024 <__swbuf_r+0x98>
   13fd4:	89a3      	ldrh	r3, [r4, #12]
   13fd6:	07db      	lsls	r3, r3, #31
   13fd8:	d501      	bpl.n	13fde <__swbuf_r+0x52>
   13fda:	2d0a      	cmp	r5, #10
   13fdc:	d022      	beq.n	14024 <__swbuf_r+0x98>
   13fde:	4638      	mov	r0, r7
   13fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13fe2:	4621      	mov	r1, r4
   13fe4:	4630      	mov	r0, r6
   13fe6:	f7ff fdaf 	bl	13b48 <__swsetup_r>
   13fea:	bb08      	cbnz	r0, 14030 <__swbuf_r+0xa4>
   13fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13ff0:	6923      	ldr	r3, [r4, #16]
   13ff2:	b290      	uxth	r0, r2
   13ff4:	b2ed      	uxtb	r5, r5
   13ff6:	0481      	lsls	r1, r0, #18
   13ff8:	462f      	mov	r7, r5
   13ffa:	d4dc      	bmi.n	13fb6 <__swbuf_r+0x2a>
   13ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14000:	81a2      	strh	r2, [r4, #12]
   14002:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14004:	6961      	ldr	r1, [r4, #20]
   14006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1400a:	6662      	str	r2, [r4, #100]	; 0x64
   1400c:	6822      	ldr	r2, [r4, #0]
   1400e:	1ad3      	subs	r3, r2, r3
   14010:	4299      	cmp	r1, r3
   14012:	dcd5      	bgt.n	13fc0 <__swbuf_r+0x34>
   14014:	4621      	mov	r1, r4
   14016:	4630      	mov	r0, r6
   14018:	f7fc fea0 	bl	10d5c <_fflush_r>
   1401c:	b940      	cbnz	r0, 14030 <__swbuf_r+0xa4>
   1401e:	6822      	ldr	r2, [r4, #0]
   14020:	2301      	movs	r3, #1
   14022:	e7ce      	b.n	13fc2 <__swbuf_r+0x36>
   14024:	4621      	mov	r1, r4
   14026:	4630      	mov	r0, r6
   14028:	f7fc fe98 	bl	10d5c <_fflush_r>
   1402c:	2800      	cmp	r0, #0
   1402e:	d0d6      	beq.n	13fde <__swbuf_r+0x52>
   14030:	f04f 37ff 	mov.w	r7, #4294967295
   14034:	e7d3      	b.n	13fde <__swbuf_r+0x52>
   14036:	f7f7 fab9 	bl	b5ac <__sinit>
   1403a:	e7af      	b.n	13f9c <__swbuf_r+0x10>

0001403c <_fstat_r>:
   1403c:	b570      	push	{r4, r5, r6, lr}
   1403e:	460c      	mov	r4, r1
   14040:	4d08      	ldr	r5, [pc, #32]	; (14064 <_fstat_r+0x28>)
   14042:	4603      	mov	r3, r0
   14044:	2600      	movs	r6, #0
   14046:	4620      	mov	r0, r4
   14048:	4611      	mov	r1, r2
   1404a:	461c      	mov	r4, r3
   1404c:	602e      	str	r6, [r5, #0]
   1404e:	f7f4 f9b9 	bl	83c4 <_fstat>
   14052:	1c43      	adds	r3, r0, #1
   14054:	d000      	beq.n	14058 <_fstat_r+0x1c>
   14056:	bd70      	pop	{r4, r5, r6, pc}
   14058:	682b      	ldr	r3, [r5, #0]
   1405a:	2b00      	cmp	r3, #0
   1405c:	d0fb      	beq.n	14056 <_fstat_r+0x1a>
   1405e:	6023      	str	r3, [r4, #0]
   14060:	bd70      	pop	{r4, r5, r6, pc}
   14062:	bf00      	nop
   14064:	2001e634 	.word	0x2001e634

00014068 <_isatty_r>:
   14068:	b538      	push	{r3, r4, r5, lr}
   1406a:	4d07      	ldr	r5, [pc, #28]	; (14088 <_isatty_r+0x20>)
   1406c:	2200      	movs	r2, #0
   1406e:	4604      	mov	r4, r0
   14070:	4608      	mov	r0, r1
   14072:	602a      	str	r2, [r5, #0]
   14074:	f7f4 f9ac 	bl	83d0 <_isatty>
   14078:	1c43      	adds	r3, r0, #1
   1407a:	d000      	beq.n	1407e <_isatty_r+0x16>
   1407c:	bd38      	pop	{r3, r4, r5, pc}
   1407e:	682b      	ldr	r3, [r5, #0]
   14080:	2b00      	cmp	r3, #0
   14082:	d0fb      	beq.n	1407c <_isatty_r+0x14>
   14084:	6023      	str	r3, [r4, #0]
   14086:	bd38      	pop	{r3, r4, r5, pc}
   14088:	2001e634 	.word	0x2001e634

0001408c <__aeabi_drsub>:
   1408c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   14090:	e002      	b.n	14098 <__adddf3>
   14092:	bf00      	nop

00014094 <__aeabi_dsub>:
   14094:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00014098 <__adddf3>:
   14098:	b530      	push	{r4, r5, lr}
   1409a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1409e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   140a2:	ea94 0f05 	teq	r4, r5
   140a6:	bf08      	it	eq
   140a8:	ea90 0f02 	teqeq	r0, r2
   140ac:	bf1f      	itttt	ne
   140ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   140b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   140b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   140ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   140be:	f000 80e2 	beq.w	14286 <__adddf3+0x1ee>
   140c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   140c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   140ca:	bfb8      	it	lt
   140cc:	426d      	neglt	r5, r5
   140ce:	dd0c      	ble.n	140ea <__adddf3+0x52>
   140d0:	442c      	add	r4, r5
   140d2:	ea80 0202 	eor.w	r2, r0, r2
   140d6:	ea81 0303 	eor.w	r3, r1, r3
   140da:	ea82 0000 	eor.w	r0, r2, r0
   140de:	ea83 0101 	eor.w	r1, r3, r1
   140e2:	ea80 0202 	eor.w	r2, r0, r2
   140e6:	ea81 0303 	eor.w	r3, r1, r3
   140ea:	2d36      	cmp	r5, #54	; 0x36
   140ec:	bf88      	it	hi
   140ee:	bd30      	pophi	{r4, r5, pc}
   140f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   140f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   140f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   140fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   14100:	d002      	beq.n	14108 <__adddf3+0x70>
   14102:	4240      	negs	r0, r0
   14104:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14108:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1410c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   14110:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   14114:	d002      	beq.n	1411c <__adddf3+0x84>
   14116:	4252      	negs	r2, r2
   14118:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1411c:	ea94 0f05 	teq	r4, r5
   14120:	f000 80a7 	beq.w	14272 <__adddf3+0x1da>
   14124:	f1a4 0401 	sub.w	r4, r4, #1
   14128:	f1d5 0e20 	rsbs	lr, r5, #32
   1412c:	db0d      	blt.n	1414a <__adddf3+0xb2>
   1412e:	fa02 fc0e 	lsl.w	ip, r2, lr
   14132:	fa22 f205 	lsr.w	r2, r2, r5
   14136:	1880      	adds	r0, r0, r2
   14138:	f141 0100 	adc.w	r1, r1, #0
   1413c:	fa03 f20e 	lsl.w	r2, r3, lr
   14140:	1880      	adds	r0, r0, r2
   14142:	fa43 f305 	asr.w	r3, r3, r5
   14146:	4159      	adcs	r1, r3
   14148:	e00e      	b.n	14168 <__adddf3+0xd0>
   1414a:	f1a5 0520 	sub.w	r5, r5, #32
   1414e:	f10e 0e20 	add.w	lr, lr, #32
   14152:	2a01      	cmp	r2, #1
   14154:	fa03 fc0e 	lsl.w	ip, r3, lr
   14158:	bf28      	it	cs
   1415a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1415e:	fa43 f305 	asr.w	r3, r3, r5
   14162:	18c0      	adds	r0, r0, r3
   14164:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   14168:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1416c:	d507      	bpl.n	1417e <__adddf3+0xe6>
   1416e:	f04f 0e00 	mov.w	lr, #0
   14172:	f1dc 0c00 	rsbs	ip, ip, #0
   14176:	eb7e 0000 	sbcs.w	r0, lr, r0
   1417a:	eb6e 0101 	sbc.w	r1, lr, r1
   1417e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   14182:	d31b      	bcc.n	141bc <__adddf3+0x124>
   14184:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   14188:	d30c      	bcc.n	141a4 <__adddf3+0x10c>
   1418a:	0849      	lsrs	r1, r1, #1
   1418c:	ea5f 0030 	movs.w	r0, r0, rrx
   14190:	ea4f 0c3c 	mov.w	ip, ip, rrx
   14194:	f104 0401 	add.w	r4, r4, #1
   14198:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1419c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   141a0:	f080 809a 	bcs.w	142d8 <__adddf3+0x240>
   141a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   141a8:	bf08      	it	eq
   141aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   141ae:	f150 0000 	adcs.w	r0, r0, #0
   141b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   141b6:	ea41 0105 	orr.w	r1, r1, r5
   141ba:	bd30      	pop	{r4, r5, pc}
   141bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   141c0:	4140      	adcs	r0, r0
   141c2:	eb41 0101 	adc.w	r1, r1, r1
   141c6:	3c01      	subs	r4, #1
   141c8:	bf28      	it	cs
   141ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   141ce:	d2e9      	bcs.n	141a4 <__adddf3+0x10c>
   141d0:	f091 0f00 	teq	r1, #0
   141d4:	bf04      	itt	eq
   141d6:	4601      	moveq	r1, r0
   141d8:	2000      	moveq	r0, #0
   141da:	fab1 f381 	clz	r3, r1
   141de:	bf08      	it	eq
   141e0:	3320      	addeq	r3, #32
   141e2:	f1a3 030b 	sub.w	r3, r3, #11
   141e6:	f1b3 0220 	subs.w	r2, r3, #32
   141ea:	da0c      	bge.n	14206 <__adddf3+0x16e>
   141ec:	320c      	adds	r2, #12
   141ee:	dd08      	ble.n	14202 <__adddf3+0x16a>
   141f0:	f102 0c14 	add.w	ip, r2, #20
   141f4:	f1c2 020c 	rsb	r2, r2, #12
   141f8:	fa01 f00c 	lsl.w	r0, r1, ip
   141fc:	fa21 f102 	lsr.w	r1, r1, r2
   14200:	e00c      	b.n	1421c <__adddf3+0x184>
   14202:	f102 0214 	add.w	r2, r2, #20
   14206:	bfd8      	it	le
   14208:	f1c2 0c20 	rsble	ip, r2, #32
   1420c:	fa01 f102 	lsl.w	r1, r1, r2
   14210:	fa20 fc0c 	lsr.w	ip, r0, ip
   14214:	bfdc      	itt	le
   14216:	ea41 010c 	orrle.w	r1, r1, ip
   1421a:	4090      	lslle	r0, r2
   1421c:	1ae4      	subs	r4, r4, r3
   1421e:	bfa2      	ittt	ge
   14220:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   14224:	4329      	orrge	r1, r5
   14226:	bd30      	popge	{r4, r5, pc}
   14228:	ea6f 0404 	mvn.w	r4, r4
   1422c:	3c1f      	subs	r4, #31
   1422e:	da1c      	bge.n	1426a <__adddf3+0x1d2>
   14230:	340c      	adds	r4, #12
   14232:	dc0e      	bgt.n	14252 <__adddf3+0x1ba>
   14234:	f104 0414 	add.w	r4, r4, #20
   14238:	f1c4 0220 	rsb	r2, r4, #32
   1423c:	fa20 f004 	lsr.w	r0, r0, r4
   14240:	fa01 f302 	lsl.w	r3, r1, r2
   14244:	ea40 0003 	orr.w	r0, r0, r3
   14248:	fa21 f304 	lsr.w	r3, r1, r4
   1424c:	ea45 0103 	orr.w	r1, r5, r3
   14250:	bd30      	pop	{r4, r5, pc}
   14252:	f1c4 040c 	rsb	r4, r4, #12
   14256:	f1c4 0220 	rsb	r2, r4, #32
   1425a:	fa20 f002 	lsr.w	r0, r0, r2
   1425e:	fa01 f304 	lsl.w	r3, r1, r4
   14262:	ea40 0003 	orr.w	r0, r0, r3
   14266:	4629      	mov	r1, r5
   14268:	bd30      	pop	{r4, r5, pc}
   1426a:	fa21 f004 	lsr.w	r0, r1, r4
   1426e:	4629      	mov	r1, r5
   14270:	bd30      	pop	{r4, r5, pc}
   14272:	f094 0f00 	teq	r4, #0
   14276:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1427a:	bf06      	itte	eq
   1427c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   14280:	3401      	addeq	r4, #1
   14282:	3d01      	subne	r5, #1
   14284:	e74e      	b.n	14124 <__adddf3+0x8c>
   14286:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1428a:	bf18      	it	ne
   1428c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   14290:	d029      	beq.n	142e6 <__adddf3+0x24e>
   14292:	ea94 0f05 	teq	r4, r5
   14296:	bf08      	it	eq
   14298:	ea90 0f02 	teqeq	r0, r2
   1429c:	d005      	beq.n	142aa <__adddf3+0x212>
   1429e:	ea54 0c00 	orrs.w	ip, r4, r0
   142a2:	bf04      	itt	eq
   142a4:	4619      	moveq	r1, r3
   142a6:	4610      	moveq	r0, r2
   142a8:	bd30      	pop	{r4, r5, pc}
   142aa:	ea91 0f03 	teq	r1, r3
   142ae:	bf1e      	ittt	ne
   142b0:	2100      	movne	r1, #0
   142b2:	2000      	movne	r0, #0
   142b4:	bd30      	popne	{r4, r5, pc}
   142b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   142ba:	d105      	bne.n	142c8 <__adddf3+0x230>
   142bc:	0040      	lsls	r0, r0, #1
   142be:	4149      	adcs	r1, r1
   142c0:	bf28      	it	cs
   142c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   142c6:	bd30      	pop	{r4, r5, pc}
   142c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   142cc:	bf3c      	itt	cc
   142ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   142d2:	bd30      	popcc	{r4, r5, pc}
   142d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   142d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   142dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   142e0:	f04f 0000 	mov.w	r0, #0
   142e4:	bd30      	pop	{r4, r5, pc}
   142e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   142ea:	bf1a      	itte	ne
   142ec:	4619      	movne	r1, r3
   142ee:	4610      	movne	r0, r2
   142f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   142f4:	bf1c      	itt	ne
   142f6:	460b      	movne	r3, r1
   142f8:	4602      	movne	r2, r0
   142fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   142fe:	bf06      	itte	eq
   14300:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   14304:	ea91 0f03 	teqeq	r1, r3
   14308:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1430c:	bd30      	pop	{r4, r5, pc}
   1430e:	bf00      	nop

00014310 <__aeabi_ui2d>:
   14310:	f090 0f00 	teq	r0, #0
   14314:	bf04      	itt	eq
   14316:	2100      	moveq	r1, #0
   14318:	4770      	bxeq	lr
   1431a:	b530      	push	{r4, r5, lr}
   1431c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14320:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14324:	f04f 0500 	mov.w	r5, #0
   14328:	f04f 0100 	mov.w	r1, #0
   1432c:	e750      	b.n	141d0 <__adddf3+0x138>
   1432e:	bf00      	nop

00014330 <__aeabi_i2d>:
   14330:	f090 0f00 	teq	r0, #0
   14334:	bf04      	itt	eq
   14336:	2100      	moveq	r1, #0
   14338:	4770      	bxeq	lr
   1433a:	b530      	push	{r4, r5, lr}
   1433c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14340:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14344:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   14348:	bf48      	it	mi
   1434a:	4240      	negmi	r0, r0
   1434c:	f04f 0100 	mov.w	r1, #0
   14350:	e73e      	b.n	141d0 <__adddf3+0x138>
   14352:	bf00      	nop

00014354 <__aeabi_f2d>:
   14354:	0042      	lsls	r2, r0, #1
   14356:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1435a:	ea4f 0131 	mov.w	r1, r1, rrx
   1435e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   14362:	bf1f      	itttt	ne
   14364:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   14368:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1436c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   14370:	4770      	bxne	lr
   14372:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   14376:	bf08      	it	eq
   14378:	4770      	bxeq	lr
   1437a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1437e:	bf04      	itt	eq
   14380:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   14384:	4770      	bxeq	lr
   14386:	b530      	push	{r4, r5, lr}
   14388:	f44f 7460 	mov.w	r4, #896	; 0x380
   1438c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   14390:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   14394:	e71c      	b.n	141d0 <__adddf3+0x138>
   14396:	bf00      	nop

00014398 <__aeabi_ul2d>:
   14398:	ea50 0201 	orrs.w	r2, r0, r1
   1439c:	bf08      	it	eq
   1439e:	4770      	bxeq	lr
   143a0:	b530      	push	{r4, r5, lr}
   143a2:	f04f 0500 	mov.w	r5, #0
   143a6:	e00a      	b.n	143be <__aeabi_l2d+0x16>

000143a8 <__aeabi_l2d>:
   143a8:	ea50 0201 	orrs.w	r2, r0, r1
   143ac:	bf08      	it	eq
   143ae:	4770      	bxeq	lr
   143b0:	b530      	push	{r4, r5, lr}
   143b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   143b6:	d502      	bpl.n	143be <__aeabi_l2d+0x16>
   143b8:	4240      	negs	r0, r0
   143ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   143be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   143c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   143c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   143ca:	f43f aed8 	beq.w	1417e <__adddf3+0xe6>
   143ce:	f04f 0203 	mov.w	r2, #3
   143d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   143d6:	bf18      	it	ne
   143d8:	3203      	addne	r2, #3
   143da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   143de:	bf18      	it	ne
   143e0:	3203      	addne	r2, #3
   143e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   143e6:	f1c2 0320 	rsb	r3, r2, #32
   143ea:	fa00 fc03 	lsl.w	ip, r0, r3
   143ee:	fa20 f002 	lsr.w	r0, r0, r2
   143f2:	fa01 fe03 	lsl.w	lr, r1, r3
   143f6:	ea40 000e 	orr.w	r0, r0, lr
   143fa:	fa21 f102 	lsr.w	r1, r1, r2
   143fe:	4414      	add	r4, r2
   14400:	e6bd      	b.n	1417e <__adddf3+0xe6>
   14402:	bf00      	nop

00014404 <__aeabi_d2lz>:
   14404:	b508      	push	{r3, lr}
   14406:	4602      	mov	r2, r0
   14408:	460b      	mov	r3, r1
   1440a:	ec43 2b17 	vmov	d7, r2, r3
   1440e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   14412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14416:	d403      	bmi.n	14420 <__aeabi_d2lz+0x1c>
   14418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1441c:	f000 b80c 	b.w	14438 <__aeabi_d2ulz>
   14420:	eeb1 7b47 	vneg.f64	d7, d7
   14424:	ec51 0b17 	vmov	r0, r1, d7
   14428:	f000 f806 	bl	14438 <__aeabi_d2ulz>
   1442c:	4240      	negs	r0, r0
   1442e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14432:	bd08      	pop	{r3, pc}
   14434:	0000      	movs	r0, r0
	...

00014438 <__aeabi_d2ulz>:
   14438:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 14468 <__aeabi_d2ulz+0x30>
   1443c:	ec41 0b17 	vmov	d7, r0, r1
   14440:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 14470 <__aeabi_d2ulz+0x38>
   14444:	ee27 6b06 	vmul.f64	d6, d7, d6
   14448:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   1444c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   14450:	eea4 7b45 	vfms.f64	d7, d4, d5
   14454:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   14458:	ee16 1a10 	vmov	r1, s12
   1445c:	ee17 0a90 	vmov	r0, s15
   14460:	4770      	bx	lr
   14462:	bf00      	nop
   14464:	f3af 8000 	nop.w
   14468:	00000000 	.word	0x00000000
   1446c:	3df00000 	.word	0x3df00000
   14470:	00000000 	.word	0x00000000
   14474:	41f00000 	.word	0x41f00000

00014478 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   14478:	f85f f000 	ldr.w	pc, [pc]	; 1447c <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1447c:	60001655 	.word	0x60001655

00014480 <___init_veneer>:
   14480:	f85f f000 	ldr.w	pc, [pc]	; 14484 <___init_veneer+0x4>
   14484:	600025f1 	.word	0x600025f1

00014488 <___ZN16CrashReportClasscvbEv_veneer>:
   14488:	f85f f000 	ldr.w	pc, [pc]	; 1448c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1448c:	60001ded 	.word	0x60001ded

00014490 <___reboot_Teensyduino__veneer>:
   14490:	f85f f000 	ldr.w	pc, [pc]	; 14494 <___reboot_Teensyduino__veneer+0x4>
   14494:	60002549 	.word	0x60002549
	...

Disassembly of section .fini:

000144a0 <_fini>:
   144a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   144a2:	bf00      	nop
